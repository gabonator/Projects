diff --git a/cc1.clean b/cc1.cpp
index 78eb61d..28d7d19 100644
--- a/cc1.clean
+++ b/cc1.cpp
@@ -1509,8 +1509,10 @@ loc_28c5: // 01ed:09f5
     si = pop();
     dx = pop();
     cx = pop();
-    stop("stack_unbalanced");
-    sp += 2;
+    bx = pop();
+    ax = pop();
+//    stop("stack_unbalanced");
+//    sp += 2;
     cs = pop();
 }
 void sub_29fd() // 01ed:0b2d
@@ -17518,6 +17520,8 @@ loc_f753: // 01ed:d883
         case 0x21882241: push(cs); cs = 0x2188; sub_23ac1(); assert(cs == 0x01ed); break;
         case 0x21880831: push(cs); cs = 0x2188; sub_220b1(); assert(cs == 0x01ed); break;
         default:
+            //printf("missing indirect di=%x %x\n", di, memoryAGet32(ds, di + 17927));
+            sp += 6;
             stop();
     }
 loc_f7ac: // 01ed:d8dc
@@ -19891,7 +19895,7 @@ loc_10f98: // 01ed:f0c8
     goto loc_119e0;
 loc_10fa2: // 01ed:f0d2
     ax = memoryAGet16(ds, 0x2b60);
-    if ((short)ax > (short)memoryAGet16(ds, 0xa0c0))
+//    if ((short)ax > (short)memoryAGet16(ds, 0xa0c0))
         goto loc_10fae;
     goto loc_119dd;
 loc_10fae: // 01ed:f0de
@@ -22332,6 +22336,7 @@ loc_12800: // 11b2:0ce0
     push(ax);
     push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
 loc_12809: // 11b2:0ce9
+    sync();
     ax = 0;
     push(ax);
     di = 0x041a;
@@ -22345,6 +22350,7 @@ loc_12809: // 11b2:0ce9
     if ((short)memoryAGet16(ds, 0x2b5e) <= (short)0x0080)
         goto loc_12809;
 loc_12825: // 11b2:0d05
+    sync();
     ax = 0x0064;
     push(ax);
     push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
@@ -22539,6 +22545,7 @@ loc_12a0b: // 11b2:0eeb
     if (memoryAGet16(ss, bp - 30) != 0x00e0)
         goto loc_12a49;
 loc_12a18: // 11b2:0ef8
+    sync();
     al = memoryAGet(ds, 0x2b5e);
     push(ax);
     di = 0x0837;
@@ -31538,6 +31545,8 @@ loc_19e44: // 11b2:8324
     ax = 0;
     memoryASet16(ds, 0x2b5e, ax);
 loc_19e7a: // 11b2:835a
+    memoryASet16(ds, 0x2b60, memoryAGet16(ds, 0x2b60)+10);
+    sync();
     if ((short)memoryAGet16(ds, 0x2b60) > (short)0x01b0)
         goto loc_19e88;
     if (memoryAGet(ss, bp - 5) == 0x00)
@@ -31653,6 +31662,8 @@ loc_19f44: // 11b2:8424
     ax = 0;
     memoryASet16(ds, 0x2b5e, ax);
 loc_19f7a: // 11b2:845a
+    memoryASet16(ds, 0x2b60, memoryAGet16(ds, 0x2b60)+10);
+    sync();
     if ((short)memoryAGet16(ds, 0x2b60) > (short)0x01b0)
         goto loc_19f88;
     if (memoryAGet(ss, bp - 5) == 0x00)
@@ -34725,6 +34736,7 @@ void sub_1c95b() // 11b2:ae3b +far
     ax = 0;
     memoryASet16(ds, 0x2b60, ax);
 loc_1c9e8: // 11b2:aec8
+    sync();
     push(cs); cs = 0x2a41; sub_2a70a(); assert(cs == 0x11b2);
     if (al)
         goto loc_1c9f9;
@@ -40158,7 +40170,12 @@ loc_20351: // 1f5c:0d91
     memoryASet16(ss, bp - 2, 0xfff9);
     goto loc_2037a;
 loc_20376: // 1f5c:0db6
-    cs = memoryAGet16(es, di + 36 + 2); indirectJump(cs, memoryAGet16(es, di + 36)); stop();;
+    //    cs = memoryAGet16(es, di + 36 + 2); indirectJump(cs, memoryAGet16(es, di + 36)); stop();;
+    assert(memoryAGet16(es, di + 0x24) == 0x10d7);
+    assert(memoryAGet16(es, di + 0x24) == 0x10d7);
+    cs = 0x1f5c;
+    sub_20697();
+    return;
 loc_2037a: // 1f5c:0dba
     ax = memoryAGet16(ss, bp - 2);
     di = pop();
@@ -40532,13 +40549,13 @@ loc_2085a: // 1f5c:129a
 loc_20869: // 1f5c:12a9
     ax = memoryAGet16(ss, bp - 2);
     di = pop();
-    stop("stack_below");
+//    stop("stack_below");
     si = pop();
     es = pop();
     ds = pop();
     sp = bp;
     bp = pop();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     sp += 2;
     cs = pop();
     sp += 12;
@@ -40546,7 +40563,7 @@ loc_20869: // 1f5c:12a9
 void sub_20ed5() // 1f5c:1915 +far +stackDrop12
 {
     sp -= 2;
-    stop("breakpoint");
+//    stop("breakpoint");
     push(bp);
     bp = sp;
     sp -= 0x0084;
@@ -55277,6 +55294,7 @@ void sub_2a21f() // 28b3:16ef +far
     push(ss);
     push(di);
     push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
+    assert(memoryAGet(ss, bp - 20) == 0x1a);
     if (memoryAGet(ss, bp - 20) != 0x1a)
         goto loc_2a26e;
     if (memoryAGet(ss, bp - 18) == 0xff)
@@ -55787,6 +55805,7 @@ void sub_2a703() // 2a41:02f3 +far
 }
 void sub_2a70a() // 2a41:02fa +far
 {
+    sync();
     if (memoryAGet(ds, 0xa139) != 0x00)
         goto loc_2a719;
     ah = 0x01;
@@ -56168,9 +56187,9 @@ loc_2ab84: // 2aa3:0154
     ah = al;
     dx = 0x03c0;
     al = 0x33;
-    out8(dx, al);
-    tl = al; al = ah; ah = tl;
-    out8(dx, al);
+//    out8(dx, al); gaboskip
+//    tl = al; al = ah; ah = tl;
+//    out8(dx, al);
     flags.interrupts = 1;
     bp = pop();
     sp += 2;
@@ -56219,9 +56238,9 @@ loc_2abd7: // 2aa3:01a7
     ah = al;
     dx = 0x03c0;
     al = 0x33;
-    out8(dx, al);
+//    out8(dx, al); //gaboskip
     tl = al; al = ah; ah = tl;
-    out8(dx, al);
+//    out8(dx, al); //gaboskip
     flags.interrupts = 1;
     bp = pop();
     sp += 2;
@@ -56402,6 +56421,7 @@ loc_2ae06: // 2aa3:03d6
     cx = 0x0010;
 loc_2ae0f: // 2aa3:03df
     dx = 0x03ce;
+    ds = ds ? ds : loadAddress;
     al = lodsb<DS_SI>();
     ah = 0x08;
     tl = al; al = ah; ah = tl;
@@ -56449,6 +56469,7 @@ loc_2ae0f: // 2aa3:03df
     bx += di;
     if (--cx)
         goto loc_2ae0f;
+     
     al = 0x0f;
     out8(dx, al);
     dx = 0x03ce;
@@ -56826,6 +56847,7 @@ void sub_2c34f() // 2aa3:191f +far +stackDrop10
 loc_2c39d: // 2aa3:196d
     memoryASet(cs, 0x17e8, 0x02);
 loc_2c3a3: // 2aa3:1973
+    ds = ds ? ds : loadAddress;
     dl = memoryAGet(cs, 0x17e8);
     dl--;
     memoryASet(cs, 0x17e8, dl);
@@ -57313,6 +57335,7 @@ loc_2d431: // 2aa3:2a01
     out8(dx, al);
     cx = 0x0010;
 loc_2d43a: // 2aa3:2a0a
+    ds = ds ? ds : loadAddress;
     al = lodsb<DS_SI>();
     dx = 0x03c5;
     al = 0x01;
@@ -57629,13 +57652,21 @@ void sub_2d99b() // 2d99:000b +far
     si = pop();
     ax = pop();
     flags.interrupts = 0;
-    stop("stack_unbalanced");
-    sp += 2;
-    cs = pop();
+//    stop("stack_unbalanced");
+//    sp += 2;
+//    cs = pop();
+    int newOfs = pop(); // reads 0000:0040 - video int https://www.fysnet.net/rombios.htm
+    int newSeg = pop(); // ds:bx = f000:1320
+    //printf("stack modify %04x:%04x, ah=%02x\n", newSeg, newOfs, ah);
+    // calls int 10 video op : f000:1320    EGA api call
+    interrupt(0x10);
+    // 2d99:0045 continues
+    sp += 6;
+    sub_2d9d5();
 }
 void sub_2d9d5() // 2d99:0045 +stackDrop8
 {
-    sp -= 2;
+//    sp -= 2;
     push(flagAsReg());
     push(es);
     push(di);
@@ -57661,11 +57692,11 @@ void sub_2d9d5() // 2d99:0045 +stackDrop8
     ax = pop();
     stosw<ES_DI>(ax);
     ax = pop();
-    stop("stack_below");
+//    stop("stack_below");
     stosw<ES_DI>(ax);
     ds = pop();
     bp = pop();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     sp += 2;
     cs = pop();
     sp += 6;
@@ -59617,7 +59648,7 @@ void sub_2e6d6() // 2da3:0ca6 +returnZero
     switch (memoryAGet32(es, bx + di))
     {
         case 0x2da30cb7: push(cs); cs = 0x2da3; sub_2e6e7(); assert(cs == 0x2da3); break;
-        case 0x2a410359: push(cs); cs = 0x2a41; sub_2a769(); assert(cs == 0x2da3); break;
+        case 0x2a410359: push(cs); cs = 0x2a41; sub_2a769(); assert(cs == 0x2da3); break; // TODO: stack balance
         default:
             stop();
     }
@@ -59628,7 +59659,7 @@ void sub_2e6d6() // 2da3:0ca6 +returnZero
 loc_2e6e4: // 2da3:0cb4
     di = pop();
     es = pop();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
 }
 void sub_2e6e7() // 2da3:0cb7 +stackDrop6
 {
@@ -62447,4 +62478,3 @@ int GetProcAt(int seg, int ofs)
 {{0x2da3, 0x10de}, 6}, // sub_2eb0e retf
 {{0x2da3, 0x11c8}, 10}, // sub_2ebf8 retf
 */
-Program ended with exit code: 0

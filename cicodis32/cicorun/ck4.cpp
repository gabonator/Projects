#include "cico16.h"
#include <stdio.h>
void fixReloc(uint16_t seg);
void sub_1ed0();

void start()
{
    headerSize = 0x2df0;
    loadAddress = 0x01ed;
    endAddress = 0x424d;
    cs = 0x01ed;
    ds = 0x01dd;
    es = 0x01dd;
    ss = 0x3f59;
    sp = 0x0080;
    load("", "KEEN4.EXE", 263472);
    fixReloc(cs);
    sub_1ed0();
}


void sub_1ed0();
void sub_1fe3();
void sub_2003();
void sub_203b();
void sub_207e();
void sub_20ab();
void sub_20ee();
void sub_20f6();
void sub_213d();
void sub_216a();
void sub_22b3();
void sub_22cc();
void sub_2385();
void sub_246d();
void sub_248b();
void sub_24b0();
void sub_2530();
void sub_256f();
void sub_25dc();
void sub_262e();
void sub_26b0();
void sub_277c();
void sub_2912();
void sub_2981();
void sub_2a2c();
void sub_2a7c();
void sub_2b13();
void sub_2bf3();
void sub_2c0c();
void sub_2d25();
void sub_2e73();
void sub_2ec7();
void sub_2eed();
void sub_2f26();
void sub_2f54();
void sub_301a();
void sub_3058();
void sub_309b();
void sub_30be();
void sub_3173();
void sub_31e4();
void sub_32bc();
void sub_32ff();
void sub_332b();
void sub_3357();
void sub_3383();
void sub_349f();
void sub_352c();
void sub_3551();
void sub_3573();
void sub_35d6();
void sub_35e9();
void sub_3604();
void sub_3622();
void sub_3632();
void sub_365c();
void sub_366a();
void sub_36ee();
void sub_370b();
void sub_37e5();
void sub_3845();
void sub_3886();
void sub_38e2();
void sub_38fd();
void sub_395b();
void sub_396a();
void sub_397b();
void sub_39b3();
void sub_3a24();
void sub_3a4b();
void sub_3a88();
void sub_3a99();
void sub_3ac2();
void sub_3b3f();
void sub_3b6b();
void sub_3b85();
void sub_3bac();
void sub_3bcd();
void sub_3bf5();
void sub_3c10();
void sub_3c32();
void sub_3c4b();
void sub_3c5d();
void sub_3d94();
void sub_3de0();
void sub_3e9b();
void sub_3ecb();
void sub_3eea();
void sub_3f10();
void sub_3fc1();
void sub_4135();
void sub_4151();
void sub_418a();
void sub_41b9();
void sub_41dd();
void sub_41f7();
void sub_4223();
void sub_4710();
void sub_4736();
void sub_47af();
void sub_4b7b();
void sub_4bdd();
void sub_4c4e();
void sub_4c77();
void sub_4cad();
void sub_4cd6();
void sub_4d37();
void sub_4d70();
void sub_4d93();
void sub_4f5a();
void sub_4f95();
void sub_5043();
void sub_5064();
void sub_5084();
void sub_50a5();
void sub_50e9();
void sub_512a();
void sub_512d();
void sub_518a();
void sub_51b5();
void sub_51d7();
void sub_51f8();
void sub_5215();
void sub_524f();
void sub_5288();
void sub_52a4();
void sub_52c7();
void sub_5327();
void sub_5367();
void sub_5390();
void sub_5473();
void sub_548a();
void sub_54b1();
void sub_5540();
void sub_55c4();
void sub_561c();
void sub_5683();
void sub_56ac();
void sub_571f();
void sub_5747();
void sub_58cf();
void sub_59c9();
void sub_59e9();
void sub_5a6b();
void sub_5b97();
void sub_5d4b();
void sub_5dab();
void sub_5e05();
void sub_5ed6();
void sub_6078();
void sub_618c();
void sub_6441();
void sub_6510();
void sub_6612();
void sub_67d5();
void sub_6ab4();
void sub_6d6f();
void sub_7116();
void sub_7184();
void sub_73aa();
void sub_742a();
void sub_7515();
void sub_7658();
void sub_776a();
void sub_77d1();
void sub_78b3();
void sub_799e();
void sub_7af5();
void sub_7b73();
void sub_7ba3();
void sub_7f94();
void sub_8051();
void sub_80a1();
void sub_817d();
void sub_82fa();
void sub_836b();
void sub_8370();
void sub_8404();
void sub_8891();
void sub_8aab();
void sub_8b2f();
void sub_8c09();
void sub_8f8e();
void sub_90b1();
void sub_9113();
void sub_927c();
void sub_9700();
void sub_9775();
void sub_9a42();
void sub_9ac1();
void sub_a191();
void sub_a345();
void sub_a423();
void sub_a56d();
void sub_a83e();
void sub_a8b1();
void sub_a92b();
void sub_a992();
void sub_a9e7();
void sub_ab32();
void sub_ab67();
void sub_ac66();
void sub_b02a();
void sub_b03d();
void sub_b0a3();
void sub_b0c1();
void sub_b148();
void sub_b377();
void sub_b3dc();
void sub_b3fe();
void sub_b4b2();
void sub_b6c1();
void sub_b7bc();
void sub_b9c5();
void sub_bc95();
void sub_bcbd();
void sub_bce5();
void sub_be2f();
void sub_bf6a();
void sub_c0f9();
void sub_c1e8();
void sub_c335();
void sub_c5c6();
void sub_c7d9();
void sub_cb7e();
void sub_cd27();
void sub_ce1c();
void sub_ce9a();
void sub_eab9();
void sub_ed9d();
void sub_efb9();
void sub_f838();
void sub_f88b();
void sub_f90f();
void sub_fc78();
void sub_10069();
void sub_101bd();
void sub_1021b();
void sub_107c3();
void sub_11226();
void sub_1493f();
void sub_149c4();
void sub_14a24();
void sub_14a70();
void sub_14bb3();
void sub_14bfc();
void sub_14d25();
void sub_14fb5();
void sub_15071();
void sub_1520d();
void sub_15240();
void sub_15284();
void sub_152c9();
void sub_152f2();
void sub_15458();
void sub_154de();
void sub_15559();
void sub_15835();
void sub_15a47();
void sub_15b90();
void sub_15dfd();
void sub_15e1d();
void sub_15e4a();
void sub_15e92();
void sub_15ec3();
void sub_15f4f();
void sub_1617b();
void sub_164db();
void sub_166a0();
void sub_166b8();
void sub_166cd();
void sub_16768();
void sub_1690f();
void sub_16948();
void sub_1699b();
void sub_169d8();
void sub_16a06();
void sub_16a2b();
void sub_16a30();
void sub_16aa7();
void sub_16b32();
void sub_16b8f();
void sub_16c64();
void sub_16cf6();
void sub_16d38();
void sub_16d78();
void sub_16d9b();
void sub_16dc9();
void sub_16e8e();
void sub_171f8();
void sub_17209();
void sub_17251();
void sub_17271();
void sub_1728f();
void sub_172ef();
void sub_1732a();
void sub_173af();
void sub_17413();
void sub_17462();
void sub_174b1();
void sub_174e7();
void sub_17595();
void sub_175b9();
void sub_17631();
void sub_1764c();
void sub_176bb();
void sub_176e6();
void sub_17875();
void sub_178db();
void sub_17b92();
void sub_17bc2();
void sub_17e37();
void sub_17f02();
void sub_17f85();
void sub_1800d();
void sub_181ed();
void sub_1832f();
void sub_18396();
void sub_18414();
void sub_1841f();
void sub_18544();
void sub_18549();
void sub_185d2();
void sub_18728();
void sub_18af2();
void sub_18b2a();
void sub_18c78();
void sub_18cbb();
void sub_18d56();
void sub_18e41();
void sub_18e88();
void sub_18f0b();
void sub_18f18();
void sub_18f71();
void sub_19060();
void sub_19072();
void sub_19169();
void sub_19435();
void sub_19630();
void sub_196fc();
void sub_19743();
void sub_197ed();
void sub_19a51();
void sub_19c6b();
void sub_19cf3();
void sub_19e7e();
void sub_1a07e();
void sub_1a13c();
void sub_1a31a();
void sub_1a474();
void sub_1a61e();
void sub_1a643();
void sub_1a68b();
void sub_1a6b9();
void sub_1a6d3();
void sub_1a754();
void sub_1a76e();
void sub_1a7b0();
void sub_1a7d1();
void sub_1a8e7();
void sub_1a966();
void sub_1a9ee();
void sub_1aaa1();
void sub_1aadb();
void sub_1ab14();
void sub_1ab39();
void sub_1ac05();
void sub_1ace7();
void sub_1ad0b();
void sub_1ad22();
void sub_1ad3d();
void sub_1ad5b();
void sub_1ade0();
void sub_1ae36();
void sub_1af23();
void sub_1afaf();
void sub_1b001();
void sub_1b0a0();
void sub_1b0e7();
void sub_1b10d();
void sub_1b11a();
void sub_1b125();
void sub_1b172();
void sub_1b1c4();
void sub_1b1d7();
void sub_1b324();
void sub_1b334();
void sub_1b360();
void sub_1b528();
void sub_1b670();
void sub_1b727();
void sub_1b7a1();
void sub_1b7c2();
void sub_1b7df();
void sub_1b895();
void sub_1b8de();
void sub_1b963();
void sub_1b97a();
void sub_1b9fe();
void sub_1ba90();
void sub_1baf1();
void sub_1be1c();
void sub_1beba();
void sub_1bed9();
void sub_1bf52();
void sub_1bf7a();
void sub_1bfa2();
void sub_1bfff();
void sub_1c040();
void sub_1c09d();
void sub_1c0e2();
void sub_1c10f();
void sub_1c250();
void sub_1c38f();
void sub_1c3e5();
void sub_1c765();
void sub_1c784();
void sub_1c7ab();
void sub_1c7d8();
void sub_1c870();
void sub_1c906();
void sub_1c9ac();
void sub_1cabe();
void sub_1caf1();
void sub_1cc96();
void sub_1ce48();
void sub_1cfcb();
void sub_1e07a();
void sub_1e111();
void sub_1e594();
void sub_1e5fe();
void sub_1e656();
void sub_1e697();
void sub_1e73a();
void sub_1e7c7();
void sub_1e800();
void sub_1e82a();
void sub_1e868();
void sub_1e8b3();
void sub_1e8ff();
void sub_1e9c5();
void sub_1eab5();
void sub_1eb86();
void sub_1ebe0();
void sub_1ec3b();
void sub_1ece2();
void sub_1eef2();
void sub_1ef1a();
void sub_1ef35();
void sub_1efc0();
void sub_1efdc();
void sub_1f019();
void sub_1f082();
void sub_1f09f();
void sub_1f20d();
void sub_1f23d();
void sub_1f28c();
void sub_1f4ad();
void sub_1f57e();
void sub_1f67d();
void sub_1f6bd();
void sub_1f707();
void sub_1f759();
void sub_1f7b6();
void sub_1f7bf();
void sub_1f85b();
void sub_1f8b1();
void sub_1f8c9();
void sub_1f8eb();
void sub_1f9cb();
void sub_1f9eb();
void sub_1fa3e();
void sub_1fba9();
void sub_1fc59();
void sub_1fd13();
void sub_1fd5c();
void sub_1fda5();
void sub_1fedf();
void sub_1ff28();
void sub_1ff70();
void sub_1ffbf();
void sub_2001f();
void sub_20085();
void sub_203b9();
void sub_20405();
void sub_2044f();
void sub_2050f();
void sub_2054a();
void sub_206c9();
void sub_2074a();
void sub_2077d();
void sub_207b9();
void sub_20929();
void sub_20a43();
void sub_20a8a();
void sub_20ad0();
void sub_20bb8();


    void callIndirect(int s, int o)
    {
        stop("ind");
    }

    void indirectJump(int s, int o)
    {
        stop("ind");
    }
// Problem: 01ed:05bb sub_248b - near&far&uses stack!
// Problem: 01ed:14b3 sub_3383 - near&far&uses stack!
// Problem: 01ed:1a9a sub_396a - near&far&uses stack!
// Problem: 01ed:1bc9 sub_3a99 - near&far&uses stack!
// Problem: 01ed:1cdc sub_3bac - near&far&uses stack!
// Problem: 01ed:230d sub_41dd - near&far&uses stack!
// Problem: 01ed:3328 sub_51f8 - near&far&uses stack!
// Problem: 01ed:33f7 sub_52c7 - near&far&uses stack!
// Problem: 056a:022f sub_58cf - near&far&uses stack!
// Problem: 056a:0329 sub_59c9 - near&far&uses stack!
// Problem: 05da:1a31 sub_77d1 - near&far&uses stack!
// Problem: 07b1:0591 sub_80a1 - near&far&uses stack!
// Problem: 08aa:1e11 sub_a8b1 - near&far&uses stack!
// Problem: 08aa:1e8b sub_a92b - near&far&uses stack!
// Problem: 08aa:2092 sub_ab32 - near&far&uses stack!
// Problem: 08aa:20c7 sub_ab67 - near&far&uses stack!
// Problem: 0bc9:06a5 sub_c335 - near&far&uses stack!
// Problem: 1493:00f4 sub_14a24 - near&far&uses stack!
// Problem: 1493:09c2 sub_152f2 - near&far&uses stack!
// Problem: 1493:0bae sub_154de - near&far&uses stack!
// Problem: 1493:151a sub_15e4a - near&far&uses stack!
// Problem: 1493:184b sub_1617b - near&far&uses stack!
// Problem: 164d:08a8 sub_16d78 - near&far&uses stack!
// Problem: 164d:0f43 sub_17413 - near&far&uses stack!
// Problem: 174b:0236 sub_176e6 - near&far&uses stack!
// Problem: 174b:06e2 sub_17b92 - near&far&uses stack!
// Problem: 174b:0712 sub_17bc2 - near&far&uses stack!
// Problem: 174b:0987 sub_17e37 - near&far&uses stack!
// Problem: 174b:0ad5 sub_17f85 - near&far&uses stack!
// Problem: 1841:06e2 sub_18af2 - near&far&uses stack!
// Problem: 1841:1333 sub_19743 - near&far&uses stack!
// Problem: 1841:185b sub_19c6b - near&far&uses stack!
// Problem: 1841:1c6e sub_1a07e - near&far&uses stack!
// Problem: 1a61:074b sub_1ad5b - near&far&uses stack!
// Problem: 1a61:07d0 sub_1ade0 - near&far&uses stack!
// Problem: 1a61:0a90 sub_1b0a0 - near&far&uses stack!
// Problem: 1a61:0ad7 sub_1b0e7 - near&far&uses stack!
// Problem: 1a61:0b0a sub_1b11a - near&far&uses stack!
// Problem: 1a61:0b15 sub_1b125 - near&far&uses stack!
// Problem: 1b1e:05ff sub_1b7df - near&far&uses stack!
// Problem: 1b1e:0cf9 sub_1bed9 - near&far&uses stack!
// Problem: 1ef3:00ac sub_1efdc - near&far&uses stack!
// Problem: 1ef3:02dd sub_1f20d - near&far&uses stack!
// Problem: 1ef3:057d sub_1f4ad - near&far&uses stack!
// Problem: 1ef3:064e sub_1f57e - near&far&uses stack!
// Problem: 1ef3:078d sub_1f6bd - near&far&uses stack!
// Problem: 1ef3:0e2c sub_1fd5c - near&far&uses stack!
// Problem: 1ef3:0e75 sub_1fda5 - near&far&uses stack!
void sub_1ed0() // 01ed:0000
{
//    sp -= 2;
    dx = 0x30d4;
    memoryASet16(cs, 0x023c, dx);
    ah = 0x30;
    interrupt(0x21);
    bp = memoryAGet16(ds, 0x0002);
    bx = memoryAGet16(ds, 0x002c);
    ds = dx;
    memoryASet16(ds, 0x0092, ax);
    memoryASet16(ds, 0x0090, es);
    memoryASet16(ds, 0x008c, bx);
    memoryASet16(ds, 0x00a8, bp);
    sub_203b();
    di = memoryAGet16(ds, 0x008a); es = memoryAGet16(ds, 0x008a + 2); /*ggg2*/;
    ax = di;
    bx = ax;
    cx = 0x7fff;
    flags.direction = 0;
loc_1f04: // 01ed:0034
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (cx==0)
        goto loc_1f69;
    bx++;
    if (memoryAGet(es, di) != al)
        goto loc_1f04;
    ch |= 0x80;
    cx = -cx;
    memoryASet16(ds, 0x008a, cx);
    cx = 0x0001;
    bx <<= cl;
    bx += 0x0008;
    bx &= 0xfff8;
    memoryASet16(ds, 0x008e, bx);
    dx = ds;
    bp -= dx;
    di = memoryAGet16(ds, 0x7344);
    if (di >= 0x0200)
        goto loc_1f3b;
    di = 0x0200;
    memoryASet16(ds, 0x7344, di);
loc_1f3b: // 01ed:006b
    flags.carry = (di + 0xe846) >= 0x10000;
    di += 0xe846;
    if (flags.carry)
        goto loc_1f69;
    flags.carry = (di + memoryAGet16(ds, 0x7104)) >= 0x10000;
    di += memoryAGet16(ds, 0x7104);
    if (flags.carry)
        goto loc_1f69;
    cl = 0x04;
    di >>= cl;
    di++;
    if (bp < di)
        goto loc_1f69;
    if (memoryAGet16(ds, 0x7344) == 0x0000)
        goto loc_1f5e;
    if (memoryAGet16(ds, 0x7104) != 0x0000)
        goto loc_1f6c;
loc_1f5e: // 01ed:008e
    di = 0x1000;
    if (bp > di)
        goto loc_1f6c;
    di = bp;
    goto loc_1f6c;
loc_1f69: // 01ed:0099
    sub_20f6();
    stop("stack_below");
    return;
loc_1f6c: // 01ed:009c
    bx = di;
    bx += dx;
    memoryASet16(ds, 0x00a0, bx);
    memoryASet16(ds, 0x00a4, bx);
    ax = memoryAGet16(ds, 0x0090);
    bx -= ax;
    es = ax;
    ah = 0x4a;
    push(di);
    interrupt(0x21);
    di = pop();
    di <<= cl;
    flags.interrupts = 0;
    ss = dx;
    sp = di;
    flags.interrupts = 1;
    ax = 0;
    es = memoryAGet16(cs, 0x023c);
    di = 0x7464;
    cx = 0xe846;
    cx -= di;
    flags.direction = 0;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    ah = 0x00;
    interrupt(0x1a);
    memoryASet16(ds, 0x0096, dx);
    memoryASet16(ds, 0x0098, cx);
    bp = 0;
    ax = 0x30d4;
    ds = ax;
    si = 0x744c;
    di = 0x7464;
    sub_20ab();
    ds = memoryAGet16(cs, 0x023c);
    memoryASet(cs, 0x01ed, 0x72);
    memoryASet(cs, 0x01dc, 0x00);
    push(memoryAGet16(ds, 0x0088));
    push(memoryAGet16(ds, 0x0086));
    push(memoryAGet16(ds, 0x0084));
    push(cs); cs = 0x056a; sub_5d4b(); assert(cs == 0x01ed);
    push(ax);
    push(cs);
    sub_248b();
    ax = 0x30d4;
    ds = ax;
    si = 0x7464;
    di = 0x7464;
    sub_20ab();
    ds = memoryAGet16(cs, 0x023c);
    push(cs); cs = memoryAGet16(ds, 0x6f8a + 2); callIndirect(cs, memoryAGet16(ds, 0x6f8a)); assert(cs == 0x01ed); // 01ed:0126;
    push(cs); cs = memoryAGet16(ds, 0x6f8e + 2); callIndirect(cs, memoryAGet16(ds, 0x6f8e)); assert(cs == 0x01ed); // 01ed:012a;
    push(cs); cs = memoryAGet16(ds, 0x6f92 + 2); callIndirect(cs, memoryAGet16(ds, 0x6f92)); assert(cs == 0x01ed); // 01ed:012e;
    push(ax);
    ds = memoryAGet16(cs, 0x023c);
    push(cs);
    sub_207e();
    ax = 0;
    si = ax;
    cx = 0x002f;
loc_2013: // 01ed:0143
    flags.carry = (al + memoryAGet(ds, si)) >= 0x100;
    al += memoryAGet(ds, si);
    ah += 0x00 + flags.carry;
    si++;
    if (--cx)
        goto loc_2013;
    ax -= 0x0d5c;
    if (!ax)
        goto loc_2029;
    cx = 0x0019;
    dx = 0x002f;
    sub_20ee();
loc_2029: // 01ed:0159
    bp = sp;
    ah = 0x4c;
    al = memoryAGet(ss, bp + 4);
    interrupt(0x21);
    stop("terminating");
}
void sub_1fe3() // 01ed:0113
{
    sp -= 2;
    ax = 0x30d4;
    ds = ax;
    si = 0x7464;
    di = 0x7464;
    sub_20ab();
    ds = memoryAGet16(cs, 0x023c);
    push(cs); cs = memoryAGet16(ds, 0x6f8a + 2); callIndirect(cs, memoryAGet16(ds, 0x6f8a)); assert(cs == 0x01ed); // 01ed:0126;
    push(cs); cs = memoryAGet16(ds, 0x6f8e + 2); callIndirect(cs, memoryAGet16(ds, 0x6f8e)); assert(cs == 0x01ed); // 01ed:012a;
    push(cs); cs = memoryAGet16(ds, 0x6f92 + 2); callIndirect(cs, memoryAGet16(ds, 0x6f92)); assert(cs == 0x01ed); // 01ed:012e;
    push(ax);
    ds = memoryAGet16(cs, 0x023c);
    push(cs);
    sub_207e();
    ax = 0;
    si = ax;
    cx = 0x002f;
loc_2013: // 01ed:0143
    flags.carry = (al + memoryAGet(ds, si)) >= 0x100;
    al += memoryAGet(ds, si);
    ah += 0x00 + flags.carry;
    si++;
    if (--cx)
        goto loc_2013;
    ax -= 0x0d5c;
    if (!ax)
        goto loc_2029;
    cx = 0x0019;
    dx = 0x002f;
    sub_20ee();
loc_2029: // 01ed:0159
    bp = sp;
    ah = 0x4c;
    al = memoryAGet(ss, bp + 4);
    interrupt(0x21);
    stop("terminating");
}
void sub_2003() // 01ed:0133
{
    sp -= 2;
    ds = memoryAGet16(cs, 0x023c);
    push(cs);
    sub_207e();
    ax = 0;
    si = ax;
    cx = 0x002f;
loc_2013: // 01ed:0143
    flags.carry = (al + memoryAGet(ds, si)) >= 0x100;
    al += memoryAGet(ds, si);
    ah += 0x00 + flags.carry;
    si++;
    if (--cx)
        goto loc_2013;
    ax -= 0x0d5c;
    if (!ax)
        goto loc_2029;
    cx = 0x0019;
    dx = 0x002f;
    sub_20ee();
loc_2029: // 01ed:0159
    bp = sp;
    ah = 0x4c;
    al = memoryAGet(ss, bp + 4);
    interrupt(0x21);
    stop("terminating");
}
void sub_203b() // 01ed:016b
{
    push(ds);
    ax = 0x3500;
    interrupt(0x21);
    memoryASet16(ds, 0x0074, bx);
    memoryASet16(ds, 0x0076, es);
    ax = 0x3504;
    interrupt(0x21);
    memoryASet16(ds, 0x0078, bx);
    memoryASet16(ds, 0x007a, es);
    ax = 0x3505;
    interrupt(0x21);
    memoryASet16(ds, 0x007c, bx);
    memoryASet16(ds, 0x007e, es);
    ax = 0x3506;
    interrupt(0x21);
    memoryASet16(ds, 0x0080, bx);
    memoryASet16(ds, 0x0082, es);
    ax = 0x2500;
    dx = cs;
    ds = dx;
    dx = 0x0162;
    interrupt(0x21);
    ds = pop();
}
void sub_207e() // 01ed:01ae +stackDrop2
{
    push(ds);
    ax = 0x2500;
    dx = memoryAGet16(ds, 0x0074); ds = memoryAGet16(ds, 0x0074 + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    push(ds);
    ax = 0x2504;
    dx = memoryAGet16(ds, 0x0078); ds = memoryAGet16(ds, 0x0078 + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    push(ds);
    ax = 0x2505;
    dx = memoryAGet16(ds, 0x007c); ds = memoryAGet16(ds, 0x007c + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    push(ds);
    ax = 0x2506;
    dx = memoryAGet16(ds, 0x0080); ds = memoryAGet16(ds, 0x0080 + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    cs = pop();
}
void sub_20ab() // 01ed:01db
{
    sp -= 2;
loc_20ab: // 01ed:01db
    ah = 0xff;
    dx = di;
    bx = si;
loc_20b1: // 01ed:01e1
    if (bx == di)
        goto loc_20c9;
    if (memoryAGet(ds, bx) == 0xff)
        goto loc_20c4;
    if (memoryAGet(ds, bx + 1) > ah)
        goto loc_20c4;
    ah = memoryAGet(ds, bx + 1);
    dx = bx;
loc_20c4: // 01ed:01f4
    bx += 0x0006;
    goto loc_20b1;
loc_20c9: // 01ed:01f9
    if (dx == di)
        goto loc_20ed;
    bx = dx;
    push(ds);
    es = pop();
    push(es);
    flags.zero = memoryAGet(ds, bx) == 0x00;
    memoryASet(ds, bx, 0xff);
    ds = memoryAGet16(cs, 0x023c);
    if (flags.zero)
        goto loc_20e6;
    push(cs); cs = memoryAGet16(es, bx + 2 + 2); callIndirect(cs, memoryAGet16(es, bx + 2)); assert(cs == 0x01ed); // 01ed:020f;
    ds = pop();
    goto loc_20ab;
loc_20e6: // 01ed:0216
    switch (memoryAGet16(es, bx + 2))
    {
        case 0x12a3: sub_3173(); break;
        case 0x36f4: sub_55c4(); break;
        case 0x35e1: sub_54b1(); break;
        case 0x181e: sub_36ee(); break;
        default:
            stop();
    }
    ds = pop();
    goto loc_20ab;
loc_20ed: // 01ed:021d
    sp += 2;
    return;
}
void sub_20ee() // 01ed:021e
{
    ah = 0x40;
    bx = 0x0002;
    interrupt(0x21);
}
void sub_20f6() // 01ed:0226 +stackDrop2 +isolate
{
    cx = 0x001e;
    dx = 0x0056;
    ds = memoryAGet16(cs, 0x023c);
    sub_20ee();
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_2003();
    memoryASet(ds, bx + si, memoryAGet(ds, bx + si) + al);
    al += memoryAGet(ds, bx + si + -29867);
    al = in8(dx);
    if (memoryAGet16(ds, 0x6e86) != 0x0020)
        goto loc_211f;
    ax = 0x0001;
    goto loc_213b;
loc_211f: // 01ed:024f
    bx = memoryAGet16(ds, 0x6e86);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, bx + 30950, ax);
    memoryASet16(ds, bx + 30948, dx);
    memoryASet16(ds, 0x6e86, memoryAGet16(ds, 0x6e86) + 1);
    ax = 0;
loc_213b: // 01ed:026b
    bp = pop();
    stop("stack_unbalanced");
    cs = pop();
}
void sub_213d() // 01ed:026d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if ((short)si < 0)
        goto loc_214d;
    if ((short)si < (short)0x0014)
        goto loc_2156;
loc_214d: // 01ed:027d
    ax = 0x0006;
    push(ax);
    sub_3a4b();
    goto loc_2167;
loc_2156: // 01ed:0286
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 28888, 0xffff);
    push(si);
    push(cs);
    sub_3604();
    cx = pop();
loc_2167: // 01ed:0297
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_216a() // 01ed:029a +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 6);
    memoryASet(ss, bp - 5, 0x00);
    sub_3357();
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    sub_3357();
    cl = 0x08;
    ax >>= cl;
    ah = 0x00;
    memoryASet16(ss, bp - 4, ax);
    goto loc_226b;
loc_2193: // 01ed:02c3
    bx = si;
    si++;
    al = memoryAGet(ds, bx);
    memoryASet(ss, bp - 5, al);
    ah = 0x00;
    ax -= 0x0007;
    bx = ax;
    if (bx > 0x0006)
        goto loc_21d5;
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 959)); // 01ed:02d9;
  // gap 39 bytes
loc_21d5: // 01ed:0305
    al = memoryAGet(ds, 0x7351);
    ah = 0x00;
    if (ax)
        goto loc_220c;
    if (memoryAGet16(ds, 0x7357) == 0x0000)
        goto loc_220c;
    ah = memoryAGet(ds, 0x734c);
    al = memoryAGet(ss, bp - 5);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    push(ax);
    sub_4710();
    push(dx);
    push(ax);
    push(ss);
    ax = bp - 8;
    push(ax);
    ax = 0x0001;
    push(ax);
    sub_4736();
    goto loc_222a;
loc_220c: // 01ed:033c
    dl = memoryAGet(ss, bp - 2);
    dh = memoryAGet(ss, bp - 4);
    ah = 0x02;
    bh = 0x00;
    sub_366a();
    bl = memoryAGet(ds, 0x734c);
    al = memoryAGet(ss, bp - 5);
    ah = 0x09;
    bh = 0x00;
    cx = 0x0001;
    sub_366a();
loc_222a: // 01ed:035a
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    al = memoryAGet(ds, 0x734a);
    ah = 0x00;
    if ((short)ax >= (short)memoryAGet16(ss, bp - 2))
        goto loc_2245;
    al = memoryAGet(ds, 0x7348);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0x7346);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
loc_2245: // 01ed:0375
    al = memoryAGet(ds, 0x734b);
    ah = 0x00;
    if ((short)ax >= (short)memoryAGet16(ss, bp - 4))
        goto loc_226b;
    al = 0x06;
    push(ax);
    al = memoryAGet(ds, 0x7348);
    push(ax);
    al = memoryAGet(ds, 0x7349);
    push(ax);
    al = memoryAGet(ds, 0x734a);
    push(ax);
    al = memoryAGet(ds, 0x734b);
    push(ax);
    al = 0x01;
    push(ax);
    sub_30be();
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
loc_226b: // 01ed:039b
    ax = di;
    di--;
    if (!ax)
        goto loc_2275;
    goto loc_2193;
loc_2275: // 01ed:03a5
    dl = memoryAGet(ss, bp - 2);
    dh = memoryAGet(ss, bp - 4);
    ah = 0x02;
    bh = 0x00;
    sub_366a();
    al = memoryAGet(ss, bp - 5);
    ah = 0x00;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 6;
}
void sub_22b3() // 01ed:03e3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    push(si);
    push(si);
    push(cs);
    sub_41dd();
    cx = pop();
    push(ax);
    ax = 0;
    push(ax);
    sub_216a();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_22cc() // 01ed:03fc +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    memoryASet16(ss, bp - 2, 0x0001);
    ax = memoryAGet16(ss, bp + 4);
    si = ax;
    if (!ax)
        goto loc_2315;
    bx = si;
    si++;
    si++;
    if (memoryAGet16(ds, bx) == 0x0000)
        goto loc_2315;
    goto loc_2309;
loc_22ed: // 01ed:041d
    bx = si;
    si++;
    si++;
    push(memoryAGet16(ds, bx));
    push(cs);
    sub_41dd();
    cx = pop();
    ax++;
    di = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += di;
    if (ax > 0x007f)
        goto loc_2315;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + di);
loc_2309: // 01ed:0439
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_2315;
    bx = memoryAGet16(ds, si);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_22ed;
loc_2315: // 01ed:0445
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_52c7();
    cx = pop();
    memoryASet16(ss, bp - 4, ax);
    if (!ax)
        goto loc_237b;
    al = memoryAGet(ss, bp - 2);
    al += 0xfe;
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet(ds, bx, al);
    if (!al)
        goto loc_236a;
    ax = memoryAGet16(ss, bp + 4);
    ax++;
    ax++;
    si = ax;
    goto loc_235e;
loc_2342: // 01ed:0472
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(ds, bx, 0x20);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    bx = si;
    si++;
    si++;
    push(memoryAGet16(ds, bx));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_32bc();
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 4, ax);
loc_235e: // 01ed:048e
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_236a;
    bx = memoryAGet16(ds, si);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_2342;
loc_236a: // 01ed:049a
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(ds, bx, 0x0d);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    ax = memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ss, bp - 2);
    goto loc_237d;
loc_237b: // 01ed:04ab
    ax = 0;
loc_237d: // 01ed:04ad
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_2385() // 01ed:04b5 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    di = 0x0001;
    ax = memoryAGet16(ss, bp + 8);
    si = ax;
    if (!ax)
        goto loc_23b7;
    di = 0;
    goto loc_23ab;
loc_239c: // 01ed:04cc
    bx = si;
    si++;
    si++;
    push(memoryAGet16(ds, bx));
    push(cs);
    sub_41dd();
    cx = pop();
    ax++;
    di += ax;
loc_23ab: // 01ed:04db
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_23b7;
    bx = memoryAGet16(ds, si);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_239c;
loc_23b7: // 01ed:04e7
    di++;
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_23cc;
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_41dd();
    cx = pop();
    ax += 0x0003;
    di += ax;
loc_23cc: // 01ed:04fc
    if (di < 0x2000)
        goto loc_23d5;
    goto loc_2463;
loc_23d5: // 01ed:0505
    ax = di;
    ax += 0x000f;
    push(ax);
    push(cs);
    sub_52c7();
    cx = pop();
    memoryASet16(ss, bp - 2, ax);
    if (!ax)
        goto loc_2463;
    bx = memoryAGet16(ss, bp + 4);
    memoryASet16(ds, bx, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x000f);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) & 0xfff0);
    ax = memoryAGet16(ss, bp + 8);
    si = ax;
    if (!ax)
        goto loc_2429;
    goto loc_241d;
loc_2401: // 01ed:0531
    bx = si;
    si++;
    si++;
    push(memoryAGet16(ds, bx));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_32bc();
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_241d: // 01ed:054d
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_2429;
    bx = memoryAGet16(ds, si);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_2401;
loc_2429: // 01ed:0559
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_245c;
    bx = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, bx, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x0002);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_32bc();
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_245c: // 01ed:058c
    ax = memoryAGet16(ss, bp - 2);
    ax -= di;
    goto loc_2465;
loc_2463: // 01ed:0593
    ax = 0;
loc_2465: // 01ed:0595
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 6;
}
void sub_246d() // 01ed:059d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = bp + 8;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = 0x2a8f;
    push(ax);
    sub_2a7c();
    sp += 0x000a;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_248b() // 01ed:05bb +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    goto loc_249c;
loc_2490: // 01ed:05c0
    bx = memoryAGet16(ds, 0x6e86);
    bx <<= 1;
    bx <<= 1;
    push(cs); cs = memoryAGet16(ds, bx + 30948 + 2); callIndirect(cs, memoryAGet16(ds, bx + 30948)); assert(cs == 0x01ed); // 01ed:05c8;
loc_249c: // 01ed:05cc
    ax = memoryAGet16(ds, 0x6e86);
    memoryASet16(ds, 0x6e86, memoryAGet16(ds, 0x6e86) - 1);
    if (ax)
        goto loc_2490;
    push(memoryAGet16(ss, bp + 6));
    sub_1fe3();
    cx = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_24b0() // 01ed:05e0 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    si = ax;
    si -= memoryAGet16(ds, 0x0090);
    ax = si;
    ax += 0x003f;
    cl = 0x06;
    ax >>= cl;
    si = ax;
    if (si != memoryAGet16(ds, 0x6f96))
        goto loc_24e2;
loc_24d0: // 01ed:0600
    ax = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 4);
    memoryASet16(ds, 0x00a4, ax);
    memoryASet16(ds, 0x00a2, dx);
    ax = 0x0001;
    goto loc_252a;
loc_24e2: // 01ed:0612
    cl = 0x06;
    si <<= cl;
    di = memoryAGet16(ds, 0x00a8);
    ax = si;
    ax += memoryAGet16(ds, 0x0090);
    if (ax <= di)
        goto loc_24fc;
    ax = di;
    ax -= memoryAGet16(ds, 0x0090);
    si = ax;
loc_24fc: // 01ed:062c
    push(si);
    push(memoryAGet16(ds, 0x0090));
    push(cs);
    sub_4135();
    cx = pop();
    cx = pop();
    di = ax;
    if (di != 0xffff)
        goto loc_251a;
    ax = si;
    cl = 0x06;
    ax >>= cl;
    memoryASet16(ds, 0x6f96, ax);
    goto loc_24d0;
loc_251a: // 01ed:064a
    ax = memoryAGet16(ds, 0x0090);
    ax += di;
    memoryASet16(ds, 0x00a8, ax);
    memoryASet16(ds, 0x00a6, 0x0000);
    ax = 0;
loc_252a: // 01ed:065a
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_2530() // 01ed:0660
{
    sp -= 2;
    push(bp);
    bp = sp;
    cx = memoryAGet16(ds, 0x00a0);
    bx = memoryAGet16(ds, 0x009e);
    dx = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 4);
    sub_548a();
    if (flags.carry)
        goto loc_2566;
    cx = memoryAGet16(ds, 0x00a8);
    bx = memoryAGet16(ds, 0x00a6);
    dx = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 4);
    sub_548a();
    if (!flags.carry && !flags.zero)
        goto loc_2566;
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    sub_24b0();
    if (ax)
        goto loc_256b;
loc_2566: // 01ed:0696
    ax = 0xffff;
    goto loc_256d;
loc_256b: // 01ed:069b
    ax = 0;
loc_256d: // 01ed:069d
    bp = pop();
    sp += 2;
}
void sub_256f() // 01ed:069f
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    dx = memoryAGet16(ds, 0x00a4);
    ax = memoryAGet16(ds, 0x00a2);
    cx = memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ss, bp + 4);
    sub_512a();
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    cx = memoryAGet16(ds, 0x00a0);
    bx = memoryAGet16(ds, 0x009e);
    dx = memoryAGet16(ss, bp - 2);
    sub_548a();
    if (flags.carry)
        goto loc_25ae;
    cx = memoryAGet16(ds, 0x00a8);
    bx = memoryAGet16(ds, 0x00a6);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    sub_548a();
    if (flags.carry || flags.zero)
        goto loc_25b6;
loc_25ae: // 01ed:06de
    dx = 0xffff;
    ax = 0xffff;
    goto loc_25d8;
loc_25b6: // 01ed:06e6
    ax = memoryAGet16(ds, 0x00a4);
    dx = memoryAGet16(ds, 0x00a2);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    sub_24b0();
    if (ax)
        goto loc_25d2;
    goto loc_25ae;
loc_25d2: // 01ed:0702
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
loc_25d8: // 01ed:0708
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_25dc() // 01ed:070c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    dx = memoryAGet16(ds, 0x00a8);
    ax = memoryAGet16(ds, 0x00a6);
    cx = memoryAGet16(ds, 0x00a4);
    bx = memoryAGet16(ds, 0x00a2);
    sub_518a();
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 2) < 0x0000)
        goto loc_261a;
    if (memoryAGet16(ss, bp - 2) > 0x0000)
        goto loc_2612;
    if (memoryAGet16(ss, bp - 4) <= 0x0010)
        goto loc_261a;
loc_2612: // 01ed:0742
    flags.carry = memoryAGet16(ss, bp - 4) < 0x0010;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0010);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0000 - flags.carry);
loc_261a: // 01ed:074a
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) & 0xfff0);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) & 0xffff);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_262e() // 01ed:075e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (si)
        goto loc_2641;
    push(cs);
    sub_26b0();
    goto loc_26aa;
loc_2641: // 01ed:0771
    if (memoryAGet16(ds, si + 14) == si)
        goto loc_264b;
loc_2646: // 01ed:0776
    ax = 0xffff;
    goto loc_26ac;
loc_264b: // 01ed:077b
    if ((short)memoryAGet16(ds, si) < (short)0x0000)
        goto loc_2679;
    if (memoryAGet16(ds, si + 2) & 0x0008)
        goto loc_2661;
    ax = si;
    ax += 0x0005;
    if (memoryAGet16(ds, si + 10) != ax)
        goto loc_2677;
loc_2661: // 01ed:0791
    memoryASet16(ds, si, 0x0000);
    ax = si;
    ax += 0x0005;
    if (memoryAGet16(ds, si + 10) != ax)
        goto loc_2677;
    ax = memoryAGet16(ds, si + 8);
    memoryASet16(ds, si + 10, ax);
    goto loc_26aa;
loc_2677: // 01ed:07a7
    goto loc_26aa;
loc_2679: // 01ed:07a9
    ax = memoryAGet16(ds, si + 6);
    ax += memoryAGet16(ds, si);
    ax++;
    di = ax;
    memoryASet16(ds, si, memoryAGet16(ds, si) - di);
    push(di);
    ax = memoryAGet16(ds, si + 8);
    memoryASet16(ds, si + 10, ax);
    push(ax);
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_3383();
    sp += 0x0006;
    if (ax == di)
        goto loc_26aa;
    if (memoryAGet16(ds, si + 2) & 0x0200)
        goto loc_26aa;
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) | 0x0010);
    goto loc_2646;
loc_26aa: // 01ed:07da
    ax = 0;
loc_26ac: // 01ed:07dc
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_26b0() // 01ed:07e0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    memoryASet16(ss, bp - 2, 0x0000);
    di = 0x0014;
    si = 0x6f98;
    goto loc_26d8;
loc_26c4: // 01ed:07f4
    if (!(memoryAGet16(ds, si + 2) & 0x0003))
        goto loc_26d5;
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_26d5: // 01ed:0805
    si += 0x0010;
loc_26d8: // 01ed:0808
    ax = di;
    di--;
    if (ax)
        goto loc_26c4;
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_277c() // 01ed:08ac
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0056;
    push(si);
    push(di);
    memoryASet16(ss, bp - 2, 0x0000);
    if (memoryAGet16(ss, bp + 8) == 0x0000)
        goto loc_2795;
    bx = memoryAGet16(ss, bp + 8);
    memoryASet(ds, bx, 0x00);
loc_2795: // 01ed:08c5
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_27a1;
    bx = memoryAGet16(ss, bp + 10);
    memoryASet(ds, bx, 0x00);
loc_27a1: // 01ed:08d1
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_27ad;
    bx = memoryAGet16(ss, bp + 12);
    memoryASet(ds, bx, 0x00);
loc_27ad: // 01ed:08dd
    if (memoryAGet16(ss, bp + 14) == 0x0000)
        goto loc_27b9;
    bx = memoryAGet16(ss, bp + 14);
    memoryASet(ds, bx, 0x00);
loc_27b9: // 01ed:08e9
    ax = bp - 86;
    si = ax;
    goto loc_27c3;
loc_27c0: // 01ed:08f0
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_27c3: // 01ed:08f3
    bx = memoryAGet16(ss, bp + 6);
    if (memoryAGet(ds, bx) == 0x20)
        goto loc_27c0;
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_41dd();
    cx = pop();
    di = ax;
    if ((short)ax <= (short)0x0050)
        goto loc_27de;
    di = 0x0050;
loc_27de: // 01ed:090e
    memoryASet(ds, si, 0x00);
    si++;
    push(di);
    push(memoryAGet16(ss, bp + 6));
    push(si);
    push(cs);
    sub_41f7();
    sp += 0x0006;
    si += di;
    memoryASet(ds, si, 0x00);
    di = 0;
loc_27f6: // 01ed:0926
    si--;
    bx = si;
    al = memoryAGet(ds, bx);
    cbw();
    memoryASet16(ss, bp - 4, ax);
    cx = 0x0007;
    bx = 0x0a10;
loc_2805: // 01ed:0935
    ax = memoryAGet16(cs, bx);
    if (ax == memoryAGet16(ss, bp - 4))
        goto loc_2813;
    bx++;
    bx++;
    if (--cx)
        goto loc_2805;
    goto loc_27f6;
loc_2813: // 01ed:0943
    indirectJump(cs, memoryAGet16(cs, bx + 14)); // 01ed:0943;
}
void sub_2912() // 01ed:0a42 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    cx = memoryAGet16(ss, bp + 4);
    bx = cx;
    if ((short)memoryAGet16(ds, bx) >= (short)0x0000)
        goto loc_292b;
    ax = memoryAGet16(ds, bx + 6);
    ax += memoryAGet16(ds, bx);
    ax++;
    goto loc_2934;
loc_292b: // 01ed:0a5b
    bx = cx;
    ax = memoryAGet16(ds, bx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
loc_2934: // 01ed:0a64
    si = ax;
    memoryASet16(ss, bp - 2, ax);
    bx = cx;
    if (!(memoryAGet16(ds, bx + 2) & 0x0040))
        goto loc_2944;
    goto loc_2976;
loc_2944: // 01ed:0a74
    bx = cx;
    di = memoryAGet16(ds, bx + 10);
    if ((short)memoryAGet16(ds, bx) >= (short)0x0000)
        goto loc_296f;
    goto loc_295b;
loc_2950: // 01ed:0a80
    di--;
    bx = di;
    if (memoryAGet(ds, bx) != 0x0a)
        goto loc_295b;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_295b: // 01ed:0a8b
    ax = si;
    si--;
    if (ax)
        goto loc_2950;
    goto loc_2976;
loc_2964: // 01ed:0a94
    bx = di;
    di++;
    if (memoryAGet(ds, bx) != 0x0a)
        goto loc_296f;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_296f: // 01ed:0a9f
    ax = si;
    si--;
    if (ax)
        goto loc_2964;
loc_2976: // 01ed:0aa6
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_2981() // 01ed:0ab1 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 12);
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_299c;
    ax = 0xffff;
    goto loc_29e5;
loc_299c: // 01ed:0acc
    if (di != 0x0001)
        goto loc_29b1;
    if ((short)memoryAGet16(ds, si) <= (short)0x0000)
        goto loc_29b1;
    push(si);
    sub_2912();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = memoryAGet16(ss, bp + 8) < ax;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) - ax);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) - dx - flags.carry);
loc_29b1: // 01ed:0ae1
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) & 0xfe5f);
    memoryASet16(ds, si, 0x0000);
    ax = memoryAGet16(ds, si + 8);
    memoryASet16(ds, si + 10, ax);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_3a99();
    sp += 0x0008;
    if (dx != 0xffff)
        goto loc_29e3;
    if (ax != 0xffff)
        goto loc_29e3;
    ax = 0xffff;
    goto loc_29e5;
loc_29e3: // 01ed:0b13
    ax = 0;
loc_29e5: // 01ed:0b15
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a2c() // 01ed:0b5c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    al = memoryAGet(ss, bp + 8);
    al += 0xff;
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ds, 0x7349);
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) + al);
    al = memoryAGet(ss, bp + 6);
    al += 0xff;
    memoryASet(ss, bp - 2, al);
    al = memoryAGet(ds, 0x7348);
    memoryASet(ss, bp - 2, memoryAGet(ss, bp - 2) + al);
    al = memoryAGet(ss, bp - 1);
    if (al < memoryAGet(ds, 0x7349))
        goto loc_2a78;
    if (al > memoryAGet(ds, 0x734b))
        goto loc_2a78;
    al = memoryAGet(ss, bp - 2);
    if (al < memoryAGet(ds, 0x7348))
        goto loc_2a78;
    if (al > memoryAGet(ds, 0x734a))
        goto loc_2a78;
    dl = memoryAGet(ss, bp - 2);
    dh = memoryAGet(ss, bp - 1);
    ah = 0x02;
    bh = 0x00;
    sub_366a();
loc_2a78: // 01ed:0ba8
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a7c() // 01ed:0bac
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 10);
    push(si);
    ax = memoryAGet16(ss, bp + 12);
    ax |= 0x0002;
    push(ax);
    sub_3fc1();
    si = ax;
    if (ax)
        goto loc_2aa6;
    memoryASet16(ds, 0x0094, 0x0002);
loc_2aa1: // 01ed:0bd1
    ax = 0xffff;
    goto loc_2b0d;
loc_2aa6: // 01ed:0bd6
    push(memoryAGet16(ss, bp + 8));
    sub_22cc();
    memoryASet16(ss, bp - 2, ax);
    if (ax)
        goto loc_2abb;
    memoryASet16(ds, 0x0094, 0x0008);
    goto loc_2aa1;
loc_2abb: // 01ed:0beb
    if (di)
        goto loc_2ac3;
    di = memoryAGet16(ds, 0x744a);
loc_2ac3: // 01ed:0bf3
    push(di);
    push(si);
    ax = bp - 6;
    push(ax);
    sub_2385();
    memoryASet16(ss, bp - 4, ax);
    if (ax)
        goto loc_2ae4;
    memoryASet16(ds, 0x0094, 0x0008);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_51f8();
    cx = pop();
    goto loc_2aa1;
loc_2ae4: // 01ed:0c14
    push(cs); cs = memoryAGet16(ds, 0x6f8a + 2); callIndirect(cs, memoryAGet16(ds, 0x6f8a)); assert(cs == 0x01ed); // 01ed:0c14;
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(si);
    callIndirect(cs, memoryAGet16(ss, bp + 4)); // 01ed:0c1f;
    sp += 0x0006;
    memoryASet16(ss, bp - 8, ax);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_51f8();
    cx = pop();
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_51f8();
    cx = pop();
    ax = memoryAGet16(ss, bp - 8);
loc_2b0d: // 01ed:0c3d
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2b13() // 01ed:0c43 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 8);
    push(memoryAGet16(ss, bp + 6));
    push(si);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 12));
    sub_3058();
    if (!ax)
        goto loc_2b53;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 16));
    ax = memoryAGet16(ss, bp + 10);
    ax -= memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 14);
    dx += ax;
    push(dx);
    ax = memoryAGet16(ss, bp + 12);
    ax -= si;
    dx = memoryAGet16(ss, bp + 16);
    dx += ax;
    push(dx);
    sub_3058();
    if (ax)
        goto loc_2b57;
loc_2b53: // 01ed:0c83
    ax = 0;
    goto loc_2bb3;
loc_2b57: // 01ed:0c87
    memoryASet16(ss, bp - 2, si);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, 0x0001);
    if ((short)si >= (short)memoryAGet16(ss, bp + 16))
        goto loc_2b78;
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, si);
    memoryASet16(ss, bp - 6, 0xffff);
loc_2b78: // 01ed:0ca8
    di = memoryAGet16(ss, bp - 2);
    goto loc_2ba6;
loc_2b7d: // 01ed:0cad
    push(memoryAGet16(ss, bp + 14));
    ax = di;
    ax -= si;
    dx = memoryAGet16(ss, bp + 16);
    dx += ax;
    push(dx);
    sub_4710();
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(di);
    sub_4710();
    push(dx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax -= memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    sub_301a();
    di += memoryAGet16(ss, bp - 6);
loc_2ba6: // 01ed:0cd6
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 6);
    if (ax != di)
        goto loc_2b7d;
    ax = 0x0001;
loc_2bb3: // 01ed:0ce3
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2bf3() // 01ed:0d23 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si, memoryAGet16(ds, si) - 1);
    push(si);
    al = memoryAGet(ss, bp + 6);
    cbw();
    push(ax);
    push(cs);
    sub_2c0c();
    cx = pop();
    cx = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2c0c() // 01ed:0d3c +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 8);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ds, 0x7964, al);
    if ((short)memoryAGet16(ds, si) >= (short)0xffff)
        goto loc_2c54;
    memoryASet16(ds, si, memoryAGet16(ds, si) + 1);
    bx = memoryAGet16(ds, si + 10);
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) + 1);
    al = memoryAGet(ds, 0x7964);
    memoryASet(ds, bx, al);
    if (!(memoryAGet16(ds, si + 2) & 0x0008))
        goto loc_2c51;
    if (memoryAGet(ds, 0x7964) == 0x0a)
        goto loc_2c40;
    if (memoryAGet(ds, 0x7964) != 0x0d)
        goto loc_2c51;
loc_2c40: // 01ed:0d70
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_2c51;
loc_2c4b: // 01ed:0d7b
    ax = 0xffff;
    goto loc_2d0d;
loc_2c51: // 01ed:0d81
    goto loc_2d08;
loc_2c54: // 01ed:0d84
    if (memoryAGet16(ds, si + 2) & 0x0090)
        goto loc_2c62;
    if (memoryAGet16(ds, si + 2) & 0x0002)
        goto loc_2c69;
loc_2c62: // 01ed:0d92
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) | 0x0010);
    goto loc_2c4b;
loc_2c69: // 01ed:0d99
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) | 0x0100);
    if (memoryAGet16(ds, si + 6) == 0x0000)
        goto loc_2cbc;
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_2c86;
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_2c86;
    goto loc_2c4b;
loc_2c86: // 01ed:0db6
    ax = memoryAGet16(ds, si + 6);
    ax = -ax;
    memoryASet16(ds, si, ax);
    bx = memoryAGet16(ds, si + 10);
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) + 1);
    al = memoryAGet(ds, 0x7964);
    memoryASet(ds, bx, al);
    if (!(memoryAGet16(ds, si + 2) & 0x0008))
        goto loc_2cba;
    if (memoryAGet(ds, 0x7964) == 0x0a)
        goto loc_2cad;
    if (memoryAGet(ds, 0x7964) != 0x0d)
        goto loc_2cba;
loc_2cad: // 01ed:0ddd
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_2cba;
    goto loc_2c4b;
loc_2cba: // 01ed:0dea
    goto loc_2d08;
loc_2cbc: // 01ed:0dec
    if (memoryAGet(ds, 0x7964) != 0x0a)
        goto loc_2ce4;
    if (memoryAGet16(ds, si + 2) & 0x0040)
        goto loc_2ce4;
    ax = 0x0001;
    push(ax);
    ax = 0x733a;
    push(ax);
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_47af();
    sp += 0x0006;
    if (ax != 0x0001)
        goto loc_2cfe;
loc_2ce4: // 01ed:0e14
    ax = 0x0001;
    push(ax);
    ax = 0x7964;
    push(ax);
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_47af();
    sp += 0x0006;
    if (ax == 0x0001)
        goto loc_2d08;
loc_2cfe: // 01ed:0e2e
    if (memoryAGet16(ds, si + 2) & 0x0200)
        goto loc_2d08;
    goto loc_2c62;
loc_2d08: // 01ed:0e38
    al = memoryAGet(ds, 0x7964);
    ah = 0x00;
loc_2d0d: // 01ed:0e3d
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2d25() // 01ed:0e55 +stackDrop6
{
    bool temp_cond0;
    bool temp_cond1;

    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 4);
    memoryASet16(ss, bp - 2, di);
    if (!(memoryAGet16(ds, si + 2) & 0x0008))
        goto loc_2d63;
    goto loc_2d59;
loc_2d3e: // 01ed:0e6e
    push(si);
    bx = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    al = memoryAGet(ds, bx);
    cbw();
    push(ax);
    push(cs);
    sub_2c0c();
    cx = pop();
    cx = pop();
    if (ax != 0xffff)
        goto loc_2d59;
loc_2d54: // 01ed:0e84
    ax = 0;
    goto loc_2e58;
loc_2d59: // 01ed:0e89
    ax = di;
    di--;
    if (ax)
        goto loc_2d3e;
    goto loc_2e55;
loc_2d63: // 01ed:0e93
    if (memoryAGet16(ds, si + 2) & 0x0040)
        goto loc_2d6d;
    goto loc_2dfa;
loc_2d6d: // 01ed:0e9d
    if (memoryAGet16(ds, si + 6) == 0x0000)
        goto loc_2de0;
    if (memoryAGet16(ds, si + 6) >= di)
        goto loc_2da4;
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_2d8a;
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_2d8a;
    goto loc_2d54;
loc_2d8a: // 01ed:0eba
    push(di);
    push(memoryAGet16(ss, bp + 8));
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_47af();
    sp += 0x0006;
    if (ax >= di)
        goto loc_2da1;
    goto loc_2d54;
loc_2da1: // 01ed:0ed1
    goto loc_2e55;
loc_2da4: // 01ed:0ed4
    ax = memoryAGet16(ds, si);
    temp_cond0 = (short)ax + (short)di < 0;
    ax += di;
    if (temp_cond0)
        goto loc_2dc6;
    if (memoryAGet16(ds, si) != 0x0000)
        goto loc_2db9;
    ax = 0xffff;
    ax -= memoryAGet16(ds, si + 6);
    memoryASet16(ds, si, ax);
    goto loc_2dc6;
loc_2db9: // 01ed:0ee9
    push(si);
    push(cs);
    sub_262e();
    cx = pop();
    if (!ax)
        goto loc_2dc6;
    goto loc_2d54;
loc_2dc6: // 01ed:0ef6
    push(di);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, si + 10));
    push(cs);
    sub_3bac();
    sp += 0x0006;
    ax = memoryAGet16(ds, si);
    ax += di;
    memoryASet16(ds, si, ax);
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) + di);
    goto loc_2e55;
loc_2de0: // 01ed:0f10
    push(di);
    push(memoryAGet16(ss, bp + 8));
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_47af();
    sp += 0x0006;
    if (ax >= di)
        goto loc_2df8;
    goto loc_2d54;
loc_2df8: // 01ed:0f28
    goto loc_2e55;
loc_2dfa: // 01ed:0f2a
    if (memoryAGet16(ds, si + 6) == 0x0000)
        goto loc_2e3d;
    goto loc_2e34;
loc_2e02: // 01ed:0f32
    temp_cond1 = (short)memoryAGet16(ds, si) + 1 >= 0;
    memoryASet16(ds, si, memoryAGet16(ds, si) + 1);
    if (temp_cond1)
        goto loc_2e1c;
    bx = memoryAGet16(ds, si + 10);
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) + 1);
    push(bx);
    bx = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    al = memoryAGet(ds, bx);
    bx = pop();
    memoryASet(ds, bx, al);
    ah = 0x00;
    goto loc_2e2c;
loc_2e1c: // 01ed:0f4c
    push(si);
    bx = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 1);
    al = memoryAGet(ds, bx);
    push(ax);
    push(cs);
    sub_2bf3();
    cx = pop();
    cx = pop();
loc_2e2c: // 01ed:0f5c
    if (ax != 0xffff)
        goto loc_2e34;
    goto loc_2d54;
loc_2e34: // 01ed:0f64
    ax = di;
    di--;
    if (ax)
        goto loc_2e02;
    goto loc_2e55;
loc_2e3d: // 01ed:0f6d
    push(di);
    push(memoryAGet16(ss, bp + 8));
    al = memoryAGet(ds, si + 4);
    cbw();
    push(ax);
    push(cs);
    sub_3383();
    sp += 0x0006;
    if (ax >= di)
        goto loc_2e55;
    goto loc_2d54;
loc_2e55: // 01ed:0f85
    ax = memoryAGet16(ss, bp - 2);
loc_2e58: // 01ed:0f88
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 6;
}
void sub_2e73() // 01ed:0fa3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    push(si);
    push(cs);
    sub_41dd();
    cx = pop();
    di = ax;
    push(si);
    push(di);
    ax = 0x6fa8;
    push(ax);
    sub_2d25();
    if (ax == di)
        goto loc_2e96;
    ax = 0xffff;
    goto loc_2eb2;
loc_2e96: // 01ed:0fc6
    ax = 0x6fa8;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(cs);
    sub_2c0c();
    cx = pop();
    cx = pop();
    if (ax == 0x000a)
        goto loc_2eaf;
    ax = 0xffff;
    goto loc_2eb2;
loc_2eaf: // 01ed:0fdf
    ax = 0x000a;
loc_2eb2: // 01ed:0fe2
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2ec7() // 01ed:0ff7 +far
{
    cx = memoryAGet16(ds, 0x733e);
    bx = memoryAGet16(ds, 0x733c);
    dx = 0x015a;
    ax = 0x4e35;
    sub_5473();
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x733e, dx);
    memoryASet16(ds, 0x733c, ax);
    ax = memoryAGet16(ds, 0x733e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax &= 0x7fff;
    cs = pop();
}
void sub_2eed() // 01ed:101d +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    ax = memoryAGet16(ss, bp + 4);
    ax >>= 1;
    cx = ax;
    al = memoryAGet(ds, 0x7350);
    ah = 0x00;
    push(ax);
    ax = cx;
    dx = 0;
    bx = pop();
    div16(bx);
    memoryASet(ss, bp - 1, al);
    ah = 0x00;
    dl = memoryAGet(ds, 0x7350);
    dh = 0x00;
    imul16(dx);
    dl = cl;
    dl -= al;
    memoryASet(ss, bp - 2, dl);
    ah = memoryAGet(ss, bp - 1);
    al = memoryAGet(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_2f26() // 01ed:1056 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 4);
    dx = memoryAGet16(ds, si);
    if (dx == memoryAGet16(ds, di))
        goto loc_2f40;
    bh = 0x00;
    ah = 0x02;
    sub_366a();
    memoryASet16(ds, di, dx);
loc_2f40: // 01ed:1070
    dl++;
    if (dl < memoryAGet(ds, 0x7350))
        goto loc_2f4c;
    dh++;
    dl = 0x00;
loc_2f4c: // 01ed:107c
    memoryASet16(ds, si, dx);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_2f54() // 01ed:1084 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 4);
    sub_3357();
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 12);
    if (ax != memoryAGet16(ds, 0x7355))
        goto loc_2f76;
    ax = 0x0001;
    goto loc_2f78;
loc_2f76: // 01ed:10a6
    ax = 0;
loc_2f78: // 01ed:10a8
    memoryASet16(ss, bp - 10, ax);
    if (!ax)
        goto loc_2f8b;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    sub_2eed();
    memoryASet16(ss, bp - 2, ax);
loc_2f8b: // 01ed:10bb
    ax = memoryAGet16(ss, bp + 8);
    if (ax != memoryAGet16(ds, 0x7355))
        goto loc_2f99;
    ax = 0x0001;
    goto loc_2f9b;
loc_2f99: // 01ed:10c9
    ax = 0;
loc_2f9b: // 01ed:10cb
    memoryASet16(ss, bp - 12, ax);
    if (!ax)
        goto loc_3001;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    sub_2eed();
    memoryASet16(ss, bp - 4, ax);
    goto loc_3001;
loc_2fb0: // 01ed:10e0
    if (memoryAGet16(ss, bp - 12) == 0x0000)
        goto loc_2fcc;
    ax = bp - 4;
    push(ax);
    ax = bp - 6;
    push(ax);
    sub_2f26();
    bh = 0x00;
    ah = 0x08;
    sub_366a();
    si = ax;
    goto loc_2fd6;
loc_2fcc: // 01ed:10fc
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
loc_2fd6: // 01ed:1106
    if (memoryAGet16(ss, bp - 10) == 0x0000)
        goto loc_2ff7;
    ax = bp - 2;
    push(ax);
    ax = bp - 6;
    push(ax);
    sub_2f26();
    ax = si;
    bl = ah;
    cx = 0x0001;
    bh = 0x00;
    ah = 0x09;
    sub_366a();
    goto loc_3001;
loc_2ff7: // 01ed:1127
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet16(es, bx, si);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 0x0002);
loc_3001: // 01ed:1131
    ax = di;
    di--;
    if (ax)
        goto loc_2fb0;
    dx = memoryAGet16(ss, bp - 8);
    bh = 0x00;
    ah = 0x02;
    sub_366a();
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 10;
}
void sub_301a() // 01ed:114a +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 4);
    al = memoryAGet(ds, 0x7351);
    ah = 0x00;
    if (ax)
        goto loc_3043;
    if (memoryAGet16(ds, 0x7357) == 0x0000)
        goto loc_3043;
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(si);
    sub_4736();
    goto loc_3053;
loc_3043: // 01ed:1173
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(si);
    sub_2f54();
loc_3053: // 01ed:1183
    si = pop();
    bp = pop();
    sp += 2;
    sp += 10;
}
void sub_3058() // 01ed:1188 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 6);
    al = memoryAGet(ds, 0x7350);
    ah = 0x00;
    cx = ax;
    al = memoryAGet(ds, 0x734f);
    ah = 0x00;
    dx = ax;
    if (si > cx)
        goto loc_3093;
    if (bx > cx)
        goto loc_3093;
    if ((short)si > (short)bx)
        goto loc_3093;
    if (di > dx)
        goto loc_3093;
    if (memoryAGet16(ss, bp + 4) > dx)
        goto loc_3093;
    if ((short)di > (short)memoryAGet16(ss, bp + 4))
        goto loc_3093;
    ax = 0x0001;
    goto loc_3095;
loc_3093: // 01ed:11c3
    ax = 0;
loc_3095: // 01ed:11c5
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    sp += 8;
}
void sub_309b() // 01ed:11cb +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 6);
    ch = memoryAGet(ds, 0x734c);
    cl = 0x20;
    goto loc_30b3;
loc_30ae: // 01ed:11de
    memoryASet16(ds, si, cx);
    si++;
    si++;
    di++;
loc_30b3: // 01ed:11e3
    if ((short)di <= (short)memoryAGet16(ss, bp + 4))
        goto loc_30ae;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    sp += 6;
}
void sub_30be() // 01ed:11ee +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x00a0;
    al = memoryAGet(ds, 0x7351);
    ah = 0x00;
    if (!ax)
        goto loc_30d1;
    goto loc_3154;
loc_30d1: // 01ed:1201
    if (memoryAGet16(ds, 0x7357) == 0x0000)
        goto loc_3154;
    if (memoryAGet(ss, bp + 4) != 0x01)
        goto loc_3154;
    memoryASet(ss, bp + 12, memoryAGet(ss, bp + 12) + 1);
    memoryASet(ss, bp + 10, memoryAGet(ss, bp + 10) + 1);
    memoryASet(ss, bp + 8, memoryAGet(ss, bp + 8) + 1);
    memoryASet(ss, bp + 6, memoryAGet(ss, bp + 6) + 1);
    if (memoryAGet(ss, bp + 14) != 0x06)
        goto loc_3133;
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 12);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 8);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    ax++;
loc_310e: // 01ed:123e
    push(ax);
    al = memoryAGet(ss, bp + 12);
    ah = 0x00;
    push(ax);
    push(cs);
    sub_2b13();
    sp += 0x000c;
    ax = bp - 160;
    push(ax);
    al = memoryAGet(ss, bp + 12);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 8);
    ah = 0x00;
    push(ax);
    sub_309b();
    goto loc_316d;
loc_3133: // 01ed:1263
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 12);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    ah = 0x00;
    ax--;
    push(ax);
    al = memoryAGet(ss, bp + 8);
    ah = 0x00;
    push(ax);
    al = memoryAGet(ss, bp + 10);
    ah = 0x00;
    goto loc_310e;
loc_3154: // 01ed:1284
    bh = memoryAGet(ds, 0x734c);
    ah = memoryAGet(ss, bp + 14);
    al = memoryAGet(ss, bp + 4);
    ch = memoryAGet(ss, bp + 10);
    cl = memoryAGet(ss, bp + 12);
    dh = memoryAGet(ss, bp + 6);
    dl = memoryAGet(ss, bp + 8);
    sub_366a();
loc_316d: // 01ed:129d
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 12;
}
void sub_3173() // 01ed:12a3
{
    sp -= 2;
    al = memoryAGet(ds, 0x6f9c);
    cbw();
    push(ax);
    push(cs);
    sub_3a88();
    cx = pop();
    if (ax)
        goto loc_3188;
    memoryASet16(ds, 0x6f9a, memoryAGet16(ds, 0x6f9a) & 0xfdff);
loc_3188: // 01ed:12b8
    ax = 0x0200;
    push(ax);
    if (!(memoryAGet16(ds, 0x6f9a) & 0x0200))
        goto loc_3199;
    ax = 0x0001;
    goto loc_319b;
loc_3199: // 01ed:12c9
    ax = 0;
loc_319b: // 01ed:12cb
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6f98;
    push(ax);
    push(cs);
    sub_31e4();
    sp += 0x0008;
    al = memoryAGet(ds, 0x6fac);
    cbw();
    push(ax);
    push(cs);
    sub_3a88();
    cx = pop();
    if (ax)
        goto loc_31c0;
    memoryASet16(ds, 0x6faa, memoryAGet16(ds, 0x6faa) & 0xfdff);
loc_31c0: // 01ed:12f0
    ax = 0x0200;
    push(ax);
    if (!(memoryAGet16(ds, 0x6faa) & 0x0200))
        goto loc_31d1;
    ax = 0x0002;
    goto loc_31d3;
loc_31d1: // 01ed:1301
    ax = 0;
loc_31d3: // 01ed:1303
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6fa8;
    push(ax);
    push(cs);
    sub_31e4();
    sp += 0x0008;
    sp += 2;
}
void sub_31e4() // 01ed:1314 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 12);
    if (memoryAGet16(ds, si + 14) != si)
        goto loc_3200;
    if ((short)memoryAGet16(ss, bp + 10) > (short)0x0002)
        goto loc_3200;
    if (di <= 0x7fff)
        goto loc_3206;
loc_3200: // 01ed:1330
    ax = 0xffff;
    goto loc_32b8;
loc_3206: // 01ed:1336
    if (memoryAGet16(ds, 0x7342) != 0x0000)
        goto loc_321b;
    if (si != 0x6fa8)
        goto loc_321b;
    memoryASet16(ds, 0x7342, 0x0001);
    goto loc_322e;
loc_321b: // 01ed:134b
    if (memoryAGet16(ds, 0x7340) != 0x0000)
        goto loc_322e;
    if (si != 0x6f98)
        goto loc_322e;
    memoryASet16(ds, 0x7340, 0x0001);
loc_322e: // 01ed:135e
    if (memoryAGet16(ds, si) == 0x0000)
        goto loc_3246;
    ax = 0x0001;
    push(ax);
    ax = 0;
    dx = 0;
    push(ax);
    push(dx);
    push(si);
    push(cs);
    sub_2981();
    sp += 0x0008;
loc_3246: // 01ed:1376
    if (!(memoryAGet16(ds, si + 2) & 0x0004))
        goto loc_3256;
    push(memoryAGet16(ds, si + 8));
    push(cs);
    sub_51f8();
    cx = pop();
loc_3256: // 01ed:1386
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) & 0xfff3);
    memoryASet16(ds, si + 6, 0x0000);
    ax = si;
    ax += 0x0005;
    memoryASet16(ds, si + 8, ax);
    memoryASet16(ds, si + 10, ax);
    if (memoryAGet16(ss, bp + 10) == 0x0002)
        goto loc_32b6;
    if (!di)
        goto loc_32b6;
    memoryASet16(ds, 0x6f8c, 0x01ed);
    memoryASet16(ds, 0x6f8a, 0x15ac);
    if (memoryAGet16(ss, bp + 8) != 0x0000)
        goto loc_329f;
    push(di);
    push(cs);
    sub_52c7();
    cx = pop();
    memoryASet16(ss, bp + 8, ax);
    if (!ax)
        goto loc_329c;
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) | 0x0004);
    goto loc_329f;
loc_329c: // 01ed:13cc
    goto loc_3200;
loc_329f: // 01ed:13cf
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 10, ax);
    memoryASet16(ds, si + 8, ax);
    memoryASet16(ds, si + 6, di);
    if (memoryAGet16(ss, bp + 10) != 0x0001)
        goto loc_32b6;
    memoryASet16(ds, si + 2, memoryAGet16(ds, si + 2) | 0x0008);
loc_32b6: // 01ed:13e6
    ax = 0;
loc_32b8: // 01ed:13e8
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_32bc() // 01ed:13ec +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_41dd();
    cx = pop();
    si = ax;
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs);
    sub_3bac();
    sp += 0x0006;
    ax = di;
    ax += si;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_32ff() // 01ed:142f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 6);
    if (dx != 0xffff)
        goto loc_330f;
    ax = 0xffff;
    goto loc_3329;
loc_330f: // 01ed:143f
    al = dl;
    ah = 0x00;
    bx = ax;
    if (!(memoryAGet(ds, bx + 28297) & 0x04))
        goto loc_3325;
    al = dl;
    ah = 0x00;
    ax += 0x0020;
    goto loc_3329;
loc_3325: // 01ed:1455
    al = dl;
    ah = 0x00;
loc_3329: // 01ed:1459
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_332b() // 01ed:145b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 6);
    if (dx != 0xffff)
        goto loc_333b;
    ax = 0xffff;
    goto loc_3355;
loc_333b: // 01ed:146b
    al = dl;
    ah = 0x00;
    bx = ax;
    if (!(memoryAGet(ds, bx + 28297) & 0x08))
        goto loc_3351;
    al = dl;
    ah = 0x00;
    ax += 0xffe0;
    goto loc_3355;
loc_3351: // 01ed:1481
    al = dl;
    ah = 0x00;
loc_3355: // 01ed:1485
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3357() // 01ed:1487
{
    ah = 0x03;
    bh = 0x00;
    sub_366a();
    ax = dx;
}
void sub_3383() // 01ed:14b3 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x008a;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    if (ax >= 0x0002)
        goto loc_339a;
    ax = 0;
    goto loc_3476;
loc_339a: // 01ed:14ca
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 28888) & 0x8000))
        goto loc_33bb;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_47af();
    sp += 0x0006;
    goto loc_3476;
loc_33bb: // 01ed:14eb
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 28888, memoryAGet16(ds, bx + 28888) & 0xfdff);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 4, ax);
    goto loc_342d;
loc_33d4: // 01ed:1504
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
    bx = memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    al = memoryAGet(ds, bx);
    memoryASet(ss, bp - 5, al);
    if (al != 0x0a)
        goto loc_33ea;
    memoryASet(ds, si, 0x0d);
    si++;
loc_33ea: // 01ed:151a
    al = memoryAGet(ss, bp - 5);
    memoryASet(ds, si, al);
    si++;
    ax = bp - 138;
    dx = si;
    dx -= ax;
    if ((short)dx < (short)0x0080)
        goto loc_3433;
    dx = si;
    dx -= ax;
    di = dx;
    push(di);
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_47af();
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    if (ax == di)
        goto loc_342d;
    if (memoryAGet16(ss, bp - 2) >= 0x0000)
        goto loc_3423;
loc_341e: // 01ed:154e
    ax = 0xffff;
    goto loc_3471;
loc_3423: // 01ed:1553
    ax = memoryAGet16(ss, bp + 10);
    ax -= memoryAGet16(ss, bp - 4);
    goto loc_346c;
  // gap 2 bytes
loc_342d: // 01ed:155d
    ax = bp - 138;
    si = ax;
loc_3433: // 01ed:1563
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_33d4;
    ax = bp - 138;
    dx = si;
    dx -= ax;
    di = dx;
    ax = dx;
    if (!ax)
        goto loc_3473;
    push(di);
    ax = bp - 138;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_47af();
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    if (ax == di)
        goto loc_3473;
    if (memoryAGet16(ss, bp - 2) >= 0x0000)
        goto loc_3469;
    goto loc_341e;
loc_3469: // 01ed:1599
    ax = memoryAGet16(ss, bp + 10);
loc_346c: // 01ed:159c
    ax += memoryAGet16(ss, bp - 2);
    ax -= di;
loc_3471: // 01ed:15a1
    goto loc_3476;
loc_3473: // 01ed:15a3
    ax = memoryAGet16(ss, bp + 10);
loc_3476: // 01ed:15a6
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_349f() // 01ed:15cf +far +stackDrop2
{
    bool temp_cond0;

    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(bp);
    si = memoryAGet16(ss, bp + 6);
    flags.direction = 0;
    ax = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    bh = 0x00;
    di = 0x6e89;
loc_34b4: // 01ed:15e4
    bl = memoryAGet(ds, si);
    si++;
    if (memoryAGet(ds, bx + di) & 0x01)
        goto loc_34b4;
    bp = 0x0000;
    if (bl == 0x2b)
        goto loc_34ca;
    if (bl != 0x2d)
        goto loc_34cd;
    bp++;
loc_34ca: // 01ed:15fa
    bl = memoryAGet(ds, si);
    si++;
loc_34cd: // 01ed:15fd
    if (bl > 0x39)
        goto loc_3500;
    flags.carry = bl < 0x30;
    bl -= 0x30;
    if (flags.carry)
        goto loc_3500;
    mul16(cx);
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    dl += dh + flags.carry;
    if (!dl)
        goto loc_34ca;
    goto loc_34f3;
loc_34e1: // 01ed:1611
    di = dx;
    cx = 0x000a;
    mul16(cx);
    tx = di; di = ax; ax = tx;
    tx = cx; cx = dx; dx = tx;
    mul16(dx);
    tx = dx; dx = ax; ax = tx;
    tx = di; di = ax; ax = tx;
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    dx += cx + flags.carry;
loc_34f3: // 01ed:1623
    bl = memoryAGet(ds, si);
    si++;
    if (bl > 0x39)
        goto loc_3500;
    flags.carry = bl < 0x30;
    bl -= 0x30;
    if (!flags.carry)
        goto loc_34e1;
loc_3500: // 01ed:1630
    temp_cond0 = (short)bp - 1 < 0;
    bp--;
    if (temp_cond0)
        goto loc_350a;
    dx = -dx;
    ax = -ax;
    dx = dx - 0x0000 - flags.carry;
loc_350a: // 01ed:163a
    bp = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_352c() // 01ed:165c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = 0;
    ah = memoryAGet(ss, bp + 6);
    interrupt(0x16);
    if (flags.zero)
        goto loc_3547;
    if (memoryAGet(ss, bp + 6) & 0x01)
        goto loc_354f;
    if (ax)
        goto loc_354f;
    ax = 0xffff;
    goto loc_354f;
loc_3547: // 01ed:1677
    if (!(memoryAGet(ss, bp + 6) & 0x01))
        goto loc_354f;
    ax = 0;
loc_354f: // 01ed:167f
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3551() // 01ed:1681
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 4);
    dx = sp;
    dx -= 0x0200;
    if (ax >= dx)
        goto loc_3568;
    memoryASet16(ds, 0x009c, ax);
    ax = 0;
    goto loc_3571;
loc_3568: // 01ed:1698
    memoryASet16(ds, 0x0094, 0x0008);
    ax = 0xffff;
loc_3571: // 01ed:16a1
    bp = pop();
    sp += 2;
}
void sub_3573() // 01ed:16a3
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 4);
    dx = memoryAGet16(ss, bp + 6);
    flags.carry = (ax + memoryAGet16(ds, 0x009c)) >= 0x10000;
    ax += memoryAGet16(ds, 0x009c);
    dx += 0x0000 + flags.carry;
    cx = ax;
    if (dx)
        goto loc_3599;
    flags.carry = (cx + 0x0200) >= 0x10000;
    cx += 0x0200;
    if (flags.carry)
        goto loc_3599;
    if (cx >= sp)
        goto loc_3599;
    tx = memoryAGet16(ds, 0x009c); memoryASet16(ds, 0x009c, ax); ax = tx;
    goto loc_35a2;
loc_3599: // 01ed:16c9
    memoryASet16(ds, 0x0094, 0x0008);
    ax = 0xffff;
loc_35a2: // 01ed:16d2
    bp = pop();
    sp += 2;
}
void sub_35d6() // 01ed:1706 +stackDrop2
{
    ah = 0x19;
    interrupt(0x21);
    cbw();
    cs = pop();
}
void sub_35e9() // 01ed:1719 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    cx = memoryAGet16(ss, bp + 10);
    ah = 0x43;
    al = memoryAGet(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_35fe;
    tx = cx; cx = ax; ax = tx;
    goto loc_3602;
loc_35fe: // 01ed:172e
    push(ax);
    sub_3a4b();
loc_3602: // 01ed:1732
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3604() // 01ed:1734 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x3e;
    bx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_361c;
    bx <<= 1;
    memoryASet16(ds, bx + 28888, 0xffff);
    ax = 0;
    goto loc_3620;
loc_361c: // 01ed:174c
    push(ax);
    sub_3a4b();
loc_3620: // 01ed:1750
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3622() // 01ed:1752 +far +stackDrop2
{
    sp -= 2;
    ax = sp;
    ax -= memoryAGet16(ds, 0x009c);
    flags.carry = ax < 0x0220;
    ax -= 0x0220;
    if (!flags.carry)
        goto loc_362f;
    ax = 0;
loc_362f: // 01ed:175f
    al &= 0xf0;
    sp += 2;
    cs = pop();
}
void sub_3632() // 01ed:1762
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 4);
    goto loc_364f;
loc_363b: // 01ed:176b
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
    al = memoryAGet(es, bx);
    bx = si;
    si++;
    if (al == memoryAGet(ds, bx))
        goto loc_364f;
    ax = 0;
    goto loc_3657;
loc_364f: // 01ed:177f
    if (memoryAGet(ds, si) != 0x00)
        goto loc_363b;
    ax = 0x0001;
loc_3657: // 01ed:1787
    si = pop();
    bp = pop();
    //stop("stack_below, 0/6");
    sp += 2;
    sp += 6;
}
void sub_365c() // 01ed:178c
{
    ah = 0x12;
    bl = 0x10;
    sub_366a();
    al = bl;
    al += 0xf0;
    ah = 0x00;
}
void sub_366a() // 01ed:179a
{
    push(bp);
    push(ds);
    push(cx);
    cx = 0x0040;
    ds = cx;
    cx = pop();
    if (ah == 0x00)
        goto loc_3681;
    if (ah == 0x0f)
        goto loc_36d3;
loc_367d: // 01ed:17ad
    interrupt(0x10);
    goto loc_36eb;
loc_3681: // 01ed:17b1
    if (al != 0x03)
        goto loc_369f;
    ax = 0x1a00;
    interrupt(0x10);
    if (al == 0x1a)
        goto loc_3693;
    memoryASet(ds, 0x0087, memoryAGet(ds, 0x0087) & 0xfe);
loc_3693: // 01ed:17c3
    ah = 0x01;
    cx = 0x0607;
    interrupt(0x10);
    ax = 0x0003;
    goto loc_367d;
loc_369f: // 01ed:17cf
    if (al != 0x40)
        goto loc_367d;
    bl = 0x10;
    ah = 0x12;
    interrupt(0x10);
    if (bl == 0x10)
        goto loc_36eb;
    ax = 0x1112;
    bl = 0;
    interrupt(0x10);
    ax = 0x1200;
    bl = 0x20;
    interrupt(0x10);
    ax = 0x1a00;
    interrupt(0x10);
    if (al == 0x1a)
        goto loc_36eb;
    memoryASet(ds, 0x0087, memoryAGet(ds, 0x0087) | 0x01);
    ah = 0x01;
    cx = 0x0600;
    interrupt(0x10);
    goto loc_36eb;
loc_36d3: // 01ed:1803
    interrupt(0x10);
    if (al != 0x03)
        goto loc_36eb;
    push(ax);
    sub_365c();
    flags.zero = !al;
    ax = pop();
    if (flags.zero)
        goto loc_36eb;
    if (memoryAGet(ds, 0x0084) == 0x18)
        goto loc_36eb;
    al = 0x40;
loc_36eb: // 01ed:181b
    ds = pop();
    bp = pop();
}
void sub_36ee() // 01ed:181e
{
    ah = 0x0f;
    sub_366a();
    push(ax);
    sub_370b();
    cx = pop();
    ah = 0x08;
    bh = 0x00;
    sub_366a();
    ah &= 0x7f;
    memoryASet(ds, 0x734d, ah);
    memoryASet(ds, 0x734c, ah);
}
void sub_370b() // 01ed:183b
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 4);
    memoryASet(ds, 0x734e, al);
    ah = 0x0f;
    sub_366a();
    memoryASet(ds, 0x7350, ah);
    if (al == memoryAGet(ds, 0x734e))
        goto loc_3750;
    al = memoryAGet(ds, 0x734e);
    ah = 0x00;
    sub_366a();
    ah = 0x0f;
    sub_366a();
    memoryASet(ds, 0x734e, al);
    memoryASet(ds, 0x7350, ah);
    if (memoryAGet(ds, 0x734e) != 0x03)
        goto loc_3750;
    ax = 0x0040;
    es = ax;
    if ((char)memoryAGet(es, 0x0084) <= (char)0x18)
        goto loc_3750;
    memoryASet(ds, 0x734e, 0x40);
loc_3750: // 01ed:1880
    if (memoryAGet(ds, 0x734e) <= 0x03)
        goto loc_376a;
    if (memoryAGet(ds, 0x734e) >= 0x40)
        goto loc_376a;
    if (memoryAGet(ds, 0x734e) == 0x07)
        goto loc_376a;
    ax = 0x0001;
    goto loc_376c;
loc_376a: // 01ed:189a
    ax = 0;
loc_376c: // 01ed:189c
    memoryASet(ds, 0x7351, al);
    if (memoryAGet(ds, 0x734e) == 0x40)
        goto loc_377a;
    al = 0x19;
    goto loc_3785;
loc_377a: // 01ed:18aa
    ax = 0x0040;
    es = ax;
    al = memoryAGet(es, 0x0084);
    al++;
loc_3785: // 01ed:18b5
    memoryASet(ds, 0x734f, al);
    if (memoryAGet(ds, 0x734e) == 0x07)
        goto loc_37ae;
    ax = 0xf000;
    dx = 0xffea;
    push(ax);
    push(dx);
    ax = 0x7359;
    push(ax);
    sub_3632();
    if (ax)
        goto loc_37ae;
    sub_365c();
    if (ax)
        goto loc_37ae;
    ax = 0x0001;
    goto loc_37b0;
loc_37ae: // 01ed:18de
    ax = 0;
loc_37b0: // 01ed:18e0
    memoryASet(ds, 0x7352, al);
    if (memoryAGet(ds, 0x734e) != 0x07)
        goto loc_37bf;
    ax = 0xb000;
    goto loc_37c2;
loc_37bf: // 01ed:18ef
    ax = 0xb800;
loc_37c2: // 01ed:18f2
    memoryASet16(ds, 0x7355, ax);
    memoryASet16(ds, 0x7353, 0x0000);
    al = 0x00;
    memoryASet(ds, 0x7349, al);
    memoryASet(ds, 0x7348, al);
    al = memoryAGet(ds, 0x7350);
    al += 0xff;
    memoryASet(ds, 0x734a, al);
    al = memoryAGet(ds, 0x734f);
    al += 0xff;
    memoryASet(ds, 0x734b, al);
    bp = pop();
    sp += 2;
}
void sub_37e5() // 01ed:1915 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    ah = 0x2f;
    interrupt(0x21);
    push(es);
    push(bx);
    ah = 0x1a;
    dx = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    ah = 0x4e;
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    push(flagAsReg());
    cx = pop();
    tx = bx; bx = ax; ax = tx;
    ah = 0x1a;
    dx = pop();
    ds = pop();
    interrupt(0x21);
    push(cx);
    flagsFromReg(pop());
    ds = pop();
    if (flags.carry)
        goto loc_3812;
    ax = 0;
    goto loc_3816;
loc_3812: // 01ed:1942
    push(bx);
    sub_3a4b();
loc_3816: // 01ed:1946
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_3845() // 01ed:1975 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0x4201;
    bx = memoryAGet16(ss, bp + 6);
    cx = 0;
    dx = 0;
    interrupt(0x21);
    if (flags.carry)
        goto loc_387d;
    push(dx);
    push(ax);
    ax = 0x4202;
    cx = 0;
    dx = 0;
    interrupt(0x21);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 2, dx);
    dx = pop();
    cx = pop();
    if (flags.carry)
        goto loc_387d;
    ax = 0x4200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_387d;
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    goto loc_3882;
loc_387d: // 01ed:19ad
    push(ax);
    sub_3a4b();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
loc_3882: // 01ed:19b2
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3886() // 01ed:19b6 +far +stackDrop2
{
    if (memoryAGet(ds, 0x7360) == 0x00)
        goto loc_3897;
    memoryASet(ds, 0x7360, 0x00);
    al = memoryAGet(ds, 0x7361);
    goto loc_389c;
loc_3897: // 01ed:19c7
    ax = 0x0700;
    interrupt(0x21);
loc_389c: // 01ed:19cc
    ah = 0x00;
    cs = pop();
}
void sub_38e2() // 01ed:1a12 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    ah = 0x47;
    dl = memoryAGet(ss, bp + 6);
    si = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_38f6;
    ax = 0;
    goto loc_38fa;
loc_38f6: // 01ed:1a26
    push(ax);
    sub_3a4b();
loc_38fa: // 01ed:1a2a
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_38fd() // 01ed:1a2d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    push(ds);
    es = pop();
    if (!di)
        goto loc_3927;
    al = 0x00;
    ah = memoryAGet(ds, di);
    cx = 0xffff;
    flags.direction = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    cx = ~cx;
    cx--;
    if (!cx)
        goto loc_3927;
    di = memoryAGet16(ds, 0x744a);
    memoryASet16(ss, bp - 2, di);
    if (di)
        goto loc_3932;
loc_3927: // 01ed:1a57
    ax = 0;
    goto loc_3955;
loc_392b: // 01ed:1a5b
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x0002);
    di = memoryAGet16(ss, bp - 2);
loc_3932: // 01ed:1a62
    di = memoryAGet16(ds, di);
    if (!di)
        goto loc_3927;
    al = memoryAGet(ds, di);
    if (!al)
        goto loc_3927;
    if (ah != al)
        goto loc_392b;
    bx = cx;
    if (memoryAGet(ds, bx + di) != 0x3d)
        goto loc_392b;
    si = memoryAGet16(ss, bp + 6);
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    tx = bx; bx = cx; cx = tx;
    if (!flags.zero)
        goto loc_392b;
    di++;
    ax = di;
loc_3955: // 01ed:1a85
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_395b() // 01ed:1a8b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x35;
    al = memoryAGet(ss, bp + 6);
    interrupt(0x21);
    tx = bx; bx = ax; ax = tx;
    dx = es;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_396a() // 01ed:1a9a +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x25;
    al = memoryAGet(ss, bp + 6);
    push(ds);
    dx = memoryAGet16(ss, bp + 8); ds = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_397b() // 01ed:1aab
{
    sp -= 2;
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x30d4;
    ds = bp;
    bp = sp;
    memoryASet16(ds, 0x796a, sp);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ss, bp));
    push(memoryAGet16(ss, bp + 16));
    ax = memoryAGet16(ss, bp + 2);
    ax &= 0x00ff;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x7966 + 2); callIndirect(cs, memoryAGet16(ds, 0x7966)); assert(cs == 0x01ed); // 01ed:1acf;
    sp += 0x0008;
    memoryASet16(ss, bp + 16, ax);
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop("iret");
}
void sub_39b3() // 01ed:1ae3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x7968, ax);
    memoryASet16(ds, 0x7966, dx);
    push(cs);
    ax = 0x1aab;
    push(ax);
    ax = 0x0024;
    push(ax);
    push(cs);
    sub_396a();
    sp += 0x0006;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3a24() // 01ed:1b54 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x44;
    al = memoryAGet(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 10);
    interrupt(0x21);
    if (flags.carry)
        goto loc_3a45;
    if (memoryAGet16(ss, bp + 8) != 0x0000)
        goto loc_3a43;
    ax = dx;
    goto loc_3a49;
loc_3a43: // 01ed:1b73
    goto loc_3a49;
loc_3a45: // 01ed:1b75
    push(ax);
    sub_3a4b();
loc_3a49: // 01ed:1b79
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3a4b() // 01ed:1b7b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 4);
    if ((short)si < 0)
        goto loc_3a6b;
    if ((short)si <= (short)0x0058)
        goto loc_3a5e;
loc_3a5b: // 01ed:1b8b
    si = 0x0057;
loc_3a5e: // 01ed:1b8e
    memoryASet16(ds, 0x7362, si);
    al = memoryAGet(ds, si + 29540);
    cbw();
    si = ax;
    goto loc_3a7c;
loc_3a6b: // 01ed:1b9b
    ax = si;
    ax = -ax;
    si = ax;
    if ((short)si > (short)0x0023)
        goto loc_3a5b;
    memoryASet16(ds, 0x7362, 0xffff);
loc_3a7c: // 01ed:1bac
    memoryASet16(ds, 0x0094, si);
    ax = 0xffff;
    si = pop();
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_3a88() // 01ed:1bb8 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x4400;
    bx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    tx = dx; dx = ax; ax = tx;
    ax &= 0x0080;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3a99() // 01ed:1bc9 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 28888, memoryAGet16(ds, bx + 28888) & 0xfdff);
    ah = 0x42;
    al = memoryAGet(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_3abb;
    goto loc_3ac0;
loc_3abb: // 01ed:1beb
    push(ax);
    sub_3a4b();
    dx = ax & 0x8000 ? 0xffff : 0x0000;
loc_3ac0: // 01ed:1bf0
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3ac2() // 01ed:1bf2 +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0022;
    push(si);
    push(di);
    push(es);
    di = memoryAGet16(ss, bp + 10);
    push(ds);
    es = pop();
    bx = memoryAGet16(ss, bp + 8);
    if (bx > 0x0024)
        goto loc_3b30;
    if (bl < 0x02)
        goto loc_3b30;
    ax = memoryAGet16(ss, bp + 12);
    cx = memoryAGet16(ss, bp + 14);
    if ((short)cx >= 0)
        goto loc_3af8;
    if (memoryAGet(ss, bp + 6) == 0x00)
        goto loc_3af8;
    memoryASet(ds, di, 0x2d);
    di++;
    cx = -cx;
    ax = -ax;
    cx = cx - 0x0000 - flags.carry;
loc_3af8: // 01ed:1c28
    si = bp - 34;
    if (cx==0)
        goto loc_3b0c;
loc_3afd: // 01ed:1c2d
    tx = cx; cx = ax; ax = tx;
    dx = 0;
    div16(bx);
    tx = cx; cx = ax; ax = tx;
    div16(bx);
    memoryASet(ds, si, dl);
    si++;
    if (cx==0)
        goto loc_3b13;
    goto loc_3afd;
loc_3b0c: // 01ed:1c3c
    dx = 0;
    div16(bx);
    memoryASet(ds, si, dl);
    si++;
loc_3b13: // 01ed:1c43
    if (ax)
        goto loc_3b0c;
    cx = bp - 34;
    cx = -cx;
    cx += si;
    flags.direction = 0;
loc_3b1f: // 01ed:1c4f
    si--;
    al = memoryAGet(ds, si);
    flags.carry = al < 0x0a;
    al -= 0x0a;
    if (!flags.carry)
        goto loc_3b2a;
    al += 0x3a;
    goto loc_3b2d;
loc_3b2a: // 01ed:1c5a
    al += memoryAGet(ss, bp + 4);
loc_3b2d: // 01ed:1c5d
    stosb<ES_DI>(al);
    if (--cx)
        goto loc_3b1f;
loc_3b30: // 01ed:1c60
    al = 0x00;
    stosb<ES_DI>(al);
    es = pop();
    ax = memoryAGet16(ss, bp + 10);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 12;
}
void sub_3b3f() // 01ed:1c6f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 10);
    if (di != 0x000a)
        goto loc_3b54;
    ax = si;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    goto loc_3b58;
loc_3b54: // 01ed:1c84
    ax = si;
    dx = 0;
loc_3b58: // 01ed:1c88
    push(dx);
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    al = 0x01;
    push(ax);
    al = 0x61;
    push(ax);
    sub_3ac2();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3b6b() // 01ed:1c9b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 12));
    al = 0x00;
    push(ax);
    al = 0x61;
    push(ax);
    sub_3ac2();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3b85() // 01ed:1cb5 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 12);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 10));
    push(si);
    if (si != 0x000a)
        goto loc_3ba0;
    ax = 0x0001;
    goto loc_3ba2;
loc_3ba0: // 01ed:1cd0
    ax = 0;
loc_3ba2: // 01ed:1cd2
    push(ax);
    al = 0x61;
    push(ax);
    sub_3ac2();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3bac() // 01ed:1cdc +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = ds;
    es = ax;
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 8);
    cx = memoryAGet16(ss, bp + 10);
    flags.carry = cx & 1;
    cx >>= 1;
    flags.direction = 0;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    if (!flags.carry)
        goto loc_3bc6;
    movsb<ES_DI, DS_SI>();
loc_3bc6: // 01ed:1cf6
    ax = memoryAGet16(ss, bp + 6);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3bcd() // 01ed:1cfd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    ax = ds;
    es = ax;
    di = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 8);
    al = memoryAGet(ss, bp + 10);
    ah = al;
    flags.direction = 0;
    if (!(di & 0x0001))
        goto loc_3beb;
    if (cx==0)
        goto loc_3bf2;
    stosb<ES_DI>(al);
    cx--;
loc_3beb: // 01ed:1d1b
    flags.carry = cx & 1;
    cx >>= 1;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    if (!flags.carry)
        goto loc_3bf2;
    stosb<ES_DI>(al);
loc_3bf2: // 01ed:1d22
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3bf5() // 01ed:1d25 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    al = memoryAGet(ss, bp + 8);
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(si);
    push(cs);
    sub_3bcd();
    sp += 0x0006;
    ax = si;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3c10() // 01ed:1d40 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    flags.direction = 0;
    cx = memoryAGet16(ss, bp + 14);
    di = memoryAGet16(ss, bp + 12);
    es = memoryAGet16(ss, bp + 10);
    si = memoryAGet16(ss, bp + 8);
    push(ds);
    ds = memoryAGet16(ss, bp + 6);
    flags.carry = cx & 1;
    cx >>= 1;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    if (!flags.carry)
        goto loc_3c2d;
    movsb<ES_DI, DS_SI>();
loc_3c2d: // 01ed:1d5d
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3c32() // 01ed:1d62 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    cx = memoryAGet16(ss, bp + 4);
    ah = 0x3c;
    dx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_3c43;
    goto loc_3c47;
loc_3c43: // 01ed:1d73
    push(ax);
    sub_3a4b();
loc_3c47: // 01ed:1d77
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_3c4b() // 01ed:1d7b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 4);
    cx = 0;
    dx = 0;
    ah = 0x40;
    interrupt(0x21);
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_3c5d() // 01ed:1d8d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 8);
    if (si & 0xc000)
        goto loc_3c76;
    ax = memoryAGet16(ds, 0x7100);
    ax &= 0xc000;
    si |= ax;
loc_3c76: // 01ed:1da6
    if (si & 0x0100)
        goto loc_3c7e;
    goto loc_3cfc;
loc_3c7e: // 01ed:1dae
    ax = memoryAGet16(ds, 0x7102);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) & ax);
    ax = memoryAGet16(ss, bp + 10);
    if (ax & 0x0180)
        goto loc_3c93;
    ax = 0x0001;
    push(ax);
    sub_3a4b();
loc_3c93: // 01ed:1dc3
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_35e9();
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 2, ax);
    if (ax != 0xffff)
        goto loc_3cd1;
    if (!(memoryAGet16(ss, bp + 10) & 0x0080))
        goto loc_3cb3;
    ax = 0;
    goto loc_3cb6;
loc_3cb3: // 01ed:1de3
    ax = 0x0001;
loc_3cb6: // 01ed:1de6
    memoryASet16(ss, bp - 2, ax);
    if (!(si & 0x00f0))
        goto loc_3cea;
    push(memoryAGet16(ss, bp + 6));
    ax = 0;
    push(ax);
    sub_3c32();
    di = ax;
    if ((short)ax >= 0)
        goto loc_3ce1;
    goto loc_3d8c;
loc_3cd1: // 01ed:1e01
    if (!(si & 0x0400))
        goto loc_3cfc;
    ax = 0x0050;
    push(ax);
    sub_3a4b();
    goto loc_3d8e;
loc_3ce1: // 01ed:1e11
    push(di);
    push(cs);
    sub_3604();
    cx = pop();
    goto loc_3d01;
loc_3cea: // 01ed:1e1a
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp - 2));
    sub_3c32();
    di = ax;
    if ((short)ax >= 0)
        goto loc_3d6b;
    goto loc_3d8c;
loc_3cfc: // 01ed:1e2c
    memoryASet16(ss, bp - 2, 0x0000);
loc_3d01: // 01ed:1e31
    push(si);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_3d94();
    cx = pop();
    cx = pop();
    di = ax;
    if ((short)ax < 0)
        goto loc_3d6b;
    ax = 0;
    push(ax);
    push(di);
    push(cs);
    sub_3a24();
    cx = pop();
    cx = pop();
    memoryASet16(ss, bp - 4, ax);
    if (!(ax & 0x0080))
        goto loc_3d45;
    si |= 0x2000;
    if (!(si & 0x8000))
        goto loc_3d4f;
    ax &= 0x00ff;
    ax |= 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(di);
    push(cs);
    sub_3a24();
    sp += 0x0006;
    goto loc_3d4f;
loc_3d45: // 01ed:1e75
    if (!(si & 0x0200))
        goto loc_3d4f;
    push(di);
    sub_3c4b();
loc_3d4f: // 01ed:1e7f
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_3d6b;
    if (!(si & 0x00f0))
        goto loc_3d6b;
    ax = 0x0001;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_35e9();
    sp += 0x0006;
loc_3d6b: // 01ed:1e9b
    if ((short)di < 0)
        goto loc_3d8c;
    if (!(si & 0x0300))
        goto loc_3d7a;
    ax = 0x1000;
    goto loc_3d7c;
loc_3d7a: // 01ed:1eaa
    ax = 0;
loc_3d7c: // 01ed:1eac
    dx = si;
    dx &= 0xf8ff;
    dx |= ax;
    bx = di;
    bx <<= 1;
    memoryASet16(ds, bx + 28888, dx);
loc_3d8c: // 01ed:1ebc
    ax = di;
loc_3d8e: // 01ed:1ebe
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3d94() // 01ed:1ec4 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    al = 0x01;
    cx = memoryAGet16(ss, bp + 8);
    if (cx & 0x0002)
        goto loc_3dae;
    al = 0x02;
    if (cx & 0x0004)
        goto loc_3dae;
    al = 0x00;
loc_3dae: // 01ed:1ede
    dx = memoryAGet16(ss, bp + 6);
    cl = 0xf0;
    cl &= memoryAGet(ss, bp + 8);
    al |= cl;
    ah = 0x3d;
    interrupt(0x21);
    if (flags.carry)
        goto loc_3dd8;
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0xf8ff;
    ax |= 0x8000;
    memoryASet16(ds, bx + 28888, ax);
    ax = memoryAGet16(ss, bp - 2);
    goto loc_3ddc;
loc_3dd8: // 01ed:1f08
    push(ax);
    sub_3a4b();
loc_3ddc: // 01ed:1f0c
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3de0() // 01ed:1f10 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    if (ax < 0x0002)
        goto loc_3dfe;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 28888) & 0x0200))
        goto loc_3e03;
loc_3dfe: // 01ed:1f2e
    ax = 0;
    goto loc_3e95;
loc_3e03: // 01ed:1f33
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_3e9b();
    sp += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    ax++;
    if (ax < 0x0002)
        goto loc_3e2a;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 28888) & 0x8000))
        goto loc_3e2f;
loc_3e2a: // 01ed:1f5a
    ax = memoryAGet16(ss, bp - 2);
    goto loc_3e95;
loc_3e2f: // 01ed:1f5f
    cx = memoryAGet16(ss, bp - 2);
    si = memoryAGet16(ss, bp + 8);
    push(ds);
    es = pop();
    di = si;
    bx = si;
    flags.direction = 0;
loc_3e3c: // 01ed:1f6c
    al = lodsb<DS_SI>();
    if (al == 0x1a)
        goto loc_3e70;
    if (al == 0x0d)
        goto loc_3e4a;
    stosb<ES_DI>(al);
    if (--cx)
        goto loc_3e3c;
    goto loc_3e68;
loc_3e4a: // 01ed:1f7a
    if (--cx)
        goto loc_3e3c;
    push(es);
    push(bx);
    ax = 0x0001;
    push(ax);
    ax = bp - 3;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_3e9b();
    sp += 0x0006;
    bx = pop();
    es = pop();
    flags.direction = 0;
    al = memoryAGet(ss, bp - 3);
    stosb<ES_DI>(al);
loc_3e68: // 01ed:1f98
    if (di != bx)
        goto loc_3e6e;
    goto loc_3e03;
loc_3e6e: // 01ed:1f9e
    goto loc_3e92;
loc_3e70: // 01ed:1fa0
    push(bx);
    ax = 0x0001;
    push(ax);
    cx = -cx;
    ax = -flags.carry;
    push(ax);
    push(cx);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_3a99();
    sp += 0x0008;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 28888, memoryAGet16(ds, bx + 28888) | 0x0200);
    bx = pop();
loc_3e92: // 01ed:1fc2
    di -= bx;
    tx = di; di = ax; ax = tx;
loc_3e95: // 01ed:1fc5
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3e9b() // 01ed:1fcb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x3f;
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_3eaf;
    goto loc_3eb3;
loc_3eaf: // 01ed:1fdf
    push(ax);
    sub_3a4b();
loc_3eb3: // 01ed:1fe3
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3ecb() // 01ed:1ffb +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    ax = ds;
    es = ax;
    ah = 0x56;
    dx = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_3ee3;
    ax = 0;
    goto loc_3ee7;
loc_3ee3: // 01ed:2013
    push(ax);
    sub_3a4b();
loc_3ee7: // 01ed:2017
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_3eea() // 01ed:201a +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 4);
    di = memoryAGet16(ss, bp + 6);
    flags.direction = 0;
    push(ds);
    es = pop();
loc_3ef8: // 01ed:2028
    al = lodsb<DS_SI>();
    if (al < 0x61)
        goto loc_3f03;
    if (al > 0x7a)
        goto loc_3f03;
    al -= 0x20;
loc_3f03: // 01ed:2033
    stosb<ES_DI>(al);
    if (al)
        goto loc_3ef8;
    di--;
    tx = di; di = ax; ax = tx;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_3f10() // 01ed:2040 +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x002c;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 12);
    si = memoryAGet16(ss, bp + 14);
    if (memoryAGet(ds, di) != 0x00)
        goto loc_3f2e;
    push(cs);
    sub_35d6();
    al += 0x41;
    memoryASet(ds, di, al);
    goto loc_3f31;
loc_3f2e: // 01ed:205e
    memoryASet(ds, di, memoryAGet(ds, di) & 0xdf);
loc_3f31: // 01ed:2061
    al = memoryAGet(ds, di);
    memoryASet(ds, si, al);
    si++;
    memoryASet(ds, si, 0x3a);
    si++;
    bx = memoryAGet16(ss, bp + 10);
    if (memoryAGet(ds, bx) == 0x5c)
        goto loc_3f6a;
    if (memoryAGet(ds, bx) == 0x2f)
        goto loc_3f6a;
    memoryASet(ds, si, 0x5c);
    si++;
    push(si);
    al = memoryAGet(ds, di);
    cbw();
    ax += 0xffc0;
    push(ax);
    push(cs);
    sub_38e2();
    cx = pop();
    cx = pop();
    if (memoryAGet(ds, si) == 0x00)
        goto loc_3f6a;
    push(si);
    push(si);
    sub_3eea();
    si = ax;
    memoryASet(ds, si, 0x5c);
    si++;
loc_3f6a: // 01ed:209a
    push(si);
    push(memoryAGet16(ss, bp + 10));
    sub_3eea();
    si = ax;
    if (memoryAGet(ds, si + 65535) == 0x5c)
        goto loc_3f83;
    if (memoryAGet(ds, si + 65535) == 0x2f)
        goto loc_3f83;
    memoryASet(ds, si, 0x5c);
    si++;
loc_3f83: // 01ed:20b3
    push(si);
    push(memoryAGet16(ss, bp + 8));
    sub_3eea();
    si = ax;
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_3f99;
    push(si);
    push(memoryAGet16(ss, bp + 6));
    sub_3eea();
loc_3f99: // 01ed:20c9
    if (!(memoryAGet16(ss, bp + 4) & 0x0002))
        goto loc_3fa5;
    ax = 0x0027;
    goto loc_3fa8;
loc_3fa5: // 01ed:20d5
    ax = 0x0037;
loc_3fa8: // 01ed:20d8
    push(ax);
    ax = bp - 44;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(cs);
    sub_37e5();
    sp += 0x0006;
    ax++;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 12;
}
void sub_3fc1() // 01ed:20f1 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    di = 0x79b5;
    si = 0;
    memoryASet16(ss, bp - 2, 0x0000);
    if (memoryAGet16(ss, bp + 6) != 0x0000)
        goto loc_3fe0;
    bx = memoryAGet16(ss, bp + 6);
    if (memoryAGet(ds, bx) == 0x00)
        goto loc_3ffe;
loc_3fe0: // 01ed:2110
    ax = 0x796c;
    push(ax);
    ax = 0x7a05;
    push(ax);
    ax = 0x7972;
    push(ax);
    ax = 0x7a0f;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_277c();
    sp += 0x000a;
    memoryASet16(ss, bp - 2, ax);
loc_3ffe: // 01ed:212e
    ax = memoryAGet16(ss, bp - 2);
    ax &= 0x0005;
    if (ax == 0x0004)
        goto loc_400e;
    ax = 0;
    goto loc_411e;
loc_400e: // 01ed:213e
    if (!(memoryAGet16(ss, bp + 4) & 0x0002))
        goto loc_402b;
    if (!(memoryAGet16(ss, bp - 2) & 0x0008))
        goto loc_4020;
    memoryASet16(ss, bp + 4, memoryAGet16(ss, bp + 4) & 0xfffe);
loc_4020: // 01ed:2150
    if (!(memoryAGet16(ss, bp - 2) & 0x0002))
        goto loc_402b;
    memoryASet16(ss, bp + 4, memoryAGet16(ss, bp + 4) & 0xfffd);
loc_402b: // 01ed:215b
    if (!(memoryAGet16(ss, bp + 4) & 0x0001))
        goto loc_403e;
    ax = 0x73be;
    push(ax);
    push(cs);
    sub_38fd();
    cx = pop();
    si = ax;
loc_403e: // 01ed:216e
    push(di);
    ax = 0x7a0f;
    push(ax);
    ax = 0x7972;
    push(ax);
    ax = 0x7a05;
    push(ax);
    ax = 0x796c;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    sub_3f10();
    if (!ax)
        goto loc_405c;
    goto loc_411c;
loc_405c: // 01ed:218c
    if (!(memoryAGet16(ss, bp + 4) & 0x0002))
        goto loc_409e;
    push(di);
    ax = 0x7a0f;
    push(ax);
    ax = 0x7972;
    push(ax);
    ax = 0x7a05;
    push(ax);
    ax = 0x73c3;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    sub_3f10();
    if (!ax)
        goto loc_4081;
    goto loc_411c;
loc_4081: // 01ed:21b1
    push(di);
    ax = 0x7a0f;
    push(ax);
    ax = 0x7972;
    push(ax);
    ax = 0x7a05;
    push(ax);
    ax = 0x73c8;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    sub_3f10();
    if (!ax)
        goto loc_409e;
    goto loc_411c;
loc_409e: // 01ed:21ce
    if (!si)
        goto loc_40a7;
    if (memoryAGet(ds, si) != 0x00)
        goto loc_40ab;
loc_40a7: // 01ed:21d7
    di = 0;
    goto loc_411c;
loc_40ab: // 01ed:21db
    memoryASet16(ss, bp - 2, 0x0000);
    if (memoryAGet(ds, si + 1) != 0x3a)
        goto loc_40d0;
    al = memoryAGet(ds, si);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx + 31247, al);
    si++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    al = memoryAGet(ds, si);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx + 31247, al);
    si++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_40d0: // 01ed:2200
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx + 31247, 0x00);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_40f4;
loc_40df: // 01ed:220f
    bx = memoryAGet16(ss, bp - 2);
    if (memoryAGet(ds, bx + 31090) != 0x3b)
        goto loc_40f1;
    memoryASet(ds, bx + 31090, 0x00);
    si++;
    goto loc_4104;
loc_40f1: // 01ed:2221
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_40f4: // 01ed:2224
    bx = si;
    si++;
    al = memoryAGet(ds, bx);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet(ds, bx + 31090, al);
    if (al)
        goto loc_40df;
loc_4104: // 01ed:2234
    si--;
    if (memoryAGet(ds, 0x7972) == 0x00)
        goto loc_410f;
    goto loc_403e;
loc_410f: // 01ed:223f
    memoryASet(ds, 0x7972, 0x5c);
    memoryASet(ds, 0x7973, 0x00);
    goto loc_403e;
loc_411c: // 01ed:224c
    ax = di;
loc_411e: // 01ed:224e
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_4135() // 01ed:2265 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x4a;
    bx = memoryAGet16(ss, bp + 8);
    es = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_4149;
    ax = 0xffff;
    goto loc_414f;
loc_4149: // 01ed:2279
    push(bx);
    push(ax);
    sub_3a4b();
    ax = pop();
loc_414f: // 01ed:227f
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4151() // 01ed:2281 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    flags.direction = 0;
    di = memoryAGet16(ss, bp + 6);
    push(ds);
    es = pop();
    dx = di;
    al = 0;
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    si = di + 65535;
    di = memoryAGet16(ss, bp + 8);
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    cx = ~cx;
    di -= cx;
    tx = di; di = si; si = tx;
    if (!(si & 0x0001))
        goto loc_417e;
    movsb<ES_DI, DS_SI>();
    cx--;
loc_417e: // 01ed:22ae
    flags.carry = cx & 1;
    cx >>= 1;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    if (!flags.carry)
        goto loc_4185;
    movsb<ES_DI, DS_SI>();
loc_4185: // 01ed:22b5
    tx = dx; dx = ax; ax = tx;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_418a() // 01ed:22ba +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = ds;
    es = ax;
    flags.direction = 0;
    ax = 0;
    bx = ax;
    di = memoryAGet16(ss, bp + 8);
    si = di;
    al = 0;
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    cx = ~cx;
    di = si;
    si = memoryAGet16(ss, bp + 6);
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    al = memoryAGet(ds, si + 65535);
    bl = memoryAGet(ds, di + 65535);
    ax -= bx;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_41b9() // 01ed:22e9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = ds;
    es = ax;
    flags.direction = 0;
    di = memoryAGet16(ss, bp + 8);
    si = di;
    al = 0;
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    cx = ~cx;
    di = memoryAGet16(ss, bp + 6);
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ax = memoryAGet16(ss, bp + 6);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_41dd() // 01ed:230d +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    ax = ds;
    es = ax;
    di = memoryAGet16(ss, bp + 6);
    ax = 0;
    flags.direction = 0;
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    tx = cx; cx = ax; ax = tx;
    ax = ~ax;
    ax--;
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_41f7() // 01ed:2327 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = ds;
    es = ax;
    flags.direction = 0;
    di = memoryAGet16(ss, bp + 8);
    si = di;
    al = 0;
    bx = memoryAGet16(ss, bp + 10);
    cx = bx;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    bx -= cx;
    di = memoryAGet16(ss, bp + 6);
    tx = bx; bx = cx; cx = tx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    cx = bx;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    ax = memoryAGet16(ss, bp + 6);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4223() // 01ed:2353 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x41;
    dx = memoryAGet16(ss, bp + 6);
    interrupt(0x21);
    if (flags.carry)
        goto loc_4233;
    ax = 0;
    goto loc_4237;
loc_4233: // 01ed:2363
    push(ax);
    sub_3a4b();
loc_4237: // 01ed:2367
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4710() // 01ed:2840 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 4);
    ax--;
    dl = memoryAGet(ds, 0x7350);
    dh = 0x00;
    imul16(dx);
    push(ax);
    ax = memoryAGet16(ds, 0x7353);
    dx = pop();
    ax += dx;
    dx = memoryAGet16(ss, bp + 6);
    dx--;
    ax += dx;
    ax <<= 1;
    dx = memoryAGet16(ds, 0x7355);
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_4736() // 01ed:2866 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp--;
    sp--;
    push(si);
    push(di);
    al = memoryAGet(ds, 0x7352);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    push(ds);
    cx = memoryAGet16(ss, bp + 4);
    if (cx==0)
        goto loc_47a5;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    flags.direction = 0;
    if (si >= di)
        goto loc_4760;
    ax = cx;
    ax--;
    ax <<= 1;
    si += ax;
    di += ax;
    flags.direction = 1;
loc_4760: // 01ed:2890
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_476a;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    goto loc_47a5;
loc_476a: // 01ed:289a
    dx = 0x03da;
    ax = es;
    bx = ds;
    if (ax == bx)
        goto loc_4786;
loc_4775: // 01ed:28a5
    flags.interrupts = 0;
loc_4776: // 01ed:28a6
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (flags.carry)
        goto loc_4776;
loc_477b: // 01ed:28ab
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (!flags.carry)
        goto loc_477b;
    movsw<ES_DI, DS_SI>();
    flags.interrupts = 1;
    if (--cx)
        goto loc_4775;
    goto loc_47a5;
loc_4786: // 01ed:28b6
    flags.interrupts = 0;
loc_4787: // 01ed:28b7
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (flags.carry)
        goto loc_4787;
loc_478c: // 01ed:28bc
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (!flags.carry)
        goto loc_478c;
    ax = lodsw<DS_SI>();
    flags.interrupts = 1;
    bx = ax;
loc_4795: // 01ed:28c5
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (flags.carry)
        goto loc_4795;
loc_479a: // 01ed:28ca
    al = in8(dx);
    flags.carry = !!(al & (1 << (0x01-1)));
    al = ror8(al, 0x01);
    if (!flags.carry)
        goto loc_479a;
    ax = bx;
    stosw<ES_DI>(ax);
    flags.interrupts = 1;
    if (--cx)
        goto loc_4786;
loc_47a5: // 01ed:28d5
    flags.direction = 0;
    ds = pop();
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 10;
}
void sub_47af() // 01ed:28df +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    if (!(memoryAGet16(ds, bx + 28888) & 0x0800))
        goto loc_47d4;
    ax = 0x0002;
    push(ax);
    ax = 0;
    dx = 0;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_3a99();
    sp += 0x0008;
loc_47d4: // 01ed:2904
    ah = 0x40;
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 8);
    interrupt(0x21);
    if (flags.carry)
        goto loc_47f2;
    push(ax);
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 28888, memoryAGet16(ds, bx + 28888) | 0x1000);
    ax = pop();
    goto loc_47f6;
loc_47f2: // 01ed:2922
    push(ax);
    sub_3a4b();
loc_47f6: // 01ed:2926
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4b7b() // 01ed:2cab
{
    if (dx == memoryAGet16(cs, 0x2c9f))
        goto loc_4bb9;
    ds = dx;
    ds = memoryAGet16(ds, 0x0002);
    if (memoryAGet16(ds, 0x0002) == 0x0000)
        goto loc_4b96;
    memoryASet16(cs, 0x2ca1, ds);
    goto loc_4bce;
loc_4b96: // 01ed:2cc6
    ax = ds;
    if (ax == memoryAGet16(cs, 0x2c9f))
        goto loc_4bb4;
    ax = memoryAGet16(ds, 0x0008);
    memoryASet16(cs, 0x2ca1, ax);
    push(ds);
    ax = 0;
    push(ax);
    sub_4c4e();
    ds = memoryAGet16(cs, 0x2ca5);
    goto loc_4bd7;
loc_4bb4: // 01ed:2ce4
    dx = memoryAGet16(cs, 0x2c9f);
loc_4bb9: // 01ed:2ce9
    memoryASet16(cs, 0x2c9f, 0x0000);
    memoryASet16(cs, 0x2ca1, 0x0000);
    memoryASet16(cs, 0x2ca3, 0x0000);
loc_4bce: // 01ed:2cfe
    ds = memoryAGet16(cs, 0x2ca5);
    push(dx);
    ax = 0;
    push(ax);
loc_4bd7: // 01ed:2d07
    sub_2530();
    ax = pop();
    ax = pop();
}
void sub_4bdd() // 01ed:2d0d
{
    ds = dx;
    push(ds);
    es = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x0002, 0x0000);
    memoryASet16(ds, 0x0008, es);
    if (dx == memoryAGet16(cs, 0x2c9f))
        goto loc_4c23;
    if (memoryAGet16(es, 0x0002) != 0x0000)
        goto loc_4c23;
    ax = memoryAGet16(ds, 0x0000);
    bx = pop();
    push(es);
    memoryASet16(es, 0x0000, memoryAGet16(es, 0x0000) + ax);
    cx = es;
    dx += ax;
    es = dx;
    if (memoryAGet16(es, 0x0002) != 0x0000)
        goto loc_4c1c;
    memoryASet16(es, 0x0008, cx);
    goto loc_4c26;
loc_4c1c: // 01ed:2d4c
    memoryASet16(es, 0x0002, cx);
    goto loc_4c26;
loc_4c23: // 01ed:2d53
    sub_4c77();
loc_4c26: // 01ed:2d56
    es = pop();
    ax = es;
    ax += memoryAGet16(es, 0x0000);
    ds = ax;
    if (memoryAGet16(ds, 0x0002) == 0x0000)
        goto loc_4c38;
    return;
loc_4c38: // 01ed:2d68
    ax = memoryAGet16(ds, 0x0000);
    memoryASet16(es, 0x0000, memoryAGet16(es, 0x0000) + ax);
    ax = es;
    bx = ds;
    bx += memoryAGet16(ds, 0x0000);
    es = bx;
    memoryASet16(es, 0x0002, ax);
    bx = ds;
    if (bx == memoryAGet16(ds, 0x0006))
        goto loc_4c6f;
    es = memoryAGet16(ds, 0x0006);
    ds = memoryAGet16(ds, 0x0004);
    memoryASet16(ds, 0x0006, es);
    memoryASet16(es, 0x0004, ds);
    memoryASet16(cs, 0x2ca3, ds);
    ds = bx;
    return;
loc_4c6f: // 01ed:2d9f
    memoryASet16(cs, 0x2ca3, 0x0000);
}
void sub_4c4e() // 01ed:2d7e
{
    bx = ds;
    if (bx == memoryAGet16(ds, 0x0006))
        goto loc_4c6f;
    es = memoryAGet16(ds, 0x0006);
    ds = memoryAGet16(ds, 0x0004);
    memoryASet16(ds, 0x0006, es);
    memoryASet16(es, 0x0004, ds);
    memoryASet16(cs, 0x2ca3, ds);
    ds = bx;
    return;
loc_4c6f: // 01ed:2d9f
    memoryASet16(cs, 0x2ca3, 0x0000);
}
void sub_4c77() // 01ed:2da7
{
    ax = memoryAGet16(cs, 0x2ca3);
    if (!ax)
        goto loc_4c9f;
    bx = ss;
    flags.interrupts = 0;
    ss = ax;
    es = memoryAGet16(ss, 0x0006);
    memoryASet16(ss, 0x0006, ds);
    memoryASet16(ds, 0x0004, ss);
    ss = bx;
    flags.interrupts = 1;
    memoryASet16(es, 0x0004, ds);
    memoryASet16(ds, 0x0006, es);
    return;
loc_4c9f: // 01ed:2dcf
    memoryASet16(cs, 0x2ca3, ds);
    memoryASet16(ds, 0x0004, ds);
    memoryASet16(ds, 0x0006, ds);
}
void sub_4cad() // 01ed:2ddd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    memoryASet16(cs, 0x2ca5, ds);
    dx = memoryAGet16(ss, bp + 8);
    if (!dx)
        goto loc_4ccd;
    if (dx != memoryAGet16(cs, 0x2ca1))
        goto loc_4cca;
    sub_4b7b();
    goto loc_4ccd;
loc_4cca: // 01ed:2dfa
    sub_4bdd();
loc_4ccd: // 01ed:2dfd
    ds = memoryAGet16(cs, 0x2ca5);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4cd6() // 01ed:2e06
{
    push(ax);
    ds = memoryAGet16(cs, 0x2ca5);
    ax = 0;
    push(ax);
    push(ax);
    sub_256f();
    bx = pop();
    bx = pop();
    ax &= 0x000f;
    if (!ax)
        goto loc_4cfd;
    dx = 0x0010;
    dx -= ax;
    ax = 0;
    ds = memoryAGet16(cs, 0x2ca5);
    push(ax);
    push(dx);
    sub_256f();
    bx = pop();
    bx = pop();
loc_4cfd: // 01ed:2e2d
    ax = pop();
    push(ax);
    bx = 0;
    bl = ah;
    cl = 0x04;
    bx >>= cl;
    ax <<= cl;
    ds = memoryAGet16(cs, 0x2ca5);
    push(bx);
    push(ax);
    sub_256f();
    bx = pop();
    bx = pop();
    bx = pop();
    if (ax == 0xffff)
        goto loc_4d33;
    memoryASet16(cs, 0x2c9f, dx);
    memoryASet16(cs, 0x2ca1, dx);
    ds = dx;
    memoryASet16(ds, 0x0000, bx);
    memoryASet16(ds, 0x0002, dx);
    ax = 0x0004;
    return;
loc_4d33: // 01ed:2e63
    ax = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
}
void sub_4d37() // 01ed:2e67
{
    push(ax);
    bx = 0;
    bl = ah;
    cl = 0x04;
    bx >>= cl;
    ax <<= cl;
    ds = memoryAGet16(cs, 0x2ca5);
    push(bx);
    push(ax);
    sub_256f();
    bx = pop();
    bx = pop();
    bx = pop();
    if (ax == 0xffff)
        goto loc_4d6c;
    cx = memoryAGet16(cs, 0x2ca1);
    memoryASet16(cs, 0x2ca1, dx);
    ds = dx;
    memoryASet16(ds, 0x0000, bx);
    memoryASet16(ds, 0x0002, cx);
    ax = 0x0004;
    return;
loc_4d6c: // 01ed:2e9c
    ax = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
}
void sub_4d70() // 01ed:2ea0
{
    bx = dx;
    memoryASet16(ds, 0x0000, memoryAGet16(ds, 0x0000) - ax);
    dx += memoryAGet16(ds, 0x0000);
    ds = dx;
    memoryASet16(ds, 0x0000, ax);
    memoryASet16(ds, 0x0002, bx);
    bx = dx;
    bx += memoryAGet16(ds, 0x0000);
    ds = bx;
    memoryASet16(ds, 0x0002, dx);
    ax = 0x0004;
}
void sub_4d93() // 01ed:2ec3 +far +stackDrop2
{
    bool temp_cf;

    sp -= 2;
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    push(si);
    push(di);
    memoryASet16(cs, 0x2ca5, ds);
    cx = ax;
    cx |= dx;
    if (!cx)
        goto loc_4e07;
    flags.carry = (ax + 0x0013) >= 0x10000;
    ax += 0x0013;
    temp_cf = (dx + 0x0000 + flags.carry) >= 0x10000;
    dx += 0x0000 + flags.carry;
    flags.carry = temp_cf;
    if (flags.carry)
        goto loc_4df2;
    if (dx & 0xfff0)
        goto loc_4df2;
    cl = 0x04;
    ax >>= cl;
    dx <<= cl;
    ah |= dl;
    dx = memoryAGet16(cs, 0x2c9f);
    if (!dx)
        goto loc_4de8;
    dx = memoryAGet16(cs, 0x2ca3);
    if (!dx)
        goto loc_4de3;
    bx = dx;
loc_4dd3: // 01ed:2f03
    ds = dx;
    if (memoryAGet16(ds, 0x0000) >= ax)
        goto loc_4df7;
    dx = memoryAGet16(ds, 0x0006);
    if (dx != bx)
        goto loc_4dd3;
loc_4de3: // 01ed:2f13
    sub_4d37();
    goto loc_4e07;
loc_4de8: // 01ed:2f18
    sub_4cd6();
    goto loc_4e07;
loc_4ded: // 01ed:2f1d
    sub_4d70();
    goto loc_4e07;
loc_4df2: // 01ed:2f22
    ax = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    goto loc_4e07;
loc_4df7: // 01ed:2f27
    if (memoryAGet16(ds, 0x0000) > ax)
        goto loc_4ded;
    sub_4c4e();
    bx = memoryAGet16(ds, 0x0008);
    memoryASet16(ds, 0x0002, bx);
    ax = 0x0004;
loc_4e07: // 01ed:2f37
    ds = memoryAGet16(cs, 0x2ca5);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_4f5a() // 01ed:308a +far +stackDrop2
{
    push(si);
    tx = si; si = ax; ax = tx;
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_4f63;
    mul16(bx);
loc_4f63: // 01ed:3093
    if (cx==0)
        goto loc_4f6a;
    tx = cx; cx = ax; ax = tx;
    mul16(si);
    ax += cx;
loc_4f6a: // 01ed:309a
    tx = si; si = ax; ax = tx;
    mul16(bx);
    dx += si;
    si = pop();
    cs = pop();
}
void sub_4f95() // 01ed:30c5 +far +stackDrop10
{
    sp -= 2;
    cx = 0;
    goto loc_4faf;
  // gap 22 bytes
loc_4faf: // 01ed:30df
    push(bp);
    push(si);
    push(di);
    bp = sp;
    di = cx;
    ax = memoryAGet16(ss, bp + 10);
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 14);
    cx = memoryAGet16(ss, bp + 16);
    if (cx)
        goto loc_4fce;
    if (!dx)
        goto loc_5033;
    if (!bx)
        goto loc_5033;
loc_4fce: // 01ed:30fe
    if (di & 0x0001)
        goto loc_4ff0;
    if ((short)dx >= 0)
        goto loc_4fe2;
    dx = -dx;
    ax = -ax;
    dx = dx - 0x0000 - flags.carry;
    di |= 0x000c;
loc_4fe2: // 01ed:3112
    if ((short)cx >= 0)
        goto loc_4ff0;
    cx = -cx;
    bx = -bx;
    cx = cx - 0x0000 - flags.carry;
    di ^= 0x0004;
loc_4ff0: // 01ed:3120
    bp = cx;
    cx = 0x0020;
    push(di);
    di = 0;
    si = 0;
loc_4ffa: // 01ed:312a
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    si = rcl16(si, 0x0001);
    di = rcl16(di, 0x0001);
    if (di < bp)
        goto loc_5011;
    if (di > bp)
        goto loc_500c;
    if (si < bx)
        goto loc_5011;
loc_500c: // 01ed:313c
    flags.carry = si < bx;
    si -= bx;
    di = di - bp - flags.carry;
    ax++;
loc_5011: // 01ed:3141
    if (--cx)
        goto loc_4ffa;
    bx = pop();
    if (!(bx & 0x0002))
        goto loc_5020;
    ax = si;
    dx = di;
    bx >>= 1;
loc_5020: // 01ed:3150
    if (!(bx & 0x0004))
        goto loc_502d;
    dx = -dx;
    ax = -ax;
    dx = dx - 0x0000 - flags.carry;
loc_502d: // 01ed:315d
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
    return;
loc_5033: // 01ed:3163
    div16(bx);
    if (!(di & 0x0002))
        goto loc_503c;
    tx = dx; dx = ax; ax = tx;
loc_503c: // 01ed:316c
    dx = 0;
    goto loc_502d;
}
void sub_5043() // 01ed:3173 +far +stackDrop2
{
    if (cl >= 0x10)
        goto loc_5058;
    bx = ax;
    ax <<= cl;
    dx <<= cl;
    cl = -cl;
    cl += 0x10;
    bx >>= cl;
    dx |= bx;
    cs = pop();
    return;
loc_5058: // 01ed:3188
    cl -= 0x10;
    tx = dx; dx = ax; ax = tx;
    ax = 0;
    dx <<= cl;
    cs = pop();
}
void sub_5064() // 01ed:3194 +far
{
    if (cl >= 0x10)
        goto loc_5079;
    bx = dx;
    ax >>= cl;
    dx = sar16(dx, cl);
    cl = -cl;
    cl += 0x10;
    bx <<= cl;
    ax |= bx;
    cs = pop();
    return;
loc_5079: // 01ed:31a9
    cl -= 0x10;
    tx = dx; dx = ax; ax = tx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax = sar16(ax, cl);
    cs = pop();
}
void sub_5084() // 01ed:31b4 +far +stackDrop2
{
    if (cl >= 0x10)
        goto loc_5099;
    bx = dx;
    ax >>= cl;
    dx >>= cl;
    cl = -cl;
    cl += 0x10;
    bx <<= cl;
    ax |= bx;
    cs = pop();
    return;
loc_5099: // 01ed:31c9
    cl -= 0x10;
    tx = dx; dx = ax; ax = tx;
    dx = 0;
    ax >>= cl;
    cs = pop();
}
void sub_50a5() // 01ed:31d5 +far +stackDrop2
{
    es = dx;
    tx = bx; bx = ax; ax = tx;
    dx = memoryAGet16(es, bx + 2);
    push(bx);
    bx = memoryAGet16(es, bx);
    if ((short)cx >= 0)
        goto loc_50c0;
    ax = ~ax;
    cx = ~cx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    cx += 0x0000 + flags.carry;
    goto loc_5104;
loc_50c0: // 01ed:31f0
    flags.carry = (bx + ax) >= 0x10000;
    bx += ax;
    if (!flags.carry)
        goto loc_50c8;
    dx += 0x1000;
loc_50c8: // 01ed:31f8
    ah = cl;
    cl = 0x04;
    ah <<= cl;
    al = 0;
    dx += ax;
    ch = bl;
    bx >>= cl;
    dx += bx;
    al = ch;
    ax &= 0x000f;
    bx = pop();
    memoryASet16(es, bx, ax);
    memoryASet16(es, bx + 2, dx);
    cs = pop();
    return;
  // gap 30 bytes
loc_5104: // 01ed:3234
    flags.carry = bx < ax;
    bx -= ax;
    if (!flags.carry)
        goto loc_510c;
    dx -= 0x1000;
loc_510c: // 01ed:323c
    ah = cl;
    cl = 0x04;
    ah <<= cl;
    al = 0;
    dx -= ax;
    ch = bl;
    bx >>= cl;
    dx += bx;
    al = ch;
    ax &= 0x000f;
    bx = pop();
    memoryASet16(es, bx, ax);
    memoryASet16(es, bx + 2, dx);
    cs = pop();
}
void sub_50e9() // 01ed:3219 +far +stackDrop2
{
    goto loc_50e9;
loc_50c0: // 01ed:31f0
    flags.carry = (bx + ax) >= 0x10000;
    bx += ax;
    if (!flags.carry)
        goto loc_50c8;
    dx += 0x1000;
loc_50c8: // 01ed:31f8
    ah = cl;
    cl = 0x04;
    ah <<= cl;
    al = 0;
    dx += ax;
    ch = bl;
    bx >>= cl;
    dx += bx;
    al = ch;
    ax &= 0x000f;
    bx = pop();
    memoryASet16(es, bx, ax);
    memoryASet16(es, bx + 2, dx);
    cs = pop();
    return;
  // gap 3 bytes
loc_50e9: // 01ed:3219
    es = dx;
    tx = bx; bx = ax; ax = tx;
    dx = memoryAGet16(es, bx + 2);
    push(bx);
    bx = memoryAGet16(es, bx);
    if ((short)cx >= 0)
        goto loc_5104;
    ax = ~ax;
    cx = ~cx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    cx += 0x0000 + flags.carry;
    goto loc_50c0;
loc_5104: // 01ed:3234
    flags.carry = bx < ax;
    bx -= ax;
    if (!flags.carry)
        goto loc_510c;
    dx -= 0x1000;
loc_510c: // 01ed:323c
    ah = cl;
    cl = 0x04;
    ah <<= cl;
    al = 0;
    dx -= ax;
    ch = bl;
    bx >>= cl;
    dx += bx;
    al = ch;
    ax &= 0x000f;
    bx = pop();
    memoryASet16(es, bx, ax);
    memoryASet16(es, bx + 2, dx);
    cs = pop();
}
void sub_512a() // 01ed:325a +stackDrop2 +nearAsFar
{
    sp -= 2;
    es = pop();
    push(cs);
    push(es);
    if ((short)cx >= 0)
        goto loc_513d;
    bx = ~bx;
    cx = ~cx;
    flags.carry = (bx + 0x0001) >= 0x10000;
    bx += 0x0001;
    cx += 0x0000 + flags.carry;
    goto loc_516c;
loc_513d: // 01ed:326d
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    if (!flags.carry)
        goto loc_5145;
    dx += 0x1000;
loc_5145: // 01ed:3275
    ch = cl;
    cl = 0x04;
    ch <<= cl;
    dh += ch;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    sp += 2;
    cs = pop();
    return;
  // gap 19 bytes
loc_516c: // 01ed:329c
    flags.carry = ax < bx;
    ax -= bx;
    if (!flags.carry)
        goto loc_5174;
    dx -= 0x1000;
loc_5174: // 01ed:32a4
    bh = cl;
    cl = 0x04;
    bh <<= cl;
    bl = 0;
    dx -= bx;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    sp += 2;
    cs = pop();
}
void sub_512d() // 01ed:325d +far +stackDrop2
{
    if ((short)cx >= 0)
        goto loc_513d;
    bx = ~bx;
    cx = ~cx;
    flags.carry = (bx + 0x0001) >= 0x10000;
    bx += 0x0001;
    cx += 0x0000 + flags.carry;
    goto loc_516c;
loc_513d: // 01ed:326d
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    if (!flags.carry)
        goto loc_5145;
    dx += 0x1000;
loc_5145: // 01ed:3275
    ch = cl;
    cl = 0x04;
    ch <<= cl;
    dh += ch;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    cs = pop();
    return;
  // gap 19 bytes
loc_516c: // 01ed:329c
    flags.carry = ax < bx;
    ax -= bx;
    if (!flags.carry)
        goto loc_5174;
    dx -= 0x1000;
loc_5174: // 01ed:32a4
    bh = cl;
    cl = 0x04;
    bh <<= cl;
    bl = 0;
    dx -= bx;
    ch = al;
    ax >>= cl;
    dx += ax;
    al = ch;
    ax &= 0x000f;
    cs = pop();
}
void sub_518a() // 01ed:32ba +stackDrop2 +nearAsFar
{
    sp -= 2;
    es = pop();
    push(cs);
    push(es);
    push(di);
    di = cx;
    ch = dh;
    cl = 0x04;
    dx <<= cl;
    ch >>= cl;
    flags.carry = (dx + ax) >= 0x10000;
    dx += ax;
    ch += 0x00 + flags.carry;
    ax = di;
    di <<= cl;
    ah >>= cl;
    flags.carry = (bx + di) >= 0x10000;
    bx += di;
    ah += 0x00 + flags.carry;
    flags.carry = dx < bx;
    dx -= bx;
    ch = ch - ah - flags.carry;
    al = ch;
    cbw();
    tx = dx; dx = ax; ax = tx;
    di = pop();
    sp += 2;
    cs = pop();
}
void sub_51b5() // 01ed:32e5 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    si = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    flags.direction = 0;
    flags.carry = cx & 1;
    cx >>= 1;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    cx += cx + flags.carry;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_51d7() // 01ed:3307 +far +stackDrop2
{
    sp -= 2;
    bx = pop();
    stop("stack_below");
    es = pop();
    sp -= cx;
    push(es);
    push(bx);
    push(di);
    push(ds);
    di = sp;
    di += 0x0008;
    bx = ss;
    es = bx;
    ds = dx;
    tx = si; si = ax; ax = tx;
    flags.direction = 0;
    flags.carry = cx & 1;
    cx >>= 1;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    cx += cx + flags.carry;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    tx = si; si = ax; ax = tx;
    ds = pop();
    di = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_51f8() // 01ed:3328 +nearfar +stackDrop2
{
    sp -= 2;
    push(si);
    push(di);
    si = sp;
    bx = memoryAGet16(ds, si + 8);
    flags.carry = bx < 0x0004;
    bx -= 0x0004;
    if (flags.carry)
        goto loc_5212;
    if (bx == memoryAGet16(ds, 0x7438))
        goto loc_520f;
    sub_524f();
    goto loc_5212;
loc_520f: // 01ed:333f
    sub_5215();
loc_5212: // 01ed:3342
    di = pop();
    si = pop();
    sp += 2;
    cs = pop();
}
void sub_5215() // 01ed:3345
{
    if (memoryAGet16(ds, 0x7436) == bx)
        goto loc_523e;
    si = memoryAGet16(ds, bx + 2);
    if (!(memoryAGet(ds, si) & 0x01))
        goto loc_5229;
    memoryASet16(ds, 0x7438, si);
    goto loc_5249;
loc_5229: // 01ed:3359
    if (si == memoryAGet16(ds, 0x7436))
        goto loc_523c;
    bx = si;
    sub_5288();
    ax = memoryAGet16(ds, bx + 2);
    memoryASet16(ds, 0x7438, ax);
    goto loc_5249;
loc_523c: // 01ed:336c
    bx = si;
loc_523e: // 01ed:336e
    ax = 0;
    memoryASet16(ds, 0x7436, ax);
    memoryASet16(ds, 0x7438, ax);
    memoryASet16(ds, 0x743a, ax);
loc_5249: // 01ed:3379
    push(bx);
    sub_3551();
    bx = pop();
}
void sub_524f() // 01ed:337f
{
    memoryASet16(ds, bx, memoryAGet16(ds, bx) - 1);
    if (bx == memoryAGet16(ds, 0x7436))
        goto loc_526f;
    si = memoryAGet16(ds, bx + 2);
    ax = memoryAGet16(ds, si);
    if (al & 0x01)
        goto loc_526f;
    ax += memoryAGet16(ds, bx);
    memoryASet16(ds, si, ax);
    di = memoryAGet16(ds, bx);
    di += bx;
    memoryASet16(ds, di + 2, si);
    bx = si;
    goto loc_5272;
loc_526f: // 01ed:339f
    sub_52a4();
loc_5272: // 01ed:33a2
    di = memoryAGet16(ds, bx);
    di += bx;
    ax = memoryAGet16(ds, di);
    if (!(al & 0x01))
        goto loc_527d;
    return;
loc_527d: // 01ed:33ad
    memoryASet16(ds, bx, memoryAGet16(ds, bx) + ax);
    si = di;
    si += ax;
    memoryASet16(ds, si + 2, bx);
    bx = di;
    di = memoryAGet16(ds, bx + 6);
    if (bx == di)
        goto loc_529d;
    memoryASet16(ds, 0x743a, di);
    si = memoryAGet16(ds, bx + 4);
    memoryASet16(ds, di + 4, si);
    memoryASet16(ds, si + 6, di);
    return;
loc_529d: // 01ed:33cd
    memoryASet16(ds, 0x743a, 0x0000);
}
void sub_5288() // 01ed:33b8
{
    di = memoryAGet16(ds, bx + 6);
    if (bx == di)
        goto loc_529d;
    memoryASet16(ds, 0x743a, di);
    si = memoryAGet16(ds, bx + 4);
    memoryASet16(ds, di + 4, si);
    memoryASet16(ds, si + 6, di);
    return;
loc_529d: // 01ed:33cd
    memoryASet16(ds, 0x743a, 0x0000);
}
void sub_52a4() // 01ed:33d4
{
    si = memoryAGet16(ds, 0x743a);
    if (!si)
        goto loc_52bc;
    di = memoryAGet16(ds, si + 6);
    memoryASet16(ds, si + 6, bx);
    memoryASet16(ds, di + 4, bx);
    memoryASet16(ds, bx + 6, di);
    memoryASet16(ds, bx + 4, si);
    return;
loc_52bc: // 01ed:33ec
    memoryASet16(ds, 0x743a, bx);
    memoryASet16(ds, bx + 4, bx);
    memoryASet16(ds, bx + 6, bx);
}
void sub_52c7() // 01ed:33f7 +nearfar +stackDrop2
{
    sp -= 2;
    push(si);
    push(di);
    si = sp;
    ax = memoryAGet16(ds, si + 8);
    if (!ax)
        goto loc_5324;
    flags.carry = (ax + 0x0005) >= 0x10000;
    ax += 0x0005;
    if (flags.carry)
        goto loc_530d;
    ax &= 0xfffe;
    if (ax >= 0x0008)
        goto loc_52e2;
    ax = 0x0008;
loc_52e2: // 01ed:3412
    if (memoryAGet16(ds, 0x7436) == 0x0000)
        goto loc_5308;
    bx = memoryAGet16(ds, 0x743a);
    if (!bx)
        goto loc_52fe;
    dx = bx;
loc_52f3: // 01ed:3423
    if (memoryAGet16(ds, bx) >= ax)
        goto loc_5311;
    bx = memoryAGet16(ds, bx + 6);
    if (bx != dx)
        goto loc_52f3;
loc_52fe: // 01ed:342e
    sub_5367();
    goto loc_5324;
loc_5303: // 01ed:3433
    sub_5390();
    goto loc_5324;
loc_5308: // 01ed:3438
    sub_5327();
    goto loc_5324;
loc_530d: // 01ed:343d
    ax = 0;
    goto loc_5324;
loc_5311: // 01ed:3441
    si = ax;
    si += 0x0008;
    if (memoryAGet16(ds, bx) >= si)
        goto loc_5303;
    sub_5288();
    memoryASet16(ds, bx, memoryAGet16(ds, bx) + 1);
    ax = bx;
    ax += 0x0004;
loc_5324: // 01ed:3454
    di = pop();
    si = pop();
    sp += 2;
    cs = pop();
}
void sub_5327() // 01ed:3457
{
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    sub_3573();
    bx = pop();
    bx = pop();
    ax &= 0x0001;
    if (!ax)
        goto loc_533f;
    dx = 0;
    push(dx);
    push(ax);
    sub_3573();
    bx = pop();
    bx = pop();
loc_533f: // 01ed:346f
    ax = pop();
    push(ax);
    bx = 0;
    push(bx);
    push(ax);
    sub_3573();
    bx = pop();
    bx = pop();
    if (ax == 0xffff)
        goto loc_5363;
    bx = ax;
    memoryASet16(ds, 0x7436, bx);
    memoryASet16(ds, 0x7438, bx);
    ax = pop();
    ax++;
    memoryASet16(ds, bx, ax);
    bx += 0x0004;
    ax = bx;
    return;
loc_5363: // 01ed:3493
    bx = pop();
    ax = 0;
}
void sub_5367() // 01ed:3497
{
    push(ax);
    bx = 0;
    push(bx);
    push(ax);
    sub_3573();
    bx = pop();
    bx = pop();
    if (ax == 0xffff)
        goto loc_538c;
    bx = ax;
    ax = memoryAGet16(ds, 0x7438);
    memoryASet16(ds, bx + 2, ax);
    memoryASet16(ds, 0x7438, bx);
    ax = pop();
    ax++;
    memoryASet16(ds, bx, ax);
    bx += 0x0004;
    ax = bx;
    return;
loc_538c: // 01ed:34bc
    ax = pop();
    ax = 0;
}
void sub_5390() // 01ed:34c0
{
    memoryASet16(ds, bx, memoryAGet16(ds, bx) - ax);
    si = bx;
    si += memoryAGet16(ds, bx);
    di = si;
    di += ax;
    ax++;
    memoryASet16(ds, si, ax);
    memoryASet16(ds, si + 2, bx);
    memoryASet16(ds, di + 2, si);
    si += 0x0004;
    ax = si;
}
void sub_5473() // 01ed:35a3
{
    push(si);
    tx = si; si = ax; ax = tx;
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_547c;
    mul16(bx);
loc_547c: // 01ed:35ac
    if (cx==0)
        goto loc_5483;
    tx = cx; cx = ax; ax = tx;
    mul16(si);
    ax += cx;
loc_5483: // 01ed:35b3
    tx = si; si = ax; ax = tx;
    mul16(bx);
    dx += si;
    si = pop();
}
void sub_548a() // 01ed:35ba +returnCarry +returnZero
{
    push(cx);
    ch = al;
    cl = 0x04;
    ax >>= cl;
    dx += ax;
    al = ch;
    ah = bl;
    bx >>= cl;
    cx = pop();
    cx += bx;
    bl = ah;
    ax &= 0x000f;
    bx &= 0x000f;
    flags.carry = dx < cx;
    flags.zero = dx == cx;
    if (!flags.zero)
        goto loc_54aa;
    flags.carry = ax < bx;
    flags.zero = ax == bx;
loc_54aa: // 01ed:35da
    return;
}
void sub_54b1() // 01ed:35e1
{
    sp -= 2;
    memoryASet16(ds, 0x7440, pop());
//    stop("stack_below");
    memoryASet16(ds, 0x7442, pop());
    memoryASet16(ds, 0x7444, pop());
    memoryASet16(cs, 0x35df, ds);
    memoryASet16(ds, 0x7446, si);
    memoryASet16(ds, 0x7448, di);
    flags.direction = 0;
    es = memoryAGet16(ds, 0x0090);
    si = 0x0080;
    ah = 0;
    al = lodsb<ES_SI>();
    ax++;
    bp = es;
    tx = si; si = dx; dx = tx;
    tx = bx; bx = ax; ax = tx;
    si = memoryAGet16(ds, 0x008a);
    si++;
    si++;
    cx = 0x0001;
    if (memoryAGet(ds, 0x0092) < 0x03)
        goto loc_54fd;
    es = memoryAGet16(ds, 0x008c);
    di = si;
    cl = 0x7f;
    al = 0;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (cx==0)
        goto loc_5568;
    cl ^= 0x7f;
loc_54fd: // 01ed:362d
    push(ax);
    ax = cx;
    ax += bx;
    ax++;
    ax &= 0xfffe;
    di = sp;
    flags.carry = di < ax;
    di -= ax;
    if (flags.carry)
    {
        assert(0);
        goto loc_5568;
    }
    sp = di;
    push(es);
    ds = pop();
    push(ss);
    es = pop();
    push(cx);
    cx--;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    al = 0;
    stosb<ES_DI>(al);
    ds = bp;
    tx = dx; dx = si; si = tx;
    tx = cx; cx = bx; bx = tx;
    ax = bx;
    dx = ax;
    bx++;
loc_5524: // 01ed:3654
    sub_5540();
    if (!flags.carry && !flags.zero)
        goto loc_5530;
loc_5529: // 01ed:3659
    if (flags.carry)
        goto loc_556d;
    sub_5540();
    if (!flags.carry && !flags.zero)
        goto loc_5529;
loc_5530: // 01ed:3660
    if (al == 0x20)
        goto loc_553c;
    if (al == 0x0d)
        goto loc_553c;
    if (al != 0x09)
        goto loc_5524;
loc_553c: // 01ed:366c
    al = 0;
    goto loc_5524;
  // gap 40 bytes
loc_5568: // 01ed:3698
    //stop("stack_below"); CRASH
    sub_20f6();
    return;
loc_556d: // 01ed:369d
    cx = pop();
    cx += dx;
    ds = memoryAGet16(cs, 0x35df);
    memoryASet16(ds, 0x743c, bx);
    bx++;
    bx += bx;
    si = sp;
    bp = sp;
    flags.carry = bp < bx;
    bp -= bx;
    if (flags.carry)
        goto loc_5568;
    sp = bp;
    memoryASet16(ds, 0x743e, bp);
loc_558a: // 01ed:36ba
    if (cx==0)
        goto loc_559a;
    memoryASet16(ss, bp, si);
    bp += 0x0002;
loc_5592: // 01ed:36c2
    al = lodsb<SS_SI>();
    if (--cx && al)
        goto loc_5592;
    if (!al)
        goto loc_558a;
loc_559a: // 01ed:36ca
    ax = 0;
    memoryASet16(ss, bp, ax);
    ds = memoryAGet16(cs, 0x35df);
    si = memoryAGet16(ds, 0x7446);
    di = memoryAGet16(ds, 0x7448);
    push(memoryAGet16(ds, 0x7444));
    push(memoryAGet16(ds, 0x7442));
    ax = memoryAGet16(ds, 0x743c);
    memoryASet16(ds, 0x0084, ax);
    ax = memoryAGet16(ds, 0x743e);
    memoryASet16(ds, 0x0086, ax);
//    indirectJump(cs, memoryAGet16(ds, 0x7440)); // 01ed:36f0;
}
void sub_5540() // 01ed:3670 +returnCarry +returnZero
{
    if (!ax)
        goto loc_554b;
    dx++;
    stosb<ES_DI>(al);
    if (al)
        goto loc_554b;
    bx++;
loc_554b: // 01ed:367b
    tl = al; al = ah; ah = tl;
    flags.zero = 0;
    al = 0;
    flags.carry = 1;
    if (cx==0)
        goto loc_5567;
    al = lodsb<DS_SI>();
    cx--;
    flags.carry = al < 0x22;
    flags.zero = al == 0x22;
    al -= 0x22;
    if (flags.zero)
        goto loc_5567;
    al += 0x22;
    if (al != 0x5c)
        goto loc_5565;
    if (memoryAGet(ds, si) != 0x22)
        goto loc_5565;
    al = lodsb<DS_SI>();
    cx--;
loc_5565: // 01ed:3695
    flags.carry = 0 /*ggg1*/;
    flags.zero = !si;
loc_5567: // 01ed:3697
    return;
}
void sub_55c4() // 01ed:36f4
{
    push(si);
    push(di);
    cx = memoryAGet16(ds, 0x008a);
    push(cx);
    push(cs);
    sub_52c7();
    cx = pop();
    di = ax;
    if (!ax)
        goto loc_55fb;
    push(ds);
    push(ds);
    es = pop();
    ds = memoryAGet16(ds, 0x008c);
    si = 0;
    flags.direction = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = pop();
    di = ax;
    push(es);
    push(memoryAGet16(ds, 0x008e));
    push(cs);
    sub_52c7();
    bx = pop();
    bx = ax;
    es = pop();
    memoryASet16(ds, 0x744a, ax);
    if (ax)
        goto loc_5600;
loc_55fb: // 01ed:372b
    sub_20f6();
    return;
loc_5600: // 01ed:3730
    ax = 0;
    cx = 0xffff;
loc_5605: // 01ed:3735
    memoryASet16(ds, bx, di);
    bx += 0x0002;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (memoryAGet(es, di) != al)
        goto loc_5605;
    memoryASet16(ds, bx, ax);
    di = pop();
    si = pop();
    ax = memoryAGet16(ds, 0x744a);
    memoryASet16(ds, 0x0088, ax);
}
void sub_561c() // 01ed:374c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    dx = ds;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    cx = memoryAGet16(ss, bp + 14);
    flags.carry = cx & 1;
    cx >>= 1;
    flags.direction = 0;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    if (!flags.carry)
        goto loc_5634;
    movsb<ES_DI, DS_SI>();
loc_5634: // 01ed:3764
    ds = dx;
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5683() // 01ed:37b3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    flags.direction = 0;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    si = di;
    al = 0;
    cx = 0xffff;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    cx = ~cx;
    push(ds);
    ax = es;
    ds = ax;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = pop();
    dx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 6);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_56ac() // 056a:000c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0056;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ss, bp + 10);
    ax = 0;
    memoryASet16(ds, bx, ax);
    memoryASet16(ds, di, ax);
    ax = bp - 86;
    si = ax;
    goto loc_570a;
loc_56c7: // 056a:0027
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, si, al);
    si++;
    if (memoryAGet(ss, bp - 1) == 0x0a)
        goto loc_56dd;
    bx = memoryAGet16(ss, bp + 6);
    al = memoryAGet(ds, bx);
    cbw();
    if (ax)
        goto loc_570a;
loc_56dd: // 056a:003d
    ax = bp - 6;
    push(ax);
    ax = bp - 4;
    push(ax);
    push(ss);
    ax = bp - 86;
    push(ax);
    switch (memoryAGet32(ds, 0x43bc))
    {
        case 0x1ef3078d: push(cs); cs = 0x1ef3; sub_1f6bd(); assert(cs == 0x056a); break;
        default:
            stop();
    }
    sp += 0x0008;
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, bx, memoryAGet16(ds, bx) + ax);
    ax = memoryAGet16(ds, di);
    if (ax >= memoryAGet16(ss, bp - 4))
        goto loc_5705;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, di, ax);
loc_5705: // 056a:0065
    ax = bp - 86;
    si = ax;
loc_570a: // 056a:006a
    bx = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
    al = memoryAGet(ds, bx);
    memoryASet(ss, bp - 1, al);
    if (al)
        goto loc_56c7;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_571f() // 056a:007f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x1b1e; sub_1b7c2(); assert(cs == 0x056a);
    push(cs); cs = 0x1a61; sub_1afaf(); assert(cs == 0x056a);
    push(cs); cs = 0x164d; sub_16d38(); assert(cs == 0x056a);
    push(cs); cs = 0x1841; sub_18544(); assert(cs == 0x056a);
    push(cs); cs = 0x1ef3; sub_1efc0(); assert(cs == 0x056a);
    push(cs); cs = 0x1493; sub_152c9(); assert(cs == 0x056a);
    push(cs); cs = 0x174b; sub_17b92(); assert(cs == 0x056a);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5747() // 056a:00a7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = 0x0001;
    goto loc_5777;
loc_5754: // 056a:00b4
    ax = 0x00aa;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x056a);
    sp += 0x0004;
    if (ax)
        goto loc_5776;
    memoryASet16(ds, 0x7a14, 0x0001);
loc_5776: // 056a:00d6
    si++;
loc_5777: // 056a:00d7
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_5754;
    push(cs); cs = 0x1b1e; sub_1b97a(); assert(cs == 0x056a);
    push(cs); cs = 0x174b; sub_178db(); assert(cs == 0x056a);
    push(cs); cs = 0x1ef3; sub_1ef35(); assert(cs == 0x056a);
    push(cs); cs = 0x1841; sub_1841f(); assert(cs == 0x056a);
    push(cs); cs = 0x164d; sub_16c64(); assert(cs == 0x056a);
    push(cs); cs = 0x1a61; sub_1ae36(); assert(cs == 0x056a);
    push(cs); cs = 0x1b1e; sub_1b727(); assert(cs == 0x056a);
    push(cs); cs = 0x1b1e; sub_1baf1(); assert(cs == 0x056a);
    push(cs); cs = 0x1493; sub_15284(); assert(cs == 0x056a);
    push(cs); cs = 0x1b1e; sub_1b7a1(); assert(cs == 0x056a);
    ax = 0x07b1;
    push(ax);
    ax = 0x0466;
    push(ax);
    ax = 0x07b1;
    push(ax);
    ax = 0x00d3;
    push(ax);
    ax = 0x07b1;
    push(ax);
    ax = 0x01e0;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1b334(); assert(cs == 0x056a);
    sp += 0x000c;
    memoryASet16(ds, 0x7aea, 0x07b1);
    memoryASet16(ds, 0x7ae8, 0x066d);
    memoryASet16(ds, 0x7ae6, 0x07b1);
    memoryASet16(ds, 0x7ae4, 0x07ea);
    memoryASet16(ds, 0x7ae2, 0x07b1);
    memoryASet16(ds, 0x7ae0, 0x085b);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x056a);
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, 0x0003, memoryAGet(es, 0x0003) | dl);
    es = ax;
    memoryASet(es, 0x0209, memoryAGet(es, 0x0209) | dl);
    es = ax;
    memoryASet(es, 0x020a, memoryAGet(es, 0x020a) | dl);
    es = ax;
    memoryASet(es, 0x007a, memoryAGet(es, 0x007a) | dl);
    es = ax;
    memoryASet(es, 0x007b, memoryAGet(es, 0x007b) | dl);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0001;
    push(ax);
    ax = 0x7af3;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    ax = 0x7eff;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    ax = 0x7f01;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    ax = 0x7be1;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    ax = 0x7be3;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x056a);
    sp += 0x0004;
    memoryASet(ds, 0x6025, 0x0f);
    push(cs); cs = 0x1b1e; sub_1be1c(); assert(cs == 0x056a);
    di = 0x21d1;
    memoryASet16(ss, bp - 2, 0x00fa);
    ax = 0x0000;
    if (!ax)
        goto loc_589a;
    di++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_589a: // 056a:01fa
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(cs); cs = 0x174b; sub_176e6(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1efdc(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x056a);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_58cf() // 056a:022f +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if (si)
        goto loc_58f4;
    push(cs); cs = 0x1493; sub_15ec3(); assert(cs == 0x056a);
    ax = 0x127f;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0x9feb);
    memoryASet16(ss, bp - 2, ax);
loc_58f4: // 056a:0254
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x056a);
    sp += 0x0002;
    push(cs);
    sub_571f();
    if (!si)
        goto loc_596d;
    if (memoryAGet(ds, si) == 0x00)
        goto loc_596d;
    push(si);
    push(cs); cs = 0x01ed; sub_2e73(); assert(cs == 0x056a);
    sp += 0x0002;
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_5946;
    push(cs); cs = 0x01ed; sub_3886(); assert(cs == 0x056a);
    ax = 0;
    push(ax);
    ax = 0x00ce;
    push(ax);
    ax = 0x00c5;
    push(ax);
    ax = 0x00bc;
    push(ax);
    push(cs); cs = 0x01ed; sub_246d(); assert(cs == 0x056a);
    sp += 0x0008;
    goto loc_5961;
loc_5946: // 056a:02a6
    ax = 0x00d6;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1b895(); assert(cs == 0x056a);
    sp += 0x0002;
    if (!ax)
        goto loc_5961;
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_352c(); assert(cs == 0x056a);
    sp += 0x0002;
loc_5961: // 056a:02c1
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
loc_596d: // 056a:02cd
    if (memoryAGet16(ds, 0x7ad8) != 0x0000)
        goto loc_59b9;
    ax = 0x0fa0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xb800;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x01ed; sub_3c10(); assert(cs == 0x056a);
    sp += 0x000a;
    ax = 0x0018;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_2a2c(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x00de;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1b895(); assert(cs == 0x056a);
    sp += 0x0002;
    if (!ax)
        goto loc_59b9;
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_352c(); assert(cs == 0x056a);
    sp += 0x0002;
loc_59b9: // 056a:0319
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_59c9() // 056a:0329 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_571f();
    ax = 0;
    push(ax);
    ax = 0x00f8;
    push(ax);
    ax = 0x00ef;
    push(ax);
    ax = 0x00e6;
    push(ax);
    push(cs); cs = 0x01ed; sub_246d(); assert(cs == 0x056a);
    sp += 0x0008;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_59e9() // 056a:0349 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0xa00d);
    dx = memoryAGet16(ds, 0xa00b);
    flags.carry = (dx + memoryAGet16(ds, 0xa00f)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa00f);
    ax += memoryAGet16(ds, 0xa011) + flags.carry;
    flags.carry = (dx + memoryAGet16(ds, 0xa013)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa013);
    ax += memoryAGet16(ds, 0xa015) + flags.carry;
    flags.carry = (dx + memoryAGet16(ds, 0xa017)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa017);
    ax += memoryAGet16(ds, 0xa019) + flags.carry;
    if ((short)ax < (short)0x0004)
        goto loc_5a1b;
    if (ax != 0x0004)
        goto loc_5a67;
    if (dx >= 0xbaf0)
        goto loc_5a67;
loc_5a1b: // 056a:037b
    ax = 0x1282;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0x9ff1);
    memoryASet16(ss, bp - 2, ax);
    push(cs);
    sub_571f();
    ax = 0x0fa0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xb800;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x01ed; sub_3c10(); assert(cs == 0x056a);
    sp += 0x000a;
    ax = 0x0018;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_2a2c(); assert(cs == 0x056a);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
loc_5a67: // 056a:03c7
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5a6b() // 056a:03cb
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_5ace;
    push(cs); cs = 0x07b1; sub_7b73(); assert(cs == 0x056a);
    push(cs); cs = 0x1493; sub_15458(); assert(cs == 0x056a);
    ax = memoryAGet16(ds, 0x7ada);
    memoryASet16(ds, 0x7a68, ax);
    memoryASet16(ds, 0x474a, 0x0002);
    si = 0x0001;
    goto loc_5abf;
loc_5a95: // 056a:03f5
    ax = 0x00ae;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x056a);
    sp += 0x0004;
    memoryASet16(ss, bp - 2, ax);
    if (ax == 0xffff)
        goto loc_5abe;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    memoryASet16(ds, 0x474a, ax);
    goto loc_5ac5;
loc_5abe: // 056a:041e
    si++;
loc_5abf: // 056a:041f
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_5a95;
loc_5ac5: // 056a:0425
    push(cs); cs = 0x07b1; sub_8891(); assert(cs == 0x056a);
    push(cs);
    sub_59c9();
loc_5ace: // 056a:042e
    di = 0;
    memoryASet16(ds, 0x7a70, 0x0000);
loc_5ad6: // 056a:0436
    bx = di;
    di++;
    if (bx <= 0x0006)
        goto loc_5ae1;
    goto loc_5b71;
loc_5ae1: // 056a:0441
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_5ae8;
        case 2: goto loc_5aff;
        case 4: goto loc_5b0c;
        case 6: goto loc_5b13;
        case 8: goto loc_5b21;
        case 10: goto loc_5b28;
        case 12: goto loc_5b36;
        default:
            stop();
    }
loc_5ae8: // 056a:0448
    if (memoryAGet16(ds, 0x7ade) == 0x0000)
        goto loc_5af6;
    push(cs); cs = 0x05da; sub_776a(); assert(cs == 0x056a);
    goto loc_5b71;
loc_5af6: // 056a:0456
    push(cs); cs = 0x05da; sub_6d6f(); assert(cs == 0x056a);
    goto loc_5b71;
  // gap 2 bytes
loc_5aff: // 056a:045f
    ax = 0;
    push(ax);
    push(cs); cs = 0x05da; sub_77d1(); assert(cs == 0x056a);
    sp += 0x0002;
    goto loc_5b71;
loc_5b0c: // 056a:046c
    push(cs); cs = 0x05da; sub_7658(); assert(cs == 0x056a);
    goto loc_5b71;
loc_5b13: // 056a:0473
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x05da; sub_77d1(); assert(cs == 0x056a);
    sp += 0x0002;
    goto loc_5b71;
loc_5b21: // 056a:0481
    push(cs); cs = 0x05da; sub_7af5(); assert(cs == 0x056a);
    goto loc_5b71;
loc_5b28: // 056a:0488
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x05da; sub_77d1(); assert(cs == 0x056a);
    sp += 0x0002;
    goto loc_5b71;
loc_5b36: // 056a:0496
    di = 0;
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x05da; sub_77d1(); assert(cs == 0x056a);
    sp += 0x0002;
    goto loc_5b71;
  // gap 2 bytes
loc_5b48: // 056a:04a8
    push(cs); cs = 0x07b1; sub_8891(); assert(cs == 0x056a);
    push(cs); cs = 0x05da; sub_7af5(); assert(cs == 0x056a);
    if (memoryAGet16(ds, 0x7a70) == 0x0005)
        goto loc_5b71;
    if (memoryAGet16(ds, 0x7a70) == 0x0006)
        goto loc_5b71;
    push(cs); cs = 0x05da; sub_776a(); assert(cs == 0x056a);
    if (memoryAGet16(ds, 0x7a70) == 0x0005)
        goto loc_5b71;
loc_5b71: // 056a:04d1
    if (memoryAGet16(ds, 0x7a70) == 0x0005)
        goto loc_5b48;
    if (memoryAGet16(ds, 0x7a70) == 0x0006)
        goto loc_5b48;
    goto loc_5ad6;
}
void sub_5b97() // 056a:04f7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    ax = 0x8001;
    push(ax);
    ax = 0x0112;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x056a);
    sp += 0x0004;
    memoryASet16(ss, bp - 2, ax);
    if (ax == 0xffff)
        goto loc_5bc6;
    push(ax);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x056a);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_5bc6: // 056a:0526
    ax = 0x011f;
    push(ax);
    push(cs); cs = 0x01ed; sub_2e73(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x015d;
    push(ax);
    ax = 0x0154;
    push(ax);
    push(cs); cs = 0x01ed; sub_3ecb(); assert(cs == 0x056a);
    sp += 0x0004;
    if (ax != 0xffff)
        goto loc_5bff;
    ax = 0x016a;
    push(ax);
    push(cs); cs = 0x01ed; sub_2e73(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
loc_5bff: // 056a:055f
    ax = 0x8802;
    push(ax);
    ax = 0x0181;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x056a);
    sp += 0x0004;
    si = ax;
    if (ax != 0xffff)
        goto loc_5c2e;
    ax = 0x018e;
    push(ax);
    push(cs); cs = 0x01ed; sub_2e73(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
loc_5c2e: // 056a:058e
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x056a);
    sp += 0x0008;
    ax = 0x8001;
    push(ax);
    ax = 0x01a7;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x056a);
    sp += 0x0004;
    di = ax;
    if (ax != 0xffff)
        goto loc_5c6e;
    ax = 0x01b0;
    push(ax);
    push(cs); cs = 0x01ed; sub_2e73(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x056a);
    sp += 0x0002;
loc_5c6e: // 056a:05ce
    push(di);
    push(cs); cs = 0x01ed; sub_3845(); assert(cs == 0x056a);
    sp += 0x0002;
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    dx = 0x7d00;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4d93(); assert(cs == 0x056a);
    sp += 0x0004;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    goto loc_5d0e;
loc_5c94: // 056a:05f4
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x0000)
        goto loc_5cda;
    if ((short)memoryAGet16(ss, bp - 4) > (short)0x0000)
        goto loc_5ca3;
    if (memoryAGet16(ss, bp - 6) <= 0x7d00)
        goto loc_5cda;
loc_5ca3: // 056a:0603
    ax = 0;
    dx = 0x7d00;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(di);
    push(cs); cs = 0x1493; sub_14a24(); assert(cs == 0x056a);
    sp += 0x000a;
    ax = 0;
    dx = 0x7d00;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(si);
    push(cs); cs = 0x1493; sub_14a70(); assert(cs == 0x056a);
    sp += 0x000a;
    flags.carry = memoryAGet16(ss, bp - 6) < 0x7d00;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) - 0x7d00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0000 - flags.carry);
    goto loc_5d0e;
loc_5cda: // 056a:063a
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(di);
    push(cs); cs = 0x1493; sub_14a24(); assert(cs == 0x056a);
    sp += 0x000a;
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(si);
    push(cs); cs = 0x1493; sub_14a70(); assert(cs == 0x056a);
    sp += 0x000a;
    memoryASet16(ss, bp - 4, 0x0000);
    memoryASet16(ss, bp - 6, 0x0000);
loc_5d0e: // 056a:066e
    ax = memoryAGet16(ss, bp - 6);
    ax |= memoryAGet16(ss, bp - 4);
    if (!ax)
        goto loc_5d19;
    goto loc_5c94;
loc_5d19: // 056a:0679
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs); cs = 0x01ed; sub_4cad(); assert(cs == 0x056a);
    sp += 0x0004;
    push(si);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x056a);
    sp += 0x0002;
    push(di);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x056a);
    sp += 0x0002;
    ax = 0x01c5;
    push(ax);
    push(cs); cs = 0x01ed; sub_4223(); assert(cs == 0x056a);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5d4b() // 056a:06ab +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_5b97();
    ax = 0x01ce;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1b895(); assert(cs == 0x056a);
    sp += 0x0002;
    if (!ax)
        goto loc_5d68;
    memoryASet16(ds, 0x7a72, 0x0001);
loc_5d68: // 056a:06c8
    ax = 0x01d3;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1b895(); assert(cs == 0x056a);
    sp += 0x0002;
    if (!ax)
        goto loc_5d7e;
    memoryASet16(ds, 0x7a18, 0x0001);
loc_5d7e: // 056a:06de
    push(cs);
    sub_5747();
    push(cs);
    sub_59e9();
    if (memoryAGet16(ds, 0x7ad8) != 0x0000)
        goto loc_5d94;
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_5d9a;
loc_5d94: // 056a:06f4
    memoryASet16(ds, 0x7a16, 0x0001);
loc_5d9a: // 056a:06fa
    push(cs);
    sub_5a6b();
    ax = 0x01da;
    push(ax);
    push(cs);
    sub_58cf();
    sp += 0x0002;
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_5dab() // 05da:000b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0xa545) == 0x00)
        goto loc_5e03;
    if (memoryAGet16(ds, 0x7a72) == 0x0000)
        goto loc_5dd4;
    memoryASet16(ds, 0x7a70, 0x0005);
    memoryASet16(ds, 0x474a, 0x0002);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x05da);
    push(cs); cs = 0x07b1; sub_7b73(); assert(cs == 0x05da);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_5dd4: // 05da:0034
    if (memoryAGet(ds, 0xa545) != 0x3b)
        goto loc_5de2;
    push(cs); cs = 0x0b02; sub_b9c5(); assert(cs == 0x05da);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_5de2: // 05da:0042
    push(cs); cs = 0x1c76; sub_1ece2(); assert(cs == 0x05da);
    if (memoryAGet16(ds, 0x474a) == 0x0000)
        goto loc_5df6;
    memoryASet16(ds, 0x7a70, 0x0005);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_5df6: // 05da:0056
    if (memoryAGet16(ds, 0xa53b) == 0x0000)
        goto loc_5e03;
    memoryASet16(ds, 0x7a70, 0x0006);
loc_5e03: // 05da:0063
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5e05() // 05da:0065
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0012;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 512);
    memoryASet16(ss, bp - 2, ax);
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0006;
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa552);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    bx = di;
    bx <<= 1;
    memoryASet16(ds, bx + 41025, ax);
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 8, ax);
    bx = di;
    bx <<= 1;
    memoryASet16(ds, bx + 41015, ax);
    ax = memoryAGet16(ss, bp - 6);
    imul16(memoryAGet16(ss, bp - 8));
    ax <<= 1;
    memoryASet16(ss, bp - 10, ax);
    ax <<= 1;
    dx = 0;
    push(dx);
    push(ax);
    ax = di;
    ax <<= 1;
    ax += 0xa04b;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41035);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, 0x0000);
    si = 0;
    goto loc_5eba;
loc_5ea2: // 05da:0102
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    ah = 0x00;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 1);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
    si++;
loc_5eba: // 05da:011a
    if (si < memoryAGet16(ss, bp - 10))
        goto loc_5ea2;
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_5ed6() // 05da:0136
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    dx = memoryAGet16(ds, 0xa021);
    dx += ax;
    ax = memoryAGet16(ds, 0xa033);
    ax >>= 1;
    bx = 0x0014;
    bx -= ax;
    dx += bx;
    memoryASet16(ss, bp - 4, dx);
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0c02;
    out16(dx, ax);
    flags.interrupts = 1;
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_6078();
    sp += 0x0002;
    memoryASet16(ss, bp - 6, ax);
    ax += memoryAGet16(ds, 0xa02f);
    memoryASet16(ss, bp - 8, ax);
    if ((short)memoryAGet16(ss, bp - 8) >= (short)0x0000)
        goto loc_5f2e;
    memoryASet16(ss, bp - 8, 0x0000);
loc_5f2e: // 05da:018e
    bx = memoryAGet16(ds, 0x7468);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 29796);
    memoryASet16(ss, bp - 10, ax);
    if ((short)memoryAGet16(ss, bp - 8) >= (short)0x00c8)
        goto loc_5f81;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 8))
        goto loc_5f81;
    ax -= memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 12, ax);
    bx = memoryAGet16(ss, bp - 8);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, bp - 16, ax);
    es = memoryAGet16(ds, 0xa7ae);
    bx = memoryAGet16(ds, 0xa7ac);
    bx -= memoryAGet16(ds, 0xa031);
    bx -= memoryAGet16(ds, 0xa031);
    di = memoryAGet16(ss, bp - 16);
    dx = memoryAGet16(ss, bp - 12);
    si = memoryAGet16(ds, 0xa031);
    ax = 0;
loc_5f78: // 05da:01d8
    cx = si;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    di += bx;
    dx--;
    if (dx)
        goto loc_5f78;
loc_5f81: // 05da:01e1
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x00c8)
        goto loc_5f8d;
    memoryASet16(ss, bp - 8, 0x00c8);
loc_5f8d: // 05da:01ed
    bx = memoryAGet16(ds, 0x7468);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, bx + 29796, ax);
    ax = memoryAGet16(ds, 0xa02f);
    memoryASet16(ds, 0xa025, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0000)
        goto loc_5fc9;
    ax = memoryAGet16(ss, bp - 6);
    ax = -ax;
    dx = memoryAGet16(ds, 0xa033);
    dx <<= 1;
    imul16(dx);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa025, memoryAGet16(ds, 0xa025) + ax);
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_5fde;
loc_5fc9: // 05da:0229
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ds, 0xa02f);
    if (ax <= 0x00c8)
        goto loc_5fde;
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa025, ax);
loc_5fde: // 05da:023e
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ds, 0xa02d);
    memoryASet16(ds, 0xa023, ax);
    if ((short)memoryAGet16(ds, 0xa025) > (short)0x0000)
        goto loc_5ff2;
    goto loc_6072;
loc_5ff2: // 05da:0252
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 24530);
    memoryASet16(ds, 0xa029, ax);
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ds, 0x7472, ax);
    bx = memoryAGet16(ss, bp - 14);
    push(bp);
    bp = memoryAGet16(ds, 0xa029);
    es = memoryAGet16(ds, 0xa7ae);
    ds = memoryAGet16(ds, 0xa035);
    ah = 0x04;
    memoryASet(ss, 0xa027, ah);
loc_6024: // 05da:0284
    dx = 0x03c4;
    al = 0x02;
    out16(dx, ax);
    dx = memoryAGet16(ss, 0xa025);
    di = memoryAGet16(ss, 0x7472);
loc_6034: // 05da:0294
    cx = memoryAGet16(ss, 0xa033);
    al = 0;
loc_603b: // 05da:029b
    si = memoryAGet16(ds, bx);
    bx += 0x0002;
    ah = 0;
    ax |= memoryAGet16(ss, bp + si);
    stosb<ES_DI>(al);
    al = ah;
    if (--cx)
        goto loc_603b;
    stosb<ES_DI>(al);
    memoryASet16(es, di, 0x0000);
    di += memoryAGet16(ss, 0xa02b);
    dx--;
    if (dx)
        goto loc_6034;
    bx = memoryAGet16(ss, 0xa023);
    ah = memoryAGet(ss, 0xa027);
    ah <<= 1;
    memoryASet(ss, 0xa027, ah);
    if (ah != 0x10)
        goto loc_6024;
    bp = pop();
    ax = ss;
    ds = ax;
loc_6072: // 05da:02d2
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_6078() // 05da:02d8
{
    sp -= 2;
    push(bp);
    bp = sp;
    cx = memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ds, 0x746e);
    bx++;
    if (bx <= 0x0003)
        goto loc_608b;
    goto loc_617e;
loc_608b: // 05da:02eb
    bx <<= 1;
    switch (bx)
    {
        case 0: goto loc_6092;
        case 2: goto loc_60e9;
        case 4: goto loc_6118;
        case 6: goto loc_6139;
        default:
            stop();
    }
loc_6092: // 05da:02f2
    bx = memoryAGet16(ds, 0x7470);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41035);
    memoryASet16(ds, 0xa035, ax);
    bx = memoryAGet16(ds, 0x7470);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41025);
    memoryASet16(ds, 0xa033, ax);
    ax += 0x0003;
    ax >>= 1;
    memoryASet16(ds, 0xa031, ax);
    bx = memoryAGet16(ds, 0x7470);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41015);
    memoryASet16(ds, 0xa02f, ax);
    ax = memoryAGet16(ds, 0xa033);
    ax++;
    dx = memoryAGet16(ds, 0xa7ac);
    dx -= ax;
    memoryASet16(ds, 0xa02b, dx);
    ax = memoryAGet16(ds, 0xa033);
    imul16(memoryAGet16(ds, 0xa02f));
    ax <<= 1;
    memoryASet16(ds, 0xa02d, ax);
    memoryASet16(ds, 0x746e, memoryAGet16(ds, 0x746e) + 1);
    memoryASet16(ds, 0x746a, cx);
    memoryASet16(ds, 0x746c, 0x00f0);
loc_60e9: // 05da:0349
    ax = cx;
    ax -= memoryAGet16(ds, 0x746a);
    ax <<= 1;
    memoryASet16(ds, 0x746c, memoryAGet16(ds, 0x746c) - ax);
    if ((short)memoryAGet16(ds, 0x746c) >= (short)0x0064)
        goto loc_6106;
    memoryASet16(ds, 0x746c, 0x0064);
    memoryASet16(ds, 0x746e, memoryAGet16(ds, 0x746e) + 1);
loc_6106: // 05da:0366
    memoryASet16(ds, 0x746a, cx);
    ax = memoryAGet16(ds, 0xa02f);
    ax >>= 1;
    push(ax);
    ax = memoryAGet16(ds, 0x746c);
    dx = pop();
    ax -= dx;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_6118: // 05da:0378
    ax = cx;
    ax -= memoryAGet16(ds, 0x746a);
    if ((short)ax <= (short)0x00c8)
        goto loc_612b;
    memoryASet16(ds, 0x746e, memoryAGet16(ds, 0x746e) + 1);
    memoryASet16(ds, 0x746a, cx);
loc_612b: // 05da:038b
    ax = memoryAGet16(ds, 0xa02f);
    ax >>= 1;
    push(ax);
    ax = 0x0064;
    dx = pop();
    ax -= dx;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_6139: // 05da:0399
    ax = cx;
    ax -= memoryAGet16(ds, 0x746a);
    ax <<= 1;
    memoryASet16(ds, 0x746c, memoryAGet16(ds, 0x746c) - ax);
    if ((short)memoryAGet16(ds, 0x746c) >= (short)0xffd8)
        goto loc_616c;
    memoryASet16(ds, 0x746c, 0xffd8);
    memoryASet16(ds, 0x7470, memoryAGet16(ds, 0x7470) + 1);
    ax = memoryAGet16(ds, 0x7470);
    if ((short)ax >= (short)0x0004)
        goto loc_6166;
    memoryASet16(ds, 0x746e, 0xffff);
    goto loc_616c;
loc_6166: // 05da:03c6
    memoryASet16(ds, 0x746e, 0x0003);
loc_616c: // 05da:03cc
    memoryASet16(ds, 0x746a, cx);
    ax = memoryAGet16(ds, 0xa02f);
    ax >>= 1;
    push(ax);
    ax = memoryAGet16(ds, 0x746c);
    dx = pop();
    ax -= dx;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_617e: // 05da:03de
    ax = 0xffd8;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_618c() // 05da:03ec
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0026;
    push(si);
    push(di);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0004;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa06f);
    ax = memoryAGet16(es, 0x0002);
    ax += 0x00c8;
    memoryASet16(ds, 0xa055, ax);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0104;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa071);
    ax = 0x0078;
    ax -= memoryAGet16(es, 0x0002);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 14, 0x0140);
    ax -= memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 18, ax);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    memoryASet16(ds, 0x7468, ax);
    memoryASet16(ds, 0xa021, ax);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
loc_61f5: // 05da:0455
    sync();
//    ax = memoryAGet16(ds, 0xa53f);
//    dx = memoryAGet16(ds, 0xa53d);
//    if (ax != memoryAGet16(ds, 0xa54a))
//        goto loc_6208;
//    if (dx == memoryAGet16(ds, 0xa548))
//        goto loc_61f5;
loc_6208: // 05da:0468
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_6424;
loc_621e: // 05da:047e
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    bx = memoryAGet16(ds, 0xa055);
    cx = 0;
    ax = memoryAGet16(ss, bp - 10);
    ax -= memoryAGet16(ss, bp - 8);
    dx = 0;
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x05da);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 2, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_5ed6();
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    ax = memoryAGet16(ss, bp - 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    push(dx);
    dx = 0;
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x05da);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    dx = memoryAGet16(ss, bp - 14);
    dx += ax;
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ss, bp - 2);
    ax &= 0x0007;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0800;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    ax += 0xff00;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0800;
    ax &= 0x0007;
    memoryASet16(ss, bp - 20, ax);
    bx = memoryAGet16(ss, bp - 20);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41051);
    memoryASet16(ss, bp - 22, ax);
    memoryASet16(ss, bp - 24, 0x0000);
    ax = memoryAGet16(ss, bp - 2);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    dx = memoryAGet16(ds, 0xa021);
    dx += ax;
    memoryASet16(ss, bp - 12, dx);
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x0000)
        goto loc_62ea;
    ax = memoryAGet16(ss, bp - 6);
    ax++;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 26, ax);
    if (!(memoryAGet16(ss, bp - 6) & 0x0001))
        goto loc_62da;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - 1);
loc_62da: // 05da:053a
    ax = 0x0015;
    ax -= memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 28, ax);
    memoryASet16(ss, bp - 30, 0x0000);
    goto loc_6331;
loc_62ea: // 05da:054a
    ax = memoryAGet16(ds, 0xa059);
    ax = -ax;
    ax += 0x0028;
    if ((short)ax >= (short)memoryAGet16(ss, bp - 6))
        goto loc_630e;
    memoryASet16(ss, bp - 26, 0x0000);
    memoryASet16(ss, bp - 28, 0x0015);
    memoryASet16(ss, bp - 30, 0x0000);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) - ax);
    goto loc_6331;
loc_630e: // 05da:056e
    memoryASet16(ss, bp - 26, 0x0000);
    ax = memoryAGet16(ds, 0xa059);
    ax += memoryAGet16(ss, bp - 6);
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 28, ax);
    ax = 0x0015;
    ax -= memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 30, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) - ax);
loc_6331: // 05da:0591
    ax = memoryAGet16(ss, bp - 28);
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa059);
    dx -= ax;
    memoryASet16(ss, bp - 32, dx);
    ax = memoryAGet16(ss, bp - 26);
    ax += memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ss, bp - 30);
    ax <<= 1;
    dx = 0x00f8;
    dx -= ax;
    memoryASet16(ss, bp - 34, dx);
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0202;
    out16(dx, ax);
    flags.interrupts = 1;
    di = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ds, 0xa7ae);
    si = memoryAGet16(ss, bp - 24);
    memoryASet16(ds, 0xa057, si);
    ds = memoryAGet16(ss, bp - 22);
    dx = 0x00c8;
loc_636f: // 05da:05cf
    ax = 0;
    cx = memoryAGet16(ss, bp - 26);
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    cx = memoryAGet16(ss, bp - 28);
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    ax = 0;
    cx = memoryAGet16(ss, bp - 30);
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    if (dx & 0x0001)
        goto loc_638f;
    si = memoryAGet16(ss, 0xa057);
    goto loc_6397;
loc_638f: // 05da:05ef
    si += memoryAGet16(ss, bp - 32);
    memoryASet16(ss, 0xa057, si);
loc_6397: // 05da:05f7
    di += memoryAGet16(ss, bp - 34);
    dx--;
    if (dx)
        goto loc_636f;
    ax = ss;
    ds = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax &= 0x0007;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    dx = memoryAGet16(ds, 0xa021);
    dx += ax;
    push(dx);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    memoryASet16(ds, 0x7468, memoryAGet16(ds, 0x7468) ^ 0x0001);
    if (memoryAGet16(ds, 0x7468) == 0x0000)
        goto loc_63d4;
    memoryASet16(ds, 0xa021, 0x007c);
    goto loc_63da;
loc_63d4: // 05da:0634
    memoryASet16(ds, 0xa021, 0x0000);
loc_63da: // 05da:063a
    sync();
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 36, ax);
    memoryASet16(ss, bp - 38, dx);
    ax = memoryAGet16(ss, bp - 38);
    ax -= memoryAGet16(ds, 0xa548);
    memoryASet16(ds, 0xa54c, ax);
    if (memoryAGet16(ds, 0xa54c) < 0x0002)
        goto loc_63da;
    ax = memoryAGet16(ss, bp - 36);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    push(cs); cs = 0x164d; sub_17413(); assert(cs == 0x05da);
    if (!ax)
        goto loc_6417;
    if (memoryAGet(ds, 0xa545) == 0x3b)
        goto loc_6417;
    memoryASet(ds, 0xa545, 0x39);
loc_6417: // 05da:0677
    if (memoryAGet(ds, 0xa545) != 0x00)
        goto loc_643b;
    ax = memoryAGet16(ds, 0xa54c);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + ax);
loc_6424: // 05da:0684
    ax = memoryAGet16(ss, bp - 8);
    if (ax > memoryAGet16(ss, bp - 10))
        goto loc_642f;
    goto loc_621e;
loc_642f: // 05da:068f
    ax = memoryAGet16(ss, bp - 2);
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ds, 0xa01f, ax);
loc_643b: // 05da:069b
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_6441() // 05da:06a1
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = 0;
    si = ax;
    dx = ax;
loc_644c: // 05da:06ac
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    if (cx != 0xffff)
        goto loc_646f;
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, dl);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, 0x00);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_646f: // 05da:06cf
    si += cx;
    if (si <= 0x0007)
        goto loc_64a2;
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, dl);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    dx = 0;
    ax = si;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax--;
    di = ax;
    goto loc_6498;
loc_648e: // 05da:06ee
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, 0x00);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_6498: // 05da:06f8
    ax = di;
    di--;
    if (ax)
        goto loc_648e;
    si &= 0x0007;
loc_64a2: // 05da:0702
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    if (cx != 0xffff)
        goto loc_64c5;
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, dl);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, 0x00);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_64c5: // 05da:0725
    al = memoryAGet(ds, si + 554);
    ah = 0x00;
    dx |= ax;
    si += cx;
    if (si <= 0x0007)
        goto loc_6501;
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, dl);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
    dx = 0x00ff;
    ax = si;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax--;
    di = ax;
    goto loc_64f7;
loc_64ed: // 05da:074d
    bx = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    memoryASet(es, bx, 0xff);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + 1);
loc_64f7: // 05da:0757
    ax = di;
    di--;
    if (ax)
        goto loc_64ed;
    si &= 0x0007;
loc_6501: // 05da:0761
    al = memoryAGet(ds, si + 562);
    ah = 0x00;
    dx &= ax;
    goto loc_644c;
}
void sub_6510() // 05da:0770
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    ax = 0;
    dx = 0x7530;
    push(ax);
    push(dx);
    ax = 0xa06d;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa06d);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, 0x0194);
    memoryASet16(ss, bp - 10, 0x0000);
    goto loc_6602;
loc_653e: // 05da:079e
    es = memoryAGet16(ds, 0xa06d);
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(es, bx + 4, ax);
    si = 0;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0104;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa071);
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(ds, 0xa071);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
loc_657a: // 05da:07da
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx, si);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    ax = si;
    ax += di;
    si = ax;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    if (di != 0xffff)
        goto loc_657a;
    si += 0x0050;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0004;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa06f);
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(ds, 0xa06f);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
loc_65ca: // 05da:082a
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx, si);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    ax = si;
    ax += di;
    si = ax;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    if (di != 0xffff)
        goto loc_65ca;
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx, si);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx, 0xffff);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 1);
loc_6602: // 05da:0862
    if ((short)memoryAGet16(ss, bp - 10) >= (short)0x00c8)
        goto loc_660c;
    goto loc_653e;
loc_660c: // 05da:086c
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_6612() // 05da:0872
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    ax = 0;
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 12, ax);
    ax = 0x0140;
    ax -= memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa021);
    ax += memoryAGet16(ds, 0xa01f);
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, bp - 2, 0xa000);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp + 12) >= (short)0x0000)
        goto loc_6698;
    ax = memoryAGet16(ss, bp + 12);
    ax = -ax;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 14, 0x0000);
loc_665b: // 05da:08bb
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2); /*ggg2*/;
    bx += ax;
    dx = memoryAGet16(es, bx);
    if ((short)dx <= (short)memoryAGet16(ss, bp - 6))
        goto loc_6679;
    goto loc_6728;
loc_6679: // 05da:08d9
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2); /*ggg2*/;
    bx += ax;
    dx = memoryAGet16(es, bx);
    if ((short)dx <= (short)memoryAGet16(ss, bp - 6))
        goto loc_665b;
    goto loc_66d1;
  // gap 2 bytes
loc_6698: // 05da:08f8
    memoryASet16(ss, bp - 12, 0x0000);
    ax = memoryAGet16(ss, bp + 12);
    ax &= 0x0007;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax = sar16(ax, 0x0001);
    ax = sar16(ax, 0x0001);
    ax = sar16(ax, 0x0001);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
loc_66bb: // 05da:091b
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2); /*ggg2*/;
    bx += ax;
    dx = memoryAGet16(es, bx);
loc_66d1: // 05da:0931
    ax = dx;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + ax);
    if (memoryAGet16(ss, bp - 14) <= 0x0007)
        goto loc_6705;
    di = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    al = memoryAGet(ss, bp - 12);
    stosb<ES_DI>(al);
    cx = memoryAGet16(ss, bp - 14);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    cx--;
    al = 0;
    memoryASet(ss, bp - 12, al);
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) & 0x0007);
    memoryASet16(ss, bp - 4, di);
loc_6705: // 05da:0965
    if ((short)dx <= (short)memoryAGet16(ss, bp - 8))
        goto loc_670d;
    goto loc_67cf;
loc_670d: // 05da:096d
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 0x0002);
    if (si == 0xffff)
        goto loc_677f;
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2); /*ggg2*/;
    bx += ax;
    dx = memoryAGet16(es, bx);
loc_6728: // 05da:0988
    ax = dx;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 6, dx);
    bx = memoryAGet16(ss, bp - 14);
    al = memoryAGet(ds, bx + 554);
    ah = 0x00;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) | ax);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + ax);
    if (memoryAGet16(ss, bp - 14) <= 0x0007)
        goto loc_676b;
    di = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    al = memoryAGet(ss, bp - 12);
    stosb<ES_DI>(al);
    cx = memoryAGet16(ss, bp - 14);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    cx--;
    al = 0xff;
    memoryASet(ss, bp - 12, al);
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) & 0x0007);
    memoryASet16(ss, bp - 4, di);
loc_676b: // 05da:09cb
    if ((short)dx > (short)memoryAGet16(ss, bp - 8))
        goto loc_67cf;
    bx = memoryAGet16(ss, bp - 14);
    al = memoryAGet(ds, bx + 562);
    ah = 0x00;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) & ax);
    goto loc_66bb;
loc_677f: // 05da:09df
    ax = 0x0140;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + ax);
    if (memoryAGet16(ss, bp - 14) <= 0x0007)
        goto loc_67cf;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    al = memoryAGet(ss, bp - 12);
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet16(ss, bp - 12, 0x0000);
    ax = memoryAGet16(ss, bp - 14);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax--;
    memoryASet16(ss, bp - 16, ax);
    goto loc_67bb;
loc_67b1: // 05da:0a11
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet(es, bx, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_67bb: // 05da:0a1b
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 1);
    if (ax)
        goto loc_67b1;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) & 0x0007);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_67cf: // 05da:0a2f
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_67d5() // 05da:0a35
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0024;
    push(si);
    push(di);
    ax = ds;
    es = ax;
    dx = 0x0219;
    ax = 0x1002;
    interrupt(0x10);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0104;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa071);
    ax = 0;
    dx = 0x0078;
    flags.carry = dx < memoryAGet16(es, 0x0002);
    dx -= memoryAGet16(es, 0x0002);
    ax = ax - 0x0000 - flags.carry;
    memoryASet16(ss, bp - 34, ax);
    memoryASet16(ss, bp - 36, dx);
    push(cs);
    sub_6510();
    ax = 0;
    dx = 0x1388;
    push(ax);
    push(dx);
    ax = 0xa06b;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    memoryASet16(ss, bp - 8, 0x0100);
    memoryASet16(ss, bp - 10, 0x0021);
    memoryASet16(ss, bp - 10, 0x0021);
    ax = 0x00c8;
    memoryASet16(ss, bp - 30, ax);
    memoryASet16(ss, bp - 32, ax);
    memoryASet16(ss, bp - 4, 0x0001);
    memoryASet16(ss, bp - 6, 0x001e);
    goto loc_6a8b;
loc_6845: // 05da:0aa5
    ax = memoryAGet16(ss, bp - 4);
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_685f;
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 26, 0x0004);
    goto loc_68a7;
loc_685f: // 05da:0abf
    ax = 0x0100;
    ax -= memoryAGet16(ss, bp - 10);
    imul16(memoryAGet16(ss, bp - 4));
    dx = 0;
    div16(memoryAGet16(ss, bp - 6));
    dx = 0x0100;
    dx -= ax;
    memoryASet16(ss, bp - 8, dx);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    bx = memoryAGet16(ss, bp - 6);
    bx -= memoryAGet16(ss, bp - 4);
    cx = 0;
    dx = memoryAGet16(ss, bp - 34);
    ax = memoryAGet16(ss, bp - 36);
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x05da);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax <<= 1;
    dx = 0;
    div16(memoryAGet16(ss, bp - 6));
    memoryASet16(ss, bp - 26, ax);
loc_68a7: // 05da:0b07
    ax = 0;
    dx = 0;
    cx = 0x09c4;
    bx = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ds, 0xa06b);
    di = 0;
loc_68b7: // 05da:0b17
    memoryASet(es, di, ah);
    di++;
    memoryASet(es, di, dl);
    di++;
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    dx += 0x0000 + flags.carry;
    if (--cx)
        goto loc_68b7;
    ax = memoryAGet16(ss, bp - 4);
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_68d5;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_68f8;
loc_68d5: // 05da:0b35
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    bx = memoryAGet16(ss, bp - 6);
    bx -= memoryAGet16(ss, bp - 4);
    cx = 0;
    dx = memoryAGet16(ss, bp - 34);
    ax = memoryAGet16(ss, bp - 36);
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x05da);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 2, ax);
loc_68f8: // 05da:0b58
    es = memoryAGet16(ds, 0xa06b);
    ax = memoryAGet16(es, 0x0190);
    memoryASet16(ss, bp - 24, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    ax = 0x0001;
    dx = 0;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ds, 0xa021);
    ax += memoryAGet16(ds, 0xa01f);
    memoryASet16(ds, 0xa7b4, ax);
    if (memoryAGet16(ss, bp - 26) <= 0x0000)
        goto loc_6943;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 26));
    ax = 0x0140;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f57e(); assert(cs == 0x05da);
    sp += 0x000a;
loc_6943: // 05da:0ba3
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    si = 0;
    goto loc_6998;
loc_6959: // 05da:0bb9
    bx = memoryAGet16(ss, bp - 12);
    cl = 0x08;
    bx >>= cl;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa06d);
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(ds, 0xa06d);
    memoryASet16(ss, bp - 20, dx);
    memoryASet16(ss, bp - 22, ax);
    push(memoryAGet16(ds, 0xa06b));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = si;
    ax += memoryAGet16(ss, bp - 26);
    push(ax);
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 22));
    push(cs);
    sub_6612();
    sp += 0x000c;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + ax);
    si++;
loc_6998: // 05da:0bf8
    if (si < memoryAGet16(ss, bp - 24))
        goto loc_6959;
    ax = memoryAGet16(ds, 0xa021);
    ax += memoryAGet16(ds, 0xa01f);
    memoryASet16(ds, 0xa7b4, ax);
    ax = memoryAGet16(ss, bp - 24);
    ax += memoryAGet16(ss, bp - 26);
    memoryASet16(ss, bp - 28, ax);
    bx = memoryAGet16(ds, 0x7468);
    bx <<= 1;
    ax = bp - 32;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    if (ax <= memoryAGet16(ss, bp - 28))
        goto loc_69f8;
    ax = 0;
    push(ax);
    bx = memoryAGet16(ds, 0x7468);
    bx <<= 1;
    ax = bp - 32;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    ax -= memoryAGet16(ss, bp - 28);
    push(ax);
    ax = 0x0140;
    push(ax);
    push(memoryAGet16(ss, bp - 28));
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f57e(); assert(cs == 0x05da);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x7468);
    bx <<= 1;
    ax = bp - 32;
    bx += ax;
    ax = memoryAGet16(ss, bp - 28);
    memoryASet16(ds, bx, ax);
loc_69f8: // 05da:0c58
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0xa021);
    ax += memoryAGet16(ds, 0xa01f);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    memoryASet16(ds, 0x7468, memoryAGet16(ds, 0x7468) ^ 0x0001);
    if (memoryAGet16(ds, 0x7468) == 0x0000)
        goto loc_6a1f;
    memoryASet16(ds, 0xa021, 0x007c);
    goto loc_6a25;
loc_6a1f: // 05da:0c7f
    memoryASet16(ds, 0xa021, 0x0000);
loc_6a25: // 05da:0c85
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, dx);
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ds, 0xa548);
    memoryASet16(ds, 0xa54c, ax);
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    if (memoryAGet16(ds, 0xa54c) <= 0x0008)
        goto loc_6a53;
    memoryASet16(ds, 0xa54c, 0x0008);
loc_6a53: // 05da:0cb3
    ax = memoryAGet16(ss, bp - 4);
    if (ax == memoryAGet16(ss, bp - 6))
        goto loc_6a96;
    ax = memoryAGet16(ds, 0xa54c);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax <= memoryAGet16(ss, bp - 6))
        goto loc_6a6f;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 4, ax);
loc_6a6f: // 05da:0ccf
    push(cs); cs = 0x164d; sub_17413(); assert(cs == 0x05da);
    if (!ax)
        goto loc_6a84;
    if (memoryAGet(ds, 0xa545) == 0x3b)
        goto loc_6a84;
    memoryASet(ds, 0xa545, 0x39);
loc_6a84: // 05da:0ce4
    if (memoryAGet(ds, 0xa545) != 0x00)
        goto loc_6aae;
loc_6a8b: // 05da:0ceb
    ax = memoryAGet16(ss, bp - 4);
    if (ax > memoryAGet16(ss, bp - 6))
        goto loc_6a96;
    goto loc_6845;
loc_6a96: // 05da:0cf6
    ax = 0xa06b;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0xa06d;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
loc_6aae: // 05da:0d0e
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_6ab4() // 05da:0d14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x042c;
    push(si);
    push(di);
    push(ss);
    ax = bp - 28;
    push(ax);
    push(ds);
    ax = 0x023a;
    push(ax);
    cx = 0x0008;
    push(cs); cs = 0x01ed; sub_51b5(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_6ae9;
loc_6ad6: // 05da:0d36
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, bx, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_6ae9: // 05da:0d49
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0140)
        goto loc_6ad6;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_6b59;
loc_6af7: // 05da:0d57
    ax = 0;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_2ec7(); assert(cs == 0x05da);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    push(dx);
    dx = 0;
    ax = 0x0140;
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x05da);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    dx = bp - 668;
    bx += dx;
    memoryASet16(ds, bx, ax);
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, bx, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_6b59: // 05da:0db9
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0140)
        goto loc_6af7;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_6b84;
loc_6b67: // 05da:0dc7
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    dx = bp - 1068;
    bx += dx;
    memoryASet16(ds, bx, ax);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_6b84: // 05da:0de4
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x00c8)
        goto loc_6b67;
    push(cs); cs = 0x1ef3; sub_1f082(); assert(cs == 0x05da);
    if (memoryAGet16(ds, 0x7468) == 0x0000)
        goto loc_6ba8;
    ax = memoryAGet16(ds, 0xa01f);
    ax += 0x007c;
    memoryASet16(ds, 0xa7b4, ax);
    ax = memoryAGet16(ds, 0xa01f);
    memoryASet16(ds, 0xa7b2, ax);
    goto loc_6bb4;
loc_6ba8: // 05da:0e08
    ax = memoryAGet16(ds, 0xa01f);
    memoryASet16(ds, 0xa7b4, ax);
    ax += 0x007c;
    memoryASet16(ds, 0xa7b2, ax);
loc_6bb4: // 05da:0e14
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0x006d;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f28c(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa7b2);
    ax -= memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 20, ax);
    es = memoryAGet16(ds, 0xa7ae);
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_6d3d;
loc_6be9: // 05da:0e49
    ax = memoryAGet16(ss, bp - 6);
    ax += 0xff60;
    memoryASet16(ss, bp - 16, ax);
    if ((short)memoryAGet16(ss, bp - 16) >= (short)0x0000)
        goto loc_6bfd;
    memoryASet16(ss, bp - 16, 0x0000);
loc_6bfd: // 05da:0e5d
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 18, ax);
    if ((short)memoryAGet16(ss, bp - 18) < (short)0x00c8)
        goto loc_6c0f;
    memoryASet16(ss, bp - 18, 0x00c7);
loc_6c0f: // 05da:0e6f
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 12, ax);
    goto loc_6cef;
loc_6c18: // 05da:0e78
    bx = memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_6ce3;
loc_6c2f: // 05da:0e8f
    bx = memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = bp - 1068;
    bx += ax;
    bx = memoryAGet16(ds, bx);
    bx <<= 1;
    ax = bp - 668;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = bp - 1068;
    bx += ax;
    memoryASet16(ds, bx, memoryAGet16(ds, bx) + 1);
    ax = memoryAGet16(ds, bx);
    if (ax != 0x0140)
        goto loc_6c6c;
    bx = memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = bp - 1068;
    bx += ax;
    memoryASet16(ds, bx, 0x0000);
loc_6c6c: // 05da:0ecc
    cx = memoryAGet16(ss, bp - 10);
    si = cx;
    si &= 0x0007;
    flags.interrupts = 0;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(ss, bp + si + -28);
    out16(dx, ax);
    flags.interrupts = 1;
    si = memoryAGet16(ss, bp - 14);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    si += cx;
    di = si;
    di += memoryAGet16(ss, bp - 20);
    dx = 0x03c4;
    ax = 0x0102;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0004;
    out16(dx, ax);
    bl = memoryAGet(es, si);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    dx = 0x03c4;
    ax = 0x0202;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0104;
    out16(dx, ax);
    bl = memoryAGet(es, si);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    dx = 0x03c4;
    ax = 0x0402;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0204;
    out16(dx, ax);
    bl = memoryAGet(es, si);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    dx = 0x03c4;
    ax = 0x0802;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0304;
    out16(dx, ax);
    bl = memoryAGet(es, si);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
loc_6ce3: // 05da:0f43
    if ((short)memoryAGet16(ss, bp - 8) >= (short)0x0002)
        goto loc_6cec;
    goto loc_6c2f;
loc_6cec: // 05da:0f4c
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
loc_6cef: // 05da:0f4f
    ax = memoryAGet16(ss, bp - 12);
    if ((short)ax > (short)memoryAGet16(ss, bp - 18))
        goto loc_6cfa;
    goto loc_6c18;
loc_6cfa: // 05da:0f5a
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs); cs = 0x164d; sub_17413(); assert(cs == 0x05da);
    if (!ax)
        goto loc_6d1b;
    if (memoryAGet(ds, 0xa545) == 0x3b)
        goto loc_6d1b;
    memoryASet(ds, 0xa545, 0x39);
loc_6d1b: // 05da:0f7b
    if (memoryAGet(ds, 0xa545) == 0x00)
        goto loc_6d3a;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_6d3a: // 05da:0f9a
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_6d3d: // 05da:0f9d
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0168)
        goto loc_6d47;
    goto loc_6be9;
loc_6d47: // 05da:0fa7
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    ax = 0;
    push(ax);
    dx = 0x01a4;
    push(ax);
    push(dx);
    push(cs); cs = 0x164d; sub_17462(); assert(cs == 0x05da);
    sp += 0x0006;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_6d6f() // 05da:0fcf +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x01a4;
    push(si);
    push(di);
    memoryASet16(ss, bp - 20, 0x0000);
    push(cs); cs = 0x1493; sub_15ec3(); assert(cs == 0x05da);
    al = memoryAGet(ds, 0xa54e);
    memoryASet(ds, 0x4ec4, al);
    ax = ds;
    es = ax;
    dx = 0x4eb4;
    ax = 0x1002;
    interrupt(0x10);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x00f8;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x006d;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x1280;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x1281;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0x9fef);
    memoryASet16(ds, 0xa06f, ax);
    ax = memoryAGet16(ds, 0x9fed);
    memoryASet16(ds, 0xa071, ax);
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0102;
    out16(dx, ax);
    flags.interrupts = 1;
    es = memoryAGet16(ds, 0xa06f);
    ax = memoryAGet16(es, 0x0002);
    ax += 0x00c8;
    memoryASet16(ds, 0xa055, ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0xa055);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax++;
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_6e51;
loc_6e0f: // 05da:106f
    es = memoryAGet16(ds, 0xa06f);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(ds, 0xa06f);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, bp - 12, 0xa000);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 0x0019);
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6441();
    sp += 0x0008;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_6e51: // 05da:10b1
    if (memoryAGet16(ss, bp - 2) < 0x00c8)
        goto loc_6e0f;
    ax = 0x00c8;
    push(ax);
    ax = 0x006d;
    push(ax);
    ax = 0x007c;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x05da);
    sp += 0x0008;
    es = memoryAGet16(ds, 0xa071);
    ax = memoryAGet16(es, 0x0002);
    ax += 0x0007;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ds, 0xa059, ax);
    ax += 0x0003;
    ax &= 0xfffe;
    memoryASet16(ds, 0xa059, ax);
    dx = 0x0064;
    imul16(dx);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_6eb5;
loc_6e9b: // 05da:10fb
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax += 0xa05b;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_6eb5: // 05da:1115
    if (memoryAGet16(ss, bp - 4) < 0x0008)
        goto loc_6e9b;
    ax = memoryAGet16(ds, 0x9fef);
    memoryASet16(ds, 0xa06f, ax);
    ax = memoryAGet16(ds, 0x9fed);
    memoryASet16(ds, 0xa071, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_6f3a;
loc_6ece: // 05da:112e
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx++;
    bx <<= 1;
    ax = bp - 420;
    bx += ax;
    ax = memoryAGet16(ss, bp - 2);
    imul16(memoryAGet16(ds, 0xa059));
    memoryASet16(ds, bx, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    dx = bp - 420;
    bx += dx;
    memoryASet16(ds, bx, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa071);
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(ds, 0xa071);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    ax = bp - 420;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    dx = memoryAGet16(ds, 0xa05b);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 14, ax);
    push(memoryAGet16(ss, bp - 12));
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    push(cs);
    sub_6441();
    sp += 0x0008;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_6f3a: // 05da:119a
    if (memoryAGet16(ss, bp - 2) < 0x0064)
        goto loc_6ece;
    memoryASet16(ss, bp - 4, 0x0001);
    goto loc_6f7b;
loc_6f47: // 05da:11a7
    bx = memoryAGet16(ss, bp - 4);
    bx--;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41051);
    memoryASet16(ss, bp - 16, ax);
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41051);
    memoryASet16(ss, bp - 18, ax);
    ds = memoryAGet16(ss, bp - 16);
    es = memoryAGet16(ss, bp - 18);
    cx = memoryAGet16(ss, bp - 6);
    flags.carry = 0;
    si = 0;
    flags.carry = 0;
    di = 0;
loc_6f6e: // 05da:11ce
    al = lodsb<DS_SI>();
    al = rcr8(al, 0x01);
    stosb<ES_DI>(al);
    if (--cx)
        goto loc_6f6e;
    ax = ss;
    ds = ax;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_6f7b: // 05da:11db
    if (memoryAGet16(ss, bp - 4) < 0x0008)
        goto loc_6f47;
    al = memoryAGet(ds, 0xa54e);
    memoryASet(ds, 0x0218, al);
    memoryASet(ds, 0x0229, al);
    memoryASet(ds, 0x0218, al);
    ax = ds;
    es = ax;
    dx = 0x0208;
    ax = 0x1002;
    interrupt(0x10);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_6fad;
loc_6fa0: // 05da:1200
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_5e05();
    sp += 0x0002;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_6fad: // 05da:120d
    if (memoryAGet16(ss, bp - 2) < 0x0004)
        goto loc_6fa0;
    ax = 0;
    memoryASet16(ds, 0x746a, ax);
    memoryASet16(ds, 0x7470, ax);
    memoryASet16(ds, 0x746e, 0xffff);
    push(cs);
    sub_618c();
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_6fe0;
loc_6fcc: // 05da:122c
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    ax += 0xa04b;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_6fe0: // 05da:1240
    if (memoryAGet16(ss, bp - 2) < 0x0004)
        goto loc_6fcc;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_7001;
loc_6fed: // 05da:124d
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax += 0xa05b;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_7001: // 05da:1261
    if (memoryAGet16(ss, bp - 4) < 0x0008)
        goto loc_6fed;
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (ax)
        goto loc_7014;
    push(cs);
    sub_67d5();
loc_7014: // 05da:1274
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (ax)
        goto loc_7026;
    push(cs);
    sub_6ab4();
    memoryASet16(ss, bp - 20, 0x0001);
loc_7026: // 05da:1286
    ax = 0x0003;
    push(ax);
    ax = 0x9fed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0x0003;
    push(ax);
    ax = 0x9fef;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x0040;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f082(); assert(cs == 0x05da);
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x05da);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x05da);
    if (memoryAGet(ds, 0xa545) != 0x00)
        goto loc_7076;
    goto loc_7110;
loc_7076: // 05da:12d6
    if (memoryAGet(ds, 0xa545) != 0x3b)
        goto loc_7088;
    push(cs); cs = 0x0b02; sub_b9c5(); assert(cs == 0x05da);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_7088: // 05da:12e8
    if (memoryAGet16(ss, bp - 20) != 0x0000)
        goto loc_70eb;
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x05da);
    ax = 0x006d;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x006d;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f28c(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b4));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x05da);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x05da);
    if (memoryAGet16(ds, 0x7a72) == 0x0000)
        goto loc_70eb;
    memoryASet16(ds, 0x7a70, 0x0005);
    memoryASet16(ds, 0x474a, 0x0002);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x05da);
    push(cs); cs = 0x07b1; sub_7b73(); assert(cs == 0x05da);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_70eb: // 05da:134b
    push(cs); cs = 0x1c76; sub_1ece2(); assert(cs == 0x05da);
    if (memoryAGet16(ds, 0x474a) == 0x0000)
        goto loc_7103;
    memoryASet16(ds, 0x7a70, 0x0005);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_7103: // 05da:1363
    if (memoryAGet16(ds, 0xa53b) == 0x0000)
        goto loc_7110;
    memoryASet16(ds, 0x7a70, 0x0006);
loc_7110: // 05da:1370
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7116() // 05da:1376
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    ax = 0;
    dx = 0x4000;
    push(ax);
    push(dx);
    ax = 0xa073;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa073);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, 0x0000);
    di = 0x0001;
    goto loc_7178;
loc_7141: // 05da:13a1
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_716f;
loc_7148: // 05da:13a8
    si = 0;
    goto loc_7166;
loc_714c: // 05da:13ac
    if (!(di & si))
        goto loc_715b;
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    al = memoryAGet(ss, bp - 2);
    memoryASet(es, bx, al);
    goto loc_7162;
loc_715b: // 05da:13bb
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    memoryASet(es, bx, 0x00);
loc_7162: // 05da:13c2
    si++;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_7166: // 05da:13c6
    if (si < 0x0100)
        goto loc_714c;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) << 1);
loc_716f: // 05da:13cf
    if (memoryAGet16(ss, bp - 2) < 0x0100)
        goto loc_7148;
    di <<= 1;
loc_7178: // 05da:13d8
    if (di < 0x0100)
        goto loc_7141;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7184() // 05da:13e4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x002a;
    push(si);
    push(di);
    push(cs);
    sub_7116();
    memoryASet16(ss, bp - 22, 0x0002);
    memoryASet16(ss, bp - 24, 0xe630);
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 24));
    ax = 0xa52d;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa52d);
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp - 28, 0x0000);
    es = memoryAGet16(ss, bp - 26);
    di = memoryAGet16(ss, bp - 28);
    memoryASet16(ss, bp - 10, 0x000a);
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 6, 0x0b33);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ss, bp - 16, 0x0000);
    memoryASet16(ss, bp - 2, 0x00c7);
    goto loc_739b;
loc_71de: // 05da:143e
    push(es);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0140;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f4ad(); assert(cs == 0x05da);
    sp += 0x0008;
    es = pop();
    memoryASet16(ss, bp - 28, di);
    memoryASet16(ss, bp - 26, es);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 26);
    dx = memoryAGet16(ss, bp - 28);
    memoryASet16(ds, bx + 41487, ax);
    memoryASet16(ds, bx + 41485, dx);
    ax = 0;
    dx = 0x0002;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    cl = 0x0b;
    push(cs); cs = 0x01ed; sub_5064(); assert(cs == 0x05da);
    ax <<= 1;
    memoryASet16(ss, bp - 4, ax);
    dx = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(ss, bp - 16);
    cl = 0x0b;
    push(cs); cs = 0x01ed; sub_5064(); assert(cs == 0x05da);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    memoryASet16(ds, bx + 41085, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    ax = 0x000a;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 18, 0x0000);
    memoryASet16(ss, bp - 20, 0x0000);
    flags.carry = (memoryAGet16(ss, bp - 16) + ax) >= 0x10000;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    ax >>= 1;
    dx = 0x00a0;
    dx -= ax;
    memoryASet16(ss, bp - 38, dx);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    ax += dx;
    memoryASet16(ss, bp - 34, ax);
    al = memoryAGet(ss, bp - 38);
    al &= 0x07;
    memoryASet(ss, bp - 31, al);
    ax = 0xd18c;
    stosw<ES_DI>(ax);
    ax = 0xd08e;
    stosw<ES_DI>(ax);
    ax = 0xc781;
    stosw<ES_DI>(ax);
    ax = memoryAGet16(ss, bp - 34);
    stosw<ES_DI>(ax);
    ax = 0xc030;
    stosw<ES_DI>(ax);
    memoryASet16(ss, bp - 42, 0xffff);
    si = 0;
    goto loc_7333;
loc_72b3: // 05da:1513
    dx = memoryAGet16(ss, bp - 18);
    ax = memoryAGet16(ss, bp - 20);
    cl = 0x0b;
    push(cs); cs = 0x01ed; sub_5064(); assert(cs == 0x05da);
    memoryASet16(ss, bp - 36, ax);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet(ss, bp - 29, al);
    al = memoryAGet(ss, bp - 36);
    al &= 0x07;
    memoryASet(ss, bp - 30, al);
    ah = 0x00;
    dx = 0x0007;
    dx -= ax;
    dx <<= 1;
    dx <<= 1;
    dx <<= 1;
    dx += 0x0007;
    al = memoryAGet(ss, bp - 31);
    ah = 0x00;
    dx -= ax;
    cl = 0x08;
    dx <<= cl;
    memoryASet16(ss, bp - 40, dx);
    al = memoryAGet(ss, bp - 29);
    ah = 0x00;
    if (ax == memoryAGet16(ss, bp - 42))
        goto loc_730c;
    ax = 0x5e8a;
    stosw<ES_DI>(ax);
    al = memoryAGet(ss, bp - 29);
    stosb<ES_DI>(al);
    al = memoryAGet(ss, bp - 29);
    ah = 0x00;
    memoryASet16(ss, bp - 42, ax);
loc_730c: // 05da:156c
    ax = 0x870a;
    stosw<ES_DI>(ax);
    ax = memoryAGet16(ss, bp - 40);
    stosw<ES_DI>(ax);
    memoryASet(ss, bp - 31, memoryAGet(ss, bp - 31) + 1);
    if (memoryAGet(ss, bp - 31) != 0x08)
        goto loc_7328;
    memoryASet(ss, bp - 31, 0x00);
    ax = 0x30aa;
    stosw<ES_DI>(ax);
    al = 0xc0;
    stosb<ES_DI>(al);
loc_7328: // 05da:1588
    ax = memoryAGet16(ss, bp - 8);
    flags.carry = (memoryAGet16(ss, bp - 20) + ax) >= 0x10000;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + ax);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + (0x0000 + flags.carry));
    si++;
loc_7333: // 05da:1593
    if (si >= memoryAGet16(ss, bp - 4))
        goto loc_733b;
    goto loc_72b3;
loc_733b: // 05da:159b
    if (memoryAGet(ss, bp - 31) == 0x00)
        goto loc_7344;
    al = 0xaa;
    stosb<ES_DI>(al);
loc_7344: // 05da:15a4
    ax = 0xd18e;
    stosw<ES_DI>(ax);
    al = 0xcb;
    stosb<ES_DI>(al);
    ax = di;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    bx = es;
    ax += bx;
    es = ax;
    di &= 0x000f;
    ax = memoryAGet16(ss, bp - 6);
    flags.carry = memoryAGet16(ss, bp - 12) < ax;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) - ax);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) - 0x0000 - flags.carry);
    push(es);
    ax = 0x0001;
    push(ax);
    ax = 0x0028;
    push(ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 42324));
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    ax += 0x8000;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x05da);
    sp += 0x0008;
    es = pop();
    if (memoryAGet(ds, 0xa545) != 0x00)
        goto loc_73a4;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
loc_739b: // 05da:15fb
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0000)
        goto loc_73a4;
    goto loc_71de;
loc_73a4: // 05da:1604
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_73aa() // 05da:160a
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    goto loc_7422;
loc_73b3: // 05da:1613
    dl = memoryAGet(ds, si);
    if ((char)dl < (char)0x41)
        goto loc_73c7;
    if ((char)dl > (char)0x5a)
        goto loc_73c7;
    al = dl;
    al += 0xdf;
    dl = al;
    goto loc_741f;
loc_73c7: // 05da:1627
    if ((char)dl < (char)0x61)
        goto loc_73d9;
    if ((char)dl > (char)0x7a)
        goto loc_73d9;
    al = dl;
    al += 0xd9;
    dl = al;
    goto loc_741f;
loc_73d9: // 05da:1639
    if (dl != 0x2e)
        goto loc_73e2;
    dl = 0x54;
    goto loc_741f;
loc_73e2: // 05da:1642
    if (dl != 0x2c)
        goto loc_73eb;
    dl = 0x55;
    goto loc_741f;
loc_73eb: // 05da:164b
    if (dl != 0x2d)
        goto loc_73f4;
    dl = 0x56;
    goto loc_741f;
loc_73f4: // 05da:1654
    if (dl != 0x22)
        goto loc_73fd;
    dl = 0x57;
    goto loc_741f;
loc_73fd: // 05da:165d
    if (dl != 0x20)
        goto loc_7406;
    dl = 0x58;
    goto loc_741f;
loc_7406: // 05da:1666
    if (dl != 0x21)
        goto loc_740f;
    dl = 0x59;
    goto loc_741f;
loc_740f: // 05da:166f
    if (dl != 0x27)
        goto loc_7418;
    dl = 0x5a;
    goto loc_741f;
loc_7418: // 05da:1678
    if (dl == 0x0a)
        goto loc_741f;
    dl = 0x54;
loc_741f: // 05da:167f
    memoryASet(ds, si, dl);
    si++;
loc_7422: // 05da:1682
    if (memoryAGet(ds, si) != 0x00)
        goto loc_73b3;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_742a() // 05da:168a
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0056;
    push(si);
    memoryASet16(ds, 0xa533, 0x0000);
    memoryASet16(ds, 0xa531, 0x0150);
    memoryASet16(ds, 0xa535, 0x0001);
    memoryASet16(ds, 0xa7b4, 0x0000);
    memoryASet16(ds, 0xa7b0, 0x0000);
    memoryASet16(ss, bp - 2, 0x20d1);
    memoryASet16(ss, bp - 4, 0x0000);
    memoryASet16(ds, 0xa07b, 0x0000);
    goto loc_74b6;
loc_7461: // 05da:16c1
    ax = bp - 86;
    si = ax;
loc_7466: // 05da:16c6
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 5, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet(ds, si, al);
    si++;
    if (memoryAGet(ss, bp - 5) == 0x0a)
        goto loc_7481;
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_7466;
loc_7481: // 05da:16e1
    memoryASet(ds, si, 0x00);
    ax = bp - 86;
    push(ax);
    push(cs);
    sub_73aa();
    sp += 0x0002;
    ax = bp - 86;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x05da);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa535);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    memoryASet16(ds, 0xa7b4, memoryAGet16(ds, 0xa7b4) + ax);
    ax = memoryAGet16(ds, 0xa535);
    memoryASet16(ds, 0xa07b, memoryAGet16(ds, 0xa07b) + ax);
    memoryASet16(ds, 0xa535, 0x0000);
loc_74b6: // 05da:1716
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet(es, bx) != 0x00)
        goto loc_7461;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b4));
    ax = 0xa075;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0104;
    out16(dx, ax);
    flags.interrupts = 1;
    push(memoryAGet16(ds, 0xa7b4));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa075));
    push(ax);
    push(memoryAGet16(ds, 0xa7ae));
    push(cs); cs = 0x01ed; sub_3c10(); assert(cs == 0x05da);
    sp += 0x000a;
    memoryASet16(ds, 0xa7b4, 0x0000);
    ax = 0;
    push(ax);
    ax = 0x00c8;
    push(ax);
    ax = 0x0140;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f57e(); assert(cs == 0x05da);
    sp += 0x000a;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7515() // 05da:1775
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    ax = 0;
    dx = 0;
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    memoryASet16(ds, 0xa53f, ax);
    memoryASet16(ds, 0xa53d, dx);
    ax = dx;
    memoryASet16(ds, 0xa54c, ax);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0802;
    out16(dx, ax);
    flags.interrupts = 1;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_7644;
loc_754e: // 05da:17ae
    si = 0x00c7;
    goto loc_75ba;
loc_7553: // 05da:17b3
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 6);
    ax -= memoryAGet16(ds, bx + 41085);
    memoryASet16(ss, bp - 8, ax);
    if ((short)memoryAGet16(ss, bp - 8) < (short)0x0000)
        goto loc_756d;
    if (ax < memoryAGet16(ds, 0xa07b))
        goto loc_7575;
loc_756d: // 05da:17cd
    memoryASet16(ds, 0xa546, 0x0000);
    goto loc_7580;
loc_7575: // 05da:17d5
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x002a;
    imul16(dx);
    memoryASet16(ds, 0xa546, ax);
loc_7580: // 05da:17e0
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 41487);
    dx = memoryAGet16(ds, bx + 41485);
    memoryASet16(ds, 0xa079, ax);
    memoryASet16(ds, 0xa077, dx);
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ds, 0xa021);
    ds = memoryAGet16(ds, 0xa073);
    push(bp);
    bp = memoryAGet16(ss, 0xa546);
    ax = memoryAGet16(ss, 0xa075);
    bh = 0;
    flags.interrupts = 0;
    push(cs); cs = memoryAGet16(ss, 0xa077 + 2); callIndirect(cs, memoryAGet16(ss, 0xa077)); assert(cs == 0x05da); // 05da:180e;
    flags.interrupts = 1;
    bp = pop();
    ax = ss;
    ds = ax;
    si--;
loc_75ba: // 05da:181a
    if ((short)si >= 0)
        goto loc_7553;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa021));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    memoryASet16(ds, 0x7468, memoryAGet16(ds, 0x7468) ^ 0x0001);
    ax = memoryAGet16(ds, 0x7468);
    cl = 0x0f;
    ax <<= cl;
    memoryASet16(ds, 0xa021, ax);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ds, 0xa548);
    dx = memoryAGet16(ds, 0xa54c);
    dx += ax;
    memoryASet16(ds, 0xa54c, dx);
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    if (memoryAGet16(ds, 0xa54c) <= 0x0014)
        goto loc_7614;
    memoryASet16(ds, 0xa54c, 0x0014);
loc_7614: // 05da:1874
    ax = memoryAGet16(ds, 0xa54c);
    ax >>= 1;
    ax >>= 1;
    dx = memoryAGet16(ss, bp - 6);
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ds, 0xa54c, memoryAGet16(ds, 0xa54c) & 0x0003);
    push(cs); cs = 0x164d; sub_17413(); assert(cs == 0x05da);
    if (!ax)
        goto loc_763d;
    if (memoryAGet(ds, 0xa545) == 0x3b)
        goto loc_763d;
    memoryASet(ds, 0xa545, 0x39);
loc_763d: // 05da:189d
    if (memoryAGet(ds, 0xa545) != 0x00)
        goto loc_7652;
loc_7644: // 05da:18a4
    ax = memoryAGet16(ds, 0xa07b);
    ax += 0x0190;
    if (ax < memoryAGet16(ss, bp - 6))
        goto loc_7652;
    goto loc_754e;
loc_7652: // 05da:18b2
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7658() // 05da:18b8 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ds, 0xa54e);
    memoryASet(ds, 0x4ec4, al);
    ax = ds;
    es = ax;
    dx = 0x4eb4;
    ax = 0x1002;
    interrupt(0x10);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x002a;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0;
    memoryASet16(ds, 0xa021, ax);
    memoryASet16(ds, 0x7468, ax);
    push(cs); cs = 0x1493; sub_15ec3(); assert(cs == 0x05da);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ds, 0xa550, 0x0002);
    push(cs);
    sub_742a();
    memoryASet16(ds, 0xa550, 0x0000);
    ax = 0x006c;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ds, 0xa7b4, 0x8000);
    ax = 0x006c;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f28c(); assert(cs == 0x05da);
    sp += 0x0006;
    push(cs); cs = 0x1493; sub_15ec3(); assert(cs == 0x05da);
    al = memoryAGet(ds, 0xa54e);
    memoryASet(ds, 0x01fe, al);
    ax = ds;
    es = ax;
    dx = 0x01ee;
    ax = 0x1002;
    interrupt(0x10);
    memoryASet16(ds, 0xa7b4, 0x0000);
    push(cs);
    sub_7184();
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (ax)
        goto loc_771a;
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x08aa; sub_ab67(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs);
    sub_7515();
    push(cs); cs = 0x08aa; sub_ab32(); assert(cs == 0x05da);
loc_771a: // 05da:197a
    ax = 0xa52d;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0xa073;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0xa075;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x0040;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f082(); assert(cs == 0x05da);
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x05da);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x05da);
    push(cs);
    sub_5dab();
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_776a() // 05da:19ca +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xa7b0, 0x0000);
    ax = 0x006d;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    ax = 0x006d;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f28c(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0x00e0;
    push(ax);
    ax = 0x002a;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(memoryAGet16(ds, 0xa7b4));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x05da);
    sp += 0x0008;
    ax = 0;
    push(ax);
    dx = 0x01a4;
    push(ax);
    push(dx);
    push(cs); cs = 0x164d; sub_17462(); assert(cs == 0x05da);
    sp += 0x0006;
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x05da);
    push(cs);
    sub_5dab();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_77d1() // 05da:1a31 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    push(cs); cs = 0x07b1; sub_7b73(); assert(cs == 0x05da);
    ax = si;
    ax += 0x128a;
    si = ax;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x05da);
    sp += 0x0002;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, 0x0000);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ds, 0x7a68, ax);
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ds, 0xa541, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa541));
    ax = 0xa543;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x05da);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = 0xa543;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x05da);
    sp += 0x0004;
    push(memoryAGet16(ds, 0xa541));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ds, 0xa543));
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_561c(); assert(cs == 0x05da);
    sp += 0x000a;
    ax = si;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    push(memoryAGet16(ds, 0xa541));
    push(memoryAGet16(ds, 0xa543));
    push(cs); cs = 0x164d; sub_17251(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x07b1; sub_80a1(); assert(cs == 0x05da);
    sp += 0x0002;
    if (memoryAGet16(ds, 0xa52f) == 0x0000)
        goto loc_788a;
    push(cs);
    sub_78b3();
loc_788a: // 05da:1aea
    push(cs); cs = 0x08aa; sub_ac66(); assert(cs == 0x05da);
    push(cs); cs = 0x164d; sub_17271(); assert(cs == 0x05da);
    ax = 0xa543;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x05da);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x05da);
    push(cs);
    sub_5dab();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_78b3() // 05da:1b13 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001a;
    push(si);
    push(di);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1841; sub_19743(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ds, 0xa546);
    memoryASet16(ds, 0xa7b4, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    di = 0x43c4;
    goto loc_7984;
loc_78de: // 05da:1b3e
    ax = memoryAGet16(ss, bp - 2);
    cl = 0x04;
    ax <<= cl;
    ax += 0x0033;
    memoryASet16(ds, 0xa535, ax);
    memoryASet16(ds, 0xa537, 0x0018);
    push(di);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ds, 0xa537, 0x0098);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_7924;
loc_7907: // 05da:1b67
    ax = 0x0047;
    push(ax);
    ax = memoryAGet16(ds, 0xa535);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0xa537));
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x05da);
    sp += 0x0006;
    memoryASet16(ds, 0xa537, memoryAGet16(ds, 0xa537) + 0x0008);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_7924: // 05da:1b84
    ax = memoryAGet16(ds, di + 62);
    if (ax > memoryAGet16(ss, bp - 4))
        goto loc_7907;
    ax = 0x000a;
    push(ax);
    ax = bp - 26;
    push(ax);
    push(memoryAGet16(ds, di + 60));
    push(memoryAGet16(ds, di + 58));
    push(cs); cs = 0x01ed; sub_3b6b(); assert(cs == 0x05da);
    sp += 0x0008;
    ax = bp - 26;
    si = ax;
    goto loc_7950;
loc_7949: // 05da:1ba9
    al = memoryAGet(ds, si);
    al += 0x51;
    memoryASet(ds, si, al);
    si++;
loc_7950: // 05da:1bb0
    if (memoryAGet(ds, si) != 0x00)
        goto loc_7949;
    ax = bp - 8;
    push(ax);
    ax = bp - 6;
    push(ax);
    push(ss);
    ax = bp - 26;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x05da); // 05da:1bc2;
    sp += 0x0008;
    ax = 0x0128;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa537, ax);
    ax = bp - 26;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x05da);
    sp += 0x0002;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di += 0x0040;
loc_7984: // 05da:1be4
    if (memoryAGet16(ss, bp - 2) >= 0x0008)
        goto loc_798d;
    goto loc_78de;
loc_798d: // 05da:1bed
    memoryASet(ds, 0x6025, 0x0f);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ds, 0xa7b4, ax);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_799e() // 05da:1bfe +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0046;
    push(si);
    push(di);
    ax = 0x0242;
    push(ax);
    ax = bp - 70;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x05da);
    sp += 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 6, 0xffff);
    goto loc_7a77;
loc_79d5: // 05da:1c35
    bx = memoryAGet16(ss, bp - 2);
    cl = 0x06;
    bx <<= cl;
    ax = memoryAGet16(ds, bx + 17408);
    dx = memoryAGet16(ds, bx + 17406);
    if ((short)ax < (short)memoryAGet16(ss, bp - 10))
        goto loc_7a17;
    if (ax != memoryAGet16(ss, bp - 10))
        goto loc_79f0;
    if (dx < memoryAGet16(ss, bp - 12))
        goto loc_7a17;
loc_79f0: // 05da:1c50
    bx = memoryAGet16(ss, bp - 2);
    cl = 0x06;
    bx <<= cl;
    ax = memoryAGet16(ds, bx + 17408);
    dx = memoryAGet16(ds, bx + 17406);
    if (ax != memoryAGet16(ss, bp - 10))
        goto loc_7a74;
    if (dx != memoryAGet16(ss, bp - 12))
        goto loc_7a74;
    bx = memoryAGet16(ss, bp - 2);
    bx <<= cl;
    ax = memoryAGet16(ds, bx + 17410);
    if (ax >= memoryAGet16(ss, bp - 8))
        goto loc_7a74;
loc_7a17: // 05da:1c77
    memoryASet16(ss, bp - 4, 0x0008);
    goto loc_7a40;
loc_7a1e: // 05da:1c7e
    si = memoryAGet16(ss, bp - 4);
    si--;
    cl = 0x06;
    si <<= cl;
    si += 0x43c4;
    ax = ds;
    di = memoryAGet16(ss, bp - 4);
    di <<= cl;
    di += 0x43c4;
    push(ds);
    es = pop();
    push(ax);
    ds = ax;
    cx = 0x0020;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    ds = pop();
loc_7a40: // 05da:1ca0
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
    ax = memoryAGet16(ss, bp - 4);
    if (ax > memoryAGet16(ss, bp - 2))
        goto loc_7a1e;
    si = bp - 70;
    ax = ss;
    di = memoryAGet16(ss, bp - 2);
    cl = 0x06;
    di <<= cl;
    di += 0x43c4;
    push(ds);
    es = pop();
    push(ds);
    ds = ax;
    cx = 0x0020;
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    ds = pop();
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ds, 0xa539, 0x0001);
    goto loc_7a80;
loc_7a74: // 05da:1cd4
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_7a77: // 05da:1cd7
    if (memoryAGet16(ss, bp - 2) >= 0x0008)
        goto loc_7a80;
    goto loc_79d5;
loc_7a80: // 05da:1ce0
    if (memoryAGet16(ss, bp - 6) == 0xffff)
        goto loc_7aef;
    memoryASet16(ds, 0xa52f, 0x0001);
    memoryASet16(ds, 0x7a68, 0x0013);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x07b1; sub_80a1(); assert(cs == 0x05da);
    sp += 0x0002;
    push(cs);
    sub_78b3();
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x05da);
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x05da);
    ax = memoryAGet16(ss, bp - 2);
    cl = 0x04;
    ax <<= cl;
    ax += 0x0033;
    memoryASet16(ds, 0xa535, ax);
    memoryASet16(ds, 0xa537, 0x0018);
    ax = 0x0070;
    push(ax);
    ax = 0x0039;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x06;
    ax <<= cl;
    ax += 0x43c4;
    push(ax);
    push(memoryAGet16(ds, 0xa535));
    push(memoryAGet16(ds, 0xa537));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x05da);
    sp += 0x000e;
    memoryASet16(ds, 0xa52f, 0x0000);
loc_7aef: // 05da:1d4f
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7af5() // 05da:1d55 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xa52f, 0x0001);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x05da);
    ax = 0x0004;
    push(ax);
    push(cs);
    sub_77d1();
    sp += 0x0002;
    memoryASet16(ds, 0xa52f, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7b73() // 07b1:0063 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0056;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a1a;
    push(ax);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x07b1);
    sp += 0x0006;
    memoryASet16(ds, 0x7a56, 0x0000);
    memoryASet16(ds, 0x7a54, 0x4e20);
    memoryASet16(ds, 0x7a6a, 0x0003);
    memoryASet16(ds, 0x7a58, 0x0005);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7ba3() // 07b1:0093 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x07b1);
    ax = 0x0003;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x07b1);
    sp += 0x0004;
    ax = 0x024e;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x07b1);
    ax = 0;
    push(ax);
    dx = 0x0118;
    push(ax);
    push(dx);
    push(cs); cs = 0x164d; sub_17462(); assert(cs == 0x07b1);
    sp += 0x0006;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_7f94() // 07b1:0484 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    memoryASet16(ss, bp - 4, 0x0000);
    ax = memoryAGet16(ds, 0xa7eb);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_803f;
loc_7fb4: // 07b1:04a4
    si = 0;
    goto loc_8033;
loc_7fb8: // 07b1:04a8
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    ax &= 0x00ff;
    di = ax;
    if (di < 0x0001)
        goto loc_802b;
    if (di > 0x0011)
        goto loc_802b;
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31262) == 0x0000)
        goto loc_802b;
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx, 0x0000);
    if (memoryAGet16(ss, bp - 8) != 0x00d0)
        goto loc_8004;
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    es = memoryAGet16(ds, 0xa7e9);
    memoryASet16(es, bx, 0x0000);
    goto loc_802b;
loc_8004: // 07b1:04f4
    if (memoryAGet16(ss, bp - 8) != 0x00f0)
        goto loc_802b;
    if (memoryAGet16(ds, 0xa7c2) != di)
        goto loc_801f;
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs); cs = 0x0f7c; sub_1021b(); assert(cs == 0x07b1);
    sp += 0x0004;
    goto loc_802b;
loc_801f: // 07b1:050f
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs); cs = 0x0f7c; sub_101bd(); assert(cs == 0x07b1);
    sp += 0x0004;
loc_802b: // 07b1:051b
    si++;
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_8033: // 07b1:0523
    if (si >= memoryAGet16(ds, 0xa7e4))
        goto loc_803c;
    goto loc_7fb8;
loc_803c: // 07b1:052c
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_803f: // 07b1:052f
    ax = memoryAGet16(ss, bp - 2);
    if (ax >= memoryAGet16(ds, 0xa7e2))
        goto loc_804b;
    goto loc_7fb4;
loc_804b: // 07b1:053b
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8051() // 07b1:0541 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x1ef3; sub_1f09f(); assert(cs == 0x07b1);
    memoryASet16(ds, 0xa7c4, 0x0000);
    ax = 0x07b1;
    push(ax);
    ax = 0x0561;
    push(ax);
    push(cs); cs = 0x1841; sub_19060(); assert(cs == 0x07b1);
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_80a1() // 07b1:0591 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0x3bd6) == 0x0000)
        goto loc_80c2;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1eef; sub_1eef2(); assert(cs == 0x07b1);
    sp += 0x0002;
    memoryASet16(ds, 0x7a6c, 0x0002);
    goto loc_80ce;
loc_80c2: // 07b1:05b2
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1eef; sub_1eef2(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_80ce: // 07b1:05be
    push(memoryAGet16(ds, 0x7a68));
    push(cs); cs = 0x1493; sub_15b90(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1841; sub_185d2(); assert(cs == 0x07b1);
    push(cs); cs = 0x1493; sub_15e4a(); assert(cs == 0x07b1);
    push(cs); cs = 0x107c; sub_107c3(); assert(cs == 0x07b1);
    if (memoryAGet16(ds, 0xa7ed) != 0x0000)
        goto loc_80f4;
    push(cs);
    sub_7f94();
loc_80f4: // 07b1:05e4
    push(cs); cs = 0x1841; sub_18728(); assert(cs == 0x07b1);
    ax = 0;
    push(ax);
    push(cs); cs = 0x174b; sub_18414(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1493; sub_15458(); assert(cs == 0x07b1);
    if (!si)
        goto loc_815f;
    if (memoryAGet16(ds, 0xa52f) == 0x0000)
        goto loc_8121;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x07b1);
    sp += 0x0002;
    goto loc_815f;
loc_8121: // 07b1:0611
    if (memoryAGet16(ds, 0x3bd6) == 0x0000)
        goto loc_8136;
    ax = 0x0299;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x07b1);
    sp += 0x0002;
    goto loc_815f;
loc_8136: // 07b1:0626
    bx = memoryAGet16(ds, 0xa7ed);
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 6490));
    push(memoryAGet16(ds, bx + 6488));
    push(ds);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_5683(); assert(cs == 0x07b1);
    sp += 0x0008;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_815f: // 07b1:064f
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x174b; sub_18414(); assert(cs == 0x07b1);
    sp += 0x0002;
    if (memoryAGet16(ds, 0xa7ef) != 0x0000)
        goto loc_817a;
    if (!si)
        goto loc_817a;
    push(cs);
    sub_8051();
loc_817a: // 07b1:066a
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_817d() // 07b1:066d
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    push(cs); cs = 0x174b; sub_18396(); assert(cs == 0x07b1);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_81b0;
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0000)
        goto loc_81a2;
    if (memoryAGet16(ss, bp - 8) >= 0x0800)
        goto loc_81b0;
loc_81a2: // 07b1:0692
    memoryASet16(ds, 0xa7b8, 0x0000);
    memoryASet16(ds, 0xa7b6, 0x0005);
    goto loc_8219;
loc_81b0: // 07b1:06a0
    memoryASet16(ds, 0xa7b8, 0x0000);
    memoryASet16(ds, 0xa7b6, 0x0000);
    si = 0;
    goto loc_8214;
loc_81c0: // 07b1:06b0
    ax = si;
    ax += 0x0073;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x07b1);
    sp += 0x0002;
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    dl = ~dl;
    es = ax;
    memoryASet(es, si + 115, memoryAGet(es, si + 115) & dl);
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31699) == 0x0000)
        goto loc_81ff;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0x7bd3;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x07b1);
    sp += 0x0004;
    goto loc_8213;
loc_81ff: // 07b1:06ef
    memoryASet16(ds, 0xa7ef, 0x0000);
    memoryASet16(ds, 0xa7b8, 0x0000);
    memoryASet16(ds, 0xa7b6, 0x0005);
    goto loc_8219;
loc_8213: // 07b1:0703
    si++;
loc_8214: // 07b1:0704
    if ((short)si < (short)0x0006)
        goto loc_81c0;
loc_8219: // 07b1:0709
    ax = 0x0008;
    push(ax);
    ax = 0x001a;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x07b1);
    sp += 0x0004;
    if (memoryAGet16(ds, 0x7bd3) == 0x0000)
        goto loc_8246;
    ax = 0x0073;
    push(ax);
    push(memoryAGet16(ds, 0xa7de));
    push(memoryAGet16(ds, 0xa533));
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x07b1);
    sp += 0x0006;
    goto loc_8252;
loc_8246: // 07b1:0736
    memoryASet16(ds, 0xa7b8, 0x0000);
    memoryASet16(ds, 0xa7b6, 0x0005);
loc_8252: // 07b1:0742
    al = memoryAGet(ds, 0x7aec);
    al = ~al;
    dx = 0x2c27;
    es = dx;
    memoryASet(es, 0x0073, memoryAGet(es, 0x0073) & al);
    memoryASet16(ds, 0xa531, memoryAGet16(ds, 0xa531) - 0x0030);
    memoryASet16(ds, 0xa533, memoryAGet16(ds, 0xa533) + 0x0030);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(di);
    push(cs); cs = 0x056a; sub_56ac(); assert(cs == 0x07b1);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa7dc);
    ax -= memoryAGet16(ss, bp - 4);
    ax >>= 1;
    ax -= 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + ax);
    push(di);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    ax = memoryAGet16(ss, bp + 8);
    bx = 0x0006;
    dx = 0;
    div16(bx);
    dx = 0;
    memoryASet16(ds, 0xa7c0, dx);
    memoryASet16(ds, 0xa7be, ax);
    memoryASet16(ds, 0xa7bc, dx);
    memoryASet16(ds, 0xa7ba, ax);
    ax |= memoryAGet16(ds, 0xa7bc);
    if (ax)
        goto loc_82f4;
    ax = memoryAGet16(ds, 0xa7b6);
    ax |= memoryAGet16(ds, 0xa7b8);
    if (ax)
        goto loc_82f4;
    memoryASet16(ds, 0xa7b8, 0x0000);
    memoryASet16(ds, 0xa7b6, 0x0005);
    if (memoryAGet16(ds, 0x7bdd) == 0x0000)
        goto loc_82ef;
    ax = 0x0078;
    push(ax);
    ax = memoryAGet16(ds, 0xa7de);
    ax += 0x0028;
    push(ax);
    ax = memoryAGet16(ds, 0xa533);
    ax -= 0x0018;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x07b1);
    sp += 0x0006;
loc_82ef: // 07b1:07df
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
loc_82f4: // 07b1:07e4
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_82fa() // 07b1:07ea
{
    sp -= 2;
    push(bp);
    bp = sp;
    flags.carry = memoryAGet16(ds, 0xa7be) < 0x0001;
    memoryASet16(ds, 0xa7be, memoryAGet16(ds, 0xa7be) - 0x0001);
    ax = memoryAGet16(ds, 0xa7be);
    memoryASet16(ds, 0xa7c0, memoryAGet16(ds, 0xa7c0) - 0x0000 - flags.carry);
    dx = memoryAGet16(ds, 0xa7c0);
    ax |= dx;
    if (ax)
        goto loc_8369;
    if ((short)memoryAGet16(ds, 0xa7b8) < (short)0x0000)
        goto loc_8322;
    if ((short)memoryAGet16(ds, 0xa7b8) > (short)0x0000)
        goto loc_8369;
    if (memoryAGet16(ds, 0xa7b6) > 0x0004)
        goto loc_8369;
loc_8322: // 07b1:0812
    ax = memoryAGet16(ds, 0xa7bc);
    dx = memoryAGet16(ds, 0xa7ba);
    memoryASet16(ds, 0xa7c0, ax);
    memoryASet16(ds, 0xa7be, dx);
    bx = memoryAGet16(ds, 0xa7b6);
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31701) == 0x0000)
        goto loc_835a;
    ax = memoryAGet16(ds, 0xa7b6);
    ax += 0x0074;
    push(ax);
    ax = memoryAGet16(ds, 0xa7de);
    ax += 0x0028;
    push(ax);
    ax = memoryAGet16(ds, 0xa533);
    ax -= 0x0018;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x07b1);
    sp += 0x0006;
loc_835a: // 07b1:084a
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    flags.carry = (memoryAGet16(ds, 0xa7b6) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0xa7b6, memoryAGet16(ds, 0xa7b6) + 0x0001);
    memoryASet16(ds, 0xa7b8, memoryAGet16(ds, 0xa7b8) + (0x0000 + flags.carry));
loc_8369: // 07b1:0859
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_836b() // 07b1:085b
{
    sp -= 2;
    push(bp);
    bp = sp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8370() // 07b1:0860 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x07b1);
    ax = 0x0003;
    push(ax);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x07b1);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0006);
    ax = 0x029e;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x07b1);
    sp += 0x000e;
    flags.carry = !ax;
    ax = -ax;
    ax = -flags.carry;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_83ff;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x07b1);
    sp += 0x0002;
    si = ax;
    if ((short)si < 0)
        goto loc_83ff;
    if ((short)si > (short)0x0015)
        goto loc_83ff;
    memoryASet16(ds, 0x7a68, si);
    memoryASet16(ds, 0x7a70, 0x0004);
    ax = 0x1000;
    push(ax);
    push(cs); cs = 0x164d; sub_17209(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_83ff: // 07b1:08ef
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8404() // 07b1:08f4 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(ss);
    ax = bp - 12;
    push(ax);
    push(ds);
    ax = 0x0244;
    push(ax);
    cx = 0x000a;
    push(cs); cs = 0x01ed; sub_51b5(); assert(cs == 0x07b1);
    push(cs); cs = 0x164d; sub_17271(); assert(cs == 0x07b1);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x07b1);
    ax = 0x0003;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x07b1);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0006);
    ax = 0x02c0;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x07b1);
    sp += 0x000e;
    flags.carry = !ax;
    ax = -ax;
    ax = -flags.carry;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_84f8;
    if ((char)memoryAGet(ds, 0x7a88) < (char)0x30)
        goto loc_84f8;
    if ((char)memoryAGet(ds, 0x7a88) > (char)0x39)
        goto loc_84f8;
    al = memoryAGet(ds, 0x7a88);
    memoryASet(ss, bp - 8, al);
    ax = 0x8180;
    push(ax);
    ax = 0x8102;
    push(ax);
    ax = bp - 12;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x07b1);
    sp += 0x0006;
    si = ax;
    if (si != 0xffff)
        goto loc_84b8;
    ax = 0x02d7;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_84b8: // 07b1:09a8
    ax = 0x0002;
    push(ax);
    ax = 0xa7ed;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x07b1);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xa7e0;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x07b1);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7e0));
    push(memoryAGet16(ds, 0xa543));
    push(ax);
    push(si);
    push(cs); cs = 0x1493; sub_14a70(); assert(cs == 0x07b1);
    sp += 0x000a;
    push(si);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_84f8: // 07b1:09e8
    push(cs); cs = 0x164d; sub_1728f(); assert(cs == 0x07b1);
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8891() // 07b1:0d81 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    if (memoryAGet16(ds, 0x7a70) == 0x0006)
        goto loc_8916;
    ax = memoryAGet16(ds, 0x474a);
    memoryASet16(ds, 0x7a6c, ax);
    memoryASet16(ds, 0x474a, 0x0000);
loc_88a8: // 07b1:0d98
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_80a1();
    sp += 0x0002;
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_8916;
    if (memoryAGet16(ds, 0x7a68) == 0x0000)
        goto loc_8903;
    memoryASet16(ds, 0xa7ef, 0x0000);
    ax = 0x0008;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x07b1);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0014);
    ax = 0x0335;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x07b1);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x07b1);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x07b1);
    memoryASet16(ds, 0x7a68, 0x0000);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_80a1();
    sp += 0x0002;
loc_8903: // 07b1:0df3
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_8916;
    ax = 0x0358;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x07b1);
    sp += 0x0002;
loc_8916: // 07b1:0e06
    memoryASet16(ds, 0xa7da, 0x0000);
    push(cs); cs = 0x1a61; sub_1b10d(); assert(cs == 0x07b1);
    push(cs); cs = 0x08aa; sub_ac66(); assert(cs == 0x07b1);
    if (memoryAGet16(ds, 0x7a70) == 0x0006)
        goto loc_8940;
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a60;
    push(ax);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x07b1);
    sp += 0x0006;
loc_8940: // 07b1:0e30
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x07b1);
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_8962;
    if (memoryAGet16(ds, 0x7a70) == 0x0006)
        goto loc_8916;
    if (memoryAGet16(ds, 0x7a70) != 0x0001)
        goto loc_895d;
    goto loc_88a8;
loc_895d: // 07b1:0e4d
    push(cs); cs = 0x056a; sub_59c9(); assert(cs == 0x07b1);
loc_8962: // 07b1:0e52
    memoryASet16(ds, 0xa7c2, 0xffff);
    bx = memoryAGet16(ds, 0x7a70);
    bx--;
    if (bx <= 0x000c)
        goto loc_8975;
    goto loc_8a6c;
loc_8975: // 07b1:0e65
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 3969)); // 07b1:0e67;
  // gap 240 bytes
loc_8a6c: // 07b1:0f5c
    if ((short)memoryAGet16(ds, 0x7a6a) < (short)0x0000)
        goto loc_8a76;
    goto loc_88a8;
loc_8a76: // 07b1:0f66
    push(cs);
    sub_7ba3();
    push(memoryAGet16(ds, 0x7a5e));
    push(memoryAGet16(ds, 0x7a52));
    push(memoryAGet16(ds, 0x7a50));
    push(cs); cs = 0x05da; sub_799e(); assert(cs == 0x07b1);
    sp += 0x0006;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8aab() // 08aa:000b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    di = ax;
    si = memoryAGet16(ds, 0xa7d6);
    goto loc_8acf;
loc_8ac0: // 08aa:0020
    if (memoryAGet16(ds, si + 2) == 0x0000)
        goto loc_8ac9;
    di++;
    goto loc_8acc;
loc_8ac9: // 08aa:0029
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_8acc: // 08aa:002c
    si = memoryAGet16(ds, si + 72);
loc_8acf: // 08aa:002f
    if (si)
        goto loc_8ac0;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0004;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0007);
    ax = 0x03be;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(di);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x03cf;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8b2f() // 08aa:008f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0007;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x03e2;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x03ef;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x03fc;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    ax = memoryAGet16(ds, 0xa01d);
    dx = memoryAGet16(ds, 0xa01b);
    flags.carry = (dx + memoryAGet16(ds, 0xa013)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa013);
    ax += memoryAGet16(ds, 0xa015) + flags.carry;
    flags.carry = (dx + memoryAGet16(ds, 0xa017)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa017);
    ax += memoryAGet16(ds, 0xa019) + flags.carry;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x08aa);
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0408;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    push(cs); cs = 0x174b; sub_1832f(); assert(cs == 0x08aa);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x08aa);
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0416;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    push(cs); cs = 0x174b; sub_18396(); assert(cs == 0x08aa);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x08aa);
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0424;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    push(cs); cs = 0x174b; sub_181ed(); assert(cs == 0x08aa);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8c09() // 08aa:0169 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0018;
    push(si);
    push(di);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0011;
    push(ax);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ss, bp - 22, 0x0000);
    memoryASet16(ss, bp - 24, 0x0000);
    ax = 0x0427;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x0433;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa535);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0xa537);
    ax += 0x0038;
    ax &= 0xfff8;
    memoryASet16(ss, bp - 2, ax);
    ax += 0x0028;
    memoryASet16(ss, bp - 10, ax);
    ax = 0x043f;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa535);
    memoryASet16(ss, bp - 8, ax);
    si = 0x007c;
    di = 0;
loc_8c77: // 08aa:01d7
    if ((short)si < (short)0x0209)
        goto loc_8c82;
    si = 0x0208;
    goto loc_8c8a;
loc_8c82: // 08aa:01e2
    if ((short)si >= (short)0x007c)
        goto loc_8c8a;
    si = 0x007c;
loc_8c8a: // 08aa:01ea
    ax = si;
    dx = 0x0012;
    imul16(dx);
    ax += 0xf748;
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 14, ax);
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 16, ax);
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 4);
    push(ax);
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa535, ax);
    ax = si;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x047f;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0481;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0483;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0485;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0487;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0489;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x048b;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x048d;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x048f;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf7a(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0491;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa537, ax);
    if (memoryAGet16(ss, bp - 16) != 0x0000)
        goto loc_8e48;
    ax = 0x0493;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_8e8c;
loc_8e48: // 08aa:03a8
    es = memoryAGet16(ss, bp - 16);
    ax = memoryAGet16(es, 0x0006);
    push(ax);
    ax = memoryAGet16(es, 0x000e);
    dx = 0x0005;
    imul16(dx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 18, dx);
    ax = memoryAGet16(ss, bp - 18);
    ax += 0x000f;
    ax &= 0xfff0;
    memoryASet16(ss, bp - 18, ax);
    flags.carry = (memoryAGet16(ss, bp - 24) + ax) >= 0x10000;
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + ax);
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + (0x0000 + flags.carry));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0499;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_8e8c: // 08aa:03ec
    memoryASet16(ss, bp - 6, si);
loc_8e8f: // 08aa:03ef
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 4);
    push(ax);
    ax = 0x006e;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 10));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    if (memoryAGet16(ss, bp - 16) == 0x0000)
        goto loc_8efd;
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ds, 0xa537, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa535, ax);
    ax = 0x049b;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = di;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x04a2;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(si);
    push(memoryAGet16(ds, 0xa535));
    ax = di;
    ax <<= 1;
    dx = memoryAGet16(ss, bp - 10);
    dx += ax;
    dx += 0x0010;
    push(dx);
    push(cs); cs = 0x1ef3; sub_1fda5(); assert(cs == 0x08aa);
    sp += 0x0006;
loc_8efd: // 08aa:045d
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_172ef(); assert(cs == 0x08aa);
    ah = 0x00;
    memoryASet16(ss, bp - 20, ax);
    if (ax == 0x004b)
        goto loc_8f5a;
    if (ax > 0x004b)
        goto loc_8f24;
    if (ax == 0x0001)
        goto loc_8f88;
    if (ax == 0x0048)
        goto loc_8f35;
    if (ax == 0x0049)
        goto loc_8f3b;
    goto loc_8f7d;
loc_8f24: // 08aa:0484
    if (ax == 0x004d)
        goto loc_8f69;
    if (ax == 0x0050)
        goto loc_8f38;
    if (ax == 0x0051)
        goto loc_8f4b;
    goto loc_8f7d;
loc_8f35: // 08aa:0495
    si++;
    goto loc_8f7d;
loc_8f38: // 08aa:0498
    si--;
    goto loc_8f7d;
loc_8f3b: // 08aa:049b
    si += 0x000a;
    if ((short)si < (short)0x0209)
        goto loc_8f7d;
    si = 0x0208;
    goto loc_8f7d;
  // gap 2 bytes
loc_8f4b: // 08aa:04ab
    si -= 0x000a;
    if ((short)si >= (short)0x007c)
        goto loc_8f7d;
    si = 0x007c;
    goto loc_8f7d;
  // gap 2 bytes
loc_8f5a: // 08aa:04ba
    di--;
    ax = di;
    if (ax != 0xffff)
        goto loc_8f7d;
    di = 0x0003;
    goto loc_8f7d;
  // gap 2 bytes
loc_8f69: // 08aa:04c9
    di++;
    ax = di;
    if (ax != 0x0004)
        goto loc_8f7d;
    di = 0;
    goto loc_8f7d;
  // gap 8 bytes
loc_8f7d: // 08aa:04dd
    if (si != memoryAGet16(ss, bp - 6))
        goto loc_8f85;
    goto loc_8e8f;
loc_8f85: // 08aa:04e5
    goto loc_8c77;
loc_8f88: // 08aa:04e8
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_8f8e() // 08aa:04ee +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
loc_8f98: // 08aa:04f8
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (!ax)
        goto loc_8f98;
    if (memoryAGet(ds, 0xa545) == 0x1c)
        goto loc_8fb1;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_8fb1: // 08aa:0511
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1a61; sub_1b10d(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xa7b2);
    ax += memoryAGet16(ds, 0xa7b0);
    di = ax;
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x08aa);
    sp += 0x0004;
    if (di >= 0xce00)
        goto loc_9025;
    si = 0;
    goto loc_901d;
loc_8ff9: // 08aa:0559
    ax = 0x0001;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = si;
    dx = 0x0028;
    imul16(dx);
    push(ax);
    ax = si;
    cl = 0x06;
    ax <<= cl;
    dx = di;
    dx += ax;
    push(dx);
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x08aa);
    sp += 0x0008;
    si++;
loc_901d: // 08aa:057d
    if ((short)si < (short)0x00c8)
        goto loc_8ff9;
    goto loc_9052;
loc_9025: // 08aa:0585
    si = 0x00c7;
    goto loc_904e;
loc_902a: // 08aa:058a
    ax = 0x0001;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = si;
    dx = 0x0028;
    imul16(dx);
    push(ax);
    ax = si;
    cl = 0x06;
    ax <<= cl;
    dx = di;
    dx += ax;
    push(dx);
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x08aa);
    sp += 0x0008;
    si--;
loc_904e: // 08aa:05ae
    if ((short)si >= 0)
        goto loc_902a;
loc_9052: // 08aa:05b2
    push(cs); cs = 0x164d; sub_16d38(); assert(cs == 0x08aa);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1a61; sub_1b10d(); assert(cs == 0x08aa);
    push(cs); cs = 0x1b1e; sub_1b7c2(); assert(cs == 0x08aa);
    push(cs); cs = 0x1a61; sub_1afaf(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_16d38(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_18544(); assert(cs == 0x08aa);
    push(cs); cs = 0x1493; sub_152c9(); assert(cs == 0x08aa);
    push(cs); cs = 0x174b; sub_17b92(); assert(cs == 0x08aa);
loc_9086: // 08aa:05e6
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_352c(); assert(cs == 0x08aa);
    sp += 0x0002;
    cl = 0x08;
    ax = sar16(ax, cl);
    ax &= 0x00ff;
    if (ax != 0x0001)
        goto loc_9086;
    push(cs); cs = 0x1ef3; sub_1efc0(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    push(cs); cs = 0x01ed; sub_248b(); assert(cs == 0x08aa);
    sp += 0x0002;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_90b1() // 08aa:0611 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 35107);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    cx = memoryAGet16(ds, bx + 35107);
    dx = 0;
    goto loc_9108;
loc_90d2: // 08aa:0632
    ax = dx;
    ax &= 0x000f;
    si = ax;
    es = memoryAGet16(ss, bp - 2);
    bx = dx;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 32);
    memoryASet16(ss, bp - 4, ax);
    bx = si;
    bx <<= 1;
    di = memoryAGet16(es, bx);
    bx = si;
    bx <<= 1;
    es = cx;
    memoryASet16(es, bx, memoryAGet16(es, bx) & di);
    bx = dx;
    bx <<= 1;
    memoryASet16(es, bx + 32, memoryAGet16(es, bx + 32) & di);
    bx = dx;
    bx <<= 1;
    memoryASet16(es, bx + 32, memoryAGet16(es, bx + 32) | ax);
    dx++;
loc_9108: // 08aa:0668
    if ((short)dx < (short)0x0040)
        goto loc_90d2;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_9113() // 08aa:0673 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0018;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x04a4;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    si = 0x0787;
    goto loc_914d;
loc_9143: // 08aa:06a3
    push(si);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x08aa);
    sp += 0x0002;
    si++;
loc_914d: // 08aa:06ad
    if ((short)si < (short)0x0797)
        goto loc_9143;
    si = 0;
    goto loc_926f;
loc_9158: // 08aa:06b8
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 35107) != 0x0000)
        goto loc_9166;
    goto loc_926e;
loc_9166: // 08aa:06c6
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 2994);
    ah = 0x00;
    ax &= 0x0007;
    di = ax;
    if (!di)
        goto loc_9186;
    ax += 0x006b;
    push(ax);
    push(si);
    push(cs);
    sub_90b1();
    sp += 0x0004;
loc_9186: // 08aa:06e6
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 8826);
    ah = 0x00;
    ax &= 0x0007;
    di = ax;
    if (!di)
        goto loc_91a6;
    ax += 0x0073;
    push(ax);
    push(si);
    push(cs);
    sub_90b1();
    sp += 0x0004;
loc_91a6: // 08aa:0706
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 5910);
    ah = 0x00;
    ax &= 0x0007;
    di = ax;
    if ((short)di <= (short)0x0001)
        goto loc_91f8;
    ax = 0x04ac;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x7a74;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x7a74;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_91f8: // 08aa:0758
    if (!di)
        goto loc_920a;
    ax = di;
    ax += 0x0072;
    push(ax);
    push(si);
    push(cs);
    sub_90b1();
    sp += 0x0004;
loc_920a: // 08aa:076a
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 11742);
    ah = 0x00;
    ax &= 0x0007;
    di = ax;
    if ((short)di <= (short)0x0001)
        goto loc_925c;
    ax = 0x04cf;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x7a74;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x7a74;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_925c: // 08aa:07bc
    if (!di)
        goto loc_926e;
    ax = di;
    ax += 0x007a;
    push(ax);
    push(si);
    push(cs);
    sub_90b1();
    sp += 0x0004;
loc_926e: // 08aa:07ce
    si++;
loc_926f: // 08aa:07cf
    if ((short)si >= (short)0x0b64)
        goto loc_9278;
    goto loc_9158;
loc_9278: // 08aa:07d8
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_927c() // 08aa:07dc +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0xc6a7) != 0x0000)
        goto loc_928e;
    goto loc_931c;
loc_928e: // 08aa:07ee
    if (memoryAGet16(ds, 0xc631) != 0x0000)
        goto loc_9298;
    goto loc_931c;
loc_9298: // 08aa:07f8
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0018;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0006);
    ax = 0x04f2;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x08aa);
    sp += 0x000e;
    flags.carry = !ax;
    ax = -ax;
    ax = -flags.carry;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_9313;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x08aa);
    sp += 0x0002;
    di = ax;
    if ((short)di < 0)
        goto loc_9313;
    if ((short)di > (short)0x000f)
        goto loc_9313;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9313: // 08aa:0873
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_931c: // 08aa:087c
    if (memoryAGet16(ds, 0xc6a3) == 0x0000)
        goto loc_9337;
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_9337;
    push(cs);
    sub_8aab();
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_9337: // 08aa:0897
    if (memoryAGet16(ds, 0xc687) == 0x0000)
        goto loc_936e;
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_936e;
    if (memoryAGet16(ds, 0x3bd6) != 0x0000)
        goto loc_9353;
    push(cs); cs = 0x07b1; sub_8370(); assert(cs == 0x08aa);
    goto loc_9365;
loc_9353: // 08aa:08b3
    if (memoryAGet16(ds, 0x3bd6) != 0x0001)
        goto loc_9365;
    push(cs); cs = 0x07b1; sub_8404(); assert(cs == 0x08aa);
    memoryASet16(ds, 0x7a70, 0x0002);
loc_9365: // 08aa:08c5
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_936e: // 08aa:08ce
    if (memoryAGet16(ds, 0xc66b) == 0x0000)
        goto loc_938e;
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_938e;
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_9388;
    push(cs); cs = 0x056a; sub_59c9(); assert(cs == 0x08aa);
loc_9388: // 08aa:08e8
    memoryASet16(ds, 0x7a70, 0x0002);
loc_938e: // 08aa:08ee
    if (memoryAGet16(ds, 0xc68b) == 0x0000)
        goto loc_93ea;
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_93ea;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0002;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    if (memoryAGet16(ds, 0xc629) == 0x0000)
        goto loc_93c6;
    ax = 0x0508;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_93d2;
loc_93c6: // 08aa:0926
    ax = 0x0515;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_93d2: // 08aa:0932
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    memoryASet16(ds, 0xc629, memoryAGet16(ds, 0xc629) ^ 0x0001);
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_93ea: // 08aa:094a
    if (memoryAGet16(ds, 0xc675) == 0x0000)
        goto loc_9451;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x0521;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    si = 0;
    goto loc_9421;
loc_9416: // 08aa:0976
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 31328, 0x0063);
    si++;
loc_9421: // 08aa:0981
    if ((short)si < (short)0x0004)
        goto loc_9416;
    memoryASet16(ds, 0x7a58, 0x0063);
    memoryASet16(ds, 0x7a5c, 0x0001);
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    ax = 0x0bb8;
    push(ax);
    push(cs);
    sub_a992();
    sp += 0x0002;
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_9451: // 08aa:09b1
    if (memoryAGet16(ds, 0xc68f) == 0x0000)
        goto loc_94a6;
    memoryASet16(ds, 0xc62b, memoryAGet16(ds, 0xc62b) ^ 0x0001);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    if (memoryAGet16(ds, 0xc62b) == 0x0000)
        goto loc_9487;
    ax = 0x052d;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9493;
loc_9487: // 08aa:09e7
    ax = 0x053b;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9493: // 08aa:09f3
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_94a6: // 08aa:0a06
    if (memoryAGet16(ds, 0xc6ab) == 0x0000)
        goto loc_94ba;
    push(cs);
    sub_8b2f();
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_94ba: // 08aa:0a1a
    if (memoryAGet16(ds, 0xc6a9) == 0x0000)
        goto loc_951f;
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    bx = memoryAGet16(ds, 0xa7d6);
    if (memoryAGet16(ds, bx + 6) == 0x0000)
        goto loc_94f7;
    ax = 0x054a;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, bx + 6, 0x0000);
    goto loc_950c;
loc_94f7: // 08aa:0a57
    ax = 0x0559;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, bx + 6, 0x0001);
loc_950c: // 08aa:0a6c
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_951f: // 08aa:0a7f
    if (memoryAGet16(ds, 0xc679) == 0x0000)
        goto loc_9538;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    push(cs);
    sub_8f8e();
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_9538: // 08aa:0a98
    if (memoryAGet16(ds, 0xc685) == 0x0000)
        goto loc_9594;
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_9594;
    memoryASet16(ds, 0xc62d, memoryAGet16(ds, 0xc62d) ^ 0x0001);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    if (memoryAGet16(ds, 0xc62d) == 0x0000)
        goto loc_9575;
    ax = 0x0569;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9581;
loc_9575: // 08aa:0ad5
    ax = 0x0578;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9581: // 08aa:0ae1
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_9594: // 08aa:0af4
    if (memoryAGet16(ds, 0xc66f) == 0x0000)
        goto loc_95a8;
    push(cs);
    sub_8c09();
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_95a8: // 08aa:0b08
    if (memoryAGet16(ds, 0xc6a5) != 0x0000)
        goto loc_95b2;
    goto loc_9631;
loc_95b2: // 08aa:0b12
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0006);
    ax = 0x0588;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x08aa);
    sp += 0x000e;
    flags.carry = !ax;
    ax = -ax;
    ax = -flags.carry;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_9628;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x08aa);
    sp += 0x0002;
    di = ax;
    if ((short)di < 0)
        goto loc_9628;
    if ((short)di > (short)0x0008)
        goto loc_9628;
    memoryASet16(ds, 0xa7f9, di);
loc_9628: // 08aa:0b88
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_9631: // 08aa:0b91
    if (memoryAGet16(ds, 0xc669) != 0x0000)
        goto loc_963b;
    goto loc_96ca;
loc_963b: // 08aa:0b9b
    if (memoryAGet16(ds, 0xc631) != 0x0000)
        goto loc_9645;
    goto loc_96ca;
loc_9645: // 08aa:0ba5
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x001a;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0006);
    ax = 0x05a8;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1b1e; sub_1c3e5(); assert(cs == 0x08aa);
    sp += 0x000e;
    flags.carry = !ax;
    ax = -ax;
    ax = -flags.carry;
    ax++;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_96c1;
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x08aa);
    sp += 0x0002;
    di = ax;
    if ((short)di <= 0)
        goto loc_96c1;
    if ((short)di > (short)0x0012)
        goto loc_96c1;
    memoryASet16(ds, 0x7a68, di);
    memoryASet16(ds, 0x7a70, 0x0004);
loc_96c1: // 08aa:0c21
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_96ca: // 08aa:0c2a
    if (memoryAGet16(ds, 0xc671) == 0x0000)
        goto loc_96de;
    push(cs);
    sub_9113();
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_96de: // 08aa:0c3e
    if (memoryAGet16(ds, 0xc69f) == 0x0000)
        goto loc_96f8;
    memoryASet16(ds, 0x7a6a, 0x0000);
    push(cs); cs = 0x0d6d; sub_eab9(); assert(cs == 0x08aa);
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_96f8: // 08aa:0c58
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_9700() // 08aa:0c60 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0x001e;
    goto loc_9724;
loc_9709: // 08aa:0c69
    if (si == 0x0030)
        goto loc_9723;
    if (si == 0x001e)
        goto loc_9723;
    if (si == 0x0014)
        goto loc_9723;
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 50759) != 0x0000)
        goto loc_9772;
loc_9723: // 08aa:0c83
    si++;
loc_9724: // 08aa:0c84
    if ((short)si <= (short)0x002c)
        goto loc_9709;
    ax = 0x0007;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0002);
    ax = 0x05c5;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
    memoryASet16(ds, 0x7a58, 0x0063);
    memoryASet16(ds, 0x7a6a, memoryAGet16(ds, 0x7a6a) + 1);
    ax = 0x0001;
    memoryASet16(ds, 0x7a66, ax);
    memoryASet16(ds, 0x7a64, ax);
    memoryASet16(ds, 0x7a62, ax);
    memoryASet16(ds, 0x7a60, ax);
loc_9772: // 08aa:0cd2
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_9775() // 08aa:0cd5 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xc757) == 0x0000)
        goto loc_9782;
    goto loc_9a40;
loc_9782: // 08aa:0ce2
    if (memoryAGet16(ds, 0xc67f) != 0x0000)
        goto loc_9797;
    if (memoryAGet16(ds, 0xc643) == 0x0000)
        goto loc_97b4;
    if (memoryAGet16(ds, 0xc641) == 0x0000)
        goto loc_97b4;
loc_9797: // 08aa:0cf7
    push(cs);
    sub_a191();
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
loc_97b4: // 08aa:0d14
    if (memoryAGet16(ds, 0xc645) == 0x0000)
        goto loc_97fb;
    push(cs); cs = 0x1a61; sub_1b125(); assert(cs == 0x08aa);
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    ax = 0x0003;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = 0x060c;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
    memoryASet16(ds, 0xc645, 0x0000);
    push(cs); cs = 0x1a61; sub_1b11a(); assert(cs == 0x08aa);
loc_97fb: // 08aa:0d5b
    if (memoryAGet(ds, 0xa545) != 0x3b)
        goto loc_983c;
    push(cs);
    sub_ab32();
    push(cs); cs = 0x0b02; sub_b9c5(); assert(cs == 0x08aa);
    push(memoryAGet16(ds, 0x7a68));
    push(cs);
    sub_ab67();
    sp += 0x0002;
    if (memoryAGet16(ds, 0xc5cd) == 0x0000)
        goto loc_9837;
    bx = memoryAGet16(ds, 0xa7d4);
    memoryASet16(ds, bx + 64, 0xffff);
    memoryASet16(ds, bx + 62, 0xffff);
    memoryASet16(ds, bx + 66, 0xffff);
    memoryASet16(ds, bx + 68, 0xffff);
loc_9837: // 08aa:0d97
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
loc_983c: // 08aa:0d9c
    if (memoryAGet16(ds, 0x7a72) == 0x0000)
        goto loc_9846;
    goto loc_9969;
loc_9846: // 08aa:0da6
    if (memoryAGet(ds, 0xa545) < 0x3c)
        goto loc_9854;
    if (memoryAGet(ds, 0xa545) <= 0x41)
        goto loc_985e;
loc_9854: // 08aa:0db4
    if (memoryAGet(ds, 0xa545) == 0x01)
        goto loc_985e;
    goto loc_990b;
loc_985e: // 08aa:0dbe
    push(cs); cs = 0x1ef3; sub_1f8c9(); assert(cs == 0x08aa);
    push(cs);
    sub_ab32();
    push(cs); cs = 0x1c76; sub_1ece2(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x08aa);
    push(memoryAGet16(ds, 0x7a68));
    push(cs);
    sub_ab67();
    sp += 0x0002;
    if (memoryAGet16(ds, 0xc5cd) != 0x0000)
        goto loc_989e;
    bx = memoryAGet16(ds, 0xa7d4);
    if (memoryAGet16(ds, bx + 70) == 0x0000)
        goto loc_989e;
    ax = memoryAGet16(ds, 0xa7d4);
    ax += 0x0046;
    push(ax);
    push(cs); cs = 0x1841; sub_19c6b(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_989e: // 08aa:0dfe
    if (memoryAGet16(ds, 0xc5cd) == 0x0000)
        goto loc_98bd;
    bx = memoryAGet16(ds, 0xa7d4);
    memoryASet16(ds, bx + 64, 0xffff);
    memoryASet16(ds, bx + 62, 0xffff);
    memoryASet16(ds, bx + 66, 0xffff);
    memoryASet16(ds, bx + 68, 0xffff);
loc_98bd: // 08aa:0e1d
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    if (memoryAGet16(ds, 0x474a) == 0x0000)
        goto loc_98d1;
    memoryASet16(ds, 0x7a70, 0x0005);
    goto loc_98dd;
loc_98d1: // 08aa:0e31
    if (memoryAGet16(ds, 0xa53b) != 0x0000)
        goto loc_98dd;
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
loc_98dd: // 08aa:0e3d
    if (memoryAGet16(ds, 0xc62f) == 0x0000)
        goto loc_98f0;
    memoryASet16(ds, 0xc62f, 0x0000);
    memoryASet16(ds, 0x7a70, 0x0008);
loc_98f0: // 08aa:0e50
    if (memoryAGet16(ds, 0xa53b) == 0x0000)
        goto loc_98fd;
    memoryASet16(ds, 0x7a70, 0x0006);
loc_98fd: // 08aa:0e5d
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
loc_990b: // 08aa:0e6b
    if (memoryAGet(ds, 0xa545) != 0x43)
        goto loc_9969;
    push(cs); cs = 0x1ef3; sub_1efc0(); assert(cs == 0x08aa);
    push(cs); cs = 0x1a61; sub_1b125(); assert(cs == 0x08aa);
    ax = 0x0613;
    push(ax);
    push(cs); cs = 0x01ed; sub_22b3(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
loc_992d: // 08aa:0e8d
    sync();
    if (memoryAGet(ds, 0xa545) != 0x01)
        goto loc_992d;
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1efdc(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(memoryAGet16(ds, 0xa54e));
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    push(cs); cs = 0x1a61; sub_1b11a(); assert(cs == 0x08aa);
loc_9969: // 08aa:0ec9
    if (memoryAGet16(ds, 0xc6a7) == 0x0000)
        goto loc_9982;
    if (memoryAGet16(ds, 0xc683) == 0x0000)
        goto loc_9982;
    if (memoryAGet16(ds, 0xc66f) == 0x0000)
        goto loc_9982;
    push(cs);
    sub_9700();
loc_9982: // 08aa:0ee2
    if (memoryAGet16(ds, 0x7a16) == 0x0000)
        goto loc_99ab;
    if (memoryAGet16(ds, 0xc6cf) == 0x0000)
        goto loc_99ab;
    push(cs);
    sub_927c();
    if (!ax)
        goto loc_99ab;
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
loc_99ab: // 08aa:0f0b
    if (memoryAGet16(ds, 0x7a72) == 0x0000)
        goto loc_9a22;
    if (memoryAGet16(ds, 0xc681) == 0x0000)
        goto loc_9a22;
    if (memoryAGet(ds, 0xa545) != 0x1f)
        goto loc_9a22;
    if (memoryAGet16(ds, 0xc635) == 0x0000)
        goto loc_99df;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ad5b(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ade0(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9a22;
loc_99df: // 08aa:0f3f
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_9a06;
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ad5b(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0xc637, 0x0000);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ade0(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9a1d;
loc_9a06: // 08aa:0f66
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ad5b(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ade0(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9a1d: // 08aa:0f7d
    push(cs); cs = 0x1493; sub_15458(); assert(cs == 0x08aa);
loc_9a22: // 08aa:0f82
    if (memoryAGet16(ds, 0xc681) == 0x0000)
        goto loc_9a40;
    if (memoryAGet(ds, 0xa545) != 0x10)
        goto loc_9a40;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9a40: // 08aa:0fa0
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_9a42() // 08aa:0fa2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0016;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = 0x000a;
    push(ax);
    ax = bp - 22;
    push(ax);
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x08aa);
    sp += 0x0008;
    ax = bp - 22;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ss, bp - 2, ax);
    si = memoryAGet16(ss, bp + 10);
    goto loc_9a8a;
loc_9a77: // 08aa:0fd7
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si--;
    di += 0x0008;
loc_9a8a: // 08aa:0fea
    if ((short)si > (short)memoryAGet16(ss, bp - 2))
        goto loc_9a77;
    goto loc_9ab7;
loc_9a91: // 08aa:0ff1
    bx = memoryAGet16(ss, bp - 2);
    bx -= si;
    ax = bp - 22;
    bx += ax;
    al = memoryAGet(ds, bx);
    cbw();
    dx = memoryAGet16(ss, bp + 12);
    dx += ax;
    dx += 0xffd1;
    push(dx);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si--;
    di += 0x0008;
loc_9ab7: // 08aa:1017
    if ((short)si > 0)
        goto loc_9a91;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_9ac1() // 08aa:1021 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    memoryASet16(ss, bp - 4, 0x0040);
    di = 0x0010;
    memoryASet16(ss, bp - 6, 0x00b8);
    memoryASet16(ss, bp - 8, 0x0090);
    ax = 0x0036;
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x003c;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 8);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0008;
    si = ax;
    goto loc_9b2e;
loc_9b0a: // 08aa:106a
    ax = 0x0037;
    push(ax);
    push(di);
    push(si);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x003d;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 8);
    push(ax);
    push(si);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si += 0x0008;
loc_9b2e: // 08aa:108e
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 6);
    ax += 0xfff8;
    if ((short)ax >= (short)si)
        goto loc_9b0a;
    ax = 0x0038;
    push(ax);
    push(di);
    push(si);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x003e;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 8);
    push(ax);
    push(si);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = di;
    ax += 0x0008;
    si = ax;
    goto loc_9b8c;
loc_9b65: // 08aa:10c5
    ax = 0x0039;
    push(ax);
    push(si);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x003b;
    push(ax);
    push(si);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 6);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si += 0x0008;
loc_9b8c: // 08aa:10ec
    ax = di;
    ax += memoryAGet16(ss, bp - 8);
    ax += 0xfff8;
    if ((short)ax >= (short)si)
        goto loc_9b65;
    ax = 0x0007;
    push(ax);
    ax = 0x0088;
    push(ax);
    ax = 0x00b0;
    push(ax);
    ax = 0x0018;
    push(ax);
    ax = 0x0048;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    memoryASet16(ds, 0xa535, 0x001c);
    memoryASet16(ds, 0xa533, 0x0050);
    memoryASet16(ds, 0xa531, 0x00a0);
    ax = 0x0617;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x000f;
    push(ax);
    ax = 0x0014;
    push(ax);
    ax = 0x00a2;
    push(ax);
    ax = 0x0026;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    bx = memoryAGet16(ds, 0x7a68);
    bx <<= 1;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 6390));
    push(memoryAGet16(ds, bx + 6388));
    push(ds);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_5683(); assert(cs == 0x08aa);
    sp += 0x0008;
    ax = bp - 12;
    push(ax);
    ax = bp - 10;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x056a; sub_56ac(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = 0x0014;
    ax -= memoryAGet16(ss, bp - 12);
    ax >>= 1;
    ax += 0x0028;
    ax -= 0x0002;
    memoryASet16(ds, 0xa535, ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0xa535, 0x003d);
    memoryASet16(ds, 0xa533, 0x0050);
    memoryASet16(ds, 0xa531, 0x0040);
    ax = 0x0620;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = 0x0047;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    push(memoryAGet16(ds, 0x7a52));
    push(memoryAGet16(ds, 0x7a50));
    ax = 0x0029;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0048;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs);
    sub_9a42();
    sp += 0x000c;
    memoryASet16(ds, 0xa535, 0x003d);
    memoryASet16(ds, 0xa533, 0x00b0);
    memoryASet16(ds, 0xa531, 0x0040);
    ax = 0x0626;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = 0x0047;
    push(ax);
    ax = 0x00af;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    push(memoryAGet16(ds, 0x7a56));
    push(memoryAGet16(ds, 0x7a54));
    ax = 0x0029;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0048;
    push(ax);
    ax = 0x00b0;
    push(ax);
    push(cs);
    sub_9a42();
    sp += 0x000c;
    memoryASet16(ds, 0xa535, 0x0055);
    memoryASet16(ds, 0xa533, 0x0050);
    memoryASet16(ds, 0xa531, 0x0040);
    ax = 0x062c;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = 0x005f;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    si = 0;
    goto loc_9d4a;
loc_9d29: // 08aa:1289
    ax = 0x0028;
    push(ax);
    ax = 0x0060;
    push(ax);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x0050;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si++;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x0008);
loc_9d4a: // 08aa:12aa
    if ((short)si < (short)memoryAGet16(ds, 0x7a5e))
        goto loc_9d29;
    memoryASet16(ds, 0xa535, 0x0055);
    memoryASet16(ds, 0xa533, 0x00b0);
    memoryASet16(ds, 0xa531, 0x0040);
    ax = 0x0634;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x000f;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = 0x005f;
    push(ax);
    ax = 0x00af;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    memoryASet16(ds, 0xa535, 0x0060);
    memoryASet16(ds, 0xa533, 0x00b0);
    memoryASet16(ds, 0xa531, 0x0040);
    ax = memoryAGet16(ds, 0x7a6c);
    if (ax == 0x0001)
        goto loc_9db0;
    if (ax == 0x0002)
        goto loc_9dbe;
    if (ax == 0x0003)
        goto loc_9dcc;
    goto loc_9dd8;
loc_9db0: // 08aa:1310
    ax = 0x063a;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9dd8;
loc_9dbe: // 08aa:131e
    ax = 0x063f;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9dd8;
loc_9dcc: // 08aa:132c
    ax = 0x0646;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9dd8: // 08aa:1338
    memoryASet16(ds, 0xa537, 0x0050);
    memoryASet16(ds, 0xa535, 0x0070);
    ax = 0x064b;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x006f;
    push(ax);
    ax = 0x0077;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    si = 0;
    goto loc_9e39;
loc_9e0f: // 08aa:136f
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31328) == 0x0000)
        goto loc_9e38;
    ax = si;
    ax += 0x0024;
    push(ax);
    ax = 0x0070;
    push(ax);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x0078;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
loc_9e38: // 08aa:1398
    si++;
loc_9e39: // 08aa:1399
    if ((short)si < (short)0x0004)
        goto loc_9e0f;
    memoryASet16(ds, 0xa537, 0x00b0);
    memoryASet16(ds, 0xa535, 0x0070);
    ax = 0x0650;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x001a;
    push(ax);
    ax = 0x006f;
    push(ax);
    ax = 0x00d7;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x7a58);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0070;
    push(ax);
    ax = 0x00d8;
    push(ax);
    push(cs);
    sub_9a42();
    sp += 0x000c;
    memoryASet16(ds, 0xa537, 0x0050);
    memoryASet16(ds, 0xa535, 0x0080);
    ax = 0x0655;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = 0x007f;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x7a6a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0080;
    push(ax);
    push(ax);
    push(cs);
    sub_9a42();
    sp += 0x000c;
    memoryASet16(ds, 0xa537, 0x00b0);
    memoryASet16(ds, 0xa535, 0x0080);
    ax = 0x065b;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x007f;
    push(ax);
    ax = 0x00e0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0x7a5a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0080;
    push(ax);
    ax = 0x00e0;
    push(ax);
    push(cs);
    sub_9a42();
    sp += 0x000c;
    ax = 0x000f;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = 0x008f;
    push(ax);
    ax = 0x004f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x08aa);
    sp += 0x000a;
    memoryASet16(ds, 0xa535, 0x0090);
    memoryASet16(ds, 0xa533, 0x0050);
    memoryASet16(ds, 0xa531, 0x0040);
    if (memoryAGet16(ds, 0x7a5c) == 0x0000)
        goto loc_9f6b;
    ax = 0x0661;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_9f77;
loc_9f6b: // 08aa:14cb
    ax = 0x0669;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_9f77: // 08aa:14d7
    si = 0;
    goto loc_9fb8;
loc_9f7b: // 08aa:14db
    ax = si;
    ax += 0x0048;
    push(ax);
    ax = 0x008c;
    push(ax);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x00a0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    ax = si;
    ax += 0x0052;
    push(ax);
    ax = 0x0094;
    push(ax);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x00a0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x08aa);
    sp += 0x0006;
    si++;
loc_9fb8: // 08aa:1518
    if ((short)si < (short)0x000a)
        goto loc_9f7b;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a191() // 08aa:16f1 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ds, 0xa533, 0x0000);
    memoryASet16(ds, 0xa531, 0x0140);
    memoryASet16(ds, 0xa7de, 0x0000);
    memoryASet16(ds, 0xa7dc, 0x00c8);
    if (memoryAGet16(ds, 0xc683) == 0x0000)
        goto loc_a1ee;
    if (memoryAGet16(ds, 0xc64d) == 0x0000)
        goto loc_a1ee;
    ax = 0x0002;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0002);
    ax = 0x066d;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bed9(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    memoryASet16(ds, 0x7a16, 0x0001);
loc_a1ee: // 08aa:174e
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    push(cs); cs = 0x1841; sub_18af2(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 2, ax);
    push(cs); cs = 0x1841; sub_196fc(); assert(cs == 0x08aa);
    memoryASet16(ds, 0xa7f7, ax);
    memoryASet16(ds, 0xa7b4, ax);
    ax = 0x00e0;
    push(ax);
    ax = 0x002c;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x08aa);
    sp += 0x0008;
    ax = 0x00e0;
    push(ax);
    ax = 0x002c;
    push(ax);
    push(memoryAGet16(ds, 0xa546));
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x08aa);
    sp += 0x0008;
    ax = 0x00a8;
    push(ax);
    ax = 0x002c;
    push(ax);
    push(memoryAGet16(ds, 0xa7b4));
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x08aa);
    sp += 0x0008;
    push(cs);
    sub_9ac1();
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa7b4, ax);
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    ax = 0x0022;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0xa7f5, 0x0010);
    memoryASet16(ds, 0xa7f3, 0x0000);
    ax = 0x08aa;
    push(ax);
    ax = 0x1523;
    push(ax);
    push(cs); cs = 0x1841; sub_19060(); assert(cs == 0x08aa);
    sp += 0x0004;
loc_a288: // 08aa:17e8
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    if (memoryAGet16(ds, 0xa7f5) == 0x00a8)
        goto loc_a2ba;
    ax = memoryAGet16(ds, 0xa54c);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa7f5);
    dx += ax;
    memoryASet16(ds, 0xa7f5, dx);
    if ((short)memoryAGet16(ds, 0xa7f5) <= (short)0x00a8)
        goto loc_a288;
    memoryASet16(ds, 0xa7f5, 0x00a8);
    goto loc_a288;
  // gap 2 bytes
loc_a2ba: // 08aa:181a
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1841; sub_19060(); assert(cs == 0x08aa);
    sp += 0x0004;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x08aa);
    ax = 0x0023;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0xa7f5, memoryAGet16(ds, 0xa7f5) - 0x0010);
    memoryASet16(ds, 0xa7f3, 0x0001);
    ax = 0x08aa;
    push(ax);
    ax = 0x1523;
    push(ax);
    push(cs); cs = 0x1841; sub_19060(); assert(cs == 0x08aa);
    sp += 0x0004;
loc_a2fc: // 08aa:185c
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    if (memoryAGet16(ds, 0xa7f5) == 0x0000)
        goto loc_a32c;
    ax = memoryAGet16(ds, 0xa54c);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa7f5);
    dx -= ax;
    memoryASet16(ds, 0xa7f5, dx);
    if ((short)memoryAGet16(ds, 0xa7f5) >= (short)0x0000)
        goto loc_a2fc;
    memoryASet16(ds, 0xa7f5, 0x0000);
    goto loc_a2fc;
  // gap 2 bytes
loc_a32c: // 08aa:188c
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1841; sub_19060(); assert(cs == 0x08aa);
    sp += 0x0004;
    bx = memoryAGet16(ds, 0xa7d4);
    memoryASet16(ds, bx + 10, 0x0000);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a345() // 08aa:18a5 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xc5b9, 0x008c);
    if (memoryAGet16(ds, si + 10) >= 0x0980)
        goto loc_a364;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_a36d;
loc_a364: // 08aa:18c4
    ax = memoryAGet16(ds, si + 10);
    ax -= 0x0980;
    memoryASet16(ss, bp - 2, ax);
loc_a36d: // 08aa:18cd
    if (memoryAGet16(ds, 0xa7ed) != 0x0000)
        goto loc_a38b;
    if (memoryAGet16(ds, si + 12) >= 0x0500)
        goto loc_a37f;
    di = 0;
    goto loc_a39e;
loc_a37f: // 08aa:18df
    ax = memoryAGet16(ds, si + 12);
    ax -= 0x0500;
    di = ax;
    goto loc_a39e;
  // gap 2 bytes
loc_a38b: // 08aa:18eb
    if (memoryAGet16(ds, si + 40) >= 0x08c0)
        goto loc_a396;
    di = 0;
    goto loc_a39e;
loc_a396: // 08aa:18f6
    ax = memoryAGet16(ds, si + 40);
    ax -= 0x08c0;
    di = ax;
loc_a39e: // 08aa:18fe
    if (memoryAGet16(ds, 0xa52f) != 0x0000)
        goto loc_a3b1;
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1841; sub_19743(); assert(cs == 0x08aa);
    sp += 0x0004;
loc_a3b1: // 08aa:1911
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x0015;
    ax--;
    memoryASet16(ds, 0xc625, ax);
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x000e;
    ax--;
    memoryASet16(ds, 0xc623, ax);
    ax = memoryAGet16(ds, 0xc74f);
    ax -= 0x0004;
    memoryASet16(ds, 0xa801, ax);
    if ((short)memoryAGet16(ds, 0xa801) >= (short)0x0000)
        goto loc_a3db;
    memoryASet16(ds, 0xa801, 0x0000);
loc_a3db: // 08aa:193b
    ax = memoryAGet16(ds, 0xc625);
    ax += 0x0004;
    memoryASet16(ds, 0xa7ff, ax);
    if ((short)memoryAGet16(ds, 0xa7ff) >= (short)0x0000)
        goto loc_a3f1;
    memoryASet16(ds, 0xa7ff, 0x0000);
loc_a3f1: // 08aa:1951
    ax = memoryAGet16(ds, 0xc74d);
    ax -= 0x0004;
    memoryASet16(ds, 0xa7fd, ax);
    if ((short)memoryAGet16(ds, 0xa7fd) >= (short)0x0000)
        goto loc_a407;
    memoryASet16(ds, 0xa7fd, 0x0000);
loc_a407: // 08aa:1967
    ax = memoryAGet16(ds, 0xc623);
    ax += 0x0004;
    memoryASet16(ds, 0xa7fb, ax);
    if ((short)memoryAGet16(ds, 0xa7fb) >= (short)0x0000)
        goto loc_a41d;
    memoryASet16(ds, 0xa7fb, 0x0000);
loc_a41d: // 08aa:197d
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a423() // 08aa:1983 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0xa7da) == 0x0000)
        goto loc_a438;
    goto loc_a567;
loc_a438: // 08aa:1998
    ax = memoryAGet16(ds, 0xc753);
    ax += 0x0900;
    if (memoryAGet16(ds, si + 34) >= ax)
        goto loc_a454;
    ax = memoryAGet16(ds, si + 34);
    dx = memoryAGet16(ds, 0xc753);
    dx += 0x0900;
    ax -= dx;
    di = ax;
    goto loc_a475;
loc_a454: // 08aa:19b4
    ax = memoryAGet16(ds, 0xc753);
    ax += 0x0c00;
    if (memoryAGet16(ds, si + 38) <= ax)
        goto loc_a473;
    ax = memoryAGet16(ds, si + 38);
    ax += 0x0010;
    dx = memoryAGet16(ds, 0xc753);
    dx += 0x0c00;
    ax -= dx;
    di = ax;
    goto loc_a475;
loc_a473: // 08aa:19d3
    di = 0;
loc_a475: // 08aa:19d5
    ax = memoryAGet16(ds, 0xc751);
    ax += 0x0500;
    if (memoryAGet16(ds, si + 36) >= ax)
        goto loc_a492;
    ax = memoryAGet16(ds, si + 36);
    dx = memoryAGet16(ds, 0xc751);
    dx += 0x0500;
    ax -= dx;
    memoryASet16(ss, bp - 2, ax);
    goto loc_a4b4;
loc_a492: // 08aa:19f2
    ax = memoryAGet16(ds, 0xc751);
    ax += 0x0700;
    if (memoryAGet16(ds, si + 40) <= ax)
        goto loc_a4af;
    ax = memoryAGet16(ds, si + 40);
    dx = memoryAGet16(ds, 0xc751);
    dx += 0x0700;
    ax -= dx;
    memoryASet16(ss, bp - 2, ax);
    goto loc_a4b4;
loc_a4af: // 08aa:1a0f
    memoryASet16(ss, bp - 2, 0x0000);
loc_a4b4: // 08aa:1a14
    if (di)
        goto loc_a4c1;
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_a4c1;
    goto loc_a567;
loc_a4c1: // 08aa:1a21
    if ((short)di < (short)0x0100)
        goto loc_a4cc;
    di = 0x00ff;
    goto loc_a4d5;
loc_a4cc: // 08aa:1a2c
    if ((short)di > (short)0xff00)
        goto loc_a4d5;
    di = 0xff01;
loc_a4d5: // 08aa:1a35
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0100)
        goto loc_a4e3;
    memoryASet16(ss, bp - 2, 0x00ff);
    goto loc_a4ef;
loc_a4e3: // 08aa:1a43
    if ((short)memoryAGet16(ss, bp - 2) > (short)0xff00)
        goto loc_a4ef;
    memoryASet16(ss, bp - 2, 0xff01);
loc_a4ef: // 08aa:1a4f
    push(memoryAGet16(ss, bp - 2));
    push(di);
    push(cs); cs = 0x1841; sub_197ed(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x0015;
    ax--;
    memoryASet16(ds, 0xc625, ax);
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x000e;
    ax--;
    memoryASet16(ds, 0xc623, ax);
    ax = memoryAGet16(ds, 0xc74f);
    ax -= 0x0004;
    memoryASet16(ds, 0xa801, ax);
    if ((short)memoryAGet16(ds, 0xa801) >= (short)0x0000)
        goto loc_a525;
    memoryASet16(ds, 0xa801, 0x0000);
loc_a525: // 08aa:1a85
    ax = memoryAGet16(ds, 0xc625);
    ax += 0x0004;
    memoryASet16(ds, 0xa7ff, ax);
    if ((short)memoryAGet16(ds, 0xa7ff) >= (short)0x0000)
        goto loc_a53b;
    memoryASet16(ds, 0xa7ff, 0x0000);
loc_a53b: // 08aa:1a9b
    ax = memoryAGet16(ds, 0xc74d);
    ax -= 0x0004;
    memoryASet16(ds, 0xa7fd, ax);
    if ((short)memoryAGet16(ds, 0xa7fd) >= (short)0x0000)
        goto loc_a551;
    memoryASet16(ds, 0xa7fd, 0x0000);
loc_a551: // 08aa:1ab1
    ax = memoryAGet16(ds, 0xc623);
    ax += 0x0004;
    memoryASet16(ds, 0xa7fb, ax);
    if ((short)memoryAGet16(ds, 0xa7fb) >= (short)0x0000)
        goto loc_a567;
    memoryASet16(ds, 0xa7fb, 0x0000);
loc_a567: // 08aa:1ac7
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a56d() // 08aa:1acd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0xa7da) == 0x0000)
        goto loc_a582;
    goto loc_a838;
loc_a582: // 08aa:1ae2
    ax = memoryAGet16(ds, si + 34);
    if (ax < memoryAGet16(ds, 0xc74b))
        goto loc_a596;
    ax = memoryAGet16(ds, 0xc749);
    ax += 0x1400;
    if (memoryAGet16(ds, si + 38) <= ax)
        goto loc_a5a2;
loc_a596: // 08aa:1af6
    memoryASet16(ds, 0x7a70, 0x0002);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_a5a2: // 08aa:1b02
    ax = memoryAGet16(ds, 0xc747);
    ax += 0x0d00;
    if (memoryAGet16(ds, si + 40) <= ax)
        goto loc_a5da;
    ax = memoryAGet16(ds, si + 40);
    dx = memoryAGet16(ds, 0xc747);
    dx += 0x0d00;
    ax -= dx;
    memoryASet16(ds, si + 12, memoryAGet16(ds, si + 12) - ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0xc629, 0x0000);
    push(cs); cs = 0x0d6d; sub_eab9(); assert(cs == 0x08aa);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_a5da: // 08aa:1b3a
    ax = 0;
    di = ax;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0xc753);
    ax += 0x0900;
    if (memoryAGet16(ds, si + 10) >= ax)
        goto loc_a5fe;
    ax = memoryAGet16(ds, si + 10);
    dx = memoryAGet16(ds, 0xc753);
    dx += 0x0900;
    ax -= dx;
    memoryASet16(ss, bp - 2, ax);
    goto loc_a619;
loc_a5fe: // 08aa:1b5e
    ax = memoryAGet16(ds, 0xc753);
    ax += 0x0c00;
    if (memoryAGet16(ds, si + 10) <= ax)
        goto loc_a619;
    ax = memoryAGet16(ds, si + 10);
    dx = memoryAGet16(ds, 0xc753);
    dx += 0x0c00;
    ax -= dx;
    memoryASet16(ss, bp - 2, ax);
loc_a619: // 08aa:1b79
    if (memoryAGet16(ds, si + 28) != 0x0c20)
        goto loc_a64f;
    ax = memoryAGet16(ds, 0xc5b9);
    ax += memoryAGet16(ds, 0xa54c);
    if (ax <= 0x00a7)
        goto loc_a638;
    ax = 0x00a7;
    ax -= memoryAGet16(ds, 0xc5b9);
    memoryASet16(ss, bp - 4, ax);
    goto loc_a63e;
loc_a638: // 08aa:1b98
    ax = memoryAGet16(ds, 0xa54c);
    memoryASet16(ss, bp - 4, ax);
loc_a63e: // 08aa:1b9e
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xc5b9, memoryAGet16(ds, 0xc5b9) + ax);
    ax = -ax;
    cl = 0x04;
    ax <<= cl;
    di = ax;
    goto loc_a680;
loc_a64f: // 08aa:1baf
    if (memoryAGet16(ds, si + 28) != 0x0c7a)
        goto loc_a680;
    ax = memoryAGet16(ds, 0xc5b9);
    ax -= memoryAGet16(ds, 0xa54c);
    if (ax >= 0x0021)
        goto loc_a66d;
    ax = memoryAGet16(ds, 0xc5b9);
    ax += 0xffdf;
    memoryASet16(ss, bp - 4, ax);
    goto loc_a673;
loc_a66d: // 08aa:1bcd
    ax = memoryAGet16(ds, 0xa54c);
    memoryASet16(ss, bp - 4, ax);
loc_a673: // 08aa:1bd3
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xc5b9, memoryAGet16(ds, 0xc5b9) - ax);
    cl = 0x04;
    ax <<= cl;
    di = ax;
loc_a680: // 08aa:1be0
    if (memoryAGet16(ds, si + 54) != 0x0000)
        goto loc_a696;
    if (memoryAGet16(ds, si + 6) == 0x0000)
        goto loc_a696;
    if (memoryAGet16(ds, si + 28) == 0x12ec)
        goto loc_a696;
    goto loc_a747;
loc_a696: // 08aa:1bf6
    if (memoryAGet16(ds, si + 28) != 0x1328)
        goto loc_a6a0;
    goto loc_a74d;
loc_a6a0: // 08aa:1c00
    if (memoryAGet16(ds, si + 28) != 0x1346)
        goto loc_a6aa;
    goto loc_a74d;
loc_a6aa: // 08aa:1c0a
    if (memoryAGet16(ds, si + 28) != 0x1364)
        goto loc_a6b4;
    goto loc_a74d;
loc_a6b4: // 08aa:1c14
    if (memoryAGet16(ds, si + 28) != 0x1382)
        goto loc_a6be;
    goto loc_a74d;
loc_a6be: // 08aa:1c1e
    di += memoryAGet16(ds, si + 20);
    ax = memoryAGet16(ds, 0xc5b9);
    cl = 0x04;
    ax <<= cl;
    dx = memoryAGet16(ds, 0xc751);
    dx += di;
    dx += ax;
    memoryASet16(ss, bp - 8, dx);
    ax = memoryAGet16(ds, si + 40);
    if (ax == memoryAGet16(ss, bp - 8))
        goto loc_a74d;
    ax = memoryAGet16(ds, si + 40);
    if (ax >= memoryAGet16(ss, bp - 8))
        goto loc_a6ee;
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ds, si + 40);
    memoryASet16(ss, bp - 4, ax);
    goto loc_a6f7;
loc_a6ee: // 08aa:1c4e
    ax = memoryAGet16(ds, si + 40);
    ax -= memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 4, ax);
loc_a6f7: // 08aa:1c57
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x04;
    ax <<= cl;
    cl = 0x07;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 6, ax);
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x0030)
        goto loc_a710;
    memoryASet16(ss, bp - 6, 0x0030);
loc_a710: // 08aa:1c70
    ax = memoryAGet16(ss, bp - 6);
    imul16(memoryAGet16(ds, 0xa54c));
    memoryASet16(ss, bp - 6, ax);
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0010)
        goto loc_a733;
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0010)
        goto loc_a72e;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    goto loc_a733;
loc_a72e: // 08aa:1c8e
    memoryASet16(ss, bp - 6, 0x0010);
loc_a733: // 08aa:1c93
    ax = memoryAGet16(ds, si + 40);
    if (ax >= memoryAGet16(ss, bp - 8))
        goto loc_a740;
    di -= memoryAGet16(ss, bp - 6);
    goto loc_a74d;
loc_a740: // 08aa:1ca0
    di += memoryAGet16(ss, bp - 6);
    goto loc_a74d;
  // gap 2 bytes
loc_a747: // 08aa:1ca7
    memoryASet16(ds, 0xc5b9, 0x008c);
loc_a74d: // 08aa:1cad
    ax = memoryAGet16(ds, si + 40);
    ax -= 0x0200;
    dx = memoryAGet16(ds, 0xc751);
    dx += di;
    ax -= dx;
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_a767;
    di += memoryAGet16(ss, bp - 4);
loc_a767: // 08aa:1cc7
    ax = memoryAGet16(ds, si + 40);
    ax += 0x0200;
    dx = memoryAGet16(ds, 0xc751);
    dx += di;
    dx += 0x0c80;
    ax -= dx;
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x0000)
        goto loc_a785;
    di += memoryAGet16(ss, bp - 4);
loc_a785: // 08aa:1ce5
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_a792;
    if (di)
        goto loc_a792;
    goto loc_a838;
loc_a792: // 08aa:1cf2
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0100)
        goto loc_a7a0;
    memoryASet16(ss, bp - 2, 0x00ff);
    goto loc_a7ac;
loc_a7a0: // 08aa:1d00
    if ((short)memoryAGet16(ss, bp - 2) > (short)0xff00)
        goto loc_a7ac;
    memoryASet16(ss, bp - 2, 0xff01);
loc_a7ac: // 08aa:1d0c
    if ((short)di < (short)0x0100)
        goto loc_a7b7;
    di = 0x00ff;
    goto loc_a7c0;
loc_a7b7: // 08aa:1d17
    if ((short)di > (short)0xff00)
        goto loc_a7c0;
    di = 0xff01;
loc_a7c0: // 08aa:1d20
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1841; sub_197ed(); assert(cs == 0x08aa);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x0015;
    ax--;
    memoryASet16(ds, 0xc625, ax);
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x000e;
    ax--;
    memoryASet16(ds, 0xc623, ax);
    ax = memoryAGet16(ds, 0xc74f);
    ax -= 0x0004;
    memoryASet16(ds, 0xa801, ax);
    if ((short)memoryAGet16(ds, 0xa801) >= (short)0x0000)
        goto loc_a7f6;
    memoryASet16(ds, 0xa801, 0x0000);
loc_a7f6: // 08aa:1d56
    ax = memoryAGet16(ds, 0xc625);
    ax += 0x0004;
    memoryASet16(ds, 0xa7ff, ax);
    if ((short)memoryAGet16(ds, 0xa7ff) >= (short)0x0000)
        goto loc_a80c;
    memoryASet16(ds, 0xa7ff, 0x0000);
loc_a80c: // 08aa:1d6c
    ax = memoryAGet16(ds, 0xc74d);
    ax -= 0x0004;
    memoryASet16(ds, 0xa7fd, ax);
    if ((short)memoryAGet16(ds, 0xa7fd) >= (short)0x0000)
        goto loc_a822;
    memoryASet16(ds, 0xa7fd, 0x0000);
loc_a822: // 08aa:1d82
    ax = memoryAGet16(ds, 0xc623);
    ax += 0x0004;
    memoryASet16(ds, 0xa7fb, ax);
    if ((short)memoryAGet16(ds, 0xa7fb) >= (short)0x0000)
        goto loc_a838;
    memoryASet16(ds, 0xa7fb, 0x0000);
loc_a838: // 08aa:1d98
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a83e() // 08aa:1d9e +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0;
    goto loc_a86f;
loc_a846: // 08aa:1da6
    ax = si;
    dx = 0x004c;
    imul16(dx);
    ax += 0xa853;
    push(ax);
    ax = si;
    dx = 0x004c;
    imul16(dx);
    bx = ax;
    ax = pop();
    memoryASet16(ds, bx + 43089, ax);
    ax = si;
    dx = 0x004c;
    imul16(dx);
    bx = ax;
    memoryASet16(ds, bx + 43087, 0x0000);
    si++;
loc_a86f: // 08aa:1dcf
    if ((short)si < (short)0x0064)
        goto loc_a846;
    memoryASet16(ds, 0xc5b5, 0x0000);
    memoryASet16(ds, 0xa803, 0xa807);
    memoryASet16(ds, 0xa805, 0x0000);
    memoryASet16(ds, 0xc5b7, 0x0000);
    ax = 0;
    push(ax);
    push(cs);
    sub_a8b1();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, 0xa7d6, ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_a8b1();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, 0xa7d4, ax);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a8b1() // 08aa:1e11 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xa803) != 0x0000)
        goto loc_a8d8;
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_a8cc;
    memoryASet16(ds, 0xa7d8, 0xc5d3);
    ax = 0xffff;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_a8cc: // 08aa:1e2c
    ax = 0x067f;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_a8d8: // 08aa:1e38
    ax = memoryAGet16(ds, 0xa803);
    memoryASet16(ds, 0xa7d8, ax);
    bx = memoryAGet16(ds, 0xa7d8);
    ax = memoryAGet16(ds, bx + 74);
    memoryASet16(ds, 0xa803, ax);
    ax = 0x004c;
    push(ax);
    ax = 0;
    push(ax);
    push(bx);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x08aa);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa805) == 0x0000)
        goto loc_a909;
    bx = memoryAGet16(ds, 0xa805);
    ax = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, bx + 72, ax);
loc_a909: // 08aa:1e69
    bx = memoryAGet16(ds, 0xa7d8);
    ax = memoryAGet16(ds, 0xa805);
    memoryASet16(ds, bx + 74, ax);
    memoryASet16(ds, bx + 2, 0x0001);
    memoryASet16(ds, bx + 6, 0x0001);
    ax = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, 0xa805, ax);
    memoryASet16(ds, 0xc5b7, memoryAGet16(ds, 0xc5b7) + 1);
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a92b() // 08aa:1e8b +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if (si != memoryAGet16(ds, 0xa7d6))
        goto loc_a944;
    ax = 0x06a5;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_a944: // 08aa:1ea4
    ax = si;
    ax += 0x0046;
    push(ax);
    push(cs); cs = 0x1841; sub_19c6b(); assert(cs == 0x08aa);
    sp += 0x0002;
    if (memoryAGet16(ds, si) != 0x0021)
        goto loc_a965;
    ax = si;
    ax += 0x0042;
    push(ax);
    push(cs); cs = 0x1841; sub_19c6b(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_a965: // 08aa:1ec5
    if (si != memoryAGet16(ds, 0xa805))
        goto loc_a973;
    ax = memoryAGet16(ds, si + 74);
    memoryASet16(ds, 0xa805, ax);
    goto loc_a97c;
loc_a973: // 08aa:1ed3
    ax = memoryAGet16(ds, si + 74);
    bx = memoryAGet16(ds, si + 72);
    memoryASet16(ds, bx + 74, ax);
loc_a97c: // 08aa:1edc
    ax = memoryAGet16(ds, si + 72);
    bx = memoryAGet16(ds, si + 74);
    memoryASet16(ds, bx + 72, ax);
    ax = memoryAGet16(ds, 0xa803);
    memoryASet16(ds, si + 74, ax);
    memoryASet16(ds, 0xa803, si);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a992() // 08aa:1ef2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    flags.carry = (memoryAGet16(ds, 0x7a50) + ax) >= 0x10000;
    memoryASet16(ds, 0x7a50, memoryAGet16(ds, 0x7a50) + ax);
    memoryASet16(ds, 0x7a52, memoryAGet16(ds, 0x7a52) + (0x0000 + flags.carry));
    if (memoryAGet16(ds, 0x3bd6) != 0x0000)
        goto loc_a9e5;
    ax = memoryAGet16(ds, 0x7a52);
    dx = memoryAGet16(ds, 0x7a50);
    if ((short)ax < (short)memoryAGet16(ds, 0x7a56))
        goto loc_a9e5;
    if (ax != memoryAGet16(ds, 0x7a56))
        goto loc_a9bd;
    if (dx < memoryAGet16(ds, 0x7a54))
        goto loc_a9e5;
loc_a9bd: // 08aa:1f1d
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x08aa);
    sp += 0x0002;
    memoryASet16(ds, 0x7a6a, memoryAGet16(ds, 0x7a6a) + 1);
    cx = 0;
    bx = 0x0002;
    dx = memoryAGet16(ds, 0x7a56);
    ax = memoryAGet16(ds, 0x7a54);
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x08aa);
    memoryASet16(ds, 0x7a56, dx);
    memoryASet16(ds, 0x7a54, ax);
loc_a9e5: // 08aa:1f45
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_a9e7() // 08aa:1f47 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0xa7c6;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x164d; sub_16e8e(); assert(cs == 0x08aa);
    sp += 0x0004;
    if (memoryAGet16(ds, 0xa7d0) == 0xffff)
        goto loc_aa06;
    memoryASet16(ds, 0xc5bd, 0x0000);
loc_aa06: // 08aa:1f66
    if (memoryAGet16(ds, 0xc643) == 0x0000)
        goto loc_aa54;
    if (memoryAGet16(ds, 0x3bd6) != 0x0000)
        goto loc_aa54;
    ax = memoryAGet16(ds, 0xc63b);
    memoryASet16(ds, 0xc5c9, ax);
    ax = memoryAGet16(ds, 0xc63d);
    memoryASet16(ds, 0xc5c5, ax);
    ax = memoryAGet16(ds, 0xc63f);
    memoryASet16(ds, 0xc5c1, ax);
    if (memoryAGet16(ds, 0xc5c9) != 0x0000)
        goto loc_aa33;
    memoryASet16(ds, 0xc5c7, 0x0000);
loc_aa33: // 08aa:1f93
    if (memoryAGet16(ds, 0xc5c5) != 0x0000)
        goto loc_aa40;
    memoryASet16(ds, 0xc5c3, 0x0000);
loc_aa40: // 08aa:1fa0
    if (memoryAGet16(ds, 0xc5c1) == 0x0000)
        goto loc_aa4a;
    goto loc_ab30;
loc_aa4a: // 08aa:1faa
    memoryASet16(ds, 0xc5bf, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_aa54: // 08aa:1fb4
    if (memoryAGet16(ds, 0xc5cf) != 0x0000)
        goto loc_aa65;
    if (memoryAGet16(ds, 0x3bd6) != 0x0000)
        goto loc_aa65;
    goto loc_aaed;
loc_aa65: // 08aa:1fc5
    if (memoryAGet16(ds, 0xa7c6) == 0x0000)
        goto loc_aa89;
    if (memoryAGet16(ds, 0xa7c8) == 0x0000)
        goto loc_aa89;
    memoryASet16(ds, 0xc5c1, 0x0001);
    ax = 0;
    memoryASet16(ds, 0xc5c3, ax);
    memoryASet16(ds, 0xc5c7, ax);
    memoryASet16(ds, 0xc5c5, ax);
    memoryASet16(ds, 0xc5c9, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_aa89: // 08aa:1fe9
    ax = 0;
    memoryASet16(ds, 0xc5bf, ax);
    memoryASet16(ds, 0xc5c1, ax);
    if (memoryAGet16(ds, 0xa7c6) == 0x0000)
        goto loc_aaa0;
    memoryASet16(ds, 0xc5c9, 0x0001);
    goto loc_aaa8;
loc_aaa0: // 08aa:2000
    ax = 0;
    memoryASet16(ds, 0xc5c7, ax);
    memoryASet16(ds, 0xc5c9, ax);
loc_aaa8: // 08aa:2008
    if (memoryAGet16(ds, 0xa7c8) == 0x0000)
        goto loc_aacc;
    if ((short)memoryAGet16(ds, 0xa7f1) > (short)0x0008)
        goto loc_aac2;
    ax = memoryAGet16(ds, 0xa7f1);
    ax += memoryAGet16(ds, 0xa54c);
    memoryASet16(ds, 0xa7f1, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_aac2: // 08aa:2022
    memoryASet16(ds, 0xc5c5, 0x0001);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_aacc: // 08aa:202c
    if (memoryAGet16(ds, 0xa7f1) == 0x0000)
        goto loc_aadb;
    memoryASet16(ds, 0xc5c5, 0x0001);
    goto loc_aae3;
loc_aadb: // 08aa:203b
    ax = 0;
    memoryASet16(ds, 0xc5c3, ax);
    memoryASet16(ds, 0xc5c5, ax);
loc_aae3: // 08aa:2043
    memoryASet16(ds, 0xa7f1, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_aaed: // 08aa:204d
    ax = memoryAGet16(ds, 0xa7c6);
    memoryASet16(ds, 0xc5c9, ax);
    ax = memoryAGet16(ds, 0xa7c8);
    memoryASet16(ds, 0xc5c5, ax);
    al = memoryAGet(ds, 0x0394);
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    ax = memoryAGet16(ds, bx + 50759);
    memoryASet16(ds, 0xc5c1, ax);
    if (memoryAGet16(ds, 0xc5c9) != 0x0000)
        goto loc_ab16;
    memoryASet16(ds, 0xc5c7, 0x0000);
loc_ab16: // 08aa:2076
    if (memoryAGet16(ds, 0xc5c5) != 0x0000)
        goto loc_ab23;
    memoryASet16(ds, 0xc5c3, 0x0000);
loc_ab23: // 08aa:2083
    if (memoryAGet16(ds, 0xc5c1) != 0x0000)
        goto loc_ab30;
    memoryASet16(ds, 0xc5bf, 0x0000);
loc_ab30: // 08aa:2090
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ab32() // 08aa:2092 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(cs); cs = 0x1a61; sub_1b125(); assert(cs == 0x08aa);
    si = 0;
    goto loc_ab5f;
loc_ab3f: // 08aa:209f
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 51349) == 0x0000)
        goto loc_ab5e;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0xc895;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x08aa);
    sp += 0x0004;
loc_ab5e: // 08aa:20be
    si++;
loc_ab5f: // 08aa:20bf
    if ((short)si < (short)0x0006)
        goto loc_ab3f;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ab67() // 08aa:20c7 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (si < 0x0014)
        goto loc_ab88;
    if (si == 0xffff)
        goto loc_ab88;
    ax = 0x06cc;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_ab88: // 08aa:20e8
    push(cs); cs = 0x1a61; sub_1b125(); assert(cs == 0x08aa);
    if (si != 0xffff)
        goto loc_ab97;
    di = 0x0005;
    goto loc_ab9f;
loc_ab97: // 08aa:20f7
    bx = si;
    bx <<= 1;
    di = memoryAGet16(ds, bx + 918);
loc_ab9f: // 08aa:20ff
    if (di != 0xffff)
        goto loc_aba7;
    goto loc_ac60;
loc_aba7: // 08aa:2107
    if (memoryAGet16(ds, 0xc633) == 0x0001)
        goto loc_abb1;
    goto loc_ac60;
loc_abb1: // 08aa:2111
    ax = 0;
    push(ax);
    push(cs); cs = 0x174b; sub_18414(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = di;
    ax += 0x009c;
    push(ax);
    push(cs); cs = 0x1493; sub_152f2(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x174b; sub_18414(); assert(cs == 0x08aa);
    sp += 0x0002;
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_ac4d;
    memoryASet16(ds, 0xa7ef, 0x0000);
    if (memoryAGet16(ds, 0x3bd6) != 0x0000)
        goto loc_ac60;
    ax = 0x0008;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x08aa);
    sp += 0x0004;
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x0014);
    ax = 0x06ec;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x08aa);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x08aa);
    ax = memoryAGet16(ds, 0xc757);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_ac21;
    push(cs); cs = 0x1ef3; sub_1f082(); assert(cs == 0x08aa);
loc_ac21: // 08aa:2181
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x08aa);
    ax = 0;
    push(ax);
    dx = 0x00d2;
    push(ax);
    push(dx);
    push(cs); cs = 0x164d; sub_17462(); assert(cs == 0x08aa);
    sp += 0x0006;
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_ac60;
    push(cs); cs = 0x1ef3; sub_1f09f(); assert(cs == 0x08aa);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 6 bytes
loc_ac4d: // 08aa:21ad
    bx = di;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 51349));
    ax = 0;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b172(); assert(cs == 0x08aa);
    sp += 0x0004;
loc_ac60: // 08aa:21c0
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ac66() // 08aa:21c6 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(memoryAGet16(ds, 0x7a68));
    push(cs);
    sub_ab67();
    sp += 0x0002;
    ax = 0;
    memoryASet16(ds, 0xc5c7, ax);
    memoryASet16(ds, 0xc5bd, ax);
    memoryASet16(ds, 0xc5c3, ax);
    memoryASet16(ds, 0xc5bf, ax);
    memoryASet16(ds, 0xc631, 0x0001);
    memoryASet16(ds, 0x7a70, 0x0000);
    ax = 0;
    memoryASet16(ds, 0xa7f1, ax);
    memoryASet16(ds, 0xa7da, ax);
    memoryASet16(ds, 0xc5d1, ax);
    push(memoryAGet16(ds, 0xa7d6));
    push(cs);
    sub_a345();
    sp += 0x0002;
    if (memoryAGet16(ds, 0x3bd6) == 0x0000)
        goto loc_acb9;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1eef; sub_1eef2(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_acc5;
loc_acb9: // 08aa:2219
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1eef; sub_1eef2(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_acc5: // 08aa:2225
    ax = 0x0003;
    memoryASet16(ds, 0xa54c, ax);
    dx = 0;
    memoryASet16(ds, 0xa54a, dx);
    memoryASet16(ds, 0xa548, ax);
    memoryASet16(ds, 0xa53f, dx);
    memoryASet16(ds, 0xa53d, ax);
loc_acdb: // 08aa:223b
    push(cs);
    sub_a9e7();
    ax = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, 0xc5bb, ax);
    goto loc_add4;
loc_ace8: // 08aa:2248
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) != 0x0000)
        goto loc_ad20;
    ax = memoryAGet16(ds, 0xc74f);
    ax--;
    if (memoryAGet16(ds, bx + 48) < ax)
        goto loc_ad20;
    ax = memoryAGet16(ds, 0xc625);
    ax++;
    if (memoryAGet16(ds, bx + 44) > ax)
        goto loc_ad20;
    ax = memoryAGet16(ds, 0xc623);
    ax++;
    if (memoryAGet16(ds, bx + 46) > ax)
        goto loc_ad20;
    ax = memoryAGet16(ds, 0xc74d);
    ax--;
    if (memoryAGet16(ds, bx + 50) < ax)
        goto loc_ad20;
    memoryASet16(ds, bx + 4, 0x0001);
    memoryASet16(ds, bx + 2, 0x0001);
loc_ad20: // 08aa:2280
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) != 0x0000)
        goto loc_ad2d;
    goto loc_adca;
loc_ad2d: // 08aa:228d
    ax = memoryAGet16(ds, bx + 48);
    if (ax < memoryAGet16(ds, 0xa801))
        goto loc_ad51;
    ax = memoryAGet16(ds, bx + 44);
    if (ax > memoryAGet16(ds, 0xa7ff))
        goto loc_ad51;
    ax = memoryAGet16(ds, bx + 46);
    if (ax > memoryAGet16(ds, 0xa7fb))
        goto loc_ad51;
    ax = memoryAGet16(ds, bx + 50);
    if (ax >= memoryAGet16(ds, 0xa7fd))
        goto loc_adbe;
loc_ad51: // 08aa:22b1
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) != 0x0003)
        goto loc_ad65;
    push(bx);
    push(cs);
    sub_a92b();
    sp += 0x0002;
    goto loc_adca;
loc_ad65: // 08aa:22c5
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) == 0x0002)
        goto loc_adbe;
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x08aa);
    dx = memoryAGet16(ds, 0xa54c);
    dx <<= 1;
    if (ax < dx)
        goto loc_ad8c;
    if (memoryAGet16(ds, 0xc757) != 0x0000)
        goto loc_ad8c;
    if (memoryAGet16(ds, 0xa53b) == 0x0000)
        goto loc_adbe;
loc_ad8c: // 08aa:22ec
    ax = memoryAGet16(ds, 0xc5bb);
    ax += 0x0046;
    push(ax);
    push(cs); cs = 0x1841; sub_19c6b(); assert(cs == 0x08aa);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx) != 0x0021)
        goto loc_adb3;
    ax = memoryAGet16(ds, 0xc5bb);
    ax += 0x0042;
    push(ax);
    push(cs); cs = 0x1841; sub_19c6b(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_adb3: // 08aa:2313
    bx = memoryAGet16(ds, 0xc5bb);
    memoryASet16(ds, bx + 2, 0x0000);
    goto loc_adca;
loc_adbe: // 08aa:231e
    push(memoryAGet16(ds, 0xc5bb));
    push(cs); cs = 0x0bc9; sub_cd27(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_adca: // 08aa:232a
    bx = memoryAGet16(ds, 0xc5bb);
    ax = memoryAGet16(ds, bx + 72);
    memoryASet16(ds, 0xc5bb, ax);
loc_add4: // 08aa:2334
    if (memoryAGet16(ds, 0xc5bb) == 0x0000)
        goto loc_adde;
    goto loc_ace8;
loc_adde: // 08aa:233e
    if (memoryAGet16(ds, 0x7a6e) == 0x0000)
        goto loc_adf1;
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0d6d; sub_ed9d(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_adf1: // 08aa:2351
    ax = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, 0xc5bb, ax);
    goto loc_ae80;
loc_adfa: // 08aa:235a
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) == 0x0000)
        goto loc_ae76;
    si = memoryAGet16(ds, bx + 72);
    goto loc_ae72;
loc_ae09: // 08aa:2369
    if (memoryAGet16(ds, si + 2) == 0x0000)
        goto loc_ae6f;
    bx = memoryAGet16(ds, 0xc5bb);
    ax = memoryAGet16(ds, bx + 38);
    if (ax <= memoryAGet16(ds, si + 34))
        goto loc_ae6f;
    ax = memoryAGet16(ds, bx + 34);
    if (ax >= memoryAGet16(ds, si + 38))
        goto loc_ae6f;
    ax = memoryAGet16(ds, bx + 36);
    if (ax >= memoryAGet16(ds, si + 40))
        goto loc_ae6f;
    ax = memoryAGet16(ds, bx + 40);
    if (ax <= memoryAGet16(ds, si + 36))
        goto loc_ae6f;
    bx = memoryAGet16(ds, bx + 28);
    ax = memoryAGet16(ds, bx + 20);
    ax |= memoryAGet16(ds, bx + 22);
    if (!ax)
        goto loc_ae50;
    push(si);
    push(memoryAGet16(ds, 0xc5bb));
    bx = memoryAGet16(ds, 0xc5bb);
    bx = memoryAGet16(ds, bx + 28);
    push(cs); cs = memoryAGet16(ds, bx + 20 + 2); callIndirect(cs, memoryAGet16(ds, bx + 20)); assert(cs == 0x08aa); // 08aa:23aa;
    sp += 0x0004;
loc_ae50: // 08aa:23b0
    bx = memoryAGet16(ds, si + 28);
    ax = memoryAGet16(ds, bx + 20);
    ax |= memoryAGet16(ds, bx + 22);
    if (!ax)
        goto loc_ae66;
    push(memoryAGet16(ds, 0xc5bb));
    push(si);
    push(cs); cs = memoryAGet16(ds, bx + 20 + 2); callIndirect(cs, memoryAGet16(ds, bx + 20)); assert(cs == 0x08aa); // 08aa:23c0;
    sp += 0x0004;
loc_ae66: // 08aa:23c6
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx) == 0x0000)
        goto loc_ae76;
loc_ae6f: // 08aa:23cf
    si = memoryAGet16(ds, si + 72);
loc_ae72: // 08aa:23d2
    if (si)
        goto loc_ae09;
loc_ae76: // 08aa:23d6
    bx = memoryAGet16(ds, 0xc5bb);
    ax = memoryAGet16(ds, bx + 72);
    memoryASet16(ds, 0xc5bb, ax);
loc_ae80: // 08aa:23e0
    if (memoryAGet16(ds, 0xc5bb) == 0x0000)
        goto loc_ae8a;
    goto loc_adfa;
loc_ae8a: // 08aa:23ea
    if (memoryAGet16(ds, 0xa7ed) == 0x0000)
        goto loc_ae9f;
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0d6d; sub_efb9(); assert(cs == 0x08aa);
    sp += 0x0002;
    goto loc_aeab;
loc_ae9f: // 08aa:23ff
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0f7c; sub_10069(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_aeab: // 08aa:240b
    ax = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, 0xc5bb, ax);
    goto loc_af18;
loc_aeb3: // 08aa:2413
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 2) == 0x0000)
        goto loc_af0e;
    bx = memoryAGet16(ds, 0xc5bb);
    ax = memoryAGet16(ds, 0xa7e2);
    ax--;
    if (memoryAGet16(ds, bx + 50) < ax)
        goto loc_aee6;
    if (memoryAGet16(ds, bx) != 0x0002)
        goto loc_aed7;
    memoryASet16(ds, 0x7a70, 0x0001);
    goto loc_af0e;
loc_aed7: // 08aa:2437
    push(memoryAGet16(ds, 0xc5bb));
    push(cs);
    sub_a92b();
    sp += 0x0002;
    goto loc_af0e;
  // gap 2 bytes
loc_aee6: // 08aa:2446
    bx = memoryAGet16(ds, 0xc5bb);
    if (memoryAGet16(ds, bx + 4) == 0x0000)
        goto loc_af0e;
    bx = memoryAGet16(ds, bx + 28);
    ax = memoryAGet16(ds, bx + 24);
    ax |= memoryAGet16(ds, bx + 26);
    if (!ax)
        goto loc_af0e;
    bx = memoryAGet16(ds, 0xc5bb);
    memoryASet16(ds, bx + 4, 0x0000);
    push(bx);
    bx = memoryAGet16(ds, bx + 28);
    push(cs); cs = memoryAGet16(ds, bx + 24 + 2); callIndirect(cs, memoryAGet16(ds, bx + 24)); assert(cs == 0x08aa); // 08aa:2468;
    sp += 0x0002;
loc_af0e: // 08aa:246e
    bx = memoryAGet16(ds, 0xc5bb);
    ax = memoryAGet16(ds, bx + 72);
    memoryASet16(ds, 0xc5bb, ax);
loc_af18: // 08aa:2478
    if (memoryAGet16(ds, 0xc5bb) != 0x0000)
        goto loc_aeb3;
    if (memoryAGet16(ds, 0xa7ed) == 0x0000)
        goto loc_af3a;
    if (memoryAGet16(ds, 0xa7ed) == 0x0011)
        goto loc_af3a;
    push(memoryAGet16(ds, 0xa7d6));
    push(cs);
    sub_a56d();
    sp += 0x0002;
    goto loc_af45;
loc_af3a: // 08aa:249a
    push(memoryAGet16(ds, 0xa7d6));
    push(cs);
    sub_a423();
    sp += 0x0002;
loc_af45: // 08aa:24a5
    push(memoryAGet16(ds, 0xa7d4));
    push(cs); cs = 0x0f7c; sub_f90f(); assert(cs == 0x08aa);
    sp += 0x0002;
    if (memoryAGet16(ds, 0xa53b) == 0x0000)
        goto loc_af5e;
    memoryASet16(ds, 0xa53b, 0x0000);
loc_af5e: // 08aa:24be
    push(cs); cs = 0x1841; sub_1a07e(); assert(cs == 0x08aa);
    if (memoryAGet16(ds, 0xc5d1) == 0x0000)
        goto loc_af7e;
    ax = memoryAGet16(ds, 0xc5d1);
    ax -= memoryAGet16(ds, 0xa54c);
    memoryASet16(ds, 0xc5d1, ax);
    if ((short)ax >= 0)
        goto loc_af7e;
    memoryASet16(ds, 0xc5d1, 0x0000);
loc_af7e: // 08aa:24de
    if (memoryAGet16(ds, 0xc62d) == 0x0000)
        goto loc_af9f;
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x08aa);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
loc_af9f: // 08aa:24ff
    if (memoryAGet16(ds, 0xa7f9) == 0x0000)
        goto loc_afb2;
    push(memoryAGet16(ds, 0xa7f9));
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x08aa);
    sp += 0x0002;
loc_afb2: // 08aa:2512
    if (memoryAGet16(ds, 0x3bd6) != 0x0002)
        goto loc_afdf;
    if (memoryAGet16(ds, 0xc757) != 0x0000)
        goto loc_aff2;
    push(cs); cs = 0x164d; sub_17413(); assert(cs == 0x08aa);
    if (!ax)
        goto loc_aff2;
    memoryASet16(ds, 0x7a70, 0x0002);
    if (memoryAGet(ds, 0xa545) == 0x3b)
        goto loc_aff2;
    memoryASet(ds, 0xa545, 0x39);
    goto loc_aff2;
  // gap 2 bytes
loc_afdf: // 08aa:253f
    if (memoryAGet16(ds, 0x3bd6) != 0x0003)
        goto loc_afee;
    memoryASet16(ds, 0x7a70, 0x0002);
    goto loc_aff2;
loc_afee: // 08aa:254e
    push(cs);
    sub_9775();
loc_aff2: // 08aa:2552
    if (memoryAGet16(ds, 0xc66b) == 0x0000)
        goto loc_b013;
    if (memoryAGet16(ds, 0xc6a9) == 0x0000)
        goto loc_b013;
    if (memoryAGet16(ds, 0xc687) == 0x0000)
        goto loc_b013;
    memoryASet16(ds, 0x7a5e, 0x0007);
    memoryASet16(ds, 0x7a70, 0x0003);
loc_b013: // 08aa:2573
    if (memoryAGet16(ds, 0x7a70) != 0x0000)
        goto loc_b01d;
    goto loc_acdb;
loc_b01d: // 08aa:257d
    memoryASet16(ds, 0xc631, 0x0000);
    push(cs);
    sub_ab32();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b02a() // 0b02:000a +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
loc_b02d: // 0b02:000d
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    if (memoryAGet(es, bx) != 0x0a)
        goto loc_b02d;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b03d() // 0b02:001d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0052;
    push(si);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    goto loc_b05e;
loc_b050: // 0b02:0030
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
loc_b05e: // 0b02:003e
    if ((char)memoryAGet(ss, bp - 1) < (char)0x30)
        goto loc_b050;
    if ((char)memoryAGet(ss, bp - 1) > (char)0x39)
        goto loc_b050;
    ax = bp - 82;
    si = ax;
loc_b06f: // 0b02:004f
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, si, al);
    si++;
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    if ((char)memoryAGet(ss, bp - 1) < (char)0x30)
        goto loc_b08f;
    if ((char)memoryAGet(ss, bp - 1) <= (char)0x39)
        goto loc_b06f;
loc_b08f: // 0b02:006f
    memoryASet(ds, si, 0x00);
    ax = bp - 82;
    push(ax);
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x0b02);
    sp += 0x0002;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b0a3() // 0b02:0083 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8ab, ax);
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8ad, ax);
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8a9, ax);
    push(cs);
    sub_b02a();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b0c1() // 0b02:00a1 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8ab, ax);
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8ad, ax);
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8a9, ax);
    push(cs);
    sub_b03d();
    memoryASet16(ds, 0xc8a7, ax);
    push(cs);
    sub_b02a();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b148() // 0b02:0128 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_332b(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax -= 0x0042;
    bx = ax;
    if (bx <= 0x0012)
        goto loc_b172;
    goto loc_b34b;
loc_b172: // 0b02:0152
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 817)); // 0b02:0154;
  // gap 466 bytes
loc_b34b: // 0b02:032b
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b377() // 0b02:0357 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ds, 0xc8af, memoryAGet16(ds, 0xc8af) + 1);
    ax = memoryAGet16(ds, 0xc8af);
    if (ax != 0x0012)
        goto loc_b3c6;
    memoryASet16(ds, 0xc8a5, 0x0001);
loc_b38f: // 0b02:036f
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    if (memoryAGet(es, bx) != 0x5e)
        goto loc_b3c0;
    al = memoryAGet(es, bx + 1);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_332b(); assert(cs == 0x0b02);
    sp += 0x0002;
    memoryASet(ss, bp - 1, al);
    if (memoryAGet(ss, bp - 1) == 0x45)
        goto loc_b3b6;
    if (memoryAGet(ss, bp - 1) != 0x50)
        goto loc_b3c0;
loc_b3b6: // 0b02:0396
    memoryASet16(ds, 0xc8a5, 0x0001);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_b3c0: // 0b02:03a0
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    goto loc_b38f;
loc_b3c6: // 0b02:03a6
    bx = memoryAGet16(ds, 0xc8af);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 51417);
    memoryASet16(ds, 0x6020, ax);
    memoryASet16(ds, 0x6022, memoryAGet16(ds, 0x6022) + 0x000a);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b3dc() // 0b02:03bc +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    if (memoryAGet(ss, bp - 1) != 0x0a)
        goto loc_b3fa;
    push(cs);
    sub_b377();
loc_b3fa: // 0b02:03da
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b3fe() // 0b02:03de +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0056;
    push(si);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 86, al);
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    si = 0x0001;
    goto loc_b43a;
loc_b418: // 0b02:03f8
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp + si + -86, al);
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    si++;
    ax = si;
    if (ax != 0x0050)
        goto loc_b43a;
    ax = 0x0720;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x0b02);
    sp += 0x0002;
loc_b43a: // 0b02:041a
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    if ((char)memoryAGet(es, bx) > (char)0x20)
        goto loc_b418;
    memoryASet(ss, bp + si + -86, 0x00);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ss);
    ax = bp - 86;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f6bd(); assert(cs == 0x0b02);
    sp += 0x0008;
    goto loc_b46a;
loc_b45f: // 0b02:043f
    push(cs);
    sub_b377();
    if (memoryAGet16(ds, 0xc8a5) != 0x0000)
        goto loc_b4ad;
loc_b46a: // 0b02:044a
    bx = memoryAGet16(ds, 0xc8af);
    bx <<= 1;
    ax = memoryAGet16(ds, 0x6020);
    ax += memoryAGet16(ss, bp - 2);
    if (memoryAGet16(ds, bx + 51381) < ax)
        goto loc_b45f;
    ax = memoryAGet16(ds, 0x6020);
    ax += memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 6, ax);
    push(ss);
    ax = bp - 86;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0x6020, ax);
    goto loc_b4a3;
loc_b49a: // 0b02:047a
    memoryASet16(ds, 0x6020, memoryAGet16(ds, 0x6020) + 0x0007);
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
loc_b4a3: // 0b02:0483
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    if (memoryAGet(es, bx) == 0x20)
        goto loc_b49a;
loc_b4ad: // 0b02:048d
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b4b2() // 0b02:0492 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    al = memoryAGet(ds, 0x6025);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0x6025, 0x0a);
    ax = 0x0004;
    push(ax);
    ax = 0x00c8;
    push(ax);
    ax = 0x0140;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x0b02);
    sp += 0x000a;
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0051;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0052;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0138;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    if (!di)
        goto loc_b533;
    ax = 0x0053;
    push(ax);
    ax = 0x00b0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    goto loc_b547;
loc_b533: // 0b02:0513
    ax = 0x0054;
    push(ax);
    ax = 0x00c0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
loc_b547: // 0b02:0527
    si = 0;
    goto loc_b560;
loc_b54b: // 0b02:052b
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 51417, 0x000a);
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 51381, 0x0136);
    si++;
loc_b560: // 0b02:0540
    if ((short)si < (short)0x0012)
        goto loc_b54b;
    memoryASet16(ds, 0x6020, 0x000a);
    memoryASet16(ds, 0x6022, 0x000a);
    memoryASet16(ds, 0xc8af, 0x0000);
    memoryASet16(ds, 0xc8a5, 0x0000);
    goto loc_b583;
loc_b57f: // 0b02:055f
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
loc_b583: // 0b02:0563
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    if ((char)memoryAGet(es, bx) <= (char)0x20)
        goto loc_b57f;
    if (memoryAGet(es, bx) != 0x5e)
        goto loc_b5ad;
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_332b(); assert(cs == 0x0b02);
    sp += 0x0002;
    if (ax == 0x0050)
        goto loc_b5bb;
loc_b5ad: // 0b02:058d
    ax = 0x0740;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x0b02);
    sp += 0x0002;
    goto loc_b5bb;
loc_b5bb: // 0b02:059b
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    if (memoryAGet(es, bx) != 0x0a)
        goto loc_b5bb;
loc_b5c9: // 0b02:05a9
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 3, al);
    if (memoryAGet(ss, bp - 3) != 0x5e)
        goto loc_b5df;
    push(cs);
    sub_b148();
    goto loc_b5ef;
loc_b5df: // 0b02:05bf
    if ((char)memoryAGet(ss, bp - 3) > (char)0x20)
        goto loc_b5eb;
    push(cs);
    sub_b3dc();
    goto loc_b5ef;
loc_b5eb: // 0b02:05cb
    push(cs);
    sub_b3fe();
loc_b5ef: // 0b02:05cf
    if (memoryAGet16(ds, 0xc8a5) == 0x0000)
        goto loc_b5c9;
    memoryASet16(ds, 0xc8ff, memoryAGet16(ds, 0xc8ff) + 1);
    if (di)
        goto loc_b601;
    goto loc_b687;
loc_b601: // 0b02:05e1
    ax = 0x0764;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x7a74;
    push(ax);
    push(memoryAGet16(ds, 0xc8ff));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x7a74;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = 0x0768;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = 0x7a74;
    push(ax);
    push(memoryAGet16(ds, 0xc8fd));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x7a74;
    push(ax);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x0b02);
    sp += 0x0004;
    memoryASet(ds, 0x6025, 0x08);
    memoryASet16(ds, 0x6022, 0x00ba);
    memoryASet16(ds, 0x6020, 0x00da);
    push(ds);
    ax = 0x7a88;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x0b02);
    sp += 0x0004;
loc_b687: // 0b02:0667
    al = memoryAGet(ss, bp - 2);
    memoryASet(ds, 0x6025, al);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b6c1() // 0b02:06a1 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    ax = memoryAGet16(ds, 0xc8b3);
    dx = memoryAGet16(ds, 0xc8b1);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    dx += 0x7530;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = 0;
    memoryASet16(ds, 0xc8ff, ax);
    memoryASet16(ds, 0xc8fd, ax);
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, 0x0050, memoryAGet(es, 0x0050) | dl);
    es = ax;
    memoryASet(es, 0x0051, memoryAGet(es, 0x0051) | dl);
    es = ax;
    memoryASet(es, 0x0052, memoryAGet(es, 0x0052) | dl);
    es = ax;
    memoryASet(es, 0x0053, memoryAGet(es, 0x0053) | dl);
    es = ax;
    memoryASet(es, 0x0054, memoryAGet(es, 0x0054) | dl);
loc_b710: // 0b02:06f0
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    if (memoryAGet(es, bx) == 0x5e)
        goto loc_b71d;
    goto loc_b79d;
loc_b71d: // 0b02:06fd
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
    bx = memoryAGet16(ds, 0xc8b1); es = memoryAGet16(ds, 0xc8b1 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_332b(); assert(cs == 0x0b02);
    sp += 0x0002;
    memoryASet(ss, bp - 9, al);
    if (memoryAGet(ss, bp - 9) != 0x50)
        goto loc_b73f;
    memoryASet16(ds, 0xc8fd, memoryAGet16(ds, 0xc8fd) + 1);
loc_b73f: // 0b02:071f
    if (memoryAGet(ss, bp - 9) != 0x45)
        goto loc_b761;
    ax = 0;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, 0xc8b3, ax);
    memoryASet16(ds, 0xc8b1, dx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_b761: // 0b02:0741
    if (memoryAGet(ss, bp - 9) != 0x47)
        goto loc_b77d;
    push(cs);
    sub_b0a3();
    ax = 0x2c27;
    bx = memoryAGet16(ds, 0xc8a9);
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, bx, memoryAGet(es, bx) | dl);
loc_b77d: // 0b02:075d
    if (memoryAGet(ss, bp - 9) != 0x54)
        goto loc_b7a1;
    push(cs);
    sub_b0c1();
    ax = 0x2c27;
    bx = memoryAGet16(ds, 0xc8a9);
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, bx, memoryAGet(es, bx) | dl);
    goto loc_b7a1;
  // gap 2 bytes
loc_b79d: // 0b02:077d
    memoryASet16(ds, 0xc8b1, memoryAGet16(ds, 0xc8b1) + 1);
loc_b7a1: // 0b02:0781
    ax = memoryAGet16(ds, 0xc8b1);
    if (ax >= memoryAGet16(ss, bp - 4))
        goto loc_b7ac;
    goto loc_b710;
loc_b7ac: // 0b02:078c
    ax = 0x076d;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x0b02);
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_b7bc() // 0b02:079c +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001c;
    push(si);
    push(di);
    ax = 0x0004;
    push(ax);
    ax = 0x00c8;
    push(ax);
    ax = 0x0140;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x0b02);
    sp += 0x000a;
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x002d;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x0051;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x0052;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x0054;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0051;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0052;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0138;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0054;
    push(ax);
    ax = 0x00c0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    ax = 0x0006;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0060;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    si = 0;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x0b02);
loc_b88a: // 0b02:086a
    if ((short)memoryAGet16(ds, 0xc8a3) >= (short)0x0000)
        goto loc_b899;
    memoryASet16(ds, 0xc8a3, 0x0000);
    goto loc_b8a6;
loc_b899: // 0b02:0879
    if ((short)memoryAGet16(ds, 0xc8a3) <= (short)0x0004)
        goto loc_b8a6;
    memoryASet16(ds, 0xc8a3, 0x0004);
loc_b8a6: // 0b02:0886
    ax = 0x002d;
    push(ax);
    ax = memoryAGet16(ds, 0xc8a3);
    dx = 0x0018;
    imul16(dx);
    ax += 0x0030;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x0b02);
    sp += 0x0006;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x0b02);
    ax = 0x0004;
    push(ax);
    ax = 0x0018;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = memoryAGet16(ds, 0xc8a3);
    dx = 0x0018;
    imul16(dx);
    ax += 0x0030;
    push(ax);
    ax = 0x0030;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x0b02);
    sp += 0x000a;
    ax = bp - 28;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x164d; sub_16e8e(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = bp - 14;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x0b02);
    sp += 0x0002;
    if (memoryAGet(ds, 0xa545) == 0x00)
        goto loc_b96b;
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    di = ax;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x0b02);
    ax = di;
    if (ax == 0x0048)
        goto loc_b935;
    if (ax > 0x0048)
        goto loc_b92e;
    if (ax == 0x0001)
        goto loc_b956;
    if (ax == 0x001c)
        goto loc_b941;
    goto loc_b96b;
loc_b92e: // 0b02:090e
    if (ax == 0x0050)
        goto loc_b93b;
    goto loc_b96b;
loc_b935: // 0b02:0915
    memoryASet16(ds, 0xc8a3, memoryAGet16(ds, 0xc8a3) - 1);
    goto loc_b96b;
loc_b93b: // 0b02:091b
    memoryASet16(ds, 0xc8a3, memoryAGet16(ds, 0xc8a3) + 1);
    goto loc_b96b;
loc_b941: // 0b02:0921
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc8a3);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_b956: // 0b02:0936
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = 0xffff;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_b96b: // 0b02:094b
    si += memoryAGet16(ss, bp - 8);
    if (memoryAGet16(ss, bp - 14) != 0x0000)
        goto loc_b986;
    if (memoryAGet16(ss, bp - 12) != 0x0000)
        goto loc_b986;
    if (memoryAGet16(ss, bp - 28) != 0x0000)
        goto loc_b986;
    if (memoryAGet16(ss, bp - 26) == 0x0000)
        goto loc_b99b;
loc_b986: // 0b02:0966
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc8a3);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_b99b: // 0b02:097b
    if ((short)si >= (short)0xffd8)
        goto loc_b9aa;
    si += 0x0028;
    memoryASet16(ds, 0xc8a3, memoryAGet16(ds, 0xc8a3) - 1);
    goto loc_b88a;
loc_b9aa: // 0b02:098a
    if ((short)si > (short)0x0028)
        goto loc_b9b2;
    goto loc_b88a;
loc_b9b2: // 0b02:0992
    si -= 0x0028;
    memoryASet16(ds, 0xc8a3, memoryAGet16(ds, 0xc8a3) + 1);
    goto loc_b88a;
}
void sub_b9c5() // 0b02:09a5 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    ax = memoryAGet16(ds, 0xa550);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, 0xa7b2);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ds, 0xa550, 0x0000);
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    push(cs); cs = 0x1493; sub_15dfd(); assert(cs == 0x0b02);
    push(cs); cs = 0x1493; sub_15f4f(); assert(cs == 0x0b02);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x0b02);
    memoryASet16(ds, 0xa7b4, 0x0000);
    memoryASet16(ds, 0xa7b2, 0x8000);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x0b02);
    sp += 0x0004;
loc_ba24: // 0b02:0a04
    push(cs);
    sub_b7bc();
    di = ax;
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    if (di != 0xffff)
        goto loc_ba6e;
    push(cs); cs = 0x1493; sub_15e1d(); assert(cs == 0x0b02);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x0b02);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa7b4, ax);
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa7b2, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa550, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x0b02);
    sp += 0x0002;
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x0b02);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_ba6e: // 0b02:0a4e
    bx = di;
    bx <<= 1;
    di = memoryAGet16(ds, bx + 1814);
    push(di);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x0b02);
    sp += 0x0002;
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ds, 0xc8b3, ax);
    memoryASet16(ds, 0xc8b1, 0x0000);
    push(cs);
    sub_b6c1();
    si = 0x0001;
loc_ba97: // 0b02:0a77
    if (!si)
        goto loc_bac9;
    si = 0;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_b4b2();
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b4));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x0b02);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xa7b2);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, 0xa7b4);
    memoryASet16(ds, 0xa7b2, ax);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, 0xa7b4, ax);
loc_bac9: // 0b02:0aa9
    memoryASet(ds, 0xa545, 0x00);
loc_bace: // 0b02:0aae
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (!ax)
        goto loc_bace;
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    ax -= 0x0048;
    bx = ax;
    if (bx > 0x0009)
        goto loc_bb11;
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 2841)); // 0b02:0ac8;
  // gap 36 bytes
loc_bb11: // 0b02:0af1
    if (memoryAGet(ds, 0xa545) == 0x01)
        goto loc_bb1b;
    goto loc_ba97;
loc_bb1b: // 0b02:0afb
    ax = di;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x0b02);
    sp += 0x0002;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x0b02);
    goto loc_ba24;
}
void sub_bc95() // 0bc9:0005 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 12, memoryAGet16(ds, si + 12) + dx);
    memoryASet16(ds, si + 36, memoryAGet16(ds, si + 36) + dx);
    memoryASet16(ds, si + 40, memoryAGet16(ds, si + 40) + dx);
    ax = memoryAGet16(ds, si + 36);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, si + 46, ax);
    ax = memoryAGet16(ds, si + 40);
    ax >>= cl;
    memoryASet16(ds, si + 50, ax);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_bcbd() // 0bc9:002d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) + dx);
    memoryASet16(ds, si + 34, memoryAGet16(ds, si + 34) + dx);
    memoryASet16(ds, si + 38, memoryAGet16(ds, si + 38) + dx);
    ax = memoryAGet16(ds, si + 34);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, si + 44, ax);
    ax = memoryAGet16(ds, si + 38);
    ax >>= cl;
    memoryASet16(ds, si + 48, ax);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_bce5() // 0bc9:0055 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = memoryAGet16(ds, si + 50);
    bx--;
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    if (memoryAGet16(ds, si + 14) != 0x0001)
        goto loc_bd5d;
    memoryASet16(ss, bp - 10, 0x0000);
    ax = memoryAGet16(ds, si + 48);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ds, si + 38);
    ax -= memoryAGet16(ds, si + 42);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx -= ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 11742) == 0x00)
        goto loc_bd43;
    goto loc_be29;
loc_bd43: // 0bc9:00b3
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 11742) == 0x00)
        goto loc_bda4;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_bd5d: // 0bc9:00cd
    memoryASet16(ss, bp - 10, 0x000f);
    ax = memoryAGet16(ds, si + 44);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ds, si + 34);
    ax -= memoryAGet16(ds, si + 42);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx -= ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 5910) == 0x00)
        goto loc_bd8f;
    goto loc_be29;
loc_bd8f: // 0bc9:00ff
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 5910) == 0x00)
        goto loc_bda4;
    goto loc_be29;
loc_bda4: // 0bc9:0114
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 2994);
    ah = 0x00;
    if (ax)
        goto loc_be29;
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 2994);
    ah = 0x00;
    memoryASet16(ss, bp - 6, ax);
    if (ax != 0x0001)
        goto loc_be29;
    bx = memoryAGet16(ss, bp - 6);
    bx &= 0x0007;
    cl = 0x05;
    bx <<= cl;
    ax = memoryAGet16(ss, bp - 10);
    ax <<= 1;
    bx += ax;
    ax = memoryAGet16(ds, bx + 1948);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, si + 50);
    cl = 0x08;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 8);
    ax--;
    ax -= memoryAGet16(ds, si + 40);
    di = ax;
    if ((short)di > 0)
        goto loc_be29;
    ax = memoryAGet16(ds, 0xc903);
    ax = -ax;
    if ((short)ax > (short)di)
        goto loc_be29;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, si + 54, ax);
    push(di);
    push(si);
    push(cs);
    sub_bc95();
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 12));
    push(si);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
loc_be29: // 0bc9:0199
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_be2f() // 0bc9:019f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = memoryAGet16(ds, si + 46);
    bx++;
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    if (memoryAGet16(ds, si + 14) != 0x0001)
        goto loc_bea7;
    memoryASet16(ss, bp - 6, 0x0000);
    ax = memoryAGet16(ds, si + 48);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx += ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 11742) == 0x00)
        goto loc_be84;
    goto loc_bf64;
loc_be84: // 0bc9:01f4
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx += ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 11742) == 0x00)
        goto loc_beeb;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_bea7: // 0bc9:0217
    memoryASet16(ss, bp - 6, 0x000f);
    ax = memoryAGet16(ds, si + 44);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx += ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 5910) == 0x00)
        goto loc_bed0;
    goto loc_bf64;
loc_bed0: // 0bc9:0240
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx += ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 5910) != 0x00)
        goto loc_bf64;
loc_beeb: // 0bc9:025b
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 8826);
    ah = 0x00;
    if (ax)
        goto loc_bf64;
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 8826);
    ah = 0x00;
    memoryASet16(ss, bp - 8, ax);
    if (!ax)
        goto loc_bf64;
    bx = memoryAGet16(ss, bp - 8);
    bx &= 0x0007;
    cl = 0x05;
    bx <<= cl;
    ax = memoryAGet16(ss, bp - 6);
    ax <<= 1;
    bx += ax;
    ax = memoryAGet16(ds, bx + 1948);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ds, si + 46);
    ax++;
    cl = 0x08;
    ax <<= cl;
    ax -= memoryAGet16(ss, bp - 10);
    ax -= memoryAGet16(ds, si + 36);
    di = ax;
    if ((short)di < 0)
        goto loc_bf64;
    ax = memoryAGet16(ds, 0xc907);
    ax = -ax;
    if ((short)ax < (short)di)
        goto loc_bf64;
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, si + 58, ax);
    push(di);
    push(si);
    push(cs);
    sub_bc95();
    sp += 0x0004;
loc_bf64: // 0bc9:02d4
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_bf6a() // 0bc9:02da +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, si + 42);
    ax &= 0x00f0;
    cl = 0x04;
    ax >>= cl;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ds, 0xc901);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
    ax = -ax;
    ax -= memoryAGet16(ds, 0xc903);
    ax += 0xfff0;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = memoryAGet16(ds, 0xc917);
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51491);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    bx = memoryAGet16(ds, si + 52);
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ds, 0xc917);
    ax--;
    memoryASet16(ss, bp - 8, ax);
    goto loc_c02a;
loc_bfc1: // 0bc9:0331
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 2994);
    ah = 0x00;
    memoryASet16(ss, bp - 6, ax);
    if (!ax)
        goto loc_c01f;
    bx = memoryAGet16(ss, bp - 6);
    bx &= 0x0007;
    cl = 0x05;
    bx <<= cl;
    ax = memoryAGet16(ss, bp - 16);
    ax <<= 1;
    bx += ax;
    ax = memoryAGet16(ds, bx + 1948);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 8);
    cl = 0x08;
    ax <<= cl;
    ax += memoryAGet16(ss, bp - 10);
    ax--;
    ax -= memoryAGet16(ds, si + 40);
    di = ax;
    if ((short)di >= 0)
        goto loc_c01f;
    if ((short)di < (short)memoryAGet16(ss, bp - 14))
        goto loc_c01f;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, si + 54, ax);
    push(di);
    push(si);
    push(cs);
    sub_bc95();
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_c01f: // 0bc9:038f
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
loc_c02a: // 0bc9:039a
    ax = memoryAGet16(ds, si + 50);
    if (ax >= memoryAGet16(ss, bp - 8))
        goto loc_bfc1;
    ax = memoryAGet16(ds, 0xc901);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
    ax -= memoryAGet16(ds, 0xc907);
    ax += 0x0010;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = memoryAGet16(ds, 0xc91b);
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51495);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    bx = memoryAGet16(ds, si + 52);
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ds, 0xc91b);
    ax++;
    memoryASet16(ss, bp - 8, ax);
    goto loc_c0e8;
loc_c06f: // 0bc9:03df
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 8826);
    ah = 0x00;
    memoryASet16(ss, bp - 6, ax);
    if (!ax)
        goto loc_c0dd;
    bx = memoryAGet16(ss, bp - 6);
    bx &= 0x0007;
    cl = 0x05;
    bx <<= cl;
    ax = memoryAGet16(ss, bp - 16);
    ax <<= 1;
    bx += ax;
    ax = memoryAGet16(ds, bx + 1948);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax++;
    cl = 0x08;
    ax <<= cl;
    ax -= memoryAGet16(ss, bp - 10);
    ax -= memoryAGet16(ds, si + 36);
    di = ax;
    if ((short)di <= 0)
        goto loc_c0dd;
    if ((short)di > (short)memoryAGet16(ss, bp - 14))
        goto loc_c0dd;
    ax = memoryAGet16(ds, 0xc921);
    ax += di;
    memoryASet16(ss, bp - 12, ax);
    if ((short)memoryAGet16(ss, bp - 12) >= (short)0x0100)
        goto loc_c0dd;
    if ((short)memoryAGet16(ss, bp - 12) <= (short)0xff00)
        goto loc_c0dd;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, si + 58, ax);
    push(di);
    push(si);
    push(cs);
    sub_bc95();
    sp += 0x0004;
loc_c0dd: // 0bc9:044d
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) - 1);
    ax = memoryAGet16(ds, 0xa7e4);
    ax <<= 1;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - ax);
loc_c0e8: // 0bc9:0458
    ax = memoryAGet16(ds, si + 46);
    if (ax > memoryAGet16(ss, bp - 8))
        goto loc_c0f3;
    goto loc_c06f;
loc_c0f3: // 0bc9:0463
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_c0f9() // 0bc9:0469 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, si + 46);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ds, si + 58) <= (short)0x0001)
        goto loc_c113;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_c113: // 0bc9:0483
    ax = memoryAGet16(ds, si + 50);
    memoryASet16(ss, bp - 6, ax);
    if ((short)memoryAGet16(ds, si + 54) <= (short)0x0001)
        goto loc_c122;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) - 1);
loc_c122: // 0bc9:0492
    di = memoryAGet16(ss, bp - 4);
    goto loc_c17d;
loc_c127: // 0bc9:0497
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = di;
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    bx = memoryAGet16(ds, si + 44);
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 10, dx);
    bx = memoryAGet16(ss, bp - 10); es = memoryAGet16(ss, bp - 10 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 5910);
    ah = 0x00;
    memoryASet16(ds, si + 56, ax);
    if (!ax)
        goto loc_c17c;
    ax = memoryAGet16(ds, si + 44);
    ax++;
    cl = 0x08;
    ax <<= cl;
    ax -= memoryAGet16(ds, si + 34);
    memoryASet16(ss, bp - 2, ax);
    push(ax);
    push(si);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_c17c: // 0bc9:04ec
    di++;
loc_c17d: // 0bc9:04ed
    if ((short)di <= (short)memoryAGet16(ss, bp - 6))
        goto loc_c127;
    di = memoryAGet16(ss, bp - 4);
    goto loc_c1dd;
loc_c187: // 0bc9:04f7
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = di;
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    bx = memoryAGet16(ds, si + 48);
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 10, dx);
    bx = memoryAGet16(ss, bp - 10); es = memoryAGet16(ss, bp - 10 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 11742);
    ah = 0x00;
    memoryASet16(ds, si + 60, ax);
    if (!ax)
        goto loc_c1dc;
    ax = memoryAGet16(ds, si + 48);
    cl = 0x08;
    ax <<= cl;
    ax--;
    ax -= memoryAGet16(ds, si + 38);
    memoryASet16(ss, bp - 2, ax);
    push(ax);
    push(si);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_c1dc: // 0bc9:054c
    di++;
loc_c1dd: // 0bc9:054d
    if ((short)di <= (short)memoryAGet16(ss, bp - 6))
        goto loc_c187;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_c1e8() // 0bc9:0558 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xa7e9);
    dx = 0;
    bx = memoryAGet16(ds, di + 46);
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    dx += bx;
    bx = memoryAGet16(ds, di + 44);
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 6, dx);
    ax = memoryAGet16(ds, di + 48);
    ax -= memoryAGet16(ds, di + 44);
    ax++;
    dx = memoryAGet16(ds, 0xa7e4);
    dx -= ax;
    memoryASet16(ss, bp - 8, dx);
    ax = memoryAGet16(ds, di + 46);
    memoryASet16(ss, bp - 2, ax);
    goto loc_c278;
loc_c22c: // 0bc9:059c
    cx = memoryAGet16(ds, di + 44);
    goto loc_c268;
loc_c231: // 0bc9:05a1
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 0x0002);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, si + 2994) != 0x00)
        goto loc_c25f;
    if (memoryAGet(es, si + 5910) != 0x00)
        goto loc_c25f;
    if (memoryAGet(es, si + 8826) != 0x00)
        goto loc_c25f;
    if (memoryAGet(es, si + 11742) == 0x00)
        goto loc_c267;
loc_c25f: // 0bc9:05cf
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_c267: // 0bc9:05d7
    cx++;
loc_c268: // 0bc9:05d8
    if (memoryAGet16(ds, di + 48) >= cx)
        goto loc_c231;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 8);
    ax <<= 1;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
loc_c278: // 0bc9:05e8
    ax = memoryAGet16(ds, di + 50);
    if (ax >= memoryAGet16(ss, bp - 2))
        goto loc_c22c;
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_c335() // 0bc9:06a5 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, di + 10);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, di + 12);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 10, 0x0000);
    bx = memoryAGet16(ds, di + 28);
    if (memoryAGet16(ds, bx + 8) == 0x0000)
        goto loc_c38a;
    if (memoryAGet16(ds, di + 54) != 0x0019)
        goto loc_c368;
    memoryASet16(ds, 0xc921, 0x0091);
    goto loc_c38a;
loc_c368: // 0bc9:06d8
    if ((short)memoryAGet16(ds, 0xc923) <= (short)0x0000)
        goto loc_c37a;
    ax = memoryAGet16(ds, 0xc923);
    ax += 0x0010;
    memoryASet16(ds, 0xc921, ax);
    goto loc_c385;
loc_c37a: // 0bc9:06ea
    ax = memoryAGet16(ds, 0xc923);
    ax = -ax;
    ax += 0x0010;
    memoryASet16(ds, 0xc921, ax);
loc_c385: // 0bc9:06f5
    memoryASet16(ss, bp - 10, 0x0001);
loc_c38a: // 0bc9:06fa
    if ((short)memoryAGet16(ds, 0xc923) <= (short)0x00ef)
        goto loc_c39a;
    memoryASet16(ds, 0xc923, 0x00ef);
    goto loc_c3a8;
loc_c39a: // 0bc9:070a
    if ((short)memoryAGet16(ds, 0xc923) >= (short)0xff11)
        goto loc_c3a8;
    memoryASet16(ds, 0xc923, 0xff11);
loc_c3a8: // 0bc9:0718
    if ((short)memoryAGet16(ds, 0xc921) <= (short)0x00ff)
        goto loc_c3b8;
    memoryASet16(ds, 0xc921, 0x00ff);
    goto loc_c3c6;
loc_c3b8: // 0bc9:0728
    if ((short)memoryAGet16(ds, 0xc921) >= (short)0xff11)
        goto loc_c3c6;
    memoryASet16(ds, 0xc921, 0xff11);
loc_c3c6: // 0bc9:0736
    ax = memoryAGet16(ds, 0xc923);
    memoryASet16(ds, di + 10, memoryAGet16(ds, di + 10) + ax);
    ax = memoryAGet16(ds, 0xc921);
    memoryASet16(ds, di + 12, memoryAGet16(ds, di + 12) + ax);
    memoryASet16(ds, di + 4, 0x0001);
    if (memoryAGet16(ds, di + 30) != 0x0000)
        goto loc_c3e0;
    goto loc_c5c0;
loc_c3e0: // 0bc9:0750
    ax = memoryAGet16(ds, di + 30);
    ax -= 0x007c;
    dx = 0x0012;
    imul16(dx);
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, di + 48);
    memoryASet16(ds, 0xc919, ax);
    ax = memoryAGet16(ds, di + 46);
    memoryASet16(ds, 0xc91b, ax);
    ax = memoryAGet16(ds, di + 44);
    memoryASet16(ds, 0xc91d, ax);
    ax = memoryAGet16(ds, di + 50);
    memoryASet16(ds, 0xc917, ax);
    ax = memoryAGet16(ds, di + 52);
    memoryASet16(ds, 0xc915, ax);
    ax = memoryAGet16(ds, di + 38);
    memoryASet16(ds, 0xc90f, ax);
    ax = memoryAGet16(ds, di + 36);
    memoryASet16(ds, 0xc911, ax);
    ax = memoryAGet16(ds, di + 34);
    memoryASet16(ds, 0xc913, ax);
    ax = memoryAGet16(ds, di + 40);
    memoryASet16(ds, 0xc90d, ax);
    ax = memoryAGet16(ds, di + 42);
    memoryASet16(ds, 0xc90b, ax);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 8);
    memoryASet16(ds, di + 34, ax);
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 12);
    memoryASet16(ds, di + 38, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 10);
    memoryASet16(ds, di + 36, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 14);
    memoryASet16(ds, di + 40, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, di + 34);
    ax >>= 1;
    dx = memoryAGet16(ds, di + 34);
    dx += ax;
    memoryASet16(ds, di + 42, dx);
    ax = memoryAGet16(ds, di + 34);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, di + 44, ax);
    ax = memoryAGet16(ds, di + 38);
    ax >>= cl;
    memoryASet16(ds, di + 48, ax);
    ax = memoryAGet16(ds, di + 36);
    ax >>= cl;
    memoryASet16(ds, di + 46, ax);
    ax = memoryAGet16(ds, di + 40);
    ax >>= cl;
    memoryASet16(ds, di + 50, ax);
    ax = memoryAGet16(ds, di + 42);
    ax >>= cl;
    memoryASet16(ds, di + 52, ax);
    ax = 0;
    memoryASet16(ds, di + 60, ax);
    memoryASet16(ds, di + 58, ax);
    memoryASet16(ds, di + 56, ax);
    memoryASet16(ds, di + 54, ax);
    if (memoryAGet16(ds, di + 6) == 0x0000)
        goto loc_c523;
    ax = memoryAGet16(ds, di + 34);
    ax -= memoryAGet16(ds, 0xc913);
    memoryASet16(ds, 0xc909, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, 0xc90f);
    memoryASet16(ds, 0xc905, ax);
    ax = memoryAGet16(ds, di + 36);
    ax -= memoryAGet16(ds, 0xc911);
    memoryASet16(ds, 0xc907, ax);
    ax = memoryAGet16(ds, di + 40);
    ax -= memoryAGet16(ds, 0xc90d);
    memoryASet16(ds, 0xc903, ax);
    ax = memoryAGet16(ds, di + 42);
    ax -= memoryAGet16(ds, 0xc90b);
    memoryASet16(ds, 0xc901, ax);
    push(di);
    push(cs);
    sub_bf6a();
    sp += 0x0002;
    if (di != memoryAGet16(ds, 0xa7d6))
        goto loc_c51b;
    if (memoryAGet16(ds, 0xc91f) != 0x0000)
        goto loc_c51b;
    if (memoryAGet16(ds, di + 54) != 0x0000)
        goto loc_c506;
    if ((short)memoryAGet16(ds, 0xc903) <= (short)0x0000)
        goto loc_c506;
    push(di);
    push(cs);
    sub_bce5();
    sp += 0x0002;
loc_c506: // 0bc9:0876
    if (memoryAGet16(ds, di + 58) != 0x0000)
        goto loc_c51b;
    if ((short)memoryAGet16(ds, 0xc907) >= (short)0x0000)
        goto loc_c51b;
    push(di);
    push(cs);
    sub_be2f();
    sp += 0x0002;
loc_c51b: // 0bc9:088b
    push(di);
    push(cs);
    sub_c0f9();
    sp += 0x0002;
loc_c523: // 0bc9:0893
    if (memoryAGet16(ss, bp - 10) == 0x0000)
        goto loc_c5a4;
    if (memoryAGet16(ds, di + 54) != 0x0000)
        goto loc_c5a4;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, di + 12, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ds, 0xc923);
    memoryASet16(ds, di + 10, ax);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 8);
    memoryASet16(ds, di + 34, ax);
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 12);
    memoryASet16(ds, di + 38, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 10);
    memoryASet16(ds, di + 36, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 14);
    memoryASet16(ds, di + 40, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, di + 34);
    ax >>= 1;
    dx = memoryAGet16(ds, di + 34);
    dx += ax;
    memoryASet16(ds, di + 42, dx);
    ax = memoryAGet16(ds, di + 34);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, di + 44, ax);
    ax = memoryAGet16(ds, di + 38);
    ax >>= cl;
    memoryASet16(ds, di + 48, ax);
    ax = memoryAGet16(ds, di + 36);
    ax >>= cl;
    memoryASet16(ds, di + 46, ax);
    ax = memoryAGet16(ds, di + 40);
    ax >>= cl;
    memoryASet16(ds, di + 50, ax);
    ax = memoryAGet16(ds, di + 42);
    ax >>= cl;
    memoryASet16(ds, di + 52, ax);
loc_c5a4: // 0bc9:0914
    ax = memoryAGet16(ds, di + 18);
    dx = memoryAGet16(ds, di + 10);
    dx -= memoryAGet16(ss, bp - 2);
    ax += dx;
    memoryASet16(ds, di + 18, ax);
    ax = memoryAGet16(ds, di + 20);
    dx = memoryAGet16(ds, di + 12);
    dx -= memoryAGet16(ss, bp - 4);
    ax += dx;
    memoryASet16(ds, di + 20, ax);
loc_c5c0: // 0bc9:0930
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_c5c6() // 0bc9:0936 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, di + 10);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, di + 12);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ds, 0xc923) <= (short)0x00ef)
        goto loc_c5ed;
    memoryASet16(ds, 0xc923, 0x00ef);
    goto loc_c5fb;
loc_c5ed: // 0bc9:095d
    if ((short)memoryAGet16(ds, 0xc923) >= (short)0xff11)
        goto loc_c5fb;
    memoryASet16(ds, 0xc923, 0xff11);
loc_c5fb: // 0bc9:096b
    if ((short)memoryAGet16(ds, 0xc921) <= (short)0x00ef)
        goto loc_c60b;
    memoryASet16(ds, 0xc921, 0x00ef);
    goto loc_c619;
loc_c60b: // 0bc9:097b
    if ((short)memoryAGet16(ds, 0xc921) >= (short)0xff11)
        goto loc_c619;
    memoryASet16(ds, 0xc921, 0xff11);
loc_c619: // 0bc9:0989
    ax = memoryAGet16(ds, 0xc923);
    memoryASet16(ds, di + 10, memoryAGet16(ds, di + 10) + ax);
    ax = memoryAGet16(ds, 0xc921);
    memoryASet16(ds, di + 12, memoryAGet16(ds, di + 12) + ax);
    memoryASet16(ds, di + 4, 0x0001);
    ax = memoryAGet16(ds, di + 30);
    ax -= 0x007c;
    dx = 0x0012;
    imul16(dx);
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 10, dx);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, di);
    if (ax == 0x0016)
        goto loc_c67f;
    if ((short)ax > (short)0x0016)
        goto loc_c654;
    if (ax == 0x0002)
        goto loc_c65b;
    if (ax == 0x0015)
        goto loc_c673;
    goto loc_c68b;
loc_c654: // 0bc9:09c4
    if (ax == 0x001b)
        goto loc_c667;
    goto loc_c68b;
loc_c65b: // 0bc9:09cb
    memoryASet16(ss, bp - 6, 0x0280);
    memoryASet16(ss, bp - 8, 0x0180);
    goto loc_c697;
loc_c667: // 0bc9:09d7
    memoryASet16(ss, bp - 6, 0x0400);
    memoryASet16(ss, bp - 8, 0x0200);
    goto loc_c697;
loc_c673: // 0bc9:09e3
    memoryASet16(ss, bp - 6, 0x0580);
    memoryASet16(ss, bp - 8, 0x0400);
    goto loc_c697;
loc_c67f: // 0bc9:09ef
    memoryASet16(ss, bp - 6, 0x0100);
    memoryASet16(ss, bp - 8, 0x0080);
    goto loc_c697;
loc_c68b: // 0bc9:09fb
    ax = 0x08d8;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x0bc9);
    sp += 0x0002;
loc_c697: // 0bc9:0a07
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(ss, bp - 6);
    memoryASet16(ds, di + 38, ax);
    ax = memoryAGet16(ds, di + 10);
    memoryASet16(ds, di + 34, ax);
    ax = memoryAGet16(ds, di + 12);
    memoryASet16(ds, di + 36, ax);
    ax += memoryAGet16(ss, bp - 8);
    memoryASet16(ds, di + 40, ax);
    ax = memoryAGet16(ds, di + 34);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, di + 44, ax);
    ax = memoryAGet16(ds, di + 38);
    ax >>= cl;
    memoryASet16(ds, di + 48, ax);
    ax = memoryAGet16(ds, di + 36);
    ax >>= cl;
    memoryASet16(ds, di + 46, ax);
    ax = memoryAGet16(ds, di + 40);
    ax >>= cl;
    memoryASet16(ds, di + 50, ax);
    ax = 0;
    memoryASet16(ds, di + 60, ax);
    memoryASet16(ds, di + 58, ax);
    memoryASet16(ds, di + 56, ax);
    memoryASet16(ds, di + 54, ax);
    push(di);
    push(cs);
    sub_c1e8();
    sp += 0x0002;
    if (!ax)
        goto loc_c6f1;
    goto loc_c77c;
loc_c6f1: // 0bc9:0a61
    ax = memoryAGet16(ds, 0xc923);
    ax = -ax;
    push(ax);
    push(di);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
    push(di);
    push(cs);
    sub_c1e8();
    sp += 0x0002;
    if (!ax)
        goto loc_c722;
    if ((short)memoryAGet16(ds, 0xc923) <= (short)0x0000)
        goto loc_c719;
    memoryASet16(ds, di + 60, 0x0001);
    goto loc_c77c;
loc_c719: // 0bc9:0a89
    memoryASet16(ds, di + 56, 0x0001);
    goto loc_c77c;
  // gap 2 bytes
loc_c722: // 0bc9:0a92
    if ((short)memoryAGet16(ds, 0xc921) <= (short)0x0000)
        goto loc_c730;
    memoryASet16(ds, di + 54, 0x0001);
    goto loc_c735;
loc_c730: // 0bc9:0aa0
    memoryASet16(ds, di + 58, 0x0001);
loc_c735: // 0bc9:0aa5
    push(memoryAGet16(ds, 0xc923));
    push(di);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xc921);
    ax = -ax;
    push(ax);
    push(di);
    push(cs);
    sub_bc95();
    sp += 0x0004;
    push(di);
    push(cs);
    sub_c1e8();
    sp += 0x0002;
    if (ax)
        goto loc_c77c;
    ax = memoryAGet16(ds, 0xc923);
    ax = -ax;
    push(ax);
    push(di);
    push(cs);
    sub_bcbd();
    sp += 0x0004;
    if ((short)memoryAGet16(ds, 0xc923) <= (short)0x0000)
        goto loc_c777;
    memoryASet16(ds, di + 60, 0x0001);
    goto loc_c77c;
loc_c777: // 0bc9:0ae7
    memoryASet16(ds, di + 56, 0x0001);
loc_c77c: // 0bc9:0aec
    ax = memoryAGet16(ds, di + 18);
    dx = memoryAGet16(ds, di + 10);
    dx -= memoryAGet16(ss, bp - 2);
    ax += dx;
    memoryASet16(ds, di + 18, ax);
    ax = memoryAGet16(ds, di + 20);
    dx = memoryAGet16(ds, di + 12);
    dx -= memoryAGet16(ss, bp - 4);
    ax += dx;
    memoryASet16(ds, di + 20, ax);
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 8);
    memoryASet16(ds, di + 34, ax);
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 12);
    memoryASet16(ds, di + 38, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 10);
    memoryASet16(ds, di + 36, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 14);
    memoryASet16(ds, di + 40, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, di + 34);
    ax >>= 1;
    dx = memoryAGet16(ds, di + 34);
    dx += ax;
    memoryASet16(ds, di + 42, dx);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_c7d9() // 0bc9:0b49 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, di + 10);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, di + 12);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0xc923);
    memoryASet16(ds, di + 10, memoryAGet16(ds, di + 10) + ax);
    ax = memoryAGet16(ds, 0xc921);
    memoryASet16(ds, di + 12, memoryAGet16(ds, di + 12) + ax);
    memoryASet16(ds, di + 4, 0x0001);
    if (memoryAGet16(ds, di + 30) != 0x0000)
        goto loc_c80a;
    goto loc_c924;
loc_c80a: // 0bc9:0b7a
    ax = memoryAGet16(ds, di + 30);
    ax -= 0x007c;
    dx = 0x0012;
    imul16(dx);
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, di + 48);
    memoryASet16(ds, 0xc919, ax);
    ax = memoryAGet16(ds, di + 46);
    memoryASet16(ds, 0xc91b, ax);
    ax = memoryAGet16(ds, di + 44);
    memoryASet16(ds, 0xc91d, ax);
    ax = memoryAGet16(ds, di + 50);
    memoryASet16(ds, 0xc917, ax);
    ax = memoryAGet16(ds, di + 52);
    memoryASet16(ds, 0xc915, ax);
    ax = memoryAGet16(ds, di + 38);
    memoryASet16(ds, 0xc90f, ax);
    ax = memoryAGet16(ds, di + 36);
    memoryASet16(ds, 0xc911, ax);
    ax = memoryAGet16(ds, di + 34);
    memoryASet16(ds, 0xc913, ax);
    ax = memoryAGet16(ds, di + 40);
    memoryASet16(ds, 0xc90d, ax);
    ax = memoryAGet16(ds, di + 42);
    memoryASet16(ds, 0xc90b, ax);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 8);
    memoryASet16(ds, di + 34, ax);
    ax = memoryAGet16(ds, di + 10);
    ax += memoryAGet16(es, bx + 12);
    memoryASet16(ds, di + 38, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 10);
    memoryASet16(ds, di + 36, ax);
    ax = memoryAGet16(ds, di + 12);
    ax += memoryAGet16(es, bx + 14);
    memoryASet16(ds, di + 40, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, di + 34);
    ax >>= 1;
    dx = memoryAGet16(ds, di + 34);
    dx += ax;
    memoryASet16(ds, di + 42, dx);
    ax = memoryAGet16(ds, di + 34);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, di + 44, ax);
    ax = memoryAGet16(ds, di + 38);
    ax >>= cl;
    memoryASet16(ds, di + 48, ax);
    ax = memoryAGet16(ds, di + 36);
    ax >>= cl;
    memoryASet16(ds, di + 46, ax);
    ax = memoryAGet16(ds, di + 40);
    ax >>= cl;
    memoryASet16(ds, di + 50, ax);
    ax = memoryAGet16(ds, di + 42);
    ax >>= cl;
    memoryASet16(ds, di + 52, ax);
    if (memoryAGet16(ds, di + 6) == 0x0000)
        goto loc_c908;
    ax = memoryAGet16(ds, di + 34);
    ax -= memoryAGet16(ds, 0xc913);
    memoryASet16(ds, 0xc909, ax);
    ax = memoryAGet16(ds, di + 38);
    ax -= memoryAGet16(ds, 0xc90f);
    memoryASet16(ds, 0xc905, ax);
    ax = memoryAGet16(ds, di + 36);
    ax -= memoryAGet16(ds, 0xc911);
    memoryASet16(ds, 0xc907, ax);
    ax = memoryAGet16(ds, di + 40);
    ax -= memoryAGet16(ds, 0xc90d);
    memoryASet16(ds, 0xc903, ax);
    ax = memoryAGet16(ds, di + 42);
    ax -= memoryAGet16(ds, 0xc90b);
    memoryASet16(ds, 0xc901, ax);
    push(di);
    push(cs);
    sub_bf6a();
    sp += 0x0002;
    push(di);
    push(cs);
    sub_c0f9();
    sp += 0x0002;
loc_c908: // 0bc9:0c78
    ax = memoryAGet16(ds, di + 18);
    dx = memoryAGet16(ds, di + 10);
    dx -= memoryAGet16(ss, bp - 2);
    ax += dx;
    memoryASet16(ds, di + 18, ax);
    ax = memoryAGet16(ds, di + 20);
    dx = memoryAGet16(ds, di + 12);
    dx -= memoryAGet16(ss, bp - 4);
    ax += dx;
    memoryASet16(ds, di + 20, ax);
loc_c924: // 0bc9:0c94
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_cb7e() // 0bc9:0eee +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ds, si + 28);
    if (memoryAGet16(ds, di + 4) != 0x0002)
        goto loc_cbb4;
    ax = memoryAGet16(ds, di + 16);
    ax |= memoryAGet16(ds, di + 18);
    if (!ax)
        goto loc_cbac;
    if (memoryAGet16(ds, si + 8) == 0x0000)
        goto loc_cba5;
    memoryASet16(ds, si + 8, memoryAGet16(ds, si + 8) - 1);
    goto loc_cbac;
loc_cba5: // 0bc9:0f15
    push(si);
    push(cs); cs = memoryAGet16(ds, di + 16 + 2); callIndirect(cs, memoryAGet16(ds, di + 16)); assert(cs == 0x0bc9); // 0bc9:0f16;
    sp += 0x0002;
loc_cbac: // 0bc9:0f1c
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_cbb4: // 0bc9:0f24
    ax = memoryAGet16(ds, si + 26);
    ax += memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, di + 10);
    if ((short)ax > (short)memoryAGet16(ss, bp - 2))
        goto loc_cbce;
    if (memoryAGet16(ds, di + 10) == 0x0000)
        goto loc_cbce;
    goto loc_cc4e;
loc_cbce: // 0bc9:0f3e
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, si + 26, ax);
    if (memoryAGet16(ds, di + 4) == 0x0001)
        goto loc_cbe0;
    if (memoryAGet16(ds, di + 4) != 0x0004)
        goto loc_cc20;
loc_cbe0: // 0bc9:0f50
    if (memoryAGet16(ds, si + 14) == 0x0000)
        goto loc_cc00;
    if (memoryAGet16(ds, si + 14) != 0x0001)
        goto loc_cbf4;
    ax = memoryAGet16(ds, di + 12);
    imul16(memoryAGet16(ss, bp + 8));
    goto loc_cbfc;
loc_cbf4: // 0bc9:0f64
    ax = memoryAGet16(ss, bp + 8);
    ax = -ax;
    imul16(memoryAGet16(ds, di + 12));
loc_cbfc: // 0bc9:0f6c
    memoryASet16(ds, 0xc923, memoryAGet16(ds, 0xc923) + ax);
loc_cc00: // 0bc9:0f70
    if (memoryAGet16(ds, si + 16) == 0x0000)
        goto loc_cc20;
    if (memoryAGet16(ds, si + 16) != 0x0001)
        goto loc_cc14;
    ax = memoryAGet16(ds, di + 14);
    imul16(memoryAGet16(ss, bp + 8));
    goto loc_cc1c;
loc_cc14: // 0bc9:0f84
    ax = memoryAGet16(ss, bp + 8);
    ax = -ax;
    imul16(memoryAGet16(ds, di + 14));
loc_cc1c: // 0bc9:0f8c
    memoryASet16(ds, 0xc921, memoryAGet16(ds, 0xc921) + ax);
loc_cc20: // 0bc9:0f90
    if (memoryAGet16(ds, di + 4) == 0x0004)
        goto loc_cc2c;
    if (memoryAGet16(ds, di + 4) != 0x0003)
        goto loc_cc46;
loc_cc2c: // 0bc9:0f9c
    ax = memoryAGet16(ds, di + 16);
    ax |= memoryAGet16(ds, di + 18);
    if (!ax)
        goto loc_cc46;
    if (memoryAGet16(ds, si + 8) == 0x0000)
        goto loc_cc3f;
    memoryASet16(ds, si + 8, memoryAGet16(ds, si + 8) - 1);
    goto loc_cc46;
loc_cc3f: // 0bc9:0faf
    push(si);
    push(cs); cs = memoryAGet16(ds, di + 16 + 2); callIndirect(cs, memoryAGet16(ds, di + 16)); assert(cs == 0x0bc9); // 0bc9:0fb0;
    sp += 0x0002;
loc_cc46: // 0bc9:0fb6
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_cc4e: // 0bc9:0fbe
    ax = memoryAGet16(ds, di + 10);
    ax -= memoryAGet16(ds, si + 26);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax -= memoryAGet16(ds, di + 10);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ds, si + 26, 0x0000);
    if (memoryAGet16(ds, di + 4) == 0x0001)
        goto loc_cc71;
    if (memoryAGet16(ds, di + 4) != 0x0004)
        goto loc_ccb5;
loc_cc71: // 0bc9:0fe1
    if (memoryAGet16(ds, si + 14) == 0x0000)
        goto loc_cc91;
    if (memoryAGet16(ds, si + 14) != 0x0001)
        goto loc_cc85;
    ax = memoryAGet16(ds, di + 12);
    imul16(memoryAGet16(ss, bp - 4));
    goto loc_cc8d;
loc_cc85: // 0bc9:0ff5
    ax = memoryAGet16(ss, bp - 4);
    ax = -ax;
    imul16(memoryAGet16(ds, di + 12));
loc_cc8d: // 0bc9:0ffd
    memoryASet16(ds, 0xc923, memoryAGet16(ds, 0xc923) + ax);
loc_cc91: // 0bc9:1001
    if (memoryAGet16(ds, si + 16) == 0x0000)
        goto loc_cce9;
    if (memoryAGet16(ds, si + 16) != 0x0001)
        goto loc_cca5;
    ax = memoryAGet16(ds, di + 14);
    imul16(memoryAGet16(ss, bp - 4));
    goto loc_ccad;
loc_cca5: // 0bc9:1015
    ax = memoryAGet16(ss, bp - 4);
    ax = -ax;
    imul16(memoryAGet16(ds, di + 14));
loc_ccad: // 0bc9:101d
    memoryASet16(ds, 0xc921, memoryAGet16(ds, 0xc921) + ax);
    goto loc_cce9;
  // gap 2 bytes
loc_ccb5: // 0bc9:1025
    if (memoryAGet16(ds, si + 14) == 0x0000)
        goto loc_cccf;
    if (memoryAGet16(ds, si + 14) != 0x0001)
        goto loc_ccc6;
    ax = memoryAGet16(ds, di + 12);
    goto loc_cccb;
loc_ccc6: // 0bc9:1036
    ax = memoryAGet16(ds, di + 12);
    ax = -ax;
loc_cccb: // 0bc9:103b
    memoryASet16(ds, 0xc923, memoryAGet16(ds, 0xc923) + ax);
loc_cccf: // 0bc9:103f
    if (memoryAGet16(ds, si + 16) == 0x0000)
        goto loc_cce9;
    if (memoryAGet16(ds, si + 16) != 0x0001)
        goto loc_cce0;
    ax = memoryAGet16(ds, di + 14);
    goto loc_cce5;
loc_cce0: // 0bc9:1050
    ax = memoryAGet16(ds, di + 14);
    ax = -ax;
loc_cce5: // 0bc9:1055
    memoryASet16(ds, 0xc921, memoryAGet16(ds, 0xc921) + ax);
loc_cce9: // 0bc9:1059
    ax = memoryAGet16(ds, di + 16);
    ax |= memoryAGet16(ds, di + 18);
    if (!ax)
        goto loc_cd03;
    if (memoryAGet16(ds, si + 8) == 0x0000)
        goto loc_ccfc;
    memoryASet16(ds, si + 8, memoryAGet16(ds, si + 8) - 1);
    goto loc_cd03;
loc_ccfc: // 0bc9:106c
    push(si);
    push(cs); cs = memoryAGet16(ds, di + 16 + 2); callIndirect(cs, memoryAGet16(ds, di + 16)); assert(cs == 0x0bc9); // 0bc9:106d;
    sp += 0x0002;
loc_cd03: // 0bc9:1073
    if (memoryAGet16(ds, si + 28) != di)
        goto loc_cd10;
    ax = memoryAGet16(ds, di + 28);
    memoryASet16(ds, si + 28, ax);
    goto loc_cd1e;
loc_cd10: // 0bc9:1080
    if (memoryAGet16(ds, si + 28) != 0x0000)
        goto loc_cd1e;
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_cd1e: // 0bc9:108e
    ax = memoryAGet16(ss, bp - 6);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_cd27() // 0bc9:1097 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    ax = 0;
    memoryASet16(ds, 0xc921, ax);
    memoryASet16(ds, 0xc923, ax);
    memoryASet16(ds, si + 20, ax);
    memoryASet16(ds, si + 18, ax);
    ax = memoryAGet16(ds, si + 30);
    memoryASet16(ss, bp - 4, ax);
    di = memoryAGet16(ds, si + 28);
    push(memoryAGet16(ds, 0xa54c));
    push(si);
    push(cs);
    sub_cb7e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ds, si + 28) == di)
        goto loc_cda1;
    memoryASet16(ds, si + 26, 0x0000);
    di = memoryAGet16(ds, si + 28);
    goto loc_cda1;
  // gap 2 bytes
loc_cd69: // 0bc9:10d9
    if (memoryAGet16(ds, di + 6) != 0x0000)
        goto loc_cd86;
    ax = memoryAGet16(ds, di + 10);
    if ((short)ax > (short)memoryAGet16(ss, bp - 2))
        goto loc_cd86;
    ax--;
    push(ax);
    push(si);
    push(cs);
    sub_cb7e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, ax);
    goto loc_cd94;
loc_cd86: // 0bc9:10f6
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs);
    sub_cb7e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, ax);
loc_cd94: // 0bc9:1104
    if (memoryAGet16(ds, si + 28) == di)
        goto loc_cda1;
    memoryASet16(ds, si + 26, 0x0000);
    di = memoryAGet16(ds, si + 28);
loc_cda1: // 0bc9:1111
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_cd69;
    if (di)
        goto loc_cdba;
    push(si);
    push(cs); cs = 0x08aa; sub_a92b(); assert(cs == 0x0bc9);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_cdba: // 0bc9:112a
    if (memoryAGet16(ds, di + 2) == 0x0000)
        goto loc_cdd3;
    if ((short)memoryAGet16(ds, si + 14) <= (short)0x0000)
        goto loc_cdce;
    ax = memoryAGet16(ds, di + 2);
    memoryASet16(ds, si + 30, ax);
    goto loc_cdd3;
loc_cdce: // 0bc9:113e
    ax = memoryAGet16(ds, di);
    memoryASet16(ds, si + 30, ax);
loc_cdd3: // 0bc9:1143
    if (memoryAGet16(ds, si + 30) != 0xffff)
        goto loc_cdde;
    memoryASet16(ds, si + 30, 0x0000);
loc_cdde: // 0bc9:114e
    if (memoryAGet16(ds, 0xc923) != 0x0000)
        goto loc_cdfa;
    if (memoryAGet16(ds, 0xc921) != 0x0000)
        goto loc_cdfa;
    ax = memoryAGet16(ds, si + 30);
    if (ax != memoryAGet16(ss, bp - 4))
        goto loc_cdfa;
    if (memoryAGet16(ds, si + 54) != 0x0019)
        goto loc_ce16;
loc_cdfa: // 0bc9:116a
    if (memoryAGet16(ds, si + 6) != 0x0002)
        goto loc_ce0e;
    push(si);
    push(cs);
    sub_c5c6();
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_ce0e: // 0bc9:117e
    push(si);
    push(cs);
    sub_c335();
    sp += 0x0002;
loc_ce16: // 0bc9:1186
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ce1c() // 0bc9:118c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 28, di);
    if (memoryAGet16(ds, di + 2) == 0x0000)
        goto loc_ce46;
    if ((short)memoryAGet16(ds, si + 14) <= (short)0x0000)
        goto loc_ce41;
    ax = memoryAGet16(ds, di + 2);
    memoryASet16(ds, si + 30, ax);
    goto loc_ce46;
loc_ce41: // 0bc9:11b1
    ax = memoryAGet16(ds, di);
    memoryASet16(ds, si + 30, ax);
loc_ce46: // 0bc9:11b6
    if (memoryAGet16(ds, si + 30) != 0xffff)
        goto loc_ce51;
    memoryASet16(ds, si + 30, 0x0000);
loc_ce51: // 0bc9:11c1
    ax = memoryAGet16(ds, si + 6);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ds, si + 6, 0x0000);
    ax = 0;
    memoryASet16(ds, 0xc921, ax);
    memoryASet16(ds, 0xc923, ax);
    push(si);
    push(cs);
    sub_c335();
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, si + 6, ax);
    if (memoryAGet16(ds, si + 6) != 0x0002)
        goto loc_ce86;
    push(si);
    push(cs);
    sub_c5c6();
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_ce86: // 0bc9:11f6
    if (memoryAGet16(ds, si + 6) != 0x0001)
        goto loc_ce94;
    push(si);
    push(cs);
    sub_c335();
    sp += 0x0002;
loc_ce94: // 0bc9:1204
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ce9a() // 0bc9:120a +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 28, di);
    memoryASet16(ds, si + 26, 0x0000);
    if (memoryAGet16(ds, di + 2) == 0x0000)
        goto loc_cec6;
    if ((short)memoryAGet16(ds, si + 14) <= (short)0x0000)
        goto loc_cec1;
    ax = memoryAGet16(ds, di + 2);
    memoryASet16(ds, si + 30, ax);
    goto loc_cec6;
loc_cec1: // 0bc9:1231
    ax = memoryAGet16(ds, di);
    memoryASet16(ds, si + 30, ax);
loc_cec6: // 0bc9:1236
    if (memoryAGet16(ds, si + 30) != 0xffff)
        goto loc_ced1;
    memoryASet16(ds, si + 30, 0x0000);
loc_ced1: // 0bc9:1241
    memoryASet16(ds, si + 4, 0x0001);
    ax = 0;
    memoryASet16(ds, 0xc921, ax);
    memoryASet16(ds, 0xc923, ax);
    if (memoryAGet16(ds, si + 54) == 0x0019)
        goto loc_ceec;
    push(si);
    push(cs);
    sub_c335();
    sp += 0x0002;
loc_ceec: // 0bc9:125c
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_eab9() // 0d6d:13e9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xc5d1) == 0x0000)
        goto loc_eac6;
    goto loc_eb77;
loc_eac6: // 0d6d:13f6
    if (memoryAGet16(ds, 0xc629) == 0x0000)
        goto loc_ead0;
    goto loc_eb77;
loc_ead0: // 0d6d:1400
    bx = memoryAGet16(ds, 0xa7d6);
    if (memoryAGet16(ds, bx + 28) != 0x0cd4)
        goto loc_eade;
    goto loc_eb77;
loc_eade: // 0d6d:140e
    memoryASet16(ds, 0xcab5, 0x0000);
    memoryASet16(ds, 0xc5d1, 0x001e);
    memoryASet16(ds, 0xa7da, 0x0001);
    memoryASet16(ds, bx + 6, 0x0000);
    memoryASet16(ds, bx + 32, 0x0003);
    if (memoryAGet16(ds, 0xa7ed) != 0x0011)
        goto loc_eb31;
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x0d6d);
    if ((short)ax >= (short)0x0080)
        goto loc_eb1d;
    ax = 0x0d2e;
    push(ax);
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0d6d);
    sp += 0x0004;
    goto loc_eb5d;
loc_eb1d: // 0d6d:144d
    ax = 0x0d4c;
    push(ax);
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0d6d);
    sp += 0x0004;
    goto loc_eb5d;
  // gap 2 bytes
loc_eb31: // 0d6d:1461
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x0d6d);
    if ((short)ax >= (short)0x0080)
        goto loc_eb4d;
    ax = 0x0cf2;
    push(ax);
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0d6d);
    sp += 0x0004;
    goto loc_eb5d;
loc_eb4d: // 0d6d:147d
    ax = 0x0d10;
    push(ax);
    push(memoryAGet16(ds, 0xa7d6));
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0d6d);
    sp += 0x0004;
loc_eb5d: // 0d6d:148d
    ax = 0x0017;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x0d6d);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ds, bx + 24, 0xffd8);
    memoryASet16(ds, bx + 22, 0x0010);
loc_eb77: // 0d6d:14a7
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_ed9d() // 0d6d:16cd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ds, 0x7a6e);
    ax = memoryAGet16(ds, si + 38);
    if (ax < memoryAGet16(ds, di + 34))
        goto loc_edb9;
    ax = memoryAGet16(ds, si + 34);
    if (ax <= memoryAGet16(ds, di + 38))
        goto loc_edc3;
loc_edb9: // 0d6d:16e9
    memoryASet16(ds, 0x7a6e, 0x0000);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_edc3: // 0d6d:16f3
    if ((short)memoryAGet16(ds, si + 20) >= (short)0x0000)
        goto loc_edf2;
    memoryASet16(ds, 0x7a6e, 0x0000);
    if ((short)memoryAGet16(ds, di + 20) >= (short)0x0000)
        goto loc_ee41;
    memoryASet16(ds, 0xc923, 0x0000);
    ax = memoryAGet16(ds, di + 20);
    memoryASet16(ds, 0xc921, ax);
    push(si);
    push(cs); cs = 0x0bc9; sub_c7d9(); assert(cs == 0x0d6d);
    sp += 0x0002;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 4 bytes
loc_edf2: // 0d6d:1722
    ax = memoryAGet16(ds, di + 18);
    memoryASet16(ds, 0xc923, ax);
    ax = memoryAGet16(ds, di + 36);
    ax -= memoryAGet16(ds, si + 40);
    ax -= 0x0010;
    memoryASet16(ds, 0xc921, ax);
    push(si);
    push(cs); cs = 0x0bc9; sub_c7d9(); assert(cs == 0x0d6d);
    sp += 0x0002;
    if (memoryAGet16(ds, 0x7ade) == 0x0000)
        goto loc_ee23;
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) & 0xff80);
    ax = memoryAGet16(ds, di + 10);
    ax &= 0x007f;
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) | ax);
    goto loc_ee2c;
loc_ee23: // 0d6d:1753
    ax = memoryAGet16(ds, di + 10);
    ax &= 0x001f;
    memoryASet16(ds, si + 10, memoryAGet16(ds, si + 10) | ax);
loc_ee2c: // 0d6d:175c
    if (memoryAGet16(ds, si + 58) == 0x0000)
        goto loc_ee3c;
    memoryASet16(ds, 0x7a6e, 0x0000);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_ee3c: // 0d6d:176c
    memoryASet16(ds, si + 54, 0x0019);
loc_ee41: // 0d6d:1771
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_efb9() // 0d6d:18e9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0xcab5) != 0x0001)
        goto loc_efd1;
    memoryASet16(ds, 0xcab5, 0x0000);
loc_efd1: // 0d6d:1901
    bx = memoryAGet16(ds, si + 46);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 51493);
    ax >>= 1;
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa7e9);
    bx = memoryAGet16(ds, si + 44);
    bx <<= 1;
    ax += bx;
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, si + 48);
    ax -= memoryAGet16(ds, si + 44);
    ax++;
    dx = memoryAGet16(ds, 0xa7e4);
    dx -= ax;
    memoryASet16(ss, bp - 8, dx);
    ax = memoryAGet16(ds, si + 46);
    memoryASet16(ss, bp - 2, ax);
    goto loc_f106;
loc_f008: // 0d6d:1938
    di = memoryAGet16(ds, si + 44);
    goto loc_f0f3;
loc_f00e: // 0d6d:193e
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 17574);
    ah = 0x00;
    ax &= 0x007f;
    memoryASet16(ss, bp - 10, ax);
    if (ax)
        goto loc_f02c;
    goto loc_f0ee;
loc_f02c: // 0d6d:195c
    bx = memoryAGet16(ss, bp - 10);
    bx -= 0x0003;
    if (bx <= 0x0019)
        goto loc_f03a;
    goto loc_f0ee;
loc_f03a: // 0d6d:196a
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 6727)); // 0d6d:196c;
  // gap 173 bytes
loc_f0ee: // 0d6d:1a1e
    di++;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 0x0002);
loc_f0f3: // 0d6d:1a23
    if (memoryAGet16(ds, si + 48) < di)
        goto loc_f0fb;
    goto loc_f00e;
loc_f0fb: // 0d6d:1a2b
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 8);
    ax <<= 1;
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
loc_f106: // 0d6d:1a36
    ax = memoryAGet16(ds, si + 50);
    if (ax < memoryAGet16(ss, bp - 2))
        goto loc_f111;
    goto loc_f008;
loc_f111: // 0d6d:1a41
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_f838() // 0f7c:0078 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    ax = memoryAGet16(ds, 0x7eff);
    memoryASet16(ss, bp - 2, ax);
    si = memoryAGet16(ss, bp + 6);
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si <<= 1;
    ds = memoryAGet16(ss, bp - 2);
    es = memoryAGet16(ss, bp + 10);
    cx = 0x0004;
    bx = memoryAGet16(ss, bp + 12);
    bx--;
loc_f860: // 0f7c:00a0
    di = memoryAGet16(ss, bp + 8);
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    ax = memoryAGet16(ss, bp + 14);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + ax);
    if (--cx)
        goto loc_f860;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_f88b() // 0f7c:00cb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    ax = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, 0x0912);
    si = memoryAGet16(ds, 0x7ce7);
    ax = 0x0002;
    push(ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = si;
    push(memoryAGet16(es, 0x0002));
    push(memoryAGet16(es, 0x0000));
    push(si);
    push(cs); cs = 0x1493; sub_154de(); assert(cs == 0x0f7c);
    sp += 0x000c;
    ax = 0x0004;
    push(ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = si;
    push(memoryAGet16(es, 0x0004));
    push(memoryAGet16(es, 0x0000));
    push(si);
    push(cs); cs = 0x1493; sub_154de(); assert(cs == 0x0f7c);
    sp += 0x000c;
    ax = 0x0006;
    push(ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = si;
    push(memoryAGet16(es, 0x0006));
    push(memoryAGet16(es, 0x0000));
    push(si);
    push(cs); cs = 0x1493; sub_154de(); assert(cs == 0x0f7c);
    sp += 0x000c;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_f90f() // 0f7c:014f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001c;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0xa52f) == 0x0000)
        goto loc_f924;
    goto loc_fc72;
loc_f924: // 0f7c:0164
    if (memoryAGet16(ds, 0x3bd6) == 0x0000)
        goto loc_f93a;
    push(si);
    push(cs);
    sub_fc78();
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_f93a: // 0f7c:017a
    if (memoryAGet16(ds, 0xc5cd) != 0x0000)
        goto loc_f944;
    goto loc_fc72;
loc_f944: // 0f7c:0184
    memoryASet16(ss, bp - 28, 0x0000);
    ax = memoryAGet16(ds, 0x7a52);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    ax = memoryAGet16(ds, si + 62);
    push(dx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    bx = pop();
    flags.zero = bx == dx;
    dx = pop();
    if (!flags.zero)
        goto loc_f969;
    if (dx != ax)
        goto loc_f969;
    ax = memoryAGet16(ds, si + 64);
    if (ax != memoryAGet16(ds, 0x7a50))
        goto loc_f969;
    goto loc_fa38;
loc_f969: // 0f7c:01a9
    ax = memoryAGet16(ds, 0x7ce7);
    memoryASet16(ss, bp - 14, ax);
    es = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(es, 0x0010);
    memoryASet16(ss, bp - 22, ax);
    ax = memoryAGet16(es, 0x0008);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ds, 0x7ce7);
    dx = 0;
    dx += memoryAGet16(es, 0x0000);
    dx += memoryAGet16(ss, bp - 24);
    bx = memoryAGet16(ss, bp - 22);
    bx <<= 1;
    bx <<= 1;
    dx += bx;
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, dx);
    ax = 0x000a;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(memoryAGet16(ds, 0x7a52));
    push(memoryAGet16(ds, 0x7a50));
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x0f7c);
    sp += 0x0008;
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x0f7c);
    sp += 0x0002;
    memoryASet16(ss, bp - 20, ax);
    di = 0x0009;
    goto loc_f9e4;
loc_f9c8: // 0f7c:0208
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    ax = 0x0029;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
    di--;
loc_f9e4: // 0f7c:0224
    if (di > memoryAGet16(ss, bp - 20))
        goto loc_f9c8;
    ax = bp - 10;
    memoryASet16(ss, bp - 12, ax);
    goto loc_fa15;
loc_f9f1: // 0f7c:0231
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    al = memoryAGet(ds, bx);
    cbw();
    ax += 0xfffa;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
loc_fa15: // 0f7c:0255
    bx = memoryAGet16(ss, bp - 12);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_f9f1;
    push(cs);
    sub_f88b();
    memoryASet16(ds, si + 4, 0x0001);
    ax = memoryAGet16(ds, 0x7a52);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    memoryASet16(ds, si + 62, ax);
    ax = memoryAGet16(ds, 0x7a50);
    memoryASet16(ds, si + 64, ax);
    memoryASet16(ss, bp - 28, 0x0001);
loc_fa38: // 0f7c:0278
    ax = memoryAGet16(ds, 0x7a58);
    memoryASet16(ss, bp - 26, ax);
    ax = memoryAGet16(ds, si + 66);
    if (ax != memoryAGet16(ss, bp - 26))
        goto loc_fa49;
    goto loc_fb2f;
loc_fa49: // 0f7c:0289
    ax = memoryAGet16(ds, 0x7ce7);
    memoryASet16(ss, bp - 14, ax);
    es = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(es, 0x0010);
    memoryASet16(ss, bp - 22, ax);
    ax = memoryAGet16(es, 0x0008);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ds, 0x7ce7);
    dx = 0;
    dx += memoryAGet16(es, 0x0000);
    dx += memoryAGet16(ss, bp - 24);
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    bx = 0x0014;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    dx += 0x0007;
    ax = pop();
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, dx);
    if (memoryAGet16(ss, bp - 26) <= 0x0063)
        goto loc_fa9c;
    ax = 0x1846;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x0f7c);
    sp += 0x0004;
    goto loc_fab2;
loc_fa9c: // 0f7c:02dc
    ax = 0x000a;
    push(ax);
    ax = bp - 10;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 26));
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x0f7c);
    sp += 0x0008;
loc_fab2: // 0f7c:02f2
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x0f7c);
    sp += 0x0002;
    memoryASet16(ss, bp - 20, ax);
    di = 0x0002;
    goto loc_fae2;
loc_fac6: // 0f7c:0306
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    ax = 0x0029;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
    di--;
loc_fae2: // 0f7c:0322
    if (di > memoryAGet16(ss, bp - 20))
        goto loc_fac6;
    ax = bp - 10;
    memoryASet16(ss, bp - 12, ax);
    goto loc_fb13;
loc_faef: // 0f7c:032f
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    al = memoryAGet(ds, bx);
    cbw();
    ax += 0xfffa;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
loc_fb13: // 0f7c:0353
    bx = memoryAGet16(ss, bp - 12);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_faef;
    push(cs);
    sub_f88b();
    memoryASet16(ds, si + 4, 0x0001);
    ax = memoryAGet16(ss, bp - 26);
    memoryASet16(ds, si + 66, ax);
    memoryASet16(ss, bp - 28, 0x0001);
loc_fb2f: // 0f7c:036f
    ax = memoryAGet16(ds, si + 68);
    if (ax != memoryAGet16(ds, 0x7a6a))
        goto loc_fb3b;
    goto loc_fc22;
loc_fb3b: // 0f7c:037b
    ax = memoryAGet16(ds, 0x7ce7);
    memoryASet16(ss, bp - 14, ax);
    es = memoryAGet16(ss, bp - 14);
    ax = memoryAGet16(es, 0x0010);
    memoryASet16(ss, bp - 22, ax);
    ax = memoryAGet16(es, 0x0008);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ds, 0x7ce7);
    dx = 0;
    dx += memoryAGet16(es, 0x0000);
    dx += memoryAGet16(ss, bp - 24);
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    bx = 0x0014;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    dx += 0x0002;
    ax = pop();
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, dx);
    if ((short)memoryAGet16(ds, 0x7a6a) <= (short)0x0063)
        goto loc_fb8f;
    ax = 0x1849;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x0f7c);
    sp += 0x0004;
    goto loc_fba5;
loc_fb8f: // 0f7c:03cf
    ax = 0x000a;
    push(ax);
    ax = bp - 10;
    push(ax);
    ax = memoryAGet16(ds, 0x7a6a);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x0f7c);
    sp += 0x0008;
loc_fba5: // 0f7c:03e5
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x0f7c);
    sp += 0x0002;
    memoryASet16(ss, bp - 20, ax);
    di = 0x0002;
    goto loc_fbd5;
loc_fbb9: // 0f7c:03f9
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    ax = 0x0029;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
    di--;
loc_fbd5: // 0f7c:0415
    if (di > memoryAGet16(ss, bp - 20))
        goto loc_fbb9;
    ax = bp - 10;
    memoryASet16(ss, bp - 12, ax);
    goto loc_fc06;
loc_fbe2: // 0f7c:0422
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 22));
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    ax = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(ss, bp - 16));
    push(ax);
    bx = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    al = memoryAGet(ds, bx);
    cbw();
    ax += 0xfffa;
    push(ax);
    push(cs);
    sub_f838();
    sp += 0x000a;
loc_fc06: // 0f7c:0446
    bx = memoryAGet16(ss, bp - 12);
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_fbe2;
    push(cs);
    sub_f88b();
    memoryASet16(ds, si + 4, 0x0001);
    ax = memoryAGet16(ds, 0x7a6a);
    memoryASet16(ds, si + 68, ax);
    memoryASet16(ss, bp - 28, 0x0001);
loc_fc22: // 0f7c:0462
    ax = memoryAGet16(ds, si + 10);
    if (ax != memoryAGet16(ds, 0xc753))
        goto loc_fc34;
    ax = memoryAGet16(ds, si + 12);
    if (ax == memoryAGet16(ds, 0xc751))
        goto loc_fc45;
loc_fc34: // 0f7c:0474
    ax = memoryAGet16(ds, 0xc753);
    memoryASet16(ds, si + 10, ax);
    ax = memoryAGet16(ds, 0xc751);
    memoryASet16(ds, si + 12, ax);
    memoryASet16(ss, bp - 28, 0x0001);
loc_fc45: // 0f7c:0485
    if (memoryAGet16(ss, bp - 28) == 0x0000)
        goto loc_fc72;
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00fd;
    push(ax);
    ax = memoryAGet16(ds, si + 12);
    ax += 0x0040;
    push(ax);
    ax = memoryAGet16(ds, si + 10);
    ax += 0x0040;
    push(ax);
    ax = si;
    ax += 0x0046;
    push(ax);
    push(cs); cs = 0x1841; sub_19a51(); assert(cs == 0x0f7c);
    sp += 0x000c;
loc_fc72: // 0f7c:04b2
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_fc78() // 0f7c:04b8 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, si + 10);
    if (ax != memoryAGet16(ds, 0xc753))
        goto loc_fc91;
    ax = memoryAGet16(ds, si + 12);
    if (ax == memoryAGet16(ds, 0xc751))
        goto loc_fcc7;
loc_fc91: // 0f7c:04d1
    ax = memoryAGet16(ds, 0xc753);
    memoryASet16(ds, si + 10, ax);
    ax = memoryAGet16(ds, 0xc751);
    memoryASet16(ds, si + 12, ax);
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0081;
    push(ax);
    ax = memoryAGet16(ds, si + 12);
    ax += 0x0080;
    push(ax);
    ax = memoryAGet16(ds, si + 10);
    ax += 0x0a00;
    ax -= 0x0200;
    push(ax);
    ax = si;
    ax += 0x0046;
    push(ax);
    push(cs); cs = 0x1841; sub_19a51(); assert(cs == 0x0f7c);
    sp += 0x000c;
loc_fcc7: // 0f7c:0507
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_10069() // 0f7c:08a9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, si + 66) == 0x0000)
        goto loc_1007d;
    goto loc_101a9;
loc_1007d: // 0f7c:08bd
    ax = memoryAGet16(ds, si + 52);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, si + 40);
    ax -= memoryAGet16(ds, si + 36);
    ax >>= 1;
    dx = memoryAGet16(ds, si + 36);
    dx += ax;
    cl = 0x08;
    dx >>= cl;
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    bx = memoryAGet16(ds, bx + 51493);
    bx >>= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa7e9);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    bx += ax;
    bx = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 17574);
    ah = 0x00;
    di = ax;
    if (di == 0x000b)
        goto loc_100d6;
    if (di == 0x000d)
        goto loc_100d6;
    if (di == 0x000e)
        goto loc_100d6;
    if (di == 0x000c)
        goto loc_100d6;
    goto loc_101a9;
loc_100d6: // 0f7c:0916
    if (memoryAGet16(ds, 0x7a5c) != 0x0000)
        goto loc_1011a;
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x0f7c);
    sp += 0x0002;
    push(cs); cs = 0x107c; sub_11226(); assert(cs == 0x0f7c);
    push(cs); cs = 0x1841; sub_19169(); assert(cs == 0x0f7c);
    ax = memoryAGet16(ds, si + 18);
    ax = -ax;
    memoryASet16(ds, 0xc923, ax);
    ax = memoryAGet16(ds, si + 20);
    ax = -ax;
    memoryASet16(ds, 0xc921, ax);
    ax = 0;
    memoryASet16(ds, si + 16, ax);
    memoryASet16(ds, si + 14, ax);
    push(si);
    push(cs); cs = 0x0bc9; sub_c335(); assert(cs == 0x0f7c);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1011a: // 0f7c:095a
    bx = di;
    bx -= 0x000b;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 5606);
    memoryASet16(ds, si + 62, ax);
    if (memoryAGet16(ds, si + 28) != 0x14ce)
        goto loc_1013b;
    bx = memoryAGet16(ds, si + 62);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 5190);
    memoryASet16(ds, si + 62, ax);
loc_1013b: // 0f7c:097b
    bx = memoryAGet16(ds, si + 62);
    if (bx > 0x0006)
        goto loc_10178;
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 2543)); // 0f7c:0985;
  // gap 46 bytes
loc_10178: // 0f7c:09b8
    memoryASet16(ds, si + 64, 0x0000);
    memoryASet16(ds, si + 66, 0x0012);
    if (memoryAGet16(ds, si + 28) != 0x14ce)
        goto loc_1019c;
    ax = 0x15a0;
    push(ax);
    push(si);
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0f7c);
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1019c: // 0f7c:09dc
    ax = 0x14ce;
    push(ax);
    push(si);
    push(cs); cs = 0x0bc9; sub_ce9a(); assert(cs == 0x0f7c);
    sp += 0x0004;
loc_101a9: // 0f7c:09e9
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_101bd() // 0f7c:09fd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(cs); cs = 0x08aa; sub_a8b1(); assert(cs == 0x0f7c);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, bx + 6, 0x0000);
    memoryASet16(ds, bx + 32, 0x0003);
    memoryASet16(ds, bx, 0x0022);
    memoryASet16(ds, bx + 2, 0x0001);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x08;
    ax <<= cl;
    ax += 0x0060;
    memoryASet16(ds, bx + 10, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax <<= cl;
    ax += 0xfe20;
    memoryASet16(ds, bx + 12, ax);
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x0f7c);
    bx = 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    bx = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, bx + 26, ax);
    ax = 0x15ee;
    push(ax);
    push(bx);
    push(cs); cs = 0x0bc9; sub_ce1c(); assert(cs == 0x0f7c);
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1021b() // 0f7c:0a5b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    ax = 0;
    push(ax);
    push(cs); cs = 0x08aa; sub_a8b1(); assert(cs == 0x0f7c);
    sp += 0x0002;
    bx = memoryAGet16(ds, 0xa7d8);
    memoryASet16(ds, bx + 6, 0x0000);
    memoryASet16(ds, bx + 32, 0x0003);
    memoryASet16(ds, bx, 0x0022);
    memoryASet16(ds, bx + 2, 0x0002);
    ax = memoryAGet16(ds, 0x7a1a);
    ax -= 0x0100;
    memoryASet16(ds, bx + 10, ax);
    ax = memoryAGet16(ds, 0x7a1c);
    ax -= 0x0100;
    memoryASet16(ds, bx + 12, ax);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x08;
    ax <<= cl;
    ax += 0x0060;
    memoryASet16(ds, bx + 62, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax <<= cl;
    ax += 0xfda0;
    memoryASet16(ds, bx + 64, ax);
    ax = memoryAGet16(ds, bx + 62);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = ax < memoryAGet16(ds, bx + 10);
    ax -= memoryAGet16(ds, bx + 10);
    dx = dx - 0x0000 - flags.carry;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, bx + 64);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = ax < memoryAGet16(ds, bx + 12);
    ax -= memoryAGet16(ds, bx + 12);
    dx = dx - 0x0000 - flags.carry;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    si = 0;
    goto loc_10367;
loc_10293: // 0f7c:0ad3
    ax = 0;
    dx = 0x0018;
    push(ax);
    push(dx);
    if ((short)si >= (short)0x0018)
        goto loc_102a3;
    ax = si;
    goto loc_102a6;
loc_102a3: // 0f7c:0ae3
    ax = 0x0018;
loc_102a6: // 0f7c:0ae6
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    push(dx);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x0f7c);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x0f7c);
    bx = memoryAGet16(ds, 0xa7d8);
    dx = memoryAGet16(ds, bx + 10);
    dx += ax;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51903, dx);
    ax = 0;
    dx = 0x001e;
    push(ax);
    push(dx);
    ax = si;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    push(dx);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x0f7c);
    push(dx);
    push(ax);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x0f7c);
    bx = memoryAGet16(ds, 0xa7d8);
    dx = memoryAGet16(ds, bx + 12);
    dx += ax;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51905, dx);
    if ((short)si >= (short)0x000a)
        goto loc_1031b;
    ax = si;
    dx = 0x0030;
    imul16(dx);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51905, memoryAGet16(ds, bx + 51905) - ax);
    goto loc_10366;
loc_1031b: // 0f7c:0b5b
    if ((short)si >= (short)0x000f)
        goto loc_10335;
    ax = si;
    cl = 0x04;
    ax <<= cl;
    ax += 0x0140;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51905, memoryAGet16(ds, bx + 51905) - ax);
    goto loc_10366;
loc_10335: // 0f7c:0b75
    if ((short)si >= (short)0x0014)
        goto loc_10352;
    ax = 0x0014;
    ax -= si;
    cl = 0x04;
    ax <<= cl;
    ax += 0x01e0;
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51905, memoryAGet16(ds, bx + 51905) - ax);
    goto loc_10366;
loc_10352: // 0f7c:0b92
    ax = 0x001d;
    ax -= si;
    dx = 0x0030;
    imul16(dx);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 51905, memoryAGet16(ds, bx + 51905) - ax);
loc_10366: // 0f7c:0ba6
    si++;
loc_10367: // 0f7c:0ba7
    if ((short)si >= (short)0x001e)
        goto loc_1036f;
    goto loc_10293;
loc_1036f: // 0f7c:0baf
    ax = 0x1666;
    push(ax);
    push(memoryAGet16(ds, 0xa7d8));
    push(cs); cs = 0x0bc9; sub_ce1c(); assert(cs == 0x0f7c);
    sp += 0x0004;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_107c3() // 107c:0003 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    push(cs); cs = 0x08aa; sub_a83e(); assert(cs == 0x107c);
    ax = 0x004a;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xcb3b;
    push(ax);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x107c);
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa7eb);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_10cda;
loc_107f6: // 107c:0036
    di = 0;
    goto loc_10cce;
loc_107fb: // 107c:003b
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_10811;
    goto loc_10ccd;
loc_10811: // 107c:0051
    bx = memoryAGet16(ss, bp - 8);
    bx--;
    if (bx <= 0x0057)
        goto loc_1081d;
    goto loc_10ccd;
loc_1081d: // 107c:005d
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 1429)); // 107c:005f;
  // gap 1193 bytes
loc_10ccd: // 107c:050d
    di++;
loc_10cce: // 107c:050e
    if (di >= memoryAGet16(ds, 0xa7e4))
        goto loc_10cd7;
    goto loc_107fb;
loc_10cd7: // 107c:0517
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_10cda: // 107c:051a
    ax = memoryAGet16(ss, bp - 4);
    if (ax >= memoryAGet16(ds, 0xa7e2))
        goto loc_10ce6;
    goto loc_107f6;
loc_10ce6: // 107c:0526
    ax = memoryAGet16(ds, 0xa7d6);
    memoryASet16(ss, bp - 2, ax);
    goto loc_10d05;
loc_10cee: // 107c:052e
    bx = memoryAGet16(ss, bp - 2);
    if (memoryAGet16(ds, bx + 2) == 0x0002)
        goto loc_10cfc;
    memoryASet16(ds, bx + 2, 0x0000);
loc_10cfc: // 107c:053c
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx + 72);
    memoryASet16(ss, bp - 2, ax);
loc_10d05: // 107c:0545
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_10cee;
    si = 0;
    goto loc_10d49;
loc_10d0f: // 107c:054f
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52027) == 0x0000)
        goto loc_10d48;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 6240);
    memoryASet16(ss, bp - 6, ax);
    goto loc_10d3b;
loc_10d27: // 107c:0567
    ax = 0x2c27;
    bx = memoryAGet16(ss, bp - 6);
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, bx, memoryAGet(es, bx) | dl);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_10d3b: // 107c:057b
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 6314);
    if (ax >= memoryAGet16(ss, bp - 6))
        goto loc_10d27;
loc_10d48: // 107c:0588
    si++;
loc_10d49: // 107c:0589
    if (si < 0x0025)
        goto loc_10d0f;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_11226() // 107c:0a66 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x1a61; sub_1b10d(); assert(cs == 0x107c);
    push(cs); cs = 0x1493; sub_15dfd(); assert(cs == 0x107c);
    ax = 0x006f;
    push(ax);
    push(cs); cs = 0x1493; sub_15a47(); assert(cs == 0x107c);
    sp += 0x0002;
    ax = 0x0008;
    push(ax);
    ax = 0x001a;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x107c);
    sp += 0x0004;
    ax = 0x006f;
    push(ax);
    push(memoryAGet16(ds, 0xa7de));
    ax = memoryAGet16(ds, 0xa533);
    ax += memoryAGet16(ds, 0xa531);
    ax -= 0x0030;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x107c);
    sp += 0x0006;
    memoryASet16(ds, 0xa531, memoryAGet16(ds, 0xa531) - 0x0030);
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + 0x000c);
    ax = 0x1bcd;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c09d(); assert(cs == 0x107c);
    sp += 0x0002;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x107c);
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x107c);
    sp += 0x0002;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x107c);
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x107c);
    push(cs); cs = 0x1493; sub_15e1d(); assert(cs == 0x107c);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1493f() // 1493:000f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    cx = memoryAGet16(ss, bp + 6);
    ax = cx;
    ax <<= 1;
    ax += cx;
    memoryASet16(ss, bp - 6, ax);
    es = memoryAGet16(ds, 0xcba9);
    bx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) & 0xffff);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) & 0x00ff);
    if (memoryAGet16(ss, bp - 2) != 0x00ff)
        goto loc_14985;
    if (memoryAGet16(ss, bp - 4) != 0xffff)
        goto loc_14985;
    memoryASet16(ss, bp - 2, 0xffff);
    memoryASet16(ss, bp - 4, 0xffff);
loc_14985: // 1493:0055
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_149c4() // 1493:0094 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    push(dx);
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    ax = 0x0004;
    push(ax);
    ax = 0xcb95;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = si;
    ax++;
    push(ax);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    push(ax);
    push(dx);
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    bx = pop();
    cx = pop();
    flags.carry = cx < ax;
    cx -= ax;
    bx = bx - dx - flags.carry;
    flags.carry = (cx + 0xfffc) >= 0x10000;
    cx += 0xfffc;
    bx += 0xffff + flags.carry;
    memoryASet16(ds, 0xcb9b, bx);
    memoryASet16(ds, 0xcb99, cx);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14a24() // 1493:00f4 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ss, bp + 14) < (short)0x0000)
        goto loc_14a41;
    if ((short)memoryAGet16(ss, bp + 14) > (short)0x0000)
        goto loc_14a35;
    if (memoryAGet16(ss, bp + 12) <= 0xffff)
        goto loc_14a41;
loc_14a35: // 1493:0105
    ax = 0x3a66;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_14a41: // 1493:0111
    push(ds);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 10);
    ah = 0x3f;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_14a5c;
    memoryASet16(ds, 0x0094, ax);
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_14a5c: // 1493:012c
    if (ax == memoryAGet16(ss, bp + 12))
        goto loc_14a6b;
    memoryASet16(ds, 0x0094, 0x000b);
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_14a6b: // 1493:013b
    ax = 0x0001;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14a70() // 1493:0140 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ss, bp + 14) < (short)0x0000)
        goto loc_14a8d;
    if ((short)memoryAGet16(ss, bp + 14) > (short)0x0000)
        goto loc_14a81;
    if (memoryAGet16(ss, bp + 12) <= 0xffff)
        goto loc_14a8d;
loc_14a81: // 1493:0151
    ax = 0x3a90;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_14a8d: // 1493:015d
    push(ds);
    bx = memoryAGet16(ss, bp + 6);
    cx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 8);
    ds = memoryAGet16(ss, bp + 10);
    ah = 0x40;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_14aa8;
    memoryASet16(ds, 0x0094, ax);
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_14aa8: // 1493:0178
    if (ax == memoryAGet16(ss, bp + 12))
        goto loc_14ab7;
    memoryASet16(ds, 0x0094, 0x0008);
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_14ab7: // 1493:0187
    ax = 0x0001;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14bb3() // 1493:0283 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = di;
    cx = 0;
    goto loc_14bf2;
loc_14bc1: // 1493:0291
    if (memoryAGet16(ds, si) < 0x0100)
        goto loc_14bd6;
    ax = memoryAGet16(ds, si);
    ax -= 0x0100;
    ax <<= 1;
    ax <<= 1;
    dx = di;
    dx += ax;
    memoryASet16(ds, si, dx);
loc_14bd6: // 1493:02a6
    if (memoryAGet16(ds, si + 2) < 0x0100)
        goto loc_14bee;
    ax = memoryAGet16(ds, si + 2);
    ax -= 0x0100;
    ax <<= 1;
    ax <<= 1;
    dx = di;
    dx += ax;
    memoryASet16(ds, si + 2, dx);
loc_14bee: // 1493:02be
    si += 0x0004;
    cx++;
loc_14bf2: // 1493:02c2
    if ((short)cx < (short)0x00ff)
        goto loc_14bc1;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14bfc() // 1493:02cc +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 18);
    ax += 0x03f8;
    memoryASet16(ss, bp - 12, ax);
    cx = 0;
    bx = 0x0001;
    dx = ss;
    ax = bp + 6;
    push(cs); cs = 0x01ed; sub_50a5(); assert(cs == 0x1493);
    cx = 0;
    bx = 0x0001;
    dx = ss;
    ax = bp + 6;
    push(cs); cs = 0x01ed; sub_50e9(); assert(cs == 0x1493);
    cx = 0;
    bx = 0x0001;
    dx = ss;
    ax = bp + 10;
    push(cs); cs = 0x01ed; sub_50a5(); assert(cs == 0x1493);
    cx = 0;
    bx = 0x0001;
    dx = ss;
    ax = bp + 10;
    push(cs); cs = 0x01ed; sub_50e9(); assert(cs == 0x1493);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, ax);
    ax += memoryAGet16(ss, bp + 14);
    memoryASet16(ss, bp - 10, ax);
    if ((short)memoryAGet16(ss, bp + 16) > (short)0x0000)
        goto loc_14cbb;
    if ((short)memoryAGet16(ss, bp + 16) < (short)0x0000)
        goto loc_14c75;
    if (memoryAGet16(ss, bp + 14) >= 0xfff0)
        goto loc_14cbb;
loc_14c75: // 1493:0345
    bx = memoryAGet16(ss, bp - 12);
    si = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 6);
    ds = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 10);
    ch = memoryAGet(ds, si);
    si++;
    cl = 0x01;
loc_14c8c: // 1493:035c
    if (ch & cl)
        goto loc_14c99;
    dx = memoryAGet16(ss, bx);
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    if (flags.carry)
        goto loc_14ca1;
    if (!flags.carry)
        goto loc_14ca6;
loc_14c99: // 1493:0369
    dx = memoryAGet16(ss, bx + 2);
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    if (!flags.carry)
        goto loc_14ca6;
loc_14ca1: // 1493:0371
    ch = memoryAGet(ds, si);
    si++;
    cl = 0x01;
loc_14ca6: // 1493:0376
    if (!dh)
        goto loc_14cae;
    bx = dx;
    goto loc_14c8c;
loc_14cae: // 1493:037e
    memoryASet(es, di, dl);
    di++;
    bx = memoryAGet16(ss, bp - 12);
    if (di != ax)
        goto loc_14c8c;
    goto loc_14d1b;
loc_14cbb: // 1493:038b
    flags.carry = memoryAGet16(ss, bp + 14) < 0x0001;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) - 0x0001);
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) - 0x0000 - flags.carry);
    bx = memoryAGet16(ss, bp - 12);
    cl = 0x01;
    si = memoryAGet16(ss, bp - 4);
    di = memoryAGet16(ss, bp - 8);
    es = memoryAGet16(ss, bp - 6);
    ds = memoryAGet16(ss, bp - 2);
    al = lodsb<DS_SI>();
loc_14cd5: // 1493:03a5
    if (al & cl)
        goto loc_14cde;
    dx = memoryAGet16(ss, bx);
    goto loc_14ce2;
loc_14cde: // 1493:03ae
    dx = memoryAGet16(ss, bx + 2);
loc_14ce2: // 1493:03b2
    flags.carry = !!(cl & 0x80);
    cl <<= 1;
    if (!flags.carry)
        goto loc_14cf5;
    al = lodsb<DS_SI>();
    if (si < 0x0010)
        goto loc_14cf3;
    cx = ds;
    cx++;
    ds = cx;
    si = 0;
loc_14cf3: // 1493:03c3
    cl = 0x01;
loc_14cf5: // 1493:03c5
    if (!dh)
        goto loc_14cfd;
    bx = dx;
    goto loc_14cd5;
loc_14cfd: // 1493:03cd
    memoryASet(es, di, dl);
    di++;
    bx = memoryAGet16(ss, bp - 12);
    if (di < 0x0010)
        goto loc_14d10;
    dx = es;
    dx++;
    es = dx;
    di = 0;
loc_14d10: // 1493:03e0
    flags.carry = memoryAGet16(ss, bp + 14) < 0x0001;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) - 0x0001);
    if (!flags.carry)
        goto loc_14cd5;
    memoryASet16(ss, bp + 16, memoryAGet16(ss, bp + 16) - 1);
    if ((short)memoryAGet16(ss, bp + 16) >= 0)
        goto loc_14cd5;
loc_14d1b: // 1493:03eb
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14d25() // 1493:03f5 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0012;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 14);
    bx = 0x0002;
    ax = si;
    dx = 0;
    div16(bx);
    si = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, dx);
    ax = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, dx);
    goto loc_14e58;
loc_14d56: // 1493:0426
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 0x0002);
    ax = di;
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x00a7)
        goto loc_14ddc;
    ax = di;
    ax &= 0x00ff;
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_14d99;
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    ah = 0x00;
    di |= ax;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 1);
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, di);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
    si--;
    goto loc_14e58;
loc_14d99: // 1493:0469
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    ah = 0x00;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 1);
    ax <<= 1;
    dx = memoryAGet16(ss, bp - 16);
    bx = memoryAGet16(ss, bp - 18);
    bx -= ax;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, bx);
    si -= memoryAGet16(ss, bp - 4);
    goto loc_14dd0;
loc_14dbc: // 1493:048c
    bx = memoryAGet16(ss, bp - 10); es = memoryAGet16(ss, bp - 10 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x0002);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
loc_14dd0: // 1493:04a0
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
    if (ax)
        goto loc_14dbc;
    goto loc_14e58;
loc_14ddc: // 1493:04ac
    if (memoryAGet16(ss, bp - 2) != 0x00a8)
        goto loc_14e4d;
    ax = di;
    ax &= 0x00ff;
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_14e0b;
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    ah = 0x00;
    di |= ax;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 1);
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, di);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
    si--;
    goto loc_14e58;
loc_14e0b: // 1493:04db
    bx = memoryAGet16(ss, bp - 14); es = memoryAGet16(ss, bp - 14 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 0x0002);
    ax <<= 1;
    dx = memoryAGet16(ss, bp + 12);
    bx = memoryAGet16(ss, bp + 10);
    bx += ax;
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 10, bx);
    si -= memoryAGet16(ss, bp - 4);
    goto loc_14e41;
loc_14e2d: // 1493:04fd
    bx = memoryAGet16(ss, bp - 10); es = memoryAGet16(ss, bp - 10 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) + 0x0002);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
loc_14e41: // 1493:0511
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 1);
    if (ax)
        goto loc_14e2d;
    goto loc_14e58;
loc_14e4d: // 1493:051d
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    memoryASet16(es, bx, di);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
    si--;
loc_14e58: // 1493:0528
    if (!si)
        goto loc_14e5f;
    goto loc_14d56;
loc_14e5f: // 1493:052f
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14fb5() // 1493:0685 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    ax = 0;
    dx = 0x0002;
    push(ax);
    push(dx);
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x1493);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    push(ax);
    push(dx);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_512d(); assert(cs == 0x1493);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 16, ax);
    bx = memoryAGet16(ss, bp + 18);
    si = memoryAGet16(ss, bp - 8);
    di = memoryAGet16(ss, bp - 12);
    es = memoryAGet16(ss, bp - 10);
    ds = memoryAGet16(ss, bp - 6);
loc_1501b: // 1493:06eb
    ax = lodsw<DS_SI>();
    if (ax == bx)
        goto loc_15023;
    stosw<ES_DI>(ax);
    goto loc_15029;
loc_15023: // 1493:06f3
    ax = lodsw<DS_SI>();
    cx = ax;
    ax = lodsw<DS_SI>();
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
loc_15029: // 1493:06f9
    if (si < 0x0010)
        goto loc_15042;
    ax = si;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    dx = ds;
    dx += ax;
    ds = dx;
    si &= 0x000f;
loc_15042: // 1493:0712
    if (di < 0x0010)
        goto loc_1505b;
    ax = di;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    dx = es;
    dx += ax;
    es = dx;
    di &= 0x000f;
loc_1505b: // 1493:072b
    if (di != memoryAGet16(ss, bp - 16))
        goto loc_1501b;
    ax = es;
    if (ax < memoryAGet16(ss, bp - 14))
        goto loc_1501b;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15071() // 1493:0741 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ds, 0xcba5, 0x6a86);
    memoryASet16(ds, 0xcba9, 0x22f5);
    push(memoryAGet16(ds, 0xcba5));
    push(cs);
    sub_14bb3();
    sp += 0x0002;
    ax = 0x8001;
    push(ax);
    ax = 0x3abb;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1493);
    sp += 0x0004;
    memoryASet16(ds, 0xcba1, ax);
    if (memoryAGet16(ds, 0xcba1) != 0xffff)
        goto loc_150b4;
    ax = 0x3ac8;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_150b4: // 1493:0784
    ax = 0;
    dx = 0x01cc;
    push(ax);
    push(dx);
    ax = 0xa552;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(cs);
    sub_149c4();
    sp += 0x0002;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    push(memoryAGet16(ds, 0xcba5));
    ax = 0;
    dx = 0x01cc;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xa552));
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_14bfc();
    sp += 0x000e;
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
    ax = 0;
    dx = 0x000c;
    push(ax);
    push(dx);
    ax = 0xcbab;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_149c4();
    sp += 0x0002;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    push(memoryAGet16(ds, 0xcba5));
    ax = 0;
    dx = 0x01cc;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xcbab));
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_14bfc();
    sp += 0x000e;
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
    ax = 0;
    dx = 0x1bea;
    push(ax);
    push(dx);
    ax = 0xc755;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_149c4();
    sp += 0x0002;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    push(memoryAGet16(ds, 0xcb9b));
    push(memoryAGet16(ds, 0xcb99));
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    push(memoryAGet16(ds, 0xcba5));
    ax = 0;
    dx = 0x1bea;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xc755));
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs);
    sub_14bfc();
    sp += 0x000e;
    ax = bp - 2;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1520d() // 1493:08dd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xc8a1, 0x2670);
    ax = 0x0100;
    push(ax);
    ax = 0x8001;
    push(ax);
    ax = 0x3ae2;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1493);
    sp += 0x0006;
    memoryASet16(ds, 0xcb9f, ax);
    if (ax != 0xffff)
        goto loc_1523e;
    ax = 0x3aef;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_1523e: // 1493:090e
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15240() // 1493:0910 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xcba3, 0x6686);
    push(memoryAGet16(ds, 0xcba3));
    push(cs);
    sub_14bb3();
    sp += 0x0002;
    memoryASet16(ds, 0xcba7, 0x22cc);
    ax = 0x0100;
    push(ax);
    ax = 0x8001;
    push(ax);
    ax = 0x3b08;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1493);
    sp += 0x0006;
    memoryASet16(ds, 0xcb9d, ax);
    if (ax != 0xffff)
        goto loc_15282;
    ax = 0x3b12;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15282: // 1493:0952
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15284() // 1493:0954 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1520d();
    push(cs);
    sub_15071();
    push(cs);
    sub_15240();
    memoryASet16(ds, 0xa7ed, 0xffff);
    memoryASet(ds, 0x7aec, 0x01);
    memoryASet(ds, 0xa7e6, 0x00);
    memoryASet16(ds, 0x7aea, 0x1493); 
    memoryASet16(ds, 0x7ae8, 0x1650);
    memoryASet16(ds, 0x7ae6, 0x1493);
    memoryASet16(ds, 0x7ae4, 0x17bf);
    memoryASet16(ds, 0x7ae2, 0x1493);
    memoryASet16(ds, 0x7ae0, 0x1812);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_152c9() // 1493:0999 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ds, 0xcb9f));
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1493);
    sp += 0x0002;
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1493);
    sp += 0x0002;
    push(memoryAGet16(ds, 0xcb9d));
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1493);
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_152f2() // 1493:09c2 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0012;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 51037) == 0x0000)
        goto loc_1531f;
    ax = 0;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1531f: // 1493:09ef
    bx = si;
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xcba7);
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 6);
    dx = memoryAGet16(es, bx + 4);
    flags.carry = dx < memoryAGet16(ss, bp - 4);
    dx -= memoryAGet16(ss, bp - 4);
    ax = ax - memoryAGet16(ss, bp - 2) - flags.carry;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ds, 0xcb9d));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15399;
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_15374;
    if (memoryAGet16(ss, bp - 8) > 0x1000)
        goto loc_15399;
loc_15374: // 1493:0a44
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ds, 0xcbed));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcb9d));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ds, 0xcbed);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, 0x0000);
    goto loc_153e7;
loc_15399: // 1493:0a69
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    ax = bp - 14;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_153b5;
    goto loc_15453;
loc_153b5: // 1493:0a85
    ax = 0x0001;
    push(ax);
    ax = bp - 14;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1493);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 14));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcb9d));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, 0x0000);
loc_153e7: // 1493:0ab7
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0004);
    push(memoryAGet16(ss, bp - 10));
    push(dx);
    ax = si;
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) != 0x0000)
        goto loc_15438;
    push(memoryAGet16(ds, 0xcba3));
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 51037));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    sub_14bfc();
    sp += 0x000e;
loc_15438: // 1493:0b08
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0000)
        goto loc_15453;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15447;
    if (memoryAGet16(ss, bp - 8) <= 0x1000)
        goto loc_15453;
loc_15447: // 1493:0b17
    ax = bp - 14;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15453: // 1493:0b23
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15458() // 1493:0b28 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = memoryAGet16(ds, 0xcb93);
    if (!ax)
        goto loc_154a3;
    if (ax == 0x0001)
        goto loc_15472;
    if (ax == 0x0002)
        goto loc_15476;
    goto loc_15479;
  // gap 2 bytes
loc_15472: // 1493:0b42
    si = 0;
    goto loc_15479;
loc_15476: // 1493:0b46
    si = 0x0034;
loc_15479: // 1493:0b49
    di = 0;
    goto loc_1549e;
loc_1547d: // 1493:0b4d
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 51037) == 0x0000)
        goto loc_1549c;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_1549c: // 1493:0b6c
    di++;
    si++;
loc_1549e: // 1493:0b6e
    if (di < 0x0034)
        goto loc_1547d;
loc_154a3: // 1493:0b73
    ax = memoryAGet16(ds, 0xc635);
    if (!ax)
        goto loc_154da;
    if (ax == 0x0001)
        goto loc_154ba;
    if (ax == 0x0002)
        goto loc_154be;
    goto loc_154c1;
  // gap 4 bytes
loc_154ba: // 1493:0b8a
    si = 0;
    goto loc_154c1;
loc_154be: // 1493:0b8e
    si = 0x0034;
loc_154c1: // 1493:0b91
    di = 0;
    goto loc_154cf;
loc_154c5: // 1493:0b95
    push(si);
    push(cs);
    sub_152f2();
    sp += 0x0002;
    di++;
    si++;
loc_154cf: // 1493:0b9f
    if (di < 0x0034)
        goto loc_154c5;
    ax = memoryAGet16(ds, 0xc635);
    memoryASet16(ds, 0xcb93, ax);
loc_154da: // 1493:0baa
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_154de() // 1493:0bae +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    memoryASet16(ds, 0x7476, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ds, 0x7474, ax);
    ax = memoryAGet16(ss, bp + 6);
    ds = ax;
    bx = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 10);
    bp = memoryAGet16(ss, bp + 16);
    bp <<= 1;
    bp = memoryAGet16(ss, bp + 24530);
    dx = memoryAGet16(ss, 0x7476);
loc_15508: // 1493:0bd8
    memoryASet(ds, di, 0xff);
    cx = memoryAGet16(ss, 0x7474);
loc_15510: // 1493:0be0
    al = memoryAGet(ds, bx);
    al = ~al;
    bx++;
    ah = 0;
    ax <<= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + si);
    ax = ~ax;
    memoryASet(ds, di, memoryAGet(ds, di) & al);
    di++;
    memoryASet(ds, di, ah);
    if (--cx)
        goto loc_15510;
    di++;
    dx--;
    if (dx)
        goto loc_15508;
    dx = memoryAGet16(ss, 0x7476);
    dx <<= 1;
    dx <<= 1;
loc_15533: // 1493:0c03
    memoryASet(ds, di, 0x00);
    cx = memoryAGet16(ss, 0x7474);
loc_1553b: // 1493:0c0b
    al = memoryAGet(ds, bx);
    bx++;
    ah = 0;
    ax <<= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + si);
    memoryASet(ds, di, memoryAGet(ds, di) | al);
    di++;
    memoryASet(ds, di, ah);
    if (--cx)
        goto loc_1553b;
    di++;
    dx--;
    if (dx)
        goto loc_15533;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15559() // 1493:0c29 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0016;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0012;
    imul16(dx);
    ax += 0xf748;
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 18, dx);
    memoryASet16(ss, bp - 20, ax);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    imul16(memoryAGet16(es, bx));
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    dx++;
    imul16(dx);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 10, 0x0018);
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x0005;
    imul16(dx);
    dx = memoryAGet16(ss, bp - 10);
    dx += ax;
    memoryASet16(ss, bp - 8, dx);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x0005;
    imul16(dx);
    dx = memoryAGet16(ss, bp - 8);
    dx += ax;
    memoryASet16(ss, bp - 6, dx);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x0005;
    imul16(dx);
    dx = memoryAGet16(ss, bp - 6);
    dx += ax;
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x0005;
    imul16(dx);
    dx = memoryAGet16(ss, bp - 4);
    dx += ax;
    memoryASet16(ss, bp - 2, dx);
    bx = memoryAGet16(es, bx + 16);
    bx <<= 1;
    ax = bp - 10;
    bx += ax;
    ax = memoryAGet16(ds, bx);
    memoryASet16(ss, bp - 16, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_15606;
    goto loc_1582f;
loc_15606: // 1493:0cd6
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 22, ax);
    push(memoryAGet16(ds, 0xcba5));
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x0005;
    imul16(dx);
    dx = 0;
    push(dx);
    push(ax);
    ax = 0x0018;
    push(memoryAGet16(ss, bp - 22));
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_14bfc();
    sp += 0x000e;
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 16);
    if (ax == 0x0001)
        goto loc_15652;
    if (ax == 0x0002)
        goto loc_1568a;
    if (ax != 0x0004)
        goto loc_1564f;
    goto loc_15722;
loc_1564f: // 1493:0d1f
    goto loc_15823;
loc_15652: // 1493:0d22
    di = 0;
    goto loc_1567f;
loc_15656: // 1493:0d26
    bx = di;
    bx <<= 1;
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(es, bx, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 8, ax);
    bx = di;
    bx <<= 1;
    push(es);
    si = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, si);
    es = pop();
    memoryASet16(es, bx + 16, ax);
    di++;
loc_1567f: // 1493:0d4f
    if ((short)di < (short)0x0004)
        goto loc_15656;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1568a: // 1493:0d5a
    di = 0;
    goto loc_156b7;
loc_1568e: // 1493:0d5e
    bx = di;
    bx <<= 1;
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(es, bx, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 8, ax);
    bx = di;
    bx <<= 1;
    push(es);
    si = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, si);
    es = pop();
    memoryASet16(es, bx + 16, ax);
    di++;
loc_156b7: // 1493:0d87
    if ((short)di < (short)0x0002)
        goto loc_1568e;
    di = 0x0002;
    goto loc_156ec;
loc_156c1: // 1493:0d91
    bx = di;
    bx <<= 1;
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(es, bx, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, bx + 8, ax);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax++;
    es = memoryAGet16(ss, bp - 22);
    bx = di;
    bx <<= 1;
    memoryASet16(es, bx + 16, ax);
    di++;
loc_156ec: // 1493:0dbc
    if ((short)di < (short)0x0004)
        goto loc_156c1;
    ax = 0x0004;
    push(ax);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = memoryAGet16(ss, bp - 22);
    push(memoryAGet16(es, 0x0004));
    push(memoryAGet16(es, 0x0000));
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs);
    sub_154de();
    sp += 0x000c;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_15722: // 1493:0df2
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(es, 0x0000, ax);
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(es, 0x0008, ax);
    push(es);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    es = pop();
    memoryASet16(es, 0x0010, ax);
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(es, 0x0002, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, 0x000a, ax);
    es = memoryAGet16(ss, bp - 18);
    ax = memoryAGet16(es, bx);
    ax++;
    es = memoryAGet16(ss, bp - 22);
    memoryASet16(es, 0x0012, ax);
    ax = 0x0002;
    push(ax);
    es = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = memoryAGet16(ss, bp - 22);
    push(memoryAGet16(es, 0x0002));
    push(memoryAGet16(es, 0x0000));
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs);
    sub_154de();
    sp += 0x000c;
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(es, 0x0004, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, 0x000c, ax);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax++;
    es = memoryAGet16(ss, bp - 22);
    memoryASet16(es, 0x0014, ax);
    ax = 0x0004;
    push(ax);
    es = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = memoryAGet16(ss, bp - 22);
    push(memoryAGet16(es, 0x0004));
    push(memoryAGet16(es, 0x0000));
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs);
    sub_154de();
    sp += 0x000c;
    es = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(es, 0x0006, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, 0x000e, ax);
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax++;
    es = memoryAGet16(ss, bp - 22);
    memoryASet16(es, 0x0016, ax);
    ax = 0x0006;
    push(ax);
    es = memoryAGet16(ss, bp - 18);
    push(memoryAGet16(es, bx + 2));
    push(memoryAGet16(es, bx));
    es = memoryAGet16(ss, bp - 22);
    push(memoryAGet16(es, 0x0006));
    push(memoryAGet16(es, 0x0000));
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs);
    sub_154de();
    sp += 0x000c;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_15823: // 1493:0ef3
    ax = 0x3b28;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_1582f: // 1493:0eff
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15835() // 1493:0f05 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if ((short)si < (short)0x0209)
        goto loc_158b3;
    if ((short)si >= (short)0x127f)
        goto loc_158b3;
    if ((short)si >= (short)0x020a)
        goto loc_1585d;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0d80);
    goto loc_158c7;
loc_1585d: // 1493:0f2d
    if ((short)si >= (short)0x020b)
        goto loc_1586f;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x05a0);
    goto loc_158c7;
loc_1586f: // 1493:0f3f
    if ((short)si >= (short)0x071b)
        goto loc_15881;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0080);
    goto loc_158c7;
loc_15881: // 1493:0f51
    if ((short)si >= (short)0x127f)
        goto loc_15893;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x00a0);
    goto loc_158c7;
loc_15893: // 1493:0f63
    if ((short)si >= (short)0x127f)
        goto loc_158a5;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0200);
    goto loc_158c7;
loc_158a5: // 1493:0f75
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, 0x0280);
    goto loc_158c7;
  // gap 2 bytes
loc_158b3: // 1493:0f83
    bx = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 0x0004);
loc_158c7: // 1493:0f97
    if ((short)si < (short)0x007c)
        goto loc_158e5;
    if ((short)si >= (short)0x0209)
        goto loc_158e5;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(si);
    push(cs);
    sub_15559();
    sp += 0x0006;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_158e5: // 1493:0fb5
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = si;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) != 0x0000)
        goto loc_15924;
    push(memoryAGet16(ds, 0xcba5));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    bx = si;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_14bfc();
    sp += 0x000e;
loc_15924: // 1493:0ff4
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15a47() // 1493:1117 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, di, memoryAGet(es, di) | dl);
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_15a84;
    ax = 0;
    push(ax);
    ax = di;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_15a84: // 1493:1154
    push(di);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) > (short)0x0000)
        goto loc_15aa6;
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x0000)
        goto loc_15a9d;
    goto loc_15b8a;
loc_15a9d: // 1493:116d
    if (memoryAGet16(ss, bp - 4) >= 0x0000)
        goto loc_15aa6;
    goto loc_15b8a;
loc_15aa6: // 1493:1176
    ax = di;
    ax++;
    si = ax;
    goto loc_15aae;
loc_15aad: // 1493:117d
    si++;
loc_15aae: // 1493:117e
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    if (dx != 0xffff)
        goto loc_15ac0;
    if (ax == 0xffff)
        goto loc_15aad;
loc_15ac0: // 1493:1190
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    flags.carry = ax < memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ss, bp - 4);
    dx = dx - memoryAGet16(ss, bp - 2) - flags.carry;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15b1d;
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_15af8;
    if (memoryAGet16(ss, bp - 8) > 0x1000)
        goto loc_15b1d;
loc_15af8: // 1493:11c8
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ds, 0xcbed));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ds, 0xcbed);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    goto loc_15b61;
loc_15b1d: // 1493:11ed
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1493);
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 10));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 14, 0x0000);
loc_15b61: // 1493:1231
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 14));
    push(di);
    push(cs);
    sub_15835();
    sp += 0x0006;
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0000)
        goto loc_15b8a;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15b7e;
    if (memoryAGet16(ss, bp - 8) <= 0x1000)
        goto loc_15b8a;
loc_15b7e: // 1493:124e
    ax = bp - 10;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15b8a: // 1493:125a
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15b90() // 1493:1260 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0018;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    if ((short)memoryAGet16(ds, 0xa7ed) <= (short)0xffff)
        goto loc_15bc4;
    bx = memoryAGet16(ds, 0xa7ed);
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52145) == 0x0000)
        goto loc_15bc4;
    ax = 0x0003;
    push(ax);
    ax = memoryAGet16(ds, 0xa7ed);
    ax <<= 1;
    ax += 0xcbb1;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15bc4: // 1493:1294
    si = 0;
    goto loc_15be4;
loc_15bc8: // 1493:1298
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 42983) == 0x0000)
        goto loc_15be3;
    ax = si;
    ax <<= 1;
    ax += 0xa7e7;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15be3: // 1493:12b3
    si++;
loc_15be4: // 1493:12b4
    if ((short)si < (short)0x0003)
        goto loc_15bc8;
    memoryASet16(ds, 0xa7ed, di);
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52145) != 0x0000)
        goto loc_15c73;
    es = memoryAGet16(ds, 0xc8a1);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 4);
    dx = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    if ((short)memoryAGet16(ss, bp - 2) > (short)0x0000)
        goto loc_15c2a;
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0000)
        goto loc_15c1e;
    if (memoryAGet16(ss, bp - 4) >= 0x0000)
        goto loc_15c2a;
loc_15c1e: // 1493:12ee
    ax = 0x3b4c;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15c2a: // 1493:12fa
    ax = 0;
    dx = 0x0026;
    push(ax);
    push(dx);
    ax = di;
    ax <<= 1;
    ax += 0xcbb1;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ds, 0xcb9f));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    ax = 0;
    dx = 0x0026;
    push(ax);
    push(dx);
    bx = di;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 52145));
    push(ax);
    push(memoryAGet16(ds, 0xcb9f));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    goto loc_15c86;
loc_15c73: // 1493:1343
    ax = 0;
    push(ax);
    ax = di;
    ax <<= 1;
    ax += 0xcbb1;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15c86: // 1493:1356
    bx = di;
    bx <<= 1;
    es = memoryAGet16(ds, bx + 52145);
    ax = memoryAGet16(es, 0x0012);
    bx = di;
    bx <<= 1;
    imul16(memoryAGet16(es, 0x0014));
    ax <<= 1;
    memoryASet16(ss, bp - 14, ax);
    si = 0;
    goto loc_15def;
loc_15ca5: // 1493:1375
    bx = di;
    bx <<= 1;
    es = memoryAGet16(ds, bx + 52145);
    bx = si;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = di;
    bx <<= 1;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 12);
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, ax);
    ax |= memoryAGet16(ss, bp - 6);
    if (ax)
        goto loc_15cdc;
    goto loc_15dee;
loc_15cdc: // 1493:13ac
    ax = si;
    ax <<= 1;
    ax += 0xa7e7;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 10));
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ds, 0xcb9f));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15d28;
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_15d1b;
    if (memoryAGet16(ss, bp - 8) > 0x1000)
        goto loc_15d28;
loc_15d1b: // 1493:13eb
    ax = memoryAGet16(ds, 0xcbed);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, 0x0000);
    goto loc_15d55;
loc_15d28: // 1493:13f8
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    ax = bp - 12;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = bp - 12;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1493);
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 18, 0x0000);
loc_15d55: // 1493:1425
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(memoryAGet16(ds, 0xcb9f));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 18); es = memoryAGet16(ss, bp - 18 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 22, 0x0000);
    memoryASet16(ss, bp - 24, ax);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0002);
    push(memoryAGet16(ss, bp - 22));
    push(ax);
    ax = bp - 20;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 20));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(memoryAGet16(ss, bp - 18));
    push(cs);
    sub_14d25();
    sp += 0x000a;
    es = memoryAGet16(ds, 0xc8a1);
    push(memoryAGet16(es, 0x0000));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    bx = memoryAGet16(ss, bp - 10);
    push(memoryAGet16(ds, bx));
    push(ax);
    ax += 0x0002;
    push(memoryAGet16(ss, bp - 20));
    push(ax);
    push(cs);
    sub_14fb5();
    sp += 0x000e;
    ax = bp - 20;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0000)
        goto loc_15dee;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_15de2;
    if (memoryAGet16(ss, bp - 8) <= 0x1000)
        goto loc_15dee;
loc_15de2: // 1493:14b2
    ax = bp - 12;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15dee: // 1493:14be
    si++;
loc_15def: // 1493:14bf
    if ((short)si >= (short)0x0003)
        goto loc_15df7;
    goto loc_15ca5;
loc_15df7: // 1493:14c7
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15dfd() // 1493:14cd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0xa7e6) != 0x07)
        goto loc_15e13;
    ax = 0x3b7b;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15e13: // 1493:14e3
    memoryASet(ds, 0x7aec, memoryAGet(ds, 0x7aec) << 1);
    memoryASet(ds, 0xa7e6, memoryAGet(ds, 0xa7e6) + 1);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15e1d() // 1493:14ed +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ds, 0xa7e6);
    ah = 0x00;
    if (ax)
        goto loc_15e35;
    ax = 0x3b98;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15e35: // 1493:1505
    memoryASet(ds, 0x7aec, memoryAGet(ds, 0x7aec) >> 1);
    memoryASet(ds, 0xa7e6, memoryAGet(ds, 0xa7e6) - 1);
    ax = 0;
    push(ax);
    push(cs);
    sub_1617b();
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15e4a() // 1493:151a +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0;
    goto loc_15e63;
loc_15e52: // 1493:1522
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    dl = ~dl;
    es = ax;
    memoryASet(es, si, memoryAGet(es, si) & dl);
    si++;
loc_15e63: // 1493:1533
    if ((short)si < (short)0x128f)
        goto loc_15e52;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15e92() // 1493:1562 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0;
    goto loc_15eba;
loc_15e9a: // 1493:156a
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_15eb9;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15eb9: // 1493:1589
    si++;
loc_15eba: // 1493:158a
    if ((short)si < (short)0x128f)
        goto loc_15e9a;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15ec3() // 1493:1593 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(cs);
    sub_15e4a();
    push(cs); cs = 0x1ef3; sub_1f85b(); assert(cs == 0x1493);
    si = 0;
    goto loc_15ef4;
loc_15ed4: // 1493:15a4
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52145) == 0x0000)
        goto loc_15ef3;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0xcbb1;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15ef3: // 1493:15c3
    si++;
loc_15ef4: // 1493:15c4
    if ((short)si < (short)0x001e)
        goto loc_15ed4;
    si = 0;
    goto loc_15f19;
loc_15efd: // 1493:15cd
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 42983) == 0x0000)
        goto loc_15f18;
    ax = si;
    ax <<= 1;
    ax += 0xa7e7;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_15f18: // 1493:15e8
    si++;
loc_15f19: // 1493:15e9
    if ((short)si < (short)0x0003)
        goto loc_15efd;
    si = 0;
    goto loc_15f42;
loc_15f22: // 1493:15f2
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 51037) == 0x0000)
        goto loc_15f41;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15f41: // 1493:1611
    si++;
loc_15f42: // 1493:1612
    if ((short)si < (short)0x00a2)
        goto loc_15f22;
    push(cs);
    sub_15e92();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15f4f() // 1493:161f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0;
    goto loc_15f77;
loc_15f57: // 1493:1627
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_15f76;
    ax = 0x0003;
    push(ax);
    ax = si;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_15f76: // 1493:1646
    si++;
loc_15f77: // 1493:1647
    if ((short)si < (short)0x128f)
        goto loc_15f57;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1617b() // 1493:184b +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0026;
    push(si);
    push(di);
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_1618e;
    ax = 0x0001;
    goto loc_16190;
loc_1618e: // 1493:185e
    ax = 0;
loc_16190: // 1493:1860
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, 0x0000);
    di = 0;
    goto loc_161f3;
loc_1619c: // 1493:186c
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    if (!(memoryAGet(es, di) & dl))
        goto loc_161d3;
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_161cc;
    ax = 0;
    push(ax);
    ax = di;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
    goto loc_161f2;
loc_161cc: // 1493:189c
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    goto loc_161f2;
  // gap 2 bytes
loc_161d3: // 1493:18a3
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_161f2;
    ax = 0x0003;
    push(ax);
    ax = di;
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1493);
    sp += 0x0004;
loc_161f2: // 1493:18c2
    di++;
loc_161f3: // 1493:18c3
    if ((short)di < (short)0x128f)
        goto loc_1619c;
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_16202;
    goto loc_164d5;
loc_16202: // 1493:18d2
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1621e;
    ax = memoryAGet16(ds, 0x7ae8);
    ax |= memoryAGet16(ds, 0x7aea);
    if (!ax)
        goto loc_1621e;
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp + 6));
    switch (memoryAGet32(ds, 0x7ae8))
    {
        case 0x7b1066d: push(cs); cs = 0x07b1; sub_817d(); assert(cs == 0x1493); break;
        default:
            stop();
    }
    sp += 0x0004;
loc_1621e: // 1493:18ee
    ax = 0;
    dx = 0;
    memoryASet16(ss, bp - 30, ax);
    memoryASet16(ss, bp - 32, dx);
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp - 28, dx);
    di = 0;
    goto loc_164b9;
loc_16233: // 1493:1903
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    if (memoryAGet(es, di) & dl)
        goto loc_16246;
    goto loc_164b8;
loc_16246: // 1493:1916
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) == 0x0000)
        goto loc_16254;
    goto loc_164b8;
loc_16254: // 1493:1924
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_16267;
    ax = memoryAGet16(ds, 0x7ae4);
    ax |= memoryAGet16(ds, 0x7ae6);
    if (!ax)
        goto loc_16267;
    switch (memoryAGet32(ds, 0x7ae4))
    {
        case 0x7b107ea: push(cs); cs = 0x07b1; sub_82fa(); assert(cs == 0x1493); break;
        default:
            stop();
    }
loc_16267: // 1493:1937
    push(di);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0000)
        goto loc_16289;
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0000)
        goto loc_16280;
    goto loc_164b8;
loc_16280: // 1493:1950
    if (memoryAGet16(ss, bp - 8) >= 0x0000)
        goto loc_16289;
    goto loc_164b8;
loc_16289: // 1493:1959
    ax = di;
    ax++;
    si = ax;
    goto loc_16291;
loc_16290: // 1493:1960
    si++;
loc_16291: // 1493:1961
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    if (dx != 0xffff)
        goto loc_162a3;
    if (ax == 0xffff)
        goto loc_16290;
loc_162a3: // 1493:1973
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    flags.carry = ax < memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 8);
    dx = dx - memoryAGet16(ss, bp - 6) - flags.carry;
    memoryASet16(ss, bp - 22, dx);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    flags.carry = (dx + memoryAGet16(ss, bp - 24)) >= 0x10000;
    dx += memoryAGet16(ss, bp - 24);
    ax += memoryAGet16(ss, bp - 22) + flags.carry;
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    if ((short)memoryAGet16(ss, bp - 22) <= (short)0x0000)
        goto loc_162d2;
    goto loc_16425;
loc_162d2: // 1493:19a2
    if (memoryAGet16(ss, bp - 22) != 0x0000)
        goto loc_162de;
    if (memoryAGet16(ss, bp - 24) <= 0x1000)
        goto loc_162de;
    goto loc_16425;
loc_162de: // 1493:19ae
    ax = memoryAGet16(ss, bp - 26);
    dx = memoryAGet16(ss, bp - 28);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 6))
        goto loc_162ec;
    goto loc_163c0;
loc_162ec: // 1493:19bc
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_162f6;
    if (dx <= memoryAGet16(ss, bp - 8))
        goto loc_162f6;
    goto loc_163c0;
loc_162f6: // 1493:19c6
    ax = memoryAGet16(ss, bp - 30);
    dx = memoryAGet16(ss, bp - 32);
    if ((short)ax >= (short)memoryAGet16(ss, bp - 10))
        goto loc_16304;
    goto loc_163c0;
loc_16304: // 1493:19d4
    if (ax != memoryAGet16(ss, bp - 10))
        goto loc_1630e;
    if (dx >= memoryAGet16(ss, bp - 12))
        goto loc_1630e;
    goto loc_163c0;
loc_1630e: // 1493:19de
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 28);
    dx = memoryAGet16(ds, 0xcbed);
    memoryASet16(ss, bp - 34, dx);
    memoryASet16(ss, bp - 36, ax);
    goto loc_16488;
  // gap 5 bytes
loc_16326: // 1493:19f6
    si++;
loc_16327: // 1493:19f7
    if ((short)si >= (short)0x128f)
        goto loc_16348;
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    if (!(memoryAGet(es, si) & dl))
        goto loc_16326;
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 31469) != 0x0000)
        goto loc_16326;
loc_16348: // 1493:1a18
    if (si == 0x128f)
        goto loc_163c0;
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, ax);
loc_1635c: // 1493:1a2c
    si++;
    ax = si;
    push(ax);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    if (dx != 0xffff)
        goto loc_16371;
    if (ax == 0xffff)
        goto loc_1635c;
loc_16371: // 1493:1a41
    push(si);
    push(cs);
    sub_1493f();
    sp += 0x0002;
    memoryASet16(ss, bp - 18, dx);
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 14);
    dx = memoryAGet16(ss, bp - 16);
    flags.carry = dx < memoryAGet16(ss, bp - 12);
    dx -= memoryAGet16(ss, bp - 12);
    ax = ax - memoryAGet16(ss, bp - 10) - flags.carry;
    if ((short)ax > 0)
        goto loc_163bd;
    if (ax)
        goto loc_16397;
    if (dx > 0x0400)
        goto loc_163bd;
loc_16397: // 1493:1a67
    ax = memoryAGet16(ss, bp - 18);
    dx = memoryAGet16(ss, bp - 20);
    flags.carry = dx < memoryAGet16(ss, bp - 8);
    dx -= memoryAGet16(ss, bp - 8);
    ax = ax - memoryAGet16(ss, bp - 6) - flags.carry;
    if ((short)ax > 0)
        goto loc_163bd;
    if (ax)
        goto loc_163af;
    if (dx > 0x1000)
        goto loc_163bd;
loc_163af: // 1493:1a7f
    ax = memoryAGet16(ss, bp - 18);
    dx = memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    goto loc_163c0;
loc_163bd: // 1493:1a8d
    si = 0x128f;
loc_163c0: // 1493:1a90
    if ((short)si >= (short)0x128f)
        goto loc_163c9;
    goto loc_16327;
loc_163c9: // 1493:1a99
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    ax = memoryAGet16(ss, bp - 10);
    dx = memoryAGet16(ss, bp - 12);
    flags.carry = dx < memoryAGet16(ss, bp - 8);
    dx -= memoryAGet16(ss, bp - 8);
    ax = ax - memoryAGet16(ss, bp - 6) - flags.carry;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xcbed));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp - 28, dx);
    ax = memoryAGet16(ss, bp - 10);
    dx = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 30, ax);
    memoryASet16(ss, bp - 32, dx);
    ax = memoryAGet16(ds, 0xcbed);
    memoryASet16(ss, bp - 34, ax);
    memoryASet16(ss, bp - 36, 0x0000);
    goto loc_16488;
  // gap 2 bytes
loc_16425: // 1493:1af5
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 24));
    ax = bp - 38;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x1493);
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) == 0x0000)
        goto loc_16441;
    goto loc_164d5;
loc_16441: // 1493:1b11
    ax = 0x0001;
    push(ax);
    ax = bp - 38;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1493);
    sp += 0x0004;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ds, 0xcba1));
    push(cs); cs = 0x01ed; sub_3a99(); assert(cs == 0x1493);
    sp += 0x0008;
    push(memoryAGet16(ss, bp - 22));
    push(memoryAGet16(ss, bp - 24));
    push(memoryAGet16(ss, bp - 38));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xcba1));
    push(cs);
    sub_14a24();
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 38);
    memoryASet16(ss, bp - 34, ax);
    memoryASet16(ss, bp - 36, 0x0000);
loc_16488: // 1493:1b58
    push(memoryAGet16(ss, bp - 34));
    push(memoryAGet16(ss, bp - 36));
    push(di);
    push(cs);
    sub_15835();
    sp += 0x0006;
    if (memoryAGet16(ds, 0xa7ef) != 0x0000)
        goto loc_164d5;
    if ((short)memoryAGet16(ss, bp - 22) < (short)0x0000)
        goto loc_164b8;
    if ((short)memoryAGet16(ss, bp - 22) > (short)0x0000)
        goto loc_164ac;
    if (memoryAGet16(ss, bp - 24) <= 0x1000)
        goto loc_164b8;
loc_164ac: // 1493:1b7c
    ax = bp - 38;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1493);
    sp += 0x0002;
loc_164b8: // 1493:1b88
    di++;
loc_164b9: // 1493:1b89
    if ((short)di >= (short)0x128f)
        goto loc_164c2;
    goto loc_16233;
loc_164c2: // 1493:1b92
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_164d5;
    ax = memoryAGet16(ds, 0x7ae0);
    ax |= memoryAGet16(ds, 0x7ae2);
    if (!ax)
        goto loc_164d5;
    switch (memoryAGet32(ds, 0x7ae0))
    {
        case 0x7b1085b: push(cs); cs = 0x07b1; sub_836b(); assert(cs == 0x1493); break;
        default:
            stop();
    }
loc_164d5: // 1493:1ba5
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_164db() // 164d:000b
{
    sp -= 2;
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x30d4;
    ds = bp;
    bp = sp;
    sp -= 0x0004;
    dx = 0x0060;
    al = in8(dx);
    memoryASet(ss, bp - 1, al);
    dx = 0x0061;
    al = in8(dx);
    memoryASet(ss, bp - 3, al);
    al |= 0x80;
    out8(dx, al);
    al = memoryAGet(ss, bp - 3);
    out8(dx, al);
    if (memoryAGet(ss, bp - 1) != 0xe0)
        goto loc_16512;
    memoryASet16(ds, 0x7478, 0x0001); // keyb
    goto loc_1667a;
loc_16512: // 164d:0042
    if (memoryAGet(ss, bp - 1) != 0xe1)
        goto loc_16521;
    memoryASet16(ds, 0xc645, 0x0001);
    goto loc_1667a;
loc_16521: // 164d:0051
    if (!(memoryAGet(ss, bp - 1) & 0x80))
        goto loc_1653d;
    memoryASet(ss, bp - 1, memoryAGet(ss, bp - 1) & 0x7f);
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    memoryASet16(ds, bx + 50759, 0x0000); //key c647
    goto loc_16674;
loc_1653d: // 164d:006d
    al = memoryAGet(ds, 0x7487);
    memoryASet(ds, 0x7486, al);
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, 0xa545, al);
    memoryASet(ds, 0x7487, al);
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    memoryASet16(ds, bx + 50759, 0x0001);
    if (memoryAGet16(ds, 0xcc03) == 0x0000)
        goto loc_165d6;
    si = 0;
    goto loc_165d1;
loc_16566: // 164d:0096
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52237) != 0x0000) // cc0d
        goto loc_1659d;
    al = memoryAGet(ds, 0x7487);
    if (al != memoryAGet(ds, 0x3bc2))
        goto loc_16586;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 52215, 0x0001); // cbf7
    goto loc_165d0;
loc_16586: // 164d:00b6
    al = memoryAGet(ds, 0x7487);
    if (al != memoryAGet(ds, 0x3bc3))
        goto loc_165d0;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 52207, 0x0001);
    goto loc_165d0;
  // gap 2 bytes
loc_1659d: // 164d:00cd
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52237) != 0x0000) // cc0d
        goto loc_165d0;
    al = memoryAGet(ds, 0x7487);
    if (al != memoryAGet(ds, 0x3bcc))
        goto loc_165bd;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 52215, 0x0001); // cbf7
    goto loc_165d0;
loc_165bd: // 164d:00ed
    al = memoryAGet(ds, 0x7487);
    if (al != memoryAGet(ds, 0x3bcd))
        goto loc_165d0;
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 52207, 0x0001);
loc_165d0: // 164d:0100
    si++;
loc_165d1: // 164d:0101
    if ((short)si < (short)0x0004)
        goto loc_16566;
loc_165d6: // 164d:0106
    if (memoryAGet16(ds, 0x7478) == 0x0000)
        goto loc_165f3;
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    dx = 0x2165;
    bx = ax;
    es = dx;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 2, al);
    goto loc_16668;
loc_165f3: // 164d:0123
    if (memoryAGet(ss, bp - 1) != 0x3a)
        goto loc_165fe;
    memoryASet16(ds, 0x7488, memoryAGet16(ds, 0x7488) ^ 0x0001);
loc_165fe: // 164d:012e
    if (memoryAGet16(ds, 0xc69b) != 0x0000)
        goto loc_1660c;
    if (memoryAGet16(ds, 0xc6b3) == 0x0000)
        goto loc_1663c;
loc_1660c: // 164d:013c
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    dx = 0x215d;
    bx = ax;
    es = dx;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 2, al);
    if (memoryAGet(ss, bp - 2) < 0x41)
        goto loc_16668;
    if (memoryAGet(ss, bp - 2) > 0x5a)
        goto loc_16668;
    if (memoryAGet16(ds, 0x7488) == 0x0000)
        goto loc_16668;
    al += 0x20;
    memoryASet(ss, bp - 2, al);
    goto loc_16668;
  // gap 2 bytes
loc_1663c: // 164d:016c
    al = memoryAGet(ss, bp - 1);
    ah = 0x00;
    dx = 0x2155;
    bx = ax;
    es = dx;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 2, al);
    if (memoryAGet(ss, bp - 2) < 0x61)
        goto loc_16668;
    if (memoryAGet(ss, bp - 2) > 0x7a)
        goto loc_16668;
    if (memoryAGet16(ds, 0x7488) == 0x0000)
        goto loc_16668;
    al += 0xe0;
    memoryASet(ss, bp - 2, al);
loc_16668: // 164d:0198
    if (memoryAGet(ss, bp - 2) == 0x00)
        goto loc_16674;
    al = memoryAGet(ss, bp - 2);
    memoryASet(ds, 0xcc45, al);
loc_16674: // 164d:01a4
    memoryASet16(ds, 0x7478, 0x0000);
loc_1667a: // 164d:01aa
    ax = memoryAGet16(ds, 0x7482);
    ax |= memoryAGet16(ds, 0x7484);
    if (!ax)
        goto loc_1668e;
    if (memoryAGet16(ds, 0x7478) != 0x0000)
        goto loc_1668e;
    push(cs); cs = memoryAGet16(ds, 0x7482 + 2); callIndirect(cs, memoryAGet16(ds, 0x7482)); assert(cs == 0x164d); // 164d:01ba;
loc_1668e: // 164d:01be
    dx = 0x0020;
    al = 0x20;
    out8(dx, al);
    sp = bp;
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop("iret");
}
void sub_166a0() // 164d:01d0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = 0x000b;
    interrupt(0x33);
    memoryASet16(ds, si, cx);
    memoryASet16(ds, di, dx);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_166b8() // 164d:01e8 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0x0003;
    interrupt(0x33);
    memoryASet16(ss, bp - 2, bx);
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_166cd() // 164d:01fd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    ax = 0;
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_166e7;
    al = 0x02;
    goto loc_166e9;
loc_166e7: // 164d:0217
    al = 0x00;
loc_166e9: // 164d:0219
    memoryASet(ss, bp - 3, al);
    al = 0x01;
    cl = memoryAGet(ss, bp - 3);
    al <<= cl;
    memoryASet(ss, bp - 1, al);
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_16700;
    al = 0x03;
    goto loc_16702;
loc_16700: // 164d:0230
    al = 0x01;
loc_16702: // 164d:0232
    memoryASet(ss, bp - 4, al);
    al = 0x01;
    cl = memoryAGet(ss, bp - 4);
    al <<= cl;
    memoryASet(ss, bp - 2, al);
    push(flagAsReg());
    push(si);
    push(di);
    flags.interrupts = 0;
    dx = 0x0201;
    al = in8(dx);
    out8(dx, al);
    ah = memoryAGet(ss, bp - 1);
    ch = memoryAGet(ss, bp - 2);
    si = 0;
    di = 0;
    bh = 0;
    push(bp);
    bp = 0x1388;
loc_16728: // 164d:0258
    al = in8(dx);
    bp--;
    if (!bp)
        goto loc_1673e;
    bl = al;
    bl &= ah;
    si += bx;
    cl = bl;
    bl = al;
    bl &= ch;
    di += bx;
    cl += bl;
    if (cl)
        goto loc_16728;
loc_1673e: // 164d:026e
    bp = pop();
    cl = memoryAGet(ss, bp - 3);
    si >>= cl;
    cl = memoryAGet(ss, bp - 4);
    di >>= cl;
    memoryASet16(ss, bp - 6, si);
    memoryASet16(ss, bp - 8, di);
    di = pop();
    si = pop();
    flagsFromReg(pop());
    bx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, bx, ax);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, bx, ax);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16768() // 164d:0298 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 8);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_166cd();
    sp += 0x0006;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0018;
    imul16(dx);
    ax += 0xcc15;
    si = ax;
    ax = memoryAGet16(ds, si + 4);
    if (ax <= memoryAGet16(ss, bp - 2))
        goto loc_167ce;
    ax = memoryAGet16(ds, si);
    if (ax <= memoryAGet16(ss, bp - 2))
        goto loc_167a4;
    memoryASet16(ss, bp - 2, ax);
loc_167a4: // 164d:02d4
    ax = memoryAGet16(ss, bp - 2);
    ax -= memoryAGet16(ds, si + 4);
    ax = -ax;
    memoryASet16(ss, bp - 2, ax);
    imul16(memoryAGet16(ds, si + 16));
    memoryASet16(ss, bp - 2, ax);
    cl = 0x08;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) >> cl);
    if (memoryAGet16(ss, bp - 2) <= 0x007f)
        goto loc_167c5;
    ax = 0xff81;
    goto loc_167ca;
loc_167c5: // 164d:02f5
    ax = memoryAGet16(ss, bp - 2);
    ax = -ax;
loc_167ca: // 164d:02fa
    memoryASet16(ds, di, ax);
    goto loc_1680b;
loc_167ce: // 164d:02fe
    ax = memoryAGet16(ds, si + 8);
    if (ax >= memoryAGet16(ss, bp - 2))
        goto loc_16807;
    ax = memoryAGet16(ds, si + 12);
    if (ax >= memoryAGet16(ss, bp - 2))
        goto loc_167e1;
    memoryASet16(ss, bp - 2, ax);
loc_167e1: // 164d:0311
    ax = memoryAGet16(ss, bp - 2);
    ax -= memoryAGet16(ds, si + 8);
    memoryASet16(ss, bp - 2, ax);
    imul16(memoryAGet16(ds, si + 20));
    memoryASet16(ss, bp - 2, ax);
    cl = 0x08;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) >> cl);
    if (memoryAGet16(ss, bp - 2) <= 0x007f)
        goto loc_16800;
    ax = 0x007f;
    goto loc_16803;
loc_16800: // 164d:0330
    ax = memoryAGet16(ss, bp - 2);
loc_16803: // 164d:0333
    memoryASet16(ds, di, ax);
    goto loc_1680b;
loc_16807: // 164d:0337
    memoryASet16(ds, di, 0x0000);
loc_1680b: // 164d:033b
    ax = memoryAGet16(ds, si + 6);
    if (ax <= memoryAGet16(ss, bp - 4))
        goto loc_1684b;
    ax = memoryAGet16(ds, si + 2);
    if (ax <= memoryAGet16(ss, bp - 4))
        goto loc_1681e;
    memoryASet16(ss, bp - 4, ax);
loc_1681e: // 164d:034e
    ax = memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ds, si + 6);
    ax = -ax;
    memoryASet16(ss, bp - 4, ax);
    imul16(memoryAGet16(ds, si + 18));
    memoryASet16(ss, bp - 4, ax);
    cl = 0x08;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) >> cl);
    if (memoryAGet16(ss, bp - 4) <= 0x007f)
        goto loc_1683f;
    ax = 0xff81;
    goto loc_16844;
loc_1683f: // 164d:036f
    ax = memoryAGet16(ss, bp - 4);
    ax = -ax;
loc_16844: // 164d:0374
    bx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, bx, ax);
    goto loc_1688e;
loc_1684b: // 164d:037b
    ax = memoryAGet16(ds, si + 10);
    if (ax >= memoryAGet16(ss, bp - 4))
        goto loc_16887;
    ax = memoryAGet16(ds, si + 14);
    if (ax >= memoryAGet16(ss, bp - 4))
        goto loc_1685e;
    memoryASet16(ss, bp - 4, ax);
loc_1685e: // 164d:038e
    ax = memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ds, si + 10);
    memoryASet16(ss, bp - 4, ax);
    imul16(memoryAGet16(ds, si + 22));
    memoryASet16(ss, bp - 4, ax);
    cl = 0x08;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) >> cl);
    if (memoryAGet16(ss, bp - 4) <= 0x007f)
        goto loc_1687d;
    ax = 0x007f;
    goto loc_16880;
loc_1687d: // 164d:03ad
    ax = memoryAGet16(ss, bp - 4);
loc_16880: // 164d:03b0
    bx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, bx, ax);
    goto loc_1688e;
loc_16887: // 164d:03b7
    bx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, bx, 0x0000);
loc_1688e: // 164d:03be
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_168fb;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = dx < memoryAGet16(ds, 0x747a);
    dx -= memoryAGet16(ds, 0x747a);
    ax = ax - memoryAGet16(ds, 0x747c) - flags.carry;
    flags.carry = ax & 1;
    ax >>= 1;
    dx = rcr16(dx, 0x0001);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    ax = memoryAGet16(ss, bp - 8);
    ax |= memoryAGet16(ss, bp - 6);
    if (!ax)
        goto loc_168fb;
    if (memoryAGet16(ss, bp - 6) < 0x0000)
        goto loc_168cd;
    if (memoryAGet16(ss, bp - 6) > 0x0000)
        goto loc_168c3;
    if (memoryAGet16(ss, bp - 8) <= 0x0008)
        goto loc_168cd;
loc_168c3: // 164d:03f3
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, 0x0008);
loc_168cd: // 164d:03fd
    ax = memoryAGet16(ds, di);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    push(dx);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x164d);
    memoryASet16(ds, di, ax);
    bx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, bx);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(ax);
    push(dx);
    dx = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(ss, bp - 8);
    cx = pop();
    bx = pop();
    push(cs); cs = 0x01ed; sub_4f5a(); assert(cs == 0x164d);
    bx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, bx, ax);
loc_168fb: // 164d:042b
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0x747c, ax);
    memoryASet16(ds, 0x747a, dx);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1690f() // 164d:043f +stackDrop2 joystick
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    dx = 0x0201;
    al = in8(dx);
    ah = 0x00;
    bx = ax;
    if (si != 0x0002)
        goto loc_1692f;
    cl = 0x04;
    bx >>= cl;
    bx &= 0x000f;
    bx ^= 0x000f;
    goto loc_16943;
loc_1692f: // 164d:045f
    if (!si)
        goto loc_16937;
    al = 0x06;
    goto loc_16939;
loc_16937: // 164d:0467
    al = 0x04;
loc_16939: // 164d:0469
    cl = al;
    bx >>= cl;
    bx &= 0x0003;
    bx ^= 0x0003;
loc_16943: // 164d:0473
    ax = bx;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16948() // 164d:0478 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
loc_16953: // 164d:0483
    push(si);
    push(cs);
    sub_1690f();
    sp += 0x0002;
    di = ax;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = (dx + 0x0002) >= 0x10000;
    dx += 0x0002;
    ax += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_16970: // 164d:04a0
    sync();
    printf("cmp %04x:%04x = %04x:%04x\n", dx, ax, memoryAGet16(ss, bp - 4), memoryAGet16(ss, bp - 2));
//    ax = memoryAGet16(ds, 0xa53f);
//    dx = memoryAGet16(ds, 0xa53d);
//    if (ax < memoryAGet16(ss, bp - 2))
//        goto loc_16970;
//    if (ax > memoryAGet16(ss, bp - 2))
//        goto loc_16983;
//    if (dx <= memoryAGet16(ss, bp - 4))
//        goto loc_16970;
loc_16983: // 164d:04b3
    push(si);
    push(cs);
    sub_1690f();
    sp += 0x0002;
    memoryASet16(ss, bp - 6, ax);
    if (di != memoryAGet16(ss, bp - 6))
        goto loc_16953;
    ax = di;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1699b() // 164d:04cb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x7484, 0x0000);
    memoryASet16(ds, 0x7482, 0x0000);
    push(cs);
    sub_16d78();
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x01ed; sub_395b(); assert(cs == 0x164d);
    sp += 0x0002;
    memoryASet16(ds, 0x7480, dx);
    memoryASet16(ds, 0x747e, ax);
    ax = 0x164d;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x01ed; sub_396a(); assert(cs == 0x164d);
    sp += 0x0006;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_169d8() // 164d:0508 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0040;
    es = ax;
    ax = memoryAGet16(es, 0x0017);
    ax &= 0xfaf0;
    dx = 0x0040;
    es = dx;
    memoryASet16(es, 0x0017, ax);
    push(memoryAGet16(ds, 0x7480));
    push(memoryAGet16(ds, 0x747e));
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x01ed; sub_396a(); assert(cs == 0x164d);
    sp += 0x0006;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16a06() // 164d:0536 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0033;
    push(ax);
    push(cs); cs = 0x01ed; sub_395b(); assert(cs == 0x164d);
    sp += 0x0002;
    ax |= dx;
    if (!ax)
        goto loc_16a27;
    ax = 0;
    interrupt(0x33);
    if (ax != 0xffff)
        goto loc_16a27;
    ax = 0x0001;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_16a27: // 164d:0557
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16a2b() // 164d:055b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16a30() // 164d:0560 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0018;
    imul16(dx);
    ax += 0xcc15;
    si = ax;
    ax = memoryAGet16(ds, si + 4);
    ax -= memoryAGet16(ds, si);
    dx = 0;
    push(dx);
    push(ax);
    ax = 0;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x164d);
    memoryASet16(ds, si + 16, ax);
    ax = memoryAGet16(ds, si + 12);
    ax -= memoryAGet16(ds, si + 8);
    dx = 0;
    push(dx);
    push(ax);
    ax = 0;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x164d);
    memoryASet16(ds, si + 20, ax);
    ax = memoryAGet16(ds, si + 6);
    ax -= memoryAGet16(ds, si + 2);
    dx = 0;
    push(dx);
    push(ax);
    ax = 0;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x164d);
    memoryASet16(ds, si + 18, ax);
    ax = memoryAGet16(ds, si + 14);
    ax -= memoryAGet16(ds, si + 10);
    dx = 0;
    push(dx);
    push(ax);
    ax = 0;
    dx = 0x8000;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x164d);
    memoryASet16(ds, si + 22, ax);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16aa7() // 164d:05d7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0018;
    imul16(dx);
    ax += 0xcc15;
    si = ax;
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, si + 12, ax);
    ax -= memoryAGet16(ss, bp + 8);
    di = ax;
    bx = 0x0005;
    dx = 0;
    div16(bx);
    memoryASet16(ss, bp - 2, ax);
    ax = di;
    ax >>= 1;
    ax -= memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 4, ax);
    ax = di;
    ax >>= 1;
    ax += memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 8, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ds, si + 2, ax);
    ax = memoryAGet16(ss, bp + 14);
    memoryASet16(ds, si + 14, ax);
    ax -= memoryAGet16(ss, bp + 12);
    di = ax;
    dx = 0;
    div16(bx);
    memoryASet16(ss, bp - 2, ax);
    ax = di;
    ax >>= 1;
    ax -= memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp + 12);
    memoryASet16(ds, si + 6, ax);
    ax = di;
    ax >>= 1;
    ax += memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp + 12);
    memoryASet16(ds, si + 10, ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_16a30();
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16b32() // 164d:0662 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(si);
    push(cs);
    sub_166cd();
    sp += 0x0006;
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_16b66;
    if (memoryAGet16(ss, bp - 2) > 0x137e)
        goto loc_16b66;
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_16b66;
    if (memoryAGet16(ss, bp - 4) <= 0x137e)
        goto loc_16b6d;
loc_16b66: // 164d:0696
    ax = 0;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_16b6d: // 164d:069d
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    push(si);
    push(cs);
    sub_16aa7();
    sp += 0x000a;
    ax = 0x0001;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16b8f() // 164d:06bf +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    memoryASet16(ds, bx + 52294, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16c64() // 164d:0794 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0x748a) != 0x0000)
        goto loc_16cf0;
    di = 0x0001;
    memoryASet16(ss, bp - 2, 0x0001);
    si = 0x0001;
    goto loc_16cad;
loc_16c80: // 164d:07b0
    ax = 0x3d32;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x164d);
    sp += 0x0004;
    if (!ax)
        goto loc_16ca3;
    if (ax == 0x0001)
        goto loc_16ca7;
    goto loc_16cac;
loc_16ca3: // 164d:07d3
    di = 0;
    goto loc_16cac;
loc_16ca7: // 164d:07d7
    memoryASet16(ss, bp - 2, 0x0000);
loc_16cac: // 164d:07dc
    si++;
loc_16cad: // 164d:07dd
    if (si < memoryAGet16(ds, 0x743c))
        goto loc_16c80;
    push(cs);
    sub_1699b();
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_16cc3;
    push(cs);
    sub_16a06();
    goto loc_16cc5;
loc_16cc3: // 164d:07f3
    ax = 0;
loc_16cc5: // 164d:07f5
    memoryASet16(ds, 0xcc4a, ax);
    si = 0;
    goto loc_16ce5;
loc_16ccc: // 164d:07fc
    if (!di)
        goto loc_16cda;
    push(si);
    push(cs);
    sub_16b32();
    sp += 0x0002;
    goto loc_16cdc;
loc_16cda: // 164d:080a
    ax = 0;
loc_16cdc: // 164d:080c
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 52294, ax);
    si++;
loc_16ce5: // 164d:0815
    if (si < 0x0002)
        goto loc_16ccc;
    memoryASet16(ds, 0x748a, 0x0001);
loc_16cf0: // 164d:0820
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16cf6() // 164d:0826 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 8);
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_16d27;
    if (si != 0x0002)
        goto loc_16d0f;
    if (memoryAGet16(ds, 0xcc46) == 0x0000)
        goto loc_16d27;
loc_16d0f: // 164d:083f
    if (si != 0x0003)
        goto loc_16d1b;
    if (memoryAGet16(ds, 0xcc48) == 0x0000)
        goto loc_16d27;
loc_16d1b: // 164d:084b
    if (si != 0x0004)
        goto loc_16d29;
    if (memoryAGet16(ds, 0xcc4a) != 0x0000)
        goto loc_16d29;
loc_16d27: // 164d:0857
    si = 0;
loc_16d29: // 164d:0859
    push(si);
    ax = 0;
    push(ax);
    push(cs);
    sub_171f8();
    sp += 0x0004;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16d38() // 164d:0868 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    if (memoryAGet16(ds, 0x748a) == 0x0000)
        goto loc_16d63;
    push(cs);
    sub_16a2b();
    si = 0;
    goto loc_16d54;
loc_16d4b: // 164d:087b
    push(si);
    push(cs);
    sub_16b8f();
    sp += 0x0002;
    si++;
loc_16d54: // 164d:0884
    if (si < 0x0002)
        goto loc_16d4b;
    push(cs);
    sub_169d8();
    memoryASet16(ds, 0x748a, 0x0000);
loc_16d63: // 164d:0893
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16d78() // 164d:08a8 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet(ds, 0xa545, 0x00);
    memoryASet(ds, 0xcc45, 0x00);
    ax = 0;
    goto loc_16d94;
loc_16d89: // 164d:08b9
    bx = ax;
    bx <<= 1;
    memoryASet16(ds, bx + 50759, 0x0000);
    ax++;
loc_16d94: // 164d:08c4
    if ((short)ax < (short)0x0080)
        goto loc_16d89;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16d9b() // 164d:08cb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 8);
    if (!(dx & 0x0001))
        goto loc_16daf;
    memoryASet16(ds, si, 0x0001);
loc_16daf: // 164d:08df
    if (!(dx & 0x0002))
        goto loc_16dba;
    memoryASet16(ds, si + 2, 0x0001);
loc_16dba: // 164d:08ea
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, si + 4, memoryAGet16(ds, si + 4) + ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ds, si + 6, memoryAGet16(ds, si + 6) + ax);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16dc9() // 164d:08f9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    bx = memoryAGet16(ss, bp + 6);
    ax = 0;
    memoryASet16(ds, bx + 6, ax);
    memoryASet16(ds, bx + 4, ax);
    ax = 0;
    memoryASet16(ds, bx + 2, ax);
    memoryASet16(ds, bx, ax);
    if (memoryAGet16(ds, 0xcc4a) == 0x0000)
        goto loc_16e13;
    push(cs);
    sub_166b8();
    memoryASet16(ss, bp - 2, ax);
    ax = bp - 6;
    push(ax);
    ax = bp - 4;
    push(ax);
    push(cs);
    sub_166a0();
    sp += 0x0004;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_16d9b();
    sp += 0x0008;
loc_16e13: // 164d:0943
    di = 0;
    goto loc_16e83;
loc_16e17: // 164d:0947
    bx = di;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52294) == 0x0000)
        goto loc_16e82;
    si = 0;
    goto loc_16e36;
loc_16e26: // 164d:0956
    bx = si;
    bx <<= 1;
    ax = di;
    ax += 0x0002;
    if (memoryAGet16(ds, bx + 52237) == ax)
        goto loc_16e3d;
    si++;
loc_16e36: // 164d:0966
    if (si < 0x0004)
        goto loc_16e26;
    goto loc_16e82;
loc_16e3d: // 164d:096d
    push(di);
    push(cs);
    sub_1690f();
    sp += 0x0002;
    memoryASet16(ss, bp - 2, ax);
    ax = 0x0001;
    push(ax);
    ax = bp - 6;
    push(ax);
    ax = bp - 4;
    push(ax);
    push(di);
    push(cs);
    sub_16768();
    sp += 0x0008;
    bx = 0x0040;
    ax = memoryAGet16(ss, bp - 4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 6, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_16d9b();
    sp += 0x0008;
loc_16e82: // 164d:09b2
    di++;
loc_16e83: // 164d:09b3
    if (di < 0x0002)
        goto loc_16e17;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_16e8e() // 164d:09be +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 8, ax);
    ax = 0;
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 12, ax);
    memoryASet16(ss, bp - 6, 0x0000);
    if (memoryAGet16(ds, 0x3bd6) != 0x0002)
        goto loc_16f13;
    bx = memoryAGet16(ds, 0xa7e0);
    es = memoryAGet16(ds, 0xa543);
    al = memoryAGet(es, bx + 1);
    memoryASet(ss, bp - 3, al);
    ah = 0x00;
    ax &= 0x0003;
    ax--;
    memoryASet16(ss, bp - 14, ax);
    al = memoryAGet(ss, bp - 3);
    ah = 0x00;
    ax = sar16(ax, 0x0001);
    ax = sar16(ax, 0x0001);
    ax &= 0x0003;
    ax--;
    memoryASet16(ss, bp - 12, ax);
    al = memoryAGet(ss, bp - 3);
    ah = 0x00;
    cl = 0x04;
    ax = sar16(ax, cl);
    ax &= 0x0003;
    memoryASet16(ss, bp - 6, ax);
    al = memoryAGet(es, bx);
    al += 0xff;
    memoryASet(es, bx, al);
    ah = 0x00;
    if (ax)
        goto loc_16f0b;
    memoryASet16(ds, 0xa7e0, memoryAGet16(ds, 0xa7e0) + 0x0002);
    ax = memoryAGet16(ds, 0xa7e0);
    if (ax < memoryAGet16(ds, 0xa541))
        goto loc_16f0b;
    memoryASet16(ds, 0x3bd6, 0x0003);
loc_16f0b: // 164d:0a3b
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_170cc;
loc_16f13: // 164d:0a43
    if (memoryAGet16(ds, 0x3bd6) != 0x0003)
        goto loc_16f29;
    ax = 0x3ee5;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x164d);
    sp += 0x0002;
    goto loc_170cc;
loc_16f29: // 164d:0a59
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52237);
    memoryASet16(ss, bp - 16, ax);
    bx = ax;
    if (bx <= 0x0004)
        goto loc_16f3f;
    goto loc_170cc;
loc_16f3f: // 164d:0a6f
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 3358)); // 164d:0a71;
  // gap 390 bytes
loc_170cc: // 164d:0bfc
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1710a;
    if ((short)memoryAGet16(ss, bp - 8) >= (short)0x0000)
        goto loc_170dd;
    ax = 0xffff;
    goto loc_170ea;
loc_170dd: // 164d:0c0d
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x0000)
        goto loc_170e8;
    ax = 0x0001;
    goto loc_170ea;
loc_170e8: // 164d:0c18
    ax = 0;
loc_170ea: // 164d:0c1a
    memoryASet16(ss, bp - 12, ax);
    if ((short)memoryAGet16(ss, bp - 10) >= (short)0x0000)
        goto loc_170f8;
    ax = 0xffff;
    goto loc_17105;
loc_170f8: // 164d:0c28
    if ((short)memoryAGet16(ss, bp - 10) <= (short)0x0000)
        goto loc_17103;
    ax = 0x0001;
    goto loc_17105;
loc_17103: // 164d:0c33
    ax = 0;
loc_17105: // 164d:0c35
    memoryASet16(ss, bp - 14, ax);
    goto loc_17120;
loc_1710a: // 164d:0c3a
    ax = memoryAGet16(ss, bp - 12);
    dx = 0x007f;
    imul16(dx);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x007f;
    imul16(dx);
    memoryASet16(ss, bp - 10, ax);
loc_17120: // 164d:0c50
    bx = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, bx + 4, ax);
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ds, bx + 8, ax);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ds, bx + 6, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ds, bx + 10, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax &= 0x0001;
    memoryASet16(ds, bx, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax &= 0x0002;
    memoryASet16(ds, bx + 2, ax);
    bx = memoryAGet16(ss, bp - 14);
    bx <<= 1;
    bx += memoryAGet16(ss, bp - 14);
    bx += memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 15656);
    bx = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, bx + 12, ax);
    if (memoryAGet16(ds, 0x3bd6) != 0x0001)
        goto loc_171e8;
    al = memoryAGet(ss, bp - 6);
    cl = 0x04;
    al <<= cl;
    dl = memoryAGet(ss, bp - 12);
    dl++;
    dl <<= 1;
    dl <<= 1;
    al |= dl;
    dl = memoryAGet(ss, bp - 14);
    dl++;
    al |= dl;
    memoryASet(ss, bp - 3, al);
    bx = memoryAGet16(ds, 0xa7e0);
    es = memoryAGet16(ds, 0xa543);
    al = memoryAGet(es, bx + 1);
    if (al != memoryAGet(ss, bp - 3))
        goto loc_171a6;
    if (memoryAGet(es, bx) >= 0xff)
        goto loc_171a6;
    memoryASet(es, bx, memoryAGet(es, bx) + 1);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_171a6: // 164d:0cd6
    if (memoryAGet16(ds, 0xa7e0) != 0x0000)
        goto loc_171bb;
    es = memoryAGet16(ds, 0xa543);
    bx = memoryAGet16(ds, 0xa7e0);
    if (memoryAGet(es, bx) == 0x00)
        goto loc_171c0;
loc_171bb: // 164d:0ceb
    memoryASet16(ds, 0xa7e0, memoryAGet16(ds, 0xa7e0) + 0x0002);
loc_171c0: // 164d:0cf0
    ax = memoryAGet16(ds, 0xa7e0);
    if (ax < memoryAGet16(ds, 0xa541))
        goto loc_171d5;
    ax = 0x3efc;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x164d);
    sp += 0x0002;
loc_171d5: // 164d:0d05
    es = memoryAGet16(ds, 0xa543);
    bx = memoryAGet16(ds, 0xa7e0);
    memoryASet(es, bx, 0x01);
    al = memoryAGet(ss, bp - 3);
    memoryASet(es, bx + 1, al);
loc_171e8: // 164d:0d18
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_171f8() // 164d:0d28 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, bx + 52237, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17209() // 164d:0d39 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if (si)
        goto loc_17219;
    ax = 0;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_17219: // 164d:0d49
    ax = 0;
    push(ax);
    push(si);
    ax = 0xa543;
    push(ax);
    push(cs); cs = 0x174b; sub_17bc2(); assert(cs == 0x164d);
    sp += 0x0006;
    memoryASet16(ds, 0x3bd6, 0x0001);
    ax = si;
    ax &= 0xfffe;
    memoryASet16(ds, 0xa541, ax);
    memoryASet16(ds, 0xa7e0, 0x0000);
    es = memoryAGet16(ds, 0xa543);
    al = 0x00;
    memoryASet(es, 0x0001, al);
    memoryASet(es, 0x0000, al);
    ax = 0x0001;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17251() // 164d:0d81 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xa543, ax);
    memoryASet16(ds, 0x3bd6, 0x0002);
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0xfffe;
    memoryASet16(ds, 0xa541, ax);
    memoryASet16(ds, 0xa7e0, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17271() // 164d:0da1 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x3bd6) != 0x0001)
        goto loc_17287;
    if (memoryAGet16(ds, 0xa7e0) == 0x0000)
        goto loc_17287;
    memoryASet16(ds, 0xa7e0, memoryAGet16(ds, 0xa7e0) + 0x0002);
loc_17287: // 164d:0db7
    memoryASet16(ds, 0x3bd6, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1728f() // 164d:0dbf +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xa543) == 0x0000)
        goto loc_172a5;
    ax = 0xa543;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x164d);
    sp += 0x0002;
loc_172a5: // 164d:0dd5
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_172ef() // 164d:0e1f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
loc_172f5: // 164d:0e25
    al = memoryAGet(ds, 0xa545);
    memoryASet(ss, bp - 1, al);
    ah = 0x00;
    if (!ax)
        goto loc_172f5;
    memoryASet(ds, 0xa545, 0x00);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1732a() // 164d:0e5a +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    goto loc_17381;
loc_17330: // 164d:0e60
    if (memoryAGet16(ds, 0xcc4a) == 0x0000)
        goto loc_1734a;
    push(cs);
    sub_166b8();
    if (!ax)
        goto loc_1734a;
loc_1733f: // 164d:0e6f
    push(cs);
    sub_166b8();
    if (ax)
        goto loc_1733f;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1734a: // 164d:0e7a
    si = 0;
    goto loc_1737c;
loc_1734e: // 164d:0e7e
    sync();
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52294) != 0x0000)
        goto loc_17360;
    if (memoryAGet16(ds, 0xc643) == 0x0000) // 30d4:0xc643
        goto loc_1737b;
loc_17360: // 164d:0e90
    push(si);
    push(cs);
    sub_16948();
    sp += 0x0002;
    if (!ax)
        goto loc_1737b;
loc_1736c: // 164d:0e9c
    push(si);
    push(cs);
    sub_16948();
    sp += 0x0002;
    printf("skip!\n");
//    if (ax) sss
//        goto loc_1736c;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1737b: // 164d:0eab
    si++;
loc_1737c: // 164d:0eac
    if (si < 0x0002)
        goto loc_1734e;
loc_17381: // 164d:0eb1
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (!ax)
        goto loc_17330;
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    memoryASet16(ds, bx + 50759, 0x0000);
    al = memoryAGet(ds, 0xa545);
    if (al != memoryAGet(ds, 0xa545))
        goto loc_173a7;
    memoryASet(ds, 0xa545, 0x00);
loc_173a7: // 164d:0ed7
    memoryASet(ds, 0xa545, 0x00);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_173af() // 164d:0edf +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    memoryASet16(ds, bx + 50759, 0x0000);
    al = memoryAGet(ds, 0xa545);
    if (al != memoryAGet(ds, 0xa545))
        goto loc_173d0;
    memoryASet(ds, 0xa545, 0x00);
loc_173d0: // 164d:0f00
    memoryASet(ds, 0xa545, 0x00);
    if (memoryAGet16(ds, 0xcc4a) == 0x0000)
        goto loc_173e4;
loc_173dc: // 164d:0f0c
    push(cs);
    sub_166b8();
    if (ax)
        goto loc_173dc;
loc_173e4: // 164d:0f14
    si = 0;
    goto loc_17407;
loc_173e8: // 164d:0f18
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52294) != 0x0000)
        goto loc_173fa;
    if (memoryAGet16(ds, 0xc643) == 0x0000)
        goto loc_17406;
loc_173fa: // 164d:0f2a
    push(si);
    push(cs);
    sub_16948();
    sp += 0x0002;
    if (ax)
        goto loc_173fa;
loc_17406: // 164d:0f36
    si++;
loc_17407: // 164d:0f37
    if (si < 0x0002)
        goto loc_173e8;
    push(cs);
    sub_1732a();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17413() // 164d:0f43 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    di = ax;
    if (memoryAGet16(ds, 0xcc4a) == 0x0000)
        goto loc_17431;
    push(cs);
    sub_166b8();
    if (!ax)
        goto loc_17431;
    di = 0x0001;
loc_17431: // 164d:0f61
    si = 0;
    goto loc_17457;
loc_17435: // 164d:0f65
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52294) != 0x0000)
        goto loc_17447;
    if (memoryAGet16(ds, 0xc643) == 0x0000)
        goto loc_17456;
loc_17447: // 164d:0f77
    push(si);
    push(cs);
    sub_1690f();
    sp += 0x0002;
    if (!ax)
        goto loc_17456;
    di = 0x0001;
loc_17456: // 164d:0f86
    si++;
loc_17457: // 164d:0f87
    if (si < 0x0002)
        goto loc_17435;
    ax = di;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17462() // 164d:0f92 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17479: // 164d:0fa9
    sync();
    push(cs);
    sub_17413();
    if (!ax)
        goto loc_17491;
    if (!si)
        goto loc_17489;
    push(cs);
    sub_1732a();
loc_17489: // 164d:0fb9
    ax = 0x0001;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_17491: // 164d:0fc1
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = dx < memoryAGet16(ss, bp - 4);
    dx -= memoryAGet16(ss, bp - 4);
    ax = ax - memoryAGet16(ss, bp - 2) - flags.carry;
    if (ax < memoryAGet16(ss, bp + 8))
        goto loc_17479;
    if (ax != memoryAGet16(ss, bp + 8))
        goto loc_174aa;
    if (dx < memoryAGet16(ss, bp + 6))
        goto loc_17479;
loc_174aa: // 164d:0fda
    ax = 0;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_174b1() // 174b:0001 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x3f12;
    ax = 0x3d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_174e3;
    bx = ax;
    ax = 0x4400;
    interrupt(0x21);
    if (flags.carry)
        goto loc_174e3;
    dx &= 0x0080;
    if (!dx)
        goto loc_174e3;
    ax = 0x4407;
    interrupt(0x21);
    if (flags.carry)
        goto loc_174e3;
    if (!al)
        goto loc_174e3;
    ah = 0x3e;
    interrupt(0x21);
    if (flags.carry)
        goto loc_174e3;
    ax = 0x0001;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_174e3: // 174b:0033
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_174e7() // 174b:0037 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x005c;
    ax = 0;
    memoryASet16(ds, 0xcc68, ax);
    memoryASet16(ds, 0xcc6a, ax);
    memoryASet16(ds, 0xcc6c, ax);
    memoryASet16(ds, 0xcc6e, ax);
    ah = 0x40;
    interrupt(0x67);
    if (ah)
        goto loc_1754b;
    ah = 0x46;
    interrupt(0x67);
    if (ah)
        goto loc_1754b;
    if (al < 0x32)
        goto loc_1754b;
    ah = 0x41;
    interrupt(0x67);
    if (ah)
        goto loc_1754b;
    memoryASet16(ds, 0xcc6a, bx);
    ah = 0x42;
    interrupt(0x67);
    if (ah)
        goto loc_1754b;
    memoryASet16(ds, 0xcc6e, dx);
    memoryASet16(ds, 0xcc6c, bx);
    if (!bx)
        goto loc_17591;
    if ((short)bx <= (short)0x0004)
        goto loc_17537;
    bx = 0x0004;
loc_17537: // 174b:0087
    memoryASet16(ds, 0xcc68, bx);
    ah = 0x43;
    interrupt(0x67);
    if (ah)
        goto loc_1754b;
    memoryASet16(ds, 0xcc66, dx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1754b: // 174b:009b
    al = ah;
    ah = 0x00;
    memoryASet16(ss, bp - 12, ax);
    ax = 0x3f22;
    push(ax);
    ax = bp - 92;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x174b);
    sp += 0x0004;
    ax = 0x0010;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x174b);
    sp += 0x0006;
    ax = bp - 10;
    push(ax);
    ax = bp - 92;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x174b);
    sp += 0x0004;
    ax = bp - 92;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
loc_17591: // 174b:00e1
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17595() // 174b:00e5 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xcc66) == 0x0000)
        goto loc_175b7;
    ah = 0x45;
    dx = memoryAGet16(ds, 0xcc66);
    interrupt(0x67);
    if (!ah)
        goto loc_175b7;
    ax = 0x3f3d;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
loc_175b7: // 174b:0107
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_175b9() // 174b:0109 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x005e;
    memoryASet16(ss, bp - 14, 0x0000);
    goto loc_175da;
loc_175c6: // 174b:0116
    ah = 0x44;
    bx = memoryAGet16(ss, bp - 14);
    al = bl;
    dx = memoryAGet16(ds, 0xcc66);
    interrupt(0x67);
    if (ah)
        goto loc_175e7;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 1);
loc_175da: // 174b:012a
    ax = memoryAGet16(ss, bp - 14);
    if (ax < memoryAGet16(ds, 0xcc68))
        goto loc_175c6;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_175e7: // 174b:0137
    al = ah;
    ah = 0x00;
    memoryASet16(ss, bp - 12, ax);
    ax = 0x3f61;
    push(ax);
    ax = bp - 94;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x174b);
    sp += 0x0004;
    ax = 0x0010;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(memoryAGet16(ss, bp - 12));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x174b);
    sp += 0x0006;
    ax = bp - 10;
    push(ax);
    ax = bp - 94;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x174b);
    sp += 0x0004;
    ax = bp - 94;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17631() // 174b:0181 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xcc60, 0x0000);
    ax = 0x4300;
    interrupt(0x2f);
    if (al == 0x80)
        goto loc_17647;
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_17647: // 174b:0197
    ax = 0x0001;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1764c() // 174b:019c +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = 0x4310;
    interrupt(0x2f);
    memoryASet16(ds, 0xcc62, bx);
    memoryASet16(ds, 0xcc64, es);
loc_1765f: // 174b:01af
    ah = 0x10;
    dx = 0xffff;
    push(cs); cs = memoryAGet16(ds, 0xcc62 + 2); callIndirect(cs, memoryAGet16(ds, 0xcc62)); assert(cs == 0x174b); // 174b:01b4;
    if (ax)
        goto loc_1767b;
    if (bl != 0xb0)
        goto loc_176b7;
    ah = 0x10;
    push(cs); cs = memoryAGet16(ds, 0xcc62 + 2); callIndirect(cs, memoryAGet16(ds, 0xcc62)); assert(cs == 0x174b); // 174b:01c3;
    if (!ax)
        goto loc_176b7;
loc_1767b: // 174b:01cb
    memoryASet16(ss, bp - 2, bx);
    memoryASet16(ss, bp - 4, dx);
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_176e6();
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x04;
    ax <<= cl;
    flags.carry = (memoryAGet16(ds, 0xa017) + ax) >= 0x10000;
    memoryASet16(ds, 0xa017, memoryAGet16(ds, 0xa017) + ax);
    memoryASet16(ds, 0xa019, memoryAGet16(ds, 0xa019) + (0x0000 + flags.carry));
    bx = memoryAGet16(ds, 0xcc60);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, bx + 52300, ax);
    memoryASet16(ds, 0xcc60, memoryAGet16(ds, 0xcc60) + 1);
    if (memoryAGet16(ds, 0xcc60) < 0x000a)
        goto loc_1765f;
loc_176b7: // 174b:0207
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_176bb() // 174b:020b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    si = 0;
    goto loc_176db;
loc_176c6: // 174b:0216
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52300);
    memoryASet16(ss, bp - 2, ax);
    ah = 0x11;
    dx = memoryAGet16(ss, bp - 2);
    push(cs); cs = memoryAGet16(ds, 0xcc62 + 2); callIndirect(cs, memoryAGet16(ds, 0xcc62)); assert(cs == 0x174b); // 174b:0226;
    si++;
loc_176db: // 174b:022b
    if (si < memoryAGet16(ds, 0xcc60))
        goto loc_176c6;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_176e6() // 174b:0236 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    goto loc_17731;
loc_17714: // 174b:0264
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17731: // 174b:0281
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    if (ax < di)
        goto loc_17714;
    es = memoryAGet16(ss, bp - 2);
    push(es);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 10, ax);
    ax = di;
    ax += memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp - 10);
    dx -= ax;
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 14, dx);
    if ((short)memoryAGet16(ss, bp - 12) > (short)0x0000)
        goto loc_1777f;
    if ((short)memoryAGet16(ss, bp - 12) < (short)0x0000)
        goto loc_17773;
    if (memoryAGet16(ss, bp - 14) >= 0x0000)
        goto loc_1777f;
loc_17773: // 174b:02c3
    ax = 0x3f79;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
loc_1777f: // 174b:02cf
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != di)
        goto loc_177d2;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx + 6);
    memoryASet16(ds, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_177e3;
loc_177d2: // 174b:0322
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = di;
    ax -= memoryAGet16(es, si);
    es = pop();
    memoryASet16(es, bx + 2, ax);
loc_177e3: // 174b:0333
    if ((short)memoryAGet16(ss, bp - 12) >= (short)0x0000)
        goto loc_177ec;
    goto loc_1786f;
loc_177ec: // 174b:033c
    if ((short)memoryAGet16(ss, bp - 12) > (short)0x0000)
        goto loc_177f4;
    if (memoryAGet16(ss, bp - 14) <= 0x0000)
        goto loc_1786f;
loc_177f4: // 174b:0344
    ax = memoryAGet16(ds, 0xcc7a);
    ax |= memoryAGet16(ds, 0xcc7c);
    if (ax)
        goto loc_17802;
    push(cs);
    sub_17875();
loc_17802: // 174b:0352
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(ds, 0xcc74, ax);
    memoryASet16(ds, 0xcc72, dx);
    bx = memoryAGet16(ds, 0xcc7a); es = memoryAGet16(ds, 0xcc7a + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    memoryASet16(es, bx + 6, 0x0000);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, 0xcc74);
    dx = memoryAGet16(ds, 0xcc72);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    ax = di;
    ax += memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, bx + 2, ax);
    memoryASet16(es, bx + 4, 0x0080);
loc_1786f: // 174b:03bf
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17875() // 174b:03c5 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ds, 0xcc7e); es = memoryAGet16(ds, 0xcc7e + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_178c3;
loc_1788f: // 174b:03df
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 4) & 0x0080)
        goto loc_178b2;
    if (!(memoryAGet16(es, bx + 4) & 0x0003))
        goto loc_178b2;
    push(memoryAGet16(es, bx + 6));
    push(cs);
    sub_17e37();
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_178b2: // 174b:0402
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_178c3: // 174b:0413
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (ax)
        goto loc_1788f;
    ax = 0x3fa1;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_178db() // 174b:042b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0xcc88) == 0x0000)
        goto loc_178ef;
    push(cs);
    sub_17b92();
loc_178ef: // 174b:043f
    memoryASet16(ds, 0xcc88, 0x0001);
    memoryASet16(ds, 0xcc70, 0x0001);
    memoryASet16(ds, 0xcc80, 0x0000);
    memoryASet16(ds, 0xcc7e, 0x0000);
    memoryASet16(ds, 0xcc7c, 0x2d50);
    memoryASet16(ds, 0xcc7a, 0x0000);
    si = 0;
    goto loc_1793e;
loc_17917: // 174b:0467
    ax = si;
    dx = 0x000c;
    imul16(dx);
    ax += 0x000c;
    push(ax);
    ax = si;
    dx = 0x000c;
    imul16(dx);
    dx = 0x2d50;
    bx = ax;
    es = dx;
    memoryASet16(es, bx + 10, 0x2d50);
    ax = pop();
    memoryASet16(es, bx + 8, ax);
    si++;
loc_1793e: // 174b:048e
    if ((short)si < (short)0x04af)
        goto loc_17917;
    ax = si;
    dx = 0x000c;
    imul16(dx);
    dx = 0x2d50;
    bx = ax;
    es = dx;
    memoryASet16(es, bx + 10, 0x0000);
    memoryASet16(es, bx + 8, 0x0000);
    ax = memoryAGet16(ds, 0xcc7a);
    ax |= memoryAGet16(ds, 0xcc7c);
    if (ax)
        goto loc_1796d;
    push(cs);
    sub_17875();
loc_1796d: // 174b:04bd
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(ds, 0xcc74, ax);
    memoryASet16(ds, 0xcc72, dx);
    bx = memoryAGet16(ds, 0xcc7a); es = memoryAGet16(ds, 0xcc7a + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    ax = memoryAGet16(ds, 0xcc74);
    dx = memoryAGet16(ds, 0xcc72);
    memoryASet16(ds, 0xcc80, ax);
    memoryASet16(ds, 0xcc7e, dx);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    memoryASet16(es, bx, 0x0000);
    memoryASet16(es, bx + 2, 0xffff);
    memoryASet16(es, bx + 4, 0x0080);
    memoryASet16(es, bx + 10, 0x0000);
    memoryASet16(es, bx + 8, 0x0000);
    ax = memoryAGet16(ds, 0xcc80);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    push(cs); cs = 0x01ed; sub_3622(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs); cs = 0x01ed; sub_52c7(); assert(cs == 0x174b);
    sp += 0x0002;
    memoryASet16(ds, 0xcc82, ax);
    memoryASet16(ss, bp - 6, ds);
    memoryASet16(ss, bp - 8, ax);
    ax &= 0x000f;
    dx = 0x0010;
    dx -= ax;
    flags.carry = memoryAGet16(ss, bp - 4) < dx;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - dx);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0000 - flags.carry);
    flags.carry = memoryAGet16(ss, bp - 4) < 0x0400;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0400);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0000 - flags.carry);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x04;
    push(cs); cs = 0x01ed; sub_5084(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x000f;
    cl = 0x04;
    ax >>= cl;
    dx = memoryAGet16(ss, bp - 6);
    dx += ax;
    di = dx;
    push(memoryAGet16(ss, bp - 10));
    push(dx);
    push(cs);
    sub_176e6();
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa00d, ax);
    memoryASet16(ds, 0xa00b, dx);
    push(cs); cs = 0x01ed; sub_25dc(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    push(memoryAGet16(ss, bp - 2));
    push(ax);
    push(cs); cs = 0x01ed; sub_4d93(); assert(cs == 0x174b);
    sp += 0x0004;
    memoryASet16(ds, 0xcc86, dx);
    memoryASet16(ds, 0xcc84, ax);
    memoryASet16(ss, bp - 6, dx);
    memoryASet16(ss, bp - 8, ax);
    ax &= 0x000f;
    dx = 0x0010;
    dx -= ax;
    flags.carry = memoryAGet16(ss, bp - 4) < dx;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - dx);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0000 - flags.carry);
    flags.carry = memoryAGet16(ss, bp - 4) < 0x0000;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0000);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 0x0000 - flags.carry);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x04;
    push(cs); cs = 0x01ed; sub_5084(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x000f;
    cl = 0x04;
    ax >>= cl;
    dx = memoryAGet16(ss, bp - 6);
    dx += ax;
    di = dx;
    push(memoryAGet16(ss, bp - 10));
    push(dx);
    push(cs);
    sub_176e6();
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa011, ax);
    memoryASet16(ds, 0xa00f, dx);
    ax = memoryAGet16(ds, 0xa00d);
    dx = memoryAGet16(ds, 0xa00b);
    flags.carry = (dx + memoryAGet16(ds, 0xa00f)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa00f);
    ax += memoryAGet16(ds, 0xa011) + flags.carry;
    memoryASet16(ds, 0xa01d, ax);
    memoryASet16(ds, 0xa01b, dx);
    memoryASet16(ds, 0xa015, 0x0000);
    memoryASet16(ds, 0xa013, 0x0000);
    si = 0x0001;
    goto loc_17aef;
loc_17ad2: // 174b:0622
    ax = 0x3f1c;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x174b);
    sp += 0x0004;
    if (!ax)
        goto loc_17b2b;
    si++;
loc_17aef: // 174b:063f
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_17ad2;
    push(cs);
    sub_174b1();
    if (!ax)
        goto loc_17b2b;
    push(cs);
    sub_174e7();
    ax = memoryAGet16(ds, 0xcc68);
    cl = 0x0a;
    ax <<= cl;
    push(ax);
    push(memoryAGet16(ds, 0xcc6a));
    push(cs);
    sub_176e6();
    sp += 0x0004;
    push(cs);
    sub_175b9();
    ax = memoryAGet16(ds, 0xcc68);
    dx = 0;
    cl = 0x0e;
    push(cs); cs = 0x01ed; sub_5043(); assert(cs == 0x174b);
    memoryASet16(ds, 0xa015, dx);
    memoryASet16(ds, 0xa013, ax);
loc_17b2b: // 174b:067b
    memoryASet16(ds, 0xa019, 0x0000);
    memoryASet16(ds, 0xa017, 0x0000);
    si = 0x0001;
    goto loc_17b59;
loc_17b3c: // 174b:068c
    ax = 0x3f1c;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x174b);
    sp += 0x0004;
    if (!ax)
        goto loc_17b6b;
    si++;
loc_17b59: // 174b:06a9
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_17b3c;
    push(cs);
    sub_17631();
    if (!ax)
        goto loc_17b6b;
    push(cs);
    sub_1764c();
loc_17b6b: // 174b:06bb
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    ax = 0;
    dx = 0x1000;
    push(ax);
    push(dx);
    ax = 0xcbed;
    push(ax);
    push(cs);
    sub_17bc2();
    sp += 0x0006;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17b92() // 174b:06e2 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xcc88) == 0x0000)
        goto loc_17bc0;
    push(memoryAGet16(ds, 0xcc86));
    push(memoryAGet16(ds, 0xcc84));
    push(cs); cs = 0x01ed; sub_4cad(); assert(cs == 0x174b);
    sp += 0x0004;
    push(memoryAGet16(ds, 0xcc82));
    push(cs); cs = 0x01ed; sub_51f8(); assert(cs == 0x174b);
    sp += 0x0002;
    push(cs);
    sub_17595();
    push(cs);
    sub_176bb();
loc_17bc0: // 174b:0710
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17bc2() // 174b:0712 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0018;
    push(si);
    push(di);
    dx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 8);
    flags.carry = (ax + 0x000f) >= 0x10000;
    ax += 0x000f;
    dx += 0x0000 + flags.carry;
    cl = 0x04;
    push(cs); cs = 0x01ed; sub_5084(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ds, 0xcc7a);
    ax |= memoryAGet16(ds, 0xcc7c);
    if (ax)
        goto loc_17bed;
    push(cs);
    sub_17875();
loc_17bed: // 174b:073d
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(ds, 0xcc74, ax);
    memoryASet16(ds, 0xcc72, dx);
    bx = memoryAGet16(ds, 0xcc7a); es = memoryAGet16(ds, 0xcc7a + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    ax = memoryAGet16(ss, bp - 24);
    memoryASet16(es, bx + 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(es, bx + 6, ax);
    memoryASet16(es, bx + 4, 0x0000);
    memoryASet16(ss, bp - 22, 0x0000);
    goto loc_17e09;
loc_17c2e: // 174b:077e
    if (memoryAGet16(ss, bp - 22) != 0x0001)
        goto loc_17c4a;
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    if (ax != memoryAGet16(ds, 0xcc80))
        goto loc_17c4a;
    if (dx != memoryAGet16(ds, 0xcc7e))
        goto loc_17c4a;
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_17c4a: // 174b:079a
    ax = memoryAGet16(ss, bp - 22);
    if (!ax)
        goto loc_17c5e;
    if (ax == 0x0001)
        goto loc_17c89;
    if (ax == 0x0002)
        goto loc_17cb7;
    goto loc_17ce5;
loc_17c5e: // 174b:07ae
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 10, 0x0000);
    memoryASet16(ss, bp - 12, 0x0000);
    goto loc_17ce5;
loc_17c89: // 174b:07d9
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ds, 0xcc7e); es = memoryAGet16(ds, 0xcc7e + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    goto loc_17ce5;
loc_17cb7: // 174b:0807
    push(cs);
    sub_1800d();
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ds, 0xcc7e); es = memoryAGet16(ds, 0xcc7e + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 10, 0x0000);
    memoryASet16(ss, bp - 12, 0x0000);
loc_17ce5: // 174b:0835
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    di = ax;
    goto loc_17df0;
loc_17cf9: // 174b:0849
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax -= di;
    if (ax >= memoryAGet16(ss, bp - 24))
        goto loc_17d09;
    goto loc_17daf;
loc_17d09: // 174b:0859
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 16, dx);
    ax = memoryAGet16(ds, 0xcc74);
    dx = memoryAGet16(ds, 0xcc72);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    bx = memoryAGet16(ss, bp + 6);
    ax = di;
    memoryASet16(ds, bx, ax);
    bx = memoryAGet16(ds, 0xcc72); es = memoryAGet16(ds, 0xcc72 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    goto loc_17d8b;
loc_17d47: // 174b:0897
    bx = memoryAGet16(ss, bp - 16); es = memoryAGet16(ss, bp - 16 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 18, ax);
    memoryASet16(ss, bp - 20, dx);
    bx = memoryAGet16(es, bx + 6);
    memoryASet16(ds, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 16);
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    ax = memoryAGet16(ss, bp - 14);
    dx = memoryAGet16(ss, bp - 16);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    ax = memoryAGet16(ss, bp - 18);
    dx = memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 14, ax);
    memoryASet16(ss, bp - 16, dx);
loc_17d8b: // 174b:08db
    ax = memoryAGet16(ss, bp - 14);
    dx = memoryAGet16(ss, bp - 16);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_17d47;
    if (dx != memoryAGet16(ss, bp - 4))
        goto loc_17d47;
    ax = memoryAGet16(ds, 0xcc74);
    dx = memoryAGet16(ds, 0xcc72);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_17daf: // 174b:08ff
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 4) & 0x0080)
        goto loc_17dc2;
    if (memoryAGet16(es, bx + 4) & 0x0003)
        goto loc_17ddf;
loc_17dc2: // 174b:0912
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    di = ax;
loc_17ddf: // 174b:092f
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17df0: // 174b:0940
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    if (ax == memoryAGet16(ss, bp - 10))
        goto loc_17dfe;
    goto loc_17cf9;
loc_17dfe: // 174b:094e
    if (dx == memoryAGet16(ss, bp - 12))
        goto loc_17e06;
    goto loc_17cf9;
loc_17e06: // 174b:0956
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_17e09: // 174b:0959
    if ((short)memoryAGet16(ss, bp - 22) >= (short)0x0003)
        goto loc_17e12;
    goto loc_17c2e;
loc_17e12: // 174b:0962
    if (memoryAGet16(ds, 0xcc70) == 0x0000)
        goto loc_17e2b;
    ax = 0x3fd1;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_17e2b: // 174b:097b
    memoryASet16(ds, 0xa7ef, 0x0001);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17e37() // 174b:0987 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 6) != si)
        goto loc_17e98;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    goto loc_17e98;
  // gap 2 bytes
loc_17e7b: // 174b:09cb
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17e98: // 174b:09e8
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 6) == si)
        goto loc_17ea9;
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (ax)
        goto loc_17e7b;
loc_17ea9: // 174b:09f9
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (ax)
        goto loc_17ebd;
    ax = 0x3feb;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
loc_17ebd: // 174b:0a0d
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    bx = memoryAGet16(es, bx + 6);
    memoryASet16(ds, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17f02() // 174b:0a52 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17f19: // 174b:0a69
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 6) == si)
        goto loc_17f70;
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    ax = memoryAGet16(ds, 0xcc76);
    ax |= memoryAGet16(ds, 0xcc78);
    if (ax)
        goto loc_17f4f;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    goto loc_17f19;
loc_17f4f: // 174b:0a9f
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_17f19;
    if (dx != memoryAGet16(ss, bp - 4))
        goto loc_17f19;
    ax = 0x4008;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
    goto loc_17f19;
  // gap 2 bytes
loc_17f70: // 174b:0ac0
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) & 0xfffc);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) | ax);
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17f85() // 174b:0ad5 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_17f9c: // 174b:0aec
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 6) == si)
        goto loc_17ff3;
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    ax = memoryAGet16(ds, 0xcc76);
    ax |= memoryAGet16(ds, 0xcc78);
    if (ax)
        goto loc_17fd2;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    goto loc_17f9c;
loc_17fd2: // 174b:0b22
    ax = memoryAGet16(ds, 0xcc78);
    dx = memoryAGet16(ds, 0xcc76);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_17f9c;
    if (dx != memoryAGet16(ss, bp - 4))
        goto loc_17f9c;
    ax = 0x4026;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
    goto loc_17f9c;
  // gap 2 bytes
loc_17ff3: // 174b:0b43
    bx = memoryAGet16(ds, 0xcc76); es = memoryAGet16(ds, 0xcc76 + 2); /*ggg2*/;
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) & 0xff7f);
    ax = memoryAGet16(ss, bp + 8);
    cl = 0x07;
    ax <<= cl;
    memoryASet16(es, bx + 4, memoryAGet16(es, bx + 4) | ax);
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1800d() // 174b:0b5d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0016;
    push(si);
    push(di);
    push(cs); cs = 0x1a61; sub_1b0a0(); assert(cs == 0x174b);
    memoryASet16(ss, bp - 22, ax);
    if (memoryAGet16(ss, bp - 22) == 0x0000)
        goto loc_1804c;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_18032;
    if (ax == 0x0002)
        goto loc_18034;
    goto loc_18038;
loc_18032: // 174b:0b82
    goto loc_18038;
loc_18034: // 174b:0b84
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 0x0034);
loc_18038: // 174b:0b88
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs);
    sub_17f85();
    sp += 0x0004;
loc_1804c: // 174b:0b9c
    push(cs); cs = 0x1a61; sub_1b0e7(); assert(cs == 0x174b);
    ax = memoryAGet16(ds, 0xa54e);
    memoryASet16(ss, bp - 20, ax);
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x174b);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xcc8e);
    ax |= memoryAGet16(ds, 0xcc90);
    if (!ax)
        goto loc_18070;
    push(cs); cs = memoryAGet16(ds, 0xcc8e + 2); callIndirect(cs, memoryAGet16(ds, 0xcc8e)); assert(cs == 0x174b); // 174b:0bbc;
loc_18070: // 174b:0bc0
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_1819d;
loc_1808a: // 174b:0bda
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 4) & 0x0080))
        goto loc_180a7;
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 14, ax);
    goto loc_18180;
loc_180a7: // 174b:0bf7
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 4) & 0x0003))
        goto loc_18101;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    bx = memoryAGet16(es, bx + 6);
    memoryASet16(ds, bx, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(ds, 0xcc7c);
    dx = memoryAGet16(ds, 0xcc7a);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xcc7c, ax);
    memoryASet16(ds, 0xcc7a, dx);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    ax = memoryAGet16(ss, bp - 10);
    dx = memoryAGet16(ss, bp - 12);
    memoryASet16(es, bx + 10, ax);
    memoryASet16(es, bx + 8, dx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_1819d;
loc_18101: // 174b:0c51
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    if (ax == memoryAGet16(ss, bp - 14))
        goto loc_1816e;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 16, ax);
    di = memoryAGet16(es, bx);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 18, ax);
    goto loc_18140;
loc_1811e: // 174b:0c6e
    ax = 0xf000;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(ax);
    push(di);
    push(cs); cs = 0x01ed; sub_3c10(); assert(cs == 0x174b);
    sp += 0x000a;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 0x0f00);
    di += 0x0f00;
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 0x0f00);
loc_18140: // 174b:0c90
    if (memoryAGet16(ss, bp - 16) > 0x0f00)
        goto loc_1811e;
    ax = memoryAGet16(ss, bp - 16);
    cl = 0x04;
    ax <<= cl;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(ax);
    push(di);
    push(cs); cs = 0x01ed; sub_3c10(); assert(cs == 0x174b);
    sp += 0x000a;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(es, bx, ax);
    bx = memoryAGet16(es, bx + 6);
    memoryASet16(ds, bx, ax);
loc_1816e: // 174b:0cbe
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 14, ax);
loc_18180: // 174b:0cd0
    ax = memoryAGet16(ss, bp - 2);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_1819d: // 174b:0ced
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (!ax)
        goto loc_181a8;
    goto loc_1808a;
loc_181a8: // 174b:0cf8
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ds, 0xcc78, ax);
    memoryASet16(ds, 0xcc76, dx);
    ax = memoryAGet16(ds, 0xcc8a);
    ax |= memoryAGet16(ds, 0xcc8c);
    if (!ax)
        goto loc_181c3;
    push(cs); cs = memoryAGet16(ds, 0xcc8a + 2); callIndirect(cs, memoryAGet16(ds, 0xcc8a)); assert(cs == 0x174b); // 174b:0d0f;
loc_181c3: // 174b:0d13
    push(memoryAGet16(ss, bp - 20));
    push(cs); cs = 0x1ef3; sub_1f019(); assert(cs == 0x174b);
    sp += 0x0002;
    if (memoryAGet16(ss, bp - 22) == 0x0000)
        goto loc_181e7;
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 22);
    ax <<= 1;
    ax += 0xc75d;
    push(ax);
    push(cs);
    sub_17f85();
    sp += 0x0004;
loc_181e7: // 174b:0d37
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_181ed() // 174b:0d3d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    push(cs); cs = 0x1ef3; sub_1f082(); assert(cs == 0x174b);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x174b);
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ds, 0xa7b4, 0x0000);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x174b);
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 8, 0xffff);
    memoryASet16(ss, bp - 10, 0xffff);
    goto loc_18307;
loc_18238: // 174b:0d88
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 4) & 0x0003))
        goto loc_18248;
    di = 0x0005;
    goto loc_1824b;
loc_18248: // 174b:0d98
    di = 0x0009;
loc_1824b: // 174b:0d9b
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 4) & 0x0080))
        goto loc_18259;
    di = 0x000c;
loc_18259: // 174b:0da9
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    dx = 0;
    if ((short)dx > (short)memoryAGet16(ss, bp - 8))
        goto loc_18279;
    if (dx != memoryAGet16(ss, bp - 8))
        goto loc_1826d;
    if (ax > memoryAGet16(ss, bp - 10))
        goto loc_18279;
loc_1826d: // 174b:0dbd
    ax = 0x4043;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x174b);
    sp += 0x0002;
loc_18279: // 174b:0dc9
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    ax--;
    memoryASet16(ss, bp - 8, 0x0000);
    memoryASet16(ss, bp - 10, ax);
    push(di);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    es = memoryAGet16(ss, bp - 2);
    push(memoryAGet16(es, bx));
    push(cs); cs = 0x1ef3; sub_1f4ad(); assert(cs == 0x174b);
    sp += 0x0008;
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx));
    push(cs); cs = 0x1ff7; sub_1ff70(); assert(cs == 0x174b);
    sp += 0x0006;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    ax = 0;
    dx = memoryAGet16(ss, bp - 8);
    cx = memoryAGet16(ss, bp - 10);
    flags.carry = (cx + 0x0001) >= 0x10000;
    cx += 0x0001;
    dx += 0x0000 + flags.carry;
    if ((short)ax < (short)dx)
        goto loc_182f6;
    if ((short)ax > (short)dx)
        goto loc_182db;
    if (memoryAGet16(es, bx) <= cx)
        goto loc_182f6;
loc_182db: // 174b:0e2b
    ax = 0;
    push(ax);
    push(ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    push(memoryAGet16(es, bx));
    ax = memoryAGet16(ss, bp - 10);
    ax++;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f4ad(); assert(cs == 0x174b);
    sp += 0x0008;
loc_182f6: // 174b:0e46
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_18307: // 174b:0e57
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (!ax)
        goto loc_18312;
    goto loc_18238;
loc_18312: // 174b:0e62
    push(cs); cs = 0x164d; sub_173af(); assert(cs == 0x174b);
    ax = 0x0040;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f20d(); assert(cs == 0x174b);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa7b4, ax);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1832f() // 174b:0e7f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    di = 0;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_18378;
loc_18348: // 174b:0e98
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(ax);
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    dx = pop();
    dx -= ax;
    di += dx;
    es = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_18378: // 174b:0ec8
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (ax)
        goto loc_18348;
    ax = di;
    dx = 0;
    cl = 0x04;
    push(cs); cs = 0x01ed; sub_5043(); assert(cs == 0x174b);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18396() // 174b:0ee6 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    di = 0;
    ax = memoryAGet16(ds, 0xcc80);
    dx = memoryAGet16(ds, 0xcc7e);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_183f6;
loc_183af: // 174b:0eff
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 4) & 0x0003))
        goto loc_183c6;
    if (memoryAGet16(es, bx + 4) & 0x0080)
        goto loc_183c6;
    di += memoryAGet16(es, bx + 2);
loc_183c6: // 174b:0f16
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    ax = memoryAGet16(es, bx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(ax);
    push(es);
    si = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(es, si);
    es = pop();
    ax += memoryAGet16(es, bx + 2);
    dx = pop();
    dx -= ax;
    di += dx;
    es = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
loc_183f6: // 174b:0f46
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (ax)
        goto loc_183af;
    ax = di;
    dx = 0;
    cl = 0x04;
    push(cs); cs = 0x01ed; sub_5043(); assert(cs == 0x174b);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18414() // 174b:0f64 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xcc70, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1841f() // 1841:000f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_18442;
loc_1842e: // 1841:001e
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x0016;
    imul16(dx);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    memoryASet16(ds, bx + 57836, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_18442: // 1841:0032
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x000e)
        goto loc_1842e;
    ax = 0x0200;
    memoryASet16(ds, 0xe6da, ax);
    memoryASet16(ds, 0xc74b, ax);
    memoryASet16(ds, 0xccae, 0xccb2);
    memoryASet16(ds, 0xccb0, 0xce92);
    if (memoryAGet16(ds, 0xe6ee) == 0x0002)
        goto loc_18467;
    goto loc_184ed;
loc_18467: // 1841:0057
    memoryASet16(ds, 0xe1ea, 0x0001);
    memoryASet16(ds, 0xdeb2, 0xdeec);
    memoryASet16(ds, 0xdeb4, 0xe082);
    memoryASet16(ds, 0xdda4, 0x0000);
    memoryASet16(ds, 0xdda2, 0x0001);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b2, ax);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b4, ax);
    ax = memoryAGet16(ds, 0x4074);
    memoryASet16(ds, 0xa546, ax);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 57010);
    memoryASet16(ds, 0xe6d8, ax);
    di = 0xe470;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_184db;
loc_184bc: // 1841:00ac
    si = 0;
    goto loc_184d3;
loc_184c0: // 1841:00b0
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x0a;
    ax <<= cl;
    dx = si;
    dx <<= 1;
    ax += dx;
    memoryASet16(ds, di, ax);
    di += 0x0002;
    si++;
loc_184d3: // 1841:00c3
    if ((short)si < (short)0x0016)
        goto loc_184c0;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_184db: // 1841:00cb
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x000e)
        goto loc_184bc;
    memoryASet16(ds, 0xdda6, 0x0006);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_184ed: // 1841:00dd
    if (memoryAGet16(ds, 0xe6ee) != 0x0001)
        goto loc_1853e;
    memoryASet16(ds, 0xe1ea, 0x0002);
    ax = 0xdeec;
    memoryASet16(ds, 0xdeba, ax);
    memoryASet16(ds, 0xe6d8, ax);
    memoryASet16(ds, 0xa7b4, 0x0000);
    memoryASet16(ds, 0xa546, 0x8000);
    di = 0xe470;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_18538;
loc_18519: // 1841:0109
    si = 0;
    goto loc_18530;
loc_1851d: // 1841:010d
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x0a;
    ax <<= cl;
    dx = si;
    dx <<= 1;
    ax += dx;
    memoryASet16(ds, di, ax);
    di += 0x0002;
    si++;
loc_18530: // 1841:0120
    if ((short)si < (short)0x0016)
        goto loc_1851d;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_18538: // 1841:0128
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x000e)
        goto loc_18519;
loc_1853e: // 1841:012e
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18544() // 1841:0134 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18549() // 1841:0139 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x4070, 0x0000);
    memoryASet16(ds, 0x4072, 0x3c00);
    memoryASet16(ds, 0x4074, 0x7800);
    if (memoryAGet16(ds, 0xe6ee) != 0x0002)
        goto loc_185b3;
    memoryASet16(ds, 0xdda4, 0x0000);
    memoryASet16(ds, 0xdda2, 0x0001);
    ax = 0;
    memoryASet16(ds, 0xa7b0, ax);
    memoryASet16(ds, 0xc759, ax);
    memoryASet16(ds, 0xc75b, ax);
    memoryASet16(ds, 0xe6ea, ax);
    memoryASet16(ds, 0xe6ec, ax);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b2, ax);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b4, ax);
    ax = memoryAGet16(ds, 0x4074);
    memoryASet16(ds, 0xa546, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x1841);
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_185b3: // 1841:01a3
    ax = 0;
    memoryASet16(ds, 0xa7b0, ax);
    memoryASet16(ds, 0xc759, ax);
    memoryASet16(ds, 0xc75b, ax);
    memoryASet16(ds, 0xe6ea, ax);
    memoryASet16(ds, 0xe6ec, ax);
    memoryASet16(ds, 0xa7b4, 0x0000);
    memoryASet16(ds, 0xa546, 0x8000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_185d2() // 1841:01c2 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    bx = memoryAGet16(ds, 0xa7ed);
    bx <<= 1;
    es = memoryAGet16(ds, bx + 52145);
    ax = memoryAGet16(es, 0x0012);
    memoryASet16(ds, 0xa7e4, ax);
    ax <<= 1;
    memoryASet16(ds, 0xe6e2, ax);
    bx = memoryAGet16(ds, 0xa7ed);
    bx <<= 1;
    ax = memoryAGet16(es, 0x0014);
    memoryASet16(ds, 0xa7e2, ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax -= 0x0015;
    memoryASet16(ds, 0xe6dc, ax);
    ax <<= 1;
    memoryASet16(ds, 0xe6de, ax);
    if (memoryAGet16(ds, 0xa7e2) <= 0x00c8)
        goto loc_1861f;
    ax = 0x4080;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_1861f: // 1841:020f
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_18640;
loc_1862b: // 1841:021b
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, bx + 51493, ax);
    ax = memoryAGet16(ds, 0xe6e2);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_18640: // 1841:0230
    ax = memoryAGet16(ss, bp - 2);
    if (ax < memoryAGet16(ds, 0xa7e2))
        goto loc_1862b;
    di = 0xe208;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_18674;
loc_18653: // 1841:0243
    si = 0;
    goto loc_1866c;
loc_18657: // 1841:0247
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ss, bp - 4);
    bx <<= 1;
    dx = memoryAGet16(ds, bx + 51493);
    dx += ax;
    memoryASet16(ds, di, dx);
    di += 0x0002;
    si++;
loc_1866c: // 1841:025c
    if ((short)si < (short)0x0016)
        goto loc_18657;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_18674: // 1841:0264
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x000e)
        goto loc_18653;
    ax = memoryAGet16(ds, 0xa7e4);
    ax -= 0x0002;
    ax -= 0x0014;
    cl = 0x08;
    ax <<= cl;
    memoryASet16(ds, 0xc749, ax);
    ax = memoryAGet16(ds, 0xa7e2);
    ax -= 0x0002;
    ax -= 0x000d;
    ax <<= cl;
    memoryASet16(ds, 0xc747, ax);
    ax = memoryAGet16(ds, 0xc749);
    if (ax >= memoryAGet16(ds, 0xc74b))
        goto loc_186a7;
    ax = memoryAGet16(ds, 0xc74b);
    memoryASet16(ds, 0xc749, ax);
loc_186a7: // 1841:0297
    ax = memoryAGet16(ds, 0xc747);
    if (ax >= memoryAGet16(ds, 0xe6da))
        goto loc_186b6;
    ax = memoryAGet16(ds, 0xe6da);
    memoryASet16(ds, 0xc747, ax);
loc_186b6: // 1841:02a6
    push(cs);
    sub_18e41();
    push(cs);
    sub_18af2();
    push(cs);
    sub_18f0b();
    ax = 0x0001;
    push(ax);
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_18f18();
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ds, 0xa7e2);
    ax -= 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(cs);
    sub_18f18();
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_18f18();
    sp += 0x0006;
    ax = 0;
    push(ax);
    push(ax);
    ax = memoryAGet16(ds, 0xa7e4);
    ax -= 0x0002;
    push(ax);
    push(cs);
    sub_18f18();
    sp += 0x0006;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    memoryASet16(ds, 0xa54c, 0x0001);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18728() // 1841:0318 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0070;
    push(si);
    push(di);
    ax = 0x0104;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xddae;
    push(ax);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x1841);
    sp += 0x0006;
    memoryASet16(ds, 0xddac, 0x0000);
    ax = memoryAGet16(ds, 0xa7e4);
    imul16(memoryAGet16(ds, 0xa7e2));
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ds, 0xa7e7);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    ax = memoryAGet16(ds, 0xa7eb);
    memoryASet16(ss, bp - 18, ax);
    memoryASet16(ss, bp - 20, 0x0000);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    dx = memoryAGet16(ss, bp - 10);
    bx = memoryAGet16(ss, bp - 12);
    bx += ax;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, bx);
loc_1877c: // 1841:036c
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_18792;
    goto loc_1890c;
loc_18792: // 1841:0382
    ax = 0x2c27;
    bx = memoryAGet16(ss, bp - 4);
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, bx + 523, memoryAGet(es, bx + 523) | dl);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 1698) != 0x00)
        goto loc_187b2;
    goto loc_1890c;
loc_187b2: // 1841:03a2
    if (memoryAGet(es, bx + 402) != 0x00)
        goto loc_187bd;
    goto loc_1887c;
loc_187bd: // 1841:03ad
    al = memoryAGet(es, bx + 1698);
    ah = 0x00;
    if (ax)
        goto loc_18807;
    ax = 0x4099;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x1841);
    sp += 0x0006;
    ax = bp - 32;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18807: // 1841:03f7
    di = 0;
    goto loc_1882d;
loc_1880b: // 1841:03fb
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 56750);
    if (ax != memoryAGet16(ss, bp - 4))
        goto loc_1882c;
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += 0xddae;
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    goto loc_1890c;
loc_1882c: // 1841:041c
    di++;
loc_1882d: // 1841:041d
    if (di < memoryAGet16(ds, 0xddac))
        goto loc_1880b;
    if (di < 0x0041)
        goto loc_18844;
    ax = 0x40c4;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18844: // 1841:0434
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, bx + 56750, ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 402);
    ah = 0x00;
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 56752, ax);
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += 0xddae;
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    memoryASet16(ds, 0xddac, memoryAGet16(ds, 0xddac) + 1);
loc_1887c: // 1841:046c
    memoryASet16(ss, bp - 6, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 1698);
    cbw();
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 8);
    si = ax;
    goto loc_18901;
loc_1889b: // 1841:048b
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, si + 523, memoryAGet(es, si + 523) | dl);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 1698);
    cbw();
    memoryASet16(ss, bp - 8, ax);
    si += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    ax = memoryAGet16(ss, bp - 6);
    if ((short)ax <= (short)0x0014)
        goto loc_18901;
    ax = 0x40f9;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x1841);
    sp += 0x0006;
    ax = bp - 32;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18901: // 1841:04f1
    if (memoryAGet16(ss, bp - 8) == 0x0000)
        goto loc_1890c;
    if (si != memoryAGet16(ss, bp - 4))
        goto loc_1889b;
loc_1890c: // 1841:04fc
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 0x0002);
    ax = memoryAGet16(ss, bp - 12);
    if (ax >= memoryAGet16(ss, bp - 16))
        goto loc_1891b;
    goto loc_1877c;
loc_1891b: // 1841:050b
    ax = memoryAGet16(ds, 0xa7e9);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, 0x0000);
    ax = memoryAGet16(ds, 0xa7eb);
    memoryASet16(ss, bp - 18, ax);
    memoryASet16(ss, bp - 20, 0x0000);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    dx = memoryAGet16(ss, bp - 10);
    bx = memoryAGet16(ss, bp - 12);
    bx += ax;
    memoryASet16(ss, bp - 14, dx);
    memoryASet16(ss, bp - 16, bx);
loc_18944: // 1841:0534
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_1895a;
    goto loc_18add;
loc_1895a: // 1841:054a
    ax = 0x2c27;
    bx = memoryAGet16(ss, bp - 4);
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, bx + 1819, memoryAGet(es, bx + 1819) | dl);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, bx + 14658) != 0x00)
        goto loc_1897a;
    goto loc_18add;
loc_1897a: // 1841:056a
    if (memoryAGet(es, bx + 20490) != 0x00)
        goto loc_18985;
    goto loc_18a4d;
loc_18985: // 1841:0575
    al = memoryAGet(es, bx + 14658);
    ah = 0x00;
    if (ax)
        goto loc_189cf;
    ax = 0x412d;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x1841);
    sp += 0x0006;
    ax = bp - 32;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_189cf: // 1841:05bf
    ax = memoryAGet16(ss, bp - 4);
    ax |= 0x8000;
    memoryASet16(ss, bp - 22, ax);
    di = 0;
    goto loc_189fe;
loc_189dc: // 1841:05cc
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 56750);
    if (ax != memoryAGet16(ss, bp - 22))
        goto loc_189fd;
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += 0xddae;
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    goto loc_18add;
loc_189fd: // 1841:05ed
    di++;
loc_189fe: // 1841:05ee
    if (di < memoryAGet16(ds, 0xddac))
        goto loc_189dc;
    if (di < 0x0041)
        goto loc_18a15;
    ax = 0x4158;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18a15: // 1841:0605
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 22);
    memoryASet16(ds, bx + 56750, ax);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 20490);
    ah = 0x00;
    bx = di;
    bx <<= 1;
    bx <<= 1;
    memoryASet16(ds, bx + 56752, ax);
    ax = di;
    ax <<= 1;
    ax <<= 1;
    ax += 0xddae;
    bx = memoryAGet16(ss, bp - 20); es = memoryAGet16(ss, bp - 20 + 2); /*ggg2*/;
    memoryASet16(es, bx, ax);
    memoryASet16(ds, 0xddac, memoryAGet16(ds, 0xddac) + 1);
loc_18a4d: // 1841:063d
    memoryASet16(ss, bp - 6, 0x0000);
    bx = memoryAGet16(ss, bp - 4);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, bx + 14658);
    cbw();
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 8);
    si = ax;
    goto loc_18ad2;
loc_18a6c: // 1841:065c
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, si + 1819, memoryAGet(es, si + 1819) | dl);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 14658);
    cbw();
    memoryASet16(ss, bp - 8, ax);
    si += memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    ax = memoryAGet16(ss, bp - 6);
    if ((short)ax <= (short)0x0014)
        goto loc_18ad2;
    ax = 0x418d;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x1841);
    sp += 0x0006;
    ax = bp - 32;
    push(ax);
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = bp - 112;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18ad2: // 1841:06c2
    if (memoryAGet16(ss, bp - 8) == 0x0000)
        goto loc_18add;
    if (si != memoryAGet16(ss, bp - 4))
        goto loc_18a6c;
loc_18add: // 1841:06cd
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 0x0002);
    ax = memoryAGet16(ss, bp - 12);
    if (ax >= memoryAGet16(ss, bp - 16))
        goto loc_18aec;
    goto loc_18944;
loc_18aec: // 1841:06dc
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18af2() // 1841:06e2 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xd074, 0xd078);
    dx = 0;
    goto loc_18b11;
loc_18aff: // 1841:06ef
    ax = dx;
    cl = 0x04;
    ax <<= cl;
    ax += 0xd088;
    bx = dx;
    bx <<= cl;
    memoryASet16(ds, bx + 53382, ax);
    dx++;
loc_18b11: // 1841:0701
    if ((short)dx < (short)0x0059)
        goto loc_18aff;
    bx = dx;
    cl = 0x04;
    bx <<= cl;
    memoryASet16(ds, bx + 53382, 0x0000);
    memoryASet16(ds, 0xd076, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18b2a() // 1841:071a +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 51493);
    ax >>= 1;
    ax += memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 2, ax);
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa7e7);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, di + 1698) == 0x00)
        goto loc_18bd9;
    if (memoryAGet(es, di + 402) == 0x00)
        goto loc_18bd9;
    if (memoryAGet16(ds, 0xd074) != 0x0000)
        goto loc_18b7c;
    ax = 0x41c1;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18b7c: // 1841:076c
    si = memoryAGet16(ds, 0xd074);
    bx = memoryAGet16(ds, 0xd074);
    ax = memoryAGet16(ds, bx + 14);
    memoryASet16(ds, 0xd074, ax);
    ax = memoryAGet16(ds, 0xd076);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ds, 0xd076, si);
    if (memoryAGet16(ss, bp - 8) == 0x0000)
        goto loc_18ba5;
    ax = si;
    ax += 0x000e;
    bx = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, bx + 12, ax);
loc_18ba5: // 1841:0795
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, si + 14, ax);
    memoryASet16(ds, si + 12, 0xd076);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, si, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 2, ax);
    memoryASet16(ds, si + 4, di);
    ax = memoryAGet16(ss, bp - 4);
    dx = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, si + 10, ax);
    memoryASet16(ds, si + 8, dx);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    es = memoryAGet16(ds, 0xa7eb);
    ax = memoryAGet16(es, bx);
    memoryASet16(ds, si + 6, ax);
loc_18bd9: // 1841:07c9
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    dx = memoryAGet16(ds, 0xa7e9);
    memoryASet16(ss, bp - 4, dx);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 6); es = memoryAGet16(ss, bp - 6 + 2); /*ggg2*/;
    di = memoryAGet16(es, bx);
    es = memoryAGet16(ds, 0xc8a1);
    if (memoryAGet(es, di + 14658) == 0x00)
        goto loc_18c72;
    if (memoryAGet(es, di + 20490) == 0x00)
        goto loc_18c72;
    if (memoryAGet16(ds, 0xd074) != 0x0000)
        goto loc_18c15;
    ax = 0x41f2;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18c15: // 1841:0805
    si = memoryAGet16(ds, 0xd074);
    bx = memoryAGet16(ds, 0xd074);
    ax = memoryAGet16(ds, bx + 14);
    memoryASet16(ds, 0xd074, ax);
    ax = memoryAGet16(ds, 0xd076);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ds, 0xd076, si);
    if (memoryAGet16(ss, bp - 8) == 0x0000)
        goto loc_18c3e;
    ax = si;
    ax += 0x000e;
    bx = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, bx + 12, ax);
loc_18c3e: // 1841:082e
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ds, si + 14, ax);
    memoryASet16(ds, si + 12, 0xd076);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, si, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, si + 2, ax);
    memoryASet16(ds, si + 4, di);
    ax = memoryAGet16(ss, bp - 4);
    dx = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, si + 10, ax);
    memoryASet16(ds, si + 8, dx);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    es = memoryAGet16(ds, 0xa7eb);
    ax = memoryAGet16(es, bx);
    memoryASet16(ds, si + 6, ax);
loc_18c72: // 1841:0862
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18c78() // 1841:0868 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    cx = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ds, 0xd076);
    goto loc_18cb4;
loc_18c85: // 1841:0875
    if (memoryAGet16(ds, si) != cx)
        goto loc_18cb1;
    ax = memoryAGet16(ds, si + 14);
    bx = memoryAGet16(ds, si + 12);
    memoryASet16(ds, bx, ax);
    if (memoryAGet16(ds, si + 14) == 0x0000)
        goto loc_18ca0;
    ax = memoryAGet16(ds, si + 12);
    bx = memoryAGet16(ds, si + 14);
    memoryASet16(ds, bx + 12, ax);
loc_18ca0: // 1841:0890
    dx = memoryAGet16(ds, si + 14);
    ax = memoryAGet16(ds, 0xd074);
    memoryASet16(ds, si + 14, ax);
    memoryASet16(ds, 0xd074, si);
    si = dx;
    goto loc_18cb4;
loc_18cb1: // 1841:08a1
    si = memoryAGet16(ds, si + 14);
loc_18cb4: // 1841:08a4
    if (si)
        goto loc_18c85;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18cbb() // 1841:08ab +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    cx = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ds, 0xd076);
    goto loc_18cf8;
loc_18cc8: // 1841:08b8
    if (memoryAGet16(ds, si + 2) != cx)
        goto loc_18cf5;
    ax = memoryAGet16(ds, si + 14);
    bx = memoryAGet16(ds, si + 12);
    memoryASet16(ds, bx, ax);
    if (memoryAGet16(ds, si + 14) == 0x0000)
        goto loc_18ce4;
    ax = memoryAGet16(ds, si + 12);
    bx = memoryAGet16(ds, si + 14);
    memoryASet16(ds, bx + 12, ax);
loc_18ce4: // 1841:08d4
    dx = memoryAGet16(ds, si + 14);
    ax = memoryAGet16(ds, 0xd074);
    memoryASet16(ds, si + 14, ax);
    memoryASet16(ds, 0xd074, si);
    si = dx;
    goto loc_18cf8;
loc_18cf5: // 1841:08e5
    si = memoryAGet16(ds, si + 14);
loc_18cf8: // 1841:08e8
    if (si)
        goto loc_18cc8;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18d56() // 1841:0946 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = 0xddae;
    goto loc_18dbb;
loc_18d63: // 1841:0953
    ax = memoryAGet16(ds, di + 2);
    ax -= memoryAGet16(ds, 0xa54c);
    memoryASet16(ds, di + 2, ax);
    goto loc_18db2;
loc_18d6f: // 1841:095f
    if (!(memoryAGet16(ds, di) & 0x8000))
        goto loc_18d98;
    ax = memoryAGet16(ds, di);
    ax &= 0x7fff;
    si = ax;
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 14658);
    cbw();
    si += ax;
    al = memoryAGet(es, si + 20490);
    ah = 0x00;
    memoryASet16(ds, di + 2, memoryAGet16(ds, di + 2) + ax);
    si |= 0x8000;
    goto loc_18db0;
loc_18d98: // 1841:0988
    si = memoryAGet16(ds, di);
    es = memoryAGet16(ds, 0xc8a1);
    al = memoryAGet(es, si + 1698);
    cbw();
    si += ax;
    al = memoryAGet(es, si + 402);
    ah = 0x00;
    memoryASet16(ds, di + 2, memoryAGet16(ds, di + 2) + ax);
loc_18db0: // 1841:09a0
    memoryASet16(ds, di, si);
loc_18db2: // 1841:09a2
    if ((short)memoryAGet16(ds, di + 2) < (short)0x0001)
        goto loc_18d6f;
    di += 0x0004;
loc_18dbb: // 1841:09ab
    if (memoryAGet16(ds, di) != 0x0000)
        goto loc_18d63;
    ax = memoryAGet16(ds, 0xd076);
    memoryASet16(ss, bp - 2, ax);
    goto loc_18e35;
loc_18dc8: // 1841:09b8
    bx = memoryAGet16(ss, bp - 2);
    bx = memoryAGet16(ds, bx + 6);
    si = memoryAGet16(ds, bx);
    bx = memoryAGet16(ss, bp - 2);
    if (memoryAGet16(ds, bx + 4) == si)
        goto loc_18e2c;
    memoryASet16(ds, bx + 4, si);
    {int tmp1 = memoryAGet16(ds, bx + 8); int tmp2 = memoryAGet16(ds, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    ax = si;
    ax &= 0x7fff;
    memoryASet16(es, bx, ax);
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx);
    ax -= memoryAGet16(ds, 0xc74f);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, bx + 2);
    ax -= memoryAGet16(ds, 0xc74d);
    memoryASet16(ss, bp - 8, ax);
    if (memoryAGet16(ss, bp - 6) >= 0x0015)
        goto loc_18e08;
    if (memoryAGet16(ss, bp - 8) < 0x000e)
        goto loc_18e14;
loc_18e08: // 1841:09f8
    ax = 0x4223;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18e14: // 1841:0a04
    bx = memoryAGet16(ss, bp - 8);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 57836);
    ax += memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 4, ax);
    push(ax);
    push(cs); cs = 0x1a13; sub_1a13c(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18e2c: // 1841:0a1c
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx + 14);
    memoryASet16(ss, bp - 2, ax);
loc_18e35: // 1841:0a25
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_18dc8;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18e41() // 1841:0a31 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    memoryASet16(ds, 0xd618, 0xd622);
    si = 0;
    goto loc_18e61;
loc_18e4f: // 1841:0a3f
    ax = si;
    cl = 0x05;
    ax <<= cl;
    ax += 0xd642;
    bx = si;
    bx <<= cl;
    memoryASet16(ds, bx + 54848, ax);
    si++;
loc_18e61: // 1841:0a51
    if ((short)si < (short)0x003b)
        goto loc_18e4f;
    bx = si;
    cl = 0x05;
    bx <<= cl;
    memoryASet16(ds, bx + 54848, 0x0000);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xd61a;
    push(ax);
    push(cs); cs = 0x01ed; sub_3bf5(); assert(cs == 0x1841);
    sp += 0x0006;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18e88() // 1841:0a78 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xc753, ax);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0xc751, ax);
    ax = memoryAGet16(ds, 0xc753);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, 0xc74f, ax);
    ax = memoryAGet16(ds, 0xc751);
    ax >>= cl;
    memoryASet16(ds, 0xc74d, ax);
    ax = memoryAGet16(ds, 0xc74f);
    cl = memoryAGet(ds, 0xe1ea);
    ax <<= cl;
    memoryASet16(ds, 0xe6e6, ax);
    ax = memoryAGet16(ds, 0xc74d);
    cl = 0x04;
    ax <<= cl;
    memoryASet16(ds, 0xe6e4, ax);
    bx = memoryAGet16(ds, 0xc74d);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 51493);
    dx = memoryAGet16(ds, 0xc74f);
    dx <<= 1;
    ax += dx;
    memoryASet16(ds, 0xe1e8, ax);
    ax = memoryAGet16(ds, 0xc753);
    ax >>= cl;
    ax &= 0x000f;
    memoryASet16(ds, 0xe6ec, ax);
    ax &= 0x0008;
    memoryASet16(ds, 0xc75b, ax);
    ax = memoryAGet16(ds, 0xc751);
    ax >>= cl;
    ax &= 0x000f;
    memoryASet16(ds, 0xc759, ax);
    memoryASet16(ds, 0xe6ea, ax);
    ax = memoryAGet16(ds, 0xe6ec);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    bx = memoryAGet16(ds, 0xe6ea);
    bx <<= 1;
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ds, 0xa7b0, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18f0b() // 1841:0afb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    memoryASet16(ds, 0xccaa, ax);
    memoryASet16(ds, 0xccac, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18f18() // 1841:0b08 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 10) == 0x0000)
        goto loc_18f4a;
    bx = memoryAGet16(ds, 0xccac);
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, bx + 52382, ax);
    ax = memoryAGet16(ds, 0xccac);
    memoryASet16(ds, 0xccac, memoryAGet16(ds, 0xccac) + 1);
    if (ax != 0x0006)
        goto loc_18f6f;
    ax = 0x4244;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_18f4a: // 1841:0b3a
    bx = memoryAGet16(ds, 0xccaa);
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, bx + 52370, ax);
    ax = memoryAGet16(ds, 0xccaa);
    memoryASet16(ds, 0xccaa, memoryAGet16(ds, 0xccaa) + 1);
    if (ax != 0x0006)
        goto loc_18f6f;
    ax = 0x4279;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_18f6f: // 1841:0b5f
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18f71() // 1841:0b61 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xc753, memoryAGet16(ds, 0xc753) + ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0xc751, memoryAGet16(ds, 0xc751) + ax);
    ax = memoryAGet16(ds, 0xc753);
    cl = 0x08;
    ax >>= cl;
    di = ax;
    ax = memoryAGet16(ds, 0xc751);
    ax >>= cl;
    memoryASet16(ss, bp - 2, ax);
    if ((short)memoryAGet16(ss, bp + 6) <= (short)0x0000)
        goto loc_18fc3;
    di += 0x0014;
    si = 0;
    goto loc_18fbb;
loc_18fa5: // 1841:0b95
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52370) != di)
        goto loc_18fba;
    ax = memoryAGet16(ds, 0xc753);
    ax &= 0xff00;
    memoryASet16(ds, 0xc753, ax);
    goto loc_18fec;
loc_18fba: // 1841:0baa
    si++;
loc_18fbb: // 1841:0bab
    if ((short)si < (short)memoryAGet16(ds, 0xccaa))
        goto loc_18fa5;
    goto loc_18fec;
loc_18fc3: // 1841:0bb3
    if ((short)memoryAGet16(ss, bp + 6) >= (short)0x0000)
        goto loc_18fec;
    si = 0;
    goto loc_18fe6;
loc_18fcd: // 1841:0bbd
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 52370) != di)
        goto loc_18fe5;
    ax = memoryAGet16(ds, 0xc753);
    ax &= 0xff00;
    ax += 0x0100;
    memoryASet16(ds, 0xc753, ax);
    goto loc_18fec;
loc_18fe5: // 1841:0bd5
    si++;
loc_18fe6: // 1841:0bd6
    if ((short)si < (short)memoryAGet16(ds, 0xccaa))
        goto loc_18fcd;
loc_18fec: // 1841:0bdc
    if ((short)memoryAGet16(ss, bp + 8) <= (short)0x0000)
        goto loc_1901b;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 0x000d);
    si = 0;
    goto loc_19013;
loc_18ffa: // 1841:0bea
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52382);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_19012;
    ax = memoryAGet16(ds, 0xc751);
    ax &= 0xff00;
    memoryASet16(ds, 0xc751, ax);
    goto loc_19047;
loc_19012: // 1841:0c02
    si++;
loc_19013: // 1841:0c03
    if ((short)si < (short)memoryAGet16(ds, 0xccac))
        goto loc_18ffa;
    goto loc_19047;
loc_1901b: // 1841:0c0b
    if ((short)memoryAGet16(ss, bp + 8) >= (short)0x0000)
        goto loc_19047;
    si = 0;
    goto loc_19041;
loc_19025: // 1841:0c15
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52382);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_19040;
    ax = memoryAGet16(ds, 0xc751);
    ax &= 0xff00;
    ax += 0x0100;
    memoryASet16(ds, 0xc751, ax);
    goto loc_19047;
loc_19040: // 1841:0c30
    si++;
loc_19041: // 1841:0c31
    if ((short)si < (short)memoryAGet16(ds, 0xccac))
        goto loc_19025;
loc_19047: // 1841:0c37
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xc751));
    push(ax);
    push(memoryAGet16(ds, 0xc753));
    push(cs);
    sub_18e88();
    sp += 0x0008;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19060() // 1841:0c50 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xddaa, ax);
    memoryASet16(ds, 0xdda8, dx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19072() // 1841:0c62 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    bx = memoryAGet16(ss, bp + 6);
    if (bx <= 0x0003)
        goto loc_19085;
    goto loc_19120;
loc_19085: // 1841:0c75
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 3409)); // 1841:0c77;
  // gap 148 bytes
loc_19120: // 1841:0d10
    ax = 0x42ac;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
    goto loc_19150;
  // gap 2 bytes
loc_19130: // 1841:0d20
    push(si);
    push(cs); cs = 0x1a13; sub_1a13c(); assert(cs == 0x1841);
    sp += 0x0002;
    push(memoryAGet16(ss, bp - 6));
    push(di);
    push(cs);
    sub_18b2a();
    sp += 0x0004;
    si += memoryAGet16(ss, bp - 4);
    di += memoryAGet16(ss, bp - 8);
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + ax);
loc_19150: // 1841:0d40
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
    if (ax)
        goto loc_19130;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19169() // 1841:0d59 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ds, 0xc751));
    push(memoryAGet16(ds, 0xc753));
    push(cs);
    sub_19743();
    sp += 0x0004;
    push(cs);
    sub_1a07e();
    push(cs);
    sub_1a07e();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19435() // 1841:1025 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    if (ax >= memoryAGet16(ds, 0xc74b))
        goto loc_1944b;
    ax = memoryAGet16(ds, 0xc74b);
    memoryASet16(ss, bp + 6, ax);
    goto loc_1945a;
loc_1944b: // 1841:103b
    ax = memoryAGet16(ss, bp + 6);
    if (ax <= memoryAGet16(ds, 0xc749))
        goto loc_1945a;
    ax = memoryAGet16(ds, 0xc749);
    memoryASet16(ss, bp + 6, ax);
loc_1945a: // 1841:104a
    ax = memoryAGet16(ss, bp + 8);
    if (ax >= memoryAGet16(ds, 0xe6da))
        goto loc_1946b;
    ax = memoryAGet16(ds, 0xe6da);
    memoryASet16(ss, bp + 8, ax);
    goto loc_1947a;
loc_1946b: // 1841:105b
    ax = memoryAGet16(ss, bp + 8);
    if (ax <= memoryAGet16(ds, 0xc747))
        goto loc_1947a;
    ax = memoryAGet16(ds, 0xc747);
    memoryASet16(ss, bp + 8, ax);
loc_1947a: // 1841:106a
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x08;
    ax >>= cl;
    memoryASet16(ds, 0xc74f, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax >>= cl;
    memoryASet16(ds, 0xc74d, ax);
    di = 0;
    goto loc_194d9;
loc_19490: // 1841:1080
    bx = di;
    bx <<= 1;
    si = memoryAGet16(ds, bx + 52370);
    if (si < memoryAGet16(ds, 0xc74f))
        goto loc_194b6;
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x000a;
    if (ax < si)
        goto loc_194b6;
    ax = si;
    cl = 0x08;
    ax <<= cl;
    ax += 0x0100;
    memoryASet16(ss, bp + 6, ax);
    goto loc_194df;
loc_194b6: // 1841:10a6
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x000b;
    if (ax > si)
        goto loc_194d8;
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x0014;
    if (ax < si)
        goto loc_194d8;
    ax = si;
    cl = 0x08;
    ax <<= cl;
    ax += 0xec00;
    memoryASet16(ss, bp + 6, ax);
    goto loc_194df;
loc_194d8: // 1841:10c8
    di++;
loc_194d9: // 1841:10c9
    if ((short)di < (short)memoryAGet16(ds, 0xccaa))
        goto loc_19490;
loc_194df: // 1841:10cf
    di = 0;
    goto loc_1952c;
loc_194e3: // 1841:10d3
    bx = di;
    bx <<= 1;
    si = memoryAGet16(ds, bx + 52382);
    if (si < memoryAGet16(ds, 0xc74d))
        goto loc_19509;
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x0006;
    if (ax < si)
        goto loc_19509;
    ax = si;
    cl = 0x08;
    ax <<= cl;
    ax += 0x0100;
    memoryASet16(ss, bp + 8, ax);
    goto loc_19532;
loc_19509: // 1841:10f9
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x0007;
    if (ax > si)
        goto loc_1952b;
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x000d;
    if (ax < si)
        goto loc_1952b;
    ax = si;
    cl = 0x08;
    ax <<= cl;
    ax += 0xf300;
    memoryASet16(ss, bp + 8, ax);
    goto loc_19532;
loc_1952b: // 1841:111b
    di++;
loc_1952c: // 1841:111c
    if ((short)di < (short)memoryAGet16(ds, 0xccac))
        goto loc_194e3;
loc_19532: // 1841:1122
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_18e88();
    sp += 0x0008;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19630() // 1841:1220 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = memoryAGet16(ds, 0xa54a);
    dx = memoryAGet16(ds, 0xa548);
    if (ax < memoryAGet16(ds, 0xa53f))
        goto loc_19659;
    if (ax > memoryAGet16(ds, 0xa53f))
        goto loc_1964b;
    if (dx <= memoryAGet16(ds, 0xa53d))
        goto loc_19659;
loc_1964b: // 1841:123b
    ax = memoryAGet16(ds, 0xa54a);
    dx = memoryAGet16(ds, 0xa548);
    memoryASet16(ds, 0xa53f, ax);
    memoryASet16(ds, 0xa53d, dx);
loc_19659: // 1841:1249
    if (memoryAGet16(ds, 0x3bd6) == 0x0000)
        goto loc_196b4;
    ax = memoryAGet16(ds, 0xa54a);
    dx = memoryAGet16(ds, 0xa548);
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
loc_1966d: // 1841:125d
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    flags.carry = (dx + 0x0006) >= 0x10000;
    dx += 0x0006;
    ax += 0x0000 + flags.carry;
    if (ax > memoryAGet16(ds, 0xa53f))
        goto loc_1966d;
    if (ax != memoryAGet16(ds, 0xa53f))
        goto loc_19687;
    if (dx > memoryAGet16(ds, 0xa53d))
        goto loc_1966d;
loc_19687: // 1841:1277
    ax = memoryAGet16(ss, bp - 6);
    dx = memoryAGet16(ss, bp - 8);
    flags.carry = (dx + 0x0003) >= 0x10000;
    dx += 0x0003;
    ax += 0x0000 + flags.carry;
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    ax = memoryAGet16(ds, 0xa54a);
    flags.carry = (dx + 0x0003) >= 0x10000;
    dx += 0x0003;
    ax += 0x0000 + flags.carry;
    memoryASet16(ds, 0xa53f, ax);
    memoryASet16(ds, 0xa53d, dx);
    memoryASet16(ds, 0xa54c, 0x0003);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_196b4: // 1841:12a4
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    ax = memoryAGet16(ss, bp - 4);
    ax -= memoryAGet16(ds, 0xa548);
    memoryASet16(ds, 0xa54c, ax);
    if (memoryAGet16(ds, 0xa54c) < 0x0002)
        goto loc_196b4;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa54a, ax);
    memoryASet16(ds, 0xa548, dx);
    if (memoryAGet16(ds, 0xa54c) <= 0x0005)
        goto loc_196f8;
    ax = memoryAGet16(ds, 0xa54c);
    ax -= 0x0005;
    flags.carry = memoryAGet16(ds, 0xa53d) < ax;
    memoryASet16(ds, 0xa53d, memoryAGet16(ds, 0xa53d) - ax);
    memoryASet16(ds, 0xa53f, memoryAGet16(ds, 0xa53f) - 0x0000 - flags.carry);
    memoryASet16(ds, 0xa54c, 0x0005);
loc_196f8: // 1841:12e8
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_196fc() // 1841:12ec +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = 0;
    goto loc_19738;
loc_19705: // 1841:12f5
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    ax += 0x3c00;
    cx = ax;
    si = 0x0001;
    dx = 0;
    goto loc_19728;
loc_19719: // 1841:1309
    bx = dx;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 16496) != cx)
        goto loc_19727;
    si = 0;
    goto loc_1972d;
loc_19727: // 1841:1317
    dx++;
loc_19728: // 1841:1318
    if (dx < 0x0003)
        goto loc_19719;
loc_1972d: // 1841:131d
    if (!si)
        goto loc_19737;
    ax = cx;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_19737: // 1841:1327
    di++;
loc_19738: // 1841:1328
    if (di < 0x0003)
        goto loc_19705;
    ax = 0;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19743() // 1841:1333 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_19435();
    sp += 0x0004;
    push(cs);
    sub_18af2();
    ax = memoryAGet16(ds, 0xdeb2);
    memoryASet16(ds, 0xdeb6, ax);
    ax = memoryAGet16(ds, 0xdeb4);
    memoryASet16(ds, 0xdeb8, ax);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 57014);
    memoryASet16(ds, 0xe6d8, ax);
    ax = memoryAGet16(ds, 0xdeb6);
    ax += 0x0015;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0xdeb8);
    ax += 0x0015;
    memoryASet16(ss, bp - 6, ax);
    di = 0;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_197d2;
loc_19790: // 1841:1380
    si = 0;
    goto loc_197b5;
loc_19794: // 1841:1384
    push(di);
    push(cs); cs = 0x1a13; sub_1a13c(); assert(cs == 0x1841);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ds, 0xc74d);
    push(ax);
    ax = si;
    ax += memoryAGet16(ds, 0xc74f);
    push(ax);
    push(cs);
    sub_18b2a();
    sp += 0x0004;
    di++;
    si++;
loc_197b5: // 1841:13a5
    if ((short)si < (short)0x0015)
        goto loc_19794;
    di++;
    bx = memoryAGet16(ss, bp - 6);
    al = 0x00;
    memoryASet(ds, bx, al);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet(ds, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0016);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 0x0016);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_197d2: // 1841:13c2
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x000e)
        goto loc_19790;
    bx = memoryAGet16(ss, bp - 6);
    ax = 0x0301;
    memoryASet16(ds, bx + 65515, ax);
    bx = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, bx + 65515, ax);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_197ed() // 1841:13dd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0020;
    push(si);
    push(di);
    ax = memoryAGet16(ds, 0xc74f);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ds, 0xc74d);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, 0xa7b0);
    memoryASet16(ss, bp - 24, ax);
    ax = memoryAGet16(ds, 0xe6ec);
    memoryASet16(ss, bp - 22, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_18f71();
    sp += 0x0004;
    ax = memoryAGet16(ds, 0xc74f);
    ax -= memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 2, ax);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, 0xc74d);
    ax -= memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 4, ax);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    ax ^= dx;
    ax -= dx;
    memoryASet16(ss, bp - 8, ax);
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0001)
        goto loc_19848;
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x0001)
        goto loc_1985d;
loc_19848: // 1841:1438
    push(memoryAGet16(ds, 0xc751));
    push(memoryAGet16(ds, 0xc753));
    push(cs);
    sub_19743();
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1985d: // 1841:144d
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_1986c;
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_1986c;
    goto loc_19a4b;
loc_1986c: // 1841:145c
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x04;
    ax <<= cl;
    cl = 0x06;
    ax <<= cl;
    dx = memoryAGet16(ss, bp - 2);
    dx <<= 1;
    ax += dx;
    memoryASet16(ss, bp - 32, ax);
    si = 0;
    goto loc_19908;
loc_19886: // 1841:1476
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ss, bp - 32);
    memoryASet16(ds, bx + 16496, memoryAGet16(ds, bx + 16496) + ax);
    if (memoryAGet16(ds, 0xe6e8) == 0x0000)
        goto loc_19907;
    bx = si;
    bx <<= 1;
    if (memoryAGet16(ds, bx + 16496) <= 0xc400)
        goto loc_19907;
    if ((short)memoryAGet16(ss, bp - 32) <= (short)0x0000)
        goto loc_198af;
    ax = 0x4c00;
    goto loc_198b2;
loc_198af: // 1841:149f
    ax = 0xb400;
loc_198b2: // 1841:14a2
    memoryASet16(ss, bp - 30, ax);
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    ax -= memoryAGet16(ss, bp - 32);
    memoryASet16(ss, bp - 26, ax);
    ax += memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 28, ax);
    bx = si;
    bx <<= 1;
    ax += memoryAGet16(ss, bp - 32);
    memoryASet16(ds, bx + 16496, ax);
    ax = 0x00e0;
    push(ax);
    ax = 0x002a;
    push(ax);
    push(memoryAGet16(ss, bp - 28));
    push(memoryAGet16(ss, bp - 26));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x1841);
    sp += 0x0008;
    if (si != memoryAGet16(ds, 0xdda4))
        goto loc_19907;
    ax = memoryAGet16(ss, bp - 22);
    ax &= memoryAGet16(ds, 0xdda6);
    push(ax);
    ax = memoryAGet16(ss, bp - 28);
    ax += memoryAGet16(ss, bp - 24);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x1841);
    sp += 0x0004;
loc_19907: // 1841:14f7
    si++;
loc_19908: // 1841:14f8
    if ((short)si >= (short)0x0003)
        goto loc_19910;
    goto loc_19886;
loc_19910: // 1841:1500
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b4, ax);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b2, ax);
    ax = memoryAGet16(ds, 0x4074);
    memoryASet16(ds, 0xa546, ax);
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 14, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_19942;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) + 0x0016);
    goto loc_1994c;
loc_19942: // 1841:1532
    if (memoryAGet16(ss, bp - 4) != 0xffff)
        goto loc_1994c;
    memoryASet16(ss, bp - 14, memoryAGet16(ss, bp - 14) - 0x0016);
loc_1994c: // 1841:153c
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ds, 0xdeb6, memoryAGet16(ds, 0xdeb6) + ax);
    memoryASet16(ds, 0xdeb8, memoryAGet16(ds, 0xdeb8) + ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_199c6;
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_1997c;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_19072();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc74f);
    ax--;
    push(ax);
    push(cs);
    sub_18c78();
    sp += 0x0002;
    goto loc_19995;
loc_1997c: // 1841:156c
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_19072();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc74f);
    ax += 0x0015;
    push(ax);
    push(cs);
    sub_18c78();
    sp += 0x0002;
loc_19995: // 1841:1585
    ax = memoryAGet16(ds, 0xdeb6);
    ax += 0x0015;
    di = ax;
    ax = memoryAGet16(ds, 0xdeb8);
    ax += 0x0015;
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 16, 0x0000);
    goto loc_199c0;
loc_199ad: // 1841:159d
    bx = memoryAGet16(ss, bp - 20);
    al = 0x00;
    memoryASet(ds, bx, al);
    memoryASet(ds, di, al);
    di += 0x0016;
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 0x0016);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
loc_199c0: // 1841:15b0
    if ((short)memoryAGet16(ss, bp - 16) < (short)0x000e)
        goto loc_199ad;
loc_199c6: // 1841:15b6
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_19a23;
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_199f0;
    memoryASet16(ss, bp - 18, 0x011e);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_19072();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc74d);
    ax--;
    push(ax);
    push(cs);
    sub_18cbb();
    sp += 0x0002;
    goto loc_19a0d;
loc_199f0: // 1841:15e0
    memoryASet16(ss, bp - 18, 0x0000);
    ax = 0;
    push(ax);
    push(cs);
    sub_19072();
    sp += 0x0002;
    ax = memoryAGet16(ds, 0xc74d);
    ax += 0x000e;
    push(ax);
    push(cs);
    sub_18cbb();
    sp += 0x0002;
loc_19a0d: // 1841:15fd
    bx = memoryAGet16(ds, 0xdeb8);
    bx += memoryAGet16(ss, bp - 18);
    al = 0x00;
    memoryASet(ds, bx + 21, al);
    bx = memoryAGet16(ds, 0xdeb6);
    bx += memoryAGet16(ss, bp - 18);
    memoryASet(ds, bx + 21, al);
loc_19a23: // 1841:1613
    ax = memoryAGet16(ds, 0xdeb6);
    ax += 0x0133;
    di = ax;
    ax = memoryAGet16(ds, 0xdeb8);
    ax += 0x0133;
    memoryASet16(ss, bp - 20, ax);
    bx = memoryAGet16(ss, bp - 20);
    al = 0x00;
    memoryASet(ds, bx, al);
    memoryASet(ds, di, al);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
    di++;
    bx = memoryAGet16(ss, bp - 20);
    ax = 0x0301;
    memoryASet16(ds, bx, ax);
    memoryASet16(ds, di, ax);
loc_19a4b: // 1841:163b
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19a51() // 1841:1641 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0064;
    push(si);
    push(di);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_19a65;
    if (memoryAGet16(ss, bp + 12) != 0xffff)
        goto loc_19a76;
loc_19a65: // 1841:1655
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_19c6b();
    sp += 0x0002;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_19a76: // 1841:1666
    bx = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ds, bx);
    if (!si)
        goto loc_19ae3;
    if ((short)memoryAGet16(ds, si + 26) >= (short)0x0002)
        goto loc_19ac5;
    if (memoryAGet16(ds, si + 26) != 0x0000)
        goto loc_19aa8;
    ax = 0x0008;
    push(ax);
    push(si);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52398);
    memoryASet16(ds, bx + 52398, memoryAGet16(ds, bx + 52398) + 0x0008);
    push(ax);
    push(cs); cs = 0x01ed; sub_3bac(); assert(cs == 0x1841);
    sp += 0x0006;
loc_19aa8: // 1841:1698
    ax = 0x0008;
    push(ax);
    push(si);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52398);
    memoryASet16(ds, bx + 52398, memoryAGet16(ds, bx + 52398) + 0x0008);
    push(ax);
    push(cs); cs = 0x01ed; sub_3bac(); assert(cs == 0x1841);
    sp += 0x0006;
loc_19ac5: // 1841:16b5
    ax = memoryAGet16(ds, si + 24);
    if (ax == memoryAGet16(ss, bp + 16))
        goto loc_19b30;
    di = memoryAGet16(ds, si + 30);
    if (!di)
        goto loc_19ada;
    ax = memoryAGet16(ds, si + 28);
    memoryASet16(ds, di + 28, ax);
loc_19ada: // 1841:16ca
    bx = memoryAGet16(ds, si + 28);
    memoryASet16(ds, bx, di);
    goto loc_19b04;
  // gap 2 bytes
loc_19ae3: // 1841:16d3
    if (memoryAGet16(ds, 0xd618) != 0x0000)
        goto loc_19af6;
    ax = 0x42c1;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_19af6: // 1841:16e6
    si = memoryAGet16(ds, 0xd618);
    bx = memoryAGet16(ds, 0xd618);
    ax = memoryAGet16(ds, bx + 30);
    memoryASet16(ds, 0xd618, ax);
loc_19b04: // 1841:16f4
    bx = memoryAGet16(ss, bp + 16);
    bx <<= 1;
    di = memoryAGet16(ds, bx + 54810);
    if (!di)
        goto loc_19b19;
    ax = si;
    ax += 0x001e;
    memoryASet16(ds, di + 28, ax);
loc_19b19: // 1841:1709
    memoryASet16(ds, si + 30, di);
    bx = memoryAGet16(ss, bp + 16);
    bx <<= 1;
    memoryASet16(ds, bx + 54810, si);
    ax = memoryAGet16(ss, bp + 16);
    ax <<= 1;
    ax += 0xd61a;
    memoryASet16(ds, si + 28, ax);
loc_19b30: // 1841:1720
    ax = memoryAGet16(ss, bp + 12);
    ax -= 0x007c;
    dx = 0x0012;
    imul16(dx);
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp + 12);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 6) != 0x0000)
        goto loc_19b96;
    ax = 0x42ef;
    push(ax);
    ax = bp - 100;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = 0x000a;
    push(ax);
    ax = bp - 20;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs); cs = 0x01ed; sub_3b3f(); assert(cs == 0x1841);
    sp += 0x0006;
    ax = bp - 20;
    push(ax);
    ax = bp - 100;
    push(ax);
    push(cs); cs = 0x01ed; sub_4151(); assert(cs == 0x1841);
    sp += 0x0004;
    ax = bp - 100;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1841);
    sp += 0x0002;
loc_19b96: // 1841:1786
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 6);
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) + ax);
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + ax);
    ax = memoryAGet16(ss, bp + 8);
    cl = 0x04;
    ax >>= cl;
    memoryASet16(ss, bp - 10, ax);
    if (memoryAGet16(ds, 0x7ade) == 0x0000)
        goto loc_19bbf;
    memoryASet16(ss, bp - 8, 0x0000);
    goto loc_19bca;
loc_19bbf: // 1841:17af
    ax = memoryAGet16(ss, bp - 10);
    ax &= 0x0007;
    ax >>= 1;
    memoryASet16(ss, bp - 8, ax);
loc_19bca: // 1841:17ba
    ax = memoryAGet16(ss, bp - 10);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ds, si, ax);
    ax = memoryAGet16(ss, bp + 10);
    cl = 0x04;
    ax >>= cl;
    memoryASet16(ds, si + 2, ax);
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 16);
    memoryASet16(ds, si + 4, ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ds, si + 6, ax);
    ax = memoryAGet16(ss, bp + 12);
    memoryASet16(ds, si + 8, ax);
    bx = memoryAGet16(ss, bp - 8);
    bx <<= 1;
    es = memoryAGet16(ss, bp - 6);
    ax = memoryAGet16(es, bx);
    memoryASet16(ds, si + 10, ax);
    bx = memoryAGet16(ss, bp - 8);
    bx <<= 1;
    ax = memoryAGet16(es, bx + 8);
    memoryASet16(ds, si + 12, ax);
    ax = memoryAGet16(ss, bp + 14);
    memoryASet16(ds, si + 14, ax);
    ax = memoryAGet16(ss, bp + 16);
    memoryASet16(ds, si + 24, ax);
    ax = memoryAGet16(ds, si);
    cl = memoryAGet(ds, 0xe1ea);
    ax = sar16(ax, cl);
    memoryASet16(ds, si + 16, ax);
    ax = memoryAGet16(ds, si + 2);
    cl = 0x04;
    ax = sar16(ax, cl);
    memoryASet16(ds, si + 18, ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ds, si + 4);
    ax--;
    cl = memoryAGet(ds, 0xe1ea);
    ax = sar16(ax, cl);
    ax -= memoryAGet16(ds, si + 16);
    ax++;
    memoryASet16(ds, si + 20, ax);
    ax = memoryAGet16(ds, si + 2);
    ax += memoryAGet16(ds, si + 6);
    ax--;
    cl = 0x04;
    ax = sar16(ax, cl);
    ax -= memoryAGet16(ds, si + 18);
    ax++;
    memoryASet16(ds, si + 22, ax);
    memoryASet16(ds, si + 26, 0x0002);
    bx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, bx, si);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19c6b() // 1841:185b +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ds, di);
    if (!si)
        goto loc_19ced;
    if ((short)memoryAGet16(ds, si + 26) >= (short)0x0002)
        goto loc_19cc2;
    if (memoryAGet16(ds, si + 26) != 0x0000)
        goto loc_19ca5;
    ax = 0x0008;
    push(ax);
    push(si);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52398);
    memoryASet16(ds, bx + 52398, memoryAGet16(ds, bx + 52398) + 0x0008);
    push(ax);
    push(cs); cs = 0x01ed; sub_3bac(); assert(cs == 0x1841);
    sp += 0x0006;
loc_19ca5: // 1841:1895
    ax = 0x0008;
    push(ax);
    push(si);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52398);
    memoryASet16(ds, bx + 52398, memoryAGet16(ds, bx + 52398) + 0x0008);
    push(ax);
    push(cs); cs = 0x01ed; sub_3bac(); assert(cs == 0x1841);
    sp += 0x0006;
loc_19cc2: // 1841:18b2
    ax = memoryAGet16(ds, si + 30);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_19cd7;
    ax = memoryAGet16(ds, si + 28);
    bx = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, bx + 28, ax);
loc_19cd7: // 1841:18c7
    bx = memoryAGet16(ds, si + 28);
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, bx, ax);
    ax = memoryAGet16(ds, 0xd618);
    memoryASet16(ds, si + 30, ax);
    memoryASet16(ds, 0xd618, si);
    memoryASet16(ds, di, 0x0000);
loc_19ced: // 1841:18dd
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19cf3() // 1841:18e3 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0016;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0xdda2) == 0x0000)
        goto loc_19d07;
    ax = 0xce92;
    goto loc_19d0a;
loc_19d07: // 1841:18f7
    ax = 0xccb2;
loc_19d0a: // 1841:18fa
    si = ax;
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 52398);
    memoryASet16(ss, bp - 2, ax);
    goto loc_19e57;
loc_19d1c: // 1841:190c
    ax = memoryAGet16(ds, si);
    ax -= memoryAGet16(ds, 0xe6e6);
    memoryASet16(ds, si, ax);
    ax = memoryAGet16(ds, si + 2);
    ax -= memoryAGet16(ds, 0xe6e4);
    memoryASet16(ds, si + 2, ax);
    if ((short)memoryAGet16(ds, si) >= (short)0x0000)
        goto loc_19d45;
    ax = memoryAGet16(ds, si);
    memoryASet16(ds, si + 4, memoryAGet16(ds, si + 4) + ax);
    if ((short)memoryAGet16(ds, si + 4) >= (short)0x0001)
        goto loc_19d41;
    goto loc_19e54;
loc_19d41: // 1841:1931
    memoryASet16(ds, si, 0x0000);
loc_19d45: // 1841:1935
    if ((short)memoryAGet16(ds, si + 2) >= (short)0x0000)
        goto loc_19d5f;
    ax = memoryAGet16(ds, si + 2);
    memoryASet16(ds, si + 6, memoryAGet16(ds, si + 6) + ax);
    if ((short)memoryAGet16(ds, si + 6) >= (short)0x0001)
        goto loc_19d5a;
    goto loc_19e54;
loc_19d5a: // 1841:194a
    memoryASet16(ds, si + 2, 0x0000);
loc_19d5f: // 1841:194f
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ds, si + 4);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, si + 2);
    ax += memoryAGet16(ds, si + 6);
    memoryASet16(ss, bp - 6, ax);
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x002a)
        goto loc_19d86;
    ax = 0x002a;
    ax -= memoryAGet16(ds, si);
    memoryASet16(ds, si + 4, ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ds, si + 4);
    memoryASet16(ss, bp - 4, ax);
loc_19d86: // 1841:1976
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x00e0)
        goto loc_19d9f;
    ax = 0x00e0;
    ax -= memoryAGet16(ds, si + 2);
    memoryASet16(ds, si + 6, ax);
    ax = memoryAGet16(ds, si + 2);
    ax += memoryAGet16(ds, si + 6);
    memoryASet16(ss, bp - 6, ax);
loc_19d9f: // 1841:198f
    if ((short)memoryAGet16(ds, si + 4) >= (short)0x0001)
        goto loc_19da8;
    goto loc_19e54;
loc_19da8: // 1841:1998
    if ((short)memoryAGet16(ds, si + 6) >= (short)0x0001)
        goto loc_19db1;
    goto loc_19e54;
loc_19db1: // 1841:19a1
    bx = memoryAGet16(ds, si + 2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    ax += memoryAGet16(ds, si);
    memoryASet16(ss, bp - 8, ax);
    push(memoryAGet16(ds, si + 6));
    push(memoryAGet16(ds, si + 4));
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ss, bp - 8);
    push(ax);
    ax = memoryAGet16(ds, 0xa546);
    ax += memoryAGet16(ss, bp - 8);
    push(ax);
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x1841);
    sp += 0x0008;
    ax = memoryAGet16(ds, si);
    cl = memoryAGet(ds, 0xe1ea);
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ds, si + 4);
    ax--;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ds, si + 2);
    cl = 0x04;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ds, si + 2);
    ax += memoryAGet16(ds, si + 6);
    ax--;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 16, ax);
    bx = memoryAGet16(ss, bp - 12);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xe6d8);
    ax += memoryAGet16(ds, bx + 57836);
    ax += memoryAGet16(ss, bp - 10);
    di = ax;
    ax = memoryAGet16(ss, bp - 14);
    ax -= memoryAGet16(ss, bp - 10);
    ax++;
    dx = 0x0016;
    dx -= ax;
    memoryASet16(ss, bp - 22, dx);
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 20, ax);
    goto loc_19e4c;
loc_19e2f: // 1841:1a1f
    ax = memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 18, ax);
    goto loc_19e3e;
loc_19e37: // 1841:1a27
    memoryASet(ds, di, 0x02);
    di++;
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
loc_19e3e: // 1841:1a2e
    ax = memoryAGet16(ss, bp - 18);
    if (ax <= memoryAGet16(ss, bp - 14))
        goto loc_19e37;
    di += memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 20, memoryAGet16(ss, bp - 20) + 1);
loc_19e4c: // 1841:1a3c
    ax = memoryAGet16(ss, bp - 20);
    if (ax <= memoryAGet16(ss, bp - 16))
        goto loc_19e2f;
loc_19e54: // 1841:1a44
    si += 0x0008;
loc_19e57: // 1841:1a47
    if (si == memoryAGet16(ss, bp - 2))
        goto loc_19e5f;
    goto loc_19d1c;
loc_19e5f: // 1841:1a4f
    if (memoryAGet16(ds, 0xdda2) == 0x0000)
        goto loc_19e6b;
    ax = 0xce92;
    goto loc_19e6e;
loc_19e6b: // 1841:1a5b
    ax = 0xccb2;
loc_19e6e: // 1841:1a5e
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    memoryASet16(ds, bx + 52398, ax);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19e7e() // 1841:1a6e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001c;
    push(si);
    push(di);
    memoryASet16(ss, bp - 18, 0x0000);
    goto loc_1a06f;
loc_19e8e: // 1841:1a7e
    if (memoryAGet16(ss, bp - 18) != 0x0003)
        goto loc_19e99;
    push(cs); cs = 0x1a13; sub_1a474(); assert(cs == 0x1841);
loc_19e99: // 1841:1a89
    bx = memoryAGet16(ss, bp - 18);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 54810);
    memoryASet16(ss, bp - 2, ax);
    goto loc_1a063;
loc_19ea8: // 1841:1a98
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx);
    ax -= memoryAGet16(ds, 0xe6e6);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, bx + 2);
    ax -= memoryAGet16(ds, 0xe6e4);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 4);
    cl = memoryAGet(ds, 0xe1ea);
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 10, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ds, bx + 4);
    ax--;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 6);
    cl = 0x04;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ds, bx + 6);
    ax--;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 16, ax);
    if ((short)memoryAGet16(ss, bp - 10) >= (short)0x0000)
        goto loc_19ef7;
    memoryASet16(ss, bp - 10, 0x0000);
loc_19ef7: // 1841:1ae7
    if ((short)memoryAGet16(ss, bp - 12) < (short)0x0015)
        goto loc_19f02;
    memoryASet16(ss, bp - 12, 0x0014);
loc_19f02: // 1841:1af2
    if ((short)memoryAGet16(ss, bp - 14) >= (short)0x0000)
        goto loc_19f0d;
    memoryASet16(ss, bp - 14, 0x0000);
loc_19f0d: // 1841:1afd
    if ((short)memoryAGet16(ss, bp - 16) < (short)0x000e)
        goto loc_19f18;
    memoryASet16(ss, bp - 16, 0x000d);
loc_19f18: // 1841:1b08
    ax = memoryAGet16(ss, bp - 10);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 12))
        goto loc_19f23;
    goto loc_1a05a;
loc_19f23: // 1841:1b13
    ax = memoryAGet16(ss, bp - 14);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 16))
        goto loc_19f2e;
    goto loc_1a05a;
loc_19f2e: // 1841:1b1e
    bx = memoryAGet16(ss, bp - 14);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xe6d8);
    ax += memoryAGet16(ds, bx + 57836);
    ax += memoryAGet16(ss, bp - 10);
    memoryASet16(ss, bp - 22, ax);
    si = ax;
    ax = memoryAGet16(ss, bp - 12);
    ax -= memoryAGet16(ss, bp - 10);
    ax++;
    dx = 0x0016;
    dx -= ax;
    memoryASet16(ss, bp - 24, dx);
    bx = memoryAGet16(ss, bp - 2);
    if (memoryAGet16(ds, bx + 26) == 0x0000)
        goto loc_19f5f;
    memoryASet16(ds, bx + 26, memoryAGet16(ds, bx + 26) - 1);
    goto loc_19f8b;
loc_19f5f: // 1841:1b4f
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 8, ax);
    goto loc_19f80;
loc_19f67: // 1841:1b57
    di = memoryAGet16(ss, bp - 10);
    goto loc_19f75;
loc_19f6c: // 1841:1b5c
    bx = si;
    si++;
    if (memoryAGet(ds, bx) != 0x00)
        goto loc_19f8b;
    di++;
loc_19f75: // 1841:1b65
    if ((short)di <= (short)memoryAGet16(ss, bp - 12))
        goto loc_19f6c;
    si += memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
loc_19f80: // 1841:1b70
    ax = memoryAGet16(ss, bp - 8);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 16))
        goto loc_19f67;
    goto loc_1a05a;
loc_19f8b: // 1841:1b7b
    si = memoryAGet16(ss, bp - 22);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 8, ax);
    goto loc_19fab;
loc_19f96: // 1841:1b86
    di = memoryAGet16(ss, bp - 10);
    goto loc_19fa0;
loc_19f9b: // 1841:1b8b
    memoryASet(ds, si, 0x03);
    si++;
    di++;
loc_19fa0: // 1841:1b90
    if ((short)di <= (short)memoryAGet16(ss, bp - 12))
        goto loc_19f9b;
    si += memoryAGet16(ss, bp - 24);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
loc_19fab: // 1841:1b9b
    ax = memoryAGet16(ss, bp - 8);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 16))
        goto loc_19f96;
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx + 6);
    memoryASet16(ss, bp - 26, ax);
    ax = memoryAGet16(ds, bx + 10);
    memoryASet16(ss, bp - 28, ax);
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0000)
        goto loc_19fde;
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 26, memoryAGet16(ss, bp - 26) + ax);
    ax = memoryAGet16(ds, bx + 4);
    imul16(memoryAGet16(ss, bp - 6));
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) - ax);
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_19ff2;
loc_19fde: // 1841:1bce
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 26);
    if (ax <= 0x00e0)
        goto loc_19ff2;
    ax = 0x00e0;
    ax -= memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 26, ax);
loc_19ff2: // 1841:1be2
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    ax += memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 20, ax);
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx + 14);
    if (!ax)
        goto loc_1a015;
    if (ax == 0x0001)
        goto loc_1a03a;
    goto loc_1a05a;
loc_1a015: // 1841:1c05
    bx = memoryAGet16(ss, bp - 2);
    push(memoryAGet16(ds, bx + 12));
    push(memoryAGet16(ss, bp - 26));
    push(memoryAGet16(ds, bx + 4));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 28));
    bx = memoryAGet16(ds, bx + 8);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs); cs = 0x1ff7; sub_20085(); assert(cs == 0x1841);
    sp += 0x000c;
    goto loc_1a05a;
loc_1a03a: // 1841:1c2a
    push(memoryAGet16(ss, bp - 26));
    bx = memoryAGet16(ss, bp - 2);
    push(memoryAGet16(ds, bx + 4));
    push(memoryAGet16(ss, bp - 20));
    push(memoryAGet16(ss, bp - 28));
    bx = memoryAGet16(ds, bx + 8);
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(cs); cs = 0x1ff7; sub_203b9(); assert(cs == 0x1841);
    sp += 0x000a;
loc_1a05a: // 1841:1c4a
    bx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ds, bx + 30);
    memoryASet16(ss, bp - 2, ax);
loc_1a063: // 1841:1c53
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1a06c;
    goto loc_19ea8;
loc_1a06c: // 1841:1c5c
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
loc_1a06f: // 1841:1c5f
    if ((short)memoryAGet16(ss, bp - 18) >= (short)0x0004)
        goto loc_1a078;
    goto loc_19e8e;
loc_1a078: // 1841:1c68
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a07e() // 1841:1c6e +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(di);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 57014);
    memoryASet16(ds, 0xe6d8, ax);
    push(cs);
    sub_18d56();
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0105;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    push(cs); cs = 0x1a13; sub_1a31a(); assert(cs == 0x1841);
    push(cs);
    sub_19cf3();
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    push(cs);
    sub_19e7e();
    ax = memoryAGet16(ds, 0xdda8);
    ax |= memoryAGet16(ds, 0xddaa);
    if (!ax)
        goto loc_1a0cb;
    push(cs); cs = memoryAGet16(ds, 0xdda8 + 2); callIndirect(cs, memoryAGet16(ds, 0xdda8)); assert(cs == 0x1841); // 1841:1cb7;
loc_1a0cb: // 1841:1cbb
    ax = memoryAGet16(ds, 0xe6ec);
    ax &= memoryAGet16(ds, 0xdda6);
    push(ax);
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, 0xa7b0);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x1841);
    sp += 0x0004;
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 57010);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    memoryASet16(ds, bx + 57014, ax);
    ax = ds;
    es = ax;
    ax = 0;
    cx = 0x009a;
    di = memoryAGet16(ss, bp - 2);
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    memoryASet16(es, di, 0x0301);
    memoryASet16(ds, 0xdda4, memoryAGet16(ds, 0xdda4) ^ 0x0001);
    memoryASet16(ds, 0xdda2, memoryAGet16(ds, 0xdda2) ^ 0x0001);
    bx = memoryAGet16(ds, 0xdda2);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b4, ax);
    bx = memoryAGet16(ds, 0xdda4);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 16496);
    memoryASet16(ds, 0xa7b2, ax);
    push(cs);
    sub_19630();
    di = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a13c() // 1a13:000c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ds, 0xdeb6);
    memoryASet(ds, bx + di, 0x01);
    bx = memoryAGet16(ds, 0xdeb8);
    memoryASet(ds, bx + di, 0x01);
    di <<= 1;
    si = memoryAGet16(ds, di + 57864);
    si += memoryAGet16(ds, 0xe1e8);
    di = memoryAGet16(ds, di + 58480);
    di += memoryAGet16(ds, 0xa546);
    memoryASet16(cs, 0x000a, di);
    es = memoryAGet16(ds, 0xa7e9);
    bx = memoryAGet16(es, si);
    es = memoryAGet16(ds, 0xa7e7);
    si = memoryAGet16(es, si);
    es = memoryAGet16(ds, 0xa7ae);
    dx = 0x03c4;
    if (!bx)
        goto loc_1a185;
    goto loc_1a1dd;
  // gap 1 bytes
loc_1a185: // 1a13:0055
    bx = 0x003e;
    si <<= 1;
    ax = memoryAGet16(cs, 0x000a);
    ds = memoryAGet16(ds, si + 32515);
    si = 0;
    ax = 0x0102;
    cx = 0x0004;
loc_1a19a: // 1a13:006a
    dx = 0x03c4;
    out16(dx, ax);
    di = memoryAGet16(cs, 0x000a);
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    di += bx;
    movsw<ES_DI, DS_SI>();
    ah <<= 1;
    if (--cx)
        goto loc_1a19a;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1a1dd: // 1a13:00ad
    flags.interrupts = 0;
    bx <<= 1;
    ss = memoryAGet16(ds, bx + 35107);
    si <<= 1;
    ds = memoryAGet16(ds, si + 32515);
    si = 0;
    ax = 0x0102;
    di = memoryAGet16(cs, 0x000a);
loc_1a1f4: // 1a13:00c4
    out16(dx, ax);
    bx = memoryAGet16(ds, si);
    bx &= memoryAGet16(ss, 0x0000);
    bx |= memoryAGet16(ss, si + 32);
    memoryASet16(es, di, bx);
    bx = memoryAGet16(ds, si + 2);
    bx &= memoryAGet16(ss, 0x0002);
    bx |= memoryAGet16(ss, si + 34);
    memoryASet16(es, di + 64, bx);
    bx = memoryAGet16(ds, si + 4);
    bx &= memoryAGet16(ss, 0x0004);
    bx |= memoryAGet16(ss, si + 36);
    memoryASet16(es, di + 128, bx);
    bx = memoryAGet16(ds, si + 6);
    bx &= memoryAGet16(ss, 0x0006);
    bx |= memoryAGet16(ss, si + 38);
    memoryASet16(es, di + 192, bx);
    bx = memoryAGet16(ds, si + 8);
    bx &= memoryAGet16(ss, 0x0008);
    bx |= memoryAGet16(ss, si + 40);
    memoryASet16(es, di + 256, bx);
    bx = memoryAGet16(ds, si + 10);
    bx &= memoryAGet16(ss, 0x000a);
    bx |= memoryAGet16(ss, si + 42);
    memoryASet16(es, di + 320, bx);
    bx = memoryAGet16(ds, si + 12);
    bx &= memoryAGet16(ss, 0x000c);
    bx |= memoryAGet16(ss, si + 44);
    memoryASet16(es, di + 384, bx);
    bx = memoryAGet16(ds, si + 14);
    bx &= memoryAGet16(ss, 0x000e);
    bx |= memoryAGet16(ss, si + 46);
    memoryASet16(es, di + 448, bx);
    bx = memoryAGet16(ds, si + 16);
    bx &= memoryAGet16(ss, 0x0010);
    bx |= memoryAGet16(ss, si + 48);
    memoryASet16(es, di + 512, bx);
    bx = memoryAGet16(ds, si + 18);
    bx &= memoryAGet16(ss, 0x0012);
    bx |= memoryAGet16(ss, si + 50);
    memoryASet16(es, di + 576, bx);
    bx = memoryAGet16(ds, si + 20);
    bx &= memoryAGet16(ss, 0x0014);
    bx |= memoryAGet16(ss, si + 52);
    memoryASet16(es, di + 640, bx);
    bx = memoryAGet16(ds, si + 22);
    bx &= memoryAGet16(ss, 0x0016);
    bx |= memoryAGet16(ss, si + 54);
    memoryASet16(es, di + 704, bx);
    bx = memoryAGet16(ds, si + 24);
    bx &= memoryAGet16(ss, 0x0018);
    bx |= memoryAGet16(ss, si + 56);
    memoryASet16(es, di + 768, bx);
    bx = memoryAGet16(ds, si + 26);
    bx &= memoryAGet16(ss, 0x001a);
    bx |= memoryAGet16(ss, si + 58);
    memoryASet16(es, di + 832, bx);
    bx = memoryAGet16(ds, si + 28);
    bx &= memoryAGet16(ss, 0x001c);
    bx |= memoryAGet16(ss, si + 60);
    memoryASet16(es, di + 896, bx);
    bx = memoryAGet16(ds, si + 30);
    bx &= memoryAGet16(ss, 0x001e);
    bx |= memoryAGet16(ss, si + 62);
    memoryASet16(es, di + 960, bx);
    si += 0x0020;
    ah <<= 1;
    if (ah == 0x10)
        goto loc_1a30e;
    goto loc_1a1f4;
loc_1a30e: // 1a13:01de
    ax = 0x30d4;
    ss = ax;
    flags.interrupts = 1;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a31a() // 1a13:01ea +far +stackDrop2
{
    push(si);
    push(di);
    push(bp);
    goto loc_1a323;
loc_1a31f: // 1a13:01ef
    bp = pop();
    di = pop();
    si = pop();
    cs = pop();
    return;
loc_1a323: // 1a13:01f3
    di = memoryAGet16(ds, 0xe6d8);
    bp = 0x0135;
    bp += di;
    push(di);
    cx = 0xffff;
loc_1a330: // 1a13:0200
    di = pop();
    ax = ss;
    es = ax;
    ds = ax;
    al = 0x01;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (di == bp)
        goto loc_1a31f;
    if (memoryAGet(ds, di) != al)
        goto loc_1a346;
    goto loc_1a3c6;
loc_1a346: // 1a13:0216
    di++;
    push(di);
    di -= memoryAGet16(ds, 0xe6d8);
    di <<= 1;
    di = memoryAGet16(ds, di + 58476);
    si = di;
    di += memoryAGet16(ds, 0xa7b4);
    si += memoryAGet16(ds, 0xa546);
    dx = 0x003e;
    ax = memoryAGet16(ds, 0xa7ae);
    ds = ax;
    es = ax;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    goto loc_1a330;
  // gap 1 bytes
loc_1a3c6: // 1a13:0296
    dx = di;
    di++;
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) scasb_inv<ES_DI>(al);
    push(di);
    bx = di;
    bx -= dx;
    bx <<= 1;
    di = dx;
    di -= memoryAGet16(ds, 0xe6d8);
    di <<= 1;
    di = memoryAGet16(ds, di + 58478);
    si = di;
    di += memoryAGet16(ds, 0xa7b4);
    si += memoryAGet16(ds, 0xa546);
    dx = 0x0040;
    dx -= bx;
    ax = memoryAGet16(ds, 0xa7ae);
    ds = ax;
    es = ax;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    cx--;
    goto loc_1a330;
}
void sub_1a474() // 1a13:0344 +far +stackDrop2
{
    push(si);
    push(di);
    push(bp);
    goto loc_1a47d;
loc_1a479: // 1a13:0349
    bp = pop();
    di = pop();
    si = pop();
    cs = pop();
    return;
loc_1a47d: // 1a13:034d
    di = memoryAGet16(ds, 0xe6d8);
    bp = 0x0136;
    bp += di;
    push(di);
    cx = 0xffff;
loc_1a48a: // 1a13:035a
    ax = ss;
    es = ax;
    al = 0x03;
    di = pop();
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (di == bp)
        goto loc_1a479;
    push(di);
    di -= memoryAGet16(ds, 0xe6d8);
    di <<= 1;
    si = memoryAGet16(ds, di + 57862);
    si += memoryAGet16(ds, 0xe1e8);
    es = memoryAGet16(ds, 0xa7e9);
    si = memoryAGet16(es, si);
    if (!si)
        goto loc_1a48a;
    bx = si;
    bx += 0x44a6;
    es = memoryAGet16(ds, 0xc8a1);
    if (!(memoryAGet(es, bx) & 0x80))
        goto loc_1a48a;
    memoryASet(ds, 0x431a, 0x01);
    memoryASet(ds, 0x431b, 0x00);
    di = memoryAGet16(ds, di + 58478);
    di += memoryAGet16(ds, 0xa7b4);
    memoryASet16(cs, 0x000a, di);
    es = memoryAGet16(ds, 0xa7ae);
    si <<= 1;
    ds = memoryAGet16(ds, si + 35107);
    bx = 0x0020;
loc_1a4e5: // 1a13:03b5
    dx = 0x03c4;
    al = 0x02;
    ah = memoryAGet(ss, 0x431a);
    out16(dx, ax);
    dx = 0x03ce;
    al = 0x04;
    ah = memoryAGet(ss, 0x431b);
    out16(dx, ax);
    si = 0;
    di = memoryAGet16(cs, 0x000a);
    cx = memoryAGet16(es, di);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di, cx);
    cx = memoryAGet16(es, di + 64);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 64, cx);
    cx = memoryAGet16(es, di + 128);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 128, cx);
    cx = memoryAGet16(es, di + 192);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 192, cx);
    cx = memoryAGet16(es, di + 256);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 256, cx);
    cx = memoryAGet16(es, di + 320);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 320, cx);
    cx = memoryAGet16(es, di + 384);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 384, cx);
    cx = memoryAGet16(es, di + 448);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 448, cx);
    cx = memoryAGet16(es, di + 512);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 512, cx);
    cx = memoryAGet16(es, di + 576);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 576, cx);
    cx = memoryAGet16(es, di + 640);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 640, cx);
    cx = memoryAGet16(es, di + 704);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 704, cx);
    cx = memoryAGet16(es, di + 768);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 768, cx);
    cx = memoryAGet16(es, di + 832);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 832, cx);
    cx = memoryAGet16(es, di + 896);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 896, cx);
    cx = memoryAGet16(es, di + 960);
    cx &= memoryAGet16(ds, si);
    cx |= memoryAGet16(ds, bx + si);
    si++;
    si++;
    memoryASet16(es, di + 960, cx);
    bx += 0x0020;
    memoryASet(ss, 0x431b, memoryAGet(ss, 0x431b) + 1);
    memoryASet(ss, 0x431a, memoryAGet(ss, 0x431a) << 1);
    if (memoryAGet(ss, 0x431a) == 0x10)
        goto loc_1a614;
    goto loc_1a4e5;
loc_1a614: // 1a13:04e4
    ax = ss;
    ds = ax;
    cx = 0xffff;
    goto loc_1a48a;
}
void sub_1a61e() // 1a61:000e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    dx = 0x0043;
    al = 0x36;
    out8(dx, al);
    dx = 0x0040;
    al = bl;
    out8(dx, al);
    ax = bx;
    cl = 0x08;
    ax >>= cl;
    out8(dx, al);
    memoryASet16(ds, 0x789a, 0x0000);
    memoryASet16(ds, 0x7898, bx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a643() // 1a61:0033 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0012;
    dx = 0x305e;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x1a61);
    push(ax);
    push(cs);
    sub_1a61e();
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a68b() // 1a61:007b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    memoryASet(ds, 0x7882, 0xff);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ds, 0x787c, ax);
    memoryASet16(ds, 0x787a, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    dx += 0x0006;
    memoryASet16(ds, 0x7880, ax);
    memoryASet16(ds, 0x787e, dx);
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1a6b9() // 1a61:00a9 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    memoryASet16(ds, 0x7880, 0x0000);
    memoryASet16(ds, 0x787e, 0x0000);
    al = in8(0x61);
    al &= 0xfd;
    out8(0x61, al);
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1a6d3() // 1a61:00c3
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ds, 0x787e);
    ax |= memoryAGet16(ds, 0x7880);
    if (!ax)
        goto loc_1a750;
    bx = memoryAGet16(ds, 0x787e); es = memoryAGet16(ds, 0x787e + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    memoryASet16(ds, 0x787e, memoryAGet16(ds, 0x787e) + 1);
    if (al == memoryAGet(ds, 0x7882))
        goto loc_1a72f;
    push(flagAsReg());
    flags.interrupts = 0;
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, 0x7882, al);
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_1a728;
    ah = 0x00;
    ax <<= 1;
    bx = ax;
    ax = memoryAGet16(ds, bx + 30332);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp - 4);
    al = 0xb6;
    out8(0x43, al);
    al = bl;
    out8(0x42, al);
    al = bh;
    out8(0x42, al);
    al = in8(0x61);
    al |= 0x03;
    out8(0x61, al);
    goto loc_1a72e;
loc_1a728: // 1a61:0118
    al = in8(0x61);
    al &= 0xfc;
    out8(0x61, al);
loc_1a72e: // 1a61:011e
    flagsFromReg(pop());
loc_1a72f: // 1a61:011f
    flags.carry = memoryAGet16(ds, 0x787a) < 0x0001;
    memoryASet16(ds, 0x787a, memoryAGet16(ds, 0x787a) - 0x0001);
    ax = memoryAGet16(ds, 0x787a);
    memoryASet16(ds, 0x787c, memoryAGet16(ds, 0x787c) - 0x0000 - flags.carry);
    dx = memoryAGet16(ds, 0x787c);
    ax |= dx;
    if (ax)
        goto loc_1a750;
    push(cs);
    sub_1a6b9();
    ax = 0;
    memoryASet16(ds, 0x788c, ax);
    memoryASet16(ds, 0x788e, ax);
loc_1a750: // 1a61:0140
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a754() // 1a61:0144 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    memoryASet16(ds, 0x7880, 0x0000);
    memoryASet16(ds, 0x787e, 0x0000);
    al = in8(0x61);
    al &= 0xfc;
    out8(0x61, al);
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1a76e() // 1a61:015e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    dx = 0x0388;
    al = memoryAGet(ss, bp + 6);
    out8(dx, al);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    dx = 0x0389;
    al = memoryAGet(ss, bp + 8);
    out8(dx, al);
    flagsFromReg(pop());
    dx = 0x0388;
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    al = in8(dx);
    bp = pop();
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1a7b0() // 1a61:01a0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    memoryASet16(ds, 0x7678, 0x0000);
    memoryASet16(ds, 0x7676, 0x0000);
    al = 0x00;
    push(ax);
    al = 0xb0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1a7d1() // 1a61:01c1 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    al = memoryAGet(ds, 0x432d);
    memoryASet(ss, bp - 2, al);
    al = memoryAGet(ds, 0x4324);
    memoryASet(ss, bp - 1, al);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0x20;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 2);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0x40;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 4);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0x60;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 6);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0x80;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 8);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0xe0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 1);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    al += 0x20;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 3);
    memoryASet(ss, bp - 3, al);
    if (memoryAGet16(ds, 0xc637) == 0x0000)
        goto loc_1a893;
    al = 0x3f;
    al -= memoryAGet(ss, bp - 3);
    memoryASet(ss, bp - 3, al);
    ah = 0x00;
    ax = sar16(ax, 0x0001);
    dl = memoryAGet(ss, bp - 3);
    dh = 0x00;
    dx = sar16(dx, 0x0001);
    dx = sar16(dx, 0x0001);
    al += dl;
    memoryASet(ss, bp - 3, al);
    al = 0x3f;
    al -= memoryAGet(ss, bp - 3);
    memoryASet(ss, bp - 3, al);
loc_1a893: // 1a61:0283
    al = memoryAGet(ss, bp - 3);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    al += 0x40;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 5);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    al += 0x60;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 7);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    al += 0x80;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 9);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    al += 0xe0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a8e7() // 1a61:02d7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_1a7b0();
    push(flagAsReg());
    flags.interrupts = 0;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    dx = memoryAGet16(es, bx);
    memoryASet16(ds, 0x7672, ax);
    memoryASet16(ds, 0x7670, dx);
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    dx += 0x0017;
    memoryASet16(ds, 0x7678, ax);
    memoryASet16(ds, 0x7676, dx);
    al = memoryAGet(es, bx + 22);
    ah = 0x00;
    ax &= 0x0007;
    ax <<= 1;
    ax <<= 1;
    ax |= 0x0020;
    memoryASet16(ds, 0x7674, ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    dx += 0x0006;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 6);
    al |= memoryAGet(es, bx + 7);
    ah = 0x00;
    if (ax)
        goto loc_1a954;
    flagsFromReg(pop());
    ax = 0x434d;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1a61);
    sp += 0x0002;
loc_1a954: // 1a61:0344
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_1a7d1();
    sp += 0x0004;
    flagsFromReg(pop());
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a966() // 1a61:0356
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x7676);
    ax |= memoryAGet16(ds, 0x7678);
    if (!ax)
        goto loc_1a9ea;
    bx = memoryAGet16(ds, 0x7676); es = memoryAGet16(ds, 0x7676 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    memoryASet(ss, bp - 1, al);
    memoryASet16(ds, 0x7676, memoryAGet16(ds, 0x7676) + 1);
    ah = 0x00;
    if (ax)
        goto loc_1a998;
    al = 0x00;
    push(ax);
    al = 0xb0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    goto loc_1a9b4;
loc_1a998: // 1a61:0388
    al = memoryAGet(ss, bp - 1);
    push(ax);
    al = 0xa0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = memoryAGet(ds, 0x7674);
    push(ax);
    al = 0xb0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
loc_1a9b4: // 1a61:03a4
    flags.carry = memoryAGet16(ds, 0x7670) < 0x0001;
    memoryASet16(ds, 0x7670, memoryAGet16(ds, 0x7670) - 0x0001);
    ax = memoryAGet16(ds, 0x7670);
    memoryASet16(ds, 0x7672, memoryAGet16(ds, 0x7672) - 0x0000 - flags.carry);
    dx = memoryAGet16(ds, 0x7672);
    ax |= dx;
    if (ax)
        goto loc_1a9ea;
    memoryASet16(ds, 0x7678, 0x0000);
    memoryASet16(ds, 0x7676, 0x0000);
    al = 0x00;
    push(ax);
    al = 0xb0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    ax = 0;
    memoryASet16(ds, 0x788c, ax);
    memoryASet16(ds, 0x788e, ax);
loc_1a9ea: // 1a61:03da
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a9ee() // 1a61:03de
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    if (memoryAGet16(ds, 0x765a) != 0x0000)
        goto loc_1aa4a;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_1aa01: // 1a61:03f1
    bx = memoryAGet16(ds, 0x74f8); es = memoryAGet16(ds, 0x74f8 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ds, 0x74f8, memoryAGet16(ds, 0x74f8) + 0x0002);
    bx = memoryAGet16(ds, 0x74f8); es = memoryAGet16(ds, 0x74f8 + 2); /*ggg2*/;
    ax = memoryAGet16(ds, 0x766e);
    dx = memoryAGet16(ds, 0x766c);
    flags.carry = (dx + memoryAGet16(es, bx)) >= 0x10000;
    dx += memoryAGet16(es, bx);
    ax += 0x0000 + flags.carry;
    memoryASet16(ds, 0x74f2, ax);
    memoryASet16(ds, 0x74f0, dx);
    memoryASet16(ds, 0x74f8, memoryAGet16(ds, 0x74f8) + 0x0002);
    dx = memoryAGet16(ss, bp - 4);
    memoryASet(ss, bp - 1, dl);
    memoryASet(ss, bp - 2, dh);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 1);
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ds, 0x74f6, memoryAGet16(ds, 0x74f6) - 0x0004);
loc_1aa4a: // 1a61:043a
    if (memoryAGet16(ds, 0x74f6) == 0x0000)
        goto loc_1aa66;
    ax = memoryAGet16(ds, 0x74f2);
    dx = memoryAGet16(ds, 0x74f0);
    if (ax < memoryAGet16(ds, 0x766e))
        goto loc_1aa01;
    if (ax > memoryAGet16(ds, 0x766e))
        goto loc_1aa66;
    if (dx <= memoryAGet16(ds, 0x766c))
        goto loc_1aa01;
loc_1aa66: // 1a61:0456
    flags.carry = (memoryAGet16(ds, 0x766c) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0x766c, memoryAGet16(ds, 0x766c) + 0x0001);
    memoryASet16(ds, 0x766e, memoryAGet16(ds, 0x766e) + (0x0000 + flags.carry));
    if (memoryAGet16(ds, 0x74f6) != 0x0000)
        goto loc_1aa9d;
    ax = memoryAGet16(ds, 0x74fe);
    dx = memoryAGet16(ds, 0x74fc);
    memoryASet16(ds, 0x74fa, ax);
    memoryASet16(ds, 0x74f8, dx);
    ax = memoryAGet16(ds, 0x74f4);
    memoryASet16(ds, 0x74f6, ax);
    ax = 0;
    dx = 0;
    memoryASet16(ds, 0x74f2, ax);
    memoryASet16(ds, 0x74f0, dx);
    memoryASet16(ds, 0x766e, ax);
    memoryASet16(ds, 0x766c, dx);
loc_1aa9d: // 1a61:048d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1aaa1() // 1a61:0491 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(flagAsReg());
    flags.interrupts = 0;
    al = 0x00;
    push(ax);
    al = 0xbd;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = 0x00;
    push(ax);
    al = 0xb0;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    push(ds);
    ax = 0x765c;
    push(ax);
    push(cs);
    sub_1a7d1();
    sp += 0x0004;
    memoryASet16(ds, 0x7678, 0x0000);
    memoryASet16(ds, 0x7676, 0x0000);
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1aadb() // 1a61:04cb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(flagAsReg());
    flags.interrupts = 0;
    al = 0x00;
    push(ax);
    al = 0xbd;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1ab08;
loc_1aaf7: // 1a61:04e7
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1ab08: // 1a61:04f8
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x00f5)
        goto loc_1aaf7;
    flagsFromReg(pop());
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ab14() // 1a61:0504 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x7658, 0x0000);
    al = memoryAGet(ds, 0x7658);
    push(ax);
    al = 0xbd;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    push(ds);
    ax = 0x765c;
    push(ax);
    push(cs);
    sub_1a7d1();
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ab39() // 1a61:0529 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    al = 0x60;
    push(ax);
    al = 0x04;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = 0x80;
    push(ax);
    al = 0x04;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    dx = 0x0388;
    al = in8(dx);
    memoryASet(ss, bp - 1, al);
    al = 0xff;
    push(ax);
    al = 0x02;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = 0x21;
    push(ax);
    al = 0x04;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    dx = 0x0388;
    cx = 0x0064;
loc_1ab80: // 1a61:0570
    al = in8(dx);
    goto loc_1ab83;
loc_1ab83: // 1a61:0573
    if (--cx)
        goto loc_1ab80;
    dx = 0x0388;
    al = in8(dx);
    memoryASet(ss, bp - 2, al);
    al = 0x60;
    push(ax);
    al = 0x04;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = 0x80;
    push(ax);
    al = 0x04;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    if (memoryAGet16(ss, bp + 6) != 0x0000)
        goto loc_1abbf;
    if (memoryAGet(ss, bp - 1) & 0xe0)
        goto loc_1abff;
    al = memoryAGet(ss, bp - 2);
    ah = 0x00;
    ax &= 0x00e0;
    if (ax != 0x00c0)
        goto loc_1abff;
loc_1abbf: // 1a61:05af
    memoryASet16(ss, bp - 4, 0x0001);
    goto loc_1abd7;
loc_1abc6: // 1a61:05b6
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 4);
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1abd7: // 1a61:05c7
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x00f5)
        goto loc_1abc6;
    al = 0x20;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    al = 0x00;
    push(ax);
    al = 0x08;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    ax = 0x0001;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1abff: // 1a61:05ef
    ax = 0;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ac05() // 1a61:05f5
{
    sp -= 2;
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ds);
    push(si);
    push(di);
    push(bp);
    bp = 0x30d4;
    ds = bp;
    bp = sp;
    memoryASet16(ds, 0xe6f4, memoryAGet16(ds, 0xe6f4) + 1);
    if (memoryAGet16(ds, 0xc633) != 0x0001)
        goto loc_1ac76;
    push(cs);
    sub_1a9ee();
    memoryASet16(ds, 0x4340, memoryAGet16(ds, 0x4340) + 1);
    ax = memoryAGet16(ds, 0x4340);
    if (ax & 0x0007)
        goto loc_1ac51;
    flags.carry = (memoryAGet16(ds, 0x7884) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0x7884, memoryAGet16(ds, 0x7884) + 0x0001);
    memoryASet16(ds, 0x7886, memoryAGet16(ds, 0x7886) + (0x0000 + flags.carry));
    flags.carry = (memoryAGet16(ds, 0xa53d) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0xa53d, memoryAGet16(ds, 0xa53d) + 0x0001);
    memoryASet16(ds, 0xa53f, memoryAGet16(ds, 0xa53f) + (0x0000 + flags.carry));
    ax = memoryAGet16(ds, 0x7890);
    ax |= memoryAGet16(ds, 0x7892);
    if (!ax)
        goto loc_1ac51;
    push(cs); cs = memoryAGet16(ds, 0x7890 + 2); callIndirect(cs, memoryAGet16(ds, 0x7890)); assert(cs == 0x1a61); // 1a61:063d;
loc_1ac51: // 1a61:0641
    if (memoryAGet16(ds, 0x4340) & 0x0003)
        goto loc_1acbc;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1ac68;
    if (ax == 0x0002)
        goto loc_1ac6e;
    goto loc_1acbc;
loc_1ac68: // 1a61:0658
    push(cs);
    sub_1a6d3();
    goto loc_1acbc;
loc_1ac6e: // 1a61:065e
    push(cs);
    sub_1a966();
    goto loc_1acbc;
  // gap 2 bytes
loc_1ac76: // 1a61:0666
    memoryASet16(ds, 0x4340, memoryAGet16(ds, 0x4340) + 1);
    ax = memoryAGet16(ds, 0x4340);
    if (ax & 0x0001)
        goto loc_1aca3;
    flags.carry = (memoryAGet16(ds, 0x7884) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0x7884, memoryAGet16(ds, 0x7884) + 0x0001);
    memoryASet16(ds, 0x7886, memoryAGet16(ds, 0x7886) + (0x0000 + flags.carry));
    flags.carry = (memoryAGet16(ds, 0xa53d) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0xa53d, memoryAGet16(ds, 0xa53d) + 0x0001);
    memoryASet16(ds, 0xa53f, memoryAGet16(ds, 0xa53f) + (0x0000 + flags.carry));
    ax = memoryAGet16(ds, 0x7890);
    ax |= memoryAGet16(ds, 0x7892);
    if (!ax)
        goto loc_1aca3;
    push(cs); cs = memoryAGet16(ds, 0x7890 + 2); callIndirect(cs, memoryAGet16(ds, 0x7890)); assert(cs == 0x1a61); // 1a61:068f;
loc_1aca3: // 1a61:0693
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1acb2;
    if (ax == 0x0002)
        goto loc_1acb8;
    goto loc_1acbc;
loc_1acb2: // 1a61:06a2
    push(cs);
    sub_1a6d3();
    goto loc_1acbc;
loc_1acb8: // 1a61:06a8
    push(cs);
    sub_1a966();
loc_1acbc: // 1a61:06ac
    ax = memoryAGet16(ds, 0x7894);
    flags.carry = (ax + memoryAGet16(ds, 0x7898)) >= 0x10000;
    ax += memoryAGet16(ds, 0x7898);
    memoryASet16(ds, 0x7894, ax);
    if (!flags.carry)
        goto loc_1acd7;
    push(flagAsReg());
    push(cs); cs = memoryAGet16(ds, 0x7888 + 2); callIndirect(cs, memoryAGet16(ds, 0x7888)); assert(cs == 0x1a61); // 1a61:06b9;
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop("iret");
loc_1acd7: // 1a61:06c7
    dx = 0x0020;
    al = 0x20;
    out8(dx, al);
    bp = pop();
    di = pop();
    si = pop();
    ds = pop();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
    stop("iret");
}
void sub_1ace7() // 1a61:06d7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1acf9;
    if (ax == 0x0002)
        goto loc_1acff;
    goto loc_1ad03;
loc_1acf9: // 1a61:06e9
    push(cs);
    sub_1a754();
    goto loc_1ad03;
loc_1acff: // 1a61:06ef
    push(cs);
    sub_1aaa1();
loc_1ad03: // 1a61:06f3
    memoryASet16(ds, 0xc635, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ad0b() // 1a61:06fb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xc635) == 0x0002)
        goto loc_1ad1c;
    if (memoryAGet16(ds, 0xc633) != 0x0001)
        goto loc_1ad20;
loc_1ad1c: // 1a61:070c
    push(cs);
    sub_1aadb();
loc_1ad20: // 1a61:0710
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ad22() // 1a61:0712 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0002)
        goto loc_1ad2f;
    goto loc_1ad33;
loc_1ad2f: // 1a61:071f
    push(cs);
    sub_1ab14();
loc_1ad33: // 1a61:0723
    ax = 0;
    memoryASet16(ds, 0x788c, ax);
    memoryASet16(ds, 0x788e, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ad3d() // 1a61:072d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    if (memoryAGet16(ds, 0xc633) != 0x0001)
        goto loc_1ad4d;
    si = 0x0230;
    goto loc_1ad50;
loc_1ad4d: // 1a61:073d
    si = 0x008c;
loc_1ad50: // 1a61:0740
    push(si);
    push(cs);
    sub_1a643();
    sp += 0x0002;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ad5b() // 1a61:074b +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    push(cs);
    sub_1b0e7();
    ax = di;
    if (!ax)
        goto loc_1ad7d;
    if (ax == 0x0001)
        goto loc_1ad88;
    if (ax == 0x0002)
        goto loc_1ad98;
    goto loc_1adb1;
loc_1ad7d: // 1a61:076d
    memoryASet16(ds, 0xe6f6, 0x0000);
    si = 0x0001;
    goto loc_1adb3;
loc_1ad88: // 1a61:0778
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ds, 0xe6f6, 0x0000);
    si = 0x0001;
    goto loc_1adb3;
loc_1ad98: // 1a61:0788
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_1adb3;
    memoryASet16(ss, bp - 2, 0x0034);
    memoryASet16(ds, 0xe6f6, 0x0000);
    si = 0x0001;
    goto loc_1adb3;
  // gap 2 bytes
loc_1adb1: // 1a61:07a1
    si = 0;
loc_1adb3: // 1a61:07a3
    if (!si)
        goto loc_1add4;
    if (di == memoryAGet16(ds, 0xc635))
        goto loc_1add4;
    push(cs);
    sub_1ace7();
    memoryASet16(ds, 0xc635, di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    ax += 0xc75d;
    memoryASet16(ds, 0xe6f2, ax);
    push(cs);
    sub_1ad22();
loc_1add4: // 1a61:07c4
    push(cs);
    sub_1ad3d();
    ax = si;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ade0() // 1a61:07d0 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    push(cs);
    sub_1b1c4();
loc_1aded: // 1a61:07dd
    push(cs);
    sub_1b1d7();
    if (ax)
        goto loc_1aded;
    ax = di;
    if (!ax)
        goto loc_1ae03;
    if (ax == 0x0001)
        goto loc_1ae0e;
    goto loc_1ae22;
loc_1ae03: // 1a61:07f3
    memoryASet16(ds, 0xe6fc, 0x0000);
    si = 0x0001;
    goto loc_1ae24;
loc_1ae0e: // 1a61:07fe
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_1ae24;
    memoryASet16(ds, 0xe6fc, 0x0001);
    si = 0x0001;
    goto loc_1ae24;
  // gap 2 bytes
loc_1ae22: // 1a61:0812
    si = 0;
loc_1ae24: // 1a61:0814
    if (!si)
        goto loc_1ae2c;
    memoryASet16(ds, 0xc633, di);
loc_1ae2c: // 1a61:081c
    push(cs);
    sub_1ad3d();
    ax = si;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ae36() // 1a61:0826 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = 0;
    if (memoryAGet16(ds, 0x78a6) == 0x0000)
        goto loc_1ae47;
    goto loc_1af1f;
loc_1ae47: // 1a61:0837
    memoryASet16(ds, 0xe6f0, 0x0000);
    memoryASet16(ds, 0x767a, 0x0000);
    si = 0x0001;
    goto loc_1ae87;
loc_1ae58: // 1a61:0848
    ax = 0x431e;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x1a61);
    sp += 0x0004;
    if (!ax)
        goto loc_1ae7b;
    if (ax == 0x0001)
        goto loc_1ae83;
    goto loc_1ae86;
loc_1ae7b: // 1a61:086b
    memoryASet16(ds, 0x767a, 0x0001);
    goto loc_1ae86;
loc_1ae83: // 1a61:0873
    di = 0x0001;
loc_1ae86: // 1a61:0876
    si++;
loc_1ae87: // 1a61:0877
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_1ae58;
    memoryASet16(ds, 0x7892, 0x0000);
    memoryASet16(ds, 0x7890, 0x0000);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x01ed; sub_395b(); assert(cs == 0x1a61);
    sp += 0x0002;
    memoryASet16(ds, 0x788a, dx);
    memoryASet16(ds, 0x7888, ax);
    ax = 0x1a61;
    push(ax);
    ax = 0x05f5;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x01ed; sub_396a(); assert(cs == 0x1a61);
    sp += 0x0006;
    ax = 0;
    dx = 0;
    memoryASet16(ds, 0x766e, ax);
    memoryASet16(ds, 0x766c, dx);
    memoryASet16(ds, 0xa53f, ax);
    memoryASet16(ds, 0xa53d, dx);
    memoryASet16(ds, 0x7886, ax);
    memoryASet16(ds, 0x7884, dx);
    ax = 0;
    push(ax);
    push(cs);
    sub_1ad5b();
    sp += 0x0002;
    ax = 0;
    push(ax);
    push(cs);
    sub_1ade0();
    sp += 0x0002;
    if (memoryAGet16(ds, 0x767a) != 0x0000)
        goto loc_1aeff;
    push(di);
    push(cs);
    sub_1ab39();
    sp += 0x0002;
    memoryASet16(ds, 0xc639, ax);
loc_1aeff: // 1a61:08ef
    si = 0;
    goto loc_1af13;
loc_1af03: // 1a61:08f3
    ax = si;
    dx = 0x003c;
    imul16(dx);
    bx = si;
    bx <<= 1;
    memoryASet16(ds, bx + 30332, ax);
    si++;
loc_1af13: // 1a61:0903
    if ((short)si < (short)0x00ff)
        goto loc_1af03;
    memoryASet16(ds, 0x78a6, 0x0001);
loc_1af1f: // 1a61:090f
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1af23() // 1a61:0913 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1af4f;
    ax = si;
    if (ax == 0x0002)
        goto loc_1af49;
    goto loc_1af4f;
loc_1af49: // 1a61:0939
    ax = memoryAGet16(ds, 0xc639);
    memoryASet16(ss, bp - 2, ax);
loc_1af4f: // 1a61:093f
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_1af64;
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_1af61;
    si = 0x0002;
    goto loc_1af64;
loc_1af61: // 1a61:0951
    si = 0x0001;
loc_1af64: // 1a61:0954
    if (si == memoryAGet16(ds, 0xc635))
        goto loc_1af72;
    push(si);
    push(cs);
    sub_1ad5b();
    sp += 0x0002;
loc_1af72: // 1a61:0962
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1af87;
    ax = di;
    if (ax == 0x0002)
        goto loc_1af81;
    goto loc_1af87;
loc_1af81: // 1a61:0971
    ax = memoryAGet16(ds, 0xc639);
    memoryASet16(ss, bp - 4, ax);
loc_1af87: // 1a61:0977
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_1af9b;
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_1af99;
    di = 0x0001;
    goto loc_1af9b;
loc_1af99: // 1a61:0989
    di = 0;
loc_1af9b: // 1a61:098b
    if (di == memoryAGet16(ds, 0xc633))
        goto loc_1afa9;
    push(di);
    push(cs);
    sub_1ade0();
    sp += 0x0002;
loc_1afa9: // 1a61:0999
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1afaf() // 1a61:099f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x78a6) == 0x0000)
        goto loc_1afed;
    push(cs);
    sub_1b125();
    push(cs);
    sub_1ace7();
    push(cs);
    sub_1ad0b();
    push(flagAsReg());
    flags.interrupts = 0;
    ax = 0;
    push(ax);
    push(cs);
    sub_1a61e();
    sp += 0x0002;
    push(memoryAGet16(ds, 0x788a));
    push(memoryAGet16(ds, 0x7888));
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x01ed; sub_396a(); assert(cs == 0x1a61);
    sp += 0x0006;
    flagsFromReg(pop());
    memoryASet16(ds, 0x78a6, 0x0000);
loc_1afed: // 1a61:09dd
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b001() // 1a61:09f1 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    if (memoryAGet16(ds, 0xc635) != 0x0000)
        goto loc_1b015;
    goto loc_1b09b;
loc_1b015: // 1a61:0a05
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0xe6f2);
    bx += ax;
    ax = memoryAGet16(ds, bx);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, 0x0000);
    ax = memoryAGet16(ss, bp - 4);
    ax |= memoryAGet16(ss, bp - 2);
    if (ax)
        goto loc_1b03d;
    ax = 0x4370;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1a61);
    sp += 0x0002;
loc_1b03d: // 1a61:0a2d
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax |= memoryAGet16(es, bx + 2);
    if (ax)
        goto loc_1b055;
    ax = 0x4390;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1a61);
    sp += 0x0002;
loc_1b055: // 1a61:0a45
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 4);
    if (ax < memoryAGet16(ds, 0x788c))
        goto loc_1b09b;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1b071;
    if (ax == 0x0002)
        goto loc_1b080;
    goto loc_1b08d;
loc_1b071: // 1a61:0a61
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_1a68b();
    sp += 0x0004;
    goto loc_1b08d;
loc_1b080: // 1a61:0a70
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_1a8e7();
    sp += 0x0004;
loc_1b08d: // 1a61:0a7d
    memoryASet16(ds, 0x788e, si);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 4);
    memoryASet16(ds, 0x788c, ax);
loc_1b09b: // 1a61:0a8b
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b0a0() // 1a61:0a90 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1b0b4;
    if (ax == 0x0002)
        goto loc_1b0c8;
    goto loc_1b0da;
loc_1b0b4: // 1a61:0aa4
    ax = memoryAGet16(ds, 0x787e);
    ax |= memoryAGet16(ds, 0x7880);
    if (!ax)
        goto loc_1b0c2;
    ax = 0x0001;
    goto loc_1b0c4;
loc_1b0c2: // 1a61:0ab2
    ax = 0;
loc_1b0c4: // 1a61:0ab4
    dx = ax;
    goto loc_1b0da;
loc_1b0c8: // 1a61:0ab8
    ax = memoryAGet16(ds, 0x7676);
    ax |= memoryAGet16(ds, 0x7678);
    if (!ax)
        goto loc_1b0d6;
    ax = 0x0001;
    goto loc_1b0d8;
loc_1b0d6: // 1a61:0ac6
    ax = 0;
loc_1b0d8: // 1a61:0ac8
    dx = ax;
loc_1b0da: // 1a61:0aca
    if (!dx)
        goto loc_1b0e3;
    ax = memoryAGet16(ds, 0x788e);
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1b0e3: // 1a61:0ad3
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b0e7() // 1a61:0ad7 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0xc635);
    if (ax == 0x0001)
        goto loc_1b0f9;
    if (ax == 0x0002)
        goto loc_1b0ff;
    goto loc_1b103;
loc_1b0f9: // 1a61:0ae9
    push(cs);
    sub_1a6b9();
    goto loc_1b103;
loc_1b0ff: // 1a61:0aef
    push(cs);
    sub_1a7b0();
loc_1b103: // 1a61:0af3
    ax = 0;
    memoryASet16(ds, 0x788c, ax);
    memoryASet16(ds, 0x788e, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b10d() // 1a61:0afd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
loc_1b110: // 1a61:0b00
    push(cs);
    sub_1b0a0();
    if (ax)
        goto loc_1b110;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b11a() // 1a61:0b0a +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x765a, 0x0001);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b125() // 1a61:0b15 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0xc633);
    if (ax == 0x0001)
        goto loc_1b135;
    goto loc_1b168;
loc_1b135: // 1a61:0b25
    memoryASet16(ds, 0x7658, 0x0000);
    al = 0x00;
    push(ax);
    al = 0xbd;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, 0x0000);
    goto loc_1b162;
loc_1b14f: // 1a61:0b3f
    al = 0x00;
    push(ax);
    al = memoryAGet(ss, bp - 2);
    al += 0xb1;
    push(ax);
    push(cs);
    sub_1a76e();
    sp += 0x0004;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1b162: // 1a61:0b52
    if (memoryAGet16(ss, bp - 2) < 0x000a)
        goto loc_1b14f;
loc_1b168: // 1a61:0b58
    memoryASet16(ds, 0x765a, 0x0000);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b172() // 1a61:0b62 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1b125();
    push(flagAsReg());
    flags.interrupts = 0;
    if (memoryAGet16(ds, 0xc633) != 0x0001)
        goto loc_1b1c1;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    dx += 0x0002;
    memoryASet16(ds, 0x74fe, ax);
    memoryASet16(ds, 0x74fc, dx);
    memoryASet16(ds, 0x74fa, ax);
    memoryASet16(ds, 0x74f8, dx);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    memoryASet16(ds, 0x74f6, ax);
    memoryASet16(ds, 0x74f4, ax);
    memoryASet16(ds, 0x74f2, 0x0000);
    memoryASet16(ds, 0x74f0, 0x0000);
    memoryASet16(ds, 0x766e, 0x0000);
    memoryASet16(ds, 0x766c, 0x0000);
    push(cs);
    sub_1b11a();
loc_1b1c1: // 1a61:0bb1
    flagsFromReg(pop());
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1b1c4() // 1a61:0bb4 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0xc633);
    if (ax == 0x0001)
        goto loc_1b1d1;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1b1d1: // 1a61:0bc1
    push(cs);
    sub_1b125();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b1d7() // 1a61:0bc7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0xc633);
    if (ax == 0x0001)
        goto loc_1b1e4;
    goto loc_1b1e8;
loc_1b1e4: // 1a61:0bd4
    dx = 0;
    goto loc_1b1ea;
loc_1b1e8: // 1a61:0bd8
    dx = 0;
loc_1b1ea: // 1a61:0bda
    ax = dx;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b324() // 1b1e:0144 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 6);
    al += 0x30;
    memoryASet(ds, 0x45cb, al);
    ax = 0x45c4;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b334() // 1b1e:0154 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xe800, ax);
    memoryASet16(ds, 0xe7fe, dx);
    ax = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0xe804, ax);
    memoryASet16(ds, 0xe802, dx);
    ax = memoryAGet16(ss, bp + 16);
    dx = memoryAGet16(ss, bp + 14);
    memoryASet16(ds, 0xe7fc, ax);
    memoryASet16(ds, 0xe7fa, dx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b360() // 1b1e:0180 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    ax = 0x8001;
    push(ax);
    ax = 0x468c;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1b1e);
    sp += 0x0004;
    si = ax;
    if (ax != 0xffff)
        goto loc_1b382;
    goto loc_1b4cc;
loc_1b382: // 1b1e:01a2
    ax = 0x0004;
    push(ax);
    ax = bp - 6;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 8;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x4697;
    push(ax);
    ax = bp - 6;
    push(ax);
    push(cs); cs = 0x01ed; sub_418a(); assert(cs == 0x1b1e);
    sp += 0x0004;
    if (ax)
        goto loc_1b3be;
    if (memoryAGet16(ss, bp - 8) == 0x0004)
        goto loc_1b3ca;
loc_1b3be: // 1b1e:01de
    push(si);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1b1e);
    sp += 0x0002;
    goto loc_1b4cc;
loc_1b3ca: // 1b1e:01ea
    ax = 0x0200;
    push(ax);
    ax = 0x43c4;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 12;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 14;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x000a;
    push(ax);
    ax = 0x3bc2;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc5cd;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xe6e8;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc637;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0x7a14;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc5cf;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = 0x0394;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc643;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0008;
    push(ax);
    ax = 0xcc05;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    push(si);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1b1e);
    sp += 0x0002;
    memoryASet16(ds, 0xa539, 0x0000);
    di = 0x0001;
    goto loc_1b4ef;
loc_1b4cc: // 1b1e:02ec
    memoryASet16(ss, bp - 10, 0x0000);
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 14, 0x0000);
    memoryASet16(ds, 0xc5cd, 0x0001);
    memoryASet16(ds, 0xc5cf, 0x0000);
    di = 0;
    memoryASet16(ds, 0xa539, 0x0001);
loc_1b4ef: // 1b1e:030f
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 10));
    if (!di)
        goto loc_1b50b;
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ds, 0xc639))
        goto loc_1b507;
    ax = 0x0001;
    goto loc_1b509;
loc_1b507: // 1b1e:0327
    ax = 0;
loc_1b509: // 1b1e:0329
    goto loc_1b50d;
loc_1b50b: // 1b1e:032b
    ax = 0;
loc_1b50d: // 1b1e:032d
    push(ax);
    push(cs); cs = 0x1a61; sub_1af23(); assert(cs == 0x1b1e);
    sp += 0x0006;
    push(memoryAGet16(ss, bp - 14));
    push(di);
    push(cs); cs = 0x164d; sub_16cf6(); assert(cs == 0x1b1e);
    sp += 0x0004;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b528() // 1b1e:0348 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    memoryASet16(ss, bp - 2, 0x0004);
    ax = 0x8180;
    push(ax);
    ax = 0x8102;
    push(ax);
    ax = 0x469b;
    push(ax);
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1b1e);
    sp += 0x0006;
    si = ax;
    if (si != 0xffff)
        goto loc_1b552;
    goto loc_1b66b;
loc_1b552: // 1b1e:0372
    ax = 0x0004;
    push(ax);
    ax = 0x46a6;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0200;
    push(ax);
    ax = 0x43c4;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc635;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc633;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xcc0d;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x000a;
    push(ax);
    ax = 0x3bc2;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc5cd;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xe6e8;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc637;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc639;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0x7a14;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc5cf;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0001;
    push(ax);
    ax = 0x0394;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0002;
    push(ax);
    ax = 0xc643;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0008;
    push(ax);
    ax = 0xcc05;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_3383(); assert(cs == 0x1b1e);
    sp += 0x0006;
    push(si);
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1b1e);
    sp += 0x0002;
loc_1b66b: // 1b1e:048b
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b670() // 1b1e:0490 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    di = 0;
    si = 0xe6fe;
    goto loc_1b719;
loc_1b680: // 1b1e:04a0
    push(di);
    push(cs);
    sub_1b324();
    sp += 0x0002;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    ax = 0x8001;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x01ed; sub_3c5d(); assert(cs == 0x1b1e);
    sp += 0x0004;
    memoryASet16(ss, bp - 6, ax);
    if (ax == 0xffff)
        goto loc_1b6e4;
    ax = 0x002a;
    push(ax);
    push(si);
    push(memoryAGet16(ss, bp - 6));
    push(cs); cs = 0x01ed; sub_3de0(); assert(cs == 0x1b1e);
    sp += 0x0006;
    if (ax != 0x002a)
        goto loc_1b6d9;
    ax = 0x46aa;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_418a(); assert(cs == 0x1b1e);
    sp += 0x0004;
    if (ax)
        goto loc_1b6d9;
    if (memoryAGet16(ds, si + 4) != 0xa537)
        goto loc_1b6d9;
    memoryASet16(ss, bp - 2, 0x0001);
loc_1b6d9: // 1b1e:04f9
    push(memoryAGet16(ss, bp - 6));
    push(cs); cs = 0x01ed; sub_213d(); assert(cs == 0x1b1e);
    sp += 0x0002;
loc_1b6e4: // 1b1e:0504
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1b6f1;
    memoryASet16(ds, si + 6, 0x0001);
    goto loc_1b715;
loc_1b6f1: // 1b1e:0511
    ax = 0x46ae;
    push(ax);
    push(si);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    memoryASet16(ds, si + 6, 0x0000);
    ax = 0x46b2;
    push(ax);
    ax = si;
    ax += 0x0008;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
loc_1b715: // 1b1e:0535
    di++;
    si += 0x002a;
loc_1b719: // 1b1e:0539
    if (di >= 0x0006)
        goto loc_1b721;
    goto loc_1b680;
loc_1b721: // 1b1e:0541
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b727() // 1b1e:0547 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    if (memoryAGet16(ds, 0x78d4) != 0x0000)
        goto loc_1b79e;
    ax = 0x1b1e;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x01ed; sub_39b3(); assert(cs == 0x1b1e);
    sp += 0x0004;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1eef; sub_1eef2(); assert(cs == 0x1b1e);
    sp += 0x0002;
    push(cs);
    sub_1b360();
    si = 0x0001;
    goto loc_1b792;
loc_1b757: // 1b1e:0577
    ax = 0x43b8;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs);
    sub_1b7df();
    sp += 0x0004;
    if (!ax)
        goto loc_1b77a;
    if (ax == 0x0001)
        goto loc_1b78b;
    goto loc_1b791;
loc_1b77a: // 1b1e:059a
    if (memoryAGet16(ds, 0xe6ee) != 0x0002)
        goto loc_1b791;
    memoryASet16(ds, 0xe6e8, 0x0001);
    goto loc_1b791;
  // gap 2 bytes
loc_1b78b: // 1b1e:05ab
    memoryASet16(ds, 0xe6e8, 0x0000);
loc_1b791: // 1b1e:05b1
    si++;
loc_1b792: // 1b1e:05b2
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_1b757;
    memoryASet16(ds, 0x78d4, 0x0001);
loc_1b79e: // 1b1e:05be
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b7a1() // 1b1e:05c1 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xe804, 0x0000);
    memoryASet16(ds, 0xe802, 0x0000);
    memoryASet16(ds, 0xe800, 0x0000);
    memoryASet16(ds, 0xe7fe, 0x0000);
    push(cs);
    sub_1b670();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b7c2() // 1b1e:05e2 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x78d4) == 0x0000)
        goto loc_1b7dd;
    if (memoryAGet16(ds, 0xe810) != 0x0000)
        goto loc_1b7d7;
    push(cs);
    sub_1b528();
loc_1b7d7: // 1b1e:05f7
    memoryASet16(ds, 0x78d4, 0x0000);
loc_1b7dd: // 1b1e:05fd
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b7df() // 1b1e:05ff +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    goto loc_1b7ec;
loc_1b7e9: // 1b1e:0609
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_1b7ec: // 1b1e:060c
    bx = memoryAGet16(ss, bp + 6);
    al = memoryAGet(ds, bx);
    cbw();
    bx = ax;
    al = memoryAGet(ds, bx + 28297);
    cbw();
    if (!(ax & 0x000c))
        goto loc_1b7e9;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_1b87a;
loc_1b805: // 1b1e:0625
    bx = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ds, bx);
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) + 0x0002);
    si = memoryAGet16(ss, bp + 6);
    al = 0x00;
    memoryASet(ss, bp - 1, al);
    memoryASet(ss, bp - 2, al);
    goto loc_1b86f;
loc_1b81b: // 1b1e:063b
    al = memoryAGet(ds, di);
    memoryASet(ss, bp - 2, al);
    di++;
    cbw();
    if (ax)
        goto loc_1b82f;
    ax = memoryAGet16(ss, bp - 4);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1b82f: // 1b1e:064f
    al = memoryAGet(ds, si);
    memoryASet(ss, bp - 1, al);
    si++;
    al = memoryAGet(ss, bp - 2);
    cbw();
    bx = ax;
    if (!(memoryAGet(ds, bx + 28297) & 0x04))
        goto loc_1b852;
    al = memoryAGet(ss, bp - 2);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_32ff(); assert(cs == 0x1b1e);
    sp += 0x0002;
    memoryASet(ss, bp - 2, al);
loc_1b852: // 1b1e:0672
    al = memoryAGet(ss, bp - 1);
    cbw();
    bx = ax;
    if (!(memoryAGet(ds, bx + 28297) & 0x04))
        goto loc_1b86f;
    al = memoryAGet(ss, bp - 1);
    cbw();
    push(ax);
    push(cs); cs = 0x01ed; sub_32ff(); assert(cs == 0x1b1e);
    sp += 0x0002;
    memoryASet(ss, bp - 1, al);
loc_1b86f: // 1b1e:068f
    al = memoryAGet(ss, bp - 2);
    if (al == memoryAGet(ss, bp - 1))
        goto loc_1b81b;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1b87a: // 1b1e:069a
    bx = memoryAGet16(ss, bp + 8);
    if (memoryAGet16(ds, bx) == 0x0000)
        goto loc_1b88c;
    bx = memoryAGet16(ds, bx);
    if (memoryAGet(ds, bx) == 0x00)
        goto loc_1b88c;
    goto loc_1b805;
loc_1b88c: // 1b1e:06ac
    ax = 0xffff;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b895() // 1b1e:06b5 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 2, 0x0000);
    si = 0x0001;
    goto loc_1b8d1;
loc_1b8ac: // 1b1e:06cc
    ax = bp - 4;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs);
    sub_1b7df();
    sp += 0x0004;
    if (ax == 0xffff)
        goto loc_1b8d0;
    ax = 0x0001;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1b8d0: // 1b1e:06f0
    si++;
loc_1b8d1: // 1b1e:06f1
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_1b8ac;
    ax = 0;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b8de() // 1b1e:06fe +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 10);
    cl = memoryAGet(ss, bp + 12);
    ax = di;
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, dx);
    ax = di;
    ax--;
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    dx += 0x0008;
    memoryASet16(ss, bp - 6, 0x21d1);
    memoryASet16(ss, bp - 8, dx);
    goto loc_1b958;
loc_1b926: // 1b1e:0746
    al = memoryAGet(ds, si);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet(es, bx, al);
    si++;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    if (cl == 0xff)
        goto loc_1b955;
    al = cl;
    al &= 0x8f;
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    dl = memoryAGet(es, bx);
    dl &= 0x70;
    al |= dl;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    goto loc_1b958;
loc_1b955: // 1b1e:0775
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1b958: // 1b1e:0778
    if (memoryAGet(ds, si) != 0x00)
        goto loc_1b926;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b963() // 1b1e:0783 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = 0x03;
    ah = 0x00;
    interrupt(0x10);
    ah = 0x0f;
    interrupt(0x10);
    dl = 0x00;
    dh = 0x18;
    ah = 0x02;
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b97a() // 1b1e:079a +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(cs);
    sub_1b963();
    ax = 0x0fa0;
    push(ax);
    ax = 0x21d1;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0xb800;
    dx = 0;
    push(ax);
    push(dx);
    push(cs); cs = 0x01ed; sub_561c(); assert(cs == 0x1b1e);
    sp += 0x000a;
    si = 0x0001;
    goto loc_1b9f4;
loc_1b9a3: // 1b1e:07c3
    ax = 0x43b4;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs);
    sub_1b7df();
    sp += 0x0004;
    di = ax;
    if (di)
        goto loc_1b9e4;
    ax = si;
    ax++;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x01ed; sub_349f(); assert(cs == 0x1b1e);
    sp += 0x0002;
    memoryASet16(ds, 0x7ada, ax);
    memoryASet16(ds, 0x7adc, 0x0001);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2 bytes
loc_1b9e4: // 1b1e:0804
    if (di != 0x0001)
        goto loc_1b9f3;
    memoryASet16(ds, 0x7ad8, 0x0001);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1b9f3: // 1b1e:0813
    si++;
loc_1b9f4: // 1b1e:0814
    if (si < memoryAGet16(ds, 0x743c))
        goto loc_1b9a3;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b9fe() // 1b1e:081e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    cx = memoryAGet16(ss, bp + 10);
    ax = si;
    ax--;
    ax <<= 1;
    push(ax);
    ax = di;
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    memoryASet16(ss, bp - 2, 0xb800);
    memoryASet16(ss, bp - 4, dx);
    ax = si;
    ax--;
    ax <<= 1;
    push(ax);
    ax = di;
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    dx += 0x0006;
    memoryASet16(ss, bp - 6, 0x21d1);
    memoryASet16(ss, bp - 8, dx);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_1ba4d;
    al = 0xfb;
    goto loc_1ba4f;
loc_1ba4d: // 1b1e:086d
    al = 0x20;
loc_1ba4f: // 1b1e:086f
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_1ba8a;
    if (memoryAGet16(ss, bp + 14) == 0x0000)
        goto loc_1ba8a;
    cx++;
    goto loc_1ba83;
loc_1ba6b: // 1b1e:088b
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    al &= 0xf0;
    al |= 0x0f;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0002);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
loc_1ba83: // 1b1e:08a3
    ax = cx;
    cx--;
    if (ax)
        goto loc_1ba6b;
loc_1ba8a: // 1b1e:08aa
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ba90() // 1b1e:08b0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    ax = 0x000a;
    push(ax);
    ax = bp - 16;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x1b1e);
    sp += 0x0008;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x1b1e);
    sp += 0x0002;
    si = ax;
    goto loc_1bad4;
loc_1babe: // 1b1e:08de
    al = 0xff;
    push(ax);
    ax = 0x46b8;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = di;
    di++;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
    si++;
loc_1bad4: // 1b1e:08f4
    if (si < 0x0005)
        goto loc_1babe;
    al = 0xff;
    push(ax);
    ax = bp - 16;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1baf1() // 1b1e:0911 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0xe6ee) != 0x0001)
        goto loc_1bb05;
    ax = 0x0001;
    goto loc_1bb07;
loc_1bb05: // 1b1e:0925
    ax = 0;
loc_1bb07: // 1b1e:0927
    si = ax;
    push(ax);
    if ((short)memoryAGet16(ds, 0xe812) < (short)0x0002)
        goto loc_1bb1d;
    if ((short)memoryAGet16(ds, 0xe812) > (short)0x0005)
        goto loc_1bb1d;
    ax = 0x0001;
    goto loc_1bb1f;
loc_1bb1d: // 1b1e:093d
    ax = 0;
loc_1bb1f: // 1b1e:093f
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    if (memoryAGet16(ds, 0xe6ee) == 0x0002)
        goto loc_1bb41;
    if (memoryAGet16(ds, 0xe6ee) != 0x0003)
        goto loc_1bb46;
loc_1bb41: // 1b1e:0961
    ax = 0x0001;
    goto loc_1bb48;
loc_1bb46: // 1b1e:0966
    ax = 0;
loc_1bb48: // 1b1e:0968
    si = ax;
    push(ax);
    if ((short)memoryAGet16(ds, 0xe812) < (short)0x0003)
        goto loc_1bb5e;
    if ((short)memoryAGet16(ds, 0xe812) > (short)0x0005)
        goto loc_1bb5e;
    ax = 0x0001;
    goto loc_1bb60;
loc_1bb5e: // 1b1e:097e
    ax = 0;
loc_1bb60: // 1b1e:0980
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    if (memoryAGet16(ds, 0xe6e8) == 0x0000)
        goto loc_1bb91;
    al = 0x4f;
    push(ax);
    ax = 0x46ba;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
loc_1bb91: // 1b1e:09b1
    ax = 0x0001;
    push(ax);
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x003c;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ds, 0xcc46));
    ax = 0x000b;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x003c;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ds, 0xcc48));
    ax = 0x000b;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x003c;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ds, 0xcc4a));
    ax = 0x0005;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x003c;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    if (memoryAGet16(ds, 0xc635) != 0x0001)
        goto loc_1bc06;
    ax = 0x0001;
    goto loc_1bc08;
loc_1bc06: // 1b1e:0a26
    ax = 0;
loc_1bc08: // 1b1e:0a28
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    if (memoryAGet16(ds, 0xc635) == 0x0002)
        goto loc_1bc2e;
    if (memoryAGet16(ds, 0xc633) != 0x0001)
        goto loc_1bc33;
loc_1bc2e: // 1b1e:0a4e
    ax = 0x0001;
    goto loc_1bc35;
loc_1bc33: // 1b1e:0a53
    ax = 0;
loc_1bc35: // 1b1e:0a55
    si = ax;
    push(ax);
    push(memoryAGet16(ds, 0xc639));
    ax = 0x000e;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    if (!si)
        goto loc_1bcc0;
    if (memoryAGet16(ds, 0xc639) == 0x0000)
        goto loc_1bcc0;
    di = 0x0015;
    memoryASet16(ss, bp - 14, 0x0010);
    cx = 0x000e;
    ax = di;
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    dx--;
    memoryASet16(ss, bp - 6, 0xb800);
    memoryASet16(ss, bp - 8, dx);
    ax = di;
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    dx = 0x00a0;
    imul16(dx);
    dx = pop();
    dx += ax;
    dx += 0x0006;
    memoryASet16(ss, bp - 10, 0x21d1);
    memoryASet16(ss, bp - 12, dx);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
    cx++;
    goto loc_1bcb9;
loc_1bca1: // 1b1e:0ac1
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    al &= 0xf0;
    al |= 0x0f;
    bx = memoryAGet16(ss, bp - 8); es = memoryAGet16(ss, bp - 8 + 2); /*ggg2*/;
    memoryASet(es, bx, al);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 0x0002);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0002);
loc_1bcb9: // 1b1e:0ad9
    ax = cx;
    cx--;
    if (ax)
        goto loc_1bca1;
loc_1bcc0: // 1b1e:0ae0
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xa01d));
    push(memoryAGet16(ds, 0xa01b));
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x1b1e);
    push(dx);
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x003f;
    push(ax);
    push(cs);
    sub_1ba90();
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0035;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xa015));
    push(memoryAGet16(ds, 0xa013));
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x1b1e);
    push(dx);
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x003f;
    push(ax);
    push(cs);
    sub_1ba90();
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ds, 0xa013);
    ax |= memoryAGet16(ds, 0xa015);
    if (!ax)
        goto loc_1bd34;
    ax = 0x0001;
    goto loc_1bd36;
loc_1bd34: // 1b1e:0b54
    ax = 0;
loc_1bd36: // 1b1e:0b56
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0035;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = 0;
    dx = 0x0400;
    push(ax);
    push(dx);
    push(memoryAGet16(ds, 0xa019));
    push(memoryAGet16(ds, 0xa017));
    push(cs); cs = 0x01ed; sub_4f95(); assert(cs == 0x1b1e);
    push(dx);
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x003f;
    push(ax);
    push(cs);
    sub_1ba90();
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ds, 0xa017);
    ax |= memoryAGet16(ds, 0xa019);
    if (!ax)
        goto loc_1bd81;
    ax = 0x0001;
    goto loc_1bd83;
loc_1bd81: // 1b1e:0ba1
    ax = 0;
loc_1bd83: // 1b1e:0ba3
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0035;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    ax = memoryAGet16(ds, 0xa01d);
    dx = memoryAGet16(ds, 0xa01b);
    flags.carry = (dx + memoryAGet16(ds, 0xa013)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa013);
    ax += memoryAGet16(ds, 0xa015) + flags.carry;
    flags.carry = (dx + memoryAGet16(ds, 0xa017)) >= 0x10000;
    dx += memoryAGet16(ds, 0xa017);
    ax += memoryAGet16(ds, 0xa019) + flags.carry;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    dx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp - 4);
    cl = 0x0a;
    push(cs); cs = 0x01ed; sub_5084(); assert(cs == 0x1b1e);
    push(dx);
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = 0x003f;
    push(ax);
    push(cs);
    sub_1ba90();
    sp += 0x0008;
    ax = 0x0001;
    push(ax);
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = 0x0035;
    push(ax);
    push(cs);
    sub_1b9fe();
    sp += 0x000a;
    al = 0xff;
    push(ax);
    ax = 0x46db;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = 0x0034;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
    al = 0x9c;
    push(ax);
    ax = 0x46dd;
    push(ax);
    ax = 0x0016;
    push(ax);
    ax = 0x001b;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1be1c() // 1b1e:0c3c +far +stackDrop2
{
    bool temp_cond0;

    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    if (memoryAGet16(ds, 0x7adc) != 0x0000)
        goto loc_1be95;
    if (memoryAGet16(ds, 0x7ad8) != 0x0000)
        goto loc_1be95;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1b1e);
    si = 0;
    di = 0x0001;
    goto loc_1be7c;
loc_1be3e: // 1b1e:0c5e
    al = memoryAGet(ds, si + 17873);
    ah = 0x00;
    memoryASet16(ss, bp - 2, ax);
    if (!di)
        goto loc_1be5c;
    si++;
    ax = si;
    if (ax != 0x0009)
        goto loc_1be65;
    si = 0x0008;
    di = 0;
    goto loc_1be65;
  // gap 2 bytes
loc_1be5c: // 1b1e:0c7c
    temp_cond0 = (short)si - 1 >= 0;
    si--;
    if (temp_cond0)
        goto loc_1be65;
    si = 0x0001;
    di = 0x0001;
loc_1be65: // 1b1e:0c85
    al = memoryAGet(ss, bp - 2);
    push(ax);
    ax = 0x46ed;
    push(ax);
    ax = 0x0016;
    push(ax);
    ax = 0x001d;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
loc_1be7c: // 1b1e:0c9c
    ax = 0x0001;
    push(ax);
    ax = 0;
    dx = 0x0004;
    push(ax);
    push(dx);
    push(cs); cs = 0x164d; sub_17462(); assert(cs == 0x1b1e);
    sp += 0x0006;
    if (!ax)
        goto loc_1be3e;
    goto loc_1beab;
loc_1be95: // 1b1e:0cb5
    al = 0x9a;
    push(ax);
    ax = 0x4707;
    push(ax);
    ax = 0x0016;
    push(ax);
    ax = 0x001d;
    push(ax);
    push(cs);
    sub_1b8de();
    sp += 0x0008;
loc_1beab: // 1b1e:0ccb
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1b1e);
    push(cs);
    sub_1b963();
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1beba() // 1b1e:0cda +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x43be, ax);
    memoryASet16(ds, 0x43bc, dx);
    ax = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x43c2, ax);
    memoryASet16(ds, 0x43c0, dx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bed9() // 1b1e:0cf9 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    goto loc_1bf47;
loc_1bee6: // 1b1e:0d06
    si = di;
    goto loc_1beeb;
loc_1beea: // 1b1e:0d0a
    si++;
loc_1beeb: // 1b1e:0d0b
    al = memoryAGet(ds, si);
    memoryASet(ss, bp - 1, al);
    if (!al)
        goto loc_1befa;
    if (memoryAGet(ss, bp - 1) != 0x0a)
        goto loc_1beea;
loc_1befa: // 1b1e:0d1a
    memoryASet(ds, si, 0x00);
    ax = bp - 6;
    push(ax);
    ax = bp - 4;
    push(ax);
    push(ds);
    push(di);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1b1e); // 1b1e:0d27;
    sp += 0x0008;
    ax = memoryAGet16(ds, 0xa537);
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ds, 0xa535);
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    push(di);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:0d3c;
    sp += 0x0004;
    di = si;
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_1bf40;
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, si, al);
    di++;
    ax = memoryAGet16(ds, 0xa533);
    memoryASet16(ds, 0xa537, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + ax);
    goto loc_1bf47;
loc_1bf40: // 1b1e:0d60
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa537, memoryAGet16(ds, 0xa537) + ax);
loc_1bf47: // 1b1e:0d67
    if (memoryAGet(ds, di) != 0x00)
        goto loc_1bee6;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bf52() // 1b1e:0d72 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0020;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x01ed; sub_3b6b(); assert(cs == 0x1b1e);
    sp += 0x0008;
    push(ax);
    push(cs);
    sub_1bed9();
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bf7a() // 1b1e:0d9a +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0020;
    ax = 0x000a;
    push(ax);
    ax = bp - 32;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x01ed; sub_3b85(); assert(cs == 0x1b1e);
    sp += 0x0008;
    push(ax);
    push(cs);
    sub_1bed9();
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bfa2() // 1b1e:0dc2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ds);
    push(si);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1b1e); // 1b1e:0dd6;
    sp += 0x0008;
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ss, bp + 8);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 14);
    ax -= memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax -= memoryAGet16(ss, bp - 2);
    ax >>= 1;
    dx = memoryAGet16(ss, bp + 8);
    dx += ax;
    memoryASet16(ds, 0x6020, dx);
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 4);
    ax >>= 1;
    dx = memoryAGet16(ss, bp + 10);
    dx += ax;
    memoryASet16(ds, 0x6022, dx);
    push(ds);
    push(si);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:0e13;
    sp += 0x0004;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bfff() // 1b1e:0e1f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = memoryAGet16(ds, 0xa533);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ds, 0xa7de);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += memoryAGet16(ds, 0xa531);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ds, 0xa7dc);
    memoryASet16(ss, bp - 2, ax);
    ax = bp - 8;
    dx = ss;
    cx = 0x0008;
    push(cs); cs = 0x01ed; sub_51d7(); assert(cs == 0x1b1e);
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1bfa2();
    sp += 0x000a;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c040() // 1b1e:0e60 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    si = memoryAGet16(ss, bp + 6);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ds);
    push(si);
    switch (memoryAGet32(ds, 0x43bc))
    {
        case 0x1ef3078d: push(cs); cs = 0x1ef3; sub_1f6bd(); assert(cs == 0x1b1e); break;
        default:
            stop();
    }
    sp += 0x0008;
    ax = memoryAGet16(ss, bp - 2);
    if (ax <= memoryAGet16(ds, 0xa531))
        goto loc_1c070;
    ax = 0x4721;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1b1e);
    sp += 0x0002;
loc_1c070: // 1b1e:0e90
    ax = memoryAGet16(ds, 0xa531);
    ax -= memoryAGet16(ss, bp - 2);
    ax >>= 1;
    dx = memoryAGet16(ds, 0xa533);
    dx += ax;
    memoryASet16(ds, 0x6020, dx);
    ax = memoryAGet16(ds, 0xa535);
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    push(si);
    switch (memoryAGet32(ds, 0x43c0))
    {
        case 0x1ef30e2c: push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x1b1e); break;
        default:
            stop();
    }
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0xa535, memoryAGet16(ds, 0xa535) + ax);
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c09d() // 1b1e:0ebd +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    goto loc_1c0d7;
loc_1c0aa: // 1b1e:0eca
    si = di;
    goto loc_1c0af;
loc_1c0ae: // 1b1e:0ece
    si++;
loc_1c0af: // 1b1e:0ecf
    al = memoryAGet(ds, si);
    memoryASet(ss, bp - 1, al);
    if (!al)
        goto loc_1c0be;
    if (memoryAGet(ss, bp - 1) != 0x0a)
        goto loc_1c0ae;
loc_1c0be: // 1b1e:0ede
    memoryASet(ds, si, 0x00);
    push(di);
    push(cs);
    sub_1c040();
    sp += 0x0002;
    di = si;
    if (memoryAGet(ss, bp - 1) == 0x00)
        goto loc_1c0d7;
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, si, al);
    di++;
loc_1c0d7: // 1b1e:0ef7
    if (memoryAGet(ds, di) != 0x00)
        goto loc_1c0aa;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c0e2() // 1b1e:0f02 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x000f;
    push(ax);
    push(memoryAGet16(ds, 0xa7dc));
    push(memoryAGet16(ds, 0xa531));
    push(memoryAGet16(ds, 0xa7de));
    push(memoryAGet16(ds, 0xa533));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1b1e);
    sp += 0x000a;
    ax = memoryAGet16(ds, 0xa533);
    memoryASet16(ds, 0xa537, ax);
    ax = memoryAGet16(ds, 0xa7de);
    memoryASet16(ds, 0xa535, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c10f() // 1b1e:0f2f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ds, 0xa533, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ds, 0xa7de, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ds, 0xa531, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ds, 0xa7dc, ax);
    ax = memoryAGet16(ds, 0xa533);
    memoryASet16(ds, 0xa537, ax);
    ax = memoryAGet16(ds, 0xa7de);
    memoryASet16(ds, 0xa535, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    di = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x0008;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax += 0x0008;
    memoryASet16(ss, bp - 6, ax);
    push(cs);
    sub_1c0e2();
    ax = 0;
    push(ax);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0006;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 6);
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0008;
    si = ax;
    goto loc_1c1e0;
loc_1c1bc: // 1b1e:0fdc
    ax = 0x0001;
    push(ax);
    push(di);
    push(si);
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0007;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 6);
    push(ax);
    push(si);
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    si += 0x0008;
loc_1c1e0: // 1b1e:1000
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp - 4);
    ax -= 0x0008;
    if (ax >= si)
        goto loc_1c1bc;
    ax = 0x0002;
    push(ax);
    push(di);
    push(si);
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0008;
    push(ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 6);
    push(ax);
    push(si);
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = di;
    ax += 0x0008;
    si = ax;
    goto loc_1c23e;
loc_1c217: // 1b1e:1037
    ax = 0x0003;
    push(ax);
    push(si);
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    ax = 0x0005;
    push(ax);
    push(si);
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fa3e(); assert(cs == 0x1b1e);
    sp += 0x0006;
    si += 0x0008;
loc_1c23e: // 1b1e:105e
    ax = di;
    ax += memoryAGet16(ss, bp - 6);
    ax -= 0x0008;
    if (ax >= si)
        goto loc_1c217;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c250() // 1b1e:1070 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    push(di);
    push(si);
    ax = 0x0019;
    ax -= di;
    ax >>= 1;
    push(ax);
    ax = 0x0028;
    ax -= si;
    ax >>= 1;
    push(ax);
    push(cs);
    sub_1c10f();
    sp += 0x0008;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c38f() // 1b1e:11af +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0084;
    push(si);
    si = memoryAGet16(ss, bp + 12);
    push(memoryAGet16(ss, bp + 10));
    ax = bp - 132;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    memoryASet(ss, bp + si + -132, 0x00);
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ss);
    ax = bp - 132;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1b1e); // 1b1e:11dd;
    sp += 0x0008;
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 2);
    ax--;
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    ax = 0x4748;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:11f9;
    sp += 0x0004;
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c3e5() // 1b1e:1205 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0116;
    push(si);
    push(di);
    push(cs); cs = 0x1ef3; sub_1f7bf(); assert(cs == 0x1b1e);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_1c40b;
    push(memoryAGet16(ss, bp + 12));
    ax = bp - 150;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    goto loc_1c410;
loc_1c40b: // 1b1e:122b
    memoryASet(ss, bp - 150, 0x00);
loc_1c410: // 1b1e:1230
    memoryASet(ss, bp - 278, 0x00);
    ax = bp - 150;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x1b1e);
    sp += 0x0002;
    si = ax;
    ax = 0x0001;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 22, dx);
    memoryASet(ds, 0xcc45, 0x00);
    memoryASet(ds, 0xa545, 0x00);
    goto loc_1c6fe;
loc_1c44f: // 1b1e:126f
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1c468;
    push(si);
    ax = bp - 150;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1c38f();
    sp += 0x0008;
loc_1c468: // 1b1e:1288
    push(flagAsReg());
    flags.interrupts = 0;
    al = memoryAGet(ds, 0xa545);
    memoryASet(ss, bp - 11, al);
    memoryASet(ds, 0xa545, 0x00);
    al = memoryAGet(ds, 0xcc45);
    memoryASet(ss, bp - 12, al);
    memoryASet(ds, 0xcc45, 0x00);
    flagsFromReg(pop());
    al = memoryAGet(ss, bp - 11);
    ah = 0x00;
    if (ax != 0x004c)
        goto loc_1c48e;
    goto loc_1c5bf;
loc_1c48e: // 1b1e:12ae
    if ((short)ax > (short)0x004c)
        goto loc_1c4c7;
    if (ax == 0x0047)
        goto loc_1c500;
    if ((short)ax > (short)0x0047)
        goto loc_1c4af;
    if (ax != 0x0001)
        goto loc_1c49f;
    goto loc_1c549;
loc_1c49f: // 1b1e:12bf
    if (ax != 0x000e)
        goto loc_1c4a7;
    goto loc_1c55f;
loc_1c4a7: // 1b1e:12c7
    if (ax == 0x001c)
        goto loc_1c529;
    goto loc_1c5c3;
loc_1c4af: // 1b1e:12cf
    if (ax != 0x0048)
        goto loc_1c4b7;
    goto loc_1c5bf;
loc_1c4b7: // 1b1e:12d7
    if (ax != 0x0049)
        goto loc_1c4bf;
    goto loc_1c5bf;
loc_1c4bf: // 1b1e:12df
    if (ax == 0x004b)
        goto loc_1c4db;
    goto loc_1c5c3;
loc_1c4c7: // 1b1e:12e7
    ax -= 0x004d;
    bx = ax;
    if (bx <= 0x0006)
        goto loc_1c4d4;
    goto loc_1c5c3;
loc_1c4d4: // 1b1e:12f4
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 5495)); // 1b1e:12f6;
loc_1c4db: // 1b1e:12fb
    if (!si)
        goto loc_1c4e0;
    si--;
loc_1c4e0: // 1b1e:1300
    memoryASet(ss, bp - 12, 0x00);
    memoryASet16(ss, bp - 6, 0x0001);
    goto loc_1c5c3;
  // gap 20 bytes
loc_1c500: // 1b1e:1320
    si = 0;
    memoryASet(ss, bp - 12, 0x00);
    memoryASet16(ss, bp - 6, 0x0001);
    goto loc_1c5c3;
  // gap 27 bytes
loc_1c529: // 1b1e:1349
    ax = bp - 150;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    memoryASet16(ss, bp - 8, 0x0001);
    memoryASet16(ss, bp - 10, 0x0001);
    memoryASet(ss, bp - 12, 0x00);
    goto loc_1c5c3;
loc_1c549: // 1b1e:1369
    if (memoryAGet16(ss, bp + 14) == 0x0000)
        goto loc_1c559;
    memoryASet16(ss, bp - 8, 0x0001);
    memoryASet16(ss, bp - 10, 0x0000);
loc_1c559: // 1b1e:1379
    memoryASet(ss, bp - 12, 0x00);
    goto loc_1c5c3;
loc_1c55f: // 1b1e:137f
    if (!si)
        goto loc_1c583;
    ax = bp - 150;
    dx = si;
    dx += ax;
    push(dx);
    ax = bp - 151;
    dx = si;
    dx += ax;
    push(dx);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    si--;
    memoryASet16(ss, bp - 2, 0x0001);
loc_1c583: // 1b1e:13a3
    memoryASet(ss, bp - 12, 0x00);
    memoryASet16(ss, bp - 6, 0x0001);
    goto loc_1c5c3;
  // gap 49 bytes
loc_1c5bf: // 1b1e:13df
    memoryASet(ss, bp - 12, 0x00);
loc_1c5c3: // 1b1e:13e3
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_1c645;
    ax = bp - 150;
    push(ax);
    push(cs); cs = 0x01ed; sub_41dd(); assert(cs == 0x1b1e);
    sp += 0x0002;
    memoryASet16(ss, bp - 18, ax);
    ax = bp - 16;
    push(ax);
    ax = bp - 14;
    push(ax);
    push(ss);
    ax = bp - 150;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1b1e); // 1b1e:1407;
    sp += 0x0008;
    if ((char)memoryAGet(ss, bp - 12) < (char)0x20)
        goto loc_1c645;
    if ((char)memoryAGet(ss, bp - 12) > (char)0x7e)
        goto loc_1c645;
    if (memoryAGet16(ss, bp - 18) >= 0x007f)
        goto loc_1c645;
    if (memoryAGet16(ss, bp + 16) == 0x0000)
        goto loc_1c60e;
    ax = memoryAGet16(ss, bp - 18);
    if (ax >= memoryAGet16(ss, bp + 16))
        goto loc_1c645;
loc_1c60e: // 1b1e:142e
    if (memoryAGet16(ss, bp + 18) == 0x0000)
        goto loc_1c61c;
    ax = memoryAGet16(ss, bp - 14);
    if (ax >= memoryAGet16(ss, bp + 18))
        goto loc_1c645;
loc_1c61c: // 1b1e:143c
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    di = ax;
    goto loc_1c634;
loc_1c624: // 1b1e:1444
    bx = di;
    bx--;
    ax = bp - 150;
    bx += ax;
    al = memoryAGet(ds, bx);
    memoryASet(ss, bp + di + -150, al);
    di--;
loc_1c634: // 1b1e:1454
    if (di > si)
        goto loc_1c624;
    al = memoryAGet(ss, bp - 12);
    memoryASet(ss, bp + si + -150, al);
    si++;
    memoryASet16(ss, bp - 2, 0x0001);
loc_1c645: // 1b1e:1465
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1c694;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x6022, ax);
    push(ss);
    ax = bp - 278;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:147d;
    sp += 0x0004;
    ax = bp - 150;
    push(ax);
    ax = bp - 278;
    push(ax);
    push(cs); cs = 0x01ed; sub_41b9(); assert(cs == 0x1b1e);
    sp += 0x0004;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x6022, ax);
    push(ss);
    ax = bp - 150;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:14a8;
    sp += 0x0004;
    memoryASet16(ss, bp - 2, 0x0000);
loc_1c694: // 1b1e:14b4
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_1c6b7;
    memoryASet16(ss, bp - 4, 0x0000);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = dx < 0x0046;
    dx -= 0x0046;
    ax = ax - 0x0000 - flags.carry;
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 22, dx);
    memoryASet16(ss, bp - 6, 0x0000);
loc_1c6b7: // 1b1e:14d7
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = dx < memoryAGet16(ss, bp - 22);
    dx -= memoryAGet16(ss, bp - 22);
    ax = ax - memoryAGet16(ss, bp - 20) - flags.carry;
    if (stop() /*ggg9*/)
        goto loc_1c6e0;
    if (ax)
        goto loc_1c6cf;
    if (dx <= 0x0023)
        goto loc_1c6e0;
loc_1c6cf: // 1b1e:14ef
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 22, dx);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) ^ 0x0001);
loc_1c6e0: // 1b1e:1500
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1c6f9;
    push(si);
    ax = bp - 150;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1c38f();
    sp += 0x0008;
loc_1c6f9: // 1b1e:1519
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1b1e);
loc_1c6fe: // 1b1e:151e
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_1c707;
    goto loc_1c44f;
loc_1c707: // 1b1e:1527
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1c720;
    push(si);
    ax = bp - 150;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1c38f();
    sp += 0x0008;
loc_1c720: // 1b1e:1540
    if (memoryAGet16(ss, bp - 10) != 0x0000)
        goto loc_1c73f;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x6022, ax);
    push(ss);
    ax = bp - 278;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1b1e); // 1b1e:1558;
    sp += 0x0004;
loc_1c73f: // 1b1e:155f
    push(cs); cs = 0x1ef3; sub_1f7b6(); assert(cs == 0x1b1e);
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1b1e);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1b1e);
    ax = memoryAGet16(ss, bp - 10);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c765() // 1c76:0005 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xe834, 0x0000);
    ax = 0x21c5;
    dx = 0x00a2;
    memoryASet16(ds, 0xe816, ax);
    memoryASet16(ds, 0xe814, dx);
    memoryASet16(ds, 0xe81a, ax);
    memoryASet16(ds, 0xe818, dx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c784() // 1c76:0024 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xe834) == 0x0000)
        goto loc_1c7a9;
    memoryASet16(ds, 0xe834, memoryAGet16(ds, 0xe834) - 1);
    bx = memoryAGet16(ds, 0xe834);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 59418);
    dx = memoryAGet16(ds, bx + 59416);
    memoryASet16(ds, 0xe816, ax);
    memoryASet16(ds, 0xe814, dx);
loc_1c7a9: // 1c76:0049
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c7ab() // 1c76:004b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xe834) == 0x0006)
        goto loc_1c7d6;
    memoryASet16(ds, 0xe834, memoryAGet16(ds, 0xe834) + 1);
    bx = memoryAGet16(ds, 0xe834);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, bx + 59418, ax);
    memoryASet16(ds, bx + 59416, dx);
    memoryASet16(ds, 0xe816, ax);
    memoryASet16(ds, 0xe814, dx);
loc_1c7d6: // 1c76:0076
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c7d8() // 1c76:0078 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1c800;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0003;
    push(ax);
    push(cs); cs = memoryAGet16(es, bx + 12 + 2); callIndirect(cs, memoryAGet16(es, bx + 12)); assert(cs == 0x1c76); // 1c76:0095;
    sp += 0x0006;
    if (ax)
        goto loc_1c86c;
loc_1c800: // 1c76:00a0
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    si = memoryAGet16(es, bx + 2);
    if (!(si & 0x0004))
        goto loc_1c822;
    if (!(si & 0x0002))
        goto loc_1c818;
    ax = 0x0005;
    goto loc_1c81b;
loc_1c818: // 1c76:00b8
    ax = 0x0004;
loc_1c81b: // 1c76:00bb
    ax += 0x005c;
    di = ax;
    goto loc_1c858;
loc_1c822: // 1c76:00c2
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0002)
        goto loc_1c846;
    if (si & 0x0001)
        goto loc_1c846;
    if (!(si & 0x0002))
        goto loc_1c83c;
    ax = 0x0003;
    goto loc_1c83f;
loc_1c83c: // 1c76:00dc
    ax = 0x0002;
loc_1c83f: // 1c76:00df
    ax += 0x005c;
    di = ax;
    goto loc_1c858;
loc_1c846: // 1c76:00e6
    if (!(si & 0x0002))
        goto loc_1c851;
    ax = 0x0001;
    goto loc_1c853;
loc_1c851: // 1c76:00f1
    ax = 0;
loc_1c853: // 1c76:00f3
    ax += 0x005c;
    di = ax;
loc_1c858: // 1c76:00f8
    push(di);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 16));
    push(memoryAGet16(es, bx + 14));
    push(cs); cs = 0x1ef3; sub_1f9eb(); assert(cs == 0x1c76);
    sp += 0x0006;
loc_1c86c: // 1c76:010c
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c870() // 1c76:0110 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1c896;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0004;
    push(ax);
    push(cs); cs = memoryAGet16(es, bx + 12 + 2); callIndirect(cs, memoryAGet16(es, bx + 12)); assert(cs == 0x1c76); // 1c76:012b;
    sp += 0x0006;
    if (ax)
        goto loc_1c904;
loc_1c896: // 1c76:0136
    ax = 0x0008;
    push(ax);
    push(ax);
    ax = 0x009f;
    push(ax);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 16));
    ax = 0x004b;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1c7d8();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 2) & 0x0002))
        goto loc_1c8d9;
    if (memoryAGet16(es, bx + 2) & 0x0004)
        goto loc_1c8d9;
    memoryASet(ds, 0x6025, 0x02);
    goto loc_1c8de;
loc_1c8d9: // 1c76:0179
    memoryASet(ds, 0x6025, 0x0a);
loc_1c8de: // 1c76:017e
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 14);
    ax += 0x0008;
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(es, bx + 16);
    ax++;
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    push(memoryAGet16(es, bx + 6));
    switch (memoryAGet32(ds, 0x43c0))
    {
        case 0x1ef30e2c: push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0004;
    memoryASet(ds, 0x6025, 0x0f);
loc_1c904: // 1c76:01a4
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c906() // 1c76:01a6 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet(ds, 0x6025, 0x0a);
    memoryASet16(ds, 0x6020, 0x004e);
    memoryASet16(ds, 0x6022, 0x0087);
    push(ds);
    push(memoryAGet16(ds, 0x78dc));
    switch (memoryAGet32(ds, 0x43c0))
    {
        case 0x1ef30e2c: push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0004;
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ds);
    push(memoryAGet16(ds, 0x78da));
    switch (memoryAGet32(ds, 0x43bc))
    {
        case 0x1ef3078d: push(cs); cs = 0x1ef3; sub_1f6bd(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0008;
    ax = 0x00e6;
    ax -= memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0x6020, ax);
    push(ds);
    push(memoryAGet16(ds, 0x78da));
    switch (memoryAGet32(ds, 0x43c0))
    {
        case 0x1ef30e2c: push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0004;
    ax = bp - 4;
    push(ax);
    ax = bp - 2;
    push(ax);
    push(ds);
    push(memoryAGet16(ds, 0x78d8));
    switch (memoryAGet32(ds, 0x43bc))
    {
        case 0x1ef3078d: push(cs); cs = 0x1ef3; sub_1f6bd(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0008;
    ax = 0x00a0;
    ax -= memoryAGet16(ss, bp - 2);
    ax >>= 1;
    ax += 0x004a;
    memoryASet16(ds, 0x6020, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ds, 0x6022);
    ax++;
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    push(memoryAGet16(ds, 0x78d8));
    switch (memoryAGet32(ds, 0x43c0))
    {
        case 0x1ef30e2c: push(cs); cs = 0x1ef3; sub_1fd5c(); assert(cs == 0x1c76); break;
        default:
            stop();
    }
    sp += 0x0004;
    memoryASet(ds, 0x6025, 0x00);
    ax = 0x000a;
    push(ax);
    ax = 0x0085;
    push(ax);
    ax = 0x00e7;
    push(ax);
    ax = 0x004d;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c9ac() // 1c76:024c +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1c9d8;
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = memoryAGet16(es, bx + 12 + 2); callIndirect(cs, memoryAGet16(es, bx + 12)); assert(cs == 0x1c76); // 1c76:026a;
    sp += 0x0006;
    if (!ax)
        goto loc_1c9d8;
    goto loc_1cab8;
loc_1c9d8: // 1c76:0278
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_1ca13;
    ax = 0x000a;
    push(ax);
    ax = 0x0037;
    push(ax);
    ax = 0x00e7;
    push(ax);
    ax = 0x004d;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 4));
    ax = 0x0030;
    push(ax);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x1c76);
    sp += 0x0006;
loc_1ca13: // 1c76:02b3
    push(cs);
    sub_1c906();
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (ax)
        goto loc_1ca28;
    goto loc_1cab8;
loc_1ca28: // 1c76:02c8
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    ax += 0x004a;
    di = ax;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    if (!dx)
        goto loc_1ca4a;
    ax = di;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    ax = 0x0008;
    ax -= dx;
    di += ax;
loc_1ca4a: // 1c76:02ea
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    ax += 0x003c;
    si = ax;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_1ca92;
loc_1ca67: // 1c76:0307
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 2) & 0x0008))
        goto loc_1ca75;
    si += 0x0008;
loc_1ca75: // 1c76:0315
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet16(es, bx + 14, di);
    memoryASet16(es, bx + 16, si);
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(cs);
    sub_1c870();
    sp += 0x0004;
    si += 0x0008;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0012);
loc_1ca92: // 1c76:0332
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1ca67;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1cab8;
    ax = 0;
    push(ax);
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = memoryAGet16(es, bx + 12 + 2); callIndirect(cs, memoryAGet16(es, bx + 12)); assert(cs == 0x1c76); // 1c76:0351;
    sp += 0x0006;
loc_1cab8: // 1c76:0358
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1cabe() // 1c76:035e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (ax)
        goto loc_1cad6;
    if (memoryAGet16(es, bx + 4) == 0x0000)
        goto loc_1caea;
loc_1cad6: // 1c76:0376
    ax = 0x0067;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x1c76);
    sp += 0x0006;
    push(cs);
    sub_1c9ac();
loc_1caea: // 1c76:038a
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1c76);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1caf1() // 1c76:0391 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp + 12);
    ax = 0x0079;
    push(ax);
    ax = 0x0030;
    push(ax);
    ax = 0x004a;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fc59(); assert(cs == 0x1c76);
    sp += 0x0006;
    ax = 0x00a0;
    ax -= memoryAGet16(ss, bp + 6);
    ax >>= 1;
    ax += 0x004a;
    memoryASet16(ds, si, ax);
    ax = 0x0066;
    ax -= memoryAGet16(ss, bp + 8);
    ax >>= 1;
    ax += 0x0030;
    memoryASet16(ds, di, ax);
    ax = 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ds, di));
    push(memoryAGet16(ds, si));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax--;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax--;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax += memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax--;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax--;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax += memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax--;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1ff28(); assert(cs == 0x1c76);
    sp += 0x0008;
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ds, si);
    ax += memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax += memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, di);
    ax--;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1ff28(); assert(cs == 0x1c76);
    sp += 0x0008;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1cc96() // 1c76:0536 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001e;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    ax = bp - 2;
    push(ax);
    ax = bp - 6;
    push(ax);
    push(ds);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1c76); // 1c76:054d;
    sp += 0x0008;
    ax = bp - 2;
    push(ax);
    ax = bp - 8;
    push(ax);
    push(ds);
    push(memoryAGet16(ss, bp + 8));
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1c76); // 1c76:0560;
    sp += 0x0008;
    if (!di)
        goto loc_1ccde;
    ax = bp - 2;
    push(ax);
    ax = bp - 10;
    push(ax);
    push(ds);
    push(di);
    push(cs); cs = memoryAGet16(ds, 0x43bc + 2); callIndirect(cs, memoryAGet16(ds, 0x43bc)); assert(cs == 0x1c76); // 1c76:0575;
    sp += 0x0008;
    goto loc_1cce3;
loc_1ccde: // 1c76:057e
    memoryASet16(ss, bp - 10, 0x0000);
loc_1cce3: // 1c76:0583
    ax = memoryAGet16(ss, bp - 6);
    if (ax <= memoryAGet16(ss, bp - 8))
        goto loc_1ccf7;
    if (ax <= memoryAGet16(ss, bp - 10))
        goto loc_1ccf2;
    goto loc_1ccf5;
loc_1ccf2: // 1c76:0592
    ax = memoryAGet16(ss, bp - 10);
loc_1ccf5: // 1c76:0595
    goto loc_1cd04;
loc_1ccf7: // 1c76:0597
    ax = memoryAGet16(ss, bp - 8);
    if (ax <= memoryAGet16(ss, bp - 10))
        goto loc_1cd01;
    goto loc_1cd04;
loc_1cd01: // 1c76:05a1
    ax = memoryAGet16(ss, bp - 10);
loc_1cd04: // 1c76:05a4
    si = ax;
    si += 0x0007;
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 4, ax);
    if (!di)
        goto loc_1cd18;
    ax = 0x0005;
    goto loc_1cd1b;
loc_1cd18: // 1c76:05b8
    ax = 0x0004;
loc_1cd1b: // 1c76:05bb
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = pop();
    imul16(dx);
    memoryASet16(ss, bp - 2, ax);
    ax = bp - 14;
    push(ax);
    ax = bp - 12;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(si);
    push(cs);
    sub_1caf1();
    sp += 0x0008;
    memoryASet(ds, 0x6025, 0x02);
    ax = si;
    ax -= memoryAGet16(ss, bp - 6);
    ax >>= 1;
    dx = memoryAGet16(ss, bp - 12);
    dx += ax;
    memoryASet16(ds, 0x6020, dx);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 4);
    ax++;
    memoryASet16(ds, 0x6022, ax);
    push(ds);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1c76); // 1c76:05fb;
    sp += 0x0004;
    ax = memoryAGet16(ss, bp - 4);
    ax <<= 1;
    ax--;
    dx = memoryAGet16(ds, 0x6022);
    dx += ax;
    memoryASet16(ds, 0x6022, dx);
    ax = 0x000a;
    push(ax);
    push(dx);
    ax = memoryAGet16(ss, bp - 12);
    ax += si;
    ax -= 0x0003;
    push(ax);
    ax = memoryAGet16(ss, bp - 12);
    ax += 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    memoryASet16(ds, 0x6022, memoryAGet16(ds, 0x6022) + 0x0002);
    memoryASet(ds, 0x6025, 0x0a);
    ax = si;
    ax -= memoryAGet16(ss, bp - 8);
    ax >>= 1;
    dx = memoryAGet16(ss, bp - 12);
    dx += ax;
    memoryASet16(ds, 0x6020, dx);
    push(ds);
    push(memoryAGet16(ss, bp + 8));
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1c76); // 1c76:064d;
    sp += 0x0004;
    ax = memoryAGet16(ds, 0x6022);
    ax += memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x6022, ax);
    if (!di)
        goto loc_1cdda;
    ax = si;
    ax -= memoryAGet16(ss, bp - 10);
    ax >>= 1;
    dx = memoryAGet16(ss, bp - 12);
    dx += ax;
    memoryASet16(ds, 0x6020, dx);
    push(ds);
    push(di);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1c76); // 1c76:0673;
    sp += 0x0004;
loc_1cdda: // 1c76:067a
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1c76);
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
loc_1cde4: // 1c76:0684
    ax = bp - 30;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    if (memoryAGet16(ss, bp - 30) == 0x0000)
        goto loc_1cdfc;
    memoryASet(ss, bp - 15, 0x15);
    goto loc_1ce0e;
loc_1cdfc: // 1c76:069c
    if (memoryAGet16(ss, bp - 28) == 0x0000)
        goto loc_1ce08;
    memoryASet(ss, bp - 15, 0x01);
    goto loc_1ce0e;
loc_1ce08: // 1c76:06a8
    al = memoryAGet(ds, 0xa545);
    memoryASet(ss, bp - 15, al);
loc_1ce0e: // 1c76:06ae
    if (memoryAGet(ss, bp - 15) == 0x00)
        goto loc_1cde4;
loc_1ce14: // 1c76:06b4
    ax = bp - 30;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    if (memoryAGet16(ss, bp - 30) != 0x0000)
        goto loc_1ce14;
    if (memoryAGet16(ss, bp - 28) != 0x0000)
        goto loc_1ce14;
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
    push(cs);
    sub_1cabe();
    if (memoryAGet(ss, bp - 15) != 0x15)
        goto loc_1ce40;
    ax = 0x0001;
    goto loc_1ce42;
loc_1ce40: // 1c76:06e0
    ax = 0;
loc_1ce42: // 1c76:06e2
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ce48() // 1c76:06e8 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    push(si);
    push(di);
    if (memoryAGet16(ss, bp + 6) != 0x0000)
        goto loc_1ce62;
    ax = 0x4903;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1ce62: // 1c76:0702
    memoryASet16(ss, bp - 2, 0x0001);
    si = 0;
    memoryASet16(ss, bp - 6, 0x4922);
    bx = memoryAGet16(ss, bp + 6);
    bx -= 0x0002;
    if (bx > 0x0005)
        goto loc_1cee2;
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 1976)); // 1c76:071b;
  // gap 98 bytes
loc_1cee2: // 1c76:0782
    if (!si)
        goto loc_1cef6;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 4));
    push(di);
    push(cs);
    sub_1cc96();
    sp += 0x0006;
    goto loc_1cef9;
loc_1cef6: // 1c76:0796
    ax = 0x0001;
loc_1cef9: // 1c76:0799
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1cf0e;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x78d6, ax);
    memoryASet16(ds, 0x78de, 0x0001);
loc_1cf0e: // 1c76:07ae
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1cfcb() // 1c76:086b +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xc5cd) == 0x0000)
        goto loc_1cfda;
    ax = 0x4a04;
    goto loc_1cfdd;
loc_1cfda: // 1c76:087a
    ax = 0x4a13;
loc_1cfdd: // 1c76:087d
    dx = 0x2197;
    es = dx;
    memoryASet16(es, 0x0006, ax);
    if (memoryAGet16(ds, 0xc5cf) == 0x0000)
        goto loc_1cff2;
    ax = 0x4a23;
    goto loc_1cff5;
loc_1cff2: // 1c76:0892
    ax = 0x4a3a;
loc_1cff5: // 1c76:0895
    dx = 0x2197;
    es = dx;
    memoryASet16(es, 0x0018, ax);
    if (memoryAGet16(ds, 0x7a14) == 0x0000)
        goto loc_1d00a;
    ax = 0x4a52;
    goto loc_1d00d;
loc_1d00a: // 1c76:08aa
    ax = 0x4a68;
loc_1d00d: // 1c76:08ad
    dx = 0x2197;
    es = dx;
    memoryASet16(es, 0x002a, ax);
    if (memoryAGet16(ds, 0xe6e8) == 0x0000)
        goto loc_1d022;
    ax = 0x4a7f;
    goto loc_1d025;
loc_1d022: // 1c76:08c2
    ax = 0x4a97;
loc_1d025: // 1c76:08c5
    dx = 0x2197;
    es = dx;
    memoryASet16(es, 0x003c, ax);
    ax = 0x21aa;
    es = ax;
    memoryASet16(es, 0x0026, memoryAGet16(es, 0x0026) & 0xfffb);
    if (memoryAGet16(ds, 0xc5cf) == 0x0000)
        goto loc_1d048;
    es = ax;
    memoryASet16(es, 0x0026, memoryAGet16(es, 0x0026) | 0x0004);
loc_1d048: // 1c76:08e8
    ax = 0x21b9;
    es = ax;
    memoryASet16(es, 0x006e, memoryAGet16(es, 0x006e) | 0x0004);
    if (memoryAGet16(ds, 0xcc0d) == 0x0002)
        goto loc_1d061;
    if (memoryAGet16(ds, 0xcc0d) != 0x0003)
        goto loc_1d06c;
loc_1d061: // 1c76:0901
    ax = 0x21b9;
    es = ax;
    memoryASet16(es, 0x006e, memoryAGet16(es, 0x006e) & 0xfffb);
loc_1d06c: // 1c76:090c
    if (memoryAGet16(ds, 0xc643) == 0x0000)
        goto loc_1d078;
    ax = 0x4ab0;
    goto loc_1d07b;
loc_1d078: // 1c76:0918
    ax = 0x4ac8;
loc_1d07b: // 1c76:091b
    dx = 0x21b9;
    es = dx;
    memoryASet16(es, 0x0072, ax);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e07a() // 1c76:191a
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet(ds, 0x6025, 0x02);
    ax = 0x0034;
    memoryASet16(ds, 0x6022, ax);
    memoryASet16(ds, 0xa535, ax);
    memoryASet16(ds, 0x6020, 0x0050);
    ax = 0x0008;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x002a;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    push(ds);
    ax = 0x4dce;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1c76); // 1c76:1952;  1ef3:0e2c
    sp += 0x0004;
    ax = memoryAGet16(ds, 0x6020);
    memoryASet16(ds, 0xa537, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x1c76);
    sp += 0x0004;
    memoryASet16(ds, 0x6020, 0x00b6);
    ax = 0x0008;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0032;
    push(ax);
    push(memoryAGet16(ds, 0x6022));
    push(memoryAGet16(ds, 0x6020));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    push(ds);
    ax = 0x4dd4;
    push(ax);
    push(cs); cs = memoryAGet16(ds, 0x43c0 + 2); callIndirect(cs, memoryAGet16(ds, 0x43c0)); assert(cs == 0x1c76); // 1c76:1994;
    sp += 0x0004;
    ax = memoryAGet16(ds, 0x6020);
    memoryASet16(ds, 0xa537, ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(cs); cs = 0x1b1e; sub_1bf52(); assert(cs == 0x1c76);
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e111() // 1c76:19b1
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0042;
    push(si);
    push(di);
    ax = 0x0094;
    memoryASet16(ss, bp - 18, ax);
    memoryASet16(ss, bp - 16, ax);
    ax = 0;
    si = ax;
    memoryASet16(ss, bp - 40, ax);
    memoryASet16(ss, bp - 24, ax);
    memoryASet16(ss, bp - 22, ax);
    ax = 0x004e;
    memoryASet16(ss, bp - 26, ax);
    memoryASet16(ss, bp - 28, ax);
    memoryASet16(ss, bp - 30, ax);
    memoryASet16(ss, bp - 32, 0x003e);
    ax = 0;
    memoryASet16(ss, bp - 36, ax);
    memoryASet16(ss, bp - 34, ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs);
    sub_1e07a();
    sp += 0x0004;
    memoryASet16(ss, bp - 12, 0x0000);
    memoryASet16(ss, bp - 6, 0x0000);
    memoryASet16(ss, bp - 4, 0x0001);
    memoryASet16(ss, bp - 8, 0x0000);
    memoryASet16(ss, bp - 10, 0x0000);
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 46, ax);
    memoryASet16(ss, bp - 48, dx);
    goto loc_1e17b;
loc_1e17b: // 1c76:1a1b
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = dx < memoryAGet16(ss, bp - 48);
    dx -= memoryAGet16(ss, bp - 48);
    ax = ax - memoryAGet16(ss, bp - 46) - flags.carry;
    memoryASet16(ss, bp - 50, ax);
    memoryASet16(ss, bp - 52, dx);
    dx |= ax;
    if (!dx)
        goto loc_1e17b;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    memoryASet16(ss, bp - 46, ax);
    memoryASet16(ss, bp - 48, dx);
    if (memoryAGet16(ss, bp - 50) >= 0x0000)
        goto loc_1e1a8;
    goto loc_1e4a1;
loc_1e1a8: // 1c76:1a48
    if (memoryAGet16(ss, bp - 50) > 0x0000)
        goto loc_1e1b3;
    if (memoryAGet16(ss, bp - 52) > 0x0004)
        goto loc_1e1b3;
    goto loc_1e4a1;
loc_1e1b3: // 1c76:1a53
    memoryASet16(ss, bp - 50, 0x0000);
    memoryASet16(ss, bp - 52, 0x0004);
    goto loc_1e4a1;
  // gap 3 bytes
loc_1e1c3: // 1c76:1a63
    ax = bp - 66;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    if ((short)memoryAGet16(ss, bp - 62) < (short)0x0000)
        goto loc_1e1dc;
    if (memoryAGet16(ds, 0xc6dd) == 0x0000)
        goto loc_1e1e8;
loc_1e1dc: // 1c76:1a7c
    if (memoryAGet16(ss, bp - 16) <= 0x004e)
        goto loc_1e1e8;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 0x0002);
    goto loc_1e200;
loc_1e1e8: // 1c76:1a88
    if ((short)memoryAGet16(ss, bp - 62) > (short)0x0000)
        goto loc_1e1f5;
    if (memoryAGet16(ds, 0xc6e1) == 0x0000)
        goto loc_1e200;
loc_1e1f5: // 1c76:1a95
    if (memoryAGet16(ss, bp - 16) >= 0x00db)
        goto loc_1e200;
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 0x0002);
loc_1e200: // 1c76:1aa0
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1e236;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ss, bp - 42, 0x0000);
    memoryASet16(ss, bp - 44, 0x0046);
    memoryASet16(ss, bp - 38, 0x000a);
    memoryASet16(ss, bp - 4, 0x0000);
    ax = 0x0008;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp - 32));
    push(memoryAGet16(ss, bp - 30));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
loc_1e236: // 1c76:1ad6
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1e28f;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 1);
    bx = 0x0003;
    dx = 0;
    div16(bx);
    if (!dx)
        goto loc_1e28f;
    ax = memoryAGet16(ss, bp - 22);
    ax >>= 1;
    ax >>= 1;
    di = ax;
    if (di & 0x0001)
        goto loc_1e266;
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x1c76);
    ax &= 0x0001;
    di += ax;
loc_1e266: // 1c76:1b06
    ax = memoryAGet16(ss, bp - 18);
    ax += 0x0006;
    if (ax >= di)
        goto loc_1e27c;
    if (memoryAGet16(ss, bp - 18) >= 0x00db)
        goto loc_1e27c;
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) + 1);
    goto loc_1e28f;
loc_1e27c: // 1c76:1b1c
    ax = memoryAGet16(ss, bp - 18);
    ax += 0x0006;
    if (ax <= di)
        goto loc_1e28f;
    if (memoryAGet16(ss, bp - 18) <= 0x004e)
        goto loc_1e28f;
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) - 1);
loc_1e28f: // 1c76:1b2f
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_1e2d8;
    flags.carry = memoryAGet16(ss, bp - 44) < 0x0001;
    memoryASet16(ss, bp - 44, memoryAGet16(ss, bp - 44) - 0x0001);
    ax = memoryAGet16(ss, bp - 44);
    memoryASet16(ss, bp - 42, memoryAGet16(ss, bp - 42) - 0x0000 - flags.carry);
    dx = memoryAGet16(ss, bp - 42);
    ax |= dx;
    if (ax)
        goto loc_1e2d8;
    memoryASet16(ss, bp - 2, 0x0001);
    push(cs); cs = 0x1eef; sub_1ef1a(); assert(cs == 0x1c76);
    bx = 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    ax = 0x0001;
    ax -= dx;
    memoryASet16(ss, bp - 40, ax);
    si = 0x0003;
    if (memoryAGet16(ss, bp - 10) == 0x0000)
        goto loc_1e2ce;
    ax = si;
    ax = -ax;
    si = ax;
loc_1e2ce: // 1c76:1b6e
    memoryASet16(ss, bp - 22, 0x0264);
    memoryASet16(ss, bp - 24, 0x018c);
loc_1e2d8: // 1c76:1b78
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_1e2e1;
    goto loc_1e4a1;
loc_1e2e1: // 1c76:1b81
    ax = memoryAGet16(ss, bp - 22);
    ax += memoryAGet16(ss, bp - 40);
    ax >>= 1;
    ax >>= 1;
    if (ax > 0x00e4)
        goto loc_1e2ff;
    ax = memoryAGet16(ss, bp - 22);
    ax += memoryAGet16(ss, bp - 40);
    ax >>= 1;
    ax >>= 1;
    if (ax >= 0x004e)
        goto loc_1e313;
loc_1e2ff: // 1c76:1b9f
    ax = 0x0030;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 40);
    ax = -ax;
    memoryASet16(ss, bp - 40, ax);
loc_1e313: // 1c76:1bb3
    ax = memoryAGet16(ss, bp - 40);
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + ax);
    ax = memoryAGet16(ss, bp - 24);
    ax += si;
    ax >>= 1;
    ax >>= 1;
    if (ax <= 0x0089)
        goto loc_1e36f;
    memoryASet16(ss, bp - 4, 0x0001);
    memoryASet16(ss, bp - 10, 0x0000);
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
    push(memoryAGet16(ss, bp - 36));
    push(memoryAGet16(ss, bp - 34));
    push(cs);
    sub_1e07a();
    sp += 0x0004;
    if (memoryAGet16(ss, bp - 36) != 0x0015)
        goto loc_1e3c3;
    ax = 0;
    push(ax);
    ax = 0x4de4;
    push(ax);
    ax = 0x4dda;
    push(ax);
    push(cs);
    sub_1cc96();
    sp += 0x0006;
    memoryASet16(ss, bp - 8, 0x0001);
    goto loc_1e4a1;
  // gap 2 bytes
loc_1e36f: // 1c76:1c0f
    ax = memoryAGet16(ss, bp - 24);
    ax += si;
    ax >>= 1;
    ax >>= 1;
    if (ax >= 0x003e)
        goto loc_1e3c3;
    memoryASet16(ss, bp - 4, 0x0001);
    memoryASet16(ss, bp - 10, 0x0001);
    memoryASet16(ss, bp - 34, memoryAGet16(ss, bp - 34) + 1);
    ax = 0x0033;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
    push(memoryAGet16(ss, bp - 36));
    push(memoryAGet16(ss, bp - 34));
    push(cs);
    sub_1e07a();
    sp += 0x0004;
    if (memoryAGet16(ss, bp - 34) != 0x0015)
        goto loc_1e3c3;
    ax = 0;
    push(ax);
    ax = 0x4dfb;
    push(ax);
    ax = 0x4df2;
    push(ax);
    push(cs);
    sub_1cc96();
    sp += 0x0006;
    memoryASet16(ss, bp - 8, 0x0001);
    goto loc_1e4a1;
loc_1e3c3: // 1c76:1c63
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + si);
    ax = memoryAGet16(ss, bp - 22);
    ax >>= 1;
    ax >>= 1;
    di = ax;
    ax = memoryAGet16(ss, bp - 24);
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 14, ax);
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1e3e2;
    goto loc_1e4a1;
loc_1e3e2: // 1c76:1c82
    if ((short)si >= 0)
        goto loc_1e41f;
    if (memoryAGet16(ss, bp - 14) < 0x0042)
        goto loc_1e41f;
    if (memoryAGet16(ss, bp - 14) >= 0x0045)
        goto loc_1e41f;
    ax = memoryAGet16(ss, bp - 18);
    ax -= 0x0005;
    if (ax > di)
        goto loc_1e41f;
    ax = memoryAGet16(ss, bp - 18);
    ax += 0x000b;
    if (ax <= di)
        goto loc_1e41f;
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 6, 0x0001);
    ax = 0x0031;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
    goto loc_1e477;
loc_1e41f: // 1c76:1cbf
    if ((short)si <= 0)
        goto loc_1e477;
    if (memoryAGet16(ss, bp - 14) < 0x0084)
        goto loc_1e477;
    if (memoryAGet16(ss, bp - 14) >= 0x0087)
        goto loc_1e477;
    ax = memoryAGet16(ss, bp - 16);
    ax -= 0x0005;
    if (ax > di)
        goto loc_1e477;
    ax = memoryAGet16(ss, bp - 16);
    ax += 0x000b;
    if (ax <= di)
        goto loc_1e477;
    ax = si;
    ax = sar16(ax, 0x0001);
    ax = sar16(ax, 0x0001);
    if ((short)ax >= (short)0x0003)
        goto loc_1e460;
    memoryASet16(ss, bp - 38, memoryAGet16(ss, bp - 38) - 1);
    ax = memoryAGet16(ss, bp - 38);
    if (ax)
        goto loc_1e460;
    si++;
    memoryASet16(ss, bp - 38, 0x000a);
loc_1e460: // 1c76:1d00
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 20, ax);
    memoryASet16(ss, bp - 6, 0x0001);
    ax = 0x002f;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1e477: // 1c76:1d17
    if (memoryAGet16(ss, bp - 6) == 0x0000)
        goto loc_1e4a1;
    ax = si;
    ax = -ax;
    si = ax;
    ax = di;
    ax += 0x0005;
    ax -= memoryAGet16(ss, bp - 20);
    ax >>= 1;
    ax -= 0x0004;
    memoryASet16(ss, bp - 40, ax);
    if (memoryAGet16(ss, bp - 40) != 0x0000)
        goto loc_1e49c;
    memoryASet16(ss, bp - 40, memoryAGet16(ss, bp - 40) - 1);
loc_1e49c: // 1c76:1d3c
    memoryASet16(ss, bp - 6, 0x0000);
loc_1e4a1: // 1c76:1d41
    ax = memoryAGet16(ss, bp - 52);
    dx = memoryAGet16(ss, bp - 50);
    flags.carry = memoryAGet16(ss, bp - 52) < 0x0001;
    memoryASet16(ss, bp - 52, memoryAGet16(ss, bp - 52) - 0x0001);
    memoryASet16(ss, bp - 50, memoryAGet16(ss, bp - 50) - 0x0000 - flags.carry);
    ax |= dx;
    if (!ax)
        goto loc_1e4c3;
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_1e4c3;
    if (memoryAGet(ds, 0xa545) == 0x01)
        goto loc_1e4c3;
    goto loc_1e1c3;
loc_1e4c3: // 1c76:1d63
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_1e504;
    ax = 0x0008;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(ax);
    push(memoryAGet16(ss, bp - 32));
    push(memoryAGet16(ss, bp - 30));
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    memoryASet16(ss, bp - 30, di);
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 32, ax);
    if (!(di & 0x0001))
        goto loc_1e4f4;
    ax = 0x007e;
    goto loc_1e4f7;
loc_1e4f4: // 1c76:1d94
    ax = 0x007d;
loc_1e4f7: // 1c76:1d97
    push(ax);
    push(memoryAGet16(ss, bp - 14));
    push(di);
    push(cs); cs = 0x1ef3; sub_1fda5(); assert(cs == 0x1c76);
    sp += 0x0006;
loc_1e504: // 1c76:1da4
    ax = 0x0008;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0042;
    push(ax);
    ax = memoryAGet16(ss, bp - 28);
    ax -= 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 18);
    memoryASet16(ss, bp - 28, ax);
    ax = 0x007c;
    push(ax);
    ax = 0x0042;
    push(ax);
    push(memoryAGet16(ss, bp - 18));
    push(cs); cs = 0x1ef3; sub_1fda5(); assert(cs == 0x1c76);
    sp += 0x0006;
    ax = 0x0008;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0087;
    push(ax);
    ax = memoryAGet16(ss, bp - 26);
    ax -= 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fd13(); assert(cs == 0x1c76);
    sp += 0x000a;
    ax = memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 26, ax);
    ax = 0x007c;
    push(ax);
    ax = 0x0087;
    push(ax);
    push(memoryAGet16(ss, bp - 16));
    push(cs); cs = 0x1ef3; sub_1fda5(); assert(cs == 0x1c76);
    sp += 0x0006;
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1c76);
    if (memoryAGet(ds, 0xa545) == 0x01)
        goto loc_1e589;
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_1e589;
    goto loc_1e17b;
loc_1e589: // 1c76:1e29
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e594() // 1c76:1e34
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 6) == 0x0000)
        goto loc_1e5a1;
    ax = 0;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e5a1: // 1c76:1e41
    ax = 0x0067;
    push(ax);
    ax = 0;
    push(ax);
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x1c76);
    sp += 0x0006;
    ax = 0x0064;
    push(ax);
    ax = 0x0030;
    push(ax);
    ax = 0x0082;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fba9(); assert(cs == 0x1c76);
    sp += 0x0006;
    ax = 0x000a;
    push(ax);
    ax = 0x003c;
    push(ax);
    ax = 0x00e7;
    push(ax);
    ax = 0x004d;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    ax = 0x000a;
    push(ax);
    ax = 0x008f;
    push(ax);
    ax = 0x00e7;
    push(ax);
    ax = 0x004d;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1fedf(); assert(cs == 0x1c76);
    sp += 0x0008;
    push(cs);
    sub_1e111();
    ax = 0x0001;
    bp = pop();
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_1e5fe() // 1c76:1e9e +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (!ax)
        goto loc_1e652;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    goto loc_1e649;
loc_1e624: // 1c76:1ec4
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) & 0xfff8);
    ax = memoryAGet16(es, bx + 10);
    ax |= memoryAGet16(es, bx + 12);
    if (!ax)
        goto loc_1e645;
    push(memoryAGet16(es, bx + 12));
    push(memoryAGet16(es, bx + 10));
    push(cs);
    sub_1e5fe();
    sp += 0x0004;
loc_1e645: // 1c76:1ee5
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0012);
loc_1e649: // 1c76:1ee9
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1e624;
loc_1e652: // 1c76:1ef2
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e656() // 1c76:1ef6 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    cx = 0;
    goto loc_1e687;
loc_1e671: // 1c76:1f11
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 2) & 0x0001))
        goto loc_1e682;
    ax = cx;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e682: // 1c76:1f22
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0012);
    cx++;
loc_1e687: // 1c76:1f27
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1e671;
    ax = 0xffff;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e697() // 1c76:1f37 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 10);
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 16) == di)
        goto loc_1e6e1;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    push(ax);
    ax = memoryAGet16(es, bx + 16);
    bx = 0x0012;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    ax = pop();
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) & 0xfffd);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_1e6e1;
    push(memoryAGet16(ss, bp - 2));
    push(dx);
    push(cs);
    sub_1c870();
    sp += 0x0004;
loc_1e6e1: // 1c76:1f81
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    memoryASet16(es, bx + 16, di);
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    push(ax);
    ax = memoryAGet16(es, bx + 16);
    bx = 0x0012;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    ax = pop();
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ss, bp + 6);
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    push(es);
    si = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, si + 16);
    dx = 0x0012;
    imul16(dx);
    bx += ax;
    es = pop();
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) | 0x0002);
    if (memoryAGet16(ss, bp + 12) == 0x0000)
        goto loc_1e734;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_1c870();
    sp += 0x0004;
loc_1e734: // 1c76:1fd4
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e73a() // 1c76:1fda +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 12);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1e697();
    sp += 0x0008;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    si = 0;
    goto loc_1e7b8;
loc_1e76b: // 1c76:200b
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0002)
        goto loc_1e7b3;
    if (si != memoryAGet16(ss, bp + 10))
        goto loc_1e794;
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) | 0x0001);
    if (!di)
        goto loc_1e7b3;
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(cs);
    sub_1c870();
    sp += 0x0004;
    goto loc_1e7b3;
  // gap 2 bytes
loc_1e794: // 1c76:2034
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 2) & 0x0001))
        goto loc_1e7b3;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) & 0xfffe);
    if (!di)
        goto loc_1e7b3;
    push(memoryAGet16(ss, bp - 2));
    push(bx);
    push(cs);
    sub_1c870();
    sp += 0x0004;
loc_1e7b3: // 1c76:2053
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0012);
    si++;
loc_1e7b8: // 1c76:2058
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1e76b;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e7c7() // 1c76:2067 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 16);
    ax++;
    dx = 0x0012;
    imul16(dx);
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    bx += ax;
    if (memoryAGet16(es, bx) == 0x0000)
        goto loc_1e7fe;
    ax = 0x0001;
    push(ax);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 16);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0xe816));
    push(bx);
    push(cs);
    sub_1e697();
    sp += 0x0008;
loc_1e7fe: // 1c76:209e
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e800() // 1c76:20a0 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx + 16) == 0x0000)
        goto loc_1e828;
    ax = 0x0001;
    push(ax);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 16);
    ax--;
    push(ax);
    push(memoryAGet16(ds, 0xe816));
    push(bx);
    push(cs);
    sub_1e697();
    sp += 0x0008;
loc_1e828: // 1c76:20c8
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e82a() // 1c76:20ca +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x78dc, 0x4e09);
    memoryASet16(ds, 0x78da, 0x4e15);
    if (memoryAGet16(ds, 0xe834) == 0x0000)
        goto loc_1e845;
    ax = 0x4e23;
    goto loc_1e848;
loc_1e845: // 1c76:20e5
    ax = 0x4e33;
loc_1e848: // 1c76:20e8
    memoryASet16(ds, 0x78d8, ax);
    ax = 0;
    push(ax);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 16));
    push(memoryAGet16(ds, 0xe816));
    push(bx);
    push(cs);
    sub_1e697();
    sp += 0x0008;
    push(cs);
    sub_1cabe();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e868() // 1c76:2108 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ax |= memoryAGet16(ss, bp + 8);
    if (ax)
        goto loc_1e87f;
    ax = 0x4e3f;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1e87f: // 1c76:211f
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1c7ab();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1e8ad;
    ax = 0;
    push(ax);
    push(ax);
    push(ax);
    switch (memoryAGet32(es, bx + 12))
    {
        case 0x1c761e34: push(cs); cs = 0x1c76; sub_1e594(); assert(cs == 0x1c76); break;
        default:
        {
            //int x = memoryAGet16(es, bx + 12);
            stop();
        }
    }
    sp += 0x0006;
    if (!ax)
        goto loc_1e8ad;
    push(cs);
    sub_1c784();
loc_1e8ad: // 1c76:214d
    push(cs);
    sub_1e82a();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e8b3() // 1c76:2153 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    if (memoryAGet16(ds, 0xe834) != 0x0000)
        goto loc_1e8cc;
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_1ce48();
    sp += 0x0002;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e8cc: // 1c76:216c
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 8);
    ax |= memoryAGet16(es, bx + 10);
    if (!ax)
        goto loc_1e8f4;
    {int tmp1 = memoryAGet16(es, bx + 8); int tmp2 = memoryAGet16(es, bx + 8 + 2); bx = tmp1; es = tmp2; /*ggg2!!check*/};
    push(es);
    si = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, si + 16);
    dx = 0x0012;
    imul16(dx);
    bx += ax;
    es = pop();
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) & 0xfffd);
loc_1e8f4: // 1c76:2194
    push(cs);
    sub_1c784();
    push(cs);
    sub_1e82a();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e8ff() // 1c76:219f +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    push(ax);
    ax = memoryAGet16(es, bx + 16);
    bx = 0x0012;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    ax = pop();
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 4, dx);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    if (!(memoryAGet16(es, bx + 2) & 0x0004))
        goto loc_1e941;
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x1a61; sub_1b001(); assert(cs == 0x1c76);
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e941: // 1c76:21e1
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx);
    if (ax == 0x0001)
        goto loc_1e95a;
    if (ax == 0x0002)
        goto loc_1e993;
    if (ax == 0x0003)
        goto loc_1e9af;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e95a: // 1c76:21fa
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 12);
    ax |= memoryAGet16(es, bx + 14);
    if (!ax)
        goto loc_1e97d;
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0005;
    push(ax);
    push(cs); cs = memoryAGet16(es, bx + 12 + 2); callIndirect(cs, memoryAGet16(es, bx + 12)); assert(cs == 0x1c76); // 1c76:2212;
    sp += 0x0006;
    if (ax)
        goto loc_1e9c1;
loc_1e97d: // 1c76:221d
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 8));
    push(cs);
    sub_1ce48();
    sp += 0x0002;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 4 bytes
loc_1e993: // 1c76:2233
    ax = 0x0001;
    push(ax);
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 16));
    push(memoryAGet16(ds, 0xe816));
    push(bx);
    push(cs);
    sub_1e73a();
    sp += 0x0008;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1e9af: // 1c76:224f
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    push(memoryAGet16(es, bx + 12));
    push(memoryAGet16(es, bx + 10));
    push(cs);
    sub_1e868();
    sp += 0x0004;
loc_1e9c1: // 1c76:2261
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1e9c5() // 1c76:2265 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = memoryAGet16(ds, 0xc635);
    if (si != 0x0002)
        goto loc_1e9da;
    if (memoryAGet16(ds, 0xc637) == 0x0000)
        goto loc_1e9da;
    si++;
loc_1e9da: // 1c76:227a
    ax = 0;
    push(ax);
    push(si);
    ax = 0x2174;
    push(ax);
    ax = 0x005a;
    push(ax);
    push(cs);
    sub_1e73a();
    sp += 0x0008;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0xc633));
    ax = 0x217b;
    push(ax);
    ax = 0x0036;
    push(ax);
    push(cs);
    sub_1e73a();
    sp += 0x0008;
    if (memoryAGet16(ds, 0xc639) != 0x0000)
        goto loc_1ea28;
    ax = 0x2174;
    es = ax;
    memoryASet16(es, 0x0026, memoryAGet16(es, 0x0026) | 0x0004);
    es = ax;
    memoryASet16(es, 0x0038, memoryAGet16(es, 0x0038) | 0x0004);
    ax = 0x217b;
    es = ax;
    memoryASet16(es, 0x0014, memoryAGet16(es, 0x0014) | 0x0004);
loc_1ea28: // 1c76:22c8
    if (memoryAGet16(ds, 0xcc46) != 0x0000)
        goto loc_1ea3a;
    ax = 0x21b9;
    es = ax;
    memoryASet16(es, 0x004a, memoryAGet16(es, 0x004a) | 0x0004);
loc_1ea3a: // 1c76:22da
    if (memoryAGet16(ds, 0xcc48) != 0x0000)
        goto loc_1ea4c;
    ax = 0x21b9;
    es = ax;
    memoryASet16(es, 0x005c, memoryAGet16(es, 0x005c) | 0x0004);
loc_1ea4c: // 1c76:22ec
    if (memoryAGet16(ds, 0xcc46) != 0x0000)
        goto loc_1ea65;
    if (memoryAGet16(ds, 0xcc48) != 0x0000)
        goto loc_1ea65;
    ax = 0x21b9;
    es = ax;
    memoryASet16(es, 0x006e, memoryAGet16(es, 0x006e) | 0x0004);
loc_1ea65: // 1c76:2305
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_1ea71;
    ax = 0x4e5a;
    goto loc_1ea74;
loc_1ea71: // 1c76:2311
    ax = 0x4e69;
loc_1ea74: // 1c76:2314
    dx = 0x21c5;
    es = dx;
    memoryASet16(es, 0x004e, ax);
    if (memoryAGet16(ds, 0xc631) != 0x0000)
        goto loc_1ea97;
    ax = 0x21c5;
    es = ax;
    memoryASet16(es, 0x0026, memoryAGet16(es, 0x0026) | 0x0004);
    es = ax;
    memoryASet16(es, 0x005c, memoryAGet16(es, 0x005c) | 0x0004);
loc_1ea97: // 1c76:2337
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_1eaa3;
    ax = 0x0004;
    goto loc_1eaa5;
loc_1eaa3: // 1c76:2343
    ax = 0;
loc_1eaa5: // 1c76:2345
    dx = 0x21c5;
    es = dx;
    memoryASet16(es, 0x00b2, ax);
    push(cs);
    sub_1cfcb();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1eab5() // 1c76:2355 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(cs); cs = 0x1493; sub_15dfd(); assert(cs == 0x1c76);
    si = 0x0058;
    goto loc_1ead2;
loc_1eac3: // 1c76:2363
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, si, memoryAGet(es, si) | dl);
    si++;
loc_1ead2: // 1c76:2372
    if ((short)si <= (short)0x0067)
        goto loc_1eac3;
    si = 0x007c;
    goto loc_1eaeb;
loc_1eadc: // 1c76:237c
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, si, memoryAGet(es, si) | dl);
    si++;
loc_1eaeb: // 1c76:238b
    if ((short)si <= (short)0x0080)
        goto loc_1eadc;
    ax = 0x2c27;
    dl = memoryAGet(ds, 0x7aec);
    es = ax;
    memoryASet(es, 0x0004, memoryAGet(es, 0x0004) | dl);
    es = ax;
    memoryASet(es, 0x0079, memoryAGet(es, 0x0079) | dl);
    ax = 0x4e78;
    push(ax);
    push(cs); cs = 0x1493; sub_1617b(); assert(cs == 0x1c76);
    sp += 0x0002;
    push(cs); cs = 0x1493; sub_15458(); assert(cs == 0x1c76);
    memoryASet16(ds, 0xa550, 0x0001);
    ax = 0x1ef3;
    push(ax);
    ax = 0x0e2c;
    push(ax);
    ax = 0x1ef3;
    push(ax);
    ax = 0x078d;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1beba(); assert(cs == 0x1c76);
    sp += 0x0008;
    memoryASet(ds, 0x6025, 0x0f);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x1c76);
    sp += 0x0002;
    push(cs); cs = 0x1841; sub_18549(); assert(cs == 0x1c76);
    push(cs); cs = 0x1ef3; sub_1f8b1(); assert(cs == 0x1c76);
    memoryASet16(ds, 0x78d6, 0x0000);
    ax = 0x21c5;
    push(ax);
    ax = 0x00a2;
    push(ax);
    push(cs);
    sub_1e5fe();
    sp += 0x0004;
    push(cs);
    sub_1e9c5();
    push(cs);
    sub_1c765();
    push(cs);
    sub_1e82a();
    if (memoryAGet16(ds, 0xc631) == 0x0000)
        goto loc_1eb7e;
    memoryASet16(ds, 0x78e2, 0x0001);
loc_1eb7e: // 1c76:241e
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1eb86() // 1c76:2426 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    bx--;
    if (bx > 0x0006)
        goto loc_1ebc3;
    bx <<= 1;
    indirectJump(cs, memoryAGet16(cs, bx + 9330)); // 1c76:2434;
  // gap 42 bytes
loc_1ebc3: // 1c76:2463
    ax = 0x4e86;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1c76);
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ebe0() // 1c76:2480 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    ax = 0x2174;
    push(ax);
    ax = 0x005a;
    push(ax);
    push(cs);
    sub_1e656();
    sp += 0x0004;
    si = ax;
    if (si != 0x0003)
        goto loc_1ec03;
    memoryASet16(ds, 0xc637, 0x0001);
    si--;
    goto loc_1ec09;
loc_1ec03: // 1c76:24a3
    memoryASet16(ds, 0xc637, 0x0000);
loc_1ec09: // 1c76:24a9
    if (si == memoryAGet16(ds, 0xc635))
        goto loc_1ec18;
    push(si);
    push(cs); cs = 0x1a61; sub_1ad5b(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1ec18: // 1c76:24b8
    ax = 0x217b;
    push(ax);
    ax = 0x0036;
    push(ax);
    push(cs);
    sub_1e656();
    sp += 0x0004;
    si = ax;
    if (si == memoryAGet16(ds, 0xc633))
        goto loc_1ec38;
    push(ax);
    push(cs); cs = 0x1a61; sub_1ade0(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1ec38: // 1c76:24d8
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ec3b() // 1c76:24db +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1ebe0();
    if (memoryAGet16(ds, 0x78d6) == 0x0000)
        goto loc_1ec54;
    push(memoryAGet16(ds, 0x78d6));
    push(cs);
    sub_1eb86();
    sp += 0x0002;
loc_1ec54: // 1c76:24f4
    memoryASet16(ds, 0xa550, 0x0000);
    memoryASet(ds, 0x6025, 0x0f);
    if (memoryAGet16(ds, 0x474a) == 0x0000)
        goto loc_1ec75;
    ax = memoryAGet16(ds, 0xe7fa);
    ax |= memoryAGet16(ds, 0xe7fc);
    if (!ax)
        goto loc_1ec75;
    push(cs); cs = memoryAGet16(ds, 0xe7fa + 2); callIndirect(cs, memoryAGet16(ds, 0xe7fa)); assert(cs == 0x1c76); // 1c76:250f;
    goto loc_1ecc0;
loc_1ec75: // 1c76:2515
    if (memoryAGet16(ds, 0x78e0) == 0x0000)
        goto loc_1ecc0;
    if (memoryAGet16(ds, 0x7adc) == 0x0000)
        goto loc_1ec8a;
    push(cs); cs = 0x056a; sub_59c9(); assert(cs == 0x1c76);
    goto loc_1ecc0;
loc_1ec8a: // 1c76:252a
    ax = 0x0003;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1c250(); assert(cs == 0x1c76);
    sp += 0x0004;
    memoryASet(ds, 0x6025, 0x03);
    ax = 0x4ea1;
    push(ax);
    push(cs); cs = 0x1b1e; sub_1bfff(); assert(cs == 0x1c76);
    sp += 0x0002;
    memoryASet(ds, 0x6025, 0x0f);
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1c76);
    ax = 0;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1c76);
    sp += 0x0002;
loc_1ecc0: // 1c76:2560
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
    push(cs); cs = 0x1a61; sub_1b10d(); assert(cs == 0x1c76);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1ef3; sub_1f23d(); assert(cs == 0x1c76);
    sp += 0x0002;
    push(cs); cs = 0x1493; sub_15e1d(); assert(cs == 0x1c76);
    push(cs); cs = 0x1493; sub_15458(); assert(cs == 0x1c76);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ece2() // 1c76:2582 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001a;
    push(si);
    push(di);
    if (memoryAGet(ds, 0xa545) < 0x3b)
        goto loc_1ecf8;
    if (memoryAGet(ds, 0xa545) <= 0x44)
        goto loc_1ecfd;
loc_1ecf8: // 1c76:2598
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
loc_1ecfd: // 1c76:259d
    push(cs);
    sub_1eab5();
    push(cs);
    sub_1cabe();
    memoryASet16(ss, bp - 4, 0x0000);
    memoryASet16(ds, 0x78de, 0x0000);
    ax = 0x0001;
    memoryASet16(ss, bp - 2, ax);
    si = ax;
    goto loc_1eedc;
loc_1ed1b: // 1c76:25bb
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    push(ax);
    ax = memoryAGet16(es, bx + 16);
    bx = 0x0012;
    push(dx);
    imul16(bx);
    dx = pop();
    dx += ax;
    ax = pop();
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    if (!si)
        goto loc_1ed55;
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    flags.carry = (dx + 0x0023) >= 0x10000;
    dx += 0x0023;
    ax += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 6, ax);
    memoryASet16(ss, bp - 8, dx);
    si = 0;
loc_1ed55: // 1c76:25f5
    sync();
    ax = memoryAGet16(ds, 0xa53f);
    dx = memoryAGet16(ds, 0xa53d);
    if (ax < memoryAGet16(ss, bp - 6))
        goto loc_1ed92;
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_1ed68;
    if (dx < memoryAGet16(ss, bp - 8))
        goto loc_1ed92;
loc_1ed68: // 1c76:2608
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) ^ 0x0001);
    si = 0x0001;
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_1ed7d;
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) & 0xfffd);
loc_1ed7d: // 1c76:261d
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 12));
    push(cs);
    sub_1c7d8();
    sp += 0x0004;
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    memoryASet16(es, bx + 2, memoryAGet16(es, bx + 2) | 0x0002);
loc_1ed92: // 1c76:2632
    push(cs); cs = 0x1ef3; sub_1f9cb(); assert(cs == 0x1c76);
    if (memoryAGet(ds, 0xa545) != 0x00) 
        goto loc_1eda1;
    goto loc_1ee64;
loc_1eda1: // 1c76:2641
    al = memoryAGet(ds, 0xa545);
    ah = 0x00;
    if (ax == 0x003b)
        goto loc_1ede9;
    if ((short)ax > (short)0x003b)
        goto loc_1edb9;
    if (ax == 0x0001)
        goto loc_1ede0;
    if (ax == 0x001c)
        goto loc_1edd7;
    goto loc_1edf5;
loc_1edb9: // 1c76:2659
    if (ax == 0x0048)
        goto loc_1edc5;
    if (ax == 0x0050)
        goto loc_1edce;
    goto loc_1edf5;
loc_1edc5: // 1c76:2665
    push(cs);
    sub_1e800();
    si = 0x0001;
    goto loc_1edf5;
loc_1edce: // 1c76:266e
    push(cs);
    sub_1e7c7();
    si = 0x0001;
    goto loc_1edf5;
loc_1edd7: // 1c76:2677
    push(cs);
    sub_1e8ff();
    si = 0x0001;
    goto loc_1edf5;
loc_1ede0: // 1c76:2680
    push(cs);
    sub_1e8b3();
    si = 0x0001;
    goto loc_1edf5;
loc_1ede9: // 1c76:2689
    push(cs); cs = 0x0b02; sub_b9c5(); assert(cs == 0x1c76);
    push(cs);
    sub_1cabe();
    si = 0x0001;
loc_1edf5: // 1c76:2695
    if (si)
        goto loc_1ee0f;
    al = memoryAGet(ds, 0xa545);
    if (al == memoryAGet(ds, 0x3bc2))
        goto loc_1ee08;
    if (al != memoryAGet(ds, 0x3bc3))
        goto loc_1ee0f;
loc_1ee08: // 1c76:26a8
    push(cs);
    sub_1e8ff();
    si = 0x0001;
loc_1ee0f: // 1c76:26af
    if (si)
        goto loc_1ee5d;
    bx = memoryAGet16(ds, 0xe814); es = memoryAGet16(ds, 0xe814 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 10);
    dx = memoryAGet16(es, bx + 8);
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 12, dx);
    di = 0;
    goto loc_1ee54;
loc_1ee29: // 1c76:26c9
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    al = memoryAGet(es, bx + 4);
    if (al != memoryAGet(ds, 0xa545))
        goto loc_1ee4f;
    ax = 0x0001;
    push(ax);
    push(di);
    push(memoryAGet16(ds, 0xe816));
    push(memoryAGet16(ds, 0xe814));
    push(cs);
    sub_1e697();
    sp += 0x0008;
    si = 0x0001;
    goto loc_1ee5d;
loc_1ee4f: // 1c76:26ef
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0012);
    di++;
loc_1ee54: // 1c76:26f4
    bx = memoryAGet16(ss, bp - 12); es = memoryAGet16(ss, bp - 12 + 2); /*ggg2*/;
    if (memoryAGet16(es, bx) != 0x0000)
        goto loc_1ee29;
loc_1ee5d: // 1c76:26fd
    push(cs); cs = 0x164d; sub_16d78(); assert(cs == 0x1c76);
    goto loc_1eedc;
loc_1ee64: // 1c76:2704
    ax = bp - 26;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    ax = memoryAGet16(ss, bp - 20);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + ax);
    if (memoryAGet16(ss, bp - 26) == 0x0000)
        goto loc_1ee97;
loc_1ee7c: // 1c76:271c
    ax = bp - 26;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    if (memoryAGet16(ss, bp - 26) != 0x0000)
        goto loc_1ee7c;
    push(cs);
    sub_1e8ff();
    si = 0x0001;
    goto loc_1eedc;
loc_1ee97: // 1c76:2737
    if (memoryAGet16(ss, bp - 24) == 0x0000)
        goto loc_1eeb8;
loc_1ee9d: // 1c76:273d
    ax = bp - 26;
    push(ax);
    push(cs); cs = 0x164d; sub_16dc9(); assert(cs == 0x1c76);
    sp += 0x0002;
    if (memoryAGet16(ss, bp - 24) != 0x0000)
        goto loc_1ee9d;
    push(cs);
    sub_1e8b3();
    si = 0x0001;
    goto loc_1eedc;
loc_1eeb8: // 1c76:2758
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0xffd8)
        goto loc_1eecb;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 0x0028);
    push(cs);
    sub_1e800();
    si = 0x0001;
    goto loc_1eedc;
loc_1eecb: // 1c76:276b
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x0028)
        goto loc_1eedc;
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) - 0x0028);
    push(cs);
    sub_1e7c7();
    si = 0x0001;
loc_1eedc: // 1c76:277c
    if (memoryAGet16(ds, 0x78de) != 0x0000)
        goto loc_1eee6;
    goto loc_1ed1b;
loc_1eee6: // 1c76:2786
    push(cs);
    sub_1ec3b();
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1eef2() // 1eef:0002 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = 0x20c0;
    es = ax;
    ax = memoryAGet16(ss, bp + 6);
    if (ax)
        goto loc_1ef09;
    dx = 0x0000;
    goto loc_1ef11;
  // gap 1 bytes
loc_1ef09: // 1eef:0019
    ah = 0x2c;
    interrupt(0x21);
    dx &= 0x00ff;
loc_1ef11: // 1eef:0021
    memoryASet16(es, 0x0000, dx);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ef1a() // 1eef:002a +far +stackDrop2
{
    ax = 0x20c0;
    es = ax;
    bx = memoryAGet16(es, 0x0000);
    bx++;
    bx &= 0x00ff;
    memoryASet16(es, 0x0000, bx);
    al = memoryAGet(es, bx + 2);
    ah = 0;
    cs = pop();
}
void sub_1ef35() // 1ef3:0005 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    flags.direction = 0;
    memoryASet16(ds, 0xe812, 0x0000);
    si = 0x0001;
    goto loc_1ef78;
loc_1ef46: // 1ef3:0016
    ax = 0x4eae;
    push(ax);
    ax = si;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x743e);
    bx += ax;
    push(memoryAGet16(ds, bx));
    push(cs); cs = 0x1b1e; sub_1b7df(); assert(cs == 0x1ef3);
    sp += 0x0004;
    di = ax;
    if (di)
        goto loc_1ef6c;
    memoryASet16(ds, 0xe812, 0x0003);
    goto loc_1ef77;
loc_1ef6c: // 1ef3:003c
    if (di != 0x0001)
        goto loc_1ef77;
    memoryASet16(ds, 0x7ade, 0x0001);
loc_1ef77: // 1ef3:0047
    si++;
loc_1ef78: // 1ef3:0048
    if ((short)si < (short)memoryAGet16(ds, 0x743c))
        goto loc_1ef46;
    if (memoryAGet16(ds, 0xe812) != 0x0000)
        goto loc_1ef8d;
    push(cs); cs = 0x1ff7; sub_20a8a(); assert(cs == 0x1ef3);
    memoryASet16(ds, 0xe812, ax);
loc_1ef8d: // 1ef3:005d
    memoryASet16(ds, 0xe6ee, 0x0002);
    if (memoryAGet16(ds, 0xe812) == 0x0003)
        goto loc_1efad;
    if (memoryAGet16(ds, 0xe812) == 0x0005)
        goto loc_1efad;
    ax = 0x4f4d;
    push(ax);
    push(cs); cs = 0x056a; sub_58cf(); assert(cs == 0x1ef3);
    sp += 0x0002;
loc_1efad: // 1ef3:007d
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    memoryASet16(ds, 0xe844, 0x0000);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1efc0() // 1ef3:0090 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(cs);
    sub_1efdc();
    sp += 0x0002;
    ax = 0x0050;
    push(ax);
    push(cs);
    sub_1f20d();
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1efdc() // 1ef3:00ac +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (!ax)
        goto loc_1eff2;
    if (ax == 0x0001)
        goto loc_1eff9;
    if (ax == 0x0002)
        goto loc_1f000;
    goto loc_1f00b;
loc_1eff2: // 1ef3:00c2
    ax = 0x0003;
    interrupt(0x10);
    goto loc_1f00b;
loc_1eff9: // 1ef3:00c9
    ax = 0x0004;
    interrupt(0x10);
    goto loc_1f00b;
loc_1f000: // 1ef3:00d0
    ax = 0x000d;
    interrupt(0x10);
    memoryASet16(ds, 0xa7ae, 0xa000);
loc_1f00b: // 1ef3:00db
    ax = 0x0040;
    push(ax);
    push(cs);
    sub_1f20d();
    sp += 0x0002;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f019() // 1ef3:00e9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = memoryAGet16(ss, bp + 6);
    ah = 0x10;
    al = 0x01;
    bh = dl;
    interrupt(0x10);
    memoryASet16(ds, 0xa54e, dx);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f082() // 1ef3:0152 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ds, 0xa54e);
    memoryASet(ds, 0x4ef7, al);
    ax = ds;
    es = ax;
    dx = 0x4ee7;
    ax = 0x1002;
    interrupt(0x10);
    memoryASet16(ds, 0xc757, 0x0000);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f09f() // 1ef3:016f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    si = 0x0003;
    goto loc_1f0e5;
loc_1f0a8: // 1ef3:0178
    ax = si;
    dx = 0x0011;
    imul16(dx);
    dl = memoryAGet(ds, 0xa54e);
    bx = ax;
    memoryASet(ds, bx + 20164, dl);
    ax = si;
    dx = 0x0011;
    imul16(dx);
    ax += 0x4eb4;
    ax = ds;
    es = ax;
    ax = si;
    dx = 0x0011;
    imul16(dx);
    ax += 0x4eb4;
    dx = ax;
    ax = 0x1002;
    interrupt(0x10);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x1ef3);
    sp += 0x0002;
    si--;
loc_1f0e5: // 1ef3:01b5
    if ((short)si >= 0)
        goto loc_1f0a8;
    memoryASet16(ds, 0xc757, 0x0001);
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f20d() // 1ef3:02dd +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    dx = 0x03d4;
    al = 0x13;
    ah = memoryAGet(ss, bp + 6);
    ah >>= 1;
    out16(dx, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0xa7ac, ax);
    si = 0;
    cx = 0;
    goto loc_1f234;
loc_1f228: // 1ef3:02f8
    bx = cx;
    bx <<= 1;
    memoryASet16(ds, bx + 42324, si);
    si += memoryAGet16(ss, bp + 6);
    cx++;
loc_1f234: // 1ef3:0304
    if ((short)cx < (short)0x012c)
        goto loc_1f228;
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f23d() // 1ef3:030d +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x08;
    ax <<= cl;
    ax &= memoryAGet16(ss, bp + 6);
    memoryASet16(ss, bp + 6, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1ff7; sub_20a43(); assert(cs == 0x1ef3);
    sp += 0x0002;
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ds, 0xa7b2);
    di &= 0xfffe;
    cx = 0x8000;
    ax = memoryAGet16(ss, bp + 6);
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f28c() // 1ef3:035c +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10);
    ax = si;
    ax -= 0x0006;
    di = ax;
    bx = si;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 2, ax);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    ax += memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 4, ax);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa552);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 6, ax);
    bx = di;
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 8, ax);
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 2));
    push(cs); cs = 0x1ff7; sub_2044f(); assert(cs == 0x1ef3);
    sp += 0x0008;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f4ad() // 1ef3:057d +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 4, ax);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    bx = memoryAGet16(ss, bp + 6);
    bx &= 0x0007;
    al = memoryAGet(ds, bx + 20267);
    ah = 0x00;
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp + 8);
    bx &= 0x0007;
    al = memoryAGet(ds, bx + 20275);
    ah = 0x00;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= si;
    ax--;
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    ax += si;
    memoryASet16(ss, bp - 2, ax);
    if (si != memoryAGet16(ss, bp - 4))
        goto loc_1f539;
    ax = memoryAGet16(ss, bp - 8);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) & ax);
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ss, bp - 2);
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(ss, bp - 6);
    out16(dx, ax);
    al = memoryAGet(ss, bp + 12);
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    goto loc_1f566;
loc_1f539: // 1ef3:0609
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ss, bp - 2);
    dx = 0x03ce;
    bh = memoryAGet(ss, bp + 12);
    al = 0x08;
    ah = memoryAGet(ss, bp - 6);
    out16(dx, ax);
    al = bh;
    bl = memoryAGet(es, di);
    stosb<ES_DI>(al);
    ax = 0xff08;
    out16(dx, ax);
    al = bh;
    cx = memoryAGet16(ss, bp - 10);
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    al = 0x08;
    ah = memoryAGet(ss, bp - 8);
    out16(dx, ax);
    tl = memoryAGet(es, di); memoryASet(es, di, bh); bh = tl;
loc_1f566: // 1ef3:0636
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f57e() // 1ef3:064e +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp + 10);
    ax--;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ss, bp - 8, ax);
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    flags.interrupts = 1;
    bx = memoryAGet16(ss, bp + 6);
    bx &= 0x0007;
    al = memoryAGet(ds, bx + 20267);
    ah = 0x00;
    memoryASet16(ss, bp - 10, ax);
    bx = memoryAGet16(ss, bp - 4);
    bx &= 0x0007;
    al = memoryAGet(ds, bx + 20275);
    ah = 0x00;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 6);
    ax--;
    memoryASet16(ss, bp - 14, ax);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    ax += memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 6);
    if (ax != memoryAGet16(ss, bp - 8))
        goto loc_1f627;
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 10, memoryAGet16(ss, bp - 10) & ax);
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ss, bp - 2);
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(ss, bp - 10);
    out16(dx, ax);
    ah = memoryAGet(ss, bp + 14);
    dx = memoryAGet16(ds, 0xa7ac);
loc_1f619: // 1ef3:06e9
    al = ah;
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di += dx;
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) - 1);
    if (memoryAGet16(ss, bp + 12))
        goto loc_1f619;
    goto loc_1f665;
loc_1f627: // 1ef3:06f7
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ss, bp - 2);
    bh = memoryAGet(ss, bp + 14);
    dx = 0x03ce;
    si = memoryAGet16(ds, 0xa7ac);
    si -= memoryAGet16(ss, bp - 14);
    si--;
loc_1f63c: // 1ef3:070c
    al = 0x08;
    ah = memoryAGet(ss, bp - 10);
    out16(dx, ax);
    al = bh;
    bl = memoryAGet(es, di);
    stosb<ES_DI>(al);
    ax = 0xff08;
    out16(dx, ax);
    al = bh;
    cx = memoryAGet16(ss, bp - 14);
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    al = 0x08;
    ah = memoryAGet(ss, bp - 12);
    out16(dx, ax);
    al = bh;
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di += si;
    memoryASet16(ss, bp + 12, memoryAGet16(ss, bp + 12) - 1);
    if (memoryAGet16(ss, bp + 12))
        goto loc_1f63c;
loc_1f665: // 1ef3:0735
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    flags.interrupts = 1;
    flags.interrupts = 0;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    flags.interrupts = 1;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f67d() // 1ef3:074d +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10);
    di = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ss, bp + 14);
    es = dx;
    ax = memoryAGet16(es, 0x0000);
    memoryASet16(ds, di, ax);
    memoryASet16(ds, si, 0x0000);
    goto loc_1f6b0;
loc_1f699: // 1ef3:0769
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(es, bx);
    ah = 0x00;
    es = dx;
    bx = ax;
    al = memoryAGet(es, bx + 514);
    cbw();
    memoryASet16(ds, si, memoryAGet16(ds, si) + ax);
    memoryASet16(ss, bp + 6, memoryAGet16(ss, bp + 6) + 1);
loc_1f6b0: // 1ef3:0780
    bx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    if (memoryAGet(es, bx) != 0x00)
        goto loc_1f699;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f6bd() // 1ef3:078d +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xa550);
    bx += 0x0003;
    bx <<= 1;
    push(memoryAGet16(ds, bx + 31469));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1f67d();
    sp += 0x000a;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f707() // 1ef3:07d7 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ds, 0xe83a);
    bx += memoryAGet16(ds, 0xc759);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    dx = memoryAGet16(ds, 0xe83c);
    dx += memoryAGet16(ds, 0xc75b);
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    ax += dx;
    memoryASet16(ds, 0xe836, ax);
    push(memoryAGet16(ds, 0xe83e));
    push(memoryAGet16(ds, 0xe840));
    push(memoryAGet16(ds, 0xe838));
    push(ax);
    push(cs); cs = 0x1ff7; sub_2050f(); assert(cs == 0x1ef3);
    sp += 0x0008;
    push(memoryAGet16(ds, 0xe842));
    push(memoryAGet16(ds, 0xe83a));
    push(memoryAGet16(ds, 0xe83c));
    push(cs);
    sub_1fda5();
    sp += 0x0006;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f759() // 1ef3:0829 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ds, 0xe83e));
    push(memoryAGet16(ds, 0xe840));
    push(memoryAGet16(ds, 0xe836));
    push(memoryAGet16(ds, 0xe838));
    push(cs); cs = 0x1ff7; sub_2044f(); assert(cs == 0x1ef3);
    sp += 0x0008;
    ax = memoryAGet16(ds, 0xe83a);
    ax += memoryAGet16(ds, 0xc759);
    ax += memoryAGet16(ds, 0xe83e);
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xe840);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx = memoryAGet16(ds, 0xe83c);
    dx += memoryAGet16(ds, 0xc75b);
    dx &= 0xfff8;
    dx += ax;
    dx--;
    push(dx);
    ax = memoryAGet16(ds, 0xe83a);
    ax += memoryAGet16(ds, 0xc759);
    push(ax);
    ax = memoryAGet16(ds, 0xe83c);
    ax += memoryAGet16(ds, 0xc75b);
    ax &= 0xfff8;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f7b6() // 1ef3:0886 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xe844, memoryAGet16(ds, 0xe844) + 1);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f7bf() // 1ef3:088f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xe844, memoryAGet16(ds, 0xe844) - 1);
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f85b() // 1ef3:092b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xe842) == 0x0000)
        goto loc_1f8af;
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0xe842);
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1ef3);
    sp += 0x0004;
    ax = 0x0003;
    push(ax);
    ax = memoryAGet16(ds, 0xe842);
    ax <<= 1;
    ax += 0x7aed;
    push(ax);
    push(cs); cs = 0x174b; sub_17f02(); assert(cs == 0x1ef3);
    sp += 0x0004;
    ax = 0;
    push(ax);
    ax = 0xe838;
    push(ax);
    push(cs); cs = 0x174b; sub_17f85(); assert(cs == 0x1ef3);
    sp += 0x0004;
    ax = 0xe838;
    push(ax);
    push(cs); cs = 0x174b; sub_17e37(); assert(cs == 0x1ef3);
    sp += 0x0002;
    memoryASet16(ds, 0xe842, 0x0000);
loc_1f8af: // 1ef3:097f
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f8b1() // 1ef3:0981 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0xa7b2);
    ax += memoryAGet16(ds, 0xa7b0);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2074a(); assert(cs == 0x1ef3);
    sp += 0x0004;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f8c9() // 1ef3:0999 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x00d0;
    push(ax);
    ax = 0x0054;
    push(ax);
    push(memoryAGet16(ds, 0xa7b4));
    push(memoryAGet16(ds, 0xa7b2));
    push(cs); cs = 0x1ff7; sub_20405(); assert(cs == 0x1ef3);
    sp += 0x0008;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f8eb() // 1ef3:09bb +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000c;
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 6);
    cl = 0x04;
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 12);
    ax = sar16(ax, cl);
    memoryASet16(ss, bp - 10, ax);
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0000)
        goto loc_1f922;
    memoryASet16(ss, bp - 4, 0x0000);
    goto loc_1f930;
loc_1f922: // 1ef3:09f2
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x0015)
        goto loc_1f930;
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1f930: // 1ef3:0a00
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0000)
        goto loc_1f93d;
    memoryASet16(ss, bp - 6, 0x0000);
    goto loc_1f94b;
loc_1f93d: // 1ef3:0a0d
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x000e)
        goto loc_1f94b;
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1f94b: // 1ef3:0a1b
    if ((short)memoryAGet16(ss, bp - 8) >= (short)0x0000)
        goto loc_1f959;
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1f959: // 1ef3:0a29
    if ((short)memoryAGet16(ss, bp - 8) < (short)0x0015)
        goto loc_1f964;
    memoryASet16(ss, bp - 8, 0x0014);
loc_1f964: // 1ef3:0a34
    if ((short)memoryAGet16(ss, bp - 10) >= (short)0x0000)
        goto loc_1f972;
    ax = 0;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_1f972: // 1ef3:0a42
    if ((short)memoryAGet16(ss, bp - 10) < (short)0x000e)
        goto loc_1f97d;
    memoryASet16(ss, bp - 10, 0x000d);
loc_1f97d: // 1ef3:0a4d
    bx = memoryAGet16(ss, bp - 6);
    bx <<= 1;
    ax = memoryAGet16(ds, 0xe6d8);
    ax += memoryAGet16(ds, bx + 57836);
    ax += memoryAGet16(ss, bp - 4);
    si = ax;
    ax = memoryAGet16(ss, bp - 8);
    ax -= memoryAGet16(ss, bp - 4);
    dx = 0x0016;
    dx -= ax;
    dx--;
    memoryASet16(ss, bp - 12, dx);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ss, bp - 2, ax);
    goto loc_1f9ba;
loc_1f9a5: // 1ef3:0a75
    di = memoryAGet16(ss, bp - 4);
    goto loc_1f9af;
loc_1f9aa: // 1ef3:0a7a
    memoryASet(ds, si, 0x01);
    si++;
    di++;
loc_1f9af: // 1ef3:0a7f
    if ((short)di <= (short)memoryAGet16(ss, bp - 8))
        goto loc_1f9aa;
    si += memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1f9ba: // 1ef3:0a8a
    ax = memoryAGet16(ss, bp - 2);
    if ((short)ax <= (short)memoryAGet16(ss, bp - 10))
        goto loc_1f9a5;
    ax = 0x0001;
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f9cb() // 1ef3:0a9b +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ds, 0xe844) <= (short)0x0000)
        goto loc_1f9d9;
    push(cs);
    sub_1f707();
loc_1f9d9: // 1ef3:0aa9
    push(cs); cs = 0x1ff7; sub_2054a(); assert(cs == 0x1ef3);
    if ((short)memoryAGet16(ds, 0xe844) <= (short)0x0000)
        goto loc_1f9e9;
    push(cs);
    sub_1f759();
loc_1f9e9: // 1ef3:0ab9
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f9eb() // 1ef3:0abb +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    ax += 0x0007;
    push(ax);
    ax = si;
    ax &= 0xfff8;
    ax += 0x0007;
    push(ax);
    push(di);
    ax = si;
    ax &= 0xfff8;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fa3a;
    push(memoryAGet16(ss, bp + 10));
    push(di);
    ax = si;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    push(ax);
    push(cs); cs = 0x1ff7; sub_2001f(); assert(cs == 0x1ef3);
    sp += 0x0006;
loc_1fa3a: // 1ef3:0b0a
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fa3e() // 1ef3:0b0e +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    ax = si;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 2, ax);
    ax = di;
    ax += 0x0007;
    push(ax);
    ax = si;
    ax &= 0xfff8;
    ax += 0x0007;
    push(ax);
    push(di);
    ax = si;
    ax &= 0xfff8;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fab5;
    ax = 0x0008;
    push(ax);
    push(ax);
    ax = 0x0001;
    push(ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0028;
    imul16(dx);
    push(ax);
    push(memoryAGet16(ds, 0x7f01));
    push(cs); cs = 0x1ff7; sub_20085(); assert(cs == 0x1ef3);
    sp += 0x000c;
loc_1fab5: // 1ef3:0b85
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fba9() // 1ef3:0c79 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0xfffa;
    memoryASet16(ss, bp - 2, ax);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    bx = 0x0008;
    ax = si;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    si = ax;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 4, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    ax += si;
    ax += memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xa552);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 10, ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 10);
    ax--;
    push(ax);
    ax = si;
    ax += memoryAGet16(ss, bp - 8);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax--;
    push(ax);
    push(di);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fc53;
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x1ff7; sub_2044f(); assert(cs == 0x1ef3);
    sp += 0x0008;
loc_1fc53: // 1ef3:0d23
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fc59() // 1ef3:0d29 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0xff87;
    memoryASet16(ss, bp - 2, ax);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    bx = 0x0008;
    ax = si;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    si = ax;
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 4, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 42324);
    ax += si;
    ax += memoryAGet16(ds, 0xa7b4);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    es = memoryAGet16(ds, 0xcbab);
    ax = memoryAGet16(es, bx);
    memoryASet16(ss, bp - 8, ax);
    bx = memoryAGet16(ss, bp - 2);
    bx <<= 1;
    bx <<= 1;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 10, ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 10);
    ax--;
    push(ax);
    ax = si;
    ax += memoryAGet16(ss, bp - 8);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax--;
    push(ax);
    push(di);
    ax = si;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fd0d;
    ax = memoryAGet16(ss, bp - 8);
    imul16(memoryAGet16(ss, bp - 10));
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 8));
    push(memoryAGet16(ss, bp - 6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x1ff7; sub_20085(); assert(cs == 0x1ef3);
    sp += 0x000c;
loc_1fd0d: // 1ef3:0ddd
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fd13() // 1ef3:0de3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    ax += memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    ax = si;
    ax += memoryAGet16(ss, bp + 10);
    push(ax);
    push(di);
    push(si);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fd58;
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(di);
    push(si);
    push(cs);
    sub_1f57e();
    sp += 0x000a;
loc_1fd58: // 1ef3:0e28
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fd5c() // 1ef3:0e2c +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    ax = memoryAGet16(ds, 0x6020);
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = memoryAGet16(ds, 0x6022);
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x1ff7; sub_20929(); assert(cs == 0x1ef3);
    sp += 0x0004;
    ax = di;
    ax += memoryAGet16(ds, 0x666e);
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0x666c);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx = si;
    dx += ax;
    dx--;
    push(dx);
    push(di);
    push(si);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fda5() // 1ef3:0e75 +nearfar +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000e;
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x0012;
    imul16(dx);
    ax += 0xf748;
    dx = memoryAGet16(ds, 0xc755);
    memoryASet16(ss, bp - 2, dx);
    memoryASet16(ss, bp - 4, ax);
    bx = memoryAGet16(ss, bp + 10);
    bx <<= 1;
    ax = memoryAGet16(ds, bx + 31469);
    memoryASet16(ss, bp - 6, ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 6);
    cl = 0x04;
    ax = sar16(ax, cl);
    di += ax;
    ax = memoryAGet16(es, bx + 4);
    ax = sar16(ax, cl);
    si += ax;
    ax = si;
    ax &= 0x0007;
    bx = 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 10, ax);
    bx = di;
    bx <<= 1;
    ax = memoryAGet16(ds, 0xa7b4);
    ax += memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, bp - 8, ax);
    if ((short)si < 0)
        goto loc_1fe26;
    ax = si;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + ax);
    goto loc_1fe32;
loc_1fe26: // 1ef3:0ef6
    ax = si;
    ax++;
    bx = 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(bx);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + ax);
loc_1fe32: // 1ef3:0f02
    es = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    ax = memoryAGet16(es, bx + 16);
    memoryASet16(ss, bp - 12, ax);
    bx = memoryAGet16(ss, bp - 4); es = memoryAGet16(ss, bp - 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, bx + 2);
    memoryASet16(ss, bp - 14, ax);
    ax = di;
    ax += memoryAGet16(ss, bp - 14);
    ax--;
    push(ax);
    ax = si;
    ax &= 0xfff8;
    dx = memoryAGet16(ss, bp - 12);
    dx <<= 1;
    dx <<= 1;
    dx <<= 1;
    ax += dx;
    ax--;
    push(ax);
    push(di);
    ax = si;
    ax &= 0xfff8;
    push(ax);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1fe9e;
    es = memoryAGet16(ss, bp - 6);
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    push(memoryAGet16(es, bx + 8));
    push(memoryAGet16(ss, bp - 14));
    push(memoryAGet16(ss, bp - 12));
    push(memoryAGet16(ss, bp - 8));
    bx = memoryAGet16(ss, bp - 10);
    bx <<= 1;
    push(memoryAGet16(es, bx));
    push(memoryAGet16(ss, bp - 6));
    push(cs); cs = 0x1ff7; sub_20085(); assert(cs == 0x1ef3);
    sp += 0x000c;
loc_1fe9e: // 1ef3:0f6e
    di = pop();
    si = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1fedf() // 1ef3:0faf +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 10);
    ax = di;
    ax += memoryAGet16(ds, 0xc75b);
    di = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += memoryAGet16(ds, 0xc75b);
    memoryASet16(ss, bp + 8, ax);
    ax = si;
    ax += memoryAGet16(ds, 0xc759);
    si = ax;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(ax);
    push(di);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1ff24;
    push(memoryAGet16(ss, bp + 12));
    push(si);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs);
    sub_1f4ad();
    sp += 0x0008;
loc_1ff24: // 1ef3:0ff4
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ff28() // 1ef3:0ff8 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    di = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 10);
    ax = si;
    ax += memoryAGet16(ds, 0xc75b);
    si = ax;
    ax = di;
    ax += memoryAGet16(ds, 0xc759);
    di = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += memoryAGet16(ds, 0xc759);
    memoryASet16(ss, bp + 8, ax);
    push(ax);
    push(si);
    push(di);
    push(si);
    push(cs);
    sub_1f8eb();
    sp += 0x0008;
    if (!ax)
        goto loc_1ff6c;
    push(memoryAGet16(ss, bp + 12));
    push(si);
    push(memoryAGet16(ss, bp + 8));
    push(di);
    push(cs); cs = 0x1ff7; sub_1ffbf(); assert(cs == 0x1ef3);
    sp += 0x0008;
loc_1ff6c: // 1ef3:103c
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ff70() // 1ff7:0000 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    di = memoryAGet16(ds, 0xa7b4);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    di += memoryAGet16(ds, bx + 42324);
    bx = memoryAGet16(ss, bp + 6);
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    di += ax;
    bx &= 0x0007;
    ah = memoryAGet(ds, bx + 24546);
    al = 0x08;
    out16(dx, ax);
    bl = memoryAGet(ss, bp + 10);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    dx = 0x03ce;
    ah = 0xff;
    out16(dx, ax);
    ax = 0x0005;
    out16(dx, ax);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ffbf() // 1ff7:004f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    di = memoryAGet16(ds, 0xa7b4);
    bx = memoryAGet16(ss, bp + 6);
    bx <<= 1;
    di += memoryAGet16(ds, bx + 42324);
    bx = memoryAGet16(ss, bp + 10);
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    di += ax;
    bx &= 0x0007;
    ah = memoryAGet(ds, bx + 24546);
    al = 0x08;
    out16(dx, ax);
    cx = memoryAGet16(ss, bp + 8);
    cx -= memoryAGet16(ss, bp + 6);
    cx++;
    bh = memoryAGet(ss, bp + 12);
    dx = memoryAGet16(ds, 0xa7ac);
loc_20008: // 1ff7:0098
    bl = bh;
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    di += dx;
    if (--cx)
        goto loc_20008;
    dx = 0x03ce;
    ah = 0xff;
    out16(dx, ax);
    ax = 0x0005;
    out16(dx, ax);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2001f() // 1ff7:00af +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ds, 0xa7b4);
    di += memoryAGet16(ss, bp + 6);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    di += memoryAGet16(ds, bx + 42324);
    memoryASet16(ss, 0x4fce, di);
    bx = memoryAGet16(ds, 0xa7ac);
    bx--;
    si = memoryAGet16(ss, bp + 10);
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si <<= 1;
    si <<= 1;
    ds = memoryAGet16(ds, 0x7eff);
    cx = 0x0004;
    ah = 0x01;
    dx = 0x03c4;
    al = 0x02;
loc_2005d: // 1ff7:00ed
    out16(dx, ax);
    ah <<= 1;
    di = memoryAGet16(ss, 0x4fce);
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    di += bx;
    movsb<ES_DI, DS_SI>();
    if (--cx)
        goto loc_2005d;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20085() // 1ff7:0115 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    memoryASet(ds, 0x4fcc, 0x01);
    memoryASet(ds, 0x4fcd, 0x00);
    di = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ds, 0xa7ac);
    dx -= memoryAGet16(ss, bp + 12);
    memoryASet16(ds, 0x4fd0, dx);
    bx = memoryAGet16(ss, bp + 16);
    if (di <= 0x000a)
        goto loc_200b7;
    memoryASet16(ds, 0x6016, 0x01a0);
    goto loc_200c7;
  // gap 1 bytes
loc_200b7: // 1ff7:0147
    cx = memoryAGet16(ss, bp + 10);
    flags.carry = cx & 1;
    cx >>= 1;
    di = rcl16(di, 0x0001);
    di <<= 1;
    ax = memoryAGet16(ds, di + 24554);
    memoryASet16(ds, 0x6016, ax);
loc_200c7: // 1ff7:0157
    ds = memoryAGet16(ss, bp + 6);
loc_200ca: // 1ff7:015a
    dx = 0x03c4;
    al = 0x02;
    ah = memoryAGet(ss, 0x4fcc);
    out16(dx, ax);
    dx = 0x03ce;
    al = 0x04;
    ah = memoryAGet(ss, 0x4fcd);
    out16(dx, ax);
    si = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 10);
    cx = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, 0x4fd0);
    switch (memoryAGet16(ss, 0x6016))
    {
        case 0x01ba: goto loc_2012a;
        case 0x01a0: goto loc_20110;
        default:
            stop();
    }
loc_200f3: // 1ff7:0183
    bx += memoryAGet16(ss, bp + 16);
    memoryASet(ss, 0x4fcd, memoryAGet(ss, 0x4fcd) + 1);
    memoryASet(ss, 0x4fcc, memoryAGet(ss, 0x4fcc) << 1);
    if (memoryAGet(ss, 0x4fcc) != 0x10)
        goto loc_200ca;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_20110: // 1ff7:01a0
    dx = cx;
loc_20112: // 1ff7:01a2
    cx = memoryAGet16(ss, bp + 12);
loc_20115: // 1ff7:01a5
    al = memoryAGet(es, di);
    al &= memoryAGet(ds, si);
    al |= memoryAGet(ds, bx + si);
    si++;
    stosb<ES_DI>(al);
    if (--cx)
        goto loc_20115;
    di += memoryAGet16(ss, 0x4fd0);
    dx--;
    if (dx)
        goto loc_20112;
    goto loc_200f3;
loc_2012a: // 1ff7:01ba
    al = lodsb<DS_SI>();
    al &= memoryAGet(es, di);
    al |= memoryAGet(ds, bx + si + -1);
    stosb<ES_DI>(al);
    di += dx;
    if (--cx)
        goto loc_2012a;
    goto loc_200f3;
}
void sub_203b9() // 1ff7:0449 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x1003;
    out16(dx, ax);
    es = memoryAGet16(ds, 0xa7ae);
    ax = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(ds, 0xa7ac);
    dx -= ax;
    ds = memoryAGet16(ss, bp + 6);
    si = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ss, bp + 10);
    bx = memoryAGet16(ss, bp + 14);
loc_203e5: // 1ff7:0475
    cx = memoryAGet16(ss, bp + 12);
loc_203e8: // 1ff7:0478
    al = lodsb<DS_SI>();
    al = ~al;
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di++;
    if (--cx)
        goto loc_203e8;
    di += dx;
    bx--;
    if (bx)
        goto loc_203e5;
    dx = 0x03ce;
    ax = 0x0003;
    out16(dx, ax);
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20405() // 1ff7:0495 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(flagAsReg());
    flags.interrupts = 0;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0105;
    out16(dx, ax);
    flagsFromReg(pop());
    bx = memoryAGet16(ds, 0xa7ac);
    bx -= memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, 0xa7ae);
    es = ax;
    ds = ax;
    si = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 10);
loc_20435: // 1ff7:04c5
    cx = ax;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += bx;
    di += bx;
    dx--;
    if (dx)
        goto loc_20435;
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
}
void sub_2044f() // 1ff7:04df +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    bx = memoryAGet16(ds, 0xa7ac);
    bx -= memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ss, bp + 6);
    si = 0;
    di = 0;
    flags.carry = memoryAGet16(ss, bp + 10) & 1;
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) >> 1);
    di = rcl16(di, 0x0001);
    ax = memoryAGet16(ss, bp + 8);
    flags.carry = ax & 1;
    ax >>= 1;
    di = rcl16(di, 0x0001);
    di <<= 1;
    ax = 0x0102;
    switch (di)
    {
        case 0: goto loc_2047c;
        case 2: goto loc_204c3;
        case 4: goto loc_2049f;
        case 6: goto loc_204eb;
        default:
            stop();
    }
loc_2047c: // 1ff7:050c
    dx = 0x03c4;
    out16(dx, ax);
    di = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 12);
loc_20486: // 1ff7:0516
    cx = memoryAGet16(ss, bp + 10);
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    di += bx;
    dx--;
    if (dx)
        goto loc_20486;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_2047c;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_2049f: // 1ff7:052f
    dx = 0x03c4;
    out16(dx, ax);
    di = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 12);
loc_204a9: // 1ff7:0539
    cx = memoryAGet16(ss, bp + 10);
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    di += bx;
    dx--;
    if (dx)
        goto loc_204a9;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_2049f;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_204c3: // 1ff7:0553
    memoryASet16(ss, bp + 10, memoryAGet16(ss, bp + 10) - 1);
loc_204c6: // 1ff7:0556
    dx = 0x03c4;
    out16(dx, ax);
    di = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 12);
loc_204d0: // 1ff7:0560
    movsb<ES_DI, DS_SI>();
    cx = memoryAGet16(ss, bp + 10);
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    di += bx;
    dx--;
    if (dx)
        goto loc_204d0;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_204c6;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
loc_204eb: // 1ff7:057b
    dx = 0x03c4;
    out16(dx, ax);
    di = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(ss, bp + 12);
loc_204f5: // 1ff7:0585
    movsb<ES_DI, DS_SI>();
    cx = memoryAGet16(ss, bp + 10);
    for (; cx != 0; --cx) movsw<ES_DI, DS_SI>();
    di += bx;
    dx--;
    if (dx)
        goto loc_204f5;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_204eb;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2050f() // 1ff7:059f +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ss, bp + 8);
    bx = memoryAGet16(ds, 0xa7ac);
    bx -= memoryAGet16(ss, bp + 10);
    ds = memoryAGet16(ds, 0xa7ae);
    ax = 0x0004;
    di = 0;
loc_20527: // 1ff7:05b7
    dx = 0x03ce;
    out16(dx, ax);
    si = memoryAGet16(ss, bp + 6);
    dx = memoryAGet16(ss, bp + 12);
loc_20531: // 1ff7:05c1
    cx = memoryAGet16(ss, bp + 10);
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += bx;
    dx--;
    if (dx)
        goto loc_20531;
    ah++;
    if (ah != 0x04)
        goto loc_20527;
    ax = ss;
    ds = ax;
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2054a() // 1ff7:05da +far +stackDrop2
{
    push(si);
    push(di);
    push(bp);
    goto loc_20565;
loc_2054f: // 1ff7:05df
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    ax = 0;
    cx = 0x009a;
    di = memoryAGet16(ds, 0xe6d8);
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    bp = pop();
    di = pop();
    si = pop();
    cs = pop();
    return;
loc_20565: // 1ff7:05f5
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0105;
    out16(dx, ax);
    di = memoryAGet16(ds, 0xe6d8);
    bp = di;
    bp += 0x0135;
    push(di);
    cx = 0xffff;
loc_20581: // 1ff7:0611
    di = pop();
    ax = ss;
    es = ax;
    ds = ax;
    al = 0x01;
    for (flags.zero = 0; cx != 0 && !flags.zero; --cx) scasb_inv<ES_DI>(al);
    if (di >= bp)
        goto loc_2054f;
    if (memoryAGet(ds, di) != al)
        goto loc_20597;
    goto loc_2061a;
loc_20597: // 1ff7:0627
    di++;
    push(di);
    di -= memoryAGet16(ds, 0xe6d8);
    di <<= 1;
    di = memoryAGet16(ds, di + 58476);
    si = di;
    si += memoryAGet16(ds, 0xa7b4);
    di += memoryAGet16(ds, 0xa7b2);
    dx = memoryAGet16(ds, 0xa7ac);
    dx -= 0x0002;
    ax = memoryAGet16(ds, 0xa7ae);
    ds = ax;
    es = ax;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    goto loc_20581;
loc_2061a: // 1ff7:06aa
    dx = di;
    di++;
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) scasb_inv<ES_DI>(al);
    push(di);
    bx = di;
    bx -= dx;
    bx <<= 1;
    di = dx;
    di -= memoryAGet16(ds, 0xe6d8);
    di <<= 1;
    di = memoryAGet16(ds, di + 58478);
    si = di;
    si += memoryAGet16(ds, 0xa7b4);
    di += memoryAGet16(ds, 0xa7b2);
    dx = memoryAGet16(ds, 0xa7ac);
    dx -= bx;
    ax = memoryAGet16(ds, 0xa7ae);
    ds = ax;
    es = ax;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += dx;
    di += dx;
    cx = bx;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    cx--;
    goto loc_20581;
}
void sub_206c9() // 1ff7:0759 +stackDrop2
{
    sync();
    cs = pop();
    return;
    dx = 0x03da;
    bx = memoryAGet16(ds, 0xa53d);
    bx += 0x0003;
loc_206d3: // 1ff7:0763
    flags.interrupts = 1;
    goto loc_206d6;
loc_206d6: // 1ff7:0766
    flags.interrupts = 0;
    if (memoryAGet16(ds, 0xa53d) == bx)
        goto loc_20749;
loc_206dd: // 1ff7:076d
    al = in8(dx);
    if (al & 0x01)
        goto loc_206dd;
loc_206e2: // 1ff7:0772
    al = in8(dx);
    if (!(al & 0x01))
        goto loc_206e2;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    if (!(memoryAGet16(ds, 0x7a14) & 0x0001))
        goto loc_20749;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
    al = in8(dx);
    if (al & 0x08)
        goto loc_206d3;
    if (!(al & 0x01))
        goto loc_206d3;
loc_20749: // 1ff7:07d9
    cs = pop();
    return;
}
void sub_2074a() // 1ff7:07da +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_206c9();
    cx = memoryAGet16(ss, bp + 6);
    dx = 0x03d4;
    al = 0x0c;
    out8(dx, al);
    dx++;
    al = ch;
    out8(dx, al);
    dx--;
    al = 0x0d;
    out8(dx, al);
    al = cl;
    dx++;
    out8(dx, al);
    if (memoryAGet16(ds, 0x7ade) & 0x0001)
        goto loc_2077a;
    dx = 0x03c0;
    al = 0x33;
    out8(dx, al);
    goto loc_20776;
loc_20776: // 1ff7:0806
    al = memoryAGet(ss, bp + 8);
    out8(dx, al);
loc_2077a: // 1ff7:080a
    flags.interrupts = 1;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2077d() // 1ff7:080d
{
    es = memoryAGet16(ds, 0xa7ae);
    di = memoryAGet16(ds, 0x6674);
    bx = memoryAGet16(ds, 0x666c);
    if (bx)
        goto loc_2078e;
    return;
loc_2078e: // 1ff7:081e
    ax = memoryAGet16(ds, 0xa7ac);
    ax -= bx;
    memoryASet16(ds, 0x6678, ax);
    ax = 0x0032;
    ax -= bx;
    memoryASet16(ds, 0x6676, ax);
    bx = memoryAGet16(ds, 0x666e);
loc_207a2: // 1ff7:0832
    cx = memoryAGet16(ds, 0x666c);
loc_207a6: // 1ff7:0836
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di++;
    if (--cx)
        goto loc_207a6;
    si += memoryAGet16(ds, 0x6676);
    di += memoryAGet16(ds, 0x6678);
    bx--;
    if (bx)
        goto loc_207a2;
}
void sub_207b9() // 1ff7:0849
{
    sp -= 2;
    goto loc_207b9;
loc_1ff70: // 1ff7:0000
    push(bp);
    bp = sp;
    push(si);
    push(di);
    es = memoryAGet16(ds, 0xa7ae);
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    dx = 0x03ce;
    ax = 0x0205;
    out16(dx, ax);
    di = memoryAGet16(ds, 0xa7b4);
    bx = memoryAGet16(ss, bp + 8);
    bx <<= 1;
    di += memoryAGet16(ds, bx + 42324);
    bx = memoryAGet16(ss, bp + 6);
    ax = bx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    di += ax;
    bx &= 0x0007;
    ah = memoryAGet(ds, bx + 24546);
    al = 0x08;
    out16(dx, ax);
    bl = memoryAGet(ss, bp + 10);
    tl = memoryAGet(es, di); memoryASet(es, di, bl); bl = tl;
    dx = 0x03ce;
    ah = 0xff;
    out16(dx, ax);
    ax = 0x0005;
    out16(dx, ax);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    return;
  // gap 2042 bytes
loc_207b9: // 1ff7:0849
    si = memoryAGet16(ds, 0xa550);
    si <<= 1;
    es = memoryAGet16(ds, si + 31475);
    si = memoryAGet16(es, bx + 514);
    si &= 0x00ff;
    bx <<= 1;
    bx = memoryAGet16(es, bx + 2);
    di = memoryAGet16(ds, 0x6672);
    di <<= 1;
    bp = memoryAGet16(ds, di + 24530);
    di = 0x602c;
    di += memoryAGet16(ds, 0x6670);
    cx = memoryAGet16(ds, 0x6672);
    cx += si;
    ax = cx;
    ax &= 0x0007;
    memoryASet16(ds, 0x6672, ax);
    ax = cx;
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    memoryASet16(ds, 0x6670, memoryAGet16(ds, 0x6670) + ax);
    si += 0x0007;
    si >>= 1;
    si >>= 1;
    si >>= 1;
    si <<= 1;
    cx = memoryAGet16(es, 0x0000);
    dx = 0x0032;
    switch (si)
    {
        case 0: goto loc_1ff70;
        case 2: goto loc_20815;
        case 4: goto loc_2082c;
        default:
            stop();
    }
loc_20815: // 1ff7:08a5
    dx--;
loc_20816: // 1ff7:08a6
    al = memoryAGet(es, bx);
    ah = 0;
    ax <<= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + si);
    memoryASet(ds, di, memoryAGet(ds, di) | al);
    di++;
    memoryASet(ds, di, ah);
    bx++;
    di += dx;
    if (--cx)
        goto loc_20816;
    sp += 2;
    return;
loc_2082c: // 1ff7:08bc
    dx--;
    dx--;
loc_2082e: // 1ff7:08be
    al = memoryAGet(es, bx);
    ah = 0;
    ax <<= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + si);
    memoryASet(ds, di, memoryAGet(ds, di) | al);
    di++;
    memoryASet(ds, di, ah);
    bx++;
    al = memoryAGet(es, bx);
    ah = 0;
    ax <<= 1;
    si = ax;
    ax = memoryAGet16(ss, bp + si);
    memoryASet(ds, di, memoryAGet(ds, di) | al);
    di++;
    memoryASet(ds, di, ah);
    bx++;
    di += dx;
    if (--cx)
        goto loc_2082e;
    sp += 2;
}
void sub_20929() // 1ff7:09b9 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    al = 0x00;
    memoryASet(ds, 0x602c, al);
    memoryASet(ds, 0x605e, al);
    memoryASet(ds, 0x6090, al);
    memoryASet(ds, 0x60c2, al);
    memoryASet(ds, 0x60f4, al);
    memoryASet(ds, 0x6126, al);
    memoryASet(ds, 0x6158, al);
    memoryASet(ds, 0x618a, al);
    memoryASet(ds, 0x61bc, al);
    memoryASet(ds, 0x61ee, al);
    memoryASet(ds, 0x6220, al);
    memoryASet(ds, 0x6252, al);
    memoryASet(ds, 0x6284, al);
    memoryASet(ds, 0x62b6, al);
    memoryASet(ds, 0x62e8, al);
    memoryASet(ds, 0x631a, al);
    memoryASet(ds, 0x634c, al);
    memoryASet(ds, 0x637e, al);
    memoryASet(ds, 0x63b0, al);
    memoryASet(ds, 0x63e2, al);
    memoryASet(ds, 0x6414, al);
    memoryASet(ds, 0x6446, al);
    memoryASet(ds, 0x6478, al);
    memoryASet(ds, 0x64aa, al);
    memoryASet(ds, 0x64dc, al);
    memoryASet(ds, 0x650e, al);
    memoryASet(ds, 0x6540, al);
    memoryASet(ds, 0x6572, al);
    memoryASet(ds, 0x65a4, al);
    memoryASet(ds, 0x65d6, al);
    memoryASet(ds, 0x6608, al);
    memoryASet(ds, 0x663a, al);
    ax = memoryAGet16(ds, 0x6020);
    ax &= 0x0007;
    memoryASet16(ds, 0x6672, ax);
    memoryASet16(ds, 0x6670, 0x0000);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x6028, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0x602a, ax);
loc_209ab: // 1ff7:0a3b
    es = memoryAGet16(ds, 0x602a);
    bx = memoryAGet16(ds, 0x6028);
    memoryASet16(ds, 0x6028, memoryAGet16(ds, 0x6028) + 1);
    bx = memoryAGet16(es, bx);
    bh = 0;
    if (!bl)
        goto loc_209c5;
    sub_207b9();
    goto loc_209ab;
loc_209c5: // 1ff7:0a55
    bx = memoryAGet16(ds, 0x6022);
    bx <<= 1;
    di = memoryAGet16(ds, bx + 42324);
    di += memoryAGet16(ds, 0xa7b4);
    di += memoryAGet16(ds, 0xa7b0);
    ax = memoryAGet16(ds, 0x6020);
    ax >>= 1;
    ax >>= 1;
    ax >>= 1;
    di += ax;
    memoryASet16(ds, 0x6674, di);
    ax = memoryAGet16(ds, 0x6670);
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    ax |= memoryAGet16(ds, 0x6672);
    memoryASet16(ds, 0x6020, memoryAGet16(ds, 0x6020) + ax);
    dx = 0x03ce;
    al = 0x03;
    ah = memoryAGet(ds, 0x6024);
    out16(dx, ax);
    dx = 0x03c4;
    al = 0x02;
    ah = memoryAGet(ds, 0x6025);
    out16(dx, ax);
    ax = memoryAGet16(ds, 0x6670);
    if (!(memoryAGet16(ds, 0x6672) & 0x0007))
        goto loc_20a17;
    ax++;
loc_20a17: // 1ff7:0aa7
    memoryASet16(ds, 0x666c, ax);
    si = memoryAGet16(ds, 0xa550);
    si <<= 1;
    es = memoryAGet16(ds, si + 31475);
    ax = memoryAGet16(es, 0x0000);
    memoryASet16(ds, 0x666e, ax);
    si = 0x602c;
    sub_2077d();
    dx = 0x03ce;
    ax = 0x0003;
    out16(dx, ax);
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20a43() // 1ff7:0ad3 +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x03da;
    cx = memoryAGet16(ss, bp + 6);
loc_20a4c: // 1ff7:0adc
    al = in8(dx);
    if (al & 0x08)
        goto loc_20a4c;
loc_20a51: // 1ff7:0ae1
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_20a51;
    if (--cx)
        goto loc_20a4c;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20a8a() // 1ff7:0b1a +far +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    push(cs);
    ds = pop();
    di = 0x0aea;
    memoryASet16(ds, di, 0x0000);
    memoryASet16(ds, di + 2, 0x0000);
    memoryASet(ds, 0x0b14, 0x01);
    memoryASet(ds, 0x0b11, 0x01);
    memoryASet(ds, 0x0b17, 0x01);
    cx = 0x0004;
    si = 0x0b0e;
loc_20ab3: // 1ff7:0b43
    al = lodsb<DS_SI>();
    flags.zero = !(al & al);
    ax = lodsw<DS_SI>();
    if (flags.zero)
        goto loc_20abf;
    push(si);
    push(cx);
    switch (ax)
    {
        case 0x0b60: sub_20ad0(); break;
        default:
            stop();
    }
    cx = pop();
    si = pop();
loc_20abf: // 1ff7:0b4f
    if (--cx)
        goto loc_20ab3;
    sub_20bb8();
    al = memoryAGet(ds, 0x0aea);
    ah = 0x00;
    di = pop();
    si = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20ad0() // 1ff7:0b60
{
    ax = 0x1a00;
    interrupt(0x10);
    if (al != 0x1a)
        goto loc_20b1f;
    cx = bx;
    bh = 0;
    if (!ch)
        goto loc_20af0;
    bl = ch;
    bx += bx;
    ax = memoryAGet16(ds, bx + 2804);
    memoryASet16(ds, di + 2, ax);
    bl = cl;
    bh = 0;
loc_20af0: // 1ff7:0b80
    bx += bx;
    ax = memoryAGet16(ds, bx + 2804);
    memoryASet16(ds, di, ax);
    memoryASet(ds, 0x0b14, 0x00);
    memoryASet(ds, 0x0b11, 0x00);
    memoryASet(ds, 0x0b17, 0x00);
    bx = di;
    if (memoryAGet(ds, bx) == 0x01)
        goto loc_20b16;
    bx = di + 2;
    if (memoryAGet(ds, bx) != 0x01)
        goto loc_20b1f;
loc_20b16: // 1ff7:0ba6
    memoryASet16(ds, bx, 0x0000);
    memoryASet(ds, 0x0b17, 0x01);
loc_20b1f: // 1ff7:0baf
    return;
}
void sub_20bb8() // 1ff7:0c48
{
    if (memoryAGet16(ds, di + 2) == 0x0000)
        goto loc_20be8;
    if ((char)memoryAGet(ds, di) >= (char)0x04)
        goto loc_20be8;
    if ((char)memoryAGet(ds, di + 2) >= (char)0x04)
        goto loc_20be8;
    ah = 0x0f;
    interrupt(0x10);
    al &= 0x07;
    if (al == 0x07)
        goto loc_20bdb;
    if (memoryAGet(ds, di + 1) != 0x01)
        goto loc_20be8;
    goto loc_20be1;
loc_20bdb: // 1ff7:0c6b
    if (memoryAGet(ds, di + 1) == 0x01)
        goto loc_20be8;
loc_20be1: // 1ff7:0c71
    ax = memoryAGet16(ds, di);
    tx = memoryAGet16(ds, di + 2); memoryASet16(ds, di + 2, ax); ax = tx;
    memoryASet16(ds, di, ax);
loc_20be8: // 1ff7:0c78
    return;
}
void fixReloc(uint16_t seg)
{
    memoryASet16(seg, 0x0001, memoryAGet16(seg, 0x0001) + seg); // 2ee7 -> 30d4
    memoryASet16(0x000d + seg, 0x000e, memoryAGet16(0x000d + seg, 0x000e) + seg); // 2ee7 -> 30d4
    memoryASet16(0x0010 + seg, 0x000b, memoryAGet16(0x0010 + seg, 0x000b) + seg); // 037d -> 056a
    memoryASet16(0x0011 + seg, 0x0004, memoryAGet16(0x0011 + seg, 0x0004) + seg); // 2ee7 -> 30d4
    memoryASet16(0x013a + seg, 0x0009, memoryAGet16(0x013a + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x01ab + seg, 0x0005, memoryAGet16(0x01ab + seg, 0x0005) + seg); // 2ee7 -> 30d4
    memoryASet16(0x0385 + seg, 0x0005, memoryAGet16(0x0385 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0385 + seg, 0x000a, memoryAGet16(0x0385 + seg, 0x000a) + seg); // 1874 -> 1a61
    memoryASet16(0x0385 + seg, 0x000f, memoryAGet16(0x0385 + seg, 0x000f) + seg); // 1460 -> 164d
    memoryASet16(0x0386 + seg, 0x0004, memoryAGet16(0x0386 + seg, 0x0004) + seg); // 1654 -> 1841
    memoryASet16(0x0386 + seg, 0x0009, memoryAGet16(0x0386 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0386 + seg, 0x000e, memoryAGet16(0x0386 + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x0387 + seg, 0x0003, memoryAGet16(0x0387 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x0389 + seg, 0x0007, memoryAGet16(0x0389 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x038b + seg, 0x0000, memoryAGet16(0x038b + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x038b + seg, 0x0005, memoryAGet16(0x038b + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x038b + seg, 0x000a, memoryAGet16(0x038b + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x038b + seg, 0x000f, memoryAGet16(0x038b + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x038c + seg, 0x0004, memoryAGet16(0x038c + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x038c + seg, 0x0009, memoryAGet16(0x038c + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x038c + seg, 0x000e, memoryAGet16(0x038c + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x038d + seg, 0x0003, memoryAGet16(0x038d + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x038d + seg, 0x0008, memoryAGet16(0x038d + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x038d + seg, 0x000d, memoryAGet16(0x038d + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x038e + seg, 0x0000, memoryAGet16(0x038e + seg, 0x0000) + seg); // 05c4 -> 07b1
    memoryASet16(0x038e + seg, 0x0008, memoryAGet16(0x038e + seg, 0x0008) + seg); // 05c4 -> 07b1
    memoryASet16(0x038f + seg, 0x0000, memoryAGet16(0x038f + seg, 0x0000) + seg); // 05c4 -> 07b1
    memoryASet16(0x038f + seg, 0x000a, memoryAGet16(0x038f + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x0390 + seg, 0x0003, memoryAGet16(0x0390 + seg, 0x0003) + seg); // 05c4 -> 07b1
    memoryASet16(0x0390 + seg, 0x000f, memoryAGet16(0x0390 + seg, 0x000f) + seg); // 05c4 -> 07b1
    memoryASet16(0x0391 + seg, 0x000b, memoryAGet16(0x0391 + seg, 0x000b) + seg); // 05c4 -> 07b1
    memoryASet16(0x0392 + seg, 0x0006, memoryAGet16(0x0392 + seg, 0x0006) + seg); // 12a6 -> 1493
    memoryASet16(0x0392 + seg, 0x0009, memoryAGet16(0x0392 + seg, 0x0009) + seg); // 2a3a -> 2c27
    memoryASet16(0x0395 + seg, 0x0008, memoryAGet16(0x0395 + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x0396 + seg, 0x0008, memoryAGet16(0x0396 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x0397 + seg, 0x0008, memoryAGet16(0x0397 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x0398 + seg, 0x0008, memoryAGet16(0x0398 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x0399 + seg, 0x0008, memoryAGet16(0x0399 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x039a + seg, 0x0008, memoryAGet16(0x039a + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x039b + seg, 0x0005, memoryAGet16(0x039b + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x039b + seg, 0x0008, memoryAGet16(0x039b + seg, 0x0008) + seg); // 1fe4 -> 21d1
    memoryASet16(0x039d + seg, 0x0001, memoryAGet16(0x039d + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x039d + seg, 0x000d, memoryAGet16(0x039d + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x039e + seg, 0x0009, memoryAGet16(0x039e + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x039f + seg, 0x0004, memoryAGet16(0x039f + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x03a1 + seg, 0x0000, memoryAGet16(0x03a1 + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x03a1 + seg, 0x0009, memoryAGet16(0x03a1 + seg, 0x0009) + seg); // 12a6 -> 1493
    memoryASet16(0x03a2 + seg, 0x000a, memoryAGet16(0x03a2 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x03a3 + seg, 0x0006, memoryAGet16(0x03a3 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x03a4 + seg, 0x000c, memoryAGet16(0x03a4 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x03a5 + seg, 0x000b, memoryAGet16(0x03a5 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x03a6 + seg, 0x000f, memoryAGet16(0x03a6 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x03a7 + seg, 0x000d, memoryAGet16(0x03a7 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x03a8 + seg, 0x000c, memoryAGet16(0x03a8 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x03a9 + seg, 0x0008, memoryAGet16(0x03a9 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x03ab + seg, 0x0009, memoryAGet16(0x03ab + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x03ac + seg, 0x0009, memoryAGet16(0x03ac + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x03ad + seg, 0x0005, memoryAGet16(0x03ad + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x03ae + seg, 0x0004, memoryAGet16(0x03ae + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x03ae + seg, 0x000f, memoryAGet16(0x03ae + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x03b1 + seg, 0x0002, memoryAGet16(0x03b1 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x03b5 + seg, 0x0002, memoryAGet16(0x03b5 + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x03b7 + seg, 0x0006, memoryAGet16(0x03b7 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x03b8 + seg, 0x0006, memoryAGet16(0x03b8 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x03b9 + seg, 0x0002, memoryAGet16(0x03b9 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x03ba + seg, 0x000d, memoryAGet16(0x03ba + seg, 0x000d) + seg); // 05c4 -> 07b1
    memoryASet16(0x03bb + seg, 0x0002, memoryAGet16(0x03bb + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x03bd + seg, 0x0008, memoryAGet16(0x03bd + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x03bf + seg, 0x0008, memoryAGet16(0x03bf + seg, 0x0008) + seg); // 05c4 -> 07b1
    memoryASet16(0x03c2 + seg, 0x0002, memoryAGet16(0x03c2 + seg, 0x0002) + seg); // 03ed -> 05da
    memoryASet16(0x03c2 + seg, 0x0009, memoryAGet16(0x03c2 + seg, 0x0009) + seg); // 03ed -> 05da
    memoryASet16(0x03c3 + seg, 0x0005, memoryAGet16(0x03c3 + seg, 0x0005) + seg); // 03ed -> 05da
    memoryASet16(0x03c3 + seg, 0x000f, memoryAGet16(0x03c3 + seg, 0x000f) + seg); // 03ed -> 05da
    memoryASet16(0x03c4 + seg, 0x000a, memoryAGet16(0x03c4 + seg, 0x000a) + seg); // 03ed -> 05da
    memoryASet16(0x03c5 + seg, 0x0004, memoryAGet16(0x03c5 + seg, 0x0004) + seg); // 03ed -> 05da
    memoryASet16(0x03c5 + seg, 0x000f, memoryAGet16(0x03c5 + seg, 0x000f) + seg); // 03ed -> 05da
    memoryASet16(0x03c6 + seg, 0x000f, memoryAGet16(0x03c6 + seg, 0x000f) + seg); // 03ed -> 05da
    memoryASet16(0x03c7 + seg, 0x000b, memoryAGet16(0x03c7 + seg, 0x000b) + seg); // 05c4 -> 07b1
    memoryASet16(0x03c8 + seg, 0x0000, memoryAGet16(0x03c8 + seg, 0x0000) + seg); // 03ed -> 05da
    memoryASet16(0x03c9 + seg, 0x0003, memoryAGet16(0x03c9 + seg, 0x0003) + seg); // 03ed -> 05da
    memoryASet16(0x03cd + seg, 0x000a, memoryAGet16(0x03cd + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x03ce + seg, 0x000b, memoryAGet16(0x03ce + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x03cf + seg, 0x000d, memoryAGet16(0x03cf + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x03d0 + seg, 0x000d, memoryAGet16(0x03d0 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x03d1 + seg, 0x000e, memoryAGet16(0x03d1 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x03d2 + seg, 0x000a, memoryAGet16(0x03d2 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x03d3 + seg, 0x000a, memoryAGet16(0x03d3 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x03d4 + seg, 0x000d, memoryAGet16(0x03d4 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x03d5 + seg, 0x0009, memoryAGet16(0x03d5 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x03d6 + seg, 0x000a, memoryAGet16(0x03d6 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x03d7 + seg, 0x000a, memoryAGet16(0x03d7 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x03d8 + seg, 0x000d, memoryAGet16(0x03d8 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x03d9 + seg, 0x0009, memoryAGet16(0x03d9 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x03da + seg, 0x0002, memoryAGet16(0x03da + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x03db + seg, 0x0007, memoryAGet16(0x03db + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x03de + seg, 0x0004, memoryAGet16(0x03de + seg, 0x0004) + seg); // 12a6 -> 1493
    memoryASet16(0x03df + seg, 0x000a, memoryAGet16(0x03df + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x03e1 + seg, 0x000a, memoryAGet16(0x03e1 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x03e2 + seg, 0x000f, memoryAGet16(0x03e2 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x03e5 + seg, 0x0002, memoryAGet16(0x03e5 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x03e5 + seg, 0x000b, memoryAGet16(0x03e5 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x03e6 + seg, 0x0004, memoryAGet16(0x03e6 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x03e7 + seg, 0x0000, memoryAGet16(0x03e7 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x03e8 + seg, 0x0009, memoryAGet16(0x03e8 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x03e9 + seg, 0x000f, memoryAGet16(0x03e9 + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x03ef + seg, 0x000b, memoryAGet16(0x03ef + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x03f0 + seg, 0x0000, memoryAGet16(0x03f0 + seg, 0x0000) + seg); // 05c4 -> 07b1
    memoryASet16(0x03f0 + seg, 0x000e, memoryAGet16(0x03f0 + seg, 0x000e) + seg); // 0915 -> 0b02
    memoryASet16(0x03f1 + seg, 0x0005, memoryAGet16(0x03f1 + seg, 0x0005) + seg); // 1a89 -> 1c76
    memoryASet16(0x03f4 + seg, 0x000f, memoryAGet16(0x03f4 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x03fa + seg, 0x0008, memoryAGet16(0x03fa + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x03ff + seg, 0x000b, memoryAGet16(0x03ff + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x0436 + seg, 0x0005, memoryAGet16(0x0436 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x0436 + seg, 0x000c, memoryAGet16(0x0436 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x0439 + seg, 0x0002, memoryAGet16(0x0439 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x0439 + seg, 0x0009, memoryAGet16(0x0439 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x044e + seg, 0x000b, memoryAGet16(0x044e + seg, 0x000b) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0453 + seg, 0x0005, memoryAGet16(0x0453 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x0465 + seg, 0x0006, memoryAGet16(0x0465 + seg, 0x0006) + seg); // 155e -> 174b
    memoryASet16(0x0494 + seg, 0x000b, memoryAGet16(0x0494 + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x049b + seg, 0x000c, memoryAGet16(0x049b + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x049c + seg, 0x0003, memoryAGet16(0x049c + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x04a1 + seg, 0x000c, memoryAGet16(0x04a1 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x04a2 + seg, 0x0003, memoryAGet16(0x04a2 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x04a4 + seg, 0x0008, memoryAGet16(0x04a4 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x04a6 + seg, 0x000e, memoryAGet16(0x04a6 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04b1 + seg, 0x0003, memoryAGet16(0x04b1 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04b3 + seg, 0x0006, memoryAGet16(0x04b3 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x04ba + seg, 0x0002, memoryAGet16(0x04ba + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x04bc + seg, 0x000d, memoryAGet16(0x04bc + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x04bd + seg, 0x0009, memoryAGet16(0x04bd + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x04bf + seg, 0x000d, memoryAGet16(0x04bf + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x04c3 + seg, 0x0001, memoryAGet16(0x04c3 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x04c4 + seg, 0x0000, memoryAGet16(0x04c4 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x04c4 + seg, 0x0007, memoryAGet16(0x04c4 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x04cb + seg, 0x000e, memoryAGet16(0x04cb + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04ce + seg, 0x000e, memoryAGet16(0x04ce + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x04cf + seg, 0x000e, memoryAGet16(0x04cf + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04e3 + seg, 0x0001, memoryAGet16(0x04e3 + seg, 0x0001) + seg); // 1e0a -> 1ff7
    memoryASet16(0x04e3 + seg, 0x0009, memoryAGet16(0x04e3 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x04e9 + seg, 0x0004, memoryAGet16(0x04e9 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x04eb + seg, 0x0000, memoryAGet16(0x04eb + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x04ec + seg, 0x000a, memoryAGet16(0x04ec + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04ed + seg, 0x0006, memoryAGet16(0x04ed + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x04ee + seg, 0x0002, memoryAGet16(0x04ee + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x04ee + seg, 0x000e, memoryAGet16(0x04ee + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x04ef + seg, 0x000a, memoryAGet16(0x04ef + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x04f3 + seg, 0x0003, memoryAGet16(0x04f3 + seg, 0x0003) + seg); // 1e0a -> 1ff7
    memoryASet16(0x04f9 + seg, 0x000a, memoryAGet16(0x04f9 + seg, 0x000a) + seg); // 1e0a -> 1ff7
    memoryASet16(0x04fd + seg, 0x000d, memoryAGet16(0x04fd + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x0510 + seg, 0x0008, memoryAGet16(0x0510 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x0512 + seg, 0x0009, memoryAGet16(0x0512 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x0516 + seg, 0x0001, memoryAGet16(0x0516 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x0517 + seg, 0x0001, memoryAGet16(0x0517 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x0517 + seg, 0x000c, memoryAGet16(0x0517 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0518 + seg, 0x0008, memoryAGet16(0x0518 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0519 + seg, 0x0000, memoryAGet16(0x0519 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0519 + seg, 0x0005, memoryAGet16(0x0519 + seg, 0x0005) + seg); // 1654 -> 1841
    memoryASet16(0x0519 + seg, 0x000a, memoryAGet16(0x0519 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x051b + seg, 0x0000, memoryAGet16(0x051b + seg, 0x0000) + seg); // 0915 -> 0b02
    memoryASet16(0x051c + seg, 0x0001, memoryAGet16(0x051c + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x051c + seg, 0x000a, memoryAGet16(0x051c + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x051d + seg, 0x000a, memoryAGet16(0x051d + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x051e + seg, 0x0009, memoryAGet16(0x051e + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x051f + seg, 0x0001, memoryAGet16(0x051f + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x051f + seg, 0x0006, memoryAGet16(0x051f + seg, 0x0006) + seg); // 12a6 -> 1493
    memoryASet16(0x0520 + seg, 0x000e, memoryAGet16(0x0520 + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x0521 + seg, 0x0003, memoryAGet16(0x0521 + seg, 0x0003) + seg); // 05c4 -> 07b1
    memoryASet16(0x0521 + seg, 0x000e, memoryAGet16(0x0521 + seg, 0x000e) + seg); // 1a89 -> 1c76
    memoryASet16(0x0525 + seg, 0x000c, memoryAGet16(0x0525 + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x052d + seg, 0x0007, memoryAGet16(0x052d + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x0532 + seg, 0x0000, memoryAGet16(0x0532 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0535 + seg, 0x0001, memoryAGet16(0x0535 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x0535 + seg, 0x0008, memoryAGet16(0x0535 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x0536 + seg, 0x000a, memoryAGet16(0x0536 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x0538 + seg, 0x0006, memoryAGet16(0x0538 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x053e + seg, 0x000e, memoryAGet16(0x053e + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x054b + seg, 0x000b, memoryAGet16(0x054b + seg, 0x000b) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0558 + seg, 0x0002, memoryAGet16(0x0558 + seg, 0x0002) + seg); // 1ee4 -> 20d1
    memoryASet16(0x055c + seg, 0x0006, memoryAGet16(0x055c + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x055f + seg, 0x000d, memoryAGet16(0x055f + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x0561 + seg, 0x000e, memoryAGet16(0x0561 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x0563 + seg, 0x000b, memoryAGet16(0x0563 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x056f + seg, 0x0008, memoryAGet16(0x056f + seg, 0x0008) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0575 + seg, 0x000b, memoryAGet16(0x0575 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x057a + seg, 0x0003, memoryAGet16(0x057a + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x057a + seg, 0x000f, memoryAGet16(0x057a + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x057b + seg, 0x000b, memoryAGet16(0x057b + seg, 0x000b) + seg); // 1e0a -> 1ff7
    memoryASet16(0x057c + seg, 0x000b, memoryAGet16(0x057c + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x057d + seg, 0x0004, memoryAGet16(0x057d + seg, 0x0004) + seg); // 12a6 -> 1493
    memoryASet16(0x057f + seg, 0x0000, memoryAGet16(0x057f + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x0580 + seg, 0x0006, memoryAGet16(0x0580 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0580 + seg, 0x000e, memoryAGet16(0x0580 + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x0583 + seg, 0x000c, memoryAGet16(0x0583 + seg, 0x000c) + seg); // 06bd -> 08aa
    memoryASet16(0x0584 + seg, 0x0008, memoryAGet16(0x0584 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x0585 + seg, 0x0001, memoryAGet16(0x0585 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x0585 + seg, 0x000d, memoryAGet16(0x0585 + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x0586 + seg, 0x0009, memoryAGet16(0x0586 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x0587 + seg, 0x0004, memoryAGet16(0x0587 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0588 + seg, 0x0000, memoryAGet16(0x0588 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0588 + seg, 0x0008, memoryAGet16(0x0588 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0588 + seg, 0x000d, memoryAGet16(0x0588 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x0589 + seg, 0x0002, memoryAGet16(0x0589 + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x058a + seg, 0x000a, memoryAGet16(0x058a + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x058b + seg, 0x000a, memoryAGet16(0x058b + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x058c + seg, 0x0009, memoryAGet16(0x058c + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x058e + seg, 0x0001, memoryAGet16(0x058e + seg, 0x0001) + seg); // 1e0a -> 1ff7
    memoryASet16(0x058f + seg, 0x0001, memoryAGet16(0x058f + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x058f + seg, 0x0009, memoryAGet16(0x058f + seg, 0x0009) + seg); // 12a6 -> 1493
    memoryASet16(0x0590 + seg, 0x000e, memoryAGet16(0x0590 + seg, 0x000e) + seg); // 05c4 -> 07b1
    memoryASet16(0x0591 + seg, 0x000b, memoryAGet16(0x0591 + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x0594 + seg, 0x000e, memoryAGet16(0x0594 + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x0595 + seg, 0x000e, memoryAGet16(0x0595 + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x0597 + seg, 0x000d, memoryAGet16(0x0597 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x0598 + seg, 0x000d, memoryAGet16(0x0598 + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x0599 + seg, 0x000d, memoryAGet16(0x0599 + seg, 0x000d) + seg); // 1460 -> 164d
    memoryASet16(0x059a + seg, 0x0009, memoryAGet16(0x059a + seg, 0x0009) + seg); // 05c4 -> 07b1
    memoryASet16(0x059b + seg, 0x000d, memoryAGet16(0x059b + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x059c + seg, 0x0002, memoryAGet16(0x059c + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x059c + seg, 0x000b, memoryAGet16(0x059c + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x059d + seg, 0x0003, memoryAGet16(0x059d + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x059d + seg, 0x0008, memoryAGet16(0x059d + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x059f + seg, 0x0002, memoryAGet16(0x059f + seg, 0x0002) + seg); // 1654 -> 1841
    memoryASet16(0x05a2 + seg, 0x0005, memoryAGet16(0x05a2 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x05a4 + seg, 0x0007, memoryAGet16(0x05a4 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x05a6 + seg, 0x000d, memoryAGet16(0x05a6 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x05aa + seg, 0x0009, memoryAGet16(0x05aa + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x05ae + seg, 0x0001, memoryAGet16(0x05ae + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x05bc + seg, 0x0009, memoryAGet16(0x05bc + seg, 0x0009) + seg); // 05c4 -> 07b1
    memoryASet16(0x05bd + seg, 0x0005, memoryAGet16(0x05bd + seg, 0x0005) + seg); // 1654 -> 1841
    memoryASet16(0x05bd + seg, 0x000a, memoryAGet16(0x05bd + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x05c1 + seg, 0x0004, memoryAGet16(0x05c1 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x05c3 + seg, 0x0001, memoryAGet16(0x05c3 + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x05c6 + seg, 0x0009, memoryAGet16(0x05c6 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x05c9 + seg, 0x0004, memoryAGet16(0x05c9 + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x05cb + seg, 0x0004, memoryAGet16(0x05cb + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x05cd + seg, 0x0009, memoryAGet16(0x05cd + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x05ce + seg, 0x0006, memoryAGet16(0x05ce + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x05cf + seg, 0x0002, memoryAGet16(0x05cf + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x05cf + seg, 0x000a, memoryAGet16(0x05cf + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x05cf + seg, 0x000f, memoryAGet16(0x05cf + seg, 0x000f) + seg); // 1460 -> 164d
    memoryASet16(0x05d0 + seg, 0x000c, memoryAGet16(0x05d0 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x05d3 + seg, 0x0003, memoryAGet16(0x05d3 + seg, 0x0003) + seg); // 12a6 -> 1493
    memoryASet16(0x05d5 + seg, 0x000d, memoryAGet16(0x05d5 + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x05d7 + seg, 0x0007, memoryAGet16(0x05d7 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x05d8 + seg, 0x000d, memoryAGet16(0x05d8 + seg, 0x000d) + seg); // 12a6 -> 1493
    memoryASet16(0x05da + seg, 0x000f, memoryAGet16(0x05da + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x05db + seg, 0x000f, memoryAGet16(0x05db + seg, 0x000f) + seg); // 155e -> 174b
    memoryASet16(0x05de + seg, 0x0007, memoryAGet16(0x05de + seg, 0x0007) + seg); // 12a6 -> 1493
    memoryASet16(0x05df + seg, 0x0007, memoryAGet16(0x05df + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x05e1 + seg, 0x0002, memoryAGet16(0x05e1 + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x05e3 + seg, 0x000b, memoryAGet16(0x05e3 + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x05e7 + seg, 0x0007, memoryAGet16(0x05e7 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x05e8 + seg, 0x0008, memoryAGet16(0x05e8 + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x05e9 + seg, 0x0000, memoryAGet16(0x05e9 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x05e9 + seg, 0x0005, memoryAGet16(0x05e9 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x05eb + seg, 0x000a, memoryAGet16(0x05eb + seg, 0x000a) + seg); // 155e -> 174b
    memoryASet16(0x05ec + seg, 0x000c, memoryAGet16(0x05ec + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x05ed + seg, 0x0007, memoryAGet16(0x05ed + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x05ef + seg, 0x0004, memoryAGet16(0x05ef + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x05f0 + seg, 0x0005, memoryAGet16(0x05f0 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x05f0 + seg, 0x000d, memoryAGet16(0x05f0 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x05f1 + seg, 0x0002, memoryAGet16(0x05f1 + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x05f3 + seg, 0x0000, memoryAGet16(0x05f3 + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x05f4 + seg, 0x0000, memoryAGet16(0x05f4 + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x05f5 + seg, 0x000b, memoryAGet16(0x05f5 + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x05f6 + seg, 0x000b, memoryAGet16(0x05f6 + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x05f9 + seg, 0x0002, memoryAGet16(0x05f9 + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x05fa + seg, 0x0004, memoryAGet16(0x05fa + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x05fa + seg, 0x000c, memoryAGet16(0x05fa + seg, 0x000c) + seg); // 06bd -> 08aa
    memoryASet16(0x05fd + seg, 0x0001, memoryAGet16(0x05fd + seg, 0x0001) + seg); // 12a6 -> 1493
    memoryASet16(0x0601 + seg, 0x000f, memoryAGet16(0x0601 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x0607 + seg, 0x0009, memoryAGet16(0x0607 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x060b + seg, 0x0008, memoryAGet16(0x060b + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x0614 + seg, 0x0008, memoryAGet16(0x0614 + seg, 0x0008) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0615 + seg, 0x0006, memoryAGet16(0x0615 + seg, 0x0006) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0618 + seg, 0x0007, memoryAGet16(0x0618 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0619 + seg, 0x0000, memoryAGet16(0x0619 + seg, 0x0000) + seg); // 05c4 -> 07b1
    memoryASet16(0x0619 + seg, 0x000a, memoryAGet16(0x0619 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x061b + seg, 0x0003, memoryAGet16(0x061b + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x061b + seg, 0x000c, memoryAGet16(0x061b + seg, 0x000c) + seg); // 1654 -> 1841
    memoryASet16(0x061e + seg, 0x0005, memoryAGet16(0x061e + seg, 0x0005) + seg); // 1d02 -> 1eef
    memoryASet16(0x061f + seg, 0x0009, memoryAGet16(0x061f + seg, 0x0009) + seg); // 1d02 -> 1eef
    memoryASet16(0x0620 + seg, 0x0005, memoryAGet16(0x0620 + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x0620 + seg, 0x000d, memoryAGet16(0x0620 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x0621 + seg, 0x0002, memoryAGet16(0x0621 + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x0621 + seg, 0x0007, memoryAGet16(0x0621 + seg, 0x0007) + seg); // 0e8f -> 107c
    memoryASet16(0x0622 + seg, 0x0007, memoryAGet16(0x0622 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x0622 + seg, 0x000f, memoryAGet16(0x0622 + seg, 0x000f) + seg); // 155e -> 174b
    memoryASet16(0x0623 + seg, 0x0007, memoryAGet16(0x0623 + seg, 0x0007) + seg); // 12a6 -> 1493
    memoryASet16(0x0624 + seg, 0x000a, memoryAGet16(0x0624 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x0625 + seg, 0x000f, memoryAGet16(0x0625 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x0627 + seg, 0x000e, memoryAGet16(0x0627 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x0628 + seg, 0x000a, memoryAGet16(0x0628 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x0629 + seg, 0x0006, memoryAGet16(0x0629 + seg, 0x0006) + seg); // 155e -> 174b
    memoryASet16(0x062b + seg, 0x000b, memoryAGet16(0x062b + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x062f + seg, 0x0009, memoryAGet16(0x062f + seg, 0x0009) + seg); // 12a6 -> 1493
    memoryASet16(0x062f + seg, 0x000f, memoryAGet16(0x062f + seg, 0x000f) + seg); // 2a3a -> 2c27
    memoryASet16(0x0632 + seg, 0x0008, memoryAGet16(0x0632 + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x0635 + seg, 0x0004, memoryAGet16(0x0635 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x0636 + seg, 0x000f, memoryAGet16(0x0636 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0638 + seg, 0x0008, memoryAGet16(0x0638 + seg, 0x0008) + seg); // 2a3a -> 2c27
    memoryASet16(0x063a + seg, 0x0007, memoryAGet16(0x063a + seg, 0x0007) + seg); // 037d -> 056a
    memoryASet16(0x063b + seg, 0x000f, memoryAGet16(0x063b + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x063c + seg, 0x0007, memoryAGet16(0x063c + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0641 + seg, 0x000a, memoryAGet16(0x0641 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0642 + seg, 0x0002, memoryAGet16(0x0642 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0648 + seg, 0x0005, memoryAGet16(0x0648 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0648 + seg, 0x000d, memoryAGet16(0x0648 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x064a + seg, 0x000a, memoryAGet16(0x064a + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x064b + seg, 0x0007, memoryAGet16(0x064b + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x064c + seg, 0x0008, memoryAGet16(0x064c + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x064d + seg, 0x0000, memoryAGet16(0x064d + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x064e + seg, 0x000f, memoryAGet16(0x064e + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x0650 + seg, 0x0009, memoryAGet16(0x0650 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x0652 + seg, 0x000a, memoryAGet16(0x0652 + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x0654 + seg, 0x000b, memoryAGet16(0x0654 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0655 + seg, 0x0000, memoryAGet16(0x0655 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x0655 + seg, 0x0005, memoryAGet16(0x0655 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0656 + seg, 0x0002, memoryAGet16(0x0656 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x0657 + seg, 0x0003, memoryAGet16(0x0657 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x0657 + seg, 0x000b, memoryAGet16(0x0657 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0659 + seg, 0x000a, memoryAGet16(0x0659 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x065d + seg, 0x0000, memoryAGet16(0x065d + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x065e + seg, 0x0003, memoryAGet16(0x065e + seg, 0x0003) + seg); // 037d -> 056a
    memoryASet16(0x065f + seg, 0x0004, memoryAGet16(0x065f + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x0660 + seg, 0x0005, memoryAGet16(0x0660 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x0661 + seg, 0x000a, memoryAGet16(0x0661 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x0662 + seg, 0x0003, memoryAGet16(0x0662 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x0662 + seg, 0x000b, memoryAGet16(0x0662 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x0665 + seg, 0x0002, memoryAGet16(0x0665 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x0666 + seg, 0x0006, memoryAGet16(0x0666 + seg, 0x0006) + seg); // 037d -> 056a
    memoryASet16(0x0667 + seg, 0x0009, memoryAGet16(0x0667 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x0668 + seg, 0x000f, memoryAGet16(0x0668 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0669 + seg, 0x000c, memoryAGet16(0x0669 + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x066a + seg, 0x000d, memoryAGet16(0x066a + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x066c + seg, 0x000d, memoryAGet16(0x066c + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x066e + seg, 0x0002, memoryAGet16(0x066e + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x066f + seg, 0x000c, memoryAGet16(0x066f + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x0670 + seg, 0x0004, memoryAGet16(0x0670 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0672 + seg, 0x0005, memoryAGet16(0x0672 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x0674 + seg, 0x000e, memoryAGet16(0x0674 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0676 + seg, 0x000d, memoryAGet16(0x0676 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0678 + seg, 0x000e, memoryAGet16(0x0678 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x067a + seg, 0x000f, memoryAGet16(0x067a + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x067c + seg, 0x0009, memoryAGet16(0x067c + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x067e + seg, 0x0003, memoryAGet16(0x067e + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0680 + seg, 0x0001, memoryAGet16(0x0680 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0681 + seg, 0x000f, memoryAGet16(0x0681 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0682 + seg, 0x0007, memoryAGet16(0x0682 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0684 + seg, 0x0003, memoryAGet16(0x0684 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0686 + seg, 0x0005, memoryAGet16(0x0686 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0688 + seg, 0x0009, memoryAGet16(0x0688 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x068a + seg, 0x000d, memoryAGet16(0x068a + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x068c + seg, 0x000a, memoryAGet16(0x068c + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x068e + seg, 0x0007, memoryAGet16(0x068e + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0690 + seg, 0x0008, memoryAGet16(0x0690 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0692 + seg, 0x0009, memoryAGet16(0x0692 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0693 + seg, 0x000e, memoryAGet16(0x0693 + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x0695 + seg, 0x0000, memoryAGet16(0x0695 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x06a0 + seg, 0x0002, memoryAGet16(0x06a0 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x06a1 + seg, 0x0003, memoryAGet16(0x06a1 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x06a1 + seg, 0x000b, memoryAGet16(0x06a1 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06a2 + seg, 0x0000, memoryAGet16(0x06a2 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x06a4 + seg, 0x0001, memoryAGet16(0x06a4 + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x06a4 + seg, 0x000f, memoryAGet16(0x06a4 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x06a5 + seg, 0x0004, memoryAGet16(0x06a5 + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x06a6 + seg, 0x000b, memoryAGet16(0x06a6 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x06a7 + seg, 0x0003, memoryAGet16(0x06a7 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06a9 + seg, 0x0000, memoryAGet16(0x06a9 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x06ac + seg, 0x0006, memoryAGet16(0x06ac + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x06ae + seg, 0x0000, memoryAGet16(0x06ae + seg, 0x0000) + seg); // 0e8f -> 107c
    memoryASet16(0x06af + seg, 0x0009, memoryAGet16(0x06af + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x06af + seg, 0x000e, memoryAGet16(0x06af + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06b0 + seg, 0x0003, memoryAGet16(0x06b0 + seg, 0x0003) + seg); // 0915 -> 0b02
    memoryASet16(0x06b1 + seg, 0x0004, memoryAGet16(0x06b1 + seg, 0x0004) + seg); // 03ed -> 05da
    memoryASet16(0x06b2 + seg, 0x000c, memoryAGet16(0x06b2 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x06b5 + seg, 0x000a, memoryAGet16(0x06b5 + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x06b7 + seg, 0x0006, memoryAGet16(0x06b7 + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x06b8 + seg, 0x0007, memoryAGet16(0x06b8 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x06b9 + seg, 0x0007, memoryAGet16(0x06b9 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x06bb + seg, 0x0009, memoryAGet16(0x06bb + seg, 0x0009) + seg); // 03ed -> 05da
    memoryASet16(0x06c0 + seg, 0x0006, memoryAGet16(0x06c0 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06c1 + seg, 0x0003, memoryAGet16(0x06c1 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c2 + seg, 0x0004, memoryAGet16(0x06c2 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c3 + seg, 0x0000, memoryAGet16(0x06c3 + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c3 + seg, 0x000c, memoryAGet16(0x06c3 + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c4 + seg, 0x000a, memoryAGet16(0x06c4 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c5 + seg, 0x0002, memoryAGet16(0x06c5 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06c5 + seg, 0x0007, memoryAGet16(0x06c5 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x06c6 + seg, 0x0005, memoryAGet16(0x06c6 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06c7 + seg, 0x0002, memoryAGet16(0x06c7 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c7 + seg, 0x000e, memoryAGet16(0x06c7 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c8 + seg, 0x000a, memoryAGet16(0x06c8 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x06c9 + seg, 0x0006, memoryAGet16(0x06c9 + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x06cb + seg, 0x000e, memoryAGet16(0x06cb + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x06cc + seg, 0x0005, memoryAGet16(0x06cc + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x06cd + seg, 0x0001, memoryAGet16(0x06cd + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06ce + seg, 0x0000, memoryAGet16(0x06ce + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x06ce + seg, 0x0007, memoryAGet16(0x06ce + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x06ce + seg, 0x000e, memoryAGet16(0x06ce + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x06cf + seg, 0x000a, memoryAGet16(0x06cf + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d0 + seg, 0x0009, memoryAGet16(0x06d0 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x06d1 + seg, 0x0000, memoryAGet16(0x06d1 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x06d1 + seg, 0x0007, memoryAGet16(0x06d1 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d2 + seg, 0x0003, memoryAGet16(0x06d2 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d2 + seg, 0x000b, memoryAGet16(0x06d2 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06d3 + seg, 0x0000, memoryAGet16(0x06d3 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x06d3 + seg, 0x0005, memoryAGet16(0x06d3 + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x06d4 + seg, 0x0004, memoryAGet16(0x06d4 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06d5 + seg, 0x0001, memoryAGet16(0x06d5 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d6 + seg, 0x0007, memoryAGet16(0x06d6 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d7 + seg, 0x0003, memoryAGet16(0x06d7 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x06d9 + seg, 0x0007, memoryAGet16(0x06d9 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x06df + seg, 0x0001, memoryAGet16(0x06df + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06e0 + seg, 0x000a, memoryAGet16(0x06e0 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e1 + seg, 0x0006, memoryAGet16(0x06e1 + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e2 + seg, 0x000d, memoryAGet16(0x06e2 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e3 + seg, 0x0009, memoryAGet16(0x06e3 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e5 + seg, 0x0001, memoryAGet16(0x06e5 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e5 + seg, 0x000d, memoryAGet16(0x06e5 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e7 + seg, 0x0005, memoryAGet16(0x06e7 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e8 + seg, 0x0001, memoryAGet16(0x06e8 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06e9 + seg, 0x0009, memoryAGet16(0x06e9 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x06ea + seg, 0x0005, memoryAGet16(0x06ea + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x06eb + seg, 0x000d, memoryAGet16(0x06eb + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x06ec + seg, 0x0009, memoryAGet16(0x06ec + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x06ee + seg, 0x0001, memoryAGet16(0x06ee + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06ee + seg, 0x000d, memoryAGet16(0x06ee + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f0 + seg, 0x0005, memoryAGet16(0x06f0 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f1 + seg, 0x0001, memoryAGet16(0x06f1 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f2 + seg, 0x0009, memoryAGet16(0x06f2 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f3 + seg, 0x0005, memoryAGet16(0x06f3 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f4 + seg, 0x000d, memoryAGet16(0x06f4 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f5 + seg, 0x0009, memoryAGet16(0x06f5 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x06f7 + seg, 0x0001, memoryAGet16(0x06f7 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x06fa + seg, 0x000b, memoryAGet16(0x06fa + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x06fb + seg, 0x0007, memoryAGet16(0x06fb + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x06fd + seg, 0x0007, memoryAGet16(0x06fd + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x06ff + seg, 0x0005, memoryAGet16(0x06ff + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0700 + seg, 0x0002, memoryAGet16(0x0700 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x0700 + seg, 0x000e, memoryAGet16(0x0700 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x0702 + seg, 0x0008, memoryAGet16(0x0702 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0703 + seg, 0x0000, memoryAGet16(0x0703 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0703 + seg, 0x0005, memoryAGet16(0x0703 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x070c + seg, 0x0006, memoryAGet16(0x070c + seg, 0x0006) + seg); // 1460 -> 164d
    memoryASet16(0x070d + seg, 0x000b, memoryAGet16(0x070d + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x070e + seg, 0x0008, memoryAGet16(0x070e + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x070f + seg, 0x0000, memoryAGet16(0x070f + seg, 0x0000) + seg); // 1874 -> 1a61
    memoryASet16(0x0710 + seg, 0x0002, memoryAGet16(0x0710 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0710 + seg, 0x000e, memoryAGet16(0x0710 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0711 + seg, 0x000a, memoryAGet16(0x0711 + seg, 0x000a) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0714 + seg, 0x0007, memoryAGet16(0x0714 + seg, 0x0007) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0717 + seg, 0x0008, memoryAGet16(0x0717 + seg, 0x0008) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0718 + seg, 0x0005, memoryAGet16(0x0718 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x0718 + seg, 0x000e, memoryAGet16(0x0718 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0719 + seg, 0x0006, memoryAGet16(0x0719 + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x0719 + seg, 0x000b, memoryAGet16(0x0719 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x071a + seg, 0x0000, memoryAGet16(0x071a + seg, 0x0000) + seg); // 1874 -> 1a61
    memoryASet16(0x071a + seg, 0x0005, memoryAGet16(0x071a + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x071a + seg, 0x000a, memoryAGet16(0x071a + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x071a + seg, 0x000f, memoryAGet16(0x071a + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x071b + seg, 0x0004, memoryAGet16(0x071b + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x071b + seg, 0x000c, memoryAGet16(0x071b + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x071d + seg, 0x0000, memoryAGet16(0x071d + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x071d + seg, 0x0008, memoryAGet16(0x071d + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x0724 + seg, 0x000b, memoryAGet16(0x0724 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0725 + seg, 0x0008, memoryAGet16(0x0725 + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x0726 + seg, 0x0004, memoryAGet16(0x0726 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x0726 + seg, 0x000c, memoryAGet16(0x0726 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0727 + seg, 0x0007, memoryAGet16(0x0727 + seg, 0x0007) + seg); // 12a6 -> 1493
    memoryASet16(0x072f + seg, 0x0006, memoryAGet16(0x072f + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x0730 + seg, 0x0007, memoryAGet16(0x0730 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0731 + seg, 0x0007, memoryAGet16(0x0731 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0732 + seg, 0x0003, memoryAGet16(0x0732 + seg, 0x0003) + seg); // 037d -> 056a
    memoryASet16(0x0735 + seg, 0x000a, memoryAGet16(0x0735 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x0736 + seg, 0x000b, memoryAGet16(0x0736 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0737 + seg, 0x000b, memoryAGet16(0x0737 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0738 + seg, 0x0007, memoryAGet16(0x0738 + seg, 0x0007) + seg); // 037d -> 056a
    memoryASet16(0x073c + seg, 0x000b, memoryAGet16(0x073c + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x073d + seg, 0x0008, memoryAGet16(0x073d + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x073e + seg, 0x0009, memoryAGet16(0x073e + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x073f + seg, 0x0001, memoryAGet16(0x073f + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0741 + seg, 0x0000, memoryAGet16(0x0741 + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x0742 + seg, 0x000a, memoryAGet16(0x0742 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x0743 + seg, 0x000e, memoryAGet16(0x0743 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0747 + seg, 0x000f, memoryAGet16(0x0747 + seg, 0x000f) + seg); // 05c4 -> 07b1
    memoryASet16(0x0748 + seg, 0x000d, memoryAGet16(0x0748 + seg, 0x000d) + seg); // 05c4 -> 07b1
    memoryASet16(0x074b + seg, 0x0006, memoryAGet16(0x074b + seg, 0x0006) + seg); // 037d -> 056a
    memoryASet16(0x074c + seg, 0x000f, memoryAGet16(0x074c + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x074d + seg, 0x000c, memoryAGet16(0x074d + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x074e + seg, 0x000f, memoryAGet16(0x074e + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x074f + seg, 0x000d, memoryAGet16(0x074f + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x0750 + seg, 0x0005, memoryAGet16(0x0750 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0750 + seg, 0x000a, memoryAGet16(0x0750 + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x0752 + seg, 0x0004, memoryAGet16(0x0752 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0753 + seg, 0x0001, memoryAGet16(0x0753 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x0753 + seg, 0x000d, memoryAGet16(0x0753 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x0756 + seg, 0x0005, memoryAGet16(0x0756 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0756 + seg, 0x000a, memoryAGet16(0x0756 + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x0759 + seg, 0x0000, memoryAGet16(0x0759 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0759 + seg, 0x000d, memoryAGet16(0x0759 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x075b + seg, 0x0000, memoryAGet16(0x075b + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x075b + seg, 0x000e, memoryAGet16(0x075b + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x075c + seg, 0x0006, memoryAGet16(0x075c + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x075c + seg, 0x000b, memoryAGet16(0x075c + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x075f + seg, 0x0004, memoryAGet16(0x075f + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0760 + seg, 0x0001, memoryAGet16(0x0760 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x0761 + seg, 0x0007, memoryAGet16(0x0761 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x0762 + seg, 0x000e, memoryAGet16(0x0762 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x0763 + seg, 0x000f, memoryAGet16(0x0763 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0764 + seg, 0x0004, memoryAGet16(0x0764 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0765 + seg, 0x0009, memoryAGet16(0x0765 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0767 + seg, 0x000e, memoryAGet16(0x0767 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0768 + seg, 0x000b, memoryAGet16(0x0768 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0769 + seg, 0x000e, memoryAGet16(0x0769 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x076a + seg, 0x000c, memoryAGet16(0x076a + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x076b + seg, 0x0004, memoryAGet16(0x076b + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x076b + seg, 0x0009, memoryAGet16(0x076b + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x076e + seg, 0x0005, memoryAGet16(0x076e + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x076f + seg, 0x0002, memoryAGet16(0x076f + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x0770 + seg, 0x0003, memoryAGet16(0x0770 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x0770 + seg, 0x000b, memoryAGet16(0x0770 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0772 + seg, 0x000a, memoryAGet16(0x0772 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x0774 + seg, 0x0004, memoryAGet16(0x0774 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x0777 + seg, 0x0008, memoryAGet16(0x0777 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0778 + seg, 0x0005, memoryAGet16(0x0778 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0779 + seg, 0x0006, memoryAGet16(0x0779 + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x0779 + seg, 0x000e, memoryAGet16(0x0779 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x077b + seg, 0x000d, memoryAGet16(0x077b + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x077d + seg, 0x0007, memoryAGet16(0x077d + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0781 + seg, 0x000e, memoryAGet16(0x0781 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0786 + seg, 0x0004, memoryAGet16(0x0786 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x0787 + seg, 0x0005, memoryAGet16(0x0787 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0787 + seg, 0x000d, memoryAGet16(0x0787 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0788 + seg, 0x0002, memoryAGet16(0x0788 + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x0788 + seg, 0x0007, memoryAGet16(0x0788 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x078c + seg, 0x000f, memoryAGet16(0x078c + seg, 0x000f) + seg); // 1460 -> 164d
    memoryASet16(0x078d + seg, 0x0004, memoryAGet16(0x078d + seg, 0x0004) + seg); // 1654 -> 1841
    memoryASet16(0x078e + seg, 0x000e, memoryAGet16(0x078e + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x078f + seg, 0x0003, memoryAGet16(0x078f + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0790 + seg, 0x0000, memoryAGet16(0x0790 + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x0790 + seg, 0x000c, memoryAGet16(0x0790 + seg, 0x000c) + seg); // 1931 -> 1b1e
    memoryASet16(0x0791 + seg, 0x0004, memoryAGet16(0x0791 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0791 + seg, 0x0009, memoryAGet16(0x0791 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0791 + seg, 0x000e, memoryAGet16(0x0791 + seg, 0x000e) + seg); // 1654 -> 1841
    memoryASet16(0x0792 + seg, 0x0009, memoryAGet16(0x0792 + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x0793 + seg, 0x000a, memoryAGet16(0x0793 + seg, 0x000a) + seg); // 0915 -> 0b02
    memoryASet16(0x0796 + seg, 0x000a, memoryAGet16(0x0796 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0799 + seg, 0x0001, memoryAGet16(0x0799 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0799 + seg, 0x000b, memoryAGet16(0x0799 + seg, 0x000b) + seg); // 1a89 -> 1c76
    memoryASet16(0x079a + seg, 0x0000, memoryAGet16(0x079a + seg, 0x0000) + seg); // 1654 -> 1841
    memoryASet16(0x079c + seg, 0x0009, memoryAGet16(0x079c + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x079f + seg, 0x0000, memoryAGet16(0x079f + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x07a0 + seg, 0x000b, memoryAGet16(0x07a0 + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x07a4 + seg, 0x0005, memoryAGet16(0x07a4 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07a4 + seg, 0x000a, memoryAGet16(0x07a4 + seg, 0x000a) + seg); // 1874 -> 1a61
    memoryASet16(0x07a5 + seg, 0x0003, memoryAGet16(0x07a5 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x07a5 + seg, 0x000b, memoryAGet16(0x07a5 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x07a6 + seg, 0x000b, memoryAGet16(0x07a6 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07a7 + seg, 0x0007, memoryAGet16(0x07a7 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07a7 + seg, 0x000f, memoryAGet16(0x07a7 + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x07a8 + seg, 0x0004, memoryAGet16(0x07a8 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x07a9 + seg, 0x0007, memoryAGet16(0x07a9 + seg, 0x0007) + seg); // 1874 -> 1a61
    memoryASet16(0x07ac + seg, 0x000b, memoryAGet16(0x07ac + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x07af + seg, 0x000d, memoryAGet16(0x07af + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x07b0 + seg, 0x0008, memoryAGet16(0x07b0 + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x07b1 + seg, 0x000d, memoryAGet16(0x07b1 + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x07b2 + seg, 0x000f, memoryAGet16(0x07b2 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x07b3 + seg, 0x000d, memoryAGet16(0x07b3 + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x07b4 + seg, 0x0008, memoryAGet16(0x07b4 + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x07b5 + seg, 0x0000, memoryAGet16(0x07b5 + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x07b6 + seg, 0x0003, memoryAGet16(0x07b6 + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x07b6 + seg, 0x000b, memoryAGet16(0x07b6 + seg, 0x000b) + seg); // 037d -> 056a
    memoryASet16(0x07b8 + seg, 0x000e, memoryAGet16(0x07b8 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x07b9 + seg, 0x000a, memoryAGet16(0x07b9 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x07bb + seg, 0x0001, memoryAGet16(0x07bb + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07bd + seg, 0x000e, memoryAGet16(0x07bd + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c1 + seg, 0x0006, memoryAGet16(0x07c1 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c2 + seg, 0x000b, memoryAGet16(0x07c2 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c4 + seg, 0x0003, memoryAGet16(0x07c4 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c5 + seg, 0x0006, memoryAGet16(0x07c5 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c7 + seg, 0x0004, memoryAGet16(0x07c7 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07c8 + seg, 0x0007, memoryAGet16(0x07c8 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07ca + seg, 0x0000, memoryAGet16(0x07ca + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07cb + seg, 0x0004, memoryAGet16(0x07cb + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07cd + seg, 0x000f, memoryAGet16(0x07cd + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07cf + seg, 0x000d, memoryAGet16(0x07cf + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x07d1 + seg, 0x0009, memoryAGet16(0x07d1 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07d3 + seg, 0x0006, memoryAGet16(0x07d3 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x07d4 + seg, 0x000a, memoryAGet16(0x07d4 + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x07d6 + seg, 0x0007, memoryAGet16(0x07d6 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x07d8 + seg, 0x0005, memoryAGet16(0x07d8 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x07da + seg, 0x0000, memoryAGet16(0x07da + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07dd + seg, 0x000d, memoryAGet16(0x07dd + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x07df + seg, 0x0008, memoryAGet16(0x07df + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07e3 + seg, 0x0005, memoryAGet16(0x07e3 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x07e5 + seg, 0x0000, memoryAGet16(0x07e5 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07e7 + seg, 0x0000, memoryAGet16(0x07e7 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07e9 + seg, 0x0009, memoryAGet16(0x07e9 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x07eb + seg, 0x0005, memoryAGet16(0x07eb + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07ee + seg, 0x0007, memoryAGet16(0x07ee + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x07ef + seg, 0x0005, memoryAGet16(0x07ef + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x07f0 + seg, 0x0003, memoryAGet16(0x07f0 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x07f1 + seg, 0x000b, memoryAGet16(0x07f1 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x07f3 + seg, 0x0006, memoryAGet16(0x07f3 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07f6 + seg, 0x0003, memoryAGet16(0x07f6 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07f8 + seg, 0x0001, memoryAGet16(0x07f8 + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x07f9 + seg, 0x000c, memoryAGet16(0x07f9 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x07fd + seg, 0x0001, memoryAGet16(0x07fd + seg, 0x0001) + seg); // 1931 -> 1b1e
    memoryASet16(0x07fe + seg, 0x0009, memoryAGet16(0x07fe + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0801 + seg, 0x000b, memoryAGet16(0x0801 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0803 + seg, 0x0006, memoryAGet16(0x0803 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0806 + seg, 0x000f, memoryAGet16(0x0806 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0809 + seg, 0x0004, memoryAGet16(0x0809 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x080a + seg, 0x0002, memoryAGet16(0x080a + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x080c + seg, 0x0004, memoryAGet16(0x080c + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x080e + seg, 0x0002, memoryAGet16(0x080e + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0813 + seg, 0x0000, memoryAGet16(0x0813 + seg, 0x0000) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0815 + seg, 0x0005, memoryAGet16(0x0815 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x081b + seg, 0x000d, memoryAGet16(0x081b + seg, 0x000d) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0820 + seg, 0x000a, memoryAGet16(0x0820 + seg, 0x000a) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0824 + seg, 0x0002, memoryAGet16(0x0824 + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0828 + seg, 0x0006, memoryAGet16(0x0828 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x082b + seg, 0x0001, memoryAGet16(0x082b + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x082b + seg, 0x0009, memoryAGet16(0x082b + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x082f + seg, 0x0008, memoryAGet16(0x082f + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x0830 + seg, 0x0009, memoryAGet16(0x0830 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x0831 + seg, 0x0001, memoryAGet16(0x0831 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0831 + seg, 0x0006, memoryAGet16(0x0831 + seg, 0x0006) + seg); // 1460 -> 164d
    memoryASet16(0x0832 + seg, 0x0001, memoryAGet16(0x0832 + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x0832 + seg, 0x0006, memoryAGet16(0x0832 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x0833 + seg, 0x0001, memoryAGet16(0x0833 + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x0834 + seg, 0x000c, memoryAGet16(0x0834 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0836 + seg, 0x0004, memoryAGet16(0x0836 + seg, 0x0004) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0837 + seg, 0x000c, memoryAGet16(0x0837 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0838 + seg, 0x000e, memoryAGet16(0x0838 + seg, 0x000e) + seg); // 1654 -> 1841
    memoryASet16(0x0839 + seg, 0x0007, memoryAGet16(0x0839 + seg, 0x0007) + seg); // 1874 -> 1a61
    memoryASet16(0x083a + seg, 0x0009, memoryAGet16(0x083a + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x083b + seg, 0x0003, memoryAGet16(0x083b + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x083b + seg, 0x000b, memoryAGet16(0x083b + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x083e + seg, 0x000d, memoryAGet16(0x083e + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x083f + seg, 0x0006, memoryAGet16(0x083f + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x083f + seg, 0x000e, memoryAGet16(0x083f + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x0840 + seg, 0x0003, memoryAGet16(0x0840 + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x0840 + seg, 0x000c, memoryAGet16(0x0840 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x0841 + seg, 0x000d, memoryAGet16(0x0841 + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x0842 + seg, 0x0007, memoryAGet16(0x0842 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x0842 + seg, 0x000f, memoryAGet16(0x0842 + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x0846 + seg, 0x0003, memoryAGet16(0x0846 + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x084d + seg, 0x000c, memoryAGet16(0x084d + seg, 0x000c) + seg); // 1654 -> 1841
    memoryASet16(0x0862 + seg, 0x0006, memoryAGet16(0x0862 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x086f + seg, 0x0004, memoryAGet16(0x086f + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x0870 + seg, 0x0002, memoryAGet16(0x0870 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x088f + seg, 0x0007, memoryAGet16(0x088f + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x08a0 + seg, 0x0003, memoryAGet16(0x08a0 + seg, 0x0003) + seg); // 037d -> 056a
    memoryASet16(0x08a2 + seg, 0x0003, memoryAGet16(0x08a2 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x08a6 + seg, 0x000f, memoryAGet16(0x08a6 + seg, 0x000f) + seg); // 037d -> 056a
    memoryASet16(0x08a7 + seg, 0x000d, memoryAGet16(0x08a7 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x08a9 + seg, 0x0000, memoryAGet16(0x08a9 + seg, 0x0000) + seg); // 1654 -> 1841
    memoryASet16(0x08af + seg, 0x0004, memoryAGet16(0x08af + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x08b0 + seg, 0x000c, memoryAGet16(0x08b0 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x08b2 + seg, 0x0004, memoryAGet16(0x08b2 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x08c6 + seg, 0x0009, memoryAGet16(0x08c6 + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x08c8 + seg, 0x0009, memoryAGet16(0x08c8 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x08cb + seg, 0x0003, memoryAGet16(0x08cb + seg, 0x0003) + seg); // 037d -> 056a
    memoryASet16(0x08cb + seg, 0x000b, memoryAGet16(0x08cb + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x08ce + seg, 0x0007, memoryAGet16(0x08ce + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x08cf + seg, 0x0005, memoryAGet16(0x08cf + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x08d0 + seg, 0x0001, memoryAGet16(0x08d0 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x08d2 + seg, 0x0005, memoryAGet16(0x08d2 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x08d3 + seg, 0x0006, memoryAGet16(0x08d3 + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x08d3 + seg, 0x000e, memoryAGet16(0x08d3 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x08d4 + seg, 0x000f, memoryAGet16(0x08d4 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x08d5 + seg, 0x0004, memoryAGet16(0x08d5 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x08d6 + seg, 0x0001, memoryAGet16(0x08d6 + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x08d6 + seg, 0x000f, memoryAGet16(0x08d6 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x08d8 + seg, 0x000b, memoryAGet16(0x08d8 + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x08de + seg, 0x0002, memoryAGet16(0x08de + seg, 0x0002) + seg); // 1d02 -> 1eef
    memoryASet16(0x08df + seg, 0x0000, memoryAGet16(0x08df + seg, 0x0000) + seg); // 1d02 -> 1eef
    memoryASet16(0x08ea + seg, 0x0002, memoryAGet16(0x08ea + seg, 0x0002) + seg); // 1d02 -> 1eef
    memoryASet16(0x08ec + seg, 0x0006, memoryAGet16(0x08ec + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x08ed + seg, 0x000e, memoryAGet16(0x08ed + seg, 0x000e) + seg); // 1654 -> 1841
    memoryASet16(0x08ef + seg, 0x0005, memoryAGet16(0x08ef + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x08f1 + seg, 0x000c, memoryAGet16(0x08f1 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x08fc + seg, 0x0008, memoryAGet16(0x08fc + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x08fd + seg, 0x0006, memoryAGet16(0x08fd + seg, 0x0006) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0907 + seg, 0x000c, memoryAGet16(0x0907 + seg, 0x000c) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0909 + seg, 0x0001, memoryAGet16(0x0909 + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x090b + seg, 0x000c, memoryAGet16(0x090b + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x090d + seg, 0x000d, memoryAGet16(0x090d + seg, 0x000d) + seg); // 1e0a -> 1ff7
    memoryASet16(0x090f + seg, 0x0003, memoryAGet16(0x090f + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x091c + seg, 0x0009, memoryAGet16(0x091c + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x0922 + seg, 0x0004, memoryAGet16(0x0922 + seg, 0x0004) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0923 + seg, 0x000c, memoryAGet16(0x0923 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0927 + seg, 0x0001, memoryAGet16(0x0927 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0929 + seg, 0x0000, memoryAGet16(0x0929 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x092d + seg, 0x000a, memoryAGet16(0x092d + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0930 + seg, 0x0009, memoryAGet16(0x0930 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x093a + seg, 0x0003, memoryAGet16(0x093a + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x094d + seg, 0x0002, memoryAGet16(0x094d + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x0956 + seg, 0x0005, memoryAGet16(0x0956 + seg, 0x0005) + seg); // 037d -> 056a
    memoryASet16(0x0958 + seg, 0x0008, memoryAGet16(0x0958 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x095b + seg, 0x000d, memoryAGet16(0x095b + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0960 + seg, 0x000d, memoryAGet16(0x0960 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0961 + seg, 0x000d, memoryAGet16(0x0961 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0963 + seg, 0x0000, memoryAGet16(0x0963 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0964 + seg, 0x0004, memoryAGet16(0x0964 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0965 + seg, 0x000c, memoryAGet16(0x0965 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0967 + seg, 0x0002, memoryAGet16(0x0967 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x096d + seg, 0x0003, memoryAGet16(0x096d + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x096e + seg, 0x0004, memoryAGet16(0x096e + seg, 0x0004) + seg); // 037d -> 056a
    memoryASet16(0x0973 + seg, 0x000c, memoryAGet16(0x0973 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x0975 + seg, 0x0000, memoryAGet16(0x0975 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x0976 + seg, 0x0000, memoryAGet16(0x0976 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x0977 + seg, 0x0000, memoryAGet16(0x0977 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x0978 + seg, 0x0004, memoryAGet16(0x0978 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x0979 + seg, 0x0004, memoryAGet16(0x0979 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x097b + seg, 0x0002, memoryAGet16(0x097b + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x097e + seg, 0x0001, memoryAGet16(0x097e + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x0981 + seg, 0x0007, memoryAGet16(0x0981 + seg, 0x0007) + seg); // 2a3a -> 2c27
    memoryASet16(0x0985 + seg, 0x000d, memoryAGet16(0x0985 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x0987 + seg, 0x000b, memoryAGet16(0x0987 + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x0989 + seg, 0x000c, memoryAGet16(0x0989 + seg, 0x000c) + seg); // 2a3a -> 2c27
    memoryASet16(0x098b + seg, 0x0008, memoryAGet16(0x098b + seg, 0x0008) + seg); // 2a3a -> 2c27
    memoryASet16(0x098e + seg, 0x0003, memoryAGet16(0x098e + seg, 0x0003) + seg); // 037d -> 056a
    memoryASet16(0x0990 + seg, 0x0007, memoryAGet16(0x0990 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0991 + seg, 0x0003, memoryAGet16(0x0991 + seg, 0x0003) + seg); // 12a6 -> 1493
    memoryASet16(0x0991 + seg, 0x000f, memoryAGet16(0x0991 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x0992 + seg, 0x000b, memoryAGet16(0x0992 + seg, 0x000b) + seg); // 12a6 -> 1493
    memoryASet16(0x0993 + seg, 0x0007, memoryAGet16(0x0993 + seg, 0x0007) + seg); // 12a6 -> 1493
    memoryASet16(0x0994 + seg, 0x0003, memoryAGet16(0x0994 + seg, 0x0003) + seg); // 12a6 -> 1493
    memoryASet16(0x0994 + seg, 0x000f, memoryAGet16(0x0994 + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x0995 + seg, 0x000f, memoryAGet16(0x0995 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0997 + seg, 0x0002, memoryAGet16(0x0997 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0998 + seg, 0x0006, memoryAGet16(0x0998 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0999 + seg, 0x000a, memoryAGet16(0x0999 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x099a + seg, 0x000e, memoryAGet16(0x099a + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x099b + seg, 0x0008, memoryAGet16(0x099b + seg, 0x0008) + seg); // 1460 -> 164d
    memoryASet16(0x099e + seg, 0x000d, memoryAGet16(0x099e + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x099f + seg, 0x0005, memoryAGet16(0x099f + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09a1 + seg, 0x0006, memoryAGet16(0x09a1 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09a2 + seg, 0x0005, memoryAGet16(0x09a2 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x09a3 + seg, 0x0001, memoryAGet16(0x09a3 + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x09a4 + seg, 0x0007, memoryAGet16(0x09a4 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x09a7 + seg, 0x0008, memoryAGet16(0x09a7 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09a8 + seg, 0x000d, memoryAGet16(0x09a8 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09ab + seg, 0x000d, memoryAGet16(0x09ab + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09b2 + seg, 0x0001, memoryAGet16(0x09b2 + seg, 0x0001) + seg); // 12a6 -> 1493
    memoryASet16(0x09b2 + seg, 0x0006, memoryAGet16(0x09b2 + seg, 0x0006) + seg); // 12a6 -> 1493
    memoryASet16(0x09b2 + seg, 0x000f, memoryAGet16(0x09b2 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09b3 + seg, 0x0007, memoryAGet16(0x09b3 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x09b4 + seg, 0x000f, memoryAGet16(0x09b4 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x09b6 + seg, 0x0001, memoryAGet16(0x09b6 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09b6 + seg, 0x000e, memoryAGet16(0x09b6 + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x09b7 + seg, 0x0003, memoryAGet16(0x09b7 + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x09b8 + seg, 0x000e, memoryAGet16(0x09b8 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09b9 + seg, 0x0006, memoryAGet16(0x09b9 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x09ba + seg, 0x000a, memoryAGet16(0x09ba + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x09be + seg, 0x0002, memoryAGet16(0x09be + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x09c5 + seg, 0x0006, memoryAGet16(0x09c5 + seg, 0x0006) + seg); // 155e -> 174b
    memoryASet16(0x09c5 + seg, 0x000e, memoryAGet16(0x09c5 + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x09c8 + seg, 0x000b, memoryAGet16(0x09c8 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09c9 + seg, 0x0003, memoryAGet16(0x09c9 + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x09c9 + seg, 0x0008, memoryAGet16(0x09c9 + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x09c9 + seg, 0x000d, memoryAGet16(0x09c9 + seg, 0x000d) + seg); // 12a6 -> 1493
    memoryASet16(0x09ca + seg, 0x0006, memoryAGet16(0x09ca + seg, 0x0006) + seg); // 12a6 -> 1493
    memoryASet16(0x09cb + seg, 0x0002, memoryAGet16(0x09cb + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x09cb + seg, 0x000e, memoryAGet16(0x09cb + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x09cd + seg, 0x000d, memoryAGet16(0x09cd + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x09cf + seg, 0x0002, memoryAGet16(0x09cf + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x09cf + seg, 0x000e, memoryAGet16(0x09cf + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x09d1 + seg, 0x0002, memoryAGet16(0x09d1 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09d1 + seg, 0x000e, memoryAGet16(0x09d1 + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x09d2 + seg, 0x000b, memoryAGet16(0x09d2 + seg, 0x000b) + seg); // 1e0a -> 1ff7
    memoryASet16(0x09d4 + seg, 0x0005, memoryAGet16(0x09d4 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09d5 + seg, 0x0001, memoryAGet16(0x09d5 + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x09d5 + seg, 0x000e, memoryAGet16(0x09d5 + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x09d7 + seg, 0x000a, memoryAGet16(0x09d7 + seg, 0x000a) + seg); // 06bd -> 08aa
    memoryASet16(0x09d8 + seg, 0x0003, memoryAGet16(0x09d8 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x09d8 + seg, 0x000f, memoryAGet16(0x09d8 + seg, 0x000f) + seg); // 155e -> 174b
    memoryASet16(0x09d9 + seg, 0x000b, memoryAGet16(0x09d9 + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x09da + seg, 0x0003, memoryAGet16(0x09da + seg, 0x0003) + seg); // 12a6 -> 1493
    memoryASet16(0x09da + seg, 0x0008, memoryAGet16(0x09da + seg, 0x0008) + seg); // 1460 -> 164d
    memoryASet16(0x09db + seg, 0x0001, memoryAGet16(0x09db + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x09db + seg, 0x0009, memoryAGet16(0x09db + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x09db + seg, 0x000e, memoryAGet16(0x09db + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x0a7c + seg, 0x0002, memoryAGet16(0x0a7c + seg, 0x0002) + seg); // 037d -> 056a
    memoryASet16(0x0abc + seg, 0x0002, memoryAGet16(0x0abc + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0ac0 + seg, 0x0004, memoryAGet16(0x0ac0 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0ac6 + seg, 0x0000, memoryAGet16(0x0ac6 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0aca + seg, 0x0001, memoryAGet16(0x0aca + seg, 0x0001) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0aed + seg, 0x000f, memoryAGet16(0x0aed + seg, 0x000f) + seg); // 06bd -> 08aa
    memoryASet16(0x0b46 + seg, 0x0002, memoryAGet16(0x0b46 + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0b52 + seg, 0x0008, memoryAGet16(0x0b52 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0b54 + seg, 0x000d, memoryAGet16(0x0b54 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x0b57 + seg, 0x0006, memoryAGet16(0x0b57 + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b5a + seg, 0x0006, memoryAGet16(0x0b5a + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b5d + seg, 0x0003, memoryAGet16(0x0b5d + seg, 0x0003) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b5f + seg, 0x000f, memoryAGet16(0x0b5f + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x0b62 + seg, 0x0008, memoryAGet16(0x0b62 + seg, 0x0008) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b65 + seg, 0x0008, memoryAGet16(0x0b65 + seg, 0x0008) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b68 + seg, 0x000e, memoryAGet16(0x0b68 + seg, 0x000e) + seg); // 1d02 -> 1eef
    memoryASet16(0x0b6b + seg, 0x000a, memoryAGet16(0x0b6b + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0b6c + seg, 0x000c, memoryAGet16(0x0b6c + seg, 0x000c) + seg); // 037d -> 056a
    memoryASet16(0x0b73 + seg, 0x0004, memoryAGet16(0x0b73 + seg, 0x0004) + seg); // 1654 -> 1841
    memoryASet16(0x0b7d + seg, 0x0006, memoryAGet16(0x0b7d + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x0b84 + seg, 0x000b, memoryAGet16(0x0b84 + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0ba4 + seg, 0x0001, memoryAGet16(0x0ba4 + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0ba5 + seg, 0x000a, memoryAGet16(0x0ba5 + seg, 0x000a) + seg); // 1874 -> 1a61
    memoryASet16(0x0bae + seg, 0x0003, memoryAGet16(0x0bae + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0bb2 + seg, 0x0001, memoryAGet16(0x0bb2 + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0bc7 + seg, 0x0003, memoryAGet16(0x0bc7 + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x0bde + seg, 0x000c, memoryAGet16(0x0bde + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x0bef + seg, 0x0008, memoryAGet16(0x0bef + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x0bf3 + seg, 0x000f, memoryAGet16(0x0bf3 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x0bf8 + seg, 0x000e, memoryAGet16(0x0bf8 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0bfb + seg, 0x0001, memoryAGet16(0x0bfb + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0c0a + seg, 0x0000, memoryAGet16(0x0c0a + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c0a + seg, 0x000e, memoryAGet16(0x0c0a + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x0c14 + seg, 0x0003, memoryAGet16(0x0c14 + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x0c14 + seg, 0x000f, memoryAGet16(0x0c14 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x0c1e + seg, 0x0001, memoryAGet16(0x0c1e + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x0c29 + seg, 0x0005, memoryAGet16(0x0c29 + seg, 0x0005) + seg); // 1654 -> 1841
    memoryASet16(0x0c2a + seg, 0x0001, memoryAGet16(0x0c2a + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0c2a + seg, 0x000c, memoryAGet16(0x0c2a + seg, 0x000c) + seg); // 06bd -> 08aa
    memoryASet16(0x0c2e + seg, 0x0006, memoryAGet16(0x0c2e + seg, 0x0006) + seg); // 037d -> 056a
    memoryASet16(0x0c35 + seg, 0x0000, memoryAGet16(0x0c35 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c3f + seg, 0x0000, memoryAGet16(0x0c3f + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c3f + seg, 0x000b, memoryAGet16(0x0c3f + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c43 + seg, 0x0008, memoryAGet16(0x0c43 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c44 + seg, 0x0003, memoryAGet16(0x0c44 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c4e + seg, 0x000d, memoryAGet16(0x0c4e + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x0c51 + seg, 0x0005, memoryAGet16(0x0c51 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c52 + seg, 0x0000, memoryAGet16(0x0c52 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c56 + seg, 0x0005, memoryAGet16(0x0c56 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c57 + seg, 0x0000, memoryAGet16(0x0c57 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c59 + seg, 0x0004, memoryAGet16(0x0c59 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0c69 + seg, 0x0006, memoryAGet16(0x0c69 + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x0c77 + seg, 0x0000, memoryAGet16(0x0c77 + seg, 0x0000) + seg); // 1874 -> 1a61
    memoryASet16(0x0c87 + seg, 0x0001, memoryAGet16(0x0c87 + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0c9b + seg, 0x000e, memoryAGet16(0x0c9b + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0c9d + seg, 0x000a, memoryAGet16(0x0c9d + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ca0 + seg, 0x0001, memoryAGet16(0x0ca0 + seg, 0x0001) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ca1 + seg, 0x0009, memoryAGet16(0x0ca1 + seg, 0x0009) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ca3 + seg, 0x000a, memoryAGet16(0x0ca3 + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ca5 + seg, 0x000a, memoryAGet16(0x0ca5 + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ca7 + seg, 0x000a, memoryAGet16(0x0ca7 + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0caa + seg, 0x0001, memoryAGet16(0x0caa + seg, 0x0001) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0cab + seg, 0x000d, memoryAGet16(0x0cab + seg, 0x000d) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0cae + seg, 0x0003, memoryAGet16(0x0cae + seg, 0x0003) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0caf + seg, 0x000e, memoryAGet16(0x0caf + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0cb2 + seg, 0x0005, memoryAGet16(0x0cb2 + seg, 0x0005) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0cb4 + seg, 0x0002, memoryAGet16(0x0cb4 + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0cbc + seg, 0x0004, memoryAGet16(0x0cbc + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cbd + seg, 0x0007, memoryAGet16(0x0cbd + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cc3 + seg, 0x0004, memoryAGet16(0x0cc3 + seg, 0x0004) + seg); // 1d02 -> 1eef
    memoryASet16(0x0cc4 + seg, 0x0006, memoryAGet16(0x0cc4 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cc5 + seg, 0x0008, memoryAGet16(0x0cc5 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cc6 + seg, 0x0004, memoryAGet16(0x0cc6 + seg, 0x0004) + seg); // 1d02 -> 1eef
    memoryASet16(0x0cc7 + seg, 0x0006, memoryAGet16(0x0cc7 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cc8 + seg, 0x0008, memoryAGet16(0x0cc8 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cc9 + seg, 0x0004, memoryAGet16(0x0cc9 + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x0cd1 + seg, 0x0003, memoryAGet16(0x0cd1 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0cd3 + seg, 0x0009, memoryAGet16(0x0cd3 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x0cd7 + seg, 0x0007, memoryAGet16(0x0cd7 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cd9 + seg, 0x0007, memoryAGet16(0x0cd9 + seg, 0x0007) + seg); // 0e8f -> 107c
    memoryASet16(0x0cd9 + seg, 0x000c, memoryAGet16(0x0cd9 + seg, 0x000c) + seg); // 1654 -> 1841
    memoryASet16(0x0cda + seg, 0x0002, memoryAGet16(0x0cda + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x0cdb + seg, 0x0002, memoryAGet16(0x0cdb + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x0cdd + seg, 0x0007, memoryAGet16(0x0cdd + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cdf + seg, 0x0000, memoryAGet16(0x0cdf + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cdf + seg, 0x000c, memoryAGet16(0x0cdf + seg, 0x000c) + seg); // 0e8f -> 107c
    memoryASet16(0x0ce0 + seg, 0x0002, memoryAGet16(0x0ce0 + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x0ce0 + seg, 0x000a, memoryAGet16(0x0ce0 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0ce5 + seg, 0x000b, memoryAGet16(0x0ce5 + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0ce7 + seg, 0x0000, memoryAGet16(0x0ce7 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0ce9 + seg, 0x0003, memoryAGet16(0x0ce9 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cea + seg, 0x000b, memoryAGet16(0x0cea + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cf1 + seg, 0x0005, memoryAGet16(0x0cf1 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cf3 + seg, 0x0008, memoryAGet16(0x0cf3 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x0cf9 + seg, 0x0002, memoryAGet16(0x0cf9 + seg, 0x0002) + seg); // 1654 -> 1841
    memoryASet16(0x0cfa + seg, 0x0002, memoryAGet16(0x0cfa + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x0cfb + seg, 0x0002, memoryAGet16(0x0cfb + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x0cfe + seg, 0x000b, memoryAGet16(0x0cfe + seg, 0x000b) + seg); // 06bd -> 08aa
    memoryASet16(0x0d02 + seg, 0x000d, memoryAGet16(0x0d02 + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d05 + seg, 0x000a, memoryAGet16(0x0d05 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0d06 + seg, 0x0006, memoryAGet16(0x0d06 + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x0d07 + seg, 0x0000, memoryAGet16(0x0d07 + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x0d08 + seg, 0x000e, memoryAGet16(0x0d08 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0d09 + seg, 0x000e, memoryAGet16(0x0d09 + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x0d0d + seg, 0x0007, memoryAGet16(0x0d0d + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d1e + seg, 0x000f, memoryAGet16(0x0d1e + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d29 + seg, 0x000a, memoryAGet16(0x0d29 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0d2b + seg, 0x0006, memoryAGet16(0x0d2b + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x0d2d + seg, 0x0004, memoryAGet16(0x0d2d + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d31 + seg, 0x0003, memoryAGet16(0x0d31 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d33 + seg, 0x000a, memoryAGet16(0x0d33 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d35 + seg, 0x0007, memoryAGet16(0x0d35 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x0d37 + seg, 0x0003, memoryAGet16(0x0d37 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0d39 + seg, 0x0001, memoryAGet16(0x0d39 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d3c + seg, 0x000c, memoryAGet16(0x0d3c + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d3e + seg, 0x000e, memoryAGet16(0x0d3e + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d44 + seg, 0x0000, memoryAGet16(0x0d44 + seg, 0x0000) + seg); // 1654 -> 1841
    memoryASet16(0x0d4a + seg, 0x0006, memoryAGet16(0x0d4a + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x0d51 + seg, 0x0006, memoryAGet16(0x0d51 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d52 + seg, 0x000c, memoryAGet16(0x0d52 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d54 + seg, 0x0002, memoryAGet16(0x0d54 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d55 + seg, 0x0001, memoryAGet16(0x0d55 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d55 + seg, 0x000d, memoryAGet16(0x0d55 + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x0d68 + seg, 0x0002, memoryAGet16(0x0d68 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d75 + seg, 0x0009, memoryAGet16(0x0d75 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d77 + seg, 0x0006, memoryAGet16(0x0d77 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x0d7d + seg, 0x000b, memoryAGet16(0x0d7d + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x0d83 + seg, 0x000f, memoryAGet16(0x0d83 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x0d84 + seg, 0x000c, memoryAGet16(0x0d84 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d86 + seg, 0x0009, memoryAGet16(0x0d86 + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x0d8c + seg, 0x000b, memoryAGet16(0x0d8c + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d8e + seg, 0x0008, memoryAGet16(0x0d8e + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x0d94 + seg, 0x0001, memoryAGet16(0x0d94 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d95 + seg, 0x0003, memoryAGet16(0x0d95 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x0d95 + seg, 0x0009, memoryAGet16(0x0d95 + seg, 0x0009) + seg); // 2a3a -> 2c27
    memoryASet16(0x0d9e + seg, 0x000f, memoryAGet16(0x0d9e + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x0da1 + seg, 0x0002, memoryAGet16(0x0da1 + seg, 0x0002) + seg); // 12a6 -> 1493
    memoryASet16(0x0da3 + seg, 0x0005, memoryAGet16(0x0da3 + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x0dad + seg, 0x000f, memoryAGet16(0x0dad + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x0dae + seg, 0x000b, memoryAGet16(0x0dae + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0dbc + seg, 0x0005, memoryAGet16(0x0dbc + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x0dbd + seg, 0x000d, memoryAGet16(0x0dbd + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x0dbe + seg, 0x0009, memoryAGet16(0x0dbe + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x0dcb + seg, 0x0008, memoryAGet16(0x0dcb + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x0dcd + seg, 0x0000, memoryAGet16(0x0dcd + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x0dcd + seg, 0x000c, memoryAGet16(0x0dcd + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x0dd9 + seg, 0x000d, memoryAGet16(0x0dd9 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x0ddf + seg, 0x0002, memoryAGet16(0x0ddf + seg, 0x0002) + seg); // 1654 -> 1841
    memoryASet16(0x0dea + seg, 0x0009, memoryAGet16(0x0dea + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x0df1 + seg, 0x0007, memoryAGet16(0x0df1 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0df8 + seg, 0x0003, memoryAGet16(0x0df8 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0e07 + seg, 0x000e, memoryAGet16(0x0e07 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0e09 + seg, 0x0003, memoryAGet16(0x0e09 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0e18 + seg, 0x0002, memoryAGet16(0x0e18 + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x0e19 + seg, 0x0001, memoryAGet16(0x0e19 + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x0e21 + seg, 0x0004, memoryAGet16(0x0e21 + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x0e21 + seg, 0x000c, memoryAGet16(0x0e21 + seg, 0x000c) + seg); // 0e8f -> 107c
    memoryASet16(0x0e22 + seg, 0x0001, memoryAGet16(0x0e22 + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x0e23 + seg, 0x000f, memoryAGet16(0x0e23 + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e2c + seg, 0x0001, memoryAGet16(0x0e2c + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e2d + seg, 0x0004, memoryAGet16(0x0e2d + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e2f + seg, 0x0006, memoryAGet16(0x0e2f + seg, 0x0006) + seg); // 06bd -> 08aa
    memoryASet16(0x0e32 + seg, 0x000d, memoryAGet16(0x0e32 + seg, 0x000d) + seg); // 1d02 -> 1eef
    memoryASet16(0x0e34 + seg, 0x0004, memoryAGet16(0x0e34 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e35 + seg, 0x0008, memoryAGet16(0x0e35 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x0e3e + seg, 0x0004, memoryAGet16(0x0e3e + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x0e3e + seg, 0x000b, memoryAGet16(0x0e3e + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0e41 + seg, 0x0007, memoryAGet16(0x0e41 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0e41 + seg, 0x000e, memoryAGet16(0x0e41 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x0e4a + seg, 0x000a, memoryAGet16(0x0e4a + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e4c + seg, 0x0005, memoryAGet16(0x0e4c + seg, 0x0005) + seg); // 1874 -> 1a61
    memoryASet16(0x0e4c + seg, 0x000e, memoryAGet16(0x0e4c + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0e53 + seg, 0x0009, memoryAGet16(0x0e53 + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x0e55 + seg, 0x000e, memoryAGet16(0x0e55 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0e57 + seg, 0x0007, memoryAGet16(0x0e57 + seg, 0x0007) + seg); // 1874 -> 1a61
    memoryASet16(0x0e58 + seg, 0x0009, memoryAGet16(0x0e58 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x0e5b + seg, 0x0003, memoryAGet16(0x0e5b + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0e60 + seg, 0x000e, memoryAGet16(0x0e60 + seg, 0x000e) + seg); // 037d -> 056a
    memoryASet16(0x0e61 + seg, 0x000e, memoryAGet16(0x0e61 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e64 + seg, 0x0006, memoryAGet16(0x0e64 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x0e65 + seg, 0x0002, memoryAGet16(0x0e65 + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x0e6b + seg, 0x000d, memoryAGet16(0x0e6b + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x0e86 + seg, 0x000a, memoryAGet16(0x0e86 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0e8e + seg, 0x0008, memoryAGet16(0x0e8e + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x0e8f + seg, 0x000e, memoryAGet16(0x0e8f + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x0e90 + seg, 0x000e, memoryAGet16(0x0e90 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x0e95 + seg, 0x000f, memoryAGet16(0x0e95 + seg, 0x000f) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0e96 + seg, 0x0007, memoryAGet16(0x0e96 + seg, 0x0007) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0e97 + seg, 0x0000, memoryAGet16(0x0e97 + seg, 0x0000) + seg); // 2a3a -> 2c27
    memoryASet16(0x0e98 + seg, 0x000b, memoryAGet16(0x0e98 + seg, 0x000b) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0e99 + seg, 0x0003, memoryAGet16(0x0e99 + seg, 0x0003) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0e99 + seg, 0x000c, memoryAGet16(0x0e99 + seg, 0x000c) + seg); // 2a3a -> 2c27
    memoryASet16(0x0e9b + seg, 0x0003, memoryAGet16(0x0e9b + seg, 0x0003) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0e9b + seg, 0x000b, memoryAGet16(0x0e9b + seg, 0x000b) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0e9c + seg, 0x0004, memoryAGet16(0x0e9c + seg, 0x0004) + seg); // 2a3a -> 2c27
    memoryASet16(0x0e9d + seg, 0x000b, memoryAGet16(0x0e9d + seg, 0x000b) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ea0 + seg, 0x0004, memoryAGet16(0x0ea0 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x0ea1 + seg, 0x0009, memoryAGet16(0x0ea1 + seg, 0x0009) + seg); // 11a2 -> 138f
    memoryASet16(0x0ea4 + seg, 0x0002, memoryAGet16(0x0ea4 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x0ea6 + seg, 0x000b, memoryAGet16(0x0ea6 + seg, 0x000b) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ea8 + seg, 0x0000, memoryAGet16(0x0ea8 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x0ea9 + seg, 0x0005, memoryAGet16(0x0ea9 + seg, 0x0005) + seg); // 1080 -> 126d
    memoryASet16(0x0eaa + seg, 0x0006, memoryAGet16(0x0eaa + seg, 0x0006) + seg); // 2a3a -> 2c27
    memoryASet16(0x0eac + seg, 0x0004, memoryAGet16(0x0eac + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x0ead + seg, 0x0005, memoryAGet16(0x0ead + seg, 0x0005) + seg); // 2a3a -> 2c27
    memoryASet16(0x0eaf + seg, 0x0003, memoryAGet16(0x0eaf + seg, 0x0003) + seg); // 1080 -> 126d
    memoryASet16(0x0eb0 + seg, 0x0008, memoryAGet16(0x0eb0 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x0eb3 + seg, 0x0007, memoryAGet16(0x0eb3 + seg, 0x0007) + seg); // 1080 -> 126d
    memoryASet16(0x0eb6 + seg, 0x0000, memoryAGet16(0x0eb6 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x0eb7 + seg, 0x0005, memoryAGet16(0x0eb7 + seg, 0x0005) + seg); // 11a2 -> 138f
    memoryASet16(0x0eb9 + seg, 0x000e, memoryAGet16(0x0eb9 + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x0ebb + seg, 0x0003, memoryAGet16(0x0ebb + seg, 0x0003) + seg); // 11a2 -> 138f
    memoryASet16(0x0ebc + seg, 0x0008, memoryAGet16(0x0ebc + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x0ebf + seg, 0x0001, memoryAGet16(0x0ebf + seg, 0x0001) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ec0 + seg, 0x0006, memoryAGet16(0x0ec0 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ec2 + seg, 0x000f, memoryAGet16(0x0ec2 + seg, 0x000f) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ec4 + seg, 0x0008, memoryAGet16(0x0ec4 + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x0ec5 + seg, 0x000a, memoryAGet16(0x0ec5 + seg, 0x000a) + seg); // 1654 -> 1841
    memoryASet16(0x0ec7 + seg, 0x0000, memoryAGet16(0x0ec7 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x0ec8 + seg, 0x0005, memoryAGet16(0x0ec8 + seg, 0x0005) + seg); // 1080 -> 126d
    memoryASet16(0x0ec9 + seg, 0x000a, memoryAGet16(0x0ec9 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ecb + seg, 0x0007, memoryAGet16(0x0ecb + seg, 0x0007) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ecd + seg, 0x0005, memoryAGet16(0x0ecd + seg, 0x0005) + seg); // 11a2 -> 138f
    memoryASet16(0x0ecd + seg, 0x000b, memoryAGet16(0x0ecd + seg, 0x000b) + seg); // 2a3a -> 2c27
    memoryASet16(0x0ecf + seg, 0x000a, memoryAGet16(0x0ecf + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ed0 + seg, 0x0008, memoryAGet16(0x0ed0 + seg, 0x0008) + seg); // 2a3a -> 2c27
    memoryASet16(0x0ed1 + seg, 0x000d, memoryAGet16(0x0ed1 + seg, 0x000d) + seg); // 2a3a -> 2c27
    memoryASet16(0x0ed4 + seg, 0x0005, memoryAGet16(0x0ed4 + seg, 0x0005) + seg); // 11a2 -> 138f
    memoryASet16(0x0ed6 + seg, 0x000b, memoryAGet16(0x0ed6 + seg, 0x000b) + seg); // 11a2 -> 138f
    memoryASet16(0x0ed8 + seg, 0x0007, memoryAGet16(0x0ed8 + seg, 0x0007) + seg); // 11a2 -> 138f
    memoryASet16(0x0eda + seg, 0x0002, memoryAGet16(0x0eda + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x0edc + seg, 0x0008, memoryAGet16(0x0edc + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x0edf + seg, 0x0002, memoryAGet16(0x0edf + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x0ee5 + seg, 0x0008, memoryAGet16(0x0ee5 + seg, 0x0008) + seg); // 2a3a -> 2c27
    memoryASet16(0x0ef3 + seg, 0x000b, memoryAGet16(0x0ef3 + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x0ef4 + seg, 0x0000, memoryAGet16(0x0ef4 + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x0ef4 + seg, 0x0005, memoryAGet16(0x0ef4 + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x0ef4 + seg, 0x0008, memoryAGet16(0x0ef4 + seg, 0x0008) + seg); // 2a3a -> 2c27
    memoryASet16(0x0ef6 + seg, 0x0009, memoryAGet16(0x0ef6 + seg, 0x0009) + seg); // 12a6 -> 1493
    memoryASet16(0x0ef7 + seg, 0x0001, memoryAGet16(0x0ef7 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0ef7 + seg, 0x000e, memoryAGet16(0x0ef7 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x0ef9 + seg, 0x0002, memoryAGet16(0x0ef9 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0efa + seg, 0x000d, memoryAGet16(0x0efa + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x0efc + seg, 0x0000, memoryAGet16(0x0efc + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x0efc + seg, 0x000e, memoryAGet16(0x0efc + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x0efd + seg, 0x0006, memoryAGet16(0x0efd + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0efd + seg, 0x000f, memoryAGet16(0x0efd + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x0efe + seg, 0x000b, memoryAGet16(0x0efe + seg, 0x000b) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0eff + seg, 0x0003, memoryAGet16(0x0eff + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x0eff + seg, 0x0008, memoryAGet16(0x0eff + seg, 0x0008) + seg); // 1460 -> 164d
    memoryASet16(0x0f00 + seg, 0x0005, memoryAGet16(0x0f00 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f02 + seg, 0x0000, memoryAGet16(0x0f02 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f03 + seg, 0x000d, memoryAGet16(0x0f03 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f04 + seg, 0x000b, memoryAGet16(0x0f04 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f05 + seg, 0x0003, memoryAGet16(0x0f05 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f05 + seg, 0x000c, memoryAGet16(0x0f05 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f06 + seg, 0x0004, memoryAGet16(0x0f06 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0f06 + seg, 0x0009, memoryAGet16(0x0f06 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0f07 + seg, 0x000e, memoryAGet16(0x0f07 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f08 + seg, 0x0006, memoryAGet16(0x0f08 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f08 + seg, 0x000f, memoryAGet16(0x0f08 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f09 + seg, 0x0007, memoryAGet16(0x0f09 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x0f09 + seg, 0x000c, memoryAGet16(0x0f09 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x0f0a + seg, 0x0001, memoryAGet16(0x0f0a + seg, 0x0001) + seg); // 12a6 -> 1493
    memoryASet16(0x0f0a + seg, 0x000a, memoryAGet16(0x0f0a + seg, 0x000a) + seg); // 06bd -> 08aa
    memoryASet16(0x0f0d + seg, 0x0003, memoryAGet16(0x0f0d + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0f0d + seg, 0x0008, memoryAGet16(0x0f0d + seg, 0x0008) + seg); // 12a6 -> 1493
    memoryASet16(0x0f0d + seg, 0x000b, memoryAGet16(0x0f0d + seg, 0x000b) + seg); // 2a3a -> 2c27
    memoryASet16(0x0f0f + seg, 0x000c, memoryAGet16(0x0f0f + seg, 0x000c) + seg); // 12a6 -> 1493
    memoryASet16(0x0f10 + seg, 0x0004, memoryAGet16(0x0f10 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f10 + seg, 0x000d, memoryAGet16(0x0f10 + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x0f11 + seg, 0x000d, memoryAGet16(0x0f11 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f13 + seg, 0x0001, memoryAGet16(0x0f13 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f14 + seg, 0x0006, memoryAGet16(0x0f14 + seg, 0x0006) + seg); // 1f58 -> 2145
    memoryASet16(0x0f15 + seg, 0x0006, memoryAGet16(0x0f15 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x0f16 + seg, 0x0003, memoryAGet16(0x0f16 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f16 + seg, 0x000b, memoryAGet16(0x0f16 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f17 + seg, 0x0004, memoryAGet16(0x0f17 + seg, 0x0004) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f17 + seg, 0x000c, memoryAGet16(0x0f17 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x0f18 + seg, 0x0001, memoryAGet16(0x0f18 + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x0f18 + seg, 0x000e, memoryAGet16(0x0f18 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f1a + seg, 0x0002, memoryAGet16(0x0f1a + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f1b + seg, 0x0007, memoryAGet16(0x0f1b + seg, 0x0007) + seg); // 1f5e -> 214b
    memoryASet16(0x0f1c + seg, 0x0007, memoryAGet16(0x0f1c + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0f1d + seg, 0x0004, memoryAGet16(0x0f1d + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f1d + seg, 0x000c, memoryAGet16(0x0f1d + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f1e + seg, 0x0005, memoryAGet16(0x0f1e + seg, 0x0005) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f1e + seg, 0x000d, memoryAGet16(0x0f1e + seg, 0x000d) + seg); // 1460 -> 164d
    memoryASet16(0x0f1f + seg, 0x0002, memoryAGet16(0x0f1f + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x0f1f + seg, 0x000f, memoryAGet16(0x0f1f + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f21 + seg, 0x000a, memoryAGet16(0x0f21 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f22 + seg, 0x000a, memoryAGet16(0x0f22 + seg, 0x000a) + seg); // 1f63 -> 2150
    memoryASet16(0x0f23 + seg, 0x000a, memoryAGet16(0x0f23 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x0f24 + seg, 0x0007, memoryAGet16(0x0f24 + seg, 0x0007) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f24 + seg, 0x000f, memoryAGet16(0x0f24 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f25 + seg, 0x0008, memoryAGet16(0x0f25 + seg, 0x0008) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f26 + seg, 0x0000, memoryAGet16(0x0f26 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x0f26 + seg, 0x0005, memoryAGet16(0x0f26 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x0f27 + seg, 0x0002, memoryAGet16(0x0f27 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f28 + seg, 0x0006, memoryAGet16(0x0f28 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f29 + seg, 0x000b, memoryAGet16(0x0f29 + seg, 0x000b) + seg); // 1f65 -> 2152
    memoryASet16(0x0f2a + seg, 0x000b, memoryAGet16(0x0f2a + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x0f2b + seg, 0x0008, memoryAGet16(0x0f2b + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f2c + seg, 0x0000, memoryAGet16(0x0f2c + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f2c + seg, 0x0009, memoryAGet16(0x0f2c + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f2d + seg, 0x0001, memoryAGet16(0x0f2d + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x0f2d + seg, 0x0006, memoryAGet16(0x0f2d + seg, 0x0006) + seg); // 1460 -> 164d
    memoryASet16(0x0f2e + seg, 0x0003, memoryAGet16(0x0f2e + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f2f + seg, 0x000e, memoryAGet16(0x0f2f + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f31 + seg, 0x000c, memoryAGet16(0x0f31 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f32 + seg, 0x0004, memoryAGet16(0x0f32 + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f32 + seg, 0x000d, memoryAGet16(0x0f32 + seg, 0x000d) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f33 + seg, 0x0005, memoryAGet16(0x0f33 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x0f33 + seg, 0x000a, memoryAGet16(0x0f33 + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x0f33 + seg, 0x000f, memoryAGet16(0x0f33 + seg, 0x000f) + seg); // 06bd -> 08aa
    memoryASet16(0x0f34 + seg, 0x0004, memoryAGet16(0x0f34 + seg, 0x0004) + seg); // 12a6 -> 1493
    memoryASet16(0x0f34 + seg, 0x000d, memoryAGet16(0x0f34 + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x0f35 + seg, 0x000c, memoryAGet16(0x0f35 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x0f36 + seg, 0x0001, memoryAGet16(0x0f36 + seg, 0x0001) + seg); // 12a6 -> 1493
    memoryASet16(0x0f36 + seg, 0x000a, memoryAGet16(0x0f36 + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x0f37 + seg, 0x000a, memoryAGet16(0x0f37 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f39 + seg, 0x0005, memoryAGet16(0x0f39 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f3a + seg, 0x000b, memoryAGet16(0x0f3a + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f3b + seg, 0x0003, memoryAGet16(0x0f3b + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f3b + seg, 0x000c, memoryAGet16(0x0f3b + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f3c + seg, 0x0004, memoryAGet16(0x0f3c + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0f3c + seg, 0x0009, memoryAGet16(0x0f3c + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0f3c + seg, 0x000e, memoryAGet16(0x0f3c + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x0f3d + seg, 0x0008, memoryAGet16(0x0f3d + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x0f3d + seg, 0x000d, memoryAGet16(0x0f3d + seg, 0x000d) + seg); // 12a6 -> 1493
    memoryASet16(0x0f3e + seg, 0x0000, memoryAGet16(0x0f3e + seg, 0x0000) + seg); // 2a3a -> 2c27
    memoryASet16(0x0f3f + seg, 0x000a, memoryAGet16(0x0f3f + seg, 0x000a) + seg); // 12a6 -> 1493
    memoryASet16(0x0f40 + seg, 0x000a, memoryAGet16(0x0f40 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f42 + seg, 0x0005, memoryAGet16(0x0f42 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f43 + seg, 0x000b, memoryAGet16(0x0f43 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f44 + seg, 0x0003, memoryAGet16(0x0f44 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f44 + seg, 0x000c, memoryAGet16(0x0f44 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f45 + seg, 0x0004, memoryAGet16(0x0f45 + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0f45 + seg, 0x0009, memoryAGet16(0x0f45 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0f46 + seg, 0x000e, memoryAGet16(0x0f46 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f47 + seg, 0x0006, memoryAGet16(0x0f47 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f47 + seg, 0x000f, memoryAGet16(0x0f47 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f48 + seg, 0x0007, memoryAGet16(0x0f48 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x0f48 + seg, 0x000c, memoryAGet16(0x0f48 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x0f49 + seg, 0x0001, memoryAGet16(0x0f49 + seg, 0x0001) + seg); // 12a6 -> 1493
    memoryASet16(0x0f49 + seg, 0x000b, memoryAGet16(0x0f49 + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x0f4a + seg, 0x0000, memoryAGet16(0x0f4a + seg, 0x0000) + seg); // 12a6 -> 1493
    memoryASet16(0x0f4a + seg, 0x0003, memoryAGet16(0x0f4a + seg, 0x0003) + seg); // 2a3a -> 2c27
    memoryASet16(0x0f4c + seg, 0x0004, memoryAGet16(0x0f4c + seg, 0x0004) + seg); // 12a6 -> 1493
    memoryASet16(0x0f4d + seg, 0x0000, memoryAGet16(0x0f4d + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x0f4d + seg, 0x0008, memoryAGet16(0x0f4d + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f4e + seg, 0x0005, memoryAGet16(0x0f4e + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f4f + seg, 0x0009, memoryAGet16(0x0f4f + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f51 + seg, 0x000b, memoryAGet16(0x0f51 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f52 + seg, 0x0009, memoryAGet16(0x0f52 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f53 + seg, 0x0001, memoryAGet16(0x0f53 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f53 + seg, 0x000a, memoryAGet16(0x0f53 + seg, 0x000a) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f54 + seg, 0x0002, memoryAGet16(0x0f54 + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x0f54 + seg, 0x0007, memoryAGet16(0x0f54 + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x0f55 + seg, 0x0004, memoryAGet16(0x0f55 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f56 + seg, 0x000f, memoryAGet16(0x0f56 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f58 + seg, 0x000b, memoryAGet16(0x0f58 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x0f59 + seg, 0x0003, memoryAGet16(0x0f59 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f59 + seg, 0x000c, memoryAGet16(0x0f59 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f5a + seg, 0x0004, memoryAGet16(0x0f5a + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x0f5a + seg, 0x0009, memoryAGet16(0x0f5a + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x0f5b + seg, 0x000e, memoryAGet16(0x0f5b + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f5c + seg, 0x0006, memoryAGet16(0x0f5c + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x0f5c + seg, 0x000f, memoryAGet16(0x0f5c + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x0f5d + seg, 0x0007, memoryAGet16(0x0f5d + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x0f5d + seg, 0x000c, memoryAGet16(0x0f5d + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x0f5e + seg, 0x0005, memoryAGet16(0x0f5e + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x0f5e + seg, 0x000a, memoryAGet16(0x0f5e + seg, 0x000a) + seg); // 06bd -> 08aa
    memoryASet16(0x0f62 + seg, 0x000c, memoryAGet16(0x0f62 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x0f64 + seg, 0x0006, memoryAGet16(0x0f64 + seg, 0x0006) + seg); // 06bd -> 08aa
    memoryASet16(0x0f69 + seg, 0x0004, memoryAGet16(0x0f69 + seg, 0x0004) + seg); // 1d02 -> 1eef
    memoryASet16(0x0f6b + seg, 0x0005, memoryAGet16(0x0f6b + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x0f6c + seg, 0x0007, memoryAGet16(0x0f6c + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0f6d + seg, 0x0009, memoryAGet16(0x0f6d + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x0f6e + seg, 0x000b, memoryAGet16(0x0f6e + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0f6f + seg, 0x0007, memoryAGet16(0x0f6f + seg, 0x0007) + seg); // 1874 -> 1a61
    memoryASet16(0x0f98 + seg, 0x000c, memoryAGet16(0x0f98 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x0f9b + seg, 0x0002, memoryAGet16(0x0f9b + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x0f9f + seg, 0x0000, memoryAGet16(0x0f9f + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fa7 + seg, 0x0008, memoryAGet16(0x0fa7 + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x0fa8 + seg, 0x0009, memoryAGet16(0x0fa8 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x0fb0 + seg, 0x0002, memoryAGet16(0x0fb0 + seg, 0x0002) + seg); // 1654 -> 1841
    memoryASet16(0x0fb2 + seg, 0x000b, memoryAGet16(0x0fb2 + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x0fb5 + seg, 0x0003, memoryAGet16(0x0fb5 + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x0fb7 + seg, 0x000b, memoryAGet16(0x0fb7 + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x0fba + seg, 0x0003, memoryAGet16(0x0fba + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x0fbc + seg, 0x000b, memoryAGet16(0x0fbc + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x0fbf + seg, 0x0003, memoryAGet16(0x0fbf + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x0fc1 + seg, 0x000b, memoryAGet16(0x0fc1 + seg, 0x000b) + seg); // 1654 -> 1841
    memoryASet16(0x0fc3 + seg, 0x0000, memoryAGet16(0x0fc3 + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x0fc8 + seg, 0x0004, memoryAGet16(0x0fc8 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fc9 + seg, 0x0006, memoryAGet16(0x0fc9 + seg, 0x0006) + seg); // 06bd -> 08aa
    memoryASet16(0x0fcc + seg, 0x0007, memoryAGet16(0x0fcc + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fcf + seg, 0x0002, memoryAGet16(0x0fcf + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x0fd2 + seg, 0x0001, memoryAGet16(0x0fd2 + seg, 0x0001) + seg); // 1d02 -> 1eef
    memoryASet16(0x0fd4 + seg, 0x000d, memoryAGet16(0x0fd4 + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fd6 + seg, 0x0001, memoryAGet16(0x0fd6 + seg, 0x0001) + seg); // 1d02 -> 1eef
    memoryASet16(0x0fd8 + seg, 0x0007, memoryAGet16(0x0fd8 + seg, 0x0007) + seg); // 06bd -> 08aa
    memoryASet16(0x0fdb + seg, 0x0006, memoryAGet16(0x0fdb + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x0fde + seg, 0x0002, memoryAGet16(0x0fde + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fdf + seg, 0x0003, memoryAGet16(0x0fdf + seg, 0x0003) + seg); // 1d02 -> 1eef
    memoryASet16(0x0fe1 + seg, 0x000e, memoryAGet16(0x0fe1 + seg, 0x000e) + seg); // 1874 -> 1a61
    memoryASet16(0x0fe3 + seg, 0x0004, memoryAGet16(0x0fe3 + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x0fe6 + seg, 0x0002, memoryAGet16(0x0fe6 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fe7 + seg, 0x000d, memoryAGet16(0x0fe7 + seg, 0x000d) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0fe8 + seg, 0x000b, memoryAGet16(0x0fe8 + seg, 0x000b) + seg); // 1d02 -> 1eef
    memoryASet16(0x0fe9 + seg, 0x000b, memoryAGet16(0x0fe9 + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fea + seg, 0x000b, memoryAGet16(0x0fea + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x0fec + seg, 0x000e, memoryAGet16(0x0fec + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x0ff0 + seg, 0x000c, memoryAGet16(0x0ff0 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x0ff3 + seg, 0x0006, memoryAGet16(0x0ff3 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x0ff5 + seg, 0x0005, memoryAGet16(0x0ff5 + seg, 0x0005) + seg); // 0d8f -> 0f7c
    memoryASet16(0x0ff6 + seg, 0x0006, memoryAGet16(0x0ff6 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x0ffa + seg, 0x0005, memoryAGet16(0x0ffa + seg, 0x0005) + seg); // 1874 -> 1a61
    memoryASet16(0x0ffb + seg, 0x0003, memoryAGet16(0x0ffb + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x0ffd + seg, 0x0005, memoryAGet16(0x0ffd + seg, 0x0005) + seg); // 1654 -> 1841
    memoryASet16(0x0ffe + seg, 0x0006, memoryAGet16(0x0ffe + seg, 0x0006) + seg); // 06bd -> 08aa
    memoryASet16(0x1002 + seg, 0x0004, memoryAGet16(0x1002 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x1004 + seg, 0x0003, memoryAGet16(0x1004 + seg, 0x0003) + seg); // 06bd -> 08aa
    memoryASet16(0x100a + seg, 0x0000, memoryAGet16(0x100a + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x100c + seg, 0x0008, memoryAGet16(0x100c + seg, 0x0008) + seg); // 0d8f -> 0f7c
    memoryASet16(0x100d + seg, 0x000e, memoryAGet16(0x100d + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x100e + seg, 0x000a, memoryAGet16(0x100e + seg, 0x000a) + seg); // 06bd -> 08aa
    memoryASet16(0x1013 + seg, 0x000c, memoryAGet16(0x1013 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x1014 + seg, 0x0008, memoryAGet16(0x1014 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x1017 + seg, 0x0008, memoryAGet16(0x1017 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1018 + seg, 0x0004, memoryAGet16(0x1018 + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x101b + seg, 0x0004, memoryAGet16(0x101b + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x101c + seg, 0x0000, memoryAGet16(0x101c + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x101f + seg, 0x0000, memoryAGet16(0x101f + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x1023 + seg, 0x0006, memoryAGet16(0x1023 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x1028 + seg, 0x0007, memoryAGet16(0x1028 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x102a + seg, 0x0004, memoryAGet16(0x102a + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x102b + seg, 0x0008, memoryAGet16(0x102b + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x102d + seg, 0x0003, memoryAGet16(0x102d + seg, 0x0003) + seg); // 0b80 -> 0d6d
    memoryASet16(0x102f + seg, 0x0001, memoryAGet16(0x102f + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x1031 + seg, 0x0008, memoryAGet16(0x1031 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1034 + seg, 0x0002, memoryAGet16(0x1034 + seg, 0x0002) + seg); // 1d02 -> 1eef
    memoryASet16(0x1035 + seg, 0x0002, memoryAGet16(0x1035 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x1037 + seg, 0x0003, memoryAGet16(0x1037 + seg, 0x0003) + seg); // 1d02 -> 1eef
    memoryASet16(0x1038 + seg, 0x0003, memoryAGet16(0x1038 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x103a + seg, 0x0000, memoryAGet16(0x103a + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x103b + seg, 0x000d, memoryAGet16(0x103b + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x103d + seg, 0x000a, memoryAGet16(0x103d + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x103f + seg, 0x0007, memoryAGet16(0x103f + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x1042 + seg, 0x000c, memoryAGet16(0x1042 + seg, 0x000c) + seg); // 1654 -> 1841
    memoryASet16(0x104a + seg, 0x0000, memoryAGet16(0x104a + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x104b + seg, 0x0005, memoryAGet16(0x104b + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x104c + seg, 0x000c, memoryAGet16(0x104c + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x1050 + seg, 0x0004, memoryAGet16(0x1050 + seg, 0x0004) + seg); // 1654 -> 1841
    memoryASet16(0x1051 + seg, 0x0007, memoryAGet16(0x1051 + seg, 0x0007) + seg); // 06bd -> 08aa
    memoryASet16(0x1054 + seg, 0x0006, memoryAGet16(0x1054 + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x1057 + seg, 0x0002, memoryAGet16(0x1057 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x105b + seg, 0x0003, memoryAGet16(0x105b + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x105c + seg, 0x0003, memoryAGet16(0x105c + seg, 0x0003) + seg); // 0b80 -> 0d6d
    memoryASet16(0x105d + seg, 0x000f, memoryAGet16(0x105d + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x105f + seg, 0x0000, memoryAGet16(0x105f + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x1061 + seg, 0x000c, memoryAGet16(0x1061 + seg, 0x000c) + seg); // 1d02 -> 1eef
    memoryASet16(0x1063 + seg, 0x000a, memoryAGet16(0x1063 + seg, 0x000a) + seg); // 1d02 -> 1eef
    memoryASet16(0x1066 + seg, 0x0000, memoryAGet16(0x1066 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x1067 + seg, 0x0001, memoryAGet16(0x1067 + seg, 0x0001) + seg); // 1d02 -> 1eef
    memoryASet16(0x1068 + seg, 0x000a, memoryAGet16(0x1068 + seg, 0x000a) + seg); // 1d02 -> 1eef
    memoryASet16(0x106a + seg, 0x0000, memoryAGet16(0x106a + seg, 0x0000) + seg); // 1d02 -> 1eef
    memoryASet16(0x106b + seg, 0x000f, memoryAGet16(0x106b + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x106c + seg, 0x000f, memoryAGet16(0x106c + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x106e + seg, 0x000a, memoryAGet16(0x106e + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x1072 + seg, 0x0007, memoryAGet16(0x1072 + seg, 0x0007) + seg); // 0d8f -> 0f7c
    memoryASet16(0x1075 + seg, 0x0008, memoryAGet16(0x1075 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1076 + seg, 0x0004, memoryAGet16(0x1076 + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x107c + seg, 0x0001, memoryAGet16(0x107c + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x107f + seg, 0x000e, memoryAGet16(0x107f + seg, 0x000e) + seg); // 1654 -> 1841
    memoryASet16(0x1080 + seg, 0x000f, memoryAGet16(0x1080 + seg, 0x000f) + seg); // 06bd -> 08aa
    memoryASet16(0x1083 + seg, 0x000e, memoryAGet16(0x1083 + seg, 0x000e) + seg); // 1d02 -> 1eef
    memoryASet16(0x1086 + seg, 0x000a, memoryAGet16(0x1086 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x1090 + seg, 0x0003, memoryAGet16(0x1090 + seg, 0x0003) + seg); // 1d02 -> 1eef
    memoryASet16(0x1094 + seg, 0x000d, memoryAGet16(0x1094 + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x1097 + seg, 0x0004, memoryAGet16(0x1097 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x109a + seg, 0x000b, memoryAGet16(0x109a + seg, 0x000b) + seg); // 0b80 -> 0d6d
    memoryASet16(0x109c + seg, 0x000b, memoryAGet16(0x109c + seg, 0x000b) + seg); // 06bd -> 08aa
    memoryASet16(0x10a0 + seg, 0x0005, memoryAGet16(0x10a0 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x10a1 + seg, 0x0006, memoryAGet16(0x10a1 + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x10a4 + seg, 0x0000, memoryAGet16(0x10a4 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x10a8 + seg, 0x000a, memoryAGet16(0x10a8 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x10b2 + seg, 0x0002, memoryAGet16(0x10b2 + seg, 0x0002) + seg); // 1654 -> 1841
    memoryASet16(0x10b3 + seg, 0x0008, memoryAGet16(0x10b3 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x10b6 + seg, 0x0009, memoryAGet16(0x10b6 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x10b7 + seg, 0x0005, memoryAGet16(0x10b7 + seg, 0x0005) + seg); // 1874 -> 1a61
    memoryASet16(0x10b9 + seg, 0x0003, memoryAGet16(0x10b9 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x10ba + seg, 0x0004, memoryAGet16(0x10ba + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x10bd + seg, 0x0003, memoryAGet16(0x10bd + seg, 0x0003) + seg); // 1d02 -> 1eef
    memoryASet16(0x10c0 + seg, 0x0004, memoryAGet16(0x10c0 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x10c1 + seg, 0x0009, memoryAGet16(0x10c1 + seg, 0x0009) + seg); // 1d02 -> 1eef
    memoryASet16(0x10c3 + seg, 0x000a, memoryAGet16(0x10c3 + seg, 0x000a) + seg); // 1d02 -> 1eef
    memoryASet16(0x10c4 + seg, 0x000f, memoryAGet16(0x10c4 + seg, 0x000f) + seg); // 1d02 -> 1eef
    memoryASet16(0x10c9 + seg, 0x0009, memoryAGet16(0x10c9 + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x10cb + seg, 0x0002, memoryAGet16(0x10cb + seg, 0x0002) + seg); // 06bd -> 08aa
    memoryASet16(0x10d0 + seg, 0x000f, memoryAGet16(0x10d0 + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x10d4 + seg, 0x0007, memoryAGet16(0x10d4 + seg, 0x0007) + seg); // 0d8f -> 0f7c
    memoryASet16(0x10d5 + seg, 0x0008, memoryAGet16(0x10d5 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x10d8 + seg, 0x0003, memoryAGet16(0x10d8 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x10d9 + seg, 0x0000, memoryAGet16(0x10d9 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x10da + seg, 0x000d, memoryAGet16(0x10da + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x10e0 + seg, 0x0008, memoryAGet16(0x10e0 + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x10e3 + seg, 0x0001, memoryAGet16(0x10e3 + seg, 0x0001) + seg); // 1d02 -> 1eef
    memoryASet16(0x10e4 + seg, 0x0001, memoryAGet16(0x10e4 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x10e6 + seg, 0x0002, memoryAGet16(0x10e6 + seg, 0x0002) + seg); // 1d02 -> 1eef
    memoryASet16(0x10e7 + seg, 0x0002, memoryAGet16(0x10e7 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x10e9 + seg, 0x0002, memoryAGet16(0x10e9 + seg, 0x0002) + seg); // 1d02 -> 1eef
    memoryASet16(0x10ea + seg, 0x0002, memoryAGet16(0x10ea + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x10eb + seg, 0x000b, memoryAGet16(0x10eb + seg, 0x000b) + seg); // 06bd -> 08aa
    memoryASet16(0x10ee + seg, 0x0007, memoryAGet16(0x10ee + seg, 0x0007) + seg); // 1d02 -> 1eef
    memoryASet16(0x10f1 + seg, 0x0003, memoryAGet16(0x10f1 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x10f1 + seg, 0x000b, memoryAGet16(0x10f1 + seg, 0x000b) + seg); // 1d02 -> 1eef
    memoryASet16(0x10f3 + seg, 0x0005, memoryAGet16(0x10f3 + seg, 0x0005) + seg); // 06bd -> 08aa
    memoryASet16(0x10f6 + seg, 0x0009, memoryAGet16(0x10f6 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x10fc + seg, 0x000f, memoryAGet16(0x10fc + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x10fe + seg, 0x0005, memoryAGet16(0x10fe + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x10ff + seg, 0x0001, memoryAGet16(0x10ff + seg, 0x0001) + seg); // 06bd -> 08aa
    memoryASet16(0x1101 + seg, 0x0009, memoryAGet16(0x1101 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x1102 + seg, 0x0005, memoryAGet16(0x1102 + seg, 0x0005) + seg); // 06bd -> 08aa
    memoryASet16(0x1104 + seg, 0x000d, memoryAGet16(0x1104 + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x1105 + seg, 0x0009, memoryAGet16(0x1105 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x1108 + seg, 0x0001, memoryAGet16(0x1108 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x1108 + seg, 0x000d, memoryAGet16(0x1108 + seg, 0x000d) + seg); // 06bd -> 08aa
    memoryASet16(0x110b + seg, 0x0002, memoryAGet16(0x110b + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x110c + seg, 0x0009, memoryAGet16(0x110c + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x110f + seg, 0x0003, memoryAGet16(0x110f + seg, 0x0003) + seg); // 06bd -> 08aa
    memoryASet16(0x1113 + seg, 0x0001, memoryAGet16(0x1113 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x1116 + seg, 0x0000, memoryAGet16(0x1116 + seg, 0x0000) + seg); // 0d8f -> 0f7c
    memoryASet16(0x1116 + seg, 0x000d, memoryAGet16(0x1116 + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x111a + seg, 0x0004, memoryAGet16(0x111a + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x111b + seg, 0x0004, memoryAGet16(0x111b + seg, 0x0004) + seg); // 1874 -> 1a61
    memoryASet16(0x1122 + seg, 0x0008, memoryAGet16(0x1122 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1123 + seg, 0x0007, memoryAGet16(0x1123 + seg, 0x0007) + seg); // 1d02 -> 1eef
    memoryASet16(0x1127 + seg, 0x0005, memoryAGet16(0x1127 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x1128 + seg, 0x0004, memoryAGet16(0x1128 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x112b + seg, 0x000d, memoryAGet16(0x112b + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x112d + seg, 0x0001, memoryAGet16(0x112d + seg, 0x0001) + seg); // 06bd -> 08aa
    memoryASet16(0x112f + seg, 0x000d, memoryAGet16(0x112f + seg, 0x000d) + seg); // 1d02 -> 1eef
    memoryASet16(0x1132 + seg, 0x0004, memoryAGet16(0x1132 + seg, 0x0004) + seg); // 1d02 -> 1eef
    memoryASet16(0x1133 + seg, 0x000b, memoryAGet16(0x1133 + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x113b + seg, 0x0001, memoryAGet16(0x113b + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x1141 + seg, 0x0006, memoryAGet16(0x1141 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x1145 + seg, 0x000a, memoryAGet16(0x1145 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x1148 + seg, 0x0006, memoryAGet16(0x1148 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x114a + seg, 0x0003, memoryAGet16(0x114a + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x114b + seg, 0x0004, memoryAGet16(0x114b + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x1153 + seg, 0x0005, memoryAGet16(0x1153 + seg, 0x0005) + seg); // 09dc -> 0bc9
    memoryASet16(0x1177 + seg, 0x0006, memoryAGet16(0x1177 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x1178 + seg, 0x0007, memoryAGet16(0x1178 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x117b + seg, 0x0005, memoryAGet16(0x117b + seg, 0x0005) + seg); // 1654 -> 1841
    memoryASet16(0x117c + seg, 0x000c, memoryAGet16(0x117c + seg, 0x000c) + seg); // 1654 -> 1841
    memoryASet16(0x117e + seg, 0x000e, memoryAGet16(0x117e + seg, 0x000e) + seg); // 1654 -> 1841
    memoryASet16(0x1181 + seg, 0x0007, memoryAGet16(0x1181 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x1184 + seg, 0x0007, memoryAGet16(0x1184 + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x1186 + seg, 0x000d, memoryAGet16(0x1186 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x118a + seg, 0x0001, memoryAGet16(0x118a + seg, 0x0001) + seg); // 1654 -> 1841
    memoryASet16(0x118c + seg, 0x0007, memoryAGet16(0x118c + seg, 0x0007) + seg); // 1654 -> 1841
    memoryASet16(0x118d + seg, 0x000f, memoryAGet16(0x118d + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x118f + seg, 0x0003, memoryAGet16(0x118f + seg, 0x0003) + seg); // 1654 -> 1841
    memoryASet16(0x1190 + seg, 0x0005, memoryAGet16(0x1190 + seg, 0x0005) + seg); // 06bd -> 08aa
    memoryASet16(0x1194 + seg, 0x0008, memoryAGet16(0x1194 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1199 + seg, 0x0001, memoryAGet16(0x1199 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x11a3 + seg, 0x0007, memoryAGet16(0x11a3 + seg, 0x0007) + seg); // 06bd -> 08aa
    memoryASet16(0x11a6 + seg, 0x0006, memoryAGet16(0x11a6 + seg, 0x0006) + seg); // 1d02 -> 1eef
    memoryASet16(0x11a9 + seg, 0x0002, memoryAGet16(0x11a9 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x11c1 + seg, 0x000c, memoryAGet16(0x11c1 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x11c7 + seg, 0x000c, memoryAGet16(0x11c7 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x11c9 + seg, 0x0000, memoryAGet16(0x11c9 + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x11cb + seg, 0x000a, memoryAGet16(0x11cb + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x11cc + seg, 0x0006, memoryAGet16(0x11cc + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x11cf + seg, 0x0000, memoryAGet16(0x11cf + seg, 0x0000) + seg); // 0d8f -> 0f7c
    memoryASet16(0x11cf + seg, 0x000d, memoryAGet16(0x11cf + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x11d8 + seg, 0x000d, memoryAGet16(0x11d8 + seg, 0x000d) + seg); // 1654 -> 1841
    memoryASet16(0x11d9 + seg, 0x0009, memoryAGet16(0x11d9 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x11dc + seg, 0x000e, memoryAGet16(0x11dc + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x11e1 + seg, 0x000b, memoryAGet16(0x11e1 + seg, 0x000b) + seg); // 09dc -> 0bc9
    memoryASet16(0x11e5 + seg, 0x000f, memoryAGet16(0x11e5 + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x11e7 + seg, 0x0000, memoryAGet16(0x11e7 + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x11ea + seg, 0x000d, memoryAGet16(0x11ea + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x11fa + seg, 0x0005, memoryAGet16(0x11fa + seg, 0x0005) + seg); // 0d8f -> 0f7c
    memoryASet16(0x11fb + seg, 0x0002, memoryAGet16(0x11fb + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x11fc + seg, 0x000e, memoryAGet16(0x11fc + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x11ff + seg, 0x0005, memoryAGet16(0x11ff + seg, 0x0005) + seg); // 1874 -> 1a61
    memoryASet16(0x1200 + seg, 0x0007, memoryAGet16(0x1200 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x1204 + seg, 0x0006, memoryAGet16(0x1204 + seg, 0x0006) + seg); // 1654 -> 1841
    memoryASet16(0x1206 + seg, 0x0002, memoryAGet16(0x1206 + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x1206 + seg, 0x000f, memoryAGet16(0x1206 + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x120a + seg, 0x0008, memoryAGet16(0x120a + seg, 0x0008) + seg); // 1654 -> 1841
    memoryASet16(0x120b + seg, 0x0009, memoryAGet16(0x120b + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x120e + seg, 0x000d, memoryAGet16(0x120e + seg, 0x000d) + seg); // 1d02 -> 1eef
    memoryASet16(0x1211 + seg, 0x0009, memoryAGet16(0x1211 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x1216 + seg, 0x0001, memoryAGet16(0x1216 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x1217 + seg, 0x000e, memoryAGet16(0x1217 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x1219 + seg, 0x0002, memoryAGet16(0x1219 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x1225 + seg, 0x000c, memoryAGet16(0x1225 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x1227 + seg, 0x0003, memoryAGet16(0x1227 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x1227 + seg, 0x000e, memoryAGet16(0x1227 + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x1234 + seg, 0x0000, memoryAGet16(0x1234 + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x1238 + seg, 0x0000, memoryAGet16(0x1238 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x1238 + seg, 0x000c, memoryAGet16(0x1238 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x1239 + seg, 0x000f, memoryAGet16(0x1239 + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x123a + seg, 0x0007, memoryAGet16(0x123a + seg, 0x0007) + seg); // 1d02 -> 1eef
    memoryASet16(0x123c + seg, 0x0008, memoryAGet16(0x123c + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x123e + seg, 0x0008, memoryAGet16(0x123e + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1240 + seg, 0x000b, memoryAGet16(0x1240 + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x1241 + seg, 0x0008, memoryAGet16(0x1241 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x1244 + seg, 0x000e, memoryAGet16(0x1244 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x124b + seg, 0x000f, memoryAGet16(0x124b + seg, 0x000f) + seg); // 1654 -> 1841
    memoryASet16(0x124d + seg, 0x0000, memoryAGet16(0x124d + seg, 0x0000) + seg); // 06bd -> 08aa
    memoryASet16(0x1250 + seg, 0x000f, memoryAGet16(0x1250 + seg, 0x000f) + seg); // 09dc -> 0bc9
    memoryASet16(0x1254 + seg, 0x0006, memoryAGet16(0x1254 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x1256 + seg, 0x0003, memoryAGet16(0x1256 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x1257 + seg, 0x0007, memoryAGet16(0x1257 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x1258 + seg, 0x0008, memoryAGet16(0x1258 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x125c + seg, 0x000a, memoryAGet16(0x125c + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x125e + seg, 0x0003, memoryAGet16(0x125e + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x1266 + seg, 0x0009, memoryAGet16(0x1266 + seg, 0x0009) + seg); // 06bd -> 08aa
    memoryASet16(0x1269 + seg, 0x0006, memoryAGet16(0x1269 + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x126a + seg, 0x000d, memoryAGet16(0x126a + seg, 0x000d) + seg); // 09dc -> 0bc9
    memoryASet16(0x126b + seg, 0x0009, memoryAGet16(0x126b + seg, 0x0009) + seg); // 1874 -> 1a61
    memoryASet16(0x126e + seg, 0x0004, memoryAGet16(0x126e + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x1270 + seg, 0x0004, memoryAGet16(0x1270 + seg, 0x0004) + seg); // 1654 -> 1841
    memoryASet16(0x1271 + seg, 0x0005, memoryAGet16(0x1271 + seg, 0x0005) + seg); // 06bd -> 08aa
    memoryASet16(0x1279 + seg, 0x0006, memoryAGet16(0x1279 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x127b + seg, 0x000c, memoryAGet16(0x127b + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x127c + seg, 0x0008, memoryAGet16(0x127c + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x127d + seg, 0x0000, memoryAGet16(0x127d + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x127d + seg, 0x000e, memoryAGet16(0x127d + seg, 0x000e) + seg); // 06bd -> 08aa
    memoryASet16(0x1281 + seg, 0x000a, memoryAGet16(0x1281 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x1283 + seg, 0x0003, memoryAGet16(0x1283 + seg, 0x0003) + seg); // 09dc -> 0bc9
    memoryASet16(0x1286 + seg, 0x0008, memoryAGet16(0x1286 + seg, 0x0008) + seg); // 06bd -> 08aa
    memoryASet16(0x128f + seg, 0x0006, memoryAGet16(0x128f + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x1291 + seg, 0x0004, memoryAGet16(0x1291 + seg, 0x0004) + seg); // 06bd -> 08aa
    memoryASet16(0x1295 + seg, 0x0007, memoryAGet16(0x1295 + seg, 0x0007) + seg); // 09dc -> 0bc9
    memoryASet16(0x1297 + seg, 0x0004, memoryAGet16(0x1297 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x1299 + seg, 0x0001, memoryAGet16(0x1299 + seg, 0x0001) + seg); // 09dc -> 0bc9
    memoryASet16(0x129a + seg, 0x000e, memoryAGet16(0x129a + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x129b + seg, 0x000a, memoryAGet16(0x129b + seg, 0x000a) + seg); // 1874 -> 1a61
    memoryASet16(0x129e + seg, 0x0009, memoryAGet16(0x129e + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x129f + seg, 0x000a, memoryAGet16(0x129f + seg, 0x000a) + seg); // 06bd -> 08aa
    memoryASet16(0x12a2 + seg, 0x0009, memoryAGet16(0x12a2 + seg, 0x0009) + seg); // 09dc -> 0bc9
    memoryASet16(0x12a5 + seg, 0x0003, memoryAGet16(0x12a5 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x12a5 + seg, 0x000b, memoryAGet16(0x12a5 + seg, 0x000b) + seg); // 0e8f -> 107c
    memoryASet16(0x12a6 + seg, 0x0000, memoryAGet16(0x12a6 + seg, 0x0000) + seg); // 1654 -> 1841
    memoryASet16(0x12ac + seg, 0x0009, memoryAGet16(0x12ac + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x12ad + seg, 0x0009, memoryAGet16(0x12ad + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x12ae + seg, 0x000d, memoryAGet16(0x12ae + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x12b0 + seg, 0x000f, memoryAGet16(0x12b0 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x12b2 + seg, 0x0003, memoryAGet16(0x12b2 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x12b6 + seg, 0x000c, memoryAGet16(0x12b6 + seg, 0x000c) + seg); // 037d -> 056a
    memoryASet16(0x12bb + seg, 0x0008, memoryAGet16(0x12bb + seg, 0x0008) + seg); // 037d -> 056a
    memoryASet16(0x12c0 + seg, 0x0005, memoryAGet16(0x12c0 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x12c1 + seg, 0x000d, memoryAGet16(0x12c1 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x12c4 + seg, 0x0001, memoryAGet16(0x12c4 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x12c5 + seg, 0x0002, memoryAGet16(0x12c5 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x12c7 + seg, 0x0009, memoryAGet16(0x12c7 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x12c9 + seg, 0x0001, memoryAGet16(0x12c9 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x12ca + seg, 0x0004, memoryAGet16(0x12ca + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x12cc + seg, 0x0004, memoryAGet16(0x12cc + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x12cd + seg, 0x0005, memoryAGet16(0x12cd + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x12d4 + seg, 0x000a, memoryAGet16(0x12d4 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x12d5 + seg, 0x0009, memoryAGet16(0x12d5 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x12d6 + seg, 0x0008, memoryAGet16(0x12d6 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x12d7 + seg, 0x0007, memoryAGet16(0x12d7 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x12fc + seg, 0x0001, memoryAGet16(0x12fc + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x12fd + seg, 0x0004, memoryAGet16(0x12fd + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x12ff + seg, 0x0005, memoryAGet16(0x12ff + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x1300 + seg, 0x0007, memoryAGet16(0x1300 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x1302 + seg, 0x0003, memoryAGet16(0x1302 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x1304 + seg, 0x000a, memoryAGet16(0x1304 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1305 + seg, 0x000f, memoryAGet16(0x1305 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1307 + seg, 0x0007, memoryAGet16(0x1307 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x1309 + seg, 0x0006, memoryAGet16(0x1309 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x130a + seg, 0x000c, memoryAGet16(0x130a + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x130c + seg, 0x0009, memoryAGet16(0x130c + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x130d + seg, 0x0000, memoryAGet16(0x130d + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x130f + seg, 0x000d, memoryAGet16(0x130f + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1311 + seg, 0x0000, memoryAGet16(0x1311 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x131b + seg, 0x0001, memoryAGet16(0x131b + seg, 0x0001) + seg); // 2108 -> 22f5
    memoryASet16(0x131c + seg, 0x0009, memoryAGet16(0x131c + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x131d + seg, 0x000f, memoryAGet16(0x131d + seg, 0x000f) + seg); // 037d -> 056a
    memoryASet16(0x131f + seg, 0x0002, memoryAGet16(0x131f + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x1321 + seg, 0x0000, memoryAGet16(0x1321 + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x1325 + seg, 0x0000, memoryAGet16(0x1325 + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x1326 + seg, 0x0003, memoryAGet16(0x1326 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x1328 + seg, 0x0002, memoryAGet16(0x1328 + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x132c + seg, 0x0002, memoryAGet16(0x132c + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x132d + seg, 0x0005, memoryAGet16(0x132d + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x132f + seg, 0x0004, memoryAGet16(0x132f + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x1333 + seg, 0x0004, memoryAGet16(0x1333 + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x1334 + seg, 0x0004, memoryAGet16(0x1334 + seg, 0x0004) + seg); // 2483 -> 2670
    memoryASet16(0x1335 + seg, 0x0005, memoryAGet16(0x1335 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x1336 + seg, 0x0009, memoryAGet16(0x1336 + seg, 0x0009) + seg); // 037d -> 056a
    memoryASet16(0x1338 + seg, 0x0008, memoryAGet16(0x1338 + seg, 0x0008) + seg); // 20df -> 22cc
    memoryASet16(0x1339 + seg, 0x0009, memoryAGet16(0x1339 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x133a + seg, 0x000d, memoryAGet16(0x133a + seg, 0x000d) + seg); // 037d -> 056a
    memoryASet16(0x133d + seg, 0x0007, memoryAGet16(0x133d + seg, 0x0007) + seg); // 12a6 -> 1493
    memoryASet16(0x133e + seg, 0x0003, memoryAGet16(0x133e + seg, 0x0003) + seg); // 12a6 -> 1493
    memoryASet16(0x133e + seg, 0x000f, memoryAGet16(0x133e + seg, 0x000f) + seg); // 12a6 -> 1493
    memoryASet16(0x1340 + seg, 0x0003, memoryAGet16(0x1340 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x1340 + seg, 0x000f, memoryAGet16(0x1340 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1341 + seg, 0x000b, memoryAGet16(0x1341 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1344 + seg, 0x0005, memoryAGet16(0x1344 + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x1349 + seg, 0x0000, memoryAGet16(0x1349 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x134d + seg, 0x0006, memoryAGet16(0x134d + seg, 0x0006) + seg); // 155e -> 174b
    memoryASet16(0x134f + seg, 0x0000, memoryAGet16(0x134f + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x1353 + seg, 0x000a, memoryAGet16(0x1353 + seg, 0x000a) + seg); // 155e -> 174b
    memoryASet16(0x1357 + seg, 0x000e, memoryAGet16(0x1357 + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x135c + seg, 0x0007, memoryAGet16(0x135c + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x1372 + seg, 0x0007, memoryAGet16(0x1372 + seg, 0x0007) + seg); // 155e -> 174b
    memoryASet16(0x1395 + seg, 0x000a, memoryAGet16(0x1395 + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x13a2 + seg, 0x0006, memoryAGet16(0x13a2 + seg, 0x0006) + seg); // 155e -> 174b
    memoryASet16(0x13ac + seg, 0x0004, memoryAGet16(0x13ac + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x13b0 + seg, 0x000a, memoryAGet16(0x13b0 + seg, 0x000a) + seg); // 155e -> 174b
    memoryASet16(0x13b2 + seg, 0x0001, memoryAGet16(0x13b2 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x13b6 + seg, 0x000c, memoryAGet16(0x13b6 + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x13b8 + seg, 0x0003, memoryAGet16(0x13b8 + seg, 0x0003) + seg); // 2a3a -> 2c27
    memoryASet16(0x13ba + seg, 0x0009, memoryAGet16(0x13ba + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x13c1 + seg, 0x0004, memoryAGet16(0x13c1 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x13c5 + seg, 0x000a, memoryAGet16(0x13c5 + seg, 0x000a) + seg); // 155e -> 174b
    memoryASet16(0x13c6 + seg, 0x000a, memoryAGet16(0x13c6 + seg, 0x000a) + seg); // 155e -> 174b
    memoryASet16(0x13cb + seg, 0x0005, memoryAGet16(0x13cb + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x13ce + seg, 0x000f, memoryAGet16(0x13ce + seg, 0x000f) + seg); // 155e -> 174b
    memoryASet16(0x13d0 + seg, 0x000e, memoryAGet16(0x13d0 + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x13d5 + seg, 0x0005, memoryAGet16(0x13d5 + seg, 0x0005) + seg); // 037d -> 056a
    memoryASet16(0x13d6 + seg, 0x000c, memoryAGet16(0x13d6 + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x13d8 + seg, 0x0001, memoryAGet16(0x13d8 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x13db + seg, 0x0001, memoryAGet16(0x13db + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x13e2 + seg, 0x0002, memoryAGet16(0x13e2 + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x13e3 + seg, 0x0007, memoryAGet16(0x13e3 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x13e6 + seg, 0x0005, memoryAGet16(0x13e6 + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x13e7 + seg, 0x0005, memoryAGet16(0x13e7 + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x13eb + seg, 0x0009, memoryAGet16(0x13eb + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x13ef + seg, 0x000e, memoryAGet16(0x13ef + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x13f1 + seg, 0x0009, memoryAGet16(0x13f1 + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x13f3 + seg, 0x000e, memoryAGet16(0x13f3 + seg, 0x000e) + seg); // 037d -> 056a
    memoryASet16(0x13f6 + seg, 0x0000, memoryAGet16(0x13f6 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x13f8 + seg, 0x0003, memoryAGet16(0x13f8 + seg, 0x0003) + seg); // 2a3a -> 2c27
    memoryASet16(0x13fa + seg, 0x0007, memoryAGet16(0x13fa + seg, 0x0007) + seg); // 2a3a -> 2c27
    memoryASet16(0x13fb + seg, 0x0001, memoryAGet16(0x13fb + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x13fe + seg, 0x0004, memoryAGet16(0x13fe + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x13ff + seg, 0x000e, memoryAGet16(0x13ff + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1401 + seg, 0x000e, memoryAGet16(0x1401 + seg, 0x000e) + seg); // 155e -> 174b
    memoryASet16(0x1404 + seg, 0x0003, memoryAGet16(0x1404 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x1406 + seg, 0x000c, memoryAGet16(0x1406 + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x140a + seg, 0x0001, memoryAGet16(0x140a + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x140c + seg, 0x0007, memoryAGet16(0x140c + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x140d + seg, 0x000b, memoryAGet16(0x140d + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x140f + seg, 0x0003, memoryAGet16(0x140f + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x1410 + seg, 0x0003, memoryAGet16(0x1410 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x1412 + seg, 0x000e, memoryAGet16(0x1412 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1414 + seg, 0x0005, memoryAGet16(0x1414 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1415 + seg, 0x000c, memoryAGet16(0x1415 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1417 + seg, 0x0003, memoryAGet16(0x1417 + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1418 + seg, 0x000d, memoryAGet16(0x1418 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x141a + seg, 0x0007, memoryAGet16(0x141a + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x141c + seg, 0x0002, memoryAGet16(0x141c + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x141d + seg, 0x0006, memoryAGet16(0x141d + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x141e + seg, 0x000a, memoryAGet16(0x141e + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1421 + seg, 0x0008, memoryAGet16(0x1421 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1425 + seg, 0x000b, memoryAGet16(0x1425 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1426 + seg, 0x000c, memoryAGet16(0x1426 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1429 + seg, 0x0008, memoryAGet16(0x1429 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x142a + seg, 0x0005, memoryAGet16(0x142a + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x142c + seg, 0x000d, memoryAGet16(0x142c + seg, 0x000d) + seg); // 2a3a -> 2c27
    memoryASet16(0x142f + seg, 0x0005, memoryAGet16(0x142f + seg, 0x0005) + seg); // 155e -> 174b
    memoryASet16(0x1431 + seg, 0x000d, memoryAGet16(0x1431 + seg, 0x000d) + seg); // 155e -> 174b
    memoryASet16(0x1436 + seg, 0x0004, memoryAGet16(0x1436 + seg, 0x0004) + seg); // 2a3a -> 2c27
    memoryASet16(0x1445 + seg, 0x000e, memoryAGet16(0x1445 + seg, 0x000e) + seg); // 2a3a -> 2c27
    memoryASet16(0x1450 + seg, 0x0009, memoryAGet16(0x1450 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1456 + seg, 0x0002, memoryAGet16(0x1456 + seg, 0x0002) + seg); // 155e -> 174b
    memoryASet16(0x1457 + seg, 0x000c, memoryAGet16(0x1457 + seg, 0x000c) + seg); // 155e -> 174b
    memoryASet16(0x1459 + seg, 0x0001, memoryAGet16(0x1459 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x145e + seg, 0x0003, memoryAGet16(0x145e + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x1461 + seg, 0x0005, memoryAGet16(0x1461 + seg, 0x0005) + seg); // 2ee7 -> 30d4
    memoryASet16(0x1471 + seg, 0x0003, memoryAGet16(0x1471 + seg, 0x0003) + seg); // 1f78 -> 2165
    memoryASet16(0x1474 + seg, 0x0002, memoryAGet16(0x1474 + seg, 0x0002) + seg); // 1f70 -> 215d
    memoryASet16(0x1477 + seg, 0x0002, memoryAGet16(0x1477 + seg, 0x0002) + seg); // 1f68 -> 2155
    memoryASet16(0x14a0 + seg, 0x000d, memoryAGet16(0x14a0 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x14a2 + seg, 0x0004, memoryAGet16(0x14a2 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x14ae + seg, 0x0006, memoryAGet16(0x14ae + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x14af + seg, 0x0003, memoryAGet16(0x14af + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x14b0 + seg, 0x0001, memoryAGet16(0x14b0 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x14b2 + seg, 0x000f, memoryAGet16(0x14b2 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x14b4 + seg, 0x0000, memoryAGet16(0x14b4 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x14b8 + seg, 0x0004, memoryAGet16(0x14b8 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x14b9 + seg, 0x000d, memoryAGet16(0x14b9 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x14bb + seg, 0x0006, memoryAGet16(0x14bb + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x14bc + seg, 0x000f, memoryAGet16(0x14bc + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x14d7 + seg, 0x000c, memoryAGet16(0x14d7 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x14d8 + seg, 0x000c, memoryAGet16(0x14d8 + seg, 0x000c) + seg); // 1874 -> 1a61
    memoryASet16(0x14dc + seg, 0x0003, memoryAGet16(0x14dc + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x1505 + seg, 0x0001, memoryAGet16(0x1505 + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x1530 + seg, 0x0000, memoryAGet16(0x1530 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x1535 + seg, 0x0004, memoryAGet16(0x1535 + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x153d + seg, 0x0000, memoryAGet16(0x153d + seg, 0x0000) + seg); // 155e -> 174b
    memoryASet16(0x153e + seg, 0x0004, memoryAGet16(0x153e + seg, 0x0004) + seg); // 1f80 -> 216d
    memoryASet16(0x1568 + seg, 0x000d, memoryAGet16(0x1568 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x156a + seg, 0x0000, memoryAGet16(0x156a + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x156b + seg, 0x0000, memoryAGet16(0x156b + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x156b + seg, 0x000c, memoryAGet16(0x156b + seg, 0x000c) + seg); // 037d -> 056a
    memoryASet16(0x156e + seg, 0x0002, memoryAGet16(0x156e + seg, 0x0002) + seg); // 037d -> 056a
    memoryASet16(0x1572 + seg, 0x0009, memoryAGet16(0x1572 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1573 + seg, 0x000c, memoryAGet16(0x1573 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1574 + seg, 0x000c, memoryAGet16(0x1574 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1575 + seg, 0x0008, memoryAGet16(0x1575 + seg, 0x0008) + seg); // 037d -> 056a
    memoryASet16(0x158a + seg, 0x000a, memoryAGet16(0x158a + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x15a0 + seg, 0x0002, memoryAGet16(0x15a0 + seg, 0x0002) + seg); // 037d -> 056a
    memoryASet16(0x15a3 + seg, 0x000b, memoryAGet16(0x15a3 + seg, 0x000b) + seg); // 2b63 -> 2d50
    memoryASet16(0x15a5 + seg, 0x000a, memoryAGet16(0x15a5 + seg, 0x000a) + seg); // 2b63 -> 2d50
    memoryASet16(0x15a6 + seg, 0x0005, memoryAGet16(0x15a6 + seg, 0x0005) + seg); // 2b63 -> 2d50
    memoryASet16(0x15a7 + seg, 0x000c, memoryAGet16(0x15a7 + seg, 0x000c) + seg); // 2b63 -> 2d50
    memoryASet16(0x15af + seg, 0x000a, memoryAGet16(0x15af + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x15b0 + seg, 0x0008, memoryAGet16(0x15b0 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x15b3 + seg, 0x0009, memoryAGet16(0x15b3 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x15b6 + seg, 0x000a, memoryAGet16(0x15b6 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x15b7 + seg, 0x0009, memoryAGet16(0x15b7 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x15ba + seg, 0x000d, memoryAGet16(0x15ba + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x15c1 + seg, 0x0005, memoryAGet16(0x15c1 + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x15c5 + seg, 0x0002, memoryAGet16(0x15c5 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x15c7 + seg, 0x000f, memoryAGet16(0x15c7 + seg, 0x000f) + seg); // 1931 -> 1b1e
    memoryASet16(0x15cd + seg, 0x0007, memoryAGet16(0x15cd + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x15ce + seg, 0x0003, memoryAGet16(0x15ce + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x15d0 + seg, 0x000b, memoryAGet16(0x15d0 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x15f5 + seg, 0x0000, memoryAGet16(0x15f5 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x15fe + seg, 0x0008, memoryAGet16(0x15fe + seg, 0x0008) + seg); // 037d -> 056a
    memoryASet16(0x1609 + seg, 0x0007, memoryAGet16(0x1609 + seg, 0x0007) + seg); // 037d -> 056a
    memoryASet16(0x1611 + seg, 0x000a, memoryAGet16(0x1611 + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x1614 + seg, 0x0008, memoryAGet16(0x1614 + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x1617 + seg, 0x000f, memoryAGet16(0x1617 + seg, 0x000f) + seg); // 1874 -> 1a61
    memoryASet16(0x1618 + seg, 0x000e, memoryAGet16(0x1618 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1625 + seg, 0x000d, memoryAGet16(0x1625 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1628 + seg, 0x000a, memoryAGet16(0x1628 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x162f + seg, 0x0009, memoryAGet16(0x162f + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1632 + seg, 0x0008, memoryAGet16(0x1632 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1633 + seg, 0x0001, memoryAGet16(0x1633 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1634 + seg, 0x0009, memoryAGet16(0x1634 + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x163a + seg, 0x0004, memoryAGet16(0x163a + seg, 0x0004) + seg); // 037d -> 056a
    memoryASet16(0x163d + seg, 0x0001, memoryAGet16(0x163d + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x163e + seg, 0x0006, memoryAGet16(0x163e + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1642 + seg, 0x0001, memoryAGet16(0x1642 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1644 + seg, 0x0005, memoryAGet16(0x1644 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x1644 + seg, 0x000e, memoryAGet16(0x1644 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x164b + seg, 0x000e, memoryAGet16(0x164b + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x1653 + seg, 0x000c, memoryAGet16(0x1653 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x166d + seg, 0x000c, memoryAGet16(0x166d + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1674 + seg, 0x000a, memoryAGet16(0x1674 + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x1686 + seg, 0x000e, memoryAGet16(0x1686 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x168c + seg, 0x0003, memoryAGet16(0x168c + seg, 0x0003) + seg); // 2a3a -> 2c27
    memoryASet16(0x1690 + seg, 0x0003, memoryAGet16(0x1690 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x1691 + seg, 0x0006, memoryAGet16(0x1691 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1692 + seg, 0x0006, memoryAGet16(0x1692 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1693 + seg, 0x0002, memoryAGet16(0x1693 + seg, 0x0002) + seg); // 037d -> 056a
    memoryASet16(0x1696 + seg, 0x000f, memoryAGet16(0x1696 + seg, 0x000f) + seg); // 037d -> 056a
    memoryASet16(0x169c + seg, 0x000c, memoryAGet16(0x169c + seg, 0x000c) + seg); // 2a3a -> 2c27
    memoryASet16(0x169f + seg, 0x000f, memoryAGet16(0x169f + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x16a1 + seg, 0x0000, memoryAGet16(0x16a1 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x16a2 + seg, 0x0000, memoryAGet16(0x16a2 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x16a2 + seg, 0x000c, memoryAGet16(0x16a2 + seg, 0x000c) + seg); // 037d -> 056a
    memoryASet16(0x16a8 + seg, 0x000b, memoryAGet16(0x16a8 + seg, 0x000b) + seg); // 2a3a -> 2c27
    memoryASet16(0x16ac + seg, 0x000b, memoryAGet16(0x16ac + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x16ad + seg, 0x000e, memoryAGet16(0x16ad + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x16ae + seg, 0x000e, memoryAGet16(0x16ae + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x16af + seg, 0x000a, memoryAGet16(0x16af + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x16b4 + seg, 0x0000, memoryAGet16(0x16b4 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x16b9 + seg, 0x000d, memoryAGet16(0x16b9 + seg, 0x000d) + seg); // 2a3a -> 2c27
    memoryASet16(0x16bd + seg, 0x0000, memoryAGet16(0x16bd + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x16be + seg, 0x0001, memoryAGet16(0x16be + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x16bf + seg, 0x0001, memoryAGet16(0x16bf + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x16bf + seg, 0x000d, memoryAGet16(0x16bf + seg, 0x000d) + seg); // 037d -> 056a
    memoryASet16(0x16ca + seg, 0x0007, memoryAGet16(0x16ca + seg, 0x0007) + seg); // 037d -> 056a
    memoryASet16(0x16d4 + seg, 0x0000, memoryAGet16(0x16d4 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x16f3 + seg, 0x000f, memoryAGet16(0x16f3 + seg, 0x000f) + seg); // 037d -> 056a
    memoryASet16(0x16f5 + seg, 0x0007, memoryAGet16(0x16f5 + seg, 0x0007) + seg); // 1826 -> 1a13
    memoryASet16(0x16fb + seg, 0x0000, memoryAGet16(0x16fb + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x1707 + seg, 0x0001, memoryAGet16(0x1707 + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x1709 + seg, 0x000a, memoryAGet16(0x1709 + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x1725 + seg, 0x0007, memoryAGet16(0x1725 + seg, 0x0007) + seg); // 037d -> 056a
    memoryASet16(0x1726 + seg, 0x0004, memoryAGet16(0x1726 + seg, 0x0004) + seg); // 1826 -> 1a13
    memoryASet16(0x1740 + seg, 0x000e, memoryAGet16(0x1740 + seg, 0x000e) + seg); // 1826 -> 1a13
    memoryASet16(0x1752 + seg, 0x000d, memoryAGet16(0x1752 + seg, 0x000d) + seg); // 1826 -> 1a13
    memoryASet16(0x176c + seg, 0x0009, memoryAGet16(0x176c + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x176e + seg, 0x0002, memoryAGet16(0x176e + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x1774 + seg, 0x0009, memoryAGet16(0x1774 + seg, 0x0009) + seg); // 1826 -> 1a13
    memoryASet16(0x178c + seg, 0x0008, memoryAGet16(0x178c + seg, 0x0008) + seg); // 1826 -> 1a13
    memoryASet16(0x17a1 + seg, 0x0005, memoryAGet16(0x17a1 + seg, 0x0005) + seg); // 1e0a -> 1ff7
    memoryASet16(0x17a3 + seg, 0x0002, memoryAGet16(0x17a3 + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x17bd + seg, 0x0003, memoryAGet16(0x17bd + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x17bf + seg, 0x0000, memoryAGet16(0x17bf + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x17c2 + seg, 0x0001, memoryAGet16(0x17c2 + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x17c9 + seg, 0x0002, memoryAGet16(0x17c9 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x17ca + seg, 0x0005, memoryAGet16(0x17ca + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x17cb + seg, 0x0005, memoryAGet16(0x17cb + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x17cc + seg, 0x0001, memoryAGet16(0x17cc + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x17dd + seg, 0x0000, memoryAGet16(0x17dd + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x17de + seg, 0x000d, memoryAGet16(0x17de + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x17f0 + seg, 0x0006, memoryAGet16(0x17f0 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x17fc + seg, 0x0007, memoryAGet16(0x17fc + seg, 0x0007) + seg); // 1826 -> 1a13
    memoryASet16(0x1816 + seg, 0x0003, memoryAGet16(0x1816 + seg, 0x0003) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1818 + seg, 0x0005, memoryAGet16(0x1818 + seg, 0x0005) + seg); // 1e0a -> 1ff7
    memoryASet16(0x181d + seg, 0x000b, memoryAGet16(0x181d + seg, 0x000b) + seg); // 1826 -> 1a13
    memoryASet16(0x1820 + seg, 0x000e, memoryAGet16(0x1820 + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1843 + seg, 0x000f, memoryAGet16(0x1843 + seg, 0x000f) + seg); // 2ee7 -> 30d4
    memoryASet16(0x1878 + seg, 0x0007, memoryAGet16(0x1878 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x1879 + seg, 0x000d, memoryAGet16(0x1879 + seg, 0x000d) + seg); // 2ee7 -> 30d4
    memoryASet16(0x18a7 + seg, 0x000f, memoryAGet16(0x18a7 + seg, 0x000f) + seg); // 037d -> 056a
    memoryASet16(0x18d3 + seg, 0x000f, memoryAGet16(0x18d3 + seg, 0x000f) + seg); // 2ee7 -> 30d4
    memoryASet16(0x18f9 + seg, 0x000b, memoryAGet16(0x18f9 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x18fd + seg, 0x0000, memoryAGet16(0x18fd + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x18fd + seg, 0x000d, memoryAGet16(0x18fd + seg, 0x000d) + seg); // 1874 -> 1a61
    memoryASet16(0x18fe + seg, 0x000b, memoryAGet16(0x18fe + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1911 + seg, 0x0001, memoryAGet16(0x1911 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1916 + seg, 0x0008, memoryAGet16(0x1916 + seg, 0x0008) + seg); // 037d -> 056a
    memoryASet16(0x1918 + seg, 0x0000, memoryAGet16(0x1918 + seg, 0x0000) + seg); // 037d -> 056a
    memoryASet16(0x193c + seg, 0x0000, memoryAGet16(0x193c + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x193c + seg, 0x0005, memoryAGet16(0x193c + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x193c + seg, 0x000b, memoryAGet16(0x193c + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x1940 + seg, 0x0001, memoryAGet16(0x1940 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1942 + seg, 0x0001, memoryAGet16(0x1942 + seg, 0x0001) + seg); // 037d -> 056a
    memoryASet16(0x1942 + seg, 0x000f, memoryAGet16(0x1942 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1944 + seg, 0x0006, memoryAGet16(0x1944 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x194a + seg, 0x0003, memoryAGet16(0x194a + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x194b + seg, 0x000e, memoryAGet16(0x194b + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x194c + seg, 0x000f, memoryAGet16(0x194c + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x194d + seg, 0x000f, memoryAGet16(0x194d + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x194f + seg, 0x0002, memoryAGet16(0x194f + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x1950 + seg, 0x0006, memoryAGet16(0x1950 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1951 + seg, 0x0007, memoryAGet16(0x1951 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x1952 + seg, 0x0008, memoryAGet16(0x1952 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x1953 + seg, 0x0009, memoryAGet16(0x1953 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1954 + seg, 0x000a, memoryAGet16(0x1954 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1955 + seg, 0x000b, memoryAGet16(0x1955 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1956 + seg, 0x000c, memoryAGet16(0x1956 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1957 + seg, 0x000d, memoryAGet16(0x1957 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1958 + seg, 0x000e, memoryAGet16(0x1958 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x1959 + seg, 0x000f, memoryAGet16(0x1959 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x195b + seg, 0x0000, memoryAGet16(0x195b + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x195c + seg, 0x0001, memoryAGet16(0x195c + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x195d + seg, 0x0002, memoryAGet16(0x195d + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x195e + seg, 0x0003, memoryAGet16(0x195e + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x195e + seg, 0x000c, memoryAGet16(0x195e + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1964 + seg, 0x0001, memoryAGet16(0x1964 + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x1964 + seg, 0x000d, memoryAGet16(0x1964 + seg, 0x000d) + seg); // 1460 -> 164d
    memoryASet16(0x1967 + seg, 0x0003, memoryAGet16(0x1967 + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x1968 + seg, 0x000e, memoryAGet16(0x1968 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x1969 + seg, 0x000f, memoryAGet16(0x1969 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x196b + seg, 0x0000, memoryAGet16(0x196b + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x196c + seg, 0x0001, memoryAGet16(0x196c + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x196d + seg, 0x0002, memoryAGet16(0x196d + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x196e + seg, 0x0003, memoryAGet16(0x196e + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x196f + seg, 0x0004, memoryAGet16(0x196f + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1970 + seg, 0x0005, memoryAGet16(0x1970 + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x1971 + seg, 0x0006, memoryAGet16(0x1971 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1972 + seg, 0x0007, memoryAGet16(0x1972 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x1973 + seg, 0x0008, memoryAGet16(0x1973 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x1974 + seg, 0x0009, memoryAGet16(0x1974 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1975 + seg, 0x000a, memoryAGet16(0x1975 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1976 + seg, 0x000b, memoryAGet16(0x1976 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1977 + seg, 0x000c, memoryAGet16(0x1977 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1978 + seg, 0x000d, memoryAGet16(0x1978 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1979 + seg, 0x0006, memoryAGet16(0x1979 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x197c + seg, 0x000a, memoryAGet16(0x197c + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x197e + seg, 0x0002, memoryAGet16(0x197e + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x197f + seg, 0x0004, memoryAGet16(0x197f + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1980 + seg, 0x000f, memoryAGet16(0x1980 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1982 + seg, 0x0009, memoryAGet16(0x1982 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1984 + seg, 0x0000, memoryAGet16(0x1984 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x1986 + seg, 0x0003, memoryAGet16(0x1986 + seg, 0x0003) + seg); // 1931 -> 1b1e
    memoryASet16(0x1986 + seg, 0x000d, memoryAGet16(0x1986 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1987 + seg, 0x0009, memoryAGet16(0x1987 + seg, 0x0009) + seg); // 1d02 -> 1eef
    memoryASet16(0x1997 + seg, 0x000a, memoryAGet16(0x1997 + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1999 + seg, 0x0007, memoryAGet16(0x1999 + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x19a4 + seg, 0x000f, memoryAGet16(0x19a4 + seg, 0x000f) + seg); // 1fe4 -> 21d1
    memoryASet16(0x19ab + seg, 0x0008, memoryAGet16(0x19ab + seg, 0x0008) + seg); // 1fe4 -> 21d1
    memoryASet16(0x19ac + seg, 0x0009, memoryAGet16(0x19ac + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x19b0 + seg, 0x0000, memoryAGet16(0x19b0 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x19b6 + seg, 0x000e, memoryAGet16(0x19b6 + seg, 0x000e) + seg); // 1fe4 -> 21d1
    memoryASet16(0x19bd + seg, 0x000c, memoryAGet16(0x19bd + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x19be + seg, 0x0005, memoryAGet16(0x19be + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x19dc + seg, 0x0005, memoryAGet16(0x19dc + seg, 0x0005) + seg); // 1fe4 -> 21d1
    memoryASet16(0x19e0 + seg, 0x0002, memoryAGet16(0x19e0 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x19e3 + seg, 0x000f, memoryAGet16(0x19e3 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x19e8 + seg, 0x000c, memoryAGet16(0x19e8 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x19ee + seg, 0x000f, memoryAGet16(0x19ee + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x19f6 + seg, 0x0005, memoryAGet16(0x19f6 + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x19fb + seg, 0x000a, memoryAGet16(0x19fb + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x19fd + seg, 0x000e, memoryAGet16(0x19fd + seg, 0x000e) + seg); // 1460 -> 164d
    memoryASet16(0x1a09 + seg, 0x0009, memoryAGet16(0x1a09 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1a0c + seg, 0x0001, memoryAGet16(0x1a0c + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1a16 + seg, 0x0000, memoryAGet16(0x1a16 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x1a19 + seg, 0x000b, memoryAGet16(0x1a19 + seg, 0x000b) + seg); // 037d -> 056a
    memoryASet16(0x1a22 + seg, 0x000c, memoryAGet16(0x1a22 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a2c + seg, 0x0008, memoryAGet16(0x1a2c + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a2d + seg, 0x000d, memoryAGet16(0x1a2d + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a2f + seg, 0x0005, memoryAGet16(0x1a2f + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a30 + seg, 0x0008, memoryAGet16(0x1a30 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a32 + seg, 0x0006, memoryAGet16(0x1a32 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a33 + seg, 0x0009, memoryAGet16(0x1a33 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a35 + seg, 0x0002, memoryAGet16(0x1a35 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a36 + seg, 0x0006, memoryAGet16(0x1a36 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a3d + seg, 0x0008, memoryAGet16(0x1a3d + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x1a3f + seg, 0x000e, memoryAGet16(0x1a3f + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1a45 + seg, 0x0002, memoryAGet16(0x1a45 + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1a45 + seg, 0x000b, memoryAGet16(0x1a45 + seg, 0x000b) + seg); // 155e -> 174b
    memoryASet16(0x1a4d + seg, 0x0005, memoryAGet16(0x1a4d + seg, 0x0005) + seg); // 0000 -> 01ed
    memoryASet16(0x1a52 + seg, 0x0001, memoryAGet16(0x1a52 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a53 + seg, 0x0004, memoryAGet16(0x1a53 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1a54 + seg, 0x000d, memoryAGet16(0x1a54 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1a64 + seg, 0x0006, memoryAGet16(0x1a64 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1a66 + seg, 0x0004, memoryAGet16(0x1a66 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1a6a + seg, 0x0008, memoryAGet16(0x1a6a + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x1a6d + seg, 0x000a, memoryAGet16(0x1a6d + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1a70 + seg, 0x0001, memoryAGet16(0x1a70 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1a7a + seg, 0x0001, memoryAGet16(0x1a7a + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1a82 + seg, 0x000c, memoryAGet16(0x1a82 + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a87 + seg, 0x0002, memoryAGet16(0x1a87 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a87 + seg, 0x0007, memoryAGet16(0x1a87 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a87 + seg, 0x000c, memoryAGet16(0x1a87 + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x1a89 + seg, 0x000f, memoryAGet16(0x1a89 + seg, 0x000f) + seg); // 1fd8 -> 21c5
    memoryASet16(0x1a99 + seg, 0x0007, memoryAGet16(0x1a99 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1a9d + seg, 0x000d, memoryAGet16(0x1a9d + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1aad + seg, 0x0003, memoryAGet16(0x1aad + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ab2 + seg, 0x0006, memoryAGet16(0x1ab2 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ab3 + seg, 0x000e, memoryAGet16(0x1ab3 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ac1 + seg, 0x0001, memoryAGet16(0x1ac1 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ac1 + seg, 0x000d, memoryAGet16(0x1ac1 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ac3 + seg, 0x000b, memoryAGet16(0x1ac3 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ac6 + seg, 0x000f, memoryAGet16(0x1ac6 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ac8 + seg, 0x000a, memoryAGet16(0x1ac8 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1aca + seg, 0x0008, memoryAGet16(0x1aca + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1acc + seg, 0x0003, memoryAGet16(0x1acc + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ace + seg, 0x0001, memoryAGet16(0x1ace + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ad0 + seg, 0x0000, memoryAGet16(0x1ad0 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x1ad0 + seg, 0x000f, memoryAGet16(0x1ad0 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1ad1 + seg, 0x000f, memoryAGet16(0x1ad1 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1adb + seg, 0x000e, memoryAGet16(0x1adb + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1aeb + seg, 0x000a, memoryAGet16(0x1aeb + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1af0 + seg, 0x000d, memoryAGet16(0x1af0 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1af1 + seg, 0x0002, memoryAGet16(0x1af1 + seg, 0x0002) + seg); // 1460 -> 164d
    memoryASet16(0x1af1 + seg, 0x000b, memoryAGet16(0x1af1 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x1af4 + seg, 0x000b, memoryAGet16(0x1af4 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x1af5 + seg, 0x000f, memoryAGet16(0x1af5 + seg, 0x000f) + seg); // 1460 -> 164d
    memoryASet16(0x1af8 + seg, 0x000d, memoryAGet16(0x1af8 + seg, 0x000d) + seg); // 037d -> 056a
    memoryASet16(0x1b06 + seg, 0x0009, memoryAGet16(0x1b06 + seg, 0x0009) + seg); // 0000 -> 01ed
    memoryASet16(0x1b07 + seg, 0x000d, memoryAGet16(0x1b07 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1b09 + seg, 0x0004, memoryAGet16(0x1b09 + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1b0a + seg, 0x000b, memoryAGet16(0x1b0a + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1b0c + seg, 0x0001, memoryAGet16(0x1b0c + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1b0c + seg, 0x0009, memoryAGet16(0x1b0c + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b0e + seg, 0x0000, memoryAGet16(0x1b0e + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b0e + seg, 0x0005, memoryAGet16(0x1b0e + seg, 0x0005) + seg); // 1460 -> 164d
    memoryASet16(0x1b0e + seg, 0x000a, memoryAGet16(0x1b0e + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x1b0e + seg, 0x000f, memoryAGet16(0x1b0e + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b0f + seg, 0x0004, memoryAGet16(0x1b0f + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b10 + seg, 0x000e, memoryAGet16(0x1b10 + seg, 0x000e) + seg); // 1faa -> 2197
    memoryASet16(0x1b12 + seg, 0x0006, memoryAGet16(0x1b12 + seg, 0x0006) + seg); // 1faa -> 2197
    memoryASet16(0x1b13 + seg, 0x000e, memoryAGet16(0x1b13 + seg, 0x000e) + seg); // 1faa -> 2197
    memoryASet16(0x1b15 + seg, 0x0006, memoryAGet16(0x1b15 + seg, 0x0006) + seg); // 1faa -> 2197
    memoryASet16(0x1b15 + seg, 0x000f, memoryAGet16(0x1b15 + seg, 0x000f) + seg); // 1fbd -> 21aa
    memoryASet16(0x1b17 + seg, 0x0009, memoryAGet16(0x1b17 + seg, 0x0009) + seg); // 1fcc -> 21b9
    memoryASet16(0x1b19 + seg, 0x0002, memoryAGet16(0x1b19 + seg, 0x0002) + seg); // 1fcc -> 21b9
    memoryASet16(0x1b1a + seg, 0x000c, memoryAGet16(0x1b1a + seg, 0x000c) + seg); // 1fcc -> 21b9
    memoryASet16(0x1b37 + seg, 0x000b, memoryAGet16(0x1b37 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b3a + seg, 0x0000, memoryAGet16(0x1b3a + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b3b + seg, 0x000f, memoryAGet16(0x1b3b + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b3c + seg, 0x0007, memoryAGet16(0x1b3c + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b3e + seg, 0x0003, memoryAGet16(0x1b3e + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x1b3f + seg, 0x0001, memoryAGet16(0x1b3f + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x1b47 + seg, 0x0009, memoryAGet16(0x1b47 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x1b4a + seg, 0x0009, memoryAGet16(0x1b4a + seg, 0x0009) + seg); // 1fb1 -> 219e
    memoryASet16(0x1b4c + seg, 0x000c, memoryAGet16(0x1b4c + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1b4e + seg, 0x000a, memoryAGet16(0x1b4e + seg, 0x000a) + seg); // 0000 -> 01ed
    memoryASet16(0x1b52 + seg, 0x0005, memoryAGet16(0x1b52 + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b58 + seg, 0x000f, memoryAGet16(0x1b58 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b5b + seg, 0x0004, memoryAGet16(0x1b5b + seg, 0x0004) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b5d + seg, 0x000d, memoryAGet16(0x1b5d + seg, 0x000d) + seg); // 1460 -> 164d
    memoryASet16(0x1b66 + seg, 0x0007, memoryAGet16(0x1b66 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b6d + seg, 0x0001, memoryAGet16(0x1b6d + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x1b72 + seg, 0x0000, memoryAGet16(0x1b72 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b72 + seg, 0x0008, memoryAGet16(0x1b72 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b73 + seg, 0x000d, memoryAGet16(0x1b73 + seg, 0x000d) + seg); // 1460 -> 164d
    memoryASet16(0x1b75 + seg, 0x0008, memoryAGet16(0x1b75 + seg, 0x0008) + seg); // 1460 -> 164d
    memoryASet16(0x1b79 + seg, 0x0000, memoryAGet16(0x1b79 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b7b + seg, 0x0007, memoryAGet16(0x1b7b + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b7c + seg, 0x000f, memoryAGet16(0x1b7c + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b7e + seg, 0x0007, memoryAGet16(0x1b7e + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b7e + seg, 0x000f, memoryAGet16(0x1b7e + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b84 + seg, 0x0000, memoryAGet16(0x1b84 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b85 + seg, 0x0008, memoryAGet16(0x1b85 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b87 + seg, 0x0000, memoryAGet16(0x1b87 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b88 + seg, 0x0008, memoryAGet16(0x1b88 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b89 + seg, 0x0000, memoryAGet16(0x1b89 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1b8c + seg, 0x0006, memoryAGet16(0x1b8c + seg, 0x0006) + seg); // 1460 -> 164d
    memoryASet16(0x1b8e + seg, 0x000f, memoryAGet16(0x1b8e + seg, 0x000f) + seg); // 1460 -> 164d
    memoryASet16(0x1b99 + seg, 0x000d, memoryAGet16(0x1b99 + seg, 0x000d) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ba9 + seg, 0x000e, memoryAGet16(0x1ba9 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bae + seg, 0x0007, memoryAGet16(0x1bae + seg, 0x0007) + seg); // 1460 -> 164d
    memoryASet16(0x1bba + seg, 0x0000, memoryAGet16(0x1bba + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x1bc0 + seg, 0x0009, memoryAGet16(0x1bc0 + seg, 0x0009) + seg); // 1460 -> 164d
    memoryASet16(0x1bc4 + seg, 0x000d, memoryAGet16(0x1bc4 + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x1bc5 + seg, 0x000b, memoryAGet16(0x1bc5 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x1bc9 + seg, 0x0009, memoryAGet16(0x1bc9 + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bcb + seg, 0x0009, memoryAGet16(0x1bcb + seg, 0x0009) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bcd + seg, 0x0005, memoryAGet16(0x1bcd + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bcf + seg, 0x0005, memoryAGet16(0x1bcf + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bd2 + seg, 0x000e, memoryAGet16(0x1bd2 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x1bd5 + seg, 0x0004, memoryAGet16(0x1bd5 + seg, 0x0004) + seg); // 1931 -> 1b1e
    memoryASet16(0x1bd6 + seg, 0x0006, memoryAGet16(0x1bd6 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1bd7 + seg, 0x000e, memoryAGet16(0x1bd7 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x1bdc + seg, 0x0003, memoryAGet16(0x1bdc + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x1be3 + seg, 0x0001, memoryAGet16(0x1be3 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1be3 + seg, 0x000d, memoryAGet16(0x1be3 + seg, 0x000d) + seg); // 1931 -> 1b1e
    memoryASet16(0x1be5 + seg, 0x000b, memoryAGet16(0x1be5 + seg, 0x000b) + seg); // 1f99 -> 2186
    memoryASet16(0x1be7 + seg, 0x0001, memoryAGet16(0x1be7 + seg, 0x0001) + seg); // 1f99 -> 2186
    memoryASet16(0x1bec + seg, 0x0006, memoryAGet16(0x1bec + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1bee + seg, 0x0002, memoryAGet16(0x1bee + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x1bf9 + seg, 0x000c, memoryAGet16(0x1bf9 + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x1bfd + seg, 0x0000, memoryAGet16(0x1bfd + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c01 + seg, 0x0002, memoryAGet16(0x1c01 + seg, 0x0002) + seg); // 1931 -> 1b1e
    memoryASet16(0x1c02 + seg, 0x0002, memoryAGet16(0x1c02 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x1c03 + seg, 0x0008, memoryAGet16(0x1c03 + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x1c05 + seg, 0x000b, memoryAGet16(0x1c05 + seg, 0x000b) + seg); // 1931 -> 1b1e
    memoryASet16(0x1c07 + seg, 0x0006, memoryAGet16(0x1c07 + seg, 0x0006) + seg); // 0000 -> 01ed
    memoryASet16(0x1c08 + seg, 0x000f, memoryAGet16(0x1c08 + seg, 0x000f) + seg); // 0000 -> 01ed
    memoryASet16(0x1c0e + seg, 0x0004, memoryAGet16(0x1c0e + seg, 0x0004) + seg); // 0000 -> 01ed
    memoryASet16(0x1c11 + seg, 0x0001, memoryAGet16(0x1c11 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x1c15 + seg, 0x0002, memoryAGet16(0x1c15 + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x1c15 + seg, 0x000e, memoryAGet16(0x1c15 + seg, 0x000e) + seg); // 1931 -> 1b1e
    memoryASet16(0x1c16 + seg, 0x000c, memoryAGet16(0x1c16 + seg, 0x000c) + seg); // 1f99 -> 2186
    memoryASet16(0x1c1d + seg, 0x0008, memoryAGet16(0x1c1d + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c1f + seg, 0x0008, memoryAGet16(0x1c1f + seg, 0x0008) + seg); // 1931 -> 1b1e
    memoryASet16(0x1c21 + seg, 0x000a, memoryAGet16(0x1c21 + seg, 0x000a) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c23 + seg, 0x000a, memoryAGet16(0x1c23 + seg, 0x000a) + seg); // 1931 -> 1b1e
    memoryASet16(0x1c2f + seg, 0x000a, memoryAGet16(0x1c2f + seg, 0x000a) + seg); // 1460 -> 164d
    memoryASet16(0x1c36 + seg, 0x0001, memoryAGet16(0x1c36 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c38 + seg, 0x000f, memoryAGet16(0x1c38 + seg, 0x000f) + seg); // 1d02 -> 1eef
    memoryASet16(0x1c3d + seg, 0x000f, memoryAGet16(0x1c3d + seg, 0x000f) + seg); // 1d02 -> 1eef
    memoryASet16(0x1c43 + seg, 0x0006, memoryAGet16(0x1c43 + seg, 0x0006) + seg); // 1874 -> 1a61
    memoryASet16(0x1c46 + seg, 0x000b, memoryAGet16(0x1c46 + seg, 0x000b) + seg); // 1874 -> 1a61
    memoryASet16(0x1c4c + seg, 0x0001, memoryAGet16(0x1c4c + seg, 0x0001) + seg); // 1874 -> 1a61
    memoryASet16(0x1c54 + seg, 0x0008, memoryAGet16(0x1c54 + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x1c5a + seg, 0x0002, memoryAGet16(0x1c5a + seg, 0x0002) + seg); // 1874 -> 1a61
    memoryASet16(0x1c60 + seg, 0x000b, memoryAGet16(0x1c60 + seg, 0x000b) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c62 + seg, 0x000f, memoryAGet16(0x1c62 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c64 + seg, 0x000e, memoryAGet16(0x1c64 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c66 + seg, 0x0007, memoryAGet16(0x1c66 + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c68 + seg, 0x0006, memoryAGet16(0x1c68 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c69 + seg, 0x000f, memoryAGet16(0x1c69 + seg, 0x000f) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c6a + seg, 0x0007, memoryAGet16(0x1c6a + seg, 0x0007) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c6b + seg, 0x000c, memoryAGet16(0x1c6b + seg, 0x000c) + seg); // 1460 -> 164d
    memoryASet16(0x1c6d + seg, 0x000c, memoryAGet16(0x1c6d + seg, 0x000c) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c6f + seg, 0x0000, memoryAGet16(0x1c6f + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c70 + seg, 0x0008, memoryAGet16(0x1c70 + seg, 0x0008) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c72 + seg, 0x0000, memoryAGet16(0x1c72 + seg, 0x0000) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1c9a + seg, 0x000a, memoryAGet16(0x1c9a + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x1ca6 + seg, 0x0008, memoryAGet16(0x1ca6 + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x1cb0 + seg, 0x000f, memoryAGet16(0x1cb0 + seg, 0x000f) + seg); // 1f87 -> 2174
    memoryASet16(0x1cb2 + seg, 0x0005, memoryAGet16(0x1cb2 + seg, 0x0005) + seg); // 1f8e -> 217b
    memoryASet16(0x1cb3 + seg, 0x000b, memoryAGet16(0x1cb3 + seg, 0x000b) + seg); // 1f87 -> 2174
    memoryASet16(0x1cb4 + seg, 0x000e, memoryAGet16(0x1cb4 + seg, 0x000e) + seg); // 1f8e -> 217b
    memoryASet16(0x1cb6 + seg, 0x0000, memoryAGet16(0x1cb6 + seg, 0x0000) + seg); // 1fcc -> 21b9
    memoryASet16(0x1cb7 + seg, 0x0002, memoryAGet16(0x1cb7 + seg, 0x0002) + seg); // 1fcc -> 21b9
    memoryASet16(0x1cb8 + seg, 0x000b, memoryAGet16(0x1cb8 + seg, 0x000b) + seg); // 1fcc -> 21b9
    memoryASet16(0x1cba + seg, 0x0005, memoryAGet16(0x1cba + seg, 0x0005) + seg); // 1fd8 -> 21c5
    memoryASet16(0x1cbb + seg, 0x0005, memoryAGet16(0x1cbb + seg, 0x0005) + seg); // 1fd8 -> 21c5
    memoryASet16(0x1cbd + seg, 0x0006, memoryAGet16(0x1cbd + seg, 0x0006) + seg); // 1fd8 -> 21c5
    memoryASet16(0x1cbe + seg, 0x000c, memoryAGet16(0x1cbe + seg, 0x000c) + seg); // 12a6 -> 1493
    memoryASet16(0x1cbf + seg, 0x0004, memoryAGet16(0x1cbf + seg, 0x0004) + seg); // 2a3a -> 2c27
    memoryASet16(0x1cc0 + seg, 0x000d, memoryAGet16(0x1cc0 + seg, 0x000d) + seg); // 2a3a -> 2c27
    memoryASet16(0x1cc2 + seg, 0x0002, memoryAGet16(0x1cc2 + seg, 0x0002) + seg); // 2a3a -> 2c27
    memoryASet16(0x1cc3 + seg, 0x000d, memoryAGet16(0x1cc3 + seg, 0x000d) + seg); // 12a6 -> 1493
    memoryASet16(0x1cc4 + seg, 0x0005, memoryAGet16(0x1cc4 + seg, 0x0005) + seg); // 12a6 -> 1493
    memoryASet16(0x1cc4 + seg, 0x000e, memoryAGet16(0x1cc4 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cc5 + seg, 0x0006, memoryAGet16(0x1cc5 + seg, 0x0006) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cc6 + seg, 0x0000, memoryAGet16(0x1cc6 + seg, 0x0000) + seg); // 1931 -> 1b1e
    memoryASet16(0x1cc7 + seg, 0x0001, memoryAGet16(0x1cc7 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cc7 + seg, 0x0009, memoryAGet16(0x1cc7 + seg, 0x0009) + seg); // 1654 -> 1841
    memoryASet16(0x1cc7 + seg, 0x000e, memoryAGet16(0x1cc7 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cc8 + seg, 0x0007, memoryAGet16(0x1cc8 + seg, 0x0007) + seg); // 1fd8 -> 21c5
    memoryASet16(0x1ccb + seg, 0x0001, memoryAGet16(0x1ccb + seg, 0x0001) + seg); // 1460 -> 164d
    memoryASet16(0x1ccf + seg, 0x000a, memoryAGet16(0x1ccf + seg, 0x000a) + seg); // 037d -> 056a
    memoryASet16(0x1cd1 + seg, 0x0005, memoryAGet16(0x1cd1 + seg, 0x0005) + seg); // 1f87 -> 2174
    memoryASet16(0x1cd4 + seg, 0x0003, memoryAGet16(0x1cd4 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x1cd4 + seg, 0x0009, memoryAGet16(0x1cd4 + seg, 0x0009) + seg); // 1f8e -> 217b
    memoryASet16(0x1cd6 + seg, 0x0003, memoryAGet16(0x1cd6 + seg, 0x0003) + seg); // 1874 -> 1a61
    memoryASet16(0x1cdb + seg, 0x0006, memoryAGet16(0x1cdb + seg, 0x0006) + seg); // 037d -> 056a
    memoryASet16(0x1cdc + seg, 0x0005, memoryAGet16(0x1cdc + seg, 0x0005) + seg); // 1931 -> 1b1e
    memoryASet16(0x1cdd + seg, 0x0006, memoryAGet16(0x1cdd + seg, 0x0006) + seg); // 1931 -> 1b1e
    memoryASet16(0x1cde + seg, 0x0003, memoryAGet16(0x1cde + seg, 0x0003) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cde + seg, 0x000b, memoryAGet16(0x1cde + seg, 0x000b) + seg); // 037d -> 056a
    memoryASet16(0x1cdf + seg, 0x0003, memoryAGet16(0x1cdf + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x1cdf + seg, 0x0008, memoryAGet16(0x1cdf + seg, 0x0008) + seg); // 1874 -> 1a61
    memoryASet16(0x1ce0 + seg, 0x0001, memoryAGet16(0x1ce0 + seg, 0x0001) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1ce0 + seg, 0x0009, memoryAGet16(0x1ce0 + seg, 0x0009) + seg); // 12a6 -> 1493
    memoryASet16(0x1ce0 + seg, 0x000e, memoryAGet16(0x1ce0 + seg, 0x000e) + seg); // 12a6 -> 1493
    memoryASet16(0x1ce2 + seg, 0x000b, memoryAGet16(0x1ce2 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x1cec + seg, 0x0005, memoryAGet16(0x1cec + seg, 0x0005) + seg); // 1d06 -> 1ef3
    memoryASet16(0x1cf1 + seg, 0x000c, memoryAGet16(0x1cf1 + seg, 0x000c) + seg); // 0915 -> 0b02
    memoryASet16(0x1cf9 + seg, 0x0000, memoryAGet16(0x1cf9 + seg, 0x0000) + seg); // 1460 -> 164d
    memoryASet16(0x1cf9 + seg, 0x000b, memoryAGet16(0x1cf9 + seg, 0x000b) + seg); // 1460 -> 164d
    memoryASet16(0x1cfb + seg, 0x0003, memoryAGet16(0x1cfb + seg, 0x0003) + seg); // 1460 -> 164d
    memoryASet16(0x1cfd + seg, 0x0004, memoryAGet16(0x1cfd + seg, 0x0004) + seg); // 1460 -> 164d
    memoryASet16(0x1d02 + seg, 0x0008, memoryAGet16(0x1d02 + seg, 0x0008) + seg); // 1ed3 -> 20c0
    memoryASet16(0x1d04 + seg, 0x000b, memoryAGet16(0x1d04 + seg, 0x000b) + seg); // 1ed3 -> 20c0
    memoryASet16(0x1d08 + seg, 0x0009, memoryAGet16(0x1d08 + seg, 0x0009) + seg); // 1931 -> 1b1e
    memoryASet16(0x1d0b + seg, 0x0008, memoryAGet16(0x1d0b + seg, 0x0008) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d0d + seg, 0x0008, memoryAGet16(0x1d0d + seg, 0x0008) + seg); // 037d -> 056a
    memoryASet16(0x1d20 + seg, 0x000f, memoryAGet16(0x1d20 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d26 + seg, 0x0001, memoryAGet16(0x1d26 + seg, 0x0001) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d2b + seg, 0x0005, memoryAGet16(0x1d2b + seg, 0x0005) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d30 + seg, 0x0009, memoryAGet16(0x1d30 + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d39 + seg, 0x0007, memoryAGet16(0x1d39 + seg, 0x0007) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d41 + seg, 0x0006, memoryAGet16(0x1d41 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d48 + seg, 0x0007, memoryAGet16(0x1d48 + seg, 0x0007) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d52 + seg, 0x0006, memoryAGet16(0x1d52 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d5d + seg, 0x0002, memoryAGet16(0x1d5d + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d86 + seg, 0x000e, memoryAGet16(0x1d86 + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d89 + seg, 0x000f, memoryAGet16(0x1d89 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1d91 + seg, 0x000d, memoryAGet16(0x1d91 + seg, 0x000d) + seg); // 12a6 -> 1493
    memoryASet16(0x1d93 + seg, 0x0001, memoryAGet16(0x1d93 + seg, 0x0001) + seg); // 155e -> 174b
    memoryASet16(0x1d97 + seg, 0x0003, memoryAGet16(0x1d97 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x1d98 + seg, 0x0003, memoryAGet16(0x1d98 + seg, 0x0003) + seg); // 155e -> 174b
    memoryASet16(0x1d9a + seg, 0x0004, memoryAGet16(0x1d9a + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x1d9b + seg, 0x0009, memoryAGet16(0x1d9b + seg, 0x0009) + seg); // 155e -> 174b
    memoryASet16(0x1d9c + seg, 0x0008, memoryAGet16(0x1d9c + seg, 0x0008) + seg); // 155e -> 174b
    memoryASet16(0x1d9d + seg, 0x0004, memoryAGet16(0x1d9d + seg, 0x0004) + seg); // 155e -> 174b
    memoryASet16(0x1d9f + seg, 0x0002, memoryAGet16(0x1d9f + seg, 0x0002) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1da0 + seg, 0x000f, memoryAGet16(0x1da0 + seg, 0x000f) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1db0 + seg, 0x000c, memoryAGet16(0x1db0 + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1db6 + seg, 0x0005, memoryAGet16(0x1db6 + seg, 0x0005) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dbe + seg, 0x0000, memoryAGet16(0x1dbe + seg, 0x0000) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dc5 + seg, 0x0000, memoryAGet16(0x1dc5 + seg, 0x0000) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dcc + seg, 0x000e, memoryAGet16(0x1dcc + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dd7 + seg, 0x000e, memoryAGet16(0x1dd7 + seg, 0x000e) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1de3 + seg, 0x0008, memoryAGet16(0x1de3 + seg, 0x0008) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dea + seg, 0x000c, memoryAGet16(0x1dea + seg, 0x000c) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1dfc + seg, 0x0009, memoryAGet16(0x1dfc + seg, 0x0009) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1e00 + seg, 0x0006, memoryAGet16(0x1e00 + seg, 0x0006) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1e09 + seg, 0x0007, memoryAGet16(0x1e09 + seg, 0x0007) + seg); // 1e0a -> 1ff7
    memoryASet16(0x1f85 + seg, 0x000e, memoryAGet16(0x1f85 + seg, 0x000e) + seg); // 1f83 -> 2170
    memoryASet16(0x1f8d + seg, 0x0004, memoryAGet16(0x1f8d + seg, 0x0004) + seg); // 1f87 -> 2174
    memoryASet16(0x1f92 + seg, 0x0000, memoryAGet16(0x1f92 + seg, 0x0000) + seg); // 1f8e -> 217b
    memoryASet16(0x1f98 + seg, 0x0002, memoryAGet16(0x1f98 + seg, 0x0002) + seg); // 1f93 -> 2180
    memoryASet16(0x1fa1 + seg, 0x0008, memoryAGet16(0x1fa1 + seg, 0x0008) + seg); // 1f99 -> 2186
    memoryASet16(0x1fa1 + seg, 0x000c, memoryAGet16(0x1fa1 + seg, 0x000c) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fa2 + seg, 0x000e, memoryAGet16(0x1fa2 + seg, 0x000e) + seg); // 1f99 -> 2186
    memoryASet16(0x1fa3 + seg, 0x0002, memoryAGet16(0x1fa3 + seg, 0x0002) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fa4 + seg, 0x0008, memoryAGet16(0x1fa4 + seg, 0x0008) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fa5 + seg, 0x000e, memoryAGet16(0x1fa5 + seg, 0x000e) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fa7 + seg, 0x0004, memoryAGet16(0x1fa7 + seg, 0x0004) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fa8 + seg, 0x000a, memoryAGet16(0x1fa8 + seg, 0x000a) + seg); // 1a89 -> 1c76
    memoryASet16(0x1faa + seg, 0x000c, memoryAGet16(0x1faa + seg, 0x000c) + seg); // 1f99 -> 2186
    memoryASet16(0x1fab + seg, 0x000e, memoryAGet16(0x1fab + seg, 0x000e) + seg); // 1f99 -> 2186
    memoryASet16(0x1fad + seg, 0x0000, memoryAGet16(0x1fad + seg, 0x0000) + seg); // 1f99 -> 2186
    memoryASet16(0x1fae + seg, 0x0002, memoryAGet16(0x1fae + seg, 0x0002) + seg); // 1f99 -> 2186
    memoryASet16(0x1fb0 + seg, 0x0004, memoryAGet16(0x1fb0 + seg, 0x0004) + seg); // 1faa -> 2197
    memoryASet16(0x1fbb + seg, 0x000c, memoryAGet16(0x1fbb + seg, 0x000c) + seg); // 1fb1 -> 219e
    memoryASet16(0x1fbc + seg, 0x0000, memoryAGet16(0x1fbc + seg, 0x0000) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fc2 + seg, 0x0002, memoryAGet16(0x1fc2 + seg, 0x0002) + seg); // 1fbd -> 21aa
    memoryASet16(0x1fc2 + seg, 0x0006, memoryAGet16(0x1fc2 + seg, 0x0006) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fc3 + seg, 0x000c, memoryAGet16(0x1fc3 + seg, 0x000c) + seg); // 1fb1 -> 219e
    memoryASet16(0x1fc4 + seg, 0x000e, memoryAGet16(0x1fc4 + seg, 0x000e) + seg); // 1fbd -> 21aa
    memoryASet16(0x1fc7 + seg, 0x0000, memoryAGet16(0x1fc7 + seg, 0x0000) + seg); // 1fc3 -> 21b0
    memoryASet16(0x1fc7 + seg, 0x0004, memoryAGet16(0x1fc7 + seg, 0x0004) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fc8 + seg, 0x000a, memoryAGet16(0x1fc8 + seg, 0x000a) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fca + seg, 0x0000, memoryAGet16(0x1fca + seg, 0x0000) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fcb + seg, 0x0006, memoryAGet16(0x1fcb + seg, 0x0006) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fcc + seg, 0x000c, memoryAGet16(0x1fcc + seg, 0x000c) + seg); // 1f87 -> 2174
    memoryASet16(0x1fcd + seg, 0x000e, memoryAGet16(0x1fcd + seg, 0x000e) + seg); // 1f8e -> 217b
    memoryASet16(0x1fcf + seg, 0x0000, memoryAGet16(0x1fcf + seg, 0x0000) + seg); // 1faa -> 2197
    memoryASet16(0x1fd0 + seg, 0x0002, memoryAGet16(0x1fd0 + seg, 0x0002) + seg); // 1fc3 -> 21b0
    memoryASet16(0x1fd1 + seg, 0x0004, memoryAGet16(0x1fd1 + seg, 0x0004) + seg); // 1fc3 -> 21b0
    memoryASet16(0x1fd2 + seg, 0x0006, memoryAGet16(0x1fd2 + seg, 0x0006) + seg); // 1fc3 -> 21b0
    memoryASet16(0x1fd3 + seg, 0x0008, memoryAGet16(0x1fd3 + seg, 0x0008) + seg); // 1fc3 -> 21b0
    memoryASet16(0x1fd5 + seg, 0x000a, memoryAGet16(0x1fd5 + seg, 0x000a) + seg); // 1fcc -> 21b9
    memoryASet16(0x1fd5 + seg, 0x000e, memoryAGet16(0x1fd5 + seg, 0x000e) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fd7 + seg, 0x0004, memoryAGet16(0x1fd7 + seg, 0x0004) + seg); // 1a89 -> 1c76
    memoryASet16(0x1fd8 + seg, 0x000c, memoryAGet16(0x1fd8 + seg, 0x000c) + seg); // 1f93 -> 2180
    memoryASet16(0x1fd9 + seg, 0x000e, memoryAGet16(0x1fd9 + seg, 0x000e) + seg); // 1f99 -> 2186
    memoryASet16(0x1fdb + seg, 0x0000, memoryAGet16(0x1fdb + seg, 0x0000) + seg); // 1f99 -> 2186
    memoryASet16(0x1fdc + seg, 0x0002, memoryAGet16(0x1fdc + seg, 0x0002) + seg); // 1fcc -> 21b9
    memoryASet16(0x1fdf + seg, 0x0008, memoryAGet16(0x1fdf + seg, 0x0008) + seg); // 1fcc -> 21b9
    memoryASet16(0x1fe2 + seg, 0x000c, memoryAGet16(0x1fe2 + seg, 0x000c) + seg); // 1fd8 -> 21c5
    memoryASet16(0x2f73 + seg, 0x000c, memoryAGet16(0x2f73 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x2f74 + seg, 0x0000, memoryAGet16(0x2f74 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x2f74 + seg, 0x0004, memoryAGet16(0x2f74 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x2f80 + seg, 0x000e, memoryAGet16(0x2f80 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f81 + seg, 0x0002, memoryAGet16(0x2f81 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f81 + seg, 0x0006, memoryAGet16(0x2f81 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f82 + seg, 0x000c, memoryAGet16(0x2f82 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f83 + seg, 0x0000, memoryAGet16(0x2f83 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f83 + seg, 0x0004, memoryAGet16(0x2f83 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f84 + seg, 0x000a, memoryAGet16(0x2f84 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f84 + seg, 0x000e, memoryAGet16(0x2f84 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f85 + seg, 0x0002, memoryAGet16(0x2f85 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f86 + seg, 0x0008, memoryAGet16(0x2f86 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f86 + seg, 0x000c, memoryAGet16(0x2f86 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f87 + seg, 0x0000, memoryAGet16(0x2f87 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f88 + seg, 0x0006, memoryAGet16(0x2f88 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f88 + seg, 0x000a, memoryAGet16(0x2f88 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f88 + seg, 0x000e, memoryAGet16(0x2f88 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8a + seg, 0x0004, memoryAGet16(0x2f8a + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8a + seg, 0x0008, memoryAGet16(0x2f8a + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8a + seg, 0x000c, memoryAGet16(0x2f8a + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8c + seg, 0x0002, memoryAGet16(0x2f8c + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8c + seg, 0x0006, memoryAGet16(0x2f8c + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8c + seg, 0x000a, memoryAGet16(0x2f8c + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8e + seg, 0x0000, memoryAGet16(0x2f8e + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8e + seg, 0x0004, memoryAGet16(0x2f8e + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8e + seg, 0x0008, memoryAGet16(0x2f8e + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f8f + seg, 0x000e, memoryAGet16(0x2f8f + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f90 + seg, 0x0002, memoryAGet16(0x2f90 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f90 + seg, 0x0006, memoryAGet16(0x2f90 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f91 + seg, 0x000c, memoryAGet16(0x2f91 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f92 + seg, 0x0000, memoryAGet16(0x2f92 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f92 + seg, 0x0004, memoryAGet16(0x2f92 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f93 + seg, 0x000a, memoryAGet16(0x2f93 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f93 + seg, 0x000e, memoryAGet16(0x2f93 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f94 + seg, 0x0002, memoryAGet16(0x2f94 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f95 + seg, 0x000c, memoryAGet16(0x2f95 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f96 + seg, 0x0000, memoryAGet16(0x2f96 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f97 + seg, 0x000a, memoryAGet16(0x2f97 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f97 + seg, 0x000e, memoryAGet16(0x2f97 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f99 + seg, 0x0008, memoryAGet16(0x2f99 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f99 + seg, 0x000c, memoryAGet16(0x2f99 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9b + seg, 0x0006, memoryAGet16(0x2f9b + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9b + seg, 0x000a, memoryAGet16(0x2f9b + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9d + seg, 0x0000, memoryAGet16(0x2f9d + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9d + seg, 0x0004, memoryAGet16(0x2f9d + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9d + seg, 0x0008, memoryAGet16(0x2f9d + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9e + seg, 0x000e, memoryAGet16(0x2f9e + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9f + seg, 0x0002, memoryAGet16(0x2f9f + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2f9f + seg, 0x0006, memoryAGet16(0x2f9f + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa0 + seg, 0x000c, memoryAGet16(0x2fa0 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa1 + seg, 0x0000, memoryAGet16(0x2fa1 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa1 + seg, 0x0004, memoryAGet16(0x2fa1 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa2 + seg, 0x000e, memoryAGet16(0x2fa2 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa3 + seg, 0x0002, memoryAGet16(0x2fa3 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa4 + seg, 0x000c, memoryAGet16(0x2fa4 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa5 + seg, 0x0000, memoryAGet16(0x2fa5 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa6 + seg, 0x000a, memoryAGet16(0x2fa6 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa6 + seg, 0x000e, memoryAGet16(0x2fa6 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa8 + seg, 0x0004, memoryAGet16(0x2fa8 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa8 + seg, 0x0008, memoryAGet16(0x2fa8 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fa8 + seg, 0x000c, memoryAGet16(0x2fa8 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2faa + seg, 0x0002, memoryAGet16(0x2faa + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2faa + seg, 0x0006, memoryAGet16(0x2faa + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2faa + seg, 0x000a, memoryAGet16(0x2faa + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fac + seg, 0x0000, memoryAGet16(0x2fac + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fac + seg, 0x0004, memoryAGet16(0x2fac + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fac + seg, 0x0008, memoryAGet16(0x2fac + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fad + seg, 0x000e, memoryAGet16(0x2fad + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fae + seg, 0x0002, memoryAGet16(0x2fae + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fae + seg, 0x0006, memoryAGet16(0x2fae + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2faf + seg, 0x000c, memoryAGet16(0x2faf + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb0 + seg, 0x0000, memoryAGet16(0x2fb0 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb0 + seg, 0x0004, memoryAGet16(0x2fb0 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb1 + seg, 0x000e, memoryAGet16(0x2fb1 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb2 + seg, 0x0002, memoryAGet16(0x2fb2 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb3 + seg, 0x0008, memoryAGet16(0x2fb3 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb3 + seg, 0x000c, memoryAGet16(0x2fb3 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb4 + seg, 0x0000, memoryAGet16(0x2fb4 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb5 + seg, 0x000e, memoryAGet16(0x2fb5 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fb7 + seg, 0x0004, memoryAGet16(0x2fb7 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb7 + seg, 0x000c, memoryAGet16(0x2fb7 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fb9 + seg, 0x0002, memoryAGet16(0x2fb9 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fb9 + seg, 0x000a, memoryAGet16(0x2fb9 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fbb + seg, 0x0000, memoryAGet16(0x2fbb + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fbb + seg, 0x0008, memoryAGet16(0x2fbb + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fbc + seg, 0x000e, memoryAGet16(0x2fbc + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fbd + seg, 0x0006, memoryAGet16(0x2fbd + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fbe + seg, 0x000c, memoryAGet16(0x2fbe + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fbf + seg, 0x0000, memoryAGet16(0x2fbf + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fbf + seg, 0x0004, memoryAGet16(0x2fbf + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc0 + seg, 0x000e, memoryAGet16(0x2fc0 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc1 + seg, 0x0002, memoryAGet16(0x2fc1 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc2 + seg, 0x0008, memoryAGet16(0x2fc2 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc2 + seg, 0x000c, memoryAGet16(0x2fc2 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc3 + seg, 0x0000, memoryAGet16(0x2fc3 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc4 + seg, 0x000a, memoryAGet16(0x2fc4 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc4 + seg, 0x000e, memoryAGet16(0x2fc4 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc6 + seg, 0x0004, memoryAGet16(0x2fc6 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc6 + seg, 0x000c, memoryAGet16(0x2fc6 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fc8 + seg, 0x000a, memoryAGet16(0x2fc8 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fca + seg, 0x0000, memoryAGet16(0x2fca + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fca + seg, 0x0008, memoryAGet16(0x2fca + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fcb + seg, 0x000e, memoryAGet16(0x2fcb + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fcc + seg, 0x0006, memoryAGet16(0x2fcc + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fcd + seg, 0x000c, memoryAGet16(0x2fcd + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fce + seg, 0x0004, memoryAGet16(0x2fce + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fcf + seg, 0x000a, memoryAGet16(0x2fcf + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd0 + seg, 0x0002, memoryAGet16(0x2fd0 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fd1 + seg, 0x0008, memoryAGet16(0x2fd1 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd2 + seg, 0x0000, memoryAGet16(0x2fd2 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fd3 + seg, 0x0006, memoryAGet16(0x2fd3 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd3 + seg, 0x000e, memoryAGet16(0x2fd3 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fd5 + seg, 0x0004, memoryAGet16(0x2fd5 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd5 + seg, 0x000c, memoryAGet16(0x2fd5 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x2fd7 + seg, 0x0002, memoryAGet16(0x2fd7 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd7 + seg, 0x0006, memoryAGet16(0x2fd7 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd7 + seg, 0x000a, memoryAGet16(0x2fd7 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd9 + seg, 0x0000, memoryAGet16(0x2fd9 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd9 + seg, 0x0004, memoryAGet16(0x2fd9 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fd9 + seg, 0x0008, memoryAGet16(0x2fd9 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fda + seg, 0x000e, memoryAGet16(0x2fda + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdb + seg, 0x0002, memoryAGet16(0x2fdb + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdb + seg, 0x0006, memoryAGet16(0x2fdb + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdc + seg, 0x000c, memoryAGet16(0x2fdc + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdd + seg, 0x0000, memoryAGet16(0x2fdd + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdd + seg, 0x0004, memoryAGet16(0x2fdd + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fde + seg, 0x000a, memoryAGet16(0x2fde + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fde + seg, 0x000e, memoryAGet16(0x2fde + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fdf + seg, 0x0002, memoryAGet16(0x2fdf + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe0 + seg, 0x0008, memoryAGet16(0x2fe0 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe0 + seg, 0x000c, memoryAGet16(0x2fe0 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe1 + seg, 0x0000, memoryAGet16(0x2fe1 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe2 + seg, 0x0006, memoryAGet16(0x2fe2 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe2 + seg, 0x000a, memoryAGet16(0x2fe2 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe2 + seg, 0x000e, memoryAGet16(0x2fe2 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe4 + seg, 0x0004, memoryAGet16(0x2fe4 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe4 + seg, 0x0008, memoryAGet16(0x2fe4 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe4 + seg, 0x000c, memoryAGet16(0x2fe4 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe6 + seg, 0x0002, memoryAGet16(0x2fe6 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe6 + seg, 0x0006, memoryAGet16(0x2fe6 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe6 + seg, 0x000a, memoryAGet16(0x2fe6 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe8 + seg, 0x0004, memoryAGet16(0x2fe8 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe8 + seg, 0x0008, memoryAGet16(0x2fe8 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fe9 + seg, 0x000e, memoryAGet16(0x2fe9 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fea + seg, 0x0002, memoryAGet16(0x2fea + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fea + seg, 0x0006, memoryAGet16(0x2fea + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fec + seg, 0x0000, memoryAGet16(0x2fec + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fec + seg, 0x0004, memoryAGet16(0x2fec + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fed + seg, 0x000a, memoryAGet16(0x2fed + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fed + seg, 0x000e, memoryAGet16(0x2fed + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fee + seg, 0x0002, memoryAGet16(0x2fee + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fef + seg, 0x000c, memoryAGet16(0x2fef + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff0 + seg, 0x0000, memoryAGet16(0x2ff0 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff1 + seg, 0x0006, memoryAGet16(0x2ff1 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff1 + seg, 0x000a, memoryAGet16(0x2ff1 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff1 + seg, 0x000e, memoryAGet16(0x2ff1 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff3 + seg, 0x0004, memoryAGet16(0x2ff3 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff3 + seg, 0x0008, memoryAGet16(0x2ff3 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff3 + seg, 0x000c, memoryAGet16(0x2ff3 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff5 + seg, 0x0002, memoryAGet16(0x2ff5 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff5 + seg, 0x0006, memoryAGet16(0x2ff5 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff5 + seg, 0x000a, memoryAGet16(0x2ff5 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff7 + seg, 0x0000, memoryAGet16(0x2ff7 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff7 + seg, 0x0004, memoryAGet16(0x2ff7 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff7 + seg, 0x0008, memoryAGet16(0x2ff7 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff8 + seg, 0x000e, memoryAGet16(0x2ff8 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff9 + seg, 0x0002, memoryAGet16(0x2ff9 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ff9 + seg, 0x0006, memoryAGet16(0x2ff9 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffa + seg, 0x000c, memoryAGet16(0x2ffa + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffb + seg, 0x0000, memoryAGet16(0x2ffb + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffb + seg, 0x0004, memoryAGet16(0x2ffb + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffc + seg, 0x000a, memoryAGet16(0x2ffc + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffc + seg, 0x000e, memoryAGet16(0x2ffc + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffd + seg, 0x0002, memoryAGet16(0x2ffd + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffe + seg, 0x0008, memoryAGet16(0x2ffe + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2ffe + seg, 0x000c, memoryAGet16(0x2ffe + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x2fff + seg, 0x0000, memoryAGet16(0x2fff + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3000 + seg, 0x0006, memoryAGet16(0x3000 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3000 + seg, 0x000a, memoryAGet16(0x3000 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3000 + seg, 0x000e, memoryAGet16(0x3000 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3002 + seg, 0x0004, memoryAGet16(0x3002 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3002 + seg, 0x0008, memoryAGet16(0x3002 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3002 + seg, 0x000c, memoryAGet16(0x3002 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3004 + seg, 0x0002, memoryAGet16(0x3004 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3004 + seg, 0x0006, memoryAGet16(0x3004 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3004 + seg, 0x000a, memoryAGet16(0x3004 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3006 + seg, 0x0000, memoryAGet16(0x3006 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3006 + seg, 0x0004, memoryAGet16(0x3006 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3006 + seg, 0x0008, memoryAGet16(0x3006 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3007 + seg, 0x000e, memoryAGet16(0x3007 + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3008 + seg, 0x0002, memoryAGet16(0x3008 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3008 + seg, 0x0006, memoryAGet16(0x3008 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3009 + seg, 0x000c, memoryAGet16(0x3009 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x300a + seg, 0x0000, memoryAGet16(0x300a + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300a + seg, 0x0004, memoryAGet16(0x300a + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300b + seg, 0x000a, memoryAGet16(0x300b + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x300b + seg, 0x000e, memoryAGet16(0x300b + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300c + seg, 0x0002, memoryAGet16(0x300c + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300d + seg, 0x0008, memoryAGet16(0x300d + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300d + seg, 0x000c, memoryAGet16(0x300d + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300e + seg, 0x0000, memoryAGet16(0x300e + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300f + seg, 0x0006, memoryAGet16(0x300f + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x300f + seg, 0x000a, memoryAGet16(0x300f + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x300f + seg, 0x000e, memoryAGet16(0x300f + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3011 + seg, 0x0004, memoryAGet16(0x3011 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3011 + seg, 0x0008, memoryAGet16(0x3011 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3011 + seg, 0x000c, memoryAGet16(0x3011 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3013 + seg, 0x0002, memoryAGet16(0x3013 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3013 + seg, 0x0006, memoryAGet16(0x3013 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3013 + seg, 0x000a, memoryAGet16(0x3013 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3015 + seg, 0x0000, memoryAGet16(0x3015 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3015 + seg, 0x0004, memoryAGet16(0x3015 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3015 + seg, 0x0008, memoryAGet16(0x3015 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3017 + seg, 0x0002, memoryAGet16(0x3017 + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3017 + seg, 0x0006, memoryAGet16(0x3017 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3018 + seg, 0x000c, memoryAGet16(0x3018 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3019 + seg, 0x0000, memoryAGet16(0x3019 + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3019 + seg, 0x0004, memoryAGet16(0x3019 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301a + seg, 0x000a, memoryAGet16(0x301a + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301a + seg, 0x000e, memoryAGet16(0x301a + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301b + seg, 0x0002, memoryAGet16(0x301b + seg, 0x0002) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301c + seg, 0x0008, memoryAGet16(0x301c + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301c + seg, 0x000c, memoryAGet16(0x301c + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301d + seg, 0x0000, memoryAGet16(0x301d + seg, 0x0000) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301e + seg, 0x0006, memoryAGet16(0x301e + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301e + seg, 0x000a, memoryAGet16(0x301e + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x301e + seg, 0x000e, memoryAGet16(0x301e + seg, 0x000e) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3020 + seg, 0x0004, memoryAGet16(0x3020 + seg, 0x0004) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3020 + seg, 0x0008, memoryAGet16(0x3020 + seg, 0x0008) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3020 + seg, 0x000c, memoryAGet16(0x3020 + seg, 0x000c) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3022 + seg, 0x0006, memoryAGet16(0x3022 + seg, 0x0006) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3022 + seg, 0x000a, memoryAGet16(0x3022 + seg, 0x000a) + seg); // 0b80 -> 0d6d
    memoryASet16(0x3031 + seg, 0x0004, memoryAGet16(0x3031 + seg, 0x0004) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3031 + seg, 0x000c, memoryAGet16(0x3031 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3033 + seg, 0x0002, memoryAGet16(0x3033 + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3033 + seg, 0x000a, memoryAGet16(0x3033 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3035 + seg, 0x0000, memoryAGet16(0x3035 + seg, 0x0000) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3035 + seg, 0x0008, memoryAGet16(0x3035 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3036 + seg, 0x000e, memoryAGet16(0x3036 + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3037 + seg, 0x0006, memoryAGet16(0x3037 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3038 + seg, 0x000c, memoryAGet16(0x3038 + seg, 0x000c) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3039 + seg, 0x0004, memoryAGet16(0x3039 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x303a + seg, 0x000a, memoryAGet16(0x303a + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x303b + seg, 0x0002, memoryAGet16(0x303b + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x303c + seg, 0x0008, memoryAGet16(0x303c + seg, 0x0008) + seg); // 0d8f -> 0f7c
    memoryASet16(0x303d + seg, 0x0000, memoryAGet16(0x303d + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x303e + seg, 0x0006, memoryAGet16(0x303e + seg, 0x0006) + seg); // 0d8f -> 0f7c
    memoryASet16(0x303e + seg, 0x000e, memoryAGet16(0x303e + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3040 + seg, 0x0004, memoryAGet16(0x3040 + seg, 0x0004) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3040 + seg, 0x000c, memoryAGet16(0x3040 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3042 + seg, 0x0002, memoryAGet16(0x3042 + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3042 + seg, 0x000a, memoryAGet16(0x3042 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3047 + seg, 0x0008, memoryAGet16(0x3047 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3049 + seg, 0x0006, memoryAGet16(0x3049 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x304b + seg, 0x0004, memoryAGet16(0x304b + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x304d + seg, 0x0002, memoryAGet16(0x304d + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x304e + seg, 0x0008, memoryAGet16(0x304e + seg, 0x0008) + seg); // 0d8f -> 0f7c
    memoryASet16(0x304f + seg, 0x0000, memoryAGet16(0x304f + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3050 + seg, 0x0006, memoryAGet16(0x3050 + seg, 0x0006) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3050 + seg, 0x000e, memoryAGet16(0x3050 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3052 + seg, 0x0004, memoryAGet16(0x3052 + seg, 0x0004) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3052 + seg, 0x000c, memoryAGet16(0x3052 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3054 + seg, 0x0002, memoryAGet16(0x3054 + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3054 + seg, 0x000a, memoryAGet16(0x3054 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3056 + seg, 0x0000, memoryAGet16(0x3056 + seg, 0x0000) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3056 + seg, 0x0008, memoryAGet16(0x3056 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3057 + seg, 0x000e, memoryAGet16(0x3057 + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3058 + seg, 0x0006, memoryAGet16(0x3058 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3059 + seg, 0x000c, memoryAGet16(0x3059 + seg, 0x000c) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305a + seg, 0x0004, memoryAGet16(0x305a + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x305b + seg, 0x000a, memoryAGet16(0x305b + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305c + seg, 0x0002, memoryAGet16(0x305c + seg, 0x0002) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305d + seg, 0x0008, memoryAGet16(0x305d + seg, 0x0008) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305e + seg, 0x0000, memoryAGet16(0x305e + seg, 0x0000) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305f + seg, 0x0006, memoryAGet16(0x305f + seg, 0x0006) + seg); // 0d8f -> 0f7c
    memoryASet16(0x305f + seg, 0x000e, memoryAGet16(0x305f + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3061 + seg, 0x0004, memoryAGet16(0x3061 + seg, 0x0004) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3061 + seg, 0x000c, memoryAGet16(0x3061 + seg, 0x000c) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3063 + seg, 0x000a, memoryAGet16(0x3063 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3065 + seg, 0x0008, memoryAGet16(0x3065 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3066 + seg, 0x000e, memoryAGet16(0x3066 + seg, 0x000e) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3068 + seg, 0x000c, memoryAGet16(0x3068 + seg, 0x000c) + seg); // 0d8f -> 0f7c
    memoryASet16(0x306a + seg, 0x000a, memoryAGet16(0x306a + seg, 0x000a) + seg); // 0d8f -> 0f7c
    memoryASet16(0x3076 + seg, 0x0006, memoryAGet16(0x3076 + seg, 0x0006) + seg); // 1f04 -> 20f1
    memoryASet16(0x3076 + seg, 0x000a, memoryAGet16(0x3076 + seg, 0x000a) + seg); // 1f05 -> 20f2
    memoryASet16(0x3076 + seg, 0x000e, memoryAGet16(0x3076 + seg, 0x000e) + seg); // 1f06 -> 20f3
    memoryASet16(0x3077 + seg, 0x0002, memoryAGet16(0x3077 + seg, 0x0002) + seg); // 1f07 -> 20f4
    memoryASet16(0x3077 + seg, 0x0006, memoryAGet16(0x3077 + seg, 0x0006) + seg); // 1f09 -> 20f6
    memoryASet16(0x3077 + seg, 0x000a, memoryAGet16(0x3077 + seg, 0x000a) + seg); // 1f0b -> 20f8
    memoryASet16(0x3077 + seg, 0x000e, memoryAGet16(0x3077 + seg, 0x000e) + seg); // 1f0c -> 20f9
    memoryASet16(0x3078 + seg, 0x0002, memoryAGet16(0x3078 + seg, 0x0002) + seg); // 1f0d -> 20fa
    memoryASet16(0x3078 + seg, 0x0006, memoryAGet16(0x3078 + seg, 0x0006) + seg); // 1f0e -> 20fb
    memoryASet16(0x3078 + seg, 0x000a, memoryAGet16(0x3078 + seg, 0x000a) + seg); // 1f0f -> 20fc
    memoryASet16(0x3078 + seg, 0x000e, memoryAGet16(0x3078 + seg, 0x000e) + seg); // 1f10 -> 20fd
    memoryASet16(0x3079 + seg, 0x0002, memoryAGet16(0x3079 + seg, 0x0002) + seg); // 1f11 -> 20fe
    memoryASet16(0x3079 + seg, 0x0006, memoryAGet16(0x3079 + seg, 0x0006) + seg); // 1f13 -> 2100
    memoryASet16(0x3079 + seg, 0x000a, memoryAGet16(0x3079 + seg, 0x000a) + seg); // 1f15 -> 2102
    memoryASet16(0x3079 + seg, 0x000e, memoryAGet16(0x3079 + seg, 0x000e) + seg); // 1f18 -> 2105
    memoryASet16(0x307a + seg, 0x0002, memoryAGet16(0x307a + seg, 0x0002) + seg); // 1f1a -> 2107
    memoryASet16(0x307a + seg, 0x0006, memoryAGet16(0x307a + seg, 0x0006) + seg); // 1f1b -> 2108
    memoryASet16(0x307a + seg, 0x000a, memoryAGet16(0x307a + seg, 0x000a) + seg); // 1f1c -> 2109
    memoryASet16(0x307a + seg, 0x000e, memoryAGet16(0x307a + seg, 0x000e) + seg); // 1f1d -> 210a
    memoryASet16(0x307c + seg, 0x000a, memoryAGet16(0x307c + seg, 0x000a) + seg); // 1f1f -> 210c
    memoryASet16(0x307c + seg, 0x000e, memoryAGet16(0x307c + seg, 0x000e) + seg); // 1f21 -> 210e
    memoryASet16(0x307d + seg, 0x0002, memoryAGet16(0x307d + seg, 0x0002) + seg); // 1f24 -> 2111
    memoryASet16(0x307d + seg, 0x0006, memoryAGet16(0x307d + seg, 0x0006) + seg); // 1f26 -> 2113
    memoryASet16(0x307d + seg, 0x000a, memoryAGet16(0x307d + seg, 0x000a) + seg); // 1f29 -> 2116
    memoryASet16(0x307d + seg, 0x000e, memoryAGet16(0x307d + seg, 0x000e) + seg); // 1f2d -> 211a
    memoryASet16(0x307e + seg, 0x0002, memoryAGet16(0x307e + seg, 0x0002) + seg); // 1f30 -> 211d
    memoryASet16(0x307e + seg, 0x0006, memoryAGet16(0x307e + seg, 0x0006) + seg); // 1f33 -> 2120
    memoryASet16(0x307e + seg, 0x000a, memoryAGet16(0x307e + seg, 0x000a) + seg); // 1f35 -> 2122
    memoryASet16(0x307e + seg, 0x000e, memoryAGet16(0x307e + seg, 0x000e) + seg); // 1f38 -> 2125
    memoryASet16(0x307f + seg, 0x0002, memoryAGet16(0x307f + seg, 0x0002) + seg); // 1f3a -> 2127
    memoryASet16(0x307f + seg, 0x0006, memoryAGet16(0x307f + seg, 0x0006) + seg); // 1f3d -> 212a
    memoryASet16(0x307f + seg, 0x000a, memoryAGet16(0x307f + seg, 0x000a) + seg); // 1f40 -> 212d
    memoryASet16(0x307f + seg, 0x000e, memoryAGet16(0x307f + seg, 0x000e) + seg); // 1f43 -> 2130
    memoryASet16(0x3080 + seg, 0x0002, memoryAGet16(0x3080 + seg, 0x0002) + seg); // 1f47 -> 2134
    memoryASet16(0x3080 + seg, 0x0006, memoryAGet16(0x3080 + seg, 0x0006) + seg); // 1f4b -> 2138
    memoryASet16(0x3080 + seg, 0x000a, memoryAGet16(0x3080 + seg, 0x000a) + seg); // 1f4e -> 213b
    memoryASet16(0x3080 + seg, 0x000e, memoryAGet16(0x3080 + seg, 0x000e) + seg); // 1f51 -> 213e
    memoryASet16(0x3081 + seg, 0x0002, memoryAGet16(0x3081 + seg, 0x0002) + seg); // 1f54 -> 2141
    memoryASet16(0x3086 + seg, 0x000e, memoryAGet16(0x3086 + seg, 0x000e) + seg); // 0e8f -> 107c
    memoryASet16(0x3087 + seg, 0x0002, memoryAGet16(0x3087 + seg, 0x0002) + seg); // 0e8f -> 107c
    memoryASet16(0x3087 + seg, 0x0006, memoryAGet16(0x3087 + seg, 0x0006) + seg); // 0e8f -> 107c
    memoryASet16(0x3088 + seg, 0x000c, memoryAGet16(0x3088 + seg, 0x000c) + seg); // 0e8f -> 107c
    memoryASet16(0x3089 + seg, 0x0000, memoryAGet16(0x3089 + seg, 0x0000) + seg); // 0e8f -> 107c
    memoryASet16(0x3089 + seg, 0x0004, memoryAGet16(0x3089 + seg, 0x0004) + seg); // 0e8f -> 107c
    memoryASet16(0x308a + seg, 0x000a, memoryAGet16(0x308a + seg, 0x000a) + seg); // 0e8f -> 107c
    memoryASet16(0x308a + seg, 0x000e, memoryAGet16(0x308a + seg, 0x000e) + seg); // 0e8f -> 107c
    memoryASet16(0x308b + seg, 0x0002, memoryAGet16(0x308b + seg, 0x0002) + seg); // 0e8f -> 107c
    memoryASet16(0x308c + seg, 0x0008, memoryAGet16(0x308c + seg, 0x0008) + seg); // 0e8f -> 107c
    memoryASet16(0x308c + seg, 0x000c, memoryAGet16(0x308c + seg, 0x000c) + seg); // 0e8f -> 107c
    memoryASet16(0x308d + seg, 0x0000, memoryAGet16(0x308d + seg, 0x0000) + seg); // 0e8f -> 107c
    memoryASet16(0x308e + seg, 0x0006, memoryAGet16(0x308e + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x308e + seg, 0x000e, memoryAGet16(0x308e + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3090 + seg, 0x0004, memoryAGet16(0x3090 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3090 + seg, 0x000c, memoryAGet16(0x3090 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3092 + seg, 0x0002, memoryAGet16(0x3092 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3092 + seg, 0x000a, memoryAGet16(0x3092 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3094 + seg, 0x0000, memoryAGet16(0x3094 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3094 + seg, 0x0008, memoryAGet16(0x3094 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x30c7 + seg, 0x000e, memoryAGet16(0x30c7 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x30c9 + seg, 0x000c, memoryAGet16(0x30c9 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x30cb + seg, 0x000a, memoryAGet16(0x30cb + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x30cd + seg, 0x0008, memoryAGet16(0x30cd + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x30cf + seg, 0x0006, memoryAGet16(0x30cf + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d1 + seg, 0x0004, memoryAGet16(0x30d1 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d3 + seg, 0x0002, memoryAGet16(0x30d3 + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d5 + seg, 0x0000, memoryAGet16(0x30d5 + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d6 + seg, 0x000e, memoryAGet16(0x30d6 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d7 + seg, 0x0006, memoryAGet16(0x30d7 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x30d8 + seg, 0x000c, memoryAGet16(0x30d8 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x30d9 + seg, 0x0004, memoryAGet16(0x30d9 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x30db + seg, 0x0002, memoryAGet16(0x30db + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x30dd + seg, 0x0000, memoryAGet16(0x30dd + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x30de + seg, 0x000e, memoryAGet16(0x30de + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x30e0 + seg, 0x000c, memoryAGet16(0x30e0 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x30e3 + seg, 0x000a, memoryAGet16(0x30e3 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x30e4 + seg, 0x0002, memoryAGet16(0x30e4 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x30e5 + seg, 0x0008, memoryAGet16(0x30e5 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x30e6 + seg, 0x0000, memoryAGet16(0x30e6 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x30e7 + seg, 0x000e, memoryAGet16(0x30e7 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x30e9 + seg, 0x0008, memoryAGet16(0x30e9 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x30e9 + seg, 0x000c, memoryAGet16(0x30e9 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x30eb + seg, 0x0002, memoryAGet16(0x30eb + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x30eb + seg, 0x0006, memoryAGet16(0x30eb + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x30eb + seg, 0x000a, memoryAGet16(0x30eb + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x30ed + seg, 0x0000, memoryAGet16(0x30ed + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x30ed + seg, 0x0004, memoryAGet16(0x30ed + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x30ed + seg, 0x0008, memoryAGet16(0x30ed + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x30ee + seg, 0x000e, memoryAGet16(0x30ee + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x30ef + seg, 0x0006, memoryAGet16(0x30ef + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f0 + seg, 0x000c, memoryAGet16(0x30f0 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f1 + seg, 0x0004, memoryAGet16(0x30f1 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f2 + seg, 0x000e, memoryAGet16(0x30f2 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f3 + seg, 0x0002, memoryAGet16(0x30f3 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f5 + seg, 0x0000, memoryAGet16(0x30f5 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x30f6 + seg, 0x0006, memoryAGet16(0x30f6 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x30f6 + seg, 0x000a, memoryAGet16(0x30f6 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x30f6 + seg, 0x000e, memoryAGet16(0x30f6 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x30f8 + seg, 0x0004, memoryAGet16(0x30f8 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x30f8 + seg, 0x0008, memoryAGet16(0x30f8 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x30f8 + seg, 0x000c, memoryAGet16(0x30f8 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x30fa + seg, 0x0006, memoryAGet16(0x30fa + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x30fa + seg, 0x000a, memoryAGet16(0x30fa + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x30fc + seg, 0x0008, memoryAGet16(0x30fc + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x30fd + seg, 0x000e, memoryAGet16(0x30fd + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x30fe + seg, 0x0006, memoryAGet16(0x30fe + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x30ff + seg, 0x000c, memoryAGet16(0x30ff + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3100 + seg, 0x0004, memoryAGet16(0x3100 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3101 + seg, 0x000a, memoryAGet16(0x3101 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3102 + seg, 0x0002, memoryAGet16(0x3102 + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x3103 + seg, 0x000c, memoryAGet16(0x3103 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3104 + seg, 0x0000, memoryAGet16(0x3104 + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x3105 + seg, 0x000a, memoryAGet16(0x3105 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3105 + seg, 0x000e, memoryAGet16(0x3105 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x3107 + seg, 0x0008, memoryAGet16(0x3107 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3107 + seg, 0x000c, memoryAGet16(0x3107 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3109 + seg, 0x0006, memoryAGet16(0x3109 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3109 + seg, 0x000a, memoryAGet16(0x3109 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x310b + seg, 0x0000, memoryAGet16(0x310b + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x310b + seg, 0x0004, memoryAGet16(0x310b + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x310b + seg, 0x0008, memoryAGet16(0x310b + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x310c + seg, 0x000e, memoryAGet16(0x310c + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x310d + seg, 0x0002, memoryAGet16(0x310d + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x310d + seg, 0x0006, memoryAGet16(0x310d + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x310e + seg, 0x000c, memoryAGet16(0x310e + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x310f + seg, 0x0000, memoryAGet16(0x310f + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x310f + seg, 0x0004, memoryAGet16(0x310f + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3110 + seg, 0x000a, memoryAGet16(0x3110 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3110 + seg, 0x000e, memoryAGet16(0x3110 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x3111 + seg, 0x0002, memoryAGet16(0x3111 + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x3112 + seg, 0x0008, memoryAGet16(0x3112 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3112 + seg, 0x000c, memoryAGet16(0x3112 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3113 + seg, 0x0000, memoryAGet16(0x3113 + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x3114 + seg, 0x0006, memoryAGet16(0x3114 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3114 + seg, 0x000a, memoryAGet16(0x3114 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3114 + seg, 0x000e, memoryAGet16(0x3114 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x3116 + seg, 0x0004, memoryAGet16(0x3116 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3116 + seg, 0x0008, memoryAGet16(0x3116 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3116 + seg, 0x000c, memoryAGet16(0x3116 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3118 + seg, 0x0006, memoryAGet16(0x3118 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3118 + seg, 0x000a, memoryAGet16(0x3118 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x311a + seg, 0x0004, memoryAGet16(0x311a + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x311a + seg, 0x0008, memoryAGet16(0x311a + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x311c + seg, 0x0002, memoryAGet16(0x311c + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x311c + seg, 0x0006, memoryAGet16(0x311c + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x311d + seg, 0x000c, memoryAGet16(0x311d + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x311e + seg, 0x0000, memoryAGet16(0x311e + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x311e + seg, 0x0004, memoryAGet16(0x311e + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x311f + seg, 0x000e, memoryAGet16(0x311f + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x3120 + seg, 0x0002, memoryAGet16(0x3120 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3121 + seg, 0x000c, memoryAGet16(0x3121 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3122 + seg, 0x0000, memoryAGet16(0x3122 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3123 + seg, 0x000a, memoryAGet16(0x3123 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3123 + seg, 0x000e, memoryAGet16(0x3123 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3125 + seg, 0x0004, memoryAGet16(0x3125 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3125 + seg, 0x0008, memoryAGet16(0x3125 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3125 + seg, 0x000c, memoryAGet16(0x3125 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3127 + seg, 0x0006, memoryAGet16(0x3127 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3127 + seg, 0x000a, memoryAGet16(0x3127 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3129 + seg, 0x0004, memoryAGet16(0x3129 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3129 + seg, 0x0008, memoryAGet16(0x3129 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x312b + seg, 0x0002, memoryAGet16(0x312b + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x312b + seg, 0x0006, memoryAGet16(0x312b + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x312d + seg, 0x0000, memoryAGet16(0x312d + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x312d + seg, 0x0004, memoryAGet16(0x312d + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x312e + seg, 0x000e, memoryAGet16(0x312e + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x312f + seg, 0x0002, memoryAGet16(0x312f + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3130 + seg, 0x0008, memoryAGet16(0x3130 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3130 + seg, 0x000c, memoryAGet16(0x3130 + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3131 + seg, 0x0000, memoryAGet16(0x3131 + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x3132 + seg, 0x0006, memoryAGet16(0x3132 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3132 + seg, 0x000a, memoryAGet16(0x3132 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3132 + seg, 0x000e, memoryAGet16(0x3132 + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x3134 + seg, 0x000c, memoryAGet16(0x3134 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3136 + seg, 0x0006, memoryAGet16(0x3136 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3136 + seg, 0x000a, memoryAGet16(0x3136 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3138 + seg, 0x0004, memoryAGet16(0x3138 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3138 + seg, 0x0008, memoryAGet16(0x3138 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x313a + seg, 0x0002, memoryAGet16(0x313a + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x313a + seg, 0x0006, memoryAGet16(0x313a + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x313c + seg, 0x0000, memoryAGet16(0x313c + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x313c + seg, 0x0004, memoryAGet16(0x313c + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x313d + seg, 0x000e, memoryAGet16(0x313d + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x313e + seg, 0x0002, memoryAGet16(0x313e + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x313f + seg, 0x000c, memoryAGet16(0x313f + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x3140 + seg, 0x0000, memoryAGet16(0x3140 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3141 + seg, 0x000a, memoryAGet16(0x3141 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3141 + seg, 0x000e, memoryAGet16(0x3141 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3143 + seg, 0x0008, memoryAGet16(0x3143 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3143 + seg, 0x000c, memoryAGet16(0x3143 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3145 + seg, 0x0006, memoryAGet16(0x3145 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3145 + seg, 0x000a, memoryAGet16(0x3145 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3147 + seg, 0x0004, memoryAGet16(0x3147 + seg, 0x0004) + seg); // 0fa8 -> 1195
    memoryASet16(0x3147 + seg, 0x0008, memoryAGet16(0x3147 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3149 + seg, 0x0002, memoryAGet16(0x3149 + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x3149 + seg, 0x0006, memoryAGet16(0x3149 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x314b + seg, 0x0000, memoryAGet16(0x314b + seg, 0x0000) + seg); // 0fa8 -> 1195
    memoryASet16(0x314b + seg, 0x0004, memoryAGet16(0x314b + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x314c + seg, 0x000e, memoryAGet16(0x314c + seg, 0x000e) + seg); // 0fa8 -> 1195
    memoryASet16(0x314d + seg, 0x0002, memoryAGet16(0x314d + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x314e + seg, 0x000c, memoryAGet16(0x314e + seg, 0x000c) + seg); // 0fa8 -> 1195
    memoryASet16(0x314f + seg, 0x0000, memoryAGet16(0x314f + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3150 + seg, 0x000a, memoryAGet16(0x3150 + seg, 0x000a) + seg); // 0fa8 -> 1195
    memoryASet16(0x3150 + seg, 0x000e, memoryAGet16(0x3150 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3152 + seg, 0x0008, memoryAGet16(0x3152 + seg, 0x0008) + seg); // 0fa8 -> 1195
    memoryASet16(0x3152 + seg, 0x000c, memoryAGet16(0x3152 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3154 + seg, 0x0002, memoryAGet16(0x3154 + seg, 0x0002) + seg); // 0fa8 -> 1195
    memoryASet16(0x3154 + seg, 0x0006, memoryAGet16(0x3154 + seg, 0x0006) + seg); // 0fa8 -> 1195
    memoryASet16(0x3154 + seg, 0x000a, memoryAGet16(0x3154 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3156 + seg, 0x0000, memoryAGet16(0x3156 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x3156 + seg, 0x0008, memoryAGet16(0x3156 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3158 + seg, 0x0002, memoryAGet16(0x3158 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3158 + seg, 0x0006, memoryAGet16(0x3158 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x315a + seg, 0x0000, memoryAGet16(0x315a + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x315a + seg, 0x0004, memoryAGet16(0x315a + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x315b + seg, 0x000a, memoryAGet16(0x315b + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x315b + seg, 0x000e, memoryAGet16(0x315b + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x315c + seg, 0x0002, memoryAGet16(0x315c + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x315d + seg, 0x000c, memoryAGet16(0x315d + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x315e + seg, 0x0000, memoryAGet16(0x315e + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x315f + seg, 0x000a, memoryAGet16(0x315f + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x315f + seg, 0x000e, memoryAGet16(0x315f + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3161 + seg, 0x0008, memoryAGet16(0x3161 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x3161 + seg, 0x000c, memoryAGet16(0x3161 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3163 + seg, 0x0002, memoryAGet16(0x3163 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3163 + seg, 0x0006, memoryAGet16(0x3163 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x3163 + seg, 0x000a, memoryAGet16(0x3163 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3165 + seg, 0x0000, memoryAGet16(0x3165 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x3165 + seg, 0x0008, memoryAGet16(0x3165 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3167 + seg, 0x0002, memoryAGet16(0x3167 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3167 + seg, 0x0006, memoryAGet16(0x3167 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3169 + seg, 0x0000, memoryAGet16(0x3169 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x3169 + seg, 0x0004, memoryAGet16(0x3169 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x316a + seg, 0x000e, memoryAGet16(0x316a + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x316b + seg, 0x0002, memoryAGet16(0x316b + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x316c + seg, 0x000c, memoryAGet16(0x316c + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x316d + seg, 0x0000, memoryAGet16(0x316d + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x316e + seg, 0x000a, memoryAGet16(0x316e + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x316e + seg, 0x000e, memoryAGet16(0x316e + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3170 + seg, 0x0004, memoryAGet16(0x3170 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3170 + seg, 0x000c, memoryAGet16(0x3170 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3172 + seg, 0x0006, memoryAGet16(0x3172 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x3172 + seg, 0x000a, memoryAGet16(0x3172 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3174 + seg, 0x0008, memoryAGet16(0x3174 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x3175 + seg, 0x000e, memoryAGet16(0x3175 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x3176 + seg, 0x0006, memoryAGet16(0x3176 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x3177 + seg, 0x000c, memoryAGet16(0x3177 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x3178 + seg, 0x0004, memoryAGet16(0x3178 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x3179 + seg, 0x000a, memoryAGet16(0x3179 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x317a + seg, 0x0002, memoryAGet16(0x317a + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x317c + seg, 0x0000, memoryAGet16(0x317c + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x317d + seg, 0x000e, memoryAGet16(0x317d + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x317f + seg, 0x000c, memoryAGet16(0x317f + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3181 + seg, 0x0002, memoryAGet16(0x3181 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3181 + seg, 0x000a, memoryAGet16(0x3181 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3183 + seg, 0x0008, memoryAGet16(0x3183 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3185 + seg, 0x0006, memoryAGet16(0x3185 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3187 + seg, 0x0004, memoryAGet16(0x3187 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3189 + seg, 0x0002, memoryAGet16(0x3189 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x318b + seg, 0x0000, memoryAGet16(0x318b + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x318c + seg, 0x000a, memoryAGet16(0x318c + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x318c + seg, 0x000e, memoryAGet16(0x318c + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x318e + seg, 0x0008, memoryAGet16(0x318e + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x318e + seg, 0x000c, memoryAGet16(0x318e + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3190 + seg, 0x0006, memoryAGet16(0x3190 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3190 + seg, 0x000a, memoryAGet16(0x3190 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3192 + seg, 0x0004, memoryAGet16(0x3192 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3192 + seg, 0x0008, memoryAGet16(0x3192 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3194 + seg, 0x0002, memoryAGet16(0x3194 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3194 + seg, 0x0006, memoryAGet16(0x3194 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3196 + seg, 0x0000, memoryAGet16(0x3196 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3196 + seg, 0x0004, memoryAGet16(0x3196 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3197 + seg, 0x000a, memoryAGet16(0x3197 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x3197 + seg, 0x000e, memoryAGet16(0x3197 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x3198 + seg, 0x0002, memoryAGet16(0x3198 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3199 + seg, 0x0008, memoryAGet16(0x3199 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x3199 + seg, 0x000c, memoryAGet16(0x3199 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x319a + seg, 0x0000, memoryAGet16(0x319a + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x319b + seg, 0x0006, memoryAGet16(0x319b + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x319b + seg, 0x000a, memoryAGet16(0x319b + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x319b + seg, 0x000e, memoryAGet16(0x319b + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x319d + seg, 0x0004, memoryAGet16(0x319d + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x319d + seg, 0x0008, memoryAGet16(0x319d + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x319d + seg, 0x000c, memoryAGet16(0x319d + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x319f + seg, 0x0002, memoryAGet16(0x319f + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x319f + seg, 0x0006, memoryAGet16(0x319f + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x319f + seg, 0x000a, memoryAGet16(0x319f + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31a1 + seg, 0x0000, memoryAGet16(0x31a1 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31a1 + seg, 0x0004, memoryAGet16(0x31a1 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31a1 + seg, 0x0008, memoryAGet16(0x31a1 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31a2 + seg, 0x000e, memoryAGet16(0x31a2 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31a3 + seg, 0x0002, memoryAGet16(0x31a3 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31a3 + seg, 0x0006, memoryAGet16(0x31a3 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31a4 + seg, 0x000c, memoryAGet16(0x31a4 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31a5 + seg, 0x0000, memoryAGet16(0x31a5 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31a5 + seg, 0x0004, memoryAGet16(0x31a5 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31a6 + seg, 0x000a, memoryAGet16(0x31a6 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31a6 + seg, 0x000e, memoryAGet16(0x31a6 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31a7 + seg, 0x0002, memoryAGet16(0x31a7 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31a8 + seg, 0x0008, memoryAGet16(0x31a8 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31a8 + seg, 0x000c, memoryAGet16(0x31a8 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31a9 + seg, 0x0000, memoryAGet16(0x31a9 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31aa + seg, 0x0006, memoryAGet16(0x31aa + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31aa + seg, 0x000a, memoryAGet16(0x31aa + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31aa + seg, 0x000e, memoryAGet16(0x31aa + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31ac + seg, 0x0004, memoryAGet16(0x31ac + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ac + seg, 0x0008, memoryAGet16(0x31ac + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31ac + seg, 0x000c, memoryAGet16(0x31ac + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31ae + seg, 0x0002, memoryAGet16(0x31ae + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ae + seg, 0x0006, memoryAGet16(0x31ae + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31ae + seg, 0x000a, memoryAGet16(0x31ae + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31b0 + seg, 0x0000, memoryAGet16(0x31b0 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b0 + seg, 0x0004, memoryAGet16(0x31b0 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31b0 + seg, 0x0008, memoryAGet16(0x31b0 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31b1 + seg, 0x000e, memoryAGet16(0x31b1 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b2 + seg, 0x0002, memoryAGet16(0x31b2 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31b2 + seg, 0x0006, memoryAGet16(0x31b2 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31b3 + seg, 0x000c, memoryAGet16(0x31b3 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31b4 + seg, 0x0000, memoryAGet16(0x31b4 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31b4 + seg, 0x0004, memoryAGet16(0x31b4 + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31b5 + seg, 0x000a, memoryAGet16(0x31b5 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b5 + seg, 0x000e, memoryAGet16(0x31b5 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b6 + seg, 0x0002, memoryAGet16(0x31b6 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31b7 + seg, 0x0008, memoryAGet16(0x31b7 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b7 + seg, 0x000c, memoryAGet16(0x31b7 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31b8 + seg, 0x0000, memoryAGet16(0x31b8 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31b9 + seg, 0x000a, memoryAGet16(0x31b9 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31b9 + seg, 0x000e, memoryAGet16(0x31b9 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31bb + seg, 0x0008, memoryAGet16(0x31bb + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31bb + seg, 0x000c, memoryAGet16(0x31bb + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31bd + seg, 0x0006, memoryAGet16(0x31bd + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31bd + seg, 0x000a, memoryAGet16(0x31bd + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31bf + seg, 0x0004, memoryAGet16(0x31bf + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31bf + seg, 0x0008, memoryAGet16(0x31bf + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x31c1 + seg, 0x0002, memoryAGet16(0x31c1 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31c1 + seg, 0x0006, memoryAGet16(0x31c1 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31c3 + seg, 0x0000, memoryAGet16(0x31c3 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31c3 + seg, 0x0004, memoryAGet16(0x31c3 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31c4 + seg, 0x000e, memoryAGet16(0x31c4 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31c5 + seg, 0x0002, memoryAGet16(0x31c5 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31c6 + seg, 0x000c, memoryAGet16(0x31c6 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31c7 + seg, 0x0000, memoryAGet16(0x31c7 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31c8 + seg, 0x000a, memoryAGet16(0x31c8 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31c8 + seg, 0x000e, memoryAGet16(0x31c8 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ca + seg, 0x000c, memoryAGet16(0x31ca + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31cc + seg, 0x000a, memoryAGet16(0x31cc + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ce + seg, 0x0008, memoryAGet16(0x31ce + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d0 + seg, 0x0006, memoryAGet16(0x31d0 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d1 + seg, 0x000c, memoryAGet16(0x31d1 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31d2 + seg, 0x0000, memoryAGet16(0x31d2 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31d2 + seg, 0x0004, memoryAGet16(0x31d2 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d3 + seg, 0x000a, memoryAGet16(0x31d3 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31d3 + seg, 0x000e, memoryAGet16(0x31d3 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31d4 + seg, 0x0002, memoryAGet16(0x31d4 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d6 + seg, 0x0000, memoryAGet16(0x31d6 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d7 + seg, 0x000a, memoryAGet16(0x31d7 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31d7 + seg, 0x000e, memoryAGet16(0x31d7 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d9 + seg, 0x0004, memoryAGet16(0x31d9 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31d9 + seg, 0x0008, memoryAGet16(0x31d9 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31d9 + seg, 0x000c, memoryAGet16(0x31d9 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31db + seg, 0x0002, memoryAGet16(0x31db + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31db + seg, 0x0006, memoryAGet16(0x31db + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31db + seg, 0x000a, memoryAGet16(0x31db + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31dd + seg, 0x0000, memoryAGet16(0x31dd + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31dd + seg, 0x0004, memoryAGet16(0x31dd + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31dd + seg, 0x0008, memoryAGet16(0x31dd + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31de + seg, 0x000e, memoryAGet16(0x31de + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31df + seg, 0x0002, memoryAGet16(0x31df + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31df + seg, 0x0006, memoryAGet16(0x31df + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31e0 + seg, 0x000c, memoryAGet16(0x31e0 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e1 + seg, 0x0004, memoryAGet16(0x31e1 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e2 + seg, 0x000a, memoryAGet16(0x31e2 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e3 + seg, 0x0002, memoryAGet16(0x31e3 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e4 + seg, 0x0008, memoryAGet16(0x31e4 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31e4 + seg, 0x000c, memoryAGet16(0x31e4 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31e5 + seg, 0x0000, memoryAGet16(0x31e5 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e6 + seg, 0x0006, memoryAGet16(0x31e6 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e6 + seg, 0x000a, memoryAGet16(0x31e6 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31e6 + seg, 0x000e, memoryAGet16(0x31e6 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31e8 + seg, 0x0004, memoryAGet16(0x31e8 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31e8 + seg, 0x0008, memoryAGet16(0x31e8 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31e8 + seg, 0x000c, memoryAGet16(0x31e8 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31ea + seg, 0x0006, memoryAGet16(0x31ea + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31ea + seg, 0x000a, memoryAGet16(0x31ea + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ec + seg, 0x0004, memoryAGet16(0x31ec + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x31ec + seg, 0x0008, memoryAGet16(0x31ec + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x31ee + seg, 0x0002, memoryAGet16(0x31ee + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x31ee + seg, 0x0006, memoryAGet16(0x31ee + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f0 + seg, 0x0000, memoryAGet16(0x31f0 + seg, 0x0000) + seg); // 1080 -> 126d
    memoryASet16(0x31f0 + seg, 0x0004, memoryAGet16(0x31f0 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f1 + seg, 0x000e, memoryAGet16(0x31f1 + seg, 0x000e) + seg); // 1080 -> 126d
    memoryASet16(0x31f2 + seg, 0x0002, memoryAGet16(0x31f2 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f3 + seg, 0x000c, memoryAGet16(0x31f3 + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31f4 + seg, 0x0000, memoryAGet16(0x31f4 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f5 + seg, 0x000a, memoryAGet16(0x31f5 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x31f5 + seg, 0x000e, memoryAGet16(0x31f5 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f7 + seg, 0x0008, memoryAGet16(0x31f7 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x31f7 + seg, 0x000c, memoryAGet16(0x31f7 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x31f9 + seg, 0x0006, memoryAGet16(0x31f9 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x31f9 + seg, 0x000a, memoryAGet16(0x31f9 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x31fb + seg, 0x0000, memoryAGet16(0x31fb + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x31fb + seg, 0x0008, memoryAGet16(0x31fb + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x31fc + seg, 0x000e, memoryAGet16(0x31fc + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x31fd + seg, 0x0006, memoryAGet16(0x31fd + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x31fe + seg, 0x000c, memoryAGet16(0x31fe + seg, 0x000c) + seg); // 1080 -> 126d
    memoryASet16(0x31ff + seg, 0x0004, memoryAGet16(0x31ff + seg, 0x0004) + seg); // 1080 -> 126d
    memoryASet16(0x3200 + seg, 0x000a, memoryAGet16(0x3200 + seg, 0x000a) + seg); // 1080 -> 126d
    memoryASet16(0x3201 + seg, 0x0002, memoryAGet16(0x3201 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3202 + seg, 0x0008, memoryAGet16(0x3202 + seg, 0x0008) + seg); // 1080 -> 126d
    memoryASet16(0x3203 + seg, 0x0000, memoryAGet16(0x3203 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3204 + seg, 0x0006, memoryAGet16(0x3204 + seg, 0x0006) + seg); // 1080 -> 126d
    memoryASet16(0x3204 + seg, 0x000e, memoryAGet16(0x3204 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3206 + seg, 0x0008, memoryAGet16(0x3206 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x3206 + seg, 0x000c, memoryAGet16(0x3206 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3208 + seg, 0x0002, memoryAGet16(0x3208 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3208 + seg, 0x0006, memoryAGet16(0x3208 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3208 + seg, 0x000a, memoryAGet16(0x3208 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x320a + seg, 0x0004, memoryAGet16(0x320a + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x320a + seg, 0x0008, memoryAGet16(0x320a + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x320c + seg, 0x0002, memoryAGet16(0x320c + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x320c + seg, 0x0006, memoryAGet16(0x320c + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x320e + seg, 0x0000, memoryAGet16(0x320e + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x320e + seg, 0x0004, memoryAGet16(0x320e + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x320f + seg, 0x000a, memoryAGet16(0x320f + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x320f + seg, 0x000e, memoryAGet16(0x320f + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x3210 + seg, 0x0002, memoryAGet16(0x3210 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3211 + seg, 0x000c, memoryAGet16(0x3211 + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3212 + seg, 0x0000, memoryAGet16(0x3212 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3213 + seg, 0x000a, memoryAGet16(0x3213 + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x3213 + seg, 0x000e, memoryAGet16(0x3213 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3215 + seg, 0x0008, memoryAGet16(0x3215 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x3215 + seg, 0x000c, memoryAGet16(0x3215 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3217 + seg, 0x0006, memoryAGet16(0x3217 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3217 + seg, 0x000a, memoryAGet16(0x3217 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3219 + seg, 0x0000, memoryAGet16(0x3219 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3219 + seg, 0x0004, memoryAGet16(0x3219 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3219 + seg, 0x0008, memoryAGet16(0x3219 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x321a + seg, 0x000e, memoryAGet16(0x321a + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x321b + seg, 0x0002, memoryAGet16(0x321b + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x321b + seg, 0x0006, memoryAGet16(0x321b + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x321c + seg, 0x000c, memoryAGet16(0x321c + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x321d + seg, 0x0000, memoryAGet16(0x321d + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x321d + seg, 0x0004, memoryAGet16(0x321d + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x321e + seg, 0x000a, memoryAGet16(0x321e + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x321e + seg, 0x000e, memoryAGet16(0x321e + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x321f + seg, 0x0002, memoryAGet16(0x321f + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3220 + seg, 0x0008, memoryAGet16(0x3220 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3221 + seg, 0x0000, memoryAGet16(0x3221 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3222 + seg, 0x0006, memoryAGet16(0x3222 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3222 + seg, 0x000e, memoryAGet16(0x3222 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3224 + seg, 0x000c, memoryAGet16(0x3224 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3226 + seg, 0x000a, memoryAGet16(0x3226 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3228 + seg, 0x0008, memoryAGet16(0x3228 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x322a + seg, 0x0006, memoryAGet16(0x322a + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x322b + seg, 0x000c, memoryAGet16(0x322b + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x322c + seg, 0x0004, memoryAGet16(0x322c + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x322d + seg, 0x000a, memoryAGet16(0x322d + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x322d + seg, 0x000e, memoryAGet16(0x322d + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x322e + seg, 0x0002, memoryAGet16(0x322e + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x322f + seg, 0x0008, memoryAGet16(0x322f + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x322f + seg, 0x000c, memoryAGet16(0x322f + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3230 + seg, 0x0000, memoryAGet16(0x3230 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3231 + seg, 0x0006, memoryAGet16(0x3231 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3231 + seg, 0x000a, memoryAGet16(0x3231 + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x3231 + seg, 0x000e, memoryAGet16(0x3231 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3233 + seg, 0x0004, memoryAGet16(0x3233 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3233 + seg, 0x0008, memoryAGet16(0x3233 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x3233 + seg, 0x000c, memoryAGet16(0x3233 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3235 + seg, 0x0002, memoryAGet16(0x3235 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3235 + seg, 0x0006, memoryAGet16(0x3235 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3235 + seg, 0x000a, memoryAGet16(0x3235 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3237 + seg, 0x0000, memoryAGet16(0x3237 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3237 + seg, 0x0004, memoryAGet16(0x3237 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3237 + seg, 0x0008, memoryAGet16(0x3237 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3238 + seg, 0x000e, memoryAGet16(0x3238 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3239 + seg, 0x0002, memoryAGet16(0x3239 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3239 + seg, 0x0006, memoryAGet16(0x3239 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x323a + seg, 0x000c, memoryAGet16(0x323a + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x323b + seg, 0x0000, memoryAGet16(0x323b + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x323b + seg, 0x0004, memoryAGet16(0x323b + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x323c + seg, 0x000a, memoryAGet16(0x323c + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x323c + seg, 0x000e, memoryAGet16(0x323c + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x323d + seg, 0x0002, memoryAGet16(0x323d + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x323e + seg, 0x0008, memoryAGet16(0x323e + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x323e + seg, 0x000c, memoryAGet16(0x323e + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x323f + seg, 0x0000, memoryAGet16(0x323f + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3240 + seg, 0x0006, memoryAGet16(0x3240 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3240 + seg, 0x000e, memoryAGet16(0x3240 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3242 + seg, 0x0004, memoryAGet16(0x3242 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3242 + seg, 0x000c, memoryAGet16(0x3242 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3244 + seg, 0x0002, memoryAGet16(0x3244 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3244 + seg, 0x0006, memoryAGet16(0x3244 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3244 + seg, 0x000a, memoryAGet16(0x3244 + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x3246 + seg, 0x0000, memoryAGet16(0x3246 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3246 + seg, 0x0004, memoryAGet16(0x3246 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3246 + seg, 0x0008, memoryAGet16(0x3246 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x3247 + seg, 0x000e, memoryAGet16(0x3247 + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x3248 + seg, 0x0006, memoryAGet16(0x3248 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x324a + seg, 0x0004, memoryAGet16(0x324a + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x324b + seg, 0x000a, memoryAGet16(0x324b + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x324c + seg, 0x0002, memoryAGet16(0x324c + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x324e + seg, 0x0000, memoryAGet16(0x324e + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x324f + seg, 0x0006, memoryAGet16(0x324f + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x324f + seg, 0x000e, memoryAGet16(0x324f + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3251 + seg, 0x000c, memoryAGet16(0x3251 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x3253 + seg, 0x000a, memoryAGet16(0x3253 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3255 + seg, 0x0000, memoryAGet16(0x3255 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3255 + seg, 0x0008, memoryAGet16(0x3255 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3256 + seg, 0x000e, memoryAGet16(0x3256 + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x3257 + seg, 0x0006, memoryAGet16(0x3257 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3258 + seg, 0x000c, memoryAGet16(0x3258 + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3259 + seg, 0x0004, memoryAGet16(0x3259 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x325a + seg, 0x000a, memoryAGet16(0x325a + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x325b + seg, 0x0002, memoryAGet16(0x325b + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x325c + seg, 0x0008, memoryAGet16(0x325c + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x325d + seg, 0x0000, memoryAGet16(0x325d + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x325e + seg, 0x0006, memoryAGet16(0x325e + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x325e + seg, 0x000e, memoryAGet16(0x325e + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x3260 + seg, 0x0004, memoryAGet16(0x3260 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3260 + seg, 0x000c, memoryAGet16(0x3260 + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3262 + seg, 0x0002, memoryAGet16(0x3262 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3262 + seg, 0x0006, memoryAGet16(0x3262 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3262 + seg, 0x000a, memoryAGet16(0x3262 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3264 + seg, 0x0000, memoryAGet16(0x3264 + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x3264 + seg, 0x0004, memoryAGet16(0x3264 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3264 + seg, 0x0008, memoryAGet16(0x3264 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3265 + seg, 0x000e, memoryAGet16(0x3265 + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x3266 + seg, 0x0002, memoryAGet16(0x3266 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3266 + seg, 0x0006, memoryAGet16(0x3266 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3268 + seg, 0x0000, memoryAGet16(0x3268 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3268 + seg, 0x0004, memoryAGet16(0x3268 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3269 + seg, 0x000e, memoryAGet16(0x3269 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x326a + seg, 0x0002, memoryAGet16(0x326a + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x326b + seg, 0x000c, memoryAGet16(0x326b + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x326c + seg, 0x0000, memoryAGet16(0x326c + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x326d + seg, 0x000a, memoryAGet16(0x326d + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x326d + seg, 0x000e, memoryAGet16(0x326d + seg, 0x000e) + seg); // 11a2 -> 138f
    memoryASet16(0x326f + seg, 0x0008, memoryAGet16(0x326f + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x326f + seg, 0x000c, memoryAGet16(0x326f + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3271 + seg, 0x0002, memoryAGet16(0x3271 + seg, 0x0002) + seg); // 1080 -> 126d
    memoryASet16(0x3271 + seg, 0x0006, memoryAGet16(0x3271 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3271 + seg, 0x000a, memoryAGet16(0x3271 + seg, 0x000a) + seg); // 09dc -> 0bc9
    memoryASet16(0x3273 + seg, 0x0008, memoryAGet16(0x3273 + seg, 0x0008) + seg); // 09dc -> 0bc9
    memoryASet16(0x3275 + seg, 0x0006, memoryAGet16(0x3275 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3276 + seg, 0x000c, memoryAGet16(0x3276 + seg, 0x000c) + seg); // 11a2 -> 138f
    memoryASet16(0x3277 + seg, 0x0004, memoryAGet16(0x3277 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3278 + seg, 0x000a, memoryAGet16(0x3278 + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x3279 + seg, 0x0002, memoryAGet16(0x3279 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x327a + seg, 0x0008, memoryAGet16(0x327a + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x327b + seg, 0x0000, memoryAGet16(0x327b + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x327c + seg, 0x0006, memoryAGet16(0x327c + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x327c + seg, 0x000e, memoryAGet16(0x327c + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x327e + seg, 0x0004, memoryAGet16(0x327e + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3280 + seg, 0x0006, memoryAGet16(0x3280 + seg, 0x0006) + seg); // 09dc -> 0bc9
    memoryASet16(0x3280 + seg, 0x000a, memoryAGet16(0x3280 + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x3282 + seg, 0x0004, memoryAGet16(0x3282 + seg, 0x0004) + seg); // 09dc -> 0bc9
    memoryASet16(0x3282 + seg, 0x0008, memoryAGet16(0x3282 + seg, 0x0008) + seg); // 11a2 -> 138f
    memoryASet16(0x3284 + seg, 0x0002, memoryAGet16(0x3284 + seg, 0x0002) + seg); // 09dc -> 0bc9
    memoryASet16(0x3284 + seg, 0x0006, memoryAGet16(0x3284 + seg, 0x0006) + seg); // 11a2 -> 138f
    memoryASet16(0x3286 + seg, 0x0000, memoryAGet16(0x3286 + seg, 0x0000) + seg); // 09dc -> 0bc9
    memoryASet16(0x3286 + seg, 0x0004, memoryAGet16(0x3286 + seg, 0x0004) + seg); // 11a2 -> 138f
    memoryASet16(0x3287 + seg, 0x000e, memoryAGet16(0x3287 + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3288 + seg, 0x0002, memoryAGet16(0x3288 + seg, 0x0002) + seg); // 11a2 -> 138f
    memoryASet16(0x3289 + seg, 0x000c, memoryAGet16(0x3289 + seg, 0x000c) + seg); // 09dc -> 0bc9
    memoryASet16(0x328a + seg, 0x0000, memoryAGet16(0x328a + seg, 0x0000) + seg); // 11a2 -> 138f
    memoryASet16(0x328b + seg, 0x000a, memoryAGet16(0x328b + seg, 0x000a) + seg); // 11a2 -> 138f
    memoryASet16(0x328b + seg, 0x000e, memoryAGet16(0x328b + seg, 0x000e) + seg); // 09dc -> 0bc9
    memoryASet16(0x3322 + seg, 0x000e, memoryAGet16(0x3322 + seg, 0x000e) + seg); // 1d06 -> 1ef3
    memoryASet16(0x3323 + seg, 0x0002, memoryAGet16(0x3323 + seg, 0x0002) + seg); // 1d06 -> 1ef3
    memoryASet16(0x35df + seg, 0x000c, memoryAGet16(0x35df + seg, 0x000c) + seg); // 0000 -> 01ed
    memoryASet16(0x35e0 + seg, 0x0000, memoryAGet16(0x35e0 + seg, 0x0000) + seg); // 0000 -> 01ed
    memoryASet16(0x35e0 + seg, 0x0004, memoryAGet16(0x35e0 + seg, 0x0004) + seg); // 0000 -> 01ed
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x1ed0, 0x1ed, 0x0, 0x1ed, 0x99, 0x1ed0, 0x1ed, 0x9c, 0x1ed, 0x162,
        0x1fe3, 0x1ed, 0x113, 0x1ed, 0x162, 0x2003, 0x1ed, 0x133, 0x1ed, 0x162,
        0x203b, 0x1ed, 0x16b, 0x1ed, 0x1ae, 0x207e, 0x1ed, 0x1ae, 0x1ed, 0x1db,
        0x20ab, 0x1ed, 0x1db, 0x1ed, 0x21e, 0x20ee, 0x1ed, 0x21e, 0x1ed, 0x226,
        0x20f6, 0x1ed, 0x226, 0x1ed, 0x26c, 0x213d, 0x1ed, 0x26d, 0x1ed, 0x29a,
        0x216a, 0x1ed, 0x29a, 0x1ed, 0x2de, 0x216a, 0x1ed, 0x305, 0x1ed, 0x3bf,
        0x22b3, 0x1ed, 0x3e3, 0x1ed, 0x3fc, 0x22cc, 0x1ed, 0x3fc, 0x1ed, 0x4b5,
        0x2385, 0x1ed, 0x4b5, 0x1ed, 0x59d, 0x246d, 0x1ed, 0x59d, 0x1ed, 0x5ba,
        0x248b, 0x1ed, 0x5bb, 0x1ed, 0x5e0, 0x24b0, 0x1ed, 0x5e0, 0x1ed, 0x660,
        0x2530, 0x1ed, 0x660, 0x1ed, 0x69f, 0x256f, 0x1ed, 0x69f, 0x1ed, 0x70c,
        0x25dc, 0x1ed, 0x70c, 0x1ed, 0x75e, 0x262e, 0x1ed, 0x75e, 0x1ed, 0x7e0,
        0x26b0, 0x1ed, 0x7e0, 0x1ed, 0x818, 0x277c, 0x1ed, 0x8ac, 0x1ed, 0x947,
        0x2912, 0x1ed, 0xa42, 0x1ed, 0xab1, 0x2981, 0x1ed, 0xab1, 0x1ed, 0xb19,
        0x2a2c, 0x1ed, 0xb5c, 0x1ed, 0xbac, 0x2a7c, 0x1ed, 0xbac, 0x1ed, 0xc43,
        0x2b13, 0x1ed, 0xc43, 0x1ed, 0xce9, 0x2bf3, 0x1ed, 0xd23, 0x1ed, 0xd3c,
        0x2c0c, 0x1ed, 0xd3c, 0x1ed, 0xe40, 0x2d25, 0x1ed, 0xe55, 0x1ed, 0xf90,
        0x2e73, 0x1ed, 0xfa3, 0x1ed, 0xfe6, 0x2ec7, 0x1ed, 0xff7, 0x1ed, 0x101d,
        0x2eed, 0x1ed, 0x101d, 0x1ed, 0x1056, 0x2f26, 0x1ed, 0x1056, 0x1ed, 0x1084,
        0x2f54, 0x1ed, 0x1084, 0x1ed, 0x114a, 0x301a, 0x1ed, 0x114a, 0x1ed, 0x1188,
        0x3058, 0x1ed, 0x1188, 0x1ed, 0x11cb, 0x309b, 0x1ed, 0x11cb, 0x1ed, 0x11ee,
        0x30be, 0x1ed, 0x11ee, 0x1ed, 0x12a3, 0x3173, 0x1ed, 0x12a3, 0x1ed, 0x1314,
        0x31e4, 0x1ed, 0x1314, 0x1ed, 0x13ec, 0x32bc, 0x1ed, 0x13ec, 0x1ed, 0x1415,
        0x32ff, 0x1ed, 0x142f, 0x1ed, 0x145b, 0x332b, 0x1ed, 0x145b, 0x1ed, 0x1487,
        0x3357, 0x1ed, 0x1487, 0x1ed, 0x1491, 0x3383, 0x1ed, 0x14b3, 0x1ed, 0x155b,
        0x3383, 0x1ed, 0x155d, 0x1ed, 0x15ac, 0x349f, 0x1ed, 0x15cf, 0x1ed, 0x163f,
        0x352c, 0x1ed, 0x165c, 0x1ed, 0x1681, 0x3551, 0x1ed, 0x1681, 0x1ed, 0x16a3,
        0x3573, 0x1ed, 0x16a3, 0x1ed, 0x16d4, 0x35d6, 0x1ed, 0x1706, 0x1ed, 0x170c,
        0x35e9, 0x1ed, 0x1719, 0x1ed, 0x1734, 0x3604, 0x1ed, 0x1734, 0x1ed, 0x1752,
        0x3622, 0x1ed, 0x1752, 0x1ed, 0x1762, 0x3632, 0x1ed, 0x1762, 0x1ed, 0x1789,
        0x365c, 0x1ed, 0x178c, 0x1ed, 0x179a, 0x366a, 0x1ed, 0x179a, 0x1ed, 0x181e,
        0x36ee, 0x1ed, 0x181e, 0x1ed, 0x183b, 0x370b, 0x1ed, 0x183b, 0x1ed, 0x1915,
        0x37e5, 0x1ed, 0x1915, 0x1ed, 0x1947, 0x3845, 0x1ed, 0x1975, 0x1ed, 0x19b6,
        0x3886, 0x1ed, 0x19b6, 0x1ed, 0x19cf, 0x38e2, 0x1ed, 0x1a12, 0x1ed, 0x1a2d,
        0x38fd, 0x1ed, 0x1a2d, 0x1ed, 0x1a8b, 0x395b, 0x1ed, 0x1a8b, 0x1ed, 0x1a9a,
        0x396a, 0x1ed, 0x1a9a, 0x1ed, 0x1aab, 0x397b, 0x1ed, 0x1aab, 0x1ed, 0x1ae3,
        0x39b3, 0x1ed, 0x1ae3, 0x1ed, 0x1b06, 0x3a24, 0x1ed, 0x1b54, 0x1ed, 0x1b7b,
        0x3a4b, 0x1ed, 0x1b7b, 0x1ed, 0x1bb8, 0x3a88, 0x1ed, 0x1bb8, 0x1ed, 0x1bc9,
        0x3a99, 0x1ed, 0x1bc9, 0x1ed, 0x1bf2, 0x3ac2, 0x1ed, 0x1bf2, 0x1ed, 0x1c6f,
        0x3b3f, 0x1ed, 0x1c6f, 0x1ed, 0x1c9b, 0x3b6b, 0x1ed, 0x1c9b, 0x1ed, 0x1cb5,
        0x3b85, 0x1ed, 0x1cb5, 0x1ed, 0x1cdc, 0x3bac, 0x1ed, 0x1cdc, 0x1ed, 0x1cfd,
        0x3bcd, 0x1ed, 0x1cfd, 0x1ed, 0x1d25, 0x3bf5, 0x1ed, 0x1d25, 0x1ed, 0x1d40,
        0x3c10, 0x1ed, 0x1d40, 0x1ed, 0x1d62, 0x3c32, 0x1ed, 0x1d62, 0x1ed, 0x1d7b,
        0x3c4b, 0x1ed, 0x1d7b, 0x1ed, 0x1d8d, 0x3c5d, 0x1ed, 0x1d8d, 0x1ed, 0x1ec4,
        0x3d94, 0x1ed, 0x1ec4, 0x1ed, 0x1f10, 0x3de0, 0x1ed, 0x1f10, 0x1ed, 0x1fcb,
        0x3e9b, 0x1ed, 0x1fcb, 0x1ed, 0x1fe5, 0x3ecb, 0x1ed, 0x1ffb, 0x1ed, 0x201a,
        0x3eea, 0x1ed, 0x201a, 0x1ed, 0x2040, 0x3f10, 0x1ed, 0x2040, 0x1ed, 0x20f1,
        0x3fc1, 0x1ed, 0x20f1, 0x1ed, 0x2256, 0x4135, 0x1ed, 0x2265, 0x1ed, 0x2281,
        0x4151, 0x1ed, 0x2281, 0x1ed, 0x22ba, 0x418a, 0x1ed, 0x22ba, 0x1ed, 0x22e9,
        0x41b9, 0x1ed, 0x22e9, 0x1ed, 0x230d, 0x41dd, 0x1ed, 0x230d, 0x1ed, 0x2327,
        0x41f7, 0x1ed, 0x2327, 0x1ed, 0x2353, 0x4223, 0x1ed, 0x2353, 0x1ed, 0x2369,
        0x4710, 0x1ed, 0x2840, 0x1ed, 0x2866, 0x4736, 0x1ed, 0x2866, 0x1ed, 0x28df,
        0x47af, 0x1ed, 0x28df, 0x1ed, 0x2928, 0x4b7b, 0x1ed, 0x2cab, 0x1ed, 0x2d0d,
        0x4bdd, 0x1ed, 0x2d0d, 0x1ed, 0x2da7, 0x4c4e, 0x1ed, 0x2d7e, 0x1ed, 0x2da7,
        0x4c77, 0x1ed, 0x2da7, 0x1ed, 0x2ddd, 0x4cad, 0x1ed, 0x2ddd, 0x1ed, 0x2e06,
        0x4cd6, 0x1ed, 0x2e06, 0x1ed, 0x2e67, 0x4d37, 0x1ed, 0x2e67, 0x1ed, 0x2ea0,
        0x4d70, 0x1ed, 0x2ea0, 0x1ed, 0x2ec3, 0x4d93, 0x1ed, 0x2ec3, 0x1ed, 0x2f40,
        0x4f5a, 0x1ed, 0x308a, 0x1ed, 0x30a1, 0x4f95, 0x1ed, 0x30c5, 0x1ed, 0x30c9,
        0x4f95, 0x1ed, 0x30df, 0x1ed, 0x3170, 0x5043, 0x1ed, 0x3173, 0x1ed, 0x3191,
        0x5064, 0x1ed, 0x3194, 0x1ed, 0x31b1, 0x5084, 0x1ed, 0x31b4, 0x1ed, 0x31d2,
        0x50a5, 0x1ed, 0x31d5, 0x1ed, 0x3216, 0x50a5, 0x1ed, 0x3234, 0x1ed, 0x325a,
        0x50e9, 0x1ed, 0x31f0, 0x1ed, 0x3216, 0x50e9, 0x1ed, 0x3219, 0x1ed, 0x325a,
        0x512a, 0x1ed, 0x325a, 0x1ed, 0x3289, 0x512a, 0x1ed, 0x329c, 0x1ed, 0x32ba,
        0x512d, 0x1ed, 0x325d, 0x1ed, 0x3289, 0x512d, 0x1ed, 0x329c, 0x1ed, 0x32ba,
        0x518a, 0x1ed, 0x32ba, 0x1ed, 0x32e2, 0x51b5, 0x1ed, 0x32e5, 0x1ed, 0x3301,
        0x51d7, 0x1ed, 0x3308, 0x1ed, 0x3327, 0x51f8, 0x1ed, 0x3328, 0x1ed, 0x3345,
        0x5215, 0x1ed, 0x3345, 0x1ed, 0x337f, 0x524f, 0x1ed, 0x337f, 0x1ed, 0x33d4,
        0x5288, 0x1ed, 0x33b8, 0x1ed, 0x33d4, 0x52a4, 0x1ed, 0x33d4, 0x1ed, 0x33f7,
        0x52c7, 0x1ed, 0x33f7, 0x1ed, 0x3457, 0x5327, 0x1ed, 0x3457, 0x1ed, 0x3497,
        0x5367, 0x1ed, 0x3497, 0x1ed, 0x34c0, 0x5390, 0x1ed, 0x34c0, 0x1ed, 0x34d9,
        0x5473, 0x1ed, 0x35a3, 0x1ed, 0x35ba, 0x548a, 0x1ed, 0x35ba, 0x1ed, 0x35db,
        0x54b1, 0x1ed, 0x35e5, 0x1ed, 0x3670, 0x54b1, 0x1ed, 0x3699, 0x1ed, 0x36f4,
        0x5540, 0x1ed, 0x3670, 0x1ed, 0x3698, 0x55c4, 0x1ed, 0x36f4, 0x1ed, 0x374c,
        0x561c, 0x1ed, 0x374c, 0x1ed, 0x3770, 0x5683, 0x1ed, 0x37b3, 0x1ed, 0x37dc,
        0x56ac, 0x56a, 0xc, 0x56a, 0x7f, 0x571f, 0x56a, 0x7f, 0x56a, 0xa7,
        0x5747, 0x56a, 0xa7, 0x56a, 0x22f, 0x58cf, 0x56a, 0x22f, 0x56a, 0x329,
        0x59c9, 0x56a, 0x329, 0x56a, 0x349, 0x59e9, 0x56a, 0x349, 0x56a, 0x3cb,
        0x5a6b, 0x56a, 0x3cb, 0x56a, 0x45d, 0x5a6b, 0x56a, 0x45f, 0x56a, 0x4a6,
        0x5a6b, 0x56a, 0x4a8, 0x56a, 0x4e2, 0x5b97, 0x56a, 0x4f7, 0x56a, 0x6ab,
        0x5d4b, 0x56a, 0x6ab, 0x56a, 0x70a, 0x5dab, 0x5da, 0xb, 0x5da, 0x65,
        0x5e05, 0x5da, 0x65, 0x5da, 0x136, 0x5ed6, 0x5da, 0x136, 0x5da, 0x2d8,
        0x6078, 0x5da, 0x2d8, 0x5da, 0x3e3, 0x618c, 0x5da, 0x3ec, 0x5da, 0x6a1,
        0x6441, 0x5da, 0x6a1, 0x5da, 0x76c, 0x6510, 0x5da, 0x770, 0x5da, 0x872,
        0x6612, 0x5da, 0x872, 0x5da, 0x8f6, 0x6612, 0x5da, 0x8f8, 0x5da, 0xa35,
        0x67d5, 0x5da, 0xa35, 0x5da, 0xd14, 0x6ab4, 0x5da, 0xd14, 0x5da, 0xfcf,
        0x6d6f, 0x5da, 0xfcf, 0x5da, 0x1376, 0x7116, 0x5da, 0x1376, 0x5da, 0x13e4,
        0x7184, 0x5da, 0x13e4, 0x5da, 0x160a, 0x73aa, 0x5da, 0x160a, 0x5da, 0x168a,
        0x742a, 0x5da, 0x168a, 0x5da, 0x1775, 0x7515, 0x5da, 0x1775, 0x5da, 0x18b8,
        0x7658, 0x5da, 0x18b8, 0x5da, 0x19c9, 0x776a, 0x5da, 0x19ca, 0x5da, 0x1a31,
        0x77d1, 0x5da, 0x1a31, 0x5da, 0x1b13, 0x78b3, 0x5da, 0x1b13, 0x5da, 0x1bfe,
        0x799e, 0x5da, 0x1bfe, 0x5da, 0x1d55, 0x7af5, 0x5da, 0x1d55, 0x5da, 0x1d76,
        0x7b73, 0x7b1, 0x63, 0x7b1, 0x93, 0x7ba3, 0x7b1, 0x93, 0x7b1, 0xd3,
        0x7f94, 0x7b1, 0x484, 0x7b1, 0x541, 0x8051, 0x7b1, 0x541, 0x7b1, 0x561,
        0x80a1, 0x7b1, 0x591, 0x7b1, 0x66d, 0x817d, 0x7b1, 0x66d, 0x7b1, 0x7ea,
        0x82fa, 0x7b1, 0x7ea, 0x7b1, 0x85b, 0x836b, 0x7b1, 0x85b, 0x7b1, 0x860,
        0x8370, 0x7b1, 0x860, 0x7b1, 0x8f4, 0x8404, 0x7b1, 0x8f4, 0x7b1, 0x9f2,
        0x8891, 0x7b1, 0xd81, 0x7b1, 0xe6c, 0x8891, 0x7b1, 0xf5c, 0x7b1, 0xf81,
        0x8aab, 0x8aa, 0xb, 0x8aa, 0x8f, 0x8b2f, 0x8aa, 0x8f, 0x8aa, 0x169,
        0x8c09, 0x8aa, 0x169, 0x8aa, 0x4a9, 0x8c09, 0x8aa, 0x4ab, 0x8aa, 0x4b8,
        0x8c09, 0x8aa, 0x4ba, 0x8aa, 0x4c7, 0x8c09, 0x8aa, 0x4c9, 0x8aa, 0x4d5,
        0x8c09, 0x8aa, 0x4dd, 0x8aa, 0x4ee, 0x8f8e, 0x8aa, 0x4ee, 0x8aa, 0x611,
        0x90b1, 0x8aa, 0x611, 0x8aa, 0x673, 0x9113, 0x8aa, 0x673, 0x8aa, 0x7dc,
        0x927c, 0x8aa, 0x7dc, 0x8aa, 0xc60, 0x9700, 0x8aa, 0xc60, 0x8aa, 0xcd5,
        0x9775, 0x8aa, 0xcd5, 0x8aa, 0xfa2, 0x9a42, 0x8aa, 0xfa2, 0x8aa, 0x1021,
        0x9ac1, 0x8aa, 0x1021, 0x8aa, 0x1523, 0xa191, 0x8aa, 0x16f1, 0x8aa, 0x1818,
        0xa191, 0x8aa, 0x181a, 0x8aa, 0x188a, 0xa191, 0x8aa, 0x188c, 0x8aa, 0x18a5,
        0xa345, 0x8aa, 0x18a5, 0x8aa, 0x18e9, 0xa345, 0x8aa, 0x18eb, 0x8aa, 0x1983,
        0xa423, 0x8aa, 0x1983, 0x8aa, 0x1acd, 0xa56d, 0x8aa, 0x1acd, 0x8aa, 0x1ca5,
        0xa56d, 0x8aa, 0x1ca7, 0x8aa, 0x1d9e, 0xa83e, 0x8aa, 0x1d9e, 0x8aa, 0x1e11,
        0xa8b1, 0x8aa, 0x1e11, 0x8aa, 0x1e8b, 0xa92b, 0x8aa, 0x1e8b, 0x8aa, 0x1ef2,
        0xa992, 0x8aa, 0x1ef2, 0x8aa, 0x1f47, 0xa9e7, 0x8aa, 0x1f47, 0x8aa, 0x1fb2,
        0xa9e7, 0x8aa, 0x1fb4, 0x8aa, 0x202a, 0xa9e7, 0x8aa, 0x202c, 0x8aa, 0x204b,
        0xa9e7, 0x8aa, 0x204d, 0x8aa, 0x2092, 0xab32, 0x8aa, 0x2092, 0x8aa, 0x20c7,
        0xab67, 0x8aa, 0x20c7, 0x8aa, 0x21a7, 0xab67, 0x8aa, 0x21ad, 0x8aa, 0x21c6,
        0xac66, 0x8aa, 0x21c6, 0x8aa, 0x2444, 0xac66, 0x8aa, 0x2446, 0x8aa, 0x253d,
        0xac66, 0x8aa, 0x253f, 0x8aa, 0x258a, 0xb02a, 0xb02, 0xa, 0xb02, 0x1d,
        0xb03d, 0xb02, 0x1d, 0xb02, 0x83, 0xb0a3, 0xb02, 0x83, 0xb02, 0xa1,
        0xb0c1, 0xb02, 0xa1, 0xb02, 0xc6, 0xb148, 0xb02, 0x128, 0xb02, 0x159,
        0xb148, 0xb02, 0x32b, 0xb02, 0x331, 0xb377, 0xb02, 0x357, 0xb02, 0x3bc,
        0xb3dc, 0xb02, 0x3bc, 0xb02, 0x3de, 0xb3fe, 0xb02, 0x3de, 0xb02, 0x492,
        0xb4b2, 0xb02, 0x492, 0xb02, 0x673, 0xb6c1, 0xb02, 0x6a1, 0xb02, 0x77b,
        0xb6c1, 0xb02, 0x77d, 0xb02, 0x79c, 0xb7bc, 0xb02, 0x79c, 0xb02, 0x99c,
        0xb9c5, 0xb02, 0x9a5, 0xb02, 0xacd, 0xb9c5, 0xb02, 0xaf1, 0xb02, 0xb13,
        0xbc95, 0xbc9, 0x5, 0xbc9, 0x2d, 0xbcbd, 0xbc9, 0x2d, 0xbc9, 0x55,
        0xbce5, 0xbc9, 0x55, 0xbc9, 0xcb, 0xbce5, 0xbc9, 0xcd, 0xbc9, 0x19f,
        0xbe2f, 0xbc9, 0x19f, 0xbc9, 0x215, 0xbe2f, 0xbc9, 0x217, 0xbc9, 0x2da,
        0xbf6a, 0xbc9, 0x2da, 0xbc9, 0x469, 0xc0f9, 0xbc9, 0x469, 0xbc9, 0x558,
        0xc1e8, 0xbc9, 0x558, 0xbc9, 0x5f9, 0xc335, 0xbc9, 0x6a5, 0xbc9, 0x936,
        0xc5c6, 0xbc9, 0x936, 0xbc9, 0xa90, 0xc5c6, 0xbc9, 0xa92, 0xbc9, 0xb49,
        0xc7d9, 0xbc9, 0xb49, 0xbc9, 0xc9a, 0xcb7e, 0xbc9, 0xeee, 0xbc9, 0x1023,
        0xcb7e, 0xbc9, 0x1025, 0xbc9, 0x1097, 0xcd27, 0xbc9, 0x1097, 0xbc9, 0x10d7,
        0xcd27, 0xbc9, 0x10d9, 0xbc9, 0x118c, 0xce1c, 0xbc9, 0x118c, 0xbc9, 0x120a,
        0xce9a, 0xbc9, 0x120a, 0xbc9, 0x1260, 0xeab9, 0xd6d, 0x13e9, 0xd6d, 0x145f,
        0xeab9, 0xd6d, 0x1461, 0xd6d, 0x14a9, 0xed9d, 0xd6d, 0x16cd, 0xd6d, 0x171e,
        0xed9d, 0xd6d, 0x1722, 0xd6d, 0x1775, 0xefb9, 0xd6d, 0x18e9, 0xd6d, 0x1971,
        0xefb9, 0xd6d, 0x1a1e, 0xd6d, 0x1a47, 0xf838, 0xf7c, 0x78, 0xf7c, 0xcb,
        0xf88b, 0xf7c, 0xcb, 0xf7c, 0x14f, 0xf90f, 0xf7c, 0x14f, 0xf7c, 0x4b8,
        0xfc78, 0xf7c, 0x4b8, 0xf7c, 0x50a, 0x10069, 0xf7c, 0x8a9, 0xf7c, 0x98a,
        0x10069, 0xf7c, 0x9b8, 0xf7c, 0x9ef, 0x101bd, 0xf7c, 0x9fd, 0xf7c, 0xa5b,
        0x1021b, 0xf7c, 0xa5b, 0xf7c, 0xbc4, 0x107c3, 0x107c, 0x3, 0x107c, 0x64,
        0x107c3, 0x107c, 0x50d, 0x107c, 0x594, 0x11226, 0x107c, 0xa66, 0x107c, 0xae2,
        0x1493f, 0x1493, 0xf, 0x1493, 0x5f, 0x149c4, 0x1493, 0x94, 0x1493, 0xf4,
        0x14a24, 0x1493, 0xf4, 0x1493, 0x140, 0x14a70, 0x1493, 0x140, 0x1493, 0x18c,
        0x14bb3, 0x1493, 0x283, 0x1493, 0x2cc, 0x14bfc, 0x1493, 0x2cc, 0x1493, 0x3f5,
        0x14d25, 0x1493, 0x3f5, 0x1493, 0x535, 0x14fb5, 0x1493, 0x685, 0x1493, 0x741,
        0x15071, 0x1493, 0x741, 0x1493, 0x8dd, 0x1520d, 0x1493, 0x8dd, 0x1493, 0x910,
        0x15240, 0x1493, 0x910, 0x1493, 0x954, 0x15284, 0x1493, 0x954, 0x1493, 0x999,
        0x152c9, 0x1493, 0x999, 0x1493, 0x9c2, 0x152f2, 0x1493, 0x9c2, 0x1493, 0xb28,
        0x15458, 0x1493, 0xb28, 0x1493, 0xb40, 0x15458, 0x1493, 0xb42, 0x1493, 0xb86,
        0x15458, 0x1493, 0xb8a, 0x1493, 0xbae, 0x154de, 0x1493, 0xbae, 0x1493, 0xc29,
        0x15559, 0x1493, 0xc29, 0x1493, 0xf05, 0x15835, 0x1493, 0xf05, 0x1493, 0xf81,
        0x15835, 0x1493, 0xf83, 0x1493, 0xff9, 0x15a47, 0x1493, 0x1117, 0x1493, 0x1260,
        0x15b90, 0x1493, 0x1260, 0x1493, 0x14cd, 0x15dfd, 0x1493, 0x14cd, 0x1493, 0x14ed,
        0x15e1d, 0x1493, 0x14ed, 0x1493, 0x151a, 0x15e4a, 0x1493, 0x151a, 0x1493, 0x153c,
        0x15e92, 0x1493, 0x1562, 0x1493, 0x1593, 0x15ec3, 0x1493, 0x1593, 0x1493, 0x161f,
        0x15f4f, 0x1493, 0x161f, 0x1493, 0x1650, 0x1617b, 0x1493, 0x184b, 0x1493, 0x18a1,
        0x1617b, 0x1493, 0x18a3, 0x1493, 0x19f1, 0x1617b, 0x1493, 0x19f6, 0x1493, 0x1af3,
        0x1617b, 0x1493, 0x1af5, 0x1493, 0x1bab, 0x164db, 0x164d, 0xb, 0x164d, 0xcb,
        0x164db, 0x164d, 0xcd, 0x164d, 0x16a, 0x164db, 0x164d, 0x16c, 0x164d, 0x1d0,
        0x166a0, 0x164d, 0x1d0, 0x164d, 0x1e8, 0x166b8, 0x164d, 0x1e8, 0x164d, 0x1fd,
        0x166cd, 0x164d, 0x1fd, 0x164d, 0x298, 0x16768, 0x164d, 0x298, 0x164d, 0x43f,
        0x1690f, 0x164d, 0x43f, 0x164d, 0x478, 0x16948, 0x164d, 0x478, 0x164d, 0x4cb,
        0x1699b, 0x164d, 0x4cb, 0x164d, 0x508, 0x169d8, 0x164d, 0x508, 0x164d, 0x536,
        0x16a06, 0x164d, 0x536, 0x164d, 0x55b, 0x16a2b, 0x164d, 0x55b, 0x164d, 0x560,
        0x16a30, 0x164d, 0x560, 0x164d, 0x5d7, 0x16aa7, 0x164d, 0x5d7, 0x164d, 0x662,
        0x16b32, 0x164d, 0x662, 0x164d, 0x6bf, 0x16b8f, 0x164d, 0x6bf, 0x164d, 0x6cf,
        0x16c64, 0x164d, 0x794, 0x164d, 0x826, 0x16cf6, 0x164d, 0x826, 0x164d, 0x868,
        0x16d38, 0x164d, 0x868, 0x164d, 0x896, 0x16d78, 0x164d, 0x8a8, 0x164d, 0x8cb,
        0x16d9b, 0x164d, 0x8cb, 0x164d, 0x8f9, 0x16dc9, 0x164d, 0x8f9, 0x164d, 0x9be,
        0x16e8e, 0x164d, 0x9be, 0x164d, 0xa76, 0x16e8e, 0x164d, 0xbfc, 0x164d, 0xd1e,
        0x171f8, 0x164d, 0xd28, 0x164d, 0xd39, 0x17209, 0x164d, 0xd39, 0x164d, 0xd81,
        0x17251, 0x164d, 0xd81, 0x164d, 0xda1, 0x17271, 0x164d, 0xda1, 0x164d, 0xdbf,
        0x1728f, 0x164d, 0xdbf, 0x164d, 0xdd7, 0x172ef, 0x164d, 0xe1f, 0x164d, 0xe3d,
        0x1732a, 0x164d, 0xe5a, 0x164d, 0xedf, 0x173af, 0x164d, 0xedf, 0x164d, 0xf43,
        0x17413, 0x164d, 0xf43, 0x164d, 0xf92, 0x17462, 0x164d, 0xf92, 0x164d, 0xfe1,
        0x174b1, 0x174b, 0x1, 0x174b, 0x37, 0x174e7, 0x174b, 0x37, 0x174b, 0xe5,
        0x17595, 0x174b, 0xe5, 0x174b, 0x109, 0x175b9, 0x174b, 0x109, 0x174b, 0x181,
        0x17631, 0x174b, 0x181, 0x174b, 0x19c, 0x1764c, 0x174b, 0x19c, 0x174b, 0x20b,
        0x176bb, 0x174b, 0x20b, 0x174b, 0x236, 0x176e6, 0x174b, 0x236, 0x174b, 0x3c5,
        0x17875, 0x174b, 0x3c5, 0x174b, 0x42b, 0x178db, 0x174b, 0x42b, 0x174b, 0x6e2,
        0x17b92, 0x174b, 0x6e2, 0x174b, 0x712, 0x17bc2, 0x174b, 0x712, 0x174b, 0x987,
        0x17e37, 0x174b, 0x987, 0x174b, 0x9c9, 0x17e37, 0x174b, 0x9cb, 0x174b, 0xa52,
        0x17f02, 0x174b, 0xa52, 0x174b, 0xabe, 0x17f02, 0x174b, 0xac0, 0x174b, 0xad5,
        0x17f85, 0x174b, 0xad5, 0x174b, 0xb41, 0x17f85, 0x174b, 0xb43, 0x174b, 0xb5d,
        0x1800d, 0x174b, 0xb5d, 0x174b, 0xd3d, 0x181ed, 0x174b, 0xd3d, 0x174b, 0xe7f,
        0x1832f, 0x174b, 0xe7f, 0x174b, 0xee6, 0x18396, 0x174b, 0xee6, 0x174b, 0xf64,
        0x18414, 0x174b, 0xf64, 0x174b, 0xf6f, 0x1841f, 0x1841, 0xf, 0x1841, 0x134,
        0x18544, 0x1841, 0x134, 0x1841, 0x139, 0x18549, 0x1841, 0x139, 0x1841, 0x1c2,
        0x185d2, 0x1841, 0x1c2, 0x1841, 0x318, 0x18728, 0x1841, 0x318, 0x1841, 0x6e2,
        0x18af2, 0x1841, 0x6e2, 0x1841, 0x71a, 0x18b2a, 0x1841, 0x71a, 0x1841, 0x868,
        0x18c78, 0x1841, 0x868, 0x1841, 0x8ab, 0x18cbb, 0x1841, 0x8ab, 0x1841, 0x8ef,
        0x18d56, 0x1841, 0x946, 0x1841, 0xa31, 0x18e41, 0x1841, 0xa31, 0x1841, 0xa78,
        0x18e88, 0x1841, 0xa78, 0x1841, 0xafb, 0x18f0b, 0x1841, 0xafb, 0x1841, 0xb08,
        0x18f18, 0x1841, 0xb08, 0x1841, 0xb38, 0x18f18, 0x1841, 0xb3a, 0x1841, 0xb61,
        0x18f71, 0x1841, 0xb61, 0x1841, 0xc50, 0x19060, 0x1841, 0xc50, 0x1841, 0xc62,
        0x19072, 0x1841, 0xc62, 0x1841, 0xc7c, 0x19072, 0x1841, 0xd10, 0x1841, 0xd1e,
        0x19072, 0x1841, 0xd20, 0x1841, 0xd50, 0x19169, 0x1841, 0xd59, 0x1841, 0xd78,
        0x19435, 0x1841, 0x1025, 0x1841, 0x1137, 0x19630, 0x1841, 0x1220, 0x1841, 0x12ec,
        0x196fc, 0x1841, 0x12ec, 0x1841, 0x1333, 0x19743, 0x1841, 0x1333, 0x1841, 0x13dd,
        0x197ed, 0x1841, 0x13dd, 0x1841, 0x1641, 0x19a51, 0x1841, 0x1641, 0x1841, 0x16d1,
        0x19a51, 0x1841, 0x16d3, 0x1841, 0x185b, 0x19c6b, 0x1841, 0x185b, 0x1841, 0x18e3,
        0x19cf3, 0x1841, 0x18e3, 0x1841, 0x1a6e, 0x19e7e, 0x1841, 0x1a6e, 0x1841, 0x1c6e,
        0x1a07e, 0x1841, 0x1c6e, 0x1841, 0x1d2a, 0x1a13c, 0x1a13, 0xc, 0x1a13, 0x54,
        0x1a13c, 0x1a13, 0x55, 0x1a13, 0x1ea, 0x1a31a, 0x1a13, 0x1ea, 0x1a13, 0x295,
        0x1a31a, 0x1a13, 0x296, 0x1a13, 0x344, 0x1a474, 0x1a13, 0x344, 0x1a13, 0x4ee,
        0x1a61e, 0x1a61, 0xe, 0x1a61, 0x33, 0x1a643, 0x1a61, 0x33, 0x1a61, 0x53,
        0x1a68b, 0x1a61, 0x7b, 0x1a61, 0xa8, 0x1a6b9, 0x1a61, 0xa9, 0x1a61, 0xc2,
        0x1a6d3, 0x1a61, 0xc3, 0x1a61, 0x144, 0x1a754, 0x1a61, 0x144, 0x1a61, 0x15d,
        0x1a76e, 0x1a61, 0x15e, 0x1a61, 0x19f, 0x1a7b0, 0x1a61, 0x1a0, 0x1a61, 0x1c0,
        0x1a7d1, 0x1a61, 0x1c1, 0x1a61, 0x2d7, 0x1a8e7, 0x1a61, 0x2d7, 0x1a61, 0x356,
        0x1a966, 0x1a61, 0x356, 0x1a61, 0x3de, 0x1a9ee, 0x1a61, 0x3de, 0x1a61, 0x3ef,
        0x1a9ee, 0x1a61, 0x3f1, 0x1a61, 0x491, 0x1aaa1, 0x1a61, 0x491, 0x1a61, 0x4ca,
        0x1aadb, 0x1a61, 0x4cb, 0x1a61, 0x504, 0x1ab14, 0x1a61, 0x504, 0x1a61, 0x529,
        0x1ab39, 0x1a61, 0x529, 0x1a61, 0x5f5, 0x1ac05, 0x1a61, 0x5f5, 0x1a61, 0x664,
        0x1ac05, 0x1a61, 0x666, 0x1a61, 0x6d7, 0x1ace7, 0x1a61, 0x6d7, 0x1a61, 0x6fb,
        0x1ad0b, 0x1a61, 0x6fb, 0x1a61, 0x712, 0x1ad22, 0x1a61, 0x712, 0x1a61, 0x72d,
        0x1ad3d, 0x1a61, 0x72d, 0x1a61, 0x74b, 0x1ad5b, 0x1a61, 0x74b, 0x1a61, 0x79f,
        0x1ad5b, 0x1a61, 0x7a1, 0x1a61, 0x7d0, 0x1ade0, 0x1a61, 0x7d0, 0x1a61, 0x810,
        0x1ade0, 0x1a61, 0x812, 0x1a61, 0x826, 0x1ae36, 0x1a61, 0x826, 0x1a61, 0x913,
        0x1af23, 0x1a61, 0x913, 0x1a61, 0x99f, 0x1afaf, 0x1a61, 0x99f, 0x1a61, 0x9df,
        0x1b001, 0x1a61, 0x9f1, 0x1a61, 0xa90, 0x1b0a0, 0x1a61, 0xa90, 0x1a61, 0xad7,
        0x1b0e7, 0x1a61, 0xad7, 0x1a61, 0xafd, 0x1b10d, 0x1a61, 0xafd, 0x1a61, 0xb0a,
        0x1b11a, 0x1a61, 0xb0a, 0x1a61, 0xb15, 0x1b125, 0x1a61, 0xb15, 0x1a61, 0xb62,
        0x1b172, 0x1a61, 0xb62, 0x1a61, 0xbb3, 0x1b1c4, 0x1a61, 0xbb4, 0x1a61, 0xbc7,
        0x1b1d7, 0x1a61, 0xbc7, 0x1a61, 0xbde, 0x1b324, 0x1b1e, 0x144, 0x1b1e, 0x154,
        0x1b334, 0x1b1e, 0x154, 0x1b1e, 0x180, 0x1b360, 0x1b1e, 0x180, 0x1b1e, 0x348,
        0x1b528, 0x1b1e, 0x348, 0x1b1e, 0x490, 0x1b670, 0x1b1e, 0x490, 0x1b1e, 0x547,
        0x1b727, 0x1b1e, 0x547, 0x1b1e, 0x5a9, 0x1b727, 0x1b1e, 0x5ab, 0x1b1e, 0x5c1,
        0x1b7a1, 0x1b1e, 0x5c1, 0x1b1e, 0x5e2, 0x1b7c2, 0x1b1e, 0x5e2, 0x1b1e, 0x5ff,
        0x1b7df, 0x1b1e, 0x5ff, 0x1b1e, 0x6b5, 0x1b895, 0x1b1e, 0x6b5, 0x1b1e, 0x6fe,
        0x1b8de, 0x1b1e, 0x6fe, 0x1b1e, 0x783, 0x1b963, 0x1b1e, 0x783, 0x1b1e, 0x79a,
        0x1b97a, 0x1b1e, 0x79a, 0x1b1e, 0x802, 0x1b97a, 0x1b1e, 0x804, 0x1b1e, 0x81e,
        0x1b9fe, 0x1b1e, 0x81e, 0x1b1e, 0x8b0, 0x1ba90, 0x1b1e, 0x8b0, 0x1b1e, 0x911,
        0x1baf1, 0x1b1e, 0x911, 0x1b1e, 0xc3c, 0x1be1c, 0x1b1e, 0xc3c, 0x1b1e, 0xc7a,
        0x1be1c, 0x1b1e, 0xc7c, 0x1b1e, 0xcda, 0x1beba, 0x1b1e, 0xcda, 0x1b1e, 0xcf9,
        0x1bed9, 0x1b1e, 0xcf9, 0x1b1e, 0xd72, 0x1bf52, 0x1b1e, 0xd72, 0x1b1e, 0xd9a,
        0x1bf7a, 0x1b1e, 0xd9a, 0x1b1e, 0xdc2, 0x1bfa2, 0x1b1e, 0xdc2, 0x1b1e, 0xe1f,
        0x1bfff, 0x1b1e, 0xe1f, 0x1b1e, 0xe60, 0x1c040, 0x1b1e, 0xe60, 0x1b1e, 0xebd,
        0x1c09d, 0x1b1e, 0xebd, 0x1b1e, 0xf02, 0x1c0e2, 0x1b1e, 0xf02, 0x1b1e, 0xf2f,
        0x1c10f, 0x1b1e, 0xf2f, 0x1b1e, 0x1070, 0x1c250, 0x1b1e, 0x1070, 0x1b1e, 0x1098,
        0x1c38f, 0x1b1e, 0x11af, 0x1b1e, 0x1205, 0x1c3e5, 0x1b1e, 0x1205, 0x1b1e, 0x130c,
        0x1c3e5, 0x1b1e, 0x1320, 0x1b1e, 0x132e, 0x1c3e5, 0x1b1e, 0x1349, 0x1b1e, 0x13ae,
        0x1c3e5, 0x1b1e, 0x13df, 0x1b1e, 0x1577, 0x1c765, 0x1c76, 0x5, 0x1c76, 0x24,
        0x1c784, 0x1c76, 0x24, 0x1c76, 0x4b, 0x1c7ab, 0x1c76, 0x4b, 0x1c76, 0x78,
        0x1c7d8, 0x1c76, 0x78, 0x1c76, 0x110, 0x1c870, 0x1c76, 0x110, 0x1c76, 0x1a6,
        0x1c906, 0x1c76, 0x1a6, 0x1c76, 0x24c, 0x1c9ac, 0x1c76, 0x24c, 0x1c76, 0x35e,
        0x1cabe, 0x1c76, 0x35e, 0x1c76, 0x391, 0x1caf1, 0x1c76, 0x391, 0x1c76, 0x45a,
        0x1cc96, 0x1c76, 0x536, 0x1c76, 0x6e8, 0x1ce48, 0x1c76, 0x6e8, 0x1c76, 0x720,
        0x1ce48, 0x1c76, 0x782, 0x1c76, 0x7b7, 0x1cfcb, 0x1c76, 0x86b, 0x1c76, 0x926,
        0x1e07a, 0x1c76, 0x191a, 0x1c76, 0x19b1, 0x1e111, 0x1c76, 0x19b1, 0x1c76, 0x1a60,
        0x1e111, 0x1c76, 0x1a63, 0x1c76, 0x1c0d, 0x1e111, 0x1c76, 0x1c0f, 0x1c76, 0x1e34,
        0x1e594, 0x1c76, 0x1e34, 0x1c76, 0x1e9d, 0x1e5fe, 0x1c76, 0x1e9e, 0x1c76, 0x1ef6,
        0x1e656, 0x1c76, 0x1ef6, 0x1c76, 0x1f37, 0x1e697, 0x1c76, 0x1f37, 0x1c76, 0x1fda,
        0x1e73a, 0x1c76, 0x1fda, 0x1c76, 0x2032, 0x1e73a, 0x1c76, 0x2034, 0x1c76, 0x2067,
        0x1e7c7, 0x1c76, 0x2067, 0x1c76, 0x20a0, 0x1e800, 0x1c76, 0x20a0, 0x1c76, 0x20ca,
        0x1e82a, 0x1c76, 0x20ca, 0x1c76, 0x2108, 0x1e868, 0x1c76, 0x2108, 0x1c76, 0x2153,
        0x1e8b3, 0x1c76, 0x2153, 0x1c76, 0x219f, 0x1e8ff, 0x1c76, 0x219f, 0x1c76, 0x222f,
        0x1e8ff, 0x1c76, 0x2233, 0x1c76, 0x2265, 0x1e9c5, 0x1c76, 0x2265, 0x1c76, 0x2355,
        0x1eab5, 0x1c76, 0x2355, 0x1c76, 0x2426, 0x1eb86, 0x1c76, 0x2426, 0x1c76, 0x2439,
        0x1eb86, 0x1c76, 0x2463, 0x1c76, 0x2471, 0x1ebe0, 0x1c76, 0x2480, 0x1c76, 0x24db,
        0x1ec3b, 0x1c76, 0x24db, 0x1c76, 0x2582, 0x1ece2, 0x1c76, 0x2582, 0x1c76, 0x2790,
        0x1eef2, 0x1eef, 0x2, 0x1eef, 0x18, 0x1eef2, 0x1eef, 0x19, 0x1eef, 0x2a,
        0x1ef1a, 0x1eef, 0x2a, 0x1eef, 0x45, 0x1ef35, 0x1ef3, 0x5, 0x1ef3, 0x90,
        0x1efc0, 0x1ef3, 0x90, 0x1ef3, 0xac, 0x1efdc, 0x1ef3, 0xac, 0x1ef3, 0xe9,
        0x1f019, 0x1ef3, 0xe9, 0x1ef3, 0xfd, 0x1f082, 0x1ef3, 0x152, 0x1ef3, 0x16f,
        0x1f09f, 0x1ef3, 0x16f, 0x1ef3, 0x1c2, 0x1f20d, 0x1ef3, 0x2dd, 0x1ef3, 0x30d,
        0x1f23d, 0x1ef3, 0x30d, 0x1ef3, 0x35c, 0x1f28c, 0x1ef3, 0x35c, 0x1ef3, 0x3c1,
        0x1f4ad, 0x1ef3, 0x57d, 0x1ef3, 0x64e, 0x1f57e, 0x1ef3, 0x64e, 0x1ef3, 0x74d,
        0x1f67d, 0x1ef3, 0x74d, 0x1ef3, 0x78d, 0x1f6bd, 0x1ef3, 0x78d, 0x1ef3, 0x7b2,
        0x1f707, 0x1ef3, 0x7d7, 0x1ef3, 0x829, 0x1f759, 0x1ef3, 0x829, 0x1ef3, 0x886,
        0x1f7b6, 0x1ef3, 0x886, 0x1ef3, 0x88f, 0x1f7bf, 0x1ef3, 0x88f, 0x1ef3, 0x898,
        0x1f85b, 0x1ef3, 0x92b, 0x1ef3, 0x981, 0x1f8b1, 0x1ef3, 0x981, 0x1ef3, 0x999,
        0x1f8c9, 0x1ef3, 0x999, 0x1ef3, 0x9b6, 0x1f8eb, 0x1ef3, 0x9bb, 0x1ef3, 0xa9b,
        0x1f9cb, 0x1ef3, 0xa9b, 0x1ef3, 0xabb, 0x1f9eb, 0x1ef3, 0xabb, 0x1ef3, 0xb0e,
        0x1fa3e, 0x1ef3, 0xb0e, 0x1ef3, 0xb8b, 0x1fba9, 0x1ef3, 0xc79, 0x1ef3, 0xd29,
        0x1fc59, 0x1ef3, 0xd29, 0x1ef3, 0xde3, 0x1fd13, 0x1ef3, 0xde3, 0x1ef3, 0xe2c,
        0x1fd5c, 0x1ef3, 0xe2c, 0x1ef3, 0xe75, 0x1fda5, 0x1ef3, 0xe75, 0x1ef3, 0xf74,
        0x1fedf, 0x1ef3, 0xfaf, 0x1ef3, 0xff8, 0x1ff28, 0x1ef3, 0xff8, 0x1ef3, 0x1040,
        0x1ff70, 0x1ff7, 0x0, 0x1ff7, 0x4f, 0x1ffbf, 0x1ff7, 0x4f, 0x1ff7, 0xaf,
        0x2001f, 0x1ff7, 0xaf, 0x1ff7, 0x115, 0x20085, 0x1ff7, 0x115, 0x1ff7, 0x146,
        0x20085, 0x1ff7, 0x147, 0x1ff7, 0x1c8, 0x203b9, 0x1ff7, 0x449, 0x1ff7, 0x495,
        0x20405, 0x1ff7, 0x495, 0x1ff7, 0x4de, 0x2044f, 0x1ff7, 0x4df, 0x1ff7, 0x59f,
        0x2050f, 0x1ff7, 0x59f, 0x1ff7, 0x5da, 0x2054a, 0x1ff7, 0x5da, 0x1ff7, 0x759,
        0x206c9, 0x1ff7, 0x759, 0x1ff7, 0x7da, 0x2074a, 0x1ff7, 0x7da, 0x1ff7, 0x80d,
        0x2077d, 0x1ff7, 0x80d, 0x1ff7, 0x849, 0x207b9, 0x1ff7, 0x0, 0x1ff7, 0x4f,
        0x207b9, 0x1ff7, 0x849, 0x1ff7, 0x8e5, 0x20929, 0x1ff7, 0x9b9, 0x1ff7, 0xad3,
        0x20a43, 0x1ff7, 0xad3, 0x1ff7, 0xaea, 0x20a8a, 0x1ff7, 0xb1a, 0x1ff7, 0xb60,
        0x20ad0, 0x1ff7, 0xb60, 0x1ff7, 0xbb0, 0x20bb8, 0x1ff7, 0xc48, 0x1ff7, 0xc79,
    };
    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}
/*
{{0x01ed, 0x01ae}, 2}, // sub_207e retf
{{0x01ed, 0x0226}, 2}, // sub_20f6 retf
{{0x01ed, 0x026d}, 2}, // sub_213d retf
{{0x01ed, 0x029a}, 6}, // sub_216a ret
{{0x01ed, 0x03e3}, 2}, // sub_22b3 retf
{{0x01ed, 0x03fc}, 2}, // sub_22cc ret
{{0x01ed, 0x04b5}, 6}, // sub_2385 ret
{{0x01ed, 0x059d}, 2}, // sub_246d retf
{{0x01ed, 0x05bb}, 2}, // sub_248b retf
{{0x01ed, 0x05e0}, 4}, // sub_24b0 ret
{{0x01ed, 0x070c}, 2}, // sub_25dc retf
{{0x01ed, 0x075e}, 2}, // sub_262e retf
{{0x01ed, 0x07e0}, 2}, // sub_26b0 retf
{{0x01ed, 0x0a42}, 2}, // sub_2912 ret
{{0x01ed, 0x0ab1}, 2}, // sub_2981 retf
{{0x01ed, 0x0b5c}, 2}, // sub_2a2c retf
{{0x01ed, 0x0c43}, 2}, // sub_2b13 retf
{{0x01ed, 0x0d23}, 2}, // sub_2bf3 retf
{{0x01ed, 0x0d3c}, 2}, // sub_2c0c retf
{{0x01ed, 0x0e55}, 6}, // sub_2d25 ret
{{0x01ed, 0x0fa3}, 2}, // sub_2e73 retf
{{0x01ed, 0x0ff7}, 2}, // sub_2ec7 retf
{{0x01ed, 0x101d}, 4}, // sub_2eed ret
{{0x01ed, 0x1056}, 4}, // sub_2f26 ret
{{0x01ed, 0x1084}, 10}, // sub_2f54 ret
{{0x01ed, 0x114a}, 10}, // sub_301a ret
{{0x01ed, 0x1188}, 8}, // sub_3058 ret
{{0x01ed, 0x11cb}, 6}, // sub_309b ret
{{0x01ed, 0x11ee}, 12}, // sub_30be ret
{{0x01ed, 0x1314}, 2}, // sub_31e4 retf
{{0x01ed, 0x13ec}, 2}, // sub_32bc retf
{{0x01ed, 0x142f}, 2}, // sub_32ff retf
{{0x01ed, 0x145b}, 2}, // sub_332b retf
{{0x01ed, 0x14b3}, 2}, // sub_3383 retf
{{0x01ed, 0x15cf}, 2}, // sub_349f retf
{{0x01ed, 0x165c}, 2}, // sub_352c retf
{{0x01ed, 0x1706}, 2}, // sub_35d6 retf
{{0x01ed, 0x1719}, 2}, // sub_35e9 retf
{{0x01ed, 0x1734}, 2}, // sub_3604 retf
{{0x01ed, 0x1752}, 2}, // sub_3622 retf
{{0x01ed, 0x1762}, 6}, // sub_3632 ret
{{0x01ed, 0x1915}, 2}, // sub_37e5 retf
{{0x01ed, 0x1975}, 2}, // sub_3845 retf
{{0x01ed, 0x19b6}, 2}, // sub_3886 retf
{{0x01ed, 0x1a12}, 2}, // sub_38e2 retf
{{0x01ed, 0x1a2d}, 2}, // sub_38fd retf
{{0x01ed, 0x1a8b}, 2}, // sub_395b retf
{{0x01ed, 0x1a9a}, 2}, // sub_396a retf
{{0x01ed, 0x1ae3}, 2}, // sub_39b3 retf
{{0x01ed, 0x1b54}, 2}, // sub_3a24 retf
{{0x01ed, 0x1b7b}, 2}, // sub_3a4b ret
{{0x01ed, 0x1bb8}, 2}, // sub_3a88 retf
{{0x01ed, 0x1bc9}, 2}, // sub_3a99 retf
{{0x01ed, 0x1bf2}, 12}, // sub_3ac2 ret
{{0x01ed, 0x1c6f}, 2}, // sub_3b3f retf
{{0x01ed, 0x1c9b}, 2}, // sub_3b6b retf
{{0x01ed, 0x1cb5}, 2}, // sub_3b85 retf
{{0x01ed, 0x1cdc}, 2}, // sub_3bac retf
{{0x01ed, 0x1cfd}, 2}, // sub_3bcd retf
{{0x01ed, 0x1d25}, 2}, // sub_3bf5 retf
{{0x01ed, 0x1d40}, 2}, // sub_3c10 retf
{{0x01ed, 0x1d62}, 4}, // sub_3c32 ret
{{0x01ed, 0x1d7b}, 2}, // sub_3c4b ret
{{0x01ed, 0x1d8d}, 2}, // sub_3c5d retf
{{0x01ed, 0x1ec4}, 2}, // sub_3d94 retf
{{0x01ed, 0x1f10}, 2}, // sub_3de0 retf
{{0x01ed, 0x1fcb}, 2}, // sub_3e9b retf
{{0x01ed, 0x1ffb}, 2}, // sub_3ecb retf
{{0x01ed, 0x201a}, 4}, // sub_3eea ret
{{0x01ed, 0x2040}, 12}, // sub_3f10 ret
{{0x01ed, 0x20f1}, 4}, // sub_3fc1 ret
{{0x01ed, 0x2265}, 2}, // sub_4135 retf
{{0x01ed, 0x2281}, 2}, // sub_4151 retf
{{0x01ed, 0x22ba}, 2}, // sub_418a retf
{{0x01ed, 0x22e9}, 2}, // sub_41b9 retf
{{0x01ed, 0x230d}, 2}, // sub_41dd retf
{{0x01ed, 0x2327}, 2}, // sub_41f7 retf
{{0x01ed, 0x2353}, 2}, // sub_4223 retf
{{0x01ed, 0x2840}, 4}, // sub_4710 ret
{{0x01ed, 0x2866}, 10}, // sub_4736 ret
{{0x01ed, 0x28df}, 2}, // sub_47af retf
{{0x01ed, 0x2ddd}, 2}, // sub_4cad retf
{{0x01ed, 0x2ec3}, 2}, // sub_4d93 retf
{{0x01ed, 0x308a}, 2}, // sub_4f5a retf
{{0x01ed, 0x30c5}, 10}, // sub_4f95 retf
{{0x01ed, 0x3173}, 2}, // sub_5043 retf
{{0x01ed, 0x3194}, 2}, // sub_5064 retf
{{0x01ed, 0x31b4}, 2}, // sub_5084 retf
{{0x01ed, 0x31d5}, 2}, // sub_50a5 retf
{{0x01ed, 0x3219}, 2}, // sub_50e9 retf
{{0x01ed, 0x325a}, 2}, // sub_512a retf
{{0x01ed, 0x325d}, 2}, // sub_512d retf
{{0x01ed, 0x32ba}, 2}, // sub_518a retf
{{0x01ed, 0x32e5}, 10}, // sub_51b5 retf
{{0x01ed, 0x3307}, 2}, // sub_51d7 retf
{{0x01ed, 0x3328}, 2}, // sub_51f8 retf
{{0x01ed, 0x33f7}, 2}, // sub_52c7 retf
{{0x01ed, 0x374c}, 2}, // sub_561c retf
{{0x01ed, 0x37b3}, 2}, // sub_5683 retf
{{0x056a, 0x000c}, 2}, // sub_56ac retf
{{0x056a, 0x007f}, 2}, // sub_571f retf
{{0x056a, 0x00a7}, 2}, // sub_5747 retf
{{0x056a, 0x022f}, 2}, // sub_58cf retf
{{0x056a, 0x0329}, 2}, // sub_59c9 retf
{{0x056a, 0x0349}, 2}, // sub_59e9 retf
{{0x056a, 0x04f7}, 2}, // sub_5b97 retf
{{0x056a, 0x06ab}, 2}, // sub_5d4b retf
{{0x05da, 0x000b}, 2}, // sub_5dab retf
{{0x05da, 0x0065}, 2}, // sub_5e05 retf
{{0x05da, 0x0136}, 2}, // sub_5ed6 retf
{{0x05da, 0x02d8}, 2}, // sub_6078 retf
{{0x05da, 0x03ec}, 2}, // sub_618c retf
{{0x05da, 0x06a1}, 2}, // sub_6441 retf
{{0x05da, 0x0770}, 2}, // sub_6510 retf
{{0x05da, 0x0872}, 2}, // sub_6612 retf
{{0x05da, 0x0a35}, 2}, // sub_67d5 retf
{{0x05da, 0x0d14}, 2}, // sub_6ab4 retf
{{0x05da, 0x0fcf}, 2}, // sub_6d6f retf
{{0x05da, 0x1376}, 2}, // sub_7116 retf
{{0x05da, 0x13e4}, 2}, // sub_7184 retf
{{0x05da, 0x160a}, 2}, // sub_73aa retf
{{0x05da, 0x168a}, 2}, // sub_742a retf
{{0x05da, 0x1775}, 2}, // sub_7515 retf
{{0x05da, 0x18b8}, 2}, // sub_7658 retf
{{0x05da, 0x19ca}, 2}, // sub_776a retf
{{0x05da, 0x1a31}, 2}, // sub_77d1 retf
{{0x05da, 0x1b13}, 2}, // sub_78b3 retf
{{0x05da, 0x1bfe}, 2}, // sub_799e retf
{{0x05da, 0x1d55}, 2}, // sub_7af5 retf
{{0x07b1, 0x0063}, 2}, // sub_7b73 retf
{{0x07b1, 0x0093}, 2}, // sub_7ba3 retf
{{0x07b1, 0x0484}, 2}, // sub_7f94 retf
{{0x07b1, 0x0541}, 2}, // sub_8051 retf
{{0x07b1, 0x0591}, 2}, // sub_80a1 retf
{{0x07b1, 0x066d}, 2}, // sub_817d retf
{{0x07b1, 0x07ea}, 2}, // sub_82fa retf
{{0x07b1, 0x085b}, 2}, // sub_836b retf
{{0x07b1, 0x0860}, 2}, // sub_8370 retf
{{0x07b1, 0x08f4}, 2}, // sub_8404 retf
{{0x07b1, 0x0d81}, 2}, // sub_8891 retf
{{0x08aa, 0x000b}, 2}, // sub_8aab retf
{{0x08aa, 0x008f}, 2}, // sub_8b2f retf
{{0x08aa, 0x0169}, 2}, // sub_8c09 retf
{{0x08aa, 0x04ee}, 2}, // sub_8f8e retf
{{0x08aa, 0x0611}, 2}, // sub_90b1 retf
{{0x08aa, 0x0673}, 2}, // sub_9113 retf
{{0x08aa, 0x07dc}, 2}, // sub_927c retf
{{0x08aa, 0x0c60}, 2}, // sub_9700 retf
{{0x08aa, 0x0cd5}, 2}, // sub_9775 retf
{{0x08aa, 0x0fa2}, 2}, // sub_9a42 retf
{{0x08aa, 0x1021}, 2}, // sub_9ac1 retf
{{0x08aa, 0x16f1}, 2}, // sub_a191 retf
{{0x08aa, 0x18a5}, 2}, // sub_a345 retf
{{0x08aa, 0x1983}, 2}, // sub_a423 retf
{{0x08aa, 0x1acd}, 2}, // sub_a56d retf
{{0x08aa, 0x1d9e}, 2}, // sub_a83e retf
{{0x08aa, 0x1e11}, 2}, // sub_a8b1 retf
{{0x08aa, 0x1e8b}, 2}, // sub_a92b retf
{{0x08aa, 0x1ef2}, 2}, // sub_a992 retf
{{0x08aa, 0x1f47}, 2}, // sub_a9e7 retf
{{0x08aa, 0x2092}, 2}, // sub_ab32 retf
{{0x08aa, 0x20c7}, 2}, // sub_ab67 retf
{{0x08aa, 0x21c6}, 2}, // sub_ac66 retf
{{0x0b02, 0x000a}, 2}, // sub_b02a retf
{{0x0b02, 0x001d}, 2}, // sub_b03d retf
{{0x0b02, 0x0083}, 2}, // sub_b0a3 retf
{{0x0b02, 0x00a1}, 2}, // sub_b0c1 retf
{{0x0b02, 0x0128}, 2}, // sub_b148 retf
{{0x0b02, 0x0357}, 2}, // sub_b377 retf
{{0x0b02, 0x03bc}, 2}, // sub_b3dc retf
{{0x0b02, 0x03de}, 2}, // sub_b3fe retf
{{0x0b02, 0x0492}, 2}, // sub_b4b2 retf
{{0x0b02, 0x06a1}, 2}, // sub_b6c1 retf
{{0x0b02, 0x079c}, 2}, // sub_b7bc retf
{{0x0b02, 0x09a5}, 2}, // sub_b9c5 retf
{{0x0bc9, 0x0005}, 2}, // sub_bc95 retf
{{0x0bc9, 0x002d}, 2}, // sub_bcbd retf
{{0x0bc9, 0x0055}, 2}, // sub_bce5 retf
{{0x0bc9, 0x019f}, 2}, // sub_be2f retf
{{0x0bc9, 0x02da}, 2}, // sub_bf6a retf
{{0x0bc9, 0x0469}, 2}, // sub_c0f9 retf
{{0x0bc9, 0x0558}, 2}, // sub_c1e8 retf
{{0x0bc9, 0x06a5}, 2}, // sub_c335 retf
{{0x0bc9, 0x0936}, 2}, // sub_c5c6 retf
{{0x0bc9, 0x0b49}, 2}, // sub_c7d9 retf
{{0x0bc9, 0x0eee}, 2}, // sub_cb7e retf
{{0x0bc9, 0x1097}, 2}, // sub_cd27 retf
{{0x0bc9, 0x118c}, 2}, // sub_ce1c retf
{{0x0bc9, 0x120a}, 2}, // sub_ce9a retf
{{0x0d6d, 0x13e9}, 2}, // sub_eab9 retf
{{0x0d6d, 0x16cd}, 2}, // sub_ed9d retf
{{0x0d6d, 0x18e9}, 2}, // sub_efb9 retf
{{0x0f7c, 0x0078}, 2}, // sub_f838 retf
{{0x0f7c, 0x00cb}, 2}, // sub_f88b retf
{{0x0f7c, 0x014f}, 2}, // sub_f90f retf
{{0x0f7c, 0x04b8}, 2}, // sub_fc78 retf
{{0x0f7c, 0x08a9}, 2}, // sub_10069 retf
{{0x0f7c, 0x09fd}, 2}, // sub_101bd retf
{{0x0f7c, 0x0a5b}, 2}, // sub_1021b retf
{{0x107c, 0x0003}, 2}, // sub_107c3 retf
{{0x107c, 0x0a66}, 2}, // sub_11226 retf
{{0x1493, 0x000f}, 2}, // sub_1493f retf
{{0x1493, 0x0094}, 2}, // sub_149c4 retf
{{0x1493, 0x00f4}, 2}, // sub_14a24 retf
{{0x1493, 0x0140}, 2}, // sub_14a70 retf
{{0x1493, 0x0283}, 2}, // sub_14bb3 retf
{{0x1493, 0x02cc}, 2}, // sub_14bfc retf
{{0x1493, 0x03f5}, 2}, // sub_14d25 retf
{{0x1493, 0x0685}, 2}, // sub_14fb5 retf
{{0x1493, 0x0741}, 2}, // sub_15071 retf
{{0x1493, 0x08dd}, 2}, // sub_1520d retf
{{0x1493, 0x0910}, 2}, // sub_15240 retf
{{0x1493, 0x0954}, 2}, // sub_15284 retf
{{0x1493, 0x0999}, 2}, // sub_152c9 retf
{{0x1493, 0x09c2}, 2}, // sub_152f2 retf
{{0x1493, 0x0b28}, 2}, // sub_15458 retf
{{0x1493, 0x0bae}, 2}, // sub_154de retf
{{0x1493, 0x0c29}, 2}, // sub_15559 retf
{{0x1493, 0x0f05}, 2}, // sub_15835 retf
{{0x1493, 0x1117}, 2}, // sub_15a47 retf
{{0x1493, 0x1260}, 2}, // sub_15b90 retf
{{0x1493, 0x14cd}, 2}, // sub_15dfd retf
{{0x1493, 0x14ed}, 2}, // sub_15e1d retf
{{0x1493, 0x151a}, 2}, // sub_15e4a retf
{{0x1493, 0x1562}, 2}, // sub_15e92 retf
{{0x1493, 0x1593}, 2}, // sub_15ec3 retf
{{0x1493, 0x161f}, 2}, // sub_15f4f retf
{{0x1493, 0x184b}, 2}, // sub_1617b retf
{{0x164d, 0x01d0}, 2}, // sub_166a0 retf
{{0x164d, 0x01e8}, 2}, // sub_166b8 retf
{{0x164d, 0x01fd}, 2}, // sub_166cd retf
{{0x164d, 0x0298}, 2}, // sub_16768 retf
{{0x164d, 0x043f}, 2}, // sub_1690f retf
{{0x164d, 0x0478}, 2}, // sub_16948 retf
{{0x164d, 0x04cb}, 2}, // sub_1699b retf
{{0x164d, 0x0508}, 2}, // sub_169d8 retf
{{0x164d, 0x0536}, 2}, // sub_16a06 retf
{{0x164d, 0x055b}, 2}, // sub_16a2b retf
{{0x164d, 0x0560}, 2}, // sub_16a30 retf
{{0x164d, 0x05d7}, 2}, // sub_16aa7 retf
{{0x164d, 0x0662}, 2}, // sub_16b32 retf
{{0x164d, 0x06bf}, 2}, // sub_16b8f retf
{{0x164d, 0x0794}, 2}, // sub_16c64 retf
{{0x164d, 0x0826}, 2}, // sub_16cf6 retf
{{0x164d, 0x0868}, 2}, // sub_16d38 retf
{{0x164d, 0x08a8}, 2}, // sub_16d78 retf
{{0x164d, 0x08cb}, 2}, // sub_16d9b retf
{{0x164d, 0x08f9}, 2}, // sub_16dc9 retf
{{0x164d, 0x09be}, 2}, // sub_16e8e retf
{{0x164d, 0x0d28}, 2}, // sub_171f8 retf
{{0x164d, 0x0d39}, 2}, // sub_17209 retf
{{0x164d, 0x0d81}, 2}, // sub_17251 retf
{{0x164d, 0x0da1}, 2}, // sub_17271 retf
{{0x164d, 0x0dbf}, 2}, // sub_1728f retf
{{0x164d, 0x0e1f}, 2}, // sub_172ef retf
{{0x164d, 0x0e5a}, 2}, // sub_1732a retf
{{0x164d, 0x0edf}, 2}, // sub_173af retf
{{0x164d, 0x0f43}, 2}, // sub_17413 retf
{{0x164d, 0x0f92}, 2}, // sub_17462 retf
{{0x174b, 0x0001}, 2}, // sub_174b1 retf
{{0x174b, 0x0037}, 2}, // sub_174e7 retf
{{0x174b, 0x00e5}, 2}, // sub_17595 retf
{{0x174b, 0x0109}, 2}, // sub_175b9 retf
{{0x174b, 0x0181}, 2}, // sub_17631 retf
{{0x174b, 0x019c}, 2}, // sub_1764c retf
{{0x174b, 0x020b}, 2}, // sub_176bb retf
{{0x174b, 0x0236}, 2}, // sub_176e6 retf
{{0x174b, 0x03c5}, 2}, // sub_17875 retf
{{0x174b, 0x042b}, 2}, // sub_178db retf
{{0x174b, 0x06e2}, 2}, // sub_17b92 retf
{{0x174b, 0x0712}, 2}, // sub_17bc2 retf
{{0x174b, 0x0987}, 2}, // sub_17e37 retf
{{0x174b, 0x0a52}, 2}, // sub_17f02 retf
{{0x174b, 0x0ad5}, 2}, // sub_17f85 retf
{{0x174b, 0x0b5d}, 2}, // sub_1800d retf
{{0x174b, 0x0d3d}, 2}, // sub_181ed retf
{{0x174b, 0x0e7f}, 2}, // sub_1832f retf
{{0x174b, 0x0ee6}, 2}, // sub_18396 retf
{{0x174b, 0x0f64}, 2}, // sub_18414 retf
{{0x1841, 0x000f}, 2}, // sub_1841f retf
{{0x1841, 0x0134}, 2}, // sub_18544 retf
{{0x1841, 0x0139}, 2}, // sub_18549 retf
{{0x1841, 0x01c2}, 2}, // sub_185d2 retf
{{0x1841, 0x0318}, 2}, // sub_18728 retf
{{0x1841, 0x06e2}, 2}, // sub_18af2 retf
{{0x1841, 0x071a}, 2}, // sub_18b2a retf
{{0x1841, 0x0868}, 2}, // sub_18c78 retf
{{0x1841, 0x08ab}, 2}, // sub_18cbb retf
{{0x1841, 0x0946}, 2}, // sub_18d56 retf
{{0x1841, 0x0a31}, 2}, // sub_18e41 retf
{{0x1841, 0x0a78}, 2}, // sub_18e88 retf
{{0x1841, 0x0afb}, 2}, // sub_18f0b retf
{{0x1841, 0x0b08}, 2}, // sub_18f18 retf
{{0x1841, 0x0b61}, 2}, // sub_18f71 retf
{{0x1841, 0x0c50}, 2}, // sub_19060 retf
{{0x1841, 0x0c62}, 2}, // sub_19072 retf
{{0x1841, 0x0d59}, 2}, // sub_19169 retf
{{0x1841, 0x1025}, 2}, // sub_19435 retf
{{0x1841, 0x1220}, 2}, // sub_19630 retf
{{0x1841, 0x12ec}, 2}, // sub_196fc retf
{{0x1841, 0x1333}, 2}, // sub_19743 retf
{{0x1841, 0x13dd}, 2}, // sub_197ed retf
{{0x1841, 0x1641}, 2}, // sub_19a51 retf
{{0x1841, 0x185b}, 2}, // sub_19c6b retf
{{0x1841, 0x18e3}, 2}, // sub_19cf3 retf
{{0x1841, 0x1a6e}, 2}, // sub_19e7e retf
{{0x1841, 0x1c6e}, 2}, // sub_1a07e retf
{{0x1a13, 0x000c}, 2}, // sub_1a13c retf
{{0x1a13, 0x01ea}, 2}, // sub_1a31a retf
{{0x1a13, 0x0344}, 2}, // sub_1a474 retf
{{0x1a61, 0x000e}, 2}, // sub_1a61e retf
{{0x1a61, 0x0033}, 2}, // sub_1a643 retf
{{0x1a61, 0x007b}, 2}, // sub_1a68b retf
{{0x1a61, 0x00a9}, 2}, // sub_1a6b9 retf
{{0x1a61, 0x00c3}, 2}, // sub_1a6d3 retf
{{0x1a61, 0x0144}, 2}, // sub_1a754 retf
{{0x1a61, 0x015e}, 2}, // sub_1a76e retf
{{0x1a61, 0x01a0}, 2}, // sub_1a7b0 retf
{{0x1a61, 0x01c1}, 2}, // sub_1a7d1 retf
{{0x1a61, 0x02d7}, 2}, // sub_1a8e7 retf
{{0x1a61, 0x0356}, 2}, // sub_1a966 retf
{{0x1a61, 0x03de}, 2}, // sub_1a9ee retf
{{0x1a61, 0x0491}, 2}, // sub_1aaa1 retf
{{0x1a61, 0x04cb}, 2}, // sub_1aadb retf
{{0x1a61, 0x0504}, 2}, // sub_1ab14 retf
{{0x1a61, 0x0529}, 2}, // sub_1ab39 retf
{{0x1a61, 0x06d7}, 2}, // sub_1ace7 retf
{{0x1a61, 0x06fb}, 2}, // sub_1ad0b retf
{{0x1a61, 0x0712}, 2}, // sub_1ad22 retf
{{0x1a61, 0x072d}, 2}, // sub_1ad3d retf
{{0x1a61, 0x074b}, 2}, // sub_1ad5b retf
{{0x1a61, 0x07d0}, 2}, // sub_1ade0 retf
{{0x1a61, 0x0826}, 2}, // sub_1ae36 retf
{{0x1a61, 0x0913}, 2}, // sub_1af23 retf
{{0x1a61, 0x099f}, 2}, // sub_1afaf retf
{{0x1a61, 0x09f1}, 2}, // sub_1b001 retf
{{0x1a61, 0x0a90}, 2}, // sub_1b0a0 retf
{{0x1a61, 0x0ad7}, 2}, // sub_1b0e7 retf
{{0x1a61, 0x0afd}, 2}, // sub_1b10d retf
{{0x1a61, 0x0b0a}, 2}, // sub_1b11a retf
{{0x1a61, 0x0b15}, 2}, // sub_1b125 retf
{{0x1a61, 0x0b62}, 2}, // sub_1b172 retf
{{0x1a61, 0x0bb4}, 2}, // sub_1b1c4 retf
{{0x1a61, 0x0bc7}, 2}, // sub_1b1d7 retf
{{0x1b1e, 0x0144}, 2}, // sub_1b324 retf
{{0x1b1e, 0x0154}, 2}, // sub_1b334 retf
{{0x1b1e, 0x0180}, 2}, // sub_1b360 retf
{{0x1b1e, 0x0348}, 2}, // sub_1b528 retf
{{0x1b1e, 0x0490}, 2}, // sub_1b670 retf
{{0x1b1e, 0x0547}, 2}, // sub_1b727 retf
{{0x1b1e, 0x05c1}, 2}, // sub_1b7a1 retf
{{0x1b1e, 0x05e2}, 2}, // sub_1b7c2 retf
{{0x1b1e, 0x05ff}, 2}, // sub_1b7df retf
{{0x1b1e, 0x06b5}, 2}, // sub_1b895 retf
{{0x1b1e, 0x06fe}, 2}, // sub_1b8de retf
{{0x1b1e, 0x0783}, 2}, // sub_1b963 retf
{{0x1b1e, 0x079a}, 2}, // sub_1b97a retf
{{0x1b1e, 0x081e}, 2}, // sub_1b9fe retf
{{0x1b1e, 0x08b0}, 2}, // sub_1ba90 retf
{{0x1b1e, 0x0911}, 2}, // sub_1baf1 retf
{{0x1b1e, 0x0c3c}, 2}, // sub_1be1c retf
{{0x1b1e, 0x0cda}, 2}, // sub_1beba retf
{{0x1b1e, 0x0cf9}, 2}, // sub_1bed9 retf
{{0x1b1e, 0x0d72}, 2}, // sub_1bf52 retf
{{0x1b1e, 0x0d9a}, 2}, // sub_1bf7a retf
{{0x1b1e, 0x0dc2}, 2}, // sub_1bfa2 retf
{{0x1b1e, 0x0e1f}, 2}, // sub_1bfff retf
{{0x1b1e, 0x0e60}, 2}, // sub_1c040 retf
{{0x1b1e, 0x0ebd}, 2}, // sub_1c09d retf
{{0x1b1e, 0x0f02}, 2}, // sub_1c0e2 retf
{{0x1b1e, 0x0f2f}, 2}, // sub_1c10f retf
{{0x1b1e, 0x1070}, 2}, // sub_1c250 retf
{{0x1b1e, 0x11af}, 2}, // sub_1c38f retf
{{0x1b1e, 0x1205}, 2}, // sub_1c3e5 retf
{{0x1c76, 0x0005}, 2}, // sub_1c765 retf
{{0x1c76, 0x0024}, 2}, // sub_1c784 retf
{{0x1c76, 0x004b}, 2}, // sub_1c7ab retf
{{0x1c76, 0x0078}, 2}, // sub_1c7d8 retf
{{0x1c76, 0x0110}, 2}, // sub_1c870 retf
{{0x1c76, 0x01a6}, 2}, // sub_1c906 retf
{{0x1c76, 0x024c}, 2}, // sub_1c9ac retf
{{0x1c76, 0x035e}, 2}, // sub_1cabe retf
{{0x1c76, 0x0391}, 2}, // sub_1caf1 retf
{{0x1c76, 0x0536}, 2}, // sub_1cc96 retf
{{0x1c76, 0x06e8}, 2}, // sub_1ce48 retf
{{0x1c76, 0x086b}, 2}, // sub_1cfcb retf
{{0x1c76, 0x191a}, 2}, // sub_1e07a retf
{{0x1c76, 0x19b1}, 2}, // sub_1e111 retf
{{0x1c76, 0x1e34}, 2}, // sub_1e594 retf
{{0x1c76, 0x1e9e}, 2}, // sub_1e5fe retf
{{0x1c76, 0x1ef6}, 2}, // sub_1e656 retf
{{0x1c76, 0x1f37}, 2}, // sub_1e697 retf
{{0x1c76, 0x1fda}, 2}, // sub_1e73a retf
{{0x1c76, 0x2067}, 2}, // sub_1e7c7 retf
{{0x1c76, 0x20a0}, 2}, // sub_1e800 retf
{{0x1c76, 0x20ca}, 2}, // sub_1e82a retf
{{0x1c76, 0x2108}, 2}, // sub_1e868 retf
{{0x1c76, 0x2153}, 2}, // sub_1e8b3 retf
{{0x1c76, 0x219f}, 2}, // sub_1e8ff retf
{{0x1c76, 0x2265}, 2}, // sub_1e9c5 retf
{{0x1c76, 0x2355}, 2}, // sub_1eab5 retf
{{0x1c76, 0x2426}, 2}, // sub_1eb86 retf
{{0x1c76, 0x2480}, 2}, // sub_1ebe0 retf
{{0x1c76, 0x24db}, 2}, // sub_1ec3b retf
{{0x1c76, 0x2582}, 2}, // sub_1ece2 retf
{{0x1eef, 0x0002}, 2}, // sub_1eef2 retf
{{0x1eef, 0x002a}, 2}, // sub_1ef1a retf
{{0x1ef3, 0x0005}, 2}, // sub_1ef35 retf
{{0x1ef3, 0x0090}, 2}, // sub_1efc0 retf
{{0x1ef3, 0x00ac}, 2}, // sub_1efdc retf
{{0x1ef3, 0x00e9}, 2}, // sub_1f019 retf
{{0x1ef3, 0x0152}, 2}, // sub_1f082 retf
{{0x1ef3, 0x016f}, 2}, // sub_1f09f retf
{{0x1ef3, 0x02dd}, 2}, // sub_1f20d retf
{{0x1ef3, 0x030d}, 2}, // sub_1f23d retf
{{0x1ef3, 0x035c}, 2}, // sub_1f28c retf
{{0x1ef3, 0x057d}, 2}, // sub_1f4ad retf
{{0x1ef3, 0x064e}, 2}, // sub_1f57e retf
{{0x1ef3, 0x074d}, 2}, // sub_1f67d retf
{{0x1ef3, 0x078d}, 2}, // sub_1f6bd retf
{{0x1ef3, 0x07d7}, 2}, // sub_1f707 retf
{{0x1ef3, 0x0829}, 2}, // sub_1f759 retf
{{0x1ef3, 0x0886}, 2}, // sub_1f7b6 retf
{{0x1ef3, 0x088f}, 2}, // sub_1f7bf retf
{{0x1ef3, 0x092b}, 2}, // sub_1f85b retf
{{0x1ef3, 0x0981}, 2}, // sub_1f8b1 retf
{{0x1ef3, 0x0999}, 2}, // sub_1f8c9 retf
{{0x1ef3, 0x09bb}, 2}, // sub_1f8eb retf
{{0x1ef3, 0x0a9b}, 2}, // sub_1f9cb retf
{{0x1ef3, 0x0abb}, 2}, // sub_1f9eb retf
{{0x1ef3, 0x0b0e}, 2}, // sub_1fa3e retf
{{0x1ef3, 0x0c79}, 2}, // sub_1fba9 retf
{{0x1ef3, 0x0d29}, 2}, // sub_1fc59 retf
{{0x1ef3, 0x0de3}, 2}, // sub_1fd13 retf
{{0x1ef3, 0x0e2c}, 2}, // sub_1fd5c retf
{{0x1ef3, 0x0e75}, 2}, // sub_1fda5 retf
{{0x1ef3, 0x0faf}, 2}, // sub_1fedf retf
{{0x1ef3, 0x0ff8}, 2}, // sub_1ff28 retf
{{0x1ff7, 0x0000}, 2}, // sub_1ff70 retf
{{0x1ff7, 0x004f}, 2}, // sub_1ffbf retf
{{0x1ff7, 0x00af}, 2}, // sub_2001f retf
{{0x1ff7, 0x0115}, 2}, // sub_20085 retf
{{0x1ff7, 0x0449}, 2}, // sub_203b9 retf
{{0x1ff7, 0x0495}, 2}, // sub_20405 retf
{{0x1ff7, 0x04df}, 2}, // sub_2044f retf
{{0x1ff7, 0x059f}, 2}, // sub_2050f retf
{{0x1ff7, 0x05da}, 2}, // sub_2054a retf
{{0x1ff7, 0x0759}, 2}, // sub_206c9 retf
{{0x1ff7, 0x07da}, 2}, // sub_2074a retf
{{0x1ff7, 0x0849}, 2}, // sub_207b9 ret retf
{{0x1ff7, 0x09b9}, 2}, // sub_20929 retf
{{0x1ff7, 0x0ad3}, 2}, // sub_20a43 retf
{{0x1ff7, 0x0b1a}, 2}, // sub_20a8a retf
*/

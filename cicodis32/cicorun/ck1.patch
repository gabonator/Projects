diff --git a/ck1.clean b/ck1.cpp
index 4b34e6e..29f8702 100644
--- a/ck1.clean
+++ b/ck1.cpp
@@ -315,7 +315,7 @@ void sub_12290();
     }
 void sub_1ed0() // 01ed:0000
 {
-    sp -= 2;
+//    sp -= 2;
     dx = 0x14f2;
     memoryASet16(cs, 0x0235, dx);
     ah = 0x30;
@@ -470,7 +470,7 @@ loc_20f0: // 01ed:0220
     memoryASet16(ds, bx + si, memoryAGet16(ds, bx + si) + ax);
     push(bp);
     bp = sp;
-    ax = 0;
+    assert(0); ax = 0; // write to cs! 0x14f2
     memoryASet16(ds, 0x6ed8, ax);
     memoryASet16(ds, 0x6ecc, ax);
     memoryASet16(ds, 0x6ebe, ax);
@@ -494,7 +494,7 @@ loc_2149: // 01ed:0279
     memoryASet16(ds, 0x5640, ax);
     bp = pop();
     stop("stack_unbalanced");
-    sp += 2;
+//    sp += 2;
 }
 void sub_1fdf() // 01ed:010f
 {
@@ -578,7 +578,7 @@ loc_20f6: // 01ed:0226
     memoryASet16(ds, bx + si, memoryAGet16(ds, bx + si) + ax);
     push(bp);
     bp = sp;
-    ax = 0;
+    assert(0); ax = 0;
     memoryASet16(ds, 0x6ed8, ax);
     memoryASet16(ds, 0x6ecc, ax);
     memoryASet16(ds, 0x6ebe, ax);
@@ -655,6 +655,7 @@ void sub_2078() // 01ed:01a8
 }
 void sub_20a5() // 01ed:01d5
 {
+    sp -= 2;
 loc_20a5: // 01ed:01d5
     ah = 0xff;
     dx = di;
@@ -698,6 +699,7 @@ loc_20e0: // 01ed:0210
     ds = pop();
     goto loc_20a5;
 loc_20e7: // 01ed:0217
+    sp += 2;
     return;
 }
 void sub_20e8() // 01ed:0218
@@ -720,6 +722,8 @@ void sub_2109() // 01ed:0239
     memoryASet16(ds, 0x7fba, 0x6c64);
     memoryASet16(ds, 0x5db6, 0x5660);
 loc_212f: // 01ed:025f
+//    sync();
+    memoryASet16(ds, 0x5135, memoryAGet16(ds, 0x5135)+1);
     ax = memoryAGet16(ds, 0x5135);
     ax -= memoryAGet16(ds, 0x563e);
     memoryASet16(ds, 0x5b14, ax);
@@ -14397,6 +14401,7 @@ loc_b3b9: // 01ed:94e9
     sub_7b0a();
     goto loc_b3cc;
 loc_b3c3: // 01ed:94f3
+    sync();
     ax = 0x0007;
     push(ax);
     sub_dfb2();
@@ -15692,6 +15697,7 @@ void sub_be82() // 01ed:9fb2
     sp++;
     sp++;
 loc_bef4: // 01ed:a024
+    sync();
     ax = bp - 6;
     push(ss);
     push(ax);
@@ -17743,6 +17749,7 @@ loc_d0dd: // 01ed:b20d
         goto loc_d0e3;
     goto loc_d064;
 loc_d0e3: // 01ed:b213
+    sync();
     ax = bp - 6;
     push(ss);
     push(ax);
@@ -18537,9 +18544,9 @@ loc_d733: // 01ed:b863
     al = in8(dx);
     dx = 0x03c0;
     al = 0x33;
-    out8(dx, al);
-    ax = memoryAGet16(ds, 0x35b8);
-    out8(dx, al);
+//    out8(dx, al);
+//    ax = memoryAGet16(ds, 0x35b8);
+//    out8(dx, al);
     di = pop();
     si = pop();
     sp += 2;
@@ -19138,6 +19145,7 @@ void sub_dc9e() // 01ed:bdce
     if (ax)
         goto loc_dcc8;
 loc_dcaa: // 01ed:bdda
+    sync();
     bl = memoryAGet(ds, 0x50ac);
     if ((char)bl >= 0)
         goto loc_dcaa;
@@ -19363,7 +19371,9 @@ loc_de58: // 01ed:bf88
     push(flagAsReg());
     push(cs);
     sub_de67();
+    assert(cs == 0x01ed);
 loc_de5e: // 01ed:bf8e
+    return;
     ax = memoryAGet16(ds, 0x514a);
     if (ax != 0x0000)
         goto loc_de5e;
@@ -19432,7 +19442,8 @@ loc_dedc: // 01ed:c00c
     cx = pop();
     bx = pop();
     ax = pop();
-    stop("iret");
+//    stop("iret");
+    cs = pop();
 }
 void sub_dee3() // 01ed:c013
 {
@@ -21056,7 +21067,7 @@ loc_ee93: // 01ed:cfc3
 loc_ee9b: // 01ed:cfcb
     si = pop();
     bp = pop();
-    stop("stack_below, 0/6");
+//    stop("stack_below, 0/6");
     sp += 2;
     sp += 6;
 }
@@ -23429,9 +23440,9 @@ void sub_1016b() // 01ed:e29b +stackDrop8 +nearAsFar
 void sub_1018a() // 01ed:e2ba
 {
     sp -= 2;
-    bx = pop();
-    stop("stack_below");
-    sp -= cx;
+    bx = pop(); // ret addr
+    //stop("stack_below");
+    sp -= cx; // skip 3 args
     push(cs);
     goto loc_10195;
   // gap 5 bytes
@@ -23454,7 +23465,7 @@ loc_10195: // 01ed:e2c5
     tx = si; si = ax; ax = tx;
     ds = pop();
     di = pop();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     sp += 2;
     cs = pop();
 }
@@ -23924,7 +23935,7 @@ loc_10558: // 01ed:e688
     memoryASet16(ds, 0x0082, ax);
     ax = memoryAGet16(ds, 0x5632);
     memoryASet16(ds, 0x0084, ax);
-    indirectJump(cs, memoryAGet16(ds, 0x5634)); // 01ed:e6ae;
+//    indirectJump(cs, memoryAGet16(ds, 0x5634)); // 01ed:e6ae;
 }
 void sub_10500() // 01ed:e630 +returnCarry +returnZero
 {
@@ -29553,4 +29564,3 @@ int GetProcAt(int seg, int ofs)
 {{0x01ed, 0xe0b2}, 10}, // sub_ff82 retf
 {{0x01ed, 0xe29b}, 10}, // sub_1016b retf
 */
-Program ended with exit code: 0

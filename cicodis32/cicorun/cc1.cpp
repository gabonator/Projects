#if 0
#include "cico16.h"

void fixReloc(uint16_t seg);
void sub_10e6b();

void start()
{
    headerSize = 0x1d50;
    loadAddress = 0x01ed;
    endAddress = 0x30cd;
    cs = 0x01ed;
    ds = 0x01dd;
    es = 0x01dd;
    ss = 0x38fa;
    sp = 0x4000;
    load("", "CC1.EXE", 191808);
    fixReloc(cs);
    sub_10e6b();
}


void sub_1ed0();
void sub_1f29();
void sub_234d();
void sub_258e();
void sub_25be();
void sub_25dd();
void sub_25f7();
void sub_29fd();
void sub_2a58();
void sub_2a7f();
void sub_2b0e();
void sub_2e08();
void sub_2f07();
void sub_44c0();
void sub_d079();
void sub_ee16();
void sub_ee3c();
void sub_f010();
void sub_f02c();
void sub_f04d();
void sub_f096();
void sub_f212();
void sub_f230();
void sub_f3b5();
void sub_f492();
void sub_f5a4();
void sub_f5e0();
void sub_f5fa();
void sub_fb89();
void sub_fee1();
void sub_1023b();
void sub_103ed();
void sub_104a3();
void sub_109ba();
void sub_10ac2();
void sub_10d91();
void sub_10e08();
void sub_10e6b();
void sub_11a66();
void sub_11a82();
void sub_11af4();
void sub_11b08();
void sub_11b20();
void sub_11c0c();
void sub_121e4();
void sub_12397();
void sub_12b21();
void sub_13311();
void sub_13371();
void sub_1341a();
void sub_13592();
void sub_13878();
void sub_13cb8();
void sub_142c8();
void sub_14ab2();
void sub_14f05();
void sub_15101();
void sub_15466();
void sub_157da();
void sub_159d7();
void sub_15b98();
void sub_15dd0();
void sub_167f7();
void sub_176ae();
void sub_177e5();
void sub_17926();
void sub_17a14();
void sub_17ad0();
void sub_17b55();
void sub_17c25();
void sub_17cd1();
void sub_17f68();
void sub_181f7();
void sub_182c3();
void sub_18390();
void sub_1846d();
void sub_18578();
void sub_1866d();
void sub_18738();
void sub_187a6();
void sub_1891d();
void sub_18a3a();
void sub_18b05();
void sub_18c0c();
void sub_18d33();
void sub_18f1d();
void sub_19015();
void sub_19434();
void sub_19848();
void sub_19c01();
void sub_19d85();
void sub_19fb1();
void sub_1a05b();
void sub_1a15d();
void sub_1a258();
void sub_1a4bd();
void sub_1a852();
void sub_1b000();
void sub_1b958();
void sub_1bcef();
void sub_1bf87();
void sub_1c0be();
void sub_1c189();
void sub_1c24f();
void sub_1c30f();
void sub_1c55a();
void sub_1c6b0();
void sub_1c6c4();
void sub_1c72b();
void sub_1c7e0();
void sub_1c8be();
void sub_1c95b();
void sub_1ca12();
void sub_1ca5a();
void sub_1caa5();
void sub_1cded();
void sub_1d03b();
void sub_1d15c();
void sub_1d2d9();
void sub_1d431();
void sub_1d485();
void sub_1d4a1();
void sub_1d4d9();
void sub_1d616();
void sub_1d648();
void sub_1ed02();
void sub_1f0b0();
void sub_1f0f5();
void sub_1f147();
void sub_1f1b1();
void sub_1f3b9();
void sub_1f3f9();
void sub_1f449();
void sub_1f477();
void sub_1f48e();
void sub_1f4aa();
void sub_1f53a();
void sub_1f542();
void sub_1f5ae();
void sub_1f5c0();
void sub_1f5cf();
void sub_1f607();
void sub_1f6ab();
void sub_1f76c();
void sub_1f82b();
void sub_20230();
void sub_202ed();
void sub_20387();
void sub_20697();
void sub_20ed5();
void sub_20fa3();
void sub_21662();
void sub_21880();
void sub_218c3();
void sub_21a9f();
void sub_21b53();
void sub_21b90();
void sub_21bd7();
void sub_21c2b();
void sub_21ea8();
void sub_21f0d();
void sub_21fde();
void sub_220b1();
void sub_22127();
void sub_222b6();
void sub_222e6();
void sub_2365b();
void sub_236f4();
void sub_237d8();
void sub_23839();
void sub_23842();
void sub_239f6();
void sub_23ac1();
void sub_23d9d();
void sub_240d0();
void sub_240f7();
void sub_2420a();
void sub_2434f();
void sub_24454();
void sub_245b7();
void sub_246a5();
void sub_24803();
void sub_24abc();
void sub_24b76();
void sub_24c96();
void sub_24f30();
void sub_25184();
void sub_252ae();
void sub_25468();
void sub_255a3();
void sub_256f0();
void sub_25793();
void sub_257ec();
void sub_258ba();
void sub_259c5();
void sub_26039();
void sub_2617e();
void sub_262cb();
void sub_26302();
void sub_26353();
void sub_26512();
void sub_26854();
void sub_26b67();
void sub_26e6c();
void sub_270d5();
void sub_2743e();
void sub_2750f();
void sub_27ab2();
void sub_27b72();
void sub_27cd8();
void sub_27f01();
void sub_27fab();
void sub_28253();
void sub_2837a();
void sub_285b1();
void sub_28876();
void sub_28964();
void sub_28b30();
void sub_28d51();
void sub_28e1f();
void sub_28f76();
void sub_290cd();
void sub_2921c();
void sub_29241();
void sub_29270();
void sub_294c2();
void sub_29ee5();
void sub_2a173();
void sub_2a21f();
void sub_2a2b9();
void sub_2a310();
void sub_2a348();
void sub_2a368();
void sub_2a388();
void sub_2a3dc();
void sub_2a410();
void sub_2a440();
void sub_2a4a9();
void sub_2a4f7();
void sub_2a555();
void sub_2a57d();
void sub_2a5d2();
void sub_2a625();
void sub_2a669();
void sub_2a683();
void sub_2a6ae();
void sub_2a6ce();
void sub_2a703();
void sub_2a70a();
void sub_2a71c();
void sub_2a73e();
void sub_2a769();
void sub_2a884();
void sub_2a88b();
void sub_2a8e4();
void sub_2a905();
void sub_2a90c();
void sub_2aa18();
void sub_2aa30();
void sub_2aaf9();
void sub_2ab1b();
void sub_2ab29();
void sub_2ab4f();
void sub_2aba2();
void sub_2abf5();
void sub_2ac31();
void sub_2ac50();
void sub_2ac8d();
void sub_2aca8();
void sub_2adcb();
void sub_2ae75();
void sub_2af7b();
void sub_2b144();
void sub_2c0eb();
void sub_2c187();
void sub_2c34f();
void sub_2c47d();
void sub_2cdb9();
void sub_2d138();
void sub_2d2d7();
void sub_2d3f5();
void sub_2d48e();
void sub_2d825();
void sub_2d888();
void sub_2d8d1();
void sub_2d99b();
void sub_2d9d5();
void sub_2d9fc();
void sub_2da14();
void sub_2da30();
void sub_2db08();
void sub_2dbc4();
void sub_2dbd2();
void sub_2dbde();
void sub_2dbec();
void sub_2dbf3();
void sub_2dbfe();
void sub_2dc06();
void sub_2dc37();
void sub_2dc3e();
void sub_2dc8d();
void sub_2dca9();
void sub_2dcc4();
void sub_2dd59();
void sub_2dd94();
void sub_2dde5();
void sub_2de76();
void sub_2df12();
void sub_2dfc5();
void sub_2dfe9();
void sub_2dffe();
void sub_2e047();
void sub_2e055();
void sub_2e064();
void sub_2e07e();
void sub_2e0b0();
void sub_2e0f1();
void sub_2e11d();
void sub_2e154();
void sub_2e17f();
void sub_2e200();
void sub_2e304();
void sub_2e3b0();
void sub_2e3ff();
void sub_2e437();
void sub_2e444();
void sub_2e4be();
void sub_2e556();
void sub_2e5a1();
void sub_2e5d2();
void sub_2e642();
void sub_2e647();
void sub_2e69b();
void sub_2e6d6();
void sub_2e6e7();
void sub_2e769();
void sub_2e891();
void sub_2e8b5();
void sub_2e91e();
void sub_2e93d();
void sub_2e981();
void sub_2e9e6();
void sub_2ea24();
void sub_2ea52();
void sub_2ea5b();
void sub_2ead3();
void sub_2eaf8();
void sub_2eb07();
void sub_2eb0e();
void sub_2ebf8();


    void callIndirect(int s, int o)
    {
        stop("ind");
    }

    void indirectJump(int s, int o)
    {
        stop("ind");
    }
// Problem: 11b2:0000 sub_11b20 - near&far&uses stack!
// Problem: 11b2:5ef4 sub_17a14 - near&far&uses stack!
// Problem: 11b2:7d28 sub_19848 - near&far&uses stack!
// Problem: 11b2:899d sub_1a4bd - near&far&uses stack!
// Problem: 11b2:a72f sub_1c24f - near&far&uses stack!
// Problem: 11b2:baf6 sub_1d616 - near&far&uses stack!
// Problem: 1f0b:0101 sub_1f1b1 - near&far&uses stack!
// Problem: 2188:0043 sub_218c3 - near&far&uses stack!
// Problem: 2188:021f sub_21a9f - near&far&uses stack!
// Problem: 2188:02d3 sub_21b53 - near&far&uses stack!
// Problem: 2188:0310 sub_21b90 - near&far&uses stack!
// Problem: 2188:0357 sub_21bd7 - near&far&uses stack!
// Problem: 2188:0628 sub_21ea8 - near&far&uses stack!
// Problem: 2188:08a7 sub_22127 - near&far&uses stack!
// Problem: 2188:0a36 sub_222b6 - near&far&uses stack!
// Problem: 2188:251d sub_23d9d - near&far&uses stack!
// Problem: 2a31:00cc sub_2a3dc - near&far&uses stack!
// Problem: 2aa3:00c9 sub_2aaf9 - near&far&uses stack!
// Problem: 2aa3:00eb sub_2ab1b - near&far&uses stack!
// Problem: 2aa3:054b sub_2af7b - near&far&uses stack!
// Problem: 2da3:064e sub_2e07e - near&far&uses stack!
// Problem: 2da3:0680 sub_2e0b0 - near&far&uses stack!
// Problem: 2da3:06c1 sub_2e0f1 - near&far&uses stack!
// Problem: 2da3:0c12 sub_2e642 - near&far&uses stack!
// Problem: 2da3:0c17 sub_2e647 - near&far&uses stack!
// Problem: 2da3:10a3 sub_2ead3 - near&far&uses stack!
void sub_1ed0() // 01ed:0000 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 12);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 12);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_1f29() // 01ed:0059 +stackDrop22
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 24));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20628, ax);
    push(memoryAGet16(ss, bp + 22));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20630, ax);
    push(memoryAGet16(ss, bp + 20));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20632, ax);
    push(memoryAGet16(ss, bp + 12));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20626, ax);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20634, ax);
    al = memoryAGet(ss, bp + 8);
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet(ds, di + 20637, al);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet(ds, di + 20638, al);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20636, 0x00);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x00);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
    memoryASet16(ds, 0x02f6, 0xffff);
    ax = memoryAGet16(ss, bp + 14);
    if (ax == memoryAGet16(ds, 0x5122))
        goto loc_2136;
    goto loc_2224;
loc_2136: // 01ed:0266
    ax = 0;
    memoryASet16(ds, 0x02f6, ax);
    ax = memoryAGet16(ds, 0x511e);
    if (ax != 0x0004)
        goto loc_2172;
    ax = memoryAGet16(ss, bp + 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_215a;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0004);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0002);
loc_215a: // 01ed:028a
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_216f;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 1);
loc_216f: // 01ed:029f
    goto loc_2224;
loc_2172: // 01ed:02a2
    if (ax != 0x0006)
        goto loc_21bf;
    ax = memoryAGet16(ss, bp + 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_218e;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0004);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0003);
loc_218e: // 01ed:02be
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_21a7;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0002);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0002);
    goto loc_21bd;
loc_21a7: // 01ed:02d7
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax != 0x0002)
        goto loc_21bd;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 1);
loc_21bd: // 01ed:02ed
    goto loc_2224;
loc_21bf: // 01ed:02ef
    if (ax != 0x0008)
        goto loc_2224;
    ax = memoryAGet16(ss, bp + 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_21db;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0004);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0004);
loc_21db: // 01ed:030b
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0004;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_21f4;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0003);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0003);
    goto loc_2224;
loc_21f4: // 01ed:0324
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0004;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax != 0x0003)
        goto loc_220e;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 0x0002);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 0x0002);
    goto loc_2224;
loc_220e: // 01ed:033e
    ax = memoryAGet16(ss, bp + 18);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0004;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax != 0x0002)
        goto loc_2224;
    memoryASet16(ss, bp + 14, memoryAGet16(ss, bp + 14) + 1);
    memoryASet16(ds, 0x02f6, memoryAGet16(ds, 0x02f6) + 1);
loc_2224: // 01ed:0354
    if (memoryAGet(ds, 0x030d) == 0x00)
        goto loc_2231;
    memoryASet16(ds, 0x02f6, 0xffff);
loc_2231: // 01ed:0361
    push(memoryAGet16(ds, 0x02f6));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20622, ax);
    push(memoryAGet16(ss, bp + 14));
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20624, ax);
    push(memoryAGet16(ss, bp + 24));
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(memoryAGet16(ss, bp + 14));
    push(cs);
    sub_1ed0();
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if ((short)memoryAGet16(ds, di + 20626) <= (short)0x0000)
        goto loc_22fc;
    push(memoryAGet16(ss, bp + 22));
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(memoryAGet16(ss, bp + 12));
    push(cs);
    sub_1ed0();
loc_22fc: // 01ed:042c
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if ((short)memoryAGet16(ds, di + 20634) <= (short)0x0000)
        goto loc_2347;
    push(memoryAGet16(ss, bp + 20));
    ax = memoryAGet16(ss, bp + 18);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_1ed0();
loc_2347: // 01ed:0477
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 20;
}
void sub_234d() // 01ed:047d +stackDrop30
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 26);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 24);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp + 22) != 0x0001)
        goto loc_2382;
    cx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, cx);
    goto loc_2393;
loc_2382: // 01ed:04b2
    cx = memoryAGet16(ss, bp + 18);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, cx);
loc_2393: // 01ed:04c3
    if (memoryAGet(ds, 0xa10a) != 0x00)
        goto loc_23be;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 26));
    push(memoryAGet16(ss, bp + 24));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
loc_23be: // 01ed:04ee
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0x0063)
        goto loc_2435;
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 28);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 28);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    ax += 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
loc_2435: // 01ed:0565
    cx = memoryAGet16(ss, bp + 28);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17900, cx);
    cx = memoryAGet16(ss, bp + 16);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, cx);
    cx = memoryAGet16(ss, bp + 18);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, cx);
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    cx = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, cx);
    cx = memoryAGet16(ss, bp - 4);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17898, cx);
    cx = memoryAGet16(ss, bp + 22);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    cx = memoryAGet16(ss, bp + 20);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    cx = memoryAGet16(ss, bp + 14);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, cx);
    cx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, cx);
    cx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, cx);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17888, ax);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0001);
    cx = memoryAGet16(ss, bp + 30);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, cx);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    cx = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    bx = es;
    ax = memoryAGet16(ss, bp + 32);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 28;
}
void sub_258e() // 01ed:06be
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xa0b4, memoryAGet16(ds, 0xa0b4) + 1);
    ax = memoryAGet16(ds, 0xa0b4);
    if (ax == 0x0001)
        goto loc_25a2;
    if (ax != 0x0002)
        goto loc_25aa;
loc_25a2: // 01ed:06d2
    memoryASet16(ds, 0x02ba, 0x0002);
    goto loc_25ba;
loc_25aa: // 01ed:06da
    if ((short)ax < (short)0x0003)
        goto loc_25ba;
    if ((short)ax > (short)0x7d00)
        goto loc_25ba;
    memoryASet16(ds, 0x02ba, 0x0004);
loc_25ba: // 01ed:06ea
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_25be() // 01ed:06ee
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x5140) == 0x00)
        goto loc_25cf;
    memoryASet(ds, 0x5140, 0x00);
    goto loc_25d4;
loc_25cf: // 01ed:06ff
    memoryASet(ds, 0x5140, 0x01);
loc_25d4: // 01ed:0704
    memoryASet(ds, 0x3391, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_25dd() // 01ed:070d
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x030c) == 0x00)
        goto loc_25ee;
    memoryASet(ds, 0x030c, 0x00);
    goto loc_25f3;
loc_25ee: // 01ed:071e
    memoryASet(ds, 0x030c, 0x01);
loc_25f3: // 01ed:0723
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_25f7() // 01ed:0727
{
    sp -= 2;
    push(ax);
    push(bx);
    push(cx);
    push(dx);
    push(si);
    push(di);
    push(ds);
    push(es);
    push(bp);
    bp = sp;
    ax = 0x2ec1;
    ds = ax;
    al = in8(0x60);
    ah = 0;
    memoryASet16(ds, 0x2b5e, ax);
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != memoryAGet16(ds, 0x2b70))
        goto loc_261c;
    memoryASet(ds, 0x338b, 0x01);
loc_261c: // 01ed:074c
    ax = memoryAGet16(ds, 0x2b70);
    ax += 0x0080;
    if (ax != memoryAGet16(ds, 0x2b5e))
        goto loc_262d;
    memoryASet(ds, 0x338b, 0x00);
loc_262d: // 01ed:075d
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != memoryAGet16(ds, 0x2b6c))
        goto loc_263b;
    memoryASet(ds, 0x338e, 0x01);
loc_263b: // 01ed:076b
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != memoryAGet16(ds, 0x2b6e))
        goto loc_2649;
    memoryASet(ds, 0x338f, 0x01);
loc_2649: // 01ed:0779
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != memoryAGet16(ds, 0x2b7a))
        goto loc_2657;
    memoryASet(ds, 0x3390, 0x01);
loc_2657: // 01ed:0787
    ax = memoryAGet16(ds, 0x2b6e);
    ax += 0x0080;
    if (ax != memoryAGet16(ds, 0x2b5e))
        goto loc_2668;
    memoryASet(ds, 0x338f, 0x00);
loc_2668: // 01ed:0798
    ax = memoryAGet16(ds, 0x2b6c);
    ax += 0x0080;
    if (ax != memoryAGet16(ds, 0x2b5e))
        goto loc_2679;
    memoryASet(ds, 0x338e, 0x00);
loc_2679: // 01ed:07a9
    ax = memoryAGet16(ds, 0x2b7a);
    ax += 0x0080;
    if (ax != memoryAGet16(ds, 0x2b5e))
        goto loc_268a;
    memoryASet(ds, 0x3390, 0x00);
loc_268a: // 01ed:07ba
    ax = memoryAGet16(ds, 0x2b5e);
    if ((short)ax < (short)0x003b)
        goto loc_2697;
    if ((short)ax <= (short)0x0044)
        goto loc_26b0;
loc_2697: // 01ed:07c7
    if (ax == 0x0023)
        goto loc_26b0;
    if (ax == 0x0001)
        goto loc_26b0;
    if (ax == 0x0010)
        goto loc_26b0;
    if (ax == 0x0057)
        goto loc_26b0;
    if (ax != 0x0058)
        goto loc_26b7;
loc_26b0: // 01ed:07e0
    memoryASet(ds, 0x3388, 0x01);
    goto loc_26d4;
loc_26b7: // 01ed:07e7
    if (ax != 0x0019)
        goto loc_26c3;
    memoryASet(ds, 0x3393, 0x01);
    goto loc_26d4;
loc_26c3: // 01ed:07f3
    if (ax != 0x0022)
        goto loc_26d4;
    if (memoryAGet(ds, 0x5140) == 0x00)
        goto loc_26d4;
    memoryASet(ds, 0x3392, 0x01);
loc_26d4: // 01ed:0804
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != 0x002c)
        goto loc_26e3;
    memoryASet(ds, 0x030e, 0x01);
    goto loc_2735;
loc_26e3: // 01ed:0813
    if (ax != 0x00ac)
        goto loc_26ef;
    memoryASet(ds, 0x030e, 0x00);
    goto loc_2735;
loc_26ef: // 01ed:081f
    if (ax != 0x0012)
        goto loc_26fb;
    memoryASet(ds, 0x030f, 0x01);
    goto loc_2735;
loc_26fb: // 01ed:082b
    if (ax != 0x0092)
        goto loc_2707;
    memoryASet(ds, 0x030f, 0x00);
    goto loc_2735;
loc_2707: // 01ed:0837
    if (ax != 0x0016)
        goto loc_2713;
    memoryASet(ds, 0x0310, 0x01);
    goto loc_2735;
loc_2713: // 01ed:0843
    if (ax != 0x0096)
        goto loc_271f;
    memoryASet(ds, 0x0310, 0x00);
    goto loc_2735;
loc_271f: // 01ed:084f
    if (ax != 0x001f)
        goto loc_272b;
    memoryASet(ds, 0x0311, 0x01);
    goto loc_2735;
loc_272b: // 01ed:085b
    if (ax != 0x009f)
        goto loc_2735;
    memoryASet(ds, 0x0311, 0x00);
loc_2735: // 01ed:0865
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != 0x0031)
        goto loc_2744;
    memoryASet(ds, 0x0312, 0x01);
    goto loc_2796;
loc_2744: // 01ed:0874
    if (ax != 0x00b1)
        goto loc_2750;
    memoryASet(ds, 0x0312, 0x00);
    goto loc_2796;
loc_2750: // 01ed:0880
    if (ax != 0x0012)
        goto loc_275c;
    memoryASet(ds, 0x0313, 0x01);
    goto loc_2796;
loc_275c: // 01ed:088c
    if (ax != 0x0092)
        goto loc_2768;
    memoryASet(ds, 0x0313, 0x00);
    goto loc_2796;
loc_2768: // 01ed:0898
    if (ax != 0x002d)
        goto loc_2774;
    memoryASet(ds, 0x0314, 0x01);
    goto loc_2796;
loc_2774: // 01ed:08a4
    if (ax != 0x00ad)
        goto loc_2780;
    memoryASet(ds, 0x0314, 0x00);
    goto loc_2796;
loc_2780: // 01ed:08b0
    if (ax != 0x0014)
        goto loc_278c;
    memoryASet(ds, 0x0315, 0x01);
    goto loc_2796;
loc_278c: // 01ed:08bc
    if (ax != 0x0094)
        goto loc_2796;
    memoryASet(ds, 0x0315, 0x00);
loc_2796: // 01ed:08c6
    ax = memoryAGet16(ds, 0x2b5e);
    if (ax != 0x002d)
        goto loc_27a5;
    memoryASet(ds, 0x0318, 0x01);
    goto loc_27f7;
loc_27a5: // 01ed:08d5
    if (ax != 0x00ad)
        goto loc_27b1;
    memoryASet(ds, 0x0318, 0x00);
    goto loc_27f7;
loc_27b1: // 01ed:08e1
    if (ax != 0x0014)
        goto loc_27bd;
    memoryASet(ds, 0x0319, 0x01);
    goto loc_27f7;
loc_27bd: // 01ed:08ed
    if (ax != 0x0094)
        goto loc_27c9;
    memoryASet(ds, 0x0319, 0x00);
    goto loc_27f7;
loc_27c9: // 01ed:08f9
    if (ax != 0x0013)
        goto loc_27d5;
    memoryASet(ds, 0x031a, 0x01);
    goto loc_27f7;
loc_27d5: // 01ed:0905
    if (ax != 0x0093)
        goto loc_27e1;
    memoryASet(ds, 0x031a, 0x00);
    goto loc_27f7;
loc_27e1: // 01ed:0911
    if (ax != 0x001e)
        goto loc_27ed;
    memoryASet(ds, 0x031b, 0x01);
    goto loc_27f7;
loc_27ed: // 01ed:091d
    if (ax != 0x009e)
        goto loc_27f7;
    memoryASet(ds, 0x031b, 0x00);
loc_27f7: // 01ed:0927
    if (memoryAGet(ds, 0x031c) == 0x00)
        goto loc_280a;
    if (memoryAGet(ds, 0x031d) == 0x00)
        goto loc_280a;
    memoryASet(ds, 0xa10f, 0x01);
loc_280a: // 01ed:093a
    if (memoryAGet(ds, 0x030e) == 0x00)
        goto loc_282b;
    if (memoryAGet(ds, 0x030f) == 0x00)
        goto loc_282b;
    if (memoryAGet(ds, 0x0310) == 0x00)
        goto loc_282b;
    if (memoryAGet(ds, 0x0311) == 0x00)
        goto loc_282b;
    memoryASet(ds, 0x3391, 0x01);
loc_282b: // 01ed:095b
    if (memoryAGet(ds, 0x0312) == 0x00)
        goto loc_284c;
    if (memoryAGet(ds, 0x0313) == 0x00)
        goto loc_284c;
    if (memoryAGet(ds, 0x0314) == 0x00)
        goto loc_284c;
    if (memoryAGet(ds, 0x0315) == 0x00)
        goto loc_284c;
    memoryASet(ds, 0xa10e, 0x01);
loc_284c: // 01ed:097c
    if (memoryAGet(ds, 0x0318) == 0x00)
        goto loc_2883;
    if (memoryAGet(ds, 0x0319) == 0x00)
        goto loc_2883;
    if (memoryAGet(ds, 0x031a) == 0x00)
        goto loc_2883;
    if (memoryAGet(ds, 0x031b) == 0x00)
        goto loc_2883;
    if (memoryAGet(ds, 0x50a4) != 0x00)
        goto loc_2883;
    memoryASet16(ds, 0x509c, memoryAGet16(ds, 0x509c) + 0x0019);
    memoryASet16(ds, 0x50be, memoryAGet16(ds, 0x50be) + 0x0019);
    memoryASet(ds, 0x50a4, 0x01);
    memoryASet(ds, 0x50c6, 0x01);
loc_2883: // 01ed:09b3
    if (memoryAGet(ds, 0x0307) != 0x00)
        goto loc_28a4;
    if (memoryAGet(ds, 0x0308) != 0x00)
        goto loc_28a4;
    if (memoryAGet(ds, 0x338f) != 0x00)
        goto loc_28a4;
    if (memoryAGet(ds, 0x338e) != 0x00)
        goto loc_28a4;
    ax = 0;
    memoryASet16(ds, 0xa0b4, ax);
loc_28a4: // 01ed:09d4
    if (memoryAGet(ds, 0x0307) != 0x00)
        goto loc_28c0;
    if (memoryAGet(ds, 0x0308) != 0x00)
        goto loc_28c0;
    if (memoryAGet(ds, 0x338e) != 0x00)
        goto loc_28c0;
    if (memoryAGet(ds, 0x338f) == 0x00)
        goto loc_28c5;
loc_28c0: // 01ed:09f0
    memoryASet(ds, 0x030a, 0x00);
loc_28c5: // 01ed:09f5
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    push(memoryAGet16(ds, 0x0328));
    push(memoryAGet16(ds, 0x0326));
    bx = pop();
    ax = pop();
    tx = memoryAGet16(ss, bp + 14); memoryASet16(ss, bp + 14, bx); bx = tx;
    tx = memoryAGet16(ss, bp + 16); memoryASet16(ss, bp + 16, ax); ax = tx;
    sp = bp;
    bp = pop();
    es = pop();
    ds = pop();
    di = pop();
    si = pop();
    dx = pop();
    cx = pop();
    bx = pop();
    ax = pop();
//    stop("stack_unbalanced");
//    sp += 2;
    cs = pop();
}
void sub_29fd() // 01ed:0b2d
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    dx = es;
    memoryASet16(ds, 0x031e, ax);
    memoryASet16(ds, 0x0320, dx);
    ax = 0x0af9;
    dx = 0x01ed;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, dx);
    al = 0x1c;
    push(ax);
    di = 0x0322;
    push(ds);
    push(di);
    push(cs); cs = 0x2d99; sub_2d9fc(); assert(cs == 0x01ed);
    al = 0x1c;
    push(ax);
    ax = 0x0a3f;
    dx = 0x01ed;
    push(dx);
    push(ax);
    push(cs); cs = 0x2d99; sub_2da14(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    di = 0x0326;
    push(ds);
    push(di);
    push(cs); cs = 0x2d99; sub_2d9fc(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    ax = 0x0727;
    dx = 0x01ed;
    push(dx);
    push(ax);
    push(cs); cs = 0x2d99; sub_2da14(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2a58() // 01ed:0b88
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = 0x1c;
    push(ax);
    push(memoryAGet16(ds, 0x0324));
    push(memoryAGet16(ds, 0x0322));
    push(cs); cs = 0x2d99; sub_2da14(); assert(cs == 0x01ed);
    al = 0x09;
    push(ax);
    push(memoryAGet16(ds, 0x0328));
    push(memoryAGet16(ds, 0x0326));
    push(cs); cs = 0x2d99; sub_2da14(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2a7f() // 01ed:0baf
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0xffd7;
    push(ax);
    ax = 0xffd7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002b;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2850;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet(ds, 0x4660, 0x01);
    memoryASet16(ds, 0x4638, 0x0002);
    ax = 0x0003;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0xffd7;
    push(ax);
    ax = 0xffd7;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2877;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet(ds, 0x468d, 0x01);
    memoryASet16(ds, 0x4665, 0x0002);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2b0e() // 01ed:0c3e
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ds, 0xa0c0, 0x0007);
    memoryASet(ds, 0xa112, 0x00);
    memoryASet(ds, 0xa113, 0x08);
    memoryASet(ds, 0xa114, 0x08);
    memoryASet(ds, 0xa115, 0x08);
    memoryASet(ds, 0xa116, 0x04);
    memoryASet(ds, 0xa117, 0x04);
    memoryASet(ds, 0xa118, 0x02);
    memoryASet(ds, 0xa119, 0x02);
    memoryASet(ds, 0xa11a, 0x02);
    memoryASet(ds, 0xa11b, 0x02);
    memoryASet(ds, 0xa11c, 0x02);
    memoryASet(ds, 0xa11d, 0x02);
    memoryASet(ds, 0xa11e, 0x02);
    memoryASet(ds, 0xa11f, 0x02);
    memoryASet(ds, 0xa120, 0x04);
    memoryASet(ds, 0xa121, 0x04);
    memoryASet(ds, 0xa122, 0x08);
    memoryASet(ds, 0xa123, 0x08);
    memoryASet(ds, 0xa124, 0x08);
    memoryASet16(ds, 0x5134, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x02b0, ax);
    memoryASet16(ds, 0x02b2, ax);
    ax = 0;
    memoryASet16(ds, 0x02b4, ax);
    memoryASet16(ds, 0x02b6, ax);
    ax = 0;
    memoryASet16(ds, 0x5234, ax);
    memoryASet16(ds, 0x5236, ax);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2ba1;
loc_2b9e: // 01ed:0cce
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2ba1: // 01ed:0cd1
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 20648, 0x01);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_2b9e;
    memoryASet(ds, 0x50b8, 0x01);
    memoryASet(ds, 0x513e, 0x01);
    memoryASet(ds, 0xa0fb, 0x00);
    memoryASet(ds, 0xa126, 0x00);
    memoryASet(ds, 0x031c, 0x00);
    memoryASet(ds, 0x031d, 0x00);
    memoryASet(ds, 0x3393, 0x00);
    memoryASet(ds, 0x030e, 0x00);
    memoryASet(ds, 0x030f, 0x00);
    memoryASet(ds, 0x0310, 0x00);
    memoryASet(ds, 0x0311, 0x00);
    memoryASet(ds, 0x0312, 0x00);
    memoryASet(ds, 0x0313, 0x00);
    memoryASet(ds, 0x0314, 0x00);
    memoryASet(ds, 0x0315, 0x00);
    memoryASet(ds, 0x0317, 0x00);
    memoryASet(ds, 0x0318, 0x00);
    memoryASet(ds, 0x0319, 0x00);
    memoryASet(ds, 0x031a, 0x00);
    memoryASet(ds, 0x031b, 0x00);
    memoryASet(ds, 0x0316, 0x00);
    memoryASet(ds, 0x5141, 0x00);
    memoryASet(ds, 0x5140, 0x00);
    memoryASet(ds, 0x3391, 0x00);
    memoryASet(ds, 0xa10e, 0x00);
    memoryASet(ds, 0xa100, 0x00);
    memoryASet16(ds, 0xa0bc, 0x0001);
    memoryASet(ds, 0x3394, 0x00);
    memoryASet(ds, 0x338c, 0x00);
    memoryASet(ds, 0x338a, 0x00);
    memoryASet(ds, 0xa0f1, 0x00);
    memoryASet(ds, 0xa0f2, 0x00);
    ax = 0;
    memoryASet16(ds, 0x2b76, ax);
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
    ax = 0;
    memoryASet16(ds, 0x5130, ax);
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x338e, 0x00);
    memoryASet(ds, 0x338f, 0x00);
    memoryASet(ds, 0x0307, 0x00);
    memoryASet(ds, 0x0308, 0x00);
    memoryASet(ds, 0x338b, 0x00);
    memoryASet(ds, 0xa110, 0x00);
    memoryASet(ds, 0x0306, 0x00);
    memoryASet(ds, 0xa0fd, 0x00);
    memoryASet16(ds, 0x5132, 0x0001);
    memoryASet(ds, 0x3390, 0x00);
    ax = 0;
    memoryASet16(ds, 0x02ca, ax);
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    ax = 0;
    memoryASet16(ds, 0x5118, ax);
    ax = 0;
    memoryASet16(ds, 0x5128, ax);
    memoryASet16(ds, 0x2b72, 0xffff);
    memoryASet16(ds, 0xa0c4, 0xffff);
    memoryASet16(ds, 0x509c, 0x0005);
    memoryASet16(ds, 0x509e, 0x0003);
    ax = 0;
    memoryASet16(ds, 0x50a0, ax);
    ax = 0;
    memoryASet16(ds, 0x50a5, ax);
    memoryASet16(ds, 0x50a7, ax);
    ax = 0;
    memoryASet16(ds, 0x50a2, ax);
    memoryASet(ds, 0x50a4, 0x00);
    memoryASet16(ds, 0x50be, 0x0005);
    ax = 0;
    memoryASet16(ds, 0x50c2, ax);
    ax = 0;
    memoryASet16(ds, 0x50c7, ax);
    memoryASet16(ds, 0x50c9, ax);
    ax = 0;
    memoryASet16(ds, 0x50c4, ax);
    memoryASet16(ds, 0x50c0, 0x0003);
    memoryASet(ds, 0x50c6, 0x00);
    memoryASet16(ds, 0xa0ea, 0xffff);
    memoryASet(ds, 0x3392, 0x00);
    memoryASet(ds, 0x513c, 0x01);
    ax = 0;
    memoryASet16(ds, 0x02f8, ax);
    memoryASet(ds, 0x5142, 0x00);
    memoryASet(ds, 0x513d, 0x00);
    memoryASet(ds, 0x0309, 0x00);
    memoryASet(ds, 0x030a, 0x00);
    memoryASet(ds, 0xa0f8, 0x00);
    memoryASet(ds, 0xa0f5, 0x00);
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    memoryASet16(ds, 0x02e0, 0x0014);
    ax = 0;
    memoryASet16(ds, 0xa0cc, ax);
    memoryASet(ds, 0xa0f6, 0x00);
    memoryASet(ds, 0xa0f7, 0x00);
    ax = 0;
    memoryASet16(ds, 0x510a, ax);
    ax = 0;
    memoryASet16(ds, 0xa0ce, ax);
    memoryASet(ds, 0xa10b, 0x00);
    memoryASet16(ds, 0xa0d0, 0xffff);
    memoryASet16(ds, 0xa0d2, 0xffff);
    memoryASet(ds, 0x030b, 0x00);
    memoryASet(ds, 0x030c, 0x00);
    memoryASet(ds, 0xa0f3, 0x01);
    ax = 0;
    memoryASet16(ds, 0x512c, ax);
    memoryASet(ds, 0xa101, 0x01);
    memoryASet(ds, 0xa102, 0x01);
    memoryASet(ds, 0xa103, 0x01);
    memoryASet(ds, 0xa105, 0x01);
    memoryASet(ds, 0xa107, 0x01);
    memoryASet(ds, 0xa106, 0x01);
    memoryASet(ds, 0xa104, 0x01);
    memoryASet(ds, 0xa108, 0x01);
    memoryASet(ds, 0xa109, 0x01);
    memoryASet(ds, 0x3388, 0x00);
    memoryASet(ds, 0x3396, 0x00);
    memoryASet(ds, 0x3389, 0x00);
    ax = 0;
    memoryASet16(ds, 0x50a5, ax);
    memoryASet16(ds, 0x50a7, ax);
    ax = 0;
    memoryASet16(ds, 0x50c7, ax);
    memoryASet16(ds, 0x50c9, ax);
    memoryASet16(ds, 0x02dc, 0x000d);
    memoryASet16(ds, 0x02de, 0x0001);
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
    ax = 0;
    memoryASet16(ds, 0x02c6, ax);
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
    ax = 0;
    memoryASet16(ds, 0x02bc, ax);
    ax = 0;
    memoryASet16(ds, 0x2b5c, ax);
    ax = 0;
    memoryASet16(ds, 0x02ba, ax);
    ax = 0;
    memoryASet16(ds, 0xa0ec, ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x01ed);
    sub_2a7f();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_2e08() // 01ed:0f38 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x512e);
    ax -= memoryAGet16(ss, bp + 10);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    if ((short)ax < (short)cx)
        goto loc_2e82;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x0140;
    ax += memoryAGet16(ss, bp + 10);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    if ((short)ax > (short)cx)
        goto loc_2e82;
    ax = memoryAGet16(ds, 0x5130);
    ax -= memoryAGet16(ss, bp + 10);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    if ((short)ax < (short)cx)
        goto loc_2e82;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x00c8;
    ax += memoryAGet16(ss, bp + 10);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    if ((short)ax > (short)cx)
        goto loc_2e82;
    memoryASet(ss, bp - 1, 0x01);
    goto loc_2e86;
loc_2e82: // 01ed:0fb2
    memoryASet(ss, bp - 1, 0x00);
loc_2e86: // 01ed:0fb6
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 8;
}
void sub_2f07() // 01ed:1037 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0106;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 258;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    memoryASet(ss, bp - 1, 0x01);
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fbf;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_2f3b;
    goto loc_3000;
loc_2f3b: // 01ed:106b
    memoryASet16(ds, 0x02e4, memoryAGet16(ds, 0x02e4) + 1);
    di = memoryAGet16(ds, 0x02e4);
    if (memoryAGet(ds, di + 20648) == 0x00)
        goto loc_2fa6;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02e4));
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20620, ax);
    goto loc_2ffd;
loc_2fa6: // 01ed:10d6
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
loc_2ffd: // 01ed:112d
    goto loc_43a3;
loc_3000: // 01ed:1130
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fc1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3079;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x02f0, memoryAGet16(ds, 0x02f0) + 1);
    di = memoryAGet16(ds, 0x02f0);
    di <<= 1;
    push(memoryAGet16(ds, di + 760));
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20620, ax);
    goto loc_43a3;
loc_3079: // 01ed:11a9
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fc3;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_30d9;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_30a3;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_30a3;
    memoryASet(ss, bp - 261, 0x01);
loc_30a3: // 01ed:11d3
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    push(memoryAGet16(ds, 0x02cc));
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_30ca;
    al = 0x00;
    goto loc_30cc;
loc_30ca: // 01ed:11fa
    al = 0x01;
loc_30cc: // 01ed:11fc
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_30d9: // 01ed:1209
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fc5;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_313a;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_3103;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_3103;
    memoryASet(ss, bp - 261, 0x01);
loc_3103: // 01ed:1233
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_312b;
    al = 0x00;
    goto loc_312d;
loc_312b: // 01ed:125b
    al = 0x01;
loc_312d: // 01ed:125d
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_313a: // 01ed:126a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fc7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_319d;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_3164;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_3164;
    memoryASet(ss, bp - 261, 0x01);
loc_3164: // 01ed:1294
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_318e;
    al = 0x00;
    goto loc_3190;
loc_318e: // 01ed:12be
    al = 0x01;
loc_3190: // 01ed:12c0
    push(ax);
    al = memoryAGet(ss, bp - 261);
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_319d: // 01ed:12cd
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fc9;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_31fe;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_31c7;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_31c7;
    memoryASet(ss, bp - 261, 0x01);
loc_31c7: // 01ed:12f7
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_31f1;
    al = 0x00;
    goto loc_31f3;
loc_31f1: // 01ed:1321
    al = 0x01;
loc_31f3: // 01ed:1323
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_31fe: // 01ed:132e
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fcb;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_325f;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_3228;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_3228;
    memoryASet(ss, bp - 261, 0x01);
loc_3228: // 01ed:1358
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_3252;
    al = 0x00;
    goto loc_3254;
loc_3252: // 01ed:1382
    al = 0x01;
loc_3254: // 01ed:1384
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_325f: // 01ed:138f
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fcd;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_32c0;
    memoryASet(ss, bp - 261, 0x00);
    if (memoryAGet16(ds, 0x02ce) != 0x0016)
        goto loc_3289;
    if (memoryAGet16(ds, 0x02cc) != 0x000d)
        goto loc_3289;
    memoryASet(ss, bp - 261, 0x01);
loc_3289: // 01ed:13b9
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    if (memoryAGet(ss, bp - 261) == 0x00)
        goto loc_32b3;
    al = 0x00;
    goto loc_32b5;
loc_32b3: // 01ed:13e3
    al = 0x01;
loc_32b5: // 01ed:13e5
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_32c0: // 01ed:13f0
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fcf;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_32fe;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_32fe: // 01ed:142e
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fd1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_333c;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_333c: // 01ed:146c
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fd3;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_337a;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02ce));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02cc);
    ax += 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_337a: // 01ed:14aa
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fd5;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_33b5;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_33b5: // 01ed:14e5
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fd7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_33f0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_33f0: // 01ed:1520
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fd9;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_342b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_342b: // 01ed:155b
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fdb;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3466;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3466: // 01ed:1596
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fdd;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_34a1;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x02dc));
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_34a1: // 01ed:15d1
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fdf;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_34dc;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0023;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_34dc: // 01ed:160c
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fe1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3517;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0031;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3517: // 01ed:1647
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fe3;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3552;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0032;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3552: // 01ed:1682
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fe5;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_358d;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_358d: // 01ed:16bd
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fe7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_35cc;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) + 1);
    goto loc_43a3;
loc_35cc: // 01ed:16fc
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fe9;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_360b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) + 1);
    goto loc_43a3;
loc_360b: // 01ed:173b
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0feb;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_364a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0003;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) + 1);
    goto loc_43a3;
loc_364a: // 01ed:177a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fed;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3689;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) + 1);
    goto loc_43a3;
loc_3689: // 01ed:17b9
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fef;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_36c4;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_36c4: // 01ed:17f4
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ff1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_36ff;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001f;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_36ff: // 01ed:182f
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ff3;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_376a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0023;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_43a3;
loc_376a: // 01ed:189a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ff5;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_37d5;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0024;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_43a3;
loc_37d5: // 01ed:1905
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ff7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_37ea;
    goto loc_43a3;
loc_37ea: // 01ed:191a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ff9;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3850;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d2));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    push(memoryAGet16(ds, 0x02d0));
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d2));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d0);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3850: // 01ed:1980
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ffb;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_38b7;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d2));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d0);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d2));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d0);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_38b7: // 01ed:19e7
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0ffd;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_391d;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    push(memoryAGet16(ds, 0x02d4));
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_391d: // 01ed:1a4d
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x0fff;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3984;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3984: // 01ed:1ab4
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1001;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_39bf;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0014;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    push(memoryAGet16(ds, 0x02d8));
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_39bf: // 01ed:1aef
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1003;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_39fa;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_39fa: // 01ed:1b2a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1005;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3a35;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0026;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3a35: // 01ed:1b65
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1007;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3a70;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0027;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3a70: // 01ed:1ba0
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1009;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3aab;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0028;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3aab: // 01ed:1bdb
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x100b;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3b16;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0014;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20636, 0x01);
    goto loc_43a3;
loc_3b16: // 01ed:1c46
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x100d;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_3b2b;
    goto loc_3bce;
loc_3b2b: // 01ed:1c5b
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ss, bp + 4);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 4);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3bce: // 01ed:1cfe
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x100f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3c31;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ss, bp + 4);
    ax--;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0020;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3c31: // 01ed:1d61
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1011;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3c94;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ss, bp + 4);
    ax--;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0018;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3c94: // 01ed:1dc4
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1013;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3cf7;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ss, bp + 4);
    ax--;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3cf7: // 01ed:1e27
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1015;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3d5a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ss, bp + 4);
    ax--;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3d5a: // 01ed:1e8a
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1017;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3d95;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3d95: // 01ed:1ec5
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1019;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3dd0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3dd0: // 01ed:1f00
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x101b;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3e0b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3e0b: // 01ed:1f3b
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x101d;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3e46;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0026;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3e46: // 01ed:1f76
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x101f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3ea9;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3ea9: // 01ed:1fd9
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1021;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_3ebe;
    goto loc_3f63;
loc_3ebe: // 01ed:1fee
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3f63: // 01ed:2093
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1023;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_3f9e;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_3f9e: // 01ed:20ce
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1025;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4009;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0032;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_43a3;
loc_4009: // 01ed:2139
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1027;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4074;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_43a3;
loc_4074: // 01ed:21a4
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1029;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_40df;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_43a3;
loc_40df: // 01ed:220f
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x102b;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4142;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001f;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_4142: // 01ed:2272
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x102d;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_41a5;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001f;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_41a5: // 01ed:22d5
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x102f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4208;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0021;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0023;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_4208: // 01ed:2338
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1031;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_426b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0023;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_426b: // 01ed:239b
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1033;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_4280;
    goto loc_4305;
loc_4280: // 01ed:23b0
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    push(memoryAGet16(ds, 0x02d4));
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xff9e);
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_4305: // 01ed:2435
    di = bp - 258;
    push(ss);
    push(di);
    di = 0x1035;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_431a;
    goto loc_439f;
loc_431a: // 01ed:244a
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 4);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xff9e);
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 4));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_43a3;
loc_439f: // 01ed:24cf
    memoryASet(ss, bp - 1, 0x00);
loc_43a3: // 01ed:24d3
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 8;
}
void sub_44c0() // 01ed:25f0 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0304;
    di = memoryAGet16(ss, bp + 4); es = memoryAGet16(ss, bp + 4 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    ax = 0;
    memoryASet16(ss, bp - 258, ax);
    goto loc_44e7;
loc_44e3: // 01ed:2613
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_44e7: // 01ed:2617
    di = bp - 772;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x01ed);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    memoryASet(ds, 0xa10a, 0x00);
    ax = 0;
    memoryASet16(ds, 0x02f6, ax);
    di = bp - 516;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    sub_2f07();
    if (!al)
        goto loc_4532;
    goto loc_8cd5;
loc_4532: // 01ed:2662
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24dc;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_459e;
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
    if ((short)memoryAGet16(ds, 0x02f4) <= (short)0x0000)
        goto loc_4572;
    push(memoryAGet16(ds, 0x02f4));
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 260, ax);
    if (memoryAGet16(ss, bp - 260) != 0x0002)
        goto loc_4572;
    push(memoryAGet16(ds, 0x02f4));
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 260, ax);
loc_4572: // 01ed:26a2
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ds, 0x5122);
    ax += memoryAGet16(ss, bp - 260);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_459e: // 01ed:26ce
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24de;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_45d8;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_45d8: // 01ed:2708
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_465d;
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 260, ax);
    ax = memoryAGet16(ss, bp - 260);
    if (ax != 0x0004)
        goto loc_4627;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_465a;
loc_4627: // 01ed:2757
    if ((short)ax < (short)0x0000)
        goto loc_465a;
    if ((short)ax > (short)0x0003)
        goto loc_465a;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x5122);
    ax += memoryAGet16(ss, bp - 260);
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
loc_465a: // 01ed:278a
    goto loc_8cd5;
loc_465d: // 01ed:278d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_4684;
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_4684;
    goto loc_4778;
loc_4684: // 01ed:27b4
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_46a2;
    memoryASet16(ss, bp - 260, 0x0001);
    goto loc_46a8;
loc_46a2: // 01ed:27d2
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
loc_46a8: // 01ed:27d8
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001e;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 260));
    ax = 0x000b;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 260);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6458;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001d;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_4778: // 01ed:28a8
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_479f;
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_479f;
    goto loc_4893;
loc_479f: // 01ed:28cf
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24e8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_47bd;
    memoryASet16(ss, bp - 260, 0x0001);
    goto loc_47c3;
loc_47bd: // 01ed:28ed
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
loc_47c3: // 01ed:28f3
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001e;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 260));
    ax = 0x000a;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 260);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6458;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001d;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_4893: // 01ed:29c3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24ea;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_48ba;
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24ec;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_48ba;
    goto loc_49ae;
loc_48ba: // 01ed:29ea
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24ea;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_48d8;
    memoryASet16(ss, bp - 260, 0x0001);
    goto loc_48de;
loc_48d8: // 01ed:2a08
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
loc_48de: // 01ed:2a0e
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0028;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 260));
    ax = 0x000b;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 260);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6458;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001d;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_49ae: // 01ed:2ade
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24ee;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_49d5;
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_49d5;
    goto loc_4ac9;
loc_49d5: // 01ed:2b05
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24ee;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_49f3;
    memoryASet16(ss, bp - 260, 0x0001);
    goto loc_49f9;
loc_49f3: // 01ed:2b23
    ax = 0;
    memoryASet16(ss, bp - 260, ax);
loc_49f9: // 01ed:2b29
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0028;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 260));
    ax = 0x000a;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 260);
    ax <<= 1;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6458;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001d;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_4ac9: // 01ed:2bf9
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_4ade;
    goto loc_6212;
loc_4ade: // 01ed:2c0e
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
    di = bp - 772;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x01ed);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4b71;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0029;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4b71: // 01ed:2ca1
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4bd6;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4bd6: // 01ed:2d06
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4c3b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4c3b: // 01ed:2d6b
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24fa;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4ca0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4ca0: // 01ed:2dd0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24fc;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4d05;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4d05: // 01ed:2e35
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24fe;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4d93;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4d93: // 01ed:2ec3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2500;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4df8;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4df8: // 01ed:2f28
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2502;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4e5d;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0013;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4e5d: // 01ed:2f8d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2504;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4ec2;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002a;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4ec2: // 01ed:2ff2
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2506;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4f25;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4f25: // 01ed:3055
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2508;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_4f88;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x002b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_4f88: // 01ed:30b8
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x250a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_4f9d;
    goto loc_5044;
loc_4f9d: // 01ed:30cd
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0031;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0032;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5044: // 01ed:3174
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x250c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5059;
    goto loc_50fe;
loc_5059: // 01ed:3189
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0027;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0026;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_50fe: // 01ed:322e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x250e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5113;
    goto loc_51ba;
loc_5113: // 01ed:3243
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0021;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0022;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0026;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_51ba: // 01ed:32ea
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2510;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_51cf;
    goto loc_5276;
loc_51cf: // 01ed:32ff
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5276: // 01ed:33a6
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2512;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_528b;
    goto loc_5332;
loc_528b: // 01ed:33bb
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0023;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0024;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0027;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5332: // 01ed:3462
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2514;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5347;
    goto loc_54ed;
loc_5347: // 01ed:3477
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0023;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0024;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0029;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002d;
    push(ax);
    ax = 0x0032;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002e;
    push(ax);
    ax = 0x0031;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    di = memoryAGet16(ds, 0x5258); es = memoryAGet16(ds, 0x5258 + 2); /*ggg2*/;
    di += 0x1e03;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0002;
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
    di = memoryAGet16(ds, 0x5258); es = memoryAGet16(ds, 0x5258 + 2); /*ggg2*/;
    di += 0x1ea3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0002;
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
    goto loc_620f;
loc_54ed: // 01ed:361d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2516;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5502;
    goto loc_55c0;
loc_5502: // 01ed:3632
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0012;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2f83;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_620f;
loc_55c0: // 01ed:36f0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2518;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_55d5;
    goto loc_567c;
loc_55d5: // 01ed:3705
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0026;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0027;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0028;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_567c: // 01ed:37ac
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x251a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5691;
    goto loc_5738;
loc_5691: // 01ed:37c1
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0026;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0029;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5738: // 01ed:3868
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x251c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_574d;
    goto loc_57f4;
loc_574d: // 01ed:387d
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_57f4: // 01ed:3924
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x251e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5809;
    goto loc_5904;
loc_5809: // 01ed:3939
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5904: // 01ed:3a34
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2520;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5919;
    goto loc_5a6c;
loc_5919: // 01ed:3a49
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5a6c: // 01ed:3b9c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2522;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5a81;
    goto loc_5b28;
loc_5a81: // 01ed:3bb1
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5b28: // 01ed:3c58
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2522;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5b3d;
    goto loc_5be4;
loc_5b3d: // 01ed:3c6d
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5be4: // 01ed:3d14
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2524;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5bf9;
    goto loc_5ca0;
loc_5bf9: // 01ed:3d29
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5ca0: // 01ed:3dd0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2526;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_5d05;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5d05: // 01ed:3e35
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2528;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_5d6a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0016;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_620f;
loc_5d6a: // 01ed:3e9a
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x252a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5d7f;
    goto loc_5ed1;
loc_5d7f: // 01ed:3eaf
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    memoryASet(ds, 0xa10a, 0x01);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0032;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0031;
    push(ax);
    ax = 0x0031;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet(ds, 0xa10a, 0x00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0030;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5855;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0005);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0005);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0005);
    goto loc_620f;
loc_5ed1: // 01ed:4001
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x252c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_5ee6;
    goto loc_603a;
loc_5ee6: // 01ed:4016
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0036;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x03e7;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0003);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0035;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5c8f;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0003);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x03e7;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0002);
    memoryASet(ds, 0xa0f0, 0x01);
    memoryASet(ds, 0xa0fa, 0x01);
    goto loc_620f;
loc_603a: // 01ed:416a
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x252e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_604f;
    goto loc_61ad;
loc_604f: // 01ed:417f
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0033;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6232;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0033;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6232;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0033;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6232;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0033;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax += 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x002b;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6232;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_620f;
loc_61ad: // 01ed:42dd
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2530;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_620f;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
loc_620f: // 01ed:433f
    goto loc_8cd5;
loc_6212: // 01ed:4342
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2532;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6277;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0019;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001a;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6277: // 01ed:43a7
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2534;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_628c;
    goto loc_6354;
loc_628c: // 01ed:43bc
    ax = memoryAGet16(ss, bp - 258);
    memoryASet16(ds, 0xa0e0, ax);
    ax = memoryAGet16(ss, bp + 8);
    memoryASet16(ds, 0xa0e2, ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0015;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0011;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001f;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4a4b;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_6354: // 01ed:4484
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2536;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6390;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6390: // 01ed:44c0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x250c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_63f5;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_63f5: // 01ed:4525
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2538;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6466;
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x02d6));
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = memoryAGet16(ds, 0x02d4);
    ax += 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xff9e);
    goto loc_8cd5;
loc_6466: // 01ed:4596
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x253a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_647b;
    goto loc_6522;
loc_647b: // 01ed:45ab
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0012;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0012;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0012;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0012;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6522: // 01ed:4652
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x253c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_655e;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0011;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_655e: // 01ed:468e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x253e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_659a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0015;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_659a: // 01ed:46ca
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2540;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_65d6;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0013;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_65d6: // 01ed:4706
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2542;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_664a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    memoryASet16(ds, 0xa0d4, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    memoryASet16(ds, 0xa0d6, ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_664a: // 01ed:477a
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2544;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_66be;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    memoryASet16(ds, 0xa0d8, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    memoryASet16(ds, 0xa0da, ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_66be: // 01ed:47ee
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2546;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6732;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    memoryASet16(ds, 0xa0dc, ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    memoryASet16(ds, 0xa0de, ax);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6732: // 01ed:4862
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2548;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6773;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet(ds, 0xa0f3, 0x00);
    goto loc_8cd5;
loc_6773: // 01ed:48a3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x254a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_67af;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000d;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0032;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_67af: // 01ed:48df
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x254c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_67eb;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_67eb: // 01ed:491b
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x254e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_683b;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x002c;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4a82;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_683b: // 01ed:496b
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2550;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6877;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0031;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6877: // 01ed:49a7
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2552;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_68b3;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002d;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_68b3: // 01ed:49e3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2554;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_68ef;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002e;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_68ef: // 01ed:4a1f
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2556;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_695b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xff9d);
    goto loc_8cd5;
loc_695b: // 01ed:4a8b
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2558;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6997;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0031;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6997: // 01ed:4ac7
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x255a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_69d3;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_69d3: // 01ed:4b03
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x255c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6a38;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0007;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6a38: // 01ed:4b68
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x255e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6a74;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6a74: // 01ed:4ba4
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2560;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6ab0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0027;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6ab0: // 01ed:4be0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2562;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6aec;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0028;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6aec: // 01ed:4c1c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2564;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6b28;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6b28: // 01ed:4c58
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2566;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6b64;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6b64: // 01ed:4c94
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2568;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6ba0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0029;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6ba0: // 01ed:4cd0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x256a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6bdc;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6bdc: // 01ed:4d0c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x256c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6c18;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6c18: // 01ed:4d48
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x256e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6c54;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0030;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6c54: // 01ed:4d84
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2570;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6cb9;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0008;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6cb9: // 01ed:4de9
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2572;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6d1e;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0010;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6d1e: // 01ed:4e4e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2574;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6d5c;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0025;
    push(ax);
    ax = 0x0028;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6d5c: // 01ed:4e8c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2576;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6d98;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002b;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6d98: // 01ed:4ec8
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2578;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6dd4;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6dd4: // 01ed:4f04
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x257a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6e40;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xffa0);
    goto loc_8cd5;
loc_6e40: // 01ed:4f70
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x257c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6e7c;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0023;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6e7c: // 01ed:4fac
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x257e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6eb8;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0021;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6eb8: // 01ed:4fe8
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2580;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6ef4;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0010;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6ef4: // 01ed:5024
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2582;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6f66;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0026;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6afa;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17920, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_6f66: // 01ed:5096
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2584;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6fa2;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0007;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6fa2: // 01ed:50d2
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2586;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_6fde;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002c;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_6fde: // 01ed:510e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2588;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_701a;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_701a: // 01ed:514a
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x258a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7056;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x002b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7056: // 01ed:5186
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x258c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_70a6;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x003c;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x0028;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3f13;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_70a6: // 01ed:51d6
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x258e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7118;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x003b;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6d31;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17920, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_7118: // 01ed:5248
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2590;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_718a;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0027;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6d31;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17920, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_718a: // 01ed:52ba
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2592;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7205;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0020;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x02f0, memoryAGet16(ds, 0x02f0) + 1);
    di = memoryAGet16(ds, 0x02f0);
    di <<= 1;
    push(memoryAGet16(ds, di + 760));
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20620, ax);
    goto loc_8cd5;
loc_7205: // 01ed:5335
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2594;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7241;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7241: // 01ed:5371
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2596;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_727d;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000b;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x01;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_727d: // 01ed:53ad
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2598;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_72de;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0020;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6ff6;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_72de: // 01ed:540e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x259a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7340;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0021;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x70e4;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_7340: // 01ed:5470
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x259c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_7355;
    goto loc_73fc;
loc_7355: // 01ed:5485
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_73fc: // 01ed:552c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x259e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7438;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0031;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7438: // 01ed:5568
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25a0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7474;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002d;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7474: // 01ed:55a4
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25a2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_74b0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002e;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_74b0: // 01ed:55e0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25a4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_74ec;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x002f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_74ec: // 01ed:561c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25a6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7528;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0030;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7528: // 01ed:5658
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25a8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7564;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0031;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7564: // 01ed:5694
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25aa;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_75a0;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0032;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_75a0: // 01ed:56d0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ac;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7605;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0003;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7605: // 01ed:5735
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ae;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_761a;
    goto loc_76b9;
loc_761a: // 01ed:574a
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x002f;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x55ec;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0005);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x002f;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0005);
    goto loc_8cd5;
loc_76b9: // 01ed:57e9
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25b0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_76ce;
    goto loc_77d3;
loc_76ce: // 01ed:57fe
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002e;
    push(ax);
    ax = 0x002e;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x003a;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0032;
    push(ax);
    ax = 0x0032;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0039;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4fd4;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0003);
    goto loc_8cd5;
loc_77d3: // 01ed:5903
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25b2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_780f;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_780f: // 01ed:593f
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25b4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_784b;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_784b: // 01ed:597b
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25b6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_78b8;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0021;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_8cd5;
loc_78b8: // 01ed:59e8
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25b8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7925;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0022;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_8cd5;
loc_7925: // 01ed:5a55
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ba;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_793a;
    goto loc_79e1;
loc_793a: // 01ed:5a6a
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0015;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x0012;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0016;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_79e1: // 01ed:5b11
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25bc;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7a1d;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7a1d: // 01ed:5b4d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25be;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7a59;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7a59: // 01ed:5b89
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25c0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7a95;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000c;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0024;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x01;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7a95: // 01ed:5bc5
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25c2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7b02;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0031;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_8cd5;
loc_7b02: // 01ed:5c32
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25c4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7b6f;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x0032;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_8cd5;
loc_7b6f: // 01ed:5c9f
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25c6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7bdc;
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0x001b;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 258);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20639, 0x01);
    goto loc_8cd5;
loc_7bdc: // 01ed:5d0c
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25c8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7c48;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0005;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    ax += 0x0032;
    push(ax);
    ax = 0x298a;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0002);
    goto loc_8cd5;
loc_7c48: // 01ed:5d78
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ca;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7c9a;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0017;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x001d;
    push(ax);
    ax = 0x001d;
    push(ax);
    ax = 0x0013;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4ad3;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_7c9a: // 01ed:5dca
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25cc;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_7caf;
    goto loc_7d6d;
loc_7caf: // 01ed:5ddf
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0018;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x323c;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0019;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x32f6;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_7d6d: // 01ed:5e9d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ce;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_7d82;
    goto loc_7e51;
loc_7d82: // 01ed:5eb2
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001a;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3416;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0003);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001b;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0017;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_8cd5;
loc_7e51: // 01ed:5f81
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25d0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7eb3;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0006;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2acf;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_7eb3: // 01ed:5fe3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2522;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7f05;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0023;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4145;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_7f05: // 01ed:6035
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25d2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7f80;
    ax = 0;
    push(ax);
    ax = 0x0024;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3e70;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet16(ds, 0x45e2, 0x7d00);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x0012;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x000f;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    goto loc_8cd5;
loc_7f80: // 01ed:60b0
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x250e;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_7ff2;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0007;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x02de));
    push(memoryAGet16(ds, 0x02dc));
    ax = 0x000c;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2bd4;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_7ff2: // 01ed:6122
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2502;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_8064;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000d;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0023;
    push(ax);
    ax = 0x0023;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2d37;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_8064: // 01ed:6194
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25d4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_8079;
    goto loc_825e;
loc_8079: // 01ed:61a9
    memoryASet(ds, 0xa10a, 0x01);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0016;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x000b;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x36b0;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x0019;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    push(memoryAGet16(ds, 0x02b8));
    ax = 0x000a;
    push(ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    push(memoryAGet16(ds, 0x5122));
    ax = 0x001a;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax++;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0010;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_825e: // 01ed:638e
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25d6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_8273;
    goto loc_82f6;
loc_8273: // 01ed:63a3
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000f;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3904;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_82f6: // 01ed:6426
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x252c;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_8367;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001c;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x001c;
    push(ax);
    ax = 0x001c;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3a2e;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_8367: // 01ed:6497
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x252a;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_83d8;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x001c;
    push(ax);
    ax = 0x000e;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3a2e;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_83d8: // 01ed:6508
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25d8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_8439;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0015;
    push(ax);
    ax = 0x000a;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3be8;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_8439: // 01ed:6569
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25da;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_844e;
    goto loc_84ea;
loc_844e: // 01ed:657e
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0022;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3d23;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_84ea: // 01ed:661a
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2510;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_84ff;
    goto loc_859b;
loc_84ff: // 01ed:662f
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0034;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x002f;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2176;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0008;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    ax = 0x0021;
    push(ax);
    ax = 0x0019;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fc2;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_859b: // 01ed:66cb
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x2530;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_85fd;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0020;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6ff6;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_85fd: // 01ed:672d
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25dc;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_865f;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0021;
    push(ax);
    ax = 0x000d;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x70e4;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_865f: // 01ed:678f
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25de;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_86c1;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0013;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6afa;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_86c1: // 01ed:67f1
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25e0;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_8723;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0014;
    push(ax);
    ax = 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6d31;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    goto loc_8cd5;
loc_8723: // 01ed:6853
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25e2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_878f;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0009;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0009;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    ax += 0x0032;
    push(ax);
    ax = 0x47b9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0002);
    goto loc_8cd5;
loc_878f: // 01ed:68bf
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25e4;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_87e1;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000a;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x48fe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_87e1: // 01ed:6911
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x24f6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_87f6;
    goto loc_8892;
loc_87f6: // 01ed:6926
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0037;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x0027;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x52e7;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000b;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0x000a;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x4c92;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8cd5;
loc_8892: // 01ed:69c2
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25e6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_88a7;
    goto loc_8943;
loc_88a7: // 01ed:69d7
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0031;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x0022;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x5bbe;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000c;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x62f2;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0002);
    goto loc_8cd5;
loc_8943: // 01ed:6a73
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25e8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_89a3;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0029;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x3f6c;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_89a3: // 01ed:6ad3
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ea;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_89b8;
    goto loc_8b0f;
loc_89b8: // 01ed:6ae8
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
    di = bp - 772;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    ax++;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x01ed);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ec;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (!flags.zero)
        goto loc_8a72;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0010;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x403a;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x002d;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8aeb;
loc_8a72: // 01ed:6ba2
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0010;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x403a;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 8));
    ax = 0xffff;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x001e;
    push(ax);
    ax = 0x001e;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
loc_8aeb: // 01ed:6c1b
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    goto loc_8cd5;
loc_8b0f: // 01ed:6c3f
    di = bp - 516;
    push(ss);
    push(di);
    di = 0x25ee;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x01ed);
    if (flags.zero)
        goto loc_8b24;
    goto loc_8cd5;
loc_8b24: // 01ed:6c54
    if (memoryAGet16(ds, 0xa0be) != 0x0000)
        goto loc_8b35;
    if (memoryAGet16(ds, 0x2b72) == 0xffff)
        goto loc_8b35;
    goto loc_8c24;
loc_8b35: // 01ed:6c65
    if ((short)memoryAGet16(ds, 0xa0be) >= (short)0x0000)
        goto loc_8b77;
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000b;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    goto loc_8bc3;
loc_8b77: // 01ed:6ca7
    memoryASet16(ss, bp - 260, 0x0006);
    if (memoryAGet16(ds, 0x5132) != 0xffff)
        goto loc_8b8a;
    memoryASet16(ss, bp - 260, 0x0008);
loc_8b8a: // 01ed:6cba
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(memoryAGet16(ss, bp - 260));
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
loc_8bc3: // 01ed:6cf3
    ax = memoryAGet16(ss, bp - 258);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x00a0;
    memoryASet16(ds, 0x512e, ax);
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0000)
        goto loc_8bde;
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
loc_8bde: // 01ed:6d0e
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0140)
        goto loc_8bec;
    memoryASet16(ds, 0x512e, 0x0140);
loc_8bec: // 01ed:6d1c
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x0064;
    memoryASet16(ds, 0x5130, ax);
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x0010)
        goto loc_8c07;
    memoryASet16(ds, 0x5130, 0x0010);
loc_8c07: // 01ed:6d37
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x00c8)
        goto loc_8c15;
    memoryASet16(ds, 0x5130, 0x00c8);
loc_8c15: // 01ed:6d45
    push(memoryAGet16(ds, 0x512e));
    push(memoryAGet16(ds, 0x5130));
    push(cs); cs = 0x2aa3; sub_2ab4f(); assert(cs == 0x01ed);
    goto loc_8c49;
loc_8c24: // 01ed:6d54
    push(memoryAGet16(ds, 0x02b8));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ds, 0x5122));
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    al = 0x00;
    push(ax);
    al = 0x00;
    push(ax);
    push(cs);
    sub_1f29();
loc_8c49: // 01ed:6d79
    if (memoryAGet(ds, 0x030b) != 0x00)
        goto loc_8c53;
    goto loc_8cd5;
loc_8c53: // 01ed:6d83
    memoryASet16(ds, 0x02f2, 0x0004);
    memoryASet(ds, 0xa10a, 0x01);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x02f2));
    ax = 0x0004;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x2e25;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
loc_8cd5: // 01ed:6e05
    if (memoryAGet16(ds, 0xa0be) == 0x0000)
        goto loc_8cdf;
    goto loc_8da0;
loc_8cdf: // 01ed:6e0f
    ax = memoryAGet16(ds, 0x2b72);
    if (ax == memoryAGet16(ss, bp - 258))
        goto loc_8ceb;
    goto loc_8da0;
loc_8ceb: // 01ed:6e1b
    ax = memoryAGet16(ds, 0x2b74);
    if (ax == memoryAGet16(ss, bp + 8))
        goto loc_8cf6;
    goto loc_8da0;
loc_8cf6: // 01ed:6e26
    ax = memoryAGet16(ds, 0x2b72);
    memoryASet16(ss, bp - 258, ax);
    ax = memoryAGet16(ds, 0x2b74);
    memoryASet16(ss, bp + 8, ax);
    memoryASet(ds, 0xa10a, 0x01);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(memoryAGet16(ss, bp - 258));
    push(memoryAGet16(ss, bp + 8));
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x000c;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x1fb9;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ss, bp - 258);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x00a0;
    memoryASet16(ds, 0x512e, ax);
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0000)
        goto loc_8d5c;
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
loc_8d5c: // 01ed:6e8c
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0140)
        goto loc_8d6a;
    memoryASet16(ds, 0x512e, 0x0140);
loc_8d6a: // 01ed:6e9a
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    ax -= 0x0064;
    memoryASet16(ds, 0x5130, ax);
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x0010)
        goto loc_8d85;
    memoryASet16(ds, 0x5130, 0x0010);
loc_8d85: // 01ed:6eb5
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x00c8)
        goto loc_8d93;
    memoryASet16(ds, 0x5130, 0x00c8);
loc_8d93: // 01ed:6ec3
    push(memoryAGet16(ds, 0x512e));
    push(memoryAGet16(ds, 0x5130));
    push(cs); cs = 0x2aa3; sub_2ab4f(); assert(cs == 0x01ed);
loc_8da0: // 01ed:6ed0
    if (memoryAGet16(ss, bp - 258) == 0x0027)
        goto loc_8daa;
    goto loc_44e3;
loc_8daa: // 01ed:6eda
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 6;
}
void sub_d079() // 01ed:b1a9 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0102;
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ac8d(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x509e, 0x0003);
    ax = 0;
    memoryASet16(ds, 0x460d, ax);
    memoryASet16(ds, 0x5120, 0x0004);
    memoryASet16(ds, 0x02c4, 0x0004);
    goto loc_d0a6;
loc_d0a2: // 01ed:b1d2
    memoryASet16(ds, 0x02c4, memoryAGet16(ds, 0x02c4) + 1);
loc_d0a6: // 01ed:b1d6
    ax = memoryAGet16(ds, 0x02c4);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ds, 0x02c4) != 0x003c)
        goto loc_d0b8;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_d0b8: // 01ed:b1e8
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0001);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, 0xffd7);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17894, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, 0xffd7);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17898, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, 0x0001);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17924, ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    if (memoryAGet16(ds, 0x02c4) == 0x003c)
        goto loc_d191;
    goto loc_d0a2;
loc_d191: // 01ed:b2c1
    push(cs); cs = 0x28b3; sub_2a2b9(); assert(cs == 0x01ed);
    sub_2a7f();
    memoryASet(ds, 0xa0f3, 0x01);
    memoryASet(ds, 0xa100, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0b8, ax);
    ax = 0;
    memoryASet16(ds, 0x512c, ax);
    memoryASet16(ds, 0x50a0, 0x7d00);
    memoryASet(ds, 0xa0ff, 0x00);
    memoryASet(ds, 0x4660, 0x01);
    ax = 0;
    memoryASet16(ds, 0xa0cc, ax);
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    ax = 0;
    memoryASet16(ds, 0x5128, ax);
    memoryASet(ds, 0xa0f5, 0x00);
    ax = 0;
    memoryASet16(ds, 0x02e2, ax);
    ax = 0;
    memoryASet16(ds, 0x02e4, ax);
    memoryASet(ds, 0x0306, 0x00);
    memoryASet(ds, 0xa0f6, 0x00);
    memoryASet(ds, 0x513d, 0x00);
    memoryASet(ds, 0x5142, 0x00);
    ax = 0;
    memoryASet16(ds, 0x02f0, ax);
    memoryASet(ds, 0xa0f9, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0ee, ax);
    memoryASet(ds, 0x030d, 0x00);
    ax = 0;
    memoryASet16(ds, 0x02ca, ax);
    memoryASet16(ds, 0xa0c4, 0xffff);
    ax = 0;
    memoryASet16(ds, 0x02e6, ax);
    ax = 0;
    memoryASet16(ds, 0x02e8, ax);
    ax = 0;
    memoryASet16(ds, 0x02ea, ax);
    ax = 0;
    memoryASet16(ds, 0x02ec, ax);
    ax = 0;
    memoryASet16(ds, 0x02ee, ax);
    ax = 0;
    memoryASet16(ds, 0x02f4, ax);
    if (memoryAGet16(ds, 0x5132) != 0xffff)
        goto loc_d238;
    push(cs); cs = 0x11b2; sub_1d616(); assert(cs == 0x01ed);
loc_d238: // 01ed:b368
    ax = 0;
    memoryASet16(ds, 0x02da, ax);
    memoryASet(ds, 0x030b, 0x00);
    memoryASet16(ds, 0xa0c8, 0x0014);
    memoryASet16(ds, 0xa0c2, 0x000f);
    memoryASet16(ds, 0xa0e4, 0x0014);
    memoryASet16(ds, 0xa0ca, 0x000f);
    memoryASet16(ds, 0xa0ba, 0x0028);
    memoryASet16(ds, 0x50dc, 0x0004);
    memoryASet16(ds, 0x50de, 0x0007);
    memoryASet16(ds, 0x50e0, 0x000e);
    ax = memoryAGet16(ss, bp + 4);
    if (ax == 0xffff)
        goto loc_d27d;
    goto loc_d3d3;
loc_d27d: // 01ed:b3ad
    memoryASet16(ds, 0x02b8, 0x0007);
    memoryASet16(ds, 0x511e, 0x0001);
    memoryASet16(ds, 0x5122, 0x002d);
    memoryASet16(ds, 0x02f4, 0x0006);
    memoryASet(ds, 0x030d, 0x01);
    memoryASet(ds, 0xa126, 0x01);
    memoryASet16(ds, 0xa0cc, 0x0001);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x6f32;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x6f5b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x6f84;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x6fad;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_d3d3: // 01ed:b503
    if (ax == 0xfffe)
        goto loc_d3db;
    goto loc_d52c;
loc_d3db: // 01ed:b50b
    memoryASet16(ds, 0x02b8, 0x0007);
    memoryASet16(ds, 0x511e, 0x0001);
    memoryASet16(ds, 0x5122, 0x002d);
    memoryASet16(ds, 0x02f4, 0x0006);
    memoryASet(ds, 0x030d, 0x01);
    memoryASet16(ds, 0xa0cc, 0x0001);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x6fd6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x6f5b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x6f84;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x6fff;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x7028;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x7051;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x707a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x6f09;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x6fad;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_d52c: // 01ed:b65c
    if (ax == 0x0000)
        goto loc_d534;
    goto loc_d6cb;
loc_d534: // 01ed:b664
    memoryASet16(ds, 0x02b8, 0x0007);
    memoryASet16(ds, 0x511e, 0x0001);
    memoryASet16(ds, 0x5122, 0x002d);
    memoryASet16(ds, 0x02ce, 0x000a);
    memoryASet16(ds, 0x02cc, 0x0001);
    memoryASet16(ds, 0x02d6, 0x0014);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02f4, 0x0006);
    memoryASet(ds, 0x030d, 0x01);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x70a3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x70cc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x70f5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x711e;
    push(cs);
    push(di);
    sub_44c0();
    memoryASet16(ds, 0x511e, 0x0001);
    memoryASet16(ds, 0x02b8, 0x0005);
    memoryASet16(ds, 0x5122, 0x0028);
    ax = 0x0005;
    push(ax);
    di = 0x7147;
    push(cs);
    push(di);
    sub_44c0();
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0001);
    memoryASet16(ds, 0x5122, 0x0015);
    ax = 0;
    memoryASet16(ds, 0x02f4, ax);
    memoryASet(ds, 0x030d, 0x00);
    memoryASet16(ds, 0x02fa, 0x0027);
    ax = 0x0006;
    push(ax);
    di = 0x7170;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x7199;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x71c2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x71eb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x7214;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x723d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x7266;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x728f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x72b8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x72e1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x730a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x7333;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x735c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x7385;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x73ae;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x73d7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x7400;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x7429;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x7452;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_d6cb: // 01ed:b7fb
    if (ax == 0x0001)
        goto loc_d6d3;
    goto loc_d84f;
loc_d6d3: // 01ed:b803
    memoryASet16(ds, 0x511e, 0x0008);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0009);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0021);
    memoryASet16(ds, 0x02d4, 0x0007);
    memoryASet16(ds, 0x02d8, 0x0001);
    memoryASet16(ds, 0x50dc, 0x0001);
    memoryASet16(ds, 0x50de, 0x0002);
    memoryASet16(ds, 0x50e0, 0x000a);
    memoryASet16(ds, 0x02fc, 0x0028);
    memoryASet16(ds, 0x02fa, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x74a4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x74cd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x74f6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x751f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x7548;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x7571;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x759a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x75c3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x75ec;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x7615;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x763e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x7667;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x7690;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x76b9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x76e2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x770b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x7734;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x775d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x7786;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x77af;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x77d8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x7801;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x782a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x7853;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_d84f: // 01ed:b97f
    if (ax == 0x0002)
        goto loc_d857;
    goto loc_d9c1;
loc_d857: // 01ed:b987
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0019);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02d8, 0x0001);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x787c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x78a5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x78ce;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x78f7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x7920;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x7949;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x7972;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x799b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x79c4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x79ed;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x7a16;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x7a3f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x7a68;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x7a91;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x7aba;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x7ae3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x7b0c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x7b35;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x7b5e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x7b87;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x7bb0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x7bd9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x7c02;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x7c2b;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_d9c1: // 01ed:baf1
    if (ax == 0x0003)
        goto loc_d9c9;
    goto loc_db39;
loc_d9c9: // 01ed:baf9
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x000b);
    memoryASet16(ds, 0x5122, 0x001f);
    memoryASet16(ds, 0xa0c8, 0x000a);
    memoryASet16(ds, 0x02ce, 0x0014);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02d8, 0x0003);
    memoryASet16(ds, 0x50dc, 0x0001);
    memoryASet16(ds, 0x50de, 0x0002);
    memoryASet16(ds, 0x50e0, 0x000a);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x7c54;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x7c7d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x7ca6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x7ccf;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x7cf8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x7d21;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x7d4a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x7d73;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x7d9c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x7dc5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x7dee;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x7e17;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x7e40;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x7e69;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x7e92;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x7ebb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x7ee4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x7f0d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x7f36;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x7f5f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x7f88;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x7fb1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x7fda;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x8003;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_db39: // 01ed:bc69
    if (ax == 0x0004)
        goto loc_db41;
    goto loc_dc99;
loc_db41: // 01ed:bc71
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0023);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d8, 0x0001);
    memoryASet16(ds, 0x02fa, 0x0027);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x802c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x8055;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x807e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x80a7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x80d0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x80f9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x8122;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x814b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x8174;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x819d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x81c6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x81ef;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x8218;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x8241;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x826a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x8293;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x82bc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x82e5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x830e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x8337;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x8360;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x8389;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x83b2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x83db;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_dc99: // 01ed:bdc9
    if (ax == 0x0005)
        goto loc_dca1;
    goto loc_de10;
loc_dca1: // 01ed:bdd1
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0010);
    memoryASet16(ds, 0x5122, 0x0003);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x0007);
    memoryASet16(ds, 0x02d8, 0x0002);
    memoryASet(ds, 0x030b, 0x01);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x8404;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x74a4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x842d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x8456;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x847f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x84a8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x84d1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x84fa;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x8523;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x854c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x8575;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x859e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x85c7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x85f0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x8619;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x8642;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x866b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x8694;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x86bd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x86e6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x870f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x8738;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x8761;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x878a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x87b3;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_de10: // 01ed:bf40
    if (ax == 0x0006)
        goto loc_de18;
    goto loc_df7b;
loc_de18: // 01ed:bf48
    memoryASet16(ds, 0x511e, 0x0006);
    memoryASet16(ds, 0x02b8, 0x0010);
    memoryASet16(ds, 0x5122, 0x0019);
    memoryASet16(ds, 0x5132, 0x0001);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02d8, 0x0003);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x87dc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x8805;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x882e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x8857;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x8880;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x88a9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x88d2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x88fb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x8924;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x894d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x8976;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x899f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x89c8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x89f1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x8a1a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x8a43;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x8a6c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x8a95;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x8abe;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x8ae7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x8b10;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x8b39;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x8b62;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x8b8b;
    push(cs);
    push(di);
    sub_44c0();
    push(cs); cs = 0x11b2; sub_1d616(); assert(cs == 0x01ed);
    goto loc_edbc;
loc_df7b: // 01ed:c0ab
    if (ax == 0x0007)
        goto loc_df83;
    goto loc_e0db;
loc_df83: // 01ed:c0b3
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x000b);
    memoryASet16(ds, 0x5122, 0x001d);
    memoryASet16(ds, 0x02ce, 0x0014);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x000a);
    memoryASet16(ds, 0x02d8, 0x0002);
    ax = 0;
    push(ax);
    di = 0x6ee0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x74a4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x8bb4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x8bdd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x8c06;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x8c2f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x8c58;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x8c81;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x8caa;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x8cd3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x8cfc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x8d25;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x8d4e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x8d77;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x8da0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x8dc9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x8df2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x8e1b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x8e44;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x8e6d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x8e96;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x8ebf;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x8ee8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x8f11;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x8f3a;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e0db: // 01ed:c20b
    if (ax == 0x0008)
        goto loc_e0e3;
    goto loc_e259;
loc_e0e3: // 01ed:c213
    memoryASet16(ds, 0x02ce, 0x0017);
    memoryASet16(ds, 0x02cc, 0x000d);
    memoryASet16(ds, 0x02d2, 0x000d);
    memoryASet16(ds, 0x02d0, 0x0005);
    memoryASet16(ds, 0x02d4, 0x000a);
    memoryASet16(ds, 0x02d8, 0x0003);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0029);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x74a4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x8f63;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x8f8c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x8fb5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x8fde;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x9007;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x9030;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x9059;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x9082;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x90ab;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x90d4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x90fd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x9126;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x914f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x9178;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x91a1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x91ca;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x91f3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x921c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x9245;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x926e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x9297;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x92c0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x92e9;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e259: // 01ed:c389
    if (ax == 0x0009)
        goto loc_e261;
    goto loc_e3b9;
loc_e261: // 01ed:c391
    memoryASet16(ds, 0x511e, 0x0006);
    memoryASet16(ds, 0x02b8, 0x0010);
    memoryASet16(ds, 0x5122, 0x0029);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x0021);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02d8, 0x0001);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x9312;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x933b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x9364;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x938d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x93b6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x93df;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x9408;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x9431;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x945a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x9483;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x94ac;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x94d5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x94fe;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x9527;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x9550;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x9579;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x95a2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x95cb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x95f4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x961d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x9646;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x966f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x9698;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x96c1;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e3b9: // 01ed:c4e9
    if (ax == 0x000a)
        goto loc_e3c1;
    goto loc_e525;
loc_e3c1: // 01ed:c4f1
    memoryASet16(ds, 0x511e, 0x0008);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0011);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x000d);
    memoryASet16(ds, 0x02d8, 0x0001);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x96ea;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x9713;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x973c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x9765;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x978e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x97b7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x97e0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x9809;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x9832;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x985b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x9884;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x98ad;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x98d6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x98ff;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x9928;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x9951;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x997a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x99a3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x99cc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x99f5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x9a1e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x9a47;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x9a70;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x9a99;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e525: // 01ed:c655
    if (ax == 0x000b)
        goto loc_e52d;
    goto loc_e697;
loc_e52d: // 01ed:c65d
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x000b);
    memoryASet16(ds, 0x5122, 0x0009);
    memoryASet16(ds, 0x02ce, 0x0017);
    memoryASet16(ds, 0x02cc, 0x000d);
    memoryASet16(ds, 0x02d4, 0x000a);
    memoryASet16(ds, 0x02d8, 0x0003);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x9ac2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x9aeb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x9b14;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x9b3d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x9b66;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x9b8f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x9bb8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x9be1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x9c0a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0x9c33;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0x9c5c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0x9c85;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0x9cae;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0x9cd7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0x9d00;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0x9d29;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0x9d52;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0x9d7b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0x9da4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0x9dcd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0x9df6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0x9e1f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0x9e48;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0x9e71;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e697: // 01ed:c7c7
    if (ax == 0x000c)
        goto loc_e69f;
    goto loc_e803;
loc_e69f: // 01ed:c7cf
    memoryASet16(ds, 0x02ce, 0x0017);
    memoryASet16(ds, 0x02cc, 0x000d);
    memoryASet16(ds, 0x02d2, 0x000d);
    memoryASet16(ds, 0x02d4, 0x000a);
    memoryASet16(ds, 0x02d8, 0x0003);
    memoryASet16(ds, 0x511e, 0x0008);
    memoryASet16(ds, 0x02b8, 0x0010);
    memoryASet16(ds, 0x5122, 0x0021);
    memoryASet16(ds, 0x02fa, 0x0027);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x9e9a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0x9ec3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0x9eec;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0x9f15;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0x9f3e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0x9f67;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0x9f90;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0x9fb9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0x9fe2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0xa00b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0xa034;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0xa05d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0xa086;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0xa0af;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0xa0d8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0xa101;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0xa12a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0xa153;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0xa17c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0xa1a5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0xa1ce;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0xa1f7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0xa220;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0xa249;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e803: // 01ed:c933
    if (ax == 0x000d)
        goto loc_e80b;
    goto loc_e96f;
loc_e80b: // 01ed:c93b
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0010);
    memoryASet16(ds, 0x5122, 0x0001);
    memoryASet16(ds, 0x02da, 0x0007);
    memoryASet16(ds, 0x02ce, 0x0016);
    memoryASet16(ds, 0x02cc, 0x000d);
    memoryASet16(ds, 0x02d2, 0x000d);
    memoryASet16(ds, 0x02d0, 0x0005);
    memoryASet16(ds, 0x02d8, 0x0002);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0xa272;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0xa29b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0xa2c4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0xa2ed;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0xa316;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0xa33f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0xa368;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0xa391;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0xa3ba;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0xa3e3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0xa40c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0xa435;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0xa45e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0xa487;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0xa4b0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0xa4d9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0xa502;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0xa52b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0xa554;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0xa57d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0xa5a6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0xa5cf;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0xa5f8;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0xa621;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_e96f: // 01ed:ca9f
    if (ax == 0x000e)
        goto loc_e977;
    goto loc_eae7;
loc_e977: // 01ed:caa7
    memoryASet16(ds, 0x511e, 0x0008);
    memoryASet16(ds, 0x02b8, 0x000b);
    memoryASet16(ds, 0x5122, 0x0001);
    memoryASet16(ds, 0x02da, 0x0002);
    memoryASet16(ds, 0x02ce, 0x0014);
    memoryASet16(ds, 0x02cc, 0x0015);
    memoryASet16(ds, 0x02d4, 0x0004);
    memoryASet16(ds, 0x02d8, 0x0003);
    memoryASet16(ds, 0x02fc, 0x0028);
    memoryASet16(ds, 0x02fa, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0x74a4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0xa64a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0xa673;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0xa69c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0xa6c5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0xa6ee;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0xa717;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0xa740;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0xa769;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0xa792;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0xa7bb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0xa7e4;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0xa80d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0xa836;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0xa85f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0xa888;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0xa8b1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0xa8da;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0xa903;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0xa92c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0xa955;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0xa97e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0xa9a7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0xa9d0;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_eae7: // 01ed:cc17
    if (ax == 0x000f)
        goto loc_eaef;
    goto loc_ec65;
loc_eaef: // 01ed:cc1f
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x001b);
    memoryASet16(ds, 0x02ce, 0x0010);
    memoryASet16(ds, 0x02cc, 0x0009);
    memoryASet16(ds, 0x02d8, 0x0002);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    memoryASet16(ds, 0x50dc, 0x0001);
    memoryASet16(ds, 0x50de, 0x0004);
    memoryASet16(ds, 0x50e0, 0x000a);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0xa9f9;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0xaa22;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0xaa4b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0xaa74;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0xaa9d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0xaac6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0xaaef;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0xab18;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0xab41;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0xab6a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0xab93;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0xabbc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0xabe5;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0xac0e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0xac37;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0xac60;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0xac89;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0xacb2;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0xacdb;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0xad04;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0xad2d;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0xad56;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0xad7f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0xada8;
    push(cs);
    push(di);
    sub_44c0();
    goto loc_edbc;
loc_ec65: // 01ed:cd95
    if (ax == 0x0010)
        goto loc_ec6d;
    goto loc_edbc;
loc_ec6d: // 01ed:cd9d
    memoryASet16(ds, 0x511e, 0x0004);
    memoryASet16(ds, 0x02b8, 0x0013);
    memoryASet16(ds, 0x5122, 0x0021);
    memoryASet16(ds, 0x02fa, 0x0028);
    memoryASet16(ds, 0x02fc, 0x0027);
    memoryASet16(ds, 0x02fe, 0x0026);
    ax = 0;
    push(ax);
    di = 0x747b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0001;
    push(ax);
    di = 0xadd1;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0002;
    push(ax);
    di = 0xadfa;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0003;
    push(ax);
    di = 0xae23;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0004;
    push(ax);
    di = 0xae4c;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0005;
    push(ax);
    di = 0xae75;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0006;
    push(ax);
    di = 0xae9e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0007;
    push(ax);
    di = 0xaec7;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0008;
    push(ax);
    di = 0xaef0;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0009;
    push(ax);
    di = 0xaf19;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000a;
    push(ax);
    di = 0xaf42;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000b;
    push(ax);
    di = 0xaf6b;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000c;
    push(ax);
    di = 0xaf94;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000d;
    push(ax);
    di = 0xafbd;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000e;
    push(ax);
    di = 0xafe6;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x000f;
    push(ax);
    di = 0xb00f;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0010;
    push(ax);
    di = 0xb038;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0011;
    push(ax);
    di = 0xb061;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0012;
    push(ax);
    di = 0xb08a;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0013;
    push(ax);
    di = 0xb0b3;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0014;
    push(ax);
    di = 0xb0dc;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0015;
    push(ax);
    di = 0xb105;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0016;
    push(ax);
    di = 0xb12e;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0017;
    push(ax);
    di = 0xb157;
    push(cs);
    push(di);
    sub_44c0();
    ax = 0x0018;
    push(ax);
    di = 0xb180;
    push(cs);
    push(di);
    sub_44c0();
loc_edbc: // 01ed:ceec
    push(memoryAGet16(ds, 0x02b8));
    push(memoryAGet16(ds, 0x511e));
    push(memoryAGet16(ds, 0x5122));
    push(cs); cs = 0x28b3; sub_29ee5(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2af7b(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2b144(); assert(cs == 0x01ed);
    ax = 0x0024;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0xa0f3) != 0x00)
        goto loc_ee02;
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_290cd(); assert(cs == 0x01ed);
    goto loc_ee0b;
loc_ee02: // 01ed:cf32
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x01ed);
loc_ee0b: // 01ed:cf3b
    push(cs); cs = 0x11b2; sub_11b20(); assert(cs == 0x01ed);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_ee16() // 01ed:cf46
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x50be);
    memoryASet16(ds, 0x509c, ax);
    ax = memoryAGet16(ds, 0x50c7); es = memoryAGet16(ds, 0x50c7 + 2); /*ggg2*/;
    dx = es;
    memoryASet16(ds, 0x50a5, ax);
    memoryASet16(ds, 0x50a7, dx);
    ax = memoryAGet16(ds, 0x50c4);
    memoryASet16(ds, 0x50a2, ax);
    memoryASet16(ds, 0x509e, 0x0003);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_ee3c() // 01ed:cf6c
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ds, 0x509c) > (short)0x0000)
        goto loc_ee7f;
    if (memoryAGet(ds, 0xa0ff) != 0x00)
        goto loc_ee56;
    ax = 0x001e;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_ee56: // 01ed:cf86
    if (memoryAGet(ds, 0x338e) != 0x00)
        goto loc_ee7f;
    if (memoryAGet(ds, 0x338f) != 0x00)
        goto loc_ee7f;
    if (memoryAGet16(ds, 0x4629) != 0x0001)
        goto loc_ee73;
    memoryASet16(ds, 0x4627, 0x001b);
    goto loc_ee79;
loc_ee73: // 01ed:cfa3
    memoryASet16(ds, 0x4627, 0x001c);
loc_ee79: // 01ed:cfa9
    memoryASet16(ds, 0x461b, 0x0001);
loc_ee7f: // 01ed:cfaf
    if ((short)memoryAGet16(ds, 0x509c) > (short)0x0000)
        goto loc_ee97;
    if (memoryAGet(ds, 0xa0ff) != 0x00)
        goto loc_ee97;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_ee97;
    goto loc_f00c;
loc_ee97: // 01ed:cfc7
    if (memoryAGet(ds, 0x4660) != 0x00)
        goto loc_eea1;
    goto loc_f00c;
loc_eea1: // 01ed:cfd1
    if ((short)memoryAGet16(ds, 0x02e0) > (short)0x0006)
        goto loc_eeab;
    goto loc_f00c;
loc_eeab: // 01ed:cfdb
    ax = memoryAGet16(ds, 0x4629);
    memoryASet16(ds, 0x4656, ax);
    if (memoryAGet(ds, 0xa0ff) == 0x00)
        goto loc_ef05;
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x465a, 0x0008);
    memoryASet16(ds, 0x464e, 0x0004);
    memoryASet16(ds, 0x4652, 0x0002);
    if (memoryAGet16(ds, 0x4656) != 0x0001)
        goto loc_eef1;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    memoryASet16(ds, 0x463e, ax);
    memoryASet16(ds, 0x4654, 0x001d);
    memoryASet16(ds, 0x4627, 0x001b);
    goto loc_ef03;
loc_eef1: // 01ed:d021
    ax = memoryAGet16(ds, 0x4611);
    memoryASet16(ds, 0x463e, ax);
    memoryASet16(ds, 0x4654, 0x0021);
    memoryASet16(ds, 0x4627, 0x001c);
loc_ef03: // 01ed:d033
    goto loc_ef50;
loc_ef05: // 01ed:d035
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x465a, 0x0004);
    memoryASet16(ds, 0x464e, 0x0006);
    memoryASet16(ds, 0x4652, 0x0001);
    if (memoryAGet16(ds, 0x4656) != 0x0001)
        goto loc_ef3e;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    memoryASet16(ds, 0x463e, ax);
    memoryASet16(ds, 0x4654, 0x0025);
    memoryASet16(ds, 0x4627, 0x001b);
    goto loc_ef50;
loc_ef3e: // 01ed:d06e
    ax = memoryAGet16(ds, 0x4611);
    memoryASet16(ds, 0x463e, ax);
    memoryASet16(ds, 0x4654, 0x002b);
    memoryASet16(ds, 0x4627, 0x001c);
loc_ef50: // 01ed:d080
    memoryASet16(ds, 0x461b, 0x0001);
    if (memoryAGet(ds, 0xa0ff) != 0x00)
        goto loc_ef68;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_ef68;
    memoryASet16(ds, 0x509c, memoryAGet16(ds, 0x509c) - 1);
loc_ef68: // 01ed:d098
    ax = memoryAGet16(ds, 0x4613);
    memoryASet16(ds, 0x4640, ax);
    ax = memoryAGet16(ds, 0x463e);
    memoryASet16(ds, 0x4642, ax);
    ax = memoryAGet16(ds, 0x4640);
    memoryASet16(ds, 0x4644, ax);
    memoryASet16(ds, 0x465e, 0x0002);
    ax = 0;
    memoryASet16(ds, 0x02e0, ax);
    memoryASet(ds, 0x030a, 0x01);
    memoryASet(ds, 0x4660, 0x00);
    ax = 0;
    memoryASet16(ds, 0x4638, ax);
    ax = 0;
    memoryASet16(ds, 0x4650, ax);
    ax = 0x2850;
    dx = 0x2188;
    memoryASet16(ds, 0x4661, ax);
    memoryASet16(ds, 0x4663, dx);
    memoryASet16(ds, 0x4646, 0x0006);
    ax = memoryAGet16(ds, 0x02da);
    memoryASet16(ds, 0x02ca, ax);
    ax = memoryAGet16(ds, 0x4654);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x4646);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x463e));
    ax = memoryAGet16(ds, 0x4640);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x4627);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x4619);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x4611));
    ax = memoryAGet16(ds, 0x4613);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
loc_f00c: // 01ed:d13c
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f010() // 01ed:d140
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x50a0, memoryAGet16(ds, 0x50a0) - 1);
    if (memoryAGet16(ds, 0x50a0) != 0x0000)
        goto loc_f028;
    memoryASet(ds, 0x3394, 0x01);
    memoryASet(ds, 0xa110, 0x01);
loc_f028: // 01ed:d158
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f02c() // 01ed:d15c
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    ax = 0;
    memoryASet16(ds, 0x4623, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f04d() // 01ed:d17d
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x11b2; sub_1d2d9(); assert(cs == 0x01ed);
    if (al)
        goto loc_f07f;
    if ((short)memoryAGet16(ds, 0x2b5e) <= (short)0x0000)
        goto loc_f06f;
    if ((short)memoryAGet16(ds, 0x2b5e) >= (short)0x0080)
        goto loc_f06f;
    if ((short)memoryAGet16(ds, 0x4623) > (short)0x0000)
        goto loc_f07f;
loc_f06f: // 01ed:d19f
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_f092;
    push(cs); cs = 0x2a31; sub_2a348(); assert(cs == 0x01ed);
    if (!al)
        goto loc_f092;
loc_f07f: // 01ed:d1af
    push(cs); cs = 0x11b2; sub_11b20(); assert(cs == 0x01ed);
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    sub_f02c();
    sub_f010();
    sub_ee16();
loc_f092: // 01ed:d1c2
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f096() // 01ed:d1c6
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ds, 0x4623);
    if (ax != 0x0000)
        goto loc_f0fe;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_f0c5;
    memoryASet16(ds, 0x4619, 0x0011);
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0012);
    memoryASet16(ds, 0x4621, 0x0003);
    push(cs); cs = 0x11b2; sub_18a3a(); assert(cs == 0x01ed);
loc_f0c5: // 01ed:d1f5
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0003)
        goto loc_f0e7;
    ax = memoryAGet16(ds, 0x4625);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_f0e7;
    ax = memoryAGet16(ds, 0x461b);
    if ((short)ax >= (short)memoryAGet16(ds, 0x4621))
        goto loc_f0e7;
    memoryASet16(ds, 0x461b, memoryAGet16(ds, 0x461b) + 1);
loc_f0e7: // 01ed:d217
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0011)
        goto loc_f0fb;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_f0fb: // 01ed:d22b
    goto loc_f20e;
loc_f0fe: // 01ed:d22e
    if (ax == 0x0001)
        goto loc_f106;
    goto loc_f20e;
loc_f106: // 01ed:d236
    if (memoryAGet16(ds, 0x4625) == 0x0000)
        goto loc_f110;
    goto loc_f1e6;
loc_f110: // 01ed:d240
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x0029;
    push(ax);
    ax = 0x0011;
    push(ax);
    ax = memoryAGet16(ds, 0x4611);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    push(ax);
    ax = memoryAGet16(ds, 0x4613);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0015;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x6681;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    cx = memoryAGet16(ds, 0x4611);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ds, 0x4613);
    ax -= 0x0010;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    cx = memoryAGet16(ds, 0x4611);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, cx);
    ax = memoryAGet16(ds, 0x4613);
    ax -= 0x0010;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17898, cx);
    memoryASet16(ds, 0x4619, 0x0007);
    ax = 0;
    memoryASet16(ds, 0x461b, ax);
    memoryASet16(ds, 0x4627, 0x0019);
    memoryASet16(ds, 0x4621, 0x0009);
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
loc_f1e6: // 01ed:d316
    ax = memoryAGet16(ds, 0x461b);
    if ((short)ax >= (short)memoryAGet16(ds, 0x4621))
        goto loc_f1f5;
    memoryASet16(ds, 0x461b, memoryAGet16(ds, 0x461b) + 1);
    goto loc_f1f9;
loc_f1f5: // 01ed:d325
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
loc_f1f9: // 01ed:d329
    if ((short)memoryAGet16(ds, 0x4625) < (short)0x0004)
        goto loc_f20e;
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    sub_f02c();
    sub_f010();
    sub_ee16();
loc_f20e: // 01ed:d33e
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f212() // 01ed:d342
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x11b2; sub_1d431(); assert(cs == 0x01ed);
    if (!al)
        goto loc_f22c;
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    sub_f02c();
    sub_f010();
    sub_ee16();
loc_f22c: // 01ed:d35c
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f230() // 01ed:d360
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xa0e6, memoryAGet16(ds, 0xa0e6) + 1);
    if ((short)memoryAGet16(ds, 0xa0e6) < (short)0x0004)
        goto loc_f241;
    goto loc_f2e2;
loc_f241: // 01ed:d371
    ax = memoryAGet16(ds, 0xa0e6);
    ax += 0x000d;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0xa0e6);
    ax += 0x0011;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    goto loc_f3b1;
loc_f2e2: // 01ed:d412
    if (memoryAGet16(ds, 0xa0e6) != 0x0004)
        goto loc_f31b;
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    goto loc_f3b1;
loc_f31b: // 01ed:d44b
    memoryASet16(ds, 0x4619, 0x0006);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x4613, ax);
    memoryASet16(ds, 0x4627, 0x0001);
    ax = memoryAGet16(ds, 0xa0e6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_f34a;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x01ed);
loc_f34a: // 01ed:d47a
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + 1);
    ax = memoryAGet16(ds, 0xa0e0);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    if (ax != memoryAGet16(ds, 0x4611))
        goto loc_f3b1;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    memoryASet(ds, 0x0306, 0x00);
    memoryASet(ds, 0xa0f6, 0x00);
    di = memoryAGet16(ds, 0xa0be);
    memoryASet(ds, di + 20648, 0x00);
    di = 0x5098;
    push(ds);
    push(di);
    push(cs); cs = 0x2188; sub_21880(); assert(cs == 0x01ed);
    memoryASet(ds, 0xa0fb, al);
    if (memoryAGet(ds, 0xa0fb) == 0x00)
        goto loc_f39c;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3396, 0x00);
    memoryASet(ds, 0x3394, 0x01);
loc_f39c: // 01ed:d4cc
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
loc_f3b1: // 01ed:d4e1
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f3b5() // 01ed:d4e5
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0xa0e6, memoryAGet16(ds, 0xa0e6) + 1);
    if ((short)memoryAGet16(ds, 0xa0e6) >= (short)0x0003)
        goto loc_f413;
    ax = memoryAGet16(ds, 0xa0e6);
    ax += 0x000d;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    goto loc_f484;
loc_f413: // 01ed:d543
    if (memoryAGet16(ds, 0xa0e6) != 0x0003)
        goto loc_f484;
    memoryASet(ds, 0xa0f7, 0x00);
    ax = memoryAGet16(ds, 0xa0e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x4629);
    cx = 0xffff;
    imul16(cx);
    ax += memoryAGet16(ds, 0xa0e0);
    memoryASet16(ds, 0x2b72, ax);
    ax = memoryAGet16(ds, 0xa0e2);
    memoryASet16(ds, 0x2b74, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    memoryASet(ds, 0x0306, 0x00);
    memoryASet(ds, 0xa0f6, 0x00);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20620);
    memoryASet16(ds, 0xa0be, ax);
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
loc_f484: // 01ed:d5b4
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f492() // 01ed:d5c2 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x013a;
    di = 0xd5b8;
    push(cs);
    push(di);
    di = bp - 28;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    di = 0xd5bd;
    push(cs);
    push(di);
    di = bp - 42;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp + 4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 56;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x01ed);
    di = bp - 314;
    push(ss);
    push(di);
    di = bp - 28;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x01ed);
    di = bp - 56;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x01ed);
    di = bp - 42;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x01ed);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x01ed);
    di = 0x307c;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x01ed);
    di = 0x307c;
    push(ds);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x01ed);
    if (!ax)
        goto loc_f533;
    al = 0x00;
    goto loc_f535;
loc_f533: // 01ed:d663
    al = 0x01;
loc_f535: // 01ed:d665
    memoryASet(ss, bp - 57, al);
    if (memoryAGet(ss, bp - 57) == 0x00)
        goto loc_f587;
    di = 0x307c;
    push(ds);
    push(di);
    di = 0x5098;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x01ed);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x01ed);
    di = 0x307c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x5098);
    memoryASet16(ds, 0x2b72, ax);
    ax = memoryAGet16(ds, 0x509a);
    memoryASet16(ds, 0x2b74, ax);
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
    goto loc_f595;
loc_f587: // 01ed:d6b7
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_17a14(); assert(cs == 0x01ed);
loc_f595: // 01ed:d6c5
    al = memoryAGet(ss, bp - 57);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_f5a4() // 01ed:d6d4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x11b2; sub_1caa5(); assert(cs == 0x01ed);
    if (al)
        goto loc_f5cf;
    if ((short)memoryAGet16(ds, 0x2b5e) <= (short)0x0000)
        goto loc_f5bf;
    if ((short)memoryAGet16(ds, 0x2b5e) < (short)0x0080)
        goto loc_f5cf;
loc_f5bf: // 01ed:d6ef
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_f5dc;
    push(cs); cs = 0x2a31; sub_2a348(); assert(cs == 0x01ed);
    if (!al)
        goto loc_f5dc;
loc_f5cf: // 01ed:d6ff
    memoryASet(ds, 0xa126, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
    sub_f02c();
loc_f5dc: // 01ed:d70c
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f5e0() // 01ed:d710
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs); cs = 0x11b2; sub_1cded(); assert(cs == 0x01ed);
    if (!al)
        goto loc_f5f6;
    memoryASet(ds, 0xa0fb, 0x00);
    memoryASet(ds, 0xa110, 0x01);
loc_f5f6: // 01ed:d726
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_f5fa() // 01ed:d72a
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0036;
    memoryASet16(ds, 0x02c4, 0x0002);
    goto loc_f60c;
loc_f608: // 01ed:d738
    memoryASet16(ds, 0x02c4, memoryAGet16(ds, 0x02c4) + 1);
loc_f60c: // 01ed:d73c
    ax = memoryAGet16(ds, 0x02c4);
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ds, 0x02c4) != 0x003c)
        goto loc_f61e;
    ax = 0;
    memoryASet16(ss, bp - 6, ax);
loc_f61e: // 01ed:d74e
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x0000)
        goto loc_f698;
    goto loc_fb7b;
loc_f698: // 01ed:d7c8
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) == 0x00)
        goto loc_f6e3;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17886);
    if (ax != 0x0000)
        goto loc_f6ce;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0001);
    goto loc_f6e3;
loc_f6ce: // 01ed:d7fe
    if (ax != 0x0001)
        goto loc_f6e3;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
loc_f6e3: // 01ed:d813
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0020)
        goto loc_f728;
    if (ax == 0x002b)
        goto loc_f728;
    if (ax == 0x0021)
        goto loc_f728;
    if (ax == 0x0014)
        goto loc_f728;
    if (ax == 0x0013)
        goto loc_f728;
    if (ax == 0x0033)
        goto loc_f728;
    if (ax == 0x002d)
        goto loc_f728;
    if (ax == 0x0027)
        goto loc_f728;
    if (ax == 0x003b)
        goto loc_f728;
    if (ax == 0x0026)
        goto loc_f728;
    if (ax != 0x002a)
        goto loc_f753;
loc_f728: // 01ed:d858
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f750;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    switch (memoryAGet32(ds, di + 17927))
    {
        case 0x21882850: push(cs); cs = 0x2188; sub_240d0(); assert(cs == 0x01ed); break;
        case 0x21882877: push(cs); cs = 0x2188; sub_240f7(); assert(cs == 0x01ed); break;
        case 0x21886458: push(cs); cs = 0x2188; sub_27cd8(); assert(cs == 0x01ed); break;
        case 0x21885bbe: push(cs); cs = 0x2188; sub_2743e(); assert(cs == 0x01ed); break;
        case 0x21882f83: push(cs); cs = 0x2188; sub_24803(); assert(cs == 0x01ed); break;
        case 0x21881fb9: push(cs); cs = 0x2188; sub_23839(); assert(cs == 0x01ed); break;
        case 0x21885855: push(cs); cs = 0x2188; sub_270d5(); assert(cs == 0x01ed); break;
        case 0x21885c8f: push(cs); cs = 0x2188; sub_2750f(); assert(cs == 0x01ed); break;
        case 0x21886232: push(cs); cs = 0x2188; sub_27ab2(); assert(cs == 0x01ed); break;
        case 0x21884a4b: push(cs); cs = 0x2188; sub_262cb(); assert(cs == 0x01ed); break;
        case 0x21884a82: push(cs); cs = 0x2188; sub_26302(); assert(cs == 0x01ed); break;
        case 0x21886afa: push(cs); cs = 0x2188; sub_2837a(); assert(cs == 0x01ed); break;
        case 0x21883f13: push(cs); cs = 0x2188; sub_25793(); assert(cs == 0x01ed); break;
        case 0x21886d31: push(cs); cs = 0x2188; sub_285b1(); assert(cs == 0x01ed); break;
        case 0x21886ff6: push(cs); cs = 0x2188; sub_28876(); assert(cs == 0x01ed); break;
        case 0x218870e4: push(cs); cs = 0x2188; sub_28964(); assert(cs == 0x01ed); break;
        case 0x218855ec: push(cs); cs = 0x2188; sub_26e6c(); assert(cs == 0x01ed); break;
        case 0x21884fd4: push(cs); cs = 0x2188; sub_26854(); assert(cs == 0x01ed); break;
        case 0x2188298a: push(cs); cs = 0x2188; sub_2420a(); assert(cs == 0x01ed); break;
        case 0x21884ad3: push(cs); cs = 0x2188; sub_26353(); assert(cs == 0x01ed); break;
        case 0x2188323c: push(cs); cs = 0x2188; sub_24abc(); assert(cs == 0x01ed); break;
        case 0x218832f6: push(cs); cs = 0x2188; sub_24b76(); assert(cs == 0x01ed); break;
        case 0x21883416: push(cs); cs = 0x2188; sub_24c96(); assert(cs == 0x01ed); break;
        case 0x21882acf: push(cs); cs = 0x2188; sub_2434f(); assert(cs == 0x01ed); break;
        case 0x21884145: push(cs); cs = 0x2188; sub_259c5(); assert(cs == 0x01ed); break;
        case 0x21883e70: push(cs); cs = 0x2188; sub_256f0(); assert(cs == 0x01ed); break;
        case 0x21882bd4: push(cs); cs = 0x2188; sub_24454(); assert(cs == 0x01ed); break;
        case 0x21882d37: push(cs); cs = 0x2188; sub_245b7(); assert(cs == 0x01ed); break;
        case 0x218836b0: push(cs); cs = 0x2188; sub_24f30(); assert(cs == 0x01ed); break;
        case 0x21883904: push(cs); cs = 0x2188; sub_25184(); assert(cs == 0x01ed); break;
        case 0x21883a2e: push(cs); cs = 0x2188; sub_252ae(); assert(cs == 0x01ed); break;
        case 0x21883be8: push(cs); cs = 0x2188; sub_25468(); assert(cs == 0x01ed); break;
        case 0x21883d23: push(cs); cs = 0x2188; sub_255a3(); assert(cs == 0x01ed); break;
        case 0x21882176: push(cs); cs = 0x2188; sub_239f6(); assert(cs == 0x01ed); break;
        case 0x21881fc2: push(cs); cs = 0x2188; sub_23842(); assert(cs == 0x01ed); break;
        case 0x218847b9: push(cs); cs = 0x2188; sub_26039(); assert(cs == 0x01ed); break;
        case 0x218848fe: push(cs); cs = 0x2188; sub_2617e(); assert(cs == 0x01ed); break;
        case 0x218852e7: push(cs); cs = 0x2188; sub_26b67(); assert(cs == 0x01ed); break;
        case 0x21884c92: push(cs); cs = 0x2188; sub_26512(); assert(cs == 0x01ed); break;
        case 0x218862f2: push(cs); cs = 0x2188; sub_27b72(); assert(cs == 0x01ed); break;
        case 0x21883f6c: push(cs); cs = 0x2188; sub_257ec(); assert(cs == 0x01ed); break;
        case 0x2188403a: push(cs); cs = 0x2188; sub_258ba(); assert(cs == 0x01ed); break;
        case 0x21882e25: push(cs); cs = 0x2188; sub_246a5(); assert(cs == 0x01ed); break;
        case 0x21886681: push(cs); cs = 0x2188; sub_27f01(); assert(cs == 0x01ed); break;
        case 0x2188672b: push(cs); cs = 0x2188; sub_27fab(); assert(cs == 0x01ed); break;
        case 0x218869d3: push(cs); cs = 0x2188; sub_28253(); assert(cs == 0x01ed); break;
        case 0x21882241: push(cs); cs = 0x2188; sub_23ac1(); assert(cs == 0x01ed); break;
        case 0x21880831: push(cs); cs = 0x2188; sub_220b1(); assert(cs == 0x01ed); break;
        default:
            stop();
    }
loc_f750: // 01ed:d880
    goto loc_fb7b;
loc_f753: // 01ed:d883
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    sub_2e08();
    if (!al)
        goto loc_f7af;
    if (memoryAGet(ds, 0xa0f8) != 0x00)
        goto loc_f7af;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f7ac;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    switch (memoryAGet32(ds, di + 17927))
    {
        case 0x21882850: push(cs); cs = 0x2188; sub_240d0(); assert(cs == 0x01ed); break;
        case 0x21882877: push(cs); cs = 0x2188; sub_240f7(); assert(cs == 0x01ed); break;
        case 0x21886458: push(cs); cs = 0x2188; sub_27cd8(); assert(cs == 0x01ed); break;
        case 0x21885bbe: push(cs); cs = 0x2188; sub_2743e(); assert(cs == 0x01ed); break;
        case 0x21882f83: push(cs); cs = 0x2188; sub_24803(); assert(cs == 0x01ed); break;
        case 0x21881fb9: push(cs); cs = 0x2188; sub_23839(); assert(cs == 0x01ed); break;
        case 0x21885855: push(cs); cs = 0x2188; sub_270d5(); assert(cs == 0x01ed); break;
        case 0x21885c8f: push(cs); cs = 0x2188; sub_2750f(); assert(cs == 0x01ed); break;
        case 0x21886232: push(cs); cs = 0x2188; sub_27ab2(); assert(cs == 0x01ed); break;
        case 0x21884a4b: push(cs); cs = 0x2188; sub_262cb(); assert(cs == 0x01ed); break;
        case 0x21884a82: push(cs); cs = 0x2188; sub_26302(); assert(cs == 0x01ed); break;
        case 0x21886afa: push(cs); cs = 0x2188; sub_2837a(); assert(cs == 0x01ed); break;
        case 0x21883f13: push(cs); cs = 0x2188; sub_25793(); assert(cs == 0x01ed); break;
        case 0x21886d31: push(cs); cs = 0x2188; sub_285b1(); assert(cs == 0x01ed); break;
        case 0x21886ff6: push(cs); cs = 0x2188; sub_28876(); assert(cs == 0x01ed); break;
        case 0x218870e4: push(cs); cs = 0x2188; sub_28964(); assert(cs == 0x01ed); break;
        case 0x218855ec: push(cs); cs = 0x2188; sub_26e6c(); assert(cs == 0x01ed); break;
        case 0x21884fd4: push(cs); cs = 0x2188; sub_26854(); assert(cs == 0x01ed); break;
        case 0x2188298a: push(cs); cs = 0x2188; sub_2420a(); assert(cs == 0x01ed); break;
        case 0x21884ad3: push(cs); cs = 0x2188; sub_26353(); assert(cs == 0x01ed); break;
        case 0x2188323c: push(cs); cs = 0x2188; sub_24abc(); assert(cs == 0x01ed); break;
        case 0x218832f6: push(cs); cs = 0x2188; sub_24b76(); assert(cs == 0x01ed); break;
        case 0x21883416: push(cs); cs = 0x2188; sub_24c96(); assert(cs == 0x01ed); break;
        case 0x21882acf: push(cs); cs = 0x2188; sub_2434f(); assert(cs == 0x01ed); break;
        case 0x21884145: push(cs); cs = 0x2188; sub_259c5(); assert(cs == 0x01ed); break;
        case 0x21883e70: push(cs); cs = 0x2188; sub_256f0(); assert(cs == 0x01ed); break;
        case 0x21882bd4: push(cs); cs = 0x2188; sub_24454(); assert(cs == 0x01ed); break;
        case 0x21882d37: push(cs); cs = 0x2188; sub_245b7(); assert(cs == 0x01ed); break;
        case 0x218836b0: push(cs); cs = 0x2188; sub_24f30(); assert(cs == 0x01ed); break;
        case 0x21883904: push(cs); cs = 0x2188; sub_25184(); assert(cs == 0x01ed); break;
        case 0x21883a2e: push(cs); cs = 0x2188; sub_252ae(); assert(cs == 0x01ed); break;
        case 0x21883be8: push(cs); cs = 0x2188; sub_25468(); assert(cs == 0x01ed); break;
        case 0x21883d23: push(cs); cs = 0x2188; sub_255a3(); assert(cs == 0x01ed); break;
        case 0x21882176: push(cs); cs = 0x2188; sub_239f6(); assert(cs == 0x01ed); break;
        case 0x21881fc2: push(cs); cs = 0x2188; sub_23842(); assert(cs == 0x01ed); break;
        case 0x218847b9: push(cs); cs = 0x2188; sub_26039(); assert(cs == 0x01ed); break;
        case 0x218848fe: push(cs); cs = 0x2188; sub_2617e(); assert(cs == 0x01ed); break;
        case 0x218852e7: push(cs); cs = 0x2188; sub_26b67(); assert(cs == 0x01ed); break;
        case 0x21884c92: push(cs); cs = 0x2188; sub_26512(); assert(cs == 0x01ed); break;
        case 0x218862f2: push(cs); cs = 0x2188; sub_27b72(); assert(cs == 0x01ed); break;
        case 0x21883f6c: push(cs); cs = 0x2188; sub_257ec(); assert(cs == 0x01ed); break;
        case 0x2188403a: push(cs); cs = 0x2188; sub_258ba(); assert(cs == 0x01ed); break;
        case 0x21882e25: push(cs); cs = 0x2188; sub_246a5(); assert(cs == 0x01ed); break;
        case 0x21886681: push(cs); cs = 0x2188; sub_27f01(); assert(cs == 0x01ed); break;
        case 0x2188672b: push(cs); cs = 0x2188; sub_27fab(); assert(cs == 0x01ed); break;
        case 0x218869d3: push(cs); cs = 0x2188; sub_28253(); assert(cs == 0x01ed); break;
        case 0x21882241: push(cs); cs = 0x2188; sub_23ac1(); assert(cs == 0x01ed); break;
        case 0x21880831: push(cs); cs = 0x2188; sub_220b1(); assert(cs == 0x01ed); break;
        default:
            //printf("missing indirect di=%x %x\n", di, memoryAGet32(ds, di + 17927));
            sp += 6;
            stop();
    }
loc_f7ac: // 01ed:d8dc
    goto loc_fb7b;
loc_f7af: // 01ed:d8df
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0002)
        goto loc_f7c7;
    if (ax != 0x002b)
        goto loc_f83a;
loc_f7c7: // 01ed:d8f7
    if (memoryAGet(ds, 0xa0f8) == 0x00)
        goto loc_f7ed;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f7ed;
    push(memoryAGet16(ss, bp - 6));
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x2188; sub_23d9d(); assert(cs == 0x01ed);
loc_f7ed: // 01ed:d91d
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f837;
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ss, bp - 6));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    sub_2e08();
    if (al)
        goto loc_f837;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_f837: // 01ed:d967
    goto loc_fb7b;
loc_f83a: // 01ed:d96a
    if (ax != 0x000d)
        goto loc_f873;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f870;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0x0003)
        goto loc_f870;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_f870: // 01ed:d9a0
    goto loc_fb7b;
loc_f873: // 01ed:d9a3
    if (ax == 0x0003)
        goto loc_f88c;
    if (ax == 0x001d)
        goto loc_f88c;
    if (ax == 0x0032)
        goto loc_f88c;
    if (ax == 0x0037)
        goto loc_f88c;
    if (ax != 0x0031)
        goto loc_f8c0;
loc_f88c: // 01ed:d9bc
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f8bd;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp - 6);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_f8bd: // 01ed:d9ed
    goto loc_fb7b;
loc_f8c0: // 01ed:d9f0
    if (ax != 0x0004)
        goto loc_f8f8;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_f8f5;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_f8f5: // 01ed:da25
    goto loc_fb7b;
loc_f8f8: // 01ed:da28
    if (ax == 0x0007)
        goto loc_f900;
    goto loc_fb33;
loc_f900: // 01ed:da30
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0x0000)
        goto loc_f914;
    goto loc_fb31;
loc_f914: // 01ed:da44
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, memoryAGet16(ds, di + 17904) - 0x0004);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, memoryAGet16(ds, di + 17906) - 0x0004);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, memoryAGet16(ds, di + 17908) + 0x0004);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    push(memoryAGet16(ss, bp - 6));
    push(cs); cs = 0x2188; sub_21bd7(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if ((short)ax >= 0)
        goto loc_f9ae;
    ax = -ax;
loc_f9ae: // 01ed:dade
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += cx;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    if ((short)ax >= 0)
        goto loc_f9da;
    ax = -ax;
loc_f9da: // 01ed:db0a
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += cx;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_1d485(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if ((short)ax >= 0)
        goto loc_fa8a;
    ax = -ax;
loc_fa8a: // 01ed:dbba
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += cx;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    if ((short)ax >= 0)
        goto loc_fab6;
    ax = -ax;
loc_fab6: // 01ed:dbe6
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += cx;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_1d485(); assert(cs == 0x01ed);
loc_fb31: // 01ed:dc61
    goto loc_fb7b;
loc_fb33: // 01ed:dc63
    if (ax != 0x0010)
        goto loc_fb3f;
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    goto loc_fb7b;
loc_fb3f: // 01ed:dc6f
    if (ax != 0x0016)
        goto loc_fb7b;
    ax = memoryAGet16(ss, bp - 6);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0003;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
loc_fb7b: // 01ed:dcab
    if (memoryAGet16(ds, 0x02c4) == 0x003c)
        goto loc_fb85;
    goto loc_f608;
loc_fb85: // 01ed:dcb5
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_fb89() // 01ed:dcb9
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet16(ds, 0x5134, memoryAGet16(ds, 0x5134) + 1);
    if ((short)memoryAGet16(ds, 0x5134) <= (short)0x0013)
        goto loc_fba0;
    memoryASet16(ds, 0x5134, 0x0013);
loc_fba0: // 01ed:dcd0
    memoryASet16(ds, 0x02c8, memoryAGet16(ds, 0x02c8) + 1);
    memoryASet(ds, 0xa0fd, 0x01);
    ax = memoryAGet16(ds, 0x4613);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, 0x5142) == 0x00)
        goto loc_fbbd;
    if ((short)memoryAGet16(ds, 0x5134) < (short)0x000b)
        goto loc_fbe0;
loc_fbbd: // 01ed:dced
    if (memoryAGet(ds, 0x513d) == 0x00)
        goto loc_fbcb;
    if ((short)memoryAGet16(ds, 0x5134) < (short)0x000b)
        goto loc_fbe0;
loc_fbcb: // 01ed:dcfb
    if (memoryAGet(ds, 0x513d) != 0x00)
        goto loc_fbf2;
    if (memoryAGet(ds, 0x5142) != 0x00)
        goto loc_fbf2;
    if ((short)memoryAGet16(ds, 0x5134) <= (short)0x0000)
        goto loc_fbf2;
loc_fbe0: // 01ed:dd10
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
loc_fbf2: // 01ed:dd22
    if (memoryAGet(ds, 0x5142) != 0x00)
        goto loc_fc00;
    if (memoryAGet(ds, 0x513d) == 0x00)
        goto loc_fc05;
loc_fc00: // 01ed:dd30
    memoryASet(ds, 0xa0fd, 0x00);
loc_fc05: // 01ed:dd35
    ax = memoryAGet16(ds, 0x5132);
    if (ax == 0x0001)
        goto loc_fc10;
    goto loc_fd28;
loc_fc10: // 01ed:dd40
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_fc6e;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_fc92;
loc_fc6e: // 01ed:dd9e
    if (memoryAGet(ds, 0x5142) != 0x00)
        goto loc_fc8d;
    if (memoryAGet(ds, 0x513d) != 0x00)
        goto loc_fc8d;
    ax = memoryAGet16(ds, 0x4613);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x4613, ax);
loc_fc8d: // 01ed:ddbd
    memoryASet(ds, 0xa0fd, 0x00);
loc_fc92: // 01ed:ddc2
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) != 0x00)
        goto loc_fcf0;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    cx = 0x0004;
    ax >>= cl;
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) == 0x00)
        goto loc_fd26;
loc_fcf0: // 01ed:de20
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    ax += 0x0002;
    dx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax += 0x0010;
    if ((short)ax > (short)dx)
        goto loc_fd26;
    ax = memoryAGet16(ds, 0x4613);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x4613, ax);
    memoryASet(ds, 0xa0fd, 0x00);
loc_fd26: // 01ed:de56
    goto loc_fda4;
loc_fd28: // 01ed:de58
    if (ax != 0xffff)
        goto loc_fda4;
    ax = memoryAGet16(ds, 0x4613);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_fd8b;
    ax = memoryAGet16(ds, 0x4613);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_fda4;
loc_fd8b: // 01ed:debb
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    memoryASet16(ds, 0x4613, ax);
    memoryASet(ds, 0xa0fd, 0x00);
loc_fda4: // 01ed:ded4
    if ((short)memoryAGet16(ds, 0x02ca) > (short)0x0000)
        goto loc_fdc7;
    if (memoryAGet(ds, 0x030a) != 0x00)
        goto loc_fdc7;
    if (memoryAGet16(ds, 0x4629) != 0x0001)
        goto loc_fdc1;
    memoryASet16(ds, 0x4627, 0x0019);
    goto loc_fdc7;
loc_fdc1: // 01ed:def1
    memoryASet16(ds, 0x4627, 0x001a);
loc_fdc7: // 01ed:def7
    ax = memoryAGet16(ds, 0x5132);
    if (ax != 0x0001)
        goto loc_fe0e;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0078;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4613))
        goto loc_fe0c;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    ax += memoryAGet16(ds, 0x5130);
    if ((short)ax >= (short)0x00c8)
        goto loc_fe06;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
    goto loc_fe0c;
loc_fe06: // 01ed:df36
    memoryASet16(ds, 0x5130, 0x00c8);
loc_fe0c: // 01ed:df3c
    goto loc_fe4f;
loc_fe0e: // 01ed:df3e
    if (ax != 0xffff)
        goto loc_fe4f;
    ax = memoryAGet16(ds, 0x4613);
    ax -= 0x0050;
    if ((short)ax >= (short)memoryAGet16(ds, 0x5130))
        goto loc_fe4f;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    dx = ax;
    ax = memoryAGet16(ds, 0x5130);
    ax -= dx;
    if ((short)ax <= (short)0x0010)
        goto loc_fe49;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
    goto loc_fe4f;
loc_fe49: // 01ed:df79
    memoryASet16(ds, 0x5130, 0x0010);
loc_fe4f: // 01ed:df7f
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_fe72;
    ax = 0;
    memoryASet16(ds, 0x02c8, ax);
    if ((short)memoryAGet16(ds, 0x02ca) > (short)0x0000)
        goto loc_fe72;
    if (memoryAGet(ds, 0x030a) != 0x00)
        goto loc_fe72;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21bd7(); assert(cs == 0x01ed);
loc_fe72: // 01ed:dfa2
    if (memoryAGet16(ds, 0x5132) == 0xffff)
        goto loc_fea3;
    if (memoryAGet16(ds, 0x02c8) != 0x0001)
        goto loc_fea3;
    ax = memoryAGet16(ds, 0x4613);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 4) >= (short)0x0007)
        goto loc_fe9c;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - ax);
    goto loc_fea3;
loc_fe9c: // 01ed:dfcc
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
loc_fea3: // 01ed:dfd3
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_fec6;
    ax = 0;
    memoryASet16(ds, 0x02c8, ax);
    if ((short)memoryAGet16(ds, 0x02ca) > (short)0x0000)
        goto loc_fec6;
    if (memoryAGet(ds, 0x030a) != 0x00)
        goto loc_fec6;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21bd7(); assert(cs == 0x01ed);
loc_fec6: // 01ed:dff6
    if (memoryAGet(ds, 0xa0fd) == 0x00)
        goto loc_fedd;
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet(ds, 0x513d, 0x00);
    memoryASet(ds, 0x5142, 0x00);
loc_fedd: // 01ed:e00d
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_fee1() // 01ed:e011
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0x3392) == 0x00)
        goto loc_fef0;
    push(cs); cs = 0x11b2; sub_1d616(); assert(cs == 0x01ed);
loc_fef0: // 01ed:e020
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_ff3c;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x2b62, ax);
    ax = memoryAGet16(ds, 0x2b64);
    ax -= 0x004b;
    if ((short)ax <= (short)memoryAGet16(ds, 0x2b62))
        goto loc_ff1a;
    memoryASet(ds, 0xa0f1, 0x01);
    memoryASet(ds, 0x030a, 0x00);
    goto loc_ff1f;
loc_ff1a: // 01ed:e04a
    memoryASet(ds, 0xa0f1, 0x00);
loc_ff1f: // 01ed:e04f
    ax = memoryAGet16(ds, 0x2b64);
    ax += 0x004b;
    if ((short)ax >= (short)memoryAGet16(ds, 0x2b62))
        goto loc_ff37;
    memoryASet(ds, 0xa0f2, 0x01);
    memoryASet(ds, 0x030a, 0x00);
    goto loc_ff3c;
loc_ff37: // 01ed:e067
    memoryASet(ds, 0xa0f2, 0x00);
loc_ff3c: // 01ed:e06c
    if ((short)memoryAGet16(ds, 0x02ca) > (short)0x0000)
        goto loc_ff46;
    goto loc_10026;
loc_ff46: // 01ed:e076
    if (memoryAGet16(ds, 0x4629) != 0x0001)
        goto loc_ffb4;
    ax = memoryAGet16(ds, 0x02ca);
    ax = -ax;
    ax += memoryAGet16(ds, 0x5126);
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_ff98;
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0000)
        goto loc_ff8d;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4611))
        goto loc_ff8d;
    ax = memoryAGet16(ds, 0x02ca);
    ax += memoryAGet16(ds, 0x5126);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) - ax);
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0000)
        goto loc_ff8d;
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
loc_ff8d: // 01ed:e0bd
    ax = memoryAGet16(ds, 0x02ca);
    ax = -ax;
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    goto loc_ffb2;
loc_ff98: // 01ed:e0c8
    if ((short)memoryAGet16(ds, 0x02ca) <= (short)0x0001)
        goto loc_ffad;
    ax = memoryAGet16(ds, 0x02ca);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    memoryASet16(ds, 0x02ca, ax);
    goto loc_ffb2;
loc_ffad: // 01ed:e0dd
    ax = 0;
    memoryASet16(ds, 0x02ca, ax);
loc_ffb2: // 01ed:e0e2
    goto loc_10018;
loc_ffb4: // 01ed:e0e4
    ax = memoryAGet16(ds, 0x02ca);
    ax -= memoryAGet16(ds, 0x5126);
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_fffe;
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0140)
        goto loc_fff5;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4611))
        goto loc_fff5;
    ax = memoryAGet16(ds, 0x02ca);
    ax -= memoryAGet16(ds, 0x5126);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) + ax);
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0140)
        goto loc_fff5;
    memoryASet16(ds, 0x512e, 0x0140);
loc_fff5: // 01ed:e125
    ax = memoryAGet16(ds, 0x02ca);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    goto loc_10018;
loc_fffe: // 01ed:e12e
    if ((short)memoryAGet16(ds, 0x02ca) <= (short)0x0001)
        goto loc_10013;
    ax = memoryAGet16(ds, 0x02ca);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    memoryASet16(ds, 0x02ca, ax);
    goto loc_10018;
loc_10013: // 01ed:e143
    ax = 0;
    memoryASet16(ds, 0x02ca, ax);
loc_10018: // 01ed:e148
    if ((short)memoryAGet16(ds, 0x02ca) <= (short)0x0000)
        goto loc_10023;
    memoryASet16(ds, 0x02ca, memoryAGet16(ds, 0x02ca) - 1);
loc_10023: // 01ed:e153
    goto loc_1011f;
loc_10026: // 01ed:e156
    if (memoryAGet(ds, 0x338f) != 0x00)
        goto loc_10034;
    if (memoryAGet(ds, 0xa0f2) == 0x00)
        goto loc_100a3;
loc_10034: // 01ed:e164
    memoryASet16(ds, 0x4629, 0x0001);
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_1004e;
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_1004e;
    ax = memoryAGet16(ds, 0x461f);
    memoryASet16(ds, 0x4627, ax);
loc_1004e: // 01ed:e17e
    push(cs);
    sub_258e();
    ax = memoryAGet16(ds, 0x02ba);
    ax -= memoryAGet16(ds, 0x5126);
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_100a3;
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0140)
        goto loc_10093;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4611))
        goto loc_10093;
    ax = memoryAGet16(ds, 0x02ba);
    ax -= memoryAGet16(ds, 0x5126);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) + ax);
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0140)
        goto loc_10093;
    memoryASet16(ds, 0x512e, 0x0140);
loc_10093: // 01ed:e1c3
    ax = memoryAGet16(ds, 0x02ba);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x01ed);
loc_100a3: // 01ed:e1d3
    if (memoryAGet(ds, 0x338e) != 0x00)
        goto loc_100b1;
    if (memoryAGet(ds, 0xa0f1) == 0x00)
        goto loc_1011f;
loc_100b1: // 01ed:e1e1
    memoryASet16(ds, 0x4629, 0xffff);
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_100cb;
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_100cb;
    ax = memoryAGet16(ds, 0x461d);
    memoryASet16(ds, 0x4627, ax);
loc_100cb: // 01ed:e1fb
    push(cs);
    sub_258e();
    ax = memoryAGet16(ds, 0x02ba);
    ax = -ax;
    ax += memoryAGet16(ds, 0x5126);
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_1011f;
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0000)
        goto loc_1010f;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4611))
        goto loc_1010f;
    ax = memoryAGet16(ds, 0x02ba);
    ax += memoryAGet16(ds, 0x5126);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) - ax);
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0000)
        goto loc_1010f;
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
loc_1010f: // 01ed:e23f
    ax = memoryAGet16(ds, 0x02ba);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) - ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x01ed);
loc_1011f: // 01ed:e24f
    if (memoryAGet(ds, 0x338e) != 0x00)
        goto loc_10141;
    if (memoryAGet(ds, 0xa0f1) != 0x00)
        goto loc_10141;
    if (memoryAGet(ds, 0x338f) != 0x00)
        goto loc_10141;
    if (memoryAGet(ds, 0xa0f2) != 0x00)
        goto loc_10141;
    memoryASet16(ds, 0x461b, 0x0001);
loc_10141: // 01ed:e271
    if (memoryAGet16(ds, 0x5118) != 0x0000)
        goto loc_1014b;
    goto loc_101cd;
loc_1014b: // 01ed:e27b
    if ((short)memoryAGet16(ds, 0x5118) >= (short)0x0000)
        goto loc_1018f;
    push(memoryAGet16(ds, 0x5118));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_1018d;
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0000)
        goto loc_1018d;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4611))
        goto loc_1018d;
    ax = memoryAGet16(ds, 0x5118);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) + ax);
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0000)
        goto loc_10188;
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
loc_10188: // 01ed:e2b8
    ax = 0;
    memoryASet16(ds, 0x5118, ax);
loc_1018d: // 01ed:e2bd
    goto loc_101cd;
loc_1018f: // 01ed:e2bf
    push(memoryAGet16(ds, 0x5118));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_101cd;
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0140)
        goto loc_101cd;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4611))
        goto loc_101cd;
    ax = memoryAGet16(ds, 0x5118);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) + ax);
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0140)
        goto loc_101c8;
    memoryASet16(ds, 0x512e, 0x0140);
loc_101c8: // 01ed:e2f8
    ax = 0;
    memoryASet16(ds, 0x5118, ax);
loc_101cd: // 01ed:e2fd
    if (memoryAGet16(ds, 0x5128) == 0x0000)
        goto loc_10237;
    if ((short)memoryAGet16(ds, 0x5128) >= (short)0x0000)
        goto loc_10214;
    ax = 0;
    push(ax);
    push(memoryAGet16(ds, 0x5128));
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_10212;
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x0010)
        goto loc_10212;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0050;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4613))
        goto loc_10212;
    ax = memoryAGet16(ds, 0x5128);
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x0010)
        goto loc_10212;
    memoryASet16(ds, 0x5130, 0x0010);
loc_10212: // 01ed:e342
    goto loc_10237;
loc_10214: // 01ed:e344
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0078;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4613))
        goto loc_10237;
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x00c8)
        goto loc_10231;
    ax = memoryAGet16(ds, 0x5128);
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
    goto loc_10237;
loc_10231: // 01ed:e361
    memoryASet16(ds, 0x5130, 0x00c8);
loc_10237: // 01ed:e367
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1023b() // 01ed:e36b
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ds, 0xa0b4);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_102c2;
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_102c2;
    if (memoryAGet(ds, 0x338b) != 0x00)
        goto loc_1026c;
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_102c2;
    push(cs); cs = 0x2a31; sub_2a348(); assert(cs == 0x01ed);
    if (!al)
        goto loc_102c2;
loc_1026c: // 01ed:e39c
    ax = 0;
    push(ax);
    ax = memoryAGet16(ds, 0x5132);
    cx = 0xfffc;
    imul16(cx);
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_102aa;
    memoryASet(ds, 0x030a, 0x00);
    memoryASet(ds, 0x0306, 0x01);
    ax = 0;
    memoryASet16(ds, 0x02c6, ax);
    ax = 0;
    memoryASet16(ds, 0x5134, ax);
    memoryASet(ds, 0x513d, 0x00);
    memoryASet(ds, 0x5142, 0x00);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    goto loc_102c2;
loc_102aa: // 01ed:e3da
    if (memoryAGet16(ds, 0xa0b8) != 0x0000)
        goto loc_102bc;
    memoryASet(ds, 0xa0fc, 0x01);
    memoryASet16(ds, 0xa0b8, 0x0001);
loc_102bc: // 01ed:e3ec
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa0b4, ax);
loc_102c2: // 01ed:e3f2
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_102cc;
    goto loc_103df;
loc_102cc: // 01ed:e3fc
    memoryASet16(ds, 0x461b, 0x0001);
    if (memoryAGet(ds, 0x030a) != 0x00)
        goto loc_102ee;
    if (memoryAGet16(ds, 0x4629) != 0x0001)
        goto loc_102e8;
    memoryASet16(ds, 0x4627, 0x0019);
    goto loc_102ee;
loc_102e8: // 01ed:e418
    memoryASet16(ds, 0x4627, 0x001a);
loc_102ee: // 01ed:e41e
    memoryASet16(ds, 0x5134, memoryAGet16(ds, 0x5134) + 1);
    if (memoryAGet16(ds, 0x5134) != 0x000a)
        goto loc_10304;
    memoryASet(ds, 0x0306, 0x00);
    memoryASet16(ds, 0x5134, 0x0009);
loc_10304: // 01ed:e434
    if ((short)memoryAGet16(ds, 0x5134) < (short)0x0014)
        goto loc_1030e;
    goto loc_103df;
loc_1030e: // 01ed:e43e
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - ax);
    ax = memoryAGet16(ds, 0x5132);
    if (ax != 0x0001)
        goto loc_10386;
    ax = 0;
    push(ax);
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    ax = -ax;
    imul16(memoryAGet16(ds, 0x5132));
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_10379;
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x0010)
        goto loc_10377;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0050;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4613))
        goto loc_10377;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    imul16(memoryAGet16(ds, 0x5132));
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) - ax);
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x0010)
        goto loc_10377;
    memoryASet16(ds, 0x5130, 0x0010);
loc_10377: // 01ed:e4a7
    goto loc_10384;
loc_10379: // 01ed:e4a9
    memoryASet16(ds, 0x5134, 0x0009);
    memoryASet(ds, 0x0306, 0x00);
loc_10384: // 01ed:e4b4
    goto loc_103df;
loc_10386: // 01ed:e4b6
    if (ax != 0xffff)
        goto loc_103df;
    ax = 0;
    push(ax);
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    push(ax);
    push(cs); cs = 0x2188; sub_218c3(); assert(cs == 0x01ed);
    if (!al)
        goto loc_103d4;
    if ((short)memoryAGet16(ds, 0x5130) >= (short)0x00c8)
        goto loc_103d2;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0078;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4613))
        goto loc_103d2;
    di = memoryAGet16(ds, 0x5134);
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x00c8)
        goto loc_103d2;
    memoryASet16(ds, 0x5130, 0x00c8);
loc_103d2: // 01ed:e502
    goto loc_103df;
loc_103d4: // 01ed:e504
    memoryASet16(ds, 0x5134, 0x0009);
    memoryASet(ds, 0x0306, 0x00);
loc_103df: // 01ed:e50f
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_103e9;
    sub_fb89();
loc_103e9: // 01ed:e519
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_103ed() // 01ed:e51d +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) != 0xff9f)
        goto loc_10456;
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_10444;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_10444;
    if (memoryAGet16(ds, 0xa0ea) != 0xffff)
        goto loc_10444;
    push(cs); cs = 0x2188; sub_222b6(); assert(cs == 0x01ed);
loc_10444: // 01ed:e574
    if ((short)memoryAGet16(ds, 0x5124) <= (short)0x0000)
        goto loc_10454;
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_10454: // 01ed:e584
    goto loc_1049d;
loc_10456: // 01ed:e586
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) != 0xff9f)
        goto loc_1049d;
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_1048d;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_1048d;
    if (memoryAGet16(ds, 0xa0ea) != 0xffff)
        goto loc_1048d;
    push(cs); cs = 0x2188; sub_222b6(); assert(cs == 0x01ed);
loc_1048d: // 01ed:e5bd
    if ((short)memoryAGet16(ds, 0x5124) <= (short)0x0000)
        goto loc_1049d;
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_1049d: // 01ed:e5cd
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 4;
}
void sub_104a3() // 01ed:e5d3
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    ax = memoryAGet16(ds, 0x4611);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, 0x4613);
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0003;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(cs); cs = 0x11b2; sub_1d648(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000c;
    push(ax);
    push(memoryAGet16(ss, bp - 8));
    push(cs); cs = 0x11b2; sub_1d648(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0003;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x11b2; sub_1d648(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000c;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x11b2; sub_1d648(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0xa106) == 0x00)
        goto loc_10513;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000e;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0008;
    push(ax);
    push(cs); cs = 0x11b2; sub_1d648(); assert(cs == 0x01ed);
loc_10513: // 01ed:e643
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xff9f)
        goto loc_10566;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0003;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0002;
    push(ax);
    sub_103ed();
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000c;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x0002;
    push(ax);
    sub_103ed();
loc_10566: // 01ed:e696
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) == 0xff9d)
        goto loc_1059a;
    goto loc_10679;
loc_1059a: // 01ed:e6ca
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_105a4;
    goto loc_10676;
loc_105a4: // 01ed:e6d4
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20626, 0x0003);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20630, 0x0001);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x01);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
loc_10676: // 01ed:e7a6
    goto loc_10789;
loc_10679: // 01ed:e7a9
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) == 0xff9d)
        goto loc_106ad;
    goto loc_10789;
loc_106ad: // 01ed:e7dd
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_106b7;
    goto loc_10789;
loc_106b7: // 01ed:e7e7
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20626, 0x0003);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20630, 0x0001);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x01);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
loc_10789: // 01ed:e8b9
    if (memoryAGet(ds, 0xa0fd) == 0x00)
        goto loc_10797;
    if (memoryAGet16(ds, 0xa0b8) == 0x0000)
        goto loc_107a1;
loc_10797: // 01ed:e8c7
    if (memoryAGet(ds, 0xa0fc) != 0x00)
        goto loc_107a1;
    goto loc_109b6;
loc_107a1: // 01ed:e8d1
    ax = memoryAGet16(ss, bp - 8);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if ((short)memoryAGet16(ds, di + 20626) >= (short)0x0004)
        goto loc_107d3;
    goto loc_109b6;
loc_107d3: // 01ed:e903
    ax = memoryAGet16(ss, bp - 8);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if ((short)memoryAGet16(ds, di + 20626) <= (short)0x000c)
        goto loc_10805;
    goto loc_109b6;
loc_10805: // 01ed:e935
    ax = memoryAGet16(ss, bp - 8);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20630) == 0x0014)
        goto loc_10837;
    goto loc_109b6;
loc_10837: // 01ed:e967
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x002d)
        goto loc_10858;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0002);
loc_10858: // 01ed:e988
    memoryASet(ds, 0xa0fc, 0x00);
    memoryASet16(ds, 0xa0b8, 0x0001);
    push(cs); cs = 0x2188; sub_21ea8(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 8);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20626);
    memoryASet16(ss, bp - 10, ax);
    memoryASet(ds, 0xa10a, 0x01);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) != 0xff9e)
        goto loc_1093c;
    ax = 0x000a;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0063);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x002e;
    push(ax);
    ax = 0x000d;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax -= 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0025;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x672b;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
loc_1093c: // 01ed:ea6c
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    push(memoryAGet16(ds, 0x5120));
    ax = 0x002d;
    push(ax);
    ax = 0x0014;
    push(ax);
    ax = memoryAGet16(ss, bp - 6);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 8);
    ax--;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0xffff;
    push(ax);
    push(memoryAGet16(ss, bp - 10));
    push(memoryAGet16(ss, bp - 10));
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x69d3;
    dx = 0x2188;
    push(dx);
    push(ax);
    push(cs);
    sub_234d();
    memoryASet(ds, 0xa10a, 0x00);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, 0x0032);
    memoryASet16(ds, 0x461b, 0x0001);
    if (memoryAGet16(ds, 0x4629) != 0x0001)
        goto loc_109b0;
    memoryASet16(ds, 0x4627, 0x0019);
    goto loc_109b6;
loc_109b0: // 01ed:eae0
    memoryASet16(ds, 0x4627, 0x001a);
loc_109b6: // 01ed:eae6
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_109ba() // 01ed:eaea
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet(ds, 0xa0f8) == 0x00)
        goto loc_109d0;
    if ((short)memoryAGet16(ds, 0xa0c4) > (short)0xffff)
        goto loc_109d0;
    memoryASet(ds, 0xa0f8, 0x00);
loc_109d0: // 01ed:eb00
    if (memoryAGet(ds, 0xa100) == 0x00)
        goto loc_109e8;
    if ((short)memoryAGet16(ds, 0xa0c4) > (short)0xffff)
        goto loc_109e8;
    push(cs); cs = 0x11b2; sub_1d616(); assert(cs == 0x01ed);
    memoryASet(ds, 0xa100, 0x00);
loc_109e8: // 01ed:eb18
    if (memoryAGet(ds, 0x030b) == 0x00)
        goto loc_10a43;
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_10a43;
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    cx = memoryAGet16(ds, 0x4611);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    cx = memoryAGet16(ds, 0x4613);
    ax = memoryAGet16(ds, 0x02f2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
loc_10a43: // 01ed:eb73
    if (memoryAGet(ds, 0xa10d) == 0x00)
        goto loc_10a5b;
    if ((short)memoryAGet16(ds, 0xa0c4) > (short)0xffff)
        goto loc_10a5b;
    memoryASet(ds, 0xa10d, 0x00);
    memoryASet(ds, 0x513c, 0x01);
loc_10a5b: // 01ed:eb8b
    if (memoryAGet(ds, 0x3391) == 0x00)
        goto loc_10a6b;
    push(cs); cs = 0x11b2; sub_1866d(); assert(cs == 0x01ed);
    push(cs);
    sub_25be();
loc_10a6b: // 01ed:eb9b
    if (memoryAGet(ds, 0xa10f) == 0x00)
        goto loc_10a7b;
    push(cs);
    sub_25dd();
    memoryASet(ds, 0xa10f, 0x00);
loc_10a7b: // 01ed:ebab
    if ((short)memoryAGet16(ds, 0xa0b8) <= (short)0x0000)
        goto loc_10a92;
    memoryASet16(ds, 0xa0b8, memoryAGet16(ds, 0xa0b8) + 1);
    if ((short)memoryAGet16(ds, 0xa0b8) <= (short)0x0009)
        goto loc_10a92;
    ax = 0;
    memoryASet16(ds, 0xa0b8, ax);
loc_10a92: // 01ed:ebc2
    if ((short)memoryAGet16(ds, 0xa0ea) <= (short)0xffff)
        goto loc_10abe;
    memoryASet16(ds, 0xa0ea, memoryAGet16(ds, 0xa0ea) + 1);
    if ((short)memoryAGet16(ds, 0xa0ea) <= (short)0x0013)
        goto loc_10aaa;
    memoryASet16(ds, 0xa0ea, 0xffff);
loc_10aaa: // 01ed:ebda
    ax = memoryAGet16(ds, 0xa0ea);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0007;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_10abe;
    memoryASet16(ds, 0x460d, 0x0001);
loc_10abe: // 01ed:ebee
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_10ac2() // 01ed:ebf2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet16(ds, 0x02e0, memoryAGet16(ds, 0x02e0) + 1);
    if ((short)memoryAGet16(ds, 0x02e0) <= (short)0x7d00)
        goto loc_10ada;
    memoryASet16(ds, 0x02e0, 0x0019);
loc_10ada: // 01ed:ec0a
    memoryASet16(ds, 0xa0ce, memoryAGet16(ds, 0xa0ce) + 1);
    if ((short)memoryAGet16(ds, 0xa0ce) <= (short)0x010e)
        goto loc_10b07;
    if (memoryAGet(ds, 0xa10b) != 0x00)
        goto loc_10b07;
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    if (ax >= 0x0023)
        goto loc_10b02;
    memoryASet(ds, 0xa10b, 0x01);
    goto loc_10b07;
loc_10b02: // 01ed:ec32
    ax = 0;
    memoryASet16(ds, 0xa0ce, ax);
loc_10b07: // 01ed:ec37
    if (memoryAGet(ds, 0xa10b) != 0x00)
        goto loc_10b11;
    goto loc_10c71;
loc_10b11: // 01ed:ec41
    if (memoryAGet(ds, 0xa126) == 0x00)
        goto loc_10b1b;
    goto loc_10c71;
loc_10b1b: // 01ed:ec4b
    if (memoryAGet16(ds, 0xa0d0) == 0xffff)
        goto loc_10b25;
    goto loc_10c10;
loc_10b25: // 01ed:ec55
    ax = 0x0140;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 2, ax);
    ax = 0x00c8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ds, 0x512e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ds, 0x5130);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0000)
        goto loc_10b7f;
    goto loc_10c0e;
loc_10b7f: // 01ed:ecaf
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_10c0e;
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x01ed);
    ax += 0x0025;
    bx = ax;
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, bx);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0001);
    ax = memoryAGet16(ss, bp - 6);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    memoryASet16(ds, 0xa0d0, ax);
    ax = memoryAGet16(ss, bp - 8);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    memoryASet16(ds, 0xa0d2, ax);
    push(memoryAGet16(ds, 0xa0d0));
    push(memoryAGet16(ds, 0xa0d2));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x01ed);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_10c0e: // 01ed:ed3e
    goto loc_10c71;
loc_10c10: // 01ed:ed40
    if ((short)memoryAGet16(ds, 0xa0ce) <= (short)0x019e)
        goto loc_10c71;
    memoryASet(ds, 0xa10b, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0ce, ax);
    ax = memoryAGet16(ds, 0xa0d0);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ds, 0xa0d2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 6);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ds, 0xa0d0));
    push(memoryAGet16(ds, 0xa0d2));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x01ed);
    memoryASet16(ds, 0xa0d0, 0xffff);
    memoryASet16(ds, 0xa0d2, 0xffff);
loc_10c71: // 01ed:eda1
    if ((short)memoryAGet16(ds, 0xa0be) > (short)0x0000)
        goto loc_10c7b;
    goto loc_10d4f;
loc_10c7b: // 01ed:edab
    if (memoryAGet16(ds, 0xa0cc) == 0x0000)
        goto loc_10c85;
    goto loc_10d4f;
loc_10c85: // 01ed:edb5
    if (memoryAGet(ds, 0xa0f5) == 0x00)
        goto loc_10c8f;
    goto loc_10d4f;
loc_10c8f: // 01ed:edbf
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ac8d(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0xa107) == 0x00)
        goto loc_10cb9;
    if ((short)memoryAGet16(ds, 0xa0be) <= (short)0x0000)
        goto loc_10cb9;
    push(cs); cs = 0x11b2; sub_176ae(); assert(cs == 0x01ed);
    memoryASet(ds, 0xa107, 0x00);
loc_10cb9: // 01ed:ede9
    memoryASet(ds, 0xa0f5, 0x01);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0e2);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0e2);
    cx = 0x0004;
    ax <<= cl;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0xa0e0);
    ax <<= 1;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x00);
loc_10d4f: // 01ed:ee7f
    if (memoryAGet(ds, 0xa0ff) == 0x00)
        goto loc_10d69;
    if ((short)memoryAGet16(ds, 0xa0c4) > (short)0xffff)
        goto loc_10d69;
    if (memoryAGet(ds, 0x4660) == 0x00)
        goto loc_10d69;
    memoryASet(ds, 0xa0ff, 0x00);
loc_10d69: // 01ed:ee99
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_10d77;
    if (memoryAGet(ds, 0xa0f4) != 0x00)
        goto loc_10d7e;
loc_10d77: // 01ed:eea7
    if (memoryAGet(ds, 0x3390) == 0x00)
        goto loc_10d81;
loc_10d7e: // 01ed:eeae
    sub_ee3c();
loc_10d81: // 01ed:eeb1
    if (memoryAGet(ds, 0x3388) == 0x00)
        goto loc_10d8d;
    push(cs); cs = 0x11b2; sub_19848(); assert(cs == 0x01ed);
loc_10d8d: // 01ed:eebd
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_10d91() // 01ed:eec1
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ss, bp - 2, 0x0001);
loc_10d9c: // 01ed:eecc
    ax = memoryAGet16(ss, bp - 2);
    if ((short)ax > (short)memoryAGet16(ds, 0x510a))
        goto loc_10dd8;
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    push(memoryAGet16(ds, di + 20704));
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    push(memoryAGet16(ds, di + 20724));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    push(memoryAGet16(ds, di + 20704));
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    push(memoryAGet16(ds, di + 20724));
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    goto loc_10d9c;
loc_10dd8: // 01ed:ef08
    ax = 0;
    memoryASet16(ds, 0x510a, ax);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_10e08() // 01ed:ef38
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    push(cs); cs = 0x2da3; sub_2dde5(); assert(cs == 0x01ed);
    memoryASet16(ss, bp - 8, ax);
    memoryASet16(ss, bp - 6, dx);
    if ((short)memoryAGet16(ss, bp - 6) < (short)0x0003)
        goto loc_10e28;
    if ((short)memoryAGet16(ss, bp - 6) > (short)0x0003)
        goto loc_10e67;
    if (memoryAGet16(ss, bp - 8) >= 0x0d40)
        goto loc_10e67;
loc_10e28: // 01ed:ef58
    di = 0xa23c;
    push(ds);
    push(di);
    di = 0xef11;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e9e6(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2e91e(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x01ed);
    di = 0xa23c;
    push(ds);
    push(di);
    di = 0xef24;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e9e6(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2e91e(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x01ed);
    ax = 0;
    push(cs); cs = 0x2da3; sub_2db08(); assert(cs == 0x01ed);
loc_10e67: // 01ed:ef97
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_10e6b() // 01ed:ef9b
{
    sp -= 2;
    push(cs); cs = 0x2da3; sub_2da30(); assert(cs == 0x01ed);
    push(cs); cs = 0x2aa3; sub_2aa30(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a41; sub_2a410(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a31; sub_2a388(); assert(cs == 0x01ed);
    push(cs); cs = 0x1f5c; sub_1f5c0(); assert(cs == 0x01ed);
    push(cs); cs = 0x1f0b; sub_1f477(); assert(cs == 0x01ed);
    push(bp);
    bp = sp;
    sp -= 0x0002;
    sub_10e08();
    push(cs); cs = 0x28b3; sub_2a21f(); assert(cs == 0x01ed);
    push(cs); cs = 0x2da3; sub_2e437(); assert(cs == 0x01ed);
    sub_29fd();
    memoryASet(ds, 0x513f, 0x00);
    sub_2b0e();
    push(cs); cs = 0x11b2; sub_1a05b(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_1a258(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_1d03b(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_1d15c(); assert(cs == 0x01ed);
    push(cs);
    sub_11af4();
    memoryASet(ds, 0xa10c, 0x00);
    push(cs); cs = 0x11b2; sub_1c95b(); assert(cs == 0x01ed);
loc_10ec9: // 01ed:eff9
    if (memoryAGet(ds, 0x3396) == 0x00)
        goto loc_10ed3;
    goto loc_11a03;
loc_10ed3: // 01ed:f003
    if (memoryAGet(ds, 0xa0fb) != 0x00)
        goto loc_10f13;
    sub_2b0e();
    push(cs); cs = 0x11b2; sub_1a05b(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x01ed);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab29(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x02be, ax);
    memoryASet(ds, 0xa0fe, 0x01);
    push(cs); cs = 0x11b2; sub_19d85(); assert(cs == 0x01ed);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x01ed);
    goto loc_10f18;
loc_10f13: // 01ed:f043
    memoryASet(ds, 0xa110, 0x00);
loc_10f18: // 01ed:f048
    push(cs); cs = 0x28b3; sub_2921c(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0xa110) != 0x00)
        goto loc_10f8e;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x01ed);
    ax = 0x0050;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab29(); assert(cs == 0x01ed);
    memoryASet16(ds, 0x02be, ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ac8d(); assert(cs == 0x01ed);
    push(cs); cs = 0x28b3; sub_2921c(); assert(cs == 0x01ed);
    if ((short)memoryAGet16(ds, 0x2b76) <= (short)0x0001)
        goto loc_10f5f;
    push(memoryAGet16(ds, 0x2b76));
    sub_f492();
    if (!al)
        goto loc_10f58;
loc_10f58: // 01ed:f088
    ax = 0;
    memoryASet16(ds, 0x2b76, ax);
    goto loc_10f8e;
loc_10f5f: // 01ed:f08f
    if (memoryAGet(ds, 0xa0fb) == 0x00)
        goto loc_10f6e;
    memoryASet16(ds, 0xa0be, 0xfffe);
    goto loc_10f87;
loc_10f6e: // 01ed:f09e
    if (memoryAGet(ds, 0xa10c) != 0x00)
        goto loc_10f82;
    memoryASet16(ds, 0xa0be, 0xffff);
    memoryASet(ds, 0xa10c, 0x01);
    goto loc_10f87;
loc_10f82: // 01ed:f0b2
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
loc_10f87: // 01ed:f0b7
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
loc_10f8e: // 01ed:f0be
    ax = 0;
    memoryASet16(ds, 0x2b5c, ax);
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
loc_10f98: // 01ed:f0c8
    if (memoryAGet(ds, 0xa110) == 0x00)
        goto loc_10fa2;
    goto loc_119e0;
loc_10fa2: // 01ed:f0d2
    ax = memoryAGet16(ds, 0x2b60);
//    if ((short)ax > (short)memoryAGet16(ds, 0xa0c0))
        goto loc_10fae;
    goto loc_119dd;
loc_10fae: // 01ed:f0de
    if (memoryAGet(ds, 0x030c) == 0x00)
        goto loc_10fb8;
    goto loc_119dd;
loc_10fb8: // 01ed:f0e8
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    push(cs); cs = 0x11b2; sub_1d485(); assert(cs == 0x01ed);
    sub_10d91();
    push(cs); cs = 0x2a31; sub_2a368(); assert(cs == 0x01ed);
    memoryASet(ds, 0xa0f4, al);
    memoryASet16(ds, 0x02c0, 0x0001);
    if (memoryAGet(ds, 0x0306) != 0x00)
        goto loc_10ff6;
    if (memoryAGet(ds, 0xa0fd) != 0x00)
        goto loc_10ff6;
    if (memoryAGet16(ds, 0x5128) != 0x0000)
        goto loc_10ff6;
    if (memoryAGet16(ds, 0x5126) != 0x0000)
        goto loc_10ff6;
    if (memoryAGet16(ds, 0x5118) == 0x0000)
        goto loc_1105a;
loc_10ff6: // 01ed:f126
    memoryASet16(ds, 0x02c2, 0xffff);
    goto loc_11002;
loc_10ffe: // 01ed:f12e
    memoryASet16(ds, 0x02c2, memoryAGet16(ds, 0x02c2) + 1);
loc_11002: // 01ed:f132
    memoryASet16(ds, 0x02c4, 0xffff);
    goto loc_1100e;
loc_1100a: // 01ed:f13a
    memoryASet16(ds, 0x02c4, memoryAGet16(ds, 0x02c4) + 1);
loc_1100e: // 01ed:f13e
    ax = memoryAGet16(ds, 0x02c2);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += cx;
    push(ax);
    ax = memoryAGet16(ds, 0x02c4);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += cx;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x02c4) != 0x0001)
        goto loc_1100a;
    if (memoryAGet16(ds, 0x02c2) != 0x0001)
        goto loc_10ffe;
    goto loc_110ee;
loc_1105a: // 01ed:f18a
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
loc_110ee: // 01ed:f21e
    memoryASet16(ds, 0x02c0, 0x0002);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_11108;
    goto loc_1119c;
loc_11108: // 01ed:f238
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
loc_1119c: // 01ed:f2cc
    memoryASet16(ds, 0x02c0, 0x0003);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_111b6;
    goto loc_1124a;
loc_111b6: // 01ed:f2e6
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x000f;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
loc_1124a: // 01ed:f37a
    memoryASet16(ds, 0x02c0, 0x0004);
    goto loc_11256;
loc_11252: // 01ed:f382
    memoryASet16(ds, 0x02c0, memoryAGet16(ds, 0x02c0) + 1);
loc_11256: // 01ed:f386
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17886) < (short)0x0002)
        goto loc_1126a;
    goto loc_11361;
loc_1126a: // 01ed:f39a
    ax = 0x0028;
    push(ax);
    push(memoryAGet16(ds, 0x02c0));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    push(ax);
    sub_2e08();
    if (al)
        goto loc_112b1;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0xffff)
        goto loc_112b1;
    goto loc_11361;
loc_112b1: // 01ed:f3e1
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_11304;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_11361;
loc_11304: // 01ed:f434
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if ((short)ax >= 0)
        goto loc_11318;
    ax = -ax;
loc_11318: // 01ed:f448
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += cx;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    if ((short)ax >= 0)
        goto loc_11344;
    ax = -ax;
loc_11344: // 01ed:f474
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += cx;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x01ed);
loc_11361: // 01ed:f491
    if (memoryAGet16(ds, 0x02c0) == 0x003c)
        goto loc_1136b;
    goto loc_11252;
loc_1136b: // 01ed:f49b
    memoryASet16(ds, 0x02c0, 0x0001);
    goto loc_11377;
loc_11373: // 01ed:f4a3
    memoryASet16(ds, 0x02c0, memoryAGet16(ds, 0x02c0) + 1);
loc_11377: // 01ed:f4a7
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, cx);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17898, cx);
    if (memoryAGet16(ds, 0x02c0) != 0x003c)
        goto loc_11373;
    if (memoryAGet(ds, 0xa0fb) != 0x00)
        goto loc_113e7;
    if (memoryAGet(ds, 0xa126) != 0x00)
        goto loc_113e7;
    if (memoryAGet(ds, 0xa0f6) != 0x00)
        goto loc_113e7;
    if (memoryAGet(ds, 0xa0f7) != 0x00)
        goto loc_113e7;
    if (memoryAGet16(ds, 0x5124) != 0x0000)
        goto loc_113e7;
    sub_fee1();
    sub_1023b();
    sub_104a3();
    sub_10ac2();
    goto loc_11436;
loc_113e7: // 01ed:f517
    if (memoryAGet(ds, 0xa0f6) == 0x00)
        goto loc_113f3;
    sub_f230();
    goto loc_11436;
loc_113f3: // 01ed:f523
    if (memoryAGet(ds, 0xa0f7) == 0x00)
        goto loc_113ff;
    sub_f3b5();
    goto loc_11436;
loc_113ff: // 01ed:f52f
    if (memoryAGet(ds, 0xa0fb) == 0x00)
        goto loc_1140b;
    sub_f5e0();
    goto loc_11436;
loc_1140b: // 01ed:f53b
    if (memoryAGet(ds, 0xa126) == 0x00)
        goto loc_11417;
    sub_f5a4();
    goto loc_11436;
loc_11417: // 01ed:f547
    ax = memoryAGet16(ds, 0x5124);
    if (ax != 0x0001)
        goto loc_11424;
    sub_f04d();
    goto loc_11436;
loc_11424: // 01ed:f554
    if (ax != 0x0002)
        goto loc_1142e;
    sub_f096();
    goto loc_11436;
loc_1142e: // 01ed:f55e
    if (ax != 0x0003)
        goto loc_11436;
    sub_f212();
loc_11436: // 01ed:f566
    sub_109ba();
    sub_f5fa();
    ax = memoryAGet16(ds, 0x5120);
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 2))
        goto loc_1144c;
    goto loc_1166a;
loc_1144c: // 01ed:f57c
    memoryASet16(ds, 0x02c0, ax);
    goto loc_11455;
loc_11451: // 01ed:f581
    memoryASet16(ds, 0x02c0, memoryAGet16(ds, 0x02c0) + 1);
loc_11455: // 01ed:f585
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) == 0x00)
        goto loc_11469;
    goto loc_1165f;
loc_11469: // 01ed:f599
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ds, 0x02c0));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    sub_2e08();
    if (al)
        goto loc_11497;
    goto loc_1165f;
loc_11497: // 01ed:f5c7
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17888) == 0x0000)
        goto loc_114ab;
    goto loc_115a4;
loc_114ab: // 01ed:f5db
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_11537;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17902);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    ax--;
    ax += cx;
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
    goto loc_115a1;
loc_11537: // 01ed:f667
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17902);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    ax--;
    ax += cx;
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
loc_115a1: // 01ed:f6d1
    goto loc_1165f;
loc_115a4: // 01ed:f6d4
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17902);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    ax--;
    ax += cx;
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2cdb9(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x02c0) != 0x0001)
        goto loc_11627;
    if ((short)memoryAGet16(ds, 0xa0ea) >= (short)0x0004)
        goto loc_11625;
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_11625: // 01ed:f755
    goto loc_11630;
loc_11627: // 01ed:f757
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_11630: // 01ed:f760
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, memoryAGet16(ds, di + 17888) + 1);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17888) <= (short)0x0004)
        goto loc_1165f;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17888, ax);
loc_1165f: // 01ed:f78f
    ax = memoryAGet16(ds, 0x02c0);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_1166a;
    goto loc_11451;
loc_1166a: // 01ed:f79a
    if (memoryAGet16(ds, 0xa0be) != 0x0000)
        goto loc_116a3;
    ax = memoryAGet16(ds, 0x4627);
    ax--;
    ax += memoryAGet16(ds, 0x461b);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x4619);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x4611));
    ax = memoryAGet16(ds, 0x4613);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x01ed);
loc_116a3: // 01ed:f7d3
    memoryASet16(ds, 0x02c2, 0xfffe);
    goto loc_116af;
loc_116ab: // 01ed:f7db
    memoryASet16(ds, 0x02c2, memoryAGet16(ds, 0x02c2) + 1);
loc_116af: // 01ed:f7df
    memoryASet16(ds, 0x02c4, 0xfffe);
    goto loc_116bb;
loc_116b7: // 01ed:f7e7
    memoryASet16(ds, 0x02c4, memoryAGet16(ds, 0x02c4) + 1);
loc_116bb: // 01ed:f7eb
    ax = memoryAGet16(ds, 0x02c2);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x4615);
    push(ax);
    ax = memoryAGet16(ds, 0x02c4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x4617);
    push(ax);
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
    if (memoryAGet16(ds, 0x02c4) != 0x0002)
        goto loc_116b7;
    if (memoryAGet16(ds, 0x02c2) != 0x0002)
        goto loc_116ab;
    memoryASet16(ds, 0x02c0, 0x0002);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0x0002)
        goto loc_11745;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
loc_11745: // 01ed:f875
    memoryASet16(ds, 0x02c0, 0x0005);
    goto loc_11751;
loc_1174d: // 01ed:f87d
    memoryASet16(ds, 0x02c0, memoryAGet16(ds, 0x02c0) + 1);
loc_11751: // 01ed:f881
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17886) < (short)0x0002)
        goto loc_11765;
    goto loc_11819;
loc_11765: // 01ed:f895
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ds, 0x02c0));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    push(ax);
    sub_2e08();
    if (al)
        goto loc_1179b;
    goto loc_11819;
loc_1179b: // 01ed:f8cb
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if ((short)ax >= 0)
        goto loc_117d0;
    ax = -ax;
loc_117d0: // 01ed:f900
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    if ((short)ax >= 0)
        goto loc_117fc;
    ax = -ax;
loc_117fc: // 01ed:f92c
    cx = 0x000f;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    push(ax);
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x01ed);
loc_11819: // 01ed:f949
    if (memoryAGet16(ds, 0x02c0) == 0x003c)
        goto loc_11823;
    goto loc_1174d;
loc_11823: // 01ed:f953
    memoryASet16(ds, 0x02c0, 0x0004);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) == 0x00)
        goto loc_1183d;
    goto loc_118d9;
loc_1183d: // 01ed:f96d
    ax = 0x0020;
    push(ax);
    push(memoryAGet16(ds, 0x02c0));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    sub_2e08();
    if (!al)
        goto loc_118d9;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17902);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17914);
    ax--;
    ax += cx;
    dx = 0x00a0;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di = memoryAGet16(ds, di + 17900);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += cx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ds, 0x02c0);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x01ed);
loc_118d9: // 01ed:fa09
    push(cs); cs = 0x11b2; sub_1d4a1(); assert(cs == 0x01ed);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if (memoryAGet(ds, 0xa0fe) == 0x00)
        goto loc_118fe;
    push(cs); cs = 0x11b2; sub_1ed02(); assert(cs == 0x01ed);
loc_118fe: // 01ed:fa2e
    if (memoryAGet(ds, 0x338d) == 0x00)
        goto loc_1194b;
    memoryASet(ds, 0x338d, 0x00);
    if ((short)memoryAGet16(ds, 0xa0be) <= (short)0x0000)
        goto loc_1194b;
    di = memoryAGet16(ds, 0xa0be);
    memoryASet(ds, di + 20648, 0x01);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    memoryASet(ds, 0x0306, 0x00);
    memoryASet(ds, 0xa0f6, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0be, ax);
    sub_ee16();
    ax = memoryAGet16(ds, 0x50a0);
    if ((short)ax <= (short)memoryAGet16(ds, 0x50c2))
        goto loc_11944;
    ax = memoryAGet16(ds, 0x50c2);
    memoryASet16(ds, 0x50a0, ax);
loc_11944: // 01ed:fa74
    push(memoryAGet16(ds, 0xa0be));
    sub_d079();
loc_1194b: // 01ed:fa7b
    if (memoryAGet(ds, 0xa10e) == 0x00)
        goto loc_11991;
    memoryASet(ds, 0xa10e, 0x00);
    memoryASet(ds, 0xa126, 0x00);
    push(cs); cs = 0x11b2; sub_1c189(); assert(cs == 0x01ed);
    if (memoryAGet(ds, 0x3395) == 0x00)
        goto loc_11991;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    ax = memoryAGet16(ds, 0x2b78);
    memoryASet16(ds, 0xa0be, ax);
    di = 0x5098;
    push(ds);
    push(di);
    di = 0x50ba;
    push(ds);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x01ed);
    push(memoryAGet16(ds, 0x2b78));
    sub_d079();
loc_11991: // 01ed:fac1
    if (memoryAGet(ds, 0x3393) == 0x00)
        goto loc_119a2;
    memoryASet(ds, 0x3393, 0x00);
    push(cs); cs = 0x11b2; sub_14f05(); assert(cs == 0x01ed);
loc_119a2: // 01ed:fad2
    if (memoryAGet(ds, 0x338c) == 0x00)
        goto loc_119dd;
    memoryASet(ds, 0x338c, 0x00);
    if (memoryAGet16(ds, 0xa0be) != 0x0000)
        goto loc_119dd;
    push(cs); cs = 0x11b2; sub_1c24f(); assert(cs == 0x01ed);
    if ((short)memoryAGet16(ds, 0x2b76) <= (short)0x0001)
        goto loc_119d8;
    push(memoryAGet16(ds, 0x2b76));
    sub_f492();
    if (al)
        goto loc_119cc;
loc_119cc: // 01ed:fafc
    ax = 0;
    memoryASet16(ds, 0x2b76, ax);
    memoryASet(ds, 0xa10c, 0x01);
    goto loc_119dd;
loc_119d8: // 01ed:fb08
    push(cs); cs = 0x11b2; sub_17a14(); assert(cs == 0x01ed);
loc_119dd: // 01ed:fb0d
    goto loc_10f98;
loc_119e0: // 01ed:fb10
    if (memoryAGet(ds, 0xa0fb) != 0x00)
        goto loc_11a00;
    if (memoryAGet(ds, 0x3394) == 0x00)
        goto loc_11a00;
    push(memoryAGet16(ds, 0x50a7));
    push(memoryAGet16(ds, 0x50a5));
    push(cs); cs = 0x11b2; sub_1a4bd(); assert(cs == 0x01ed);
    memoryASet(ds, 0x3394, 0x00);
loc_11a00: // 01ed:fb30
    goto loc_10ec9;
loc_11a03: // 01ed:fb33
    ax = 0x001a;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x01ed);
loc_11a0c: // 01ed:fb3c
    if (memoryAGet(ds, 0x513f) == 0x00)
        goto loc_11a15;
    goto loc_11a0c;
loc_11a15: // 01ed:fb45
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x01ed);
    push(cs); cs = 0x11b2; sub_19fb1(); assert(cs == 0x01ed);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab1b(); assert(cs == 0x01ed);
    push(cs); cs = 0x2a41; sub_2a703(); assert(cs == 0x01ed);
    push(cs);
    sub_11b08();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    sub_2a58();
    push(cs); cs = 0x11b2; sub_1a852(); assert(cs == 0x01ed);
    push(cs);
    sub_11a82();
    sp = bp;
    bp = pop();
    ax = 0;
    push(cs); cs = 0x2da3; sub_2db08(); assert(cs == 0x01ed);
    stop("terminating");
}
void sub_11a66() // 01ed:fb96 +far
{
    out8(0x70, al);
    goto loc_11a6a;
loc_11a6a: // 01ed:fb9a
    goto loc_11a6c;
loc_11a6c: // 01ed:fb9c
    al = in8(0x71);
    goto loc_11a70;
loc_11a70: // 01ed:fba0
    goto loc_11a72;
loc_11a72: // 01ed:fba2
    ah = al;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ah >>= 1;
    ax &= 0x0f0f;
    stop("aad");
    cs = pop();
}
void sub_11a82() // 01ed:fbb2
{
    ax = 0;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet(cs, 0xfb91, al);
    al = 0x02;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet(cs, 0xfb90, al);
    al = 0x04;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet(cs, 0xfb8f, al);
    al = 0x07;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet(cs, 0xfb93, al);
    al = 0x08;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet(cs, 0xfb92, al);
    al = 0x09;
    push(cs); cs = 0x01ed; sub_11a66(); assert(cs == 0x01ed);
    memoryASet16(cs, 0xfb94, ax);
    ax = 0;
    ah = 0x2d;
    ch = memoryAGet(cs, 0xfb8f);
    cl = memoryAGet(cs, 0xfb90);
    dh = memoryAGet(cs, 0xfb91);
    dl = 0x32;
    interrupt(0x21);
    ax = 0;
    ah = 0x2b;
    cx = 0x076c;
    cx += memoryAGet16(cs, 0xfb94);
    dh = memoryAGet(cs, 0xfb92);
    dl = memoryAGet(cs, 0xfb93);
    interrupt(0x21);
    cs = pop();
}
void sub_11af4() // 01ed:fc24
{
    bx = 0x2147;
    flags.interrupts = 0;
    al = 0x36;
    out8(0x43, al);
    al = 0x00;
    al = bl;
    out8(0x40, al);
    al = bh;
    out8(0x40, al);
    flags.interrupts = 1;
    cs = pop();
}
void sub_11b08() // 01ed:fc38
{
    flags.interrupts = 0;
    al = 0x36;
    out8(0x43, al);
    al = 0x00;
    out8(0x40, al);
    out8(0x40, al);
    flags.interrupts = 1;
    cs = pop();
}
void sub_11b20() // 11b2:0000 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet(ds, 0x338e, 0x00);
    memoryASet(ds, 0x338f, 0x00);
    memoryASet(ds, 0x3390, 0x00);
    memoryASet(ds, 0x338f, 0x00);
    memoryASet(ds, 0x338e, 0x00);
    memoryASet(ds, 0x3392, 0x00);
    memoryASet(ds, 0x3388, 0x00);
    memoryASet(ds, 0x3393, 0x00);
    memoryASet(ds, 0x3391, 0x00);
    memoryASet(ds, 0xa10e, 0x00);
    memoryASet(ds, 0xa10f, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_11c0c() // 11b2:00ec +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0002)
        goto loc_11c2d;
    di = 0x003e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11c2d: // 11b2:010d
    if (ax != 0x0003)
        goto loc_11c48;
    di = 0x0040;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11c48: // 11b2:0128
    if (ax != 0x0004)
        goto loc_11c63;
    di = 0x0042;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11c63: // 11b2:0143
    if (ax != 0x0005)
        goto loc_11c7e;
    di = 0x0044;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11c7e: // 11b2:015e
    if (ax != 0x0006)
        goto loc_11c99;
    di = 0x0046;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11c99: // 11b2:0179
    if (ax != 0x0007)
        goto loc_11cb4;
    di = 0x0048;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11cb4: // 11b2:0194
    if (ax != 0x0008)
        goto loc_11ccf;
    di = 0x004a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11ccf: // 11b2:01af
    if (ax != 0x0009)
        goto loc_11cea;
    di = 0x004c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11cea: // 11b2:01ca
    if (ax != 0x000a)
        goto loc_11d05;
    di = 0x004e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d05: // 11b2:01e5
    if (ax != 0x000b)
        goto loc_11d20;
    di = 0x0050;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d20: // 11b2:0200
    if (ax != 0x0011)
        goto loc_11d3b;
    di = 0x0052;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d3b: // 11b2:021b
    if (ax != 0x0012)
        goto loc_11d56;
    di = 0x0054;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d56: // 11b2:0236
    if (ax != 0x0013)
        goto loc_11d71;
    di = 0x0056;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d71: // 11b2:0251
    if (ax != 0x0014)
        goto loc_11d8c;
    di = 0x0058;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11d8c: // 11b2:026c
    if (ax != 0x0015)
        goto loc_11da7;
    di = 0x005a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11da7: // 11b2:0287
    if (ax != 0x0016)
        goto loc_11dc2;
    di = 0x005c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11dc2: // 11b2:02a2
    if (ax != 0x0017)
        goto loc_11ddd;
    di = 0x005e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11ddd: // 11b2:02bd
    if (ax != 0x0018)
        goto loc_11df8;
    di = 0x0060;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11df8: // 11b2:02d8
    if (ax != 0x001c)
        goto loc_11e13;
    di = 0x0062;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e13: // 11b2:02f3
    if (ax != 0x001d)
        goto loc_11e2e;
    di = 0x0068;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e2e: // 11b2:030e
    if (ax != 0x001e)
        goto loc_11e49;
    di = 0x006d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e49: // 11b2:0329
    if (ax != 0x001f)
        goto loc_11e64;
    di = 0x006f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e64: // 11b2:0344
    if (ax != 0x0020)
        goto loc_11e7f;
    di = 0x0071;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e7f: // 11b2:035f
    if (ax != 0x0021)
        goto loc_11e9a;
    di = 0x0073;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11e9a: // 11b2:037a
    if (ax != 0x0022)
        goto loc_11eb5;
    di = 0x0075;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11eb5: // 11b2:0395
    if (ax != 0x0024)
        goto loc_11ed0;
    di = 0x0077;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11ed0: // 11b2:03b0
    if (ax != 0x0025)
        goto loc_11eeb;
    di = 0x0079;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11eeb: // 11b2:03cb
    if (ax != 0x0026)
        goto loc_11f06;
    di = 0x007b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f06: // 11b2:03e6
    if (ax != 0x002c)
        goto loc_11f21;
    di = 0x007d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f21: // 11b2:0401
    if (ax != 0x002d)
        goto loc_11f3c;
    di = 0x007f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f3c: // 11b2:041c
    if (ax != 0x002e)
        goto loc_11f57;
    di = 0x0081;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f57: // 11b2:0437
    if (ax != 0x002f)
        goto loc_11f72;
    di = 0x0083;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f72: // 11b2:0452
    if (ax != 0x0030)
        goto loc_11f8d;
    di = 0x0085;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11f8d: // 11b2:046d
    if (ax != 0x0031)
        goto loc_11fa8;
    di = 0x0087;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11fa8: // 11b2:0488
    if (ax != 0x0032)
        goto loc_11fc3;
    di = 0x0089;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11fc3: // 11b2:04a3
    if (ax != 0x0033)
        goto loc_11fde;
    di = 0x008b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11fde: // 11b2:04be
    if (ax != 0x0034)
        goto loc_11ff9;
    di = 0x008d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_11ff9: // 11b2:04d9
    if (ax != 0x0035)
        goto loc_12014;
    di = 0x008f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12014: // 11b2:04f4
    if (ax != 0x0038)
        goto loc_1202f;
    di = 0x0091;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_1202f: // 11b2:050f
    if (ax != 0x0039)
        goto loc_1204a;
    di = 0x0095;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_1204a: // 11b2:052a
    if (ax != 0x0047)
        goto loc_12065;
    di = 0x009b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12065: // 11b2:0545
    if (ax != 0x0048)
        goto loc_12080;
    di = 0x00a0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12080: // 11b2:0560
    if (ax != 0x0049)
        goto loc_1209b;
    di = 0x00a9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_1209b: // 11b2:057b
    if (ax != 0x004b)
        goto loc_120b6;
    di = 0x00ae;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_120b6: // 11b2:0596
    if (ax != 0x004d)
        goto loc_120d1;
    di = 0x00b9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_120d1: // 11b2:05b1
    if (ax != 0x004f)
        goto loc_120eb;
    di = 0x00c5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_120eb: // 11b2:05cb
    if (ax != 0x0050)
        goto loc_12105;
    di = 0x00c9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12105: // 11b2:05e5
    if (ax != 0x0051)
        goto loc_1211f;
    di = 0x00d4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_1211f: // 11b2:05ff
    if (ax != 0x0052)
        goto loc_12139;
    di = 0x00d9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12139: // 11b2:0619
    if (ax != 0x0053)
        goto loc_12153;
    di = 0x00e0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_12166;
loc_12153: // 11b2:0633
    di = 0x00e7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
loc_12166: // 11b2:0646
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_121e4() // 11b2:06c4 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0306;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x064c;
    push(cs);
    push(di);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    memoryASet16(ss, bp - 518, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 518))
        goto loc_12229;
    goto loc_12341;
loc_12229: // 11b2:0709
    memoryASet16(ss, bp - 258, ax);
    goto loc_12233;
loc_1222f: // 11b2:070f
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_12233: // 11b2:0713
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = bp - 516;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e11d(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 260, ax);
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = 0x06c2;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_12283;
    goto loc_12334;
loc_12283: // 11b2:0763
    if ((short)memoryAGet16(ss, bp - 260) < (short)0x005d)
        goto loc_122c2;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x005d;
    ax += 0x0015;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_12334;
loc_122c2: // 11b2:07a2
    if ((short)memoryAGet16(ss, bp - 260) > (short)0x0048)
        goto loc_12301;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0020;
    ax += 0x000a;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_12334;
loc_12301: // 11b2:07e1
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0048;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax += memoryAGet16(ss, bp - 258);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_12334: // 11b2:0814
    ax = memoryAGet16(ss, bp - 258);
    if (ax == memoryAGet16(ss, bp - 518))
        goto loc_12341;
    goto loc_1222f;
loc_12341: // 11b2:0821
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_12397() // 11b2:0877 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x012a;
    memoryASet16(ss, bp - 8, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    memoryASet16(ss, bp - 12, ax);
    memoryASet(ss, bp - 39, 0x00);
    memoryASet(ss, bp - 38, 0x00);
    memoryASet16(ss, bp - 22, 0x0001);
    goto loc_123c4;
loc_123c1: // 11b2:08a1
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_123c4: // 11b2:08a4
    if (memoryAGet16(ss, bp - 22) != 0x0001)
        goto loc_123db;
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_123db: // 11b2:08bb
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 10))
        goto loc_123fe;
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_123fe: // 11b2:08de
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    di = 0x0827;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_12420;
    ax = memoryAGet16(ss, bp - 22);
    ax -= 0x0002;
    memoryASet16(ss, bp - 12, ax);
loc_12420: // 11b2:0900
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    memoryASet16(ss, bp - 42, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_12495;
    memoryASet16(ss, bp - 26, ax);
    goto loc_12440;
loc_1243d: // 11b2:091d
    memoryASet16(ss, bp - 26, memoryAGet16(ss, bp - 26) + 1);
loc_12440: // 11b2:0920
    di = bp - 298;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = 0x0835;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_1248d;
    di = 0x0835;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e11d(); assert(cs == 0x11b2);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 22);
    ax++;
    memoryASet16(ss, bp - 6, ax);
loc_1248d: // 11b2:096d
    ax = memoryAGet16(ss, bp - 26);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_1243d;
loc_12495: // 11b2:0975
    if (memoryAGet16(ss, bp - 22) == 0x0014)
        goto loc_1249e;
    goto loc_123c1;
loc_1249e: // 11b2:097e
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0003);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x0140;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x512e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0003;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 12);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x00c8;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x5130);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0002;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 6, ax);
    di = 0x2b3c;
    push(ds);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x2b3c); es = memoryAGet16(ds, 0x2b3c + 2); /*ggg2*/;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0005;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c0eb(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0004;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax++;
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 42, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_125be;
    memoryASet16(ss, bp - 24, ax);
    goto loc_12574;
loc_12571: // 11b2:0a51
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 1);
loc_12574: // 11b2:0a54
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 44, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 44))
        goto loc_125b6;
    memoryASet16(ss, bp - 22, ax);
    goto loc_1258c;
loc_12589: // 11b2:0a69
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_1258c: // 11b2:0a6c
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 24);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 44))
        goto loc_12589;
loc_125b6: // 11b2:0a96
    ax = memoryAGet16(ss, bp - 24);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_12571;
loc_125be: // 11b2:0a9e
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_1261c;
    memoryASet16(ss, bp - 22, ax);
    goto loc_125f5;
loc_125f2: // 11b2:0ad2
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_125f5: // 11b2:0ad5
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_125f2;
loc_1261c: // 11b2:0afc
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 42, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_126c4;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12654;
loc_12651: // 11b2:0b31
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12654: // 11b2:0b34
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_12651;
loc_126c4: // 11b2:0ba4
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 16);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_1274a;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12723;
loc_12720: // 11b2:0c00
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12723: // 11b2:0c03
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_12720;
loc_1274a: // 11b2:0c2a
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 42, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_127a9;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12781;
loc_1277e: // 11b2:0c5e
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12781: // 11b2:0c61
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_1277e;
loc_127a9: // 11b2:0c89
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 42, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 42))
        goto loc_12800;
    memoryASet16(ss, bp - 22, ax);
    goto loc_127bf;
loc_127bc: // 11b2:0c9c
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_127bf: // 11b2:0c9f
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    di = 0x0827;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_127f8;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    ax++;
    push(ax);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(cs);
    sub_121e4();
loc_127f8: // 11b2:0cd8
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 42))
        goto loc_127bc;
loc_12800: // 11b2:0ce0
    ax = 0x0023;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_12809: // 11b2:0ce9
    sync();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if ((short)memoryAGet16(ds, 0x2b5e) <= (short)0x0080)
        goto loc_12809;
loc_12825: // 11b2:0d05
    sync();
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 22, ax);
    if (memoryAGet(ss, bp - 38) == 0x00)
        goto loc_1283a;
    goto loc_128d0;
loc_1283a: // 11b2:0d1a
    if ((short)memoryAGet16(ss, bp - 22) >= (short)0x0063)
        goto loc_12843;
    goto loc_128d0;
loc_12843: // 11b2:0d23
    memoryASet(ss, bp - 38, 0x01);
    ax = 0;
    memoryASet16(ss, bp - 36, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    if (ax != 0x0000)
        goto loc_12891;
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 32, ax);
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    memoryASet16(ss, bp - 34, ax);
    memoryASet(ss, bp - 37, 0x01);
    goto loc_128d0;
loc_12891: // 11b2:0d71
    if (ax != 0x0001)
        goto loc_128d0;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 32, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    cx = 0x0008;
    bx = 0;
    push(cs); cs = 0x2da3; sub_2dca9(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 34, ax);
    memoryASet(ss, bp - 37, 0x00);
loc_128d0: // 11b2:0db0
    if (memoryAGet16(ss, bp - 4) != 0x0000)
        goto loc_128d9;
    goto loc_129f8;
loc_128d9: // 11b2:0db9
    if ((short)memoryAGet16(ds, 0x2b60) > (short)0x0014)
        goto loc_128e3;
    goto loc_129f8;
loc_128e3: // 11b2:0dc3
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 8);
    ax += 0x002d;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    ax = memoryAGet16(ss, bp - 6);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 8, memoryAGet16(ss, bp - 8) + 1);
    if ((short)memoryAGet16(ss, bp - 8) <= (short)0x0005)
        goto loc_12941;
    memoryASet16(ss, bp - 8, 0x0001);
loc_12941: // 11b2:0e21
    if (memoryAGet(ss, bp - 38) != 0x00)
        goto loc_1294a;
    goto loc_129f8;
loc_1294a: // 11b2:0e2a
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
    if ((short)memoryAGet16(ss, bp - 36) <= (short)0x0004)
        goto loc_12995;
    memoryASet(ss, bp - 38, 0x00);
    if (memoryAGet(ss, bp - 37) == 0x00)
        goto loc_12979;
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 32));
    ax = memoryAGet16(ss, bp - 34);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_12993;
loc_12979: // 11b2:0e59
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 32));
    ax = memoryAGet16(ss, bp - 34);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_12993: // 11b2:0e73
    goto loc_129f8;
loc_12995: // 11b2:0e75
    if (memoryAGet(ss, bp - 37) == 0x00)
        goto loc_129b7;
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 32));
    ax = memoryAGet16(ss, bp - 34);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_129d1;
loc_129b7: // 11b2:0e97
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 32));
    ax = memoryAGet16(ss, bp - 34);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_129d1: // 11b2:0eb1
    ax = memoryAGet16(ss, bp - 36);
    ax += 0x0025;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 32));
    ax = memoryAGet16(ss, bp - 34);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_129f8: // 11b2:0ed8
    if ((short)memoryAGet16(ds, 0x2b5e) < (short)0x0080)
        goto loc_12a0b;
    if (memoryAGet16(ds, 0x2b5e) == 0x00e0)
        goto loc_12a0b;
    goto loc_12825;
loc_12a0b: // 11b2:0eeb
    ax = memoryAGet16(ds, 0x2b5e);
    memoryASet16(ss, bp - 30, ax);
    if (memoryAGet16(ss, bp - 30) != 0x00e0)
        goto loc_12a49;
loc_12a18: // 11b2:0ef8
    sync();
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x0837;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_12a18;
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x0857;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_12a3e;
    memoryASet16(ds, 0x2b5e, 0x01f4);
loc_12a3e: // 11b2:0f1e
    ax = memoryAGet16(ds, 0x2b5e);
    ax -= 0x0080;
    memoryASet16(ss, bp - 30, ax);
    goto loc_12a51;
loc_12a49: // 11b2:0f29
    sync();
    if ((short)memoryAGet16(ds, 0x2b5e) <= (short)0x0080)
        goto loc_12a49;
loc_12a51: // 11b2:0f31
    if (memoryAGet(ss, bp + 6) != 0x00)
        goto loc_12a8b;
    memoryASet16(ss, bp - 22, 0x0001);
    goto loc_12a61;
loc_12a5e: // 11b2:0f3e
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12a61: // 11b2:0f41
    di = memoryAGet16(ss, bp - 22);
    if (memoryAGet(ds, di + 11071) == 0x00)
        goto loc_12a83;
    di = memoryAGet16(ss, bp - 22);
    al = memoryAGet(ds, di + 11071);
    ah = 0;
    if (ax != memoryAGet16(ss, bp - 30))
        goto loc_12a83;
    ax = memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ss, bp - 39, 0x01);
loc_12a83: // 11b2:0f63
    if (memoryAGet16(ss, bp - 22) != 0x0014)
        goto loc_12a5e;
    goto loc_12a95;
loc_12a8b: // 11b2:0f6b
    ax = memoryAGet16(ss, bp - 30);
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ss, bp - 39, 0x01);
loc_12a95: // 11b2:0f75
    if (memoryAGet(ss, bp - 39) != 0x00)
        goto loc_12a9e;
    goto loc_12825;
loc_12a9e: // 11b2:0f7e
    di = memoryAGet16(ds, 0x2b3c); es = memoryAGet16(ds, 0x2b3c + 2); /*ggg2*/;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c187(); assert(cs == 0x11b2);
    di = 0x2b3c;
    push(ds);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd94(); assert(cs == 0x11b2);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    push(cs);
    sub_11b20();
    memoryASet(ds, 0x338e, 0x00);
    memoryASet(ds, 0x338f, 0x00);
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_12b21() // 11b2:1001 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0330;
    memoryASet16(ss, bp - 6, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    memoryASet16(ss, bp - 10, ax);
    ax = 0;
    memoryASet16(ss, bp - 12, ax);
    memoryASet(ss, bp - 45, 0x00);
    memoryASet(ss, bp - 44, 0x00);
    memoryASet16(ss, bp - 22, 0x0001);
    goto loc_12b4e;
loc_12b4b: // 11b2:102b
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12b4e: // 11b2:102e
    if (memoryAGet16(ss, bp - 22) != 0x0001)
        goto loc_12b65;
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_12b65: // 11b2:1045
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 10))
        goto loc_12b88;
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    ax--;
    memoryASet16(ss, bp - 10, ax);
loc_12b88: // 11b2:1068
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    di = 0x0fd1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_12baa;
    ax = memoryAGet16(ss, bp - 22);
    ax -= 0x0002;
    memoryASet16(ss, bp - 12, ax);
loc_12baa: // 11b2:108a
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    al = memoryAGet(ds, di + 5692);
    ah = 0;
    memoryASet16(ss, bp - 306, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12c22;
    memoryASet16(ss, bp - 26, ax);
    goto loc_12bcc;
loc_12bc9: // 11b2:10a9
    memoryASet16(ss, bp - 26, memoryAGet16(ss, bp - 26) + 1);
loc_12bcc: // 11b2:10ac
    di = bp - 562;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(memoryAGet16(ss, bp - 26));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = 0x0fdf;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_12c19;
    di = 0x0fdf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e11d(); assert(cs == 0x11b2);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 22);
    ax++;
    memoryASet16(ss, bp - 4, ax);
loc_12c19: // 11b2:10f9
    ax = memoryAGet16(ss, bp - 26);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12bc9;
loc_12c22: // 11b2:1102
    if (memoryAGet16(ss, bp - 22) == 0x0014)
        goto loc_12c2b;
    goto loc_12b4b;
loc_12c2b: // 11b2:110b
    memoryASet16(ss, bp - 12, memoryAGet16(ss, bp - 12) + 0x0003);
    ax = memoryAGet16(ss, bp - 10);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x0140;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x512e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0003;
    memoryASet16(ss, bp - 14, ax);
    ax = memoryAGet16(ss, bp - 12);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    ax = 0x00c8;
    ax -= dx;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    ax += memoryAGet16(ds, 0x5130);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0008;
    idiv16(cx);
    ax -= 0x0002;
    memoryASet16(ss, bp - 16, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax += memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax += memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 4, ax);
    di = 0x2b3c;
    push(ds);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x2b3c); es = memoryAGet16(ds, 0x2b3c + 2); /*ggg2*/;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0005;
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax += 0x0002;
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c0eb(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 14);
    ax += memoryAGet16(ss, bp - 10);
    ax += 0x0004;
    memoryASet16(ss, bp - 18, ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 12);
    ax++;
    memoryASet16(ss, bp - 20, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 306, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12d51;
    memoryASet16(ss, bp - 24, ax);
    goto loc_12d03;
loc_12d00: // 11b2:11e0
    memoryASet16(ss, bp - 24, memoryAGet16(ss, bp - 24) + 1);
loc_12d03: // 11b2:11e3
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 308, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 308))
        goto loc_12d48;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12d1d;
loc_12d1a: // 11b2:11fa
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12d1d: // 11b2:11fd
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 24);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 308))
        goto loc_12d1a;
loc_12d48: // 11b2:1228
    ax = memoryAGet16(ss, bp - 24);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12d00;
loc_12d51: // 11b2:1231
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0003;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 306, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12db2;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12d8a;
loc_12d87: // 11b2:1267
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12d8a: // 11b2:126a
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12d87;
loc_12db2: // 11b2:1292
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0053;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    memoryASet16(ss, bp - 306, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12e5d;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12dec;
loc_12de9: // 11b2:12c9
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12dec: // 11b2:12cc
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x011b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12de9;
loc_12e5d: // 11b2:133d
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 16);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00a3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax--;
    memoryASet16(ss, bp - 306, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12ee6;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12ebe;
loc_12ebb: // 11b2:139b
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12ebe: // 11b2:139e
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00f3;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12ebb;
loc_12ee6: // 11b2:13c6
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x007b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 18));
    ax = memoryAGet16(ss, bp - 20);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 18);
    ax++;
    memoryASet16(ss, bp - 306, ax);
    ax = memoryAGet16(ss, bp - 14);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12f48;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12f1f;
loc_12f1c: // 11b2:13fc
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12f1f: // 11b2:13ff
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x016b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 22));
    ax = memoryAGet16(ss, bp - 20);
    ax++;
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12f1c;
loc_12f48: // 11b2:1428
    ax = memoryAGet16(ss, bp - 12);
    memoryASet16(ss, bp - 306, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 306))
        goto loc_12fa2;
    memoryASet16(ss, bp - 22, ax);
    goto loc_12f60;
loc_12f5d: // 11b2:143d
    memoryASet16(ss, bp - 22, memoryAGet16(ss, bp - 22) + 1);
loc_12f60: // 11b2:1440
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    di = 0x0fd1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_12f99;
    ax = memoryAGet16(ss, bp - 14);
    ax += 0x0002;
    push(ax);
    ax = memoryAGet16(ss, bp - 16);
    ax += memoryAGet16(ss, bp - 22);
    ax++;
    push(ax);
    di = memoryAGet16(ss, bp - 22);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    push(cs);
    sub_121e4();
loc_12f99: // 11b2:1479
    ax = memoryAGet16(ss, bp - 22);
    if (ax != memoryAGet16(ss, bp - 306))
        goto loc_12f5d;
loc_12fa2: // 11b2:1482
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    memoryASet(ss, bp - 302, 0x00);
    ax = 0;
    memoryASet16(ss, bp - 28, ax);
    memoryASet(ss, bp - 303, 0x5a);
loc_12fc5: // 11b2:14a5
    if (memoryAGet(ss, bp - 303) != 0x0d)
        goto loc_12fcf;
    goto loc_132bb;
loc_12fcf: // 11b2:14af
    push(cs); cs = 0x2a41; sub_2a70a(); assert(cs == 0x11b2);
    if (al)
        goto loc_12fdb;
    goto loc_130ee;
loc_12fdb: // 11b2:14bb
    push(cs); cs = 0x2a41; sub_2a71c(); assert(cs == 0x11b2);
    memoryASet(ss, bp - 303, al);
    al = memoryAGet(ss, bp - 303);
    push(ax);
    di = 0x0fe1;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_12ff8;
    goto loc_13087;
loc_12ff8: // 11b2:14d8
    if (memoryAGet(ss, bp - 303) >= 0x20)
        goto loc_13002;
    goto loc_13085;
loc_13002: // 11b2:14e2
    if (memoryAGet(ss, bp - 303) > 0x7f)
        goto loc_13085;
    ax = memoryAGet16(ss, bp - 28);
    if ((short)ax >= (short)memoryAGet16(ss, bp + 6))
        goto loc_13085;
    di = bp - 816;
    push(ss);
    push(di);
    di = bp - 302;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = bp - 560;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 303);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 302;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) + 1);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    di = bp - 560;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 303);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x11b2);
    push(cs);
    sub_121e4();
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_13085: // 11b2:1565
    goto loc_130ee;
loc_13087: // 11b2:1567
    if (memoryAGet(ss, bp - 303) != 0x08)
        goto loc_130ee;
    if ((short)memoryAGet16(ss, bp - 28) <= (short)0x0000)
        goto loc_130ee;
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    di = bp - 302;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 302);
    ah = 0;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e200(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 28, memoryAGet16(ss, bp - 28) - 1);
loc_130ee: // 11b2:15ce
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 22, ax);
    if (memoryAGet(ss, bp - 44) == 0x00)
        goto loc_13103;
    goto loc_13199;
loc_13103: // 11b2:15e3
    if ((short)memoryAGet16(ss, bp - 22) >= (short)0x0063)
        goto loc_1310c;
    goto loc_13199;
loc_1310c: // 11b2:15ec
    memoryASet(ss, bp - 44, 0x01);
    ax = 0;
    memoryASet16(ss, bp - 40, ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    if (ax != 0x0000)
        goto loc_1315a;
    ax = memoryAGet16(ss, bp - 18);
    ax -= memoryAGet16(ss, bp - 14);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 14);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ss, bp - 36, ax);
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    memoryASet16(ss, bp - 38, ax);
    memoryASet(ss, bp - 43, 0x01);
    goto loc_13199;
loc_1315a: // 11b2:163a
    if (ax != 0x0001)
        goto loc_13199;
    ax = memoryAGet16(ss, bp - 14);
    memoryASet16(ss, bp - 36, ax);
    ax = memoryAGet16(ss, bp - 20);
    ax -= memoryAGet16(ss, bp - 16);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp - 16);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    cx = 0x0008;
    bx = 0;
    push(cs); cs = 0x2da3; sub_2dca9(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 38, ax);
    memoryASet(ss, bp - 43, 0x00);
loc_13199: // 11b2:1679
    if ((short)memoryAGet16(ds, 0x2b60) > (short)0x0014)
        goto loc_131a3;
    goto loc_132b8;
loc_131a3: // 11b2:1683
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0143;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d48e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 6);
    ax += 0x002d;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x0005)
        goto loc_13201;
    memoryASet16(ss, bp - 6, 0x0001);
loc_13201: // 11b2:16e1
    if (memoryAGet(ss, bp - 44) != 0x00)
        goto loc_1320a;
    goto loc_132b8;
loc_1320a: // 11b2:16ea
    memoryASet16(ss, bp - 40, memoryAGet16(ss, bp - 40) + 1);
    if ((short)memoryAGet16(ss, bp - 40) <= (short)0x0004)
        goto loc_13255;
    memoryASet(ss, bp - 44, 0x00);
    if (memoryAGet(ss, bp - 43) == 0x00)
        goto loc_13239;
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 38);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_13253;
loc_13239: // 11b2:1719
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 38);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_13253: // 11b2:1733
    goto loc_132b8;
loc_13255: // 11b2:1735
    if (memoryAGet(ss, bp - 43) == 0x00)
        goto loc_13277;
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x002b;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 38);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
    goto loc_13291;
loc_13277: // 11b2:1757
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 38);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_13291: // 11b2:1771
    ax = memoryAGet16(ss, bp - 40);
    ax += 0x0025;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 36));
    ax = memoryAGet16(ss, bp - 38);
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ae75(); assert(cs == 0x11b2);
loc_132b8: // 11b2:1798
    goto loc_12fc5;
loc_132bb: // 11b2:179b
    di = bp - 302;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = memoryAGet16(ds, 0x2b3c); es = memoryAGet16(ds, 0x2b3c + 2); /*ggg2*/;
    push(es);
    push(di);
    push(memoryAGet16(ss, bp - 14));
    ax = memoryAGet16(ss, bp - 16);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ds, 0x2b5c);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c187(); assert(cs == 0x11b2);
    di = 0x2b3c;
    push(ds);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd94(); assert(cs == 0x11b2);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_13311() // 11b2:17f1
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_13321;
loc_1331e: // 11b2:17fe
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_13321: // 11b2:1801
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1331e;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1333d;
loc_1333a: // 11b2:181a
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1333d: // 11b2:181d
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x00);
    if (memoryAGet16(ss, bp - 2) != 0x0014)
        goto loc_1333a;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_13371() // 11b2:1851
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x182f;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x1843;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x15);
    memoryASet(ds, 0x2b42, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 2);
    if (ax != 0x0015)
        goto loc_133ce;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3396, 0x01);
    goto loc_133ee;
loc_133ce: // 11b2:18ae
    if (ax != 0x0031)
        goto loc_133df;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3396, 0x00);
    goto loc_133ee;
loc_133df: // 11b2:18bf
    if (ax != 0x0001)
        goto loc_133ee;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3396, 0x00);
loc_133ee: // 11b2:18ce
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1341a() // 11b2:18fa
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x18d2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x18ec;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x15);
    memoryASet(ds, 0x2b42, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax != 0x0015)
        goto loc_1348d;
    memoryASet(ds, 0x513e, 0x01);
    goto loc_134a3;
loc_1348d: // 11b2:196d
    if (ax != 0x0031)
        goto loc_13499;
    memoryASet(ds, 0x513e, 0x00);
    goto loc_134a3;
loc_13499: // 11b2:1979
    if (ax != 0x0001)
        goto loc_134a3;
    memoryASet(ds, 0xa110, 0x00);
loc_134a3: // 11b2:1983
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_13592() // 11b2:1a72
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1987;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x19a5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x19c2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x19df;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x19fd;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1a14;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1a31;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1a4d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1a64;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_13878() // 11b2:1d58
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1bca;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1be5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c04;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c23;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c42;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c60;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c7c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1c99;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1cb6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1cd6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1cf5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1d14;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1d31;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1d4a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_13cb8() // 11b2:2198
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1f50;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1f70;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1f90;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1faf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1fcd;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x1fea;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2009;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2026;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2043;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2060;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x207f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x209c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x20b1;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x20c9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x20d7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x20f3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2111;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x212c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2149;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2165;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2181;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x20c9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_142c8() // 11b2:27a8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24d9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24f7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2515;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2532;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x254f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x256d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2587;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25a4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25bc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25d3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25ee;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2605;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24d9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24f7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2613;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2631;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x264f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x266e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x268b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x26a9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x26c4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25ee;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2605;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24d9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x24f7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2613;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x26cb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x26e8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2706;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x271e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x273a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2758;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2773;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x278c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x25ee;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2605;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14ab2() // 11b2:2f92
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2ce6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d01;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d1c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d38;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d4e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d5b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d6e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2d88;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2da4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2dc3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2de1;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2dfb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e1a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e32;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x39);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e40;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e5c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e78;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e85;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2ea5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2ec7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2ee5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2efd;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2f1b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2f38;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2f57;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2f68;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2f79;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x2e32;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x39);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_14f05() // 11b2:33e5 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x33b7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x33c5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x33c7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x33d7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15101() // 11b2:35e1
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3483;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x34a5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x34c3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x34dc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x34fb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x351a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3533;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x354c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x356a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3586;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x359e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x35ba;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x35d3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_15466() // 11b2:3946
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x37d8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x37f7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3813;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3832;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3851;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x386b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3888;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x38a6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x38be;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x38da;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x38fb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x391a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3938;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_157da() // 11b2:3cba
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3b3d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3b5c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3b7d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3b9f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3bbb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3bd0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3bec;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3c0d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3c2e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3c4f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3c71;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3c92;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x3cac;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sub_15466();
    sub_15101();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_159d7() // 11b2:3eb7
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x020e;
    memoryASet16(ss, bp - 516, 0x0001);
    goto loc_159ea;
loc_159e6: // 11b2:3ec6
    memoryASet16(ss, bp - 516, memoryAGet16(ss, bp - 516) + 1);
loc_159ea: // 11b2:3eca
    ax = memoryAGet16(ss, bp - 516);
    ax++;
    if ((short)ax <= (short)0x000a)
        goto loc_159f7;
    goto loc_15b25;
loc_159f7: // 11b2:3ed7
    memoryASet16(ss, bp - 518, ax);
    goto loc_15a01;
loc_159fd: // 11b2:3edd
    memoryASet16(ss, bp - 518, memoryAGet16(ss, bp - 518) + 1);
loc_15a01: // 11b2:3ee1
    di = memoryAGet16(ss, bp - 518);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    di = bp - 514;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e5a1(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 526, ax);
    memoryASet16(ss, bp - 524, dx);
    di = memoryAGet16(ss, bp - 516);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    di = bp - 514;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e5a1(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 522, ax);
    memoryASet16(ss, bp - 520, dx);
    ax = memoryAGet16(ss, bp - 526); es = memoryAGet16(ss, bp - 526 + 2); /*ggg2*/;
    dx = es;
    if ((short)dx > (short)memoryAGet16(ss, bp - 520))
        goto loc_15a5d;
    if ((short)dx >= (short)memoryAGet16(ss, bp - 520))
        goto loc_15a54;
    goto loc_15b1b;
loc_15a54: // 11b2:3f34
    if (ax > memoryAGet16(ss, bp - 522))
        goto loc_15a5d;
    goto loc_15b1b;
loc_15a5d: // 11b2:3f3d
    di = memoryAGet16(ss, bp - 518);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = memoryAGet16(ss, bp - 516);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    di = memoryAGet16(ss, bp - 518);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 256;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 516);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = memoryAGet16(ss, bp - 518);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    di = bp - 512;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = memoryAGet16(ss, bp - 516);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    di = memoryAGet16(ss, bp - 518);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 512;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 516);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
loc_15b1b: // 11b2:3ffb
    if (memoryAGet16(ss, bp - 518) == 0x000a)
        goto loc_15b25;
    goto loc_159fd;
loc_15b25: // 11b2:4005
    if (memoryAGet16(ss, bp - 516) == 0x0009)
        goto loc_15b2f;
    goto loc_159e6;
loc_15b2f: // 11b2:400f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15b98() // 11b2:4078
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x020a;
    push(cs);
    sub_159d7();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4013;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4030;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x404f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 6, 0x0001);
    goto loc_15c10;
loc_15c0d: // 11b2:40ed
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
loc_15c10: // 11b2:40f0
    di = memoryAGet16(ss, bp - 6);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    di = bp - 264;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = memoryAGet(ss, bp - 264);
    ah = 0;
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp - 8);
    if ((short)ax > (short)0x0014)
        goto loc_15c75;
    memoryASet16(ss, bp - 4, ax);
    goto loc_15c45;
loc_15c42: // 11b2:4122
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_15c45: // 11b2:4125
    di = bp - 522;
    push(ss);
    push(di);
    di = bp - 264;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = 0x404f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 264;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 4) != 0x0014)
        goto loc_15c42;
loc_15c75: // 11b2:4155
    di = bp - 522;
    push(ss);
    push(di);
    di = 0x404f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = bp - 264;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = memoryAGet16(ss, bp - 6);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 2);
    di = ax;
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 6) == 0x000a)
        goto loc_15cc6;
    goto loc_15c0d;
loc_15cc6: // 11b2:41a6
    ax = memoryAGet16(ss, bp - 6);
    ax += memoryAGet16(ss, bp - 2);
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x404f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4030;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x404f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4051;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x406a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x39);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 266, ax);
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_15dd0() // 11b2:42b0
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0204;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4267;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4287;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x429b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x429d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x429b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x42a2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    ax = 0x0022;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x0014;
    push(ax);
    push(cs);
    sub_12b21();
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0xa110, 0x01);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_167f7() // 11b2:4cd7
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43a2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43ba;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43da;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43f8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4417;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4437;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4457;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4477;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4497;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44b4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44d4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43a2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4516;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4536;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4555;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4575;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4595;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45b3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45d2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x45f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x460a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x462a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x464a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4667;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x467d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x469b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46b9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46d7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x46f4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4712;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x472f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x474d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x476b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4788;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47a4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47b9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47d0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x47e6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4806;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4825;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4844;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4861;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x487c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x489c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48bb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48da;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x48f9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4916;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4936;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x494e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x496b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4989;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49a6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49c0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49d9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49ec;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x49fe;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a10;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a2f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a4c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x43b8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a66;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a7f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4a9c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4abb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ad9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4af9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b18;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b38;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b56;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b74;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4b8b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4ba5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4bc3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4be2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c02;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c21;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c3f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c5d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c7c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4c99;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4cb7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x44f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x4508;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_176ae() // 11b2:5b8e +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5b2c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5b4b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5b67;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5b69;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5b80;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_177e5() // 11b2:5cc5
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5c4f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5c6d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5c89;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5c9e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5ca0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5cb7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17926() // 11b2:5e06
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5da4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5dc2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5de0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5de2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5df8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17a14() // 11b2:5ef4 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5ec7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5ed4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5ed6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5ee6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17ad0() // 11b2:5fb0
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5f92;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x5fa2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17b55() // 11b2:6035
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6012;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6027;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x15);
    memoryASet(ds, 0x2b42, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax != 0x0031)
        goto loc_17bc8;
    memoryASet(ds, 0x338a, 0x00);
    goto loc_17bff;
loc_17bc8: // 11b2:60a8
    if (ax != 0x0015)
        goto loc_17bf5;
    push(cs); cs = 0x2a31; sub_2a310(); assert(cs == 0x11b2);
    memoryASet(ds, 0x338a, al);
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_17bf3;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b64, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b66, ax);
loc_17bf3: // 11b2:60d3
    goto loc_17bff;
loc_17bf5: // 11b2:60d5
    if (ax != 0x0001)
        goto loc_17bff;
    memoryASet(ds, 0xa110, 0x00);
loc_17bff: // 11b2:60df
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17c25() // 11b2:6105
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet(ss, bp - 1, 0x00);
    push(cs);
    sub_13311();
    di = 0x60e3;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x60f7;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x15);
    memoryASet(ds, 0x2b42, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax != 0x0015)
        goto loc_17c80;
    memoryASet(ss, bp - 1, 0x01);
    goto loc_17c94;
loc_17c80: // 11b2:6160
    if (ax != 0x0031)
        goto loc_17c8b;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_17c94;
loc_17c8b: // 11b2:616b
    if (ax != 0x0001)
        goto loc_17c94;
    memoryASet(ss, bp - 1, 0x00);
loc_17c94: // 11b2:6174
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_17cd1() // 11b2:61b1
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet(ds, 0x3388, 0x00);
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x617b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6186;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6188;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x618e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6196;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x61a3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x01);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x20);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x14);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x32);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax != 0x0014)
        goto loc_17ded;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3396, 0x00);
    memoryASet(ds, 0x3394, 0x01);
    goto loc_17e31;
loc_17ded: // 11b2:62cd
    if (ax != 0x0020)
        goto loc_17e0a;
    sub_17c25();
    if (!al)
        goto loc_17e08;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ds, 0x3394, 0x01);
    memoryASet(ds, 0x3396, 0x01);
loc_17e08: // 11b2:62e8
    goto loc_17e31;
loc_17e0a: // 11b2:62ea
    if (ax != 0x0032)
        goto loc_17e1b;
    memoryASet(ds, 0xa110, 0x00);
    memoryASet(ds, 0x338d, 0x01);
    goto loc_17e31;
loc_17e1b: // 11b2:62fb
    if (ax != 0x0010)
        goto loc_17e27;
    memoryASet(ds, 0xa110, 0x01);
    goto loc_17e31;
loc_17e27: // 11b2:6307
    if (ax != 0x0001)
        goto loc_17e31;
    memoryASet(ds, 0xa110, 0x00);
loc_17e31: // 11b2:6311
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_17f68() // 11b2:6448
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    memoryASet(ds, 0x3389, 0x01);
    memoryASet(ds, 0x3388, 0x00);
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6315;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6331;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x634f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6351;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x636d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x638a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x634f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x63a0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x63be;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x63db;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x634f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x63f8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x6416;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x642a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x643a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x39);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax == 0xffff)
        goto loc_18164;
    if (ax != 0x0039)
        goto loc_1818f;
loc_18164: // 11b2:6644
    memoryASet(ds, 0x338b, 0x00);
    push(cs); cs = 0x2a31; sub_2a310(); assert(cs == 0x11b2);
    memoryASet(ds, 0x338a, al);
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1818f;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b64, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b66, ax);
loc_1818f: // 11b2:666f
    memoryASet(ds, 0x3389, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_181f7() // 11b2:66d7
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x6678;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6697;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x66b0;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x66b2;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x66c9;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_182c3() // 11b2:67a3
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x675c;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6770;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6782;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6784;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6795;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18390() // 11b2:6870
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x6828;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x683c;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x684f;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6851;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6862;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1846d() // 11b2:694d
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x68f5;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x690e;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6928;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x692a;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x693f;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_18578() // 11b2:6a58
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x69d2;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x69ec;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6a05;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6a1e;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6a34;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6a36;
    push(cs);
    push(di);
    di = 0x1c3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6a4a;
    push(cs);
    push(di);
    di = 0x1d3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1866d() // 11b2:6b4d +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x6b03;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet(ds, 0x5140) == 0x00)
        goto loc_186a6;
    di = 0x6b15;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_186b9;
loc_186a6: // 11b2:6b86
    di = 0x6b21;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
loc_186b9: // 11b2:6b99
    di = 0x6b2c;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6b2e;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6b3f;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18738() // 11b2:6c18
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x6bee;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x193c, 0x00);
    di = 0x6bfb;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6c0a;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_187a6() // 11b2:6c86 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0140;
    ax = memoryAGet16(ds, 0x4611);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if ((short)ax < (short)0x0008)
        goto loc_187cb;
    ax = memoryAGet16(ds, 0x4611);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    goto loc_187d7;
loc_187cb: // 11b2:6cab
    ax = memoryAGet16(ds, 0x4611);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 4, ax);
loc_187d7: // 11b2:6cb7
    ax = memoryAGet16(ds, 0x4613);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x5098, ax);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0x509a, ax);
    di = 0x6c7c;
    push(cs);
    push(di);
    di = bp - 34;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6c81;
    push(cs);
    push(di);
    di = bp - 48;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 62;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    di = bp - 320;
    push(ss);
    push(di);
    di = bp - 34;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = bp - 62;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 48;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 20;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x307c;
    push(ds);
    push(di);
    di = bp - 20;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x307c;
    push(ds);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea5b(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (!ax)
        goto loc_18889;
    al = 0x00;
    goto loc_1888b;
loc_18889: // 11b2:6d69
    al = 0x01;
loc_1888b: // 11b2:6d6b
    memoryASet(ss, bp - 63, al);
    if (memoryAGet(ss, bp - 63) == 0x00)
        goto loc_188bf;
    di = 0x307c;
    push(ds);
    push(di);
    di = 0x5098;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb0e(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x307c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    sub_18738();
    goto loc_188c3;
loc_188bf: // 11b2:6d9f
    push(cs);
    sub_17a14();
loc_188c3: // 11b2:6da3
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1891d() // 11b2:6dfd
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6da9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6dc0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6dd9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6ddb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6def;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x39);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18a3a() // 11b2:6f1a +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6ec3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6edd;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6ef5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6ef7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x6f0c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18b05() // 11b2:6fe5 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x013a;
    di = 0x6fdb;
    push(cs);
    push(di);
    di = bp - 28;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x6fe0;
    push(cs);
    push(di);
    di = bp - 42;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 56;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    di = bp - 314;
    push(ss);
    push(di);
    di = bp - 28;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = bp - 56;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 42;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x307c;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x307c;
    push(ds);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (ax)
        goto loc_18ba6;
    al = 0x00;
    goto loc_18ba8;
loc_18ba6: // 11b2:7086
    al = 0x01;
loc_18ba8: // 11b2:7088
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_18c0c() // 11b2:70ec
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7094;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x70ad;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x70c7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x70c9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x70de;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_18d33() // 11b2:7213 +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    push(cs);
    sub_13311();
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x71ad;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = 0x2b7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = 0x2b7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x71b6;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = 0x2c7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = 0x2c7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x71bf;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = 0x2d7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = 0x2d7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x71c8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = 0x2e7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = 0x2e7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x71d1;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x2b7c;
    push(ds);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x2c7c;
    push(ds);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x2d7c;
    push(ds);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x2e7c;
    push(ds);
    push(di);
    di = 0x1c3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x1d3c, 0x00);
    di = 0x71e4;
    push(cs);
    push(di);
    di = 0x1e3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x1f3c, 0x00);
    di = 0x7205;
    push(cs);
    push(di);
    di = 0x203c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x15);
    memoryASet(ds, 0x2b41, 0x31);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ds, 0x2b5a, ax);
    if (memoryAGet16(ds, 0x2b5a) != 0x0031)
        goto loc_18e93;
    push(cs);
    sub_19015();
    goto loc_18ebb;
loc_18e93: // 11b2:7373
    di = memoryAGet16(ss, bp + 4);
    ax = memoryAGet16(ss, di + 65530);
    memoryASet16(ds, 0x2b7a, ax);
    di = memoryAGet16(ss, bp + 4);
    ax = memoryAGet16(ss, di + 65532);
    memoryASet16(ds, 0x2b6c, ax);
    di = memoryAGet16(ss, bp + 4);
    ax = memoryAGet16(ss, di + 65534);
    memoryASet16(ds, 0x2b6e, ax);
    di = memoryAGet16(ss, bp + 4);
    ax = memoryAGet16(ss, di + 65528);
    memoryASet16(ds, 0x2b70, ax);
loc_18ebb: // 11b2:739b
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_18f1d() // 11b2:73fd +stackDrop2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0x73a1;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x73c1;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x1a3c, 0x00);
    di = 0x73de;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x73ef;
    push(cs);
    push(di);
    di = 0x1c3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    sp += 2;
}
void sub_19015() // 11b2:74f5
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x010c;
    memoryASet(ss, bp - 12, 0x01);
loc_19020: // 11b2:7500
    memoryASet(ss, bp - 11, 0x01);
    push(cs);
    sub_13311();
    di = 0x746d;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x747f;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x749a;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_1907a;
    memoryASet(ss, bp - 12, 0x00);
loc_1907a: // 11b2:755a
    di = bp - 268;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 4));
    push(cs);
    sub_11c0c();
    di = 0x2b7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_190b4;
    di = 0x2b7c;
    push(ds);
    push(di);
    di = 0x74a8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_190b4;
    push(bp);
    sub_18f1d();
    memoryASet(ss, bp - 11, 0x00);
loc_190b4: // 11b2:7594
    if (memoryAGet(ss, bp - 11) != 0x00)
        goto loc_190bd;
    goto loc_19020;
loc_190bd: // 11b2:759d
    if (memoryAGet(ss, bp - 12) != 0x00)
        goto loc_190c6;
    goto loc_19179;
loc_190c6: // 11b2:75a6
    memoryASet(ss, bp - 11, 0x01);
    push(cs);
    sub_13311();
    di = 0x746d;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x74ad;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x749a;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_19125;
    memoryASet(ss, bp - 12, 0x00);
loc_19125: // 11b2:7605
    di = bp - 268;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_11c0c();
    di = 0x2c7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_19170;
    di = 0x2c7c;
    push(ds);
    push(di);
    di = 0x74a8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19168;
    di = 0x2c7c;
    push(ds);
    push(di);
    di = 0x2b7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_19170;
loc_19168: // 11b2:7648
    push(bp);
    sub_18f1d();
    memoryASet(ss, bp - 11, 0x00);
loc_19170: // 11b2:7650
    if (memoryAGet(ss, bp - 11) != 0x00)
        goto loc_19179;
    goto loc_190c6;
loc_19179: // 11b2:7659
    if (memoryAGet(ss, bp - 12) != 0x00)
        goto loc_19182;
    goto loc_19246;
loc_19182: // 11b2:7662
    memoryASet(ss, bp - 11, 0x01);
    push(cs);
    sub_13311();
    di = 0x746d;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x74c9;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x749a;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 8, ax);
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_191e1;
    memoryASet(ss, bp - 12, 0x00);
loc_191e1: // 11b2:76c1
    di = bp - 268;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 8));
    push(cs);
    sub_11c0c();
    di = 0x2d7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_1923d;
    di = 0x2d7c;
    push(ds);
    push(di);
    di = 0x74a8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19235;
    di = 0x2d7c;
    push(ds);
    push(di);
    di = 0x2b7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19235;
    di = 0x2d7c;
    push(ds);
    push(di);
    di = 0x2c7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_1923d;
loc_19235: // 11b2:7715
    push(bp);
    sub_18f1d();
    memoryASet(ss, bp - 11, 0x00);
loc_1923d: // 11b2:771d
    if (memoryAGet(ss, bp - 11) != 0x00)
        goto loc_19246;
    goto loc_19182;
loc_19246: // 11b2:7726
    if (memoryAGet(ss, bp - 12) != 0x00)
        goto loc_1924f;
    goto loc_1931f;
loc_1924f: // 11b2:772f
    memoryASet(ss, bp - 11, 0x01);
    push(cs);
    sub_13311();
    di = 0x746d;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0x74df;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x749a;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_192a9;
    memoryASet(ss, bp - 12, 0x00);
loc_192a9: // 11b2:7789
    di = bp - 268;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_11c0c();
    di = 0x2e7c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_19316;
    di = 0x2e7c;
    push(ds);
    push(di);
    di = 0x74a8;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1930e;
    di = 0x2e7c;
    push(ds);
    push(di);
    di = 0x2b7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1930e;
    di = 0x2e7c;
    push(ds);
    push(di);
    di = 0x2c7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1930e;
    di = 0x2e7c;
    push(ds);
    push(di);
    di = 0x2d7c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_19316;
loc_1930e: // 11b2:77ee
    push(bp);
    sub_18f1d();
    memoryASet(ss, bp - 11, 0x00);
loc_19316: // 11b2:77f6
    if (memoryAGet(ss, bp - 11) != 0x00)
        goto loc_1931f;
    goto loc_1924f;
loc_1931f: // 11b2:77ff
    if (memoryAGet(ss, bp - 12) == 0x00)
        goto loc_19329;
    push(bp);
    sub_18d33();
loc_19329: // 11b2:7809
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19434() // 11b2:7914
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    memoryASet(ss, bp - 1, 0x01);
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x780d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7829;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7845;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7847;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7867;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7880;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x789f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x78bf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x78df;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x78f5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0x7906;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    memoryASet(ds, 0x2b41, 0x31);
    memoryASet(ds, 0x2b42, 0x10);
    memoryASet(ds, 0x2b43, 0x17);
    memoryASet(ds, 0x2b44, 0x1f);
    memoryASet(ds, 0x2b45, 0x18);
    memoryASet(ds, 0x2b46, 0x23);
    memoryASet(ds, 0x2b47, 0x13);
    memoryASet(ds, 0x2b48, 0x39);
    memoryASet(ds, 0x2b49, 0x1c);
    memoryASet(ds, 0x2b4a, 0x1e);
    memoryASet(ds, 0x2b4b, 0x2e);
    memoryASet(ds, 0x2b4c, 0x21);
    memoryASet(ds, 0x2b4d, 0x2f);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 6);
    if (ax != 0x0001)
        goto loc_19627;
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ss, bp - 1, 0x00);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    goto loc_196e2;
loc_19627: // 11b2:7b07
    if (ax == 0x0031)
        goto loc_19636;
    if (ax == 0x0039)
        goto loc_19636;
    if (ax != 0x001c)
        goto loc_1964b;
loc_19636: // 11b2:7b16
    memoryASet(ss, bp - 1, 0x01);
    memoryASet(ds, 0xa110, 0x00);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_196e2;
loc_1964b: // 11b2:7b2b
    if (ax == 0x0001)
        goto loc_19655;
    if (ax != 0x0010)
        goto loc_1966c;
loc_19655: // 11b2:7b35
    push(cs);
    sub_13371();
    if (memoryAGet(ds, 0x3396) == 0x00)
        goto loc_19666;
    memoryASet(ss, bp - 1, 0x01);
    goto loc_1966a;
loc_19666: // 11b2:7b46
    memoryASet(ss, bp - 1, 0x00);
loc_1966a: // 11b2:7b4a
    goto loc_196e2;
loc_1966c: // 11b2:7b4c
    if (ax != 0x001f)
        goto loc_19677;
    push(cs);
    sub_14ab2();
    goto loc_196e2;
loc_19677: // 11b2:7b57
    if (ax != 0x0018)
        goto loc_19682;
    push(cs);
    sub_157da();
    goto loc_196e2;
loc_19682: // 11b2:7b62
    if (ax != 0x0023)
        goto loc_1968d;
    push(cs);
    sub_15b98();
    goto loc_196e2;
loc_1968d: // 11b2:7b6d
    if (ax != 0x0017)
        goto loc_19698;
    push(cs);
    sub_167f7();
    goto loc_196e2;
loc_19698: // 11b2:7b78
    if (ax != 0x002e)
        goto loc_196a3;
    push(cs);
    sub_1b958();
    goto loc_196e2;
loc_196a3: // 11b2:7b83
    if (ax != 0x001e)
        goto loc_196ae;
    push(cs);
    sub_1bcef();
    goto loc_196e2;
loc_196ae: // 11b2:7b8e
    if (ax != 0x0021)
        goto loc_196b8;
    sub_1b000();
    goto loc_196e2;
loc_196b8: // 11b2:7b98
    if (ax != 0x002f)
        goto loc_196c2;
    sub_1c6b0();
    goto loc_196e2;
loc_196c2: // 11b2:7ba2
    if (ax != 0x0013)
        goto loc_196e2;
    push(cs);
    sub_1c24f();
    if (memoryAGet16(ds, 0x2b76) != 0x0000)
        goto loc_196dd;
    push(cs);
    sub_17a14();
    memoryASet(ds, 0xa110, 0x01);
    goto loc_196e2;
loc_196dd: // 11b2:7bbd
    memoryASet(ds, 0xa110, 0x00);
loc_196e2: // 11b2:7bc2
    ax = memoryAGet16(ss, bp - 6);
    if (ax == 0x002e)
        goto loc_1970d;
    if (ax == 0x001e)
        goto loc_1970d;
    if (ax == 0x0021)
        goto loc_1970d;
    if (ax == 0x0017)
        goto loc_1970d;
    if (ax == 0x001f)
        goto loc_1970d;
    if (ax == 0x0018)
        goto loc_1970d;
    if (ax == 0x002f)
        goto loc_1970d;
    if (ax != 0x0023)
        goto loc_19716;
loc_1970d: // 11b2:7bed
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 1, al);
    goto loc_19729;
loc_19716: // 11b2:7bf6
    if (ax != 0x0013)
        goto loc_19729;
    if (memoryAGet16(ds, 0x2b76) != 0x0000)
        goto loc_19729;
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 1, al);
loc_19729: // 11b2:7c09
    memoryASet(ds, 0x3388, 0x00);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19848() // 11b2:7d28 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c15;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c2d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c45;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c47;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c56;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c6c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c7e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7c93;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7ca8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7cbc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7ccf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7ce3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7cf7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7d0d;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x7d1a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x01);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x17);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x14);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x24);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x2e);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x25);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x13);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x1f);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x10);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x2f);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    if (ax != 0x0014)
        goto loc_19ac3;
    push(cs);
    sub_1341a();
    goto loc_19b44;
loc_19ac3: // 11b2:7fa3
    if (ax != 0x0024)
        goto loc_19ace;
    push(cs);
    sub_17b55();
    goto loc_19b44;
loc_19ace: // 11b2:7fae
    if (ax != 0x002e)
        goto loc_19ad9;
    push(cs);
    sub_17f68();
    goto loc_19b44;
loc_19ad9: // 11b2:7fb9
    if (ax != 0x0013)
        goto loc_19af7;
    if (memoryAGet16(ds, 0xa0be) != 0x0000)
        goto loc_19aec;
    memoryASet(ds, 0x338c, 0x01);
    goto loc_19af0;
loc_19aec: // 11b2:7fcc
    push(cs);
    sub_18c0c();
loc_19af0: // 11b2:7fd0
    memoryASet(ds, 0x338c, 0x01);
    goto loc_19b44;
loc_19af7: // 11b2:7fd7
    if (ax != 0x001f)
        goto loc_19b0f;
    if (memoryAGet16(ds, 0xa0be) != 0x0000)
        goto loc_19b09;
    push(cs);
    sub_1c30f();
    goto loc_19b0d;
loc_19b09: // 11b2:7fe9
    push(cs);
    sub_1891d();
loc_19b0d: // 11b2:7fed
    goto loc_19b44;
loc_19b0f: // 11b2:7fef
    if (ax != 0x0010)
        goto loc_19b1a;
    push(cs);
    sub_17cd1();
    goto loc_19b44;
loc_19b1a: // 11b2:7ffa
    if (ax != 0x0017)
        goto loc_19b25;
    push(cs);
    sub_167f7();
    goto loc_19b44;
loc_19b25: // 11b2:8005
    if (ax != 0x0025)
        goto loc_19b30;
    push(cs);
    sub_19015();
    goto loc_19b44;
loc_19b30: // 11b2:8010
    if (ax != 0x002f)
        goto loc_19b3a;
    sub_1c6c4();
    goto loc_19b44;
loc_19b3a: // 11b2:801a
    if (ax != 0x0001)
        goto loc_19b44;
    memoryASet(ds, 0xa110, 0x00);
loc_19b44: // 11b2:8024
    ax = memoryAGet16(ss, bp - 4);
    if (ax == 0x0014)
        goto loc_19b6a;
    if (ax == 0x0024)
        goto loc_19b6a;
    if (ax == 0x002e)
        goto loc_19b6a;
    if (ax == 0x0025)
        goto loc_19b6a;
    if (ax == 0x001f)
        goto loc_19b6a;
    if (ax == 0x002f)
        goto loc_19b6a;
    if (ax != 0x0023)
        goto loc_19b70;
loc_19b6a: // 11b2:804a
    push(cs);
    sub_19848();
    goto loc_19b80;
loc_19b70: // 11b2:8050
    if (ax != 0x0013)
        goto loc_19b80;
    if (memoryAGet16(ds, 0xa0be) == 0x0000)
        goto loc_19b80;
    push(cs);
    sub_19848();
loc_19b80: // 11b2:8060
    memoryASet(ds, 0x3388, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19c01() // 11b2:80e1 +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0306;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x8069;
    push(cs);
    push(di);
    di = bp - 516;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    memoryASet16(ss, bp - 518, ax);
    ax = 0x0001;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 518))
        goto loc_19c46;
    goto loc_19d4f;
loc_19c46: // 11b2:8126
    memoryASet16(ss, bp - 258, ax);
    goto loc_19c50;
loc_19c4c: // 11b2:812c
    memoryASet16(ss, bp - 258, memoryAGet16(ss, bp - 258) + 1);
loc_19c50: // 11b2:8130
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = bp - 516;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e11d(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 260, ax);
    di = bp - 774;
    push(ss);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    push(memoryAGet16(ss, bp - 258));
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e0b0(); assert(cs == 0x11b2);
    di = 0x80df;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e154(); assert(cs == 0x11b2);
    if (!flags.zero)
        goto loc_19ca0;
    goto loc_19d42;
loc_19ca0: // 11b2:8180
    if ((short)memoryAGet16(ss, bp - 260) < (short)0x005d)
        goto loc_19cda;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x005d;
    ax += 0x0015;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    goto loc_19d42;
loc_19cda: // 11b2:81ba
    if ((short)memoryAGet16(ss, bp - 260) > (short)0x0048)
        goto loc_19d14;
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0020;
    ax += 0x000a;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    goto loc_19d42;
loc_19d14: // 11b2:81f4
    ax = memoryAGet16(ss, bp - 260);
    ax -= 0x0048;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 258);
    cx = 0x0003;
    ax <<= cl;
    ax += memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_19d42: // 11b2:8222
    ax = memoryAGet16(ss, bp - 258);
    if (ax == memoryAGet16(ss, bp - 518))
        goto loc_19d4f;
    goto loc_19c4c;
loc_19d4f: // 11b2:822f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_19d85() // 11b2:8265 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b5e, ax);
    memoryASet(ss, bp - 5, 0x00);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x11b2);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f5cf(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f607(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab29(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
    ax = 0;
    memoryASet16(ds, 0x5130, ax);
    ax = 0;
    memoryASet16(ds, 0x2b5c, ax);
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
    di = 0x8235;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1f5c; sub_20ed5(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x00c8;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d825(); assert(cs == 0x11b2);
    di = 0x823d;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1f5c; sub_20ed5(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, 0x0001);
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    memoryASet(ss, bp - 5, 0x00);
loc_19e44: // 11b2:8324
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19e7a;
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x8245;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19e7a;
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 5, al);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b5e, ax);
loc_19e7a: // 11b2:835a
    memoryASet16(ds, 0x2b60, memoryAGet16(ds, 0x2b60)+10);
    sync();
    if ((short)memoryAGet16(ds, 0x2b60) > (short)0x01b0)
        goto loc_19e88;
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_19e44;
loc_19e88: // 11b2:8368
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19ebe;
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x8245;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19ebe;
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 5, al);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b5e, ax);
loc_19ebe: // 11b2:839e
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19ef4;
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x8245;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19ef4;
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 5, al);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b5e, ax);
loc_19ef4: // 11b2:83d4
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_19f0d;
    ax = 0;
    push(ax);
    push(memoryAGet16(ss, bp - 4));
    push(cs); cs = 0x2aa3; sub_2ab4f(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x2b5c, ax);
    goto loc_19f25;
loc_19f0d: // 11b2:83ed
    ax = 0;
    push(ax);
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab4f(); assert(cs == 0x11b2);
    ax = 0x00c8;
    ax -= memoryAGet16(ss, bp - 4);
    memoryASet16(ds, 0x2b5c, ax);
loc_19f25: // 11b2:8405
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    if ((short)memoryAGet16(ss, bp - 4) <= (short)0x00c8)
        goto loc_19f88;
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 2);
    cx = 0xffff;
    imul16(cx);
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
loc_19f44: // 11b2:8424
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19f7a;
    al = memoryAGet(ds, 0x2b5e);
    push(ax);
    di = 0x8245;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_19f7a;
    push(cs);
    sub_19434();
    memoryASet(ss, bp - 5, al);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b5e, ax);
loc_19f7a: // 11b2:845a
    memoryASet16(ds, 0x2b60, memoryAGet16(ds, 0x2b60)+10);
    sync();
    if ((short)memoryAGet16(ds, 0x2b60) > (short)0x01b0)
        goto loc_19f88;
    if (memoryAGet(ss, bp - 5) == 0x00)
        goto loc_19f44;
loc_19f88: // 11b2:8468
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    if (memoryAGet(ss, bp - 5) != 0x00)
        goto loc_19fa5;
    goto loc_19ebe;
loc_19fa5: // 11b2:8485
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_19fb1() // 11b2:8491 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    ax = memoryAGet16(ds, 0x2b6c);
    memoryASet16(ds, 0x1732, ax);
    ax = memoryAGet16(ds, 0x2b6e);
    memoryASet16(ds, 0x1734, ax);
    ax = memoryAGet16(ds, 0x2b70);
    memoryASet16(ds, 0x1736, ax);
    ax = memoryAGet16(ds, 0x2b7a);
    memoryASet16(ds, 0x173a, ax);
    al = memoryAGet(ds, 0x338a);
    memoryASet(ds, 0x1731, al);
    al = memoryAGet(ds, 0x513e);
    memoryASet(ds, 0x1730, al);
    ax = memoryAGet16(ds, 0xa0ec);
    memoryASet16(ds, 0x1738, ax);
    di = 0x8489;
    push(cs);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea5b(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (!ax)
        goto loc_1a01e;
    al = 0x00;
    goto loc_1a020;
loc_1a01e: // 11b2:84fe
    al = 0x01;
loc_1a020: // 11b2:8500
    memoryASet(ss, bp - 15, al);
    if (memoryAGet(ss, bp - 15) == 0x00)
        goto loc_1a04f;
    di = 0x30fc;
    push(ds);
    push(di);
    di = 0x1730;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb0e(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
loc_1a04f: // 11b2:852f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a05b() // 11b2:853b +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    di = 0x8533;
    push(cs);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (!ax)
        goto loc_1a09e;
    al = 0x00;
    goto loc_1a0a0;
loc_1a09e: // 11b2:857e
    al = 0x01;
loc_1a0a0: // 11b2:8580
    memoryASet(ss, bp - 15, al);
    if (memoryAGet(ss, bp - 15) != 0x00)
        goto loc_1a0ac;
    goto loc_1a12b;
loc_1a0ac: // 11b2:858c
    di = 0x30fc;
    push(ds);
    push(di);
    di = 0x1730;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x30fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0x1738);
    memoryASet16(ds, 0xa0ec, ax);
    ax = memoryAGet16(ds, 0x1732);
    memoryASet16(ds, 0x2b6c, ax);
    ax = memoryAGet16(ds, 0x1734);
    memoryASet16(ds, 0x2b6e, ax);
    ax = memoryAGet16(ds, 0x1736);
    memoryASet16(ds, 0x2b70, ax);
    ax = memoryAGet16(ds, 0x173a);
    memoryASet16(ds, 0x2b7a, ax);
    al = memoryAGet(ds, 0x1731);
    memoryASet(ds, 0x338a, al);
    al = memoryAGet(ds, 0x1730);
    memoryASet(ds, 0x513e, al);
    if (memoryAGet(ds, 0x1731) == 0x00)
        goto loc_1a129;
    push(cs); cs = 0x2a31; sub_2a310(); assert(cs == 0x11b2);
    memoryASet(ds, 0x338a, al);
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1a129;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b64, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2a31; sub_2a3dc(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b66, ax);
loc_1a129: // 11b2:8609
    goto loc_1a152;
loc_1a12b: // 11b2:860b
    ax = 0;
    memoryASet16(ds, 0xa0ec, ax);
    memoryASet16(ds, 0x2b6c, 0x004b);
    memoryASet16(ds, 0x2b6e, 0x004d);
    memoryASet16(ds, 0x2b70, 0x001d);
    memoryASet16(ds, 0x2b7a, 0x0038);
    memoryASet(ds, 0x338a, 0x00);
    memoryASet(ds, 0x513e, 0x01);
loc_1a152: // 11b2:8632
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a15d() // 11b2:863d
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0010;
    di = 0x8636;
    push(cs);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    ax = 0x1400;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea5b(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (!ax)
        goto loc_1a1a0;
    al = 0x00;
    goto loc_1a1a2;
loc_1a1a0: // 11b2:8680
    al = 0x01;
loc_1a1a2: // 11b2:8682
    memoryASet(ss, bp - 15, al);
    if (memoryAGet(ss, bp - 15) == 0x00)
        goto loc_1a1d1;
    di = 0x317c;
    push(ds);
    push(di);
    di = 0x0330;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb0e(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
loc_1a1d1: // 11b2:86b1
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a258() // 11b2:8738 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0114;
    di = 0x86b5;
    push(cs);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    di = bp - 14;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    ax = 0x1400;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc37(); assert(cs == 0x11b2);
    if (!ax)
        goto loc_1a29c;
    al = 0x00;
    goto loc_1a29e;
loc_1a29c: // 11b2:877c
    al = 0x01;
loc_1a29e: // 11b2:877e
    memoryASet(ss, bp - 271, al);
    if (memoryAGet(ss, bp - 271) == 0x00)
        goto loc_1a2d2;
    di = 0x317c;
    push(ds);
    push(di);
    di = 0x0330;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x317c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    goto loc_1a4b9;
loc_1a2d2: // 11b2:87b2
    memoryASet16(ss, bp - 276, 0x0001);
    memoryASet16(ss, bp - 274, 0x0000);
    goto loc_1a2ea;
loc_1a2e0: // 11b2:87c0
    flags.carry = (memoryAGet16(ss, bp - 276) + 0x0001) >= 0x10000;
    memoryASet16(ss, bp - 276, memoryAGet16(ss, bp - 276) + 0x0001);
    memoryASet16(ss, bp - 274, memoryAGet16(ss, bp - 274) + (0x0000 + flags.carry));
loc_1a2ea: // 11b2:87ca
    ax = memoryAGet16(ss, bp - 276); es = memoryAGet16(ss, bp - 276 + 2); /*ggg2*/;
    dx = es;
    flags.carry = ax < 0x0001;
    ax -= 0x0001;
    dx = dx - 0x0000 - flags.carry;
    cx = 0x2710;
    bx = 0;
    push(cs); cs = 0x2da3; sub_2dca9(); assert(cs == 0x11b2);
    cx = ax;
    bx = dx;
    ax = 0x49f0;
    dx = 0x0002;
    flags.carry = ax < cx;
    ax -= cx;
    dx = dx - bx - flags.carry;
    push(dx);
    push(ax);
    ax = 0;
    push(ax);
    di = bp - 270;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 276);
    if (ax != 0x0001)
        goto loc_1a34a;
    di = 0x86bc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a34a: // 11b2:882a
    if (ax != 0x0002)
        goto loc_1a36e;
    di = 0x86d0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a36e: // 11b2:884e
    if (ax != 0x0003)
        goto loc_1a392;
    di = 0x86e2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a392: // 11b2:8872
    if (ax != 0x0004)
        goto loc_1a3b6;
    di = 0x86f6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a3b6: // 11b2:8896
    if (ax != 0x0005)
        goto loc_1a3da;
    di = 0x870a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a3da: // 11b2:88ba
    if (ax != 0x0006)
        goto loc_1a3fe;
    di = 0x870c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a3fe: // 11b2:88de
    if (ax != 0x0007)
        goto loc_1a421;
    di = 0x8715;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a421: // 11b2:8901
    if (ax != 0x0008)
        goto loc_1a444;
    di = 0x871e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a444: // 11b2:8924
    if (ax != 0x0009)
        goto loc_1a467;
    di = 0x8727;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    goto loc_1a488;
loc_1a467: // 11b2:8947
    if (ax != 0x000a)
        goto loc_1a488;
    di = 0x8730;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0230;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
loc_1a488: // 11b2:8968
    di = bp - 270;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp - 276);
    cl = 0x08;
    di <<= cl;
    di += 0x0c30;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 274) == 0x0000)
        goto loc_1a4af;
    goto loc_1a2e0;
loc_1a4af: // 11b2:898f
    if (memoryAGet16(ss, bp - 276) == 0x000a)
        goto loc_1a4b9;
    goto loc_1a2e0;
loc_1a4b9: // 11b2:8999
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1a4bd() // 11b2:899d +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0206;
    di = 0x1630;
    push(ds);
    push(di);
    di = bp - 262;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e5a1(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 260, ax);
    memoryASet16(ss, bp - 258, dx);
    ax = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    dx = es;
    if ((short)dx > (short)memoryAGet16(ss, bp - 258))
        goto loc_1a4ef;
    if ((short)dx < (short)memoryAGet16(ss, bp - 258))
        goto loc_1a542;
    if (ax <= memoryAGet16(ss, bp - 260))
        goto loc_1a542;
loc_1a4ef: // 11b2:89cf
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0001;
    push(ax);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    di = bp - 518;
    push(ss);
    push(di);
    push(cs);
    sub_15dd0();
    di = 0x0c30;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 256;
    push(ss);
    push(di);
    di = 0x1630;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    push(cs);
    sub_159d7();
    push(cs);
    sub_1a15d();
    push(cs);
    sub_15b98();
    goto loc_1a54d;
loc_1a542: // 11b2:8a22
    if ((short)memoryAGet16(ds, 0x50a0) > (short)0x0000)
        goto loc_1a54d;
    push(cs);
    sub_15b98();
loc_1a54d: // 11b2:8a2d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_1a852() // 11b2:8d32 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0008;
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a57d(); assert(cs == 0x11b2);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a683(); assert(cs == 0x11b2);
    push(cs); cs = 0x2a41; sub_2a5d2(); assert(cs == 0x11b2);
    ax = 0;
    memoryASet16(ss, bp - 6, ax);
    ax = 0;
    memoryASet16(ss, bp - 8, ax);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1a882;
loc_1a87f: // 11b2:8d5f
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1a882: // 11b2:8d62
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_1a892;
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a89a;
loc_1a892: // 11b2:8d72
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a89a: // 11b2:8d7a
    al = 0x01;
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    push(cs); cs = 0x2a41; sub_2a625(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, 0x0001);
    goto loc_1a8b0;
loc_1a8ad: // 11b2:8d8d
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1a8b0: // 11b2:8d90
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_1a8c0;
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a8c8;
loc_1a8c0: // 11b2:8da0
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a8c8: // 11b2:8da8
    di = 0xa23c;
    push(ds);
    push(di);
    al = 0xb0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e981(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2e93d(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_1a8f2;
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a8fa;
loc_1a8f2: // 11b2:8dd2
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a8fa: // 11b2:8dda
    di = 0xa23c;
    push(ds);
    push(di);
    al = 0xb0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e981(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2e93d(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 4) != 0x0028)
        goto loc_1a8ad;
    if (memoryAGet16(ss, bp - 8) != 0x0001)
        goto loc_1a927;
    ax = 0;
    memoryASet16(ss, bp - 8, ax);
    goto loc_1a92c;
loc_1a927: // 11b2:8e07
    memoryASet16(ss, bp - 8, 0x0001);
loc_1a92c: // 11b2:8e0c
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_1a93c;
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a944;
loc_1a93c: // 11b2:8e1c
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a944: // 11b2:8e24
    al = 0x01;
    push(ax);
    ax = 0x0018;
    ax -= memoryAGet16(ss, bp - 2);
    push(ax);
    push(cs); cs = 0x2a41; sub_2a625(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, 0x0001);
    goto loc_1a95d;
loc_1a95a: // 11b2:8e3a
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
loc_1a95d: // 11b2:8e3d
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_1a96d;
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a975;
loc_1a96d: // 11b2:8e4d
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a975: // 11b2:8e55
    di = 0xa23c;
    push(ds);
    push(di);
    al = 0xb0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e981(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2e93d(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_1a99f;
    al = 0x09;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    goto loc_1a9a7;
loc_1a99f: // 11b2:8e7f
    al = 0x01;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
loc_1a9a7: // 11b2:8e87
    di = 0xa23c;
    push(ds);
    push(di);
    al = 0xb0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e981(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2e93d(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 4) != 0x0028)
        goto loc_1a95a;
    if (memoryAGet16(ss, bp - 6) != 0x0001)
        goto loc_1a9d4;
    ax = 0;
    memoryASet16(ss, bp - 6, ax);
    goto loc_1a9d9;
loc_1a9d4: // 11b2:8eb4
    memoryASet16(ss, bp - 6, 0x0001);
loc_1a9d9: // 11b2:8eb9
    if (memoryAGet16(ss, bp - 2) == 0x000c)
        goto loc_1a9e2;
    goto loc_1a87f;
loc_1a9e2: // 11b2:8ec2
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0050;
    push(ax);
    ax = 0x0018;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0001;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1f0b; sub_1f1b1(); assert(cs == 0x11b2);
    ax = 0x0009;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0048;
    push(ax);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1f0b; sub_1f3b9(); assert(cs == 0x11b2);
    ax = 0x0004;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0006;
    push(ax);
    di = 0x8a33;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0005;
    push(ax);
    ax = 0x0007;
    push(ax);
    ax = 0x004c;
    push(ax);
    ax = 0x0016;
    push(ax);
    ax = 0x0003;
    push(ax);
    ax = 0x0004;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1f0b; sub_1f3b9(); assert(cs == 0x11b2);
    ax = 0x0008;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8a71;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0009;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8ab2;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x000a;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8af4;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x000c;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8b34;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x000d;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8b73;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x000e;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8bb5;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x000f;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8bf8;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0011;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8c32;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0012;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8c62;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0013;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8c92;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0014;
    push(ax);
    ax = 0x000f;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8cc2;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    ax = 0x0015;
    push(ax);
    ax = 0x000e;
    push(ax);
    ax = 0x0004;
    push(ax);
    di = 0x8cf2;
    push(cs);
    push(di);
    push(cs); cs = 0x1f0b; sub_1f3f9(); assert(cs == 0x11b2);
    al = 0x03;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a669(); assert(cs == 0x11b2);
    al = 0x00;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a683(); assert(cs == 0x11b2);
    al = 0x01;
    push(ax);
    al = 0x18;
    push(ax);
    push(cs); cs = 0x2a41; sub_2a625(); assert(cs == 0x11b2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1b000() // 11b2:94e0
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9061;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x907a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9093;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x90b2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x90cf;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x90ef;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x910a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9126;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9141;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x915a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9179;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9196;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91b4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91cc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91da;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91f5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9210;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x922c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9246;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x924f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x925e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9270;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9285;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x929a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x92ba;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91b4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91cc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x92d8;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x92f1;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x930f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x932f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x933c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x934c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9366;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9379;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x938c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x93ac;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x93cc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91b4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91cc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x93dd;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x93fa;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9413;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9433;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x943c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9449;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x945e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9471;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x948b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x94aa;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x94c3;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91b4;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x91cc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1b958() // 11b2:9e38
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9cc0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9cdb;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9cf6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9d14;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9d31;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9d4f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9d6e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9d8a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9da2;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9dbc;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9dd6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9df5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9e12;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0x9e2a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bcef() // 11b2:a1cf
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa03f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa05a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa07a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa098;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa0b7;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa0d5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa0f5;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa115;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa135;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa153;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa16f;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa18e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa1a9;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa1c1;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1bf87() // 11b2:a467
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa3d6;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa3f0;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa40e;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa42b;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    memoryASet(ds, di + 5692, 0x00);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa442;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = 0xa459;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    di = memoryAGet16(ss, bp - 2);
    memoryASet(ds, di + 11071, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 4, ax);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c0be() // 11b2:a59e
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    push(cs);
    sub_13311();
    ax = 0;
    memoryASet16(ss, bp - 4, ax);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0xa561;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0xa57a;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0xa57c;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 4, memoryAGet16(ss, bp - 4) + 1);
    di = 0xa590;
    push(cs);
    push(di);
    di = memoryAGet16(ss, bp - 4);
    cl = 0x08;
    di <<= cl;
    di += 0x163c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c189() // 11b2:a669 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0108;
    memoryASet(ds, 0x3395, 0x00);
    push(cs);
    sub_13311();
    di = 0xa641;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa657;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa65b;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x01);
    di = bp - 264;
    push(ss);
    push(di);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_12b21();
    di = bp - 4;
    push(ss);
    push(di);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = bp - 4;
    push(ss);
    push(di);
    di = bp - 8;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e5a1(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 8) != 0x0000)
        goto loc_1c222;
    if ((short)memoryAGet16(ss, bp - 6) <= (short)0x0000)
        goto loc_1c222;
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0011)
        goto loc_1c222;
    memoryASet(ds, 0x3395, 0x01);
    ax = memoryAGet16(ss, bp - 6);
    memoryASet16(ds, 0x2b78, ax);
loc_1c222: // 11b2:a702
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c24f() // 11b2:a72f +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_13311();
    di = 0xa70a;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa721;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x02);
    memoryASet(ds, 0x2b41, 0x03);
    memoryASet(ds, 0x2b42, 0x04);
    memoryASet(ds, 0x2b43, 0x05);
    memoryASet(ds, 0x2b44, 0x06);
    memoryASet(ds, 0x2b45, 0x07);
    memoryASet(ds, 0x2b46, 0x08);
    memoryASet(ds, 0x2b47, 0x09);
    memoryASet(ds, 0x2b48, 0x0a);
    memoryASet(ds, 0x2b49, 0x0b);
    memoryASet(ds, 0x2b4a, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ds, 0x2b5a, ax);
    if ((short)memoryAGet16(ds, 0x2b5a) <= (short)0x0001)
        goto loc_1c2e4;
    if ((short)memoryAGet16(ds, 0x2b5a) >= (short)0x000c)
        goto loc_1c2e4;
    ax = memoryAGet16(ds, 0x2b5a);
    memoryASet16(ds, 0x2b76, ax);
    push(memoryAGet16(ds, 0x2b5a));
    push(cs);
    sub_18b05();
    if (!al)
        goto loc_1c2e2;
    ax = 0;
    memoryASet16(ds, 0x2b76, ax);
loc_1c2e2: // 11b2:a7c2
    goto loc_1c2e9;
loc_1c2e4: // 11b2:a7c4
    ax = 0;
    memoryASet16(ds, 0x2b76, ax);
loc_1c2e9: // 11b2:a7c9
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c30f() // 11b2:a7ef
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0xa7cd;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa7e1;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x02);
    memoryASet(ds, 0x2b41, 0x03);
    memoryASet(ds, 0x2b42, 0x04);
    memoryASet(ds, 0x2b43, 0x05);
    memoryASet(ds, 0x2b44, 0x06);
    memoryASet(ds, 0x2b45, 0x07);
    memoryASet(ds, 0x2b46, 0x08);
    memoryASet(ds, 0x2b47, 0x09);
    memoryASet(ds, 0x2b48, 0x0a);
    memoryASet(ds, 0x2b49, 0x0b);
    memoryASet(ds, 0x2b4a, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    if ((short)memoryAGet16(ss, bp - 2) <= (short)0x0001)
        goto loc_1c395;
    if ((short)memoryAGet16(ss, bp - 2) >= (short)0x000c)
        goto loc_1c395;
    push(memoryAGet16(ss, bp - 2));
    push(cs);
    sub_187a6();
    goto loc_1c3a0;
loc_1c395: // 11b2:a875
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_1c3a0;
    memoryASet(ds, 0xa110, 0x00);
loc_1c3a0: // 11b2:a880
    memoryASet(ds, 0xa110, 0x00);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c55a() // 11b2:aa3a
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_13311();
    di = 0xa889;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0xa8a7;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa8c5;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa8e4;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa904;
    push(cs);
    push(di);
    di = 0x1c3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x1d3c, 0x00);
    di = 0xa926;
    push(cs);
    push(di);
    di = 0x1e3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa946;
    push(cs);
    push(di);
    di = 0x1f3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa967;
    push(cs);
    push(di);
    di = 0x203c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x213c, 0x00);
    di = 0xa985;
    push(cs);
    push(di);
    di = 0x223c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa9a7;
    push(cs);
    push(di);
    di = 0x233c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa9ca;
    push(cs);
    push(di);
    di = 0x243c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xa9e9;
    push(cs);
    push(di);
    di = 0x253c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x263c, 0x00);
    di = 0xaa09;
    push(cs);
    push(di);
    di = 0x273c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xaa2c;
    push(cs);
    push(di);
    di = 0x283c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x2b40, 0x15);
    memoryASet(ds, 0x2b41, 0x31);
    memoryASet(ds, 0x2b42, 0x01);
    al = 0x00;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ds, 0x2b5a, ax);
    if (memoryAGet16(ds, 0x2b5a) != 0x0015)
        goto loc_1c6a7;
    memoryASet16(ds, 0xa0ec, 0x0001);
    goto loc_1c6ac;
loc_1c6a7: // 11b2:ab87
    ax = 0;
    memoryASet16(ds, 0xa0ec, ax);
loc_1c6ac: // 11b2:ab8c
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1c6b0() // 11b2:ab90
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1c55a();
    memoryASet(ds, 0xa110, 0x01);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c6c4() // 11b2:aba4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1c55a();
    memoryASet(ds, 0xa110, 0x00);
    push(cs);
    sub_11b20();
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c72b() // 11b2:ac0b
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0xabb8;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xabce;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x193c, 0x00);
    di = 0xabe8;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xabfd;
    push(cs);
    push(di);
    di = 0x1b3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c7e0() // 11b2:acc0
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0xac7a;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x183c, 0x00);
    di = 0xac9a;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xacb2;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c8be() // 11b2:ad9e
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_13311();
    di = 0xad1c;
    push(cs);
    push(di);
    di = 0x173c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xad34;
    push(cs);
    push(di);
    di = 0x183c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xad4b;
    push(cs);
    push(di);
    di = 0x193c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xad64;
    push(cs);
    push(di);
    di = 0x1a3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet(ds, 0x1b3c, 0x00);
    di = 0xad7c;
    push(cs);
    push(di);
    di = 0x1c3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xad90;
    push(cs);
    push(di);
    di = 0x1d3c;
    push(ds);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b5e, 0x03e7);
    al = 0x01;
    push(ax);
    push(cs);
    sub_12397();
    memoryASet16(ss, bp - 2, ax);
    sp = bp;
    bp = pop();
    sp += 2;
}
void sub_1c95b() // 11b2:ae3b +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x11b2);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f5cf(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f607(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab29(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
    ax = 0;
    memoryASet16(ds, 0x5130, ax);
    ax = 0;
    memoryASet16(ds, 0x2b5c, ax);
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x11b2);
    di = 0xae33;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1f5c; sub_20ed5(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x11b2);
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
loc_1c9e8: // 11b2:aec8
    sync();
    push(cs); cs = 0x2a41; sub_2a70a(); assert(cs == 0x11b2);
    if (al)
        goto loc_1c9f9;
    if ((short)memoryAGet16(ds, 0x2b60) <= (short)0x02d0)
        goto loc_1c9e8;
loc_1c9f9: // 11b2:aed9
    ax = 0;
    memoryASet16(ds, 0x2b60, ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x11b2);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x11b2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1ca12() // 11b2:aef2 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ss, bp + 6) >= (short)0x0000)
        goto loc_1ca39;
    if ((short)memoryAGet16(ds, 0x512e) <= (short)0x0000)
        goto loc_1ca37;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x0096;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4611))
        goto loc_1ca37;
    ax = memoryAGet16(ss, bp + 6);
    ax = -ax;
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) - ax);
loc_1ca37: // 11b2:af17
    goto loc_1ca54;
loc_1ca39: // 11b2:af19
    if ((short)memoryAGet16(ds, 0x512e) >= (short)0x0140)
        goto loc_1ca54;
    ax = memoryAGet16(ds, 0x512e);
    ax += 0x00aa;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4611))
        goto loc_1ca54;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x512e, memoryAGet16(ds, 0x512e) + ax);
loc_1ca54: // 11b2:af34
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1ca5a() // 11b2:af3a +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ss, bp + 6) >= (short)0x0000)
        goto loc_1ca81;
    if ((short)memoryAGet16(ds, 0x5130) <= (short)0x0000)
        goto loc_1ca7f;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0050;
    if ((short)ax <= (short)memoryAGet16(ds, 0x4613))
        goto loc_1ca7f;
    ax = memoryAGet16(ss, bp + 6);
    ax = -ax;
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) - ax);
loc_1ca7f: // 11b2:af5f
    goto loc_1ca9f;
loc_1ca81: // 11b2:af61
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0078;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4613))
        goto loc_1ca9f;
    ax = memoryAGet16(ds, 0x5130);
    ax += 0x0008;
    if ((short)ax >= (short)0x00c8)
        goto loc_1ca9f;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x5130, memoryAGet16(ds, 0x5130) + ax);
loc_1ca9f: // 11b2:af7f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1caa5() // 11b2:af85 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x4623);
    if (ax == 0x0000)
        goto loc_1cabf;
    if (ax == 0x0001)
        goto loc_1cabf;
    goto loc_1cb57;
loc_1cabf: // 11b2:af9f
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1caf8;
    di = 0x5144;
    push(ds);
    push(di);
    push(cs); cs = 0x28b3; sub_294c2(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x4619, 0x000b);
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0011);
    memoryASet16(ds, 0x4621, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x0002, ax);
    if (memoryAGet16(ds, 0x4623) != 0x0000)
        goto loc_1caf8;
    push(cs);
    sub_142c8();
loc_1caf8: // 11b2:afd8
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x001b)
        goto loc_1cb25;
    if ((short)memoryAGet16(ds, 0x4625) >= (short)0x0021)
        goto loc_1cb10;
    memoryASet16(ds, 0x0002, memoryAGet16(ds, 0x0002) + 1);
    goto loc_1cb14;
loc_1cb10: // 11b2:aff0
    memoryASet16(ds, 0x0002, memoryAGet16(ds, 0x0002) - 1);
loc_1cb14: // 11b2:aff4
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    goto loc_1cb44;
loc_1cb25: // 11b2:b005
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0012)
        goto loc_1cb44;
    ax = memoryAGet16(ds, 0x4625);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1cb40;
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + 1);
    goto loc_1cb44;
loc_1cb40: // 11b2:b020
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - 1);
loc_1cb44: // 11b2:b024
    if ((short)memoryAGet16(ds, 0x0002) > (short)0xffff)
        goto loc_1cb54;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cb54: // 11b2:b034
    goto loc_1cdde;
loc_1cb57: // 11b2:b037
    if (ax == 0x0002)
        goto loc_1cb61;
    if (ax != 0x0004)
        goto loc_1cba3;
loc_1cb61: // 11b2:b041
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cb6d;
    ax = 0;
    memoryASet16(ds, 0x0002, ax);
loc_1cb6d: // 11b2:b04d
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0012)
        goto loc_1cb90;
    ax = memoryAGet16(ds, 0x4625);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1cb8c;
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + 1);
    goto loc_1cb90;
loc_1cb8c: // 11b2:b06c
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - 1);
loc_1cb90: // 11b2:b070
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x001b)
        goto loc_1cba0;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cba0: // 11b2:b080
    goto loc_1cdde;
loc_1cba3: // 11b2:b083
    if (ax == 0x0003)
        goto loc_1cbab;
    goto loc_1cc2c;
loc_1cbab: // 11b2:b08b
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cbbd;
    ax = 0;
    memoryASet16(ds, 0x0002, ax);
    memoryASet16(ds, 0x4625, 0x0001);
loc_1cbbd: // 11b2:b09d
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20798);
    memoryASet16(ds, 0x0002, ax);
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20800);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20802);
    memoryASet16(ds, 0x461b, ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    if (memoryAGet16(ds, di + 20798) != 0xff9d)
        goto loc_1cc29;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
    sub_1c72b();
loc_1cc29: // 11b2:b109
    goto loc_1cdde;
loc_1cc2c: // 11b2:b10c
    if (ax != 0x0005)
        goto loc_1cc65;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cc3e;
    memoryASet16(ds, 0x0002, 0x0006);
loc_1cc3e: // 11b2:b11e
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4611) < (short)0x01a4)
        goto loc_1cc62;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cc62: // 11b2:b142
    goto loc_1cdde;
loc_1cc65: // 11b2:b145
    if (ax != 0x0006)
        goto loc_1ccb9;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cc77;
    memoryASet16(ds, 0x0002, 0xfff6);
loc_1cc77: // 11b2:b157
    ax = memoryAGet16(ds, 0x4625);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1cc8b;
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + 1);
    goto loc_1cc8f;
loc_1cc8b: // 11b2:b16b
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - 1);
loc_1cc8f: // 11b2:b16f
    memoryASet16(ds, 0x0002, memoryAGet16(ds, 0x0002) + 1);
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x0002) < (short)0x0000)
        goto loc_1ccb6;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1ccb6: // 11b2:b196
    goto loc_1cdde;
loc_1ccb9: // 11b2:b199
    if (ax != 0x0007)
        goto loc_1ccdf;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1ccc5;
loc_1ccc5: // 11b2:b1a5
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0009)
        goto loc_1ccdc;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
    sub_1c7e0();
loc_1ccdc: // 11b2:b1bc
    goto loc_1cdde;
loc_1ccdf: // 11b2:b1bf
    if (ax == 0x0008)
        goto loc_1cce7;
    goto loc_1cd6e;
loc_1cce7: // 11b2:b1c7
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cd03;
    ax = 0;
    memoryASet16(ds, 0x0002, ax);
    di = 0x5144;
    push(ds);
    push(di);
    push(cs); cs = 0x28b3; sub_29270(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x4625, 0x0001);
loc_1cd03: // 11b2:b1e3
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20798);
    memoryASet16(ds, 0x0002, ax);
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20800);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    ax = memoryAGet16(ds, di + 20802);
    memoryASet16(ds, 0x461b, ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    di = memoryAGet16(ds, 0x4625);
    di <<= 1;
    si = di;
    di <<= 1;
    di += si;
    if (memoryAGet16(ds, di + 20798) != 0xff9d)
        goto loc_1cd6c;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cd6c: // 11b2:b24c
    goto loc_1cdde;
loc_1cd6e: // 11b2:b24e
    if (ax != 0x0009)
        goto loc_1cdc0;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cd86;
    memoryASet16(ds, 0x0002, 0x0002);
    memoryASet16(ds, 0x4625, 0x0001);
loc_1cd86: // 11b2:b266
    if ((short)memoryAGet16(ds, 0x4611) <= (short)0x01db)
        goto loc_1cd9a;
    memoryASet16(ds, 0x461b, 0x0005);
    memoryASet16(ds, 0x0002, 0x0001);
loc_1cd9a: // 11b2:b27a
    ax = memoryAGet16(ds, 0x0002);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    push(memoryAGet16(ds, 0x0002));
    push(cs);
    sub_1ca12();
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4611) < (short)0x01ef)
        goto loc_1cdbe;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cdbe: // 11b2:b29e
    goto loc_1cdde;
loc_1cdc0: // 11b2:b2a0
    if (ax != 0x000a)
        goto loc_1cdde;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cdcc;
loc_1cdcc: // 11b2:b2ac
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) < (short)0x0004)
        goto loc_1cdde;
    memoryASet(ss, bp - 1, 0x01);
    sub_1c8be();
loc_1cdde: // 11b2:b2be
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1cded() // 11b2:b2cd +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x4623);
    if (ax != 0x0000)
        goto loc_1ce6b;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1ce32;
    di = 0x5144;
    push(ds);
    push(di);
    push(cs); cs = 0x28b3; sub_294c2(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x4619, 0x000b);
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0011);
    memoryASet16(ds, 0x4621, 0x0001);
    memoryASet16(ds, 0x0006, 0x0002);
    push(cs);
    sub_13592();
loc_1ce32: // 11b2:b312
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    ax = memoryAGet16(ds, 0x0006);
    ax = -ax;
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    ax = memoryAGet16(ds, 0x0006);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
    ax = memoryAGet16(ds, 0x0006);
    ax = -ax;
    push(ax);
    push(cs);
    sub_1ca12();
    push(memoryAGet16(ds, 0x0006));
    push(cs);
    sub_1ca5a();
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0041)
        goto loc_1ce68;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1ce68: // 11b2:b348
    goto loc_1d012;
loc_1ce6b: // 11b2:b34b
    if (ax != 0x0001)
        goto loc_1ceae;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1ce77;
loc_1ce77: // 11b2:b357
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    ax = memoryAGet16(ds, 0x0006);
    ax = -ax;
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
    ax = memoryAGet16(ds, 0x0006);
    ax = -ax;
    push(ax);
    push(cs);
    sub_1ca12();
    if ((short)memoryAGet16(ds, 0x4611) >= (short)0x0092)
        goto loc_1ce9a;
    memoryASet16(ds, 0x461b, memoryAGet16(ds, 0x461b) + 1);
loc_1ce9a: // 11b2:b37a
    if ((short)memoryAGet16(ds, 0x4611) >= (short)0x008c)
        goto loc_1ceab;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1ceab: // 11b2:b38b
    goto loc_1d012;
loc_1ceae: // 11b2:b38e
    if (ax != 0x0002)
        goto loc_1cf2a;
    ax = memoryAGet16(ds, 0x50a2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000a;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    memoryASet16(ss, bp - 4, ax);
    if (memoryAGet16(ss, bp - 4) == 0x0000)
        goto loc_1cefe;
    ax = memoryAGet16(ss, bp - 4);
    memoryASet16(ss, bp - 6, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 6))
        goto loc_1cefc;
    memoryASet16(ds, 0x0004, ax);
    goto loc_1cedd;
loc_1ced9: // 11b2:b3b9
    memoryASet16(ds, 0x0004, memoryAGet16(ds, 0x0004) + 1);
loc_1cedd: // 11b2:b3bd
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) - 1);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0x0004);
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_1ced9;
loc_1cefc: // 11b2:b3dc
    goto loc_1cf17;
loc_1cefe: // 11b2:b3de
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) - 0x000a);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1cf17: // 11b2:b3f7
    if ((short)memoryAGet16(ds, 0x50a2) > (short)0x0000)
        goto loc_1cf27;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1cf27: // 11b2:b407
    goto loc_1d012;
loc_1cf2a: // 11b2:b40a
    if (ax == 0x0003)
        goto loc_1cf32;
    goto loc_1d012;
loc_1cf32: // 11b2:b412
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1cf39;
loc_1cf39: // 11b2:b419
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) >= (short)0x0004)
        goto loc_1cf47;
    goto loc_1d012;
loc_1cf47: // 11b2:b427
    ax = 0;
    memoryASet16(ds, 0x4623, ax);
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet(ds, 0xa0fb, 0x00);
    memoryASet(ds, 0xa110, 0x01);
    memoryASet(ss, bp - 1, 0x01);
    push(cs);
    sub_17ad0();
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x28b3; sub_29241(); assert(cs == 0x11b2);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aaf9(); assert(cs == 0x11b2);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f5cf(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f607(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0x0028;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab29(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0;
    memoryASet16(ds, 0x512e, ax);
    ax = 0;
    memoryASet16(ds, 0x5130, ax);
    ax = 0;
    memoryASet16(ds, 0x2b5c, ax);
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
    di = 0xb2c5;
    push(cs);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x1f5c; sub_20ed5(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x2b68, ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_28e1f(); assert(cs == 0x11b2);
    push(cs);
    sub_13878();
    ax = 0;
    push(ax);
    di = 0x041a;
    es = pop();
    dx = memoryAGet16(es, di);
    ax = 0;
    push(ax);
    di = 0x041c;
    es = pop();
    memoryASet16(es, di, dx);
loc_1cfe3: // 11b2:b4c3
    push(cs); cs = 0x2a41; sub_2a70a(); assert(cs == 0x11b2);
    if (!al)
        goto loc_1cfe3;
    memoryASet(ds, 0xa0fe, 0x00);
    push(cs);
    sub_13cb8();
    memoryASet(ds, 0x3394, 0x01);
    if (memoryAGet(ds, 0x3394) == 0x00)
        goto loc_1d012;
    push(memoryAGet16(ds, 0x50a7));
    push(memoryAGet16(ds, 0x50a5));
    push(cs);
    sub_1a4bd();
    memoryASet(ds, 0x3394, 0x00);
loc_1d012: // 11b2:b4f2
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d03b() // 11b2:b51b +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    di = 0x337c;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = 0xb4f9;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    push(es);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x3380;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = 0xb504;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x3380); es = memoryAGet16(ds, 0x3380 + 2); /*ggg2*/;
    push(es);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x3384;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = 0xb50f;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    ax = 0x07d3;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    push(es);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x31fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d15c() // 11b2:b63c +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x013a;
    di = 0xb62a;
    push(cs);
    push(di);
    di = bp - 16;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x327c;
    push(ds);
    push(di);
    di = bp - 16;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x327c;
    push(ds);
    push(di);
    ax = 0x1f43;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1d1a2;
loc_1d19f: // 11b2:b67f
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1d1a2: // 11b2:b682
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    di += 0x5234;
    push(ds);
    push(di);
    ax = 0x1f43;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    di = 0x327c;
    push(ds);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    push(es);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 2) != 0x0017)
        goto loc_1d19f;
    di = 0x327c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0xb632;
    push(cs);
    push(di);
    di = bp - 30;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0xb637;
    push(cs);
    push(di);
    di = bp - 44;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_1d21c;
loc_1d219: // 11b2:b6f9
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1d21c: // 11b2:b6fc
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    di += 0x5108;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dd59(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 58;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    di = bp - 314;
    push(ss);
    push(di);
    di = bp - 30;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e064(); assert(cs == 0x11b2);
    di = bp - 58;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 44;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2e0f1(); assert(cs == 0x11b2);
    di = bp - 16;
    push(ss);
    push(di);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x11b2);
    di = 0x32fc;
    push(ds);
    push(di);
    di = bp - 16;
    push(ss);
    push(di);
    push(cs); cs = 0x2da3; sub_2ea24(); assert(cs == 0x11b2);
    di = 0x32fc;
    push(ds);
    push(di);
    ax = 0x1c98;
    push(ax);
    push(cs); cs = 0x2da3; sub_2ea52(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x32fc;
    push(ds);
    push(di);
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 20744); int tmp2 = memoryAGet16(ds, di + 20744 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    push(es);
    push(di);
    push(cs); cs = 0x2da3; sub_2eb07(); assert(cs == 0x11b2);
    sp += 0x0004;
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    di = 0x32fc;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2ead3(); assert(cs == 0x11b2);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x11b2);
    if (memoryAGet16(ss, bp - 2) == 0x0003)
        goto loc_1d2d5;
    goto loc_1d219;
loc_1d2d5: // 11b2:b7b5
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d2d9() // 11b2:b7b9 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x4623);
    if (ax != 0x0000)
        goto loc_1d335;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d30a;
    memoryASet16(ds, 0x4619, 0x0011);
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0001);
    memoryASet16(ds, 0x4621, 0x0006);
loc_1d30a: // 11b2:b7ea
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x000c)
        goto loc_1d31e;
    ax = memoryAGet16(ds, 0x461b);
    if ((short)ax > (short)memoryAGet16(ds, 0x4621))
        goto loc_1d31e;
    memoryASet16(ds, 0x461b, memoryAGet16(ds, 0x461b) + 1);
loc_1d31e: // 11b2:b7fe
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0018)
        goto loc_1d332;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1d332: // 11b2:b812
    goto loc_1d42a;
loc_1d335: // 11b2:b815
    if (ax != 0x0001)
        goto loc_1d37a;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d353;
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0008);
    memoryASet16(ds, 0x4621, 0x0002);
loc_1d353: // 11b2:b833
    if ((short)memoryAGet16(ds, 0x4625) >= (short)0x0009)
        goto loc_1d363;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x11b2);
loc_1d363: // 11b2:b843
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x000e)
        goto loc_1d377;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1d377: // 11b2:b857
    goto loc_1d42a;
loc_1d37a: // 11b2:b85a
    if (ax != 0x0002)
        goto loc_1d3a9;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d392;
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x000a);
loc_1d392: // 11b2:b872
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x000e)
        goto loc_1d3a6;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1d3a6: // 11b2:b886
    goto loc_1d42a;
loc_1d3a9: // 11b2:b889
    if (ax != 0x0003)
        goto loc_1d3ed;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d3c7;
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x000b);
    memoryASet16(ds, 0x4621, 0x0005);
loc_1d3c7: // 11b2:b8a7
    if ((short)memoryAGet16(ds, 0x4625) >= (short)0x000f)
        goto loc_1d3d7;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x11b2);
loc_1d3d7: // 11b2:b8b7
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if (memoryAGet16(ds, 0x4625) != 0x000f)
        goto loc_1d3eb;
    ax = 0;
    memoryASet16(ds, 0x4625, ax);
    memoryASet16(ds, 0x4623, memoryAGet16(ds, 0x4623) + 1);
loc_1d3eb: // 11b2:b8cb
    goto loc_1d42a;
loc_1d3ed: // 11b2:b8cd
    if (ax != 0x0004)
        goto loc_1d42a;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d40b;
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0010);
    memoryASet16(ds, 0x4621, 0x0002);
loc_1d40b: // 11b2:b8eb
    if (memoryAGet16(ds, 0x4625) != 0x0003)
        goto loc_1d41b;
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2188; sub_21b90(); assert(cs == 0x11b2);
loc_1d41b: // 11b2:b8fb
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0014)
        goto loc_1d42a;
    memoryASet(ss, bp - 1, 0x01);
loc_1d42a: // 11b2:b90a
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d431() // 11b2:b911 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x4623);
    if (ax != 0x0000)
        goto loc_1d47e;
    if (memoryAGet16(ds, 0x4625) != 0x0000)
        goto loc_1d462;
    memoryASet16(ds, 0x4619, 0x0011);
    memoryASet16(ds, 0x461b, 0x0001);
    memoryASet16(ds, 0x4627, 0x0001);
    memoryASet16(ds, 0x4621, 0x0001);
loc_1d462: // 11b2:b942
    memoryASet16(ds, 0x4625, memoryAGet16(ds, 0x4625) + 1);
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0002)
        goto loc_1d473;
    memoryASet16(ds, 0x4627, 0x0015);
loc_1d473: // 11b2:b953
    if ((short)memoryAGet16(ds, 0x4625) <= (short)0x0028)
        goto loc_1d47e;
    memoryASet(ss, bp - 1, 0x01);
loc_1d47e: // 11b2:b95e
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d485() // 11b2:b965 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xa0b6) != 0x0190)
        goto loc_1d497;
    ax = 0;
    memoryASet16(ds, 0xa0b6, ax);
    goto loc_1d49d;
loc_1d497: // 11b2:b977
    memoryASet16(ds, 0xa0b6, 0x0190);
loc_1d49d: // 11b2:b97d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d4a1() // 11b2:b981 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xa0ec) != 0x0000)
        goto loc_1d4be;
    push(memoryAGet16(ds, 0x512e));
    ax = memoryAGet16(ds, 0xa0b6);
    ax += memoryAGet16(ds, 0x5130);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ab4f(); assert(cs == 0x11b2);
    goto loc_1d4cf;
loc_1d4be: // 11b2:b99e
    push(memoryAGet16(ds, 0x512e));
    ax = memoryAGet16(ds, 0xa0b6);
    ax += memoryAGet16(ds, 0x5130);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aba2(); assert(cs == 0x11b2);
loc_1d4cf: // 11b2:b9af
    ax = memoryAGet16(ds, 0xa0b6);
    memoryASet16(ds, 0x2b5c, ax);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d4d9() // 11b2:b9b9 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 6);
    if (ax == 0x0027)
        goto loc_1d4f1;
    if (ax == 0x003b)
        goto loc_1d4f1;
    if (ax != 0x0026)
        goto loc_1d558;
loc_1d4f1: // 11b2:b9d1
    ax = memoryAGet16(ds, 0x5120);
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0004;
    if ((short)ax > (short)memoryAGet16(ss, bp - 4))
        goto loc_1d555;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1d507;
loc_1d504: // 11b2:b9e4
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1d507: // 11b2:b9e7
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax != memoryAGet16(ss, bp + 6))
        goto loc_1d54d;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17920) != 0x0000)
        goto loc_1d53d;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    goto loc_1d54d;
loc_1d53d: // 11b2:ba1d
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17920, ax);
loc_1d54d: // 11b2:ba2d
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 4))
        goto loc_1d504;
loc_1d555: // 11b2:ba35
    goto loc_1d610;
loc_1d558: // 11b2:ba38
    if (ax == 0x0028)
        goto loc_1d560;
    goto loc_1d610;
loc_1d560: // 11b2:ba40
    ax = memoryAGet16(ds, 0x5120);
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0004;
    if ((short)ax <= (short)memoryAGet16(ss, bp - 4))
        goto loc_1d571;
    goto loc_1d610;
loc_1d571: // 11b2:ba51
    memoryASet16(ss, bp - 2, ax);
    goto loc_1d579;
loc_1d576: // 11b2:ba56
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1d579: // 11b2:ba59
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax != memoryAGet16(ss, bp + 6))
        goto loc_1d605;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_1d5f5;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    goto loc_1d605;
loc_1d5f5: // 11b2:bad5
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
loc_1d605: // 11b2:bae5
    ax = memoryAGet16(ss, bp - 2);
    if (ax == memoryAGet16(ss, bp - 4))
        goto loc_1d610;
    goto loc_1d576;
loc_1d610: // 11b2:baf0
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1d616() // 11b2:baf6 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0x5132) != 0xffff)
        goto loc_1d62e;
    memoryASet16(ds, 0x5132, 0x0001);
    memoryASet16(ds, 0x4619, 0x0006);
    goto loc_1d63a;
loc_1d62e: // 11b2:bb0e
    memoryASet16(ds, 0x5132, 0xffff);
    memoryASet16(ds, 0x4619, 0x0008);
loc_1d63a: // 11b2:bb1a
    memoryASet(ds, 0x3392, 0x00);
    memoryASet(ds, 0xa0fd, 0x01);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1d648() // 11b2:bb28 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0000)
        goto loc_1d688;
    goto loc_1e06a;
loc_1d688: // 11b2:bb68
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0031)
        goto loc_1d6fa;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0006)
        goto loc_1d6fa;
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x509c, memoryAGet16(ds, 0x509c) + 0x0005);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1d6fa: // 11b2:bbda
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0032)
        goto loc_1d786;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0006)
        goto loc_1d786;
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    if (memoryAGet(ds, 0xa104) == 0x00)
        goto loc_1d74c;
    memoryASet(ds, 0xa104, 0x00);
    sub_1846d();
loc_1d74c: // 11b2:bc2c
    memoryASet(ds, 0xa0ff, 0x01);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0xa0c2);
    memoryASet16(ds, 0xa0c4, ax);
    ax = 0;
    memoryASet16(ds, 0xa0c6, ax);
    goto loc_1e06a;
loc_1d786: // 11b2:bc66
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0026)
        goto loc_1d7a6;
    goto loc_1d836;
loc_1d7a6: // 11b2:bc86
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000c)
        goto loc_1d836;
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0032) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0032);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    push(cs);
    sub_1d616();
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    if (memoryAGet(ds, 0xa102) == 0x00)
        goto loc_1d810;
    sub_1bf87();
    memoryASet(ds, 0xa102, 0x00);
loc_1d810: // 11b2:bcf0
    memoryASet(ds, 0xa100, 0x01);
    if (memoryAGet(ds, 0x513c) != 0x00)
        goto loc_1d828;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_1d828;
    memoryASet(ds, 0x513c, 0x01);
loc_1d828: // 11b2:bd08
    ax = memoryAGet16(ds, 0xa0c8);
    memoryASet16(ds, 0xa0c4, ax);
    ax = 0;
    memoryASet16(ds, 0xa0c6, ax);
    goto loc_1e06a;
loc_1d836: // 11b2:bd16
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0001)
        goto loc_1d8c7;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1d8c7;
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) - 1);
    if (memoryAGet16(ds, 0xa0cc) != 0x0000)
        goto loc_1d886;
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1d88f;
loc_1d886: // 11b2:bd66
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1d88f: // 11b2:bd6f
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0032) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0032);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) + 1);
    goto loc_1e06a;
loc_1d8c7: // 11b2:bda7
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0002)
        goto loc_1d958;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1d958;
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) - 1);
    if (memoryAGet16(ds, 0xa0cc) != 0x0000)
        goto loc_1d917;
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1d920;
loc_1d917: // 11b2:bdf7
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1d920: // 11b2:be00
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0032) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0032);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) + 1);
    goto loc_1e06a;
loc_1d958: // 11b2:be38
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0004)
        goto loc_1d9e9;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1d9e9;
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) - 1);
    if (memoryAGet16(ds, 0xa0cc) != 0x0000)
        goto loc_1d9a8;
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1d9b1;
loc_1d9a8: // 11b2:be88
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1d9b1: // 11b2:be91
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0032) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0032);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) + 1);
    goto loc_1e06a;
loc_1d9e9: // 11b2:bec9
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0003)
        goto loc_1da7a;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1da7a;
    memoryASet16(ds, 0xa0cc, memoryAGet16(ds, 0xa0cc) - 1);
    if (memoryAGet16(ds, 0xa0cc) != 0x0000)
        goto loc_1da39;
    ax = 0x0020;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1da42;
loc_1da39: // 11b2:bf19
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1da42: // 11b2:bf22
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0032) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0032);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    memoryASet16(ds, 0x50a2, memoryAGet16(ds, 0x50a2) + 1);
    goto loc_1e06a;
loc_1da7a: // 11b2:bf5a
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x000b)
        goto loc_1db05;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0001)
        goto loc_1db05;
    ax = 0x0017;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0320) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0320);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1db05: // 11b2:bfe5
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0004)
        goto loc_1db87;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0001)
        goto loc_1db87;
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1db87: // 11b2:c067
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0009)
        goto loc_1dc12;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0001)
        goto loc_1dc12;
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1dc12: // 11b2:c0f2
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x002c)
        goto loc_1dc84;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1dc84;
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    memoryASet(ds, 0xa0f9, 0x01);
    goto loc_1e06a;
loc_1dc84: // 11b2:c164
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if ((short)memoryAGet16(ds, di + 20634) >= (short)0x0009)
        goto loc_1dca4;
    goto loc_1dd7a;
loc_1dca4: // 11b2:c184
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if ((short)memoryAGet16(ds, di + 20634) <= (short)0x000d)
        goto loc_1dcc4;
    goto loc_1dd7a;
loc_1dcc4: // 11b2:c1a4
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) == 0x0009)
        goto loc_1dce4;
    goto loc_1dd7a;
loc_1dce4: // 11b2:c1c4
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x000d)
        goto loc_1dd2a;
    ax = 0x001f;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x2710) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x2710);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x001b;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1dd50;
loc_1dd2a: // 11b2:c20a
    ax = 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_1dd50: // 11b2:c230
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1dd7a: // 11b2:c25a
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0031)
        goto loc_1de05;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1de05;
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1de05: // 11b2:c2e5
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x002d)
        goto loc_1de92;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1de92;
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_1de5b;
    memoryASet(ds, 0xa10d, 0x01);
    memoryASet(ds, 0x513c, 0x00);
    ax = memoryAGet16(ds, 0xa0ca);
    memoryASet16(ds, 0xa0c4, ax);
    ax = 0;
    memoryASet16(ds, 0xa0c6, ax);
loc_1de5b: // 11b2:c33b
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    push(cs);
    sub_181f7();
    goto loc_1e06a;
loc_1de92: // 11b2:c372
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x002e)
        goto loc_1df23;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000d)
        goto loc_1df23;
    ax = 0x001d;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    if (memoryAGet(ds, 0xa105) == 0x00)
        goto loc_1df08;
    memoryASet(ds, 0xa105, 0x00);
loc_1df08: // 11b2:c3e8
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_1df20;
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_1df20;
    memoryASet16(ds, 0x5124, 0x0001);
    push(cs);
    sub_18578();
loc_1df20: // 11b2:c400
    goto loc_1e06a;
loc_1df23: // 11b2:c403
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if ((short)memoryAGet16(ds, di + 20634) >= (short)0x0025)
        goto loc_1df43;
    goto loc_1dff0;
loc_1df43: // 11b2:c423
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if ((short)memoryAGet16(ds, di + 20634) <= (short)0x0027)
        goto loc_1df63;
    goto loc_1dff0;
loc_1df63: // 11b2:c443
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x0001)
        goto loc_1dff0;
    memoryASet(ds, 0xa10a, 0x01);
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    memoryASet(ds, 0xa10a, 0x00);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    memoryASet16(ds, 0xa0d0, 0xffff);
    memoryASet16(ds, 0xa0d2, 0xffff);
    memoryASet(ds, 0xa10b, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0ce, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    goto loc_1e06a;
loc_1dff0: // 11b2:c4d0
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x0019)
        goto loc_1e06a;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000e)
        goto loc_1e06a;
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0xa0f8, 0x01);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20634, ax);
    ax = memoryAGet16(ds, 0xa0e4);
    memoryASet16(ds, 0xa0c4, ax);
    ax = 0;
    memoryASet16(ds, 0xa0c6, ax);
    if (memoryAGet(ds, 0xa101) == 0x00)
        goto loc_1e06a;
    push(cs);
    sub_177e5();
loc_1e06a: // 11b2:c54a
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) != 0x0000)
        goto loc_1e08a;
    goto loc_1ebd8;
loc_1e08a: // 11b2:c56a
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0011)
        goto loc_1e0c4;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) != 0x000d)
        goto loc_1e12d;
loc_1e0c4: // 11b2:c5a4
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) != 0x000c)
        goto loc_1e12d;
    if (memoryAGet(ds, 0xa0f5) == 0x00)
        goto loc_1e11a;
    if (memoryAGet(ds, 0xa0f6) != 0x00)
        goto loc_1e10e;
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    if (memoryAGet16(ds, 0x509e) != 0x0003)
        goto loc_1e10e;
    push(cs);
    sub_1c0be();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0xc350) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0xc350);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_1e10e: // 11b2:c5ee
    memoryASet(ds, 0xa0f6, 0x01);
    ax = 0;
    memoryASet16(ds, 0xa0e6, ax);
    goto loc_1e12a;
loc_1e11a: // 11b2:c5fa
    if (memoryAGet(ds, 0xa106) == 0x00)
        goto loc_1e12a;
    push(cs);
    sub_17926();
    memoryASet(ds, 0xa106, 0x00);
loc_1e12a: // 11b2:c60a
    goto loc_1ebd8;
loc_1e12d: // 11b2:c60d
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0032)
        goto loc_1e14d;
    goto loc_1e220;
loc_1e14d: // 11b2:c62d
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x000d)
        goto loc_1e16d;
    goto loc_1e220;
loc_1e16d: // 11b2:c64d
    if (memoryAGet(ds, 0xa0f9) != 0x00)
        goto loc_1e177;
    goto loc_1e21d;
loc_1e177: // 11b2:c657
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) - 0x0002);
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp - 6);
    if (ax != 0x0000)
        goto loc_1e1d1;
    ax = 0x001b;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x07d0) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x07d0);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_1e21d;
loc_1e1d1: // 11b2:c6b1
    if (ax != 0x0001)
        goto loc_1e1f8;
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_1e21d;
loc_1e1f8: // 11b2:c6d8
    if (ax != 0x0002)
        goto loc_1e21d;
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    ax -= 0x0002;
    push(ax);
    push(cs); cs = 0x2188; sub_22127(); assert(cs == 0x11b2);
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_1e21d: // 11b2:c6fd
    goto loc_1ebd8;
loc_1e220: // 11b2:c700
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0011)
        goto loc_1e240;
    goto loc_1e403;
loc_1e240: // 11b2:c720
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x0009)
        goto loc_1e260;
    goto loc_1e403;
loc_1e260: // 11b2:c740
    if (memoryAGet(ds, 0xa109) == 0x00)
        goto loc_1e270;
    push(cs);
    sub_182c3();
    memoryASet(ds, 0xa109, 0x00);
loc_1e270: // 11b2:c750
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e2b9;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e2b9;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e2b9;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x3390, 0x01);
loc_1e2b9: // 11b2:c799
    if (memoryAGet(ds, 0x3390) != 0x00)
        goto loc_1e2c3;
    goto loc_1e400;
loc_1e2c3: // 11b2:c7a3
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = memoryAGet16(ds, 0xa0d6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x002d);
    ax = memoryAGet16(ds, 0xa0d6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x002e);
    ax = memoryAGet16(ds, 0xa0d6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0d6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0d6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0d6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0d6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0d6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d4);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0d4);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0d6);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0xa0d4);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0d6);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
loc_1e400: // 11b2:c8e0
    goto loc_1ebd8;
loc_1e403: // 11b2:c8e3
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0015)
        goto loc_1e423;
    goto loc_1e5e6;
loc_1e423: // 11b2:c903
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x0009)
        goto loc_1e443;
    goto loc_1e5e6;
loc_1e443: // 11b2:c923
    if (memoryAGet(ds, 0xa109) == 0x00)
        goto loc_1e453;
    push(cs);
    sub_182c3();
    memoryASet(ds, 0xa109, 0x00);
loc_1e453: // 11b2:c933
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e49c;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e49c;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e49c;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x3390, 0x01);
loc_1e49c: // 11b2:c97c
    if (memoryAGet(ds, 0x3390) != 0x00)
        goto loc_1e4a6;
    goto loc_1e5e3;
loc_1e4a6: // 11b2:c986
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = memoryAGet16(ds, 0xa0da);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x0031);
    ax = memoryAGet16(ds, 0xa0da);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x0032);
    ax = memoryAGet16(ds, 0xa0da);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0da);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0da);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0da);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0da);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0da);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0d8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0d8);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0da);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0xa0d8);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0da);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
loc_1e5e3: // 11b2:cac3
    goto loc_1ebd8;
loc_1e5e6: // 11b2:cac6
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0013)
        goto loc_1e606;
    goto loc_1e7c9;
loc_1e606: // 11b2:cae6
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x0009)
        goto loc_1e626;
    goto loc_1e7c9;
loc_1e626: // 11b2:cb06
    if (memoryAGet(ds, 0xa109) == 0x00)
        goto loc_1e636;
    push(cs);
    sub_182c3();
    memoryASet(ds, 0xa109, 0x00);
loc_1e636: // 11b2:cb16
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e67f;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e67f;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e67f;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x3390, 0x01);
loc_1e67f: // 11b2:cb5f
    if (memoryAGet(ds, 0x3390) != 0x00)
        goto loc_1e689;
    goto loc_1e7c6;
loc_1e689: // 11b2:cb69
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = memoryAGet16(ds, 0xa0de);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x002f);
    ax = memoryAGet16(ds, 0xa0de);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x0030);
    ax = memoryAGet16(ds, 0xa0de);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0de);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ds, 0xa0de);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0de);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, 0x0016);
    ax = memoryAGet16(ds, 0xa0de);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0de);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ds, 0xa0dc);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ds, 0xa0dc);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0de);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0xa0dc);
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    ax = memoryAGet16(ds, 0xa0de);
    ax++;
    cx = 0x0004;
    ax <<= cl;
    ax--;
    push(ax);
    push(cs); cs = 0x2188; sub_21b53(); assert(cs == 0x11b2);
loc_1e7c6: // 11b2:cca6
    goto loc_1ebd8;
loc_1e7c9: // 11b2:cca9
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x000f)
        goto loc_1e7e9;
    goto loc_1e887;
loc_1e7e9: // 11b2:ccc9
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x0009)
        goto loc_1e809;
    goto loc_1e887;
loc_1e809: // 11b2:cce9
    if (memoryAGet(ds, 0xa108) == 0x00)
        goto loc_1e819;
    push(cs);
    sub_18390();
    memoryASet(ds, 0xa108, 0x00);
loc_1e819: // 11b2:ccf9
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e848;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e848;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e848;
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x3390, 0x01);
loc_1e848: // 11b2:cd28
    if (memoryAGet(ds, 0x3390) == 0x00)
        goto loc_1e884;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) - 1);
    memoryASet(ds, 0xa0f3, 0x00);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_290cd(); assert(cs == 0x11b2);
loc_1e884: // 11b2:cd64
    goto loc_1ebd8;
loc_1e887: // 11b2:cd67
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x000e)
        goto loc_1e8a7;
    goto loc_1e945;
loc_1e8a7: // 11b2:cd87
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x0009)
        goto loc_1e8c7;
    goto loc_1e945;
loc_1e8c7: // 11b2:cda7
    if (memoryAGet(ds, 0xa108) == 0x00)
        goto loc_1e8d7;
    push(cs);
    sub_18390();
    memoryASet(ds, 0xa108, 0x00);
loc_1e8d7: // 11b2:cdb7
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e906;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e906;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e906;
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    memoryASet(ds, 0x3390, 0x01);
loc_1e906: // 11b2:cde6
    if (memoryAGet(ds, 0x3390) == 0x00)
        goto loc_1e942;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    memoryASet(ds, 0xa0f3, 0x01);
    ax = 0;
    push(ax);
    push(cs); cs = 0x28b3; sub_28f76(); assert(cs == 0x11b2);
loc_1e942: // 11b2:ce22
    goto loc_1ebd8;
loc_1e945: // 11b2:ce25
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x001f)
        goto loc_1e965;
    goto loc_1ea47;
loc_1e965: // 11b2:ce45
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x000c)
        goto loc_1e985;
    goto loc_1ea47;
loc_1e985: // 11b2:ce65
    if (memoryAGet(ds, 0xa108) == 0x00)
        goto loc_1e995;
    push(cs);
    sub_18390();
    memoryASet(ds, 0xa108, 0x00);
loc_1e995: // 11b2:ce75
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1e9f7;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1e9f7;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1e9f7;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    push(memoryAGet16(ds, di + 20620));
    push(cs);
    sub_1d4d9();
loc_1e9f7: // 11b2:ced7
    if (memoryAGet(ds, 0x3390) == 0x00)
        goto loc_1ea44;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) + 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    push(memoryAGet16(ds, di + 20620));
    push(cs);
    sub_1d4d9();
loc_1ea44: // 11b2:cf24
    goto loc_1ebd8;
loc_1ea47: // 11b2:cf27
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0020)
        goto loc_1ea67;
    goto loc_1eb49;
loc_1ea67: // 11b2:cf47
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) == 0x000c)
        goto loc_1ea87;
    goto loc_1eb49;
loc_1ea87: // 11b2:cf67
    if (memoryAGet(ds, 0xa108) == 0x00)
        goto loc_1ea97;
    push(cs);
    sub_18390();
    memoryASet(ds, 0xa108, 0x00);
loc_1ea97: // 11b2:cf77
    if (memoryAGet(ds, 0x338a) == 0x00)
        goto loc_1eaf9;
    if (memoryAGet(ds, 0xa0f4) == 0x00)
        goto loc_1eaf9;
    memoryASet(ds, 0xa0f4, 0x00);
    memoryASet16(ds, 0xa0e8, memoryAGet16(ds, 0xa0e8) + 1);
    ax = memoryAGet16(ds, 0xa0e8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_1eaf9;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) - 1);
    ax = 0;
    memoryASet16(ds, 0xa0e8, ax);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    push(memoryAGet16(ds, di + 20620));
    push(cs);
    sub_1d4d9();
loc_1eaf9: // 11b2:cfd9
    if (memoryAGet(ds, 0x3390) == 0x00)
        goto loc_1eb46;
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    memoryASet(ds, 0x3390, 0x00);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, memoryAGet16(ds, di + 20626) - 1);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    push(memoryAGet16(ds, di + 20620));
    push(cs);
    sub_1d4d9();
loc_1eb46: // 11b2:d026
    goto loc_1ebd8;
loc_1eb49: // 11b2:d029
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) != 0x000d)
        goto loc_1ebd8;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) != 0x0001)
        goto loc_1ebd8;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    di = memoryAGet16(ds, di + 20620);
    if (memoryAGet(ds, di + 20648) == 0x00)
        goto loc_1ebd8;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    memoryASet16(ds, 0xa0e0, ax);
    ax = memoryAGet16(ss, bp - 4);
    ax--;
    memoryASet16(ds, 0xa0e2, ax);
    ax = 0;
    memoryASet16(ds, 0xa0e6, ax);
    memoryASet(ds, 0xa0f7, 0x01);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    di = 0x5098;
    push(ds);
    push(di);
    di = 0x50ba;
    push(ds);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x11b2);
loc_1ebd8: // 11b2:d0b8
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20639) != 0x00)
        goto loc_1ebf8;
    goto loc_1ecd1;
loc_1ebf8: // 11b2:d0d8
    if (memoryAGet(ds, 0x513c) != 0x00)
        goto loc_1ec02;
    goto loc_1ecd1;
loc_1ec02: // 11b2:d0e2
    if (memoryAGet(ds, 0x5140) == 0x00)
        goto loc_1ec0c;
    goto loc_1ecd1;
loc_1ec0c: // 11b2:d0ec
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0031)
        goto loc_1ec80;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0032)
        goto loc_1ec80;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x001b)
        goto loc_1ec80;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) != 0x001c)
        goto loc_1ecae;
loc_1ec80: // 11b2:d160
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20632) != 0x000a)
        goto loc_1ecae;
    memoryASet16(ds, 0x5124, 0x0001);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
    goto loc_1ecd1;
loc_1ecae: // 11b2:d18e
    if (memoryAGet16(ds, 0x5124) != 0x0000)
        goto loc_1ecd1;
    if (memoryAGet16(ds, 0xa0ea) != 0xffff)
        goto loc_1ecc1;
    push(cs); cs = 0x2188; sub_222b6(); assert(cs == 0x11b2);
loc_1ecc1: // 11b2:d1a1
    if ((short)memoryAGet16(ds, 0x5124) <= (short)0x0000)
        goto loc_1ecd1;
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2188; sub_21a9f(); assert(cs == 0x11b2);
loc_1ecd1: // 11b2:d1b1
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_1ed02() // 11b2:d1e2 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0068;
    push(cs); cs = 0x2aa3; sub_2d888(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0x509e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0001;
    push(ax);
    di = bp - 32;
    push(ss);
    push(di);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    push(memoryAGet16(ds, 0x50a7));
    push(memoryAGet16(ds, 0x50a5));
    ax = 0x0007;
    push(ax);
    di = bp - 16;
    push(ss);
    push(di);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0x509c);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0003;
    push(ax);
    di = bp - 64;
    push(ss);
    push(di);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    ax = memoryAGet16(ds, 0x512e);
    ax &= 0x0007;
    memoryASet(ss, bp - 97, al);
    memoryASet16(ss, bp - 102, 0x0001);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0233;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax--;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 100, 0x0001);
    goto loc_1ed95;
loc_1ed92: // 11b2:d272
    memoryASet16(ss, bp - 100, memoryAGet16(ss, bp - 100) + 1);
loc_1ed95: // 11b2:d275
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -16);
    push(ax);
    di = 0xd1b7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1ede6;
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -16);
    ah = 0;
    ax -= 0x002f;
    ax += 0x0008;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 100);
    ax--;
    ax += memoryAGet16(ss, bp - 102);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1ede6: // 11b2:d2c6
    if (memoryAGet16(ss, bp - 100) != 0x0007)
        goto loc_1ed92;
    if (memoryAGet(ds, 0xa0fb) != 0x00)
        goto loc_1edf6;
    goto loc_1ee9b;
loc_1edf6: // 11b2:d2d6
    memoryASet16(ss, bp - 102, 0x0009);
    ax = memoryAGet16(ss, bp - 102);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    di = 0xd1d7;
    push(cs);
    push(di);
    push(cs);
    sub_19c01();
    memoryASet16(ss, bp - 102, 0x0013);
    ax = memoryAGet16(ds, 0x50a2);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0004;
    push(ax);
    di = bp - 48;
    push(ss);
    push(di);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 100, 0x0001);
    goto loc_1ee41;
loc_1ee3e: // 11b2:d31e
    memoryASet16(ss, bp - 100, memoryAGet16(ss, bp - 100) + 1);
loc_1ee41: // 11b2:d321
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -48);
    push(ax);
    di = 0xd1b7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1ee92;
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -48);
    ah = 0;
    ax -= 0x002f;
    ax += 0x0008;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 100);
    ax--;
    ax += memoryAGet16(ss, bp - 102);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1ee92: // 11b2:d372
    if (memoryAGet16(ss, bp - 100) != 0x0004)
        goto loc_1ee3e;
    goto loc_1f09e;
loc_1ee9b: // 11b2:d37b
    memoryASet16(ss, bp - 102, memoryAGet16(ss, bp - 102) + 0x000b);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += 0x0003;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax--;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 100, 0x0001);
    goto loc_1eecf;
loc_1eecc: // 11b2:d3ac
    memoryASet16(ss, bp - 100, memoryAGet16(ss, bp - 100) + 1);
loc_1eecf: // 11b2:d3af
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -64);
    push(ax);
    di = 0xd1b7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1ef20;
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -64);
    ah = 0;
    ax -= 0x002f;
    ax += 0x0008;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 100);
    ax--;
    ax += memoryAGet16(ss, bp - 102);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1ef20: // 11b2:d400
    if (memoryAGet16(ss, bp - 100) != 0x0003)
        goto loc_1eecc;
    memoryASet16(ss, bp - 102, memoryAGet16(ss, bp - 102) + 0x0007);
    ax = memoryAGet16(ds, 0x509e);
    memoryASet16(ss, bp - 104, ax);
    ax = 0x0001;
    if ((short)ax > (short)memoryAGet16(ss, bp - 104))
        goto loc_1ef71;
    memoryASet16(ss, bp - 100, ax);
    goto loc_1ef40;
loc_1ef3d: // 11b2:d41d
    memoryASet16(ss, bp - 100, memoryAGet16(ss, bp - 100) + 1);
loc_1ef40: // 11b2:d420
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += 0x00a3;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax += memoryAGet16(ss, bp - 100);
    ax--;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    ax = memoryAGet16(ss, bp - 100);
    if (ax != memoryAGet16(ss, bp - 104))
        goto loc_1ef3d;
loc_1ef71: // 11b2:d451
    memoryASet16(ss, bp - 102, memoryAGet16(ss, bp - 102) + 0x0002);
    if (memoryAGet(ds, 0xa0f9) == 0x00)
        goto loc_1efa5;
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += 0x00cb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax += memoryAGet16(ss, bp - 100);
    ax--;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1efa5: // 11b2:d485
    memoryASet16(ss, bp - 102, memoryAGet16(ss, bp - 102) + 0x0002);
    memoryASet16(ds, 0xa0c6, memoryAGet16(ds, 0xa0c6) + 1);
    if ((short)memoryAGet16(ds, 0xa0c6) <= (short)0x0011)
        goto loc_1efbd;
    ax = 0;
    memoryASet16(ds, 0xa0c6, ax);
    memoryASet16(ds, 0xa0c4, memoryAGet16(ds, 0xa0c4) - 1);
loc_1efbd: // 11b2:d49d
    if ((short)memoryAGet16(ds, 0xa0c4) > (short)0xffff)
        goto loc_1efc7;
    goto loc_1f09e;
loc_1efc7: // 11b2:d4a7
    memoryASet16(ss, bp - 102, 0x001a);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0323;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax += 0xffff;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 102, 0x0019);
    ax = memoryAGet16(ds, 0xa0c4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    push(dx);
    push(ax);
    ax = 0x0002;
    push(ax);
    di = bp - 96;
    push(ss);
    push(di);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e556(); assert(cs == 0x11b2);
    memoryASet16(ss, bp - 100, 0x0001);
    goto loc_1f01b;
loc_1f018: // 11b2:d4f8
    memoryASet16(ss, bp - 100, memoryAGet16(ss, bp - 100) + 1);
loc_1f01b: // 11b2:d4fb
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -96);
    push(ax);
    di = 0xd1b7;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x11b2);
    if (flags.zero)
        goto loc_1f06b;
    di = memoryAGet16(ss, bp - 100);
    al = memoryAGet(ss, bp + di + -96);
    ah = 0;
    ax -= 0x002f;
    ax += 0x0008;
    dx = 0x0028;
    mul16(dx);
    di = memoryAGet16(ds, 0x3384); es = memoryAGet16(ds, 0x3384 + 2); /*ggg2*/;
    di += ax;
    di += 0xffdb;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 100);
    ax += memoryAGet16(ss, bp - 102);
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1f06b: // 11b2:d54b
    if (memoryAGet16(ss, bp - 100) != 0x0002)
        goto loc_1f018;
    memoryASet16(ss, bp - 102, 0x001d);
    di = memoryAGet16(ds, 0x337c); es = memoryAGet16(ds, 0x337c + 2); /*ggg2*/;
    di += 0x0323;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 102);
    ax += 0xffff;
    cx = 0x0003;
    ax <<= cl;
    dx = ax;
    al = memoryAGet(ss, bp - 97);
    ah = 0;
    ax += dx;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c47d(); assert(cs == 0x11b2);
loc_1f09e: // 11b2:d57e
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f0b0() // 1f0b:0000 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    al = memoryAGet(ss, bp + 8);
    ah = 0;
    dx = ax;
    al = memoryAGet(ss, bp + 6);
    ah = 0;
    cx = 0x0004;
    ax <<= cl;
    ax |= dx;
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_1f0f5() // 1f0b:0045 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    al = memoryAGet(ss, bp + 8);
    push(ax);
    di = 0x0025;
    push(cs);
    push(di);
    push(cs); cs = 0x2da3; sub_2e304(); assert(cs == 0x1f0b);
    if (!flags.zero)
        goto loc_1f110;
    memoryASet(ss, bp + 8, 0x01);
loc_1f110: // 1f0b:0060
    di = bp - 256;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp + 8);
    ah = 0;
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs); cs = 0x2da3; sub_2ebf8(); assert(cs == 0x1f0b);
    al = memoryAGet(ss, bp + 8);
    memoryASet(ss, bp - 256, al);
    di = bp - 256;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x1f0b);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_1f147() // 1f0b:0097 +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0106;
    if ((short)memoryAGet16(ss, bp + 12) <= (short)0x0050)
        goto loc_1f159;
    memoryASet16(ss, bp + 12, 0x0050);
loc_1f159: // 1f0b:00a9
    al = memoryAGet(ss, bp + 8);
    push(ax);
    al = memoryAGet(ss, bp + 6);
    push(ax);
    push(cs);
    sub_1f0b0();
    memoryASet(ss, bp - 3, al);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 14);
    if ((short)ax > (short)memoryAGet16(ss, bp - 6))
        goto loc_1f1ab;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1f17e;
loc_1f17b: // 1f0b:00cb
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1f17e: // 1f0b:00ce
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 3);
    push(ax);
    di = bp - 262;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ss, bp + 16);
    ax++;
    push(ax);
    al = 0x20;
    push(ax);
    push(cs);
    sub_1f0f5();
    push(cs);
    sub_1f4aa();
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 6))
        goto loc_1f17b;
loc_1f1ab: // 1f0b:00fb
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_1f1b1() // 1f0b:0101 +nearfar +stackDrop16
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x010c;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0000)
        goto loc_1f1db;
    memoryASet(ss, bp - 3, 0x20);
    memoryASet(ss, bp - 4, 0x20);
    memoryASet(ss, bp - 5, 0x20);
    memoryASet(ss, bp - 6, 0x20);
    memoryASet(ss, bp - 7, 0x20);
    memoryASet(ss, bp - 8, 0x20);
    goto loc_1f27c;
loc_1f1db: // 1f0b:012b
    if (ax != 0x0001)
        goto loc_1f1fb;
    memoryASet(ss, bp - 3, 0xda);
    memoryASet(ss, bp - 4, 0xbf);
    memoryASet(ss, bp - 5, 0xc0);
    memoryASet(ss, bp - 6, 0xd9);
    memoryASet(ss, bp - 7, 0xc4);
    memoryASet(ss, bp - 8, 0xb3);
    goto loc_1f27c;
loc_1f1fb: // 1f0b:014b
    if (ax != 0x0002)
        goto loc_1f21a;
    memoryASet(ss, bp - 3, 0xc9);
    memoryASet(ss, bp - 4, 0xbb);
    memoryASet(ss, bp - 5, 0xc8);
    memoryASet(ss, bp - 6, 0xbc);
    memoryASet(ss, bp - 7, 0xcd);
    memoryASet(ss, bp - 8, 0xba);
    goto loc_1f27c;
loc_1f21a: // 1f0b:016a
    if (ax != 0x0003)
        goto loc_1f239;
    memoryASet(ss, bp - 3, 0xd6);
    memoryASet(ss, bp - 4, 0xb7);
    memoryASet(ss, bp - 5, 0xd3);
    memoryASet(ss, bp - 6, 0xbd);
    memoryASet(ss, bp - 7, 0xc4);
    memoryASet(ss, bp - 8, 0xba);
    goto loc_1f27c;
loc_1f239: // 1f0b:0189
    if (ax != 0x0004)
        goto loc_1f258;
    memoryASet(ss, bp - 3, 0xd5);
    memoryASet(ss, bp - 4, 0xb8);
    memoryASet(ss, bp - 5, 0xd4);
    memoryASet(ss, bp - 6, 0xbe);
    memoryASet(ss, bp - 7, 0xcd);
    memoryASet(ss, bp - 8, 0xb3);
    goto loc_1f27c;
loc_1f258: // 1f0b:01a8
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 3, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 4, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 5, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 6, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 7, al);
    al = memoryAGet(ss, bp + 6);
    memoryASet(ss, bp - 8, al);
loc_1f27c: // 1f0b:01cc
    al = memoryAGet(ss, bp + 10);
    push(ax);
    al = memoryAGet(ss, bp + 8);
    push(ax);
    push(cs);
    sub_1f0b0();
    memoryASet(ss, bp - 9, al);
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 3);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= memoryAGet16(ss, bp + 18);
    ax--;
    push(ax);
    al = memoryAGet(ss, bp - 7);
    push(ax);
    push(cs);
    sub_1f0f5();
    push(cs);
    sub_1f4aa();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 16);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 4);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    memoryASet16(ss, bp - 12, ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    if ((short)ax > (short)memoryAGet16(ss, bp - 12))
        goto loc_1f34e;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1f308;
loc_1f305: // 1f0b:0255
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_1f308: // 1f0b:0258
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 268;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 8);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp - 2);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 268;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 8);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 12))
        goto loc_1f305;
loc_1f34e: // 1f0b:029e
    al = memoryAGet(ss, bp + 18);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 5);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    ax = memoryAGet16(ss, bp + 14);
    ax -= memoryAGet16(ss, bp + 18);
    ax--;
    push(ax);
    al = memoryAGet(ss, bp - 7);
    push(ax);
    push(cs);
    sub_1f0f5();
    push(cs);
    sub_1f4aa();
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp - 9);
    push(ax);
    di = bp - 266;
    push(ss);
    push(di);
    al = memoryAGet(ss, bp - 6);
    push(ax);
    push(cs); cs = 0x2da3; sub_2e17f(); assert(cs == 0x1f0b);
    push(cs);
    sub_1f4aa();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 14;
}
void sub_1f3b9() // 1f0b:0309 +far +stackDrop16
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 18));
    push(memoryAGet16(ss, bp + 16));
    push(memoryAGet16(ss, bp + 14));
    push(memoryAGet16(ss, bp + 12));
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_1f1b1();
    ax = memoryAGet16(ss, bp + 18);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 16);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 14);
    ax--;
    push(ax);
    ax = memoryAGet16(ss, bp + 12);
    ax--;
    push(ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(cs);
    sub_1f147();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 14;
}
void sub_1f3f9() // 1f0b:0349 +far +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0100;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 256;
    push(ss);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e07e(); assert(cs == 0x1f0b);
    al = memoryAGet(ss, bp - 256);
    ah = 0;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    dx = ax;
    ax = 0x0028;
    ax -= dx;
    push(ax);
    al = memoryAGet(ss, bp + 14);
    push(ax);
    al = memoryAGet(ss, bp + 12);
    push(ax);
    al = memoryAGet(ss, bp + 10);
    push(ax);
    push(cs);
    sub_1f0b0();
    push(ax);
    di = bp - 256;
    push(ss);
    push(di);
    push(cs);
    sub_1f4aa();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_1f449() // 1f0b:0399
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1f5ae();
    if (al != 0x07)
        goto loc_1f45c;
    memoryASet16(ds, 0x3398, 0xb000);
    goto loc_1f462;
loc_1f45c: // 1f0b:03ac
    memoryASet16(ds, 0x3398, 0xb800);
loc_1f462: // 1f0b:03b2
    push(cs);
    sub_1f542();
    if (al == 0x01)
        goto loc_1f46e;
    al = 0x00;
    goto loc_1f470;
loc_1f46e: // 1f0b:03be
    al = 0x01;
loc_1f470: // 1f0b:03c0
    memoryASet(ds, 0x339a, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f477() // 1f0b:03c7 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1f449();
    memoryASet16(ds, 0x339c, 0x00c8);
    memoryASet16(ds, 0x339e, 0x0000);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f48e() // 1f0b:03de +returnCarry
{
    ax = 0;
    cl = al;
    bh = al;
    ch--;
    cx >>= 1;
    di = cx;
    di >>= 1;
    di >>= 1;
    di += cx;
    bx--;
    bx <<= 1;
    flags.carry = (di + bx) >= 0x10000;
    di += bx;
    es = memoryAGet16(ds, 0x3398);
}
void sub_1f4aa() // 1f0b:03fa +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    ch = memoryAGet(ss, bp + 12);
    bl = memoryAGet(ss, bp + 14);
    sub_1f48e();
    cl = memoryAGet(ds, 0x339a);
    si = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    flags.direction = 0;
    al = lodsb<DS_SI>();
    tx = cx; cx = ax; ax = tx;
    if (cx==0)
        goto loc_1f4ec;
    ah = memoryAGet(ss, bp + 10);
    al = rcr8(al, 0x01);
    if (!flags.carry)
        goto loc_1f4e8;
    dx = 0x03da;
loc_1f4cd: // 1f0b:041d
    al = lodsb<DS_SI>();
    bx = ax;
    flags.interrupts = 0;
loc_1f4d1: // 1f0b:0421
    al = in8(dx);
    flags.carry = 0;
    if (al & 0x08)
        goto loc_1f4df;
    al = rcr8(al, 0x01);
    if (flags.carry)
        goto loc_1f4d1;
loc_1f4da: // 1f0b:042a
    al = in8(dx);
    al = rcr8(al, 0x01);
    if (!flags.carry)
        goto loc_1f4da;
loc_1f4df: // 1f0b:042f
    ax = bx;
    stosw<ES_DI>(ax);
    flags.interrupts = 1;
    if (--cx)
        goto loc_1f4cd;
    goto loc_1f4ec;
  // gap 1 bytes
loc_1f4e8: // 1f0b:0438
    al = lodsb<DS_SI>();
    stosw<ES_DI>(ax);
    if (--cx)
        goto loc_1f4e8;
loc_1f4ec: // 1f0b:043c
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_1f53a() // 1f0b:048a
{
    ah = 0x0f;
    interrupt(0x10);
    memoryASet(ds, 0x33a0, al);
}
void sub_1f542() // 1f0b:0492
{
    sub_1f53a();
    memoryASet(ds, 0x33a1, 0x04);
    cx = 0xffff;
    ax = 0x1c00;
    interrupt(0x10);
    if (al == 0x1c)
        goto loc_1f597;
    memoryASet(ds, 0x33a1, 0x03);
    bl = 0x32;
    ax = 0x1200;
    interrupt(0x10);
    if (al == 0x12)
        goto loc_1f597;
    memoryASet(ds, 0x33a1, 0x02);
    bx = 0xff10;
    cx = 0xffff;
    ax = 0x1200;
    interrupt(0x10);
    al = 0;
    if (cx == 0xffff)
        goto loc_1f59b;
    if (bh > 0x01)
        goto loc_1f59b;
    if (bh == 0x01)
        goto loc_1f590;
    if (memoryAGet(ds, 0x33a0) == 0x07)
        goto loc_1f59b;
    goto loc_1f597;
loc_1f590: // 1f0b:04e0
    if (memoryAGet(ds, 0x33a0) != 0x07)
        goto loc_1f59b;
loc_1f597: // 1f0b:04e7
    al = memoryAGet(ds, 0x33a1);
    cs = pop();
    return;
loc_1f59b: // 1f0b:04eb
    memoryASet(ds, 0x33a1, 0x01);
    if (memoryAGet(ds, 0x33a0) != 0x07)
        goto loc_1f597;
    memoryASet(ds, 0x33a1, 0x00);
    goto loc_1f597;
}
void sub_1f5ae() // 1f0b:04fe
{
    sub_1f53a();
    cs = pop();
}
void sub_1f5c0() // 1f5c:0000 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_1f82b();
    push(cs);
    sub_21662();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f5cf() // 1f5c:000f +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    ax = memoryAGet16(ss, bp + 6);
    if (ax < 0x0000)
        goto loc_1f5eb;
    if (ax <= 0x0015)
        goto loc_1f5f2;
loc_1f5eb: // 1f5c:002b
    memoryASet16(ss, bp - 2, 0xfffa);
    goto loc_1f5fa;
loc_1f5f2: // 1f5c:0032
    memoryASet16(ds, 0x33a2, ax);
    memoryASet16(ss, bp - 2, 0x0000);
loc_1f5fa: // 1f5c:003a
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1f607() // 1f5c:0047 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    ax = memoryAGet16(ds, 0x33a2);
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    if (ax >= 0x0000)
        goto loc_1f62e;
    memoryASet16(ss, bp - 2, ax);
    goto loc_1f69e;
loc_1f62e: // 1f5c:006e
    di = ax;
    ax = dx;
    es = ax;
    bx = memoryAGet16(ss, bp + 6);
    if (bx != 0x0001)
        goto loc_1f670;
    memoryASet16(ds, 0x33a4, bx);
    memoryASet16(ds, 0x33a6, 0x0000);
    if (memoryAGet(es, di) == 0x09)
        goto loc_1f666;
    push(bx);
    push(bp);
    ah = 0x0f;
    interrupt(0x10);
    bp = pop();
    bx = pop();
    if (al == memoryAGet(es, di + 22))
        goto loc_1f69e;
    al = memoryAGet(es, di + 22);
    push(bp);
    ah = 0x00;
    interrupt(0x10);
    bp = pop();
    goto loc_1f69e;
loc_1f666: // 1f5c:00a6
    ax = 0x0002;
    push(cs); cs = 0x1f5c; sub_20230(); assert(cs == 0x1f5c);
    goto loc_1f69e;
loc_1f670: // 1f5c:00b0
    if (bx != 0x0000)
        goto loc_1f699;
    memoryASet16(ds, 0x33a4, bx);
    memoryASet16(ds, 0x33a6, 0x0000);
    if (memoryAGet(es, di) == 0x09)
        goto loc_1f68f;
    al = 0x03;
    push(bp);
    ah = 0x00;
    interrupt(0x10);
    bp = pop();
    goto loc_1f69e;
loc_1f68f: // 1f5c:00cf
    ax = 0x0020;
    push(cs); cs = 0x1f5c; sub_20230(); assert(cs == 0x1f5c);
    goto loc_1f69e;
loc_1f699: // 1f5c:00d9
    memoryASet16(ss, bp - 2, 0xfff9);
loc_1f69e: // 1f5c:00de
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1f6ab() // 1f5c:00eb +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    ax = memoryAGet16(ds, 0x33a2);
    memoryASet16(ss, bp - 2, ax);
    if ((short)ax < (short)0x0000)
        goto loc_1f6ca;
    if ((short)ax <= (short)0x0015)
        goto loc_1f6cf;
loc_1f6ca: // 1f5c:010a
    memoryASet16(ss, bp - 2, 0xfffa);
loc_1f6cf: // 1f5c:010f
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_1f76c() // 1f5c:01ac +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    ax = memoryAGet16(ss, bp + 6);
    if (ax < 0x0000)
        goto loc_1f788;
    if (ax <= 0x0015)
        goto loc_1f78f;
loc_1f788: // 1f5c:01c8
    memoryASet16(ss, bp - 2, 0xfffa);
    goto loc_1f7b7;
loc_1f78f: // 1f5c:01cf
    di = 0x4064;
    ax = 0x0038;
    cx = memoryAGet16(ss, bp + 6);
    mul16(cx);
    di += ax;
    ax = 0x2ec1;
    es = ax;
    ax = di;
    dx = es;
    bl = memoryAGet(es, di);
    if (bl == memoryAGet(ss, bp + 6))
        goto loc_1f7b4;
    memoryASet16(ss, bp - 2, 0xfc19);
    goto loc_1f7b7;
loc_1f7b4: // 1f5c:01f4
    memoryASet16(ss, bp - 2, ax);
loc_1f7b7: // 1f5c:01f7
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_1f82b() // 1f5c:026b
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ds, 0x33a2, 0xffff);
    memoryASet16(ds, 0x33a4, 0xffff);
    memoryASet16(ds, 0x33a6, 0xffff);
    memoryASet16(ds, 0x33a8, 0x0001);
    memoryASet16(ds, 0x3c52, 0xffff);
    memoryASet16(ds, 0x3c4e, 0xffff);
    memoryASet16(ds, 0x3c50, 0xffff);
    memoryASet16(ds, 0x3c4c, 0x0800);
    memoryASet(ds, 0x3c58, 0x00);
    memoryASet(ds, 0x3c59, 0x00);
    memoryASet(ds, 0x3c5a, 0x00);
    memoryASet(ds, 0x3c5b, 0x00);
    memoryASet(ds, 0x3c5c, 0x00);
    ax = 0x2ec1;
    es = ax;
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0000;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x00);
    memoryASet(ds, bx + 22, 0x04);
    memoryASet(ds, bx + 23, 0x02);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xb800);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0001);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0001;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x01);
    memoryASet(ds, bx + 22, 0x06);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xb800);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0002);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0002;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x02);
    memoryASet(ds, bx + 22, 0x0d);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x08);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x2000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0003;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x03);
    memoryASet(ds, bx + 22, 0x0e);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x04);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x4000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0004;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x04);
    memoryASet(ds, bx + 22, 0x0f);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0005;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x05);
    memoryASet(ds, bx + 22, 0x10);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0003);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0006;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x06);
    memoryASet(ds, bx + 22, 0x11);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0007;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x07);
    memoryASet(ds, bx + 22, 0x12);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0008;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x08);
    memoryASet(ds, bx + 22, 0x13);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0140);
    memoryASet16(ds, bx + 26, 0x00c8);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0009;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x09);
    memoryASet(ds, bx + 22, 0x00);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x02d0);
    memoryASet16(ds, bx + 26, 0x015c);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x02);
    memoryASet16(ds, bx + 30, 0xb000);
    memoryASet16(ds, bx + 32, 0x8000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0a);
    memoryASet(ds, bx + 22, 0x29);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000b;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0b);
    memoryASet(ds, bx + 22, 0x2d);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x015e);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000c;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0c);
    memoryASet(ds, bx + 22, 0x2e);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000d;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0d);
    memoryASet(ds, bx + 22, 0x30);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000e;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0e);
    memoryASet(ds, bx + 22, 0x58);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x000f;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x0f);
    memoryASet(ds, bx + 22, 0x59);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0000);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0010;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x10);
    memoryASet(ds, bx + 22, 0x5e);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x0190);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0011;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x11);
    memoryASet(ds, bx + 22, 0x5f);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0012;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x12);
    memoryASet(ds, bx + 22, 0x16);
    memoryASet(ds, bx + 23, 0x01);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x04);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0004);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0013;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x13);
    memoryASet(ds, bx + 22, 0x1a);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x0190);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0014;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x14);
    memoryASet(ds, bx + 22, 0x1b);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0280);
    memoryASet16(ds, bx + 26, 0x01e0);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    bx = 0x4064;
    ax = 0x0038;
    cx = 0x0015;
    mul16(cx);
    bx += ax;
    memoryASet(ds, bx, 0x15);
    memoryASet(ds, bx + 22, 0x1d);
    memoryASet(ds, bx + 23, 0x08);
    memoryASet16(ds, bx + 24, 0x0320);
    memoryASet16(ds, bx + 26, 0x0258);
    memoryASet(ds, bx + 28, 0x01);
    memoryASet(ds, bx + 29, 0x01);
    memoryASet16(ds, bx + 30, 0xa000);
    memoryASet16(ds, bx + 32, 0x0000);
    memoryASet16(ds, bx + 34, 0x0005);
    memoryASet16(ds, bx + 36, 0x0000);
    memoryASet16(ds, bx + 38, 0x0000);
    memoryASet16(ds, bx + 40, 0x0000);
    memoryASet16(ds, bx + 42, 0x0000);
    memoryASet16(ds, bx + 44, 0x0000);
    memoryASet16(ds, bx + 46, 0x0000);
    memoryASet16(ds, bx + 48, 0x0000);
    memoryASet16(ds, bx + 50, 0x0000);
    memoryASet16(ds, bx + 52, 0x0000);
    memoryASet16(ds, bx + 54, 0x0000);
    si = 0x4534;
    memoryASet(ds, si, 0x35);
    si++;
    memoryASet(ds, si, 0x2d);
    si++;
    memoryASet(ds, si, 0x2e);
    si++;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x5b);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x57);
    si++;
    memoryASet(ds, si, 0x57);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x00);
    si++;
    memoryASet(ds, si, 0x00);
    si++;
    si = 0x4540;
    memoryASet(ds, si, 0x61);
    si++;
    memoryASet(ds, si, 0x50);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    memoryASet(ds, si, 0x0f);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x06);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x19);
    si++;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x0d);
    si++;
    memoryASet(ds, si, 0x0b);
    si++;
    memoryASet(ds, si, 0x0c);
    si++;
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_20230() // 1f5c:0c70 +far
{
    push(ax);
    if (al == 0x02)
        goto loc_20242;
    si = 0x4540;
    bx = 0x0720;
    push(bx);
    bx = 0x07d0;
    push(bx);
    goto loc_2024d;
loc_20242: // 1f5c:0c82
    si = 0x4534;
    bx = 0x0000;
    push(bx);
    bx = 0x4000;
    push(bx);
loc_2024d: // 1f5c:0c8d
    ah = al;
    al = ah;
    dx = 0x03b8;
    out8(dx, al);
    cx = 0x000c;
    ah = 0;
    flags.direction = 0;
loc_2025b: // 1f5c:0c9b
    al = ah;
    dx = 0x03b4;
    out8(dx, al);
    al = lodsb<DS_SI>();
    bl = al;
    al = bl;
    dx = 0x03b5;
    out8(dx, al);
    ah++;
    if (--cx)
        goto loc_2025b;
    cx = pop();
    ax = 0xb000;
    es = ax;
    di = 0;
    ax = pop();
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    bx = pop();
    bl += 0x08;
    al = bl;
    dx = 0x03b8;
    out8(dx, al);
    cs = pop();
}
void sub_202ed() // 1f5c:0d2d +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x001e;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    if (memoryAGet(ds, 0x3c58) == 0x01)
        goto loc_20308;
    push(cs); cs = 0x1f5c; sub_20387(); assert(cs == 0x1f5c);
loc_20308: // 1f5c:0d48
    ax = memoryAGet16(ds, 0x33a8);
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 16);
    ds = ax;
    si = memoryAGet16(ss, bp + 14);
    memoryASet16(ss, bp - 8, si);
    bx = memoryAGet16(ss, bp + 12);
    bx += memoryAGet16(ss, bp - 8);
    bx--;
    memoryASet16(ss, bp - 10, bx);
    al = memoryAGet(ds, si);
    if (al == 0x0a)
        goto loc_20330;
    memoryASet16(ss, bp - 2, 0xfffb);
    goto loc_2037a;
loc_20330: // 1f5c:0d70
    push(cs); cs = 0x1f5c; sub_1f6ab(); assert(cs == 0x1f5c);
    if ((short)ax >= (short)0x0000)
        goto loc_2033f;
    memoryASet16(ss, bp - 2, ax);
    goto loc_2037a;
loc_2033f: // 1f5c:0d7f
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    if (ax >= 0x0000)
        goto loc_20351;
    memoryASet16(ss, bp - 2, 0xfc19);
    goto loc_2037a;
loc_20351: // 1f5c:0d91
    di = ax;
    ax = dx;
    es = ax;
    if (memoryAGet16(ss, bp - 4) != 0x0001)
        goto loc_20376;
    if (memoryAGet(es, di) == 0x09)
        goto loc_20376;
    push(bp);
    ah = 0x0f;
    interrupt(0x10);
    bp = pop();
    if (al == memoryAGet(es, di + 22))
        goto loc_20376;
    memoryASet16(ss, bp - 2, 0xfff9);
    goto loc_2037a;
loc_20376: // 1f5c:0db6
    //    cs = memoryAGet16(es, di + 36 + 2); indirectJump(cs, memoryAGet16(es, di + 36)); stop();;
    assert(memoryAGet16(es, di + 0x24) == 0x10d7);
    assert(memoryAGet16(es, di + 0x24) == 0x10d7);
    cs = 0x1f5c;
    sub_20697();
    return;
loc_2037a: // 1f5c:0dba
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_20387() // 1f5c:0dc7 +far
{
    ax = 0x0000;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x0f9b);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x0f9b);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0008;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x12b6);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0009;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x137a);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000a;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000b;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000c;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000d;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x15d1);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000e;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x000f;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x14a7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x14a7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x10d7);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x1f5c);
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x1f5c; sub_1f76c(); assert(cs == 0x1f5c);
    bx = ax;
    memoryASet16(ds, bx + 36, 0x16f5);
    memoryASet16(ds, bx + 38, 0x1f5c);
    memoryASet(ds, 0x3c58, 0x01);
    cs = pop();
}
void sub_20697() // 1f5c:10d7 +stackDrop14
{
    sp -= 2;
    ax = memoryAGet16(es, di + 24);
    cl = 0x03;
    ax >>= cl;
    memoryASet16(ss, bp - 22, ax);
    memoryASet16(ss, bp - 14, 0x0000);
    ax = memoryAGet16(ds, si + 8);
    ax -= memoryAGet16(ds, si + 4);
    ax++;
    bx = memoryAGet16(ss, bp + 10);
    bx += ax;
    if (bx <= memoryAGet16(es, di + 24))
        goto loc_206c8;
    ax = memoryAGet16(es, di + 24);
    ax -= memoryAGet16(ss, bp + 10);
    ax++;
    if (!(al & 0x07))
        goto loc_206c8;
    ax++;
    al &= 0xf8;
loc_206c8: // 1f5c:1108
    bl = memoryAGet(ds, si + 3);
    bh = 0;
    mul16(bx);
    bl = 0x08;
    div8(bl);
    cl = ah;
    ah = 0;
    memoryASet16(ss, bp - 16, ax);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) - 1);
    if (cl == 0x00)
        goto loc_206f3;
    memoryASet16(ss, bp - 14, 0x0001);
    al = 0x80;
    cl--;
    al = sar8(al, cl);
    memoryASet(ss, bp - 12, al);
    memoryASet16(ss, bp - 16, memoryAGet16(ss, bp - 16) + 1);
loc_206f3: // 1f5c:1133
    al = 0x05;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0x00;
    out8(dx, al);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    memoryASet(ss, bp - 24, 0x01);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 24);
    out8(dx, al);
    memoryASet16(ss, bp - 28, 0x0001);
    memoryASet16(ss, bp - 26, 0x0008);
    if (memoryAGet(ds, si + 65) != 0x03)
        goto loc_2072b;
    memoryASet16(ss, bp - 26, 0x0004);
loc_2072b: // 1f5c:116b
    if (memoryAGet(ds, si + 65) != 0x01)
        goto loc_20745;
    memoryASet16(ss, bp - 28, 0x000f);
    memoryASet16(ss, bp - 26, 0x0001);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = 0x0f;
    out8(dx, al);
loc_20745: // 1f5c:1185
    ax = memoryAGet16(es, di + 32);
    bx = memoryAGet16(ss, bp + 6);
    mul16(bx);
    dx = ax;
    ax = memoryAGet16(ss, bp + 10);
    cl = 0x03;
    ax >>= cl;
    dx += ax;
    ax = memoryAGet16(ss, bp + 8);
    if (memoryAGet16(ss, bp - 22) == 0x0050)
        goto loc_20776;
    if (memoryAGet16(ss, bp - 22) == 0x0064)
        goto loc_20784;
    cl = 0x03;
    ax <<= cl;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    goto loc_20796;
loc_20776: // 1f5c:11b6
    cl = 0x04;
    ax <<= cl;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    goto loc_20796;
loc_20784: // 1f5c:11c4
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    ax <<= 1;
    ax <<= 1;
    ax <<= 1;
    dx += ax;
    ax <<= 1;
    dx += ax;
loc_20796: // 1f5c:11d6
    ax = memoryAGet16(ds, si + 10);
    ax -= memoryAGet16(ds, si + 6);
    ax++;
    memoryASet16(ss, bp - 18, ax);
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    if (bx <= memoryAGet16(es, di + 26))
        goto loc_207b6;
    ax = memoryAGet16(es, di + 26);
    ax -= memoryAGet16(ss, bp + 8);
    ax++;
    memoryASet16(ss, bp - 18, ax);
loc_207b6: // 1f5c:11f6
    bx = 0x0000;
    ax = memoryAGet16(es, di + 30);
    es = ax;
    di = dx;
    ax = memoryAGet16(ds, si + 66);
    memoryASet16(ss, bp - 20, ax);
    si += 0x0080;
    flags.direction = 0;
loc_207cc: // 1f5c:120c
    cx = 0x0001;
    al = lodsb<DS_SI>();
    ah = al;
    ah &= 0xc0;
    if (ah != 0xc0)
        goto loc_207e0;
    cl = al;
    cl -= 0xc0;
    al = lodsb<DS_SI>();
loc_207e0: // 1f5c:1220
    if (bx < memoryAGet16(ss, bp - 16))
        goto loc_2080e;
    if (bx > memoryAGet16(ss, bp - 16))
        goto loc_20811;
    if (memoryAGet16(ss, bp - 14) != 0x0001)
        goto loc_2080e;
    push(ax);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 12);
    out8(dx, al);
    al = memoryAGet(es, bx + di);
    ax = pop();
    memoryASet(es, bx + di, al);
    push(ax);
    al = 0x08;
    dx = 0x03ce;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    ax = pop();
    goto loc_20811;
loc_2080e: // 1f5c:124e
    memoryASet(es, bx + di, al);
loc_20811: // 1f5c:1251
    bx++;
    if (bx != memoryAGet16(ss, bp - 20))
        goto loc_2083f;
    bx = 0;
    dx = memoryAGet16(ss, bp - 26);
    memoryASet(ss, bp - 24, memoryAGet(ss, bp - 24) << 1);
    if (memoryAGet(ss, bp - 24) <= dl)
        goto loc_20832;
    dx = memoryAGet16(ss, bp - 28);
    memoryASet(ss, bp - 24, dl);
    di += memoryAGet16(ss, bp - 22);
    memoryASet16(ss, bp - 18, memoryAGet16(ss, bp - 18) - 1);
    if (!memoryAGet16(ss, bp - 18))
        goto loc_2085a;
loc_20832: // 1f5c:1272
    push(ax);
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = memoryAGet(ss, bp - 24);
    out8(dx, al);
    ax = pop();
loc_2083f: // 1f5c:127f
    if (--cx)
        goto loc_207e0;
    if (si <= memoryAGet16(ss, bp - 10))
        goto loc_20857;
    push(si);
    push(cs); cs = 0x1f5c; sub_20fa3(); assert(cs == 0x1f5c);
    si = ax;
    if (!flags.carry)
        goto loc_20857;
    memoryASet16(ss, bp - 2, 0xfffd);
    goto loc_20869;
loc_20857: // 1f5c:1297
    goto loc_207cc;
loc_2085a: // 1f5c:129a
    al = 0x02;
    dx = 0x03c4;
    out8(dx, al);
    dx++;
    al = 0xff;
    out8(dx, al);
    memoryASet16(ss, bp - 2, 0x0000);
loc_20869: // 1f5c:12a9
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
//    stop("stack_below");
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_20ed5() // 1f5c:1915 +far +stackDrop12
{
    sp -= 2;
//    stop("breakpoint");
    push(bp);
    bp = sp;
    sp -= 0x0084;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    push(ds);
    flags.direction = 0;
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    ax = ss;
    es = ax;
    si = memoryAGet16(ss, bp + 12);
    cl = memoryAGet(ds, si);
    ch = 0;
    si++;
    di = bp;
    di -= 0x0084;
    memoryASet16(ss, bp + 14, es);
    memoryASet16(ss, bp + 12, di);
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    memoryASet(es, di, 0x00);
    ds = pop();
    push(ds);
    dx = memoryAGet16(ss, bp + 12);
    ax = memoryAGet16(ss, bp + 14);
    ds = ax;
    al = 0x00;
    ah = 0x3d;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x3c52, ax);
    if (!flags.carry)
        goto loc_20f28;
    memoryASet16(ss, bp - 2, 0xffff);
    goto loc_20f90;
loc_20f28: // 1f5c:1968
    ax = 0x2ec1;
    es = ax;
    di = 0x3442;
    if (memoryAGet16(ds, 0x3c4e) == 0xffff)
        goto loc_20f40;
    ax = memoryAGet16(ds, 0x3c4e);
    es = ax;
    di = memoryAGet16(ds, 0x3c50);
loc_20f40: // 1f5c:1980
    memoryASet16(ds, 0x3c54, 0x0000);
    memoryASet16(ds, 0x3c56, 0x0000);
    push(ds);
    bx = memoryAGet16(ds, 0x3c52);
    cx = memoryAGet16(ds, 0x3c4c);
    dx = di;
    ax = es;
    ds = ax;
    ah = 0x3f;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_20f69;
    memoryASet16(ss, bp - 2, 0xfffd);
    goto loc_20f88;
loc_20f69: // 1f5c:19a9
    ax = es;
    push(ax);
    push(di);
    ax = memoryAGet16(ds, 0x3c4c);
    ax -= 0x000a;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    push(ax);
    push(cs); cs = 0x1f5c; sub_202ed(); assert(cs == 0x1f5c);
    memoryASet16(ss, bp - 2, ax);
loc_20f88: // 1f5c:19c8
    bx = memoryAGet16(ds, 0x3c52);
    ah = 0x3e;
    interrupt(0x21);
loc_20f90: // 1f5c:19d0
    memoryASet16(ds, 0x3c52, 0xffff);
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_20fa3() // 1f5c:19e3 +far +returnCarry +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    push(bx);
    push(cx);
    push(dx);
    if (memoryAGet16(ds, 0x3c52) != 0xffff)
        goto loc_20fbf;
    flags.carry = 1;
    goto loc_2100f;
loc_20fbf: // 1f5c:19ff
    ax = ds;
    es = ax;
    di = 0x3442;
    if (memoryAGet16(ds, 0x3c4e) == 0xffff)
        goto loc_20fd6;
    ax = memoryAGet16(ds, 0x3c4e);
    es = ax;
    di = memoryAGet16(ds, 0x3c50);
loc_20fd6: // 1f5c:1a16
    ax = memoryAGet16(ss, bp + 6);
    ax -= di;
    flags.carry = (memoryAGet16(ds, 0x3c56) + ax) >= 0x10000;
    memoryASet16(ds, 0x3c56, memoryAGet16(ds, 0x3c56) + ax);
    if (!flags.carry)
        goto loc_20fe6;
    memoryASet16(ds, 0x3c54, memoryAGet16(ds, 0x3c54) + 0x0001);
loc_20fe6: // 1f5c:1a26
    bx = memoryAGet16(ds, 0x3c52);
    cx = memoryAGet16(ds, 0x3c54);
    dx = memoryAGet16(ds, 0x3c56);
    al = 0x00;
    ah = 0x42;
    interrupt(0x21);
    push(ds);
    bx = memoryAGet16(ds, 0x3c52);
    cx = memoryAGet16(ds, 0x3c4c);
    dx = di;
    ax = es;
    ds = ax;
    ah = 0x3f;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ss, bp - 2, di);
loc_2100f: // 1f5c:1a4f
    dx = pop();
    cx = pop();
    bx = pop();
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_21662() // 1f5c:20a2
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(ds);
    push(es);
    push(si);
    push(di);
    ax = 0x2ec1;
    ds = ax;
    memoryASet16(ss, bp - 2, 0x0000);
    memoryASet16(ds, 0x4060, 0x0000);
    memoryASet16(ds, 0x4062, 0x0001);
    memoryASet16(ds, 0x454c, 0x0000);
    memoryASet16(ds, 0x454e, 0x0000);
    memoryASet16(ds, 0x4550, 0x0001);
    memoryASet16(ds, 0x4552, 0x0001);
    si = 0x4557;
    memoryASet(ds, si, 0x02);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x45);
    si++;
    si = 0x455a;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x58);
    si++;
    si = 0x4560;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x4f);
    si++;
    si = 0x4566;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x32);
    si++;
    memoryASet(ds, si, 0x45);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x39);
    si++;
    si = 0x456e;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x26);
    si++;
    memoryASet(ds, si, 0x6c);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x48);
    si++;
    si = 0x4574;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x70);
    si++;
    si = 0x4582;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x458a;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x35);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x4592;
    memoryASet(ds, si, 0x07);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x74);
    si++;
    memoryASet(ds, si, 0x33);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x30);
    si++;
    memoryASet(ds, si, 0x52);
    si++;
    si = 0x459a;
    memoryASet(ds, si, 0x05);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x72);
    si++;
    memoryASet(ds, si, 0x31);
    si++;
    memoryASet(ds, si, 0x41);
    si++;
    si = 0x45a0;
    memoryASet(ds, si, 0x04);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x72);
    si++;
    memoryASet(ds, si, 0x42);
    si++;
    si = 0x45a5;
    memoryASet(ds, si, 0x03);
    si++;
    memoryASet(ds, si, 0x1b);
    si++;
    memoryASet(ds, si, 0x2a);
    si++;
    memoryASet(ds, si, 0x62);
    si++;
    si = 0x45b5;
    memoryASet16(ds, si, 0xca00);
    si += 0x0002;
    memoryASet16(ds, si, 0x3b9a);
    si += 0x0002;
    memoryASet16(ds, si, 0xe100);
    si += 0x0002;
    memoryASet16(ds, si, 0x05f5);
    si += 0x0002;
    memoryASet16(ds, si, 0x9680);
    si += 0x0002;
    memoryASet16(ds, si, 0x0098);
    si += 0x0002;
    memoryASet16(ds, si, 0x4240);
    si += 0x0002;
    memoryASet16(ds, si, 0x000f);
    si += 0x0002;
    memoryASet16(ds, si, 0x86a0);
    si += 0x0002;
    memoryASet16(ds, si, 0x0001);
    si += 0x0002;
    memoryASet16(ds, si, 0x2710);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x03e8);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x0064);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x000a);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    memoryASet16(ds, si, 0x0001);
    si += 0x0002;
    memoryASet16(ds, si, 0x0000);
    si += 0x0002;
    ax = memoryAGet16(ss, bp - 2);
    di = pop();
    si = pop();
    es = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_21880() // 2188:0000 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0024;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    push(es);
    push(di);
    di = bp - 34;
    push(ss);
    push(di);
    ax = 0x0021;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x2188);
    memoryASet(ss, bp - 1, 0x01);
    memoryASet16(ss, bp - 36, 0x0001);
    goto loc_218a7;
loc_218a4: // 2188:0024
    memoryASet16(ss, bp - 36, memoryAGet16(ss, bp - 36) + 1);
loc_218a7: // 2188:0027
    di = memoryAGet16(ss, bp - 36);
    if (memoryAGet(ss, bp + di + -18) == 0x00)
        goto loc_218b4;
    memoryASet(ss, bp - 1, 0x00);
loc_218b4: // 2188:0034
    if (memoryAGet16(ss, bp - 36) != 0x0010)
        goto loc_218a4;
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_218c3() // 2188:0043 +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0x4613);
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_21900;
    goto loc_21a87;
loc_21900: // 2188:0080
    ax = memoryAGet16(ds, 0x4613);
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_21937;
    goto loc_21a87;
loc_21937: // 2188:00b7
    ax = memoryAGet16(ds, 0x4613);
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_2196e;
    goto loc_21a87;
loc_2196e: // 2188:00ee
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0008;
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_219a8;
    goto loc_21a87;
loc_219a8: // 2188:0128
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0008;
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_219e2;
    goto loc_21a87;
loc_219e2: // 2188:0162
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000f;
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_21a87;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000f;
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_21a87;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000f;
    ax += memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    ax += memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_21a92;
loc_21a87: // 2188:0207
    memoryASet(ss, bp - 1, 0x00);
    ax = 0;
    memoryASet16(ds, 0xa0b4, ax);
    goto loc_21a96;
loc_21a92: // 2188:0212
    memoryASet(ss, bp - 1, 0x01);
loc_21a96: // 2188:0216
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_21a9f() // 2188:021f +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ds, 0xa0bc);
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet(ds, 0x513e) != 0x00)
        goto loc_21ab5;
    goto loc_21b4d;
loc_21ab5: // 2188:0235
    if (memoryAGet(ds, 0x513f) == 0x00)
        goto loc_21b25;
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000c;
    idiv16(cx);
    ax++;
    memoryASet16(ds, 0xa0bc, ax);
    ax = memoryAGet16(ds, 0x5136);
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ss, bp - 2);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 20744); int tmp2 = memoryAGet16(ds, di + 20744 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    cx = memoryAGet16(es, di + 65526);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0262;
    mul16(dx);
    di = memoryAGet16(ds, 0xa0bc);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 20744); int tmp2 = memoryAGet16(ds, di + 20744 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    ax = memoryAGet16(es, di + 65526);
    if ((short)ax < (short)cx)
        goto loc_21b1d;
    memoryASet16(ds, 0x5138, 0x0001);
    memoryASet(ds, 0x513f, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000c;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    ax++;
    memoryASet16(ds, 0x5136, ax);
    goto loc_21b23;
loc_21b1d: // 2188:029d
    ax = memoryAGet16(ss, bp - 2);
    memoryASet16(ds, 0xa0bc, ax);
loc_21b23: // 2188:02a3
    goto loc_21b4d;
loc_21b25: // 2188:02a5
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000c;
    idiv16(cx);
    ax++;
    memoryASet16(ds, 0xa0bc, ax);
    memoryASet16(ds, 0x5138, 0x0001);
    memoryASet(ds, 0x513f, 0x01);
    ax = memoryAGet16(ss, bp + 6);
    ax--;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x000c;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    ax++;
    memoryASet16(ds, 0x5136, ax);
loc_21b4d: // 2188:02cd
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_21b53() // 2188:02d3 +nearfar +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    memoryASet16(ds, 0x510a, memoryAGet16(ds, 0x510a) + 1);
    ax = memoryAGet16(ss, bp + 8);
    di = memoryAGet16(ds, 0x510a);
    di <<= 1;
    memoryASet16(ds, di + 20704, ax);
    ax = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ds, 0x510a);
    di <<= 1;
    memoryASet16(ds, di + 20724, ax);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x2188);
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x28b3; sub_28d51(); assert(cs == 0x2188);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_21b90() // 2188:0310 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) + 1);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if ((short)ax <= (short)cx)
        goto loc_21bd1;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_21bd1: // 2188:0351
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_21bd7() // 2188:0357 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_21c09;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17906);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, cx);
    goto loc_21c25;
loc_21c09: // 2188:0389
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17904);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, cx);
loc_21c25: // 2188:03a5
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_21c2b() // 2188:03ab +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    memoryASet(ss, bp - 1, 0x00);
    ax = memoryAGet16(ds, 0x511e);
    if (ax == 0x0004)
        goto loc_21c40;
    goto loc_21cf7;
loc_21c40: // 2188:03c0
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_21c60;
    goto loc_21cf4;
loc_21c60: // 2188:03e0
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == memoryAGet16(ds, 0x5122))
        goto loc_21cf0;
    ax = memoryAGet16(ds, 0x5122);
    ax++;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == bx)
        goto loc_21cf0;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0004;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == bx)
        goto loc_21cf0;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0005;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax != bx)
        goto loc_21cf4;
loc_21cf0: // 2188:0470
    memoryASet(ss, bp - 1, 0x01);
loc_21cf4: // 2188:0474
    goto loc_21e9f;
loc_21cf7: // 2188:0477
    if (ax != 0x0001)
        goto loc_21d23;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax != memoryAGet16(ds, 0x5122))
        goto loc_21d20;
    memoryASet(ss, bp - 1, 0x01);
loc_21d20: // 2188:04a0
    goto loc_21e9f;
loc_21d23: // 2188:04a3
    if (ax == 0x0006)
        goto loc_21d2b;
    goto loc_21e33;
loc_21d2b: // 2188:04ab
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_21d4b;
    goto loc_21e31;
loc_21d4b: // 2188:04cb
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax != memoryAGet16(ds, 0x5122))
        goto loc_21d6e;
    goto loc_21e2d;
loc_21d6e: // 2188:04ee
    ax = memoryAGet16(ds, 0x5122);
    ax++;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax != bx)
        goto loc_21d95;
    goto loc_21e2d;
loc_21d95: // 2188:0515
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0002;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == bx)
        goto loc_21e2d;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0004;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == bx)
        goto loc_21e2d;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0005;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax == bx)
        goto loc_21e2d;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0006;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if (ax != bx)
        goto loc_21e31;
loc_21e2d: // 2188:05ad
    memoryASet(ss, bp - 1, 0x01);
loc_21e31: // 2188:05b1
    goto loc_21e9f;
loc_21e33: // 2188:05b3
    if (ax != 0x0008)
        goto loc_21e9f;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_21e9f;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if ((short)ax < (short)memoryAGet16(ds, 0x5122))
        goto loc_21e9f;
    ax = memoryAGet16(ds, 0x5122);
    ax += 0x0007;
    bx = ax;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    if ((short)ax > (short)bx)
        goto loc_21e9f;
    memoryASet(ss, bp - 1, 0x01);
loc_21e9f: // 2188:061f
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_21ea8() // 2188:0628 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
loc_21eae: // 2188:062e
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_21f09;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) == 0x0003)
        goto loc_21f03;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) == 0x002a)
        goto loc_21f03;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) == 0x002d)
        goto loc_21f03;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x002e)
        goto loc_21f09;
loc_21f03: // 2188:0683
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) - 1);
    goto loc_21eae;
loc_21f09: // 2188:0689
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_21f0d() // 2188:068d +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(cs);
    sub_21ea8();
    if (memoryAGet16(ds, 0x4665) == 0x0002)
        goto loc_21f40;
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    di = 0x4665;
    push(ds);
    push(di);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di += 0x45de;
    push(ds);
    push(di);
    ax = 0x002d;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x2188);
loc_21f40: // 2188:06c0
    ax = memoryAGet16(ds, 0x463e);
    memoryASet16(ds, 0x466b, ax);
    ax = memoryAGet16(ds, 0x4640);
    memoryASet16(ds, 0x466d, ax);
    ax = memoryAGet16(ds, 0x463e);
    memoryASet16(ds, 0x466f, ax);
    ax = memoryAGet16(ds, 0x4640);
    memoryASet16(ds, 0x4671, ax);
    ax = memoryAGet16(ds, 0x4656);
    memoryASet16(ds, 0x4683, ax);
    memoryASet16(ds, 0x4685, 0xffff);
    if (memoryAGet16(ss, bp + 6) != 0x0001)
        goto loc_21f7e;
    memoryASet16(ds, 0x4681, 0x0011);
    memoryASet16(ds, 0x467b, 0x0008);
    memoryASet16(ds, 0x4673, 0x000d);
    goto loc_21f90;
loc_21f7e: // 2188:06fe
    memoryASet16(ds, 0x4681, 0x0019);
    memoryASet16(ds, 0x467b, 0x0009);
    memoryASet16(ds, 0x4673, 0x0007);
loc_21f90: // 2188:0710
    memoryASet16(ds, 0x4675, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x467d, ax);
    memoryASet16(ds, 0x468b, 0x0003);
    memoryASet(ds, 0x468d, 0x00);
    ax = 0;
    memoryASet16(ds, 0x4665, ax);
    ax = memoryAGet16(ds, 0x4681);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ds, 0x4673);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    push(memoryAGet16(ds, 0x466b));
    ax = memoryAGet16(ds, 0x466d);
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2c34f(); assert(cs == 0x2188);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_21fde() // 2188:075e +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_22018;
    goto loc_2209e;
loc_22018: // 2188:0798
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_2209e;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0012;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    push(ax);
    push(cs);
    sub_21c2b();
    if (!al)
        goto loc_220a4;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0012;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) != 0x00)
        goto loc_220a4;
loc_2209e: // 2188:081e
    memoryASet(ss, bp - 1, 0x01);
    goto loc_220a8;
loc_220a4: // 2188:0824
    memoryASet(ss, bp - 1, 0x00);
loc_220a8: // 2188:0828
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_220b1() // 2188:0831
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0010)
        goto loc_220d4;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_220d4: // 2188:0854
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17894) <= (short)0x0012)
        goto loc_22121;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
loc_22121: // 2188:08a1
    sp = bp;
    bp = pop();
    stop("stack_below_retf, 0/6");
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_22127() // 2188:08a7 +nearfar +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_21ea8();
    memoryASet16(ds, 0x5120, memoryAGet16(ds, 0x5120) + 1);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17900, 0x0012);
    cx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, cx);
    cx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, cx);
    cx = memoryAGet16(ss, bp + 10);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, cx);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 8);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, cx);
    ax = memoryAGet16(ss, bp + 6);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17898, cx);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, 0xffff);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0001);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17888, ax);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, 0x002a);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = 0x0831;
    dx = 0x2188;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ds, 0x5120);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_222b6() // 2188:0a36 +nearfar
{
    sp -= 2;
    push(bp);
    bp = sp;
    if ((short)memoryAGet16(ds, 0x509e) <= (short)0x0001)
        goto loc_222d1;
    ax = 0;
    memoryASet16(ds, 0xa0ea, ax);
    memoryASet16(ds, 0x509e, memoryAGet16(ds, 0x509e) - 1);
    memoryASet16(ds, 0x460d, 0x0001);
    goto loc_222e2;
loc_222d1: // 2188:0a51
    if (memoryAGet16(ds, 0x5124) != 0x0000)
        goto loc_222e2;
    memoryASet16(ds, 0x5124, 0x0001);
    memoryASet16(ds, 0x509e, memoryAGet16(ds, 0x509e) - 1);
loc_222e2: // 2188:0a62
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_222e6() // 2188:0a66 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    if ((short)ax < (short)dx)
        goto loc_22310;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    if ((short)ax <= (short)dx)
        goto loc_2233a;
loc_22310: // 2188:0a90
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    if ((short)ax >= (short)dx)
        goto loc_22325;
    goto loc_225e7;
loc_22325: // 2188:0aa5
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x000c;
    if ((short)ax <= (short)dx)
        goto loc_2233a;
    goto loc_225e7;
loc_2233a: // 2188:0aba
    ax = memoryAGet16(ds, 0x4613);
    if ((short)ax < (short)memoryAGet16(ss, bp + 6))
        goto loc_2234e;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4613))
        goto loc_22371;
loc_2234e: // 2188:0ace
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ss, bp + 6))
        goto loc_2235c;
    goto loc_225e7;
loc_2235c: // 2188:0adc
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    dx = ax;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x000f;
    if ((short)ax <= (short)dx)
        goto loc_22371;
    goto loc_225e7;
loc_22371: // 2188:0af1
    if (memoryAGet(ds, 0x5140) == 0x00)
        goto loc_2237b;
    goto loc_2247a;
loc_2237b: // 2188:0afb
    if (memoryAGet(ds, 0x513c) != 0x00)
        goto loc_22385;
    goto loc_2247a;
loc_22385: // 2188:0b05
    if (memoryAGet16(ds, 0x5124) == 0x0000)
        goto loc_2238f;
    goto loc_22477;
loc_2238f: // 2188:0b0f
    if (memoryAGet16(ds, 0xa0ea) == 0xffff)
        goto loc_22399;
    goto loc_22477;
loc_22399: // 2188:0b19
    if (memoryAGet(ds, 0xa0f6) == 0x00)
        goto loc_223a3;
    goto loc_22477;
loc_223a3: // 2188:0b23
    push(cs);
    sub_222b6();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0010)
        goto loc_223bf;
    if (ax != 0x000e)
        goto loc_223d3;
loc_223bf: // 2188:0b3f
    memoryASet16(ds, 0xa0ea, 0xffff);
    memoryASet16(ds, 0x5124, 0x0001);
    ax = 0;
    memoryASet16(ds, 0x460d, ax);
    goto loc_22468;
loc_223d3: // 2188:0b53
    if (ax != 0x0024)
        goto loc_223ee;
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    memoryASet16(ds, 0xa0ea, 0xffff);
    memoryASet16(ds, 0x509e, memoryAGet16(ds, 0x509e) + 1);
    ax = 0;
    memoryASet16(ds, 0x460d, ax);
    goto loc_22468;
loc_223ee: // 2188:0b6e
    if (ax != 0x0016)
        goto loc_22411;
    if (memoryAGet16(ds, 0x5124) != 0x0001)
        goto loc_2240f;
    if (memoryAGet16(ds, 0x5132) != 0x0001)
        goto loc_22409;
    memoryASet16(ds, 0x5124, 0x0003);
    goto loc_2240f;
loc_22409: // 2188:0b89
    memoryASet16(ds, 0x5124, 0x0001);
loc_2240f: // 2188:0b8f
    goto loc_22468;
loc_22411: // 2188:0b91
    if (ax != 0x002c)
        goto loc_22468;
    ax = 0;
    memoryASet16(ds, 0x5124, ax);
    memoryASet16(ds, 0xa0ea, 0xffff);
    memoryASet16(ds, 0x509e, memoryAGet16(ds, 0x509e) + 1);
    ax = 0;
    memoryASet16(ds, 0x460d, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    ax = 0x0008;
    push(ax);
    push(cs);
    sub_21a9f();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_22468: // 2188:0be8
    if ((short)memoryAGet16(ds, 0x5124) <= (short)0x0000)
        goto loc_22477;
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_21a9f();
loc_22477: // 2188:0bf7
    goto loc_225e7;
loc_2247a: // 2188:0bfa
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_22484;
    goto loc_225e7;
loc_22484: // 2188:0c04
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0009)
        goto loc_224db;
    if (ax == 0x0007)
        goto loc_224db;
    if (ax == 0x000a)
        goto loc_224db;
    if (ax == 0x0039)
        goto loc_224db;
    if (ax == 0x001a)
        goto loc_224db;
    if (ax == 0x0005)
        goto loc_224db;
    if (ax == 0x0035)
        goto loc_224db;
    if (ax == 0x0030)
        goto loc_224db;
    if (ax == 0x0017)
        goto loc_224db;
    if (ax == 0x0023)
        goto loc_224db;
    if (ax == 0x001c)
        goto loc_224db;
    if (ax == 0x0008)
        goto loc_224db;
    if (ax == 0x000b)
        goto loc_224db;
    if (ax == 0x000c)
        goto loc_224db;
    goto loc_225e7;
loc_224db: // 2188:0c5b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0019);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0009);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17900, 0x0007);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, 0x0003);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = 0x2877;
    dx = 0x2188;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
loc_225e7: // 2188:0d67
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x463e);
    ax += 0x0003;
    if ((short)ax < (short)dx)
        goto loc_2260b;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x463e);
    ax += 0x0003;
    if ((short)ax <= (short)dx)
        goto loc_22635;
loc_2260b: // 2188:0d8b
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax;
    ax = memoryAGet16(ds, 0x463e);
    ax += 0x000c;
    if ((short)ax >= (short)dx)
        goto loc_22620;
    goto loc_23655;
loc_22620: // 2188:0da0
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax;
    ax = memoryAGet16(ds, 0x463e);
    ax += 0x000c;
    if ((short)ax <= (short)dx)
        goto loc_22635;
    goto loc_23655;
loc_22635: // 2188:0db5
    ax = memoryAGet16(ds, 0x4640);
    if ((short)ax < (short)memoryAGet16(ss, bp + 6))
        goto loc_22649;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ds, 0x4640))
        goto loc_2266c;
loc_22649: // 2188:0dc9
    ax = memoryAGet16(ds, 0x4640);
    ax += 0x000f;
    if ((short)ax >= (short)memoryAGet16(ss, bp + 6))
        goto loc_22657;
    goto loc_23655;
loc_22657: // 2188:0dd7
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000f;
    dx = ax;
    ax = memoryAGet16(ds, 0x4640);
    ax += 0x000f;
    if ((short)ax <= (short)dx)
        goto loc_2266c;
    goto loc_23655;
loc_2266c: // 2188:0dec
    if (memoryAGet(ds, 0x4660) == 0x00)
        goto loc_22676;
    goto loc_23655;
loc_22676: // 2188:0df6
    if (memoryAGet(ds, 0x5140) != 0x00)
        goto loc_226bb;
    if (memoryAGet(ds, 0x513c) == 0x00)
        goto loc_226bb;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x0024)
        goto loc_226bb;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0001);
    memoryASet16(ds, 0x5124, 0x0002);
loc_226bb: // 2188:0e3b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) - 1);
    memoryASet(ds, 0x4660, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0015)
        goto loc_226f5;
    if (ax == 0x001d)
        goto loc_226f5;
    if (ax == 0x0012)
        goto loc_226f5;
    if (ax == 0x0037)
        goto loc_226f5;
    if (ax != 0x0019)
        goto loc_226fa;
loc_226f5: // 2188:0e75
    memoryASet(ds, 0x4660, 0x00);
loc_226fa: // 2188:0e7a
    if (memoryAGet16(ds, 0x4652) == 0x0001)
        goto loc_22704;
    goto loc_23218;
loc_22704: // 2188:0e84
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17890) < (short)0x0001)
        goto loc_22718;
    goto loc_22e2a;
loc_22718: // 2188:0e98
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x001a)
        goto loc_22765;
    if (ax == 0x0023)
        goto loc_22765;
    if (ax == 0x0017)
        goto loc_22765;
    if (ax == 0x000c)
        goto loc_22765;
    if (ax == 0x0032)
        goto loc_22765;
    if (ax == 0x0036)
        goto loc_22765;
    if (ax == 0x003a)
        goto loc_22765;
    if (ax != 0x0031)
        goto loc_2277a;
loc_22765: // 2188:0ee5
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_2277a: // 2188:0efa
    if (ax == 0x002f)
        goto loc_22782;
    goto loc_22803;
loc_22782: // 2188:0f02
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x002f)
        goto loc_2279b;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_227a0;
loc_2279b: // 2188:0f1b
    memoryASet16(ss, bp - 2, 0xffff);
loc_227a0: // 2188:0f20
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_22803: // 2188:0f83
    if (ax == 0x0009)
        goto loc_2280b;
    goto loc_2295f;
loc_2280b: // 2188:0f8b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp + 6, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_2287d;
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20638) != 0x00)
        goto loc_2287d;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) - 1);
loc_2287d: // 2188:0ffd
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20620, 0xff9f);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) != 0x0000)
        goto loc_228fc;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    bx = memoryAGet16(ds, di + 17900);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20630, bx);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, 0x0031);
    goto loc_22940;
loc_228fc: // 2188:107c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    bx = memoryAGet16(ds, di + 17900);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, bx);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x0031);
loc_22940: // 2188:10c0
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21b53();
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_2295f: // 2188:10df
    if (ax == 0x0005)
        goto loc_22967;
    goto loc_22ad7;
loc_22967: // 2188:10e7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp + 6, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_229d9;
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20638) != 0x00)
        goto loc_229d9;
    memoryASet16(ss, bp + 8, memoryAGet16(ss, bp + 8) - 1);
loc_229d9: // 2188:1159
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20620, 0xff9f);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20620, 0xff9f);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20630) != 0x0000)
        goto loc_22a74;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    bx = memoryAGet16(ds, di + 17900);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20630, bx);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, 0x0018);
    goto loc_22ab8;
loc_22a74: // 2188:11f4
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    bx = memoryAGet16(ds, di + 17900);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20632, bx);
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20634, 0x0018);
loc_22ab8: // 2188:1238
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21b53();
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_22ad7: // 2188:1257
    if (ax != 0x0030)
        goto loc_22b4b;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_22b4b: // 2188:12cb
    if (ax == 0x0039)
        goto loc_22b53;
    goto loc_22c26;
loc_22b53: // 2188:12d3
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x002d)
        goto loc_22bcf;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22c23;
loc_22bcf: // 2188:134f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ds, 0x4656))
        goto loc_22c23;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_22c23: // 2188:13a3
    goto loc_22e27;
loc_22c26: // 2188:13a6
    if (ax != 0x0035)
        goto loc_22ca5;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_22e27;
loc_22ca5: // 2188:1425
    if (ax == 0x0033)
        goto loc_22cad;
    goto loc_22d6d;
loc_22cad: // 2188:142d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17906) == 0x002f)
        goto loc_22cc1;
    goto loc_22d4b;
loc_22cc1: // 2188:1441
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x0033)
        goto loc_22cf5;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, 0x002f);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, 0x0025);
loc_22cf5: // 2188:1475
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21bd7();
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    goto loc_22d6a;
loc_22d4b: // 2188:14cb
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_22d6a: // 2188:14ea
    goto loc_22e27;
loc_22d6d: // 2188:14ed
    if (ax == 0x002c)
        goto loc_22d75;
    goto loc_22e15;
loc_22d75: // 2188:14f5
    ax = 0x000d;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ds, 0x512c);
    ax += 0x0009;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20634, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20632, 0x0009);
    memoryASet16(ds, 0x512c, memoryAGet16(ds, 0x512c) + 1);
    if ((short)memoryAGet16(ds, 0x512c) <= (short)0x0004)
        goto loc_22e13;
    ax = 0;
    memoryASet16(ds, 0x512c, ax);
loc_22e13: // 2188:1593
    goto loc_22e27;
loc_22e15: // 2188:1595
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_21f0d();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_22e27: // 2188:15a7
    goto loc_23215;
loc_22e2a: // 2188:15aa
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0024)
        goto loc_22e5b;
    if (ax == 0x0016)
        goto loc_22e5b;
    if (ax == 0x001d)
        goto loc_22e5b;
    if (ax == 0x0015)
        goto loc_22e5b;
    if (ax == 0x000e)
        goto loc_22e5b;
    if (ax == 0x0010)
        goto loc_22e5b;
    if (ax != 0x0019)
        goto loc_22e5e;
loc_22e5b: // 2188:15db
    goto loc_23215;
loc_22e5e: // 2188:15de
    if (ax == 0x002f)
        goto loc_22e66;
    goto loc_22f2d;
loc_22e66: // 2188:15e6
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x002f)
        goto loc_22e7f;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_22e84;
loc_22e7f: // 2188:15ff
    memoryASet16(ss, bp - 2, 0xffff);
loc_22e84: // 2188:1604
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) - 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ds, 0x4656))
        goto loc_22f2a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    push(ax);
    push(cs);
    sub_21bd7();
loc_22f2a: // 2188:16aa
    goto loc_23215;
loc_22f2d: // 2188:16ad
    if (ax == 0x0030)
        goto loc_22f35;
    goto loc_2300f;
loc_22f35: // 2188:16b5
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ds, 0x4656))
        goto loc_22f80;
    goto loc_2300c;
loc_22f80: // 2188:1700
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    push(ax);
    push(cs);
    sub_21bd7();
loc_2300c: // 2188:178c
    goto loc_23215;
loc_2300f: // 2188:178f
    if (ax != 0x0039)
        goto loc_2307f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x002d)
        goto loc_23037;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
    goto loc_23045;
loc_23037: // 2188:17b7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) + 1);
loc_23045: // 2188:17c5
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ds, 0x4656))
        goto loc_2307c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_2307c: // 2188:17fc
    goto loc_23215;
loc_2307f: // 2188:17ff
    if (ax == 0x0035)
        goto loc_23087;
    goto loc_23205;
loc_23087: // 2188:1807
    if (memoryAGet16(ds, 0x4656) != 0x0001)
        goto loc_230e7;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x0009)
        goto loc_230e5;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) - 1);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17890) >= (short)0x0001)
        goto loc_230d4;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0015);
    goto loc_230e5;
loc_230d4: // 2188:1854
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_230e5: // 2188:1865
    goto loc_2313e;
loc_230e7: // 2188:1867
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x0011)
        goto loc_2313e;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) - 1);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17890) >= (short)0x0001)
        goto loc_2312d;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0019);
    goto loc_2313e;
loc_2312d: // 2188:18ad
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_2313e: // 2188:18be
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17890) > (short)0x0000)
        goto loc_23162;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17890) <= (short)0x0000)
        goto loc_23172;
loc_23162: // 2188:18e2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, memoryAGet16(ds, di + 17890) + 1);
    goto loc_23182;
loc_23172: // 2188:18f2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_23182: // 2188:1902
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ds, 0x4656))
        goto loc_23203;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_23203: // 2188:1983
    goto loc_23215;
loc_23205: // 2188:1985
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_23215: // 2188:1995
    goto loc_23655;
loc_23218: // 2188:1998
    if (memoryAGet16(ds, 0x4652) == 0x0002)
        goto loc_23222;
    goto loc_23655;
loc_23222: // 2188:19a2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17924);
    if (ax == 0x0016)
        goto loc_23262;
    if (ax == 0x000e)
        goto loc_23262;
    if (ax == 0x0024)
        goto loc_23262;
    if (ax == 0x001d)
        goto loc_23262;
    if (ax == 0x0015)
        goto loc_23262;
    if (ax == 0x0010)
        goto loc_23262;
    if (ax == 0x0037)
        goto loc_23262;
    if (ax == 0x0012)
        goto loc_23262;
    if (ax == 0x0019)
        goto loc_23262;
    if (ax != 0x0004)
        goto loc_23265;
loc_23262: // 2188:19e2
    goto loc_23655;
loc_23265: // 2188:19e5
    if (ax == 0x002c)
        goto loc_2326d;
    goto loc_2331d;
loc_2326d: // 2188:19ed
    ax = 0x000d;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ds, 0x512c);
    ax += 0x0009;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = pop();
    memoryASet16(ds, di + 20634, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20632, 0x0009);
    memoryASet16(ds, 0x512c, memoryAGet16(ds, 0x512c) + 1);
    if ((short)memoryAGet16(ds, 0x512c) <= (short)0x0004)
        goto loc_2331a;
    ax = 0;
    memoryASet16(ds, 0x512c, ax);
loc_2331a: // 2188:1a9a
    goto loc_23655;
loc_2331d: // 2188:1a9d
    if (ax == 0x0035)
        goto loc_23325;
    goto loc_233a7;
loc_23325: // 2188:1aa5
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_23655;
loc_233a7: // 2188:1b27
    if (ax == 0x002f)
        goto loc_233af;
    goto loc_23447;
loc_233af: // 2188:1b2f
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x002f)
        goto loc_233c8;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_233cd;
loc_233c8: // 2188:1b48
    memoryASet16(ss, bp - 2, 0xffff);
loc_233cd: // 2188:1b4d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_23655;
loc_23447: // 2188:1bc7
    if (ax == 0x0033)
        goto loc_2344f;
    goto loc_23526;
loc_2344f: // 2188:1bcf
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17906) == 0x002f)
        goto loc_23463;
    goto loc_234fc;
loc_23463: // 2188:1be3
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17924) != 0x0033)
        goto loc_23497;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, 0x002f);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, 0x0025);
loc_23497: // 2188:1c17
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x0018;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x03e8) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x03e8);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    goto loc_2351b;
loc_234fc: // 2188:1c7c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17888, 0x0001);
loc_2351b: // 2188:1c9b
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_23655;
loc_23526: // 2188:1ca6
    if (ax == 0x0030)
        goto loc_2352e;
    goto loc_235b4;
loc_2352e: // 2188:1cae
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_23655;
loc_235b4: // 2188:1d34
    if (ax != 0x0039)
        goto loc_2362c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_23655;
loc_2362c: // 2188:1dac
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_21f0d();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x0064) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x0064);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
    ax = 0x0006;
    push(ax);
    push(cs);
    sub_21a9f();
loc_23655: // 2188:1dd5
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2365b() // 2188:1ddb +stackDrop12
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0001)
        goto loc_236a4;
    ax = memoryAGet16(ss, bp + 10);
    if (ax != memoryAGet16(ds, 0x4613))
        goto loc_2369d;
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax >= 0)
        goto loc_2367f;
    ax = -ax;
loc_2367f: // 2188:1dff
    if ((short)ax >= (short)memoryAGet16(ss, bp + 8))
        goto loc_2369d;
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax > 0)
        goto loc_23696;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2369b;
loc_23696: // 2188:1e16
    memoryASet16(ss, bp - 2, 0xffff);
loc_2369b: // 2188:1e1b
    goto loc_236a2;
loc_2369d: // 2188:1e1d
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_236a2: // 2188:1e22
    goto loc_236eb;
loc_236a4: // 2188:1e24
    if (ax != 0x0002)
        goto loc_236eb;
    ax = memoryAGet16(ss, bp + 12);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax >= 0)
        goto loc_236b6;
    ax = -ax;
loc_236b6: // 2188:1e36
    if ((short)ax >= (short)0x0008)
        goto loc_236e6;
    ax = memoryAGet16(ss, bp + 10);
    ax -= memoryAGet16(ds, 0x4613);
    if ((short)ax >= 0)
        goto loc_236c8;
    ax = -ax;
loc_236c8: // 2188:1e48
    if ((short)ax >= (short)memoryAGet16(ss, bp + 8))
        goto loc_236e6;
    ax = memoryAGet16(ss, bp + 10);
    ax -= memoryAGet16(ds, 0x4613);
    if ((short)ax > 0)
        goto loc_236df;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_236e4;
loc_236df: // 2188:1e5f
    memoryASet16(ss, bp - 2, 0xffff);
loc_236e4: // 2188:1e64
    goto loc_236eb;
loc_236e6: // 2188:1e66
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_236eb: // 2188:1e6b
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_236f4() // 2188:1e74 +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 6);
    if (ax != 0x0001)
        goto loc_23767;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= memoryAGet16(ds, 0x4613);
    if ((short)ax >= 0)
        goto loc_2371a;
    ax = -ax;
loc_2371a: // 2188:1e9a
    if ((short)ax >= (short)memoryAGet16(ss, bp + 8))
        goto loc_23760;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax >= 0)
        goto loc_23737;
    ax = -ax;
loc_23737: // 2188:1eb7
    if ((short)ax >= (short)memoryAGet16(ss, bp + 10))
        goto loc_23760;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax > 0)
        goto loc_23759;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_2375e;
loc_23759: // 2188:1ed9
    memoryASet16(ss, bp - 2, 0xffff);
loc_2375e: // 2188:1ede
    goto loc_23765;
loc_23760: // 2188:1ee0
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_23765: // 2188:1ee5
    goto loc_237cf;
loc_23767: // 2188:1ee7
    if (ax != 0x0002)
        goto loc_237cf;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= memoryAGet16(ds, 0x4611);
    if ((short)ax >= 0)
        goto loc_23784;
    ax = -ax;
loc_23784: // 2188:1f04
    if ((short)ax >= (short)0x0008)
        goto loc_237ca;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= memoryAGet16(ds, 0x4613);
    if ((short)ax >= 0)
        goto loc_237a1;
    ax = -ax;
loc_237a1: // 2188:1f21
    if ((short)ax >= (short)memoryAGet16(ss, bp + 10))
        goto loc_237ca;
    ax = memoryAGet16(ss, bp + 16);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= memoryAGet16(ds, 0x4613);
    if ((short)ax > 0)
        goto loc_237c3;
    memoryASet16(ss, bp - 2, 0x0001);
    goto loc_237c8;
loc_237c3: // 2188:1f43
    memoryASet16(ss, bp - 2, 0xffff);
loc_237c8: // 2188:1f48
    goto loc_237cf;
loc_237ca: // 2188:1f4a
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
loc_237cf: // 2188:1f4f
    ax = memoryAGet16(ss, bp - 2);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_237d8() // 2188:1f58 +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ss, bp + 8) != 0x0001)
        goto loc_23809;
    ax = memoryAGet16(ds, 0x4611);
    ax -= 0x0003;
    push(ax);
    push(memoryAGet16(ds, 0x4613));
    push(cs);
    sub_21fde();
    if (al)
        goto loc_23807;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) - ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x5126, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x5118, ax);
loc_23807: // 2188:1f87
    goto loc_23833;
loc_23809: // 2188:1f89
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0003;
    push(ax);
    push(memoryAGet16(ds, 0x4613));
    push(cs);
    sub_21fde();
    if (al)
        goto loc_23833;
    ax = memoryAGet16(ss, bp + 6);
    ax = -ax;
    memoryASet16(ds, 0x5126, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax = -ax;
    memoryASet16(ds, 0x5118, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
loc_23833: // 2188:1fb3
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_23839() // 2188:1fb9 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_23842() // 2188:1fc2 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0070;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_238e7;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) == 0x00)
        goto loc_238e7;
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
loc_238e7: // 2188:2067
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23949;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_2399f;
loc_23949: // 2188:20c9
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) != 0x0001)
        goto loc_2398f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0019);
    goto loc_2399f;
loc_2398f: // 2188:210f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0021);
loc_2399f: // 2188:211f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_239f6() // 2188:2176 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23a5b;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_23a6a;
loc_23a5b: // 2188:21db
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_23a6a: // 2188:21ea
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_23ac1() // 2188:2241
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0000)
        goto loc_23adb;
    goto loc_23d0f;
loc_23adb: // 2188:225b
    ax = 0x001c;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17900, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x001d);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, 0x001d);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, 0x001d);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17902, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0004);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) == 0xffff)
        goto loc_23b9d;
    goto loc_23c4c;
loc_23b9d: // 2188:231d
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23be6;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) == 0xffa1)
        goto loc_23be6;
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0002)
        goto loc_23be6;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) - 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    goto loc_23b9d;
loc_23be6: // 2188:2366
    ax = memoryAGet16(ss, bp - 2);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) != 0xffa1)
        goto loc_23c39;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
loc_23c39: // 2188:23b9
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    goto loc_23d0f;
loc_23c4c: // 2188:23cc
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0000)
        goto loc_23c60;
    goto loc_23d0f;
loc_23c60: // 2188:23e0
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23ca9;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) == 0xffa1)
        goto loc_23ca9;
    if ((short)memoryAGet16(ss, bp - 6) >= (short)0x0003)
        goto loc_23ca9;
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    memoryASet16(ss, bp - 6, memoryAGet16(ss, bp - 6) + 1);
    goto loc_23c60;
loc_23ca9: // 2188:2429
    ax = memoryAGet16(ss, bp - 2);
    ax -= 0x0002;
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20620) != 0xffa1)
        goto loc_23cff;
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax--;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = 0;
    memoryASet16(ds, di + 20620, ax);
loc_23cff: // 2188:247f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
loc_23d0f: // 2188:248f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    if (ax != 0x0001)
        goto loc_23d62;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if ((short)ax < (short)cx)
        goto loc_23d52;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    goto loc_23d60;
loc_23d52: // 2188:24d2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) + 1);
loc_23d60: // 2188:24e0
    goto loc_23d97;
loc_23d62: // 2188:24e2
    if (ax != 0x0002)
        goto loc_23d97;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) > (short)0x0001)
        goto loc_23d89;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_23d97;
loc_23d89: // 2188:2509
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) - 1);
loc_23d97: // 2188:2517
    sp = bp;
    bp = pop();
    stop("stack_below_retf, 0/6");
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_23d9d() // 2188:251d +nearfar +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23e17;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_23e17;
    goto loc_2405a;
loc_23e17: // 2188:2597
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, 0x002b);
    ax = 0x2241;
    dx = 0x2188;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20636) != 0x00)
        goto loc_23e84;
    goto loc_23f4c;
loc_23e84: // 2188:2604
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20636, 0x00);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xffa1);
    push(memoryAGet16(ss, bp + 8));
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    push(ax);
    push(cs);
    sub_21b53();
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_21a9f();
loc_23f4c: // 2188:26cc
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20636) != 0x00)
        goto loc_23f80;
    goto loc_24058;
loc_23f80: // 2188:2700
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    ax = 0;
    memoryASet16(ds, di + 20626, ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20637, 0x00);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20636, 0x00);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet16(ds, di + 20620, 0xffa1);
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    push(ax);
    push(cs);
    sub_21b53();
    ax = 0x0011;
    push(ax);
    push(cs);
    sub_21a9f();
loc_24058: // 2188:27d8
    goto loc_240ca;
loc_2405a: // 2188:27da
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) != 0x0001)
        goto loc_240ca;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0006)
        goto loc_240ca;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17920) >= (short)0x000e)
        goto loc_240ca;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, memoryAGet16(ds, di + 17920) + 0x0002);
loc_240ca: // 2188:284a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_240d0() // 2188:2850 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_240f1;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_23d9d();
loc_240f1: // 2188:2871
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_240f7() // 2188:2877 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17900) != 0x000d)
        goto loc_2417c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0010)
        goto loc_2417a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0019);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0014)
        goto loc_2417a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0011);
loc_2417a: // 2188:28fa
    goto loc_241ac;
loc_2417c: // 2188:28fc
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0008)
        goto loc_241ac;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_241ac: // 2188:292c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) <= (short)0x0002)
        goto loc_241fd;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) >= (short)0x026c)
        goto loc_241fd;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
loc_241fd: // 2188:297d
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2420a() // 2188:298a +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_24245;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_24245: // 2188:29c5
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x000a;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if ((short)ax >= (short)cx)
        goto loc_242b1;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0010);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    goto loc_24318;
loc_242b1: // 2188:2a31
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x0019;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if ((short)ax >= (short)cx)
        goto loc_242f8;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0011);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0006);
    goto loc_24318;
loc_242f8: // 2188:2a78
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_24318: // 2188:2a98
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2434f() // 2188:2acf +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_243a4;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0000)
        goto loc_243a4;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
loc_243a4: // 2188:2b24
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0000)
        goto loc_243f6;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0039)
        goto loc_243f4;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_243f4: // 2188:2b74
    goto loc_2442b;
loc_243f6: // 2188:2b76
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_2442b: // 2188:2bab
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24454() // 2188:2bd4 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_2448d;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0080;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_2448d: // 2188:2c0d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0000)
        goto loc_244a1;
    goto loc_245b1;
loc_244a1: // 2188:2c21
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) <= (short)0x0004)
        goto loc_24510;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0001)
        goto loc_24510;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17904, memoryAGet16(ds, di + 17904) + 0x0004);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17906, memoryAGet16(ds, di + 17906) + 0x0004);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, memoryAGet16(ds, di + 17908) - 0x0004);
loc_24510: // 2188:2c90
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_24548;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_24548: // 2188:2cc8
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0001)
        goto loc_2458e;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
loc_2458e: // 2188:2d0e
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_245b1: // 2188:2d31
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_245b7() // 2188:2d37 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_245f0;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0070;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_2365b();
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
loc_245f0: // 2188:2d70
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) == 0x0001)
        goto loc_24604;
    goto loc_2469f;
loc_24604: // 2188:2d84
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_2461d;
    ax = 0x0019;
    push(ax);
    push(cs);
    sub_21a9f();
loc_2461d: // 2188:2d9d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17894) <= (short)0x0180)
        goto loc_2469f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_2469f: // 2188:2e1f
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_246a5() // 2188:2e25 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0000)
        goto loc_24734;
    ax = 0x0140;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    dx = 0;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ds, 0x512e);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    flags.carry = (ax + cx) >= 0x10000;
    ax += cx;
    dx += bx + flags.carry;
    cx = 0x0010;
    bx = 0;
    push(cs); cs = 0x2da3; sub_2dcc4(); assert(cs == 0x2188);
    cx = 0x0010;
    bx = 0;
    push(cs); cs = 0x2da3; sub_2dca9(); assert(cs == 0x2188);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    cx = memoryAGet16(ds, 0x5130);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17896, cx);
    cx = memoryAGet16(ds, 0x5130);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17898, cx);
loc_24734: // 2188:2eb4
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17894) <= (short)0x0174)
        goto loc_24773;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_24773: // 2188:2ef3
    if ((short)memoryAGet16(ds, 0x4613) >= (short)0x0064)
        goto loc_247ac;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) > (short)0x0001)
        goto loc_247ac;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    goto loc_247fd;
loc_247ac: // 2188:2f2c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_247fd: // 2188:2f7d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24803() // 2188:2f83 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0001)
        goto loc_24827;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0004);
loc_24827: // 2188:2fa7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_24861;
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    push(ax);
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0050;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_2365b();
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
loc_24861: // 2188:2fe1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) == 0x0001)
        goto loc_24875;
    goto loc_24ab6;
loc_24875: // 2188:2ff5
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0011;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_249e1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0011;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) != 0x00)
        goto loc_249e1;
    goto loc_24ab6;
loc_249e1: // 2188:3161
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20638, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    memoryASet(ds, di + 20638, 0x01);
    ax = 0x0017;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
loc_24ab6: // 2188:3236
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24abc() // 2188:323c +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    if ((short)ax <= (short)memoryAGet16(ds, 0x4613))
        goto loc_24ad6;
    goto loc_24b70;
loc_24ad6: // 2188:3256
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_24aef;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_24aef: // 2188:326f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17902) != 0x0006)
        goto loc_24b70;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_24b70: // 2188:32f0
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24b76() // 2188:32f6 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0002)
        goto loc_24b93;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    push(cs);
    sub_21b90();
loc_24b93: // 2188:3313
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_24c79;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0002;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) == 0x00)
        goto loc_24c90;
loc_24c79: // 2188:33f9
    ax = 0x0018;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
loc_24c90: // 2188:3410
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24c96() // 2188:3416 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0015;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    if ((short)ax <= (short)memoryAGet16(ds, 0x4611))
        goto loc_24d04;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0xffff)
        goto loc_24d04;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_24d04;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_24d04: // 2188:3484
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0000)
        goto loc_24d18;
    goto loc_24e23;
loc_24d18: // 2188:3498
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    if (ax == cx)
        goto loc_24d3b;
    goto loc_24e23;
loc_24d3b: // 2188:34bb
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0001)
        goto loc_24dee;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0009);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0011;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    goto loc_24e20;
loc_24dee: // 2188:356e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0006);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0010;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
loc_24e20: // 2188:35a0
    goto loc_24f2a;
loc_24e23: // 2188:35a3
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x001e)
        goto loc_24ea1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax <= 0x0032)
        goto loc_24ea1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_24ea1: // 2188:3621
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_24ed9;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_24ed9: // 2188:3659
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_24f2a: // 2188:36aa
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_24f30() // 2188:36b0 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0003;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0xffff);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_24fcf;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x001b;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_24fcf;
    goto loc_2504d;
loc_24fcf: // 2188:374f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) != 0xffff)
        goto loc_2503d;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0x0017;
    push(ax);
    push(cs);
    sub_21a9f();
    goto loc_2504d;
loc_2503d: // 2188:37bd
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0008);
loc_2504d: // 2188:37cd
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0000)
        goto loc_250a2;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_25068;
loc_25065: // 2188:37e5
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_25068: // 2188:37e8
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    if (memoryAGet16(ss, bp - 2) != 0x0003)
        goto loc_25065;
    goto loc_25145;
loc_250a2: // 2188:3822
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0014)
        goto loc_250df;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_250df: // 2188:385f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if (ax != 0x0001)
        goto loc_25116;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_250fc;
loc_250f9: // 2188:3879
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_250fc: // 2188:387c
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + 0xfffd);
    if (memoryAGet16(ss, bp - 2) != 0x0003)
        goto loc_250f9;
    goto loc_25145;
loc_25116: // 2188:3896
    if (ax != 0x0003)
        goto loc_25145;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_25125;
loc_25122: // 2188:38a2
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_25125: // 2188:38a5
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + 0x0003);
    if (memoryAGet16(ss, bp - 2) != 0x0003)
        goto loc_25122;
    ax = 0x0017;
    push(ax);
    push(cs);
    sub_21a9f();
loc_25145: // 2188:38c5
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_2514f;
loc_2514c: // 2188:38cc
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2514f: // 2188:38cf
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    if (memoryAGet16(ss, bp - 2) != 0x0003)
        goto loc_2514c;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_25184() // 2188:3904 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0001)
        goto loc_251ab;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
loc_251ab: // 2188:392b
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    ax = 0x0040;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_251e2;
    goto loc_25288;
loc_251e2: // 2188:3962
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    dx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ds, 0x4613);
    ax--;
    if ((short)ax < (short)dx)
        goto loc_251fb;
    goto loc_25288;
loc_251fb: // 2188:397b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if ((short)ax >= (short)cx)
        goto loc_25239;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) + 1);
loc_25239: // 2188:39b9
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) <= (short)0x0001)
        goto loc_25263;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) >= (short)0x0004)
        goto loc_25263;
    ax = 0x001f;
    push(ax);
    push(cs);
    sub_21a9f();
loc_25263: // 2188:39e3
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    goto loc_252a8;
loc_25288: // 2188:3a08
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_252a8: // 2188:3a28
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_252ae() // 2188:3a2e +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0001)
        goto loc_252d5;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0003);
loc_252d5: // 2188:3a55
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_25318;
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    ax = 0x0030;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
loc_25318: // 2188:3a98
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0xffff)
        goto loc_2535b;
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0010;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    ax = 0x0030;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
loc_2535b: // 2188:3adb
    if (memoryAGet16(ss, bp - 2) != 0x0001)
        goto loc_25372;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) == 0x0001)
        goto loc_2539d;
loc_25372: // 2188:3af2
    if (memoryAGet16(ss, bp - 2) != 0xffff)
        goto loc_25389;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) == 0xffff)
        goto loc_2539d;
loc_25389: // 2188:3b09
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0000)
        goto loc_2539d;
    goto loc_25431;
loc_2539d: // 2188:3b1d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) >= (short)0x001e)
        goto loc_253fc;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if ((short)ax >= (short)cx)
        goto loc_253fa;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) + 1);
loc_253fa: // 2188:3b7a
    goto loc_2540c;
loc_253fc: // 2188:3b7c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_2540c: // 2188:3b8c
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    goto loc_25462;
loc_25431: // 2188:3bb1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) <= (short)0x0001)
        goto loc_25452;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) - 1);
    goto loc_25462;
loc_25452: // 2188:3bd2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17886, 0x0001);
loc_25462: // 2188:3be2
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_25468() // 2188:3be8 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0019)
        goto loc_2549a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, 0x0001);
loc_2549a: // 2188:3c1a
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) > (short)0x0000)
        goto loc_254ae;
    goto loc_2559d;
loc_254ae: // 2188:3c2e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) <= (short)0x0006)
        goto loc_254ed;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, memoryAGet16(ds, di + 17914) + 0x0003);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, memoryAGet16(ds, di + 17908) - 0x0003);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_254ed: // 2188:3c6d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_2550d;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_2550d: // 2188:3c8d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x003c)
        goto loc_2557a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, memoryAGet16(ds, di + 17914) - 0x0003);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, memoryAGet16(ds, di + 17908) + 0x0003);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_2557a: // 2188:3cfa
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_2559d: // 2188:3d1d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_255a3() // 2188:3d23 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x012c)
        goto loc_25618;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0019);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0015);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17902, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17902, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_25618: // 2188:3d98
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_25652;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) >= (short)0x0051)
        goto loc_25652;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
loc_25652: // 2188:3dd2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) > (short)0x0050)
        goto loc_25666;
    goto loc_256ea;
loc_25666: // 2188:3de6
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0032);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0032);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_21b53();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_21b53();
loc_256ea: // 2188:3e6a
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_256f0() // 2188:3e70 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x7d00)
        goto loc_25723;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_25723: // 2188:3ea3
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_25743;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_25743: // 2188:3ec3
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0010;
    push(ax);
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_25793() // 2188:3f13 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x7d00)
        goto loc_257c6;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_257c6: // 2188:3f46
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_257e6;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_257e6: // 2188:3f66
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_257ec() // 2188:3f6c +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    ax = 0;
    memoryASet16(ds, 0x5118, ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50dc);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_2582c;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_237d8();
    goto loc_2588a;
loc_2582c: // 2188:3fac
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50de);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_2585c;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_237d8();
    goto loc_2588a;
loc_2585c: // 2188:3fdc
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_2588a;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_237d8();
loc_2588a: // 2188:400a
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_258ba() // 2188:403a +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50dc);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_258fc;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0005;
    push(ax);
    push(cs);
    sub_237d8();
    memoryASet16(ds, 0x5118, 0x0005);
    goto loc_2598c;
loc_258fc: // 2188:407c
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50de);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_25945;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_25943;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0003;
    push(ax);
    push(cs);
    sub_237d8();
    memoryASet16(ds, 0x5118, 0x0003);
loc_25943: // 2188:40c3
    goto loc_2598c;
loc_25945: // 2188:40c5
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = memoryAGet16(ds, 0x50e0);
    cx = 0x0004;
    ax <<= cl;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0000)
        goto loc_2598c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ss, bp - 2))
        goto loc_2598c;
    push(memoryAGet16(ss, bp - 2));
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_237d8();
    memoryASet16(ds, 0x5118, 0x0001);
loc_2598c: // 2188:410c
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_259c5() // 2188:4145 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) != 0x0000)
        goto loc_259e6;
    goto loc_25ab6;
loc_259e6: // 2188:4166
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_25a1a;
    goto loc_25bbc;
loc_25a1a: // 2188:419a
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_25a4e;
    goto loc_25bbc;
loc_25a4e: // 2188:41ce
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25a82;
    goto loc_25bbc;
loc_25a82: // 2188:4202
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25ab6;
    goto loc_25bbc;
loc_25ab6: // 2188:4236
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0000)
        goto loc_25aca;
    goto loc_25b94;
loc_25aca: // 2188:424a
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_25afe;
    goto loc_25bbc;
loc_25afe: // 2188:427e
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_25b32;
    goto loc_25bbc;
loc_25b32: // 2188:42b2
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) == 0xffa0)
        goto loc_25bbc;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) == 0xffa0)
        goto loc_25bbc;
loc_25b94: // 2188:4314
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) == 0x0000)
        goto loc_25ba8;
    goto loc_25fb4;
loc_25ba8: // 2188:4328
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) == 0x0000)
        goto loc_25bbc;
    goto loc_25fb4;
loc_25bbc: // 2188:433c
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp - 2);
    if (ax == 0x0000)
        goto loc_25bd3;
    goto loc_25cc6;
loc_25bd3: // 2188:4353
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_25c61;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25c83;
loc_25c61: // 2188:43e1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    goto loc_25cc3;
loc_25c83: // 2188:4403
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0025);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, 0xffff);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
loc_25cc3: // 2188:4443
    goto loc_25fb4;
loc_25cc6: // 2188:4446
    if (ax == 0x0001)
        goto loc_25cce;
    goto loc_25dc1;
loc_25cce: // 2188:444e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_25d5c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25d7e;
loc_25d5c: // 2188:44dc
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    goto loc_25dbe;
loc_25d7e: // 2188:44fe
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0021);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
loc_25dbe: // 2188:453e
    goto loc_25fb4;
loc_25dc1: // 2188:4541
    if (ax == 0x0002)
        goto loc_25dc9;
    goto loc_25ebc;
loc_25dc9: // 2188:4549
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_25e57;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0004;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25e79;
loc_25e57: // 2188:45d7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    goto loc_25eb9;
loc_25e79: // 2188:45f9
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0029);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, 0xffff);
loc_25eb9: // 2188:4639
    goto loc_25fb4;
loc_25ebc: // 2188:463c
    if (ax == 0x0003)
        goto loc_25ec4;
    goto loc_25fb4;
loc_25ec4: // 2188:4644
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_25f52;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet16(ds, di + 20620) != 0xffa0)
        goto loc_25f74;
loc_25f52: // 2188:46d2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    goto loc_25fb4;
loc_25f74: // 2188:46f4
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x002d);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, 0x0001);
loc_25fb4: // 2188:4734
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26039() // 2188:47b9 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_26074;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_26074: // 2188:47f4
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x000a;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if ((short)ax >= (short)cx)
        goto loc_260ee;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0009);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    goto loc_26155;
loc_260ee: // 2188:486e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x0019;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if ((short)ax >= (short)cx)
        goto loc_26135;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x000e);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0007);
    goto loc_26155;
loc_26135: // 2188:48b5
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_26155: // 2188:48d5
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2617e() // 2188:48fe +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x001e)
        goto loc_261ef;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax <= 0x0032)
        goto loc_261ef;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_261ef: // 2188:496f
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_26251;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_26274;
loc_26251: // 2188:49d1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_26274: // 2188:49f4
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_262cb() // 2188:4a4b +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_262fc;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_262fc: // 2188:4a7c
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26302() // 2188:4a82 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    al = memoryAGet(ds, 0x513c);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ds, 0x5140);
    memoryASet(ss, bp - 2, al);
    memoryASet(ds, 0x513c, 0x01);
    memoryASet(ds, 0x5140, 0x00);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    al = memoryAGet(ss, bp - 1);
    memoryASet(ds, 0x513c, al);
    al = memoryAGet(ss, bp - 2);
    memoryASet(ds, 0x5140, al);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26353() // 2188:4ad3 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_26387;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_26387: // 2188:4b07
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x0046)
        goto loc_263ee;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax <= 0x0046)
        goto loc_263ee;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_263ee: // 2188:4b6e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_26408;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    goto loc_26443;
loc_26408: // 2188:4b88
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) - 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) >= (short)0x0001)
        goto loc_26443;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, cx);
loc_26443: // 2188:4bc3
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) < (short)0x0005)
        goto loc_26465;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) <= (short)0x000f)
        goto loc_26477;
loc_26465: // 2188:4be5
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0004);
    goto loc_264bb;
loc_26477: // 2188:4bf7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) > (short)0x0007)
        goto loc_26499;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) >= (short)0x000e)
        goto loc_264ab;
loc_26499: // 2188:4c19
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0004);
    goto loc_264bb;
loc_264ab: // 2188:4c2b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0004);
loc_264bb: // 2188:4c3b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26512() // 2188:4c92 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0070;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs);
    sub_2365b();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) == 0x0001)
        goto loc_26540;
    goto loc_2668f;
loc_26540: // 2188:4cc0
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_26555;
    goto loc_2668f;
loc_26555: // 2188:4cd5
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17916, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, 0x0037);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0006);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x7d00);
    ax = 0x52e7;
    dx = 0x2188;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0027);
loc_2668f: // 2188:4e0f
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_266f1;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_26714;
loc_266f1: // 2188:4e71
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_26714: // 2188:4e94
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26854() // 2188:4fd4 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) == 0x0000)
        goto loc_2686e;
    goto loc_26958;
loc_2686e: // 2188:4fee
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    if ((short)ax > (short)memoryAGet16(ds, 0x0260))
        goto loc_26885;
    goto loc_26958;
loc_26885: // 2188:5005
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_268a1;
    goto loc_26958;
loc_268a1: // 2188:5021
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x002d);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0010;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = 0x0032;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    ax += 0x0032;
    memoryASet16(ds, 0x0260, ax);
loc_26958: // 2188:50d8
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x0024)
        goto loc_26994;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    goto loc_269d7;
loc_26994: // 2188:5114
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x0000)
        goto loc_269d7;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0003;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_269d7;
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    push(ax);
    push(cs);
    sub_21b90();
loc_269d7: // 2188:5157
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) == 0x0000)
        goto loc_269eb;
    goto loc_26b3e;
loc_269eb: // 2188:516b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_26a19;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_26a19: // 2188:5199
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_26a51;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_26a51: // 2188:51d1
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_26a83;
    goto loc_26b10;
loc_26a83: // 2188:5203
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) == 0x00)
        goto loc_26b10;
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0005)
        goto loc_26b10;
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
loc_26b10: // 2188:5290
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
loc_26b3e: // 2188:52be
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26b67() // 2188:52e7 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0001)
        goto loc_26b8c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
loc_26b8c: // 2188:530c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17912) <= (short)0x002d)
        goto loc_26bcc;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
loc_26bcc: // 2188:534c
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0000)
        goto loc_26be0;
    goto loc_26dcd;
loc_26be0: // 2188:5360
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_26c45;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_26c45;
    goto loc_26dcd;
loc_26c45: // 2188:53c5
    ax = 0x0017;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = 0x03e8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax < 0x0064)
        goto loc_26c5e;
    goto loc_26d81;
loc_26c5e: // 2188:53de
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x002e);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    if (memoryAGet16(ss, bp - 2) != 0x0000)
        goto loc_26ca2;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, 0xffff);
    goto loc_26cb3;
loc_26ca2: // 2188:5422
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_26cb3: // 2188:5433
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17918, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0006;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17924, 0x0038);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17908, 0x0005);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17890, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
    ax = 0x4eeb;
    dx = 0x2188;
    cx = ax;
    bx = dx;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17927, cx);
    memoryASet16(ds, di + 17929, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0010;
    push(ax);
    push(cs);
    sub_21b53();
    goto loc_26dcd;
loc_26d81: // 2188:5501
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0006;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0001);
loc_26dcd: // 2188:554d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0001)
        goto loc_26e15;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x000c;
    push(ax);
    push(cs);
    sub_222e6();
    goto loc_26e66;
loc_26e15: // 2188:5595
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_26e66: // 2188:55e6
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_26e6c() // 2188:55ec +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x000a;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    memoryASet16(ss, bp - 4, ax);
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(memoryAGet16(ss, bp - 2));
    push(memoryAGet16(ss, bp - 4));
    ax = 0x0130;
    push(ax);
    ax = 0x0020;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 8, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 6))
        goto loc_26f3f;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax != memoryAGet16(ss, bp - 8))
        goto loc_26f67;
loc_26f3f: // 2188:56bf
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0004);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0004);
    memoryASet16(ss, bp - 10, 0x0001);
    goto loc_26f8d;
loc_26f67: // 2188:56e7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17920, 0x0002);
    memoryASet16(ss, bp - 10, 0x0002);
loc_26f8d: // 2188:570d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    idiv16(memoryAGet16(ss, bp - 10));
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_26fc2;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
loc_26fc2: // 2188:5742
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_27028;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21bd7();
loc_27028: // 2188:57a8
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_270d5() // 2188:5855 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    memoryASet16(ss, bp - 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_27195;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    push(ax);
    push(cs);
    sub_21b90();
loc_27195: // 2188:5915
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_271c7;
    goto loc_27261;
loc_271c7: // 2188:5947
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_271dc;
    goto loc_27261;
loc_271dc: // 2188:595c
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0005)
        goto loc_27261;
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
loc_27261: // 2188:59e1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0xffff)
        goto loc_27280;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (al)
        goto loc_272a5;
loc_27280: // 2188:5a00
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) == 0x0001)
        goto loc_27294;
    goto loc_27331;
loc_27294: // 2188:5a14
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_21fde();
    if (al)
        goto loc_272a5;
    goto loc_27331;
loc_272a5: // 2188:5a25
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21bd7();
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    push(ax);
    push(cs);
    sub_21bd7();
loc_27331: // 2188:5ab1
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax += 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2743e() // 2188:5bbe +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_274a7;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0009;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000f;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_274b8;
loc_274a7: // 2188:5c27
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    goto loc_27509;
loc_274b8: // 2188:5c38
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
loc_27509: // 2188:5c89
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2750f() // 2188:5c8f +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    memoryASet16(ss, bp + 8, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    memoryASet16(ss, bp + 6, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += cx;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += cx;
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet(ds, 0xa0f0) == 0x00)
        goto loc_2764b;
    ax = 0x03e8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0014)
        goto loc_2764b;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17914) >= (short)0x0015)
        goto loc_2764b;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0005);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17908);
    ax++;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, cx);
    memoryASet(ds, 0xa0f0, 0x00);
loc_2764b: // 2188:5dcb
    if (memoryAGet(ds, 0xa0fa) == 0x00)
        goto loc_276a9;
    ax = 0x03e8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0014)
        goto loc_276a9;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17914) >= (short)0x0015)
        goto loc_276a9;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x000d);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17908);
    ax++;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, cx);
    memoryASet(ds, 0xa0fa, 0x00);
loc_276a9: // 2188:5e29
    if (memoryAGet(ds, 0xa0f0) != 0x00)
        goto loc_276c3;
    ax = 0x03e8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0014)
        goto loc_276c3;
    memoryASet(ds, 0xa0f0, 0x01);
loc_276c3: // 2188:5e43
    if (memoryAGet(ds, 0xa0fa) != 0x00)
        goto loc_276dd;
    ax = 0x03e8;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0014)
        goto loc_276dd;
    memoryASet(ds, 0xa0fa, 0x01);
loc_276dd: // 2188:5e5d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (!ax)
        goto loc_27707;
    goto loc_27820;
loc_27707: // 2188:5e87
    if (memoryAGet(ds, 0xa0f0) == 0x00)
        goto loc_2775e;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x0005)
        goto loc_27753;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if (ax != cx)
        goto loc_27753;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0009);
loc_27753: // 2188:5ed3
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    push(ax);
    push(cs);
    sub_21b90();
    goto loc_27790;
loc_2775e: // 2188:5ede
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) - 1);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) >= (short)0x0001)
        goto loc_27790;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_27790: // 2188:5f10
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    if (memoryAGet(ds, 0xa0fa) == 0x00)
        goto loc_277ee;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17914) != 0x000d)
        goto loc_277e3;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17908);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17902);
    if (ax != cx)
        goto loc_277e3;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, 0x0011);
loc_277e3: // 2188:5f63
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    push(cs);
    sub_21b90();
    goto loc_27820;
loc_277ee: // 2188:5f6e
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, memoryAGet16(ds, di + 17902) - 1);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17902) >= (short)0x0001)
        goto loc_27820;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17902, 0x0001);
loc_27820: // 2188:5fa0
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_27852;
    goto loc_27904;
loc_27852: // 2188:5fd2
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_27869;
    goto loc_27904;
loc_27869: // 2188:5fe9
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax < 0x0005)
        goto loc_2787a;
    goto loc_27904;
loc_2787a: // 2188:5ffa
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax -= 0x0002;
    push(ax);
    push(cs);
    sub_21bd7();
loc_27904: // 2188:6084
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0xffff)
        goto loc_27923;
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (al)
        goto loc_27942;
loc_27923: // 2188:60a3
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_279af;
    push(memoryAGet16(ss, bp - 4));
    push(memoryAGet16(ss, bp - 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_279af;
loc_27942: // 2188:60c2
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_279af: // 2188:612f
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_27ab2() // 2188:6232 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_27ae3;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
loc_27ae3: // 2188:6263
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_27b1b;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_27b1b: // 2188:629b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_27b72() // 2188:62f2 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    push(cs);
    sub_21fde();
    if (!al)
        goto loc_27bb7;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21bd7();
loc_27bb7: // 2188:6337
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_27be9;
    goto loc_27c81;
loc_27be9: // 2188:6369
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet(ds, di + 17926) != 0x00)
        goto loc_27bfe;
    goto loc_27c81;
loc_27bfe: // 2188:637e
    ax = 0x0064;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e3b0(); assert(cs == 0x2188);
    if (ax >= 0x0005)
        goto loc_27c81;
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    cx = memoryAGet16(ss, bp - 2);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ss, bp + 10);
    ax--;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
loc_27c81: // 2188:6401
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    push(memoryAGet16(ss, bp + 10));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_222e6();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_27cd8() // 2188:6458 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) != 0x0003)
        goto loc_27cf2;
    goto loc_27efb;
loc_27cf2: // 2188:6472
    push(memoryAGet16(ss, bp + 10));
    push(memoryAGet16(ss, bp + 8));
    push(memoryAGet16(ss, bp + 6));
    ax = 0x0130;
    push(ax);
    ax = 0x0006;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_236f4();
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    if (ax == memoryAGet16(ss, bp - 2))
        goto loc_27d25;
    goto loc_27e10;
loc_27d25: // 2188:64a5
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17886) == 0x0002)
        goto loc_27d3a;
    goto loc_27e10;
loc_27d3a: // 2188:64ba
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_21a9f();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_27d99;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0008;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
    goto loc_27dbb;
loc_27d99: // 2188:6519
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0008;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, cx);
loc_27dbb: // 2188:653b
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += memoryAGet16(ss, bp - 4);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    cx = 0x0004;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
loc_27e10: // 2188:6590
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_27eaa;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x000a;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_27eaa;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0005;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20638) == 0x00)
        goto loc_27ecd;
loc_27eaa: // 2188:662a
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
loc_27ecd: // 2188:664d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
loc_27efb: // 2188:667b
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_27f01() // 2188:6681 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17896));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x0011;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x2188);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17898);
    ax += 0x0011;
    push(ax);
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x2188);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17896);
    ax += 0x000f;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17898));
    push(cs); cs = 0x28b3; sub_28b30(); assert(cs == 0x2188);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_27fab() // 2188:672b +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17912);
    if (ax != 0x0000)
        goto loc_28032;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) != 0x0001)
        goto loc_27ff1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + 0x000c);
    goto loc_28000;
loc_27ff1: // 2188:6771
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + 0xfff4);
loc_28000: // 2188:6780
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0001)
        goto loc_2802f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_2802f: // 2188:67af
    goto loc_2824d;
loc_28032: // 2188:67b2
    if (ax != 0x0001)
        goto loc_2809c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x0003;
    di = ax;
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x0003;
    if ((short)ax <= (short)0x0009)
        goto loc_28099;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_28099: // 2188:6819
    goto loc_2824d;
loc_2809c: // 2188:681c
    if (ax != 0x0002)
        goto loc_28105;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x000a;
    di = ax;
    al = memoryAGet(ds, di + 41233);
    ah = 0;
    cx = 0;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    ax += 0x000a;
    if ((short)ax <= (short)0x0010)
        goto loc_28102;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_28102: // 2188:6882
    goto loc_2824d;
loc_28105: // 2188:6885
    if (ax != 0x0003)
        goto loc_2815f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0001)
        goto loc_2815c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_2815c: // 2188:68dc
    goto loc_2824d;
loc_2815f: // 2188:68df
    if (ax != 0x0004)
        goto loc_281b8;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0001)
        goto loc_281b5;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_281b5: // 2188:6935
    goto loc_2824d;
loc_281b8: // 2188:6938
    if (ax != 0x0005)
        goto loc_281ee;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0001)
        goto loc_281ec;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_281ec: // 2188:696c
    goto loc_2824d;
loc_281ee: // 2188:696e
    if (ax != 0x0006)
        goto loc_2824d;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, memoryAGet16(ds, di + 17912) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = 0x001c;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    push(ax);
    push(cs);
    sub_22127();
    flags.carry = (memoryAGet16(ds, 0x50a5) + 0x1388) >= 0x10000;
    memoryASet16(ds, 0x50a5, memoryAGet16(ds, 0x50a5) + 0x1388);
    memoryASet16(ds, 0x50a7, memoryAGet16(ds, 0x50a7) + (0x0000 + flags.carry));
loc_2824d: // 2188:69cd
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_28253() // 2188:69d3 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    if ((short)ax < (short)0x0000)
        goto loc_28297;
    if ((short)ax > (short)0x0003)
        goto loc_28297;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    goto loc_28366;
loc_28297: // 2188:6a17
    if ((short)ax < (short)0x0004)
        goto loc_282c6;
    if ((short)ax > (short)0x0007)
        goto loc_282c6;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0;
    ax <<= cl;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    goto loc_28366;
loc_282c6: // 2188:6a46
    if (ax == 0x0008)
        goto loc_282ce;
    goto loc_28366;
loc_282ce: // 2188:6a4e
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet(ds, di + 17926, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    memoryASet16(ss, bp - 4, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    bx = memoryAGet16(ds, di + 17906);
    ax = memoryAGet16(ss, bp - 4);
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    memoryASet16(ds, di + 20626, bx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17892));
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17894));
    push(cs);
    sub_21b53();
    ax = memoryAGet16(ss, bp + 10);
    ax++;
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17886, ax);
loc_28366: // 2188:6ae6
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2837a() // 2188:6afa +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0003;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_283df;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x000c;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_28402;
loc_283df: // 2188:6b5f
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_28402: // 2188:6b82
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0005;
    dx = ax;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    if ((short)ax > (short)dx)
        goto loc_28429;
    goto loc_284c2;
loc_28429: // 2188:6ba9
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0005;
    dx = ax;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    if ((short)ax >= (short)dx)
        goto loc_284c2;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax <= (short)dx)
        goto loc_284c2;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0010;
    ax += 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax >= (short)dx)
        goto loc_284c2;
    if (memoryAGet16(ds, 0x5132) != 0x0001)
        goto loc_284c2;
    if ((short)memoryAGet16(ds, 0x5134) <= (short)0x000a)
        goto loc_284c2;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0010;
    memoryASet16(ds, 0x4613, ax);
    memoryASet(ds, 0x513d, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x511a, ax);
    goto loc_28502;
loc_284c2: // 2188:6c42
    if (memoryAGet(ds, 0x513d) == 0x00)
        goto loc_284d2;
    ax = memoryAGet16(ss, bp + 10);
    if (ax != memoryAGet16(ds, 0x511a))
        goto loc_28502;
loc_284d2: // 2188:6c52
    memoryASet(ds, 0x513d, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) == 0x0000)
        goto loc_28502;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0;
    memoryASet16(ds, 0x5126, ax);
    ax = 0;
    memoryASet16(ds, 0x5118, ax);
loc_28502: // 2188:6c82
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) != 0x0001)
        goto loc_285ab;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17916) != 0x0001)
        goto loc_2857f;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0;
    ax <<= cl;
    memoryASet16(ds, 0x5118, ax);
    push(memoryAGet16(ds, 0x5118));
    ax = 0;
    push(ax);
    push(cs);
    sub_218c3();
    if (!al)
        goto loc_2857d;
    ax = memoryAGet16(ds, 0x5118);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
loc_2857d: // 2188:6cfd
    goto loc_285ab;
loc_2857f: // 2188:6cff
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0xffff;
    imul16(cx);
    memoryASet16(ds, 0x5118, ax);
    push(memoryAGet16(ds, 0x5118));
    ax = 0;
    push(ax);
    push(cs);
    sub_218c3();
    if (!al)
        goto loc_285ab;
    ax = memoryAGet16(ds, 0x5118);
    memoryASet16(ds, 0x4611, memoryAGet16(ds, 0x4611) + ax);
loc_285ab: // 2188:6d2b
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_285b1() // 2188:6d31 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ax -= 0x0014;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) != 0x00)
        goto loc_28616;
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0010;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x0014;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp + 8);
    ax += 0x0008;
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += bx;
    if (memoryAGet(ds, di + 20637) == 0x00)
        goto loc_28639;
loc_28616: // 2188:6d96
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17918);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17918, cx);
loc_28639: // 2188:6db9
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    if (memoryAGet(ds, 0x5142) == 0x00)
        goto loc_2864a;
    goto loc_286ea;
loc_2864a: // 2188:6dca
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0005;
    dx = ax;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    if ((short)ax > (short)dx)
        goto loc_2866a;
    goto loc_286ea;
loc_2866a: // 2188:6dea
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax += 0x0005;
    dx = ax;
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    if ((short)ax >= (short)dx)
        goto loc_286ea;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax <= (short)dx)
        goto loc_286ea;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0010;
    ax += 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax >= (short)dx)
        goto loc_286ea;
    if (memoryAGet16(ds, 0x5132) != 0x0001)
        goto loc_286ea;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17894);
    ax -= 0x0010;
    memoryASet16(ds, 0x4613, ax);
    memoryASet(ds, 0x5142, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x511c, ax);
loc_286ea: // 2188:6e6a
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    dx = memoryAGet16(ds, di + 17894);
    ax = memoryAGet16(ds, 0x4613);
    ax += 0x0010;
    if (ax != dx)
        goto loc_28763;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax <= (short)dx)
        goto loc_28763;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax += 0x0010;
    ax += 0x0004;
    dx = ax;
    ax = memoryAGet16(ds, 0x4611);
    ax += 0x0008;
    if ((short)ax >= (short)dx)
        goto loc_28763;
    if (memoryAGet16(ds, 0x5132) != 0x0001)
        goto loc_28763;
    memoryASet(ds, 0x5142, 0x01);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17912, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x511c, ax);
    goto loc_2878d;
loc_28763: // 2188:6ee3
    if (memoryAGet(ds, 0x5142) == 0x00)
        goto loc_28773;
    ax = memoryAGet16(ss, bp + 10);
    if (ax != memoryAGet16(ds, 0x511c))
        goto loc_2878d;
loc_28773: // 2188:6ef3
    memoryASet(ds, 0x5142, 0x00);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17912, ax);
    ax = 0;
    memoryASet16(ds, 0x5128, ax);
loc_2878d: // 2188:6f0d
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17918);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17894, memoryAGet16(ds, di + 17894) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17912) == 0x0001)
        goto loc_287cf;
    goto loc_28870;
loc_287cf: // 2188:6f4f
    if (memoryAGet16(ds, 0x5132) == 0x0001)
        goto loc_287d9;
    goto loc_28870;
loc_287d9: // 2188:6f59
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17918) != 0x0001)
        goto loc_2882c;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0;
    ax <<= cl;
    memoryASet16(ds, 0x5128, ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    push(memoryAGet16(ds, di + 17920));
    push(cs);
    sub_218c3();
    if (!al)
        goto loc_2882a;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) + ax);
loc_2882a: // 2188:6faa
    goto loc_28870;
loc_2882c: // 2188:6fac
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    cx = 0xffff;
    imul16(cx);
    memoryASet16(ds, 0x5128, ax);
    ax = 0;
    push(ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    ax = -ax;
    push(ax);
    push(cs);
    sub_218c3();
    if (!al)
        goto loc_28870;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    memoryASet16(ds, 0x4613, memoryAGet16(ds, 0x4613) - ax);
loc_28870: // 2188:6ff0
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_28876() // 2188:6ff6 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x512a, ax);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) <= (short)0x0010)
        goto loc_288a2;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) < (short)0x0270)
        goto loc_288e5;
loc_288a2: // 2188:7022
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    ax <<= 1;
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
loc_288e5: // 2188:7065
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) >= (short)0x7d00)
        goto loc_28907;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    goto loc_28917;
loc_28907: // 2188:7087
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_28917: // 2188:7097
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17910);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0002;
    idiv16(cx);
    tx = dx; dx = ax; ax = tx;
    if (ax)
        goto loc_2895e;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
loc_2895e: // 2188:70de
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_28964() // 2188:70e4 +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0030;
    ax = memoryAGet16(ss, bp + 10);
    memoryASet16(ds, 0x513a, ax);
    push(memoryAGet16(ss, bp + 10));
    push(cs);
    sub_21b90();
    ax = memoryAGet16(ds, 0x512a);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17892);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17892);
    ax -= cx;
    if ((short)ax >= 0)
        goto loc_2899b;
    ax = -ax;
loc_2899b: // 2188:711b
    if ((short)ax <= (short)0x0023)
        goto loc_289b1;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0000)
        goto loc_289d4;
loc_289b1: // 2188:7131
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) <= (short)0x0010)
        goto loc_289d4;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17892) < (short)0x0270)
        goto loc_28a07;
loc_289d4: // 2188:7154
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, 0x0001);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17916);
    cx = 0xffff;
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17916, cx);
loc_28a07: // 2188:7187
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0000)
        goto loc_28a47;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17910, memoryAGet16(ds, di + 17910) + 1);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if ((short)memoryAGet16(ds, di + 17910) <= (short)0x0005)
        goto loc_28a47;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = 0;
    memoryASet16(ds, di + 17910, ax);
loc_28a47: // 2188:71c7
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    cx = memoryAGet16(ds, di + 17916);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    ax = memoryAGet16(ds, di + 17920);
    imul16(cx);
    cx = ax;
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17892, memoryAGet16(ds, di + 17892) + cx);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    if (memoryAGet16(ds, di + 17910) == 0x0003)
        goto loc_28a89;
    goto loc_28b27;
loc_28a89: // 2188:7209
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di += 0x45de;
    push(ds);
    push(di);
    di = bp - 46;
    push(ss);
    push(di);
    ax = 0x002d;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x2188);
    ax = memoryAGet16(ds, 0x512a);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di += 0x45de;
    push(ds);
    push(di);
    ax = memoryAGet16(ss, bp + 10);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di += 0x45de;
    push(ds);
    push(di);
    ax = 0x002d;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x2188);
    di = bp - 46;
    push(ss);
    push(di);
    ax = memoryAGet16(ds, 0x512a);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    di += 0x45de;
    push(ds);
    push(di);
    ax = 0x002d;
    push(ax);
    push(cs); cs = 0x2da3; sub_2dc8d(); assert(cs == 0x2188);
    ax = memoryAGet16(ds, 0x513a);
    memoryASet16(ss, bp - 48, ax);
    ax = memoryAGet16(ds, 0x512a);
    memoryASet16(ds, 0x513a, ax);
    ax = memoryAGet16(ss, bp - 48);
    memoryASet16(ds, 0x512a, ax);
    ax = memoryAGet16(ds, 0x512a);
    if ((short)ax <= (short)memoryAGet16(ds, 0x513a))
        goto loc_28b19;
    ax = memoryAGet16(ds, 0x513a);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, memoryAGet16(ds, di + 17914) + 1);
    goto loc_28b27;
loc_28b19: // 2188:7299
    ax = memoryAGet16(ds, 0x513a);
    dx = 0x002d;
    mul16(dx);
    di = ax;
    memoryASet16(ds, di + 17914, memoryAGet16(ds, di + 17914) - 1);
loc_28b27: // 2188:72a7
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_28b30() // 28b3:0000 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) > (short)0xffff)
        goto loc_28b57;
    goto loc_28d4b;
loc_28b57: // 28b3:0027
    if ((short)memoryAGet16(ss, bp - 4) > (short)0x0000)
        goto loc_28b60;
    goto loc_28d4b;
loc_28b60: // 28b3:0030
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0028)
        goto loc_28b69;
    goto loc_28d4b;
loc_28b69: // 28b3:0039
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x0019)
        goto loc_28b72;
    goto loc_28d4b;
loc_28b72: // 28b3:0042
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20622) == 0xffff)
        goto loc_28bd8;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20622);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d8d1(); assert(cs == 0x28b3);
    flags.carry = (memoryAGet16(ds, 0x5234) + 0x0001) >= 0x10000;
    memoryASet16(ds, 0x5234, memoryAGet16(ds, 0x5234) + 0x0001);
    memoryASet16(ds, 0x5236, memoryAGet16(ds, 0x5236) + (0x0000 + flags.carry));
    goto loc_28c3f;
loc_28bd8: // 28b3:00a8
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20624);
    dx = 0x00a0;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    di = memoryAGet16(ds, di + 20628);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += bx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
loc_28c3f: // 28b3:010f
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20626) == 0x0000)
        goto loc_28cc5;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20626);
    dx = 0x00a0;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    di = memoryAGet16(ds, di + 20630);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += bx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x28b3);
loc_28cc5: // 28b3:0195
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0000)
        goto loc_28d4b;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20634);
    dx = 0x00a0;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    di = memoryAGet16(ds, di + 20632);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += bx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x28b3);
loc_28d4b: // 28b3:021b
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_28d51() // 28b3:0221 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 2, ax);
    ax = memoryAGet16(ss, bp + 6);
    dx = ax & 0x8000 ? 0xffff : 0x0000;
    cx = 0x0010;
    idiv16(cx);
    memoryASet16(ss, bp - 4, ax);
    if ((short)memoryAGet16(ss, bp - 2) > (short)0xffff)
        goto loc_28d78;
    goto loc_28e19;
loc_28d78: // 28b3:0248
    if ((short)memoryAGet16(ss, bp - 4) > (short)0x0000)
        goto loc_28d81;
    goto loc_28e19;
loc_28d81: // 28b3:0251
    if ((short)memoryAGet16(ss, bp - 2) < (short)0x0028)
        goto loc_28d8a;
    goto loc_28e19;
loc_28d8a: // 28b3:025a
    if ((short)memoryAGet16(ss, bp - 4) < (short)0x0019)
        goto loc_28d93;
    goto loc_28e19;
loc_28d93: // 28b3:0263
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    if (memoryAGet16(ds, di + 20634) == 0x0000)
        goto loc_28e19;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    ax = memoryAGet16(ds, di + 20634);
    dx = 0x00a0;
    mul16(dx);
    bx = ax;
    ax = memoryAGet16(ss, bp - 4);
    ax++;
    dx = 0x0014;
    mul16(dx);
    cx = ax;
    ax = memoryAGet16(ss, bp - 2);
    ax++;
    dx = 0x01f4;
    mul16(dx);
    di = ax;
    di += cx;
    di = memoryAGet16(ds, di + 20632);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += bx;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    push(ax);
    ax = memoryAGet16(ss, bp - 4);
    cx = 0x0004;
    ax <<= cl;
    ax += memoryAGet16(ds, 0xa0b6);
    push(ax);
    push(cs); cs = 0x2aa3; sub_2adcb(); assert(cs == 0x28b3);
loc_28e19: // 28b3:02e9
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_28e1f() // 28b3:02ef +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0003;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0005;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0006;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0007;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0008;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0009;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000a;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000b;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000c;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000d;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000e;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000f;
    push(ax);
    ax = 0x0017;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_28f76() // 28b3:0446 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0001;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0002;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0003;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0004;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0005;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0006;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0007;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0008;
    push(ax);
    ax = 0x0010;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0009;
    push(ax);
    ax = 0x0011;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000a;
    push(ax);
    ax = 0x0012;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000b;
    push(ax);
    ax = 0x0013;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000c;
    push(ax);
    ax = 0x0014;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000d;
    push(ax);
    ax = 0x0015;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000e;
    push(ax);
    ax = 0x0016;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000f;
    push(ax);
    ax = 0x0017;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_290cd() // 28b3:059d +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0001;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0002;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0003;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0004;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0005;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0006;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0007;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0008;
    push(ax);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x0009;
    push(ax);
    ax = 0x0001;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000a;
    push(ax);
    ax = 0x0002;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000b;
    push(ax);
    ax = 0x0003;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000c;
    push(ax);
    ax = 0x0004;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000d;
    push(ax);
    ax = 0x0005;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000e;
    push(ax);
    ax = 0x0006;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    ax = 0x000f;
    push(ax);
    ax = 0x0007;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2921c() // 28b3:06ec +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_2922c;
loc_29229: // 28b3:06f9
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2922c: // 28b3:06fc
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_29229;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_29241() // 28b3:0711 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    goto loc_29251;
loc_2924e: // 28b3:071e
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_29251: // 28b3:0721
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = 0x2a41; sub_2a6ae(); assert(cs == 0x28b3);
    push(memoryAGet16(ss, bp - 2));
    ax = 0;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2aca8(); assert(cs == 0x28b3);
    if (memoryAGet16(ss, bp - 2) != 0x000f)
        goto loc_2924e;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_29270() // 28b3:0740 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65530, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65530, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65530, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65530, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65530, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65532, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65532, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65532, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xff9d);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_294c2() // 28b3:0992 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    ax = 0;
    memoryASet16(ss, bp - 2, ax);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0005);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0005);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffa);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfff8);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffa);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xffff);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0001);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffa);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffa);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffc);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0xfffe);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0002);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    ax = 0;
    memoryASet16(es, di + 65532, ax);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0003);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0002);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0004);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0x0008);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65532, 0x0006);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65534, 0x0004);
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
    ax = memoryAGet16(ss, bp - 2);
    ax <<= 1;
    si = ax;
    ax <<= 1;
    ax += si;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    di += ax;
    memoryASet16(es, di + 65530, 0xff9d);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_29ee5() // 28b3:13b5 +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0004;
    ax = memoryAGet16(ss, bp + 8);
    if (ax != 0x0001)
        goto loc_29f24;
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    goto loc_2a16d;
loc_29f24: // 28b3:13f4
    if (ax == 0x0004)
        goto loc_29f2c;
    goto loc_29fee;
loc_29f2c: // 28b3:13fc
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0004;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0005;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    goto loc_2a16d;
loc_29fee: // 28b3:14be
    if (ax == 0x0006)
        goto loc_29ff6;
    goto loc_2a119;
loc_29ff6: // 28b3:14c6
    ax = memoryAGet16(ss, bp + 6);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax++;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0002;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0004;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0005;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp + 6);
    ax += 0x0006;
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    goto loc_2a16d;
loc_2a119: // 28b3:15e9
    if (ax != 0x0008)
        goto loc_2a16d;
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    memoryASet16(ss, bp - 4, ax);
    ax = 0;
    if ((short)ax > (short)memoryAGet16(ss, bp - 4))
        goto loc_2a16d;
    memoryASet16(ss, bp - 2, ax);
    goto loc_2a134;
loc_2a131: // 28b3:1601
    memoryASet16(ss, bp - 2, memoryAGet16(ss, bp - 2) + 1);
loc_2a134: // 28b3:1604
    ax = memoryAGet16(ss, bp + 6);
    ax += memoryAGet16(ss, bp - 2);
    dx = 0x00a0;
    mul16(dx);
    di = memoryAGet16(ss, bp + 10);
    di <<= 1;
    di <<= 1;
    {int tmp1 = memoryAGet16(ds, di + 21044); int tmp2 = memoryAGet16(ds, di + 21044 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    di += ax;
    di += 0xff63;
    push(es);
    push(di);
    ax = memoryAGet16(ds, 0xa0ee);
    ax <<= 1;
    push(ax);
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2d3f5(); assert(cs == 0x28b3);
    memoryASet16(ds, 0xa0ee, memoryAGet16(ds, 0xa0ee) + 1);
    ax = memoryAGet16(ss, bp - 2);
    if (ax != memoryAGet16(ss, bp - 4))
        goto loc_2a131;
loc_2a16d: // 28b3:163d
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2a173() // 28b3:1643
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0060;
    ax = ss;
    memoryASet16(ss, bp - 6, ax);
    ax = bp - 96;
    memoryASet16(ss, bp - 10, ax);
    memoryASet16(ss, bp - 22, 0x1b00);
    ax = 0;
    memoryASet16(ss, bp - 20, ax);
    al = 0x10;
    push(ax);
    di = bp - 22;
    push(ss);
    push(di);
    push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
    if (memoryAGet(ss, bp - 22) != 0x1b)
        goto loc_2a1a7;
    memoryASet(ss, bp - 32, 0x56);
    goto loc_2a1e2;
loc_2a1a7: // 28b3:1677
    al = 0x11;
    push(ax);
    di = bp - 22;
    push(ss);
    push(di);
    push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
    al = memoryAGet(ss, bp - 22);
    al &= 0x30;
    ah = 0;
    cx = 0x0004;
    ax >>= cl;
    memoryASet16(ss, bp - 24, ax);
    si = 0;
    es = si;
    {int tmp1 = memoryAGet16(es, 0x0487); int tmp2 = memoryAGet16(es, 0x0487 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    al = memoryAGet(es, di);
    memoryASet(ss, bp - 31, al);
    if (memoryAGet(ss, bp - 31) == 0x00)
        goto loc_2a1de;
    memoryASet(ss, bp - 32, 0x45);
    goto loc_2a1e2;
loc_2a1de: // 28b3:16ae
    memoryASet(ss, bp - 32, 0x55);
loc_2a1e2: // 28b3:16b2
    al = memoryAGet(ss, bp - 32);
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a21f() // 28b3:16ef +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0018;
    memoryASet(ss, bp - 19, 0x0f);
    al = 0x10;
    push(ax);
    di = bp - 20;
    push(ss);
    push(di);
    push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
    al = memoryAGet(ss, bp - 20);
    al &= 0x7f;
    ah = 0;
    memoryASet16(ss, bp - 22, ax);
    memoryASet16(ss, bp - 20, 0x1a00);
    al = 0x10;
    push(ax);
    di = bp - 20;
    push(ss);
    push(di);
    push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
    assert(memoryAGet(ss, bp - 20) == 0x1a);
    if (memoryAGet(ss, bp - 20) != 0x1a)
        goto loc_2a26e;
    if (memoryAGet(ss, bp - 18) == 0xff)
        goto loc_2a26c;
    al = memoryAGet(ss, bp - 18);
    ah = 0;
    di = ax;
    al = memoryAGet(ds, di + 610);
    memoryASet(ss, bp - 23, al);
loc_2a26c: // 28b3:173c
    goto loc_2a28d;
loc_2a26e: // 28b3:173e
    memoryASet(ss, bp - 19, 0x12);
    memoryASet(ss, bp - 18, 0x10);
    al = 0x10;
    push(ax);
    di = bp - 20;
    push(ss);
    push(di);
    push(cs); cs = 0x2d99; sub_2d99b(); assert(cs == 0x28b3);
    if (memoryAGet(ss, bp - 18) == 0x10)
        goto loc_2a28d;
    memoryASet(ss, bp - 23, 0x03);
loc_2a28d: // 28b3:175d
    if (memoryAGet(ss, bp - 23) == 0x03)
        goto loc_2a2b5;
    if (memoryAGet(ss, bp - 23) == 0x04)
        goto loc_2a2b5;
    di = 0xa23c;
    push(ds);
    push(di);
    di = 0x16bf;
    push(cs);
    push(di);
    ax = 0;
    push(ax);
    push(cs); cs = 0x2da3; sub_2e9e6(); assert(cs == 0x28b3);
    push(cs); cs = 0x2da3; sub_2e91e(); assert(cs == 0x28b3);
    push(cs); cs = 0x2da3; sub_2dc3e(); assert(cs == 0x28b3);
loc_2a2b5: // 28b3:1785
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a2b9() // 28b3:1789 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    if (memoryAGet16(ds, 0xa0be) != 0xffff)
        goto loc_2a2e1;
    push(cs);
    sub_2a173();
    if (al != 0x56)
        goto loc_2a2d6;
    ax = 0x0190;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ac50(); assert(cs == 0x28b3);
    goto loc_2a2df;
loc_2a2d6: // 28b3:17a6
    ax = 0x00c8;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2abf5(); assert(cs == 0x28b3);
loc_2a2df: // 28b3:17af
    goto loc_2a2fd;
loc_2a2e1: // 28b3:17b1
    push(cs);
    sub_2a173();
    if (al != 0x56)
        goto loc_2a2f4;
    ax = 0x0180;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2ac50(); assert(cs == 0x28b3);
    goto loc_2a2fd;
loc_2a2f4: // 28b3:17c4
    ax = 0x00be;
    push(ax);
    push(cs); cs = 0x2aa3; sub_2abf5(); assert(cs == 0x28b3);
loc_2a2fd: // 28b3:17cd
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a310() // 2a31:0000 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0006;
    ax = 0;
    push(ax);
    push(cs);
    sub_2a3dc();
    memoryASet16(ss, bp - 4, ax);
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2a3dc();
    memoryASet16(ss, bp - 6, ax);
    if (memoryAGet16(ss, bp - 4) != 0xffff)
        goto loc_2a33d;
    if (memoryAGet16(ss, bp - 6) != 0xffff)
        goto loc_2a33d;
    memoryASet(ss, bp - 1, 0x00);
    goto loc_2a341;
loc_2a33d: // 2a31:002d
    memoryASet(ss, bp - 1, 0x01);
loc_2a341: // 2a31:0031
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a348() // 2a31:0038 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    dx = 0x0201;
    al = in8(dx);
    al &= 0x10;
    if (!al)
        goto loc_2a35c;
    al = 0x00;
    goto loc_2a35e;
loc_2a35c: // 2a31:004c
    al = 0x01;
loc_2a35e: // 2a31:004e
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a368() // 2a31:0058 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0002;
    dx = 0x0201;
    al = in8(dx);
    al &= 0x20;
    if (!al)
        goto loc_2a37c;
    al = 0x00;
    goto loc_2a37e;
loc_2a37c: // 2a31:006c
    al = 0x01;
loc_2a37e: // 2a31:006e
    memoryASet(ss, bp - 1, al);
    al = memoryAGet(ss, bp - 1);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a388() // 2a31:0078 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a3dc() // 2a31:00cc +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x0201;
    ax = memoryAGet16(ss, bp + 6);
    cl = al;
    ah = 0x01;
    ah <<= cl;
    cx = 0xffff;
loc_2a3ee: // 2a31:00de
    al = in8(dx);
    if (--cx && al & ah)
        goto loc_2a3ee;
    cx = 0xffff;
    flags.interrupts = 0;
    out8(dx, al);
loc_2a3f8: // 2a31:00e8
    al = in8(dx);
    if (--cx && al & ah)
        goto loc_2a3f8;
    flags.interrupts = 1;
    cx = -cx;
    cx += 0xffff;
    ax = cx;
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a410() // 2a41:0000 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    sub_2a440();
    di = 0xa13c;
    push(ds);
    push(di);
    push(cs);
    sub_2a73e();
    di = 0xa13c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e642(); assert(cs == 0x2a41);
    di = 0xa23c;
    push(ds);
    push(di);
    push(cs);
    sub_2a73e();
    di = 0xa23c;
    push(ds);
    push(di);
    push(cs); cs = 0x2da3; sub_2e647(); assert(cs == 0x2a41);
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2a440() // 2a41:0030
{
    ah = 0x0f;
    sub_2aa18();
    if (al == 0x07)
        goto loc_2a453;
    if (al <= 0x03)
        goto loc_2a453;
    ax = 0x0003;
    sub_2a4a9();
loc_2a453: // 2a41:0043
    sub_2a4f7();
    ah = 0x08;
    bh = 0;
    sub_2aa18();
    al = ah;
    al &= 0x7f;
    memoryASet(ds, 0xa138, al);
    memoryASet(ds, 0xa12e, al);
    ax = 0;
    memoryASet(ds, 0xa129, al);
    memoryASet(ds, 0xa139, al);
    memoryASet(ds, 0xa13a, al);
    ax++;
    memoryASet(ds, 0xa128, al);
    ax = 0x0040;
    es = ax;
    di = 0x006c;
    al = memoryAGet(es, di);
loc_2a481: // 2a41:0071
    sync();
    if (al == memoryAGet(es, di))
        goto loc_2a481;
    al = memoryAGet(es, di);
    cx = 0xffff;
    sub_2a6ce();
    ax = 0x0037;
    tx = cx; cx = ax; ax = tx;
    ax = ~ax;
    dx = 0;
    div16(cx);
    memoryASet16(ds, 0xa134, ax);
    push(ds);
    push(cs);
    ds = pop();
    dx = 0x012f;
    ax = 0x251b;
    interrupt(0x21);
    ds = pop();
}
void sub_2a4a9() // 2a41:0099
{
    dx = 0x0040;
    es = dx;
    memoryASet(es, 0x0087, memoryAGet(es, 0x0087) & 0xfe);
    if (al == 0x07)
        goto loc_2a4be;
    if (al < 0x04)
        goto loc_2a4be;
    al = 0x03;
loc_2a4be: // 2a41:00ae
    push(ax);
    ah = 0x00;
    sub_2aa18();
    ax = pop();
    if (!ah)
        goto loc_2a4f6;
    ax = 0x1112;
    bl = 0x00;
    sub_2aa18();
    ax = 0x1130;
    bh = 0x00;
    dl = 0x00;
    sub_2aa18();
    if (dl != 0x2a)
        goto loc_2a4f6;
    memoryASet(es, 0x0087, memoryAGet(es, 0x0087) | 0x01);
    ax = 0x0100;
    cx = 0x0600;
    sub_2aa18();
    ah = 0x12;
    bl = 0x20;
    sub_2aa18();
loc_2a4f6: // 2a41:00e6
    return;
}
void sub_2a4f7() // 2a41:00e7
{
    ah = 0x0f;
    sub_2aa18();
    push(ax);
    ax = 0x1130;
    bh = 0x00;
    dl = 0x00;
    sub_2aa18();
    ax = pop();
    cl = 0x00;
    if (dl)
        goto loc_2a516;
    dl = 0x18;
    if (al > 0x03)
        goto loc_2a516;
    cl = 0x01;
loc_2a516: // 2a41:0106
    dh = dl;
    dl = ah;
    dl--;
    ah = 0x00;
    if (dh <= 0x18)
        goto loc_2a525;
    ah = 0x01;
loc_2a525: // 2a41:0115
    memoryASet16(ds, 0xa12c, ax);
    memoryASet16(ds, 0xa136, dx);
    memoryASet(ds, 0xa12b, cl);
    memoryASet(ds, 0xa12a, 0x01);
    ax = 0;
    memoryASet16(ds, 0xa130, ax);
    memoryASet16(ds, 0xa132, dx);
}
void sub_2a555() // 2a41:0145 +stackDrop4
{
    sp -= 2;
    if (memoryAGet(ds, 0xa13a) != 0x00)
        goto loc_2a55d;
    sp += 2;
    return;
loc_2a55d: // 2a41:014d
    memoryASet(ds, 0xa13a, 0x00);
loc_2a562: // 2a41:0152
    ah = 0x01;
    interrupt(0x16);
    if (flags.zero)
        goto loc_2a56e;
    ah = 0x00;
    interrupt(0x16);
    goto loc_2a562;
loc_2a56e: // 2a41:015e
    al = 0x5e;
    sub_2a88b();
    al = 0x43;
    sub_2a88b();
    sub_2a884();
    interrupt(0x23);
    bx = sp;
    ax = memoryAGet16(ss, bx + 4);
    sub_2a4a9();
    sub_2a4f7();
    al = memoryAGet(ds, 0xa138);
    memoryASet(ds, 0xa12e, al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a57d() // 2a41:016d +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    ax = memoryAGet16(ss, bx + 4);
    sub_2a4a9();
    sub_2a4f7();
    al = memoryAGet(ds, 0xa138);
    memoryASet(ds, 0xa12e, al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a5d2() // 2a41:01c2 +far
{
    ax = 0x0600;
    bh = memoryAGet(ds, 0xa12e);
    cx = memoryAGet16(ds, 0xa130);
    dx = memoryAGet16(ds, 0xa132);
    sub_2aa18();
    dx = memoryAGet16(ds, 0xa130);
    sub_2a90c();
    cs = pop();
}
void sub_2a625() // 2a41:0215 +far +stackDrop6
{
    sp -= 2;
    bx = sp;
    dl = memoryAGet(ss, bx + 6);
    dh = memoryAGet(ss, bx + 4);
    dl--;
    flags.carry = (dl + memoryAGet(ds, 0xa130)) >= 0x100;
    dl += memoryAGet(ds, 0xa130);
    if (flags.carry)
        goto loc_2a64e;
    if (dl > memoryAGet(ds, 0xa132))
        goto loc_2a64e;
    dh--;
    flags.carry = (dh + memoryAGet(ds, 0xa131)) >= 0x100;
    dh += memoryAGet(ds, 0xa131);
    if (flags.carry)
        goto loc_2a64e;
    if (dh > memoryAGet(ds, 0xa133))
        goto loc_2a64e;
    sub_2a90c();
loc_2a64e: // 2a41:023e
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2a669() // 2a41:0259 +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    al = memoryAGet(ss, bx + 4);
    if (!(al & 0xf0))
        goto loc_2a677;
    al &= 0x0f;
    al |= 0x80;
loc_2a677: // 2a41:0267
    memoryASet(ds, 0xa12e, memoryAGet(ds, 0xa12e) & 0x70);
    memoryASet(ds, 0xa12e, memoryAGet(ds, 0xa12e) | al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a683() // 2a41:0273 +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    al = memoryAGet(ss, bx + 4);
    al &= 0x07;
    cl = 0x04;
    al <<= cl;
    memoryASet(ds, 0xa12e, memoryAGet(ds, 0xa12e) & 0x8f);
    memoryASet(ds, 0xa12e, memoryAGet(ds, 0xa12e) | al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2a6ae() // 2a41:029e +far +stackDrop4
{
    sp -= 2;
    bx = sp;
    dx = memoryAGet16(ss, bx + 4);
    if (!dx)
        goto loc_2a6cb;
    di = 0;
    es = di;
    al = memoryAGet(es, di);
    bx = memoryAGet16(ds, 0xa134);
loc_2a6c3: // 2a41:02b3
    cx = bx;
    sub_2a6ce();
    dx--;
    if (dx)
        goto loc_2a6c3;
loc_2a6cb: // 2a41:02bb
    sp += 2;
    cs = pop();
    sp += 2;
    return;
}
void sub_2a6ce() // 2a41:02be
{
loc_2a6ce: // 2a41:02be
    if (al != memoryAGet(es, di))
        goto loc_2a6d5;
    if (--cx)
        goto loc_2a6ce;
loc_2a6d5: // 2a41:02c5
    return;
}
void sub_2a703() // 2a41:02f3 +far
{
    al = in8(0x61);
    al &= 0xfc;
    out8(0x61, al);
    cs = pop();
}
void sub_2a70a() // 2a41:02fa +far
{
    sync();
    if (memoryAGet(ds, 0xa139) != 0x00)
        goto loc_2a719;
    ah = 0x01;
    interrupt(0x16);
    al = 0x00;
    if (flags.zero)
        goto loc_2a71b;
loc_2a719: // 2a41:0309
    al = 0x01;
loc_2a71b: // 2a41:030b
    cs = pop();
    return;
}
void sub_2a71c() // 2a41:030c +far
{
    al = memoryAGet(ds, 0xa139);
    memoryASet(ds, 0xa139, 0x00);
    if (al)
        goto loc_2a73a;
    ah = 0;
    interrupt(0x16);
    if (al)
        goto loc_2a73a;
    memoryASet(ds, 0xa139, ah);
    if (ah)
        goto loc_2a73a;
    al = 0x03;
loc_2a73a: // 2a41:032a
    sub_2a555();
    stop("stack_below");
    stop("stack_unbalanced");
    cs = pop();
}
void sub_2a73e() // 2a41:032e +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    memoryASet16(ds, di + 2, 0xd7b0);
    memoryASet16(ds, di + 4, 0x0080);
    ax = di + 128;
    memoryASet16(ds, di + 12, ax);
    memoryASet16(ds, di + 14, ds);
    memoryASet16(ds, di + 16, 0x0359);
    memoryASet16(ds, di + 18, cs);
    memoryASet(ds, di + 48, 0x00);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2a769() // 2a41:0359 +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    ax = 0x0391;
    bx = 0x046f;
    cx = bx;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2a789;
    memoryASet16(ds, di + 2, 0xd7b2);
    ax = 0x043e;
    bx = ax;
loc_2a789: // 2a41:0379
    memoryASet16(ds, di + 20, ax);
    memoryASet16(ds, di + 22, cs);
    memoryASet16(ds, di + 24, bx);
    memoryASet16(ds, di + 26, cs);
    memoryASet16(ds, di + 28, cx);
    memoryASet16(ds, di + 30, cs);
    ax = 0;
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2a884() // 2a41:0474
{
    al = 0x0d;
    sub_2a88b();
    al = 0x0a;
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ax);
    sub_2a905();
    ax = pop();
    if (al == 0x07)
        goto loc_2a8c2;
    if (al == 0x08)
        goto loc_2a8c9;
    if (al == 0x0d)
        goto loc_2a8d3;
    if (al == 0x0a)
        goto loc_2a8d9;
    ah = 0x09;
    bl = memoryAGet(ds, 0xa12e);
    bh = 0;
    cx = 0x0001;
    push(dx);
    sub_2aa18();
    dx = pop();
    dl++;
    if (dl <= memoryAGet(ds, 0xa132))
        goto loc_2a8dc;
    dl = memoryAGet(ds, 0xa130);
    goto loc_2a8d9;
loc_2a8c2: // 2a41:04b2
    ah = 0x0e;
    sub_2aa18();
    goto loc_2a8dc;
loc_2a8c9: // 2a41:04b9
    if (dl == memoryAGet(ds, 0xa130))
        goto loc_2a8dc;
    dl--;
    goto loc_2a8dc;
loc_2a8d3: // 2a41:04c3
    dl = memoryAGet(ds, 0xa130);
    goto loc_2a8dc;
loc_2a8d9: // 2a41:04c9
    sub_2a8e4();
loc_2a8dc: // 2a41:04cc
    sub_2a90c();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
}
void sub_2a88b() // 2a41:047b
{
    push(bx);
    push(cx);
    push(dx);
    push(es);
    push(ax);
    sub_2a905();
    ax = pop();
    if (al == 0x07)
        goto loc_2a8c2;
    if (al == 0x08)
        goto loc_2a8c9;
    if (al == 0x0d)
        goto loc_2a8d3;
    if (al == 0x0a)
        goto loc_2a8d9;
    ah = 0x09;
    bl = memoryAGet(ds, 0xa12e);
    bh = 0;
    cx = 0x0001;
    push(dx);
    sub_2aa18();
    dx = pop();
    dl++;
    if (dl <= memoryAGet(ds, 0xa132))
        goto loc_2a8dc;
    dl = memoryAGet(ds, 0xa130);
    goto loc_2a8d9;
loc_2a8c2: // 2a41:04b2
    ah = 0x0e;
    sub_2aa18();
    goto loc_2a8dc;
loc_2a8c9: // 2a41:04b9
    if (dl == memoryAGet(ds, 0xa130))
        goto loc_2a8dc;
    dl--;
    goto loc_2a8dc;
loc_2a8d3: // 2a41:04c3
    dl = memoryAGet(ds, 0xa130);
    goto loc_2a8dc;
loc_2a8d9: // 2a41:04c9
    sub_2a8e4();
loc_2a8dc: // 2a41:04cc
    sub_2a90c();
    es = pop();
    dx = pop();
    cx = pop();
    bx = pop();
}
void sub_2a8e4() // 2a41:04d4
{
    dh++;
    if (dh <= memoryAGet(ds, 0xa133))
        goto loc_2a904;
    dh--;
    push(cx);
    push(dx);
    ax = 0x0601;
    bh = memoryAGet(ds, 0xa12e);
    cx = memoryAGet16(ds, 0xa130);
    dx = memoryAGet16(ds, 0xa132);
    sub_2aa18();
    dx = pop();
    cx = pop();
loc_2a904: // 2a41:04f4
    return;
}
void sub_2a905() // 2a41:04f5
{
    ah = 0x03;
    bh = 0;
    goto loc_2aa18;
  // gap 268 bytes
loc_2aa18: // 2a41:0608
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
}
void sub_2a90c() // 2a41:04fc
{
    ah = 0x02;
    bh = 0;
    goto loc_2aa18;
  // gap 261 bytes
loc_2aa18: // 2a41:0608
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
}
void sub_2aa18() // 2a41:0608
{
    push(si);
    push(di);
    push(bp);
    push(es);
    interrupt(0x10);
    es = pop();
    bp = pop();
    di = pop();
    si = pop();
}
void sub_2aa30() // 2aa3:0000 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0001;
    push(ax);
    push(cs);
    sub_2aaf9();
    push(cs);
    sub_2d138();
    ax = 0;
    push(ax);
    push(cs);
    sub_2d2d7();
    ax = 0x0010;
    push(ax);
    push(cs);
    sub_2ab1b();
    ax = 0x000f;
    push(ax);
    push(cs);
    sub_2af7b();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2aaf9() // 2aa3:00c9 +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (al != 0x00)
        goto loc_2ab08;
    al = 0x0d;
    goto loc_2ab15;
  // gap 1 bytes
loc_2ab08: // 2aa3:00d8
    if (al == 0x01)
        goto loc_2ab13;
    ah = 0;
    al = 0x12;
    goto loc_2ab15;
  // gap 1 bytes
loc_2ab13: // 2aa3:00e3
    al = 0x10;
loc_2ab15: // 2aa3:00e5
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2ab1b() // 2aa3:00eb +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    ah = 0;
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2ab29() // 2aa3:00f9 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    bx = memoryAGet16(ss, bp + 6);
    if ((short)bx >= (short)0x0028)
        goto loc_2ab37;
    bx = 0x0028;
loc_2ab37: // 2aa3:0107
    memoryASet16(cs, 0x0060, bx);
    push(ax);
    dx = 0x03d4;
    ax = 0x0013;
    out16(dx, ax);
    dx++;
    ax = bx;
    ax >>= 1;
    out16(dx, ax);
    ax = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2ab4f() // 2aa3:011f +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x03da;
loc_2ab55: // 2aa3:0125
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2ab55;
loc_2ab5a: // 2aa3:012a
    al = in8(dx);
    if (al & 0x08)
        goto loc_2ab5a;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x0060));
    cx = memoryAGet16(ss, bp + 8);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    ax += cx;
    bx = ax;
    al = 0x0c;
    dx = 0x03d4;
    out16(dx, ax);
    al = 0x0d;
    ah = bl;
    out16(dx, ax);
    flags.interrupts = 1;
    dx = 0x03da;
loc_2ab84: // 2aa3:0154
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2ab84;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    al |= 0x10;
    ah = al;
    dx = 0x03c0;
    al = 0x33;
//    out8(dx, al); gaboskip
//    tl = al; al = ah; ah = tl;
//    out8(dx, al);
    flags.interrupts = 1;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2aba2() // 2aa3:0172 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    dx = 0x03da;
loc_2aba8: // 2aa3:0178
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2aba8;
loc_2abad: // 2aa3:017d
    al = in8(dx);
    if (al & 0x08)
        goto loc_2abad;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x0060));
    cx = memoryAGet16(ss, bp + 8);
    cx >>= 1;
    cx >>= 1;
    cx >>= 1;
    ax += cx;
    bx = ax;
    al = 0x0c;
    dx = 0x03d4;
    out16(dx, ax);
    al = 0x0d;
    ah = bl;
    out16(dx, ax);
    flags.interrupts = 1;
    dx = 0x03da;
loc_2abd7: // 2aa3:01a7
    al = in8(dx);
    if (al & 0x08)
        goto loc_2abd7;
    flags.interrupts = 0;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    al |= 0x10;
    ah = al;
    dx = 0x03c0;
    al = 0x33;
//    out8(dx, al); //gaboskip
    tl = al; al = ah; ah = tl;
//    out8(dx, al); //gaboskip
    flags.interrupts = 1;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2abf5() // 2aa3:01c5 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x0040;
    es = ax;
    dx = memoryAGet16(es, 0x0063);
    dl += 0x06;
loc_2ac05: // 2aa3:01d5
    al = in8(dx);
    if (al & 0x08)
        goto loc_2ac05;
loc_2ac0a: // 2aa3:01da
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_2ac0a;
    dl -= 0x06;
    ax = memoryAGet16(ss, bp + 6);
    bh = ah;
    bh &= 0x01;
    cl = 0x04;
    bh <<= cl;
    ah = al;
    al = 0x18;
    out16(dx, ax);
    ah = 0x11;
    ah &= 0xef;
    ah |= bh;
    al = 0x07;
    out16(dx, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2ac31() // 2aa3:0201
{
    push(es);
    ax = 0;
    es = ax;
    dx = 0x03da;
    al = in8(dx);
    goto loc_2ac3c;
loc_2ac3c: // 2aa3:020c
    if (!(al & 0x08))
        goto loc_2ac47;
loc_2ac40: // 2aa3:0210
    al = in8(dx);
    goto loc_2ac43;
loc_2ac43: // 2aa3:0213
    if (al & 0x08)
        goto loc_2ac40;
loc_2ac47: // 2aa3:0217
    al = in8(dx);
    goto loc_2ac4a;
loc_2ac4a: // 2aa3:021a
    if (!(al & 0x08))
        goto loc_2ac47;
    es = pop();
    cs = pop();
}
void sub_2ac50() // 2aa3:0220 +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(cs);
    sub_2ac31();
    push(es);
    ax = 0;
    es = ax;
    dx = 0x03d4;
    al = 0x18;
    out8(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    out8(dx, al);
    dx--;
    al = 0x07;
    out8(dx, al);
    dx++;
    al = in8(dx);
    bl = memoryAGet(ss, bp + 7);
    bl &= 0x01;
    cl = 0x04;
    bl <<= cl;
    al &= 0xef;
    al |= bl;
    out8(dx, al);
    dx--;
    al = 0x09;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xbf;
    out8(dx, al);
    goto loc_2ac88;
  // gap 1 bytes
loc_2ac88: // 2aa3:0258
    es = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2ac8d() // 2aa3:025d +far +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ah = 0x10;
    al = 0x01;
    bx = memoryAGet16(ss, bp + 6);
    bh = bl;
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2aca8() // 2aa3:0278 +far +stackDrop6
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = 0x1000;
    bl = memoryAGet(ss, bp + 8);
    bh = memoryAGet(ss, bp + 6);
    interrupt(0x10);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2adcb() // 2aa3:039b +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x0060);
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x00b8);
    if (al == 0x00)
        goto loc_2ae06;
    cx = ax;
loc_2ae00: // 2aa3:03d0
    bx += 0x2000;
    if (--cx)
        goto loc_2ae00;
loc_2ae06: // 2aa3:03d6
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2ae0f: // 2aa3:03df
    dx = 0x03ce;
    ds = ds ? ds : loadAddress;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += di;
    if (--cx)
        goto loc_2ae0f;
     
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2ae75() // 2aa3:0445 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(cs, 0x00b8);
    if (dl == 0x00)
        goto loc_2ae98;
    cx = ax;
loc_2ae92: // 2aa3:0462
    bx += 0x2000;
    if (--cx)
        goto loc_2ae92;
loc_2ae98: // 2aa3:0468
    dx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = dx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2aeb5: // 2aa3:0485
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = 0x08;
    tl = al; al = ah; ah = tl;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += memoryAGet16(cs, 0x0060);
    if (--cx)
        goto loc_2aeb5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2af7b() // 2aa3:054b +nearfar +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x00ba, ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2b144() // 2aa3:0714 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 12);
    dx = memoryAGet16(cs, 0x00b8);
    if (dl == 0x00)
        goto loc_2b162;
    cx = ax;
loc_2b15c: // 2aa3:072c
    bx += 0x2000;
    if (--cx)
        goto loc_2b15c;
loc_2b162: // 2aa3:0732
    ax = memoryAGet16(ss, bp + 8);
    push(di);
    push(ax);
    ax = ax;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    dx = di;
    di = pop();
    ax = dx;
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx++;
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(cs, 0x0712, ax);
loc_2b186: // 2aa3:0756
    cx = memoryAGet16(ss, bp + 10);
loc_2b189: // 2aa3:0759
    dx = 0x03c5;
    ax = memoryAGet16(cs, 0x00ba);
    dx = 0x03c5;
    out8(dx, al);
    ax = 0x00ff;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ax = memoryAGet16(cs, 0x00ba);
    ax ^= 0x00ff;
    dx = 0x03c5;
    out8(dx, al);
    ax = 0x0000;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    if (--cx)
        goto loc_2b189;
    bx += memoryAGet16(cs, 0x0060);
    bx -= memoryAGet16(ss, bp + 10);
    memoryASet16(cs, 0x0712, memoryAGet16(cs, 0x0712) - 1);
    if (memoryAGet16(cs, 0x0712) == 0x0000)
        goto loc_2b1c5;
    goto loc_2b186;
loc_2b1c5: // 2aa3:0795
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2c0eb() // 2aa3:16bb +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    ax = memoryAGet16(ss, bp + 8);
    ax -= memoryAGet16(ss, bp + 12);
    push(ax);
    ax = memoryAGet16(ss, bp + 6);
    ax -= memoryAGet16(ss, bp + 10);
    ax++;
    push(ax);
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 10);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 12);
    bx += ax;
    ax = memoryAGet16(cs, 0x00b8);
    if (al == 0x00)
        goto loc_2c12c;
    cx = ax;
loc_2c126: // 2aa3:16f6
    bx += 0x2000;
    if (--cx)
        goto loc_2c126;
loc_2c12c: // 2aa3:16fc
    push(es);
    ds = pop();
    si = bx;
    di = memoryAGet16(ss, bp + 14); es = memoryAGet16(ss, bp + 14 + 2); /*ggg2*/;
    ax = pop();
    memoryASet16(cs, 0x0054, ax);
    stosw<ES_DI>(ax);
    ax = pop();
    memoryASet16(cs, 0x0056, ax);
    stosw<ES_DI>(ax);
    al = 0xff;
    stosb<ES_DI>(al);
    dx = 0x03ce;
    ax = 0x0005;
    out16(dx, ax);
    ax = 0x0304;
loc_2c14d: // 2aa3:171d
    out16(dx, ax);
    push(ax);
    push(memoryAGet16(cs, 0x0054));
    push(si);
loc_2c155: // 2aa3:1725
    bx = memoryAGet16(cs, 0x0056);
    push(si);
loc_2c15b: // 2aa3:172b
    al = lodsb<DS_SI>();
    stosb<ES_DI>(al);
    bx--;
    if (bx)
        goto loc_2c15b;
    si = pop();
    si += memoryAGet16(cs, 0x0060);
    memoryASet16(cs, 0x0054, memoryAGet16(cs, 0x0054) - 1);
    if (memoryAGet16(cs, 0x0054))
        goto loc_2c155;
    si = pop();
    memoryASet16(cs, 0x0054, pop());
    ax = pop();
    ah--;
    if ((char)ah >= 0)
        goto loc_2c14d;
    ax = di;
    ax -= memoryAGet16(ss, bp + 14);
    di = pop();
    si = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_2c187() // 2aa3:1757 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    ax = lodsw<DS_SI>();
    memoryASet16(cs, 0x0054, ax);
    ax = lodsw<DS_SI>();
    memoryASet16(cs, 0x0056, ax);
    al = lodsb<DS_SI>();
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x00b8);
    if (al == 0x00)
        goto loc_2c1c7;
    cx = ax;
loc_2c1c1: // 2aa3:1791
    bx += 0x2000;
    if (--cx)
        goto loc_2c1c1;
loc_2c1c7: // 2aa3:1797
    di = bx;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    ax = 0x0008;
loc_2c1d5: // 2aa3:17a5
    out8(dx, al);
    ax >>= 1;
    push(ax);
    push(memoryAGet16(cs, 0x0054));
    push(di);
loc_2c1df: // 2aa3:17af
    bx = memoryAGet16(cs, 0x0056);
loc_2c1e4: // 2aa3:17b4
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, di); memoryASet(es, di, al); al = tl;
    di++;
    bx--;
    if (bx)
        goto loc_2c1e4;
    di += memoryAGet16(cs, 0x0060);
    di -= memoryAGet16(cs, 0x0056);
    memoryASet16(cs, 0x0054, memoryAGet16(cs, 0x0054) - 1);
    if (memoryAGet16(cs, 0x0054))
        goto loc_2c1df;
    di = pop();
    memoryASet16(cs, 0x0054, pop());
    ax = pop();
    if ((short)ax > (short)0x0000)
        goto loc_2c1d5;
    ax = si;
    ax -= memoryAGet16(ss, bp + 14);
    di = pop();
    si = pop();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2c34f() // 2aa3:191f +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    di = memoryAGet16(cs, 0x0060);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    cl = 0x03;
    bx >>= cl;
    bx += ax;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    memoryASet(cs, 0x17e9, al);
    al = 0x08;
    al -= memoryAGet(cs, 0x17e9);
    memoryASet(cs, 0x17ea, al);
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2c39d: // 2aa3:196d
    memoryASet(cs, 0x17e8, 0x02);
loc_2c3a3: // 2aa3:1973
    ds = ds ? ds : loadAddress;
    dl = memoryAGet(cs, 0x17e8);
    dl--;
    memoryASet(cs, 0x17e8, dl);
    push(cx);
    push(di);
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    ah = al;
    di = ax;
    cl = memoryAGet(cs, 0x17e9);
    ah >>= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    ch = 0x01;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ec, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ed, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ee, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ef, al);
    al >>= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    goto loc_2c409;
  // gap 1 bytes
loc_2c405: // 2aa3:19d5
    goto loc_2c39d;
loc_2c407: // 2aa3:19d7
    goto loc_2c3a3;
loc_2c409: // 2aa3:19d9
    bx++;
    dx = 0x03ce;
    ax = di;
    cl = memoryAGet(cs, 0x17ea);
    ah <<= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    ch = 0x01;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ec);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ed);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ee);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    ch <<= 1;
    al = ch;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ef);
    al <<= cl;
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    di = pop();
    cx = pop();
    dl = memoryAGet(cs, 0x17e8);
    if ((char)dl > (char)0x00)
        goto loc_2c407;
    bx += di;
    if (--cx)
        goto loc_2c405;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    di = pop();
    si = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2c47d() // 2aa3:1a4d +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    cx = memoryAGet16(ss, bp + 8);
    cx &= 0x0007;
    cl ^= 0x07;
    cl++;
    memoryASet(cs, 0x1a4c, cl);
    bx = memoryAGet16(ss, bp + 8);
    bx >>= 1;
    bx >>= 1;
    bx >>= 1;
    bx += ax;
    ax = memoryAGet16(cs, 0x00b8);
    if (al == 0x00)
        goto loc_2c4c8;
    cx = ax;
loc_2c4c2: // 2aa3:1a92
    bx += 0x2000;
    if (--cx)
        goto loc_2c4c2;
loc_2c4c8: // 2aa3:1a98
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2c4d1: // 2aa3:1aa1
    push(cx);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1a4c);
    ax = rol16(ax, cl);
    memoryASet(cs, 0x1a48, ah);
    memoryASet(cs, 0x1a49, al);
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1a4c);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1a48);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1a49);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    dx = 0x03c5;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1a4c);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1a48);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1a49);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    goto loc_2c53e;
  // gap 1 bytes
loc_2c53c: // 2aa3:1b0c
    goto loc_2c4d1;
loc_2c53e: // 2aa3:1b0e
    dx = 0x03c5;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1a4c);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1a48);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1a49);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    dx = 0x03c5;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    ah = 0x00;
    cl = memoryAGet(cs, 0x1a4c);
    ax = rol16(ax, cl);
    cx = ax;
    dx = 0x03ce;
    al = 0x08;
    ah = memoryAGet(cs, 0x1a48);
    out16(dx, ax);
    tl = memoryAGet(es, bx); memoryASet(es, bx, ch); ch = tl;
    ah = memoryAGet(cs, 0x1a49);
    out16(dx, ax);
    tl = memoryAGet(es, bx + 1); memoryASet(es, bx + 1, cl); cl = tl;
    bx += memoryAGet16(cs, 0x0060);
    cx = pop();
    if (--cx)
        goto loc_2c53c;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2cdb9() // 2aa3:2389 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(si);
    push(di);
    di = memoryAGet16(cs, 0x0060);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    cl = 0x03;
    bx >>= cl;
    bx += ax;
    ax = memoryAGet16(ss, bp + 8);
    ax &= 0x0007;
    memoryASet(cs, 0x17e9, al);
    al = 0x08;
    al -= memoryAGet(cs, 0x17e9);
    memoryASet(cs, 0x17ea, al);
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2ce07: // 2aa3:23d7
    memoryASet(cs, 0x17e8, 0x02);
loc_2ce0d: // 2aa3:23dd
    dl = memoryAGet(cs, 0x17e8);
    dl--;
    memoryASet(cs, 0x17e8, dl);
    push(cx);
    dx = 0x03ce;
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17eb, al);
    ah = memoryAGet(cs, 0x17eb);
    cl = memoryAGet(cs, 0x17e9);
    ah >>= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ec, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ed, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ee, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = lodsb<DS_SI>();
    memoryASet(cs, 0x17ef, al);
    al >>= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    goto loc_2ce7b;
  // gap 1 bytes
loc_2ce77: // 2aa3:2447
    goto loc_2ce07;
loc_2ce79: // 2aa3:2449
    goto loc_2ce0d;
loc_2ce7b: // 2aa3:244b
    bx++;
    dx = 0x03ce;
    ah = memoryAGet(cs, 0x17eb);
    cl = memoryAGet(cs, 0x17ea);
    ah <<= cl;
    al = 0x08;
    out16(dx, ax);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ec);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ed);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ee);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    al = 0x0f;
    out8(dx, al);
    al = memoryAGet(cs, 0x17ef);
    al <<= cl;
    ah = memoryAGet(es, bx);
    memoryASet(es, bx, memoryAGet(es, bx) | al);
    cx = pop();
    dl = memoryAGet(cs, 0x17e8);
    if ((char)dl > (char)0x00)
        goto loc_2ce79;
    bx += di;
    if (--cx)
        goto loc_2ce77;
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    di = pop();
    si = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d138() // 2aa3:2708
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(di);
    push(si);
    push(ds);
    push(es);
    push(cs);
    ds = pop();
    push(bp);
    ax = 0x1130;
    bx = 0x0200;
    interrupt(0x10);
    ax = bp;
    bp = pop();
    memoryASet16(cs, 0x2605, ax);
    memoryASet16(cs, 0x2607, es);
    memoryASet16(cs, 0x2609, 0x000e);
    push(bp);
    ax = 0x1130;
    bx = 0x0300;
    interrupt(0x10);
    ax = bp;
    bp = pop();
    memoryASet16(cs, 0x25ff, ax);
    memoryASet16(cs, 0x2601, es);
    memoryASet16(cs, 0x2603, 0x0008);
    es = pop();
    ds = pop();
    si = pop();
    di = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2d2d7() // 2aa3:28a7 +stackDrop4
{
    sp -= 2;
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    if (ax == 0x0001)
        goto loc_2d2fd;
    ax = memoryAGet16(cs, 0x2605);
    memoryASet16(cs, 0x25f5, ax);
    ax = memoryAGet16(cs, 0x2607);
    memoryASet16(cs, 0x25f7, ax);
    ax = memoryAGet16(cs, 0x2609);
    memoryASet16(cs, 0x25f9, ax);
    goto loc_2d315;
  // gap 1 bytes
loc_2d2fd: // 2aa3:28cd
    ax = memoryAGet16(cs, 0x25ff);
    memoryASet16(cs, 0x25f5, ax);
    ax = memoryAGet16(cs, 0x2601);
    memoryASet16(cs, 0x25f7, ax);
    ax = memoryAGet16(cs, 0x2603);
    memoryASet16(cs, 0x25f9, ax);
loc_2d315: // 2aa3:28e5
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2d3f5() // 2aa3:29c5 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x0060);
    di--;
    di--;
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = bx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx = memoryAGet16(ss, bp + 8);
    bx += ax;
    ax = memoryAGet16(cs, 0x00b8);
    if (al == 0x00)
        goto loc_2d431;
    cx = ax;
loc_2d42b: // 2aa3:29fb
    bx += 0x2000;
    if (--cx)
        goto loc_2d42b;
loc_2d431: // 2aa3:2a01
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0010;
loc_2d43a: // 2aa3:2a0a
    ds = ds ? ds : loadAddress;
    al = lodsb<DS_SI>();
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    al = lodsb<DS_SI>();
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx++;
    bx += di;
    if (--cx)
        goto loc_2d43a;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d48e() // 2aa3:2a5e +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    push(di);
    push(si);
    di = memoryAGet16(cs, 0x0060);
    si = memoryAGet16(ss, bp + 10); ds = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    dx = 0xa000;
    es = dx;
    bx = memoryAGet16(ss, bp + 8);
    dx = memoryAGet16(cs, 0x00b8);
    if (dl == 0x00)
        goto loc_2d4b6;
    cx = ax;
loc_2d4b0: // 2aa3:2a80
    bx += 0x2000;
    if (--cx)
        goto loc_2d4b0;
loc_2d4b6: // 2aa3:2a86
    dx = memoryAGet16(ss, bp + 6);
    push(di);
    push(ax);
    ax = dx;
    mul16(memoryAGet16(cs, 0x0060));
    di = ax;
    ax = pop();
    ax = di;
    di = pop();
    bx += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    cx = 0x0008;
loc_2d4d3: // 2aa3:2aa3
    al = lodsb<DS_SI>();
    dx = 0x03c5;
    al = 0x01;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x02;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x04;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    al = 0x08;
    out8(dx, al);
    al = lodsb<DS_SI>();
    tl = memoryAGet(es, bx); memoryASet(es, bx, al); al = tl;
    bx += di;
    if (--cx)
        goto loc_2d4d3;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    ax = 0xff08;
    out16(dx, ax);
    si = pop();
    di = pop();
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d825() // 2aa3:2df5 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    ax = memoryAGet16(ss, bp + 10);
    mul16(memoryAGet16(cs, 0x0060));
    si = memoryAGet16(ss, bp + 12);
    si += ax;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x0060));
    di = memoryAGet16(ss, bp + 8);
    di += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    ax = memoryAGet16(cs, 0x0060);
    ax -= 0x0028;
    bx = 0x00c8;
loc_2d86c: // 2aa3:2e3c
    cx = 0x0028;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    bx--;
    if ((short)bx > (short)0x0000)
        goto loc_2d86c;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2d888() // 2aa3:2e58 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    si = 0x0028;
    di = 0x0000;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    ax = 0x0028;
    bx = 0x0008;
loc_2d8b7: // 2aa3:2e87
    cx = 0x0028;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    bx--;
    if ((short)bx > (short)0x0000)
        goto loc_2d8b7;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2d8d1() // 2aa3:2ea1 +far
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(si);
    push(di);
    push(ds);
    dx = 0xa000;
    es = dx;
    ds = dx;
    ax = memoryAGet16(ss, bp + 10);
    mul16(memoryAGet16(cs, 0x0060));
    si = memoryAGet16(ss, bp + 12);
    si += ax;
    ax = memoryAGet16(ss, bp + 6);
    mul16(memoryAGet16(cs, 0x0060));
    di = memoryAGet16(ss, bp + 8);
    di += ax;
    dx = 0x03c4;
    al = 0x02;
    out8(dx, al);
    dx = 0x03c5;
    al = 0x0f;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = 0x01;
    out8(dx, al);
    ax = memoryAGet16(cs, 0x0060);
    ax--;
    ax--;
    cx = 0x0010;
loc_2d917: // 2aa3:2ee7
    movsb<ES_DI, DS_SI>();
    movsb<ES_DI, DS_SI>();
    si += ax;
    di += ax;
    if (--cx)
        goto loc_2d917;
    dx = 0x03cf;
    al = 0x00;
    out8(dx, al);
    ds = pop();
    di = pop();
    si = pop();
    bp = pop();
    sp += 2;
    cs = pop();
}
void sub_2d99b() // 2d99:000b +far
{
    sp -= 2;
    push(bp);
    push(ds);
    bp = sp;
    push(flagAsReg());
    bx = 0x0045;
    push(cs);
    push(bx);
    bx = 0;
    ds = bx;
    bl = memoryAGet(ss, bp + 12);
    bx <<= 1;
    bx <<= 1;
    {int tmp1 = memoryAGet16(ds, bx); int tmp2 = memoryAGet16(ds, bx + 2); bx = tmp1; ds = tmp2; /*ggg2!!check*/};
    push(ds);
    push(bx);
    si = memoryAGet16(ss, bp + 8); ds = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    flags.direction = 0;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    bx = ax;
    ax = lodsw<DS_SI>();
    cx = ax;
    ax = lodsw<DS_SI>();
    dx = ax;
    ax = lodsw<DS_SI>();
    bp = ax;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    di = ax;
    ax = lodsw<DS_SI>();
    push(ax);
    ax = lodsw<DS_SI>();
    es = ax;
    ds = pop();
    si = pop();
    ax = pop();
    flags.interrupts = 0;
//    stop("stack_unbalanced");
//    sp += 2;
//    cs = pop();
    int newOfs = pop(); // reads 0000:0040 - video int https://www.fysnet.net/rombios.htm
    int newSeg = pop(); // ds:bx = f000:1320
    //printf("stack modify %04x:%04x, ah=%02x\n", newSeg, newOfs, ah);
    // calls int 10 video op : f000:1320    EGA api call
    interrupt(0x10);
    // 2d99:0045 continues
    sp += 6;
    sub_2d9d5();
}
void sub_2d9d5() // 2d99:0045 +stackDrop8
{
//    sp -= 2;
    push(flagAsReg());
    push(es);
    push(di);
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 16); es = memoryAGet16(ss, bp + 16 + 2); /*ggg2*/;
    flags.direction = 0;
    stosw<ES_DI>(ax);
    ax = bx;
    stosw<ES_DI>(ax);
    ax = cx;
    stosw<ES_DI>(ax);
    ax = dx;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = si;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = ds;
    stosw<ES_DI>(ax);
    ax = pop();
    stosw<ES_DI>(ax);
    ax = pop();
//    stop("stack_below");
    stosw<ES_DI>(ax);
    ds = pop();
    bp = pop();
//    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2d9fc() // 2d99:006c +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    al = memoryAGet(ss, bp + 10);
    ah = 0x35;
    interrupt(0x21);
    ax = es;
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    flags.direction = 0;
    tx = bx; bx = ax; ax = tx;
    stosw<ES_DI>(ax);
    tx = bx; bx = ax; ax = tx;
    stosw<ES_DI>(ax);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2da14() // 2d99:0084 +far +stackDrop8
{
    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    al = memoryAGet(ss, bp + 10);
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2da30() // 2da3:0000 +far
{
    sp -= 2;
    dx = 0x2ec1;
    ds = dx;
    memoryASet16(ds, 0x02a0, es);
    bp = 0;
    ax = sp;
    ax += 0x0013;
    cl = 0x04;
    ax >>= cl;
    dx = ss;
    ax += dx;
    memoryASet16(ds, 0x0278, ax);
    memoryASet16(ds, 0x027a, ax);
    ax += memoryAGet16(ds, 0x0272);
    memoryASet16(ds, 0x027c, ax);
    memoryASet16(ds, 0x0286, ax);
    memoryASet16(ds, 0x028a, ax);
    ax = memoryAGet16(es, 0x0002);
    ax -= 0x1000;
    memoryASet16(ds, 0x028e, ax);
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2da70: // 2da3:0040
    al = lodsb<CS_SI>();
    ah = 0x35;
    interrupt(0x21);
    memoryASet16(ds, di, bx);
    memoryASet16(ds, di + 2, es);
    di += 0x0004;
    if (--cx)
        goto loc_2da70;
    push(ds);
    push(cs);
    ds = pop();
    dx = 0x00ce;
    ax = 0x2500;
    interrupt(0x21);
    dx = 0x00d5;
    ax = 0x2523;
    interrupt(0x21);
    dx = 0x009d;
    ax = 0x2524;
    interrupt(0x21);
    dx = 0x00c6;
    ax = 0x253f;
    interrupt(0x21);
    ds = pop();
    ax = 0xa13c;
    push(ds);
    push(ax);
    push(ds);
    push(ax);
    ax = 0x0206;
    push(cs);
    push(ax);
    push(cs);
    sub_2e5d2();
    push(cs);
    sub_2e642();
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(ds);
    push(ax);
    ax = 0x0206;
    push(cs);
    push(ax);
    push(cs);
    sub_2e5d2();
    push(cs);
    sub_2e647();
    sp += 2;
    cs = pop();
}
void sub_2db08() // 2da3:00d8 +far
{
    cx = 0;
    bx = 0;
    dx = 0x2ec1;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x029a, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2db3a;
    ax = memoryAGet16(ds, 0x027e);
loc_2db1e: // 2da3:00ee
    if (!ax)
        goto loc_2db33;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2db31;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2db1e;
loc_2db31: // 2da3:0101
    bx = es;
loc_2db33: // 2da3:0103
    bx -= memoryAGet16(ds, 0x02a0);
    bx -= 0x0010;
loc_2db3a: // 2da3:010a
    memoryASet16(ds, 0x029c, cx);
    memoryASet16(ds, 0x029e, bx);
    bx = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2db5f;
    ax = 0;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, ax);
    memoryASet16(ds, 0x02a4, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    cs = pop();
    return;
loc_2db5f: // 2da3:012f
    ax = 0xa13c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2db7c: // 2da3:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2db7c;
    ax = memoryAGet16(ds, 0x029c);
    ax |= memoryAGet16(ds, 0x029e);
    if (!ax)
        goto loc_2dbbd;
    bx = 0x01ef;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029a);
    sub_2dbd2();
    bx = 0x01fe;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029e);
    sub_2dbec();
    al = 0x3a;
    sub_2dc06();
    ax = memoryAGet16(ds, 0x029c);
    sub_2dbec();
    bx = 0x0203;
    sub_2dbc4();
loc_2dbbd: // 2da3:018d
    ax = memoryAGet16(ds, 0x029a);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_2dbc4() // 2da3:0194
{
loc_2dbc4: // 2da3:0194
    al = memoryAGet(cs, bx);
    if (!al)
        goto loc_2dbd1;
    sub_2dc06();
    bx++;
    goto loc_2dbc4;
loc_2dbd1: // 2da3:01a1
    return;
}
void sub_2dbd2() // 2da3:01a2
{
    cl = 0x64;
    sub_2dbde();
    cl = 0x0a;
    sub_2dbde();
    goto loc_2dbe2;
  // gap 4 bytes
loc_2dbe2: // 2da3:01b2
    al += 0x30;
    push(ax);
    sub_2dc06();
    ax = pop();
    al = ah;
}
void sub_2dbde() // 2da3:01ae
{
    ah = 0;
    div8(cl);
    al += 0x30;
    push(ax);
    sub_2dc06();
    ax = pop();
    al = ah;
}
void sub_2dbec() // 2da3:01bc
{
    push(ax);
    al = ah;
    sub_2dbf3();
    ax = pop();
    push(ax);
    cl = 0x04;
    al >>= cl;
    sub_2dbfe();
    ax = pop();
    al &= 0x0f;
    al += 0x30;
    if (al < 0x3a)
        goto loc_2dc06;
    al += 0x07;
loc_2dc06: // 2da3:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
}
void sub_2dbf3() // 2da3:01c3
{
    push(ax);
    cl = 0x04;
    al >>= cl;
    sub_2dbfe();
    ax = pop();
    al &= 0x0f;
    al += 0x30;
    if (al < 0x3a)
        goto loc_2dc06;
    al += 0x07;
loc_2dc06: // 2da3:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
}
void sub_2dbfe() // 2da3:01ce
{
    al += 0x30;
    if (al < 0x3a)
        goto loc_2dc06;
    al += 0x07;
loc_2dc06: // 2da3:01d6
    dl = al;
    ah = 0x06;
    interrupt(0x21);
}
void sub_2dc06() // 2da3:01d6
{
    dl = al;
    ah = 0x06;
    interrupt(0x21);
}
void sub_2dc37() // 2da3:0207 +far
{
    ax = 0;
    tx = memoryAGet16(ds, 0x02a4); memoryASet16(ds, 0x02a4, ax); ax = tx;
    cs = pop();
}
void sub_2dc3e() // 2da3:020e +far
{
    goto loc_2dc3e;
loc_2db01: // 2da3:00d1
    cx = pop();
    stop("stack_below");
    bx = pop();
    goto loc_2db0c;
  // gap 7 bytes
loc_2db0c: // 2da3:00dc
    dx = 0x2ec1;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x029a, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2db3a;
    ax = memoryAGet16(ds, 0x027e);
loc_2db1e: // 2da3:00ee
    if (!ax)
        goto loc_2db33;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2db31;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2db1e;
loc_2db31: // 2da3:0101
    bx = es;
loc_2db33: // 2da3:0103
    bx -= memoryAGet16(ds, 0x02a0);
    bx -= 0x0010;
loc_2db3a: // 2da3:010a
    memoryASet16(ds, 0x029c, cx);
    memoryASet16(ds, 0x029e, bx);
    bx = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2db5f;
    ax = 0;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, ax);
    memoryASet16(ds, 0x02a4, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    cs = pop();
    return;
loc_2db5f: // 2da3:012f
    ax = 0xa13c;
    stop("stack_below");
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2db7c: // 2da3:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2db7c;
    ax = memoryAGet16(ds, 0x029c);
    ax |= memoryAGet16(ds, 0x029e);
    if (!ax)
        goto loc_2dbbd;
    bx = 0x01ef;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029a);
    sub_2dbd2();
    bx = 0x01fe;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029e);
    sub_2dbec();
    al = 0x3a;
    sub_2dc06();
    ax = memoryAGet16(ds, 0x029c);
    sub_2dbec();
    bx = 0x0203;
    sub_2dbc4();
loc_2dbbd: // 2da3:018d
    ax = memoryAGet16(ds, 0x029a);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
  // gap 122 bytes
loc_2dc3e: // 2da3:020e
    if (memoryAGet16(ds, 0x02a4) != 0x0000)
        goto loc_2dc46;
    cs = pop();
    return;
loc_2dc46: // 2da3:0216
    ax = memoryAGet16(ds, 0x02a4);
    goto loc_2db01;
}
void sub_2dc8d() // 2da3:025d +far +stackDrop12
{
    sp -= 2;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 10); ds = memoryAGet16(ss, bx + 10 + 2); /*ggg2*/;
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(ss, bx + 4);
    flags.direction = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_2dca9() // 2da3:0279 +far
{
    si = ax;
    di = dx;
    mul16(cx);
    push(ax);
    push(dx);
    ax = si;
    mul16(bx);
    bx = ax;
    ax = di;
    mul16(cx);
    cx = ax;
    dx = pop();
    ax = pop();
    dx += bx;
    dx += cx;
    cs = pop();
}
void sub_2dcc4() // 2da3:0294 +far
{
    bool temp_cf;

    goto loc_2dcc4;
loc_2db01: // 2da3:00d1
    cx = pop();
    stop("stack_below");
    bx = pop();
    goto loc_2db0c;
  // gap 7 bytes
loc_2db0c: // 2da3:00dc
    dx = 0x2ec1;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x029a, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2db3a;
    ax = memoryAGet16(ds, 0x027e);
loc_2db1e: // 2da3:00ee
    if (!ax)
        goto loc_2db33;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2db31;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2db1e;
loc_2db31: // 2da3:0101
    bx = es;
loc_2db33: // 2da3:0103
    bx -= memoryAGet16(ds, 0x02a0);
    bx -= 0x0010;
loc_2db3a: // 2da3:010a
    memoryASet16(ds, 0x029c, cx);
    memoryASet16(ds, 0x029e, bx);
    bx = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2db5f;
    ax = 0;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, ax);
    memoryASet16(ds, 0x02a4, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    cs = pop();
    return;
loc_2db5f: // 2da3:012f
    ax = 0xa13c;
    stop("stack_below");
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2db7c: // 2da3:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2db7c;
    ax = memoryAGet16(ds, 0x029c);
    ax |= memoryAGet16(ds, 0x029e);
    if (!ax)
        goto loc_2dbbd;
    bx = 0x01ef;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029a);
    sub_2dbd2();
    bx = 0x01fe;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029e);
    sub_2dbec();
    al = 0x3a;
    sub_2dc06();
    ax = memoryAGet16(ds, 0x029c);
    sub_2dbec();
    bx = 0x0203;
    sub_2dbc4();
loc_2dbbd: // 2da3:018d
    ax = memoryAGet16(ds, 0x029a);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
  // gap 256 bytes
loc_2dcc4: // 2da3:0294
    push(bp);
    bp = cx;
    bp |= bx;
    if (!bp)
        goto loc_2dd2b;
    push(flagAsReg());
    if ((short)bx >= 0)
        goto loc_2dcda;
    cx = ~cx;
    bx = ~bx;
    flags.carry = (cx + 0x0001) >= 0x10000;
    cx += 0x0001;
    bx += 0x0000 + flags.carry;
loc_2dcda: // 2da3:02aa
    push(flagAsReg());
    if ((short)dx >= 0)
        goto loc_2dce9;
    ax = ~ax;
    dx = ~dx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
loc_2dce9: // 2da3:02b9
    si = cx;
    di = bx;
    cx = 0;
    flags.carry = 0;
    bx = 0;
    bp = 0x0021;
loc_2dcf4: // 2da3:02c4
    cx = rcl16(cx, 0x0001);
    bx = rcl16(bx, 0x0001);
    flags.carry = cx < si;
    cx -= si;
    temp_cf = bx < di + flags.carry;
    bx = bx - di - flags.carry;
    flags.carry = temp_cf;
    if (!flags.carry)
        goto loc_2dd02;
    flags.carry = (cx + si) >= 0x10000;
    cx += si;
    temp_cf = (bx + di + flags.carry) >= 0x10000;
    bx += di + flags.carry;
    flags.carry = temp_cf;
loc_2dd02: // 2da3:02d2
    flags.carry = !flags.carry;
    ax = rcl16(ax, 0x0001);
    dx = rcl16(dx, 0x0001);
    bp--;
    if (bp)
        goto loc_2dcf4;
    flagsFromReg(pop());
    if (!flags.sign)
        goto loc_2dd1c;
    cx = ~cx;
    bx = ~bx;
    flags.carry = (cx + 0x0001) >= 0x10000;
    cx += 0x0001;
    bx += 0x0000 + flags.carry;
    flagsFromReg(pop());
    if (!flags.sign)
        goto loc_2dd1f;
    goto loc_2dd29;
loc_2dd1c: // 2da3:02ec
    flagsFromReg(pop());
    if (!flags.sign)
        goto loc_2dd29;
loc_2dd1f: // 2da3:02ef
    ax = ~ax;
    dx = ~dx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
loc_2dd29: // 2da3:02f9
    bp = pop();
    stop("stack_unbalanced");
    cs = pop();
    return;
loc_2dd2b: // 2da3:02fb
    bp = pop();
    ax = 0x00c8;
    goto loc_2db01;
}
void sub_2dd59() // 2da3:0329 +far +stackDrop8
{
    sp -= 2;
    goto loc_2dd59;
loc_2db01: // 2da3:00d1
    cx = pop();
    stop("stack_below");
    bx = pop();
    goto loc_2db0c;
  // gap 7 bytes
loc_2db0c: // 2da3:00dc
    dx = 0x2ec1;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x029a, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2db3a;
    ax = memoryAGet16(ds, 0x027e);
loc_2db1e: // 2da3:00ee
    if (!ax)
        goto loc_2db33;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2db31;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2db1e;
loc_2db31: // 2da3:0101
    bx = es;
loc_2db33: // 2da3:0103
    bx -= memoryAGet16(ds, 0x02a0);
    bx -= 0x0010;
loc_2db3a: // 2da3:010a
    memoryASet16(ds, 0x029c, cx);
    memoryASet16(ds, 0x029e, bx);
    bx = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2db5f;
    ax = 0;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, ax);
    memoryASet16(ds, 0x02a4, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    return;
loc_2db5f: // 2da3:012f
    ax = 0xa13c;
    stop("stack_below");
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2db7c: // 2da3:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2db7c;
    ax = memoryAGet16(ds, 0x029c);
    ax |= memoryAGet16(ds, 0x029e);
    if (!ax)
        goto loc_2dbbd;
    bx = 0x01ef;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029a);
    sub_2dbd2();
    bx = 0x01fe;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029e);
    sub_2dbec();
    al = 0x3a;
    sub_2dc06();
    ax = memoryAGet16(ds, 0x029c);
    sub_2dbec();
    bx = 0x0203;
    sub_2dbc4();
loc_2dbbd: // 2da3:018d
    ax = memoryAGet16(ds, 0x029a);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
  // gap 405 bytes
loc_2dd59: // 2da3:0329
    push(bp);
    bp = sp;
loc_2dd5c: // 2da3:032c
    ax = memoryAGet16(ss, bp + 6);
    sub_2de76();
    if (!flags.carry)
        goto loc_2dd7f;
    ax = memoryAGet16(ds, 0x0292);
    ax |= memoryAGet16(ds, 0x0294);
    if (!ax)
        goto loc_2dd8d;
    push(memoryAGet16(ss, bp + 6));
    push(cs); cs = memoryAGet16(ds, 0x0292 + 2); callIndirect(cs, memoryAGet16(ds, 0x0292)); assert(cs == 0x2da3); // 2da3:0340;
    if (!ax)
        goto loc_2dd8d;
    ax--;
    if (ax)
        goto loc_2dd5c;
    cx = 0;
    bx = 0;
loc_2dd7f: // 2da3:034f
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    memoryASet16(es, di, cx);
    memoryASet16(es, di + 2, bx);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
    return;
loc_2dd8d: // 2da3:035d
    bp = pop();
    ax = 0x00cb;
    goto loc_2db01;
}
void sub_2dd94() // 2da3:0364 +far +stackDrop8
{
    sp -= 2;
    goto loc_2dd94;
loc_2db01: // 2da3:00d1
    cx = pop();
    stop("stack_below");
    bx = pop();
    goto loc_2db0c;
  // gap 7 bytes
loc_2db0c: // 2da3:00dc
    dx = 0x2ec1;
    ds = dx;
    flags.interrupts = 1;
    memoryASet16(ds, 0x029a, ax);
    ax = cx;
    ax |= bx;
    if (!ax)
        goto loc_2db3a;
    ax = memoryAGet16(ds, 0x027e);
loc_2db1e: // 2da3:00ee
    if (!ax)
        goto loc_2db33;
    es = ax;
    if (bx == memoryAGet16(es, 0x0010))
        goto loc_2db31;
    ax = memoryAGet16(es, 0x0014);
    goto loc_2db1e;
loc_2db31: // 2da3:0101
    bx = es;
loc_2db33: // 2da3:0103
    bx -= memoryAGet16(ds, 0x02a0);
    bx -= 0x0010;
loc_2db3a: // 2da3:010a
    memoryASet16(ds, 0x029c, cx);
    memoryASet16(ds, 0x029e, bx);
    bx = memoryAGet16(ds, 0x0296); es = memoryAGet16(ds, 0x0296 + 2); /*ggg2*/;
    ax = es;
    ax |= bx;
    if (!ax)
        goto loc_2db5f;
    ax = 0;
    memoryASet16(ds, 0x0296, ax);
    memoryASet16(ds, 0x0298, ax);
    memoryASet16(ds, 0x02a4, ax);
    ax = 0x0112;
    push(cs);
    push(ax);
    push(es);
    push(bx);
    stop("stack_unbalanced");
    sp += 2;
    cs = pop();
    return;
loc_2db5f: // 2da3:012f
    ax = 0xa13c;
    stop("stack_below");
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    ax = 0xa23c;
    push(ds);
    push(ax);
    push(cs);
    sub_2e69b();
    stop("stack_below");
    di = 0xa33c;
    si = 0x01dd;
    cx = 0x0012;
    flags.direction = 0;
loc_2db7c: // 2da3:014c
    al = lodsb<CS_SI>();
    ah = 0x25;
    push(ds);
    dx = memoryAGet16(ds, di); ds = memoryAGet16(ds, di + 2); /*ggg2*/;
    interrupt(0x21);
    ds = pop();
    di += 0x0004;
    if (--cx)
        goto loc_2db7c;
    ax = memoryAGet16(ds, 0x029c);
    ax |= memoryAGet16(ds, 0x029e);
    if (!ax)
        goto loc_2dbbd;
    bx = 0x01ef;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029a);
    sub_2dbd2();
    bx = 0x01fe;
    sub_2dbc4();
    ax = memoryAGet16(ds, 0x029e);
    sub_2dbec();
    al = 0x3a;
    sub_2dc06();
    ax = memoryAGet16(ds, 0x029c);
    sub_2dbec();
    bx = 0x0203;
    sub_2dbc4();
loc_2dbbd: // 2da3:018d
    ax = memoryAGet16(ds, 0x029a);
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
  // gap 464 bytes
loc_2dd94: // 2da3:0364
    push(bp);
    bp = sp;
    ax = memoryAGet16(ss, bp + 6);
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    sub_2df12();
    if (flags.carry)
        goto loc_2ddad;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
    return;
loc_2ddad: // 2da3:037d
    bp = pop();
    ax = 0x00cc;
    goto loc_2db01;
}
void sub_2dde5() // 2da3:03b5 +far
{
    sub_2dffe();
    ax = si;
    dx = di;
    di = memoryAGet16(ds, 0x028c); es = memoryAGet16(ds, 0x028c + 2); /*ggg2*/;
    dx -= memoryAGet16(ds, 0x028a);
    flags.carry = ax < memoryAGet16(ds, 0x0288);
    ax -= memoryAGet16(ds, 0x0288);
    if (!flags.carry)
        goto loc_2de21;
    ax += 0x0010;
    dx--;
    goto loc_2de21;
loc_2de00: // 2da3:03d0
    dx += memoryAGet16(es, di + 6);
    dx -= memoryAGet16(es, di + 2);
    ax += memoryAGet16(es, di + 4);
    if (ax < 0x0010)
        goto loc_2de15;
    ax -= 0x0010;
    dx++;
loc_2de15: // 2da3:03e5
    flags.carry = ax < memoryAGet16(es, di);
    ax -= memoryAGet16(es, di);
    if (!flags.carry)
        goto loc_2de1e;
    ax += 0x0010;
    dx--;
loc_2de1e: // 2da3:03ee
    di += 0x0008;
loc_2de21: // 2da3:03f1
    if (di)
        goto loc_2de00;
    sub_2e055();
    cs = pop();
}
void sub_2de76() // 2da3:0446 +returnCarry
{
    sub_2e047();
    di = memoryAGet16(ds, 0x028c); es = memoryAGet16(ds, 0x028c + 2); /*ggg2*/;
    goto loc_2de8e;
loc_2de7f: // 2da3:044f
    bx = memoryAGet16(es, di + 6);
    bx -= memoryAGet16(es, di + 2);
    if (bx >= dx)
        goto loc_2decf;
loc_2de8b: // 2da3:045b
    di += 0x0008;
loc_2de8e: // 2da3:045e
    if (di)
        goto loc_2de7f;
    sub_2dffe();
    cx = si;
    bx = di;
    bx -= memoryAGet16(ds, 0x028a);
    flags.carry = cx < memoryAGet16(ds, 0x0288);
    cx -= memoryAGet16(ds, 0x0288);
    if (!flags.carry)
        goto loc_2dea7;
    cx += 0x0010;
    bx--;
loc_2dea7: // 2da3:0477
    flags.carry = bx < dx;
    if (bx > dx)
        goto loc_2deb1;
    if (flags.carry)
        goto loc_2dece;
    flags.carry = cx < ax;
    if (flags.carry)
        goto loc_2dece;
loc_2deb1: // 2da3:0481
    cx = memoryAGet16(ds, 0x0288);
    bx = memoryAGet16(ds, 0x028a);
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2dec6;
    ax -= 0x0010;
    dx++;
loc_2dec6: // 2da3:0496
    memoryASet16(ds, 0x0288, ax);
    memoryASet16(ds, 0x028a, dx);
    flags.carry = 0;
loc_2dece: // 2da3:049e
    return;
loc_2decf: // 2da3:049f
    cx = memoryAGet16(es, di + 4);
    flags.carry = cx < memoryAGet16(es, di);
    cx -= memoryAGet16(es, di);
    if (!flags.carry)
        goto loc_2dedc;
    cx += 0x0010;
    bx--;
loc_2dedc: // 2da3:04ac
    if (bx > dx)
        goto loc_2dee6;
    if (bx < dx)
        goto loc_2de8b;
    if (cx < ax)
        goto loc_2de8b;
loc_2dee6: // 2da3:04b6
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2defa;
    ax -= 0x0010;
    dx++;
loc_2defa: // 2da3:04ca
    memoryASet16(es, di, ax);
    memoryASet16(es, di + 2, dx);
    if (dx != memoryAGet16(es, di + 6))
        goto loc_2df10;
    if (ax != memoryAGet16(es, di + 4))
        goto loc_2df10;
    sub_2dfe9();
loc_2df10: // 2da3:04e0
    flags.carry = 0;
}
void sub_2df12() // 2da3:04e2 +returnCarry
{
    flags.carry = 0 /*ggg1*/;
    if (!ax)
        goto loc_2df49;
    sub_2e047();
    dx += bx;
    ax += cx;
    if (ax < 0x0010)
        goto loc_2df26;
    ax -= 0x0010;
    dx++;
loc_2df26: // 2da3:04f6
    if (bx < memoryAGet16(ds, 0x0286))
        goto loc_2df48;
    if (bx > memoryAGet16(ds, 0x0286))
        goto loc_2df34;
    if (cx < memoryAGet16(ds, 0x0284))
        goto loc_2df48;
loc_2df34: // 2da3:0504
    if (dx > memoryAGet16(ds, 0x028a))
        goto loc_2df48;
    if (dx < memoryAGet16(ds, 0x028a))
        goto loc_2df42;
    if (ax > memoryAGet16(ds, 0x0288))
        goto loc_2df48;
loc_2df42: // 2da3:0512
    di = memoryAGet16(ds, 0x028c); es = memoryAGet16(ds, 0x028c + 2); /*ggg2*/;
    goto loc_2df97;
loc_2df48: // 2da3:0518
    flags.carry = 1;
loc_2df49: // 2da3:0519
    return;
loc_2df4a: // 2da3:051a
    if (bx < memoryAGet16(es, di + 2))
        goto loc_2df6e;
    if (bx > memoryAGet16(es, di + 2))
        goto loc_2df57;
    if (cx < memoryAGet16(es, di))
        goto loc_2df6e;
loc_2df57: // 2da3:0527
    if (bx > memoryAGet16(es, di + 6))
        goto loc_2df94;
    if (bx < memoryAGet16(es, di + 6))
        goto loc_2df65;
    if (cx > memoryAGet16(es, di + 4))
        goto loc_2df94;
loc_2df65: // 2da3:0535
    cx = memoryAGet16(es, di);
    bx = memoryAGet16(es, di + 2);
    goto loc_2df7b;
loc_2df6e: // 2da3:053e
    if (dx < memoryAGet16(es, di + 2))
        goto loc_2df94;
    if (dx > memoryAGet16(es, di + 2))
        goto loc_2df7b;
    if (ax < memoryAGet16(es, di))
        goto loc_2df94;
loc_2df7b: // 2da3:054b
    if (dx > memoryAGet16(es, di + 6))
        goto loc_2df91;
    if (dx < memoryAGet16(es, di + 6))
        goto loc_2df89;
    if (ax > memoryAGet16(es, di + 4))
        goto loc_2df91;
loc_2df89: // 2da3:0559
    ax = memoryAGet16(es, di + 4);
    dx = memoryAGet16(es, di + 6);
loc_2df91: // 2da3:0561
    sub_2dfe9();
loc_2df94: // 2da3:0564
    di += 0x0008;
loc_2df97: // 2da3:0567
    if (di)
        goto loc_2df4a;
    if (dx != memoryAGet16(ds, 0x028a))
        goto loc_2dfb0;
    flags.carry = ax < memoryAGet16(ds, 0x0288);
    if (ax != memoryAGet16(ds, 0x0288))
        goto loc_2dfb0;
    memoryASet16(ds, 0x0288, cx);
    memoryASet16(ds, 0x028a, bx);
    return;
loc_2dfb0: // 2da3:0580
    sub_2dfc5();
    if (flags.carry)
        goto loc_2dfc4;
    memoryASet16(es, di, cx);
    memoryASet16(es, di + 2, bx);
    memoryASet16(es, di + 4, ax);
    memoryASet16(es, di + 6, dx);
loc_2dfc4: // 2da3:0594
    return;
}
void sub_2dfc5() // 2da3:0595 +returnCarry
{
    di = memoryAGet16(ds, 0x028c);
    di -= 0x0008;
    if (!di)
        goto loc_2dfe7;
    si = di;
    si >>= 1;
    si >>= 1;
    si >>= 1;
    si >>= 1;
    si += memoryAGet16(ds, 0x028e);
    flags.carry = si < memoryAGet16(ds, 0x028a);
    if (si <= memoryAGet16(ds, 0x028a))
        goto loc_2dfe7;
    memoryASet16(ds, 0x028c, di);
    return;
loc_2dfe7: // 2da3:05b7
    flags.carry = 1;
}
void sub_2dfe9() // 2da3:05b9
{
    si = memoryAGet16(ds, 0x028c);
    flags.direction = 0;
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    movsw<ES_DI, ES_SI>();
    di -= 0x0008;
    memoryASet16(ds, 0x028c, si);
}
void sub_2dffe() // 2da3:05ce
{
    di = memoryAGet16(ds, 0x028c);
    if (di)
        goto loc_2e017;
    di -= memoryAGet16(ds, 0x0290);
    if (di)
        goto loc_2e01f;
    si = 0;
    di = memoryAGet16(ds, 0x028e);
    di += 0x1000;
    return;
loc_2e017: // 2da3:05e7
    flags.carry = di < memoryAGet16(ds, 0x0290);
    di -= memoryAGet16(ds, 0x0290);
    if (!flags.carry)
        goto loc_2e01f;
    di = 0;
loc_2e01f: // 2da3:05ef
    si = di;
    si &= 0x000f;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    di >>= 1;
    di += memoryAGet16(ds, 0x028e);
    if (di > memoryAGet16(ds, 0x028a))
        goto loc_2e046;
    if (di < memoryAGet16(ds, 0x028a))
        goto loc_2e03e;
    if (si >= memoryAGet16(ds, 0x0288))
        goto loc_2e046;
loc_2e03e: // 2da3:060e
    si = memoryAGet16(ds, 0x0288);
    di = memoryAGet16(ds, 0x028a);
loc_2e046: // 2da3:0616
    return;
}
void sub_2e047() // 2da3:0617
{
    dx = ax;
    ax &= 0x000f;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
    dx >>= 1;
}
void sub_2e055() // 2da3:0625
{
    cl = 0x04;
    dx = rol16(dx, cl);
    cx = dx;
    cx &= 0xfff0;
    dx &= 0x000f;
    ax |= cx;
}
void sub_2e064() // 2da3:0634 +far +stackDrop6
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    al = lodsb<DS_SI>();
    stosb<ES_DI>(al);
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2e07e() // 2da3:064e +nearfar +stackDrop12
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 10); ds = memoryAGet16(ss, bx + 10 + 2); /*ggg2*/;
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(ss, bx + 4);
    al = lodsb<DS_SI>();
    if (al <= cl)
        goto loc_2e096;
    al = cl;
loc_2e096: // 2da3:0666
    stosb<ES_DI>(al);
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 10;
}
void sub_2e0b0() // 2da3:0680 +nearfar +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 12); es = memoryAGet16(ss, bx + 12 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    al = memoryAGet(ds, si);
    ah = 0;
    cx = memoryAGet16(ss, bx + 6);
    if ((short)cx > 0)
        goto loc_2e0cc;
    cx = 0x0001;
loc_2e0cc: // 2da3:069c
    si += cx;
    flags.carry = ax < cx;
    ax -= cx;
    if (flags.carry)
        goto loc_2e0e5;
    ax++;
    cx = memoryAGet16(ss, bx + 4);
    if ((short)cx >= 0)
        goto loc_2e0dd;
    cx = 0;
loc_2e0dd: // 2da3:06ad
    if (ax <= cx)
        goto loc_2e0e7;
    ax = cx;
    goto loc_2e0e7;
loc_2e0e5: // 2da3:06b5
    ax = 0;
loc_2e0e7: // 2da3:06b7
    stosb<ES_DI>(al);
    cx = ax;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e0f1() // 2da3:06c1 +nearfar +stackDrop6
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    cl = memoryAGet(es, di);
    ch = 0;
    al = lodsb<DS_SI>();
    flags.carry = (memoryAGet(es, di) + al) >= 0x100;
    memoryASet(es, di, memoryAGet(es, di) + al);
    if (!flags.carry)
        goto loc_2e111;
    memoryASet(es, di, 0xff);
    al = cl;
    al = ~al;
loc_2e111: // 2da3:06e1
    di += cx;
    di++;
    cl = al;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2e11d() // 2da3:06ed +far +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    push(ds);
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    cl = memoryAGet(ds, si);
    ch = 0;
    dl = memoryAGet(es, di);
    dh = 0;
    flags.carry = dx < cx;
    dx -= cx;
    if (flags.carry)
        goto loc_2e14e;
    ax = 0x0001;
    if (!cx)
        goto loc_2e150;
    dx++;
    si++;
loc_2e13f: // 2da3:070f
    di++;
    push(cx);
    push(si);
    push(di);
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    di = pop();
    si = pop();
    cx = pop();
    if (flags.zero)
        goto loc_2e150;
    ax++;
    dx--;
    if (dx)
        goto loc_2e13f;
loc_2e14e: // 2da3:071e
    ax = 0;
loc_2e150: // 2da3:0720
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e154() // 2da3:0724 +far +returnZero +stackDrop10
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    dx = ds;
    si = memoryAGet16(ss, bx + 8); ds = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    al = lodsb<DS_SI>();
    ah = memoryAGet(es, di);
    di++;
    cl = al;
    if (cl <= ah)
        goto loc_2e16e;
    cl = ah;
loc_2e16e: // 2da3:073e
    if (!cl)
        goto loc_2e178;
    ch = 0;
    for (flags.zero = 1; cx != 0 && flags.zero; --cx) cmpsb<DS_SI, ES_DI>();
    if (!flags.zero)
        goto loc_2e17a;
loc_2e178: // 2da3:0748
    flags.zero = al == ah;
loc_2e17a: // 2da3:074a
    ds = dx;
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e17f() // 2da3:074f +far +stackDrop4
{
    sp -= 2;
    flags.direction = 0;
    bx = sp;
    di = memoryAGet16(ss, bx + 6); es = memoryAGet16(ss, bx + 6 + 2); /*ggg2*/;
    al = 0x01;
    stosb<ES_DI>(al);
    al = memoryAGet(ss, bx + 4);
    stosb<ES_DI>(al);
    sp += 2;
    cs = pop();
    sp += 2;
}
void sub_2e200() // 2da3:07d0 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0200;
    if ((short)memoryAGet16(ss, bp + 6) <= (short)0x0000)
        goto loc_2e250;
    di = bp - 256;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x0001;
    push(ax);
    ax = memoryAGet16(ss, bp + 8);
    ax--;
    push(ax);
    push(cs);
    sub_2e0b0();
    di = bp - 512;
    push(ss);
    push(di);
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = memoryAGet16(ss, bp + 8);
    ax += memoryAGet16(ss, bp + 6);
    push(ax);
    ax = 0x00ff;
    push(ax);
    push(cs);
    sub_2e0b0();
    push(cs);
    sub_2e0f1();
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    push(es);
    push(di);
    ax = 0x00ff;
    push(ax);
    push(cs);
    sub_2e07e();
loc_2e250: // 2da3:0820
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e304() // 2da3:08d4 +far +returnZero +stackDrop8
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    al = memoryAGet(ss, bx + 8);
    bl = al;
    bh = 0;
    cl = 0x03;
    bx >>= cl;
    cl = al;
    cl &= 0x07;
    al = 0x01;
    al <<= cl;
    flags.zero = !(memoryAGet(es, bx + di) & al);
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2e3b0() // 2da3:0980 +far +stackDrop4
{
    sp -= 2;
    sub_2e3ff();
    ax = 0;
    bx = sp;
    bx = memoryAGet16(ss, bx + 4);
    if (!bx)
        goto loc_2e3c3;
    tx = dx; dx = ax; ax = tx;
    div16(bx);
    tx = dx; dx = ax; ax = tx;
loc_2e3c3: // 2da3:0993
    sp += 2;
    cs = pop();
    sp += 2;
    return;
}
void sub_2e3ff() // 2da3:09cf
{
    ax = memoryAGet16(ds, 0x02a6);
    bx = memoryAGet16(ds, 0x02a8);
    cx = ax;
    mul16(memoryAGet16(cs, 0x0a05));
    cx <<= 1;
    cx <<= 1;
    cx <<= 1;
    ch += cl;
    dx += cx;
    dx += bx;
    bx <<= 1;
    bx <<= 1;
    dx += bx;
    dh += bl;
    cl = 0x05;
    bx <<= cl;
    dh += bl;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
    memoryASet16(ds, 0x02a6, ax);
    memoryASet16(ds, 0x02a8, dx);
}
void sub_2e437() // 2da3:0a07 +far
{
    ah = 0x2c;
    interrupt(0x21);
    memoryASet16(ds, 0x02a6, cx);
    memoryASet16(ds, 0x02a8, dx);
    cs = pop();
}
void sub_2e444() // 2da3:0a14
{
    bool temp_cf;

    push(di);
    flags.direction = 0;
    bx = ax;
    if ((short)dx >= 0)
        goto loc_2e459;
    bx = ~bx;
    dx = ~dx;
    flags.carry = (bx + 0x0001) >= 0x10000;
    bx += 0x0001;
    dx += 0x0000 + flags.carry;
    al = 0x2d;
    stosb<ES_DI>(al);
loc_2e459: // 2da3:0a29
    si = 0x0a66;
    cl = 0x09;
loc_2e45e: // 2da3:0a2e
    if (dx < memoryAGet16(cs, si + 2))
        goto loc_2e46b;
    if (dx > memoryAGet16(cs, si + 2))
        goto loc_2e472;
    if (bx >= memoryAGet16(cs, si))
        goto loc_2e472;
loc_2e46b: // 2da3:0a3b
    si += 0x0004;
    cl--;
    if (cl)
        goto loc_2e45e;
loc_2e472: // 2da3:0a42
    cl++;
loc_2e474: // 2da3:0a44
    al = 0x2f;
loc_2e476: // 2da3:0a46
    al++;
    flags.carry = bx < memoryAGet16(cs, si);
    bx -= memoryAGet16(cs, si);
    temp_cf = dx < memoryAGet16(cs, si + 2) + flags.carry;
    dx = dx - memoryAGet16(cs, si + 2) - flags.carry;
    flags.carry = temp_cf;
    if (!flags.carry)
        goto loc_2e476;
    flags.carry = (bx + memoryAGet16(cs, si)) >= 0x10000;
    bx += memoryAGet16(cs, si);
    dx += memoryAGet16(cs, si + 2) + flags.carry;
    si += 0x0004;
    stosb<ES_DI>(al);
    cl--;
    if (cl)
        goto loc_2e474;
    cx = di;
    di = pop();
    cx -= di;
}
void sub_2e4be() // 2da3:0a8e +returnCarry
{
    ax = 0;
    dx = 0;
    si = 0;
    if (cx==0)
        goto loc_2e51f;
    if (memoryAGet(es, di) == 0x2b)
        goto loc_2e4d3;
    if (memoryAGet(es, di) != 0x2d)
        goto loc_2e4d7;
    si++;
loc_2e4d3: // 2da3:0aa3
    di++;
    cx--;
    if (cx==0)
        goto loc_2e51f;
loc_2e4d7: // 2da3:0aa7
    if (memoryAGet(es, di) == 0x24)
        goto loc_2e521;
loc_2e4dd: // 2da3:0aad
    bl = memoryAGet(es, di);
    bl -= 0x3a;
    flags.carry = (bl + 0x0a) >= 0x100;
    bl += 0x0a;
    if (!flags.carry)
        goto loc_2e510;
    if (dx & 0xf000)
        goto loc_2e51f;
    push(bx);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    push(dx);
    push(ax);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    bx = pop();
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    bx = pop();
    dx += bx + flags.carry;
    bx = pop();
    bh = 0;
    flags.carry = (ax + bx) >= 0x10000;
    ax += bx;
    dx += 0x0000 + flags.carry;
    if ((short)dx < 0)
        goto loc_2e51f;
    di++;
    if (--cx)
        goto loc_2e4dd;
loc_2e510: // 2da3:0ae0
    si--;
    if (si)
        goto loc_2e51d;
    ax = ~ax;
    dx = ~dx;
    flags.carry = (ax + 0x0001) >= 0x10000;
    ax += 0x0001;
    dx += 0x0000 + flags.carry;
loc_2e51d: // 2da3:0aed
    flags.carry = 0;
    return;
loc_2e51f: // 2da3:0aef
    flags.carry = 1;
    return;
loc_2e521: // 2da3:0af1
    di++;
    cx--;
    if (cx==0)
        goto loc_2e51f;
loc_2e525: // 2da3:0af5
    bl = memoryAGet(es, di);
    if (bl < 0x61)
        goto loc_2e530;
    bl -= 0x20;
loc_2e530: // 2da3:0b00
    bl -= 0x3a;
    flags.carry = (bl + 0x0a) >= 0x100;
    bl += 0x0a;
    if (flags.carry)
        goto loc_2e543;
    bl -= 0x17;
    flags.carry = (bl + 0x06) >= 0x100;
    bl += 0x06;
    if (!flags.carry)
        goto loc_2e510;
    bl += 0x0a;
loc_2e543: // 2da3:0b13
    bh = 0x04;
loc_2e545: // 2da3:0b15
    flags.carry = !!(ax & 0x8000);
    ax <<= 1;
    dx = rcl16(dx, 0x0001);
    if (flags.carry)
        goto loc_2e51f;
    bh--;
    if (bh)
        goto loc_2e545;
    al |= bl;
    di++;
    if (--cx)
        goto loc_2e525;
    goto loc_2e510;
}
void sub_2e556() // 2da3:0b26 +far +stackDrop14
{
    sp -= 2;
    push(bp);
    bp = sp;
    sp -= 0x0020;
    ax = memoryAGet16(ss, bp + 14);
    dx = memoryAGet16(ss, bp + 16);
    di = bp - 32;
    push(ss);
    es = pop();
    sub_2e444();
    push(ds);
    si = di;
    push(ss);
    ds = pop();
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    dx = memoryAGet16(ss, bp + 6);
    ax = memoryAGet16(ss, bp + 12);
    if ((short)ax <= (short)dx)
        goto loc_2e57e;
    ax = dx;
loc_2e57e: // 2da3:0b4e
    if ((short)cx <= (short)dx)
        goto loc_2e584;
    cx = dx;
loc_2e584: // 2da3:0b54
    if ((short)ax >= (short)cx)
        goto loc_2e58a;
    ax = cx;
loc_2e58a: // 2da3:0b5a
    flags.direction = 0;
    stosb<ES_DI>(al);
    ax -= cx;
    if (!ax)
        goto loc_2e598;
    push(cx);
    cx = ax;
    al = 0x20;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    cx = pop();
loc_2e598: // 2da3:0b68
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    ds = pop();
    sp = bp;
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 12;
}
void sub_2e5a1() // 2da3:0b71 +far +stackDrop10
{
    sp -= 2;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    cl = memoryAGet(es, di);
    ch = 0;
    di++;
    if (cx==0)
        goto loc_2e5b8;
loc_2e5af: // 2da3:0b7f
    if (memoryAGet(es, di) != 0x20)
        goto loc_2e5b8;
    di++;
    if (--cx)
        goto loc_2e5af;
loc_2e5b8: // 2da3:0b88
    sub_2e4be();
    if (flags.carry)
        goto loc_2e5bf;
    if (cx==0)
        goto loc_2e5c8;
loc_2e5bf: // 2da3:0b8f
    cx = di;
    cx -= memoryAGet16(ss, bp + 10);
    ax = 0;
    dx = 0;
loc_2e5c8: // 2da3:0b98
    di = memoryAGet16(ss, bp + 6); es = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    memoryASet16(es, di, cx);
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e5d2() // 2da3:0ba2 +stackDrop10
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    flags.direction = 0;
    ax = 0;
    stosw<ES_DI>(ax);
    ax = 0xd7b0;
    stosw<ES_DI>(ax);
    ax = 0x0080;
    stosw<ES_DI>(ax);
    ax = 0;
    stosw<ES_DI>(ax);
    stosw<ES_DI>(ax);
    stosw<ES_DI>(ax);
    ax = di + 116;
    stosw<ES_DI>(ax);
    ax = es;
    stosw<ES_DI>(ax);
    ax = 0x0cb7;
    stosw<ES_DI>(ax);
    ax = cs;
    stosw<ES_DI>(ax);
    ax = 0;
    cx = 0x000e;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    al = lodsb<DS_SI>();
    if (al <= 0x4f)
        goto loc_2e60a;
    al = 0x4f;
loc_2e60a: // 2da3:0bda
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    al = 0;
    stosb<ES_DI>(al);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2e642() // 2da3:0c12 +nearfar +stackDrop6
{
    sp -= 2;
    dx = 0xd7b1;
    goto loc_2e64f;
  // gap 8 bytes
loc_2e64f: // 2da3:0c1f
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, di + 2);
    if (ax == 0xd7b1)
        goto loc_2e670;
    if (ax == 0xd7b2)
        goto loc_2e670;
    if (ax == 0xd7b0)
        goto loc_2e678;
    memoryASet16(ds, 0x02a4, 0x0066);
    goto loc_2e694;
loc_2e670: // 2da3:0c40
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2e69b();
    dx = pop();
loc_2e678: // 2da3:0c48
    ax = 0;
    memoryASet16(es, di + 2, dx);
    memoryASet16(es, di + 8, ax);
    memoryASet16(es, di + 10, ax);
    bx = 0x0010;
    sub_2e6d6();
    if (flags.zero)
        goto loc_2e694;
    memoryASet16(es, di + 2, 0xd7b0);
loc_2e694: // 2da3:0c64
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2e647() // 2da3:0c17 +nearfar +stackDrop6
{
    sp -= 2;
    dx = 0xd7b2;
    goto loc_2e64f;
  // gap 3 bytes
loc_2e64f: // 2da3:0c1f
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    ax = memoryAGet16(es, di + 2);
    if (ax == 0xd7b1)
        goto loc_2e670;
    if (ax == 0xd7b2)
        goto loc_2e670;
    if (ax == 0xd7b0)
        goto loc_2e678;
    memoryASet16(ds, 0x02a4, 0x0066);
    goto loc_2e694;
loc_2e670: // 2da3:0c40
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2e69b();
    dx = pop();
loc_2e678: // 2da3:0c48
    ax = 0;
    memoryASet16(es, di + 2, dx);
    memoryASet16(es, di + 8, ax);
    memoryASet16(es, di + 10, ax);
    bx = 0x0010;
    sub_2e6d6();
    if (flags.zero)
        goto loc_2e694;
    memoryASet16(es, di + 2, 0xd7b0);
loc_2e694: // 2da3:0c64
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2e69b() // 2da3:0c6b +stackDrop6
{
    sp -= 2;
    al = 0x01;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, di + 2) == 0xd7b1)
        goto loc_2e6c3;
    if (memoryAGet16(es, di + 2) == 0xd7b2)
        goto loc_2e6bb;
    memoryASet16(ds, 0x02a4, 0x0067);
    goto loc_2e6d3;
loc_2e6bb: // 2da3:0c8b
    push(ax);
    bx = 0x0014;
    sub_2e6d6();
    ax = pop();
loc_2e6c3: // 2da3:0c93
    if (!al)
        goto loc_2e6d3;
    bx = 0x001c;
    sub_2e6d6();
    memoryASet16(es, di + 2, 0xd7b0);
loc_2e6d3: // 2da3:0ca3
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2e6d6() // 2da3:0ca6 +returnZero
{
    push(es);
    push(di);
    push(es);
    push(di);
    switch (memoryAGet32(es, bx + di))
    {
        case 0x2da30cb7: push(cs); cs = 0x2da3; sub_2e6e7(); assert(cs == 0x2da3); break;
        case 0x2a410359: push(cs); cs = 0x2a41; sub_2a769(); assert(cs == 0x2da3); break; // TODO: stack balance
        default:
            stop();
    }
    flags.zero = !ax;
    if (flags.zero)
        goto loc_2e6e4;
    memoryASet16(ds, 0x02a4, ax);
loc_2e6e4: // 2da3:0cb4
    di = pop();
    es = pop();
//    stop("stack_unbalanced");
}
void sub_2e6e7() // 2da3:0cb7 +stackDrop6
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    cx = 0;
    memoryASet16(ds, di, cx);
    ax = 0x3d00;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2e709;
    al = 0x02;
    memoryASet16(ds, di, memoryAGet16(ds, di) + 1);
    if (memoryAGet16(ds, di + 2) == 0xd7b3)
        goto loc_2e709;
    ah = 0x3c;
loc_2e709: // 2da3:0cd9
    if (memoryAGet(ds, di + 48) == 0x00)
        goto loc_2e718;
    dx = di + 48;
    interrupt(0x21);
    if (flags.carry)
        goto loc_2e765;
    memoryASet16(ds, di, ax);
loc_2e718: // 2da3:0ce8
    ax = 0x0d93;
    cx = 0;
    bx = cx;
    if (memoryAGet16(ds, di + 2) == 0xd7b1)
        goto loc_2e74f;
    bx = memoryAGet16(ds, di);
    ax = 0x4400;
    interrupt(0x21);
    ax = 0x0de8;
    cx = ax;
    bx = cs;
    if (dl & 0x80)
        goto loc_2e74a;
    if (memoryAGet16(ds, di + 2) != 0xd7b3)
        goto loc_2e743;
    sub_2e769();
loc_2e743: // 2da3:0d13
    ax = 0x0dc3;
    cx = 0;
    bx = cx;
loc_2e74a: // 2da3:0d1a
    memoryASet16(ds, di + 2, 0xd7b2);
loc_2e74f: // 2da3:0d1f
    memoryASet16(ds, di + 20, ax);
    memoryASet16(ds, di + 22, cs);
    memoryASet16(ds, di + 24, cx);
    memoryASet16(ds, di + 26, bx);
    memoryASet16(ds, di + 28, 0x0e08);
    memoryASet16(ds, di + 30, cs);
    ax = 0;
loc_2e765: // 2da3:0d35
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2e769() // 2da3:0d39
{
    bool temp_cf;

    dx = 0;
    cx = 0;
    bx = memoryAGet16(ds, di);
    ax = 0x4202;
    interrupt(0x21);
    flags.carry = ax < 0x0080;
    ax -= 0x0080;
    temp_cf = dx < 0x0000 + flags.carry;
    dx = dx - 0x0000 - flags.carry;
    flags.carry = temp_cf;
    if (!flags.carry)
        goto loc_2e780;
    ax = 0;
    dx = 0;
loc_2e780: // 2da3:0d50
    cx = dx;
    dx = ax;
    bx = memoryAGet16(ds, di);
    ax = 0x4200;
    interrupt(0x21);
    dx = di + 128;
    cx = 0x0080;
    bx = memoryAGet16(ds, di);
    ah = 0x3f;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_2e79c;
    ax = 0;
loc_2e79c: // 2da3:0d6c
    bx = 0;
loc_2e79e: // 2da3:0d6e
    if (bx == ax)
        goto loc_2e7c2;
    if (memoryAGet(ds, bx + di + 128) == 0x1a)
        goto loc_2e7ac;
    bx++;
    goto loc_2e79e;
loc_2e7ac: // 2da3:0d7c
    dx = bx;
    dx -= ax;
    cx = 0xffff;
    bx = memoryAGet16(ds, di);
    ax = 0x4202;
    interrupt(0x21);
    cx = 0;
    bx = memoryAGet16(ds, di);
    ah = 0x40;
    interrupt(0x21);
loc_2e7c2: // 2da3:0d92
    return;
}
void sub_2e891() // 2da3:0e61 +returnZero
{
    flags.zero = memoryAGet16(ds, 0x02a4) == 0x0000;
    if (!flags.zero)
        goto loc_2e8a0;
    flags.zero = memoryAGet16(es, di + 2) == 0xd7b2;
    if (!flags.zero)
        goto loc_2e8ad;
loc_2e8a0: // 2da3:0e70
    bx = memoryAGet16(es, di + 8);
    dx = memoryAGet16(es, di + 4);
    {int tmp1 = memoryAGet16(es, di + 12); int tmp2 = memoryAGet16(es, di + 12 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    return;
loc_2e8ad: // 2da3:0e7d
    memoryASet16(ds, 0x02a4, 0x0069);
    goto loc_2e8a0;
}
void sub_2e8b5() // 2da3:0e85
{
    sp -= 2;
    memoryASet(es, bx + di, al);
    bx++;
    if (bx == dx)
        goto loc_2e8be;
    sp += 2;
    return;
loc_2e8be: // 2da3:0e8e
    di = sp;
    {int tmp1 = memoryAGet16(ss, di + 2); int tmp2 = memoryAGet16(ss, di + 2 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    push(cx);
    push(si);
    push(ds);
    dx = 0x2ec1;
    ds = dx;
    memoryASet16(es, di + 8, bx);
    push(es);
    push(di);
    push(es);
    push(di);
    push(cs); cs = memoryAGet16(es, di + 20 + 2); callIndirect(cs, memoryAGet16(es, di + 20)); assert(cs == 0x2da3); // 2da3:0ea4;
    if (!ax)
        goto loc_2e8df;
    memoryASet16(ds, 0x02a4, ax);
loc_2e8df: // 2da3:0eaf
    di = pop();
    es = pop();
    ax = memoryAGet16(es, di + 10);
    bx = memoryAGet16(es, di + 8);
    dx = memoryAGet16(es, di + 4);
    {int tmp1 = memoryAGet16(es, di + 12); int tmp2 = memoryAGet16(es, di + 12 + 2); di = tmp1; es = tmp2; /*ggg2!!check*/};
    ds = pop();
    si = pop();
    cx = pop();
    stop("stack_unbalanced");
    sp += 2;
}
void sub_2e91e() // 2da3:0eee +far +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    push(es);
    push(di);
    sub_2e891();
    if (!flags.zero)
        goto loc_2e935;
    al = 0x0d;
    sub_2e8b5();
    al = 0x0a;
    sub_2e8b5();
loc_2e935: // 2da3:0f05
    di = pop();
    es = pop();
    memoryASet16(es, di + 8, bx);
    goto loc_2e943;
  // gap 6 bytes
loc_2e943: // 2da3:0f13
    if (memoryAGet16(es, di + 26) != 0x0000)
        goto loc_2e94d;
loc_2e94a: // 2da3:0f1a
    sp += 2;
    cs = pop();
    sp += 4;
    return;
loc_2e94d: // 2da3:0f1d
    if (memoryAGet16(ds, 0x02a4) != 0x0000)
        goto loc_2e94a;
    push(es);
    push(di);
    push(cs); cs = memoryAGet16(es, di + 24 + 2); callIndirect(cs, memoryAGet16(es, di + 24)); assert(cs == 0x2da3); // 2da3:0f26;
    if (!ax)
        goto loc_2e94a;
    memoryASet16(ds, 0x02a4, ax);
    goto loc_2e94a;
}
void sub_2e93d() // 2da3:0f0d +far +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    if (memoryAGet16(es, di + 26) != 0x0000)
        goto loc_2e94d;
loc_2e94a: // 2da3:0f1a
    sp += 2;
    cs = pop();
    sp += 4;
    return;
loc_2e94d: // 2da3:0f1d
    if (memoryAGet16(ds, 0x02a4) != 0x0000)
        goto loc_2e94a;
    push(es);
    push(di);
    push(cs); cs = memoryAGet16(es, di + 24 + 2); callIndirect(cs, memoryAGet16(es, di + 24)); assert(cs == 0x2da3); // 2da3:0f26;
    if (!ax)
        goto loc_2e94a;
    memoryASet16(ds, 0x02a4, ax);
    goto loc_2e94a;
}
void sub_2e981() // 2da3:0f51 +far +stackDrop6
{
    bool temp_cond0;

    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    al = memoryAGet(ss, bx + 6);
    cx = memoryAGet16(ss, bx + 4);
    push(es);
    push(di);
    sub_2e891();
    if (!flags.zero)
        goto loc_2e9a5;
    temp_cond0 = (short)cx - 1 <= 0;
    cx--;
    if (temp_cond0)
        goto loc_2e9a2;
    tx = si; si = ax; ax = tx;
loc_2e99a: // 2da3:0f6a
    al = 0x20;
    sub_2e8b5();
    if (--cx)
        goto loc_2e99a;
    tx = si; si = ax; ax = tx;
loc_2e9a2: // 2da3:0f72
    sub_2e8b5();
loc_2e9a5: // 2da3:0f75
    di = pop();
    es = pop();
    memoryASet16(es, di + 8, bx);
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2e9e6() // 2da3:0fb6 +far +stackDrop8
{
    bool temp_cond0;

    sp -= 2;
    push(bp);
    bp = sp;
    push(ds);
    di = memoryAGet16(ss, bp + 12); es = memoryAGet16(ss, bp + 12 + 2); /*ggg2*/;
    push(es);
    push(di);
    sub_2e891();
    if (!flags.zero)
        goto loc_2ea19;
    si = memoryAGet16(ss, bp + 8); ds = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    cx = memoryAGet16(ss, bp + 6);
    flags.direction = 0;
    al = lodsb<DS_SI>();
    ah = 0;
    temp_cond0 = (short)cx - (short)ax <= 0;
    cx -= ax;
    if (temp_cond0)
        goto loc_2ea0e;
loc_2ea02: // 2da3:0fd2
    al = 0x20;
    sub_2e8b5();
    if (--cx)
        goto loc_2ea02;
    al = memoryAGet(ds, si + 65535);
    ah = 0;
loc_2ea0e: // 2da3:0fde
    cx = ax;
    if (cx==0)
        goto loc_2ea19;
loc_2ea12: // 2da3:0fe2
    flags.direction = 0;
    al = lodsb<DS_SI>();
    sub_2e8b5();
    if (--cx)
        goto loc_2ea12;
loc_2ea19: // 2da3:0fe9
    di = pop();
    es = pop();
    memoryASet16(es, di + 8, bx);
    ds = pop();
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2ea24() // 2da3:0ff4 +far +stackDrop10
{
    sp -= 2;
    bx = sp;
    push(ds);
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    si = memoryAGet16(ss, bx + 4); ds = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    flags.direction = 0;
    ax = 0;
    stosw<ES_DI>(ax);
    ax = 0xd7b0;
    stosw<ES_DI>(ax);
    ax = 0;
    cx = 0x0016;
    for (; cx != 0; --cx) stosw<ES_DI>(ax);
    al = lodsb<DS_SI>();
    if (al <= 0x4f)
        goto loc_2ea45;
    al = 0x4f;
loc_2ea45: // 2da3:1015
    cl = al;
    ch = 0;
    for (; cx != 0; --cx) movsb<ES_DI, DS_SI>();
    al = 0;
    stosb<ES_DI>(al);
    ds = pop();
    sp += 2;
    cs = pop();
    sp += 8;
}
void sub_2ea52() // 2da3:1022 +far +stackDrop8
{
    sp -= 2;
    al = memoryAGet(ds, 0x02aa);
    ah = 0x3d;
    dx = 0;
    goto loc_2ea61;
  // gap 6 bytes
loc_2ea61: // 2da3:1031
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    if (memoryAGet16(es, di + 2) == 0xd7b0)
        goto loc_2ea89;
    if (memoryAGet16(es, di + 2) == 0xd7b3)
        goto loc_2ea7f;
    memoryASet16(ds, 0x02a4, 0x0066);
    goto loc_2eab3;
loc_2ea7f: // 2da3:104f
    push(ax);
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2ead3();
    dx = pop();
    ax = pop();
loc_2ea89: // 2da3:1059
    if (memoryAGet(es, di + 48) == 0x00)
        goto loc_2eaa2;
    push(ds);
    dx = di + 48;
    push(es);
    ds = pop();
    cx = 0;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_2eaa3;
    memoryASet16(ds, 0x02a4, ax);
    goto loc_2eab3;
loc_2eaa2: // 2da3:1072
    tx = dx; dx = ax; ax = tx;
loc_2eaa3: // 2da3:1073
    memoryASet16(es, di + 2, 0xd7b3);
    memoryASet16(es, di, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(es, di + 4, ax);
loc_2eab3: // 2da3:1083
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2ea5b() // 2da3:102b +far +stackDrop8
{
    sp -= 2;
    ax = 0x3c00;
    dx = 0x0001;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 8); es = memoryAGet16(ss, bp + 8 + 2); /*ggg2*/;
    if (memoryAGet16(es, di + 2) == 0xd7b0)
        goto loc_2ea89;
    if (memoryAGet16(es, di + 2) == 0xd7b3)
        goto loc_2ea7f;
    memoryASet16(ds, 0x02a4, 0x0066);
    goto loc_2eab3;
loc_2ea7f: // 2da3:104f
    push(ax);
    push(dx);
    push(es);
    push(di);
    push(cs);
    sub_2ead3();
    dx = pop();
    ax = pop();
loc_2ea89: // 2da3:1059
    if (memoryAGet(es, di + 48) == 0x00)
        goto loc_2eaa2;
    push(ds);
    dx = di + 48;
    push(es);
    ds = pop();
    cx = 0;
    interrupt(0x21);
    ds = pop();
    if (!flags.carry)
        goto loc_2eaa3;
    memoryASet16(ds, 0x02a4, ax);
    goto loc_2eab3;
loc_2eaa2: // 2da3:1072
    tx = dx; dx = ax; ax = tx;
loc_2eaa3: // 2da3:1073
    memoryASet16(es, di + 2, 0xd7b3);
    memoryASet16(es, di, ax);
    ax = memoryAGet16(ss, bp + 6);
    memoryASet16(es, di + 4, ax);
loc_2eab3: // 2da3:1083
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 6;
}
void sub_2ead3() // 2da3:10a3 +nearfar +stackDrop6
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 4); es = memoryAGet16(ss, bx + 4 + 2); /*ggg2*/;
    sub_2eaf8();
    if (!flags.zero)
        goto loc_2eaf5;
    bx = memoryAGet16(es, di);
    if (bx <= 0x0004)
        goto loc_2eaef;
    ah = 0x3e;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_2eaef;
    memoryASet16(ds, 0x02a4, ax);
loc_2eaef: // 2da3:10bf
    memoryASet16(es, di + 2, 0xd7b0);
loc_2eaf5: // 2da3:10c5
    sp += 2;
    cs = pop();
    sp += 4;
    return;
}
void sub_2eaf8() // 2da3:10c8 +returnZero
{
    flags.zero = memoryAGet16(es, di + 2) == 0xd7b3;
    if (flags.zero)
        goto loc_2eb06;
    memoryASet16(ds, 0x02a4, 0x0067);
loc_2eb06: // 2da3:10d6
    return;
}
void sub_2eb07() // 2da3:10d7 +far +stackDrop6
{
    sp -= 2;
    ah = 0x3f;
    dx = 0x0064;
    goto loc_2eb13;
  // gap 5 bytes
loc_2eb13: // 2da3:10e3
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    sub_2eaf8();
    if (!flags.zero)
        goto loc_2eb39;
    push(ds);
    push(dx);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(es, di + 4);
    bx = memoryAGet16(es, di);
    interrupt(0x21);
    dx = pop();
    ds = pop();
    if (flags.carry)
        goto loc_2eb36;
    if (ax == cx)
        goto loc_2eb39;
    ax = dx;
loc_2eb36: // 2da3:1106
    memoryASet16(ds, 0x02a4, ax);
loc_2eb39: // 2da3:1109
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2eb0e() // 2da3:10de +far +stackDrop6
{
    sp -= 2;
    ah = 0x40;
    dx = 0x0065;
    push(bp);
    bp = sp;
    di = memoryAGet16(ss, bp + 10); es = memoryAGet16(ss, bp + 10 + 2); /*ggg2*/;
    sub_2eaf8();
    if (!flags.zero)
        goto loc_2eb39;
    push(ds);
    push(dx);
    dx = memoryAGet16(ss, bp + 6); ds = memoryAGet16(ss, bp + 6 + 2); /*ggg2*/;
    cx = memoryAGet16(es, di + 4);
    bx = memoryAGet16(es, di);
    interrupt(0x21);
    dx = pop();
    ds = pop();
    if (flags.carry)
        goto loc_2eb36;
    if (ax == cx)
        goto loc_2eb39;
    ax = dx;
loc_2eb36: // 2da3:1106
    memoryASet16(ds, 0x02a4, ax);
loc_2eb39: // 2da3:1109
    bp = pop();
    sp += 2;
    cs = pop();
    sp += 4;
}
void sub_2ebf8() // 2da3:11c8 +far +stackDrop10
{
    sp -= 2;
    bx = sp;
    di = memoryAGet16(ss, bx + 8); es = memoryAGet16(ss, bx + 8 + 2); /*ggg2*/;
    cx = memoryAGet16(ss, bx + 6);
    al = memoryAGet(ss, bx + 4);
    flags.direction = 0;
    for (; cx != 0; --cx) stosb<ES_DI>(al);
    sp += 2;
    cs = pop();
    sp += 8;
}
void fixReloc(uint16_t seg)
{
    memoryASet16(0x0002 + seg, 0x0007, memoryAGet16(0x0002 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0005 + seg, 0x0001, memoryAGet16(0x0005 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0052 + seg, 0x000e, memoryAGet16(0x0052 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0056 + seg, 0x0003, memoryAGet16(0x0056 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0073 + seg, 0x0003, memoryAGet16(0x0073 + seg, 0x0003) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x00a4 + seg, 0x000b, memoryAGet16(0x00a4 + seg, 0x000b) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x00a8 + seg, 0x0001, memoryAGet16(0x00a8 + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x00aa + seg, 0x000f, memoryAGet16(0x00aa + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x00ae + seg, 0x0006, memoryAGet16(0x00ae + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x00b1 + seg, 0x0007, memoryAGet16(0x00b1 + seg, 0x0007) + seg); // 2bac -> 2d99
    memoryASet16(0x00b2 + seg, 0x0007, memoryAGet16(0x00b2 + seg, 0x0007) + seg); // 2bac -> 2d99
    memoryASet16(0x00b4 + seg, 0x0001, memoryAGet16(0x00b4 + seg, 0x0001) + seg); // 0000 -> 01ed
    memoryASet16(0x00b5 + seg, 0x0005, memoryAGet16(0x00b5 + seg, 0x0005) + seg); // 2bac -> 2d99
    memoryASet16(0x00b5 + seg, 0x000e, memoryAGet16(0x00b5 + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x00b6 + seg, 0x0005, memoryAGet16(0x00b6 + seg, 0x0005) + seg); // 2bac -> 2d99
    memoryASet16(0x00b7 + seg, 0x0002, memoryAGet16(0x00b7 + seg, 0x0002) + seg); // 2bac -> 2d99
    memoryASet16(0x00b7 + seg, 0x000b, memoryAGet16(0x00b7 + seg, 0x000b) + seg); // 0000 -> 01ed
    memoryASet16(0x00b8 + seg, 0x0002, memoryAGet16(0x00b8 + seg, 0x0002) + seg); // 2bac -> 2d99
    memoryASet16(0x00b9 + seg, 0x0009, memoryAGet16(0x00b9 + seg, 0x0009) + seg); // 2bac -> 2d99
    memoryASet16(0x00ba + seg, 0x0009, memoryAGet16(0x00ba + seg, 0x0009) + seg); // 2bac -> 2d99
    memoryASet16(0x00be + seg, 0x0003, memoryAGet16(0x00be + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x00c2 + seg, 0x0007, memoryAGet16(0x00c2 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x00f2 + seg, 0x000f, memoryAGet16(0x00f2 + seg, 0x000f) + seg); // 26c6 -> 28b3
    memoryASet16(0x0105 + seg, 0x0000, memoryAGet16(0x0105 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0106 + seg, 0x0004, memoryAGet16(0x0106 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0113 + seg, 0x000e, memoryAGet16(0x0113 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x011b + seg, 0x0007, memoryAGet16(0x011b + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0121 + seg, 0x0007, memoryAGet16(0x0121 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0127 + seg, 0x0008, memoryAGet16(0x0127 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x012d + seg, 0x000b, memoryAGet16(0x012d + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0133 + seg, 0x000c, memoryAGet16(0x0133 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0139 + seg, 0x000d, memoryAGet16(0x0139 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x013f + seg, 0x000e, memoryAGet16(0x013f + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0143 + seg, 0x000c, memoryAGet16(0x0143 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0147 + seg, 0x000a, memoryAGet16(0x0147 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x014b + seg, 0x0008, memoryAGet16(0x014b + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x014f + seg, 0x0003, memoryAGet16(0x014f + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0152 + seg, 0x000e, memoryAGet16(0x0152 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0156 + seg, 0x0009, memoryAGet16(0x0156 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x015a + seg, 0x0004, memoryAGet16(0x015a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x015d + seg, 0x000f, memoryAGet16(0x015d + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0161 + seg, 0x000a, memoryAGet16(0x0161 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0165 + seg, 0x0005, memoryAGet16(0x0165 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0169 + seg, 0x0000, memoryAGet16(0x0169 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x016c + seg, 0x000b, memoryAGet16(0x016c + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0170 + seg, 0x000a, memoryAGet16(0x0170 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0174 + seg, 0x0009, memoryAGet16(0x0174 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0178 + seg, 0x0008, memoryAGet16(0x0178 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x017c + seg, 0x0007, memoryAGet16(0x017c + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0180 + seg, 0x0002, memoryAGet16(0x0180 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0183 + seg, 0x000d, memoryAGet16(0x0183 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x018a + seg, 0x0008, memoryAGet16(0x018a + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0191 + seg, 0x0003, memoryAGet16(0x0191 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0192 + seg, 0x0008, memoryAGet16(0x0192 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0198 + seg, 0x000e, memoryAGet16(0x0198 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x019f + seg, 0x0005, memoryAGet16(0x019f + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01a5 + seg, 0x000b, memoryAGet16(0x01a5 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01ac + seg, 0x0002, memoryAGet16(0x01ac + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01af + seg, 0x000d, memoryAGet16(0x01af + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01b3 + seg, 0x0008, memoryAGet16(0x01b3 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01b7 + seg, 0x0003, memoryAGet16(0x01b7 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01ba + seg, 0x000e, memoryAGet16(0x01ba + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01be + seg, 0x0009, memoryAGet16(0x01be + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01c5 + seg, 0x0004, memoryAGet16(0x01c5 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01d0 + seg, 0x000c, memoryAGet16(0x01d0 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01d6 + seg, 0x000f, memoryAGet16(0x01d6 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01dd + seg, 0x0002, memoryAGet16(0x01dd + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01e3 + seg, 0x0005, memoryAGet16(0x01e3 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01e9 + seg, 0x0008, memoryAGet16(0x01e9 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01ed + seg, 0x0003, memoryAGet16(0x01ed + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01f0 + seg, 0x000e, memoryAGet16(0x01f0 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01f4 + seg, 0x0009, memoryAGet16(0x01f4 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01f8 + seg, 0x0004, memoryAGet16(0x01f8 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x01fe + seg, 0x0007, memoryAGet16(0x01fe + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x020a + seg, 0x0001, memoryAGet16(0x020a + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x020d + seg, 0x000c, memoryAGet16(0x020d + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0214 + seg, 0x0007, memoryAGet16(0x0214 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x021b + seg, 0x0002, memoryAGet16(0x021b + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0221 + seg, 0x000d, memoryAGet16(0x0221 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0228 + seg, 0x0000, memoryAGet16(0x0228 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x022e + seg, 0x0003, memoryAGet16(0x022e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0234 + seg, 0x0006, memoryAGet16(0x0234 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x023a + seg, 0x0009, memoryAGet16(0x023a + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0244 + seg, 0x0003, memoryAGet16(0x0244 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0260 + seg, 0x0009, memoryAGet16(0x0260 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0263 + seg, 0x0000, memoryAGet16(0x0263 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0263 + seg, 0x000f, memoryAGet16(0x0263 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0267 + seg, 0x0000, memoryAGet16(0x0267 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0268 + seg, 0x0008, memoryAGet16(0x0268 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0269 + seg, 0x000c, memoryAGet16(0x0269 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x026d + seg, 0x000c, memoryAGet16(0x026d + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0271 + seg, 0x0006, memoryAGet16(0x0271 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0272 + seg, 0x0001, memoryAGet16(0x0272 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0279 + seg, 0x000b, memoryAGet16(0x0279 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x027a + seg, 0x000d, memoryAGet16(0x027a + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x027c + seg, 0x0006, memoryAGet16(0x027c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0280 + seg, 0x000c, memoryAGet16(0x0280 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0286 + seg, 0x000e, memoryAGet16(0x0286 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x028b + seg, 0x0006, memoryAGet16(0x028b + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x028c + seg, 0x0008, memoryAGet16(0x028c + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x028e + seg, 0x0001, memoryAGet16(0x028e + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0292 + seg, 0x0007, memoryAGet16(0x0292 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x0298 + seg, 0x0009, memoryAGet16(0x0298 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x029d + seg, 0x0001, memoryAGet16(0x029d + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x029e + seg, 0x0003, memoryAGet16(0x029e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x029f + seg, 0x000c, memoryAGet16(0x029f + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02a4 + seg, 0x0002, memoryAGet16(0x02a4 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x02aa + seg, 0x0004, memoryAGet16(0x02aa + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x02ae + seg, 0x000c, memoryAGet16(0x02ae + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02af + seg, 0x000e, memoryAGet16(0x02af + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02b1 + seg, 0x0007, memoryAGet16(0x02b1 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02b5 + seg, 0x000d, memoryAGet16(0x02b5 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x02bb + seg, 0x000f, memoryAGet16(0x02bb + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x02c0 + seg, 0x0007, memoryAGet16(0x02c0 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02c2 + seg, 0x000b, memoryAGet16(0x02c2 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02c3 + seg, 0x000a, memoryAGet16(0x02c3 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02c4 + seg, 0x000a, memoryAGet16(0x02c4 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02ca + seg, 0x000f, memoryAGet16(0x02ca + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02d1 + seg, 0x0004, memoryAGet16(0x02d1 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02d7 + seg, 0x0009, memoryAGet16(0x02d7 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02dd + seg, 0x000e, memoryAGet16(0x02dd + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02e4 + seg, 0x0003, memoryAGet16(0x02e4 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02ed + seg, 0x0001, memoryAGet16(0x02ed + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02f3 + seg, 0x0006, memoryAGet16(0x02f3 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x02f9 + seg, 0x000b, memoryAGet16(0x02f9 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0300 + seg, 0x0000, memoryAGet16(0x0300 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0306 + seg, 0x0003, memoryAGet16(0x0306 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x030c + seg, 0x0006, memoryAGet16(0x030c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0318 + seg, 0x0002, memoryAGet16(0x0318 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0323 + seg, 0x000c, memoryAGet16(0x0323 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x032f + seg, 0x0008, memoryAGet16(0x032f + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x033b + seg, 0x0004, memoryAGet16(0x033b + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0347 + seg, 0x0000, memoryAGet16(0x0347 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x035f + seg, 0x0003, memoryAGet16(0x035f + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0361 + seg, 0x0008, memoryAGet16(0x0361 + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0362 + seg, 0x000b, memoryAGet16(0x0362 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0366 + seg, 0x0009, memoryAGet16(0x0366 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x036c + seg, 0x0005, memoryAGet16(0x036c + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x036f + seg, 0x000e, memoryAGet16(0x036f + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x037b + seg, 0x000a, memoryAGet16(0x037b + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0387 + seg, 0x0006, memoryAGet16(0x0387 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0393 + seg, 0x0002, memoryAGet16(0x0393 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03a4 + seg, 0x0002, memoryAGet16(0x03a4 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03ba + seg, 0x000a, memoryAGet16(0x03ba + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03c6 + seg, 0x0006, memoryAGet16(0x03c6 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03d2 + seg, 0x0002, memoryAGet16(0x03d2 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03dd + seg, 0x000e, memoryAGet16(0x03dd + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03e4 + seg, 0x0003, memoryAGet16(0x03e4 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03ea + seg, 0x0008, memoryAGet16(0x03ea + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x03ef + seg, 0x0009, memoryAGet16(0x03ef + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x03f4 + seg, 0x000c, memoryAGet16(0x03f4 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x03f9 + seg, 0x0008, memoryAGet16(0x03f9 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x03fe + seg, 0x0006, memoryAGet16(0x03fe + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0400 + seg, 0x000f, memoryAGet16(0x0400 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0404 + seg, 0x000b, memoryAGet16(0x0404 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0409 + seg, 0x0009, memoryAGet16(0x0409 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x040f + seg, 0x0006, memoryAGet16(0x040f + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0414 + seg, 0x0005, memoryAGet16(0x0414 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x0417 + seg, 0x0008, memoryAGet16(0x0417 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x041b + seg, 0x0006, memoryAGet16(0x041b + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0420 + seg, 0x0003, memoryAGet16(0x0420 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0426 + seg, 0x0002, memoryAGet16(0x0426 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x042b + seg, 0x0003, memoryAGet16(0x042b + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x042e + seg, 0x000b, memoryAGet16(0x042e + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0435 + seg, 0x0000, memoryAGet16(0x0435 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x043b + seg, 0x0005, memoryAGet16(0x043b + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0447 + seg, 0x0009, memoryAGet16(0x0447 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x0449 + seg, 0x0002, memoryAGet16(0x0449 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x044c + seg, 0x000e, memoryAGet16(0x044c + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0453 + seg, 0x0003, memoryAGet16(0x0453 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x045a + seg, 0x0004, memoryAGet16(0x045a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0466 + seg, 0x0000, memoryAGet16(0x0466 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0469 + seg, 0x000c, memoryAGet16(0x0469 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x046d + seg, 0x0008, memoryAGet16(0x046d + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0471 + seg, 0x0004, memoryAGet16(0x0471 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0478 + seg, 0x0008, memoryAGet16(0x0478 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x047f + seg, 0x000c, memoryAGet16(0x047f + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0487 + seg, 0x0000, memoryAGet16(0x0487 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x048b + seg, 0x0001, memoryAGet16(0x048b + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x048e + seg, 0x000d, memoryAGet16(0x048e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0492 + seg, 0x0009, memoryAGet16(0x0492 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0496 + seg, 0x0000, memoryAGet16(0x0496 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x0497 + seg, 0x0009, memoryAGet16(0x0497 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x049b + seg, 0x0005, memoryAGet16(0x049b + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x049f + seg, 0x0001, memoryAGet16(0x049f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04a2 + seg, 0x000d, memoryAGet16(0x04a2 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04a9 + seg, 0x0009, memoryAGet16(0x04a9 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04ad + seg, 0x0005, memoryAGet16(0x04ad + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04b1 + seg, 0x0001, memoryAGet16(0x04b1 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04b7 + seg, 0x0006, memoryAGet16(0x04b7 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04bb + seg, 0x0002, memoryAGet16(0x04bb + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04be + seg, 0x000e, memoryAGet16(0x04be + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04c2 + seg, 0x000a, memoryAGet16(0x04c2 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04c6 + seg, 0x0006, memoryAGet16(0x04c6 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04ca + seg, 0x0002, memoryAGet16(0x04ca + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04cd + seg, 0x000e, memoryAGet16(0x04cd + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04d1 + seg, 0x000a, memoryAGet16(0x04d1 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04d5 + seg, 0x0006, memoryAGet16(0x04d5 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04d9 + seg, 0x0002, memoryAGet16(0x04d9 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04df + seg, 0x0007, memoryAGet16(0x04df + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04e5 + seg, 0x000c, memoryAGet16(0x04e5 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04e9 + seg, 0x000a, memoryAGet16(0x04e9 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04ed + seg, 0x0006, memoryAGet16(0x04ed + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04f1 + seg, 0x0002, memoryAGet16(0x04f1 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04f7 + seg, 0x000e, memoryAGet16(0x04f7 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04fb + seg, 0x000a, memoryAGet16(0x04fb + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x04ff + seg, 0x0006, memoryAGet16(0x04ff + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0503 + seg, 0x0002, memoryAGet16(0x0503 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0506 + seg, 0x000b, memoryAGet16(0x0506 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x050a + seg, 0x0004, memoryAGet16(0x050a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x050e + seg, 0x0000, memoryAGet16(0x050e + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0511 + seg, 0x000c, memoryAGet16(0x0511 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0515 + seg, 0x0008, memoryAGet16(0x0515 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0519 + seg, 0x0004, memoryAGet16(0x0519 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x051c + seg, 0x000b, memoryAGet16(0x051c + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x051e + seg, 0x0004, memoryAGet16(0x051e + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0521 + seg, 0x000d, memoryAGet16(0x0521 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x0525 + seg, 0x0006, memoryAGet16(0x0525 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0528 + seg, 0x000f, memoryAGet16(0x0528 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x052c + seg, 0x0008, memoryAGet16(0x052c + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0534 + seg, 0x0003, memoryAGet16(0x0534 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0537 + seg, 0x000f, memoryAGet16(0x0537 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x053b + seg, 0x000b, memoryAGet16(0x053b + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x053f + seg, 0x0003, memoryAGet16(0x053f + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0541 + seg, 0x000c, memoryAGet16(0x0541 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0545 + seg, 0x0005, memoryAGet16(0x0545 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x0547 + seg, 0x000e, memoryAGet16(0x0547 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0553 + seg, 0x000a, memoryAGet16(0x0553 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0557 + seg, 0x0006, memoryAGet16(0x0557 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x055b + seg, 0x0002, memoryAGet16(0x055b + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x055e + seg, 0x000e, memoryAGet16(0x055e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0562 + seg, 0x000a, memoryAGet16(0x0562 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0566 + seg, 0x0006, memoryAGet16(0x0566 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x056a + seg, 0x0002, memoryAGet16(0x056a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x056d + seg, 0x000e, memoryAGet16(0x056d + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0574 + seg, 0x0003, memoryAGet16(0x0574 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0577 + seg, 0x000f, memoryAGet16(0x0577 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x057c + seg, 0x000e, memoryAGet16(0x057c + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x057f + seg, 0x0007, memoryAGet16(0x057f + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0584 + seg, 0x0000, memoryAGet16(0x0584 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x0589 + seg, 0x000c, memoryAGet16(0x0589 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x058e + seg, 0x0008, memoryAGet16(0x058e + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x0591 + seg, 0x0001, memoryAGet16(0x0591 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0594 + seg, 0x000d, memoryAGet16(0x0594 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0598 + seg, 0x0009, memoryAGet16(0x0598 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x059f + seg, 0x0006, memoryAGet16(0x059f + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05a6 + seg, 0x0003, memoryAGet16(0x05a6 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05b1 + seg, 0x000f, memoryAGet16(0x05b1 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05b5 + seg, 0x000b, memoryAGet16(0x05b5 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05b9 + seg, 0x0007, memoryAGet16(0x05b9 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05bd + seg, 0x0003, memoryAGet16(0x05bd + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05c4 + seg, 0x0000, memoryAGet16(0x05c4 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05ca + seg, 0x000d, memoryAGet16(0x05ca + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05d1 + seg, 0x000a, memoryAGet16(0x05d1 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05d5 + seg, 0x0003, memoryAGet16(0x05d5 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05d5 + seg, 0x000d, memoryAGet16(0x05d5 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x05d8 + seg, 0x0006, memoryAGet16(0x05d8 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05db + seg, 0x000f, memoryAGet16(0x05db + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x05dd + seg, 0x0008, memoryAGet16(0x05dd + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05e1 + seg, 0x0002, memoryAGet16(0x05e1 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x05e6 + seg, 0x0003, memoryAGet16(0x05e6 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x05ea + seg, 0x000b, memoryAGet16(0x05ea + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05ee + seg, 0x0007, memoryAGet16(0x05ee + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x05f4 + seg, 0x0007, memoryAGet16(0x05f4 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x05f8 + seg, 0x000f, memoryAGet16(0x05f8 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x05fc + seg, 0x0008, memoryAGet16(0x05fc + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x05ff + seg, 0x0001, memoryAGet16(0x05ff + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0602 + seg, 0x000a, memoryAGet16(0x0602 + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x0604 + seg, 0x0003, memoryAGet16(0x0604 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0607 + seg, 0x0006, memoryAGet16(0x0607 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x060b + seg, 0x000e, memoryAGet16(0x060b + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x060f + seg, 0x0007, memoryAGet16(0x060f + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x0613 + seg, 0x0000, memoryAGet16(0x0613 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0616 + seg, 0x0009, memoryAGet16(0x0616 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x061a + seg, 0x0002, memoryAGet16(0x061a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0620 + seg, 0x000a, memoryAGet16(0x0620 + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x0628 + seg, 0x0001, memoryAGet16(0x0628 + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x062f + seg, 0x0008, memoryAGet16(0x062f + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x0637 + seg, 0x0003, memoryAGet16(0x0637 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0639 + seg, 0x000c, memoryAGet16(0x0639 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x063f + seg, 0x000b, memoryAGet16(0x063f + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0643 + seg, 0x0004, memoryAGet16(0x0643 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0646 + seg, 0x000c, memoryAGet16(0x0646 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x064a + seg, 0x0005, memoryAGet16(0x064a + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x064d + seg, 0x000d, memoryAGet16(0x064d + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x0651 + seg, 0x0006, memoryAGet16(0x0651 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0654 + seg, 0x000e, memoryAGet16(0x0654 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x0657 + seg, 0x0007, memoryAGet16(0x0657 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x065b + seg, 0x0002, memoryAGet16(0x065b + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x065f + seg, 0x000f, memoryAGet16(0x065f + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x0662 + seg, 0x0008, memoryAGet16(0x0662 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0666 + seg, 0x0004, memoryAGet16(0x0666 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x066c + seg, 0x0000, memoryAGet16(0x066c + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x066d + seg, 0x0009, memoryAGet16(0x066d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0671 + seg, 0x0002, memoryAGet16(0x0671 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x0673 + seg, 0x000b, memoryAGet16(0x0673 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0677 + seg, 0x0004, memoryAGet16(0x0677 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x0679 + seg, 0x000d, memoryAGet16(0x0679 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x067d + seg, 0x0006, memoryAGet16(0x067d + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x067f + seg, 0x000f, memoryAGet16(0x067f + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0683 + seg, 0x0008, memoryAGet16(0x0683 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x0686 + seg, 0x0001, memoryAGet16(0x0686 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0689 + seg, 0x000a, memoryAGet16(0x0689 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x068a + seg, 0x0004, memoryAGet16(0x068a + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x068c + seg, 0x000d, memoryAGet16(0x068c + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0690 + seg, 0x0006, memoryAGet16(0x0690 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0691 + seg, 0x000f, memoryAGet16(0x0691 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0695 + seg, 0x000b, memoryAGet16(0x0695 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x069b + seg, 0x0007, memoryAGet16(0x069b + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x069d + seg, 0x0000, memoryAGet16(0x069d + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06a0 + seg, 0x000c, memoryAGet16(0x06a0 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x06a5 + seg, 0x0008, memoryAGet16(0x06a5 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x06a8 + seg, 0x0001, memoryAGet16(0x06a8 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06ab + seg, 0x0008, memoryAGet16(0x06ab + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x06ae + seg, 0x0001, memoryAGet16(0x06ae + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06b0 + seg, 0x0005, memoryAGet16(0x06b0 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06b1 + seg, 0x0004, memoryAGet16(0x06b1 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06b2 + seg, 0x0004, memoryAGet16(0x06b2 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06b5 + seg, 0x000e, memoryAGet16(0x06b5 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x06b9 + seg, 0x0008, memoryAGet16(0x06b9 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x06bd + seg, 0x0006, memoryAGet16(0x06bd + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x06c1 + seg, 0x0003, memoryAGet16(0x06c1 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x06c4 + seg, 0x000d, memoryAGet16(0x06c4 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x06c9 + seg, 0x000d, memoryAGet16(0x06c9 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x06ce + seg, 0x000b, memoryAGet16(0x06ce + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x06d5 + seg, 0x0000, memoryAGet16(0x06d5 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x06dc + seg, 0x000e, memoryAGet16(0x06dc + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x06e6 + seg, 0x0009, memoryAGet16(0x06e6 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x06ec + seg, 0x000e, memoryAGet16(0x06ec + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0b1b + seg, 0x0007, memoryAGet16(0x0b1b + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0b2c + seg, 0x0004, memoryAGet16(0x0b2c + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0b36 + seg, 0x0006, memoryAGet16(0x0b36 + seg, 0x0006) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0c0a + seg, 0x0006, memoryAGet16(0x0c0a + seg, 0x0006) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0cef + seg, 0x000b, memoryAGet16(0x0cef + seg, 0x000b) + seg); // 26c6 -> 28b3
    memoryASet16(0x0cf0 + seg, 0x0003, memoryAGet16(0x0cf0 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0cf1 + seg, 0x0006, memoryAGet16(0x0cf1 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0cf1 + seg, 0x000f, memoryAGet16(0x0cf1 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x0cf2 + seg, 0x000e, memoryAGet16(0x0cf2 + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x0cf3 + seg, 0x0009, memoryAGet16(0x0cf3 + seg, 0x0009) + seg); // 26c6 -> 28b3
    memoryASet16(0x0cf3 + seg, 0x000e, memoryAGet16(0x0cf3 + seg, 0x000e) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0cf8 + seg, 0x0004, memoryAGet16(0x0cf8 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x0cfe + seg, 0x000f, memoryAGet16(0x0cfe + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x0d03 + seg, 0x000c, memoryAGet16(0x0d03 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0d0c + seg, 0x000d, memoryAGet16(0x0d0c + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x0d10 + seg, 0x000d, memoryAGet16(0x0d10 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0d13 + seg, 0x000a, memoryAGet16(0x0d13 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0d17 + seg, 0x0000, memoryAGet16(0x0d17 + seg, 0x0000) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d18 + seg, 0x0003, memoryAGet16(0x0d18 + seg, 0x0003) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d1a + seg, 0x0009, memoryAGet16(0x0d1a + seg, 0x0009) + seg); // 2844 -> 2a31
    memoryASet16(0x0d1b + seg, 0x0002, memoryAGet16(0x0d1b + seg, 0x0002) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d1f + seg, 0x0003, memoryAGet16(0x0d1f + seg, 0x0003) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d29 + seg, 0x0003, memoryAGet16(0x0d29 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0d34 + seg, 0x0008, memoryAGet16(0x0d34 + seg, 0x0008) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d3b + seg, 0x000d, memoryAGet16(0x0d3b + seg, 0x000d) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d40 + seg, 0x000d, memoryAGet16(0x0d40 + seg, 0x000d) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d42 + seg, 0x000e, memoryAGet16(0x0d42 + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d44 + seg, 0x0006, memoryAGet16(0x0d44 + seg, 0x0006) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d47 + seg, 0x0008, memoryAGet16(0x0d47 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x0d49 + seg, 0x0004, memoryAGet16(0x0d49 + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d4b + seg, 0x0001, memoryAGet16(0x0d4b + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x0d4d + seg, 0x0008, memoryAGet16(0x0d4d + seg, 0x0008) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d53 + seg, 0x000f, memoryAGet16(0x0d53 + seg, 0x000f) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d56 + seg, 0x0004, memoryAGet16(0x0d56 + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d58 + seg, 0x0002, memoryAGet16(0x0d58 + seg, 0x0002) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d5d + seg, 0x000a, memoryAGet16(0x0d5d + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d5e + seg, 0x000d, memoryAGet16(0x0d5e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d60 + seg, 0x0005, memoryAGet16(0x0d60 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d61 + seg, 0x0005, memoryAGet16(0x0d61 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d61 + seg, 0x000f, memoryAGet16(0x0d61 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d62 + seg, 0x0009, memoryAGet16(0x0d62 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d63 + seg, 0x0007, memoryAGet16(0x0d63 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d64 + seg, 0x0006, memoryAGet16(0x0d64 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d65 + seg, 0x0004, memoryAGet16(0x0d65 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d65 + seg, 0x0009, memoryAGet16(0x0d65 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d67 + seg, 0x000b, memoryAGet16(0x0d67 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d68 + seg, 0x0003, memoryAGet16(0x0d68 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d68 + seg, 0x000d, memoryAGet16(0x0d68 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d69 + seg, 0x0002, memoryAGet16(0x0d69 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0d6a + seg, 0x000c, memoryAGet16(0x0d6a + seg, 0x000c) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d6b + seg, 0x000e, memoryAGet16(0x0d6b + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x0d6c + seg, 0x0003, memoryAGet16(0x0d6c + seg, 0x0003) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d6d + seg, 0x000a, memoryAGet16(0x0d6d + seg, 0x000a) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d6f + seg, 0x0009, memoryAGet16(0x0d6f + seg, 0x0009) + seg); // 2844 -> 2a31
    memoryASet16(0x0d71 + seg, 0x0006, memoryAGet16(0x0d71 + seg, 0x0006) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0d91 + seg, 0x000b, memoryAGet16(0x0d91 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0daa + seg, 0x0007, memoryAGet16(0x0daa + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x0dac + seg, 0x0008, memoryAGet16(0x0dac + seg, 0x0008) + seg); // 26c6 -> 28b3
    memoryASet16(0x0db2 + seg, 0x0005, memoryAGet16(0x0db2 + seg, 0x0005) + seg); // 26c6 -> 28b3
    memoryASet16(0x0db7 + seg, 0x000e, memoryAGet16(0x0db7 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0db8 + seg, 0x0003, memoryAGet16(0x0db8 + seg, 0x0003) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0dba + seg, 0x0004, memoryAGet16(0x0dba + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0dc0 + seg, 0x0001, memoryAGet16(0x0dc0 + seg, 0x0001) + seg); // 26c6 -> 28b3
    memoryASet16(0x0dc5 + seg, 0x000a, memoryAGet16(0x0dc5 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0dc5 + seg, 0x000f, memoryAGet16(0x0dc5 + seg, 0x000f) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0dfa + seg, 0x0000, memoryAGet16(0x0dfa + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x0dff + seg, 0x0004, memoryAGet16(0x0dff + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x0e01 + seg, 0x000e, memoryAGet16(0x0e01 + seg, 0x000e) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e02 + seg, 0x000d, memoryAGet16(0x0e02 + seg, 0x000d) + seg); // 2844 -> 2a31
    memoryASet16(0x0e08 + seg, 0x000d, memoryAGet16(0x0e08 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x0e0f + seg, 0x0002, memoryAGet16(0x0e0f + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x0e19 + seg, 0x0000, memoryAGet16(0x0e19 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x0e1d + seg, 0x0001, memoryAGet16(0x0e1d + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x0e20 + seg, 0x000f, memoryAGet16(0x0e20 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x0e24 + seg, 0x000d, memoryAGet16(0x0e24 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x0e28 + seg, 0x000c, memoryAGet16(0x0e28 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0e2c + seg, 0x0009, memoryAGet16(0x0e2c + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x0e31 + seg, 0x0005, memoryAGet16(0x0e31 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x0e39 + seg, 0x0006, memoryAGet16(0x0e39 + seg, 0x0006) + seg); // 2844 -> 2a31
    memoryASet16(0x0e3a + seg, 0x000b, memoryAGet16(0x0e3a + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0e3d + seg, 0x0006, memoryAGet16(0x0e3d + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0e46 + seg, 0x000f, memoryAGet16(0x0e46 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x0e4c + seg, 0x000c, memoryAGet16(0x0e4c + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0e57 + seg, 0x0002, memoryAGet16(0x0e57 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x0e58 + seg, 0x0002, memoryAGet16(0x0e58 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x0e5b + seg, 0x000b, memoryAGet16(0x0e5b + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0e5c + seg, 0x000b, memoryAGet16(0x0e5c + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x0e5f + seg, 0x0002, memoryAGet16(0x0e5f + seg, 0x0002) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e60 + seg, 0x0001, memoryAGet16(0x0e60 + seg, 0x0001) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e61 + seg, 0x0004, memoryAGet16(0x0e61 + seg, 0x0004) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e62 + seg, 0x0007, memoryAGet16(0x0e62 + seg, 0x0007) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e64 + seg, 0x0001, memoryAGet16(0x0e64 + seg, 0x0001) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0e77 + seg, 0x0004, memoryAGet16(0x0e77 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x0e88 + seg, 0x0007, memoryAGet16(0x0e88 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x0e99 + seg, 0x0006, memoryAGet16(0x0e99 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0e9f + seg, 0x000c, memoryAGet16(0x0e9f + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0ea6 + seg, 0x0004, memoryAGet16(0x0ea6 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x0eaa + seg, 0x0002, memoryAGet16(0x0eaa + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x0eb1 + seg, 0x0001, memoryAGet16(0x0eb1 + seg, 0x0001) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0eb9 + seg, 0x0005, memoryAGet16(0x0eb9 + seg, 0x0005) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0ec2 + seg, 0x0004, memoryAGet16(0x0ec2 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ec5 + seg, 0x000c, memoryAGet16(0x0ec5 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ec6 + seg, 0x0008, memoryAGet16(0x0ec6 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ecd + seg, 0x0003, memoryAGet16(0x0ecd + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ed3 + seg, 0x0003, memoryAGet16(0x0ed3 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0ed3 + seg, 0x000c, memoryAGet16(0x0ed3 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x0ed9 + seg, 0x0003, memoryAGet16(0x0ed9 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0edc + seg, 0x0006, memoryAGet16(0x0edc + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x0edc + seg, 0x000f, memoryAGet16(0x0edc + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0ede + seg, 0x0002, memoryAGet16(0x0ede + seg, 0x0002) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0eeb + seg, 0x000b, memoryAGet16(0x0eeb + seg, 0x000b) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0eee + seg, 0x000a, memoryAGet16(0x0eee + seg, 0x000a) + seg); // 26c6 -> 28b3
    memoryASet16(0x0ef0 + seg, 0x0001, memoryAGet16(0x0ef0 + seg, 0x0001) + seg); // 26c6 -> 28b3
    memoryASet16(0x0ef4 + seg, 0x0001, memoryAGet16(0x0ef4 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef6 + seg, 0x0008, memoryAGet16(0x0ef6 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef6 + seg, 0x000d, memoryAGet16(0x0ef6 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef7 + seg, 0x0002, memoryAGet16(0x0ef7 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef8 + seg, 0x0004, memoryAGet16(0x0ef8 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef8 + seg, 0x0009, memoryAGet16(0x0ef8 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef8 + seg, 0x000e, memoryAGet16(0x0ef8 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef9 + seg, 0x0005, memoryAGet16(0x0ef9 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ef9 + seg, 0x000e, memoryAGet16(0x0ef9 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0efa + seg, 0x0003, memoryAGet16(0x0efa + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0efa + seg, 0x0008, memoryAGet16(0x0efa + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x0efa + seg, 0x000d, memoryAGet16(0x0efa + seg, 0x000d) + seg); // 2844 -> 2a31
    memoryASet16(0x0efb + seg, 0x0002, memoryAGet16(0x0efb + seg, 0x0002) + seg); // 1d6f -> 1f5c
    memoryASet16(0x0efb + seg, 0x0007, memoryAGet16(0x0efb + seg, 0x0007) + seg); // 1d1e -> 1f0b
    memoryASet16(0x0efc + seg, 0x0005, memoryAGet16(0x0efc + seg, 0x0005) + seg); // 26c6 -> 28b3
    memoryASet16(0x0efc + seg, 0x000a, memoryAGet16(0x0efc + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0efd + seg, 0x000a, memoryAGet16(0x0efd + seg, 0x000a) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0efd + seg, 0x000f, memoryAGet16(0x0efd + seg, 0x000f) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0efe + seg, 0x0004, memoryAGet16(0x0efe + seg, 0x0004) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0efe + seg, 0x0009, memoryAGet16(0x0efe + seg, 0x0009) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0eff + seg, 0x0007, memoryAGet16(0x0eff + seg, 0x0007) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0f01 + seg, 0x0000, memoryAGet16(0x0f01 + seg, 0x0000) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0f01 + seg, 0x0008, memoryAGet16(0x0f01 + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f02 + seg, 0x0001, memoryAGet16(0x0f02 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f02 + seg, 0x000e, memoryAGet16(0x0f02 + seg, 0x000e) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0f03 + seg, 0x0007, memoryAGet16(0x0f03 + seg, 0x0007) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f03 + seg, 0x000f, memoryAGet16(0x0f03 + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f04 + seg, 0x000b, memoryAGet16(0x0f04 + seg, 0x000b) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f05 + seg, 0x000a, memoryAGet16(0x0f05 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f06 + seg, 0x0003, memoryAGet16(0x0f06 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f06 + seg, 0x000f, memoryAGet16(0x0f06 + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f07 + seg, 0x0004, memoryAGet16(0x0f07 + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f0f + seg, 0x0000, memoryAGet16(0x0f0f + seg, 0x0000) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0f0f + seg, 0x0008, memoryAGet16(0x0f0f + seg, 0x0008) + seg); // 2844 -> 2a31
    memoryASet16(0x0f17 + seg, 0x0007, memoryAGet16(0x0f17 + seg, 0x0007) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f1a + seg, 0x0009, memoryAGet16(0x0f1a + seg, 0x0009) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f1c + seg, 0x000e, memoryAGet16(0x0f1c + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f1f + seg, 0x0003, memoryAGet16(0x0f1f + seg, 0x0003) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f21 + seg, 0x000c, memoryAGet16(0x0f21 + seg, 0x000c) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f25 + seg, 0x000b, memoryAGet16(0x0f25 + seg, 0x000b) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f28 + seg, 0x0004, memoryAGet16(0x0f28 + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f2a + seg, 0x0005, memoryAGet16(0x0f2a + seg, 0x0005) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f2c + seg, 0x000a, memoryAGet16(0x0f2c + seg, 0x000a) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f30 + seg, 0x0009, memoryAGet16(0x0f30 + seg, 0x0009) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f33 + seg, 0x0002, memoryAGet16(0x0f33 + seg, 0x0002) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f35 + seg, 0x0003, memoryAGet16(0x0f35 + seg, 0x0003) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f37 + seg, 0x0008, memoryAGet16(0x0f37 + seg, 0x0008) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f40 + seg, 0x0000, memoryAGet16(0x0f40 + seg, 0x0000) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f48 + seg, 0x000f, memoryAGet16(0x0f48 + seg, 0x000f) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f66 + seg, 0x0003, memoryAGet16(0x0f66 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f6c + seg, 0x000f, memoryAGet16(0x0f6c + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f73 + seg, 0x000c, memoryAGet16(0x0f73 + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f75 + seg, 0x0003, memoryAGet16(0x0f75 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x0f75 + seg, 0x000e, memoryAGet16(0x0f75 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x0f7d + seg, 0x0001, memoryAGet16(0x0f7d + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0f80 + seg, 0x0008, memoryAGet16(0x0f80 + seg, 0x0008) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f84 + seg, 0x000e, memoryAGet16(0x0f84 + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f87 + seg, 0x0003, memoryAGet16(0x0f87 + seg, 0x0003) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f8e + seg, 0x000a, memoryAGet16(0x0f8e + seg, 0x000a) + seg); // 26c6 -> 28b3
    memoryASet16(0x0f94 + seg, 0x0007, memoryAGet16(0x0f94 + seg, 0x0007) + seg); // 26c6 -> 28b3
    memoryASet16(0x0fa0 + seg, 0x0007, memoryAGet16(0x0fa0 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0fa0 + seg, 0x000c, memoryAGet16(0x0fa0 + seg, 0x000c) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fa2 + seg, 0x000c, memoryAGet16(0x0fa2 + seg, 0x000c) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fa5 + seg, 0x0001, memoryAGet16(0x0fa5 + seg, 0x0001) + seg); // 26c6 -> 28b3
    memoryASet16(0x0fa8 + seg, 0x000f, memoryAGet16(0x0fa8 + seg, 0x000f) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fa9 + seg, 0x000f, memoryAGet16(0x0fa9 + seg, 0x000f) + seg); // 26c6 -> 28b3
    memoryASet16(0x0fab + seg, 0x0008, memoryAGet16(0x0fab + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fad + seg, 0x0000, memoryAGet16(0x0fad + seg, 0x0000) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fae + seg, 0x0008, memoryAGet16(0x0fae + seg, 0x0008) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fb0 + seg, 0x000b, memoryAGet16(0x0fb0 + seg, 0x000b) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fb2 + seg, 0x0009, memoryAGet16(0x0fb2 + seg, 0x0009) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fb3 + seg, 0x000a, memoryAGet16(0x0fb3 + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x0fb4 + seg, 0x000c, memoryAGet16(0x0fb4 + seg, 0x000c) + seg); // 26c6 -> 28b3
    memoryASet16(0x0fb5 + seg, 0x0001, memoryAGet16(0x0fb5 + seg, 0x0001) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fb5 + seg, 0x000a, memoryAGet16(0x0fb5 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x0fb5 + seg, 0x000f, memoryAGet16(0x0fb5 + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x0fb7 + seg, 0x000f, memoryAGet16(0x0fb7 + seg, 0x000f) + seg); // 0fc5 -> 11b2
    memoryASet16(0x0fb8 + seg, 0x000d, memoryAGet16(0x0fb8 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fbb + seg, 0x0007, memoryAGet16(0x0fbb + seg, 0x0007) + seg); // 0000 -> 01ed
    memoryASet16(0x0fbc + seg, 0x0002, memoryAGet16(0x0fbc + seg, 0x0002) + seg); // 0000 -> 01ed
    memoryASet16(0x0fbc + seg, 0x000d, memoryAGet16(0x0fbc + seg, 0x000d) + seg); // 0000 -> 01ed
    memoryASet16(0x0fbd + seg, 0x0008, memoryAGet16(0x0fbd + seg, 0x0008) + seg); // 0000 -> 01ed
    memoryASet16(0x0fbe + seg, 0x0003, memoryAGet16(0x0fbe + seg, 0x0003) + seg); // 0000 -> 01ed
    memoryASet16(0x0fbe + seg, 0x000e, memoryAGet16(0x0fbe + seg, 0x000e) + seg); // 0000 -> 01ed
    memoryASet16(0x0fd5 + seg, 0x0008, memoryAGet16(0x0fd5 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fd7 + seg, 0x0003, memoryAGet16(0x0fd7 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fd8 + seg, 0x000e, memoryAGet16(0x0fd8 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fda + seg, 0x0009, memoryAGet16(0x0fda + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fdc + seg, 0x0004, memoryAGet16(0x0fdc + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fdd + seg, 0x000f, memoryAGet16(0x0fdd + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fdf + seg, 0x000a, memoryAGet16(0x0fdf + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe1 + seg, 0x0005, memoryAGet16(0x0fe1 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe3 + seg, 0x0000, memoryAGet16(0x0fe3 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe4 + seg, 0x000b, memoryAGet16(0x0fe4 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe6 + seg, 0x0006, memoryAGet16(0x0fe6 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe8 + seg, 0x0001, memoryAGet16(0x0fe8 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fe9 + seg, 0x000c, memoryAGet16(0x0fe9 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0feb + seg, 0x0007, memoryAGet16(0x0feb + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fed + seg, 0x0002, memoryAGet16(0x0fed + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fee + seg, 0x000d, memoryAGet16(0x0fee + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff0 + seg, 0x0008, memoryAGet16(0x0ff0 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff2 + seg, 0x0003, memoryAGet16(0x0ff2 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff3 + seg, 0x000e, memoryAGet16(0x0ff3 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff5 + seg, 0x0009, memoryAGet16(0x0ff5 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff7 + seg, 0x0004, memoryAGet16(0x0ff7 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ff8 + seg, 0x000f, memoryAGet16(0x0ff8 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ffa + seg, 0x000a, memoryAGet16(0x0ffa + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ffc + seg, 0x0005, memoryAGet16(0x0ffc + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0ffe + seg, 0x0000, memoryAGet16(0x0ffe + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x0fff + seg, 0x000b, memoryAGet16(0x0fff + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1001 + seg, 0x0006, memoryAGet16(0x1001 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1003 + seg, 0x0001, memoryAGet16(0x1003 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1004 + seg, 0x000c, memoryAGet16(0x1004 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1006 + seg, 0x0007, memoryAGet16(0x1006 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1008 + seg, 0x0002, memoryAGet16(0x1008 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1009 + seg, 0x000d, memoryAGet16(0x1009 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x100b + seg, 0x0008, memoryAGet16(0x100b + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x100d + seg, 0x0003, memoryAGet16(0x100d + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x100e + seg, 0x000e, memoryAGet16(0x100e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1010 + seg, 0x0009, memoryAGet16(0x1010 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1012 + seg, 0x0004, memoryAGet16(0x1012 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1013 + seg, 0x000f, memoryAGet16(0x1013 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1015 + seg, 0x000a, memoryAGet16(0x1015 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1017 + seg, 0x0005, memoryAGet16(0x1017 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1019 + seg, 0x0000, memoryAGet16(0x1019 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x101a + seg, 0x000b, memoryAGet16(0x101a + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x101c + seg, 0x0006, memoryAGet16(0x101c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x101e + seg, 0x0001, memoryAGet16(0x101e + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x101f + seg, 0x000c, memoryAGet16(0x101f + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1021 + seg, 0x0007, memoryAGet16(0x1021 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1023 + seg, 0x0001, memoryAGet16(0x1023 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1024 + seg, 0x000b, memoryAGet16(0x1024 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1026 + seg, 0x0005, memoryAGet16(0x1026 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1027 + seg, 0x000f, memoryAGet16(0x1027 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1029 + seg, 0x0004, memoryAGet16(0x1029 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1032 + seg, 0x000d, memoryAGet16(0x1032 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1034 + seg, 0x0001, memoryAGet16(0x1034 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1037 + seg, 0x000a, memoryAGet16(0x1037 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1038 + seg, 0x0005, memoryAGet16(0x1038 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x103a + seg, 0x0002, memoryAGet16(0x103a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x103a + seg, 0x000c, memoryAGet16(0x103a + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x103e + seg, 0x000e, memoryAGet16(0x103e + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1042 + seg, 0x000d, memoryAGet16(0x1042 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1046 + seg, 0x0002, memoryAGet16(0x1046 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1054 + seg, 0x0003, memoryAGet16(0x1054 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1058 + seg, 0x000d, memoryAGet16(0x1058 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1059 + seg, 0x0007, memoryAGet16(0x1059 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x105b + seg, 0x0000, memoryAGet16(0x105b + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1063 + seg, 0x0009, memoryAGet16(0x1063 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1067 + seg, 0x0003, memoryAGet16(0x1067 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x106d + seg, 0x000c, memoryAGet16(0x106d + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1070 + seg, 0x000b, memoryAGet16(0x1070 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1074 + seg, 0x0002, memoryAGet16(0x1074 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1076 + seg, 0x0009, memoryAGet16(0x1076 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x107a + seg, 0x0004, memoryAGet16(0x107a + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x107c + seg, 0x0006, memoryAGet16(0x107c + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x107e + seg, 0x000a, memoryAGet16(0x107e + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1081 + seg, 0x000a, memoryAGet16(0x1081 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1083 + seg, 0x0009, memoryAGet16(0x1083 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1087 + seg, 0x0000, memoryAGet16(0x1087 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1089 + seg, 0x0007, memoryAGet16(0x1089 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x108c + seg, 0x000f, memoryAGet16(0x108c + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1090 + seg, 0x0004, memoryAGet16(0x1090 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1093 + seg, 0x0007, memoryAGet16(0x1093 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x1095 + seg, 0x000c, memoryAGet16(0x1095 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1098 + seg, 0x0003, memoryAGet16(0x1098 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1099 + seg, 0x0007, memoryAGet16(0x1099 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x109d + seg, 0x0009, memoryAGet16(0x109d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x109f + seg, 0x0007, memoryAGet16(0x109f + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10a3 + seg, 0x0005, memoryAGet16(0x10a3 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10a6 + seg, 0x0001, memoryAGet16(0x10a6 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10aa + seg, 0x0005, memoryAGet16(0x10aa + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10ac + seg, 0x0001, memoryAGet16(0x10ac + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10ae + seg, 0x0003, memoryAGet16(0x10ae + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10af + seg, 0x000f, memoryAGet16(0x10af + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10b2 + seg, 0x0006, memoryAGet16(0x10b2 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10b5 + seg, 0x0004, memoryAGet16(0x10b5 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10b6 + seg, 0x0004, memoryAGet16(0x10b6 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10be + seg, 0x0007, memoryAGet16(0x10be + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10bf + seg, 0x0004, memoryAGet16(0x10bf + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10cc + seg, 0x000d, memoryAGet16(0x10cc + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10d1 + seg, 0x0009, memoryAGet16(0x10d1 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10d2 + seg, 0x0003, memoryAGet16(0x10d2 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10d3 + seg, 0x000c, memoryAGet16(0x10d3 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10dc + seg, 0x0006, memoryAGet16(0x10dc + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x10e0 + seg, 0x0000, memoryAGet16(0x10e0 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10e6 + seg, 0x000d, memoryAGet16(0x10e6 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10e9 + seg, 0x000e, memoryAGet16(0x10e9 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10ed + seg, 0x0007, memoryAGet16(0x10ed + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10ef + seg, 0x000f, memoryAGet16(0x10ef + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10f3 + seg, 0x000c, memoryAGet16(0x10f3 + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10f5 + seg, 0x000e, memoryAGet16(0x10f5 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10f8 + seg, 0x0002, memoryAGet16(0x10f8 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10fb + seg, 0x0003, memoryAGet16(0x10fb + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x10fd + seg, 0x0002, memoryAGet16(0x10fd + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1100 + seg, 0x000b, memoryAGet16(0x1100 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1103 + seg, 0x0003, memoryAGet16(0x1103 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1106 + seg, 0x000d, memoryAGet16(0x1106 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x110a + seg, 0x0005, memoryAGet16(0x110a + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1110 + seg, 0x0002, memoryAGet16(0x1110 + seg, 0x0002) + seg); // 2854 -> 2a41
    memoryASet16(0x1110 + seg, 0x000e, memoryAGet16(0x1110 + seg, 0x000e) + seg); // 2854 -> 2a41
    memoryASet16(0x1112 + seg, 0x0001, memoryAGet16(0x1112 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1115 + seg, 0x0000, memoryAGet16(0x1115 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1116 + seg, 0x0000, memoryAGet16(0x1116 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1116 + seg, 0x0005, memoryAGet16(0x1116 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1117 + seg, 0x0004, memoryAGet16(0x1117 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1119 + seg, 0x0006, memoryAGet16(0x1119 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x111a + seg, 0x000c, memoryAGet16(0x111a + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x111e + seg, 0x0001, memoryAGet16(0x111e + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1120 + seg, 0x0003, memoryAGet16(0x1120 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1121 + seg, 0x0009, memoryAGet16(0x1121 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1122 + seg, 0x0005, memoryAGet16(0x1122 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1124 + seg, 0x000c, memoryAGet16(0x1124 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1126 + seg, 0x0000, memoryAGet16(0x1126 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x112a + seg, 0x0002, memoryAGet16(0x112a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x112c + seg, 0x0000, memoryAGet16(0x112c + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x112f + seg, 0x0005, memoryAGet16(0x112f + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1132 + seg, 0x0001, memoryAGet16(0x1132 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1136 + seg, 0x0005, memoryAGet16(0x1136 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1138 + seg, 0x0001, memoryAGet16(0x1138 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x113a + seg, 0x0003, memoryAGet16(0x113a + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x113b + seg, 0x000f, memoryAGet16(0x113b + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x113e + seg, 0x0006, memoryAGet16(0x113e + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x113f + seg, 0x000d, memoryAGet16(0x113f + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1141 + seg, 0x0008, memoryAGet16(0x1141 + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1142 + seg, 0x0005, memoryAGet16(0x1142 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x114b + seg, 0x000c, memoryAGet16(0x114b + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x114c + seg, 0x000f, memoryAGet16(0x114c + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1157 + seg, 0x0005, memoryAGet16(0x1157 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1159 + seg, 0x0003, memoryAGet16(0x1159 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x116e + seg, 0x000d, memoryAGet16(0x116e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1170 + seg, 0x000b, memoryAGet16(0x1170 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1172 + seg, 0x0009, memoryAGet16(0x1172 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1174 + seg, 0x0007, memoryAGet16(0x1174 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1176 + seg, 0x0005, memoryAGet16(0x1176 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1179 + seg, 0x0002, memoryAGet16(0x1179 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x117b + seg, 0x0000, memoryAGet16(0x117b + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x117d + seg, 0x000d, memoryAGet16(0x117d + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x117f + seg, 0x000b, memoryAGet16(0x117f + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x119d + seg, 0x0003, memoryAGet16(0x119d + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a0 + seg, 0x0000, memoryAGet16(0x11a0 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a1 + seg, 0x000e, memoryAGet16(0x11a1 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a3 + seg, 0x000c, memoryAGet16(0x11a3 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a5 + seg, 0x000a, memoryAGet16(0x11a5 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a7 + seg, 0x0008, memoryAGet16(0x11a7 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11a9 + seg, 0x0006, memoryAGet16(0x11a9 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11ab + seg, 0x0004, memoryAGet16(0x11ab + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11ad + seg, 0x0002, memoryAGet16(0x11ad + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11af + seg, 0x000f, memoryAGet16(0x11af + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11b1 + seg, 0x000d, memoryAGet16(0x11b1 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11b3 + seg, 0x000b, memoryAGet16(0x11b3 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11b6 + seg, 0x0008, memoryAGet16(0x11b6 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11b8 + seg, 0x0006, memoryAGet16(0x11b8 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11e1 + seg, 0x0003, memoryAGet16(0x11e1 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11e3 + seg, 0x0001, memoryAGet16(0x11e3 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11e5 + seg, 0x000e, memoryAGet16(0x11e5 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11e7 + seg, 0x000c, memoryAGet16(0x11e7 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11e9 + seg, 0x000a, memoryAGet16(0x11e9 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11eb + seg, 0x0008, memoryAGet16(0x11eb + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11ee + seg, 0x0005, memoryAGet16(0x11ee + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11f0 + seg, 0x0003, memoryAGet16(0x11f0 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11f2 + seg, 0x0001, memoryAGet16(0x11f2 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11f4 + seg, 0x000e, memoryAGet16(0x11f4 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11f6 + seg, 0x000c, memoryAGet16(0x11f6 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11f8 + seg, 0x000a, memoryAGet16(0x11f8 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11fb + seg, 0x0007, memoryAGet16(0x11fb + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x11fd + seg, 0x0005, memoryAGet16(0x11fd + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1201 + seg, 0x0000, memoryAGet16(0x1201 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1202 + seg, 0x000e, memoryAGet16(0x1202 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1205 + seg, 0x000b, memoryAGet16(0x1205 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1207 + seg, 0x0009, memoryAGet16(0x1207 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1209 + seg, 0x0007, memoryAGet16(0x1209 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x120c + seg, 0x0004, memoryAGet16(0x120c + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x120f + seg, 0x0001, memoryAGet16(0x120f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1210 + seg, 0x000f, memoryAGet16(0x1210 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1242 + seg, 0x0003, memoryAGet16(0x1242 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1244 + seg, 0x0001, memoryAGet16(0x1244 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1246 + seg, 0x000e, memoryAGet16(0x1246 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1249 + seg, 0x000b, memoryAGet16(0x1249 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x124b + seg, 0x0009, memoryAGet16(0x124b + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x124d + seg, 0x0007, memoryAGet16(0x124d + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x124f + seg, 0x0005, memoryAGet16(0x124f + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1251 + seg, 0x0003, memoryAGet16(0x1251 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1253 + seg, 0x0001, memoryAGet16(0x1253 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1254 + seg, 0x000f, memoryAGet16(0x1254 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1257 + seg, 0x000c, memoryAGet16(0x1257 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1259 + seg, 0x000a, memoryAGet16(0x1259 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x125d + seg, 0x000a, memoryAGet16(0x125d + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x125f + seg, 0x0008, memoryAGet16(0x125f + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1262 + seg, 0x0005, memoryAGet16(0x1262 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1265 + seg, 0x0002, memoryAGet16(0x1265 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1267 + seg, 0x0000, memoryAGet16(0x1267 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1268 + seg, 0x000e, memoryAGet16(0x1268 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x126a + seg, 0x000c, memoryAGet16(0x126a + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x126c + seg, 0x000a, memoryAGet16(0x126c + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x126e + seg, 0x0008, memoryAGet16(0x126e + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1271 + seg, 0x0005, memoryAGet16(0x1271 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1273 + seg, 0x0003, memoryAGet16(0x1273 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1277 + seg, 0x0003, memoryAGet16(0x1277 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1279 + seg, 0x0001, memoryAGet16(0x1279 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x127b + seg, 0x000e, memoryAGet16(0x127b + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x127e + seg, 0x000b, memoryAGet16(0x127e + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1280 + seg, 0x0009, memoryAGet16(0x1280 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1282 + seg, 0x0007, memoryAGet16(0x1282 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1284 + seg, 0x0005, memoryAGet16(0x1284 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1286 + seg, 0x0003, memoryAGet16(0x1286 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1288 + seg, 0x0001, memoryAGet16(0x1288 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1289 + seg, 0x000f, memoryAGet16(0x1289 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x128c + seg, 0x000c, memoryAGet16(0x128c + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x128f + seg, 0x0009, memoryAGet16(0x128f + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1291 + seg, 0x0007, memoryAGet16(0x1291 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12c0 + seg, 0x000d, memoryAGet16(0x12c0 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12c2 + seg, 0x000b, memoryAGet16(0x12c2 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12c5 + seg, 0x0008, memoryAGet16(0x12c5 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12c8 + seg, 0x0005, memoryAGet16(0x12c8 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12ca + seg, 0x0003, memoryAGet16(0x12ca + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12cc + seg, 0x0001, memoryAGet16(0x12cc + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12cd + seg, 0x000f, memoryAGet16(0x12cd + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12d0 + seg, 0x000c, memoryAGet16(0x12d0 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12d2 + seg, 0x000a, memoryAGet16(0x12d2 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12d4 + seg, 0x0008, memoryAGet16(0x12d4 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12d6 + seg, 0x0006, memoryAGet16(0x12d6 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12d8 + seg, 0x0004, memoryAGet16(0x12d8 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12db + seg, 0x0001, memoryAGet16(0x12db + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12dc + seg, 0x000f, memoryAGet16(0x12dc + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12e1 + seg, 0x0003, memoryAGet16(0x12e1 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12e3 + seg, 0x0001, memoryAGet16(0x12e3 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12e5 + seg, 0x000e, memoryAGet16(0x12e5 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12e8 + seg, 0x000b, memoryAGet16(0x12e8 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12ea + seg, 0x0009, memoryAGet16(0x12ea + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12ec + seg, 0x0007, memoryAGet16(0x12ec + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12ee + seg, 0x0005, memoryAGet16(0x12ee + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12f1 + seg, 0x0002, memoryAGet16(0x12f1 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12f3 + seg, 0x0000, memoryAGet16(0x12f3 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12f4 + seg, 0x000e, memoryAGet16(0x12f4 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12f6 + seg, 0x000c, memoryAGet16(0x12f6 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12f9 + seg, 0x0009, memoryAGet16(0x12f9 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12fc + seg, 0x0006, memoryAGet16(0x12fc + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x12fe + seg, 0x0004, memoryAGet16(0x12fe + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1306 + seg, 0x0000, memoryAGet16(0x1306 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1307 + seg, 0x000e, memoryAGet16(0x1307 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1309 + seg, 0x000c, memoryAGet16(0x1309 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x130b + seg, 0x000a, memoryAGet16(0x130b + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1325 + seg, 0x000c, memoryAGet16(0x1325 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1328 + seg, 0x0009, memoryAGet16(0x1328 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x132a + seg, 0x0007, memoryAGet16(0x132a + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x132d + seg, 0x0004, memoryAGet16(0x132d + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x132f + seg, 0x0002, memoryAGet16(0x132f + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1331 + seg, 0x000f, memoryAGet16(0x1331 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1333 + seg, 0x000d, memoryAGet16(0x1333 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1335 + seg, 0x000b, memoryAGet16(0x1335 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1338 + seg, 0x0008, memoryAGet16(0x1338 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x133a + seg, 0x0006, memoryAGet16(0x133a + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x133c + seg, 0x0004, memoryAGet16(0x133c + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x133f + seg, 0x0001, memoryAGet16(0x133f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1340 + seg, 0x000f, memoryAGet16(0x1340 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x135c + seg, 0x0001, memoryAGet16(0x135c + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x135e + seg, 0x000e, memoryAGet16(0x135e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1361 + seg, 0x000b, memoryAGet16(0x1361 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1363 + seg, 0x0009, memoryAGet16(0x1363 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1365 + seg, 0x0007, memoryAGet16(0x1365 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1367 + seg, 0x0005, memoryAGet16(0x1367 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x136a + seg, 0x0002, memoryAGet16(0x136a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x136c + seg, 0x0000, memoryAGet16(0x136c + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x136d + seg, 0x000e, memoryAGet16(0x136d + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1370 + seg, 0x000b, memoryAGet16(0x1370 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1372 + seg, 0x0009, memoryAGet16(0x1372 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1375 + seg, 0x0006, memoryAGet16(0x1375 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1377 + seg, 0x0004, memoryAGet16(0x1377 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1393 + seg, 0x0005, memoryAGet16(0x1393 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1396 + seg, 0x0002, memoryAGet16(0x1396 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1398 + seg, 0x0000, memoryAGet16(0x1398 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x139a + seg, 0x000d, memoryAGet16(0x139a + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x139c + seg, 0x000b, memoryAGet16(0x139c + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x139e + seg, 0x0009, memoryAGet16(0x139e + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13a1 + seg, 0x0006, memoryAGet16(0x13a1 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13a3 + seg, 0x0004, memoryAGet16(0x13a3 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13a6 + seg, 0x0001, memoryAGet16(0x13a6 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13a7 + seg, 0x000f, memoryAGet16(0x13a7 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13a9 + seg, 0x000d, memoryAGet16(0x13a9 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13ac + seg, 0x000a, memoryAGet16(0x13ac + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13ae + seg, 0x0008, memoryAGet16(0x13ae + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13b4 + seg, 0x0008, memoryAGet16(0x13b4 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13b6 + seg, 0x0009, memoryAGet16(0x13b6 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13ba + seg, 0x0008, memoryAGet16(0x13ba + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13bc + seg, 0x000d, memoryAGet16(0x13bc + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13be + seg, 0x000a, memoryAGet16(0x13be + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13c0 + seg, 0x0007, memoryAGet16(0x13c0 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13c2 + seg, 0x000c, memoryAGet16(0x13c2 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13c4 + seg, 0x0009, memoryAGet16(0x13c4 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13cf + seg, 0x0008, memoryAGet16(0x13cf + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d1 + seg, 0x0006, memoryAGet16(0x13d1 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d3 + seg, 0x0004, memoryAGet16(0x13d3 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d5 + seg, 0x000a, memoryAGet16(0x13d5 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d8 + seg, 0x0004, memoryAGet16(0x13d8 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d8 + seg, 0x000e, memoryAGet16(0x13d8 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13d9 + seg, 0x000d, memoryAGet16(0x13d9 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13db + seg, 0x0003, memoryAGet16(0x13db + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13db + seg, 0x000e, memoryAGet16(0x13db + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13dd + seg, 0x0000, memoryAGet16(0x13dd + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13de + seg, 0x000b, memoryAGet16(0x13de + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13e1 + seg, 0x000b, memoryAGet16(0x13e1 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13e3 + seg, 0x0009, memoryAGet16(0x13e3 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13e5 + seg, 0x0007, memoryAGet16(0x13e5 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13e7 + seg, 0x0005, memoryAGet16(0x13e7 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13e9 + seg, 0x0003, memoryAGet16(0x13e9 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13f2 + seg, 0x000c, memoryAGet16(0x13f2 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13f4 + seg, 0x000a, memoryAGet16(0x13f4 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13f6 + seg, 0x0008, memoryAGet16(0x13f6 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13f8 + seg, 0x0006, memoryAGet16(0x13f8 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13fa + seg, 0x0004, memoryAGet16(0x13fa + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13fc + seg, 0x0002, memoryAGet16(0x13fc + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x13fc + seg, 0x000b, memoryAGet16(0x13fc + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x13fe + seg, 0x0007, memoryAGet16(0x13fe + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1495 + seg, 0x0002, memoryAGet16(0x1495 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1497 + seg, 0x0000, memoryAGet16(0x1497 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1498 + seg, 0x000e, memoryAGet16(0x1498 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x149a + seg, 0x000c, memoryAGet16(0x149a + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x149c + seg, 0x000a, memoryAGet16(0x149c + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x149e + seg, 0x0008, memoryAGet16(0x149e + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a0 + seg, 0x0006, memoryAGet16(0x14a0 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a2 + seg, 0x0004, memoryAGet16(0x14a2 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a4 + seg, 0x0002, memoryAGet16(0x14a4 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a6 + seg, 0x0000, memoryAGet16(0x14a6 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a7 + seg, 0x000e, memoryAGet16(0x14a7 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14a9 + seg, 0x000c, memoryAGet16(0x14a9 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ab + seg, 0x000a, memoryAGet16(0x14ab + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ad + seg, 0x0008, memoryAGet16(0x14ad + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14af + seg, 0x0006, memoryAGet16(0x14af + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14b1 + seg, 0x0004, memoryAGet16(0x14b1 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14b3 + seg, 0x0002, memoryAGet16(0x14b3 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14b7 + seg, 0x0007, memoryAGet16(0x14b7 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14b9 + seg, 0x0005, memoryAGet16(0x14b9 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14bb + seg, 0x0003, memoryAGet16(0x14bb + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14bd + seg, 0x0001, memoryAGet16(0x14bd + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14be + seg, 0x000f, memoryAGet16(0x14be + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14c0 + seg, 0x000d, memoryAGet16(0x14c0 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14c2 + seg, 0x000b, memoryAGet16(0x14c2 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14c4 + seg, 0x0009, memoryAGet16(0x14c4 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14c6 + seg, 0x0007, memoryAGet16(0x14c6 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14c8 + seg, 0x0005, memoryAGet16(0x14c8 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ca + seg, 0x0003, memoryAGet16(0x14ca + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14cc + seg, 0x0001, memoryAGet16(0x14cc + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14cd + seg, 0x000f, memoryAGet16(0x14cd + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14cf + seg, 0x000d, memoryAGet16(0x14cf + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14d1 + seg, 0x000b, memoryAGet16(0x14d1 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14d3 + seg, 0x0009, memoryAGet16(0x14d3 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14d5 + seg, 0x0007, memoryAGet16(0x14d5 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14d9 + seg, 0x0008, memoryAGet16(0x14d9 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14dc + seg, 0x0005, memoryAGet16(0x14dc + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14de + seg, 0x0003, memoryAGet16(0x14de + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14e0 + seg, 0x0001, memoryAGet16(0x14e0 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14e1 + seg, 0x000f, memoryAGet16(0x14e1 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14e3 + seg, 0x000d, memoryAGet16(0x14e3 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14e5 + seg, 0x000b, memoryAGet16(0x14e5 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14e7 + seg, 0x0009, memoryAGet16(0x14e7 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ea + seg, 0x0006, memoryAGet16(0x14ea + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ec + seg, 0x0004, memoryAGet16(0x14ec + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ee + seg, 0x0002, memoryAGet16(0x14ee + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14f0 + seg, 0x0000, memoryAGet16(0x14f0 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14f2 + seg, 0x000d, memoryAGet16(0x14f2 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14f4 + seg, 0x000b, memoryAGet16(0x14f4 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14f9 + seg, 0x0000, memoryAGet16(0x14f9 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14fb + seg, 0x000d, memoryAGet16(0x14fb + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14fd + seg, 0x000b, memoryAGet16(0x14fd + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x14ff + seg, 0x0009, memoryAGet16(0x14ff + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1501 + seg, 0x0007, memoryAGet16(0x1501 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1503 + seg, 0x0005, memoryAGet16(0x1503 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1506 + seg, 0x0002, memoryAGet16(0x1506 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1508 + seg, 0x0000, memoryAGet16(0x1508 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1509 + seg, 0x000e, memoryAGet16(0x1509 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x150b + seg, 0x000c, memoryAGet16(0x150b + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x150d + seg, 0x000a, memoryAGet16(0x150d + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x150f + seg, 0x0008, memoryAGet16(0x150f + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1512 + seg, 0x0005, memoryAGet16(0x1512 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1514 + seg, 0x0003, memoryAGet16(0x1514 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1518 + seg, 0x0008, memoryAGet16(0x1518 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x151a + seg, 0x0006, memoryAGet16(0x151a + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x151c + seg, 0x0004, memoryAGet16(0x151c + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x151e + seg, 0x0002, memoryAGet16(0x151e + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1520 + seg, 0x0000, memoryAGet16(0x1520 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1521 + seg, 0x000e, memoryAGet16(0x1521 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1523 + seg, 0x000c, memoryAGet16(0x1523 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1525 + seg, 0x000a, memoryAGet16(0x1525 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1527 + seg, 0x0008, memoryAGet16(0x1527 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1529 + seg, 0x0006, memoryAGet16(0x1529 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x152b + seg, 0x0004, memoryAGet16(0x152b + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x152d + seg, 0x0002, memoryAGet16(0x152d + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x152f + seg, 0x0000, memoryAGet16(0x152f + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1530 + seg, 0x000e, memoryAGet16(0x1530 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1532 + seg, 0x000c, memoryAGet16(0x1532 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1534 + seg, 0x000a, memoryAGet16(0x1534 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1536 + seg, 0x0008, memoryAGet16(0x1536 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1538 + seg, 0x0006, memoryAGet16(0x1538 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x153c + seg, 0x000b, memoryAGet16(0x153c + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x153f + seg, 0x0008, memoryAGet16(0x153f + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1541 + seg, 0x0006, memoryAGet16(0x1541 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1544 + seg, 0x0003, memoryAGet16(0x1544 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1546 + seg, 0x0001, memoryAGet16(0x1546 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1548 + seg, 0x000e, memoryAGet16(0x1548 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x154a + seg, 0x000c, memoryAGet16(0x154a + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x154d + seg, 0x0009, memoryAGet16(0x154d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x154f + seg, 0x0007, memoryAGet16(0x154f + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1551 + seg, 0x0005, memoryAGet16(0x1551 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1554 + seg, 0x0002, memoryAGet16(0x1554 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1556 + seg, 0x0000, memoryAGet16(0x1556 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x155a + seg, 0x0005, memoryAGet16(0x155a + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x155d + seg, 0x0002, memoryAGet16(0x155d + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x155f + seg, 0x0000, memoryAGet16(0x155f + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1560 + seg, 0x000e, memoryAGet16(0x1560 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1563 + seg, 0x000b, memoryAGet16(0x1563 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1565 + seg, 0x0009, memoryAGet16(0x1565 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1567 + seg, 0x0007, memoryAGet16(0x1567 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x156a + seg, 0x0004, memoryAGet16(0x156a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x156c + seg, 0x0002, memoryAGet16(0x156c + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x156e + seg, 0x000f, memoryAGet16(0x156e + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1570 + seg, 0x000d, memoryAGet16(0x1570 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1573 + seg, 0x000a, memoryAGet16(0x1573 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1575 + seg, 0x0008, memoryAGet16(0x1575 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1580 + seg, 0x0009, memoryAGet16(0x1580 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1582 + seg, 0x0007, memoryAGet16(0x1582 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1584 + seg, 0x0005, memoryAGet16(0x1584 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1586 + seg, 0x0003, memoryAGet16(0x1586 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1588 + seg, 0x0001, memoryAGet16(0x1588 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1594 + seg, 0x0000, memoryAGet16(0x1594 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1595 + seg, 0x000e, memoryAGet16(0x1595 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1597 + seg, 0x000c, memoryAGet16(0x1597 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1599 + seg, 0x000a, memoryAGet16(0x1599 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x159b + seg, 0x0008, memoryAGet16(0x159b + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x159d + seg, 0x0006, memoryAGet16(0x159d + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15a8 + seg, 0x0001, memoryAGet16(0x15a8 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15a9 + seg, 0x000f, memoryAGet16(0x15a9 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15ab + seg, 0x000d, memoryAGet16(0x15ab + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15ad + seg, 0x000b, memoryAGet16(0x15ad + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15af + seg, 0x0009, memoryAGet16(0x15af + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15b6 + seg, 0x000f, memoryAGet16(0x15b6 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15b8 + seg, 0x000d, memoryAGet16(0x15b8 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15ba + seg, 0x000b, memoryAGet16(0x15ba + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15bc + seg, 0x0009, memoryAGet16(0x15bc + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15c2 + seg, 0x000b, memoryAGet16(0x15c2 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15c4 + seg, 0x0009, memoryAGet16(0x15c4 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15cb + seg, 0x0000, memoryAGet16(0x15cb + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15cc + seg, 0x000e, memoryAGet16(0x15cc + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15d0 + seg, 0x0000, memoryAGet16(0x15d0 + seg, 0x0000) + seg); // 2844 -> 2a31
    memoryASet16(0x15d1 + seg, 0x0002, memoryAGet16(0x15d1 + seg, 0x0002) + seg); // 2844 -> 2a31
    memoryASet16(0x15d1 + seg, 0x000e, memoryAGet16(0x15d1 + seg, 0x000e) + seg); // 2844 -> 2a31
    memoryASet16(0x15d7 + seg, 0x0004, memoryAGet16(0x15d7 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15d8 + seg, 0x0007, memoryAGet16(0x15d8 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15e3 + seg, 0x0001, memoryAGet16(0x15e3 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15e4 + seg, 0x000f, memoryAGet16(0x15e4 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15e6 + seg, 0x000d, memoryAGet16(0x15e6 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15e8 + seg, 0x000b, memoryAGet16(0x15e8 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15ea + seg, 0x0009, memoryAGet16(0x15ea + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x15ec + seg, 0x0007, memoryAGet16(0x15ec + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x160c + seg, 0x000d, memoryAGet16(0x160c + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x160e + seg, 0x000b, memoryAGet16(0x160e + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1610 + seg, 0x0009, memoryAGet16(0x1610 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1612 + seg, 0x0007, memoryAGet16(0x1612 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1614 + seg, 0x0005, memoryAGet16(0x1614 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1616 + seg, 0x0003, memoryAGet16(0x1616 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1618 + seg, 0x0001, memoryAGet16(0x1618 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1619 + seg, 0x000f, memoryAGet16(0x1619 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x161b + seg, 0x000d, memoryAGet16(0x161b + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x161d + seg, 0x000b, memoryAGet16(0x161d + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x161f + seg, 0x0009, memoryAGet16(0x161f + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1621 + seg, 0x0007, memoryAGet16(0x1621 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1623 + seg, 0x0005, memoryAGet16(0x1623 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1625 + seg, 0x0003, memoryAGet16(0x1625 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1627 + seg, 0x0001, memoryAGet16(0x1627 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1629 + seg, 0x000c, memoryAGet16(0x1629 + seg, 0x000c) + seg); // 2844 -> 2a31
    memoryASet16(0x162a + seg, 0x000e, memoryAGet16(0x162a + seg, 0x000e) + seg); // 2844 -> 2a31
    memoryASet16(0x162b + seg, 0x000a, memoryAGet16(0x162b + seg, 0x000a) + seg); // 2844 -> 2a31
    memoryASet16(0x1634 + seg, 0x0002, memoryAGet16(0x1634 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1635 + seg, 0x0005, memoryAGet16(0x1635 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1636 + seg, 0x0008, memoryAGet16(0x1636 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1637 + seg, 0x000b, memoryAGet16(0x1637 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1638 + seg, 0x000e, memoryAGet16(0x1638 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1640 + seg, 0x000e, memoryAGet16(0x1640 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1642 + seg, 0x0001, memoryAGet16(0x1642 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1643 + seg, 0x0004, memoryAGet16(0x1643 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1644 + seg, 0x0007, memoryAGet16(0x1644 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1645 + seg, 0x000a, memoryAGet16(0x1645 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x164d + seg, 0x000b, memoryAGet16(0x164d + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x164e + seg, 0x000e, memoryAGet16(0x164e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1650 + seg, 0x0001, memoryAGet16(0x1650 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1651 + seg, 0x0004, memoryAGet16(0x1651 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1652 + seg, 0x0007, memoryAGet16(0x1652 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x165b + seg, 0x0008, memoryAGet16(0x165b + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x165c + seg, 0x000b, memoryAGet16(0x165c + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x165d + seg, 0x000e, memoryAGet16(0x165d + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x165f + seg, 0x0001, memoryAGet16(0x165f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1660 + seg, 0x0004, memoryAGet16(0x1660 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x166c + seg, 0x0003, memoryAGet16(0x166c + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x166d + seg, 0x0006, memoryAGet16(0x166d + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x166e + seg, 0x0009, memoryAGet16(0x166e + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x166f + seg, 0x000c, memoryAGet16(0x166f + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1670 + seg, 0x000f, memoryAGet16(0x1670 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1672 + seg, 0x0002, memoryAGet16(0x1672 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1673 + seg, 0x0005, memoryAGet16(0x1673 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x167b + seg, 0x0008, memoryAGet16(0x167b + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x167d + seg, 0x0002, memoryAGet16(0x167d + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x167e + seg, 0x0007, memoryAGet16(0x167e + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x167f + seg, 0x000a, memoryAGet16(0x167f + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1680 + seg, 0x000d, memoryAGet16(0x1680 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1682 + seg, 0x0000, memoryAGet16(0x1682 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1688 + seg, 0x0003, memoryAGet16(0x1688 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1689 + seg, 0x000b, memoryAGet16(0x1689 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x168a + seg, 0x000e, memoryAGet16(0x168a + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1693 + seg, 0x0000, memoryAGet16(0x1693 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1694 + seg, 0x0003, memoryAGet16(0x1694 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1695 + seg, 0x000b, memoryAGet16(0x1695 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1696 + seg, 0x000b, memoryAGet16(0x1696 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1697 + seg, 0x0005, memoryAGet16(0x1697 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1697 + seg, 0x000f, memoryAGet16(0x1697 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1698 + seg, 0x000d, memoryAGet16(0x1698 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1699 + seg, 0x000c, memoryAGet16(0x1699 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169a + seg, 0x000a, memoryAGet16(0x169a + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169a + seg, 0x000f, memoryAGet16(0x169a + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169d + seg, 0x0001, memoryAGet16(0x169d + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169d + seg, 0x0009, memoryAGet16(0x169d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169e + seg, 0x0003, memoryAGet16(0x169e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x169e + seg, 0x0008, memoryAGet16(0x169e + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16a7 + seg, 0x0008, memoryAGet16(0x16a7 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16a9 + seg, 0x0006, memoryAGet16(0x16a9 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ab + seg, 0x0004, memoryAGet16(0x16ab + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ad + seg, 0x0002, memoryAGet16(0x16ad + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16af + seg, 0x0000, memoryAGet16(0x16af + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16b9 + seg, 0x0005, memoryAGet16(0x16b9 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16bb + seg, 0x0003, memoryAGet16(0x16bb + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16bd + seg, 0x0001, memoryAGet16(0x16bd + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16be + seg, 0x000f, memoryAGet16(0x16be + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c0 + seg, 0x000d, memoryAGet16(0x16c0 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c4 + seg, 0x000d, memoryAGet16(0x16c4 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c6 + seg, 0x0000, memoryAGet16(0x16c6 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c7 + seg, 0x0008, memoryAGet16(0x16c7 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c8 + seg, 0x0008, memoryAGet16(0x16c8 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c9 + seg, 0x0002, memoryAGet16(0x16c9 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16c9 + seg, 0x000c, memoryAGet16(0x16c9 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ca + seg, 0x000a, memoryAGet16(0x16ca + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16cb + seg, 0x0009, memoryAGet16(0x16cb + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16cc + seg, 0x0007, memoryAGet16(0x16cc + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16cc + seg, 0x000c, memoryAGet16(0x16cc + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16d6 + seg, 0x0007, memoryAGet16(0x16d6 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16d8 + seg, 0x0005, memoryAGet16(0x16d8 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16da + seg, 0x0003, memoryAGet16(0x16da + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16dc + seg, 0x0001, memoryAGet16(0x16dc + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16dd + seg, 0x000f, memoryAGet16(0x16dd + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16e7 + seg, 0x000c, memoryAGet16(0x16e7 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16e8 + seg, 0x0006, memoryAGet16(0x16e8 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16e9 + seg, 0x0004, memoryAGet16(0x16e9 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ea + seg, 0x0004, memoryAGet16(0x16ea + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ea + seg, 0x000e, memoryAGet16(0x16ea + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16eb + seg, 0x000c, memoryAGet16(0x16eb + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ec + seg, 0x000c, memoryAGet16(0x16ec + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ed + seg, 0x0006, memoryAGet16(0x16ed + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ee + seg, 0x0004, memoryAGet16(0x16ee + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ef + seg, 0x0004, memoryAGet16(0x16ef + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16ef + seg, 0x000e, memoryAGet16(0x16ef + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f0 + seg, 0x000c, memoryAGet16(0x16f0 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f1 + seg, 0x000f, memoryAGet16(0x16f1 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f3 + seg, 0x0007, memoryAGet16(0x16f3 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f4 + seg, 0x000a, memoryAGet16(0x16f4 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f5 + seg, 0x000d, memoryAGet16(0x16f5 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f7 + seg, 0x0000, memoryAGet16(0x16f7 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16f8 + seg, 0x0008, memoryAGet16(0x16f8 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x16fa + seg, 0x0000, memoryAGet16(0x16fa + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1706 + seg, 0x0008, memoryAGet16(0x1706 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1708 + seg, 0x0000, memoryAGet16(0x1708 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1709 + seg, 0x0008, memoryAGet16(0x1709 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x170a + seg, 0x000b, memoryAGet16(0x170a + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1716 + seg, 0x0009, memoryAGet16(0x1716 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1718 + seg, 0x0001, memoryAGet16(0x1718 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1719 + seg, 0x0004, memoryAGet16(0x1719 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x171c + seg, 0x0003, memoryAGet16(0x171c + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x171d + seg, 0x0008, memoryAGet16(0x171d + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1720 + seg, 0x000f, memoryAGet16(0x1720 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1722 + seg, 0x0007, memoryAGet16(0x1722 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1723 + seg, 0x000a, memoryAGet16(0x1723 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1726 + seg, 0x000e, memoryAGet16(0x1726 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1728 + seg, 0x0003, memoryAGet16(0x1728 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1729 + seg, 0x0004, memoryAGet16(0x1729 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x172c + seg, 0x000b, memoryAGet16(0x172c + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x172e + seg, 0x0003, memoryAGet16(0x172e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x172f + seg, 0x0006, memoryAGet16(0x172f + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1732 + seg, 0x000a, memoryAGet16(0x1732 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1733 + seg, 0x000f, memoryAGet16(0x1733 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1735 + seg, 0x0000, memoryAGet16(0x1735 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1736 + seg, 0x0001, memoryAGet16(0x1736 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1739 + seg, 0x0008, memoryAGet16(0x1739 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x173b + seg, 0x0000, memoryAGet16(0x173b + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x173c + seg, 0x0003, memoryAGet16(0x173c + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x173f + seg, 0x0002, memoryAGet16(0x173f + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1740 + seg, 0x0007, memoryAGet16(0x1740 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1741 + seg, 0x0008, memoryAGet16(0x1741 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1742 + seg, 0x0009, memoryAGet16(0x1742 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1743 + seg, 0x000a, memoryAGet16(0x1743 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1759 + seg, 0x0003, memoryAGet16(0x1759 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x175b + seg, 0x0001, memoryAGet16(0x175b + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x175c + seg, 0x000f, memoryAGet16(0x175c + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x175e + seg, 0x000d, memoryAGet16(0x175e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1760 + seg, 0x000b, memoryAGet16(0x1760 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1762 + seg, 0x0009, memoryAGet16(0x1762 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1764 + seg, 0x0007, memoryAGet16(0x1764 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1766 + seg, 0x0005, memoryAGet16(0x1766 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1769 + seg, 0x0002, memoryAGet16(0x1769 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x176b + seg, 0x000f, memoryAGet16(0x176b + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x176d + seg, 0x000d, memoryAGet16(0x176d + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1777 + seg, 0x0006, memoryAGet16(0x1777 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x179a + seg, 0x0003, memoryAGet16(0x179a + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x179c + seg, 0x0001, memoryAGet16(0x179c + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x179d + seg, 0x000f, memoryAGet16(0x179d + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x179f + seg, 0x000d, memoryAGet16(0x179f + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17a1 + seg, 0x000b, memoryAGet16(0x17a1 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17a3 + seg, 0x0009, memoryAGet16(0x17a3 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17a5 + seg, 0x0007, memoryAGet16(0x17a5 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17a7 + seg, 0x0005, memoryAGet16(0x17a7 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17a9 + seg, 0x0003, memoryAGet16(0x17a9 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17ab + seg, 0x0001, memoryAGet16(0x17ab + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17ac + seg, 0x000f, memoryAGet16(0x17ac + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17ae + seg, 0x000d, memoryAGet16(0x17ae + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17b1 + seg, 0x000a, memoryAGet16(0x17b1 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17b4 + seg, 0x0007, memoryAGet16(0x17b4 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17b6 + seg, 0x0005, memoryAGet16(0x17b6 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17d4 + seg, 0x000a, memoryAGet16(0x17d4 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17d5 + seg, 0x000e, memoryAGet16(0x17d5 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17d9 + seg, 0x0007, memoryAGet16(0x17d9 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17da + seg, 0x0002, memoryAGet16(0x17da + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17db + seg, 0x000f, memoryAGet16(0x17db + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17dc + seg, 0x0009, memoryAGet16(0x17dc + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17e0 + seg, 0x0006, memoryAGet16(0x17e0 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x17e4 + seg, 0x0000, memoryAGet16(0x17e4 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x17e7 + seg, 0x0000, memoryAGet16(0x17e7 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x17ed + seg, 0x000e, memoryAGet16(0x17ed + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x17ee + seg, 0x0007, memoryAGet16(0x17ee + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x17ef + seg, 0x0003, memoryAGet16(0x17ef + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x17ef + seg, 0x000f, memoryAGet16(0x17ef + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x17f2 + seg, 0x000a, memoryAGet16(0x17f2 + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x17f3 + seg, 0x000f, memoryAGet16(0x17f3 + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x17f5 + seg, 0x0003, memoryAGet16(0x17f5 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x17f5 + seg, 0x000f, memoryAGet16(0x17f5 + seg, 0x000f) + seg); // 26c6 -> 28b3
    memoryASet16(0x17f8 + seg, 0x0006, memoryAGet16(0x17f8 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x17fc + seg, 0x000a, memoryAGet16(0x17fc + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1800 + seg, 0x0000, memoryAGet16(0x1800 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1803 + seg, 0x0003, memoryAGet16(0x1803 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1804 + seg, 0x000a, memoryAGet16(0x1804 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1808 + seg, 0x0006, memoryAGet16(0x1808 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1812 + seg, 0x0002, memoryAGet16(0x1812 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1813 + seg, 0x0001, memoryAGet16(0x1813 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1813 + seg, 0x000f, memoryAGet16(0x1813 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1814 + seg, 0x0004, memoryAGet16(0x1814 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1816 + seg, 0x0006, memoryAGet16(0x1816 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1816 + seg, 0x000e, memoryAGet16(0x1816 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1817 + seg, 0x0008, memoryAGet16(0x1817 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1817 + seg, 0x000d, memoryAGet16(0x1817 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181a + seg, 0x0002, memoryAGet16(0x181a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181b + seg, 0x0001, memoryAGet16(0x181b + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181b + seg, 0x000f, memoryAGet16(0x181b + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181c + seg, 0x0004, memoryAGet16(0x181c + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181e + seg, 0x0009, memoryAGet16(0x181e + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181f + seg, 0x0001, memoryAGet16(0x181f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x181f + seg, 0x000b, memoryAGet16(0x181f + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1820 + seg, 0x0000, memoryAGet16(0x1820 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1823 + seg, 0x0006, memoryAGet16(0x1823 + seg, 0x0006) + seg); // 2844 -> 2a31
    memoryASet16(0x1824 + seg, 0x0008, memoryAGet16(0x1824 + seg, 0x0008) + seg); // 2844 -> 2a31
    memoryASet16(0x1825 + seg, 0x0004, memoryAGet16(0x1825 + seg, 0x0004) + seg); // 2844 -> 2a31
    memoryASet16(0x182a + seg, 0x0004, memoryAGet16(0x182a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182b + seg, 0x0003, memoryAGet16(0x182b + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182c + seg, 0x0001, memoryAGet16(0x182c + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182c + seg, 0x0006, memoryAGet16(0x182c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182e + seg, 0x0008, memoryAGet16(0x182e + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182f + seg, 0x0000, memoryAGet16(0x182f + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182f + seg, 0x000a, memoryAGet16(0x182f + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x182f + seg, 0x000f, memoryAGet16(0x182f + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183a + seg, 0x0000, memoryAGet16(0x183a + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183a + seg, 0x000f, memoryAGet16(0x183a + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183b + seg, 0x000d, memoryAGet16(0x183b + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183c + seg, 0x0002, memoryAGet16(0x183c + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183e + seg, 0x0006, memoryAGet16(0x183e + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183e + seg, 0x000e, memoryAGet16(0x183e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183f + seg, 0x0008, memoryAGet16(0x183f + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x183f + seg, 0x000d, memoryAGet16(0x183f + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1842 + seg, 0x000e, memoryAGet16(0x1842 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1845 + seg, 0x0000, memoryAGet16(0x1845 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1847 + seg, 0x0005, memoryAGet16(0x1847 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1849 + seg, 0x0009, memoryAGet16(0x1849 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x184b + seg, 0x000d, memoryAGet16(0x184b + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x184e + seg, 0x0001, memoryAGet16(0x184e + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1850 + seg, 0x0005, memoryAGet16(0x1850 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1852 + seg, 0x0009, memoryAGet16(0x1852 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1854 + seg, 0x000d, memoryAGet16(0x1854 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1857 + seg, 0x0000, memoryAGet16(0x1857 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1859 + seg, 0x0003, memoryAGet16(0x1859 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x185b + seg, 0x0006, memoryAGet16(0x185b + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x185d + seg, 0x0003, memoryAGet16(0x185d + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1860 + seg, 0x0002, memoryAGet16(0x1860 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1863 + seg, 0x0006, memoryAGet16(0x1863 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1864 + seg, 0x000e, memoryAGet16(0x1864 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1866 + seg, 0x0002, memoryAGet16(0x1866 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1898 + seg, 0x000f, memoryAGet16(0x1898 + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x1899 + seg, 0x0007, memoryAGet16(0x1899 + seg, 0x0007) + seg); // 2854 -> 2a41
    memoryASet16(0x1899 + seg, 0x000c, memoryAGet16(0x1899 + seg, 0x000c) + seg); // 2854 -> 2a41
    memoryASet16(0x189b + seg, 0x000e, memoryAGet16(0x189b + seg, 0x000e) + seg); // 2854 -> 2a41
    memoryASet16(0x189c + seg, 0x0008, memoryAGet16(0x189c + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x189d + seg, 0x0004, memoryAGet16(0x189d + seg, 0x0004) + seg); // 2854 -> 2a41
    memoryASet16(0x189e + seg, 0x000c, memoryAGet16(0x189e + seg, 0x000c) + seg); // 2854 -> 2a41
    memoryASet16(0x189f + seg, 0x0006, memoryAGet16(0x189f + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x18a0 + seg, 0x0006, memoryAGet16(0x18a0 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a0 + seg, 0x000b, memoryAGet16(0x18a0 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a1 + seg, 0x0000, memoryAGet16(0x18a1 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a1 + seg, 0x000e, memoryAGet16(0x18a1 + seg, 0x000e) + seg); // 2854 -> 2a41
    memoryASet16(0x18a2 + seg, 0x0008, memoryAGet16(0x18a2 + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x18a3 + seg, 0x0008, memoryAGet16(0x18a3 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a3 + seg, 0x000d, memoryAGet16(0x18a3 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a4 + seg, 0x0002, memoryAGet16(0x18a4 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18a6 + seg, 0x0008, memoryAGet16(0x18a6 + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x18a7 + seg, 0x0002, memoryAGet16(0x18a7 + seg, 0x0002) + seg); // 2854 -> 2a41
    memoryASet16(0x18a8 + seg, 0x0001, memoryAGet16(0x18a8 + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x18a9 + seg, 0x0009, memoryAGet16(0x18a9 + seg, 0x0009) + seg); // 2854 -> 2a41
    memoryASet16(0x18aa + seg, 0x0003, memoryAGet16(0x18aa + seg, 0x0003) + seg); // 2854 -> 2a41
    memoryASet16(0x18ab + seg, 0x0003, memoryAGet16(0x18ab + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18ab + seg, 0x0008, memoryAGet16(0x18ab + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18ab + seg, 0x000d, memoryAGet16(0x18ab + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18ac + seg, 0x000b, memoryAGet16(0x18ac + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x18ad + seg, 0x0005, memoryAGet16(0x18ad + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x18ae + seg, 0x0005, memoryAGet16(0x18ae + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18ae + seg, 0x000a, memoryAGet16(0x18ae + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18ae + seg, 0x000f, memoryAGet16(0x18ae + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x18b3 + seg, 0x0001, memoryAGet16(0x18b3 + seg, 0x0001) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18b5 + seg, 0x0001, memoryAGet16(0x18b5 + seg, 0x0001) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18b6 + seg, 0x0007, memoryAGet16(0x18b6 + seg, 0x0007) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18b8 + seg, 0x0008, memoryAGet16(0x18b8 + seg, 0x0008) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18b9 + seg, 0x000e, memoryAGet16(0x18b9 + seg, 0x000e) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18bb + seg, 0x0004, memoryAGet16(0x18bb + seg, 0x0004) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18bc + seg, 0x000a, memoryAGet16(0x18bc + seg, 0x000a) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18be + seg, 0x0000, memoryAGet16(0x18be + seg, 0x0000) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18bf + seg, 0x0006, memoryAGet16(0x18bf + seg, 0x0006) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c0 + seg, 0x000c, memoryAGet16(0x18c0 + seg, 0x000c) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c2 + seg, 0x0002, memoryAGet16(0x18c2 + seg, 0x0002) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c3 + seg, 0x0008, memoryAGet16(0x18c3 + seg, 0x0008) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c4 + seg, 0x000e, memoryAGet16(0x18c4 + seg, 0x000e) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c6 + seg, 0x0004, memoryAGet16(0x18c6 + seg, 0x0004) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c7 + seg, 0x000a, memoryAGet16(0x18c7 + seg, 0x000a) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c9 + seg, 0x0000, memoryAGet16(0x18c9 + seg, 0x0000) + seg); // 1d1e -> 1f0b
    memoryASet16(0x18c9 + seg, 0x0008, memoryAGet16(0x18c9 + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x18ca + seg, 0x0000, memoryAGet16(0x18ca + seg, 0x0000) + seg); // 2854 -> 2a41
    memoryASet16(0x18ca + seg, 0x000b, memoryAGet16(0x18ca + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x1915 + seg, 0x000b, memoryAGet16(0x1915 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1917 + seg, 0x0009, memoryAGet16(0x1917 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x191a + seg, 0x0006, memoryAGet16(0x191a + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x191c + seg, 0x0004, memoryAGet16(0x191c + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x191e + seg, 0x0002, memoryAGet16(0x191e + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1920 + seg, 0x0000, memoryAGet16(0x1920 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1922 + seg, 0x000d, memoryAGet16(0x1922 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1924 + seg, 0x000b, memoryAGet16(0x1924 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1926 + seg, 0x0009, memoryAGet16(0x1926 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1929 + seg, 0x0006, memoryAGet16(0x1929 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x192b + seg, 0x0004, memoryAGet16(0x192b + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x192d + seg, 0x0002, memoryAGet16(0x192d + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x192f + seg, 0x000f, memoryAGet16(0x192f + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1931 + seg, 0x000d, memoryAGet16(0x1931 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1935 + seg, 0x0008, memoryAGet16(0x1935 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1938 + seg, 0x0005, memoryAGet16(0x1938 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x193a + seg, 0x0003, memoryAGet16(0x193a + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x193d + seg, 0x0000, memoryAGet16(0x193d + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x193f + seg, 0x000d, memoryAGet16(0x193f + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1941 + seg, 0x000b, memoryAGet16(0x1941 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1943 + seg, 0x0009, memoryAGet16(0x1943 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1946 + seg, 0x0006, memoryAGet16(0x1946 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1948 + seg, 0x0004, memoryAGet16(0x1948 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x194b + seg, 0x0001, memoryAGet16(0x194b + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x194c + seg, 0x000f, memoryAGet16(0x194c + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x194f + seg, 0x000c, memoryAGet16(0x194f + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1951 + seg, 0x000a, memoryAGet16(0x1951 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1955 + seg, 0x0005, memoryAGet16(0x1955 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1958 + seg, 0x0002, memoryAGet16(0x1958 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x195a + seg, 0x0000, memoryAGet16(0x195a + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x195c + seg, 0x000d, memoryAGet16(0x195c + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x195e + seg, 0x000b, memoryAGet16(0x195e + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1960 + seg, 0x0009, memoryAGet16(0x1960 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1963 + seg, 0x0006, memoryAGet16(0x1963 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1965 + seg, 0x0004, memoryAGet16(0x1965 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1968 + seg, 0x0001, memoryAGet16(0x1968 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1969 + seg, 0x000f, memoryAGet16(0x1969 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x196b + seg, 0x000d, memoryAGet16(0x196b + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x196e + seg, 0x000a, memoryAGet16(0x196e + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1970 + seg, 0x0008, memoryAGet16(0x1970 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1974 + seg, 0x0003, memoryAGet16(0x1974 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1977 + seg, 0x0000, memoryAGet16(0x1977 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1979 + seg, 0x000d, memoryAGet16(0x1979 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x197b + seg, 0x000b, memoryAGet16(0x197b + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x197d + seg, 0x0009, memoryAGet16(0x197d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x197f + seg, 0x0007, memoryAGet16(0x197f + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1981 + seg, 0x0005, memoryAGet16(0x1981 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1984 + seg, 0x0002, memoryAGet16(0x1984 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1986 + seg, 0x000f, memoryAGet16(0x1986 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1988 + seg, 0x000d, memoryAGet16(0x1988 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x198a + seg, 0x000b, memoryAGet16(0x198a + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x198d + seg, 0x0008, memoryAGet16(0x198d + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x198f + seg, 0x0006, memoryAGet16(0x198f + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19ab + seg, 0x0003, memoryAGet16(0x19ab + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19ad + seg, 0x0001, memoryAGet16(0x19ad + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19af + seg, 0x000e, memoryAGet16(0x19af + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19b1 + seg, 0x000c, memoryAGet16(0x19b1 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19b3 + seg, 0x000a, memoryAGet16(0x19b3 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19b5 + seg, 0x0008, memoryAGet16(0x19b5 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19b7 + seg, 0x0006, memoryAGet16(0x19b7 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19ba + seg, 0x0003, memoryAGet16(0x19ba + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19bc + seg, 0x0001, memoryAGet16(0x19bc + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19bd + seg, 0x000f, memoryAGet16(0x19bd + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19bf + seg, 0x000d, memoryAGet16(0x19bf + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19c2 + seg, 0x000a, memoryAGet16(0x19c2 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19c5 + seg, 0x0007, memoryAGet16(0x19c5 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19c7 + seg, 0x0005, memoryAGet16(0x19c7 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19e4 + seg, 0x000a, memoryAGet16(0x19e4 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19e7 + seg, 0x0007, memoryAGet16(0x19e7 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19e9 + seg, 0x0005, memoryAGet16(0x19e9 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19eb + seg, 0x0003, memoryAGet16(0x19eb + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19ed + seg, 0x0001, memoryAGet16(0x19ed + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19ee + seg, 0x000f, memoryAGet16(0x19ee + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19f1 + seg, 0x000c, memoryAGet16(0x19f1 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19f3 + seg, 0x000a, memoryAGet16(0x19f3 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19f6 + seg, 0x0007, memoryAGet16(0x19f6 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19f8 + seg, 0x0005, memoryAGet16(0x19f8 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19fa + seg, 0x0003, memoryAGet16(0x19fa + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19fc + seg, 0x0001, memoryAGet16(0x19fc + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x19fe + seg, 0x000e, memoryAGet16(0x19fe + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a00 + seg, 0x000c, memoryAGet16(0x1a00 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a0e + seg, 0x0002, memoryAGet16(0x1a0e + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a10 + seg, 0x0000, memoryAGet16(0x1a10 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a11 + seg, 0x000e, memoryAGet16(0x1a11 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a13 + seg, 0x000c, memoryAGet16(0x1a13 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a16 + seg, 0x0009, memoryAGet16(0x1a16 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a18 + seg, 0x0007, memoryAGet16(0x1a18 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a21 + seg, 0x0009, memoryAGet16(0x1a21 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a23 + seg, 0x0007, memoryAGet16(0x1a23 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a25 + seg, 0x0005, memoryAGet16(0x1a25 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a27 + seg, 0x0003, memoryAGet16(0x1a27 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a2d + seg, 0x000a, memoryAGet16(0x1a2d + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a2e + seg, 0x000d, memoryAGet16(0x1a2e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a30 + seg, 0x0000, memoryAGet16(0x1a30 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a32 + seg, 0x0001, memoryAGet16(0x1a32 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a33 + seg, 0x0000, memoryAGet16(0x1a33 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a39 + seg, 0x0007, memoryAGet16(0x1a39 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a3a + seg, 0x000a, memoryAGet16(0x1a3a + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a45 + seg, 0x000a, memoryAGet16(0x1a45 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a46 + seg, 0x000d, memoryAGet16(0x1a46 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a6a + seg, 0x0002, memoryAGet16(0x1a6a + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a6b + seg, 0x000a, memoryAGet16(0x1a6b + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a6c + seg, 0x000d, memoryAGet16(0x1a6c + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a6e + seg, 0x0000, memoryAGet16(0x1a6e + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a6f + seg, 0x0003, memoryAGet16(0x1a6f + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a70 + seg, 0x000b, memoryAGet16(0x1a70 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a71 + seg, 0x000e, memoryAGet16(0x1a71 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a73 + seg, 0x0001, memoryAGet16(0x1a73 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a74 + seg, 0x0009, memoryAGet16(0x1a74 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a75 + seg, 0x000c, memoryAGet16(0x1a75 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a76 + seg, 0x000f, memoryAGet16(0x1a76 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a78 + seg, 0x0002, memoryAGet16(0x1a78 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a79 + seg, 0x000a, memoryAGet16(0x1a79 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a7a + seg, 0x000d, memoryAGet16(0x1a7a + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a87 + seg, 0x0006, memoryAGet16(0x1a87 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a88 + seg, 0x0009, memoryAGet16(0x1a88 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a8a + seg, 0x0001, memoryAGet16(0x1a8a + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a8b + seg, 0x0004, memoryAGet16(0x1a8b + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a92 + seg, 0x000b, memoryAGet16(0x1a92 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a94 + seg, 0x0003, memoryAGet16(0x1a94 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1a95 + seg, 0x0006, memoryAGet16(0x1a95 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa0 + seg, 0x0009, memoryAGet16(0x1aa0 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa1 + seg, 0x000c, memoryAGet16(0x1aa1 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa2 + seg, 0x000f, memoryAGet16(0x1aa2 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa4 + seg, 0x0002, memoryAGet16(0x1aa4 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa5 + seg, 0x000a, memoryAGet16(0x1aa5 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa6 + seg, 0x000d, memoryAGet16(0x1aa6 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1aa9 + seg, 0x0004, memoryAGet16(0x1aa9 + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1aa9 + seg, 0x000d, memoryAGet16(0x1aa9 + seg, 0x000d) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1aaa + seg, 0x0009, memoryAGet16(0x1aaa + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1aab + seg, 0x0005, memoryAGet16(0x1aab + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1aad + seg, 0x0004, memoryAGet16(0x1aad + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x1aae + seg, 0x0008, memoryAGet16(0x1aae + seg, 0x0008) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1aaf + seg, 0x0004, memoryAGet16(0x1aaf + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1aaf + seg, 0x000d, memoryAGet16(0x1aaf + seg, 0x000d) + seg); // 26c6 -> 28b3
    memoryASet16(0x1ab1 + seg, 0x000b, memoryAGet16(0x1ab1 + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x1ab3 + seg, 0x0004, memoryAGet16(0x1ab3 + seg, 0x0004) + seg); // 26c6 -> 28b3
    memoryASet16(0x1ab3 + seg, 0x000c, memoryAGet16(0x1ab3 + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1abf + seg, 0x000e, memoryAGet16(0x1abf + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x1ae2 + seg, 0x000b, memoryAGet16(0x1ae2 + seg, 0x000b) + seg); // 26c6 -> 28b3
    memoryASet16(0x1af3 + seg, 0x000e, memoryAGet16(0x1af3 + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x1b02 + seg, 0x0002, memoryAGet16(0x1b02 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1b04 + seg, 0x0005, memoryAGet16(0x1b04 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1b09 + seg, 0x000a, memoryAGet16(0x1b09 + seg, 0x000a) + seg); // 26c6 -> 28b3
    memoryASet16(0x1b0a + seg, 0x0002, memoryAGet16(0x1b0a + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1b0a + seg, 0x000b, memoryAGet16(0x1b0a + seg, 0x000b) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1b0b + seg, 0x0007, memoryAGet16(0x1b0b + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1b0c + seg, 0x0003, memoryAGet16(0x1b0c + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1b0e + seg, 0x000e, memoryAGet16(0x1b0e + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1b0f + seg, 0x0009, memoryAGet16(0x1b0f + seg, 0x0009) + seg); // 26c6 -> 28b3
    memoryASet16(0x1b11 + seg, 0x0006, memoryAGet16(0x1b11 + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x1b17 + seg, 0x000d, memoryAGet16(0x1b17 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b18 + seg, 0x000c, memoryAGet16(0x1b18 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b19 + seg, 0x000a, memoryAGet16(0x1b19 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b19 + seg, 0x000f, memoryAGet16(0x1b19 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1a + seg, 0x000f, memoryAGet16(0x1b1a + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1b + seg, 0x0007, memoryAGet16(0x1b1b + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1c + seg, 0x0001, memoryAGet16(0x1b1c + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1c + seg, 0x0006, memoryAGet16(0x1b1c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1d + seg, 0x0004, memoryAGet16(0x1b1d + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1e + seg, 0x0003, memoryAGet16(0x1b1e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1f + seg, 0x0001, memoryAGet16(0x1b1f + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b1f + seg, 0x0006, memoryAGet16(0x1b1f + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b20 + seg, 0x0006, memoryAGet16(0x1b20 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b20 + seg, 0x000e, memoryAGet16(0x1b20 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b21 + seg, 0x0008, memoryAGet16(0x1b21 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b21 + seg, 0x000d, memoryAGet16(0x1b21 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b22 + seg, 0x000b, memoryAGet16(0x1b22 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b23 + seg, 0x000a, memoryAGet16(0x1b23 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b24 + seg, 0x0008, memoryAGet16(0x1b24 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b24 + seg, 0x000d, memoryAGet16(0x1b24 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b25 + seg, 0x000d, memoryAGet16(0x1b25 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b26 + seg, 0x0005, memoryAGet16(0x1b26 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b26 + seg, 0x000f, memoryAGet16(0x1b26 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b27 + seg, 0x0004, memoryAGet16(0x1b27 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2a + seg, 0x0004, memoryAGet16(0x1b2a + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2b + seg, 0x0003, memoryAGet16(0x1b2b + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2c + seg, 0x0001, memoryAGet16(0x1b2c + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2c + seg, 0x0006, memoryAGet16(0x1b2c + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2e + seg, 0x0006, memoryAGet16(0x1b2e + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b2f + seg, 0x000d, memoryAGet16(0x1b2f + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b30 + seg, 0x0005, memoryAGet16(0x1b30 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b31 + seg, 0x0005, memoryAGet16(0x1b31 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b31 + seg, 0x000a, memoryAGet16(0x1b31 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b32 + seg, 0x000d, memoryAGet16(0x1b32 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b34 + seg, 0x0000, memoryAGet16(0x1b34 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b36 + seg, 0x0000, memoryAGet16(0x1b36 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b37 + seg, 0x0008, memoryAGet16(0x1b37 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b38 + seg, 0x0008, memoryAGet16(0x1b38 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b39 + seg, 0x0002, memoryAGet16(0x1b39 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b39 + seg, 0x000c, memoryAGet16(0x1b39 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3a + seg, 0x000a, memoryAGet16(0x1b3a + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3b + seg, 0x0009, memoryAGet16(0x1b3b + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3c + seg, 0x0007, memoryAGet16(0x1b3c + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3c + seg, 0x000c, memoryAGet16(0x1b3c + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3e + seg, 0x0003, memoryAGet16(0x1b3e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3e + seg, 0x000b, memoryAGet16(0x1b3e + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3f + seg, 0x0005, memoryAGet16(0x1b3f + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b3f + seg, 0x000a, memoryAGet16(0x1b3f + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1b49 + seg, 0x0001, memoryAGet16(0x1b49 + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x1b50 + seg, 0x0005, memoryAGet16(0x1b50 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1b54 + seg, 0x0009, memoryAGet16(0x1b54 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x1b5e + seg, 0x000a, memoryAGet16(0x1b5e + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1b5f + seg, 0x000d, memoryAGet16(0x1b5f + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1b6e + seg, 0x000c, memoryAGet16(0x1b6e + seg, 0x000c) + seg); // 26c6 -> 28b3
    memoryASet16(0x1b71 + seg, 0x0001, memoryAGet16(0x1b71 + seg, 0x0001) + seg); // 26c6 -> 28b3
    memoryASet16(0x1b7f + seg, 0x0009, memoryAGet16(0x1b7f + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x1b82 + seg, 0x0005, memoryAGet16(0x1b82 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1b86 + seg, 0x000b, memoryAGet16(0x1b86 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x1b8a + seg, 0x0006, memoryAGet16(0x1b8a + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x1b92 + seg, 0x0002, memoryAGet16(0x1b92 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1b92 + seg, 0x000f, memoryAGet16(0x1b92 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x1b9b + seg, 0x0002, memoryAGet16(0x1b9b + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1b9b + seg, 0x000d, memoryAGet16(0x1b9b + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x1b9e + seg, 0x000e, memoryAGet16(0x1b9e + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x1ba4 + seg, 0x0003, memoryAGet16(0x1ba4 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x1ba4 + seg, 0x000e, memoryAGet16(0x1ba4 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x1ba7 + seg, 0x000f, memoryAGet16(0x1ba7 + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x1bad + seg, 0x0004, memoryAGet16(0x1bad + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1bad + seg, 0x000f, memoryAGet16(0x1bad + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x1bb1 + seg, 0x0000, memoryAGet16(0x1bb1 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1bb6 + seg, 0x0005, memoryAGet16(0x1bb6 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1bb7 + seg, 0x0000, memoryAGet16(0x1bb7 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1bba + seg, 0x0001, memoryAGet16(0x1bba + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x1bbf + seg, 0x0005, memoryAGet16(0x1bbf + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1bbf + seg, 0x000e, memoryAGet16(0x1bbf + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x1bc3 + seg, 0x0000, memoryAGet16(0x1bc3 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1bc8 + seg, 0x0000, memoryAGet16(0x1bc8 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1bcb + seg, 0x0002, memoryAGet16(0x1bcb + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1bd0 + seg, 0x0002, memoryAGet16(0x1bd0 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1bd0 + seg, 0x000b, memoryAGet16(0x1bd0 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x1bd3 + seg, 0x000d, memoryAGet16(0x1bd3 + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x1bd8 + seg, 0x0003, memoryAGet16(0x1bd8 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x1bda + seg, 0x000a, memoryAGet16(0x1bda + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x1be4 + seg, 0x0002, memoryAGet16(0x1be4 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1be5 + seg, 0x0006, memoryAGet16(0x1be5 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x1be6 + seg, 0x000b, memoryAGet16(0x1be6 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x1be7 + seg, 0x0004, memoryAGet16(0x1be7 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1bea + seg, 0x0005, memoryAGet16(0x1bea + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1bef + seg, 0x0005, memoryAGet16(0x1bef + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1bef + seg, 0x000e, memoryAGet16(0x1bef + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x1bf3 + seg, 0x0000, memoryAGet16(0x1bf3 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1bf9 + seg, 0x0002, memoryAGet16(0x1bf9 + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1bfb + seg, 0x0009, memoryAGet16(0x1bfb + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x1c00 + seg, 0x0003, memoryAGet16(0x1c00 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x1c02 + seg, 0x000a, memoryAGet16(0x1c02 + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x1c0c + seg, 0x0006, memoryAGet16(0x1c0c + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x1c0d + seg, 0x0004, memoryAGet16(0x1c0d + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1c11 + seg, 0x000c, memoryAGet16(0x1c11 + seg, 0x000c) + seg); // 1f9b -> 2188
    memoryASet16(0x1c16 + seg, 0x0001, memoryAGet16(0x1c16 + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x1c22 + seg, 0x0006, memoryAGet16(0x1c22 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x1c2c + seg, 0x0009, memoryAGet16(0x1c2c + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x1c2d + seg, 0x0002, memoryAGet16(0x1c2d + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1c2f + seg, 0x0002, memoryAGet16(0x1c2f + seg, 0x0002) + seg); // 1f9b -> 2188
    memoryASet16(0x1c31 + seg, 0x0009, memoryAGet16(0x1c31 + seg, 0x0009) + seg); // 1f9b -> 2188
    memoryASet16(0x1c34 + seg, 0x0000, memoryAGet16(0x1c34 + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1c3f + seg, 0x000a, memoryAGet16(0x1c3f + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x1c51 + seg, 0x0004, memoryAGet16(0x1c51 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1c52 + seg, 0x000e, memoryAGet16(0x1c52 + seg, 0x000e) + seg); // 1f9b -> 2188
    memoryASet16(0x1c5d + seg, 0x000d, memoryAGet16(0x1c5d + seg, 0x000d) + seg); // 1f9b -> 2188
    memoryASet16(0x1c6f + seg, 0x0007, memoryAGet16(0x1c6f + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x1c71 + seg, 0x0001, memoryAGet16(0x1c71 + seg, 0x0001) + seg); // 1f9b -> 2188
    memoryASet16(0x1c7c + seg, 0x0000, memoryAGet16(0x1c7c + seg, 0x0000) + seg); // 1f9b -> 2188
    memoryASet16(0x1c8d + seg, 0x000a, memoryAGet16(0x1c8d + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x1c8f + seg, 0x0004, memoryAGet16(0x1c8f + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1c98 + seg, 0x0006, memoryAGet16(0x1c98 + seg, 0x0006) + seg); // 1f9b -> 2188
    memoryASet16(0x1c9b + seg, 0x0002, memoryAGet16(0x1c9b + seg, 0x0002) + seg); // 26c6 -> 28b3
    memoryASet16(0x1ca4 + seg, 0x0004, memoryAGet16(0x1ca4 + seg, 0x0004) + seg); // 1f9b -> 2188
    memoryASet16(0x1ca7 + seg, 0x0000, memoryAGet16(0x1ca7 + seg, 0x0000) + seg); // 26c6 -> 28b3
    memoryASet16(0x1cb3 + seg, 0x0005, memoryAGet16(0x1cb3 + seg, 0x0005) + seg); // 1f9b -> 2188
    memoryASet16(0x1cc3 + seg, 0x0007, memoryAGet16(0x1cc3 + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x1ccf + seg, 0x0003, memoryAGet16(0x1ccf + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x1cd0 + seg, 0x0006, memoryAGet16(0x1cd0 + seg, 0x0006) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1cdd + seg, 0x000a, memoryAGet16(0x1cdd + seg, 0x000a) + seg); // 1f9b -> 2188
    memoryASet16(0x1cde + seg, 0x000f, memoryAGet16(0x1cde + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x1cdf + seg, 0x000f, memoryAGet16(0x1cdf + seg, 0x000f) + seg); // 1f9b -> 2188
    memoryASet16(0x1ce3 + seg, 0x000b, memoryAGet16(0x1ce3 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1ce5 + seg, 0x0003, memoryAGet16(0x1ce5 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1ce6 + seg, 0x000d, memoryAGet16(0x1ce6 + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1ce8 + seg, 0x0005, memoryAGet16(0x1ce8 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1ceb + seg, 0x0009, memoryAGet16(0x1ceb + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1ced + seg, 0x0004, memoryAGet16(0x1ced + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1cf1 + seg, 0x0004, memoryAGet16(0x1cf1 + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1cf6 + seg, 0x0005, memoryAGet16(0x1cf6 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1cf8 + seg, 0x0000, memoryAGet16(0x1cf8 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1cfc + seg, 0x0000, memoryAGet16(0x1cfc + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1cff + seg, 0x0003, memoryAGet16(0x1cff + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d00 + seg, 0x000e, memoryAGet16(0x1d00 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d04 + seg, 0x000e, memoryAGet16(0x1d04 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d09 + seg, 0x0007, memoryAGet16(0x1d09 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d0d + seg, 0x0003, memoryAGet16(0x1d0d + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d12 + seg, 0x0002, memoryAGet16(0x1d12 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d13 + seg, 0x000f, memoryAGet16(0x1d13 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d15 + seg, 0x000a, memoryAGet16(0x1d15 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d19 + seg, 0x0009, memoryAGet16(0x1d19 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d1c + seg, 0x000c, memoryAGet16(0x1d1c + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x1d23 + seg, 0x0008, memoryAGet16(0x1d23 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d25 + seg, 0x0004, memoryAGet16(0x1d25 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d26 + seg, 0x000f, memoryAGet16(0x1d26 + seg, 0x000f) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d3d + seg, 0x0004, memoryAGet16(0x1d3d + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d41 + seg, 0x000a, memoryAGet16(0x1d41 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d45 + seg, 0x0001, memoryAGet16(0x1d45 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d47 + seg, 0x0000, memoryAGet16(0x1d47 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d49 + seg, 0x0007, memoryAGet16(0x1d49 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d4d + seg, 0x000d, memoryAGet16(0x1d4d + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d54 + seg, 0x0002, memoryAGet16(0x1d54 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1d70 + seg, 0x000a, memoryAGet16(0x1d70 + seg, 0x000a) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d74 + seg, 0x0002, memoryAGet16(0x1d74 + seg, 0x0002) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d75 + seg, 0x0002, memoryAGet16(0x1d75 + seg, 0x0002) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1d79 + seg, 0x000c, memoryAGet16(0x1d79 + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1d7c + seg, 0x0005, memoryAGet16(0x1d7c + seg, 0x0005) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1d7e + seg, 0x0006, memoryAGet16(0x1d7e + seg, 0x0006) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d81 + seg, 0x0005, memoryAGet16(0x1d81 + seg, 0x0005) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d82 + seg, 0x0002, memoryAGet16(0x1d82 + seg, 0x0002) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d85 + seg, 0x0000, memoryAGet16(0x1d85 + seg, 0x0000) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d8a + seg, 0x0007, memoryAGet16(0x1d8a + seg, 0x0007) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d8c + seg, 0x000d, memoryAGet16(0x1d8c + seg, 0x000d) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d8f + seg, 0x000f, memoryAGet16(0x1d8f + seg, 0x000f) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d90 + seg, 0x000a, memoryAGet16(0x1d90 + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1d92 + seg, 0x000d, memoryAGet16(0x1d92 + seg, 0x000d) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d96 + seg, 0x0006, memoryAGet16(0x1d96 + seg, 0x0006) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1d9b + seg, 0x0009, memoryAGet16(0x1d9b + seg, 0x0009) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1e3b + seg, 0x000f, memoryAGet16(0x1e3b + seg, 0x000f) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1e3f + seg, 0x0004, memoryAGet16(0x1e3f + seg, 0x0004) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1e42 + seg, 0x0008, memoryAGet16(0x1e42 + seg, 0x0008) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1e43 + seg, 0x0006, memoryAGet16(0x1e43 + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e46 + seg, 0x0003, memoryAGet16(0x1e46 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e47 + seg, 0x0003, memoryAGet16(0x1e47 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4b + seg, 0x000e, memoryAGet16(0x1e4b + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4c + seg, 0x000a, memoryAGet16(0x1e4c + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4d + seg, 0x0003, memoryAGet16(0x1e4d + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4d + seg, 0x000f, memoryAGet16(0x1e4d + seg, 0x000f) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4e + seg, 0x0008, memoryAGet16(0x1e4e + seg, 0x0008) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4f + seg, 0x0004, memoryAGet16(0x1e4f + seg, 0x0004) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e4f + seg, 0x000d, memoryAGet16(0x1e4f + seg, 0x000d) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e50 + seg, 0x0009, memoryAGet16(0x1e50 + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e51 + seg, 0x0002, memoryAGet16(0x1e51 + seg, 0x0002) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e51 + seg, 0x000e, memoryAGet16(0x1e51 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e52 + seg, 0x0007, memoryAGet16(0x1e52 + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e53 + seg, 0x0003, memoryAGet16(0x1e53 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e53 + seg, 0x000c, memoryAGet16(0x1e53 + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e54 + seg, 0x0008, memoryAGet16(0x1e54 + seg, 0x0008) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e55 + seg, 0x0001, memoryAGet16(0x1e55 + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e55 + seg, 0x000d, memoryAGet16(0x1e55 + seg, 0x000d) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e56 + seg, 0x0006, memoryAGet16(0x1e56 + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e57 + seg, 0x0002, memoryAGet16(0x1e57 + seg, 0x0002) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e57 + seg, 0x000b, memoryAGet16(0x1e57 + seg, 0x000b) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e58 + seg, 0x0007, memoryAGet16(0x1e58 + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e59 + seg, 0x0000, memoryAGet16(0x1e59 + seg, 0x0000) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e59 + seg, 0x000c, memoryAGet16(0x1e59 + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5a + seg, 0x0005, memoryAGet16(0x1e5a + seg, 0x0005) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5b + seg, 0x0001, memoryAGet16(0x1e5b + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5b + seg, 0x000a, memoryAGet16(0x1e5b + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5c + seg, 0x0006, memoryAGet16(0x1e5c + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5c + seg, 0x000f, memoryAGet16(0x1e5c + seg, 0x000f) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5d + seg, 0x000b, memoryAGet16(0x1e5d + seg, 0x000b) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5e + seg, 0x0004, memoryAGet16(0x1e5e + seg, 0x0004) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5f + seg, 0x0000, memoryAGet16(0x1e5f + seg, 0x0000) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e5f + seg, 0x0009, memoryAGet16(0x1e5f + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e60 + seg, 0x0005, memoryAGet16(0x1e60 + seg, 0x0005) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e60 + seg, 0x000e, memoryAGet16(0x1e60 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e61 + seg, 0x000a, memoryAGet16(0x1e61 + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e62 + seg, 0x0003, memoryAGet16(0x1e62 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e62 + seg, 0x000f, memoryAGet16(0x1e62 + seg, 0x000f) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e63 + seg, 0x0008, memoryAGet16(0x1e63 + seg, 0x0008) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e64 + seg, 0x0004, memoryAGet16(0x1e64 + seg, 0x0004) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e64 + seg, 0x000d, memoryAGet16(0x1e64 + seg, 0x000d) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e65 + seg, 0x0009, memoryAGet16(0x1e65 + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e66 + seg, 0x0002, memoryAGet16(0x1e66 + seg, 0x0002) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e66 + seg, 0x000e, memoryAGet16(0x1e66 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e67 + seg, 0x0007, memoryAGet16(0x1e67 + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e68 + seg, 0x0003, memoryAGet16(0x1e68 + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e7a + seg, 0x0006, memoryAGet16(0x1e7a + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1e97 + seg, 0x000a, memoryAGet16(0x1e97 + seg, 0x000a) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1ea4 + seg, 0x0009, memoryAGet16(0x1ea4 + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1eb7 + seg, 0x0006, memoryAGet16(0x1eb7 + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1ec8 + seg, 0x000c, memoryAGet16(0x1ec8 + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1edb + seg, 0x0000, memoryAGet16(0x1edb + seg, 0x0000) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1ef8 + seg, 0x000e, memoryAGet16(0x1ef8 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f01 + seg, 0x0002, memoryAGet16(0x1f01 + seg, 0x0002) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f05 + seg, 0x0009, memoryAGet16(0x1f05 + seg, 0x0009) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f0b + seg, 0x0003, memoryAGet16(0x1f0b + seg, 0x0003) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f0d + seg, 0x000e, memoryAGet16(0x1f0d + seg, 0x000e) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f15 + seg, 0x000a, memoryAGet16(0x1f15 + seg, 0x000a) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f1c + seg, 0x0001, memoryAGet16(0x1f1c + seg, 0x0001) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f1c + seg, 0x0006, memoryAGet16(0x1f1c + seg, 0x0006) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f22 + seg, 0x0007, memoryAGet16(0x1f22 + seg, 0x0007) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f24 + seg, 0x0001, memoryAGet16(0x1f24 + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f25 + seg, 0x0009, memoryAGet16(0x1f25 + seg, 0x0009) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f28 + seg, 0x000e, memoryAGet16(0x1f28 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f29 + seg, 0x0006, memoryAGet16(0x1f29 + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f29 + seg, 0x000e, memoryAGet16(0x1f29 + seg, 0x000e) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2a + seg, 0x0006, memoryAGet16(0x1f2a + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2b + seg, 0x000c, memoryAGet16(0x1f2b + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2c + seg, 0x0006, memoryAGet16(0x1f2c + seg, 0x0006) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2d + seg, 0x0000, memoryAGet16(0x1f2d + seg, 0x0000) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2d + seg, 0x0008, memoryAGet16(0x1f2d + seg, 0x0008) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f2f + seg, 0x0002, memoryAGet16(0x1f2f + seg, 0x0002) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f2f + seg, 0x000c, memoryAGet16(0x1f2f + seg, 0x000c) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f30 + seg, 0x000b, memoryAGet16(0x1f30 + seg, 0x000b) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f32 + seg, 0x0003, memoryAGet16(0x1f32 + seg, 0x0003) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f33 + seg, 0x0000, memoryAGet16(0x1f33 + seg, 0x0000) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f3b + seg, 0x0001, memoryAGet16(0x1f3b + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f3b + seg, 0x0004, memoryAGet16(0x1f3b + seg, 0x0004) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f41 + seg, 0x0000, memoryAGet16(0x1f41 + seg, 0x0000) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f43 + seg, 0x0001, memoryAGet16(0x1f43 + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f44 + seg, 0x0001, memoryAGet16(0x1f44 + seg, 0x0001) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f46 + seg, 0x000c, memoryAGet16(0x1f46 + seg, 0x000c) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f47 + seg, 0x0006, memoryAGet16(0x1f47 + seg, 0x0006) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f6a + seg, 0x000b, memoryAGet16(0x1f6a + seg, 0x000b) + seg); // 1d6f -> 1f5c
    memoryASet16(0x1f71 + seg, 0x000b, memoryAGet16(0x1f71 + seg, 0x000b) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f79 + seg, 0x000d, memoryAGet16(0x1f79 + seg, 0x000d) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x1f9c + seg, 0x0007, memoryAGet16(0x1f9c + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x1fca + seg, 0x000d, memoryAGet16(0x1fca + seg, 0x000d) + seg); // 26c6 -> 28b3
    memoryASet16(0x1fcb + seg, 0x0008, memoryAGet16(0x1fcb + seg, 0x0008) + seg); // 26c6 -> 28b3
    memoryASet16(0x2006 + seg, 0x000e, memoryAGet16(0x2006 + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2010 + seg, 0x0006, memoryAGet16(0x2010 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x203c + seg, 0x0008, memoryAGet16(0x203c + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x206f + seg, 0x0007, memoryAGet16(0x206f + seg, 0x0007) + seg); // 1f9b -> 2188
    memoryASet16(0x21f5 + seg, 0x000b, memoryAGet16(0x21f5 + seg, 0x000b) + seg); // 1f9b -> 2188
    memoryASet16(0x227f + seg, 0x0000, memoryAGet16(0x227f + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2280 + seg, 0x0008, memoryAGet16(0x2280 + seg, 0x0008) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2281 + seg, 0x0002, memoryAGet16(0x2281 + seg, 0x0002) + seg); // 2bb6 -> 2da3
    memoryASet16(0x22fa + seg, 0x0000, memoryAGet16(0x22fa + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x23cf + seg, 0x0003, memoryAGet16(0x23cf + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x242e + seg, 0x000e, memoryAGet16(0x242e + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x244e + seg, 0x000d, memoryAGet16(0x244e + seg, 0x000d) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2470 + seg, 0x0008, memoryAGet16(0x2470 + seg, 0x0008) + seg); // 1f9b -> 2188
    memoryASet16(0x24a8 + seg, 0x0000, memoryAGet16(0x24a8 + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x24bc + seg, 0x000c, memoryAGet16(0x24bc + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x24d8 + seg, 0x0004, memoryAGet16(0x24d8 + seg, 0x0004) + seg); // 2bb6 -> 2da3
    memoryASet16(0x24e7 + seg, 0x0003, memoryAGet16(0x24e7 + seg, 0x0003) + seg); // 1f9b -> 2188
    memoryASet16(0x2531 + seg, 0x0003, memoryAGet16(0x2531 + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2572 + seg, 0x000b, memoryAGet16(0x2572 + seg, 0x000b) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2578 + seg, 0x0009, memoryAGet16(0x2578 + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x257e + seg, 0x0007, memoryAGet16(0x257e + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2580 + seg, 0x0001, memoryAGet16(0x2580 + seg, 0x0001) + seg); // 2bb6 -> 2da3
    memoryASet16(0x259a + seg, 0x0000, memoryAGet16(0x259a + seg, 0x0000) + seg); // 2bb6 -> 2da3
    memoryASet16(0x25d3 + seg, 0x0005, memoryAGet16(0x25d3 + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2608 + seg, 0x0005, memoryAGet16(0x2608 + seg, 0x0005) + seg); // 26c6 -> 28b3
    memoryASet16(0x260a + seg, 0x000e, memoryAGet16(0x260a + seg, 0x000e) + seg); // 26c6 -> 28b3
    memoryASet16(0x260d + seg, 0x0003, memoryAGet16(0x260d + seg, 0x0003) + seg); // 26c6 -> 28b3
    memoryASet16(0x26bd + seg, 0x0005, memoryAGet16(0x26bd + seg, 0x0005) + seg); // 2bb6 -> 2da3
    memoryASet16(0x26bf + seg, 0x000e, memoryAGet16(0x26bf + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x26c1 + seg, 0x000c, memoryAGet16(0x26c1 + seg, 0x000c) + seg); // 2bb6 -> 2da3
    memoryASet16(0x26cf + seg, 0x000a, memoryAGet16(0x26cf + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26d6 + seg, 0x000d, memoryAGet16(0x26d6 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26df + seg, 0x0003, memoryAGet16(0x26df + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26e7 + seg, 0x0009, memoryAGet16(0x26e7 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26f4 + seg, 0x0007, memoryAGet16(0x26f4 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26f5 + seg, 0x000b, memoryAGet16(0x26f5 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26f6 + seg, 0x0003, memoryAGet16(0x26f6 + seg, 0x0003) + seg); // 2854 -> 2a41
    memoryASet16(0x26f7 + seg, 0x0000, memoryAGet16(0x26f7 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26f7 + seg, 0x0008, memoryAGet16(0x26f7 + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x26f8 + seg, 0x0005, memoryAGet16(0x26f8 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26f8 + seg, 0x000d, memoryAGet16(0x26f8 + seg, 0x000d) + seg); // 2854 -> 2a41
    memoryASet16(0x26f9 + seg, 0x000a, memoryAGet16(0x26f9 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26fa + seg, 0x0002, memoryAGet16(0x26fa + seg, 0x0002) + seg); // 2854 -> 2a41
    memoryASet16(0x26fa + seg, 0x000f, memoryAGet16(0x26fa + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26fb + seg, 0x0007, memoryAGet16(0x26fb + seg, 0x0007) + seg); // 2854 -> 2a41
    memoryASet16(0x26fc + seg, 0x0004, memoryAGet16(0x26fc + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26fc + seg, 0x000c, memoryAGet16(0x26fc + seg, 0x000c) + seg); // 2854 -> 2a41
    memoryASet16(0x26fd + seg, 0x0009, memoryAGet16(0x26fd + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26fe + seg, 0x0001, memoryAGet16(0x26fe + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x26fe + seg, 0x000e, memoryAGet16(0x26fe + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x26ff + seg, 0x0006, memoryAGet16(0x26ff + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x2700 + seg, 0x0003, memoryAGet16(0x2700 + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2700 + seg, 0x000b, memoryAGet16(0x2700 + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x2701 + seg, 0x0008, memoryAGet16(0x2701 + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2702 + seg, 0x0000, memoryAGet16(0x2702 + seg, 0x0000) + seg); // 2854 -> 2a41
    memoryASet16(0x2702 + seg, 0x000d, memoryAGet16(0x2702 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2703 + seg, 0x0005, memoryAGet16(0x2703 + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x2704 + seg, 0x0002, memoryAGet16(0x2704 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2704 + seg, 0x000a, memoryAGet16(0x2704 + seg, 0x000a) + seg); // 2854 -> 2a41
    memoryASet16(0x2705 + seg, 0x0007, memoryAGet16(0x2705 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2705 + seg, 0x000f, memoryAGet16(0x2705 + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x2706 + seg, 0x000c, memoryAGet16(0x2706 + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2707 + seg, 0x0004, memoryAGet16(0x2707 + seg, 0x0004) + seg); // 2854 -> 2a41
    memoryASet16(0x2708 + seg, 0x0001, memoryAGet16(0x2708 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2708 + seg, 0x0009, memoryAGet16(0x2708 + seg, 0x0009) + seg); // 2854 -> 2a41
    memoryASet16(0x2709 + seg, 0x0006, memoryAGet16(0x2709 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2709 + seg, 0x000e, memoryAGet16(0x2709 + seg, 0x000e) + seg); // 2854 -> 2a41
    memoryASet16(0x270b + seg, 0x0002, memoryAGet16(0x270b + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x270b + seg, 0x000a, memoryAGet16(0x270b + seg, 0x000a) + seg); // 2854 -> 2a41
    memoryASet16(0x270c + seg, 0x0007, memoryAGet16(0x270c + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x270c + seg, 0x000f, memoryAGet16(0x270c + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x270d + seg, 0x000c, memoryAGet16(0x270d + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x270e + seg, 0x0004, memoryAGet16(0x270e + seg, 0x0004) + seg); // 2854 -> 2a41
    memoryASet16(0x270f + seg, 0x0001, memoryAGet16(0x270f + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x270f + seg, 0x0009, memoryAGet16(0x270f + seg, 0x0009) + seg); // 2854 -> 2a41
    memoryASet16(0x2710 + seg, 0x0006, memoryAGet16(0x2710 + seg, 0x0006) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2710 + seg, 0x000e, memoryAGet16(0x2710 + seg, 0x000e) + seg); // 2854 -> 2a41
    memoryASet16(0x2711 + seg, 0x000b, memoryAGet16(0x2711 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2712 + seg, 0x0003, memoryAGet16(0x2712 + seg, 0x0003) + seg); // 2854 -> 2a41
    memoryASet16(0x2713 + seg, 0x0000, memoryAGet16(0x2713 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2713 + seg, 0x0008, memoryAGet16(0x2713 + seg, 0x0008) + seg); // 2854 -> 2a41
    memoryASet16(0x2714 + seg, 0x0005, memoryAGet16(0x2714 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2714 + seg, 0x000d, memoryAGet16(0x2714 + seg, 0x000d) + seg); // 2854 -> 2a41
    memoryASet16(0x2715 + seg, 0x000a, memoryAGet16(0x2715 + seg, 0x000a) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2716 + seg, 0x0002, memoryAGet16(0x2716 + seg, 0x0002) + seg); // 2854 -> 2a41
    memoryASet16(0x2716 + seg, 0x000f, memoryAGet16(0x2716 + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2717 + seg, 0x0007, memoryAGet16(0x2717 + seg, 0x0007) + seg); // 2854 -> 2a41
    memoryASet16(0x2718 + seg, 0x0004, memoryAGet16(0x2718 + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2718 + seg, 0x000c, memoryAGet16(0x2718 + seg, 0x000c) + seg); // 2854 -> 2a41
    memoryASet16(0x2719 + seg, 0x0009, memoryAGet16(0x2719 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x271a + seg, 0x0001, memoryAGet16(0x271a + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x271a + seg, 0x000e, memoryAGet16(0x271a + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x271b + seg, 0x0006, memoryAGet16(0x271b + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x271c + seg, 0x0003, memoryAGet16(0x271c + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x271c + seg, 0x000b, memoryAGet16(0x271c + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x271d + seg, 0x0008, memoryAGet16(0x271d + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x271e + seg, 0x0000, memoryAGet16(0x271e + seg, 0x0000) + seg); // 2854 -> 2a41
    memoryASet16(0x271e + seg, 0x000d, memoryAGet16(0x271e + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x271f + seg, 0x0005, memoryAGet16(0x271f + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x2720 + seg, 0x0009, memoryAGet16(0x2720 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2721 + seg, 0x0001, memoryAGet16(0x2721 + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x2721 + seg, 0x000d, memoryAGet16(0x2721 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2722 + seg, 0x0005, memoryAGet16(0x2722 + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x2723 + seg, 0x0001, memoryAGet16(0x2723 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2723 + seg, 0x0009, memoryAGet16(0x2723 + seg, 0x0009) + seg); // 2854 -> 2a41
    memoryASet16(0x2724 + seg, 0x0005, memoryAGet16(0x2724 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2724 + seg, 0x000d, memoryAGet16(0x2724 + seg, 0x000d) + seg); // 2854 -> 2a41
    memoryASet16(0x2725 + seg, 0x0009, memoryAGet16(0x2725 + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2726 + seg, 0x0001, memoryAGet16(0x2726 + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x2726 + seg, 0x000d, memoryAGet16(0x2726 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2727 + seg, 0x0005, memoryAGet16(0x2727 + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x2728 + seg, 0x0001, memoryAGet16(0x2728 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2728 + seg, 0x0009, memoryAGet16(0x2728 + seg, 0x0009) + seg); // 2854 -> 2a41
    memoryASet16(0x2729 + seg, 0x0005, memoryAGet16(0x2729 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2729 + seg, 0x000d, memoryAGet16(0x2729 + seg, 0x000d) + seg); // 2854 -> 2a41
    memoryASet16(0x272a + seg, 0x0009, memoryAGet16(0x272a + seg, 0x0009) + seg); // 28b6 -> 2aa3
    memoryASet16(0x272b + seg, 0x0001, memoryAGet16(0x272b + seg, 0x0001) + seg); // 2854 -> 2a41
    memoryASet16(0x272b + seg, 0x000e, memoryAGet16(0x272b + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x272c + seg, 0x0006, memoryAGet16(0x272c + seg, 0x0006) + seg); // 2854 -> 2a41
    memoryASet16(0x272d + seg, 0x0003, memoryAGet16(0x272d + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x272d + seg, 0x000b, memoryAGet16(0x272d + seg, 0x000b) + seg); // 2854 -> 2a41
    memoryASet16(0x272e + seg, 0x0008, memoryAGet16(0x272e + seg, 0x0008) + seg); // 28b6 -> 2aa3
    memoryASet16(0x272f + seg, 0x0000, memoryAGet16(0x272f + seg, 0x0000) + seg); // 2854 -> 2a41
    memoryASet16(0x272f + seg, 0x000d, memoryAGet16(0x272f + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2730 + seg, 0x0005, memoryAGet16(0x2730 + seg, 0x0005) + seg); // 2854 -> 2a41
    memoryASet16(0x2731 + seg, 0x0002, memoryAGet16(0x2731 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2731 + seg, 0x000a, memoryAGet16(0x2731 + seg, 0x000a) + seg); // 2854 -> 2a41
    memoryASet16(0x2732 + seg, 0x0007, memoryAGet16(0x2732 + seg, 0x0007) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2732 + seg, 0x000f, memoryAGet16(0x2732 + seg, 0x000f) + seg); // 2854 -> 2a41
    memoryASet16(0x2733 + seg, 0x000c, memoryAGet16(0x2733 + seg, 0x000c) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2734 + seg, 0x0004, memoryAGet16(0x2734 + seg, 0x0004) + seg); // 2854 -> 2a41
    memoryASet16(0x2736 + seg, 0x0005, memoryAGet16(0x2736 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2738 + seg, 0x0007, memoryAGet16(0x2738 + seg, 0x0007) + seg); // 2854 -> 2a41
    memoryASet16(0x2739 + seg, 0x0002, memoryAGet16(0x2739 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2804 + seg, 0x000b, memoryAGet16(0x2804 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2808 + seg, 0x0004, memoryAGet16(0x2808 + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x280b + seg, 0x0003, memoryAGet16(0x280b + seg, 0x0003) + seg); // 28b6 -> 2aa3
    memoryASet16(0x280e + seg, 0x0004, memoryAGet16(0x280e + seg, 0x0004) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2811 + seg, 0x0005, memoryAGet16(0x2811 + seg, 0x0005) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2814 + seg, 0x000e, memoryAGet16(0x2814 + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2817 + seg, 0x000d, memoryAGet16(0x2817 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x281a + seg, 0x000e, memoryAGet16(0x281a + seg, 0x000e) + seg); // 28b6 -> 2aa3
    memoryASet16(0x281d + seg, 0x000f, memoryAGet16(0x281d + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2821 + seg, 0x0000, memoryAGet16(0x2821 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2824 + seg, 0x0001, memoryAGet16(0x2824 + seg, 0x0001) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2828 + seg, 0x000f, memoryAGet16(0x2828 + seg, 0x000f) + seg); // 28b6 -> 2aa3
    memoryASet16(0x282c + seg, 0x0009, memoryAGet16(0x282c + seg, 0x0009) + seg); // 2bac -> 2d99
    memoryASet16(0x282e + seg, 0x0002, memoryAGet16(0x282e + seg, 0x0002) + seg); // 2bac -> 2d99
    memoryASet16(0x2836 + seg, 0x0004, memoryAGet16(0x2836 + seg, 0x0004) + seg); // 2bac -> 2d99
    memoryASet16(0x2838 + seg, 0x0000, memoryAGet16(0x2838 + seg, 0x0000) + seg); // 2bac -> 2d99
    memoryASet16(0x283b + seg, 0x0001, memoryAGet16(0x283b + seg, 0x0001) + seg); // 2bac -> 2d99
    memoryASet16(0x283d + seg, 0x0009, memoryAGet16(0x283d + seg, 0x0009) + seg); // 2bb6 -> 2da3
    memoryASet16(0x283d + seg, 0x000e, memoryAGet16(0x283d + seg, 0x000e) + seg); // 2bb6 -> 2da3
    memoryASet16(0x283e + seg, 0x0003, memoryAGet16(0x283e + seg, 0x0003) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2840 + seg, 0x0002, memoryAGet16(0x2840 + seg, 0x0002) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2840 + seg, 0x000d, memoryAGet16(0x2840 + seg, 0x000d) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2842 + seg, 0x0000, memoryAGet16(0x2842 + seg, 0x0000) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2842 + seg, 0x000b, memoryAGet16(0x2842 + seg, 0x000b) + seg); // 28b6 -> 2aa3
    memoryASet16(0x2855 + seg, 0x0007, memoryAGet16(0x2855 + seg, 0x0007) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2856 + seg, 0x000a, memoryAGet16(0x2856 + seg, 0x000a) + seg); // 2bb6 -> 2da3
    memoryASet16(0x2867 + seg, 0x0002, memoryAGet16(0x2867 + seg, 0x0002) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x2bb6 + seg, 0x0001, memoryAGet16(0x2bb6 + seg, 0x0001) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x2bc3 + seg, 0x000d, memoryAGet16(0x2bc3 + seg, 0x000d) + seg); // 2cd4 -> 2ec1
    memoryASet16(0x2c9f + seg, 0x0008, memoryAGet16(0x2c9f + seg, 0x0008) + seg); // 2cd4 -> 2ec1
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x1ed0, 0x1ed, 0x0, 0x1ed, 0x59, 0x1f29, 0x1ed, 0x59, 0x1ed, 0x47d,
        0x234d, 0x1ed, 0x47d, 0x1ed, 0x6be, 0x258e, 0x1ed, 0x6be, 0x1ed, 0x6ee,
        0x25be, 0x1ed, 0x6ee, 0x1ed, 0x70d, 0x25dd, 0x1ed, 0x70d, 0x1ed, 0x727,
        0x25f7, 0x1ed, 0x727, 0x1ed, 0xa22, 0x29fd, 0x1ed, 0xb2d, 0x1ed, 0xb88,
        0x2a58, 0x1ed, 0xb88, 0x1ed, 0xbaf, 0x2a7f, 0x1ed, 0xbaf, 0x1ed, 0xc3e,
        0x2b0e, 0x1ed, 0xc3e, 0x1ed, 0xf38, 0x2e08, 0x1ed, 0xf38, 0x1ed, 0xfbf,
        0x2f07, 0x1ed, 0x1037, 0x1ed, 0x24dc, 0x44c0, 0x1ed, 0x25f0, 0x1ed, 0x6ee0,
        0xd079, 0x1ed, 0xb1a9, 0x1ed, 0xcf46, 0xee16, 0x1ed, 0xcf46, 0x1ed, 0xcf6c,
        0xee3c, 0x1ed, 0xcf6c, 0x1ed, 0xd140, 0xf010, 0x1ed, 0xd140, 0x1ed, 0xd15c,
        0xf02c, 0x1ed, 0xd15c, 0x1ed, 0xd17d, 0xf04d, 0x1ed, 0xd17d, 0x1ed, 0xd1c6,
        0xf096, 0x1ed, 0xd1c6, 0x1ed, 0xd342, 0xf212, 0x1ed, 0xd342, 0x1ed, 0xd360,
        0xf230, 0x1ed, 0xd360, 0x1ed, 0xd4e5, 0xf3b5, 0x1ed, 0xd4e5, 0x1ed, 0xd5b8,
        0xf492, 0x1ed, 0xd5c2, 0x1ed, 0xd6d4, 0xf5a4, 0x1ed, 0xd6d4, 0x1ed, 0xd710,
        0xf5e0, 0x1ed, 0xd710, 0x1ed, 0xd72a, 0xf5fa, 0x1ed, 0xd72a, 0x1ed, 0xdcb9,
        0xfb89, 0x1ed, 0xdcb9, 0x1ed, 0xe011, 0xfee1, 0x1ed, 0xe011, 0x1ed, 0xe36b,
        0x1023b, 0x1ed, 0xe36b, 0x1ed, 0xe51d, 0x103ed, 0x1ed, 0xe51d, 0x1ed, 0xe5d3,
        0x104a3, 0x1ed, 0xe5d3, 0x1ed, 0xeaea, 0x109ba, 0x1ed, 0xeaea, 0x1ed, 0xebf2,
        0x10ac2, 0x1ed, 0xebf2, 0x1ed, 0xeec1, 0x10d91, 0x1ed, 0xeec1, 0x1ed, 0xef11,
        0x10e08, 0x1ed, 0xef38, 0x1ed, 0xef9b, 0x10e6b, 0x1ed, 0xef9b, 0x1ed, 0xfb8f,
        0x11a66, 0x1ed, 0xfb96, 0x1ed, 0xfbb2, 0x11a82, 0x1ed, 0xfbb2, 0x1ed, 0xfc24,
        0x11af4, 0x1ed, 0xfc24, 0x1ed, 0xfc38, 0x11b08, 0x1ed, 0xfc38, 0x1ed, 0xfc45,
        0x11b20, 0x11b2, 0x0, 0x11b2, 0x3e, 0x11c0c, 0x11b2, 0xec, 0x11b2, 0x64c,
        0x121e4, 0x11b2, 0x6c4, 0x11b2, 0x827, 0x12397, 0x11b2, 0x877, 0x11b2, 0xfd1,
        0x12b21, 0x11b2, 0x1001, 0x11b2, 0x17f1, 0x13311, 0x11b2, 0x17f1, 0x11b2, 0x182f,
        0x13371, 0x11b2, 0x1851, 0x11b2, 0x18d2, 0x1341a, 0x11b2, 0x18fa, 0x11b2, 0x1987,
        0x13592, 0x11b2, 0x1a72, 0x11b2, 0x1bca, 0x13878, 0x11b2, 0x1d58, 0x11b2, 0x1f50,
        0x13cb8, 0x11b2, 0x2198, 0x11b2, 0x24d9, 0x142c8, 0x11b2, 0x27a8, 0x11b2, 0x2ce6,
        0x14ab2, 0x11b2, 0x2f92, 0x11b2, 0x33b7, 0x14f05, 0x11b2, 0x33e5, 0x11b2, 0x3483,
        0x15101, 0x11b2, 0x35e1, 0x11b2, 0x37d8, 0x15466, 0x11b2, 0x3946, 0x11b2, 0x3b3d,
        0x157da, 0x11b2, 0x3cba, 0x11b2, 0x3eb7, 0x159d7, 0x11b2, 0x3eb7, 0x11b2, 0x4013,
        0x15b98, 0x11b2, 0x4078, 0x11b2, 0x4267, 0x15dd0, 0x11b2, 0x42b0, 0x11b2, 0x43a2,
        0x167f7, 0x11b2, 0x4cd7, 0x11b2, 0x5b2c, 0x176ae, 0x11b2, 0x5b8e, 0x11b2, 0x5c4f,
        0x177e5, 0x11b2, 0x5cc5, 0x11b2, 0x5da4, 0x17926, 0x11b2, 0x5e06, 0x11b2, 0x5ec7,
        0x17a14, 0x11b2, 0x5ef4, 0x11b2, 0x5f92, 0x17ad0, 0x11b2, 0x5fb0, 0x11b2, 0x6012,
        0x17b55, 0x11b2, 0x6035, 0x11b2, 0x60e3, 0x17c25, 0x11b2, 0x6105, 0x11b2, 0x617b,
        0x17cd1, 0x11b2, 0x61b1, 0x11b2, 0x6315, 0x17f68, 0x11b2, 0x6448, 0x11b2, 0x6678,
        0x181f7, 0x11b2, 0x66d7, 0x11b2, 0x675c, 0x182c3, 0x11b2, 0x67a3, 0x11b2, 0x6828,
        0x18390, 0x11b2, 0x6870, 0x11b2, 0x68f5, 0x1846d, 0x11b2, 0x694d, 0x11b2, 0x69d2,
        0x18578, 0x11b2, 0x6a58, 0x11b2, 0x6b03, 0x1866d, 0x11b2, 0x6b4d, 0x11b2, 0x6bee,
        0x18738, 0x11b2, 0x6c18, 0x11b2, 0x6c7c, 0x187a6, 0x11b2, 0x6c86, 0x11b2, 0x6da9,
        0x1891d, 0x11b2, 0x6dfd, 0x11b2, 0x6ec3, 0x18a3a, 0x11b2, 0x6f1a, 0x11b2, 0x6fdb,
        0x18b05, 0x11b2, 0x6fe5, 0x11b2, 0x7094, 0x18c0c, 0x11b2, 0x70ec, 0x11b2, 0x71ad,
        0x18d33, 0x11b2, 0x7213, 0x11b2, 0x73a1, 0x18f1d, 0x11b2, 0x73fd, 0x11b2, 0x746d,
        0x19015, 0x11b2, 0x74f5, 0x11b2, 0x780d, 0x19434, 0x11b2, 0x7914, 0x11b2, 0x7c15,
        0x19848, 0x11b2, 0x7d28, 0x11b2, 0x8069, 0x19c01, 0x11b2, 0x80e1, 0x11b2, 0x8235,
        0x19d85, 0x11b2, 0x8265, 0x11b2, 0x8489, 0x19fb1, 0x11b2, 0x8491, 0x11b2, 0x8533,
        0x1a05b, 0x11b2, 0x853b, 0x11b2, 0x8636, 0x1a15d, 0x11b2, 0x863d, 0x11b2, 0x86b5,
        0x1a258, 0x11b2, 0x8738, 0x11b2, 0x899d, 0x1a4bd, 0x11b2, 0x899d, 0x11b2, 0x8a33,
        0x1a852, 0x11b2, 0x8d32, 0x11b2, 0x9061, 0x1b000, 0x11b2, 0x94e0, 0x11b2, 0x9cc0,
        0x1b958, 0x11b2, 0x9e38, 0x11b2, 0xa03f, 0x1bcef, 0x11b2, 0xa1cf, 0x11b2, 0xa3d6,
        0x1bf87, 0x11b2, 0xa467, 0x11b2, 0xa561, 0x1c0be, 0x11b2, 0xa59e, 0x11b2, 0xa641,
        0x1c189, 0x11b2, 0xa669, 0x11b2, 0xa70a, 0x1c24f, 0x11b2, 0xa72f, 0x11b2, 0xa7cd,
        0x1c30f, 0x11b2, 0xa7ef, 0x11b2, 0xa889, 0x1c55a, 0x11b2, 0xaa3a, 0x11b2, 0xab90,
        0x1c6b0, 0x11b2, 0xab90, 0x11b2, 0xaba4, 0x1c6c4, 0x11b2, 0xaba4, 0x11b2, 0xabb8,
        0x1c72b, 0x11b2, 0xac0b, 0x11b2, 0xac7a, 0x1c7e0, 0x11b2, 0xacc0, 0x11b2, 0xad1c,
        0x1c8be, 0x11b2, 0xad9e, 0x11b2, 0xae33, 0x1c95b, 0x11b2, 0xae3b, 0x11b2, 0xaef2,
        0x1ca12, 0x11b2, 0xaef2, 0x11b2, 0xaf3a, 0x1ca5a, 0x11b2, 0xaf3a, 0x11b2, 0xaf85,
        0x1caa5, 0x11b2, 0xaf85, 0x11b2, 0xb2c5, 0x1cded, 0x11b2, 0xb2cd, 0x11b2, 0xb4f9,
        0x1d03b, 0x11b2, 0xb51b, 0x11b2, 0xb62a, 0x1d15c, 0x11b2, 0xb63c, 0x11b2, 0xb7b9,
        0x1d2d9, 0x11b2, 0xb7b9, 0x11b2, 0xb911, 0x1d431, 0x11b2, 0xb911, 0x11b2, 0xb965,
        0x1d485, 0x11b2, 0xb965, 0x11b2, 0xb981, 0x1d4a1, 0x11b2, 0xb981, 0x11b2, 0xb9b9,
        0x1d4d9, 0x11b2, 0xb9b9, 0x11b2, 0xbaf6, 0x1d616, 0x11b2, 0xbaf6, 0x11b2, 0xbb28,
        0x1d648, 0x11b2, 0xbb28, 0x11b2, 0xd1b7, 0x1ed02, 0x11b2, 0xd1e2, 0x11b2, 0xd582,
        0x1f0b0, 0x1f0b, 0x0, 0x1f0b, 0x25, 0x1f0f5, 0x1f0b, 0x45, 0x1f0b, 0x97,
        0x1f147, 0x1f0b, 0x97, 0x1f0b, 0x101, 0x1f1b1, 0x1f0b, 0x101, 0x1f0b, 0x309,
        0x1f3b9, 0x1f0b, 0x309, 0x1f0b, 0x349, 0x1f3f9, 0x1f0b, 0x349, 0x1f0b, 0x399,
        0x1f449, 0x1f0b, 0x399, 0x1f0b, 0x3c7, 0x1f477, 0x1f0b, 0x3c7, 0x1f0b, 0x3de,
        0x1f48e, 0x1f0b, 0x3de, 0x1f0b, 0x3fa, 0x1f4aa, 0x1f0b, 0x3fa, 0x1f0b, 0x437,
        0x1f4aa, 0x1f0b, 0x438, 0x1f0b, 0x443, 0x1f53a, 0x1f0b, 0x48a, 0x1f0b, 0x492,
        0x1f542, 0x1f0b, 0x492, 0x1f0b, 0x4fe, 0x1f5ae, 0x1f0b, 0x4fe, 0x1f0b, 0x502,
        0x1f5c0, 0x1f5c, 0x0, 0x1f5c, 0xf, 0x1f5cf, 0x1f5c, 0xf, 0x1f5c, 0x47,
        0x1f607, 0x1f5c, 0x47, 0x1f5c, 0xeb, 0x1f6ab, 0x1f5c, 0xeb, 0x1f5c, 0x11a,
        0x1f76c, 0x1f5c, 0x1ac, 0x1f5c, 0x204, 0x1f82b, 0x1f5c, 0x26b, 0x1f5c, 0xc70,
        0x20230, 0x1f5c, 0xc70, 0x1f5c, 0xcc4, 0x202ed, 0x1f5c, 0xd2d, 0x1f5c, 0xdc7,
        0x20387, 0x1f5c, 0xdc7, 0x1f5c, 0xf9b, 0x20697, 0x1f5c, 0x10d7, 0x1f5c, 0x12ac,
        0x20697, 0x1f5c, 0x12ad, 0x1f5c, 0x12b3, 0x20ed5, 0x1f5c, 0x1915, 0x1f5c, 0x19e3,
        0x20fa3, 0x1f5c, 0x19e3, 0x1f5c, 0x1a5f, 0x21662, 0x1f5c, 0x20a2, 0x1f5c, 0x22b8,
        0x21880, 0x2188, 0x0, 0x2188, 0x43, 0x218c3, 0x2188, 0x43, 0x2188, 0x21f,
        0x21a9f, 0x2188, 0x21f, 0x2188, 0x2d3, 0x21b53, 0x2188, 0x2d3, 0x2188, 0x310,
        0x21b90, 0x2188, 0x310, 0x2188, 0x357, 0x21bd7, 0x2188, 0x357, 0x2188, 0x3ab,
        0x21c2b, 0x2188, 0x3ab, 0x2188, 0x628, 0x21ea8, 0x2188, 0x628, 0x2188, 0x68d,
        0x21f0d, 0x2188, 0x68d, 0x2188, 0x75e, 0x21fde, 0x2188, 0x75e, 0x2188, 0x831,
        0x220b1, 0x2188, 0x831, 0x2188, 0x8a4, 0x22127, 0x2188, 0x8a7, 0x2188, 0xa36,
        0x222b6, 0x2188, 0xa36, 0x2188, 0xa66, 0x222e6, 0x2188, 0xa66, 0x2188, 0x1ddb,
        0x2365b, 0x2188, 0x1ddb, 0x2188, 0x1e74, 0x236f4, 0x2188, 0x1e74, 0x2188, 0x1f58,
        0x237d8, 0x2188, 0x1f58, 0x2188, 0x1fb9, 0x23839, 0x2188, 0x1fb9, 0x2188, 0x1fc2,
        0x23842, 0x2188, 0x1fc2, 0x2188, 0x2176, 0x239f6, 0x2188, 0x2176, 0x2188, 0x2241,
        0x23ac1, 0x2188, 0x2241, 0x2188, 0x251a, 0x23d9d, 0x2188, 0x251d, 0x2188, 0x2850,
        0x240d0, 0x2188, 0x2850, 0x2188, 0x2877, 0x240f7, 0x2188, 0x2877, 0x2188, 0x298a,
        0x2420a, 0x2188, 0x298a, 0x2188, 0x2acf, 0x2434f, 0x2188, 0x2acf, 0x2188, 0x2bd4,
        0x24454, 0x2188, 0x2bd4, 0x2188, 0x2d37, 0x245b7, 0x2188, 0x2d37, 0x2188, 0x2e25,
        0x246a5, 0x2188, 0x2e25, 0x2188, 0x2f83, 0x24803, 0x2188, 0x2f83, 0x2188, 0x323c,
        0x24abc, 0x2188, 0x323c, 0x2188, 0x32f6, 0x24b76, 0x2188, 0x32f6, 0x2188, 0x3416,
        0x24c96, 0x2188, 0x3416, 0x2188, 0x36b0, 0x24f30, 0x2188, 0x36b0, 0x2188, 0x3904,
        0x25184, 0x2188, 0x3904, 0x2188, 0x3a2e, 0x252ae, 0x2188, 0x3a2e, 0x2188, 0x3be8,
        0x25468, 0x2188, 0x3be8, 0x2188, 0x3d23, 0x255a3, 0x2188, 0x3d23, 0x2188, 0x3e70,
        0x256f0, 0x2188, 0x3e70, 0x2188, 0x3f13, 0x25793, 0x2188, 0x3f13, 0x2188, 0x3f6c,
        0x257ec, 0x2188, 0x3f6c, 0x2188, 0x403a, 0x258ba, 0x2188, 0x403a, 0x2188, 0x4145,
        0x259c5, 0x2188, 0x4145, 0x2188, 0x47b9, 0x26039, 0x2188, 0x47b9, 0x2188, 0x48fe,
        0x2617e, 0x2188, 0x48fe, 0x2188, 0x4a4b, 0x262cb, 0x2188, 0x4a4b, 0x2188, 0x4a82,
        0x26302, 0x2188, 0x4a82, 0x2188, 0x4ad3, 0x26353, 0x2188, 0x4ad3, 0x2188, 0x4c92,
        0x26512, 0x2188, 0x4c92, 0x2188, 0x4eeb, 0x26854, 0x2188, 0x4fd4, 0x2188, 0x52e7,
        0x26b67, 0x2188, 0x52e7, 0x2188, 0x55ec, 0x26e6c, 0x2188, 0x55ec, 0x2188, 0x5855,
        0x270d5, 0x2188, 0x5855, 0x2188, 0x5bbe, 0x2743e, 0x2188, 0x5bbe, 0x2188, 0x5c8f,
        0x2750f, 0x2188, 0x5c8f, 0x2188, 0x6232, 0x27ab2, 0x2188, 0x6232, 0x2188, 0x62f2,
        0x27b72, 0x2188, 0x62f2, 0x2188, 0x6458, 0x27cd8, 0x2188, 0x6458, 0x2188, 0x6681,
        0x27f01, 0x2188, 0x6681, 0x2188, 0x672b, 0x27fab, 0x2188, 0x672b, 0x2188, 0x69d3,
        0x28253, 0x2188, 0x69d3, 0x2188, 0x6afa, 0x2837a, 0x2188, 0x6afa, 0x2188, 0x6d31,
        0x285b1, 0x2188, 0x6d31, 0x2188, 0x6ff6, 0x28876, 0x2188, 0x6ff6, 0x2188, 0x70e4,
        0x28964, 0x2188, 0x70e4, 0x2188, 0x72ad, 0x28b30, 0x28b3, 0x0, 0x28b3, 0x221,
        0x28d51, 0x28b3, 0x221, 0x28b3, 0x2ef, 0x28e1f, 0x28b3, 0x2ef, 0x28b3, 0x446,
        0x28f76, 0x28b3, 0x446, 0x28b3, 0x59d, 0x290cd, 0x28b3, 0x59d, 0x28b3, 0x6ec,
        0x2921c, 0x28b3, 0x6ec, 0x28b3, 0x711, 0x29241, 0x28b3, 0x711, 0x28b3, 0x740,
        0x29270, 0x28b3, 0x740, 0x28b3, 0x992, 0x294c2, 0x28b3, 0x992, 0x28b3, 0x13b5,
        0x29ee5, 0x28b3, 0x13b5, 0x28b3, 0x1643, 0x2a173, 0x28b3, 0x1643, 0x28b3, 0x16bf,
        0x2a21f, 0x28b3, 0x16ef, 0x28b3, 0x1789, 0x2a2b9, 0x28b3, 0x1789, 0x28b3, 0x17d1,
        0x2a310, 0x2a31, 0x0, 0x2a31, 0x38, 0x2a348, 0x2a31, 0x38, 0x2a31, 0x58,
        0x2a368, 0x2a31, 0x58, 0x2a31, 0x78, 0x2a388, 0x2a31, 0x78, 0x2a31, 0x7f,
        0x2a3dc, 0x2a31, 0xcc, 0x2a31, 0xfb, 0x2a410, 0x2a41, 0x0, 0x2a41, 0x30,
        0x2a440, 0x2a41, 0x30, 0x2a41, 0x99, 0x2a4a9, 0x2a41, 0x99, 0x2a41, 0xe7,
        0x2a4f7, 0x2a41, 0xe7, 0x2a41, 0x12f, 0x2a555, 0x2a41, 0x145, 0x2a41, 0x182,
        0x2a57d, 0x2a41, 0x16d, 0x2a41, 0x182, 0x2a5d2, 0x2a41, 0x1c2, 0x2a41, 0x1dc,
        0x2a625, 0x2a41, 0x215, 0x2a41, 0x241, 0x2a669, 0x2a41, 0x259, 0x2a41, 0x273,
        0x2a683, 0x2a41, 0x273, 0x2a41, 0x28b, 0x2a6ae, 0x2a41, 0x29e, 0x2a41, 0x2be,
        0x2a6ce, 0x2a41, 0x2be, 0x2a41, 0x2c6, 0x2a703, 0x2a41, 0x2f3, 0x2a41, 0x2fa,
        0x2a70a, 0x2a41, 0x2fa, 0x2a41, 0x30c, 0x2a71c, 0x2a41, 0x30c, 0x2a41, 0x32a,
        0x2a73e, 0x2a41, 0x32e, 0x2a41, 0x359, 0x2a769, 0x2a41, 0x359, 0x2a41, 0x391,
        0x2a884, 0x2a41, 0x474, 0x2a41, 0x4d4, 0x2a88b, 0x2a41, 0x47b, 0x2a41, 0x4d4,
        0x2a8e4, 0x2a41, 0x4d4, 0x2a41, 0x4f5, 0x2a905, 0x2a41, 0x4f5, 0x2a41, 0x4fc,
        0x2a905, 0x2a41, 0x608, 0x2a41, 0x613, 0x2a90c, 0x2a41, 0x4fc, 0x2a41, 0x503,
        0x2a90c, 0x2a41, 0x608, 0x2a41, 0x613, 0x2aa18, 0x2a41, 0x608, 0x2a41, 0x613,
        0x2aa30, 0x2aa3, 0x0, 0x2aa3, 0x2a, 0x2aaf9, 0x2aa3, 0xc9, 0x2aa3, 0xd7,
        0x2aaf9, 0x2aa3, 0xd8, 0x2aa3, 0xe2, 0x2aaf9, 0x2aa3, 0xe3, 0x2aa3, 0xeb,
        0x2ab1b, 0x2aa3, 0xeb, 0x2aa3, 0xf9, 0x2ab29, 0x2aa3, 0xf9, 0x2aa3, 0x11f,
        0x2ab4f, 0x2aa3, 0x11f, 0x2aa3, 0x172, 0x2aba2, 0x2aa3, 0x172, 0x2aa3, 0x1c5,
        0x2abf5, 0x2aa3, 0x1c5, 0x2aa3, 0x201, 0x2ac31, 0x2aa3, 0x201, 0x2aa3, 0x220,
        0x2ac50, 0x2aa3, 0x220, 0x2aa3, 0x257, 0x2ac50, 0x2aa3, 0x258, 0x2aa3, 0x25d,
        0x2ac8d, 0x2aa3, 0x25d, 0x2aa3, 0x26f, 0x2aca8, 0x2aa3, 0x278, 0x2aa3, 0x28a,
        0x2adcb, 0x2aa3, 0x39b, 0x2aa3, 0x445, 0x2ae75, 0x2aa3, 0x445, 0x2aa3, 0x4c5,
        0x2af7b, 0x2aa3, 0x54b, 0x2aa3, 0x559, 0x2b144, 0x2aa3, 0x714, 0x2aa3, 0x7a4,
        0x2c0eb, 0x2aa3, 0x16bb, 0x2aa3, 0x1757, 0x2c187, 0x2aa3, 0x1757, 0x2aa3, 0x17e8,
        0x2c34f, 0x2aa3, 0x191f, 0x2aa3, 0x19d4, 0x2c34f, 0x2aa3, 0x19d5, 0x2aa3, 0x1a48,
        0x2c47d, 0x2aa3, 0x1a4d, 0x2aa3, 0x1b0b, 0x2c47d, 0x2aa3, 0x1b0c, 0x2aa3, 0x1b7e,
        0x2cdb9, 0x2aa3, 0x2389, 0x2aa3, 0x2446, 0x2cdb9, 0x2aa3, 0x2447, 0x2aa3, 0x24c0,
        0x2d138, 0x2aa3, 0x2708, 0x2aa3, 0x274f, 0x2d2d7, 0x2aa3, 0x28a7, 0x2aa3, 0x28cc,
        0x2d2d7, 0x2aa3, 0x28cd, 0x2aa3, 0x28e9, 0x2d3f5, 0x2aa3, 0x29c5, 0x2aa3, 0x2a5e,
        0x2d48e, 0x2aa3, 0x2a5e, 0x2aa3, 0x2ad8, 0x2d825, 0x2aa3, 0x2df5, 0x2aa3, 0x2e58,
        0x2d888, 0x2aa3, 0x2e58, 0x2aa3, 0x2ea1, 0x2d8d1, 0x2aa3, 0x2ea1, 0x2aa3, 0x2efa,
        0x2d99b, 0x2d99, 0xb, 0x2d99, 0x44, 0x2d9d5, 0x2d99, 0x45, 0x2d99, 0x65,
        0x2d9d5, 0x2d99, 0x66, 0x2d99, 0x69, 0x2d9fc, 0x2d99, 0x6c, 0x2d99, 0x84,
        0x2da14, 0x2d99, 0x84, 0x2d99, 0x97, 0x2da30, 0x2da3, 0x0, 0x2da3, 0x9d,
        0x2db08, 0x2da3, 0xd8, 0x2da3, 0x12e, 0x2db08, 0x2da3, 0x12f, 0x2da3, 0x194,
        0x2dbc4, 0x2da3, 0x194, 0x2da3, 0x1a2, 0x2dbd2, 0x2da3, 0x1a2, 0x2da3, 0x1ae,
        0x2dbd2, 0x2da3, 0x1b2, 0x2da3, 0x1bc, 0x2dbde, 0x2da3, 0x1ae, 0x2da3, 0x1bc,
        0x2dbec, 0x2da3, 0x1bc, 0x2da3, 0x1dd, 0x2dbf3, 0x2da3, 0x1c3, 0x2da3, 0x1dd,
        0x2dbfe, 0x2da3, 0x1ce, 0x2da3, 0x1dd, 0x2dc06, 0x2da3, 0x1d6, 0x2da3, 0x1dd,
        0x2dc37, 0x2da3, 0x207, 0x2da3, 0x20e, 0x2dc3e, 0x2da3, 0xd2, 0x2da3, 0xd5,
        0x2dc3e, 0x2da3, 0xdc, 0x2da3, 0x12e, 0x2dc3e, 0x2da3, 0x132, 0x2da3, 0x135,
        0x2dc3e, 0x2da3, 0x138, 0x2da3, 0x13e, 0x2dc3e, 0x2da3, 0x141, 0x2da3, 0x194,
        0x2dc3e, 0x2da3, 0x20e, 0x2da3, 0x21c, 0x2dc8d, 0x2da3, 0x25d, 0x2da3, 0x275,
        0x2dca9, 0x2da3, 0x279, 0x2da3, 0x294, 0x2dcc4, 0x2da3, 0xd2, 0x2da3, 0xd5,
        0x2dcc4, 0x2da3, 0xdc, 0x2da3, 0x12e, 0x2dcc4, 0x2da3, 0x132, 0x2da3, 0x135,
        0x2dcc4, 0x2da3, 0x138, 0x2da3, 0x13e, 0x2dcc4, 0x2da3, 0x141, 0x2da3, 0x194,
        0x2dcc4, 0x2da3, 0x294, 0x2da3, 0x2fa, 0x2dcc4, 0x2da3, 0x2fb, 0x2da3, 0x302,
        0x2dd59, 0x2da3, 0xd2, 0x2da3, 0xd5, 0x2dd59, 0x2da3, 0xdc, 0x2da3, 0x12e,
        0x2dd59, 0x2da3, 0x132, 0x2da3, 0x135, 0x2dd59, 0x2da3, 0x138, 0x2da3, 0x13e,
        0x2dd59, 0x2da3, 0x141, 0x2da3, 0x194, 0x2dd59, 0x2da3, 0x329, 0x2da3, 0x364,
        0x2dd94, 0x2da3, 0xd2, 0x2da3, 0xd5, 0x2dd94, 0x2da3, 0xdc, 0x2da3, 0x12e,
        0x2dd94, 0x2da3, 0x132, 0x2da3, 0x135, 0x2dd94, 0x2da3, 0x138, 0x2da3, 0x13e,
        0x2dd94, 0x2da3, 0x141, 0x2da3, 0x194, 0x2dd94, 0x2da3, 0x364, 0x2da3, 0x384,
        0x2dde5, 0x2da3, 0x3b5, 0x2da3, 0x3f9, 0x2de76, 0x2da3, 0x446, 0x2da3, 0x4e2,
        0x2df12, 0x2da3, 0x4e2, 0x2da3, 0x595, 0x2dfc5, 0x2da3, 0x595, 0x2da3, 0x5b9,
        0x2dfe9, 0x2da3, 0x5b9, 0x2da3, 0x5ce, 0x2dffe, 0x2da3, 0x5ce, 0x2da3, 0x617,
        0x2e047, 0x2da3, 0x617, 0x2da3, 0x625, 0x2e055, 0x2da3, 0x625, 0x2da3, 0x634,
        0x2e064, 0x2da3, 0x634, 0x2da3, 0x64e, 0x2e07e, 0x2da3, 0x64e, 0x2da3, 0x672,
        0x2e0b0, 0x2da3, 0x680, 0x2da3, 0x6c1, 0x2e0f1, 0x2da3, 0x6c1, 0x2da3, 0x6ed,
        0x2e11d, 0x2da3, 0x6ed, 0x2da3, 0x724, 0x2e154, 0x2da3, 0x724, 0x2da3, 0x74f,
        0x2e17f, 0x2da3, 0x74f, 0x2da3, 0x761, 0x2e200, 0x2da3, 0x7d0, 0x2da3, 0x826,
        0x2e304, 0x2da3, 0x8d4, 0x2da3, 0x8f5, 0x2e3b0, 0x2da3, 0x980, 0x2da3, 0x996,
        0x2e3ff, 0x2da3, 0x9cf, 0x2da3, 0xa05, 0x2e437, 0x2da3, 0xa07, 0x2da3, 0xa14,
        0x2e444, 0x2da3, 0xa14, 0x2da3, 0xa66, 0x2e4be, 0x2da3, 0xa8e, 0x2da3, 0xb26,
        0x2e556, 0x2da3, 0xb26, 0x2da3, 0xb71, 0x2e5a1, 0x2da3, 0xb71, 0x2da3, 0xba2,
        0x2e5d2, 0x2da3, 0xba2, 0x2da3, 0xbe7, 0x2e642, 0x2da3, 0xc12, 0x2da3, 0xc17,
        0x2e642, 0x2da3, 0xc1f, 0x2da3, 0xc67, 0x2e647, 0x2da3, 0xc17, 0x2da3, 0xc1c,
        0x2e647, 0x2da3, 0xc1f, 0x2da3, 0xc67, 0x2e69b, 0x2da3, 0xc6b, 0x2da3, 0xca6,
        0x2e6d6, 0x2da3, 0xca6, 0x2da3, 0xcb6, 0x2e6e7, 0x2da3, 0xcb7, 0x2da3, 0xd39,
        0x2e769, 0x2da3, 0xd39, 0x2da3, 0xd93, 0x2e891, 0x2da3, 0xe61, 0x2da3, 0xe85,
        0x2e8b5, 0x2da3, 0xe85, 0x2da3, 0xec4, 0x2e91e, 0x2da3, 0xeee, 0x2da3, 0xf0d,
        0x2e91e, 0x2da3, 0xf13, 0x2da3, 0xf33, 0x2e93d, 0x2da3, 0xf0d, 0x2da3, 0xf33,
        0x2e981, 0x2da3, 0xf51, 0x2da3, 0xf7e, 0x2e9e6, 0x2da3, 0xfb6, 0x2da3, 0xff4,
        0x2ea24, 0x2da3, 0xff4, 0x2da3, 0x1022, 0x2ea52, 0x2da3, 0x1022, 0x2da3, 0x102b,
        0x2ea52, 0x2da3, 0x1031, 0x2da3, 0x1087, 0x2ea5b, 0x2da3, 0x102b, 0x2da3, 0x1087,
        0x2ead3, 0x2da3, 0x10a3, 0x2da3, 0x10c8, 0x2eaf8, 0x2da3, 0x10c8, 0x2da3, 0x10d7,
        0x2eb07, 0x2da3, 0x10d7, 0x2da3, 0x10de, 0x2eb07, 0x2da3, 0x10e3, 0x2da3, 0x110d,
        0x2eb0e, 0x2da3, 0x10de, 0x2da3, 0x110d, 0x2ebf8, 0x2da3, 0x11c8, 0x2da3, 0x11dc,
    };
    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}
/*
{{0x01ed, 0x0000}, 10}, // sub_1ed0 retf
{{0x01ed, 0x0059}, 22}, // sub_1f29 retf
{{0x01ed, 0x047d}, 30}, // sub_234d retf
{{0x01ed, 0x0f38}, 8}, // sub_2e08 ret
{{0x01ed, 0x1037}, 8}, // sub_2f07 ret
{{0x01ed, 0x25f0}, 6}, // sub_44c0 ret
{{0x01ed, 0xb1a9}, 2}, // sub_d079 ret
{{0x01ed, 0xd5c2}, 2}, // sub_f492 ret
{{0x01ed, 0xe51d}, 4}, // sub_103ed ret
{{0x11b2, 0x00ec}, 4}, // sub_11c0c retf
{{0x11b2, 0x06c4}, 10}, // sub_121e4 retf
{{0x11b2, 0x0877}, 4}, // sub_12397 retf
{{0x11b2, 0x1001}, 4}, // sub_12b21 retf
{{0x11b2, 0x6c86}, 4}, // sub_187a6 retf
{{0x11b2, 0x6fe5}, 4}, // sub_18b05 retf
{{0x11b2, 0x7213}, 2}, // sub_18d33 ret
{{0x11b2, 0x73fd}, 2}, // sub_18f1d ret
{{0x11b2, 0x80e1}, 10}, // sub_19c01 retf
{{0x11b2, 0x899d}, 6}, // sub_1a4bd retf
{{0x11b2, 0xaef2}, 4}, // sub_1ca12 retf
{{0x11b2, 0xaf3a}, 4}, // sub_1ca5a retf
{{0x11b2, 0xb9b9}, 4}, // sub_1d4d9 retf
{{0x11b2, 0xbb28}, 6}, // sub_1d648 retf
{{0x1f0b, 0x0000}, 6}, // sub_1f0b0 retf
{{0x1f0b, 0x0045}, 6}, // sub_1f0f5 retf
{{0x1f0b, 0x0097}, 14}, // sub_1f147 retf
{{0x1f0b, 0x0101}, 16}, // sub_1f1b1 retf
{{0x1f0b, 0x0309}, 16}, // sub_1f3b9 retf
{{0x1f0b, 0x0349}, 12}, // sub_1f3f9 retf
{{0x1f0b, 0x03fa}, 12}, // sub_1f4aa retf
{{0x1f5c, 0x000f}, 4}, // sub_1f5cf retf
{{0x1f5c, 0x0047}, 4}, // sub_1f607 retf
{{0x1f5c, 0x01ac}, 4}, // sub_1f76c retf
{{0x1f5c, 0x0d2d}, 14}, // sub_202ed retf
{{0x1f5c, 0x10d7}, 14}, // sub_20697 retf
{{0x1f5c, 0x1915}, 12}, // sub_20ed5 retf
{{0x1f5c, 0x19e3}, 4}, // sub_20fa3 retf
{{0x2188, 0x0000}, 6}, // sub_21880 retf
{{0x2188, 0x0043}, 6}, // sub_218c3 retf
{{0x2188, 0x021f}, 4}, // sub_21a9f retf
{{0x2188, 0x02d3}, 6}, // sub_21b53 retf
{{0x2188, 0x0310}, 4}, // sub_21b90 retf
{{0x2188, 0x0357}, 4}, // sub_21bd7 retf
{{0x2188, 0x03ab}, 6}, // sub_21c2b retf
{{0x2188, 0x068d}, 4}, // sub_21f0d retf
{{0x2188, 0x075e}, 6}, // sub_21fde retf
{{0x2188, 0x0831}, 8}, // sub_220b1 retf
{{0x2188, 0x08a7}, 8}, // sub_22127 retf
{{0x2188, 0x0a66}, 8}, // sub_222e6 retf
{{0x2188, 0x1ddb}, 12}, // sub_2365b retf
{{0x2188, 0x1e74}, 14}, // sub_236f4 retf
{{0x2188, 0x1f58}, 6}, // sub_237d8 retf
{{0x2188, 0x1fb9}, 8}, // sub_23839 retf
{{0x2188, 0x1fc2}, 8}, // sub_23842 retf
{{0x2188, 0x2176}, 8}, // sub_239f6 retf
{{0x2188, 0x2241}, 8}, // sub_23ac1 retf
{{0x2188, 0x251d}, 8}, // sub_23d9d retf
{{0x2188, 0x2850}, 8}, // sub_240d0 retf
{{0x2188, 0x2877}, 8}, // sub_240f7 retf
{{0x2188, 0x298a}, 8}, // sub_2420a retf
{{0x2188, 0x2acf}, 8}, // sub_2434f retf
{{0x2188, 0x2bd4}, 8}, // sub_24454 retf
{{0x2188, 0x2d37}, 8}, // sub_245b7 retf
{{0x2188, 0x2e25}, 8}, // sub_246a5 retf
{{0x2188, 0x2f83}, 8}, // sub_24803 retf
{{0x2188, 0x323c}, 8}, // sub_24abc retf
{{0x2188, 0x32f6}, 8}, // sub_24b76 retf
{{0x2188, 0x3416}, 8}, // sub_24c96 retf
{{0x2188, 0x36b0}, 8}, // sub_24f30 retf
{{0x2188, 0x3904}, 8}, // sub_25184 retf
{{0x2188, 0x3a2e}, 8}, // sub_252ae retf
{{0x2188, 0x3be8}, 8}, // sub_25468 retf
{{0x2188, 0x3d23}, 8}, // sub_255a3 retf
{{0x2188, 0x3e70}, 8}, // sub_256f0 retf
{{0x2188, 0x3f13}, 8}, // sub_25793 retf
{{0x2188, 0x3f6c}, 8}, // sub_257ec retf
{{0x2188, 0x403a}, 8}, // sub_258ba retf
{{0x2188, 0x4145}, 8}, // sub_259c5 retf
{{0x2188, 0x47b9}, 8}, // sub_26039 retf
{{0x2188, 0x48fe}, 8}, // sub_2617e retf
{{0x2188, 0x4a4b}, 8}, // sub_262cb retf
{{0x2188, 0x4a82}, 8}, // sub_26302 retf
{{0x2188, 0x4ad3}, 8}, // sub_26353 retf
{{0x2188, 0x4c92}, 8}, // sub_26512 retf
{{0x2188, 0x4fd4}, 8}, // sub_26854 retf
{{0x2188, 0x52e7}, 8}, // sub_26b67 retf
{{0x2188, 0x55ec}, 8}, // sub_26e6c retf
{{0x2188, 0x5855}, 8}, // sub_270d5 retf
{{0x2188, 0x5bbe}, 8}, // sub_2743e retf
{{0x2188, 0x5c8f}, 8}, // sub_2750f retf
{{0x2188, 0x6232}, 8}, // sub_27ab2 retf
{{0x2188, 0x62f2}, 8}, // sub_27b72 retf
{{0x2188, 0x6458}, 8}, // sub_27cd8 retf
{{0x2188, 0x6681}, 8}, // sub_27f01 retf
{{0x2188, 0x672b}, 8}, // sub_27fab retf
{{0x2188, 0x69d3}, 8}, // sub_28253 retf
{{0x2188, 0x6afa}, 8}, // sub_2837a retf
{{0x2188, 0x6d31}, 8}, // sub_285b1 retf
{{0x2188, 0x6ff6}, 8}, // sub_28876 retf
{{0x2188, 0x70e4}, 8}, // sub_28964 retf
{{0x28b3, 0x0000}, 6}, // sub_28b30 retf
{{0x28b3, 0x0221}, 6}, // sub_28d51 retf
{{0x28b3, 0x02ef}, 4}, // sub_28e1f retf
{{0x28b3, 0x0446}, 4}, // sub_28f76 retf
{{0x28b3, 0x059d}, 4}, // sub_290cd retf
{{0x28b3, 0x0711}, 4}, // sub_29241 retf
{{0x28b3, 0x0740}, 6}, // sub_29270 retf
{{0x28b3, 0x0992}, 6}, // sub_294c2 retf
{{0x28b3, 0x13b5}, 8}, // sub_29ee5 retf
{{0x2a31, 0x00cc}, 4}, // sub_2a3dc retf
{{0x2a41, 0x0145}, 4}, // sub_2a555 ret retf
{{0x2a41, 0x016d}, 4}, // sub_2a57d retf
{{0x2a41, 0x0215}, 6}, // sub_2a625 retf
{{0x2a41, 0x0259}, 4}, // sub_2a669 retf
{{0x2a41, 0x0273}, 4}, // sub_2a683 retf
{{0x2a41, 0x029e}, 4}, // sub_2a6ae retf
{{0x2a41, 0x032e}, 6}, // sub_2a73e retf
{{0x2a41, 0x0359}, 6}, // sub_2a769 retf
{{0x2aa3, 0x00c9}, 4}, // sub_2aaf9 retf
{{0x2aa3, 0x00eb}, 4}, // sub_2ab1b retf
{{0x2aa3, 0x00f9}, 4}, // sub_2ab29 retf
{{0x2aa3, 0x011f}, 6}, // sub_2ab4f retf
{{0x2aa3, 0x0172}, 6}, // sub_2aba2 retf
{{0x2aa3, 0x01c5}, 4}, // sub_2abf5 retf
{{0x2aa3, 0x0220}, 4}, // sub_2ac50 retf
{{0x2aa3, 0x025d}, 4}, // sub_2ac8d retf
{{0x2aa3, 0x0278}, 6}, // sub_2aca8 retf
{{0x2aa3, 0x039b}, 10}, // sub_2adcb retf
{{0x2aa3, 0x0445}, 10}, // sub_2ae75 retf
{{0x2aa3, 0x054b}, 4}, // sub_2af7b retf
{{0x2aa3, 0x0714}, 10}, // sub_2b144 retf
{{0x2aa3, 0x16bb}, 14}, // sub_2c0eb retf
{{0x2aa3, 0x1757}, 10}, // sub_2c187 retf
{{0x2aa3, 0x191f}, 10}, // sub_2c34f retf
{{0x2aa3, 0x1a4d}, 10}, // sub_2c47d retf
{{0x2aa3, 0x2389}, 10}, // sub_2cdb9 retf
{{0x2aa3, 0x28a7}, 4}, // sub_2d2d7 retf
{{0x2aa3, 0x29c5}, 10}, // sub_2d3f5 retf
{{0x2aa3, 0x2a5e}, 10}, // sub_2d48e retf
{{0x2aa3, 0x2df5}, 10}, // sub_2d825 retf
{{0x2d99, 0x0045}, 8}, // sub_2d9d5 retf
{{0x2d99, 0x006c}, 8}, // sub_2d9fc retf
{{0x2d99, 0x0084}, 8}, // sub_2da14 retf
{{0x2da3, 0x025d}, 12}, // sub_2dc8d retf
{{0x2da3, 0x0329}, 8}, // sub_2dd59 retf
{{0x2da3, 0x0364}, 8}, // sub_2dd94 retf
{{0x2da3, 0x0634}, 6}, // sub_2e064 retf
{{0x2da3, 0x064e}, 12}, // sub_2e07e retf
{{0x2da3, 0x0680}, 10}, // sub_2e0b0 retf
{{0x2da3, 0x06c1}, 6}, // sub_2e0f1 retf
{{0x2da3, 0x06ed}, 10}, // sub_2e11d retf
{{0x2da3, 0x0724}, 10}, // sub_2e154 retf
{{0x2da3, 0x074f}, 4}, // sub_2e17f retf
{{0x2da3, 0x07d0}, 10}, // sub_2e200 retf
{{0x2da3, 0x08d4}, 8}, // sub_2e304 retf
{{0x2da3, 0x0980}, 4}, // sub_2e3b0 retf
{{0x2da3, 0x0b26}, 14}, // sub_2e556 retf
{{0x2da3, 0x0b71}, 10}, // sub_2e5a1 retf
{{0x2da3, 0x0ba2}, 10}, // sub_2e5d2 retf
{{0x2da3, 0x0c12}, 6}, // sub_2e642 retf
{{0x2da3, 0x0c17}, 6}, // sub_2e647 retf
{{0x2da3, 0x0c6b}, 6}, // sub_2e69b retf
{{0x2da3, 0x0cb7}, 6}, // sub_2e6e7 retf
{{0x2da3, 0x0eee}, 6}, // sub_2e91e retf
{{0x2da3, 0x0f0d}, 6}, // sub_2e93d retf
{{0x2da3, 0x0f51}, 6}, // sub_2e981 retf
{{0x2da3, 0x0fb6}, 8}, // sub_2e9e6 retf
{{0x2da3, 0x0ff4}, 10}, // sub_2ea24 retf
{{0x2da3, 0x1022}, 8}, // sub_2ea52 retf
{{0x2da3, 0x102b}, 8}, // sub_2ea5b retf
{{0x2da3, 0x10a3}, 6}, // sub_2ead3 retf
{{0x2da3, 0x10d7}, 6}, // sub_2eb07 retf
{{0x2da3, 0x10de}, 6}, // sub_2eb0e retf
{{0x2da3, 0x11c8}, 10}, // sub_2ebf8 retf
*/
#endif

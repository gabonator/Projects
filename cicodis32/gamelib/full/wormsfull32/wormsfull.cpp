#include "cico32.h"

void init()
{
    ds = 0x0168;
    cs = 0x0160;
    es = 0x0028;
    ss = 0x0168;
    esp = 0x3f7840;
    // Overlay1: base 0x197000 size 0x3dbdf
    // Overlay2: base 0x1d5000 size 0x222840
}

void sub_1cba3c();

void start()
{
    // eip = 0x34a3c
    sub_1cba3c(); // 0160:1cba3c (197000+34a3c)
}

void sub_197010();
void sub_197059();
void sub_19708b();
void sub_1970f2();
void sub_19714b();
void sub_1972f1();
void sub_197336();
void sub_19739b();
void sub_1973b5();
void sub_1973d4();
void sub_1978b4();
void sub_197a14();
void sub_197ccc();
void sub_197df2();
void sub_197e44();
void sub_197f02();
void sub_197f65();
void sub_197f93();
void sub_198058();
void sub_1980af();
void sub_1981a0();
void sub_19828d();
void sub_19839d();
void sub_19843a();
void sub_1984fb();
void sub_198723();
void sub_198797();
void sub_1987eb();
void sub_198a6a();
void sub_198bd3();
void sub_198cae();
void sub_198d18();
void sub_198f43();
void sub_199079();
void sub_19917f();
void sub_19930d();
void sub_199382();
void sub_1994e6();
void sub_199501();
void sub_19954f();
void sub_199593();
void sub_199645();
void sub_1996e2();
void sub_1996ed();
void sub_19995c();
void sub_199b2d();
void sub_199b95();
void sub_199f16();
void sub_19a0dc();
void sub_19a107();
void sub_19a305();
void sub_19a36c();
void sub_19a46a();
void sub_19a50e();
void sub_19a556();
void sub_19a56b();
void sub_19a6ed();
void sub_19a76a();
void sub_19a852();
void sub_19a8c0();
void sub_19abd3();
void sub_19ac2f();
void sub_19ac8b();
void sub_19ace7();
void sub_19ad75();
void sub_19adf1();
void sub_19ae47();
void sub_19af15();
void sub_19af45();
void sub_19b06b();
void sub_19b22e();
void sub_19b3b3();
void sub_19b539();
void sub_19b674();
void sub_19b709();
void sub_19b794();
void sub_19bafa();
void sub_19bb2a();
void sub_19bcbd();
void sub_19c025();
void sub_19c07f();
void sub_19c0a0();
void sub_19c3e0();
void sub_19c3f9();
void sub_19c40e();
void sub_19c452();
void sub_19c487();
void sub_19c4b0();
void sub_19c54b();
void sub_19c608();
void sub_19c687();
void sub_19c6aa();
void sub_19c6b5();
void sub_19c76f();
void sub_19c7d3();
void sub_19c7ef();
void sub_19c840();
void sub_19c8e6();
void sub_19c9c1();
void sub_19ca13();
void sub_19ca3d();
void sub_19ca7d();
void sub_19cb1f();
void sub_19cb2e();
void sub_19cc1b();
void sub_19cc49();
void sub_19ccc3();
void sub_19cd7f();
void sub_19d28e();
void sub_19da3f();
void sub_19dc7f();
void sub_19ddd3();
void sub_19df50();
void sub_19e006();
void sub_19e029();
void sub_19e075();
void sub_19e0ca();
void sub_19e1a9();
void sub_19e20e();
void sub_19e27a();
void sub_19e298();
void sub_19e2d6();
void sub_19e30a();
void sub_19e36c();
void sub_19e3c6();
void sub_19e452();
void sub_19e5a8();
void sub_19e68b();
void sub_19e7ed();
void sub_19e83e();
void sub_19e8cb();
void sub_19e980();
void sub_19ea10();
void sub_19eaa6();
void sub_19ed21();
void sub_19efad();
void sub_19f178();
void sub_19f1c7();
void sub_19f1fc();
void sub_19f308();
void sub_19f346();
void sub_19f4a3();
void sub_19fd41();
void sub_19fdc8();
void sub_19fde2();
void sub_19fe05();
void sub_19fe49();
void sub_19fe73();
void sub_19feb1();
void sub_19ff9b();
void sub_19ffae();
void sub_19ffef();
void sub_1a0008();
void sub_1a0028();
void sub_1a003c();
void sub_1a0074();
void sub_1a009c();
void sub_1a00b5();
void sub_1a010f();
void sub_1a012f();
void sub_1a015d();
void sub_1a0171();
void sub_1a01d5();
void sub_1a0216();
void sub_1a025b();
void sub_1a029c();
void sub_1a02c4();
void sub_1a0311();
void sub_1a0335();
void sub_1a0359();
void sub_1a03b7();
void sub_1a03d0();
void sub_1a03f7();
void sub_1a041e();
void sub_1a0a3c();
void sub_1a0b44();
void sub_1a0def();
void sub_1a0f32();
void sub_1a10a6();
void sub_1a1248();
void sub_1a1303();
void sub_1a1513();
void sub_1a1643();
void sub_1a16e3();
void sub_1a1797();
void sub_1a1e27();
void sub_1a1fc1();
void sub_1a1ff7();
void sub_1a201b();
void sub_1a2051();
void sub_1a209d();
void sub_1a20e2();
void sub_1a2682();
void sub_1a2cbd();
void sub_1a2edc();
void sub_1a2fe9();
void sub_1a314d();
void sub_1a36e1();
void sub_1a3755();
void sub_1a3999();
void sub_1a3a42();
void sub_1a3dd3();
void sub_1a41fa();
void sub_1a455b();
void sub_1a4712();
void sub_1a4755();
void sub_1a4923();
void sub_1a49b6();
void sub_1a4a35();
void sub_1a4b16();
void sub_1a4b92();
void sub_1a4e56();
void sub_1a4f22();
void sub_1a52dd();
void sub_1a54e5();
void sub_1a5616();
void sub_1a5625();
void sub_1a566f();
void sub_1a56c8();
void sub_1a56f1();
void sub_1a570c();
void sub_1a5720();
void sub_1a5738();
void sub_1a5742();
void sub_1a5793();
void sub_1a57a0();
void sub_1a57ba();
void sub_1a593a();
void sub_1a5964();
void sub_1a59c1();
void sub_1a5a04();
void sub_1a5a31();
void sub_1a5ae0();
void sub_1a5b1b();
void sub_1a5b58();
void sub_1a5c1f();
void sub_1a5c92();
void sub_1a5d0b();
void sub_1a5d81();
void sub_1a5dc0();
void sub_1a5e64();
void sub_1a5eb5();
void sub_1a5ecc();
void sub_1a5ef8();
void sub_1a5f3a();
void sub_1a5f62();
void sub_1a60bf();
void sub_1a614a();
void sub_1a617f();
void sub_1a61d5();
void sub_1a6300();
void sub_1a63f9();
void sub_1a651d();
void sub_1a659b();
void sub_1a67e2();
void sub_1a699a();
void sub_1a69bc();
void sub_1a69e0();
void sub_1a6ac1();
void sub_1a6b31();
void sub_1a6c77();
void sub_1a6ca3();
void sub_1a6ce7();
void sub_1a6de2();
void sub_1a6e9a();
void sub_1a6ef3();
void sub_1a6f89();
void sub_1a6ff9();
void sub_1a7026();
void sub_1a7078();
void sub_1a70fa();
void sub_1a712b();
void sub_1a71e9();
void sub_1a7271();
void sub_1a733e();
void sub_1a739a();
void sub_1a74e9();
void sub_1a75c6();
void sub_1a761a();
void sub_1a76a1();
void sub_1a7974();
void sub_1a79d7();
void sub_1a7a3f();
void sub_1a7a79();
void sub_1a7b5d();
void sub_1a7ba6();
void sub_1a7be0();
void sub_1a7bfb();
void sub_1a7c98();
void sub_1a7cd0();
void sub_1a7d0f();
void sub_1a7d2c();
void sub_1a7dac();
void sub_1a7e1a();
void sub_1a7e5c();
void sub_1a7f95();
void sub_1a81b5();
void sub_1a8212();
void sub_1a8251();
void sub_1a8294();
void sub_1a8308();
void sub_1a8399();
void sub_1a8526();
void sub_1a859f();
void sub_1a8605();
void sub_1a8811();
void sub_1a885f();
void sub_1a8899();
void sub_1a8998();
void sub_1a89ff();
void sub_1a8a8c();
void sub_1a8a9c();
void sub_1a8acd();
void sub_1a8b65();
void sub_1a8c3a();
void sub_1a8caa();
void sub_1a8d1a();
void sub_1a8dc9();
void sub_1a8e32();
void sub_1a8e8e();
void sub_1a8ec1();
void sub_1a8f18();
void sub_1a90cf();
void sub_1a916f();
void sub_1a9220();
void sub_1a925a();
void sub_1a929d();
void sub_1a92f5();
void sub_1a932f();
void sub_1a9399();
void sub_1a97cf();
void sub_1a9869();
void sub_1a9950();
void sub_1a99ce();
void sub_1a99fa();
void sub_1a9a5b();
void sub_1a9a95();
void sub_1a9ac5();
void sub_1a9bf3();
void sub_1a9c24();
void sub_1a9c63();
void sub_1a9cc0();
void sub_1a9e27();
void sub_1aa084();
void sub_1aa186();
void sub_1aa1d8();
void sub_1aa390();
void sub_1aa470();
void sub_1aa4ba();
void sub_1aa571();
void sub_1aa620();
void sub_1aa67a();
void sub_1aa7ed();
void sub_1aa8fe();
void sub_1aaa18();
void sub_1aab63();
void sub_1aacf6();
void sub_1aadbd();
void sub_1aaf7e();
void sub_1ab143();
void sub_1ab16d();
void sub_1ab3aa();
void sub_1ab3de();
void sub_1ab586();
void sub_1ab5ab();
void sub_1ab6eb();
void sub_1ab709();
void sub_1ab73d();
void sub_1ab773();
void sub_1ab862();
void sub_1ab937();
void sub_1abb6d();
void sub_1abbec();
void sub_1abc6d();
void sub_1abd00();
void sub_1abd15();
void sub_1abd42();
void sub_1abd78();
void sub_1ac0d4();
void sub_1ac317();
void sub_1ac5ea();
void sub_1ac674();
void sub_1ac70e();
void sub_1ac87f();
void sub_1ac9a8();
void sub_1ac9eb();
void sub_1acc78();
void sub_1accbc();
void sub_1accfe();
void sub_1acd40();
void sub_1acd6c();
void sub_1acf4b();
void sub_1ad074();
void sub_1ad1b8();
void sub_1ad1ca();
void sub_1ad1f8();
void sub_1ad28a();
void sub_1ad412();
void sub_1ad437();
void sub_1ad4e0();
void sub_1ad5cb();
void sub_1ad640();
void sub_1ad723();
void sub_1ad80e();
void sub_1ad933();
void sub_1ada58();
void sub_1adb97();
void sub_1add3f();
void sub_1ae04a();
void sub_1ae1e1();
void sub_1ae204();
void sub_1ae25e();
void sub_1ae2bf();
void sub_1ae345();
void sub_1ae3f2();
void sub_1ae5f9();
void sub_1ae62f();
void sub_1ae669();
void sub_1ae6ce();
void sub_1aec45();
void sub_1af4c4();
void sub_1af508();
void sub_1af541();
void sub_1af5a6();
void sub_1af62c();
void sub_1afb8f();
void sub_1afc2f();
void sub_1b00e1();
void sub_1b028f();
void sub_1b0340();
void sub_1b0457();
void sub_1b055b();
void sub_1b0608();
void sub_1b06d3();
void sub_1b06fb();
void sub_1b09c3();
void sub_1b0a50();
void sub_1b10e2();
void sub_1b1154();
void sub_1b125b();
void sub_1b177b();
void sub_1b1d13();
void sub_1b1e30();
void sub_1b1f28();
void sub_1b2017();
void sub_1b211c();
void sub_1b21b4();
void sub_1b2246();
void sub_1b23ba();
void sub_1b2492();
void sub_1b252b();
void sub_1b268e();
void sub_1b2772();
void sub_1b2851();
void sub_1b2930();
void sub_1b2afb();
void sub_1b2c6c();
void sub_1b2e2b();
void sub_1b2ed9();
void sub_1b2f43();
void sub_1b326b();
void sub_1b32e0();
void sub_1b3517();
void sub_1b35ef();
void sub_1b36d6();
void sub_1b3931();
void sub_1b39fa();
void sub_1b3b0c();
void sub_1b3bb0();
void sub_1b3ca5();
void sub_1b3e07();
void sub_1b3f20();
void sub_1b4068();
void sub_1b40d6();
void sub_1b4152();
void sub_1b41b3();
void sub_1b420c();
void sub_1b446a();
void sub_1b490d();
void sub_1b4a80();
void sub_1b4b55();
void sub_1b4ce6();
void sub_1b4d1b();
void sub_1b4f2b();
void sub_1b5135();
void sub_1b518c();
void sub_1b538a();
void sub_1b5af4();
void sub_1b5d3b();
void sub_1b5e88();
void sub_1b62aa();
void sub_1b6909();
void sub_1b6b6f();
void sub_1b6bba();
void sub_1b6d25();
void sub_1b6e24();
void sub_1b701b();
void sub_1b7152();
void sub_1b7208();
void sub_1b77c2();
void sub_1b7852();
void sub_1b7868();
void sub_1b78cc();
void sub_1b7928();
void sub_1b7ae4();
void sub_1b7c0e();
void sub_1b7c85();
void sub_1b7cb9();
void sub_1b7d96();
void sub_1b7e53();
void sub_1b8095();
void sub_1b80f2();
void sub_1b813e();
void sub_1b8201();
void sub_1b8473();
void sub_1b8562();
void sub_1b8616();
void sub_1b8658();
void sub_1b86ca();
void sub_1b8859();
void sub_1b895e();
void sub_1b8fe7();
void sub_1b94b9();
void sub_1b951a();
void sub_1b9581();
void sub_1b960d();
void sub_1b974f();
void sub_1b97fa();
void sub_1b9948();
void sub_1b99c1();
void sub_1b9aca();
void sub_1b9c78();
void sub_1b9fde();
void sub_1ba0e7();
void sub_1ba7ae();
void sub_1baa21();
void sub_1bac86();
void sub_1bad56();
void sub_1baf82();
void sub_1bb10f();
void sub_1bb246();
void sub_1bb827();
void sub_1bb889();
void sub_1bb8e7();
void sub_1bb927();
void sub_1bb965();
void sub_1bb9a8();
void sub_1bb9cd();
void sub_1bbbff();
void sub_1bbc45();
void sub_1bbc9d();
void sub_1bbd1e();
void sub_1bbd46();
void sub_1bbd74();
void sub_1bbdfa();
void sub_1bbe3c();
void sub_1bbe7a();
void sub_1bbf71();
void sub_1bbfb3();
void sub_1bc03b();
void sub_1bc21f();
void sub_1bc38a();
void sub_1bc3dc();
void sub_1bc403();
void sub_1bc4f4();
void sub_1bc5d8();
void sub_1bc63d();
void sub_1bc694();
void sub_1bc6e7();
void sub_1bc727();
void sub_1bc7c0();
void sub_1bc801();
void sub_1bca20();
void sub_1bcabc();
void sub_1bcd9f();
void sub_1bce43();
void sub_1bcf16();
void sub_1bd039();
void sub_1bd0e1();
void sub_1bd198();
void sub_1bd1d7();
void sub_1bd287();
void sub_1bd3ce();
void sub_1bd48f();
void sub_1bd49d();
void sub_1bd569();
void sub_1bd5aa();
void sub_1bd615();
void sub_1bd68d();
void sub_1bd948();
void sub_1bda16();
void sub_1bda89();
void sub_1bdb87();
void sub_1bdd06();
void sub_1be185();
void sub_1bf310();
void sub_1bf3a9();
void sub_1bf3cf();
void sub_1bf42a();
void sub_1bf43a();
void sub_1bf4d2();
void sub_1bf57c();
void sub_1bf625();
void sub_1bf710();
void sub_1bf7d4();
void sub_1bf833();
void sub_1bf86e();
void sub_1bf892();
void sub_1bf8aa();
void sub_1bf953();
void sub_1bf9c9();
void sub_1bfa0f();
void sub_1bfa50();
void sub_1bfbd3();
void sub_1bfcd4();
void sub_1bfd00();
void sub_1bfd2f();
void sub_1bfd4c();
void sub_1bfd80();
void sub_1bfdbf();
void sub_1c0c04();
void sub_1c1930();
void sub_1c4354();
void sub_1c84e8();
void sub_1c880b();
void sub_1c8aae();
void sub_1c8af1();
void sub_1c8bd6();
void sub_1c8c05();
void sub_1c8c83();
void sub_1ca116();
void sub_1cb786();
void sub_1cb83f();
void sub_1cb8ee();
void sub_1cb901();
void sub_1cb931();
void sub_1cb950();
void sub_1cb9f2();
void sub_1cba0f();
void sub_1cba3c();
void sub_1cbab4();
void sub_1cbccd();
void sub_1cbd14();
void sub_1cbd1e();
void sub_1cbd40();
void sub_1cbd41();
void sub_1cbd59();
void sub_1cbd6f();
void sub_1cbd97();
void sub_1cbdcb();
void sub_1cbe00();
void sub_1cbe37();
void sub_1cbea3();
void sub_1cbf57();
void sub_1cc01f();
void sub_1cc03a();
void sub_1cc0d0();
void sub_1cc112();
void sub_1cc20e();
void sub_1cc23e();
void sub_1cc26d();
void sub_1cc282();
void sub_1cc28e();
void sub_1cc2f7();
void sub_1cc380();
void sub_1cc54a();
void sub_1cc583();
void sub_1cc76a();
void sub_1cc785();
void sub_1cc78d();
void sub_1cc798();
void sub_1cc7fb();
void sub_1cc81a();
void sub_1cc9a1();
void sub_1cca84();
void sub_1ccae2();
void sub_1ccafb();
void sub_1ccd7c();
void sub_1cceaf();
void sub_1ccf0a();
void sub_1ccf2e();
void sub_1ccf51();
void sub_1ccfb2();
void sub_1cd08d();
void sub_1cd094();
void sub_1cd4dd();
void sub_1cd4f5();
void sub_1cd503();
void sub_1cd5c6();
void sub_1cd71a();
void sub_1cd76a();
void sub_1cd7b5();
void sub_1cd805();
void sub_1cd820();
void sub_1cd850();
void sub_1cd91b();
void sub_1cd938();
void sub_1cd985();
void sub_1cda84();
void sub_1cdabf();
void sub_1cdaff();
void sub_1cdb10();
void sub_1cdb95();
void sub_1cdba8();
void sub_1cdbcb();
void sub_1cdc02();
void sub_1cde2c();
void sub_1cded4();
void sub_1cdf2b();
void sub_1cdf5c();
void sub_1ce01b();
void sub_1ce05c();
void sub_1ce06d();
void sub_1ce073();
void sub_1ce0a5();
void sub_1ce0aa();
void sub_1ce121();
void sub_1ce1f8();
void sub_1ce2a3();
void sub_1ce474();
void sub_1ce518();
void sub_1ce540();
void sub_1ce597();
void sub_1ce5c9();
void sub_1ce608();
void sub_1ce60d();
void sub_1ce674();
void sub_1ce71c();
void sub_1ce827();
void sub_1ce866();
void sub_1ce9c7();
void sub_1cea3b();
void sub_1cea89();
void sub_1ceb5c();
void sub_1cec0b();
void sub_1ced4f();
void sub_1cedc6();
void sub_1cedca();
void sub_1cee02();
void sub_1cf1cd();
void sub_1cf217();
void sub_1cf269();
void sub_1cf2b2();
void sub_1cf2cd();
void sub_1cf2db();
void sub_1cf40c();
void sub_1cf447();
void sub_1cf52c();
void sub_1cf554();
void sub_1cf807();
void sub_1cf837();
void sub_1cf976();
void sub_1cf989();
void sub_1cf9af();
void sub_1cfac5();
void sub_1cfc46();
void sub_1cfc4f();
void sub_1d2fb6();
void sub_1d30da();
void sub_1d3101();
void sub_1d3107();
void sub_1d310d();
void sub_1d312b();
void sub_1d3180();
void sub_1d31a0();
void sub_1d31b8();
void sub_1d3230();
void sub_1d3241();
void sub_1d3293();
void sub_1d330f();
void sub_1d3333();
void sub_1d3362();
void sub_1d3380();
void sub_1d3388();
void sub_1d339b();
void sub_1d33b9();
void sub_1d33c8();
void sub_1d356b();
void sub_1d3632();
void sub_1d364f();
void sub_1d3675();
void sub_1d3694();
void sub_1d36c7();
void sub_1d39c5();
void sub_1d39de();
void sub_1d39f8();
void sub_1d3f8a();
void sub_1d3fb0();
void sub_1d3fec();
void sub_1d4032();
void sub_1d4041();
void sub_1d4179();
void sub_1d41ce();
void sub_1d429c();
void sub_1d42e0();
void sub_1d4369();
void sub_1d437b();
void sub_1d4446();
void sub_1d495e();
void sub_1d4971();

void sub_197010() // 0160:197010 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    ecx = edx;
    if (eax == edx)
        goto loc_197055;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_197024;
    ebx = 0xfffffff8;
    goto loc_197029;
loc_197024: // 0160:197024
    ebx = 0x00000008;
loc_197029: // 0160:197029
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax = -eax;
    esi &= eax;
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax = -eax;
    edx = esi;
    ecx &= eax;
    goto loc_197051;
loc_197043: // 0160:197043
    sub_1a5625();
    eax = edx;
    sub_1bfd4c();
    edx += ebx;
loc_197051: // 0160:197051
    if (edx != ecx)
        goto loc_197043;
loc_197055: // 0160:197055
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197059() // 0160:197059 +long
{
    esp -= 4;
    sub_1bfd2f();
    eax = memoryAGet32(ds, 0x1e00cc);
    eax = memoryAGet32(ds, eax * 8 + 0x1e00d0);
    sub_1bfbd3();
    eax = memoryAGet32(ds, 0x1e00cc);
    eax = memoryAGet32(ds, eax * 8 + 0x1e00d4);
    memoryASet32(ds, 0x39ead0, eax);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x3a1f04, eax);
    esp += 4;
}
void sub_19708b() // 0160:19708b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    if (eax != memoryAGet32(ds, 0x1e00cc))
        goto loc_1970a2;
    if (memoryAGet32(ds, 0x39ead0) != 0x00000000)
        goto loc_1970ef;
loc_1970a2: // 0160:1970a2
    edx = 0;
    sub_1bfd80();
    sub_197010();
    sub_1bfd2f();
    eax = memoryAGet32(ds, ebx * 8 + 0x1e00d0);
    sub_1bfbd3();
    edx = memoryAGet32(ds, 0x1e3664);
    edx = (int32_t)edx * (int32_t)ecx;
    memoryASet32(ds, 0x1e00cc, ebx);
    eax = memoryAGet32(ds, ebx * 8 + 0x1e00d4);
    ebx = 0x0000000a;
    memoryASet32(ds, 0x39ead0, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    eax = 0;
    sub_197010();
loc_1970ef: // 0160:1970ef
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1970f2() // 0160:1970f2 +long
{
    esp -= 4;
    push32(edx);
    if (memoryAGet32(ds, 0x39eabc) == 0x00000000)
        goto loc_19713a;
    edx = 0x000a0000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000a4000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000a8000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000ac000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = pop32();
    esp += 4;
    return;
loc_19713a: // 0160:19713a
    edx = 0x000a0000;
    eax = 0x00289cb0;
    sub_19e006();
    edx = pop32();
    esp += 4;
}
void sub_19714b() // 0160:19714b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000100;
    ebx = eax;
    ecx = edx;
    edx = 0x00000100;
    eax = 0;
    memoryASet32(ds, 0x1e3704, edx);
    sub_1a593a();
    eax = 0;
loc_19716e: // 0160:19716e
    eax += 0x00000004;
    esi = 0;
    memoryASet32(ds, eax + 2661548, esi);
    if ((int32_t)eax < (int32_t)0x0000fa00)
        goto loc_19716e;
    sub_1970f2();
    sub_19c7d3();
    sub_19c687();
    sub_1bdb87();
    edx = 0;
    sub_1bfd80();
    sub_197010();
    sub_1bfcd4();
    push32(ebx);
    push32(0x001d5004);
    eax = esp + 8;
    push32(eax);
    sub_1cb901();
    edi = memoryAGet32(ds, 0x39eabc);
    esp += 0x0000000c;
    if (!edi)
        goto loc_1971f1;
    push32(esi);
    eax = esp + 4;
    push32(eax);
    push32(0x001d500f);
    push32(0x001d5016);
    push32(0x001d501d);
    push32(0x001d5026);
    push32(0x001d502f);
    push32(0x001d502f);
    push32(esi);
    sub_1cb931();
    esp += 0x00000024;
    goto loc_197219;
loc_1971f1: // 0160:1971f1
    push32(esi);
    eax = esp + 4;
    push32(eax);
    push32(0x001d5016);
    push32(0x001d501d);
    push32(0x001d5026);
    push32(0x001d502f);
    push32(0x001d502f);
    push32(esi);
    sub_1cb931();
    esp += 0x00000020;
loc_197219: // 0160:197219
    eax = 0;
    sub_1a566f();
    sub_19c608();
    sub_19c76f();
    edx = memoryAGet32(ds, 0x1e366c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    ebp = 0x00000001;
    sub_1bda89();
    eax = 0x00000028;
    memoryASet32(ds, 0x1e000c, ebp);
    memoryASet32(ds, 0x1e0004, ebp);
    memoryASet32(ds, 0x3a1d88, ebp);
    memoryASet32(ds, 0x1dfff4, eax);
    sub_19cc49();
    sub_19ca7d();
    sub_1994e6();
    sub_199593();
    sub_19b794();
    if (memoryAGet32(ds, 0x1e006c) == 0x00000000)
        goto loc_1972a0;
    eax = 0;
loc_19728e: // 0160:19728e
    eax += 0x00000004;
    edi = 0;
    memoryASet32(ds, eax + 2661548, edi);
    if ((int32_t)eax < (int32_t)0x0000c580)
        goto loc_19728e;
loc_1972a0: // 0160:1972a0
    sub_1970f2();
    eax = memoryAGet32(ds, 0x3aa13c);
    ebp = 0x00000100;
    memoryASet32(ds, 0x3a1f04, eax);
    memoryASet32(ds, 0x1e3704, ebp);
    if (!ecx)
        goto loc_1972c8;
    eax = 0x000000ff;
    sub_1a593a();
loc_1972c8: // 0160:1972c8
    eax = 0x000000b0;
    edx = 0;
    memoryASet32(ds, 0x1e3704, eax);
    memoryASet32(ds, 0x1e000c, edx);
    memoryASet32(ds, 0x1e0004, edx);
    memoryASet32(ds, 0x3a1d88, edx);
    esp += 0x00000100;
    goto loc_199549;
    // gap 8792 bytes
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1972f1() // 0160:1972f1 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39eabc) == 0x00000000)
        goto loc_19730b;
    memoryASet32(ds, 0x1e0000, 0x00000001);
    sub_19cb2e();
loc_19730b: // 0160:19730b
    ecx = 0x00000001;
    eax = 0x001d5036;
    edx = ecx;
    memoryASet32(ds, 0x1e006c, ecx);
    //sub_19714b();
    edx = 0x00000008;
    eax = 0;
    sub_1ab709();
    memoryASet32(ds, 0x1e0194, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_197336() // 0160:197336 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e0198) == 0x00000000)
        goto loc_19738e;
    if (memoryAGet32(ds, 0x1e3674) == 0x00000000)
        goto loc_19738e;
    edx = memoryAGet32(ds, 0x1e0194);
    edx++;
    ebx = 0x00000009;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1e0194, edx);
    if (edx)
        goto loc_19737b;
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19737b;
    edi = edx + 1;
    memoryASet32(ds, 0x1e0194, edi);
loc_19737b: // 0160:19737b
    eax = memoryAGet32(ds, 0x1e0194);
    edx = 0;
    eax = memoryAGet32(ds, eax * 4 + 0x1e0170);
    sub_19714b();
loc_19738e: // 0160:19738e
    ebp = 0;
    memoryASet32(ds, 0x1e0198, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19739b() // 0160:19739b +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x0039ead4;
    esi = 0x003a04fe;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1973b5() // 0160:1973b5 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x003a04fe;
    esi = 0x0039ead4;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    sub_1ad1b8();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1973d4() // 0160:1973d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000200;
    edi = 0x00001356;
    edx = 0;
    ebx = 0;
    ecx = 0;
    eax = 0;
    memoryASet32(ds, 0x3a1c46, edx);
    memoryASet32(ds, 0x3a1c4a, edx);
    memoryASet32(ds, 0x1e00a0, edx);
    memoryASet32(ds, 0x3a1c4e, edx);
    memoryASet32(ds, 0x39eabc, ebx);
    memoryASet32(ds, 0x39eacc, ebx);
    memoryASet32(ds, 0x3a1f14, ebx);
    memoryASet32(ds, 0x3a1f1c, ebx);
    memoryASet32(ds, 0x3a1f18, ebx);
    memoryASet32(ds, 0x3a1f20, ebx);
    memoryASet32(ds, 0x39eac8, esi);
    memoryASet32(ds, 0x39eac4, esi);
    memoryASet32(ds, 0x39eac0, ebx);
    memoryASet32(ds, 0x39ea8c, ebx);
    memoryASet32(ds, 0x39eab0, esi);
    memoryASet32(ds, 0x39eab4, esi);
    memoryASet32(ds, 0x39ea94, ebx);
    memoryASet32(ds, 0x39eaac, ebx);
    memoryASet32(ds, 0x39ea88, ebx);
    memoryASet32(ds, 0x39eaa8, ebx);
    memoryASet32(ds, 0x39ea98, ebx);
    memoryASet32(ds, 0x3a1c54, ebx);
    memoryASet32(ds, 0x3a1c58, ebx);
    memoryASet32(ds, 0x3a1f04, ebx);
    memoryASet32(ds, 0x3a1c5c, ebx);
    memoryASet32(ds, 0x3a1c60, edi);
    memoryASet32(ds, 0x3a1c64, ebx);
    memoryASet32(ds, 0x3a1c68, ebx);
    memoryASet32(ds, 0x3a1c70, ebx);
    memoryASet32(ds, 0x3a1c74, ebx);
    memoryASet32(ds, 0x3a1c7c, ebx);
    memoryASet32(ds, 0x3a1c80, ebx);
    memoryASet32(ds, 0x3a1c84, ebx);
    memoryASet32(ds, 0x3a1c90, ecx);
    memoryASet32(ds, 0x3a1c94, ecx);
    memoryASet32(ds, 0x3a1c98, ecx);
    memoryASet32(ds, 0x3a1c9c, ecx);
    memoryASet32(ds, 0x3a1ca0, ecx);
    memoryASet32(ds, 0x3a1cac, ecx);
    memoryASet32(ds, 0x3a1cb4, ecx);
    memoryASet32(ds, 0x3a1cc0, ecx);
    memoryASet32(ds, 0x3a1cdc, ecx);
    memoryASet32(ds, 0x3a1ce0, eax);
    memoryASet32(ds, 0x3a1ce4, eax);
    edx = 0x0000ffff;
    esi = 0x00000010;
    ebx = 0x000001f4;
    edi = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1ce8);
    memoryASet16(ds, 0x3a1c52, dx);
    memoryASet32(ds, 0x3a1c78, esi);
    memoryASet32(ds, 0x3a1c8c, ebx);
    memoryASet32(ds, 0x3a1ca4, esi);
    memoryASet32(ds, 0x3a1ca8, esi);
    edx = 0x00000096;
    memoryASet32(ds, 0x3a1cc8, edi);
    memoryASet32(ds, 0x3a1c6c, edx);
    memoryASet32(ds, 0x3a1c88, edx);
    edx = esi;
    esi = 0x000000e6;
    memoryASet32(ds, 0x3a1cb8, edx);
    memoryASet32(ds, 0x3a1cbc, edx);
    memoryASet32(ds, 0x3a1cb0, esi);
    edx = 0;
    esi = 0x00000513;
    memoryASet32(ds, 0x3a1f24, edx);
    memoryASet32(ds, 0x3a1efc, edx);
    memoryASet32(ds, 0x3a1ccc, edx);
    memoryASet32(ds, 0x3a1cd0, edx);
    memoryASet32(ds, 0x3a1cd4, edx);
    memoryASet32(ds, 0x3a1cd8, edx);
    memoryASet32(ds, 0x3a1cc4, esi);
    memoryASet(ds, eax, 0x00);
    esi = 0x00010000;
    memoryASet32(ds, 0x3a1cec, edx);
    memoryASet32(ds, 0x3a1cf0, edx);
    memoryASet32(ds, 0x3a1cf4, edx);
    memoryASet32(ds, 0x3a1cf8, edx);
    memoryASet32(ds, 0x3a1cfc, ecx);
    memoryASet32(ds, 0x3a1f08, esi);
    memoryASet32(ds, 0x3a1f0c, edx);
    memoryASet32(ds, 0x3a1f10, edx);
    memoryASet32(ds, 0x3a1d00, edx);
    memoryASet32(ds, 0x3a1d04, edx);
    memoryASet32(ds, 0x3a1d08, edx);
    eax = 0x00000004;
    memoryASet32(ds, 0x3a1d0c, ecx);
    memoryASet32(ds, 0x3a1d14, edx);
    memoryASet32(ds, 0x3a1d18, edx);
    memoryASet32(ds, 0x3a1d1c, edx);
    memoryASet32(ds, 0x3a1d20, edx);
    memoryASet32(ds, 0x3a1d24, edx);
    memoryASet32(ds, 0x3a1d30, edx);
    memoryASet32(ds, 0x3a1d34, edx);
    memoryASet32(ds, 0x3a1dec, edi);
    esi = 0;
    ecx = 0x00000096;
    edx = 0x00000040;
    memoryASet32(ds, 0x3a1d10, esi);
    memoryASet32(ds, 0x3a1d2c, esi);
    memoryASet32(ds, 0x3a1d38, eax);
    memoryASet32(ds, 0x3a1d40, esi);
    memoryASet32(ds, 0x3a1d48, esi);
    memoryASet32(ds, 0x3a1d4c, esi);
    memoryASet32(ds, 0x3a1d50, esi);
    memoryASet32(ds, 0x3a1d28, ecx);
    memoryASet32(ds, 0x3a1d3c, edx);
    eax = 0;
    ecx = 0x0000003d;
    memoryASet32(ds, 0x3a1d54, eax);
    memoryASet32(ds, 0x3a1d58, eax);
    memoryASet32(ds, 0x3a1d5c, eax);
    memoryASet32(ds, 0x3a1d60, eax);
    memoryASet32(ds, 0x3a1d64, eax);
    memoryASet32(ds, 0x3a1d68, eax);
    memoryASet32(ds, 0x3a1d6c, eax);
    memoryASet32(ds, 0x3a1d70, eax);
    memoryASet32(ds, 0x3a1d74, eax);
    memoryASet32(ds, 0x3a1d78, eax);
    memoryASet32(ds, 0x3a1f00, eax);
    memoryASet32(ds, 0x3a1d7c, eax);
    memoryASet32(ds, 0x3a1d80, eax);
    memoryASet32(ds, 0x3a1d84, eax);
    memoryASet32(ds, 0x3a1d88, eax);
    memoryASet32(ds, 0x3a1d8c, eax);
    memoryASet32(ds, 0x3a1d90, eax);
    memoryASet32(ds, 0x3a1d94, eax);
    memoryASet32(ds, 0x3a1d98, eax);
    memoryASet32(ds, 0x3a1d9c, eax);
    memoryASet32(ds, 0x3a1da0, eax);
    memoryASet32(ds, 0x3a1da4, eax);
    memoryASet32(ds, 0x3a1da8, eax);
    memoryASet32(ds, 0x3a1dac, eax);
    memoryASet32(ds, 0x3a1db0, eax);
    memoryASet32(ds, 0x3a1db4, eax);
    memoryASet32(ds, 0x3a1ef8, eax);
    memoryASet32(ds, 0x3a1db8, eax);
    memoryASet32(ds, 0x3a1dbc, eax);
    memoryASet32(ds, 0x3a1dc0, eax);
    memoryASet32(ds, 0x3a1dc4, eax);
    memoryASet32(ds, 0x3a1dc8, eax);
    memoryASet32(ds, 0x3a1ddc, eax);
    memoryASet32(ds, 0x3a1de0, eax);
    memoryASet32(ds, 0x3a1de4, eax);
    memoryASet32(ds, 0x3a1de8, eax);
    memoryASet32(ds, 0x3a1df0, eax);
    memoryASet32(ds, 0x3a1df4, eax);
    memoryASet32(ds, 0x3a1df8, eax);
    memoryASet32(ds, 0x3a1dfc, eax);
    memoryASet32(ds, 0x3a1e00, eax);
    memoryASet32(ds, 0x3a1e04, eax);
    memoryASet32(ds, 0x3a1e08, eax);
    memoryASet32(ds, 0x3a1e0c, eax);
    memoryASet32(ds, 0x3a1e10, eax);
    memoryASet32(ds, 0x3a1e14, eax);
    memoryASet32(ds, 0x3a1e18, eax);
    memoryASet32(ds, 0x3a1e1c, eax);
    memoryASet32(ds, 0x3a1e20, eax);
    memoryASet32(ds, 0x3a1e24, eax);
    memoryASet32(ds, 0x3a1e28, eax);
    memoryASet32(ds, 0x3a1e2c, eax);
    memoryASet32(ds, 0x3a1e30, eax);
    memoryASet32(ds, 0x3a1e34, eax);
    memoryASet32(ds, 0x3a1e38, eax);
    memoryASet32(ds, 0x3a1e3c, eax);
    memoryASet32(ds, 0x3a1e40, eax);
    memoryASet32(ds, 0x3a1d44, ecx);
    ebp = 0x00000010;
    edi = 0x00000003;
    memoryASet32(ds, 0x3a1e44, eax);
    memoryASet32(ds, 0x3a1e48, eax);
    memoryASet32(ds, 0x3a1e4c, eax);
    memoryASet32(ds, 0x3a1e50, eax);
    memoryASet32(ds, 0x3a1e54, eax);
    memoryASet32(ds, 0x3a1e58, eax);
    memoryASet32(ds, 0x3a1e5c, eax);
    memoryASet32(ds, 0x3a1e60, eax);
    memoryASet32(ds, 0x3a1e64, eax);
    memoryASet32(ds, 0x3a1e68, eax);
    memoryASet32(ds, 0x3a1e6c, eax);
    memoryASet32(ds, 0x3a1e70, eax);
    memoryASet32(ds, 0x3a1e74, eax);
    memoryASet32(ds, 0x3a1e78, eax);
    memoryASet32(ds, 0x3a1e7c, eax);
    memoryASet32(ds, 0x3a1e80, eax);
    memoryASet32(ds, 0x3a1e84, eax);
    memoryASet32(ds, 0x3a1e88, eax);
    memoryASet32(ds, 0x3a1e8c, eax);
    memoryASet32(ds, 0x3a1e94, esi);
    memoryASet32(ds, 0x3a1e9c, esi);
    memoryASet32(ds, 0x3a1ea0, esi);
    memoryASet32(ds, 0x3a1ea4, esi);
    memoryASet32(ds, 0x3a1ea8, esi);
    memoryASet32(ds, 0x3a1eac, esi);
    memoryASet32(ds, 0x3a1eb0, esi);
    memoryASet32(ds, 0x3a1eb8, esi);
    memoryASet32(ds, 0x3a1ebc, esi);
    memoryASet32(ds, 0x3a1ec0, esi);
    memoryASet32(ds, 0x3a1ec8, esi);
    memoryASet32(ds, 0x3a1edc, esi);
    memoryASet32(ds, 0x3a1ee4, esi);
    memoryASet32(ds, 0x3a1ee8, esi);
    memoryASet32(ds, 0x3a1ef0, esi);
    memoryASet32(ds, 0x3a1ef4, esi);
    ebx = 0;
    eax = 0xffffffff;
    memoryASet32(ds, 0x3a1e98, ebx);
    memoryASet32(ds, 0x3a1eb4, ebx);
    memoryASet32(ds, 0x3a1ec4, ebp);
    memoryASet32(ds, 0x3a1ee0, ebx);
    memoryASet32(ds, 0x3a1dcc, edi);
    memoryASet32(ds, 0x3a1dd0, edi);
    memoryASet32(ds, 0x3a1dd4, edi);
    memoryASet32(ds, 0x3a1dd8, edi);
    memoryASet32(ds, 0x3a1eec, ebx);
    memoryASet32(ds, 0x3a1e90, eax);
    goto loc_1979e4;
    // gap 345 bytes
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1978b4() // 0160:1978b4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = memoryAGet32(ds, 0x39eaa8);
    ebx = 0;
loc_1978c5: // 0160:1978c5
    ah = 0;
    edx = 0;
    ecx = 0;
    memoryASet(ds, ebx + 3794544, ah);
    eax = 0;
    dl = memoryAGet(ds, ebx + 3794546);
    al = memoryAGet(ds, ebx + 3794545);
    edx = edx + edx*4;
    eax += eax;
    cl = memoryAGet(ds, ebx + 3794547);
    edx += eax;
    edx += ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000);
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
    if (ebp > 0x00000009)
        goto loc_1979d2;
    edx = eax * 0x000000e0;
    edi = eax * 0x000000f0;
    esi = eax * 0x000000c0;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx <<= 8;
    memoryASet32(ds, esp + 4, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esp, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    switch (ebp)
    {
        case 0: goto loc_197966;
        case 1: goto loc_19797b;
        case 2: goto loc_1979a7;
        case 3: goto loc_197996;
        case 4: goto loc_197996;
        case 5: goto loc_197996;
        case 6: goto loc_1979a7;
        case 7: goto loc_197966;
        case 8: goto loc_19797b;
        case 9: goto loc_1979b9;
        default:
            printf("unhandled: %x\n", ebp);
            stop("ind 0160:19795e");
    }
loc_197966: // 0160:197966
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 3794546, cl);
    memoryASet(ds, ebx + 3794545, al);
loc_197975: // 0160:197975
    al = memoryAGet(ds, esp + 4);
    goto loc_1979cc;
loc_19797b: // 0160:19797b
    al = memoryAGet(ds, esp + 4);
    memoryASet(ds, ebx + 3794547, cl);
    memoryASet(ds, ebx + 3794545, al);
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 3794546, al);
    goto loc_1979d2;
loc_197996: // 0160:197996
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 3794545, cl);
    memoryASet(ds, ebx + 3794546, al);
    goto loc_197975;
loc_1979a7: // 0160:1979a7
    ah = memoryAGet(ds, esp + 4);
    memoryASet(ds, ebx + 3794545, cl);
    memoryASet(ds, ebx + 3794546, ah);
    goto loc_1979cc;
loc_1979b9: // 0160:1979b9
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 3794546, cl);
    memoryASet(ds, ebx + 3794545, al);
    al = memoryAGet(ds, esp + 4);
loc_1979cc: // 0160:1979cc
    memoryASet(ds, ebx + 3794547, al);
loc_1979d2: // 0160:1979d2
    ebx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x000002c0)
        goto loc_1978c5;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197a14() // 0160:197a14 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    sub_1bfd80();
    edx = 0;
    ebx = eax;
    sub_197010();
    sub_1bfcd4();
    edx = memoryAGet32(ds, 0x39ea98);
    if (edx == 0x00000003)
        goto loc_197a3f;
    if (edx == 0x00000002)
        goto loc_197a3f;
    if (edx != 0x00000009)
        goto loc_197a6c;
loc_197a3f: // 0160:197a3f
    edx = 0x00272970;
    eax = 0x001d503c;
    sub_19c8e6();
    edx = 0x00375e70;
    eax = 0x001d5047;
    sub_19c8e6();
    edx = 0x0038a270;
    eax = 0x001d5058;
    sub_19c8e6();
loc_197a6c: // 0160:197a6c
    eax = memoryAGet32(ds, 0x39eaa8);
    memoryASet32(ds, 0x39ea98, eax);
    if (eax > 0x00000009)
        goto loc_197c22;
    switch (eax)
    {
        case 0: goto loc_197a87;
        case 1: goto loc_197aa5;
        case 2: goto loc_197ac3;
        case 3: goto loc_197b0e;
        case 4: goto loc_197b59;
        case 5: goto loc_197b77;
        case 6: goto loc_197b95;
        case 7: goto loc_197bb0;
        case 8: goto loc_197bcb;
        case 9: goto loc_197be6;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:197a7f");
    }
loc_197a87: // 0160:197a87
    edx = 0x0039e670;
    eax = 0x001d5069;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d507e;
    goto loc_197c1d;
loc_197aa5: // 0160:197aa5
    edx = 0x0039e670;
    eax = 0x001d5091;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d50a3;
    goto loc_197c1d;
loc_197ac3: // 0160:197ac3
    edx = 0x0039e670;
    eax = 0x001d50b3;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d50c5;
    sub_19c8e6();
    edx = 0x00375e70;
    eax = 0x001d50d5;
    sub_19c8e6();
    edx = 0x0038a270;
    eax = 0x001d50e7;
    sub_19c8e6();
    edx = 0x00272970;
    eax = 0x001d50f9;
    goto loc_197c1d;
loc_197b0e: // 0160:197b0e
    edx = 0x0039e670;
    eax = 0x001d5108;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d511a;
    sub_19c8e6();
    edx = 0x00272970;
    eax = 0x001d512a;
    sub_19c8e6();
    edx = 0x00375e70;
    eax = 0x001d5139;
    sub_19c8e6();
    edx = 0x0038a270;
    eax = 0x001d5149;
    goto loc_197c1d;
loc_197b59: // 0160:197b59
    edx = 0x0039e670;
    eax = 0x001d5159;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d516d;
    goto loc_197c1d;
loc_197b77: // 0160:197b77
    edx = 0x0039e670;
    eax = 0x001d517f;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d5192;
    goto loc_197c1d;
loc_197b95: // 0160:197b95
    edx = 0x0039e670;
    eax = 0x001d51a3;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d51b6;
    goto loc_197c1d;
loc_197bb0: // 0160:197bb0
    edx = 0x0039e670;
    eax = 0x001d51c7;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d51d8;
    goto loc_197c1d;
loc_197bcb: // 0160:197bcb
    edx = 0x0039e670;
    eax = 0x001d51e7;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d51f9;
    goto loc_197c1d;
loc_197be6: // 0160:197be6
    edx = 0x0039e670;
    eax = 0x001d5209;
    sub_19c8e6();
    edx = 0x00205a90;
    eax = 0x001d521d;
    sub_19c8e6();
    edx = 0x00375e70;
    eax = 0x001d50d5;
    sub_19c8e6();
    edx = 0x0038a270;
    eax = 0x001d50e7;
loc_197c1d: // 0160:197c1d
    sub_19c8e6();
loc_197c22: // 0160:197c22
    ah = 0;
    edi = memoryAGet32(ds, 0x1e000c);
    memoryASet(ds, 0x39e670, ah);
    memoryASet(ds, 0x39e671, ah);
    memoryASet(ds, 0x39e672, ah);
    memoryASet(ds, 0x39e673, ah);
    if (!edi)
        goto loc_197c61;
    eax = 0;
loc_197c48: // 0160:197c48
    eax++;
    dl = memoryAGet(ds, eax + 3794543);
    memoryASet(ds, eax + 1984207, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_197c48;
    sub_1978b4();
loc_197c61: // 0160:197c61
    if (memoryAGet32(ds, 0x1e006c) != 0x00000000)
        goto loc_197c73;
    sub_1bfd00();
    edx = ebx;
    goto loc_197ca1;
loc_197c73: // 0160:197c73
    eax = 0;
    edx = 0;
    memoryASet32(ds, 0x1e006c, eax);
    eax = 0x0000000a;
    sub_19708b();
    edx = memoryAGet32(ds, 0x1e3664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
loc_197ca1: // 0160:197ca1
    eax = 0;
    sub_197010();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197ccc() // 0160:197ccc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0x0039e670;
    eax = 0x001d522f;
    sub_19c8e6();
    edx = 0x00375e70;
    eax = 0x001d5241;
    sub_19c8e6();
    edx = 0x0038a270;
    eax = 0x001d5252;
    sub_19c8e6();
    edx = 0x00272970;
    eax = 0x001d503c;
    sub_19c8e6();
    edx = 0x002dc270;
    eax = 0x001d5263;
    sub_19c8e6();
    edx = 0x00227890;
    eax = 0x001d5273;
    sub_19c8e6();
    edx = 0x0026b370;
    eax = 0x001d5283;
    sub_19c8e6();
    edx = 0x00271a70;
    eax = 0x001d5293;
    sub_19c8e6();
    edx = 0x0026db70;
    eax = 0x001d52a6;
    sub_19c8e6();
    edx = 0x0029c8b0;
    eax = 0x001d52b7;
    sub_19c8e6();
    edx = 0x002d97b0;
    eax = 0x001d52c7;
    ebx = 0x00000008;
    sub_19c8e6();
    edx = 0x0022f090;
    eax = 0x001d52d7;
    esi = 0x00000001;
    sub_19c8e6();
    edx = 0x003aaeb4;
    eax = 0x001d52e7;
    ecx = 0;
    sub_19c8e6();
    edx = 0x00000007;
    memoryASet32(ds, 0x1e36d4, ebx);
    memoryASet32(ds, 0x1e36d8, ecx);
    memoryASet32(ds, 0x1e36dc, esi);
    memoryASet32(ds, 0x1e36e0, ecx);
    memoryASet32(ds, 0x1e36d0, ecx);
    memoryASet32(ds, 0x1e366c, edx);
    bl = 0;
    sub_1a7cd0();
    memoryASet(ds, 0x39e673, bl);
    dl = 0;
    ah = 0;
    memoryASet(ds, 0x39e671, dl);
    dh = 0;
    memoryASet(ds, 0x39e670, ah);
    memoryASet(ds, 0x39e672, dh);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197df2() // 0160:197df2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803602, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803522, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803498);
    ebp = 0x00000001;
    eax -= 0x00004000;
    memoryASet32(ds, 0x3a1c70, ebp);
    memoryASet32(ds, 0x3a1c6c, ebx);
    memoryASet32(ds, 0x3a1c74, eax);
    ebp = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197e44() // 0160:197e44 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x3a1c6c) != 0x00000000)
        goto loc_197efd;
    if ((int32_t)memoryAGet32(ds, 0x3a1c74) <= (int32_t)0xffff6000)
        goto loc_197efd;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803602) != 0x00000000)
        goto loc_197e81;
    if (memoryAGet32(ds, 0x1e000c) == 0x00000000)
        goto loc_197ea1;
loc_197e81: // 0160:197e81
    ebp = memoryAGet32(ds, 0x3a1c70);
    ebp -= 0x00000055;
    eax = memoryAGet32(ds, 0x3a1c74);
    memoryASet32(ds, 0x3a1c70, ebp);
    if ((int32_t)eax >= 0)
        goto loc_197ea1;
    edx = 0;
    memoryASet32(ds, 0x3a1c6c, edx);
loc_197ea1: // 0160:197ea1
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1c70);
    ebx = memoryAGet32(ds, 0x3a1c74);
    ecx = memoryAGet32(ds, 0x3a1c70);
    ebx += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    ecx += eax;
    memoryASet32(ds, 0x3a1c74, ebx);
    memoryASet32(ds, 0x3a1c70, ecx);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, edx + 3803498))
        goto loc_197efd;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 3;
    ebp = eax;
    memoryASet32(ds, 0x3a1c70, eax);
    ebp = -ebp;
    memoryASet32(ds, 0x3a1c70, ebp);
    eax = memoryAGet32(ds, edx + 3803498);
    memoryASet32(ds, 0x3a1c74, eax);
loc_197efd: // 0160:197efd
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197f02() // 0160:197f02 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x3a1c6c) != 0x00000000)
        goto loc_197f60;
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803494) == 0x00000000)
        goto loc_197f60;
    eax = memoryAGet32(ds, 0x3a1c74);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -38;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000010);
    ecx = 0x00000010;
    edx = eax + -8;
    ebx = esi;
    eax = 0x00306ce0;
    sub_19e029();
loc_197f60: // 0160:197f60
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197f65() // 0160:197f65 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000007);
    ecx = 0x000000a1;
    ebx = 0x0000002c;
    push32(0x00000014);
    edx = 0x00289cb0;
    eax = 0x003080d0;
    sub_19e0ca();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_197f93() // 0160:197f93 +long
{
    esp -= 4;
    goto loc_197f93;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1448 bytes
loc_197f93: // 0160:197f93
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1c60);
    edx = eax;
    esi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if ((int32_t)eax >= 0)
        goto loc_197fb2;
    esi ^= eax;
loc_197fb2: // 0160:197fb2
    if (memoryAGet32(ds, 0x1e3658) != 0x00000046)
        goto loc_197fc8;
    if (memoryAGet32(ds, 0x1e000c) == 0x00000000)
        goto loc_1979e4;
loc_197fc8: // 0160:197fc8
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x3a1c5c, eax);
    eax = memoryAGet32(ds, 0x1e000c);
    eax &= 0x0000000f;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1979e4;
    ebx = 0x0000000a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = memoryAGet32(ds, 0x1e007c);
    edi -= 0x00000028;
    ebp = edi;
    ebp <<= 2;
    ebp += edi;
    edi = 0x00289cc0;
    ebp <<= 6;
    ecx = 0x0000000f;
    edi += ebp;
    ebx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x002dc360;
    edi = 0x0000000a;
    sub_1c8bd6();
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebp += 0x00289cc8;
    ecx = 0x0000000f;
    eax = edx;
    ebx = 0x00000008;
    eax <<= 3;
    edx = ebp;
    eax += 0x002dc360;
    sub_1c8bd6();
    goto loc_1979e4;
}
void sub_198058() // 0160:198058 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = edx;
    esi = ebx;
    edx = eax + -32;
    eax = edx;
    eax <<= 2;
    eax += edx;
    esi = ebx + eax;
    eax = esi + 5;
    ebp = 0;
    memoryASet32(ds, esp, eax);
loc_198078: // 0160:198078
    ecx = memoryAGet32(ds, esp);
    edx = edi;
    eax = esi;
loc_19807f: // 0160:19807f
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_19807f;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    esi += 0x00000128;
    edx += 0x00000128;
    ebp++;
    memoryASet32(ds, esp, edx);
    if ((int32_t)ebp < (int32_t)0x00000006)
        goto loc_198078;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1980af() // 0160:1980af +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    esi = edx;
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x002d97b0;
    eax <<= 4;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    ebp = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ebx = 0x0021a490;
    eax <<= 8;
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1940;
loc_19812f: // 0160:19812f
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_19815f;
    if (memoryAGet32(ds, esp + 8) != 0x00000000)
        goto loc_19815f;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_19815f;
    eax = 0x00000020;
    goto loc_198163;
loc_19815f: // 0160:19815f
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + 1);
loc_198163: // 0160:198163
    ebx = memoryAGet32(ds, esp + 4);
    edx = ebp;
    sub_198058();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_19812f;
    eax = memoryAGet32(ds, esp) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 3803562, edx);
    esp += 0x0000000c;
    goto loc_199549;
    // gap 5033 bytes
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1981a0() // 0160:1981a0 +long
{
    esp -= 4;
    goto loc_1981a0;
loc_1979e1: // 0160:1979e1
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1973 bytes
loc_1981a0: // 0160:1981a0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x002d97b0;
    eax <<= 4;
    edx += eax;
    ebp = 0x00000003;
    memoryASet32(ds, esp, edx);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    ebx = 0x0021a490;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = esi;
    idiv32(ebp);
    esi = esi * 0x000000ac;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1920;
loc_198223: // 0160:198223
    eax = memoryAGet32(ds, esi + 3803570);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_198257;
    if (memoryAGet32(ds, esp + 4) != 0x00000000)
        goto loc_198257;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_198257;
    eax = 0x00000020;
    goto loc_19825b;
loc_198257: // 0160:198257
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_19825b: // 0160:19825b
    ebx = memoryAGet32(ds, esp);
    edx = ebp;
    sub_198058();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_198223;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3803558, eax);
    goto loc_1979e1;
}
void sub_19828d() // 0160:19828d +long
{
    esp -= 4;
    goto loc_19828d;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2210 bytes
loc_19828d: // 0160:19828d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = 0;
    ebp = 0;
loc_19829a: // 0160:19829a
    eax = 0x0000000f;
    ecx = edi + eax;
    goto loc_1982a6;
loc_1982a4: // 0160:1982a4
    ecx--;
    eax--;
loc_1982a6: // 0160:1982a6
    esi = memoryAGet(ds, ecx + 1966492);
    if (esi == 0x00000020)
        goto loc_1982a4;
    ebp += 0x000000ac;
    eax++;
    edi += 0x00000010;
    memoryASet32(ss, ebp + 3803382, eax);
    if (edi != 0x00000100)
        goto loc_19829a;
    dl = 0x80;
    eax = 0;
loc_1982ce: // 0160:1982ce
    eax++;
    memoryASet(ds, eax + 2204815, dl);
    if ((int32_t)eax < (int32_t)0x00001c20)
        goto loc_1982ce;
    edx = 0x00000010;
    ebp = 0;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebp);
loc_1982ea: // 0160:1982ea
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = eax * 0x000006f0;
    edi = 0x002d97b0;
    edx = ebp;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebp;
    idiv32(ecx);
    eax = eax * 0x00000f00;
    esi = 0x00000003;
    edx = ebp;
    ecx = 0x0021a490;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebp;
    idiv32(esi);
    edx = edx * 0x00000064;
    ebx = ebp;
    ebx <<= 4;
    eax = memoryAGet32(ds, esp);
    esi = ecx + edx;
    memoryASet32(ds, esp + 8, eax);
    ecx = ebx;
loc_198343: // 0160:198343
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 1966492);
    ecx++;
    sub_198058();
    eax = memoryAGet32(ds, esp + 8);
    esi += 0x00000005;
    if (ecx != eax)
        goto loc_198343;
    eax = memoryAGet32(ds, esp + 4);
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_198374;
    eax = ebp;
    sub_1981a0();
loc_198374: // 0160:198374
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000010;
    esi += 0x000000ac;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000010)
        goto loc_1982ea;
    esp += 0x0000000c;
    goto loc_1979e4;
}
void sub_19839d() // 0160:19839d +long
{
    esp -= 4;
    goto loc_19839d;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2482 bytes
loc_19839d: // 0160:19839d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    dl = 0x80;
    eax = 0;
loc_1983aa: // 0160:1983aa
    eax++;
    memoryASet(ds, eax + 2227855, dl);
    if ((int32_t)eax < (int32_t)0x00000780)
        goto loc_1983aa;
    ebx = 0x00000010;
    ecx = 0x0021fe90;
    edx = 0;
    esi = 0x002d97b0;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
loc_1983d8: // 0160:1983d8
    ecx = memoryAGet32(ds, esp + 12);
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    ecx <<= 4;
loc_1983ea: // 0160:1983ea
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 1966749);
    ecx++;
    sub_198058();
    esi += 0x00000005;
    if (ecx != ebp)
        goto loc_1983ea;
    edi = memoryAGet32(ds, esp + 8);
    ebp = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 12);
    edi += 0x00000010;
    ebp += 0x00000050;
    eax += 0x000006f0;
    edx++;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 12, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1983d8;
    esp += 0x00000010;
    goto loc_1979e4;
}
void sub_19843a() // 0160:19843a +long
{
    esp -= 4;
    goto loc_19843a;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2639 bytes
loc_19843a: // 0160:19843a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    esi = eax + -6;
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x1e02de);
    eax = 0x0021fe90;
    push32(edx);
    ecx = esi;
    edx = 0x00289cb0;
    sub_19e0ca();
    push32(0x00000140);
    push32(0x00000140);
    edx = 0x00289cb0;
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x1e02e2);
    ecx = memoryAGet32(ds, 0x1e02e2);
    push32(ebx);
    ebx = 0x00000130;
    eax = 0x0021fee0;
    ebx -= ecx;
    ecx = esi;
    sub_19e0ca();
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    edx = 0x00289cb0;
    push32(0x00000006);
    edi = memoryAGet32(ds, 0x1e02e6);
    esi += 0x00000015;
    push32(edi);
    eax = 0x0021ff30;
    ecx = esi;
    sub_19e0ca();
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000130;
    edx = 0x00289cb0;
    push32(0x00000006);
    ebp = memoryAGet32(ds, 0x1e02ea);
    eax = 0x0021ff80;
    push32(ebp);
    ecx = esi;
    ebx -= ebp;
    sub_19e0ca();
    goto loc_1979e4;
}
void sub_1984fb() // 0160:1984fb +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = edx;
    memoryASet32(ds, esp + 4, ebx);
    ebp = ecx;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    memoryASet32(ds, esp, edx);
loc_198514: // 0160:198514
    edi += memoryAGet32(ds, esp + 28);
    if ((int32_t)esi <= 0)
        goto loc_1985fb;
    if (edi >= 0x000003c0)
        goto loc_1985fb;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebx + 2344144);
    ebx = 0;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, 0x3a1c52);
    ebx &= eax;
    eax = esi * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (!eax)
        goto loc_1985fb;
    ebx = esi * 0x000003c0;
    ecx = edx;
    ebx += edi;
loc_198590: // 0160:198590
    if ((int32_t)esi <= 0)
        goto loc_19867a;
    if (edi >= 0x000003c0)
        goto loc_19867a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, ecx + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_19867a;
    if ((int32_t)esi <= 0)
        goto loc_19867a;
    ebx -= 0x000003c0;
    esi--;
    goto loc_198590;
loc_1985fb: // 0160:1985fb
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_198611: // 0160:198611
    if ((int32_t)esi <= 0)
        goto loc_19865b;
    if (edi >= 0x000003c0)
        goto loc_19865b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_198662;
loc_19865b: // 0160:19865b
    eax = 0x00000001;
    goto loc_198664;
loc_198662: // 0160:198662
    eax = 0;
loc_198664: // 0160:198664
    if (!eax)
        goto loc_198679;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_198679;
    ebx += 0x000003c0;
    esi++;
    goto loc_198611;
loc_198679: // 0160:198679
    esi--;
loc_19867a: // 0160:19867a
    ebx = memoryAGet32(ds, esp);
    ebx++;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_198514;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, eax, edi);
    memoryASet32(ss, ebp, esi);
    ebx = esi + -4;
    if ((int32_t)ebx <= 0)
        goto loc_198702;
    if (edi >= 0x000003c0)
        goto loc_198702;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_198702;
    eax = 0xfffdffff;
    goto loc_19871a;
loc_198702: // 0160:198702
    edi = memoryAGet32(ds, esp + 8);
    edx = esi;
    edx -= edi;
    edx <<= 16;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
loc_19871a: // 0160:19871a
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_198723() // 0160:198723 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    esi = edx + 320;
loc_198731: // 0160:198731
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax)
        goto loc_19873e;
    eax = 0x00000020;
loc_19873e: // 0160:19873e
    eax <<= 3;
    edx = ebx;
    eax -= 0x00000100;
    ecx++;
    eax += 0x0029c8b0;
    ebx += 0x00000008;
    sub_1cb786();
    if (ebx != esi)
        goto loc_198731;
    ecx = memoryAGet32(ds, 0x1e3aac);
    edx = 0;
    ebx ^= esi;
    memoryASet32(ds, 0x39eab8, edx);
    memoryASet32(ds, 0x39ea9c, ebx);
    if (!ecx)
        goto loc_198780;
    memoryASet32(ds, 0x39eaa4, 0x00000019);
    goto loc_19878a;
loc_198780: // 0160:198780
    memoryASet32(ds, 0x39eaa4, 0x00000032);
loc_19878a: // 0160:19878a
    ebp = 0;
    memoryASet32(ds, 0x39ea90, ebp);
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_198797() // 0160:198797 +long
{
    esp -= 4;
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x1e12d2);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, eax * 4 + 0x1e468c, ebx);
    memoryASet32(ds, eax * 4 + 0x1e4688, esi);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    memoryASet32(ds, 0x1e12d2, ebx);
    memoryASet32(ds, eax * 4 + 0x1e4690, ecx);
    eax = memoryAGet32(ds, 0x1e12d2);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1e12d2, edx);
    memoryASet32(ds, 0x1e12d6, memoryAGet32(ds, 0x1e12d6) + 1);
    esi = pop32();
    esp += 4;
}
void sub_1987eb() // 0160:1987eb +long
{
    esp -= 4;
    goto loc_1987eb;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3584 bytes
loc_1987eb: // 0160:1987eb
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x1e12da);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebp = memoryAGet32(ds, eax * 4 + 0x1e468c);
    eax = memoryAGet32(ds, eax * 4 + 0x1e4688);
    memoryASet32(ds, esp + 12, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    eax = memoryAGet32(ds, eax * 4 + 0x1e4690);
    memoryASet32(ds, 0x1e12da, ebx);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x1e12da);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1e12da, edx);
    edx = memoryAGet32(ds, 0x1e12de);
    edx++;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, 0x1e12de, edx);
    if (ebx != 0x001d6679)
        goto loc_1988d1;
    edi = ebp;
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803554);
    eax = 0x00000028;
    edx += 0x00000008;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 4;
    edx = eax;
    eax = ebx;
    ebx += 0x00000028;
loc_19888c: // 0160:19888c
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_19888c;
    eax ^= ebx;
    ebx = memoryAGet32(ds, esp + 12);
    ebx += edx;
loc_19889c: // 0160:19889c
    cl = memoryAGet(ds, eax + 1927001);
    eax++;
    memoryASet(ds, ebx, cl);
    ebx++;
    if ((int32_t)eax < (int32_t)0x00000009)
        goto loc_19889c;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    ecx = 0;
    eax += edx;
    esi = ebp * 0x000000ac;
    goto loc_1988c9;
loc_1988bd: // 0160:1988bd
    eax++;
    dl = memoryAGet(ds, ebx + 1966492);
    ebx++;
    ecx++;
    memoryASet(ds, eax + 7, dl);
loc_1988c9: // 0160:1988c9
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 3803554))
        goto loc_1988bd;
loc_1988d1: // 0160:1988d1
    if (memoryAGet32(ds, esp + 12) != 0x001d66a2)
        goto loc_198963;
    eax = ebp;
    eax <<= 4;
    memoryASet32(ds, esp + 4, eax);
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803554);
    eax = 0x00000028;
    edx += 0x0000000e;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = eax + 40;
loc_198910: // 0160:198910
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_198910;
    ebx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp + 4);
    ecx = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
    goto loc_198937;
loc_19892c: // 0160:19892c
    dl = memoryAGet(ds, eax + 1966492);
    eax++;
    ecx++;
    memoryASet(ds, ebx, dl);
    ebx++;
loc_198937: // 0160:198937
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 3803554))
        goto loc_19892c;
    ebx = memoryAGet32(ds, esp + 12);
    eax = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
loc_19894d: // 0160:19894d
    ebx++;
    ecx = memoryAGet32(ds, esi + 3803554);
    dl = memoryAGet(ds, eax + 1927042);
    eax++;
    memoryASet(ds, ecx + ebx, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_19894d;
loc_198963: // 0160:198963
    if (memoryAGet32(ds, esp + 12) != 0x001d66cb)
        goto loc_198a4c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    edx <<= 2;
    esi = eax;
    eax = memoryAGet32(ds, edx + 1966814);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = 0x00000028;
    eax += 0x00000016;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 12);
    esi <<= 4;
    ebx = eax + 40;
loc_1989ba: // 0160:1989ba
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_1989ba;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, esp + 8);
    edi = 0;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx <<= 2;
    ecx += eax;
    goto loc_1989ef;
loc_1989e4: // 0160:1989e4
    al = memoryAGet(ds, esi + 1966749);
    esi++;
    edi++;
    memoryASet(ds, ecx, al);
    ecx++;
loc_1989ef: // 0160:1989ef
    eax = memoryAGet32(ds, ebx + 1966814);
    edx = eax;
    memoryASet32(ds, esp + 16, 0x00000005);
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1989e4;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = memoryAGet32(ds, esp + 8);
    edi = 0x00000005;
    ebx = 0;
    ecx = eax;
    edx = memoryAGet32(ds, esp + 12);
    ecx <<= 2;
    esi += edx;
loc_198a2f: // 0160:198a2f
    eax = memoryAGet32(ds, ecx + 1966814);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    dl = memoryAGet(ds, ebx + 1927083);
    ebx++;
    memoryASet(ds, esi + eax, dl);
    esi++;
    if ((int32_t)ebx < (int32_t)0x00000016)
        goto loc_198a2f;
loc_198a4c: // 0160:198a4c
    edx = 0x00218b90;
    eax = memoryAGet32(ds, esp + 12);
    sub_198723();
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x39eaa4, eax);
    esp += 0x00000014;
    goto loc_1979e4;
}
void sub_198a6a() // 0160:198a6a +long
{
    esp -= 4;
    goto loc_198a6a;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4223 bytes
loc_198a6a: // 0160:198a6a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x1e12d6);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x1e12de))
        goto loc_198aa0;
    if (memoryAGet32(ds, 0x39ea90) == 0x00000002)
        goto loc_198a8f;
    if (memoryAGet32(ds, 0x1e12e2) != 0x00000000)
        goto loc_198aa0;
loc_198a8f: // 0160:198a8f
    memoryASet32(ds, 0x1e12e2, 0x00000001);
    sub_1987eb();
    goto loc_198afb;
loc_198aa0: // 0160:198aa0
    if (memoryAGet32(ds, 0x39ea90) != 0x00000002)
        goto loc_198afb;
    edi = memoryAGet32(ds, 0x1e3d20);
    if (!edi)
        goto loc_198af5;
    eax = 0;
    memoryASet32(ds, 0x1e12e2, eax);
    eax = memoryAGet32(ds, 0x39eaa0);
    edx = eax;
    ebx = 0x00000010;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x39eaa0, edx);
    edx++;
    eax = memoryAGet32(ds, edx * 4 + 0x1e033e);
    memoryASet32(ds, 0x39eaa0, edx);
    edx = 0x00218b90;
    sub_198723();
    memoryASet32(ds, 0x39eaa4, 0x00000064);
    goto loc_198afb;
loc_198af5: // 0160:198af5
    memoryASet32(ds, 0x1e12e2, edi);
loc_198afb: // 0160:198afb
    if (memoryAGet32(ds, 0x39eaa4) != 0xffffffff)
        goto loc_198b0c;
    esi = 0;
    memoryASet32(ds, 0x1e12e2, esi);
loc_198b0c: // 0160:198b0c
    if (memoryAGet32(ds, 0x1e12e2) == 0x00000000)
        goto loc_198b28;
    if (memoryAGet32(ds, 0x39eaa4) == 0xffffffff)
        goto loc_198b28;
    memoryASet32(ds, 0x3a1efc, 0x00000032);
loc_198b28: // 0160:198b28
    edx = memoryAGet32(ds, 0x39ea90);
    if (edx != 0x00000001)
        goto loc_198b47;
    ebx = memoryAGet32(ds, 0x39eaa4);
    if ((int32_t)ebx <= 0)
        goto loc_198b47;
    ecx = ebx;
    ecx -= edx;
    memoryASet32(ds, 0x39eaa4, ecx);
loc_198b47: // 0160:198b47
    if (memoryAGet32(ds, 0x39eaa4) == 0x00000000)
        goto loc_198b89;
    if (memoryAGet32(ds, 0x39ea90) != 0x00000000)
        goto loc_198b89;
    ebp = memoryAGet32(ds, 0x39eab8);
    ebp += 0x00000100;
    memoryASet32(ds, 0x39eab8, ebp);
    if ((int32_t)ebp <= (int32_t)0x00001400)
        goto loc_198b89;
    edx = 0x00001400;
    ebx = 0x00000001;
    memoryASet32(ds, 0x39eab8, edx);
    memoryASet32(ds, 0x39ea90, ebx);
loc_198b89: // 0160:198b89
    ecx = memoryAGet32(ds, 0x39eaa4);
    if (ecx)
        goto loc_1979e4;
    if (memoryAGet32(ds, 0x39ea90) == 0x00000000)
        goto loc_1979e4;
    edi = memoryAGet32(ds, 0x39eab8);
    edi -= 0x00000100;
    memoryASet32(ds, 0x39eab8, edi);
    if ((int32_t)edi >= 0)
        goto loc_1979e4;
    eax = 0x00000002;
    memoryASet32(ds, 0x39eab8, ecx);
    memoryASet32(ds, 0x39ea90, eax);
    goto loc_1979e4;
}
void sub_198bd3() // 0160:198bd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x3a1c78);
    if (eax == memoryAGet32(ds, 0x3a1cb8))
        goto loc_198ca6;
    if (eax == 0x00000011)
        goto loc_198ca6;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_198ca6;
    eax = memoryAGet32(ds, 0x3a1ca4);
    memoryASet32(ds, 0x3a1cb8, eax);
    eax = memoryAGet32(ds, 0x3a1ca8);
    edx = memoryAGet32(ds, 0x3a1ca4);
    eax -= 0x00000010;
    edx -= 0x00000010;
    memoryASet32(ds, esp + 4, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000086;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x00000095)
        goto loc_198c4f;
    esi = 0x00000095;
loc_198c4f: // 0160:198c4f
    eax = 0;
    edi += 0x0000ea65;
    memoryASet32(ds, esp, eax);
loc_198c5a: // 0160:198c5a
    ebx = memoryAGet32(ds, esp + 4);
    eax = ebx + edi;
    edx = ebx + ebp;
    goto loc_198c71;
loc_198c66: // 0160:198c66
    cl = memoryAGet(ds, edx + 1920);
    edx++;
    ebx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_198c71: // 0160:198c71
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_198c66;
    ebx = esi;
    eax = esi + edi;
    edx = esi + ebp;
    goto loc_198c86;
loc_198c7f: // 0160:198c7f
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_198c86: // 0160:198c86
    if ((int32_t)ebx < (int32_t)0x00000095)
        goto loc_198c7f;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    edx++;
    ebp += 0x00000140;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_198c5a;
loc_198ca6: // 0160:198ca6
    esp += 0x00000008;
    goto loc_199549;
    // gap 2203 bytes
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_198cae() // 0160:198cae +long +stackDrop4
{
    esp -= 4;
    goto loc_198cae;
loc_19871d: // 0160:19871d
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 1419 bytes
loc_198cae: // 0160:198cae
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    edi = edx;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    goto loc_198ced;
loc_198cc5: // 0160:198cc5
    eax = edi;
    edx = ebp;
    ebx = 0;
    goto loc_198cd4;
loc_198ccd: // 0160:198ccd
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_198cd4: // 0160:198cd4
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_198ccd;
    ecx = memoryAGet32(ds, esp + 24);
    eax = memoryAGet32(ds, esp + 4);
    ebp += 0x00000120;
    eax++;
    edi += ecx;
    memoryASet32(ds, esp + 4, eax);
loc_198ced: // 0160:198ced
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_198cc5;
    esp += 0x00000008;
    goto loc_19871d;
}
void sub_198d18() // 0160:198d18 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    ebp = memoryAGet32(ds, esp + 40);
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 16, ecx);
    ecx = memoryAGet32(ds, esp + 48);
    eax = memoryAGet32(ds, esp + 44);
    edx = 0x00000064;
    eax += eax;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 20));
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    memoryASet32(ds, esp + 44, edx);
    eax = memoryAGet32(ds, esi);
    edx = memoryAGet32(ds, edi);
    if (eax == edx)
        goto loc_198e34;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_198d77;
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx += eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_198d8b;
    goto loc_198d89;
loc_198d77: // 0160:198d77
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx -= eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_198d8b;
loc_198d89: // 0160:198d89
    memoryASet32(ds, esi, edx);
loc_198d8b: // 0160:198d8b
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    eax = memoryAGet32(ds, esi);
    esi = eax;
    esi <<= 5;
    esi += eax;
    esi <<= 2;
    esi += eax;
    ecx <<= 2;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi = 0x00000085;
    esi -= eax;
    if (ebx > 0x00000005)
        goto loc_198e34;
    eax = 0x0026db70;
    eax += esi;
    edi = 0x00000085;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = 0x0026dc0b;
    eax += esi;
    ecx = ebp;
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx <<= 3;
    eax += 0x0000009b;
    edi -= esi;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= ebp;
    eax += 0x00000120;
    edx += edi;
    eax -= esi;
    switch (ebx)
    {
        case 0: goto loc_198e09;
        case 1: goto loc_198e3d;
        case 2: goto loc_198e6b;
        case 3: goto loc_198e98;
        case 4: goto loc_198ed1;
        case 5: goto loc_198f02;
        default:
            printf("unhandled: %x\n", ebx);
            stop("ind 0160:198e01");
    }
loc_198e09: // 0160:198e09
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 16);
    push32(ebp);
    eax = 0x0026eb30;
    ebx = esi;
    sub_198cae();
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 4);
    push32(ebp);
    eax = memoryAGet32(ds, esp + 16);
loc_198e2d: // 0160:198e2d
    ebx = edi;
loc_198e2f: // 0160:198e2f
    sub_198cae();
loc_198e34: // 0160:198e34
    esp += 0x00000018;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
    return;
loc_198e3d: // 0160:198e3d
    ecx = 0x0000000e;
    push32(ebp);
    edx += 0x00000fc0;
    ebx = esi;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    eax = memoryAGet32(ds, esp + 4);
    sub_198cae();
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 8);
    push32(ebp);
    eax = 0x0026dc0b;
    goto loc_198e2d;
loc_198e6b: // 0160:198e6b
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 16);
    push32(ebp);
    eax = 0x00270ab0;
    ebx = esi;
    sub_198cae();
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 4);
    push32(ebp);
    ebx = edi;
    eax += 0x00001f80;
    goto loc_198e2f;
loc_198e98: // 0160:198e98
    eax = memoryAGet32(ds, esp + 16);
    push32(ebp);
    ebx = esi;
    eax += ecx;
    ecx = 0x00000007;
    memoryASet32(ds, esp + 4, eax);
    edx = eax;
    eax = 0x00271290;
    sub_198cae();
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000007;
    push32(ebp);
    ebx = edi;
    eax += 0x00002760;
    edx += esi;
    goto loc_198e2f;
loc_198ed1: // 0160:198ed1
    ecx = 0x00000007;
    push32(ebp);
    edx += 0x00002f40;
    ebx = esi;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    eax = memoryAGet32(ds, esp + 4);
    sub_198cae();
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 8);
    push32(ebp);
    eax = 0x0026fb8b;
    goto loc_198e2d;
loc_198f02: // 0160:198f02
    eax = memoryAGet32(ds, esp + 8);
    push32(ebp);
    edx += 0x00003720;
    eax += ecx;
    ebx = esi;
    memoryASet32(ds, esp + 4, eax);
    eax += 0x00000085;
    memoryASet32(ds, esp + 24, edx);
    eax -= esi;
    ecx = 0x00000007;
    edx = eax;
    eax = memoryAGet32(ds, esp + 24);
    sub_198cae();
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp);
    push32(ebp);
    eax = 0x0027036b;
    goto loc_198e2d;
}
void sub_198f43() // 0160:198f43 +long
{
    esp -= 4;
    goto loc_198f43;
loc_1979e5: // 0160:1979e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5464 bytes
loc_198f43: // 0160:198f43
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = 0x000002b0;
    ebx = 0x00000810;
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x1e0034, edx);
    memoryASet32(ds, 0x1e0040, edx);
    memoryASet32(ds, 0x1e004c, edx);
    memoryASet32(ds, 0x1e0058, edx);
    edx = 0x00000560;
loc_198f73: // 0160:198f73
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_198f90;
    edi = memoryAGet32(ds, 0x1e0034);
    esi = memoryAGet32(ds, eax + 3803570);
    edi += esi;
    memoryASet32(ds, 0x1e0034, edi);
loc_198f90: // 0160:198f90
    if (memoryAGet32(ds, ecx + 3803494) == 0x00000000)
        goto loc_198fad;
    edi = memoryAGet32(ds, 0x1e0040);
    esi = memoryAGet32(ds, ecx + 3803570);
    edi += esi;
    memoryASet32(ds, 0x1e0040, edi);
loc_198fad: // 0160:198fad
    if (memoryAGet32(ds, edx + 3803494) == 0x00000000)
        goto loc_198fca;
    edi = memoryAGet32(ds, 0x1e004c);
    esi = memoryAGet32(ds, edx + 3803570);
    edi += esi;
    memoryASet32(ds, 0x1e004c, edi);
loc_198fca: // 0160:198fca
    if (memoryAGet32(ds, ebx + 3803494) == 0x00000000)
        goto loc_198fe7;
    edi = memoryAGet32(ds, 0x1e0058);
    esi = memoryAGet32(ds, ebx + 3803570);
    edi += esi;
    memoryASet32(ds, 0x1e0058, edi);
loc_198fe7: // 0160:198fe7
    eax += 0x000000ac;
    ecx += 0x000000ac;
    edx += 0x000000ac;
    ebx += 0x000000ac;
    if (eax != 0x000002b0)
        goto loc_198f73;
    edi = memoryAGet32(ds, 0x1e0034);
    if (!edi)
        goto loc_199022;
    if ((int32_t)edi >= (int32_t)0x0000000a)
        goto loc_199022;
    memoryASet32(ds, 0x1e0034, 0x0000000a);
loc_199022: // 0160:199022
    edx = memoryAGet32(ds, 0x1e0040);
    if (!edx)
        goto loc_19903b;
    if ((int32_t)edx >= (int32_t)0x0000000a)
        goto loc_19903b;
    memoryASet32(ds, 0x1e0040, 0x0000000a);
loc_19903b: // 0160:19903b
    esi = memoryAGet32(ds, 0x1e004c);
    if (!esi)
        goto loc_199054;
    if ((int32_t)esi >= (int32_t)0x0000000a)
        goto loc_199054;
    memoryASet32(ds, 0x1e004c, 0x0000000a);
loc_199054: // 0160:199054
    eax = memoryAGet32(ds, 0x1e0058);
    if (!eax)
        goto loc_1979e5;
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_1979e5;
    memoryASet32(ds, 0x1e0058, 0x0000000a);
    goto loc_1979e5;
}
void sub_199079() // 0160:199079 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = edx;
    edi = memoryAGet32(ds, 0x3a1f04);
    edx = memoryAGet32(ds, 0x1e12e6);
    eax = memoryAGet32(ds, 0x3a1f04);
    edi -= edx;
    memoryASet32(ds, 0x1e12e6, eax);
    if ((int32_t)edi <= (int32_t)0x00000004)
        goto loc_1990a6;
    edi = 0x00000004;
    goto loc_1990af;
loc_1990a6: // 0160:1990a6
    if (edi)
        goto loc_1990af;
    edi = 0x00000001;
loc_1990af: // 0160:1990af
    if (memoryAGet32(ds, 0x1e0010) != 0x00000002)
        goto loc_1990f2;
    ecx = memoryAGet32(ds, 0x1e0020);
    push32(ecx);
    push32(edi);
    edx = 0x001e0034;
    eax = 0x001e0030;
    push32(ebp);
    ebx = 0;
    ecx = esi;
    sub_198d18();
    eax = memoryAGet32(ds, 0x1e0024);
    push32(eax);
    push32(edi);
    ebx = 0x00000001;
    edx = 0x001e0040;
    push32(ebp);
    ecx = esi;
    eax = 0x001e003c;
    sub_198d18();
loc_1990f2: // 0160:1990f2
    if ((int32_t)memoryAGet32(ds, 0x1e0010) < (int32_t)0x00000003)
        goto loc_199549;
    ebx = memoryAGet32(ds, 0x1e0020);
    push32(ebx);
    push32(edi);
    edx = 0x001e0034;
    eax = 0x001e0030;
    push32(ebp);
    ecx = esi;
    ebx = 0x00000002;
    sub_198d18();
    ecx = memoryAGet32(ds, 0x1e0024);
    push32(ecx);
    push32(edi);
    ebx = 0x00000004;
    edx = 0x001e0040;
    push32(ebp);
    eax = 0x001e003c;
    ecx = esi;
    sub_198d18();
    eax = memoryAGet32(ds, 0x1e0028);
    push32(eax);
    push32(edi);
    ebx = 0x00000003;
    edx = 0x001e004c;
    push32(ebp);
    ecx = esi;
    eax = 0x001e0048;
    sub_198d18();
    edx = memoryAGet32(ds, 0x1e002c);
    push32(edx);
    push32(edi);
    ebx = 0x00000005;
    eax = 0x001e0054;
    push32(ebp);
    ecx = esi;
    edx = 0x001e0058;
    sub_198d18();
    goto loc_199549;
    // gap 970 bytes
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19917f() // 0160:19917f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = edx;
    if (memoryAGet32(ds, 0x3a1c4a) == 0x00000000)
        goto loc_1991cd;
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_1991a6;
    ecx = 0;
    memoryASet32(ds, 0x3a1c98, ecx);
    goto loc_1991ba;
loc_1991a6: // 0160:1991a6
    edx = 0x00000010;
    eax = 0xfffffff0;
    sub_1b7c85();
    memoryASet32(ds, 0x3a1c98, eax);
loc_1991ba: // 0160:1991ba
    esi = 0xfffffe70;
    ebp = 0;
    memoryASet32(ds, 0x3a1cbc, esi);
    memoryASet32(ds, 0x3a1c4a, ebp);
loc_1991cd: // 0160:1991cd
    eax = memoryAGet32(ds, 0x3a1c98);
    if (eax == memoryAGet32(ds, 0x3a1cbc))
        goto loc_199305;
    if ((int32_t)eax <= 0)
        goto loc_1991f5;
    if ((int32_t)memoryAGet32(ds, 0x3a1c9c) > (int32_t)0x00000000)
        goto loc_1991f5;
    memoryASet32(ds, 0x3a1c9c, 0xffffffff);
loc_1991f5: // 0160:1991f5
    if ((int32_t)memoryAGet32(ds, 0x3a1c98) >= (int32_t)0x00000000)
        goto loc_19920f;
    if ((int32_t)memoryAGet32(ds, 0x3a1c9c) < (int32_t)0x00000000)
        goto loc_19920f;
    edx = 0;
    memoryASet32(ds, 0x3a1c9c, edx);
loc_19920f: // 0160:19920f
    eax = memoryAGet32(ds, 0x3a1c9c);
    memoryASet32(ds, 0x3a1cbc, eax);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ebp = memoryAGet32(ds, 0x3a1ca0);
    edi += 0x0000dc00;
    esi = eax;
    if ((int32_t)eax >= 0)
        goto loc_19926a;
    esi = -esi;
    if ((int32_t)esi <= (int32_t)0x0000003d)
        goto loc_199252;
    esi = 0x0000003d;
loc_199252: // 0160:199252
    eax = 0x0000003d;
    edi += 0x000000a5;
    eax -= esi;
    edx = 0;
    esi = eax;
    eax = 0x00000780;
    goto loc_199284;
loc_19926a: // 0160:19926a
    if ((int32_t)eax <= (int32_t)0x0000003a)
        goto loc_199274;
    esi = 0x0000003a;
loc_199274: // 0160:199274
    edx = 0x000007ba;
    eax = 0x0000003a;
    edi += 0x000000ff;
loc_199284: // 0160:199284
    ebx = 0;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    edx += ecx;
    eax += ecx;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, eax);
loc_199299: // 0160:199299
    eax = memoryAGet32(ds, esp + 8);
    ebx = ebp;
    edx = edi + ebp;
    eax += ebp;
    goto loc_1992ad;
loc_1992a6: // 0160:1992a6
    ebx++;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, cl);
    edx++;
loc_1992ad: // 0160:1992ad
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1992a6;
    edx = memoryAGet32(ds, esp + 12);
    ebx = esi;
    eax = esi + edi;
    edx += esi;
    goto loc_1992c5;
loc_1992be: // 0160:1992be
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_1992c5: // 0160:1992c5
    if ((int32_t)ebx < (int32_t)0x0000003a)
        goto loc_1992be;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000140;
    ebx += 0x00000140;
    ecx += 0x00000140;
    eax += 0x00000140;
    edx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_199299;
loc_199305: // 0160:199305
    esp += 0x00000010;
    goto loc_199549;
    // gap 572 bytes
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19930d() // 0160:19930d +long
{
    esp -= 4;
    goto loc_19930d;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2474 bytes
loc_198395: // 0160:198395
    esp += 0x0000000c;
    goto loc_1979e4;
    // gap 3952 bytes
loc_19930d: // 0160:19930d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
loc_199324: // 0160:199324
    edi = memoryAGet32(ds, esp + 4) * 0x00000140;
    esi = 0;
    eax = edi + 15;
    ebp = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
loc_199338: // 0160:199338
    ecx = esi;
    ecx <<= 4;
    edx = memoryAGet32(ds, esp + 8);
    eax = edi + ecx;
    edx += ecx;
    ecx += ebp;
loc_199348: // 0160:199348
    eax++;
    bl = memoryAGet(ds, edx + 2998896);
    edx--;
    memoryASet(ds, eax + 2742191, bl);
    if (eax != ecx)
        goto loc_199348;
    esi++;
    if ((int32_t)esi < (int32_t)0x00000014)
        goto loc_199338;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000140;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000300)
        goto loc_199324;
    goto loc_198395;
}
void sub_199382() // 0160:199382 +long
{
    esp -= 4;
    goto loc_199382;
loc_1979e1: // 0160:1979e1
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6551 bytes
loc_199382: // 0160:199382
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1dfff8);
    if ((int32_t)eax < 0)
        goto loc_19939f;
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_1993a1;
loc_19939f: // 0160:19939f
    eax = 0;
loc_1993a1: // 0160:1993a1
    edx = memoryAGet32(ds, 0x3aa13c);
    ebx = memoryAGet32(ds, 0x1e0004);
    memoryASet32(ds, 0x1dfff8, edx);
    if (ebx)
        goto loc_1993c0;
    if (memoryAGet32(ds, 0x1e000c) == 0x00000000)
        goto loc_1993df;
loc_1993c0: // 0160:1993c0
    edx = memoryAGet32(ds, 0x1dfff4);
    edx += eax;
    memoryASet32(ds, 0x1dfff4, edx);
    if ((int32_t)edx <= (int32_t)0x00000028)
        goto loc_1993f7;
    memoryASet32(ds, 0x1dfff4, 0x00000028);
    goto loc_1993f7;
loc_1993df: // 0160:1993df
    esi = memoryAGet32(ds, 0x1dfff4);
    esi -= eax;
    memoryASet32(ds, 0x1dfff4, esi);
    if ((int32_t)esi >= 0)
        goto loc_1993f7;
    memoryASet32(ds, 0x1dfff4, ebx);
loc_1993f7: // 0160:1993f7
    eax = memoryAGet32(ds, 0x3a1f10);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, 0x1dfff4);
    edx += eax;
    eax = 0x00000010;
    eax -= edx;
    edx = eax;
    eax += 0x00000002;
    sub_1aadbd();
    eax = edx;
    sub_19b539();
    eax = edx;
    ebp = 0x001e4ad0;
    sub_19843a();
    if ((int32_t)edx >= 0)
        goto loc_199451;
    edx = -edx;
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi = 0x00289cc0;
    eax <<= 5;
    memoryASet32(ds, esp + 4, esi);
    ebp += eax;
    goto loc_199469;
loc_199451: // 0160:199451
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x00289cb0;
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, esp + 4, eax);
loc_199469: // 0160:199469
    edi = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, edx);
    esi = ebp + 132;
    edi += 0x00000084;
    goto loc_1994db;
loc_19947e: // 0160:19947e
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    ecx = esi;
loc_199486: // 0160:199486
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    ebx = memoryAGet32(ds, eax + 154);
    eax += 0x00000004;
    memoryASet32(ds, edx + 150, ebx);
    if (eax != ecx)
        goto loc_199486;
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp);
    ebp += 0x00000120;
    ax = memoryAGet16(ds, esi);
    edx += 0x00000140;
    esi += 0x00000120;
    ebx++;
    memoryASet16(ds, edi, ax);
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, edx);
    ax = memoryAGet16(ds, esi + -134);
    memoryASet32(ds, esp, ebx);
    memoryASet16(ds, edi + -166, ax);
loc_1994db: // 0160:1994db
    if ((int32_t)memoryAGet32(ds, esp) < (int32_t)0x0000000e)
        goto loc_19947e;
    goto loc_1979e1;
}
void sub_1994e6() // 0160:1994e6 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1994e9: // 0160:1994e9
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 2536300);
    memoryASet32(ds, eax + 2715308, edx);
    if ((int32_t)eax < (int32_t)0x00002800)
        goto loc_1994e9;
    edx = pop32();
    esp += 4;
}
void sub_199501() // 0160:199501 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 149;
    memoryASet32(ds, esp, edx);
loc_199518: // 0160:199518
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_19951e: // 0160:19951e
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_19951e;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_199518;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19954f() // 0160:19954f +long
{
    esp -= 4;
    goto loc_19954f;
loc_199546: // 0160:199546
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19954f: // 0160:19954f
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 58;
    memoryASet32(ds, esp, edx);
loc_199563: // 0160:199563
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_199569: // 0160:199569
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_199569;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_199563;
    goto loc_199546;
}
void sub_199593() // 0160:199593 +long
{
    esp -= 4;
    goto loc_199593;
loc_1979e5: // 0160:1979e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7080 bytes
loc_199593: // 0160:199593
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39eabc) != 0x00000000)
        goto loc_1995c6;
    edx = 0x000aea65;
    eax = 0x00271a70;
    sub_199501();
    edx = 0x000adca5;
    eax = 0x00271a70;
    sub_19954f();
    edx = 0x000adcff;
    goto loc_1995e9;
loc_1995c6: // 0160:1995c6
    edx = 0x00298715;
    eax = 0x00271a70;
    sub_199501();
    edx = 0x00297955;
    eax = 0x00271a70;
    sub_19954f();
    edx = 0x002979af;
loc_1995e9: // 0160:1995e9
    eax = 0x00271a70;
    sub_19954f();
    ebx = 0x00000010;
    ecx = 0x00000002;
    esi = 0x00000001;
    edi = 0;
    memoryASet32(ds, 0x3a1c78, ebx);
    memoryASet32(ds, 0x3a1ca4, ebx);
    memoryASet32(ds, 0x3a1ca8, ebx);
    memoryASet32(ds, 0x3a1c4a, edi);
    memoryASet32(ds, 0x3a1c98, edi);
    memoryASet32(ds, 0x3a1c9c, edi);
    memoryASet32(ds, 0x3a1ca0, edi);
    memoryASet32(ds, 0x3a1cbc, edi);
    memoryASet32(ds, 0x1d7648, ecx);
    memoryASet32(ds, 0x1d764c, esi);
    goto loc_1979e5;
}
void sub_199645() // 0160:199645 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39eabc) == 0x00000000)
        goto loc_1996a6;
    if (memoryAGet32(ds, 0x1e0000) != 0x00000000)
        goto loc_199668;
    memoryASet32(ds, 0x1e0000, 0x00000001);
    sub_19cb2e();
loc_199668: // 0160:199668
    edx = 0x000a0000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000a4000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000a8000;
    eax = 0x00289cb0;
    sub_1c8aae();
    edx = 0x000ac000;
    eax = 0x00289cb0;
    sub_1c8aae();
    goto loc_1996da;
loc_1996a6: // 0160:1996a6
    if (memoryAGet32(ds, 0x1e0000) != 0x00000000)
        goto loc_1996cb;
    ecx = 0x00000001;
    eax = 0x00000013;
    memoryASet32(ds, 0x1e0000, ecx);
    sub_19ccc3();
    eax = 0;
    sub_1a566f();
loc_1996cb: // 0160:1996cb
    edx = 0x000a0000;
    eax = 0x00289cb0;
    sub_19e006();
loc_1996da: // 0160:1996da
    sub_19cc49();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1996e2() // 0160:1996e2 +long
{
    esp -= 4;
    memoryASet32(ds, 0x3a1d68, edx);
    goto loc_19fd41;
    // gap 19807 bytes
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6383 bytes
loc_19fd41: // 0160:19fd41
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x3a1c68);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x3a1d68);
    esi += ebx;
    eax += memoryAGet32(ds, edx * 4 + 0x1e02ee);
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    memoryASet32(ds, ebx + 3806726, 3);
    edi = memoryAGet32(ds, ebx + 3806726);
    ecx = eax + 2;
    if (edi)
        goto loc_19fd89;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_19e44c;
loc_19fd89: // 0160:19fd89
    if (edi != 0xffffffff)
        goto loc_19fd9c;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_19e44c;
loc_19fd9c: // 0160:19fd9c
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x3a1d68);
    edx += esi;
    edx = memoryAGet32(ds, edx * 4 + 0x3a1606);
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_19fdba;
    edx = 0x00000009;
loc_19fdba: // 0160:19fdba
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_19e44c;
}
void sub_1996ed() // 0160:1996ed +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1996f0: // 0160:1996f0
    eax++;
    dl = memoryAGet(ds, eax + 1928189);
    memoryASet(ds, eax + 1927205, dl);
    dl = memoryAGet(ds, eax + 1928230);
    memoryASet(ds, eax + 1927246, dl);
    dl = memoryAGet(ds, eax + 1928271);
    memoryASet(ds, eax + 1927287, dl);
    dl = memoryAGet(ds, eax + 1928312);
    memoryASet(ds, eax + 1927328, dl);
    dl = memoryAGet(ds, eax + 1928353);
    memoryASet(ds, eax + 1927369, dl);
    dl = memoryAGet(ds, eax + 1928394);
    memoryASet(ds, eax + 1927410, dl);
    dl = memoryAGet(ds, eax + 1928435);
    memoryASet(ds, eax + 1927451, dl);
    dl = memoryAGet(ds, eax + 1928476);
    memoryASet(ds, eax + 1927492, dl);
    dl = memoryAGet(ds, eax + 1928517);
    memoryASet(ds, eax + 1927533, dl);
    dl = memoryAGet(ds, eax + 1928558);
    memoryASet(ds, eax + 1927574, dl);
    dl = memoryAGet(ds, eax + 1928599);
    memoryASet(ds, eax + 1927615, dl);
    dl = memoryAGet(ds, eax + 1928640);
    memoryASet(ds, eax + 1927656, dl);
    dl = memoryAGet(ds, eax + 1928681);
    memoryASet(ds, eax + 1927697, dl);
    dl = memoryAGet(ds, eax + 1928722);
    memoryASet(ds, eax + 1927738, dl);
    dl = memoryAGet(ds, eax + 1928763);
    memoryASet(ds, eax + 1927779, dl);
    dl = memoryAGet(ds, eax + 1928804);
    memoryASet(ds, eax + 1927820, dl);
    dl = memoryAGet(ds, eax + 1928845);
    memoryASet(ds, eax + 1927861, dl);
    dl = memoryAGet(ds, eax + 1928886);
    memoryASet(ds, eax + 1927902, dl);
    dl = memoryAGet(ds, eax + 1928927);
    memoryASet(ds, eax + 1927943, dl);
    dl = memoryAGet(ds, eax + 1928968);
    memoryASet(ds, eax + 1927984, dl);
    dl = memoryAGet(ds, eax + 1929009);
    memoryASet(ds, eax + 1928025, dl);
    dl = memoryAGet(ds, eax + 1929050);
    memoryASet(ds, eax + 1928066, dl);
    dl = memoryAGet(ds, eax + 1929091);
    memoryASet(ds, eax + 1928107, dl);
    dl = memoryAGet(ds, eax + 1929132);
    memoryASet(ds, eax + 1928148, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_1996f0;
    eax = 0x001d6826;
    edx = 0;
    sub_1996e2();
    edx = 0x00000002;
    eax = 0x001d684f;
    sub_1996e2();
    edx = 0x00000004;
    eax = 0x001d6878;
    sub_1996e2();
    edx = 0x00000008;
    eax = 0x001d68a1;
    sub_1996e2();
    edx = 0x0000000c;
    eax = 0x001d68ca;
    sub_1996e2();
    edx = 0x0000000d;
    eax = 0x001d68f3;
    sub_1996e2();
    edx = 0x0000000b;
    eax = 0x001d691c;
    sub_1996e2();
    edx = 0x00000006;
    eax = 0x001d6945;
    sub_1996e2();
    edx = 0x00000011;
    eax = 0x001d696e;
    sub_1996e2();
    edx = 0x00000007;
    eax = 0x001d6997;
    sub_1996e2();
    edx = 0x00000003;
    eax = 0x001d69c0;
    sub_1996e2();
    edx = 0x00000014;
    eax = 0x001d69e9;
    sub_1996e2();
    edx = 0x0000000a;
    eax = 0x001d6a12;
    sub_1996e2();
    edx = 0x00000005;
    eax = 0x001d6a3b;
    sub_1996e2();
    edx = 0x00000010;
    eax = 0x001d6a64;
    sub_1996e2();
    edx = 0x00000001;
    eax = 0x001d6a8d;
    sub_1996e2();
    edx = 0x00000012;
    eax = 0x001d6ab6;
    sub_1996e2();
    edx = 0x00000009;
    eax = 0x001d6adf;
    sub_1996e2();
    edx = 0x0000000f;
    eax = 0x001d6b08;
    sub_1996e2();
    edx = 0x0000000e;
    eax = 0x001d6b31;
    sub_1996e2();
    edx = 0x00000013;
    eax = 0x001d6bd5;
    sub_1996e2();
    edx = 0;
    memoryASet32(ds, 0x3a1d68, edx);
    edx = pop32();
    esp += 4;
}
void sub_19995c() // 0160:19995c +long
{
    esp -= 4;
    goto loc_19995c;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8049 bytes
loc_19995c: // 0160:19995c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    sub_1a56c8();
    eax = 0;
    ebp = 0x00000001;
    sub_1a593a();
    sub_19a107();
    ebx = 0;
    sub_19e68b();
    memoryASet32(ds, 0x1e12fa, ebx);
    memoryASet32(ds, 0x39ea80, ebx);
    sub_19a0dc();
    eax = memoryAGet32(ds, 0x3a1cc4);
    memoryASet32(ds, 0x1e15ec, ebx);
    memoryASet32(ds, 0x3a1c84, ebx);
    memoryASet32(ds, 0x3a1cc8, ebp);
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1cb4, ebx);
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x3a1f24, ebx);
    memoryASet32(ds, 0x3a1c64, ebx);
    memoryASet32(ds, 0x3a1c68, ebx);
    ebx = 0x00000010;
    memoryASet32(ds, 0x3a1c60, eax);
    eax = 0x00000280;
    memoryASet32(ds, 0x1e008c, ebx);
    memoryASet32(ds, 0x1e0088, eax);
    sub_199f16();
    eax = edx;
    sub_1ac9eb();
    sub_1aa4ba();
    ecx = memoryAGet32(ds, 0x39eaa8);
    if (ecx == ebp)
        goto loc_199a0c;
    if (ecx == 0x00000006)
        goto loc_199a0c;
    if (ecx != 0x00000009)
        goto loc_199a18;
loc_199a0c: // 0160:199a0c
    memoryASet32(ds, 0x3a1cb0, 0x000000f8);
    goto loc_199a22;
loc_199a18: // 0160:199a18
    memoryASet32(ds, 0x3a1cb0, 0x000000e6);
loc_199a22: // 0160:199a22
    eax = memoryAGet32(ds, 0x1e0020);
    eax <<= 2;
    memoryASet32(ds, 0x1e0030, eax);
    eax = memoryAGet32(ds, 0x1e0024);
    eax <<= 2;
    edx = 0;
    memoryASet32(ds, 0x1e003c, eax);
    eax = memoryAGet32(ds, 0x1e0028);
    memoryASet32(ds, 0x1e0034, edx);
    eax <<= 2;
    memoryASet32(ds, 0x1e0040, edx);
    memoryASet32(ds, 0x1e0048, eax);
    eax = memoryAGet32(ds, 0x1e002c);
    memoryASet32(ds, 0x1e004c, edx);
    eax <<= 2;
    memoryASet32(ds, 0x1e0058, edx);
    memoryASet32(ds, 0x1e0054, eax);
    eax = 0;
loc_199a72: // 0160:199a72
    eax++;
    dl = memoryAGet(ds, eax + 2546543);
    memoryASet(ds, eax + 1985231, dl);
    if ((int32_t)eax < (int32_t)0x00000fc0)
        goto loc_199a72;
    sub_1996ed();
    edx = 0x00000120;
    eax = 0x001e4ad0;
    edi = 0x00000500;
    ebp = 0x000003a0;
    ecx = 0x00020000;
    esi = 0x00000001;
    sub_199079();
    sub_199382();
    sub_1994e6();
    sub_199593();
    ebx = 0;
    memoryASet32(ds, 0x3a1f14, edi);
    memoryASet32(ds, 0x3a1f18, ebp);
    memoryASet32(ds, 0x3a1f1c, edi);
    memoryASet32(ds, 0x3a1f20, ebp);
    sub_199645();
    sub_198f43();
    edi = 0xffff6000;
    ebp = memoryAGet32(ds, 0x1e00a4);
    memoryASet32(ds, 0x3a1c46, ebx);
    memoryASet32(ds, 0x3a1f08, ecx);
    memoryASet32(ds, 0x3a1c6c, esi);
    memoryASet32(ds, 0x3a1c74, edi);
    if (!ebp)
        goto loc_199b0f;
    sub_19ace7();
    goto loc_199b14;
loc_199b0f: // 0160:199b0f
    sub_19adf1();
loc_199b14: // 0160:199b14
    sub_19abd3();
    sub_19ac2f();
    sub_19ac8b();
    sub_1a5793();
    goto loc_1979e4;
}
void sub_199b2d() // 0160:199b2d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x20;
    ebx = 0;
loc_199b35: // 0160:199b35
    ebx++;
    memoryASet(ds, ebx + 1927149, ah);
    if ((int32_t)ebx < (int32_t)0x0000000e)
        goto loc_199b35;
    ebx = 0;
loc_199b43: // 0160:199b43
    edx = 0x00000009;
    eax = 0;
    ebx++;
    sub_1ab709();
    al += 0x30;
    memoryASet(ds, ebx + 1927149, al);
    if ((int32_t)ebx < (int32_t)0x0000000a)
        goto loc_199b43;
    edx = 0x00000005;
    ebx = 0x00000024;
    eax = 0;
    cl = 0x20;
    sub_1ab709();
    esi = eax;
    edx = eax;
    ebx -= esi;
    eax = 0;
    esi = ebx;
    goto loc_199b84;
loc_199b7c: // 0160:199b7c
    ebx++;
    eax++;
    memoryASet(ds, ebx + 1927123, cl);
loc_199b84: // 0160:199b84
    if ((int32_t)eax < (int32_t)edx)
        goto loc_199b7c;
    ch = 0;
    memoryASet(ds, esi + 1927124, ch);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_199b95() // 0160:199b95 +long
{
    esp -= 4;
    goto loc_199b95;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8618 bytes
loc_199b95: // 0160:199b95
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x3a1c90) == 0x00000000)
        goto loc_1979e4;
    ebx = 0;
    sub_19c6b5();
    bl = al;
    if ((int32_t)ebx < (int32_t)0x00000030)
        goto loc_199bbb;
    if ((int32_t)ebx <= (int32_t)0x00000039)
        goto loc_199bcf;
loc_199bbb: // 0160:199bbb
    if ((int32_t)ebx < (int32_t)0x00000041)
        goto loc_199bc5;
    if ((int32_t)ebx <= (int32_t)0x0000005a)
        goto loc_199bcf;
loc_199bc5: // 0160:199bc5
    if (ebx == 0x00000001)
        goto loc_199bcf;
    if (ebx != 0x00000020)
        goto loc_199c0c;
loc_199bcf: // 0160:199bcf
    if (ebx == 0x00000001)
        goto loc_199bfd;
    if ((int32_t)memoryAGet32(ds, 0x3a1c94) < (int32_t)0x0000000a)
        goto loc_199be7;
    memoryASet32(ds, 0x3a1c94, 0x00000009);
loc_199be7: // 0160:199be7
    eax = memoryAGet32(ds, 0x3a1c94);
    memoryASet(ds, eax + 1927150, bl);
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_199bfd;
    eax++;
    memoryASet32(ds, 0x3a1c94, eax);
loc_199bfd: // 0160:199bfd
    edx = 0x00218b90;
    eax = 0x001d67d4;
    sub_198723();
loc_199c0c: // 0160:199c0c
    if (ebx != 0x00000008)
        goto loc_199c51;
    edi = memoryAGet32(ds, 0x3a1c94);
    if (!edi)
        goto loc_199c51;
    if (edi != 0x00000009)
        goto loc_199c30;
    al = memoryAGet(ds, edi + 1927150);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_199c36;
loc_199c30: // 0160:199c30
    memoryASet32(ds, 0x3a1c94, memoryAGet32(ds, 0x3a1c94) - 1);
loc_199c36: // 0160:199c36
    eax = memoryAGet32(ds, 0x3a1c94);
    memoryASet(ds, eax + 1927150, 0x20);
    edx = 0x00218b90;
    eax = 0x001d67d4;
    sub_198723();
loc_199c51: // 0160:199c51
    if (ebx != 0x0000000a)
        goto loc_199ef0;
    ebx = 0xffffffff;
    esi = 0x00000001;
    edx = 0;
    eax = memoryAGet32(ds, 0x3a1c94);
    memoryASet32(ds, 0x1e0070, edx);
    memoryASet32(ds, 0x1e130a, ebx);
    memoryASet32(ds, 0x3a1c90, edx);
    dh = 0;
    memoryASet32(ds, 0x1e009c, esi);
    memoryASet(ds, eax + 1927150, dh);
    memoryASet(ds, eax + 1927191, dh);
    sub_19a107();
    eax = 0x001d67ee;
    edx = 0x001d67ee;
    sub_1ab73d();
    memoryASet32(ds, 0x1e0060, eax);
    eax = 0x001d52fa;
    sub_1cb950();
    if (eax)
        goto loc_199cc2;
    memoryASet32(ds, 0x1e130a, eax);
    goto loc_199e70;
loc_199cc2: // 0160:199cc2
    edx = 0x001d67ee;
    eax = 0x001d5301;
    sub_1cb950();
    if (eax)
        goto loc_199ce4;
    memoryASet32(ds, 0x1e130a, 0x00000002);
    goto loc_199e70;
loc_199ce4: // 0160:199ce4
    edx = 0x001d67ee;
    eax = 0x001d5306;
    sub_1cb950();
    if (eax)
        goto loc_199d02;
    memoryASet32(ds, 0x1e130a, esi);
    goto loc_199e70;
loc_199d02: // 0160:199d02
    edx = 0x001d67ee;
    eax = 0x001d530d;
    sub_1cb950();
    if (eax)
        goto loc_199d24;
    memoryASet32(ds, 0x1e130a, 0x00000004);
    goto loc_199e70;
loc_199d24: // 0160:199d24
    edx = 0x001d67ee;
    eax = 0x001d5314;
    sub_1cb950();
    if (eax)
        goto loc_199d46;
    memoryASet32(ds, 0x1e130a, 0x00000003);
    goto loc_199e70;
loc_199d46: // 0160:199d46
    edx = 0x001d67ee;
    eax = 0x001d531a;
    sub_1cb950();
    if (eax)
        goto loc_199d68;
    memoryASet32(ds, 0x1e130a, 0x00000005);
    goto loc_199e70;
loc_199d68: // 0160:199d68
    edx = 0x001d67ee;
    eax = 0x001d5320;
    sub_1cb950();
    if (eax)
        goto loc_199d8a;
    memoryASet32(ds, 0x1e130a, 0x00000006);
    goto loc_199e70;
loc_199d8a: // 0160:199d8a
    edx = 0x001d67ee;
    eax = 0x001d5326;
    sub_1cb950();
    if (eax)
        goto loc_199dac;
    memoryASet32(ds, 0x1e130a, 0x00000007);
    goto loc_199e70;
loc_199dac: // 0160:199dac
    edx = 0x001d67ee;
    eax = 0x001d532e;
    sub_1cb950();
    if (eax)
        goto loc_199dce;
    memoryASet32(ds, 0x1e130a, 0x00000008);
    goto loc_199e70;
loc_199dce: // 0160:199dce
    edx = 0x001d67ee;
    eax = 0x001d5333;
    sub_1cb950();
    if (eax)
        goto loc_199df0;
    memoryASet32(ds, 0x1e130a, 0x00000009);
    goto loc_199e70;
loc_199df0: // 0160:199df0
    edx = 0x001d67ee;
    eax = 0x001d5339;
    sub_1cb950();
    if (eax)
        goto loc_199e16;
    ebp = 0x00000003;
    memoryASet32(ds, 0x1e0068, esi);
    memoryASet32(ds, 0x1e130a, ebp);
    goto loc_199e70;
loc_199e16: // 0160:199e16
    edx = 0x001d67ee;
    eax = 0x001d533d;
    sub_1cb950();
    if (eax)
        goto loc_199e36;
    memoryASet32(ds, 0x1e130a, ebx);
    sub_199b2d();
    goto loc_199e61;
loc_199e36: // 0160:199e36
    edx = 0x001d67ee;
    eax = 0x001d5341;
    sub_1cb950();
    if (eax)
        goto loc_199e70;
loc_199e49: // 0160:199e49
    eax++;
    dl = memoryAGet(ds, eax + 3795571);
    memoryASet(ds, eax + 1927149, dl);
    memoryASet(ds, eax + 1927190, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_199e49;
loc_199e61: // 0160:199e61
    eax = 0x001d67ee;
    sub_1ab73d();
    memoryASet32(ds, 0x1e0060, eax);
loc_199e70: // 0160:199e70
    if (memoryAGet32(ds, 0x1e130a) != 0xffffffff)
        goto loc_199ede;
    bh = 0x20;
    eax = 0;
loc_199e7d: // 0160:199e7d
    eax++;
    memoryASet(ds, eax + 1927190, bh);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_199e7d;
    eax = 0;
loc_199e8b: // 0160:199e8b
    eax++;
    dl = memoryAGet(ds, eax + 1927149);
    memoryASet(ds, eax + 1927190, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_199e8b;
    eax = memoryAGet32(ds, 0x1e0060);
    sub_19995c();
    if (memoryAGet32(ds, 0x1e1306) == 0x00000000)
        goto loc_199eb5;
    sub_19a76a();
loc_199eb5: // 0160:199eb5
    memoryASet32(ds, 0x3a1c60, 0x00000225);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = 0x00000001;
    memoryASet32(ds, 0x3a1f04, eax);
    ebx = 0;
    memoryASet32(ds, 0x3a1f00, edx);
    memoryASet32(ds, 0x3a1e78, ebx);
    goto loc_199ee8;
loc_199ede: // 0160:199ede
    memoryASet32(ds, 0x1e0064, 0x00000001);
loc_199ee8: // 0160:199ee8
    ecx = 0;
    memoryASet32(ds, 0x1e009c, ecx);
loc_199ef0: // 0160:199ef0
    esi = 0x00001400;
    edi = 0x00000064;
    ebp = 0x00000001;
    memoryASet32(ds, 0x39eab8, esi);
    memoryASet32(ds, 0x39eaa4, edi);
    memoryASet32(ds, 0x39ea90, ebp);
    goto loc_1979e4;
}
void sub_199f16() // 0160:199f16 +long
{
    esp -= 4;
    goto loc_199f16;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9515 bytes
loc_199f16: // 0160:199f16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_199f22: // 0160:199f22
    edx = 0x002dc270;
    memoryASet32(ds, ebx + 3803634, edx);
    ebp = 0x00000001;
    memoryASet32(ds, ebx + 3803638, edx);
    memoryASet32(ds, ebx + 3803494, ebp);
    eax = 0x00000032;
    memoryASet32(ds, ebx + 3803502, ebp);
    memoryASet32(ds, ebx + 3803582, eax);
    edx = 0x0000000a;
    ebp = 0x00000004;
    memoryASet32(ds, ebx + 3803506, edx);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx += 0x000000ac;
    memoryASet32(ds, ebx + 3803298, esi);
    memoryASet32(ds, ebx + 3803302, esi);
    memoryASet32(ds, ebx + 3803306, esi);
    memoryASet32(ds, ebx + 3803326, esi);
    memoryASet32(ds, ebx + 3803454, esi);
    memoryASet32(ds, ebx + 3803458, esi);
    memoryASet32(ds, ebx + 3803338, esi);
    memoryASet32(ds, ebx + 3803346, esi);
    memoryASet32(ds, ebx + 3803350, esi);
    memoryASet32(ds, ebx + 3803358, esi);
    memoryASet32(ds, ebx + 3803366, esi);
    memoryASet32(ds, ebx + 3803378, esi);
    memoryASet32(ds, ebx + 3803314, esi);
    memoryASet32(ds, ebx + 3803374, esi);
    memoryASet32(ds, ebx + 3803402, esi);
    memoryASet32(ds, ebx + 3803406, esi);
    memoryASet32(ds, ebx + 3803354, esi);
    memoryASet32(ds, ebx + 3803394, esi);
    memoryASet32(ds, ebx + 3803422, esi);
    memoryASet32(ds, ebx + 3803430, esi);
    memoryASet32(ds, ebx + 3803426, esi);
    memoryASet32(ds, ebx + 3803442, esi);
    memoryASet32(ds, ebx + 3803446, esi);
    edi = 0x00000100;
    memoryASet32(ds, ebx + 3803450, esi);
    memoryASet32(ds, ebx + 3803318, edi);
    edi = 0xffffffff;
    memoryASet32(ds, ebx + 3803370, ebp);
    memoryASet32(ds, ebx + 3803414, edi);
    eax = memoryAGet32(ds, eax * 4 + 0x1e0020);
    edx = 0x00000010;
    memoryASet32(ds, ebx + 3803398, eax);
    ebp = 0x00000096;
    memoryASet32(ds, ebx + 3803418, edx);
    eax = 0x00000001;
    memoryASet32(ds, ebx + 3803434, ebp);
    ecx += eax;
    memoryASet32(ds, ebx + 3803438, eax);
    if ((int32_t)ecx < (int32_t)edx)
        goto loc_199f22;
    edx = memoryAGet32(ds, 0x1e0010);
    memoryASet32(ds, 0x3a1c88, ebp);
    memoryASet32(ds, 0x3a1d84, eax);
    ecx = 0;
    eax = 0x00000003;
    memoryASet32(ds, 0x1e15d4, ecx);
    memoryASet32(ds, 0x1e15d8, ecx);
    memoryASet32(ds, 0x1e15dc, ecx);
    edx--;
    memoryASet32(ds, 0x3a1dcc, eax);
    memoryASet32(ds, 0x3a1dd0, eax);
    ebx = eax;
    memoryASet32(ds, 0x3a1dd4, eax);
    memoryASet32(ds, 0x3a1dd8, eax);
    eax = 0;
    memoryASet32(ds, 0x1e15e0, ecx);
    sub_1ab709();
    eax--;
    eax &= ebx;
    memoryASet32(ds, 0x3a1c68, eax);
    sub_19e980();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803542, ecx);
    eax = 0x001d6826;
    memoryASet32(ds, 0x3a1d68, ecx);
    memoryASet32(ds, 0x3a1d6c, eax);
    sub_19828d();
    sub_19839d();
    goto loc_1979e4;
}
void sub_19a0dc() // 0160:19a0dc +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_19a0df: // 0160:19a0df
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 1980024);
    memoryASet32(ds, eax + 3806722, edx);
    memoryASet32(ds, eax + 3806806, edx);
    memoryASet32(ds, eax + 3806890, edx);
    memoryASet32(ds, eax + 3806974, edx);
    if (eax != 0x00000054)
        goto loc_19a0df;
    edx = pop32();
    esp += 4;
}
void sub_19a107() // 0160:19a107 +long
{
    esp -= 4;
    goto loc_19a107;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10012 bytes
loc_19a107: // 0160:19a107
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_19e68b();
    edx = 0xffffffff;
    ecx = 0x00000010;
    edi = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x1e15e8, edx);
    sub_1acc78();
    edx = 0x00000064;
    memoryASet32(ds, 0x1e12f2, ebx);
    memoryASet32(ds, 0x3a1ec4, ecx);
    memoryASet32(ds, 0x1e12e6, ebx);
    memoryASet32(ds, 0x3a1cc8, edi);
    memoryASet32(ds, 0x3a1cc0, edi);
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x1e001c, edx);
    sub_1acd40();
    sub_199f16();
    sub_19930d();
    dl = 0x80;
    eax = 0;
loc_19a170: // 0160:19a170
    eax++;
    memoryASet(ds, eax + 2192015, dl);
    if ((int32_t)eax < (int32_t)0x00003200)
        goto loc_19a170;
    ebx = 0x00050000;
    edx = 0x00000005;
    memoryASet32(ds, 0x39ea84, ebx);
    sub_198a6a();
    sub_19cc49();
    sub_19ca7d();
    eax = memoryAGet32(ds, 0x39eac8);
    ecx = 0;
    memoryASet32(ds, 0x39eab0, eax);
    eax = memoryAGet32(ds, 0x39eac4);
    memoryASet32(ds, 0x3a1ea8, ecx);
    memoryASet32(ds, 0x39eab4, eax);
    eax = 0x00000002;
    memoryASet32(ds, 0x3a1d70, ecx);
    sub_1ab709();
    edx = 0x00000001;
    memoryASet32(ds, 0x3c0f2c, eax);
    memoryASet32(ds, 0x1e3b74, ecx);
    memoryASet32(ds, 0x3a1d70, ecx);
    memoryASet32(ds, 0x3a1d74, ecx);
    memoryASet32(ds, 0x3a1d84, edx);
    eax = 0;
loc_19a1ed: // 0160:19a1ed
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 3808984, ebx);
    if (eax != 0x00000010)
        goto loc_19a1ed;
    eax = 0;
loc_19a1ff: // 0160:19a1ff
    eax += 0x00000018;
    ecx = 0;
    memoryASet32(ds, eax + 3802342, ecx);
    if (eax != 0x000000f0)
        goto loc_19a1ff;
    eax = 0;
loc_19a213: // 0160:19a213
    eax += 0x00000024;
    esi = 0;
    memoryASet32(ds, eax + 3806186, esi);
    if (eax != 0x00000120)
        goto loc_19a213;
    memoryASet32(ds, 0x3a1552, esi);
    eax = 0;
loc_19a22d: // 0160:19a22d
    eax += 0x00000020;
    ebp = 0;
    memoryASet32(ds, eax + 3807030, ebp);
    if (eax != 0x00000400)
        goto loc_19a22d;
    eax = 0;
loc_19a241: // 0160:19a241
    eax += 0x00000024;
    edx = 0;
    memoryASet32(ds, eax + 3806582, edx);
    if (eax != 0x0000006c)
        goto loc_19a241;
    eax = 0;
loc_19a253: // 0160:19a253
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 2536140, ebx);
    if (eax != 0x00000020)
        goto loc_19a253;
    eax = 0;
loc_19a265: // 0160:19a265
    eax += 0x00000004;
    ecx = 0;
    memoryASet32(ds, eax + 3935512, ecx);
    if (eax != 0x00000020)
        goto loc_19a265;
    eax = 0;
loc_19a277: // 0160:19a277
    eax += 0x00000018;
    esi = 0;
    memoryASet32(ds, eax + 3932420, esi);
    if (eax != 0x00000c00)
        goto loc_19a277;
    memoryASet32(ds, 0x3a1b56, esi);
    eax = 0;
loc_19a291: // 0160:19a291
    eax += 0x00000024;
    ebp = 0;
    memoryASet32(ds, eax + 3802570, ebp);
    memoryASet32(ds, eax + 3802586, ebp);
    memoryASet32(ds, eax + 3802590, ebp);
    if (eax != 0x00000360)
        goto loc_19a291;
    eax = 0;
loc_19a2b1: // 0160:19a2b1
    eax += 0x00000012;
    ecx = 0;
    memoryASet32(ds, eax + 2240638, ecx);
    if (eax != 0x00004800)
        goto loc_19a2b1;
    sub_19a0dc();
    esi = 0x00000041;
    edi = 0x00000042;
    ebp = 0x00000043;
    edx = 0x00000044;
    eax = 0;
loc_19a2de: // 0160:19a2de
    eax += 0x00000010;
    memoryASet32(ds, eax + 2536160, esi);
    memoryASet32(ds, eax + 2536164, edi);
    memoryASet32(ds, eax + 2536168, ebp);
    memoryASet32(ds, eax + 2536172, edx);
    if (eax != 0x00000080)
        goto loc_19a2de;
    goto loc_1979e4;
}
void sub_19a305() // 0160:19a305 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x3a1c78);
    edx = memoryAGet32(ds, 0x3a1ca4);
    if (eax == edx)
        goto loc_19a33d;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_19a32b;
    edi = edx + -2;
    memoryASet32(ds, 0x3a1ca4, edi);
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_19a33d;
    goto loc_19a338;
loc_19a32b: // 0160:19a32b
    ecx = edx + 2;
    memoryASet32(ds, 0x3a1ca4, ecx);
    if ((int32_t)ecx <= (int32_t)eax)
        goto loc_19a33d;
loc_19a338: // 0160:19a338
    memoryASet32(ds, 0x3a1ca4, eax);
loc_19a33d: // 0160:19a33d
    eax = memoryAGet32(ds, 0x3a1c98);
    edx = memoryAGet32(ds, 0x3a1c9c);
    if (eax == edx)
        goto loc_19a367;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_19a35e;
    esi = edx + -1;
    memoryASet32(ds, 0x3a1c9c, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_19a35e: // 0160:19a35e
    ecx = edx + 1;
    memoryASet32(ds, 0x3a1c9c, ecx);
loc_19a367: // 0160:19a367
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19a36c() // 0160:19a36c +long
{
    esp -= 4;
    goto loc_19a36c;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10625 bytes
loc_19a36c: // 0160:19a36c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19a3e1;
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_19a3e1;
    if (memoryAGet32(ds, 0x1e12f2) != 0x00000000)
        goto loc_19a3e1;
    if (memoryAGet(ds, 0x3a9f6a) == 0x00)
        goto loc_19a3b9;
    if (memoryAGet32(ds, 0x3a1f08) != 0x00010000)
        goto loc_19a3b9;
    if (memoryAGet32(ds, 0x3a1c46) != 0x00000000)
        goto loc_19a3b9;
    memoryASet32(ds, 0x3a1c46, 0x00000001);
loc_19a3b9: // 0160:19a3b9
    if (memoryAGet(ds, 0x3a9f6a) == 0x00)
        goto loc_19a3e1;
    if (memoryAGet32(ds, 0x3a1f08) != 0x00020000)
        goto loc_19a3e1;
    if (memoryAGet32(ds, 0x3a1c46) != 0x00000000)
        goto loc_19a3e1;
    memoryASet32(ds, 0x3a1c46, 0x00000002);
loc_19a3e1: // 0160:19a3e1
    ecx = memoryAGet32(ds, 0x3a1c46);
    if (!ecx)
        goto loc_1979e4;
    if (ecx != 0x00000001)
        goto loc_19a423;
    ebx = memoryAGet32(ds, 0x3a1f08);
    ebx += 0x00000600;
    memoryASet32(ds, 0x3a1f08, ebx);
    if ((int32_t)ebx < (int32_t)0x00020000)
        goto loc_19a44f;
    esi = 0;
    edi = 0x00020000;
    memoryASet32(ds, 0x3a1c46, esi);
    memoryASet32(ds, 0x3a1f08, edi);
    goto loc_19a44f;
loc_19a423: // 0160:19a423
    edi = memoryAGet32(ds, 0x3a1f08);
    edi -= 0x00000600;
    memoryASet32(ds, 0x3a1f08, edi);
    if ((int32_t)edi > (int32_t)0x00010000)
        goto loc_19a44f;
    eax = 0;
    edx = 0x00010000;
    memoryASet32(ds, 0x3a1c46, eax);
    memoryASet32(ds, 0x3a1f08, edx);
loc_19a44f: // 0160:19a44f
    if (memoryAGet(ds, 0x3a9f6a) != 0x00)
        goto loc_19a45d;
    sub_19e5a8();
loc_19a45d: // 0160:19a45d
    ebp = 0;
    memoryASet32(ds, 0x3a1c6c, ebp);
    goto loc_1979e4;
}
void sub_19a46a() // 0160:19a46a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e12ea);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x1e12ea, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x1e3998);
    memoryASet32(ds, 0x1e12ea, ebx);
    if ((int32_t)ecx < 0)
        goto loc_19a4f2;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19a4f2;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_19a4c6;
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x002dc270;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x00289cb0;
    eax += 0x00003d10;
    goto loc_19a4ed;
loc_19a4c6: // 0160:19a4c6
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x002dc270;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x00289cb0;
    eax += 0x00004710;
loc_19a4ed: // 0160:19a4ed
    sub_19e0ca();
loc_19a4f2: // 0160:19a4f2
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a50e() // 0160:19a50e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e12ee);
    if (!edx)
        goto loc_19a524;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e12ee, ebx);
loc_19a524: // 0160:19a524
    ecx = memoryAGet32(ds, 0x1e12ee);
    if (!ecx)
        goto loc_19a552;
    edx = memoryAGet32(ds, 0x1e3664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_19a552;
    eax -= ecx;
    sub_1bfd4c();
loc_19a552: // 0160:19a552
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a556() // 0160:19a556 +long
{
    esp -= 4;
    sub_1bfd80();
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_19a56a;
    memoryASet32(ds, 0x1e12ee, 0x0000015e);
loc_19a56a: // 0160:19a56a
    esp += 4;
    return;
}
void sub_19a56b() // 0160:19a56b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    sub_19a50e();
    edx = memoryAGet32(ds, 0x1e00c0);
    if (!edx)
        goto loc_19a5a7;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e00c0, ebx);
    if (ebx)
        goto loc_19a5a7;
    eax = memoryAGet32(ds, 0x3a1d6c);
    esi = 0xffffffff;
    sub_19fde2();
    memoryASet32(ds, 0x39eaa4, esi);
    memoryASet32(ds, 0x1e0094, esi);
loc_19a5a7: // 0160:19a5a7
    if (memoryAGet32(ds, 0x3a1cc8) == 0x00000000)
        goto loc_19a6e7;
    if (memoryAGet32(ds, 0x3a1c90) != 0x00000000)
        goto loc_19a6e7;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19a6e7;
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19a6e7;
    ecx = memoryAGet32(ds, 0x1e12f6);
    if (!ecx)
        goto loc_19a5ee;
    esi = ecx + -1;
    memoryASet32(ds, 0x1e12f6, esi);
loc_19a5ee: // 0160:19a5ee
    if (memoryAGet32(ds, 0x1e12f2) == 0x00000000)
        goto loc_19a601;
    memoryASet32(ds, 0x39eaa4, 0x00000032);
loc_19a601: // 0160:19a601
    if (memoryAGet(ds, 0x3a9f51) == 0x00)
        goto loc_19a6e7;
    eax = memoryAGet32(ds, 0x1e12f6);
    if (eax)
        goto loc_19a6e7;
    memoryASet(ds, 0x1e12f2, memoryAGet(ds, 0x1e12f2) ^ 0x01);
    edx = 0x0000000c;
    ebx = memoryAGet32(ds, 0x1e12f2);
    memoryASet32(ds, 0x1e12f6, edx);
    if (ebx)
        goto loc_19a66f;
    sub_1bfd00();
    sub_19a556();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803602, 0x00000001);
    eax = 0x001d6627;
    ebp = 0x00000032;
    sub_19fde2();
    memoryASet32(ds, 0x1e00c0, ebp);
    goto loc_19a6e7;
loc_19a66f: // 0160:19a66f
    dh = 0x20;
    memoryASet32(ds, 0x1e00c0, eax);
    sub_197df2();
    eax = 0;
loc_19a67d: // 0160:19a67d
    eax++;
    memoryASet(ds, eax + 1926660, dh);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_19a67d;
    edx = memoryAGet32(ds, 0x3a1c64);
    ecx = memoryAGet32(ds, 0x3a1c64);
    eax = 0;
    edx <<= 4;
    ebx = ecx * 0x000000ac;
    goto loc_19a6b0;
loc_19a6a2: // 0160:19a6a2
    eax++;
    cl = memoryAGet(ds, edx + 1966492);
    edx++;
    memoryASet(ds, eax + 1926660, cl);
loc_19a6b0: // 0160:19a6b0
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, ebx + 3803554))
        goto loc_19a6a2;
    eax = 0;
loc_19a6ba: // 0160:19a6ba
    eax++;
    dl = memoryAGet(ds, eax + 1927190);
    memoryASet(ds, eax + 1926682, dl);
    if ((int32_t)eax < (int32_t)0x0000000a)
        goto loc_19a6ba;
    eax = 0x001d65fe;
    sub_19fde2();
    edx = 0;
    sub_1bfd80();
    sub_197010();
    sub_1bfcd4();
loc_19a6e7: // 0160:19a6e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a6ed() // 0160:19a6ed +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e12fa);
    if (!edx)
        goto loc_19a72c;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19a72c;
    eax = edx;
    eax &= 0x00000007;
    eax++;
    memoryASet32(ds, 0x1e12fa, eax);
    if ((int32_t)eax <= (int32_t)0x00000003)
        goto loc_19a72c;
    ecx = 0x00000012;
    ebx = 0x00000010;
    edx = 0x0028abb8;
    eax = 0x002dfce0;
    sub_1c8bd6();
loc_19a72c: // 0160:19a72c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a76a() // 0160:19a76a +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x1e1306, edx);
    memoryASet32(ds, 0x1e130e, ecx);
    ecx = 0x0000000a;
loc_19a785: // 0160:19a785
    if (memoryAGet32(ds, 0x1e1306) == 0x00000000)
        goto loc_19a839;
    edi = memoryAGet32(ds, 0x1e130e);
    if ((int32_t)edi >= (int32_t)0x00000080)
        goto loc_19a839;
    if ((int32_t)edi >= (int32_t)0x00000040)
        goto loc_19a7b0;
    sub_199b2d();
    goto loc_19a801;
loc_19a7b0: // 0160:19a7b0
    edx = 0;
    dl = memoryAGet(ds, 0x1d67ee);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d67ee, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x1d67ef);
    edx -= 0x00000029;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d67ef, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x1d67f0);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x1d67f0, dl);
loc_19a801: // 0160:19a801
    eax = 0x001d67ee;
    sub_1ab73d();
    memoryASet32(ds, 0x1e0060, eax);
    eax = 0;
loc_19a812: // 0160:19a812
    eax++;
    dl = memoryAGet(ds, eax + 1927149);
    memoryASet(ds, eax + 1927190, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_19a812;
    eax = memoryAGet32(ds, 0x1e0060);
    sub_19995c();
    memoryASet32(ds, 0x1e130e, memoryAGet32(ds, 0x1e130e) + 1);
    goto loc_19a785;
loc_19a839: // 0160:19a839
    if (memoryAGet32(ds, 0x1e0068) == 0x00000000)
        goto loc_19a84e;
    eax = 0;
    memoryASet32(ds, 0x1e130a, eax);
    memoryASet32(ds, 0x1e0068, eax);
loc_19a84e: // 0160:19a84e
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19a852() // 0160:19a852 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x0000002d;
    eax = 0;
    sub_1ab709();
    dl = 0x20;
    ecx = memoryAGet32(ds, eax * 4 + 0x1e0382);
    eax = 0;
loc_19a86c: // 0160:19a86c
    eax++;
    memoryASet(ds, eax + 1929732, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_19a86c;
    eax = ecx;
    ebx = 0;
loc_19a87c: // 0160:19a87c
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_19a885;
    eax++;
    ebx++;
    goto loc_19a87c;
loc_19a885: // 0160:19a885
    edx = 0x00000028;
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax = ecx;
    ecx += ebx;
    goto loc_19a8a7;
loc_19a89d: // 0160:19a89d
    edx++;
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx + 1929732, bl);
loc_19a8a7: // 0160:19a8a7
    if (eax != ecx)
        goto loc_19a89d;
    ebx = 0x000000c8;
    eax = 0x001d7205;
    edx = 0;
    sub_19fdc8();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19a8c0() // 0160:19a8c0 +long
{
    esp -= 4;
    goto loc_19a8c0;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11989 bytes
loc_19a8c0: // 0160:19a8c0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1dfffc) == 0x00000000)
        goto loc_19a90a;
    edi = 0x000000b0;
    ebp = 0xffffffff;
    ebx = 0;
    edx = 0;
    memoryASet32(ds, 0x1dfffc, ebx);
    memoryASet32(ds, 0x1e0078, ebx);
    memoryASet32(ds, 0x1e0098, ebx);
    memoryASet32(ds, 0x1e007c, edi);
    memoryASet32(ds, 0x1e00cc, ebp);
    sub_1bfd80();
    sub_197010();
    sub_1bfd2f();
loc_19a90a: // 0160:19a90a
    if (memoryAGet32(ds, 0x1e000c) == 0x00000000)
        goto loc_1979e4;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1979e4;
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_19a97f;
    if (memoryAGet32(ds, 0x3a1c90) != 0x00000000)
        goto loc_19a97f;
    sub_19c6aa();
    edi = 0x00000001;
    eax = 0x0000001a;
    dl = 0x20;
    memoryASet32(ds, 0x1e0070, edi);
    memoryASet32(ds, 0x3a1c90, edi);
loc_19a953: // 0160:19a953
    eax++;
    memoryASet(ds, eax + 1927123, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_19a953;
    dh = 0x3f;
    eax = 0x001d67d4;
    memoryASet(ds, 0x1d67ee, dh);
    edx = 0x00218b90;
    sub_198723();
    eax = 0;
    memoryASet32(ds, 0x3a1c94, eax);
    goto loc_19a9dc;
loc_19a97f: // 0160:19a97f
    if (memoryAGet32(ds, 0x3a1c90) != 0x00000000)
        goto loc_19a9b1;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19a9b1;
    if ((int32_t)memoryAGet32(ds, 0x1e3998) < (int32_t)0x00000000)
        goto loc_19a9b1;
    eax = 0x001d67fd;
    esi = 0x00000001;
    sub_19fe05();
    memoryASet32(ds, 0x39eaa4, esi);
    goto loc_19a9dc;
loc_19a9b1: // 0160:19a9b1
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_19a9cd;
    ebx = 0x00000063;
    memoryASet32(ds, 0x3a1c60, ebx);
    memoryASet32(ds, 0x1e000c, ebx);
    goto loc_19a9dc;
loc_19a9cd: // 0160:19a9cd
    eax = 0x00000225;
    memoryASet32(ds, 0x3a1c60, eax);
    memoryASet32(ds, 0x1e000c, eax);
loc_19a9dc: // 0160:19a9dc
    if (memoryAGet(ds, 0x3a9f85) != 0x00)
        goto loc_19a9fb;
    if (memoryAGet32(ds, 0x39ea8c) != 0x00000000)
        goto loc_19a9fb;
    if (memoryAGet32(ds, 0x1e0064) == 0x00000000)
        goto loc_19aabf;
loc_19a9fb: // 0160:19a9fb
    ecx = memoryAGet32(ds, 0x3a1c90);
    if (ecx)
        goto loc_19aabf;
    memoryASet32(ds, 0x1e0064, ecx);
    sub_199b2d();
    eax = 0x001d67ee;
    sub_1ab73d();
    ebx = eax;
    eax = 0;
loc_19aa22: // 0160:19aa22
    eax++;
    dl = memoryAGet(ds, eax + 1927149);
    memoryASet(ds, eax + 1927190, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_19aa22;
    edi = 0x00000001;
    ebp = memoryAGet32(ds, 0x1e00c8);
    memoryASet32(ds, 0x1e009c, edi);
    if (ebp)
        goto loc_19aa4e;
    sub_19b794();
loc_19aa4e: // 0160:19aa4e
    if ((int32_t)memoryAGet32(ds, 0x1e130a) >= (int32_t)0x00000000)
        goto loc_19aa67;
    eax = ebx;
    sub_19995c();
    if (memoryAGet32(ds, 0x1e1306) == 0x00000000)
        goto loc_19aa6c;
loc_19aa67: // 0160:19aa67
    sub_19a76a();
loc_19aa6c: // 0160:19aa6c
    ebx = 0;
    ecx = memoryAGet32(ds, 0x1e3d20);
    memoryASet32(ds, 0x1e009c, ebx);
    if (!ecx)
        goto loc_19aa91;
    ebp = 0x00000063;
    memoryASet32(ds, 0x3a1c60, ebp);
    memoryASet32(ds, 0x1e000c, ebp);
    goto loc_19aaa2;
loc_19aa91: // 0160:19aa91
    esi = 0x00000225;
    memoryASet32(ds, 0x3a1c60, esi);
    memoryASet32(ds, 0x1e000c, esi);
loc_19aaa2: // 0160:19aaa2
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x3a1f00, edx);
    memoryASet32(ds, 0x3a1e78, ebx);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x3a1f04, eax);
loc_19aabf: // 0160:19aabf
    if (memoryAGet32(ds, 0x3a1c90) != 0x00000000)
        goto loc_1979e4;
    esi = memoryAGet32(ds, 0x1e000c);
    esi--;
    memoryASet32(ds, 0x1e000c, esi);
    if (!esi)
        goto loc_19aaf1;
    if (memoryAGet32(ds, 0x39eac0) != 0x00000000)
        goto loc_19aaf1;
    if (memoryAGet(ds, 0x3a9f83) == 0x00)
        goto loc_1979e4;
loc_19aaf1: // 0160:19aaf1
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_19ab28;
    if (memoryAGet32(ds, 0x1e00a8) == 0x00000000)
        goto loc_19ab1c;
    edx = 0x000000ff;
    eax = 0x0000000b;
    ebx = 0;
    sub_19708b();
    memoryASet32(ds, 0x1e00a8, ebx);
    goto loc_19ab37;
loc_19ab1c: // 0160:19ab1c
    edx = 0x000000ff;
    eax = 0x0000000a;
    goto loc_19ab32;
loc_19ab28: // 0160:19ab28
    edx = 0x000000ff;
    eax = memoryAGet32(ds, 0x39eaa8);
loc_19ab32: // 0160:19ab32
    sub_19708b();
loc_19ab37: // 0160:19ab37
    eax = memoryAGet32(ds, 0x3aa13c);
    ecx = 0x00000001;
    edi = 0x00000064;
    ebp = 0x00000002;
    ebx = 0x00000032;
    memoryASet32(ds, 0x3a1f04, eax);
    esi = 0;
    eax = memoryAGet32(ds, 0x3a1cc4);
    memoryASet32(ds, 0x3a1c4a, ecx);
    memoryASet32(ds, 0x1e000c, esi);
    memoryASet32(ds, 0x3a1e78, edi);
    memoryASet32(ds, 0x3a1c60, eax);
    eax = 0x001e46d0;
    memoryASet32(ds, 0x3a1c46, ebp);
    sub_1a57a0();
    memoryASet32(ds, 0x39eaa4, ecx);
    memoryASet32(ds, 0x39ea90, ecx);
    sub_19a852();
    eax = 0x001d6679;
    edx = memoryAGet32(ds, 0x3a1c64);
    sub_19fdc8();
    eax = 0;
loc_19aba6: // 0160:19aba6
    eax++;
    dl = memoryAGet(ds, eax + 1927149);
    memoryASet(ds, eax + 3795571, dl);
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_19aba6;
    ebx = 0x00000019;
    ecx = 0x0000015e;
    memoryASet32(ds, 0x39ea70, ebx);
    memoryASet32(ds, 0x1e00c0, ecx);
    goto loc_1979e4;
}
void sub_19abd3() // 0160:19abd3 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803614) == 0x00000000)
        goto loc_19abee;
    edx = 0x00000019;
    goto loc_19abf3;
loc_19abee: // 0160:19abee
    edx = 0x0000001c;
loc_19abf3: // 0160:19abf3
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x1e1312);
    memoryASet32(ds, 0x1e1376, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e1316);
    memoryASet32(ds, 0x1e137a, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e131a);
    memoryASet32(ds, 0x1e137e, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x1e1322);
    memoryASet32(ds, 0x1e1386, eax);
    edx = pop32();
    esp += 4;
}
void sub_19ac2f() // 0160:19ac2f +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803618) == 0x00000000)
        goto loc_19ac4a;
    edx = 0x00000018;
    goto loc_19ac4f;
loc_19ac4a: // 0160:19ac4a
    edx = 0x0000001b;
loc_19ac4f: // 0160:19ac4f
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x1e1312);
    memoryASet32(ds, 0x1e134e, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e1316);
    memoryASet32(ds, 0x1e1352, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e131a);
    memoryASet32(ds, 0x1e1356, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x1e1322);
    memoryASet32(ds, 0x1e135e, eax);
    edx = pop32();
    esp += 4;
}
void sub_19ac8b() // 0160:19ac8b +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803622) == 0x00000000)
        goto loc_19aca6;
    edx = 0x0000001a;
    goto loc_19acab;
loc_19aca6: // 0160:19aca6
    edx = 0x0000001d;
loc_19acab: // 0160:19acab
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x1e1312);
    memoryASet32(ds, 0x1e13c6, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e1316);
    memoryASet32(ds, 0x1e13ca, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x1e131a);
    memoryASet32(ds, 0x1e13ce, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x1e1322);
    memoryASet32(ds, 0x1e13d6, eax);
    edx = pop32();
    esp += 4;
}
void sub_19ace7() // 0160:19ace7 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    eax = 0;
loc_19acf1: // 0160:19acf1
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3803442, edx);
    memoryASet32(ds, eax + 3803446, edx);
    memoryASet32(ds, eax + 3803450, edx);
    if (eax != 0x00000ac0)
        goto loc_19acf1;
    sub_19ac2f();
    sub_19abd3();
    sub_19ac8b();
    if (memoryAGet32(ds, 0x1e00a4) != 0x00000000)
        goto loc_19ad31;
    eax = 0x001d6fff;
    sub_19fe05();
loc_19ad31: // 0160:19ad31
    edi = 0x00000001;
    ebp = 0xffffffff;
    memoryASet32(ds, 0x1e00a4, edi);
    memoryASet32(ds, 0x3a1656, ebp);
    memoryASet32(ds, 0x3a16aa, ebp);
    memoryASet32(ds, 0x3a16fe, ebp);
    memoryASet32(ds, 0x3a1752, ebp);
    memoryASet32(ds, 0x3a1652, ebp);
    memoryASet32(ds, 0x3a16a6, ebp);
    memoryASet32(ds, 0x3a16fa, ebp);
    memoryASet32(ds, 0x3a174e, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19ad75() // 0160:19ad75 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = memoryAGet32(ds, 0x3a1c68);
    ecx = eax;
    edx = 0x00000001;
    ecx <<= 2;
    esi = memoryAGet32(ds, 0x1e3d20);
    ecx += eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, 0x1e3d20, edx);
    ecx += eax;
    eax = 0;
    goto loc_19adbf;
loc_19ada1: // 0160:19ada1
    edx = memoryAGet32(ds, eax + 1970978);
    edx += ecx;
    if (memoryAGet32(ds, edx * 4 + 0x3a1606) == 0x00000000)
        goto loc_19adbb;
    indirectCall(cs, memoryAGet32(ds, eax + 1970966)); // 0160:19adb3;
    goto loc_19ade6;
loc_19adbb: // 0160:19adbb
    eax += 0x00000014;
    ebx++;
loc_19adbf: // 0160:19adbf
    if ((int32_t)eax < (int32_t)0x0000017c)
        goto loc_19ada1;
    if (ebx != 0x00000013)
        goto loc_19ade6;
    sub_1a03d0();
    ebx = 0x0000003d;
    ecx = 0x001d6b83;
    memoryASet32(ds, 0x3a1d68, ebx);
    memoryASet32(ds, 0x3a1d6c, ecx);
loc_19ade6: // 0160:19ade6
    memoryASet32(ds, 0x1e3d20, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19adf1() // 0160:19adf1 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = 0;
loc_19adf5: // 0160:19adf5
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803442, edx);
    memoryASet32(ds, eax + 3803446, edx);
    memoryASet32(ds, eax + 3803450, edx);
    if (eax != 0x00000ac0)
        goto loc_19adf5;
    sub_19ac2f();
    sub_19abd3();
    sub_19ac8b();
    if (memoryAGet32(ds, 0x1e00a4) == 0x00000000)
        goto loc_19ae3c;
    eax = 0x001d7028;
    sub_19fe05();
    sub_19ad75();
loc_19ae3c: // 0160:19ae3c
    edi = 0;
    memoryASet32(ds, 0x1e00a4, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19ae47() // 0160:19ae47 +long
{
    esp -= 4;
    goto loc_19ae47;
loc_19a6e7: // 0160:19a6e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1882 bytes
loc_19ae47: // 0160:19ae47
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1e0074);
    if (edx)
        goto loc_19aedf;
    eax = memoryAGet32(ds, 0x3aa13c);
    esi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x1e156a, eax);
    eax = esi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e0080, edx);
    memoryASet32(ds, 0x1e0084, edx);
    memoryASet32(ds, 0x1e0090, edx);
    memoryASet32(ds, 0x1e00c0, edx);
    memoryASet32(ds, 0x1e0074, ebp);
    memoryASet32(ds, 0x1e0098, ebp);
    memoryASet32(ds, 0x39ea90, ebp);
    esi = 0xffffffff;
    memoryASet32(ds, eax + 3803550, edx);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x3a1f00, ebp);
    memoryASet32(ds, 0x1e0094, esi);
    memoryASet32(ds, 0x3a1d64, edx);
    memoryASet32(ds, 0x3a1cd0, edx);
    memoryASet32(ds, 0x39eaa4, esi);
    esi = 0x00001400;
    memoryASet32(ds, 0x1e0078, eax);
    memoryASet32(ds, 0x39eab8, esi);
    goto loc_19aef5;
loc_19aedf: // 0160:19aedf
    ebx = 0x00000002;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1e0078, ebx);
    memoryASet32(ds, 0x1e0084, ecx);
loc_19aef5: // 0160:19aef5
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000001e;
    sub_1bda16();
    goto loc_19a6e7;
}
void sub_19af15() // 0160:19af15 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    edx = 0;
    ebp = 0x000000b0;
    memoryASet32(ds, 0x1e00c0, edx);
    memoryASet32(ds, 0x1e0078, edx);
    memoryASet32(ds, 0x1e0074, edx);
    memoryASet32(ds, 0x1e0098, edx);
    memoryASet32(ds, 0x1e0084, edx);
    memoryASet32(ds, 0x1e007c, ebp);
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19af45() // 0160:19af45 +long
{
    esp -= 4;
    goto loc_19af45;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13658 bytes
loc_19af45: // 0160:19af45
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1e0080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1e0094);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1970970);
    edx = memoryAGet32(ds, eax + 1970978);
    if ((int32_t)ebx >= 0)
        goto loc_19af8e;
    if (edx != 0xffffffff)
        goto loc_1979e4;
    if ((int32_t)ebx < 0)
        goto loc_1979e4;
loc_19af8e: // 0160:19af8e
    if (edx == 0xffffffff)
        goto loc_19afb5;
    ebx = memoryAGet32(ds, 0x3a1c68);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 2;
    eax += ebx;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_1979e4;
loc_19afb5: // 0160:19afb5
    ebp = 0x00000002;
    edx = 0x00000032;
    ecx = 0x00000010;
    esi = 0x00000001;
    edi = 0;
    ah = 0;
    memoryASet32(ds, 0x1e00c0, edi);
    memoryASet32(ds, 0x1e0078, ebp);
    memoryASet32(ds, 0x1e0074, edi);
    memoryASet32(ds, 0x3a1e78, edx);
    memoryASet32(ds, 0x1e0084, edi);
    memoryASet32(ds, 0x3a1c78, ecx);
    memoryASet(ds, 0x3a9f71, ah);
    memoryASet32(ds, 0x39ea94, esi);
    ebp = memoryAGet32(ds, 0x1e0004);
    memoryASet32(ds, 0x39eac0, esi);
    if (!ebp)
        goto loc_19b014;
    sub_19ff9b();
    goto loc_19b04b;
loc_19b014: // 0160:19b014
    edx = memoryAGet32(ds, 0x1e0080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1e0094);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1970970) < (int32_t)0x00000000)
        goto loc_19b04b;    
    switch (memoryAGet32(ds, eax + 1970966))
    {
        case 0x19ff9b: sub_19ff9b(); break;
        case 0x1a02c4: sub_1a02c4(); break;
        case 0x19ffae: sub_19ffae(); break;
        case 0x1a0171: sub_1a0171(); break;
        case 0x19ffef: sub_19ffef(); break;
        case 0x1a025b: sub_1a025b(); break;
        case 0x1a010f: sub_1a010f(); break;
        case 0x1a015d: sub_1a015d(); break;
        case 0x1a0008: sub_1a0008(); break;
        case 0x1a003c: sub_1a003c(); break;
        case 0x1a0216: sub_1a0216(); break;
        case 0x1a00b5: sub_1a00b5(); break;
        case 0x1a0074: sub_1a0074(); break;
        case 0x1a009c: sub_1a009c(); break;
        case 0x1a0335: sub_1a0335(); break;
        case 0x1a0311: sub_1a0311(); break;
        case 0x1a0359: sub_1a0359(); break;
        case 0x1a012f: sub_1a012f(); break;
        case 0x1a03b7: sub_1a03b7(); break;
        case 0x1a03d0: sub_1a03d0(); break;
        case 0x1a03f7: sub_1a03f7(); break;
        case 0x1a01d5: sub_1a01d5(); break;
        case 0x1a029c: sub_1a029c(); break;
        case 0x1a0028: sub_1a0028(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, eax + 1970966));
            stop("ind 0160:19b03f");
    }
    memoryASet32(ds, 0x3a1d88, edi);
loc_19b04b: // 0160:19b04b
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000001e;
    sub_1bda16();
    goto loc_1979e4;
}
void sub_19b06b() // 0160:19b06b +long
{
    esp -= 4;
    goto loc_19b06b;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13952 bytes
loc_19b06b: // 0160:19b06b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e156a);
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e156a, edx);
    if (eax)
        goto loc_19b091;
    eax = 0x00000001;
loc_19b091: // 0160:19b091
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, 0x1e0078);
    ecx = memoryAGet32(ds, 0x1e007c);
    ecx += eax;
    memoryASet32(ds, 0x1e007c, ecx);
    if ((int32_t)ecx >= (int32_t)0x00000084)
        goto loc_19b0c1;
    edi = 0;
    ebp = 0x00000084;
    memoryASet32(ds, 0x1e0078, edi);
    memoryASet32(ds, 0x1e007c, ebp);
loc_19b0c1: // 0160:19b0c1
    if ((int32_t)memoryAGet32(ds, 0x1e007c) <= (int32_t)0x000000b0)
        goto loc_19b18c;
    edx = 0x000000b0;
    ebx = memoryAGet32(ds, 0x1e0084);
    memoryASet32(ds, 0x1e007c, edx);
    if (!ebx)
        goto loc_19b114;
    if (memoryAGet32(ds, 0x3a1c60) == 0x00000000)
        goto loc_19b114;
    eax = memoryAGet32(ds, 0x1e0080);
    eax++;
    eax &= 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x1e0080, eax);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x1e0094, edx);
    memoryASet32(ds, 0x1e0078, eax);
    goto loc_19b18c;
loc_19b114: // 0160:19b114
    esi = 0;
    ebp = memoryAGet32(ds, 0x3a1c60);
    memoryASet32(ds, 0x1e0078, esi);
    memoryASet32(ds, 0x1e0098, esi);
    if (ebp)
        goto loc_19b18c;
    ebx = 0x00000032;
    eax = 0x001d6650;
    edi = 0x00000032;
    memoryASet32(ds, 0x1e0074, esi);
    memoryASet32(ds, 0x1e0084, esi);
    memoryASet32(ds, 0x1e0080, esi);
    edx = 0;
    memoryASet32(ds, 0x3a1cc0, esi);
    sub_19fdc8();
    esi = 0x00000001;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1efc, edi);
    memoryASet32(ds, 0x3a1d88, esi);
    memoryASet32(ds, 0x3a1e68, esi);
    sub_19e30a();
    edx = eax;
    eax = 0x0000002d;
    sub_1bda16();
loc_19b18c: // 0160:19b18c
    eax = memoryAGet32(ds, 0x1e156e);
    eax++;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x1e156e, eax);
    eax = memoryAGet32(ds, 0x1e0080);
    edi = 0x00000010;
    ebp = eax;
    esi = eax;
    ebp <<= 2;
    esi <<= 4;
    ebp -= eax;
    esi -= eax;
    ebp <<= 2;
    esi <<= 4;
loc_19b1b8: // 0160:19b1b8
    if ((int32_t)memoryAGet32(ds, esi + 1970970) < (int32_t)0x00000000)
        goto loc_19b21a;
    edx = memoryAGet32(ds, 0x1e0080) * 0x0000000c;
    edx += memoryAGet32(ds, 0x1e0090);
    eax = 0;
    if (ebp != edx)
        goto loc_19b1eb;
    if (memoryAGet32(ds, 0x1e0078) != 0x00000000)
        goto loc_19b1eb;
    if ((int32_t)memoryAGet32(ds, 0x1e156e) >= (int32_t)0x00000008)
        goto loc_19b1eb;
    eax = 0x00003c00;
loc_19b1eb: // 0160:19b1eb
    push32(0x00000140);
    edx = 0x00227890;
    push32(0x00000140);
    ecx = memoryAGet32(ds, 0x1e007c);
    ebx = memoryAGet32(ds, esi + 1970970);
    push32(0x00000018);
    edx += ebx;
    ebx = edi;
    push32(0x00000018);
    eax += edx;
    edx = 0x00289cb0;
    sub_19e0ca();
loc_19b21a: // 0160:19b21a
    esi += 0x00000014;
    edi += 0x00000018;
    ebp++;
    if ((int32_t)edi < (int32_t)0x00000130)
        goto loc_19b1b8;
    goto loc_1979e4;
}
void sub_19b22e() // 0160:19b22e +long
{
    esp -= 4;
    goto loc_19b22e;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14403 bytes
loc_19b22e: // 0160:19b22e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x1e0088) >= (int32_t)0x00000040)
        goto loc_19b247;
    memoryASet32(ds, 0x1e0088, 0x00000040);
loc_19b247: // 0160:19b247
    if ((int32_t)memoryAGet32(ds, 0x1e0088) <= (int32_t)0x000004a0)
        goto loc_19b25d;
    memoryASet32(ds, 0x1e0088, 0x000004a0);
loc_19b25d: // 0160:19b25d
    if ((int32_t)memoryAGet32(ds, 0x1e008c) >= (int32_t)0x00000000)
        goto loc_19b26e;
    ebp = 0;
    memoryASet32(ds, 0x1e008c, ebp);
loc_19b26e: // 0160:19b26e
    if ((int32_t)memoryAGet32(ds, 0x1e008c) <= (int32_t)0x00000048)
        goto loc_19b281;
    memoryASet32(ds, 0x1e008c, 0x00000048);
loc_19b281: // 0160:19b281
    eax = memoryAGet32(ds, 0x1e0088);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x1e008c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, 0x1e007c);
    ebx = 0;
    edi = memoryAGet32(ds, 0x1e0004);
    memoryASet32(ds, 0x39ea80, ebx);
    ecx += eax;
    if (edi)
        goto loc_19b2e0;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000d);
    edx = 0x00289cb0;
    push32(0x00000010);
    eax = 0x00306cb0;
    ebx = esi;
    sub_19e0ca();
loc_19b2e0: // 0160:19b2e0
    edx = esi + -16;
    ecx = 0x00000018;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebp = memoryAGet32(ds, 0x1e0094);
    memoryASet32(ds, 0x1e0090, eax);
    if (eax != ebp)
        goto loc_19b30b;
    if (memoryAGet32(ds, 0x1e001c) == 0x00000000)
        goto loc_19b397;
loc_19b30b: // 0160:19b30b
    eax = memoryAGet32(ds, 0x1e0090);
    edx = memoryAGet32(ds, 0x1e0080);
    memoryASet32(ds, 0x1e0094, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1e0090);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 1970974) != 0x00000000)
        goto loc_19b361;
    ebx = memoryAGet32(ds, eax + 1970978);
    if (ebx == 0xffffffff)
        goto loc_19b361;
    eax = memoryAGet32(ds, eax + 1970962);
    memoryASet32(ds, 0x3a1d68, ebx);
    memoryASet32(ds, 0x3a1d6c, eax);
    sub_19fd41();
loc_19b361: // 0160:19b361
    edx = memoryAGet32(ds, 0x1e0080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x1e0090);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax = memoryAGet32(ds, eax * 4 + 0x1e1312);
    ecx = 0xffffffff;
    sub_19fe05();
    memoryASet32(ds, 0x39eaa4, ecx);
loc_19b397: // 0160:19b397
    esi = memoryAGet32(ds, 0x1e001c);
    if (!esi)
        goto loc_1979e4;
    edi = esi + -1;
    memoryASet32(ds, 0x1e001c, edi);
    goto loc_1979e4;
}
void sub_19b3b3() // 0160:19b3b3 +long
{
    esp -= 4;
    goto loc_19b3b3;
loc_1979e5: // 0160:1979e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14792 bytes
loc_19b3b3: // 0160:19b3b3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = memoryAGet32(ds, 0x39ea70);
    ebx = memoryAGet32(ds, eax * 4 + 0x1e379a);
    if (!edx)
        goto loc_19b3e4;
    ecx = edx + -1;
    memoryASet32(ds, 0x39ea70, ecx);
loc_19b3e4: // 0160:19b3e4
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1979e5;
    if (memoryAGet32(ds, 0x1e12f2) != 0x00000000)
        goto loc_1979e5;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    al = (int32_t)eax > (int32_t)0x00000200;
    edx = memoryAGet32(ds, 0x39ea8c);
    eax &= 0x000000ff;
    if (!edx)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x39ea70) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e0078) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e15fc) == 0x00000003)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1e88) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1e80) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1c78) != 0x00000010)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x1e3c68) != 0x00000000)
        goto loc_19b4d2;
    if (ebx != 0x00000003)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1d2c) == 0x00000002)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1d0c) != 0x00000000)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_19b4d2;
    if (eax)
        goto loc_19b4d2;
    if (memoryAGet32(ds, 0x3a1d18) != 0x00000000)
        goto loc_19b4d2;
    sub_19ae47();
loc_19b4d2: // 0160:19b4d2
    if (memoryAGet32(ds, 0x1e0074) != 0x00000000)
        goto loc_19b4e4;
    if (memoryAGet32(ds, 0x1e0078) == 0x00000000)
        goto loc_19b4e9;
loc_19b4e4: // 0160:19b4e4
    sub_19b06b();
loc_19b4e9: // 0160:19b4e9
    if (memoryAGet32(ds, 0x1e007c) != 0x00000084)
        goto loc_1979e5;
    sub_19b22e();
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_19b515;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b515;
    sub_19af45();
loc_19b515: // 0160:19b515
    esi = memoryAGet32(ds, 0x3a1c60);
    if (esi)
        goto loc_1979e5;
    edi = 0x00000002;
    memoryASet32(ds, 0x1e0074, esi);
    memoryASet32(ds, 0x1e0078, edi);
    goto loc_1979e5;
}
void sub_19b539() // 0160:19b539 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x1e0010);
    if (edx != 0x00000002)
        goto loc_19b5a5;
    if (memoryAGet32(ds, 0x1e0038) == 0x00000000)
        goto loc_19b574;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ecx = eax;
    ebx = edx;
    push32(0x0000000d);
    edx = 0x00289cb0;
    eax = 0x00311f80;
    sub_19e0ca();
loc_19b574: // 0160:19b574
    if (memoryAGet32(ds, 0x1e0044) == 0x00000000)
        goto loc_19b66f;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ebx = 0x00000131;
    edx = 0x00289cb0;
    push32(0x0000000d);
    eax = 0x00311f80;
    ecx = esi;
    goto loc_19b66a;
loc_19b5a5: // 0160:19b5a5
    if ((int32_t)edx < (int32_t)0x00000003)
        goto loc_19b66f;
    if (memoryAGet32(ds, 0x1e0038) == 0x00000000)
        goto loc_19b5dc;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    ecx = eax + -1;
    push32(0x00000008);
    edx = 0x00289cb0;
    eax = 0x00311f90;
    sub_19e0ca();
loc_19b5dc: // 0160:19b5dc
    if (memoryAGet32(ds, 0x1e0050) == 0x00000000)
        goto loc_19b60a;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    edx = 0x00289cb0;
    push32(0x00000008);
    eax = 0x00311f90;
    ecx = esi + 7;
    sub_19e0ca();
loc_19b60a: // 0160:19b60a
    if (memoryAGet32(ds, 0x1e0044) == 0x00000000)
        goto loc_19b638;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x00289cb0;
    push32(0x00000008);
    eax = 0x00311f90;
    ecx = esi + -1;
    sub_19e0ca();
loc_19b638: // 0160:19b638
    if (memoryAGet32(ds, 0x1e0010) != 0x00000004)
        goto loc_19b66f;
    if (memoryAGet32(ds, 0x1e005c) == 0x00000000)
        goto loc_19b66f;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x00289cb0;
    push32(0x00000008);
    eax = 0x00311f90;
    ecx = esi + 7;
loc_19b66a: // 0160:19b66a
    sub_19e0ca();
loc_19b66f: // 0160:19b66f
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b674() // 0160:19b674 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if ((int32_t)memoryAGet32(ds, 0x1e3998) < (int32_t)0x00000000)
        goto loc_19b705;
    if (memoryAGet32(ds, 0x1e009c) != 0x00000000)
        goto loc_19b6db;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x00000049;
    push32(0x00000080);
    edx = 0x00289cb0;
    eax = 0x0030af30;
    sub_19e0ca();
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x000000c9;
    push32(0x0000002e);
    edx = 0x00289cb0;
    eax = 0x00316f50;
    goto loc_19b700;
loc_19b6db: // 0160:19b6db
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x0000004c;
    push32(0x000000a8);
    edx = 0x00289cb0;
    eax = 0x003164e0;
loc_19b700: // 0160:19b700
    sub_19e0ca();
loc_19b705: // 0160:19b705
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b709() // 0160:19b709 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e1572);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x1e1572, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x1e3d20);
    memoryASet32(ds, 0x1e1572, ebx);
    if (!ecx)
        goto loc_19b790;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b790;
    if (memoryAGet32(ds, 0x1e0018) != 0x00000000)
        goto loc_19b790;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_19b769;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x00289cb0;
    eax = 0x002e1380;
    goto loc_19b78b;
loc_19b769: // 0160:19b769
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x00289cb0;
    eax = 0x002e1d80;
loc_19b78b: // 0160:19b78b
    sub_19e0ca();
loc_19b790: // 0160:19b790
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19b794() // 0160:19b794 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    memoryASet32(ds, 0x1e00c4, 0x00000001);
    sub_19dc7f();
    sub_197f02();
    sub_1b1154();
    sub_1b2e2b();
    sub_1b23ba();
    sub_1ae345();
    sub_1b3f20();
    sub_1ae669();
    sub_1ae3f2();
    sub_1ae5f9();
    sub_1b6b6f();
    sub_1a54e5();
    sub_1b490d();
    sub_1b10e2();
    sub_1b326b();
    sub_1b3517();
    sub_1afb8f();
    sub_1b3931();
    sub_19e075();
    if (memoryAGet32(ds, 0x3a1d88) != 0x00000000)
        goto loc_19b820;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b820;
    if ((int32_t)memoryAGet32(ds, 0x1e3998) < (int32_t)0x00000000)
        goto loc_19b820;
    sub_197f93();
loc_19b820: // 0160:19b820
    sub_19b3b3();
    sub_1b5af4();
    sub_199382();
    if (memoryAGet32(ds, 0x39ea90) == 0x00000002)
        goto loc_19b875;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b875;
    if (memoryAGet32(ds, 0x1e0078) != 0x00000000)
        goto loc_19b875;
    eax = memoryAGet32(ds, 0x39eab8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 7;
    edx = 0x00296230;
    eax += 0x00217290;
    sub_1c8c83();
loc_19b875: // 0160:19b875
    if (memoryAGet32(ds, 0x1e000c) == 0x00000000)
        goto loc_19b88c;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19b88c;
    sub_19b674();
loc_19b88c: // 0160:19b88c
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_19b8a4;
    edx = 0x00000120;
    eax = 0x001e4ad0;
    sub_199079();
loc_19b8a4: // 0160:19b8a4
    sub_19a6ed();
    sub_19b709();
    sub_19ca7d();
    sub_1ab16d();
    sub_197f65();
    if (memoryAGet32(ds, 0x1e12f2) == 0x00000000)
        goto loc_19b8cb;
    sub_19a46a();
loc_19b8cb: // 0160:19b8cb
    sub_1a57ba();
    if (memoryAGet32(ds, 0x39eabc) == 0x00000000)
        goto loc_19b94a;
    edx = 0x00289cb0;
    eax = 0x00271b10;
    ebx = 0x000000f0;
    sub_19917f();
    edx = memoryAGet32(ds, 0x39eacc);
    eax = 0x002978b0;
    edx += 0x000a3700;
    sub_1c8af1();
    edx = 0x00289cb0;
    eax = 0x00271a70;
    ebx = 0x000000f0;
    sub_198bd3();
    edx = memoryAGet32(ds, 0x39eacc);
    eax = 0x00298670;
    edx += 0x000a3a70;
    sub_1c8af1();
    edx = memoryAGet32(ds, 0x39eacc);
    eax = 0x00289cb0;
    edx += 0x000a0000;
    sub_1c880b();
    sub_19cc1b();
    goto loc_19b977;
loc_19b94a: // 0160:19b94a
    edx = 0x000a0000;
    eax = 0x00271b10;
    sub_19917f();
    edx = 0x000a0000;
    eax = 0x00271a70;
    sub_198bd3();
    edx = 0x000a0000;
    eax = 0x00289cb0;
    sub_1c84e8();
loc_19b977: // 0160:19b977
    ebp = 0;
    memoryASet32(ds, 0x1e00c4, ebp);
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19bafa() // 0160:19bafa +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_19bafd: // 0160:19bafd
    edx++;
    sub_1a5625();
    if ((int32_t)edx < (int32_t)0x00000019)
        goto loc_19bafd;
    eax = 0;
loc_19bb0a: // 0160:19bb0a
    eax++;
    dl = 0;
    memoryASet(ds, eax + 3924211, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_19bb0a;
    edx = 0;
    memoryASet32(ds, 0x3a1f04, edx);
    memoryASet32(ds, 0x3aa13c, edx);
    edx = pop32();
    esp += 4;
}
void sub_19bb2a() // 0160:19bb2a +long
{
    esp -= 4;
    goto loc_19bb2a;
loc_199549: // 0160:199549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9691 bytes
loc_19bb2a: // 0160:19bb2a
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e0098) == 0x00000000)
        goto loc_19bb6e;
    eax = memoryAGet32(ds, 0x39eac8);
    ebx = memoryAGet32(ds, 0x39eab0); // delta
    ecx = memoryAGet32(ds, 0x1e0088);
    eax -= ebx;
    esi = memoryAGet32(ds, 0x39eab4);
    ecx += eax;
    eax = memoryAGet32(ds, 0x39eac4);
    edi = memoryAGet32(ds, 0x1e008c);
    eax -= esi;
    edi += eax;
    memoryASet32(ds, 0x1e0088, ecx); // mouse select weapon
    memoryASet32(ds, 0x1e008c, edi);
loc_19bb6e: // 0160:19bb6e
    if (memoryAGet32(ds, 0x3a1cd0) == 0x00000000)
        goto loc_199549;
    if (memoryAGet32(ds, 0x3a1d88) != 0x00000000)
        goto loc_199549;
    eax = memoryAGet32(ds, 0x39eac8);
    eax -= memoryAGet32(ds, 0x39eab0);
    ebx = memoryAGet32(ds, 0x3a1cd4);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x39eab4);
    ebx += eax;
    eax = memoryAGet32(ds, 0x39eac4);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x3a1cd8);
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x3a1cd4, ebx);
    memoryASet32(ds, 0x3a1cd8, esi);
    if ((int32_t)ebx >= 0)
        goto loc_19bbce;
    ebp = 0;
    memoryASet32(ds, 0x3a1cd4, ebp);
loc_19bbce: // 0160:19bbce
    if ((int32_t)memoryAGet32(ds, 0x3a1cd4) <= (int32_t)0x00000ed4)
        goto loc_19bbe4;
    memoryASet32(ds, 0x3a1cd4, 0x00000ed4);
loc_19bbe4: // 0160:19bbe4
    if ((int32_t)memoryAGet32(ds, 0x3a1cd8) >= (int32_t)0x00000020)
        goto loc_19bbf7;
    memoryASet32(ds, 0x3a1cd8, 0x00000020);
loc_19bbf7: // 0160:19bbf7
    if ((int32_t)memoryAGet32(ds, 0x3a1cd8) <= (int32_t)0x00000600)
        goto loc_19bc0d;
    memoryASet32(ds, 0x3a1cd8, 0x00000600);
loc_19bc0d: // 0160:19bc0d
    if (memoryAGet32(ds, 0x3a1d64) == 0x00000000)
        goto loc_199549;
    if ((int32_t)memoryAGet32(ds, 0x3a1cd8) >= (int32_t)0x000000a8)
        goto loc_19bc30;
    memoryASet32(ds, 0x3a1cd8, 0x000000a8);
loc_19bc30: // 0160:19bc30
    eax = memoryAGet32(ds, 0x3a1cd4);
    eax -= memoryAGet32(ds, 0x3a1f14);
    if ((int32_t)eax <= (int32_t)0x00000480)
        goto loc_19bc51;
    eax = memoryAGet32(ds, 0x3a1cd4);
    eax -= 0x00000480;
    memoryASet32(ds, 0x3a1f14, eax);
loc_19bc51: // 0160:19bc51
    eax = memoryAGet32(ds, 0x3a1cd4);
    eax -= memoryAGet32(ds, 0x3a1f14);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_19bc72;
    eax = memoryAGet32(ds, 0x3a1cd4);
    eax -= 0x00000080;
    memoryASet32(ds, 0x3a1f14, eax);
loc_19bc72: // 0160:19bc72
    eax = memoryAGet32(ds, 0x3a1cd8);
    eax -= memoryAGet32(ds, 0x3a1f18);
    if ((int32_t)eax <= (int32_t)0x00000220)
        goto loc_19bc93;
    eax = memoryAGet32(ds, 0x3a1cd8);
    eax -= 0x00000220;
    memoryASet32(ds, 0x3a1f18, eax);
loc_19bc93: // 0160:19bc93
    eax = memoryAGet32(ds, 0x3a1cd8);
    eax -= memoryAGet32(ds, 0x3a1f18);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_199549;
    eax = memoryAGet32(ds, 0x3a1cd8);
    eax -= 0x00000080;
    memoryASet32(ds, 0x3a1f18, eax);
    goto loc_199549;
}
void sub_19bcbd() // 0160:19bcbd +long
{
    esp -= 4;
    goto loc_19bcbd;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17106 bytes
loc_19bcbd: // 0160:19bcbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0x00078000;
    ebp = 0x00032000;
    edx = memoryAGet32(ds, 0x1e0004);
    esi = 0;
    ecx = 0;
    if (edx)
        goto loc_1979e4;
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_1979e4;
    eax = memoryAGet32(ds, 0x39eab0);
    eax -= memoryAGet32(ds, 0x39eac8);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000040)
        goto loc_19bd1c;
    eax = memoryAGet32(ds, 0x39eab4);
    eax -= memoryAGet32(ds, 0x39eac4);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000040)
        goto loc_19bd26;
loc_19bd1c: // 0160:19bd1c
    memoryASet32(ds, 0x1e3ac0, 0x00000064);
loc_19bd26: // 0160:19bd26
    edx = memoryAGet32(ds, 0x1e3ac0);
    if (!edx)
        goto loc_19bd39;
    ebx = edx + -1 + random()%10;
    memoryASet32(ds, 0x1e3ac0, ebx);
loc_19bd39: // 0160:19bd39
    if (memoryAGet32(ds, 0x1e36dc) == 0x00000000)
        goto loc_1979e4;
    if (memoryAGet32(ds, 0x1e3ac0) != 0x00000000)
        goto loc_1979e4;
    ebx = 0;
loc_19bd55: // 0160:19bd55
    if (memoryAGet32(ds, ebx + 3803486) != 0x00000000)
        goto loc_19bd82;
    eax = memoryAGet32(ds, ebx + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_19bd82;
    if (memoryAGet32(ds, ebx + 3803526) != 0x00000000)
        goto loc_19bd82;
    if (memoryAGet32(ds, ebx + 3803474) != 0x0000000a)
        goto loc_19bd89;
loc_19bd82: // 0160:19bd82
    eax = 0x00000001;
    goto loc_19bd8b;
loc_19bd89: // 0160:19bd89
    eax = 0;
loc_19bd8b: // 0160:19bd8b
    edx = memoryAGet32(ds, ebx + 3803494);
    if (!edx)
        goto loc_19bdc3;
    if (!eax)
        goto loc_19bdc3;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_19bd9f;
    edi = edx;
loc_19bd9f: // 0160:19bd9f
    edx = memoryAGet32(ds, ebx + 3803494);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19bdab;
    esi = edx;
loc_19bdab: // 0160:19bdab
    eax = memoryAGet32(ds, ebx + 3803498);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19bdb7;
    ebp = eax;
loc_19bdb7: // 0160:19bdb7
    edx = memoryAGet32(ds, ebx + 3803498);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19bdc3;
    ecx = edx;
loc_19bdc3: // 0160:19bdc3
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_19bd55;
    eax = memoryAGet32(ds, 0x3a1b56);
    ebx = 0;
    if (!eax)
        goto loc_19be33;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_19bde2;
    edi = eax;
loc_19bde2: // 0160:19bde2
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 3808086);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19bdfd;
    esi = edx;
loc_19bdfd: // 0160:19bdfd
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 3808090);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_19be18;
    ebp = edx;
loc_19be18: // 0160:19be18
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3808090);
    if ((int32_t)ecx >= (int32_t)ebx)
        goto loc_19be33;
    ecx = ebx;
loc_19be33: // 0160:19be33
    ebx = 0;
loc_19be35: // 0160:19be35
    if (memoryAGet32(ds, ebx + 3802606) == 0x00000000)
        goto loc_19bebf;
    eax = memoryAGet32(ds, ebx + 3802622);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (eax & 0xfffffe00)
        goto loc_19be66;
    eax = memoryAGet32(ds, ebx + 3802626);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xfffffe00))
        goto loc_19be6d;
loc_19be66: // 0160:19be66
    eax = 0x00000001;
    goto loc_19be6f;
loc_19be6d: // 0160:19be6d
    eax = 0;
loc_19be6f: // 0160:19be6f
    if (eax)
        goto loc_19be7c;
    if ((int32_t)memoryAGet32(ds, ebx + 3802638) <= (int32_t)0x00000000)
        goto loc_19bebf;
loc_19be7c: // 0160:19be7c
    if (memoryAGet32(ds, ebx + 3802638) != 0x00000000)
        goto loc_19be8f;
    memoryASet32(ds, ebx + 3802638, 0x00000007);
loc_19be8f: // 0160:19be8f
    eax = memoryAGet32(ds, ebx + 3802606);
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_19be9b;
    edi = eax;
loc_19be9b: // 0160:19be9b
    edx = memoryAGet32(ds, ebx + 3802606);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19bea7;
    esi = edx;
loc_19bea7: // 0160:19bea7
    eax = memoryAGet32(ds, ebx + 3802610);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19beb3;
    ebp = eax;
loc_19beb3: // 0160:19beb3
    edx = memoryAGet32(ds, ebx + 3802610);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19bebf;
    ecx = edx;
loc_19bebf: // 0160:19bebf
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_19be35;
    ebx = 0;
loc_19bed0: // 0160:19bed0
    eax = memoryAGet32(ds, ebx + 3802374);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (eax & 0xffffff00)
        goto loc_19bef4;
    eax = memoryAGet32(ds, ebx + 3802378);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xffffff00))
        goto loc_19befb;
loc_19bef4: // 0160:19bef4
    eax = 0x00000001;
    goto loc_19befd;
loc_19befb: // 0160:19befb
    eax = 0;
loc_19befd: // 0160:19befd
    edx = memoryAGet32(ds, ebx + 3802366);
    if (!edx)
        goto loc_19bf35;
    if (!eax)
        goto loc_19bf35;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_19bf11;
    edi = edx;
loc_19bf11: // 0160:19bf11
    edx = memoryAGet32(ds, ebx + 3802366);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_19bf1d;
    esi = edx;
loc_19bf1d: // 0160:19bf1d
    eax = memoryAGet32(ds, ebx + 3802370);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_19bf29;
    ebp = eax;
loc_19bf29: // 0160:19bf29
    edx = memoryAGet32(ds, ebx + 3802370);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_19bf35;
    ecx = edx;
loc_19bf35: // 0160:19bf35
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_19bed0;
    if ((int32_t)edi > (int32_t)esi)
        goto loc_1979e4;
    if ((int32_t)ebp > (int32_t)ecx)
        goto loc_1979e4;
    edx = edi + esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    edx = ecx + ebp;
    memoryASet32(ds, 0x3a1f14, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001a0;
    memoryASet32(ds, 0x3a1f18, eax);
    goto loc_1979e4;
}
void sub_19c025() // 0160:19c025 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    eax = 0;
loc_19c029: // 0160:19c029
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_19c058;
    if (memoryAGet32(ds, eax + 3803594) != 0x00000000)
        goto loc_19c058;
    edx = memoryAGet32(ds, eax + 3803570);
    edx -= memoryAGet32(ds, eax + 3803574);
    if ((int32_t)edx <= 0)
        goto loc_19c058;
    edx = memoryAGet32(ds, eax + 3803570);
    edx--;
    memoryASet32(ds, eax + 3803574, edx);
loc_19c058: // 0160:19c058
    eax += 0x000000ac;
    if (eax != 0x00000ac0)
        goto loc_19c029;
    sub_1a4e56();
    esi = 0;
    sub_198f43();
    memoryASet32(ds, 0x3a1ef8, esi);
    memoryASet32(ds, 0x1e0014, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19c07f() // 0160:19c07f +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_1cba0f();
    edx = eax;
    edx &= 0x0000ffff;
    eax <<= 16;
    eax |= edx;
    sub_1ab6eb();
    sub_199b2d();
    edx = pop32();
    esp += 4;
}
void sub_19c0a0() // 0160:19c0a0 +long
{
    esp -= 4;
    goto loc_19c0a0;
loc_1979e4: // 0160:1979e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18101 bytes
loc_19c0a0: // 0160:19c0a0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1973d4();
    sub_19c07f();
    sub_19ca3d();
    sub_1bfa50();
    edx = memoryAGet32(ds, 0x1e366c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    sub_1bda89();
    eax = 0x00000013;
    sub_19ccc3();
    eax = 0;
    edx = 0x00000001;
    sub_1a566f();
    sub_19cb1f();
    sub_19c608();
    sub_19c76f();
    sub_19a107();
    sub_19bafa();
    sub_197ccc();
    sub_19a107();
    sub_1972f1();
    memoryASet32(ds, 0x1dfffc, edx);
    memoryASet32(ds, 0x1e0000, edx);
    memoryASet32(ds, 0x1e000c, edx);
    memoryASet32(ds, 0x39eac0, edx);
    memoryASet32(ds, 0x3aa13c, edx);
    eax = 0;
    edx = 0x00000028;
    memoryASet32(ds, 0x3a1f04, eax);
    memoryASet32(ds, 0x1dfff4, edx);
loc_19c147: // 0160:19c147
    eax++;
    dl = 0;
    memoryASet(ds, eax + 3794543, dl);
    memoryASet(ds, eax + 3924211, dl);
    if ((int32_t)eax < (int32_t)0x000002c0)
        goto loc_19c147;
    ebx = 0x0039e670;
    eax = 0;
    memoryASet32(ds, 0x1e36f8, ebx);
    //sub_1a593a(); // GABO CHECK!
    ebx = 0x00000046;
    edx = 0;
loc_19c176: // 0160:19c176
    sub_1a56f1();
    if (eax)
        goto loc_19c3b1;
    if (dl == memoryAGet(ds, 0x3aa070))
        goto loc_19c197;
    if (dl != memoryAGet(ds, 0x3aa065))
        goto loc_19c3b1;
loc_19c197: // 0160:19c197
    eax = memoryAGet32(ds, 0x3a1f04);
loc_19c19c: // 0160:19c19c
    memoryASet32(ds, 0x3aa13c, memoryAGet32(ds, 0x3aa13c)+2);
    sync();
    if (eax == memoryAGet32(ds, 0x3aa13c))
        goto loc_19c19c;
    sub_19a56b();
    if (edx == memoryAGet32(ds, 0x1dfffc))
        goto loc_19c1d6;
    edi = 0x00000001;
    eax = 0x00000019;
    memoryASet32(ds, 0x1e000c, edi);
    memoryASet32(ds, 0x39ea70, eax);
    eax = memoryAGet32(ds, 0x1e0060);
    memoryASet32(ds, 0x39ea8c, edi);
    sub_19a8c0();
loc_19c1d6: // 0160:19c1d6
    eax = memoryAGet32(ds, 0x3a1f04);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_19c1ed;
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x3a1f04, eax);
loc_19c1ed: // 0160:19c1ed
    eax = memoryAGet32(ds, 0x3a1f04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_19c1ff;
    sub_19c3e0();
loc_19c1ff: // 0160:19c1ff
    eax = memoryAGet32(ds, 0x3a1f04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_19c37b;
    esi = memoryAGet32(ds, 0x1e12f2);
    if (edx != esi)
        goto loc_19c361;
    edi = memoryAGet32(ds, 0x1e0004);
    if (esi != edi)
        goto loc_19c361;
    ebp = memoryAGet32(ds, 0x3a1efc);
    if (edi == ebp)
        goto loc_19c23e;
    eax = ebp + -1;
    memoryASet32(ds, 0x3a1efc, eax);
loc_19c23e: // 0160:19c23e
    if (edx == memoryAGet32(ds, 0x3a1c60))
        goto loc_19c27a;
    esi = memoryAGet32(ds, 0x3a1d88);
    if (edx != esi)
        goto loc_19c27a;
    edi = memoryAGet32(ds, 0x3a1d74);
    if (esi != edi)
        goto loc_19c27a;
    ebp = memoryAGet32(ds, 0x1e0004);
    if (edi != ebp)
        goto loc_19c27a;
    if (ebx == memoryAGet32(ds, 0x1e3658))
        goto loc_19c27a;
    if (ebp != memoryAGet32(ds, 0x3a1e78))
        goto loc_19c27a;
    memoryASet32(ds, 0x3a1c60, memoryAGet32(ds, 0x3a1c60) - 1);
loc_19c27a: // 0160:19c27a
    if (ebx != memoryAGet32(ds, 0x1e3658))
        goto loc_19c298;
    if (edx == memoryAGet32(ds, 0x1e000c))
        goto loc_19c298;
    if (edx != memoryAGet32(ds, 0x1e0004))
        goto loc_19c298;
    memoryASet32(ds, 0x3a1c60, memoryAGet32(ds, 0x3a1c60) - 1);
loc_19c298: // 0160:19c298
    esi = memoryAGet32(ds, 0x3a1c6c);
    if (edx == esi)
        goto loc_19c2ab;
    edi = esi + -1;
    memoryASet32(ds, 0x3a1c6c, edi);
loc_19c2ab: // 0160:19c2ab
    sub_1a8998();
    sub_1ada58();
    sub_19df50();
    sub_1bb9cd();
    sub_19bcbd();
    sub_19ddd3();
    sub_198a6a();
    if (edx != memoryAGet32(ds, 0x3a1c90))
        goto loc_19c2db;
    sub_1a1797();
loc_19c2db: // 0160:19c2db
    sub_1a4f22();
    sub_1a2682();
    sub_1b2f43();
    sub_1b2930();
    sub_197e44();
    sub_1b0a50();
    sub_1b3e07();
    sub_1ae62f();
    sub_1af62c();
    sub_1b36d6();
    sub_1b32e0();
    sub_1b446a();
    sub_19a305();
    sub_1b538a();
    sub_1b7208();
    sub_1b6909();
    if (edx != memoryAGet32(ds, 0x3a1c90))
        goto loc_19c338;
    sub_19a36c();
loc_19c338: // 0160:19c338
    sub_19efad();
    eax = memoryAGet32(ds, 0x1e0060);
    sub_19a8c0();
    sub_19bb2a();
    ecx = memoryAGet32(ds, 0x39ead0);
    if (edx == ecx)
        goto loc_19c36b;
    esi = ecx + -1;
    memoryASet32(ds, 0x39ead0, esi);
    goto loc_19c36b;
loc_19c361: // 0160:19c361
    sub_19a36c();
    sub_198a6a();
loc_19c36b: // 0160:19c36b
    sub_19c3f9();
    memoryASet32(ds, 0x3a1f04, memoryAGet32(ds, 0x3a1f04) + 1);
    goto loc_19c1ff;
loc_19c37b: // 0160:19c37b
    if ((int32_t)edx < (int32_t)memoryAGet32(ds, 0x39ead0))
        goto loc_19c388;
    sub_197059();
loc_19c388: // 0160:19c388
    sub_19b794();
    if (edx == memoryAGet32(ds, 0x1e0014))
        goto loc_19c3a2;
    if (edx != memoryAGet32(ds, 0x1e0004))
        goto loc_19c3a2;
    sub_19c025();
loc_19c3a2: // 0160:19c3a2
    sub_199b95();
    sub_197336();
    goto loc_19c176;
loc_19c3b1: // 0160:19c3b1
    eax = 0x00000003;
    sub_19ccc3();
    sub_19c7d3();
    sub_19c687();
    sub_1bdb87();
    edx = 0;
    sub_1bfd80();
    sub_197010();
    sub_1bfd2f();
    goto loc_1979e4;
}
void sub_19c3e0() // 0160:19c3e0 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_19c3e3: // 0160:19c3e3
    eax++;
    dl = memoryAGet(ds, eax + 3842103);
    memoryASet(ds, eax + 3841847, dl);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_19c3e3;
    edx = pop32();
    esp += 4;
}
void sub_19c3f9() // 0160:19c3f9 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x39eab0);
    memoryASet32(ds, 0x39eac8, eax);
    eax = memoryAGet32(ds, 0x39eab4);
    memoryASet32(ds, 0x39eac4, eax);
    esp += 4;
}
void sub_19c40e() // 0160:19c40e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, eax);
    ebx = 0;
    bl = memoryAGet(ds, edx);
    edx++;
    edi = ebx;
    ecx = ebx;
    edi >>= 7;
    ecx >>= 5;
    ebx &= 0x0000001f;
    memoryASet32(ds, eax, edx);
    edi &= 0x00000001;
    ecx &= 0x00000003;
loc_19c42f: // 0160:19c42f
    ecx--;
    if (ecx == 0xffffffff)
        goto loc_19c444;
    edx = memoryAGet32(ds, eax);
    ebx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ebx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_19c42f;
loc_19c444: // 0160:19c444
    eax = edi;
    ebx++;
    eax <<= 31;
    eax |= ebx;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c452() // 0160:19c452 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, eax);
    ecx = 0;
    cl = memoryAGet(ds, edx);
    ebx = ecx;
    edx++;
    ebx >>= 6;
    ecx &= 0x0000003f;
    memoryASet32(ds, eax, edx);
    ebx &= 0x00000003;
loc_19c46a: // 0160:19c46a
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_19c47f;
    edx = memoryAGet32(ds, eax);
    ecx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ecx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_19c46a;
loc_19c47f: // 0160:19c47f
    eax = ecx + 1;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c487() // 0160:19c487 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    edx = 0;
    ecx = eax + ebx;
    goto loc_19c4a7;
loc_19c494: // 0160:19c494
    ebx = edx;
    ebx >>= 31;
    edx += edx;
    ebx &= 0x00000001;
    ebx |= edx;
    edx = 0;
    dl = memoryAGet(ds, eax);
    eax++;
    edx ^= ebx;
loc_19c4a7: // 0160:19c4a7
    if (eax < ecx)
        goto loc_19c494;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c4b0() // 0160:19c4b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    esi = edx;
    ebp = memoryAGet32(ds, eax + 4);
    memoryASet(ds, eax + 4, 0x00);
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, eax + 8);
    ebx += 0x0000000c;
    esi = edx + edi;
    memoryASet32(ds, esp, ebx);
loc_19c4ce: // 0160:19c4ce
    if (edx >= esi)
        goto loc_19c518;
    eax = esp;
    sub_19c40e();
    ebx = eax;
    if (!(eax & 0x80000000))
        goto loc_19c503;
    eax = esp;
    ecx = edx;
    sub_19c452();
    ecx -= eax;
    ebx &= 0x7fffffff;
    eax = ecx;
loc_19c4f5: // 0160:19c4f5
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_19c4ce;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, cl);
    edx++;
    goto loc_19c4f5;
loc_19c503: // 0160:19c503
    if (!eax)
        goto loc_19c4ce;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx + 1;
    memoryASet32(ds, esp, ecx);
    bl = memoryAGet(ds, ebx);
    eax--;
    memoryASet(ds, edx, bl);
    edx++;
    goto loc_19c503;
loc_19c518: // 0160:19c518
    eax = esi;
    edx = edi;
    eax -= edi;
    sub_19c487();
    if (eax == ebp)
        goto loc_19c540;
    push32(eax);
    push32(ebp);
    push32(0x001d53c4);
    sub_1cbd1e();
    esp += 0x0000000c;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c540: // 0160:19c540
    eax = edi;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c54b() // 0160:19c54b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = 0x00000036;
    eax = 0x00000043;
    sub_1cbd6f();
    edx = ebx;
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_1cbd6f();
    edx = ebx;
    edx = sar32(edx, 0x08);
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_1cbd6f();
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c608() // 0160:19c608 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    memoryASet32(ds, 0x3aa150, 0x0000b1c7);
    ebx = 0;
    memoryASet32(ds, 0x3aa144, ebx);
    memoryASet32(ds, 0x3aa154, 0x00004111);
    memoryASet32(ds, 0x3aa148, ebx);
    edi = 0x0019c58b;
    memoryASet16(ds, 0x3aa162, cs);
    memoryASet32(ds, 0x3aa15e, edi);
    memoryASet32(ds, 0x3aa140, ebx);
    memoryASet32(ds, 0x3aa13c, ebx);
    eax = 0x00000008;
    sub_1cbd97();
    cx = memoryAGet16(ds, 0x3aa162);
    ebx = memoryAGet32(ds, 0x3aa15e);
    memoryASet32(ds, 0x3aa164, eax);
    eax = 0x00000008;
    memoryASet16(ds, 0x3aa168, dx);
    sub_1cbdcb();
    eax = 0x000040a2;
    sub_19c54b();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c687() // 0160:19c687 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000008;
    cx = memoryAGet16(ds, 0x3aa168);
    ebx = memoryAGet32(ds, 0x3aa164);
    sub_1cbdcb();
    eax = 0;
    sub_19c54b();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c6aa() // 0160:19c6aa +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x3aa138);
    memoryASet32(ds, 0x3aa14c, eax);
    esp += 4;
}
void sub_19c6b5() // 0160:19c6b5 +long
{
    esp -= 4;
    push32(edx);
    al = 0;
    edx = memoryAGet32(ds, 0x3aa138);
    if (edx == memoryAGet32(ds, 0x3aa14c))
        goto loc_19c6d7;
    eax = memoryAGet32(ds, 0x3aa138);
    memoryASet32(ds, 0x3aa138, memoryAGet32(ds, 0x3aa138) + 1);
    al = memoryAGet(ds, eax + 3809064);
loc_19c6d7: // 0160:19c6d7
    memoryASet32(ds, 0x3aa138, memoryAGet32(ds, 0x3aa138) & 0x0000000f);
    edx = pop32();
    esp += 4;
}
void sub_19c76f() // 0160:19c76f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x00000100;
    eax = 0x003aa038;
    edx = 0;
    sub_1cbe00();
    edx = 0;
    memoryASet32(ds, 0x3aa14c, edx);
    memoryASet32(ds, 0x3aa138, edx);
    ecx = 0x0019c6e0;
    eax = 0x00000009;
    memoryASet16(ds, 0x3aa15c, cs);
    memoryASet32(ds, 0x3aa158, ecx);
    sub_1cbd97();
    cx = memoryAGet16(ds, 0x3aa15c);
    ebx = memoryAGet32(ds, 0x3aa158);
    memoryASet32(ds, 0x3aa16a, eax);
    eax = 0x00000009;
    memoryASet16(ds, 0x3aa16e, dx);
    sub_1cbdcb();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c7d3() // 0160:19c7d3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000009;
    cx = memoryAGet16(ds, 0x3aa16e);
    ebx = memoryAGet32(ds, 0x3aa16a);
    sub_1cbdcb();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c7ef() // 0160:19c7ef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x001d53ed;
    sub_1cc03a();
    ecx = eax;
    if (eax)
        goto loc_19c81c;
    push32(ebx);
    push32(0x001d53f0);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c81c: // 0160:19c81c
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_1cc112();
    eax = ecx;
    sub_1cc20e();
    ebx = eax;
    eax = ecx;
    sub_1cc23e();
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c840() // 0160:19c840 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    sub_19c7ef();
    edx = 0x001d53ed;
    memoryASet32(ds, esp + 8, eax);
    eax = ebx;
    sub_1cc03a();
    esi = eax;
    if (eax)
        goto loc_19c87c;
    push32(ebx);
    push32(0x001d5407);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c87c: // 0160:19c87c
    eax = esi;
    ebx = 0;
    edx = 0;
    sub_1cc112();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp;
    sub_1cc380();
    ah = 0;
    edx = 0x001d541e;
    memoryASet(ds, esp + 4, ah);
    eax = esp;
    sub_1cc54a();
    if (eax)
        goto loc_19c8d3;
    edx = 0x00000008;
    eax = esi;
    ebx = 0;
    sub_1cc112();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp + 8;
    sub_1cc380();
loc_19c8d3: // 0160:19c8d3
    eax = esi;
    sub_1cc23e();
    eax = memoryAGet32(ds, esp + 8);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19c8e6() // 0160:19c8e6 +long
{
    esp -= 4;
    goto loc_19c8e6;
loc_19c545: // 0160:19c545
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 923 bytes
loc_19c8e6: // 0160:19c8e6
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edi = edx;
    sub_19c840();
    ebp = eax;
    eax = ebx;
    sub_19c7ef();
    esi = eax;
    if (ebp != eax)
        goto loc_19c948;
    edx = 0x001d53ed;
    eax = ebx;
    sub_1cc03a();
    ebp = eax;
    if (eax)
        goto loc_19c92d;
    push32(ebx);
    push32(0x001d5423);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c92d: // 0160:19c92d
    ebx = 0x00000001;
    ecx = ebp;
    edx = esi;
    eax = edi;
    sub_1cc380();
    esi = eax;
    eax = ebp;
    sub_1cc23e();
    goto loc_19c9ba;
loc_19c948: // 0160:19c948
    edx = 0x001d53ed;
    eax = ebx;
    sub_1cc03a();
    ebp = eax;
    if (eax)
        goto loc_19c972;
    push32(ebx);
    push32(0x001d5423);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c972: // 0160:19c972
    if (esi <= 0x00008000)
        goto loc_19c992;
    push32(ebx);
    push32(0x001d543a);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c992: // 0160:19c992
    ebx = 0x00000001;
    eax = 0x003a1f38;
    ecx = ebp;
    edx = esi;
    sub_1cc380();
    esi = eax;
    eax = ebp;
    edx = edi;
    sub_1cc23e();
    eax = 0x003a1f38;
    sub_19c4b0();
loc_19c9ba: // 0160:19c9ba
    eax = esi;
    goto loc_19c545;
}
void sub_19c9c1() // 0160:19c9c1 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    edi = edx;
    ebp = ebx;
    edx = 0x001d545b;
    sub_1cc03a();
    esi = eax;
    if (eax)
        goto loc_19c9f3;
    push32(ecx);
    push32(0x001d545e);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_19c9f3: // 0160:19c9f3
    ebx = 0x00000001;
    ecx = esi;
    edx = ebp;
    eax = edi;
    sub_1cc583();
    ecx = eax;
    eax = esi;
    sub_1cc23e();
    eax = ecx;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19ca13() // 0160:19ca13 +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    ebx = 0x00000004;
    memoryASet16(ds, esp + 8, ax);
    memoryASet16(ds, esp + 12, dx);
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, bx);
    ebx = esp;
    sub_1cc76a();
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_19ca3d() // 0160:19ca3d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    edx = 0;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_1cc76a();
    edx = 0;
    dx = memoryAGet16(ds, esp);
    if (edx)
        goto loc_19ca77;
    push32(0x001d5470);
    sub_1cbd1e();
    esp += 0x00000004;
    eax = 0x00000002;
    sub_1cbd41();
loc_19ca77: // 0160:19ca77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ca7d() // 0160:19ca7d +long
{
    esp -= 4;
    goto loc_19ca7d;
loc_19ca77: // 0160:19ca77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19ca7d: // 0160:19ca7d
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000003;
    ebx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_1cc76a();
    eax = memoryAGet32(ds, 0x39eac8);
    memoryASet32(ds, 0x39eab0, eax); // mouse dx
    eax = memoryAGet32(ds, 0x39eac4);
    memoryASet32(ds, 0x39eab4, eax); // mouse dy
    eax = memoryAGet32(ds, 0x39eac0);
    memoryASet32(ds, 0x39ea94, eax); // mouse btn
    eax = memoryAGet32(ds, 0x39ea8c);
    memoryASet32(ds, 0x39eaac, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 8);
    memoryASet32(ds, 0x39eac8, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    memoryASet32(ds, 0x39eac4, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x01;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x39eac0, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x02;
    eax &= 0x0000ffff;
    edx = 0x00000200;
    memoryASet32(ds, 0x39ea8c, eax);
    eax = edx;
    sub_19ca13();
    edx = 0x00000200;
    memoryASet32(ds, 0x39eab0, edx);
    memoryASet32(ds, 0x39eab4, edx);
    goto loc_19ca77;
}
void sub_19cb1f() // 0160:19cb1f +long
{
    esp -= 4;
loc_19cb1f: // 0160:19cb1f
    eax = 0x000003da;
    sub_1cc785();
    if (!(al & 0x08))
        goto loc_19cb1f;
    esp += 4;
}
void sub_19cb2e() // 0160:19cb2e +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000005;
    eax = 0x000003ce;
    sub_1cbd6f();
    eax = 0x000003cf;
    sub_1cc785();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000ef;
    sub_1cbd6f();
    edx = 0x00000006;
    eax = 0x000003ce;
    sub_1cbd6f();
    eax = 0x000003cf;
    sub_1cc785();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000fd;
    sub_1cbd6f();
    edx = 0x00000004;
    eax = 0x000003c4;
    sub_1cbd6f();
    eax = 0x000003c5;
    sub_1cc785();
    eax &= 0x000000f7;
    al |= 0x04;
    edx = eax;
    eax = 0x000003c5;
    sub_1cbd6f();
    edx = 0x00000014;
    eax = 0x000003d4;
    sub_1cbd6f();
    eax = 0x000003d5;
    sub_1cc785();
    edx = eax;
    eax = 0x000003d5;
    edx &= 0x000000bf;
    sub_1cbd6f();
    edx = 0x00000017;
    eax = 0x000003d4;
    sub_1cbd6f();
    eax = 0x000003d5;
    sub_1cc785();
    al |= 0x40;
    edx = eax;
    eax = 0x000003d5;
    sub_1cbd6f();
    eax = 0;
loc_19cc05: // 0160:19cc05
    eax += 0x00000004;
    memoryASet32(ds, eax + 655356, 0x00000000);
    if ((int32_t)eax < (int32_t)0x0000fa00)
        goto loc_19cc05;
    edx = pop32();
    esp += 4;
}
void sub_19cc1b() // 0160:19cc1b +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x39eacc);
    eax = 0x000003d4;
    edx += 0x0000000c;
    sub_1cc78d();
    edx = memoryAGet32(ds, 0x39eacc);
    edx += 0x00004000;
    edx &= 0x0000ffff;
    memoryASet32(ds, 0x39eacc, edx);
    edx = pop32();
    esp += 4;
}
void sub_19cc49() // 0160:19cc49 +long
{
    esp -= 4;
    goto loc_19cc49;
loc_19c44c: // 0160:19c44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2039 bytes
loc_19cc49: // 0160:19cc49
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000001c;
    edx = 0x0000001c;
    ebx = 0x00000004;
    eax = 0x00000033;
    ecx = 0x00000007;
    edi = 0x00000400;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    esi = 0;
    sub_1cc76a();
    ebx = esp;
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, cx);
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp + 12, di);
    sub_1cc76a();
    eax = 0x00000008;
    ebx = esp;
    edx = esp;
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp, ax);
    eax = 0x00000033;
    memoryASet16(ds, esp + 12, di);
    sub_1cc76a();
    esp += 0x0000001c;
    goto loc_19c44c;
}
void sub_19ccc3() // 0160:19ccc3 +long
{
    esp -= 4;
    goto loc_19ccc3;
loc_19ca77: // 0160:19ca77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 582 bytes
loc_19ccc3: // 0160:19ccc3
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    ah = 0;
    edx = esp;
    memoryASet(ds, esp + 1, ah);
    memoryASet(ds, esp, al);
    eax = 0x00000010;
    sub_1cc76a();
    goto loc_19ca77;
}
void sub_19cd7f() // 0160:19cd7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000060;
    push32(eax);
    ebx = edx;
    edx = 0x000003c0;
    ecx = 0x00000144;
    edi = 0x00000140;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 52, edx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 56, edi);
    memoryASet32(ds, esp + 88, ebp);
    ecx = 0x00000003;
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = memoryAGet32(ds, 0x3aa13c);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax &= 0x00000007;
    edx = ebx;
    memoryASet32(ds, esp + 76, eax);
    eax = edx;
    eax <<= 4;
    edi = 0x00318270;
    eax -= edx;
    ecx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebx;
    idiv32(ecx);
    edx = eax;
    eax <<= 2;
    ebp = 0x00289cb0;
    eax += edx;
    esi = 0x00000178;
    eax <<= 4;
    esi -= ebx;
    eax += edx;
    edx = 0x00375e70;
    eax <<= 2;
    esi -= 0x00000018;
    edx += eax;
    ecx = 0x0038c868;
    memoryASet32(ds, esp + 16, edx);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_19ce28;
    esi = 0x000000a8;
loc_19ce28: // 0160:19ce28
    eax = memoryAGet32(ds, esp);
    edx = eax;
    ebx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 4);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 24);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    edx = memoryAGet32(ds, esp + 80);
    push32(edx);
    push32(ebp);
    push32(ecx);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    push32(edi);
    sub_1c1930();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    eax = memoryAGet32(ds, esp + 12);
    eax = (int32_t)eax * (int32_t)esi;
    ecx = memoryAGet32(ds, esp + 16);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 56);
    eax = (int32_t)eax * (int32_t)esi;
    ebp += eax;
    eax = 0x000000a8;
    eax -= esi;
    edx = memoryAGet32(ds, esp);
    esi = eax;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x00272970;
    edx += eax;
    eax = memoryAGet32(ds, esp + 76);
    eax += 0x00000002;
    memoryASet32(ds, esp + 16, ecx);
    eax &= 0x00000007;
    memoryASet32(ds, esp + 68, edx);
    memoryASet32(ds, esp + 76, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19cef5;
    eax = 0x00000008;
    goto loc_19cef7;
loc_19cef5: // 0160:19cef5
    eax = esi;
loc_19cef7: // 0160:19cef7
    edx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x00000001);
    push32(edx);
    edx = memoryAGet32(ds, esp + 100);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 32);
    push32(eax);
    edx = memoryAGet32(ds, esp + 112);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 52);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_1c1930();
    esp += 0x00000030;
    edx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 56);
    edx <<= 3;
    eax <<= 3;
    memoryASet32(ds, esp + 32, edx);
    memoryASet32(ds, esp + 20, eax);
    edi += edx;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = 0x00004a40;
    eax <<= 3;
    memoryASet32(ds, esp + 84, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx * 0x00000000;
    eax <<= 3;
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    ebx += eax;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_19d02e;
loc_19cf8f: // 0160:19cf8f
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 96, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax += ebx;
    memoryASet32(ds, esp + 76, ecx);
    memoryASet32(ds, esp + 68, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19cfcd;
    edx = 0x00000008;
    goto loc_19cfcf;
loc_19cfcd: // 0160:19cfcd
    edx = esi;
loc_19cfcf: // 0160:19cfcf
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 100);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 84);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_1c1930();
    esp += 0x00000030;
    esi -= 0x00000008;
    edx = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 84);
    eax = memoryAGet32(ds, esp + 24);
    ecx += 0x00004a40;
    edi += edx;
    edx = memoryAGet32(ds, esp + 64);
    ebp += ebx;
    edx += eax;
    memoryASet32(ds, esp + 84, ecx);
    memoryASet32(ds, esp + 64, edx);
loc_19d02e: // 0160:19d02e
    ebx = memoryAGet32(ds, esp + 76) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 76);
    edx = memoryAGet32(ds, esp + 28);
    ecx += 0x00000002;
    eax = memoryAGet32(ds, esp + 68);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 84);
    ebx += 0x00272970;
    if (edx != 0x0000dec0)
        goto loc_19cf8f;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 96);
    edx <<= 8;
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 72, ecx);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 80, ebx);
    memoryASet32(ds, esp + 96, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19d0a0;
    eax = 0x00000008;
    goto loc_19d0a2;
loc_19d0a0: // 0160:19d0a0
    eax = esi;
loc_19d0a2: // 0160:19d0a2
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 104);
    push32(edx);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 76);
    push32(eax);
    push32(ecx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 44);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    sub_1c1930();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    eax <<= 3;
    edi += eax;
    eax = memoryAGet32(ds, esp + 56);
    eax <<= 3;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = memoryAGet32(ds, esp + 80);
    eax <<= 3;
    edx += eax;
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 8, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x00272970;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 80, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax += 0x00000002;
    eax &= 0x00000007;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19d167;
    eax = 0x00000008;
    goto loc_19d169;
loc_19d167: // 0160:19d167
    eax = esi;
loc_19d169: // 0160:19d169
    edx = memoryAGet32(ds, esp);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 96);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 104);
    push32(ecx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 72);
    push32(eax);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 112);
    push32(ebx);
    push32(ebx);
    push32(ebp);
    push32(edi);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    edx = memoryAGet32(ds, esp + 124);
    push32(edx);
    esi -= 0x00000008;
    sub_1c1930();
    esp += 0x00000030;
    ebx = 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 60, ebx);
    eax <<= 3;
    edx <<= 3;
    memoryASet32(ds, esp + 44, eax);
    edi += eax;
    eax = memoryAGet32(ds, esp + 88);
    memoryASet32(ds, esp + 40, edx);
    eax <<= 3;
    ebp += edx;
    memoryASet32(ds, esp + 36, eax);
loc_19d1cd: // 0160:19d1cd
    if ((int32_t)esi <= 0)
        goto loc_19d285;
    ebx = memoryAGet32(ds, esp + 80);
    ecx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, esp + 96);
    ebx += ecx;
    ecx = memoryAGet32(ds, esp + 92);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 60);
    edx = eax + 24;
    memoryASet32(ds, esp + 60, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx * 0x00000948;
    eax += 0x00272970;
    eax += 0x00012900;
    memoryASet32(ds, esp + 80, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_19d243;
    edx = 0x00000008;
    goto loc_19d245;
loc_19d243: // 0160:19d243
    edx = esi;
loc_19d245: // 0160:19d245
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 96);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 104);
    push32(eax);
    push32(edx);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 112);
    push32(eax);
    push32(eax);
    push32(ebp);
    push32(edi);
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 124);
    push32(ebx);
    sub_1c1930();
    esp += 0x00000030;
    esi -= 0x00000008;
    ecx = memoryAGet32(ds, esp + 44);
    eax = memoryAGet32(ds, esp + 40);
    edi += ecx;
    ebp += eax;
    goto loc_19d1cd;
loc_19d285: // 0160:19d285
    esp += 0x00000064;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19d28e() // 0160:19d28e +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000090;
    push32(eax);
    ecx = edx;
    memoryASet32(ds, esp + 80, ebx);
    edx = 0x000003c0;
    ebx = 0x00000144;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 96, edx);
    memoryASet32(ds, esp + 44, ebx);
    edx = ecx;
    memoryASet32(ds, esp + 12, ebx);
    eax = edx;
    memoryASet32(ds, esp + 124, ebp);
    eax <<= 4;
    ebp = 0x00318270;
    eax -= edx;
    ebx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebp += eax;
    eax = ecx;
    idiv32(ebx);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    eax += edx;
    edx = 0x00375e70;
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, esp + 16, 0x0038c868);
    eax = 0x00000178;
    eax -= ecx;
    eax -= 0x00000018;
    memoryASet32(ds, esp + 48, eax);
    eax <<= 16;
    memoryASet32(ds, esp + 64, edx);
    edx = eax;
    ebx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, esp + 128, 0x00000140);
    edi = 0x00289cb0;
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19d339;
    esi = 0x000000a8;
loc_19d339: // 0160:19d339
    eax = memoryAGet32(ds, 0x3a1f08);
    eax = (int32_t)eax * (int32_t)esi;
    ebx = 0x00000009;
    edx = ecx;
    eax = sar32(eax, 0x10);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 144, eax);
    eax = ecx;
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 144);
    ebx = eax;
    ecx += eax;
    memoryASet32(ds, esp + 144, 0x00000003);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 144));
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, eax);
    if ((int32_t)ecx >= (int32_t)0x000000c8)
        goto loc_19d40a;
    edx = memoryAGet32(ds, esp + 20);
    push32(edx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 128);
    push32(eax);
    push32(edi);
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 108);
    push32(ebx);
    push32(ebp);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    edx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)edx;
    ebx = memoryAGet32(ds, esp + 64);
    ebx += eax;
    eax = memoryAGet32(ds, esp + 128);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_19d52d;
loc_19d40a: // 0160:19d40a
    eax = 0x000000c8;
    eax -= ebx;
    memoryASet32(ds, esp + 4, eax);
    eax <<= 16;
    edx = eax;
    ebx = memoryAGet32(ds, 0x3a1f08);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 24);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 36);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 128);
    push32(ecx);
    push32(edi);
    eax = memoryAGet32(ds, esp + 56);
    push32(eax);
    edx = memoryAGet32(ds, esp + 108);
    push32(edx);
    push32(ebp);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 4);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    ecx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 4);
    eax = (int32_t)eax * (int32_t)ecx;
    edx = memoryAGet32(ds, esp + 64);
    ebx = memoryAGet32(ds, esp + 128);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    eax = (int32_t)eax * (int32_t)ebx;
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esp + 64, edx);
    esi -= ecx;
    edx = memoryAGet32(ds, esp + 48);
    ecx = memoryAGet32(ds, esp + 20);
    edi += eax;
    eax = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx -= eax;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, esp + 52, edx);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    ebx = 0;
    push32(edx);
    memoryASet32(ds, esp + 56, ebx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    push32(ebp);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    ebx = memoryAGet32(ds, esp + 48);
    ebp += eax;
    eax = ebx * 0x00000000;
    ecx = memoryAGet32(ds, esp + 64);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 128);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    esi += memoryAGet32(ds, esp + 8);
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ecx);
loc_19d52d: // 0160:19d52d
    esi = eax;
    eax = 0x00080000;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 140, eax);
    eax = memoryAGet32(ds, 0x3aa13c);
    eax = sar32(eax, 0x02);
    eax &= 0x00000007;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 104, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 104);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x00272970;
    edx += eax;
    eax = memoryAGet32(ds, esp + 104);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 104, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 92, edx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19d5bd;
    memoryASet32(ds, esp + 40, eax);
    goto loc_19d5c1;
loc_19d5bd: // 0160:19d5bd
    memoryASet32(ds, esp + 40, esi);
loc_19d5c1: // 0160:19d5c1
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 140);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    edx = memoryAGet32(ds, esp + 152);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 68);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 152);
    push32(eax);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 104);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    push32(ebp);
    sub_1c4354();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 56, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    eax <<= 3;
    edi += edx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 72, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 68, eax);
    eax = edx;
    edx = edx * 0x00000000;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 4;
    ecx = 0x00004a40;
    goto loc_19d741;
loc_19d670: // 0160:19d670
    memoryASet32(ds, esp + 76, eax);
    eax = memoryAGet32(ds, esp + 136);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 136, eax);
    eax = memoryAGet32(ds, esp + 120);
    eax += ebx;
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 104, ecx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19d6bc;
    memoryASet32(ds, esp + 112, eax);
    goto loc_19d6c0;
loc_19d6bc: // 0160:19d6bc
    memoryASet32(ds, esp + 112, esi);
loc_19d6c0: // 0160:19d6c0
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 140);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 116);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 136);
    push32(eax);
    push32(ebp);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 112);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 128);
    edx = memoryAGet32(ds, esp + 56);
    ecx = memoryAGet32(ds, esp + 120);
    ebp += edx;
    edx = memoryAGet32(ds, esp + 84);
    edi += eax;
    eax = memoryAGet32(ds, esp + 68);
    ecx += 0x00004a40;
loc_19d741: // 0160:19d741
    edx += eax;
    memoryASet32(ds, esp + 120, ecx);
    memoryASet32(ds, esp + 84, edx);
    ebx = memoryAGet32(ds, esp + 104) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 104);
    eax = memoryAGet32(ds, esp + 92);
    ecx += 0x00000002;
    edx = memoryAGet32(ds, esp + 72);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 120);
    ebx += 0x00272970;
    if (edx != 0x0000dec0)
        goto loc_19d670;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 100, ecx);
    memoryASet32(ds, esp + 108, ebx);
    eax &= 0x0000007f;
    ebx = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 136, eax);
    if ((int32_t)esi < (int32_t)ebx)
        goto loc_19d7cb;
    memoryASet32(ds, esp + 36, ebx);
    goto loc_19d7cf;
loc_19d7cb: // 0160:19d7cb
    memoryASet32(ds, esp + 36, esi);
loc_19d7cf: // 0160:19d7cf
    eax = memoryAGet32(ds, esp + 132);
    push32(eax);
    edx = memoryAGet32(ds, esp + 4);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 144);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    esi -= ecx;
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 52);
    push32(eax);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    push32(ebx);
    push32(edi);
    edx = memoryAGet32(ds, esp + 68);
    push32(edx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 156);
    push32(ebx);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    ecx = memoryAGet32(ds, esp + 128);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 36);
    eax = (int32_t)eax * (int32_t)ecx;
    edi += eax;
    eax = memoryAGet32(ds, esp + 124);
    edx = memoryAGet32(ds, esp + 108);
    eax <<= 3;
    edx += eax;
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x00272970;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 108, eax);
    eax = memoryAGet32(ds, esp + 100);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19d8bb;
    memoryASet32(ds, esp + 32, eax);
    goto loc_19d8bf;
loc_19d8bb: // 0160:19d8bb
    memoryASet32(ds, esp + 32, esi);
loc_19d8bf: // 0160:19d8bf
    ebx = memoryAGet32(ds, esp);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 48);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 120);
    push32(eax);
    edx = memoryAGet32(ds, esp + 152);
    push32(edx);
    push32(edx);
    push32(edi);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 156);
    push32(eax);
    sub_1c4354();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 32);
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 60, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    ecx = 0x00000030;
    eax <<= 3;
    memoryASet32(ds, esp + 88, ecx);
    memoryASet32(ds, esp + 52, eax);
    edi += edx;
loc_19d942: // 0160:19d942
    if ((int32_t)esi <= 0)
        goto loc_19da34;
    ecx = memoryAGet32(ds, esp + 108);
    ebx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 136);
    ecx += ebx;
    ebx = memoryAGet32(ds, esp + 132);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 88);
    edx = eax + 24;
    memoryASet32(ds, esp + 88, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx * 0x00000948;
    eax += 0x00272970;
    eax += 0x00012900;
    memoryASet32(ds, esp + 108, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_19d9c9;
    memoryASet32(ds, esp + 116, eax);
    goto loc_19d9cd;
loc_19d9c9: // 0160:19d9c9
    memoryASet32(ds, esp + 116, esi);
loc_19d9cd: // 0160:19d9cd
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 136);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 120);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 152);
    push32(ebx);
    push32(ebx);
    push32(edi);
    push32(ebp);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 156);
    push32(edx);
    sub_1c4354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 116);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 128);
    ebp += memoryAGet32(ds, esp + 60);
    edi += eax;
    goto loc_19d942;
loc_19da34: // 0160:19da34
    esp += 0x00000094;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19da3f() // 0160:19da3f +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    esi = memoryAGet32(ds, esp + 28);
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, 0x3a1f0c);
    eax = memoryAGet32(ds, 0x3a1f10);
    ebx -= edx;
    edx = memoryAGet32(ds, 0x3a1f08);
    ecx -= eax;
    if (edx != 0x00010000)
        goto loc_19db46;
    if ((int32_t)ebx <= 0)
        goto loc_19dab2;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_19dab2;
    if ((int32_t)ecx <= 0)
        goto loc_19dab2;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_19dab2;
    edx = memoryAGet32(ds, esp + 4);
    edx += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebx += ecx;
    eax = ebp;
    ebx <<= 6;
    ecx = esi;
    edx += ebx;
    ebx = edi;
loc_19daa8: // 0160:19daa8
    sub_1c8bd6();
    goto loc_19dc76;
loc_19dab2: // 0160:19dab2
    eax = ebx + edi;
    if ((int32_t)eax <= 0)
        goto loc_19dc76;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19dc76;
    edx = ecx + esi;
    if ((int32_t)edx <= 0)
        goto loc_19dc76;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19dc76;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19daee;
    eax -= 0x00000140;
    edi -= eax;
loc_19daee: // 0160:19daee
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19daff;
    eax -= 0x000000a8;
    esi -= eax;
loc_19daff: // 0160:19daff
    if ((int32_t)ebx >= 0)
        goto loc_19db0d;
    eax = ebx;
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_19db0d: // 0160:19db0d
    if ((int32_t)ecx >= 0)
        goto loc_19db29;
    eax = ecx;
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_19db29: // 0160:19db29
    eax = ecx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += ebx;
    eax += ecx;
    ebx = edi;
    eax <<= 6;
    ecx = esi;
    edx += eax;
    eax = ebp;
    goto loc_19daa8;
loc_19db46: // 0160:19db46
    edx = ebx;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = ecx;
    ebx = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = edi;
    ecx = eax;
    edx <<= 16;
    edi = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx = esi;
    edi = eax;
    edx <<= 16;
    esi = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if ((int32_t)ebx <= 0)
        goto loc_19dbc9;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_19dbc9;
    if ((int32_t)ecx <= 0)
        goto loc_19dbc9;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_19dbc9;
    eax = memoryAGet32(ds, esp + 4);
    eax += ebx;
    ebx = ecx;
    edx = memoryAGet32(ds, 0x3a1f08);
    ebx <<= 2;
    push32(edx);
    goto loc_19dc63;
loc_19dbc9: // 0160:19dbc9
    eax = ebx + edi;
    if ((int32_t)eax <= 0)
        goto loc_19dc76;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19dc76;
    edx = ecx + esi;
    if ((int32_t)edx <= 0)
        goto loc_19dc76;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19dc76;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19dc05;
    eax -= 0x00000140;
    edi -= eax;
loc_19dc05: // 0160:19dc05
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_19dc16;
    eax -= 0x000000a8;
    esi -= eax;
loc_19dc16: // 0160:19dc16
    if ((int32_t)ebx >= 0)
        goto loc_19dc2d;
    eax = memoryAGet32(ds, 0x3a1f08);
    eax = (int32_t)eax * (int32_t)ebx;
    eax = sar32(eax, 0x10);
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_19dc2d: // 0160:19dc2d
    if ((int32_t)ecx >= 0)
        goto loc_19dc52;
    eax = memoryAGet32(ds, 0x3a1f08);
    eax = (int32_t)eax * (int32_t)ecx;
    eax = sar32(eax, 0x10);
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_19dc52: // 0160:19dc52
    eax = memoryAGet32(ds, 0x3a1f08);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    eax += ebx;
    ebx = ecx;
    ebx <<= 2;
loc_19dc63: // 0160:19dc63
    ebx += ecx;
    push32(esi);
    ebx <<= 6;
    push32(edi);
    eax += ebx;
    push32(eax);
    push32(ebp);
    sub_1c8c05();
    esp += 0x00000014;
loc_19dc76: // 0160:19dc76
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_19dc7f() // 0160:19dc7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if ((int32_t)memoryAGet32(ds, 0x3a1f08) >= (int32_t)0x00000001)
        goto loc_19dc97;
    memoryASet32(ds, 0x3a1f08, 0x00000001);
loc_19dc97: // 0160:19dc97
    if ((int32_t)memoryAGet32(ds, 0x3a1f08) <= (int32_t)0x00020000)
        goto loc_19dcad;
    memoryASet32(ds, 0x3a1f08, 0x00020000);
loc_19dcad: // 0160:19dcad
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d58);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx += eax;
    eax = memoryAGet32(ds, 0x3a1f20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1d54);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebx + eax;
    esi = edx + 84;
    edx = memoryAGet32(ds, 0x3a1f08);
    ebx = ecx + 160;
    eax = edx;
    ecx = edx;
    eax <<= 2;
    ecx <<= 2;
    eax += edx;
    ecx += edx;
    eax <<= 2;
    ecx <<= 5;
    eax += edx;
    ecx = sar32(ecx, 0x10);
    eax <<= 2;
    edx = esi;
    ebx -= ecx;
    eax = sar32(eax, 0x10);
    ecx = ebx;
    edx -= eax;
    if ((int32_t)ebx >= 0)
        goto loc_19dd3a;
    ecx ^= ebx;
loc_19dd3a: // 0160:19dd3a
    if ((int32_t)edx >= 0)
        goto loc_19dd40;
    edx = 0;
loc_19dd40: // 0160:19dd40
    ebx = memoryAGet32(ds, 0x3a1f08);
    eax = ebx;
    eax <<= 2;
    esi = ebx;
    eax += ebx;
    esi <<= 2;
    eax <<= 2;
    esi += ebx;
    eax += ebx;
    esi <<= 6;
    eax <<= 3;
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    edi = ecx + esi;
    eax += edx;
    if ((int32_t)edi <= (int32_t)0x000003bf)
        goto loc_19dd79;
    ecx = 0x000003be;
    ecx -= esi;
loc_19dd79: // 0160:19dd79
    if ((int32_t)eax <= (int32_t)0x0000018f)
        goto loc_19dd9f;
    edx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    edx = 0x0000018e;
    eax = sar32(eax, 0x10);
    edx -= eax;
loc_19dd9f: // 0160:19dd9f
    edi = memoryAGet32(ds, 0x3a1f08);
    memoryASet32(ds, 0x3a1f0c, ecx);
    memoryASet32(ds, 0x3a1f10, edx);
    if (edi != 0x00010000)
        goto loc_19ddc5;
    eax = ecx;
    sub_19cd7f();
    goto loc_19df4a;
loc_19ddc5: // 0160:19ddc5
    ebx = edi;
    eax = ecx;
    sub_19d28e();
    goto loc_19df4a;
    // gap 375 bytes
loc_19df4a: // 0160:19df4a
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ddd3() // 0160:19ddd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_19de0a;
    if (memoryAGet32(ds, 0x3a1cc8) != 0x00000000)
        goto loc_19df49;
    edi = 0x00000500;
    ebp = 0x000003a0;
    memoryASet32(ds, 0x3a1f14, edi);
    memoryASet32(ds, 0x3a1f18, ebp);
    goto loc_19dedf;
loc_19de0a: // 0160:19de0a
    if (memoryAGet32(ds, 0x3a1f24) != 0x00000000)
        goto loc_19de5f;
    if (memoryAGet32(ds, 0x3a1cd0) != 0x00000000)
        goto loc_19de5f;
    if (memoryAGet32(ds, 0x1e0074) != 0x00000000)
        goto loc_19de5f;
    eax = memoryAGet32(ds, 0x39eac8);
    eax -= memoryAGet32(ds, 0x39eab0);
    edx = memoryAGet32(ds, 0x3a1f14);
    eax <<= 3;
    ecx = memoryAGet32(ds, 0x39eab4);
    edx += eax;
    eax = memoryAGet32(ds, 0x39eac4);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x3a1f18);
    eax <<= 3;
    esi += eax;
    memoryASet32(ds, 0x3a1f14, edx); // mouse scroll pos x
    memoryASet32(ds, 0x3a1f18, esi); // mouse scroll pos x
loc_19de5f: // 0160:19de5f
    eax = memoryAGet32(ds, 0x3a1f1c);
    eax -= memoryAGet32(ds, 0x3a1f14);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = memoryAGet32(ds, 0x3a1f18);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1f20);
    eax -= ebp;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_19de91;
    eax = 0;
    memoryASet32(ds, 0x3a1f24, eax);
loc_19de91: // 0160:19de91
    if ((int32_t)memoryAGet32(ds, 0x3a1f14) < (int32_t)0x00000a00)
        goto loc_19dea7;
    memoryASet32(ds, 0x3a1f14, 0x00000a00);
loc_19dea7: // 0160:19dea7
    if ((int32_t)memoryAGet32(ds, 0x3a1f14) >= (int32_t)0x00000000)
        goto loc_19deb8;
    edi = 0;
    memoryASet32(ds, 0x3a1f14, edi);
loc_19deb8: // 0160:19deb8
    if ((int32_t)memoryAGet32(ds, 0x3a1f18) < (int32_t)0x000003a0)
        goto loc_19dece;
    memoryASet32(ds, 0x3a1f18, 0x000003a0);
loc_19dece: // 0160:19dece
    if ((int32_t)memoryAGet32(ds, 0x3a1f18) >= (int32_t)0x00000000)
        goto loc_19dedf;
    ecx = 0;
    memoryASet32(ds, 0x3a1f18, ecx);
loc_19dedf: // 0160:19dedf
    if (memoryAGet32(ds, 0x3a1f24) != 0x00000000)
        goto loc_19deed;
    ebx = 0x00000003;
loc_19deed: // 0160:19deed
    if (memoryAGet32(ds, 0x3a1f24) != 0x00000001)
        goto loc_19defb;
    ebx = 0x00000002;
loc_19defb: // 0160:19defb
    if (memoryAGet32(ds, 0x3a1f24) != 0x00000002)
        goto loc_19df09;
    ebx = 0x00000006;
loc_19df09: // 0160:19df09
    if (memoryAGet32(ds, 0x3a1f24) != 0x00000003)
        goto loc_19df17;
    ebx = 0x00000004;
loc_19df17: // 0160:19df17
    eax = memoryAGet32(ds, 0x3a1f14);
    edi = memoryAGet32(ds, 0x3a1f1c);
    cl = bl;
    eax -= edi;
    eax = sar32(eax, cl);
    edx = memoryAGet32(ds, 0x3a1f20);
    ebp = edi + eax;
    eax = memoryAGet32(ds, 0x3a1f18);
    eax -= edx;
    eax = sar32(eax, cl);
    ebx = edx + eax;
    memoryASet32(ds, 0x3a1f1c, ebp);
    memoryASet32(ds, 0x3a1f20, ebx);
loc_19df49: // 0160:19df49
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19df50() // 0160:19df50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3a1d50) == 0x00000000)
        goto loc_19e002;
    eax = memoryAGet32(ds, 0x3a1d5c);
    eax += 0x00000020;
    eax &= 0x000000ff;
    ebx = memoryAGet32(ds, 0x3a1d50);
    edx = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    edx = (int32_t)edx * (int32_t)ebx;
    memoryASet32(ds, 0x3a1d5c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x3a1d54, eax);
    eax = memoryAGet32(ds, 0x3a1d50);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, 0x3a1d5c);
    ebx = ecx + 80;
    ebx &= 0x000000ff;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 1932272);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x3a1d58, eax);
    if (ecx)
        goto loc_19e002;
    edx = memoryAGet32(ds, 0x3a1d50);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 5;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x3a1d50, eax);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_19e002;
    memoryASet32(ds, 0x3a1d50, ecx);
loc_19e002: // 0160:19e002
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e006() // 0160:19e006 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    edx += 0x0000f9fc;
    eax += 0x0000f9fc;
    ecx -= 0x00000004;
loc_19e018: // 0160:19e018
    ebx = memoryAGet32(ds, eax);
    eax -= 0x00000004;
    memoryASet32(ds, edx, ebx);
    edx -= 0x00000004;
    if (eax != ecx)
        goto loc_19e018;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e029() // 0160:19e029 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = memoryAGet32(ds, 0x39ea88);
    eax = edx;
    eax <<= 2;
    eax += edx;
    memoryASet32(ds, eax * 4 + 0x221c90, esi);
    edx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, eax * 4 + 0x221c94, edi);
    memoryASet32(ds, eax * 4 + 0x221ca0, edx);
    edx = memoryAGet32(ds, 0x39ea88);
    memoryASet32(ds, eax * 4 + 0x221c98, ebx);
    edx++;
    memoryASet32(ds, eax * 4 + 0x221c9c, ecx);
    memoryASet32(ds, 0x39ea88, edx);
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_19e075() // 0160:19e075 +long
{
    esp -= 4;
    goto loc_19e075;
loc_19df49: // 0160:19df49
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 293 bytes
loc_19e075: // 0160:19e075
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
loc_19e07b: // 0160:19e07b
    edx = memoryAGet32(ds, 0x39ea88);
    if ((int32_t)edx <= 0)
        goto loc_19e0bd;
    ebx = edx + -1;
    memoryASet32(ds, 0x39ea88, ebx);
    eax = ebx * 0x00000014;
    esi = memoryAGet32(ds, eax + 2235552);
    edx = 0x00289cb0;
    push32(esi);
    edi = memoryAGet32(ds, eax + 2235548);
    ecx = memoryAGet32(ds, eax + 2235544);
    push32(edi);
    ebx = memoryAGet32(ds, eax + 2235540);
    eax = memoryAGet32(ds, eax + 2235536);
    sub_19da3f();
    goto loc_19e07b;
loc_19e0bd: // 0160:19e0bd
    ebp = 0;
    memoryASet32(ds, 0x39ea88, ebp);
    goto loc_19df49;
}
void sub_19e0ca() // 0160:19e0ca +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 28);
    if ((int32_t)ebx <= 0)
        goto loc_19e0fe;
    esi = ebx + edi;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_19e0fe;
    if ((int32_t)ecx <= 0)
        goto loc_19e0fe;
    esi = ecx + edx;
    if ((int32_t)esi < (int32_t)0x000000a8)
        goto loc_19e179;
loc_19e0fe: // 0160:19e0fe
    esi = ebx + edi;
    if ((int32_t)esi <= 0)
        goto loc_19e1a0;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_19e1a0;
    ebp = ecx + edx;
    if ((int32_t)ebp <= 0)
        goto loc_19e1a0;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_19e1a0;
    if ((int32_t)esi <= (int32_t)0x00000140)
        goto loc_19e13c;
    esi -= 0x00000140;
    edi -= esi;
loc_19e13c: // 0160:19e13c
    esi = ecx + edx;
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_19e14f;
    esi -= 0x000000a8;
    edx -= esi;
loc_19e14f: // 0160:19e14f
    if ((int32_t)ebx >= 0)
        goto loc_19e15d;
    esi = ebx;
    edi += ebx;
    esi = -esi;
    ebx = 0;
    eax += esi;
loc_19e15d: // 0160:19e15d
    if ((int32_t)ecx >= 0)
        goto loc_19e179;
    esi = ecx;
    esi = -esi;
    memoryASet32(ds, esp, esi);
    ebp = memoryAGet32(ds, esp);
    esi <<= 2;
    esi += ebp;
    edx += ecx;
    esi <<= 6;
    ecx = 0;
    eax += esi;
loc_19e179: // 0160:19e179
    esi = memoryAGet32(ds, esp + 36);
    push32(esi);
    esi = memoryAGet32(ds, esp + 8);
    esi += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebp = memoryAGet32(ds, esp + 36);
    ebx += ecx;
    push32(ebp);
    ebx <<= 6;
    ecx = edx;
    esi += ebx;
    ebx = edi;
    edx = esi;
    sub_19e1a9();
loc_19e1a0: // 0160:19e1a0
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_19e1a9() // 0160:19e1a9 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    goto loc_19e1fd;
loc_19e1c1: // 0160:19e1c1
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_19e1dc;
loc_19e1cb: // 0160:19e1cb
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx == 0x00000080)
        goto loc_19e1d9;
    memoryASet(ds, edx, cl);
loc_19e1d9: // 0160:19e1d9
    eax++;
    edx++;
    ebx++;
loc_19e1dc: // 0160:19e1dc
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_19e1cb;
    ecx = memoryAGet32(ds, esp + 24);
    eax = memoryAGet32(ds, esp + 28);
    ebx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 4);
    ebx++;
    edx += eax;
    edi += ecx;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
loc_19e1fd: // 0160:19e1fd
    eax = memoryAGet32(ds, esp + 8);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_19e1c1;
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_19e20e() // 0160:19e20e +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xffffffff;
    memoryASet32(ds, 0x3a1eac, edx);
    memoryASet32(ds, 0x3a1e9c, edx);
    memoryASet32(ds, 0x3a1ea0, edx);
    memoryASet32(ds, 0x3a1e8c, edx);
    memoryASet32(ds, 0x3a1e90, edi);
    memoryASet32(ds, 0x3a1e98, edx);
    memoryASet32(ds, 0x3a1e94, edx);
    memoryASet32(ds, 0x3a1eb4, edx);
    memoryASet32(ds, 0x3a1eb8, edx);
    memoryASet32(ds, 0x3a1eb0, edx);
    memoryASet32(ds, 0x3a1ea4, edx);
    memoryASet32(ds, 0x3a1ebc, edx);
    memoryASet32(ds, 0x1e3a9c, edx);
    memoryASet32(ds, 0x1e3aa0, edx);
    memoryASet32(ds, 0x1e3aa4, edi);
    memoryASet32(ds, 0x3a1ec0, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_19e27a() // 0160:19e27a +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803518) != 0x00000000)
        goto loc_19e297;
    memoryASet32(ds, eax + 3803518, 0xffffffff);
loc_19e297: // 0160:19e297
    esp += 4;
    return;
}
void sub_19e298() // 0160:19e298 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    if (memoryAGet32(ds, 0x1e15f4) == 0x00000000)
        goto loc_19e2d2;
    ebx = 0x00000032;
    ecx = 0x00000002;
    eax = memoryAGet32(ds, 0x1e15f0);
    esi = 0;
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x1e15fc, ecx);
    memoryASet32(ds, 0x1e15f8, eax);
    memoryASet32(ds, 0x1e15f0, esi);
    memoryASet32(ds, 0x1e00a0, esi);
loc_19e2d2: // 0160:19e2d2
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e2d6() // 0160:19e2d6 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    if (memoryAGet32(ds, 0x1e0008) == 0x00000000)
        goto loc_19e307;
    ebx = memoryAGet32(ds, 0x1e3d20);
    if (ebx)
        goto loc_19e307;
    esi = 0x00000001;
    memoryASet32(ds, 0x1e15f0, ebx);
    memoryASet32(ds, 0x1e15fc, esi);
    memoryASet32(ds, 0x1e15f4, esi);
    sub_1ad412();
loc_19e307: // 0160:19e307
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e30a() // 0160:19e30a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx -= eax;
    eax = ebx;
    if ((int32_t)ebx >= 0)
        goto loc_19e343;
    eax ^= ebx;
loc_19e343: // 0160:19e343
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19e34f;
    eax = 0x00000140;
loc_19e34f: // 0160:19e34f
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e36c() // 0160:19e36c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ecx;
    if ((int32_t)eax >= 0)
        goto loc_19e39c;
    eax = 0;
loc_19e39c: // 0160:19e39c
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_19e3a8;
    eax = 0x00000140;
loc_19e3a8: // 0160:19e3a8
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e3c6() // 0160:19e3c6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = 0;
    edi = 0x000002b0;
    memoryASet32(ds, esp, esi);
    goto loc_19e440;
loc_19e3db: // 0160:19e3db
    eax = memoryAGet32(ds, esp);
    ecx = esi;
    ebx = edi;
    edx = 0;
    ecx <<= 2;
    goto loc_19e3f6;
loc_19e3e9: // 0160:19e3e9
    ebp = memoryAGet32(ds, eax + 3803570);
    eax += 0x000000ac;
    edx += ebp;
loc_19e3f6: // 0160:19e3f6
    if (eax != ebx)
        goto loc_19e3e9;
    if (edx)
        goto loc_19e42d;
    if (memoryAGet32(ds, ecx + 3808988) != 0x00000000)
        goto loc_19e42d;
    edx = 0x00000001;
    ebx = 0x00000032;
    eax = 0x001d66cb;
    memoryASet32(ds, ecx + 3808988, edx);
    edx = ecx;
    sub_19fdc8();
    memoryASet32(ds, 0x3a1efc, 0x00000032);
loc_19e42d: // 0160:19e42d
    ecx = memoryAGet32(ds, esp);
    edi += 0x000002b0;
    ecx += 0x000002b0;
    esi++;
    memoryASet32(ds, esp, ecx);
loc_19e440: // 0160:19e440
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x1e0010))
        goto loc_19e3db;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e452() // 0160:19e452 +long
{
    esp -= 4;
    goto loc_19e452;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19e452: // 0160:19e452
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    eax = eax * 0x000000ac;
    memoryASet32(ds, 0x3a1e08, 0x00000001);
    if (memoryAGet32(ds, eax + 3803494) <= 0x00078000)
        goto loc_19e48b;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000002a;
    goto loc_19e4e4;
loc_19e48b: // 0160:19e48b
    if ((int32_t)memoryAGet32(ds, eax + 3803498) <= (int32_t)0x0002fc00)
        goto loc_19e4f3;
    edi = memoryAGet32(ds, 0x39eaa8);
    if (edi != 0x00000002)
        goto loc_19e4b7;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000041;
    goto loc_19e4e4;
loc_19e4b7: // 0160:19e4b7
    if (edi != 0x00000003)
        goto loc_19e4d1;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000040;
    goto loc_19e4e4;
loc_19e4d1: // 0160:19e4d1
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000e;
loc_19e4e4: // 0160:19e4e4
    sub_1bda16();
    memoryASet32(ds, 0x3a1eac, 0x00000001);
loc_19e4f3: // 0160:19e4f3
    if (cl & 0x03)
        goto loc_19e502;
    memoryASet32(ds, 0x3a1e98, 0x00000001);
loc_19e502: // 0160:19e502
    eax = ecx * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3803510, esi);
    memoryASet32(ds, eax + 3803486, esi);
    memoryASet32(ds, eax + 3803490, esi);
    memoryASet32(ds, eax + 3803494, esi);
    memoryASet32(ds, eax + 3803570, esi);
    memoryASet32(ds, eax + 3803574, esi);
    memoryASet32(ds, eax + 3803578, esi);
    memoryASet32(ds, eax + 3803526, esi);
    eax = 0x00000010;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1c78, eax);
    if (ecx != edx)
        goto loc_19e565;
    ebx = memoryAGet32(ds, 0x3a1cc0);
    ebx--;
    memoryASet32(ds, 0x3a1cc0, ebx);
    if ((int32_t)ebx >= 0)
        goto loc_19e565;
    memoryASet32(ds, 0x3a1cc0, esi);
loc_19e565: // 0160:19e565
    eax = ecx * 0x000000ac;
    ebp = 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3803542, ebp);
    edi = 0x00000032;
    memoryASet32(ds, eax + 3803474, edx);
    ebx = edi;
    memoryASet32(ds, eax + 3803470, edx);
    eax = 0x001d66a2;
    memoryASet32(ds, 0x3a1cec, edx);
    edx = ecx;
    memoryASet32(ds, 0x3a1efc, edi);
    sub_19fdc8();
    goto loc_19e44b;
}
void sub_19e5a8() // 0160:19e5a8 +long
{
    esp -= 4;
    goto loc_19e5a8;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 342 bytes
loc_19e5a8: // 0160:19e5a8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x3a1f14, eax);
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    ebx = memoryAGet32(ds, 0x3a1f14);
    memoryASet32(ds, 0x3a1f18, eax);
    if ((int32_t)ebx >= 0)
        goto loc_19e60a;
    ecx = 0;
    memoryASet32(ds, 0x3a1f14, ecx);
loc_19e60a: // 0160:19e60a
    if ((int32_t)memoryAGet32(ds, 0x3a1f18) >= (int32_t)0x00000000)
        goto loc_19e61b;
    edi = 0;
    memoryASet32(ds, 0x3a1f18, edi);
loc_19e61b: // 0160:19e61b
    if ((int32_t)memoryAGet32(ds, 0x3a1f14) <= (int32_t)0x00000a00)
        goto loc_19e631;
    memoryASet32(ds, 0x3a1f14, 0x00000a00);
loc_19e631: // 0160:19e631
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803522, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = 0x00000001;
    eax = memoryAGet32(ds, eax + 3803498);
    ebp = memoryAGet32(ds, 0x3a1d74);
    eax -= 0x00004000;
    memoryASet32(ds, 0x3a1c70, esi);
    memoryASet32(ds, 0x3a1c6c, esi);
    memoryASet32(ds, 0x3a1c74, eax);
    if (!ebp)
        goto loc_19e44b;
    eax = memoryAGet32(ds, 0x3a1cc4);
    memoryASet32(ds, 0x3a1c60, eax);
    goto loc_19e44b;
}
void sub_19e68b() // 0160:19e68b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ecx = 0x00000004;
    ebp = 0x00000001;
    esi = 0x00000010;
    edx = memoryAGet32(ds, 0x3a1d68);
    sub_19af15();
    sub_1996ed();
    memoryASet32(ds, 0x3a1d68, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x1e1600, edx);
    memoryASet32(ds, 0x3a1d0c, edx);
    memoryASet32(ds, 0x3a1d10, edx);
    memoryASet32(ds, 0x1e3a80, edx);
    memoryASet32(ds, 0x1e3ac0, edx);
    memoryASet32(ds, 0x3a1e54, edx);
    sub_1b4ce6();
    memoryASet32(ds, 0x3a1e08, edx);
    memoryASet32(ds, 0x3a1e4c, edx);
    memoryASet32(ds, 0x3a1e60, edx);
    memoryASet32(ds, 0x3a1dbc, edx);
    memoryASet32(ds, 0x3a1ef8, edx);
    memoryASet32(ds, 0x3a1dc0, edx);
    memoryASet32(ds, 0x3a1db4, edx);
    memoryASet32(ds, 0x3a1e6c, edx);
    memoryASet32(ds, 0x3a1e80, ebx);
    memoryASet32(ds, 0x3a1e84, ebx);
    memoryASet32(ds, 0x3a1d1c, ebx);
    memoryASet32(ds, 0x3a1d20, ebx);
    memoryASet32(ds, 0x3a1e68, ebx);
    memoryASet32(ds, 0x3a1dc4, ebx);
    memoryASet32(ds, 0x3a1df8, ebx);
    memoryASet32(ds, 0x3a1e10, ebx);
    memoryASet32(ds, 0x3a1e14, ebx);
    memoryASet32(ds, 0x3a1e18, ebx);
    memoryASet32(ds, 0x3a1e1c, ebx);
    memoryASet32(ds, 0x3a1e20, ebx);
    memoryASet32(ds, 0x3a1e24, ebx);
    memoryASet32(ds, 0x3a1e28, ebx);
    memoryASet32(ds, 0x3a1e2c, ebx);
    memoryASet32(ds, 0x3a1e30, ebx);
    memoryASet32(ds, 0x3a1e34, ebx);
    memoryASet32(ds, 0x3a1e38, ebx);
    memoryASet32(ds, 0x3a1e3c, ebx);
    memoryASet32(ds, 0x3a1e40, ebx);
    memoryASet32(ds, 0x3a1d48, ebx);
    memoryASet32(ds, 0x3a1d64, ebx);
    memoryASet32(ds, 0x3a1d60, ecx);
    memoryASet32(ds, 0x3a1cd0, ebx);
    memoryASet32(ds, 0x3a1f24, ebx);
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1c4a, ebp);
    memoryASet32(ds, 0x3a1d88, ebx);
    memoryASet32(ds, 0x3a1e88, ebx);
    memoryASet32(ds, 0x3a1dec, ebx);
    edx = 0x00000032;
    memoryASet32(ds, 0x3a1c78, esi);
    memoryASet32(ds, 0x3a1e78, edx);
    sub_19e20e();
    memoryASet32(ds, 0x3a1e70, ebx);
    sub_1acc78();
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e7ed() // 0160:19e7ed +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax <<= 2;
    ecx = eax + 4;
    eax = eax * 0x000000ac;
    edx = 0;
    ecx = ecx * 0x000000ac;
    goto loc_19e830;
loc_19e806: // 0160:19e806
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_19e82b;
    if (memoryAGet32(ds, eax + 3803594) != 0x00000000)
        goto loc_19e82b;
    ebx = memoryAGet32(ds, eax + 3803570);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, eax + 3803574))
        goto loc_19e82b;
    edx = 0x00000001;
loc_19e82b: // 0160:19e82b
    eax += 0x000000ac;
loc_19e830: // 0160:19e830
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_19e838;
    if (!edx)
        goto loc_19e806;
loc_19e838: // 0160:19e838
    eax = edx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e83e() // 0160:19e83e +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, eax);
    if (!eax)
        goto loc_19e857;
    edx = 0;
    memoryASet32(ds, 0x1e15e4, edx);
loc_19e857: // 0160:19e857
    eax = 0x00000001;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e875;
    memoryASet32(ds, 0x1e15e4, 0x00000001);
loc_19e875: // 0160:19e875
    eax = 0x00000002;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e893;
    memoryASet32(ds, 0x1e15e4, 0x00000002);
loc_19e893: // 0160:19e893
    eax = 0x00000003;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e8b1;
    memoryASet32(ds, 0x1e15e4, 0x00000003);
loc_19e8b1: // 0160:19e8b1
    if ((int32_t)memoryAGet32(ds, 0x3a1ec8) > (int32_t)0x00000001)
        goto loc_19e8c9;
    memoryASet32(ds, 0x1e15ec, 0x00000001);
    sub_19e298();
loc_19e8c9: // 0160:19e8c9
    edx = pop32();
    esp += 4;
}
void sub_19e8cb() // 0160:19e8cb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, eax);
    if (!eax)
        goto loc_19e8e6;
    edx = 0;
    memoryASet32(ds, 0x1e15e4, edx);
loc_19e8e6: // 0160:19e8e6
    eax = 0x00000001;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e904;
    memoryASet32(ds, 0x1e15e4, 0x00000001);
loc_19e904: // 0160:19e904
    eax = 0x00000002;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e922;
    memoryASet32(ds, 0x1e15e4, 0x00000002);
loc_19e922: // 0160:19e922
    eax = 0x00000003;
    sub_19e7ed();
    memoryASet32(ds, 0x3a1ec8, memoryAGet32(ds, 0x3a1ec8) + eax);
    if (!eax)
        goto loc_19e940;
    memoryASet32(ds, 0x1e15e4, 0x00000003);
loc_19e940: // 0160:19e940
    if ((int32_t)memoryAGet32(ds, 0x3a1ec8) > (int32_t)0x00000001)
        goto loc_19e97c;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x3a1cc8, ebx);
    memoryASet32(ds, 0x3a1f00, ecx);
    memoryASet32(ds, eax + 3803530, ebx);
    eax = 0x00000032;
    memoryASet32(ds, 0x3a1e78, ebx);
    memoryASet32(ds, 0x3a1efc, eax);
loc_19e97c: // 0160:19e97c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19e980() // 0160:19e980 +long
{
    esp -= 4;
    goto loc_19e980;
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1326 bytes
loc_19e980: // 0160:19e980
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x3a1c68);
    edi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_19e9ed;
loc_19e99d: // 0160:19e99d
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    ecx = eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ecx + 3808716);
    goto loc_19e9e7;
loc_19e9b6: // 0160:19e9b6
    edx++;
    edx &= 0x00000003;
    esi = edx + ecx;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_19e9e6;
    if (memoryAGet32(ds, eax + 3803594) != 0x00000000)
        goto loc_19e9e6;
    ebx = 0x00000004;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, ecx + 3808716, edx);
    edi = ebx;
loc_19e9e6: // 0160:19e9e6
    ebx++;
loc_19e9e7: // 0160:19e9e7
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_19e9b6;
    edi++;
loc_19e9ed: // 0160:19e9ed
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_19e99d;
    ebx = memoryAGet32(ds, esp + 4);
    if ((int32_t)ebx < 0)
        goto loc_19ea08;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3a1c64, ebx);
    memoryASet32(ds, 0x3a1c68, eax);
loc_19ea08: // 0160:19ea08
    esp += 0x00000008;
    goto loc_19e44c;
}
void sub_19ea10() // 0160:19ea10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ebx = 0x001d6868;
    ecx = memoryAGet32(ds, 0x1e3d20);
    eax = memoryAGet32(ds, 0x3a1d84);
    memoryASet32(ds, 0x1e3d20, edx);
    edx = 0x001d684f;
    sub_19fe73();
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = memoryAGet32(ds, 0x3a1c88);
    sub_19fe49();
    ebx = 0x001d69dc;
    edx = 0x001d69c0;
    eax = memoryAGet32(ds, 0x3a1d84);
    sub_19fe73();
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = memoryAGet32(ds, 0x3a1c88);
    sub_19fe49();
    ebx = 0x001d6a05;
    edx = 0x001d69e9;
    eax = memoryAGet32(ds, 0x3a1d84);
    sub_19fe73();
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = memoryAGet32(ds, 0x3a1c88);
    sub_19fe49();
    memoryASet32(ds, 0x1e3d20, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19eaa6() // 0160:19eaa6 +long
{
    esp -= 4;
    goto loc_19eaa6;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1620 bytes
loc_19eaa6: // 0160:19eaa6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x3a1c64);
    sub_19e68b();
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d70);
    edx++;
    ecx = 0;
    memoryASet32(ds, 0x3a1d70, edx);
    memoryASet32(ds, eax + 3803486, ecx);
    memoryASet32(ds, eax + 3803490, ecx);
    memoryASet32(ds, eax + 3803538, ecx);
    memoryASet32(ds, eax + 3803626, ecx);
    memoryASet32(ds, eax + 3803630, ecx);
    memoryASet32(ds, eax + 3803510, ecx);
    memoryASet32(ds, eax + 3803550, ecx);
    memoryASet32(ds, eax + 3803474, ecx);
    memoryASet32(ds, eax + 3803470, ecx);
    esi = 0;
    memoryASet32(ds, eax + 3803478, ecx);
    memoryASet32(ds, eax + 3803574, esi);
    memoryASet32(ds, eax + 3803602, esi);
    memoryASet32(ds, eax + 3803590, 0x00000001);
    if (memoryAGet32(ds, 0x3a1d68) != 0x00000012)
        goto loc_19eb33;
    memoryASet32(ds, 0x3a1d68, 0x00000005);
loc_19eb33: // 0160:19eb33
    if (memoryAGet32(ds, 0x3a1d68) != 0x00000013)
        goto loc_19eb46;
    memoryASet32(ds, 0x3a1d68, 0x00000009);
loc_19eb46: // 0160:19eb46
    if (memoryAGet32(ds, 0x3a1d68) != 0x00000014)
        goto loc_19eb59;
    memoryASet32(ds, 0x3a1d68, 0x00000003);
loc_19eb59: // 0160:19eb59
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += ebp;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_19ebb5;
    eax = ebx * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3803542);
    if (ecx == 0x0000002b)
        goto loc_19ebb5;
    if (ecx == 0x0000000b)
        goto loc_19ebb5;
    if (ecx == 0x00000033)
        goto loc_19ebb5;
    if (ecx == 0x00000026)
        goto loc_19ebb5;
    if (ecx == 0x00000016)
        goto loc_19ebb5;
    if (ecx == 0x0000001f)
        goto loc_19ebb5;
    if (ecx == 0x00000034)
        goto loc_19ebb5;
    if (memoryAGet32(ds, 0x3a1db8) == 0x00000000)
        goto loc_19ebcf;
loc_19ebb5: // 0160:19ebb5
    eax = ebx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, 0x3a1db8, ebp);
    memoryASet32(ds, eax + 3803542, ebp);
    memoryASet32(ds, 0x3a1d68, ebp);
loc_19ebcf: // 0160:19ebcf
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d68);
    esi = 0x00000004;
    memoryASet32(ds, eax + 3803546, edx);
    edi = 0x00000001;
    memoryASet32(ds, eax + 3803542, esi);
    memoryASet32(ds, eax + 3803590, edi);
    edx = memoryAGet32(ds, 0x3a1c84);
    memoryASet32(ds, eax + 3803598, edx);
    edx = memoryAGet32(ds, 0x3a1c88);
    memoryASet32(ds, eax + 3803606, edx);
    edx = memoryAGet32(ds, 0x3a1d84);
    memoryASet32(ds, eax + 3803610, edx);
    sub_19e980();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803598);
    memoryASet32(ds, 0x3a1c84, edx);
    edx = memoryAGet32(ds, eax + 3803606);
    memoryASet32(ds, 0x3a1c88, edx);
    eax = memoryAGet32(ds, eax + 3803610);
    memoryASet32(ds, 0x3a1d84, eax);
    sub_19ea10();
    sub_19abd3();
    sub_19ac2f();
    sub_19ac8b();
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = 0x00000032;
    eax <<= 2;
    edx = 0x00000003;
    memoryASet32(ds, 0x3a1cd8, eax);
    sub_19e5a8();
    eax = 0x001d6679;
    memoryASet32(ds, 0x3a1f24, edx);
    edx = memoryAGet32(ds, 0x3a1c64);
    sub_19fdc8();
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, 0x3a1e74, edi);
    edx = memoryAGet32(ds, edx + 3803546);
    eax = edx;
    eax <<= 2;
    esi = 0;
    eax += edx;
    ebx = edi;
    edi = 0x0000004b;
    switch (memoryAGet32(ds, eax * 4 + 0x1e1316)) // TODO [15]
    {
        case 0x19ff9b: sub_19ff9b(); break;
        case 0x1a02c4: sub_1a02c4(); break;
        case 0x19ffae: sub_19ffae(); break;
        case 0x1a0171: sub_1a0171(); break;
        case 0x19ffef: sub_19ffef(); break;
        case 0x1a025b: sub_1a025b(); break;
        case 0x1a010f: sub_1a010f(); break;
        case 0x1a015d: sub_1a015d(); break;
        case 0x1a0008: sub_1a0008(); break;
        case 0x1a003c: sub_1a003c(); break;
        case 0x1a0216: sub_1a0216(); break;
        case 0x1a00b5: sub_1a00b5(); break;
        case 0x1a0074: sub_1a0074(); break;
        case 0x1a009c: sub_1a009c(); break;
        case 0x1a0335: sub_1a0335(); break;
        case 0x1a0311: sub_1a0311(); break;
        case 0x1a0359: sub_1a0359(); break;
        case 0x1a012f: sub_1a012f(); break;
        case 0x1a03b7: sub_1a03b7(); break;
        case 0x1a03d0: sub_1a03d0(); break;
        case 0x1a03f7: sub_1a03f7(); break;
        case 0x1a01d5: sub_1a01d5(); break;
        case 0x1a029c: sub_1a029c(); break;
        case 0x1a0028: sub_1a0028(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, eax * 4 + 0x1e1316));
            stop("ind 0160:19ecec");
    }
    memoryASet32(ds, 0x3a1e74, esi);
    memoryASet32(ds, 0x1e001c, edi);
    sub_1bb9a8();
    if (eax != ebx)
        goto loc_19e44b;
    memoryASet32(ds, 0x3a1e78, esi);
    memoryASet32(ds, 0x3a1f00, eax);
    memoryASet32(ds, 0x1e1600, eax);
    goto loc_19e44b;
}
void sub_19ed21() // 0160:19ed21 +long
{
    esp -= 4;
    goto loc_19ed21;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2255 bytes
loc_19ed21: // 0160:19ed21
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x3a1c68);
    esi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_19ed89;
loc_19ed3f: // 0160:19ed3f
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    edi = eax;
    edx = 0;
    edi <<= 2;
    memoryASet32(ds, esp, eax);
    ebx = memoryAGet32(ds, edi + 3808716);
    goto loc_19ed83;
loc_19ed58: // 0160:19ed58
    ebx++;
    ebx &= 0x00000003;
    ecx = ebx + edi;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_19ed82;
    if (memoryAGet32(ds, eax + 3803594) != 0x00000000)
        goto loc_19ed82;
    edx = 0x00000004;
    memoryASet32(ds, esp + 4, ecx);
    esi = edx;
loc_19ed82: // 0160:19ed82
    edx++;
loc_19ed83: // 0160:19ed83
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_19ed58;
    esi++;
loc_19ed89: // 0160:19ed89
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_19ed3f;
    ecx = memoryAGet32(ds, esp + 4);
    if ((int32_t)ecx < 0)
        goto loc_19ed98;
    ebx = ecx;
loc_19ed98: // 0160:19ed98
    esi = 0;
    edi = memoryAGet32(ds, 0x1e15ec);
    memoryASet32(ds, 0x3a1cd0, esi);
    if (edi)
        goto loc_19edc1;
    if (memoryAGet32(ds, 0x1e15f4) == 0x00000000)
        goto loc_19edc1;
    if (memoryAGet32(ds, 0x3a1ef8) != 0x00000000)
        goto loc_19edc1;
    sub_19e83e();
loc_19edc1: // 0160:19edc1
    if (memoryAGet32(ds, 0x1e0008) == 0x00000000)
        goto loc_19ee05;
    if ((int32_t)memoryAGet32(ds, 0x1e15f0) < (int32_t)0x00000002)
        goto loc_19ee05;
    if (memoryAGet32(ds, 0x1e15f4) == 0x00000000)
        goto loc_19ee05;
    if ((int32_t)memoryAGet32(ds, 0x1e15fc) >= (int32_t)0x00000003)
        goto loc_19ee05;
    if (memoryAGet32(ds, 0x3a1ef8) != 0x00000000)
        goto loc_19ee05;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19ee05;
    if (memoryAGet32(ds, 0x1e15ec) != 0x00000000)
        goto loc_19ee05;
    sub_19e298();
loc_19ee05: // 0160:19ee05
    ecx = memoryAGet32(ds, 0x3a1efc);
    if (ecx)
        goto loc_19ee1a;
    memoryASet32(ds, 0x1e00a0, ecx);
    sub_1a4e56();
loc_19ee1a: // 0160:19ee1a
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_19ee28;
    sub_198f43();
loc_19ee28: // 0160:19ee28
    ebp = memoryAGet32(ds, 0x3a1efc);
    if (ebp)
        goto loc_19ee84;
    if (memoryAGet32(ds, 0x3a1e80) != 0x00000001)
        goto loc_19ee84;
    if (memoryAGet32(ds, 0x3a1c60) == 0x00000000)
        goto loc_19ee84;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_19ee84;
    edi = 0x00000001;
    edx = 0x00000032;
    memoryASet32(ds, 0x1e15f0, ebp);
    memoryASet32(ds, 0x3a1d88, ebp);
    memoryASet32(ds, 0x3a1ef8, ebp);
    memoryASet32(ds, 0x3a1cc0, edi);
    memoryASet32(ds, 0x3a1efc, edx);
    sub_19f178();
loc_19ee84: // 0160:19ee84
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_19ee92;
    sub_19e3c6();
loc_19ee92: // 0160:19ee92
    if (memoryAGet32(ds, 0x3a1cc8) == 0x00000000)
        goto loc_19efa5;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_19efa5;
    if (memoryAGet32(ds, 0x1e15fc) == 0x00000002)
        goto loc_19eeba;
    sub_19e8cb();
loc_19eeba: // 0160:19eeba
    if (memoryAGet32(ds, 0x3a1cc8) == 0x00000000)
        goto loc_19eee1;
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_19eee1;
    esi = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1d70);
    memoryASet32(ds, 0x3a1e58, esi);
    sub_1b420c();
loc_19eee1: // 0160:19eee1
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_19efa5;
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_19ef04;
    sub_1a8a9c();
    if ((int32_t)eax <= 0)
        goto loc_19efa5;
loc_19ef04: // 0160:19ef04
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = ebx * 0x000000ac;
    esi = eax + 160;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1f20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx -= esi;
    esi = eax + 84;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax -= esi;
    eax = (int32_t)eax * (int32_t)eax;
    ecx += eax;
    if ((int32_t)ecx <= (int32_t)0x00010000)
        goto loc_19ef7f;
    if (memoryAGet32(ds, 0x3a1f08) == 0x00010000)
        goto loc_19ef86;
loc_19ef7f: // 0160:19ef7f
    sub_19eaa6();
    goto loc_19ef90;
loc_19ef86: // 0160:19ef86
    memoryASet32(ds, 0x3a1d78, 0x00000001);
loc_19ef90: // 0160:19ef90
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1cc4);
    memoryASet32(ds, 0x3a1d74, ebx);
    memoryASet32(ds, 0x3a1c60, eax);
loc_19efa5: // 0160:19efa5
    esp += 0x00000008;
    goto loc_19e44b;
}
void sub_19efad() // 0160:19efad +long
{
    esp -= 4;
    goto loc_19efad;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2907 bytes
loc_19efad: // 0160:19efad
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1e15e8);
    if ((int32_t)edx <= 0)
        goto loc_19f000;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e15e8, ebx);
    if (ebx)
        goto loc_19f000;
    edx = memoryAGet32(ds, 0x1e15e4);
    if (memoryAGet32(ds, edx * 4 + 0x1e15d4) != 0x00000000)
        goto loc_19f000;
    edi = 0xffffffff;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x1e15e8, edi);
    sub_19e30a();
    edx = eax;
    eax = 0x0000003d;
    sub_1bda16();
loc_19f000: // 0160:19f000
    ebp = memoryAGet32(ds, 0x3a1e7c);
    if (!ebp)
        goto loc_19f052;
    eax = ebp + -1;
    memoryASet32(ds, 0x3a1e7c, eax);
    if (eax)
        goto loc_19f052;
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = 0x00000001;
    memoryASet32(ds, 0x3a1cc0, eax);
    memoryASet32(ds, 0x3a1f00, ecx);
    memoryASet32(ds, edx + 3803530, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803550, ebx);
    memoryASet32(ds, 0x3a1efc, 0x00000032);
loc_19f052: // 0160:19f052
    ecx = memoryAGet32(ds, 0x3a1e78);
    if (!ecx)
        goto loc_19f06f;
    esi = ecx + -1;
    memoryASet32(ds, 0x3a1e78, esi);
    if (esi)
        goto loc_19f06f;
    memoryASet32(ds, 0x3a1f00, esi);
loc_19f06f: // 0160:19f06f
    if (memoryAGet32(ds, 0x1e15fc) != 0x00000003)
        goto loc_19f08f;
    eax = memoryAGet32(ds, 0x1e15f0);
    if (eax != memoryAGet32(ds, 0x1e15f8))
        goto loc_19f08f;
    memoryASet32(ds, 0x1e15fc, 0x00000004);
loc_19f08f: // 0160:19f08f
    if (memoryAGet32(ds, 0x3a1d74) == 0x00000000)
        goto loc_19f0eb;
    esi = memoryAGet32(ds, 0x3a1d78);
    if (esi)
        goto loc_19f0eb;
    eax = memoryAGet32(ds, 0x3a1cc4);
    ebp = memoryAGet32(ds, 0x3a1f1c);
    edx = memoryAGet32(ds, 0x3a1f18);
    ebx = memoryAGet32(ds, 0x3a1f20);
    memoryASet32(ds, 0x3a1c60, eax);
    eax = memoryAGet32(ds, 0x3a1f14);
    edx -= ebx;
    eax -= ebp;
    edi = 0x00000001;
    eax += edx;
    memoryASet32(ds, 0x3a1f00, edi);
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_19f0eb;
    memoryASet32(ds, 0x3a1d74, esi);
    memoryASet32(ds, 0x3a1e78, 0x00000032);
loc_19f0eb: // 0160:19f0eb
    if (memoryAGet32(ds, 0x3a1d78) == 0x00000000)
        goto loc_19e44b;
    ebp = 0x00000001;
    eax = 0x00000002;
    edx = memoryAGet32(ds, 0x3a1d74);
    memoryASet32(ds, 0x3a1f00, ebp);
    edx += 0x00000010;
    memoryASet32(ds, 0x3a1f24, eax);
    memoryASet32(ds, 0x3a1d74, edx);
    if ((int32_t)edx < (int32_t)0x00000801)
        goto loc_19f144;
    esi = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x3a1d74, esi);
    memoryASet32(ds, 0x3a1f24, esi);
    memoryASet32(ds, 0x3a1d78, esi);
    memoryASet32(ds, 0x3a1e78, eax);
    goto loc_19f14e;
loc_19f144: // 0160:19f144
    if (edx != 0x00000011)
        goto loc_19f14e;
    sub_19eaa6();
loc_19f14e: // 0160:19f14e
    edx = memoryAGet32(ds, 0x3a1d74);
    edx = memoryAGet32(ds, edx * 4 + 0x1d7ff0);
    edx += edx;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax += 0x00010000;
    memoryASet32(ds, 0x3a1f08, eax);
    goto loc_19e44b;
}
void sub_19f178() // 0160:19f178 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x3a1f14, eax);
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    memoryASet32(ds, 0x3a1f18, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19f1c7() // 0160:19f1c7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x3a1d68);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3806726);
    if ((int32_t)ebx <= 0)
        goto loc_19f1f8;
    ecx = ebx + -1;
    memoryASet32(ds, eax + 3806726, ecx);
loc_19f1f8: // 0160:19f1f8
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19f1fc() // 0160:19f1fc +long
{
    esp -= 4;
    goto loc_19f1fc;
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3498 bytes
loc_19f1fc: // 0160:19f1fc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x3a1efc);
    if (edx)
        goto loc_19f2e8;
    esi = 0x00000001;
    edi = memoryAGet32(ds, 0x3a1e70);
    memoryASet32(ds, 0x3a1db8, esi);
    if (edi != esi)
        goto loc_19f248;
    memoryASet32(ds, 0x3a1cc0, edx);
    memoryASet32(ds, 0x3a1f00, esi);
    ecx = 0;
    edx = 0x00000032;
    memoryASet32(ds, 0x3a1e78, ecx);
    memoryASet32(ds, 0x3a1efc, edx);
    goto loc_19f2c8;
loc_19f248: // 0160:19f248
    if (edi != 0x00000002)
        goto loc_19f2c8;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1cc0, edx);
    edx = 0x00000032;
    al &= 0xfc;
    memoryASet32(ds, 0x3a1efc, edx);
    edx = eax * 0x000000ac;
    memoryASet32(ds, 0x3a1f00, esi);
    memoryASet32(ds, edx + 3803594, esi);
    edx = eax + esi;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803594, esi);
    edx = eax + edi;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803594, esi);
    memoryASet32(ds, eax + 3803594, esi);
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax += 0x00000031;
    memoryASet(ds, 0x1d707c, al);
    eax = 0x001d706b;
    sub_19fde2();
loc_19f2c8: // 0160:19f2c8
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000032;
    sub_1bda16();
    goto loc_19e44c;
loc_19f2e8: // 0160:19f2e8
    ebx = 0x00000010;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x3a1c78, ebx);
    memoryASet32(ds, 0x3a1dec, ecx);
    memoryASet(ds, 0x3a9f71, ah);
    goto loc_19e44c;
}
void sub_19f308() // 0160:19f308 +long
{
    esp -= 4;
    push32(edx);
    sub_19f1c7();
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fd41();
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x3a1d68);
    if ((int32_t)memoryAGet32(ds, eax * 4 + 0x3a1606) < (int32_t)0x00000000)
        goto loc_19f344;
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fde2();
loc_19f344: // 0160:19f344
    edx = pop32();
    esp += 4;
}
void sub_19f346() // 0160:19f346 +long
{
    esp -= 4;
    goto loc_19f346;
loc_19e448: // 0160:19e448
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3828 bytes
loc_19f346: // 0160:19f346
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = 0;
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3803518);
    ecx -= 0x00000004;
    eax += eax;
    esi = memoryAGet32(ds, ebx + 3803518);
    ecx += eax;
    if ((int32_t)esi >= 0)
        goto loc_19f391;
    ecx--;
loc_19f391: // 0160:19f391
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    esi = ecx;
    ebx = eax;
    eax += 0x00000009;
    ecx += 0x00000009;
    memoryASet32(ds, esp, eax);
loc_19f3be: // 0160:19f3be
    if ((int32_t)ebx <= 0)
        goto loc_19f422;
    if (esi >= 0x000003c0)
        goto loc_19f422;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = esi;
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_19f422;
    eax = 0x00000001;
    goto loc_19f424;
loc_19f422: // 0160:19f422
    eax = 0;
loc_19f424: // 0160:19f424
    edi |= eax;
    if ((int32_t)ebx <= 0)
        goto loc_19f48a;
    if (ecx >= 0x000003c0)
        goto loc_19f48a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_19f48a;
    eax = 0x00000001;
    goto loc_19f48c;
loc_19f48a: // 0160:19f48a
    eax = 0;
loc_19f48c: // 0160:19f48c
    esi++;
    ebx++;
    edi |= eax;
    eax = memoryAGet32(ds, esp);
    ecx--;
    if (ebx != eax)
        goto loc_19f3be;
    eax = edi;
    goto loc_19e448;
}
void sub_19f4a3() // 0160:19f4a3 +long
{
    esp -= 4;
    goto loc_19f4a3;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4177 bytes
loc_19f4a3: // 0160:19f4a3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x3a1c64);
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3803542);
    if (eax < 0x00000022)
        goto loc_19f541;
    if (eax <= 0x00000022)
        goto loc_19fae0;
    if (eax < 0x00000033)
        goto loc_19f50b;
    if (eax <= 0x00000033)
        goto loc_19f8b0;
    if (eax < 0x00000036)
        goto loc_19f4fd;
    if (eax <= 0x00000036)
        goto loc_19f66a;
    if (eax < 0x00000038)
        goto loc_19e44b;
    if (eax <= 0x00000038)
        goto loc_19fbeb;
    if (eax == 0x0000003e)
        goto loc_19fc77;
    goto loc_19e44b;
loc_19f4fd: // 0160:19f4fd
    if (eax == 0x00000034)
        goto loc_19fb2f;
    goto loc_19e44b;
loc_19f50b: // 0160:19f50b
    if (eax < 0x00000027)
        goto loc_19f533;
    if (eax <= 0x00000027)
        goto loc_19f79a;
    if (eax < 0x0000002b)
        goto loc_19e44b;
    if (eax <= 0x0000002b)
        goto loc_19fb6b;
    if (eax == 0x0000002f)
        goto loc_19f80a;
    goto loc_19e44b;
loc_19f533: // 0160:19f533
    if (eax == 0x00000024)
        goto loc_19f63a;
    goto loc_19e44b;
loc_19f541: // 0160:19f541
    if (eax < 0x0000000b)
        goto loc_19f582;
    if (eax <= 0x0000000b)
        goto loc_19f86e;
    if (eax < 0x00000014)
        goto loc_19f574;
    if (eax <= 0x00000014)
        goto loc_19f9d2;
    if (eax < 0x00000019)
        goto loc_19e44b;
    if (eax <= 0x00000019)
        goto loc_19fa3d;
    if (eax == 0x0000001f)
        goto loc_19fa88;
    goto loc_19e44b;
loc_19f574: // 0160:19f574
    if (eax == 0x00000010)
        goto loc_19f92b;
    goto loc_19e44b;
loc_19f582: // 0160:19f582
    if (eax < 0x00000004)
        goto loc_19f597;
    if (eax <= 0x00000004)
        goto loc_19f602;
    if (eax == 0x00000006)
        goto loc_19f703;
    goto loc_19e44b;
loc_19f597: // 0160:19f597
    if (eax)
        goto loc_19e44b;
    if (memoryAGet32(ds, 0x3a140e) != 0x00000000)
        goto loc_19e44b;
    eax = ebx * 0x000000ac;
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803478);
    memoryASet32(ds, edx + 3803474, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = 0;
    ecx = 0x0000002b;
    memoryASet32(ds, eax + 3803470, edx);
    sub_19f308();
    sub_19e2d6();
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
loc_19f5ef: // 0160:19f5ef
    sub_19e30a();
    edx = eax;
    eax = ecx;
loc_19f5f8: // 0160:19f5f8
    sub_1bda16();
    goto loc_19e44b;
loc_19f602: // 0160:19f602
    esi = memoryAGet32(ds, 0x3a1552);
    if (esi)
        goto loc_19e44b;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000005);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, esi);
loc_19f630: // 0160:19f630
    sub_19f308();
    goto loc_19fd37;
loc_19f63a: // 0160:19f63a
    ebp = memoryAGet32(ds, 0x3a1552);
    if (ebp)
        goto loc_19e44b;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000025);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, ebp);
    goto loc_19f630;
loc_19f66a: // 0160:19f66a
    memoryASet32(ds, edx + 3803474, 0x00000037);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3803470, esi);
    sub_19f308();
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    edi = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += edi;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) != 0x00000000)
        goto loc_19fd37;
    eax = memoryAGet32(ds, 0x3a1c64);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803618, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803618, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803618, esi);
    ebp = 0x00000096;
    memoryASet32(ds, eax + 3803618, esi);
    memoryASet32(ds, 0x3a1c88, ebp);
    goto loc_19fd37;
loc_19f703: // 0160:19f703
    ebp = memoryAGet32(ds, 0x3a140e);
    if (ebp)
        goto loc_19e44b;
    edx = ebx * 0x000000ac;
    memoryASet32(ds, 0x3a1c78, 0x00000011);
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803478);
    memoryASet32(ds, eax + 3803474, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, ebp);
    eax = memoryAGet32(ds, 0x3a1e84);
    memoryASet32(ds, 0x1e15f0, ebp);
    if (eax)
        goto loc_19f761;
    memoryASet32(ds, 0x3a1e84, 0x00000001);
    sub_19f308();
loc_19f761: // 0160:19f761
    sub_19e2d6();
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1c64);
    ecx = memoryAGet32(ds, 0x3a1e80);
    memoryASet32(ds, 0x3a1e88, ebx);
    ecx += ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x3a1e80, ecx);
    sub_19e30a();
    edx = eax;
    eax = 0x0000000c;
    goto loc_19f5f8;
loc_19f79a: // 0160:19f79a
    if (memoryAGet32(ds, 0x3a140e) != 0x00000000)
        goto loc_19e44b;
    eax = ebx * 0x000000ac;
    ebp = 0x00000010;
    memoryASet32(ds, 0x3a1c78, ebp);
    edx = memoryAGet32(ds, eax + 3803478);
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 3803474, edx);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x3a1c64);
    edx = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax = ecx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    esi = 0x00000054;
    memoryASet32(ds, eax + 3803470, edx);
    edi = 0x000001f4;
    memoryASet32(ds, 0x3a1d18, esi);
    memoryASet32(ds, 0x3a1c8c, edi);
    goto loc_19f630;
loc_19f80a: // 0160:19f80a
    if (memoryAGet32(ds, 0x3a140e) != 0x00000000)
        goto loc_19e44b;
    ebp = 0x00000010;
    memoryASet32(ds, 0x3a1c78, ebp);
    eax = memoryAGet32(ds, edx + 3803478);
    memoryASet32(ds, edx + 3803474, eax);
    edx = eax;
    eax <<= 2;
    eax -= edx;
    ebx = memoryAGet32(ds, 0x3a1c64);
    edx = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax = ebx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    ecx = 0x00000048;
    memoryASet32(ds, eax + 3803470, edx);
    esi = 0x000001f4;
    memoryASet32(ds, 0x3a1d18, ecx);
    memoryASet32(ds, 0x3a1c8c, esi);
    goto loc_19f630;
loc_19f86e: // 0160:19f86e
    if (memoryAGet32(ds, 0x3a1552) != 0x00000000)
        goto loc_19e44b;
    eax = 0x0000000b;
    ecx = 0x00000010;
    esi = 0x00000001;
    sub_1ae6ce();
    memoryASet32(ds, 0x3a1c78, ecx);
    memoryASet32(ds, 0x3a1e88, esi);
    sub_19f308();
    sub_19e2d6();
    memoryASet32(ds, 0x3a1dc4, esi);
    goto loc_19e44b;
loc_19f8b0: // 0160:19f8b0
    if (memoryAGet32(ds, 0x3a1c78) == 0x00000010)
        goto loc_19e44b;
    eax = ebx;
    sub_19e30a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    sub_1bda16();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, 0x3a1e7c, 0x000000fa);
    edx = memoryAGet32(ds, eax + 3803498);
    ecx = 0x00000001;
    edx -= 0x00000200;
    eax = memoryAGet32(ds, eax + 3803502);
    ebx = 0x00000010;
    sub_1b2ed9();
    memoryASet32(ds, 0x3a1c78, ebx);
    memoryASet32(ds, 0x3a1e88, ecx);
    sub_19f308();
    sub_19e2d6();
    memoryASet32(ds, 0x3a1dc4, ecx);
    goto loc_19e44b;
loc_19f92b: // 0160:19f92b
    sub_19f308();
    sub_19e2d6();
    eax = 0x00000001;
    edi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1e6c, eax);
    memoryASet32(ds, 0x3a1dec, eax);
    eax = edi * 0x000000ac;
    dl = 0x01;
    ebx = 0x00000015;
    ecx = 0;
    memoryASet(ds, 0x3a9f71, dl);
    memoryASet32(ds, 0x3a1ccc, ebx);
    edx = 0x00000011;
    memoryASet32(ds, 0x3a1e50, ecx);
    memoryASet32(ds, 0x3a1c78, edx);
    memoryASet32(ds, eax + 3803470, ecx);
    eax = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_19f99f;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000013);
    goto loc_19e44b;
loc_19f99f: // 0160:19f99f
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_19f9bd;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000012);
    goto loc_19e44b;
loc_19f9bd: // 0160:19f9bd
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, edx);
    goto loc_19e44b;
loc_19f9d2: // 0160:19f9d2
    sub_19f308();
    sub_19e2d6();
    memoryASet(ds, 0x3a9f71, 0x01);
    eax = 0x00000015;
    ecx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1ccc, eax);
    eax = ecx * 0x000000ac;
    edi = 0x00000001;
    ebp = 0x00000011;
    esi = 0x00000015;
    edx = 0;
    memoryASet32(ds, 0x3a1e6c, edi);
    memoryASet32(ds, 0x3a1c78, ebp);
    memoryASet32(ds, 0x3a1e50, edx);
    memoryASet32(ds, 0x3a1dec, edi);
    memoryASet32(ds, eax + 3803474, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, edx);
    goto loc_19e44b;
loc_19fa3d: // 0160:19fa3d
    memoryASet32(ds, 0x3a1dc8, 0x00000001);
    sub_19f308();
    sub_19e2d6();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1c78, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803470, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x0000001a);
    goto loc_19e44b;
loc_19fa88: // 0160:19fa88
    sub_19f308();
    sub_19e2d6();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = 0x00000011;
    ebp = 0;
    memoryASet32(ds, 0x3a1c78, esi);
    memoryASet32(ds, eax + 3803470, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0x00000020;
    ecx = 0x00000001;
    memoryASet32(ds, eax + 3803474, ebx);
    memoryASet32(ds, 0x3a1e6c, ecx);
    memoryASet32(ds, 0x3a1d00, ebp);
    memoryASet32(ds, 0x3a1d04, ebp);
    goto loc_19e44b;
loc_19fae0: // 0160:19fae0
    sub_19f308();
    sub_19e2d6();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edi = 0x00000011;
    edx = 0;
    memoryASet32(ds, 0x3a1c78, edi);
    memoryASet32(ds, eax + 3803470, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000023);
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x3a1c64);
    ecx = 0x00000016;
    goto loc_19f5ef;
loc_19fb2f: // 0160:19fb2f
    sub_19e2d6();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1c78, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803470, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000035);
    goto loc_19e44b;
loc_19fb6b: // 0160:19fb6b
    edi = memoryAGet32(ds, 0x3a140e);
    if (edi)
        goto loc_19e44b;
    sub_19f308();
    sub_19e2d6();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803478);
    memoryASet32(ds, eax + 3803474, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, edi);
    edx = memoryAGet32(ds, 0x3a1c78);
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3a1d38, 0x00000004);
    memoryASet32(ds, 0x3a1d40, edi);
    memoryASet32(ds, 0x3a1d3c, eax);
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000002b;
    goto loc_19f5f8;
loc_19fbeb: // 0160:19fbeb
    if (memoryAGet32(ds, 0x1e3a98) != 0x00000000)
        goto loc_19fc5f;
    sub_19f346();
    if (eax)
        goto loc_19fc5f;
    edi = 0x00000001;
    ebp = 0x00000010;
    eax = 0x00000038;
    memoryASet32(ds, 0x3a1d2c, edi);
    memoryASet32(ds, 0x3a1c78, ebp);
    sub_1afc2f();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1efc, eax);
    eax = edx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, 0x3a1d8c, edx);
    eax = memoryAGet32(ds, eax + 3803498);
    eax -= 0x00000800;
    memoryASet32(ds, 0x3a1d94, edx);
    memoryASet32(ds, 0x3a1d90, eax);
    memoryASet32(ds, 0x3a1d98, eax);
    goto loc_19e44b;
loc_19fc5f: // 0160:19fc5f
    ecx = 0x00000010;
    esi = 0;
    memoryASet32(ds, 0x3a1c78, ecx);
    memoryASet32(ds, 0x3a1d88, esi);
    goto loc_19e44b;
loc_19fc77: // 0160:19fc77
    esi = 0x00000001;
    eax = ebx;
    ebp = 0x00000010;
    sub_19e30a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    ecx = 0;
    sub_1bda16();
    sub_1b5d3b();
    memoryASet32(ds, 0x3a1cc0, ecx);
    memoryASet32(ds, 0x3a1f00, esi);
    memoryASet32(ds, 0x3a1e78, ecx);
    memoryASet32(ds, 0x3a1c78, ebp);
    memoryASet32(ds, 0x3a1dc4, esi);
    memoryASet32(ds, 0x3a1d88, esi);
    sub_19f308();
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += ebx;
    al = memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_19fd37;
    eax = memoryAGet32(ds, 0x3a1c64);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    esi = 0;
    memoryASet32(ds, edx + 3803622, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803622, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803622, esi);
    memoryASet32(ds, eax + 3803622, esi);
loc_19fd37: // 0160:19fd37
    sub_19e2d6();
    goto loc_19e44b;
}
void sub_19fd41() // 0160:19fd41 +long
{
    esp -= 4;
    goto loc_19fd41;
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6383 bytes
loc_19fd41: // 0160:19fd41
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x3a1c68);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x3a1d68);
    esi += ebx;
    eax += memoryAGet32(ds, edx * 4 + 0x1e02ee);
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    edi = memoryAGet32(ds, ebx + 3806726);
    ecx = eax + 2;
    if (edi)
        goto loc_19fd89;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_19e44c;
loc_19fd89: // 0160:19fd89
    if (edi != 0xffffffff)
        goto loc_19fd9c;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_19e44c;
loc_19fd9c: // 0160:19fd9c
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x3a1d68);
    edx += esi;
    edx = memoryAGet32(ds, edx * 4 + 0x3a1606);
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_19fdba;
    edx = 0x00000009;
loc_19fdba: // 0160:19fdba
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_19e44c;
}
void sub_19fdc8() // 0160:19fdc8 +long
{
    esp -= 4;
    push32(ecx);
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19fde0;
    ecx = ebx;
    ebx = edx;
    edx = 0x00218b90;
    sub_198797();
loc_19fde0: // 0160:19fde0
    ecx = pop32();
    esp += 4;
}
void sub_19fde2() // 0160:19fde2 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19fe02;
    edx = 0x00218b90;
    ebx = 0x000000c8;
    sub_198723();
    memoryASet32(ds, 0x39eaa4, ebx);
loc_19fe02: // 0160:19fe02
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19fe05() // 0160:19fe05 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_19fe19;
    if (eax != 0x001d67fd)
        goto loc_19fe44;
loc_19fe19: // 0160:19fe19
    edx = 0x00218b90;
    ebx = 0x00001400;
    ecx = 0x00000190;
    esi = 0x00000001;
    sub_198723();
    memoryASet32(ds, 0x39eab8, ebx);
    memoryASet32(ds, 0x39eaa4, ecx);
    memoryASet32(ds, 0x39ea90, esi);
loc_19fe44: // 0160:19fe44
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19fe49() // 0160:19fe49 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    edx = eax;
    edi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax += 0x00000030;
    memoryASet(ds, esi + ebx, al);
    eax = esi;
    sub_19fe05();
    memoryASet32(ds, 0x3a1c88, ecx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19fe73() // 0160:19fe73 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    edx = ebx;
    if (!eax)
        goto loc_19fe92;
    eax = 0;
loc_19fe81: // 0160:19fe81
    bl = memoryAGet(ds, eax + 1929297);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax >= (int32_t)0x0000000c)
        goto loc_19fea1;
    goto loc_19fe81;
loc_19fe92: // 0160:19fe92
    bl = memoryAGet(ds, eax + 1929310);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_19fe92;
loc_19fea1: // 0160:19fea1
    eax = esi;
    sub_19fe05();
    memoryASet32(ds, 0x3a1d84, ecx);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_19feb1() // 0160:19feb1 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (edx == 0x0000003f)
        goto loc_19fec3;
    edi = 0;
    memoryASet32(ds, 0x3a1d30, edi);
loc_19fec3: // 0160:19fec3
    if (edx == 0x00000038)
        goto loc_19fed0;
    ebp = 0;
    memoryASet32(ds, 0x3a1d2c, ebp);
loc_19fed0: // 0160:19fed0
    eax = 0;
    edi = 0;
    memoryASet32(ds, 0x3a1db8, eax);
    memoryASet32(ds, 0x3a1e70, eax);
    memoryASet32(ds, 0x3a1cd0, eax);
    memoryASet32(ds, 0x3a1d64, eax);
    memoryASet32(ds, 0x3a1f24, edi);
    memoryASet32(ds, 0x3a1cec, edi);
    memoryASet32(ds, 0x3a1d7c, edi);
    eax = 0x000003c0;
    edi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1d1c, eax);
    eax = edi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x3a1cb4, ebp);
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, eax + 3803582, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803542, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803590, 0x00000001);
    if ((int32_t)ebx < 0)
        goto loc_19ff62;
    memoryASet32(ds, 0x3a1d68, ebx);
    eax = ecx;
    memoryASet32(ds, 0x3a1d6c, ecx);
    sub_19fd41();
loc_19ff62: // 0160:19ff62
    if (memoryAGet32(ds, 0x3a1e74) != 0x00000000)
        goto loc_19ff89;
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_19ff89;
    eax = ecx;
    sub_19fde2();
    memoryASet32(ds, 0x39eaa4, 0xffffffff);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_19ff89: // 0160:19ff89
    ebx = 0xffffffff;
    eax = ecx;
    edx = 0;
    sub_19fdc8();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_19ff9b() // 0160:19ff9b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6826;
    eax = 0x00000032;
    ebx = 0;
    edx = 0;
    goto loc_1a001f;
    // gap 113 bytes
loc_1a001f: // 0160:1a001f
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ffae() // 0160:19ffae +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001d6868;
    edx = 0x001d684f;
    eax = memoryAGet32(ds, 0x3a1d84);
    sub_19fe73();
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = memoryAGet32(ds, 0x3a1c88);
    ecx = 0x001d684f;
    sub_19fe49();
    ebx = 0x00000002;
    edx = 0x00000004;
    eax = 0x00000032;
    goto loc_1a001f;
    // gap 48 bytes
loc_1a001f: // 0160:1a001f
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19ffef() // 0160:19ffef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6878;
    ebx = 0x00000004;
    edx = 0x00000006;
    eax = 0x00000019;
    goto loc_1a001f;
    // gap 23 bytes
loc_1a001f: // 0160:1a001f
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0008() // 0160:1a0008 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d68a1;
    ebx = 0x00000008;
    edx = 0x0000000b;
    eax = 0x0000004b;
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0028() // 0160:1a0028 +long
{
    esp -= 4;
    goto loc_1a0028;
loc_1a001a: // 0160:1a001a
    eax = 0x0000004b;
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a0028: // 0160:1a0028
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6bd5;
    ebx = 0x00000013;
    edx = 0x0000003e;
    goto loc_1a001a;
}
void sub_1a003c() // 0160:1a003c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803622) == 0x00000000)
        goto loc_1a005b;
    sub_1a0028();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a005b: // 0160:1a005b
    ecx = 0x001d6adf;
    ebx = 0x00000009;
    edx = 0x00000033;
    eax = 0x0000004b;
    goto loc_1a0126;
    // gap 178 bytes
loc_1a0126: // 0160:1a0126
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0074() // 0160:1a0074 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d68ca;
    ebx = 0x0000000c;
    edx = 0x00000010;
    eax = 0x0000000f;
    sub_19feb1();
    edx = 0;
    memoryASet32(ds, 0x3a1c84, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a009c() // 0160:1a009c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d68f3;
    ebx = 0x0000000d;
    edx = 0x00000014;
    eax = 0x0000000f;
    goto loc_1a0126;
    // gap 113 bytes
loc_1a0126: // 0160:1a0126
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a00b5() // 0160:1a00b5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d691c;
    ebx = 0x0000000b;
    edx = 0x00000016;
    eax = 0;
    sub_19feb1();
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1f1c);
    ecx = 0;
    eax += 0x00000280;
    memoryASet32(ds, 0x3a1cd0, edx);
    memoryASet32(ds, 0x3a1d7c, edx);
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, 0x3a1f20);
    memoryASet32(ds, 0x3a1d0c, ecx);
    eax += 0x00000140;
    memoryASet32(ds, 0x3a1d10, ecx);
    memoryASet32(ds, 0x3a1cd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a010f() // 0160:1a010f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6945;
    ebx = 0x00000006;
    edx = 0x00000019;
    eax = 0x0000001e;
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a012f() // 0160:1a012f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d696e;
    ebx = 0x00000011;
    edx = 0x0000001f;
    eax = 0x00000032;
    sub_19feb1();
    edx = 0;
    memoryASet32(ds, 0x3a1d00, edx);
    memoryASet32(ds, 0x3a1d04, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a015d() // 0160:1a015d +long
{
    esp -= 4;
    goto loc_1a015d;
loc_1a0121: // 0160:1a0121
    eax = 0x0000001e;
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 46 bytes
loc_1a015d: // 0160:1a015d
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6997;
    ebx = 0x00000007;
    edx = 0x00000022;
    goto loc_1a0121;
}
void sub_1a0171() // 0160:1a0171 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803618) == 0x00000000)
        goto loc_1a0190;
    sub_1a01d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a0190: // 0160:1a0190
    ebx = 0x001d69dc;
    edx = 0x001d69c0;
    eax = memoryAGet32(ds, 0x3a1d84);
    sub_19fe73();
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = memoryAGet32(ds, 0x3a1c88);
    ecx = 0x001d69c0;
    sub_19fe49();
    ebx = 0x00000003;
    edx = 0x00000024;
    eax = 0x0000001e;
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a01d5() // 0160:1a01d5 +long
{
    esp -= 4;
    goto loc_1a01d5;
loc_1a01cc: // 0160:1a01cc
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a01d5: // 0160:1a01d5
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001d6a05;
    edx = 0x001d69e9;
    eax = memoryAGet32(ds, 0x3a1d84);
    sub_19fe73();
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = memoryAGet32(ds, 0x3a1c88);
    ecx = 0x001d69e9;
    sub_19fe49();
    ebx = 0x00000014;
    edx = 0x00000036;
    eax = 0x00000032;
    goto loc_1a01cc;
}
void sub_1a0216() // 0160:1a0216 +long
{
    esp -= 4;
    goto loc_1a0216;
loc_1a0106: // 0160:1a0106
    memoryASet32(ds, 0x3a1cd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 263 bytes
loc_1a0216: // 0160:1a0216
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6a12;
    ebx = 0x0000000a;
    edx = 0x00000026;
    eax = 0x0000001e;
    sub_19feb1();
    eax = memoryAGet32(ds, 0x3a1f1c);
    eax += 0x00000280;
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, 0x3a1f20);
    edx = 0x00000001;
    eax += 0x00000140;
    memoryASet32(ds, 0x3a1cd0, edx);
    goto loc_1a0106;
}
void sub_1a025b() // 0160:1a025b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803614) == 0x00000000)
        goto loc_1a027a;
    sub_1a029c();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a027a: // 0160:1a027a
    ecx = 0x001d6a3b;
    ebx = 0x00000005;
    edx = 0x00000027;
    eax = ebx;
    sub_19feb1();
    ecx = 0;
    memoryASet32(ds, 0x3a1d48, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a029c() // 0160:1a029c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6ab6;
    ebx = 0x00000012;
    edx = 0x0000002f;
    eax = 0x00000005;
    sub_19feb1();
    edx = 0;
    memoryASet32(ds, 0x3a1d48, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a02c4() // 0160:1a02c4 +long
{
    esp -= 4;
    goto loc_1a02c4;
loc_1a0106: // 0160:1a0106
    memoryASet32(ds, 0x3a1cd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 437 bytes
loc_1a02c4: // 0160:1a02c4
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6a8d;
    ebx = 0x00000001;
    edx = 0x0000002b;
    eax = 0x00000032;
    sub_19feb1();
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = 0x00000001;
    eax += 0x00000280;
    ebx = 0;
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, 0x3a1f20);
    memoryASet32(ds, 0x3a1cd0, edx);
    eax += 0x00000150;
    memoryASet32(ds, 0x3a1d1c, ebx);
    goto loc_1a0106;
}
void sub_1a0311() // 0160:1a0311 +long
{
    esp -= 4;
    goto loc_1a0311;
loc_1a01cc: // 0160:1a01cc
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 316 bytes
loc_1a0311: // 0160:1a0311
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ecx = 0x001d6b08;
    ebx = 0x0000000f;
    eax = 0;
    memoryASet32(ds, 0x3a1d30, edx);
    edx = 0x0000003f;
    goto loc_1a01cc;
}
void sub_1a0335() // 0160:1a0335 +long
{
    esp -= 4;
    goto loc_1a0335;
loc_1a01cc: // 0160:1a01cc
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 352 bytes
loc_1a0335: // 0160:1a0335
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ecx = 0x001d6b31;
    ebx = 0x0000000e;
    eax = 0;
    memoryASet32(ds, 0x3a1d2c, edx);
    edx = 0x00000038;
    goto loc_1a01cc;
}
void sub_1a0359() // 0160:1a0359 +long
{
    esp -= 4;
    goto loc_1a0359;
loc_1a0106: // 0160:1a0106
    memoryASet32(ds, 0x3a1cd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 586 bytes
loc_1a0359: // 0160:1a0359
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000004;
    ecx = 0x001d6a64;
    ebx = 0x00000010;
    memoryASet32(ds, 0x3a1d60, edx);
    sub_19e27a();
    edx = 0x00000014;
    eax = 0;
    sub_19feb1();
    eax = memoryAGet32(ds, 0x3a1f1c);
    ebx = 0x00000001;
    eax += 0x00000280;
    memoryASet32(ds, 0x3a1cd0, ebx);
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, 0x3a1f20);
    memoryASet32(ds, 0x3a1d64, ebx);
    eax += 0x00000150;
    memoryASet32(ds, 0x3a1db8, ebx);
    goto loc_1a0106;
}
void sub_1a03b7() // 0160:1a03b7 +long
{
    esp -= 4;
    goto loc_1a03b7;
loc_1a01cc: // 0160:1a01cc
    sub_19feb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 482 bytes
loc_1a03b7: // 0160:1a03b7
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6b5a;
    ebx = 0xffffffff;
    edx = 0x00000034;
    eax = 0;
    goto loc_1a01cc;
}
void sub_1a03d0() // 0160:1a03d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6b83;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_19feb1();
    memoryASet32(ds, 0x3a1e70, 0x00000001);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a03f7() // 0160:1a03f7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x001d6bac;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_19feb1();
    memoryASet32(ds, 0x3a1e70, 0x00000002);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a041e() // 0160:1a041e +long
{
    esp -= 4;
    goto loc_1a041e;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8140 bytes
loc_1a041e: // 0160:1a041e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, 0x3a1df0, edx);
    if (memoryAGet32(ds, eax + 3803542) != 0x00000004)
        goto loc_1a050b;
    if (memoryAGet(ds, 0x3a9f3a) == 0x00)
        goto loc_1a0460;
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = 0x00000032;
    sub_19fe49();
loc_1a0460: // 0160:1a0460
    if (memoryAGet(ds, 0x3a9f3b) == 0x00)
        goto loc_1a047d;
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = 0x00000064;
    sub_19fe49();
loc_1a047d: // 0160:1a047d
    if (memoryAGet(ds, 0x3a9f3c) == 0x00)
        goto loc_1a049a;
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = 0x00000096;
    sub_19fe49();
loc_1a049a: // 0160:1a049a
    if (memoryAGet(ds, 0x3a9f3d) == 0x00)
        goto loc_1a04b7;
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = 0x000000c8;
    sub_19fe49();
loc_1a04b7: // 0160:1a04b7
    if (memoryAGet(ds, 0x3a9f3e) == 0x00)
        goto loc_1a04d4;
    ebx = 0x0000000f;
    edx = 0x001d684f;
    eax = 0x000000fa;
    sub_19fe49();
loc_1a04d4: // 0160:1a04d4
    if (memoryAGet(ds, 0x3a9f44) == 0x00)
        goto loc_1a04f1;
    ebx = 0x001d6868;
    edx = 0x001d684f;
    eax = 0x00000001;
    sub_19fe73();
loc_1a04f1: // 0160:1a04f1
    if (memoryAGet(ds, 0x3a9f45) == 0x00)
        goto loc_1a050b;
    ebx = 0x001d6868;
    edx = 0x001d684f;
    eax = 0;
    sub_19fe73();
loc_1a050b: // 0160:1a050b
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000024)
        goto loc_1a05ea;
    if (memoryAGet(ds, 0x3a9f3a) == 0x00)
        goto loc_1a053f;
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = 0x00000032;
    sub_19fe49();
loc_1a053f: // 0160:1a053f
    if (memoryAGet(ds, 0x3a9f3b) == 0x00)
        goto loc_1a055c;
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = 0x00000064;
    sub_19fe49();
loc_1a055c: // 0160:1a055c
    if (memoryAGet(ds, 0x3a9f3c) == 0x00)
        goto loc_1a0579;
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = 0x00000096;
    sub_19fe49();
loc_1a0579: // 0160:1a0579
    if (memoryAGet(ds, 0x3a9f3d) == 0x00)
        goto loc_1a0596;
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = 0x000000c8;
    sub_19fe49();
loc_1a0596: // 0160:1a0596
    if (memoryAGet(ds, 0x3a9f3e) == 0x00)
        goto loc_1a05b3;
    ebx = 0x00000012;
    edx = 0x001d69c0;
    eax = 0x000000fa;
    sub_19fe49();
loc_1a05b3: // 0160:1a05b3
    if (memoryAGet(ds, 0x3a9f44) == 0x00)
        goto loc_1a05d0;
    ebx = 0x001d69dc;
    edx = 0x001d69c0;
    eax = 0x00000001;
    sub_19fe73();
loc_1a05d0: // 0160:1a05d0
    if (memoryAGet(ds, 0x3a9f45) == 0x00)
        goto loc_1a05ea;
    ebx = 0x001d69dc;
    edx = 0x001d69c0;
    eax = 0;
    sub_19fe73();
loc_1a05ea: // 0160:1a05ea
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000036)
        goto loc_1a06c9;
    if (memoryAGet(ds, 0x3a9f3a) == 0x00)
        goto loc_1a061e;
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = 0x00000032;
    sub_19fe49();
loc_1a061e: // 0160:1a061e
    if (memoryAGet(ds, 0x3a9f3b) == 0x00)
        goto loc_1a063b;
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = 0x00000064;
    sub_19fe49();
loc_1a063b: // 0160:1a063b
    if (memoryAGet(ds, 0x3a9f3c) == 0x00)
        goto loc_1a0658;
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = 0x00000096;
    sub_19fe49();
loc_1a0658: // 0160:1a0658
    if (memoryAGet(ds, 0x3a9f3d) == 0x00)
        goto loc_1a0675;
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = 0x000000c8;
    sub_19fe49();
loc_1a0675: // 0160:1a0675
    if (memoryAGet(ds, 0x3a9f3e) == 0x00)
        goto loc_1a0692;
    ebx = 0x00000012;
    edx = 0x001d69e9;
    eax = 0x000000fa;
    sub_19fe49();
loc_1a0692: // 0160:1a0692
    if (memoryAGet(ds, 0x3a9f44) == 0x00)
        goto loc_1a06af;
    ebx = 0x001d6a05;
    edx = 0x001d69e9;
    eax = 0x00000001;
    sub_19fe73();
loc_1a06af: // 0160:1a06af
    if (memoryAGet(ds, 0x3a9f45) == 0x00)
        goto loc_1a06c9;
    ebx = 0x001d6a05;
    edx = 0x001d69e9;
    eax = 0;
    sub_19fe73();
loc_1a06c9: // 0160:1a06c9
    if (memoryAGet(ds, 0x3a9f73) == 0x00)
        goto loc_1a0716;
    ebx = 0x0000003b;
    ecx = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ebx);
    if (ecx == ebx)
        goto loc_1a0716;
    if (ebx != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a06f6;
    memoryASet(ds, 0x3a1e10, memoryAGet(ds, 0x3a1e10) ^ 0x01);
loc_1a06f6: // 0160:1a06f6
    eax = memoryAGet32(ds, 0x3a1df0);
    edi = memoryAGet32(ds, 0x3a1e10);
    memoryASet32(ds, 0x3a1df8, eax);
    if (edi)
        goto loc_1a0711;
    sub_19ff9b();
    goto loc_1a0716;
loc_1a0711: // 0160:1a0711
    sub_1a02c4();
loc_1a0716: // 0160:1a0716
    if (memoryAGet(ds, 0x3a9f74) == 0x00)
        goto loc_1a0762;
    ebp = 0x0000003c;
    eax = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ebp);
    if (eax == ebp)
        goto loc_1a0762;
    if (ebp != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a0742;
    memoryASet(ds, 0x3a1e14, memoryAGet(ds, 0x3a1e14) ^ 0x01);
loc_1a0742: // 0160:1a0742
    eax = memoryAGet32(ds, 0x3a1df0);
    ebx = memoryAGet32(ds, 0x3a1e14);
    memoryASet32(ds, 0x3a1df8, eax);
    if (ebx)
        goto loc_1a075d;
    sub_19ffae();
    goto loc_1a0762;
loc_1a075d: // 0160:1a075d
    sub_1a0171();
loc_1a0762: // 0160:1a0762
    if (memoryAGet(ds, 0x3a9f75) == 0x00)
        goto loc_1a07af;
    ecx = 0x0000003d;
    esi = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ecx);
    if (esi == ecx)
        goto loc_1a07af;
    if (ecx != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a078f;
    memoryASet(ds, 0x3a1e18, memoryAGet(ds, 0x3a1e18) ^ 0x01);
loc_1a078f: // 0160:1a078f
    eax = memoryAGet32(ds, 0x3a1df0);
    ebp = memoryAGet32(ds, 0x3a1e18);
    memoryASet32(ds, 0x3a1df8, eax);
    if (ebp)
        goto loc_1a07aa;
    sub_19ffef();
    goto loc_1a07af;
loc_1a07aa: // 0160:1a07aa
    sub_1a025b();
loc_1a07af: // 0160:1a07af
    if (memoryAGet(ds, 0x3a9f76) == 0x00)
        goto loc_1a07fb;
    eax = 0x0000003e;
    edx = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, eax);
    if (edx == eax)
        goto loc_1a07fb;
    if (eax != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a07db;
    memoryASet(ds, 0x3a1e1c, memoryAGet(ds, 0x3a1e1c) ^ 0x01);
loc_1a07db: // 0160:1a07db
    eax = memoryAGet32(ds, 0x3a1df0);
    ecx = memoryAGet32(ds, 0x3a1e1c);
    memoryASet32(ds, 0x3a1df8, eax);
    if (ecx)
        goto loc_1a07f6;
    sub_1a010f();
    goto loc_1a07fb;
loc_1a07f6: // 0160:1a07f6
    sub_1a015d();
loc_1a07fb: // 0160:1a07fb
    if (memoryAGet(ds, 0x3a9f77) == 0x00)
        goto loc_1a0847;
    esi = 0x0000003f;
    edi = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, esi);
    if (edi == esi)
        goto loc_1a0847;
    if (esi != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a0828;
    memoryASet(ds, 0x3a1e20, memoryAGet(ds, 0x3a1e20) ^ 0x01);
loc_1a0828: // 0160:1a0828
    eax = memoryAGet32(ds, 0x3a1df0);
    memoryASet32(ds, 0x3a1df8, eax);
    if (memoryAGet32(ds, 0x3a1e20) != 0x00000000)
        goto loc_1a0842;
    sub_1a0008();
    goto loc_1a0847;
loc_1a0842: // 0160:1a0842
    sub_1a003c();
loc_1a0847: // 0160:1a0847
    if (memoryAGet(ds, 0x3a9f78) == 0x00)
        goto loc_1a0894;
    edx = 0x00000040;
    ebx = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, edx);
    if (ebx == edx)
        goto loc_1a0894;
    if (edx != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a0874;
    memoryASet(ds, 0x3a1e24, memoryAGet(ds, 0x3a1e24) ^ 0x01);
loc_1a0874: // 0160:1a0874
    eax = memoryAGet32(ds, 0x3a1df0);
    esi = memoryAGet32(ds, 0x3a1e24);
    memoryASet32(ds, 0x3a1df8, eax);
    if (esi)
        goto loc_1a088f;
    sub_1a0216();
    goto loc_1a0894;
loc_1a088f: // 0160:1a088f
    sub_1a00b5();
loc_1a0894: // 0160:1a0894
    if (memoryAGet(ds, 0x3a9f79) == 0x00)
        goto loc_1a08e1;
    edi = 0x00000041;
    ebp = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, edi);
    if (ebp == edi)
        goto loc_1a08e1;
    if (edi != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a08c1;
    memoryASet(ds, 0x3a1e28, memoryAGet(ds, 0x3a1e28) ^ 0x01);
loc_1a08c1: // 0160:1a08c1
    eax = memoryAGet32(ds, 0x3a1df0);
    edx = memoryAGet32(ds, 0x3a1e28);
    memoryASet32(ds, 0x3a1df8, eax);
    if (edx)
        goto loc_1a08dc;
    sub_1a0074();
    goto loc_1a08e1;
loc_1a08dc: // 0160:1a08dc
    sub_1a009c();
loc_1a08e1: // 0160:1a08e1
    if (memoryAGet(ds, 0x3a9f7a) == 0x00)
        goto loc_1a092e;
    ebx = 0x00000042;
    ecx = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ebx);
    if (ecx == ebx)
        goto loc_1a092e;
    if (ebx != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a090e;
    memoryASet(ds, 0x3a1e2c, memoryAGet(ds, 0x3a1e2c) ^ 0x01);
loc_1a090e: // 0160:1a090e
    eax = memoryAGet32(ds, 0x3a1df0);
    edi = memoryAGet32(ds, 0x3a1e2c);
    memoryASet32(ds, 0x3a1df8, eax);
    if (edi)
        goto loc_1a0929;
    sub_1a0311();
    goto loc_1a092e;
loc_1a0929: // 0160:1a0929
    sub_1a0335();
loc_1a092e: // 0160:1a092e
    if (memoryAGet(ds, 0x3a9f7b) == 0x00)
        goto loc_1a097a;
    ebp = 0x00000043;
    eax = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ebp);
    if (eax == ebp)
        goto loc_1a097a;
    if (ebp != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a095a;
    memoryASet(ds, 0x3a1e30, memoryAGet(ds, 0x3a1e30) ^ 0x01);
loc_1a095a: // 0160:1a095a
    eax = memoryAGet32(ds, 0x3a1df0);
    ebx = memoryAGet32(ds, 0x3a1e30);
    memoryASet32(ds, 0x3a1df8, eax);
    if (ebx)
        goto loc_1a0975;
    sub_1a0359();
    goto loc_1a097a;
loc_1a0975: // 0160:1a0975
    sub_1a03d0();
loc_1a097a: // 0160:1a097a
    if (memoryAGet(ds, 0x3a9f7c) == 0x00)
        goto loc_1a09c7;
    ecx = 0x00000044;
    esi = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, ecx);
    if (esi == ecx)
        goto loc_1a09c7;
    if (ecx != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a09a7;
    memoryASet(ds, 0x3a1e34, memoryAGet(ds, 0x3a1e34) ^ 0x01);
loc_1a09a7: // 0160:1a09a7
    eax = memoryAGet32(ds, 0x3a1df0);
    ebp = memoryAGet32(ds, 0x3a1e34);
    memoryASet32(ds, 0x3a1df8, eax);
    if (ebp)
        goto loc_1a09c2;
    sub_1a012f();
    goto loc_1a09c7;
loc_1a09c2: // 0160:1a09c2
    sub_1a03f7();
loc_1a09c7: // 0160:1a09c7
    if (memoryAGet(ds, 0x3a9f8f) == 0x00)
        goto loc_1a0a02;
    eax = 0x00000057;
    edx = memoryAGet32(ds, 0x3a1df4);
    memoryASet32(ds, 0x3a1df0, eax);
    if (edx == eax)
        goto loc_1a0a02;
    if (eax != memoryAGet32(ds, 0x3a1df8))
        goto loc_1a09f3;
    memoryASet(ds, 0x3a1e3c, memoryAGet(ds, 0x3a1e3c) ^ 0x01);
loc_1a09f3: // 0160:1a09f3
    eax = memoryAGet32(ds, 0x3a1df0);
    memoryASet32(ds, 0x3a1df8, eax);
    sub_1a03b7();
loc_1a0a02: // 0160:1a0a02
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += ecx;
    esi = memoryAGet32(ds, eax * 4 + 0x3a1606);
    if (esi)
        goto loc_1a0a2d;
    memoryASet32(ds, 0x3a1cd0, esi);
loc_1a0a2d: // 0160:1a0a2d
    eax = memoryAGet32(ds, 0x3a1df0);
    memoryASet32(ds, 0x3a1df4, eax);
    goto loc_19e44b;
}
void sub_1a0a3c() // 0160:1a0a3c +long
{
    esp -= 4;
    goto loc_1a0a3c;
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3724 bytes
loc_19f2de: // 0160:19f2de
    sub_1bda16();
    goto loc_19e44c;
    // gap 5972 bytes
loc_1a0a3c: // 0160:1a0a3c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = eax * 0x000000ac;
    memoryASet32(ds, 0x3a1cb4, 0x00000001);
    if (memoryAGet32(ds, ecx + 3803530) != 0x00000042)
        goto loc_19e44c;
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, ecx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1ad1f8();
    if (eax)
        goto loc_1a0ad6;
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -8;
    eax = memoryAGet32(ds, ecx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1ad1f8();
    if (eax)
        goto loc_1a0ad6;
    memoryASet32(ds, ecx + 3803498, memoryAGet32(ds, ecx + 3803498) - 0x00000800);
loc_1a0ad6: // 0160:1a0ad6
    ecx = esi * 0x000000ac;
    if (memoryAGet32(ds, ecx + 3803518) != 0x00000000)
        goto loc_1a0aef;
    memoryASet32(ds, ecx + 3803518, 0xffffffff);
loc_1a0aef: // 0160:1a0aef
    ecx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3803518);
    memoryASet32(ds, ecx + 3803522, eax);
    eax = eax * 0x000001e6;
    ebx = 0xfffffc01;
    edi = 0x00000001;
    memoryASet32(ds, ecx + 3803490, ebx);
    edx = edi;
    memoryASet32(ds, ecx + 3803486, eax);
    eax = esi;
    memoryASet32(ds, ecx + 3803534, edi);
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000020;
    edx = ecx;
    goto loc_19f2de;
}
void sub_1a0b44() // 0160:1a0b44 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = eax;
    memoryASet32(ds, esp + 12, edx);
    ebx = edx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 3803518);
    esi = eax;
    if ((int32_t)ecx <= 0)
        goto loc_1a0b96;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_1a0b9e;
loc_1a0b96: // 0160:1a0b96
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_1a0b9e: // 0160:1a0b9e
    cl = memoryAGet(ds, esp + 12);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x3a1c52, ax);
    eax = 0;
    edx = esi;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 24, eax);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    ebx = 0x0023c4d0;
    eax -= edx;
    edx = edi;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 20);
    ecx = eax + eax;
    edx <<= 2;
    eax = ebx + ecx;
    memoryASet32(ds, esp, edx);
    dx = memoryAGet16(ds, edx + eax);
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, eax);
    eax &= 0x0000ffff;
    ebx = memoryAGet32(ds, esp + 24);
    eax |= edx;
    edx = esi + -8;
    ebx &= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += 0x0023c4d0;
    eax += ecx;
    eax += memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax &= 0x0000ffff;
    eax &= edx;
    ebx |= eax;
    if (!ebx)
        goto loc_1a0de4;
    ecx = 0;
loc_1a0c4f: // 0160:1a0c4f
    if (bl & 0x01)
        goto loc_1a0c60;
    eax = ecx;
    ecx++;
    if ((int32_t)eax >= (int32_t)0x00000010)
        goto loc_1a0c60;
    ebx = sar32(ebx, 0x00000001);
    goto loc_1a0c4f;
loc_1a0c60: // 0160:1a0c60
    edx = 0;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, 0x3a1c52, dx);
    edx = ebx * 0x000000ac;
    eax = ecx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803518);
    ebx = memoryAGet32(ds, eax + 3803518);
    if (edx == ebx)
        goto loc_1a0c9c;
    if (ebx)
        goto loc_1a0d71;
    if (memoryAGet32(ds, esp + 20) != 0xffffffff)
        goto loc_1a0d71;
loc_1a0c9c: // 0160:1a0c9c
    eax = esi + -3;
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)eax <= 0)
        goto loc_1a0d4a;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803518);
    ebx <<= 2;
    ebx += edi;
    if (ebx >= 0x000003c0)
        goto loc_1a0d4a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 6;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    ebx = memoryAGet32(ds, esp + 4);
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_1a0d51;
loc_1a0d4a: // 0160:1a0d4a
    eax = 0x00000001;
    goto loc_1a0d53;
loc_1a0d51: // 0160:1a0d51
    eax = 0;
loc_1a0d53: // 0160:1a0d53
    if (!eax)
        goto loc_1a0d71;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    edx = esi;
    edx <<= 9;
    ebp = 0xffff0000;
    memoryASet32(ds, eax + 3803498, edx);
    goto loc_1a0d93;
loc_1a0d71: // 0160:1a0d71
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    if ((int32_t)eax > (int32_t)esi)
        goto loc_1a0d93;
    ebp = 0xfffdffff;
loc_1a0d93: // 0160:1a0d93
    eax = memoryAGet32(ds, esp + 24);
    ebx = esi;
    edx = edi;
    memoryASet16(ds, 0x3a1c52, ax);
    eax = memoryAGet32(ds, esp + 12);
    sub_1ad1f8();
    if (!eax)
        goto loc_1a0de4;
    if ((int32_t)ebp <= (int32_t)0xfffe0000)
        goto loc_1a0de4;
    eax = memoryAGet32(ds, esp + 12);
    ebx = esi + -8;
    edx = edi;
    sub_1ad1f8();
    if (eax)
        goto loc_1a0de4;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    esi -= 0x00000004;
    esi <<= 9;
    edx = 0;
    memoryASet32(ds, eax + 3803498, esi);
    memoryASet32(ds, eax + 3803490, edx);
loc_1a0de4: // 0160:1a0de4
    eax = ebp;
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0def() // 0160:1a0def +long
{
    esp -= 4;
    goto loc_1a0def;
loc_1a0de9: // 0160:1a0de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a0def: // 0160:1a0def
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    if (memoryAGet32(ds, 0x3a1cc0) != 0x00000000)
        goto loc_1a0e1e;
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803542);
    if (ebx == 0x0000000b)
        goto loc_1a0e1e;
    if (ebx != 0x00000033)
        goto loc_1a0f2a;
loc_1a0e1e: // 0160:1a0e1e
    ebx = esi * 0x000000ac;
    memoryASet32(ds, 0x3a1cb4, 0x00000001);
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = esp + 4;
    push32(edi);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = esi;
    edx = ebp;
    sub_1ad1ca();
    ebx = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    if (esi != ebx)
        goto loc_1a0e80;
    edx = ebx;
    sub_1a0b44();
    edx = eax;
loc_1a0e80: // 0160:1a0e80
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_1a0e96;
    eax = esi * 0x000000ac;
    if (edi == memoryAGet32(ds, eax + 3803518))
        goto loc_1a0f04;
loc_1a0e96: // 0160:1a0e96
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803518);
    memoryASet32(ds, eax + 3803522, ebx);
    if (edi == ebx)
        goto loc_1a0eb6;
    memoryASet32(ds, 0x3a1de0, 0x00000004);
loc_1a0eb6: // 0160:1a0eb6
    ebx = esi * 0x000000ac;
    ecx = memoryAGet32(ds, 0x3a1de0);
    if (!ecx)
        goto loc_1a0ed9;
    ebp = ecx + -1;
    eax = 0;
    memoryASet32(ds, 0x3a1de0, ebp);
    memoryASet32(ds, ebx + 3803470, eax);
    goto loc_1a0eee;
loc_1a0ed9: // 0160:1a0ed9
    eax = edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 4;
    memoryASet32(ds, ebx + 3803510, eax);
loc_1a0eee: // 0160:1a0eee
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3803550, 0x00000001);
    memoryASet32(ds, eax + 3803518, edi);
loc_1a0f04: // 0160:1a0f04
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_1a0f2a;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3803494);
    memoryASet32(ds, esi + 3803502, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    memoryASet32(ds, esi + 3803506, eax);
loc_1a0f2a: // 0160:1a0f2a
    esp += 0x00000008;
    goto loc_1a0de9;
}
void sub_1a0f32() // 0160:1a0f32 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1cf8);
    if (!edx)
        goto loc_1a0f49;
    ebx = edx + -1;
    memoryASet32(ds, 0x3a1cf8, ebx);
loc_1a0f49: // 0160:1a0f49
    if (memoryAGet32(ds, 0x3a1cf8) != 0x00000000)
        goto loc_1a10a1;
    if (memoryAGet32(ds, 0x3a1d18) != 0x00000000)
        goto loc_1a10a1;
    edi = memoryAGet32(ds, 0x3a1c78);
    if (edi != 0x00000010)
        goto loc_1a10a1;
    if (memoryAGet32(ds, 0x3a1cd0) != 0x00000000)
        goto loc_1a10a1;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803542);
    if (!ebx)
        goto loc_1a0fc3;
    if (ebx == 0x00000004)
        goto loc_1a0fc3;
    if (ebx == 0x00000024)
        goto loc_1a0fc3;
    if (ebx == 0x00000036)
        goto loc_1a0fc3;
    if (ebx == edi)
        goto loc_1a0fc3;
    if (ebx == 0x00000027)
        goto loc_1a0fc3;
    if (ebx == 0x0000002f)
        goto loc_1a0fc3;
    if (ebx == 0x0000002b)
        goto loc_1a0fc3;
    if (ebx == 0x00000006)
        goto loc_1a0fc3;
    if (ebx != 0x00000038)
        goto loc_1a10a1;
loc_1a0fc3: // 0160:1a0fc3
    ah = memoryAGet(ds, 0x3a9f80);
    edx = 0;
    if (!ah)
        goto loc_1a1003;
    ebp = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)ebp >= (int32_t)0x00000040)
        goto loc_1a1003;
    edx = 0x00000001;
    ebx = edx + ebp;
    memoryASet32(ds, 0x3a1cb4, edx);
    memoryASet32(ds, 0x3a1c84, ebx);
    sub_19e27a();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803590, edx);
loc_1a1003: // 0160:1a1003
    if (memoryAGet(ds, 0x3a9f88) == 0x00)
        goto loc_1a1045;
    edi = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)edi <= (int32_t)0xffffffc0)
        goto loc_1a1045;
    ebp = 0x00000001;
    eax = edi;
    eax -= ebp;
    memoryASet32(ds, 0x3a1cb4, ebp);
    memoryASet32(ds, 0x3a1c84, eax);
    sub_19e27a();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = 0xffffffff;
    memoryASet32(ds, eax + 3803590, ebp);
loc_1a1045: // 0160:1a1045
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000010)
        goto loc_1a10a1;
    memoryASet32(ds, 0x3a1cf8, 0x00000008);
    if ((int32_t)edx <= 0)
        goto loc_1a1081;
    eax = memoryAGet32(ds, 0x3a1c84);
    ebx = eax + -1;
    memoryASet32(ds, 0x3a1c84, ebx);
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1a1081;
    eax = ebx + 32;
    memoryASet32(ds, 0x3a1c84, eax);
loc_1a1081: // 0160:1a1081
    if ((int32_t)edx >= 0)
        goto loc_1a10a1;
    eax = memoryAGet32(ds, 0x3a1c84);
    edx = eax + 1;
    memoryASet32(ds, 0x3a1c84, edx);
    if ((int32_t)eax <= (int32_t)0xffffffe0)
        goto loc_1a10a1;
    edx -= 0x00000020;
    memoryASet32(ds, 0x3a1c84, edx);
loc_1a10a1: // 0160:1a10a1
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a10a6() // 0160:1a10a6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1a1242;
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a10d4;
    if (memoryAGet32(ds, 0x3a1dec) != 0x00000000)
        goto loc_1a10d4;
    memoryASet32(ds, 0x3a1e50, 0x00000001);
loc_1a10d4: // 0160:1a10d4
    esi = memoryAGet32(ds, 0x3a1ccc);
    if (esi != 0x00000001)
        goto loc_1a1242;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803590, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000014)
        goto loc_1a1143;
    ebp = 0;
    memoryASet32(ds, eax + 3803474, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803470, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803626, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803630, ebp);
    goto loc_1a11c1;
loc_1a1143: // 0160:1a1143
    edx = memoryAGet32(ds, eax + 3803474);
    edx += 0x00000029;
    memoryASet32(ds, eax + 3803474, edx);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3803474);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax <<= 4;
    memoryASet32(ds, edx + 3803470, eax);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3803474);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x1e0446);
    memoryASet32(ds, edx + 3803626, eax);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3803474);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x1e044a);
    memoryASet32(ds, edx + 3803630, eax);
loc_1a11c1: // 0160:1a11c1
    eax = 0x00000010;
    esi = 0x00000032;
    edi = memoryAGet32(ds, 0x3a1cf4);
    edx = 0;
    memoryASet32(ds, 0x3a1c78, eax);
    memoryASet32(ds, 0x3a1ccc, edx);
    memoryASet32(ds, 0x3a1cf0, edx);
    memoryASet32(ds, 0x3a1cc0, edx);
    memoryASet32(ds, 0x3a1efc, esi);
    if (!edi)
        goto loc_1a1242;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000014)
        goto loc_1a1234;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000200);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803518);
    ebp = memoryAGet32(ds, eax + 3803494);
    edx <<= 10;
    ebp += edx;
    memoryASet32(ds, eax + 3803494, ebp);
    goto loc_1a1242;
loc_1a1234: // 0160:1a1234
    if ((int32_t)edi < 0)
        goto loc_1a1242;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000600);
loc_1a1242: // 0160:1a1242
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a1248() // 0160:1a1248 +long
{
    esp -= 4;
    goto loc_1a1248;
loc_19e44c: // 0160:19e44c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11766 bytes
loc_1a1248: // 0160:1a1248
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax + -2;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax + -2;
    esi = 0;
    ebx = edi;
    edi += 0x00000008;
    goto loc_1a12f4;
loc_1a1283: // 0160:1a1283
    if ((int32_t)ebx < 0)
        goto loc_1a12f2;
    if ((int32_t)ebx <= 0)
        goto loc_1a12ee;
    if (ecx >= 0x000003c0)
        goto loc_1a12ee;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    eax += esi;
    esi = 0;
    si = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    esi &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_1a12ee;
    eax = 0x00000001;
    goto loc_1a12f0;
loc_1a12ee: // 0160:1a12ee
    eax = 0;
loc_1a12f0: // 0160:1a12f0
    esi = eax;
loc_1a12f2: // 0160:1a12f2
    ecx++;
    ebx++;
loc_1a12f4: // 0160:1a12f4
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_1a12fc;
    if (!esi)
        goto loc_1a1283;
loc_1a12fc: // 0160:1a12fc
    eax = esi;
    goto loc_19e44c;
}
void sub_1a1303() // 0160:1a1303 +long
{
    esp -= 4;
    goto loc_1a1303;
loc_19e7e7: // 0160:19e7e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11030 bytes
loc_1a1303: // 0160:1a1303
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1d0c);
    if (!edx)
        goto loc_1a1355;
    ebx = edx + -1;
    memoryASet32(ds, 0x3a1d0c, ebx);
    if (ebx)
        goto loc_1a1335;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000017);
    goto loc_1a1355;
loc_1a1335: // 0160:1a1335
    if (ebx != 0x0000000c)
        goto loc_1a1355;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000012;
    sub_1bda16();
loc_1a1355: // 0160:1a1355
    eax = memoryAGet32(ds, 0x3a1d10);
    if (!eax)
        goto loc_1a13bf;
    edx = eax + -1;
    memoryASet32(ds, 0x3a1d10, edx);
    if (edx)
        goto loc_1a13bf;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000018);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, 0x00000300);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x3a1cc0, edx);
    edx = 0x00000640;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1efc, edx);
    sub_19e30a();
    edx = eax;
    eax = 0x00000012;
    sub_1bda16();
loc_1a13bf: // 0160:1a13bf
    if (memoryAGet32(ds, 0x3a1dc4) != 0x00000000)
        goto loc_19e7e7;
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += ecx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_19e7e7;
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_19e7e7;
    ebp = memoryAGet32(ds, 0x39ea94);
    if (ebp)
        goto loc_19e7e7;
    if (memoryAGet32(ds, 0x1e0098) != 0x00000000)
        goto loc_19e7e7;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000016)
        goto loc_19e7e7;
    sub_1a1248();
    if (eax)
        goto loc_19e7e7;
    ecx = 0x00000001;
    memoryASet32(ds, 0x3a1dc4, ecx);
    sub_19f178();
    sub_19e2d6();
    sub_19e27a();
    eax = 0x000001f4;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1c8c, eax);
    eax = edx * 0x000000ac;
    esi = 0x00000011;
    ebx = 0;
    memoryASet32(ds, 0x3a1c78, esi);
    memoryASet32(ds, 0x3a1d88, ecx);
    memoryASet32(ds, 0x3a1cd0, ebp);
    memoryASet32(ds, eax + 3803470, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, ebx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803602, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = 0x0000004b;
    memoryASet32(ds, eax + 3803470, ebx);
    memoryASet32(ds, 0x3a1d0c, ecx);
    sub_19f1c7();
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fd41();
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fde2();
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000031;
    sub_1bda16();
    goto loc_19e7e7;
}
void sub_1a1513() // 0160:1a1513 +long
{
    esp -= 4;
    goto loc_1a1513;
loc_19e7e7: // 0160:19e7e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11558 bytes
loc_1a1513: // 0160:1a1513
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1d14);
    if (!edx)
        goto loc_1a153a;
    ebx = edx + -1;
    memoryASet32(ds, 0x3a1d14, ebx);
    if (ebx)
        goto loc_1a153a;
    memoryASet32(ds, 0x3a1cc0, ebx);
    sub_1ae2bf();
loc_1a153a: // 0160:1a153a
    if (memoryAGet32(ds, 0x3a1dc4) != 0x00000000)
        goto loc_19e7e7;
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_19e7e7;
    if (memoryAGet32(ds, 0x39ea94) != 0x00000000)
        goto loc_19e7e7;
    if (memoryAGet32(ds, 0x1e0098) != 0x00000000)
        goto loc_19e7e7;
    ebx = memoryAGet32(ds, 0x3a1c64);
    eax = ebx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000026)
        goto loc_19e7e7;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    esi = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += esi;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_19e7e7;
    ebp = 0x00000001;
    eax = ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x3a1dc4, ebp);
    sub_19e30a();
    edx = eax;
    eax = 0x00000042;
    sub_1bda16();
    sub_19e27a();
    memoryASet32(ds, 0x3a1d88, ebp);
    memoryASet32(ds, 0x3a1d14, ebp);
    memoryASet32(ds, 0x3a1dc0, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = 0x000001f4;
    edx = 0x00000010;
    memoryASet32(ds, 0x3a1c8c, ecx);
    ebx = 0;
    memoryASet32(ds, 0x3a1c78, edx);
    memoryASet32(ds, 0x3a1cd0, ebx);
    memoryASet32(ds, eax + 3803470, ebx);
    sub_19f1c7();
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fd41();
    eax = memoryAGet32(ds, 0x3a1d6c);
    sub_19fde2();
    sub_19e2d6();
    goto loc_19e7e7;
}
void sub_1a1643() // 0160:1a1643 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a16df;
    ebx = memoryAGet32(ds, 0x39ea94);
    if (ebx)
        goto loc_1a16df;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x0000002b)
        goto loc_1a16df;
    if (memoryAGet32(ds, 0x3a1cd0) == 0x00000000)
        goto loc_1a16df;
    sub_19f178();
    sub_19e27a();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x3a1cd4);
    memoryASet32(ds, 0x3a1d24, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, 0x3a1d1c, eax);
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000010;
    memoryASet32(ds, 0x3a1cd0, ebx);
    memoryASet32(ds, 0x3a1c78, ebp);
    eax -= 0x00000002;
    edx = 0x000001f4;
    memoryASet32(ds, 0x3a1d20, eax);
    memoryASet32(ds, 0x3a1c8c, edx);
loc_1a16df: // 0160:1a16df
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a16e3() // 0160:1a16e3 +long
{
    esp -= 4;
    goto loc_1a16e3;
loc_1a1242: // 0160:1a1242
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1179 bytes
loc_1a16e3: // 0160:1a16e3
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1e64);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3a1e64, edx);
    if (edx)
        goto loc_1a1721;
    eax = 0;
loc_1a1707: // 0160:1a1707
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803394, edx);
    if (eax == 0x00000ac0)
        goto loc_1a1788;
    goto loc_1a1707;
loc_1a1721: // 0160:1a1721
    if (edx != 0x00000001)
        goto loc_1a176a;
    edi = 0x00000001;
    eax = 0;
loc_1a172d: // 0160:1a172d
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3803394, edi);
    if (eax != 0x00000ac0)
        goto loc_1a172d;
    eax = memoryAGet32(ds, 0x3a1c64);
    al &= 0xfc;
    edx = eax + 4;
    eax = eax * 0x000000ac;
    edx = edx * 0x000000ac;
    goto loc_1a1764;
loc_1a1757: // 0160:1a1757
    eax += 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3803394, ebp);
loc_1a1764: // 0160:1a1764
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1a1788;
    goto loc_1a1757;
loc_1a176a: // 0160:1a176a
    if (edx != 0x00000002)
        goto loc_1a1788;
    esi = 0x00000001;
    eax = 0;
loc_1a1776: // 0160:1a1776
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3803394, esi);
    if (eax != 0x00000ac0)
        goto loc_1a1776;
loc_1a1788: // 0160:1a1788
    memoryASet32(ds, 0x3a1efc, 0x0000000c);
    goto loc_1a1242;
}
void sub_1a1797() // 0160:1a1797 +long
{
    esp -= 4;
    goto loc_1a1797;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13125 bytes
loc_1a1797: // 0160:1a1797
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x3a1c60) != 0x00000000)
        goto loc_1a17b8;
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_1a17b8;
    if (memoryAGet32(ds, 0x3a1e68) != 0x00000000)
        goto loc_1a17ca;
loc_1a17b8: // 0160:1a17b8
    if (memoryAGet32(ds, 0x3a1cc0) != 0x00000000)
        goto loc_1a17cf;
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_1a17cf;
loc_1a17ca: // 0160:1a17ca
    sub_19ed21();
loc_1a17cf: // 0160:1a17cf
    eax = memoryAGet32(ds, 0x3a1c60);
    if (!eax)
        goto loc_1a1813;
    if ((int32_t)eax > (int32_t)0x0000012c)
        goto loc_1a1813;
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1a1813;
    if (memoryAGet32(ds, 0x3a1d88) != 0x00000000)
        goto loc_1a1813;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000001e;
    sub_1bda16();
loc_1a1813: // 0160:1a1813
    ecx = memoryAGet32(ds, 0x3a1c64);
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803530) == 0x00000000)
        goto loc_1a182f;
    eax = ecx;
    sub_1a0a3c();
loc_1a182f: // 0160:1a182f
    ebp = memoryAGet32(ds, 0x3a1f00);
    if (ebp)
        goto loc_1a1e10;
    memoryASet32(ds, 0x3a1cb4, ebp);
    if (memoryAGet32(ds, 0x3a1c60) != 0x00000000)
        goto loc_1a18b6;
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_1a18b6;
    edx = memoryAGet32(ds, 0x3a1e68);
    if (edx)
        goto loc_1a18b6;
    ebx = 0x00000001;
    eax = 0x001d6650;
    memoryASet32(ds, 0x3a1d88, ebx);
    esi = ebx;
    memoryASet32(ds, 0x3a1f00, ebx);
    ebx = 0x00000032;
    ebp = 0x00000032;
    sub_19fdc8();
    ebx = 0x000000ff;
    memoryASet32(ds, 0x3a1efc, ebp);
    eax = esi;
    edx = 0;
    memoryASet32(ds, 0x3a1e68, eax);
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1d64, edx);
    sub_19e30a();
    edx = eax;
    eax = 0x0000002d;
    sub_1bda16();
loc_1a18b6: // 0160:1a18b6
    if (memoryAGet32(ds, 0x1e3658) != 0x00000046)
        goto loc_1a18c9;
    memoryASet32(ds, 0x3a1c60, 0x00000ddd);
loc_1a18c9: // 0160:1a18c9
    sub_1a10a6();
    sub_1a1303();
    sub_1a1513();
    sub_1a1643();
    if (memoryAGet32(ds, 0x3a1d30) != 0x00000001)
        goto loc_1a18eb;
    sub_1b6d25();
loc_1a18eb: // 0160:1a18eb
    if (memoryAGet(ds, 0x3a9f8b) == 0x00)
        goto loc_1a1902;
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_1a1902;
    sub_1a16e3();
loc_1a1902: // 0160:1a1902
    if (memoryAGet(ds, 0x3a9f71) != 0x00)
        goto loc_1a1913;
    edx = 0;
    memoryASet32(ds, 0x3a1dec, edx);
loc_1a1913: // 0160:1a1913
    if (memoryAGet(ds, 0x3a9f66) == 0x00)
        goto loc_1a1921;
    sub_19f178();
loc_1a1921: // 0160:1a1921
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803474);
    if (ebx == 0x0000000f)
        goto loc_1a1947;
    if (ebx)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, eax + 3803530) != 0x00000000)
        goto loc_1a1dc7;
loc_1a1947: // 0160:1a1947
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1a1999;
    if ((int32_t)memoryAGet32(ds, 0x3a1c60) <= (int32_t)0x00000096)
        goto loc_1a1999;
    eax = memoryAGet32(ds, 0x3a1c8c);
    edx = eax + -1;
    memoryASet32(ds, 0x3a1c8c, edx);
    if ((int32_t)eax > 0)
        goto loc_1a1999;
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803530);
    if (ebx)
        goto loc_1a1999;
    esi = 0x0000000f;
    memoryASet32(ds, eax + 3803470, ebx);
    memoryASet32(ds, eax + 3803474, esi);
    memoryASet32(ds, 0x3a1c8c, 0x000001f4);
loc_1a1999: // 0160:1a1999
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a19b0;
    if (memoryAGet32(ds, 0x3a1e70) == 0x00000000)
        goto loc_1a19b0;
    sub_19f1fc();
loc_1a19b0: // 0160:1a19b0
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a19be;
    sub_19e27a();
loc_1a19be: // 0160:1a19be
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a1bc5;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803518) == 0x00000000)
        goto loc_1a1bc5;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1a1bc5;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax <<= 2;
    eax += esi;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x3a1d68);
    eax += esi;
    eax += ebp;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) != 0x00000000)
        goto loc_1a1a25;
    if (memoryAGet32(ds, 0x3a1e84) == 0x00000000)
        goto loc_1a1bc5;
loc_1a1a25: // 0160:1a1a25
    if (memoryAGet32(ds, 0x3a1d64) != 0x00000000)
        goto loc_1a1bc5;
    if ((int32_t)memoryAGet32(ds, 0x3a1c60) <= (int32_t)0x00000002)
        goto loc_1a1bc5;
    if (memoryAGet32(ds, 0x3a1d0c) != 0x00000000)
        goto loc_1a1bc5;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1a1bc5;
    esi = ecx * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1a1bc5;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 3803590, ebp);
    memoryASet32(ds, 0x3a1dec, ebp);
    memoryASet32(ds, 0x3a1d88, ebp);
    if (memoryAGet32(ds, esi + 3803542) != 0x0000002b)
        goto loc_1a1ad8;
    esi = memoryAGet32(ds, 0x3a1d1c);
    if (!esi)
        goto loc_1a1acd;
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x3a1c78);
    memoryASet32(ds, 0x3a1cb4, ebp);
    edx += 0x00000002;
    memoryASet32(ds, 0x3a1efc, eax);
    memoryASet32(ds, 0x3a1c78, edx);
    goto loc_1a1bc5;
loc_1a1acd: // 0160:1a1acd
    memoryASet32(ds, 0x3a1d88, esi);
    goto loc_1a1bc5;
loc_1a1ad8: // 0160:1a1ad8
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x3a1c78);
    memoryASet32(ds, 0x3a1cb4, ebp);
    memoryASet32(ds, 0x3a1efc, eax);
    if (edx != 0x00000010)
        goto loc_1a1b5e;
    ebx = memoryAGet32(ds, esi + 3803542);
    if (!ebx)
        goto loc_1a1b15;
    if (ebx == 0x0000002b)
        goto loc_1a1b15;
    if (ebx == 0x00000004)
        goto loc_1a1b15;
    if (ebx == 0x00000024)
        goto loc_1a1b15;
    if (ebx != 0x00000036)
        goto loc_1a1b5e;
loc_1a1b15: // 0160:1a1b15
    edx = 0x00000002;
    eax = 0;
    sub_1ab709();
    if (eax < 0x00000001)
        goto loc_1a1b2f;
    if (eax <= 0x00000001)
        goto loc_1a1b3a;
    if (eax == 0x00000002)
        goto loc_1a1b41;
    goto loc_1a1b46;
loc_1a1b2f: // 0160:1a1b2f
    if (eax)
        goto loc_1a1b46;
    edi = 0x00000033;
    goto loc_1a1b46;
loc_1a1b3a: // 0160:1a1b3a
    edi = 0x00000016;
    goto loc_1a1b46;
loc_1a1b41: // 0160:1a1b41
    edi = 0x0000003a;
loc_1a1b46: // 0160:1a1b46
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = edi;
    sub_1bda16();
loc_1a1b5e: // 0160:1a1b5e
    eax = ecx * 0x000000ac;
    memoryASet32(ds, 0x3a1c78, memoryAGet32(ds, 0x3a1c78) + 0x00000002);
    edi = memoryAGet32(ds, eax + 3803542);
    if (edi == 0x00000006)
        goto loc_1a1bb2;
    if (edi == 0x00000022)
        goto loc_1a1bb2;
    if (edi == 0x00000019)
        goto loc_1a1bb2;
    if (edi == 0x0000001f)
        goto loc_1a1bb2;
    if (edi == 0x0000000b)
        goto loc_1a1bb2;
    if (edi == 0x00000033)
        goto loc_1a1bb2;
    if (edi == 0x0000002f)
        goto loc_1a1bb2;
    if (edi == 0x00000034)
        goto loc_1a1bb2;
    if (edi == 0x00000010)
        goto loc_1a1bb2;
    if (edi == 0x00000014)
        goto loc_1a1bb2;
    if (edi == 0x00000038)
        goto loc_1a1bb2;
    if (edi == 0x0000003e)
        goto loc_1a1bb2;
    if (edi != 0x00000027)
        goto loc_1a1bc5;
loc_1a1bb2: // 0160:1a1bb2
    ebx = 0x00000011;
    ah = 0;
    memoryASet32(ds, 0x3a1c78, ebx);
    memoryASet(ds, 0x3a9f71, ah);
loc_1a1bc5: // 0160:1a1bc5
    if (memoryAGet32(ds, 0x3a1d30) == 0x00000000)
        goto loc_1a1bea;
    eax = 0x00000010;
    bl = 0;
    edx = 0;
    memoryASet32(ds, 0x3a1c78, eax);
    memoryASet(ds, 0x3a9f71, bl);
    memoryASet32(ds, 0x3a1d88, edx);
    goto loc_1a1c1e;
loc_1a1bea: // 0160:1a1bea
    if (memoryAGet32(ds, 0x3a1dc4) != 0x00000000)
        goto loc_1a1c05;
    if (memoryAGet32(ds, 0x3a1c78) == 0x00000010)
        goto loc_1a1c05;
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a1c11;
loc_1a1c05: // 0160:1a1c05
    if ((int32_t)memoryAGet32(ds, 0x3a1c78) <= (int32_t)0x00000096)
        goto loc_1a1c1e;
loc_1a1c11: // 0160:1a1c11
    dh = 0;
    sub_19f4a3();
    memoryASet(ds, 0x3a9f54, dh);
loc_1a1c1e: // 0160:1a1c1e
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1a1c43;
    sub_1a0f32();
    if (memoryAGet32(ds, 0x3a1e88) != 0x00000000)
        goto loc_1a1c43;
    if (memoryAGet32(ds, 0x3a1c78) != 0x00000010)
        goto loc_1a1c43;
    sub_1a041e();
loc_1a1c43: // 0160:1a1c43
    eax = ecx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3803510, ebp);
    bh = memoryAGet(ds, 0x3a9f83);
    memoryASet32(ds, eax + 3803550, ebp);
    if (bh)
        goto loc_1a1c6a;
    if (memoryAGet(ds, 0x3a9f85) == 0x00)
        goto loc_1a1c74;
loc_1a1c6a: // 0160:1a1c6a
    memoryASet32(ds, 0x3a1de4, 0x00000001);
loc_1a1c74: // 0160:1a1c74
    eax = ecx * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3803490);
    if ((int32_t)esi > (int32_t)0x00000200)
        goto loc_1a1dc7;
    if ((int32_t)esi < 0)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1c60) == 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1dec) != 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1d0c) != 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet32(ds, 0x3a1cd0) != 0x00000000)
        goto loc_1a1dc7;
    if (memoryAGet(ds, 0x3a9f83) == 0x00)
        goto loc_1a1d00;
    if (memoryAGet32(ds, eax + 3803530) != 0x00000000)
        goto loc_1a1d00;
    edx = 0xffffffff;
    eax = ecx;
    sub_1a0def();
loc_1a1d00: // 0160:1a1d00
    if (memoryAGet(ds, 0x3a9f85) == 0x00)
        goto loc_1a1d24;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803530) != 0x00000000)
        goto loc_1a1d24;
    edx = 0x00000001;
    eax = ecx;
    sub_1a0def();
loc_1a1d24: // 0160:1a1d24
    if (memoryAGet(ds, 0x3a9f54) == 0x00)
        goto loc_1a1dbe;
    esi = ecx * 0x000000ac;
    edi = memoryAGet32(ds, esi + 3803490);
    if (edi)
        goto loc_1a1dbe;
    ebp = memoryAGet32(ds, esi + 3803530);
    if (ebp)
        goto loc_1a1dbe;
    if (memoryAGet32(ds, esi + 3803526) != 0x00000000)
        goto loc_1a1dbe;
    eax = memoryAGet32(ds, esi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = ecx;
    sub_1ad1f8();
    if (!eax)
        goto loc_1a1dbe;
    if (memoryAGet(ds, 0x3a9f71) != 0x00)
        goto loc_1a1dbe;
    edx = 0x00000001;
    memoryASet32(ds, 0x3a1de8, edi);
    edi = 0x00000092;
    memoryASet32(ds, 0x3a1cb4, edx);
    memoryASet32(ds, esi + 3803530, edi);
    memoryASet32(ds, esi + 3803510, ebp);
    sub_19e27a();
loc_1a1dbe: // 0160:1a1dbe
    memoryASet16(ds, 0x3a1c52, 0xffff);
loc_1a1dc7: // 0160:1a1dc7
    if (memoryAGet32(ds, 0x3a1cb4) == 0x00000000)
        goto loc_19e44b;
    ecx = ecx * 0x000000ac;
    edx = 0x00000001;
    ebx = 0x000001f4;
    memoryASet32(ds, ecx + 3803602, edx);
    memoryASet32(ds, 0x3a1c8c, ebx);
    if (memoryAGet32(ds, ecx + 3803474) != 0x0000000f)
        goto loc_19e44b;
    edi = 0;
    memoryASet32(ds, ecx + 3803474, edi);
    memoryASet32(ds, ecx + 3803470, edi);
    goto loc_19e44b;
loc_1a1e10: // 0160:1a1e10
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803550, ebx);
    goto loc_19e44b;
}
void sub_1a1e27() // 0160:1a1e27 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(eax);
    edx = memoryAGet32(ds, 0x3a1cec);
    esi = 0;
    if (edx)
        goto loc_1a1fb7;
    ebx = eax * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803526) == 0x00000000)
        goto loc_1a1fb7;
    if (memoryAGet32(ds, ebx + 3803486) == 0x00000000)
        goto loc_1a1fb7;
    cl = memoryAGet(ds, esp);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x3a1c52, ax);
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ecx = 0x0023c4d0;
    eax <<= 6;
    ecx += eax;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0;
    eax += eax;
    edx = 0;
    eax += ecx;
    dx = memoryAGet16(ds, 0x3a1c52);
    ecx = 0;
    bx = memoryAGet16(ds, eax);
    cx = memoryAGet16(ds, eax + -4);
    ebx &= edx;
    ecx &= edx;
    ecx |= ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + -3840);
    ebx &= edx;
    ax = memoryAGet16(ds, eax + 4);
    ebx |= ecx;
    eax &= 0x0000ffff;
    edx &= eax;
    edx |= ebx;
    if (!edx)
        goto loc_1a1fb7;
    eax = 0;
loc_1a1efa: // 0160:1a1efa
    if (dl & 0x01)
        goto loc_1a1f0b;
    ebx = eax;
    eax++;
    if ((int32_t)ebx >= (int32_t)0x00000010)
        goto loc_1a1f0b;
    edx = sar32(edx, 0x00000001);
    goto loc_1a1efa;
loc_1a1f0b: // 0160:1a1f0b
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3803486);
    esi = 0x00000001;
    if (ebx)
        goto loc_1a1fb7;
    if (memoryAGet32(ds, edx + 3803490) != 0x00000000)
        goto loc_1a1fb7;
    if (memoryAGet32(ds, edx + 3803474) != 0x00000000)
        goto loc_1a1fb7;
    ebx = memoryAGet32(ds, esp) * 0x000000ac;
    ecx = memoryAGet32(ds, ebx + 3803486);
    memoryASet32(ds, edx + 3803486, ecx);
    memoryASet32(ds, edx + 3803526, esi);
    ecx = 0;
    memoryASet32(ds, edx + 3803490, ecx);
    memoryASet32(ds, edx + 3803530, ecx);
    if ((int32_t)memoryAGet32(ds, ebx + 3803486) <= (int32_t)0x00000000)
        goto loc_1a1f76;
    memoryASet32(ds, edx + 3803518, esi);
    goto loc_1a1f80;
loc_1a1f76: // 0160:1a1f76
    memoryASet32(ds, edx + 3803518, 0xffffffff);
loc_1a1f80: // 0160:1a1f80
    eax = eax * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803518);
    memoryASet32(ds, eax + 3803522, edx);
    eax = memoryAGet32(ds, esp);
    edx = 0x00000002;
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000006;
    edx = ecx;
    sub_1bda16();
loc_1a1fb7: // 0160:1a1fb7
    eax = esi;
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a1fc1() // 0160:1a1fc1 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803534, edx);
    ecx = 0x00000001;
    memoryASet32(ds, eax + 3803470, edx);
    memoryASet32(ds, eax + 3803590, ecx);
    memoryASet32(ds, eax + 3803474, edx);
    memoryASet32(ds, eax + 3803530, edx);
    memoryASet32(ds, eax + 3803486, edx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a1ff7() // 0160:1a1ff7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0x0000001e;
    ebx = 0;
    memoryASet32(ds, eax + 3803474, edx);
    memoryASet32(ds, eax + 3803470, ebx);
    memoryASet32(ds, eax + 3803486, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a201b() // 0160:1a201b +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803526, edx);
    memoryASet32(ds, eax + 3803486, edx);
    memoryASet32(ds, eax + 3803490, edx);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 3803514, edx);
    memoryASet32(ds, eax + 3803474, edi);
    memoryASet32(ds, eax + 3803470, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a2051() // 0160:1a2051 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803486, ebx);
    memoryASet32(ds, eax + 3803490, ebx);
    edi = 0x0000000e;
    memoryASet32(ds, eax + 3803530, ebx);
    memoryASet32(ds, eax + 3803474, edi);
    memoryASet32(ds, eax + 3803470, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000019;
    sub_1bda16();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a209d() // 0160:1a209d +long
{
    esp -= 4;
    goto loc_1a209d;
loc_1a2094: // 0160:1a2094
    sub_1bda16();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a209d: // 0160:1a209d
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803486, ebx);
    memoryASet32(ds, eax + 3803490, ebx);
    edi = 0x0000000d;
    memoryASet32(ds, eax + 3803526, ebx);
    memoryASet32(ds, eax + 3803474, edi);
    memoryASet32(ds, eax + 3803470, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000014;
    goto loc_1a2094;
}
void sub_1a20e2() // 0160:1a20e2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    esi = eax;
    memoryASet32(ds, esp + 4, edx);
    edi = ebx;
    ebp = ecx;
    edx = 0;
    sub_1a1e27();
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    ecx -= 0x00000008;
    memoryASet16(ds, 0x3a1c52, dx);
    if ((int32_t)ecx <= 0)
        goto loc_1a21a9;
    if (ebx >= 0x000003c0)
        goto loc_1a21a9;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1a21a9;
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803490);
    if ((int32_t)ebx >= 0)
        goto loc_1a21a9;
    if (memoryAGet32(ds, 0x3a1dc8) != 0x00000000)
        goto loc_1a2167;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, eax + 3803490, edx);
loc_1a2167: // 0160:1a2167
    eax = esi * 0x000000ac;
    al = (int32_t)memoryAGet32(ds, eax + 3803490) > (int32_t)0x00000040;
    eax &= 0x000000ff;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!eax)
        goto loc_1a21a9;
    eax = esi;
    edx = 0x00000002;
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000003;
    edx = ecx;
    sub_1bda16();
loc_1a21a9: // 0160:1a21a9
    ecx = ebp + -4;
    if ((int32_t)ecx <= 0)
        goto loc_1a2232;
    eax = edi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_1a2232;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    ebx = ecx;
    ebx <<= 4;
    eax = 0;
    ebx -= ecx;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 3244653);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a2232;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803486) < (int32_t)0x00000000)
        goto loc_1a22c1;
loc_1a2232: // 0160:1a2232
    ecx = ebp + -4;
    if ((int32_t)ecx <= 0)
        goto loc_1a232b;
    eax = edi + 4;
    memoryASet32(ds, esp, eax);
    if (eax >= 0x000003c0)
        goto loc_1a232b;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    ax = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    ebx = ecx;
    eax &= 0x0000ffff;
    ebx <<= 4;
    edx = 0;
    ebx -= ecx;
    dx = memoryAGet16(ds, 0x3a1c52);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 3244660);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a232b;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803486) <= (int32_t)0x00000000)
        goto loc_1a232b;
loc_1a22c1: // 0160:1a22c1
    memoryASet32(ds, esp + 12, 0x00000001);
    ebx = esi * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 3803486);
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3803486, eax);
    edx = edi;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = memoryAGet32(ds, ebx + 3803526);
    memoryASet32(ds, ebx + 3803494, eax);
    if (!ecx)
        goto loc_1a232b;
    eax = memoryAGet32(ds, ebx + 3803518);
    eax = -eax;
    memoryASet32(ds, ebx + 3803518, eax);
    memoryASet32(ds, ebx + 3803522, eax);
loc_1a232b: // 0160:1a232b
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1a24db;
    eax = esi * 0x000000ac;
    edx = 0x00000001;
    ebx = memoryAGet32(ds, eax + 3803530);
    memoryASet32(ds, esp + 12, edx);
    if (!ebx)
        goto loc_1a2362;
    if ((int32_t)memoryAGet32(ds, eax + 3803490) <= (int32_t)0x00000600)
        goto loc_1a2362;
    eax = esi;
    sub_1a2051();
loc_1a2362: // 0160:1a2362
    ebx = esi * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803526) == 0x00000000)
        goto loc_1a249e;
    if ((int32_t)memoryAGet32(ds, ebx + 3803518) <= (int32_t)0x00000000)
        goto loc_1a23a0;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    ecx = memoryAGet32(ds, ebx + 3803626);
    ebx = eax;
    ebx -= ecx;
    goto loc_1a23be;
loc_1a23a0: // 0160:1a23a0
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, ebx + 3803626);
    eax -= 0x00000003;
    ebx += eax;
loc_1a23be: // 0160:1a23be
    eax = esi * 0x000000ac;
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 3803506);
    eax = memoryAGet32(ds, eax + 3803506);
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x00000140);
    ecx = memoryAGet32(ds, ecx + 3803630);
    eax -= 0x0000000c;
    push32(0x00000010);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 28);
    push32(0x00000010);
    edx = 0x00318270;
    eax = memoryAGet32(ds, eax + 3803634);
    sub_1b2017();
    eax = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, eax + 3803486);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1a2443;
    eax = memoryAGet32(ds, esp + 16);
    if ((int32_t)memoryAGet32(ds, eax + 3803490) <= (int32_t)0x00000700)
        goto loc_1a2443;
    eax = esi;
    sub_1a209d();
    goto loc_1a249e;
loc_1a2443: // 0160:1a2443
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803490) <= (int32_t)0x00000200)
        goto loc_1a2479;
    eax = esi;
    edx = 0x00000002;
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000003;
    edx = ecx;
    sub_1bda16();
loc_1a2479: // 0160:1a2479
    ecx = memoryAGet32(ds, 0x39eaa8);
    if (ecx == 0x00000001)
        goto loc_1a248e;
    if (ecx == 0x00000006)
        goto loc_1a248e;
    if (ecx != 0x00000009)
        goto loc_1a249e;
loc_1a248e: // 0160:1a248e
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3803538, 0x00000001);
loc_1a249e: // 0160:1a249e
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803474) != 0x0000001d)
        goto loc_1a24b4;
    eax = esi;
    sub_1a1ff7();
loc_1a24b4: // 0160:1a24b4
    eax = esi * 0x000000ac;
    ebx = ebp;
    edx = memoryAGet32(ds, eax + 3803498);
    ebx <<= 9;
    edx &= 0x000001ff;
    edx |= ebx;
    memoryASet32(ds, eax + 3803498, edx);
    edx = 0;
    memoryASet32(ds, eax + 3803490, edx);
loc_1a24db: // 0160:1a24db
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803530) == 0x00000000)
        goto loc_1a2533;
    if (memoryAGet32(ds, eax + 3803486) == 0x00000000)
        goto loc_1a24fc;
    if (memoryAGet32(ds, eax + 3803490) != 0x00000000)
        goto loc_1a2502;
loc_1a24fc: // 0160:1a24fc
    memoryASet32(ds, 0x3a1de8, memoryAGet32(ds, 0x3a1de8) + 1);
loc_1a2502: // 0160:1a2502
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803486);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000380)
        goto loc_1a2523;
    if (memoryAGet32(ds, ebx + 3803490) == 0x00000000)
        goto loc_1a252c;
loc_1a2523: // 0160:1a2523
    if ((int32_t)memoryAGet32(ds, 0x3a1de8) <= (int32_t)0x00000004)
        goto loc_1a2533;
loc_1a252c: // 0160:1a252c
    eax = esi;
    sub_1a1fc1();
loc_1a2533: // 0160:1a2533
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803526) == 0x00000000)
        goto loc_1a264a;
    if ((int32_t)ebp <= 0)
        goto loc_1a25b0;
    if (edi >= 0x000003c0)
        goto loc_1a25b0;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_1a261d;
loc_1a25b0: // 0160:1a25b0
    ebp++;
    if ((int32_t)ebp <= 0)
        goto loc_1a2616;
    if (edi >= 0x000003c0)
        goto loc_1a2616;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a261d;
loc_1a2616: // 0160:1a2616
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1a264a;
loc_1a261d: // 0160:1a261d
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803486);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1a264a;
    eax = memoryAGet32(ds, ebx + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1a264a;
    eax = esi;
    sub_1a201b();
loc_1a264a: // 0160:1a264a
    esi = esi * 0x000000ac;
    if (memoryAGet32(ds, esi + 3803490) != 0x00000000)
        goto loc_1a267b;
    edi = memoryAGet32(ds, 0x3a1cb0);
    edx = memoryAGet32(ds, esi + 3803486);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esi + 3803486, eax);
loc_1a267b: // 0160:1a267b
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1a2682() // 0160:1a2682 +long
{
    esp -= 4;
    goto loc_1a2682;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16944 bytes
loc_1a2682: // 0160:1a2682
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    edx = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    edx = memoryAGet32(ds, 0x3a1ddc);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x3a1ddc, edx);
    ebx &= 0x0000000f;
    ecx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1ddc, ebx);
    esi = ebx;
    if (ebx == ecx)
        goto loc_1a2759;
    ebx = ebx * 0x000000ac;
    edi = memoryAGet32(ds, ebx + 3803494);
    if (!edi)
        goto loc_1a2759;
    if (memoryAGet32(ds, ebx + 3803526) != 0x00000000)
        goto loc_1a2759;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1a2733;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a2733;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a273a;
loc_1a2733: // 0160:1a2733
    eax = 0x00000001;
    goto loc_1a273c;
loc_1a273a: // 0160:1a273a
    eax = 0;
loc_1a273c: // 0160:1a273c
    if (!eax)
        goto loc_1a2759;
    eax = memoryAGet32(ds, 0x3a1ddc) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, memoryAGet32(ds, eax + 3803490) + 0x00000200);
    goto loc_1a2866;
loc_1a2759: // 0160:1a2759
    eax = memoryAGet32(ds, 0x3a1c64);
    if (esi != eax)
        goto loc_1a2866;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_1a2866;
    if (memoryAGet32(ds, eax + 3803526) != 0x00000000)
        goto loc_1a2866;
    if (memoryAGet32(ds, eax + 3803490) != 0x00000000)
        goto loc_1a2866;
    if (memoryAGet32(ds, eax + 3803550) != 0x00000000)
        goto loc_1a2866;
    if (memoryAGet32(ds, eax + 3803530) != 0x00000000)
        goto loc_1a2866;
    ebx = memoryAGet32(ds, 0x3a1ddc) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1a2845;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a2845;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ebx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a284c;
loc_1a2845: // 0160:1a2845
    eax = 0x00000001;
    goto loc_1a284e;
loc_1a284c: // 0160:1a284c
    eax = 0;
loc_1a284e: // 0160:1a284e
    if (!eax)
        goto loc_1a2866;
    eax = memoryAGet32(ds, 0x3a1ddc) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, memoryAGet32(ds, eax + 3803490) + 0x00000080);
loc_1a2866: // 0160:1a2866
    edi = 0;
    esi = 0;
loc_1a286a: // 0160:1a286a
    if (memoryAGet32(ds, esi + 3803494) == 0x00000000)
        goto loc_1a2ca5;
    if (memoryAGet32(ds, esi + 3803486) != 0x00000000)
        goto loc_1a28b1;
    if (memoryAGet32(ds, esi + 3803490) != 0x00000000)
        goto loc_1a28b1;
    if (memoryAGet32(ds, esi + 3803510) != 0x00000000)
        goto loc_1a28b1;
    if (memoryAGet32(ds, esi + 3803474) != 0x00000000)
        goto loc_1a28b1;
    if (memoryAGet32(ds, esi + 3803534) != 0x00000000)
        goto loc_1a28b1;
    if (memoryAGet32(ds, esi + 3803526) == 0x00000000)
        goto loc_1a2ca5;
loc_1a28b1: // 0160:1a28b1
    if (memoryAGet32(ds, esi + 3803510) != 0x00000000)
        goto loc_1a28d5;
    if (memoryAGet32(ds, esi + 3803486) != 0x00000000)
        goto loc_1a28d5;
    if (memoryAGet32(ds, esi + 3803526) != 0x00000000)
        goto loc_1a28d5;
    if (memoryAGet32(ds, esi + 3803474) == 0x00000000)
        goto loc_1a28df;
loc_1a28d5: // 0160:1a28d5
    memoryASet32(ds, esi + 3803566, 0x00000001);
loc_1a28df: // 0160:1a28df
    eax = memoryAGet32(ds, esi + 3803510);
    edx = memoryAGet32(ds, esi + 3803494);
    ebx = 0;
    edx += eax;
    memoryASet32(ds, esi + 3803510, ebx);
    memoryASet32(ds, esi + 3803494, edx);
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a29e8;
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1a29e8;
    if (memoryAGet32(ds, esi + 3803542) != 0x00000014)
        goto loc_1a29e8;
    eax = memoryAGet32(ds, esi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 5;
    if ((int32_t)ecx <= 0)
        goto loc_1a29ab;
    eax = memoryAGet32(ds, esi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a29ab;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    ecx = ecx * 0x000003c0;
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1a29b2;
loc_1a29ab: // 0160:1a29ab
    eax = 0x00000001;
    goto loc_1a29b4;
loc_1a29b2: // 0160:1a29b2
    eax = 0;
loc_1a29b4: // 0160:1a29b4
    if (!eax)
        goto loc_1a29e8;
    ebx = memoryAGet32(ds, 0x3a1e60);
    ecx = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx++;
    memoryASet32(ds, 0x3a1e60, ebx);
    if (edx)
        goto loc_1a29de;
    eax = edi;
    sub_1a36e1();
loc_1a29de: // 0160:1a29de
    memoryASet32(ds, esi + 3803498, memoryAGet32(ds, esi + 3803498) + 0x00000400);
loc_1a29e8: // 0160:1a29e8
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a2a24;
    if (memoryAGet32(ds, 0x3a1ccc) != 0x00000000)
        goto loc_1a2ca5;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1a2ca5;
    if (memoryAGet32(ds, esi + 3803474) == 0x00000018)
        goto loc_1a2ca5;
    if (memoryAGet32(ds, 0x3a1cec) != 0x00000000)
        goto loc_1a2ca5;
loc_1a2a24: // 0160:1a2a24
    eax = memoryAGet32(ds, esi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1a2a9e;
    ebx = eax;
    eax = eax * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 12);
    edx = esi;
    ebx <<= 9;
    eax += ebp;
loc_1a2a6a: // 0160:1a2a6a
    ecx = 0;
    cl = memoryAGet(ds, eax + 3244656);
    if (ecx == 0x00000080)
        goto loc_1a2a9e;
    ecx = memoryAGet32(ds, esp + 8);
    eax -= 0x000003c0;
    ebx -= 0x00000200;
    ebp = 0;
    memoryASet32(ds, edx + 3803498, ebx);
    ecx--;
    memoryASet32(ds, edx + 3803490, ebp);
    memoryASet32(ds, esp + 8, ecx);
    goto loc_1a2a6a;
loc_1a2a9e: // 0160:1a2a9e
    eax = memoryAGet32(ds, esi + 3803486);
    edx = memoryAGet32(ds, esi + 3803494);
    ecx = memoryAGet32(ds, esi + 3803498);
    edx += eax;
    eax = memoryAGet32(ds, esi + 3803490);
    memoryASet32(ds, esi + 3803494, edx);
    ecx += eax;
    memoryASet32(ds, esi + 3803498, ecx);
    ecx = 0;
    ebp = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x3a1c52, cx);
    ecx = ebp + 1;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)ecx <= 0)
        goto loc_1a2b1a;
    if (ebx >= 0x000003c0)
        goto loc_1a2b1a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ecx = ecx * 0x000003c0;
    eax = ebx;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a2b21;
loc_1a2b1a: // 0160:1a2b1a
    eax = 0x00000001;
    goto loc_1a2b23;
loc_1a2b21: // 0160:1a2b21
    eax = 0;
loc_1a2b23: // 0160:1a2b23
    if (eax)
        goto loc_1a2b2e;
    if ((int32_t)memoryAGet32(ds, esp + 8) >= (int32_t)0x00000008)
        goto loc_1a2b39;
loc_1a2b2e: // 0160:1a2b2e
    eax = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, esi + 3803490, memoryAGet32(ds, esi + 3803490) + eax);
loc_1a2b39: // 0160:1a2b39
    eax = memoryAGet32(ds, esi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x3a1cec);
    memoryASet32(ds, esp + 8, eax);
    if (ecx)
        goto loc_1a2bca;
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a2ba4;
    if (memoryAGet32(ds, esi + 3803530) == 0x00000000)
        goto loc_1a2ba4;
    if ((int32_t)memoryAGet32(ds, esi + 3803490) >= (int32_t)0x00000000)
        goto loc_1a2ba4;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_1add3f();
    goto loc_1a2bbe;
loc_1a2ba4: // 0160:1a2ba4
    eax = esp;
    push32(eax);
    eax = esp + 8;
    push32(eax);
    edx = esp + 20;
    ecx = ebx;
    push32(ebp);
    ebx = esp + 20;
    eax = edi;
    sub_1ad28a();
loc_1a2bbe: // 0160:1a2bbe
    ebp = eax;
    eax = 0;
    memoryASet16(ds, 0x3a1c52, ax);
    goto loc_1a2be3;
loc_1a2bca: // 0160:1a2bca
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_1add3f();
    ebp = eax;
loc_1a2be3: // 0160:1a2be3
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000008)
        goto loc_1a2c15;
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a2c04;
    if (memoryAGet32(ds, 0x3a1dbc) == 0x00000000)
        goto loc_1a2c04;
    if ((int32_t)memoryAGet32(ds, esi + 3803490) < (int32_t)0x00000000)
        goto loc_1a2c15;
loc_1a2c04: // 0160:1a2c04
    ecx = memoryAGet32(ds, esp + 8);
    ebx = memoryAGet32(ds, esp + 12);
    edx = ebp;
    eax = edi;
    sub_1a20e2();
loc_1a2c15: // 0160:1a2c15
    if ((int32_t)memoryAGet32(ds, esi + 3803530) <= (int32_t)0x00000041)
        goto loc_1a2c33;
    eax = memoryAGet32(ds, esp + 8);
    edx = 0;
    eax <<= 9;
    memoryASet32(ds, esi + 3803490, edx);
    memoryASet32(ds, esi + 3803498, eax);
loc_1a2c33: // 0160:1a2c33
    if ((int32_t)memoryAGet32(ds, esi + 3803490) <= (int32_t)0x00000800)
        goto loc_1a2c68;
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a2c55;
    eax = memoryAGet32(ds, 0x3a1e54);
    if (eax)
        goto loc_1a2c55;
    memoryASet32(ds, 0x3a1cc0, eax);
loc_1a2c55: // 0160:1a2c55
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, esi + 3803526, ebx);
    memoryASet32(ds, esi + 3803530, ecx);
loc_1a2c68: // 0160:1a2c68
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a2c7c;
    if (!ebp)
        goto loc_1a2c7c;
    edx = 0;
    memoryASet32(ds, 0x3a1e54, edx);
loc_1a2c7c: // 0160:1a2c7c
    ebx = memoryAGet32(ds, esi + 3803494);
    if ((int32_t)ebx < 0)
        goto loc_1a2c98;
    if ((int32_t)ebx > (int32_t)0x00078000)
        goto loc_1a2c98;
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_1a2ca5;
loc_1a2c98: // 0160:1a2c98
    memoryASet32(ds, 0x1e15f0, memoryAGet32(ds, 0x1e15f0) + 1);
    eax = edi;
    sub_19e452();
loc_1a2ca5: // 0160:1a2ca5
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1a286a;
    esp += 0x00000010;
    goto loc_19e44b;
}
void sub_1a2cbd() // 0160:1a2cbd +long
{
    esp -= 4;
    goto loc_1a2cbd;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18539 bytes
loc_1a2cbd: // 0160:1a2cbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803474) != 0x0000000a)
        goto loc_1a2d52;
    if ((int32_t)memoryAGet32(ds, eax + 3803518) <= (int32_t)0x00000000)
        goto loc_1a2ce8;
    esi = 0xfffffff8;
    goto loc_1a2ced;
loc_1a2ce8: // 0160:1a2ce8
    esi = 0x00000002;
loc_1a2ced: // 0160:1a2ced
    edi = ebp * 0x000000ac;
    push32(0x0000000a);
    eax = esi + 12;
    ecx = 0x0000001e;
    eax <<= 9;
    ebx = memoryAGet32(ds, edi + 3803494);
    edx = memoryAGet32(ds, edi + 3803498);
    ebx -= eax;
    edx -= 0x00003000;
    eax = ebx;
    ebx = 0x00000019;
    sub_1ae04a();
    ecx = memoryAGet32(ds, edi + 3803494);
    if (ecx >= 0x00078000)
        goto loc_1a2d44;
    eax = memoryAGet32(ds, edi + 3803498);
    if ((int32_t)eax >= (int32_t)0x0002fc00)
        goto loc_1a2d44;
    edx = eax;
    eax = ecx;
    sub_1b35ef();
loc_1a2d44: // 0160:1a2d44
    eax = ebp * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803494, edx);
loc_1a2d52: // 0160:1a2d52
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 3803590, 0x00000002);
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1a2e1e;
    edi = memoryAGet32(ds, eax + 3803542);
    if (edi == 0x00000010)
        goto loc_1a2d83;
    if (edi != 0x00000014)
        goto loc_1a2e1e;
loc_1a2d83: // 0160:1a2d83
    if (memoryAGet32(ds, 0x3a1e50) == 0x00000000)
        goto loc_1a2d98;
    memoryASet32(ds, 0x3a1ccc, 0x00000001);
    goto loc_1a2d9e;
loc_1a2d98: // 0160:1a2d98
    memoryASet32(ds, 0x3a1ccc, memoryAGet32(ds, 0x3a1ccc) - 1);
loc_1a2d9e: // 0160:1a2d9e
    eax = ebp * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3803474);
    edi = esi;
    edi <<= 2;
    edi -= esi;
    edx = memoryAGet32(ds, edi * 8 + 0x1e043a);
    edx += 0x00000006;
    edx <<= 4;
    memoryASet32(ds, eax + 3803470, edx);
    edi = memoryAGet32(ds, eax + 3803498);
    edi += memoryAGet32(ds, 0x3a1cf4);
    edx = memoryAGet32(ds, eax + 3803518);
    memoryASet32(ds, eax + 3803498, edi);
    if (edx != 0x00000001)
        goto loc_1a2def;
    edx = memoryAGet32(ds, 0x3a1cf0);
    memoryASet32(ds, eax + 3803494, memoryAGet32(ds, eax + 3803494) + edx);
    goto loc_1a2dfb;
loc_1a2def: // 0160:1a2def
    edx = memoryAGet32(ds, 0x3a1cf0);
    memoryASet32(ds, eax + 3803494, memoryAGet32(ds, eax + 3803494) - edx);
loc_1a2dfb: // 0160:1a2dfb
    ebp = ebp * 0x000000ac;
    eax = memoryAGet32(ss, ebp + 3803494);
    memoryASet32(ss, ebp + 3803502, eax);
    eax = memoryAGet32(ss, ebp + 3803498);
    memoryASet32(ss, ebp + 3803506, eax);
    goto loc_1a2ed5;
loc_1a2e1e: // 0160:1a2e1e
    eax = ebp * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803474);
    if ((int32_t)ebx < (int32_t)0x00000019)
        goto loc_1a2e90;
    if ((int32_t)ebx > (int32_t)0x0000001d)
        goto loc_1a2e90;
    if ((int32_t)memoryAGet32(ds, eax + 3803490) >= (int32_t)0xffffff9a)
        goto loc_1a2e42;
    esi = 0x0000001b;
loc_1a2e42: // 0160:1a2e42
    eax = ebp * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1a2e5d;
    esi = 0x0000001c;
loc_1a2e5d: // 0160:1a2e5d
    eax = ebp * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803490) <= (int32_t)0x00000066)
        goto loc_1a2e71;
    esi = 0x0000001d;
loc_1a2e71: // 0160:1a2e71
    ebp = ebp * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax <<= 4;
    memoryASet32(ss, ebp + 3803474, esi);
    goto loc_1a2ecf;
loc_1a2e90: // 0160:1a2e90
    ebp = ebp * 0x000000ac;
    esi = 0;
    memoryASet32(ss, ebp + 3803474, esi);
    esi = memoryAGet32(ss, ebp + 3803542);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, eax * 8 + 0x1e0446);
    memoryASet32(ss, ebp + 3803626, edx);
    edx = memoryAGet32(ds, eax * 8 + 0x1e044a);
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    memoryASet32(ss, ebp + 3803630, edx);
    eax <<= 4;
loc_1a2ecf: // 0160:1a2ecf
    memoryASet32(ss, ebp + 3803470, eax);
loc_1a2ed5: // 0160:1a2ed5
    eax = esi;
    goto loc_19e44b;
}
void sub_1a2edc() // 0160:1a2edc +long
{
    esp -= 4;
    goto loc_1a2edc;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19082 bytes
loc_1a2edc: // 0160:1a2edc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax * 0x000000ac;
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    if (memoryAGet32(ds, ebx + 3803526) == 0x00000000)
        goto loc_1a2f8e;
    esi = 0;
    edi = memoryAGet32(ds, ebx + 3803538);
    memoryASet32(ds, ebx + 3803530, esi);
    if (!edi)
        goto loc_1a2f50;
    eax = memoryAGet32(ds, ebx + 3803470);
    eax += 0x00000002;
    eax &= 0x0000003f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3803470, eax);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ecx = 0xfffffffc;
    esi = 0xfffffffe;
    memoryASet32(ds, ebx + 3803626, ecx);
    memoryASet32(ds, ebx + 3803630, esi);
    eax += 0x00000137;
    goto loc_19e44b;
loc_1a2f50: // 0160:1a2f50
    eax = memoryAGet32(ds, ebx + 3803470);
    eax += 0x00000004;
    eax &= 0x0000007f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3803470, eax);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    memoryASet32(ds, ebx + 3803626, 0xfffffffc);
    edx = 0xfffffffe;
    eax += 0x0000012f;
    memoryASet32(ds, ebx + 3803630, edx);
    goto loc_19e44b;
loc_1a2f8e: // 0160:1a2f8e
    esi = memoryAGet32(ds, ebx + 3803530);
    esi -= 0x00000004;
    memoryASet32(ds, ebx + 3803530, esi);
    if ((int32_t)esi > (int32_t)0x00000001)
        goto loc_1a2fab;
    ebp = esi + 64;
    memoryASet32(ds, ebx + 3803530, ebp);
loc_1a2fab: // 0160:1a2fab
    ebx = eax * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 3803530);
    edx--;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = 0x00000009;
    edx -= eax;
    ecx = 0;
    eax = edx + 530;
    memoryASet32(ds, ebx + 3803630, ecx);
    memoryASet32(ds, ebx + 3803626, 0xfffffffd);
    goto loc_19e44b;
}
void sub_1a2fe9() // 0160:1a2fe9 +long
{
    esp -= 4;
    goto loc_1a2fe9;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19351 bytes
loc_1a2fe9: // 0160:1a2fe9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edx = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803542);
    eax = 0;
    if (edx < 0x00000010)
        goto loc_1a302d;
    if (edx <= 0x00000010)
        goto loc_1a3111;
    if (edx < 0x0000002b)
        goto loc_1a301f;
    if (edx <= 0x0000002b)
        goto loc_1a3068;
    if (edx == 0x0000002f)
        goto loc_1a30ec;
    goto loc_19e44b;
loc_1a301f: // 0160:1a301f
    if (edx == 0x00000027)
        goto loc_1a30c4;
    goto loc_19e44b;
loc_1a302d: // 0160:1a302d
    if (edx <= 0)
        goto loc_1a303b;
    if (edx == 0x00000006)
        goto loc_1a3096;
    goto loc_19e44b;
loc_1a303b: // 0160:1a303b
    eax = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_1a304f;
    eax = 0x00000003;
    goto loc_1a313c;
loc_1a304f: // 0160:1a304f
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_1a305e;
    eax = 0x00000002;
    goto loc_1a313c;
loc_1a305e: // 0160:1a305e
    eax = 0x00000001;
    goto loc_1a313c;
loc_1a3068: // 0160:1a3068
    esi = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)esi <= (int32_t)0x00000010)
        goto loc_1a307d;
    eax = 0x0000002e;
    goto loc_1a313c;
loc_1a307d: // 0160:1a307d
    if ((int32_t)esi >= (int32_t)0xfffffff0)
        goto loc_1a308c;
    eax = 0x0000002d;
    goto loc_1a313c;
loc_1a308c: // 0160:1a308c
    eax = 0x0000002c;
    goto loc_1a313c;
loc_1a3096: // 0160:1a3096
    edi = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)edi <= (int32_t)0x00000010)
        goto loc_1a30ab;
    eax = 0x00000009;
    goto loc_1a313c;
loc_1a30ab: // 0160:1a30ab
    if ((int32_t)edi >= (int32_t)0xfffffff0)
        goto loc_1a30ba;
    eax = 0x00000008;
    goto loc_1a313c;
loc_1a30ba: // 0160:1a30ba
    eax = 0x00000007;
    goto loc_1a313c;
loc_1a30c4: // 0160:1a30c4
    ebp = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)ebp <= (int32_t)0x00000010)
        goto loc_1a30d9;
    eax = 0x0000002a;
    goto loc_1a313c;
loc_1a30d9: // 0160:1a30d9
    if ((int32_t)ebp >= (int32_t)0xfffffff0)
        goto loc_1a30e5;
    eax = 0x00000029;
    goto loc_1a313c;
loc_1a30e5: // 0160:1a30e5
    eax = 0x00000028;
    goto loc_1a313c;
loc_1a30ec: // 0160:1a30ec
    edx = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)edx <= (int32_t)0x00000010)
        goto loc_1a30fe;
    eax = 0x00000032;
    goto loc_1a313c;
loc_1a30fe: // 0160:1a30fe
    if ((int32_t)edx >= (int32_t)0xfffffff0)
        goto loc_1a310a;
    eax = 0x00000031;
    goto loc_1a313c;
loc_1a310a: // 0160:1a310a
    eax = 0x00000030;
    goto loc_1a313c;
loc_1a3111: // 0160:1a3111
    edx = memoryAGet32(ds, 0x3a1cf0);
    eax = 0x00000011;
    if (!edx)
        goto loc_1a313c;
    ecx = memoryAGet32(ds, 0x3a1c84);
    if ((int32_t)ecx <= (int32_t)0x00000010)
        goto loc_1a3132;
    eax = 0x00000013;
    goto loc_1a313c;
loc_1a3132: // 0160:1a3132
    if ((int32_t)ecx >= (int32_t)0xfffffff0)
        goto loc_1a313c;
    eax = 0x00000012;
loc_1a313c: // 0160:1a313c
    ebx = ebx * 0x000000ac;
    memoryASet32(ds, ebx + 3803478, eax);
    goto loc_19e44b;
}
void sub_1a314d() // 0160:1a314d +long
{
    esp -= 4;
    goto loc_1a314d;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19707 bytes
loc_1a314d: // 0160:1a314d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = memoryAGet32(ds, 0x3a1c64);
    eax = esi * 0x000000ac;
    if (ecx < 0x00000023)
        goto loc_1a31d4;
    if (ecx <= 0x00000023)
        goto loc_1a3566;
    if (ecx < 0x0000002f)
        goto loc_1a31ad;
    if (ecx <= 0x0000002f)
        goto loc_1a3335;
    if (ecx < 0x00000037)
        goto loc_1a319f;
    if (ecx <= 0x00000037)
        goto loc_1a329d;
    if (ecx < 0x00000040)
        goto loc_19e44b;
    if (ecx <= 0x00000040)
        goto loc_1a3680;
    if (ecx == 0x00000041)
        goto loc_1a36b8;
    goto loc_19e44b;
loc_1a319f: // 0160:1a319f
    if (ecx == 0x00000035)
        goto loc_1a3592;
    goto loc_19e44b;
loc_1a31ad: // 0160:1a31ad
    if (ecx < 0x00000027)
        goto loc_1a31c6;
    if (ecx <= 0x00000027)
        goto loc_1a3335;
    if (ecx < 0x0000002c)
        goto loc_19e44b;
    goto loc_1a32e2;
loc_1a31c6: // 0160:1a31c6
    if (ecx == 0x00000025)
        goto loc_1a326b;
    goto loc_19e44b;
loc_1a31d4: // 0160:1a31d4
    if (ecx < 0x00000016)
        goto loc_1a3206;
    if (ecx <= 0x00000016)
        goto loc_1a3366;
    if (ecx < 0x00000020)
        goto loc_1a31f8;
    if (ecx <= 0x00000020)
        goto loc_1a34be;
    if (ecx == 0x00000021)
        goto loc_1a3509;
    goto loc_19e44b;
loc_1a31f8: // 0160:1a31f8
    if (ecx == 0x0000001a)
        goto loc_1a3407;
    goto loc_19e44b;
loc_1a3206: // 0160:1a3206
    if (ecx < 0x00000005)
        goto loc_1a3224;
    if (ecx <= 0x00000005)
        goto loc_1a323b;
    if (ecx < 0x00000007)
        goto loc_19e44b;
    if (ecx <= 0x00000009)
        goto loc_1a331c;
    goto loc_19e44b;
loc_1a3224: // 0160:1a3224
    if (ecx < 0x00000001)
        goto loc_19e44b;
    if (ecx <= 0x00000003)
        goto loc_1a32cf;
    goto loc_19e44b;
loc_1a323b: // 0160:1a323b
    eax = 0x00000004;
    edi = 0x00000010;
    ebp = 0x00000032;
    sub_1ae6ce();
    eax = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1c78, edi);
    eax--;
    memoryASet32(ds, 0x3a1efc, ebp);
    memoryASet32(ds, 0x3a1cc0, eax);
    goto loc_19e44b;
loc_1a326b: // 0160:1a326b
    eax = 0x00000024;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_1ae6ce();
loc_1a327f: // 0160:1a327f
    esi = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1c78, ebx);
    esi--;
loc_1a328c: // 0160:1a328c
    memoryASet32(ds, 0x3a1efc, ecx);
    memoryASet32(ds, 0x3a1cc0, esi);
    goto loc_19e44b;
loc_1a329d: // 0160:1a329d
    eax = 0x00000036;
    edx = 0x00000010;
    ebx = 0x00000032;
    sub_1ae6ce();
loc_1a32b1: // 0160:1a32b1
    ecx = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1c78, edx);
    ecx--;
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x3a1cc0, ecx);
    goto loc_19e44b;
loc_1a32cf: // 0160:1a32cf
    edx = 0x00000010;
    eax = 0;
    ebx = 0x00000032;
    sub_1afc2f();
    goto loc_1a32b1;
loc_1a32e2: // 0160:1a32e2
    eax = 0x00000002;
    ecx = 0x00000010;
    esi = 0x00000032;
    sub_1afc2f();
    ebx = 0;
    edi = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1cd0, ebx);
    memoryASet32(ds, 0x3a1c78, ecx);
    edi--;
    memoryASet32(ds, 0x3a1efc, esi);
    memoryASet32(ds, 0x3a1cc0, edi);
    goto loc_19e44b;
loc_1a331c: // 0160:1a331c
    eax = 0x00000001;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_1afc2f();
    goto loc_1a327f;
loc_1a3335: // 0160:1a3335
    eax = 0x00000001;
    ebp = 0x00000010;
    sub_1afc2f();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1c78, ebp);
    edx--;
    memoryASet32(ds, 0x3a1efc, eax);
    memoryASet32(ds, 0x3a1cc0, edx);
    goto loc_19e44b;
loc_1a3366: // 0160:1a3366
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 4;
    eax = esi * 0x000000ac;
    memoryASet32(ds, 0x3a1c78, 0x00000010);
    edx <<= 9;
    memoryASet32(ds, eax + 3803494, edx);
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 2;
    eax = esi * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 3803498, edx);
    eax = esi * 0x000000ac;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, edx + 3803502, eax);
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803498);
    edx = 0x00000032;
    memoryASet32(ds, esi + 3803506, eax);
    sub_19f178();
    eax = 0x0000004b;
    memoryASet32(ds, 0x3a1efc, edx);
    memoryASet32(ds, 0x3a1d10, eax);
    goto loc_19e44b;
loc_1a3407: // 0160:1a3407
    eax = esi;
    edx = esi * 0x000000ac;
    edi = 0x00000010;
    ebp = 0;
    memoryASet32(ds, 0x3a1c78, edi);
    sub_1a3999();
    eax = 0x00000001;
    memoryASet32(ds, 0x3a1e5c, ebp);
    memoryASet32(ds, 0x3a1dbc, eax);
    eax = memoryAGet32(ds, edx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = esi * 0x000000ac;
    ebx = eax + -4;
    eax = memoryAGet32(ds, edx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_1ad1f8();
    if (eax)
        goto loc_1a347d;
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000800);
loc_1a347d: // 0160:1a347d
    eax = esi * 0x000000ac;
    ebx = 0xfffffa01;
    ecx = 0x00000032;
    edi = 0;
    memoryASet32(ds, eax + 3803490, ebx);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x3a1efc, ecx);
    eax = esi;
    memoryASet32(ds, 0x3a1cc0, edi);
    sub_19e30a();
    edx = eax;
    eax = 0x00000034;
loc_1a34b4: // 0160:1a34b4
    sub_1bda16();
    goto loc_19e44b;
loc_1a34be: // 0160:1a34be
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    ecx = 0x00000001;
    edi = 0x00000021;
    memoryASet32(ds, 0x3a1cec, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 3803474, edi);
    memoryASet32(ds, esi + 3803470, ebp);
    if (memoryAGet32(ds, 0x3a1d00) != 0x00000000)
        goto loc_1a34fd;
    memoryASet32(ds, 0x3a1d00, ecx);
    memoryASet32(ds, 0x3a1d04, ebp);
loc_1a34fd: // 0160:1a34fd
    ecx = 0x00000032;
    esi = 0;
    goto loc_1a328c;
loc_1a3509: // 0160:1a3509
    if (memoryAGet32(ds, eax + 3803486) != 0x00000000)
        goto loc_1a352a;
    eax = esi;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000025;
    sub_1bda16();
loc_1a352a: // 0160:1a352a
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3803518);
    eax <<= 12;
    memoryASet32(ds, esi + 3803486, eax);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax <<= 4;
    ebx = 0x00000032;
    memoryASet32(ds, esi + 3803470, eax);
    memoryASet32(ds, 0x3a1efc, ebx);
    goto loc_19e44b;
loc_1a3566: // 0160:1a3566
    eax = 0x00000022;
    edi = 0x00000010;
    sub_1afc2f();
    ebp = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x3a1c78, edi);
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1efc, eax);
    goto loc_19e44b;
loc_1a3592: // 0160:1a3592
    edi = 0x00000010;
    edx = 0x00000032;
    ebp = 0;
    memoryASet32(ds, 0x3a1c78, edi);
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1efc, edx);
    ebx = memoryAGet32(ds, eax + 3803518);
    edx = 0xfffff400;
    if ((int32_t)ebx <= 0)
        goto loc_1a35c4;
    edx = 0x00000a00;
loc_1a35c4: // 0160:1a35c4
    esi = esi * 0x000000ac;
    ecx = 0x00002400;
    ebx = 0x00001000;
    eax = memoryAGet32(ds, esi + 3803498);
    edi = memoryAGet32(ds, esi + 3803494);
    eax -= 0x00000800;
    edi += edx;
    edx = eax;
    eax = edi;
    sub_1b0340();
    if (!eax)
        goto loc_19e44b;
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803470, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = memoryAGet32(ds, esi + 3803518);
    memoryASet32(ds, eax + 3803518, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 3803486, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edi = 0;
    memoryASet32(ds, eax + 3803490, edi);
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = 0x00000002;
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x00000040;
    sub_1ab709();
    eax += 0x00000003;
    edx = ecx;
    goto loc_1a34b4;
loc_1a3680: // 0160:1a3680
    edi = 0x00000041;
    ebp = 0;
    memoryASet32(ds, eax + 3803474, edi);
    memoryASet32(ds, eax + 3803470, ebp);
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000002e;
    goto loc_1a34b4;
loc_1a36b8: // 0160:1a36b8
    edx = 0x00000003;
    ebx = 0;
    memoryASet32(ds, 0x3a1d30, edx);
    memoryASet32(ds, eax + 3803474, ebx);
    esi = 0x00000032;
    memoryASet32(ds, eax + 3803470, ebx);
    memoryASet32(ds, 0x3a1efc, esi);
    goto loc_19e44b;
}
void sub_1a36e1() // 0160:1a36e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3803518);
    ecx = eax + -3;
    if (edx != 0x00000001)
        goto loc_1a372b;
    eax = 0x00311f60;
    esi -= 0x00000002;
    goto loc_1a3733;
loc_1a372b: // 0160:1a372b
    eax = 0x002d34a0;
    esi -= 0x0000000e;
loc_1a3733: // 0160:1a3733
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000008);
    edx = 0x00318270;
    push32(0x00000010);
    ecx -= 0x00000002;
    ebx = esi;
    sub_1b2017();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a3755() // 0160:1a3755 +long
{
    esp -= 4;
    goto loc_1a3755;
loc_1a0de9: // 0160:1a0de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10598 bytes
loc_1a3755: // 0160:1a3755
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3803518);
    ebp = eax;
    if (edx != 0x00000001)
        goto loc_1a37a4;
    eax = 0x00000002;
    goto loc_1a37a9;
loc_1a37a4: // 0160:1a37a4
    eax = 0xfffffffc;
loc_1a37a9: // 0160:1a37a9
    ecx = 0x00001400;
    edx = ebp;
    eax += edi;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_1b0340();
    if (!eax)
        goto loc_1a3867;
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803470, ebx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000200);
    edx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803494);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 3803494))
        goto loc_1a382a;
    edx = 0xffffffff;
    goto loc_1a382f;
loc_1a382a: // 0160:1a382a
    edx = 0x00000001;
loc_1a382f: // 0160:1a382f
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x3a1cac);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 3803486, edx);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1cac);
    edx = memoryAGet32(ds, edx + 3803582);
    sub_1a4712();
loc_1a3867: // 0160:1a3867
    edx = 0;
    memoryASet32(ds, 0x3a1cf0, edx);
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax = esi * 0x000000ac;
    edx += 0x00000006;
    edx <<= 4;
    if (edx != memoryAGet32(ds, eax + 3803470))
        goto loc_1a397f;
    ebx = ebp + 4;
    if ((int32_t)ebx <= 0)
        goto loc_1a3922;
    if (edi >= 0x000003c0)
        goto loc_1a3922;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    ax = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a3922;
    eax = esi;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000035;
    sub_1bda16();
loc_1a3922: // 0160:1a3922
    ecx = 0x00000600;
    eax = esi;
    ebx = ebp + 10;
    edx = edi + 8;
    memoryASet32(ds, 0x3a1cf4, ecx);
    sub_1a36e1();
    eax = esi;
    sub_1ad1f8();
    ebx = eax;
    eax = esi * 0x000000ac;
    if (ebx)
        goto loc_1a3977;
    edx = memoryAGet32(ds, 0x3a1d44);
    edi = memoryAGet32(ds, eax + 3803490);
    ebx = memoryAGet32(ds, eax + 3803498);
    edi += edx;
    ebx += edi;
    memoryASet32(ds, eax + 3803490, edi);
    memoryASet32(ds, eax + 3803498, ebx);
    memoryASet32(ds, eax + 3803506, ebx);
    goto loc_1a397f;
loc_1a3977: // 0160:1a3977
    esi = 0;
    memoryASet32(ds, eax + 3803490, esi);
loc_1a397f: // 0160:1a397f
    if ((int32_t)ebp <= (int32_t)0x00000178)
        goto loc_1a3991;
    memoryASet32(ds, 0x3a1ccc, 0x00000001);
loc_1a3991: // 0160:1a3991
    esp += 0x00000004;
    goto loc_1a0de9;
}
void sub_1a3999() // 0160:1a3999 +long
{
    esp -= 4;
    goto loc_1a3999;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21831 bytes
loc_1a3999: // 0160:1a3999
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 3803518) != 0x00000001)
        goto loc_1a39ba;
    esi = 0x00311fa0;
    edi = 0xfffffffc;
    goto loc_1a39c4;
loc_1a39ba: // 0160:1a39ba
    esi = 0x002d34e0;
    edi = 0xfffffff4;
loc_1a39c4: // 0160:1a39c4
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi += eax;
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x3a1e5c);
    ecx = eax + -15;
    if (ebp)
        goto loc_1a3a24;
    if ((int32_t)memoryAGet32(ds, ebx + 3803490) >= (int32_t)0x00000000)
        goto loc_1a3a24;
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x00318270;
    push32(0x00000010);
    ebx = edi;
    eax = esi;
    sub_1b2017();
loc_1a3a24: // 0160:1a3a24
    edx = memoryAGet32(ds, 0x3a1e5c);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3a1e5c, edx);
    goto loc_19e44b;
}
void sub_1a3a42() // 0160:1a3a42 +long
{
    esp -= 4;
    goto loc_1a3a42;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18531 bytes
loc_1a2cb5: // 0160:1a2cb5
    esp += 0x00000010;
    goto loc_19e44b;
    // gap 3461 bytes
loc_1a3a42: // 0160:1a3a42
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ebp = eax;
    edi = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    eax = memoryAGet32(ds, edi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, edi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp, 0x003121f0);
    eax -= 0x00000006;
    ecx = memoryAGet32(ds, edi + 3803518);
    memoryASet32(ds, esp + 12, eax);
    if (ecx != 0xffffffff)
        goto loc_1a3aa8;
    esi -= 0x0000000c;
    goto loc_1a3ab0;
loc_1a3aa8: // 0160:1a3aa8
    memoryASet32(ds, esp + 4, 0x00000008);
loc_1a3ab0: // 0160:1a3ab0
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ecx = 0x00001400;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, eax + 3803518);
    ebx = esi + 5;
    eax <<= 3;
    edx += 0x00000002;
    eax += ebx;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_1b0340();
    if (!eax)
        goto loc_1a3b9d;
    ebx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803526) != 0x00000000)
        goto loc_1a3b9d;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ebx + 3803526, ecx);
    eax = memoryAGet32(ds, eax + 3803518);
    edi = eax;
    edi <<= 2;
    edx = memoryAGet32(ds, 0x3a1cac);
    edi -= eax;
    eax = edx * 0x000000ac;
    edi <<= 9;
    memoryASet32(ds, eax + 3803486, edi);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, 0xfffff600);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, edx + 3803518);
    memoryASet32(ds, eax + 3803518, edx);
    ebx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, ebx + 3803498, memoryAGet32(ds, ebx + 3803498) - 0x00000200);
    edx = 0x0000001e;
    eax = memoryAGet32(ds, 0x3a1cac);
    sub_1a4712();
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x00000080;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000b;
    sub_1bda16();
loc_1a3b9d: // 0160:1a3b9d
    if (memoryAGet32(ds, 0x3a1d00) == 0x00000000)
        goto loc_1a3cd7;
    memoryASet32(ds, 0x3a1d04, memoryAGet32(ds, 0x3a1d04) + 1);
    ecx = memoryAGet32(ds, esp + 12);
    ecx += 0x00000006;
    if ((int32_t)ecx <= 0)
        goto loc_1a3cb9;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += esi;
    if (ebx >= 0x000003c0)
        goto loc_1a3cb9;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ebx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edi = ecx;
    eax = 0;
    edi <<= 4;
    ax = memoryAGet16(ds, 0x3a1c52);
    edi -= ecx;
    eax &= edx;
    edi <<= 6;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 3244656);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1a3cb9;
    if ((int32_t)memoryAGet32(ds, 0x3a1d00) <= (int32_t)0x00000000)
        goto loc_1a3c42;
    memoryASet32(ds, 0x3a1d00, 0x00000002);
loc_1a3c42: // 0160:1a3c42
    if ((int32_t)memoryAGet32(ds, 0x3a1d00) <= (int32_t)0x00000000)
        goto loc_1a3c58;
    if ((int32_t)memoryAGet32(ds, 0x3a1d04) <= (int32_t)0x00000019)
        goto loc_1a3cd7;
loc_1a3c58: // 0160:1a3c58
    edi = ebp * 0x000000ac;
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x00000026;
    edx = memoryAGet32(ds, edi + 3803498);
    eax = memoryAGet32(ds, edi + 3803494);
    edx -= 0x00004000;
    eax -= 0x00003000;
    sub_1ae04a();
    edx = 0;
    memoryASet32(ds, 0x3a1d00, edx);
    memoryASet32(ds, 0x3a1cec, edx);
    memoryASet32(ds, edi + 3803494, edx);
    memoryASet32(ds, edi + 3803570, edx);
    ebx = 0x00000010;
    memoryASet32(ds, edi + 3803574, edx);
    memoryASet32(ds, 0x3a1c78, ebx);
    memoryASet32(ds, 0x3a1cc0, edx);
    goto loc_1a3cd7;
loc_1a3cb9: // 0160:1a3cb9
    edi = memoryAGet32(ds, 0x3a1d00);
    if (edi != 0x00000002)
        goto loc_1a3cd7;
    if ((int32_t)memoryAGet32(ds, 0x3a1d04) <= (int32_t)0x00000019)
        goto loc_1a3cd7;
    edx = edi;
    edx = -edx;
    memoryASet32(ds, 0x3a1d00, edx);
loc_1a3cd7: // 0160:1a3cd7
    ebx = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    eax = esi;
    ecx = memoryAGet32(ds, ebx + 3803490);
    ebx = memoryAGet32(ds, ebx + 3803486);
    sub_1adb97();
    if ((int32_t)esi <= 0)
        goto loc_1a3d27;
    if ((int32_t)esi >= (int32_t)0x000003b8)
        goto loc_1a3d27;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    edx = 0x00318270;
    eax = memoryAGet32(ds, esp + 12);
    push32(0x0000000e);
    ebx = esi;
    ecx -= 0x00000002;
    sub_1b2017();
    goto loc_1a3d6a;
loc_1a3d27: // 0160:1a3d27
    if ((int32_t)esi > 0)
        goto loc_1a3d53;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    ebx = 0xfffffffe;
    edx = 0x00318270;
    push32(0x0000000e);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= 0x00000002;
    sub_1b2017();
loc_1a3d53: // 0160:1a3d53
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 3803494, 0x00078200);
    eax = ebp;
    sub_19e452();
loc_1a3d6a: // 0160:1a3d6a
    memoryASet16(ds, 0x3a1c52, 0xffff);
    goto loc_1a2cb5;
}
void sub_1a3dd3() // 0160:1a3dd3 +long
{
    esp -= 4;
    goto loc_1a3dd3;
loc_1a0de9: // 0160:1a0de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12260 bytes
loc_1a3dd3: // 0160:1a3dd3
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    esi = eax;
    memoryASet32(ds, esp + 8, edx);
    ecx = eax * 0x000000ac;
    edx = 0xfffffffd;
    ebx = memoryAGet32(ds, 0x3a1c60);
    edi = 0;
    ebx++;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, 0x3a1c60, ebx);
    memoryASet32(ds, esp + 28, edi);
    ecx = memoryAGet32(ds, ecx + 3803518);
    memoryASet32(ds, 0x3a1cf4, edi);
    if (ecx != 0x00000001)
        goto loc_1a3e2c;
    ebx = 0x003120f0;
    edi = 0xfffffffe;
    ebp = 0x00000006;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebp);
    goto loc_1a3e42;
loc_1a3e2c: // 0160:1a3e2c
    eax = 0x002d3630;
    edi = 0xfffffff2;
    edx = 0xfffffffa;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp, edx);
loc_1a3e42: // 0160:1a3e42
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, edx + 3803470);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax -= memoryAGet32(ds, ebx * 8 + 0x1e043a);
    eax <<= 4;
    ebp = eax + -96;
    if (ecx != 0x00000001)
        goto loc_1a3e8c;
    edx = 0x00000007;
    ebx = 0x00000009;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
    goto loc_1a3e9e;
loc_1a3e8c: // 0160:1a3e8c
    ebx = 0x00000005;
    eax = 0x00000009;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 20, eax);
loc_1a3e9e: // 0160:1a3e9e
    if (ecx != 0x00000001)
        goto loc_1a3eda;
    if ((int32_t)memoryAGet32(ds, 0x3a1c84) > (int32_t)0xfffffff0)
        goto loc_1a3eda;
    edx = 0x00000400;
    ebx = 0x00000002;
    ebp += 0x00000050;
    eax = 0;
    edi += ecx;
    memoryASet32(ds, 0x3a1cf4, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000005;
    ebx = 0x0000000a;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1a3eda: // 0160:1a3eda
    if (ecx != 0x00000001)
        goto loc_1a3f20;
    if ((int32_t)memoryAGet32(ds, 0x3a1c84) < (int32_t)0x00000010)
        goto loc_1a3f20;
    edx = 0xfffffc00;
    ebx = 0xffffffff;
    eax = 0xfffffff8;
    ebp += 0x000000a0;
    edi -= 0x00000003;
    memoryASet32(ds, 0x3a1cf4, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x0000000a;
    ebx = 0x0000000d;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1a3f20: // 0160:1a3f20
    if (ecx != 0xffffffff)
        goto loc_1a3f61;
    if ((int32_t)memoryAGet32(ds, 0x3a1c84) < (int32_t)0x00000010)
        goto loc_1a3f61;
    edx = 0xfffffc00;
    eax = 0xfffffff8;
    ebx = 0x0000000b;
    memoryASet32(ds, esp + 28, ecx);
    ebp += 0x000000a0;
    edi += 0x00000003;
    memoryASet32(ds, 0x3a1cf4, edx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000002;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 24, edx);
loc_1a3f61: // 0160:1a3f61
    if (ecx != 0xffffffff)
        goto loc_1a3f9e;
    if ((int32_t)memoryAGet32(ds, 0x3a1c84) > (int32_t)0xfffffff0)
        goto loc_1a3f9e;
    eax = 0x00000400;
    edx = 0x00000002;
    ecx = 0x00000008;
    ebp += 0x00000050;
    edi--;
    ebx = 0;
    memoryASet32(ds, 0x3a1cf4, eax);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 16, ebx);
    eax = 0x0000000b;
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 20, eax);
loc_1a3f9e: // 0160:1a3f9e
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 16);
    ebx = 0x00000600;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    edx <<= 9;
    eax += ecx;
    ecx = 0x00001400;
    eax <<= 9;
    sub_1b0340();
    if (!eax)
        goto loc_1a40d8;
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803470, ebx);
    ebx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, ebx + 3803498, memoryAGet32(ds, ebx + 3803498) - 0x00000200);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx + 3803494))
        goto loc_1a4057;
    edx = 0xffffffff;
    goto loc_1a405c;
loc_1a4057: // 0160:1a4057
    edx = 0x00000001;
loc_1a405c: // 0160:1a405c
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    ebx <<= 8;
    memoryASet32(ds, eax + 3803486, ebx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803518, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, 0xfffffe80);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803582);
    eax = memoryAGet32(ds, 0x3a1cac);
    sub_1a4712();
    eax = esi;
    edx = 0x00000002;
    sub_19e30a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000003;
    edx = ecx;
    sub_1bda16();
loc_1a40d8: // 0160:1a40d8
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx * 8 + 0x1e043a);
    eax += 0x00000006;
    eax <<= 4;
    if (eax != memoryAGet32(ds, edx + 3803470))
        goto loc_1a4116;
    eax = esi;
    ebx = 0x00000020;
    sub_19e30a();
    edx = eax;
    eax = 0x0000002c;
    sub_1bda16();
loc_1a4116: // 0160:1a4116
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax = memoryAGet32(ds, ebx * 8 + 0x1e043a);
    ebx = esi * 0x000000ac;
    eax += 0x00000006;
    eax <<= 4;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, ebx + 3803470))
        goto loc_1a41f2;
    if (memoryAGet(ds, ebx + 3803470) & 0x0f)
        goto loc_1a41f2;
    memoryASet32(ds, 0x3a1cf0, 0x00000600);
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax += edi;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000d);
    push32(0x00000010);
    edi = memoryAGet32(ds, esp + 44);
    ebx = memoryAGet32(ds, esp + 28);
    eax -= 0x0000000b;
    edx = 0x00318270;
    edi += eax;
    eax = memoryAGet32(ds, esp + 20);
    ecx = edi;
    eax += ebp;
    sub_1b2017();
    eax = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 28);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 12, ebp);
    edi += eax;
    if (edx)
        goto loc_1a41cf;
    edi += 0x00000004;
loc_1a41cf: // 0160:1a41cf
    edx = memoryAGet32(ds, esp + 12);
    ebx = edi;
    eax = esi;
    sub_1ad1f8();
    if (!eax)
        goto loc_1a41e8;
    if ((int32_t)edi <= (int32_t)0x0000017e)
        goto loc_1a41f2;
loc_1a41e8: // 0160:1a41e8
    memoryASet32(ds, 0x3a1ccc, 0x00000001);
loc_1a41f2: // 0160:1a41f2
    esp += 0x00000020;
    goto loc_1a0de9;
}
void sub_1a41fa() // 0160:1a41fa +long
{
    esp -= 4;
    goto loc_1a41fa;
loc_1a0de9: // 0160:1a0de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13323 bytes
loc_1a41fa: // 0160:1a41fa
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x3a1c64);
    if (eax != edx)
        goto loc_1a4220;
    if (edx != edx)
        goto loc_1a422a;
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803474) == 0x00000000)
        goto loc_1a422a;
loc_1a4220: // 0160:1a4220
    memoryASet32(ds, 0x3a1efc, 0x00000032);
loc_1a422a: // 0160:1a422a
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000010)
        goto loc_1a4254;
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1a4254;
    if (memoryAGet32(ds, eax + 3803470) == 0x00000000)
        goto loc_1a4254;
    edx = esi;
    eax = ecx;
    sub_1a3dd3();
loc_1a4254: // 0160:1a4254
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000014)
        goto loc_1a4275;
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1a4275;
    edx = esi;
    eax = ecx;
    sub_1a3755();
loc_1a4275: // 0160:1a4275
    if (memoryAGet32(ds, 0x3a1dbc) == 0x00000000)
        goto loc_1a4298;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803490) == 0x00000000)
        goto loc_1a4298;
    eax = ecx;
    sub_1a3999();
loc_1a4298: // 0160:1a4298
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x0000001f)
        goto loc_1a42b7;
    if (memoryAGet32(ds, 0x3a1cec) == 0x00000000)
        goto loc_1a42b7;
    eax = ecx;
    sub_1a3a42();
loc_1a42b7: // 0160:1a42b7
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3803474) != 0x0000000d)
        goto loc_1a42fc;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax += 0x0000001c;
    edi = memoryAGet32(ds, edx + 3803470);
    eax <<= 4;
    if (eax != edi)
        goto loc_1a42fc;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000a;
    sub_1bda16();
loc_1a42fc: // 0160:1a42fc
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3803474) != 0x00000019)
        goto loc_1a4341;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax += 0x00000006;
    ebx = memoryAGet32(ds, edx + 3803470);
    eax <<= 4;
    if (eax != ebx)
        goto loc_1a4341;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000034;
    sub_1bda16();
loc_1a4341: // 0160:1a4341
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 3803474) != 0x0000000f)
        goto loc_1a43d7;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax += 0x00000005;
    ebp = memoryAGet32(ds, edx + 3803470);
    eax <<= 4;
    if (eax != ebp)
        goto loc_1a43d7;
    eax = memoryAGet32(ds, 0x3a1c60);
    if ((int32_t)eax <= (int32_t)0x000001f4)
        goto loc_1a43b8;
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1a43a3;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000001c;
    goto loc_1a43d2;
loc_1a43a3: // 0160:1a43a3
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000030;
    goto loc_1a43d2;
loc_1a43b8: // 0160:1a43b8
    if ((int32_t)eax <= (int32_t)0x00000096)
        goto loc_1a43d7;
    eax = ecx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000022;
loc_1a43d2: // 0160:1a43d2
    sub_1bda16();
loc_1a43d7: // 0160:1a43d7
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803474) != 0x00000000)
        goto loc_1a4438;
    ebx = memoryAGet32(ds, eax + 3803542);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    ebp = memoryAGet32(ds, eax + 3803470);
    edx = memoryAGet32(ds, edx * 8 + 0x1e0442);
    ebx = memoryAGet32(ds, eax + 3803542);
    ebp += edx;
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx = memoryAGet32(ds, edx * 8 + 0x1e0446);
    ebx = memoryAGet32(ds, eax + 3803542);
    memoryASet32(ds, eax + 3803626, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    memoryASet32(ds, eax + 3803470, ebp);
    edx = memoryAGet32(ds, edx * 8 + 0x1e044a);
    goto loc_1a4466;
loc_1a4438: // 0160:1a4438
    edx = esi;
    edx <<= 2;
    edx -= esi;
    edi = memoryAGet32(ds, eax + 3803470);
    edi += memoryAGet32(ds, edx * 8 + 0x1e0442);
    ebx = memoryAGet32(ds, edx * 8 + 0x1e0446);
    memoryASet32(ds, eax + 3803470, edi);
    edx = memoryAGet32(ds, edx * 8 + 0x1e044a);
    memoryASet32(ds, eax + 3803626, ebx);
loc_1a4466: // 0160:1a4466
    memoryASet32(ds, eax + 3803630, edx);
    edx = ecx * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax <<= 3;
    if ((int32_t)memoryAGet32(ds, eax + 1967170) <= (int32_t)0x00000000)
        goto loc_1a44bf;
    eax = memoryAGet32(ds, eax + 1967162);
    ebp = memoryAGet32(ds, edx + 3803470);
    eax <<= 4;
    if ((int32_t)eax <= (int32_t)ebp)
        goto loc_1a449e;
    memoryASet32(ds, edx + 3803470, eax);
loc_1a449e: // 0160:1a449e
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, eax * 8 + 0x1e043e);
    eax = ecx * 0x000000ac;
    edx <<= 4;
    if ((int32_t)edx > (int32_t)memoryAGet32(ds, eax + 3803470))
        goto loc_1a450e;
    goto loc_1a4505;
loc_1a44bf: // 0160:1a44bf
    ebx = memoryAGet32(ds, eax + 1967166);
    edi = memoryAGet32(ds, edx + 3803470);
    ebx <<= 4;
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1a44e1;
    eax = memoryAGet32(ds, eax + 1967162);
    eax <<= 4;
    memoryASet32(ds, edx + 3803470, eax);
loc_1a44e1: // 0160:1a44e1
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803470);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043e);
    ebx -= 0x00000004;
    eax <<= 4;
    if ((int32_t)ebx > (int32_t)eax)
        goto loc_1a450e;
loc_1a4505: // 0160:1a4505
    eax = ecx;
    sub_1a2cbd();
    esi = eax;
loc_1a450e: // 0160:1a450e
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 3803470);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x1e044e);
    edi = memoryAGet32(ds, ecx + 3803470);
    eax <<= 4;
    if ((int32_t)eax > (int32_t)edi)
        goto loc_1a4554;
    if (memoryAGet32(ds, 0x3a1c78) == 0x00000010)
        goto loc_1a4554;
    eax = esi;
    sub_1a314d();
loc_1a4554: // 0160:1a4554
    eax = edx;
    goto loc_1a0de9;
}
void sub_1a455b() // 0160:1a455b +long
{
    esp -= 4;
    goto loc_1a455b;
loc_1a0de9: // 0160:1a0de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14188 bytes
loc_1a455b: // 0160:1a455b
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = eax * 0x000000ac;
    ebp = memoryAGet32(ds, esi + 3803542);
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ebx = memoryAGet32(ds, esi + 3803550);
    edx = memoryAGet32(ds, eax * 8 + 0x1e0442);
    edx = (int32_t)edx * (int32_t)ebx;
    ecx = memoryAGet32(ds, esi + 3803470);
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    ecx += edx;
    eax <<= 4;
    memoryASet32(ds, esi + 3803470, ecx);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1a45aa;
    memoryASet32(ds, esi + 3803470, eax);
loc_1a45aa: // 0160:1a45aa
    edx = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax <<= 3;
    ecx = memoryAGet32(ds, eax + 1967166);
    ecx <<= 4;
    if ((int32_t)ecx > (int32_t)memoryAGet32(ds, edx + 3803470))
        goto loc_1a45da;
    eax = memoryAGet32(ds, eax + 1967162);
    eax <<= 4;
    memoryASet32(ds, edx + 3803470, eax);
loc_1a45da: // 0160:1a45da
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax <<= 4;
    if (eax != memoryAGet32(ds, esi + 3803470))
        goto loc_1a4611;
    eax = memoryAGet32(ds, esi + 3803494);
    memoryASet32(ds, esi + 3803502, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    memoryASet32(ds, esi + 3803506, eax);
loc_1a4611: // 0160:1a4611
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, eax * 8 + 0x1e043a);
    eax <<= 4;
    if (eax == memoryAGet32(ds, esi + 3803470))
        goto loc_1a463e;
    eax = memoryAGet32(ds, esi + 3803518);
    if (eax == memoryAGet32(ds, esi + 3803522))
        goto loc_1a4691;
loc_1a463e: // 0160:1a463e
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esi + 3803518);
    ecx = esp + 4;
    push32(edx);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = edi;
    edx = memoryAGet32(ds, esp + 16);
    sub_1ad1ca();
    memoryASet32(ds, esi + 3803514, eax);
loc_1a4691: // 0160:1a4691
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3803470);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ecx = memoryAGet32(ds, eax * 8 + 0x1e0446);
    eax = memoryAGet32(ds, eax * 8 + 0x1e044a);
    memoryASet32(ds, esi + 3803626, ecx);
    memoryASet32(ds, esi + 3803630, eax);
    if (edi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a4708;
    ebp = memoryAGet32(ds, 0x3a1cfc);
    edx += ebp;
    if (ebp != 0x00000005)
        goto loc_1a46eb;
    ebx = eax + 3;
    memoryASet32(ds, esi + 3803630, ebx);
loc_1a46eb: // 0160:1a46eb
    if (memoryAGet32(ds, 0x3a1cfc) != 0x0000000a)
        goto loc_1a4700;
    edi = edi * 0x000000ac;
    memoryASet32(ds, edi + 3803630, memoryAGet32(ds, edi + 3803630) - 1);
loc_1a4700: // 0160:1a4700
    edi = 0;
    memoryASet32(ds, 0x3a1cfc, edi);
loc_1a4708: // 0160:1a4708
    eax = edx;
    esp += 0x0000000c;
    goto loc_1a0de9;
}
void sub_1a4712() // 0160:1a4712 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803574);
    ebx += edx;
    memoryASet32(ds, eax + 3803574, ebx);
    if (memoryAGet32(ds, 0x3a1ef8) == 0x00000000)
        goto loc_1a4752;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, eax + 3803570))
        goto loc_1a4752;
    edi = 0;
    memoryASet32(ds, eax + 3803570, edi);
    edx = 0x00000001;
    memoryASet32(ds, eax + 3803574, edi);
    memoryASet32(ds, eax + 3803566, edx);
loc_1a4752: // 0160:1a4752
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4755() // 0160:1a4755 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = edx;
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edi = memoryAGet32(ds, edx + 3803518);
    ebx = 0xffffee00;
    if ((int32_t)edi <= 0)
        goto loc_1a4779;
    ebx = 0x00000800;
loc_1a4779: // 0160:1a4779
    edx = ecx + -2048;
    eax += ebx;
    ecx = 0x00004000;
    ebx = 0x00001000;
    sub_1b0340();
    if (!eax)
        goto loc_1a491e;
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803518);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x3a1cac);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 3803486, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, 0xfffffc00);
    ebx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -2;
    if ((int32_t)ecx <= 0)
        goto loc_1a485c;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1a485c;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1a4870;
loc_1a485c: // 0160:1a485c
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000400);
loc_1a4870: // 0160:1a4870
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet16(ds, 0x3a1c52, 0xffff);
    eax = memoryAGet32(ds, eax + 3803518);
    memoryASet32(ds, edx + 3803518, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, 0x3a1ce8, 0x002df2e0);
    edx = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, 0x3a1cdc, edx);
    if ((int32_t)memoryAGet32(ds, eax + 3803518) > (int32_t)0x00000000)
        goto loc_1a48cc;
    memoryASet32(ds, 0x3a1cdc, memoryAGet32(ds, 0x3a1cdc) - 0x00001c00);
loc_1a48cc: // 0160:1a48cc
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803498);
    esi = 0x00000001;
    edx += 0x00000e00;
    memoryASet32(ds, 0x3a1ce4, esi);
    memoryASet32(ds, 0x3a1ce0, edx);
    edx = memoryAGet32(ds, eax + 3803582);
    eax = memoryAGet32(ds, 0x3a1cac);
    sub_1a4712();
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000b;
    sub_1bda16();
loc_1a491e: // 0160:1a491e
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4923() // 0160:1a4923 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    ebx = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803530) != 0x00000000)
        goto loc_1a4949;
    if (memoryAGet32(ds, eax + 3803474) != 0x00000000)
        goto loc_1a4949;
    if (memoryAGet32(ds, eax + 3803526) == 0x00000000)
        goto loc_1a497d;
loc_1a4949: // 0160:1a4949
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, eax + 3803502, edx);
    edx = memoryAGet32(ds, eax + 3803498);
    edi = memoryAGet32(ds, eax + 3803474);
    memoryASet32(ds, eax + 3803506, edx);
    if (edi != 0x0000001b)
        goto loc_1a497d;
    eax = memoryAGet32(ds, eax + 3803494);
    sub_1a4755();
loc_1a497d: // 0160:1a497d
    if (memoryAGet32(ds, 0x3a1cec) == 0x00000000)
        goto loc_1a49b2;
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803486);
    ebx = memoryAGet32(ds, eax + 3803494);
    ebx += edx;
    memoryASet32(ds, eax + 3803494, ebx);
    edx = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, eax + 3803502, ebx);
    memoryASet32(ds, eax + 3803506, edx);
loc_1a49b2: // 0160:1a49b2
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a49b6() // 0160:1a49b6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x3a1d08);
    if (!edx)
        goto loc_1a49d8;
    ebx = 0x00000032;
    ecx = edx + -1;
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x3a1d08, ecx);
loc_1a49d8: // 0160:1a49d8
    ecx = 0x00000032;
    ebx = 0x00000001;
    edx = 0;
    goto loc_1a4a2b;
loc_1a49e6: // 0160:1a49e6
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_1a4a2a;
    if (memoryAGet32(ds, eax + 3803474) != 0x0000000a)
        goto loc_1a4a1b;
    sub_19e20e();
    esi = 0x00000080;
    edx = 0x00000010;
    memoryASet32(ds, 0x3a1efc, ecx);
    memoryASet32(ds, 0x3a1d08, esi);
    goto loc_1a4a2a;
loc_1a4a1b: // 0160:1a4a1b
    if (memoryAGet32(ds, eax + 3803570) != 0x00000000)
        goto loc_1a4a2a;
    memoryASet32(ds, eax + 3803590, ebx);
loc_1a4a2a: // 0160:1a4a2a
    edx++;
loc_1a4a2b: // 0160:1a4a2b
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a49e6;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4a35() // 0160:1a4a35 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x1e3a9c);
    edx = memoryAGet32(ds, 0x3a1ea8);
    ebx--;
    if (edx)
        goto loc_1a4a69;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, 0x3a1c68))
        goto loc_1a4a69;
    memoryASet32(ds, 0x3a1ea8, 0x00000001);
loc_1a4a69: // 0160:1a4a69
    if (ebx != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a4a7b;
    memoryASet32(ds, 0x3a1e9c, 0x00000001);
loc_1a4a7b: // 0160:1a4a7b
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x3a1c68))
        goto loc_1a4a9e;
    memoryASet32(ds, 0x3a1ea0, 0x00000001);
    goto loc_1a4ada;
loc_1a4a9e: // 0160:1a4a9e
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1a4ab8;
    memoryASet32(ds, 0x3a1eb0, 0x00000001);
loc_1a4ab8: // 0160:1a4ab8
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x1e3aa0);
    if (edx != memoryAGet32(ds, eax + 3803582))
        goto loc_1a4ada;
    memoryASet32(ds, 0x3a1e94, 0x00000001);
loc_1a4ada: // 0160:1a4ada
    if (ebx != memoryAGet32(ds, 0x3a1ec4))
        goto loc_1a4afc;
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1a4afc;
    memoryASet32(ds, 0x3a1ec0, 0x00000001);
loc_1a4afc: // 0160:1a4afc
    memoryASet32(ds, 0x3a1ec4, ebx);
    ebx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, ebx + 3803586, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4b16() // 0160:1a4b16 +long
{
    esp -= 4;
    goto loc_1a4b16;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 26308 bytes
loc_1a4b16: // 0160:1a4b16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1c64);
    eax = eax * 0x000000ac;
    ecx = 0;
    edx = memoryAGet32(ds, eax + 3803574);
    ebx = memoryAGet32(ds, eax + 3803570);
    memoryASet32(ds, 0x3aa1b0, ecx);
    if ((int32_t)edx <= (int32_t)ebx)
        goto loc_1a4b43;
    esi = ebx;
    goto loc_1a4b45;
loc_1a4b43: // 0160:1a4b43
    esi = edx;
loc_1a4b45: // 0160:1a4b45
    ebp = memoryAGet32(ds, 0x3a1c64);
    edx = 0;
    eax = 0;
loc_1a4b4f: // 0160:1a4b4f
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_1a4b70;
    if (edx == ebp)
        goto loc_1a4b70;
    ebx = memoryAGet32(ds, eax + 3803574);
    edi = memoryAGet32(ds, eax + 3803570);
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1a4b6e;
    ebx = edi;
loc_1a4b6e: // 0160:1a4b6e
    ecx += ebx;
loc_1a4b70: // 0160:1a4b70
    edx++;
    eax += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a4b4f;
    if ((int32_t)ecx <= (int32_t)esi)
        goto loc_19e44b;
    memoryASet32(ds, 0x3aa1b0, 0x00000001);
    goto loc_19e44b;
}
void sub_1a4b92() // 0160:1a4b92 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x1e3a9c) <= (int32_t)0x00000000)
        goto loc_1a4ba4;
    sub_1a4a35();
loc_1a4ba4: // 0160:1a4ba4
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3803542);
    if (ecx == 0x00000026)
        goto loc_1a4bcd;
    if (ecx == 0x00000024)
        goto loc_1a4bcd;
    if (ecx == 0x00000036)
        goto loc_1a4bcd;
    if (ecx == 0x0000002f)
        goto loc_1a4bcd;
    if (ecx != 0x00000027)
        goto loc_1a4be1;
loc_1a4bcd: // 0160:1a4bcd
    ebx = 0;
    memoryASet32(ds, 0x3a1eb8, ebx);
    memoryASet32(ds, 0x3a1e94, ebx);
    memoryASet32(ds, 0x3a1e8c, ebx);
loc_1a4be1: // 0160:1a4be1
    if (memoryAGet32(ds, 0x3a1e08) == 0x00000000)
        goto loc_1a4c04;
    ebp = 0;
    memoryASet32(ds, 0x3a1e8c, ebp);
    memoryASet32(ds, 0x3a1eb0, ebp);
    memoryASet32(ds, 0x3a1ec0, ebp);
    memoryASet32(ds, 0x3a1e94, ebp);
loc_1a4c04: // 0160:1a4c04
    if (memoryAGet32(ds, 0x3a1ea8) != 0x00000001)
        goto loc_1a4c38;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000003c;
    ecx = 0xffffffff;
    sub_1bda16();
    memoryASet32(ds, 0x3a1ea8, ecx);
    goto loc_1a4e4c;
loc_1a4c38: // 0160:1a4c38
    if (memoryAGet32(ds, 0x3a1e9c) == 0x00000000)
        goto loc_1a4c65;
    if (memoryAGet32(ds, 0x3aa1b0) != 0x00000000)
        goto loc_1a4c65;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000f;
    goto loc_1a4e47;
loc_1a4c65: // 0160:1a4c65
    if (memoryAGet32(ds, 0x3a1ea0) == 0x00000000)
        goto loc_1a4cbb;
    eax = memoryAGet32(ds, 0x3a1e9c);
    if (eax)
        goto loc_1a4cbb;
    edx = 0x00000001;
    sub_1ab709();
    if (eax)
        goto loc_1a4ca0;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000002;
    goto loc_1a4e47;
loc_1a4ca0: // 0160:1a4ca0
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000013;
    goto loc_1a4e47;
loc_1a4cbb: // 0160:1a4cbb
    if (memoryAGet32(ds, 0x3a1e8c) == 0x00000000)
        goto loc_1a4cdf;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000036;
    goto loc_1a4e47;
loc_1a4cdf: // 0160:1a4cdf
    if (memoryAGet32(ds, 0x3a1e98) == 0x00000000)
        goto loc_1a4d03;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000026;
    goto loc_1a4e47;
loc_1a4d03: // 0160:1a4d03
    if (memoryAGet32(ds, 0x3a1e94) == 0x00000000)
        goto loc_1a4d27;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000009;
    goto loc_1a4e47;
loc_1a4d27: // 0160:1a4d27
    if (memoryAGet32(ds, 0x3a1ebc) == 0x00000000)
        goto loc_1a4d48;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0;
    goto loc_1a4e47;
loc_1a4d48: // 0160:1a4d48
    if (memoryAGet32(ds, 0x3a1eac) == 0x00000000)
        goto loc_1a4d6c;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000039;
    goto loc_1a4e47;
loc_1a4d6c: // 0160:1a4d6c
    if (memoryAGet32(ds, 0x3a1ec0) == 0x00000000)
        goto loc_1a4d90;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000027;
    goto loc_1a4e47;
loc_1a4d90: // 0160:1a4d90
    eax = memoryAGet32(ds, 0x3a1eb4);
    if (!eax)
        goto loc_1a4db4;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000018;
    goto loc_1a4e47;
loc_1a4db4: // 0160:1a4db4
    if (memoryAGet32(ds, 0x3a1eb8) != 0x00000001)
        goto loc_1a4dd8;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000029;
    goto loc_1a4e47;
loc_1a4dd8: // 0160:1a4dd8
    if (memoryAGet32(ds, 0x3a1eb0) == 0x00000000)
        goto loc_1a4e4c;
    edx = 0x00000002;
    sub_1ab709();
    ecx = eax;
    if (eax)
        goto loc_1a4e0c;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000001b;
    sub_1bda16();
loc_1a4e0c: // 0160:1a4e0c
    if (ecx != 0x00000001)
        goto loc_1a4e2c;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000023;
    sub_1bda16();
loc_1a4e2c: // 0160:1a4e2c
    if (ecx != 0x00000002)
        goto loc_1a4e4c;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000024;
loc_1a4e47: // 0160:1a4e47
    sub_1bda16();
loc_1a4e4c: // 0160:1a4e4c
    sub_19e20e();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a4e56() // 0160:1a4e56 +long
{
    esp -= 4;
    goto loc_1a4e56;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27140 bytes
loc_1a4e56: // 0160:1a4e56
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a4b16();
    ecx = 0;
    ebx = 0;
loc_1a4e65: // 0160:1a4e65
    esi = 0;
    edi = memoryAGet32(ds, ebx + 3803574);
    memoryASet32(ds, ebx + 3803566, esi);
    if (!edi)
        goto loc_1a4ee6;
    ebp = memoryAGet32(ds, ebx + 3803570);
    edx = edi;
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_1a4e98;
    edi = 0x00000001;
    memoryASet32(ds, ebx + 3803570, esi);
    edx = ebp;
    memoryASet32(ds, 0x3a1e08, edi);
    goto loc_1a4ea2;
loc_1a4e98: // 0160:1a4e98
    eax = ebp;
    eax -= edi;
    memoryASet32(ds, ebx + 3803570, eax);
loc_1a4ea2: // 0160:1a4ea2
    ebp = 0;
    eax = ecx;
    memoryASet32(ds, ebx + 3803574, ebp);
    sub_1981a0();
    memoryASet32(ds, ebx + 3803578, 0x00009600);
    eax = ecx;
    sub_1980af();
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, eax * 4 + 0x1e15d4, 0x00000001);
loc_1a4ee6: // 0160:1a4ee6
    ecx++;
    ebx += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1a4e65;
    if (memoryAGet32(ds, 0x3a1ef8) != 0x00000000)
        goto loc_1a4f04;
    sub_1a4b92();
loc_1a4f04: // 0160:1a4f04
    edi = 0;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e12fa, edi);
    memoryASet32(ds, 0x3a1ef8, ebp);
    memoryASet32(ds, 0x3a1e6c, edi);
    goto loc_19e44b;
}
void sub_1a4f22() // 0160:1a4f22 +long
{
    esp -= 4;
    goto loc_1a4f22;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27344 bytes
loc_1a4f22: // 0160:1a4f22
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1e4c);
    ebx = memoryAGet32(ds, 0x3a1e0c);
    if (!edx)
        goto loc_1a4f87;
    ecx = edx + -1;
    memoryASet32(ds, 0x3a1e4c, ecx);
    if (ecx)
        goto loc_1a4f87;
    sub_19e20e();
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1a4f6f;
    eax = ebx;
    sub_19e30a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000001;
    goto loc_1a4f82;
loc_1a4f6f: // 0160:1a4f6f
    eax = ebx;
    sub_19e30a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x0000002f;
loc_1a4f82: // 0160:1a4f82
    sub_1bda16();
loc_1a4f87: // 0160:1a4f87
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebp = memoryAGet32(ds, eax + 3803550);
    if (!ebp)
        goto loc_1a4fd3;
    if ((int32_t)memoryAGet32(ds, eax + 3803514) <= (int32_t)0x00004000)
        goto loc_1a4fb1;
    memoryASet32(ds, 0x3a1cfc, 0x00000005);
loc_1a4fb1: // 0160:1a4fb1
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803514) >= (int32_t)0xffffc000)
        goto loc_1a4fd9;
    memoryASet32(ds, 0x3a1cfc, 0x0000000a);
    goto loc_1a4fd9;
loc_1a4fd3: // 0160:1a4fd3
    memoryASet32(ds, 0x3a1cfc, ebp);
loc_1a4fd9: // 0160:1a4fd9
    sub_1a49b6();
    esi = 0;
    ecx = 0;
loc_1a4fe2: // 0160:1a4fe2
    if (memoryAGet32(ds, ecx + 3803494) == 0x00000000)
        goto loc_1a52c8;
    if (memoryAGet32(ds, ecx + 3803486) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803474) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803530) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803526) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803550) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803490) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803590) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803470) != 0x00000000)
        goto loc_1a5044;
    if (memoryAGet32(ds, ecx + 3803578) == 0x00000000)
        goto loc_1a52c8;
loc_1a5044: // 0160:1a5044
    ebp = memoryAGet32(ds, ecx + 3803590);
    if (!ebp)
        goto loc_1a5057;
    eax = ebp + -1;
    memoryASet32(ds, ecx + 3803590, eax);
loc_1a5057: // 0160:1a5057
    if (memoryAGet32(ds, ecx + 3803578) == 0x00000000)
        goto loc_1a50c1;
    if (memoryAGet32(ds, ecx + 3803510) != 0x00000000)
        goto loc_1a50c1;
    if (memoryAGet32(ds, ecx + 3803486) != 0x00000000)
        goto loc_1a50c1;
    if (memoryAGet32(ds, ecx + 3803526) != 0x00000000)
        goto loc_1a50c1;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1a50c1;
    edx = memoryAGet32(ds, ecx + 3803474);
    if (edx == 0x0000000f)
        goto loc_1a5093;
    if (edx)
        goto loc_1a50c1;
loc_1a5093: // 0160:1a5093
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    ebp = memoryAGet32(ds, ecx + 3803578);
    ebp -= 0x00000170;
    memoryASet32(ds, ecx + 3803578, ebp);
    if ((int32_t)ebp > 0)
        goto loc_1a50c1;
    edx = 0;
    memoryASet32(ds, ecx + 3803578, edx);
    memoryASet32(ds, ecx + 3803566, edx);
loc_1a50c1: // 0160:1a50c1
    if (memoryAGet32(ds, ecx + 3803570) != 0x00000000)
        goto loc_1a512c;
    ebp = memoryAGet32(ds, ecx + 3803474);
    if (ebp)
        goto loc_1a512c;
    if (memoryAGet32(ds, ecx + 3803486) != 0x00000000)
        goto loc_1a512c;
    if (memoryAGet32(ds, ecx + 3803578) != 0x00000000)
        goto loc_1a512c;
    if (memoryAGet32(ds, 0x3a1d08) != 0x00000000)
        goto loc_1a512c;
    edi = 0x0000000a;
    eax = 0x00000080;
    memoryASet32(ds, ecx + 3803470, ebp);
    ebx = 0x00000032;
    memoryASet32(ds, ecx + 3803474, edi);
    edx = esi;
    memoryASet32(ds, 0x3a1d08, eax);
    eax = 0x001d66a2;
    sub_19fdc8();
    edx = 0x00000030;
    memoryASet32(ds, 0x3a1e0c, esi);
    memoryASet32(ds, 0x3a1e4c, edx);
loc_1a512c: // 0160:1a512c
    if (memoryAGet32(ds, ecx + 3803530) != 0x00000000)
        goto loc_1a515d;
    if ((int32_t)memoryAGet32(ds, ecx + 3803490) <= (int32_t)0x00000300)
        goto loc_1a515d;
    if (memoryAGet32(ds, ecx + 3803526) != 0x00000000)
        goto loc_1a515d;
    if (memoryAGet32(ds, ecx + 3803474) != 0x00000000)
        goto loc_1a515d;
    memoryASet32(ds, ecx + 3803530, 0x00000040);
loc_1a515d: // 0160:1a515d
    ebx = memoryAGet32(ds, ecx + 3803530);
    if (ebx)
        goto loc_1a5170;
    if (memoryAGet32(ds, ecx + 3803526) == 0x00000000)
        goto loc_1a517e;
loc_1a5170: // 0160:1a5170
    eax = esi;
    sub_1a2edc();
    ebx = eax;
    goto loc_1a5268;
loc_1a517e: // 0160:1a517e
    eax = memoryAGet32(ds, ecx + 3803474);
    if (eax)
        goto loc_1a51af;
    if (memoryAGet32(ds, ecx + 3803550) != 0x00000000)
        goto loc_1a51af;
    edx = memoryAGet32(ds, ecx + 3803494);
    memoryASet32(ds, ecx + 3803470, ebx);
    memoryASet32(ds, ecx + 3803502, edx);
    edx = memoryAGet32(ds, ecx + 3803498);
    memoryASet32(ds, ecx + 3803506, edx);
loc_1a51af: // 0160:1a51af
    if (memoryAGet32(ds, ecx + 3803486) != 0x00000000)
        goto loc_1a51cc;
    if (memoryAGet32(ds, ecx + 3803510) != 0x00000000)
        goto loc_1a51cc;
    if (eax)
        goto loc_1a51cc;
    eax = esi;
    sub_1a2fe9();
loc_1a51cc: // 0160:1a51cc
    if (!eax)
        goto loc_1a51db;
    edx = eax;
    eax = esi;
    sub_1a41fa();
    goto loc_1a51e4;
loc_1a51db: // 0160:1a51db
    edx = eax;
    eax = esi;
    sub_1a455b();
loc_1a51e4: // 0160:1a51e4
    ebx = eax;
    if (esi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1a5268;
    if (memoryAGet32(ds, 0x3a1db4) == 0x00000000)
        goto loc_1a521c;
    edx = memoryAGet32(ds, ecx + 3803474);
    if (edx)
        goto loc_1a521c;
    if (memoryAGet32(ds, ecx + 3803542) == 0x00000006)
        goto loc_1a521c;
    memoryASet32(ds, ecx + 3803626, edx);
    ebx = 0;
    memoryASet32(ds, ecx + 3803630, edx);
loc_1a521c: // 0160:1a521c
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1a5268;
    if (memoryAGet32(ds, 0x3a1c60) == 0x00000000)
        goto loc_1a5268;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1a5268;
    if (memoryAGet32(ds, ecx + 3803474) != 0x00000000)
        goto loc_1a5268;
    eax = memoryAGet32(ds, ecx + 3803542);
    if (eax == 0x00000004)
        goto loc_1a5250;
    if (eax != 0x00000024)
        goto loc_1a5268;
loc_1a5250: // 0160:1a5250
    ebx = 0;
    edi = 0xfffffffd;
    memoryASet32(ds, ecx + 3803626, ebx);
    memoryASet32(ds, ecx + 3803630, edi);
    ebx = 0x000001f4;
loc_1a5268: // 0160:1a5268
    eax = esi;
    edi = 0x00000014;
    sub_1a4923();
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edi = eax * 0x00001400;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    ebx = 0x00000014;
    idiv32(ebx);
    edx <<= 4;
    ebp = memoryAGet32(ds, ecx + 3803518);
    ebx = edi + edx;
    if ((int32_t)ebp <= 0)
        goto loc_1a52a8;
    eax = 0x002dc270;
    goto loc_1a52ad;
loc_1a52a8: // 0160:1a52a8
    eax = 0x0029d7b0;
loc_1a52ad: // 0160:1a52ad
    eax += ebx;
    memoryASet32(ds, ecx + 3803634, eax);
    eax = esi;
    ebx += 0x002dc270;
    sub_1ad074();
    memoryASet32(ds, ecx + 3803638, ebx);
loc_1a52c8: // 0160:1a52c8
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1a4fe2;
    goto loc_19e44b;
}
void sub_1a52dd() // 0160:1a52dd +long
{
    esp -= 4;
    goto loc_1a52dd;
loc_19e44b: // 0160:19e44b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 28299 bytes
loc_1a52dd: // 0160:1a52dd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 3803578);
    if (!ebx)
        goto loc_1a53c2;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000004b;
    ecx -= eax;
    if ((int32_t)ecx <= (int32_t)0x00000028)
        goto loc_1a531c;
    ecx = 0x00000028;
loc_1a531c: // 0160:1a531c
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = 0x00000003;
    eax -= ecx;
    ecx = memoryAGet32(ds, edi + 3803562);
    eax -= 0x0000000e;
    edx -= ecx;
    memoryASet32(ds, esp, eax);
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax = memoryAGet32(ds, edi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx += 0x00000007;
    ebp = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    ebp -= ebx;
    ebx = 0x00000003;
    idiv32(ebx);
    edx = eax;
    eax <<= 4;
    ecx = 0x0021ac24;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = esi;
    idiv32(ebx);
    edi = edx;
    edi <<= 2;
    edi -= edx;
    edi <<= 3;
    edi += edx;
    push32(0x00000006);
    edi <<= 2;
    ebx = memoryAGet32(ds, esp + 4);
    eax = ecx + edi;
    edx = ebp;
    ecx = 0x0000000f;
    sub_19e029();
loc_1a53c2: // 0160:1a53c2
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 3803554);
    ecx = eax;
    ecx <<= 2;
    ecx += eax;
    eax = memoryAGet32(ds, edi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -20;
    eax = memoryAGet32(ds, edi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    ebp -= eax;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    idiv32(memoryAGet32(ds, esp + 8));
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    eax = 0x0021a490;
    edx = memoryAGet32(ds, esp);
    eax += edx;
    memoryASet32(ds, esp + 4, eax);
    edx = esi;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    esi = memoryAGet32(ds, esp + 8);
    idiv32(esi);
    esi = edx;
    esi <<= 2;
    esi -= edx;
    esi <<= 3;
    push32(0x00000006);
    esi += edx;
    eax = memoryAGet32(ds, esp + 8);
    esi <<= 2;
    edx = ebp;
    eax += esi;
    sub_19e029();
    eax = memoryAGet32(ds, edi + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, edi + 3803558);
    edx = 0x00000003;
    ebx = eax + -14;
    edx -= ebp;
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    eax = memoryAGet32(ds, edi + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx + 7;
    eax -= edx;
    ecx = memoryAGet32(ds, esp);
    edx = eax;
    eax = 0x0021ac10;
    push32(0x00000006);
    eax += ecx;
    ecx = 0x0000000f;
    eax += esi;
    sub_19e029();
    esp += 0x0000000c;
    goto loc_19e44b;
}
void sub_1a54e5() // 0160:1a54e5 +long
{
    esp -= 4;
    goto loc_1a54e5;
loc_19e448: // 0160:19e448
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 28819 bytes
loc_1a54e5: // 0160:1a54e5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = 0;
    esi = 0;
loc_1a54f2: // 0160:1a54f2
    if (memoryAGet32(ds, esi + 3803494) == 0x00000000)
        goto loc_1a55a8;
    if (memoryAGet32(ds, esi + 3803566) != 0x00000000)
        goto loc_1a551b;
    if (memoryAGet32(ds, 0x3a1f08) != 0x00010000)
        goto loc_1a551b;
    eax = edi;
    sub_1a52dd();
loc_1a551b: // 0160:1a551b
    eax = memoryAGet32(ds, esi + 3803518);
    ebp = memoryAGet32(ds, esi + 3803638);
    if ((int32_t)eax <= 0)
        goto loc_1a5538;
    ebx = 0x00000003;
    ebx -= memoryAGet32(ds, esi + 3803626);
    goto loc_1a554d;
loc_1a5538: // 0160:1a5538
    ebx = memoryAGet32(ds, esi + 3803626);
    ebp -= 0x002dc270;
    ebx += 0x0000000d;
    ebp += 0x0029d7b0;
loc_1a554d: // 0160:1a554d
    eax = memoryAGet32(ds, esi + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ebx;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esi + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 3803630);
    eax -= 0x0000000c;
    ecx = memoryAGet32(ds, 0x3a1c64);
    ebx += eax;
    if (edi != ecx)
        goto loc_1a5596;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1a55a8;
loc_1a5596: // 0160:1a5596
    push32(0x00000010);
    ecx = 0x00000010;
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    sub_19e029();
loc_1a55a8: // 0160:1a55a8
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1a54f2;
    goto loc_19e448;
}
void sub_1a5616() // 0160:1a5616 +long
{
    esp -= 4;
loc_1a5616: // 0160:1a5616
    eax = 0x000003da;
    sub_1cc785();
    if (al & 0x08)
        goto loc_1a5616;
    esp += 4;
}
void sub_1a5625() // 0160:1a5625 +long
{
    esp -= 4;
    goto loc_1a5625;
loc_1a5607: // 0160:1a5607
    eax = 0x000003da;
    sub_1cc785();
    if (!(al & 0x08))
        goto loc_1a5607;
    esp += 4;
    return;
    // gap 15 bytes
loc_1a5625: // 0160:1a5625
    sub_1a5616();
    goto loc_1a5607;
}
void sub_1a566f() // 0160:1a566f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_1a5625();
    eax = 0x000003c8;
    edx = 0;
    sub_1cbd6f();
    if (ecx)
        goto loc_1a56a2;
    ebx = 0;
loc_1a568b: // 0160:1a568b
    eax = 0x000003c9;
    edx = 0;
    ebx++;
    sub_1cbd6f();
    if ((int32_t)ebx >= (int32_t)0x00000300)
        goto loc_1a56c4;
    goto loc_1a568b;
loc_1a56a2: // 0160:1a56a2
    ebx = 0;
loc_1a56a4: // 0160:1a56a4
    if (!(bl & 0x03))
        goto loc_1a56ba;
    edx = 0;
    dl = memoryAGet(ds, ecx);
    eax = 0x000003c9;
    edx = sar32(edx, 0x02);
    sub_1cbd6f();
loc_1a56ba: // 0160:1a56ba
    ebx++;
    ecx++;
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a56a4;
loc_1a56c4: // 0160:1a56c4
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a56c8() // 0160:1a56c8 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00001001;
    eax = 0x00000010;
    ebx = 0;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    sub_1cc76a();
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a56f1() // 0160:1a56f1 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x1e36fc) != 0x00000000)
        goto loc_1a5709;
    if (memoryAGet32(ds, 0x1e370c) == 0x00000000)
        goto loc_1a5709;
    eax = 0x00000001;
    esp += 4;
    return;
loc_1a5709: // 0160:1a5709
    eax = 0;
    esp += 4;
}
void sub_1a570c() // 0160:1a570c +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3708, edx);
    memoryASet32(ds, 0x1e3700, eax);
    edx = pop32();
    esp += 4;
}
void sub_1a5720() // 0160:1a5720 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = 0x00000050;
    memoryASet32(ds, 0x1e3708, eax);
    memoryASet32(ds, 0x1e3700, edx);
    edx = pop32();
    esp += 4;
}
void sub_1a5738() // 0160:1a5738 +long
{
    esp -= 4;
    goto loc_1a5738;
loc_1a572b: // 0160:1a572b
    memoryASet32(ds, 0x1e3708, eax);
    memoryASet32(ds, 0x1e3700, edx);
    edx = pop32();
    esp += 4;
    return;
loc_1a5738: // 0160:1a5738
    push32(edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = 0;
    goto loc_1a572b;
}
void sub_1a5742() // 0160:1a5742 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = 0;
loc_1a5748: // 0160:1a5748
    eax++;
    dl = memoryAGet(ds, eax + 3924211);
    memoryASet(ds, eax + 3794543, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a5748;
    memoryASet32(ds, 0x1e36fc, 0x000000ff);
    eax = memoryAGet32(ds, 0x3aa13c);
    ebx = 0x00000100;
    esi = 0x00000001;
    memoryASet32(ds, 0x1e3708, eax);
    ecx = 0;
    memoryASet32(ds, 0x1e3704, ebx);
    memoryASet32(ds, 0x1e3700, ecx);
    memoryASet32(ds, 0x1e370c, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5793() // 0160:1a5793 +long
{
    esp -= 4;
    goto loc_1a5793;
loc_1a572b: // 0160:1a572b
    memoryASet32(ds, 0x1e3708, eax);
    memoryASet32(ds, 0x1e3700, edx);
    edx = pop32();
    esp += 4;
    return;
    // gap 91 bytes
loc_1a5793: // 0160:1a5793
    push32(edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = 0x000000ff;
    goto loc_1a572b;
}
void sub_1a57a0() // 0160:1a57a0 +long
{
    esp -= 4;
    push32(edx);
    memoryASet32(ds, 0x1e36f8, eax);
    edx = 0;
    eax = 0x000000ff;
    memoryASet32(ds, 0x1e36fc, edx);
    sub_1a570c();
    edx = pop32();
    esp += 4;
}
void sub_1a57ba() // 0160:1a57ba +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x1e3710, edx);
    edx = memoryAGet32(ds, 0x3aa13c);
    ebx = memoryAGet32(ds, 0x1e3708);
    edx -= ebx;
    eax = edx;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax < 0)
        goto loc_1a57f7;
    if ((int32_t)eax <= (int32_t)0x000000c8)
        goto loc_1a5805;
loc_1a57f7: // 0160:1a57f7
    eax = 0;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3708, edx);
loc_1a5805: // 0160:1a5805
    if (!eax)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e36fc);
    ecx = memoryAGet32(ds, 0x1e3700);
    if (edx == ecx)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3708, edx);
    edx = memoryAGet32(ds, 0x1e36fc);
    if (edx == ecx)
        goto loc_1a58f1;
    if ((int32_t)edx <= (int32_t)ecx)
        goto loc_1a584d;
    ebx = edx;
    ebx -= eax;
    memoryASet32(ds, 0x1e36fc, ebx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1a5860;
    goto loc_1a585a;
loc_1a584d: // 0160:1a584d
    ebp = edx + eax;
    memoryASet32(ds, 0x1e36fc, ebp);
    if ((int32_t)ebp <= (int32_t)ecx)
        goto loc_1a5860;
loc_1a585a: // 0160:1a585a
    memoryASet32(ds, 0x1e36fc, ecx);
loc_1a5860: // 0160:1a5860
    ecx = memoryAGet32(ds, 0x1e3704);
    esi = memoryAGet32(ds, 0x1e36f8);
    ecx <<= 2;
    if (esi)
        goto loc_1a58a1;
    esi = 0x000000ff;
    ebp = memoryAGet32(ds, 0x1e36fc);
    ebx = 0;
    goto loc_1a589b;
loc_1a5882: // 0160:1a5882
    edx = 0;
    dl = memoryAGet(ds, ebx + 3794544);
    edx = (int32_t)edx * (int32_t)ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 3924211, al);
loc_1a589b: // 0160:1a589b
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1a58dd;
    goto loc_1a5882;
loc_1a58a1: // 0160:1a58a1
    esi = ecx;
    ebx = 0;
    goto loc_1a58d9;
loc_1a58a7: // 0160:1a58a7
    eax = memoryAGet32(ds, 0x1e36f8);
    edx = 0;
    ecx = 0;
    dl = memoryAGet(ds, ebx + eax);
    cl = memoryAGet(ds, ebx + 3794544);
    edi = memoryAGet32(ds, 0x1e36fc);
    edx -= ecx;
    edx = (int32_t)edx * (int32_t)edi;
    edi = 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx++;
    eax += ecx;
    memoryASet(ds, ebx + 3924211, al);
loc_1a58d9: // 0160:1a58d9
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a58a7;
loc_1a58dd: // 0160:1a58dd
    memoryASet32(ds, 0x1e3710, 0x00000001);
    eax = 0x003be0f4;
    sub_1a566f();
loc_1a58f1: // 0160:1a58f1
    eax = memoryAGet32(ds, 0x1e36fc);
    if (eax != memoryAGet32(ds, 0x1e3700))
        goto loc_1a62f9;
    if (memoryAGet32(ds, 0x1e36f8) == 0x00000000)
        goto loc_1a5922;
    ebx = 0;
loc_1a590d: // 0160:1a590d
    ebx++;
    al = memoryAGet(ds, ebx + 3924211);
    memoryASet(ds, ebx + 3794543, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a590d;
loc_1a5922: // 0160:1a5922
    ecx = 0x000000b0;
    esi = 0;
    memoryASet32(ds, 0x1e3704, ecx);
    memoryASet32(ds, 0x1e36f8, esi);
    goto loc_1a62f9;
    // gap 2495 bytes
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a593a() // 0160:1a593a +long
{
    esp -= 4;
    goto loc_1a593a;
loc_1a57b8: // 0160:1a57b8
    edx = pop32();
    esp += 4;
    return;
    // gap 384 bytes
loc_1a593a: // 0160:1a593a
    push32(edx);
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3708, edx);
    memoryASet32(ds, 0x1e3700, eax);
loc_1a594c: // 0160:1a594c
    {
        static int c=0;
        if (++c%10 == 0)
        {
            memoryASet32(ds, 0x1e36fc, (memoryAGet32(ds, 0x1e36fc)+5)&255);
            memoryASet32(ds, 0x3aa13c, memoryAGet32(ds, 0x3aa13c)+1);
//            sync();
        }
    }
    eax = memoryAGet32(ds, 0x1e36fc);
    if (eax == memoryAGet32(ds, 0x1e3700))
        goto loc_1a57b8;
    sub_1a57ba();
    goto loc_1a594c;
}
void sub_1a5964() // 0160:1a5964 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    eax = 0;
loc_1a596b: // 0160:1a596b
    eax++;
    dl = memoryAGet(ds, eax + 3924211);
    memoryASet(ds, eax + 3844787, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1a596b;
    esi = 0x0000001f;
    ebp = esi;
loc_1a5986: // 0160:1a5986
    ecx = esi;
    ebx = 0;
loc_1a598a: // 0160:1a598a
    edx = 0;
    dl = memoryAGet(ds, ebx + 3844788);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx++;
    memoryASet(ds, ebx + 3924211, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a598a;
    eax = 0x003be0f4;
    esi--;
    sub_1a566f();
    if (esi != 0xffffffff)
        goto loc_1a5986;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a59c1() // 0160:1a59c1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    esi = 0x0000001f;
loc_1a59cc: // 0160:1a59cc
    ebx = 0;
loc_1a59ce: // 0160:1a59ce
    edx = 0;
    dl = memoryAGet(ds, ebx + 3844788);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 3924211, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1a59ce;
    eax = 0x003be0f4;
    ecx++;
    sub_1a566f();
    if ((int32_t)ecx < (int32_t)0x00000020)
        goto loc_1a59cc;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5a04() // 0160:1a5a04 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    bl = al;
    edx = 0;
    goto loc_1a5a0f;
loc_1a5a0e: // 0160:1a5a0e
    edx++;
loc_1a5a0f: // 0160:1a5a0f
    edi = 0x001e3724;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    if (edx >= ecx)
        goto loc_1a5a2a;
    if (bl != memoryAGet(ds, edx + 1980196))
        goto loc_1a5a0e;
loc_1a5a2a: // 0160:1a5a2a
    eax = edx;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5a31() // 0160:1a5a31 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x1e3763);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    goto loc_1a5ad2;
loc_1a5a5a: // 0160:1a5a5a
    eax = 0;
    al = memoryAGet(ds, esi);
    if (eax == 0x00000020)
        goto loc_1a5ace;
    if (eax != 0x0000005f)
        goto loc_1a5a7b;
    eax = 0x0000002d;
    sub_1a5a04();
    ebx = eax;
    eax = 0x00000500;
    goto loc_1a5a84;
loc_1a5a7b: // 0160:1a5a7b
    sub_1a5a04();
    ebx = eax;
    eax = 0;
loc_1a5a84: // 0160:1a5a84
    if ((int32_t)ebx >= (int32_t)0x00000040)
        goto loc_1a5ace;
    edx = ebx;
    ebp = edi + eax;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    eax = eax * 0x00000c80;
    edx = ebx;
    ecx = 0x003aaeb4;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebx;
    ebx = 0x00000020;
    idiv32(ebx);
    eax = edx * 0x0000000a;
    edx = memoryAGet32(ds, esp);
    eax += ecx;
    ebx = 0x0000000a;
    eax += edx;
    ecx = 0;
    edx = ebp;
    sub_1cb83f();
loc_1a5ace: // 0160:1a5ace
    edi += 0x0000000a;
    esi++;
loc_1a5ad2: // 0160:1a5ad2
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1a5a5a;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5ae0() // 0160:1a5ae0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ebx = eax;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    ecx += eax;
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x003b0ef4;
    ecx >>= 1;
    eax += 0x000000a0;
    eax -= ecx;
    sub_1a5a31();
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5b1b() // 0160:1a5b1b +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    ecx = eax;
    eax = edx;
    edx = ebx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    eax += 0x003b0ef4;
    edi = edx;
    ebx = eax + ecx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    eax >>= 1;
    ebx -= eax;
    eax = ebx;
    sub_1a5a31();
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a5b58() // 0160:1a5b58 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1a5c18;
    if ((int32_t)edx >= 0)
        goto loc_1a5ba1;
    ebp = eax;
    ebp <<= 2;
    ebp += eax;
    ebp <<= 2;
    edi = memoryAGet32(ss, ebp + 3844164);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    ebp = memoryAGet32(ss, ebp + 3844148);
    edx >>= 1;
    ebp += edx;
loc_1a5ba1: // 0160:1a5ba1
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_1a5bb8;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, edx * 4 + 0x3aa838);
    memoryASet32(ds, esp, eax);
loc_1a5bb8: // 0160:1a5bb8
    edi = ebx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    edx >>= 1;
    ebp -= edx;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, edx * 4 + 0x3aa834, ebp);
    edi = ebx;
    memoryASet32(ds, edx * 4 + 0x3aa838, eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    memoryASet32(ds, edx * 4 + 0x3aa844, ebx);
    eax += eax;
    ecx = 0x0000000a;
    memoryASet32(ds, edx * 4 + 0x3aa83c, eax);
    memoryASet32(ds, edx * 4 + 0x3aa840, ecx);
loc_1a5c18: // 0160:1a5c18
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1a5c1f() // 0160:1a5c1f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ebx = edx;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    ecx <<= 2;
    ecx += edx;
    edx = esi;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x003b0ef4;
    ecx >>= 1;
    eax += 0x000000a0;
    edx = ebx;
    eax -= ecx;
    sub_1a5a31();
    edx = memoryAGet32(ds, 0x3be918);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x3be918, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1a5c7a;
    edi = edx + 1;
    memoryASet32(ds, 0x3be918, edi);
loc_1a5c7a: // 0160:1a5c7a
    edx = 0x000000a0;
    eax = memoryAGet32(ds, 0x3be918);
    ecx = ebx;
    ebx = esi;
    sub_1a5b58();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5c92() // 0160:1a5c92 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    esi = edx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x003b0ef4;
    eax += ebp;
    edi = ebx;
    memoryASet32(ds, esp, eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    edx = memoryAGet32(ds, esp);
    eax >>= 1;
    edx -= eax;
    eax = edx;
    edx = ebx;
    sub_1a5a31();
    edx = memoryAGet32(ds, 0x3be918);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x3be918, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1a5cf3;
    edi = edx + 1;
    memoryASet32(ds, 0x3be918, edi);
loc_1a5cf3: // 0160:1a5cf3
    eax = memoryAGet32(ds, 0x3be918);
    ecx = ebx;
    edx = ebp;
    ebx = esi;
    sub_1a5b58();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a5d0b() // 0160:1a5d0b +long
{
    esp -= 4;
    goto loc_1a5d0b;
loc_1a5ada: // 0160:1a5ada
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 555 bytes
loc_1a5d0b: // 0160:1a5d0b
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    edx = 0;
    memoryASet32(ds, 0x39ea80, edx);
    edx = memoryAGet32(ds, 0x3be918);
    edi = edx;
    edi <<= 2;
    esi = 0x00000001;
    edi += edx;
    eax = 0x00000014;
    edi <<= 2;
    goto loc_1a5d74;
loc_1a5d38: // 0160:1a5d38
    ebp = memoryAGet32(ds, eax + 3844148);
    if ((int32_t)ecx <= (int32_t)ebp)
        goto loc_1a5d70;
    edx = ebp;
    edx += memoryAGet32(ds, eax + 3844156);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_1a5d70;
    edx = memoryAGet32(ds, eax + 3844152);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1a5d70;
    edx += memoryAGet32(ds, eax + 3844160);
    if ((int32_t)ebx >= (int32_t)edx)
        goto loc_1a5d70;
    eax = 0x00000001;
    edx = esi;
    memoryASet32(ds, 0x39ea80, eax);
    goto loc_1a5d7a;
loc_1a5d70: // 0160:1a5d70
    eax += 0x00000014;
    esi++;
loc_1a5d74: // 0160:1a5d74
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1a5d38;
    edx = 0;
loc_1a5d7a: // 0160:1a5d7a
    eax = edx;
    goto loc_1a5ada;
}
void sub_1a5d81() // 0160:1a5d81 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (!eax)
        goto loc_1a5dbc;
    edx = eax;
    eax <<= 2;
    edx += eax;
    edx <<= 2;
    ebx = memoryAGet32(ds, edx + 3844152);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    ecx = memoryAGet32(ds, edx + 3844164);
    eax <<= 6;
    ebx = memoryAGet32(ds, edx + 3844148);
    eax += 0x003b0ef4;
    edx = ecx;
    eax += ebx;
    sub_1a5a31();
loc_1a5dbc: // 0160:1a5dbc
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5dc0() // 0160:1a5dc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    if (!eax)
        goto loc_1a5e5c;
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 3844152);
    edx = ebx;
    edx <<= 2;
    ebp = 0x0022f090;
    edx += ebx;
    memoryASet32(ds, esp, eax);
    edx <<= 6;
    ebx = memoryAGet32(ds, eax + 3844148);
    ebp += edx;
    edx += 0x003b0ef4;
    ebp += ebx;
    edi = ebx + edx;
    ecx = memoryAGet32(ds, eax + 3844156);
    esi = edi;
    edx = 0;
    esi &= 0x00000003;
    memoryASet32(ds, esp + 4, edx);
    edi -= esi;
    ebp -= esi;
    esi += ecx;
    goto loc_1a5e4d;
loc_1a5e1f: // 0160:1a5e1f
    edx = edi;
    eax = ebp;
    ebx = 0;
    goto loc_1a5e34;
loc_1a5e27: // 0160:1a5e27
    ebx += 0x00000004;
    ecx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ecx);
    edx += 0x00000004;
loc_1a5e34: // 0160:1a5e34
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a5e27;
    ecx = memoryAGet32(ds, esp + 4);
    ebp += 0x00000140;
    ecx++;
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, ecx);
loc_1a5e4d: // 0160:1a5e4d
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, edx + 3844160))
        goto loc_1a5e1f;
loc_1a5e5c: // 0160:1a5e5c
    esp += 0x00000008;
    goto loc_1a62f9;
    // gap 1173 bytes
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5e64() // 0160:1a5e64 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (!eax)
        goto loc_1a5eb1;
    eax <<= 2;
    if (!edx)
        goto loc_1a5e7c;
    memoryASet32(ds, eax + 3844020, memoryAGet32(ds, eax + 3844020) + 1);
    goto loc_1a5e82;
loc_1a5e7c: // 0160:1a5e7c
    memoryASet32(ds, eax + 3844020, memoryAGet32(ds, eax + 3844020) - 1);
loc_1a5e82: // 0160:1a5e82
    if (memoryAGet32(ds, ebx * 4 + 0x3aa7b4) == 0x00000000)
        goto loc_1a5eaa;
    edi = 0x00000001;
    eax = ebx;
    ebp = 0;
    memoryASet32(ds, 0x1e3763, edi);
    sub_1a5d81();
    memoryASet32(ds, 0x1e3763, ebp);
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a5eaa: // 0160:1a5eaa
    eax = ebx;
    sub_1a5d81();
loc_1a5eb1: // 0160:1a5eb1
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5eb5() // 0160:1a5eb5 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a5eb8: // 0160:1a5eb8
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3844016, edx);
    if (eax != 0x00000080)
        goto loc_1a5eb8;
    edx = pop32();
    esp += 4;
}
void sub_1a5ecc() // 0160:1a5ecc +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = memoryAGet32(ds, 0x1e3767);
    if (eax == edx)
        goto loc_1a5ef5;
    eax = edx;
    edx = 0;
    sub_1a5e64();
    edx = 0x00000001;
    eax = ebx;
    sub_1a5e64();
    memoryASet32(ds, 0x1e3767, ebx);
loc_1a5ef5: // 0160:1a5ef5
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a5ef8() // 0160:1a5ef8 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = eax;
    if (!eax)
        goto loc_1a5f37;
    if (memoryAGet32(ds, eax * 4 + 0x3aa7b4) == 0x00000000)
        goto loc_1a5f2b;
    memoryASet32(ds, 0x1e3763, 0x00000001);
    sub_1a5dc0();
    eax = edx;
    esi = 0;
    sub_1a5d81();
    memoryASet32(ds, 0x1e3763, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a5f2b: // 0160:1a5f2b
    sub_1a5dc0();
    eax = edx;
    sub_1a5d81();
loc_1a5f37: // 0160:1a5f37
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a5f3a() // 0160:1a5f3a +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = 0;
loc_1a5f3f: // 0160:1a5f3f
    if (memoryAGet32(ds, eax + 1976058) == 0x00000000)
        goto loc_1a5f49;
    edx++;
loc_1a5f49: // 0160:1a5f49
    eax += 0x000000aa;
    if (eax != 0x00000aa0)
        goto loc_1a5f3f;
    al = (int32_t)edx >= (int32_t)0x00000002;
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_1a5f62() // 0160:1a5f62 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x00000001;
    edx = 0;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x1e12f2, edx);
    memoryASet32(ds, 0x3a1c46, ebx);
    memoryASet32(ds, 0x1e0070, edx);
    memoryASet32(ds, 0x3a1c90, edx);
    memoryASet(ds, 0x3aa071, ah);
    dl = 0;
    memoryASet(ds, 0x3a9f71, dl);
    sub_199593();
    memoryASet32(ds, 0x3a1c4a, ebx);
    memoryASet32(ds, 0x3a1cc8, ecx);
    memoryASet32(ds, 0x1e3d20, ecx);
    sub_1ab3aa();
    edx = 0;
    ebx = 0x001d5d6a;
    eax = 0x000000a0;
    memoryASet32(ds, 0x3be918, ecx);
    sub_1a5b1b();
    ebx = 0x001d5d79;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1a5b1b();
    sub_1a5f3a();
    if (!eax)
        goto loc_1a600b;
    esi = 0x000000a0;
    edi = 0x00000042;
    edx = 0x001d5d8e;
    eax = 0x0000003c;
    memoryASet32(ds, 0x1e36ec, esi);
    memoryASet32(ds, 0x1e36f0, edi);
    goto loc_1a602b;
loc_1a600b: // 0160:1a600b
    ebx = 0x000000a0;
    ecx = 0x0000004e;
    edx = 0x001d5d98;
    eax = 0x0000003c;
    memoryASet32(ds, 0x1e36ec, ebx);
    memoryASet32(ds, 0x1e36f0, ecx);
loc_1a602b: // 0160:1a602b
    sub_1a5c1f();
    edx = 0x001d5d9a;
    eax = 0x00000048;
    sub_1a5c1f();
    edx = 0x001d5da5;
    eax = 0x00000090;
    sub_1a5c1f();
    edx = 0x001d5db1;
    eax = 0x00000054;
    sub_1a5c1f();
    edx = 0x001d5dbe;
    eax = 0x0000006c;
    sub_1a5c1f();
    edx = 0x001d5dc6;
    eax = 0x00000060;
    ebp = 0x00000001;
    sub_1a5c1f();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x1e376f, ebp);
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e3714, eax);
    memoryASet32(ds, 0x1e3718, edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = 0x000000ff;
    memoryASet32(ds, 0x1e3720, eax);
    eax = 0x0000000a;
    sub_19708b();
    goto loc_1a62f9;
    // gap 570 bytes
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a60bf() // 0160:1a60bf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1ab3aa();
    eax = 0x0000004e;
    ebx = 0x001d5de1;
    edx = 0;
    ecx = 0x00000060;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x001d5dd4;
    esi = 0x00000002;
    sub_1a5ae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1a5c92();
    ebx = 0x001d5de5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1a5c92();
    ebx = 0x000000b0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1e36f0, ecx);
    memoryASet32(ds, 0x1e376f, esi);
    memoryASet32(ds, 0x1e3714, edi);
    memoryASet32(ds, 0x1e3718, ebp);
    memoryASet32(ds, 0x1e36ec, ebx);
    goto loc_1a6ee9;
    // gap 431 bytes
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3049 bytes
loc_1a6ee9: // 0160:1a6ee9
    memoryASet32(ds, 0x1e371c, eax);
    goto loc_1a738b;
    // gap 1176 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
}
void sub_1a614a() // 0160:1a614a +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a614d: // 0160:1a614d
    eax += 0x00000018;
    edx = 0;
    memoryASet32(ds, eax + 1979464, edx);
    memoryASet32(ds, eax + 1979468, edx);
    memoryASet32(ds, eax + 1979472, edx);
    memoryASet32(ds, eax + 1979476, edx);
    memoryASet32(ds, eax + 1979480, edx);
    memoryASet32(ds, eax + 1979484, edx);
    if (eax != 0x00000180)
        goto loc_1a614d;
    edx = pop32();
    esp += 4;
}
void sub_1a617f() // 0160:1a617f +long
{
    esp -= 4;
    goto loc_1a617f;
loc_1a5d07: // 0160:1a5d07
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
    // gap 1140 bytes
loc_1a617f: // 0160:1a617f
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = edx;
    if ((int32_t)edx >= 0)
        goto loc_1a618c;
    ecx = -ecx;
loc_1a618c: // 0160:1a618c
    ebx--;
    if (ecx)
        goto loc_1a6198;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x30);
loc_1a6198: // 0160:1a6198
    edi = 0x0000000a;
loc_1a619d: // 0160:1a619d
    if (!ecx)
        goto loc_1a61c4;
    if ((int32_t)ebx < 0)
        goto loc_1a61c4;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax = ebx;
    dl += 0x30;
    memoryASet(ds, esi + eax, dl);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx--;
    ecx = eax;
    goto loc_1a619d;
loc_1a61c4: // 0160:1a61c4
    if ((int32_t)ebx < 0)
        goto loc_1a5d07;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x20);
    goto loc_1a61c4;
}
void sub_1a61d5() // 0160:1a61d5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    edi = 0;
    ebp = 0;
    memoryASet32(ds, esp, edx);
loc_1a61e7: // 0160:1a61e7
    edx = memoryAGet32(ds, esp);
    ecx = ebp;
    eax = 0;
loc_1a61ee: // 0160:1a61ee
    esi = memoryAGet32(ds, ecx + 1980362);
    bl = memoryAGet(ds, edx + 1975928);
    memoryASet(ds, esi + eax, bl);
    eax++;
    edx++;
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1a61ee;
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1980362);
    edx = memoryAGet32(ds, edi + 1979488);
    eax += 0x00000009;
    sub_1a617f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1980362);
    edx = memoryAGet32(ds, edi + 1979492);
    eax += 0x0000000d;
    sub_1a617f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1980362);
    edx = memoryAGet32(ds, edi + 1979500);
    eax += 0x00000011;
    sub_1a617f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 1980362);
    edx = memoryAGet32(ds, edi + 1979504);
    eax += 0x00000015;
    sub_1a617f();
    esi = memoryAGet32(ds, edi + 1979500);
    eax = memoryAGet32(ds, edi + 1979504);
    ebx = 0x00000004;
    esi -= eax;
    eax = memoryAGet32(ds, ecx + 1980362);
    edx = esi;
    eax += 0x00000019;
    sub_1a617f();
    eax = 0x00000019;
    edx = memoryAGet32(ds, ecx + 1980362);
    edx += eax;
    dl = memoryAGet(ds, edx + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a62ab;
    eax = 0x0000001a;
loc_1a62ab: // 0160:1a62ab
    edx = memoryAGet32(ss, ebp + 1980362);
    dl = memoryAGet(ds, edx + eax + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a62c1;
    eax++;
loc_1a62c1: // 0160:1a62c1
    if ((int32_t)esi <= 0)
        goto loc_1a62cf;
    edx = memoryAGet32(ss, ebp + 1980362);
    memoryASet(ds, edx + eax, 0x2b);
loc_1a62cf: // 0160:1a62cf
    if ((int32_t)esi >= 0)
        goto loc_1a62db;
    edx = memoryAGet32(ss, ebp + 1980362);
    memoryASet(ds, edx + eax, 0x2d);
loc_1a62db: // 0160:1a62db
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000018;
    ebx += 0x000000aa;
    ebp += 0x00000004;
    memoryASet32(ds, esp, ebx);
    if (ebp != 0x00000040)
        goto loc_1a61e7;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6300() // 0160:1a6300 +long
{
    esp -= 4;
    goto loc_1a6300;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a6300: // 0160:1a6300
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    eax = 0;
loc_1a630a: // 0160:1a630a
    memoryASet32(ds, eax + 3843956, edx);
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1a630a;
    esi = 0x00000001;
    edi = 0;
    ebp = 0;
loc_1a6322: // 0160:1a6322
    if (!esi)
        goto loc_1a62f9;
    edi++;
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_1a62f9;
    esi = ebp;
    eax = ebp;
loc_1a6333: // 0160:1a6333
    edx = memoryAGet32(ds, eax + 3843960) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 3843956) * 0x00000018;
    ebx = memoryAGet32(ds, ebx + 1979508);
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, edx + 1979508))
        goto loc_1a635b;
    if (ebp != memoryAGet32(ds, edx + 1979488))
        goto loc_1a63cb;
loc_1a635b: // 0160:1a635b
    edx = memoryAGet32(ds, eax + 3843956) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 1979488))
        goto loc_1a6379;
    edx = memoryAGet32(ds, eax + 3843960) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 1979488))
        goto loc_1a63cb;
loc_1a6379: // 0160:1a6379
    edx = memoryAGet32(ds, eax + 3843960) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 3843956) * 0x00000018;
    ecx = memoryAGet32(ds, ebx + 1979508);
    if (ecx != memoryAGet32(ds, edx + 1979508))
        goto loc_1a63a9;
    ebx = memoryAGet32(ds, ebx + 1979488);
    ecx = memoryAGet32(ds, edx + 1979488);
    if ((int32_t)ebx <= (int32_t)ecx)
        goto loc_1a63a9;
    if (ebp != ecx)
        goto loc_1a63cb;
loc_1a63a9: // 0160:1a63a9
    ebx = memoryAGet32(ds, eax + 3843960) * 0x000000aa;
    edx = memoryAGet32(ds, eax + 3843956) * 0x000000aa;
    edx = memoryAGet32(ds, edx + 1976058);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, ebx + 1976058))
        goto loc_1a63e8;
loc_1a63cb: // 0160:1a63cb
    edx = memoryAGet32(ds, eax + 3843960);
    ebx = memoryAGet32(ds, eax + 3843956);
    memoryASet32(ds, eax + 3843956, edx);
    esi = 0x00000001;
    memoryASet32(ds, eax + 3843960, ebx);
loc_1a63e8: // 0160:1a63e8
    eax += 0x00000004;
    if ((int32_t)eax >= (int32_t)0x0000003c)
        goto loc_1a6322;
    goto loc_1a6333;
}
void sub_1a63f9() // 0160:1a63f9 +long
{
    esp -= 4;
    goto loc_1a63f9;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 249 bytes
loc_1a63f9: // 0160:1a63f9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1ab3aa();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x001d5de8;
    edi = 0x0000002a;
    sub_1a5ae0();
    edx = 0x001d5e01;
    eax = 0x00000018;
    esi = 0;
    sub_1a5ae0();
loc_1a642e: // 0160:1a642e
    ecx = memoryAGet32(ds, 0x3be910);
    ecx <<= 3;
    ecx += esi;
    ecx = memoryAGet32(ds, ecx * 4 + 0x3aa774);
    eax = ecx * 0x000000aa;
    ebp = memoryAGet32(ds, eax + 1976058);
    ebx = memoryAGet32(ds, ecx * 4 + 0x1e37ca);
    if (ebp)
        goto loc_1a645c;
    ebx = 0x001d5d98;
loc_1a645c: // 0160:1a645c
    eax = 0x000000a0;
    edx = edi;
    sub_1a5c92();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x3be90c);
    edi += 0x0000000c;
    eax <<= cl;
    esi++;
    if (!(eax & edx))
        goto loc_1a6489;
    edx = 0x00000001;
    eax = esi;
    sub_1a5e64();
loc_1a6489: // 0160:1a6489
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_1a642e;
    ebx = 0x001d5e1f;
    edx = 0x00000096;
    eax = 0x00000118;
    sub_1a5c92();
    ebx = 0x001d5e24;
    edx = 0x00000096;
    eax = 0x000000c8;
    sub_1a5c92();
    if ((int32_t)memoryAGet32(ds, 0x3be908) >= (int32_t)0x00000002)
        goto loc_1a64c9;
    eax = 0x0000000a;
    sub_1a5dc0();
loc_1a64c9: // 0160:1a64c9
    eax = memoryAGet32(ds, 0x1e3640);
    if (eax <= 0)
        goto loc_1a64d9;
    if (eax == 0x00000001)
        goto loc_1a64e0;
    goto loc_1a64f4;
loc_1a64d9: // 0160:1a64d9
    ebx = 0x001d5e2a;
    goto loc_1a64e5;
loc_1a64e0: // 0160:1a64e0
    ebx = 0x001d5e33;
loc_1a64e5: // 0160:1a64e5
    edx = 0x00000096;
    eax = 0x00000078;
    sub_1a5c92();
loc_1a64f4: // 0160:1a64f4
    if (memoryAGet32(ds, 0x3be910) == 0x00000000)
        goto loc_1a6504;
    ebx = 0x001d5e3c;
    goto loc_1a6509;
loc_1a6504: // 0160:1a6504
    ebx = 0x001d5e41;
loc_1a6509: // 0160:1a6509
    edx = 0x00000096;
    eax = 0x00000028;
    sub_1a5c92();
    goto loc_1a62f9;
}
void sub_1a651d() // 0160:1a651d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000118;
    edi = 0x0000009c;
    ebp = 0x0000000a;
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3be910, edx);
    memoryASet32(ds, 0x3be90c, edx);
    memoryASet32(ds, 0x3be908, edx);
    memoryASet32(ds, 0x1e36ec, esi);
    memoryASet32(ds, 0x1e36f0, edi);
    sub_1a6300();
    sub_1a61d5();
    sub_1a63f9();
    sub_1a5eb5();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x1e376f, ebp);
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e3714, eax);
    memoryASet32(ds, 0x1e3718, edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a659b() // 0160:1a659b +long
{
    esp -= 4;
    goto loc_1a659b;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 667 bytes
loc_1a659b: // 0160:1a659b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a65b8;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a67d7;
loc_1a65b8: // 0160:1a65b8
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a65c8;
    edi = 0x00000001;
    goto loc_1a65cd;
loc_1a65c8: // 0160:1a65c8
    edi = 0xffffffff;
loc_1a65cd: // 0160:1a65cd
    esi = memoryAGet32(ds, 0x3aa13c);
    esi -= memoryAGet32(ds, 0x1e3773);
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a66b2;
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
    ebx = 0;
loc_1a65ee: // 0160:1a65ee
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = eax;
    eax = ebx + 1;
    if (edx != eax)
        goto loc_1a66a8;
    ecx = memoryAGet32(ds, 0x3be910);
    ecx <<= 3;
    ecx += ebx;
    ecx = memoryAGet32(ds, ecx * 4 + 0x3aa774);
    edx = ecx * 0x000000aa;
    if (memoryAGet32(ds, edx + 1976058) == 0x00000000)
        goto loc_1a66a8;
    edx = 0x00000001;
    edx <<= cl;
    ecx = edx;
    edx = memoryAGet32(ds, 0x3be90c);
    ebp = memoryAGet32(ds, 0x3be90c);
    edx ^= ecx;
    if (!(ecx & ebp))
        goto loc_1a6662;
    ecx = memoryAGet32(ds, 0x3be908);
    memoryASet32(ds, 0x3be90c, edx);
    ecx--;
    edx = 0;
    memoryASet32(ds, 0x3be908, ecx);
    goto loc_1a6684;
loc_1a6662: // 0160:1a6662
    ecx = memoryAGet32(ds, 0x3be908);
    if ((int32_t)ecx >= (int32_t)memoryAGet32(ds, 0x1e365c))
        goto loc_1a6689;
    memoryASet32(ds, 0x3be90c, edx);
    edx = ecx + 1;
    memoryASet32(ds, 0x3be908, edx);
    edx = 0x00000001;
loc_1a6684: // 0160:1a6684
    sub_1a5e64();
loc_1a6689: // 0160:1a6689
    if ((int32_t)memoryAGet32(ds, 0x3be908) <= (int32_t)0x00000001)
        goto loc_1a669e;
    eax = 0x0000000a;
    sub_1a5d81();
    goto loc_1a66a8;
loc_1a669e: // 0160:1a669e
    eax = 0x0000000a;
    sub_1a5dc0();
loc_1a66a8: // 0160:1a66a8
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1a65ee;
loc_1a66b2: // 0160:1a66b2
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000009)
        goto loc_1a66d9;
    eax = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x1e371c, eax);
    memoryASet32(ds, 0x1e376f, edx);
loc_1a66d9: // 0160:1a66d9
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x0000000a)
        goto loc_1a6728;
    if ((int32_t)memoryAGet32(ds, 0x3be908) <= (int32_t)0x00000001)
        goto loc_1a6728;
    eax = 0xffffffff;
    ebx = 0x000000ff;
    ecx = 0;
    edx = 0x00000080;
    memoryASet32(ds, 0x1e3d20, ecx);
    memoryASet32(ds, 0x1e371c, ecx);
    memoryASet32(ds, 0x1e376f, eax);
    sub_1a5738();
    eax = 0x0000001a;
    sub_1bda16();
loc_1a6728: // 0160:1a6728
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a67a4;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x0000000b)
        goto loc_1a67a4;
    edx = memoryAGet32(ds, 0x1e3640);
    edx += edi;
    memoryASet32(ds, 0x1e3640, edx);
    if ((int32_t)edx <= (int32_t)0x00000001)
        goto loc_1a6761;
    ecx = 0;
    memoryASet32(ds, 0x1e3640, ecx);
loc_1a6761: // 0160:1a6761
    if ((int32_t)memoryAGet32(ds, 0x1e3640) >= (int32_t)0x00000000)
        goto loc_1a6774;
    memoryASet32(ds, 0x1e3640, 0x00000001);
loc_1a6774: // 0160:1a6774
    eax = memoryAGet32(ds, 0x1e3640);
    if (eax <= 0)
        goto loc_1a6784;
    if (eax == 0x00000001)
        goto loc_1a6790;
    goto loc_1a679a;
loc_1a6784: // 0160:1a6784
    memoryASet32(ds, 0x3aa920, 0x001d5e2a);
    goto loc_1a679a;
loc_1a6790: // 0160:1a6790
    memoryASet32(ds, 0x3aa920, 0x001d5e33);
loc_1a679a: // 0160:1a679a
    eax = 0x0000000b;
    sub_1a5ef8();
loc_1a67a4: // 0160:1a67a4
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x0000000c)
        goto loc_1a62f9;
    memoryASet(ds, 0x3be910, memoryAGet(ds, 0x3be910) ^ 0x01);
    sub_1a63f9();
    goto loc_1a62f9;
loc_1a67d7: // 0160:1a67d7
    memoryASet32(ds, 0x1e3773, edx);
    goto loc_1a62f9;
}
void sub_1a67e2() // 0160:1a67e2 +long
{
    esp -= 4;
    goto loc_1a67e2;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1250 bytes
loc_1a67e2: // 0160:1a67e2
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
loc_1a6801: // 0160:1a6801
    eax = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, eax + 1980298);
    if ((int32_t)eax < 0)
        goto loc_1a6906;
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_1a682a;
    edx = memoryAGet32(ds, esp + 12);
    edi = 0;
    memoryASet32(ds, edx + 1980314, edi);
    goto loc_1a683b;
loc_1a682a: // 0160:1a682a
    ecx = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, eax * 4 + 0x1e33c0);
    memoryASet32(ds, ecx + 1980314, edx);
loc_1a683b: // 0160:1a683b
    edx = memoryAGet32(ds, eax * 4 + 0x1e3410);
    eax = eax * 0x000000aa;
    ecx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp + 4);
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 6;
    esi = 0;
    memoryASet32(ds, esp + 20, eax);
    eax = 0x00000040;
    memoryASet32(ds, ecx + 1980330, edx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 20);
    ebp = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 16, eax);
loc_1a687c: // 0160:1a687c
    if ((int32_t)esi >= (int32_t)0x00000008)
        goto loc_1a688f;
    al = memoryAGet(ss, ebp + 1975928);
    memoryASet(ds, edi + 1966749, al);
    goto loc_1a6896;
loc_1a688f: // 0160:1a688f
    memoryASet(ds, edi + 1966749, 0x20);
loc_1a6896: // 0160:1a6896
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 24);
    eax += esi;
    edx = esi + 18;
    ebx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    ecx = memoryAGet32(ds, esp + 16);
    ecx += ebx;
loc_1a68af: // 0160:1a68af
    eax += 0x00000010;
    bl = memoryAGet(ds, edx + 1975928);
    edx += 0x00000012;
    memoryASet(ds, eax + 1966476, bl);
    if (eax != ecx)
        goto loc_1a68af;
    ebx = memoryAGet32(ds, esp + 28);
    edi++;
    ebp++;
    ebx++;
    esi++;
    memoryASet32(ds, esp + 28, ebx);
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1a687c;
    edx = 0x00000007;
    eax = memoryAGet32(ds, esp + 8);
    eax += edx;
    goto loc_1a68e5;
loc_1a68e3: // 0160:1a68e3
    eax--;
    edx--;
loc_1a68e5: // 0160:1a68e5
    if ((int32_t)edx <= 0)
        goto loc_1a68f6;
    ecx = 0;
    cl = memoryAGet(ds, eax + 1966749);
    if (ecx == 0x00000020)
        goto loc_1a68e3;
loc_1a68f6: // 0160:1a68f6
    edx++;
    eax = memoryAGet32(ds, esp + 12);
    edx = edx + edx*4;
    memoryASet32(ds, eax + 1966814, edx);
    goto loc_1a6957;
loc_1a6906: // 0160:1a6906
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000003;
    esi = memoryAGet32(ds, esp + 8);
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + 1980314, ecx);
    eax = memoryAGet32(ds, esp + 4);
    dl = 0x20;
    eax <<= 6;
loc_1a6925: // 0160:1a6925
    eax++;
    memoryASet(ds, eax + 1966491, dl);
    memoryASet(ds, eax + 1966507, dl);
    esi++;
    memoryASet(ds, eax + 1966523, dl);
    memoryASet(ds, esi + 1966748, dl);
    memoryASet(ds, eax + 1966539, dl);
    if (esi != edi)
        goto loc_1a6925;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, eax + 1966814, 0x00000005);
loc_1a6957: // 0160:1a6957
    edi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000010;
    ebp += 0x00000010;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 12, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1a6801;
    sub_19828d();
    sub_19839d();
    esp += 0x00000020;
    goto loc_1a62f9;
}
void sub_1a699a() // 0160:1a699a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = ebx;
    ebx = 0;
    goto loc_1a69b0;
loc_1a69a2: // 0160:1a69a2
    cl = memoryAGet(ds, eax);
    if (cl == memoryAGet(ds, edx))
        goto loc_1a69ad;
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1a69ad: // 0160:1a69ad
    edx++;
    eax++;
    ebx++;
loc_1a69b0: // 0160:1a69b0
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1a69a2;
    eax = 0x00000001;
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a69bc() // 0160:1a69bc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
    goto loc_1a69d4;
loc_1a69c4: // 0160:1a69c4
    ebx = 0;
    bl = memoryAGet(ds, eax);
    if (ebx == 0x00000020)
        goto loc_1a69d2;
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a69d2: // 0160:1a69d2
    eax++;
    edx++;
loc_1a69d4: // 0160:1a69d4
    if ((int32_t)edx < (int32_t)ecx)
        goto loc_1a69c4;
    eax = 0x00000001;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a69e0() // 0160:1a69e0 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edi = eax;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 20, ebx);
    if (!ebx)
        goto loc_1a69fc;
    ebp = 0x00000010;
    goto loc_1a6a01;
loc_1a69fc: // 0160:1a69fc
    ebp = 0x00000008;
loc_1a6a01: // 0160:1a6a01
    edx = ebp;
    eax = edi;
    sub_1a69bc();
    if (eax)
        goto loc_1a6ab7;
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_1a6a2d;
    eax = 0x00000001;
    edx = 0x00000005;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, edx);
    goto loc_1a6a3a;
loc_1a6a2d: // 0160:1a6a2d
    esi = 0x00000001;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, esi);
loc_1a6a3a: // 0160:1a6a3a
    memoryASet32(ds, esp + 8, 0x001e2678);
    ecx = memoryAGet32(ds, esp + 4);
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebx = 0;
    eax += eax;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp, eax);
    goto loc_1a6ab0;
loc_1a6a5a: // 0160:1a6a5a
    esi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    esi += eax;
    goto loc_1a6a93;
loc_1a6a69: // 0160:1a6a69
    eax = memoryAGet32(ds, esp + 24);
    if (eax != memoryAGet32(ds, esp + 12))
        goto loc_1a6a79;
    if (ecx == memoryAGet32(ds, esp + 20))
        goto loc_1a6a8f;
loc_1a6a79: // 0160:1a6a79
    ebx = ebp;
    edx = esi;
    eax = edi;
    sub_1a699a();
    if (!eax)
        goto loc_1a6a8f;
    eax = 0x00000001;
    goto loc_1a6ab9;
loc_1a6a8f: // 0160:1a6a8f
    esi += 0x00000012;
    ecx++;
loc_1a6a93: // 0160:1a6a93
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1a6a69;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 24);
    ebx += 0x000000aa;
    ecx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 24, ecx);
loc_1a6ab0: // 0160:1a6ab0
    if ((int32_t)memoryAGet32(ds, esp + 24) < (int32_t)0x00000010)
        goto loc_1a6a5a;
loc_1a6ab7: // 0160:1a6ab7
    eax = 0;
loc_1a6ab9: // 0160:1a6ab9
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a6ac1() // 0160:1a6ac1 +long
{
    esp -= 4;
    goto loc_1a6ac1;
loc_1a5e5c: // 0160:1a5e5c
    esp += 0x00000008;
    goto loc_1a62f9;
    // gap 1173 bytes
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1985 bytes
loc_1a6ac1: // 0160:1a6ac1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = 0;
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, ebp);
loc_1a6ad3: // 0160:1a6ad3
    if (!ebp)
        goto loc_1a6ade;
    ecx = 0x00000010;
    goto loc_1a6ae3;
loc_1a6ade: // 0160:1a6ade
    ecx = 0x00000008;
loc_1a6ae3: // 0160:1a6ae3
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax = 0;
    goto loc_1a6b0e;
loc_1a6aee: // 0160:1a6aee
    edx = memoryAGet32(ds, 0x3be914) * 0x000000aa;
    edx += edi;
    ebx = edx + eax;
    eax++;
    edx = memoryAGet32(ds, esi + 1980430);
    bl = memoryAGet(ds, ebx + 1975928);
    memoryASet(ds, edx + eax + 12, bl);
loc_1a6b0e: // 0160:1a6b0e
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1a6aee;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000004;
    esi += 0x00000012;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000005)
        goto loc_1a6ad3;
    goto loc_1a5e5c;
}
void sub_1a6b31() // 0160:1a6b31 +long
{
    esp -= 4;
    goto loc_1a6b31;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2097 bytes
loc_1a6b31: // 0160:1a6b31
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 16, edx);
loc_1a6b4a: // 0160:1a6b4a
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1a6b58;
    ecx = 0x00000010;
    goto loc_1a6b5d;
loc_1a6b58: // 0160:1a6b58
    ecx = 0x00000008;
loc_1a6b5d: // 0160:1a6b5d
    edx = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, 0x3be914);
    memoryASet32(ds, esp + 4, edx);
    edx = edi * 0x000000aa;
    esi = ebp;
    memoryASet32(ds, esp, edx);
    edi = edx;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    edi += edx;
    goto loc_1a6b94;
loc_1a6b82: // 0160:1a6b82
    eax++;
    edx = memoryAGet32(ds, esi + 1980430);
    dl = memoryAGet(ds, edx + eax + 12);
    memoryASet(ds, edi + eax + 1975927, dl);
loc_1a6b94: // 0160:1a6b94
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1a6b82;
    eax = 0x001e2678;
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, esp + 4);
    eax += ebx;
    edx = ecx;
    eax += edi;
    sub_1a69bc();
    ebx = memoryAGet32(ds, 0x3be914);
    edx = eax;
    eax = ebx * 0x000000aa;
    dl = !edx;
    edx &= 0x000000ff;
    memoryASet32(ds, esi + eax + 1976058, edx);
    eax += ebp;
    ecx = memoryAGet32(ds, eax + 1976058);
    if (ecx)
        goto loc_1a6bf6;
    memoryASet32(ds, eax + 1976078, ecx);
    ebx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 1976018, ecx);
    ebx++;
    memoryASet32(ds, eax + 1976038, ecx);
    memoryASet32(ds, esp + 8, ebx);
loc_1a6bf6: // 0160:1a6bf6
    esi = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, esp + 12);
    ebp += 0x00000004;
    esi += 0x00000012;
    edi++;
    memoryASet32(ds, esp + 16, esi);
    memoryASet32(ds, esp + 12, edi);
    if ((int32_t)edi < (int32_t)0x00000005)
        goto loc_1a6b4a;
    edx = memoryAGet32(ds, 0x3be914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax += edx;
    if ((int32_t)memoryAGet32(ds, esp + 8) < (int32_t)0x00000004)
        goto loc_1a6c3d;
    ecx = 0;
    memoryASet32(ds, eax + 1976058, ecx);
    goto loc_1a6c6f;
loc_1a6c3d: // 0160:1a6c3d
    edx = 0x00000008;
    eax += 0x001e2678;
    sub_1a69bc();
    if (eax)
        goto loc_1a6c6f;
    edx = memoryAGet32(ds, 0x3be914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    memoryASet32(ds, edx + eax + 1976058, 0x00000001);
loc_1a6c6f: // 0160:1a6c6f
    esp += 0x00000014;
    goto loc_1a62f9;
}
void sub_1a6c77() // 0160:1a6c77 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x3be904) != 0x00000000)
        goto loc_1a6ca0;
    ebx = 0x001d5e46;
    edx = 0x0000009c;
    eax = 0x000000a0;
    sub_1a5b1b();
    memoryASet32(ds, 0x3be904, 0x00000001);
loc_1a6ca0: // 0160:1a6ca0
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6ca3() // 0160:1a6ca3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3be904) == 0x00000000)
        goto loc_1a6ce3;
    ecx = 0x0022f090;
    edx = 0x003b0ef4;
    ecx += 0x0000c300;
    edx += 0x0000c300;
    eax = ecx;
    ecx += 0x00000c80;
loc_1a6ccd: // 0160:1a6ccd
    ebx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    if (eax != ecx)
        goto loc_1a6ccd;
    ebx = 0;
    memoryASet32(ds, 0x3be904, ebx);
loc_1a6ce3: // 0160:1a6ce3
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6ce7() // 0160:1a6ce7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1a61d5();
    edx = 0;
    esi = 0x00000048;
    memoryASet32(ds, 0x3be904, edx);
    sub_1a6ac1();
    sub_1ab3aa();
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, 0x1e380e);
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x0000000c;
    ecx = 0x00000004;
    sub_1a5c92();
loc_1a6d27: // 0160:1a6d27
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1980430);
    sub_1a5c92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_1a6d27;
    ebx = memoryAGet32(ds, 0x3be914);
    ebx = memoryAGet32(ds, ebx * 4 + 0x1e33c0);
    edx = 0x00000024;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, ebx * 4 + 0x1e37ba);
    sub_1a5c92();
    ebx = 0x001d5e5a;
    edx = 0x00000090;
    eax = 0x00000037;
    sub_1a5c92();
    ebx = 0x001d5e5f;
    edx = 0x00000084;
    eax = 0x00000037;
    sub_1a5c92();
    ebx = 0x001d5e1f;
    edx = 0x0000008a;
    eax = 0x00000109;
    sub_1a5c92();
    edx = memoryAGet32(ds, 0x3be914);
    ebx = 0x00000003;
    eax = 0x001e3786;
    edx = memoryAGet32(ds, edx * 4 + 0x1e3410);
    sub_1a617f();
    ebx = 0x001e377f;
    edx = 0x00000030;
    eax = 0x000000a0;
    sub_1a5c92();
    ebx = 0x001d5e64;
    edx = 0x0000008a;
    goto loc_1a70eb;
    // gap 777 bytes
loc_1a70eb: // 0160:1a70eb
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6de2() // 0160:1a6de2 +long
{
    esp -= 4;
    goto loc_1a6de2;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2786 bytes
loc_1a6de2: // 0160:1a6de2
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3be914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    ebp = eax;
    ebp <<= 4;
    ebp += eax;
    edi = ebp + 16;
    esi = 0;
    ebx = ebp;
    cl = 0x20;
loc_1a6e07: // 0160:1a6e07
    eax = esi * 0x00000012;
    edx = edi;
    eax += ebp;
loc_1a6e0e: // 0160:1a6e0e
    eax++;
    memoryASet(ds, eax + 1975927, cl);
    if (eax != edx)
        goto loc_1a6e0e;
    ebx += 0x00000004;
    edx = 0;
    memoryASet32(ds, ebx + 1976074, edx);
    memoryASet32(ds, ebx + 1976014, edx);
    edi += 0x00000012;
    memoryASet32(ds, ebx + 1976034, edx);
    esi++;
    memoryASet32(ds, ebx + 1976054, edx);
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_1a6e07;
    edx = memoryAGet32(ds, 0x3be914);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = 0;
    memoryASet32(ds, eax * 8 + 0x1e3460, edx);
    memoryASet32(ds, eax * 8 + 0x1e3464, edx);
    memoryASet32(ds, eax * 8 + 0x1e3468, edx);
    memoryASet32(ds, eax * 8 + 0x1e346c, edx);
    memoryASet32(ds, eax * 8 + 0x1e3470, edx);
    memoryASet32(ds, eax * 8 + 0x1e3474, edx);
    eax = memoryAGet32(ds, 0x3be914);
    edx = 0x00000003;
    ebx = 0x00000064;
    memoryASet32(ds, eax * 4 + 0x1e33c0, edx);
    memoryASet32(ds, eax * 4 + 0x1e3410, ebx);
    goto loc_1a62f9;
}
void sub_1a6e9a() // 0160:1a6e9a +long
{
    esp -= 4;
    goto loc_1a6e9a;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2970 bytes
loc_1a6e9a: // 0160:1a6e9a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000109;
    ebx = 0x00000090;
    esi = 0x00000003;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    ecx = 0;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    memoryASet32(ds, 0x1e3777, ecx);
    sub_1a6ce7();
    eax = 0x00000001;
    memoryASet32(ds, 0x1e376f, esi);
    memoryASet32(ds, 0x1e3714, edi);
    memoryASet32(ds, 0x1e3718, ebp);
    memoryASet32(ds, 0x1e371c, eax);
    goto loc_1a738b;
    // gap 1176 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
}
void sub_1a6ef3() // 0160:1a6ef3 +long
{
    esp -= 4;
    goto loc_1a6ef3;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3059 bytes
loc_1a6ef3: // 0160:1a6ef3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x001d5de1;
    edx = 0;
    ecx = 0x000000b0;
    memoryASet32(ds, 0x1e0070, edx);
    sub_1ab3aa();
    eax = 0x0000004e;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x001d5e6a;
    esi = 0x00000060;
    sub_1a5ae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x0000000f;
    sub_1a5c92();
    ebx = 0x001d5de5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0x000000a8;
    sub_1a5c92();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x1e36ec, ecx);
    memoryASet32(ds, 0x1e36f0, esi);
    memoryASet32(ds, 0x1e376f, edi);
    memoryASet32(ds, 0x1e3714, ebp);
    memoryASet32(ds, 0x1e3718, eax);
    memoryASet32(ds, 0x1e371c, edx);
    goto loc_1a738b;
    // gap 1026 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
}
void sub_1a6f89() // 0160:1a6f89 +long
{
    esp -= 4;
    goto loc_1a6f89;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3209 bytes
loc_1a6f89: // 0160:1a6f89
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a62fa;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a6fc8;
    sub_1a6de2();
    ebx = 0;
    ecx = 0x00000003;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1a6fc8: // 0160:1a6fc8
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a62fa;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, edi);
    goto loc_1a62fa;
}
void sub_1a6ff9() // 0160:1a6ff9 +long
{
    esp -= 4;
    push32(ebx);
    if ((int32_t)edx >= 0)
        goto loc_1a700b;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, eax + 1, 0x4f);
    memoryASet(ds, eax + 2, 0x4e);
    ebx = pop32();
    esp += 4;
    return;
loc_1a700b: // 0160:1a700b
    if (edx)
        goto loc_1a701a;
    memoryASet(ds, eax, 0x4f);
    memoryASet(ds, eax + 1, 0x46);
    memoryASet(ds, eax + 2, 0x46);
    ebx = pop32();
    esp += 4;
    return;
loc_1a701a: // 0160:1a701a
    ebx = 0x00000003;
    sub_1a617f();
    ebx = pop32();
    esp += 4;
}
void sub_1a7026() // 0160:1a7026 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x1e1608);
    edx = eax;
    if (!ebx)
        goto loc_1a705a;
    if (eax < 0x00000005)
        goto loc_1a7042;
    if (eax <= 0x00000005)
        goto loc_1a704e;
    if (eax == 0x00000009)
        goto loc_1a7055;
    goto loc_1a705a;
loc_1a7042: // 0160:1a7042
    if (eax != 0x00000003)
        goto loc_1a705a;
    edx = 0x00000014;
    goto loc_1a705a;
loc_1a704e: // 0160:1a704e
    edx = 0x00000012;
    goto loc_1a705a;
loc_1a7055: // 0160:1a7055
    edx = 0x00000013;
loc_1a705a: // 0160:1a705a
    if ((int32_t)eax >= (int32_t)0x00000012)
        goto loc_1a7075;
    eax = memoryAGet32(ds, eax * 4 + 0x1e3822);
    edx = memoryAGet32(ds, edx * 4 + 0x1e367c);
    eax += 0x0000000b;
    sub_1a6ff9();
loc_1a7075: // 0160:1a7075
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7078() // 0160:1a7078 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    ebx = 0x001d5e76;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000018;
    sub_1a5b1b();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a70a1: // 0160:1a70a1
    if ((int32_t)ecx >= (int32_t)0x00000012)
        goto loc_1a70e1;
    eax = ecx;
    sub_1a7026();
    edx = esi;
    eax = 0x00000050;
    ebx = memoryAGet32(ds, ecx * 4 + 0x1e3822);
    ecx++;
    sub_1a5c92();
    eax = ecx;
    sub_1a7026();
    edx = esi;
    eax = 0x000000f0;
    ebx = memoryAGet32(ds, ecx * 4 + 0x1e3822);
    sub_1a5c92();
    ecx++;
    esi += 0x0000000c;
    goto loc_1a70a1;
loc_1a70e1: // 0160:1a70e1
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a70fa() // 0160:1a70fa +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x1e1608) == 0x00000000)
        goto loc_1a7129;
    ebx = 0x00000001;
    eax = 0;
loc_1a710b: // 0160:1a710b
    eax += 0x000000ac;
    memoryASet32(ds, eax + 3803442, ebx);
    memoryASet32(ds, eax + 3803446, ebx);
    memoryASet32(ds, eax + 3803450, ebx);
    if (eax != 0x00000ac0)
        goto loc_1a710b;
loc_1a7129: // 0160:1a7129
    ebx = pop32();
    esp += 4;
}
void sub_1a712b() // 0160:1a712b +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1a712e: // 0160:1a712e
    eax += 0x00000054;
    edx = memoryAGet32(ds, 0x1e36cc);
    memoryASet32(ds, eax + 3806722, edx);
    edx = memoryAGet32(ds, 0x1e36c4);
    memoryASet32(ds, eax + 3806714, edx);
    edx = memoryAGet32(ds, 0x1e36c8);
    memoryASet32(ds, eax + 3806718, edx);
    if (eax != 0x00000150)
        goto loc_1a712e;
    edx = pop32();
    esp += 4;
}
void sub_1a71e9() // 0160:1a71e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    sub_19c6b5();
    bl = al;
    if (!al)
        goto loc_1a722d;
    edx = memoryAGet32(ds, 0x1e38b8);
    if (al != memoryAGet(ds, edx + 1980608))
        goto loc_1a7208;
    edx++;
    goto loc_1a720a;
loc_1a7208: // 0160:1a7208
    edx = 0;
loc_1a720a: // 0160:1a720a
    memoryASet32(ds, 0x1e38b8, edx);
    eax = memoryAGet32(ds, 0x1e38bc);
    if (bl != memoryAGet(ds, eax + 1980614))
        goto loc_1a7225;
    eax++;
    memoryASet32(ds, 0x1e38bc, eax);
    goto loc_1a722d;
loc_1a7225: // 0160:1a7225
    ebx = 0;
    memoryASet32(ds, 0x1e38bc, ebx);
loc_1a722d: // 0160:1a722d
    if ((int32_t)memoryAGet32(ds, 0x1e38b8) <= (int32_t)0x00000005)
        goto loc_1a724b;
    eax = 0;
    memoryASet32(ds, 0x1e38b8, eax);
    memoryASet32(ds, 0x1e38bc, eax);
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a724b: // 0160:1a724b
    if ((int32_t)memoryAGet32(ds, 0x1e38bc) <= (int32_t)0x00000005)
        goto loc_1a726b;
    edi = 0;
    eax = 0x00000002;
    memoryASet32(ds, 0x1e38b8, edi);
    memoryASet32(ds, 0x1e38bc, edi);
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a726b: // 0160:1a726b
    eax = 0;
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7271() // 0160:1a7271 +long
{
    esp -= 4;
    goto loc_1a7271;
loc_1a715e: // 0160:1a715e
    sub_19adf1();
    eax = memoryAGet32(ds, 0x1e36cc);
    ebx = 0;
    memoryASet32(ds, 0x1e38ac, eax);
    eax = memoryAGet32(ds, 0x1e36c4);
    memoryASet32(ds, 0x1e36cc, ebx);
    memoryASet32(ds, 0x1e38b0, eax);
    eax = memoryAGet32(ds, 0x1e36c8);
    memoryASet32(ds, 0x1e36c4, ebx);
    memoryASet32(ds, 0x1e38b4, eax);
    memoryASet32(ds, 0x1e36c8, ebx);
    sub_1a712b();
    eax = 0;
loc_1a719c: // 0160:1a719c
    edx = memoryAGet32(ds, 0x1e382e);
    bl = memoryAGet(ds, eax + 1980555);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1e3836);
    bl = memoryAGet(ds, eax + 1980533);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1e3846);
    bl = memoryAGet(ds, eax + 1980577);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax < (int32_t)0x0000000b)
        goto loc_1a719c;
loc_1a71cf: // 0160:1a71cf
    if (memoryAGet32(ds, 0x1e376f) != 0x00000006)
        goto loc_1a71e6;
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_1a71e6;
    sub_1a7078();
loc_1a71e6: // 0160:1a71e6
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 136 bytes
loc_1a7271: // 0160:1a7271
    if (memoryAGet32(ds, 0x1e376f) != 0x00000006)
        goto loc_1a7283;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1a729e;
loc_1a7283: // 0160:1a7283
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_1a72b3;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1a72b3;
    if (memoryAGet32(ds, 0x1e376f) != 0x00000000)
        goto loc_1a72b3;
loc_1a729e: // 0160:1a729e
    sub_1a71e9();
    if (eax < 0x00000001)
        goto loc_1a72b3;
    if (eax <= 0x00000001)
        goto loc_1a72b4;
    if (eax == 0x00000002)
        goto loc_1a7337;
loc_1a72b3: // 0160:1a72b3
    esp += 4;
    return;
loc_1a72b4: // 0160:1a72b4
    eax = 0x00000001;
loc_1a72b9: // 0160:1a72b9
    push32(ebx);
    push32(edx);
    if (eax == memoryAGet32(ds, 0x1e1608))
        goto loc_1a71e6;
    memoryASet32(ds, 0x1e1608, eax);
    if (!eax)
        goto loc_1a715e;
    sub_19ace7();
    eax = memoryAGet32(ds, 0x1e38ac);
    memoryASet32(ds, 0x1e36cc, eax);
    eax = memoryAGet32(ds, 0x1e38b0);
    memoryASet32(ds, 0x1e36c4, eax);
    eax = memoryAGet32(ds, 0x1e38b4);
    memoryASet32(ds, 0x1e36c8, eax);
    sub_1a712b();
    eax = 0;
loc_1a72fe: // 0160:1a72fe
    edx = memoryAGet32(ds, 0x1e382e);
    bl = memoryAGet(ds, eax + 1980544);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1e3836);
    bl = memoryAGet(ds, eax + 1980522);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x1e3846);
    bl = memoryAGet(ds, eax + 1980566);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax >= (int32_t)0x0000000b)
        goto loc_1a71cf;
    goto loc_1a72fe;
loc_1a7337: // 0160:1a7337
    eax = 0;
    goto loc_1a72b9;
}
void sub_1a733e() // 0160:1a733e +long
{
    esp -= 4;
    goto loc_1a733e;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4158 bytes
loc_1a733e: // 0160:1a733e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000006;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a7078();
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
}
void sub_1a739a() // 0160:1a739a +long
{
    esp -= 4;
    goto loc_1a739a;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1a67d7: // 0160:1a67d7
    memoryASet32(ds, 0x1e3773, edx);
    goto loc_1a62f9;
    // gap 3000 bytes
loc_1a739a: // 0160:1a739a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a73b7;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a67d7;
loc_1a73b7: // 0160:1a73b7
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a73c7;
    ecx = 0x00000001;
    goto loc_1a73cc;
loc_1a73c7: // 0160:1a73c7
    ecx = 0xffffffff;
loc_1a73cc: // 0160:1a73cc
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e3773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a73e8;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, edx);
loc_1a73e8: // 0160:1a73e8
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a749a;
    ebx = 0;
loc_1a73f3: // 0160:1a73f3
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a7490;
    if ((int32_t)ebx >= (int32_t)0x00000012)
        goto loc_1a7490;
    ebp = memoryAGet32(ds, 0x1e1608);
    edx = ebx;
    if (!ebp)
        goto loc_1a7449;
    if (ebx < 0x00000005)
        goto loc_1a7431;
    if (ebx <= 0x00000005)
        goto loc_1a743d;
    if (ebx == 0x00000009)
        goto loc_1a7444;
    goto loc_1a7449;
loc_1a7431: // 0160:1a7431
    if (ebx != 0x00000003)
        goto loc_1a7449;
    edx = 0x00000014;
    goto loc_1a7449;
loc_1a743d: // 0160:1a743d
    edx = 0x00000012;
    goto loc_1a7449;
loc_1a7444: // 0160:1a7444
    edx = 0x00000013;
loc_1a7449: // 0160:1a7449
    eax = edx;
    eax <<= 2;
    esi = memoryAGet32(ds, eax + 1980028);
    esi += ecx;
    memoryASet32(ds, eax + 1980028, esi);
    if ((int32_t)esi >= (int32_t)0xffffffff)
        goto loc_1a746b;
    memoryASet32(ds, eax + 1980028, 0x00000009);
loc_1a746b: // 0160:1a746b
    edx <<= 2;
    if ((int32_t)memoryAGet32(ds, edx + 1980028) <= (int32_t)0x00000009)
        goto loc_1a7481;
    memoryASet32(ds, edx + 1980028, 0xffffffff);
loc_1a7481: // 0160:1a7481
    eax = ebx;
    sub_1a7026();
    eax = ebx + 1;
    sub_1a5ef8();
loc_1a7490: // 0160:1a7490
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000012)
        goto loc_1a73f3;
loc_1a749a: // 0160:1a749a
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000013)
        goto loc_1a62f9;
    edi = 0;
    ebp = 0x00000004;
    memoryASet32(ds, 0x1e371c, edi);
    memoryASet32(ds, 0x1e376f, ebp);
    goto loc_1a62f9;
}
void sub_1a74e9() // 0160:1a74e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (eax > 0x00000006)
        goto loc_1a75c2;
    esi = eax;
    esi <<= 2;
    switch (esi/4)
    {
        case 0: goto loc_1a7501;
        case 1: goto loc_1a751e;
        case 2: goto loc_1a7531;
        case 3: goto loc_1a755f;
        case 4: goto loc_1a758a;
        case 5: goto loc_1a75c2;
        case 6: goto loc_1a75a0;
        default:
            printf("unhandled: %x\n", esi/4);
            stop("ind 0160:1a74fa");
    }
loc_1a7501: // 0160:1a7501
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = memoryAGet32(ds, 0x1e3664);
loc_1a7512: // 0160:1a7512
    eax += 0x00000016;
loc_1a7515: // 0160:1a7515
    sub_1a617f();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a751e: // 0160:1a751e
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = memoryAGet32(ds, 0x1e3668);
    goto loc_1a7512;
loc_1a7531: // 0160:1a7531
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = memoryAGet32(ds, 0x3be8fc);
    eax += 0x00000016;
    sub_1a617f();
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = 0x00000042;
loc_1a755a: // 0160:1a755a
    eax += 0x00000012;
    goto loc_1a7515;
loc_1a755f: // 0160:1a755f
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = memoryAGet32(ds, 0x3be8f8);
    eax += 0x00000016;
    sub_1a617f();
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = 0x00000006;
    goto loc_1a755a;
loc_1a758a: // 0160:1a758a
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 1980636);
    edx = memoryAGet32(ds, 0x1e366c);
    goto loc_1a7512;
loc_1a75a0: // 0160:1a75a0
    eax = 0;
loc_1a75a2: // 0160:1a75a2
    edx = memoryAGet32(ds, 0x1e36d0);
    edx = memoryAGet32(ds, edx * 4 + 0x1e38cc);
    ebx = memoryAGet32(ds, esi + 1980636);
    dl = memoryAGet(ds, edx + eax);
    eax++;
    memoryASet(ds, ebx + eax + 15, dl);
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1a75a2;
loc_1a75c2: // 0160:1a75c2
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a75c6() // 0160:1a75c6 +long
{
    esp -= 4;
    goto loc_1a75c6;
loc_1a70e1: // 0160:1a70e1
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1228 bytes
loc_1a75c6: // 0160:1a75c6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    edx = 0x001d5e86;
    eax = 0x0000000c;
    sub_1a5ae0();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a75ea: // 0160:1a75ea
    eax = ecx;
    sub_1a74e9();
    eax = ecx;
    eax = eax * 0x0000000c;
    ebx = memoryAGet32(ds, esi + 1980636);
    edx = eax + 48;
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1a5c92();
    if ((int32_t)ecx < (int32_t)0x00000007)
        goto loc_1a75ea;
    goto loc_1a70e1;
}
void sub_1a761a() // 0160:1a761a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    edi = 0x00000007;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    memoryASet32(ds, 0x3be8fc, ecx);
    memoryASet32(ds, 0x3be8f8, ecx);
    sub_1a75c6();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x1e376f, edi);
    memoryASet32(ds, 0x1e3714, ebp);
    memoryASet32(ds, 0x1e3718, eax);
    memoryASet32(ds, 0x1e371c, edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a76a1() // 0160:1a76a1 +long
{
    esp -= 4;
    goto loc_1a76a1;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1a67d7: // 0160:1a67d7
    memoryASet32(ds, 0x1e3773, edx);
    goto loc_1a62f9;
    // gap 3775 bytes
loc_1a76a1: // 0160:1a76a1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a76be;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a67d7;
loc_1a76be: // 0160:1a76be
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a76ce;
    esi = 0x00000001;
    goto loc_1a76d3;
loc_1a76ce: // 0160:1a76ce
    esi = 0xffffffff;
loc_1a76d3: // 0160:1a76d3
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e3773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a76ef;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, edx);
loc_1a76ef: // 0160:1a76ef
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a791b;
    ecx = 0;
    edi = 0;
    ebp = 0;
loc_1a76fe: // 0160:1a76fe
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = ecx + 1;
    if (eax != edx)
        goto loc_1a790e;
    if (ecx > 0x00000006)
        goto loc_1a78ff;
    switch (edi/4)
    {
        case 0: goto loc_1a7729;
        case 1: goto loc_1a778b;
        case 2: goto loc_1a77e9;
        case 3: goto loc_1a7833;
        case 4: goto loc_1a788d;
        case 5: goto loc_1a78ce;
        case 6: goto loc_1a78ec;
        default:
            printf("unhandled: %x\n", edi/4);
            stop("ind 0160:1a7722");
    }
loc_1a7729: // 0160:1a7729
    edx = memoryAGet32(ds, 0x1e3664);
    edx += esi;
    memoryASet32(ds, 0x1e3664, edx);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_1a7745;
    memoryASet32(ds, 0x1e3664, 0x0000000a);
loc_1a7745: // 0160:1a7745
    if ((int32_t)memoryAGet32(ds, 0x1e3664) <= (int32_t)0x0000000a)
        goto loc_1a7754;
    memoryASet32(ds, 0x1e3664, ebp);
loc_1a7754: // 0160:1a7754
    edx = memoryAGet32(ds, 0x1e3664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_1be185();
    eax = memoryAGet32(ds, 0x1e3664);
    edx = eax * 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_1bfd4c();
    goto loc_1a78ff;
loc_1a778b: // 0160:1a778b
    ebx = memoryAGet32(ds, 0x1e3668);
    ebx += esi;
    memoryASet32(ds, 0x1e3668, ebx);
    if ((int32_t)ebp <= (int32_t)ebx)
        goto loc_1a77a7;
    memoryASet32(ds, 0x1e3668, 0x0000000a);
loc_1a77a7: // 0160:1a77a7
    if ((int32_t)memoryAGet32(ds, 0x1e3668) <= (int32_t)0x0000000a)
        goto loc_1a77b6;
    memoryASet32(ds, 0x1e3668, ebp);
loc_1a77b6: // 0160:1a77b6
    edx = 0x00000002;
    ebx = 0x000000ff;
    eax = ebp;
    memoryASet32(ds, 0x1e0004, ebp);
    sub_1ab709();
    edx = 0x00000080;
    eax += 0x00000003;
loc_1a77d5: // 0160:1a77d5
    sub_1bda16();
    memoryASet32(ds, 0x1e0004, 0x00000001);
    goto loc_1a78ff;
loc_1a77e9: // 0160:1a77e9
    eax = memoryAGet32(ds, 0x3be8fc);
    eax += esi;
    memoryASet32(ds, 0x3be8fc, eax);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1a7803;
    memoryASet32(ds, 0x3be8fc, 0x00000042);
loc_1a7803: // 0160:1a7803
    if ((int32_t)memoryAGet32(ds, 0x3be8fc) < (int32_t)0x00000043)
        goto loc_1a7812;
    memoryASet32(ds, 0x3be8fc, ebp);
loc_1a7812: // 0160:1a7812
    eax = memoryAGet32(ds, 0x3be8fc);
    memoryASet32(ds, 0x1e0004, ebp);
    if (eax != 0x0000003b)
        goto loc_1a7827;
    eax = 0x00000003;
loc_1a7827: // 0160:1a7827
    ebx = 0x000000ff;
    edx = 0x00000080;
    goto loc_1a77d5;
loc_1a7833: // 0160:1a7833
    eax = memoryAGet32(ds, 0x3be8f8);
    eax += esi;
    memoryASet32(ds, 0x3be8f8, eax);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1a784d;
    memoryASet32(ds, 0x3be8f8, 0x00000006);
loc_1a784d: // 0160:1a784d
    if ((int32_t)memoryAGet32(ds, 0x3be8f8) <= (int32_t)0x00000006)
        goto loc_1a785c;
    memoryASet32(ds, 0x3be8f8, ebp);
loc_1a785c: // 0160:1a785c
    edx = memoryAGet32(ds, 0x1e3664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, 0x3be8f8);
    ebx = memoryAGet32(ds, edx * 4 + 0x1e38f8);
loc_1a787f: // 0160:1a787f
    edx = eax;
    eax = ebx;
    sub_19708b();
    goto loc_1a78ff;
loc_1a788d: // 0160:1a788d
    edx = memoryAGet32(ds, 0x1e366c);
    edx += esi;
    memoryASet32(ds, 0x1e366c, edx);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_1a78a9;
    memoryASet32(ds, 0x1e366c, 0x0000000a);
loc_1a78a9: // 0160:1a78a9
    if ((int32_t)memoryAGet32(ds, 0x1e366c) <= (int32_t)0x0000000a)
        goto loc_1a78b8;
    memoryASet32(ds, 0x1e366c, ebp);
loc_1a78b8: // 0160:1a78b8
    eax = memoryAGet32(ds, 0x1e366c) * 0x000003e8;
    eax += 0x00001388;
    sub_1bd48f();
    goto loc_1a78ff;
loc_1a78ce: // 0160:1a78ce
    edx = memoryAGet32(ds, 0x1e3664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x1e3910);
    goto loc_1a787f;
loc_1a78ec: // 0160:1a78ec
    eax = memoryAGet32(ds, 0x1e36d0);
    eax++;
    eax &= 0x00000003;
    memoryASet32(ds, 0x1e36d0, eax);
    sub_1bd948();
loc_1a78ff: // 0160:1a78ff
    eax = ecx;
    sub_1a74e9();
    eax = ecx + 1;
    sub_1a5ef8();
loc_1a790e: // 0160:1a790e
    ecx++;
    edi += 0x00000004;
    if ((int32_t)ecx < (int32_t)0x00000007)
        goto loc_1a76fe;
loc_1a791b: // 0160:1a791b
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000008)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e3664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x1e38f8);
    edx = eax;
    eax = ebx;
    sub_19708b();
    edx = 0;
    ebx = 0x00000004;
    memoryASet32(ds, 0x1e371c, edx);
    memoryASet32(ds, 0x1e376f, ebx);
    goto loc_1a62f9;
}
void sub_1a7974() // 0160:1a7974 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax <<= 2;
    if (edx <= 0)
        goto loc_1a7985;
    if (edx == 0x00000001)
        goto loc_1a79ae;
    edx = pop32();
    esp += 4;
    return;
loc_1a7985: // 0160:1a7985
    if (memoryAGet32(ds, 0x1e3674) == 0x00000000)
        goto loc_1a79b7;
loc_1a798e: // 0160:1a798e
    edx = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, edx + 24, 0x20);
    edx = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, edx + 25, 0x4f);
    eax = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, eax + 26, 0x4e);
    edx = pop32();
    esp += 4;
    return;
loc_1a79ae: // 0160:1a79ae
    if (memoryAGet32(ds, 0x39eabc) != 0x00000000)
        goto loc_1a798e;
loc_1a79b7: // 0160:1a79b7
    edx = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, edx + 24, 0x4f);
    edx = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, edx + 25, 0x46);
    eax = memoryAGet32(ds, eax + 1980692);
    memoryASet(ds, eax + 26, 0x46);
    edx = pop32();
    esp += 4;
}
void sub_1a79d7() // 0160:1a79d7 +long
{
    esp -= 4;
    goto loc_1a79d7;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5847 bytes
loc_1a79d7: // 0160:1a79d7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_1ab3aa();
    edx = 0x001d5e95;
    eax = 0x0000000c;
    edi = 0x00000030;
    sub_1a5ae0();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a7a01: // 0160:1a7a01
    eax = ecx;
    sub_1a7974();
    edx = edi;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, esi + 1980692);
    esi += 0x00000004;
    sub_1a5c92();
    ecx++;
    edi += 0x00000018;
    if ((int32_t)ecx < (int32_t)0x00000002)
        goto loc_1a7a01;
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    goto loc_1a62fa;
}
void sub_1a7a3f() // 0160:1a7a3f +long
{
    esp -= 4;
    goto loc_1a7a3f;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 1701 bytes
loc_1a7a3f: // 0160:1a7a3f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000009;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a79d7();
    goto loc_1a7373;
}
void sub_1a7a79() // 0160:1a7a79 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a7a94;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a7b52;
loc_1a7a94: // 0160:1a7a94
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e3773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a7ab0;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, edx);
loc_1a7ab0: // 0160:1a7ab0
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a7b26;
    ebx = 0;
loc_1a7abb: // 0160:1a7abb
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a7b20;
    if (ebx <= 0)
        goto loc_1a7add;
    if (ebx == 0x00000001)
        goto loc_1a7ae6;
    goto loc_1a7b11;
loc_1a7add: // 0160:1a7add
    memoryASet(ds, 0x1e3674, memoryAGet(ds, 0x1e3674) ^ 0x01);
    goto loc_1a7b11;
loc_1a7ae6: // 0160:1a7ae6
    ah = memoryAGet(ds, 0x39eabc);
    ah ^= 0x01;
    edi = 0;
    memoryASet(ds, 0x39eabc, ah);
    sub_1a5964();
    eax = memoryAGet32(ds, 0x39eabc);
    memoryASet32(ds, 0x1e0000, edi);
    sub_199645();
    sub_1a59c1();
loc_1a7b11: // 0160:1a7b11
    eax = ebx;
    sub_1a7974();
    eax = ebx + 1;
    sub_1a5ef8();
loc_1a7b20: // 0160:1a7b20
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000002)
        goto loc_1a7abb;
loc_1a7b26: // 0160:1a7b26
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000003)
        goto loc_1a7b58;
    ebp = 0;
    eax = 0x00000004;
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7b52: // 0160:1a7b52
    memoryASet32(ds, 0x1e3773, edx);
loc_1a7b58: // 0160:1a7b58
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7b5d() // 0160:1a7b5d +long
{
    esp -= 4;
    goto loc_1a7b5d;
loc_1a70e1: // 0160:1a70e1
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2659 bytes
loc_1a7b5d: // 0160:1a7b5d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    edx = 0x001d5ea4;
    eax = 0x0000000c;
    esi = 0x00000048;
    sub_1a5ae0();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a7b84: // 0160:1a7b84
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1980700);
    sub_1a5c92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x0000000c)
        goto loc_1a7b84;
    goto loc_1a70e1;
}
void sub_1a7ba6() // 0160:1a7ba6 +long
{
    esp -= 4;
    goto loc_1a7ba6;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 2060 bytes
loc_1a7ba6: // 0160:1a7ba6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x0000000c;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a7b5d();
    goto loc_1a7373;
}
void sub_1a7be0() // 0160:1a7be0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x001d5eb7;
    sub_1cc03a();
    if (!eax)
        goto loc_1a7bf9;
    sub_1cc23e();
    eax = 0x00000001;
loc_1a7bf9: // 0160:1a7bf9
    edx = pop32();
    esp += 4;
}
void sub_1a7bfb() // 0160:1a7bfb +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_1be185();
    edx = memoryAGet32(ds, 0x1e3664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_1bfd4c();
    edx = memoryAGet32(ds, 0x1e366c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    sub_1bd48f();
    eax = memoryAGet32(ds, 0x1e3678);
    if (eax == memoryAGet32(ds, 0x39eabc))
        goto loc_1a7c8b;
    ah = memoryAGet(ds, 0x39eabc);
    ah ^= 0x01;
    ebx = 0;
    memoryASet(ds, 0x39eabc, ah);
    sub_1a5964();
    eax = memoryAGet32(ds, 0x39eabc);
    memoryASet32(ds, 0x1e0000, ebx);
    sub_199645();
    sub_1a59c1();
loc_1a7c8b: // 0160:1a7c8b
    eax = memoryAGet32(ds, 0x1e36d0);
    sub_1bd948();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7c98() // 0160:1a7c98 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x39eabc);
    memoryASet32(ds, 0x1e3678, eax);
    eax = 0x001d5eba;
    sub_1cc798();
    if (!eax)
        goto loc_1a7ccb;
    eax = 0x001d5eba;
    ebx = 0x0000106c;
    edx = 0x001e2678;
    sub_1cc798();
    sub_19c9c1();
loc_1a7ccb: // 0160:1a7ccb
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7cd0() // 0160:1a7cd0 +long
{
    esp -= 4;
    push32(edx);
    eax = 0x001d5eba;
    sub_1cc798();
    if (!eax)
        goto loc_1a7d0b;
    eax = 0x001d5eba;
    sub_1cc798();
    sub_1a7be0();
    if (!eax)
        goto loc_1a7d0b;
    eax = 0x001d5eba;
    edx = 0x001e2678;
    sub_1cc798();
    sub_19c8e6();
    sub_1a7bfb();
loc_1a7d0b: // 0160:1a7d0b
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_1a7d0f() // 0160:1a7d0f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000041b;
    edi = 0x001e2678;
    esi = 0x001e160c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_1a7bfb();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a7d2c() // 0160:1a7d2c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a7d43;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a7da1;
loc_1a7d43: // 0160:1a7d43
    ebx = 0;
loc_1a7d45: // 0160:1a7d45
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a7d74;
    eax = 0x0000000e;
    ebp = 0;
    memoryASet32(ds, 0x1e393c, ebx);
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, eax);
loc_1a7d74: // 0160:1a7d74
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000003)
        goto loc_1a7d45;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000004)
        goto loc_1a7da7;
    esi = 0;
    memoryASet32(ds, 0x1e376f, eax);
    memoryASet32(ds, 0x1e371c, esi);
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a7da1: // 0160:1a7da1
    memoryASet32(ds, 0x1e3773, edx);
loc_1a7da7: // 0160:1a7da7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7dac() // 0160:1a7dac +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1ab3aa();
    edx = 0;
    eax = memoryAGet32(ds, 0x1e393c);
    memoryASet32(ds, 0x3be918, edx);
    if (eax < 0x00000001)
        goto loc_1a7dce;
    if (eax <= 0x00000001)
        goto loc_1a7dd9;
    if (eax == 0x00000002)
        goto loc_1a7de0;
    goto loc_1a7def;
loc_1a7dce: // 0160:1a7dce
    if (eax)
        goto loc_1a7def;
    edx = 0x001d5ec3;
    goto loc_1a7de5;
loc_1a7dd9: // 0160:1a7dd9
    edx = 0x001d5ed0;
    goto loc_1a7de5;
loc_1a7de0: // 0160:1a7de0
    edx = 0x001d5edd;
loc_1a7de5: // 0160:1a7de5
    eax = 0x0000004e;
    sub_1a5ae0();
loc_1a7def: // 0160:1a7def
    ebx = 0x001d5de1;
    edx = 0x0000005a;
    eax = 0x00000090;
    sub_1a5c92();
    ebx = 0x001d5de5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    sub_1a5c92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a7e1a() // 0160:1a7e1a +long
{
    esp -= 4;
    goto loc_1a7e1a;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3031 bytes
loc_1a6ed7: // 0160:1a6ed7
    memoryASet32(ds, 0x1e376f, esi);
    memoryASet32(ds, 0x1e3714, edi);
    memoryASet32(ds, 0x1e3718, ebp);
    memoryASet32(ds, 0x1e371c, eax);
    goto loc_1a738b;
    // gap 1176 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 2688 bytes
loc_1a7e1a: // 0160:1a7e1a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a7dac();
    ebx = 0x000000b0;
    ecx = 0x00000060;
    esi = 0x0000000e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1e3940, edx);
    memoryASet32(ds, 0x1e36ec, ebx);
    memoryASet32(ds, 0x1e36f0, ecx);
    goto loc_1a6ed7;
}
void sub_1a7e5c() // 0160:1a7e5c +long
{
    esp -= 4;
    goto loc_1a7e5c;
loc_1a6595: // 0160:1a6595
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6337 bytes
loc_1a7e5c: // 0160:1a7e5c
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1e3944);
    if (!edx)
        goto loc_1a7e92;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e3944, ebx);
    if (ebx)
        goto loc_1a6595;
    edi = 0x0000000c;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, edi);
    goto loc_1a6595;
loc_1a7e92: // 0160:1a7e92
    ebx = memoryAGet32(ds, 0x1e3940);
    if (!ebx)
        goto loc_1a7ee1;
    if ((int32_t)ebx <= (int32_t)0x00000002)
        goto loc_1a7eb2;
    edx = ebx + -65536;
    memoryASet32(ds, 0x1e3940, edx);
    goto loc_1a6595;
loc_1a7eb2: // 0160:1a7eb2
    if (ebx != 0x00000001)
        goto loc_1a7ebc;
    sub_1a7c98();
loc_1a7ebc: // 0160:1a7ebc
    if (memoryAGet32(ds, 0x1e3940) != 0x00000002)
        goto loc_1a7eca;
    sub_1a7cd0();
loc_1a7eca: // 0160:1a7eca
    ebp = 0;
    eax = 0x0000000c;
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, eax);
    goto loc_1a6595;
loc_1a7ee1: // 0160:1a7ee1
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a6595;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a7f64;
    eax = memoryAGet32(ds, 0x1e393c);
    if (eax < 0x00000001)
        goto loc_1a7f16;
    if (eax <= 0x00000001)
        goto loc_1a7f35;
    if (eax == 0x00000002)
        goto loc_1a7f4c;
    goto loc_1a7f64;
loc_1a7f16: // 0160:1a7f16
    if (eax)
        goto loc_1a7f64;
    eax = 0x00020001;
    edx = 0x001d5eed;
    memoryASet32(ds, 0x1e3940, eax);
    eax = 0x00000072;
loc_1a7f2e: // 0160:1a7f2e
    sub_1a5ae0();
    goto loc_1a7f64;
loc_1a7f35: // 0160:1a7f35
    ebp = 0x00020002;
    edx = 0x001d5efb;
    eax = 0x00000072;
    memoryASet32(ds, 0x1e3940, ebp);
    goto loc_1a7f2e;
loc_1a7f4c: // 0160:1a7f4c
    sub_1a7d0f();
    esi = 0;
    edi = 0x0000000c;
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, edi);
loc_1a7f64: // 0160:1a7f64
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a6595;
    edx = 0;
    ebx = 0x0000000c;
    memoryASet32(ds, 0x1e371c, edx);
    memoryASet32(ds, 0x1e376f, ebx);
    goto loc_1a6595;
}
void sub_1a7f95() // 0160:1a7f95 +long
{
    esp -= 4;
    goto loc_1a7f95;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2415 bytes
loc_1a6c6f: // 0160:1a6c6f
    esp += 0x00000014;
    goto loc_1a62f9;
    // gap 4894 bytes
loc_1a7f95: // 0160:1a7f95
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edi = 0;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, edi);
loc_1a7fa8: // 0160:1a7fa8
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 12);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = edi;
    ebx += 0x00000004;
    ecx <<= 3;
loc_1a7fbd: // 0160:1a7fbd
    eax = ebp;
    eax |= esi;
    memoryASet32(ds, ecx + 3843316, eax);
    if (memoryAGet32(ds, ebx + 1976078) == 0x00000000)
        goto loc_1a800b;
    eax = memoryAGet32(ds, ebx + 1976018);
    edx = eax * 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, ebx + 1976078));
    eax <<= 16;
    edx = memoryAGet32(ds, ebx + 1976018);
    eax |= edx;
    memoryASet32(ds, ecx + 3843320, eax);
    if ((int32_t)eax <= (int32_t)0x270f0000)
        goto loc_1a8015;
    eax = edx;
    eax |= 0x270f0000;
    memoryASet32(ds, ecx + 3843320, eax);
    goto loc_1a8015;
loc_1a800b: // 0160:1a800b
    memoryASet32(ds, ecx + 3843320, 0xf0000001);
loc_1a8015: // 0160:1a8015
    ecx += 0x00000008;
    edi++;
    esi++;
    ebx += 0x00000004;
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_1a7fbd;
    edx = memoryAGet32(ds, esp + 14);
    edx++;
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, esp + 14, dx);
    ecx += 0x000000aa;
    esi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 8, ecx);
    if (esi != 0x00140000)
        goto loc_1a7fa8;
    ebx = 0x00000001;
loc_1a804f: // 0160:1a804f
    if (!edi)
        goto loc_1a8095;
    edi = 0;
    eax = 0;
loc_1a8057: // 0160:1a8057
    edx = memoryAGet32(ds, eax + 3843320);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 3843328))
        goto loc_1a8089;
    edi = esp;
    esi = eax + 3843316;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = eax + 3843316;
    esi = eax + 3843324;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    esi = esp;
    edi = eax + 3843324;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = ebx;
loc_1a8089: // 0160:1a8089
    eax += 0x00000008;
    if ((int32_t)eax >= (int32_t)0x00000278)
        goto loc_1a804f;
    goto loc_1a8057;
loc_1a8095: // 0160:1a8095
    memoryASet32(ds, esp + 16, edi);
    ebp = 0;
loc_1a809b: // 0160:1a809b
    if (memoryAGet32(ss, ebp + 3843320) == 0xf0000001)
        goto loc_1a815e;
    ecx = memoryAGet32(ss, ebp + 3843316);
    ecx = sar32(ecx, 0x10);
    ecx = ecx * 0x000000aa;
    esi = memoryAGet32(ss, ebp + 3843316);
    esi &= 0x0000ffff;
    esi = esi * 0x00000012;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    ebx = ecx;
    esi += ecx;
loc_1a80d3: // 0160:1a80d3
    edi = memoryAGet32(ds, edx + 1980744);
    cl = memoryAGet(ds, esi + 1975928);
    memoryASet(ds, edi + eax, cl);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1a80f7;
    edi = memoryAGet32(ds, edx + 1980744);
    cl = memoryAGet(ds, ebx + 1975928);
    memoryASet(ds, edi + eax + 17, cl);
loc_1a80f7: // 0160:1a80f7
    ebx++;
    eax++;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a80d3;
    ebx = 0x00000005;
    eax = memoryAGet32(ss, ebp + 3843320);
    ecx = memoryAGet32(ds, edx + 1980744);
    eax = sar32(eax, 0x10);
    ecx += 0x00000019;
    edx = eax;
    eax = ecx;
    sub_1a617f();
    eax = 0x00000019;
    ebx = memoryAGet32(ds, esp + 16);
loc_1a8128: // 0160:1a8128
    edx = memoryAGet32(ds, ebx + 1980744);
    dl = memoryAGet(ds, edx + eax);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1a8144;
    if ((int32_t)eax >= (int32_t)0x0000001e)
        goto loc_1a8144;
    eax++;
    goto loc_1a8128;
loc_1a8144: // 0160:1a8144
    if ((int32_t)memoryAGet32(ss, ebp + 3843320) >= (int32_t)0x00000000)
        goto loc_1a8199;
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 1980744);
    memoryASet(ds, edx + eax + -1, 0x2d);
    goto loc_1a8199;
loc_1a815e: // 0160:1a815e
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
loc_1a8164: // 0160:1a8164
    ebx = memoryAGet32(ds, edx + 1980744);
    memoryASet(ds, ebx + eax, 0x2d);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1a817e;
    ebx = memoryAGet32(ds, edx + 1980744);
    memoryASet(ds, ebx + eax + 17, 0x2d);
loc_1a817e: // 0160:1a817e
    eax++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a8164;
    eax = memoryAGet32(ds, edx + 1980744);
    ebx = 0x00000005;
    eax += 0x00000019;
    edx = 0;
    sub_1a617f();
loc_1a8199: // 0160:1a8199
    esi = memoryAGet32(ds, esp + 16);
    esi += 0x00000004;
    ebp += 0x00000008;
    memoryASet32(ds, esp + 16, esi);
    if (esi != 0x00000020)
        goto loc_1a809b;
    goto loc_1a6c6f;
}
void sub_1a81b5() // 0160:1a81b5 +long
{
    esp -= 4;
    goto loc_1a81b5;
loc_1a70e1: // 0160:1a70e1
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4283 bytes
loc_1a81b5: // 0160:1a81b5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    ebx = 0x001d5f0a;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x0000002a;
    memoryASet32(ds, 0x3be918, edx);
    sub_1a5b1b();
    ebx = 0x001d5f19;
    edx = 0x00000018;
    eax = 0x000000a0;
    ecx = 0;
    sub_1a5b1b();
loc_1a81f0: // 0160:1a81f0
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1980744);
    sub_1a5b1b();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000020)
        goto loc_1a81f0;
    goto loc_1a70e1;
}
void sub_1a8212() // 0160:1a8212 +long
{
    esp -= 4;
    goto loc_1a8212;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 3704 bytes
loc_1a8212: // 0160:1a8212
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000010;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a7f95();
    sub_1a81b5();
    goto loc_1a7373;
}
void sub_1a8251() // 0160:1a8251 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a8266;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a828b;
loc_1a8266: // 0160:1a8266
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a8291;
    esi = 0;
    memoryASet32(ds, 0x1e376f, eax);
    memoryASet32(ds, 0x1e371c, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1a828b: // 0160:1a828b
    memoryASet32(ds, 0x1e3773, edx);
loc_1a8291: // 0160:1a8291
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1a8294() // 0160:1a8294 +long
{
    esp -= 4;
    goto loc_1a8294;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3026 bytes
loc_1a6ed2: // 0160:1a6ed2
    eax = 0x00000001;
    memoryASet32(ds, 0x1e376f, esi);
    memoryASet32(ds, 0x1e3714, edi);
    memoryASet32(ds, 0x1e3718, ebp);
    memoryASet32(ds, 0x1e371c, eax);
    goto loc_1a738b;
    // gap 1176 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 3834 bytes
loc_1a8294: // 0160:1a8294
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000b0;
    ebx = 0x00000060;
    esi = 0x00000008;
    ecx = 0;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1ab3aa();
    edx = 0x001d5f38;
    eax = 0x0000004e;
    ebx = 0x001d5de1;
    memoryASet32(ds, 0x3be918, ecx);
    sub_1a5ae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1a5c92();
    ebx = 0x001d5de5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1a5c92();
    goto loc_1a6ed2;
}
void sub_1a8308() // 0160:1a8308 +long
{
    esp -= 4;
    goto loc_1a8308;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3304 bytes
loc_1a6fe8: // 0160:1a6fe8
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, edi);
    goto loc_1a62fa;
    // gap 4879 bytes
loc_1a8308: // 0160:1a8308
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a62fa;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a8347;
    sub_1a614a();
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1a8347: // 0160:1a8347
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a62fa;
    esi = 0;
    edi = 0x00000005;
    goto loc_1a6fe8;
}
void sub_1a8399() // 0160:1a8399 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (eax > 0x0000000a)
        goto loc_1a8521;
    eax <<= 2;
    switch (eax/4)
    {
        case 0: goto loc_1a83b0;
        case 1: goto loc_1a83ce;
        case 2: goto loc_1a83ec;
        case 3: goto loc_1a840a;
        case 4: goto loc_1a8495;
        case 5: goto loc_1a84b1;
        case 6: goto loc_1a84dd;
        case 7: goto loc_1a84e8;
        case 8: goto loc_1a8521;
        case 9: goto loc_1a84f1;
        case 10: goto loc_1a84fa;
        default:
            printf("unhandled: %x\n", eax/4);
            stop("ind 0160:1a83a9");
    }
loc_1a83b0: // 0160:1a83b0
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 1980776);
    edx = memoryAGet32(ds, 0x1e3650);
loc_1a83c1: // 0160:1a83c1
    eax += 0x0000001b;
    sub_1a617f();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a83ce: // 0160:1a83ce
    ecx = memoryAGet32(ds, 0x1e3654);
    if ((int32_t)ecx >= (int32_t)0x00000023)
        goto loc_1a8503;
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 1980776);
    edx = ecx;
    goto loc_1a83c1;
loc_1a83ec: // 0160:1a83ec
    ebx = memoryAGet32(ds, 0x1e3658);
    if ((int32_t)ebx >= (int32_t)0x00000046)
        goto loc_1a8503;
    edx = ebx;
    eax = memoryAGet32(ds, eax + 1980776);
    ebx = 0x00000003;
    goto loc_1a83c1;
loc_1a840a: // 0160:1a840a
    if (memoryAGet32(ds, 0x1e3648) == 0x00000000)
        goto loc_1a8454;
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 24, 0x52);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 25, 0x41);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 26, 0x4e);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 27, 0x44);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 28, 0x4f);
    eax = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, eax + 29, 0x4d);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8454: // 0160:1a8454
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 24, 0x20);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 25, 0x54);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 26, 0x45);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 27, 0x41);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 28, 0x4d);
    eax = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, eax + 29, 0x53);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a8495: // 0160:1a8495
    ebp = memoryAGet32(ds, 0x1e36d4);
    if (!ebp)
        goto loc_1a8503;
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 1980776);
    edx = ebp;
    goto loc_1a83c1;
loc_1a84b1: // 0160:1a84b1
    if (memoryAGet32(ds, 0x1e3644) == 0x00000000)
        goto loc_1a8503;
loc_1a84ba: // 0160:1a84ba
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 27, 0x20);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 28, 0x4f);
    eax = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, eax + 29, 0x4e);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a84dd: // 0160:1a84dd
    flags.zero = memoryAGet32(ds, 0x1e364c) == 0x00000000;
loc_1a84e4: // 0160:1a84e4
    if (!flags.zero)
        goto loc_1a84ba;
    goto loc_1a8503;
loc_1a84e8: // 0160:1a84e8
    flags.zero = memoryAGet32(ds, 0x1e3660) == 0x00000000;
    goto loc_1a84e4;
loc_1a84f1: // 0160:1a84f1
    flags.zero = memoryAGet32(ds, 0x1e36d8) == 0x00000000;
    goto loc_1a84e4;
loc_1a84fa: // 0160:1a84fa
    if (memoryAGet32(ds, 0x1e36dc) != 0x00000000)
        goto loc_1a84ba;
loc_1a8503: // 0160:1a8503
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 27, 0x4f);
    edx = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, edx + 28, 0x46);
    eax = memoryAGet32(ds, eax + 1980776);
    memoryASet(ds, eax + 29, 0x46);
loc_1a8521: // 0160:1a8521
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8526() // 0160:1a8526 +long
{
    esp -= 4;
    goto loc_1a8526;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5936 bytes
loc_1a7a30: // 0160:1a7a30
    eax = 0x000000a0;
    sub_1a5c92();
    goto loc_1a62fa;
    // gap 2791 bytes
loc_1a8526: // 0160:1a8526
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_1ab3aa();
    ebx = 0x001d5f55;
    eax = 0x000000a0;
    edx = 0;
    edi = 0xfffffff4;
    sub_1a5b1b();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a8552: // 0160:1a8552
    eax = ecx;
    sub_1a8399();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1a8566;
    eax = ecx * 0x0000000c;
    eax += 0x0000000f;
    goto loc_1a8572;
loc_1a8566: // 0160:1a8566
    if (ecx != 0x00000008)
        goto loc_1a856f;
    eax = 0x0000008c;
    goto loc_1a8572;
loc_1a856f: // 0160:1a856f
    eax = edi + 15;
loc_1a8572: // 0160:1a8572
    edx = eax;
    edi += 0x0000000c;
    ebx = memoryAGet32(ds, esi + 1980776);
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1a5c92();
    if ((int32_t)ecx < (int32_t)0x0000000b)
        goto loc_1a8552;
    ebx = 0x001d5e1f;
    edx = 0x0000009d;
    goto loc_1a7a30;
}
void sub_1a859f() // 0160:1a859f +long
{
    esp -= 4;
    goto loc_1a859f;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 4613 bytes
loc_1a859f: // 0160:1a859f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x000000a3;
    ecx = 0x00000005;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a8526();
    goto loc_1a7373;
}
void sub_1a8605() // 0160:1a8605 +long
{
    esp -= 4;
    goto loc_1a8605;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1a67d7: // 0160:1a67d7
    memoryASet32(ds, 0x1e3773, edx);
    goto loc_1a62f9;
    // gap 7715 bytes
loc_1a8605: // 0160:1a8605
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1a8622;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1a67d7;
loc_1a8622: // 0160:1a8622
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a8632;
    esi = 0x00000001;
    goto loc_1a8637;
loc_1a8632: // 0160:1a8632
    esi = 0xffffffff;
loc_1a8637: // 0160:1a8637
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e3773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a8653;
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, edx);
loc_1a8653: // 0160:1a8653
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_1a87e0;
    ebp = esi;
    edi = esi;
    ebx = 0;
    ecx = 0;
    edi <<= 2;
    ebp <<= 2;
    edi += esi;
    ebp += esi;
    edi += edi;
loc_1a8670: // 0160:1a8670
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_1a87d3;
    if (ebx > 0x0000000a)
        goto loc_1a87c4;
    switch (ecx/4)
    {
        case 0: goto loc_1a869b;
        case 1: goto loc_1a86d4;
        case 2: goto loc_1a870b;
        case 3: goto loc_1a874d;
        case 4: goto loc_1a8759;
        case 5: goto loc_1a8785;
        case 6: goto loc_1a878e;
        case 7: goto loc_1a8797;
        case 8: goto loc_1a87a0;
        case 9: goto loc_1a87b4;
        case 10: goto loc_1a87bd;
        default:
            printf("unhandled: %x\n", ecx/4);
            stop("ind 0160:1a8694");
    }
loc_1a869b: // 0160:1a869b
    edx = memoryAGet32(ds, 0x1e3650);
    edx += esi;
    memoryASet32(ds, 0x1e3650, edx);
    if ((int32_t)edx >= (int32_t)0x00000001)
        goto loc_1a86b8;
    memoryASet32(ds, 0x1e3650, 0x00000002);
loc_1a86b8: // 0160:1a86b8
    if ((int32_t)memoryAGet32(ds, 0x1e3650) <= (int32_t)0x00000002)
        goto loc_1a87c4;
    memoryASet32(ds, 0x1e3650, 0x00000001);
    goto loc_1a87c4;
loc_1a86d4: // 0160:1a86d4
    eax = memoryAGet32(ds, 0x1e3654);
    eax += ebp;
    memoryASet32(ds, 0x1e3654, eax);
    if ((int32_t)eax >= (int32_t)0x00000005)
        goto loc_1a86ef;
    memoryASet32(ds, 0x1e3654, 0x00000023);
loc_1a86ef: // 0160:1a86ef
    if ((int32_t)memoryAGet32(ds, 0x1e3654) <= (int32_t)0x00000023)
        goto loc_1a87c4;
    memoryASet32(ds, 0x1e3654, 0x00000005);
    goto loc_1a87c4;
loc_1a870b: // 0160:1a870b
    edx = memoryAGet32(ds, 0x1e3658);
    edx += edi;
    memoryASet32(ds, 0x1e3658, edx);
    if ((int32_t)edx >= (int32_t)0x0000000a)
        goto loc_1a8728;
    memoryASet32(ds, 0x1e3658, 0x00000046);
loc_1a8728: // 0160:1a8728
    if ((int32_t)memoryAGet32(ds, 0x1e3658) <= (int32_t)0x00000046)
        goto loc_1a873b;
    memoryASet32(ds, 0x1e3658, 0x0000000a);
loc_1a873b: // 0160:1a873b
    eax = memoryAGet32(ds, 0x1e3658);
    eax = eax * 0x00000032;
    memoryASet32(ds, 0x3a1cc4, eax);
    goto loc_1a87c4;
loc_1a874d: // 0160:1a874d
    memoryASet(ds, 0x1e3648, memoryAGet(ds, 0x1e3648) ^ 0x01);
    goto loc_1a87c4;
loc_1a8759: // 0160:1a8759
    eax = memoryAGet32(ds, 0x1e36d4);
    eax += esi;
    memoryASet32(ds, 0x1e36d4, eax);
    if ((int32_t)eax >= 0)
        goto loc_1a8773;
    memoryASet32(ds, 0x1e36d4, 0x00000008);
loc_1a8773: // 0160:1a8773
    if ((int32_t)memoryAGet32(ds, 0x1e36d4) <= (int32_t)0x00000008)
        goto loc_1a87c4;
    eax = 0;
    memoryASet32(ds, 0x1e36d4, eax);
    goto loc_1a87c4;
loc_1a8785: // 0160:1a8785
    memoryASet(ds, 0x1e3644, memoryAGet(ds, 0x1e3644) ^ 0x01);
    goto loc_1a87c4;
loc_1a878e: // 0160:1a878e
    memoryASet(ds, 0x1e364c, memoryAGet(ds, 0x1e364c) ^ 0x01);
    goto loc_1a87c4;
loc_1a8797: // 0160:1a8797
    memoryASet(ds, 0x1e3660, memoryAGet(ds, 0x1e3660) ^ 0x01);
    goto loc_1a87c4;
loc_1a87a0: // 0160:1a87a0
    eax ^= edx;
    edx = 0x00000008;
    memoryASet32(ds, 0x1e371c, eax);
    memoryASet32(ds, 0x1e376f, edx);
    goto loc_1a87c4;
loc_1a87b4: // 0160:1a87b4
    memoryASet(ds, 0x1e36d8, memoryAGet(ds, 0x1e36d8) ^ 0x01);
    goto loc_1a87c4;
loc_1a87bd: // 0160:1a87bd
    memoryASet(ds, 0x1e36dc, memoryAGet(ds, 0x1e36dc) ^ 0x01);
loc_1a87c4: // 0160:1a87c4
    eax = ebx;
    sub_1a8399();
    eax = ebx + 1;
    sub_1a5ef8();
loc_1a87d3: // 0160:1a87d3
    ebx++;
    ecx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x0000000b)
        goto loc_1a8670;
loc_1a87e0: // 0160:1a87e0
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x0000000c)
        goto loc_1a62f9;
    ebx = 0;
    ecx = 0x00000004;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
    goto loc_1a62f9;
}
void sub_1a8811() // 0160:1a8811 +long
{
    esp -= 4;
    goto loc_1a8811;
loc_1a70e1: // 0160:1a70e1
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5911 bytes
loc_1a8811: // 0160:1a8811
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    ebx = 0x001d5f63;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000030;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x0000000c;
    ecx = 0;
    sub_1a5b1b();
loc_1a883d: // 0160:1a883d
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 1980712);
    sub_1a5c92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_1a883d;
    goto loc_1a70e1;
}
void sub_1a885f() // 0160:1a885f +long
{
    esp -= 4;
    goto loc_1a885f;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 5317 bytes
loc_1a885f: // 0160:1a885f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000004;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a8811();
    goto loc_1a7373;
}
void sub_1a8899() // 0160:1a8899 +long
{
    esp -= 4;
    goto loc_1a8899;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4538 bytes
loc_1a74ba: // 0160:1a74ba
    memoryASet32(ds, 0x1e371c, edi);
    memoryASet32(ds, 0x1e376f, ebp);
    goto loc_1a62f9;
    // gap 5070 bytes
loc_1a8899: // 0160:1a8899
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a88d4;
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1a88d4: // 0160:1a88d4
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a88fc;
    esi = 0;
    edi = 0x00000006;
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, edi);
loc_1a88fc: // 0160:1a88fc
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000003)
        goto loc_1a8923;
    ebp = 0;
    eax = 0x0000000c;
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, eax);
loc_1a8923: // 0160:1a8923
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000004)
        goto loc_1a894b;
    edx = 0;
    ebx = 0x00000007;
    memoryASet32(ds, 0x1e371c, edx);
    memoryASet32(ds, 0x1e376f, ebx);
loc_1a894b: // 0160:1a894b
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000005)
        goto loc_1a8973;
    ecx = 0;
    esi = 0x00000009;
    memoryASet32(ds, 0x1e371c, ecx);
    memoryASet32(ds, 0x1e376f, esi);
loc_1a8973: // 0160:1a8973
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000006)
        goto loc_1a62f9;
    edi = 0;
    ebp = 0x00000001;
    goto loc_1a74ba;
}
void sub_1a8998() // 0160:1a8998 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1a89fa;
    if (memoryAGet32(ds, 0x1e000c) != 0x00000000)
        goto loc_1a89fa;
    if (memoryAGet32(ds, 0x1e12f2) != 0x00000000)
        goto loc_1a89fa;
    if (memoryAGet32(ds, 0x3a1cc8) == 0x00000000)
        goto loc_1a89fa;
    edi = memoryAGet32(ds, 0x1e3998);
    if ((int32_t)edi < 0)
        goto loc_1a89fa;
    if ((int32_t)memoryAGet32(ds, 0x1e3654) >= (int32_t)0x00000023)
        goto loc_1a89e0;
    if (!edi)
        goto loc_1a89e0;
    edx = edi + -1;
    memoryASet32(ds, 0x1e3998, edx);
loc_1a89e0: // 0160:1a89e0
    ebx = memoryAGet32(ds, 0x1e399c);
    ecx = memoryAGet32(ds, 0x1e3994);
    ebx++;
    ecx++;
    memoryASet32(ds, 0x1e399c, ebx);
    memoryASet32(ds, 0x1e3994, ecx);
loc_1a89fa: // 0160:1a89fa
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a89ff() // 0160:1a89ff +long
{
    esp -= 4;
    goto loc_1a89ff;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9983 bytes
loc_1a89ff: // 0160:1a89ff
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_1a8a4a;
    ebx = 0x00001770;
    ecx = memoryAGet32(ds, 0x1e00a8);
    memoryASet32(ds, 0x1e3998, ebx);
    if (ecx)
        goto loc_1a8a5a;
    edx = 0x00000005;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1a8a5a;
    esi = 0x000036b0;
    edi = 0x00000001;
    memoryASet32(ds, 0x1e3998, esi);
    memoryASet32(ds, 0x1e00a8, edi);
    goto loc_1a8a5a;
loc_1a8a4a: // 0160:1a8a4a
    eax = memoryAGet32(ds, 0x1e3654);
    eax = eax * 0x00000bb8;
    memoryASet32(ds, 0x1e3998, eax);
loc_1a8a5a: // 0160:1a8a5a
    if (memoryAGet32(ds, 0x1e380a) == 0x00000000)
        goto loc_1a8a6d;
    memoryASet32(ds, 0x1e3998, 0x00003a98);
loc_1a8a6d: // 0160:1a8a6d
    ebx = memoryAGet32(ds, 0x1e3998);
    edx = 0;
    ebx += 0x000000fa;
    memoryASet32(ds, 0x1e399c, edx);
    memoryASet32(ds, 0x1e3998, ebx);
    goto loc_1a62fa;
}
void sub_1a8a8c() // 0160:1a8a8c +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x1e3994, edx);
    sub_1a89ff();
    edx = pop32();
    esp += 4;
}
void sub_1a8a9c() // 0160:1a8a9c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1e3998);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al = !eax;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x1e39a0, eax);
    eax = memoryAGet32(ds, 0x1e3998);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8acd() // 0160:1a8acd +long
{
    esp -= 4;
    goto loc_1a8acd;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10189 bytes
loc_1a8acd: // 0160:1a8acd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x1e399c);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ecx = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(ecx);
    esi = 0x0000003c;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x00000002;
    eax = 0x001e39d4;
    esi = edx;
    edx = ecx;
    sub_1a617f();
    ebx = 0;
    bl = memoryAGet(ds, 0x1e39d4);
    if (ebx != 0x00000020)
        goto loc_1a8b2a;
    memoryASet(ds, 0x1e39d4, 0x30);
loc_1a8b2a: // 0160:1a8b2a
    ebx = 0x00000002;
    eax = 0x001e39d7;
    edx = esi;
    sub_1a617f();
    ebx = 0;
    bl = memoryAGet(ds, 0x1e39d7);
    if (ebx != 0x00000020)
        goto loc_1a8b4f;
    memoryASet(ds, 0x1e39d7, 0x30);
loc_1a8b4f: // 0160:1a8b4f
    ebx = 0x001e39c7;
    eax = 0x000000a0;
    edx = edi;
    sub_1a5b1b();
    goto loc_1a62fa;
}
void sub_1a8b65() // 0160:1a8b65 +long
{
    esp -= 4;
    goto loc_1a8b65;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10331 bytes
loc_1a8b5b: // 0160:1a8b5b
    sub_1a5b1b();
    goto loc_1a62fa;
loc_1a8b65: // 0160:1a8b65
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e3994);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    esi = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(esi);
    edi = 0x0000003c;
    esi = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = 0x00000002;
    eax = 0x001e39e4;
    edi = edx;
    edx = esi;
    sub_1a617f();
    edx = 0;
    dl = memoryAGet(ds, 0x1e39e4);
    if (edx != 0x00000020)
        goto loc_1a8bc2;
    memoryASet(ds, 0x1e39e4, 0x30);
loc_1a8bc2: // 0160:1a8bc2
    ebx = 0x00000002;
    eax = 0x001e39e7;
    edx = edi;
    sub_1a617f();
    edx = 0;
    dl = memoryAGet(ds, 0x1e39e7);
    if (edx != 0x00000020)
        goto loc_1a8be7;
    memoryASet(ds, 0x1e39e7, 0x30);
loc_1a8be7: // 0160:1a8be7
    ebx = 0x00000002;
    eax = 0x001e39eb;
    edx = memoryAGet32(ds, 0x1e39da);
    sub_1a617f();
    edx = 0;
    dl = memoryAGet(ds, 0x1e39eb);
    if (edx != 0x00000020)
        goto loc_1a8c10;
    memoryASet(ds, 0x1e39eb, 0x30);
loc_1a8c10: // 0160:1a8c10
    if ((int32_t)memoryAGet32(ds, 0x1e39da) <= (int32_t)0x00000001)
        goto loc_1a8c22;
    memoryASet(ds, 0x1e39f3, 0x53);
    goto loc_1a8c29;
loc_1a8c22: // 0160:1a8c22
    memoryASet(ds, 0x1e39f3, 0x20);
loc_1a8c29: // 0160:1a8c29
    ebx = 0x001e39de;
    eax = 0x000000a0;
    edx = ecx;
    goto loc_1a8b5b;
}
void sub_1a8c3a() // 0160:1a8c3a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1ab3aa();
    edx = 0;
    eax = 0x00000030;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x001d5f71;
    sub_1a5ae0();
    if (memoryAGet32(ds, 0x1e39a0) == 0x00000000)
        goto loc_1a8c70;
    edx = 0x001d5f7d;
    eax = 0x0000003c;
    sub_1a5ae0();
loc_1a8c70: // 0160:1a8c70
    eax = 0x00000054;
    sub_1a8acd();
    if (memoryAGet32(ds, 0x1e3660) == 0x00000000)
        goto loc_1a8c93;
    if (memoryAGet32(ds, 0x1e380a) != 0x00000000)
        goto loc_1a8c93;
    ebx = 0x001d5f8e;
    goto loc_1a8c98;
loc_1a8c93: // 0160:1a8c93
    ebx = 0x001d5fa0;
loc_1a8c98: // 0160:1a8c98
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8caa() // 0160:1a8caa +long
{
    esp -= 4;
    goto loc_1a8caa;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10666 bytes
loc_1a8caa: // 0160:1a8caa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000014;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a8c3a();
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    memoryASet32(ds, 0x3a1cc8, ebp);
    ebx = 0;
    memoryASet32(ds, 0x3a1f00, ebp);
    memoryASet32(ds, 0x3a1e78, ebx);
    goto loc_1a62f9;
}
void sub_1a8d1a() // 0160:1a8d1a +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a8dc5;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a8dc5;
    if (memoryAGet32(ds, 0x1e3660) == 0x00000000)
        goto loc_1a8da2;
    ecx = memoryAGet32(ds, 0x1e380a);
    if (ecx)
        goto loc_1a8da2;
    edx = memoryAGet32(ds, 0x1e399c);
    memoryASet32(ds, 0x1e0014, eax);
    memoryASet32(ds, 0x1e380a, eax);
    memoryASet32(ds, 0x3a1cc8, eax);
    sub_1a89ff();
    eax = 0xfffffffd;
    esi = memoryAGet32(ds, 0x1e399c);
    memoryASet32(ds, 0x1e39a0, ecx);
    memoryASet32(ds, 0x1e371c, ecx);
    esi += edx;
    memoryASet32(ds, 0x1e376f, eax);
    memoryASet32(ds, 0x1e399c, esi);
    sub_19f178();
    sub_1a5793();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1a8da2: // 0160:1a8da2
    esi = 0;
    eax = 0xfffffffe;
    memoryASet32(ds, 0x3a1cc8, esi);
    memoryASet32(ds, 0x1e3d20, esi);
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, eax);
    sub_1a5738();
loc_1a8dc5: // 0160:1a8dc5
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1a8dc9() // 0160:1a8dc9 +long
{
    esp -= 4;
    goto loc_1a8dc9;
loc_1a8c98: // 0160:1a8c98
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 287 bytes
loc_1a8dc9: // 0160:1a8dc9
    push32(ebx);
    push32(edx);
    sub_1ab3aa();
    ebx = 0x001d5faf;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1a5b1b();
    ebx = 0x001d5f8e;
    edx = 0;
    eax = 0x000000a0;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x00000030;
    sub_1a5c92();
    ebx = 0x001d5fbd;
    edx = 0x00000048;
    eax = 0x000000a0;
    sub_1a5c92();
    ebx = 0x001d5fcd;
    edx = 0x00000060;
    eax = 0x000000a0;
    sub_1a5c92();
    ebx = 0x001d5fd9;
    goto loc_1a8c98;
}
void sub_1a8e32() // 0160:1a8e32 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x000000b0;
    eax = memoryAGet32(ds, 0x1e007c);
    ebx = 0;
    memoryASet32(ds, 0x1e39f6, eax);
    eax = memoryAGet32(ds, 0x1e0078);
    memoryASet32(ds, 0x1e007c, edx);
    memoryASet32(ds, 0x1e39fa, eax);
    eax = memoryAGet32(ds, 0x1e0074);
    memoryASet32(ds, 0x1e0078, ebx);
    memoryASet32(ds, 0x1e39fe, eax);
    eax = memoryAGet32(ds, 0x1e0098);
    memoryASet32(ds, 0x1e0074, ebx);
    memoryASet32(ds, 0x1e3a02, eax);
    eax = memoryAGet32(ds, 0x1e0084);
    memoryASet32(ds, 0x1e0098, ebx);
    memoryASet32(ds, 0x1e3a06, eax);
    memoryASet32(ds, 0x1e0084, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a8e8e() // 0160:1a8e8e +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x1e39f6);
    memoryASet32(ds, 0x1e007c, eax);
    eax = memoryAGet32(ds, 0x1e39fa);
    memoryASet32(ds, 0x1e0078, eax);
    eax = memoryAGet32(ds, 0x1e39fe);
    memoryASet32(ds, 0x1e0074, eax);
    eax = memoryAGet32(ds, 0x1e3a02);
    memoryASet32(ds, 0x1e0098, eax);
    eax = memoryAGet32(ds, 0x1e3a06);
    memoryASet32(ds, 0x1e0084, eax);
    esp += 4;
}
void sub_1a8ec1() // 0160:1a8ec1 +long
{
    esp -= 4;
    goto loc_1a8ec1;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3198 bytes
loc_1a6f7e: // 0160:1a6f7e
    memoryASet32(ds, 0x1e371c, edx);
    goto loc_1a738b;
    // gap 1026 bytes
loc_1a738b: // 0160:1a738b
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 6951 bytes
loc_1a8ec1: // 0160:1a8ec1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    ebx = 0x000000a0;
    ecx = 0x00000066;
    esi = 0x0000001e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    memoryASet32(ds, 0x1e12f2, edx);
    sub_1a8e32();
    memoryASet32(ds, 0x1e36ec, ebx);
    memoryASet32(ds, 0x1e36f0, ecx);
    sub_1a8dc9();
    memoryASet32(ds, 0x1e376f, esi);
    memoryASet32(ds, 0x1e3714, edi);
    memoryASet32(ds, 0x1e3718, ebp);
    goto loc_1a6f7e;
}
void sub_1a8f18() // 0160:1a8f18 +long
{
    esp -= 4;
    goto loc_1a8f18;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11288 bytes
loc_1a8f18: // 0160:1a8f18
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a8fc8;
    sub_1bfd00();
    sub_19a556();
    ebx = 0x00000032;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, 0x1e3a0a);
    edx = memoryAGet32(ds, 0x1e399c);
    esi = 0;
    memoryASet32(ds, 0x1e00c0, ebx);
    memoryASet32(ds, 0x1e0014, ecx);
    memoryASet32(ds, 0x3a1cd0, eax);
    memoryASet32(ds, 0x1e12f2, esi);
    memoryASet32(ds, 0x1e380a, ecx);
    memoryASet32(ds, 0x3a1cc8, ecx);
    sub_1a89ff();
    eax = memoryAGet32(ds, 0x1e399c);
    memoryASet32(ds, 0x1e39a0, esi);
    memoryASet32(ds, 0x1e371c, esi);
    eax += edx;
    esi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x1e399c, eax);
    eax = esi * 0x000000ac;
    edi = ecx;
    memoryASet32(ds, 0x1e376f, 0xfffffffd);
    memoryASet32(ds, eax + 3803602, edi);
    sub_1a5793();
loc_1a8fc8: // 0160:1a8fc8
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a9001;
    ebp = 0;
    ebx = 0xfffffffe;
    memoryASet32(ds, 0x1e12f2, ebp);
    memoryASet32(ds, 0x1e3d20, ebp);
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, ebx);
    sub_1a5738();
loc_1a9001: // 0160:1a9001
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000003)
        goto loc_1a9074;
    sub_1bfd00();
    sub_19a556();
    eax = memoryAGet32(ds, 0x1e3a0a);
    memoryASet32(ds, 0x3a1cd0, eax);
    eax = 0xfffffffd;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x1e376f, eax);
    eax = edx * 0x000000ac;
    ecx = 0x00000032;
    edi = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x1e00c0, ecx);
    memoryASet32(ds, 0x1e12f2, esi);
    memoryASet32(ds, 0x3a1cc8, edi);
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, eax + 3803602, edi);
    sub_1a8e8e();
    sub_1a5793();
loc_1a9074: // 0160:1a9074
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000004)
        goto loc_1a62f9;
    ecx = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x3a1c46, ecx);
    memoryASet32(ds, 0x3a1cc8, esi);
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e12f2, esi);
    memoryASet32(ds, 0x1e15fc, esi);
    memoryASet32(ds, 0x1e3ab4, esi);
    memoryASet32(ds, 0x1e3aac, esi);
    memoryASet32(ds, 0x1e3ab8, esi);
    goto loc_1a62f9;
}
void sub_1a90cf() // 0160:1a90cf +long
{
    esp -= 4;
    goto loc_1a90cf;
loc_1a5ada: // 0160:1a5ada
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13807 bytes
loc_1a90cf: // 0160:1a90cf
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    push32(eax);
    ebp = edx;
    ecx = 0x00000006;
    edi = esp + 4;
    esi = 0x001a55bd;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = 0x00000006;
    edi = esp + 28;
    esi = 0x001a55d5;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (edx != 0x00000048)
        goto loc_1a9105;
    edi = esp + 28;
    goto loc_1a9109;
loc_1a9105: // 0160:1a9105
    edi = esp + 4;
loc_1a9109: // 0160:1a9109
    edx = 0;
    esi = 0;
    memoryASet32(ds, esp + 52, edx);
loc_1a9111: // 0160:1a9111
    cl = memoryAGet(ds, esp + 52);
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp);
    eax <<= cl;
    if (!(eax & edx))
        goto loc_1a9154;
    ecx = memoryAGet32(ds, esi + 1980298);
    if ((int32_t)ecx < 0)
        goto loc_1a9154;
    ecx = ecx * 0x000000aa;
    edx = edi;
    eax = ecx;
    ecx += 0x00000008;
loc_1a913a: // 0160:1a913a
    bl = memoryAGet(ds, eax + 1975928);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1a913a;
    edx = edi;
    eax = ebp;
    sub_1a5ae0();
    ebp += 0x0000000c;
loc_1a9154: // 0160:1a9154
    ebx = memoryAGet32(ds, esp + 52);
    ebx++;
    esi += 0x00000004;
    memoryASet32(ds, esp + 52, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1a9111;
    eax = ebp;
    esp += 0x00000038;
    goto loc_1a5ada;
}
void sub_1a916f() // 0160:1a916f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_1ab3aa();
    ebx = 0x00000002;
    edx = 0;
    eax = 0x001e39c4;
    memoryASet32(ds, 0x3be918, edx);
    edx = memoryAGet32(ds, 0x1e39da);
    sub_1a617f();
    edx = 0;
    dl = memoryAGet(ds, 0x1e39c4);
    if (edx != 0x00000020)
        goto loc_1a91aa;
    memoryASet(ds, 0x1e39c4, 0x30);
loc_1a91aa: // 0160:1a91aa
    ebx = 0x00000002;
    eax = 0x001e39aa;
    edx = memoryAGet32(ds, 0x1e39da);
    sub_1a617f();
    edx = 0;
    dl = memoryAGet(ds, 0x1e39aa);
    if (edx != 0x00000020)
        goto loc_1a91d3;
    memoryASet(ds, 0x1e39aa, 0x30);
loc_1a91d3: // 0160:1a91d3
    if (memoryAGet32(ds, 0x1e39a0) == 0x00000000)
        goto loc_1a91e3;
    edx = 0x001e39a4;
    goto loc_1a91e8;
loc_1a91e3: // 0160:1a91e3
    edx = 0x001e39be;
loc_1a91e8: // 0160:1a91e8
    eax = 0x00000018;
    sub_1a5ae0();
    eax = 0x00000030;
    edx = 0x00000054;
    sub_1a8acd();
    eax = ecx;
    ebx = 0x001d5fa0;
    sub_1a90cf();
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9220() // 0160:1a9220 +long
{
    esp -= 4;
    goto loc_1a9220;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 7814 bytes
loc_1a9220: // 0160:1a9220
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000015;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a916f();
    goto loc_1a7373;
}
void sub_1a925a() // 0160:1a925a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a9299;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a9299;
    ebx = 0;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x1e3d20, ebx);
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, esi);
    sub_1a5738();
loc_1a9299: // 0160:1a9299
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a929d() // 0160:1a929d +long
{
    esp -= 4;
    goto loc_1a929d;
loc_1a920d: // 0160:1a920d
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1a5c92();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 125 bytes
loc_1a929d: // 0160:1a929d
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    sub_1ab3aa();
    edx = 0;
    ecx = memoryAGet32(ds, 0x1e39a0);
    memoryASet32(ds, 0x3be918, edx);
    if (!ecx)
        goto loc_1a92c9;
    if ((int32_t)memoryAGet32(ds, 0x1e3a0e) <= (int32_t)0x00000001)
        goto loc_1a92c9;
    edx = 0x001d5feb;
    goto loc_1a92ce;
loc_1a92c9: // 0160:1a92c9
    edx = 0x001d6007;
loc_1a92ce: // 0160:1a92ce
    eax = 0;
    sub_1a5ae0();
    eax = 0x00000024;
    edx = 0x00000048;
    sub_1a8b65();
    eax = ebx;
    sub_1a90cf();
    ebx = 0x001d6014;
    goto loc_1a920d;
}
void sub_1a92f5() // 0160:1a92f5 +long
{
    esp -= 4;
    goto loc_1a92f5;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 8027 bytes
loc_1a92f5: // 0160:1a92f5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000016;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a929d();
    goto loc_1a7373;
}
void sub_1a932f() // 0160:1a932f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a9363;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a9363;
    ebx = 0;
    ecx = 0x00000017;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1a9363: // 0160:1a9363
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9399() // 0160:1a9399 +long
{
    esp -= 4;
    goto loc_1a9399;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12441 bytes
loc_1a9399: // 0160:1a9399
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000084;
    edi = 0x7fffffff;
    esi = 0x001a55ed;
    edx = 0;
    ebx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 116, edx);
    memoryASet32(ds, esp + 112, edx);
    memoryASet32(ds, esp + 104, edx);
    memoryASet32(ds, esp + 108, edi);
    memoryASet32(ds, esp + 84, edx);
    edi = esp + 20;
    memoryASet32(ds, esp + 72, edx);
    memoryASet32(ds, esp + 80, edx);
    movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, esp + 76, edx);
    eax = memoryAGet32(ds, 0x1e0010);
    esi = 0;
    eax <<= 2;
    edi = 0;
    memoryASet32(ds, esp + 44, eax);
    goto loc_1a9531;
loc_1a93f2: // 0160:1a93f2
    if (memoryAGet32(ds, ebx + 3842572) == 0x00000000)
        goto loc_1a9527;
    if (memoryAGet32(ds, ebx + 3842592) == 0x00000000)
        goto loc_1a9527;
    eax = memoryAGet32(ds, ebx + 3842584);
    eax -= memoryAGet32(ds, ebx + 3842580);
    eax <<= 16;
    eax += memoryAGet32(ds, ebx + 3842584);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 116))
        goto loc_1a942f;
    memoryASet32(ds, esp + 84, esi);
    memoryASet32(ds, esp + 116, eax);
loc_1a942f: // 0160:1a942f
    eax = 0x00000001;
    edx = memoryAGet32(ds, edi + 3803594);
    eax -= edx;
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, ebx + 3842584);
    edx = memoryAGet32(ds, esp + 32);
    eax <<= 8;
    eax |= edx;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, esp + 108))
        goto loc_1a945d;
    memoryASet32(ds, esp + 76, esi);
    memoryASet32(ds, esp + 108, eax);
loc_1a945d: // 0160:1a945d
    eax = memoryAGet32(ds, ebx + 3842576);
    edx = memoryAGet32(ds, ebx + 3842584);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 112))
        goto loc_1a947c;
    memoryASet32(ds, esp + 72, esi);
    memoryASet32(ds, esp + 112, eax);
loc_1a947c: // 0160:1a947c
    eax = memoryAGet32(ds, ebx + 3842552);
    edx = memoryAGet32(ds, ebx + 3842584);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 104))
        goto loc_1a949b;
    memoryASet32(ds, esp + 80, esi);
    memoryASet32(ds, esp + 104, eax);
loc_1a949b: // 0160:1a949b
    eax = memoryAGet32(ds, ebx + 3842556);
    edx = 0x0000ffff;
    eax <<= 16;
    edx -= memoryAGet32(ds, ebx + 3842584);
    eax += edx;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_1a94b7;
    ebp = eax;
loc_1a94b7: // 0160:1a94b7
    if (memoryAGet32(ds, 0x1e3640) != 0x00000000)
        goto loc_1a9527;
    if (memoryAGet32(ds, 0x1e3d20) != 0x00000000)
        goto loc_1a9527;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = memoryAGet32(ds, eax * 4 + 0x1e378a) * 0x000000aa;
    memoryASet32(ds, esp + 128, 0x00000004);
    memoryASet32(ds, esp + 32, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 128));
    eax = memoryAGet32(ds, esp + 32);
    edx <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, ebx + 3842588);
    memoryASet32(ds, eax + 1976042, memoryAGet32(ds, eax + 1976042) + edx);
    edx = memoryAGet32(ds, ebx + 3842552);
    memoryASet32(ds, eax + 1976022, memoryAGet32(ds, eax + 1976022) + edx);
    memoryASet32(ds, eax + 1976082, memoryAGet32(ds, eax + 1976082) + 1);
loc_1a9527: // 0160:1a9527
    edi += 0x000000ac;
    ebx += 0x00000030;
    esi++;
loc_1a9531: // 0160:1a9531
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_1a93f2;
    edx = 0;
    memoryASet32(ds, esp + 120, edx);
    edx = memoryAGet32(ds, esp + 84);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 52, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 64, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 36, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    memoryASet32(ds, esp + 68, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax <<= 4;
    ebx = 0x00000018;
    memoryASet32(ds, esp + 60, eax);
    eax = memoryAGet32(ds, esp + 72);
    edi = 0x00000024;
    eax <<= 4;
    esi = 0;
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 92, ebx);
    eax <<= 4;
    memoryASet32(ds, esp + 96, esi);
    memoryASet32(ds, esp + 40, eax);
    eax = edx;
    memoryASet32(ds, esp + 88, edi);
    eax <<= 4;
    memoryASet32(ds, esp + 100, esi);
    memoryASet32(ds, esp + 56, eax);
loc_1a95cf: // 0160:1a95cf
    edx = memoryAGet32(ds, esp + 96);
    edi = memoryAGet32(ds, esp + 56);
    ebx = memoryAGet32(ds, esp + 40);
    esi = memoryAGet32(ds, esp + 48);
    ebp = 0;
    eax = 0;
    memoryASet32(ds, esp + 124, ebp);
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp + 60);
loc_1a95ef: // 0160:1a95ef
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_1a9648;
    ebp = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, ebp + 1741673)); return; // 0160:1a95fa;
    // gap 71 bytes
loc_1a9648: // 0160:1a9648
    if (ecx == 0x00000020)
        goto loc_1a9651;
    memoryASet32(ds, esp + 124, eax);
loc_1a9651: // 0160:1a9651
    edi++;
    ebx++;
    eax++;
    esi++;
    edx++;
    memoryASet(ds, esp + eax + -1, cl);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1a95ef;
    eax = memoryAGet32(ds, esp + 124);
    dl = 0;
    memoryASet(ds, esp + eax + 1, dl);
    eax = 0;
    edx = memoryAGet32(ds, esp + 120);
    memoryASet32(ds, esp + 124, eax);
    if (edx > 0x00000003)
        goto loc_1a971a;
    eax = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, eax + 1741689)); return; // 0160:1a9680;
    // gap 147 bytes
loc_1a971a: // 0160:1a971a
    if (memoryAGet32(ds, esp + 124) == 0x00000000)
        goto loc_1a97a7;
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_1a975e;
    eax = memoryAGet32(ds, esp + 92);
    eax += memoryAGet32(ds, esp + 100);
    edx = memoryAGet32(ds, esp + 96);
    indirectJump(cs, memoryAGet32(cs, edx + 1741705)); return; // 0160:1a9738;
    // gap 31 bytes
loc_1a975e: // 0160:1a975e
    esi = memoryAGet32(ds, esp + 88);
    ebx = memoryAGet32(ds, esp + 100);
    eax = 0x0000005a;
    edi = memoryAGet32(ds, esp + 88);
    ebp = memoryAGet32(ds, esp + 100);
    edi += 0x00000018;
    esi += ebx;
    ebx = esp;
    edx = esi;
    ebp += 0x00000006;
    sub_1a5b1b();
    memoryASet32(ds, esp + 88, edi);
    memoryASet32(ds, esp + 100, ebp);
    ebx = esp + 20;
    edx = esi;
    esi = memoryAGet32(ds, esp + 92);
    eax = 0x00000104;
    esi += 0x00000018;
    sub_1a5b1b();
    memoryASet32(ds, esp + 92, esi);
loc_1a97a7: // 0160:1a97a7
    ebx = memoryAGet32(ds, esp + 96);
    esi = memoryAGet32(ds, esp + 120);
    ebx += 0x00000004;
    esi++;
    memoryASet32(ds, esp + 96, ebx);
    memoryASet32(ds, esp + 120, esi);
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_1a95cf;
    esp += 0x00000084;
    goto loc_1a62f9;
}
void sub_1a97cf() // 0160:1a97cf +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1ab3aa();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x3be918, edx);
    edx = 0x001d6014;
    sub_1a5ae0();
    sub_1a9399();
    if (memoryAGet32(ds, 0x1e3a1a) != 0x00000000)
        goto loc_1a9829;
    if (memoryAGet32(ds, 0x1e3a1e) != 0x00000000)
        goto loc_1a9829;
    ebx = 0x001d5e1f;
    edx = 0x00000090;
    eax = 0x0000010a;
    sub_1a5c92();
    ebx = 0x001d605f;
    edx = 0x00000090;
    eax = 0x00000072;
    sub_1a5c92();
loc_1a9829: // 0160:1a9829
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9869() // 0160:1a9869 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x1e3a1e);
    if (!edx)
        goto loc_1a98bc;
    edi = edx + -1;
    memoryASet32(ds, 0x1e3a1e, edi);
    if (edi)
        goto loc_1a989a;
    ebx = 0x00000001;
    memoryASet32(ds, 0x1e371c, edi);
    memoryASet32(ds, 0x1e376f, ebx);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a989a: // 0160:1a989a
    if ((int32_t)edi <= (int32_t)0x00000047)
        goto loc_1a994b;
    sub_1a97cf();
    edx = 0x001d606b;
loc_1a98ad: // 0160:1a98ad
    eax = 0x00000090;
    sub_1a5ae0();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a98bc: // 0160:1a98bc
    ebx = memoryAGet32(ds, 0x1e3a1a);
    if (!ebx)
        goto loc_1a98fa;
    edx = ebx + -1;
    memoryASet32(ds, 0x1e3a1a, edx);
    if (edx)
        goto loc_1a98ee;
    sub_1a7c98();
    esi = 0x00000001;
    memoryASet32(ds, 0x1e371c, edx);
    memoryASet32(ds, 0x1e376f, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a98ee: // 0160:1a98ee
    sub_1a97cf();
    edx = 0x001d5eed;
    goto loc_1a98ad;
loc_1a98fa: // 0160:1a98fa
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a994b;
    if (memoryAGet32(ds, 0x1e3a16) != 0x00000000)
        goto loc_1a992c;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a992c;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, eax);
loc_1a992c: // 0160:1a992c
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1a994b;
    memoryASet32(ds, 0x1e3a1a, 0x00000004);
loc_1a994b: // 0160:1a994b
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9950() // 0160:1a9950 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_1a9965;
loc_1a9960: // 0160:1a9960
    ch += cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_1a9965: // 0160:1a9965
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1a9978;
    eax = memoryAGet32(ds, ebx + 1980962);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_1a9960;
loc_1a9978: // 0160:1a9978
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a99ce() // 0160:1a99ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_1a99e3;
loc_1a99de: // 0160:1a99de
    ch -= cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_1a99e3: // 0160:1a99e3
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1a99f6;
    eax = memoryAGet32(ds, ebx + 1980962);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_1a99de;
loc_1a99f6: // 0160:1a99f6
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a99fa() // 0160:1a99fa +long
{
    esp -= 4;
    goto loc_1a99fa;
loc_1a70eb: // 0160:1a70eb
    eax = 0x000000a0;
    sub_1a5c92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10496 bytes
loc_1a99fa: // 0160:1a99fa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1ab3aa();
    ebx = 0x001d607e;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000012;
    sub_1a5b1b();
    ecx = 0;
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x3be918, edx);
loc_1a9a25: // 0160:1a9a25
    eax = ebx;
    sub_1a99ce();
    eax = esi;
    edx = memoryAGet32(ds, ecx + 1980962);
    sub_1a5ae0();
    eax = ebx;
    ecx += 0x00000004;
    sub_1a9950();
    ebx++;
    esi += 0x0000000c;
    if ((int32_t)ebx < (int32_t)0x0000000b)
        goto loc_1a9a25;
    ebx = 0x001d5e1f;
    edx = 0x00000096;
    goto loc_1a70eb;
}
void sub_1a9a5b() // 0160:1a9a5b +long
{
    esp -= 4;
    goto loc_1a9a5b;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_1a7373: // 0160:1a7373
    memoryASet32(ds, 0x1e376f, ecx);
    memoryASet32(ds, 0x1e3714, esi);
    memoryASet32(ds, 0x1e3718, edi);
    memoryASet32(ds, 0x1e371c, ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    goto loc_1a62f9;
    // gap 9921 bytes
loc_1a9a5b: // 0160:1a9a5b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x0000009c;
    ecx = 0x0000000b;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    sub_1a99fa();
    goto loc_1a7373;
}
void sub_1a9a95() // 0160:1a9a95 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a9ac2;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1a9ac2;
    ebx = 0;
    memoryASet32(ds, 0x1e376f, eax);
    memoryASet32(ds, 0x1e371c, ebx);
loc_1a9ac2: // 0160:1a9ac2
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9ac5() // 0160:1a9ac5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    edx = 0x00000010;
    memoryASet32(ds, 0x1e3777, eax);
    memoryASet32(ds, 0x3be8f4, edx);
    if ((int32_t)eax < (int32_t)0x00000001)
        goto loc_1a9b0e;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1a9b0e;
    edx = memoryAGet32(ds, eax * 4 + 0x1e380a);
    edx += 0x0000000d;
    memoryASet32(ds, 0x3be900, edx);
    if (eax != 0x00000001)
        goto loc_1a9b02;
    memoryASet32(ds, 0x3be8f4, 0x00000008);
loc_1a9b02: // 0160:1a9b02
    memoryASet32(ds, 0x1e0070, 0x00000001);
    goto loc_1a9b1c;
loc_1a9b0e: // 0160:1a9b0e
    ebx = 0;
    memoryASet32(ds, 0x1e3777, ebx);
    memoryASet32(ds, 0x1e0070, ebx);
loc_1a9b1c: // 0160:1a9b1c
    ebp = memoryAGet32(ds, 0x1e3777);
    if (!ebp)
        goto loc_1a9ba0;
    eax = memoryAGet32(ds, 0x3be8f4);
    eax--;
    memoryASet32(ds, 0x1e377b, eax);
loc_1a9b35: // 0160:1a9b35
    eax = memoryAGet32(ds, 0x3be900);
    edx = memoryAGet32(ds, 0x1e377b);
    eax += edx;
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_1a9b5d;
    if ((int32_t)edx < 0)
        goto loc_1a9b5d;
    ebp = edx + -1;
    memoryASet32(ds, 0x1e377b, ebp);
    goto loc_1a9b35;
loc_1a9b5d: // 0160:1a9b5d
    ecx = memoryAGet32(ds, 0x1e377b);
    eax = memoryAGet32(ds, 0x3be900);
    ecx++;
    eax += ecx;
    memoryASet32(ds, 0x1e377b, ecx);
    memoryASet(ds, eax, 0x5f);
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x1e3777);
    sub_1a5e64();
    eax = memoryAGet32(ds, 0x1e3777);
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3be900);
    eax += memoryAGet32(ds, 0x1e377b);
    memoryASet(ds, eax, 0x20);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a9ba0: // 0160:1a9ba0
    memoryASet32(ds, 0x1e0070, ebp);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9bf3() // 0160:1a9bf3 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x1e3777) == 0x00000000)
        goto loc_1a9c21;
    sub_1a6b31();
    eax = memoryAGet32(ds, 0x1e3777);
    edx = 0;
    sub_1a5e64();
    eax = memoryAGet32(ds, 0x1e3777);
    ebx = 0;
    sub_1a5ef8();
    memoryASet32(ds, 0x1e3777, ebx);
loc_1a9c21: // 0160:1a9c21
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9c24() // 0160:1a9c24 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3777);
    if (!edx)
        goto loc_1a9c5b;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x3be900);
    edx = memoryAGet32(ds, 0x3be914);
    sub_1a69e0();
    if (!eax)
        goto loc_1a9c51;
    sub_1a6c77();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a9c51: // 0160:1a9c51
    sub_1a6ca3();
    sub_1a9bf3();
loc_1a9c5b: // 0160:1a9c5b
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9c63() // 0160:1a9c63 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3777);
    if (!edx)
        goto loc_1a9cbd;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x3be900);
    edx = memoryAGet32(ds, 0x3be914);
    sub_1a69e0();
    if (!eax)
        goto loc_1a9c8e;
    sub_1a6c77();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1a9c8e: // 0160:1a9c8e
    sub_1a6b31();
    eax = memoryAGet32(ds, 0x1e3777);
    edx = 0;
    sub_1a5e64();
    eax = memoryAGet32(ds, 0x1e3777);
    sub_1a5ef8();
    ebx = memoryAGet32(ds, 0x1e3777);
    ebx++;
    eax = ebx;
    memoryASet32(ds, 0x1e3777, ebx);
    sub_1a9ac5();
loc_1a9cbd: // 0160:1a9cbd
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a9cc0() // 0160:1a9cc0 +long
{
    esp -= 4;
    goto loc_1a9cc0;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14784 bytes
loc_1a9cc0: // 0160:1a9cc0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e3777) == 0x00000000)
        goto loc_1a62f9;
    ebx = memoryAGet32(ds, 0x1e3a4e);
    if (!ebx)
        goto loc_1a9ceb;
    ecx = ebx + -1;
    memoryASet32(ds, 0x1e3a4e, ecx);
    goto loc_1a62f9;
loc_1a9ceb: // 0160:1a9ceb
    sub_19c6b5();
    bl = al;
    if (!al)
        goto loc_1a9dc5;
    edx = 0;
    dl = al;
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_1a9d40;
    if ((int32_t)edx > (int32_t)0x0000005a)
        goto loc_1a9d40;
    edx = memoryAGet32(ds, 0x1e377b);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, 0x3be8f4))
        goto loc_1a9d40;
    edx = memoryAGet32(ds, 0x3be900);
    edx += memoryAGet32(ds, 0x1e377b);
    memoryASet(ds, edx, al);
    ebp = 0x00000001;
    eax = memoryAGet32(ds, 0x1e377b);
    eax += ebp;
    memoryASet32(ds, 0x1e3a52, ebp);
    memoryASet32(ds, 0x1e377b, eax);
    sub_1a6ca3();
loc_1a9d40: // 0160:1a9d40
    eax = 0;
    al = bl;
    if (eax != 0x00000008)
        goto loc_1a9da6;
    edx = memoryAGet32(ds, 0x1e377b);
    if (!edx)
        goto loc_1a9da6;
    eax = memoryAGet32(ds, 0x3be900);
    ecx = edx + -1;
    eax += ecx;
    memoryASet32(ds, 0x1e377b, ecx);
    memoryASet(ds, eax, 0x20);
    if (memoryAGet(ds, 0x3aa062) != 0x00)
        goto loc_1a9d78;
    if (memoryAGet(ds, 0x3aa06e) == 0x00)
        goto loc_1a9d97;
loc_1a9d78: // 0160:1a9d78
    edi = memoryAGet32(ds, 0x1e377b);
    if (!edi)
        goto loc_1a9d97;
    eax = memoryAGet32(ds, 0x3be900);
    ebp = edi + -1;
    eax += ebp;
    memoryASet32(ds, 0x1e377b, ebp);
    memoryASet(ds, eax, 0x20);
    goto loc_1a9d78;
loc_1a9d97: // 0160:1a9d97
    memoryASet32(ds, 0x1e3a52, 0x00000001);
    sub_1a6ca3();
loc_1a9da6: // 0160:1a9da6
    eax = 0;
    al = bl;
    if (eax != 0x0000000a)
        goto loc_1a9dc5;
    esi = 0x00000001;
    memoryASet32(ds, 0x1e0070, esi);
    sub_1a9c63();
    memoryASet32(ds, 0x1e3a52, esi);
loc_1a9dc5: // 0160:1a9dc5
    if (memoryAGet32(ds, 0x1e3777) == 0x00000000)
        goto loc_1a62f9;
    if (memoryAGet32(ds, 0x1e3a52) == 0x00000000)
        goto loc_1a62f9;
    edx = memoryAGet32(ds, 0x1e377b);
    eax = memoryAGet32(ds, 0x3be900);
    memoryASet(ds, edx + eax, 0x5f);
    eax = memoryAGet32(ds, 0x1e3777);
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3be900);
    memoryASet(ds, edx + eax, 0x20);
    goto loc_1a62f9;
}
void sub_1a9e27() // 0160:1a9e27 +long
{
    esp -= 4;
    goto loc_1a9e27;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15143 bytes
loc_1a9e27: // 0160:1a9e27
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3aa13c);
    edx = memoryAGet32(ds, 0x1e3773);
    eax -= edx;
    edx = eax;
    sub_1a9cc0();
    ebx = memoryAGet32(ds, 0x39eac0);
    if (ebx)
        goto loc_1a9e58;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1aa079;
loc_1a9e58: // 0160:1a9e58
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a9e68;
    edi = 0x00000001;
    goto loc_1a9e6d;
loc_1a9e68: // 0160:1a9e68
    edi = 0xffffffff;
loc_1a9e6d: // 0160:1a9e6d
    if ((int32_t)edx <= (int32_t)0x00000023)
        goto loc_1aa04b;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    edx = eax;
    esi = eax;
    if ((int32_t)eax >= (int32_t)0x00000006)
        goto loc_1a9ebf;
    if (eax == memoryAGet32(ds, 0x1e3777))
        goto loc_1a9ebf;
    sub_1a9c24();
    if (!eax)
        goto loc_1a9ebf;
    sub_19c6aa();
    eax = edx;
    sub_1a9ac5();
    if (memoryAGet32(ds, 0x1e3777) == 0x00000000)
        goto loc_1a9ebf;
    memoryASet32(ds, 0x1e0070, 0x00000001);
loc_1a9ebf: // 0160:1a9ebf
    if (esi != 0x00000006)
        goto loc_1a9f3f;
    eax = memoryAGet32(ds, 0x3be914);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1979328);
    ebx += edi;
    memoryASet32(ds, eax + 1979328, ebx);
    if ((int32_t)ebx <= (int32_t)0x00000003)
        goto loc_1a9eeb;
    ebp = 0;
    memoryASet32(ds, eax + 1979328, ebp);
loc_1a9eeb: // 0160:1a9eeb
    eax = memoryAGet32(ds, 0x3be914);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1979328) >= (int32_t)0x00000000)
        goto loc_1a9f06;
    memoryASet32(ds, eax + 1979328, 0x00000003);
loc_1a9f06: // 0160:1a9f06
    ecx = memoryAGet32(ds, 0x3be914);
    ebx = 0xffffffff;
    ecx = memoryAGet32(ds, ecx * 4 + 0x1e33c0);
    eax = 0x00000006;
    edx = ebx;
    ecx = memoryAGet32(ds, ecx * 4 + 0x1e37ba);
    sub_1a5b58();
    eax = 0x00000006;
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
loc_1a9f3f: // 0160:1a9f3f
    if (esi != 0x00000007)
        goto loc_1a9f71;
    sub_1a9c24();
    if (!eax)
        goto loc_1a9f71;
    eax = memoryAGet32(ds, 0x3be914);
    eax--;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x3be914, eax);
    sub_1a6ce7();
    eax = esi;
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
loc_1a9f71: // 0160:1a9f71
    if (esi != 0x00000008)
        goto loc_1a9fa3;
    sub_1a9c24();
    if (!eax)
        goto loc_1a9fa3;
    eax = memoryAGet32(ds, 0x3be914);
    eax++;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x3be914, eax);
    sub_1a6ce7();
    eax = esi;
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
loc_1a9fa3: // 0160:1a9fa3
    if (esi != 0x0000000a)
        goto loc_1aa02b;
    eax = edi;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x3be914);
    eax -= edi;
    edx <<= 2;
    eax <<= 3;
    ecx = memoryAGet32(ds, edx + 1979408);
    eax += edi;
    ecx += eax;
    memoryASet32(ds, edx + 1979408, ecx);
    if ((int32_t)ecx <= (int32_t)0x000001f4)
        goto loc_1a9fe1;
    memoryASet32(ds, edx + 1979408, 0x0000004b);
loc_1a9fe1: // 0160:1a9fe1
    eax = memoryAGet32(ds, 0x3be914);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 1979408) >= (int32_t)0x0000004b)
        goto loc_1a9ffc;
    memoryASet32(ds, eax + 1979408, 0x000001f4);
loc_1a9ffc: // 0160:1a9ffc
    eax = memoryAGet32(ds, 0x3be914);
    ebx = 0x00000003;
    edx = memoryAGet32(ds, eax * 4 + 0x1e3410);
    eax = 0x001e3786;
    sub_1a617f();
    eax = 0x0000000a;
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
loc_1aa02b: // 0160:1aa02b
    if (esi != 0x0000000b)
        goto loc_1aa04b;
    sub_1a6de2();
    sub_1a6ce7();
    eax = esi;
    sub_1a5ef8();
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3773, eax);
loc_1aa04b: // 0160:1aa04b
    if (esi != 0x00000009)
        goto loc_1a62f9;
    sub_1a9c24();
    if (!eax)
        goto loc_1a62f9;
    ecx = 0;
    esi = 0x00000001;
    memoryASet32(ds, 0x1e371c, ecx);
    memoryASet32(ds, 0x1e376f, esi);
    goto loc_1a62f9;
loc_1aa079: // 0160:1aa079
    memoryASet32(ds, 0x1e3773, ebx);
    goto loc_1a62f9;
}
void sub_1aa084() // 0160:1aa084 +long
{
    esp -= 4;
    goto loc_1aa084;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4538 bytes
loc_1a74ba: // 0160:1a74ba
    memoryASet32(ds, 0x1e371c, edi);
    memoryASet32(ds, 0x1e376f, ebp);
    goto loc_1a62f9;
    // gap 11193 bytes
loc_1aa084: // 0160:1aa084
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1a62f9;
    sub_1a5f3a();
    if (!eax)
        goto loc_1aa0c8;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1aa0c8;
    ebx = 0;
    ecx = 0x0000000a;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1aa0c8: // 0160:1aa0c8
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1aa0f0;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x1e371c, esi);
    memoryASet32(ds, 0x1e376f, edi);
loc_1aa0f0: // 0160:1aa0f0
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000003)
        goto loc_1aa117;
    ebp = 0;
    eax = 0x00000002;
    memoryASet32(ds, 0x1e371c, ebp);
    memoryASet32(ds, 0x1e376f, eax);
loc_1aa117: // 0160:1aa117
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000004)
        goto loc_1aa139;
    edx = 0;
    memoryASet32(ds, 0x1e376f, eax);
    memoryASet32(ds, 0x1e371c, edx);
loc_1aa139: // 0160:1aa139
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000005)
        goto loc_1aa161;
    ecx = 0;
    esi = 0x0000000b;
    memoryASet32(ds, 0x1e371c, ecx);
    memoryASet32(ds, 0x1e376f, esi);
loc_1aa161: // 0160:1aa161
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000006)
        goto loc_1a62f9;
    edi = 0;
    ebp = 0x00000010;
    goto loc_1a74ba;
}
void sub_1aa186() // 0160:1aa186 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x39eac0) == 0x00000000)
        goto loc_1aa1d4;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000001)
        goto loc_1aa1ac;
    sub_1a5742();
loc_1aa1ac: // 0160:1aa1ac
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    if (eax != 0x00000002)
        goto loc_1aa1d4;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1e371c, ebx);
    memoryASet32(ds, 0x1e376f, ecx);
loc_1aa1d4: // 0160:1aa1d4
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa1d8() // 0160:1aa1d8 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x1e370c) != 0x00000000)
        goto loc_1aa38c;
    edx = memoryAGet32(ds, 0x1e36f0);
    eax = memoryAGet32(ds, 0x1e36ec);
    sub_1a5d0b();
    ebx = memoryAGet32(ds, 0x1e376f);
    edx = eax;
    if (ebx != 0x0000000a)
        goto loc_1aa20e;
    if ((int32_t)eax > (int32_t)0x00000008)
        goto loc_1aa20e;
    if (eax)
        goto loc_1aa23d;
loc_1aa20e: // 0160:1aa20e
    if (memoryAGet32(ds, 0x1e376f) != 0x00000003)
        goto loc_1aa220;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1aa220;
    if (eax)
        goto loc_1aa23d;
loc_1aa220: // 0160:1aa220
    esi = memoryAGet32(ds, 0x1e376f);
    if (esi != 0x0000000a)
        goto loc_1aa238;
    if (eax != esi)
        goto loc_1aa238;
    if ((int32_t)memoryAGet32(ds, 0x3be908) <= (int32_t)0x00000001)
        goto loc_1aa23d;
loc_1aa238: // 0160:1aa238
    sub_1a5ecc();
loc_1aa23d: // 0160:1aa23d
    eax = memoryAGet32(ds, 0x1e376f);
    if (eax < 0x0000000a)
        goto loc_1aa2b0;
    if (eax <= 0x0000000a)
        goto loc_1aa32d;
    if (eax < 0x00000010)
        goto loc_1aa28d;
    if (eax <= 0x00000010)
        goto loc_1aa35a;
    if (eax < 0x00000016)
        goto loc_1aa279;
    if (eax <= 0x00000016)
        goto loc_1aa375;
    if (eax <= 0x00000017)
        goto loc_1aa37e;
    if (eax == 0x0000001e)
        goto loc_1aa387;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa279: // 0160:1aa279
    if (eax < 0x00000014)
        goto loc_1aa38c;
    if (eax <= 0x00000014)
        goto loc_1aa363;
    goto loc_1aa36c;
loc_1aa28d: // 0160:1aa28d
    if (eax < 0x0000000c)
        goto loc_1aa336;
    if (eax <= 0x0000000c)
        goto loc_1aa33f;
    if (eax < 0x0000000e)
        goto loc_1aa38c;
    if (eax <= 0x0000000e)
        goto loc_1aa348;
    goto loc_1aa351;
loc_1aa2b0: // 0160:1aa2b0
    if (eax < 0x00000005)
        goto loc_1aa2c5;
    if (eax <= 0x00000005)
        goto loc_1aa300;
    if (eax < 0x00000007)
        goto loc_1aa309;
    if (eax <= 0x00000007)
        goto loc_1aa312;
    if (eax <= 0x00000008)
        goto loc_1aa31b;
    goto loc_1aa324;
loc_1aa2c5: // 0160:1aa2c5
    if (eax < 0x00000002)
        goto loc_1aa2d3;
    if (eax <= 0x00000002)
        goto loc_1aa2e5;
    if (eax <= 0x00000003)
        goto loc_1aa2ee;
    goto loc_1aa2f7;
loc_1aa2d3: // 0160:1aa2d3
    if (eax != 0x00000001)
        goto loc_1aa38c;
    sub_1aa084();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa2e5: // 0160:1aa2e5
    sub_1aa186();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa2ee: // 0160:1aa2ee
    sub_1a9e27();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa2f7: // 0160:1aa2f7
    sub_1a8899();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa300: // 0160:1aa300
    sub_1a8605();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa309: // 0160:1aa309
    sub_1a739a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa312: // 0160:1aa312
    sub_1a76a1();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa31b: // 0160:1aa31b
    sub_1a8308();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa324: // 0160:1aa324
    sub_1a7a79();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa32d: // 0160:1aa32d
    sub_1a659b();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa336: // 0160:1aa336
    sub_1a9a95();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa33f: // 0160:1aa33f
    sub_1a7d2c();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa348: // 0160:1aa348
    sub_1a7e5c();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa351: // 0160:1aa351
    sub_1a6f89();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa35a: // 0160:1aa35a
    sub_1a8251();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa363: // 0160:1aa363
    sub_1a8d1a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa36c: // 0160:1aa36c
    sub_1a925a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa375: // 0160:1aa375
    sub_1a932f();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa37e: // 0160:1aa37e
    sub_1a9869();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aa387: // 0160:1aa387
    sub_1a8f18();
loc_1aa38c: // 0160:1aa38c
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa390() // 0160:1aa390 +long
{
    esp -= 4;
    goto loc_1aa390;
loc_1a7652: // 0160:1a7652
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x1e376f, edi);
    memoryASet32(ds, 0x1e3714, ebp);
    memoryASet32(ds, 0x1e3718, eax);
    memoryASet32(ds, 0x1e371c, edx);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8617 bytes
loc_1a982c: // 0160:1a982c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000078;
    ebx = 0x00000096;
    edi = 0x00000017;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x1e36ec, edx);
    memoryASet32(ds, 0x1e36f0, ebx);
    memoryASet32(ds, 0x1e3a1e, ecx);
    memoryASet32(ds, 0x1e3a1a, ecx);
    sub_1a97cf();
    goto loc_1a7652;
    // gap 2855 bytes
loc_1aa390: // 0160:1aa390
    if (memoryAGet32(ds, 0x1e376f) != 0x00000001)
        goto loc_1aa39e;
    sub_1a5f62();
loc_1aa39e: // 0160:1aa39e
    if (memoryAGet32(ds, 0x1e376f) != 0x00000002)
        goto loc_1aa3ac;
    sub_1a60bf();
loc_1aa3ac: // 0160:1aa3ac
    if (memoryAGet32(ds, 0x1e376f) != 0x00000003)
        goto loc_1aa3ba;
    sub_1a6e9a();
loc_1aa3ba: // 0160:1aa3ba
    if (memoryAGet32(ds, 0x1e376f) != 0x00000004)
        goto loc_1aa3c8;
    sub_1a885f();
loc_1aa3c8: // 0160:1aa3c8
    if (memoryAGet32(ds, 0x1e376f) != 0x00000005)
        goto loc_1aa3d6;
    sub_1a859f();
loc_1aa3d6: // 0160:1aa3d6
    if (memoryAGet32(ds, 0x1e376f) != 0x00000006)
        goto loc_1aa3e4;
    sub_1a733e();
loc_1aa3e4: // 0160:1aa3e4
    if (memoryAGet32(ds, 0x1e376f) != 0x00000007)
        goto loc_1aa3f2;
    sub_1a761a();
loc_1aa3f2: // 0160:1aa3f2
    if (memoryAGet32(ds, 0x1e376f) != 0x00000008)
        goto loc_1aa400;
    sub_1a8294();
loc_1aa400: // 0160:1aa400
    if (memoryAGet32(ds, 0x1e376f) != 0x00000009)
        goto loc_1aa40e;
    sub_1a7a3f();
loc_1aa40e: // 0160:1aa40e
    if (memoryAGet32(ds, 0x1e376f) != 0x0000000a)
        goto loc_1aa41c;
    sub_1a651d();
loc_1aa41c: // 0160:1aa41c
    if (memoryAGet32(ds, 0x1e376f) != 0x0000000b)
        goto loc_1aa42a;
    sub_1a9a5b();
loc_1aa42a: // 0160:1aa42a
    if (memoryAGet32(ds, 0x1e376f) != 0x0000000c)
        goto loc_1aa438;
    sub_1a7ba6();
loc_1aa438: // 0160:1aa438
    if (memoryAGet32(ds, 0x1e376f) != 0x0000000e)
        goto loc_1aa446;
    sub_1a7e1a();
loc_1aa446: // 0160:1aa446
    if (memoryAGet32(ds, 0x1e376f) != 0x0000000f)
        goto loc_1aa454;
    sub_1a6ef3();
loc_1aa454: // 0160:1aa454
    if (memoryAGet32(ds, 0x1e376f) != 0x00000010)
        goto loc_1aa462;
    sub_1a8212();
loc_1aa462: // 0160:1aa462
    if (memoryAGet32(ds, 0x1e376f) == 0x00000017)
        goto loc_1a982c;
    esp += 4;
}
void sub_1aa470() // 0160:1aa470 +long
{
    esp -= 4;
    goto loc_1aa470;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16752 bytes
loc_1aa470: // 0160:1aa470
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0;
    ebp = 0;
loc_1aa47a: // 0160:1aa47a
    esi = edi;
    esi <<= 2;
    ebx = ebp;
    ecx = memoryAGet32(ds, esi + 1980330);
    edx = 0;
    memoryASet32(ds, esi + 1966112, ecx);
loc_1aa48f: // 0160:1aa48f
    eax = esi + edx;
    memoryASet32(ds, ebx + 3803570, ecx);
    sub_1981a0();
    edx++;
    ebx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1aa48f;
    edi++;
    ebp += 0x000002b0;
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_1aa47a;
    goto loc_1a62f9;
}
void sub_1aa4ba() // 0160:1aa4ba +long
{
    esp -= 4;
    goto loc_1aa4ba;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16826 bytes
loc_1aa4ba: // 0160:1aa4ba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1a70fa();
    sub_1aa470();
    ebp = 0;
    edi = 0;
loc_1aa4ce: // 0160:1aa4ce
    edx = edi * 0x000000ac;
    ebx = edi * 0x00000030;
    ecx = memoryAGet32(ds, 0x1e0010);
    eax = edx;
    if ((int32_t)ebp < (int32_t)ecx)
        goto loc_1aa505;
    ecx = edx + 688;
loc_1aa4e9: // 0160:1aa4e9
    eax += 0x000000ac;
    esi = 0;
    ebx += 0x00000030;
    memoryASet32(ds, eax + 3803322, esi);
    memoryASet32(ds, ebx + 3842524, esi);
    if (eax == ecx)
        goto loc_1aa55f;
    goto loc_1aa4e9;
loc_1aa505: // 0160:1aa505
    esi = memoryAGet32(ds, edi + 1980298) * 0x000000aa;
    edx = ebx;
    ebx = esi;
    esi += 0x00000010;
loc_1aa516: // 0160:1aa516
    ecx = memoryAGet32(ds, ebx + 1976062);
    if (!ecx)
        goto loc_1aa538;
    memoryASet32(ds, edx + 3842572, 0x00000001);
    ecx = memoryAGet32(ds, eax + 3803570);
    memoryASet32(ds, edx + 3842548, ecx);
    goto loc_1aa550;
loc_1aa538: // 0160:1aa538
    memoryASet32(ds, eax + 3803494, ecx);
    memoryASet32(ds, eax + 3803486, ecx);
    memoryASet32(ds, eax + 3803490, ecx);
    memoryASet32(ds, edx + 3842572, ecx);
loc_1aa550: // 0160:1aa550
    edx += 0x00000030;
    ebx += 0x00000004;
    eax += 0x000000ac;
    if (ebx != esi)
        goto loc_1aa516;
loc_1aa55f: // 0160:1aa55f
    ebp++;
    edi += 0x00000004;
    if ((int32_t)ebp < (int32_t)0x00000004)
        goto loc_1aa4ce;
    goto loc_1a62f9;
}
void sub_1aa571() // 0160:1aa571 +long
{
    esp -= 4;
    goto loc_1aa571;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17009 bytes
loc_1aa571: // 0160:1aa571
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x1e3658);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = 0;
    eax <<= 3;
    memoryASet32(ds, 0x1e3a66, edx);
    eax += ebx;
    memoryASet32(ds, 0x1e380a, edx);
    eax += eax;
    ebx = 0;
    memoryASet32(ds, 0x3a1cc4, eax);
    goto loc_1aa5bd;
loc_1aa5a2: // 0160:1aa5a2
    edx = 0x00007fff;
    eax = 0;
    sub_1b7c85();
    ecx = memoryAGet32(ds, 0x1e0060);
    ecx += eax;
    ebx++;
    memoryASet32(ds, 0x1e0060, ecx);
loc_1aa5bd: // 0160:1aa5bd
    edx = 0x0000000a;
    eax = 0x00000005;
    sub_1b7c85();
    if ((int32_t)ebx < (int32_t)eax)
        goto loc_1aa5a2;
    esi = 0x00000001;
    edi = 0xffffffff;
    edx = 0;
    memoryASet32(ds, 0x3a1cc8, esi);
    memoryASet32(ds, 0x1e3c64, edi);
    ebp = esi;
    memoryASet32(ds, 0x1dfffc, esi);
    memoryASet32(ds, 0x1e3a5e, edi);
    memoryASet32(ds, 0x1e3a62, edx);
    memoryASet32(ds, 0x1e3a6a, edx);
    sub_1a89ff();
    esi = memoryAGet32(ds, 0x1e39da);
    esi += ebp;
    memoryASet32(ds, 0x1e39a0, edx);
    memoryASet32(ds, 0x1e39da, esi);
    goto loc_1a62f9;
}
void sub_1aa620() // 0160:1aa620 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = 0;
    ebx = 0x00000001;
    edx = 0;
loc_1aa62b: // 0160:1aa62b
    eax += 0x00000030;
    memoryASet32(ds, eax + 3842524, ebx);
    memoryASet32(ds, eax + 3842504, edx);
    memoryASet32(ds, eax + 3842528, edx);
    memoryASet32(ds, eax + 3842536, edx);
    memoryASet32(ds, eax + 3842532, edx);
    memoryASet32(ds, eax + 3842508, edx);
    memoryASet32(ds, eax + 3842512, edx);
    memoryASet32(ds, eax + 3842516, edx);
    memoryASet32(ds, eax + 3842520, edx);
    memoryASet32(ds, eax + 3842540, edx);
    memoryASet32(ds, eax + 3842544, edx);
    if (eax != 0x00000300)
        goto loc_1aa62b;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa67a() // 0160:1aa67a +long
{
    esp -= 4;
    goto loc_1aa67a;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17274 bytes
loc_1aa67a: // 0160:1aa67a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = eax;
    edi <<= 2;
    edi -= eax;
    edi <<= 4;
    ebx = eax;
    eax = memoryAGet32(ds, edi + 3842552);
    memoryASet32(ds, esp + 4, eax);
    eax = ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = 0;
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, 0x1e0010);
    ebp = edi;
    eax <<= 2;
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1aa78d;
loc_1aa6c6: // 0160:1aa6c6
    if (memoryAGet32(ds, ebx + 3842572) != 0x00000001)
        goto loc_1aa783;
    eax = memoryAGet32(ds, ebx + 3842548);
    if (eax == memoryAGet32(ds, ecx + 3803570))
        goto loc_1aa783;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_1aa714;
    memoryASet32(ds, edi + 3842560, memoryAGet32(ds, edi + 3842560) + 1);
    edx = memoryAGet32(ds, ecx + 3803570);
    eax = memoryAGet32(ds, ebx + 3842548);
    eax -= edx;
    memoryASet32(ds, edi + 3842584, memoryAGet32(ds, edi + 3842584) + eax);
loc_1aa714: // 0160:1aa714
    eax = memoryAGet32(ds, ebx + 3842548);
    eax -= memoryAGet32(ds, ecx + 3803570);
    edx = memoryAGet32(ds, ebx + 3842580);
    edx += eax;
    eax = memoryAGet32(ds, ebx + 3842556);
    memoryASet32(ds, ebx + 3842580, edx);
    eax++;
    edx = memoryAGet32(ds, ecx + 3803570);
    memoryASet32(ds, ebx + 3842556, eax);
    if (edx)
        goto loc_1aa777;
    edx = esi;
    eax = 0x00000002;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 3842572, eax);
    eax = esi;
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, ebx + 3842588, memoryAGet32(ds, ebx + 3842588) + 1);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_1aa771;
    memoryASet32(ss, ebp + 3842552, memoryAGet32(ss, ebp + 3842552) + 1);
loc_1aa771: // 0160:1aa771
    memoryASet32(ds, ebx + 3842564, memoryAGet32(ds, ebx + 3842564) + 1);
loc_1aa777: // 0160:1aa777
    eax = memoryAGet32(ds, ecx + 3803570);
    memoryASet32(ds, ebx + 3842548, eax);
loc_1aa783: // 0160:1aa783
    ebx += 0x00000030;
    ecx += 0x000000ac;
    esi++;
loc_1aa78d: // 0160:1aa78d
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1aa6c6;
    ebx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ds, edi + 3842552);
    eax -= ebx;
    ecx = memoryAGet32(ds, edi + 3842576);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1aa7b7;
    memoryASet32(ds, edi + 3842576, eax);
loc_1aa7b7: // 0160:1aa7b7
    ebx = memoryAGet32(ds, esp);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 4;
    ebx = memoryAGet32(ds, 0x1e3a6a);
    ecx = memoryAGet32(ds, eax + 3842568);
    esi = memoryAGet32(ds, eax + 3842592);
    ecx += ebx;
    esi++;
    memoryASet32(ds, eax + 3842568, ecx);
    memoryASet32(ds, eax + 3842592, esi);
    esp += 0x00000010;
    goto loc_1a62f9;
}
void sub_1aa7ed() // 0160:1aa7ed +long
{
    esp -= 4;
    goto loc_1aa7ed;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17645 bytes
loc_1aa7ed: // 0160:1aa7ed
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x1e3d20);
    memoryASet32(ds, 0x1e39da, edx);
    if (!ebx)
        goto loc_1aa819;
    edx = 0x00000004;
    eax = 0x00000002;
    sub_1ab709();
    memoryASet32(ds, 0x3be908, eax);
loc_1aa819: // 0160:1aa819
    esi = 0xffffffff;
    eax = memoryAGet32(ds, 0x3be908);
    ecx = 0;
    memoryASet32(ds, 0x1e0010, eax);
    memoryASet32(ds, 0x1e005c, ecx);
    memoryASet32(ds, 0x1e0050, ecx);
    memoryASet32(ds, 0x1e0044, ecx);
    memoryASet32(ds, 0x1e0038, ecx);
    sub_1aa620();
    eax = 0;
loc_1aa849: // 0160:1aa849
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 1980294, esi);
    memoryASet32(ds, eax + 3842496, edx);
    memoryASet32(ds, eax + 3842512, edx);
    memoryASet32(ds, eax + 3842480, edx);
    if (eax != 0x00000010)
        goto loc_1aa849;
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_1aa8a5;
    edx = 0x00000003;
    eax = 0;
    sub_1ab709();
    ebx = memoryAGet32(ds, 0x1e0010);
    edx = eax;
    ebx <<= 2;
    eax = 0;
    goto loc_1aa89f;
loc_1aa88f: // 0160:1aa88f
    esi = edx + 16;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, eax + 1980294, esi);
    edx &= 0x00000003;
loc_1aa89f: // 0160:1aa89f
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1aa8df;
    goto loc_1aa88f;
loc_1aa8a5: // 0160:1aa8a5
    ebp = 0x00000001;
    edi = memoryAGet32(ds, 0x1e0010);
    eax = 0;
    esi = 0;
    edi <<= 2;
    goto loc_1aa8db;
loc_1aa8b9: // 0160:1aa8b9
    cl = al;
    ebx = ebp;
    ebx <<= cl;
    ecx = memoryAGet32(ds, 0x3be90c);
    edx = eax + 1;
    if (ebx & ecx)
        goto loc_1aa8d0;
    eax = edx;
    goto loc_1aa8b9;
loc_1aa8d0: // 0160:1aa8d0
    memoryASet32(ds, esi + 1980298, eax);
    esi += 0x00000004;
    eax = edx;
loc_1aa8db: // 0160:1aa8db
    if ((int32_t)esi < (int32_t)edi)
        goto loc_1aa8b9;
loc_1aa8df: // 0160:1aa8df
    sub_1a67e2();
    sub_1a8a8c();
    esi = 0x00000001;
    sub_1aa571();
    memoryASet32(ds, 0x1e0198, esi);
    goto loc_1a62f9;
}
void sub_1aa8fe() // 0160:1aa8fe +long
{
    esp -= 4;
    goto loc_1aa8fe;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17918 bytes
loc_1aa8fe: // 0160:1aa8fe
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    al = (int32_t)memoryAGet32(ds, 0x1e376f) > (int32_t)0x00000001;
    ebx = memoryAGet32(ds, 0x1e15fc);
    eax &= 0x000000ff;
    if (ebx == 0x00000002)
        goto loc_1a62fa;
    if (ebx == 0x00000003)
        goto loc_1a62fa;
    esi = memoryAGet32(ds, 0x3a1cc8);
    edx = memoryAGet32(ds, 0x1e36e4);
    if (esi)
        goto loc_1aa947;
    if (eax)
        goto loc_1aa947;
    if ((int32_t)memoryAGet32(ds, 0x1e376f) < (int32_t)0x00000014)
        goto loc_1aa951;
loc_1aa947: // 0160:1aa947
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3a76, eax);
loc_1aa951: // 0160:1aa951
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_1aa975;
    if (memoryAGet32(ds, 0x1e36f4) != 0x00000000)
        goto loc_1aa975;
    if (memoryAGet32(ds, 0x1e3a52) != 0x00000000)
        goto loc_1aa975;
    if (memoryAGet32(ds, 0x1e3777) == 0x00000000)
        goto loc_1aa97f;
loc_1aa975: // 0160:1aa975
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3a76, eax);
loc_1aa97f: // 0160:1aa97f
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    esi = memoryAGet32(ds, 0x1e3a76);
    eax += eax;
    eax += esi;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_1a62fa;
    if ((int32_t)memoryAGet32(ds, 0x1e376f) <= (int32_t)0x00000000)
        goto loc_1a62fa;
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x1e365c);
    memoryASet32(ds, 0x1e3d20, eax);
    eax = 0x00000002;
    sub_1b7c85();
    memoryASet32(ds, 0x3be908, eax);
    edx = 0;
    ebx = memoryAGet32(ds, 0x3be908);
    memoryASet32(ds, 0x3be90c, edx);
    eax = 0;
    goto loc_1aa9f7;
loc_1aa9df: // 0160:1aa9df
    edx = 0x00000001;
    cl = al;
    edi = memoryAGet32(ds, 0x3be90c);
    edx <<= cl;
    edi |= edx;
    eax++;
    memoryASet32(ds, 0x3be90c, edi);
loc_1aa9f7: // 0160:1aa9f7
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_1aa9df;
    ecx = 0;
    esi = 0xffffffff;
    memoryASet32(ds, 0x1e371c, ecx);
    memoryASet32(ds, 0x1e376f, esi);
    sub_1a5738();
    goto loc_1a62fa;
}
void sub_1aaa18() // 0160:1aaa18 +long
{
    esp -= 4;
    goto loc_1aaa18;
loc_1a62fa: // 0160:1a62fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18200 bytes
loc_1aaa18: // 0160:1aaa18
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    edi = esp;
    esi = 0x001a55f4;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = memoryAGet32(ds, 0x1e3a5e);
    if (edx != 0xfffffffe)
        goto loc_1aaa3d;
    eax = edx;
    goto loc_1aab5b;
loc_1aaa3d: // 0160:1aaa3d
    if (memoryAGet32(ds, 0x3a1e94) == 0x00000000)
        goto loc_1aaa50;
    memoryASet32(ds, 0x1e3a6a, 0x00000001);
loc_1aaa50: // 0160:1aaa50
    eax = memoryAGet32(ds, 0x3a1c64);
    if (eax == memoryAGet32(ds, 0x1e3a5e))
        goto loc_1aaa6a;
    eax = memoryAGet32(ds, 0x3aa13c);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x1e3a62))
        goto loc_1aaa77;
loc_1aaa6a: // 0160:1aaa6a
    if (memoryAGet32(ds, 0x3a1cc8) != 0x00000000)
        goto loc_1aab3b;
loc_1aaa77: // 0160:1aaa77
    if (memoryAGet32(ds, 0x1e3a5e) != 0xffffffff)
        goto loc_1aaa9a;
    edx = 0x00000004;
    eax = 0;
loc_1aaa87: // 0160:1aaa87
    memoryASet32(ds, eax + 3842532, edx);
    eax += edx;
    if (eax == 0x00000010)
        goto loc_1aab1f;
    goto loc_1aaa87;
loc_1aaa9a: // 0160:1aaa9a
    ebx = 0;
    ecx = 0;
loc_1aaa9e: // 0160:1aaa9e
    if (memoryAGet32(ds, ecx + 3803494) == 0x00000000)
        goto loc_1aaab9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, esp + eax*4, memoryAGet32(ds, esp + eax*4) + 1);
loc_1aaab9: // 0160:1aaab9
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1aaa9e;
    eax = memoryAGet32(ds, 0x1e3a5e);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    ebx = 0;
    edx = esi;
    eax = 0;
    edx <<= 2;
    goto loc_1aab0d;
loc_1aaae4: // 0160:1aaae4
    ecx = memoryAGet32(ds, eax + 3842532);
    ecx -= memoryAGet32(ds, esp + eax);
    if (!ecx)
        goto loc_1aaaff;
    memoryASet32(ds, eax + 3842484, memoryAGet32(ds, eax + 3842484) + ecx);
    if (ebx == esi)
        goto loc_1aaaff;
    memoryASet32(ds, edx + 3842516, memoryAGet32(ds, edx + 3842516) + ecx);
loc_1aaaff: // 0160:1aaaff
    eax += 0x00000004;
    ecx = memoryAGet32(ds, esp + eax + -4);
    ebx++;
    memoryASet32(ds, eax + 3842528, ecx);
loc_1aab0d: // 0160:1aab0d
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x1e0010))
        goto loc_1aaae4;
    eax = memoryAGet32(ds, 0x1e3a5e);
    sub_1aa67a();
loc_1aab1f: // 0160:1aab1f
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0;
    memoryASet32(ds, 0x1e3a5e, eax);
    memoryASet32(ds, 0x1e3a6a, ebx);
    eax = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3a62, eax);
loc_1aab3b: // 0160:1aab3b
    ecx = memoryAGet32(ds, 0x3a1cc8);
    if (ecx)
        goto loc_1aab56;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x1e3a6a, ecx);
    memoryASet32(ds, 0x1e3a5e, esi);
loc_1aab56: // 0160:1aab56
    eax = memoryAGet32(ds, 0x1e3a5e);
loc_1aab5b: // 0160:1aab5b
    esp += 0x00000010;
    goto loc_1a62fa;
}
void sub_1aab63() // 0160:1aab63 +long
{
    esp -= 4;
    goto loc_1aab63;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17637 bytes
loc_1aa7e5: // 0160:1aa7e5
    esp += 0x00000010;
    goto loc_1a62f9;
    // gap 886 bytes
loc_1aab63: // 0160:1aab63
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = 0xffffffff;
    esi = memoryAGet32(ds, 0x1e3660);
    ebx = 0;
    eax = 0;
loc_1aab7b: // 0160:1aab7b
    if ((int32_t)memoryAGet32(ds, eax + 1980298) < (int32_t)0x00000000)
        goto loc_1aaba3;
    if (!esi)
        goto loc_1aab8d;
    memoryASet32(ds, esp + eax, ebx);
    goto loc_1aaba6;
loc_1aab8d: // 0160:1aab8d
    edx = memoryAGet32(ds, eax + 3842516);
    edx <<= 4;
    edx |= ebx;
    edx &= 0x000000ff;
    memoryASet32(ds, esp + eax, edx);
    goto loc_1aaba6;
loc_1aaba3: // 0160:1aaba3
    memoryASet32(ds, esp + eax, ecx);
loc_1aaba6: // 0160:1aaba6
    ebx++;
    eax += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1aab7b;
    esi = memoryAGet32(ds, 0x1e3660);
    ebx = 0;
    ecx = 0;
loc_1aabb9: // 0160:1aabb9
    if (memoryAGet32(ds, ecx + 3803494) == 0x00000000)
        goto loc_1aac05;
    if (memoryAGet32(ds, ecx + 3803594) != 0x00000000)
        goto loc_1aac05;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    if (!esi)
        goto loc_1aabee;
    edx += 0x00010000;
    memoryASet32(ds, esp + eax, edx);
    goto loc_1aac05;
loc_1aabee: // 0160:1aabee
    edx = memoryAGet32(ds, ecx + 3803570);
    edx += 0x000007d0;
    edi = memoryAGet32(ds, esp + eax);
    edx <<= 8;
    edi += edx;
    memoryASet32(ds, esp + eax, edi);
loc_1aac05: // 0160:1aac05
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1aabb9;
    edx = 0x00000001;
    esi = edx;
    ebx = esi;
loc_1aac1a: // 0160:1aac1a
    if (!edx)
        goto loc_1aac40;
    edx = 0;
    ecx = 0;
loc_1aac22: // 0160:1aac22
    eax = memoryAGet32(ds, esp + ecx);
    edi = memoryAGet32(ds, esp + ecx + 4);
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1aac36;
    memoryASet32(ds, esp + ecx, edi);
    edx = ebx;
    memoryASet32(ds, esp + ecx + 4, eax);
loc_1aac36: // 0160:1aac36
    ecx += 0x00000004;
    if ((int32_t)ecx >= (int32_t)0x0000000c)
        goto loc_1aac1a;
    goto loc_1aac22;
loc_1aac40: // 0160:1aac40
    esi = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x1e3a0e, edx);
    si &= 0xfff0;
    eax = 0;
    if (!esi)
        goto loc_1aac7a;
loc_1aac53: // 0160:1aac53
    ebx = memoryAGet32(ds, esp + edx);
    bl &= 0xf0;
    if (ebx != esi)
        goto loc_1aac72;
    ecx = memoryAGet32(ds, esp + edx);
    ebx = 0x00000001;
    ecx &= 0x0000000f;
    ebx <<= cl;
    eax |= ebx;
    memoryASet32(ds, 0x1e3a0e, memoryAGet32(ds, 0x1e3a0e) + 1);
loc_1aac72: // 0160:1aac72
    edx += 0x00000004;
    if (edx != 0x00000010)
        goto loc_1aac53;
loc_1aac7a: // 0160:1aac7a
    edx = memoryAGet32(ds, 0x1e0010);
    ecx = memoryAGet32(ds, 0x1e3a0e);
    edx -= ecx;
    esi = memoryAGet32(ds, 0x1e3660);
    memoryASet32(ds, 0x1e3a12, edx);
    if (!esi)
        goto loc_1aaca5;
    if ((int32_t)ecx <= (int32_t)0x00000001)
        goto loc_1aaca5;
    ebp = 0;
    memoryASet32(ds, 0x1e3a12, ebp);
loc_1aaca5: // 0160:1aaca5
    if ((int32_t)memoryAGet32(ds, 0x1e3a12) > (int32_t)0x00000000)
        goto loc_1aa7e5;
    ebx = 0;
    eax = 0;
    memoryASet32(ds, 0x1e3a12, ebx);
    goto loc_1aa7e5;
}
void sub_1aacf6() // 0160:1aacf6 +long
{
    esp -= 4;
    goto loc_1aacf6;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18934 bytes
loc_1aacf6: // 0160:1aacf6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    edx = memoryAGet32(ds, 0x1e3640);
    if (edx)
        goto loc_1a62f9;
    ebx = memoryAGet32(ds, 0x1e3d20);
    if (ebx)
        goto loc_1a62f9;
loc_1aad1a: // 0160:1aad1a
    esi = memoryAGet32(ds, edx + 1980298);
    if ((int32_t)esi < 0)
        goto loc_1aadab;
    eax = 0x00000001;
    cl = bl;
    eax <<= cl;
    ecx = eax;
    eax = esi * 0x00000018;
    if (!(edi & ecx))
        goto loc_1aad42;
    memoryASet32(ds, eax + 1979492, memoryAGet32(ds, eax + 1979492) + 1);
    goto loc_1aad48;
loc_1aad42: // 0160:1aad42
    memoryASet32(ds, eax + 1979496, memoryAGet32(ds, eax + 1979496) + 1);
loc_1aad48: // 0160:1aad48
    eax = esi * 0x00000018;
    ecx = memoryAGet32(ds, eax + 1979488);
    ecx++;
    esi = memoryAGet32(ds, eax + 1979500);
    memoryASet32(ds, eax + 1979488, ecx);
    ecx = memoryAGet32(ds, edx + 3842516);
    ebp = memoryAGet32(ds, eax + 1979504);
    esi += ecx;
    ecx = memoryAGet32(ds, edx + 3842484);
    memoryASet32(ds, eax + 1979500, esi);
    ebp += ecx;
    ecx = memoryAGet32(ds, eax + 1979492);
    memoryASet32(ds, eax + 1979504, ebp);
    ecx <<= 16;
    memoryASet32(ds, eax + 1979508, ecx);
    esi = memoryAGet32(ds, eax + 1979504);
    ecx = memoryAGet32(ds, eax + 1979500);
    ebp = memoryAGet32(ds, eax + 1979508);
    ecx -= esi;
    ebp += ecx;
    memoryASet32(ds, eax + 1979508, ebp);
loc_1aadab: // 0160:1aadab
    ebx++;
    edx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_1aad1a;
    goto loc_1a62f9;
}
void sub_1aadbd() // 0160:1aadbd +long
{
    esp -= 4;
    goto loc_1aadbd;
loc_1a62f6: // 0160:1a62f6
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19133 bytes
loc_1aadbd: // 0160:1aadbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    edi = esp;
    esi = 0x001a5604;
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_1a8a9c();
    edx = memoryAGet32(ds, 0x1e364c);
    ecx = 0;
    if (!edx)
        goto loc_1aae35;
    if (memoryAGet32(ds, 0x1e3654) == 0x00000023)
        goto loc_1aae35;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1aadf4;
    edx ^= eax;
loc_1aadf4: // 0160:1aadf4
    if ((int32_t)edx <= (int32_t)0x00001734)
        goto loc_1aae01;
    edx = 0x00001734;
loc_1aae01: // 0160:1aae01
    if ((int32_t)edx <= (int32_t)0x0000003b)
        goto loc_1aae16;
    ebx = 0x0000003c;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    goto loc_1aae1b;
loc_1aae16: // 0160:1aae16
    ecx = 0x00000001;
loc_1aae1b: // 0160:1aae1b
    ebx = 0x00000002;
    eax = esp;
    sub_1a617f();
    eax = 0;
    al = memoryAGet(ds, esp);
    if (eax != 0x00000020)
        goto loc_1aae35;
    memoryASet(ds, esp, 0x30);
loc_1aae35: // 0160:1aae35
    if ((int32_t)ebp <= (int32_t)0xfffffff6)
        goto loc_1a62f6;
    if (!ecx)
        goto loc_1aae5c;
    eax = memoryAGet32(ds, 0x1e3998);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx >= (int32_t)0x00000019)
        goto loc_1a62f6;
loc_1aae5c: // 0160:1aae5c
    eax = 0;
    al = memoryAGet(ds, esp);
    sub_1a5a04();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1aaeea;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    ecx = 0x003aaeb4;
    edx <<= 7;
    esi = 0x00000020;
    ecx += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = ecx + edx;
    if ((int32_t)ebp >= 0)
        goto loc_1aaece;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x00289d46;
    goto loc_1aaee5;
loc_1aaece: // 0160:1aaece
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x00289d46;
loc_1aaee5: // 0160:1aaee5
    sub_1cb83f();
loc_1aaeea: // 0160:1aaeea
    eax = 0;
    al = memoryAGet(ds, esp + 1);
    sub_1a5a04();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1a62f6;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    esi = 0x003aaeb4;
    edx <<= 7;
    ecx = 0x00000020;
    esi += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = esi + edx;
    if ((int32_t)ebp >= 0)
        goto loc_1aaf5d;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x00289d50;
    goto loc_1aaf74;
loc_1aaf5d: // 0160:1aaf5d
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x00289d50;
loc_1aaf74: // 0160:1aaf74
    sub_1cb83f();
    goto loc_1a62f6;
}
void sub_1aaf7e() // 0160:1aaf7e +long
{
    esp -= 4;
    goto loc_1aaf7e;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19582 bytes
loc_1aaf7e: // 0160:1aaf7e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x1e3998) != 0xffffffff)
        goto loc_1aafa0;
    ebx = 0;
    sub_1a67e2();
    memoryASet32(ds, 0x3a1cc8, ebx);
    memoryASet32(ds, 0x3a1efc, ebx);
loc_1aafa0: // 0160:1aafa0
    sub_1a8a9c();
    if (eax)
        goto loc_1aafbc;
    if (memoryAGet32(ds, 0x3a1e58) == 0x00000000)
        goto loc_1aafbc;
    memoryASet32(ds, 0x3a1cc8, eax);
    memoryASet32(ds, 0x3a1efc, eax);
loc_1aafbc: // 0160:1aafbc
    eax = 0;
    edx = memoryAGet32(ds, 0x3a1efc);
    memoryASet32(ds, 0x3a1e58, eax);
    if (edx)
        goto loc_1ab13c;
    ebx = memoryAGet32(ds, 0x1e15fc);
    if (ebx == 0x00000002)
        goto loc_1ab13c;
    if (ebx == 0x00000003)
        goto loc_1ab13c;
    if (memoryAGet32(ds, 0x3a1cc8) != 0x00000000)
        goto loc_1a62f9;
    edi = 0x00000001;
    memoryASet32(ds, 0x1e3a66, edi);
    sub_1aab63();
    ebp = memoryAGet32(ds, 0x1e3a0e);
    ebx = eax;
    if (ebp)
        goto loc_1ab018;
    memoryASet32(ds, 0x1e380a, edi);
loc_1ab018: // 0160:1ab018
    if (!ebx)
        goto loc_1ab0ad;
    edx = 0x00000002;
    ebp = 0x00000003;
    edi = memoryAGet32(ds, 0x1e3d20);
    eax = 0;
    memoryASet32(ds, 0x1e3a66, edx);
    edx = 0;
loc_1ab03a: // 0160:1ab03a
    esi = 0x00000001;
    cl = dl;
    esi <<= cl;
    if (!(ebx & esi))
        goto loc_1ab068;
    ecx = memoryAGet32(ds, eax + 3842500);
    ecx++;
    esi = memoryAGet32(ds, 0x1e3650);
    memoryASet32(ds, eax + 3842500, ecx);
    if ((int32_t)ecx >= (int32_t)esi)
        goto loc_1ab062;
    if (!edi)
        goto loc_1ab068;
loc_1ab062: // 0160:1ab062
    memoryASet32(ds, 0x1e3a66, ebp);
loc_1ab068: // 0160:1ab068
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1ab03a;
    if (memoryAGet32(ds, 0x1e3a66) != 0x00000003)
        goto loc_1ab081;
    eax = ebx;
    sub_1aacf6();
loc_1ab081: // 0160:1ab081
    if (!(bl & 0x01))
        goto loc_1ab08c;
    memoryASet32(ds, 0x1e0038, memoryAGet32(ds, 0x1e0038) + 1);
loc_1ab08c: // 0160:1ab08c
    if (!(bl & 0x02))
        goto loc_1ab097;
    memoryASet32(ds, 0x1e0044, memoryAGet32(ds, 0x1e0044) + 1);
loc_1ab097: // 0160:1ab097
    if (!(bl & 0x04))
        goto loc_1ab0a2;
    memoryASet32(ds, 0x1e0050, memoryAGet32(ds, 0x1e0050) + 1);
loc_1ab0a2: // 0160:1ab0a2
    if (!(bl & 0x08))
        goto loc_1ab0ad;
    memoryASet32(ds, 0x1e005c, memoryAGet32(ds, 0x1e005c) + 1);
loc_1ab0ad: // 0160:1ab0ad
    eax = 0x00000001;
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x1e0004, eax);
    sub_1ab586();
    eax = memoryAGet32(ds, 0x3a1f00);
    esi = memoryAGet32(ds, 0x1e3998);
    memoryASet32(ds, 0x3a1e78, ecx);
    memoryASet32(ds, 0x1e3a6e, eax);
    memoryASet32(ds, 0x3a1f00, edx);
    if (esi == 0xffffffff)
        goto loc_1ab0ed;
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_1ab107;
loc_1ab0ed: // 0160:1ab0ed
    if (memoryAGet32(ds, 0x1e3d20) == 0x00000000)
        goto loc_1ab100;
    memoryASet32(ds, 0x1e36e4, 0x00000005);
loc_1ab100: // 0160:1ab100
    sub_1a5f62();
    goto loc_1ab137;
loc_1ab107: // 0160:1ab107
    eax = memoryAGet32(ds, 0x1e3a66);
    if (eax < 0x00000002)
        goto loc_1ab11a;
    if (eax <= 0x00000002)
        goto loc_1ab127;
    if (eax == 0x00000003)
        goto loc_1ab130;
    goto loc_1ab137;
loc_1ab11a: // 0160:1ab11a
    if (eax != edx)
        goto loc_1ab137;
    eax = ebx;
    sub_1a8caa();
    goto loc_1ab137;
loc_1ab127: // 0160:1ab127
    eax = ebx;
    sub_1a9220();
    goto loc_1ab137;
loc_1ab130: // 0160:1ab130
    eax = ebx;
    sub_1a92f5();
loc_1ab137: // 0160:1ab137
    sub_1a5720();
loc_1ab13c: // 0160:1ab13c
    eax = 0;
    goto loc_1a62f9;
}
void sub_1ab143() // 0160:1ab143 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xfffffff0;
    memoryASet32(ds, 0x1e15fc, edx);
    memoryASet32(ds, 0x1e3ab4, edx);
    memoryASet32(ds, 0x1e3aac, edx);
    memoryASet32(ds, 0x1e3ab8, edx);
    memoryASet32(ds, 0x1e15f0, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1ab16d() // 0160:1ab16d +long
{
    esp -= 4;
    goto loc_1ab16d;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20077 bytes
loc_1ab16d: // 0160:1ab16d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x1e3a52, edx);
    sub_1aaa18();
    al = memoryAGet32(ds, 0x1e0008) != 0x00000000;
    eax &= 0x000000ff;
    ecx = memoryAGet32(ds, 0x1e3d20);
    memoryASet32(ds, 0x1e3644, eax);
    if (!ecx)
        goto loc_1ab1d9;
    if (memoryAGet(ds, 0x3aa071) != 0x00)
        goto loc_1ab1b9;
    if (memoryAGet(ds, 0x3aa054) != 0x00)
        goto loc_1ab1b9;
    if (memoryAGet(ds, 0x3a9f39) == 0x00)
        goto loc_1ab1c0;
loc_1ab1b9: // 0160:1ab1b9
    eax = 0x00000001;
    goto loc_1ab1c2;
loc_1ab1c0: // 0160:1ab1c0
    eax = 0;
loc_1ab1c2: // 0160:1ab1c2
    if (!eax)
        goto loc_1ab1d9;
    esi = 0x0000001e;
    bl = 0x01;
    memoryASet32(ds, 0x1e36e4, esi);
    memoryASet(ds, 0x3a9f39, bl);
loc_1ab1d9: // 0160:1ab1d9
    edi = memoryAGet32(ds, 0x1e376f);
    if (edi)
        goto loc_1ab2bd;
    if ((int32_t)memoryAGet32(ds, 0x1e3718) < (int32_t)0x000000a8)
        goto loc_1ab2bd;
    if (memoryAGet32(ds, 0x1e36fc) != 0x000000ff)
        goto loc_1ab2bd;
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_1ab22a;
    eax = memoryAGet32(ds, 0x1e3a6e);
    memoryASet32(ds, 0x3a1f00, eax);
    eax = memoryAGet32(ds, 0x1e3a72);
    memoryASet32(ds, 0x1e0004, edi);
    memoryASet32(ds, 0x3a1e78, eax);
loc_1ab22a: // 0160:1ab22a
    if (memoryAGet(ds, 0x3a9f39) == 0x00)
        goto loc_1ab2b8;
    ecx = memoryAGet32(ds, 0x1e000c);
    if (ecx)
        goto loc_1ab2b8;
    if (memoryAGet32(ds, 0x1e15ec) != 0x00000000)
        goto loc_1ab2b8;
    if (memoryAGet32(ds, 0x1e15fc) == 0x00000003)
        goto loc_1ab2b8;
    memoryASet32(ds, 0x1e0004, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1cd0);
    memoryASet32(ds, 0x3a1c90, ecx);
    memoryASet32(ds, 0x1e3a0a, eax);
    sub_1ab586();
    eax = memoryAGet32(ds, 0x3a1f00);
    edx = 0x00000001;
    memoryASet32(ds, 0x1e3a6e, eax);
    memoryASet32(ds, 0x3a1f00, edx);
    eax = memoryAGet32(ds, 0x3a1e78);
    memoryASet32(ds, 0x3a1e78, ecx);
    ecx = memoryAGet32(ds, 0x1e3d20);
    memoryASet32(ds, 0x1e3a72, eax);
    if (!ecx)
        goto loc_1ab2ac;
    sub_1a5f62();
    goto loc_1ab2b1;
loc_1ab2ac: // 0160:1ab2ac
    sub_1a8ec1();
loc_1ab2b1: // 0160:1ab2b1
    sub_1a5720();
    goto loc_1ab2bd;
loc_1ab2b8: // 0160:1ab2b8
    sub_1aaf7e();
loc_1ab2bd: // 0160:1ab2bd
    if (memoryAGet32(ds, 0x1e376f) != 0xffffffff)
        goto loc_1ab2f9;
    if ((int32_t)memoryAGet32(ds, 0x1e3718) < (int32_t)0x000000a8)
        goto loc_1ab2f9;
    ebp = memoryAGet32(ds, 0x1e36fc);
    if (ebp)
        goto loc_1ab2f9;
    sub_1aa7ed();
    memoryASet32(ds, 0x1e0004, ebp);
    memoryASet32(ds, 0x3a1f00, ebp);
    memoryASet32(ds, 0x3a1e78, ebp);
    memoryASet32(ds, 0x1e376f, ebp);
loc_1ab2f9: // 0160:1ab2f9
    if (memoryAGet32(ds, 0x1e376f) != 0xfffffffe)
        goto loc_1ab335;
    if ((int32_t)memoryAGet32(ds, 0x1e3718) < (int32_t)0x000000a8)
        goto loc_1ab335;
    ebp = memoryAGet32(ds, 0x1e36fc);
    if (ebp)
        goto loc_1ab335;
    sub_1aa571();
    memoryASet32(ds, 0x1e0004, ebp);
    memoryASet32(ds, 0x3a1f00, ebp);
    memoryASet32(ds, 0x3a1e78, ebp);
    memoryASet32(ds, 0x1e376f, ebp);
loc_1ab335: // 0160:1ab335
    if (memoryAGet32(ds, 0x1e376f) != 0xfffffffd)
        goto loc_1ab374;
    if ((int32_t)memoryAGet32(ds, 0x1e3718) < (int32_t)0x000000a8)
        goto loc_1ab374;
    eax = memoryAGet32(ds, 0x1e36fc);
    ebp = memoryAGet32(ds, 0x1e3700);
    if (eax != ebp)
        goto loc_1ab374;
    eax ^= ebp;
    edx = 0;
    memoryASet32(ds, 0x1e0004, eax);
    memoryASet32(ds, 0x3a1f00, edx);
    memoryASet32(ds, 0x3a1e78, edx);
    memoryASet32(ds, 0x1e376f, edx);
loc_1ab374: // 0160:1ab374
    if (memoryAGet32(ds, 0x1e0004) == 0x00000000)
        goto loc_1ab387;
    sub_1ab5ab();
    sub_1a67e2();
loc_1ab387: // 0160:1ab387
    sub_1a7271();
    al = memoryAGet32(ds, 0x1e3644) != 0x00000000;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x1e0008, eax);
    sub_1aa8fe();
    goto loc_1a62f9;
}
void sub_1ab3aa() // 0160:1ab3aa +long
{
    esp -= 4;
    push32(edx);
    sub_1a5eb5();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x1e3767, edx);
    memoryASet32(ds, 0x1e376b, edx);
    memoryASet32(ds, 0x1e3777, edx);
loc_1ab3c6: // 0160:1ab3c6
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 2289804);
    memoryASet32(ds, eax + 3870448, edx);
    if ((int32_t)eax < (int32_t)0x0000d200)
        goto loc_1ab3c6;
    edx = pop32();
    esp += 4;
}
void sub_1ab3de() // 0160:1ab3de +long
{
    esp -= 4;
    goto loc_1ab3de;
loc_1a59bb: // 0160:1a59bb
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 23069 bytes
loc_1ab3de: // 0160:1ab3de
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x1e0070);
    if (edx)
        goto loc_1a59bb;
    eax = memoryAGet32(ds, 0x39eac8);
    eax -= memoryAGet32(ds, 0x39eab0); // delta
    ecx = memoryAGet32(ds, 0x39eab4);
    ebx = eax;
    eax = memoryAGet32(ds, 0x39eac4);
    eax -= ecx;
    if (ebx)
        goto loc_1ab425;
    if (eax)
        goto loc_1ab425;
    if (memoryAGet32(ds, 0x39eac0) != 0x00000000)
        goto loc_1ab425;
    if (memoryAGet32(ds, 0x39ea8c) == 0x00000000)
        goto loc_1ab431;
loc_1ab425: // 0160:1ab425
    memoryASet32(ds, 0x1e36f4, 0x00000001);
    goto loc_1ab437;
loc_1ab431: // 0160:1ab431
    memoryASet32(ds, 0x1e36f4, edx);
loc_1ab437: // 0160:1ab437
    ecx = memoryAGet32(ds, 0x1e36ec);
    esi = memoryAGet32(ds, 0x1e36f0);
    ecx += ebx; // mouse pos X shift
    esi += eax; // mouse pos Y shift
    memoryASet32(ds, 0x1e36ec, ecx);
    memoryASet32(ds, 0x1e36f0, esi);
    if ((int32_t)ecx >= 0)
        goto loc_1ab45f;
    ebp = 0;
    memoryASet32(ds, 0x1e36ec, ebp);
loc_1ab45f: // 0160:1ab45f
    if ((int32_t)memoryAGet32(ds, 0x1e36f0) >= (int32_t)0x00000000)
        goto loc_1ab470;
    edx = 0;
    memoryASet32(ds, 0x1e36f0, edx);
loc_1ab470: // 0160:1ab470
    if ((int32_t)memoryAGet32(ds, 0x1e36f0) <= (int32_t)0x000000a7)
        goto loc_1ab486;
    memoryASet32(ds, 0x1e36f0, 0x000000a7);
loc_1ab486: // 0160:1ab486
    if ((int32_t)memoryAGet32(ds, 0x1e36ec) <= (int32_t)0x0000013d)
        goto loc_1ab49c;
    memoryASet32(ds, 0x1e36ec, 0x0000013d);
loc_1ab49c: // 0160:1ab49c
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x00289cb0;
    eax = 0x00306cc0;
    push32(0x00000010);
    ecx = memoryAGet32(ds, 0x1e36f0);
    ebx = memoryAGet32(ds, 0x1e36ec);
    sub_19e0ca();
    goto loc_1a59bb;
}
void sub_1ab586() // 0160:1ab586 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x000000a0;
    edx = 0;
    ecx = 0x00000064;
    memoryASet32(ds, 0x3a1cd0, edx);
    memoryASet32(ds, 0x1e36ec, ebx);
    memoryASet32(ds, 0x1e36f0, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab5ab() // 0160:1ab5ab +long
{
    esp -= 4;
    goto loc_1ab5ab;
loc_1a62f9: // 0160:1a62f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21163 bytes
loc_1ab5ab: // 0160:1ab5ab
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1ab143();
    eax = memoryAGet32(ds, 0x3aa13c);
    eax -= memoryAGet32(ds, 0x1e3720);
    if ((int32_t)eax <= (int32_t)0x00000019)
        goto loc_1ab5c8;
    eax = 0;
loc_1ab5c8: // 0160:1ab5c8
    edx = memoryAGet32(ds, 0x3aa13c);
    memoryASet32(ds, 0x1e3720, edx);
    edx = eax;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x1e371c);
    edx = eax;
    if (!ebx)
        goto loc_1ab670;
    ebx = memoryAGet32(ds, 0x1e3718);
    if ((int32_t)ebx >= 0)
        goto loc_1ab619;
    ecx = ebx + eax;
    memoryASet32(ds, 0x1e3718, ecx);
    if ((int32_t)ecx <= 0)
        goto loc_1ab619;
    edi = 0;
    memoryASet32(ds, 0x1e3718, edi);
loc_1ab619: // 0160:1ab619
    ebp = memoryAGet32(ds, 0x1e3718);
    if ((int32_t)ebp >= 0)
        goto loc_1ab62b;
    ebx = ebp + 168;
    goto loc_1ab630;
loc_1ab62b: // 0160:1ab62b
    ebx = 0x000000a8;
loc_1ab630: // 0160:1ab630
    if ((int32_t)ebx <= 0)
        goto loc_1ab654;
    edx = 0x000000a8;
    edx -= ebx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    edx = 0x00289cb0;
    eax += 0x003b0ef4;
    sub_1ca116();
loc_1ab654: // 0160:1ab654
    if (memoryAGet32(ds, 0x1e3718) != 0x00000000)
        goto loc_1a62f9;
    sub_1ab3de();
    sub_1aa1d8();
    goto loc_1a62f9;
loc_1ab670: // 0160:1ab670
    if ((int32_t)memoryAGet32(ds, 0x1e3718) >= (int32_t)0x000000a8)
        goto loc_1ab6e1;
    eax = memoryAGet32(ds, 0x1e3767);
    sub_1a5d81();
    esi = memoryAGet32(ds, 0x1e3718);
    esi += edx;
    memoryASet32(ds, 0x1e3718, esi);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_1ab6ac;
    eax = 0x000000a8;
    memoryASet32(ds, 0x39ea80, ebx);
    memoryASet32(ds, 0x1e3718, eax);
loc_1ab6ac: // 0160:1ab6ac
    ebx = 0x000000a8;
    edx = memoryAGet32(ds, 0x1e3718);
    ebx -= edx;
    if ((int32_t)ebx <= 0)
        goto loc_1a62f9;
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = 0x00289cb0;
    eax <<= 6;
    edx += eax;
    eax = 0x003b0ef4;
    sub_1ca116();
    goto loc_1a62f9;
loc_1ab6e1: // 0160:1ab6e1
    sub_1aa390();
    goto loc_1a62f9;
}
void sub_1ab6eb() // 0160:1ab6eb +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax >>= 16;
    edx &= 0x0000ffff;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x3a1c54, edx);
    memoryASet32(ds, 0x3a1c58, eax);
    edx = pop32();
    esp += 4;
}
void sub_1ab709() // 0160:1ab709 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x3a1c54) * 0x00006255;
    esi = memoryAGet32(ds, 0x3a1c58);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    edx = (int32_t)edx * (int32_t)ebx;
    edx >>= 16;
    memoryASet32(ds, 0x3a1c54, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab73d() // 0160:1ab73d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    ebx = esi;
    eax = 0;
    edx = 0;
loc_1ab749: // 0160:1ab749
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_1ab76e;
    if (edx >= 0x00000010)
        goto loc_1ab76e;
    ecx = eax;
    ecx <<= 3;
    eax >>= 29;
    eax |= ecx;
    ecx = edx;
    ebx++;
    edx++;
    cl = memoryAGet(ds, ecx + esi);
    ecx &= 0x000000ff;
    eax ^= ecx;
    goto loc_1ab749;
loc_1ab76e: // 0160:1ab76e
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ab773() // 0160:1ab773 +long +stackDrop32
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    push32(eax);
    edi = ecx;
    if ((int32_t)edx >= 0)
        goto loc_1ab787;
    ecx = 0;
    edx = -edx;
    memoryASet32(ds, esp + 48, ecx);
loc_1ab787: // 0160:1ab787
    eax = memoryAGet32(ds, esp + 36);
    eax = (int32_t)eax * (int32_t)ebx;
    eax += memoryAGet32(ds, esp);
    eax += edx;
    edx = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    eax = (int32_t)eax * (int32_t)edx;
    ebx = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, esp + 28);
    eax += ebx;
    ecx = 0;
    edx += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 24, edx);
    goto loc_1ab841;
loc_1ab7bc: // 0160:1ab7bc
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    esi = 0;
    edx += edi;
    goto loc_1ab80e;
loc_1ab7cc: // 0160:1ab7cc
    ecx = memoryAGet32(ds, esp + 48);
    if (ecx)
        goto loc_1ab7ee;
    cl = memoryAGet(ds, ebx);
    if (ecx == 0x00000080)
        goto loc_1ab80a;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_1ab80a;
    cl = memoryAGet(ds, ebx);
    goto loc_1ab808;
loc_1ab7ee: // 0160:1ab7ee
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1ab80a;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_1ab80a;
    cl = memoryAGet(ds, edx);
loc_1ab808: // 0160:1ab808
    memoryASet(ds, eax, cl);
loc_1ab80a: // 0160:1ab80a
    eax++;
    edx--;
    ebx++;
    esi++;
loc_1ab80e: // 0160:1ab80e
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_1ab81e;
    if ((int32_t)esi < 0)
        goto loc_1ab81e;
    if ((int32_t)esi < (int32_t)0x000003c0)
        goto loc_1ab7cc;
loc_1ab81e: // 0160:1ab81e
    eax = memoryAGet32(ds, esp + 36);
    ebx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 24);
    esi++;
    ebx += eax;
    eax = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, ebx);
    ecx += eax;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 24, ecx);
loc_1ab841: // 0160:1ab841
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1ab85a;
    if ((int32_t)eax < 0)
        goto loc_1ab85a;
    if ((int32_t)eax < (int32_t)0x00000190)
        goto loc_1ab7bc;
loc_1ab85a: // 0160:1ab85a
    esp += 0x00000008;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 32;
}
void sub_1ab862() // 0160:1ab862 +long +stackDrop28
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    esi = memoryAGet32(ds, esp + 32);
    edi = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, esp + 8, eax);
    ebp = ecx;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)ebx;
    eax += memoryAGet32(ds, esp + 8);
    eax += edx;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 44);
    eax = (int32_t)eax * (int32_t)edi;
    ecx = memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 40);
    eax += ecx;
    edx += eax;
    eax = memoryAGet32(ds, 0x1e00a0);
    memoryASet32(ds, esp + 36, edx);
    if (!eax)
        goto loc_1ab8be;
    edx = memoryAGet32(ds, esp + 48);
    push32(edi);
    eax = memoryAGet32(ds, esp + 12);
    ecx = esi;
    push32(edx);
    ebx = ebp;
    edx = memoryAGet32(ds, esp + 44);
    sub_1ad4e0();
loc_1ab8be: // 0160:1ab8be
    ebx = memoryAGet32(ds, esp + 44);
    ecx = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp + 12, ebx);
    eax = ebx + esi;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, eax);
    goto loc_1ab925;
loc_1ab8d6: // 0160:1ab8d6
    if ((int32_t)eax <= 0)
        goto loc_1ab904;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 56))
        goto loc_1ab904;
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, esp + 8);
    esi = 0;
    goto loc_1ab900;
loc_1ab8f0: // 0160:1ab8f0
    if ((int32_t)edx <= 0)
        goto loc_1ab8fc;
    if ((int32_t)edx >= (int32_t)edi)
        goto loc_1ab8fc;
    cl = memoryAGet(ds, eax);
    memoryASet(ds, ebx, cl);
loc_1ab8fc: // 0160:1ab8fc
    edx++;
    ebx++;
    eax++;
    esi++;
loc_1ab900: // 0160:1ab900
    if ((int32_t)esi < (int32_t)ebp)
        goto loc_1ab8f0;
loc_1ab904: // 0160:1ab904
    eax = memoryAGet32(ds, esp + 48);
    ebx = memoryAGet32(ds, esp + 8);
    esi = memoryAGet32(ds, esp + 12);
    ecx = memoryAGet32(ds, esp + 36);
    esi++;
    ebx += eax;
    ecx += edi;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 36, ecx);
    memoryASet32(ds, esp + 12, esi);
loc_1ab925: // 0160:1ab925
    eax = memoryAGet32(ds, esp + 12);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_1ab8d6;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 28;
}
void sub_1ab937() // 0160:1ab937 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 28, edx);
    goto loc_1abb56;
loc_1ab94c: // 0160:1ab94c
    eax = ebx;
    edx = ebx;
    ebx = 0x0000000c;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1abb52;
    edx = memoryAGet32(ds, esp + 8);
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1abb52;
    ecx = memoryAGet32(ds, esp + 28);
    ecx <<= 2;
    if ((int32_t)memoryAGet32(ds, ecx + 2995056) <= (int32_t)0x00000000)
        goto loc_1abb52;
    edx = memoryAGet32(ds, esp + 4);
    sub_1ab709();
    edx = memoryAGet32(ds, esp);
    edx += eax;
    eax = edx;
    eax <<= 4;
    memoryASet32(ds, esp + 24, edx);
    edx = memoryAGet32(ds, eax + 1969098);
    eax = memoryAGet32(ds, eax + 1969102);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp + 28);
    eax += edx;
    memoryASet32(ds, esp + 32, edx);
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_1abb4a;
    esi = 0x00000190;
    eax = ecx;
    edx <<= 2;
    ebx = 0;
    edx += ecx;
    goto loc_1ab9f0;
loc_1ab9d5: // 0160:1ab9d5
    ecx = memoryAGet32(ds, eax + 2995056);
    if ((int32_t)esi <= (int32_t)ecx)
        goto loc_1ab9e1;
    esi = ecx;
loc_1ab9e1: // 0160:1ab9e1
    edi = memoryAGet32(ds, eax + 2995056);
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_1ab9ed;
    ebx = edi;
loc_1ab9ed: // 0160:1ab9ed
    eax += 0x00000004;
loc_1ab9f0: // 0160:1ab9f0
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1ab9d5;
    eax = memoryAGet32(ds, esp + 32);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    eax += memoryAGet32(ds, esp + 28);
    edx = edi;
    ebp = eax + edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = 0;
    al = memoryAGet(ds, eax + ebp + 3244656);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_1aba3c;
    ecx = 0x00000001;
loc_1aba3c: // 0160:1aba3c
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 28);
    ebp += eax;
    eax = edi + edi;
    edx = edi;
    ebp += eax;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    al = memoryAGet(ds, eax + ebp + 3244656);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_1aba73;
    ecx = 0x00000001;
loc_1aba73: // 0160:1aba73
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    eax += memoryAGet32(ds, esp + 28);
    edx = edi + edi*2;
    eax += edx;
    memoryASet32(ds, esp + 16, eax);
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += memoryAGet32(ds, esp + 16);
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_1abaaf;
    ecx = 0x00000001;
loc_1abaaf: // 0160:1abaaf
    edx = ebx + 2;
    edx = edx * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 28);
    eax = 0;
    edx += ebp;
    ebp = memoryAGet32(ds, esp + 32);
    goto loc_1abadb;
loc_1abac6: // 0160:1abac6
    edi = memoryAGet(ds, edx + 3244656);
    if (edi != 0x00000080)
        goto loc_1abada;
    ecx = 0x00000001;
loc_1abada: // 0160:1abada
    eax++;
loc_1abadb: // 0160:1abadb
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_1abae3;
    if (!ecx)
        goto loc_1abac6;
loc_1abae3: // 0160:1abae3
    if ((int32_t)ebx >= (int32_t)0x0000014e)
        goto loc_1abb4a;
    eax = ebx;
    eax -= esi;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1abb4a;
    if (ecx)
        goto loc_1abb4a;
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    push32(eax);
    push32(0x00000190);
    push32(0x000003c0);
    edx = memoryAGet32(ds, esp + 32);
    eax = ebx + 4;
    push32(0x00000140);
    eax -= edx;
    push32(eax);
    ebx = memoryAGet32(ds, esp + 48);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 56);
    eax = memoryAGet32(ds, esp + 48);
    push32(0x00318270);
    eax <<= 4;
    push32(edx);
    ebx = memoryAGet32(ds, eax + 1969094);
    edx = memoryAGet32(ds, eax + 1969090);
    eax = 0x00205a90;
    sub_1ab773();
loc_1abb4a: // 0160:1abb4a
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 28, memoryAGet32(ds, esp + 28) + eax);
loc_1abb52: // 0160:1abb52
    memoryASet32(ds, esp + 28, memoryAGet32(ds, esp + 28) + 1);
loc_1abb56: // 0160:1abb56
    ebx = memoryAGet32(ds, esp + 28);
    if ((int32_t)ebx < (int32_t)0x000003c0)
        goto loc_1ab94c;
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1abb6d() // 0160:1abb6d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    edi = 0;
    memoryASet32(ds, esp, edx);
    ebp = 0;
loc_1abb7f: // 0160:1abb7f
    eax = memoryAGet32(ds, esp);
    esi = ebp;
    edx = ebp;
    ebx = edi;
    memoryASet32(ds, edi + 2995056, ebp);
loc_1abb8e: // 0160:1abb8e
    ecx = 0;
    cl = memoryAGet(ds, eax + 3244656);
    if (ecx == 0x00000080)
        goto loc_1abbc4;
    si ^= 0x0001;
    if (!esi)
        goto loc_1abbbd;
    memoryASet(ds, eax + 3244656, 0x81);
    if (ebp != memoryAGet32(ds, ebx + 2995056))
        goto loc_1abbc4;
    memoryASet32(ds, ebx + 2995056, edx);
    goto loc_1abbc4;
loc_1abbbd: // 0160:1abbbd
    memoryASet(ds, eax + 3244656, 0x82);
loc_1abbc4: // 0160:1abbc4
    edx++;
    eax += 0x000003c0;
    if ((int32_t)edx < (int32_t)0x00000190)
        goto loc_1abb8e;
    ebx = memoryAGet32(ds, esp);
    ebx++;
    edi += 0x00000004;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x000003c0)
        goto loc_1abb7f;
    esp += 0x00000004;
    goto loc_1ac878;
    // gap 3212 bytes
loc_1ac878: // 0160:1ac878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abbec() // 0160:1abbec +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = 0;
loc_1abbf5: // 0160:1abbf5
    ecx = edi;
    edx = 0;
    ecx &= 0x0000007f;
    goto loc_1abc57;
loc_1abbfe: // 0160:1abbfe
    eax = edx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    if (eax != 0x00000081)
        goto loc_1abc56;
    edx++;
    eax = edx * 0x000003c0;
    eax += edi;
loc_1abc20: // 0160:1abc20
    ebx = 0;
    bl = memoryAGet(ds, eax + 3244656);
    if (ebx == 0x00000082)
        goto loc_1abc56;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_1abc56;
    ebx = edx;
    ebx &= 0x0000007f;
    ebx = ebx * 0x00000140;
    ebx += esi;
    eax += 0x000003c0;
    bl = memoryAGet(ds, ecx + ebx);
    edx++;
    memoryASet(ds, eax + 3243696, bl);
    goto loc_1abc20;
loc_1abc56: // 0160:1abc56
    edx++;
loc_1abc57: // 0160:1abc57
    if ((int32_t)edx < (int32_t)0x00000190)
        goto loc_1abbfe;
    edi++;
    if ((int32_t)edi < (int32_t)0x000003c0)
        goto loc_1abbf5;
    goto loc_1ac879;
    // gap 3084 bytes
loc_1ac879: // 0160:1ac879
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abc6d() // 0160:1abc6d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edi = 0;
loc_1abc78: // 0160:1abc78
    eax = edi;
    edx = memoryAGet32(ds, esp + 4);
    eax &= 0x0000001f;
    edx += eax;
    ebx = 0;
    memoryASet32(ds, esp + 8, edx);
    goto loc_1abce7;
loc_1abc8b: // 0160:1abc8b
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    edx = memoryAGet32(ds, esp);
    eax &= 0x000000ff;
    if (eax != edx)
        goto loc_1abce6;
    eax = ebx * 0x000003c0;
    edx = memoryAGet32(ds, esp + 8);
    esi = 0;
    eax += edi;
    goto loc_1abcc9;
loc_1abcb4: // 0160:1abcb4
    eax += 0x000003c0;
    ebx++;
    esi++;
    cl = memoryAGet(ds, edx);
    edx += 0x00000140;
    memoryASet(ds, eax + 3243696, cl);
loc_1abcc9: // 0160:1abcc9
    if ((int32_t)esi >= (int32_t)0x00000008)
        goto loc_1abcd6;
    if ((int32_t)ebx < (int32_t)0x00000190)
        goto loc_1abcb4;
loc_1abcd6: // 0160:1abcd6
    ecx = 0;
    cl = memoryAGet(ds, eax + 3244656);
    if (ecx == 0x00000082)
        goto loc_1abcb4;
loc_1abce6: // 0160:1abce6
    ebx++;
loc_1abce7: // 0160:1abce7
    if ((int32_t)ebx < (int32_t)0x00000190)
        goto loc_1abc8b;
    edi++;
    if ((int32_t)edi < (int32_t)0x000003c0)
        goto loc_1abc78;
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abd00() // 0160:1abd00 +long
{
    esp -= 4;
    push32(edx);
    dl = 0x80;
    eax = 0;
loc_1abd05: // 0160:1abd05
    eax++;
    memoryASet(ds, eax + 3244655, dl);
    if ((int32_t)eax < (int32_t)0x0005dc00)
        goto loc_1abd05;
    edx = pop32();
    esp += 4;
}
void sub_1abd15() // 0160:1abd15 +long
{
    esp -= 4;
    push32(ecx);
    ecx = eax;
    if ((int32_t)eax < 0)
        goto loc_1abd40;
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_1abd40;
    if ((int32_t)edx < 0)
        goto loc_1abd40;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_1abd40;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet(ds, ecx + eax + 3244656, bl);
loc_1abd40: // 0160:1abd40
    ecx = pop32();
    esp += 4;
}
void sub_1abd42() // 0160:1abd42 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    if ((int32_t)eax < 0)
        goto loc_1abd74;
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_1abd74;
    if ((int32_t)edx < 0)
        goto loc_1abd74;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_1abd74;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 3244656);
    eax &= 0x000000ff;
    ebx = pop32();
    esp += 4;
    return;
loc_1abd74: // 0160:1abd74
    eax = 0;
    ebx = pop32();
    esp += 4;
}
void sub_1abd78() // 0160:1abd78 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    edx = 0x000003c0;
    eax = 0x00000032;
    memoryASet32(ds, esp + 8, edx);
    ecx = edx;
    memoryASet32(ds, esp + 24, edx);
    ecx ^= edx;
    edx = 0x00000064;
    sub_1ab709();
    edx = 0x00000167;
    memoryASet32(ds, esp + 16, eax);
    eax = 0;
    sub_1ab709();
    edx = eax;
    esi = 0x000000b4;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    idiv32(esi);
    ebx = 0xffffffff;
    edi = 0x00000001;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 32, ebx);
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_1abdde;
    if ((int32_t)edx <= (int32_t)0x0000008c)
        goto loc_1abde8;
loc_1abdde: // 0160:1abdde
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_1abdee;
loc_1abde8: // 0160:1abde8
    eax = 0;
    memoryASet32(ds, esp + 20, eax);
loc_1abdee: // 0160:1abdee
    edx = 0x0000015e;
    eax = 0x000000fa;
    sub_1ab709();
    edx = 0x00000096;
    memoryASet32(ds, esp + 28, eax);
    eax = 0x00000032;
    sub_1ab709();
    edx = 0x00000001;
    memoryASet32(ds, esp + 36, eax);
    eax = 0xffffffff;
    sub_1ab709();
    edx = 0x00000032;
    memoryASet32(ds, esp + 12, eax);
    eax = 0x00000019;
    sub_1ab709();
    memoryASet32(ds, esp, eax);
loc_1abe39: // 0160:1abe39
    if ((int32_t)ecx >= (int32_t)0x000003c0)
        goto loc_1ac0cc;
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1abe99;
    edx = 0x00000001;
    sub_1ab709();
    edx = eax + ebp;
    esi = 0x00000168;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = 0x000000b4;
    ebp = edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_1abe89;
    if ((int32_t)edx <= (int32_t)0x0000008c)
        goto loc_1abe93;
loc_1abe89: // 0160:1abe89
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_1abe99;
loc_1abe93: // 0160:1abe93
    ebx = 0;
    memoryASet32(ds, esp + 20, ebx);
loc_1abe99: // 0160:1abe99
    edx = memoryAGet32(ds, esp + 36);
    ebx = memoryAGet32(ds, ebp * 4 + 0x1d7650);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = memoryAGet32(ds, esp + 28);
    esi += eax;
    if ((int32_t)ecx < 0)
        goto loc_1abffc;
    if ((int32_t)esi >= (int32_t)0x0000018f)
        goto loc_1abffc;
    edx = esi + -1;
    eax = ecx;
    sub_1abd42();
    if (eax != 0x00000080)
        goto loc_1ac021;
    edx = esi;
    eax = ecx;
    sub_1abd42();
    if (eax != 0x00000080)
        goto loc_1ac021;
    edx = esi + 1;
    eax = ecx;
    sub_1abd42();
    if (eax != 0x00000080)
        goto loc_1ac021;
    if ((int32_t)esi >= (int32_t)0x0000014a)
        goto loc_1abf28;
    if ((int32_t)ecx >= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_1abf1e;
    memoryASet32(ds, esp + 24, ecx);
loc_1abf1e: // 0160:1abf1e
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ds, esp + 32))
        goto loc_1abf28;
    memoryASet32(ds, esp + 32, ecx);
loc_1abf28: // 0160:1abf28
    if ((int32_t)esi >= (int32_t)0x0000014a)
        goto loc_1abf3c;
    if (!ecx)
        goto loc_1abf3c;
    if (ecx != 0x000003bf)
        goto loc_1abf7c;
loc_1abf3c: // 0160:1abf3c
    ebx = memoryAGet32(ds, esp + 32);
    if ((int32_t)ebx <= (int32_t)0xffffffff)
        goto loc_1abf7c;
    edx = memoryAGet32(ds, esp + 24);
    eax = ebx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000050)
        goto loc_1abf6a;
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1abf5c;
    memoryASet32(ds, esp + 8, edx);
loc_1abf5c: // 0160:1abf5c
    eax = memoryAGet32(ds, esp + 32);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1abf6a;
    memoryASet32(ds, esp + 4, eax);
loc_1abf6a: // 0160:1abf6a
    ebx = 0x000003c0;
    eax = 0xffffffff;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 32, eax);
loc_1abf7c: // 0160:1abf7c
    ebx = 0x00000001;
    edx = esi;
    eax = ecx;
    sub_1abd15();
    edx = memoryAGet32(ds, esp + 20);
    esi++;
    if (edx != 0x00000001)
        goto loc_1abfb9;
    if (edi != 0xffffffff)
        goto loc_1ac01f;
    ebx = edx;
    eax = ecx;
    edx = esi;
    sub_1abd15();
    edx = 0x00000064;
    eax = 0x00000032;
    edi = 0x00000001;
    goto loc_1abff1;
loc_1abfb9: // 0160:1abfb9
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1ac01f;
    ebx = 0x00000001;
    edx = esi;
    eax = ecx;
    sub_1abd15();
    if (edi != 0x00000001)
        goto loc_1abfe2;
    edi = 0xffffffff;
    goto loc_1abfe7;
loc_1abfe2: // 0160:1abfe2
    edi = 0x00000001;
loc_1abfe7: // 0160:1abfe7
    edx = 0x00000064;
    eax = 0x00000032;
loc_1abff1: // 0160:1abff1
    sub_1ab709();
    memoryASet32(ds, esp + 16, eax);
    goto loc_1ac01f;
loc_1abffc: // 0160:1abffc
    esi = memoryAGet32(ds, esp + 20);
    if (esi != 0x00000001)
        goto loc_1ac01f;
    if (edi != 0xffffffff)
        goto loc_1ac01f;
    edx = 0x00000064;
    eax = 0x00000032;
    edi = esi;
    sub_1ab709();
    memoryASet32(ds, esp + 16, eax);
loc_1ac01f: // 0160:1ac01f
    ecx += edi;
loc_1ac021: // 0160:1ac021
    if (memoryAGet32(ds, esp + 20) != 0x00000001)
        goto loc_1ac088;
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp + 36);
    esi += eax;
    memoryASet32(ds, esp + 36, esi);
    if ((int32_t)esi >= (int32_t)0x00000032)
        goto loc_1ac043;
    memoryASet32(ds, esp + 36, 0x00000032);
loc_1ac043: // 0160:1ac043
    if ((int32_t)memoryAGet32(ds, esp + 36) <= (int32_t)0x00000096)
        goto loc_1ac055;
    memoryASet32(ds, esp + 36, 0x00000096);
loc_1ac055: // 0160:1ac055
    edx = memoryAGet32(ds, esp);
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1ac088;
    edx = 0x00000032;
    eax = 0x00000019;
    sub_1ab709();
    edx = 0x00000001;
    memoryASet32(ds, esp, eax);
    eax = 0xffffffff;
    sub_1ab709();
    memoryASet32(ds, esp + 12, eax);
loc_1ac088: // 0160:1ac088
    edx = 0x00000001;
    eax = 0xffffffff;
    sub_1ab709();
    edx = memoryAGet32(ds, esp + 28);
    edx += eax;
    memoryASet32(ds, esp + 28, edx);
    if ((int32_t)edx >= (int32_t)0x000000fa)
        goto loc_1ac0b1;
    memoryASet32(ds, esp + 28, 0x000000fa);
loc_1ac0b1: // 0160:1ac0b1
    if ((int32_t)memoryAGet32(ds, esp + 28) <= (int32_t)0x0000015e)
        goto loc_1abe39;
    memoryASet32(ds, esp + 28, 0x0000015e);
    goto loc_1abe39;
loc_1ac0cc: // 0160:1ac0cc
    esp += 0x00000028;
    goto loc_1ac878;
    // gap 1956 bytes
loc_1ac878: // 0160:1ac878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac0d4() // 0160:1ac0d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    edx = 0x00000030;
    eax = 0x000000c0;
loc_1ac0e7: // 0160:1ac0e7
    ebx = memoryAGet32(ds, eax + 2995056);
    if ((int32_t)ebx < (int32_t)0x00000064)
        goto loc_1ac0fa;
    if ((int32_t)ebx <= (int32_t)0x0000014e)
        goto loc_1ac107;
loc_1ac0fa: // 0160:1ac0fa
    if ((int32_t)eax >= (int32_t)0x00000f00)
        goto loc_1ac107;
    eax += 0x00000004;
    edx++;
    goto loc_1ac0e7;
loc_1ac107: // 0160:1ac107
    eax = edx;
    esi = 0;
    edi = 0;
    memoryASet32(ds, esp + 8, esi);
    eax <<= 2;
    ebp = edx + -1;
loc_1ac117: // 0160:1ac117
    if (esi)
        goto loc_1ac144;
    if ((int32_t)eax >= (int32_t)0x00000f00)
        goto loc_1ac144;
    ebp++;
    ebx = memoryAGet32(ds, eax + 2995060);
    eax += 0x00000004;
    edx++;
    if ((int32_t)ebx > (int32_t)0x0000016e)
        goto loc_1ac13a;
    if ((int32_t)ebx >= (int32_t)0x00000064)
        goto loc_1ac117;
loc_1ac13a: // 0160:1ac13a
    esi = ebp;
    edi = memoryAGet32(ds, eax + 2995052);
    goto loc_1ac117;
loc_1ac144: // 0160:1ac144
    eax = edi + 8;
    memoryASet32(ds, esp + 4, eax);
    eax = edi + -8;
    memoryASet32(ds, esp, eax);
    eax = edx;
    ebp = 0;
    eax <<= 2;
    ebx = edx + -96;
loc_1ac15b: // 0160:1ac15b
    if (!esi)
        goto loc_1ac1b6;
    if (memoryAGet32(ds, esp + 8) != 0x00000000)
        goto loc_1ac1b6;
    if ((int32_t)edx >= (int32_t)0x000003c0)
        goto loc_1ac1b6;
    ebx++;
    ecx = memoryAGet32(ds, eax + 2995060);
    eax += 0x00000004;
    edx++;
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_1ac15b;
    if ((int32_t)ecx <= (int32_t)0x00000064)
        goto loc_1ac15b;
    ecx = esi + 128;
    if ((int32_t)edx >= (int32_t)ecx)
        goto loc_1ac192;
    esi = 0;
loc_1ac192: // 0160:1ac192
    ecx = memoryAGet32(ds, eax + 2995056);
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esp))
        goto loc_1ac1a3;
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1ac1b0;
loc_1ac1a3: // 0160:1ac1a3
    ebp++;
    if ((int32_t)ebp <= (int32_t)0x00000080)
        goto loc_1ac15b;
    esi = 0;
    goto loc_1ac15b;
loc_1ac1b0: // 0160:1ac1b0
    memoryASet32(ds, esp + 8, ebx);
    goto loc_1ac15b;
loc_1ac1b6: // 0160:1ac1b6
    if (!esi)
        goto loc_1ac30f;
    if (memoryAGet32(ds, esp + 8) == 0x00000000)
        goto loc_1ac30f;
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    edi -= 0x0000000c;
    push32(edi);
    ebp = esi + -32;
    push32(ebp);
    push32(0x00318270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x000000e0;
    eax = 0x00205a90;
    sub_1ab773();
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    edi -= 0x00000010;
    push32(edi);
    ebp += 0x00000020;
    push32(ebp);
    push32(0x00318270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x000000e0;
loc_1ac231: // 0160:1ac231
    eax = 0x00205a90;
    sub_1ab773();
    eax = ebp + 32;
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1ac277;
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(edi);
    ebp = memoryAGet32(ds, esp + 32);
    push32(ebp);
    push32(0x00318270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000009);
    edx = 0x00000100;
    goto loc_1ac231;
loc_1ac277: // 0160:1ac277
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(edi);
    edx = memoryAGet32(ds, esp + 32);
    push32(edx);
    push32(0x00318270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    eax = 0x00205a90;
    edx = 0x00000120;
    sub_1ab773();
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    eax = edi + 16;
    ebp = memoryAGet32(ds, esp + 28);
    push32(eax);
    ebp += 0x00000020;
    push32(ebp);
    push32(0x00318270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x00000120;
    eax = 0x00205a90;
    sub_1ab773();
    edx = esi + -8;
    ebx = ebp;
    eax = edx;
    ebx <<= 2;
    eax <<= 2;
    goto loc_1ac304;
loc_1ac2fa: // 0160:1ac2fa
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, eax + 2995052, edi);
loc_1ac304: // 0160:1ac304
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1ac30f;
    if ((int32_t)eax < (int32_t)0x00000f00)
        goto loc_1ac2fa;
loc_1ac30f: // 0160:1ac30f
    esp += 0x00000010;
    goto loc_1ac878;
    // gap 1377 bytes
loc_1ac878: // 0160:1ac878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac317() // 0160:1ac317 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    ebp = ebx;
    edx = 0;
    eax = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    edx = 0x00000380;
loc_1ac336: // 0160:1ac336
    sub_1b7c85();
    ecx = eax + 32;
    ebx = ecx;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 2995056);
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_1ac356;
    if ((int32_t)edx <= (int32_t)0x0000014e)
        goto loc_1ac35f;
loc_1ac356: // 0160:1ac356
    edx = 0x00000380;
    eax = 0;
    goto loc_1ac336;
loc_1ac35f: // 0160:1ac35f
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
    if (!ebp)
        goto loc_1ac57f;
    ebx = 0x0000016e;
    if (ecx >= 0x000003c0)
        goto loc_1ac3be;
    edx = 0;
    eax = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    ax = memoryAGet16(ds, esi + 2519824);
    edx &= eax;
    eax = ecx + 351360;
    esi += 0x0002ae40;
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ac429;
loc_1ac3be: // 0160:1ac3be
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_1ac3cc: // 0160:1ac3cc
    eax = ebx;
    ebx--;
    if ((int32_t)eax <= 0)
        goto loc_1ac3cc;
    if (ecx >= 0x000003c0)
        goto loc_1ac3cc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ac3cc;
loc_1ac429: // 0160:1ac429
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_1ac437: // 0160:1ac437
    eax = ebx;
    ebx--;
    if ((int32_t)eax <= 0)
        goto loc_1ac494;
    if (ecx >= 0x000003c0)
        goto loc_1ac494;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ac437;
loc_1ac494: // 0160:1ac494
    eax = ebx + -5;
    ebx += 0x00000003;
    if ((int32_t)eax <= 0)
        goto loc_1ac5da;
    if (ecx >= 0x000003c0)
        goto loc_1ac5da;
    esi = ebx + -8;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebp + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    ebp = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    ebp &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_1ac5da;
    esi = edx;
    ebx = 0;
loc_1ac520: // 0160:1ac520
    eax = ebx;
    ebx++;
    if ((int32_t)eax <= 0)
        goto loc_1ac520;
    if (ecx >= 0x000003c0)
        goto loc_1ac520;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx++;
    ax = memoryAGet16(ds, esi + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ac5da;
    goto loc_1ac520;
loc_1ac57f: // 0160:1ac57f
    ebx = 0;
loc_1ac581: // 0160:1ac581
    eax = ebx;
    ebx++;
    if ((int32_t)eax <= 0)
        goto loc_1ac581;
    if (ecx >= 0x000003c0)
        goto loc_1ac581;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebx++;
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ac581;
loc_1ac5da: // 0160:1ac5da
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, edi, ecx);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ac5ea() // 0160:1ac5ea +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0;
    ebx = 0;
    edi = eax;
    goto loc_1ac661;
loc_1ac618: // 0160:1ac618
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1ac65b;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1ac65b;
    ecx = 0x00000001;
loc_1ac65b: // 0160:1ac65b
    ebx += 0x000000ac;
loc_1ac661: // 0160:1ac661
    if ((int32_t)ebx >= (int32_t)0x00000ac0)
        goto loc_1ac66d;
    if (!ecx)
        goto loc_1ac618;
loc_1ac66d: // 0160:1ac66d
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac674() // 0160:1ac674 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0x00000008;
    ecx = esi + 7680;
    edi = eax + eax;
loc_1ac692: // 0160:1ac692
    if ((int32_t)ebx >= (int32_t)0x0000014e)
        goto loc_1ac6fa;
    if ((int32_t)ebx <= 0)
        goto loc_1ac6e4;
    if (esi >= 0x000003c0)
        goto loc_1ac6e4;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ac6eb;
loc_1ac6e4: // 0160:1ac6e4
    eax = 0x00000001;
    goto loc_1ac6ed;
loc_1ac6eb: // 0160:1ac6eb
    eax = 0;
loc_1ac6ed: // 0160:1ac6ed
    if (!eax)
        goto loc_1ac6fa;
    ecx += 0x000003c0;
    ebx++;
    goto loc_1ac692;
loc_1ac6fa: // 0160:1ac6fa
    if ((int32_t)ebx < (int32_t)0x0000014e)
        goto loc_1ac707;
    ebx = 0xffffffff;
loc_1ac707: // 0160:1ac707
    eax = ebx;
    goto loc_1ac879;
    // gap 363 bytes
loc_1ac879: // 0160:1ac879
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac70e() // 0160:1ac70e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, 0x1e3648);
    edx = 0;
    ecx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
    if (!esi)
        goto loc_1ac7c5;
    edi = 0;
    ebp = 0;
loc_1ac734: // 0160:1ac734
    esi = ebp;
loc_1ac736: // 0160:1ac736
    edx = esp;
    eax = esp + 4;
    ebx = ecx;
    sub_1ac317();
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx <<= 9;
    eax <<= 9;
    cl ^= 0x01;
    sub_1ac5ea();
    if (!eax)
        goto loc_1ac766;
    eax = esi;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_1ac736;
loc_1ac766: // 0160:1ac766
    if ((int32_t)esi >= (int32_t)0x00000200)
        goto loc_1ac7a4;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, edi + 3803494, eax);
    eax = memoryAGet32(ds, esp);
    eax -= 0x00000002;
    eax <<= 9;
    memoryASet32(ds, edi + 3803498, eax);
    eax = memoryAGet32(ds, edi + 3803494);
    memoryASet32(ds, edi + 3803502, eax);
    eax = memoryAGet32(ds, edi + 3803498);
    memoryASet32(ds, edi + 3803506, eax);
    goto loc_1ac7ae;
loc_1ac7a4: // 0160:1ac7a4
    memoryASet32(ds, 0x1e1306, 0x00000001);
loc_1ac7ae: // 0160:1ac7ae
    edi += 0x000000ac;
    if (edi == 0x00000ac0)
        goto loc_1ac875;
    goto loc_1ac734;
loc_1ac7c5: // 0160:1ac7c5
    edi = 0x00000020;
    ebp = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edi);
    edi = 0x000002b0;
    goto loc_1ac853;
loc_1ac7dc: // 0160:1ac7dc
    edx = ebx;
    ecx = edi;
loc_1ac7e0: // 0160:1ac7e0
    memoryASet32(ds, esp, 0xffffffff);
loc_1ac7e7: // 0160:1ac7e7
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_1ac806;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_1ac806;
    sub_1ac674();
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
    goto loc_1ac7e7;
loc_1ac806: // 0160:1ac806
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_1ac827;
    eax <<= 9;
    memoryASet32(ds, edx + 3803494, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    esi++;
    memoryASet32(ds, edx + 3803498, eax);
loc_1ac827: // 0160:1ac827
    eax = memoryAGet32(ds, esp + 4);
    eax += 0x00000018;
    edx += 0x000000ac;
    memoryASet32(ds, esp + 4, eax);
    if (edx != ecx)
        goto loc_1ac7e0;
    edx = eax + 128;
    edi += 0x000002b0;
    ebx += 0x000002b0;
    ebp++;
    memoryASet32(ds, esp + 4, edx);
loc_1ac853: // 0160:1ac853
    if ((int32_t)ebp >= (int32_t)0x00000004)
        goto loc_1ac866;
    if ((int32_t)memoryAGet32(ds, esp + 4) < (int32_t)0x000003c0)
        goto loc_1ac7dc;
loc_1ac866: // 0160:1ac866
    if (esi == 0x00000010)
        goto loc_1ac875;
    memoryASet32(ds, 0x1e1306, 0x00000001);
loc_1ac875: // 0160:1ac875
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ac87f() // 0160:1ac87f +long
{
    esp -= 4;
    goto loc_1ac87f;
loc_1ac875: // 0160:1ac875
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ac87f: // 0160:1ac87f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = 0;
    esi = 0;
    ebp = 0;
    goto loc_1ac997;
loc_1ac893: // 0160:1ac893
    ecx = ebp;
loc_1ac895: // 0160:1ac895
    edx = esp;
    eax = esp + 4;
    ebx = ebp;
    sub_1ac317();
    ebx = memoryAGet32(ds, esp);
    ebx -= 0x00000002;
    eax = memoryAGet32(ds, esp + 4);
    edx = ebx;
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp, ebx);
    sub_1ac5ea();
    if (eax)
        goto loc_1ac93e;
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    sub_1b4152();
    if (eax)
        goto loc_1ac93e;
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_1ac94c;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1ac94c;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebx = memoryAGet32(ds, esp);
    edx &= eax;
    eax = ebx * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ac94c;
loc_1ac93e: // 0160:1ac93e
    eax = ecx;
    ecx++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_1ac895;
loc_1ac94c: // 0160:1ac94c
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_1ac98d;
    memoryASet32(ds, esi + 3802622, ebp);
    memoryASet32(ds, esi + 3802626, ebp);
    memoryASet32(ds, esi + 3802630, ebp);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3802634, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 3802606, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esi + 3802638, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 3802610, eax);
    goto loc_1ac993;
loc_1ac98d: // 0160:1ac98d
    memoryASet32(ds, esi + 3802606, ebp);
loc_1ac993: // 0160:1ac993
    esi += 0x00000024;
    edi++;
loc_1ac997: // 0160:1ac997
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x1e36d4))
        goto loc_1ac893;
    goto loc_1ac875;
}
void sub_1ac9a8() // 0160:1ac9a8 +long
{
    esp -= 4;
    push32(edx);
    eax = 0x0005a000;
    dl = 0x80;
loc_1ac9b0: // 0160:1ac9b0
    eax++;
    memoryASet(ds, eax + 3244655, dl);
    if ((int32_t)eax < (int32_t)0x0005dc00)
        goto loc_1ac9b0;
    edx = pop32();
    esp += 4;
}
void sub_1ac9eb() // 0160:1ac9eb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    sub_1ab6eb();
    edx = 0x00000001;
    eax = 0;
    sub_1ab709();
    edx = 0x00000003;
    eax = 0;
    sub_1ab709();
    edx = 0x00000003;
    eax = 0;
    sub_1ab709();
    edx = 0x00000009;
    eax = 0;
    sub_1ab709();
    edx = memoryAGet32(ds, 0x1e130a);
    memoryASet32(ds, 0x39eaa8, eax);
    if ((int32_t)edx < 0)
        goto loc_1aca42;
    if ((int32_t)edx < 0)
        goto loc_1acc68;
    if (eax != edx)
        goto loc_1acc68;
loc_1aca42: // 0160:1aca42
    sub_197a14();
    sub_1abd00();
    sub_1abd78();
    sub_1abb6d();
    eax = 0x00205a90;
    edx = 0x00000081;
    sub_1abbec();
    eax = 0x0020fa90;
    sub_1abc6d();
    edx = 0x00000082;
    eax = 0x0020fab0;
    edi = 0x0000003d;
    sub_1abc6d();
    eax = memoryAGet32(ds, 0x39eaa8);
    memoryASet32(ds, 0x3a1d44, edi);
    if (eax > 0x00000009)
        goto loc_1acc4a;
    switch (eax)
    {
        case 0: goto loc_1acadd;
        case 1: goto loc_1acb05;
        case 2: goto loc_1aca9f;
        case 3: goto loc_1acb34;
        case 4: goto loc_1acb54;
        case 5: goto loc_1acb74;
        case 6: goto loc_1acb99;
        case 7: goto loc_1acbb9;
        case 8: goto loc_1acbed;
        case 9: goto loc_1acc0d;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:1aca97");
    }
loc_1aca9f: // 0160:1aca9f
    ebx = 0x00000007;
    edx = 0x00000002;
    eax = 0x00000030;
    ecx = 0;
    sub_1ab937();
    ecx = 0x00000008;
    ebx = 0x00000003;
    edx = 0x00000004;
    eax = 0x00000080;
    sub_1ab937();
    memoryASet32(ds, 0x3a1d44, 0x00000028);
    goto loc_1acc4a;
loc_1acadd: // 0160:1acadd
    ecx = 0x0000000c;
    ebx = 0x00000005;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x00000012;
loc_1acafb: // 0160:1acafb
    ebx = 0x00000005;
    goto loc_1acbdc;
loc_1acb05: // 0160:1acb05
    ecx = 0x00000018;
    ebx = 0x00000005;
    edx = 0x00000004;
    eax = 0x00000060;
    sub_1ab937();
    ecx = 0x0000001e;
loc_1acb23: // 0160:1acb23
    ebx = 0x00000005;
    eax = 0x0000000c;
    edx = ebx;
    goto loc_1acbe6;
loc_1acb34: // 0160:1acb34
    ecx = 0x00000024;
    ebx = 0x00000005;
    edx = 0x00000004;
    eax = 0x00000060;
    sub_1ab937();
    ecx = 0x0000002a;
    goto loc_1acb23;
loc_1acb54: // 0160:1acb54
    ecx = 0x00000030;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x00000039;
    goto loc_1acafb;
loc_1acb74: // 0160:1acb74
    ecx = 0x0000003f;
    ebx = 0x00000006;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x00000046;
loc_1acb92: // 0160:1acb92
    ebx = 0x00000001;
    goto loc_1acbdc;
loc_1acb99: // 0160:1acb99
    ecx = 0x00000048;
    ebx = 0x00000006;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x0000004f;
    goto loc_1acb92;
loc_1acbb9: // 0160:1acbb9
    ecx = 0x00000051;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x0000005a;
loc_1acbd7: // 0160:1acbd7
    ebx = 0x00000002;
loc_1acbdc: // 0160:1acbdc
    edx = 0x00000004;
    eax = 0x0000000c;
loc_1acbe6: // 0160:1acbe6
    sub_1ab937();
    goto loc_1acc4a;
loc_1acbed: // 0160:1acbed
    ecx = 0x0000005d;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x00000066;
    goto loc_1acbd7;
loc_1acc0d: // 0160:1acc0d
    ecx = 0x00000069;
    ebx = 0x00000005;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_1ab937();
    ecx = 0x0000006f;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = 0x0000000c;
    ebp = 0x00000028;
    sub_1ab937();
    memoryASet32(ds, 0x3a1d44, ebp);
loc_1acc4a: // 0160:1acc4a
    edx = 0;
    memoryASet32(ds, 0x1e1306, edx);
    sub_1ac0d4();
    sub_1ac9a8();
    sub_1ac70e();
    sub_1ac87f();
    goto loc_1acc72;
loc_1acc68: // 0160:1acc68
    memoryASet32(ds, 0x1e1306, 0x00000001);
loc_1acc72: // 0160:1acc72
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1acc78() // 0160:1acc78 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x1e15fc, edx);
    memoryASet32(ds, 0x1e3ab4, edx);
    memoryASet32(ds, 0x1e3aac, edx);
    memoryASet32(ds, 0x1e3ab8, edx);
    memoryASet32(ds, 0x1e15f0, edx);
    memoryASet32(ds, 0x1e15f4, edx);
    memoryASet32(ds, 0x1e3aa8, edx);
    edx = 0x001e5a90;
    memoryASet32(ds, 0x1e00a0, ebx);
    memoryASet32(ds, 0x3c0f20, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1accbc() // 0160:1accbc +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x39eaa8);
    if (edx != 0x00000002)
        goto loc_1accd8;
    sub_19e30a();
    edx = eax;
    eax = 0x00000041;
    goto loc_1accf7;
loc_1accd8: // 0160:1accd8
    if (edx != 0x00000003)
        goto loc_1acceb;
    sub_19e30a();
    edx = eax;
    eax = 0x00000040;
    goto loc_1accf7;
loc_1acceb: // 0160:1acceb
    sub_19e30a();
    edx = eax;
    eax = 0x0000000e;
loc_1accf7: // 0160:1accf7
    sub_1bda16();
    ebx = pop32();
    esp += 4;
}
void sub_1accfe() // 0160:1accfe +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x39eaa8);
    if (edx != 0x00000002)
        goto loc_1acd1a;
    sub_19e36c();
    edx = eax;
    eax = 0x00000041;
    goto loc_1acd39;
loc_1acd1a: // 0160:1acd1a
    if (edx != 0x00000003)
        goto loc_1acd2d;
    sub_19e36c();
    edx = eax;
    eax = 0x00000040;
    goto loc_1acd39;
loc_1acd2d: // 0160:1acd2d
    sub_19e36c();
    edx = eax;
    eax = 0x0000000e;
loc_1acd39: // 0160:1acd39
    sub_1bda16();
    ebx = pop32();
    esp += 4;
}
void sub_1acd40() // 0160:1acd40 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1acd43: // 0160:1acd43
    eax += 0x00000002;
    edx = 0;
    memoryASet16(ds, eax + 2344142, dx);
    if (eax != 0x0002ee00)
        goto loc_1acd43;
    eax = 0;
loc_1acd58: // 0160:1acd58
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, eax + 2343872, edx);
    if (eax != 0x00000100)
        goto loc_1acd58;
    edx = pop32();
    esp += 4;
}
void sub_1acd6c() // 0160:1acd6c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    push32(eax);
    push32(ebx);
    eax = ecx;
    ebx = memoryAGet32(ds, esp + 4);
    ebx <<= 4;
    memoryASet32(ds, ebx + 2343888, 0x00000001);
    memoryASet32(ds, ebx + 2343892, edx);
    memoryASet32(ds, ebx + 2343900, eax);
    ecx = memoryAGet32(ds, esp);
    esi = 0x00000001;
    memoryASet32(ds, ebx + 2343896, ecx);
    cl = memoryAGet(ds, esp + 4);
    ebx = 0x00000010;
    esi <<= cl;
    if ((int32_t)eax >= 0)
        goto loc_1acdc0;
    ecx = eax;
    ebx += eax;
    eax <<= 2;
    eax += ecx;
    eax <<= 6;
    edx -= eax;
    eax = 0;
loc_1acdc0: // 0160:1acdc0
    ecx = eax + ebx;
    if ((int32_t)ecx <= (int32_t)0x00000190)
        goto loc_1acdd3;
    ecx -= 0x00000190;
    ebx -= ecx;
loc_1acdd3: // 0160:1acdd3
    ebp = 0x00000010;
    ecx = memoryAGet32(ds, esp);
    ecx += ebp;
    if ((int32_t)ecx <= (int32_t)0x000003c0)
        goto loc_1acdf7;
    ebp = memoryAGet32(ds, esp);
    ecx = 0x00000010;
    ebp -= 0x000003b0;
    ecx -= ebp;
    ebp = ecx;
loc_1acdf7: // 0160:1acdf7
    if (edx < 0x0029d7b0)
        goto loc_1aceaf;
    if (edx >= 0x002d97b0)
        goto loc_1aceaf;
    ecx = memoryAGet32(ds, esp);
    if ((int32_t)ecx >= 0)
        goto loc_1ace21;
    edi = ecx;
    ebp += ecx;
    edi ^= ecx;
    edx += ecx;
    memoryASet32(ds, esp, edi);
loc_1ace21: // 0160:1ace21
    ecx = 0x002dc270;
    edx -= 0x0029d7b0;
    memoryASet32(ds, esp + 32, eax);
    ecx += edx;
    eax += ebx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 8, eax);
    ebp += edx;
    goto loc_1ace80;
loc_1ace43: // 0160:1ace43
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_1ace63;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, eax * 2 + 0x23c4d0, memoryAGet16(ds, eax * 2 + 0x23c4d0) | si);
loc_1ace63: // 0160:1ace63
    ecx--;
    ebx++;
loc_1ace65: // 0160:1ace65
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1ace43;
    ebx = memoryAGet32(ds, esp + 24);
    ecx = memoryAGet32(ds, esp + 32);
    ebx += 0x00000140;
    ecx++;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 32, ecx);
loc_1ace80: // 0160:1ace80
    eax = memoryAGet32(ds, esp + 32);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1acf44;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx;
    ecx = -ecx;
    ecx += 0x0000000f;
    ecx += memoryAGet32(ds, esp + 24);
    ecx += ebx;
    goto loc_1ace65;
loc_1aceaf: // 0160:1aceaf
    edi = memoryAGet32(ds, esp);
    if ((int32_t)edi >= 0)
        goto loc_1acec1;
    ecx = edi;
    ebp += edi;
    ecx ^= edi;
    edx -= edi;
    memoryASet32(ds, esp, ecx);
loc_1acec1: // 0160:1acec1
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, eax);
    memoryASet32(ds, esp + 16, edi);
    eax += ebx;
    ebp += edi;
    memoryASet32(ds, esp + 12, eax);
    goto loc_1acf3a;
loc_1aceda: // 0160:1aceda
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 20);
    ecx = ebx + eax;
    eax = memoryAGet32(ds, esp + 16);
    eax = -eax;
    ecx += eax;
    goto loc_1acf1f;
loc_1acefd: // 0160:1acefd
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_1acf1d;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, eax * 2 + 0x23c4d0, memoryAGet16(ds, eax * 2 + 0x23c4d0) | si);
loc_1acf1d: // 0160:1acf1d
    ecx++;
    ebx++;
loc_1acf1f: // 0160:1acf1f
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1acefd;
    edx = memoryAGet32(ds, esp + 20);
    ebx = memoryAGet32(ds, esp + 28);
    edx += 0x00000140;
    ebx++;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, ebx);
loc_1acf3a: // 0160:1acf3a
    eax = memoryAGet32(ds, esp + 28);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_1aceda;
loc_1acf44: // 0160:1acf44
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1acf4b() // 0160:1acf4b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    esi <<= 4;
    if (memoryAGet32(ds, esi + 2343888) == 0x00000000)
        goto loc_1ad06c;
    cl = al;
    edx = memoryAGet32(ds, esi + 2343896);
    ebx = 0;
    eax = 0x00000001;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esi + 2343888, ebx);
    eax <<= cl;
    esi = memoryAGet32(ds, esi + 2343900);
    ecx = eax;
    eax = 0x00000010;
    ecx ^= 0x0000ffff;
    if ((int32_t)esi >= 0)
        goto loc_1acf9c;
    eax += esi;
    esi = 0;
loc_1acf9c: // 0160:1acf9c
    edx = esi + eax;
    if ((int32_t)edx <= (int32_t)0x00000190)
        goto loc_1acfaf;
    edx -= 0x00000190;
    eax -= edx;
loc_1acfaf: // 0160:1acfaf
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    if ((int32_t)edx <= (int32_t)0x000003c0)
        goto loc_1acfd5;
    ebx = memoryAGet32(ds, esp + 8);
    edx = 0x00000010;
    ebx -= 0x000003b0;
    edx -= ebx;
    ebx = edx;
loc_1acfd5: // 0160:1acfd5
    edi = memoryAGet32(ds, esp + 8);
    if ((int32_t)edi >= 0)
        goto loc_1acfe5;
    edx = 0;
    ebx += edi;
    memoryASet32(ds, esp + 8, edx);
loc_1acfe5: // 0160:1acfe5
    eax += esi;
    edx = eax + -1;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax++;
    edx = esi;
    memoryASet32(ds, esp + 4, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    edx--;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edi = 0x0023c4d0;
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, esp + 8);
    eax += eax;
    ebp = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, eax);
    goto loc_1ad068;
loc_1ad04b: // 0160:1ad04b
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 8);
    eax += edi;
    goto loc_1ad05d;
loc_1ad056: // 0160:1ad056
    edx++;
    memoryASet16(ds, eax, memoryAGet16(ds, eax) & cx);
    eax += 0x00000002;
loc_1ad05d: // 0160:1ad05d
    if ((int32_t)edx < (int32_t)ebx)
        goto loc_1ad056;
    edi += 0x000003c0;
    esi++;
loc_1ad068: // 0160:1ad068
    if ((int32_t)esi < (int32_t)ebp)
        goto loc_1ad04b;
loc_1ad06c: // 0160:1ad06c
    esp += 0x0000000c;
    goto loc_1b23b3;
    // gap 21311 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad074() // 0160:1ad074 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp, edx);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 3803494) == 0x00000000)
        goto loc_1ad135;
    if ((int32_t)memoryAGet32(ds, edx + 3803518) <= (int32_t)0x00000000)
        goto loc_1ad0ad;
    edi = 0x00000003;
    edi -= memoryAGet32(ds, edx + 3803626);
    goto loc_1ad0b6;
loc_1ad0ad: // 0160:1ad0ad
    edi = memoryAGet32(ds, edx + 3803626);
    edi += 0x0000000d;
loc_1ad0b6: // 0160:1ad0b6
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803502);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803506);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 3803630);
    eax -= 0x0000000c;
    edx = memoryAGet32(ds, 0x3a1c64);
    ecx += eax;
    if (esi != edx)
        goto loc_1ad104;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1ad135;
loc_1ad104: // 0160:1ad104
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_1ad135;
    eax = edi + 16;
    if ((int32_t)eax <= 0)
        goto loc_1ad135;
    if ((int32_t)ecx >= (int32_t)0x00000190)
        goto loc_1ad135;
    eax = ecx + 16;
    if ((int32_t)eax <= 0)
        goto loc_1ad135;
    memoryASet32(ds, esp, 0x00000001);
    ebp = esi * 0x000000ac;
    ebp = memoryAGet32(ss, ebp + 3803634);
loc_1ad135: // 0160:1ad135
    edx = esi;
    edx <<= 4;
    eax = memoryAGet32(ds, esp);
    if (eax != memoryAGet32(ds, edx + 2343888))
        goto loc_1ad15d;
    if (ebp != memoryAGet32(ds, edx + 2343892))
        goto loc_1ad15d;
    if (edi != memoryAGet32(ds, edx + 2343896))
        goto loc_1ad15d;
    if (ecx == memoryAGet32(ds, edx + 2343900))
        goto loc_1ad185;
loc_1ad15d: // 0160:1ad15d
    eax = esi;
    edx = memoryAGet32(ds, esp);
    sub_1acf4b();
    if (!edx)
        goto loc_1ad185;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803526) != 0x00000000)
        goto loc_1ad185;
    ebx = edi;
    edx = ebp;
    eax = esi;
    sub_1acd6c();
loc_1ad185: // 0160:1ad185
    edx = 0;
    ebx = 0;
    ecx = 0;
loc_1ad18b: // 0160:1ad18b
    if (memoryAGet32(ds, ebx + 2343888) == 0x00000000)
        goto loc_1ad1a4;
    if (memoryAGet32(ds, ecx + 3803494) != 0x00000000)
        goto loc_1ad1a4;
    eax = edx;
    sub_1acf4b();
loc_1ad1a4: // 0160:1ad1a4
    ebx += 0x00000010;
    edx++;
    ecx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1ad18b;
    goto loc_1b23b0;
    // gap 20984 bytes
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad1b8() // 0160:1ad1b8 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_1ad1bb: // 0160:1ad1bb
    eax = edx;
    edx++;
    sub_1ad074();
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1ad1bb;
    edx = pop32();
    esp += 4;
}
void sub_1ad1ca() // 0160:1ad1ca +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    ecx = 0;
    memoryASet16(ds, 0x3a1c52, cx);
    ecx = memoryAGet32(ds, esp + 12);
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 12);
    esi = 0x0000ffff;
    sub_1984fb();
    memoryASet16(ds, 0x3a1c52, si);
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1ad1f8() // 0160:1ad1f8 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = edx;
    cl = al;
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x3a1c52, ax);
    if ((int32_t)ebx <= 0)
        goto loc_1ad27c;
    if (edx >= 0x000003c0)
        goto loc_1ad27c;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = esi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ad27c;
    eax = 0x00000001;
    goto loc_1ad27e;
loc_1ad27c: // 0160:1ad27c
    eax = 0;
loc_1ad27e: // 0160:1ad27e
    memoryASet16(ds, 0x3a1c52, 0xffff);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ad28a() // 0160:1ad28a +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(eax);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    esi <<= cl;
    ecx = esi;
    ecx ^= 0x0000ffff;
    memoryASet16(ds, 0x3a1c52, cx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    esi = memoryAGet32(ds, esp + 20);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 20);
    sub_1add3f();
    memoryASet16(ds, 0x3a1c52, 0xffff);
    esp += 0x00000004;
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_1ad412() // 0160:1ad412 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x001e5a90;
    edx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x1e3aa8, edx);
    memoryASet32(ds, 0x3c0f20, ebx);
    memoryASet32(ds, 0x1e00a0, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad437() // 0160:1ad437 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    eax = memoryAGet32(ds, 0x1e3aa8);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x3c0f20);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 4, eax);
loc_1ad462: // 0160:1ad462
    edx = memoryAGet32(ds, esp + 4);
    if (!edx)
        goto loc_1ad4d2;
    ebx = edx + -24;
    eax = memoryAGet32(ds, ebx + 3926308);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 3926320);
    ebp = memoryAGet32(ds, ebx + 3926312);
    memoryASet32(ds, esp + 8, eax);
    eax = (int32_t)eax * (int32_t)ebp;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    ecx--;
    esi = memoryAGet32(ds, ebx + 3926304);
    edi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp, ecx);
    edi--;
    ebp--;
    esi += eax;
    goto loc_1ad4b1;
loc_1ad4a5: // 0160:1ad4a5
    ebx--;
    cl = memoryAGet(ds, edx);
    edx--;
    memoryASet(ds, eax, cl);
    eax--;
loc_1ad4ac: // 0160:1ad4ac
    if ((int32_t)ebx >= 0)
        goto loc_1ad4a5;
    ebp--;
loc_1ad4b1: // 0160:1ad4b1
    if ((int32_t)ebp < 0)
        goto loc_1ad462;
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 16);
    esi -= eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    edx -= eax;
    eax = edi + esi;
    memoryASet32(ds, esp + 16, edx);
    edx += edi;
    goto loc_1ad4ac;
loc_1ad4d2: // 0160:1ad4d2
    memoryASet32(ds, 0x1e00a0, edx);
    esp += 0x00000014;
    goto loc_1b23b3;
    // gap 20179 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad4e0() // 0160:1ad4e0 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    esi = ebx;
    memoryASet32(ds, esp + 4, ecx);
    if ((int32_t)memoryAGet32(ds, 0x1e3aa8) > (int32_t)0x000000ff)
        goto loc_1ad512;
    eax = ebx + 8;
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x001f5a90;
    ecx = memoryAGet32(ds, 0x3c0f20);
    edx -= eax;
    if (edx >= ecx)
        goto loc_1ad52b;
loc_1ad512: // 0160:1ad512
    edx = 0;
    memoryASet32(ds, 0x1e15f0, edx);
    memoryASet32(ds, 0x1e15f4, edx);
    memoryASet32(ds, 0x1e00a0, edx);
    goto loc_1ad5c2;
loc_1ad52b: // 0160:1ad52b
    edx = memoryAGet32(ds, 0x1e3aa8);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, eax * 8 + 0x3be920, edi);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax * 8 + 0x3be924, ebx);
    memoryASet32(ds, eax * 8 + 0x3be91c, edx);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, eax * 8 + 0x3be928, edx);
    edx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, eax * 8 + 0x3be92c, edx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax * 8 + 0x3be930, edx);
    eax = memoryAGet32(ds, 0x1e3aa8);
    eax++;
    ebp = 0;
    memoryASet32(ds, 0x1e3aa8, eax);
    goto loc_1ad5bc;
loc_1ad580: // 0160:1ad580
    edx = edi;
    eax = 0;
    goto loc_1ad597;
loc_1ad586: // 0160:1ad586
    ebx = memoryAGet32(ds, 0x3c0f20);
    ecx = memoryAGet32(ds, edx);
    edx += 0x00000004;
    memoryASet32(ds, ebx + eax, ecx);
    eax += 0x00000004;
loc_1ad597: // 0160:1ad597
    if ((int32_t)eax < (int32_t)esi)
        goto loc_1ad586;
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, esp + 28);
    edx = memoryAGet32(ds, 0x3c0f20);
    ebp++;
    edx += esi;
    ebx += eax;
    edi += ecx;
    memoryASet32(ds, 0x3c0f20, edx);
    memoryASet32(ds, esp, ebx);
loc_1ad5bc: // 0160:1ad5bc
    if ((int32_t)ebp < (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1ad580;
loc_1ad5c2: // 0160:1ad5c2
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1ad5cb() // 0160:1ad5cb +long
{
    esp -= 4;
    ah = 0;
    memoryASet(ds, 0x3a9f83, ah);
    memoryASet(ds, 0x3a9f85, ah);
    memoryASet(ds, 0x3a9f80, ah);
    memoryASet(ds, 0x3a9f88, ah);
    memoryASet(ds, 0x3a9f71, ah);
    memoryASet(ds, 0x3a9f54, ah);
    memoryASet(ds, 0x3a9f73, ah);
    memoryASet(ds, 0x3a9f74, ah);
    memoryASet(ds, 0x3a9f75, ah);
    memoryASet(ds, 0x3a9f76, ah);
    memoryASet(ds, 0x3a9f77, ah);
    memoryASet(ds, 0x3a9f78, ah);
    memoryASet(ds, 0x3a9f79, ah);
    memoryASet(ds, 0x3a9f7a, ah);
    memoryASet(ds, 0x3a9f7b, ah);
    memoryASet(ds, 0x3a9f7c, ah);
    memoryASet(ds, 0x3a9f8f, ah);
    memoryASet(ds, 0x3a9f6a, ah);
    memoryASet(ds, 0x3a9f70, ah);
    esp += 4;
}
void sub_1ad640() // 0160:1ad640 +long
{
    esp -= 4;
    if (!(al & 0x01))
        goto loc_1ad64b;
    memoryASet(ds, 0x3a9f83, 0x01);
loc_1ad64b: // 0160:1ad64b
    if (!(al & 0x02))
        goto loc_1ad656;
    memoryASet(ds, 0x3a9f85, 0x01);
loc_1ad656: // 0160:1ad656
    if (!(al & 0x04))
        goto loc_1ad661;
    memoryASet(ds, 0x3a9f80, 0x01);
loc_1ad661: // 0160:1ad661
    if (!(al & 0x08))
        goto loc_1ad66c;
    memoryASet(ds, 0x3a9f88, 0x01);
loc_1ad66c: // 0160:1ad66c
    if (!(al & 0x10))
        goto loc_1ad677;
    memoryASet(ds, 0x3a9f54, 0x01);
loc_1ad677: // 0160:1ad677
    if (!(al & 0x20))
        goto loc_1ad682;
    memoryASet(ds, 0x3a9f71, 0x01);
loc_1ad682: // 0160:1ad682
    if (!(al & 0x40))
        goto loc_1ad68d;
    memoryASet(ds, 0x3a9f73, 0x01);
loc_1ad68d: // 0160:1ad68d
    if (!(al & 0x80))
        goto loc_1ad698;
    memoryASet(ds, 0x3a9f74, 0x01);
loc_1ad698: // 0160:1ad698
    if (!(ah & 0x01))
        goto loc_1ad6a4;
    memoryASet(ds, 0x3a9f75, 0x01);
loc_1ad6a4: // 0160:1ad6a4
    if (!(ah & 0x02))
        goto loc_1ad6b0;
    memoryASet(ds, 0x3a9f76, 0x01);
loc_1ad6b0: // 0160:1ad6b0
    if (!(ah & 0x04))
        goto loc_1ad6bc;
    memoryASet(ds, 0x3a9f77, 0x01);
loc_1ad6bc: // 0160:1ad6bc
    if (!(ah & 0x08))
        goto loc_1ad6c8;
    memoryASet(ds, 0x3a9f78, 0x01);
loc_1ad6c8: // 0160:1ad6c8
    if (!(ah & 0x10))
        goto loc_1ad6d4;
    memoryASet(ds, 0x3a9f79, 0x01);
loc_1ad6d4: // 0160:1ad6d4
    if (!(ah & 0x20))
        goto loc_1ad6e0;
    memoryASet(ds, 0x3a9f7a, 0x01);
loc_1ad6e0: // 0160:1ad6e0
    if (!(ah & 0x40))
        goto loc_1ad6ec;
    memoryASet(ds, 0x3a9f7b, 0x01);
loc_1ad6ec: // 0160:1ad6ec
    if (!(ah & 0x80))
        goto loc_1ad6f8;
    memoryASet(ds, 0x3a9f7c, 0x01);
loc_1ad6f8: // 0160:1ad6f8
    if (!(eax & 0x00010000))
        goto loc_1ad706;
    memoryASet(ds, 0x3a9f8f, 0x01);
loc_1ad706: // 0160:1ad706
    if (!(eax & 0x00020000))
        goto loc_1ad714;
    memoryASet(ds, 0x3a9f6a, 0x01);
loc_1ad714: // 0160:1ad714
    if (!(eax & 0x00040000))
        goto loc_1ad722;
    memoryASet(ds, 0x3a9f70, 0x01);
loc_1ad722: // 0160:1ad722
    esp += 4;
    return;
}
void sub_1ad723() // 0160:1ad723 +long
{
    esp -= 4;
    push32(edx);
    dl = memoryAGet(ds, 0x3a9f83);
    eax = 0;
    if (!dl)
        goto loc_1ad735;
    eax = 0x00000001;
loc_1ad735: // 0160:1ad735
    if (memoryAGet(ds, 0x3a9f85) == 0x00)
        goto loc_1ad740;
    al |= 0x02;
loc_1ad740: // 0160:1ad740
    if (memoryAGet(ds, 0x3a9f80) == 0x00)
        goto loc_1ad74b;
    al |= 0x04;
loc_1ad74b: // 0160:1ad74b
    if (memoryAGet(ds, 0x3a9f88) == 0x00)
        goto loc_1ad756;
    al |= 0x08;
loc_1ad756: // 0160:1ad756
    if (memoryAGet(ds, 0x3a9f54) == 0x00)
        goto loc_1ad761;
    al |= 0x10;
loc_1ad761: // 0160:1ad761
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1ad76c;
    al |= 0x20;
loc_1ad76c: // 0160:1ad76c
    if (memoryAGet(ds, 0x3a9f73) == 0x00)
        goto loc_1ad777;
    al |= 0x40;
loc_1ad777: // 0160:1ad777
    if (memoryAGet(ds, 0x3a9f74) == 0x00)
        goto loc_1ad782;
    al |= 0x80;
loc_1ad782: // 0160:1ad782
    if (memoryAGet(ds, 0x3a9f75) == 0x00)
        goto loc_1ad78e;
    ah |= 0x01;
loc_1ad78e: // 0160:1ad78e
    if (memoryAGet(ds, 0x3a9f76) == 0x00)
        goto loc_1ad79a;
    ah |= 0x02;
loc_1ad79a: // 0160:1ad79a
    if (memoryAGet(ds, 0x3a9f77) == 0x00)
        goto loc_1ad7a6;
    ah |= 0x04;
loc_1ad7a6: // 0160:1ad7a6
    if (memoryAGet(ds, 0x3a9f78) == 0x00)
        goto loc_1ad7b2;
    ah |= 0x08;
loc_1ad7b2: // 0160:1ad7b2
    if (memoryAGet(ds, 0x3a9f79) == 0x00)
        goto loc_1ad7be;
    ah |= 0x10;
loc_1ad7be: // 0160:1ad7be
    if (memoryAGet(ds, 0x3a9f7a) == 0x00)
        goto loc_1ad7ca;
    ah |= 0x20;
loc_1ad7ca: // 0160:1ad7ca
    if (memoryAGet(ds, 0x3a9f7b) == 0x00)
        goto loc_1ad7d6;
    ah |= 0x40;
loc_1ad7d6: // 0160:1ad7d6
    if (memoryAGet(ds, 0x3a9f7c) == 0x00)
        goto loc_1ad7e2;
    ah |= 0x80;
loc_1ad7e2: // 0160:1ad7e2
    if (memoryAGet(ds, 0x3a9f8f) == 0x00)
        goto loc_1ad7f0;
    eax |= 0x00010000;
loc_1ad7f0: // 0160:1ad7f0
    if (memoryAGet(ds, 0x3a9f6a) == 0x00)
        goto loc_1ad7fe;
    eax |= 0x00020000;
loc_1ad7fe: // 0160:1ad7fe
    if (memoryAGet(ds, 0x3a9f70) == 0x00)
        goto loc_1ad80c;
    eax |= 0x00040000;
loc_1ad80c: // 0160:1ad80c
    edx = pop32();
    esp += 4;
}
void sub_1ad80e() // 0160:1ad80e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1ad723();
    if (eax != memoryAGet32(ds, 0x3c0f10))
        goto loc_1ad84d;
    edx = memoryAGet32(ds, 0x39eac8);
    if (edx != memoryAGet32(ds, 0x3c0f1c))
        goto loc_1ad84d;
    edx = memoryAGet32(ds, 0x39eac4);
    if (edx != memoryAGet32(ds, 0x3c0f18))
        goto loc_1ad84d;
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx == memoryAGet32(ds, 0x3c0f14))
        goto loc_1ad92e;
loc_1ad84d: // 0160:1ad84d
    ecx = memoryAGet32(ds, 0x3a1f04);
    ebx = memoryAGet32(ds, 0x1e3ab8);
    edx = memoryAGet32(ds, 0x39eac8);
    ebp = memoryAGet32(ds, 0x3c0f1c);
    ebx++;
    ecx &= 0x0fffffff;
    memoryASet32(ds, 0x1e3ab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x1f5a8c, ecx);
    if (edx == ebp)
        goto loc_1ad893;
    ecx = edx;
    ebx++;
    ecx |= 0x10000000;
    memoryASet32(ds, 0x1e3ab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x1f5a8c, ecx);
loc_1ad893: // 0160:1ad893
    edx = memoryAGet32(ds, 0x39eac4);
    if (edx == memoryAGet32(ds, 0x3c0f18))
        goto loc_1ad8bd;
    ebx = memoryAGet32(ds, 0x1e3ab8);
    ecx = edx;
    ebx++;
    ecx |= 0x20000000;
    memoryASet32(ds, 0x1e3ab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x1f5a8c, ecx);
loc_1ad8bd: // 0160:1ad8bd
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx == memoryAGet32(ds, 0x3c0f14))
        goto loc_1ad8e7;
    ebx = memoryAGet32(ds, 0x1e3ab8);
    ecx = edx;
    ebx++;
    ecx |= 0x30000000;
    memoryASet32(ds, 0x1e3ab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x1f5a8c, ecx);
loc_1ad8e7: // 0160:1ad8e7
    if (eax == memoryAGet32(ds, 0x3c0f10))
        goto loc_1ad90b;
    ebx = memoryAGet32(ds, 0x1e3ab8);
    ecx = eax;
    ebx++;
    ecx |= 0x40000000;
    memoryASet32(ds, 0x1e3ab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x1f5a8c, ecx);
loc_1ad90b: // 0160:1ad90b
    memoryASet32(ds, 0x3c0f10, eax);
    eax = memoryAGet32(ds, 0x39eac8);
    memoryASet32(ds, 0x3c0f1c, eax);
    eax = memoryAGet32(ds, 0x39eac4);
    memoryASet32(ds, 0x3c0f18, eax);
    eax = memoryAGet32(ds, 0x39eac0);
    memoryASet32(ds, 0x3c0f14, eax);
loc_1ad92e: // 0160:1ad92e
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ad933() // 0160:1ad933 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_1ad5cb();
    eax = memoryAGet32(ds, 0x1e3ab8);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x1e3abc))
        goto loc_1ada54;
    edx = memoryAGet32(ds, 0x3a1f04);
    ebx = memoryAGet32(ds, eax * 4 + 0x1f5a90);
    edx &= 0x0fffffff;
    if (edx != ebx)
        goto loc_1ada40;
    ecx = eax + 1;
    eax = memoryAGet32(ds, ecx * 4 + 0x1f5a90);
    eax &= 0xf0000000;
    memoryASet32(ds, 0x1e3ab8, ecx);
    if (eax != 0x10000000)
        goto loc_1ad99e;
    edx = memoryAGet32(ds, ecx * 4 + 0x1f5a90);
    eax = ecx + 1;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x1e3ab8, eax);
    memoryASet32(ds, 0x3c0f1c, edx);
loc_1ad99e: // 0160:1ad99e
    eax = memoryAGet32(ds, 0x1e3ab8);
    eax = memoryAGet32(ds, eax * 4 + 0x1f5a90);
    eax &= 0xf0000000;
    if (eax != 0x20000000)
        goto loc_1ad9d4;
    edx = memoryAGet32(ds, 0x1e3ab8);
    eax = memoryAGet32(ds, edx * 4 + 0x1f5a90);
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x1e3ab8, edx);
    memoryASet32(ds, 0x3c0f18, eax);
loc_1ad9d4: // 0160:1ad9d4
    eax = memoryAGet32(ds, 0x1e3ab8);
    eax = memoryAGet32(ds, eax * 4 + 0x1f5a90);
    eax &= 0xf0000000;
    if (eax != 0x30000000)
        goto loc_1ada0a;
    edx = memoryAGet32(ds, 0x1e3ab8);
    eax = memoryAGet32(ds, edx * 4 + 0x1f5a90);
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x1e3ab8, edx);
    memoryASet32(ds, 0x3c0f14, eax);
loc_1ada0a: // 0160:1ada0a
    eax = memoryAGet32(ds, 0x1e3ab8);
    eax = memoryAGet32(ds, eax * 4 + 0x1f5a90);
    eax &= 0xf0000000;
    if (eax != 0x40000000)
        goto loc_1ada40;
    eax = memoryAGet32(ds, 0x1e3ab8);
    edx = memoryAGet32(ds, eax * 4 + 0x1f5a90);
    eax++;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x1e3ab8, eax);
    memoryASet32(ds, 0x3c0f10, edx);
loc_1ada40: // 0160:1ada40
    eax = memoryAGet32(ds, 0x3c0f14);
    memoryASet32(ds, 0x39eac0, eax);
    eax = memoryAGet32(ds, 0x3c0f10);
    sub_1ad640();
loc_1ada54: // 0160:1ada54
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ada58() // 0160:1ada58 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x1e15fc) != 0x00000001)
        goto loc_1adab5;
    ebx = 0;
    memoryASet32(ds, 0x1e15fc, ebx);
    sub_1ad412();
    sub_19739b();
    eax = memoryAGet32(ds, 0x3aa13c);
    edi = 0xffffffff;
    memoryASet32(ds, 0x1e3ab0, eax);
    memoryASet32(ds, 0x1e3aac, ebx);
    memoryASet32(ds, 0x1e3ab8, ebx);
    eax = memoryAGet32(ds, 0x3a1f04);
    memoryASet32(ds, 0x3c0f10, edi);
    memoryASet32(ds, 0x3c0f1c, edi);
    memoryASet32(ds, 0x3c0f18, edi);
    memoryASet32(ds, 0x3c0f14, edi);
    memoryASet32(ds, 0x1e3ab4, eax);
loc_1adab5: // 0160:1adab5
    if (memoryAGet32(ds, 0x1e15fc) != 0x00000002)
        goto loc_1adb72;
    ecx = 0x00000003;
    edi = memoryAGet32(ds, 0x1e3ab4);
    memoryASet32(ds, 0x1e12fa, ecx);
    memoryASet32(ds, 0x1e15fc, ecx);
    if (!edi)
        goto loc_1adb00;
    eax = memoryAGet32(ds, 0x1e3ab8);
    memoryASet32(ds, 0x1e3abc, eax);
    if ((int32_t)eax <= (int32_t)0x00003e80)
        goto loc_1adaf8;
    memoryASet32(ds, 0x1e3abc, 0x00003e80);
loc_1adaf8: // 0160:1adaf8
    edx = 0;
    memoryASet32(ds, 0x1e3ab4, edx);
loc_1adb00: // 0160:1adb00
    if (memoryAGet32(ds, 0x1e3abc) == 0x00000000)
        goto loc_1adb72;
    eax = 0;
    sub_1a593a();
    sub_1973b5();
    sub_1ad437();
    eax = memoryAGet32(ds, 0x1e3ab0);
    memoryASet32(ds, 0x3aa13c, eax);
    esi = 0xffffffff;
    ecx = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x1e3ab8, ecx);
    memoryASet32(ds, 0x3c0f10, esi);
    memoryASet32(ds, 0x3c0f1c, esi);
    memoryASet32(ds, 0x3c0f18, esi);
    memoryASet32(ds, 0x3c0f14, esi);
    memoryASet32(ds, 0x1e3aac, edx);
    sub_19828d();
    sub_19b794();
    eax = 0x000000ff;
    sub_1a593a();
    eax = memoryAGet32(ds, 0x3a1f04);
    memoryASet32(ds, 0x3aa13c, eax);
loc_1adb72: // 0160:1adb72
    if (memoryAGet32(ds, 0x1e3aac) == 0x00000000)
        goto loc_1adb80;
    sub_1ad933();
loc_1adb80: // 0160:1adb80
    if (memoryAGet32(ds, 0x1e3ab4) == 0x00000000)
        goto loc_1b23b4;
    sub_1ad80e();
    goto loc_1b23b4;
    // gap 18461 bytes
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1adb97() // 0160:1adb97 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x39eab0);
    eax -= memoryAGet32(ds, 0x39eac8);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_1adbde;
    eax = memoryAGet32(ds, 0x39eab4);
    eax -= memoryAGet32(ds, 0x39eac4);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1adbe8;
loc_1adbde: // 0160:1adbde
    memoryASet32(ds, 0x1e3ac0, 0x000005dc);
loc_1adbe8: // 0160:1adbe8
    edx = memoryAGet32(ds, 0x1e3ac0);
    if (!edx)
        goto loc_1adc07;
    ebp = 0;
    eax = edx + -1;
    memoryASet32(ds, 0x3a1f24, ebp);
    memoryASet32(ds, 0x1e3ac0, eax);
    goto loc_1add31;
loc_1adc07: // 0160:1adc07
    if (ebx != 0x00078000)
        goto loc_1adc4c;
    if (ecx)
        goto loc_1adc4c;
    ecx = 0x00000001;
    esi <<= 2;
    edi <<= 2;
    esi -= 0x00000280;
    edi -= 0x000001c0;
    memoryASet32(ds, 0x3a1f24, ecx);
    memoryASet32(ds, 0x3a1f14, esi);
    esi = 0x00000032;
    memoryASet32(ds, 0x3a1f18, edi);
    memoryASet32(ds, 0x3a1efc, esi);
    goto loc_1add27;
loc_1adc4c: // 0160:1adc4c
    if (ebx)
        goto loc_1adc58;
    if (!ecx)
        goto loc_1add27;
loc_1adc58: // 0160:1adc58
    eax = memoryAGet32(ds, 0x3a1f14);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x3a1f18);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = esi;
    edx <<= 2;
    if ((int32_t)ebx <= 0)
        goto loc_1adc99;
    esi -= 0x000000c0;
    if ((int32_t)esi <= (int32_t)ebp)
        goto loc_1adcaf;
    ebx = edx + -768;
    goto loc_1adca9;
loc_1adc99: // 0160:1adc99
    esi -= 0x00000080;
    if ((int32_t)esi >= (int32_t)ebp)
        goto loc_1adcaf;
    ebx = edx + -512;
loc_1adca9: // 0160:1adca9
    memoryASet32(ds, 0x3a1f14, ebx);
loc_1adcaf: // 0160:1adcaf
    ebx = edi;
    ebx <<= 2;
    if ((int32_t)ecx <= 0)
        goto loc_1adcc7;
    edi -= 0x00000048;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_1adcda;
    ebx -= 0x00000120;
    goto loc_1adcd4;
loc_1adcc7: // 0160:1adcc7
    edi -= 0x00000060;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_1adcda;
    ebx -= 0x00000100;
loc_1adcd4: // 0160:1adcd4
    memoryASet32(ds, 0x3a1f18, ebx);
loc_1adcda: // 0160:1adcda
    if ((int32_t)memoryAGet32(ds, 0x3a1f14) >= (int32_t)0x00000000)
        goto loc_1adceb;
    ecx = 0;
    memoryASet32(ds, 0x3a1f14, ecx);
loc_1adceb: // 0160:1adceb
    if ((int32_t)memoryAGet32(ds, 0x3a1f14) <= (int32_t)0x00000f00)
        goto loc_1add01;
    memoryASet32(ds, 0x3a1f18, 0x00000f00);
loc_1add01: // 0160:1add01
    if ((int32_t)memoryAGet32(ds, 0x3a1f18) >= (int32_t)0x00000000)
        goto loc_1add11;
    eax = 0;
    memoryASet32(ds, 0x3a1f18, eax);
loc_1add11: // 0160:1add11
    if ((int32_t)memoryAGet32(ds, 0x3a1f18) <= (int32_t)0x00000640)
        goto loc_1add27;
    memoryASet32(ds, 0x3a1f18, 0x00000640);
loc_1add27: // 0160:1add27
    memoryASet32(ds, 0x3a1f24, 0x00000001);
loc_1add31: // 0160:1add31
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1add3f() // 0160:1add3f +long +stackDrop8
{
    esp -= 4;
    goto loc_1add3f;
loc_1ad5c5: // 0160:1ad5c5
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 1908 bytes
loc_1add3f: // 0160:1add3f
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    edi = eax;
    esi = edx;
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, edi, ebx);
    memoryASet32(ds, edx, ecx);
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, ebp);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 4, ebp);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, edx, eax);
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1ae040;
    if ((int32_t)eax > (int32_t)0x00000190)
        goto loc_1ae040;
    ebp -= ebx;
    eax -= ecx;
    memoryASet32(ds, esp + 32, ebp);
    memoryASet32(ds, esp + 28, eax);
    if (ebp)
        goto loc_1add91;
    if (!eax)
        goto loc_1ae042;
loc_1add91: // 0160:1add91
    eax = memoryAGet32(ds, esp + 32);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = memoryAGet32(ds, esp + 28);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1adeac;
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ecx = memoryAGet32(ds, esp + 28);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 32);
    ebp <<= 16;
    if ((int32_t)eax <= 0)
        goto loc_1adde7;
    memoryASet32(ds, esp + 24, 0x00000001);
    goto loc_1addef;
loc_1adde7: // 0160:1adde7
    memoryASet32(ds, esp + 24, 0xffffffff);
loc_1addef: // 0160:1addef
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 24);
    eax += edx;
    memoryASet32(ds, esp + 16, eax);
loc_1addfd: // 0160:1addfd
    if (ebx == memoryAGet32(ds, esp + 16))
        goto loc_1adfa8;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if ((int32_t)ecx <= 0)
        goto loc_1ade92;
    if (ebx >= 0x000003c0)
        goto loc_1ade92;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ecx * 0x000003c0;
    al = memoryAGet(ds, ebx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ade92;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ebx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ecx);
loc_1ade88: // 0160:1ade88
    eax = 0x00000001;
    goto loc_1ae042;
loc_1ade92: // 0160:1ade92
    eax = ebp;
    memoryASet32(ds, edi, ebx);
    eax = sar32(eax, 0x10);
    ecx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esi, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebx += ecx;
    ebp += eax;
    goto loc_1addfd;
loc_1adeac: // 0160:1adeac
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx;
    ebx = ecx;
    ecx = memoryAGet32(ds, esp + 32);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebp <<= 16;
    if ((int32_t)eax <= 0)
        goto loc_1adee8;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_1adef0;
loc_1adee8: // 0160:1adee8
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_1adef0: // 0160:1adef0
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 20);
    eax += edx;
    memoryASet32(ds, esp + 12, eax);
loc_1adefe: // 0160:1adefe
    if (ebx == memoryAGet32(ds, esp + 12))
        goto loc_1adfa8;
    if ((int32_t)ebx <= 0)
        goto loc_1adf8e;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if (ecx >= 0x000003c0)
        goto loc_1adf8e;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1adf8e;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ebx);
    goto loc_1ade88;
loc_1adf8e: // 0160:1adf8e
    eax = ebp;
    ecx = memoryAGet32(ds, esp + 32);
    eax = sar32(eax, 0x10);
    ebp += ecx;
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esi, ebx);
    ebx += eax;
    goto loc_1adefe;
loc_1adfa8: // 0160:1adfa8
    edx = memoryAGet32(ds, esp + 8);
    if ((int32_t)edx <= 0)
        goto loc_1ae040;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1ae040;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax <<= 4;
    eax -= ebx;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ecx = ebx;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebx = memoryAGet32(ds, esp + 8);
    ecx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    esi = memoryAGet32(ds, esp + 4);
    eax <<= 6;
    eax += esi;
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ecx;
    if (!eax)
        goto loc_1ae040;
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, esi);
    edx = memoryAGet32(ds, esp + 56);
    eax = 0x00000001;
    memoryASet32(ds, edx, ebx);
    goto loc_1ae042;
loc_1ae040: // 0160:1ae040
    eax = 0;
loc_1ae042: // 0160:1ae042
    esp += 0x00000024;
    goto loc_1ad5c5;
}
void sub_1ae04a() // 0160:1ae04a +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = ebx;
    ebp = ecx;
    if ((int32_t)edx >= (int32_t)0x0002fc00)
        goto loc_1ae19a;
    if ((int32_t)edx <= (int32_t)0xffffc000)
        goto loc_1ae19a;
    ebx = 0;
    eax = 0;
loc_1ae06f: // 0160:1ae06f
    if ((int32_t)eax >= (int32_t)0x000000c0)
        goto loc_1ae085;
    if (memoryAGet32(ds, eax + 3808130) == 0x00000000)
        goto loc_1ae085;
    eax += 0x00000018;
    ebx++;
    goto loc_1ae06f;
loc_1ae085: // 0160:1ae085
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    if (memoryAGet32(ds, eax * 8 + 0x3a1b82) != 0x00000000)
        goto loc_1af4be;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1af4be;
    if (edi)
        goto loc_1ae0ac;
    edi = 0xffffffff;
loc_1ae0ac: // 0160:1ae0ac
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 8 + 0x3a1b82, edi);
    memoryASet32(ds, eax * 8 + 0x3a1b86, edx);
    edx = 0;
    ecx = memoryAGet32(ds, 0x1e36d8);
    memoryASet32(ds, eax * 8 + 0x3a1b8a, edx);
    if (!ecx)
        goto loc_1ae0f0;
    edx = esi;
    edx <<= 2;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x0000005a)
        goto loc_1ae0f0;
    esi = 0x0000005a;
loc_1ae0f0: // 0160:1ae0f0
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 8 + 0x3a1b8e, esi);
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, eax * 8 + 0x3a1b92, ebp);
    memoryASet32(ds, eax * 8 + 0x3a1b96, edx);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1ae13e;
    eax = edi + -81920;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000037;
    sub_1bda16();
    eax = edi + 81920;
    ebx = 0x000000ff;
    goto loc_1ae14a;
loc_1ae13e: // 0160:1ae13e
    eax = esi;
    eax <<= 2;
    eax -= esi;
    ebx = eax + 32;
    eax = edi;
loc_1ae14a: // 0160:1ae14a
    sub_19e36c();
    edx = eax;
    eax = 0x00000037;
    sub_1bda16();
    edi = 0;
    memoryASet32(ds, 0x3a1f24, edi);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1ae177;
    memoryASet32(ds, 0x3a1d50, memoryAGet32(ds, 0x3a1d50) + 0x00000e00);
    goto loc_1af4be;
loc_1ae177: // 0160:1ae177
    if ((int32_t)esi < (int32_t)0x00000020)
        goto loc_1ae18b;
    memoryASet32(ds, 0x3a1d50, memoryAGet32(ds, 0x3a1d50) + 0x00000a00);
    goto loc_1af4be;
loc_1ae18b: // 0160:1ae18b
    memoryASet32(ds, 0x3a1d50, memoryAGet32(ds, 0x3a1d50) + 0x00000400);
    goto loc_1af4be;
loc_1ae19a: // 0160:1ae19a
    if ((int32_t)edx <= 0)
        goto loc_1ae1b2;
    al = (int32_t)edi > (int32_t)0x00078000;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1af4be;
loc_1ae1b2: // 0160:1ae1b2
    edx = memoryAGet32(ds, 0x3a1d50);
    ebx = 0x00000040;
    edx += 0x00000200;
    eax = edi;
    memoryASet32(ds, 0x3a1d50, edx);
    sub_19e36c();
    edx = eax;
    eax = 0x00000037;
    sub_1bda16();
    goto loc_1af4be;
    // gap 4829 bytes
loc_1af4be: // 0160:1af4be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1ae1e1() // 0160:1ae1e1 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x3a1c60);
    edx -= 0x000000fa;
    memoryASet32(ds, 0x3a1c60, edx);
    if ((int32_t)edx > 0)
        goto loc_1ae202;
    memoryASet32(ds, 0x3a1c60, 0x00000001);
loc_1ae202: // 0160:1ae202
    edx = pop32();
    esp += 4;
}
void sub_1ae204() // 0160:1ae204 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx + -8;
    ebx = 0;
loc_1ae20e: // 0160:1ae20e
    edx = 0x00000300;
    eax = 0xfffffd00;
    sub_1ab709();
    edx = 0xfffffc00;
    memoryASet32(ds, ebx + 3802374, eax);
    eax = 0xfffff800;
    ebx += 0x00000018;
    sub_1ab709();
    memoryASet32(ds, ebx + 3802354, eax);
    memoryASet32(ds, ebx + 3802342, ecx);
    edx = 0;
    memoryASet32(ds, ebx + 3802346, esi);
    memoryASet32(ds, ebx + 3802362, edx);
    memoryASet32(ds, ebx + 3802358, edx);
    if (ebx != 0x00000078)
        goto loc_1ae20e;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae25e() // 0160:1ae25e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = 0x00000036;
    esi = edx + -8;
    ebx = 0;
loc_1ae26e: // 0160:1ae26e
    edx = 0x00000200;
    memoryASet32(ds, ebx + 3802366, ecx);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 3802370, esi);
    sub_1ab709();
    edx = 0xfffff800;
    memoryASet32(ds, ebx + 3802374, eax);
    eax = 0xfffff400;
    ebx += 0x00000018;
    sub_1ab709();
    memoryASet32(ds, ebx + 3802354, eax);
    edx = 0;
    memoryASet32(ds, ebx + 3802358, edi);
    memoryASet32(ds, ebx + 3802362, edx);
    if (ebx != 0x00000078)
        goto loc_1ae26e;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae2bf() // 0160:1ae2bf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    edx = eax;
    if ((int32_t)eax >= (int32_t)0x000001e0)
        goto loc_1ae2f1;
    ecx = 0xffffff00;
    edx = eax + 112;
    esi = 0xffffe000;
    goto loc_1ae2fe;
loc_1ae2f1: // 0160:1ae2f1
    ecx = 0x00000100;
    edx = eax + -112;
    esi = 0x00002000;
loc_1ae2fe: // 0160:1ae2fe
    edx <<= 9;
    edi = 0x00000001;
    eax = 0;
loc_1ae308: // 0160:1ae308
    eax += 0x00000018;
    memoryASet32(ds, eax + 3802342, edx);
    memoryASet32(ds, eax + 3802346, ebx);
    memoryASet32(ds, eax + 3802350, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 3802354, edi);
    ebx -= 0x00001400;
    memoryASet32(ds, eax + 3802362, ebp);
    edx += esi;
    memoryASet32(ds, eax + 3802358, ebp);
    if (eax != 0x000000c0)
        goto loc_1ae308;
    goto loc_1b23b3;
    // gap 16494 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae345() // 0160:1ae345 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x3a1cd0) == 0x00000000)
        goto loc_1b23b4;
    ebx = memoryAGet32(ds, 0x1e0074);
    if (ebx)
        goto loc_1b23b4;
    if (memoryAGet32(ds, 0x3a1d88) != 0x00000000)
        goto loc_1b23b4;
    eax = memoryAGet32(ds, 0x3a1cd4);
    eax -= 0x00000280;
    memoryASet32(ds, 0x3a1f14, eax);
    eax = memoryAGet32(ds, 0x3a1cd8);
    eax -= 0x00000134;
    memoryASet32(ds, 0x3a1f18, eax);
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = memoryAGet32(ds, 0x3a1d7c);
    memoryASet32(ds, 0x3a1f24, ebx);
    if (!edi)
        goto loc_1ae3d8;
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x00307e30;
    goto loc_1ae3e8;
loc_1ae3d8: // 0160:1ae3d8
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x00306cb0;
loc_1ae3e8: // 0160:1ae3e8
    sub_19e029();
    goto loc_1b23b4;
    // gap 16322 bytes
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae3f2() // 0160:1ae3f2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x3a1f00);
    ecx = memoryAGet32(ds, 0x3a1c64);
    if (edx)
        goto loc_1ae5eb;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1ae5eb;
    if (memoryAGet32(ds, 0x3a1de4) != 0x00000000)
        goto loc_1ae5eb;
    ebx = ecx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803530) != 0x00000000)
        goto loc_1ae5eb;
    if (memoryAGet32(ds, 0x3a1ccc) != 0x00000000)
        goto loc_1ae5eb;
    if (memoryAGet32(ds, ebx + 3803486) != 0x00000000)
        goto loc_1ae5eb;
    eax = memoryAGet32(ds, ebx + 3803490);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1ae5eb;
    if (memoryAGet32(ds, ebx + 3803474) != 0x00000000)
        goto loc_1ae5eb;
    esi = memoryAGet32(ds, ebx + 3803542);
    if (!esi)
        goto loc_1ae4c3;
    if (esi == 0x0000002b)
        goto loc_1ae4c3;
    if (esi == 0x00000004)
        goto loc_1ae4c3;
    if (esi == 0x00000024)
        goto loc_1ae4c3;
    if (esi == 0x00000036)
        goto loc_1ae4c3;
    if (esi == 0x00000010)
        goto loc_1ae4c3;
    if (esi == 0x00000027)
        goto loc_1ae4c3;
    if (esi == 0x0000002f)
        goto loc_1ae4c3;
    if (esi != 0x00000038)
        goto loc_1ae4b0;
    if (memoryAGet32(ds, 0x3a1d2c) == 0x00000001)
        goto loc_1ae4c3;
loc_1ae4b0: // 0160:1ae4b0
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000006)
        goto loc_1ae5eb;
loc_1ae4c3: // 0160:1ae4c3
    esi = ecx * 0x000000ac;
    esi = memoryAGet32(ds, esi + 3803518);
    if (esi)
        goto loc_1ae4d8;
    esi = 0xffffffff;
loc_1ae4d8: // 0160:1ae4d8
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000010)
        goto loc_1ae524;
    eax = memoryAGet32(ds, 0x3a1c84);
    eax &= 0x000000e0;
    eax = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x3a1c80, eax);
    eax = memoryAGet32(ds, 0x3a1c84);
    eax += 0x00000040;
    eax &= 0x000000e0;
    goto loc_1ae55f;
loc_1ae524: // 0160:1ae524
    eax = memoryAGet32(ds, 0x3a1c84);
    eax &= 0x000000ff;
    eax = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x3a1c80, eax);
    eax = memoryAGet32(ds, 0x3a1c84);
    eax += 0x00000040;
    eax &= 0x000000ff;
loc_1ae55f: // 0160:1ae55f
    eax = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)esi;
    memoryASet32(ds, 0x3a1c7c, eax);
    ebx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 4;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, ebx + 3803518);
    eax -= 0x00000006;
    if ((int32_t)ebp > 0)
        goto loc_1ae5c5;
    ecx -= 0x00000008;
loc_1ae5c5: // 0160:1ae5c5
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x3a1c7c);
    ebx = memoryAGet32(ds, 0x3a1c80);
    ecx += edx;
    eax -= ebx;
    edx = ecx + -3;
    ebx = eax;
    ecx = 0x00000006;
    eax = 0x002f46f0;
    sub_19e029();
loc_1ae5eb: // 0160:1ae5eb
    ecx = 0;
    memoryASet32(ds, 0x3a1de4, ecx);
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae5f9() // 0160:1ae5f9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3a1d24) == 0x00000000)
        goto loc_1ae62b;
    if (memoryAGet32(ds, 0x3a1d1c) == 0x00000000)
        goto loc_1ae62b;
    push32(0x00000006);
    ecx = 0x00000006;
    eax = 0x002f46f8;
    ebx = memoryAGet32(ds, 0x3a1d20);
    edx = memoryAGet32(ds, 0x3a1d1c);
    sub_19e029();
loc_1ae62b: // 0160:1ae62b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae62f() // 0160:1ae62f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x3a1ce4);
    if (!edx)
        goto loc_1ae664;
    ebx = 0x00000032;
    ecx = edx + 2;
    memoryASet32(ds, 0x3a1efc, ebx);
    memoryASet32(ds, 0x3a1ce4, ecx);
    if ((int32_t)ecx <= (int32_t)0x00000040)
        goto loc_1ae664;
    edi = 0;
    memoryASet32(ds, 0x3a1ce4, edi);
    memoryASet32(ds, 0x3a1cc0, edi);
loc_1ae664: // 0160:1ae664
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae669() // 0160:1ae669 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x3a1ce4) == 0x00000000)
        goto loc_1ae6c9;
    eax = memoryAGet32(ds, 0x3a1ce0);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1cdc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, 0x3a1ce4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000005);
    edx = memoryAGet32(ds, 0x3a1ce8);
    eax <<= 4;
    ecx = 0x00000010;
    eax += edx;
    edx = esi;
    sub_19e029();
loc_1ae6c9: // 0160:1ae6c9
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ae6ce() // 0160:1ae6ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = memoryAGet32(ds, 0x3a1552);
    edx = 0;
    if (ebx)
        goto loc_1b23b3;
    esi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1572, eax);
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803518) != 0x00000001)
        goto loc_1ae70d;
    eax = memoryAGet32(ds, eax + 3803494);
    eax += 0x00000c00;
    goto loc_1ae718;
loc_1ae70d: // 0160:1ae70d
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000c00;
loc_1ae718: // 0160:1ae718
    memoryASet32(ds, 0x3a1552, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = memoryAGet32(ds, eax + 3803498);
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi -= 0x00001800;
    memoryASet32(ds, eax * 4 + 0x3a1556, esi);
    ebx = memoryAGet32(ds, 0x3a1c88);
    memoryASet32(ds, eax * 4 + 0x3a156e, ebx);
    if (ecx != 0x00000004)
        goto loc_1ae75d;
    memoryASet32(ds, 0x3a1e90, 0x0000007d);
loc_1ae75d: // 0160:1ae75d
    ebx = edx;
    ebx <<= 3;
    ebx += edx;
    ebx <<= 2;
    if (ecx != 0x0000000b)
        goto loc_1ae820;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803518) != 0x00000001)
        goto loc_1ae790;
    eax = memoryAGet32(ds, eax + 3803494);
    eax += 0x00000600;
    goto loc_1ae79b;
loc_1ae790: // 0160:1ae790
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000600;
loc_1ae79b: // 0160:1ae79b
    memoryASet32(ds, ebx + 3806546, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3803498);
    eax = edx;
    eax <<= 3;
    eax += edx;
    ecx -= 0x00000800;
    ebp = 0x002eb2b0;
    memoryASet32(ds, eax * 4 + 0x3a1556, ecx);
    memoryASet32(ds, eax * 4 + 0x3a156a, ebp);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, ebx + 3803518);
    memoryASet32(ds, eax * 4 + 0x3a1562, ebx);
    ebx = memoryAGet32(ds, 0x3a1d44);
    esi = 0x000000fa;
    ebx = -ebx;
    memoryASet32(ds, eax * 4 + 0x3a156e, esi);
    memoryASet32(ds, eax * 4 + 0x3a1566, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000026;
    sub_1bda16();
    goto loc_1b23b3;
loc_1ae820: // 0160:1ae820
    ecx = 0x002f46e0;
    esi = memoryAGet32(ds, 0x1e3c68);
    memoryASet32(ds, ebx + 3806570, ecx);
    if (!esi)
        goto loc_1ae841;
    eax = edx;
    sub_1bb827();
    goto loc_1b23b3;
loc_1ae841: // 0160:1ae841
    eax = memoryAGet32(ds, 0x3a1c78);
    edi = memoryAGet32(ds, 0x3a1c7c);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)edi;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3806562, eax);
    eax = memoryAGet32(ds, 0x3a1c78);
    ebp = memoryAGet32(ds, 0x3a1c80);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)ebp;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    memoryASet32(ds, ebx + 3806566, eax);
    goto loc_1b23b3;
    // gap 15127 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aec45() // 0160:1aec45 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 44, ecx);
    ecx = memoryAGet32(ds, ebx);
    edx = 0;
    ebx = memoryAGet32(ds, esp + 44);
    ebp = edi + -4;
    memoryASet32(ds, esp + 48, edx);
    ebx = memoryAGet32(ds, ebx);
    if ((int32_t)ebp <= 0)
        goto loc_1aed2c;
    if (eax >= 0x000003c0)
        goto loc_1aed2c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aed2c;
    if ((int32_t)ebx >= 0)
        goto loc_1aed2c;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax + eax;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_1aedf5;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
    goto loc_1aedf5;
loc_1aed2c: // 0160:1aed2c
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_1aedfd;
    if (esi >= 0x000003c0)
        goto loc_1aedfd;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aedfd;
    if ((int32_t)ebx <= 0)
        goto loc_1aedfd;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1aedde;
    if ((int32_t)eax <= (int32_t)0xfffffe80)
        goto loc_1aedde;
    ebx ^= eax;
loc_1aedde: // 0160:1aedde
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_1aedf5;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
loc_1aedf5: // 0160:1aedf5
    memoryASet32(ds, esp + 48, 0x00000001);
loc_1aedfd: // 0160:1aedfd
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1aee8d;
    eax = esi + -1;
    memoryASet32(ds, esp + 36, eax);
    if (eax >= 0x000003c0)
        goto loc_1aee8d;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 36);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244655);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aef9f;
loc_1aee8d: // 0160:1aee8d
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1aef18;
    eax = esi + -2;
    memoryASet32(ds, esp + 40, eax);
    if (eax >= 0x000003c0)
        goto loc_1aef18;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244654);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1aef9f;
loc_1aef18: // 0160:1aef18
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1aefa7;
    eax = esi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_1aefa7;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244653);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1aefa7;
loc_1aef9f: // 0160:1aef9f
    if ((int32_t)ecx < 0)
        goto loc_1af156;
loc_1aefa7: // 0160:1aefa7
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1af032;
    eax = esi + 1;
    memoryASet32(ds, esp + 24, eax);
    if (eax >= 0x000003c0)
        goto loc_1af032;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 24);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244657);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1af152;
loc_1af032: // 0160:1af032
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1af0c2;
    eax = esi + 2;
    memoryASet32(ds, esp + 28, eax);
    if (eax >= 0x000003c0)
        goto loc_1af0c2;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244658);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1af152;
loc_1af0c2: // 0160:1af0c2
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_1af17c;
    eax = esi + 3;
    memoryASet32(ds, esp + 12, eax);
    if (eax >= 0x000003c0)
        goto loc_1af17c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 12);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244659);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1af17c;
loc_1af152: // 0160:1af152
    if ((int32_t)ecx <= 0)
        goto loc_1af17c;
loc_1af156: // 0160:1af156
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    memoryASet32(ds, esp + 48, 0x00000001);
loc_1af17c: // 0160:1af17c
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_1af447;
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_1af223;
    eax = esi + -3;
    memoryASet32(ds, esp + 4, eax);
    if (eax >= 0x000003c0)
        goto loc_1af223;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244653);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1af223;
    if ((int32_t)ecx >= 0)
        goto loc_1af223;
    if ((int32_t)ebx > 0)
        goto loc_1af3e3;
loc_1af223: // 0160:1af223
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_1af2bf;
    eax = esi + 3;
    memoryASet32(ds, esp + 16, eax);
    if (eax >= 0x000003c0)
        goto loc_1af2bf;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244659);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1af2bf;
    if ((int32_t)ecx <= 0)
        goto loc_1af2bf;
    if ((int32_t)ebx > 0)
        goto loc_1af3e3;
loc_1af2bf: // 0160:1af2bf
    ebp = edi + -4;
    if ((int32_t)ebp <= 0)
        goto loc_1af35b;
    eax = esi + -3;
    memoryASet32(ds, esp + 32, eax);
    if (eax >= 0x000003c0)
        goto loc_1af35b;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244653);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1af35b;
    if ((int32_t)ecx >= 0)
        goto loc_1af35b;
    if ((int32_t)ebx < 0)
        goto loc_1af3e3;
loc_1af35b: // 0160:1af35b
    edi -= 0x00000004;
    if ((int32_t)edi <= 0)
        goto loc_1af447;
    ebp = esi + 3;
    if (ebp >= 0x000003c0)
        goto loc_1af447;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet32(ds, esp);
    eax += eax;
    eax += ebp;
    edx = 0;
    dx = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = edi;
    eax <<= 4;
    eax -= edi;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244659);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1af447;
    if ((int32_t)ecx <= 0)
        goto loc_1af447;
    if ((int32_t)ebx >= 0)
        goto loc_1af447;
loc_1af3e3: // 0160:1af3e3
    ecx = -ecx;
    edx = ecx;
    edx <<= 4;
    edx -= ecx;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, esp + 48, eax);
    if (!edx)
        goto loc_1af447;
    esi = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = eax;
loc_1af447: // 0160:1af447
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_1af488;
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
loc_1af488: // 0160:1af488
    if (ebx)
        goto loc_1af4a1;
    edx = ecx * 0x000000e6;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
loc_1af4a1: // 0160:1af4a1
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1af4af;
    ecx = 0;
loc_1af4af: // 0160:1af4af
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1af4c4() // 0160:1af4c4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000038;
    edx = edi + -24;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = esi + -12;
    edx <<= 9;
    eax <<= 9;
    sub_1ae04a();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_1ae25e();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1af508() // 0160:1af508 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    push32(0x0000000a);
    ecx = 0x0000001e;
    ebx = 0x00000017;
    edx -= 0x00000018;
    eax -= 0x0000000c;
    edx <<= 9;
    eax <<= 9;
    sub_1ae04a();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_1ae204();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1af541() // 0160:1af541 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 3803550, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803530, esi);
    eax = 0x00000001;
    memoryASet32(ds, 0x3a1cc0, esi);
    esi = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1f00, eax);
    eax = esi * 0x000000ac;
    push32(0x00000002);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = ebx + -24;
    edx <<= 9;
    ebx = 0x0000004b;
    eax <<= 9;
    sub_1ae04a();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1af5a6() // 0160:1af5a6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    edi = eax;
    esi = memoryAGet32(ds, eax + 3806546);
    ebp = memoryAGet32(ds, eax + 3806550);
loc_1af5c6: // 0160:1af5c6
    edx = memoryAGet32(ds, ebx + 3803494);
    if (!edx)
        goto loc_1af619;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3803498);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00002710)
        goto loc_1af619;
    eax = memoryAGet32(ds, edi + 3806574);
    eax -= 0x00000021;
    memoryASet32(ds, 0x3c0f28, esi);
    memoryASet32(ds, 0x3a1ea4, eax);
loc_1af619: // 0160:1af619
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_1af5c6;
    goto loc_1b23b3;
    // gap 11655 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1af62c() // 0160:1af62c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edx = memoryAGet32(ds, 0x3a1ea4);
    if (!edx)
        goto loc_1af6bd;
    ebx = edx + -1;
    memoryASet32(ds, 0x3a1ea4, ebx);
    if (ebx)
        goto loc_1af6bd;
    edx = 0x00000002;
    eax = 0;
    sub_1ab709();
    ecx = eax;
    if (eax)
        goto loc_1af67d;
    eax = memoryAGet32(ds, 0x3c0f28);
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000010;
    sub_1bda16();
loc_1af67d: // 0160:1af67d
    if (ecx != 0x00000001)
        goto loc_1af69d;
    eax = memoryAGet32(ds, 0x3c0f28);
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000017;
    sub_1bda16();
loc_1af69d: // 0160:1af69d
    if (ecx != 0x00000002)
        goto loc_1af6bd;
    eax = memoryAGet32(ds, 0x3c0f28);
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x0000001f;
    sub_1bda16();
loc_1af6bd: // 0160:1af6bd
    edi = memoryAGet32(ds, 0x3a1552);
    ebp = 0;
    esi = 0;
    if (!edi)
        goto loc_1afb87;
    eax = memoryAGet32(ds, 0x3a1556);
    memoryASet32(ds, 0x3a155e, eax);
    eax = memoryAGet32(ds, 0x3a1572);
    memoryASet32(ds, 0x3a155a, edi);
    if (eax == 0x0000000b)
        goto loc_1af6f7;
    eax = memoryAGet32(ds, 0x3a1562);
    edx = edi + eax;
    memoryASet32(ds, 0x3a1552, edx);
loc_1af6f7: // 0160:1af6f7
    eax = memoryAGet32(ds, esi + 3806566);
    ebx = memoryAGet32(ds, esi + 3806550);
    ebx += eax;
    ecx = memoryAGet32(ds, 0x1e3c68);
    memoryASet32(ds, esi + 3806550, ebx);
    if (!ecx)
        goto loc_1af723;
    ecx = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, esi + 3806566, memoryAGet32(ds, esi + 3806566) + ecx);
    goto loc_1af754;
loc_1af723: // 0160:1af723
    edi = memoryAGet32(ds, esi + 3806566);
    if ((int32_t)edi >= (int32_t)0x00004000)
        goto loc_1af754;
    if (edi)
        goto loc_1af73e;
    if (memoryAGet32(ds, esi + 3806562) == 0x00000000)
        goto loc_1af754;
loc_1af73e: // 0160:1af73e
    ebx = memoryAGet32(ds, 0x3a1d44);
    eax = memoryAGet32(ds, esi + 3806566);
    eax += ebx;
    al |= 0x01;
    memoryASet32(ds, esi + 3806566, eax);
loc_1af754: // 0160:1af754
    eax = memoryAGet32(ds, esi + 3806546);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3806550);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 16, eax);
    eax = memoryAGet32(ds, esi + 3806554);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3806574, memoryAGet32(ds, esi + 3806574) - 1);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3806558);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 24, eax);
    if (memoryAGet32(ds, esi + 3806578) != 0x0000000b)
        goto loc_1af872;
    eax = memoryAGet32(ds, esi + 3806574);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = 0x00000008;
    eax += eax;
    ecx -= eax;
    eax = memoryAGet32(ds, esi + 3806574);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax &= 0x00000001;
    ecx += eax;
    if (memoryAGet(ds, esi + 3806574) & 0x0f)
        goto loc_1af81a;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x00000030;
    sub_19e36c();
    edx = eax;
    eax = 0x0000001d;
    sub_1bda16();
loc_1af81a: // 0160:1af81a
    if ((int32_t)ecx >= 0)
        goto loc_1af821;
    ecx += 0x00000002;
loc_1af821: // 0160:1af821
    eax = memoryAGet32(ds, esi + 3806562);
    ecx <<= 4;
    if ((int32_t)eax <= 0)
        goto loc_1af836;
    ecx += 0x002eb530;
    goto loc_1af83c;
loc_1af836: // 0160:1af836
    ecx += 0x002aca70;
loc_1af83c: // 0160:1af83c
    memoryASet32(ds, esi + 3806570, ecx);
    edx = 0x00000032;
    eax = esp;
    ebx = memoryAGet32(ds, esp + 24);
    push32(eax);
    eax = esp + 8;
    ecx = edi;
    push32(eax);
    memoryASet32(ds, 0x3a1efc, edx);
    edx = esp + 28;
loc_1af85f: // 0160:1af85f
    push32(ebx);
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = esp + 28;
    sub_1ad28a();
    edx = eax;
    goto loc_1af8a8;
loc_1af872: // 0160:1af872
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esi + 3806566);
    ebx = memoryAGet32(ds, esi + 3806562);
    sub_1adb97();
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x00000008)
        goto loc_1af8a6;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    ebx = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = esp + 28;
    ecx = edi;
    goto loc_1af85f;
loc_1af8a6: // 0160:1af8a6
    edx = 0;
loc_1af8a8: // 0160:1af8a8
    if (memoryAGet32(ds, 0x3a1ea4) != 0x00000000)
        goto loc_1af8e5;
    if (memoryAGet32(ds, 0x3c0f28) != 0x00000000)
        goto loc_1af8e5;
    if (memoryAGet32(ds, esi + 3806562) != 0x00000000)
        goto loc_1af8e5;
    if (memoryAGet32(ds, esi + 3806566) != 0x00000000)
        goto loc_1af8e5;
    if ((int32_t)memoryAGet32(ds, esi + 3806574) <= (int32_t)0x00000025)
        goto loc_1af8e5;
    if (memoryAGet32(ds, esi + 3806578) != 0x00000004)
        goto loc_1af8e5;
    eax = ebp;
    sub_1af5a6();
loc_1af8e5: // 0160:1af8e5
    eax = memoryAGet32(ds, 0x3a1e04);
    if (!eax)
        goto loc_1af959;
    if ((int32_t)eax <= 0)
        goto loc_1af90d;
    edi = eax + -1;
    eax = 0x002f4700;
    memoryASet32(ds, 0x3a1e04, edi);
    ebx = 0;
    memoryASet32(ds, esi + 3806570, eax);
    ecx = 0xffffffff;
    goto loc_1af92d;
loc_1af90d: // 0160:1af90d
    if ((int32_t)eax >= 0)
        goto loc_1af939;
    edi = eax + 1;
    eax = 0x002f4708;
    memoryASet32(ds, 0x3a1e04, edi);
    ebx = 0xffffffff;
    memoryASet32(ds, esi + 3806570, eax);
    ecx = 0x00000001;
loc_1af92d: // 0160:1af92d
    memoryASet32(ds, 0x3a1dfc, ebx);
    memoryASet32(ds, 0x3a1e00, ecx);
loc_1af939: // 0160:1af939
    edi = memoryAGet32(ds, 0x3a1e04);
    if (edi)
        goto loc_1af959;
    memoryASet32(ds, esi + 3806570, 0x002f46e0);
    memoryASet32(ds, 0x3a1dfc, edi);
    memoryASet32(ds, 0x3a1e00, edi);
loc_1af959: // 0160:1af959
    if (!edx)
        goto loc_1afa4d;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    memoryASet32(ds, esi + 3806546, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx = esp + 8;
    eax <<= 9;
    ebx = esp + 12;
    memoryASet32(ds, esi + 3806550, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 3806562);
    edi = memoryAGet32(ds, 0x3a1d84);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3806566);
    push32(edi);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1aec45();
    if (memoryAGet32(ds, esi + 3806578) != 0x0000000b)
        goto loc_1af9c6;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    goto loc_1afa47;
loc_1af9c6: // 0160:1af9c6
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esi + 3806546);
    ebx = memoryAGet32(ds, esi + 3806550);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esi + 3806546, edx);
    ebx += eax;
    ecx = memoryAGet32(ds, esi + 3806578);
    memoryASet32(ds, esi + 3806550, ebx);
    if (ecx != 0x00000004)
        goto loc_1afa39;
    edi = memoryAGet32(ds, esp + 12);
    if (edi == memoryAGet32(ds, esi + 3806562))
        goto loc_1afa15;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1afa15;
    memoryASet32(ds, 0x3a1e04, ecx);
loc_1afa15: // 0160:1afa15
    edx = memoryAGet32(ds, esp + 8);
    if (edx == memoryAGet32(ds, esi + 3806566))
        goto loc_1afa39;
    eax = edx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1afa39;
    memoryASet32(ds, 0x3a1e04, 0xfffffffc);
loc_1afa39: // 0160:1afa39
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esi + 3806562, eax);
    eax = memoryAGet32(ds, esp + 8);
loc_1afa47: // 0160:1afa47
    memoryASet32(ds, esi + 3806566, eax);
loc_1afa4d: // 0160:1afa4d
    if ((int32_t)memoryAGet32(ds, esi + 3806574) > (int32_t)0x00000000)
        goto loc_1afad4;
    edi = memoryAGet32(ds, esi + 3806578);
    if (edi != 0x00000036)
        goto loc_1afa74;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1af4c4();
    goto loc_1afacc;
loc_1afa74: // 0160:1afa74
    if (edi != 0x00000024)
        goto loc_1afa88;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1af508();
    goto loc_1afacc;
loc_1afa88: // 0160:1afa88
    if (edi != 0x0000000b)
        goto loc_1afa9c;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_1af541();
    goto loc_1afacc;
loc_1afa9c: // 0160:1afa9c
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 16);
    push32(0x00000005);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = memoryAGet32(ds, esp + 24);
    edx <<= 9;
    eax -= 0x00000010;
    ebx = 0x0000002d;
    eax <<= 9;
    sub_1ae04a();
loc_1afacc: // 0160:1afacc
    ecx = 0;
    memoryASet32(ds, esi + 3806546, ecx);
loc_1afad4: // 0160:1afad4
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1afaec;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1afb87;
loc_1afaec: // 0160:1afaec
    edx = memoryAGet32(ds, esi + 3806578);
    if (edx == 0x00000004)
        goto loc_1afafc;
    if (edx != 0x00000024)
        goto loc_1afb26;
loc_1afafc: // 0160:1afafc
    edx = 0x00000004;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1afb26;
    eax = ebp;
    ebx = 0x00000080;
    sub_19e30a();
    edx = eax;
    eax = 0x00000029;
    sub_1bda16();
    goto loc_1afb41;
loc_1afb26: // 0160:1afb26
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1afb41;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1accfe();
loc_1afb41: // 0160:1afb41
    edi = 0;
    ebp = memoryAGet32(ds, esi + 3806578);
    memoryASet32(ds, esi + 3806546, edi);
    if (ebp != 0x0000000b)
        goto loc_1afb87;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803550, edi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 3803530, edi);
    edi = 0x00000001;
    memoryASet32(ds, 0x3a1cc0, ebx);
    memoryASet32(ds, 0x3a1f00, edi);
loc_1afb87: // 0160:1afb87
    esp += 0x0000001c;
    goto loc_1b23b3;
    // gap 10276 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1afb8f() // 0160:1afb8f +long
{
    esp -= 4;
    goto loc_1afb8f;
loc_1ae3e8: // 0160:1ae3e8
    sub_19e029();
    goto loc_1b23b4;
    // gap 6045 bytes
loc_1afb8f: // 0160:1afb8f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x3a1552);
    ebx = 0;
    if (!edx)
        goto loc_1b23b4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x3a1572);
    ecx = eax;
    if (esi != 0x0000000b)
        goto loc_1afbf9;
    edi = memoryAGet32(ds, 0x3a1562);
    esi = eax;
    if ((int32_t)edi >= 0)
        goto loc_1afbcd;
    esi = eax + -14;
loc_1afbcd: // 0160:1afbcd
    eax = memoryAGet32(ds, ebx + 3806550);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000d);
    edx = eax + -11;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, ebx + 3806570);
    ebx = edx;
    edx = esi;
    goto loc_1ae3e8;
loc_1afbf9: // 0160:1afbf9
    eax = memoryAGet32(ds, 0x3a1556);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x3a1e00);
    eax -= 0x00000003;
    edx = memoryAGet32(ds, 0x3a1dfc);
    ebx += eax;
    edx += ecx;
    ecx = 0x00000006;
    eax = memoryAGet32(ds, 0x3a156a);
    goto loc_1ae3e8;
    // gap 10117 bytes
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1afc2f() // 0160:1afc2f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edx = memoryAGet32(ds, 0x3a140e);
    ecx = 0;
    if (edx)
        goto loc_1b23b3;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803502);
    memoryASet32(ds, 0x3a140e, edx);
    edx = memoryAGet32(ds, eax + 3803506);
    edx -= 0x00000a00;
    memoryASet32(ds, 0x3a1412, edx);
    if ((int32_t)memoryAGet32(ds, eax + 3803518) <= (int32_t)0x00000000)
        goto loc_1afc84;
    memoryASet32(ds, 0x3a140e, memoryAGet32(ds, 0x3a140e) + 0x00000600);
    goto loc_1afc8e;
loc_1afc84: // 0160:1afc84
    memoryASet32(ds, 0x3a140e, memoryAGet32(ds, 0x3a140e) - 0x00000a00);
loc_1afc8e: // 0160:1afc8e
    edx = memoryAGet32(ds, 0x3a1c7c);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx <<= 10;
    edi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    ebx <<= 2;
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) + eax);
    edx = memoryAGet32(ds, 0x3a1c80);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 10;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    memoryASet32(ds, ebx + 3806250, esi);
    ebp = 0x00000020;
    edi = memoryAGet32(ds, ebx + 3806226);
    memoryASet32(ds, ebx + 3806254, ebp);
    edi -= eax;
    memoryASet32(ds, ebx + 3806226, edi);
    if (esi < 0x00000002)
        goto loc_1afd1a;
    if (esi <= 0x00000002)
        goto loc_1afdd8;
    if (esi < 0x00000022)
        goto loc_1b23b3;
    if (esi <= 0x00000022)
        goto loc_1afff5;
    if (esi == 0x00000038)
        goto loc_1aff22;
    goto loc_1b23b3;
loc_1afd1a: // 0160:1afd1a
    if (esi > 0)
        goto loc_1afea0;
    edx = 0x002f58b0;
    esi = memoryAGet32(ds, 0x1e3c68);
    memoryASet32(ds, ebx + 3806246, edx);
    if (!esi)
        goto loc_1afd43;
    eax = ecx;
    sub_1bb889();
    goto loc_1afdc9;
loc_1afd43: // 0160:1afd43
    edx = memoryAGet32(ds, 0x3a1c78);
    edi = memoryAGet32(ds, 0x3a1c7c);
    edx -= 0x0000000f;
    edx = (int32_t)edx * (int32_t)edi;
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3806238, eax);
    eax = memoryAGet32(ds, 0x3a1c78);
    ebp = memoryAGet32(ds, 0x3a1c80);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)ebp;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = 0x00000003;
    edx = memoryAGet32(ds, ebx + 3806238);
    eax = -eax;
    edx += edx;
    memoryASet32(ds, ebx + 3806242, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) - eax);
    edx = memoryAGet32(ds, ebx + 3806242);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 3806226, memoryAGet32(ds, ebx + 3806226) - eax);
loc_1afdc9: // 0160:1afdc9
    memoryASet32(ds, 0x3a1e90, 0x0000004b);
    goto loc_1b23b3;
loc_1afdd8: // 0160:1afdd8
    ecx = memoryAGet32(ds, ebx + 3806226);
    esi = 0x002f58b0;
    ecx -= 0x00000400;
    memoryASet32(ds, ebx + 3806246, esi);
    memoryASet32(ds, ebx + 3806226, ecx);
    eax = memoryAGet32(ds, 0x3a1c78);
    edi = memoryAGet32(ds, 0x3a1c7c);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)edi;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 3806238, eax);
    edx = memoryAGet32(ds, 0x3a1c78);
    ebp = memoryAGet32(ds, 0x3a1c80);
    edx -= 0x0000000f;
    edx = (int32_t)edx * (int32_t)ebp;
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    edx = 0x00000001;
    memoryASet32(ds, ebx + 3806242, eax);
    eax = 0x0000004b;
    memoryASet32(ds, 0x3a1d3c, edx);
    memoryASet32(ds, 0x3a1e90, eax);
    eax = memoryAGet32(ds, ebx + 3806238);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, ebx + 3806222);
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 3806242);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = memoryAGet32(ds, ebx + 3806226);
    memoryASet32(ds, ebx + 3806222, ecx);
    esi -= eax;
    memoryASet32(ds, ebx + 3806226, esi);
    goto loc_1b23b3;
loc_1afea0: // 0160:1afea0
    edx = memoryAGet32(ds, 0x3a1c7c);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 4;
    memoryASet32(ds, ebx + 3806238, eax);
    edx = memoryAGet32(ds, 0x3a1c80);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edi = memoryAGet32(ds, ebx + 3806226);
    eax += edx;
    edi += 0x00000200;
    eax <<= 4;
    memoryASet32(ds, ebx + 3806226, edi);
    eax = -eax;
    ebp = memoryAGet32(ds, 0x1e3c68);
    memoryASet32(ds, ebx + 3806242, eax);
    if (!ebp)
        goto loc_1afefb;
    eax = ecx;
    sub_1bb927();
loc_1afefb: // 0160:1afefb
    memoryASet32(ds, 0x3a1e90, 0x00000018);
    eax = ecx;
    ebx = 0x000000ff;
loc_1aff0c: // 0160:1aff0c
    sub_19e30a();
    edx = eax;
    eax = 0x0000000d;
    sub_1bda16();
    goto loc_1b23b3;
loc_1aff22: // 0160:1aff22
    memoryASet32(ds, ebx + 3806246, 0x002f46e0);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = 0;
    ebx = memoryAGet32(ds, ebx + 3803518);
    memoryASet32(ds, 0x1e3a8c, eax);
    if (ebx)
        goto loc_1aff4c;
    ebx = 0xffffffff;
loc_1aff4c: // 0160:1aff4c
    eax = memoryAGet32(ds, 0x3a1c84);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x3a1c80, eax);
    eax = memoryAGet32(ds, 0x3a1c84);
    eax += 0x00000040;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)ebx;
    ebx = eax;
    ebx <<= 2;
    ebx += eax;
    ebx += ebx;
    memoryASet32(ds, 0x3a1c7c, eax);
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x3a141e, ebx);
    edx = memoryAGet32(ds, 0x3a1c80);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx += ebx;
    edx = ebx;
    ebx <<= 4;
    ebx -= edx;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, eax * 4 + 0x3a1422, edx);
    eax = ecx;
    ebx = 0x00000020;
    goto loc_1aff0c;
loc_1afff5: // 0160:1afff5
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803502);
    memoryASet32(ds, ebx + 3806222, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803518) <= (int32_t)0x00000000)
        goto loc_1b002a;
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) + 0x00000600);
    goto loc_1b0034;
loc_1b002a: // 0160:1b002a
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) - 0x00000a00);
loc_1b0034: // 0160:1b0034
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    edx = memoryAGet32(ds, eax + 3803518);
    ebx <<= 2;
    if ((int32_t)edx < 0)
        goto loc_1b007c;
    eax = 0x002fea70;
    esi = 0x00000600;
    edx = memoryAGet32(ds, ebx + 3806222);
    memoryASet32(ds, ebx + 3806246, eax);
    edx -= 0x00000400;
    memoryASet32(ds, ebx + 3806238, esi);
    memoryASet32(ds, ebx + 3806222, edx);
    goto loc_1b00a4;
loc_1b007c: // 0160:1b007c
    esi = 0x002fdf30;
    ebp = 0xfffffa00;
    edi = memoryAGet32(ds, ebx + 3806222);
    memoryASet32(ds, ebx + 3806246, esi);
    edi += 0x00000400;
    memoryASet32(ds, ebx + 3806238, ebp);
    memoryASet32(ds, ebx + 3806222, edi);
loc_1b00a4: // 0160:1b00a4
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x3a142e, 0x00000014);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803506);
    edx -= 0x00000600;
    memoryASet32(ds, eax * 4 + 0x3a1412, edx);
    edx = 0;
    memoryASet32(ds, eax * 4 + 0x3a1422, edx);
    goto loc_1b23b3;
    // gap 8914 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b00e1() // 0160:1b00e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    goto loc_1b0281;
loc_1b00ee: // 0160:1b00ee
    ebx = ecx * 0x00000024;
    if (memoryAGet32(ds, ebx + 3806222) != 0x00000000)
        goto loc_1b0280;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803502);
    memoryASet32(ds, ebx + 3806222, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803506);
    eax -= 0x00000a00;
    memoryASet32(ds, ebx + 3806226, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803518) <= (int32_t)0x00000000)
        goto loc_1b014e;
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) + 0x00000600);
    goto loc_1b0158;
loc_1b014e: // 0160:1b014e
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) - 0x00000a00);
loc_1b0158: // 0160:1b0158
    edx = memoryAGet32(ds, 0x3a1c7c) * 0x00000c00;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = ecx * 0x00000024;
    memoryASet32(ds, ebx + 3806222, memoryAGet32(ds, ebx + 3806222) + eax);
    edx = memoryAGet32(ds, 0x3a1c80) * 0x00000c00;
    edx = -edx;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edi = memoryAGet32(ds, ebx + 3806226);
    edi += eax;
    ebp = edi + 512;
    memoryASet32(ds, ebx + 3806226, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803542);
    esi = 0;
    memoryASet32(ds, ebx + 3806250, eax);
    memoryASet32(ds, ebx + 3806254, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000027)
        goto loc_1b01e0;
    edx = 0x00000002;
    eax = 0xfffffffe;
    goto loc_1b01ea;
loc_1b01e0: // 0160:1b01e0
    edx = 0x00000004;
    eax = 0xfffffffc;
loc_1b01ea: // 0160:1b01ea
    sub_1ab709();
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1c84);
    eax += ebx;
    eax &= 0x000000ff;
    esi = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    edx = esi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = eax;
    eax = memoryAGet32(ds, 0x3a1c84);
    eax += ebx;
    eax += 0x00000040;
    eax &= 0x000000ff;
    edi = memoryAGet32(ds, eax * 4 + 0x1d7bf0);
    edx = edi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, edx + 3803518);
    ebx = ecx * 0x00000024;
    eax = eax * 0x00000190;
    memoryASet32(ds, ebx + 3806238, eax);
    eax = esi * 0x00000190;
    eax = -eax;
    esi = memoryAGet32(ds, 0x1e3c68);
    memoryASet32(ds, ebx + 3806242, eax);
    if (!esi)
        goto loc_1b027b;
    eax = ecx;
    sub_1bb927();
loc_1b027b: // 0160:1b027b
    ecx = 0x00000008;
loc_1b0280: // 0160:1b0280
    ecx++;
loc_1b0281: // 0160:1b0281
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_1b00ee;
    goto loc_1b23b3;
    // gap 8484 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b028f() // 0160:1b028f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x3a1d18);
    if (!edx)
        goto loc_1b033b;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = edx + -1;
    memoryASet32(ds, 0x3a1d18, ecx);
    if (memoryAGet32(ds, eax + 3803542) != 0x00000027)
        goto loc_1b02e3;
    ebx = 0x00000006;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1b02d4;
    sub_1b00e1();
loc_1b02d4: // 0160:1b02d4
    eax = memoryAGet32(ds, 0x3a1d18);
    eax &= 0x00000003;
    if (eax != 0x00000003)
        goto loc_1b032b;
    goto loc_1b0310;
loc_1b02e3: // 0160:1b02e3
    ebx = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1b02fa;
    sub_1b00e1();
loc_1b02fa: // 0160:1b02fa
    eax = memoryAGet32(ds, 0x3a1d18);
    edx = eax;
    ebx = 0x00000002;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx != 0x00000001)
        goto loc_1b032b;
loc_1b0310: // 0160:1b0310
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x00000015;
    sub_1bda16();
loc_1b032b: // 0160:1b032b
    edi = memoryAGet32(ds, 0x3a1d18);
    if (edi)
        goto loc_1b033b;
    memoryASet32(ds, 0x3a1cc0, edi);
loc_1b033b: // 0160:1b033b
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b0340() // 0160:1b0340 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    esi = 0;
    eax += 0x00001400;
    ecx = 0;
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp + 20, ebx);
    eax += 0x00002000;
    ebx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_1b0441;
loc_1b039a: // 0160:1b039a
    edx = memoryAGet32(ds, ebx + 3803494);
    if (!edx)
        goto loc_1b043a;
    if (esi == memoryAGet32(ds, 0x3a1c64))
        goto loc_1b043a;
    if (memoryAGet32(ds, ebx + 3803526) != 0x00000000)
        goto loc_1b043a;
    if (memoryAGet32(ds, ebx + 3803474) != 0x00000000)
        goto loc_1b043a;
    eax = edx;
    edx = memoryAGet32(ds, esp + 24);
    edi = memoryAGet32(ds, esp + 12);
    eax -= edx;
    ebp = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ebx + 3803498);
    edx = memoryAGet32(ds, esp + 8);
    edi -= ebp;
    edi -= edx;
    if ((int32_t)eax <= 0)
        goto loc_1b040a;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ecx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1b0408;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1b040a;
loc_1b0408: // 0160:1b0408
    ecx = ebp;
loc_1b040a: // 0160:1b040a
    if (!ecx)
        goto loc_1b043a;
    if ((int32_t)edi <= 0)
        goto loc_1b042b;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ecx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1b0429;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b042b;
loc_1b0429: // 0160:1b0429
    ecx = ebp;
loc_1b042b: // 0160:1b042b
    if (ecx != 0x00000002)
        goto loc_1b0438;
    memoryASet32(ds, 0x3a1cac, esi);
    goto loc_1b043a;
loc_1b0438: // 0160:1b0438
    ecx = 0;
loc_1b043a: // 0160:1b043a
    ebx += 0x000000ac;
    esi++;
loc_1b0441: // 0160:1b0441
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_1b044e;
    if (!ecx)
        goto loc_1b039a;
loc_1b044e: // 0160:1b044e
    eax = ecx;
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b0457() // 0160:1b0457 +long
{
    esp -= 4;
    goto loc_1b0457;
loc_1b0450: // 0160:1b0450
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1b0457: // 0160:1b0457
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    esi = 0;
    ebx -= eax;
    eax = ecx + 5120;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    ebx = 0;
    eax += 0x00002000;
    ecx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_1b0547;
loc_1b04af: // 0160:1b04af
    edx = memoryAGet32(ds, ecx + 3803494);
    if (!edx)
        goto loc_1b0540;
    edi = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    eax = edx;
    edx = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ecx + 3803498);
    eax -= ebp;
    ebp = memoryAGet32(ds, esp + 8);
    edi -= edx;
    edi -= ebp;
    if ((int32_t)eax <= 0)
        goto loc_1b04f9;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ebx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1b04f7;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1b04f9;
loc_1b04f7: // 0160:1b04f7
    ebx = ebp;
loc_1b04f9: // 0160:1b04f9
    if (!ebx)
        goto loc_1b0540;
    if ((int32_t)edi <= 0)
        goto loc_1b051a;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1b0518;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b051a;
loc_1b0518: // 0160:1b0518
    ebx = ebp;
loc_1b051a: // 0160:1b051a
    if (ebx != 0x00000002)
        goto loc_1b0527;
    memoryASet32(ds, 0x3a1cac, esi);
    goto loc_1b0529;
loc_1b0527: // 0160:1b0527
    ebx = 0;
loc_1b0529: // 0160:1b0529
    if (memoryAGet32(ds, 0x1e3ac4) == 0x00000000)
        goto loc_1b0540;
    if (!ebx)
        goto loc_1b0540;
    if (esi == memoryAGet32(ds, 0x3a1c64))
        goto loc_1b0540;
    ebx = 0;
loc_1b0540: // 0160:1b0540
    ecx += 0x000000ac;
    esi++;
loc_1b0547: // 0160:1b0547
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_1b0554;
    if (!ebx)
        goto loc_1b04af;
loc_1b0554: // 0160:1b0554
    eax = ebx;
    goto loc_1b0450;
}
void sub_1b055b() // 0160:1b055b +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    edi = edx;
    esi = ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0xfffff000;
    edx -= eax;
    memoryASet32(ds, esp, edx);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0xfffffe00;
    edx -= eax;
    eax = memoryAGet32(ds, 0x3a1b56);
    ebx = 0;
    if (!eax)
        goto loc_1b05ff;
    eax -= memoryAGet32(ds, esp);
    eax -= ebp;
    ebp = memoryAGet32(ds, 0x3a1b5a);
    ebp -= edx;
    ebp -= edi;
    edi = ebp;
    if ((int32_t)eax <= 0)
        goto loc_1b05ca;
    ebp = esi + 8192;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_1b05c5;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_1b05ca;
loc_1b05c5: // 0160:1b05c5
    ebx = 0x00000001;
loc_1b05ca: // 0160:1b05ca
    if (!ebx)
        goto loc_1b05ff;
    if ((int32_t)edi <= 0)
        goto loc_1b05ec;
    eax = ecx + 5120;
    esi = ebx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_1b05ea;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_1b05ec;
loc_1b05ea: // 0160:1b05ea
    ebx = esi;
loc_1b05ec: // 0160:1b05ec
    if (ebx != 0x00000002)
        goto loc_1b05fd;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1cac, eax);
    goto loc_1b05ff;
loc_1b05fd: // 0160:1b05fd
    ebx = 0;
loc_1b05ff: // 0160:1b05ff
    eax = ebx;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b0608() // 0160:1b0608 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, ebx * 4 + 0x3a1422, memoryAGet32(ds, ebx * 4 + 0x3a1422) + eax);
    edx = memoryAGet32(ds, 0x3a1c98);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    edx <<= 9;
    esi = 0x0000004b;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = memoryAGet32(ds, ebx * 4 + 0x3a141e);
    esi += eax;
    eax = esi;
    memoryASet32(ds, ebx * 4 + 0x3a141e, esi);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_1b0670;
    ebx = 0x00000001;
loc_1b0670: // 0160:1b0670
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, eax * 4 + 0x3a1422);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_1b0691;
    eax = 0x00000004;
loc_1b0691: // 0160:1b0691
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_1b069b;
    eax = 0xfffffffc;
loc_1b069b: // 0160:1b069b
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, ebx * 4 + 0x3a141e) > (int32_t)0x00000000)
        goto loc_1b06b0;
    eax = -eax;
    goto loc_1b06b3;
loc_1b06b0: // 0160:1b06b0
    eax += 0x00000008;
loc_1b06b3: // 0160:1b06b3
    eax &= 0x0000000f;
    edx = 0x002f58b0;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x3a1426, edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b06d3() // 0160:1b06d3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    ecx = edx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)esi <= (int32_t)eax)
        goto loc_1b06f0;
    eax = ebx;
    goto loc_1b06f2;
loc_1b06f0: // 0160:1b06f0
    eax = ecx;
loc_1b06f2: // 0160:1b06f2
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b06fb() // 0160:1b06fb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000028;
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    ebx <<= 2;
    eax = memoryAGet32(ds, ebx + 3806222);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3806226);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x3a1d3c);
    edx++;
    memoryASet32(ds, 0x3a1d3c, edx);
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_1b092b;
    if ((int32_t)edx >= (int32_t)0x000000fa)
        goto loc_1b092b;
    fild32(memoryAGet32(ds, ebx + 3806238));
    edx = memoryAGet32(ds, 0x3a1d1c);
    fmul32(memoryAGet32(ds, 0x1d608c));
    edx -= esi;
    memoryASet32(ds, esp + 32, fstp32());
    fild32(memoryAGet32(ds, ebx + 3806242));
    fmul32(memoryAGet32(ds, 0x1d608c));
    memoryASet32(ds, esp, edx);
    edx = memoryAGet32(ds, 0x3a1d20);
    memoryASet32(ds, esp + 4, fstp32());
    edx -= eax;
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, fstp32());
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 8, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul80(st(0));
    fld32(memoryAGet32(ds, esp + 8));
    fmul80(st(0));
    faddp80(st(1));
    sub_1cb9f2();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    sub_1b77c2();
    memoryASet32(ds, esp, eax);
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 16, fstp32());
    if (!(memoryAGet32(ds, esp + 16) & 0x7fffffff))
        goto loc_1b093f;
    fld32(memoryAGet32(ds, 0x1d6090));
    stop("disassembly failed at 160:1b07d8 fsub dword ptr [esp + 0x10]");
    stop("disassembly failed at 160:1b07dc fst dword ptr [esp + 0x24]");
    fcomp32(memoryAGet32(ds, 0x1d6094));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1b07f3;
    memoryASet32(ds, esp + 36, 0x43800000);
loc_1b07f3: // 0160:1b07f3
    fld32(memoryAGet32(ds, esp + 36));
    fcomp32(memoryAGet32(ds, 0x1d6090));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1b080a;
    memoryASet32(ds, esp + 36, 0x44800000);
loc_1b080a: // 0160:1b080a
    fld32(memoryAGet32(ds, esp + 16));
    fmul32(memoryAGet32(ds, 0x1d6090));
    stop("disassembly failed at 160:1b0814 fdivr dword ptr [esp + 0x24]");
    memoryASet32(ds, esp + 36, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul32(memoryAGet32(ds, esp + 36));
    fadd32(memoryAGet32(ds, esp + 32));
    memoryASet32(ds, esp + 20, fstp32());
    fld32(memoryAGet32(ds, esp + 8));
    fmul32(memoryAGet32(ds, esp + 36));
    eax = memoryAGet32(ds, esp + 20);
    fadd32(memoryAGet32(ds, esp + 4));
    memoryASet32(ds, esp + 32, eax);
    memoryASet32(ds, esp + 24, fstp32());
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x1d6098));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1b085d;
    memoryASet32(ds, esp + 32, 0xc1000000);
    goto loc_1b0874;
loc_1b085d: // 0160:1b085d
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x1d609c));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1b0874;
    memoryASet32(ds, esp + 32, 0x41000000);
loc_1b0874: // 0160:1b0874
    fld32(memoryAGet32(ds, esp + 32));
    fcomp32(memoryAGet32(ds, esp + 20));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_1b0893;
    fld32(memoryAGet32(ds, esp + 32));
    fmul32(memoryAGet32(ds, esp + 24));
    fdiv32(memoryAGet32(ds, esp + 20));
    memoryASet32(ds, esp + 28, fstp32());
    goto loc_1b08e8;
loc_1b0893: // 0160:1b0893
    eax = memoryAGet32(ds, esp + 24);
    fld32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 28, eax);
    fcomp32(memoryAGet32(ds, 0x1d6098));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1b08b4;
    memoryASet32(ds, esp + 28, 0xc1000000);
    goto loc_1b08cb;
loc_1b08b4: // 0160:1b08b4
    fld32(memoryAGet32(ds, esp + 24));
    fcomp32(memoryAGet32(ds, 0x1d609c));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1b08cb;
    memoryASet32(ds, esp + 28, 0x41000000);
loc_1b08cb: // 0160:1b08cb
    fld32(memoryAGet32(ds, esp + 28));
    fcomp32(memoryAGet32(ds, esp + 24));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_1b08e8;
    fld32(memoryAGet32(ds, esp + 28));
    fmul32(memoryAGet32(ds, esp + 20));
    fdiv32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 32, fstp32());
loc_1b08e8: // 0160:1b08e8
    fld32(memoryAGet32(ds, esp + 32));
    eax = ecx;
    fmul32(memoryAGet32(ds, 0x1d60a0));
    eax <<= 3;
    sub_1cb9f2();
    memoryASet32(ds, esp, fistp32());
    edx = ecx + eax;
    fld32(memoryAGet32(ds, esp + 28));
    eax = memoryAGet32(ds, esp);
    edx <<= 2;
    fmul32(memoryAGet32(ds, 0x1d60a0));
    memoryASet32(ds, edx + 3806238, eax);
    sub_1cb9f2();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, edx + 3806242, eax);
    goto loc_1b093f;
loc_1b092b: // 0160:1b092b
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, eax * 4 + 0x3a1422, memoryAGet32(ds, eax * 4 + 0x3a1422) + edx);
loc_1b093f: // 0160:1b093f
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    eax = memoryAGet32(ds, eax * 4 + 0x3a141e);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_1b095d;
    ebx = 0x00000001;
loc_1b095d: // 0160:1b095d
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, eax * 4 + 0x3a1422);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_1b097e;
    eax = 0x00000004;
loc_1b097e: // 0160:1b097e
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_1b0988;
    eax = 0xfffffffc;
loc_1b0988: // 0160:1b0988
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, ebx * 4 + 0x3a141e) > (int32_t)0x00000000)
        goto loc_1b099d;
    eax = -eax;
    goto loc_1b09a0;
loc_1b099d: // 0160:1b099d
    eax += 0x00000008;
loc_1b09a0: // 0160:1b09a0
    eax &= 0x0000000f;
    edx = 0x002f58b0;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x3a1426, edx);
    esp += 0x00000028;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b09c3() // 0160:1b09c3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    if ((int32_t)ebx <= 0)
        goto loc_1b09d5;
    ecx = 0xffffffff;
    goto loc_1b09da;
loc_1b09d5: // 0160:1b09d5
    ecx = 0x00000001;
loc_1b09da: // 0160:1b09da
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x26b2d0, edx);
loc_1b09e7: // 0160:1b09e7
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2240656, edi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2240660, esi);
    sub_1ab709();
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2240664, eax);
    eax = 0xfffffc00;
    sub_1ab709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2240668, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_1ab709();
    al = memoryAGet(ds, eax * 4 + 0x26b2f0);
    memoryASet(ds, ebx + 2240654, al);
    ah = 0;
    memoryASet(ds, ebx + 2240655, ah);
    if (ebx != 0x000002f4)
        goto loc_1b09e7;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b0a50() // 0160:1b0a50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    sub_1b028f();
    edx = memoryAGet32(ds, 0x3a1e90);
    if ((int32_t)edx <= 0)
        goto loc_1b0a71;
    ebx = edx + -1;
    memoryASet32(ds, 0x3a1e90, ebx);
loc_1b0a71: // 0160:1b0a71
    edi = 0;
    esi = 0;
loc_1b0a75: // 0160:1b0a75
    ecx = memoryAGet32(ds, esi + 3806222);
    if (!ecx)
        goto loc_1b10cd;
    eax = memoryAGet32(ds, esi + 3806226);
    memoryASet32(ds, esi + 3806234, eax);
    ebp = memoryAGet32(ds, esi + 3806222);
    edx = memoryAGet32(ds, esi + 3806226);
    eax = memoryAGet32(ds, esi + 3806238);
    memoryASet32(ds, esi + 3806230, ecx);
    ebp += eax;
    eax = memoryAGet32(ds, esi + 3806242);
    memoryASet32(ds, esi + 3806222, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, esi + 3806250);
    memoryASet32(ds, esi + 3806226, edx);
    if (ebx)
        goto loc_1b0ad0;
    eax = edi;
    sub_1b0608();
    goto loc_1b0adc;
loc_1b0ad0: // 0160:1b0ad0
    if (ebx != 0x00000002)
        goto loc_1b0adc;
    eax = edi;
    sub_1b06fb();
loc_1b0adc: // 0160:1b0adc
    eax = memoryAGet32(ds, esi + 3806230);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 3806234);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3806222);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3806226);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax--;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3806254);
    eax--;
    edx = memoryAGet32(ds, esi + 3806250);
    memoryASet32(ds, esi + 3806254, eax);
    if (!edx)
        goto loc_1b0b53;
    if (edx != 0x00000002)
        goto loc_1b0b73;
loc_1b0b53: // 0160:1b0b53
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esi + 3806242);
    eax++;
    ebx = memoryAGet32(ds, esi + 3806238);
    memoryASet32(ds, esp + 8, eax);
    edx = eax;
    eax = memoryAGet32(ds, esp + 12);
    sub_1adb97();
loc_1b0b73: // 0160:1b0b73
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000010)
        goto loc_1b0bba;
    ecx = esp;
    ebx = esp + 4;
    edx = esp + 8;
    eax = esp + 12;
    sub_1bb8e7();
    memoryASet32(ds, esp + 16, eax);
    eax = esp;
    ebx = memoryAGet32(ds, esp + 20);
    push32(eax);
    eax = esp + 8;
    edx = esp + 16;
    push32(eax);
    ecx = ebp;
    eax = memoryAGet32(ds, 0x3a1c64);
    push32(ebx);
    ebx = esp + 20;
    ebp = memoryAGet32(ds, esp + 28);
    sub_1ad28a();
    ebp |= eax;
    goto loc_1b0bd9;
loc_1b0bba: // 0160:1b0bba
    ebx = memoryAGet32(ds, esi + 3806250);
    ebp = 0;
    if (ebx == 0x00000001)
        goto loc_1b0bd1;
    if (ebx == 0x00000027)
        goto loc_1b0bd1;
    if (ebx != 0x0000002f)
        goto loc_1b0bd9;
loc_1b0bd1: // 0160:1b0bd1
    edx = 0;
    memoryASet32(ds, esi + 3806222, edx);
loc_1b0bd9: // 0160:1b0bd9
    if (memoryAGet32(ds, esi + 3806250) != 0x00000022)
        goto loc_1b0d05;
    ecx = 0x00001000;
    edx = memoryAGet32(ds, esi + 3806226);
    eax = memoryAGet32(ds, esi + 3806222);
    edx += 0x00000400;
    eax += 0x00000400;
    ebx = ecx;
    sub_1b0340();
    if (!eax)
        goto loc_1b0cd3;
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 3803518);
    memoryASet32(ds, eax + 3803518, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, 0x3a1cac);
    ebp = memoryAGet32(ds, eax + 3803518);
    eax = ebx * 0x000000ac;
    edx = ebp * 0x00000533;
    memoryASet32(ds, eax + 3803486, edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, 0xfffffd00);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) - 0x00000200);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 3803526, ebp);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x3a1cac);
    edx = memoryAGet32(ds, edx + 3803582);
    sub_1a4712();
    edx = 0;
    memoryASet32(ds, esi + 3806222, edx);
    eax = memoryAGet32(ds, 0x3a1cac);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000000b;
    sub_1bda16();
loc_1b0cd3: // 0160:1b0cd3
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esi + 3806226);
    eax = memoryAGet32(ds, esi + 3806222);
    edx -= 0x00000400;
    eax -= 0x00000400;
    sub_1b1d13();
    if (memoryAGet32(ds, 0x3a1d80) == 0x00000000)
        goto loc_1b0d05;
    ecx = 0;
    memoryASet32(ds, esi + 3806222, ecx);
loc_1b0d05: // 0160:1b0d05
    if (memoryAGet32(ds, esi + 3806250) != 0x00000038)
        goto loc_1b0e0b;
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, esi + 3806222);
    memoryASet32(ds, 0x3a1d94, eax);
    eax = memoryAGet32(ds, esi + 3806226);
    memoryASet32(ds, 0x3a1d98, eax);
    edx = memoryAGet32(ds, 0x3a1d94);
    ecx = memoryAGet32(ds, ebx + 3803494);
    edx -= ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x3a1d98);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    eax += ecx;
    if ((int32_t)eax > (int32_t)0x000057e4)
        goto loc_1b0da2;
    edx = memoryAGet32(ds, 0x3a1d98);
    if ((int32_t)edx < (int32_t)0x00000008)
        goto loc_1b0da2;
    if ((int32_t)edx > (int32_t)0x0002f400)
        goto loc_1b0da2;
    ecx = memoryAGet32(ds, 0x3a1d94);
    if ((int32_t)ecx > (int32_t)0x00078000)
        goto loc_1b0da2;
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_1b0deb;
loc_1b0da2: // 0160:1b0da2
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x3a1d2c, ebx);
    edx = 0x00000019;
    memoryASet32(ds, esi + 3806222, ecx);
    memoryASet32(ds, 0x1e3a98, edx);
    memoryASet32(ds, 0x3a1d94, ecx);
    memoryASet32(ds, 0x3a1d98, ecx);
    memoryASet32(ds, 0x3a1d8c, ecx);
    memoryASet32(ds, 0x3a1d90, ecx);
    memoryASet32(ds, 0x3a1d88, ecx);
    memoryASet32(ds, 0x3a1cc0, ebx);
    sub_1a0335();
    goto loc_1b0e0b;
loc_1b0deb: // 0160:1b0deb
    if (!ebp)
        goto loc_1b0e0b;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, 0x3a1d94, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    memoryASet32(ds, 0x3a1d98, eax);
    sub_1b4b55();
loc_1b0e0b: // 0160:1b0e0b
    if (ebp)
        goto loc_1b0e29;
    if (memoryAGet32(ds, esi + 3806250) != 0x00000022)
        goto loc_1b104c;
    if (memoryAGet32(ds, esi + 3806254) != 0x00000000)
        goto loc_1b104c;
loc_1b0e29: // 0160:1b0e29
    ebp = memoryAGet32(ds, esi + 3806250);
    if (ebp != 0x00000022)
        goto loc_1b0e81;
    eax = memoryAGet32(ds, esp + 12);
    eax += 0x00000004;
    eax <<= 9;
    memoryASet32(ds, 0x3a1cdc, eax);
    eax = memoryAGet32(ds, esp + 8);
    eax++;
    eax <<= 9;
    memoryASet32(ds, 0x3a1ce0, eax);
    memoryASet32(ds, 0x3a1ce4, 0x00000001);
    if ((int32_t)memoryAGet32(ds, esi + 3806238) <= (int32_t)0x00000000)
        goto loc_1b0e72;
    memoryASet32(ds, 0x3a1ce8, 0x002fea80);
    goto loc_1b103e;
loc_1b0e72: // 0160:1b0e72
    memoryASet32(ds, 0x3a1ce8, 0x002fdf40);
    goto loc_1b103e;
loc_1b0e81: // 0160:1b0e81
    if (ebp == 0x00000027)
        goto loc_1b0e8f;
    if (ebp != 0x0000002f)
        goto loc_1b0f30;
loc_1b0e8f: // 0160:1b0e8f
    if (memoryAGet32(ds, 0x3a1d18) == 0x00000000)
        goto loc_1b103e;
    if (memoryAGet32(ds, 0x3a1d48) != 0x00000000)
        goto loc_1b0eb6;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, 0x3a1d48, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3a1d4c, eax);
loc_1b0eb6: // 0160:1b0eb6
    ecx = 0;
    edx = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x3a1c52, cx);
    if ((int32_t)edx <= 0)
        goto loc_1b0efd;
    ebx = memoryAGet32(ds, esp + 4);
    if (ebx >= 0x000003c0)
        goto loc_1b0efd;
    eax = edx * 0x000003c0;
    eax += ebx;
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1b0efd;
    eax = 0x00000001;
    goto loc_1b0eff;
loc_1b0efd: // 0160:1b0efd
    eax = 0;
loc_1b0eff: // 0160:1b0eff
    edx = 0x0000ffff;
    push32(eax);
    eax = memoryAGet32(ds, esp + 16);
    memoryASet16(ds, 0x3a1c52, dx);
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 3806242);
    ebx = memoryAGet32(ds, esi + 3806238);
    edx <<= 9;
    sub_1b2c6c();
    goto loc_1b103e;
loc_1b0f30: // 0160:1b0f30
    if (ebp != 0x00000001)
        goto loc_1b0fb2;
    edx = 0;
    ebp = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x3a1c52, dx);
    if ((int32_t)ebp <= 0)
        goto loc_1b0f80;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_1b0f80;
    eax = ebp * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1b0f80;
    eax = 0x00000001;
    goto loc_1b0f82;
loc_1b0f80: // 0160:1b0f80
    eax = 0;
loc_1b0f82: // 0160:1b0f82
    ebx = 0x0000ffff;
    edx = memoryAGet32(ds, esp);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x3a1c52, bx);
    edx <<= 9;
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 3806242);
    ebx = memoryAGet32(ds, esi + 3806238);
    sub_1b2afb();
    goto loc_1b103e;
loc_1b0fb2: // 0160:1b0fb2
    if (ebp != 0x00000038)
        goto loc_1b0fd0;
    ebx = memoryAGet32(ds, esi + 3806238);
    edx = memoryAGet32(ds, esi + 3806234);
    eax = memoryAGet32(ds, esi + 3806230);
    sub_1b09c3();
    goto loc_1b103e;
loc_1b0fd0: // 0160:1b0fd0
    ebp = 0;
    memoryASet32(ds, 0x3a1d24, ebp);
    eax = memoryAGet32(ds, esi + 3806238);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    edx = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = memoryAGet32(ds, esi + 3806242);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x3a1c64);
    ebx -= eax;
    eax = ecx * 0x000000ac;
    push32(ebp);
    memoryASet32(ds, esp + 4, ebx);
    edx = ebx + -24;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = memoryAGet32(ds, esp + 8);
    ebx = 0x0000002d;
    eax -= 0x00000010;
    edx <<= 9;
    eax <<= 9;
    sub_1ae04a();
loc_1b103e: // 0160:1b103e
    ebp = 0;
    memoryASet32(ds, esi + 3806222, ebp);
    memoryASet32(ds, 0x3a1f24, ebp);
loc_1b104c: // 0160:1b104c
    if ((int32_t)memoryAGet32(ds, esp + 8) > (int32_t)0x0000017e)
        goto loc_1b1067;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)ebx < (int32_t)0x00000001)
        goto loc_1b1067;
    if ((int32_t)ebx <= (int32_t)0x000003c0)
        goto loc_1b10cd;
loc_1b1067: // 0160:1b1067
    if (memoryAGet32(ds, esi + 3806250) != 0x00000000)
        goto loc_1b109a;
    edx = 0x00000004;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1b109a;
    eax = edi;
    ebx = 0x00000080;
    sub_19e30a();
    edx = eax;
    eax = 0x00000029;
    sub_1bda16();
    goto loc_1b10bf;
loc_1b109a: // 0160:1b109a
    eax = memoryAGet32(ds, esi + 3806250);
    if (!eax)
        goto loc_1b10a9;
    if (eax != 0x00000002)
        goto loc_1b10bf;
loc_1b10a9: // 0160:1b10a9
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_1b10bf;
    edx = 0x00000080;
    eax = edi;
    sub_1accbc();
loc_1b10bf: // 0160:1b10bf
    ecx = 0;
    memoryASet32(ds, esi + 3806222, ecx);
    memoryASet32(ds, 0x3a1f24, ecx);
loc_1b10cd: // 0160:1b10cd
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000008)
        goto loc_1b0a75;
    esp += 0x00000018;
    goto loc_1b23b3;
    // gap 4817 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b10e2() // 0160:1b10e2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_1b10e8: // 0160:1b10e8
    if (memoryAGet32(ds, esi + 3806222) == 0x00000000)
        goto loc_1b1144;
    ebx = memoryAGet32(ds, esi + 3806250);
    if (ebx == 0x00000027)
        goto loc_1b1144;
    if (ebx == 0x0000002f)
        goto loc_1b1144;
    if (ebx == 0x00000001)
        goto loc_1b1144;
    eax = memoryAGet32(ds, esi + 3806226);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -2;
    eax = memoryAGet32(ds, esi + 3806222);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000007);
    edx = eax + -2;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, esi + 3806246);
    sub_19e029();
loc_1b1144: // 0160:1b1144
    esi += 0x00000024;
    if (esi != 0x00000120)
        goto loc_1b10e8;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b1154() // 0160:1b1154 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
loc_1b1166: // 0160:1b1166
    eax = memoryAGet32(ds, esp);
    if (memoryAGet32(ds, eax + 2536144) == 0x00000000)
        goto loc_1b1238;
    edi = memoryAGet32(ds, esp + 4);
    edi <<= 7;
    ebp = edi + 128;
    ebx = edi * 0x00000012;
    ebp = ebp * 0x00000012;
    goto loc_1b1230;
loc_1b118e: // 0160:1b118e
    eax = memoryAGet32(ds, ebx + 2240656);
    if (!eax)
        goto loc_1b122c;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x3a1f0c);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2240660);
    esi -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x3a1f10);
    edx = esi;
    eax -= ecx;
    esi = memoryAGet32(ds, 0x3a1f08);
    edx <<= 16;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    esi = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    if ((int32_t)esi <= 0)
        goto loc_1b1224;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_1b1224;
    if ((int32_t)eax <= 0)
        goto loc_1b1224;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_1b1224;
    ecx = eax * 0x00000140;
    al = memoryAGet(ds, ebx + 2240672);
    memoryASet(ds, ecx + esi + 2661552, al);
    goto loc_1b122c;
loc_1b1224: // 0160:1b1224
    esi = 0;
    memoryASet32(ds, ebx + 2240656, esi);
loc_1b122c: // 0160:1b122c
    ebx += 0x00000012;
    edi++;
loc_1b1230: // 0160:1b1230
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1b118e;
loc_1b1238: // 0160:1b1238
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000004;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_1b1166;
    esp += 0x00000008;
    goto loc_1b23b3;
    // gap 4440 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b125b() // 0160:1b125b +long +stackDrop4
{
    esp -= 4;
    goto loc_1b125b;
loc_1af4bb: // 0160:1af4bb
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 7575 bytes
loc_1b125b: // 0160:1b125b
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)ebx <= (int32_t)0x00000032)
        goto loc_1b12a0;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    edx = eax;
    edx <<= 9;
    ecx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + eax);
    goto loc_1b12ad;
loc_1b12a0: // 0160:1b12a0
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    edi += eax;
    memoryASet32(ds, esp + 8, edi);
loc_1b12ad: // 0160:1b12ad
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 68);
    eax += 0x00000006;
    eax += edx;
    ecx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ecx += eax;
    eax = ebx + 16;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = (int32_t)ebx * (int32_t)ebx;
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 44, ebx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = 0;
    memoryASet32(ds, esp + 4, ecx);
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
loc_1b1327: // 0160:1b1327
    edi = memoryAGet32(ds, ecx + 3803494);
    if (!edi)
        goto loc_1b16c9;
    ebp = memoryAGet32(ds, esp + 8);
    edx = edi;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, ecx + 3803498);
    eax = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    edx = (int32_t)edx * (int32_t)ebp;
    edi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edx += eax;
    memoryASet32(ds, esp + 48, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 44);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b1690;
    edx -= eax;
    edx = edx * 0x000000eb;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    memoryASet32(ds, 0x3a1c4e, 0x00000001);
    ebx = memoryAGet32(ds, esp + 44);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_1b13bf;
    ebx += memoryAGet32(ds, esp + 16);
loc_1b13bf: // 0160:1b13bf
    if (ebx)
        goto loc_1b13ca;
    ebx = 0x00000001;
    goto loc_1b13d3;
loc_1b13ca: // 0160:1b13ca
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1b13d3;
    ebx = eax;
loc_1b13d3: // 0160:1b13d3
    edx = ebx;
    eax = esi;
    sub_1a4712();
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, esp + 40, ebx);
    if (esi != edx)
        goto loc_1b13f4;
    memoryASet32(ds, 0x3a1e9c, 0x00000001);
loc_1b13f4: // 0160:1b13f4
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1b145d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x3a1c68))
        goto loc_1b141e;
    memoryASet32(ds, 0x3a1ea0, 0x00000001);
loc_1b141e: // 0160:1b141e
    edx = memoryAGet32(ds, ecx + 3803570);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1b142a;
    ebx = edx;
loc_1b142a: // 0160:1b142a
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x1e3aa0))
        goto loc_1b145d;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x3a1e90);
    memoryASet32(ds, 0x1e3aa0, ebx);
    memoryASet32(ds, 0x1e3aa4, eax);
    if (eax)
        goto loc_1b145d;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_1b145d;
    memoryASet32(ds, 0x3a1e8c, 0x00000001);
loc_1b145d: // 0160:1b145d
    edx = edi;
    eax = ebp;
    sub_1b06d3();
    ebx = eax;
    if (eax)
        goto loc_1b1476;
    ebx = 0x00000200;
    edi = 0xfffffe00;
loc_1b1476: // 0160:1b1476
    eax = memoryAGet32(ds, ecx + 3803490);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)ebp;
    ebx <<= 4;
    edx <<= 9;
    memoryASet32(ds, ecx + 3803490, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)edi;
    ebp = memoryAGet32(ds, ecx + 3803486);
    edx <<= 9;
    ebp += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    edx = memoryAGet32(ds, ecx + 3803490);
    memoryASet32(ds, ecx + 3803486, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, ecx + 3803486);
    memoryASet32(ds, ecx + 3803490, edx);
    if ((int32_t)ebx <= 0)
        goto loc_1b14e4;
    memoryASet32(ds, ecx + 3803518, 0x00000001);
    goto loc_1b14ee;
loc_1b14e4: // 0160:1b14e4
    memoryASet32(ds, ecx + 3803518, 0xffffffff);
loc_1b14ee: // 0160:1b14ee
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)edi <= 0)
        goto loc_1b1574;
    eax = memoryAGet32(ds, ecx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b1574;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, edi + ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b157e;
loc_1b1574: // 0160:1b1574
    memoryASet32(ds, ecx + 3803498, memoryAGet32(ds, ecx + 3803498) - 0x00000200);
loc_1b157e: // 0160:1b157e
    edx = 0;
    ebx = memoryAGet32(ds, ecx + 3803526);
    memoryASet32(ds, ecx + 3803530, edx);
    if (ebx)
        goto loc_1b15b4;
    eax = esi;
    edx = 0x00000002;
    sub_19e30a();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000006;
    edx = edi;
    sub_1bda16();
loc_1b15b4: // 0160:1b15b4
    memoryASet32(ds, ecx + 3803526, 0x00000001);
    if (esi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1b1690;
    if (memoryAGet32(ds, 0x3a1d2c) != 0x00000002)
        goto loc_1b15d8;
    sub_1b4d1b();
loc_1b15d8: // 0160:1b15d8
    if ((int32_t)memoryAGet32(ds, 0x3a1d30) < (int32_t)0x00000002)
        goto loc_1b15e6;
    sub_1b701b();
loc_1b15e6: // 0160:1b15e6
    if (memoryAGet32(ds, ecx + 3803542) != 0x0000001f)
        goto loc_1b1607;
    edi = 0;
    eax = 0x00000010;
    memoryASet32(ds, 0x3a1cec, edi);
    memoryASet32(ds, 0x3a1f24, edi);
    memoryASet32(ds, 0x3a1c78, eax);
loc_1b1607: // 0160:1b1607
    if (memoryAGet32(ds, 0x3a1ccc) == 0x00000000)
        goto loc_1b161a;
    memoryASet32(ds, 0x3a1c78, 0x00000010);
loc_1b161a: // 0160:1b161a
    edi = 0;
    memoryASet32(ds, 0x3a1cec, edi);
    memoryASet32(ds, 0x3a1ccc, edi);
    memoryASet32(ds, 0x3a1d0c, edi);
    memoryASet32(ds, 0x3a1d10, edi);
    memoryASet32(ds, 0x3a1d18, edi);
    if (memoryAGet32(ds, ecx + 3803542) != 0x00000006)
        goto loc_1b1664;
    ebp = memoryAGet32(ds, 0x3a1e80);
    if (ebp)
        goto loc_1b1664;
    eax = 0x00000001;
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1e80, eax);
    memoryASet32(ds, 0x3a1d88, eax);
    goto loc_1b1690;
loc_1b1664: // 0160:1b1664
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1db4, eax);
    if ((int32_t)edx <= 0)
        goto loc_1b1690;
    ebx = 0x00000002;
    memoryASet32(ds, 0x3a1d88, eax);
    edi = 0;
    memoryASet32(ds, 0x3a1e80, ebx);
    memoryASet32(ds, 0x3a1cc0, edi);
loc_1b1690: // 0160:1b1690
    eax = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_1b16c9;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1b16c9;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x3a1c68))
        goto loc_1b16c1;
    memoryASet32(ds, esp + 28, 0x00000001);
    goto loc_1b16c9;
loc_1b16c1: // 0160:1b16c1
    memoryASet32(ds, esp + 32, 0x00000001);
loc_1b16c9: // 0160:1b16c9
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1b1327;
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1b171b;
    edi = memoryAGet32(ds, esp + 36);
    if (!edi)
        goto loc_1b171b;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, 0x1e3a9c, edi);
    edx = edi + -1;
    if (edx != memoryAGet32(ds, eax + 3803586))
        goto loc_1b171b;
    ecx = 0x00000001;
    esi = 0xffffffff;
    memoryASet32(ds, 0x3a1ebc, ecx);
    memoryASet32(ds, eax + 3803586, esi);
loc_1b171b: // 0160:1b171b
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1af4bb;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_1af4bb;
    if (memoryAGet32(ds, esp + 32) != 0x00000000)
        goto loc_1b1745;
    if (memoryAGet32(ds, esp + 28) == 0x00000000)
        goto loc_1af4bb;
loc_1b1745: // 0160:1b1745
    ebx = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x1e3a9c, ebx);
    sub_1ab709();
    if (eax)
        goto loc_1af4bb;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x3a1eb4, eax);
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x3a1eb8, eax);
    goto loc_1af4bb;
}
void sub_1b177b() // 0160:1b177b +long +stackDrop4
{
    esp -= 4;
    goto loc_1b177b;
loc_1af4be: // 0160:1af4be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 8887 bytes
loc_1b177b: // 0160:1b177b
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = memoryAGet32(ds, esp + 72);
    edx = eax;
    eax += edi;
    eax += 0x00000003;
    ebp = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    ebp += eax;
    eax = ebx + 16;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp + 16, eax);
    eax = ebx;
    eax = (int32_t)eax * (int32_t)ebx;
    memoryASet32(ds, esp + 48, eax);
    eax = ebx;
    esi = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp + 40, eax);
    eax = memoryAGet32(ds, esp);
    esi += edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    memoryASet32(ds, esp + 12, esi);
    esi = 0;
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 20, eax);
loc_1b1811: // 0160:1b1811
    eax = memoryAGet32(ds, ecx + 3803494);
    if (!eax)
        goto loc_1b1c6e;
    ebx = memoryAGet32(ds, esp + 12);
    eax -= ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, ecx + 3803498);
    edx -= edi;
    ebp = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    edx = (int32_t)edx * (int32_t)ebp;
    edi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edx += eax;
    memoryASet32(ds, esp + 52, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b1c6e;
    memoryASet32(ds, 0x3a1c4e, 0x00000001);
    ebx = edx;
    edx = memoryAGet32(ds, esp);
    ebx -= eax;
    edx = (int32_t)edx * (int32_t)ebx;
    ebx = memoryAGet32(ds, esp + 48);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_1b1896;
    ebx += memoryAGet32(ds, esp + 24);
loc_1b1896: // 0160:1b1896
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x00000027)
        goto loc_1b18bc;
    if ((int32_t)memoryAGet32(ds, ecx + 3803574) < (int32_t)0x00000032)
        goto loc_1b18b6;
    ebx = 0;
    goto loc_1b18bc;
loc_1b18b6: // 0160:1b18b6
    ebx = memoryAGet32(ds, eax + 3803582);
loc_1b18bc: // 0160:1b18bc
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x0000002f)
        goto loc_1b18e2;
    if ((int32_t)memoryAGet32(ds, ecx + 3803574) < (int32_t)0x00000050)
        goto loc_1b18dc;
    ebx = 0;
    goto loc_1b18e2;
loc_1b18dc: // 0160:1b18dc
    ebx = memoryAGet32(ds, eax + 3803582);
loc_1b18e2: // 0160:1b18e2
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1b18eb;
    ebx = eax;
loc_1b18eb: // 0160:1b18eb
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803542);
    if (edx == 0x00000006)
        goto loc_1b190a;
    if (edx == 0x00000027)
        goto loc_1b190a;
    if (edx != 0x0000002f)
        goto loc_1b1952;
loc_1b190a: // 0160:1b190a
    edi = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, ecx + 3803494);
    eax -= edi;
    if ((int32_t)eax < 0)
        goto loc_1b1920;
    ebp = memoryAGet32(ds, esp + 40);
    goto loc_1b1929;
loc_1b1920: // 0160:1b1920
    ebp = memoryAGet32(ds, esp + 4);
    ebp = -ebp;
    ebp <<= 9;
loc_1b1929: // 0160:1b1929
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, ecx + 3803498);
    eax -= edx;
    if ((int32_t)eax < 0)
        goto loc_1b193f;
    edi = memoryAGet32(ds, esp + 40);
    goto loc_1b1948;
loc_1b193f: // 0160:1b193f
    edi = memoryAGet32(ds, esp + 4);
    edi = -edi;
    edi <<= 9;
loc_1b1948: // 0160:1b1948
    memoryASet32(ds, esp + 44, 0x0000001e);
    goto loc_1b1956;
loc_1b1952: // 0160:1b1952
    memoryASet32(ds, esp + 44, ebx);
loc_1b1956: // 0160:1b1956
    edx = ebx;
    eax = esi;
    sub_1a4712();
    if (esi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1b1971;
    memoryASet32(ds, 0x3a1e9c, 0x00000001);
loc_1b1971: // 0160:1b1971
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1b19c6;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x3a1c68))
        goto loc_1b199b;
    memoryASet32(ds, 0x3a1ea0, 0x00000001);
loc_1b199b: // 0160:1b199b
    edx = memoryAGet32(ds, ecx + 3803570);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1b19a7;
    ebx = edx;
loc_1b19a7: // 0160:1b19a7
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x1e3aa0))
        goto loc_1b19c6;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x3a1e90);
    memoryASet32(ds, 0x1e3aa0, ebx);
    memoryASet32(ds, 0x1e3aa4, eax);
loc_1b19c6: // 0160:1b19c6
    edx = edi;
    eax = ebp;
    sub_1b06d3();
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax)
        goto loc_1b19ec;
    ebx = 0x00000001;
    edi = 0xfffffe00;
loc_1b19ec: // 0160:1b19ec
    eax = memoryAGet32(ds, ecx + 3803490);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = ebx * 0x00000014;
    edx = memoryAGet32(ds, esp + 44);
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, ecx + 3803490, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3803486, memoryAGet32(ds, ecx + 3803486) + eax);
    edx = memoryAGet32(ds, esp + 44);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    ebx = memoryAGet32(ds, ecx + 3803490);
    ebx += eax;
    edi = memoryAGet32(ds, ecx + 3803486);
    memoryASet32(ds, ecx + 3803490, ebx);
    if ((int32_t)edi <= 0)
        goto loc_1b1a4c;
    memoryASet32(ds, ecx + 3803518, 0x00000001);
    goto loc_1b1a56;
loc_1b1a4c: // 0160:1b1a4c
    memoryASet32(ds, ecx + 3803518, 0xffffffff);
loc_1b1a56: // 0160:1b1a56
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)edi <= 0)
        goto loc_1b1ade;
    eax = memoryAGet32(ds, ecx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b1ade;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 3244656);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b1ae8;
loc_1b1ade: // 0160:1b1ade
    memoryASet32(ds, ecx + 3803498, memoryAGet32(ds, ecx + 3803498) - 0x00000200);
loc_1b1ae8: // 0160:1b1ae8
    ebx = 0;
    memoryASet32(ds, ecx + 3803530, ebx);
    edi = memoryAGet32(ds, 0x3a1d18);
    if (!edi)
        goto loc_1b1b54;
    if (memoryAGet32(ds, 0x39eaa8) != 0x00000002)
        goto loc_1b1b14;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    goto loc_1b1b23;
loc_1b1b14: // 0160:1b1b14
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000);
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
loc_1b1b23: // 0160:1b1b23
    ebx = eax;
    if (ebx)
        goto loc_1b1b2e;
    ebx = 0x00000001;
loc_1b1b2e: // 0160:1b1b2e
    eax = memoryAGet32(ds, ecx + 3803486);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3803486, eax);
    eax = memoryAGet32(ds, ecx + 3803490);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 3803490, eax);
loc_1b1b54: // 0160:1b1b54
    if (memoryAGet32(ds, ecx + 3803526) != 0x00000000)
        goto loc_1b1b81;
    eax = esi;
    edx = 0x00000002;
    sub_19e30a();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_1ab709();
    eax += 0x00000006;
    edx = edi;
    sub_1bda16();
loc_1b1b81: // 0160:1b1b81
    memoryASet32(ds, ecx + 3803526, 0x00000001);
    if (esi != memoryAGet32(ds, 0x3a1c64))
        goto loc_1b1c35;
    if (memoryAGet32(ds, 0x3a1d2c) != 0x00000002)
        goto loc_1b1ba5;
    sub_1b4d1b();
loc_1b1ba5: // 0160:1b1ba5
    if ((int32_t)memoryAGet32(ds, 0x3a1d30) < (int32_t)0x00000002)
        goto loc_1b1bb3;
    sub_1b701b();
loc_1b1bb3: // 0160:1b1bb3
    if (memoryAGet32(ds, ecx + 3803542) != 0x0000001f)
        goto loc_1b1bd5;
    edx = 0;
    edi = 0x00000010;
    memoryASet32(ds, 0x3a1cec, edx);
    memoryASet32(ds, 0x3a1f24, edx);
    memoryASet32(ds, 0x3a1c78, edi);
loc_1b1bd5: // 0160:1b1bd5
    ebp = 0;
    memoryASet32(ds, 0x3a1d18, ebp);
    if (memoryAGet32(ds, ecx + 3803542) != 0x00000006)
        goto loc_1b1c08;
    if (memoryAGet32(ds, 0x3a1e80) != 0x00000000)
        goto loc_1b1c08;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3a1cc0, ebp);
    memoryASet32(ds, 0x3a1e80, ebx);
    memoryASet32(ds, 0x3a1d88, ebx);
    goto loc_1b1c35;
loc_1b1c08: // 0160:1b1c08
    ebx = 0x00000001;
    edi = memoryAGet32(ds, 0x3a1cc0);
    memoryASet32(ds, 0x3a1db4, ebx);
    if ((int32_t)edi <= 0)
        goto loc_1b1c35;
    ebp = 0x00000002;
    memoryASet32(ds, 0x3a1d88, ebx);
    eax = 0;
    memoryASet32(ds, 0x3a1e80, ebp);
    memoryASet32(ds, 0x3a1cc0, eax);
loc_1b1c35: // 0160:1b1c35
    eax = memoryAGet32(ds, esp + 52);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 48))
        goto loc_1b1c6e;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1b1c6e;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x3a1c68))
        goto loc_1b1c66;
    memoryASet32(ds, esp + 32, 0x00000001);
    goto loc_1b1c6e;
loc_1b1c66: // 0160:1b1c66
    memoryASet32(ds, esp + 28, 0x00000001);
loc_1b1c6e: // 0160:1b1c6e
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1b1811;
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1b1cc0;
    ecx = memoryAGet32(ds, esp + 36);
    if (!ecx)
        goto loc_1b1cc0;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, 0x1e3a9c, ecx);
    edx = ecx + -1;
    if (edx != memoryAGet32(ds, eax + 3803586))
        goto loc_1b1cc0;
    ebp = 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x3a1ebc, ebp);
    memoryASet32(ds, eax + 3803586, edx);
loc_1b1cc0: // 0160:1b1cc0
    if (memoryAGet32(ds, 0x1e3a9c) != 0x00000000)
        goto loc_1b1d0b;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_1b1d0b;
    if (memoryAGet32(ds, esp + 28) != 0x00000000)
        goto loc_1b1cde;
    if (memoryAGet32(ds, esp + 32) == 0x00000000)
        goto loc_1b1d0b;
loc_1b1cde: // 0160:1b1cde
    ebp = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x1e3a9c, ebp);
    sub_1ab709();
    if (eax)
        goto loc_1b1d0b;
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x3a1eb4, eax);
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x3a1eb8, eax);
loc_1b1d0b: // 0160:1b1d0b
    esp += 0x00000038;
    goto loc_1af4be;
}
void sub_1b1d13() // 0160:1b1d13 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x3a1d80, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = ebx;
    ebp = (int32_t)ebp * (int32_t)ebx;
    ecx = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax <<= 9;
    ebx = 0;
    ecx += eax;
    esi += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_1b1d4b: // 0160:1b1d4b
    edi = memoryAGet32(ds, ebx + 3802606);
    if (!edi)
        goto loc_1b1e19;
    eax = memoryAGet32(ds, esp + 4);
    edx = edi;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, ebx + 3802610);
    edx -= ecx;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = esi;
    edi = (int32_t)edi * (int32_t)esi;
    ecx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edi += eax;
    if ((int32_t)edi >= (int32_t)ebp)
        goto loc_1b1e19;
    eax = ebp;
    eax -= edi;
    edx = eax * 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edi = eax;
    edx = ecx;
    eax = esi;
    sub_1b06d3();
    memoryASet32(ds, esp + 8, eax);
    if (eax)
        goto loc_1b1dcb;
    eax = 0x00000200;
    ecx = 0xfffffe00;
    memoryASet32(ds, esp + 8, eax);
loc_1b1dcb: // 0160:1b1dcb
    edx = esi;
    edx = (int32_t)edx * (int32_t)edi;
    esi = memoryAGet32(ds, esp + 8);
    edx <<= 9;
    esi <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)edi;
    edx <<= 9;
    memoryASet32(ds, ebx + 3802622, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = memoryAGet32(ds, ebx + 3802610);
    memoryASet32(ds, ebx + 3802626, eax);
    edx -= 0x00000200;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 3802610, edx);
    memoryASet32(ds, 0x3a1d80, ecx);
loc_1b1e19: // 0160:1b1e19
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b1d4b;
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b1e30() // 0160:1b1e30 +long
{
    esp -= 4;
    goto loc_1b1e30;
loc_1b1e28: // 0160:1b1e28
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1b1e30: // 0160:1b1e30
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edi = ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ebx = memoryAGet32(ds, esp);
    edx += eax;
    ebx += eax;
    eax = edi;
    eax = (int32_t)eax * (int32_t)edi;
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 4, edx);
    ebp = memoryAGet32(ds, esp);
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
loc_1b1e69: // 0160:1b1e69
    ecx = memoryAGet32(ds, ebx + 3802366);
    if (!ecx)
        goto loc_1b1f14;
    esi = memoryAGet32(ds, esp + 4);
    edx = ecx;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 3802370);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)ecx;
    esi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    eax += edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b1f14;
    if ((int32_t)ecx < 0)
        goto loc_1b1eca;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    goto loc_1b1edb;
loc_1b1eca: // 0160:1b1eca
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    eax = -eax;
loc_1b1edb: // 0160:1b1edb
    eax <<= 9;
    eax = sar32(eax, 0x05);
    memoryASet32(ds, ebx + 3802374, eax);
    eax = esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    ecx = memoryAGet32(ds, ebx + 3802370);
    eax <<= 9;
    ecx -= 0x00000200;
    eax = sar32(eax, 0x06);
    memoryASet32(ds, ebx + 3802370, ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3802378, eax);
loc_1b1f14: // 0160:1b1f14
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_1b1e69;
    goto loc_1b1e28;
}
void sub_1b1f28() // 0160:1b1f28 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx <<= 2;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = (int32_t)ebx * (int32_t)ebx;
    edi = 0;
    esi = 0;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, esp, ebx);
    edx += eax;
    ebp += eax;
    memoryASet32(ds, esp + 4, edx);
loc_1b1f6f: // 0160:1b1f6f
    ebx = memoryAGet32(ds, esi + 3806618);
    if (!ebx)
        goto loc_1b2002;
    edx = ebx;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esi + 3806622);
    edx -= ecx;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = (int32_t)ebx * (int32_t)ebx;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp);
    eax += ebx;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b2002;
    if (memoryAGet32(ds, esi + 3806642) == 0x00000000)
        goto loc_1b1fc8;
    eax = edi;
    sub_1b40d6();
loc_1b1fc8: // 0160:1b1fc8
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x0000002d;
    edx = memoryAGet32(ds, esi + 3806622);
    eax = memoryAGet32(ds, esi + 3806618);
    edx -= 0x00003000;
    eax -= 0x00003000;
    sub_1ae04a();
    eax = 0x00000032;
    ecx = 0;
    memoryASet32(ds, 0x1e3a80, eax);
    memoryASet32(ds, esi + 3806618, ecx);
loc_1b2002: // 0160:1b2002
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_1b1f6f;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b2017() // 0160:1b2017 +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, eax);
    edi = edx;
    if ((int32_t)ebx > (int32_t)0x000003c0)
        goto loc_1b2113;
    eax = ebx + esi;
    if ((int32_t)eax < 0)
        goto loc_1b2113;
    edx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    if ((int32_t)edx < 0)
        goto loc_1b2113;
    if ((int32_t)ecx > (int32_t)0x00000190)
        goto loc_1b2113;
    if ((int32_t)eax <= (int32_t)0x000003c0)
        goto loc_1b2066;
    esi = 0x000003c0;
    esi -= ebx;
loc_1b2066: // 0160:1b2066
    if ((int32_t)ebx >= 0)
        goto loc_1b2078;
    edx = memoryAGet32(ds, esp + 4);
    edx -= ebx;
    esi += ebx;
    memoryASet32(ds, esp + 4, edx);
    ebx = 0;
loc_1b2078: // 0160:1b2078
    eax = memoryAGet32(ds, esp + 28);
    eax += ecx;
    if ((int32_t)eax <= (int32_t)0x00000190)
        goto loc_1b2090;
    eax = 0x00000190;
    eax -= ecx;
    memoryASet32(ds, esp + 28, eax);
loc_1b2090: // 0160:1b2090
    ebp = memoryAGet32(ds, esp + 36);
    ecx = (int32_t)ecx * (int32_t)ebp;
    edi += ecx;
    edi += ebx;
    if ((int32_t)esi <= 0)
        goto loc_1b2113;
    if (memoryAGet32(ds, 0x1e00a0) == 0x00000000)
        goto loc_1b20c3;
    ebx = memoryAGet32(ds, esp + 32);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp + 8);
    push32(ebx);
    edx = edi;
    ebx = esi;
    sub_1ad4e0();
loc_1b20c3: // 0160:1b20c3
    ecx = 0;
    ebp = 0x00000080;
    memoryASet32(ds, esp, ecx);
    goto loc_1b210a;
loc_1b20cf: // 0160:1b20cf
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_1b20eb;
loc_1b20d9: // 0160:1b20d9
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1b20e8;
    memoryASet(ds, eax, 0x80);
loc_1b20e8: // 0160:1b20e8
    edx++;
    eax++;
    ebx++;
loc_1b20eb: // 0160:1b20eb
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1b20d9;
    eax = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 36);
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edi += ecx;
    eax++;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, eax);
loc_1b210a: // 0160:1b210a
    eax = memoryAGet32(ds, esp);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 28))
        goto loc_1b20cf;
loc_1b2113: // 0160:1b2113
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_1b211c() // 0160:1b211c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    memoryASet32(ds, esp, ecx);
    ecx = 0x00000041;
    edi = 0x00000043;
    ebp = 0x00000044;
    eax = edx;
    ebx <<= 4;
    eax <<= 4;
    memoryASet32(ds, ebx + 2536176, ecx);
    eax -= edx;
    edx = 0x00318270;
    eax <<= 6;
    memoryASet32(ds, ebx + 2536184, edi);
    edx += eax;
    memoryASet32(ds, ebx + 2536188, ebp);
    edx += esi;
    eax = 0;
    esi = 0x00000042;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 2536180, esi);
    esi = 0;
    goto loc_1b21a3;
loc_1b2173: // 0160:1b2173
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_1b219a;
    edi = memoryAGet32(ds, esp + 4);
    if (ecx == memoryAGet32(ds, edi * 4 + 0x26b2f0))
        goto loc_1b219a;
    ebx += 0x00000004;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 2536172, ecx);
    eax++;
loc_1b219a: // 0160:1b219a
    edx += 0x00000780;
    esi += 0x00000002;
loc_1b21a3: // 0160:1b21a3
    if ((int32_t)esi >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b21ad;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_1b2173;
loc_1b21ad: // 0160:1b21ad
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b21b4() // 0160:1b21b4 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    memoryASet32(ds, ebx * 4 + 0x3c0d1c, 0x00000001);
    ebx <<= 4;
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    ecx += ebx;
    ebx = eax;
    eax = ecx;
    ecx <<= 2;
    ecx -= eax;
    ebx <<= 3;
    ecx <<= 3;
    goto loc_1b223e;
loc_1b21e3: // 0160:1b21e3
    edx = 0x00000400;
    memoryASet32(ds, ebx + 3932444, esi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 3932448, edi);
    sub_1ab709();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 3932452, eax);
    eax = 0xfffffa00;
    ebx += 0x00000018;
    sub_1ab709();
    memoryASet32(ds, ebx + 3932432, eax);
    eax = memoryAGet32(ds, 0x1e3ac8);
    memoryASet32(ds, ebx + 3932440, eax);
    ah = memoryAGet(ds, 0x1e3ac8);
    ebp = 0;
    ah ^= 0x01;
    memoryASet32(ds, ebx + 3932436, ebp);
    memoryASet(ds, 0x1e3ac8, ah);
loc_1b223e: // 0160:1b223e
    if ((int32_t)ebx < (int32_t)ecx)
        goto loc_1b21e3;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b2246() // 0160:1b2246 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 16;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    ebx = eax;
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    ebp = memoryAGet32(ds, 0x3a1efc);
    eax <<= 3;
    ebx <<= 3;
    memoryASet32(ds, esp, eax);
    goto loc_1b239f;
loc_1b2276: // 0160:1b2276
    ecx = memoryAGet32(ds, ebx + 3932444);
    if (!ecx)
        goto loc_1b239c;
    eax = memoryAGet32(ds, ebx + 3932452);
    edi = memoryAGet32(ds, ebx + 3932448);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 3932456);
    ebp = memoryAGet32(ds, ebx + 3932456);
    edi += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, ebx + 3932448, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 3932448);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 3932444, esi);
    memoryASet32(ds, ebx + 3932456, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b237e;
    eax = memoryAGet32(ds, ebx + 3932444);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b237e;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_1b237e;
    eax = memoryAGet32(ds, ebx + 3932452);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3932452, eax);
    eax = memoryAGet32(ds, ebx + 3932456);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 3932456, eax);
loc_1b237e: // 0160:1b237e
    eax = memoryAGet32(ds, ebx + 3932460);
    eax += 0x00000004;
    memoryASet32(ds, ebx + 3932460, eax);
    if ((int32_t)eax < (int32_t)0x00000080)
        goto loc_1b239c;
    ecx = 0;
    memoryASet32(ds, ebx + 3932444, ecx);
loc_1b239c: // 0160:1b239c
    ebx += 0x00000018;
loc_1b239f: // 0160:1b239f
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_1b2276;
    memoryASet32(ds, 0x3a1efc, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b23ba() // 0160:1b23ba +long
{
    esp -= 4;
    goto loc_1b23ba;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b23ba: // 0160:1b23ba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b23c1: // 0160:1b23c1
    if (memoryAGet32(ds, esi + 3932444) == 0x00000000)
        goto loc_1b247e;
    if ((int32_t)memoryAGet32(ds, esi + 3932452) <= (int32_t)0x00000000)
        goto loc_1b2429;
    eax = memoryAGet32(ds, esi + 3932448);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3932444);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3932460);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x00317050;
    goto loc_1b2479;
loc_1b2429: // 0160:1b2429
    eax = memoryAGet32(ds, esi + 3932448);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3932444);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3932460);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x002d8590;
loc_1b2479: // 0160:1b2479
    sub_19e029();
loc_1b247e: // 0160:1b247e
    esi += 0x00000018;
    if (esi != 0x00000c00)
        goto loc_1b23c1;
    goto loc_1b23b4;
}
void sub_1b2492() // 0160:1b2492 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    ebp = ecx;
    ecx = ebx;
    edx = 0x00000001;
    ecx <<= 2;
    ebx <<= 7;
    memoryASet32(ds, ecx + 2536144, edx);
    edx = ebx;
    eax = ebp;
    edx <<= 3;
    eax <<= 3;
    edx += ebx;
    eax += ebp;
    edx += edx;
    eax += eax;
    ebx = edx;
    ebp = edx + eax;
    goto loc_1b2523;
loc_1b24c7: // 0160:1b24c7
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2240656, edi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 2240660, esi);
    sub_1ab709();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 2240664, eax);
    eax = 0xfffffa00;
    sub_1ab709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2240668, eax);
    eax = 0;
    sub_1ab709();
    eax += ecx;
    ebx += 0x00000012;
    al = memoryAGet(ds, eax * 4 + 0x26b2f0);
    memoryASet(ds, ebx + 2240654, al);
    ah = 0;
    memoryASet(ds, ebx + 2240655, ah);
loc_1b2523: // 0160:1b2523
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_1b24c7;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b252b() // 0160:1b252b +long
{
    esp -= 4;
    goto loc_1b252b;
loc_1b23a8: // 0160:1b23a8
    memoryASet32(ds, 0x3a1efc, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 369 bytes
loc_1b252b: // 0160:1b252b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 128;
    ebx = eax;
    eax <<= 3;
    ebx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebp = memoryAGet32(ds, 0x3a1efc);
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp, eax);
    goto loc_1b2680;
loc_1b255a: // 0160:1b255a
    ecx = memoryAGet32(ds, ebx + 2240656);
    if (!ecx)
        goto loc_1b267d;
    eax = memoryAGet32(ds, ebx + 2240664);
    edi = memoryAGet32(ds, ebx + 2240660);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 2240668);
    ebp = memoryAGet32(ds, ebx + 2240668);
    edi += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, ebx + 2240660, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 2240660);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 2240656, esi);
    memoryASet32(ds, ebx + 2240668, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b267d;
    eax = memoryAGet32(ds, ebx + 2240656);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b267d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_1b267d;
    eax = memoryAGet32(ds, ebx + 2240668);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2240668, eax);
    eax = memoryAGet32(ds, ebx + 2240664);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2240664, eax);
    memoryASet(ds, ebx + 2240673, memoryAGet(ds, ebx + 2240673) + 1);
    eax = 0;
    al = memoryAGet(ds, ebx + 2240673);
    if ((int32_t)eax <= (int32_t)0x00000005)
        goto loc_1b267d;
    eax = 0;
    memoryASet32(ds, ebx + 2240656, eax);
loc_1b267d: // 0160:1b267d
    ebx += 0x00000012;
loc_1b2680: // 0160:1b2680
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_1b255a;
    goto loc_1b23a8;
}
void sub_1b268e() // 0160:1b268e +long
{
    esp -= 4;
    goto loc_1b268e;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 724 bytes
loc_1b268e: // 0160:1b268e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000003d;
    ebx = edi;
    eax += 0x00000020;
    edx = ebp;
    sub_1b211c();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00004000;
    sub_1b2492();
    ecx = 0x00000010;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00004000;
    sub_1b21b4();
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -4;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000003d);
    push32(0x0000003d);
    ebx = eax + -4;
    edx = 0x00318270;
    eax = 0x00308fb0;
    sub_1b2017();
    goto loc_1b23b3;
}
void sub_1b2772() // 0160:1b2772 +long
{
    esp -= 4;
    goto loc_1b2772;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 942 bytes
loc_1b2768: // 0160:1b2768
    sub_1b2017();
    goto loc_1b23b3;
loc_1b2772: // 0160:1b2772
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000002f;
    ebx = edi;
    eax += 0x00000018;
    edx = ebp;
    sub_1b211c();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00003000;
    sub_1b2492();
    ecx = 0x0000000c;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00003000;
    sub_1b21b4();
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 6;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000029);
    push32(0x00000029);
    ebx = eax + -2;
    edx = 0x00318270;
    eax = 0x00306c78;
    goto loc_1b2768;
}
void sub_1b2851() // 0160:1b2851 +long
{
    esp -= 4;
    goto loc_1b2851;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 942 bytes
loc_1b2768: // 0160:1b2768
    sub_1b2017();
    goto loc_1b23b3;
    // gap 223 bytes
loc_1b2851: // 0160:1b2851
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x00000015;
    ebx = edi;
    eax += 0x0000000c;
    edx = ebp;
    sub_1b211c();
    ecx = 0x00000020;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00001800;
    sub_1b2492();
    ecx = 0x00000008;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx += 0x00004000;
    eax += 0x00001800;
    sub_1b21b4();
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 10;
    eax = memoryAGet32(ds, esi * 8 + 0x3a1b82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000019);
    push32(0x00000019);
    ebx = eax + -2;
    edx = 0x00318270;
    eax = 0x00306c58;
    goto loc_1b2768;
}
void sub_1b2930() // 0160:1b2930 +long
{
    esp -= 4;
    goto loc_1b2930;
loc_1ad06c: // 0160:1ad06c
    esp += 0x0000000c;
    goto loc_1b23b3;
    // gap 21311 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1398 bytes
loc_1b2930: // 0160:1b2930
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = memoryAGet32(ds, 0x1e3a80);
    if (!edx)
        goto loc_1b297b;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e3a80, ebx);
    if (ebx)
        goto loc_1b297b;
    edx = 0x00000007;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1b297b;
    eax = 0x0003c000;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000011;
    sub_1bda16();
loc_1b297b: // 0160:1b297b
    esi = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, esi);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
loc_1b298a: // 0160:1b298a
    if (memoryAGet32(ss, ebp + 2536144) == 0x00000000)
        goto loc_1b29a1;
    eax = memoryAGet32(ds, esp);
    sub_1b252b();
    memoryASet32(ss, ebp + 2536144, eax);
loc_1b29a1: // 0160:1b29a1
    if (memoryAGet32(ss, ebp + 3935516) == 0x00000000)
        goto loc_1b29b9;
    eax = memoryAGet32(ds, esp + 4);
    sub_1b2246();
    memoryASet32(ss, ebp + 2536144, eax);
loc_1b29b9: // 0160:1b29b9
    if (memoryAGet32(ds, esi + 3808130) == 0x00000000)
        goto loc_1b2ac7;
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    edi = memoryAGet32(ds, esi + 3808138);
    edi++;
    memoryASet32(ds, esi + 3808138, edi);
    if ((int32_t)edi < (int32_t)0x0000000a)
        goto loc_1b29ea;
    edx = 0;
    memoryASet32(ds, esi + 3808130, edx);
loc_1b29ea: // 0160:1b29ea
    if (memoryAGet32(ds, esi + 3808138) != 0x00000002)
        goto loc_1b2a8f;
    ecx = memoryAGet32(ds, 0x1e36d8);
    edi = memoryAGet32(ds, esi + 3808142);
    if (ecx)
        goto loc_1b2a1a;
    if (edi == 0x00000017)
        goto loc_1b2a1a;
    if (edi == 0x00000038)
        goto loc_1b2a1a;
    if (memoryAGet32(ds, 0x3a1dc0) == 0x00000000)
        goto loc_1b2a36;
loc_1b2a1a: // 0160:1b2a1a
    if (memoryAGet32(ds, 0x1e36d8) == 0x00000000)
        goto loc_1b2a49;
    if (edi == 0x00000022)
        goto loc_1b2a49;
    if (edi == 0x00000054)
        goto loc_1b2a49;
    if (memoryAGet32(ds, 0x3a1dc0) != 0x00000000)
        goto loc_1b2a49;
loc_1b2a36: // 0160:1b2a36
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3808134);
    eax = memoryAGet32(ds, esi + 3808130);
    sub_1b1e30();
loc_1b2a49: // 0160:1b2a49
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3808134);
    eax = memoryAGet32(ds, esi + 3808130);
    sub_1b1d13();
    ebx = edi;
    edx = memoryAGet32(ds, esi + 3808134);
    eax = memoryAGet32(ds, esi + 3808130);
    sub_1b1f28();
    ebx = edi;
    ecx = memoryAGet32(ds, esi + 3808150);
    edx = memoryAGet32(ds, esi + 3808134);
    push32(ecx);
    eax = memoryAGet32(ds, esi + 3808130);
    ecx = memoryAGet32(ds, esi + 3808146);
    sub_1b125b();
loc_1b2a8f: // 0160:1b2a8f
    if (memoryAGet32(ds, esi + 3808138) != 0x00000005)
        goto loc_1b2ac7;
    eax = memoryAGet32(ds, esi + 3808142);
    if ((int32_t)eax < (int32_t)0x00000032)
        goto loc_1b2aae;
    eax = memoryAGet32(ds, esp + 8);
    sub_1b268e();
    goto loc_1b2ac7;
loc_1b2aae: // 0160:1b2aae
    if ((int32_t)eax < (int32_t)0x00000020)
        goto loc_1b2abe;
    eax = memoryAGet32(ds, esp + 8);
    sub_1b2772();
    goto loc_1b2ac7;
loc_1b2abe: // 0160:1b2abe
    eax = memoryAGet32(ds, esp + 8);
    sub_1b2851();
loc_1b2ac7: // 0160:1b2ac7
    edx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 8);
    ebp += 0x00000004;
    esi += 0x00000018;
    edx += 0x00000080;
    ebx += 0x00000010;
    ecx++;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, ecx);
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_1b298a;
    goto loc_1ad06c;
}
void sub_1b2afb() // 0160:1b2afb +long +stackDrop4
{
    esp -= 4;
    goto loc_1b2afb;
loc_1af4be: // 0160:1af4be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 13879 bytes
loc_1b2afb: // 0160:1b2afb
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    ebp = ebx;
    memoryASet32(ds, esp, ecx);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -10;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000015);
    push32(0x00000015);
    ebx = eax + -10;
    edx = 0x00318270;
    eax = 0x00306c40;
    sub_1b2017();
    if ((int32_t)ebp <= 0)
        goto loc_1b2b54;
    ecx = 0xffffffff;
    goto loc_1b2b59;
loc_1b2b54: // 0160:1b2b54
    ecx = 0x00000001;
loc_1b2b59: // 0160:1b2b59
    edx = memoryAGet32(ds, esp + 24);
    esi += 0x00000c00;
    edi += 0x00000400;
    if (!edx)
        goto loc_1b2c11;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebp = esi;
    ebp -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    memoryASet32(ds, 0x26b2d0, 0x00000001);
    ebx = edi;
    ebx -= eax;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0;
loc_1b2ba8: // 0160:1b2ba8
    eax = memoryAGet32(ds, esp + 4);
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2240660, eax);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2240656, ebp);
    sub_1ab709();
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2240664, eax);
    eax = 0xfffffc00;
    sub_1ab709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2240668, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_1ab709();
    al = memoryAGet(ds, eax * 4 + 0x26b2f0);
    memoryASet(ds, ebx + 2240654, al);
    ah = 0;
    memoryASet(ds, ebx + 2240655, ah);
    if (ebx != 0x00000900)
        goto loc_1b2ba8;
loc_1b2c11: // 0160:1b2c11
    if (ecx != 0x00000001)
        goto loc_1b2c1c;
    esi += 0x00001400;
loc_1b2c1c: // 0160:1b2c1c
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000014;
    edi -= 0x00002000;
    esi -= 0x00002000;
    edx = edi;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = esi;
    sub_1b177b();
    ebx = 0x00000014;
    edx = edi;
    eax = esi;
    sub_1b1d13();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_1b1f28();
    esp += 0x00000008;
    goto loc_1af4be;
}
void sub_1b2c6c() // 0160:1b2c6c +long +stackDrop4
{
    esp -= 4;
    goto loc_1b2c6c;
loc_1af4be: // 0160:1af4be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 14248 bytes
loc_1b2c6c: // 0160:1b2c6c
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edi = edx;
    ebp = ebx;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000);
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    ecx = ebx;
    ecx -= 0x00000004;
    edx = esi;
    ecx -= eax;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000);
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000009);
    push32(0x00000009);
    ebx -= 0x00000004;
    edx = 0x00318270;
    ebx -= eax;
    eax = 0x00306c30;
    sub_1b2017();
    if ((int32_t)ebp <= 0)
        goto loc_1b2cf2;
    ebp = 0xffffffff;
    goto loc_1b2cf7;
loc_1b2cf2: // 0160:1b2cf2
    ebp = 0x00000001;
loc_1b2cf7: // 0160:1b2cf7
    ebx = 0;
    goto loc_1b2d0f;
loc_1b2cfb: // 0160:1b2cfb
    if (memoryAGet32(ds, ebx * 4 + 0x26b2d0) != 0x00000000)
        goto loc_1b2d0e;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0x00000008;
loc_1b2d0e: // 0160:1b2d0e
    ebx++;
loc_1b2d0f: // 0160:1b2d0f
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1b2cfb;
    ebx = memoryAGet32(ds, esp + 28);
    edi += 0x00000400;
    if (!ebx)
        goto loc_1b2dc4;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    memoryASet32(ds, eax + 2536144, 0x00000001);
    ecx = memoryAGet32(ds, esp + 4);
    ecx <<= 7;
    edx = ecx + 64;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax <<= 3;
    ebx = ecx + eax;
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1b2dbe;
loc_1b2d5d: // 0160:1b2d5d
    edx = 0x00000600;
    memoryASet32(ds, ebx + 2240656, esi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2240660, edi);
    sub_1ab709();
    eax = (int32_t)eax * (int32_t)ebp;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2240664, eax);
    eax = 0xfffffc00;
    sub_1ab709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 2240668, eax);
    eax = 0;
    sub_1ab709();
    eax += memoryAGet32(ds, esp);
    ebx += 0x00000012;
    al = memoryAGet(ds, eax * 4 + 0x26b2f0);
    memoryASet(ds, ebx + 2240654, al);
    ah = 0;
    ecx++;
    memoryASet(ds, ebx + 2240655, ah);
loc_1b2dbe: // 0160:1b2dbe
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b2d5d;
loc_1b2dc4: // 0160:1b2dc4
    esi += 0x00000c00;
    if (ebp != 0x00000001)
        goto loc_1b2dd5;
    esi += 0x00001400;
loc_1b2dd5: // 0160:1b2dd5
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    push32(0x00000000);
    edi -= 0x00001000;
    esi -= 0x00002000;
    edx = edi;
    ebx = 0x00000010;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = esi;
    edi -= 0x00000c00;
    sub_1b177b();
    ebx = 0x00000010;
    edx = edi;
    eax = esi;
    sub_1b1d13();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_1b1f28();
    esp += 0x0000000c;
    goto loc_1af4be;
}
void sub_1b2e2b() // 0160:1b2e2b +long
{
    esp -= 4;
    goto loc_1b2e2b;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2673 bytes
loc_1b2e2b: // 0160:1b2e2b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_1b2e33: // 0160:1b2e33
    if (memoryAGet32(ds, esi + 3808130) == 0x00000000)
        goto loc_1b2ec5;
    if ((int32_t)memoryAGet32(ds, esi + 3808142) >= (int32_t)0x00000020)
        goto loc_1b2e50;
    ebp = 0xfffffff4;
    goto loc_1b2e52;
loc_1b2e50: // 0160:1b2e50
    ebp = 0;
loc_1b2e52: // 0160:1b2e52
    if ((int32_t)memoryAGet32(ds, esi + 3808142) < (int32_t)0x0000002d)
        goto loc_1b2e63;
    ebx = memoryAGet32(ds, esi + 3808138);
    goto loc_1b2e6c;
loc_1b2e63: // 0160:1b2e63
    ebx = memoryAGet32(ds, esi + 3808138);
    ebx += 0x0000000a;
loc_1b2e6c: // 0160:1b2e6c
    eax = memoryAGet32(ds, esi + 3808134);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx <<= 4;
    edi = memoryAGet32(ds, ebx + 1968782);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3808130);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + ebp;
    eax = memoryAGet32(ds, ebx + 1968774) * 0x00000140;
    ecx = memoryAGet32(ds, ebx + 1968778);
    eax += 0x002dc270;
    ebp = memoryAGet32(ds, ebx + 1968770);
    ebx = edi;
    eax += ebp;
    sub_19e029();
loc_1b2ec5: // 0160:1b2ec5
    esi += 0x00000018;
    if (esi != 0x000000c0)
        goto loc_1b2e33;
    goto loc_1b23b3;
}
void sub_1b2ed9() // 0160:1b2ed9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ecx = eax;
    ebx = edx;
    edx = 0;
    eax = 0;
loc_1b2ee4: // 0160:1b2ee4
    if ((int32_t)eax >= (int32_t)0x00000360)
        goto loc_1b2efa;
    if (memoryAGet32(ds, eax + 3802606) == 0x00000000)
        goto loc_1b2efa;
    eax += 0x00000024;
    edx++;
    goto loc_1b2ee4;
loc_1b2efa: // 0160:1b2efa
    if ((int32_t)edx < (int32_t)0x00000018)
        goto loc_1b2f01;
    edx = 0;
loc_1b2f01: // 0160:1b2f01
    eax = edx;
    eax <<= 3;
    eax += edx;
    memoryASet32(ds, eax * 4 + 0x3a05f2, ebx);
    edi = 0;
    memoryASet32(ds, eax * 4 + 0x3a05ee, ecx);
    memoryASet32(ds, eax * 4 + 0x3a05fe, edi);
    memoryASet32(ds, eax * 4 + 0x3a0602, edi);
    memoryASet32(ds, eax * 4 + 0x3a0606, edi);
    memoryASet32(ds, eax * 4 + 0x3a060e, edi);
    memoryASet32(ds, eax * 4 + 0x3a060a, 0x00000600);
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b2f43() // 0160:1b2f43 +long
{
    esp -= 4;
    goto loc_1b2f43;
loc_1b10da: // 0160:1b10da
    esp += 0x00000018;
    goto loc_1b23b3;
    // gap 4817 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2953 bytes
loc_1b2f43: // 0160:1b2f43
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edi = 0;
    esi = 0;
    ebp = 0;
loc_1b2f52: // 0160:1b2f52
    if (ebp == memoryAGet32(ds, esi + 3802606))
        goto loc_1b3259;
    eax = memoryAGet32(ds, 0x3a1d44);
    ebx = memoryAGet32(ds, esi + 3802626);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 3802606);
    memoryASet32(ds, esi + 3802614, eax);
    eax = memoryAGet32(ds, esi + 3802610);
    memoryASet32(ds, esi + 3802618, eax);
    ecx = memoryAGet32(ds, esi + 3802606);
    edx = memoryAGet32(ds, esi + 3802610);
    eax = memoryAGet32(ds, esi + 3802622);
    memoryASet32(ds, esi + 3802626, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3802626);
    memoryASet32(ds, esi + 3802606, ecx);
    edx += eax;
    eax = memoryAGet32(ds, esi + 3802606);
    memoryASet32(ds, esi + 3802610, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 3802610);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 3802638);
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)ebp <= (int32_t)ebx)
        goto loc_1b2fef;
    memoryASet32(ds, esi + 3802638, ebp);
loc_1b2fef: // 0160:1b2fef
    ecx = memoryAGet32(ds, esi + 3802638);
    if (ebp == ecx)
        goto loc_1b3002;
    eax = ecx + -1;
    memoryASet32(ds, esi + 3802638, eax);
loc_1b3002: // 0160:1b3002
    if (ebp == memoryAGet32(ds, esi + 3802622))
        goto loc_1b3014;
    memoryASet32(ds, 0x3a1efc, 0x00000032);
loc_1b3014: // 0160:1b3014
    eax = memoryAGet32(ds, esi + 3802614);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, esi + 3802618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 3802622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<5) & 0x80000000);
    edx <<= 6;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x06);
    if (eax)
        goto loc_1b3062;
    if ((int32_t)ebp > (int32_t)memoryAGet32(ds, esi + 3802622))
        goto loc_1b3062;
    eax = 0x00000001;
loc_1b3062: // 0160:1b3062
    if (eax)
        goto loc_1b3073;
    if ((int32_t)ebp <= (int32_t)memoryAGet32(ds, esi + 3802622))
        goto loc_1b3073;
    eax = 0xffffffff;
loc_1b3073: // 0160:1b3073
    edx = memoryAGet32(ds, esi + 3802630);
    edx += eax;
    eax = edx;
    eax &= 0x0000007f;
    memoryASet32(ds, esi + 3802630, eax);
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 28;
    push32(ebx);
    eax = edi;
    ebx = esp + 28;
    sub_1ad28a();
    if (!eax)
        goto loc_1b3161;
    eax = memoryAGet32(ds, esi + 3802606);
    edx = memoryAGet32(ds, esp + 20);
    eax &= 0x000001ff;
    edx <<= 9;
    eax |= edx;
    memoryASet32(ds, esi + 3802606, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 3802610);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 3802610, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 3802622);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3802626);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1aec45();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3802622, eax);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3802626, eax);
    if (ebp != edx)
        goto loc_1b3125;
    memoryASet32(ds, esi + 3802630, edx);
loc_1b3125: // 0160:1b3125
    eax = memoryAGet32(ds, esp);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_1b3144;
    eax = memoryAGet32(ds, esp + 4);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b3161;
loc_1b3144: // 0160:1b3144
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000028;
    sub_1bda16();
loc_1b3161: // 0160:1b3161
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = 0x00002c00;
    ebx = 0x00002400;
    edx -= 0x00000002;
    eax--;
    edx <<= 9;
    eax <<= 9;
    sub_1b0457();
    if (!eax)
        goto loc_1b3224;
    if (ebp != memoryAGet32(ds, 0x3a1d10))
        goto loc_1b3224;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803474) == 0x00000018)
        goto loc_1b3224;
    ebx = memoryAGet32(ds, 0x3a1e7c);
    if (ebp == ebx)
        goto loc_1b31c5;
    ecx = memoryAGet32(ds, esi + 3802634);
    if (ebp != ecx)
        goto loc_1b3224;
    if (ecx == ebx)
        goto loc_1b3224;
loc_1b31c5: // 0160:1b31c5
    memoryASet32(ds, esi + 3802606, ebp);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803486);
    memoryASet32(ds, eax + 3803494, memoryAGet32(ds, eax + 3803494) - edx);
    eax = memoryAGet32(ds, 0x3a1cac) * 0x000000ac;
    push32(0x00000005);
    edx = memoryAGet32(ds, eax + 3803490);
    ebx = memoryAGet32(ds, eax + 3803498);
    ecx = 0x00000032;
    ebx -= edx;
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax + 3803498, ebx);
    eax = memoryAGet32(ds, esp + 24);
    ebx = 0x0000002d;
    edx -= 0x00000018;
    eax -= 0x00000018;
    edx <<= 9;
    eax <<= 9;
    sub_1ae04a();
loc_1b3224: // 0160:1b3224
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1b3238;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1b3259;
loc_1b3238: // 0160:1b3238
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1b3253;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1accfe();
loc_1b3253: // 0160:1b3253
    memoryASet32(ds, esi + 3802606, ebp);
loc_1b3259: // 0160:1b3259
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000018)
        goto loc_1b2f52;
    goto loc_1b10da;
}
void sub_1b326b() // 0160:1b326b +long
{
    esp -= 4;
    goto loc_1b326b;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3761 bytes
loc_1b326b: // 0160:1b326b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b3272: // 0160:1b3272
    if (memoryAGet32(ds, esi + 3802606) == 0x00000000)
        goto loc_1b32d0;
    eax = memoryAGet32(ds, esi + 3802610);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3802606);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 3802630);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000007);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x002f80b0;
    sub_19e029();
loc_1b32d0: // 0160:1b32d0
    esi += 0x00000024;
    if (esi != 0x00000360)
        goto loc_1b3272;
    goto loc_1b23b4;
}
void sub_1b32e0() // 0160:1b32e0 +long
{
    esp -= 4;
    goto loc_1b32e0;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3878 bytes
loc_1b32e0: // 0160:1b32e0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_1b32e8: // 0160:1b32e8
    if (memoryAGet32(ds, esi + 3802366) == 0x00000000)
        goto loc_1b3503;
    memoryASet32(ds, 0x3a1efc, 0x00000032);
    eax = memoryAGet32(ds, esi + 3802374);
    ecx = memoryAGet32(ds, esi + 3802366);
    edi = memoryAGet32(ds, esi + 3802370);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3802378);
    memoryASet32(ds, esi + 3802366, ecx);
    edi += eax;
    ebp = memoryAGet32(ds, esi + 3802378);
    memoryASet32(ds, esi + 3802370, edi);
    if ((int32_t)ebp >= (int32_t)0x00002000)
        goto loc_1b3343;
    eax = memoryAGet32(ds, 0x3a1d44);
    edx = eax + ebp;
    memoryASet32(ds, esi + 3802378, edx);
loc_1b3343: // 0160:1b3343
    if ((int32_t)memoryAGet32(ds, esi + 3802374) <= (int32_t)0x00000000)
        goto loc_1b3355;
    memoryASet32(ds, esi + 3802386, memoryAGet32(ds, esi + 3802386) + 0x00000008);
    goto loc_1b335c;
loc_1b3355: // 0160:1b3355
    memoryASet32(ds, esi + 3802386, memoryAGet32(ds, esi + 3802386) - 0x00000008);
loc_1b335c: // 0160:1b335c
    eax = memoryAGet32(ds, esi + 3802366);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, esi + 3802370);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3802386, memoryAGet32(ds, esi + 3802386) & 0x0000007f);
    ebp = eax;
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1b34c2;
    if ((int32_t)eax >= (int32_t)0x0000017e)
        goto loc_1b34c2;
    if (edi >= 0x000003c0)
        goto loc_1b34c2;
    if ((int32_t)eax <= 0)
        goto loc_1b340e;
    if (edi >= 0x000003c0)
        goto loc_1b340e;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    edx |= eax;
    if (edx)
        goto loc_1b3478;
loc_1b340e: // 0160:1b340e
    ebx = ebp + 1;
    if ((int32_t)ebx <= 0)
        goto loc_1b34c2;
    if (edi >= 0x000003c0)
        goto loc_1b34c2;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b34c2;
loc_1b3478: // 0160:1b3478
    eax = 0;
    memoryASet32(ds, esi + 3802366, eax);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = ebp + -28;
    edx <<= 9;
    eax = edi + -8;
    ecx = memoryAGet32(ds, esi + 3802382);
    eax <<= 9;
    if (ecx != 0x00000036)
        goto loc_1b34b0;
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 3803582);
    ebx = 0x00000037;
    goto loc_1b34bd;
loc_1b34b0: // 0160:1b34b0
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 3803582);
    ebx = 0x00000018;
loc_1b34bd: // 0160:1b34bd
    sub_1ae04a();
loc_1b34c2: // 0160:1b34c2
    if ((int32_t)ebp > (int32_t)0x0000017e)
        goto loc_1b34d2;
    if (edi <= 0x000003c0)
        goto loc_1b3503;
loc_1b34d2: // 0160:1b34d2
    if ((int32_t)ebp <= (int32_t)0x0000017e)
        goto loc_1b34fb;
    eax = edi;
    edi = memoryAGet32(ds, esi + 3802382);
    eax <<= 9;
    if (edi != 0x00000036)
        goto loc_1b34f1;
    edx = 0x000000ff;
    goto loc_1b34f6;
loc_1b34f1: // 0160:1b34f1
    edx = 0x00000080;
loc_1b34f6: // 0160:1b34f6
    sub_1accfe();
loc_1b34fb: // 0160:1b34fb
    ebp = 0;
    memoryASet32(ds, esi + 3802366, ebp);
loc_1b3503: // 0160:1b3503
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_1b32e8;
    goto loc_1b23b3;
}
void sub_1b3517() // 0160:1b3517 +long
{
    esp -= 4;
    goto loc_1b3517;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4445 bytes
loc_1b3517: // 0160:1b3517
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b351e: // 0160:1b351e
    if (memoryAGet32(ds, esi + 3802366) == 0x00000000)
        goto loc_1b35db;
    if (memoryAGet32(ds, esi + 3802382) != 0x00000036)
        goto loc_1b3586;
    eax = memoryAGet32(ds, esi + 3802370);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3802366);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 3802386);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x0000000b);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x0030aab0;
    goto loc_1b35d6;
loc_1b3586: // 0160:1b3586
    eax = memoryAGet32(ds, esi + 3802370);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 3802366);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 3802386);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000003);
    ecx = 0x00000003;
    eax <<= 4;
    edx = edi;
    eax += 0x002f7d70;
loc_1b35d6: // 0160:1b35d6
    sub_19e029();
loc_1b35db: // 0160:1b35db
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_1b351e;
    goto loc_1b23b4;
}
void sub_1b35ef() // 0160:1b35ef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    ebx = 0;
    eax = 0;
loc_1b35fc: // 0160:1b35fc
    if (memoryAGet32(ds, eax + 3807062) == 0x00000000)
        goto loc_1b3612;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_1b3612;
    eax += 0x00000020;
    ebx++;
    goto loc_1b35fc;
loc_1b3612: // 0160:1b3612
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_1b3619;
    ebx = 0;
loc_1b3619: // 0160:1b3619
    ecx = ebx;
    ecx <<= 5;
    edx = 0x00000100;
    memoryASet32(ds, ecx + 3807062, esi);
    ebp = 0;
    memoryASet32(ds, ecx + 3807066, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ecx + 3807090, ebp);
    sub_1ab709();
    edx = 0xfffffe00;
    memoryASet32(ds, ecx + 3807078, eax);
    eax = 0xfffffd00;
    sub_1ab709();
    memoryASet32(ds, ecx + 3807082, eax);
    memoryASet32(ds, ecx + 3807086, ebp);
    eax = ecx;
loc_1b3664: // 0160:1b3664
    if (memoryAGet32(ds, eax + 3807062) == 0x00000000)
        goto loc_1b367a;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_1b367a;
    eax += 0x00000020;
    ebx++;
    goto loc_1b3664;
loc_1b367a: // 0160:1b367a
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_1b3684;
    ebx = 0x00000001;
loc_1b3684: // 0160:1b3684
    ebx <<= 5;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 3807062, esi);
    edx = 0x00000100;
    memoryASet32(ds, ebx + 3807066, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ebx + 3807090, ecx);
    sub_1ab709();
    edx = 0xffffff00;
    memoryASet32(ds, ebx + 3807078, eax);
    eax = 0xfffffe00;
    esi = 0;
    sub_1ab709();
    memoryASet32(ds, ebx + 3807082, eax);
    memoryASet32(ds, ebx + 3807086, esi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b36d6() // 0160:1b36d6 +long
{
    esp -= 4;
    goto loc_1b36d6;
loc_1b10da: // 0160:1b10da
    esp += 0x00000018;
    goto loc_1b23b3;
    // gap 4817 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4892 bytes
loc_1b36d6: // 0160:1b36d6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edx = 0;
    esi = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    ebp = 0;
loc_1b36ec: // 0160:1b36ec
    edx = memoryAGet32(ds, esi + 3807062);
    if (ebp == edx)
        goto loc_1b3914;
    eax = memoryAGet32(ds, esi + 3807066);
    memoryASet32(ds, esi + 3807074, eax);
    ebx = memoryAGet32(ds, esi + 3807062);
    eax = memoryAGet32(ds, esi + 3807078);
    ecx = memoryAGet32(ds, esi + 3807066);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 3807082);
    memoryASet32(ds, esi + 3807062, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 3807062);
    memoryASet32(ds, esi + 3807070, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 3807066, ecx);
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esi + 3807082);
    edx += memoryAGet32(ds, 0x3a1d44);
    eax = memoryAGet32(ds, esi + 3807070);
    memoryASet32(ds, esi + 3807082, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 3807074);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (ebp != memoryAGet32(ds, esi + 3807090))
        goto loc_1b37fb;
    eax = memoryAGet32(ds, esi + 3807082);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1b37c6;
    edx = memoryAGet32(ds, esi + 3807078);
    if (ebp != edx)
        goto loc_1b37c6;
loc_1b37be: // 0160:1b37be
    memoryASet32(ds, esi + 3807086, edx);
    goto loc_1b3801;
loc_1b37c6: // 0160:1b37c6
    eax = memoryAGet32(ds, esi + 3807078);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b37ec;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esi + 3807078))
        goto loc_1b37e7;
    edi = 0x00000004;
    goto loc_1b37ec;
loc_1b37e7: // 0160:1b37e7
    edi = 0xfffffffc;
loc_1b37ec: // 0160:1b37ec
    eax = memoryAGet32(ds, esi + 3807086);
    eax += edi;
    edx = eax;
    edx &= 0x0000007f;
    goto loc_1b37be;
loc_1b37fb: // 0160:1b37fb
    memoryASet32(ds, esi + 3807078, ebp);
loc_1b3801: // 0160:1b3801
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 24;
    eax = esp + 28;
    sub_1add3f();
    if (!eax)
        goto loc_1b38df;
    edx = memoryAGet32(ds, esi + 3807062);
    eax = memoryAGet32(ds, esp + 20);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    edx = memoryAGet32(ds, esi + 3807066);
    memoryASet32(ds, esi + 3807062, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 3807066, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 3807078);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 3807082);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_1aec45();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3807078, eax);
    eax = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 3807082, eax);
    if (ebp != ebx)
        goto loc_1b38a3;
    if (ebx != eax)
        goto loc_1b38a3;
    memoryASet32(ds, esi + 3807086, eax);
loc_1b38a3: // 0160:1b38a3
    eax = memoryAGet32(ds, esp);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_1b38c2;
    eax = memoryAGet32(ds, esp + 4);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b38df;
loc_1b38c2: // 0160:1b38c2
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x0000001e;
    sub_1bda16();
loc_1b38df: // 0160:1b38df
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_1b38f3;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_1b3914;
loc_1b38f3: // 0160:1b38f3
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_1b390e;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_1accfe();
loc_1b390e: // 0160:1b390e
    memoryASet32(ds, esi + 3807062, ebp);
loc_1b3914: // 0160:1b3914
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_1b36ec;
    memoryASet16(ds, 0x3a1c52, 0xffff);
    goto loc_1b10da;
}
void sub_1b3931() // 0160:1b3931 +long
{
    esp -= 4;
    goto loc_1b3931;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5495 bytes
loc_1b3931: // 0160:1b3931
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_1b3938: // 0160:1b3938
    if (memoryAGet32(ds, esi + 3807062) == 0x00000000)
        goto loc_1b39e6;
    if (memoryAGet32(ds, esi + 3807090) != 0x00000000)
        goto loc_1b39a0;
    eax = memoryAGet32(ds, esi + 3807066);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -1;
    eax = memoryAGet32(ds, esi + 3807062);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -1;
    eax = memoryAGet32(ds, esi + 3807086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000002);
    ecx = 0x00000002;
    eax <<= 4;
    edx = edi;
    eax += 0x002f83b0;
    goto loc_1b39e1;
loc_1b39a0: // 0160:1b39a0
    eax = memoryAGet32(ds, esi + 3807066);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -7;
    eax = memoryAGet32(ds, esi + 3807062);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + -5;
    eax = memoryAGet32(ds, esi + 3807086);
    push32(0x00000008);
    eax <<= 4;
    ecx = 0x00000007;
    eax += 0x002f7cb0;
loc_1b39e1: // 0160:1b39e1
    sub_19e029();
loc_1b39e6: // 0160:1b39e6
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_1b3938;
    goto loc_1b23b4;
}
void sub_1b39fa() // 0160:1b39fa +long +stackDrop4
{
    esp -= 4;
    goto loc_1b39fa;
loc_1af4be: // 0160:1af4be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 17718 bytes
loc_1b39fa: // 0160:1b39fa
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = memoryAGet32(ds, esp + 44);
    edi = eax;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 4, ecx);
    eax = ebp;
    edx = 0x0000ffff;
    eax <<= 4;
    esi = 0;
    eax -= ebp;
    memoryASet16(ds, 0x3a1c52, dx);
    eax <<= 6;
    memoryASet32(ds, esp + 24, esi);
    memoryASet32(ds, esp, eax);
    goto loc_1b3af4;
loc_1b3a36: // 0160:1b3a36
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp);
    ecx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1b3acd;
loc_1b3a59: // 0160:1b3a59
    eax = memoryAGet32(ds, esp + 20);
    al = memoryAGet(ds, ecx + eax + 3234416);
    eax &= 0x000000ff;
    if (eax == 0x00000080)
        goto loc_1b3acc;
    if ((int32_t)ebp <= 0)
        goto loc_1b3acc;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += ecx;
    if (ebx >= 0x000003c0)
        goto loc_1b3acc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 12);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = eax;
    ebx += memoryAGet32(ds, esp + 8);
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    edx &= 0x0000ffff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b3acc;
    eax = memoryAGet32(ds, esp + 16);
    ecx = edi;
    esi++;
    memoryASet32(ds, esp + 24, eax);
loc_1b3acc: // 0160:1b3acc
    ecx++;
loc_1b3acd: // 0160:1b3acd
    if ((int32_t)ecx < (int32_t)edi)
        goto loc_1b3a59;
    ecx = memoryAGet32(ds, esp + 20);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 24);
    ebp++;
    ecx += 0x00000140;
    eax += 0x000003c0;
    edx++;
    memoryASet32(ds, esp + 20, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 24, edx);
loc_1b3af4: // 0160:1b3af4
    eax = memoryAGet32(ds, esp + 24);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1b3a36;
    eax = esi;
    esp += 0x0000001c;
    goto loc_1af4be;
}
void sub_1b3b0c() // 0160:1b3b0c +long +stackDrop16
{
    esp -= 4;
    goto loc_1b3b0c;
loc_1b2116: // 0160:1b2116
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
    return;
    // gap 6640 bytes
loc_1b3b0c: // 0160:1b3b0c
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp, eax);
    esi = edx;
    edx = memoryAGet32(ds, esp + 28);
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ebp = -ebp;
    if ((int32_t)edx < (int32_t)ebp)
        goto loc_1b3ba8;
    ebp = ecx + 960;
    if ((int32_t)edx > (int32_t)ebp)
        goto loc_1b3ba8;
    ebp = edi;
    ebp = -ebp;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_1b3ba8;
    ebp = edi + 400;
    if ((int32_t)eax > (int32_t)ebp)
        goto loc_1b3ba8;
    if ((int32_t)edx >= 0)
        goto loc_1b3b59;
    ecx += edx;
    esi -= edx;
    edx = 0;
loc_1b3b59: // 0160:1b3b59
    ebp = edx + ecx;
    if ((int32_t)ebp <= (int32_t)0x000003c0)
        goto loc_1b3b6b;
    ecx = 0x000003c0;
    ecx -= edx;
loc_1b3b6b: // 0160:1b3b6b
    if ((int32_t)eax >= 0)
        goto loc_1b3b75;
    edi += eax;
    ebx -= eax;
    eax = 0;
loc_1b3b75: // 0160:1b3b75
    ebp = eax + edi;
    if ((int32_t)ebp <= (int32_t)0x00000190)
        goto loc_1b3b87;
    edi = 0x00000190;
    edi -= eax;
loc_1b3b87: // 0160:1b3b87
    push32(0x00000000);
    push32(0x00000028);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    push32(edx);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    push32(edi);
    edx = esi;
    eax = memoryAGet32(ds, esp + 32);
    sub_1ab773();
loc_1b3ba8: // 0160:1b3ba8
    esp += 0x00000004;
    goto loc_1b2116;
}
void sub_1b3bb0() // 0160:1b3bb0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    ebx = memoryAGet32(ds, esi + 1981156);
    ebp = memoryAGet32(ds, esi + 1981160);
    eax = memoryAGet32(ds, esi + 1981144);
    ecx += ebp;
    edi += ebx;
    push32(ecx);
    ebx = edx;
    ebp = memoryAGet32(ds, esi + 1981140);
    ecx = edi;
    edx = eax;
    eax = ebp;
    sub_1b39fa();
    if (eax)
        goto loc_1b3ca1;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000035;
    sub_1bda16();
    eax = 0x00000001;
    edx = 0;
    memoryASet32(ds, 0x3a1d88, eax);
    memoryASet32(ds, 0x3a1cd0, edx);
    memoryASet32(ds, 0x3a1cc0, edx);
    memoryASet32(ds, 0x3a1db8, eax);
    eax = memoryAGet32(ds, 0x3a1cd4);
    memoryASet32(ds, 0x3a1d64, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = 0;
    push32(edi);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    ecx = 0x00000032;
    push32(ebx);
    memoryASet32(ds, 0x3a1efc, ecx);
    ecx = memoryAGet32(ds, esi + 1981140);
    push32(0x00318270);
    eax = memoryAGet32(ds, esi + 1981144);
    edx = memoryAGet32(ds, esi + 1981132);
    push32(eax);
    ebx = memoryAGet32(ds, esi + 1981136);
    eax = 0x00315a70;
    sub_1ab773();
    sub_19f1c7();
loc_1b3ca1: // 0160:1b3ca1
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b3ca5() // 0160:1b3ca5 +long
{
    esp -= 4;
    goto loc_1b3ca5;
loc_1b21ad: // 0160:1b21ad
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
    // gap 6897 bytes
loc_1b3ca5: // 0160:1b3ca5
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(edx);
    edi = ebx;
    ebp = ecx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 1981164);
    edi = ebx + edx;
    ebx = memoryAGet32(ds, esi + 1981168);
    eax = memoryAGet32(ds, esi + 1981140);
    ebp = ecx + ebx;
    edx = memoryAGet32(ds, esi + 1981144);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = edi;
    sub_1b39fa();
    ebx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, eax);
    ecx = memoryAGet32(ds, esi + 1981148);
    eax = memoryAGet32(ds, esi + 1981152);
    edx = memoryAGet32(ds, esi + 1981144);
    ebp += eax;
    edi += ecx;
    push32(ebp);
    ecx = edi;
    eax = memoryAGet32(ds, esi + 1981140);
    sub_1b39fa();
    eax += memoryAGet32(ds, esp + 4);
    if (eax)
        goto loc_1b21ad;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000035;
    sub_1bda16();
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000032;
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3a1cd0, ecx);
    memoryASet32(ds, 0x3a1cc0, ecx);
    memoryASet32(ds, 0x3a1efc, ebp);
    memoryASet32(ds, 0x3a1d64, ecx);
    memoryASet32(ds, 0x3a1d88, ebx);
    ecx = memoryAGet32(ds, esi + 1981168);
    memoryASet32(ds, 0x3a1db8, ebx);
    ebp = eax + ecx;
    ebx = memoryAGet32(ds, esi + 1981164);
    push32(ebp);
    edi += ebx;
    push32(edi);
    ebx = memoryAGet32(ds, esi + 1981136);
    push32(0x00318270);
    eax = memoryAGet32(ds, esi + 1981144);
    edx = memoryAGet32(ds, esi + 1981132);
    push32(eax);
    ecx = memoryAGet32(ds, esi + 1981140);
    eax = 0x00315a70;
    sub_1b3b0c();
    ebp += memoryAGet32(ds, esi + 1981152);
    edx = memoryAGet32(ds, esi + 1981148);
    push32(ebp);
    edi += edx;
    push32(edi);
    eax = 0x00315a70;
    push32(0x00318270);
    ecx = memoryAGet32(ds, esi + 1981144);
    ebx = memoryAGet32(ds, esi + 1981136);
    push32(ecx);
    edx = memoryAGet32(ds, esi + 1981132);
    ecx = memoryAGet32(ds, esi + 1981140);
    sub_1b3b0c();
    sub_19f1c7();
    goto loc_1b21ad;
}
void sub_1b3e07() // 0160:1b3e07 +long
{
    esp -= 4;
    goto loc_1b3e07;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6733 bytes
loc_1b3e07: // 0160:1b3e07
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x3a1d64) == 0x00000000)
        goto loc_1b23b4;
    edx = memoryAGet32(ds, 0x3a1c68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x3a1d68);
    eax += edx;
    eax += ebx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_1b23b4;
    esi = memoryAGet32(ds, 0x39eac0);
    if (!esi)
        goto loc_1b3e7f;
    if (esi == memoryAGet32(ds, 0x39ea94))
        goto loc_1b3e7f;
    if (memoryAGet32(ds, 0x1e3b70) != 0x00000000)
        goto loc_1b3e7f;
    edx = memoryAGet32(ds, 0x3a1d60);
    edx++;
    ebx = 0x00000008;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = 0x00000001;
    memoryASet32(ds, 0x3a1d60, edx);
    memoryASet32(ds, 0x1e3b70, eax);
loc_1b3e7f: // 0160:1b3e7f
    edx = memoryAGet32(ds, 0x39eac0);
    if (edx)
        goto loc_1b3e8f;
    memoryASet32(ds, 0x1e3b70, edx);
loc_1b3e8f: // 0160:1b3e8f
    eax = memoryAGet32(ds, 0x3a1d60);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx <<= 3;
    esi = edx;
    edx = memoryAGet32(ds, ebx + 1981136);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = memoryAGet32(ds, ebx + 1981132);
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1b23b4;
    if ((int32_t)memoryAGet32(ds, 0x3a1d60) >= (int32_t)0x00000004)
        goto loc_1b3f10;
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_1b3bb0();
    goto loc_1b23b4;
loc_1b3f10: // 0160:1b3f10
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_1b3ca5();
    goto loc_1b23b4;
}
void sub_1b3f20() // 0160:1b3f20 +long
{
    esp -= 4;
    goto loc_1b3f20;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7014 bytes
loc_1b3f20: // 0160:1b3f20
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1d60);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    if (memoryAGet32(ds, 0x3a1d64) == 0x00000000)
        goto loc_1b23b3;
    eax = memoryAGet32(ds, 0x3a1c68);
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x3a1d68);
    eax += esi;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_1b23b3;
    eax = memoryAGet32(ds, 0x3a1cd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x3a1cd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x3a1d60);
    esi <<= 3;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_1b3fbc;
    eax = memoryAGet32(ds, esi + 1981164);
    edx = memoryAGet32(ds, esi + 1981168);
    ebp += eax;
    edi += edx;
    goto loc_1b3fcc;
loc_1b3fbc: // 0160:1b3fbc
    edx = memoryAGet32(ds, esi + 1981156);
    ecx = memoryAGet32(ds, esi + 1981160);
    ebp += edx;
    edi += ecx;
loc_1b3fcc: // 0160:1b3fcc
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 1981136);
    edx += 0x000002e0;
    eax = edx;
    ebx = memoryAGet32(ds, esi + 1981144);
    eax <<= 2;
    ecx = memoryAGet32(ds, esi + 1981140);
    eax += edx;
    push32(ebx);
    eax <<= 6;
    edx = memoryAGet32(ds, esi + 1981132);
    eax += 0x002dc270;
    ebx = edi;
    eax += edx;
    edx = ebp;
    sub_19e029();
    if ((int32_t)memoryAGet32(ds, 0x3a1d60) < (int32_t)0x00000004)
        goto loc_1b23b3;
    ecx = memoryAGet32(ds, esi + 1981144);
    ebx = memoryAGet32(ds, esi + 1981136);
    eax = memoryAGet32(ds, esi + 1981152);
    ebx += 0x000002e0;
    edi += eax;
    eax = ebx;
    edx = memoryAGet32(ds, esi + 1981148);
    eax <<= 2;
    push32(ecx);
    eax += ebx;
    edx += ebp;
    eax <<= 6;
    ebx = memoryAGet32(ds, esi + 1981132);
    eax += 0x002dc270;
    ecx = memoryAGet32(ds, esi + 1981140);
    eax += ebx;
    ebx = edi;
    sub_19e029();
    goto loc_1b23b3;
}
void sub_1b4068() // 0160:1b4068 +long
{
    esp -= 4;
    goto loc_1b4068;
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7342 bytes
loc_1b4068: // 0160:1b4068
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = eax;
    ecx = eax;
    eax <<= 3;
    eax += edx;
    ebx = memoryAGet32(ds, eax * 4 + 0x3a15b2);
    eax = edx;
    esi = 0x00318270;
    eax <<= 2;
    ebp = 0x003c0d3c;
    eax += edx;
    ecx ^= edx;
    eax <<= 3;
    memoryASet32(ds, esp, ecx);
    eax -= edx;
    esi += ebx;
    eax <<= 2;
    edi = esi + 13;
    ebp += eax;
loc_1b40a6: // 0160:1b40a6
    edx = ebp;
    eax = esi;
    ecx = edi;
loc_1b40ac: // 0160:1b40ac
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1b40ac;
    eax = memoryAGet32(ds, esp);
    edi += 0x000003c0;
    esi += 0x000003c0;
    eax++;
    ebp += 0x0000000d;
    memoryASet32(ds, esp, eax);
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_1b40a6;
    goto loc_1b23b0;
}
void sub_1b40d6() // 0160:1b40d6 +long
{
    esp -= 4;
    goto loc_1b40d6;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7452 bytes
loc_1b40d6: // 0160:1b40d6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    ebx = memoryAGet32(ds, eax * 4 + 0x3a15b2);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = 0x00318270;
    eax <<= 3;
    esi = 0x003c0d3c;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x1e00a0);
    eax <<= 2;
    edi += ebx;
    esi += eax;
    if (!ecx)
        goto loc_1b412b;
    push32(0x000003c0);
    ecx = 0x0000000c;
    ebx = 0x0000000d;
    push32(0x0000000d);
    edx = edi;
    eax = esi;
    sub_1ad4e0();
loc_1b412b: // 0160:1b412b
    ebp = 0;
loc_1b412d: // 0160:1b412d
    edx = edi;
    eax = esi;
    ecx = esi + 13;
loc_1b4134: // 0160:1b4134
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1b4134;
    edi += 0x000003c0;
    ebp++;
    esi += 0x0000000d;
    if ((int32_t)ebp < (int32_t)0x0000000c)
        goto loc_1b412d;
    goto loc_1b23b3;
}
void sub_1b4152() // 0160:1b4152 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = 0;
    ebx = 0;
loc_1b415e: // 0160:1b415e
    eax = memoryAGet32(ds, ebx + 3802606);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b41a1;
    eax = memoryAGet32(ds, ebx + 3802610);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b41a1;
    ecx = 0x00000001;
loc_1b41a1: // 0160:1b41a1
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b415e;
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b41b3() // 0160:1b41b3 +long
{
    esp -= 4;
    goto loc_1b41b3;
loc_1b41ac: // 0160:1b41ac
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b41b3: // 0160:1b41b3
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = 0;
    ebx = 0;
loc_1b41bf: // 0160:1b41bf
    eax = memoryAGet32(ds, ebx + 3806618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b4202;
    eax = memoryAGet32(ds, ebx + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_1b4202;
    ecx = 0x00000001;
loc_1b4202: // 0160:1b4202
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_1b41bf;
    goto loc_1b41ac;
}
void sub_1b420c() // 0160:1b420c +long
{
    esp -= 4;
    goto loc_1b420c;
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7762 bytes
loc_1b420c: // 0160:1b420c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = memoryAGet32(ds, 0x3c0f2c);
    esi = 0;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1b23b0;
    memoryASet32(ds, esp, esi);
    goto loc_1b42ec;
loc_1b422d: // 0160:1b422d
    edx = 0x00000380;
    eax = 0x00000040;
    sub_1ab709();
    edx = eax;
    ecx = eax;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0;
    ebp = eax + eax;
    goto loc_1b42aa;
loc_1b4250: // 0160:1b4250
    if ((int32_t)ebx <= 0)
        goto loc_1b429f;
    if (edi >= 0x000003c0)
        goto loc_1b429f;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    si = memoryAGet16(ds, eax + ebp + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    esi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_1b429f;
    eax = 0x00000001;
    goto loc_1b42a1;
loc_1b429f: // 0160:1b429f
    eax = 0;
loc_1b42a1: // 0160:1b42a1
    esi = eax;
    ecx += 0x000003c0;
    ebx++;
loc_1b42aa: // 0160:1b42aa
    if ((int32_t)ebx >= (int32_t)0x0000016e)
        goto loc_1b42b6;
    if (!esi)
        goto loc_1b4250;
loc_1b42b6: // 0160:1b42b6
    if (!esi)
        goto loc_1b42e9;
    edx = ebx;
    eax = edi;
    edx <<= 9;
    eax <<= 9;
    sub_1ac5ea();
    if (eax)
        goto loc_1b42e7;
    edx = ebx;
    eax = edi;
    sub_1b4152();
    if (eax)
        goto loc_1b42e7;
    edx = ebx;
    eax = edi;
    sub_1b41b3();
    if (!eax)
        goto loc_1b42e9;
loc_1b42e7: // 0160:1b42e7
    esi = 0;
loc_1b42e9: // 0160:1b42e9
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
loc_1b42ec: // 0160:1b42ec
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000010)
        goto loc_1b42fa;
    if (!esi)
        goto loc_1b422d;
loc_1b42fa: // 0160:1b42fa
    if ((int32_t)memoryAGet32(ds, esp) < (int32_t)0x00000010)
        goto loc_1b4302;
    esi = 0;
loc_1b4302: // 0160:1b4302
    if (!esi)
        goto loc_1b442a;
    edx = 0;
    eax = 0;
loc_1b430e: // 0160:1b430e
    if (memoryAGet32(ds, eax + 3806618) == 0x00000000)
        goto loc_1b4322;
    ecx = edx;
    eax += 0x00000024;
    edx++;
    if ((int32_t)ecx < (int32_t)0x00000003)
        goto loc_1b430e;
loc_1b4322: // 0160:1b4322
    if ((int32_t)edx >= (int32_t)0x00000003)
        goto loc_1b442a;
    memoryASet32(ds, 0x1e3c1c, ebx);
    ebx -= 0x00000080;
    memoryASet32(ds, 0x1e3c18, edi);
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1b4347;
    ebx = 0x00000008;
loc_1b4347: // 0160:1b4347
    if (memoryAGet32(ds, 0x3a1f08) == 0x00010000)
        goto loc_1b4358;
    ebx = 0x00000008;
loc_1b4358: // 0160:1b4358
    ecx = edx;
    ecx <<= 3;
    edi <<= 9;
    ecx += edx;
    ebx <<= 9;
    memoryASet32(ds, ecx * 4 + 0x3a159a, edi);
    eax = 0x00000155;
    memoryASet32(ds, ecx * 4 + 0x3a159e, ebx);
    memoryASet32(ds, ecx * 4 + 0x3a15a6, eax);
    edi = 0;
    edx = 0x0000000f;
    memoryASet32(ds, ecx * 4 + 0x3a15aa, edi);
    eax = 0;
    memoryASet32(ds, ecx * 4 + 0x3a15a2, edi);
    sub_1ab709();
    memoryASet32(ds, ecx * 4 + 0x3a15ae, eax);
    ebx = 0x00000064;
    memoryASet32(ds, ecx * 4 + 0x3a15b2, edi);
    esi = 0x000000af;
    memoryASet32(ds, ecx * 4 + 0x3a15b6, ebx);
    ebp = 0x000001f4;
    memoryASet32(ds, ecx * 4 + 0x3a15ba, esi);
    eax = 0x001d7094;
    edi = 0x00000032;
    ebx = 0x00000001;
    sub_19fde2();
    memoryASet32(ds, 0x3a1efc, edi);
    memoryASet32(ds, 0x3a1c6c, ebp);
    eax = 0;
    memoryASet32(ds, 0x3a1d88, ebx);
    memoryASet32(ds, 0x3a1cc0, eax);
    memoryASet32(ds, 0x1e3ac0, eax);
    eax = 0x0003c000;
    ebx = 0x00000080;
    sub_19e36c();
    edx = eax;
    eax = 0x00000042;
    ecx = 0;
    sub_1bda16();
    ebx = 0x00078000;
    edx = memoryAGet32(ds, 0x1e3c1c);
    eax = memoryAGet32(ds, 0x1e3c18);
    sub_1adb97();
loc_1b442a: // 0160:1b442a
    edx = 0x00000005;
    eax = 0x00000001;
    ebx = memoryAGet32(ds, 0x1e3b74);
    sub_1ab709();
    edx = memoryAGet32(ds, ebx * 4 + 0x1e3b78);
    eax += edx;
    ecx = memoryAGet32(ds, 0x1e3b74);
    memoryASet32(ds, 0x3c0f2c, eax);
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1b23b0;
    esi = ecx + 1;
    memoryASet32(ds, 0x1e3b74, esi);
    goto loc_1b23b0;
}
void sub_1b446a() // 0160:1b446a +long
{
    esp -= 4;
    goto loc_1b446a;
loc_1ad4d8: // 0160:1ad4d8
    esp += 0x00000014;
    goto loc_1b23b3;
    // gap 20179 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8368 bytes
loc_1b446a: // 0160:1b446a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = 0x00000001;
    edi = 0;
    esi = 0;
    memoryASet32(ds, 0x1e3ac4, edx);
loc_1b4482: // 0160:1b4482
    ebx = memoryAGet32(ds, esi + 3806618);
    if (!ebx)
        goto loc_1b48f3;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esi + 3806646);
    memoryASet32(ds, esp + 16, eax);
    if (!ecx)
        goto loc_1b44cb;
    ecx--;
    memoryASet32(ds, esi + 3806646, ecx);
    goto loc_1b44ee;
loc_1b44cb: // 0160:1b44cb
    eax = memoryAGet32(ds, esi + 3806626);
    edx = ebx + eax;
    eax = memoryAGet32(ds, esi + 3806630);
    ebx = memoryAGet32(ds, esi + 3806622);
    memoryASet32(ds, esi + 3806618, edx);
    ebx += eax;
    memoryASet32(ds, esi + 3806622, ebx);
loc_1b44ee: // 0160:1b44ee
    eax = memoryAGet32(ds, esi + 3806650);
    if (!eax)
        goto loc_1b4503;
    ecx = eax + -1;
    memoryASet32(ds, esi + 3806650, ecx);
    goto loc_1b451b;
loc_1b4503: // 0160:1b4503
    edx = memoryAGet32(ds, esi + 3806630);
    if (!edx)
        goto loc_1b451b;
    eax = memoryAGet32(ds, 0x3a1d44);
    ebx = edx + eax;
    memoryASet32(ds, esi + 3806630, ebx);
loc_1b451b: // 0160:1b451b
    eax = memoryAGet32(ds, esi + 3806618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    if (memoryAGet32(ds, esi + 3806630) == 0x00000000)
        goto loc_1b457d;
    ebx = 0x00078000;
    eax = memoryAGet32(ds, 0x3a1cc4);
    edx = memoryAGet32(ds, 0x1e3c1c);
    ecx = 0;
    memoryASet32(ds, 0x3a1c60, eax);
    eax = memoryAGet32(ds, 0x1e3c18);
    sub_1adb97();
    memoryASet32(ds, 0x3a1e6c, 0x00000001);
loc_1b457d: // 0160:1b457d
    eax = esp;
    ecx = memoryAGet32(ds, esp + 16);
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ebx = ebp;
    eax = esp + 20;
    sub_1add3f();
    if (!eax)
        goto loc_1b465c;
    eax = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    memoryASet32(ds, esi + 3806618, eax);
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esi + 3806630);
    eax <<= 9;
    edx = -edx;
    memoryASet32(ds, esi + 3806622, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, esi + 3806630, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1b465c;
    eax = memoryAGet32(ds, esp + 8);
    eax -= 0x0000000b;
    edx = eax * 0x000003c0;
    ebx = 0;
    ecx = 0x00000004;
    memoryASet32(ds, esi + 3806630, ebx);
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esi + 3806634, ecx);
    eax -= 0x00000006;
    memoryASet32(ds, 0x3a1e6c, ebx);
    eax += edx;
    memoryASet32(ds, esi + 3806642, eax);
    eax = edi;
    sub_1b4068();
    push32(0x00000190);
    push32(0x000003c0);
    eax = memoryAGet32(ds, esp + 16);
    push32(0x00000140);
    eax -= 0x0000000b;
    push32(eax);
    eax = memoryAGet32(ds, esp + 28);
    eax -= 0x00000006;
    push32(eax);
    push32(0x00318270);
    ecx = 0x0000000d;
    ebx = 0x0000001e;
    push32(0x0000000c);
    edx = 0x00000130;
    eax = 0x002dc270;
    sub_1ab862();
loc_1b465c: // 0160:1b465c
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00001c00;
    ebx = 0x00002000;
    edx -= 0x00000006;
    eax <<= 9;
    edx <<= 9;
    sub_1b0457();
    if (!eax)
        goto loc_1b4692;
    if (memoryAGet32(ds, 0x3a1d10) != 0x00000000)
        goto loc_1b4692;
    if (memoryAGet32(ds, esi + 3806630) == 0x00000000)
        goto loc_1b46ba;
loc_1b4692: // 0160:1b4692
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00001c00;
    ebx = 0x00002000;
    edx -= 0x00000006;
    eax <<= 9;
    edx <<= 9;
    sub_1b055b();
    if (!eax)
        goto loc_1b48c9;
loc_1b46ba: // 0160:1b46ba
    ebx = memoryAGet32(ds, 0x3a1cac);
    eax = ebx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803526) != 0x00000000)
        goto loc_1b48c9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = eax * 0x00000015;
    ebp = memoryAGet32(ds, esi + 3806638);
    ebp = memoryAGet32(ds, ebp * 4 + 0x1e3bd8);
    ebp += eax;
    eax = ebp;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 3806726);
    if ((int32_t)edx < 0)
        goto loc_1b470c;
    ebx = edx + 1;
    memoryASet32(ds, eax + 3806726, ebx);
loc_1b470c: // 0160:1b470c
    eax = memoryAGet32(ds, esi + 3806638);
    if (memoryAGet32(ds, eax * 4 + 0x1e3bd8) != 0x00000012)
        goto loc_1b478a;
    edx = memoryAGet32(ds, 0x3a1c64);
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803614) != 0x00000000)
        goto loc_1b478a;
    eax = edx;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 3803614, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803614, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803614, ebx);
    memoryASet32(ds, eax + 3803614, ebx);
    sub_19abd3();
    eax = ebp;
    memoryASet32(ds, eax * 4 + 0x3a1606, 0xffffffff);
    goto loc_1b4864;
loc_1b478a: // 0160:1b478a
    eax = memoryAGet32(ds, esi + 3806638);
    if (memoryAGet32(ds, eax * 4 + 0x1e3bd8) != 0x00000014)
        goto loc_1b47f8;
    ebp = memoryAGet32(ds, 0x3a1c64);
    eax = ebp * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803618) != 0x00000000)
        goto loc_1b47f8;
    eax = ebp;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 3803618, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803618, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803618, ebx);
    memoryASet32(ds, eax + 3803618, ebx);
    sub_19ac2f();
    goto loc_1b4864;
loc_1b47f8: // 0160:1b47f8
    eax = memoryAGet32(ds, esi + 3806638);
    if (memoryAGet32(ds, eax * 4 + 0x1e3bd8) != 0x00000013)
        goto loc_1b4864;
    ecx = memoryAGet32(ds, 0x3a1c64);
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803622) != 0x00000000)
        goto loc_1b4864;
    eax = ecx;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 3803622, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 3803622, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 3803622, ebx);
    memoryASet32(ds, eax + 3803622, ebx);
    sub_19ac8b();
loc_1b4864: // 0160:1b4864
    if (memoryAGet32(ds, esi + 3806642) == 0x00000000)
        goto loc_1b4874;
    eax = edi;
    sub_1b40d6();
loc_1b4874: // 0160:1b4874
    eax = memoryAGet32(ds, esi + 3806638);
    ebx = 0x00000032;
    edx = 0;
    eax = memoryAGet32(ds, eax * 4 + 0x1e3b98);
    sub_19fdc8();
    edx = 0x0000004b;
    eax = memoryAGet32(ds, esi + 3806618);
    memoryASet32(ds, 0x1e00c0, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x0000000c;
    sub_1bda16();
    ebx = 0;
    memoryASet32(ds, esi + 3806618, ebx);
loc_1b48c9: // 0160:1b48c9
    ecx = memoryAGet32(ds, esi + 3806634);
    if (!ecx)
        goto loc_1b48f3;
    if ((int32_t)ecx >= (int32_t)0x00000100)
        goto loc_1b48f3;
    eax = ecx + 4;
    memoryASet32(ds, esi + 3806634, eax);
    if (eax != 0x00000100)
        goto loc_1b48f3;
    ebx = 0;
    memoryASet32(ds, 0x3a1efc, ebx);
loc_1b48f3: // 0160:1b48f3
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_1b4482;
    ecx = 0;
    memoryASet32(ds, 0x1e3ac4, ecx);
    goto loc_1ad4d8;
}
void sub_1b490d() // 0160:1b490d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_1b4913: // 0160:1b4913
    if (memoryAGet32(ds, esi + 3806618) == 0x00000000)
        goto loc_1b49b6;
    if (memoryAGet32(ds, esi + 3806650) == 0x00000000)
        goto loc_1b4970;
    if (memoryAGet32(ds, esi + 3806646) != 0x00000000)
        goto loc_1b49b6;
    eax = memoryAGet32(ds, esi + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -22;
    eax = memoryAGet32(ds, esi + 3806618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000017);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x002ddb60;
    goto loc_1b49b1;
loc_1b4970: // 0160:1b4970
    if (memoryAGet32(ds, esi + 3806630) == 0x00000000)
        goto loc_1b49b6;
    eax = memoryAGet32(ds, esi + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -11;
    eax = memoryAGet32(ds, esi + 3806618);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000c);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x002de920;
loc_1b49b1: // 0160:1b49b1
    sub_19e029();
loc_1b49b6: // 0160:1b49b6
    esi += 0x00000024;
    if (esi != 0x0000006c)
        goto loc_1b4913;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b4a80() // 0160:1b4a80 +long +stackDrop8
{
    esp -= 4;
    goto loc_1b4a80;
loc_1ad5c5: // 0160:1ad5c5
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 29877 bytes
loc_1b4a80: // 0160:1b4a80
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, esp + 4, eax);
    esi = edx;
    memoryASet32(ds, esp + 8, ebx);
    edi = ecx;
    edx = ebx;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi;
    edx -= esi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b4b15;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b4ae8;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0x00000200);
    goto loc_1b4af2;
loc_1b4ae8: // 0160:1b4ae8
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0xfffffe00);
loc_1b4af2: // 0160:1b4af2
    if (ecx)
        goto loc_1b4afb;
    ecx = 0x00000001;
loc_1b4afb: // 0160:1b4afb
    eax = ecx;
    ebx <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ss, ebp, eax);
    goto loc_1b4b4d;
loc_1b4b15: // 0160:1b4b15
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_1b4b22;
    memoryASet32(ss, ebp, 0x00000200);
    goto loc_1b4b29;
loc_1b4b22: // 0160:1b4b22
    memoryASet32(ss, ebp, 0xfffffe00);
loc_1b4b29: // 0160:1b4b29
    if (ebx)
        goto loc_1b4b32;
    ebx = 0x00000001;
loc_1b4b32: // 0160:1b4b32
    eax = ebx;
    ecx <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, edx, eax);
loc_1b4b4d: // 0160:1b4b4d
    esp += 0x0000000c;
    goto loc_1ad5c5;
}
void sub_1b4b55() // 0160:1b4b55 +long
{
    esp -= 4;
    goto loc_1b4b55;
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10139 bytes
loc_1b4b55: // 0160:1b4b55
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = 0x00000002;
    push32(0x003a1db0);
    eax = memoryAGet32(ds, 0x3a1d94);
    edx = 0;
    push32(0x003a1dac);
    memoryASet32(ds, 0x1e3a90, edx);
    memoryASet32(ds, 0x3a1d2c, ebx);
    memoryASet32(ds, 0x3a1d9c, eax);
    eax = memoryAGet32(ds, 0x3a1d98);
    ebx = memoryAGet32(ds, 0x3a1d9c);
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, 0x3a1da0, eax);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d8c);
    sub_1b4a80();
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = memoryAGet32(ds, 0x3a1d9c);
    ecx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, 0x3a1da4, eax);
    eax = memoryAGet32(ds, 0x3a1d90);
    edx -= ecx;
    memoryASet32(ds, 0x3a1da8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x3a1d90);
    edx = memoryAGet32(ds, 0x3a1da0);
    edx -= esi;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebx;
    ecx = (int32_t)ecx * (int32_t)ebx;
    edx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    ecx += eax;
    memoryASet32(ds, esp, ecx);
//    fild32(memoryAGet32(ds, esp));
//    stop("disassembly failed at 160:1b4c05 fsqrt ");
//    sub_1cb9f2();
//    memoryASet32(ds, 0x3a1d28, fistp32());
    memoryASet32(ds, 0x3a1d28, sqrt(memoryAGet32(ds, esp)));
    if (memoryAGet32(ds, 0x3a1d28) != 0x00000000)
        goto loc_1b4c25;
    memoryASet32(ds, 0x3a1d28, 0x00000001);
loc_1b4c25: // 0160:1b4c25
    edx <<= 11;
    ecx = memoryAGet32(ds, 0x3a1d28);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax += 0x00000800;
    eax = memoryAGet32(ds, eax * 4 + 0x1dbff0);
    memoryASet32(ds, 0x1e3a84, eax);
    if ((int32_t)ebx >= 0)
        goto loc_1b4c5e;
    eax = 0x00001000;
    edi = memoryAGet32(ds, 0x1e3a84);
    eax -= edi;
    memoryASet32(ds, 0x1e3a84, eax);
    goto loc_1b4c6a;
loc_1b4c5e: // 0160:1b4c5e
    esi = eax + 2048;
    memoryASet32(ds, 0x1e3a84, esi);
loc_1b4c6a: // 0160:1b4c6a
    edx = 0x00000019;
    ebp = memoryAGet32(ds, 0x1e3a84);
    eax = memoryAGet32(ds, 0x3a1d28);
    ebx = 0;
    ebp <<= 9;
    eax <<= 9;
    memoryASet32(ds, 0x1e3a88, edx);
    memoryASet32(ds, 0x1e3c20, ebx);
    memoryASet32(ds, 0x1e3c24, ebx);
    memoryASet32(ds, 0x1e3a84, ebp);
    memoryASet32(ds, 0x3c0f24, ebp);
    memoryASet32(ds, 0x3a1d28, eax);
    if ((int32_t)eax >= (int32_t)0x00000800)
        goto loc_1b23b0;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, 0x3a1d8c, edx);
    eax = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, 0x3a1d90, eax);
    memoryASet32(ds, 0x3a1da4, edx);
    memoryASet32(ds, 0x3a1da8, eax);
    sub_1b4d1b();
    goto loc_1b23b0;
}
void sub_1b4ce6() // 0160:1b4ce6 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x3a1d8c, edx);
    memoryASet32(ds, 0x3a1d90, edx);
    memoryASet32(ds, 0x3a1d94, edx);
    memoryASet32(ds, 0x3a1d98, edx);
    memoryASet32(ds, 0x3a1d9c, edx);
    memoryASet32(ds, 0x3a1da0, edx);
    memoryASet32(ds, 0x3a1d2c, edx);
    memoryASet32(ds, 0x3a1d30, edx);
    edx = pop32();
    esp += 4;
}
void sub_1b4d1b() // 0160:1b4d1b +long
{
    esp -= 4;
    goto loc_1b4d1b;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10593 bytes
loc_1b4d1b: // 0160:1b4d1b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x3a1da4);
    edx = memoryAGet32(ds, 0x3a1d8c);
    edx -= ebp;
    esi = eax;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = 0;
    memoryASet32(ds, 0x3a1d2c, edi);
    memoryASet32(ds, ebx + 3803486, eax);
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = memoryAGet32(ds, 0x3a1da8);
    eax -= edx;
    edx = eax;
    edx <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = esi + 2;
    memoryASet32(ds, edx + 3803490, eax);
    if ((int32_t)ebx <= 0)
        goto loc_1b4e27;
    if (ecx >= 0x000003c0)
        goto loc_1b4e27;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ecx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    ax = memoryAGet16(ds, esi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    ebx <<= 6;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b4e3b;
loc_1b4e27: // 0160:1b4e27
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803498, memoryAGet32(ds, eax + 3803498) + 0x00000400);
loc_1b4e3b: // 0160:1b4e3b
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803486) <= (int32_t)0x00000000)
        goto loc_1b4e5a;
    memoryASet32(ds, eax + 3803518, 0x00000001);
    goto loc_1b4e64;
loc_1b4e5a: // 0160:1b4e5a
    memoryASet32(ds, eax + 3803518, 0xffffffff);
loc_1b4e64: // 0160:1b4e64
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3803626, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803630, ebp);
    eax = memoryAGet32(ds, 0x1e3a90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00002000)
        goto loc_1b4ec6;
    eax = memoryAGet32(ds, 0x3a1c64);
    ebx = 0x000000ff;
    sub_19e30a();
    edx = eax;
    eax = 0x0000003f;
    sub_1bda16();
loc_1b4ec6: // 0160:1b4ec6
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3a1d8c, ecx);
    memoryASet32(ds, 0x3a1d90, ecx);
    memoryASet32(ds, 0x3a1d94, ecx);
    memoryASet32(ds, 0x3a1d98, ecx);
    memoryASet32(ds, 0x3a1d9c, ecx);
    memoryASet32(ds, 0x3a1da0, ecx);
    memoryASet32(ds, 0x3a1e54, ebx);
    memoryASet32(ds, 0x3a1cec, ecx);
    memoryASet32(ds, 0x3a1d88, ecx);
    sub_1a0335();
    if (memoryAGet32(ds, 0x1e3a8c) == 0x00000000)
        goto loc_1b4f16;
    sub_1ae1e1();
loc_1b4f16: // 0160:1b4f16
    ebp = 0;
    ah = 0;
    memoryASet32(ds, 0x1e3a8c, ebp);
    memoryASet(ds, 0x3a9f71, ah);
    goto loc_1b23b3;
}
void sub_1b4f2b() // 0160:1b4f2b +long
{
    esp -= 4;
    goto loc_1b4f2b;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11121 bytes
loc_1b4f2b: // 0160:1b4f2b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = 0;
    ah = memoryAGet(ds, 0x3a9f85);
    memoryASet16(ds, 0x3a1c52, dx);
    if (ah)
        goto loc_1b4f50;
    if (memoryAGet(ds, 0x3a9f83) == 0x00)
        goto loc_1b50ce;
loc_1b4f50: // 0160:1b4f50
    if (memoryAGet32(ds, 0x1e3c24) != 0x00000000)
        goto loc_1b50ce;
    if ((int32_t)memoryAGet32(ds, 0x1e3a90) <= (int32_t)0x00000000)
        goto loc_1b4f6d;
    esi = 0x00000001;
    goto loc_1b4f72;
loc_1b4f6d: // 0160:1b4f6d
    esi = 0xffffffff;
loc_1b4f72: // 0160:1b4f72
    eax = memoryAGet32(ds, 0x1e3a90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_1b502e;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b502e;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b502e;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b502e;
    edi = memoryAGet32(ds, 0x1e3a90);
    esi <<= 12;
    edi += esi;
    memoryASet32(ds, 0x1e3a90, edi);
    goto loc_1b503f;
loc_1b502e: // 0160:1b502e
    ecx = memoryAGet32(ds, 0x1e3a90);
    esi <<= 5;
    ecx += esi;
    memoryASet32(ds, 0x1e3a90, ecx);
loc_1b503f: // 0160:1b503f
    if (memoryAGet32(ds, 0x1e00a4) != 0x00000000)
        goto loc_1b50ce;
    ebx = memoryAGet32(ds, 0x1e3a84);
    ebx &= 0x001fffff;
    if ((int32_t)ebx <= (int32_t)0x00100000)
        goto loc_1b5092;
    if ((int32_t)ebx >= (int32_t)0x00180000)
        goto loc_1b5092;
    eax = memoryAGet32(ds, 0x1e3a90);
    if ((int32_t)eax <= 0)
        goto loc_1b5092;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b5092: // 0160:1b5092
    if ((int32_t)ebx < 0)
        goto loc_1b50a7;
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_1b50ce;
    if ((int32_t)memoryAGet32(ds, 0x1e3a90) >= (int32_t)0x00000000)
        goto loc_1b50ce;
loc_1b50a7: // 0160:1b50a7
    edx = memoryAGet32(ds, 0x1e3a90);
    eax = edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b50ce: // 0160:1b50ce
    if (memoryAGet(ds, 0x3a9f80) == 0x00)
        goto loc_1b50fb;
    ebx = memoryAGet32(ds, 0x3a1d28);
    ebx -= 0x00000400;
    memoryASet32(ds, 0x3a1d28, ebx);
    if ((int32_t)ebx >= (int32_t)0x00000800)
        goto loc_1b50fb;
    memoryASet32(ds, 0x3a1d28, 0x00000800);
loc_1b50fb: // 0160:1b50fb
    if (memoryAGet(ds, 0x3a9f88) == 0x00)
        goto loc_1b23b4;
    edi = memoryAGet32(ds, 0x3a1d28);
    edi += 0x00000400;
    memoryASet32(ds, 0x3a1d28, edi);
    if ((int32_t)edi <= (int32_t)0x00012c00)
        goto loc_1b23b4;
    memoryASet32(ds, 0x3a1d28, 0x00012c00);
    goto loc_1b23b4;
}
void sub_1b5135() // 0160:1b5135 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1d8c, edx);
    memoryASet32(ds, 0x3a1d90, edx);
    memoryASet32(ds, 0x3a1d94, edx);
    memoryASet32(ds, 0x3a1d98, edx);
    memoryASet32(ds, 0x3a1d9c, edx);
    memoryASet32(ds, 0x3a1da0, edx);
    memoryASet32(ds, 0x3a1cec, edx);
    memoryASet32(ds, 0x3a1d88, edx);
    memoryASet32(ds, 0x1e3a8c, edx);
    memoryASet32(ds, 0x3a1d2c, edx);
    memoryASet32(ds, 0x3a1d30, edx);
    sub_19e452();
    memoryASet32(ds, 0x3a1cc0, edx);
    edx = pop32();
    esp += 4;
}
void sub_1b518c() // 0160:1b518c +long
{
    esp -= 4;
    goto loc_1b518c;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11730 bytes
loc_1b518c: // 0160:1b518c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b5227;
    if (ebx >= 0x000003c0)
        goto loc_1b5227;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    eax <<= 4;
    edx = ebx;
    eax -= esi;
    edx = sar32(edx, 0x1f);
    esi = eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    esi = ecx;
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b5379;
loc_1b5227: // 0160:1b5227
    esi = ecx + -4;
    if ((int32_t)esi <= 0)
        goto loc_1b529b;
    if (ebx >= 0x000003c0)
        goto loc_1b529b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax <<= 4;
    edx = ebx;
    eax -= edi;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b5379;
loc_1b529b: // 0160:1b529b
    esi = ecx + -4;
    if ((int32_t)esi <= 0)
        goto loc_1b5308;
    edi = ebx + -3;
    if (edi >= 0x000003c0)
        goto loc_1b5308;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = edi;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 3244653);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b5379;
loc_1b5308: // 0160:1b5308
    ecx -= 0x00000004;
    if ((int32_t)ecx <= 0)
        goto loc_1b5383;
    esi = ebx + 4;
    if (esi >= 0x000003c0)
        goto loc_1b5383;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax <<= 4;
    edx = esi;
    eax -= edi;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244660);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b5383;
loc_1b5379: // 0160:1b5379
    eax = 0x00000001;
    goto loc_1b23b3;
loc_1b5383: // 0160:1b5383
    eax = 0;
    goto loc_1b23b3;
}
void sub_1b538a() // 0160:1b538a +long
{
    esp -= 4;
    goto loc_1b538a;
loc_1ad06c: // 0160:1ad06c
    esp += 0x0000000c;
    goto loc_1b23b3;
    // gap 21311 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12240 bytes
loc_1b538a: // 0160:1b538a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = memoryAGet32(ds, 0x1e3a98);
    if (!edx)
        goto loc_1b53a6;
    ebx = edx + -1;
    memoryASet32(ds, 0x1e3a98, ebx);
loc_1b53a6: // 0160:1b53a6
    if (memoryAGet32(ds, 0x3a1d2c) == 0x00000000)
        goto loc_1ad06c;
    eax = memoryAGet32(ds, 0x3a1d28);
    esi = memoryAGet32(ds, 0x1e3a88);
    memoryASet32(ds, esp + 4, eax);
    if (esi)
        goto loc_1b53cb;
    sub_1b4f2b();
loc_1b53cb: // 0160:1b53cb
    eax = memoryAGet32(ds, 0x1e3a84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax &= 0x00000fff;
    ebx = eax + 1024;
    edi = memoryAGet32(ds, 0x3a1d2c);
    ebx &= 0x00000fff;
    memoryASet32(ds, esp + 8, eax);
    if (edi != 0x00000002)
        goto loc_1b5aac;
    ebp = memoryAGet32(ds, 0x1e3c24);
    if (!ebp)
        goto loc_1b5413;
    eax = ebp + -1;
    memoryASet32(ds, 0x1e3c24, eax);
loc_1b5413: // 0160:1b5413
    edx = 0x00000001;
    ecx = memoryAGet32(ds, 0x1e3a88);
    memoryASet32(ds, 0x3a1d88, edx);
    if (!ecx)
        goto loc_1b5439;
    esi = ecx;
    esi -= edx;
    memoryASet32(ds, 0x1e3a88, esi);
    if (esi)
        goto loc_1b5439;
    sub_19f308();
loc_1b5439: // 0160:1b5439
    eax = memoryAGet32(ds, 0x3a1d94);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1b552e;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b5514;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    if (eax >= 0x000003c0)
        goto loc_1b5514;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = edi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b551b;
loc_1b5514: // 0160:1b5514
    eax = 0x00000001;
    goto loc_1b551d;
loc_1b551b: // 0160:1b551b
    eax = 0;
loc_1b551d: // 0160:1b551d
    if (!eax)
        goto loc_1b552e;
    if (memoryAGet32(ds, 0x1e3a88) == 0x00000000)
        goto loc_1b56a3;
loc_1b552e: // 0160:1b552e
    edi = esi + -1;
    if ((int32_t)edi <= 0)
        goto loc_1b5598;
    if (ecx >= 0x000003c0)
        goto loc_1b5598;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = edi;
    eax <<= 4;
    eax -= edi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b559f;
loc_1b5598: // 0160:1b5598
    eax = 0x00000001;
    goto loc_1b55a1;
loc_1b559f: // 0160:1b559f
    eax = 0;
loc_1b55a1: // 0160:1b55a1
    if (!eax)
        goto loc_1b56ad;
    if ((int32_t)esi <= 0)
        goto loc_1b5612;
    if (ecx >= 0x000003c0)
        goto loc_1b5612;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    eax = 0;
    edi = edx;
    ax = memoryAGet16(ds, 0x3a1c52);
    edi &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (eax)
        goto loc_1b5619;
loc_1b5612: // 0160:1b5612
    eax = 0x00000001;
    goto loc_1b561b;
loc_1b5619: // 0160:1b5619
    eax = 0;
loc_1b561b: // 0160:1b561b
    if (!eax)
        goto loc_1b56ad;
    esi++;
    if ((int32_t)esi <= 0)
        goto loc_1b568d;
    if (ecx >= 0x000003c0)
        goto loc_1b568d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b5694;
loc_1b568d: // 0160:1b568d
    eax = 0x00000001;
    goto loc_1b5696;
loc_1b5694: // 0160:1b5694
    eax = 0;
loc_1b5696: // 0160:1b5696
    if (!eax)
        goto loc_1b56ad;
    if (memoryAGet32(ds, 0x1e3a88) != 0x00000000)
        goto loc_1b56ad;
loc_1b56a3: // 0160:1b56a3
    sub_1b4d1b();
    goto loc_1b5aac;
loc_1b56ad: // 0160:1b56ad
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, 0x1e3a8c, edx);
    memoryASet32(ds, 0x3a1da4, eax);
    edx = memoryAGet32(ds, ebx * 4 + 0x1d7ff0);
    eax = memoryAGet32(ds, 0x3a1d90);
    edx <<= 9;
    memoryASet32(ds, 0x3a1da8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = eax;
    eax = memoryAGet32(ds, 0x3a1d28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 8);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d94);
    edx = memoryAGet32(ds, edx * 4 + 0x1d7ff0);
    eax += esi;
    edx <<= 9;
    memoryASet32(ds, 0x3a1d8c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    ecx = (int32_t)ecx * (int32_t)eax;
    eax = memoryAGet32(ds, 0x3a1d98);
    eax += ecx;
    ecx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1d90, eax);
    eax = ecx * 0x000000ac;
    esi = 0x00000001;
    memoryASet32(ds, eax + 3803486, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, esi);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, eax + 3803494, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, eax + 3803498, edx);
    ebp = esi;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, eax + 3803502, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, eax + 3803506, edx);
    edx = 0;
    memoryASet32(ds, 0x3a1cec, ebp);
    memoryASet16(ds, 0x3a1c52, dx);
    sub_1b518c();
    if (!eax)
        goto loc_1b5829;
    eax = memoryAGet32(ds, 0x3c0f24);
    dl = memoryAGet(ds, 0x3a9f83);
    memoryASet32(ds, 0x1e3a84, eax);
    if (dl)
        goto loc_1b57e8;
    if (memoryAGet(ds, 0x3a9f85) == 0x00)
        goto loc_1b57f0;
loc_1b57e8: // 0160:1b57e8
    memoryASet32(ds, 0x1e3a90, -memoryAGet32(ds, 0x1e3a90));
    goto loc_1b5806;
loc_1b57f0: // 0160:1b57f0
    edx = memoryAGet32(ds, 0x1e3a90);
    edx = -edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b5806: // 0160:1b5806
    eax = memoryAGet32(ds, esp + 4);
    edx = 0x00000001;
    cl = memoryAGet(ds, 0x3a9f71);
    memoryASet32(ds, 0x3a1d28, eax);
    memoryASet32(ds, 0x1e3c24, edx);
    if (!cl)
        goto loc_1b5829;
    sub_1b4d1b();
loc_1b5829: // 0160:1b5829
    edx = memoryAGet32(ds, ebx * 4 + 0x1d7ff0);
    ebx = memoryAGet32(ds, 0x3a1d44);
    edx <<= 9;
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<6) & 0x80000000);
    edx <<= 7;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x07);
    memoryASet16(ds, 0x3a1c52, 0xffff);
    ecx = memoryAGet32(ds, 0x1e3a90);
    ecx += eax;
    eax = memoryAGet32(ds, 0x1e3a84);
    memoryASet32(ds, 0x3c0f24, eax);
    eax = memoryAGet32(ds, 0x3a1d28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<10) & 0x80000000);
    edx <<= 11;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0b);
    memoryASet32(ds, 0x1e3a90, ecx);
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_1b5897;
    ebx = 0x00000004;
    goto loc_1b58a1;
loc_1b5897: // 0160:1b5897
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_1b58a1;
    ebx = 0x00000032;
loc_1b58a1: // 0160:1b58a1
    eax = memoryAGet32(ds, 0x1e3a90);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = memoryAGet32(ds, 0x1e3a84);
    esi += eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3c0f24);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x1e3a84, esi);
    ebx &= 0x00000fff;
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e3a90);
    ecx &= 0x00000fff;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000200)
        goto loc_1b59be;
    edx = 0x00000003;
    eax = 0;
    sub_1ab709();
    if (eax)
        goto loc_1b5976;
    if (memoryAGet32(ds, 0x1e3c20) != 0x00000000)
        goto loc_1b5976;
    if ((int32_t)ebx >= (int32_t)0x00000800)
        goto loc_1b5976;
    if ((int32_t)ecx >= (int32_t)0x00000800)
        goto loc_1b5976;
    if ((int32_t)ebx <= (int32_t)0x00000400)
        goto loc_1b5946;
    if ((int32_t)ecx < (int32_t)0x00000400)
        goto loc_1b5956;
loc_1b5946: // 0160:1b5946
    if ((int32_t)ebx >= (int32_t)0x00000400)
        goto loc_1b5976;
    if ((int32_t)ecx <= (int32_t)0x00000400)
        goto loc_1b5976;
loc_1b5956: // 0160:1b5956
    ebp = 0x00000019;
    eax = ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x1e3c20, ebp);
    sub_19e30a();
    edx = eax;
    eax = 0x0000003e;
    goto loc_1b59b9;
loc_1b5976: // 0160:1b5976
    if ((int32_t)ebx <= (int32_t)0x00000800)
        goto loc_1b59be;
    if ((int32_t)ecx <= (int32_t)0x00000800)
        goto loc_1b59be;
    if ((int32_t)ebx <= (int32_t)0x00000c00)
        goto loc_1b5996;
    if ((int32_t)ecx < (int32_t)0x00000c00)
        goto loc_1b59a6;
loc_1b5996: // 0160:1b5996
    if ((int32_t)ebx >= (int32_t)0x00000c00)
        goto loc_1b59be;
    if ((int32_t)ecx <= (int32_t)0x00000c00)
        goto loc_1b59be;
loc_1b59a6: // 0160:1b59a6
    eax = ebx;
    sub_19e30a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x0000003f;
loc_1b59b9: // 0160:1b59b9
    sub_1bda16();
loc_1b59be: // 0160:1b59be
    eax = memoryAGet32(ds, 0x1e3a90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1b59e1;
    edx = 0x00000008;
loc_1b59e1: // 0160:1b59e1
    eax = edx;
    edx = memoryAGet32(ds, 0x1e3a90);
    ebx = memoryAGet32(ds, eax * 4 + 0x1e3c28);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x1e3a84);
    edx &= 0x001fffff;
    memoryASet32(ds, 0x1e3a90, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, edx + 3803626, 0xfffffffc);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebp = memoryAGet32(ds, edx + 3803518);
    eax &= 0x0000000f;
    if ((int32_t)ebp <= 0)
        goto loc_1b5a6c;
    memoryASet32(ds, edx + 3803626, 0xfffffffd);
    edx = 0x00000007;
    edx -= eax;
    eax = edx;
    eax &= 0x0000000f;
loc_1b5a6c: // 0160:1b5a6c
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax <<= 4;
    eax += 0x00003840;
    memoryASet32(ds, edx + 3803470, eax);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803474, 0x00000039);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803630, 0x00000006);
loc_1b5aac: // 0160:1b5aac
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3803494);
    if ((int32_t)ecx < 0)
        goto loc_1b5ad4;
    if ((int32_t)ecx > (int32_t)0x00078000)
        goto loc_1b5ad4;
    if ((int32_t)memoryAGet32(ds, eax + 3803498) <= (int32_t)0x0002fc00)
        goto loc_1b5ad9;
loc_1b5ad4: // 0160:1b5ad4
    sub_1b5135();
loc_1b5ad9: // 0160:1b5ad9
    ebp = memoryAGet32(ds, 0x1e3c20);
    if (!ebp)
        goto loc_1ad06c;
    eax = ebp + -1;
    memoryASet32(ds, 0x1e3c20, eax);
    goto loc_1ad06c;
}
void sub_1b5af4() // 0160:1b5af4 +long
{
    esp -= 4;
    goto loc_1b5af4;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14138 bytes
loc_1b5af4: // 0160:1b5af4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    if (memoryAGet32(ds, 0x3a1d2c) != 0x00000000)
        goto loc_1b5b13;
    if ((int32_t)memoryAGet32(ds, 0x3a1d30) < (int32_t)0x00000002)
        goto loc_1b5d33;
loc_1b5b13: // 0160:1b5b13
    ecx = memoryAGet32(ds, 0x3a1d8c);
    if (!ecx)
        goto loc_1b5d33;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x3a1f0c);
    eax -= esi;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, 0x3a1d94);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x3a1f10);
    eax -= ebp;
    ebp = eax;
    eax = memoryAGet32(ds, 0x3a1d98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, 0x3a1d94);
    ebx -= esi;
    esi = memoryAGet32(ds, 0x3a1d8c);
    esi -= edi;
    edi = memoryAGet32(ds, 0x3a1d90);
    edx = memoryAGet32(ds, 0x3a1f10);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d98);
    ecx -= edx;
    edx = memoryAGet32(ds, 0x3a1d30);
    edi -= eax;
    if ((int32_t)edx < (int32_t)0x00000002)
        goto loc_1b5bbc;
    eax = memoryAGet32(ds, 0x1e3c4c);
    ebx -= eax;
    eax <<= 9;
    esi += eax;
loc_1b5bbc: // 0160:1b5bbc
    edx = ebx;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 8);
    edx <<= 16;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, 0x3a1f08));
    edx = ecx;
    memoryASet32(ds, esp + 8, eax);
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebp;
    ecx = eax;
    edx <<= 16;
    ebp = memoryAGet32(ds, 0x3a1f08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebp = eax;
    eax = esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    memoryASet32(ds, esp + 4, eax);
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_1b5caf;
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_1b5c37;
    ebp = 0x00000001;
    goto loc_1b5c3c;
loc_1b5c37: // 0160:1b5c37
    ebp = 0xffffffff;
loc_1b5c3c: // 0160:1b5c3c
    if (esi)
        goto loc_1b5c45;
    esi = 0x00000001;
loc_1b5c45: // 0160:1b5c45
    eax = esi;
    edi <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx <<= 9;
    ecx += 0x00000100;
    edi = eax;
loc_1b5c65: // 0160:1b5c65
    if (ebx == memoryAGet32(ds, esp + 8))
        goto loc_1b5d33;
    if (ebx >= 0x00000140)
        goto loc_1b5ca9;
    if (ecx >= 0x00015000)
        goto loc_1b5ca9;
    al = bl;
    al &= 0x01;
    edx = ecx;
    al += 0x09;
    edx = sar32(edx, 0x1f);
    memoryASet(ds, esp + 12, al);
    eax = ecx;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = eax * 0x00000140;
    dl = memoryAGet(ds, esp + 12);
    memoryASet(ds, ebx + eax + 2661552, dl);
loc_1b5ca9: // 0160:1b5ca9
    ebx += ebp;
    ecx += edi;
    goto loc_1b5c65;
loc_1b5caf: // 0160:1b5caf
    if ((int32_t)ecx >= (int32_t)ebp)
        goto loc_1b5cbc;
    memoryASet32(ds, esp, 0x00000001);
    goto loc_1b5cc3;
loc_1b5cbc: // 0160:1b5cbc
    memoryASet32(ds, esp, 0xffffffff);
loc_1b5cc3: // 0160:1b5cc3
    if (edi)
        goto loc_1b5ccc;
    edi = 0x00000001;
loc_1b5ccc: // 0160:1b5ccc
    eax = edi;
    esi <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edi = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx <<= 9;
    ebx += 0x00000100;
    esi = eax;
loc_1b5cec: // 0160:1b5cec
    if (ecx == ebp)
        goto loc_1b5d33;
    if (ebx >= 0x00028000)
        goto loc_1b5d2a;
    if (ecx >= 0x000000a8)
        goto loc_1b5d2a;
    al = cl;
    al &= 0x01;
    edx = ebx;
    al += 0x09;
    edx = sar32(edx, 0x1f);
    memoryASet(ds, esp + 12, al);
    eax = ebx;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = ecx * 0x00000140;
    dl = memoryAGet(ds, esp + 12);
    memoryASet(ds, edi + eax + 2661552, dl);
loc_1b5d2a: // 0160:1b5d2a
    eax = memoryAGet32(ds, esp);
    ebx += esi;
    ecx += eax;
    goto loc_1b5cec;
loc_1b5d33: // 0160:1b5d33
    esp += 0x00000010;
    goto loc_1b23b3;
}
void sub_1b5d3b() // 0160:1b5d3b +long
{
    esp -= 4;
    goto loc_1b5d3b;
loc_1ad4d8: // 0160:1ad4d8
    esp += 0x00000014;
    goto loc_1b23b3;
    // gap 20179 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14721 bytes
loc_1b5d3b: // 0160:1b5d3b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 16, edx);
    edx = 0;
    memoryASet16(ds, 0x3a1c52, dx);
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -6;
    ebp = memoryAGet32(ds, ebx + 3803518);
    eax = edi;
    eax += ebp;
    ebx = edi;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    eax = esp + 20;
    memoryASet32(ds, esp + 16, esi);
    sub_1add3f();
    if (!eax)
        goto loc_1b5de2;
    ebp = -ebp;
    eax = edi;
    eax += ebp;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    ebx = edi;
    eax = esp + 20;
    sub_1add3f();
    if (eax)
        goto loc_1ad4d8;
loc_1b5de2: // 0160:1b5de2
    ebx = memoryAGet32(ds, esp + 16);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 2;
    esi = 0;
    eax -= ebx;
    memoryASet32(ds, 0x3a1eec, esi);
    eax <<= 2;
    edx <<= 9;
    memoryASet32(ds, eax + 3808086, edx);
    memoryASet32(ds, eax + 3808094, esi);
    memoryASet32(ds, eax + 3808098, esi);
    memoryASet32(ds, eax + 3808122, esi);
    memoryASet32(ds, eax + 3808106, esi);
    edx = memoryAGet32(ds, esp + 8);
    esi = 0x000001f4;
    edx += 0x00000006;
    memoryASet32(ds, eax + 3808118, esi);
    edx <<= 9;
    memoryASet32(ds, eax + 3808090, edx);
    edx = memoryAGet32(ds, eax + 3808086);
    memoryASet32(ds, eax + 3808110, edx);
    edx = memoryAGet32(ds, eax + 3808090);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 3808114, edx);
    memoryASet32(ds, 0x3a1ef0, edi);
    memoryASet32(ds, eax + 3808102, ebp);
    if ((int32_t)ebp <= 0)
        goto loc_1b5e79;
    memoryASet32(ds, eax + 3808126, 0x003173e0);
    goto loc_1ad4d8;
loc_1b5e79: // 0160:1b5e79
    memoryASet32(ds, eax + 3808126, 0x002d8920);
    goto loc_1ad4d8;
}
void sub_1b5e88() // 0160:1b5e88 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 8, ecx);
    eax = 0x00000001;
    cl = memoryAGet(ds, 0x3a1c64);
    eax <<= cl;
    edx = 0;
    eax ^= 0x0000ffff;
    memoryASet32(ds, esp + 12, edx);
    memoryASet16(ds, 0x3a1c52, ax);
    if ((int32_t)edi <= 0)
        goto loc_1b62a3;
    ecx = edi + 1;
    if ((int32_t)ecx <= 0)
        goto loc_1b60cb;
    if (esi >= 0x000003c0)
        goto loc_1b60cb;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_1b60cb;
    ecx = edi + -15;
    if ((int32_t)ecx <= 0)
        goto loc_1b5f9c;
    if (esi >= 0x000003c0)
        goto loc_1b5f9c;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (eax)
        goto loc_1b5fa3;
loc_1b5f9c: // 0160:1b5f9c
    eax = 0x00000001;
    goto loc_1b5fa5;
loc_1b5fa3: // 0160:1b5fa3
    eax = 0;
loc_1b5fa5: // 0160:1b5fa5
    if (!eax)
        goto loc_1b60cb;
    ecx = edi + -4;
    if ((int32_t)ecx <= 0)
        goto loc_1b6033;
    ebp = esi + ebx;
    if (ebp >= 0x000003c0)
        goto loc_1b6033;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    dx = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebp += eax;
    eax = 0;
    al = memoryAGet(ss, ebp + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6168;
loc_1b6033: // 0160:1b6033
    ebp = edi + -4;
    if ((int32_t)ebp <= 0)
        goto loc_1b60cb;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = esi + eax;
    if (ecx >= 0x000003c0)
        goto loc_1b60cb;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 6;
    eax += edx;
    ax = memoryAGet16(ds, eax + 2344144);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp + 4, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp + 4);
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6168;
loc_1b60cb: // 0160:1b60cb
    ecx = edi + 8;
    if ((int32_t)ecx <= 0)
        goto loc_1b6139;
    if (esi >= 0x000003c0)
        goto loc_1b6139;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ax = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    ebp = memoryAGet16(ds, 0x3a1c52);
    eax &= 0x0000ffff;
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    ebp |= eax;
    if (ebp)
        goto loc_1b6140;
loc_1b6139: // 0160:1b6139
    eax = 0x00000001;
    goto loc_1b6142;
loc_1b6140: // 0160:1b6140
    eax = 0;
loc_1b6142: // 0160:1b6142
    if (!eax)
        goto loc_1b61f6;
    ecx = memoryAGet32(ds, esp + 12);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax <<= 2;
    eax -= ecx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1b6a) != 0x00000000)
        goto loc_1b61f6;
loc_1b6168: // 0160:1b6168
    ecx = memoryAGet32(ds, esp + 12);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax <<= 2;
    eax -= ecx;
    edi = 0x00000251;
    eax <<= 2;
    ebp = 0xfffffb00;
    memoryASet32(ds, eax + 3808094, edi);
    memoryASet32(ds, eax + 3808098, ebp);
    if ((int32_t)ebx >= 0)
        goto loc_1b61a3;
    ebx = memoryAGet32(ds, eax + 3808094);
    ebx = -ebx;
    memoryASet32(ds, eax + 3808094, ebx);
loc_1b61a3: // 0160:1b61a3
    ebx = memoryAGet32(ds, esp + 12);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 4 + 0x3a1b6a, 0x0000000a);
    if (memoryAGet32(ds, 0x3a1ef0) != 0x00000000)
        goto loc_1b62a3;
    eax = esi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_19e36c();
    edx = eax;
    eax = 0x00000011;
    ecx = 0x00000032;
    sub_1bda16();
    memoryASet32(ds, 0x3a1ef0, ecx);
    goto loc_1b62a3;
loc_1b61f6: // 0160:1b61f6
    ebx = edi + 1;
    if ((int32_t)ebx <= 0)
        goto loc_1b62a3;
    if (esi >= 0x000003c0)
        goto loc_1b62a3;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    eax <<= 4;
    edx = esi;
    eax -= ecx;
    edx = sar32(edx, 0x1f);
    ecx = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    eax += eax;
    eax += ecx;
    ecx = 0;
    cx = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    ecx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ecx;
    if (!eax)
        goto loc_1b62a3;
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000000)
        goto loc_1b62a3;
    eax = memoryAGet32(ds, esp + 12);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    edi <<= 9;
    edx = 0;
    memoryASet32(ds, esi * 4 + 0x3a1b5a, edi);
    memoryASet32(ds, esi * 4 + 0x3a1b62, edx);
    memoryASet32(ds, esi * 4 + 0x3a1b5e, edx);
    memoryASet32(ds, esi * 4 + 0x3a1b6a, edx);
loc_1b62a3: // 0160:1b62a3
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b62aa() // 0160:1b62aa +long
{
    esp -= 4;
    goto loc_1b62aa;
loc_1b36d0: // 0160:1b36d0
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11220 bytes
loc_1b62aa: // 0160:1b62aa
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ecx = eax;
    ebx = edx;
    edx = 0;
    esi = ebx + -4;
    memoryASet32(ds, esp, edx);
    if ((int32_t)esi <= 0)
        goto loc_1b6424;
    if (eax >= 0x000003c0)
        goto loc_1b6424;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b6424;
    ebx = memoryAGet32(ds, 0x3a1b62);
    if ((int32_t)ebx >= 0)
        goto loc_1b6368;
    eax = ebx;
    eax = -eax;
    memoryASet32(ds, 0x3a1b62, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000200)
        goto loc_1b6368;
    edx = memoryAGet32(ds, 0x3a1b62);
    edx += edx;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3a1b62, eax);
loc_1b6368: // 0160:1b6368
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    eax = memoryAGet32(ds, edx + 3808114);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    esi = eax + 2;
    if ((int32_t)esi <= 0)
        goto loc_1b63ff;
    if (ecx >= 0x000003c0)
        goto loc_1b63ff;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6402;
loc_1b63ff: // 0160:1b63ff
    ebx += 0x00000002;
loc_1b6402: // 0160:1b6402
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    esi = ebx;
    eax -= edx;
    esi <<= 9;
    memoryASet32(ds, eax * 4 + 0x3a1b5a, esi);
    memoryASet32(ds, eax * 4 + 0x3a1b72, esi);
loc_1b6424: // 0160:1b6424
    eax = memoryAGet32(ds, esp);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    if (memoryAGet32(ds, esi + 3808106) != 0x00000000)
        goto loc_1b6764;
    edx = memoryAGet32(ds, esi + 3808122);
    edx += 0x00000004;
    edi = 0x00000030;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax = memoryAGet32(ds, esi + 3808102);
    memoryASet32(ds, esi + 3808122, edx);
    eax <<= 9;
    memoryASet32(ds, esi + 3808086, memoryAGet32(ds, esi + 3808086) + eax);
    esi = ebx + -3;
    if ((int32_t)esi <= 0)
        goto loc_1b64de;
    if (ecx >= 0x000003c0)
        goto loc_1b64de;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6569;
loc_1b64de: // 0160:1b64de
    esi = ebx + -3;
    if ((int32_t)esi <= 0)
        goto loc_1b65d6;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edi = memoryAGet32(ds, eax * 4 + 0x3a1b66);
    edi += ecx;
    if (edi >= 0x000003c0)
        goto loc_1b65d6;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, eax + ebp + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b65d6;
loc_1b6569: // 0160:1b6569
    if (memoryAGet32(ds, 0x3a1eec) != 0x00000000)
        goto loc_1b659c;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    esi = 0x00000004;
    eax -= edx;
    memoryASet32(ds, 0x3a1eec, esi);
    edx = memoryAGet32(ds, eax * 4 + 0x3a1b66);
    edx = -edx;
    memoryASet32(ds, eax * 4 + 0x3a1b66, edx);
loc_1b659c: // 0160:1b659c
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 2;
    edx -= eax;
    eax = memoryAGet32(ds, edx * 4 + 0x3a1b6e);
    memoryASet32(ds, edx * 4 + 0x3a1b56, eax);
    eax = memoryAGet32(ds, edx * 4 + 0x3a1b72);
    memoryASet32(ds, edx * 4 + 0x3a1b5a, eax);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
loc_1b65d6: // 0160:1b65d6
    if ((int32_t)ebx <= 0)
        goto loc_1b66b9;
    if (ecx >= 0x000003c0)
        goto loc_1b66b9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ecx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edi = eax + eax;
    eax = esi + edi;
    esi = 0;
    si = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    esi &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_1b66b9;
    esi = ebx;
    esi <<= 4;
    esi -= ebx;
    esi <<= 6;
    esi += ecx;
loc_1b6656: // 0160:1b6656
    if ((int32_t)ebx <= 0)
        goto loc_1b6746;
    if (ecx >= 0x000003c0)
        goto loc_1b6746;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, edi + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b6746;
    esi -= 0x000003c0;
    ebx--;
    goto loc_1b6656;
loc_1b66b9: // 0160:1b66b9
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = ebx;
    esi <<= 4;
    edi = 0;
    esi -= ebx;
    eax += eax;
    esi <<= 6;
    memoryASet32(ds, esp + 4, eax);
    esi += ecx;
    ebp = memoryAGet32(ds, esp + 4);
loc_1b66dc: // 0160:1b66dc
    if ((int32_t)ebx <= 0)
        goto loc_1b6729;
    if (ecx >= 0x000003c0)
        goto loc_1b6729;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    eax += ebp;
    edx = 0;
    dx = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, esi + 3244656);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6730;
loc_1b6729: // 0160:1b6729
    eax = 0x00000001;
    goto loc_1b6732;
loc_1b6730: // 0160:1b6730
    eax = 0;
loc_1b6732: // 0160:1b6732
    if (!eax)
        goto loc_1b6745;
    edi++;
    if ((int32_t)edi >= (int32_t)0x00000003)
        goto loc_1b6745;
    esi += 0x000003c0;
    ebx++;
    goto loc_1b66dc;
loc_1b6745: // 0160:1b6745
    ebx--;
loc_1b6746: // 0160:1b6746
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    ebx <<= 9;
    memoryASet32(ds, eax * 4 + 0x3a1b5a, ebx);
    goto loc_1b68ef;
loc_1b6764: // 0160:1b6764
    if ((int32_t)memoryAGet32(ds, esi + 3808098) >= (int32_t)0x00000000)
        goto loc_1b6779;
    memoryASet32(ds, esi + 3808122, 0x00000010);
    goto loc_1b6783;
loc_1b6779: // 0160:1b6779
    memoryASet32(ds, esi + 3808122, 0x00000020);
loc_1b6783: // 0160:1b6783
    esi = ebx + -4;
    if ((int32_t)esi <= 0)
        goto loc_1b67f4;
    if (ecx >= 0x000003c0)
        goto loc_1b67f4;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b687d;
loc_1b67f4: // 0160:1b67f4
    ebx -= 0x00000004;
    if ((int32_t)ebx <= 0)
        goto loc_1b68ef;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    ecx += memoryAGet32(ds, eax * 4 + 0x3a1b66);
    if (ecx >= 0x000003c0)
        goto loc_1b68ef;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b68ef;
loc_1b687d: // 0160:1b687d
    if (memoryAGet32(ds, 0x3a1eec) != 0x00000000)
        goto loc_1b68d2;
    eax = memoryAGet32(ds, esp);
    ebx = eax;
    ebx <<= 2;
    ebx -= eax;
    ebx <<= 2;
    ebx -= eax;
    ebp = 0x00000004;
    ebx <<= 2;
    memoryASet32(ds, 0x3a1eec, ebp);
    eax = memoryAGet32(ds, ebx + 3808094);
    eax = -eax;
    memoryASet32(ds, ebx + 3808094, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_1b68d2;
    eax = memoryAGet32(ds, ebx + 3808094);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, ebx + 3808094, eax);
loc_1b68d2: // 0160:1b68d2
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, eax * 4 + 0x3a1b6e);
    memoryASet32(ds, eax * 4 + 0x3a1b56, edx);
loc_1b68ef: // 0160:1b68ef
    eax = memoryAGet32(ds, 0x3a1eec);
    if (!eax)
        goto loc_1b6901;
    edx = eax + -1;
    memoryASet32(ds, 0x3a1eec, edx);
loc_1b6901: // 0160:1b6901
    esp += 0x00000008;
    goto loc_1b36d0;
}
void sub_1b6909() // 0160:1b6909 +long
{
    esp -= 4;
    goto loc_1b6909;
loc_1b1253: // 0160:1b1253
    esp += 0x00000008;
    goto loc_1b23b3;
    // gap 4440 bytes
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17743 bytes
loc_1b6909: // 0160:1b6909
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0;
    ebx = memoryAGet32(ds, 0x3a1b56);
    memoryASet32(ds, esp + 4, edx);
    if (!ebx)
        goto loc_1b1253;
    ecx = 0x00000032;
    eax = memoryAGet32(ds, 0x3a1b66);
    esi = memoryAGet32(ds, 0x3a1b76);
    edi = memoryAGet32(ds, 0x3a1ef0);
    memoryASet32(ds, 0x3a1efc, ecx);
    esi--;
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, 0x3a1b76, esi);
    if (!edi)
        goto loc_1b6959;
    ebp = edi + -1;
    memoryASet32(ds, 0x3a1ef0, ebp);
loc_1b6959: // 0160:1b6959
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    eax = memoryAGet32(ds, esi + 3808086);
    memoryASet32(ds, esi + 3808110, eax);
    eax = memoryAGet32(ds, esi + 3808090);
    memoryASet32(ds, esi + 3808114, eax);
    edx = memoryAGet32(ds, esi + 3808086);
    eax = memoryAGet32(ds, esi + 3808094);
    ebx = memoryAGet32(ds, esi + 3808090);
    edx += eax;
    eax = memoryAGet32(ds, esi + 3808098);
    memoryASet32(ds, esi + 3808086, edx);
    ebx += eax;
    memoryASet32(ds, esi + 3808090, ebx);
    ecx = memoryAGet32(ds, esi + 3808098);
    ecx += memoryAGet32(ds, 0x3a1d44);
    eax = memoryAGet32(ds, esi + 3808086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 3808090);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esi + 3808102);
    ebx = edx;
    ebx <<= 4;
    edi = eax;
    ebx -= edx;
    edx = eax;
    ebx += ebx;
    eax = ebp;
    memoryASet32(ds, esi + 3808098, ecx);
    sub_1b5e88();
    edx = edi;
    eax = ebp;
    sub_1b62aa();
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1b6a4b;
    if ((int32_t)memoryAGet32(ds, esi + 3808118) <= (int32_t)0x000001f0)
        goto loc_1b6a4b;
    sub_1b5d3b();
    edx = memoryAGet32(ds, 0x3a1ef4);
    edx += 0x00000004;
    memoryASet32(ds, 0x3a1ef4, edx);
    if ((int32_t)edx <= (int32_t)0x00000064)
        goto loc_1b6a4b;
    if ((int32_t)edx >= (int32_t)0x00000124)
        goto loc_1b6a4b;
    eax = edx + 1820;
    memoryASet32(ds, esi + 3808122, eax);
loc_1b6a4b: // 0160:1b6a4b
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esp);
    esi <<= 2;
    if ((int32_t)eax <= 0)
        goto loc_1b6a82;
    eax = memoryAGet32(ds, esi + 3808122);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    eax <<= 4;
    eax += 0x003173e0;
    goto loc_1b6a9d;
loc_1b6a82: // 0160:1b6a82
    eax = memoryAGet32(ds, esi + 3808122);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    eax <<= 4;
    eax += 0x002d8920;
loc_1b6a9d: // 0160:1b6a9d
    memoryASet32(ds, esi + 3808126, eax);
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    if (memoryAGet32(ds, esi + 3808118) == 0x00000000)
        goto loc_1b6ad4;
    if (memoryAGet(ds, 0x3a9f71) == 0x00)
        goto loc_1b6b22;
    if ((int32_t)memoryAGet32(ds, esi + 3808118) > (int32_t)0x000001e4)
        goto loc_1b6b22;
loc_1b6ad4: // 0160:1b6ad4
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 3803582);
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    push32(0x00000000);
    ebx = 0x0000004b;
    edx = memoryAGet32(ds, esi * 4 + 0x3a1b5a);
    eax = memoryAGet32(ds, esi * 4 + 0x3a1b56);
    edx -= 0x00003000;
    eax -= 0x00001800;
    sub_1ae04a();
    eax = 0;
    memoryASet32(ds, esi * 4 + 0x3a1b56, eax);
loc_1b6b22: // 0160:1b6b22
    if (ebp > 0x000003c0)
        goto loc_1b6b36;
    if ((int32_t)edi <= (int32_t)0x00000182)
        goto loc_1b1253;
loc_1b6b36: // 0160:1b6b36
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    edx = 0;
    memoryASet32(ds, esi * 4 + 0x3a1b56, edx);
    if ((int32_t)edi <= (int32_t)0x00000182)
        goto loc_1b1253;
    eax = ebp;
    edx = 0x00000080;
    eax <<= 9;
    sub_1accfe();
    goto loc_1b1253;
}
void sub_1b6b6f() // 0160:1b6b6f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3a1b56) == 0x00000000)
        goto loc_1b6bb6;
    eax = memoryAGet32(ds, 0x3a1b5a);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -5;
    eax = memoryAGet32(ds, 0x3a1b56);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    edx = eax + -8;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, 0x3a1b7e);
    sub_19e029();
loc_1b6bb6: // 0160:1b6bb6
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b6bba() // 0160:1b6bba +long
{
    esp -= 4;
    goto loc_1b6bba;
loc_1b23b3: // 0160:1b23b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18432 bytes
loc_1b6bba: // 0160:1b6bba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, 0x3a1d94, edx);
    ecx = memoryAGet32(ds, eax + 3803518);
    edx = ecx;
    edx <<= 2;
    edx -= ecx;
    memoryASet32(ds, 0x1e3c4c, edx);
    edx = memoryAGet32(ds, eax + 3803498);
    edx += 0x00000400;
    memoryASet32(ds, 0x3a1d98, edx);
    edx = memoryAGet32(ds, 0x3a1d94);
    memoryASet32(ds, 0x3a1d8c, edx);
    edx = memoryAGet32(ds, 0x3a1d98);
    memoryASet32(ds, 0x3a1d90, edx);
    edx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, 0x3a1da4, edx);
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, 0x3a1da8, edx);
    edx = memoryAGet32(ds, 0x3a1d94);
    memoryASet32(ds, 0x3a1d9c, edx);
    edx = memoryAGet32(ds, 0x3a1d98);
    memoryASet32(ds, 0x3a1da0, edx);
    ecx = 0;
    esi = memoryAGet32(ds, eax + 3803518);
    memoryASet32(ds, 0x1e3a90, ecx);
    if ((int32_t)esi <= 0)
        goto loc_1b6c63;
    memoryASet32(ds, 0x1e3a84, 0x00040000);
    goto loc_1b6c6d;
loc_1b6c63: // 0160:1b6c63
    memoryASet32(ds, 0x1e3a84, 0x000c0000);
loc_1b6c6d: // 0160:1b6c6d
    if ((int32_t)ebx <= (int32_t)0x00000096)
        goto loc_1b6c7a;
    ebx = 0x00000096;
loc_1b6c7a: // 0160:1b6c7a
    eax = 0x00000400;
    edx = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x3a1d28, eax);
    eax = edx * 0x000000ac;
    ebx -= 0x00000018;
    ebx <<= 9;
    memoryASet32(ds, 0x3a1d34, ebx);
    memoryASet32(ds, eax + 3803474, 0x00000040);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edi = 0x00000100;
    ebp = 0x00000002;
    esi = 0;
    memoryASet32(ds, 0x1e3c5c, edi);
    memoryASet32(ds, 0x1e3c50, esi);
    memoryASet32(ds, 0x1e3c54, esi);
    edx = 0x00000011;
    memoryASet32(ds, eax + 3803470, esi);
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1c60);
    memoryASet32(ds, 0x3a1c78, edx);
    memoryASet32(ds, 0x3a1f00, ebx);
    memoryASet32(ds, 0x3a1e78, esi);
    memoryASet32(ds, 0x3a1d88, ebx);
    memoryASet32(ds, 0x3a1cec, ebx);
    eax -= 0x000000fa;
    memoryASet32(ds, 0x3a1d30, ebp);
    memoryASet32(ds, 0x3a1c60, eax);
    if ((int32_t)eax >= 0)
        goto loc_1b6d1b;
    memoryASet32(ds, 0x3a1c60, esi);
loc_1b6d1b: // 0160:1b6d1b
    sub_19f308();
    goto loc_1b23b3;
}
void sub_1b6d25() // 0160:1b6d25 +long
{
    esp -= 4;
    goto loc_1b6d25;
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18795 bytes
loc_1b6d25: // 0160:1b6d25
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x3a1c64);
    ebx = ebx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 3803530) != 0x00000000)
        goto loc_1b23b0;
    if (memoryAGet32(ds, ebx + 3803526) != 0x00000000)
        goto loc_1b23b0;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = ebx;
    ecx = edx;
    esi = 0;
    ecx <<= 4;
    eax += eax;
    ecx -= edx;
    memoryASet32(ds, esp, eax);
    ecx <<= 6;
    ebp = memoryAGet32(ds, esp);
    ecx += edi;
loc_1b6da1: // 0160:1b6da1
    if ((int32_t)ebx <= 0)
        goto loc_1b6df0;
    if (edi >= 0x000003c0)
        goto loc_1b6df0;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    eax += ebp;
    ax = memoryAGet16(ds, eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b6df7;
loc_1b6df0: // 0160:1b6df0
    eax = 0x00000001;
    goto loc_1b6df9;
loc_1b6df7: // 0160:1b6df7
    eax = 0;
loc_1b6df9: // 0160:1b6df9
    if (!eax)
        goto loc_1b6e0f;
    if ((int32_t)ebx >= (int32_t)0x0000016e)
        goto loc_1b6e0f;
    ecx += 0x000003c0;
    ebx++;
    esi++;
    goto loc_1b6da1;
loc_1b6e0f: // 0160:1b6e0f
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_1b23b0;
    eax = esi;
    sub_1b6bba();
    goto loc_1b23b0;
}
void sub_1b6e24() // 0160:1b6e24 +long
{
    esp -= 4;
    goto loc_1b6e24;
loc_1b23b4: // 0160:1b23b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19050 bytes
loc_1b6e24: // 0160:1b6e24
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = 0;
    ah = memoryAGet(ds, 0x3a9f85);
    memoryASet16(ds, 0x3a1c52, dx);
    if (ah)
        goto loc_1b6e49;
    if (memoryAGet(ds, 0x3a9f83) == 0x00)
        goto loc_1b6fbc;
loc_1b6e49: // 0160:1b6e49
    if ((int32_t)memoryAGet32(ds, 0x1e3a90) <= (int32_t)0x00000000)
        goto loc_1b6e59;
    esi = 0x00000001;
    goto loc_1b6e5e;
loc_1b6e59: // 0160:1b6e59
    esi = 0xffffffff;
loc_1b6e5e: // 0160:1b6e5e
    eax = memoryAGet32(ds, 0x1e3a90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_1b6f1a;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b6f1a;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b6f1a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b6f1a;
    ecx = memoryAGet32(ds, 0x1e3a90);
    esi <<= 11;
    ecx += esi;
    memoryASet32(ds, 0x1e3a90, ecx);
    goto loc_1b6f2b;
loc_1b6f1a: // 0160:1b6f1a
    ebx = memoryAGet32(ds, 0x1e3a90);
    esi <<= 4;
    ebx += esi;
    memoryASet32(ds, 0x1e3a90, ebx);
loc_1b6f2b: // 0160:1b6f2b
    if (memoryAGet32(ds, 0x1e00a4) != 0x00000000)
        goto loc_1b6fbc;
    ebx = memoryAGet32(ds, 0x1e3a84);
    ebx &= 0x001fffff;
    if ((int32_t)ebx <= (int32_t)0x00100000)
        goto loc_1b6f80;
    if ((int32_t)ebx >= (int32_t)0x00180000)
        goto loc_1b6f80;
    edi = memoryAGet32(ds, 0x1e3a90);
    if ((int32_t)edi <= 0)
        goto loc_1b6f80;
    eax = edi;
    eax <<= 3;
    eax -= edi;
    eax <<= 2;
    edx = edi + eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b6f80: // 0160:1b6f80
    if ((int32_t)ebx < 0)
        goto loc_1b6f95;
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_1b6fbc;
    if ((int32_t)memoryAGet32(ds, 0x1e3a90) >= (int32_t)0x00000000)
        goto loc_1b6fbc;
loc_1b6f95: // 0160:1b6f95
    edx = memoryAGet32(ds, 0x1e3a90);
    eax = edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b6fbc: // 0160:1b6fbc
    if (memoryAGet(ds, 0x3a9f80) == 0x00)
        goto loc_1b6fe5;
    eax = memoryAGet32(ds, 0x3a1d34);
    edx = memoryAGet32(ds, 0x3a1d28);
    eax -= 0x00000a00;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b6fe5;
    ebx = edx + -512;
    memoryASet32(ds, 0x3a1d28, ebx);
loc_1b6fe5: // 0160:1b6fe5
    if (memoryAGet(ds, 0x3a9f88) == 0x00)
        goto loc_1b23b4;
    eax = memoryAGet32(ds, 0x3a1d34);
    ecx = memoryAGet32(ds, 0x3a1d28);
    eax += 0x00000a00;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1b23b4;
    esi = ecx + 512;
    memoryASet32(ds, 0x3a1d28, esi);
    goto loc_1b23b4;
}
void sub_1b701b() // 0160:1b701b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x3a1da4);
    memoryASet32(ds, 0x3a1d30, edx);
    edx = memoryAGet32(ds, 0x3a1d8c);
    edx -= ebx;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, edx + 3803486, eax);
    edx = memoryAGet32(ds, 0x3a1d90);
    esi = memoryAGet32(ds, 0x3a1da8);
    edx -= esi;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    eax = edi * 0x000000ac;
    memoryASet32(ds, eax + 3803490, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 3803486) <= (int32_t)0x00000000)
        goto loc_1b70b5;
    memoryASet32(ds, eax + 3803518, 0x00000001);
    goto loc_1b70bf;
loc_1b70b5: // 0160:1b70b5
    memoryASet32(ds, eax + 3803518, 0xffffffff);
loc_1b70bf: // 0160:1b70bf
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803526, 0x00000001);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 3803626, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, eax + 3803630, edx);
    ebp = 0x00000001;
    memoryASet32(ds, 0x3a1d8c, edx);
    memoryASet32(ds, 0x3a1d90, edx);
    memoryASet32(ds, 0x3a1d94, edx);
    memoryASet32(ds, 0x3a1d98, edx);
    memoryASet32(ds, 0x3a1d9c, edx);
    memoryASet32(ds, 0x3a1da0, edx);
    memoryASet32(ds, 0x3a1f00, edx);
    memoryASet32(ds, 0x3a1e78, edx);
    memoryASet32(ds, 0x3a1c78, edi);
    memoryASet32(ds, 0x3a1e54, ebp);
    memoryASet32(ds, 0x3a1cec, edx);
    memoryASet32(ds, 0x3a1d88, edx);
    sub_1a0311();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7152() // 0160:1b7152 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x1e3a84);
    ebx &= 0x001fffff;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_1b7186;
    eax = 0;
loc_1b7186: // 0160:1b7186
    if ((int32_t)eax < (int32_t)0x00000007)
        goto loc_1b7190;
    eax = 0x00000007;
loc_1b7190: // 0160:1b7190
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, edx + 3803518) >= (int32_t)0x00000000)
        goto loc_1b71ac;
    edx = 0x00000007;
    edx -= eax;
    eax = edx;
loc_1b71ac: // 0160:1b71ac
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, edx + 3803474, 0x00000042);
    edx = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    eax <<= 4;
    ebx = eax + 14144;
    memoryASet32(ds, edx + 3803470, ebx);
    if ((int32_t)eax < (int32_t)0x00000040)
        goto loc_1b71ea;
    memoryASet32(ds, 0x1e0a76, 0xfffffff4);
    goto loc_1b71f1;
loc_1b71ea: // 0160:1b71ea
    eax = 0;
    memoryASet32(ds, 0x1e0a76, eax);
loc_1b71f1: // 0160:1b71f1
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803630, 0x0000000a);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7208() // 0160:1b7208 +long
{
    esp -= 4;
    goto loc_1b7208;
loc_1b23b0: // 0160:1b23b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20046 bytes
loc_1b7208: // 0160:1b7208
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    if ((int32_t)memoryAGet32(ds, 0x3a1d30) < (int32_t)0x00000002)
        goto loc_1b23b0;
    eax = memoryAGet32(ds, 0x3a1d28);
    ebx = memoryAGet32(ds, 0x1e3aac);
    memoryASet32(ds, esp, eax);
    if (ebx)
        goto loc_1b7235;
    sub_1b6e24();
loc_1b7235: // 0160:1b7235
    edx = 0;
    ecx = memoryAGet32(ds, 0x1e3c54);
    memoryASet16(ds, 0x3a1c52, dx);
    if (ecx)
        goto loc_1b7356;
    eax = memoryAGet32(ds, 0x3a1d28);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3a1d34))
        goto loc_1b7356;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b7315;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b7315;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1b7315;
    sub_1b701b();
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 3803486, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    memoryASet32(ds, eax + 3803490, ebp);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1da4);
    memoryASet32(ds, eax + 3803494, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1da8);
    memoryASet32(ds, eax + 3803498, edx);
    goto loc_1b23b0;
loc_1b7315: // 0160:1b7315
    eax = memoryAGet32(ds, 0x1e3c50);
    edi = memoryAGet32(ds, 0x3a1d28);
    ebp = memoryAGet32(ds, 0x1e3c50);
    edi += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    edx = memoryAGet32(ds, 0x3a1d34);
    ebp += eax;
    memoryASet32(ds, 0x3a1d28, edi);
    memoryASet32(ds, 0x1e3c50, ebp);
    if ((int32_t)edi < (int32_t)edx)
        goto loc_1b7356;
    ebx = 0x00000001;
    memoryASet32(ds, 0x3a1d28, edx);
    memoryASet32(ds, 0x1e3c54, ebx);
loc_1b7356: // 0160:1b7356
    eax = memoryAGet32(ds, 0x1e3a84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax &= 0x00000fff;
    ecx = 0x00000001;
    ebx = eax + 1024;
    memoryASet32(ds, 0x3a1d88, ecx);
    edi = eax;
    ah = memoryAGet(ds, 0x3a9f71);
    ebx &= 0x00000fff;
    if (!ah)
        goto loc_1b7437;
    eax = memoryAGet32(ds, 0x3a1d90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b7420;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (eax >= 0x000003c0)
        goto loc_1b7420;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = esi;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b7427;
loc_1b7420: // 0160:1b7420
    eax = 0x00000001;
    goto loc_1b7429;
loc_1b7427: // 0160:1b7427
    eax = 0;
loc_1b7429: // 0160:1b7429
    if (!eax)
        goto loc_1b7437;
    sub_1b701b();
    goto loc_1b7750;
loc_1b7437: // 0160:1b7437
    eax = memoryAGet32(ds, 0x3a1d28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    if (eax)
        goto loc_1b7454;
    ecx = 0x00000200;
loc_1b7454: // 0160:1b7454
    eax = memoryAGet32(ds, 0x1e3c58);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, eax * 4 + 0x1d7ff0);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    eax = memoryAGet32(ds, 0x1e3c58);
    eax += 0x00007000;
    esi = memoryAGet32(ds, 0x1e3c5c);
    eax &= 0x001fffff;
    edx <<= 8;
    memoryASet32(ds, 0x1e3c58, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx = eax;
    if ((int32_t)esi >= (int32_t)0x00000800)
        goto loc_1b74b5;
    eax = esi + 2;
    memoryASet32(ds, 0x1e3c5c, eax);
loc_1b74b5: // 0160:1b74b5
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = memoryAGet32(ds, ebx * 4 + 0x1d7ff0);
    memoryASet32(ds, 0x3a1da4, eax);
    eax = memoryAGet32(ds, 0x3a1d90);
    edx <<= 9;
    memoryASet32(ds, 0x3a1da8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x3a1d28);
    edx += ecx;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)eax;
    ecx = eax;
    eax = memoryAGet32(ds, 0x3a1d94);
    edx = memoryAGet32(ds, edi * 4 + 0x1d7ff0);
    eax += esi;
    edx <<= 9;
    memoryASet32(ds, 0x3a1d8c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)ecx;
    edx = memoryAGet32(ds, 0x3a1d98);
    eax += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x3a1d90, eax);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0;
    memoryASet16(ds, 0x3a1c52, cx);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b75f9;
    eax = memoryAGet32(ds, 0x3a1d8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (eax >= 0x000003c0)
        goto loc_1b75f9;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1b75f9;
    eax = memoryAGet32(ds, 0x3c0f24);
    dl = memoryAGet(ds, 0x3a9f83);
    memoryASet32(ds, 0x1e3a84, eax);
    if (dl)
        goto loc_1b75b0;
    if (memoryAGet(ds, 0x3a9f85) == 0x00)
        goto loc_1b75b8;
loc_1b75b0: // 0160:1b75b0
    memoryASet32(ds, 0x1e3a90, -memoryAGet32(ds, 0x1e3a90));
    goto loc_1b75ce;
loc_1b75b8: // 0160:1b75b8
    edx = memoryAGet32(ds, 0x1e3a90);
    edx = -edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x1e3a90, eax);
loc_1b75ce: // 0160:1b75ce
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3a1d28, eax);
    eax = memoryAGet32(ds, 0x3a1da4);
    memoryASet32(ds, 0x3a1d8c, eax);
    eax = memoryAGet32(ds, 0x3a1da8);
    cl = memoryAGet(ds, 0x3a9f71);
    memoryASet32(ds, 0x3a1d90, eax);
    if (!cl)
        goto loc_1b75f9;
    sub_1b701b();
loc_1b75f9: // 0160:1b75f9
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    esi = 0x0000ffff;
    edx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet16(ds, 0x3a1c52, si);
    memoryASet32(ds, eax + 3803494, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, eax + 3803498, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d8c);
    memoryASet32(ds, eax + 3803502, edx);
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x3a1d90);
    memoryASet32(ds, eax + 3803506, edx);
    edx = memoryAGet32(ds, ebx * 4 + 0x1d7ff0);
    ebx = memoryAGet32(ds, 0x3a1d44);
    edx <<= 9;
    edx = (int32_t)edx * (int32_t)ebx;
    memoryASet32(ds, 0x3a1cec, 0x00000001);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<6) & 0x80000000);
    edx <<= 7;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x07);
    ecx = memoryAGet32(ds, 0x1e3a90);
    ecx += eax;
    eax = memoryAGet32(ds, 0x1e3a84);
    memoryASet32(ds, 0x3c0f24, eax);
    eax = memoryAGet32(ds, 0x3a1d28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<10) & 0x80000000);
    edx <<= 11;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0b);
    memoryASet32(ds, 0x1e3a90, ecx);
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_1b76cc;
    ebx = 0x00000004;
    goto loc_1b76d6;
loc_1b76cc: // 0160:1b76cc
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_1b76d6;
    ebx = 0x00000032;
loc_1b76d6: // 0160:1b76d6
    edx = memoryAGet32(ds, 0x1e3a90);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = memoryAGet32(ds, 0x1e3a84);
    esi += eax;
    eax = memoryAGet32(ds, 0x1e3a90);
    memoryASet32(ds, 0x1e3a84, esi);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1b771e;
    eax = 0x00000008;
loc_1b771e: // 0160:1b771e
    edx = memoryAGet32(ds, 0x1e3a90);
    edi = memoryAGet32(ds, eax * 4 + 0x1e3c28);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    ebp = memoryAGet32(ds, 0x3a1d30);
    memoryASet32(ds, 0x1e3a90, eax);
    if (ebp != 0x00000003)
        goto loc_1b7750;
    sub_1b7152();
loc_1b7750: // 0160:1b7750
    eax = memoryAGet32(ds, 0x3a1c64) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 3803494);
    if ((int32_t)ebx < 0)
        goto loc_1b777c;
    if ((int32_t)ebx > (int32_t)0x00078000)
        goto loc_1b777c;
    if ((int32_t)memoryAGet32(ds, eax + 3803498) <= (int32_t)0x0002fc00)
        goto loc_1b23b0;
loc_1b777c: // 0160:1b777c
    sub_1b5135();
    goto loc_1b23b0;
}
void sub_1b77c2() // 0160:1b77c2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    if (eax)
        goto loc_1b77d8;
    ecx = 0;
    goto loc_1b7848;
loc_1b77d8: // 0160:1b77d8
    if ((int32_t)eax >= 0)
        goto loc_1b77dc;
    edi = -edi;
loc_1b77dc: // 0160:1b77dc
    ebx = 0x0000000e;
    edx = 0x00008000;
    eax = 0x40000000;
    ecx = 0x0000000f;
    esi = 0x0000001c;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_1b77fc: // 0160:1b77fc
    if ((int32_t)ebx < 0)
        goto loc_1b7846;
    if (edi == eax)
        goto loc_1b7846;
    esi = 0x00000001;
    cl = bl;
    ebp = edx;
    esi <<= cl;
    cl = memoryAGet(ds, esp + 4);
    ebp <<= cl;
    ecx = ebp;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_1b7821;
    eax -= ebp;
    edx -= esi;
    goto loc_1b7825;
loc_1b7821: // 0160:1b7821
    eax += ebp;
    edx += esi;
loc_1b7825: // 0160:1b7825
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 4);
    ebx--;
    ebp--;
    esi <<= cl;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebp);
    ecx -= 0x00000002;
    eax += esi;
    memoryASet32(ds, esp, ecx);
    goto loc_1b77fc;
loc_1b7846: // 0160:1b7846
    ecx = edx;
loc_1b7848: // 0160:1b7848
    eax = ecx;
    esp += 0x00000008;
    goto loc_1ba80c;
    // gap 12218 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7852() // 0160:1b7852 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    sub_1ad5cb();
    memoryASet32(ds, 0x39eac0, edx);
    memoryASet32(ds, 0x39ea8c, edx);
    edx = pop32();
    esp += 4;
}
void sub_1b7868() // 0160:1b7868 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    edi = edx;
    esi = 0x7fffffff;
    ebx = 0;
loc_1b7878: // 0160:1b7878
    edx = memoryAGet32(ds, ebx + 3802606);
    if (!edx)
        goto loc_1b78ba;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebp;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 3802610);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = edi;
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_1b78ba;
    esi = eax;
loc_1b78ba: // 0160:1b78ba
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b7878;
    eax = esi;
    goto loc_1b7a47;
    // gap 379 bytes
loc_1b7a47: // 0160:1b7a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b78cc() // 0160:1b78cc +long
{
    esp -= 4;
    goto loc_1b78cc;
loc_1b78c5: // 0160:1b78c5
    eax = esi;
    goto loc_1b7a47;
loc_1b78cc: // 0160:1b78cc
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    edi = edx;
    esi = 0x7fffffff;
    ebx = 0;
loc_1b78dc: // 0160:1b78dc
    edx = memoryAGet32(ds, ebx + 3806618);
    if (!edx)
        goto loc_1b791e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebp;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 3806622);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = edi;
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_1b791e;
    esi = eax;
loc_1b791e: // 0160:1b791e
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_1b78dc;
    goto loc_1b78c5;
    // gap 287 bytes
loc_1b7a47: // 0160:1b7a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7928() // 0160:1b7928 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    esi = 0x7fffffff;
    edx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edx);
loc_1b7943: // 0160:1b7943
    cl = memoryAGet(ds, esp + 4);
    eax = 0x00000001;
    eax <<= cl;
    if (!(ebp & eax))
        goto loc_1b7995;
    edx = memoryAGet32(ds, ebx + 3803494);
    if (!edx)
        goto loc_1b7995;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = edi;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_1b7995;
    esi = eax;
loc_1b7995: // 0160:1b7995
    ecx = memoryAGet32(ds, esp + 4);
    ecx++;
    ebx += 0x000000ac;
    memoryASet32(ds, esp + 4, ecx);
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b7943;
    eax = esi;
    goto loc_1b7b72;
    // gap 450 bytes
loc_1b7b72: // 0160:1b7b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7ae4() // 0160:1b7ae4 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    push32(edx);
    edi = ebx;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    ebx = 0;
    ebp = eax;
    goto loc_1b7b6b;
loc_1b7b06: // 0160:1b7b06
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == ebp)
        goto loc_1b7b64;
    edx = memoryAGet32(ds, ebx + 3803494);
    if (!edx)
        goto loc_1b7b64;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, esp + 4);
    esi -= eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    edx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += esi;
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1b7b64;
    eax = memoryAGet32(ds, ebx + 3803570);
    goto loc_1b7b72;
loc_1b7b64: // 0160:1b7b64
    ebx += 0x000000ac;
    ecx++;
loc_1b7b6b: // 0160:1b7b6b
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b7b06;
    eax = 0;
loc_1b7b72: // 0160:1b7b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7c0e() // 0160:1b7c0e +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x7fffffff;
    sub_1b7928();
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_1b7c25;
    ecx = eax;
loc_1b7c25: // 0160:1b7c25
    edx = edi;
    eax = esi;
    sub_1b7868();
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_1b7c34;
    ecx = eax;
loc_1b7c34: // 0160:1b7c34
    eax = esi;
    eax = (int32_t)eax * (int32_t)esi;
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_1b7c3f;
    ecx = eax;
loc_1b7c3f: // 0160:1b7c3f
    eax = 0x000003c0;
    eax -= esi;
    esi = eax;
    esi = (int32_t)esi * (int32_t)eax;
    if ((int32_t)esi >= (int32_t)ecx)
        goto loc_1b7c51;
    ecx = esi;
loc_1b7c51: // 0160:1b7c51
    esi = 0x0000017e;
    esi -= edi;
    esi = (int32_t)esi * (int32_t)esi;
    if ((int32_t)esi >= (int32_t)ecx)
        goto loc_1b7c61;
    ecx = esi;
loc_1b7c61: // 0160:1b7c61
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7c85() // 0160:1b7c85 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x1e3c74) * 0x00006255;
    esi = memoryAGet32(ds, 0x1e3c78);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    edx = (int32_t)edx * (int32_t)ebx;
    edx = sar32(edx, 0x10);
    memoryASet32(ds, 0x1e3c74, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b7cb9() // 0160:1b7cb9 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    if (ecx)
        goto loc_1b7d90;
    ecx = memoryAGet32(ds, 0x3c1088);
    if (ecx == 0x00000006)
        goto loc_1b7cd4;
    if (ecx != 0x00000027)
        goto loc_1b7cd9;
loc_1b7cd4: // 0160:1b7cd4
    ebx = 0x00000011;
loc_1b7cd9: // 0160:1b7cd9
    if ((int32_t)ebx >= (int32_t)0x00000011)
        goto loc_1b7ce3;
    ebx = 0x00000011;
loc_1b7ce3: // 0160:1b7ce3
    if ((int32_t)ebx <= (int32_t)0x00000096)
        goto loc_1b7cf0;
    ebx = 0x00000095;
loc_1b7cf0: // 0160:1b7cf0
    ecx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    if (edx == memoryAGet32(ds, ecx + 3803518))
        goto loc_1b7d20;
    if ((int32_t)edx >= 0)
        goto loc_1b7d0f;
    memoryASet(ds, 0x3a9f83, 0x01);
    goto loc_1b7d16;
loc_1b7d0f: // 0160:1b7d0f
    memoryASet(ds, 0x3a9f85, 0x01);
loc_1b7d16: // 0160:1b7d16
    memoryASet32(ds, 0x3c1048, 0x00000003);
loc_1b7d20: // 0160:1b7d20
    ecx = memoryAGet32(ds, 0x3c1048);
    ecx &= 0x00000003;
    memoryASet32(ds, 0x3c1048, ecx);
    if (ecx)
        goto loc_1b7d7e;
    edi = memoryAGet32(ds, 0x3a1c84);
    if (eax != edi)
        goto loc_1b7d66;
    if ((int32_t)ebx > (int32_t)memoryAGet32(ds, 0x3a1c78))
        goto loc_1b7d4c;
loc_1b7d43: // 0160:1b7d43
    eax = 0x00000001;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1b7d4c: // 0160:1b7d4c
    cl = 0x01;
    esi = memoryAGet32(ds, 0x3c1088);
    memoryASet(ds, 0x3a9f71, cl);
    if (esi == 0x00000006)
        goto loc_1b7d43;
    if (esi != 0x00000027)
        goto loc_1b7d7e;
    goto loc_1b7d43;
loc_1b7d66: // 0160:1b7d66
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1b7d6f;
    memoryASet(ds, 0x3a9f80, 0x01);
loc_1b7d6f: // 0160:1b7d6f
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3a1c84))
        goto loc_1b7d7e;
    memoryASet(ds, 0x3a9f88, 0x01);
loc_1b7d7e: // 0160:1b7d7e
    ebp = memoryAGet32(ds, 0x3c1048);
    if (!ebp)
        goto loc_1b7d90;
    eax = ebp + -1;
    memoryASet32(ds, 0x3c1048, eax);
loc_1b7d90: // 0160:1b7d90
    eax = 0;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b7d96() // 0160:1b7d96 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3a1f04);
    eax += 0x0000000a;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_1b7e4e;
loc_1b7dae: // 0160:1b7dae
    eax = memoryAGet32(ds, 0x3a1f04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x3aa13c))
        goto loc_1b7e49;
    ecx = memoryAGet32(ds, 0x3a1efc);
    if (!ecx)
        goto loc_1b7dd2;
    esi = ecx + -1;
    memoryASet32(ds, 0x3a1efc, esi);
loc_1b7dd2: // 0160:1b7dd2
    edi = memoryAGet32(ds, 0x3a1c60);
    if (!edi)
        goto loc_1b7e12;
    if (memoryAGet32(ds, 0x3a1d88) != 0x00000000)
        goto loc_1b7e12;
    if (memoryAGet32(ds, 0x3a1d74) != 0x00000000)
        goto loc_1b7e12;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1b7e12;
    if (memoryAGet32(ds, 0x1e3658) == 0x00000046)
        goto loc_1b7e12;
    if (memoryAGet32(ds, 0x3a1e78) != 0x00000000)
        goto loc_1b7e12;
    esi = edi + -1;
    memoryASet32(ds, 0x3a1c60, esi);
loc_1b7e12: // 0160:1b7e12
    edi = memoryAGet32(ds, 0x3a1c6c);
    if (!edi)
        goto loc_1b7e25;
    ebp = edi + -1;
    memoryASet32(ds, 0x3a1c6c, ebp);
loc_1b7e25: // 0160:1b7e25
    sub_19ca7d();
    sub_198a6a();
    sub_197e44();
    sub_19ddd3();
    sub_19c3f9();
    memoryASet32(ds, 0x3a1f04, memoryAGet32(ds, 0x3a1f04) + 1);
    goto loc_1b7dae;
loc_1b7e49: // 0160:1b7e49
    sub_19b794();
loc_1b7e4e: // 0160:1b7e4e
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b7e53() // 0160:1b7e53 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if ((int32_t)memoryAGet32(ds, 0x3c103c) < (int32_t)0x00000032)
        goto loc_1b808f;
    edi = 0x00000032;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    esi -= edx;
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_1b7e7e;
    esi += edi;
loc_1b7e7e: // 0160:1b7e7e
    if ((int32_t)esi >= (int32_t)0x00000032)
        goto loc_1b7e88;
    esi = 0x00000032;
loc_1b7e88: // 0160:1b7e88
    if ((int32_t)esi <= (int32_t)0x000000fa)
        goto loc_1b7e95;
    esi = 0x000000fa;
loc_1b7e95: // 0160:1b7e95
    if (esi != memoryAGet32(ds, 0x3a1c88))
        goto loc_1b7ea5;
    if (ebx == memoryAGet32(ds, 0x3a1d84))
        goto loc_1b7eb3;
loc_1b7ea5: // 0160:1b7ea5
    if (ecx == 0x00000024)
        goto loc_1b7f12;
    if (ecx == 0x00000004)
        goto loc_1b7f12;
loc_1b7eb3: // 0160:1b7eb3
    eax = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    edi = memoryAGet32(ds, eax + 3803542);
    if (ecx == edi)
        goto loc_1b7f01;
    if (ecx != 0x00000024)
        goto loc_1b7ed1;
    if (edi == 0x00000036)
        goto loc_1b7f01;
loc_1b7ed1: // 0160:1b7ed1
    if (ecx != 0x00000027)
        goto loc_1b7ee9;
    eax = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) == 0x0000002f)
        goto loc_1b7f01;
loc_1b7ee9: // 0160:1b7ee9
    if (ecx != 0x00000033)
        goto loc_1b7f12;
    eax = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 3803542) != 0x0000003e)
        goto loc_1b7f12;
loc_1b7f01: // 0160:1b7f01
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x1e3c7c, edx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1b7f12: // 0160:1b7f12
    memoryASet32(ds, 0x1e3c7c, memoryAGet32(ds, 0x1e3c7c) + 1);
    if (memoryAGet(ds, 0x1e3c7c) & 0x0f)
        goto loc_1b808f;
    if (ecx < 0x00000019)
        goto loc_1b7f89;
    if (ecx <= 0x00000019)
        goto loc_1b7fd7;
    if (ecx < 0x00000027)
        goto loc_1b7f62;
    if (ecx <= 0x00000027)
        goto loc_1b7fce;
    if (ecx < 0x00000033)
        goto loc_1b7f54;
    if (ecx <= 0x00000033)
        goto loc_1b7fe0;
    if (ecx == 0x0000003d)
        goto loc_1b7ffb;
    goto loc_1b8002;
loc_1b7f54: // 0160:1b7f54
    if (ecx == 0x0000002b)
        goto loc_1b7fbc;
    goto loc_1b8002;
loc_1b7f62: // 0160:1b7f62
    if (ecx < 0x00000024)
        goto loc_1b7f7b;
    if (ecx <= 0x00000024)
        goto loc_1b7fc5;
    flags.zero = ecx == 0x00000026;
loc_1b7f70: // 0160:1b7f70
    if (flags.zero)
        goto loc_1b7fe9;
    goto loc_1b8002;
loc_1b7f7b: // 0160:1b7f7b
    if (ecx == 0x00000022)
        goto loc_1b7fd7;
    goto loc_1b8002;
loc_1b7f89: // 0160:1b7f89
    if (ecx < 0x0000000b)
        goto loc_1b7faa;
    if (ecx <= 0x0000000b)
        goto loc_1b7fe0;
    if (ecx < 0x00000014)
        goto loc_1b7fa0;
    if (ecx <= 0x00000014)
        goto loc_1b7ff2;
    flags.zero = ecx == 0x00000016;
    goto loc_1b7f70;
loc_1b7fa0: // 0160:1b7fa0
    if (ecx == 0x00000010)
        goto loc_1b7ff2;
    goto loc_1b8002;
loc_1b7faa: // 0160:1b7faa
    if (ecx < 0x00000004)
        goto loc_1b7fb8;
    if (ecx <= 0x00000004)
        goto loc_1b7fc5;
    if (ecx == 0x00000006)
        goto loc_1b7fce;
    goto loc_1b8002;
loc_1b7fb8: // 0160:1b7fb8
    if (ecx)
        goto loc_1b8002;
loc_1b7fbc: // 0160:1b7fbc
    memoryASet(ds, 0x3a9f73, 0x01);
    goto loc_1b8002;
loc_1b7fc5: // 0160:1b7fc5
    memoryASet(ds, 0x3a9f74, 0x01);
    goto loc_1b8002;
loc_1b7fce: // 0160:1b7fce
    memoryASet(ds, 0x3a9f75, 0x01);
    goto loc_1b8002;
loc_1b7fd7: // 0160:1b7fd7
    memoryASet(ds, 0x3a9f76, 0x01);
    goto loc_1b8002;
loc_1b7fe0: // 0160:1b7fe0
    memoryASet(ds, 0x3a9f77, 0x01);
    goto loc_1b8002;
loc_1b7fe9: // 0160:1b7fe9
    memoryASet(ds, 0x3a9f78, 0x01);
    goto loc_1b8002;
loc_1b7ff2: // 0160:1b7ff2
    memoryASet(ds, 0x3a9f79, 0x01);
    goto loc_1b8002;
loc_1b7ffb: // 0160:1b7ffb
    memoryASet(ds, 0x3a9f7b, 0x01);
loc_1b8002: // 0160:1b8002
    if (ecx == 0x00000004)
        goto loc_1b8010;
    if (ecx != 0x00000024)
        goto loc_1b808f;
loc_1b8010: // 0160:1b8010
    if (esi == memoryAGet32(ds, 0x3a1c88))
        goto loc_1b8073;
    if (esi < 0x00000096)
        goto loc_1b803a;
    if (esi <= 0x00000096)
        goto loc_1b805a;
    if (esi < 0x000000c8)
        goto loc_1b8073;
    if (esi <= 0x000000c8)
        goto loc_1b8063;
    if (esi == 0x000000fa)
        goto loc_1b806c;
    goto loc_1b8073;
loc_1b803a: // 0160:1b803a
    if (esi < 0x00000032)
        goto loc_1b8073;
    if (esi <= 0x00000032)
        goto loc_1b8048;
    if (esi == 0x00000064)
        goto loc_1b8051;
    goto loc_1b8073;
loc_1b8048: // 0160:1b8048
    memoryASet(ds, 0x3a9f3a, 0x01);
    goto loc_1b8073;
loc_1b8051: // 0160:1b8051
    memoryASet(ds, 0x3a9f3b, 0x01);
    goto loc_1b8073;
loc_1b805a: // 0160:1b805a
    memoryASet(ds, 0x3a9f3c, 0x01);
    goto loc_1b8073;
loc_1b8063: // 0160:1b8063
    memoryASet(ds, 0x3a9f3d, 0x01);
    goto loc_1b8073;
loc_1b806c: // 0160:1b806c
    memoryASet(ds, 0x3a9f3e, 0x01);
loc_1b8073: // 0160:1b8073
    if (ebx == memoryAGet32(ds, 0x3a1d84))
        goto loc_1b808f;
    if (!ebx)
        goto loc_1b8088;
    memoryASet(ds, 0x3a9f44, 0x01);
    goto loc_1b808f;
loc_1b8088: // 0160:1b8088
    memoryASet(ds, 0x3a9f45, 0x01);
loc_1b808f: // 0160:1b808f
    eax = 0;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b8095() // 0160:1b8095 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    al &= 0xfc;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1b80a5;
loc_1b809e: // 0160:1b809e
    edx = 0;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b80a5: // 0160:1b80a5
    if ((int32_t)eax > (int32_t)0x000003b8)
        goto loc_1b809e;
    ecx = 0x00318270;
    ecx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += ecx;
loc_1b80bf: // 0160:1b80bf
    ebx = memoryAGet32(ds, eax + -4);
    if (ebx != 0x80808080)
        goto loc_1b80e4;
    if (ebx != memoryAGet32(ds, eax))
        goto loc_1b80e4;
    if (ebx != memoryAGet32(ds, eax + -8))
        goto loc_1b80e4;
    if (ebx != memoryAGet32(ds, eax + 4))
        goto loc_1b80e4;
    if ((int32_t)edx <= 0)
        goto loc_1b80e4;
    edx--;
    eax -= 0x000003c0;
    goto loc_1b80bf;
loc_1b80e4: // 0160:1b80e4
    if (edx)
        goto loc_1b809e;
    edx = 0x00000001;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b80f2() // 0160:1b80f2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    al &= 0xfc;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_1b8102;
loc_1b80fc: // 0160:1b80fc
    eax = 0;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b8102: // 0160:1b8102
    if ((int32_t)eax > (int32_t)0x000003b8)
        goto loc_1b80fc;
    esi = 0x00318270;
    esi += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += esi;
loc_1b811c: // 0160:1b811c
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx != 0x80808080)
        goto loc_1b8138;
    if (ecx != memoryAGet32(ds, eax))
        goto loc_1b8138;
    if ((int32_t)edx <= 0)
        goto loc_1b8138;
    edx--;
    ebx++;
    eax -= 0x000003c0;
    goto loc_1b811c;
loc_1b8138: // 0160:1b8138
    eax = ebx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b813e() // 0160:1b813e +long
{
    esp -= 4;
    goto loc_1b813e;
loc_1b7a44: // 0160:1b7a44
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1777 bytes
loc_1b813e: // 0160:1b813e
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebx = eax;
    edi = edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ecx != eax)
        goto loc_1b8176;
loc_1b816f: // 0160:1b816f
    eax = 0;
    goto loc_1b7a44;
loc_1b8176: // 0160:1b8176
    ebx = ebx * 0x000000ac;
    memoryASet32(ds, esp + 4, eax);
    ecx = 0;
    edx = memoryAGet32(ds, ebx + 3803494);
    ebp = memoryAGet32(ds, ebx + 3803498);
    memoryASet32(ds, esp, edx);
    ebx = 0;
    goto loc_1b81f2;
loc_1b8195: // 0160:1b8195
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, esp + 4))
        goto loc_1b81eb;
    esi = memoryAGet32(ds, ebx + 3803494);
    if (!esi)
        goto loc_1b81eb;
    edx = memoryAGet32(ds, esp);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    edx = ebp;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    esi += eax;
    if ((int32_t)esi < (int32_t)edi)
        goto loc_1b816f;
loc_1b81eb: // 0160:1b81eb
    ebx += 0x000000ac;
    ecx++;
loc_1b81f2: // 0160:1b81f2
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b8195;
    eax = 0x00000001;
    goto loc_1b7a44;
}
void sub_1b8201() // 0160:1b8201 +long
{
    esp -= 4;
    goto loc_1b8201;
loc_1b7a47: // 0160:1b7a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1972 bytes
loc_1b8201: // 0160:1b8201
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = eax;
    memoryASet32(ds, esp + 16, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ecx != eax)
        goto loc_1b823b;
    eax = 0;
    goto loc_1b846b;
loc_1b823b: // 0160:1b823b
    ebx = ebx * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ebx + 3803494);
    ecx = 0;
    memoryASet32(ds, esp + 12, edx);
    edx = memoryAGet32(ds, ebx + 3803498);
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edx);
loc_1b8269: // 0160:1b8269
    ebp = memoryAGet32(ds, ebx + 3803494);
    if (!ebp)
        goto loc_1b8301;
    edx = memoryAGet32(ds, esp + 12);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = (int32_t)ebp * (int32_t)ebp;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += ebp;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b8301;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, esp))
        goto loc_1b82e4;
    eax = memoryAGet32(ds, ebx + 3803570);
    edi -= 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_1b82d8;
    edi--;
loc_1b82d8: // 0160:1b82d8
    if ((int32_t)memoryAGet32(ds, ebx + 3803570) >= (int32_t)0x00000032)
        goto loc_1b8301;
    edi--;
    goto loc_1b8301;
loc_1b82e4: // 0160:1b82e4
    eax = memoryAGet32(ds, ebx + 3803570);
    ecx += 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_1b82f3;
    ecx++;
loc_1b82f3: // 0160:1b82f3
    if ((int32_t)memoryAGet32(ds, ebx + 3803570) >= (int32_t)0x00000032)
        goto loc_1b82fd;
    ecx++;
loc_1b82fd: // 0160:1b82fd
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_1b8301: // 0160:1b8301
    esi++;
    ebx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1b8269;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_1b8326: // 0160:1b8326
    esi = memoryAGet32(ds, ebx + 3802606);
    if (!esi)
        goto loc_1b8374;
    edx = memoryAGet32(ds, esp + 12);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3802610);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b836f;
    ecx++;
loc_1b836f: // 0160:1b836f
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_1b8374;
    ecx++;
loc_1b8374: // 0160:1b8374
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_1b8326;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_1b8394: // 0160:1b8394
    if (memoryAGet32(ds, ebx + 3806618) == 0x00000000)
        goto loc_1b83e7;
    edx = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, ebx + 3806618);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3806622);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1b83e2;
    ecx++;
loc_1b83e2: // 0160:1b83e2
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_1b83e7;
    ecx++;
loc_1b83e7: // 0160:1b83e7
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_1b8394;
    ebx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ebp = memoryAGet32(ds, ebx + 3803494);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = (int32_t)eax * (int32_t)eax;
    edx = esi;
    edx = (int32_t)edx * (int32_t)edx;
    edx += eax;
    eax = 0;
    if ((int32_t)edx >= (int32_t)0x00010000)
        goto loc_1b8446;
    eax = 0x00000001;
loc_1b8446: // 0160:1b8446
    if ((int32_t)edx >= (int32_t)0x00004000)
        goto loc_1b844f;
    eax++;
loc_1b844f: // 0160:1b844f
    if ((int32_t)edx >= (int32_t)0x00001900)
        goto loc_1b8458;
    eax++;
loc_1b8458: // 0160:1b8458
    edx = memoryAGet32(ds, esp + 4);
    edi <<= 24;
    eax <<= 16;
    edx <<= 8;
    eax |= edi;
    eax |= edx;
    eax |= ecx;
loc_1b846b: // 0160:1b846b
    esp += 0x00000014;
    goto loc_1b7a47;
}
void sub_1b8473() // 0160:1b8473 +long
{
    esp -= 4;
    goto loc_1b8473;
loc_1b7b70: // 0160:1b7b70
    eax = 0;
loc_1b7b72: // 0160:1b7b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
    // gap 2297 bytes
loc_1b8473: // 0160:1b8473
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    push32(edx);
    edi = ebx;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    ebx = 0;
    ebp = eax;
    goto loc_1b8501;
loc_1b8495: // 0160:1b8495
    if (memoryAGet32(ds, ebx + 3803494) == 0x00000000)
        goto loc_1b84fa;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != ebp)
        goto loc_1b84fa;
    edx = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, ebx + 3803494);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    eax += esi;
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1b84fa;
    eax = 0x00000001;
    goto loc_1b7b72;
loc_1b84fa: // 0160:1b84fa
    ebx += 0x000000ac;
    ecx++;
loc_1b8501: // 0160:1b8501
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b8495;
    goto loc_1b7b70;
}
void sub_1b8562() // 0160:1b8562 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    push32(ebx);
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = 0;
    ebp = 0;
    ecx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 12, eax);
loc_1b858a: // 0160:1b858a
    if (memoryAGet32(ds, ebx + 3803494) == 0x00000000)
        goto loc_1b85f8;
    edx = memoryAGet32(ds, esp + 8);
    esi = memoryAGet32(ds, ebx + 3803494);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 4);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp);
    esi += eax;
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_1b85f8;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax = memoryAGet32(ds, esp);
    eax -= esi;
    if (edx != memoryAGet32(ds, esp + 12))
        goto loc_1b85f6;
    edi += eax;
    goto loc_1b85f8;
loc_1b85f6: // 0160:1b85f6
    ebp += eax;
loc_1b85f8: // 0160:1b85f8
    ecx++;
    ebx += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b858a;
    al = (int32_t)edi <= (int32_t)ebp;
    eax &= 0x000000ff;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b8616() // 0160:1b8616 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_1b8620: // 0160:1b8620
    edx = memoryAGet32(ds, esi + 3803494);
    if (!edx)
        goto loc_1b863e;
    edx = 0x00000640;
    eax = ecx;
    sub_1b8201();
    memoryASet32(ds, ebx + 3936048, eax);
    goto loc_1b8644;
loc_1b863e: // 0160:1b863e
    memoryASet32(ds, ebx + 3936048, edx);
loc_1b8644: // 0160:1b8644
    ebx += 0x00000004;
    ecx++;
    esi += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1b8620;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8658() // 0160:1b8658 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    eax = 0;
    memoryASet32(ds, esp, edx);
loc_1b8669: // 0160:1b8669
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_1b86c0;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    eax = memoryAGet32(ds, ecx);
    memoryASet32(ds, edi, memoryAGet32(ds, edi) + eax);
    eax = memoryAGet32(ds, 0x3c104c);
    memoryASet32(ds, ebx, memoryAGet32(ds, ebx) + eax);
    eax = memoryAGet32(ds, 0x3c1050);
    memoryASet32(ds, ecx, memoryAGet32(ds, ecx) + eax);
    ebp = memoryAGet32(ds, 0x3c1068);
    edx = memoryAGet32(ds, esi);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, edi);
    eax = memoryAGet32(ds, 0x3c106c);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = (int32_t)ebp * (int32_t)ebp;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
    eax += ebp;
    goto loc_1b8669;
loc_1b86c0: // 0160:1b86c0
    eax = memoryAGet32(ds, esp);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b86ca() // 0160:1b86ca +long
{
    esp -= 4;
    goto loc_1b86ca;
loc_1b7a47: // 0160:1b7a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3197 bytes
loc_1b86ca: // 0160:1b86ca
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    memoryASet32(ds, esp, edx);
    if (memoryAGet32(ds, 0x1e3c6c) == 0x00000000)
        goto loc_1b8851;
    edx = ebp;
    edx = memoryAGet32(ds, edx);
    eax = memoryAGet32(ds, eax);
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp);
    esi = eax;
    edx = memoryAGet32(ds, edx);
    eax = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    eax = memoryAGet32(ds, eax);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = 0x00000001;
    ebx = eax;
    eax = 0;
    sub_1b7c85();
    edx = memoryAGet32(ds, 0x1e3c6c);
    edx <<= 5;
    if (!eax)
        goto loc_1b8732;
    eax = 0;
    sub_1b7c85();
    esi -= eax;
    goto loc_1b8739;
loc_1b8732: // 0160:1b8732
    sub_1b7c85();
    esi += eax;
loc_1b8739: // 0160:1b8739
    if ((int32_t)esi >= (int32_t)0x00000004)
        goto loc_1b8743;
    esi = 0x00000004;
loc_1b8743: // 0160:1b8743
    if ((int32_t)esi <= (int32_t)0x000003bc)
        goto loc_1b8750;
    esi = 0x000003bc;
loc_1b8750: // 0160:1b8750
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = ebx;
    ecx <<= 4;
    ecx -= ebx;
    ecx <<= 6;
    ecx += esi;
    edi = eax + eax;
loc_1b876a: // 0160:1b876a
    if ((int32_t)ebx <= 0)
        goto loc_1b87c1;
    if (esi >= 0x000003c0)
        goto loc_1b87c1;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b87c1;
    if ((int32_t)ebx <= 0)
        goto loc_1b87c1;
    ecx -= 0x000003c0;
    ebx--;
    goto loc_1b876a;
loc_1b87c1: // 0160:1b87c1
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = ebx;
    ecx <<= 4;
    ecx -= ebx;
    ecx <<= 6;
    ecx += esi;
    edi = eax + eax;
loc_1b87db: // 0160:1b87db
    if ((int32_t)ebx <= 0)
        goto loc_1b8825;
    if (esi >= 0x000003c0)
        goto loc_1b8825;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b882c;
loc_1b8825: // 0160:1b8825
    eax = 0x00000001;
    goto loc_1b882e;
loc_1b882c: // 0160:1b882c
    eax = 0;
loc_1b882e: // 0160:1b882e
    if (!eax)
        goto loc_1b8843;
    if ((int32_t)ebx >= (int32_t)0x0000018f)
        goto loc_1b8843;
    ecx += 0x000003c0;
    ebx++;
    goto loc_1b87db;
loc_1b8843: // 0160:1b8843
    eax = memoryAGet32(ds, esp);
    esi <<= 9;
    ebx <<= 9;
    memoryASet32(ss, ebp, esi);
    memoryASet32(ds, eax, ebx);
loc_1b8851: // 0160:1b8851
    esp += 0x00000004;
    goto loc_1b7a47;
}
void sub_1b8859() // 0160:1b8859 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x1e3c6c) == 0x00000000)
        goto loc_1b8959;
    ebx = memoryAGet32(ds, 0x3c1088);
    if (ebx == 0x00000004)
        goto loc_1b887e;
    if (ebx != 0x00000024)
        goto loc_1b8959;
loc_1b887e: // 0160:1b887e
    if (memoryAGet32(ds, 0x3c1054) == 0x00000000)
        goto loc_1b8959;
    if (memoryAGet32(ds, 0x1e3c6c) != 0x00000001)
        goto loc_1b88f2;
    if ((int32_t)memoryAGet32(ds, 0x3c1074) <= (int32_t)0x00000096)
        goto loc_1b88b4;
    edx = 0x00000019;
    eax = 0;
    sub_1b7c85();
    memoryASet32(ds, 0x3c1074, memoryAGet32(ds, 0x3c1074) - eax);
    goto loc_1b88c6;
loc_1b88b4: // 0160:1b88b4
    edx = 0x00000019;
    eax = 0;
    sub_1b7c85();
    memoryASet32(ds, 0x3c1074, memoryAGet32(ds, 0x3c1074) + eax);
loc_1b88c6: // 0160:1b88c6
    eax = memoryAGet32(ds, 0x3c1074);
    edx = eax;
    ebx = 0x00000019;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (!edx)
        goto loc_1b88f2;
    ecx = memoryAGet32(ds, 0x3c1074);
    ecx -= edx;
    memoryASet32(ds, 0x3c1074, ecx);
    esi = ecx + ebx;
    memoryASet32(ds, 0x3c1074, esi);
loc_1b88f2: // 0160:1b88f2
    if (memoryAGet32(ds, 0x1e3c6c) != 0x00000002)
        goto loc_1b8959;
    if ((int32_t)memoryAGet32(ds, 0x3c1074) <= (int32_t)0x00000096)
        goto loc_1b891b;
    edx = 0x00000032;
    eax = 0;
    sub_1b7c85();
    memoryASet32(ds, 0x3c1074, memoryAGet32(ds, 0x3c1074) - eax);
    goto loc_1b892d;
loc_1b891b: // 0160:1b891b
    edx = 0x00000032;
    eax = 0;
    sub_1b7c85();
    memoryASet32(ds, 0x3c1074, memoryAGet32(ds, 0x3c1074) + eax);
loc_1b892d: // 0160:1b892d
    eax = memoryAGet32(ds, 0x3c1074);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (!edx)
        goto loc_1b8959;
    ecx = memoryAGet32(ds, 0x3c1074);
    ecx -= edx;
    memoryASet32(ds, 0x3c1074, ecx);
    esi = ecx + ebx;
    memoryASet32(ds, 0x3c1074, esi);
loc_1b8959: // 0160:1b8959
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b895e() // 0160:1b895e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000054;
    edx = 0x7fffffff;
    memoryASet32(ds, 0x3c1088, eax);
    ebx = 0;
    memoryASet32(ds, 0x3c1058, edx);
    memoryASet32(ds, 0x3c1054, ebx);
    memoryASet32(ds, 0x3c1064, ebx);
    if (eax != 0x00000004)
        goto loc_1b89bc;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a160e) != 0x00000000)
        goto loc_1b89bc;
    memoryASet32(ds, 0x3c1088, 0x00000024);
loc_1b89bc: // 0160:1b89bc
    if (memoryAGet32(ds, 0x3c1088) != 0x00000024)
        goto loc_1b89f4;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1612) != 0x00000000)
        goto loc_1b89f4;
loc_1b89ed: // 0160:1b89ed
    eax = 0;
    goto loc_1b8fdf;
loc_1b89f4: // 0160:1b89f4
    if (memoryAGet32(ds, 0x3c1088) != 0x00000000)
        goto loc_1b8a25;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1606) == 0x00000000)
        goto loc_1b89ed;
loc_1b8a25: // 0160:1b8a25
    if (memoryAGet32(ds, 0x3c1088) != 0x00000000)
        goto loc_1b8a6a;
    edx = memoryAGet32(ds, 0x3a1c98);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    edx <<= 9;
    ebx = 0x0000004b;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3c104c, eax);
    memoryASet32(ds, esp + 44, 0x00000010);
    goto loc_1b8a7b;
loc_1b8a6a: // 0160:1b8a6a
    edi = 0;
    ebp = 0x00000008;
    memoryASet32(ds, 0x3c104c, edi);
    memoryASet32(ds, esp + 44, ebp);
loc_1b8a7b: // 0160:1b8a7b
    edx = 0x0000000a;
    eax = memoryAGet32(ds, 0x3a1d44);
    cl = memoryAGet(ds, 0x1e3c64);
    memoryASet32(ds, 0x3c1050, eax);
    eax = 0x00000001;
    ebx = 0x00000014;
    eax <<= cl;
    memoryASet32(ds, esp, edx);
    eax ^= 0x0000ffff;
    memoryASet32(ds, esp + 48, ebx);
    memoryASet16(ds, 0x3a1c52, ax);
loc_1b8aae: // 0160:1b8aae
    if (memoryAGet32(ds, 0x3c1088) == 0x00000000)
        goto loc_1b8add;
    eax = memoryAGet32(ds, esp);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_1b8f32;
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx <= (int32_t)0x0000000a)
        goto loc_1b8add;
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_1b8f32;
loc_1b8add: // 0160:1b8add
    edx = 0;
    eax = memoryAGet32(ds, esp + 48);
    memoryASet32(ds, esp + 76, edx);
    memoryASet32(ds, esp + 56, eax);
    memoryASet32(ds, esp + 60, edx);
    memoryASet32(ds, esp + 72, edx);
loc_1b8af3: // 0160:1b8af3
    eax = memoryAGet32(ds, esp + 76);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_1b8f07;
    eax = memoryAGet32(ds, esp + 72);
    if (memoryAGet32(ds, eax + 3803494) == 0x00000000)
        goto loc_1b8f07;
    sub_1b7d96();
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 3803494);
    memoryASet32(ds, esp + 40, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 3803498);
    edx = esp + 36;
    memoryASet32(ds, esp + 36, eax);
    eax = esp + 40;
    sub_1b86ca();
    edx = memoryAGet32(ds, esp + 40);
    ebx = memoryAGet32(ds, 0x3c1068);
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = (int32_t)eax * (int32_t)eax;
    if ((int32_t)eax >= (int32_t)0x00000900)
        goto loc_1b8ba0;
    eax = memoryAGet32(ds, esp + 40);
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1b8b96;
    edi = eax + 512;
    memoryASet32(ds, esp + 40, edi);
    goto loc_1b8ba0;
loc_1b8b96: // 0160:1b8b96
    esi = eax + -512;
    memoryASet32(ds, esp + 40, esi);
loc_1b8ba0: // 0160:1b8ba0
    ebp = memoryAGet32(ds, esp + 40);
    if ((int32_t)ebp >= (int32_t)0x00002000)
        goto loc_1b8bb6;
    eax = ebp + 512;
    memoryASet32(ds, esp + 40, eax);
loc_1b8bb6: // 0160:1b8bb6
    edx = memoryAGet32(ds, esp + 40);
    if ((int32_t)edx <= (int32_t)0x00076000)
        goto loc_1b8bcc;
    ebx = edx + -512;
    memoryASet32(ds, esp + 40, ebx);
loc_1b8bcc: // 0160:1b8bcc
    edi = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, 0x3c104c);
    edx = (int32_t)edx * (int32_t)edi;
    edx = (int32_t)edx * (int32_t)edi;
    eax = memoryAGet32(ds, esp + 40);
    eax -= memoryAGet32(ds, 0x3c1068);
    eax += eax;
    eax -= edx;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 56);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 68, eax);
    eax = memoryAGet32(ds, 0x3c1050);
    eax = (int32_t)eax * (int32_t)edi;
    eax = (int32_t)eax * (int32_t)edi;
    ebx = memoryAGet32(ds, esp + 36);
    ebx -= memoryAGet32(ds, 0x3c106c);
    edx = ebx + ebx;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 64, eax);
    eax = memoryAGet32(ds, esp + 68);
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 64);
    edx = (int32_t)edx * (int32_t)edx;
    eax += edx;
    sub_1b77c2();
    eax <<= 3;
    edx = eax;
    ebx = 0x0000015d;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax += 0x0000000f;
    if ((int32_t)eax <= (int32_t)0x00000011)
        goto loc_1b8f07;
    if ((int32_t)eax >= (int32_t)0x0000008e)
        goto loc_1b8f07;
    eax = memoryAGet32(ds, esp + 68);
    edx = esp + 28;
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp + 64);
    ecx = 0;
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, 0x3c1068);
    memoryASet32(ds, esp + 80, ecx);
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, 0x3c106c);
    cl = memoryAGet(ds, esp + 76);
    memoryASet32(ds, esp + 28, eax);
    edi = eax;
    eax = 0x00000001;
    bx = memoryAGet16(ds, 0x3a1c52);
    eax <<= cl;
    ecx = esp + 20;
    ebx ^= eax;
    eax = esp + 32;
    memoryASet16(ds, 0x3a1c52, bx);
    ebx = esp + 24;
    esi = memoryAGet32(ds, esp + 32);
    sub_1b8658();
    ebp = eax;
    goto loc_1b8d8c;
loc_1b8cbd: // 0160:1b8cbd
    esi = memoryAGet32(ds, esp + 32);
    edi = memoryAGet32(ds, esp + 28);
    eax = memoryAGet32(ds, esp + 24);
    ecx = memoryAGet32(ds, esp + 24);
    edx = esi + eax;
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 32, edx);
    ebx = edi + eax;
    eax = memoryAGet32(ds, 0x3c104c);
    edx = memoryAGet32(ds, esp + 20);
    ecx += eax;
    edx += memoryAGet32(ds, 0x3c1050);
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, esp + 20, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 16, eax);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 24, ecx);
    ebx = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_1b8d65;
    eax = esp + 4;
    edx = edi;
    push32(eax);
    eax = esp + 12;
    edx = sar32(edx, 0x1f);
    push32(eax);
    eax = edi;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = esp + 20;
    ebx = eax;
    eax = esp + 24;
    sub_1add3f();
    memoryASet32(ds, esp + 80, eax);
loc_1b8d65: // 0160:1b8d65
    ecx = memoryAGet32(ds, esp + 32);
    if ((int32_t)ecx < (int32_t)0x00000800)
        goto loc_1b8d83;
    if ((int32_t)ecx > (int32_t)0x00077800)
        goto loc_1b8d83;
    if ((int32_t)memoryAGet32(ds, esp + 20) < (int32_t)0x00004000)
        goto loc_1b8d8b;
loc_1b8d83: // 0160:1b8d83
    memoryASet32(ds, esp + 80, 0x00000002);
loc_1b8d8b: // 0160:1b8d8b
    ebp++;
loc_1b8d8c: // 0160:1b8d8c
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1b8d9c;
    if (memoryAGet32(ds, esp + 80) == 0x00000000)
        goto loc_1b8cbd;
loc_1b8d9c: // 0160:1b8d9c
    cl = memoryAGet(ds, esp + 76);
    eax = 0x00000001;
    eax <<= cl;
    cx = memoryAGet16(ds, 0x3a1c52);
    ecx ^= eax;
    ebx = memoryAGet32(ds, esp + 80);
    memoryASet16(ds, 0x3a1c52, cx);
    if (!ebx)
        goto loc_1b8dc7;
    memoryASet32(ds, esp + 32, esi);
    memoryASet32(ds, esp + 28, edi);
loc_1b8dc7: // 0160:1b8dc7
    edx = memoryAGet32(ds, esp + 40);
    ecx = memoryAGet32(ds, esp + 32);
    edx -= ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, esp + 28);
    edx = memoryAGet32(ds, esp + 36);
    edx -= esi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    edi = memoryAGet32(ds, esp + 80);
    ecx += eax;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_1b8f07;
    if ((int32_t)ecx < (int32_t)0x00000400)
        goto loc_1b8e2c;
    ebx = 0x00001000;
    eax = memoryAGet32(ds, esp + 32);
    edx = esi;
    sub_1b8562();
    if (!eax)
        goto loc_1b8f07;
loc_1b8e2c: // 0160:1b8e2c
    eax = memoryAGet32(ds, 0x3c1058);
    if ((int32_t)ecx < (int32_t)eax)
        goto loc_1b8e56;
    eax += 0x00000040;
    if ((int32_t)ecx > (int32_t)eax)
        goto loc_1b8f07;
    eax = memoryAGet32(ds, esp + 60);
    edx = memoryAGet32(ds, 0x3c1064);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 3936048))
        goto loc_1b8f07;
loc_1b8e56: // 0160:1b8e56
    if (memoryAGet32(ds, 0x3c1088) == 0x00000000)
        goto loc_1b8e84;
    if ((int32_t)ebp < (int32_t)0x00000028)
        goto loc_1b8f07;
    ebx = 0x00000032;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx <= (int32_t)0x0000000a)
        goto loc_1b8e84;
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_1b8f07;
loc_1b8e84: // 0160:1b8e84
    eax = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, 0x3c1084, eax);
    eax = memoryAGet32(ds, esp + 60);
    eax = memoryAGet32(ds, eax + 3936048);
    memoryASet32(ds, 0x3c1064, eax);
    eax = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, 0x3c1058, ecx);
    memoryASet32(ds, 0x3c105c, eax);
    eax = memoryAGet32(ds, esp + 64);
    ecx = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, 0x3c1060, eax);
    if (!ecx)
        goto loc_1b8ec4;
    memoryASet32(ds, 0x3c1074, ebp);
    goto loc_1b8ecc;
loc_1b8ec4: // 0160:1b8ec4
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3c1074, eax);
loc_1b8ecc: // 0160:1b8ecc
    esi = 0x00000001;
    edi = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, 0x3c1080, esi);
    if ((int32_t)edi >= 0)
        goto loc_1b8eeb;
    memoryASet32(ds, 0x3c1070, 0xffffffff);
    goto loc_1b8ef1;
loc_1b8eeb: // 0160:1b8eeb
    memoryASet32(ds, 0x3c1070, esi);
loc_1b8ef1: // 0160:1b8ef1
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3c1054, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 3803570);
    memoryASet32(ds, esp + 52, eax);
loc_1b8f07: // 0160:1b8f07
    esi = memoryAGet32(ds, esp + 60);
    edi = memoryAGet32(ds, esp + 72);
    ebp = memoryAGet32(ds, esp + 76);
    esi += 0x00000004;
    edi += 0x000000ac;
    ebp++;
    memoryASet32(ds, esp + 60, esi);
    memoryASet32(ds, esp + 72, edi);
    memoryASet32(ds, esp + 76, ebp);
    if ((int32_t)ebp < (int32_t)0x00000010)
        goto loc_1b8af3;
loc_1b8f32: // 0160:1b8f32
    ecx = memoryAGet32(ds, esp + 48);
    esi = memoryAGet32(ds, esp);
    ecx += 0x00000014;
    esi += 0x0000000a;
    memoryASet32(ds, esp + 48, ecx);
    memoryASet32(ds, esp, esi);
    if ((int32_t)esi <= (int32_t)0x000000fa)
        goto loc_1b8aae;
    edx = 0x0000ffff;
    ebp = memoryAGet32(ds, 0x3c1058);
    memoryASet16(ds, 0x3a1c52, dx);
    if ((int32_t)ebp >= (int32_t)0x00001000)
        goto loc_1b8f74;
    if ((int32_t)ebp >= (int32_t)0x00000100)
        goto loc_1b8f87;
loc_1b8f74: // 0160:1b8f74
    if ((int32_t)memoryAGet32(ds, esp + 52) <= (int32_t)0x00000032)
        goto loc_1b8fd5;
    if ((int32_t)memoryAGet32(ds, 0x3c1058) >= (int32_t)0x00001000)
        goto loc_1b8fd5;
loc_1b8f87: // 0160:1b8f87
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1612) == 0x00000000)
        goto loc_1b8fd5;
    if (memoryAGet32(ds, 0x3c1088) != 0x00000004)
        goto loc_1b8fd5;
    edx = 0x00004000;
    eax = memoryAGet32(ds, 0x3c1084);
    sub_1b813e();
    if (!eax)
        goto loc_1b8fd5;
    memoryASet32(ds, 0x3c1088, 0x00000024);
loc_1b8fd5: // 0160:1b8fd5
    sub_1b8859();
    eax = memoryAGet32(ds, 0x3c1054);
loc_1b8fdf: // 0160:1b8fdf
    esp += 0x00000054;
    goto loc_1ba80c;
    // gap 6181 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b8fe7() // 0160:1b8fe7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000058;
    edi = esp + 12;
    esi = 0x001b7786;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = esp;
    esi = 0x001b7792;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = 0x7fffffff;
    eax = memoryAGet32(ds, 0x1e3c64);
    memoryASet32(ds, 0x3c1058, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    ebx = 0;
    eax <<= 2;
    esi = 0x00000006;
    eax += edx;
    memoryASet32(ds, 0x3c1054, ebx);
    eax <<= 2;
    memoryASet32(ds, 0x3c1064, ebx);
    edi = memoryAGet32(ds, eax + 3806742);
    memoryASet32(ds, 0x3c1088, esi);
    if (edi)
        goto loc_1b9065;
    if (memoryAGet32(ds, eax + 3806746) != 0x00000000)
        goto loc_1b9065;
    eax = 0;
    goto loc_1b94b1;
loc_1b9065: // 0160:1b9065
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    eax += edx;
    memoryASet32(ds, 0x3c104c, ebx);
    esi = memoryAGet32(ds, eax * 4 + 0x3a1606);
    memoryASet32(ds, 0x3c1050, ebx);
    if (esi)
        goto loc_1b90c4;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 3806734) != 0x00000000)
        goto loc_1b90c4;
    if (memoryAGet32(ds, eax + 3806738) != 0x00000000)
        goto loc_1b90c4;
    eax = 0x00000001;
    goto loc_1b90c6;
loc_1b90c4: // 0160:1b90c4
    eax = 0;
loc_1b90c6: // 0160:1b90c6
    if (memoryAGet32(ds, 0x3c1034) != 0x00000000)
        goto loc_1b90d3;
    if (!eax)
        goto loc_1b90e7;
loc_1b90d3: // 0160:1b90d3
    ecx = 0x000003e8;
    esi = 0x00100000;
    memoryASet32(ds, esp + 56, ecx);
    memoryASet32(ds, esp + 52, esi);
    goto loc_1b90fb;
loc_1b90e7: // 0160:1b90e7
    eax = memoryAGet32(ds, 0x1e3c6c);
    edx = memoryAGet32(ds, esp + eax * 4 + 0xc);
    eax = memoryAGet32(ds, esp + eax*4);
    memoryASet32(ds, esp + 56, edx);
    memoryASet32(ds, esp + 52, eax);
loc_1b90fb: // 0160:1b90fb
    eax = 0x00000001;
    cl = memoryAGet(ds, 0x1e3c64);
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x3a1c52, ax);
    eax = memoryAGet32(ds, esp + 56);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = 0;
    esi = 0;
    memoryASet32(ds, esp + 76, edi);
    memoryASet32(ds, esp + 72, edi);
    memoryASet32(ds, esp + 48, eax);
loc_1b9130: // 0160:1b9130
    eax = memoryAGet32(ds, esp + 76);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_1b9452;
    if (memoryAGet32(ds, esi + 3803494) == 0x00000000)
        goto loc_1b9452;
    sub_1b7d96();
    eax = memoryAGet32(ds, esi + 3803494);
    memoryASet32(ds, esp + 44, eax);
    eax = memoryAGet32(ds, esi + 3803498);
    eax -= 0x00000400;
    edx = esp + 40;
    memoryASet32(ds, esp + 40, eax);
    eax = esp + 44;
    sub_1b86ca();
    edx = memoryAGet32(ds, esp + 44);
    ebx = memoryAGet32(ds, 0x3c1068);
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, 0x3c106c);
    edx = memoryAGet32(ds, esp + 40);
    edx -= edi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)ecx;
    ebx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    eax += edx;
    sub_1b77c2();
    memoryASet32(ds, esp + 68, eax);
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1b91fb;
    edx = memoryAGet32(ds, 0x1e3c6c);
    edi = 0x00000005;
    edx += edx;
    edi -= edx;
    edx = edi;
    edx <<= 7;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1b9208;
loc_1b91fb: // 0160:1b91fb
    if (memoryAGet32(ds, 0x3c1034) == 0x00000000)
        goto loc_1b9452;
loc_1b9208: // 0160:1b9208
    edx = ecx * 0x00002ee0;
    edi = memoryAGet32(ds, esp + 68);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx = ebx * 0x00002ee0;
    edi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 68));
    memoryASet32(ds, esp + 80, eax);
    if (!edi)
        goto loc_1b9240;
    edx = ecx;
    edx <<= 9;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    goto loc_1b9254;
loc_1b9240: // 0160:1b9240
    if (!eax)
        goto loc_1b9256;
    edx = ebx;
    edx <<= 9;
    ebx = memoryAGet32(ds, esp + 80);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
loc_1b9254: // 0160:1b9254
    ebp = eax;
loc_1b9256: // 0160:1b9256
    if (ebp)
        goto loc_1b925f;
    ebp = 0x00000032;
loc_1b925f: // 0160:1b925f
    cl = memoryAGet(ds, esp + 76);
    eax = 0x00000001;
    eax <<= cl;
    bx = memoryAGet16(ds, 0x3a1c52);
    memoryASet32(ds, esp + 84, eax);
    ebx ^= eax;
    eax = memoryAGet32(ds, esp + 44);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 24, eax);
    eax = esp + 32;
    push32(eax);
    eax = esp + 40;
    push32(eax);
    eax = memoryAGet32(ds, 0x3c106c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x3c1068);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet16(ds, 0x3a1c52, bx);
    edx = esp + 32;
    ebx = eax;
    eax = esp + 36;
    sub_1add3f();
    cx = memoryAGet16(ds, 0x3a1c52);
    memoryASet32(ds, esp + 60, eax);
    ecx ^= memoryAGet32(ds, esp + 84);
    eax = memoryAGet32(ds, esp + 44);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet16(ds, 0x3a1c52, cx);
    ebx -= memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 32);
    ecx = eax;
    ecx -= edx;
    if (!edi)
        goto loc_1b9348;
    edx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, 0x3c1068);
    edx <<= 9;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    goto loc_1b9362;
loc_1b9348: // 0160:1b9348
    if (memoryAGet32(ds, esp + 80) == 0x00000000)
        goto loc_1b9366;
    eax = memoryAGet32(ds, 0x3c106c);
    edx <<= 9;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 80));
loc_1b9362: // 0160:1b9362
    memoryASet32(ds, esp + 64, eax);
loc_1b9366: // 0160:1b9366
    ebx = (int32_t)ebx * (int32_t)ebx;
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = memoryAGet32(ds, esp + 52);
    ecx += ebx;
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_1b9452;
    ebx = memoryAGet32(ds, esp + 56);
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esi + 3803570))
        goto loc_1b9452;
    edx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp + 36);
    ebx = 0x00000240;
    edx <<= 9;
    eax <<= 9;
    sub_1b8473();
    if (eax)
        goto loc_1b9452;
    eax = memoryAGet32(ds, 0x3c1058);
    if ((int32_t)ecx < (int32_t)eax)
        goto loc_1b93cf;
    if (ecx != eax)
        goto loc_1b9452;
    eax = memoryAGet32(ds, esp + 72);
    ebx = memoryAGet32(ds, 0x3c1064);
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, eax + 3936048))
        goto loc_1b9452;
loc_1b93cf: // 0160:1b93cf
    eax = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, 0x3c1058, ecx);
    eax = memoryAGet32(ds, eax + 3936048);
    memoryASet32(ds, 0x3c105c, edi);
    memoryASet32(ds, 0x3c1064, eax);
    eax = memoryAGet32(ds, esp + 80);
    ecx = memoryAGet32(ds, esp + 60);
    memoryASet32(ds, 0x3c1060, eax);
    if (!ecx)
        goto loc_1b9406;
    eax = memoryAGet32(ds, esp + 64);
    memoryASet32(ds, 0x3c1074, eax);
    goto loc_1b940c;
loc_1b9406: // 0160:1b9406
    memoryASet32(ds, 0x3c1074, ebp);
loc_1b940c: // 0160:1b940c
    eax = 0x00000001;
    memoryASet32(ds, 0x3c1080, eax);
    if ((int32_t)edi >= 0)
        goto loc_1b9426;
    memoryASet32(ds, 0x3c1070, 0xffffffff);
    goto loc_1b942b;
loc_1b9426: // 0160:1b9426
    memoryASet32(ds, 0x3c1070, eax);
loc_1b942b: // 0160:1b942b
    ecx = memoryAGet32(ds, esp + 48);
    eax = memoryAGet32(ds, esi + 3803570);
    memoryASet32(ds, 0x3c1054, ebp);
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_1b9448;
    eax = 0;
    memoryASet32(ds, 0x3c1038, eax);
    goto loc_1b9452;
loc_1b9448: // 0160:1b9448
    memoryASet32(ds, 0x3c1038, 0x00000001);
loc_1b9452: // 0160:1b9452
    edx = memoryAGet32(ds, esp + 72);
    ebx = memoryAGet32(ds, esp + 76);
    esi += 0x000000ac;
    edx += 0x00000004;
    ebx++;
    memoryASet32(ds, esp + 72, edx);
    memoryASet32(ds, esp + 76, ebx);
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1b9130;
    edx = 0x0000ffff;
    esi = memoryAGet32(ds, 0x1e3c6c);
    memoryASet16(ds, 0x3a1c52, dx);
    if (esi != 0x00000002)
        goto loc_1b94ac;
    edi = memoryAGet32(ds, 0x3c1034);
    if (edi)
        goto loc_1b94ac;
    edx = 0x00000001;
    eax = 0;
    sub_1b7c85();
    if (!eax)
        goto loc_1b94ac;
    memoryASet32(ds, 0x3c1054, edi);
loc_1b94ac: // 0160:1b94ac
    eax = memoryAGet32(ds, 0x3c1054);
loc_1b94b1: // 0160:1b94b1
    esp += 0x00000058;
    goto loc_1ba80c;
    // gap 4947 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b94b9() // 0160:1b94b9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x3c1080);
    edx = memoryAGet32(ds, 0x3c1074);
    eax = memoryAGet32(ds, 0x3c1088);
    sub_1b7e53();
    if (!eax)
        goto loc_1b9514;
    edx = memoryAGet32(ds, 0x1e3c80);
    if (!edx)
        goto loc_1b94ef;
    ebx = edx + -1;
    eax = 0;
    memoryASet32(ds, 0x1e3c80, ebx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b94ef: // 0160:1b94ef
    ebx = memoryAGet32(ds, 0x3c1078);
    edx = memoryAGet32(ds, 0x3c1070);
    eax = memoryAGet32(ds, 0x3c107c);
    ecx = 0;
    sub_1b7cb9();
    if (!eax)
        goto loc_1b9514;
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9514: // 0160:1b9514
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b951a() // 0160:1b951a +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x3c1088, edx);
    sub_1b895e();
    memoryASet32(ds, 0x3c1030, eax);
    eax = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, 0x3c1020, eax);
    eax = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, 0x3c101c, eax);
    eax = memoryAGet32(ds, 0x3c104c);
    memoryASet32(ds, 0x3c1024, eax);
    eax = memoryAGet32(ds, 0x3c1050);
    memoryASet32(ds, 0x3c0fec, eax);
    eax = memoryAGet32(ds, 0x3c1064);
    memoryASet32(ds, 0x3c0fd8, eax);
    eax = memoryAGet32(ds, 0x3c1074);
    memoryASet32(ds, 0x3c102c, eax);
    eax = memoryAGet32(ds, 0x3c1058);
    memoryASet32(ds, 0x3c0ff0, eax);
    eax = memoryAGet32(ds, 0x3c1070);
    memoryASet32(ds, 0x3c1028, eax);
    edx = pop32();
    esp += 4;
}
void sub_1b9581() // 0160:1b9581 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x00000004;
    eax = edx;
    memoryASet32(ds, 0x3c1088, edx);
    sub_1b895e();
    memoryASet32(ds, 0x3c1018, eax);
    eax = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, 0x3c0fcc, eax);
    eax = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, 0x3c0fd0, eax);
    eax = memoryAGet32(ds, 0x3c104c);
    memoryASet32(ds, 0x3c0fc0, eax);
    eax = memoryAGet32(ds, 0x3c1050);
    memoryASet32(ds, 0x3c0fc4, eax);
    eax = memoryAGet32(ds, 0x3c1080);
    memoryASet32(ds, 0x3c1000, eax);
    eax = memoryAGet32(ds, 0x3c1064);
    memoryASet32(ds, 0x3c0fe4, eax);
    eax = memoryAGet32(ds, 0x3c1074);
    memoryASet32(ds, 0x3c1004, eax);
    eax = memoryAGet32(ds, 0x3c1058);
    memoryASet32(ds, 0x3c100c, eax);
    eax = memoryAGet32(ds, 0x3c1070);
    ebx = memoryAGet32(ds, 0x3c1088);
    memoryASet32(ds, 0x3c1008, eax);
    al = ebx == 0x00000024;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3c0ffc, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b960d() // 0160:1b960d +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    edx = 0x00000006;
    memoryASet32(ds, 0x3c1034, eax);
    memoryASet32(ds, 0x3c1088, edx);
    sub_1b8fe7();
    memoryASet32(ds, 0x3c0fe8, eax);
    if (!eax)
        goto loc_1b9747;
    eax = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, 0x3c1014, eax);
    eax = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, 0x3c1010, eax);
    eax = memoryAGet32(ds, 0x3c104c);
    memoryASet32(ds, 0x3c0ff8, eax);
    eax = memoryAGet32(ds, 0x3c1050);
    memoryASet32(ds, 0x3c0ff4, eax);
    eax = memoryAGet32(ds, 0x3c1080);
    memoryASet32(ds, 0x3c0fd4, eax);
    eax = memoryAGet32(ds, 0x3c1064);
    memoryASet32(ds, 0x3c0fa0, eax);
    eax = memoryAGet32(ds, 0x3c1074);
    memoryASet32(ds, 0x3c0fdc, eax);
    eax = memoryAGet32(ds, 0x3c1058);
    memoryASet32(ds, 0x3c0fa8, eax);
    eax = memoryAGet32(ds, 0x3c1070);
    memoryASet32(ds, 0x3c0fe0, eax);
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    al = memoryAGet32(ds, eax * 4 + 0x3a1616) == 0x00000000;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3c0fc8, eax);
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 3806742) == 0x00000000)
        goto loc_1b9715;
    if (memoryAGet32(ds, eax + 3806746) == 0x00000000)
        goto loc_1b9715;
    if (memoryAGet32(ds, 0x3c1038) == 0x00000000)
        goto loc_1b9704;
    ebp = 0;
    memoryASet32(ds, 0x3c0fc8, ebp);
    goto loc_1b9715;
loc_1b9704: // 0160:1b9704
    edx = 0x00000001;
    eax = 0;
    sub_1b7c85();
    memoryASet32(ds, 0x3c0fc8, eax);
loc_1b9715: // 0160:1b9715
    if (memoryAGet32(ds, 0x3c0fc8) == 0x00000000)
        goto loc_1b972a;
    memoryASet32(ds, 0x3c1088, 0x00000027);
    goto loc_1b9734;
loc_1b972a: // 0160:1b972a
    memoryASet32(ds, 0x3c1088, 0x00000006);
loc_1b9734: // 0160:1b9734
    if (memoryAGet32(ds, 0x3c1034) == 0x00000000)
        goto loc_1b9747;
    memoryASet32(ds, 0x3c1088, 0x00000006);
loc_1b9747: // 0160:1b9747
    eax = memoryAGet32(ds, 0x3c0fe8);
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1b974f() // 0160:1b974f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if ((int32_t)memoryAGet32(ds, 0x3c1054) <= (int32_t)0x00000000)
        goto loc_1b97f5;
    eax = memoryAGet32(ds, 0x3c105c);
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, 0x3c1060);
    edx = (int32_t)edx * (int32_t)edx;
    eax += edx;
    sub_1b77c2();
    edx = eax;
    ecx = 0x0000015d;
    edx <<= 3;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi = memoryAGet32(ds, 0x3c105c);
    eax += 0x0000000f;
    edx = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, 0x3c1078, eax);
    edx = -edx;
    if (!esi)
        goto loc_1b97d8;
    edx <<= 11;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax + 2048;
    edx <<= 2;
    edx = memoryAGet32(ds, edx + 1949680);
    edx <<= 6;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    memoryASet32(ds, 0x3c107c, eax);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b97d8: // 0160:1b97d8
    if ((int32_t)edx >= 0)
        goto loc_1b97eb;
    memoryASet32(ds, 0x3c107c, 0xffffffc0);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b97eb: // 0160:1b97eb
    memoryASet32(ds, 0x3c107c, 0x00000040);
loc_1b97f5: // 0160:1b97f5
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b97fa() // 0160:1b97fa +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    eax = memoryAGet32(ds, 0x3c0ff0);
    edx = 0;
    ebx = memoryAGet32(ds, 0x3c100c);
    memoryASet32(ds, 0x3c1054, edx);
    if (eax == ebx)
        goto loc_1b981e;
    if ((int32_t)eax > (int32_t)0x00000040)
        goto loc_1b9856;
    if ((int32_t)ebx > (int32_t)0x00000040)
        goto loc_1b9856;
loc_1b981e: // 0160:1b981e
    eax = memoryAGet32(ds, 0x3c0fd8);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x3c0fe4))
        goto loc_1b982f;
    eax = 0;
    goto loc_1b9834;
loc_1b982f: // 0160:1b982f
    eax = 0x00000004;
loc_1b9834: // 0160:1b9834
    edx = memoryAGet32(ds, 0x3c0fd8);
    if (edx != memoryAGet32(ds, 0x3c0fe4))
        goto loc_1b9868;
    edx = 0x00000001;
    eax = 0;
    sub_1b7c85();
    if (!eax)
        goto loc_1b9863;
loc_1b9852: // 0160:1b9852
    eax = 0;
    goto loc_1b9868;
loc_1b9856: // 0160:1b9856
    eax = memoryAGet32(ds, 0x3c0ff0);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x3c100c))
        goto loc_1b9852;
loc_1b9863: // 0160:1b9863
    eax = 0x00000004;
loc_1b9868: // 0160:1b9868
    if (eax <= 0)
        goto loc_1b9876;
    if (eax == 0x00000004)
        goto loc_1b98cb;
    goto loc_1b993f;
loc_1b9876: // 0160:1b9876
    eax = memoryAGet32(ds, 0x3c1020);
    memoryASet32(ds, 0x3c105c, eax);
    eax = memoryAGet32(ds, 0x3c101c);
    memoryASet32(ds, 0x3c1060, eax);
    eax = memoryAGet32(ds, 0x3c1024);
    memoryASet32(ds, 0x3c104c, eax);
    eax = memoryAGet32(ds, 0x3c0fec);
    memoryASet32(ds, 0x3c1050, eax);
    eax = memoryAGet32(ds, 0x3c102c);
    memoryASet32(ds, 0x3c1074, eax);
    eax = memoryAGet32(ds, 0x3c1030);
    memoryASet32(ds, 0x3c1054, eax);
    eax = memoryAGet32(ds, 0x3c0ff0);
    ebp = 0;
    memoryASet32(ds, 0x3c1058, eax);
    eax = memoryAGet32(ds, 0x3c1028);
    memoryASet32(ds, 0x3c1088, ebp);
    goto loc_1b993a;
loc_1b98cb: // 0160:1b98cb
    if (memoryAGet32(ds, 0x3c0ffc) == 0x00000000)
        goto loc_1b98e0;
    memoryASet32(ds, 0x3c1088, 0x00000024);
    goto loc_1b98e5;
loc_1b98e0: // 0160:1b98e0
    memoryASet32(ds, 0x3c1088, eax);
loc_1b98e5: // 0160:1b98e5
    eax = memoryAGet32(ds, 0x3c0fcc);
    memoryASet32(ds, 0x3c105c, eax);
    eax = memoryAGet32(ds, 0x3c0fd0);
    memoryASet32(ds, 0x3c1060, eax);
    eax = memoryAGet32(ds, 0x3c0fc0);
    memoryASet32(ds, 0x3c104c, eax);
    eax = memoryAGet32(ds, 0x3c0fc4);
    memoryASet32(ds, 0x3c1050, eax);
    eax = memoryAGet32(ds, 0x3c1004);
    memoryASet32(ds, 0x3c1074, eax);
    eax = memoryAGet32(ds, 0x3c1000);
    memoryASet32(ds, 0x3c1080, eax);
    eax = memoryAGet32(ds, 0x3c1018);
    memoryASet32(ds, 0x3c1054, eax);
    eax = memoryAGet32(ds, 0x3c100c);
    memoryASet32(ds, 0x3c1058, eax);
    eax = memoryAGet32(ds, 0x3c1008);
loc_1b993a: // 0160:1b993a
    memoryASet32(ds, 0x3c1070, eax);
loc_1b993f: // 0160:1b993f
    eax = memoryAGet32(ds, 0x3c1054);
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9948() // 0160:1b9948 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 3806750) == 0x00000000)
        goto loc_1b997a;
loc_1b9973: // 0160:1b9973
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
    return;
loc_1b997a: // 0160:1b997a
    if (memoryAGet32(ds, eax + 3806754) != 0x00000000)
        goto loc_1b9973;
    if (memoryAGet32(ds, eax + 3806802) != 0x00000000)
        goto loc_1b9995;
    if (memoryAGet32(ds, eax + 3806762) != 0x00000000)
        goto loc_1b9973;
loc_1b9995: // 0160:1b9995
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1626) != 0x00000000)
        goto loc_1b9973;
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_1b99c1() // 0160:1b99c1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x1e3c6c);
    ebx = edx;
    ebx <<= 2;
    eax = memoryAGet32(ds, 0x1e3c64);
    ebx += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x3a161e);
    ebx <<= 3;
    if (!edx)
        goto loc_1b9a15;
    ecx = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 20;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1b9a15;
loc_1b9a0b: // 0160:1b9a0b
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9a15: // 0160:1b9a15
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1622) == 0x00000000)
        goto loc_1b9a4a;
    edi = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 30;
    if ((int32_t)eax > (int32_t)edi)
        goto loc_1b9a0b;
loc_1b9a4a: // 0160:1b9a4a
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 3806802) != 0x00000000)
        goto loc_1b9a8a;
    if (memoryAGet32(ds, eax + 3806762) == 0x00000000)
        goto loc_1b9a8a;
    ecx = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 50;
    if ((int32_t)eax > (int32_t)ecx)
        goto loc_1b9a0b;
loc_1b9a8a: // 0160:1b9a8a
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1626) == 0x00000000)
        goto loc_1b9ac3;
    edi = memoryAGet32(ds, 0x3c0fb4);
    ebx += 0x00000046;
    if ((int32_t)ebx > (int32_t)edi)
        goto loc_1b9a0b;
loc_1b9ac3: // 0160:1b9ac3
    eax = 0;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9aca() // 0160:1b9aca +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x1e3c6c);
    ebx = edx;
    ebx <<= 2;
    eax = memoryAGet32(ds, 0x1e3c64);
    ebx += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x3a161e);
    ebx <<= 3;
    if (!edx)
        goto loc_1b9b42;
    ecx = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 20;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1b9b42;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000019;
    sub_1b7e53();
    if (!eax)
        goto loc_1b9c73;
    bl = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x3a9f71, bl);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9b42: // 0160:1b9b42
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1622) == 0x00000000)
        goto loc_1b9ba5;
    edi = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 30;
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1b9ba5;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000022;
    sub_1b7e53();
    if (!eax)
        goto loc_1b9c73;
    dh = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x3a9f71, dh);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9ba5: // 0160:1b9ba5
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 3806802) != 0x00000000)
        goto loc_1b9c13;
    if (memoryAGet32(ds, eax + 3806762) == 0x00000000)
        goto loc_1b9c13;
    ecx = memoryAGet32(ds, 0x3c0fb4);
    eax = ebx + 50;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1b9c13;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000033;
    sub_1b7e53();
    if (!eax)
        goto loc_1b9c73;
    dl = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x3a9f71, dl);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9c13: // 0160:1b9c13
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1626) == 0x00000000)
        goto loc_1b9c71;
    edi = memoryAGet32(ds, 0x3c0fb4);
    ebx += 0x00000046;
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1b9c71;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000000b;
    sub_1b7e53();
    if (!eax)
        goto loc_1b9c73;
    memoryASet(ds, 0x3a9f71, 0x01);
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b9c71: // 0160:1b9c71
    eax = 0;
loc_1b9c73: // 0160:1b9c73
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9c78() // 0160:1b9c78 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    sub_1b9948();
    if (!eax)
        goto loc_1b9fd6;
    ebx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x3a1cc4);
    esi = eax;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0xffffffff;
    cl = memoryAGet(ds, 0x1e3c64);
    memoryASet32(ds, 0x3c0fb4, ebp);
    memoryASet32(ds, 0x3c0fb8, edi);
    memoryASet32(ds, esp + 12, eax);
    eax = 0x00000001;
    memoryASet32(ds, 0x3c0fbc, edi);
    eax <<= cl;
    ebx = 0x00000008;
    eax ^= 0x0000ffff;
    memoryASet32(ds, 0x3c0fa4, ebx);
    memoryASet16(ds, 0x3a1c52, ax);
    eax = 0x00000001;
    memoryASet32(ds, 0x3c0fac, ebx);
    memoryASet32(ds, esp + 16, eax);
    ebp = 0;
loc_1b9d2c: // 0160:1b9d2c
    if (ebp == memoryAGet32(ds, esp + 16))
        goto loc_1b9f87;
    if ((int32_t)edi <= 0)
        goto loc_1b9f87;
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_1b9f87;
    if ((int32_t)esi >= (int32_t)0x0000017a)
        goto loc_1b9f87;
    edx = esi + -8;
    eax = edi;
    sub_1b7868();
    if ((int32_t)eax <= (int32_t)0x00000400)
        goto loc_1b9f87;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_1b9f87;
    sub_1b7d96();
    if (memoryAGet32(ds, esp + 16) != 0x00000001)
        goto loc_1b9dd3;
    ebx = 0x00000040;
    edx = esi;
    eax = edi;
    sub_1b7ae4();
    if (!eax)
        goto loc_1b9dd3;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3c0fbc, edi);
    edx = -edx;
    memoryASet32(ds, 0x3c0fb4, eax);
    memoryASet32(ds, esp, edx);
    edx = memoryAGet32(ds, 0x1e3c6c);
    eax = ebp;
    edx <<= 3;
    ebx = memoryAGet32(ds, esp);
    sub_1b7c85();
    eax = (int32_t)eax * (int32_t)ebx;
    ecx = memoryAGet32(ds, 0x3c0fbc);
    ecx += eax;
    eax = 0x00000002;
    memoryASet32(ds, 0x3c0fbc, ecx);
    memoryASet32(ds, esp + 16, eax);
loc_1b9dd3: // 0160:1b9dd3
    edx = memoryAGet32(ds, esp);
    edi += edx;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_1b9df2: // 0160:1b9df2
    if ((int32_t)esi <= 0)
        goto loc_1b9e40;
    if (edi >= 0x000003c0)
        goto loc_1b9e40;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, ecx + eax + 2344144);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b9e47;
loc_1b9e40: // 0160:1b9e40
    eax = 0x00000001;
    goto loc_1b9e49;
loc_1b9e47: // 0160:1b9e47
    eax = ebp;
loc_1b9e49: // 0160:1b9e49
    if (!eax)
        goto loc_1b9e5e;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_1b9e5e;
    ebx += 0x000003c0;
    esi++;
    goto loc_1b9df2;
loc_1b9e5e: // 0160:1b9e5e
    ebx = memoryAGet32(ds, esp + 8);
    eax = esi;
    eax -= ebx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1b9e6f;
    memoryASet32(ds, esp + 16, ebp);
loc_1b9e6f: // 0160:1b9e6f
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_1b9e89: // 0160:1b9e89
    if ((int32_t)esi <= 0)
        goto loc_1b9ee0;
    if (edi >= 0x000003c0)
        goto loc_1b9ee0;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 3244656);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b9ee0;
    if ((int32_t)esi <= 0)
        goto loc_1b9ee0;
    ebx -= 0x000003c0;
    esi--;
    goto loc_1b9e89;
loc_1b9ee0: // 0160:1b9ee0
    eax = memoryAGet32(ds, esp + 4);
    eax -= esi;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1b9eef;
    memoryASet32(ds, esp + 16, ebp);
loc_1b9eef: // 0160:1b9eef
    ebx = esi + -8;
    if ((int32_t)ebx <= 0)
        goto loc_1b9f55;
    if (edi >= 0x000003c0)
        goto loc_1b9f55;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b9f55;
    memoryASet32(ds, esp + 16, ebp);
loc_1b9f55: // 0160:1b9f55
    ecx = memoryAGet32(ds, esp);
    ebx = 0x003c1044;
    edx = esi;
    push32(ecx);
    eax = edi;
    ecx = 0x003c1040;
    sub_1984fb();
    if ((int32_t)eax <= (int32_t)0xfffe0000)
        goto loc_1b9f7a;
    if ((int32_t)eax <= (int32_t)0x00020000)
        goto loc_1b9f7e;
loc_1b9f7a: // 0160:1b9f7a
    memoryASet32(ds, esp + 16, ebp);
loc_1b9f7e: // 0160:1b9f7e
    memoryASet32(ds, esp + 12, memoryAGet32(ds, esp + 12) - 1);
    goto loc_1b9d2c;
loc_1b9f87: // 0160:1b9f87
    edx = 0x0000ffff;
    ecx = memoryAGet32(ds, 0x3c0fb4);
    memoryASet16(ds, 0x3a1c52, dx);
    if ((int32_t)ecx < 0)
        goto loc_1b9fd4;
    eax = memoryAGet32(ds, 0x3c0fbc);
    eax -= edi;
    memoryASet32(ds, 0x3c0fb0, edi);
    if ((int32_t)eax >= 0)
        goto loc_1b9fb0;
    eax = -eax;
loc_1b9fb0: // 0160:1b9fb0
    edx = memoryAGet32(ds, 0x1e3c6c);
    ebx = 0x00000040;
    edx <<= 4;
    ebx -= edx;
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_1b9fd4;
    sub_1b99c1();
    if (!eax)
        goto loc_1b9fd4;
    eax = 0x00000001;
    goto loc_1b9fd6;
loc_1b9fd4: // 0160:1b9fd4
    eax = 0;
loc_1b9fd6: // 0160:1b9fd6
    esp += 0x00000014;
    goto loc_1ba80c;
    // gap 2094 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b9fde() // 0160:1b9fde +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ebx = eax;
    ecx = edx;
    edx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    edi = memoryAGet32(ds, 0x3c0fa4);
    if ((int32_t)edi > 0)
        goto loc_1ba061;
    if (memoryAGet32(ds, edx + 3803530) != 0x00000000)
        goto loc_1ba04f;
    if (memoryAGet32(ds, edx + 3803486) != 0x00000000)
        goto loc_1ba04f;
    if (memoryAGet32(ds, edx + 3803490) != 0x00000000)
        goto loc_1ba04f;
    if (memoryAGet32(ds, edx + 3803510) != 0x00000000)
        goto loc_1ba04f;
    eax = memoryAGet32(ds, 0x3c0fac);
    edx = eax + -1;
    memoryASet32(ds, 0x3c0fac, edx);
    if ((int32_t)eax > 0)
        goto loc_1ba0e0;
    edi = 0x00000008;
    eax = 0x00000001;
    memoryASet32(ds, 0x3c0fa4, edi);
    memoryASet32(ds, 0x3c0fac, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ba04f: // 0160:1ba04f
    esi = 0x00000008;
    eax = 0;
    memoryASet32(ds, 0x3c0fac, esi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ba061: // 0160:1ba061
    eax = memoryAGet32(ds, edx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi + -1;
    if ((int32_t)ecx <= 0)
        goto loc_1ba0ac;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, 0x3c0fb8))
        goto loc_1ba08b;
    memoryASet32(ds, 0x3c0fa4, edx);
    goto loc_1ba095;
loc_1ba08b: // 0160:1ba08b
    memoryASet32(ds, 0x3c0fa4, 0x00000008);
loc_1ba095: // 0160:1ba095
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1ba0a2;
    memoryASet(ds, 0x3a9f85, 0x01);
    goto loc_1ba0db;
loc_1ba0a2: // 0160:1ba0a2
    edi = 0;
    memoryASet32(ds, 0x3c0fa4, edi);
    goto loc_1ba0db;
loc_1ba0ac: // 0160:1ba0ac
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x3c0fb8))
        goto loc_1ba0bc;
    memoryASet32(ds, 0x3c0fa4, edx);
    goto loc_1ba0c6;
loc_1ba0bc: // 0160:1ba0bc
    memoryASet32(ds, 0x3c0fa4, 0x00000008);
loc_1ba0c6: // 0160:1ba0c6
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_1ba0d3;
    memoryASet(ds, 0x3a9f83, 0x01);
    goto loc_1ba0db;
loc_1ba0d3: // 0160:1ba0d3
    ebx = 0;
    memoryASet32(ds, 0x3c0fa4, ebx);
loc_1ba0db: // 0160:1ba0db
    memoryASet32(ds, 0x3c0fb8, eax);
loc_1ba0e0: // 0160:1ba0e0
    eax = 0;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba0e7() // 0160:1ba0e7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000002c;
    push32(eax);
    esi = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    ebx = memoryAGet32(ds, 0x1e3c8c);
    edi = memoryAGet32(ds, esi + 3803494);
    esi = memoryAGet32(ds, esi + 3803498);
    if (ebx)
        goto loc_1ba143;
    if ((int32_t)eax >= 0)
        goto loc_1ba143;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f94, eax);
    memoryASet32(ds, 0x3c0f8c, eax);
    eax = 0x00000008;
    memoryASet32(ds, 0x3c0f90, ebx);
    memoryASet32(ds, 0x3c0f98, eax);
    memoryASet32(ds, 0x3c0f9c, eax);
loc_1ba143: // 0160:1ba143
    edx = memoryAGet32(ds, 0x3a1cc4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = memoryAGet32(ds, 0x1e3c8c);
    memoryASet32(ds, esp + 24, eax);
    if (!ebx)
        goto loc_1ba182;
    ecx = 0x00000400;
    edi = memoryAGet32(ds, 0x1e3c84);
    esi = memoryAGet32(ds, 0x1e3c88);
    memoryASet32(ds, esp + 24, ecx);
    goto loc_1ba18e;
loc_1ba182: // 0160:1ba182
    memoryASet32(ds, 0x1e3c84, edi);
    memoryASet32(ds, 0x1e3c88, esi);
loc_1ba18e: // 0160:1ba18e
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, edi);
    edi = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 40, esi);
    esi = eax;
    eax = edi;
    ebp = memoryAGet32(ds, esp + 44);
    eax <<= 9;
    ebp -= eax;
    eax = esi;
    edx = memoryAGet32(ds, esp + 40);
    eax <<= 9;
    cl = memoryAGet(ds, 0x1e3c64);
    edx -= eax;
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, esp + 44, ebp);
    eax ^= 0x0000ffff;
    ebp = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x3a1c52, ax);
    eax = ebp * 0x000001e6;
    ebx = 0;
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 40, edx);
    memoryASet32(ds, esp + 8, eax);
    eax = ebp;
    ecx = 0x00000001;
    eax <<= 4;
    memoryASet32(ds, esp + 36, ecx);
    memoryASet32(ds, esp + 4, eax);
    ebp = 0;
loc_1ba215: // 0160:1ba215
    if (ebp == memoryAGet32(ds, esp + 36))
        goto loc_1ba774;
    if ((int32_t)edi <= 0)
        goto loc_1ba774;
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_1ba774;
    if ((int32_t)esi >= (int32_t)0x0000017a)
        goto loc_1ba774;
    edx = esi + -8;
    eax = edi;
    sub_1b7868();
    if ((int32_t)eax <= (int32_t)0x00000400)
        goto loc_1ba774;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_1ba774;
    ebx = memoryAGet32(ds, esp + 28);
    sub_1b7d96();
    if (ebp != ebx)
        goto loc_1ba4df;
    if (ebx != memoryAGet32(ds, 0x1e3c8c))
        goto loc_1ba2f0;
    edx = esi;
    eax = edi;
    sub_1b78cc();
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1ba28f;
    memoryASet32(ds, 0x3c0f90, ebp);
loc_1ba28f: // 0160:1ba28f
    edx = esi;
    ebx = 0;
    eax = edi;
    bx = memoryAGet16(ds, 0x3a1c52);
    sub_1b7c0e();
    ecx = eax;
    ebx = eax;
    edx = esi + -8;
    eax = edi;
    sub_1b8095();
    if (!eax)
        goto loc_1ba2b9;
    ebx = ecx + 268435456;
loc_1ba2b9: // 0160:1ba2b9
    edx = esi + -8;
    eax = edi;
    sub_1b80f2();
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1ba2ce;
    ebx += 0x01000000;
loc_1ba2ce: // 0160:1ba2ce
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x3c0f90))
        goto loc_1ba2f0;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x3c0f8c, edi);
    memoryASet32(ds, 0x3c0f88, esi);
    memoryASet32(ds, 0x3c0f90, ebx);
    memoryASet32(ds, 0x3c0f84, eax);
loc_1ba2f0: // 0160:1ba2f0
    ebx = memoryAGet32(ds, esp);
    edi += ebx;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 20, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_1ba30f: // 0160:1ba30f
    if ((int32_t)esi <= 0)
        goto loc_1ba35b;
    if (edi >= 0x000003c0)
        goto loc_1ba35b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, ebx + 3244656);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ba362;
loc_1ba35b: // 0160:1ba35b
    eax = 0x00000001;
    goto loc_1ba364;
loc_1ba362: // 0160:1ba362
    eax = ebp;
loc_1ba364: // 0160:1ba364
    if (!eax)
        goto loc_1ba379;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_1ba379;
    ebx += 0x000003c0;
    esi++;
    goto loc_1ba30f;
loc_1ba379: // 0160:1ba379
    ecx = memoryAGet32(ds, esp + 20);
    eax = esi;
    eax -= ecx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1ba38a;
    memoryASet32(ds, esp + 36, ebp);
loc_1ba38a: // 0160:1ba38a
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 16, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_1ba3a4: // 0160:1ba3a4
    if ((int32_t)esi <= 0)
        goto loc_1ba3fd;
    if (edi >= 0x000003c0)
        goto loc_1ba3fd;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, ebx + 3244656);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ba3fd;
    if ((int32_t)esi <= 0)
        goto loc_1ba3fd;
    ebx -= 0x000003c0;
    esi--;
    goto loc_1ba3a4;
loc_1ba3fd: // 0160:1ba3fd
    eax = memoryAGet32(ds, esp + 16);
    eax -= esi;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1ba40c;
    memoryASet32(ds, esp + 36, ebp);
loc_1ba40c: // 0160:1ba40c
    ebx = esi + -8;
    if ((int32_t)ebx <= 0)
        goto loc_1ba472;
    if (edi >= 0x000003c0)
        goto loc_1ba472;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ba472;
    memoryASet32(ds, esp + 36, ebp);
loc_1ba472: // 0160:1ba472
    if (ebp == memoryAGet32(ds, esp + 36))
        goto loc_1ba69d;
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    ecx = 0x003c1040;
    ebx = 0x003c1044;
    push32(edx);
    eax += edi;
    edx = esi;
    sub_1984fb();
    if ((int32_t)eax > (int32_t)0xfffe0000)
        goto loc_1ba69d;
    eax = edi;
    ebx = memoryAGet32(ds, esp + 44);
    eax <<= 9;
    ecx = memoryAGet32(ds, esp + 40);
    ebx += eax;
    eax = esi;
    edx = 0x00000001;
    eax <<= 9;
    memoryASet32(ds, esp + 28, edx);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esp + 44, ebx);
    memoryASet32(ds, esp + 12, eax);
    eax = 0xfffffc01;
    memoryASet32(ds, esp + 40, ecx);
    memoryASet32(ds, esp + 32, eax);
    goto loc_1ba69d;
loc_1ba4df: // 0160:1ba4df
    eax = memoryAGet32(ds, esp + 32);
    ecx = memoryAGet32(ds, esp + 40);
    esi = memoryAGet32(ds, esp + 32);
    ecx += eax;
    eax = memoryAGet32(ds, 0x3a1d44);
    edi = memoryAGet32(ds, esp + 44);
    esi += eax;
    eax = memoryAGet32(ds, esp + 12);
    edi += eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, edi);
    edi = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 32, esi);
    esi = eax;
    ebx = eax + 1;
    memoryASet32(ds, esp + 40, ecx);
    if ((int32_t)ebx <= 0)
        goto loc_1ba5c6;
    if (edi >= 0x000003c0)
        goto loc_1ba5c6;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ba5c6;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, memoryAGet32(ds, esp + 44) - eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esp + 40);
    ebx -= eax;
    memoryASet32(ds, esp + 28, ebp);
    memoryASet32(ds, esp + 40, ebx);
loc_1ba5c6: // 0160:1ba5c6
    if ((int32_t)memoryAGet32(ds, esp + 32) > (int32_t)0x00000600)
        goto loc_1ba699;
    ebx = esi + -16;
    if ((int32_t)ebx <= 0)
        goto loc_1ba636;
    if (edi >= 0x000003c0)
        goto loc_1ba636;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0x23c4d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1ba699;
loc_1ba636: // 0160:1ba636
    if ((int32_t)esi <= 0)
        goto loc_1ba69d;
    if (edi >= 0x000003c0)
        goto loc_1ba69d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ds, ebx + eax * 2 + 0x23c4d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x3a1c52);
    edx &= eax;
    eax = esi * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ba69d;
loc_1ba699: // 0160:1ba699
    memoryASet32(ds, esp + 36, ebp);
loc_1ba69d: // 0160:1ba69d
    if (ebp != memoryAGet32(ds, esp + 28))
        goto loc_1ba6cc;
    ecx = memoryAGet32(ds, esp);
    ebx = 0x003c1044;
    edx = esi;
    push32(ecx);
    eax = edi;
    ecx = 0x003c1040;
    sub_1984fb();
    if ((int32_t)eax <= (int32_t)0xfffe0000)
        goto loc_1ba6c8;
    if ((int32_t)eax <= (int32_t)0x00100000)
        goto loc_1ba6cc;
loc_1ba6c8: // 0160:1ba6c8
    memoryASet32(ds, esp + 36, ebp);
loc_1ba6cc: // 0160:1ba6cc
    eax = memoryAGet32(ds, esp + 24);
    eax--;
    edx = memoryAGet32(ds, 0x1e3c8c);
    memoryASet32(ds, esp + 24, eax);
    if (ebp == edx)
        goto loc_1ba215;
    eax = memoryAGet32(ds, 0x3a1f1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = edi;
    ebx -= eax;
    eax = memoryAGet32(ds, 0x3a1f20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = esi;
    ecx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = 0x000000ff;
    if ((int32_t)ebp <= (int32_t)ecx)
        goto loc_1ba728;
    if ((int32_t)edi > (int32_t)memoryAGet32(ds, 0x3c0f8c))
        goto loc_1ba728;
    eax = 0x000000fe;
loc_1ba728: // 0160:1ba728
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp))
        goto loc_1ba73a;
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x3c0f8c))
        goto loc_1ba73a;
    eax = 0x000000fe;
loc_1ba73a: // 0160:1ba73a
    if ((int32_t)ebx < 0)
        goto loc_1ba215;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_1ba215;
    if ((int32_t)edx < 0)
        goto loc_1ba215;
    if ((int32_t)edx >= (int32_t)0x000000a8)
        goto loc_1ba215;
    edx = edx * 0x00000140;
    memoryASet(ds, edx + ebx + 2661552, al);
    goto loc_1ba215;
loc_1ba774: // 0160:1ba774
    memoryASet16(ds, 0x3a1c52, 0xffff);
    esp += 0x00000030;
    goto loc_1ba80c;
    // gap 135 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ba7ae() // 0160:1ba7ae +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, 0x3c0f98) > (int32_t)0x00000000)
        goto loc_1ba822;
    if (memoryAGet32(ds, ebx + 3803530) != 0x00000000)
        goto loc_1ba813;
    if (memoryAGet32(ds, ebx + 3803486) != 0x00000000)
        goto loc_1ba813;
    if (memoryAGet32(ds, ebx + 3803490) != 0x00000000)
        goto loc_1ba813;
    if (memoryAGet32(ds, ebx + 3803510) != 0x00000000)
        goto loc_1ba813;
    eax = memoryAGet32(ds, 0x3c0f9c);
    edx = eax + -1;
    memoryASet32(ds, 0x3c0f9c, edx);
    if ((int32_t)eax > 0)
        goto loc_1baa1a;
    eax = 0x00000001;
loc_1ba809: // 0160:1ba809
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ba813: // 0160:1ba813
    ebp = 0x00000008;
    eax = 0;
    memoryASet32(ds, 0x3c0f9c, ebp);
    goto loc_1ba809;
loc_1ba822: // 0160:1ba822
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, ebx + 3803530);
    edi = eax;
    if (!ebp)
        goto loc_1ba88d;
    if ((int32_t)memoryAGet32(ds, 0x3c0f84) <= (int32_t)0x00000000)
        goto loc_1ba871;
    if ((int32_t)memoryAGet32(ds, ebx + 3803486) >= (int32_t)0x00000000)
        goto loc_1ba882;
    eax = 0;
    memoryASet32(ds, 0x3c0f98, eax);
    goto loc_1ba882;
loc_1ba871: // 0160:1ba871
    if ((int32_t)memoryAGet32(ds, ebx + 3803486) <= (int32_t)0x00000000)
        goto loc_1ba882;
    edi ^= eax;
    memoryASet32(ds, 0x3c0f98, edi);
loc_1ba882: // 0160:1ba882
    memoryASet32(ds, 0x3c0f94, esi);
    goto loc_1baa1a;
loc_1ba88d: // 0160:1ba88d
    ecx = eax + 1;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = ecx;
    ebx <<= 4;
    ebx -= ecx;
    ebx <<= 6;
    memoryASet32(ds, esp, ebx);
    ebx = eax;
    edx = ebp;
    ebp = ebx;
    ebx <<= 4;
    ebx -= ebp;
    edx += edx;
    ebx <<= 6;
    eax = memoryAGet32(ds, esp);
    ebx += edx;
    edx = memoryAGet32(ds, 0x3c0f84);
    eax += esi;
    if ((int32_t)edx <= 0)
        goto loc_1ba988;
    if ((int32_t)esi > (int32_t)memoryAGet32(ds, 0x3c0f94))
        goto loc_1ba926;
    if ((int32_t)ecx <= 0)
        goto loc_1ba930;
    if (esi >= 0x000003c0)
        goto loc_1ba930;
    ecx = 0;
    cx = memoryAGet16(ds, ebx + 2344144);
    ebx = 0;
    bx = memoryAGet16(ds, 0x3a1c52);
    al = memoryAGet(ds, eax + 3244656);
    ebx &= ecx;
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (!eax)
        goto loc_1ba930;
    memoryASet32(ds, 0x3c0f98, memoryAGet32(ds, 0x3c0f98) - 1);
    goto loc_1ba930;
loc_1ba926: // 0160:1ba926
    memoryASet32(ds, 0x3c0f98, 0x00000008);
loc_1ba930: // 0160:1ba930
    ebp = memoryAGet32(ds, 0x3c0f8c);
    if ((int32_t)esi >= (int32_t)ebp)
        goto loc_1ba97c;
    eax = ebp;
    dh = 0x01;
    eax -= esi;
    memoryASet(ds, 0x3a9f85, dh);
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1baa14;
    push32(0x00000001);
    ecx = 0x003c1040;
    ebx = 0x003c1044;
    eax = esi + 16;
loc_1ba95e: // 0160:1ba95e
    edx = edi;
    sub_1984fb();
    if ((int32_t)eax > (int32_t)0xfffe0000)
        goto loc_1baa14;
    memoryASet(ds, 0x3a9f54, 0x01);
    goto loc_1baa14;
loc_1ba97c: // 0160:1ba97c
    eax = 0;
    memoryASet32(ds, 0x3c0f98, eax);
    goto loc_1baa14;
loc_1ba988: // 0160:1ba988
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x3c0f94))
        goto loc_1ba9d4;
    if ((int32_t)ecx <= 0)
        goto loc_1ba9de;
    if (esi >= 0x000003c0)
        goto loc_1ba9de;
    edx = 0;
    dx = memoryAGet16(ds, ebx + 2344144);
    ebx = 0;
    bx = memoryAGet16(ds, 0x3a1c52);
    al = memoryAGet(ds, eax + 3244656);
    ebx &= edx;
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    ebx |= eax;
    if (!ebx)
        goto loc_1ba9de;
    memoryASet32(ds, 0x3c0f98, memoryAGet32(ds, 0x3c0f98) - 1);
    goto loc_1ba9de;
loc_1ba9d4: // 0160:1ba9d4
    memoryASet32(ds, 0x3c0f98, 0x00000008);
loc_1ba9de: // 0160:1ba9de
    ebx = memoryAGet32(ds, 0x3c0f8c);
    if ((int32_t)esi <= (int32_t)ebx)
        goto loc_1baa0c;
    memoryASet(ds, 0x3a9f83, 0x01);
    eax = esi;
    eax -= ebx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_1baa14;
    push32(0xffffffff);
    ecx = 0x003c1040;
    ebx = 0x003c1044;
    eax = esi + -16;
    goto loc_1ba95e;
loc_1baa0c: // 0160:1baa0c
    ecx = 0;
    memoryASet32(ds, 0x3c0f98, ecx);
loc_1baa14: // 0160:1baa14
    memoryASet32(ds, 0x3c0f94, esi);
loc_1baa1a: // 0160:1baa1a
    eax = 0;
    goto loc_1ba809;
}
void sub_1baa21() // 0160:1baa21 +long
{
    esp -= 4;
    goto loc_1baa21;
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 526 bytes
loc_1baa21: // 0160:1baa21
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edi = esp;
    esi = 0x001b779e;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = 0;
    eax = memoryAGet32(ds, 0x1e3c64);
    memoryASet32(ds, esp + 20, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    ebx = 0xffffffff;
    ecx = memoryAGet32(ds, eax * 4 + 0x3a162e);
    memoryASet32(ds, esp + 16, ebx);
    if (!ecx)
        goto loc_1bac7c;
    esi = 0;
    ecx = 0;
    edi = 0;
loc_1baa76: // 0160:1baa76
    if (memoryAGet32(ds, ecx + 3803494) == 0x00000000)
        goto loc_1bab24;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_1bab24;
    eax = memoryAGet32(ds, ecx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, ecx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = eax + -8;
    eax = ebx;
    sub_1b8095();
    if (!eax)
        goto loc_1bab24;
    eax = memoryAGet32(ds, 0x1e3c6c);
    edx = ebp;
    ebx <<= 9;
    edx <<= 9;
    eax = memoryAGet32(ds, esp + eax*4);
    memoryASet32(ds, esp + 12, ebx);
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    sub_1b8473();
    if (eax)
        goto loc_1bab24;
    eax = memoryAGet32(ds, edi + 3936048);
    edx = memoryAGet32(ds, esp + 20);
    eax &= 0x0000ffff;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1bab24;
    memoryASet32(ds, esp + 20, eax);
    memoryASet32(ds, esp + 16, esi);
loc_1bab24: // 0160:1bab24
    ecx += 0x000000ac;
    esi++;
    edi += 0x00000004;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1baa76;
    if ((int32_t)memoryAGet32(ds, esp + 20) < (int32_t)0x00000200)
        goto loc_1bac7c;
    eax = memoryAGet32(ds, esp + 16) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 3803494);
    edi = 0x00000026;
    memoryASet32(ds, 0x3c0f7c, edx);
    eax = memoryAGet32(ds, eax + 3803498);
    edx = 0x003c0f80;
    memoryASet32(ds, 0x3c0f80, eax);
    eax = 0x003c0f7c;
    memoryASet32(ds, 0x3c1088, edi);
    sub_1b86ca();
    eax = 0x00000032;
    edx = 0x00000001;
    memoryASet32(ds, 0x3c0f78, eax);
    eax = memoryAGet32(ds, 0x3a1d44);
    memoryASet32(ds, 0x3c1060, edx);
    memoryASet32(ds, 0x3c1050, eax);
    eax = memoryAGet32(ds, 0x3c0f80);
    edx = memoryAGet32(ds, 0x3c1050);
    eax += 0x00005000;
    edx += edx;
    eax = (int32_t)eax * (int32_t)edx;
    ebx = 0xffffb000;
    eax++;
    memoryASet32(ds, 0x3c106c, ebx);
    sub_1b77c2();
    ecx = memoryAGet32(ds, 0x3c1060);
    edx = eax;
    edx -= ecx;
    ebx = memoryAGet32(ds, 0x3c1050);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x3c1054, eax);
    memoryASet32(ds, 0x3c1074, eax);
    eax <<= 9;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax = memoryAGet32(ds, 0x3c0f7c);
    eax += edx;
    esi = 0;
    eax -= 0x00006000;
    memoryASet32(ds, 0x3c104c, esi);
    if ((int32_t)eax >= (int32_t)0x0003c000)
        goto loc_1bac24;
    ebp = 0xffffff00;
    memoryASet32(ds, 0x3c0f7c, eax);
    eax += 0x00006000;
    memoryASet32(ds, 0x3c105c, ebp);
    goto loc_1bac42;
loc_1bac24: // 0160:1bac24
    eax = memoryAGet32(ds, 0x3c0f7c);
    eax -= edx;
    edi = 0x00000100;
    edx = eax + 24576;
    memoryASet32(ds, 0x3c105c, edi);
    memoryASet32(ds, 0x3c0f7c, edx);
loc_1bac42: // 0160:1bac42
    memoryASet32(ds, 0x3c1068, eax);
    eax = memoryAGet32(ds, 0x3c0f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f7c, eax);
    eax = memoryAGet32(ds, 0x3c0f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f80, eax);
    eax = 0x00000001;
    goto loc_1bac7e;
loc_1bac7c: // 0160:1bac7c
    eax = 0;
loc_1bac7e: // 0160:1bac7e
    esp += 0x00000018;
    goto loc_1ba80c;
}
void sub_1bac86() // 0160:1bac86 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ebx = eax;
    ecx = ebx + -2;
    edi = edx + -2;
    eax = 0;
    ebx = edi;
    edi += 0x00000008;
    goto loc_1bad08;
loc_1bac9b: // 0160:1bac9b
    if ((int32_t)ebx <= 0)
        goto loc_1bad04;
    if (ecx >= 0x000003c0)
        goto loc_1bad04;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    eax += esi;
    esi = 0;
    si = memoryAGet16(ds, eax + 2344144);
    eax = 0;
    ax = memoryAGet16(ds, 0x3a1c52);
    esi &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 3244656);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_1bad04;
    eax = 0x00000001;
    goto loc_1bad06;
loc_1bad04: // 0160:1bad04
    eax = 0;
loc_1bad06: // 0160:1bad06
    ecx++;
    ebx++;
loc_1bad08: // 0160:1bad08
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_1bad10;
    if (!eax)
        goto loc_1bac9b;
loc_1bad10: // 0160:1bad10
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bad56() // 0160:1bad56 +long
{
    esp -= 4;
    goto loc_1bad56;
loc_1ba77d: // 0160:1ba77d
    esp += 0x00000030;
    goto loc_1ba80c;
    // gap 135 bytes
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1347 bytes
loc_1bad56: // 0160:1bad56
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000002c;
    push32(eax);
    edi = esp + 4;
    esi = 0x001b77aa;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = esp + 16;
    esi = 0x001b77b6;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x3a1632) == 0x00000000)
        goto loc_1baf79;
    edx = memoryAGet32(ds, 0x1e3c6c);
    eax = memoryAGet32(ds, esp + edx * 4 + 0x4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = 0x00000001;
    cl = memoryAGet(ds, 0x1e3c64);
    esi <<= cl;
    ebx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    edi = eax;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    si ^= 0xffff;
    ebx = esi;
    edx = ecx;
    sub_1b7928();
    if ((int32_t)eax < (int32_t)edi)
        goto loc_1bae13;
    if (memoryAGet32(ds, esp) == 0x00000001)
        goto loc_1baf79;
loc_1bae13: // 0160:1bae13
    esi = 0x00000040;
    ebp = 0x0000003e;
    edi = 0;
    eax = 0x00000042;
    memoryASet32(ds, esp + 40, edi);
    edi = 0x00318270;
    memoryASet32(ds, esp + 44, eax);
    edi += esi;
loc_1bae33: // 0160:1bae33
    sub_1b7d96();
    ecx = 0x00000030;
    eax = edi + 46080;
loc_1bae43: // 0160:1bae43
    if (!(memoryAGet32(ds, eax) & 0x80808080))
        goto loc_1bae5b;
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_1bae5b;
    ecx++;
    eax += 0x000003c0;
    goto loc_1bae43;
loc_1bae5b: // 0160:1bae5b
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_1baed6;
    ecx -= 0x00000020;
    if ((int32_t)ecx >= (int32_t)0x00000010)
        goto loc_1bae74;
    ecx = 0x00000010;
loc_1bae74: // 0160:1bae74
    eax = ecx * 0x000003c0;
    if (memoryAGet32(ds, edi + eax) != 0x80808080)
        goto loc_1baed6;
    edx = ecx + -2;
    eax = ebp;
    sub_1bac86();
    if (eax)
        goto loc_1baed6;
    ebx = 0x0000ffff;
    edx = ecx;
    eax = esi;
    sub_1b7928();
    ebx = eax;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 40))
        goto loc_1baed6;
    eax = memoryAGet32(ds, 0x1e3c6c);
    eax <<= 2;
    edx = ecx;
    memoryASet32(ds, esp + 28, eax);
    eax = esi;
    sub_1b7868();
    edx = memoryAGet32(ds, esp + 28);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + edx + 16))
        goto loc_1baed6;
    eax = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, esp + 32, ecx);
    memoryASet32(ds, esp + 40, ebx);
    memoryASet32(ds, esp + 36, eax);
loc_1baed6: // 0160:1baed6
    edx = memoryAGet32(ds, esp + 44);
    edi += 0x00000004;
    ebp += 0x00000004;
    edx += 0x00000004;
    esi += 0x00000004;
    memoryASet32(ds, esp + 44, edx);
    if ((int32_t)esi < (int32_t)0x00000380)
        goto loc_1bae33;
    edx = memoryAGet32(ds, 0x1e3c6c);
    eax = memoryAGet32(ds, esp + edx * 4 + 0x4);
    edx = eax;
    ebx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 40))
        goto loc_1baf79;
    eax = memoryAGet32(ds, esp + 36);
    eax -= 0x00000004;
    eax <<= 9;
    memoryASet32(ds, 0x3c0f7c, eax);
    eax = memoryAGet32(ds, esp + 32);
    eax -= 0x00000002;
    eax <<= 9;
    memoryASet32(ds, 0x3c0f80, eax);
    eax = memoryAGet32(ds, 0x3c0f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f7c, eax);
    eax = memoryAGet32(ds, 0x3c0f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = 0x00000016;
    edi = 0x00000032;
    ecx = 0x00000001;
    memoryASet32(ds, 0x3c1088, esi);
    memoryASet32(ds, 0x3c0f78, edi);
    memoryASet32(ds, 0x3c0f80, eax);
    goto loc_1baf7b;
loc_1baf79: // 0160:1baf79
    ecx = 0;
loc_1baf7b: // 0160:1baf7b
    eax = ecx;
    goto loc_1ba77d;
}
void sub_1baf82() // 0160:1baf82 +long
{
    esp -= 4;
    goto loc_1baf82;
loc_1ba804: // 0160:1ba804
    eax = 0x00000001;
loc_1ba809: // 0160:1ba809
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 519 bytes
loc_1baa1a: // 0160:1baa1a
    eax = 0;
    goto loc_1ba809;
    // gap 1377 bytes
loc_1baf82: // 0160:1baf82
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x1e3c64);
    memoryASet32(ds, esp, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    eax <<= 2;
    eax += ebx;
    ebx = memoryAGet32(ds, eax * 4 + 0x3a160a);
    ebp = 0;
    if (!ebx)
        goto loc_1baa1a;
    ebx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -5;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    sub_1b8095();
    if (!eax)
        goto loc_1ba809;
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_1bb00a: // 0160:1bb00a
    if (memoryAGet32(ds, ebx + 3803494) == 0x00000000)
        goto loc_1bb07d;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = memoryAGet32(ds, 0x1e3c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (edi == eax)
        goto loc_1bb07d;
    eax = memoryAGet32(ds, ebx + 3803498);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -16;
    eax = memoryAGet32(ds, ebx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi;
    sub_1b8095();
    if (!eax)
        goto loc_1bb07d;
    edi = memoryAGet32(ds, esi + 3936048);
    if ((int32_t)ebp > (int32_t)edi)
        goto loc_1bb07d;
    memoryASet32(ds, esp, ecx);
    ebp = edi;
loc_1bb07d: // 0160:1bb07d
    ebx += 0x000000ac;
    ecx++;
    esi += 0x00000004;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1bb00a;
    esi = memoryAGet32(ds, esp);
    if ((int32_t)esi < 0)
        goto loc_1baa1a;
    eax = esi * 0x000000ac;
    edi = 0x0000002b;
    edx = 0x003c0f80;
    ebx = memoryAGet32(ds, eax + 3803494);
    eax = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, 0x3c1088, edi);
    memoryASet32(ds, 0x3c0f80, eax);
    eax = 0x003c0f7c;
    memoryASet32(ds, 0x3c0f7c, ebx);
    sub_1b86ca();
    memoryASet32(ds, 0x3c0f78, 0x00000032);
    eax = memoryAGet32(ds, 0x3c0f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f7c, eax);
    eax = memoryAGet32(ds, 0x3c0f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x3c0f80, eax);
    goto loc_1ba804;
}
void sub_1bb10f() // 0160:1bb10f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = memoryAGet32(ds, 0x3c1088);
    sub_1b7e53();
    if (!eax)
        goto loc_1bb188;
    eax = memoryAGet32(ds, 0x3c0f7c);
    eax <<= 2;
    memoryASet32(ds, 0x3a1cd4, eax);
    eax = memoryAGet32(ds, 0x3c0f80);
    eax <<= 2;
    memoryASet32(ds, 0x3a1cd8, eax);
    eax = memoryAGet32(ds, 0x39eab0);
    memoryASet32(ds, 0x39eac8, eax);
    eax = memoryAGet32(ds, 0x39eab4);
    edx = memoryAGet32(ds, 0x3c0f78);
    memoryASet32(ds, 0x39eac4, eax);
    if (!edx)
        goto loc_1bb17b;
    esi = edx + -1;
    ecx = 0;
    eax = 0;
    memoryASet32(ds, 0x39eac0, ecx);
    memoryASet32(ds, 0x3c0f78, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bb17b: // 0160:1bb17b
    ebx = 0x00000001;
    memoryASet32(ds, 0x39eac0, ebx);
    eax = ebx;
loc_1bb188: // 0160:1bb188
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bb246() // 0160:1bb246 +long
{
    esp -= 4;
    goto loc_1bb246;
loc_1ba80c: // 0160:1ba80c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2611 bytes
loc_1bb246: // 0160:1bb246
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x1e3c70);
    eax--;
    if (eax > 0x000003bf)
        goto loc_1ba80c;
    ecx = 0x0000001f;
    edi = 0x001bb18e;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasw_inv<ES_EDI>(ax);
    edx = memoryAGet32(ds, 0x1e3c64) * 0x000000ac;
    switch (ecx)
    {
        case 0: goto loc_1ba80c;
        case 1: goto loc_1bb27c;
        case 2: goto loc_1bb2a8;
        case 3: goto loc_1bb2d4;
        case 4: goto loc_1bb2ee;
        case 5: goto loc_1bb308;
        case 6: goto loc_1bb361;
        case 7: goto loc_1bb3cb;
        case 8: goto loc_1bb3f2;
        case 9: goto loc_1bb438;
        case 10: goto loc_1bb44d;
        case 11: goto loc_1bb462;
        case 12: goto loc_1bb544;
        case 13: goto loc_1bb558;
        case 14: goto loc_1bb56c;
        case 15: goto loc_1bb588;
        case 16: goto loc_1bb5b1;
        case 17: goto loc_1bb5cb;
        case 18: goto loc_1bb5df;
        case 19: goto loc_1bb634;
        case 20: goto loc_1bb676;
        case 21: goto loc_1bb69b;
        case 22: goto loc_1bb6c3;
        case 23: goto loc_1bb6df;
        case 24: goto loc_1bb704;
        case 25: goto loc_1bb713;
        case 26: goto loc_1bb739;
        case 27: goto loc_1bb77c;
        case 28: goto loc_1bb79a;
        case 29: goto loc_1bb7c0;
        case 30: goto loc_1bb803;
        default:
            printf("unhandled: %x\n", ecx);
            stop("ind 0160:1bb274");
    }
loc_1bb27c: // 0160:1bb27c
    eax = 0xffffffff;
    sub_1b9c78();
    if (!eax)
        goto loc_1bb299;
    memoryASet32(ds, 0x1e3c70, 0x00000384);
    goto loc_1ba80c;
loc_1bb299: // 0160:1bb299
    memoryASet32(ds, 0x1e3c70, 0x00000002);
    goto loc_1ba80c;
loc_1bb2a8: // 0160:1bb2a8
    eax = 0x00000001;
    sub_1b9c78();
    if (!eax)
        goto loc_1bb2c5;
    memoryASet32(ds, 0x1e3c70, 0x000003b6);
    goto loc_1ba80c;
loc_1bb2c5: // 0160:1bb2c5
    memoryASet32(ds, 0x1e3c70, 0x00000005);
    goto loc_1ba80c;
loc_1bb2d4: // 0160:1bb2d4
    eax = 0xffffffff;
    ebx = 0x00000007;
    sub_1ba0e7();
loc_1bb2e3: // 0160:1bb2e3
    memoryASet32(ds, 0x1e3c70, ebx);
    goto loc_1ba80c;
loc_1bb2ee: // 0160:1bb2ee
    eax = 0x00000001;
    edx = 0x00000008;
    sub_1ba0e7();
loc_1bb2fd: // 0160:1bb2fd
    memoryASet32(ds, 0x1e3c70, edx);
    goto loc_1ba80c;
loc_1bb308: // 0160:1bb308
    sub_1ba7ae();
    if (!eax)
        goto loc_1ba80c;
    edi = memoryAGet32(ds, 0x1e3c64);
    eax = edi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000200;
    memoryASet32(ds, 0x3c1068, eax);
    eax = edi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803498);
    eax -= 0x00000c00;
    esi = 0x00000008;
    memoryASet32(ds, 0x3c106c, eax);
    eax = 0x00000009;
    memoryASet32(ds, 0x1e3c80, esi);
loc_1bb357: // 0160:1bb357
    memoryASet32(ds, 0x1e3c70, eax);
    goto loc_1ba80c;
loc_1bb361: // 0160:1bb361
    eax = 0x00000001;
    sub_1bad56();
    if (!eax)
        goto loc_1bb3bc;
    edx = memoryAGet32(ds, 0x1e3c64);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000200;
    memoryASet32(ds, 0x3c1068, eax);
    eax = edx * 0x000000ac;
    ebp = 0x00000008;
    ecx = 0x0000006e;
    eax = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, 0x1e3c80, ebp);
loc_1bb3a7: // 0160:1bb3a7
    eax -= 0x00000c00;
    memoryASet32(ds, 0x1e3c70, ecx);
loc_1bb3b2: // 0160:1bb3b2
    memoryASet32(ds, 0x3c106c, eax);
    goto loc_1ba80c;
loc_1bb3bc: // 0160:1bb3bc
    memoryASet32(ds, 0x1e3c70, 0x0000000a);
    goto loc_1ba80c;
loc_1bb3cb: // 0160:1bb3cb
    sub_1baa21();
    if (!eax)
        goto loc_1bb3e3;
    memoryASet32(ds, 0x1e3c70, 0x0000006e);
    goto loc_1ba80c;
loc_1bb3e3: // 0160:1bb3e3
    memoryASet32(ds, 0x1e3c70, 0x0000000b);
    goto loc_1ba80c;
loc_1bb3f2: // 0160:1bb3f2
    eax = 0;
    sub_1b960d();
    if (!eax)
        goto loc_1bb429;
    sub_1b974f();
    if (memoryAGet32(ds, 0x3c1088) == 0x00000006)
        goto loc_1bb41a;
    memoryASet32(ds, 0x1e3c70, 0x00000064);
    goto loc_1ba80c;
loc_1bb41a: // 0160:1bb41a
    memoryASet32(ds, 0x1e3c70, 0x000000c8);
    goto loc_1ba80c;
loc_1bb429: // 0160:1bb429
    memoryASet32(ds, 0x1e3c70, 0x0000005a);
    goto loc_1ba80c;
loc_1bb438: // 0160:1bb438
    edi = 0x0000005b;
    sub_1b951a();
loc_1bb442: // 0160:1bb442
    memoryASet32(ds, 0x1e3c70, edi);
    goto loc_1ba80c;
loc_1bb44d: // 0160:1bb44d
    esi = 0x0000005c;
    sub_1b9581();
loc_1bb457: // 0160:1bb457
    memoryASet32(ds, 0x1e3c70, esi);
    goto loc_1ba80c;
loc_1bb462: // 0160:1bb462
    if ((int32_t)memoryAGet32(ds, 0x3c100c) <= (int32_t)0x00000400)
        goto loc_1bb51d;
    if ((int32_t)memoryAGet32(ds, 0x3c0ff0) <= (int32_t)0x00000400)
        goto loc_1bb51d;
    sub_1baf82();
    if (!eax)
        goto loc_1bb4c7;
    eax = 0x00000008;
    edx = memoryAGet32(ds, 0x1e3c64);
    memoryASet32(ds, 0x1e3c80, eax);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000200;
    memoryASet32(ds, 0x3c1068, eax);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803498);
    ecx = 0x000002bc;
    goto loc_1bb3a7;
loc_1bb4c7: // 0160:1bb4c7
    eax = 0x00000002;
    sub_1bad56();
    if (!eax)
        goto loc_1bb51d;
    esi = memoryAGet32(ds, 0x1e3c64);
    eax = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000200;
    memoryASet32(ds, 0x3c1068, eax);
    eax = esi * 0x000000ac;
    ecx = 0x00000008;
    ebp = 0x0000006e;
    eax = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, 0x1e3c80, ecx);
    eax -= 0x00000c00;
    memoryASet32(ds, 0x1e3c70, ebp);
    goto loc_1bb3b2;
loc_1bb51d: // 0160:1bb51d
    sub_1b97fa();
    if (!eax)
        goto loc_1bb535;
    ebx = 0x00000064;
    sub_1b974f();
    goto loc_1bb2e3;
loc_1bb535: // 0160:1bb535
    memoryASet32(ds, 0x1e3c70, 0x00000320);
    goto loc_1ba80c;
loc_1bb544: // 0160:1bb544
    sub_1b94b9();
    if (!eax)
        goto loc_1ba80c;
    edi = 0;
    goto loc_1bb442;
loc_1bb558: // 0160:1bb558
    sub_1bb10f();
    if (!eax)
        goto loc_1ba80c;
    esi = 0;
    goto loc_1bb457;
loc_1bb56c: // 0160:1bb56c
    sub_1b94b9();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x000000cd);
    goto loc_1ba80c;
loc_1bb588: // 0160:1bb588
    if (memoryAGet32(ds, 0x3a1efc) != 0x00000000)
        goto loc_1ba80c;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x000000d2);
    goto loc_1ba80c;
loc_1bb5b1: // 0160:1bb5b1
    eax = 0xffffffff;
    ebp = 0x000000dc;
    sub_1ba0e7();
    memoryASet32(ds, 0x1e3c70, ebp);
    goto loc_1ba80c;
loc_1bb5cb: // 0160:1bb5cb
    eax = 0x00000001;
    edi = 0x000000e6;
    sub_1ba0e7();
    goto loc_1bb442;
loc_1bb5df: // 0160:1bb5df
    sub_1ba7ae();
    if (!eax)
        goto loc_1ba80c;
    ebx = memoryAGet32(ds, 0x1e3c64);
    eax = ebx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 3803494);
    eax -= 0x00000200;
    memoryASet32(ds, 0x3c1068, eax);
    eax = ebx * 0x000000ac;
    edx = 0x00000008;
    esi = 0x000000f0;
    eax = memoryAGet32(ds, eax + 3803498);
    memoryASet32(ds, 0x1e3c80, edx);
    eax -= 0x00000c00;
    memoryASet32(ds, 0x1e3c70, esi);
    goto loc_1bb3b2;
loc_1bb634: // 0160:1bb634
    eax = 0x00000001;
    sub_1b960d();
    if (!eax)
        goto loc_1bb65c;
    sub_1b974f();
    ebp = 0x00000006;
    eax = 0x00000064;
    memoryASet32(ds, 0x3c1088, ebp);
    goto loc_1bb357;
loc_1bb65c: // 0160:1bb65c
    esi = 0xffffd120;
    edi = 0x00000190;
    memoryASet32(ds, 0x3c105c, eax);
    memoryASet32(ds, 0x3c1060, esi);
    goto loc_1bb442;
loc_1bb676: // 0160:1bb676
    ebx = 0x00000096;
    edx = 0x00000001;
    eax = 0x00000040;
    ecx = 0;
    sub_1b7cb9();
    if (!eax)
        goto loc_1ba80c;
    ebx = 0;
    goto loc_1bb2e3;
loc_1bb69b: // 0160:1bb69b
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000003d;
    sub_1b7e53();
    if (!eax)
        goto loc_1ba80c;
    memoryASet(ds, 0x3a9f71, 0x01);
    goto loc_1ba80c;
loc_1bb6c3: // 0160:1bb6c3
    sub_1bb10f();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x000002c6);
    goto loc_1ba80c;
loc_1bb6df: // 0160:1bb6df
    ebx = 0x00000096;
    edx = 0x00000001;
    eax = 0x00000040;
    ecx = 0;
    sub_1b7cb9();
    if (!eax)
        goto loc_1ba80c;
    eax = 0;
    goto loc_1bb357;
loc_1bb704: // 0160:1bb704
    memoryASet32(ds, 0x1e3c70, 0x000001f4);
    goto loc_1ba80c;
loc_1bb713: // 0160:1bb713
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x3c0fbc);
    sub_1b9fde();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x00000389);
    goto loc_1ba80c;
loc_1bb739: // 0160:1bb739
    eax = memoryAGet32(ds, edx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= memoryAGet32(ds, 0x3c0fbc);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000002)
        goto loc_1bb2c5;
    sub_1b9aca();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x0000038e);
    goto loc_1ba80c;
loc_1bb77c: // 0160:1bb77c
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x3c0fb0);
    sub_1b9fde();
    if (!eax)
        goto loc_1ba80c;
    edx = 0;
    goto loc_1bb2fd;
loc_1bb79a: // 0160:1bb79a
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x3c0fbc);
    sub_1b9fde();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x000003bb);
    goto loc_1ba80c;
loc_1bb7c0: // 0160:1bb7c0
    eax = memoryAGet32(ds, edx + 3803494);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= memoryAGet32(ds, 0x3c0fbc);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000002)
        goto loc_1bb2c5;
    sub_1b9aca();
    if (!eax)
        goto loc_1ba80c;
    memoryASet32(ds, 0x1e3c70, 0x000003c0);
    goto loc_1ba80c;
loc_1bb803: // 0160:1bb803
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x3c0fb0);
    sub_1b9fde();
    if (!eax)
        goto loc_1ba80c;
    ecx = 0;
    memoryASet32(ds, 0x1e3c70, ecx);
    goto loc_1ba80c;
}
void sub_1bb827() // 0160:1bb827 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    esi <<= 3;
    esi += eax;
    esi <<= 2;
    eax = memoryAGet32(ds, 0x3c1068);
    memoryASet32(ds, esi + 3806546, eax);
    eax = memoryAGet32(ds, 0x3c106c);
    memoryASet32(ds, esi + 3806550, eax);
    eax = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, esi + 3806562, eax);
    eax = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, esi + 3806566, eax);
    eax = 0x003a1552;
    eax += esi;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_1b8658();
    edx = memoryAGet32(ds, 0x3c1074);
    edx -= eax;
    memoryASet32(ds, esi + 3806574, edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bb889() // 0160:1bb889 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x3c1068);
    memoryASet32(ds, eax + 3806222, edx);
    edx = memoryAGet32(ds, 0x3c106c);
    memoryASet32(ds, eax + 3806226, edx);
    edx = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, eax + 3806238, edx);
    edx = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, eax + 3806242, edx);
    eax += 0x003a140e;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_1b8658();
    eax = memoryAGet32(ds, 0x3c1074);
    memoryASet32(ds, 0x3c0f70, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bb8e7() // 0160:1bb8e7 +long
{
    esp -= 4;
    push32(esi);
    if (memoryAGet32(ds, 0x1e3c68) == 0x00000000)
        goto loc_1bb923;
    if (memoryAGet32(ds, 0x3c1088) != 0x00000000)
        goto loc_1bb923;
    if (memoryAGet32(ds, 0x1e3c6c) != 0x00000000)
        goto loc_1bb923;
    esi = memoryAGet32(ds, 0x3c0f70);
    esi--;
    memoryASet32(ds, 0x3c0f70, esi);
    if ((int32_t)esi >= 0)
        goto loc_1bb923;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, ebx, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, ecx, eax);
    eax = 0x00000001;
    esi = pop32();
    esp += 4;
    return;
loc_1bb923: // 0160:1bb923
    eax = 0;
    esi = pop32();
    esp += 4;
}
void sub_1bb927() // 0160:1bb927 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    edx = memoryAGet32(ds, 0x3c1068);
    memoryASet32(ds, eax * 4 + 0x3a140e, edx);
    edx = memoryAGet32(ds, 0x3c106c);
    memoryASet32(ds, eax * 4 + 0x3a1412, edx);
    edx = memoryAGet32(ds, 0x3c105c);
    memoryASet32(ds, eax * 4 + 0x3a141e, edx);
    edx = memoryAGet32(ds, 0x3c1060);
    memoryASet32(ds, eax * 4 + 0x3a1422, edx);
    edx = pop32();
    esp += 4;
}
void sub_1bb965() // 0160:1bb965 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x3c0f74);
    edx++;
    memoryASet32(ds, 0x3c0f74, edx);
    if ((int32_t)edx >= (int32_t)0x00000bb8)
        goto loc_1bb984;
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bb984: // 0160:1bb984
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000003d;
    sub_1b7e53();
    if (!eax)
        goto loc_1bb9a3;
    memoryASet(ds, 0x3a9f71, 0x01);
loc_1bb9a3: // 0160:1bb9a3
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bb9a8() // 0160:1bb9a8 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    al = (int32_t)memoryAGet32(ds, eax * 4 + 0x1e379a) < (int32_t)0x00000003;
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_1bb9cd() // 0160:1bb9cd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x1e3aac);
    if (edx)
        goto loc_1bbaa8;
    if (memoryAGet32(ds, 0x1e0004) != 0x00000000)
        goto loc_1bbaa8;
    if (memoryAGet32(ds, 0x3a1f00) != 0x00000000)
        goto loc_1bbaa8;
    if (memoryAGet32(ds, 0x3a1cc0) == 0x00000000)
        goto loc_1bbaa8;
    if (memoryAGet32(ds, 0x1e3c68) == 0x00000000)
        goto loc_1bba27;
    eax = memoryAGet32(ds, 0x3a1c64);
    if (eax == memoryAGet32(ds, 0x1e3c64))
        goto loc_1bba27;
    sub_1b7852();
    memoryASet32(ds, 0x1e3c68, edx);
loc_1bba27: // 0160:1bba27
    if (memoryAGet32(ds, 0x1e3c68) == 0x00000000)
        goto loc_1bba4e;
    memoryASet32(ds, 0x3c103c, memoryAGet32(ds, 0x3c103c) + 1);
    sub_1b7852();
    sub_1bb965();
    if (!eax)
        goto loc_1bbaa8;
    sub_1bb246();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bba4e: // 0160:1bba4e
    eax = memoryAGet32(ds, 0x3a1c64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 1980314);
    if ((int32_t)ebx >= (int32_t)0x00000003)
        goto loc_1bbaa8;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, 0x3a1c64);
    memoryASet32(ds, 0x1e3c6c, ebx);
    esi = 0;
    memoryASet32(ds, 0x1e3c68, ecx);
    memoryASet32(ds, 0x3c1054, esi);
    memoryASet32(ds, 0x1e3c64, eax);
    sub_1b8616();
    memoryASet32(ds, 0x1e3c70, ecx);
    memoryASet32(ds, 0x3c0f74, esi);
    memoryASet32(ds, 0x3c103c, esi);
loc_1bbaa8: // 0160:1bbaa8
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbbff() // 0160:1bbbff +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_1bbc05: // 0160:1bbc05
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_1bbc40;
    edx <<= 4;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_1bbc20;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_1bbc20;
    edx += eax;
    edx -= 0x00000030;
loc_1bbc20: // 0160:1bbc20
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_1bbc2f;
    if ((int32_t)eax > (int32_t)0x00000046)
        goto loc_1bbc2f;
    edx += eax;
    edx -= 0x00000037;
loc_1bbc2f: // 0160:1bbc2f
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1bbc05;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1bbc05;
    edx += eax;
    edx -= 0x00000057;
    goto loc_1bbc05;
loc_1bbc40: // 0160:1bbc40
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbc45() // 0160:1bbc45 +long
{
    esp -= 4;
    goto loc_1bbc45;
loc_1bbc40: // 0160:1bbc40
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bbc45: // 0160:1bbc45
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_1bbc4b: // 0160:1bbc4b
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_1bbc40;
    edx = edx * 0x0000000a;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_1bbc4b;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_1bbc4b;
    edx += eax;
    edx -= 0x00000030;
    goto loc_1bbc4b;
}
void sub_1bbc9d() // 0160:1bbc9d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000100;
    ebx = esp;
    eax += 0x0000000f;
    memoryASet32(ds, esp, edx);
    eax = sar32(eax, 0x04);
    edx = esp;
    memoryASet32(ds, esp + 4, eax);
    eax = 0x00000031;
    sub_1cc76a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1bbccd;
    eax = 0;
    goto loc_1bbce1;
loc_1bbccd: // 0160:1bbccd
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    edx = eax;
    eax = 0;
    edx <<= 16;
    ax = memoryAGet16(ds, esp);
    eax |= edx;
loc_1bbce1: // 0160:1bbce1
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbd1e() // 0160:1bbd1e +long
{
    esp -= 4;
    goto loc_1bbd1e;
loc_1bbce1: // 0160:1bbce1
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 55 bytes
loc_1bbd1e: // 0160:1bbd1e
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000101;
    ebx = esp;
    eax >>= 16;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, eax);
    edx = esp;
    eax = 0x00000031;
    sub_1cc76a();
    eax = memoryAGet32(ds, esp + 24);
    goto loc_1bbce1;
}
void sub_1bbd46() // 0160:1bbd46 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x3f6630);
    edx = eax;
    eax = esi;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f662c);
    edx = ecx;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f6620);
    edx = ebx;
    sub_1cc78d();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bbd74() // 0160:1bbd74 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x3f6630);
    edx = eax;
    eax = esi;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f662c);
    edx = ecx;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f6624);
    edx = ebx;
    sub_1cbd6f();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bbdfa() // 0160:1bbdfa +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_1bbd46();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_1bbd74();
    eax = memoryAGet32(ds, 0x3f6628);
    edx = esi;
    sub_1cbd6f();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbe3c() // 0160:1bbe3c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_1bbd46();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_1bbd74();
    eax = memoryAGet32(ds, 0x3f6628);
    sub_1cc785();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbe7a() // 0160:1bbe7a +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    ebp = edx;
    edx = 0x00000043;
    esi = ebx;
    eax = 0;
    esi = sar32(esi, 0x10);
    ebx &= 0x0000ffff;
    esi &= 0x000000ff;
    ecx = ebx;
    sub_1bbd46();
    edx = 0x00000044;
    ebx = esi;
    eax = 0;
    edi = 0;
    sub_1bbd74();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x3f662c);
    ebx = memoryAGet32(ds, esp);
    sub_1cbd6f();
    goto loc_1bbf15;
loc_1bbec3: // 0160:1bbec3
    eax = memoryAGet32(ds, 0x3f6620);
    edx = ecx;
    sub_1cc78d();
    edx = 0;
    eax = memoryAGet32(ds, 0x3f6628);
    dl = memoryAGet(ds, ebx);
    ecx++;
    sub_1cbd6f();
    if ((int32_t)ecx <= (int32_t)0x0000ffff)
        goto loc_1bbf13;
    edx = 0x00000044;
    eax = memoryAGet32(ds, 0x3f662c);
    sub_1cbd6f();
    esi++;
    eax = memoryAGet32(ds, 0x3f6624);
    edx = esi;
    sub_1cbd6f();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x3f662c);
    ecx = 0;
    sub_1cbd6f();
loc_1bbf13: // 0160:1bbf13
    ebx++;
    edi++;
loc_1bbf15: // 0160:1bbf15
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_1bbec3;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1bbf71() // 0160:1bbf71 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = memoryAGet32(ds, 0x1e3ce8);
    edx <<= 9;
    eax = sar32(eax, 0x00000001);
    edx += eax;
    ebx = memoryAGet32(ds, 0x1e3ce8);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = eax + eax;
    edx = 0x00000001;
    ebx = ecx;
    eax = esi;
    sub_1bbd46();
    edx = 0x00000001;
    eax = esi + 8;
    ebx = ecx;
    sub_1bbd46();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bbfb3() // 0160:1bbfb3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = ebx;
    if ((int32_t)edx < 0)
        goto loc_1bbff8;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    eax <<= 15;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_1bbfd6: // 0160:1bbfd6
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_1bbfe2;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_1bbfd6;
loc_1bbfe2: // 0160:1bbfe2
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx;
    ebx |= edx;
    edx = 0x00000009;
    sub_1bbd46();
loc_1bbff8: // 0160:1bbff8
    if ((int32_t)esi < 0)
        goto loc_1bc038;
    edx = esi;
    edx <<= 8;
    edx -= esi;
    edx <<= 15;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_1bc015: // 0160:1bc015
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_1bc021;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_1bc015;
loc_1bc021: // 0160:1bc021
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx + 8;
    ebx |= edx;
    edx = 0x00000009;
    sub_1bbd46();
loc_1bc038: // 0160:1bc038
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bc03b() // 0160:1bc03b +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    ebp = ebx;
    esi = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, 0x3f6634);
    ebx = 0x00000002;
    edi -= edx;
    ebp -= edx;
    esi -= edx;
    edx = 0;
    sub_1bbd74();
    eax = memoryAGet32(ds, esp);
    ebx = 0x00000002;
    edx = 0;
    eax += 0x00000008;
    memoryASet32(ds, esp + 24, esi);
    sub_1bbd74();
    if ((int32_t)ecx < 0)
        goto loc_1bc086;
    eax = memoryAGet32(ds, esp);
    edx = ecx;
    sub_1bbf71();
loc_1bc086: // 0160:1bc086
    if (ebp != memoryAGet32(ds, esp + 24))
        goto loc_1bc092;
    edx = 0;
    memoryASet32(ds, esp + 24, edx);
loc_1bc092: // 0160:1bc092
    esi = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 24);
    esi += 0x00000008;
    if (!ebx)
        goto loc_1bc0c7;
    eax = ebx + -1;
    ecx = eax;
    edx = 0x00000002;
    ecx = sar32(ecx, 0x07);
    memoryASet32(ds, esp + 4, eax);
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1bbd46();
    eax = memoryAGet32(ds, esp + 4);
    goto loc_1bc0e3;
loc_1bc0c7: // 0160:1bc0c7
    ecx = edi;
    ecx = sar32(ecx, 0x07);
    edx = 0x00000002;
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1bbd46();
    eax = edi;
loc_1bc0e3: // 0160:1bc0e3
    eax &= 0x0000007f;
    eax <<= 9;
    edx = 0x00000003;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    sub_1bbd46();
    edx = 0x00000002;
    ebx = ecx;
    eax = esi;
    sub_1bbd46();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x00000003;
    eax = esi;
    sub_1bbd46();
    ecx = ebp + -1;
    ebp = ecx;
    edx = 0x00000004;
    ebp = sar32(ebp, 0x07);
    eax = memoryAGet32(ds, esp);
    ebp &= 0x0000ffff;
    ecx &= 0x0000007f;
    ebx = ebp;
    ecx <<= 9;
    sub_1bbd46();
    edx = 0x00000005;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_1bbd46();
    eax = edi;
    esi = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x07);
    edx = 0x0000000a;
    eax &= 0x0000ffff;
    edi &= 0x0000007f;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    edi <<= 9;
    sub_1bbd46();
    edx = 0x0000000b;
    eax = memoryAGet32(ds, esp);
    ebx = edi;
    esi += 0x00000008;
    sub_1bbd46();
    edx = 0x00000004;
    ebx = ebp;
    eax = esi;
    sub_1bbd46();
    edx = 0x00000005;
    ebx = ecx;
    eax = esi;
    sub_1bbd46();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x0000000a;
    eax = esi;
    sub_1bbd46();
    edx = 0x0000000b;
    ebx = edi;
    eax = esi;
    sub_1bbd46();
    ebx = memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp);
    cl = memoryAGet(ds, esp);
    sub_1bbfb3();
    eax = 0x00000001;
    eax <<= cl;
    if (!(memoryAGet32(ds, 0x1e3cf0) & eax))
        goto loc_1bc216;
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1bc1ff;
    ebx = 0x00000008;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    sub_1bbd74();
    ebx = 0x00000008;
    eax = esi;
    goto loc_1bc20f;
loc_1bc1ff: // 0160:1bc1ff
    eax = memoryAGet32(ds, esp);
    ebx = 0;
    edx = 0;
    sub_1bbd74();
    eax = esi;
    ebx = 0;
loc_1bc20f: // 0160:1bc20f
    edx = 0;
    sub_1bbd74();
loc_1bc216: // 0160:1bc216
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_1bc21f() // 0160:1bc21f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = 0x00000001;
    edx = 0x0000004c;
    eax = 0;
    sub_1bbd74();
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0x00000043;
    eax -= 0x00000100;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0;
    eax -= 0x000000f5;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0x00000003;
    eax -= 0x00000100;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0;
    eax -= 0x000000f5;
    sub_1cbd6f();
    ebx = memoryAGet32(ds, 0x1e3cec);
    edx = 0x0000000e;
    ebx--;
    eax = 0;
    bl |= 0xc0;
    ecx = 0;
    sub_1bbd74();
    esi = 0;
    goto loc_1bc368;
loc_1bc29d: // 0160:1bc29d
    ebx = 0x00000002;
    edx = esi;
    eax = ecx;
    sub_1bbd74();
    ebx = 0x00000002;
    edx = 0x0000000d;
    eax = ecx;
    sub_1bbd74();
    edx = 0x00000001;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x00000002;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x00000003;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x00000004;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x00000005;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x0000000a;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x0000000b;
    ebx = esi;
    eax = ecx;
    sub_1bbd46();
    edx = 0x00000006;
    ebx = esi;
    eax = ecx;
    sub_1bbd74();
    edx = 0x00000007;
    ebx = esi;
    eax = ecx;
    sub_1bbd74();
    edx = 0x00000008;
    ebx = esi;
    eax = ecx;
    sub_1bbd74();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1bc359;
    ebx = 0x0000000f;
    edx = 0x0000000c;
    goto loc_1bc360;
loc_1bc359: // 0160:1bc359
    edx = 0x0000000c;
    ebx = esi;
loc_1bc360: // 0160:1bc360
    eax = ecx;
    sub_1bbd74();
    ecx++;
loc_1bc368: // 0160:1bc368
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, 0x1e3cec))
        goto loc_1bc29d;
    ebx = 0x00000003;
    edx = 0x0000004c;
    eax = 0;
    sub_1bbd74();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc38a() // 0160:1bc38a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_1bc21f();
    sub_1bc21f();
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0x00000001;
    eax -= 0x00000100;
    sub_1cbd6f();
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x1e3c98, edx);
    eax = 0;
    memoryASet32(ds, 0x1e3c98, ebx);
    sub_1bbdfa();
    eax = memoryAGet32(ds, 0x1e3c98);
    edx = eax + ebx;
    memoryASet32(ds, 0x1e3c98, edx);
    edx = 0;
    sub_1bbdfa();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc3dc() // 0160:1bc3dc +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_1cbd6f();
    edx = 0x0000004c;
    eax = 0;
    sub_1bbd74();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc403() // 0160:1bc403 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000080;
    eax = 0;
    sub_1bbdfa();
    eax = 0;
    sub_1bbe3c();
    if (eax == 0x00000080)
        goto loc_1bc422;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1bc422: // 0160:1bc422
    edx = 0x00000081;
    eax = 0x00040000;
    sub_1bbdfa();
    eax = 0;
    sub_1bbe3c();
    if (eax != 0x00000080)
        goto loc_1bc450;
    eax = 0x00040000;
    sub_1bbe3c();
    if (eax == 0x00000081)
        goto loc_1bc457;
loc_1bc450: // 0160:1bc450
    eax = 0x00000100;
    edx = pop32();
    esp += 4;
    return;
loc_1bc457: // 0160:1bc457
    edx = 0x00000082;
    eax = 0x00080000;
    sub_1bbdfa();
    eax = 0;
    sub_1bbe3c();
    if (eax != 0x00000080)
        goto loc_1bc496;
    eax = 0x00040000;
    sub_1bbe3c();
    if (eax != 0x00000081)
        goto loc_1bc496;
    eax = 0x00080000;
    sub_1bbe3c();
    if (eax == 0x00000082)
        goto loc_1bc49d;
loc_1bc496: // 0160:1bc496
    eax = 0x00000200;
    edx = pop32();
    esp += 4;
    return;
loc_1bc49d: // 0160:1bc49d
    edx = 0x00000083;
    eax = 0x000c0000;
    sub_1bbdfa();
    eax = 0;
    sub_1bbe3c();
    if (eax != 0x00000080)
        goto loc_1bc496;
    eax = 0x00040000;
    sub_1bbe3c();
    if (eax != 0x00000081)
        goto loc_1bc496;
    eax = 0x00080000;
    sub_1bbe3c();
    if (eax != 0x00000082)
        goto loc_1bc496;
    eax = 0x000c0000;
    sub_1bbe3c();
    if (eax != 0x00000083)
        goto loc_1bc496;
    eax = 0x00000400;
    edx = pop32();
    esp += 4;
}
void sub_1bc4f4() // 0160:1bc4f4 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000080;
    eax = 0x001d623b;
    edx = 0;
    edi = esp;
    memoryASet32(ds, 0x1e3c94, edx);
    sub_1cc798();
    esi = eax;
    push32(edi);
loc_1bc515: // 0160:1bc515
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1bc52d;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1bc515;
loc_1bc52d: // 0160:1bc52d
    edi = pop32();
    eax = esp;
    sub_1cc7fb();
    ah = 0;
    memoryASet(ds, esp + 3, ah);
    eax = esp;
    sub_1bbbff();
    edi = eax + 256;
    memoryASet32(ds, 0x1e3c90, edi);
    edi = eax + 258;
    memoryASet32(ds, 0x3f6630, edi);
    edi = eax + 259;
    memoryASet32(ds, 0x3f662c, edi);
    edi = eax + 260;
    memoryASet32(ds, 0x3f6620, edi);
    edi = eax + 261;
    ebx = memoryAGet32(ds, 0x1e3c90);
    eax += 0x00000107;
    memoryASet32(ds, 0x3f6624, edi);
    memoryASet32(ds, 0x3f6628, eax);
    if ((int32_t)ebx < (int32_t)0x00000310)
        goto loc_1bc5c8;
    if ((int32_t)ebx > (int32_t)0x00000360)
        goto loc_1bc5c8;
    sub_1bc38a();
    sub_1bc403();
    memoryASet32(ds, 0x1e3c94, eax);
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_1bc5ba;
    memoryASet32(ds, 0x1e3c94, edx);
loc_1bc5ba: // 0160:1bc5ba
    if (memoryAGet32(ds, 0x1e3c94) != 0x00000000)
        goto loc_1bc5c8;
    sub_1bc3dc();
loc_1bc5c8: // 0160:1bc5c8
    eax = memoryAGet32(ds, 0x1e3c94);
    esp += 0x00000080;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc5d8() // 0160:1bc5d8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = 0xe1;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bc5e8: // 0160:1bc5e8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bc5e8;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f65e4);
    ecx = 0x0000ffff;
loc_1bc5fb: // 0160:1bc5fb
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_1bc5fb;
    eax = memoryAGet32(ds, 0x3f65e8);
    sub_1cc785();
    ebx = eax;
    edx = memoryAGet32(ds, 0x3f65e4);
    ecx = 0x0000ffff;
loc_1bc617: // 0160:1bc617
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_1bc617;
    eax = memoryAGet32(ds, 0x3f65e8);
    ebx <<= 8;
    sub_1cc785();
    edx = memoryAGet32(ds, 0x1e3cf8);
    ebx |= eax;
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1bc637;
    ebx = edx;
loc_1bc637: // 0160:1bc637
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc63d() // 0160:1bc63d +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x3f65f0);
    edx = 0x00000001;
    eax += 0x00000006;
    sub_1cbd6f();
    eax = 0x00000001;
    sub_1cc81a();
    eax = memoryAGet32(ds, 0x3f65f0);
    edx = 0;
    eax += 0x00000006;
    sub_1cbd6f();
    eax = 0x00000001;
    sub_1cc81a();
    edx = memoryAGet32(ds, 0x3f65e4);
    ecx = 0x0000ffff;
loc_1bc67f: // 0160:1bc67f
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_1bc67f;
    eax = memoryAGet32(ds, 0x3f65f0);
    eax += 0x0000000a;
    sub_1cc785();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bc694() // 0160:1bc694 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x3f65c0) == 0x00000000)
        goto loc_1bc6e4;
    eax = memoryAGet32(ds, 0x3f65f0);
    edx = 0x0000000e;
    eax += 0x00000004;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f65f0);
    eax += 0x00000005;
    sub_1cc785();
    ebx = eax;
    eax = memoryAGet32(ds, 0x3f65f0);
    edx = 0x0000000e;
    eax += 0x00000004;
    bl |= 0x02;
    sub_1cbd6f();
    eax = memoryAGet32(ds, 0x3f65f0);
    edx = ebx;
    eax += 0x00000005;
    sub_1cbd6f();
loc_1bc6e4: // 0160:1bc6e4
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc6e7() // 0160:1bc6e7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    edx = 0;
    goto loc_1bc6f6;
loc_1bc6f0: // 0160:1bc6f0
    sub_1bc63d();
    edx++;
loc_1bc6f6: // 0160:1bc6f6
    bl = (int32_t)edx < (int32_t)0x00000064;
    ecx = ebx;
    ecx &= 0x000000ff;
    bl = eax != 0x000000aa;
    ebx &= 0x000000ff;
    if (ecx & ebx)
        goto loc_1bc6f0;
    al = eax == 0x000000aa;
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bc727() // 0160:1bc727 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bc6e7();
    memoryASet32(ds, 0x1e3cf4, eax);
    sub_1bc5d8();
    memoryASet32(ds, 0x3f661c, eax);
    al = (int32_t)eax >= (int32_t)0x00000200;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3f660c, eax);
    eax = memoryAGet32(ds, 0x3f661c);
    eax = sar32(eax, 0x08);
    al = eax == 0x00000003;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x3f65c0, eax);
    eax = memoryAGet32(ds, 0x3f661c);
    eax = sar32(eax, 0x08);
    al = eax == 0x00000004;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, 0x3f65c0);
    memoryASet32(ds, 0x3f6618, eax);
    if (edx)
        goto loc_1bc78e;
    if (!eax)
        goto loc_1bc798;
loc_1bc78e: // 0160:1bc78e
    esi = 0;
    memoryASet32(ds, 0x3f65e0, esi);
    goto loc_1bc7a2;
loc_1bc798: // 0160:1bc798
    memoryASet32(ds, 0x3f65e0, 0x00000001);
loc_1bc7a2: // 0160:1bc7a2
    sub_1bc694();
    ah = 0xd1;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bc7b4: // 0160:1bc7b4
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bc7b4;
    al = ah;
    out8(dx, al);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bc7c0() // 0160:1bc7c0 +long
{
    esp -= 4;
    push32(ecx);
loc_1bc7c1: // 0160:1bc7c1
    ah = memoryAGet(ds, edx);
    if (al == ah)
        goto loc_1bc7ce;
    if (!ah)
        goto loc_1bc7ce;
    edx++;
    goto loc_1bc7c1;
loc_1bc7ce: // 0160:1bc7ce
    ecx = edx;
    ah = memoryAGet(ds, ecx);
    edx++;
    if (al != ah)
        goto loc_1bc7fc;
loc_1bc7d7: // 0160:1bc7d7
    eax = 0;
    al = memoryAGet(ds, edx);
    ecx = 0;
    al = eax != 0x00000020;
    cl = al;
    al = memoryAGet(ds, edx) != 0x00;
    eax &= 0x000000ff;
    if (!(ecx & eax))
        goto loc_1bc7fc;
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, ebx, al);
    ebx++;
    goto loc_1bc7d7;
loc_1bc7fc: // 0160:1bc7fc
    memoryASet(ds, ebx, 0x00);
    ecx = pop32();
    esp += 4;
}
void sub_1bc801() // 0160:1bc801 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000100;
    edx = 0;
    edi = memoryAGet32(ds, 0x1e3cf8);
    memoryASet32(ds, 0x3f6618, edx);
    memoryASet32(ds, 0x3f65c0, edx);
    memoryASet32(ds, 0x3f65e0, edx);
    memoryASet32(ds, 0x1e3cf4, edx);
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_1bc83c;
loc_1bc835: // 0160:1bc835
    eax = 0;
    goto loc_1bca13;
loc_1bc83c: // 0160:1bc83c
    eax = 0x001d6244;
    edi = esp + 128;
    sub_1cc798();
    esi = eax;
    push32(edi);
loc_1bc850: // 0160:1bc850
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1bc868;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1bc850;
loc_1bc868: // 0160:1bc868
    edi = pop32();
    eax = esp + 128;
    sub_1cc7fb();
    if (memoryAGet(ds, esp + 128) == 0x00)
        goto loc_1bc835;
    ebx = esp;
    edx = esp + 128;
    eax = 0x00000041;
    sub_1bc7c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1bbbff();
    memoryASet32(ds, 0x3f65f0, eax);
    eax = 0x00000049;
    sub_1bc7c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1bbc45();
    memoryASet32(ds, 0x3f65d0, eax);
    eax = 0x00000044;
    sub_1bc7c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_1bbc45();
    memoryASet32(ds, 0x3f65d4, eax);
    eax = 0x00000054;
    sub_1bc7c0();
    eax = esp;
    sub_1bbc45();
    memoryASet32(ds, 0x3f6614, eax);
    eax = memoryAGet32(ds, 0x3f65f0);
    eax += 0x0000000a;
    memoryASet32(ds, 0x3f65e8, eax);
    eax = memoryAGet32(ds, 0x3f65f0);
    eax += 0x0000000c;
    memoryASet32(ds, 0x3f65ec, eax);
    eax = memoryAGet32(ds, 0x3f65f0);
    eax += 0x0000000e;
    ebp = memoryAGet32(ds, 0x3f65d0);
    memoryASet32(ds, 0x3f65e4, eax);
    if ((int32_t)ebp >= (int32_t)0x00000008)
        goto loc_1bc94e;
    ecx = 0x00000020;
    esi = 0x00000021;
    edi = ebp + 8;
    memoryASet32(ds, 0x3f65cc, ecx);
    memoryASet32(ds, 0x3f65d8, esi);
    memoryASet32(ds, 0x3f65d0, edi);
    goto loc_1bc96c;
loc_1bc94e: // 0160:1bc94e
    eax = 0x000000a0;
    edx = 0x000000a1;
    ebx = ebp + 104;
    memoryASet32(ds, 0x3f65cc, eax);
    memoryASet32(ds, 0x3f65d8, edx);
    memoryASet32(ds, 0x3f65d0, ebx);
loc_1bc96c: // 0160:1bc96c
    if (memoryAGet32(ds, 0x3f65d4) != 0x00000000)
        goto loc_1bc97f;
    memoryASet32(ds, 0x3f65f4, 0x00000087);
loc_1bc97f: // 0160:1bc97f
    if (memoryAGet32(ds, 0x3f65d4) != 0x00000001)
        goto loc_1bc992;
    memoryASet32(ds, 0x3f65f4, 0x00000083);
loc_1bc992: // 0160:1bc992
    if (memoryAGet32(ds, 0x3f65d4) != 0x00000002)
        goto loc_1bc9a5;
    memoryASet32(ds, 0x3f65f4, 0x00000081);
loc_1bc9a5: // 0160:1bc9a5
    if (memoryAGet32(ds, 0x3f65d4) != 0x00000003)
        goto loc_1bc9b8;
    memoryASet32(ds, 0x3f65f4, 0x00000082);
loc_1bc9b8: // 0160:1bc9b8
    eax = memoryAGet32(ds, 0x3f65d4);
    eax += eax;
    memoryASet32(ds, 0x3f6600, eax);
    eax++;
    memoryASet32(ds, 0x3f65f8, eax);
    memoryASet32(ds, 0x3f6608, 0x0000000a);
    eax = memoryAGet32(ds, 0x3f65d4);
    edx = 0x0000000b;
    memoryASet32(ds, 0x3f65dc, eax);
    eax += 0x00000004;
    ebx = 0x0000000c;
    memoryASet32(ds, 0x3f6604, eax);
    eax = memoryAGet32(ds, 0x3f65d4);
    memoryASet32(ds, 0x3f65c4, edx);
    eax += 0x00000048;
    memoryASet32(ds, 0x3f65c8, ebx);
    memoryASet32(ds, 0x3f6610, eax);
    sub_1bc727();
    eax = memoryAGet32(ds, 0x1e3cf4);
loc_1bca13: // 0160:1bca13
    esp += 0x00000100;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bca20() // 0160:1bca20 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bca65;
    ah = 0x41;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bca38: // 0160:1bca38
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bca38;
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x1e3cfc);
    eax = sar32(eax, 0x08);
    ah = al;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bca55: // 0160:1bca55
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bca55;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x1e3cfc);
    goto loc_1bca80;
loc_1bca65: // 0160:1bca65
    ah = 0x40;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bca72: // 0160:1bca72
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bca72;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x3f65a8);
loc_1bca80: // 0160:1bca80
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bca8b: // 0160:1bca8b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bca8b;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6610);
    eax = memoryAGet32(ds, 0x3f65c4);
    sub_1cbd6f();
    edx = memoryAGet32(ds, 0x3f65fc);
    eax = memoryAGet32(ds, 0x3f65f4);
    edx = sar32(edx, 0x10);
    sub_1cbd6f();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bcabc() // 0160:1bcabc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x3f65c0);
    edx = memoryAGet32(ds, 0x1e3cfc);
    if (ebx)
        goto loc_1bcadc;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bcae5;
loc_1bcadc: // 0160:1bcadc
    eax = memoryAGet32(ds, 0x3f65b8);
    eax += eax;
    goto loc_1bcaea;
loc_1bcae5: // 0160:1bcae5
    eax = memoryAGet32(ds, 0x3f65b8);
loc_1bcaea: // 0160:1bcaea
    eax--;
    bl = al;
    eax = sar32(eax, 0x08);
    esi = memoryAGet32(ds, 0x3f6618);
    memoryASet32(ds, esp, eax);
    if (!esi)
        goto loc_1bcb44;
    ah = 0xc6;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb0a: // 0160:1bcb0a
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb0a;
    al = ah;
    out8(dx, al);
    ah = 0x20;
loc_1bcb14: // 0160:1bcb14
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb1f: // 0160:1bcb1f
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb1f;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb34: // 0160:1bcb34
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb34;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    goto loc_1bcc35;
loc_1bcb44: // 0160:1bcb44
    if (memoryAGet32(ds, 0x3f660c) == 0x00000000)
        goto loc_1bcbe4;
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_1bcba0;
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb66: // 0160:1bcb66
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb66;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb7b: // 0160:1bcb7b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb7b;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcb91: // 0160:1bcb91
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcb91;
    al = ah;
    out8(dx, al);
    ah = 0x1c;
    goto loc_1bcc35;
loc_1bcba0: // 0160:1bcba0
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcbad: // 0160:1bcbad
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcbad;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcbc2: // 0160:1bcbc2
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcbc2;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcbd8: // 0160:1bcbd8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcbd8;
    al = ah;
    out8(dx, al);
    ah = 0x90;
    goto loc_1bcc35;
loc_1bcbe4: // 0160:1bcbe4
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_1bcbf3;
    ah = 0x14;
    goto loc_1bcb14;
loc_1bcbf3: // 0160:1bcbf3
    ah = 0x48;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcc00: // 0160:1bcc00
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcc00;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcc15: // 0160:1bcc15
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcc15;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcc2b: // 0160:1bcc2b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcc2b;
    al = ah;
    out8(dx, al);
    ah = 0x91;
loc_1bcc35: // 0160:1bcc35
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bcc40: // 0160:1bcc40
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bcc40;
    al = ah;
    out8(dx, al);
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bcd9f() // 0160:1bcd9f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0;
    memoryASet32(ds, 0x3f65bc, edx);
    memoryASet32(ds, 0x3f65b0, edx);
    memoryASet32(ds, 0x3f65ac, 0x0000b6db);
    esi = 0x00000001;
    ebx = 0x001bcc50;
    eax = memoryAGet32(ds, 0x3f65d0);
    ecx = memoryAGet32(ds, 0x3f65d0);
    sub_1cbd97();
    ecx &= 0x00000007;
    memoryASet32(ds, 0x3f6638, eax);
    eax = memoryAGet32(ds, 0x3f65d0);
    esi <<= cl;
    ecx = cs;
    memoryASet16(ds, 0x3f663c, dx);
    sub_1cbdcb();
    eax = memoryAGet32(ds, 0x3f65d8);
    si ^= 0x00ff;
    sub_1cc785();
    memoryASet32(ds, 0x3f65a0, eax);
    edx = eax;
    eax = memoryAGet32(ds, 0x3f65d8);
    edx &= esi;
    sub_1cbd6f();
    if ((int32_t)memoryAGet32(ds, 0x3f65d0) < (int32_t)0x00000070)
        goto loc_1bce3e;
    eax = 0x00000021;
    sub_1cc785();
    memoryASet32(ds, 0x3f65a4, eax);
    edx = eax;
    eax = 0x00000021;
    edx &= 0x000000fb;
    sub_1cbd6f();
loc_1bce3e: // 0160:1bce3e
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bce43() // 0160:1bce43 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(flagAsReg32());
    flags.interrupts = 0;
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bce55: // 0160:1bce55
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bce55;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bce76: // 0160:1bce76
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bce76;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bce97: // 0160:1bce97
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bce97;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bceb8: // 0160:1bceb8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bceb8;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    sub_1bc6e7();
    edx = memoryAGet32(ds, 0x3f65a0);
    eax = memoryAGet32(ds, 0x3f65d8);
    sub_1cbd6f();
    if ((int32_t)memoryAGet32(ds, 0x3f65d0) < (int32_t)0x00000070)
        goto loc_1bcefa;
    eax = 0x00000021;
    edx = memoryAGet32(ds, 0x3f65a4);
    sub_1cbd6f();
loc_1bcefa: // 0160:1bcefa
    cx = memoryAGet16(ds, 0x3f663c);
    ebx = memoryAGet32(ds, 0x3f6638);
    eax = memoryAGet32(ds, 0x3f65d0);
    sub_1cbdcb();
    flagsFromReg32(pop32());
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bcf16() // 0160:1bcf16 +long
{
    esp -= 4;
    goto loc_1bcf16;
loc_1bca19: // 0160:1bca19
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1270 bytes
loc_1bcf16: // 0160:1bcf16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x3f6618);
    ebp = 0x000000c8;
    if (edx)
        goto loc_1bcf37;
    if (memoryAGet32(ds, 0x3f65c0) == 0x00000000)
        goto loc_1bcf39;
loc_1bcf37: // 0160:1bcf37
    ebp += ebp;
loc_1bcf39: // 0160:1bcf39
    ebx = 0;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebx);
loc_1bcf42: // 0160:1bcf42
    eax = memoryAGet32(ds, esp);
    esi = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    edi = eax * 0x00000000;
loc_1bcf55: // 0160:1bcf55
    edx = edi;
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    esi++;
    edx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, ecx + 3951210, ax);
    edi += edx;
    if ((int32_t)esi < (int32_t)0x00000080)
        goto loc_1bcf55;
    eax = memoryAGet32(ds, esp);
    edi = 0xffffff80;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    esi = eax * 0xffffff80;
loc_1bcf9b: // 0160:1bcf9b
    edx = esi;
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    edi++;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, ecx + 3951210, ax);
    esi += edx;
    if ((int32_t)edi < 0)
        goto loc_1bcf9b;
    edi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edi++;
    eax++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_1bcf42;
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bcff4;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd00e;
loc_1bcff4: // 0160:1bcff4
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd00e: // 0160:1bd00e
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd031;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd031: // 0160:1bd031
    esp += 0x00000014;
    goto loc_1bca19;
}
void sub_1bd039() // 0160:1bd039 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    edx = eax;
    edx <<= 2;
    if ((int32_t)esi >= 0)
        goto loc_1bd053;
    esi = memoryAGet32(ds, edx + 3951180);
    goto loc_1bd059;
loc_1bd053: // 0160:1bd053
    memoryASet32(ds, edx + 3951180, esi);
loc_1bd059: // 0160:1bd059
    if (memoryAGet32(ds, 0x1e3c94) == 0x00000000)
        goto loc_1bd06b;
    edx = esi;
    eax = edi;
    sub_1bbf71();
loc_1bd06b: // 0160:1bd06b
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bd07d;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd0aa;
loc_1bd07d: // 0160:1bd07d
    edx = esi;
    edx <<= 16;
    ebp = memoryAGet32(ds, 0x3f65b4);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    eax = edi + 32;
    push32(eax);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd0aa: // 0160:1bd0aa
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd192;
    edx = esi;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x3f65b4);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    edi += 0x00000020;
    push32(edi);
    goto loc_1bd18a;
    // gap 169 bytes
loc_1bd18a: // 0160:1bd18a
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd192: // 0160:1bd192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd0e1() // 0160:1bd0e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if ((int32_t)edx >= 0)
        goto loc_1bd0f3;
    edx = memoryAGet32(ds, eax * 4 + 0x3c4a0c);
loc_1bd0f3: // 0160:1bd0f3
    if ((int32_t)edx >= 0)
        goto loc_1bd0f9;
    edx = 0;
loc_1bd0f9: // 0160:1bd0f9
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1bd106;
    edx = 0x000000ff;
loc_1bd106: // 0160:1bd106
    ecx = memoryAGet32(ds, esi * 4 + 0x3c4a2c);
    memoryASet32(ds, esi * 4 + 0x3c4a0c, edx);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, esi * 4 + 0x3c4a0c);
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x1e3c94) == 0x00000000)
        goto loc_1bd143;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_1bbfb3();
loc_1bd143: // 0160:1bd143
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bd155;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd16f;
loc_1bd155: // 0160:1bd155
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd16f: // 0160:1bd16f
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd192;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd192: // 0160:1bd192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd198() // 0160:1bd198 +long
{
    esp -= 4;
    goto loc_1bd198;
loc_1bd114: // 0160:1bd114
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, esi * 4 + 0x3c4a0c);
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x1e3c94) == 0x00000000)
        goto loc_1bd143;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_1bbfb3();
loc_1bd143: // 0160:1bd143
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bd155;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd16f;
loc_1bd155: // 0160:1bd155
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd16f: // 0160:1bd16f
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd192;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd192: // 0160:1bd192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bd198: // 0160:1bd198
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if ((int32_t)edx >= 0)
        goto loc_1bd1aa;
    edx = memoryAGet32(ds, eax * 4 + 0x3c4a2c);
loc_1bd1aa: // 0160:1bd1aa
    if ((int32_t)edx >= 0)
        goto loc_1bd1b0;
    edx = 0;
loc_1bd1b0: // 0160:1bd1b0
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1bd1bd;
    edx = 0x000000ff;
loc_1bd1bd: // 0160:1bd1bd
    memoryASet32(ds, esi * 4 + 0x3c4a2c, edx);
    edx = memoryAGet32(ds, esi * 4 + 0x3c4a0c);
    ecx = memoryAGet32(ds, esi * 4 + 0x3c4a2c);
    goto loc_1bd114;
}
void sub_1bd1d7() // 0160:1bd1d7 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    edi = ebx;
    memoryASet32(ds, esp, ecx);
    if (memoryAGet32(ds, esp + 20) != 0x00000000)
        goto loc_1bd1f1;
    memoryASet32(ds, esp + 20, ebx);
loc_1bd1f1: // 0160:1bd1f1
    if (memoryAGet32(ds, 0x1e3c94) == 0x00000000)
        goto loc_1bd211;
    push32(0x00000000);
    push32(0x00000000);
    ecx = memoryAGet32(ds, esp + 28);
    push32(edi);
    ebx = edi;
    edx = ebp;
    push32(ecx);
    eax = esi;
    ecx = 0;
    sub_1bc03b();
loc_1bd211: // 0160:1bd211
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bd223;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd23c;
loc_1bd223: // 0160:1bd223
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd23c: // 0160:1bd23c
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd25e;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd25e: // 0160:1bd25e
    edx = memoryAGet32(ds, esp + 28);
    eax = esi;
    sub_1bd198();
    edx = memoryAGet32(ds, esp + 24);
    eax = esi;
    sub_1bd0e1();
    edx = memoryAGet32(ds, esp);
    eax = esi;
    sub_1bd039();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_1bd287() // 0160:1bd287 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if (memoryAGet32(ds, 0x3f65c0) != 0x00000000)
        goto loc_1bd2a0;
    if (memoryAGet32(ds, 0x3f6618) == 0x00000000)
        goto loc_1bd2c4;
loc_1bd2a0: // 0160:1bd2a0
    ecx = memoryAGet32(ds, 0x3f65b8);
    push32(ecx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi = memoryAGet32(ds, 0x3f65fc);
    push32(esi);
    push32(0xfffffffe);
    sub_1bfdbf();
    esp += 0x00000024;
loc_1bd2c4: // 0160:1bd2c4
    if (memoryAGet32(ds, 0x3f65e0) == 0x00000000)
        goto loc_1bd2f0;
    ebp = memoryAGet32(ds, 0x3f65b8);
    push32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    eax = memoryAGet32(ds, 0x3f65fc);
    push32(eax);
    push32(0xfffffffe);
    sub_1c0c04();
    esp += 0x00000024;
loc_1bd2f0: // 0160:1bd2f0
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bd2fd: // 0160:1bd2fd
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bd2fd;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bd31e: // 0160:1bd31e
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bd31e;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bd33f: // 0160:1bd33f
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bd33f;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x3f65ec);
    ecx = 0x0000ffff;
loc_1bd360: // 0160:1bd360
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_1bd360;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f6604);
    out8(dx, al);
    sub_1bca20();
    edx = memoryAGet32(ds, 0x3f65c8);
    eax = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6600);
    eax = memoryAGet32(ds, 0x3f65fc);
    out8(dx, al);
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x3f65b8);
    ecx = memoryAGet32(ds, 0x3f6618);
    ecx |= memoryAGet32(ds, 0x3f65c0);
    eax <<= cl;
    edx = memoryAGet32(ds, 0x3f65f8);
    eax--;
    out8(dx, al);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f6608);
    eax = memoryAGet32(ds, 0x3f65dc);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x3f65e4);
    al = in8(dx);
    sub_1bcabc();
    flagsFromReg32(pop32());
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd3ce() // 0160:1bd3ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_1bd3df;
    ebx = 0x00000fa0;
loc_1bd3df: // 0160:1bd3df
    if (ebx <= 0x00009c40)
        goto loc_1bd3ec;
    ebx = 0x00009c40;
loc_1bd3ec: // 0160:1bd3ec
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1e3cfc, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x3f65a8, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x1e3cfc, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x3f65c0);
    memoryASet32(ds, 0x3f65b8, eax);
    if (!ebx)
        goto loc_1bd455;
    edx = memoryAGet32(ds, 0x1e3cfc);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x3f65b8, sar32(memoryAGet32(ds, 0x3f65b8), 0x00000001));
    goto loc_1bd45a;
loc_1bd455: // 0160:1bd455
    eax = memoryAGet32(ds, 0x1e3cfc);
loc_1bd45a: // 0160:1bd45a
    memoryASet32(ds, 0x3f65b4, eax);
    ebx = 0;
    ecx = 0;
loc_1bd463: // 0160:1bd463
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3951180);
    ecx += 0x00000004;
    sub_1bd039();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3951112);
    ebx++;
    sub_1bd0e1();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1bd463;
    sub_1bd287();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd48f() // 0160:1bd48f +long
{
    esp -= 4;
    goto loc_1bd48f;
loc_1bd3ce: // 0160:1bd3ce
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_1bd3df;
    ebx = 0x00000fa0;
loc_1bd3df: // 0160:1bd3df
    if (ebx <= 0x00009c40)
        goto loc_1bd3ec;
    ebx = 0x00009c40;
loc_1bd3ec: // 0160:1bd3ec
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x1e3cfc, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x3f65a8, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x1e3cfc, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x3f65c0);
    memoryASet32(ds, 0x3f65b8, eax);
    if (!ebx)
        goto loc_1bd455;
    edx = memoryAGet32(ds, 0x1e3cfc);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x3f65b8, sar32(memoryAGet32(ds, 0x3f65b8), 0x00000001));
    goto loc_1bd45a;
loc_1bd455: // 0160:1bd455
    eax = memoryAGet32(ds, 0x1e3cfc);
loc_1bd45a: // 0160:1bd45a
    memoryASet32(ds, 0x3f65b4, eax);
    ebx = 0;
    ecx = 0;
loc_1bd463: // 0160:1bd463
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3951180);
    ecx += 0x00000004;
    sub_1bd039();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3951112);
    ebx++;
    sub_1bd0e1();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1bd463;
    sub_1bd287();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bd48f: // 0160:1bd48f
    if (memoryAGet32(ds, 0x1e3cf4) != 0x00000000)
        goto loc_1bd3ce;
    esp += 4;
}
void sub_1bd49d() // 0160:1bd49d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    ecx = 0x0000007f;
    eax = 0;
loc_1bd4a8: // 0160:1bd4a8
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 3951144, ecx);
    memoryASet32(ds, eax + 3951176, edx);
    memoryASet32(ds, eax + 3951112, edx);
    if (eax != 0x00000020)
        goto loc_1bd4a8;
    if (memoryAGet32(ds, 0x1e3cf4) == 0x00000000)
        goto loc_1bd564;
    eax = 0x00010000;
    sub_1bbc9d();
    memoryASet32(ds, 0x3f659c, eax);
    if (eax)
        goto loc_1bd4fb;
    push32(0x001d624c);
    sub_1cbd1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1cbd41();
loc_1bd4fb: // 0160:1bd4fb
    eax = memoryAGet32(ds, 0x3f659c);
    eax &= 0x0000ffff;
    eax <<= 4;
    memoryASet32(ds, 0x3f65fc, eax);
    eax += 0x00008000;
loc_1bd512: // 0160:1bd512
    ebx = eax;
    edx = memoryAGet32(ds, 0x3f65fc);
    ebx = sar32(ebx, 0x10);
    edx = sar32(edx, 0x10);
    if (edx == ebx)
        goto loc_1bd534;
    edi = memoryAGet32(ds, 0x3f65fc);
    edi++;
    eax++;
    memoryASet32(ds, 0x3f65fc, edi);
    goto loc_1bd512;
loc_1bd534: // 0160:1bd534
    eax = memoryAGet32(ds, 0x3f65fc);
    memoryASet32(ds, 0x3e4a6c, eax);
    eax += 0x00004000;
    memoryASet32(ds, 0x3e4a70, eax);
    ah = 0;
    memoryASet(ds, 0x3f6644, ah);
    sub_1bcf16();
    sub_1bcd9f();
    eax = memoryAGet32(ds, 0x1e3cfc);
    sub_1bd3ce();
loc_1bd564: // 0160:1bd564
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd569() // 0160:1bd569 +long
{
    esp -= 4;
    goto loc_1bd569;
loc_1bc3dc: // 0160:1bc3dc
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x1e3c90);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_1cbd6f();
    edx = 0x0000004c;
    eax = 0;
    sub_1bbd74();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4454 bytes
loc_1bd569: // 0160:1bd569
    if (memoryAGet32(ds, 0x1e3cf4) == 0x00000000)
        goto loc_1bd59c;
    sub_1bce43();
    eax = memoryAGet32(ds, 0x3f659c);
    sub_1bbd1e();
    if (!eax)
        goto loc_1bd59c;
    push32(0x001d6260);
    sub_1cbd1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1cbd41();
loc_1bd59c: // 0160:1bd59c
    if (memoryAGet32(ds, 0x1e3c94) != 0x00000000)
        goto loc_1bc3dc;
    esp += 4;
}
void sub_1bd5aa() // 0160:1bd5aa +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    memoryASet32(ds, esp, 0x00000600);
    ebx = eax;
    ebx >>= 16;
    eax &= 0x0000ffff;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    ebx = esp;
    eax >>= 16;
    edx &= 0x0000ffff;
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    edx = esp;
    eax = 0x00000031;
    sub_1cc76a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1bd610;
    eax = 0x00000003;
    sub_19ccc3();
    push32(0x001d6274);
    sub_1cbd1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_1cbd41();
loc_1bd610: // 0160:1bd610
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_1bd615() // 0160:1bd615 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = eax;
    esi = edx;
    memoryASet32(ds, esp, ebx);
    edx = ecx;
    edx <<= 10;
    ebx = memoryAGet32(ds, esp + 28);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = eax;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    eax <<= 10;
    div32(edi);
    ebx = 0;
    memoryASet32(ds, esp, eax);
    eax += esi;
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    goto loc_1bd67b;
loc_1bd64d: // 0160:1bd64d
    eax = ebx;
    eax >>= 10;
    ecx = (char)memoryAGet(ds, eax + ebp + 1);
    esi = (char)memoryAGet(ds, eax + ebp);
    ecx -= esi;
    esi = ebx;
    esi &= 0x000003ff;
    ecx = (int32_t)ecx * (int32_t)esi;
    ecx >>= 10;
    al = memoryAGet(ds, eax + ebp);
    memoryASet32(ds, esp + 4, ecx);
    al += memoryAGet(ds, esp + 4);
    ebx += edi;
    memoryASet(ds, edx, al);
    edx++;
loc_1bd67b: // 0160:1bd67b
    if (edx < memoryAGet32(ds, esp + 8))
        goto loc_1bd64d;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1bd68d() // 0160:1bd68d +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    edx = 0x001d6280;
    esi = memoryAGet32(ds, 0x3f6634);
    sub_19c840();
    edi = eax;
    eax = ecx;
    sub_1cc03a();
    ebp = eax;
    if (eax)
        goto loc_1bd6d5;
    push32(ecx);
    push32(0x001d6283);
    sub_1cbd1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_1cbd41();
loc_1bd6d5: // 0160:1bd6d5
    ebx = 0x00000001;
    edx = 0x00000800;
    ecx = ebp;
    eax = esi;
    sub_1cc380();
    edi -= 0x00000800;
    esi += 0x00000800;
loc_1bd6f4: // 0160:1bd6f4
    if (!edi)
        goto loc_1bd763;
    if ((int32_t)edi <= (int32_t)0x00008000)
        goto loc_1bd73a;
    ebx = 0x00000001;
    edx = 0x00008000;
    eax = 0x003a1f38;
    ecx = ebp;
    sub_1cc380();
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x003a1f38;
    edx = esi;
    push32(ebx);
    ebx = 0x00008000;
    edi += 0xffff8000;
loc_1bd731: // 0160:1bd731
    sub_1bd615();
    esi += eax;
    goto loc_1bd6f4;
loc_1bd73a: // 0160:1bd73a
    ebx = 0x00000001;
    eax = 0x003a1f38;
    ecx = ebp;
    edx = edi;
    sub_1cc380();
    edx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x003a1f38;
    ebx = edi;
    push32(edx);
    edx = esi;
    edi = 0;
    goto loc_1bd731;
loc_1bd763: // 0160:1bd763
    eax = 0;
loc_1bd765: // 0160:1bd765
    eax++;
    memoryASet(ds, esi, 0x00);
    esi++;
    if (eax < 0x000000ff)
        goto loc_1bd765;
    eax = ebp;
    edx = memoryAGet32(ds, esp + 8);
    sub_1cc23e();
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 4);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx = 0;
    ebp = 0;
    ecx = eax;
loc_1bd794: // 0160:1bd794
    edi = memoryAGet32(ds, 0x3f6634);
    eax = memoryAGet32(ds, edi + ebx + 1024);
    edx = memoryAGet32(ds, edi + ebx);
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebp;
    eax = (int32_t)eax * (int32_t)ecx;
    memoryASet32(ds, esp + 12, 0x00000003);
    edx = 0;
    div32(memoryAGet32(ds, esp + 12));
    memoryASet32(ds, edi + ebx, eax);
    edi = memoryAGet32(ds, esp);
    ebp += edi;
    eax = ebp;
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0;
    edi = 0x00000003;
    div32(edi);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x3f6634);
    memoryASet32(ds, edi + ebx + 1020, eax);
    if (ebx != 0x00000400)
        goto loc_1bd794;
    ebp = memoryAGet32(ds, 0x3f6634);
    eax = esi;
    eax -= ebp;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bd948() // 0160:1bd948 +long
{
    esp -= 4;
    goto loc_1bd948;
loc_1bca19: // 0160:1bca19
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3880 bytes
loc_1bd948: // 0160:1bd948
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet32(ds, 0x1e3d04) == 0x00000000)
        goto loc_1bca19;
    if (!eax)
        goto loc_1bd968;
    ecx = 0x000012aa;
    goto loc_1bd96d;
loc_1bd968: // 0160:1bd968
    ecx = 0x00001400;
loc_1bd96d: // 0160:1bd96d
    eax = ecx;
    ebx <<= 2;
    ecx <<= 2;
    edx = 0;
    ecx -= eax;
    sub_1bfd80();
    ebp = eax;
    sub_197010();
    sub_1bfcd4();
    eax = memoryAGet32(ds, ebx + 1981708);
    sub_19c840();
    esi = memoryAGet32(ds, 0x1e3d08);
    edi = eax;
    memoryASet32(ds, 0x3f6598, ecx);
    if ((int32_t)esi >= (int32_t)0x00100000)
        goto loc_1bd9d5;
    edx = ecx + ecx;
    esi = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    edx = ecx;
    eax = memoryAGet32(ds, ebx + 1981708);
    ebx = esi;
    sub_1bd68d();
    edi = eax;
    memoryASet32(ds, 0x3f6598, esi);
    goto loc_1bd9e6;
loc_1bd9d5: // 0160:1bd9d5
    edx = memoryAGet32(ds, 0x3f6634);
    eax = memoryAGet32(ds, ebx + 1981708);
    sub_19c8e6();
loc_1bd9e6: // 0160:1bd9e6
    if (memoryAGet32(ds, 0x1e3c94) == 0x00000000)
        goto loc_1bda03;
    ecx = memoryAGet32(ds, 0x1e3c90);
    eax = memoryAGet32(ds, 0x3f6634);
    edx = edi;
    ebx = 0;
    sub_1bbe7a();
loc_1bda03: // 0160:1bda03
    sub_1bfd00();
    edx = ebp;
    eax = 0;
    sub_197010();
    goto loc_1bca19;
}
void sub_1bda16() // 0160:1bda16 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (memoryAGet32(ds, 0x1e3d04) == 0x00000000)
        goto loc_1bda84;
    edi = memoryAGet32(ds, 0x1e3d20);
    if (edi)
        goto loc_1bda84;
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3668);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = memoryAGet32(ds, 0x1e3d24);
    eax++;
    eax &= 0x00000007;
    memoryASet32(ds, 0x1e3d24, eax);
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = esi;
    edx = memoryAGet32(ds, 0x3f6634);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3f6598);
    eax += edx;
    push32(edi);
    edx += 0x00000800;
    ebx = memoryAGet32(ds, eax + 1024);
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, 0x1e3d24);
    ebx += edx;
    edx += ebp;
    sub_1bd1d7();
loc_1bda84: // 0160:1bda84
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bda89() // 0160:1bda89 +long
{
    esp -= 4;
    goto loc_1bda89;
loc_1bd3c8: // 0160:1bd3c8
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1723 bytes
loc_1bda89: // 0160:1bda89
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ebx = eax;
    edx = 0;
    ecx = 0x00100000;
    memoryASet32(ds, 0x1e3d04, edx);
    eax = ecx;
    memoryASet32(ds, 0x1e3d08, ecx);
    sub_1cc9a1();
    memoryASet32(ds, 0x3f6634, eax);
    if (eax)
        goto loc_1bdad2;
    esi = 0x00080000;
    eax = esi;
    memoryASet32(ds, 0x1e3d08, esi);
    sub_1cc9a1();
    memoryASet32(ds, 0x3f6634, eax);
    if (!eax)
        goto loc_1bd3c8;
loc_1bdad2: // 0160:1bdad2
    edx = 0x001c192a;
    eax = 0x001bfd94;
    edx -= 0x001bfd94;
    sub_1bd5aa();
    edx = 0x00010000;
    eax = 0x003e4a74;
    sub_1bd5aa();
    edx = memoryAGet32(ds, 0x1e3d08);
    eax = memoryAGet32(ds, 0x3f6634);
    sub_1bd5aa();
    sub_1bc4f4();
    if (eax)
        goto loc_1bdb24;
    sub_1bc801();
    if (memoryAGet32(ds, 0x1e3cf4) != 0x00000000)
        goto loc_1bdb24;
    eax = 0;
    goto loc_1bd3c8;
loc_1bdb24: // 0160:1bdb24
    ebp = memoryAGet32(ds, 0x1e3c94);
    if (!ebp)
        goto loc_1bdb40;
    if ((int32_t)ebp >= (int32_t)0x00000400)
        goto loc_1bdb40;
    memoryASet32(ds, 0x1e3d08, 0x00080000);
loc_1bdb40: // 0160:1bdb40
    if (memoryAGet32(ds, 0x1e3c94) != 0x00000000)
        goto loc_1bdb52;
    if (memoryAGet32(ds, 0x1e3cf4) == 0x00000000)
        goto loc_1bdb5c;
loc_1bdb52: // 0160:1bdb52
    memoryASet32(ds, 0x1e3d04, 0x00000001);
loc_1bdb5c: // 0160:1bdb5c
    ebp = 0xffffffff;
    eax = memoryAGet32(ds, 0x1e36d0);
    memoryASet32(ds, 0x1e3d1c, ebp);
    sub_1bd948();
    sub_1bd49d();
    eax = ebx;
    sub_1bd48f();
    eax = 0x00000001;
    goto loc_1bd3c8;
}
void sub_1bdb87() // 0160:1bdb87 +long
{
    esp -= 4;
    sub_1bd569();
    eax = memoryAGet32(ds, 0x3f6634);
    goto loc_1cca84;
    // gap 61166 bytes
loc_1cca84: // 0160:1cca84
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x1e3dac);
    goto loc_1cca9d;
loc_1cca92: // 0160:1cca92
    if (ecx > ebx)
        goto loc_1cca9a;
    if (ebx < edx)
        goto loc_1ccaa4;
loc_1cca9a: // 0160:1cca9a
    ecx = memoryAGet32(ds, ecx + 8);
loc_1cca9d: // 0160:1cca9d
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_1cca92;
loc_1ccaa4: // 0160:1ccaa4
    eax = 0x001e3dac;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_1ce71c();
    if (ecx == memoryAGet32(ds, 0x1e3db0))
        goto loc_1ccad5;
    ebp = memoryAGet32(ds, 0x1e3db4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_1ccad5;
    memoryASet32(ds, 0x1e3db4, edx);
loc_1ccad5: // 0160:1ccad5
    ah = 0;
    memoryASet(ds, 0x3f6785, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bdd06() // 0160:1bdd06 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if ((int32_t)edx >= 0)
        goto loc_1bdd10;
    edx = 0;
loc_1bdd10: // 0160:1bdd10
    if ((int32_t)edx <= (int32_t)0x00000100)
        goto loc_1bdd1d;
    edx = 0x00000100;
loc_1bdd1d: // 0160:1bdd1d
    eax = ebx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x3f4ac8);
    memoryASet32(ds, eax + 3937164, edx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1bdd3b;
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, 0x3f4a98);
    goto loc_1bdd42;
loc_1bdd3b: // 0160:1bdd3b
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, 0x3f4aa0);
loc_1bdd42: // 0160:1bdd42
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, eax + 3936684);
    ecx = 0x0000fe01;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    eax = ebx;
    sub_1bd0e1();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1be185() // 0160:1be185 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax &= 0x000000ff;
    ebx = 0;
    ecx = 0;
    memoryASet32(ds, 0x3f4a98, eax);
    goto loc_1be1a9;
loc_1be198: // 0160:1be198
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 3937164);
    sub_1bdd06();
    ecx += 0x00000004;
    ebx++;
loc_1be1a9: // 0160:1be1a9
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x3f4ac8))
        goto loc_1be198;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf310() // 0160:1bf310 +long
{
    return; // gabo check
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    edx = 0x00001510;
    eax = memoryAGet32(ds, 0x3f6768);
    ebx = 0;
    memoryASet32(ds, 0x3f6664, edx);
    memoryASet32(ds, 0x3f6660, eax);
    memoryASet16(ds, 0x3f6684, bx);
    eax = esi;
    edx = 0x00000300;
    eax &= 0x0000000f;
    memoryASet16(ds, 0x3f667c, dx);
    memoryASet32(ds, 0x3f6658, eax);
    eax = esi;
    dl = 0;
    eax = sar32(eax, 0x04);
    memoryASet(ds, 0x3f6681, dl);
    memoryASet16(ds, 0x3f666a, ax);
    ah = 0x2f;
    edx = ds;
    memoryASet(ds, 0x3f6680, ah);
    eax = 0x003f6648;
    ebx = 0x003f6648;
    memoryASet16(ds, 0x3f6698, dx);
    memoryASet32(ds, 0x3f6690, ebx);
loc_1bf37e: // 0160:1bf37e
    ecx = 0x003f6698;
    ebx = 0x003f667c;
    eax = 0x00000031;
    edx = ebx;
    sub_1ccae2();
    ax = memoryAGet16(ds, esi + 3);
    al = 0;
    ah &= 0x01;
    eax &= 0x0000ffff;
    if (!eax)
        goto loc_1bf37e;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf3a9() // 0160:1bf3a9 +long
{
    esp -= 4;
    esp -= 0x00000004;
    memoryASet(ds, ecx, al);
    ecx = eax;
    ecx &= 0x0000ff00;
    ecx >>= 8;
    memoryASet32(ds, esp, ecx);
    eax &= 0x00ff0000;
    cl = memoryAGet(ds, esp);
    eax >>= 16;
    memoryASet(ds, ebx, cl);
    memoryASet(ds, edx, al);
    esp += 0x00000004;
    esp += 4;
}
void sub_1bf3cf() // 0160:1bf3cf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x0000000c;
    ecx = esp + 8;
    ebx = esp + 4;
    edx = esp;
    sub_1bf3a9();
    edx = 0;
    dl = memoryAGet(ds, esp);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    edx = eax;
    eax <<= 3;
    bl = memoryAGet(ds, esp + 4);
    eax += edx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ebx = edx;
    edx <<= 4;
    edx -= ebx;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, esp + 8);
    edx -= 0x00000096;
    eax += edx;
    esp += 0x0000000c;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf42a() // 0160:1bf42a +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    edx = sar32(edx, 0x04);
    eax &= 0x0000000f;
    edx <<= 16;
    eax += edx;
    edx = pop32();
    esp += 4;
}
void sub_1bf43a() // 0160:1bf43a +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 2, 0x03);
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x3f6734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x3f6734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x3f6738);
    sub_1bf42a();
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet16(ds, eax + 18, 0x0006);
    eax = memoryAGet32(ds, 0x3f6738);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x3f6738);
    memoryASet(ds, eax + 1, 0x00);
    eax = memoryAGet32(ds, 0x3f6734);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    eax = memoryAGet32(ds, 0x3f6738);
    eax = memoryAGet32(ds, eax + 2);
    edx = pop32();
    esp += 4;
}
void sub_1bf4d2() // 0160:1bf4d2 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x3f6708);
    memoryASet(ds, eax, 0x04);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 2, 0x03);
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x3f6734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x3f6734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x3f6708);
    sub_1bf42a();
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x3f6734);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6734);
    ecx = 0x00000009;
    ax = memoryAGet16(ds, eax + 3);
    esi = memoryAGet32(ds, 0x3f6708);
    memoryASet16(ds, 0x3f672f, ax);
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bf57c() // 0160:1bf57c +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = 0x00000009;
    edi = memoryAGet32(ds, 0x3f6708);
    esi = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x3f6708);
    memoryASet(ds, eax, 0x03);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, eax + 22, 0x00000000);
    edx = memoryAGet32(ds, 0x3f6734);
    ax = memoryAGet16(ds, eax + 22);
    memoryASet16(ds, edx + 20, ax);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, edx + 20);
    memoryASet(ds, eax + 13, dl);
    eax = memoryAGet32(ds, 0x3f6708);
    sub_1bf42a();
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x3f6734);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bf625() // 0160:1bf625 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet(ds, eax, 0x1a);
    eax = memoryAGet32(ds, 0x3f6740);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet16(ds, eax + 20, 0x0000);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet32(ds, eax + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x3f6744);
    sub_1bf42a();
    edx = eax;
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet32(ds, eax + 14, edx);
    eax = memoryAGet32(ds, 0x3f6740);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x3f6744);
    memoryASet(ds, eax, 0x0a);
    eax = memoryAGet32(ds, 0x3f6740);
    ecx = 0x00000006;
    sub_1bf310();
    esi = memoryAGet32(ds, 0x3f6744);
    edi = 0x003f6725;
    esi++;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x3f6744);
    dl = memoryAGet(ds, eax + 1);
    memoryASet(ds, 0x3f6715, dl);
    ebx = 0x003f6718;
    dl = memoryAGet(ds, eax + 2);
    ecx = 0x003f6719;
    memoryASet(ds, 0x3f6716, dl);
    edx = 0x003f6717;
    eax = memoryAGet32(ds, eax + 3);
    sub_1bf3a9();
    eax = memoryAGet32(ds, 0x3f6744);
    eax = memoryAGet32(ds, eax + 3);
    sub_1bf3cf();
    memoryASet32(ds, 0x3f671a, eax);
    eax = memoryAGet32(ds, 0x3f6740);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf710() // 0160:1bf710 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 13, 0x00);
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x3f6734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x3f6734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x3f6748);
    sub_1bf42a();
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x3f6748);
    memoryASet(ds, eax, 0x0b);
    eax = memoryAGet32(ds, 0x3f6748);
    memoryASet(ds, eax + 1, bl);
    eax = memoryAGet32(ds, 0x3f6734);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    eax = memoryAGet32(ds, 0x3f6748);
    eax = memoryAGet32(ds, eax + 2);
    sub_1bf3cf();
    memoryASet32(ds, 0x3f6710, eax);
    eax = memoryAGet32(ds, 0x3f6748);
    memoryASet16(ds, 0x3f670e, bx);
    al = memoryAGet(ds, eax + 6);
    al &= 0xd0;
    memoryASet(ds, 0x3f6714, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf7d4() // 0160:1bf7d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x3f6758);
    memoryASet(ds, edx, 0x16);
    edx = memoryAGet32(ds, 0x3f6758);
    cl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, edx + 1, cl);
    edx = memoryAGet32(ds, 0x3f6758);
    memoryASet(ds, edx + 2, 0x84);
    edx = memoryAGet32(ds, 0x3f6758);
    memoryASet(ds, edx + 13, 0x00);
    edx = memoryAGet32(ds, 0x3f6758);
    memoryASet32(ds, edx + 14, eax);
    ebx -= eax;
    eax = memoryAGet32(ds, 0x3f6758);
    memoryASet32(ds, eax + 18, ebx);
    eax = memoryAGet32(ds, 0x3f6758);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6758);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf833() // 0160:1bf833 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x3f675c);
    memoryASet(ds, eax, 0x0d);
    eax = memoryAGet32(ds, 0x3f675c);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f675c);
    memoryASet(ds, eax + 2, 0x85);
    eax = memoryAGet32(ds, 0x3f675c);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f675c);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    edx = pop32();
    esp += 4;
}
void sub_1bf86e() // 0160:1bf86e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
loc_1bf874: // 0160:1bf874
    edx = ecx;
    eax = ebx;
    sub_1bf7d4();
    ax = memoryAGet16(ds, 0x3f672f);
    al = 0;
    ah &= 0x02;
    eax &= 0x0000ffff;
    if (!eax)
        goto loc_1bf874;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf892() // 0160:1bf892 +long
{
    esp -= 4;
loc_1bf892: // 0160:1bf892
    sub_1bf833();
    ax = memoryAGet16(ds, 0x3f672f);
    al = 0;
    ah &= 0x02;
    eax &= 0x0000ffff;
    if (eax)
        goto loc_1bf892;
    esp += 4;
}
void sub_1bf8aa() // 0160:1bf8aa +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00001500;
    ah = 0x2f;
    ecx = 0x003f66a4;
    ebx = 0;
    memoryASet32(ds, 0x3f66c0, edx);
    memoryASet32(ds, 0x3f66b4, ebx);
    memoryASet(ds, 0x3f66dc, ah);
    edx = 0x00000300;
    eax = 0x003f66a4;
    ebx = 0;
    memoryASet16(ds, 0x3f66d8, dx);
    dl = 0;
    memoryASet16(ds, 0x3f66e0, bx);
    memoryASet(ds, 0x3f66dd, dl);
    edx = ds;
    ebx = 0x003f66d8;
    eax = 0x00000031;
    memoryASet16(ds, 0x3f66f4, dx);
    memoryASet32(ds, 0x3f66ec, ecx);
    ecx = 0x003f66f4;
    edx = ebx;
    sub_1ccae2();
    if (memoryAGet16(ds, 0x3f66b4) & 0xffff)
        goto loc_1bf925;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bf925: // 0160:1bf925
    al = memoryAGet(ds, 0x3f66b4);
    memoryASet(ds, 0x3f670c, al);
    al = memoryAGet(ds, 0x3f66bc);
    memoryASet(ds, 0x3f670d, al);
    eax = 0;
    al = memoryAGet(ds, 0x3f670d);
    memoryASet32(ds, 0x3f6768, eax);
    sub_1bf625();
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf953() // 0160:1bf953 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    bl = al;
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x3f6734);
    dl = memoryAGet(ds, 0x3f6764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x3f6750);
    sub_1bf42a();
    edx = memoryAGet32(ds, 0x3f6734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x3f6734);
    memoryASet16(ds, eax + 18, 0x0002);
    eax = memoryAGet32(ds, 0x3f6750);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x3f6750);
    memoryASet(ds, eax + 1, bl);
    eax = memoryAGet32(ds, 0x3f6734);
    sub_1bf310();
    eax = memoryAGet32(ds, 0x3f6734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x3f672f, ax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bf9c9() // 0160:1bf9c9 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_1bf9cc: // 0160:1bf9cc
    sub_1bf625();
    eax = 0;
    ax = memoryAGet16(ds, 0x3f672f);
    edx++;
    if (eax != 0x00008102)
        goto loc_1bf9e9;
    if ((int32_t)edx < (int32_t)0x000001f4)
        goto loc_1bf9cc;
loc_1bf9e9: // 0160:1bf9e9
    if (edx != 0x000001f4)
        goto loc_1bf9f5;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1bf9f5: // 0160:1bf9f5
    eax = 0;
    al = memoryAGet(ds, 0x3f6716);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_1bfa08;
    memoryASet(ds, 0x3f6716, 0x23);
loc_1bfa08: // 0160:1bfa08
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
}
void sub_1bfa0f() // 0160:1bfa0f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000100;
    ebx = esp;
    eax += 0x0000000f;
    memoryASet32(ds, esp, edx);
    eax = sar32(eax, 0x04);
    edx = esp;
    memoryASet32(ds, esp + 4, eax);
    eax = 0x00000031;
    sub_1cc76a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_1bfa3f;
    eax = 0;
    goto loc_1bfa4a;
loc_1bfa3f: // 0160:1bfa3f
    eax = memoryAGet32(ds, esp);
    eax &= 0x0000ffff;
    eax <<= 4;
loc_1bfa4a: // 0160:1bfa4a
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bfa50() // 0160:1bfa50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    if (memoryAGet32(ds, 0x3f6700) != 0x00000000)
        goto loc_1bfb3c;
    eax = 0x0000001e;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6734, eax);
    eax = 0x00000006;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6738, eax);
    eax = 0x0000000b;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f673c, eax);
    eax = 0x0000001a;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6740, eax);
    eax = 0x00000007;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6744, eax);
    eax = 0x00000007;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6748, eax);
    eax = 0x00000005;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f674c, eax);
    eax = 0x00000002;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6750, eax);
    eax = 0x00000018;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6754, eax);
    eax = 0x00000016;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6758, eax);
    eax = 0x0000000d;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f675c, eax);
    eax = 0x00000001;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6760, eax);
    eax = 0x0000000b;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6704, eax);
    eax = 0x00000009;
    ebx = 0x00000001;
    sub_1bfa0f();
    memoryASet32(ds, 0x3f6708, eax);
    memoryASet32(ds, 0x3f6700, ebx);
loc_1bfb3c: // 0160:1bfb3c
    sub_1bf8aa();
    if (ax)
        goto loc_1bfb4b;
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bfb4b: // 0160:1bfb4b
    ecx = 0;
    memoryASet32(ds, 0x3f676c, ecx);
    memoryASet32(ds, 0x3f6770, ecx);
    sub_1bf892();
    eax = 0x00000001;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bfbd3() // 0160:1bfbd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    ebx = 0;
    sub_1bfd2f();
    memoryASet32(ds, 0x3f676c, ebx);
    memoryASet32(ds, 0x3f6770, ebx);
    sub_1bf9c9();
    if (!eax)
        goto loc_1bfc92;
    eax = 0;
    al = memoryAGet(ds, 0x3f6715);
    if ((int32_t)edx < (int32_t)eax)
        goto loc_1bfc0f;
    eax = 0;
    al = memoryAGet(ds, 0x3f6716);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1bfc16;
loc_1bfc0f: // 0160:1bfc0f
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1bfc16: // 0160:1bfc16
    ebx = (short)dx;
    eax = ebx;
    sub_1bf710();
    eax = 0;
    al = memoryAGet(ds, 0x3f6714);
    if (eax == 0x00000040)
        goto loc_1bfc0f;
    ecx = 0;
    eax = memoryAGet32(ds, 0x3f6710);
    cl = memoryAGet(ds, 0x3f6716);
    memoryASet32(ds, 0x1e3d90, eax);
    eax = edx + 1;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1bfc51;
    eax = memoryAGet32(ds, 0x3f671a);
    memoryASet32(ds, 0x3f6774, eax);
    goto loc_1bfc6b;
loc_1bfc51: // 0160:1bfc51
    edx++;
    eax = (short)dx;
    sub_1bf710();
    eax = memoryAGet32(ds, 0x3f6710);
    memoryASet32(ds, 0x3f6774, eax);
    eax = ebx;
    sub_1bf710();
loc_1bfc6b: // 0160:1bfc6b
    eax = 0x00000001;
    sub_1bf953();
    edx = memoryAGet32(ds, 0x3f6774);
    eax = memoryAGet32(ds, 0x1e3d90);
    esi = 0x00000001;
    sub_1bf86e();
    memoryASet32(ds, 0x3f676c, esi);
    eax = esi;
loc_1bfc92: // 0160:1bfc92
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bfcd4() // 0160:1bfcd4 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x3f676c) == 0x00000000)
        goto loc_1bfcf5;
    if (memoryAGet32(ds, 0x3f6770) != 0x00000000)
        goto loc_1bfcf5;
    sub_1bf43a();
    memoryASet32(ds, 0x1e3d8c, eax);
    sub_1bf892();
loc_1bfcf5: // 0160:1bfcf5
    memoryASet32(ds, 0x3f6770, 0x00000001);
    esp += 4;
}
void sub_1bfd00() // 0160:1bfd00 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x3f676c) == 0x00000000)
        goto loc_1bfd24;
    if (memoryAGet32(ds, 0x3f6770) == 0x00000000)
        goto loc_1bfd24;
    edx = memoryAGet32(ds, 0x3f6774);
    eax = memoryAGet32(ds, 0x1e3d8c);
    sub_1bf86e();
loc_1bfd24: // 0160:1bfd24
    ecx = 0;
    memoryASet32(ds, 0x3f6770, ecx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1bfd2f() // 0160:1bfd2f +long
{
    esp -= 4;
    push32(edx);
    sub_1bf892();
    eax = 0;
    edx = 0;
    sub_1bf953();
    memoryASet32(ds, 0x3f676c, edx);
    memoryASet32(ds, 0x3f6770, edx);
    edx = pop32();
    esp += 4;
}
void sub_1bfd4c() // 0160:1bfd4c +long
{
    esp -= 4;
    push32(edx);
    esp -= 0x0000000c;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1bfd58;
    edx ^= eax;
loc_1bfd58: // 0160:1bfd58
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1bfd65;
    edx = 0x000000ff;
loc_1bfd65: // 0160:1bfd65
    eax = esp;
    sub_1bf4d2();
    eax = esp;
    memoryASet(ds, esp + 2, dl);
    memoryASet(ds, esp + 4, dl);
    sub_1bf57c();
    esp += 0x0000000c;
    edx = pop32();
    esp += 4;
}
void sub_1bfd80() // 0160:1bfd80 +long
{
    esp -= 4;
    esp -= 0x0000000c;
    eax = esp;
    sub_1bf4d2();
    eax = 0;
    al = memoryAGet(ds, esp + 2);
    esp += 0x0000000c;
    esp += 4;
}
void sub_1bfdbf() // 0160:1bfdbf +long
{
    if (memoryAGet32(ss, esp+8) > memoryAGet32(ss, esp+4))
        playSound(ds, memoryAGet32(ss, esp+4), memoryAGet32(ss, esp+8)-memoryAGet32(ss, esp+4), 16000, "s8");
    return;
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_1c0559;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_1c03f0;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_1c0692;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_1c0897;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1bfeb9;
    memoryASet32(ds, 0x1c08d6, 0x00000000);
    memoryASet32(ds, 0x1c08cc, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c08b2, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08c2, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08ba, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c08e0, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0a9e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0aa8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0abc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0ab2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bfea3;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0a9e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0aa8, eax);
    memoryASet32(ds, 0x1c0abc, 0x00000000);
    memoryASet32(ds, 0x1c0ab2, 0x00000000);
loc_1bfea3: // 0160:1bfea3
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c08d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c08cc, eax);
loc_1bfeb9: // 0160:1bfeb9
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1bff77;
    memoryASet32(ds, 0x1c0910, 0x00000000);
    memoryASet32(ds, 0x1c0906, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c08ec, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08fc, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08f4, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c091a, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0acb, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0ad5, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0ae9, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0adf, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1bff61;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0acb, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0ad5, eax);
    memoryASet32(ds, 0x1c0ae9, 0x00000000);
    memoryASet32(ds, 0x1c0adf, 0x00000000);
loc_1bff61: // 0160:1bff61
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0910, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0906, eax);
loc_1bff77: // 0160:1bff77
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c0035;
    memoryASet32(ds, 0x1c094a, 0x00000000);
    memoryASet32(ds, 0x1c0940, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c0926, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0936, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c092e, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c0954, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0af8, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0b02, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b16, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b0c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c001f;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0af8, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b02, eax);
    memoryASet32(ds, 0x1c0b16, 0x00000000);
    memoryASet32(ds, 0x1c0b0c, 0x00000000);
loc_1c001f: // 0160:1c001f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c094a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0940, eax);
loc_1c0035: // 0160:1c0035
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c00f3;
    memoryASet32(ds, 0x1c0984, 0x00000000);
    memoryASet32(ds, 0x1c097a, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c0960, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0970, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0968, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c098e, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0b25, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0b2f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b43, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b39, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c00dd;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b25, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b2f, eax);
    memoryASet32(ds, 0x1c0b43, 0x00000000);
    memoryASet32(ds, 0x1c0b39, 0x00000000);
loc_1c00dd: // 0160:1c00dd
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0984, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c097a, eax);
loc_1c00f3: // 0160:1c00f3
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c01b1;
    memoryASet32(ds, 0x1c09be, 0x00000000);
    memoryASet32(ds, 0x1c09b4, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c099a, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09aa, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09a2, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c09c8, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0b52, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0b5c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b70, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b66, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c019b;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b52, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b5c, eax);
    memoryASet32(ds, 0x1c0b70, 0x00000000);
    memoryASet32(ds, 0x1c0b66, 0x00000000);
loc_1c019b: // 0160:1c019b
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c09be, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c09b4, eax);
loc_1c01b1: // 0160:1c01b1
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c026f;
    memoryASet32(ds, 0x1c09f8, 0x00000000);
    memoryASet32(ds, 0x1c09ee, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c09d4, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09e4, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09dc, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c0a02, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0b7f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0b89, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b9d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b93, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0259;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b7f, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b89, eax);
    memoryASet32(ds, 0x1c0b9d, 0x00000000);
    memoryASet32(ds, 0x1c0b93, 0x00000000);
loc_1c0259: // 0160:1c0259
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c09f8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c09ee, eax);
loc_1c026f: // 0160:1c026f
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c032d;
    memoryASet32(ds, 0x1c0a32, 0x00000000);
    memoryASet32(ds, 0x1c0a28, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c0a0e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a1e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a16, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c0a3c, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0bac, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0bb6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0bca, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0bc0, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0317;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0bac, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0bb6, eax);
    memoryASet32(ds, 0x1c0bca, 0x00000000);
    memoryASet32(ds, 0x1c0bc0, 0x00000000);
loc_1c0317: // 0160:1c0317
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0a32, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0a28, eax);
loc_1c032d: // 0160:1c032d
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c03eb;
    memoryASet32(ds, 0x1c0a6c, 0x00000000);
    memoryASet32(ds, 0x1c0a62, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c0a48, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a58, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a50, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c0a76, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c0bd9, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c0be3, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0bf7, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0bed, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c03d5;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0bd9, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0be3, eax);
    memoryASet32(ds, 0x1c0bf7, 0x00000000);
    memoryASet32(ds, 0x1c0bed, 0x00000000);
loc_1c03d5: // 0160:1c03d5
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0a6c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0a62, eax);
loc_1c03eb: // 0160:1c03eb
    goto loc_1c0c00;
loc_1c03f0: // 0160:1c03f0
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1c0420;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08c2, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08ba, eax);
loc_1c0420: // 0160:1c0420
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1c044c;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08fc, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c08f4, eax);
loc_1c044c: // 0160:1c044c
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c0478;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0936, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c092e, eax);
loc_1c0478: // 0160:1c0478
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c04a4;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0970, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0968, eax);
loc_1c04a4: // 0160:1c04a4
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c04d0;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09aa, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09a2, eax);
loc_1c04d0: // 0160:1c04d0
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c04fc;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09e4, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c09dc, eax);
loc_1c04fc: // 0160:1c04fc
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c0528;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a1e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a16, eax);
loc_1c0528: // 0160:1c0528
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c0554;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a58, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c0a50, eax);
loc_1c0554: // 0160:1c0554
    goto loc_1c0c00;
loc_1c0559: // 0160:1c0559
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1c0583;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0abc, eax);
    memoryASet32(ds, 0x1c08d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0ab2, eax);
    memoryASet32(ds, 0x1c08cc, eax);
loc_1c0583: // 0160:1c0583
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1c05a9;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0ae9, eax);
    memoryASet32(ds, 0x1c0910, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0adf, eax);
    memoryASet32(ds, 0x1c0906, eax);
loc_1c05a9: // 0160:1c05a9
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c05cf;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b16, eax);
    memoryASet32(ds, 0x1c094a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b0c, eax);
    memoryASet32(ds, 0x1c0940, eax);
loc_1c05cf: // 0160:1c05cf
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c05f5;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b43, eax);
    memoryASet32(ds, 0x1c0984, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b39, eax);
    memoryASet32(ds, 0x1c097a, eax);
loc_1c05f5: // 0160:1c05f5
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c061b;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b70, eax);
    memoryASet32(ds, 0x1c09be, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b66, eax);
    memoryASet32(ds, 0x1c09b4, eax);
loc_1c061b: // 0160:1c061b
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c0641;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0b9d, eax);
    memoryASet32(ds, 0x1c09f8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0b93, eax);
    memoryASet32(ds, 0x1c09ee, eax);
loc_1c0641: // 0160:1c0641
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c0667;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0bca, eax);
    memoryASet32(ds, 0x1c0a32, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0bc0, eax);
    memoryASet32(ds, 0x1c0a28, eax);
loc_1c0667: // 0160:1c0667
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c068d;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c0bf7, eax);
    memoryASet32(ds, 0x1c0a6c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c0bed, eax);
    memoryASet32(ds, 0x1c0a62, eax);
loc_1c068d: // 0160:1c068d
    goto loc_1c0c00;
loc_1c0692: // 0160:1c0692
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c08c2, eax);
    memoryASet32(ds, 0x1c08ba, eax);
    memoryASet32(ds, 0x1c08d6, 0x00000000);
    memoryASet32(ds, 0x1c08cc, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0a9e, eax);
    memoryASet32(ds, 0x1c08b2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0aa8, eax);
    memoryASet32(ds, 0x1c08e0, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c08fc, eax);
    memoryASet32(ds, 0x1c08f4, eax);
    memoryASet32(ds, 0x1c0910, 0x00000000);
    memoryASet32(ds, 0x1c0906, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0acb, eax);
    memoryASet32(ds, 0x1c08ec, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0ad5, eax);
    memoryASet32(ds, 0x1c091a, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c0936, eax);
    memoryASet32(ds, 0x1c092e, eax);
    memoryASet32(ds, 0x1c094a, 0x00000000);
    memoryASet32(ds, 0x1c0940, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0af8, eax);
    memoryASet32(ds, 0x1c0926, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b02, eax);
    memoryASet32(ds, 0x1c0954, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c0970, eax);
    memoryASet32(ds, 0x1c0968, eax);
    memoryASet32(ds, 0x1c0984, 0x00000000);
    memoryASet32(ds, 0x1c097a, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b25, eax);
    memoryASet32(ds, 0x1c0960, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b2f, eax);
    memoryASet32(ds, 0x1c098e, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c09aa, eax);
    memoryASet32(ds, 0x1c09a2, eax);
    memoryASet32(ds, 0x1c09be, 0x00000000);
    memoryASet32(ds, 0x1c09b4, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b52, eax);
    memoryASet32(ds, 0x1c099a, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b5c, eax);
    memoryASet32(ds, 0x1c09c8, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c09e4, eax);
    memoryASet32(ds, 0x1c09dc, eax);
    memoryASet32(ds, 0x1c09f8, 0x00000000);
    memoryASet32(ds, 0x1c09ee, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0b7f, eax);
    memoryASet32(ds, 0x1c09d4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0b89, eax);
    memoryASet32(ds, 0x1c0a02, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c0a1e, eax);
    memoryASet32(ds, 0x1c0a16, eax);
    memoryASet32(ds, 0x1c0a32, 0x00000000);
    memoryASet32(ds, 0x1c0a28, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0bac, eax);
    memoryASet32(ds, 0x1c0a0e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0bb6, eax);
    memoryASet32(ds, 0x1c0a3c, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c0a58, eax);
    memoryASet32(ds, 0x1c0a50, eax);
    memoryASet32(ds, 0x1c0a6c, 0x00000000);
    memoryASet32(ds, 0x1c0a62, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c0bd9, eax);
    memoryASet32(ds, 0x1c0a48, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c0be3, eax);
    memoryASet32(ds, 0x1c0a76, eax);
    goto loc_1c0c00;
loc_1c0897: // 0160:1c0897
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    ecx += ecx;
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_1c08a8;
loc_1c08a8: // 0160:1c08a8
    goto loc_1c08aa;
loc_1c08aa: // 0160:1c08aa
    goto loc_1c08ac;
loc_1c08ac: // 0160:1c08ac
    goto loc_1c08ae;
loc_1c08ae: // 0160:1c08ae
    goto loc_1c08b0;
loc_1c08b0: // 0160:1c08b0
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfd9f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfd9f, memoryAGet32(ds, 0x1bfd9f) + 0x7fffffff);
    memoryASet32(ds, 0x1c08b2, memoryAGet32(ds, 0x1c08b2) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c08b2) >= 0x7fffffff)
        goto loc_1c0a98;
loc_1c08ea: // 0160:1c08ea
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfda3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfda3, memoryAGet32(ds, 0x1bfda3) + 0x7fffffff);
    memoryASet32(ds, 0x1c08ec, memoryAGet32(ds, 0x1c08ec) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c08ec) >= 0x7fffffff)
        goto loc_1c0ac5;
loc_1c0924: // 0160:1c0924
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfda7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfda7, memoryAGet32(ds, 0x1bfda7) + 0x7fffffff);
    memoryASet32(ds, 0x1c0926, memoryAGet32(ds, 0x1c0926) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c0926) >= 0x7fffffff)
        goto loc_1c0af2;
loc_1c095e: // 0160:1c095e
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdab) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdab, memoryAGet32(ds, 0x1bfdab) + 0x7fffffff);
    memoryASet32(ds, 0x1c0960, memoryAGet32(ds, 0x1c0960) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c0960) >= 0x7fffffff)
        goto loc_1c0b1f;
loc_1c0998: // 0160:1c0998
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdaf) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdaf, memoryAGet32(ds, 0x1bfdaf) + 0x7fffffff);
    memoryASet32(ds, 0x1c099a, memoryAGet32(ds, 0x1c099a) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c099a) >= 0x7fffffff)
        goto loc_1c0b4c;
loc_1c09d2: // 0160:1c09d2
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdb3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdb3, memoryAGet32(ds, 0x1bfdb3) + 0x7fffffff);
    memoryASet32(ds, 0x1c09d4, memoryAGet32(ds, 0x1c09d4) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c09d4) >= 0x7fffffff)
        goto loc_1c0b79;
loc_1c0a0c: // 0160:1c0a0c
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdb7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdb7, memoryAGet32(ds, 0x1bfdb7) + 0x7fffffff);
    memoryASet32(ds, 0x1c0a0e, memoryAGet32(ds, 0x1c0a0e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c0a0e) >= 0x7fffffff)
        goto loc_1c0ba6;
loc_1c0a46: // 0160:1c0a46
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdbb) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdbb, memoryAGet32(ds, 0x1bfdbb) + 0x7fffffff);
    memoryASet32(ds, 0x1c0a48, memoryAGet32(ds, 0x1c0a48) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c0a48) >= 0x7fffffff)
        goto loc_1c0bd3;
loc_1c0a80: // 0160:1c0a80
    al = dh;
    ax ^= 0x8080;
    memoryASet16(ds, ecx + edi, ax);
    ecx += 0x00000002;
    if (ecx)
        goto loc_1c08b0;
    goto loc_1c0c00;
loc_1c0a98: // 0160:1c0a98
    memoryASet32(ds, 0x1c08b2, 0x7fffffff);
    memoryASet32(ds, 0x1c08e0, 0x7fffffff);
    memoryASet32(ds, 0x1c08cc, 0x7fffffff);
    memoryASet32(ds, 0x1c08d6, 0x7fffffff);
    goto loc_1c08ea;
loc_1c0ac5: // 0160:1c0ac5
    memoryASet32(ds, 0x1c08ec, 0x7fffffff);
    memoryASet32(ds, 0x1c091a, 0x7fffffff);
    memoryASet32(ds, 0x1c0906, 0x7fffffff);
    memoryASet32(ds, 0x1c0910, 0x7fffffff);
    goto loc_1c0924;
loc_1c0af2: // 0160:1c0af2
    memoryASet32(ds, 0x1c0926, 0x7fffffff);
    memoryASet32(ds, 0x1c0954, 0x7fffffff);
    memoryASet32(ds, 0x1c0940, 0x7fffffff);
    memoryASet32(ds, 0x1c094a, 0x7fffffff);
    goto loc_1c095e;
loc_1c0b1f: // 0160:1c0b1f
    memoryASet32(ds, 0x1c0960, 0x7fffffff);
    memoryASet32(ds, 0x1c098e, 0x7fffffff);
    memoryASet32(ds, 0x1c097a, 0x7fffffff);
    memoryASet32(ds, 0x1c0984, 0x7fffffff);
    goto loc_1c0998;
loc_1c0b4c: // 0160:1c0b4c
    memoryASet32(ds, 0x1c099a, 0x7fffffff);
    memoryASet32(ds, 0x1c09c8, 0x7fffffff);
    memoryASet32(ds, 0x1c09b4, 0x7fffffff);
    memoryASet32(ds, 0x1c09be, 0x7fffffff);
    goto loc_1c09d2;
loc_1c0b79: // 0160:1c0b79
    memoryASet32(ds, 0x1c09d4, 0x7fffffff);
    memoryASet32(ds, 0x1c0a02, 0x7fffffff);
    memoryASet32(ds, 0x1c09ee, 0x7fffffff);
    memoryASet32(ds, 0x1c09f8, 0x7fffffff);
    goto loc_1c0a0c;
loc_1c0ba6: // 0160:1c0ba6
    memoryASet32(ds, 0x1c0a0e, 0x7fffffff);
    memoryASet32(ds, 0x1c0a3c, 0x7fffffff);
    memoryASet32(ds, 0x1c0a28, 0x7fffffff);
    memoryASet32(ds, 0x1c0a32, 0x7fffffff);
    goto loc_1c0a46;
loc_1c0bd3: // 0160:1c0bd3
    memoryASet32(ds, 0x1c0a48, 0x7fffffff);
    memoryASet32(ds, 0x1c0a76, 0x7fffffff);
    memoryASet32(ds, 0x1c0a62, 0x7fffffff);
    memoryASet32(ds, 0x1c0a6c, 0x7fffffff);
    goto loc_1c0a80;
loc_1c0c00: // 0160:1c0c00
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    flagsFromReg32(pop32());
    esp = ebp; ebp = pop32();
    //stop("stack_unbalanced");
    esp += 4;
}
void sub_1c0c04() // 0160:1c0c04 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_1c12ee;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_1c11dd;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_1c1427;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_1c1604;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1c0cf3;
    memoryASet32(ds, 0x1c163a, 0x00000000);
    memoryASet32(ds, 0x1c1630, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c161e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1626, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c1644, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c17c4, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c17ce, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c17e2, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c17d8, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0cdd;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c17c4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c17ce, eax);
    memoryASet32(ds, 0x1c17e2, 0x00000000);
    memoryASet32(ds, 0x1c17d8, 0x00000000);
loc_1c0cdd: // 0160:1c0cdd
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c163a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1630, eax);
loc_1c0cf3: // 0160:1c0cf3
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1c0da6;
    memoryASet32(ds, 0x1c166c, 0x00000000);
    memoryASet32(ds, 0x1c1662, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c1650, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1658, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c1676, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c17f1, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c17fb, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c180f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1805, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0d90;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c17f1, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c17fb, eax);
    memoryASet32(ds, 0x1c180f, 0x00000000);
    memoryASet32(ds, 0x1c1805, 0x00000000);
loc_1c0d90: // 0160:1c0d90
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c166c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1662, eax);
loc_1c0da6: // 0160:1c0da6
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c0e59;
    memoryASet32(ds, 0x1c169e, 0x00000000);
    memoryASet32(ds, 0x1c1694, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c1682, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c168a, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c16a8, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c181e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c1828, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c183c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1832, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0e43;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c181e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1828, eax);
    memoryASet32(ds, 0x1c183c, 0x00000000);
    memoryASet32(ds, 0x1c1832, 0x00000000);
loc_1c0e43: // 0160:1c0e43
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c169e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1694, eax);
loc_1c0e59: // 0160:1c0e59
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c0f0c;
    memoryASet32(ds, 0x1c16d0, 0x00000000);
    memoryASet32(ds, 0x1c16c6, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c16b4, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c16bc, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c16da, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c184b, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c1855, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1869, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c185f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0ef6;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c184b, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1855, eax);
    memoryASet32(ds, 0x1c1869, 0x00000000);
    memoryASet32(ds, 0x1c185f, 0x00000000);
loc_1c0ef6: // 0160:1c0ef6
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c16d0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c16c6, eax);
loc_1c0f0c: // 0160:1c0f0c
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c0fbf;
    memoryASet32(ds, 0x1c1702, 0x00000000);
    memoryASet32(ds, 0x1c16f8, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c16e6, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c16ee, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c170c, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c1878, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c1882, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1896, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c188c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c0fa9;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c1878, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1882, eax);
    memoryASet32(ds, 0x1c1896, 0x00000000);
    memoryASet32(ds, 0x1c188c, 0x00000000);
loc_1c0fa9: // 0160:1c0fa9
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1702, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c16f8, eax);
loc_1c0fbf: // 0160:1c0fbf
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c1072;
    memoryASet32(ds, 0x1c1734, 0x00000000);
    memoryASet32(ds, 0x1c172a, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c1718, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1720, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c173e, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c18a5, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c18af, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c18c3, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c18b9, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c105c;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18a5, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c18af, eax);
    memoryASet32(ds, 0x1c18c3, 0x00000000);
    memoryASet32(ds, 0x1c18b9, 0x00000000);
loc_1c105c: // 0160:1c105c
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1734, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c172a, eax);
loc_1c1072: // 0160:1c1072
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c1125;
    memoryASet32(ds, 0x1c1766, 0x00000000);
    memoryASet32(ds, 0x1c175c, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c174a, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1752, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c1770, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c18d2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c18dc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c18f0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c18e6, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c110f;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18d2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c18dc, eax);
    memoryASet32(ds, 0x1c18f0, 0x00000000);
    memoryASet32(ds, 0x1c18e6, 0x00000000);
loc_1c110f: // 0160:1c110f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1766, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c175c, eax);
loc_1c1125: // 0160:1c1125
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c11d8;
    memoryASet32(ds, 0x1c1798, 0x00000000);
    memoryASet32(ds, 0x1c178e, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x1c177c, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1784, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1c17a2, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x1c18ff, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x1c1909, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c191d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1913, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_1c11c2;
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18ff, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1909, eax);
    memoryASet32(ds, 0x1c191d, 0x00000000);
    memoryASet32(ds, 0x1c1913, 0x00000000);
loc_1c11c2: // 0160:1c11c2
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1798, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c178e, eax);
loc_1c11d8: // 0160:1c11d8
    goto loc_1c1926;
loc_1c11dd: // 0160:1c11dd
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1c1202;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1626, eax);
loc_1c1202: // 0160:1c1202
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1c1223;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1658, eax);
loc_1c1223: // 0160:1c1223
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c1244;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c168a, eax);
loc_1c1244: // 0160:1c1244
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c1265;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c16bc, eax);
loc_1c1265: // 0160:1c1265
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c1286;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c16ee, eax);
loc_1c1286: // 0160:1c1286
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c12a7;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1720, eax);
loc_1c12a7: // 0160:1c12a7
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c12c8;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1752, eax);
loc_1c12c8: // 0160:1c12c8
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c12e9;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x3c4a6c;
    eax += ebx;
    memoryASet32(ds, 0x1c1784, eax);
loc_1c12e9: // 0160:1c12e9
    goto loc_1c1926;
loc_1c12ee: // 0160:1c12ee
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_1c1318;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c17e2, eax);
    memoryASet32(ds, 0x1c163a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c17d8, eax);
    memoryASet32(ds, 0x1c1630, eax);
loc_1c1318: // 0160:1c1318
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1c133e;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c180f, eax);
    memoryASet32(ds, 0x1c166c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1805, eax);
    memoryASet32(ds, 0x1c1662, eax);
loc_1c133e: // 0160:1c133e
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_1c1364;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c183c, eax);
    memoryASet32(ds, 0x1c169e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1832, eax);
    memoryASet32(ds, 0x1c1694, eax);
loc_1c1364: // 0160:1c1364
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_1c138a;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1869, eax);
    memoryASet32(ds, 0x1c16d0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c185f, eax);
    memoryASet32(ds, 0x1c16c6, eax);
loc_1c138a: // 0160:1c138a
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_1c13b0;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c1896, eax);
    memoryASet32(ds, 0x1c1702, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c188c, eax);
    memoryASet32(ds, 0x1c16f8, eax);
loc_1c13b0: // 0160:1c13b0
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_1c13d6;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c18c3, eax);
    memoryASet32(ds, 0x1c1734, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c18b9, eax);
    memoryASet32(ds, 0x1c172a, eax);
loc_1c13d6: // 0160:1c13d6
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_1c13fc;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c18f0, eax);
    memoryASet32(ds, 0x1c1766, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c18e6, eax);
    memoryASet32(ds, 0x1c175c, eax);
loc_1c13fc: // 0160:1c13fc
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_1c1422;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x1c191d, eax);
    memoryASet32(ds, 0x1c1798, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x1c1913, eax);
    memoryASet32(ds, 0x1c178e, eax);
loc_1c1422: // 0160:1c1422
    goto loc_1c1926;
loc_1c1427: // 0160:1c1427
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c1626, eax);
    memoryASet32(ds, 0x1c163a, 0x00000000);
    memoryASet32(ds, 0x1c1630, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c17c4, eax);
    memoryASet32(ds, 0x1c161e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c17ce, eax);
    memoryASet32(ds, 0x1c1644, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c1658, eax);
    memoryASet32(ds, 0x1c166c, 0x00000000);
    memoryASet32(ds, 0x1c1662, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c17f1, eax);
    memoryASet32(ds, 0x1c1650, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c17fb, eax);
    memoryASet32(ds, 0x1c1676, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c168a, eax);
    memoryASet32(ds, 0x1c169e, 0x00000000);
    memoryASet32(ds, 0x1c1694, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c181e, eax);
    memoryASet32(ds, 0x1c1682, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1828, eax);
    memoryASet32(ds, 0x1c16a8, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c16bc, eax);
    memoryASet32(ds, 0x1c16d0, 0x00000000);
    memoryASet32(ds, 0x1c16c6, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c184b, eax);
    memoryASet32(ds, 0x1c16b4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1855, eax);
    memoryASet32(ds, 0x1c16da, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c16ee, eax);
    memoryASet32(ds, 0x1c1702, 0x00000000);
    memoryASet32(ds, 0x1c16f8, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c1878, eax);
    memoryASet32(ds, 0x1c16e6, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1882, eax);
    memoryASet32(ds, 0x1c170c, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c1720, eax);
    memoryASet32(ds, 0x1c1734, 0x00000000);
    memoryASet32(ds, 0x1c172a, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18a5, eax);
    memoryASet32(ds, 0x1c1718, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c18af, eax);
    memoryASet32(ds, 0x1c173e, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c1752, eax);
    memoryASet32(ds, 0x1c1766, 0x00000000);
    memoryASet32(ds, 0x1c175c, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18d2, eax);
    memoryASet32(ds, 0x1c174a, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c18dc, eax);
    memoryASet32(ds, 0x1c1770, eax);
    eax = 0x3c4a6c;
    memoryASet32(ds, 0x1c1784, eax);
    memoryASet32(ds, 0x1c1798, 0x00000000);
    memoryASet32(ds, 0x1c178e, 0x00000000);
    eax = 0x001bfd97;
    memoryASet32(ds, 0x1c18ff, eax);
    memoryASet32(ds, 0x1c177c, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x1c1909, eax);
    memoryASet32(ds, 0x1c17a2, eax);
    goto loc_1c1926;
loc_1c1604: // 0160:1c1604
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_1c1613;
loc_1c1613: // 0160:1c1613
    goto loc_1c1615;
loc_1c1615: // 0160:1c1615
    goto loc_1c1617;
loc_1c1617: // 0160:1c1617
    goto loc_1c1619;
loc_1c1619: // 0160:1c1619
    goto loc_1c161c;
    // gap 1 bytes
loc_1c161c: // 0160:1c161c
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfd9f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfd9f, memoryAGet32(ds, 0x1bfd9f) + 0x7fffffff);
    memoryASet32(ds, 0x1c161e, memoryAGet32(ds, 0x1c161e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c161e) >= 0x7fffffff)
        goto loc_1c17be;
loc_1c164e: // 0160:1c164e
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfda3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfda3, memoryAGet32(ds, 0x1bfda3) + 0x7fffffff);
    memoryASet32(ds, 0x1c1650, memoryAGet32(ds, 0x1c1650) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c1650) >= 0x7fffffff)
        goto loc_1c17eb;
loc_1c1680: // 0160:1c1680
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfda7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfda7, memoryAGet32(ds, 0x1bfda7) + 0x7fffffff);
    memoryASet32(ds, 0x1c1682, memoryAGet32(ds, 0x1c1682) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c1682) >= 0x7fffffff)
        goto loc_1c1818;
loc_1c16b2: // 0160:1c16b2
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdab) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdab, memoryAGet32(ds, 0x1bfdab) + 0x7fffffff);
    memoryASet32(ds, 0x1c16b4, memoryAGet32(ds, 0x1c16b4) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c16b4) >= 0x7fffffff)
        goto loc_1c1845;
loc_1c16e4: // 0160:1c16e4
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdaf) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdaf, memoryAGet32(ds, 0x1bfdaf) + 0x7fffffff);
    memoryASet32(ds, 0x1c16e6, memoryAGet32(ds, 0x1c16e6) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c16e6) >= 0x7fffffff)
        goto loc_1c1872;
loc_1c1716: // 0160:1c1716
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdb3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdb3, memoryAGet32(ds, 0x1bfdb3) + 0x7fffffff);
    memoryASet32(ds, 0x1c1718, memoryAGet32(ds, 0x1c1718) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c1718) >= 0x7fffffff)
        goto loc_1c189f;
loc_1c1748: // 0160:1c1748
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdb7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdb7, memoryAGet32(ds, 0x1bfdb7) + 0x7fffffff);
    memoryASet32(ds, 0x1c174a, memoryAGet32(ds, 0x1c174a) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c174a) >= 0x7fffffff)
        goto loc_1c18cc;
loc_1c177a: // 0160:1c177a
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x1bfdbb) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x1bfdbb, memoryAGet32(ds, 0x1bfdbb) + 0x7fffffff);
    memoryASet32(ds, 0x1c177c, memoryAGet32(ds, 0x1c177c) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x1c177c) >= 0x7fffffff)
        goto loc_1c18f9;
loc_1c17ac: // 0160:1c17ac
    ah ^= 0x80;
    memoryASet(ds, ecx + edi, ah);
    ecx++;
    if (ecx)
        goto loc_1c161c;
    goto loc_1c1926;
loc_1c17be: // 0160:1c17be
    memoryASet32(ds, 0x1c161e, 0x7fffffff);
    memoryASet32(ds, 0x1c1644, 0x7fffffff);
    memoryASet32(ds, 0x1c1630, 0x7fffffff);
    memoryASet32(ds, 0x1c163a, 0x7fffffff);
    goto loc_1c164e;
loc_1c17eb: // 0160:1c17eb
    memoryASet32(ds, 0x1c1650, 0x7fffffff);
    memoryASet32(ds, 0x1c1676, 0x7fffffff);
    memoryASet32(ds, 0x1c1662, 0x7fffffff);
    memoryASet32(ds, 0x1c166c, 0x7fffffff);
    goto loc_1c1680;
loc_1c1818: // 0160:1c1818
    memoryASet32(ds, 0x1c1682, 0x7fffffff);
    memoryASet32(ds, 0x1c16a8, 0x7fffffff);
    memoryASet32(ds, 0x1c1694, 0x7fffffff);
    memoryASet32(ds, 0x1c169e, 0x7fffffff);
    goto loc_1c16b2;
loc_1c1845: // 0160:1c1845
    memoryASet32(ds, 0x1c16b4, 0x7fffffff);
    memoryASet32(ds, 0x1c16da, 0x7fffffff);
    memoryASet32(ds, 0x1c16c6, 0x7fffffff);
    memoryASet32(ds, 0x1c16d0, 0x7fffffff);
    goto loc_1c16e4;
loc_1c1872: // 0160:1c1872
    memoryASet32(ds, 0x1c16e6, 0x7fffffff);
    memoryASet32(ds, 0x1c170c, 0x7fffffff);
    memoryASet32(ds, 0x1c16f8, 0x7fffffff);
    memoryASet32(ds, 0x1c1702, 0x7fffffff);
    goto loc_1c1716;
loc_1c189f: // 0160:1c189f
    memoryASet32(ds, 0x1c1718, 0x7fffffff);
    memoryASet32(ds, 0x1c173e, 0x7fffffff);
    memoryASet32(ds, 0x1c172a, 0x7fffffff);
    memoryASet32(ds, 0x1c1734, 0x7fffffff);
    goto loc_1c1748;
loc_1c18cc: // 0160:1c18cc
    memoryASet32(ds, 0x1c174a, 0x7fffffff);
    memoryASet32(ds, 0x1c1770, 0x7fffffff);
    memoryASet32(ds, 0x1c175c, 0x7fffffff);
    memoryASet32(ds, 0x1c1766, 0x7fffffff);
    goto loc_1c177a;
loc_1c18f9: // 0160:1c18f9
    memoryASet32(ds, 0x1c177c, 0x7fffffff);
    memoryASet32(ds, 0x1c17a2, 0x7fffffff);
    memoryASet32(ds, 0x1c178e, 0x7fffffff);
    memoryASet32(ds, 0x1c1798, 0x7fffffff);
    goto loc_1c17ac;
loc_1c1926: // 0160:1c1926
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    flagsFromReg32(pop32());
    esp = ebp; ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c1930() // 0160:1c1930 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_1c4351;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c194b;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_1c194b: // 0160:1c194b
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c1958;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_1c1958: // 0160:1c1958
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c1965;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_1c1965: // 0160:1c1965
    ebx = memoryAGet32(ss, ebp + 44);
    ecx = memoryAGet32(ss, ebp + 48);
    edx = memoryAGet32(ss, ebp + 52);
    edi = 0x19fc;
    eax = 0;
    edi = 0;
loc_1c1977: // 0160:1c1977
    memoryASet32(ds, edi + 1841662, ebx);
    ebx += 0x00000004;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ss, ebp + 24))
        goto loc_1c1988;
    ebx -= memoryAGet32(ss, ebp + 24);
loc_1c1988: // 0160:1c1988
    memoryASet32(ds, edi + 1841677, ecx);
    ecx += 0x00000004;
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ss, ebp + 28))
        goto loc_1c1999;
    ecx -= memoryAGet32(ss, ebp + 28);
loc_1c1999: // 0160:1c1999
    memoryASet32(ds, edi + 1841737, edx);
    edx += 0x00000004;
    if ((int32_t)edx <= (int32_t)memoryAGet32(ss, ebp + 32))
        goto loc_1c19aa;
    edx -= memoryAGet32(ss, ebp + 32);
loc_1c19aa: // 0160:1c19aa
    memoryASet32(ds, edi + 1841788, eax);
    edi += 0x00000084;
    eax += 0x00000004;
    if (eax != 0x00000140)
        goto loc_1c1977;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c19cd;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_1c19cd: // 0160:1c19cd
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c19da;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_1c19da: // 0160:1c19da
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c19e7;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_1c19e7: // 0160:1c19e7
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    goto loc_1c19f5;
loc_1c19f5: // 0160:1c19f5
    goto loc_1c19f7;
loc_1c19f7: // 0160:1c19f7
    goto loc_1c19fc;
    // gap 3 bytes
loc_1c19fc: // 0160:1c19fc
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c19fe));
    if (!(eax & 0x80808080))
        goto loc_1c1a7a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1a0d));
    if (edx == 0x80808080)
        goto loc_1c1a3e;
    if (dl & 0x80)
        goto loc_1c1a20;
    al = dl;
loc_1c1a20: // 0160:1c1a20
    if (dh & 0x80)
        goto loc_1c1a27;
    ah = dh;
loc_1c1a27: // 0160:1c1a27
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1a34;
    al = dl;
loc_1c1a34: // 0160:1c1a34
    if (dh & 0x80)
        goto loc_1c1a3b;
    ah = dh;
loc_1c1a3b: // 0160:1c1a3b
    eax = rol32(eax, 0x10);
loc_1c1a3e: // 0160:1c1a3e
    if (!(eax & 0x80808080))
        goto loc_1c1a7a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1a49));
    if (edx == 0x80808080)
        goto loc_1c1a7a;
    if (dl & 0x80)
        goto loc_1c1a5c;
    al = dl;
loc_1c1a5c: // 0160:1c1a5c
    if (dh & 0x80)
        goto loc_1c1a63;
    ah = dh;
loc_1c1a63: // 0160:1c1a63
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1a70;
    al = dl;
loc_1c1a70: // 0160:1c1a70
    if (dh & 0x80)
        goto loc_1c1a77;
    ah = dh;
loc_1c1a77: // 0160:1c1a77
    eax = rol32(eax, 0x10);
loc_1c1a7a: // 0160:1c1a7a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1a7c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1a82));
    if (!(eax & 0x80808080))
        goto loc_1c1afe;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1a91));
    if (edx == 0x80808080)
        goto loc_1c1ac2;
    if (dl & 0x80)
        goto loc_1c1aa4;
    al = dl;
loc_1c1aa4: // 0160:1c1aa4
    if (dh & 0x80)
        goto loc_1c1aab;
    ah = dh;
loc_1c1aab: // 0160:1c1aab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1ab8;
    al = dl;
loc_1c1ab8: // 0160:1c1ab8
    if (dh & 0x80)
        goto loc_1c1abf;
    ah = dh;
loc_1c1abf: // 0160:1c1abf
    eax = rol32(eax, 0x10);
loc_1c1ac2: // 0160:1c1ac2
    if (!(eax & 0x80808080))
        goto loc_1c1afe;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1acd));
    if (edx == 0x80808080)
        goto loc_1c1afe;
    if (dl & 0x80)
        goto loc_1c1ae0;
    al = dl;
loc_1c1ae0: // 0160:1c1ae0
    if (dh & 0x80)
        goto loc_1c1ae7;
    ah = dh;
loc_1c1ae7: // 0160:1c1ae7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1af4;
    al = dl;
loc_1c1af4: // 0160:1c1af4
    if (dh & 0x80)
        goto loc_1c1afb;
    ah = dh;
loc_1c1afb: // 0160:1c1afb
    eax = rol32(eax, 0x10);
loc_1c1afe: // 0160:1c1afe
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1b00), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1b06));
    if (!(eax & 0x80808080))
        goto loc_1c1b82;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1b15));
    if (edx == 0x80808080)
        goto loc_1c1b46;
    if (dl & 0x80)
        goto loc_1c1b28;
    al = dl;
loc_1c1b28: // 0160:1c1b28
    if (dh & 0x80)
        goto loc_1c1b2f;
    ah = dh;
loc_1c1b2f: // 0160:1c1b2f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1b3c;
    al = dl;
loc_1c1b3c: // 0160:1c1b3c
    if (dh & 0x80)
        goto loc_1c1b43;
    ah = dh;
loc_1c1b43: // 0160:1c1b43
    eax = rol32(eax, 0x10);
loc_1c1b46: // 0160:1c1b46
    if (!(eax & 0x80808080))
        goto loc_1c1b82;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1b51));
    if (edx == 0x80808080)
        goto loc_1c1b82;
    if (dl & 0x80)
        goto loc_1c1b64;
    al = dl;
loc_1c1b64: // 0160:1c1b64
    if (dh & 0x80)
        goto loc_1c1b6b;
    ah = dh;
loc_1c1b6b: // 0160:1c1b6b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1b78;
    al = dl;
loc_1c1b78: // 0160:1c1b78
    if (dh & 0x80)
        goto loc_1c1b7f;
    ah = dh;
loc_1c1b7f: // 0160:1c1b7f
    eax = rol32(eax, 0x10);
loc_1c1b82: // 0160:1c1b82
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1b84), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1b8a));
    if (!(eax & 0x80808080))
        goto loc_1c1c06;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1b99));
    if (edx == 0x80808080)
        goto loc_1c1bca;
    if (dl & 0x80)
        goto loc_1c1bac;
    al = dl;
loc_1c1bac: // 0160:1c1bac
    if (dh & 0x80)
        goto loc_1c1bb3;
    ah = dh;
loc_1c1bb3: // 0160:1c1bb3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1bc0;
    al = dl;
loc_1c1bc0: // 0160:1c1bc0
    if (dh & 0x80)
        goto loc_1c1bc7;
    ah = dh;
loc_1c1bc7: // 0160:1c1bc7
    eax = rol32(eax, 0x10);
loc_1c1bca: // 0160:1c1bca
    if (!(eax & 0x80808080))
        goto loc_1c1c06;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1bd5));
    if (edx == 0x80808080)
        goto loc_1c1c06;
    if (dl & 0x80)
        goto loc_1c1be8;
    al = dl;
loc_1c1be8: // 0160:1c1be8
    if (dh & 0x80)
        goto loc_1c1bef;
    ah = dh;
loc_1c1bef: // 0160:1c1bef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1bfc;
    al = dl;
loc_1c1bfc: // 0160:1c1bfc
    if (dh & 0x80)
        goto loc_1c1c03;
    ah = dh;
loc_1c1c03: // 0160:1c1c03
    eax = rol32(eax, 0x10);
loc_1c1c06: // 0160:1c1c06
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1c08), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1c0e));
    if (!(eax & 0x80808080))
        goto loc_1c1c8a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1c1d));
    if (edx == 0x80808080)
        goto loc_1c1c4e;
    if (dl & 0x80)
        goto loc_1c1c30;
    al = dl;
loc_1c1c30: // 0160:1c1c30
    if (dh & 0x80)
        goto loc_1c1c37;
    ah = dh;
loc_1c1c37: // 0160:1c1c37
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1c44;
    al = dl;
loc_1c1c44: // 0160:1c1c44
    if (dh & 0x80)
        goto loc_1c1c4b;
    ah = dh;
loc_1c1c4b: // 0160:1c1c4b
    eax = rol32(eax, 0x10);
loc_1c1c4e: // 0160:1c1c4e
    if (!(eax & 0x80808080))
        goto loc_1c1c8a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1c59));
    if (edx == 0x80808080)
        goto loc_1c1c8a;
    if (dl & 0x80)
        goto loc_1c1c6c;
    al = dl;
loc_1c1c6c: // 0160:1c1c6c
    if (dh & 0x80)
        goto loc_1c1c73;
    ah = dh;
loc_1c1c73: // 0160:1c1c73
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1c80;
    al = dl;
loc_1c1c80: // 0160:1c1c80
    if (dh & 0x80)
        goto loc_1c1c87;
    ah = dh;
loc_1c1c87: // 0160:1c1c87
    eax = rol32(eax, 0x10);
loc_1c1c8a: // 0160:1c1c8a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1c8c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1c92));
    if (!(eax & 0x80808080))
        goto loc_1c1d0e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1ca1));
    if (edx == 0x80808080)
        goto loc_1c1cd2;
    if (dl & 0x80)
        goto loc_1c1cb4;
    al = dl;
loc_1c1cb4: // 0160:1c1cb4
    if (dh & 0x80)
        goto loc_1c1cbb;
    ah = dh;
loc_1c1cbb: // 0160:1c1cbb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1cc8;
    al = dl;
loc_1c1cc8: // 0160:1c1cc8
    if (dh & 0x80)
        goto loc_1c1ccf;
    ah = dh;
loc_1c1ccf: // 0160:1c1ccf
    eax = rol32(eax, 0x10);
loc_1c1cd2: // 0160:1c1cd2
    if (!(eax & 0x80808080))
        goto loc_1c1d0e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1cdd));
    if (edx == 0x80808080)
        goto loc_1c1d0e;
    if (dl & 0x80)
        goto loc_1c1cf0;
    al = dl;
loc_1c1cf0: // 0160:1c1cf0
    if (dh & 0x80)
        goto loc_1c1cf7;
    ah = dh;
loc_1c1cf7: // 0160:1c1cf7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1d04;
    al = dl;
loc_1c1d04: // 0160:1c1d04
    if (dh & 0x80)
        goto loc_1c1d0b;
    ah = dh;
loc_1c1d0b: // 0160:1c1d0b
    eax = rol32(eax, 0x10);
loc_1c1d0e: // 0160:1c1d0e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1d10), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1d16));
    if (!(eax & 0x80808080))
        goto loc_1c1d92;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1d25));
    if (edx == 0x80808080)
        goto loc_1c1d56;
    if (dl & 0x80)
        goto loc_1c1d38;
    al = dl;
loc_1c1d38: // 0160:1c1d38
    if (dh & 0x80)
        goto loc_1c1d3f;
    ah = dh;
loc_1c1d3f: // 0160:1c1d3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1d4c;
    al = dl;
loc_1c1d4c: // 0160:1c1d4c
    if (dh & 0x80)
        goto loc_1c1d53;
    ah = dh;
loc_1c1d53: // 0160:1c1d53
    eax = rol32(eax, 0x10);
loc_1c1d56: // 0160:1c1d56
    if (!(eax & 0x80808080))
        goto loc_1c1d92;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1d61));
    if (edx == 0x80808080)
        goto loc_1c1d92;
    if (dl & 0x80)
        goto loc_1c1d74;
    al = dl;
loc_1c1d74: // 0160:1c1d74
    if (dh & 0x80)
        goto loc_1c1d7b;
    ah = dh;
loc_1c1d7b: // 0160:1c1d7b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1d88;
    al = dl;
loc_1c1d88: // 0160:1c1d88
    if (dh & 0x80)
        goto loc_1c1d8f;
    ah = dh;
loc_1c1d8f: // 0160:1c1d8f
    eax = rol32(eax, 0x10);
loc_1c1d92: // 0160:1c1d92
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1d94), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1d9a));
    if (!(eax & 0x80808080))
        goto loc_1c1e16;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1da9));
    if (edx == 0x80808080)
        goto loc_1c1dda;
    if (dl & 0x80)
        goto loc_1c1dbc;
    al = dl;
loc_1c1dbc: // 0160:1c1dbc
    if (dh & 0x80)
        goto loc_1c1dc3;
    ah = dh;
loc_1c1dc3: // 0160:1c1dc3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1dd0;
    al = dl;
loc_1c1dd0: // 0160:1c1dd0
    if (dh & 0x80)
        goto loc_1c1dd7;
    ah = dh;
loc_1c1dd7: // 0160:1c1dd7
    eax = rol32(eax, 0x10);
loc_1c1dda: // 0160:1c1dda
    if (!(eax & 0x80808080))
        goto loc_1c1e16;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1de5));
    if (edx == 0x80808080)
        goto loc_1c1e16;
    if (dl & 0x80)
        goto loc_1c1df8;
    al = dl;
loc_1c1df8: // 0160:1c1df8
    if (dh & 0x80)
        goto loc_1c1dff;
    ah = dh;
loc_1c1dff: // 0160:1c1dff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1e0c;
    al = dl;
loc_1c1e0c: // 0160:1c1e0c
    if (dh & 0x80)
        goto loc_1c1e13;
    ah = dh;
loc_1c1e13: // 0160:1c1e13
    eax = rol32(eax, 0x10);
loc_1c1e16: // 0160:1c1e16
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1e18), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1e1e));
    if (!(eax & 0x80808080))
        goto loc_1c1e9a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1e2d));
    if (edx == 0x80808080)
        goto loc_1c1e5e;
    if (dl & 0x80)
        goto loc_1c1e40;
    al = dl;
loc_1c1e40: // 0160:1c1e40
    if (dh & 0x80)
        goto loc_1c1e47;
    ah = dh;
loc_1c1e47: // 0160:1c1e47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1e54;
    al = dl;
loc_1c1e54: // 0160:1c1e54
    if (dh & 0x80)
        goto loc_1c1e5b;
    ah = dh;
loc_1c1e5b: // 0160:1c1e5b
    eax = rol32(eax, 0x10);
loc_1c1e5e: // 0160:1c1e5e
    if (!(eax & 0x80808080))
        goto loc_1c1e9a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1e69));
    if (edx == 0x80808080)
        goto loc_1c1e9a;
    if (dl & 0x80)
        goto loc_1c1e7c;
    al = dl;
loc_1c1e7c: // 0160:1c1e7c
    if (dh & 0x80)
        goto loc_1c1e83;
    ah = dh;
loc_1c1e83: // 0160:1c1e83
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1e90;
    al = dl;
loc_1c1e90: // 0160:1c1e90
    if (dh & 0x80)
        goto loc_1c1e97;
    ah = dh;
loc_1c1e97: // 0160:1c1e97
    eax = rol32(eax, 0x10);
loc_1c1e9a: // 0160:1c1e9a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1e9c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1ea2));
    if (!(eax & 0x80808080))
        goto loc_1c1f1e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1eb1));
    if (edx == 0x80808080)
        goto loc_1c1ee2;
    if (dl & 0x80)
        goto loc_1c1ec4;
    al = dl;
loc_1c1ec4: // 0160:1c1ec4
    if (dh & 0x80)
        goto loc_1c1ecb;
    ah = dh;
loc_1c1ecb: // 0160:1c1ecb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1ed8;
    al = dl;
loc_1c1ed8: // 0160:1c1ed8
    if (dh & 0x80)
        goto loc_1c1edf;
    ah = dh;
loc_1c1edf: // 0160:1c1edf
    eax = rol32(eax, 0x10);
loc_1c1ee2: // 0160:1c1ee2
    if (!(eax & 0x80808080))
        goto loc_1c1f1e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1eed));
    if (edx == 0x80808080)
        goto loc_1c1f1e;
    if (dl & 0x80)
        goto loc_1c1f00;
    al = dl;
loc_1c1f00: // 0160:1c1f00
    if (dh & 0x80)
        goto loc_1c1f07;
    ah = dh;
loc_1c1f07: // 0160:1c1f07
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1f14;
    al = dl;
loc_1c1f14: // 0160:1c1f14
    if (dh & 0x80)
        goto loc_1c1f1b;
    ah = dh;
loc_1c1f1b: // 0160:1c1f1b
    eax = rol32(eax, 0x10);
loc_1c1f1e: // 0160:1c1f1e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1f20), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1f26));
    if (!(eax & 0x80808080))
        goto loc_1c1fa2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1f35));
    if (edx == 0x80808080)
        goto loc_1c1f66;
    if (dl & 0x80)
        goto loc_1c1f48;
    al = dl;
loc_1c1f48: // 0160:1c1f48
    if (dh & 0x80)
        goto loc_1c1f4f;
    ah = dh;
loc_1c1f4f: // 0160:1c1f4f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1f5c;
    al = dl;
loc_1c1f5c: // 0160:1c1f5c
    if (dh & 0x80)
        goto loc_1c1f63;
    ah = dh;
loc_1c1f63: // 0160:1c1f63
    eax = rol32(eax, 0x10);
loc_1c1f66: // 0160:1c1f66
    if (!(eax & 0x80808080))
        goto loc_1c1fa2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1f71));
    if (edx == 0x80808080)
        goto loc_1c1fa2;
    if (dl & 0x80)
        goto loc_1c1f84;
    al = dl;
loc_1c1f84: // 0160:1c1f84
    if (dh & 0x80)
        goto loc_1c1f8b;
    ah = dh;
loc_1c1f8b: // 0160:1c1f8b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1f98;
    al = dl;
loc_1c1f98: // 0160:1c1f98
    if (dh & 0x80)
        goto loc_1c1f9f;
    ah = dh;
loc_1c1f9f: // 0160:1c1f9f
    eax = rol32(eax, 0x10);
loc_1c1fa2: // 0160:1c1fa2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c1fa4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c1faa));
    if (!(eax & 0x80808080))
        goto loc_1c2026;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c1fb9));
    if (edx == 0x80808080)
        goto loc_1c1fea;
    if (dl & 0x80)
        goto loc_1c1fcc;
    al = dl;
loc_1c1fcc: // 0160:1c1fcc
    if (dh & 0x80)
        goto loc_1c1fd3;
    ah = dh;
loc_1c1fd3: // 0160:1c1fd3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c1fe0;
    al = dl;
loc_1c1fe0: // 0160:1c1fe0
    if (dh & 0x80)
        goto loc_1c1fe7;
    ah = dh;
loc_1c1fe7: // 0160:1c1fe7
    eax = rol32(eax, 0x10);
loc_1c1fea: // 0160:1c1fea
    if (!(eax & 0x80808080))
        goto loc_1c2026;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c1ff5));
    if (edx == 0x80808080)
        goto loc_1c2026;
    if (dl & 0x80)
        goto loc_1c2008;
    al = dl;
loc_1c2008: // 0160:1c2008
    if (dh & 0x80)
        goto loc_1c200f;
    ah = dh;
loc_1c200f: // 0160:1c200f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c201c;
    al = dl;
loc_1c201c: // 0160:1c201c
    if (dh & 0x80)
        goto loc_1c2023;
    ah = dh;
loc_1c2023: // 0160:1c2023
    eax = rol32(eax, 0x10);
loc_1c2026: // 0160:1c2026
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2028), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c202e));
    if (!(eax & 0x80808080))
        goto loc_1c20aa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c203d));
    if (edx == 0x80808080)
        goto loc_1c206e;
    if (dl & 0x80)
        goto loc_1c2050;
    al = dl;
loc_1c2050: // 0160:1c2050
    if (dh & 0x80)
        goto loc_1c2057;
    ah = dh;
loc_1c2057: // 0160:1c2057
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2064;
    al = dl;
loc_1c2064: // 0160:1c2064
    if (dh & 0x80)
        goto loc_1c206b;
    ah = dh;
loc_1c206b: // 0160:1c206b
    eax = rol32(eax, 0x10);
loc_1c206e: // 0160:1c206e
    if (!(eax & 0x80808080))
        goto loc_1c20aa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2079));
    if (edx == 0x80808080)
        goto loc_1c20aa;
    if (dl & 0x80)
        goto loc_1c208c;
    al = dl;
loc_1c208c: // 0160:1c208c
    if (dh & 0x80)
        goto loc_1c2093;
    ah = dh;
loc_1c2093: // 0160:1c2093
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c20a0;
    al = dl;
loc_1c20a0: // 0160:1c20a0
    if (dh & 0x80)
        goto loc_1c20a7;
    ah = dh;
loc_1c20a7: // 0160:1c20a7
    eax = rol32(eax, 0x10);
loc_1c20aa: // 0160:1c20aa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c20ac), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c20b2));
    if (!(eax & 0x80808080))
        goto loc_1c212e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c20c1));
    if (edx == 0x80808080)
        goto loc_1c20f2;
    if (dl & 0x80)
        goto loc_1c20d4;
    al = dl;
loc_1c20d4: // 0160:1c20d4
    if (dh & 0x80)
        goto loc_1c20db;
    ah = dh;
loc_1c20db: // 0160:1c20db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c20e8;
    al = dl;
loc_1c20e8: // 0160:1c20e8
    if (dh & 0x80)
        goto loc_1c20ef;
    ah = dh;
loc_1c20ef: // 0160:1c20ef
    eax = rol32(eax, 0x10);
loc_1c20f2: // 0160:1c20f2
    if (!(eax & 0x80808080))
        goto loc_1c212e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c20fd));
    if (edx == 0x80808080)
        goto loc_1c212e;
    if (dl & 0x80)
        goto loc_1c2110;
    al = dl;
loc_1c2110: // 0160:1c2110
    if (dh & 0x80)
        goto loc_1c2117;
    ah = dh;
loc_1c2117: // 0160:1c2117
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2124;
    al = dl;
loc_1c2124: // 0160:1c2124
    if (dh & 0x80)
        goto loc_1c212b;
    ah = dh;
loc_1c212b: // 0160:1c212b
    eax = rol32(eax, 0x10);
loc_1c212e: // 0160:1c212e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2130), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2136));
    if (!(eax & 0x80808080))
        goto loc_1c21b2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2145));
    if (edx == 0x80808080)
        goto loc_1c2176;
    if (dl & 0x80)
        goto loc_1c2158;
    al = dl;
loc_1c2158: // 0160:1c2158
    if (dh & 0x80)
        goto loc_1c215f;
    ah = dh;
loc_1c215f: // 0160:1c215f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c216c;
    al = dl;
loc_1c216c: // 0160:1c216c
    if (dh & 0x80)
        goto loc_1c2173;
    ah = dh;
loc_1c2173: // 0160:1c2173
    eax = rol32(eax, 0x10);
loc_1c2176: // 0160:1c2176
    if (!(eax & 0x80808080))
        goto loc_1c21b2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2181));
    if (edx == 0x80808080)
        goto loc_1c21b2;
    if (dl & 0x80)
        goto loc_1c2194;
    al = dl;
loc_1c2194: // 0160:1c2194
    if (dh & 0x80)
        goto loc_1c219b;
    ah = dh;
loc_1c219b: // 0160:1c219b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c21a8;
    al = dl;
loc_1c21a8: // 0160:1c21a8
    if (dh & 0x80)
        goto loc_1c21af;
    ah = dh;
loc_1c21af: // 0160:1c21af
    eax = rol32(eax, 0x10);
loc_1c21b2: // 0160:1c21b2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c21b4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c21ba));
    if (!(eax & 0x80808080))
        goto loc_1c2236;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c21c9));
    if (edx == 0x80808080)
        goto loc_1c21fa;
    if (dl & 0x80)
        goto loc_1c21dc;
    al = dl;
loc_1c21dc: // 0160:1c21dc
    if (dh & 0x80)
        goto loc_1c21e3;
    ah = dh;
loc_1c21e3: // 0160:1c21e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c21f0;
    al = dl;
loc_1c21f0: // 0160:1c21f0
    if (dh & 0x80)
        goto loc_1c21f7;
    ah = dh;
loc_1c21f7: // 0160:1c21f7
    eax = rol32(eax, 0x10);
loc_1c21fa: // 0160:1c21fa
    if (!(eax & 0x80808080))
        goto loc_1c2236;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2205));
    if (edx == 0x80808080)
        goto loc_1c2236;
    if (dl & 0x80)
        goto loc_1c2218;
    al = dl;
loc_1c2218: // 0160:1c2218
    if (dh & 0x80)
        goto loc_1c221f;
    ah = dh;
loc_1c221f: // 0160:1c221f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c222c;
    al = dl;
loc_1c222c: // 0160:1c222c
    if (dh & 0x80)
        goto loc_1c2233;
    ah = dh;
loc_1c2233: // 0160:1c2233
    eax = rol32(eax, 0x10);
loc_1c2236: // 0160:1c2236
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2238), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c223e));
    if (!(eax & 0x80808080))
        goto loc_1c22ba;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c224d));
    if (edx == 0x80808080)
        goto loc_1c227e;
    if (dl & 0x80)
        goto loc_1c2260;
    al = dl;
loc_1c2260: // 0160:1c2260
    if (dh & 0x80)
        goto loc_1c2267;
    ah = dh;
loc_1c2267: // 0160:1c2267
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2274;
    al = dl;
loc_1c2274: // 0160:1c2274
    if (dh & 0x80)
        goto loc_1c227b;
    ah = dh;
loc_1c227b: // 0160:1c227b
    eax = rol32(eax, 0x10);
loc_1c227e: // 0160:1c227e
    if (!(eax & 0x80808080))
        goto loc_1c22ba;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2289));
    if (edx == 0x80808080)
        goto loc_1c22ba;
    if (dl & 0x80)
        goto loc_1c229c;
    al = dl;
loc_1c229c: // 0160:1c229c
    if (dh & 0x80)
        goto loc_1c22a3;
    ah = dh;
loc_1c22a3: // 0160:1c22a3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c22b0;
    al = dl;
loc_1c22b0: // 0160:1c22b0
    if (dh & 0x80)
        goto loc_1c22b7;
    ah = dh;
loc_1c22b7: // 0160:1c22b7
    eax = rol32(eax, 0x10);
loc_1c22ba: // 0160:1c22ba
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c22bc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c22c2));
    if (!(eax & 0x80808080))
        goto loc_1c233e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c22d1));
    if (edx == 0x80808080)
        goto loc_1c2302;
    if (dl & 0x80)
        goto loc_1c22e4;
    al = dl;
loc_1c22e4: // 0160:1c22e4
    if (dh & 0x80)
        goto loc_1c22eb;
    ah = dh;
loc_1c22eb: // 0160:1c22eb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c22f8;
    al = dl;
loc_1c22f8: // 0160:1c22f8
    if (dh & 0x80)
        goto loc_1c22ff;
    ah = dh;
loc_1c22ff: // 0160:1c22ff
    eax = rol32(eax, 0x10);
loc_1c2302: // 0160:1c2302
    if (!(eax & 0x80808080))
        goto loc_1c233e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c230d));
    if (edx == 0x80808080)
        goto loc_1c233e;
    if (dl & 0x80)
        goto loc_1c2320;
    al = dl;
loc_1c2320: // 0160:1c2320
    if (dh & 0x80)
        goto loc_1c2327;
    ah = dh;
loc_1c2327: // 0160:1c2327
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2334;
    al = dl;
loc_1c2334: // 0160:1c2334
    if (dh & 0x80)
        goto loc_1c233b;
    ah = dh;
loc_1c233b: // 0160:1c233b
    eax = rol32(eax, 0x10);
loc_1c233e: // 0160:1c233e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2340), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2346));
    if (!(eax & 0x80808080))
        goto loc_1c23c2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2355));
    if (edx == 0x80808080)
        goto loc_1c2386;
    if (dl & 0x80)
        goto loc_1c2368;
    al = dl;
loc_1c2368: // 0160:1c2368
    if (dh & 0x80)
        goto loc_1c236f;
    ah = dh;
loc_1c236f: // 0160:1c236f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c237c;
    al = dl;
loc_1c237c: // 0160:1c237c
    if (dh & 0x80)
        goto loc_1c2383;
    ah = dh;
loc_1c2383: // 0160:1c2383
    eax = rol32(eax, 0x10);
loc_1c2386: // 0160:1c2386
    if (!(eax & 0x80808080))
        goto loc_1c23c2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2391));
    if (edx == 0x80808080)
        goto loc_1c23c2;
    if (dl & 0x80)
        goto loc_1c23a4;
    al = dl;
loc_1c23a4: // 0160:1c23a4
    if (dh & 0x80)
        goto loc_1c23ab;
    ah = dh;
loc_1c23ab: // 0160:1c23ab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c23b8;
    al = dl;
loc_1c23b8: // 0160:1c23b8
    if (dh & 0x80)
        goto loc_1c23bf;
    ah = dh;
loc_1c23bf: // 0160:1c23bf
    eax = rol32(eax, 0x10);
loc_1c23c2: // 0160:1c23c2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c23c4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c23ca));
    if (!(eax & 0x80808080))
        goto loc_1c2446;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c23d9));
    if (edx == 0x80808080)
        goto loc_1c240a;
    if (dl & 0x80)
        goto loc_1c23ec;
    al = dl;
loc_1c23ec: // 0160:1c23ec
    if (dh & 0x80)
        goto loc_1c23f3;
    ah = dh;
loc_1c23f3: // 0160:1c23f3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2400;
    al = dl;
loc_1c2400: // 0160:1c2400
    if (dh & 0x80)
        goto loc_1c2407;
    ah = dh;
loc_1c2407: // 0160:1c2407
    eax = rol32(eax, 0x10);
loc_1c240a: // 0160:1c240a
    if (!(eax & 0x80808080))
        goto loc_1c2446;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2415));
    if (edx == 0x80808080)
        goto loc_1c2446;
    if (dl & 0x80)
        goto loc_1c2428;
    al = dl;
loc_1c2428: // 0160:1c2428
    if (dh & 0x80)
        goto loc_1c242f;
    ah = dh;
loc_1c242f: // 0160:1c242f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c243c;
    al = dl;
loc_1c243c: // 0160:1c243c
    if (dh & 0x80)
        goto loc_1c2443;
    ah = dh;
loc_1c2443: // 0160:1c2443
    eax = rol32(eax, 0x10);
loc_1c2446: // 0160:1c2446
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2448), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c244e));
    if (!(eax & 0x80808080))
        goto loc_1c24ca;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c245d));
    if (edx == 0x80808080)
        goto loc_1c248e;
    if (dl & 0x80)
        goto loc_1c2470;
    al = dl;
loc_1c2470: // 0160:1c2470
    if (dh & 0x80)
        goto loc_1c2477;
    ah = dh;
loc_1c2477: // 0160:1c2477
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2484;
    al = dl;
loc_1c2484: // 0160:1c2484
    if (dh & 0x80)
        goto loc_1c248b;
    ah = dh;
loc_1c248b: // 0160:1c248b
    eax = rol32(eax, 0x10);
loc_1c248e: // 0160:1c248e
    if (!(eax & 0x80808080))
        goto loc_1c24ca;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2499));
    if (edx == 0x80808080)
        goto loc_1c24ca;
    if (dl & 0x80)
        goto loc_1c24ac;
    al = dl;
loc_1c24ac: // 0160:1c24ac
    if (dh & 0x80)
        goto loc_1c24b3;
    ah = dh;
loc_1c24b3: // 0160:1c24b3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c24c0;
    al = dl;
loc_1c24c0: // 0160:1c24c0
    if (dh & 0x80)
        goto loc_1c24c7;
    ah = dh;
loc_1c24c7: // 0160:1c24c7
    eax = rol32(eax, 0x10);
loc_1c24ca: // 0160:1c24ca
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c24cc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c24d2));
    if (!(eax & 0x80808080))
        goto loc_1c254e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c24e1));
    if (edx == 0x80808080)
        goto loc_1c2512;
    if (dl & 0x80)
        goto loc_1c24f4;
    al = dl;
loc_1c24f4: // 0160:1c24f4
    if (dh & 0x80)
        goto loc_1c24fb;
    ah = dh;
loc_1c24fb: // 0160:1c24fb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2508;
    al = dl;
loc_1c2508: // 0160:1c2508
    if (dh & 0x80)
        goto loc_1c250f;
    ah = dh;
loc_1c250f: // 0160:1c250f
    eax = rol32(eax, 0x10);
loc_1c2512: // 0160:1c2512
    if (!(eax & 0x80808080))
        goto loc_1c254e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c251d));
    if (edx == 0x80808080)
        goto loc_1c254e;
    if (dl & 0x80)
        goto loc_1c2530;
    al = dl;
loc_1c2530: // 0160:1c2530
    if (dh & 0x80)
        goto loc_1c2537;
    ah = dh;
loc_1c2537: // 0160:1c2537
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2544;
    al = dl;
loc_1c2544: // 0160:1c2544
    if (dh & 0x80)
        goto loc_1c254b;
    ah = dh;
loc_1c254b: // 0160:1c254b
    eax = rol32(eax, 0x10);
loc_1c254e: // 0160:1c254e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2550), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2556));
    if (!(eax & 0x80808080))
        goto loc_1c25d2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2565));
    if (edx == 0x80808080)
        goto loc_1c2596;
    if (dl & 0x80)
        goto loc_1c2578;
    al = dl;
loc_1c2578: // 0160:1c2578
    if (dh & 0x80)
        goto loc_1c257f;
    ah = dh;
loc_1c257f: // 0160:1c257f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c258c;
    al = dl;
loc_1c258c: // 0160:1c258c
    if (dh & 0x80)
        goto loc_1c2593;
    ah = dh;
loc_1c2593: // 0160:1c2593
    eax = rol32(eax, 0x10);
loc_1c2596: // 0160:1c2596
    if (!(eax & 0x80808080))
        goto loc_1c25d2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c25a1));
    if (edx == 0x80808080)
        goto loc_1c25d2;
    if (dl & 0x80)
        goto loc_1c25b4;
    al = dl;
loc_1c25b4: // 0160:1c25b4
    if (dh & 0x80)
        goto loc_1c25bb;
    ah = dh;
loc_1c25bb: // 0160:1c25bb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c25c8;
    al = dl;
loc_1c25c8: // 0160:1c25c8
    if (dh & 0x80)
        goto loc_1c25cf;
    ah = dh;
loc_1c25cf: // 0160:1c25cf
    eax = rol32(eax, 0x10);
loc_1c25d2: // 0160:1c25d2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c25d4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c25da));
    if (!(eax & 0x80808080))
        goto loc_1c2656;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c25e9));
    if (edx == 0x80808080)
        goto loc_1c261a;
    if (dl & 0x80)
        goto loc_1c25fc;
    al = dl;
loc_1c25fc: // 0160:1c25fc
    if (dh & 0x80)
        goto loc_1c2603;
    ah = dh;
loc_1c2603: // 0160:1c2603
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2610;
    al = dl;
loc_1c2610: // 0160:1c2610
    if (dh & 0x80)
        goto loc_1c2617;
    ah = dh;
loc_1c2617: // 0160:1c2617
    eax = rol32(eax, 0x10);
loc_1c261a: // 0160:1c261a
    if (!(eax & 0x80808080))
        goto loc_1c2656;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2625));
    if (edx == 0x80808080)
        goto loc_1c2656;
    if (dl & 0x80)
        goto loc_1c2638;
    al = dl;
loc_1c2638: // 0160:1c2638
    if (dh & 0x80)
        goto loc_1c263f;
    ah = dh;
loc_1c263f: // 0160:1c263f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c264c;
    al = dl;
loc_1c264c: // 0160:1c264c
    if (dh & 0x80)
        goto loc_1c2653;
    ah = dh;
loc_1c2653: // 0160:1c2653
    eax = rol32(eax, 0x10);
loc_1c2656: // 0160:1c2656
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2658), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c265e));
    if (!(eax & 0x80808080))
        goto loc_1c26da;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c266d));
    if (edx == 0x80808080)
        goto loc_1c269e;
    if (dl & 0x80)
        goto loc_1c2680;
    al = dl;
loc_1c2680: // 0160:1c2680
    if (dh & 0x80)
        goto loc_1c2687;
    ah = dh;
loc_1c2687: // 0160:1c2687
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2694;
    al = dl;
loc_1c2694: // 0160:1c2694
    if (dh & 0x80)
        goto loc_1c269b;
    ah = dh;
loc_1c269b: // 0160:1c269b
    eax = rol32(eax, 0x10);
loc_1c269e: // 0160:1c269e
    if (!(eax & 0x80808080))
        goto loc_1c26da;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c26a9));
    if (edx == 0x80808080)
        goto loc_1c26da;
    if (dl & 0x80)
        goto loc_1c26bc;
    al = dl;
loc_1c26bc: // 0160:1c26bc
    if (dh & 0x80)
        goto loc_1c26c3;
    ah = dh;
loc_1c26c3: // 0160:1c26c3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c26d0;
    al = dl;
loc_1c26d0: // 0160:1c26d0
    if (dh & 0x80)
        goto loc_1c26d7;
    ah = dh;
loc_1c26d7: // 0160:1c26d7
    eax = rol32(eax, 0x10);
loc_1c26da: // 0160:1c26da
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c26dc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c26e2));
    if (!(eax & 0x80808080))
        goto loc_1c275e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c26f1));
    if (edx == 0x80808080)
        goto loc_1c2722;
    if (dl & 0x80)
        goto loc_1c2704;
    al = dl;
loc_1c2704: // 0160:1c2704
    if (dh & 0x80)
        goto loc_1c270b;
    ah = dh;
loc_1c270b: // 0160:1c270b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2718;
    al = dl;
loc_1c2718: // 0160:1c2718
    if (dh & 0x80)
        goto loc_1c271f;
    ah = dh;
loc_1c271f: // 0160:1c271f
    eax = rol32(eax, 0x10);
loc_1c2722: // 0160:1c2722
    if (!(eax & 0x80808080))
        goto loc_1c275e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c272d));
    if (edx == 0x80808080)
        goto loc_1c275e;
    if (dl & 0x80)
        goto loc_1c2740;
    al = dl;
loc_1c2740: // 0160:1c2740
    if (dh & 0x80)
        goto loc_1c2747;
    ah = dh;
loc_1c2747: // 0160:1c2747
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2754;
    al = dl;
loc_1c2754: // 0160:1c2754
    if (dh & 0x80)
        goto loc_1c275b;
    ah = dh;
loc_1c275b: // 0160:1c275b
    eax = rol32(eax, 0x10);
loc_1c275e: // 0160:1c275e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2760), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2766));
    if (!(eax & 0x80808080))
        goto loc_1c27e2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2775));
    if (edx == 0x80808080)
        goto loc_1c27a6;
    if (dl & 0x80)
        goto loc_1c2788;
    al = dl;
loc_1c2788: // 0160:1c2788
    if (dh & 0x80)
        goto loc_1c278f;
    ah = dh;
loc_1c278f: // 0160:1c278f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c279c;
    al = dl;
loc_1c279c: // 0160:1c279c
    if (dh & 0x80)
        goto loc_1c27a3;
    ah = dh;
loc_1c27a3: // 0160:1c27a3
    eax = rol32(eax, 0x10);
loc_1c27a6: // 0160:1c27a6
    if (!(eax & 0x80808080))
        goto loc_1c27e2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c27b1));
    if (edx == 0x80808080)
        goto loc_1c27e2;
    if (dl & 0x80)
        goto loc_1c27c4;
    al = dl;
loc_1c27c4: // 0160:1c27c4
    if (dh & 0x80)
        goto loc_1c27cb;
    ah = dh;
loc_1c27cb: // 0160:1c27cb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c27d8;
    al = dl;
loc_1c27d8: // 0160:1c27d8
    if (dh & 0x80)
        goto loc_1c27df;
    ah = dh;
loc_1c27df: // 0160:1c27df
    eax = rol32(eax, 0x10);
loc_1c27e2: // 0160:1c27e2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c27e4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c27ea));
    if (!(eax & 0x80808080))
        goto loc_1c2866;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c27f9));
    if (edx == 0x80808080)
        goto loc_1c282a;
    if (dl & 0x80)
        goto loc_1c280c;
    al = dl;
loc_1c280c: // 0160:1c280c
    if (dh & 0x80)
        goto loc_1c2813;
    ah = dh;
loc_1c2813: // 0160:1c2813
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2820;
    al = dl;
loc_1c2820: // 0160:1c2820
    if (dh & 0x80)
        goto loc_1c2827;
    ah = dh;
loc_1c2827: // 0160:1c2827
    eax = rol32(eax, 0x10);
loc_1c282a: // 0160:1c282a
    if (!(eax & 0x80808080))
        goto loc_1c2866;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2835));
    if (edx == 0x80808080)
        goto loc_1c2866;
    if (dl & 0x80)
        goto loc_1c2848;
    al = dl;
loc_1c2848: // 0160:1c2848
    if (dh & 0x80)
        goto loc_1c284f;
    ah = dh;
loc_1c284f: // 0160:1c284f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c285c;
    al = dl;
loc_1c285c: // 0160:1c285c
    if (dh & 0x80)
        goto loc_1c2863;
    ah = dh;
loc_1c2863: // 0160:1c2863
    eax = rol32(eax, 0x10);
loc_1c2866: // 0160:1c2866
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2868), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c286e));
    if (!(eax & 0x80808080))
        goto loc_1c28ea;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c287d));
    if (edx == 0x80808080)
        goto loc_1c28ae;
    if (dl & 0x80)
        goto loc_1c2890;
    al = dl;
loc_1c2890: // 0160:1c2890
    if (dh & 0x80)
        goto loc_1c2897;
    ah = dh;
loc_1c2897: // 0160:1c2897
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c28a4;
    al = dl;
loc_1c28a4: // 0160:1c28a4
    if (dh & 0x80)
        goto loc_1c28ab;
    ah = dh;
loc_1c28ab: // 0160:1c28ab
    eax = rol32(eax, 0x10);
loc_1c28ae: // 0160:1c28ae
    if (!(eax & 0x80808080))
        goto loc_1c28ea;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c28b9));
    if (edx == 0x80808080)
        goto loc_1c28ea;
    if (dl & 0x80)
        goto loc_1c28cc;
    al = dl;
loc_1c28cc: // 0160:1c28cc
    if (dh & 0x80)
        goto loc_1c28d3;
    ah = dh;
loc_1c28d3: // 0160:1c28d3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c28e0;
    al = dl;
loc_1c28e0: // 0160:1c28e0
    if (dh & 0x80)
        goto loc_1c28e7;
    ah = dh;
loc_1c28e7: // 0160:1c28e7
    eax = rol32(eax, 0x10);
loc_1c28ea: // 0160:1c28ea
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c28ec), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c28f2));
    if (!(eax & 0x80808080))
        goto loc_1c296e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2901));
    if (edx == 0x80808080)
        goto loc_1c2932;
    if (dl & 0x80)
        goto loc_1c2914;
    al = dl;
loc_1c2914: // 0160:1c2914
    if (dh & 0x80)
        goto loc_1c291b;
    ah = dh;
loc_1c291b: // 0160:1c291b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2928;
    al = dl;
loc_1c2928: // 0160:1c2928
    if (dh & 0x80)
        goto loc_1c292f;
    ah = dh;
loc_1c292f: // 0160:1c292f
    eax = rol32(eax, 0x10);
loc_1c2932: // 0160:1c2932
    if (!(eax & 0x80808080))
        goto loc_1c296e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c293d));
    if (edx == 0x80808080)
        goto loc_1c296e;
    if (dl & 0x80)
        goto loc_1c2950;
    al = dl;
loc_1c2950: // 0160:1c2950
    if (dh & 0x80)
        goto loc_1c2957;
    ah = dh;
loc_1c2957: // 0160:1c2957
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2964;
    al = dl;
loc_1c2964: // 0160:1c2964
    if (dh & 0x80)
        goto loc_1c296b;
    ah = dh;
loc_1c296b: // 0160:1c296b
    eax = rol32(eax, 0x10);
loc_1c296e: // 0160:1c296e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2970), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2976));
    if (!(eax & 0x80808080))
        goto loc_1c29f2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2985));
    if (edx == 0x80808080)
        goto loc_1c29b6;
    if (dl & 0x80)
        goto loc_1c2998;
    al = dl;
loc_1c2998: // 0160:1c2998
    if (dh & 0x80)
        goto loc_1c299f;
    ah = dh;
loc_1c299f: // 0160:1c299f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c29ac;
    al = dl;
loc_1c29ac: // 0160:1c29ac
    if (dh & 0x80)
        goto loc_1c29b3;
    ah = dh;
loc_1c29b3: // 0160:1c29b3
    eax = rol32(eax, 0x10);
loc_1c29b6: // 0160:1c29b6
    if (!(eax & 0x80808080))
        goto loc_1c29f2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c29c1));
    if (edx == 0x80808080)
        goto loc_1c29f2;
    if (dl & 0x80)
        goto loc_1c29d4;
    al = dl;
loc_1c29d4: // 0160:1c29d4
    if (dh & 0x80)
        goto loc_1c29db;
    ah = dh;
loc_1c29db: // 0160:1c29db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c29e8;
    al = dl;
loc_1c29e8: // 0160:1c29e8
    if (dh & 0x80)
        goto loc_1c29ef;
    ah = dh;
loc_1c29ef: // 0160:1c29ef
    eax = rol32(eax, 0x10);
loc_1c29f2: // 0160:1c29f2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c29f4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c29fa));
    if (!(eax & 0x80808080))
        goto loc_1c2a76;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2a09));
    if (edx == 0x80808080)
        goto loc_1c2a3a;
    if (dl & 0x80)
        goto loc_1c2a1c;
    al = dl;
loc_1c2a1c: // 0160:1c2a1c
    if (dh & 0x80)
        goto loc_1c2a23;
    ah = dh;
loc_1c2a23: // 0160:1c2a23
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2a30;
    al = dl;
loc_1c2a30: // 0160:1c2a30
    if (dh & 0x80)
        goto loc_1c2a37;
    ah = dh;
loc_1c2a37: // 0160:1c2a37
    eax = rol32(eax, 0x10);
loc_1c2a3a: // 0160:1c2a3a
    if (!(eax & 0x80808080))
        goto loc_1c2a76;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2a45));
    if (edx == 0x80808080)
        goto loc_1c2a76;
    if (dl & 0x80)
        goto loc_1c2a58;
    al = dl;
loc_1c2a58: // 0160:1c2a58
    if (dh & 0x80)
        goto loc_1c2a5f;
    ah = dh;
loc_1c2a5f: // 0160:1c2a5f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2a6c;
    al = dl;
loc_1c2a6c: // 0160:1c2a6c
    if (dh & 0x80)
        goto loc_1c2a73;
    ah = dh;
loc_1c2a73: // 0160:1c2a73
    eax = rol32(eax, 0x10);
loc_1c2a76: // 0160:1c2a76
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2a78), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2a7e));
    if (!(eax & 0x80808080))
        goto loc_1c2afa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2a8d));
    if (edx == 0x80808080)
        goto loc_1c2abe;
    if (dl & 0x80)
        goto loc_1c2aa0;
    al = dl;
loc_1c2aa0: // 0160:1c2aa0
    if (dh & 0x80)
        goto loc_1c2aa7;
    ah = dh;
loc_1c2aa7: // 0160:1c2aa7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2ab4;
    al = dl;
loc_1c2ab4: // 0160:1c2ab4
    if (dh & 0x80)
        goto loc_1c2abb;
    ah = dh;
loc_1c2abb: // 0160:1c2abb
    eax = rol32(eax, 0x10);
loc_1c2abe: // 0160:1c2abe
    if (!(eax & 0x80808080))
        goto loc_1c2afa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2ac9));
    if (edx == 0x80808080)
        goto loc_1c2afa;
    if (dl & 0x80)
        goto loc_1c2adc;
    al = dl;
loc_1c2adc: // 0160:1c2adc
    if (dh & 0x80)
        goto loc_1c2ae3;
    ah = dh;
loc_1c2ae3: // 0160:1c2ae3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2af0;
    al = dl;
loc_1c2af0: // 0160:1c2af0
    if (dh & 0x80)
        goto loc_1c2af7;
    ah = dh;
loc_1c2af7: // 0160:1c2af7
    eax = rol32(eax, 0x10);
loc_1c2afa: // 0160:1c2afa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2afc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2b02));
    if (!(eax & 0x80808080))
        goto loc_1c2b7e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2b11));
    if (edx == 0x80808080)
        goto loc_1c2b42;
    if (dl & 0x80)
        goto loc_1c2b24;
    al = dl;
loc_1c2b24: // 0160:1c2b24
    if (dh & 0x80)
        goto loc_1c2b2b;
    ah = dh;
loc_1c2b2b: // 0160:1c2b2b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2b38;
    al = dl;
loc_1c2b38: // 0160:1c2b38
    if (dh & 0x80)
        goto loc_1c2b3f;
    ah = dh;
loc_1c2b3f: // 0160:1c2b3f
    eax = rol32(eax, 0x10);
loc_1c2b42: // 0160:1c2b42
    if (!(eax & 0x80808080))
        goto loc_1c2b7e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2b4d));
    if (edx == 0x80808080)
        goto loc_1c2b7e;
    if (dl & 0x80)
        goto loc_1c2b60;
    al = dl;
loc_1c2b60: // 0160:1c2b60
    if (dh & 0x80)
        goto loc_1c2b67;
    ah = dh;
loc_1c2b67: // 0160:1c2b67
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2b74;
    al = dl;
loc_1c2b74: // 0160:1c2b74
    if (dh & 0x80)
        goto loc_1c2b7b;
    ah = dh;
loc_1c2b7b: // 0160:1c2b7b
    eax = rol32(eax, 0x10);
loc_1c2b7e: // 0160:1c2b7e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2b80), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2b86));
    if (!(eax & 0x80808080))
        goto loc_1c2c02;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2b95));
    if (edx == 0x80808080)
        goto loc_1c2bc6;
    if (dl & 0x80)
        goto loc_1c2ba8;
    al = dl;
loc_1c2ba8: // 0160:1c2ba8
    if (dh & 0x80)
        goto loc_1c2baf;
    ah = dh;
loc_1c2baf: // 0160:1c2baf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2bbc;
    al = dl;
loc_1c2bbc: // 0160:1c2bbc
    if (dh & 0x80)
        goto loc_1c2bc3;
    ah = dh;
loc_1c2bc3: // 0160:1c2bc3
    eax = rol32(eax, 0x10);
loc_1c2bc6: // 0160:1c2bc6
    if (!(eax & 0x80808080))
        goto loc_1c2c02;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2bd1));
    if (edx == 0x80808080)
        goto loc_1c2c02;
    if (dl & 0x80)
        goto loc_1c2be4;
    al = dl;
loc_1c2be4: // 0160:1c2be4
    if (dh & 0x80)
        goto loc_1c2beb;
    ah = dh;
loc_1c2beb: // 0160:1c2beb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2bf8;
    al = dl;
loc_1c2bf8: // 0160:1c2bf8
    if (dh & 0x80)
        goto loc_1c2bff;
    ah = dh;
loc_1c2bff: // 0160:1c2bff
    eax = rol32(eax, 0x10);
loc_1c2c02: // 0160:1c2c02
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2c04), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2c0a));
    if (!(eax & 0x80808080))
        goto loc_1c2c86;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2c19));
    if (edx == 0x80808080)
        goto loc_1c2c4a;
    if (dl & 0x80)
        goto loc_1c2c2c;
    al = dl;
loc_1c2c2c: // 0160:1c2c2c
    if (dh & 0x80)
        goto loc_1c2c33;
    ah = dh;
loc_1c2c33: // 0160:1c2c33
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2c40;
    al = dl;
loc_1c2c40: // 0160:1c2c40
    if (dh & 0x80)
        goto loc_1c2c47;
    ah = dh;
loc_1c2c47: // 0160:1c2c47
    eax = rol32(eax, 0x10);
loc_1c2c4a: // 0160:1c2c4a
    if (!(eax & 0x80808080))
        goto loc_1c2c86;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2c55));
    if (edx == 0x80808080)
        goto loc_1c2c86;
    if (dl & 0x80)
        goto loc_1c2c68;
    al = dl;
loc_1c2c68: // 0160:1c2c68
    if (dh & 0x80)
        goto loc_1c2c6f;
    ah = dh;
loc_1c2c6f: // 0160:1c2c6f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2c7c;
    al = dl;
loc_1c2c7c: // 0160:1c2c7c
    if (dh & 0x80)
        goto loc_1c2c83;
    ah = dh;
loc_1c2c83: // 0160:1c2c83
    eax = rol32(eax, 0x10);
loc_1c2c86: // 0160:1c2c86
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2c88), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2c8e));
    if (!(eax & 0x80808080))
        goto loc_1c2d0a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2c9d));
    if (edx == 0x80808080)
        goto loc_1c2cce;
    if (dl & 0x80)
        goto loc_1c2cb0;
    al = dl;
loc_1c2cb0: // 0160:1c2cb0
    if (dh & 0x80)
        goto loc_1c2cb7;
    ah = dh;
loc_1c2cb7: // 0160:1c2cb7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2cc4;
    al = dl;
loc_1c2cc4: // 0160:1c2cc4
    if (dh & 0x80)
        goto loc_1c2ccb;
    ah = dh;
loc_1c2ccb: // 0160:1c2ccb
    eax = rol32(eax, 0x10);
loc_1c2cce: // 0160:1c2cce
    if (!(eax & 0x80808080))
        goto loc_1c2d0a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2cd9));
    if (edx == 0x80808080)
        goto loc_1c2d0a;
    if (dl & 0x80)
        goto loc_1c2cec;
    al = dl;
loc_1c2cec: // 0160:1c2cec
    if (dh & 0x80)
        goto loc_1c2cf3;
    ah = dh;
loc_1c2cf3: // 0160:1c2cf3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2d00;
    al = dl;
loc_1c2d00: // 0160:1c2d00
    if (dh & 0x80)
        goto loc_1c2d07;
    ah = dh;
loc_1c2d07: // 0160:1c2d07
    eax = rol32(eax, 0x10);
loc_1c2d0a: // 0160:1c2d0a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2d0c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2d12));
    if (!(eax & 0x80808080))
        goto loc_1c2d8e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2d21));
    if (edx == 0x80808080)
        goto loc_1c2d52;
    if (dl & 0x80)
        goto loc_1c2d34;
    al = dl;
loc_1c2d34: // 0160:1c2d34
    if (dh & 0x80)
        goto loc_1c2d3b;
    ah = dh;
loc_1c2d3b: // 0160:1c2d3b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2d48;
    al = dl;
loc_1c2d48: // 0160:1c2d48
    if (dh & 0x80)
        goto loc_1c2d4f;
    ah = dh;
loc_1c2d4f: // 0160:1c2d4f
    eax = rol32(eax, 0x10);
loc_1c2d52: // 0160:1c2d52
    if (!(eax & 0x80808080))
        goto loc_1c2d8e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2d5d));
    if (edx == 0x80808080)
        goto loc_1c2d8e;
    if (dl & 0x80)
        goto loc_1c2d70;
    al = dl;
loc_1c2d70: // 0160:1c2d70
    if (dh & 0x80)
        goto loc_1c2d77;
    ah = dh;
loc_1c2d77: // 0160:1c2d77
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2d84;
    al = dl;
loc_1c2d84: // 0160:1c2d84
    if (dh & 0x80)
        goto loc_1c2d8b;
    ah = dh;
loc_1c2d8b: // 0160:1c2d8b
    eax = rol32(eax, 0x10);
loc_1c2d8e: // 0160:1c2d8e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2d90), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2d96));
    if (!(eax & 0x80808080))
        goto loc_1c2e12;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2da5));
    if (edx == 0x80808080)
        goto loc_1c2dd6;
    if (dl & 0x80)
        goto loc_1c2db8;
    al = dl;
loc_1c2db8: // 0160:1c2db8
    if (dh & 0x80)
        goto loc_1c2dbf;
    ah = dh;
loc_1c2dbf: // 0160:1c2dbf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2dcc;
    al = dl;
loc_1c2dcc: // 0160:1c2dcc
    if (dh & 0x80)
        goto loc_1c2dd3;
    ah = dh;
loc_1c2dd3: // 0160:1c2dd3
    eax = rol32(eax, 0x10);
loc_1c2dd6: // 0160:1c2dd6
    if (!(eax & 0x80808080))
        goto loc_1c2e12;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2de1));
    if (edx == 0x80808080)
        goto loc_1c2e12;
    if (dl & 0x80)
        goto loc_1c2df4;
    al = dl;
loc_1c2df4: // 0160:1c2df4
    if (dh & 0x80)
        goto loc_1c2dfb;
    ah = dh;
loc_1c2dfb: // 0160:1c2dfb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2e08;
    al = dl;
loc_1c2e08: // 0160:1c2e08
    if (dh & 0x80)
        goto loc_1c2e0f;
    ah = dh;
loc_1c2e0f: // 0160:1c2e0f
    eax = rol32(eax, 0x10);
loc_1c2e12: // 0160:1c2e12
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2e14), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2e1a));
    if (!(eax & 0x80808080))
        goto loc_1c2e96;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2e29));
    if (edx == 0x80808080)
        goto loc_1c2e5a;
    if (dl & 0x80)
        goto loc_1c2e3c;
    al = dl;
loc_1c2e3c: // 0160:1c2e3c
    if (dh & 0x80)
        goto loc_1c2e43;
    ah = dh;
loc_1c2e43: // 0160:1c2e43
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2e50;
    al = dl;
loc_1c2e50: // 0160:1c2e50
    if (dh & 0x80)
        goto loc_1c2e57;
    ah = dh;
loc_1c2e57: // 0160:1c2e57
    eax = rol32(eax, 0x10);
loc_1c2e5a: // 0160:1c2e5a
    if (!(eax & 0x80808080))
        goto loc_1c2e96;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2e65));
    if (edx == 0x80808080)
        goto loc_1c2e96;
    if (dl & 0x80)
        goto loc_1c2e78;
    al = dl;
loc_1c2e78: // 0160:1c2e78
    if (dh & 0x80)
        goto loc_1c2e7f;
    ah = dh;
loc_1c2e7f: // 0160:1c2e7f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2e8c;
    al = dl;
loc_1c2e8c: // 0160:1c2e8c
    if (dh & 0x80)
        goto loc_1c2e93;
    ah = dh;
loc_1c2e93: // 0160:1c2e93
    eax = rol32(eax, 0x10);
loc_1c2e96: // 0160:1c2e96
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2e98), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2e9e));
    if (!(eax & 0x80808080))
        goto loc_1c2f1a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2ead));
    if (edx == 0x80808080)
        goto loc_1c2ede;
    if (dl & 0x80)
        goto loc_1c2ec0;
    al = dl;
loc_1c2ec0: // 0160:1c2ec0
    if (dh & 0x80)
        goto loc_1c2ec7;
    ah = dh;
loc_1c2ec7: // 0160:1c2ec7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2ed4;
    al = dl;
loc_1c2ed4: // 0160:1c2ed4
    if (dh & 0x80)
        goto loc_1c2edb;
    ah = dh;
loc_1c2edb: // 0160:1c2edb
    eax = rol32(eax, 0x10);
loc_1c2ede: // 0160:1c2ede
    if (!(eax & 0x80808080))
        goto loc_1c2f1a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2ee9));
    if (edx == 0x80808080)
        goto loc_1c2f1a;
    if (dl & 0x80)
        goto loc_1c2efc;
    al = dl;
loc_1c2efc: // 0160:1c2efc
    if (dh & 0x80)
        goto loc_1c2f03;
    ah = dh;
loc_1c2f03: // 0160:1c2f03
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2f10;
    al = dl;
loc_1c2f10: // 0160:1c2f10
    if (dh & 0x80)
        goto loc_1c2f17;
    ah = dh;
loc_1c2f17: // 0160:1c2f17
    eax = rol32(eax, 0x10);
loc_1c2f1a: // 0160:1c2f1a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2f1c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2f22));
    if (!(eax & 0x80808080))
        goto loc_1c2f9e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2f31));
    if (edx == 0x80808080)
        goto loc_1c2f62;
    if (dl & 0x80)
        goto loc_1c2f44;
    al = dl;
loc_1c2f44: // 0160:1c2f44
    if (dh & 0x80)
        goto loc_1c2f4b;
    ah = dh;
loc_1c2f4b: // 0160:1c2f4b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2f58;
    al = dl;
loc_1c2f58: // 0160:1c2f58
    if (dh & 0x80)
        goto loc_1c2f5f;
    ah = dh;
loc_1c2f5f: // 0160:1c2f5f
    eax = rol32(eax, 0x10);
loc_1c2f62: // 0160:1c2f62
    if (!(eax & 0x80808080))
        goto loc_1c2f9e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2f6d));
    if (edx == 0x80808080)
        goto loc_1c2f9e;
    if (dl & 0x80)
        goto loc_1c2f80;
    al = dl;
loc_1c2f80: // 0160:1c2f80
    if (dh & 0x80)
        goto loc_1c2f87;
    ah = dh;
loc_1c2f87: // 0160:1c2f87
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2f94;
    al = dl;
loc_1c2f94: // 0160:1c2f94
    if (dh & 0x80)
        goto loc_1c2f9b;
    ah = dh;
loc_1c2f9b: // 0160:1c2f9b
    eax = rol32(eax, 0x10);
loc_1c2f9e: // 0160:1c2f9e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c2fa0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c2fa6));
    if (!(eax & 0x80808080))
        goto loc_1c3022;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c2fb5));
    if (edx == 0x80808080)
        goto loc_1c2fe6;
    if (dl & 0x80)
        goto loc_1c2fc8;
    al = dl;
loc_1c2fc8: // 0160:1c2fc8
    if (dh & 0x80)
        goto loc_1c2fcf;
    ah = dh;
loc_1c2fcf: // 0160:1c2fcf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c2fdc;
    al = dl;
loc_1c2fdc: // 0160:1c2fdc
    if (dh & 0x80)
        goto loc_1c2fe3;
    ah = dh;
loc_1c2fe3: // 0160:1c2fe3
    eax = rol32(eax, 0x10);
loc_1c2fe6: // 0160:1c2fe6
    if (!(eax & 0x80808080))
        goto loc_1c3022;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c2ff1));
    if (edx == 0x80808080)
        goto loc_1c3022;
    if (dl & 0x80)
        goto loc_1c3004;
    al = dl;
loc_1c3004: // 0160:1c3004
    if (dh & 0x80)
        goto loc_1c300b;
    ah = dh;
loc_1c300b: // 0160:1c300b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3018;
    al = dl;
loc_1c3018: // 0160:1c3018
    if (dh & 0x80)
        goto loc_1c301f;
    ah = dh;
loc_1c301f: // 0160:1c301f
    eax = rol32(eax, 0x10);
loc_1c3022: // 0160:1c3022
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3024), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c302a));
    if (!(eax & 0x80808080))
        goto loc_1c30a6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3039));
    if (edx == 0x80808080)
        goto loc_1c306a;
    if (dl & 0x80)
        goto loc_1c304c;
    al = dl;
loc_1c304c: // 0160:1c304c
    if (dh & 0x80)
        goto loc_1c3053;
    ah = dh;
loc_1c3053: // 0160:1c3053
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3060;
    al = dl;
loc_1c3060: // 0160:1c3060
    if (dh & 0x80)
        goto loc_1c3067;
    ah = dh;
loc_1c3067: // 0160:1c3067
    eax = rol32(eax, 0x10);
loc_1c306a: // 0160:1c306a
    if (!(eax & 0x80808080))
        goto loc_1c30a6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3075));
    if (edx == 0x80808080)
        goto loc_1c30a6;
    if (dl & 0x80)
        goto loc_1c3088;
    al = dl;
loc_1c3088: // 0160:1c3088
    if (dh & 0x80)
        goto loc_1c308f;
    ah = dh;
loc_1c308f: // 0160:1c308f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c309c;
    al = dl;
loc_1c309c: // 0160:1c309c
    if (dh & 0x80)
        goto loc_1c30a3;
    ah = dh;
loc_1c30a3: // 0160:1c30a3
    eax = rol32(eax, 0x10);
loc_1c30a6: // 0160:1c30a6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c30a8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c30ae));
    if (!(eax & 0x80808080))
        goto loc_1c312a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c30bd));
    if (edx == 0x80808080)
        goto loc_1c30ee;
    if (dl & 0x80)
        goto loc_1c30d0;
    al = dl;
loc_1c30d0: // 0160:1c30d0
    if (dh & 0x80)
        goto loc_1c30d7;
    ah = dh;
loc_1c30d7: // 0160:1c30d7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c30e4;
    al = dl;
loc_1c30e4: // 0160:1c30e4
    if (dh & 0x80)
        goto loc_1c30eb;
    ah = dh;
loc_1c30eb: // 0160:1c30eb
    eax = rol32(eax, 0x10);
loc_1c30ee: // 0160:1c30ee
    if (!(eax & 0x80808080))
        goto loc_1c312a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c30f9));
    if (edx == 0x80808080)
        goto loc_1c312a;
    if (dl & 0x80)
        goto loc_1c310c;
    al = dl;
loc_1c310c: // 0160:1c310c
    if (dh & 0x80)
        goto loc_1c3113;
    ah = dh;
loc_1c3113: // 0160:1c3113
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3120;
    al = dl;
loc_1c3120: // 0160:1c3120
    if (dh & 0x80)
        goto loc_1c3127;
    ah = dh;
loc_1c3127: // 0160:1c3127
    eax = rol32(eax, 0x10);
loc_1c312a: // 0160:1c312a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c312c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3132));
    if (!(eax & 0x80808080))
        goto loc_1c31ae;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3141));
    if (edx == 0x80808080)
        goto loc_1c3172;
    if (dl & 0x80)
        goto loc_1c3154;
    al = dl;
loc_1c3154: // 0160:1c3154
    if (dh & 0x80)
        goto loc_1c315b;
    ah = dh;
loc_1c315b: // 0160:1c315b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3168;
    al = dl;
loc_1c3168: // 0160:1c3168
    if (dh & 0x80)
        goto loc_1c316f;
    ah = dh;
loc_1c316f: // 0160:1c316f
    eax = rol32(eax, 0x10);
loc_1c3172: // 0160:1c3172
    if (!(eax & 0x80808080))
        goto loc_1c31ae;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c317d));
    if (edx == 0x80808080)
        goto loc_1c31ae;
    if (dl & 0x80)
        goto loc_1c3190;
    al = dl;
loc_1c3190: // 0160:1c3190
    if (dh & 0x80)
        goto loc_1c3197;
    ah = dh;
loc_1c3197: // 0160:1c3197
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c31a4;
    al = dl;
loc_1c31a4: // 0160:1c31a4
    if (dh & 0x80)
        goto loc_1c31ab;
    ah = dh;
loc_1c31ab: // 0160:1c31ab
    eax = rol32(eax, 0x10);
loc_1c31ae: // 0160:1c31ae
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c31b0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c31b6));
    if (!(eax & 0x80808080))
        goto loc_1c3232;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c31c5));
    if (edx == 0x80808080)
        goto loc_1c31f6;
    if (dl & 0x80)
        goto loc_1c31d8;
    al = dl;
loc_1c31d8: // 0160:1c31d8
    if (dh & 0x80)
        goto loc_1c31df;
    ah = dh;
loc_1c31df: // 0160:1c31df
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c31ec;
    al = dl;
loc_1c31ec: // 0160:1c31ec
    if (dh & 0x80)
        goto loc_1c31f3;
    ah = dh;
loc_1c31f3: // 0160:1c31f3
    eax = rol32(eax, 0x10);
loc_1c31f6: // 0160:1c31f6
    if (!(eax & 0x80808080))
        goto loc_1c3232;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3201));
    if (edx == 0x80808080)
        goto loc_1c3232;
    if (dl & 0x80)
        goto loc_1c3214;
    al = dl;
loc_1c3214: // 0160:1c3214
    if (dh & 0x80)
        goto loc_1c321b;
    ah = dh;
loc_1c321b: // 0160:1c321b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3228;
    al = dl;
loc_1c3228: // 0160:1c3228
    if (dh & 0x80)
        goto loc_1c322f;
    ah = dh;
loc_1c322f: // 0160:1c322f
    eax = rol32(eax, 0x10);
loc_1c3232: // 0160:1c3232
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3234), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c323a));
    if (!(eax & 0x80808080))
        goto loc_1c32b6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3249));
    if (edx == 0x80808080)
        goto loc_1c327a;
    if (dl & 0x80)
        goto loc_1c325c;
    al = dl;
loc_1c325c: // 0160:1c325c
    if (dh & 0x80)
        goto loc_1c3263;
    ah = dh;
loc_1c3263: // 0160:1c3263
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3270;
    al = dl;
loc_1c3270: // 0160:1c3270
    if (dh & 0x80)
        goto loc_1c3277;
    ah = dh;
loc_1c3277: // 0160:1c3277
    eax = rol32(eax, 0x10);
loc_1c327a: // 0160:1c327a
    if (!(eax & 0x80808080))
        goto loc_1c32b6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3285));
    if (edx == 0x80808080)
        goto loc_1c32b6;
    if (dl & 0x80)
        goto loc_1c3298;
    al = dl;
loc_1c3298: // 0160:1c3298
    if (dh & 0x80)
        goto loc_1c329f;
    ah = dh;
loc_1c329f: // 0160:1c329f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c32ac;
    al = dl;
loc_1c32ac: // 0160:1c32ac
    if (dh & 0x80)
        goto loc_1c32b3;
    ah = dh;
loc_1c32b3: // 0160:1c32b3
    eax = rol32(eax, 0x10);
loc_1c32b6: // 0160:1c32b6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c32b8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c32be));
    if (!(eax & 0x80808080))
        goto loc_1c333a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c32cd));
    if (edx == 0x80808080)
        goto loc_1c32fe;
    if (dl & 0x80)
        goto loc_1c32e0;
    al = dl;
loc_1c32e0: // 0160:1c32e0
    if (dh & 0x80)
        goto loc_1c32e7;
    ah = dh;
loc_1c32e7: // 0160:1c32e7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c32f4;
    al = dl;
loc_1c32f4: // 0160:1c32f4
    if (dh & 0x80)
        goto loc_1c32fb;
    ah = dh;
loc_1c32fb: // 0160:1c32fb
    eax = rol32(eax, 0x10);
loc_1c32fe: // 0160:1c32fe
    if (!(eax & 0x80808080))
        goto loc_1c333a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3309));
    if (edx == 0x80808080)
        goto loc_1c333a;
    if (dl & 0x80)
        goto loc_1c331c;
    al = dl;
loc_1c331c: // 0160:1c331c
    if (dh & 0x80)
        goto loc_1c3323;
    ah = dh;
loc_1c3323: // 0160:1c3323
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3330;
    al = dl;
loc_1c3330: // 0160:1c3330
    if (dh & 0x80)
        goto loc_1c3337;
    ah = dh;
loc_1c3337: // 0160:1c3337
    eax = rol32(eax, 0x10);
loc_1c333a: // 0160:1c333a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c333c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3342));
    if (!(eax & 0x80808080))
        goto loc_1c33be;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3351));
    if (edx == 0x80808080)
        goto loc_1c3382;
    if (dl & 0x80)
        goto loc_1c3364;
    al = dl;
loc_1c3364: // 0160:1c3364
    if (dh & 0x80)
        goto loc_1c336b;
    ah = dh;
loc_1c336b: // 0160:1c336b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3378;
    al = dl;
loc_1c3378: // 0160:1c3378
    if (dh & 0x80)
        goto loc_1c337f;
    ah = dh;
loc_1c337f: // 0160:1c337f
    eax = rol32(eax, 0x10);
loc_1c3382: // 0160:1c3382
    if (!(eax & 0x80808080))
        goto loc_1c33be;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c338d));
    if (edx == 0x80808080)
        goto loc_1c33be;
    if (dl & 0x80)
        goto loc_1c33a0;
    al = dl;
loc_1c33a0: // 0160:1c33a0
    if (dh & 0x80)
        goto loc_1c33a7;
    ah = dh;
loc_1c33a7: // 0160:1c33a7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c33b4;
    al = dl;
loc_1c33b4: // 0160:1c33b4
    if (dh & 0x80)
        goto loc_1c33bb;
    ah = dh;
loc_1c33bb: // 0160:1c33bb
    eax = rol32(eax, 0x10);
loc_1c33be: // 0160:1c33be
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c33c0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c33c6));
    if (!(eax & 0x80808080))
        goto loc_1c3442;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c33d5));
    if (edx == 0x80808080)
        goto loc_1c3406;
    if (dl & 0x80)
        goto loc_1c33e8;
    al = dl;
loc_1c33e8: // 0160:1c33e8
    if (dh & 0x80)
        goto loc_1c33ef;
    ah = dh;
loc_1c33ef: // 0160:1c33ef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c33fc;
    al = dl;
loc_1c33fc: // 0160:1c33fc
    if (dh & 0x80)
        goto loc_1c3403;
    ah = dh;
loc_1c3403: // 0160:1c3403
    eax = rol32(eax, 0x10);
loc_1c3406: // 0160:1c3406
    if (!(eax & 0x80808080))
        goto loc_1c3442;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3411));
    if (edx == 0x80808080)
        goto loc_1c3442;
    if (dl & 0x80)
        goto loc_1c3424;
    al = dl;
loc_1c3424: // 0160:1c3424
    if (dh & 0x80)
        goto loc_1c342b;
    ah = dh;
loc_1c342b: // 0160:1c342b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3438;
    al = dl;
loc_1c3438: // 0160:1c3438
    if (dh & 0x80)
        goto loc_1c343f;
    ah = dh;
loc_1c343f: // 0160:1c343f
    eax = rol32(eax, 0x10);
loc_1c3442: // 0160:1c3442
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3444), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c344a));
    if (!(eax & 0x80808080))
        goto loc_1c34c6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3459));
    if (edx == 0x80808080)
        goto loc_1c348a;
    if (dl & 0x80)
        goto loc_1c346c;
    al = dl;
loc_1c346c: // 0160:1c346c
    if (dh & 0x80)
        goto loc_1c3473;
    ah = dh;
loc_1c3473: // 0160:1c3473
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3480;
    al = dl;
loc_1c3480: // 0160:1c3480
    if (dh & 0x80)
        goto loc_1c3487;
    ah = dh;
loc_1c3487: // 0160:1c3487
    eax = rol32(eax, 0x10);
loc_1c348a: // 0160:1c348a
    if (!(eax & 0x80808080))
        goto loc_1c34c6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3495));
    if (edx == 0x80808080)
        goto loc_1c34c6;
    if (dl & 0x80)
        goto loc_1c34a8;
    al = dl;
loc_1c34a8: // 0160:1c34a8
    if (dh & 0x80)
        goto loc_1c34af;
    ah = dh;
loc_1c34af: // 0160:1c34af
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c34bc;
    al = dl;
loc_1c34bc: // 0160:1c34bc
    if (dh & 0x80)
        goto loc_1c34c3;
    ah = dh;
loc_1c34c3: // 0160:1c34c3
    eax = rol32(eax, 0x10);
loc_1c34c6: // 0160:1c34c6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c34c8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c34ce));
    if (!(eax & 0x80808080))
        goto loc_1c354a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c34dd));
    if (edx == 0x80808080)
        goto loc_1c350e;
    if (dl & 0x80)
        goto loc_1c34f0;
    al = dl;
loc_1c34f0: // 0160:1c34f0
    if (dh & 0x80)
        goto loc_1c34f7;
    ah = dh;
loc_1c34f7: // 0160:1c34f7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3504;
    al = dl;
loc_1c3504: // 0160:1c3504
    if (dh & 0x80)
        goto loc_1c350b;
    ah = dh;
loc_1c350b: // 0160:1c350b
    eax = rol32(eax, 0x10);
loc_1c350e: // 0160:1c350e
    if (!(eax & 0x80808080))
        goto loc_1c354a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3519));
    if (edx == 0x80808080)
        goto loc_1c354a;
    if (dl & 0x80)
        goto loc_1c352c;
    al = dl;
loc_1c352c: // 0160:1c352c
    if (dh & 0x80)
        goto loc_1c3533;
    ah = dh;
loc_1c3533: // 0160:1c3533
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3540;
    al = dl;
loc_1c3540: // 0160:1c3540
    if (dh & 0x80)
        goto loc_1c3547;
    ah = dh;
loc_1c3547: // 0160:1c3547
    eax = rol32(eax, 0x10);
loc_1c354a: // 0160:1c354a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c354c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3552));
    if (!(eax & 0x80808080))
        goto loc_1c35ce;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3561));
    if (edx == 0x80808080)
        goto loc_1c3592;
    if (dl & 0x80)
        goto loc_1c3574;
    al = dl;
loc_1c3574: // 0160:1c3574
    if (dh & 0x80)
        goto loc_1c357b;
    ah = dh;
loc_1c357b: // 0160:1c357b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3588;
    al = dl;
loc_1c3588: // 0160:1c3588
    if (dh & 0x80)
        goto loc_1c358f;
    ah = dh;
loc_1c358f: // 0160:1c358f
    eax = rol32(eax, 0x10);
loc_1c3592: // 0160:1c3592
    if (!(eax & 0x80808080))
        goto loc_1c35ce;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c359d));
    if (edx == 0x80808080)
        goto loc_1c35ce;
    if (dl & 0x80)
        goto loc_1c35b0;
    al = dl;
loc_1c35b0: // 0160:1c35b0
    if (dh & 0x80)
        goto loc_1c35b7;
    ah = dh;
loc_1c35b7: // 0160:1c35b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c35c4;
    al = dl;
loc_1c35c4: // 0160:1c35c4
    if (dh & 0x80)
        goto loc_1c35cb;
    ah = dh;
loc_1c35cb: // 0160:1c35cb
    eax = rol32(eax, 0x10);
loc_1c35ce: // 0160:1c35ce
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c35d0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c35d6));
    if (!(eax & 0x80808080))
        goto loc_1c3652;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c35e5));
    if (edx == 0x80808080)
        goto loc_1c3616;
    if (dl & 0x80)
        goto loc_1c35f8;
    al = dl;
loc_1c35f8: // 0160:1c35f8
    if (dh & 0x80)
        goto loc_1c35ff;
    ah = dh;
loc_1c35ff: // 0160:1c35ff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c360c;
    al = dl;
loc_1c360c: // 0160:1c360c
    if (dh & 0x80)
        goto loc_1c3613;
    ah = dh;
loc_1c3613: // 0160:1c3613
    eax = rol32(eax, 0x10);
loc_1c3616: // 0160:1c3616
    if (!(eax & 0x80808080))
        goto loc_1c3652;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3621));
    if (edx == 0x80808080)
        goto loc_1c3652;
    if (dl & 0x80)
        goto loc_1c3634;
    al = dl;
loc_1c3634: // 0160:1c3634
    if (dh & 0x80)
        goto loc_1c363b;
    ah = dh;
loc_1c363b: // 0160:1c363b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3648;
    al = dl;
loc_1c3648: // 0160:1c3648
    if (dh & 0x80)
        goto loc_1c364f;
    ah = dh;
loc_1c364f: // 0160:1c364f
    eax = rol32(eax, 0x10);
loc_1c3652: // 0160:1c3652
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3654), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c365a));
    if (!(eax & 0x80808080))
        goto loc_1c36d6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3669));
    if (edx == 0x80808080)
        goto loc_1c369a;
    if (dl & 0x80)
        goto loc_1c367c;
    al = dl;
loc_1c367c: // 0160:1c367c
    if (dh & 0x80)
        goto loc_1c3683;
    ah = dh;
loc_1c3683: // 0160:1c3683
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3690;
    al = dl;
loc_1c3690: // 0160:1c3690
    if (dh & 0x80)
        goto loc_1c3697;
    ah = dh;
loc_1c3697: // 0160:1c3697
    eax = rol32(eax, 0x10);
loc_1c369a: // 0160:1c369a
    if (!(eax & 0x80808080))
        goto loc_1c36d6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c36a5));
    if (edx == 0x80808080)
        goto loc_1c36d6;
    if (dl & 0x80)
        goto loc_1c36b8;
    al = dl;
loc_1c36b8: // 0160:1c36b8
    if (dh & 0x80)
        goto loc_1c36bf;
    ah = dh;
loc_1c36bf: // 0160:1c36bf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c36cc;
    al = dl;
loc_1c36cc: // 0160:1c36cc
    if (dh & 0x80)
        goto loc_1c36d3;
    ah = dh;
loc_1c36d3: // 0160:1c36d3
    eax = rol32(eax, 0x10);
loc_1c36d6: // 0160:1c36d6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c36d8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c36de));
    if (!(eax & 0x80808080))
        goto loc_1c375a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c36ed));
    if (edx == 0x80808080)
        goto loc_1c371e;
    if (dl & 0x80)
        goto loc_1c3700;
    al = dl;
loc_1c3700: // 0160:1c3700
    if (dh & 0x80)
        goto loc_1c3707;
    ah = dh;
loc_1c3707: // 0160:1c3707
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3714;
    al = dl;
loc_1c3714: // 0160:1c3714
    if (dh & 0x80)
        goto loc_1c371b;
    ah = dh;
loc_1c371b: // 0160:1c371b
    eax = rol32(eax, 0x10);
loc_1c371e: // 0160:1c371e
    if (!(eax & 0x80808080))
        goto loc_1c375a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3729));
    if (edx == 0x80808080)
        goto loc_1c375a;
    if (dl & 0x80)
        goto loc_1c373c;
    al = dl;
loc_1c373c: // 0160:1c373c
    if (dh & 0x80)
        goto loc_1c3743;
    ah = dh;
loc_1c3743: // 0160:1c3743
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3750;
    al = dl;
loc_1c3750: // 0160:1c3750
    if (dh & 0x80)
        goto loc_1c3757;
    ah = dh;
loc_1c3757: // 0160:1c3757
    eax = rol32(eax, 0x10);
loc_1c375a: // 0160:1c375a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c375c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3762));
    if (!(eax & 0x80808080))
        goto loc_1c37de;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3771));
    if (edx == 0x80808080)
        goto loc_1c37a2;
    if (dl & 0x80)
        goto loc_1c3784;
    al = dl;
loc_1c3784: // 0160:1c3784
    if (dh & 0x80)
        goto loc_1c378b;
    ah = dh;
loc_1c378b: // 0160:1c378b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3798;
    al = dl;
loc_1c3798: // 0160:1c3798
    if (dh & 0x80)
        goto loc_1c379f;
    ah = dh;
loc_1c379f: // 0160:1c379f
    eax = rol32(eax, 0x10);
loc_1c37a2: // 0160:1c37a2
    if (!(eax & 0x80808080))
        goto loc_1c37de;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c37ad));
    if (edx == 0x80808080)
        goto loc_1c37de;
    if (dl & 0x80)
        goto loc_1c37c0;
    al = dl;
loc_1c37c0: // 0160:1c37c0
    if (dh & 0x80)
        goto loc_1c37c7;
    ah = dh;
loc_1c37c7: // 0160:1c37c7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c37d4;
    al = dl;
loc_1c37d4: // 0160:1c37d4
    if (dh & 0x80)
        goto loc_1c37db;
    ah = dh;
loc_1c37db: // 0160:1c37db
    eax = rol32(eax, 0x10);
loc_1c37de: // 0160:1c37de
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c37e0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c37e6));
    if (!(eax & 0x80808080))
        goto loc_1c3862;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c37f5));
    if (edx == 0x80808080)
        goto loc_1c3826;
    if (dl & 0x80)
        goto loc_1c3808;
    al = dl;
loc_1c3808: // 0160:1c3808
    if (dh & 0x80)
        goto loc_1c380f;
    ah = dh;
loc_1c380f: // 0160:1c380f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c381c;
    al = dl;
loc_1c381c: // 0160:1c381c
    if (dh & 0x80)
        goto loc_1c3823;
    ah = dh;
loc_1c3823: // 0160:1c3823
    eax = rol32(eax, 0x10);
loc_1c3826: // 0160:1c3826
    if (!(eax & 0x80808080))
        goto loc_1c3862;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3831));
    if (edx == 0x80808080)
        goto loc_1c3862;
    if (dl & 0x80)
        goto loc_1c3844;
    al = dl;
loc_1c3844: // 0160:1c3844
    if (dh & 0x80)
        goto loc_1c384b;
    ah = dh;
loc_1c384b: // 0160:1c384b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3858;
    al = dl;
loc_1c3858: // 0160:1c3858
    if (dh & 0x80)
        goto loc_1c385f;
    ah = dh;
loc_1c385f: // 0160:1c385f
    eax = rol32(eax, 0x10);
loc_1c3862: // 0160:1c3862
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3864), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c386a));
    if (!(eax & 0x80808080))
        goto loc_1c38e6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3879));
    if (edx == 0x80808080)
        goto loc_1c38aa;
    if (dl & 0x80)
        goto loc_1c388c;
    al = dl;
loc_1c388c: // 0160:1c388c
    if (dh & 0x80)
        goto loc_1c3893;
    ah = dh;
loc_1c3893: // 0160:1c3893
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c38a0;
    al = dl;
loc_1c38a0: // 0160:1c38a0
    if (dh & 0x80)
        goto loc_1c38a7;
    ah = dh;
loc_1c38a7: // 0160:1c38a7
    eax = rol32(eax, 0x10);
loc_1c38aa: // 0160:1c38aa
    if (!(eax & 0x80808080))
        goto loc_1c38e6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c38b5));
    if (edx == 0x80808080)
        goto loc_1c38e6;
    if (dl & 0x80)
        goto loc_1c38c8;
    al = dl;
loc_1c38c8: // 0160:1c38c8
    if (dh & 0x80)
        goto loc_1c38cf;
    ah = dh;
loc_1c38cf: // 0160:1c38cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c38dc;
    al = dl;
loc_1c38dc: // 0160:1c38dc
    if (dh & 0x80)
        goto loc_1c38e3;
    ah = dh;
loc_1c38e3: // 0160:1c38e3
    eax = rol32(eax, 0x10);
loc_1c38e6: // 0160:1c38e6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c38e8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c38ee));
    if (!(eax & 0x80808080))
        goto loc_1c396a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c38fd));
    if (edx == 0x80808080)
        goto loc_1c392e;
    if (dl & 0x80)
        goto loc_1c3910;
    al = dl;
loc_1c3910: // 0160:1c3910
    if (dh & 0x80)
        goto loc_1c3917;
    ah = dh;
loc_1c3917: // 0160:1c3917
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3924;
    al = dl;
loc_1c3924: // 0160:1c3924
    if (dh & 0x80)
        goto loc_1c392b;
    ah = dh;
loc_1c392b: // 0160:1c392b
    eax = rol32(eax, 0x10);
loc_1c392e: // 0160:1c392e
    if (!(eax & 0x80808080))
        goto loc_1c396a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3939));
    if (edx == 0x80808080)
        goto loc_1c396a;
    if (dl & 0x80)
        goto loc_1c394c;
    al = dl;
loc_1c394c: // 0160:1c394c
    if (dh & 0x80)
        goto loc_1c3953;
    ah = dh;
loc_1c3953: // 0160:1c3953
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3960;
    al = dl;
loc_1c3960: // 0160:1c3960
    if (dh & 0x80)
        goto loc_1c3967;
    ah = dh;
loc_1c3967: // 0160:1c3967
    eax = rol32(eax, 0x10);
loc_1c396a: // 0160:1c396a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c396c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3972));
    if (!(eax & 0x80808080))
        goto loc_1c39ee;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3981));
    if (edx == 0x80808080)
        goto loc_1c39b2;
    if (dl & 0x80)
        goto loc_1c3994;
    al = dl;
loc_1c3994: // 0160:1c3994
    if (dh & 0x80)
        goto loc_1c399b;
    ah = dh;
loc_1c399b: // 0160:1c399b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c39a8;
    al = dl;
loc_1c39a8: // 0160:1c39a8
    if (dh & 0x80)
        goto loc_1c39af;
    ah = dh;
loc_1c39af: // 0160:1c39af
    eax = rol32(eax, 0x10);
loc_1c39b2: // 0160:1c39b2
    if (!(eax & 0x80808080))
        goto loc_1c39ee;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c39bd));
    if (edx == 0x80808080)
        goto loc_1c39ee;
    if (dl & 0x80)
        goto loc_1c39d0;
    al = dl;
loc_1c39d0: // 0160:1c39d0
    if (dh & 0x80)
        goto loc_1c39d7;
    ah = dh;
loc_1c39d7: // 0160:1c39d7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c39e4;
    al = dl;
loc_1c39e4: // 0160:1c39e4
    if (dh & 0x80)
        goto loc_1c39eb;
    ah = dh;
loc_1c39eb: // 0160:1c39eb
    eax = rol32(eax, 0x10);
loc_1c39ee: // 0160:1c39ee
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c39f0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c39f6));
    if (!(eax & 0x80808080))
        goto loc_1c3a72;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3a05));
    if (edx == 0x80808080)
        goto loc_1c3a36;
    if (dl & 0x80)
        goto loc_1c3a18;
    al = dl;
loc_1c3a18: // 0160:1c3a18
    if (dh & 0x80)
        goto loc_1c3a1f;
    ah = dh;
loc_1c3a1f: // 0160:1c3a1f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3a2c;
    al = dl;
loc_1c3a2c: // 0160:1c3a2c
    if (dh & 0x80)
        goto loc_1c3a33;
    ah = dh;
loc_1c3a33: // 0160:1c3a33
    eax = rol32(eax, 0x10);
loc_1c3a36: // 0160:1c3a36
    if (!(eax & 0x80808080))
        goto loc_1c3a72;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3a41));
    if (edx == 0x80808080)
        goto loc_1c3a72;
    if (dl & 0x80)
        goto loc_1c3a54;
    al = dl;
loc_1c3a54: // 0160:1c3a54
    if (dh & 0x80)
        goto loc_1c3a5b;
    ah = dh;
loc_1c3a5b: // 0160:1c3a5b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3a68;
    al = dl;
loc_1c3a68: // 0160:1c3a68
    if (dh & 0x80)
        goto loc_1c3a6f;
    ah = dh;
loc_1c3a6f: // 0160:1c3a6f
    eax = rol32(eax, 0x10);
loc_1c3a72: // 0160:1c3a72
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3a74), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3a7a));
    if (!(eax & 0x80808080))
        goto loc_1c3af6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3a89));
    if (edx == 0x80808080)
        goto loc_1c3aba;
    if (dl & 0x80)
        goto loc_1c3a9c;
    al = dl;
loc_1c3a9c: // 0160:1c3a9c
    if (dh & 0x80)
        goto loc_1c3aa3;
    ah = dh;
loc_1c3aa3: // 0160:1c3aa3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3ab0;
    al = dl;
loc_1c3ab0: // 0160:1c3ab0
    if (dh & 0x80)
        goto loc_1c3ab7;
    ah = dh;
loc_1c3ab7: // 0160:1c3ab7
    eax = rol32(eax, 0x10);
loc_1c3aba: // 0160:1c3aba
    if (!(eax & 0x80808080))
        goto loc_1c3af6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3ac5));
    if (edx == 0x80808080)
        goto loc_1c3af6;
    if (dl & 0x80)
        goto loc_1c3ad8;
    al = dl;
loc_1c3ad8: // 0160:1c3ad8
    if (dh & 0x80)
        goto loc_1c3adf;
    ah = dh;
loc_1c3adf: // 0160:1c3adf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3aec;
    al = dl;
loc_1c3aec: // 0160:1c3aec
    if (dh & 0x80)
        goto loc_1c3af3;
    ah = dh;
loc_1c3af3: // 0160:1c3af3
    eax = rol32(eax, 0x10);
loc_1c3af6: // 0160:1c3af6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3af8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3afe));
    if (!(eax & 0x80808080))
        goto loc_1c3b7a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3b0d));
    if (edx == 0x80808080)
        goto loc_1c3b3e;
    if (dl & 0x80)
        goto loc_1c3b20;
    al = dl;
loc_1c3b20: // 0160:1c3b20
    if (dh & 0x80)
        goto loc_1c3b27;
    ah = dh;
loc_1c3b27: // 0160:1c3b27
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3b34;
    al = dl;
loc_1c3b34: // 0160:1c3b34
    if (dh & 0x80)
        goto loc_1c3b3b;
    ah = dh;
loc_1c3b3b: // 0160:1c3b3b
    eax = rol32(eax, 0x10);
loc_1c3b3e: // 0160:1c3b3e
    if (!(eax & 0x80808080))
        goto loc_1c3b7a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3b49));
    if (edx == 0x80808080)
        goto loc_1c3b7a;
    if (dl & 0x80)
        goto loc_1c3b5c;
    al = dl;
loc_1c3b5c: // 0160:1c3b5c
    if (dh & 0x80)
        goto loc_1c3b63;
    ah = dh;
loc_1c3b63: // 0160:1c3b63
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3b70;
    al = dl;
loc_1c3b70: // 0160:1c3b70
    if (dh & 0x80)
        goto loc_1c3b77;
    ah = dh;
loc_1c3b77: // 0160:1c3b77
    eax = rol32(eax, 0x10);
loc_1c3b7a: // 0160:1c3b7a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3b7c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3b82));
    if (!(eax & 0x80808080))
        goto loc_1c3bfe;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3b91));
    if (edx == 0x80808080)
        goto loc_1c3bc2;
    if (dl & 0x80)
        goto loc_1c3ba4;
    al = dl;
loc_1c3ba4: // 0160:1c3ba4
    if (dh & 0x80)
        goto loc_1c3bab;
    ah = dh;
loc_1c3bab: // 0160:1c3bab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3bb8;
    al = dl;
loc_1c3bb8: // 0160:1c3bb8
    if (dh & 0x80)
        goto loc_1c3bbf;
    ah = dh;
loc_1c3bbf: // 0160:1c3bbf
    eax = rol32(eax, 0x10);
loc_1c3bc2: // 0160:1c3bc2
    if (!(eax & 0x80808080))
        goto loc_1c3bfe;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3bcd));
    if (edx == 0x80808080)
        goto loc_1c3bfe;
    if (dl & 0x80)
        goto loc_1c3be0;
    al = dl;
loc_1c3be0: // 0160:1c3be0
    if (dh & 0x80)
        goto loc_1c3be7;
    ah = dh;
loc_1c3be7: // 0160:1c3be7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3bf4;
    al = dl;
loc_1c3bf4: // 0160:1c3bf4
    if (dh & 0x80)
        goto loc_1c3bfb;
    ah = dh;
loc_1c3bfb: // 0160:1c3bfb
    eax = rol32(eax, 0x10);
loc_1c3bfe: // 0160:1c3bfe
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3c00), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3c06));
    if (!(eax & 0x80808080))
        goto loc_1c3c82;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3c15));
    if (edx == 0x80808080)
        goto loc_1c3c46;
    if (dl & 0x80)
        goto loc_1c3c28;
    al = dl;
loc_1c3c28: // 0160:1c3c28
    if (dh & 0x80)
        goto loc_1c3c2f;
    ah = dh;
loc_1c3c2f: // 0160:1c3c2f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3c3c;
    al = dl;
loc_1c3c3c: // 0160:1c3c3c
    if (dh & 0x80)
        goto loc_1c3c43;
    ah = dh;
loc_1c3c43: // 0160:1c3c43
    eax = rol32(eax, 0x10);
loc_1c3c46: // 0160:1c3c46
    if (!(eax & 0x80808080))
        goto loc_1c3c82;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3c51));
    if (edx == 0x80808080)
        goto loc_1c3c82;
    if (dl & 0x80)
        goto loc_1c3c64;
    al = dl;
loc_1c3c64: // 0160:1c3c64
    if (dh & 0x80)
        goto loc_1c3c6b;
    ah = dh;
loc_1c3c6b: // 0160:1c3c6b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3c78;
    al = dl;
loc_1c3c78: // 0160:1c3c78
    if (dh & 0x80)
        goto loc_1c3c7f;
    ah = dh;
loc_1c3c7f: // 0160:1c3c7f
    eax = rol32(eax, 0x10);
loc_1c3c82: // 0160:1c3c82
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3c84), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3c8a));
    if (!(eax & 0x80808080))
        goto loc_1c3d06;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3c99));
    if (edx == 0x80808080)
        goto loc_1c3cca;
    if (dl & 0x80)
        goto loc_1c3cac;
    al = dl;
loc_1c3cac: // 0160:1c3cac
    if (dh & 0x80)
        goto loc_1c3cb3;
    ah = dh;
loc_1c3cb3: // 0160:1c3cb3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3cc0;
    al = dl;
loc_1c3cc0: // 0160:1c3cc0
    if (dh & 0x80)
        goto loc_1c3cc7;
    ah = dh;
loc_1c3cc7: // 0160:1c3cc7
    eax = rol32(eax, 0x10);
loc_1c3cca: // 0160:1c3cca
    if (!(eax & 0x80808080))
        goto loc_1c3d06;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3cd5));
    if (edx == 0x80808080)
        goto loc_1c3d06;
    if (dl & 0x80)
        goto loc_1c3ce8;
    al = dl;
loc_1c3ce8: // 0160:1c3ce8
    if (dh & 0x80)
        goto loc_1c3cef;
    ah = dh;
loc_1c3cef: // 0160:1c3cef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3cfc;
    al = dl;
loc_1c3cfc: // 0160:1c3cfc
    if (dh & 0x80)
        goto loc_1c3d03;
    ah = dh;
loc_1c3d03: // 0160:1c3d03
    eax = rol32(eax, 0x10);
loc_1c3d06: // 0160:1c3d06
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3d08), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3d0e));
    if (!(eax & 0x80808080))
        goto loc_1c3d8a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3d1d));
    if (edx == 0x80808080)
        goto loc_1c3d4e;
    if (dl & 0x80)
        goto loc_1c3d30;
    al = dl;
loc_1c3d30: // 0160:1c3d30
    if (dh & 0x80)
        goto loc_1c3d37;
    ah = dh;
loc_1c3d37: // 0160:1c3d37
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3d44;
    al = dl;
loc_1c3d44: // 0160:1c3d44
    if (dh & 0x80)
        goto loc_1c3d4b;
    ah = dh;
loc_1c3d4b: // 0160:1c3d4b
    eax = rol32(eax, 0x10);
loc_1c3d4e: // 0160:1c3d4e
    if (!(eax & 0x80808080))
        goto loc_1c3d8a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3d59));
    if (edx == 0x80808080)
        goto loc_1c3d8a;
    if (dl & 0x80)
        goto loc_1c3d6c;
    al = dl;
loc_1c3d6c: // 0160:1c3d6c
    if (dh & 0x80)
        goto loc_1c3d73;
    ah = dh;
loc_1c3d73: // 0160:1c3d73
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3d80;
    al = dl;
loc_1c3d80: // 0160:1c3d80
    if (dh & 0x80)
        goto loc_1c3d87;
    ah = dh;
loc_1c3d87: // 0160:1c3d87
    eax = rol32(eax, 0x10);
loc_1c3d8a: // 0160:1c3d8a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3d8c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3d92));
    if (!(eax & 0x80808080))
        goto loc_1c3e0e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3da1));
    if (edx == 0x80808080)
        goto loc_1c3dd2;
    if (dl & 0x80)
        goto loc_1c3db4;
    al = dl;
loc_1c3db4: // 0160:1c3db4
    if (dh & 0x80)
        goto loc_1c3dbb;
    ah = dh;
loc_1c3dbb: // 0160:1c3dbb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3dc8;
    al = dl;
loc_1c3dc8: // 0160:1c3dc8
    if (dh & 0x80)
        goto loc_1c3dcf;
    ah = dh;
loc_1c3dcf: // 0160:1c3dcf
    eax = rol32(eax, 0x10);
loc_1c3dd2: // 0160:1c3dd2
    if (!(eax & 0x80808080))
        goto loc_1c3e0e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3ddd));
    if (edx == 0x80808080)
        goto loc_1c3e0e;
    if (dl & 0x80)
        goto loc_1c3df0;
    al = dl;
loc_1c3df0: // 0160:1c3df0
    if (dh & 0x80)
        goto loc_1c3df7;
    ah = dh;
loc_1c3df7: // 0160:1c3df7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3e04;
    al = dl;
loc_1c3e04: // 0160:1c3e04
    if (dh & 0x80)
        goto loc_1c3e0b;
    ah = dh;
loc_1c3e0b: // 0160:1c3e0b
    eax = rol32(eax, 0x10);
loc_1c3e0e: // 0160:1c3e0e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3e10), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3e16));
    if (!(eax & 0x80808080))
        goto loc_1c3e92;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3e25));
    if (edx == 0x80808080)
        goto loc_1c3e56;
    if (dl & 0x80)
        goto loc_1c3e38;
    al = dl;
loc_1c3e38: // 0160:1c3e38
    if (dh & 0x80)
        goto loc_1c3e3f;
    ah = dh;
loc_1c3e3f: // 0160:1c3e3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3e4c;
    al = dl;
loc_1c3e4c: // 0160:1c3e4c
    if (dh & 0x80)
        goto loc_1c3e53;
    ah = dh;
loc_1c3e53: // 0160:1c3e53
    eax = rol32(eax, 0x10);
loc_1c3e56: // 0160:1c3e56
    if (!(eax & 0x80808080))
        goto loc_1c3e92;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3e61));
    if (edx == 0x80808080)
        goto loc_1c3e92;
    if (dl & 0x80)
        goto loc_1c3e74;
    al = dl;
loc_1c3e74: // 0160:1c3e74
    if (dh & 0x80)
        goto loc_1c3e7b;
    ah = dh;
loc_1c3e7b: // 0160:1c3e7b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3e88;
    al = dl;
loc_1c3e88: // 0160:1c3e88
    if (dh & 0x80)
        goto loc_1c3e8f;
    ah = dh;
loc_1c3e8f: // 0160:1c3e8f
    eax = rol32(eax, 0x10);
loc_1c3e92: // 0160:1c3e92
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3e94), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3e9a));
    if (!(eax & 0x80808080))
        goto loc_1c3f16;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3ea9));
    if (edx == 0x80808080)
        goto loc_1c3eda;
    if (dl & 0x80)
        goto loc_1c3ebc;
    al = dl;
loc_1c3ebc: // 0160:1c3ebc
    if (dh & 0x80)
        goto loc_1c3ec3;
    ah = dh;
loc_1c3ec3: // 0160:1c3ec3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3ed0;
    al = dl;
loc_1c3ed0: // 0160:1c3ed0
    if (dh & 0x80)
        goto loc_1c3ed7;
    ah = dh;
loc_1c3ed7: // 0160:1c3ed7
    eax = rol32(eax, 0x10);
loc_1c3eda: // 0160:1c3eda
    if (!(eax & 0x80808080))
        goto loc_1c3f16;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3ee5));
    if (edx == 0x80808080)
        goto loc_1c3f16;
    if (dl & 0x80)
        goto loc_1c3ef8;
    al = dl;
loc_1c3ef8: // 0160:1c3ef8
    if (dh & 0x80)
        goto loc_1c3eff;
    ah = dh;
loc_1c3eff: // 0160:1c3eff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3f0c;
    al = dl;
loc_1c3f0c: // 0160:1c3f0c
    if (dh & 0x80)
        goto loc_1c3f13;
    ah = dh;
loc_1c3f13: // 0160:1c3f13
    eax = rol32(eax, 0x10);
loc_1c3f16: // 0160:1c3f16
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3f18), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3f1e));
    if (!(eax & 0x80808080))
        goto loc_1c3f9a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3f2d));
    if (edx == 0x80808080)
        goto loc_1c3f5e;
    if (dl & 0x80)
        goto loc_1c3f40;
    al = dl;
loc_1c3f40: // 0160:1c3f40
    if (dh & 0x80)
        goto loc_1c3f47;
    ah = dh;
loc_1c3f47: // 0160:1c3f47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3f54;
    al = dl;
loc_1c3f54: // 0160:1c3f54
    if (dh & 0x80)
        goto loc_1c3f5b;
    ah = dh;
loc_1c3f5b: // 0160:1c3f5b
    eax = rol32(eax, 0x10);
loc_1c3f5e: // 0160:1c3f5e
    if (!(eax & 0x80808080))
        goto loc_1c3f9a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3f69));
    if (edx == 0x80808080)
        goto loc_1c3f9a;
    if (dl & 0x80)
        goto loc_1c3f7c;
    al = dl;
loc_1c3f7c: // 0160:1c3f7c
    if (dh & 0x80)
        goto loc_1c3f83;
    ah = dh;
loc_1c3f83: // 0160:1c3f83
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3f90;
    al = dl;
loc_1c3f90: // 0160:1c3f90
    if (dh & 0x80)
        goto loc_1c3f97;
    ah = dh;
loc_1c3f97: // 0160:1c3f97
    eax = rol32(eax, 0x10);
loc_1c3f9a: // 0160:1c3f9a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c3f9c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c3fa2));
    if (!(eax & 0x80808080))
        goto loc_1c401e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c3fb1));
    if (edx == 0x80808080)
        goto loc_1c3fe2;
    if (dl & 0x80)
        goto loc_1c3fc4;
    al = dl;
loc_1c3fc4: // 0160:1c3fc4
    if (dh & 0x80)
        goto loc_1c3fcb;
    ah = dh;
loc_1c3fcb: // 0160:1c3fcb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c3fd8;
    al = dl;
loc_1c3fd8: // 0160:1c3fd8
    if (dh & 0x80)
        goto loc_1c3fdf;
    ah = dh;
loc_1c3fdf: // 0160:1c3fdf
    eax = rol32(eax, 0x10);
loc_1c3fe2: // 0160:1c3fe2
    if (!(eax & 0x80808080))
        goto loc_1c401e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c3fed));
    if (edx == 0x80808080)
        goto loc_1c401e;
    if (dl & 0x80)
        goto loc_1c4000;
    al = dl;
loc_1c4000: // 0160:1c4000
    if (dh & 0x80)
        goto loc_1c4007;
    ah = dh;
loc_1c4007: // 0160:1c4007
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c4014;
    al = dl;
loc_1c4014: // 0160:1c4014
    if (dh & 0x80)
        goto loc_1c401b;
    ah = dh;
loc_1c401b: // 0160:1c401b
    eax = rol32(eax, 0x10);
loc_1c401e: // 0160:1c401e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c4020), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c4026));
    if (!(eax & 0x80808080))
        goto loc_1c40a2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c4035));
    if (edx == 0x80808080)
        goto loc_1c4066;
    if (dl & 0x80)
        goto loc_1c4048;
    al = dl;
loc_1c4048: // 0160:1c4048
    if (dh & 0x80)
        goto loc_1c404f;
    ah = dh;
loc_1c404f: // 0160:1c404f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c405c;
    al = dl;
loc_1c405c: // 0160:1c405c
    if (dh & 0x80)
        goto loc_1c4063;
    ah = dh;
loc_1c4063: // 0160:1c4063
    eax = rol32(eax, 0x10);
loc_1c4066: // 0160:1c4066
    if (!(eax & 0x80808080))
        goto loc_1c40a2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c4071));
    if (edx == 0x80808080)
        goto loc_1c40a2;
    if (dl & 0x80)
        goto loc_1c4084;
    al = dl;
loc_1c4084: // 0160:1c4084
    if (dh & 0x80)
        goto loc_1c408b;
    ah = dh;
loc_1c408b: // 0160:1c408b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c4098;
    al = dl;
loc_1c4098: // 0160:1c4098
    if (dh & 0x80)
        goto loc_1c409f;
    ah = dh;
loc_1c409f: // 0160:1c409f
    eax = rol32(eax, 0x10);
loc_1c40a2: // 0160:1c40a2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c40a4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c40aa));
    if (!(eax & 0x80808080))
        goto loc_1c4126;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c40b9));
    if (edx == 0x80808080)
        goto loc_1c40ea;
    if (dl & 0x80)
        goto loc_1c40cc;
    al = dl;
loc_1c40cc: // 0160:1c40cc
    if (dh & 0x80)
        goto loc_1c40d3;
    ah = dh;
loc_1c40d3: // 0160:1c40d3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c40e0;
    al = dl;
loc_1c40e0: // 0160:1c40e0
    if (dh & 0x80)
        goto loc_1c40e7;
    ah = dh;
loc_1c40e7: // 0160:1c40e7
    eax = rol32(eax, 0x10);
loc_1c40ea: // 0160:1c40ea
    if (!(eax & 0x80808080))
        goto loc_1c4126;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c40f5));
    if (edx == 0x80808080)
        goto loc_1c4126;
    if (dl & 0x80)
        goto loc_1c4108;
    al = dl;
loc_1c4108: // 0160:1c4108
    if (dh & 0x80)
        goto loc_1c410f;
    ah = dh;
loc_1c410f: // 0160:1c410f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c411c;
    al = dl;
loc_1c411c: // 0160:1c411c
    if (dh & 0x80)
        goto loc_1c4123;
    ah = dh;
loc_1c4123: // 0160:1c4123
    eax = rol32(eax, 0x10);
loc_1c4126: // 0160:1c4126
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c4128), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c412e));
    if (!(eax & 0x80808080))
        goto loc_1c41aa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c413d));
    if (edx == 0x80808080)
        goto loc_1c416e;
    if (dl & 0x80)
        goto loc_1c4150;
    al = dl;
loc_1c4150: // 0160:1c4150
    if (dh & 0x80)
        goto loc_1c4157;
    ah = dh;
loc_1c4157: // 0160:1c4157
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c4164;
    al = dl;
loc_1c4164: // 0160:1c4164
    if (dh & 0x80)
        goto loc_1c416b;
    ah = dh;
loc_1c416b: // 0160:1c416b
    eax = rol32(eax, 0x10);
loc_1c416e: // 0160:1c416e
    if (!(eax & 0x80808080))
        goto loc_1c41aa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c4179));
    if (edx == 0x80808080)
        goto loc_1c41aa;
    if (dl & 0x80)
        goto loc_1c418c;
    al = dl;
loc_1c418c: // 0160:1c418c
    if (dh & 0x80)
        goto loc_1c4193;
    ah = dh;
loc_1c4193: // 0160:1c4193
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c41a0;
    al = dl;
loc_1c41a0: // 0160:1c41a0
    if (dh & 0x80)
        goto loc_1c41a7;
    ah = dh;
loc_1c41a7: // 0160:1c41a7
    eax = rol32(eax, 0x10);
loc_1c41aa: // 0160:1c41aa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c41ac), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c41b2));
    if (!(eax & 0x80808080))
        goto loc_1c422e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c41c1));
    if (edx == 0x80808080)
        goto loc_1c41f2;
    if (dl & 0x80)
        goto loc_1c41d4;
    al = dl;
loc_1c41d4: // 0160:1c41d4
    if (dh & 0x80)
        goto loc_1c41db;
    ah = dh;
loc_1c41db: // 0160:1c41db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c41e8;
    al = dl;
loc_1c41e8: // 0160:1c41e8
    if (dh & 0x80)
        goto loc_1c41ef;
    ah = dh;
loc_1c41ef: // 0160:1c41ef
    eax = rol32(eax, 0x10);
loc_1c41f2: // 0160:1c41f2
    if (!(eax & 0x80808080))
        goto loc_1c422e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c41fd));
    if (edx == 0x80808080)
        goto loc_1c422e;
    if (dl & 0x80)
        goto loc_1c4210;
    al = dl;
loc_1c4210: // 0160:1c4210
    if (dh & 0x80)
        goto loc_1c4217;
    ah = dh;
loc_1c4217: // 0160:1c4217
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c4224;
    al = dl;
loc_1c4224: // 0160:1c4224
    if (dh & 0x80)
        goto loc_1c422b;
    ah = dh;
loc_1c422b: // 0160:1c422b
    eax = rol32(eax, 0x10);
loc_1c422e: // 0160:1c422e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c4230), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c4236));
    if (!(eax & 0x80808080))
        goto loc_1c42b2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c4245));
    if (edx == 0x80808080)
        goto loc_1c4276;
    if (dl & 0x80)
        goto loc_1c4258;
    al = dl;
loc_1c4258: // 0160:1c4258
    if (dh & 0x80)
        goto loc_1c425f;
    ah = dh;
loc_1c425f: // 0160:1c425f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c426c;
    al = dl;
loc_1c426c: // 0160:1c426c
    if (dh & 0x80)
        goto loc_1c4273;
    ah = dh;
loc_1c4273: // 0160:1c4273
    eax = rol32(eax, 0x10);
loc_1c4276: // 0160:1c4276
    if (!(eax & 0x80808080))
        goto loc_1c42b2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c4281));
    if (edx == 0x80808080)
        goto loc_1c42b2;
    if (dl & 0x80)
        goto loc_1c4294;
    al = dl;
loc_1c4294: // 0160:1c4294
    if (dh & 0x80)
        goto loc_1c429b;
    ah = dh;
loc_1c429b: // 0160:1c429b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c42a8;
    al = dl;
loc_1c42a8: // 0160:1c42a8
    if (dh & 0x80)
        goto loc_1c42af;
    ah = dh;
loc_1c42af: // 0160:1c42af
    eax = rol32(eax, 0x10);
loc_1c42b2: // 0160:1c42b2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c42b4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x1c42ba));
    if (!(eax & 0x80808080))
        goto loc_1c4336;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x1c42c9));
    if (edx == 0x80808080)
        goto loc_1c42fa;
    if (dl & 0x80)
        goto loc_1c42dc;
    al = dl;
loc_1c42dc: // 0160:1c42dc
    if (dh & 0x80)
        goto loc_1c42e3;
    ah = dh;
loc_1c42e3: // 0160:1c42e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c42f0;
    al = dl;
loc_1c42f0: // 0160:1c42f0
    if (dh & 0x80)
        goto loc_1c42f7;
    ah = dh;
loc_1c42f7: // 0160:1c42f7
    eax = rol32(eax, 0x10);
loc_1c42fa: // 0160:1c42fa
    if (!(eax & 0x80808080))
        goto loc_1c4336;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x1c4305));
    if (edx == 0x80808080)
        goto loc_1c4336;
    if (dl & 0x80)
        goto loc_1c4318;
    al = dl;
loc_1c4318: // 0160:1c4318
    if (dh & 0x80)
        goto loc_1c431f;
    ah = dh;
loc_1c431f: // 0160:1c431f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_1c432c;
    al = dl;
loc_1c432c: // 0160:1c432c
    if (dh & 0x80)
        goto loc_1c4333;
    ah = dh;
loc_1c4333: // 0160:1c4333
    eax = rol32(eax, 0x10);
loc_1c4336: // 0160:1c4336
    memoryASet32(ds, edi + memoryAGet32(cs, 0x1c4338), eax);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_1c19fc;
loc_1c4351: // 0160:1c4351
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c4354() // 0160:1c4354 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c4368;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_1c4368: // 0160:1c4368
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c4375;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_1c4375: // 0160:1c4375
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c4382;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_1c4382: // 0160:1c4382
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    esi = 0;
    edi = 0;
loc_1c438e: // 0160:1c438e
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 1852570, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 1852591, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 1852632, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_1c43c5;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_1c43c5: // 0160:1c43c5
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_1c43d3;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_1c43d3: // 0160:1c43d3
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_1c43e1;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_1c43e1: // 0160:1c43e1
    edx = 0;
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 1852576, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 1852597, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 1852638, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_1c441a;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_1c441a: // 0160:1c441a
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_1c4428;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_1c4428: // 0160:1c4428
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_1c4436;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_1c4436: // 0160:1c4436
    edx = 0;
    esi += 0x00000066;
    ecx += 0x00000002;
    if (ecx != 0x00000140)
        goto loc_1c438e;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_1c445a;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_1c445a: // 0160:1c445a
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_1c4467;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_1c4467: // 0160:1c4467
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_1c4474;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_1c4474: // 0160:1c4474
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    memoryASet32(ss, ebp + -4, 0x00000000);
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_1c8481;
    goto loc_1c4493;
loc_1c4493: // 0160:1c4493
    goto loc_1c4495;
loc_1c4495: // 0160:1c4495
    goto loc_1c4498;
    // gap 1 bytes
loc_1c4498: // 0160:1c4498
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c449a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c44a0));
    if (!(eax & 0x00008080))
        goto loc_1c44f7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c44af));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c44b5));
    if (dx == 0x8080)
        goto loc_1c44ce;
    if (dl & 0x80)
        goto loc_1c44c7;
    al = dl;
loc_1c44c7: // 0160:1c44c7
    if (dh & 0x80)
        goto loc_1c44ce;
    ah = dh;
loc_1c44ce: // 0160:1c44ce
    if (!(ax & 0x8080))
        goto loc_1c44f7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c44d8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c44de));
    if (dx == 0x8080)
        goto loc_1c44f7;
    if (dl & 0x80)
        goto loc_1c44f0;
    al = dl;
loc_1c44f0: // 0160:1c44f0
    if (dh & 0x80)
        goto loc_1c44f7;
    ah = dh;
loc_1c44f7: // 0160:1c44f7
    memoryASet16(ds, edi, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4500));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4506));
    if (!(eax & 0x00008080))
        goto loc_1c455d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4515));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c451b));
    if (dx == 0x8080)
        goto loc_1c4534;
    if (dl & 0x80)
        goto loc_1c452d;
    al = dl;
loc_1c452d: // 0160:1c452d
    if (dh & 0x80)
        goto loc_1c4534;
    ah = dh;
loc_1c4534: // 0160:1c4534
    if (!(ax & 0x8080))
        goto loc_1c455d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c453e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4544));
    if (dx == 0x8080)
        goto loc_1c455d;
    if (dl & 0x80)
        goto loc_1c4556;
    al = dl;
loc_1c4556: // 0160:1c4556
    if (dh & 0x80)
        goto loc_1c455d;
    ah = dh;
loc_1c455d: // 0160:1c455d
    memoryASet16(ds, edi + 2, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4566));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c456c));
    if (!(eax & 0x00008080))
        goto loc_1c45c3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c457b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4581));
    if (dx == 0x8080)
        goto loc_1c459a;
    if (dl & 0x80)
        goto loc_1c4593;
    al = dl;
loc_1c4593: // 0160:1c4593
    if (dh & 0x80)
        goto loc_1c459a;
    ah = dh;
loc_1c459a: // 0160:1c459a
    if (!(ax & 0x8080))
        goto loc_1c45c3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c45a4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c45aa));
    if (dx == 0x8080)
        goto loc_1c45c3;
    if (dl & 0x80)
        goto loc_1c45bc;
    al = dl;
loc_1c45bc: // 0160:1c45bc
    if (dh & 0x80)
        goto loc_1c45c3;
    ah = dh;
loc_1c45c3: // 0160:1c45c3
    memoryASet16(ds, edi + 4, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c45cc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c45d2));
    if (!(eax & 0x00008080))
        goto loc_1c4629;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c45e1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c45e7));
    if (dx == 0x8080)
        goto loc_1c4600;
    if (dl & 0x80)
        goto loc_1c45f9;
    al = dl;
loc_1c45f9: // 0160:1c45f9
    if (dh & 0x80)
        goto loc_1c4600;
    ah = dh;
loc_1c4600: // 0160:1c4600
    if (!(ax & 0x8080))
        goto loc_1c4629;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c460a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4610));
    if (dx == 0x8080)
        goto loc_1c4629;
    if (dl & 0x80)
        goto loc_1c4622;
    al = dl;
loc_1c4622: // 0160:1c4622
    if (dh & 0x80)
        goto loc_1c4629;
    ah = dh;
loc_1c4629: // 0160:1c4629
    memoryASet16(ds, edi + 6, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4632));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4638));
    if (!(eax & 0x00008080))
        goto loc_1c468f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4647));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c464d));
    if (dx == 0x8080)
        goto loc_1c4666;
    if (dl & 0x80)
        goto loc_1c465f;
    al = dl;
loc_1c465f: // 0160:1c465f
    if (dh & 0x80)
        goto loc_1c4666;
    ah = dh;
loc_1c4666: // 0160:1c4666
    if (!(ax & 0x8080))
        goto loc_1c468f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4670));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4676));
    if (dx == 0x8080)
        goto loc_1c468f;
    if (dl & 0x80)
        goto loc_1c4688;
    al = dl;
loc_1c4688: // 0160:1c4688
    if (dh & 0x80)
        goto loc_1c468f;
    ah = dh;
loc_1c468f: // 0160:1c468f
    memoryASet16(ds, edi + 8, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4698));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c469e));
    if (!(eax & 0x00008080))
        goto loc_1c46f5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c46ad));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c46b3));
    if (dx == 0x8080)
        goto loc_1c46cc;
    if (dl & 0x80)
        goto loc_1c46c5;
    al = dl;
loc_1c46c5: // 0160:1c46c5
    if (dh & 0x80)
        goto loc_1c46cc;
    ah = dh;
loc_1c46cc: // 0160:1c46cc
    if (!(ax & 0x8080))
        goto loc_1c46f5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c46d6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c46dc));
    if (dx == 0x8080)
        goto loc_1c46f5;
    if (dl & 0x80)
        goto loc_1c46ee;
    al = dl;
loc_1c46ee: // 0160:1c46ee
    if (dh & 0x80)
        goto loc_1c46f5;
    ah = dh;
loc_1c46f5: // 0160:1c46f5
    memoryASet16(ds, edi + 10, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c46fe));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4704));
    if (!(eax & 0x00008080))
        goto loc_1c475b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4713));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4719));
    if (dx == 0x8080)
        goto loc_1c4732;
    if (dl & 0x80)
        goto loc_1c472b;
    al = dl;
loc_1c472b: // 0160:1c472b
    if (dh & 0x80)
        goto loc_1c4732;
    ah = dh;
loc_1c4732: // 0160:1c4732
    if (!(ax & 0x8080))
        goto loc_1c475b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c473c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4742));
    if (dx == 0x8080)
        goto loc_1c475b;
    if (dl & 0x80)
        goto loc_1c4754;
    al = dl;
loc_1c4754: // 0160:1c4754
    if (dh & 0x80)
        goto loc_1c475b;
    ah = dh;
loc_1c475b: // 0160:1c475b
    memoryASet16(ds, edi + 12, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4764));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c476a));
    if (!(eax & 0x00008080))
        goto loc_1c47c1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4779));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c477f));
    if (dx == 0x8080)
        goto loc_1c4798;
    if (dl & 0x80)
        goto loc_1c4791;
    al = dl;
loc_1c4791: // 0160:1c4791
    if (dh & 0x80)
        goto loc_1c4798;
    ah = dh;
loc_1c4798: // 0160:1c4798
    if (!(ax & 0x8080))
        goto loc_1c47c1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c47a2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c47a8));
    if (dx == 0x8080)
        goto loc_1c47c1;
    if (dl & 0x80)
        goto loc_1c47ba;
    al = dl;
loc_1c47ba: // 0160:1c47ba
    if (dh & 0x80)
        goto loc_1c47c1;
    ah = dh;
loc_1c47c1: // 0160:1c47c1
    memoryASet16(ds, edi + 14, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c47ca));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c47d0));
    if (!(eax & 0x00008080))
        goto loc_1c4827;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c47df));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c47e5));
    if (dx == 0x8080)
        goto loc_1c47fe;
    if (dl & 0x80)
        goto loc_1c47f7;
    al = dl;
loc_1c47f7: // 0160:1c47f7
    if (dh & 0x80)
        goto loc_1c47fe;
    ah = dh;
loc_1c47fe: // 0160:1c47fe
    if (!(ax & 0x8080))
        goto loc_1c4827;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4808));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c480e));
    if (dx == 0x8080)
        goto loc_1c4827;
    if (dl & 0x80)
        goto loc_1c4820;
    al = dl;
loc_1c4820: // 0160:1c4820
    if (dh & 0x80)
        goto loc_1c4827;
    ah = dh;
loc_1c4827: // 0160:1c4827
    memoryASet16(ds, edi + 16, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4830));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4836));
    if (!(eax & 0x00008080))
        goto loc_1c488d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4845));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c484b));
    if (dx == 0x8080)
        goto loc_1c4864;
    if (dl & 0x80)
        goto loc_1c485d;
    al = dl;
loc_1c485d: // 0160:1c485d
    if (dh & 0x80)
        goto loc_1c4864;
    ah = dh;
loc_1c4864: // 0160:1c4864
    if (!(ax & 0x8080))
        goto loc_1c488d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c486e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4874));
    if (dx == 0x8080)
        goto loc_1c488d;
    if (dl & 0x80)
        goto loc_1c4886;
    al = dl;
loc_1c4886: // 0160:1c4886
    if (dh & 0x80)
        goto loc_1c488d;
    ah = dh;
loc_1c488d: // 0160:1c488d
    memoryASet16(ds, edi + 18, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4896));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c489c));
    if (!(eax & 0x00008080))
        goto loc_1c48f3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c48ab));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c48b1));
    if (dx == 0x8080)
        goto loc_1c48ca;
    if (dl & 0x80)
        goto loc_1c48c3;
    al = dl;
loc_1c48c3: // 0160:1c48c3
    if (dh & 0x80)
        goto loc_1c48ca;
    ah = dh;
loc_1c48ca: // 0160:1c48ca
    if (!(ax & 0x8080))
        goto loc_1c48f3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c48d4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c48da));
    if (dx == 0x8080)
        goto loc_1c48f3;
    if (dl & 0x80)
        goto loc_1c48ec;
    al = dl;
loc_1c48ec: // 0160:1c48ec
    if (dh & 0x80)
        goto loc_1c48f3;
    ah = dh;
loc_1c48f3: // 0160:1c48f3
    memoryASet16(ds, edi + 20, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c48fc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4902));
    if (!(eax & 0x00008080))
        goto loc_1c4959;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4911));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4917));
    if (dx == 0x8080)
        goto loc_1c4930;
    if (dl & 0x80)
        goto loc_1c4929;
    al = dl;
loc_1c4929: // 0160:1c4929
    if (dh & 0x80)
        goto loc_1c4930;
    ah = dh;
loc_1c4930: // 0160:1c4930
    if (!(ax & 0x8080))
        goto loc_1c4959;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c493a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4940));
    if (dx == 0x8080)
        goto loc_1c4959;
    if (dl & 0x80)
        goto loc_1c4952;
    al = dl;
loc_1c4952: // 0160:1c4952
    if (dh & 0x80)
        goto loc_1c4959;
    ah = dh;
loc_1c4959: // 0160:1c4959
    memoryASet16(ds, edi + 22, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4962));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4968));
    if (!(eax & 0x00008080))
        goto loc_1c49bf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4977));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c497d));
    if (dx == 0x8080)
        goto loc_1c4996;
    if (dl & 0x80)
        goto loc_1c498f;
    al = dl;
loc_1c498f: // 0160:1c498f
    if (dh & 0x80)
        goto loc_1c4996;
    ah = dh;
loc_1c4996: // 0160:1c4996
    if (!(ax & 0x8080))
        goto loc_1c49bf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c49a0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c49a6));
    if (dx == 0x8080)
        goto loc_1c49bf;
    if (dl & 0x80)
        goto loc_1c49b8;
    al = dl;
loc_1c49b8: // 0160:1c49b8
    if (dh & 0x80)
        goto loc_1c49bf;
    ah = dh;
loc_1c49bf: // 0160:1c49bf
    memoryASet16(ds, edi + 24, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c49c8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c49ce));
    if (!(eax & 0x00008080))
        goto loc_1c4a25;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c49dd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c49e3));
    if (dx == 0x8080)
        goto loc_1c49fc;
    if (dl & 0x80)
        goto loc_1c49f5;
    al = dl;
loc_1c49f5: // 0160:1c49f5
    if (dh & 0x80)
        goto loc_1c49fc;
    ah = dh;
loc_1c49fc: // 0160:1c49fc
    if (!(ax & 0x8080))
        goto loc_1c4a25;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4a06));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4a0c));
    if (dx == 0x8080)
        goto loc_1c4a25;
    if (dl & 0x80)
        goto loc_1c4a1e;
    al = dl;
loc_1c4a1e: // 0160:1c4a1e
    if (dh & 0x80)
        goto loc_1c4a25;
    ah = dh;
loc_1c4a25: // 0160:1c4a25
    memoryASet16(ds, edi + 26, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4a2e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4a34));
    if (!(eax & 0x00008080))
        goto loc_1c4a8b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4a43));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4a49));
    if (dx == 0x8080)
        goto loc_1c4a62;
    if (dl & 0x80)
        goto loc_1c4a5b;
    al = dl;
loc_1c4a5b: // 0160:1c4a5b
    if (dh & 0x80)
        goto loc_1c4a62;
    ah = dh;
loc_1c4a62: // 0160:1c4a62
    if (!(ax & 0x8080))
        goto loc_1c4a8b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4a6c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4a72));
    if (dx == 0x8080)
        goto loc_1c4a8b;
    if (dl & 0x80)
        goto loc_1c4a84;
    al = dl;
loc_1c4a84: // 0160:1c4a84
    if (dh & 0x80)
        goto loc_1c4a8b;
    ah = dh;
loc_1c4a8b: // 0160:1c4a8b
    memoryASet16(ds, edi + 28, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4a94));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4a9a));
    if (!(eax & 0x00008080))
        goto loc_1c4af1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4aa9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4aaf));
    if (dx == 0x8080)
        goto loc_1c4ac8;
    if (dl & 0x80)
        goto loc_1c4ac1;
    al = dl;
loc_1c4ac1: // 0160:1c4ac1
    if (dh & 0x80)
        goto loc_1c4ac8;
    ah = dh;
loc_1c4ac8: // 0160:1c4ac8
    if (!(ax & 0x8080))
        goto loc_1c4af1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4ad2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4ad8));
    if (dx == 0x8080)
        goto loc_1c4af1;
    if (dl & 0x80)
        goto loc_1c4aea;
    al = dl;
loc_1c4aea: // 0160:1c4aea
    if (dh & 0x80)
        goto loc_1c4af1;
    ah = dh;
loc_1c4af1: // 0160:1c4af1
    memoryASet16(ds, edi + 30, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4afa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4b00));
    if (!(eax & 0x00008080))
        goto loc_1c4b57;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4b0f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4b15));
    if (dx == 0x8080)
        goto loc_1c4b2e;
    if (dl & 0x80)
        goto loc_1c4b27;
    al = dl;
loc_1c4b27: // 0160:1c4b27
    if (dh & 0x80)
        goto loc_1c4b2e;
    ah = dh;
loc_1c4b2e: // 0160:1c4b2e
    if (!(ax & 0x8080))
        goto loc_1c4b57;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4b38));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4b3e));
    if (dx == 0x8080)
        goto loc_1c4b57;
    if (dl & 0x80)
        goto loc_1c4b50;
    al = dl;
loc_1c4b50: // 0160:1c4b50
    if (dh & 0x80)
        goto loc_1c4b57;
    ah = dh;
loc_1c4b57: // 0160:1c4b57
    memoryASet16(ds, edi + 32, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4b60));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4b66));
    if (!(eax & 0x00008080))
        goto loc_1c4bbd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4b75));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4b7b));
    if (dx == 0x8080)
        goto loc_1c4b94;
    if (dl & 0x80)
        goto loc_1c4b8d;
    al = dl;
loc_1c4b8d: // 0160:1c4b8d
    if (dh & 0x80)
        goto loc_1c4b94;
    ah = dh;
loc_1c4b94: // 0160:1c4b94
    if (!(ax & 0x8080))
        goto loc_1c4bbd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4b9e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4ba4));
    if (dx == 0x8080)
        goto loc_1c4bbd;
    if (dl & 0x80)
        goto loc_1c4bb6;
    al = dl;
loc_1c4bb6: // 0160:1c4bb6
    if (dh & 0x80)
        goto loc_1c4bbd;
    ah = dh;
loc_1c4bbd: // 0160:1c4bbd
    memoryASet16(ds, edi + 34, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4bc6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4bcc));
    if (!(eax & 0x00008080))
        goto loc_1c4c23;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4bdb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4be1));
    if (dx == 0x8080)
        goto loc_1c4bfa;
    if (dl & 0x80)
        goto loc_1c4bf3;
    al = dl;
loc_1c4bf3: // 0160:1c4bf3
    if (dh & 0x80)
        goto loc_1c4bfa;
    ah = dh;
loc_1c4bfa: // 0160:1c4bfa
    if (!(ax & 0x8080))
        goto loc_1c4c23;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4c04));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4c0a));
    if (dx == 0x8080)
        goto loc_1c4c23;
    if (dl & 0x80)
        goto loc_1c4c1c;
    al = dl;
loc_1c4c1c: // 0160:1c4c1c
    if (dh & 0x80)
        goto loc_1c4c23;
    ah = dh;
loc_1c4c23: // 0160:1c4c23
    memoryASet16(ds, edi + 36, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4c2c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4c32));
    if (!(eax & 0x00008080))
        goto loc_1c4c89;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4c41));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4c47));
    if (dx == 0x8080)
        goto loc_1c4c60;
    if (dl & 0x80)
        goto loc_1c4c59;
    al = dl;
loc_1c4c59: // 0160:1c4c59
    if (dh & 0x80)
        goto loc_1c4c60;
    ah = dh;
loc_1c4c60: // 0160:1c4c60
    if (!(ax & 0x8080))
        goto loc_1c4c89;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4c6a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4c70));
    if (dx == 0x8080)
        goto loc_1c4c89;
    if (dl & 0x80)
        goto loc_1c4c82;
    al = dl;
loc_1c4c82: // 0160:1c4c82
    if (dh & 0x80)
        goto loc_1c4c89;
    ah = dh;
loc_1c4c89: // 0160:1c4c89
    memoryASet16(ds, edi + 38, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4c92));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4c98));
    if (!(eax & 0x00008080))
        goto loc_1c4cef;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4ca7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4cad));
    if (dx == 0x8080)
        goto loc_1c4cc6;
    if (dl & 0x80)
        goto loc_1c4cbf;
    al = dl;
loc_1c4cbf: // 0160:1c4cbf
    if (dh & 0x80)
        goto loc_1c4cc6;
    ah = dh;
loc_1c4cc6: // 0160:1c4cc6
    if (!(ax & 0x8080))
        goto loc_1c4cef;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4cd0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4cd6));
    if (dx == 0x8080)
        goto loc_1c4cef;
    if (dl & 0x80)
        goto loc_1c4ce8;
    al = dl;
loc_1c4ce8: // 0160:1c4ce8
    if (dh & 0x80)
        goto loc_1c4cef;
    ah = dh;
loc_1c4cef: // 0160:1c4cef
    memoryASet16(ds, edi + 40, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4cf8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4cfe));
    if (!(eax & 0x00008080))
        goto loc_1c4d55;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4d0d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4d13));
    if (dx == 0x8080)
        goto loc_1c4d2c;
    if (dl & 0x80)
        goto loc_1c4d25;
    al = dl;
loc_1c4d25: // 0160:1c4d25
    if (dh & 0x80)
        goto loc_1c4d2c;
    ah = dh;
loc_1c4d2c: // 0160:1c4d2c
    if (!(ax & 0x8080))
        goto loc_1c4d55;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4d36));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4d3c));
    if (dx == 0x8080)
        goto loc_1c4d55;
    if (dl & 0x80)
        goto loc_1c4d4e;
    al = dl;
loc_1c4d4e: // 0160:1c4d4e
    if (dh & 0x80)
        goto loc_1c4d55;
    ah = dh;
loc_1c4d55: // 0160:1c4d55
    memoryASet16(ds, edi + 42, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4d5e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4d64));
    if (!(eax & 0x00008080))
        goto loc_1c4dbb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4d73));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4d79));
    if (dx == 0x8080)
        goto loc_1c4d92;
    if (dl & 0x80)
        goto loc_1c4d8b;
    al = dl;
loc_1c4d8b: // 0160:1c4d8b
    if (dh & 0x80)
        goto loc_1c4d92;
    ah = dh;
loc_1c4d92: // 0160:1c4d92
    if (!(ax & 0x8080))
        goto loc_1c4dbb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4d9c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4da2));
    if (dx == 0x8080)
        goto loc_1c4dbb;
    if (dl & 0x80)
        goto loc_1c4db4;
    al = dl;
loc_1c4db4: // 0160:1c4db4
    if (dh & 0x80)
        goto loc_1c4dbb;
    ah = dh;
loc_1c4dbb: // 0160:1c4dbb
    memoryASet16(ds, edi + 44, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4dc4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4dca));
    if (!(eax & 0x00008080))
        goto loc_1c4e21;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4dd9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4ddf));
    if (dx == 0x8080)
        goto loc_1c4df8;
    if (dl & 0x80)
        goto loc_1c4df1;
    al = dl;
loc_1c4df1: // 0160:1c4df1
    if (dh & 0x80)
        goto loc_1c4df8;
    ah = dh;
loc_1c4df8: // 0160:1c4df8
    if (!(ax & 0x8080))
        goto loc_1c4e21;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4e02));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4e08));
    if (dx == 0x8080)
        goto loc_1c4e21;
    if (dl & 0x80)
        goto loc_1c4e1a;
    al = dl;
loc_1c4e1a: // 0160:1c4e1a
    if (dh & 0x80)
        goto loc_1c4e21;
    ah = dh;
loc_1c4e21: // 0160:1c4e21
    memoryASet16(ds, edi + 46, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4e2a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4e30));
    if (!(eax & 0x00008080))
        goto loc_1c4e87;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4e3f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4e45));
    if (dx == 0x8080)
        goto loc_1c4e5e;
    if (dl & 0x80)
        goto loc_1c4e57;
    al = dl;
loc_1c4e57: // 0160:1c4e57
    if (dh & 0x80)
        goto loc_1c4e5e;
    ah = dh;
loc_1c4e5e: // 0160:1c4e5e
    if (!(ax & 0x8080))
        goto loc_1c4e87;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4e68));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4e6e));
    if (dx == 0x8080)
        goto loc_1c4e87;
    if (dl & 0x80)
        goto loc_1c4e80;
    al = dl;
loc_1c4e80: // 0160:1c4e80
    if (dh & 0x80)
        goto loc_1c4e87;
    ah = dh;
loc_1c4e87: // 0160:1c4e87
    memoryASet16(ds, edi + 48, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4e90));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4e96));
    if (!(eax & 0x00008080))
        goto loc_1c4eed;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4ea5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4eab));
    if (dx == 0x8080)
        goto loc_1c4ec4;
    if (dl & 0x80)
        goto loc_1c4ebd;
    al = dl;
loc_1c4ebd: // 0160:1c4ebd
    if (dh & 0x80)
        goto loc_1c4ec4;
    ah = dh;
loc_1c4ec4: // 0160:1c4ec4
    if (!(ax & 0x8080))
        goto loc_1c4eed;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4ece));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4ed4));
    if (dx == 0x8080)
        goto loc_1c4eed;
    if (dl & 0x80)
        goto loc_1c4ee6;
    al = dl;
loc_1c4ee6: // 0160:1c4ee6
    if (dh & 0x80)
        goto loc_1c4eed;
    ah = dh;
loc_1c4eed: // 0160:1c4eed
    memoryASet16(ds, edi + 50, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4ef6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4efc));
    if (!(eax & 0x00008080))
        goto loc_1c4f53;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4f0b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4f11));
    if (dx == 0x8080)
        goto loc_1c4f2a;
    if (dl & 0x80)
        goto loc_1c4f23;
    al = dl;
loc_1c4f23: // 0160:1c4f23
    if (dh & 0x80)
        goto loc_1c4f2a;
    ah = dh;
loc_1c4f2a: // 0160:1c4f2a
    if (!(ax & 0x8080))
        goto loc_1c4f53;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4f34));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4f3a));
    if (dx == 0x8080)
        goto loc_1c4f53;
    if (dl & 0x80)
        goto loc_1c4f4c;
    al = dl;
loc_1c4f4c: // 0160:1c4f4c
    if (dh & 0x80)
        goto loc_1c4f53;
    ah = dh;
loc_1c4f53: // 0160:1c4f53
    memoryASet16(ds, edi + 52, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4f5c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4f62));
    if (!(eax & 0x00008080))
        goto loc_1c4fb9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4f71));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4f77));
    if (dx == 0x8080)
        goto loc_1c4f90;
    if (dl & 0x80)
        goto loc_1c4f89;
    al = dl;
loc_1c4f89: // 0160:1c4f89
    if (dh & 0x80)
        goto loc_1c4f90;
    ah = dh;
loc_1c4f90: // 0160:1c4f90
    if (!(ax & 0x8080))
        goto loc_1c4fb9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4f9a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c4fa0));
    if (dx == 0x8080)
        goto loc_1c4fb9;
    if (dl & 0x80)
        goto loc_1c4fb2;
    al = dl;
loc_1c4fb2: // 0160:1c4fb2
    if (dh & 0x80)
        goto loc_1c4fb9;
    ah = dh;
loc_1c4fb9: // 0160:1c4fb9
    memoryASet16(ds, edi + 54, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4fc2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c4fc8));
    if (!(eax & 0x00008080))
        goto loc_1c501f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4fd7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c4fdd));
    if (dx == 0x8080)
        goto loc_1c4ff6;
    if (dl & 0x80)
        goto loc_1c4fef;
    al = dl;
loc_1c4fef: // 0160:1c4fef
    if (dh & 0x80)
        goto loc_1c4ff6;
    ah = dh;
loc_1c4ff6: // 0160:1c4ff6
    if (!(ax & 0x8080))
        goto loc_1c501f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5000));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5006));
    if (dx == 0x8080)
        goto loc_1c501f;
    if (dl & 0x80)
        goto loc_1c5018;
    al = dl;
loc_1c5018: // 0160:1c5018
    if (dh & 0x80)
        goto loc_1c501f;
    ah = dh;
loc_1c501f: // 0160:1c501f
    memoryASet16(ds, edi + 56, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5028));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c502e));
    if (!(eax & 0x00008080))
        goto loc_1c5085;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c503d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5043));
    if (dx == 0x8080)
        goto loc_1c505c;
    if (dl & 0x80)
        goto loc_1c5055;
    al = dl;
loc_1c5055: // 0160:1c5055
    if (dh & 0x80)
        goto loc_1c505c;
    ah = dh;
loc_1c505c: // 0160:1c505c
    if (!(ax & 0x8080))
        goto loc_1c5085;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5066));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c506c));
    if (dx == 0x8080)
        goto loc_1c5085;
    if (dl & 0x80)
        goto loc_1c507e;
    al = dl;
loc_1c507e: // 0160:1c507e
    if (dh & 0x80)
        goto loc_1c5085;
    ah = dh;
loc_1c5085: // 0160:1c5085
    memoryASet16(ds, edi + 58, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c508e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5094));
    if (!(eax & 0x00008080))
        goto loc_1c50eb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c50a3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c50a9));
    if (dx == 0x8080)
        goto loc_1c50c2;
    if (dl & 0x80)
        goto loc_1c50bb;
    al = dl;
loc_1c50bb: // 0160:1c50bb
    if (dh & 0x80)
        goto loc_1c50c2;
    ah = dh;
loc_1c50c2: // 0160:1c50c2
    if (!(ax & 0x8080))
        goto loc_1c50eb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c50cc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c50d2));
    if (dx == 0x8080)
        goto loc_1c50eb;
    if (dl & 0x80)
        goto loc_1c50e4;
    al = dl;
loc_1c50e4: // 0160:1c50e4
    if (dh & 0x80)
        goto loc_1c50eb;
    ah = dh;
loc_1c50eb: // 0160:1c50eb
    memoryASet16(ds, edi + 60, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c50f4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c50fa));
    if (!(eax & 0x00008080))
        goto loc_1c5151;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5109));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c510f));
    if (dx == 0x8080)
        goto loc_1c5128;
    if (dl & 0x80)
        goto loc_1c5121;
    al = dl;
loc_1c5121: // 0160:1c5121
    if (dh & 0x80)
        goto loc_1c5128;
    ah = dh;
loc_1c5128: // 0160:1c5128
    if (!(ax & 0x8080))
        goto loc_1c5151;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5132));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5138));
    if (dx == 0x8080)
        goto loc_1c5151;
    if (dl & 0x80)
        goto loc_1c514a;
    al = dl;
loc_1c514a: // 0160:1c514a
    if (dh & 0x80)
        goto loc_1c5151;
    ah = dh;
loc_1c5151: // 0160:1c5151
    memoryASet16(ds, edi + 62, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c515a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5160));
    if (!(eax & 0x00008080))
        goto loc_1c51b7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c516f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5175));
    if (dx == 0x8080)
        goto loc_1c518e;
    if (dl & 0x80)
        goto loc_1c5187;
    al = dl;
loc_1c5187: // 0160:1c5187
    if (dh & 0x80)
        goto loc_1c518e;
    ah = dh;
loc_1c518e: // 0160:1c518e
    if (!(ax & 0x8080))
        goto loc_1c51b7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5198));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c519e));
    if (dx == 0x8080)
        goto loc_1c51b7;
    if (dl & 0x80)
        goto loc_1c51b0;
    al = dl;
loc_1c51b0: // 0160:1c51b0
    if (dh & 0x80)
        goto loc_1c51b7;
    ah = dh;
loc_1c51b7: // 0160:1c51b7
    memoryASet16(ds, edi + 64, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c51c0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c51c6));
    if (!(eax & 0x00008080))
        goto loc_1c521d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c51d5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c51db));
    if (dx == 0x8080)
        goto loc_1c51f4;
    if (dl & 0x80)
        goto loc_1c51ed;
    al = dl;
loc_1c51ed: // 0160:1c51ed
    if (dh & 0x80)
        goto loc_1c51f4;
    ah = dh;
loc_1c51f4: // 0160:1c51f4
    if (!(ax & 0x8080))
        goto loc_1c521d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c51fe));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5204));
    if (dx == 0x8080)
        goto loc_1c521d;
    if (dl & 0x80)
        goto loc_1c5216;
    al = dl;
loc_1c5216: // 0160:1c5216
    if (dh & 0x80)
        goto loc_1c521d;
    ah = dh;
loc_1c521d: // 0160:1c521d
    memoryASet16(ds, edi + 66, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5226));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c522c));
    if (!(eax & 0x00008080))
        goto loc_1c5283;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c523b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5241));
    if (dx == 0x8080)
        goto loc_1c525a;
    if (dl & 0x80)
        goto loc_1c5253;
    al = dl;
loc_1c5253: // 0160:1c5253
    if (dh & 0x80)
        goto loc_1c525a;
    ah = dh;
loc_1c525a: // 0160:1c525a
    if (!(ax & 0x8080))
        goto loc_1c5283;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5264));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c526a));
    if (dx == 0x8080)
        goto loc_1c5283;
    if (dl & 0x80)
        goto loc_1c527c;
    al = dl;
loc_1c527c: // 0160:1c527c
    if (dh & 0x80)
        goto loc_1c5283;
    ah = dh;
loc_1c5283: // 0160:1c5283
    memoryASet16(ds, edi + 68, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c528c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5292));
    if (!(eax & 0x00008080))
        goto loc_1c52e9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c52a1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c52a7));
    if (dx == 0x8080)
        goto loc_1c52c0;
    if (dl & 0x80)
        goto loc_1c52b9;
    al = dl;
loc_1c52b9: // 0160:1c52b9
    if (dh & 0x80)
        goto loc_1c52c0;
    ah = dh;
loc_1c52c0: // 0160:1c52c0
    if (!(ax & 0x8080))
        goto loc_1c52e9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c52ca));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c52d0));
    if (dx == 0x8080)
        goto loc_1c52e9;
    if (dl & 0x80)
        goto loc_1c52e2;
    al = dl;
loc_1c52e2: // 0160:1c52e2
    if (dh & 0x80)
        goto loc_1c52e9;
    ah = dh;
loc_1c52e9: // 0160:1c52e9
    memoryASet16(ds, edi + 70, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c52f2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c52f8));
    if (!(eax & 0x00008080))
        goto loc_1c534f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5307));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c530d));
    if (dx == 0x8080)
        goto loc_1c5326;
    if (dl & 0x80)
        goto loc_1c531f;
    al = dl;
loc_1c531f: // 0160:1c531f
    if (dh & 0x80)
        goto loc_1c5326;
    ah = dh;
loc_1c5326: // 0160:1c5326
    if (!(ax & 0x8080))
        goto loc_1c534f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5330));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5336));
    if (dx == 0x8080)
        goto loc_1c534f;
    if (dl & 0x80)
        goto loc_1c5348;
    al = dl;
loc_1c5348: // 0160:1c5348
    if (dh & 0x80)
        goto loc_1c534f;
    ah = dh;
loc_1c534f: // 0160:1c534f
    memoryASet16(ds, edi + 72, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5358));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c535e));
    if (!(eax & 0x00008080))
        goto loc_1c53b5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c536d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5373));
    if (dx == 0x8080)
        goto loc_1c538c;
    if (dl & 0x80)
        goto loc_1c5385;
    al = dl;
loc_1c5385: // 0160:1c5385
    if (dh & 0x80)
        goto loc_1c538c;
    ah = dh;
loc_1c538c: // 0160:1c538c
    if (!(ax & 0x8080))
        goto loc_1c53b5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5396));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c539c));
    if (dx == 0x8080)
        goto loc_1c53b5;
    if (dl & 0x80)
        goto loc_1c53ae;
    al = dl;
loc_1c53ae: // 0160:1c53ae
    if (dh & 0x80)
        goto loc_1c53b5;
    ah = dh;
loc_1c53b5: // 0160:1c53b5
    memoryASet16(ds, edi + 74, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c53be));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c53c4));
    if (!(eax & 0x00008080))
        goto loc_1c541b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c53d3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c53d9));
    if (dx == 0x8080)
        goto loc_1c53f2;
    if (dl & 0x80)
        goto loc_1c53eb;
    al = dl;
loc_1c53eb: // 0160:1c53eb
    if (dh & 0x80)
        goto loc_1c53f2;
    ah = dh;
loc_1c53f2: // 0160:1c53f2
    if (!(ax & 0x8080))
        goto loc_1c541b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c53fc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5402));
    if (dx == 0x8080)
        goto loc_1c541b;
    if (dl & 0x80)
        goto loc_1c5414;
    al = dl;
loc_1c5414: // 0160:1c5414
    if (dh & 0x80)
        goto loc_1c541b;
    ah = dh;
loc_1c541b: // 0160:1c541b
    memoryASet16(ds, edi + 76, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5424));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c542a));
    if (!(eax & 0x00008080))
        goto loc_1c5481;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5439));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c543f));
    if (dx == 0x8080)
        goto loc_1c5458;
    if (dl & 0x80)
        goto loc_1c5451;
    al = dl;
loc_1c5451: // 0160:1c5451
    if (dh & 0x80)
        goto loc_1c5458;
    ah = dh;
loc_1c5458: // 0160:1c5458
    if (!(ax & 0x8080))
        goto loc_1c5481;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5462));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5468));
    if (dx == 0x8080)
        goto loc_1c5481;
    if (dl & 0x80)
        goto loc_1c547a;
    al = dl;
loc_1c547a: // 0160:1c547a
    if (dh & 0x80)
        goto loc_1c5481;
    ah = dh;
loc_1c5481: // 0160:1c5481
    memoryASet16(ds, edi + 78, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c548a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5490));
    if (!(eax & 0x00008080))
        goto loc_1c54e7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c549f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c54a5));
    if (dx == 0x8080)
        goto loc_1c54be;
    if (dl & 0x80)
        goto loc_1c54b7;
    al = dl;
loc_1c54b7: // 0160:1c54b7
    if (dh & 0x80)
        goto loc_1c54be;
    ah = dh;
loc_1c54be: // 0160:1c54be
    if (!(ax & 0x8080))
        goto loc_1c54e7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c54c8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c54ce));
    if (dx == 0x8080)
        goto loc_1c54e7;
    if (dl & 0x80)
        goto loc_1c54e0;
    al = dl;
loc_1c54e0: // 0160:1c54e0
    if (dh & 0x80)
        goto loc_1c54e7;
    ah = dh;
loc_1c54e7: // 0160:1c54e7
    memoryASet16(ds, edi + 80, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c54f0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c54f6));
    if (!(eax & 0x00008080))
        goto loc_1c554d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5505));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c550b));
    if (dx == 0x8080)
        goto loc_1c5524;
    if (dl & 0x80)
        goto loc_1c551d;
    al = dl;
loc_1c551d: // 0160:1c551d
    if (dh & 0x80)
        goto loc_1c5524;
    ah = dh;
loc_1c5524: // 0160:1c5524
    if (!(ax & 0x8080))
        goto loc_1c554d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c552e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5534));
    if (dx == 0x8080)
        goto loc_1c554d;
    if (dl & 0x80)
        goto loc_1c5546;
    al = dl;
loc_1c5546: // 0160:1c5546
    if (dh & 0x80)
        goto loc_1c554d;
    ah = dh;
loc_1c554d: // 0160:1c554d
    memoryASet16(ds, edi + 82, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5556));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c555c));
    if (!(eax & 0x00008080))
        goto loc_1c55b3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c556b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5571));
    if (dx == 0x8080)
        goto loc_1c558a;
    if (dl & 0x80)
        goto loc_1c5583;
    al = dl;
loc_1c5583: // 0160:1c5583
    if (dh & 0x80)
        goto loc_1c558a;
    ah = dh;
loc_1c558a: // 0160:1c558a
    if (!(ax & 0x8080))
        goto loc_1c55b3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5594));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c559a));
    if (dx == 0x8080)
        goto loc_1c55b3;
    if (dl & 0x80)
        goto loc_1c55ac;
    al = dl;
loc_1c55ac: // 0160:1c55ac
    if (dh & 0x80)
        goto loc_1c55b3;
    ah = dh;
loc_1c55b3: // 0160:1c55b3
    memoryASet16(ds, edi + 84, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c55bc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c55c2));
    if (!(eax & 0x00008080))
        goto loc_1c5619;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c55d1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c55d7));
    if (dx == 0x8080)
        goto loc_1c55f0;
    if (dl & 0x80)
        goto loc_1c55e9;
    al = dl;
loc_1c55e9: // 0160:1c55e9
    if (dh & 0x80)
        goto loc_1c55f0;
    ah = dh;
loc_1c55f0: // 0160:1c55f0
    if (!(ax & 0x8080))
        goto loc_1c5619;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c55fa));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5600));
    if (dx == 0x8080)
        goto loc_1c5619;
    if (dl & 0x80)
        goto loc_1c5612;
    al = dl;
loc_1c5612: // 0160:1c5612
    if (dh & 0x80)
        goto loc_1c5619;
    ah = dh;
loc_1c5619: // 0160:1c5619
    memoryASet16(ds, edi + 86, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5622));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5628));
    if (!(eax & 0x00008080))
        goto loc_1c567f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5637));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c563d));
    if (dx == 0x8080)
        goto loc_1c5656;
    if (dl & 0x80)
        goto loc_1c564f;
    al = dl;
loc_1c564f: // 0160:1c564f
    if (dh & 0x80)
        goto loc_1c5656;
    ah = dh;
loc_1c5656: // 0160:1c5656
    if (!(ax & 0x8080))
        goto loc_1c567f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5660));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5666));
    if (dx == 0x8080)
        goto loc_1c567f;
    if (dl & 0x80)
        goto loc_1c5678;
    al = dl;
loc_1c5678: // 0160:1c5678
    if (dh & 0x80)
        goto loc_1c567f;
    ah = dh;
loc_1c567f: // 0160:1c567f
    memoryASet16(ds, edi + 88, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5688));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c568e));
    if (!(eax & 0x00008080))
        goto loc_1c56e5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c569d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c56a3));
    if (dx == 0x8080)
        goto loc_1c56bc;
    if (dl & 0x80)
        goto loc_1c56b5;
    al = dl;
loc_1c56b5: // 0160:1c56b5
    if (dh & 0x80)
        goto loc_1c56bc;
    ah = dh;
loc_1c56bc: // 0160:1c56bc
    if (!(ax & 0x8080))
        goto loc_1c56e5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c56c6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c56cc));
    if (dx == 0x8080)
        goto loc_1c56e5;
    if (dl & 0x80)
        goto loc_1c56de;
    al = dl;
loc_1c56de: // 0160:1c56de
    if (dh & 0x80)
        goto loc_1c56e5;
    ah = dh;
loc_1c56e5: // 0160:1c56e5
    memoryASet16(ds, edi + 90, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c56ee));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c56f4));
    if (!(eax & 0x00008080))
        goto loc_1c574b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5703));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5709));
    if (dx == 0x8080)
        goto loc_1c5722;
    if (dl & 0x80)
        goto loc_1c571b;
    al = dl;
loc_1c571b: // 0160:1c571b
    if (dh & 0x80)
        goto loc_1c5722;
    ah = dh;
loc_1c5722: // 0160:1c5722
    if (!(ax & 0x8080))
        goto loc_1c574b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c572c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5732));
    if (dx == 0x8080)
        goto loc_1c574b;
    if (dl & 0x80)
        goto loc_1c5744;
    al = dl;
loc_1c5744: // 0160:1c5744
    if (dh & 0x80)
        goto loc_1c574b;
    ah = dh;
loc_1c574b: // 0160:1c574b
    memoryASet16(ds, edi + 92, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5754));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c575a));
    if (!(eax & 0x00008080))
        goto loc_1c57b1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5769));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c576f));
    if (dx == 0x8080)
        goto loc_1c5788;
    if (dl & 0x80)
        goto loc_1c5781;
    al = dl;
loc_1c5781: // 0160:1c5781
    if (dh & 0x80)
        goto loc_1c5788;
    ah = dh;
loc_1c5788: // 0160:1c5788
    if (!(ax & 0x8080))
        goto loc_1c57b1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5792));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5798));
    if (dx == 0x8080)
        goto loc_1c57b1;
    if (dl & 0x80)
        goto loc_1c57aa;
    al = dl;
loc_1c57aa: // 0160:1c57aa
    if (dh & 0x80)
        goto loc_1c57b1;
    ah = dh;
loc_1c57b1: // 0160:1c57b1
    memoryASet16(ds, edi + 94, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c57ba));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c57c0));
    if (!(eax & 0x00008080))
        goto loc_1c5817;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c57cf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c57d5));
    if (dx == 0x8080)
        goto loc_1c57ee;
    if (dl & 0x80)
        goto loc_1c57e7;
    al = dl;
loc_1c57e7: // 0160:1c57e7
    if (dh & 0x80)
        goto loc_1c57ee;
    ah = dh;
loc_1c57ee: // 0160:1c57ee
    if (!(ax & 0x8080))
        goto loc_1c5817;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c57f8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c57fe));
    if (dx == 0x8080)
        goto loc_1c5817;
    if (dl & 0x80)
        goto loc_1c5810;
    al = dl;
loc_1c5810: // 0160:1c5810
    if (dh & 0x80)
        goto loc_1c5817;
    ah = dh;
loc_1c5817: // 0160:1c5817
    memoryASet16(ds, edi + 96, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5820));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5826));
    if (!(eax & 0x00008080))
        goto loc_1c587d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5835));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c583b));
    if (dx == 0x8080)
        goto loc_1c5854;
    if (dl & 0x80)
        goto loc_1c584d;
    al = dl;
loc_1c584d: // 0160:1c584d
    if (dh & 0x80)
        goto loc_1c5854;
    ah = dh;
loc_1c5854: // 0160:1c5854
    if (!(ax & 0x8080))
        goto loc_1c587d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c585e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5864));
    if (dx == 0x8080)
        goto loc_1c587d;
    if (dl & 0x80)
        goto loc_1c5876;
    al = dl;
loc_1c5876: // 0160:1c5876
    if (dh & 0x80)
        goto loc_1c587d;
    ah = dh;
loc_1c587d: // 0160:1c587d
    memoryASet16(ds, edi + 98, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5886));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c588c));
    if (!(eax & 0x00008080))
        goto loc_1c58e3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c589b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c58a1));
    if (dx == 0x8080)
        goto loc_1c58ba;
    if (dl & 0x80)
        goto loc_1c58b3;
    al = dl;
loc_1c58b3: // 0160:1c58b3
    if (dh & 0x80)
        goto loc_1c58ba;
    ah = dh;
loc_1c58ba: // 0160:1c58ba
    if (!(ax & 0x8080))
        goto loc_1c58e3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c58c4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c58ca));
    if (dx == 0x8080)
        goto loc_1c58e3;
    if (dl & 0x80)
        goto loc_1c58dc;
    al = dl;
loc_1c58dc: // 0160:1c58dc
    if (dh & 0x80)
        goto loc_1c58e3;
    ah = dh;
loc_1c58e3: // 0160:1c58e3
    memoryASet16(ds, edi + 100, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c58ec));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c58f2));
    if (!(eax & 0x00008080))
        goto loc_1c5949;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5901));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5907));
    if (dx == 0x8080)
        goto loc_1c5920;
    if (dl & 0x80)
        goto loc_1c5919;
    al = dl;
loc_1c5919: // 0160:1c5919
    if (dh & 0x80)
        goto loc_1c5920;
    ah = dh;
loc_1c5920: // 0160:1c5920
    if (!(ax & 0x8080))
        goto loc_1c5949;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c592a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5930));
    if (dx == 0x8080)
        goto loc_1c5949;
    if (dl & 0x80)
        goto loc_1c5942;
    al = dl;
loc_1c5942: // 0160:1c5942
    if (dh & 0x80)
        goto loc_1c5949;
    ah = dh;
loc_1c5949: // 0160:1c5949
    memoryASet16(ds, edi + 102, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5952));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5958));
    if (!(eax & 0x00008080))
        goto loc_1c59af;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5967));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c596d));
    if (dx == 0x8080)
        goto loc_1c5986;
    if (dl & 0x80)
        goto loc_1c597f;
    al = dl;
loc_1c597f: // 0160:1c597f
    if (dh & 0x80)
        goto loc_1c5986;
    ah = dh;
loc_1c5986: // 0160:1c5986
    if (!(ax & 0x8080))
        goto loc_1c59af;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5990));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5996));
    if (dx == 0x8080)
        goto loc_1c59af;
    if (dl & 0x80)
        goto loc_1c59a8;
    al = dl;
loc_1c59a8: // 0160:1c59a8
    if (dh & 0x80)
        goto loc_1c59af;
    ah = dh;
loc_1c59af: // 0160:1c59af
    memoryASet16(ds, edi + 104, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c59b8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c59be));
    if (!(eax & 0x00008080))
        goto loc_1c5a15;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c59cd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c59d3));
    if (dx == 0x8080)
        goto loc_1c59ec;
    if (dl & 0x80)
        goto loc_1c59e5;
    al = dl;
loc_1c59e5: // 0160:1c59e5
    if (dh & 0x80)
        goto loc_1c59ec;
    ah = dh;
loc_1c59ec: // 0160:1c59ec
    if (!(ax & 0x8080))
        goto loc_1c5a15;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c59f6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c59fc));
    if (dx == 0x8080)
        goto loc_1c5a15;
    if (dl & 0x80)
        goto loc_1c5a0e;
    al = dl;
loc_1c5a0e: // 0160:1c5a0e
    if (dh & 0x80)
        goto loc_1c5a15;
    ah = dh;
loc_1c5a15: // 0160:1c5a15
    memoryASet16(ds, edi + 106, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5a1e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5a24));
    if (!(eax & 0x00008080))
        goto loc_1c5a7b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5a33));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5a39));
    if (dx == 0x8080)
        goto loc_1c5a52;
    if (dl & 0x80)
        goto loc_1c5a4b;
    al = dl;
loc_1c5a4b: // 0160:1c5a4b
    if (dh & 0x80)
        goto loc_1c5a52;
    ah = dh;
loc_1c5a52: // 0160:1c5a52
    if (!(ax & 0x8080))
        goto loc_1c5a7b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5a5c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5a62));
    if (dx == 0x8080)
        goto loc_1c5a7b;
    if (dl & 0x80)
        goto loc_1c5a74;
    al = dl;
loc_1c5a74: // 0160:1c5a74
    if (dh & 0x80)
        goto loc_1c5a7b;
    ah = dh;
loc_1c5a7b: // 0160:1c5a7b
    memoryASet16(ds, edi + 108, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5a84));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5a8a));
    if (!(eax & 0x00008080))
        goto loc_1c5ae1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5a99));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5a9f));
    if (dx == 0x8080)
        goto loc_1c5ab8;
    if (dl & 0x80)
        goto loc_1c5ab1;
    al = dl;
loc_1c5ab1: // 0160:1c5ab1
    if (dh & 0x80)
        goto loc_1c5ab8;
    ah = dh;
loc_1c5ab8: // 0160:1c5ab8
    if (!(ax & 0x8080))
        goto loc_1c5ae1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ac2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ac8));
    if (dx == 0x8080)
        goto loc_1c5ae1;
    if (dl & 0x80)
        goto loc_1c5ada;
    al = dl;
loc_1c5ada: // 0160:1c5ada
    if (dh & 0x80)
        goto loc_1c5ae1;
    ah = dh;
loc_1c5ae1: // 0160:1c5ae1
    memoryASet16(ds, edi + 110, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5aea));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5af0));
    if (!(eax & 0x00008080))
        goto loc_1c5b47;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5aff));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5b05));
    if (dx == 0x8080)
        goto loc_1c5b1e;
    if (dl & 0x80)
        goto loc_1c5b17;
    al = dl;
loc_1c5b17: // 0160:1c5b17
    if (dh & 0x80)
        goto loc_1c5b1e;
    ah = dh;
loc_1c5b1e: // 0160:1c5b1e
    if (!(ax & 0x8080))
        goto loc_1c5b47;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5b28));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5b2e));
    if (dx == 0x8080)
        goto loc_1c5b47;
    if (dl & 0x80)
        goto loc_1c5b40;
    al = dl;
loc_1c5b40: // 0160:1c5b40
    if (dh & 0x80)
        goto loc_1c5b47;
    ah = dh;
loc_1c5b47: // 0160:1c5b47
    memoryASet16(ds, edi + 112, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5b50));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5b56));
    if (!(eax & 0x00008080))
        goto loc_1c5bad;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5b65));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5b6b));
    if (dx == 0x8080)
        goto loc_1c5b84;
    if (dl & 0x80)
        goto loc_1c5b7d;
    al = dl;
loc_1c5b7d: // 0160:1c5b7d
    if (dh & 0x80)
        goto loc_1c5b84;
    ah = dh;
loc_1c5b84: // 0160:1c5b84
    if (!(ax & 0x8080))
        goto loc_1c5bad;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5b8e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5b94));
    if (dx == 0x8080)
        goto loc_1c5bad;
    if (dl & 0x80)
        goto loc_1c5ba6;
    al = dl;
loc_1c5ba6: // 0160:1c5ba6
    if (dh & 0x80)
        goto loc_1c5bad;
    ah = dh;
loc_1c5bad: // 0160:1c5bad
    memoryASet16(ds, edi + 114, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5bb6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5bbc));
    if (!(eax & 0x00008080))
        goto loc_1c5c13;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5bcb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5bd1));
    if (dx == 0x8080)
        goto loc_1c5bea;
    if (dl & 0x80)
        goto loc_1c5be3;
    al = dl;
loc_1c5be3: // 0160:1c5be3
    if (dh & 0x80)
        goto loc_1c5bea;
    ah = dh;
loc_1c5bea: // 0160:1c5bea
    if (!(ax & 0x8080))
        goto loc_1c5c13;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5bf4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5bfa));
    if (dx == 0x8080)
        goto loc_1c5c13;
    if (dl & 0x80)
        goto loc_1c5c0c;
    al = dl;
loc_1c5c0c: // 0160:1c5c0c
    if (dh & 0x80)
        goto loc_1c5c13;
    ah = dh;
loc_1c5c13: // 0160:1c5c13
    memoryASet16(ds, edi + 116, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5c1c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5c22));
    if (!(eax & 0x00008080))
        goto loc_1c5c79;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5c31));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5c37));
    if (dx == 0x8080)
        goto loc_1c5c50;
    if (dl & 0x80)
        goto loc_1c5c49;
    al = dl;
loc_1c5c49: // 0160:1c5c49
    if (dh & 0x80)
        goto loc_1c5c50;
    ah = dh;
loc_1c5c50: // 0160:1c5c50
    if (!(ax & 0x8080))
        goto loc_1c5c79;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5c5a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5c60));
    if (dx == 0x8080)
        goto loc_1c5c79;
    if (dl & 0x80)
        goto loc_1c5c72;
    al = dl;
loc_1c5c72: // 0160:1c5c72
    if (dh & 0x80)
        goto loc_1c5c79;
    ah = dh;
loc_1c5c79: // 0160:1c5c79
    memoryASet16(ds, edi + 118, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5c82));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5c88));
    if (!(eax & 0x00008080))
        goto loc_1c5cdf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5c97));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5c9d));
    if (dx == 0x8080)
        goto loc_1c5cb6;
    if (dl & 0x80)
        goto loc_1c5caf;
    al = dl;
loc_1c5caf: // 0160:1c5caf
    if (dh & 0x80)
        goto loc_1c5cb6;
    ah = dh;
loc_1c5cb6: // 0160:1c5cb6
    if (!(ax & 0x8080))
        goto loc_1c5cdf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5cc0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5cc6));
    if (dx == 0x8080)
        goto loc_1c5cdf;
    if (dl & 0x80)
        goto loc_1c5cd8;
    al = dl;
loc_1c5cd8: // 0160:1c5cd8
    if (dh & 0x80)
        goto loc_1c5cdf;
    ah = dh;
loc_1c5cdf: // 0160:1c5cdf
    memoryASet16(ds, edi + 120, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5ce8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5cee));
    if (!(eax & 0x00008080))
        goto loc_1c5d45;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5cfd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5d03));
    if (dx == 0x8080)
        goto loc_1c5d1c;
    if (dl & 0x80)
        goto loc_1c5d15;
    al = dl;
loc_1c5d15: // 0160:1c5d15
    if (dh & 0x80)
        goto loc_1c5d1c;
    ah = dh;
loc_1c5d1c: // 0160:1c5d1c
    if (!(ax & 0x8080))
        goto loc_1c5d45;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5d26));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5d2c));
    if (dx == 0x8080)
        goto loc_1c5d45;
    if (dl & 0x80)
        goto loc_1c5d3e;
    al = dl;
loc_1c5d3e: // 0160:1c5d3e
    if (dh & 0x80)
        goto loc_1c5d45;
    ah = dh;
loc_1c5d45: // 0160:1c5d45
    memoryASet16(ds, edi + 122, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5d4e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5d54));
    if (!(eax & 0x00008080))
        goto loc_1c5dab;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5d63));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5d69));
    if (dx == 0x8080)
        goto loc_1c5d82;
    if (dl & 0x80)
        goto loc_1c5d7b;
    al = dl;
loc_1c5d7b: // 0160:1c5d7b
    if (dh & 0x80)
        goto loc_1c5d82;
    ah = dh;
loc_1c5d82: // 0160:1c5d82
    if (!(ax & 0x8080))
        goto loc_1c5dab;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5d8c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5d92));
    if (dx == 0x8080)
        goto loc_1c5dab;
    if (dl & 0x80)
        goto loc_1c5da4;
    al = dl;
loc_1c5da4: // 0160:1c5da4
    if (dh & 0x80)
        goto loc_1c5dab;
    ah = dh;
loc_1c5dab: // 0160:1c5dab
    memoryASet16(ds, edi + 124, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5db4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5dba));
    if (!(eax & 0x00008080))
        goto loc_1c5e11;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5dc9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5dcf));
    if (dx == 0x8080)
        goto loc_1c5de8;
    if (dl & 0x80)
        goto loc_1c5de1;
    al = dl;
loc_1c5de1: // 0160:1c5de1
    if (dh & 0x80)
        goto loc_1c5de8;
    ah = dh;
loc_1c5de8: // 0160:1c5de8
    if (!(ax & 0x8080))
        goto loc_1c5e11;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5df2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5df8));
    if (dx == 0x8080)
        goto loc_1c5e11;
    if (dl & 0x80)
        goto loc_1c5e0a;
    al = dl;
loc_1c5e0a: // 0160:1c5e0a
    if (dh & 0x80)
        goto loc_1c5e11;
    ah = dh;
loc_1c5e11: // 0160:1c5e11
    memoryASet16(ds, edi + 126, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5e1a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5e20));
    if (!(eax & 0x00008080))
        goto loc_1c5e77;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5e2f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5e35));
    if (dx == 0x8080)
        goto loc_1c5e4e;
    if (dl & 0x80)
        goto loc_1c5e47;
    al = dl;
loc_1c5e47: // 0160:1c5e47
    if (dh & 0x80)
        goto loc_1c5e4e;
    ah = dh;
loc_1c5e4e: // 0160:1c5e4e
    if (!(ax & 0x8080))
        goto loc_1c5e77;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5e58));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5e5e));
    if (dx == 0x8080)
        goto loc_1c5e77;
    if (dl & 0x80)
        goto loc_1c5e70;
    al = dl;
loc_1c5e70: // 0160:1c5e70
    if (dh & 0x80)
        goto loc_1c5e77;
    ah = dh;
loc_1c5e77: // 0160:1c5e77
    memoryASet16(ds, edi + 128, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5e80));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5e86));
    if (!(eax & 0x00008080))
        goto loc_1c5edd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5e95));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5e9b));
    if (dx == 0x8080)
        goto loc_1c5eb4;
    if (dl & 0x80)
        goto loc_1c5ead;
    al = dl;
loc_1c5ead: // 0160:1c5ead
    if (dh & 0x80)
        goto loc_1c5eb4;
    ah = dh;
loc_1c5eb4: // 0160:1c5eb4
    if (!(ax & 0x8080))
        goto loc_1c5edd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ebe));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ec4));
    if (dx == 0x8080)
        goto loc_1c5edd;
    if (dl & 0x80)
        goto loc_1c5ed6;
    al = dl;
loc_1c5ed6: // 0160:1c5ed6
    if (dh & 0x80)
        goto loc_1c5edd;
    ah = dh;
loc_1c5edd: // 0160:1c5edd
    memoryASet16(ds, edi + 130, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5ee6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5eec));
    if (!(eax & 0x00008080))
        goto loc_1c5f43;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5efb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5f01));
    if (dx == 0x8080)
        goto loc_1c5f1a;
    if (dl & 0x80)
        goto loc_1c5f13;
    al = dl;
loc_1c5f13: // 0160:1c5f13
    if (dh & 0x80)
        goto loc_1c5f1a;
    ah = dh;
loc_1c5f1a: // 0160:1c5f1a
    if (!(ax & 0x8080))
        goto loc_1c5f43;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5f24));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5f2a));
    if (dx == 0x8080)
        goto loc_1c5f43;
    if (dl & 0x80)
        goto loc_1c5f3c;
    al = dl;
loc_1c5f3c: // 0160:1c5f3c
    if (dh & 0x80)
        goto loc_1c5f43;
    ah = dh;
loc_1c5f43: // 0160:1c5f43
    memoryASet16(ds, edi + 132, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5f4c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5f52));
    if (!(eax & 0x00008080))
        goto loc_1c5fa9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5f61));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5f67));
    if (dx == 0x8080)
        goto loc_1c5f80;
    if (dl & 0x80)
        goto loc_1c5f79;
    al = dl;
loc_1c5f79: // 0160:1c5f79
    if (dh & 0x80)
        goto loc_1c5f80;
    ah = dh;
loc_1c5f80: // 0160:1c5f80
    if (!(ax & 0x8080))
        goto loc_1c5fa9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5f8a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5f90));
    if (dx == 0x8080)
        goto loc_1c5fa9;
    if (dl & 0x80)
        goto loc_1c5fa2;
    al = dl;
loc_1c5fa2: // 0160:1c5fa2
    if (dh & 0x80)
        goto loc_1c5fa9;
    ah = dh;
loc_1c5fa9: // 0160:1c5fa9
    memoryASet16(ds, edi + 134, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5fb2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c5fb8));
    if (!(eax & 0x00008080))
        goto loc_1c600f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5fc7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c5fcd));
    if (dx == 0x8080)
        goto loc_1c5fe6;
    if (dl & 0x80)
        goto loc_1c5fdf;
    al = dl;
loc_1c5fdf: // 0160:1c5fdf
    if (dh & 0x80)
        goto loc_1c5fe6;
    ah = dh;
loc_1c5fe6: // 0160:1c5fe6
    if (!(ax & 0x8080))
        goto loc_1c600f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ff0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c5ff6));
    if (dx == 0x8080)
        goto loc_1c600f;
    if (dl & 0x80)
        goto loc_1c6008;
    al = dl;
loc_1c6008: // 0160:1c6008
    if (dh & 0x80)
        goto loc_1c600f;
    ah = dh;
loc_1c600f: // 0160:1c600f
    memoryASet16(ds, edi + 136, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6018));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c601e));
    if (!(eax & 0x00008080))
        goto loc_1c6075;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c602d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6033));
    if (dx == 0x8080)
        goto loc_1c604c;
    if (dl & 0x80)
        goto loc_1c6045;
    al = dl;
loc_1c6045: // 0160:1c6045
    if (dh & 0x80)
        goto loc_1c604c;
    ah = dh;
loc_1c604c: // 0160:1c604c
    if (!(ax & 0x8080))
        goto loc_1c6075;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6056));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c605c));
    if (dx == 0x8080)
        goto loc_1c6075;
    if (dl & 0x80)
        goto loc_1c606e;
    al = dl;
loc_1c606e: // 0160:1c606e
    if (dh & 0x80)
        goto loc_1c6075;
    ah = dh;
loc_1c6075: // 0160:1c6075
    memoryASet16(ds, edi + 138, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c607e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6084));
    if (!(eax & 0x00008080))
        goto loc_1c60db;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6093));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6099));
    if (dx == 0x8080)
        goto loc_1c60b2;
    if (dl & 0x80)
        goto loc_1c60ab;
    al = dl;
loc_1c60ab: // 0160:1c60ab
    if (dh & 0x80)
        goto loc_1c60b2;
    ah = dh;
loc_1c60b2: // 0160:1c60b2
    if (!(ax & 0x8080))
        goto loc_1c60db;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c60bc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c60c2));
    if (dx == 0x8080)
        goto loc_1c60db;
    if (dl & 0x80)
        goto loc_1c60d4;
    al = dl;
loc_1c60d4: // 0160:1c60d4
    if (dh & 0x80)
        goto loc_1c60db;
    ah = dh;
loc_1c60db: // 0160:1c60db
    memoryASet16(ds, edi + 140, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c60e4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c60ea));
    if (!(eax & 0x00008080))
        goto loc_1c6141;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c60f9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c60ff));
    if (dx == 0x8080)
        goto loc_1c6118;
    if (dl & 0x80)
        goto loc_1c6111;
    al = dl;
loc_1c6111: // 0160:1c6111
    if (dh & 0x80)
        goto loc_1c6118;
    ah = dh;
loc_1c6118: // 0160:1c6118
    if (!(ax & 0x8080))
        goto loc_1c6141;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6122));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6128));
    if (dx == 0x8080)
        goto loc_1c6141;
    if (dl & 0x80)
        goto loc_1c613a;
    al = dl;
loc_1c613a: // 0160:1c613a
    if (dh & 0x80)
        goto loc_1c6141;
    ah = dh;
loc_1c6141: // 0160:1c6141
    memoryASet16(ds, edi + 142, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c614a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6150));
    if (!(eax & 0x00008080))
        goto loc_1c61a7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c615f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6165));
    if (dx == 0x8080)
        goto loc_1c617e;
    if (dl & 0x80)
        goto loc_1c6177;
    al = dl;
loc_1c6177: // 0160:1c6177
    if (dh & 0x80)
        goto loc_1c617e;
    ah = dh;
loc_1c617e: // 0160:1c617e
    if (!(ax & 0x8080))
        goto loc_1c61a7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6188));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c618e));
    if (dx == 0x8080)
        goto loc_1c61a7;
    if (dl & 0x80)
        goto loc_1c61a0;
    al = dl;
loc_1c61a0: // 0160:1c61a0
    if (dh & 0x80)
        goto loc_1c61a7;
    ah = dh;
loc_1c61a7: // 0160:1c61a7
    memoryASet16(ds, edi + 144, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c61b0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c61b6));
    if (!(eax & 0x00008080))
        goto loc_1c620d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c61c5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c61cb));
    if (dx == 0x8080)
        goto loc_1c61e4;
    if (dl & 0x80)
        goto loc_1c61dd;
    al = dl;
loc_1c61dd: // 0160:1c61dd
    if (dh & 0x80)
        goto loc_1c61e4;
    ah = dh;
loc_1c61e4: // 0160:1c61e4
    if (!(ax & 0x8080))
        goto loc_1c620d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c61ee));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c61f4));
    if (dx == 0x8080)
        goto loc_1c620d;
    if (dl & 0x80)
        goto loc_1c6206;
    al = dl;
loc_1c6206: // 0160:1c6206
    if (dh & 0x80)
        goto loc_1c620d;
    ah = dh;
loc_1c620d: // 0160:1c620d
    memoryASet16(ds, edi + 146, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6216));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c621c));
    if (!(eax & 0x00008080))
        goto loc_1c6273;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c622b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6231));
    if (dx == 0x8080)
        goto loc_1c624a;
    if (dl & 0x80)
        goto loc_1c6243;
    al = dl;
loc_1c6243: // 0160:1c6243
    if (dh & 0x80)
        goto loc_1c624a;
    ah = dh;
loc_1c624a: // 0160:1c624a
    if (!(ax & 0x8080))
        goto loc_1c6273;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6254));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c625a));
    if (dx == 0x8080)
        goto loc_1c6273;
    if (dl & 0x80)
        goto loc_1c626c;
    al = dl;
loc_1c626c: // 0160:1c626c
    if (dh & 0x80)
        goto loc_1c6273;
    ah = dh;
loc_1c6273: // 0160:1c6273
    memoryASet16(ds, edi + 148, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c627c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6282));
    if (!(eax & 0x00008080))
        goto loc_1c62d9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6291));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6297));
    if (dx == 0x8080)
        goto loc_1c62b0;
    if (dl & 0x80)
        goto loc_1c62a9;
    al = dl;
loc_1c62a9: // 0160:1c62a9
    if (dh & 0x80)
        goto loc_1c62b0;
    ah = dh;
loc_1c62b0: // 0160:1c62b0
    if (!(ax & 0x8080))
        goto loc_1c62d9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c62ba));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c62c0));
    if (dx == 0x8080)
        goto loc_1c62d9;
    if (dl & 0x80)
        goto loc_1c62d2;
    al = dl;
loc_1c62d2: // 0160:1c62d2
    if (dh & 0x80)
        goto loc_1c62d9;
    ah = dh;
loc_1c62d9: // 0160:1c62d9
    memoryASet16(ds, edi + 150, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c62e2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c62e8));
    if (!(eax & 0x00008080))
        goto loc_1c633f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c62f7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c62fd));
    if (dx == 0x8080)
        goto loc_1c6316;
    if (dl & 0x80)
        goto loc_1c630f;
    al = dl;
loc_1c630f: // 0160:1c630f
    if (dh & 0x80)
        goto loc_1c6316;
    ah = dh;
loc_1c6316: // 0160:1c6316
    if (!(ax & 0x8080))
        goto loc_1c633f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6320));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6326));
    if (dx == 0x8080)
        goto loc_1c633f;
    if (dl & 0x80)
        goto loc_1c6338;
    al = dl;
loc_1c6338: // 0160:1c6338
    if (dh & 0x80)
        goto loc_1c633f;
    ah = dh;
loc_1c633f: // 0160:1c633f
    memoryASet16(ds, edi + 152, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6348));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c634e));
    if (!(eax & 0x00008080))
        goto loc_1c63a5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c635d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6363));
    if (dx == 0x8080)
        goto loc_1c637c;
    if (dl & 0x80)
        goto loc_1c6375;
    al = dl;
loc_1c6375: // 0160:1c6375
    if (dh & 0x80)
        goto loc_1c637c;
    ah = dh;
loc_1c637c: // 0160:1c637c
    if (!(ax & 0x8080))
        goto loc_1c63a5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6386));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c638c));
    if (dx == 0x8080)
        goto loc_1c63a5;
    if (dl & 0x80)
        goto loc_1c639e;
    al = dl;
loc_1c639e: // 0160:1c639e
    if (dh & 0x80)
        goto loc_1c63a5;
    ah = dh;
loc_1c63a5: // 0160:1c63a5
    memoryASet16(ds, edi + 154, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c63ae));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c63b4));
    if (!(eax & 0x00008080))
        goto loc_1c640b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c63c3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c63c9));
    if (dx == 0x8080)
        goto loc_1c63e2;
    if (dl & 0x80)
        goto loc_1c63db;
    al = dl;
loc_1c63db: // 0160:1c63db
    if (dh & 0x80)
        goto loc_1c63e2;
    ah = dh;
loc_1c63e2: // 0160:1c63e2
    if (!(ax & 0x8080))
        goto loc_1c640b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c63ec));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c63f2));
    if (dx == 0x8080)
        goto loc_1c640b;
    if (dl & 0x80)
        goto loc_1c6404;
    al = dl;
loc_1c6404: // 0160:1c6404
    if (dh & 0x80)
        goto loc_1c640b;
    ah = dh;
loc_1c640b: // 0160:1c640b
    memoryASet16(ds, edi + 156, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6414));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c641a));
    if (!(eax & 0x00008080))
        goto loc_1c6471;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6429));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c642f));
    if (dx == 0x8080)
        goto loc_1c6448;
    if (dl & 0x80)
        goto loc_1c6441;
    al = dl;
loc_1c6441: // 0160:1c6441
    if (dh & 0x80)
        goto loc_1c6448;
    ah = dh;
loc_1c6448: // 0160:1c6448
    if (!(ax & 0x8080))
        goto loc_1c6471;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6452));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6458));
    if (dx == 0x8080)
        goto loc_1c6471;
    if (dl & 0x80)
        goto loc_1c646a;
    al = dl;
loc_1c646a: // 0160:1c646a
    if (dh & 0x80)
        goto loc_1c6471;
    ah = dh;
loc_1c6471: // 0160:1c6471
    memoryASet16(ds, edi + 158, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c647a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6480));
    if (!(eax & 0x00008080))
        goto loc_1c64d7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c648f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6495));
    if (dx == 0x8080)
        goto loc_1c64ae;
    if (dl & 0x80)
        goto loc_1c64a7;
    al = dl;
loc_1c64a7: // 0160:1c64a7
    if (dh & 0x80)
        goto loc_1c64ae;
    ah = dh;
loc_1c64ae: // 0160:1c64ae
    if (!(ax & 0x8080))
        goto loc_1c64d7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c64b8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c64be));
    if (dx == 0x8080)
        goto loc_1c64d7;
    if (dl & 0x80)
        goto loc_1c64d0;
    al = dl;
loc_1c64d0: // 0160:1c64d0
    if (dh & 0x80)
        goto loc_1c64d7;
    ah = dh;
loc_1c64d7: // 0160:1c64d7
    memoryASet16(ds, edi + 160, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c64e0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c64e6));
    if (!(eax & 0x00008080))
        goto loc_1c653d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c64f5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c64fb));
    if (dx == 0x8080)
        goto loc_1c6514;
    if (dl & 0x80)
        goto loc_1c650d;
    al = dl;
loc_1c650d: // 0160:1c650d
    if (dh & 0x80)
        goto loc_1c6514;
    ah = dh;
loc_1c6514: // 0160:1c6514
    if (!(ax & 0x8080))
        goto loc_1c653d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c651e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6524));
    if (dx == 0x8080)
        goto loc_1c653d;
    if (dl & 0x80)
        goto loc_1c6536;
    al = dl;
loc_1c6536: // 0160:1c6536
    if (dh & 0x80)
        goto loc_1c653d;
    ah = dh;
loc_1c653d: // 0160:1c653d
    memoryASet16(ds, edi + 162, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6546));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c654c));
    if (!(eax & 0x00008080))
        goto loc_1c65a3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c655b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6561));
    if (dx == 0x8080)
        goto loc_1c657a;
    if (dl & 0x80)
        goto loc_1c6573;
    al = dl;
loc_1c6573: // 0160:1c6573
    if (dh & 0x80)
        goto loc_1c657a;
    ah = dh;
loc_1c657a: // 0160:1c657a
    if (!(ax & 0x8080))
        goto loc_1c65a3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6584));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c658a));
    if (dx == 0x8080)
        goto loc_1c65a3;
    if (dl & 0x80)
        goto loc_1c659c;
    al = dl;
loc_1c659c: // 0160:1c659c
    if (dh & 0x80)
        goto loc_1c65a3;
    ah = dh;
loc_1c65a3: // 0160:1c65a3
    memoryASet16(ds, edi + 164, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c65ac));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c65b2));
    if (!(eax & 0x00008080))
        goto loc_1c6609;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c65c1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c65c7));
    if (dx == 0x8080)
        goto loc_1c65e0;
    if (dl & 0x80)
        goto loc_1c65d9;
    al = dl;
loc_1c65d9: // 0160:1c65d9
    if (dh & 0x80)
        goto loc_1c65e0;
    ah = dh;
loc_1c65e0: // 0160:1c65e0
    if (!(ax & 0x8080))
        goto loc_1c6609;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c65ea));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c65f0));
    if (dx == 0x8080)
        goto loc_1c6609;
    if (dl & 0x80)
        goto loc_1c6602;
    al = dl;
loc_1c6602: // 0160:1c6602
    if (dh & 0x80)
        goto loc_1c6609;
    ah = dh;
loc_1c6609: // 0160:1c6609
    memoryASet16(ds, edi + 166, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6612));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6618));
    if (!(eax & 0x00008080))
        goto loc_1c666f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6627));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c662d));
    if (dx == 0x8080)
        goto loc_1c6646;
    if (dl & 0x80)
        goto loc_1c663f;
    al = dl;
loc_1c663f: // 0160:1c663f
    if (dh & 0x80)
        goto loc_1c6646;
    ah = dh;
loc_1c6646: // 0160:1c6646
    if (!(ax & 0x8080))
        goto loc_1c666f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6650));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6656));
    if (dx == 0x8080)
        goto loc_1c666f;
    if (dl & 0x80)
        goto loc_1c6668;
    al = dl;
loc_1c6668: // 0160:1c6668
    if (dh & 0x80)
        goto loc_1c666f;
    ah = dh;
loc_1c666f: // 0160:1c666f
    memoryASet16(ds, edi + 168, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6678));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c667e));
    if (!(eax & 0x00008080))
        goto loc_1c66d5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c668d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6693));
    if (dx == 0x8080)
        goto loc_1c66ac;
    if (dl & 0x80)
        goto loc_1c66a5;
    al = dl;
loc_1c66a5: // 0160:1c66a5
    if (dh & 0x80)
        goto loc_1c66ac;
    ah = dh;
loc_1c66ac: // 0160:1c66ac
    if (!(ax & 0x8080))
        goto loc_1c66d5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c66b6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c66bc));
    if (dx == 0x8080)
        goto loc_1c66d5;
    if (dl & 0x80)
        goto loc_1c66ce;
    al = dl;
loc_1c66ce: // 0160:1c66ce
    if (dh & 0x80)
        goto loc_1c66d5;
    ah = dh;
loc_1c66d5: // 0160:1c66d5
    memoryASet16(ds, edi + 170, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c66de));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c66e4));
    if (!(eax & 0x00008080))
        goto loc_1c673b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c66f3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c66f9));
    if (dx == 0x8080)
        goto loc_1c6712;
    if (dl & 0x80)
        goto loc_1c670b;
    al = dl;
loc_1c670b: // 0160:1c670b
    if (dh & 0x80)
        goto loc_1c6712;
    ah = dh;
loc_1c6712: // 0160:1c6712
    if (!(ax & 0x8080))
        goto loc_1c673b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c671c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6722));
    if (dx == 0x8080)
        goto loc_1c673b;
    if (dl & 0x80)
        goto loc_1c6734;
    al = dl;
loc_1c6734: // 0160:1c6734
    if (dh & 0x80)
        goto loc_1c673b;
    ah = dh;
loc_1c673b: // 0160:1c673b
    memoryASet16(ds, edi + 172, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6744));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c674a));
    if (!(eax & 0x00008080))
        goto loc_1c67a1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6759));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c675f));
    if (dx == 0x8080)
        goto loc_1c6778;
    if (dl & 0x80)
        goto loc_1c6771;
    al = dl;
loc_1c6771: // 0160:1c6771
    if (dh & 0x80)
        goto loc_1c6778;
    ah = dh;
loc_1c6778: // 0160:1c6778
    if (!(ax & 0x8080))
        goto loc_1c67a1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6782));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6788));
    if (dx == 0x8080)
        goto loc_1c67a1;
    if (dl & 0x80)
        goto loc_1c679a;
    al = dl;
loc_1c679a: // 0160:1c679a
    if (dh & 0x80)
        goto loc_1c67a1;
    ah = dh;
loc_1c67a1: // 0160:1c67a1
    memoryASet16(ds, edi + 174, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c67aa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c67b0));
    if (!(eax & 0x00008080))
        goto loc_1c6807;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c67bf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c67c5));
    if (dx == 0x8080)
        goto loc_1c67de;
    if (dl & 0x80)
        goto loc_1c67d7;
    al = dl;
loc_1c67d7: // 0160:1c67d7
    if (dh & 0x80)
        goto loc_1c67de;
    ah = dh;
loc_1c67de: // 0160:1c67de
    if (!(ax & 0x8080))
        goto loc_1c6807;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c67e8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c67ee));
    if (dx == 0x8080)
        goto loc_1c6807;
    if (dl & 0x80)
        goto loc_1c6800;
    al = dl;
loc_1c6800: // 0160:1c6800
    if (dh & 0x80)
        goto loc_1c6807;
    ah = dh;
loc_1c6807: // 0160:1c6807
    memoryASet16(ds, edi + 176, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6810));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6816));
    if (!(eax & 0x00008080))
        goto loc_1c686d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6825));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c682b));
    if (dx == 0x8080)
        goto loc_1c6844;
    if (dl & 0x80)
        goto loc_1c683d;
    al = dl;
loc_1c683d: // 0160:1c683d
    if (dh & 0x80)
        goto loc_1c6844;
    ah = dh;
loc_1c6844: // 0160:1c6844
    if (!(ax & 0x8080))
        goto loc_1c686d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c684e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6854));
    if (dx == 0x8080)
        goto loc_1c686d;
    if (dl & 0x80)
        goto loc_1c6866;
    al = dl;
loc_1c6866: // 0160:1c6866
    if (dh & 0x80)
        goto loc_1c686d;
    ah = dh;
loc_1c686d: // 0160:1c686d
    memoryASet16(ds, edi + 178, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6876));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c687c));
    if (!(eax & 0x00008080))
        goto loc_1c68d3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c688b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6891));
    if (dx == 0x8080)
        goto loc_1c68aa;
    if (dl & 0x80)
        goto loc_1c68a3;
    al = dl;
loc_1c68a3: // 0160:1c68a3
    if (dh & 0x80)
        goto loc_1c68aa;
    ah = dh;
loc_1c68aa: // 0160:1c68aa
    if (!(ax & 0x8080))
        goto loc_1c68d3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c68b4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c68ba));
    if (dx == 0x8080)
        goto loc_1c68d3;
    if (dl & 0x80)
        goto loc_1c68cc;
    al = dl;
loc_1c68cc: // 0160:1c68cc
    if (dh & 0x80)
        goto loc_1c68d3;
    ah = dh;
loc_1c68d3: // 0160:1c68d3
    memoryASet16(ds, edi + 180, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c68dc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c68e2));
    if (!(eax & 0x00008080))
        goto loc_1c6939;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c68f1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c68f7));
    if (dx == 0x8080)
        goto loc_1c6910;
    if (dl & 0x80)
        goto loc_1c6909;
    al = dl;
loc_1c6909: // 0160:1c6909
    if (dh & 0x80)
        goto loc_1c6910;
    ah = dh;
loc_1c6910: // 0160:1c6910
    if (!(ax & 0x8080))
        goto loc_1c6939;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c691a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6920));
    if (dx == 0x8080)
        goto loc_1c6939;
    if (dl & 0x80)
        goto loc_1c6932;
    al = dl;
loc_1c6932: // 0160:1c6932
    if (dh & 0x80)
        goto loc_1c6939;
    ah = dh;
loc_1c6939: // 0160:1c6939
    memoryASet16(ds, edi + 182, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6942));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6948));
    if (!(eax & 0x00008080))
        goto loc_1c699f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6957));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c695d));
    if (dx == 0x8080)
        goto loc_1c6976;
    if (dl & 0x80)
        goto loc_1c696f;
    al = dl;
loc_1c696f: // 0160:1c696f
    if (dh & 0x80)
        goto loc_1c6976;
    ah = dh;
loc_1c6976: // 0160:1c6976
    if (!(ax & 0x8080))
        goto loc_1c699f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6980));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6986));
    if (dx == 0x8080)
        goto loc_1c699f;
    if (dl & 0x80)
        goto loc_1c6998;
    al = dl;
loc_1c6998: // 0160:1c6998
    if (dh & 0x80)
        goto loc_1c699f;
    ah = dh;
loc_1c699f: // 0160:1c699f
    memoryASet16(ds, edi + 184, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c69a8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c69ae));
    if (!(eax & 0x00008080))
        goto loc_1c6a05;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c69bd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c69c3));
    if (dx == 0x8080)
        goto loc_1c69dc;
    if (dl & 0x80)
        goto loc_1c69d5;
    al = dl;
loc_1c69d5: // 0160:1c69d5
    if (dh & 0x80)
        goto loc_1c69dc;
    ah = dh;
loc_1c69dc: // 0160:1c69dc
    if (!(ax & 0x8080))
        goto loc_1c6a05;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c69e6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c69ec));
    if (dx == 0x8080)
        goto loc_1c6a05;
    if (dl & 0x80)
        goto loc_1c69fe;
    al = dl;
loc_1c69fe: // 0160:1c69fe
    if (dh & 0x80)
        goto loc_1c6a05;
    ah = dh;
loc_1c6a05: // 0160:1c6a05
    memoryASet16(ds, edi + 186, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6a0e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6a14));
    if (!(eax & 0x00008080))
        goto loc_1c6a6b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6a23));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6a29));
    if (dx == 0x8080)
        goto loc_1c6a42;
    if (dl & 0x80)
        goto loc_1c6a3b;
    al = dl;
loc_1c6a3b: // 0160:1c6a3b
    if (dh & 0x80)
        goto loc_1c6a42;
    ah = dh;
loc_1c6a42: // 0160:1c6a42
    if (!(ax & 0x8080))
        goto loc_1c6a6b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6a4c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6a52));
    if (dx == 0x8080)
        goto loc_1c6a6b;
    if (dl & 0x80)
        goto loc_1c6a64;
    al = dl;
loc_1c6a64: // 0160:1c6a64
    if (dh & 0x80)
        goto loc_1c6a6b;
    ah = dh;
loc_1c6a6b: // 0160:1c6a6b
    memoryASet16(ds, edi + 188, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6a74));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6a7a));
    if (!(eax & 0x00008080))
        goto loc_1c6ad1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6a89));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6a8f));
    if (dx == 0x8080)
        goto loc_1c6aa8;
    if (dl & 0x80)
        goto loc_1c6aa1;
    al = dl;
loc_1c6aa1: // 0160:1c6aa1
    if (dh & 0x80)
        goto loc_1c6aa8;
    ah = dh;
loc_1c6aa8: // 0160:1c6aa8
    if (!(ax & 0x8080))
        goto loc_1c6ad1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6ab2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6ab8));
    if (dx == 0x8080)
        goto loc_1c6ad1;
    if (dl & 0x80)
        goto loc_1c6aca;
    al = dl;
loc_1c6aca: // 0160:1c6aca
    if (dh & 0x80)
        goto loc_1c6ad1;
    ah = dh;
loc_1c6ad1: // 0160:1c6ad1
    memoryASet16(ds, edi + 190, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6ada));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6ae0));
    if (!(eax & 0x00008080))
        goto loc_1c6b37;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6aef));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6af5));
    if (dx == 0x8080)
        goto loc_1c6b0e;
    if (dl & 0x80)
        goto loc_1c6b07;
    al = dl;
loc_1c6b07: // 0160:1c6b07
    if (dh & 0x80)
        goto loc_1c6b0e;
    ah = dh;
loc_1c6b0e: // 0160:1c6b0e
    if (!(ax & 0x8080))
        goto loc_1c6b37;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6b18));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6b1e));
    if (dx == 0x8080)
        goto loc_1c6b37;
    if (dl & 0x80)
        goto loc_1c6b30;
    al = dl;
loc_1c6b30: // 0160:1c6b30
    if (dh & 0x80)
        goto loc_1c6b37;
    ah = dh;
loc_1c6b37: // 0160:1c6b37
    memoryASet16(ds, edi + 192, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6b40));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6b46));
    if (!(eax & 0x00008080))
        goto loc_1c6b9d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6b55));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6b5b));
    if (dx == 0x8080)
        goto loc_1c6b74;
    if (dl & 0x80)
        goto loc_1c6b6d;
    al = dl;
loc_1c6b6d: // 0160:1c6b6d
    if (dh & 0x80)
        goto loc_1c6b74;
    ah = dh;
loc_1c6b74: // 0160:1c6b74
    if (!(ax & 0x8080))
        goto loc_1c6b9d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6b7e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6b84));
    if (dx == 0x8080)
        goto loc_1c6b9d;
    if (dl & 0x80)
        goto loc_1c6b96;
    al = dl;
loc_1c6b96: // 0160:1c6b96
    if (dh & 0x80)
        goto loc_1c6b9d;
    ah = dh;
loc_1c6b9d: // 0160:1c6b9d
    memoryASet16(ds, edi + 194, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6ba6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6bac));
    if (!(eax & 0x00008080))
        goto loc_1c6c03;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6bbb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6bc1));
    if (dx == 0x8080)
        goto loc_1c6bda;
    if (dl & 0x80)
        goto loc_1c6bd3;
    al = dl;
loc_1c6bd3: // 0160:1c6bd3
    if (dh & 0x80)
        goto loc_1c6bda;
    ah = dh;
loc_1c6bda: // 0160:1c6bda
    if (!(ax & 0x8080))
        goto loc_1c6c03;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6be4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6bea));
    if (dx == 0x8080)
        goto loc_1c6c03;
    if (dl & 0x80)
        goto loc_1c6bfc;
    al = dl;
loc_1c6bfc: // 0160:1c6bfc
    if (dh & 0x80)
        goto loc_1c6c03;
    ah = dh;
loc_1c6c03: // 0160:1c6c03
    memoryASet16(ds, edi + 196, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6c0c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6c12));
    if (!(eax & 0x00008080))
        goto loc_1c6c69;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6c21));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6c27));
    if (dx == 0x8080)
        goto loc_1c6c40;
    if (dl & 0x80)
        goto loc_1c6c39;
    al = dl;
loc_1c6c39: // 0160:1c6c39
    if (dh & 0x80)
        goto loc_1c6c40;
    ah = dh;
loc_1c6c40: // 0160:1c6c40
    if (!(ax & 0x8080))
        goto loc_1c6c69;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6c4a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6c50));
    if (dx == 0x8080)
        goto loc_1c6c69;
    if (dl & 0x80)
        goto loc_1c6c62;
    al = dl;
loc_1c6c62: // 0160:1c6c62
    if (dh & 0x80)
        goto loc_1c6c69;
    ah = dh;
loc_1c6c69: // 0160:1c6c69
    memoryASet16(ds, edi + 198, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6c72));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6c78));
    if (!(eax & 0x00008080))
        goto loc_1c6ccf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6c87));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6c8d));
    if (dx == 0x8080)
        goto loc_1c6ca6;
    if (dl & 0x80)
        goto loc_1c6c9f;
    al = dl;
loc_1c6c9f: // 0160:1c6c9f
    if (dh & 0x80)
        goto loc_1c6ca6;
    ah = dh;
loc_1c6ca6: // 0160:1c6ca6
    if (!(ax & 0x8080))
        goto loc_1c6ccf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6cb0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6cb6));
    if (dx == 0x8080)
        goto loc_1c6ccf;
    if (dl & 0x80)
        goto loc_1c6cc8;
    al = dl;
loc_1c6cc8: // 0160:1c6cc8
    if (dh & 0x80)
        goto loc_1c6ccf;
    ah = dh;
loc_1c6ccf: // 0160:1c6ccf
    memoryASet16(ds, edi + 200, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6cd8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6cde));
    if (!(eax & 0x00008080))
        goto loc_1c6d35;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6ced));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6cf3));
    if (dx == 0x8080)
        goto loc_1c6d0c;
    if (dl & 0x80)
        goto loc_1c6d05;
    al = dl;
loc_1c6d05: // 0160:1c6d05
    if (dh & 0x80)
        goto loc_1c6d0c;
    ah = dh;
loc_1c6d0c: // 0160:1c6d0c
    if (!(ax & 0x8080))
        goto loc_1c6d35;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6d16));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6d1c));
    if (dx == 0x8080)
        goto loc_1c6d35;
    if (dl & 0x80)
        goto loc_1c6d2e;
    al = dl;
loc_1c6d2e: // 0160:1c6d2e
    if (dh & 0x80)
        goto loc_1c6d35;
    ah = dh;
loc_1c6d35: // 0160:1c6d35
    memoryASet16(ds, edi + 202, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6d3e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6d44));
    if (!(eax & 0x00008080))
        goto loc_1c6d9b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6d53));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6d59));
    if (dx == 0x8080)
        goto loc_1c6d72;
    if (dl & 0x80)
        goto loc_1c6d6b;
    al = dl;
loc_1c6d6b: // 0160:1c6d6b
    if (dh & 0x80)
        goto loc_1c6d72;
    ah = dh;
loc_1c6d72: // 0160:1c6d72
    if (!(ax & 0x8080))
        goto loc_1c6d9b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6d7c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6d82));
    if (dx == 0x8080)
        goto loc_1c6d9b;
    if (dl & 0x80)
        goto loc_1c6d94;
    al = dl;
loc_1c6d94: // 0160:1c6d94
    if (dh & 0x80)
        goto loc_1c6d9b;
    ah = dh;
loc_1c6d9b: // 0160:1c6d9b
    memoryASet16(ds, edi + 204, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6da4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6daa));
    if (!(eax & 0x00008080))
        goto loc_1c6e01;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6db9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6dbf));
    if (dx == 0x8080)
        goto loc_1c6dd8;
    if (dl & 0x80)
        goto loc_1c6dd1;
    al = dl;
loc_1c6dd1: // 0160:1c6dd1
    if (dh & 0x80)
        goto loc_1c6dd8;
    ah = dh;
loc_1c6dd8: // 0160:1c6dd8
    if (!(ax & 0x8080))
        goto loc_1c6e01;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6de2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6de8));
    if (dx == 0x8080)
        goto loc_1c6e01;
    if (dl & 0x80)
        goto loc_1c6dfa;
    al = dl;
loc_1c6dfa: // 0160:1c6dfa
    if (dh & 0x80)
        goto loc_1c6e01;
    ah = dh;
loc_1c6e01: // 0160:1c6e01
    memoryASet16(ds, edi + 206, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6e0a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6e10));
    if (!(eax & 0x00008080))
        goto loc_1c6e67;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6e1f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6e25));
    if (dx == 0x8080)
        goto loc_1c6e3e;
    if (dl & 0x80)
        goto loc_1c6e37;
    al = dl;
loc_1c6e37: // 0160:1c6e37
    if (dh & 0x80)
        goto loc_1c6e3e;
    ah = dh;
loc_1c6e3e: // 0160:1c6e3e
    if (!(ax & 0x8080))
        goto loc_1c6e67;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6e48));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6e4e));
    if (dx == 0x8080)
        goto loc_1c6e67;
    if (dl & 0x80)
        goto loc_1c6e60;
    al = dl;
loc_1c6e60: // 0160:1c6e60
    if (dh & 0x80)
        goto loc_1c6e67;
    ah = dh;
loc_1c6e67: // 0160:1c6e67
    memoryASet16(ds, edi + 208, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6e70));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6e76));
    if (!(eax & 0x00008080))
        goto loc_1c6ecd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6e85));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6e8b));
    if (dx == 0x8080)
        goto loc_1c6ea4;
    if (dl & 0x80)
        goto loc_1c6e9d;
    al = dl;
loc_1c6e9d: // 0160:1c6e9d
    if (dh & 0x80)
        goto loc_1c6ea4;
    ah = dh;
loc_1c6ea4: // 0160:1c6ea4
    if (!(ax & 0x8080))
        goto loc_1c6ecd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6eae));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6eb4));
    if (dx == 0x8080)
        goto loc_1c6ecd;
    if (dl & 0x80)
        goto loc_1c6ec6;
    al = dl;
loc_1c6ec6: // 0160:1c6ec6
    if (dh & 0x80)
        goto loc_1c6ecd;
    ah = dh;
loc_1c6ecd: // 0160:1c6ecd
    memoryASet16(ds, edi + 210, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6ed6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6edc));
    if (!(eax & 0x00008080))
        goto loc_1c6f33;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6eeb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6ef1));
    if (dx == 0x8080)
        goto loc_1c6f0a;
    if (dl & 0x80)
        goto loc_1c6f03;
    al = dl;
loc_1c6f03: // 0160:1c6f03
    if (dh & 0x80)
        goto loc_1c6f0a;
    ah = dh;
loc_1c6f0a: // 0160:1c6f0a
    if (!(ax & 0x8080))
        goto loc_1c6f33;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6f14));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6f1a));
    if (dx == 0x8080)
        goto loc_1c6f33;
    if (dl & 0x80)
        goto loc_1c6f2c;
    al = dl;
loc_1c6f2c: // 0160:1c6f2c
    if (dh & 0x80)
        goto loc_1c6f33;
    ah = dh;
loc_1c6f33: // 0160:1c6f33
    memoryASet16(ds, edi + 212, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6f3c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6f42));
    if (!(eax & 0x00008080))
        goto loc_1c6f99;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6f51));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6f57));
    if (dx == 0x8080)
        goto loc_1c6f70;
    if (dl & 0x80)
        goto loc_1c6f69;
    al = dl;
loc_1c6f69: // 0160:1c6f69
    if (dh & 0x80)
        goto loc_1c6f70;
    ah = dh;
loc_1c6f70: // 0160:1c6f70
    if (!(ax & 0x8080))
        goto loc_1c6f99;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6f7a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6f80));
    if (dx == 0x8080)
        goto loc_1c6f99;
    if (dl & 0x80)
        goto loc_1c6f92;
    al = dl;
loc_1c6f92: // 0160:1c6f92
    if (dh & 0x80)
        goto loc_1c6f99;
    ah = dh;
loc_1c6f99: // 0160:1c6f99
    memoryASet16(ds, edi + 214, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6fa2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c6fa8));
    if (!(eax & 0x00008080))
        goto loc_1c6fff;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6fb7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c6fbd));
    if (dx == 0x8080)
        goto loc_1c6fd6;
    if (dl & 0x80)
        goto loc_1c6fcf;
    al = dl;
loc_1c6fcf: // 0160:1c6fcf
    if (dh & 0x80)
        goto loc_1c6fd6;
    ah = dh;
loc_1c6fd6: // 0160:1c6fd6
    if (!(ax & 0x8080))
        goto loc_1c6fff;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6fe0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c6fe6));
    if (dx == 0x8080)
        goto loc_1c6fff;
    if (dl & 0x80)
        goto loc_1c6ff8;
    al = dl;
loc_1c6ff8: // 0160:1c6ff8
    if (dh & 0x80)
        goto loc_1c6fff;
    ah = dh;
loc_1c6fff: // 0160:1c6fff
    memoryASet16(ds, edi + 216, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7008));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c700e));
    if (!(eax & 0x00008080))
        goto loc_1c7065;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c701d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7023));
    if (dx == 0x8080)
        goto loc_1c703c;
    if (dl & 0x80)
        goto loc_1c7035;
    al = dl;
loc_1c7035: // 0160:1c7035
    if (dh & 0x80)
        goto loc_1c703c;
    ah = dh;
loc_1c703c: // 0160:1c703c
    if (!(ax & 0x8080))
        goto loc_1c7065;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7046));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c704c));
    if (dx == 0x8080)
        goto loc_1c7065;
    if (dl & 0x80)
        goto loc_1c705e;
    al = dl;
loc_1c705e: // 0160:1c705e
    if (dh & 0x80)
        goto loc_1c7065;
    ah = dh;
loc_1c7065: // 0160:1c7065
    memoryASet16(ds, edi + 218, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c706e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7074));
    if (!(eax & 0x00008080))
        goto loc_1c70cb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7083));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7089));
    if (dx == 0x8080)
        goto loc_1c70a2;
    if (dl & 0x80)
        goto loc_1c709b;
    al = dl;
loc_1c709b: // 0160:1c709b
    if (dh & 0x80)
        goto loc_1c70a2;
    ah = dh;
loc_1c70a2: // 0160:1c70a2
    if (!(ax & 0x8080))
        goto loc_1c70cb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c70ac));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c70b2));
    if (dx == 0x8080)
        goto loc_1c70cb;
    if (dl & 0x80)
        goto loc_1c70c4;
    al = dl;
loc_1c70c4: // 0160:1c70c4
    if (dh & 0x80)
        goto loc_1c70cb;
    ah = dh;
loc_1c70cb: // 0160:1c70cb
    memoryASet16(ds, edi + 220, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c70d4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c70da));
    if (!(eax & 0x00008080))
        goto loc_1c7131;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c70e9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c70ef));
    if (dx == 0x8080)
        goto loc_1c7108;
    if (dl & 0x80)
        goto loc_1c7101;
    al = dl;
loc_1c7101: // 0160:1c7101
    if (dh & 0x80)
        goto loc_1c7108;
    ah = dh;
loc_1c7108: // 0160:1c7108
    if (!(ax & 0x8080))
        goto loc_1c7131;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7112));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7118));
    if (dx == 0x8080)
        goto loc_1c7131;
    if (dl & 0x80)
        goto loc_1c712a;
    al = dl;
loc_1c712a: // 0160:1c712a
    if (dh & 0x80)
        goto loc_1c7131;
    ah = dh;
loc_1c7131: // 0160:1c7131
    memoryASet16(ds, edi + 222, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c713a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7140));
    if (!(eax & 0x00008080))
        goto loc_1c7197;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c714f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7155));
    if (dx == 0x8080)
        goto loc_1c716e;
    if (dl & 0x80)
        goto loc_1c7167;
    al = dl;
loc_1c7167: // 0160:1c7167
    if (dh & 0x80)
        goto loc_1c716e;
    ah = dh;
loc_1c716e: // 0160:1c716e
    if (!(ax & 0x8080))
        goto loc_1c7197;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7178));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c717e));
    if (dx == 0x8080)
        goto loc_1c7197;
    if (dl & 0x80)
        goto loc_1c7190;
    al = dl;
loc_1c7190: // 0160:1c7190
    if (dh & 0x80)
        goto loc_1c7197;
    ah = dh;
loc_1c7197: // 0160:1c7197
    memoryASet16(ds, edi + 224, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c71a0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c71a6));
    if (!(eax & 0x00008080))
        goto loc_1c71fd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c71b5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c71bb));
    if (dx == 0x8080)
        goto loc_1c71d4;
    if (dl & 0x80)
        goto loc_1c71cd;
    al = dl;
loc_1c71cd: // 0160:1c71cd
    if (dh & 0x80)
        goto loc_1c71d4;
    ah = dh;
loc_1c71d4: // 0160:1c71d4
    if (!(ax & 0x8080))
        goto loc_1c71fd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c71de));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c71e4));
    if (dx == 0x8080)
        goto loc_1c71fd;
    if (dl & 0x80)
        goto loc_1c71f6;
    al = dl;
loc_1c71f6: // 0160:1c71f6
    if (dh & 0x80)
        goto loc_1c71fd;
    ah = dh;
loc_1c71fd: // 0160:1c71fd
    memoryASet16(ds, edi + 226, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7206));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c720c));
    if (!(eax & 0x00008080))
        goto loc_1c7263;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c721b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7221));
    if (dx == 0x8080)
        goto loc_1c723a;
    if (dl & 0x80)
        goto loc_1c7233;
    al = dl;
loc_1c7233: // 0160:1c7233
    if (dh & 0x80)
        goto loc_1c723a;
    ah = dh;
loc_1c723a: // 0160:1c723a
    if (!(ax & 0x8080))
        goto loc_1c7263;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7244));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c724a));
    if (dx == 0x8080)
        goto loc_1c7263;
    if (dl & 0x80)
        goto loc_1c725c;
    al = dl;
loc_1c725c: // 0160:1c725c
    if (dh & 0x80)
        goto loc_1c7263;
    ah = dh;
loc_1c7263: // 0160:1c7263
    memoryASet16(ds, edi + 228, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c726c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7272));
    if (!(eax & 0x00008080))
        goto loc_1c72c9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7281));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7287));
    if (dx == 0x8080)
        goto loc_1c72a0;
    if (dl & 0x80)
        goto loc_1c7299;
    al = dl;
loc_1c7299: // 0160:1c7299
    if (dh & 0x80)
        goto loc_1c72a0;
    ah = dh;
loc_1c72a0: // 0160:1c72a0
    if (!(ax & 0x8080))
        goto loc_1c72c9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c72aa));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c72b0));
    if (dx == 0x8080)
        goto loc_1c72c9;
    if (dl & 0x80)
        goto loc_1c72c2;
    al = dl;
loc_1c72c2: // 0160:1c72c2
    if (dh & 0x80)
        goto loc_1c72c9;
    ah = dh;
loc_1c72c9: // 0160:1c72c9
    memoryASet16(ds, edi + 230, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c72d2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c72d8));
    if (!(eax & 0x00008080))
        goto loc_1c732f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c72e7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c72ed));
    if (dx == 0x8080)
        goto loc_1c7306;
    if (dl & 0x80)
        goto loc_1c72ff;
    al = dl;
loc_1c72ff: // 0160:1c72ff
    if (dh & 0x80)
        goto loc_1c7306;
    ah = dh;
loc_1c7306: // 0160:1c7306
    if (!(ax & 0x8080))
        goto loc_1c732f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7310));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7316));
    if (dx == 0x8080)
        goto loc_1c732f;
    if (dl & 0x80)
        goto loc_1c7328;
    al = dl;
loc_1c7328: // 0160:1c7328
    if (dh & 0x80)
        goto loc_1c732f;
    ah = dh;
loc_1c732f: // 0160:1c732f
    memoryASet16(ds, edi + 232, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7338));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c733e));
    if (!(eax & 0x00008080))
        goto loc_1c7395;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c734d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7353));
    if (dx == 0x8080)
        goto loc_1c736c;
    if (dl & 0x80)
        goto loc_1c7365;
    al = dl;
loc_1c7365: // 0160:1c7365
    if (dh & 0x80)
        goto loc_1c736c;
    ah = dh;
loc_1c736c: // 0160:1c736c
    if (!(ax & 0x8080))
        goto loc_1c7395;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7376));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c737c));
    if (dx == 0x8080)
        goto loc_1c7395;
    if (dl & 0x80)
        goto loc_1c738e;
    al = dl;
loc_1c738e: // 0160:1c738e
    if (dh & 0x80)
        goto loc_1c7395;
    ah = dh;
loc_1c7395: // 0160:1c7395
    memoryASet16(ds, edi + 234, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c739e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c73a4));
    if (!(eax & 0x00008080))
        goto loc_1c73fb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c73b3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c73b9));
    if (dx == 0x8080)
        goto loc_1c73d2;
    if (dl & 0x80)
        goto loc_1c73cb;
    al = dl;
loc_1c73cb: // 0160:1c73cb
    if (dh & 0x80)
        goto loc_1c73d2;
    ah = dh;
loc_1c73d2: // 0160:1c73d2
    if (!(ax & 0x8080))
        goto loc_1c73fb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c73dc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c73e2));
    if (dx == 0x8080)
        goto loc_1c73fb;
    if (dl & 0x80)
        goto loc_1c73f4;
    al = dl;
loc_1c73f4: // 0160:1c73f4
    if (dh & 0x80)
        goto loc_1c73fb;
    ah = dh;
loc_1c73fb: // 0160:1c73fb
    memoryASet16(ds, edi + 236, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7404));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c740a));
    if (!(eax & 0x00008080))
        goto loc_1c7461;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7419));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c741f));
    if (dx == 0x8080)
        goto loc_1c7438;
    if (dl & 0x80)
        goto loc_1c7431;
    al = dl;
loc_1c7431: // 0160:1c7431
    if (dh & 0x80)
        goto loc_1c7438;
    ah = dh;
loc_1c7438: // 0160:1c7438
    if (!(ax & 0x8080))
        goto loc_1c7461;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7442));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7448));
    if (dx == 0x8080)
        goto loc_1c7461;
    if (dl & 0x80)
        goto loc_1c745a;
    al = dl;
loc_1c745a: // 0160:1c745a
    if (dh & 0x80)
        goto loc_1c7461;
    ah = dh;
loc_1c7461: // 0160:1c7461
    memoryASet16(ds, edi + 238, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c746a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7470));
    if (!(eax & 0x00008080))
        goto loc_1c74c7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c747f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7485));
    if (dx == 0x8080)
        goto loc_1c749e;
    if (dl & 0x80)
        goto loc_1c7497;
    al = dl;
loc_1c7497: // 0160:1c7497
    if (dh & 0x80)
        goto loc_1c749e;
    ah = dh;
loc_1c749e: // 0160:1c749e
    if (!(ax & 0x8080))
        goto loc_1c74c7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c74a8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c74ae));
    if (dx == 0x8080)
        goto loc_1c74c7;
    if (dl & 0x80)
        goto loc_1c74c0;
    al = dl;
loc_1c74c0: // 0160:1c74c0
    if (dh & 0x80)
        goto loc_1c74c7;
    ah = dh;
loc_1c74c7: // 0160:1c74c7
    memoryASet16(ds, edi + 240, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c74d0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c74d6));
    if (!(eax & 0x00008080))
        goto loc_1c752d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c74e5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c74eb));
    if (dx == 0x8080)
        goto loc_1c7504;
    if (dl & 0x80)
        goto loc_1c74fd;
    al = dl;
loc_1c74fd: // 0160:1c74fd
    if (dh & 0x80)
        goto loc_1c7504;
    ah = dh;
loc_1c7504: // 0160:1c7504
    if (!(ax & 0x8080))
        goto loc_1c752d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c750e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7514));
    if (dx == 0x8080)
        goto loc_1c752d;
    if (dl & 0x80)
        goto loc_1c7526;
    al = dl;
loc_1c7526: // 0160:1c7526
    if (dh & 0x80)
        goto loc_1c752d;
    ah = dh;
loc_1c752d: // 0160:1c752d
    memoryASet16(ds, edi + 242, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7536));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c753c));
    if (!(eax & 0x00008080))
        goto loc_1c7593;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c754b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7551));
    if (dx == 0x8080)
        goto loc_1c756a;
    if (dl & 0x80)
        goto loc_1c7563;
    al = dl;
loc_1c7563: // 0160:1c7563
    if (dh & 0x80)
        goto loc_1c756a;
    ah = dh;
loc_1c756a: // 0160:1c756a
    if (!(ax & 0x8080))
        goto loc_1c7593;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7574));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c757a));
    if (dx == 0x8080)
        goto loc_1c7593;
    if (dl & 0x80)
        goto loc_1c758c;
    al = dl;
loc_1c758c: // 0160:1c758c
    if (dh & 0x80)
        goto loc_1c7593;
    ah = dh;
loc_1c7593: // 0160:1c7593
    memoryASet16(ds, edi + 244, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c759c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c75a2));
    if (!(eax & 0x00008080))
        goto loc_1c75f9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c75b1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c75b7));
    if (dx == 0x8080)
        goto loc_1c75d0;
    if (dl & 0x80)
        goto loc_1c75c9;
    al = dl;
loc_1c75c9: // 0160:1c75c9
    if (dh & 0x80)
        goto loc_1c75d0;
    ah = dh;
loc_1c75d0: // 0160:1c75d0
    if (!(ax & 0x8080))
        goto loc_1c75f9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c75da));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c75e0));
    if (dx == 0x8080)
        goto loc_1c75f9;
    if (dl & 0x80)
        goto loc_1c75f2;
    al = dl;
loc_1c75f2: // 0160:1c75f2
    if (dh & 0x80)
        goto loc_1c75f9;
    ah = dh;
loc_1c75f9: // 0160:1c75f9
    memoryASet16(ds, edi + 246, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7602));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7608));
    if (!(eax & 0x00008080))
        goto loc_1c765f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7617));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c761d));
    if (dx == 0x8080)
        goto loc_1c7636;
    if (dl & 0x80)
        goto loc_1c762f;
    al = dl;
loc_1c762f: // 0160:1c762f
    if (dh & 0x80)
        goto loc_1c7636;
    ah = dh;
loc_1c7636: // 0160:1c7636
    if (!(ax & 0x8080))
        goto loc_1c765f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7640));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7646));
    if (dx == 0x8080)
        goto loc_1c765f;
    if (dl & 0x80)
        goto loc_1c7658;
    al = dl;
loc_1c7658: // 0160:1c7658
    if (dh & 0x80)
        goto loc_1c765f;
    ah = dh;
loc_1c765f: // 0160:1c765f
    memoryASet16(ds, edi + 248, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7668));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c766e));
    if (!(eax & 0x00008080))
        goto loc_1c76c5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c767d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7683));
    if (dx == 0x8080)
        goto loc_1c769c;
    if (dl & 0x80)
        goto loc_1c7695;
    al = dl;
loc_1c7695: // 0160:1c7695
    if (dh & 0x80)
        goto loc_1c769c;
    ah = dh;
loc_1c769c: // 0160:1c769c
    if (!(ax & 0x8080))
        goto loc_1c76c5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c76a6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c76ac));
    if (dx == 0x8080)
        goto loc_1c76c5;
    if (dl & 0x80)
        goto loc_1c76be;
    al = dl;
loc_1c76be: // 0160:1c76be
    if (dh & 0x80)
        goto loc_1c76c5;
    ah = dh;
loc_1c76c5: // 0160:1c76c5
    memoryASet16(ds, edi + 250, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c76ce));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c76d4));
    if (!(eax & 0x00008080))
        goto loc_1c772b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c76e3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c76e9));
    if (dx == 0x8080)
        goto loc_1c7702;
    if (dl & 0x80)
        goto loc_1c76fb;
    al = dl;
loc_1c76fb: // 0160:1c76fb
    if (dh & 0x80)
        goto loc_1c7702;
    ah = dh;
loc_1c7702: // 0160:1c7702
    if (!(ax & 0x8080))
        goto loc_1c772b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c770c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7712));
    if (dx == 0x8080)
        goto loc_1c772b;
    if (dl & 0x80)
        goto loc_1c7724;
    al = dl;
loc_1c7724: // 0160:1c7724
    if (dh & 0x80)
        goto loc_1c772b;
    ah = dh;
loc_1c772b: // 0160:1c772b
    memoryASet16(ds, edi + 252, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7734));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c773a));
    if (!(eax & 0x00008080))
        goto loc_1c7791;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7749));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c774f));
    if (dx == 0x8080)
        goto loc_1c7768;
    if (dl & 0x80)
        goto loc_1c7761;
    al = dl;
loc_1c7761: // 0160:1c7761
    if (dh & 0x80)
        goto loc_1c7768;
    ah = dh;
loc_1c7768: // 0160:1c7768
    if (!(ax & 0x8080))
        goto loc_1c7791;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7772));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7778));
    if (dx == 0x8080)
        goto loc_1c7791;
    if (dl & 0x80)
        goto loc_1c778a;
    al = dl;
loc_1c778a: // 0160:1c778a
    if (dh & 0x80)
        goto loc_1c7791;
    ah = dh;
loc_1c7791: // 0160:1c7791
    memoryASet16(ds, edi + 254, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c779a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c77a0));
    if (!(eax & 0x00008080))
        goto loc_1c77f7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c77af));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c77b5));
    if (dx == 0x8080)
        goto loc_1c77ce;
    if (dl & 0x80)
        goto loc_1c77c7;
    al = dl;
loc_1c77c7: // 0160:1c77c7
    if (dh & 0x80)
        goto loc_1c77ce;
    ah = dh;
loc_1c77ce: // 0160:1c77ce
    if (!(ax & 0x8080))
        goto loc_1c77f7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c77d8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c77de));
    if (dx == 0x8080)
        goto loc_1c77f7;
    if (dl & 0x80)
        goto loc_1c77f0;
    al = dl;
loc_1c77f0: // 0160:1c77f0
    if (dh & 0x80)
        goto loc_1c77f7;
    ah = dh;
loc_1c77f7: // 0160:1c77f7
    memoryASet16(ds, edi + 256, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7800));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7806));
    if (!(eax & 0x00008080))
        goto loc_1c785d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7815));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c781b));
    if (dx == 0x8080)
        goto loc_1c7834;
    if (dl & 0x80)
        goto loc_1c782d;
    al = dl;
loc_1c782d: // 0160:1c782d
    if (dh & 0x80)
        goto loc_1c7834;
    ah = dh;
loc_1c7834: // 0160:1c7834
    if (!(ax & 0x8080))
        goto loc_1c785d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c783e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7844));
    if (dx == 0x8080)
        goto loc_1c785d;
    if (dl & 0x80)
        goto loc_1c7856;
    al = dl;
loc_1c7856: // 0160:1c7856
    if (dh & 0x80)
        goto loc_1c785d;
    ah = dh;
loc_1c785d: // 0160:1c785d
    memoryASet16(ds, edi + 258, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7866));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c786c));
    if (!(eax & 0x00008080))
        goto loc_1c78c3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c787b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7881));
    if (dx == 0x8080)
        goto loc_1c789a;
    if (dl & 0x80)
        goto loc_1c7893;
    al = dl;
loc_1c7893: // 0160:1c7893
    if (dh & 0x80)
        goto loc_1c789a;
    ah = dh;
loc_1c789a: // 0160:1c789a
    if (!(ax & 0x8080))
        goto loc_1c78c3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c78a4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c78aa));
    if (dx == 0x8080)
        goto loc_1c78c3;
    if (dl & 0x80)
        goto loc_1c78bc;
    al = dl;
loc_1c78bc: // 0160:1c78bc
    if (dh & 0x80)
        goto loc_1c78c3;
    ah = dh;
loc_1c78c3: // 0160:1c78c3
    memoryASet16(ds, edi + 260, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c78cc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c78d2));
    if (!(eax & 0x00008080))
        goto loc_1c7929;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c78e1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c78e7));
    if (dx == 0x8080)
        goto loc_1c7900;
    if (dl & 0x80)
        goto loc_1c78f9;
    al = dl;
loc_1c78f9: // 0160:1c78f9
    if (dh & 0x80)
        goto loc_1c7900;
    ah = dh;
loc_1c7900: // 0160:1c7900
    if (!(ax & 0x8080))
        goto loc_1c7929;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c790a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7910));
    if (dx == 0x8080)
        goto loc_1c7929;
    if (dl & 0x80)
        goto loc_1c7922;
    al = dl;
loc_1c7922: // 0160:1c7922
    if (dh & 0x80)
        goto loc_1c7929;
    ah = dh;
loc_1c7929: // 0160:1c7929
    memoryASet16(ds, edi + 262, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7932));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7938));
    if (!(eax & 0x00008080))
        goto loc_1c798f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7947));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c794d));
    if (dx == 0x8080)
        goto loc_1c7966;
    if (dl & 0x80)
        goto loc_1c795f;
    al = dl;
loc_1c795f: // 0160:1c795f
    if (dh & 0x80)
        goto loc_1c7966;
    ah = dh;
loc_1c7966: // 0160:1c7966
    if (!(ax & 0x8080))
        goto loc_1c798f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7970));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7976));
    if (dx == 0x8080)
        goto loc_1c798f;
    if (dl & 0x80)
        goto loc_1c7988;
    al = dl;
loc_1c7988: // 0160:1c7988
    if (dh & 0x80)
        goto loc_1c798f;
    ah = dh;
loc_1c798f: // 0160:1c798f
    memoryASet16(ds, edi + 264, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7998));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c799e));
    if (!(eax & 0x00008080))
        goto loc_1c79f5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c79ad));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c79b3));
    if (dx == 0x8080)
        goto loc_1c79cc;
    if (dl & 0x80)
        goto loc_1c79c5;
    al = dl;
loc_1c79c5: // 0160:1c79c5
    if (dh & 0x80)
        goto loc_1c79cc;
    ah = dh;
loc_1c79cc: // 0160:1c79cc
    if (!(ax & 0x8080))
        goto loc_1c79f5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c79d6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c79dc));
    if (dx == 0x8080)
        goto loc_1c79f5;
    if (dl & 0x80)
        goto loc_1c79ee;
    al = dl;
loc_1c79ee: // 0160:1c79ee
    if (dh & 0x80)
        goto loc_1c79f5;
    ah = dh;
loc_1c79f5: // 0160:1c79f5
    memoryASet16(ds, edi + 266, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c79fe));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7a04));
    if (!(eax & 0x00008080))
        goto loc_1c7a5b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7a13));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7a19));
    if (dx == 0x8080)
        goto loc_1c7a32;
    if (dl & 0x80)
        goto loc_1c7a2b;
    al = dl;
loc_1c7a2b: // 0160:1c7a2b
    if (dh & 0x80)
        goto loc_1c7a32;
    ah = dh;
loc_1c7a32: // 0160:1c7a32
    if (!(ax & 0x8080))
        goto loc_1c7a5b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7a3c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7a42));
    if (dx == 0x8080)
        goto loc_1c7a5b;
    if (dl & 0x80)
        goto loc_1c7a54;
    al = dl;
loc_1c7a54: // 0160:1c7a54
    if (dh & 0x80)
        goto loc_1c7a5b;
    ah = dh;
loc_1c7a5b: // 0160:1c7a5b
    memoryASet16(ds, edi + 268, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7a64));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7a6a));
    if (!(eax & 0x00008080))
        goto loc_1c7ac1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7a79));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7a7f));
    if (dx == 0x8080)
        goto loc_1c7a98;
    if (dl & 0x80)
        goto loc_1c7a91;
    al = dl;
loc_1c7a91: // 0160:1c7a91
    if (dh & 0x80)
        goto loc_1c7a98;
    ah = dh;
loc_1c7a98: // 0160:1c7a98
    if (!(ax & 0x8080))
        goto loc_1c7ac1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7aa2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7aa8));
    if (dx == 0x8080)
        goto loc_1c7ac1;
    if (dl & 0x80)
        goto loc_1c7aba;
    al = dl;
loc_1c7aba: // 0160:1c7aba
    if (dh & 0x80)
        goto loc_1c7ac1;
    ah = dh;
loc_1c7ac1: // 0160:1c7ac1
    memoryASet16(ds, edi + 270, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7aca));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7ad0));
    if (!(eax & 0x00008080))
        goto loc_1c7b27;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7adf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7ae5));
    if (dx == 0x8080)
        goto loc_1c7afe;
    if (dl & 0x80)
        goto loc_1c7af7;
    al = dl;
loc_1c7af7: // 0160:1c7af7
    if (dh & 0x80)
        goto loc_1c7afe;
    ah = dh;
loc_1c7afe: // 0160:1c7afe
    if (!(ax & 0x8080))
        goto loc_1c7b27;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7b08));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7b0e));
    if (dx == 0x8080)
        goto loc_1c7b27;
    if (dl & 0x80)
        goto loc_1c7b20;
    al = dl;
loc_1c7b20: // 0160:1c7b20
    if (dh & 0x80)
        goto loc_1c7b27;
    ah = dh;
loc_1c7b27: // 0160:1c7b27
    memoryASet16(ds, edi + 272, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7b30));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7b36));
    if (!(eax & 0x00008080))
        goto loc_1c7b8d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7b45));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7b4b));
    if (dx == 0x8080)
        goto loc_1c7b64;
    if (dl & 0x80)
        goto loc_1c7b5d;
    al = dl;
loc_1c7b5d: // 0160:1c7b5d
    if (dh & 0x80)
        goto loc_1c7b64;
    ah = dh;
loc_1c7b64: // 0160:1c7b64
    if (!(ax & 0x8080))
        goto loc_1c7b8d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7b6e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7b74));
    if (dx == 0x8080)
        goto loc_1c7b8d;
    if (dl & 0x80)
        goto loc_1c7b86;
    al = dl;
loc_1c7b86: // 0160:1c7b86
    if (dh & 0x80)
        goto loc_1c7b8d;
    ah = dh;
loc_1c7b8d: // 0160:1c7b8d
    memoryASet16(ds, edi + 274, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7b96));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7b9c));
    if (!(eax & 0x00008080))
        goto loc_1c7bf3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7bab));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7bb1));
    if (dx == 0x8080)
        goto loc_1c7bca;
    if (dl & 0x80)
        goto loc_1c7bc3;
    al = dl;
loc_1c7bc3: // 0160:1c7bc3
    if (dh & 0x80)
        goto loc_1c7bca;
    ah = dh;
loc_1c7bca: // 0160:1c7bca
    if (!(ax & 0x8080))
        goto loc_1c7bf3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7bd4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7bda));
    if (dx == 0x8080)
        goto loc_1c7bf3;
    if (dl & 0x80)
        goto loc_1c7bec;
    al = dl;
loc_1c7bec: // 0160:1c7bec
    if (dh & 0x80)
        goto loc_1c7bf3;
    ah = dh;
loc_1c7bf3: // 0160:1c7bf3
    memoryASet16(ds, edi + 276, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7bfc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7c02));
    if (!(eax & 0x00008080))
        goto loc_1c7c59;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7c11));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7c17));
    if (dx == 0x8080)
        goto loc_1c7c30;
    if (dl & 0x80)
        goto loc_1c7c29;
    al = dl;
loc_1c7c29: // 0160:1c7c29
    if (dh & 0x80)
        goto loc_1c7c30;
    ah = dh;
loc_1c7c30: // 0160:1c7c30
    if (!(ax & 0x8080))
        goto loc_1c7c59;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7c3a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7c40));
    if (dx == 0x8080)
        goto loc_1c7c59;
    if (dl & 0x80)
        goto loc_1c7c52;
    al = dl;
loc_1c7c52: // 0160:1c7c52
    if (dh & 0x80)
        goto loc_1c7c59;
    ah = dh;
loc_1c7c59: // 0160:1c7c59
    memoryASet16(ds, edi + 278, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7c62));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7c68));
    if (!(eax & 0x00008080))
        goto loc_1c7cbf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7c77));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7c7d));
    if (dx == 0x8080)
        goto loc_1c7c96;
    if (dl & 0x80)
        goto loc_1c7c8f;
    al = dl;
loc_1c7c8f: // 0160:1c7c8f
    if (dh & 0x80)
        goto loc_1c7c96;
    ah = dh;
loc_1c7c96: // 0160:1c7c96
    if (!(ax & 0x8080))
        goto loc_1c7cbf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7ca0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7ca6));
    if (dx == 0x8080)
        goto loc_1c7cbf;
    if (dl & 0x80)
        goto loc_1c7cb8;
    al = dl;
loc_1c7cb8: // 0160:1c7cb8
    if (dh & 0x80)
        goto loc_1c7cbf;
    ah = dh;
loc_1c7cbf: // 0160:1c7cbf
    memoryASet16(ds, edi + 280, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7cc8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7cce));
    if (!(eax & 0x00008080))
        goto loc_1c7d25;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7cdd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7ce3));
    if (dx == 0x8080)
        goto loc_1c7cfc;
    if (dl & 0x80)
        goto loc_1c7cf5;
    al = dl;
loc_1c7cf5: // 0160:1c7cf5
    if (dh & 0x80)
        goto loc_1c7cfc;
    ah = dh;
loc_1c7cfc: // 0160:1c7cfc
    if (!(ax & 0x8080))
        goto loc_1c7d25;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7d06));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7d0c));
    if (dx == 0x8080)
        goto loc_1c7d25;
    if (dl & 0x80)
        goto loc_1c7d1e;
    al = dl;
loc_1c7d1e: // 0160:1c7d1e
    if (dh & 0x80)
        goto loc_1c7d25;
    ah = dh;
loc_1c7d25: // 0160:1c7d25
    memoryASet16(ds, edi + 282, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7d2e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7d34));
    if (!(eax & 0x00008080))
        goto loc_1c7d8b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7d43));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7d49));
    if (dx == 0x8080)
        goto loc_1c7d62;
    if (dl & 0x80)
        goto loc_1c7d5b;
    al = dl;
loc_1c7d5b: // 0160:1c7d5b
    if (dh & 0x80)
        goto loc_1c7d62;
    ah = dh;
loc_1c7d62: // 0160:1c7d62
    if (!(ax & 0x8080))
        goto loc_1c7d8b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7d6c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7d72));
    if (dx == 0x8080)
        goto loc_1c7d8b;
    if (dl & 0x80)
        goto loc_1c7d84;
    al = dl;
loc_1c7d84: // 0160:1c7d84
    if (dh & 0x80)
        goto loc_1c7d8b;
    ah = dh;
loc_1c7d8b: // 0160:1c7d8b
    memoryASet16(ds, edi + 284, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7d94));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7d9a));
    if (!(eax & 0x00008080))
        goto loc_1c7df1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7da9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7daf));
    if (dx == 0x8080)
        goto loc_1c7dc8;
    if (dl & 0x80)
        goto loc_1c7dc1;
    al = dl;
loc_1c7dc1: // 0160:1c7dc1
    if (dh & 0x80)
        goto loc_1c7dc8;
    ah = dh;
loc_1c7dc8: // 0160:1c7dc8
    if (!(ax & 0x8080))
        goto loc_1c7df1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7dd2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7dd8));
    if (dx == 0x8080)
        goto loc_1c7df1;
    if (dl & 0x80)
        goto loc_1c7dea;
    al = dl;
loc_1c7dea: // 0160:1c7dea
    if (dh & 0x80)
        goto loc_1c7df1;
    ah = dh;
loc_1c7df1: // 0160:1c7df1
    memoryASet16(ds, edi + 286, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7dfa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7e00));
    if (!(eax & 0x00008080))
        goto loc_1c7e57;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7e0f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7e15));
    if (dx == 0x8080)
        goto loc_1c7e2e;
    if (dl & 0x80)
        goto loc_1c7e27;
    al = dl;
loc_1c7e27: // 0160:1c7e27
    if (dh & 0x80)
        goto loc_1c7e2e;
    ah = dh;
loc_1c7e2e: // 0160:1c7e2e
    if (!(ax & 0x8080))
        goto loc_1c7e57;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7e38));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7e3e));
    if (dx == 0x8080)
        goto loc_1c7e57;
    if (dl & 0x80)
        goto loc_1c7e50;
    al = dl;
loc_1c7e50: // 0160:1c7e50
    if (dh & 0x80)
        goto loc_1c7e57;
    ah = dh;
loc_1c7e57: // 0160:1c7e57
    memoryASet16(ds, edi + 288, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7e60));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7e66));
    if (!(eax & 0x00008080))
        goto loc_1c7ebd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7e75));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7e7b));
    if (dx == 0x8080)
        goto loc_1c7e94;
    if (dl & 0x80)
        goto loc_1c7e8d;
    al = dl;
loc_1c7e8d: // 0160:1c7e8d
    if (dh & 0x80)
        goto loc_1c7e94;
    ah = dh;
loc_1c7e94: // 0160:1c7e94
    if (!(ax & 0x8080))
        goto loc_1c7ebd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7e9e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7ea4));
    if (dx == 0x8080)
        goto loc_1c7ebd;
    if (dl & 0x80)
        goto loc_1c7eb6;
    al = dl;
loc_1c7eb6: // 0160:1c7eb6
    if (dh & 0x80)
        goto loc_1c7ebd;
    ah = dh;
loc_1c7ebd: // 0160:1c7ebd
    memoryASet16(ds, edi + 290, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7ec6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7ecc));
    if (!(eax & 0x00008080))
        goto loc_1c7f23;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7edb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7ee1));
    if (dx == 0x8080)
        goto loc_1c7efa;
    if (dl & 0x80)
        goto loc_1c7ef3;
    al = dl;
loc_1c7ef3: // 0160:1c7ef3
    if (dh & 0x80)
        goto loc_1c7efa;
    ah = dh;
loc_1c7efa: // 0160:1c7efa
    if (!(ax & 0x8080))
        goto loc_1c7f23;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7f04));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7f0a));
    if (dx == 0x8080)
        goto loc_1c7f23;
    if (dl & 0x80)
        goto loc_1c7f1c;
    al = dl;
loc_1c7f1c: // 0160:1c7f1c
    if (dh & 0x80)
        goto loc_1c7f23;
    ah = dh;
loc_1c7f23: // 0160:1c7f23
    memoryASet16(ds, edi + 292, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7f2c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7f32));
    if (!(eax & 0x00008080))
        goto loc_1c7f89;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7f41));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7f47));
    if (dx == 0x8080)
        goto loc_1c7f60;
    if (dl & 0x80)
        goto loc_1c7f59;
    al = dl;
loc_1c7f59: // 0160:1c7f59
    if (dh & 0x80)
        goto loc_1c7f60;
    ah = dh;
loc_1c7f60: // 0160:1c7f60
    if (!(ax & 0x8080))
        goto loc_1c7f89;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7f6a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7f70));
    if (dx == 0x8080)
        goto loc_1c7f89;
    if (dl & 0x80)
        goto loc_1c7f82;
    al = dl;
loc_1c7f82: // 0160:1c7f82
    if (dh & 0x80)
        goto loc_1c7f89;
    ah = dh;
loc_1c7f89: // 0160:1c7f89
    memoryASet16(ds, edi + 294, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7f92));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7f98));
    if (!(eax & 0x00008080))
        goto loc_1c7fef;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7fa7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c7fad));
    if (dx == 0x8080)
        goto loc_1c7fc6;
    if (dl & 0x80)
        goto loc_1c7fbf;
    al = dl;
loc_1c7fbf: // 0160:1c7fbf
    if (dh & 0x80)
        goto loc_1c7fc6;
    ah = dh;
loc_1c7fc6: // 0160:1c7fc6
    if (!(ax & 0x8080))
        goto loc_1c7fef;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7fd0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c7fd6));
    if (dx == 0x8080)
        goto loc_1c7fef;
    if (dl & 0x80)
        goto loc_1c7fe8;
    al = dl;
loc_1c7fe8: // 0160:1c7fe8
    if (dh & 0x80)
        goto loc_1c7fef;
    ah = dh;
loc_1c7fef: // 0160:1c7fef
    memoryASet16(ds, edi + 296, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7ff8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c7ffe));
    if (!(eax & 0x00008080))
        goto loc_1c8055;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c800d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8013));
    if (dx == 0x8080)
        goto loc_1c802c;
    if (dl & 0x80)
        goto loc_1c8025;
    al = dl;
loc_1c8025: // 0160:1c8025
    if (dh & 0x80)
        goto loc_1c802c;
    ah = dh;
loc_1c802c: // 0160:1c802c
    if (!(ax & 0x8080))
        goto loc_1c8055;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8036));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c803c));
    if (dx == 0x8080)
        goto loc_1c8055;
    if (dl & 0x80)
        goto loc_1c804e;
    al = dl;
loc_1c804e: // 0160:1c804e
    if (dh & 0x80)
        goto loc_1c8055;
    ah = dh;
loc_1c8055: // 0160:1c8055
    memoryASet16(ds, edi + 298, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c805e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8064));
    if (!(eax & 0x00008080))
        goto loc_1c80bb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8073));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8079));
    if (dx == 0x8080)
        goto loc_1c8092;
    if (dl & 0x80)
        goto loc_1c808b;
    al = dl;
loc_1c808b: // 0160:1c808b
    if (dh & 0x80)
        goto loc_1c8092;
    ah = dh;
loc_1c8092: // 0160:1c8092
    if (!(ax & 0x8080))
        goto loc_1c80bb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c809c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c80a2));
    if (dx == 0x8080)
        goto loc_1c80bb;
    if (dl & 0x80)
        goto loc_1c80b4;
    al = dl;
loc_1c80b4: // 0160:1c80b4
    if (dh & 0x80)
        goto loc_1c80bb;
    ah = dh;
loc_1c80bb: // 0160:1c80bb
    memoryASet16(ds, edi + 300, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c80c4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c80ca));
    if (!(eax & 0x00008080))
        goto loc_1c8121;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c80d9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c80df));
    if (dx == 0x8080)
        goto loc_1c80f8;
    if (dl & 0x80)
        goto loc_1c80f1;
    al = dl;
loc_1c80f1: // 0160:1c80f1
    if (dh & 0x80)
        goto loc_1c80f8;
    ah = dh;
loc_1c80f8: // 0160:1c80f8
    if (!(ax & 0x8080))
        goto loc_1c8121;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8102));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8108));
    if (dx == 0x8080)
        goto loc_1c8121;
    if (dl & 0x80)
        goto loc_1c811a;
    al = dl;
loc_1c811a: // 0160:1c811a
    if (dh & 0x80)
        goto loc_1c8121;
    ah = dh;
loc_1c8121: // 0160:1c8121
    memoryASet16(ds, edi + 302, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c812a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8130));
    if (!(eax & 0x00008080))
        goto loc_1c8187;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c813f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8145));
    if (dx == 0x8080)
        goto loc_1c815e;
    if (dl & 0x80)
        goto loc_1c8157;
    al = dl;
loc_1c8157: // 0160:1c8157
    if (dh & 0x80)
        goto loc_1c815e;
    ah = dh;
loc_1c815e: // 0160:1c815e
    if (!(ax & 0x8080))
        goto loc_1c8187;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8168));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c816e));
    if (dx == 0x8080)
        goto loc_1c8187;
    if (dl & 0x80)
        goto loc_1c8180;
    al = dl;
loc_1c8180: // 0160:1c8180
    if (dh & 0x80)
        goto loc_1c8187;
    ah = dh;
loc_1c8187: // 0160:1c8187
    memoryASet16(ds, edi + 304, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8190));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8196));
    if (!(eax & 0x00008080))
        goto loc_1c81ed;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c81a5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c81ab));
    if (dx == 0x8080)
        goto loc_1c81c4;
    if (dl & 0x80)
        goto loc_1c81bd;
    al = dl;
loc_1c81bd: // 0160:1c81bd
    if (dh & 0x80)
        goto loc_1c81c4;
    ah = dh;
loc_1c81c4: // 0160:1c81c4
    if (!(ax & 0x8080))
        goto loc_1c81ed;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c81ce));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c81d4));
    if (dx == 0x8080)
        goto loc_1c81ed;
    if (dl & 0x80)
        goto loc_1c81e6;
    al = dl;
loc_1c81e6: // 0160:1c81e6
    if (dh & 0x80)
        goto loc_1c81ed;
    ah = dh;
loc_1c81ed: // 0160:1c81ed
    memoryASet16(ds, edi + 306, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c81f6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c81fc));
    if (!(eax & 0x00008080))
        goto loc_1c8253;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c820b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8211));
    if (dx == 0x8080)
        goto loc_1c822a;
    if (dl & 0x80)
        goto loc_1c8223;
    al = dl;
loc_1c8223: // 0160:1c8223
    if (dh & 0x80)
        goto loc_1c822a;
    ah = dh;
loc_1c822a: // 0160:1c822a
    if (!(ax & 0x8080))
        goto loc_1c8253;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8234));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c823a));
    if (dx == 0x8080)
        goto loc_1c8253;
    if (dl & 0x80)
        goto loc_1c824c;
    al = dl;
loc_1c824c: // 0160:1c824c
    if (dh & 0x80)
        goto loc_1c8253;
    ah = dh;
loc_1c8253: // 0160:1c8253
    memoryASet16(ds, edi + 308, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c825c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8262));
    if (!(eax & 0x00008080))
        goto loc_1c82b9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8271));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8277));
    if (dx == 0x8080)
        goto loc_1c8290;
    if (dl & 0x80)
        goto loc_1c8289;
    al = dl;
loc_1c8289: // 0160:1c8289
    if (dh & 0x80)
        goto loc_1c8290;
    ah = dh;
loc_1c8290: // 0160:1c8290
    if (!(ax & 0x8080))
        goto loc_1c82b9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c829a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c82a0));
    if (dx == 0x8080)
        goto loc_1c82b9;
    if (dl & 0x80)
        goto loc_1c82b2;
    al = dl;
loc_1c82b2: // 0160:1c82b2
    if (dh & 0x80)
        goto loc_1c82b9;
    ah = dh;
loc_1c82b9: // 0160:1c82b9
    memoryASet16(ds, edi + 310, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c82c2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c82c8));
    if (!(eax & 0x00008080))
        goto loc_1c831f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c82d7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c82dd));
    if (dx == 0x8080)
        goto loc_1c82f6;
    if (dl & 0x80)
        goto loc_1c82ef;
    al = dl;
loc_1c82ef: // 0160:1c82ef
    if (dh & 0x80)
        goto loc_1c82f6;
    ah = dh;
loc_1c82f6: // 0160:1c82f6
    if (!(ax & 0x8080))
        goto loc_1c831f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8300));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8306));
    if (dx == 0x8080)
        goto loc_1c831f;
    if (dl & 0x80)
        goto loc_1c8318;
    al = dl;
loc_1c8318: // 0160:1c8318
    if (dh & 0x80)
        goto loc_1c831f;
    ah = dh;
loc_1c831f: // 0160:1c831f
    memoryASet16(ds, edi + 312, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8328));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c832e));
    if (!(eax & 0x00008080))
        goto loc_1c8385;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c833d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8343));
    if (dx == 0x8080)
        goto loc_1c835c;
    if (dl & 0x80)
        goto loc_1c8355;
    al = dl;
loc_1c8355: // 0160:1c8355
    if (dh & 0x80)
        goto loc_1c835c;
    ah = dh;
loc_1c835c: // 0160:1c835c
    if (!(ax & 0x8080))
        goto loc_1c8385;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8366));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c836c));
    if (dx == 0x8080)
        goto loc_1c8385;
    if (dl & 0x80)
        goto loc_1c837e;
    al = dl;
loc_1c837e: // 0160:1c837e
    if (dh & 0x80)
        goto loc_1c8385;
    ah = dh;
loc_1c8385: // 0160:1c8385
    memoryASet16(ds, edi + 314, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c838e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c8394));
    if (!(eax & 0x00008080))
        goto loc_1c83eb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c83a3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c83a9));
    if (dx == 0x8080)
        goto loc_1c83c2;
    if (dl & 0x80)
        goto loc_1c83bb;
    al = dl;
loc_1c83bb: // 0160:1c83bb
    if (dh & 0x80)
        goto loc_1c83c2;
    ah = dh;
loc_1c83c2: // 0160:1c83c2
    if (!(ax & 0x8080))
        goto loc_1c83eb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c83cc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c83d2));
    if (dx == 0x8080)
        goto loc_1c83eb;
    if (dl & 0x80)
        goto loc_1c83e4;
    al = dl;
loc_1c83e4: // 0160:1c83e4
    if (dh & 0x80)
        goto loc_1c83eb;
    ah = dh;
loc_1c83eb: // 0160:1c83eb
    memoryASet16(ds, edi + 316, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c83f4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x1c83fa));
    if (!(eax & 0x00008080))
        goto loc_1c8451;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c8409));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x1c840f));
    if (dx == 0x8080)
        goto loc_1c8428;
    if (dl & 0x80)
        goto loc_1c8421;
    al = dl;
loc_1c8421: // 0160:1c8421
    if (dh & 0x80)
        goto loc_1c8428;
    ah = dh;
loc_1c8428: // 0160:1c8428
    if (!(ax & 0x8080))
        goto loc_1c8451;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8432));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x1c8438));
    if (dx == 0x8080)
        goto loc_1c8451;
    if (dl & 0x80)
        goto loc_1c844a;
    al = dl;
loc_1c844a: // 0160:1c844a
    if (dh & 0x80)
        goto loc_1c8451;
    ah = dh;
loc_1c8451: // 0160:1c8451
    memoryASet16(ds, edi + 318, ax);
    eax = memoryAGet32(ss, ebp + 44);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + eax);
loc_1c845e: // 0160:1c845e
    if (memoryAGet16(ss, ebp + -2) == 0x0000)
        goto loc_1c8475;
    memoryASet16(ss, ebp + -2, memoryAGet16(ss, ebp + -2) - 0x0001);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    goto loc_1c845e;
loc_1c8475: // 0160:1c8475
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_1c4498;
loc_1c8481: // 0160:1c8481
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c84e8() // 0160:1c84e8 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x000000a8;
    goto loc_1c84f4;
loc_1c84f4: // 0160:1c84f4
    goto loc_1c84f6;
loc_1c84f6: // 0160:1c84f6
    goto loc_1c84f8;
loc_1c84f8: // 0160:1c84f8
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, edi + 8, eax);
    eax = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, edi + 12, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, edi + 16, eax);
    eax = memoryAGet32(ds, esi + 20);
    memoryASet32(ds, edi + 20, eax);
    eax = memoryAGet32(ds, esi + 24);
    memoryASet32(ds, edi + 24, eax);
    eax = memoryAGet32(ds, esi + 28);
    memoryASet32(ds, edi + 28, eax);
    eax = memoryAGet32(ds, esi + 32);
    memoryASet32(ds, edi + 32, eax);
    eax = memoryAGet32(ds, esi + 36);
    memoryASet32(ds, edi + 36, eax);
    eax = memoryAGet32(ds, esi + 40);
    memoryASet32(ds, edi + 40, eax);
    eax = memoryAGet32(ds, esi + 44);
    memoryASet32(ds, edi + 44, eax);
    eax = memoryAGet32(ds, esi + 48);
    memoryASet32(ds, edi + 48, eax);
    eax = memoryAGet32(ds, esi + 52);
    memoryASet32(ds, edi + 52, eax);
    eax = memoryAGet32(ds, esi + 56);
    memoryASet32(ds, edi + 56, eax);
    eax = memoryAGet32(ds, esi + 60);
    memoryASet32(ds, edi + 60, eax);
    eax = memoryAGet32(ds, esi + 64);
    memoryASet32(ds, edi + 64, eax);
    eax = memoryAGet32(ds, esi + 68);
    memoryASet32(ds, edi + 68, eax);
    eax = memoryAGet32(ds, esi + 72);
    memoryASet32(ds, edi + 72, eax);
    eax = memoryAGet32(ds, esi + 76);
    memoryASet32(ds, edi + 76, eax);
    eax = memoryAGet32(ds, esi + 80);
    memoryASet32(ds, edi + 80, eax);
    eax = memoryAGet32(ds, esi + 84);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 88);
    memoryASet32(ds, edi + 88, eax);
    eax = memoryAGet32(ds, esi + 92);
    memoryASet32(ds, edi + 92, eax);
    eax = memoryAGet32(ds, esi + 96);
    memoryASet32(ds, edi + 96, eax);
    eax = memoryAGet32(ds, esi + 100);
    memoryASet32(ds, edi + 100, eax);
    eax = memoryAGet32(ds, esi + 104);
    memoryASet32(ds, edi + 104, eax);
    eax = memoryAGet32(ds, esi + 108);
    memoryASet32(ds, edi + 108, eax);
    eax = memoryAGet32(ds, esi + 112);
    memoryASet32(ds, edi + 112, eax);
    eax = memoryAGet32(ds, esi + 116);
    memoryASet32(ds, edi + 116, eax);
    eax = memoryAGet32(ds, esi + 120);
    memoryASet32(ds, edi + 120, eax);
    eax = memoryAGet32(ds, esi + 124);
    memoryASet32(ds, edi + 124, eax);
    eax = memoryAGet32(ds, esi + 128);
    memoryASet32(ds, edi + 128, eax);
    eax = memoryAGet32(ds, esi + 132);
    memoryASet32(ds, edi + 132, eax);
    eax = memoryAGet32(ds, esi + 136);
    memoryASet32(ds, edi + 136, eax);
    eax = memoryAGet32(ds, esi + 140);
    memoryASet32(ds, edi + 140, eax);
    eax = memoryAGet32(ds, esi + 144);
    memoryASet32(ds, edi + 144, eax);
    eax = memoryAGet32(ds, esi + 148);
    memoryASet32(ds, edi + 148, eax);
    eax = memoryAGet32(ds, esi + 152);
    memoryASet32(ds, edi + 152, eax);
    eax = memoryAGet32(ds, esi + 156);
    memoryASet32(ds, edi + 156, eax);
    eax = memoryAGet32(ds, esi + 160);
    memoryASet32(ds, edi + 160, eax);
    eax = memoryAGet32(ds, esi + 164);
    memoryASet32(ds, edi + 164, eax);
    eax = memoryAGet32(ds, esi + 168);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 172);
    memoryASet32(ds, edi + 172, eax);
    eax = memoryAGet32(ds, esi + 176);
    memoryASet32(ds, edi + 176, eax);
    eax = memoryAGet32(ds, esi + 180);
    memoryASet32(ds, edi + 180, eax);
    eax = memoryAGet32(ds, esi + 184);
    memoryASet32(ds, edi + 184, eax);
    eax = memoryAGet32(ds, esi + 188);
    memoryASet32(ds, edi + 188, eax);
    eax = memoryAGet32(ds, esi + 192);
    memoryASet32(ds, edi + 192, eax);
    eax = memoryAGet32(ds, esi + 196);
    memoryASet32(ds, edi + 196, eax);
    eax = memoryAGet32(ds, esi + 200);
    memoryASet32(ds, edi + 200, eax);
    eax = memoryAGet32(ds, esi + 204);
    memoryASet32(ds, edi + 204, eax);
    eax = memoryAGet32(ds, esi + 208);
    memoryASet32(ds, edi + 208, eax);
    eax = memoryAGet32(ds, esi + 212);
    memoryASet32(ds, edi + 212, eax);
    eax = memoryAGet32(ds, esi + 216);
    memoryASet32(ds, edi + 216, eax);
    eax = memoryAGet32(ds, esi + 220);
    memoryASet32(ds, edi + 220, eax);
    eax = memoryAGet32(ds, esi + 224);
    memoryASet32(ds, edi + 224, eax);
    eax = memoryAGet32(ds, esi + 228);
    memoryASet32(ds, edi + 228, eax);
    eax = memoryAGet32(ds, esi + 232);
    memoryASet32(ds, edi + 232, eax);
    eax = memoryAGet32(ds, esi + 236);
    memoryASet32(ds, edi + 236, eax);
    eax = memoryAGet32(ds, esi + 240);
    memoryASet32(ds, edi + 240, eax);
    eax = memoryAGet32(ds, esi + 244);
    memoryASet32(ds, edi + 244, eax);
    eax = memoryAGet32(ds, esi + 248);
    memoryASet32(ds, edi + 248, eax);
    eax = memoryAGet32(ds, esi + 252);
    memoryASet32(ds, edi + 252, eax);
    eax = memoryAGet32(ds, esi + 256);
    memoryASet32(ds, edi + 256, eax);
    eax = memoryAGet32(ds, esi + 260);
    memoryASet32(ds, edi + 260, eax);
    eax = memoryAGet32(ds, esi + 264);
    memoryASet32(ds, edi + 264, eax);
    eax = memoryAGet32(ds, esi + 268);
    memoryASet32(ds, edi + 268, eax);
    eax = memoryAGet32(ds, esi + 272);
    memoryASet32(ds, edi + 272, eax);
    eax = memoryAGet32(ds, esi + 276);
    memoryASet32(ds, edi + 276, eax);
    eax = memoryAGet32(ds, esi + 280);
    memoryASet32(ds, edi + 280, eax);
    eax = memoryAGet32(ds, esi + 284);
    memoryASet32(ds, edi + 284, eax);
    eax = memoryAGet32(ds, esi + 288);
    memoryASet32(ds, edi + 288, eax);
    eax = memoryAGet32(ds, esi + 292);
    memoryASet32(ds, edi + 292, eax);
    eax = memoryAGet32(ds, esi + 296);
    memoryASet32(ds, edi + 296, eax);
    eax = memoryAGet32(ds, esi + 300);
    memoryASet32(ds, edi + 300, eax);
    eax = memoryAGet32(ds, esi + 304);
    memoryASet32(ds, edi + 304, eax);
    eax = memoryAGet32(ds, esi + 308);
    memoryASet32(ds, edi + 308, eax);
    eax = memoryAGet32(ds, esi + 312);
    memoryASet32(ds, edi + 312, eax);
    eax = memoryAGet32(ds, esi + 316);
    memoryASet32(ds, edi + 316, eax);
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c84f8;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1c880b() // 0160:1c880b +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ch = 0xa8;
    edx = 0x000003c4;
    ebx = 0;
loc_1c8819: // 0160:1c8819
    al = 0x02;
    ah = 0x01;
    cl = bl;
    ah <<= cl;
    out16(dx, ax);
    eax = memoryAGet32(ds, ebx + esi);
    ah = memoryAGet(ds, ebx + esi + 4);
    memoryASet16(ds, edi, ax);
    eax = memoryAGet32(ds, ebx + esi + 8);
    ah = memoryAGet(ds, ebx + esi + 12);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, ebx + esi + 16);
    ah = memoryAGet(ds, ebx + esi + 20);
    memoryASet16(ds, edi + 4, ax);
    eax = memoryAGet32(ds, ebx + esi + 24);
    ah = memoryAGet(ds, ebx + esi + 28);
    memoryASet16(ds, edi + 6, ax);
    eax = memoryAGet32(ds, ebx + esi + 32);
    ah = memoryAGet(ds, ebx + esi + 36);
    memoryASet16(ds, edi + 8, ax);
    eax = memoryAGet32(ds, ebx + esi + 40);
    ah = memoryAGet(ds, ebx + esi + 44);
    memoryASet16(ds, edi + 10, ax);
    eax = memoryAGet32(ds, ebx + esi + 48);
    ah = memoryAGet(ds, ebx + esi + 52);
    memoryASet16(ds, edi + 12, ax);
    eax = memoryAGet32(ds, ebx + esi + 56);
    ah = memoryAGet(ds, ebx + esi + 60);
    memoryASet16(ds, edi + 14, ax);
    eax = memoryAGet32(ds, ebx + esi + 64);
    ah = memoryAGet(ds, ebx + esi + 68);
    memoryASet16(ds, edi + 16, ax);
    eax = memoryAGet32(ds, ebx + esi + 72);
    ah = memoryAGet(ds, ebx + esi + 76);
    memoryASet16(ds, edi + 18, ax);
    eax = memoryAGet32(ds, ebx + esi + 80);
    ah = memoryAGet(ds, ebx + esi + 84);
    memoryASet16(ds, edi + 20, ax);
    eax = memoryAGet32(ds, ebx + esi + 88);
    ah = memoryAGet(ds, ebx + esi + 92);
    memoryASet16(ds, edi + 22, ax);
    eax = memoryAGet32(ds, ebx + esi + 96);
    ah = memoryAGet(ds, ebx + esi + 100);
    memoryASet16(ds, edi + 24, ax);
    eax = memoryAGet32(ds, ebx + esi + 104);
    ah = memoryAGet(ds, ebx + esi + 108);
    memoryASet16(ds, edi + 26, ax);
    eax = memoryAGet32(ds, ebx + esi + 112);
    ah = memoryAGet(ds, ebx + esi + 116);
    memoryASet16(ds, edi + 28, ax);
    eax = memoryAGet32(ds, ebx + esi + 120);
    ah = memoryAGet(ds, ebx + esi + 124);
    memoryASet16(ds, edi + 30, ax);
    eax = memoryAGet32(ds, ebx + esi + 128);
    ah = memoryAGet(ds, ebx + esi + 132);
    memoryASet16(ds, edi + 32, ax);
    eax = memoryAGet32(ds, ebx + esi + 136);
    ah = memoryAGet(ds, ebx + esi + 140);
    memoryASet16(ds, edi + 34, ax);
    eax = memoryAGet32(ds, ebx + esi + 144);
    ah = memoryAGet(ds, ebx + esi + 148);
    memoryASet16(ds, edi + 36, ax);
    eax = memoryAGet32(ds, ebx + esi + 152);
    ah = memoryAGet(ds, ebx + esi + 156);
    memoryASet16(ds, edi + 38, ax);
    eax = memoryAGet32(ds, ebx + esi + 160);
    ah = memoryAGet(ds, ebx + esi + 164);
    memoryASet16(ds, edi + 40, ax);
    eax = memoryAGet32(ds, ebx + esi + 168);
    ah = memoryAGet(ds, ebx + esi + 172);
    memoryASet16(ds, edi + 42, ax);
    eax = memoryAGet32(ds, ebx + esi + 176);
    ah = memoryAGet(ds, ebx + esi + 180);
    memoryASet16(ds, edi + 44, ax);
    eax = memoryAGet32(ds, ebx + esi + 184);
    ah = memoryAGet(ds, ebx + esi + 188);
    memoryASet16(ds, edi + 46, ax);
    eax = memoryAGet32(ds, ebx + esi + 192);
    ah = memoryAGet(ds, ebx + esi + 196);
    memoryASet16(ds, edi + 48, ax);
    eax = memoryAGet32(ds, ebx + esi + 200);
    ah = memoryAGet(ds, ebx + esi + 204);
    memoryASet16(ds, edi + 50, ax);
    eax = memoryAGet32(ds, ebx + esi + 208);
    ah = memoryAGet(ds, ebx + esi + 212);
    memoryASet16(ds, edi + 52, ax);
    eax = memoryAGet32(ds, ebx + esi + 216);
    ah = memoryAGet(ds, ebx + esi + 220);
    memoryASet16(ds, edi + 54, ax);
    eax = memoryAGet32(ds, ebx + esi + 224);
    ah = memoryAGet(ds, ebx + esi + 228);
    memoryASet16(ds, edi + 56, ax);
    eax = memoryAGet32(ds, ebx + esi + 232);
    ah = memoryAGet(ds, ebx + esi + 236);
    memoryASet16(ds, edi + 58, ax);
    eax = memoryAGet32(ds, ebx + esi + 240);
    ah = memoryAGet(ds, ebx + esi + 244);
    memoryASet16(ds, edi + 60, ax);
    eax = memoryAGet32(ds, ebx + esi + 248);
    ah = memoryAGet(ds, ebx + esi + 252);
    memoryASet16(ds, edi + 62, ax);
    eax = memoryAGet32(ds, ebx + esi + 256);
    ah = memoryAGet(ds, ebx + esi + 260);
    memoryASet16(ds, edi + 64, ax);
    eax = memoryAGet32(ds, ebx + esi + 264);
    ah = memoryAGet(ds, ebx + esi + 268);
    memoryASet16(ds, edi + 66, ax);
    eax = memoryAGet32(ds, ebx + esi + 272);
    ah = memoryAGet(ds, ebx + esi + 276);
    memoryASet16(ds, edi + 68, ax);
    eax = memoryAGet32(ds, ebx + esi + 280);
    ah = memoryAGet(ds, ebx + esi + 284);
    memoryASet16(ds, edi + 70, ax);
    eax = memoryAGet32(ds, ebx + esi + 288);
    ah = memoryAGet(ds, ebx + esi + 292);
    memoryASet16(ds, edi + 72, ax);
    eax = memoryAGet32(ds, ebx + esi + 296);
    ah = memoryAGet(ds, ebx + esi + 300);
    memoryASet16(ds, edi + 74, ax);
    eax = memoryAGet32(ds, ebx + esi + 304);
    ah = memoryAGet(ds, ebx + esi + 308);
    memoryASet16(ds, edi + 76, ax);
    eax = memoryAGet32(ds, ebx + esi + 312);
    ah = memoryAGet(ds, ebx + esi + 316);
    memoryASet16(ds, edi + 78, ax);
    ebx++;
    ebx &= 0x00000003;
    if (ebx)
        goto loc_1c8819;
    esi += 0x00000140;
    edi += 0x00000050;
    ch--;
    if (ch)
        goto loc_1c8819;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1c8aae() // 0160:1c8aae +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ebx = 0x00000000;
loc_1c8ab8: // 0160:1c8ab8
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = 0x00001f40;
loc_1c8acc: // 0160:1c8acc
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_1c8acc;
    esi -= 0x0000f9ff;
    edi -= 0x00003e80;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_1c8ab8;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1c8af1() // 0160:1c8af1 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    ebx = 0x00000000;
loc_1c8b04: // 0160:1c8b04
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = memoryAGet32(ss, ebp + -4);
loc_1c8b16: // 0160:1c8b16
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_1c8b16;
    eax = memoryAGet32(ss, ebp + -4);
    eax += eax;
    edi -= eax;
    eax <<= 2;
    eax--;
    esi -= eax;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_1c8b04;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c8bd6() // 0160:1c8bd6 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if (!ebx)
        goto loc_1c8c03;
    if (!ecx)
        goto loc_1c8c03;
    esi = eax;
    edi = edx;
    esi--;
    edi--;
loc_1c8be5: // 0160:1c8be5
    edx = ebx;
loc_1c8be7: // 0160:1c8be7
    al = memoryAGet(ds, edx + esi);
    if (al & 0x80)
        goto loc_1c8bf1;
    memoryASet(ds, edx + edi, al);
loc_1c8bf1: // 0160:1c8bf1
    edx--;
    if (edx)
        goto loc_1c8be7;
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c8be5;
loc_1c8c03: // 0160:1c8c03
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1c8c05() // 0160:1c8c05 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xffffffec;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    eax = memoryAGet32(ss, ebp + 24);
    eax <<= 16;
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ss, ebp + 24);
    eax >>= 16;
    memoryASet32(ss, ebp + -20, eax);
    if (memoryAGet32(ss, ebp + 16) == 0x00000000)
        goto loc_1c8c80;
    if (memoryAGet32(ss, ebp + 20) == 0x00000000)
        goto loc_1c8c80;
    esi = memoryAGet32(ss, ebp + 8);
    edi = memoryAGet32(ss, ebp + 12);
    eax = 0x00000140;
    eax -= memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -12, eax);
    memoryASet32(ss, ebp + -8, 0x00000000);
    ecx = 0;
loc_1c8c44: // 0160:1c8c44
    edx = 0;
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -4, eax);
    push32(esi);
loc_1c8c4d: // 0160:1c8c4d
    al = memoryAGet(ds, esi);
    if (al & 0x80)
        goto loc_1c8c55;
    memoryASet(ds, edi, al);
loc_1c8c55: // 0160:1c8c55
    edi++;
    flags.carry = ((uint64_t)edx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    edx += memoryAGet32(ss, ebp + -16);
    esi += memoryAGet32(ss, ebp + -20) + flags.carry;
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) - 1);
    if (memoryAGet32(ss, ebp + -4))
        goto loc_1c8c4d;
    esi = pop32();
    eax = memoryAGet32(ss, ebp + -20);
    flags.carry = ((uint64_t)ecx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    ecx += memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) + (eax + flags.carry));
    if (!memoryAGet32(ss, ebp + -8))
        goto loc_1c8c78;
loc_1c8c6d: // 0160:1c8c6d
    esi += 0x00000140;
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) - 1);
    if (memoryAGet32(ss, ebp + -8))
        goto loc_1c8c6d;
loc_1c8c78: // 0160:1c8c78
    edi += memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + 20, memoryAGet32(ss, ebp + 20) - 1);
    if (memoryAGet32(ss, ebp + 20))
        goto loc_1c8c44;
loc_1c8c80: // 0160:1c8c80
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c8c83() // 0160:1c8c83 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x00000009;
    goto loc_1c8c8f;
loc_1c8c8f: // 0160:1c8c8f
    goto loc_1c8c91;
loc_1c8c91: // 0160:1c8c91
    goto loc_1c8c94;
    // gap 1 bytes
loc_1c8c94: // 0160:1c8c94
    eax = memoryAGet32(ds, esi);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8ccb;
    edx = memoryAGet32(ds, edi);
    if (eax == 0x80808080)
        goto loc_1c8ccb;
    if (al & 0x80)
        goto loc_1c8cae;
    dl = al;
loc_1c8cae: // 0160:1c8cae
    if (ah & 0x80)
        goto loc_1c8cb5;
    dh = ah;
loc_1c8cb5: // 0160:1c8cb5
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8cc1;
    dl = al;
loc_1c8cc1: // 0160:1c8cc1
    if (ah & 0x80)
        goto loc_1c8cc8;
    dh = ah;
loc_1c8cc8: // 0160:1c8cc8
    edx = rol32(edx, 0x10);
loc_1c8ccb: // 0160:1c8ccb
    memoryASet32(ds, edi, edx);
    eax = memoryAGet32(ds, esi + 4);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8d06;
    edx = memoryAGet32(ds, edi + 4);
    if (eax == 0x80808080)
        goto loc_1c8d06;
    if (al & 0x80)
        goto loc_1c8ce9;
    dl = al;
loc_1c8ce9: // 0160:1c8ce9
    if (ah & 0x80)
        goto loc_1c8cf0;
    dh = ah;
loc_1c8cf0: // 0160:1c8cf0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8cfc;
    dl = al;
loc_1c8cfc: // 0160:1c8cfc
    if (ah & 0x80)
        goto loc_1c8d03;
    dh = ah;
loc_1c8d03: // 0160:1c8d03
    edx = rol32(edx, 0x10);
loc_1c8d06: // 0160:1c8d06
    memoryASet32(ds, edi + 4, edx);
    eax = memoryAGet32(ds, esi + 8);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8d42;
    edx = memoryAGet32(ds, edi + 8);
    if (eax == 0x80808080)
        goto loc_1c8d42;
    if (al & 0x80)
        goto loc_1c8d25;
    dl = al;
loc_1c8d25: // 0160:1c8d25
    if (ah & 0x80)
        goto loc_1c8d2c;
    dh = ah;
loc_1c8d2c: // 0160:1c8d2c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8d38;
    dl = al;
loc_1c8d38: // 0160:1c8d38
    if (ah & 0x80)
        goto loc_1c8d3f;
    dh = ah;
loc_1c8d3f: // 0160:1c8d3f
    edx = rol32(edx, 0x10);
loc_1c8d42: // 0160:1c8d42
    memoryASet32(ds, edi + 8, edx);
    eax = memoryAGet32(ds, esi + 12);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8d7e;
    edx = memoryAGet32(ds, edi + 12);
    if (eax == 0x80808080)
        goto loc_1c8d7e;
    if (al & 0x80)
        goto loc_1c8d61;
    dl = al;
loc_1c8d61: // 0160:1c8d61
    if (ah & 0x80)
        goto loc_1c8d68;
    dh = ah;
loc_1c8d68: // 0160:1c8d68
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8d74;
    dl = al;
loc_1c8d74: // 0160:1c8d74
    if (ah & 0x80)
        goto loc_1c8d7b;
    dh = ah;
loc_1c8d7b: // 0160:1c8d7b
    edx = rol32(edx, 0x10);
loc_1c8d7e: // 0160:1c8d7e
    memoryASet32(ds, edi + 12, edx);
    eax = memoryAGet32(ds, esi + 16);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8dba;
    edx = memoryAGet32(ds, edi + 16);
    if (eax == 0x80808080)
        goto loc_1c8dba;
    if (al & 0x80)
        goto loc_1c8d9d;
    dl = al;
loc_1c8d9d: // 0160:1c8d9d
    if (ah & 0x80)
        goto loc_1c8da4;
    dh = ah;
loc_1c8da4: // 0160:1c8da4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8db0;
    dl = al;
loc_1c8db0: // 0160:1c8db0
    if (ah & 0x80)
        goto loc_1c8db7;
    dh = ah;
loc_1c8db7: // 0160:1c8db7
    edx = rol32(edx, 0x10);
loc_1c8dba: // 0160:1c8dba
    memoryASet32(ds, edi + 16, edx);
    eax = memoryAGet32(ds, esi + 20);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8df6;
    edx = memoryAGet32(ds, edi + 20);
    if (eax == 0x80808080)
        goto loc_1c8df6;
    if (al & 0x80)
        goto loc_1c8dd9;
    dl = al;
loc_1c8dd9: // 0160:1c8dd9
    if (ah & 0x80)
        goto loc_1c8de0;
    dh = ah;
loc_1c8de0: // 0160:1c8de0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8dec;
    dl = al;
loc_1c8dec: // 0160:1c8dec
    if (ah & 0x80)
        goto loc_1c8df3;
    dh = ah;
loc_1c8df3: // 0160:1c8df3
    edx = rol32(edx, 0x10);
loc_1c8df6: // 0160:1c8df6
    memoryASet32(ds, edi + 20, edx);
    eax = memoryAGet32(ds, esi + 24);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8e32;
    edx = memoryAGet32(ds, edi + 24);
    if (eax == 0x80808080)
        goto loc_1c8e32;
    if (al & 0x80)
        goto loc_1c8e15;
    dl = al;
loc_1c8e15: // 0160:1c8e15
    if (ah & 0x80)
        goto loc_1c8e1c;
    dh = ah;
loc_1c8e1c: // 0160:1c8e1c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8e28;
    dl = al;
loc_1c8e28: // 0160:1c8e28
    if (ah & 0x80)
        goto loc_1c8e2f;
    dh = ah;
loc_1c8e2f: // 0160:1c8e2f
    edx = rol32(edx, 0x10);
loc_1c8e32: // 0160:1c8e32
    memoryASet32(ds, edi + 24, edx);
    eax = memoryAGet32(ds, esi + 28);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8e6e;
    edx = memoryAGet32(ds, edi + 28);
    if (eax == 0x80808080)
        goto loc_1c8e6e;
    if (al & 0x80)
        goto loc_1c8e51;
    dl = al;
loc_1c8e51: // 0160:1c8e51
    if (ah & 0x80)
        goto loc_1c8e58;
    dh = ah;
loc_1c8e58: // 0160:1c8e58
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8e64;
    dl = al;
loc_1c8e64: // 0160:1c8e64
    if (ah & 0x80)
        goto loc_1c8e6b;
    dh = ah;
loc_1c8e6b: // 0160:1c8e6b
    edx = rol32(edx, 0x10);
loc_1c8e6e: // 0160:1c8e6e
    memoryASet32(ds, edi + 28, edx);
    eax = memoryAGet32(ds, esi + 32);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8eaa;
    edx = memoryAGet32(ds, edi + 32);
    if (eax == 0x80808080)
        goto loc_1c8eaa;
    if (al & 0x80)
        goto loc_1c8e8d;
    dl = al;
loc_1c8e8d: // 0160:1c8e8d
    if (ah & 0x80)
        goto loc_1c8e94;
    dh = ah;
loc_1c8e94: // 0160:1c8e94
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8ea0;
    dl = al;
loc_1c8ea0: // 0160:1c8ea0
    if (ah & 0x80)
        goto loc_1c8ea7;
    dh = ah;
loc_1c8ea7: // 0160:1c8ea7
    edx = rol32(edx, 0x10);
loc_1c8eaa: // 0160:1c8eaa
    memoryASet32(ds, edi + 32, edx);
    eax = memoryAGet32(ds, esi + 36);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8ee6;
    edx = memoryAGet32(ds, edi + 36);
    if (eax == 0x80808080)
        goto loc_1c8ee6;
    if (al & 0x80)
        goto loc_1c8ec9;
    dl = al;
loc_1c8ec9: // 0160:1c8ec9
    if (ah & 0x80)
        goto loc_1c8ed0;
    dh = ah;
loc_1c8ed0: // 0160:1c8ed0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8edc;
    dl = al;
loc_1c8edc: // 0160:1c8edc
    if (ah & 0x80)
        goto loc_1c8ee3;
    dh = ah;
loc_1c8ee3: // 0160:1c8ee3
    edx = rol32(edx, 0x10);
loc_1c8ee6: // 0160:1c8ee6
    memoryASet32(ds, edi + 36, edx);
    eax = memoryAGet32(ds, esi + 40);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8f22;
    edx = memoryAGet32(ds, edi + 40);
    if (eax == 0x80808080)
        goto loc_1c8f22;
    if (al & 0x80)
        goto loc_1c8f05;
    dl = al;
loc_1c8f05: // 0160:1c8f05
    if (ah & 0x80)
        goto loc_1c8f0c;
    dh = ah;
loc_1c8f0c: // 0160:1c8f0c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8f18;
    dl = al;
loc_1c8f18: // 0160:1c8f18
    if (ah & 0x80)
        goto loc_1c8f1f;
    dh = ah;
loc_1c8f1f: // 0160:1c8f1f
    edx = rol32(edx, 0x10);
loc_1c8f22: // 0160:1c8f22
    memoryASet32(ds, edi + 40, edx);
    eax = memoryAGet32(ds, esi + 44);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8f5e;
    edx = memoryAGet32(ds, edi + 44);
    if (eax == 0x80808080)
        goto loc_1c8f5e;
    if (al & 0x80)
        goto loc_1c8f41;
    dl = al;
loc_1c8f41: // 0160:1c8f41
    if (ah & 0x80)
        goto loc_1c8f48;
    dh = ah;
loc_1c8f48: // 0160:1c8f48
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8f54;
    dl = al;
loc_1c8f54: // 0160:1c8f54
    if (ah & 0x80)
        goto loc_1c8f5b;
    dh = ah;
loc_1c8f5b: // 0160:1c8f5b
    edx = rol32(edx, 0x10);
loc_1c8f5e: // 0160:1c8f5e
    memoryASet32(ds, edi + 44, edx);
    eax = memoryAGet32(ds, esi + 48);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8f9a;
    edx = memoryAGet32(ds, edi + 48);
    if (eax == 0x80808080)
        goto loc_1c8f9a;
    if (al & 0x80)
        goto loc_1c8f7d;
    dl = al;
loc_1c8f7d: // 0160:1c8f7d
    if (ah & 0x80)
        goto loc_1c8f84;
    dh = ah;
loc_1c8f84: // 0160:1c8f84
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8f90;
    dl = al;
loc_1c8f90: // 0160:1c8f90
    if (ah & 0x80)
        goto loc_1c8f97;
    dh = ah;
loc_1c8f97: // 0160:1c8f97
    edx = rol32(edx, 0x10);
loc_1c8f9a: // 0160:1c8f9a
    memoryASet32(ds, edi + 48, edx);
    eax = memoryAGet32(ds, esi + 52);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c8fd6;
    edx = memoryAGet32(ds, edi + 52);
    if (eax == 0x80808080)
        goto loc_1c8fd6;
    if (al & 0x80)
        goto loc_1c8fb9;
    dl = al;
loc_1c8fb9: // 0160:1c8fb9
    if (ah & 0x80)
        goto loc_1c8fc0;
    dh = ah;
loc_1c8fc0: // 0160:1c8fc0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c8fcc;
    dl = al;
loc_1c8fcc: // 0160:1c8fcc
    if (ah & 0x80)
        goto loc_1c8fd3;
    dh = ah;
loc_1c8fd3: // 0160:1c8fd3
    edx = rol32(edx, 0x10);
loc_1c8fd6: // 0160:1c8fd6
    memoryASet32(ds, edi + 52, edx);
    eax = memoryAGet32(ds, esi + 56);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9012;
    edx = memoryAGet32(ds, edi + 56);
    if (eax == 0x80808080)
        goto loc_1c9012;
    if (al & 0x80)
        goto loc_1c8ff5;
    dl = al;
loc_1c8ff5: // 0160:1c8ff5
    if (ah & 0x80)
        goto loc_1c8ffc;
    dh = ah;
loc_1c8ffc: // 0160:1c8ffc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9008;
    dl = al;
loc_1c9008: // 0160:1c9008
    if (ah & 0x80)
        goto loc_1c900f;
    dh = ah;
loc_1c900f: // 0160:1c900f
    edx = rol32(edx, 0x10);
loc_1c9012: // 0160:1c9012
    memoryASet32(ds, edi + 56, edx);
    eax = memoryAGet32(ds, esi + 60);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c904e;
    edx = memoryAGet32(ds, edi + 60);
    if (eax == 0x80808080)
        goto loc_1c904e;
    if (al & 0x80)
        goto loc_1c9031;
    dl = al;
loc_1c9031: // 0160:1c9031
    if (ah & 0x80)
        goto loc_1c9038;
    dh = ah;
loc_1c9038: // 0160:1c9038
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9044;
    dl = al;
loc_1c9044: // 0160:1c9044
    if (ah & 0x80)
        goto loc_1c904b;
    dh = ah;
loc_1c904b: // 0160:1c904b
    edx = rol32(edx, 0x10);
loc_1c904e: // 0160:1c904e
    memoryASet32(ds, edi + 60, edx);
    eax = memoryAGet32(ds, esi + 64);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c908a;
    edx = memoryAGet32(ds, edi + 64);
    if (eax == 0x80808080)
        goto loc_1c908a;
    if (al & 0x80)
        goto loc_1c906d;
    dl = al;
loc_1c906d: // 0160:1c906d
    if (ah & 0x80)
        goto loc_1c9074;
    dh = ah;
loc_1c9074: // 0160:1c9074
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9080;
    dl = al;
loc_1c9080: // 0160:1c9080
    if (ah & 0x80)
        goto loc_1c9087;
    dh = ah;
loc_1c9087: // 0160:1c9087
    edx = rol32(edx, 0x10);
loc_1c908a: // 0160:1c908a
    memoryASet32(ds, edi + 64, edx);
    eax = memoryAGet32(ds, esi + 68);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c90c6;
    edx = memoryAGet32(ds, edi + 68);
    if (eax == 0x80808080)
        goto loc_1c90c6;
    if (al & 0x80)
        goto loc_1c90a9;
    dl = al;
loc_1c90a9: // 0160:1c90a9
    if (ah & 0x80)
        goto loc_1c90b0;
    dh = ah;
loc_1c90b0: // 0160:1c90b0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c90bc;
    dl = al;
loc_1c90bc: // 0160:1c90bc
    if (ah & 0x80)
        goto loc_1c90c3;
    dh = ah;
loc_1c90c3: // 0160:1c90c3
    edx = rol32(edx, 0x10);
loc_1c90c6: // 0160:1c90c6
    memoryASet32(ds, edi + 68, edx);
    eax = memoryAGet32(ds, esi + 72);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9102;
    edx = memoryAGet32(ds, edi + 72);
    if (eax == 0x80808080)
        goto loc_1c9102;
    if (al & 0x80)
        goto loc_1c90e5;
    dl = al;
loc_1c90e5: // 0160:1c90e5
    if (ah & 0x80)
        goto loc_1c90ec;
    dh = ah;
loc_1c90ec: // 0160:1c90ec
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c90f8;
    dl = al;
loc_1c90f8: // 0160:1c90f8
    if (ah & 0x80)
        goto loc_1c90ff;
    dh = ah;
loc_1c90ff: // 0160:1c90ff
    edx = rol32(edx, 0x10);
loc_1c9102: // 0160:1c9102
    memoryASet32(ds, edi + 72, edx);
    eax = memoryAGet32(ds, esi + 76);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c913e;
    edx = memoryAGet32(ds, edi + 76);
    if (eax == 0x80808080)
        goto loc_1c913e;
    if (al & 0x80)
        goto loc_1c9121;
    dl = al;
loc_1c9121: // 0160:1c9121
    if (ah & 0x80)
        goto loc_1c9128;
    dh = ah;
loc_1c9128: // 0160:1c9128
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9134;
    dl = al;
loc_1c9134: // 0160:1c9134
    if (ah & 0x80)
        goto loc_1c913b;
    dh = ah;
loc_1c913b: // 0160:1c913b
    edx = rol32(edx, 0x10);
loc_1c913e: // 0160:1c913e
    memoryASet32(ds, edi + 76, edx);
    eax = memoryAGet32(ds, esi + 80);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c917a;
    edx = memoryAGet32(ds, edi + 80);
    if (eax == 0x80808080)
        goto loc_1c917a;
    if (al & 0x80)
        goto loc_1c915d;
    dl = al;
loc_1c915d: // 0160:1c915d
    if (ah & 0x80)
        goto loc_1c9164;
    dh = ah;
loc_1c9164: // 0160:1c9164
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9170;
    dl = al;
loc_1c9170: // 0160:1c9170
    if (ah & 0x80)
        goto loc_1c9177;
    dh = ah;
loc_1c9177: // 0160:1c9177
    edx = rol32(edx, 0x10);
loc_1c917a: // 0160:1c917a
    memoryASet32(ds, edi + 80, edx);
    eax = memoryAGet32(ds, esi + 84);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c91b6;
    edx = memoryAGet32(ds, edi + 84);
    if (eax == 0x80808080)
        goto loc_1c91b6;
    if (al & 0x80)
        goto loc_1c9199;
    dl = al;
loc_1c9199: // 0160:1c9199
    if (ah & 0x80)
        goto loc_1c91a0;
    dh = ah;
loc_1c91a0: // 0160:1c91a0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c91ac;
    dl = al;
loc_1c91ac: // 0160:1c91ac
    if (ah & 0x80)
        goto loc_1c91b3;
    dh = ah;
loc_1c91b3: // 0160:1c91b3
    edx = rol32(edx, 0x10);
loc_1c91b6: // 0160:1c91b6
    memoryASet32(ds, edi + 84, edx);
    eax = memoryAGet32(ds, esi + 88);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c91f2;
    edx = memoryAGet32(ds, edi + 88);
    if (eax == 0x80808080)
        goto loc_1c91f2;
    if (al & 0x80)
        goto loc_1c91d5;
    dl = al;
loc_1c91d5: // 0160:1c91d5
    if (ah & 0x80)
        goto loc_1c91dc;
    dh = ah;
loc_1c91dc: // 0160:1c91dc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c91e8;
    dl = al;
loc_1c91e8: // 0160:1c91e8
    if (ah & 0x80)
        goto loc_1c91ef;
    dh = ah;
loc_1c91ef: // 0160:1c91ef
    edx = rol32(edx, 0x10);
loc_1c91f2: // 0160:1c91f2
    memoryASet32(ds, edi + 88, edx);
    eax = memoryAGet32(ds, esi + 92);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c922e;
    edx = memoryAGet32(ds, edi + 92);
    if (eax == 0x80808080)
        goto loc_1c922e;
    if (al & 0x80)
        goto loc_1c9211;
    dl = al;
loc_1c9211: // 0160:1c9211
    if (ah & 0x80)
        goto loc_1c9218;
    dh = ah;
loc_1c9218: // 0160:1c9218
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9224;
    dl = al;
loc_1c9224: // 0160:1c9224
    if (ah & 0x80)
        goto loc_1c922b;
    dh = ah;
loc_1c922b: // 0160:1c922b
    edx = rol32(edx, 0x10);
loc_1c922e: // 0160:1c922e
    memoryASet32(ds, edi + 92, edx);
    eax = memoryAGet32(ds, esi + 96);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c926a;
    edx = memoryAGet32(ds, edi + 96);
    if (eax == 0x80808080)
        goto loc_1c926a;
    if (al & 0x80)
        goto loc_1c924d;
    dl = al;
loc_1c924d: // 0160:1c924d
    if (ah & 0x80)
        goto loc_1c9254;
    dh = ah;
loc_1c9254: // 0160:1c9254
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9260;
    dl = al;
loc_1c9260: // 0160:1c9260
    if (ah & 0x80)
        goto loc_1c9267;
    dh = ah;
loc_1c9267: // 0160:1c9267
    edx = rol32(edx, 0x10);
loc_1c926a: // 0160:1c926a
    memoryASet32(ds, edi + 96, edx);
    eax = memoryAGet32(ds, esi + 100);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c92a6;
    edx = memoryAGet32(ds, edi + 100);
    if (eax == 0x80808080)
        goto loc_1c92a6;
    if (al & 0x80)
        goto loc_1c9289;
    dl = al;
loc_1c9289: // 0160:1c9289
    if (ah & 0x80)
        goto loc_1c9290;
    dh = ah;
loc_1c9290: // 0160:1c9290
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c929c;
    dl = al;
loc_1c929c: // 0160:1c929c
    if (ah & 0x80)
        goto loc_1c92a3;
    dh = ah;
loc_1c92a3: // 0160:1c92a3
    edx = rol32(edx, 0x10);
loc_1c92a6: // 0160:1c92a6
    memoryASet32(ds, edi + 100, edx);
    eax = memoryAGet32(ds, esi + 104);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c92e2;
    edx = memoryAGet32(ds, edi + 104);
    if (eax == 0x80808080)
        goto loc_1c92e2;
    if (al & 0x80)
        goto loc_1c92c5;
    dl = al;
loc_1c92c5: // 0160:1c92c5
    if (ah & 0x80)
        goto loc_1c92cc;
    dh = ah;
loc_1c92cc: // 0160:1c92cc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c92d8;
    dl = al;
loc_1c92d8: // 0160:1c92d8
    if (ah & 0x80)
        goto loc_1c92df;
    dh = ah;
loc_1c92df: // 0160:1c92df
    edx = rol32(edx, 0x10);
loc_1c92e2: // 0160:1c92e2
    memoryASet32(ds, edi + 104, edx);
    eax = memoryAGet32(ds, esi + 108);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c931e;
    edx = memoryAGet32(ds, edi + 108);
    if (eax == 0x80808080)
        goto loc_1c931e;
    if (al & 0x80)
        goto loc_1c9301;
    dl = al;
loc_1c9301: // 0160:1c9301
    if (ah & 0x80)
        goto loc_1c9308;
    dh = ah;
loc_1c9308: // 0160:1c9308
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9314;
    dl = al;
loc_1c9314: // 0160:1c9314
    if (ah & 0x80)
        goto loc_1c931b;
    dh = ah;
loc_1c931b: // 0160:1c931b
    edx = rol32(edx, 0x10);
loc_1c931e: // 0160:1c931e
    memoryASet32(ds, edi + 108, edx);
    eax = memoryAGet32(ds, esi + 112);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c935a;
    edx = memoryAGet32(ds, edi + 112);
    if (eax == 0x80808080)
        goto loc_1c935a;
    if (al & 0x80)
        goto loc_1c933d;
    dl = al;
loc_1c933d: // 0160:1c933d
    if (ah & 0x80)
        goto loc_1c9344;
    dh = ah;
loc_1c9344: // 0160:1c9344
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9350;
    dl = al;
loc_1c9350: // 0160:1c9350
    if (ah & 0x80)
        goto loc_1c9357;
    dh = ah;
loc_1c9357: // 0160:1c9357
    edx = rol32(edx, 0x10);
loc_1c935a: // 0160:1c935a
    memoryASet32(ds, edi + 112, edx);
    eax = memoryAGet32(ds, esi + 116);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9396;
    edx = memoryAGet32(ds, edi + 116);
    if (eax == 0x80808080)
        goto loc_1c9396;
    if (al & 0x80)
        goto loc_1c9379;
    dl = al;
loc_1c9379: // 0160:1c9379
    if (ah & 0x80)
        goto loc_1c9380;
    dh = ah;
loc_1c9380: // 0160:1c9380
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c938c;
    dl = al;
loc_1c938c: // 0160:1c938c
    if (ah & 0x80)
        goto loc_1c9393;
    dh = ah;
loc_1c9393: // 0160:1c9393
    edx = rol32(edx, 0x10);
loc_1c9396: // 0160:1c9396
    memoryASet32(ds, edi + 116, edx);
    eax = memoryAGet32(ds, esi + 120);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c93d2;
    edx = memoryAGet32(ds, edi + 120);
    if (eax == 0x80808080)
        goto loc_1c93d2;
    if (al & 0x80)
        goto loc_1c93b5;
    dl = al;
loc_1c93b5: // 0160:1c93b5
    if (ah & 0x80)
        goto loc_1c93bc;
    dh = ah;
loc_1c93bc: // 0160:1c93bc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c93c8;
    dl = al;
loc_1c93c8: // 0160:1c93c8
    if (ah & 0x80)
        goto loc_1c93cf;
    dh = ah;
loc_1c93cf: // 0160:1c93cf
    edx = rol32(edx, 0x10);
loc_1c93d2: // 0160:1c93d2
    memoryASet32(ds, edi + 120, edx);
    eax = memoryAGet32(ds, esi + 124);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c940e;
    edx = memoryAGet32(ds, edi + 124);
    if (eax == 0x80808080)
        goto loc_1c940e;
    if (al & 0x80)
        goto loc_1c93f1;
    dl = al;
loc_1c93f1: // 0160:1c93f1
    if (ah & 0x80)
        goto loc_1c93f8;
    dh = ah;
loc_1c93f8: // 0160:1c93f8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9404;
    dl = al;
loc_1c9404: // 0160:1c9404
    if (ah & 0x80)
        goto loc_1c940b;
    dh = ah;
loc_1c940b: // 0160:1c940b
    edx = rol32(edx, 0x10);
loc_1c940e: // 0160:1c940e
    memoryASet32(ds, edi + 124, edx);
    eax = memoryAGet32(ds, esi + 128);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9450;
    edx = memoryAGet32(ds, edi + 128);
    if (eax == 0x80808080)
        goto loc_1c9450;
    if (al & 0x80)
        goto loc_1c9433;
    dl = al;
loc_1c9433: // 0160:1c9433
    if (ah & 0x80)
        goto loc_1c943a;
    dh = ah;
loc_1c943a: // 0160:1c943a
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9446;
    dl = al;
loc_1c9446: // 0160:1c9446
    if (ah & 0x80)
        goto loc_1c944d;
    dh = ah;
loc_1c944d: // 0160:1c944d
    edx = rol32(edx, 0x10);
loc_1c9450: // 0160:1c9450
    memoryASet32(ds, edi + 128, edx);
    eax = memoryAGet32(ds, esi + 132);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9495;
    edx = memoryAGet32(ds, edi + 132);
    if (eax == 0x80808080)
        goto loc_1c9495;
    if (al & 0x80)
        goto loc_1c9478;
    dl = al;
loc_1c9478: // 0160:1c9478
    if (ah & 0x80)
        goto loc_1c947f;
    dh = ah;
loc_1c947f: // 0160:1c947f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c948b;
    dl = al;
loc_1c948b: // 0160:1c948b
    if (ah & 0x80)
        goto loc_1c9492;
    dh = ah;
loc_1c9492: // 0160:1c9492
    edx = rol32(edx, 0x10);
loc_1c9495: // 0160:1c9495
    memoryASet32(ds, edi + 132, edx);
    eax = memoryAGet32(ds, esi + 136);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c94da;
    edx = memoryAGet32(ds, edi + 136);
    if (eax == 0x80808080)
        goto loc_1c94da;
    if (al & 0x80)
        goto loc_1c94bd;
    dl = al;
loc_1c94bd: // 0160:1c94bd
    if (ah & 0x80)
        goto loc_1c94c4;
    dh = ah;
loc_1c94c4: // 0160:1c94c4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c94d0;
    dl = al;
loc_1c94d0: // 0160:1c94d0
    if (ah & 0x80)
        goto loc_1c94d7;
    dh = ah;
loc_1c94d7: // 0160:1c94d7
    edx = rol32(edx, 0x10);
loc_1c94da: // 0160:1c94da
    memoryASet32(ds, edi + 136, edx);
    eax = memoryAGet32(ds, esi + 140);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c951f;
    edx = memoryAGet32(ds, edi + 140);
    if (eax == 0x80808080)
        goto loc_1c951f;
    if (al & 0x80)
        goto loc_1c9502;
    dl = al;
loc_1c9502: // 0160:1c9502
    if (ah & 0x80)
        goto loc_1c9509;
    dh = ah;
loc_1c9509: // 0160:1c9509
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9515;
    dl = al;
loc_1c9515: // 0160:1c9515
    if (ah & 0x80)
        goto loc_1c951c;
    dh = ah;
loc_1c951c: // 0160:1c951c
    edx = rol32(edx, 0x10);
loc_1c951f: // 0160:1c951f
    memoryASet32(ds, edi + 140, edx);
    eax = memoryAGet32(ds, esi + 144);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9564;
    edx = memoryAGet32(ds, edi + 144);
    if (eax == 0x80808080)
        goto loc_1c9564;
    if (al & 0x80)
        goto loc_1c9547;
    dl = al;
loc_1c9547: // 0160:1c9547
    if (ah & 0x80)
        goto loc_1c954e;
    dh = ah;
loc_1c954e: // 0160:1c954e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c955a;
    dl = al;
loc_1c955a: // 0160:1c955a
    if (ah & 0x80)
        goto loc_1c9561;
    dh = ah;
loc_1c9561: // 0160:1c9561
    edx = rol32(edx, 0x10);
loc_1c9564: // 0160:1c9564
    memoryASet32(ds, edi + 144, edx);
    eax = memoryAGet32(ds, esi + 148);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c95a9;
    edx = memoryAGet32(ds, edi + 148);
    if (eax == 0x80808080)
        goto loc_1c95a9;
    if (al & 0x80)
        goto loc_1c958c;
    dl = al;
loc_1c958c: // 0160:1c958c
    if (ah & 0x80)
        goto loc_1c9593;
    dh = ah;
loc_1c9593: // 0160:1c9593
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c959f;
    dl = al;
loc_1c959f: // 0160:1c959f
    if (ah & 0x80)
        goto loc_1c95a6;
    dh = ah;
loc_1c95a6: // 0160:1c95a6
    edx = rol32(edx, 0x10);
loc_1c95a9: // 0160:1c95a9
    memoryASet32(ds, edi + 148, edx);
    eax = memoryAGet32(ds, esi + 152);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c95ee;
    edx = memoryAGet32(ds, edi + 152);
    if (eax == 0x80808080)
        goto loc_1c95ee;
    if (al & 0x80)
        goto loc_1c95d1;
    dl = al;
loc_1c95d1: // 0160:1c95d1
    if (ah & 0x80)
        goto loc_1c95d8;
    dh = ah;
loc_1c95d8: // 0160:1c95d8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c95e4;
    dl = al;
loc_1c95e4: // 0160:1c95e4
    if (ah & 0x80)
        goto loc_1c95eb;
    dh = ah;
loc_1c95eb: // 0160:1c95eb
    edx = rol32(edx, 0x10);
loc_1c95ee: // 0160:1c95ee
    memoryASet32(ds, edi + 152, edx);
    eax = memoryAGet32(ds, esi + 156);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9633;
    edx = memoryAGet32(ds, edi + 156);
    if (eax == 0x80808080)
        goto loc_1c9633;
    if (al & 0x80)
        goto loc_1c9616;
    dl = al;
loc_1c9616: // 0160:1c9616
    if (ah & 0x80)
        goto loc_1c961d;
    dh = ah;
loc_1c961d: // 0160:1c961d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9629;
    dl = al;
loc_1c9629: // 0160:1c9629
    if (ah & 0x80)
        goto loc_1c9630;
    dh = ah;
loc_1c9630: // 0160:1c9630
    edx = rol32(edx, 0x10);
loc_1c9633: // 0160:1c9633
    memoryASet32(ds, edi + 156, edx);
    eax = memoryAGet32(ds, esi + 160);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9678;
    edx = memoryAGet32(ds, edi + 160);
    if (eax == 0x80808080)
        goto loc_1c9678;
    if (al & 0x80)
        goto loc_1c965b;
    dl = al;
loc_1c965b: // 0160:1c965b
    if (ah & 0x80)
        goto loc_1c9662;
    dh = ah;
loc_1c9662: // 0160:1c9662
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c966e;
    dl = al;
loc_1c966e: // 0160:1c966e
    if (ah & 0x80)
        goto loc_1c9675;
    dh = ah;
loc_1c9675: // 0160:1c9675
    edx = rol32(edx, 0x10);
loc_1c9678: // 0160:1c9678
    memoryASet32(ds, edi + 160, edx);
    eax = memoryAGet32(ds, esi + 164);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c96bd;
    edx = memoryAGet32(ds, edi + 164);
    if (eax == 0x80808080)
        goto loc_1c96bd;
    if (al & 0x80)
        goto loc_1c96a0;
    dl = al;
loc_1c96a0: // 0160:1c96a0
    if (ah & 0x80)
        goto loc_1c96a7;
    dh = ah;
loc_1c96a7: // 0160:1c96a7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c96b3;
    dl = al;
loc_1c96b3: // 0160:1c96b3
    if (ah & 0x80)
        goto loc_1c96ba;
    dh = ah;
loc_1c96ba: // 0160:1c96ba
    edx = rol32(edx, 0x10);
loc_1c96bd: // 0160:1c96bd
    memoryASet32(ds, edi + 164, edx);
    eax = memoryAGet32(ds, esi + 168);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9702;
    edx = memoryAGet32(ds, edi + 168);
    if (eax == 0x80808080)
        goto loc_1c9702;
    if (al & 0x80)
        goto loc_1c96e5;
    dl = al;
loc_1c96e5: // 0160:1c96e5
    if (ah & 0x80)
        goto loc_1c96ec;
    dh = ah;
loc_1c96ec: // 0160:1c96ec
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c96f8;
    dl = al;
loc_1c96f8: // 0160:1c96f8
    if (ah & 0x80)
        goto loc_1c96ff;
    dh = ah;
loc_1c96ff: // 0160:1c96ff
    edx = rol32(edx, 0x10);
loc_1c9702: // 0160:1c9702
    memoryASet32(ds, edi + 168, edx);
    eax = memoryAGet32(ds, esi + 172);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9747;
    edx = memoryAGet32(ds, edi + 172);
    if (eax == 0x80808080)
        goto loc_1c9747;
    if (al & 0x80)
        goto loc_1c972a;
    dl = al;
loc_1c972a: // 0160:1c972a
    if (ah & 0x80)
        goto loc_1c9731;
    dh = ah;
loc_1c9731: // 0160:1c9731
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c973d;
    dl = al;
loc_1c973d: // 0160:1c973d
    if (ah & 0x80)
        goto loc_1c9744;
    dh = ah;
loc_1c9744: // 0160:1c9744
    edx = rol32(edx, 0x10);
loc_1c9747: // 0160:1c9747
    memoryASet32(ds, edi + 172, edx);
    eax = memoryAGet32(ds, esi + 176);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c978c;
    edx = memoryAGet32(ds, edi + 176);
    if (eax == 0x80808080)
        goto loc_1c978c;
    if (al & 0x80)
        goto loc_1c976f;
    dl = al;
loc_1c976f: // 0160:1c976f
    if (ah & 0x80)
        goto loc_1c9776;
    dh = ah;
loc_1c9776: // 0160:1c9776
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9782;
    dl = al;
loc_1c9782: // 0160:1c9782
    if (ah & 0x80)
        goto loc_1c9789;
    dh = ah;
loc_1c9789: // 0160:1c9789
    edx = rol32(edx, 0x10);
loc_1c978c: // 0160:1c978c
    memoryASet32(ds, edi + 176, edx);
    eax = memoryAGet32(ds, esi + 180);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c97d1;
    edx = memoryAGet32(ds, edi + 180);
    if (eax == 0x80808080)
        goto loc_1c97d1;
    if (al & 0x80)
        goto loc_1c97b4;
    dl = al;
loc_1c97b4: // 0160:1c97b4
    if (ah & 0x80)
        goto loc_1c97bb;
    dh = ah;
loc_1c97bb: // 0160:1c97bb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c97c7;
    dl = al;
loc_1c97c7: // 0160:1c97c7
    if (ah & 0x80)
        goto loc_1c97ce;
    dh = ah;
loc_1c97ce: // 0160:1c97ce
    edx = rol32(edx, 0x10);
loc_1c97d1: // 0160:1c97d1
    memoryASet32(ds, edi + 180, edx);
    eax = memoryAGet32(ds, esi + 184);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9816;
    edx = memoryAGet32(ds, edi + 184);
    if (eax == 0x80808080)
        goto loc_1c9816;
    if (al & 0x80)
        goto loc_1c97f9;
    dl = al;
loc_1c97f9: // 0160:1c97f9
    if (ah & 0x80)
        goto loc_1c9800;
    dh = ah;
loc_1c9800: // 0160:1c9800
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c980c;
    dl = al;
loc_1c980c: // 0160:1c980c
    if (ah & 0x80)
        goto loc_1c9813;
    dh = ah;
loc_1c9813: // 0160:1c9813
    edx = rol32(edx, 0x10);
loc_1c9816: // 0160:1c9816
    memoryASet32(ds, edi + 184, edx);
    eax = memoryAGet32(ds, esi + 188);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c985b;
    edx = memoryAGet32(ds, edi + 188);
    if (eax == 0x80808080)
        goto loc_1c985b;
    if (al & 0x80)
        goto loc_1c983e;
    dl = al;
loc_1c983e: // 0160:1c983e
    if (ah & 0x80)
        goto loc_1c9845;
    dh = ah;
loc_1c9845: // 0160:1c9845
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9851;
    dl = al;
loc_1c9851: // 0160:1c9851
    if (ah & 0x80)
        goto loc_1c9858;
    dh = ah;
loc_1c9858: // 0160:1c9858
    edx = rol32(edx, 0x10);
loc_1c985b: // 0160:1c985b
    memoryASet32(ds, edi + 188, edx);
    eax = memoryAGet32(ds, esi + 192);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c98a0;
    edx = memoryAGet32(ds, edi + 192);
    if (eax == 0x80808080)
        goto loc_1c98a0;
    if (al & 0x80)
        goto loc_1c9883;
    dl = al;
loc_1c9883: // 0160:1c9883
    if (ah & 0x80)
        goto loc_1c988a;
    dh = ah;
loc_1c988a: // 0160:1c988a
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9896;
    dl = al;
loc_1c9896: // 0160:1c9896
    if (ah & 0x80)
        goto loc_1c989d;
    dh = ah;
loc_1c989d: // 0160:1c989d
    edx = rol32(edx, 0x10);
loc_1c98a0: // 0160:1c98a0
    memoryASet32(ds, edi + 192, edx);
    eax = memoryAGet32(ds, esi + 196);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c98e5;
    edx = memoryAGet32(ds, edi + 196);
    if (eax == 0x80808080)
        goto loc_1c98e5;
    if (al & 0x80)
        goto loc_1c98c8;
    dl = al;
loc_1c98c8: // 0160:1c98c8
    if (ah & 0x80)
        goto loc_1c98cf;
    dh = ah;
loc_1c98cf: // 0160:1c98cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c98db;
    dl = al;
loc_1c98db: // 0160:1c98db
    if (ah & 0x80)
        goto loc_1c98e2;
    dh = ah;
loc_1c98e2: // 0160:1c98e2
    edx = rol32(edx, 0x10);
loc_1c98e5: // 0160:1c98e5
    memoryASet32(ds, edi + 196, edx);
    eax = memoryAGet32(ds, esi + 200);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c992a;
    edx = memoryAGet32(ds, edi + 200);
    if (eax == 0x80808080)
        goto loc_1c992a;
    if (al & 0x80)
        goto loc_1c990d;
    dl = al;
loc_1c990d: // 0160:1c990d
    if (ah & 0x80)
        goto loc_1c9914;
    dh = ah;
loc_1c9914: // 0160:1c9914
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9920;
    dl = al;
loc_1c9920: // 0160:1c9920
    if (ah & 0x80)
        goto loc_1c9927;
    dh = ah;
loc_1c9927: // 0160:1c9927
    edx = rol32(edx, 0x10);
loc_1c992a: // 0160:1c992a
    memoryASet32(ds, edi + 200, edx);
    eax = memoryAGet32(ds, esi + 204);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c996f;
    edx = memoryAGet32(ds, edi + 204);
    if (eax == 0x80808080)
        goto loc_1c996f;
    if (al & 0x80)
        goto loc_1c9952;
    dl = al;
loc_1c9952: // 0160:1c9952
    if (ah & 0x80)
        goto loc_1c9959;
    dh = ah;
loc_1c9959: // 0160:1c9959
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9965;
    dl = al;
loc_1c9965: // 0160:1c9965
    if (ah & 0x80)
        goto loc_1c996c;
    dh = ah;
loc_1c996c: // 0160:1c996c
    edx = rol32(edx, 0x10);
loc_1c996f: // 0160:1c996f
    memoryASet32(ds, edi + 204, edx);
    eax = memoryAGet32(ds, esi + 208);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c99b4;
    edx = memoryAGet32(ds, edi + 208);
    if (eax == 0x80808080)
        goto loc_1c99b4;
    if (al & 0x80)
        goto loc_1c9997;
    dl = al;
loc_1c9997: // 0160:1c9997
    if (ah & 0x80)
        goto loc_1c999e;
    dh = ah;
loc_1c999e: // 0160:1c999e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c99aa;
    dl = al;
loc_1c99aa: // 0160:1c99aa
    if (ah & 0x80)
        goto loc_1c99b1;
    dh = ah;
loc_1c99b1: // 0160:1c99b1
    edx = rol32(edx, 0x10);
loc_1c99b4: // 0160:1c99b4
    memoryASet32(ds, edi + 208, edx);
    eax = memoryAGet32(ds, esi + 212);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c99f9;
    edx = memoryAGet32(ds, edi + 212);
    if (eax == 0x80808080)
        goto loc_1c99f9;
    if (al & 0x80)
        goto loc_1c99dc;
    dl = al;
loc_1c99dc: // 0160:1c99dc
    if (ah & 0x80)
        goto loc_1c99e3;
    dh = ah;
loc_1c99e3: // 0160:1c99e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c99ef;
    dl = al;
loc_1c99ef: // 0160:1c99ef
    if (ah & 0x80)
        goto loc_1c99f6;
    dh = ah;
loc_1c99f6: // 0160:1c99f6
    edx = rol32(edx, 0x10);
loc_1c99f9: // 0160:1c99f9
    memoryASet32(ds, edi + 212, edx);
    eax = memoryAGet32(ds, esi + 216);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9a3e;
    edx = memoryAGet32(ds, edi + 216);
    if (eax == 0x80808080)
        goto loc_1c9a3e;
    if (al & 0x80)
        goto loc_1c9a21;
    dl = al;
loc_1c9a21: // 0160:1c9a21
    if (ah & 0x80)
        goto loc_1c9a28;
    dh = ah;
loc_1c9a28: // 0160:1c9a28
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9a34;
    dl = al;
loc_1c9a34: // 0160:1c9a34
    if (ah & 0x80)
        goto loc_1c9a3b;
    dh = ah;
loc_1c9a3b: // 0160:1c9a3b
    edx = rol32(edx, 0x10);
loc_1c9a3e: // 0160:1c9a3e
    memoryASet32(ds, edi + 216, edx);
    eax = memoryAGet32(ds, esi + 220);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9a83;
    edx = memoryAGet32(ds, edi + 220);
    if (eax == 0x80808080)
        goto loc_1c9a83;
    if (al & 0x80)
        goto loc_1c9a66;
    dl = al;
loc_1c9a66: // 0160:1c9a66
    if (ah & 0x80)
        goto loc_1c9a6d;
    dh = ah;
loc_1c9a6d: // 0160:1c9a6d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9a79;
    dl = al;
loc_1c9a79: // 0160:1c9a79
    if (ah & 0x80)
        goto loc_1c9a80;
    dh = ah;
loc_1c9a80: // 0160:1c9a80
    edx = rol32(edx, 0x10);
loc_1c9a83: // 0160:1c9a83
    memoryASet32(ds, edi + 220, edx);
    eax = memoryAGet32(ds, esi + 224);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9ac8;
    edx = memoryAGet32(ds, edi + 224);
    if (eax == 0x80808080)
        goto loc_1c9ac8;
    if (al & 0x80)
        goto loc_1c9aab;
    dl = al;
loc_1c9aab: // 0160:1c9aab
    if (ah & 0x80)
        goto loc_1c9ab2;
    dh = ah;
loc_1c9ab2: // 0160:1c9ab2
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9abe;
    dl = al;
loc_1c9abe: // 0160:1c9abe
    if (ah & 0x80)
        goto loc_1c9ac5;
    dh = ah;
loc_1c9ac5: // 0160:1c9ac5
    edx = rol32(edx, 0x10);
loc_1c9ac8: // 0160:1c9ac8
    memoryASet32(ds, edi + 224, edx);
    eax = memoryAGet32(ds, esi + 228);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9b0d;
    edx = memoryAGet32(ds, edi + 228);
    if (eax == 0x80808080)
        goto loc_1c9b0d;
    if (al & 0x80)
        goto loc_1c9af0;
    dl = al;
loc_1c9af0: // 0160:1c9af0
    if (ah & 0x80)
        goto loc_1c9af7;
    dh = ah;
loc_1c9af7: // 0160:1c9af7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9b03;
    dl = al;
loc_1c9b03: // 0160:1c9b03
    if (ah & 0x80)
        goto loc_1c9b0a;
    dh = ah;
loc_1c9b0a: // 0160:1c9b0a
    edx = rol32(edx, 0x10);
loc_1c9b0d: // 0160:1c9b0d
    memoryASet32(ds, edi + 228, edx);
    eax = memoryAGet32(ds, esi + 232);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9b52;
    edx = memoryAGet32(ds, edi + 232);
    if (eax == 0x80808080)
        goto loc_1c9b52;
    if (al & 0x80)
        goto loc_1c9b35;
    dl = al;
loc_1c9b35: // 0160:1c9b35
    if (ah & 0x80)
        goto loc_1c9b3c;
    dh = ah;
loc_1c9b3c: // 0160:1c9b3c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9b48;
    dl = al;
loc_1c9b48: // 0160:1c9b48
    if (ah & 0x80)
        goto loc_1c9b4f;
    dh = ah;
loc_1c9b4f: // 0160:1c9b4f
    edx = rol32(edx, 0x10);
loc_1c9b52: // 0160:1c9b52
    memoryASet32(ds, edi + 232, edx);
    eax = memoryAGet32(ds, esi + 236);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9b97;
    edx = memoryAGet32(ds, edi + 236);
    if (eax == 0x80808080)
        goto loc_1c9b97;
    if (al & 0x80)
        goto loc_1c9b7a;
    dl = al;
loc_1c9b7a: // 0160:1c9b7a
    if (ah & 0x80)
        goto loc_1c9b81;
    dh = ah;
loc_1c9b81: // 0160:1c9b81
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9b8d;
    dl = al;
loc_1c9b8d: // 0160:1c9b8d
    if (ah & 0x80)
        goto loc_1c9b94;
    dh = ah;
loc_1c9b94: // 0160:1c9b94
    edx = rol32(edx, 0x10);
loc_1c9b97: // 0160:1c9b97
    memoryASet32(ds, edi + 236, edx);
    eax = memoryAGet32(ds, esi + 240);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9bdc;
    edx = memoryAGet32(ds, edi + 240);
    if (eax == 0x80808080)
        goto loc_1c9bdc;
    if (al & 0x80)
        goto loc_1c9bbf;
    dl = al;
loc_1c9bbf: // 0160:1c9bbf
    if (ah & 0x80)
        goto loc_1c9bc6;
    dh = ah;
loc_1c9bc6: // 0160:1c9bc6
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9bd2;
    dl = al;
loc_1c9bd2: // 0160:1c9bd2
    if (ah & 0x80)
        goto loc_1c9bd9;
    dh = ah;
loc_1c9bd9: // 0160:1c9bd9
    edx = rol32(edx, 0x10);
loc_1c9bdc: // 0160:1c9bdc
    memoryASet32(ds, edi + 240, edx);
    eax = memoryAGet32(ds, esi + 244);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9c21;
    edx = memoryAGet32(ds, edi + 244);
    if (eax == 0x80808080)
        goto loc_1c9c21;
    if (al & 0x80)
        goto loc_1c9c04;
    dl = al;
loc_1c9c04: // 0160:1c9c04
    if (ah & 0x80)
        goto loc_1c9c0b;
    dh = ah;
loc_1c9c0b: // 0160:1c9c0b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9c17;
    dl = al;
loc_1c9c17: // 0160:1c9c17
    if (ah & 0x80)
        goto loc_1c9c1e;
    dh = ah;
loc_1c9c1e: // 0160:1c9c1e
    edx = rol32(edx, 0x10);
loc_1c9c21: // 0160:1c9c21
    memoryASet32(ds, edi + 244, edx);
    eax = memoryAGet32(ds, esi + 248);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9c66;
    edx = memoryAGet32(ds, edi + 248);
    if (eax == 0x80808080)
        goto loc_1c9c66;
    if (al & 0x80)
        goto loc_1c9c49;
    dl = al;
loc_1c9c49: // 0160:1c9c49
    if (ah & 0x80)
        goto loc_1c9c50;
    dh = ah;
loc_1c9c50: // 0160:1c9c50
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9c5c;
    dl = al;
loc_1c9c5c: // 0160:1c9c5c
    if (ah & 0x80)
        goto loc_1c9c63;
    dh = ah;
loc_1c9c63: // 0160:1c9c63
    edx = rol32(edx, 0x10);
loc_1c9c66: // 0160:1c9c66
    memoryASet32(ds, edi + 248, edx);
    eax = memoryAGet32(ds, esi + 252);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9cab;
    edx = memoryAGet32(ds, edi + 252);
    if (eax == 0x80808080)
        goto loc_1c9cab;
    if (al & 0x80)
        goto loc_1c9c8e;
    dl = al;
loc_1c9c8e: // 0160:1c9c8e
    if (ah & 0x80)
        goto loc_1c9c95;
    dh = ah;
loc_1c9c95: // 0160:1c9c95
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9ca1;
    dl = al;
loc_1c9ca1: // 0160:1c9ca1
    if (ah & 0x80)
        goto loc_1c9ca8;
    dh = ah;
loc_1c9ca8: // 0160:1c9ca8
    edx = rol32(edx, 0x10);
loc_1c9cab: // 0160:1c9cab
    memoryASet32(ds, edi + 252, edx);
    eax = memoryAGet32(ds, esi + 256);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9cf0;
    edx = memoryAGet32(ds, edi + 256);
    if (eax == 0x80808080)
        goto loc_1c9cf0;
    if (al & 0x80)
        goto loc_1c9cd3;
    dl = al;
loc_1c9cd3: // 0160:1c9cd3
    if (ah & 0x80)
        goto loc_1c9cda;
    dh = ah;
loc_1c9cda: // 0160:1c9cda
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9ce6;
    dl = al;
loc_1c9ce6: // 0160:1c9ce6
    if (ah & 0x80)
        goto loc_1c9ced;
    dh = ah;
loc_1c9ced: // 0160:1c9ced
    edx = rol32(edx, 0x10);
loc_1c9cf0: // 0160:1c9cf0
    memoryASet32(ds, edi + 256, edx);
    eax = memoryAGet32(ds, esi + 260);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9d35;
    edx = memoryAGet32(ds, edi + 260);
    if (eax == 0x80808080)
        goto loc_1c9d35;
    if (al & 0x80)
        goto loc_1c9d18;
    dl = al;
loc_1c9d18: // 0160:1c9d18
    if (ah & 0x80)
        goto loc_1c9d1f;
    dh = ah;
loc_1c9d1f: // 0160:1c9d1f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9d2b;
    dl = al;
loc_1c9d2b: // 0160:1c9d2b
    if (ah & 0x80)
        goto loc_1c9d32;
    dh = ah;
loc_1c9d32: // 0160:1c9d32
    edx = rol32(edx, 0x10);
loc_1c9d35: // 0160:1c9d35
    memoryASet32(ds, edi + 260, edx);
    eax = memoryAGet32(ds, esi + 264);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9d7a;
    edx = memoryAGet32(ds, edi + 264);
    if (eax == 0x80808080)
        goto loc_1c9d7a;
    if (al & 0x80)
        goto loc_1c9d5d;
    dl = al;
loc_1c9d5d: // 0160:1c9d5d
    if (ah & 0x80)
        goto loc_1c9d64;
    dh = ah;
loc_1c9d64: // 0160:1c9d64
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9d70;
    dl = al;
loc_1c9d70: // 0160:1c9d70
    if (ah & 0x80)
        goto loc_1c9d77;
    dh = ah;
loc_1c9d77: // 0160:1c9d77
    edx = rol32(edx, 0x10);
loc_1c9d7a: // 0160:1c9d7a
    memoryASet32(ds, edi + 264, edx);
    eax = memoryAGet32(ds, esi + 268);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9dbf;
    edx = memoryAGet32(ds, edi + 268);
    if (eax == 0x80808080)
        goto loc_1c9dbf;
    if (al & 0x80)
        goto loc_1c9da2;
    dl = al;
loc_1c9da2: // 0160:1c9da2
    if (ah & 0x80)
        goto loc_1c9da9;
    dh = ah;
loc_1c9da9: // 0160:1c9da9
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9db5;
    dl = al;
loc_1c9db5: // 0160:1c9db5
    if (ah & 0x80)
        goto loc_1c9dbc;
    dh = ah;
loc_1c9dbc: // 0160:1c9dbc
    edx = rol32(edx, 0x10);
loc_1c9dbf: // 0160:1c9dbf
    memoryASet32(ds, edi + 268, edx);
    eax = memoryAGet32(ds, esi + 272);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9e04;
    edx = memoryAGet32(ds, edi + 272);
    if (eax == 0x80808080)
        goto loc_1c9e04;
    if (al & 0x80)
        goto loc_1c9de7;
    dl = al;
loc_1c9de7: // 0160:1c9de7
    if (ah & 0x80)
        goto loc_1c9dee;
    dh = ah;
loc_1c9dee: // 0160:1c9dee
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9dfa;
    dl = al;
loc_1c9dfa: // 0160:1c9dfa
    if (ah & 0x80)
        goto loc_1c9e01;
    dh = ah;
loc_1c9e01: // 0160:1c9e01
    edx = rol32(edx, 0x10);
loc_1c9e04: // 0160:1c9e04
    memoryASet32(ds, edi + 272, edx);
    eax = memoryAGet32(ds, esi + 276);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9e49;
    edx = memoryAGet32(ds, edi + 276);
    if (eax == 0x80808080)
        goto loc_1c9e49;
    if (al & 0x80)
        goto loc_1c9e2c;
    dl = al;
loc_1c9e2c: // 0160:1c9e2c
    if (ah & 0x80)
        goto loc_1c9e33;
    dh = ah;
loc_1c9e33: // 0160:1c9e33
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9e3f;
    dl = al;
loc_1c9e3f: // 0160:1c9e3f
    if (ah & 0x80)
        goto loc_1c9e46;
    dh = ah;
loc_1c9e46: // 0160:1c9e46
    edx = rol32(edx, 0x10);
loc_1c9e49: // 0160:1c9e49
    memoryASet32(ds, edi + 276, edx);
    eax = memoryAGet32(ds, esi + 280);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9e8e;
    edx = memoryAGet32(ds, edi + 280);
    if (eax == 0x80808080)
        goto loc_1c9e8e;
    if (al & 0x80)
        goto loc_1c9e71;
    dl = al;
loc_1c9e71: // 0160:1c9e71
    if (ah & 0x80)
        goto loc_1c9e78;
    dh = ah;
loc_1c9e78: // 0160:1c9e78
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9e84;
    dl = al;
loc_1c9e84: // 0160:1c9e84
    if (ah & 0x80)
        goto loc_1c9e8b;
    dh = ah;
loc_1c9e8b: // 0160:1c9e8b
    edx = rol32(edx, 0x10);
loc_1c9e8e: // 0160:1c9e8e
    memoryASet32(ds, edi + 280, edx);
    eax = memoryAGet32(ds, esi + 284);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9ed3;
    edx = memoryAGet32(ds, edi + 284);
    if (eax == 0x80808080)
        goto loc_1c9ed3;
    if (al & 0x80)
        goto loc_1c9eb6;
    dl = al;
loc_1c9eb6: // 0160:1c9eb6
    if (ah & 0x80)
        goto loc_1c9ebd;
    dh = ah;
loc_1c9ebd: // 0160:1c9ebd
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9ec9;
    dl = al;
loc_1c9ec9: // 0160:1c9ec9
    if (ah & 0x80)
        goto loc_1c9ed0;
    dh = ah;
loc_1c9ed0: // 0160:1c9ed0
    edx = rol32(edx, 0x10);
loc_1c9ed3: // 0160:1c9ed3
    memoryASet32(ds, edi + 284, edx);
    eax = memoryAGet32(ds, esi + 288);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9f18;
    edx = memoryAGet32(ds, edi + 288);
    if (eax == 0x80808080)
        goto loc_1c9f18;
    if (al & 0x80)
        goto loc_1c9efb;
    dl = al;
loc_1c9efb: // 0160:1c9efb
    if (ah & 0x80)
        goto loc_1c9f02;
    dh = ah;
loc_1c9f02: // 0160:1c9f02
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9f0e;
    dl = al;
loc_1c9f0e: // 0160:1c9f0e
    if (ah & 0x80)
        goto loc_1c9f15;
    dh = ah;
loc_1c9f15: // 0160:1c9f15
    edx = rol32(edx, 0x10);
loc_1c9f18: // 0160:1c9f18
    memoryASet32(ds, edi + 288, edx);
    eax = memoryAGet32(ds, esi + 292);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9f5d;
    edx = memoryAGet32(ds, edi + 292);
    if (eax == 0x80808080)
        goto loc_1c9f5d;
    if (al & 0x80)
        goto loc_1c9f40;
    dl = al;
loc_1c9f40: // 0160:1c9f40
    if (ah & 0x80)
        goto loc_1c9f47;
    dh = ah;
loc_1c9f47: // 0160:1c9f47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9f53;
    dl = al;
loc_1c9f53: // 0160:1c9f53
    if (ah & 0x80)
        goto loc_1c9f5a;
    dh = ah;
loc_1c9f5a: // 0160:1c9f5a
    edx = rol32(edx, 0x10);
loc_1c9f5d: // 0160:1c9f5d
    memoryASet32(ds, edi + 292, edx);
    eax = memoryAGet32(ds, esi + 296);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9fa2;
    edx = memoryAGet32(ds, edi + 296);
    if (eax == 0x80808080)
        goto loc_1c9fa2;
    if (al & 0x80)
        goto loc_1c9f85;
    dl = al;
loc_1c9f85: // 0160:1c9f85
    if (ah & 0x80)
        goto loc_1c9f8c;
    dh = ah;
loc_1c9f8c: // 0160:1c9f8c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9f98;
    dl = al;
loc_1c9f98: // 0160:1c9f98
    if (ah & 0x80)
        goto loc_1c9f9f;
    dh = ah;
loc_1c9f9f: // 0160:1c9f9f
    edx = rol32(edx, 0x10);
loc_1c9fa2: // 0160:1c9fa2
    memoryASet32(ds, edi + 296, edx);
    eax = memoryAGet32(ds, esi + 300);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1c9fe7;
    edx = memoryAGet32(ds, edi + 300);
    if (eax == 0x80808080)
        goto loc_1c9fe7;
    if (al & 0x80)
        goto loc_1c9fca;
    dl = al;
loc_1c9fca: // 0160:1c9fca
    if (ah & 0x80)
        goto loc_1c9fd1;
    dh = ah;
loc_1c9fd1: // 0160:1c9fd1
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1c9fdd;
    dl = al;
loc_1c9fdd: // 0160:1c9fdd
    if (ah & 0x80)
        goto loc_1c9fe4;
    dh = ah;
loc_1c9fe4: // 0160:1c9fe4
    edx = rol32(edx, 0x10);
loc_1c9fe7: // 0160:1c9fe7
    memoryASet32(ds, edi + 300, edx);
    eax = memoryAGet32(ds, esi + 304);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1ca02c;
    edx = memoryAGet32(ds, edi + 304);
    if (eax == 0x80808080)
        goto loc_1ca02c;
    if (al & 0x80)
        goto loc_1ca00f;
    dl = al;
loc_1ca00f: // 0160:1ca00f
    if (ah & 0x80)
        goto loc_1ca016;
    dh = ah;
loc_1ca016: // 0160:1ca016
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1ca022;
    dl = al;
loc_1ca022: // 0160:1ca022
    if (ah & 0x80)
        goto loc_1ca029;
    dh = ah;
loc_1ca029: // 0160:1ca029
    edx = rol32(edx, 0x10);
loc_1ca02c: // 0160:1ca02c
    memoryASet32(ds, edi + 304, edx);
    eax = memoryAGet32(ds, esi + 308);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1ca071;
    edx = memoryAGet32(ds, edi + 308);
    if (eax == 0x80808080)
        goto loc_1ca071;
    if (al & 0x80)
        goto loc_1ca054;
    dl = al;
loc_1ca054: // 0160:1ca054
    if (ah & 0x80)
        goto loc_1ca05b;
    dh = ah;
loc_1ca05b: // 0160:1ca05b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1ca067;
    dl = al;
loc_1ca067: // 0160:1ca067
    if (ah & 0x80)
        goto loc_1ca06e;
    dh = ah;
loc_1ca06e: // 0160:1ca06e
    edx = rol32(edx, 0x10);
loc_1ca071: // 0160:1ca071
    memoryASet32(ds, edi + 308, edx);
    eax = memoryAGet32(ds, esi + 312);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1ca0b6;
    edx = memoryAGet32(ds, edi + 312);
    if (eax == 0x80808080)
        goto loc_1ca0b6;
    if (al & 0x80)
        goto loc_1ca099;
    dl = al;
loc_1ca099: // 0160:1ca099
    if (ah & 0x80)
        goto loc_1ca0a0;
    dh = ah;
loc_1ca0a0: // 0160:1ca0a0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1ca0ac;
    dl = al;
loc_1ca0ac: // 0160:1ca0ac
    if (ah & 0x80)
        goto loc_1ca0b3;
    dh = ah;
loc_1ca0b3: // 0160:1ca0b3
    edx = rol32(edx, 0x10);
loc_1ca0b6: // 0160:1ca0b6
    memoryASet32(ds, edi + 312, edx);
    eax = memoryAGet32(ds, esi + 316);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_1ca0fb;
    edx = memoryAGet32(ds, edi + 316);
    if (eax == 0x80808080)
        goto loc_1ca0fb;
    if (al & 0x80)
        goto loc_1ca0de;
    dl = al;
loc_1ca0de: // 0160:1ca0de
    if (ah & 0x80)
        goto loc_1ca0e5;
    dh = ah;
loc_1ca0e5: // 0160:1ca0e5
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_1ca0f1;
    dl = al;
loc_1ca0f1: // 0160:1ca0f1
    if (ah & 0x80)
        goto loc_1ca0f8;
    dh = ah;
loc_1ca0f8: // 0160:1ca0f8
    edx = rol32(edx, 0x10);
loc_1ca0fb: // 0160:1ca0fb
    memoryASet32(ds, edi + 316, edx);
    esi += 0x00000280;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1c8c94;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1ca116() // 0160:1ca116 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = ebx;
    goto loc_1ca11f;
loc_1ca11f: // 0160:1ca11f
    goto loc_1ca121;
loc_1ca121: // 0160:1ca121
    goto loc_1ca124;
    // gap 1 bytes
loc_1ca124: // 0160:1ca124
    eax = memoryAGet32(ds, esi);
    if (!eax)
        goto loc_1ca15a;
    if (!ax)
        goto loc_1ca13f;
    if (al)
        goto loc_1ca135;
    al = memoryAGet(ds, edi);
loc_1ca135: // 0160:1ca135
    if (ah)
        goto loc_1ca13c;
    ah = memoryAGet(ds, edi + 1);
loc_1ca13c: // 0160:1ca13c
    memoryASet16(ds, edi, ax);
loc_1ca13f: // 0160:1ca13f
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_1ca15a;
    if (al)
        goto loc_1ca14f;
    al = memoryAGet(ds, edi + 2);
loc_1ca14f: // 0160:1ca14f
    if (ah)
        goto loc_1ca156;
    ah = memoryAGet(ds, edi + 3);
loc_1ca156: // 0160:1ca156
    memoryASet16(ds, edi + 2, ax);
loc_1ca15a: // 0160:1ca15a
    eax = memoryAGet32(ds, esi + 4);
    if (!eax)
        goto loc_1ca193;
    if (!ax)
        goto loc_1ca178;
    if (al)
        goto loc_1ca16d;
    al = memoryAGet(ds, edi + 4);
loc_1ca16d: // 0160:1ca16d
    if (ah)
        goto loc_1ca174;
    ah = memoryAGet(ds, edi + 5);
loc_1ca174: // 0160:1ca174
    memoryASet16(ds, edi + 4, ax);
loc_1ca178: // 0160:1ca178
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_1ca193;
    if (al)
        goto loc_1ca188;
    al = memoryAGet(ds, edi + 6);
loc_1ca188: // 0160:1ca188
    if (ah)
        goto loc_1ca18f;
    ah = memoryAGet(ds, edi + 7);
loc_1ca18f: // 0160:1ca18f
    memoryASet16(ds, edi + 6, ax);
loc_1ca193: // 0160:1ca193
    eax = memoryAGet32(ds, esi + 8);
    if (!eax)
        goto loc_1ca1cc;
    if (!ax)
        goto loc_1ca1b1;
    if (al)
        goto loc_1ca1a6;
    al = memoryAGet(ds, edi + 8);
loc_1ca1a6: // 0160:1ca1a6
    if (ah)
        goto loc_1ca1ad;
    ah = memoryAGet(ds, edi + 9);
loc_1ca1ad: // 0160:1ca1ad
    memoryASet16(ds, edi + 8, ax);
loc_1ca1b1: // 0160:1ca1b1
    ax = memoryAGet16(ds, esi + 10);
    if (!ax)
        goto loc_1ca1cc;
    if (al)
        goto loc_1ca1c1;
    al = memoryAGet(ds, edi + 10);
loc_1ca1c1: // 0160:1ca1c1
    if (ah)
        goto loc_1ca1c8;
    ah = memoryAGet(ds, edi + 11);
loc_1ca1c8: // 0160:1ca1c8
    memoryASet16(ds, edi + 10, ax);
loc_1ca1cc: // 0160:1ca1cc
    eax = memoryAGet32(ds, esi + 12);
    if (!eax)
        goto loc_1ca205;
    if (!ax)
        goto loc_1ca1ea;
    if (al)
        goto loc_1ca1df;
    al = memoryAGet(ds, edi + 12);
loc_1ca1df: // 0160:1ca1df
    if (ah)
        goto loc_1ca1e6;
    ah = memoryAGet(ds, edi + 13);
loc_1ca1e6: // 0160:1ca1e6
    memoryASet16(ds, edi + 12, ax);
loc_1ca1ea: // 0160:1ca1ea
    ax = memoryAGet16(ds, esi + 14);
    if (!ax)
        goto loc_1ca205;
    if (al)
        goto loc_1ca1fa;
    al = memoryAGet(ds, edi + 14);
loc_1ca1fa: // 0160:1ca1fa
    if (ah)
        goto loc_1ca201;
    ah = memoryAGet(ds, edi + 15);
loc_1ca201: // 0160:1ca201
    memoryASet16(ds, edi + 14, ax);
loc_1ca205: // 0160:1ca205
    eax = memoryAGet32(ds, esi + 16);
    if (!eax)
        goto loc_1ca23e;
    if (!ax)
        goto loc_1ca223;
    if (al)
        goto loc_1ca218;
    al = memoryAGet(ds, edi + 16);
loc_1ca218: // 0160:1ca218
    if (ah)
        goto loc_1ca21f;
    ah = memoryAGet(ds, edi + 17);
loc_1ca21f: // 0160:1ca21f
    memoryASet16(ds, edi + 16, ax);
loc_1ca223: // 0160:1ca223
    ax = memoryAGet16(ds, esi + 18);
    if (!ax)
        goto loc_1ca23e;
    if (al)
        goto loc_1ca233;
    al = memoryAGet(ds, edi + 18);
loc_1ca233: // 0160:1ca233
    if (ah)
        goto loc_1ca23a;
    ah = memoryAGet(ds, edi + 19);
loc_1ca23a: // 0160:1ca23a
    memoryASet16(ds, edi + 18, ax);
loc_1ca23e: // 0160:1ca23e
    eax = memoryAGet32(ds, esi + 20);
    if (!eax)
        goto loc_1ca277;
    if (!ax)
        goto loc_1ca25c;
    if (al)
        goto loc_1ca251;
    al = memoryAGet(ds, edi + 20);
loc_1ca251: // 0160:1ca251
    if (ah)
        goto loc_1ca258;
    ah = memoryAGet(ds, edi + 21);
loc_1ca258: // 0160:1ca258
    memoryASet16(ds, edi + 20, ax);
loc_1ca25c: // 0160:1ca25c
    ax = memoryAGet16(ds, esi + 22);
    if (!ax)
        goto loc_1ca277;
    if (al)
        goto loc_1ca26c;
    al = memoryAGet(ds, edi + 22);
loc_1ca26c: // 0160:1ca26c
    if (ah)
        goto loc_1ca273;
    ah = memoryAGet(ds, edi + 23);
loc_1ca273: // 0160:1ca273
    memoryASet16(ds, edi + 22, ax);
loc_1ca277: // 0160:1ca277
    eax = memoryAGet32(ds, esi + 24);
    if (!eax)
        goto loc_1ca2b0;
    if (!ax)
        goto loc_1ca295;
    if (al)
        goto loc_1ca28a;
    al = memoryAGet(ds, edi + 24);
loc_1ca28a: // 0160:1ca28a
    if (ah)
        goto loc_1ca291;
    ah = memoryAGet(ds, edi + 25);
loc_1ca291: // 0160:1ca291
    memoryASet16(ds, edi + 24, ax);
loc_1ca295: // 0160:1ca295
    ax = memoryAGet16(ds, esi + 26);
    if (!ax)
        goto loc_1ca2b0;
    if (al)
        goto loc_1ca2a5;
    al = memoryAGet(ds, edi + 26);
loc_1ca2a5: // 0160:1ca2a5
    if (ah)
        goto loc_1ca2ac;
    ah = memoryAGet(ds, edi + 27);
loc_1ca2ac: // 0160:1ca2ac
    memoryASet16(ds, edi + 26, ax);
loc_1ca2b0: // 0160:1ca2b0
    eax = memoryAGet32(ds, esi + 28);
    if (!eax)
        goto loc_1ca2e9;
    if (!ax)
        goto loc_1ca2ce;
    if (al)
        goto loc_1ca2c3;
    al = memoryAGet(ds, edi + 28);
loc_1ca2c3: // 0160:1ca2c3
    if (ah)
        goto loc_1ca2ca;
    ah = memoryAGet(ds, edi + 29);
loc_1ca2ca: // 0160:1ca2ca
    memoryASet16(ds, edi + 28, ax);
loc_1ca2ce: // 0160:1ca2ce
    ax = memoryAGet16(ds, esi + 30);
    if (!ax)
        goto loc_1ca2e9;
    if (al)
        goto loc_1ca2de;
    al = memoryAGet(ds, edi + 30);
loc_1ca2de: // 0160:1ca2de
    if (ah)
        goto loc_1ca2e5;
    ah = memoryAGet(ds, edi + 31);
loc_1ca2e5: // 0160:1ca2e5
    memoryASet16(ds, edi + 30, ax);
loc_1ca2e9: // 0160:1ca2e9
    eax = memoryAGet32(ds, esi + 32);
    if (!eax)
        goto loc_1ca322;
    if (!ax)
        goto loc_1ca307;
    if (al)
        goto loc_1ca2fc;
    al = memoryAGet(ds, edi + 32);
loc_1ca2fc: // 0160:1ca2fc
    if (ah)
        goto loc_1ca303;
    ah = memoryAGet(ds, edi + 33);
loc_1ca303: // 0160:1ca303
    memoryASet16(ds, edi + 32, ax);
loc_1ca307: // 0160:1ca307
    ax = memoryAGet16(ds, esi + 34);
    if (!ax)
        goto loc_1ca322;
    if (al)
        goto loc_1ca317;
    al = memoryAGet(ds, edi + 34);
loc_1ca317: // 0160:1ca317
    if (ah)
        goto loc_1ca31e;
    ah = memoryAGet(ds, edi + 35);
loc_1ca31e: // 0160:1ca31e
    memoryASet16(ds, edi + 34, ax);
loc_1ca322: // 0160:1ca322
    eax = memoryAGet32(ds, esi + 36);
    if (!eax)
        goto loc_1ca35b;
    if (!ax)
        goto loc_1ca340;
    if (al)
        goto loc_1ca335;
    al = memoryAGet(ds, edi + 36);
loc_1ca335: // 0160:1ca335
    if (ah)
        goto loc_1ca33c;
    ah = memoryAGet(ds, edi + 37);
loc_1ca33c: // 0160:1ca33c
    memoryASet16(ds, edi + 36, ax);
loc_1ca340: // 0160:1ca340
    ax = memoryAGet16(ds, esi + 38);
    if (!ax)
        goto loc_1ca35b;
    if (al)
        goto loc_1ca350;
    al = memoryAGet(ds, edi + 38);
loc_1ca350: // 0160:1ca350
    if (ah)
        goto loc_1ca357;
    ah = memoryAGet(ds, edi + 39);
loc_1ca357: // 0160:1ca357
    memoryASet16(ds, edi + 38, ax);
loc_1ca35b: // 0160:1ca35b
    eax = memoryAGet32(ds, esi + 40);
    if (!eax)
        goto loc_1ca394;
    if (!ax)
        goto loc_1ca379;
    if (al)
        goto loc_1ca36e;
    al = memoryAGet(ds, edi + 40);
loc_1ca36e: // 0160:1ca36e
    if (ah)
        goto loc_1ca375;
    ah = memoryAGet(ds, edi + 41);
loc_1ca375: // 0160:1ca375
    memoryASet16(ds, edi + 40, ax);
loc_1ca379: // 0160:1ca379
    ax = memoryAGet16(ds, esi + 42);
    if (!ax)
        goto loc_1ca394;
    if (al)
        goto loc_1ca389;
    al = memoryAGet(ds, edi + 42);
loc_1ca389: // 0160:1ca389
    if (ah)
        goto loc_1ca390;
    ah = memoryAGet(ds, edi + 43);
loc_1ca390: // 0160:1ca390
    memoryASet16(ds, edi + 42, ax);
loc_1ca394: // 0160:1ca394
    eax = memoryAGet32(ds, esi + 44);
    if (!eax)
        goto loc_1ca3cd;
    if (!ax)
        goto loc_1ca3b2;
    if (al)
        goto loc_1ca3a7;
    al = memoryAGet(ds, edi + 44);
loc_1ca3a7: // 0160:1ca3a7
    if (ah)
        goto loc_1ca3ae;
    ah = memoryAGet(ds, edi + 45);
loc_1ca3ae: // 0160:1ca3ae
    memoryASet16(ds, edi + 44, ax);
loc_1ca3b2: // 0160:1ca3b2
    ax = memoryAGet16(ds, esi + 46);
    if (!ax)
        goto loc_1ca3cd;
    if (al)
        goto loc_1ca3c2;
    al = memoryAGet(ds, edi + 46);
loc_1ca3c2: // 0160:1ca3c2
    if (ah)
        goto loc_1ca3c9;
    ah = memoryAGet(ds, edi + 47);
loc_1ca3c9: // 0160:1ca3c9
    memoryASet16(ds, edi + 46, ax);
loc_1ca3cd: // 0160:1ca3cd
    eax = memoryAGet32(ds, esi + 48);
    if (!eax)
        goto loc_1ca406;
    if (!ax)
        goto loc_1ca3eb;
    if (al)
        goto loc_1ca3e0;
    al = memoryAGet(ds, edi + 48);
loc_1ca3e0: // 0160:1ca3e0
    if (ah)
        goto loc_1ca3e7;
    ah = memoryAGet(ds, edi + 49);
loc_1ca3e7: // 0160:1ca3e7
    memoryASet16(ds, edi + 48, ax);
loc_1ca3eb: // 0160:1ca3eb
    ax = memoryAGet16(ds, esi + 50);
    if (!ax)
        goto loc_1ca406;
    if (al)
        goto loc_1ca3fb;
    al = memoryAGet(ds, edi + 50);
loc_1ca3fb: // 0160:1ca3fb
    if (ah)
        goto loc_1ca402;
    ah = memoryAGet(ds, edi + 51);
loc_1ca402: // 0160:1ca402
    memoryASet16(ds, edi + 50, ax);
loc_1ca406: // 0160:1ca406
    eax = memoryAGet32(ds, esi + 52);
    if (!eax)
        goto loc_1ca43f;
    if (!ax)
        goto loc_1ca424;
    if (al)
        goto loc_1ca419;
    al = memoryAGet(ds, edi + 52);
loc_1ca419: // 0160:1ca419
    if (ah)
        goto loc_1ca420;
    ah = memoryAGet(ds, edi + 53);
loc_1ca420: // 0160:1ca420
    memoryASet16(ds, edi + 52, ax);
loc_1ca424: // 0160:1ca424
    ax = memoryAGet16(ds, esi + 54);
    if (!ax)
        goto loc_1ca43f;
    if (al)
        goto loc_1ca434;
    al = memoryAGet(ds, edi + 54);
loc_1ca434: // 0160:1ca434
    if (ah)
        goto loc_1ca43b;
    ah = memoryAGet(ds, edi + 55);
loc_1ca43b: // 0160:1ca43b
    memoryASet16(ds, edi + 54, ax);
loc_1ca43f: // 0160:1ca43f
    eax = memoryAGet32(ds, esi + 56);
    if (!eax)
        goto loc_1ca478;
    if (!ax)
        goto loc_1ca45d;
    if (al)
        goto loc_1ca452;
    al = memoryAGet(ds, edi + 56);
loc_1ca452: // 0160:1ca452
    if (ah)
        goto loc_1ca459;
    ah = memoryAGet(ds, edi + 57);
loc_1ca459: // 0160:1ca459
    memoryASet16(ds, edi + 56, ax);
loc_1ca45d: // 0160:1ca45d
    ax = memoryAGet16(ds, esi + 58);
    if (!ax)
        goto loc_1ca478;
    if (al)
        goto loc_1ca46d;
    al = memoryAGet(ds, edi + 58);
loc_1ca46d: // 0160:1ca46d
    if (ah)
        goto loc_1ca474;
    ah = memoryAGet(ds, edi + 59);
loc_1ca474: // 0160:1ca474
    memoryASet16(ds, edi + 58, ax);
loc_1ca478: // 0160:1ca478
    eax = memoryAGet32(ds, esi + 60);
    if (!eax)
        goto loc_1ca4b1;
    if (!ax)
        goto loc_1ca496;
    if (al)
        goto loc_1ca48b;
    al = memoryAGet(ds, edi + 60);
loc_1ca48b: // 0160:1ca48b
    if (ah)
        goto loc_1ca492;
    ah = memoryAGet(ds, edi + 61);
loc_1ca492: // 0160:1ca492
    memoryASet16(ds, edi + 60, ax);
loc_1ca496: // 0160:1ca496
    ax = memoryAGet16(ds, esi + 62);
    if (!ax)
        goto loc_1ca4b1;
    if (al)
        goto loc_1ca4a6;
    al = memoryAGet(ds, edi + 62);
loc_1ca4a6: // 0160:1ca4a6
    if (ah)
        goto loc_1ca4ad;
    ah = memoryAGet(ds, edi + 63);
loc_1ca4ad: // 0160:1ca4ad
    memoryASet16(ds, edi + 62, ax);
loc_1ca4b1: // 0160:1ca4b1
    eax = memoryAGet32(ds, esi + 64);
    if (!eax)
        goto loc_1ca4ea;
    if (!ax)
        goto loc_1ca4cf;
    if (al)
        goto loc_1ca4c4;
    al = memoryAGet(ds, edi + 64);
loc_1ca4c4: // 0160:1ca4c4
    if (ah)
        goto loc_1ca4cb;
    ah = memoryAGet(ds, edi + 65);
loc_1ca4cb: // 0160:1ca4cb
    memoryASet16(ds, edi + 64, ax);
loc_1ca4cf: // 0160:1ca4cf
    ax = memoryAGet16(ds, esi + 66);
    if (!ax)
        goto loc_1ca4ea;
    if (al)
        goto loc_1ca4df;
    al = memoryAGet(ds, edi + 66);
loc_1ca4df: // 0160:1ca4df
    if (ah)
        goto loc_1ca4e6;
    ah = memoryAGet(ds, edi + 67);
loc_1ca4e6: // 0160:1ca4e6
    memoryASet16(ds, edi + 66, ax);
loc_1ca4ea: // 0160:1ca4ea
    eax = memoryAGet32(ds, esi + 68);
    if (!eax)
        goto loc_1ca523;
    if (!ax)
        goto loc_1ca508;
    if (al)
        goto loc_1ca4fd;
    al = memoryAGet(ds, edi + 68);
loc_1ca4fd: // 0160:1ca4fd
    if (ah)
        goto loc_1ca504;
    ah = memoryAGet(ds, edi + 69);
loc_1ca504: // 0160:1ca504
    memoryASet16(ds, edi + 68, ax);
loc_1ca508: // 0160:1ca508
    ax = memoryAGet16(ds, esi + 70);
    if (!ax)
        goto loc_1ca523;
    if (al)
        goto loc_1ca518;
    al = memoryAGet(ds, edi + 70);
loc_1ca518: // 0160:1ca518
    if (ah)
        goto loc_1ca51f;
    ah = memoryAGet(ds, edi + 71);
loc_1ca51f: // 0160:1ca51f
    memoryASet16(ds, edi + 70, ax);
loc_1ca523: // 0160:1ca523
    eax = memoryAGet32(ds, esi + 72);
    if (!eax)
        goto loc_1ca55c;
    if (!ax)
        goto loc_1ca541;
    if (al)
        goto loc_1ca536;
    al = memoryAGet(ds, edi + 72);
loc_1ca536: // 0160:1ca536
    if (ah)
        goto loc_1ca53d;
    ah = memoryAGet(ds, edi + 73);
loc_1ca53d: // 0160:1ca53d
    memoryASet16(ds, edi + 72, ax);
loc_1ca541: // 0160:1ca541
    ax = memoryAGet16(ds, esi + 74);
    if (!ax)
        goto loc_1ca55c;
    if (al)
        goto loc_1ca551;
    al = memoryAGet(ds, edi + 74);
loc_1ca551: // 0160:1ca551
    if (ah)
        goto loc_1ca558;
    ah = memoryAGet(ds, edi + 75);
loc_1ca558: // 0160:1ca558
    memoryASet16(ds, edi + 74, ax);
loc_1ca55c: // 0160:1ca55c
    eax = memoryAGet32(ds, esi + 76);
    if (!eax)
        goto loc_1ca595;
    if (!ax)
        goto loc_1ca57a;
    if (al)
        goto loc_1ca56f;
    al = memoryAGet(ds, edi + 76);
loc_1ca56f: // 0160:1ca56f
    if (ah)
        goto loc_1ca576;
    ah = memoryAGet(ds, edi + 77);
loc_1ca576: // 0160:1ca576
    memoryASet16(ds, edi + 76, ax);
loc_1ca57a: // 0160:1ca57a
    ax = memoryAGet16(ds, esi + 78);
    if (!ax)
        goto loc_1ca595;
    if (al)
        goto loc_1ca58a;
    al = memoryAGet(ds, edi + 78);
loc_1ca58a: // 0160:1ca58a
    if (ah)
        goto loc_1ca591;
    ah = memoryAGet(ds, edi + 79);
loc_1ca591: // 0160:1ca591
    memoryASet16(ds, edi + 78, ax);
loc_1ca595: // 0160:1ca595
    eax = memoryAGet32(ds, esi + 80);
    if (!eax)
        goto loc_1ca5ce;
    if (!ax)
        goto loc_1ca5b3;
    if (al)
        goto loc_1ca5a8;
    al = memoryAGet(ds, edi + 80);
loc_1ca5a8: // 0160:1ca5a8
    if (ah)
        goto loc_1ca5af;
    ah = memoryAGet(ds, edi + 81);
loc_1ca5af: // 0160:1ca5af
    memoryASet16(ds, edi + 80, ax);
loc_1ca5b3: // 0160:1ca5b3
    ax = memoryAGet16(ds, esi + 82);
    if (!ax)
        goto loc_1ca5ce;
    if (al)
        goto loc_1ca5c3;
    al = memoryAGet(ds, edi + 82);
loc_1ca5c3: // 0160:1ca5c3
    if (ah)
        goto loc_1ca5ca;
    ah = memoryAGet(ds, edi + 83);
loc_1ca5ca: // 0160:1ca5ca
    memoryASet16(ds, edi + 82, ax);
loc_1ca5ce: // 0160:1ca5ce
    eax = memoryAGet32(ds, esi + 84);
    if (!eax)
        goto loc_1ca607;
    if (!ax)
        goto loc_1ca5ec;
    if (al)
        goto loc_1ca5e1;
    al = memoryAGet(ds, edi + 84);
loc_1ca5e1: // 0160:1ca5e1
    if (ah)
        goto loc_1ca5e8;
    ah = memoryAGet(ds, edi + 85);
loc_1ca5e8: // 0160:1ca5e8
    memoryASet16(ds, edi + 84, ax);
loc_1ca5ec: // 0160:1ca5ec
    ax = memoryAGet16(ds, esi + 86);
    if (!ax)
        goto loc_1ca607;
    if (al)
        goto loc_1ca5fc;
    al = memoryAGet(ds, edi + 86);
loc_1ca5fc: // 0160:1ca5fc
    if (ah)
        goto loc_1ca603;
    ah = memoryAGet(ds, edi + 87);
loc_1ca603: // 0160:1ca603
    memoryASet16(ds, edi + 86, ax);
loc_1ca607: // 0160:1ca607
    eax = memoryAGet32(ds, esi + 88);
    if (!eax)
        goto loc_1ca640;
    if (!ax)
        goto loc_1ca625;
    if (al)
        goto loc_1ca61a;
    al = memoryAGet(ds, edi + 88);
loc_1ca61a: // 0160:1ca61a
    if (ah)
        goto loc_1ca621;
    ah = memoryAGet(ds, edi + 89);
loc_1ca621: // 0160:1ca621
    memoryASet16(ds, edi + 88, ax);
loc_1ca625: // 0160:1ca625
    ax = memoryAGet16(ds, esi + 90);
    if (!ax)
        goto loc_1ca640;
    if (al)
        goto loc_1ca635;
    al = memoryAGet(ds, edi + 90);
loc_1ca635: // 0160:1ca635
    if (ah)
        goto loc_1ca63c;
    ah = memoryAGet(ds, edi + 91);
loc_1ca63c: // 0160:1ca63c
    memoryASet16(ds, edi + 90, ax);
loc_1ca640: // 0160:1ca640
    eax = memoryAGet32(ds, esi + 92);
    if (!eax)
        goto loc_1ca679;
    if (!ax)
        goto loc_1ca65e;
    if (al)
        goto loc_1ca653;
    al = memoryAGet(ds, edi + 92);
loc_1ca653: // 0160:1ca653
    if (ah)
        goto loc_1ca65a;
    ah = memoryAGet(ds, edi + 93);
loc_1ca65a: // 0160:1ca65a
    memoryASet16(ds, edi + 92, ax);
loc_1ca65e: // 0160:1ca65e
    ax = memoryAGet16(ds, esi + 94);
    if (!ax)
        goto loc_1ca679;
    if (al)
        goto loc_1ca66e;
    al = memoryAGet(ds, edi + 94);
loc_1ca66e: // 0160:1ca66e
    if (ah)
        goto loc_1ca675;
    ah = memoryAGet(ds, edi + 95);
loc_1ca675: // 0160:1ca675
    memoryASet16(ds, edi + 94, ax);
loc_1ca679: // 0160:1ca679
    eax = memoryAGet32(ds, esi + 96);
    if (!eax)
        goto loc_1ca6b2;
    if (!ax)
        goto loc_1ca697;
    if (al)
        goto loc_1ca68c;
    al = memoryAGet(ds, edi + 96);
loc_1ca68c: // 0160:1ca68c
    if (ah)
        goto loc_1ca693;
    ah = memoryAGet(ds, edi + 97);
loc_1ca693: // 0160:1ca693
    memoryASet16(ds, edi + 96, ax);
loc_1ca697: // 0160:1ca697
    ax = memoryAGet16(ds, esi + 98);
    if (!ax)
        goto loc_1ca6b2;
    if (al)
        goto loc_1ca6a7;
    al = memoryAGet(ds, edi + 98);
loc_1ca6a7: // 0160:1ca6a7
    if (ah)
        goto loc_1ca6ae;
    ah = memoryAGet(ds, edi + 99);
loc_1ca6ae: // 0160:1ca6ae
    memoryASet16(ds, edi + 98, ax);
loc_1ca6b2: // 0160:1ca6b2
    eax = memoryAGet32(ds, esi + 100);
    if (!eax)
        goto loc_1ca6eb;
    if (!ax)
        goto loc_1ca6d0;
    if (al)
        goto loc_1ca6c5;
    al = memoryAGet(ds, edi + 100);
loc_1ca6c5: // 0160:1ca6c5
    if (ah)
        goto loc_1ca6cc;
    ah = memoryAGet(ds, edi + 101);
loc_1ca6cc: // 0160:1ca6cc
    memoryASet16(ds, edi + 100, ax);
loc_1ca6d0: // 0160:1ca6d0
    ax = memoryAGet16(ds, esi + 102);
    if (!ax)
        goto loc_1ca6eb;
    if (al)
        goto loc_1ca6e0;
    al = memoryAGet(ds, edi + 102);
loc_1ca6e0: // 0160:1ca6e0
    if (ah)
        goto loc_1ca6e7;
    ah = memoryAGet(ds, edi + 103);
loc_1ca6e7: // 0160:1ca6e7
    memoryASet16(ds, edi + 102, ax);
loc_1ca6eb: // 0160:1ca6eb
    eax = memoryAGet32(ds, esi + 104);
    if (!eax)
        goto loc_1ca724;
    if (!ax)
        goto loc_1ca709;
    if (al)
        goto loc_1ca6fe;
    al = memoryAGet(ds, edi + 104);
loc_1ca6fe: // 0160:1ca6fe
    if (ah)
        goto loc_1ca705;
    ah = memoryAGet(ds, edi + 105);
loc_1ca705: // 0160:1ca705
    memoryASet16(ds, edi + 104, ax);
loc_1ca709: // 0160:1ca709
    ax = memoryAGet16(ds, esi + 106);
    if (!ax)
        goto loc_1ca724;
    if (al)
        goto loc_1ca719;
    al = memoryAGet(ds, edi + 106);
loc_1ca719: // 0160:1ca719
    if (ah)
        goto loc_1ca720;
    ah = memoryAGet(ds, edi + 107);
loc_1ca720: // 0160:1ca720
    memoryASet16(ds, edi + 106, ax);
loc_1ca724: // 0160:1ca724
    eax = memoryAGet32(ds, esi + 108);
    if (!eax)
        goto loc_1ca75d;
    if (!ax)
        goto loc_1ca742;
    if (al)
        goto loc_1ca737;
    al = memoryAGet(ds, edi + 108);
loc_1ca737: // 0160:1ca737
    if (ah)
        goto loc_1ca73e;
    ah = memoryAGet(ds, edi + 109);
loc_1ca73e: // 0160:1ca73e
    memoryASet16(ds, edi + 108, ax);
loc_1ca742: // 0160:1ca742
    ax = memoryAGet16(ds, esi + 110);
    if (!ax)
        goto loc_1ca75d;
    if (al)
        goto loc_1ca752;
    al = memoryAGet(ds, edi + 110);
loc_1ca752: // 0160:1ca752
    if (ah)
        goto loc_1ca759;
    ah = memoryAGet(ds, edi + 111);
loc_1ca759: // 0160:1ca759
    memoryASet16(ds, edi + 110, ax);
loc_1ca75d: // 0160:1ca75d
    eax = memoryAGet32(ds, esi + 112);
    if (!eax)
        goto loc_1ca796;
    if (!ax)
        goto loc_1ca77b;
    if (al)
        goto loc_1ca770;
    al = memoryAGet(ds, edi + 112);
loc_1ca770: // 0160:1ca770
    if (ah)
        goto loc_1ca777;
    ah = memoryAGet(ds, edi + 113);
loc_1ca777: // 0160:1ca777
    memoryASet16(ds, edi + 112, ax);
loc_1ca77b: // 0160:1ca77b
    ax = memoryAGet16(ds, esi + 114);
    if (!ax)
        goto loc_1ca796;
    if (al)
        goto loc_1ca78b;
    al = memoryAGet(ds, edi + 114);
loc_1ca78b: // 0160:1ca78b
    if (ah)
        goto loc_1ca792;
    ah = memoryAGet(ds, edi + 115);
loc_1ca792: // 0160:1ca792
    memoryASet16(ds, edi + 114, ax);
loc_1ca796: // 0160:1ca796
    eax = memoryAGet32(ds, esi + 116);
    if (!eax)
        goto loc_1ca7cf;
    if (!ax)
        goto loc_1ca7b4;
    if (al)
        goto loc_1ca7a9;
    al = memoryAGet(ds, edi + 116);
loc_1ca7a9: // 0160:1ca7a9
    if (ah)
        goto loc_1ca7b0;
    ah = memoryAGet(ds, edi + 117);
loc_1ca7b0: // 0160:1ca7b0
    memoryASet16(ds, edi + 116, ax);
loc_1ca7b4: // 0160:1ca7b4
    ax = memoryAGet16(ds, esi + 118);
    if (!ax)
        goto loc_1ca7cf;
    if (al)
        goto loc_1ca7c4;
    al = memoryAGet(ds, edi + 118);
loc_1ca7c4: // 0160:1ca7c4
    if (ah)
        goto loc_1ca7cb;
    ah = memoryAGet(ds, edi + 119);
loc_1ca7cb: // 0160:1ca7cb
    memoryASet16(ds, edi + 118, ax);
loc_1ca7cf: // 0160:1ca7cf
    eax = memoryAGet32(ds, esi + 120);
    if (!eax)
        goto loc_1ca808;
    if (!ax)
        goto loc_1ca7ed;
    if (al)
        goto loc_1ca7e2;
    al = memoryAGet(ds, edi + 120);
loc_1ca7e2: // 0160:1ca7e2
    if (ah)
        goto loc_1ca7e9;
    ah = memoryAGet(ds, edi + 121);
loc_1ca7e9: // 0160:1ca7e9
    memoryASet16(ds, edi + 120, ax);
loc_1ca7ed: // 0160:1ca7ed
    ax = memoryAGet16(ds, esi + 122);
    if (!ax)
        goto loc_1ca808;
    if (al)
        goto loc_1ca7fd;
    al = memoryAGet(ds, edi + 122);
loc_1ca7fd: // 0160:1ca7fd
    if (ah)
        goto loc_1ca804;
    ah = memoryAGet(ds, edi + 123);
loc_1ca804: // 0160:1ca804
    memoryASet16(ds, edi + 122, ax);
loc_1ca808: // 0160:1ca808
    eax = memoryAGet32(ds, esi + 124);
    if (!eax)
        goto loc_1ca841;
    if (!ax)
        goto loc_1ca826;
    if (al)
        goto loc_1ca81b;
    al = memoryAGet(ds, edi + 124);
loc_1ca81b: // 0160:1ca81b
    if (ah)
        goto loc_1ca822;
    ah = memoryAGet(ds, edi + 125);
loc_1ca822: // 0160:1ca822
    memoryASet16(ds, edi + 124, ax);
loc_1ca826: // 0160:1ca826
    ax = memoryAGet16(ds, esi + 126);
    if (!ax)
        goto loc_1ca841;
    if (al)
        goto loc_1ca836;
    al = memoryAGet(ds, edi + 126);
loc_1ca836: // 0160:1ca836
    if (ah)
        goto loc_1ca83d;
    ah = memoryAGet(ds, edi + 127);
loc_1ca83d: // 0160:1ca83d
    memoryASet16(ds, edi + 126, ax);
loc_1ca841: // 0160:1ca841
    eax = memoryAGet32(ds, esi + 128);
    if (!eax)
        goto loc_1ca892;
    if (!ax)
        goto loc_1ca86b;
    if (al)
        goto loc_1ca85a;
    al = memoryAGet(ds, edi + 128);
loc_1ca85a: // 0160:1ca85a
    if (ah)
        goto loc_1ca864;
    ah = memoryAGet(ds, edi + 129);
loc_1ca864: // 0160:1ca864
    memoryASet16(ds, edi + 128, ax);
loc_1ca86b: // 0160:1ca86b
    ax = memoryAGet16(ds, esi + 130);
    if (!ax)
        goto loc_1ca892;
    if (al)
        goto loc_1ca881;
    al = memoryAGet(ds, edi + 130);
loc_1ca881: // 0160:1ca881
    if (ah)
        goto loc_1ca88b;
    ah = memoryAGet(ds, edi + 131);
loc_1ca88b: // 0160:1ca88b
    memoryASet16(ds, edi + 130, ax);
loc_1ca892: // 0160:1ca892
    eax = memoryAGet32(ds, esi + 132);
    if (!eax)
        goto loc_1ca8e3;
    if (!ax)
        goto loc_1ca8bc;
    if (al)
        goto loc_1ca8ab;
    al = memoryAGet(ds, edi + 132);
loc_1ca8ab: // 0160:1ca8ab
    if (ah)
        goto loc_1ca8b5;
    ah = memoryAGet(ds, edi + 133);
loc_1ca8b5: // 0160:1ca8b5
    memoryASet16(ds, edi + 132, ax);
loc_1ca8bc: // 0160:1ca8bc
    ax = memoryAGet16(ds, esi + 134);
    if (!ax)
        goto loc_1ca8e3;
    if (al)
        goto loc_1ca8d2;
    al = memoryAGet(ds, edi + 134);
loc_1ca8d2: // 0160:1ca8d2
    if (ah)
        goto loc_1ca8dc;
    ah = memoryAGet(ds, edi + 135);
loc_1ca8dc: // 0160:1ca8dc
    memoryASet16(ds, edi + 134, ax);
loc_1ca8e3: // 0160:1ca8e3
    eax = memoryAGet32(ds, esi + 136);
    if (!eax)
        goto loc_1ca934;
    if (!ax)
        goto loc_1ca90d;
    if (al)
        goto loc_1ca8fc;
    al = memoryAGet(ds, edi + 136);
loc_1ca8fc: // 0160:1ca8fc
    if (ah)
        goto loc_1ca906;
    ah = memoryAGet(ds, edi + 137);
loc_1ca906: // 0160:1ca906
    memoryASet16(ds, edi + 136, ax);
loc_1ca90d: // 0160:1ca90d
    ax = memoryAGet16(ds, esi + 138);
    if (!ax)
        goto loc_1ca934;
    if (al)
        goto loc_1ca923;
    al = memoryAGet(ds, edi + 138);
loc_1ca923: // 0160:1ca923
    if (ah)
        goto loc_1ca92d;
    ah = memoryAGet(ds, edi + 139);
loc_1ca92d: // 0160:1ca92d
    memoryASet16(ds, edi + 138, ax);
loc_1ca934: // 0160:1ca934
    eax = memoryAGet32(ds, esi + 140);
    if (!eax)
        goto loc_1ca985;
    if (!ax)
        goto loc_1ca95e;
    if (al)
        goto loc_1ca94d;
    al = memoryAGet(ds, edi + 140);
loc_1ca94d: // 0160:1ca94d
    if (ah)
        goto loc_1ca957;
    ah = memoryAGet(ds, edi + 141);
loc_1ca957: // 0160:1ca957
    memoryASet16(ds, edi + 140, ax);
loc_1ca95e: // 0160:1ca95e
    ax = memoryAGet16(ds, esi + 142);
    if (!ax)
        goto loc_1ca985;
    if (al)
        goto loc_1ca974;
    al = memoryAGet(ds, edi + 142);
loc_1ca974: // 0160:1ca974
    if (ah)
        goto loc_1ca97e;
    ah = memoryAGet(ds, edi + 143);
loc_1ca97e: // 0160:1ca97e
    memoryASet16(ds, edi + 142, ax);
loc_1ca985: // 0160:1ca985
    eax = memoryAGet32(ds, esi + 144);
    if (!eax)
        goto loc_1ca9d6;
    if (!ax)
        goto loc_1ca9af;
    if (al)
        goto loc_1ca99e;
    al = memoryAGet(ds, edi + 144);
loc_1ca99e: // 0160:1ca99e
    if (ah)
        goto loc_1ca9a8;
    ah = memoryAGet(ds, edi + 145);
loc_1ca9a8: // 0160:1ca9a8
    memoryASet16(ds, edi + 144, ax);
loc_1ca9af: // 0160:1ca9af
    ax = memoryAGet16(ds, esi + 146);
    if (!ax)
        goto loc_1ca9d6;
    if (al)
        goto loc_1ca9c5;
    al = memoryAGet(ds, edi + 146);
loc_1ca9c5: // 0160:1ca9c5
    if (ah)
        goto loc_1ca9cf;
    ah = memoryAGet(ds, edi + 147);
loc_1ca9cf: // 0160:1ca9cf
    memoryASet16(ds, edi + 146, ax);
loc_1ca9d6: // 0160:1ca9d6
    eax = memoryAGet32(ds, esi + 148);
    if (!eax)
        goto loc_1caa27;
    if (!ax)
        goto loc_1caa00;
    if (al)
        goto loc_1ca9ef;
    al = memoryAGet(ds, edi + 148);
loc_1ca9ef: // 0160:1ca9ef
    if (ah)
        goto loc_1ca9f9;
    ah = memoryAGet(ds, edi + 149);
loc_1ca9f9: // 0160:1ca9f9
    memoryASet16(ds, edi + 148, ax);
loc_1caa00: // 0160:1caa00
    ax = memoryAGet16(ds, esi + 150);
    if (!ax)
        goto loc_1caa27;
    if (al)
        goto loc_1caa16;
    al = memoryAGet(ds, edi + 150);
loc_1caa16: // 0160:1caa16
    if (ah)
        goto loc_1caa20;
    ah = memoryAGet(ds, edi + 151);
loc_1caa20: // 0160:1caa20
    memoryASet16(ds, edi + 150, ax);
loc_1caa27: // 0160:1caa27
    eax = memoryAGet32(ds, esi + 152);
    if (!eax)
        goto loc_1caa78;
    if (!ax)
        goto loc_1caa51;
    if (al)
        goto loc_1caa40;
    al = memoryAGet(ds, edi + 152);
loc_1caa40: // 0160:1caa40
    if (ah)
        goto loc_1caa4a;
    ah = memoryAGet(ds, edi + 153);
loc_1caa4a: // 0160:1caa4a
    memoryASet16(ds, edi + 152, ax);
loc_1caa51: // 0160:1caa51
    ax = memoryAGet16(ds, esi + 154);
    if (!ax)
        goto loc_1caa78;
    if (al)
        goto loc_1caa67;
    al = memoryAGet(ds, edi + 154);
loc_1caa67: // 0160:1caa67
    if (ah)
        goto loc_1caa71;
    ah = memoryAGet(ds, edi + 155);
loc_1caa71: // 0160:1caa71
    memoryASet16(ds, edi + 154, ax);
loc_1caa78: // 0160:1caa78
    eax = memoryAGet32(ds, esi + 156);
    if (!eax)
        goto loc_1caac9;
    if (!ax)
        goto loc_1caaa2;
    if (al)
        goto loc_1caa91;
    al = memoryAGet(ds, edi + 156);
loc_1caa91: // 0160:1caa91
    if (ah)
        goto loc_1caa9b;
    ah = memoryAGet(ds, edi + 157);
loc_1caa9b: // 0160:1caa9b
    memoryASet16(ds, edi + 156, ax);
loc_1caaa2: // 0160:1caaa2
    ax = memoryAGet16(ds, esi + 158);
    if (!ax)
        goto loc_1caac9;
    if (al)
        goto loc_1caab8;
    al = memoryAGet(ds, edi + 158);
loc_1caab8: // 0160:1caab8
    if (ah)
        goto loc_1caac2;
    ah = memoryAGet(ds, edi + 159);
loc_1caac2: // 0160:1caac2
    memoryASet16(ds, edi + 158, ax);
loc_1caac9: // 0160:1caac9
    eax = memoryAGet32(ds, esi + 160);
    if (!eax)
        goto loc_1cab1a;
    if (!ax)
        goto loc_1caaf3;
    if (al)
        goto loc_1caae2;
    al = memoryAGet(ds, edi + 160);
loc_1caae2: // 0160:1caae2
    if (ah)
        goto loc_1caaec;
    ah = memoryAGet(ds, edi + 161);
loc_1caaec: // 0160:1caaec
    memoryASet16(ds, edi + 160, ax);
loc_1caaf3: // 0160:1caaf3
    ax = memoryAGet16(ds, esi + 162);
    if (!ax)
        goto loc_1cab1a;
    if (al)
        goto loc_1cab09;
    al = memoryAGet(ds, edi + 162);
loc_1cab09: // 0160:1cab09
    if (ah)
        goto loc_1cab13;
    ah = memoryAGet(ds, edi + 163);
loc_1cab13: // 0160:1cab13
    memoryASet16(ds, edi + 162, ax);
loc_1cab1a: // 0160:1cab1a
    eax = memoryAGet32(ds, esi + 164);
    if (!eax)
        goto loc_1cab6b;
    if (!ax)
        goto loc_1cab44;
    if (al)
        goto loc_1cab33;
    al = memoryAGet(ds, edi + 164);
loc_1cab33: // 0160:1cab33
    if (ah)
        goto loc_1cab3d;
    ah = memoryAGet(ds, edi + 165);
loc_1cab3d: // 0160:1cab3d
    memoryASet16(ds, edi + 164, ax);
loc_1cab44: // 0160:1cab44
    ax = memoryAGet16(ds, esi + 166);
    if (!ax)
        goto loc_1cab6b;
    if (al)
        goto loc_1cab5a;
    al = memoryAGet(ds, edi + 166);
loc_1cab5a: // 0160:1cab5a
    if (ah)
        goto loc_1cab64;
    ah = memoryAGet(ds, edi + 167);
loc_1cab64: // 0160:1cab64
    memoryASet16(ds, edi + 166, ax);
loc_1cab6b: // 0160:1cab6b
    eax = memoryAGet32(ds, esi + 168);
    if (!eax)
        goto loc_1cabbc;
    if (!ax)
        goto loc_1cab95;
    if (al)
        goto loc_1cab84;
    al = memoryAGet(ds, edi + 168);
loc_1cab84: // 0160:1cab84
    if (ah)
        goto loc_1cab8e;
    ah = memoryAGet(ds, edi + 169);
loc_1cab8e: // 0160:1cab8e
    memoryASet16(ds, edi + 168, ax);
loc_1cab95: // 0160:1cab95
    ax = memoryAGet16(ds, esi + 170);
    if (!ax)
        goto loc_1cabbc;
    if (al)
        goto loc_1cabab;
    al = memoryAGet(ds, edi + 170);
loc_1cabab: // 0160:1cabab
    if (ah)
        goto loc_1cabb5;
    ah = memoryAGet(ds, edi + 171);
loc_1cabb5: // 0160:1cabb5
    memoryASet16(ds, edi + 170, ax);
loc_1cabbc: // 0160:1cabbc
    eax = memoryAGet32(ds, esi + 172);
    if (!eax)
        goto loc_1cac0d;
    if (!ax)
        goto loc_1cabe6;
    if (al)
        goto loc_1cabd5;
    al = memoryAGet(ds, edi + 172);
loc_1cabd5: // 0160:1cabd5
    if (ah)
        goto loc_1cabdf;
    ah = memoryAGet(ds, edi + 173);
loc_1cabdf: // 0160:1cabdf
    memoryASet16(ds, edi + 172, ax);
loc_1cabe6: // 0160:1cabe6
    ax = memoryAGet16(ds, esi + 174);
    if (!ax)
        goto loc_1cac0d;
    if (al)
        goto loc_1cabfc;
    al = memoryAGet(ds, edi + 174);
loc_1cabfc: // 0160:1cabfc
    if (ah)
        goto loc_1cac06;
    ah = memoryAGet(ds, edi + 175);
loc_1cac06: // 0160:1cac06
    memoryASet16(ds, edi + 174, ax);
loc_1cac0d: // 0160:1cac0d
    eax = memoryAGet32(ds, esi + 176);
    if (!eax)
        goto loc_1cac5e;
    if (!ax)
        goto loc_1cac37;
    if (al)
        goto loc_1cac26;
    al = memoryAGet(ds, edi + 176);
loc_1cac26: // 0160:1cac26
    if (ah)
        goto loc_1cac30;
    ah = memoryAGet(ds, edi + 177);
loc_1cac30: // 0160:1cac30
    memoryASet16(ds, edi + 176, ax);
loc_1cac37: // 0160:1cac37
    ax = memoryAGet16(ds, esi + 178);
    if (!ax)
        goto loc_1cac5e;
    if (al)
        goto loc_1cac4d;
    al = memoryAGet(ds, edi + 178);
loc_1cac4d: // 0160:1cac4d
    if (ah)
        goto loc_1cac57;
    ah = memoryAGet(ds, edi + 179);
loc_1cac57: // 0160:1cac57
    memoryASet16(ds, edi + 178, ax);
loc_1cac5e: // 0160:1cac5e
    eax = memoryAGet32(ds, esi + 180);
    if (!eax)
        goto loc_1cacaf;
    if (!ax)
        goto loc_1cac88;
    if (al)
        goto loc_1cac77;
    al = memoryAGet(ds, edi + 180);
loc_1cac77: // 0160:1cac77
    if (ah)
        goto loc_1cac81;
    ah = memoryAGet(ds, edi + 181);
loc_1cac81: // 0160:1cac81
    memoryASet16(ds, edi + 180, ax);
loc_1cac88: // 0160:1cac88
    ax = memoryAGet16(ds, esi + 182);
    if (!ax)
        goto loc_1cacaf;
    if (al)
        goto loc_1cac9e;
    al = memoryAGet(ds, edi + 182);
loc_1cac9e: // 0160:1cac9e
    if (ah)
        goto loc_1caca8;
    ah = memoryAGet(ds, edi + 183);
loc_1caca8: // 0160:1caca8
    memoryASet16(ds, edi + 182, ax);
loc_1cacaf: // 0160:1cacaf
    eax = memoryAGet32(ds, esi + 184);
    if (!eax)
        goto loc_1cad00;
    if (!ax)
        goto loc_1cacd9;
    if (al)
        goto loc_1cacc8;
    al = memoryAGet(ds, edi + 184);
loc_1cacc8: // 0160:1cacc8
    if (ah)
        goto loc_1cacd2;
    ah = memoryAGet(ds, edi + 185);
loc_1cacd2: // 0160:1cacd2
    memoryASet16(ds, edi + 184, ax);
loc_1cacd9: // 0160:1cacd9
    ax = memoryAGet16(ds, esi + 186);
    if (!ax)
        goto loc_1cad00;
    if (al)
        goto loc_1cacef;
    al = memoryAGet(ds, edi + 186);
loc_1cacef: // 0160:1cacef
    if (ah)
        goto loc_1cacf9;
    ah = memoryAGet(ds, edi + 187);
loc_1cacf9: // 0160:1cacf9
    memoryASet16(ds, edi + 186, ax);
loc_1cad00: // 0160:1cad00
    eax = memoryAGet32(ds, esi + 188);
    if (!eax)
        goto loc_1cad51;
    if (!ax)
        goto loc_1cad2a;
    if (al)
        goto loc_1cad19;
    al = memoryAGet(ds, edi + 188);
loc_1cad19: // 0160:1cad19
    if (ah)
        goto loc_1cad23;
    ah = memoryAGet(ds, edi + 189);
loc_1cad23: // 0160:1cad23
    memoryASet16(ds, edi + 188, ax);
loc_1cad2a: // 0160:1cad2a
    ax = memoryAGet16(ds, esi + 190);
    if (!ax)
        goto loc_1cad51;
    if (al)
        goto loc_1cad40;
    al = memoryAGet(ds, edi + 190);
loc_1cad40: // 0160:1cad40
    if (ah)
        goto loc_1cad4a;
    ah = memoryAGet(ds, edi + 191);
loc_1cad4a: // 0160:1cad4a
    memoryASet16(ds, edi + 190, ax);
loc_1cad51: // 0160:1cad51
    eax = memoryAGet32(ds, esi + 192);
    if (!eax)
        goto loc_1cada2;
    if (!ax)
        goto loc_1cad7b;
    if (al)
        goto loc_1cad6a;
    al = memoryAGet(ds, edi + 192);
loc_1cad6a: // 0160:1cad6a
    if (ah)
        goto loc_1cad74;
    ah = memoryAGet(ds, edi + 193);
loc_1cad74: // 0160:1cad74
    memoryASet16(ds, edi + 192, ax);
loc_1cad7b: // 0160:1cad7b
    ax = memoryAGet16(ds, esi + 194);
    if (!ax)
        goto loc_1cada2;
    if (al)
        goto loc_1cad91;
    al = memoryAGet(ds, edi + 194);
loc_1cad91: // 0160:1cad91
    if (ah)
        goto loc_1cad9b;
    ah = memoryAGet(ds, edi + 195);
loc_1cad9b: // 0160:1cad9b
    memoryASet16(ds, edi + 194, ax);
loc_1cada2: // 0160:1cada2
    eax = memoryAGet32(ds, esi + 196);
    if (!eax)
        goto loc_1cadf3;
    if (!ax)
        goto loc_1cadcc;
    if (al)
        goto loc_1cadbb;
    al = memoryAGet(ds, edi + 196);
loc_1cadbb: // 0160:1cadbb
    if (ah)
        goto loc_1cadc5;
    ah = memoryAGet(ds, edi + 197);
loc_1cadc5: // 0160:1cadc5
    memoryASet16(ds, edi + 196, ax);
loc_1cadcc: // 0160:1cadcc
    ax = memoryAGet16(ds, esi + 198);
    if (!ax)
        goto loc_1cadf3;
    if (al)
        goto loc_1cade2;
    al = memoryAGet(ds, edi + 198);
loc_1cade2: // 0160:1cade2
    if (ah)
        goto loc_1cadec;
    ah = memoryAGet(ds, edi + 199);
loc_1cadec: // 0160:1cadec
    memoryASet16(ds, edi + 198, ax);
loc_1cadf3: // 0160:1cadf3
    eax = memoryAGet32(ds, esi + 200);
    if (!eax)
        goto loc_1cae44;
    if (!ax)
        goto loc_1cae1d;
    if (al)
        goto loc_1cae0c;
    al = memoryAGet(ds, edi + 200);
loc_1cae0c: // 0160:1cae0c
    if (ah)
        goto loc_1cae16;
    ah = memoryAGet(ds, edi + 201);
loc_1cae16: // 0160:1cae16
    memoryASet16(ds, edi + 200, ax);
loc_1cae1d: // 0160:1cae1d
    ax = memoryAGet16(ds, esi + 202);
    if (!ax)
        goto loc_1cae44;
    if (al)
        goto loc_1cae33;
    al = memoryAGet(ds, edi + 202);
loc_1cae33: // 0160:1cae33
    if (ah)
        goto loc_1cae3d;
    ah = memoryAGet(ds, edi + 203);
loc_1cae3d: // 0160:1cae3d
    memoryASet16(ds, edi + 202, ax);
loc_1cae44: // 0160:1cae44
    eax = memoryAGet32(ds, esi + 204);
    if (!eax)
        goto loc_1cae95;
    if (!ax)
        goto loc_1cae6e;
    if (al)
        goto loc_1cae5d;
    al = memoryAGet(ds, edi + 204);
loc_1cae5d: // 0160:1cae5d
    if (ah)
        goto loc_1cae67;
    ah = memoryAGet(ds, edi + 205);
loc_1cae67: // 0160:1cae67
    memoryASet16(ds, edi + 204, ax);
loc_1cae6e: // 0160:1cae6e
    ax = memoryAGet16(ds, esi + 206);
    if (!ax)
        goto loc_1cae95;
    if (al)
        goto loc_1cae84;
    al = memoryAGet(ds, edi + 206);
loc_1cae84: // 0160:1cae84
    if (ah)
        goto loc_1cae8e;
    ah = memoryAGet(ds, edi + 207);
loc_1cae8e: // 0160:1cae8e
    memoryASet16(ds, edi + 206, ax);
loc_1cae95: // 0160:1cae95
    eax = memoryAGet32(ds, esi + 208);
    if (!eax)
        goto loc_1caee6;
    if (!ax)
        goto loc_1caebf;
    if (al)
        goto loc_1caeae;
    al = memoryAGet(ds, edi + 208);
loc_1caeae: // 0160:1caeae
    if (ah)
        goto loc_1caeb8;
    ah = memoryAGet(ds, edi + 209);
loc_1caeb8: // 0160:1caeb8
    memoryASet16(ds, edi + 208, ax);
loc_1caebf: // 0160:1caebf
    ax = memoryAGet16(ds, esi + 210);
    if (!ax)
        goto loc_1caee6;
    if (al)
        goto loc_1caed5;
    al = memoryAGet(ds, edi + 210);
loc_1caed5: // 0160:1caed5
    if (ah)
        goto loc_1caedf;
    ah = memoryAGet(ds, edi + 211);
loc_1caedf: // 0160:1caedf
    memoryASet16(ds, edi + 210, ax);
loc_1caee6: // 0160:1caee6
    eax = memoryAGet32(ds, esi + 212);
    if (!eax)
        goto loc_1caf37;
    if (!ax)
        goto loc_1caf10;
    if (al)
        goto loc_1caeff;
    al = memoryAGet(ds, edi + 212);
loc_1caeff: // 0160:1caeff
    if (ah)
        goto loc_1caf09;
    ah = memoryAGet(ds, edi + 213);
loc_1caf09: // 0160:1caf09
    memoryASet16(ds, edi + 212, ax);
loc_1caf10: // 0160:1caf10
    ax = memoryAGet16(ds, esi + 214);
    if (!ax)
        goto loc_1caf37;
    if (al)
        goto loc_1caf26;
    al = memoryAGet(ds, edi + 214);
loc_1caf26: // 0160:1caf26
    if (ah)
        goto loc_1caf30;
    ah = memoryAGet(ds, edi + 215);
loc_1caf30: // 0160:1caf30
    memoryASet16(ds, edi + 214, ax);
loc_1caf37: // 0160:1caf37
    eax = memoryAGet32(ds, esi + 216);
    if (!eax)
        goto loc_1caf88;
    if (!ax)
        goto loc_1caf61;
    if (al)
        goto loc_1caf50;
    al = memoryAGet(ds, edi + 216);
loc_1caf50: // 0160:1caf50
    if (ah)
        goto loc_1caf5a;
    ah = memoryAGet(ds, edi + 217);
loc_1caf5a: // 0160:1caf5a
    memoryASet16(ds, edi + 216, ax);
loc_1caf61: // 0160:1caf61
    ax = memoryAGet16(ds, esi + 218);
    if (!ax)
        goto loc_1caf88;
    if (al)
        goto loc_1caf77;
    al = memoryAGet(ds, edi + 218);
loc_1caf77: // 0160:1caf77
    if (ah)
        goto loc_1caf81;
    ah = memoryAGet(ds, edi + 219);
loc_1caf81: // 0160:1caf81
    memoryASet16(ds, edi + 218, ax);
loc_1caf88: // 0160:1caf88
    eax = memoryAGet32(ds, esi + 220);
    if (!eax)
        goto loc_1cafd9;
    if (!ax)
        goto loc_1cafb2;
    if (al)
        goto loc_1cafa1;
    al = memoryAGet(ds, edi + 220);
loc_1cafa1: // 0160:1cafa1
    if (ah)
        goto loc_1cafab;
    ah = memoryAGet(ds, edi + 221);
loc_1cafab: // 0160:1cafab
    memoryASet16(ds, edi + 220, ax);
loc_1cafb2: // 0160:1cafb2
    ax = memoryAGet16(ds, esi + 222);
    if (!ax)
        goto loc_1cafd9;
    if (al)
        goto loc_1cafc8;
    al = memoryAGet(ds, edi + 222);
loc_1cafc8: // 0160:1cafc8
    if (ah)
        goto loc_1cafd2;
    ah = memoryAGet(ds, edi + 223);
loc_1cafd2: // 0160:1cafd2
    memoryASet16(ds, edi + 222, ax);
loc_1cafd9: // 0160:1cafd9
    eax = memoryAGet32(ds, esi + 224);
    if (!eax)
        goto loc_1cb02a;
    if (!ax)
        goto loc_1cb003;
    if (al)
        goto loc_1caff2;
    al = memoryAGet(ds, edi + 224);
loc_1caff2: // 0160:1caff2
    if (ah)
        goto loc_1caffc;
    ah = memoryAGet(ds, edi + 225);
loc_1caffc: // 0160:1caffc
    memoryASet16(ds, edi + 224, ax);
loc_1cb003: // 0160:1cb003
    ax = memoryAGet16(ds, esi + 226);
    if (!ax)
        goto loc_1cb02a;
    if (al)
        goto loc_1cb019;
    al = memoryAGet(ds, edi + 226);
loc_1cb019: // 0160:1cb019
    if (ah)
        goto loc_1cb023;
    ah = memoryAGet(ds, edi + 227);
loc_1cb023: // 0160:1cb023
    memoryASet16(ds, edi + 226, ax);
loc_1cb02a: // 0160:1cb02a
    eax = memoryAGet32(ds, esi + 228);
    if (!eax)
        goto loc_1cb07b;
    if (!ax)
        goto loc_1cb054;
    if (al)
        goto loc_1cb043;
    al = memoryAGet(ds, edi + 228);
loc_1cb043: // 0160:1cb043
    if (ah)
        goto loc_1cb04d;
    ah = memoryAGet(ds, edi + 229);
loc_1cb04d: // 0160:1cb04d
    memoryASet16(ds, edi + 228, ax);
loc_1cb054: // 0160:1cb054
    ax = memoryAGet16(ds, esi + 230);
    if (!ax)
        goto loc_1cb07b;
    if (al)
        goto loc_1cb06a;
    al = memoryAGet(ds, edi + 230);
loc_1cb06a: // 0160:1cb06a
    if (ah)
        goto loc_1cb074;
    ah = memoryAGet(ds, edi + 231);
loc_1cb074: // 0160:1cb074
    memoryASet16(ds, edi + 230, ax);
loc_1cb07b: // 0160:1cb07b
    eax = memoryAGet32(ds, esi + 232);
    if (!eax)
        goto loc_1cb0cc;
    if (!ax)
        goto loc_1cb0a5;
    if (al)
        goto loc_1cb094;
    al = memoryAGet(ds, edi + 232);
loc_1cb094: // 0160:1cb094
    if (ah)
        goto loc_1cb09e;
    ah = memoryAGet(ds, edi + 233);
loc_1cb09e: // 0160:1cb09e
    memoryASet16(ds, edi + 232, ax);
loc_1cb0a5: // 0160:1cb0a5
    ax = memoryAGet16(ds, esi + 234);
    if (!ax)
        goto loc_1cb0cc;
    if (al)
        goto loc_1cb0bb;
    al = memoryAGet(ds, edi + 234);
loc_1cb0bb: // 0160:1cb0bb
    if (ah)
        goto loc_1cb0c5;
    ah = memoryAGet(ds, edi + 235);
loc_1cb0c5: // 0160:1cb0c5
    memoryASet16(ds, edi + 234, ax);
loc_1cb0cc: // 0160:1cb0cc
    eax = memoryAGet32(ds, esi + 236);
    if (!eax)
        goto loc_1cb11d;
    if (!ax)
        goto loc_1cb0f6;
    if (al)
        goto loc_1cb0e5;
    al = memoryAGet(ds, edi + 236);
loc_1cb0e5: // 0160:1cb0e5
    if (ah)
        goto loc_1cb0ef;
    ah = memoryAGet(ds, edi + 237);
loc_1cb0ef: // 0160:1cb0ef
    memoryASet16(ds, edi + 236, ax);
loc_1cb0f6: // 0160:1cb0f6
    ax = memoryAGet16(ds, esi + 238);
    if (!ax)
        goto loc_1cb11d;
    if (al)
        goto loc_1cb10c;
    al = memoryAGet(ds, edi + 238);
loc_1cb10c: // 0160:1cb10c
    if (ah)
        goto loc_1cb116;
    ah = memoryAGet(ds, edi + 239);
loc_1cb116: // 0160:1cb116
    memoryASet16(ds, edi + 238, ax);
loc_1cb11d: // 0160:1cb11d
    eax = memoryAGet32(ds, esi + 240);
    if (!eax)
        goto loc_1cb16e;
    if (!ax)
        goto loc_1cb147;
    if (al)
        goto loc_1cb136;
    al = memoryAGet(ds, edi + 240);
loc_1cb136: // 0160:1cb136
    if (ah)
        goto loc_1cb140;
    ah = memoryAGet(ds, edi + 241);
loc_1cb140: // 0160:1cb140
    memoryASet16(ds, edi + 240, ax);
loc_1cb147: // 0160:1cb147
    ax = memoryAGet16(ds, esi + 242);
    if (!ax)
        goto loc_1cb16e;
    if (al)
        goto loc_1cb15d;
    al = memoryAGet(ds, edi + 242);
loc_1cb15d: // 0160:1cb15d
    if (ah)
        goto loc_1cb167;
    ah = memoryAGet(ds, edi + 243);
loc_1cb167: // 0160:1cb167
    memoryASet16(ds, edi + 242, ax);
loc_1cb16e: // 0160:1cb16e
    eax = memoryAGet32(ds, esi + 244);
    if (!eax)
        goto loc_1cb1bf;
    if (!ax)
        goto loc_1cb198;
    if (al)
        goto loc_1cb187;
    al = memoryAGet(ds, edi + 244);
loc_1cb187: // 0160:1cb187
    if (ah)
        goto loc_1cb191;
    ah = memoryAGet(ds, edi + 245);
loc_1cb191: // 0160:1cb191
    memoryASet16(ds, edi + 244, ax);
loc_1cb198: // 0160:1cb198
    ax = memoryAGet16(ds, esi + 246);
    if (!ax)
        goto loc_1cb1bf;
    if (al)
        goto loc_1cb1ae;
    al = memoryAGet(ds, edi + 246);
loc_1cb1ae: // 0160:1cb1ae
    if (ah)
        goto loc_1cb1b8;
    ah = memoryAGet(ds, edi + 247);
loc_1cb1b8: // 0160:1cb1b8
    memoryASet16(ds, edi + 246, ax);
loc_1cb1bf: // 0160:1cb1bf
    eax = memoryAGet32(ds, esi + 248);
    if (!eax)
        goto loc_1cb210;
    if (!ax)
        goto loc_1cb1e9;
    if (al)
        goto loc_1cb1d8;
    al = memoryAGet(ds, edi + 248);
loc_1cb1d8: // 0160:1cb1d8
    if (ah)
        goto loc_1cb1e2;
    ah = memoryAGet(ds, edi + 249);
loc_1cb1e2: // 0160:1cb1e2
    memoryASet16(ds, edi + 248, ax);
loc_1cb1e9: // 0160:1cb1e9
    ax = memoryAGet16(ds, esi + 250);
    if (!ax)
        goto loc_1cb210;
    if (al)
        goto loc_1cb1ff;
    al = memoryAGet(ds, edi + 250);
loc_1cb1ff: // 0160:1cb1ff
    if (ah)
        goto loc_1cb209;
    ah = memoryAGet(ds, edi + 251);
loc_1cb209: // 0160:1cb209
    memoryASet16(ds, edi + 250, ax);
loc_1cb210: // 0160:1cb210
    eax = memoryAGet32(ds, esi + 252);
    if (!eax)
        goto loc_1cb261;
    if (!ax)
        goto loc_1cb23a;
    if (al)
        goto loc_1cb229;
    al = memoryAGet(ds, edi + 252);
loc_1cb229: // 0160:1cb229
    if (ah)
        goto loc_1cb233;
    ah = memoryAGet(ds, edi + 253);
loc_1cb233: // 0160:1cb233
    memoryASet16(ds, edi + 252, ax);
loc_1cb23a: // 0160:1cb23a
    ax = memoryAGet16(ds, esi + 254);
    if (!ax)
        goto loc_1cb261;
    if (al)
        goto loc_1cb250;
    al = memoryAGet(ds, edi + 254);
loc_1cb250: // 0160:1cb250
    if (ah)
        goto loc_1cb25a;
    ah = memoryAGet(ds, edi + 255);
loc_1cb25a: // 0160:1cb25a
    memoryASet16(ds, edi + 254, ax);
loc_1cb261: // 0160:1cb261
    eax = memoryAGet32(ds, esi + 256);
    if (!eax)
        goto loc_1cb2b2;
    if (!ax)
        goto loc_1cb28b;
    if (al)
        goto loc_1cb27a;
    al = memoryAGet(ds, edi + 256);
loc_1cb27a: // 0160:1cb27a
    if (ah)
        goto loc_1cb284;
    ah = memoryAGet(ds, edi + 257);
loc_1cb284: // 0160:1cb284
    memoryASet16(ds, edi + 256, ax);
loc_1cb28b: // 0160:1cb28b
    ax = memoryAGet16(ds, esi + 258);
    if (!ax)
        goto loc_1cb2b2;
    if (al)
        goto loc_1cb2a1;
    al = memoryAGet(ds, edi + 258);
loc_1cb2a1: // 0160:1cb2a1
    if (ah)
        goto loc_1cb2ab;
    ah = memoryAGet(ds, edi + 259);
loc_1cb2ab: // 0160:1cb2ab
    memoryASet16(ds, edi + 258, ax);
loc_1cb2b2: // 0160:1cb2b2
    eax = memoryAGet32(ds, esi + 260);
    if (!eax)
        goto loc_1cb303;
    if (!ax)
        goto loc_1cb2dc;
    if (al)
        goto loc_1cb2cb;
    al = memoryAGet(ds, edi + 260);
loc_1cb2cb: // 0160:1cb2cb
    if (ah)
        goto loc_1cb2d5;
    ah = memoryAGet(ds, edi + 261);
loc_1cb2d5: // 0160:1cb2d5
    memoryASet16(ds, edi + 260, ax);
loc_1cb2dc: // 0160:1cb2dc
    ax = memoryAGet16(ds, esi + 262);
    if (!ax)
        goto loc_1cb303;
    if (al)
        goto loc_1cb2f2;
    al = memoryAGet(ds, edi + 262);
loc_1cb2f2: // 0160:1cb2f2
    if (ah)
        goto loc_1cb2fc;
    ah = memoryAGet(ds, edi + 263);
loc_1cb2fc: // 0160:1cb2fc
    memoryASet16(ds, edi + 262, ax);
loc_1cb303: // 0160:1cb303
    eax = memoryAGet32(ds, esi + 264);
    if (!eax)
        goto loc_1cb354;
    if (!ax)
        goto loc_1cb32d;
    if (al)
        goto loc_1cb31c;
    al = memoryAGet(ds, edi + 264);
loc_1cb31c: // 0160:1cb31c
    if (ah)
        goto loc_1cb326;
    ah = memoryAGet(ds, edi + 265);
loc_1cb326: // 0160:1cb326
    memoryASet16(ds, edi + 264, ax);
loc_1cb32d: // 0160:1cb32d
    ax = memoryAGet16(ds, esi + 266);
    if (!ax)
        goto loc_1cb354;
    if (al)
        goto loc_1cb343;
    al = memoryAGet(ds, edi + 266);
loc_1cb343: // 0160:1cb343
    if (ah)
        goto loc_1cb34d;
    ah = memoryAGet(ds, edi + 267);
loc_1cb34d: // 0160:1cb34d
    memoryASet16(ds, edi + 266, ax);
loc_1cb354: // 0160:1cb354
    eax = memoryAGet32(ds, esi + 268);
    if (!eax)
        goto loc_1cb3a5;
    if (!ax)
        goto loc_1cb37e;
    if (al)
        goto loc_1cb36d;
    al = memoryAGet(ds, edi + 268);
loc_1cb36d: // 0160:1cb36d
    if (ah)
        goto loc_1cb377;
    ah = memoryAGet(ds, edi + 269);
loc_1cb377: // 0160:1cb377
    memoryASet16(ds, edi + 268, ax);
loc_1cb37e: // 0160:1cb37e
    ax = memoryAGet16(ds, esi + 270);
    if (!ax)
        goto loc_1cb3a5;
    if (al)
        goto loc_1cb394;
    al = memoryAGet(ds, edi + 270);
loc_1cb394: // 0160:1cb394
    if (ah)
        goto loc_1cb39e;
    ah = memoryAGet(ds, edi + 271);
loc_1cb39e: // 0160:1cb39e
    memoryASet16(ds, edi + 270, ax);
loc_1cb3a5: // 0160:1cb3a5
    eax = memoryAGet32(ds, esi + 272);
    if (!eax)
        goto loc_1cb3f6;
    if (!ax)
        goto loc_1cb3cf;
    if (al)
        goto loc_1cb3be;
    al = memoryAGet(ds, edi + 272);
loc_1cb3be: // 0160:1cb3be
    if (ah)
        goto loc_1cb3c8;
    ah = memoryAGet(ds, edi + 273);
loc_1cb3c8: // 0160:1cb3c8
    memoryASet16(ds, edi + 272, ax);
loc_1cb3cf: // 0160:1cb3cf
    ax = memoryAGet16(ds, esi + 274);
    if (!ax)
        goto loc_1cb3f6;
    if (al)
        goto loc_1cb3e5;
    al = memoryAGet(ds, edi + 274);
loc_1cb3e5: // 0160:1cb3e5
    if (ah)
        goto loc_1cb3ef;
    ah = memoryAGet(ds, edi + 275);
loc_1cb3ef: // 0160:1cb3ef
    memoryASet16(ds, edi + 274, ax);
loc_1cb3f6: // 0160:1cb3f6
    eax = memoryAGet32(ds, esi + 276);
    if (!eax)
        goto loc_1cb447;
    if (!ax)
        goto loc_1cb420;
    if (al)
        goto loc_1cb40f;
    al = memoryAGet(ds, edi + 276);
loc_1cb40f: // 0160:1cb40f
    if (ah)
        goto loc_1cb419;
    ah = memoryAGet(ds, edi + 277);
loc_1cb419: // 0160:1cb419
    memoryASet16(ds, edi + 276, ax);
loc_1cb420: // 0160:1cb420
    ax = memoryAGet16(ds, esi + 278);
    if (!ax)
        goto loc_1cb447;
    if (al)
        goto loc_1cb436;
    al = memoryAGet(ds, edi + 278);
loc_1cb436: // 0160:1cb436
    if (ah)
        goto loc_1cb440;
    ah = memoryAGet(ds, edi + 279);
loc_1cb440: // 0160:1cb440
    memoryASet16(ds, edi + 278, ax);
loc_1cb447: // 0160:1cb447
    eax = memoryAGet32(ds, esi + 280);
    if (!eax)
        goto loc_1cb498;
    if (!ax)
        goto loc_1cb471;
    if (al)
        goto loc_1cb460;
    al = memoryAGet(ds, edi + 280);
loc_1cb460: // 0160:1cb460
    if (ah)
        goto loc_1cb46a;
    ah = memoryAGet(ds, edi + 281);
loc_1cb46a: // 0160:1cb46a
    memoryASet16(ds, edi + 280, ax);
loc_1cb471: // 0160:1cb471
    ax = memoryAGet16(ds, esi + 282);
    if (!ax)
        goto loc_1cb498;
    if (al)
        goto loc_1cb487;
    al = memoryAGet(ds, edi + 282);
loc_1cb487: // 0160:1cb487
    if (ah)
        goto loc_1cb491;
    ah = memoryAGet(ds, edi + 283);
loc_1cb491: // 0160:1cb491
    memoryASet16(ds, edi + 282, ax);
loc_1cb498: // 0160:1cb498
    eax = memoryAGet32(ds, esi + 284);
    if (!eax)
        goto loc_1cb4e9;
    if (!ax)
        goto loc_1cb4c2;
    if (al)
        goto loc_1cb4b1;
    al = memoryAGet(ds, edi + 284);
loc_1cb4b1: // 0160:1cb4b1
    if (ah)
        goto loc_1cb4bb;
    ah = memoryAGet(ds, edi + 285);
loc_1cb4bb: // 0160:1cb4bb
    memoryASet16(ds, edi + 284, ax);
loc_1cb4c2: // 0160:1cb4c2
    ax = memoryAGet16(ds, esi + 286);
    if (!ax)
        goto loc_1cb4e9;
    if (al)
        goto loc_1cb4d8;
    al = memoryAGet(ds, edi + 286);
loc_1cb4d8: // 0160:1cb4d8
    if (ah)
        goto loc_1cb4e2;
    ah = memoryAGet(ds, edi + 287);
loc_1cb4e2: // 0160:1cb4e2
    memoryASet16(ds, edi + 286, ax);
loc_1cb4e9: // 0160:1cb4e9
    eax = memoryAGet32(ds, esi + 288);
    if (!eax)
        goto loc_1cb53a;
    if (!ax)
        goto loc_1cb513;
    if (al)
        goto loc_1cb502;
    al = memoryAGet(ds, edi + 288);
loc_1cb502: // 0160:1cb502
    if (ah)
        goto loc_1cb50c;
    ah = memoryAGet(ds, edi + 289);
loc_1cb50c: // 0160:1cb50c
    memoryASet16(ds, edi + 288, ax);
loc_1cb513: // 0160:1cb513
    ax = memoryAGet16(ds, esi + 290);
    if (!ax)
        goto loc_1cb53a;
    if (al)
        goto loc_1cb529;
    al = memoryAGet(ds, edi + 290);
loc_1cb529: // 0160:1cb529
    if (ah)
        goto loc_1cb533;
    ah = memoryAGet(ds, edi + 291);
loc_1cb533: // 0160:1cb533
    memoryASet16(ds, edi + 290, ax);
loc_1cb53a: // 0160:1cb53a
    eax = memoryAGet32(ds, esi + 292);
    if (!eax)
        goto loc_1cb58b;
    if (!ax)
        goto loc_1cb564;
    if (al)
        goto loc_1cb553;
    al = memoryAGet(ds, edi + 292);
loc_1cb553: // 0160:1cb553
    if (ah)
        goto loc_1cb55d;
    ah = memoryAGet(ds, edi + 293);
loc_1cb55d: // 0160:1cb55d
    memoryASet16(ds, edi + 292, ax);
loc_1cb564: // 0160:1cb564
    ax = memoryAGet16(ds, esi + 294);
    if (!ax)
        goto loc_1cb58b;
    if (al)
        goto loc_1cb57a;
    al = memoryAGet(ds, edi + 294);
loc_1cb57a: // 0160:1cb57a
    if (ah)
        goto loc_1cb584;
    ah = memoryAGet(ds, edi + 295);
loc_1cb584: // 0160:1cb584
    memoryASet16(ds, edi + 294, ax);
loc_1cb58b: // 0160:1cb58b
    eax = memoryAGet32(ds, esi + 296);
    if (!eax)
        goto loc_1cb5dc;
    if (!ax)
        goto loc_1cb5b5;
    if (al)
        goto loc_1cb5a4;
    al = memoryAGet(ds, edi + 296);
loc_1cb5a4: // 0160:1cb5a4
    if (ah)
        goto loc_1cb5ae;
    ah = memoryAGet(ds, edi + 297);
loc_1cb5ae: // 0160:1cb5ae
    memoryASet16(ds, edi + 296, ax);
loc_1cb5b5: // 0160:1cb5b5
    ax = memoryAGet16(ds, esi + 298);
    if (!ax)
        goto loc_1cb5dc;
    if (al)
        goto loc_1cb5cb;
    al = memoryAGet(ds, edi + 298);
loc_1cb5cb: // 0160:1cb5cb
    if (ah)
        goto loc_1cb5d5;
    ah = memoryAGet(ds, edi + 299);
loc_1cb5d5: // 0160:1cb5d5
    memoryASet16(ds, edi + 298, ax);
loc_1cb5dc: // 0160:1cb5dc
    eax = memoryAGet32(ds, esi + 300);
    if (!eax)
        goto loc_1cb62d;
    if (!ax)
        goto loc_1cb606;
    if (al)
        goto loc_1cb5f5;
    al = memoryAGet(ds, edi + 300);
loc_1cb5f5: // 0160:1cb5f5
    if (ah)
        goto loc_1cb5ff;
    ah = memoryAGet(ds, edi + 301);
loc_1cb5ff: // 0160:1cb5ff
    memoryASet16(ds, edi + 300, ax);
loc_1cb606: // 0160:1cb606
    ax = memoryAGet16(ds, esi + 302);
    if (!ax)
        goto loc_1cb62d;
    if (al)
        goto loc_1cb61c;
    al = memoryAGet(ds, edi + 302);
loc_1cb61c: // 0160:1cb61c
    if (ah)
        goto loc_1cb626;
    ah = memoryAGet(ds, edi + 303);
loc_1cb626: // 0160:1cb626
    memoryASet16(ds, edi + 302, ax);
loc_1cb62d: // 0160:1cb62d
    eax = memoryAGet32(ds, esi + 304);
    if (!eax)
        goto loc_1cb67e;
    if (!ax)
        goto loc_1cb657;
    if (al)
        goto loc_1cb646;
    al = memoryAGet(ds, edi + 304);
loc_1cb646: // 0160:1cb646
    if (ah)
        goto loc_1cb650;
    ah = memoryAGet(ds, edi + 305);
loc_1cb650: // 0160:1cb650
    memoryASet16(ds, edi + 304, ax);
loc_1cb657: // 0160:1cb657
    ax = memoryAGet16(ds, esi + 306);
    if (!ax)
        goto loc_1cb67e;
    if (al)
        goto loc_1cb66d;
    al = memoryAGet(ds, edi + 306);
loc_1cb66d: // 0160:1cb66d
    if (ah)
        goto loc_1cb677;
    ah = memoryAGet(ds, edi + 307);
loc_1cb677: // 0160:1cb677
    memoryASet16(ds, edi + 306, ax);
loc_1cb67e: // 0160:1cb67e
    eax = memoryAGet32(ds, esi + 308);
    if (!eax)
        goto loc_1cb6cf;
    if (!ax)
        goto loc_1cb6a8;
    if (al)
        goto loc_1cb697;
    al = memoryAGet(ds, edi + 308);
loc_1cb697: // 0160:1cb697
    if (ah)
        goto loc_1cb6a1;
    ah = memoryAGet(ds, edi + 309);
loc_1cb6a1: // 0160:1cb6a1
    memoryASet16(ds, edi + 308, ax);
loc_1cb6a8: // 0160:1cb6a8
    ax = memoryAGet16(ds, esi + 310);
    if (!ax)
        goto loc_1cb6cf;
    if (al)
        goto loc_1cb6be;
    al = memoryAGet(ds, edi + 310);
loc_1cb6be: // 0160:1cb6be
    if (ah)
        goto loc_1cb6c8;
    ah = memoryAGet(ds, edi + 311);
loc_1cb6c8: // 0160:1cb6c8
    memoryASet16(ds, edi + 310, ax);
loc_1cb6cf: // 0160:1cb6cf
    eax = memoryAGet32(ds, esi + 312);
    if (!eax)
        goto loc_1cb720;
    if (!ax)
        goto loc_1cb6f9;
    if (al)
        goto loc_1cb6e8;
    al = memoryAGet(ds, edi + 312);
loc_1cb6e8: // 0160:1cb6e8
    if (ah)
        goto loc_1cb6f2;
    ah = memoryAGet(ds, edi + 313);
loc_1cb6f2: // 0160:1cb6f2
    memoryASet16(ds, edi + 312, ax);
loc_1cb6f9: // 0160:1cb6f9
    ax = memoryAGet16(ds, esi + 314);
    if (!ax)
        goto loc_1cb720;
    if (al)
        goto loc_1cb70f;
    al = memoryAGet(ds, edi + 314);
loc_1cb70f: // 0160:1cb70f
    if (ah)
        goto loc_1cb719;
    ah = memoryAGet(ds, edi + 315);
loc_1cb719: // 0160:1cb719
    memoryASet16(ds, edi + 314, ax);
loc_1cb720: // 0160:1cb720
    eax = memoryAGet32(ds, esi + 316);
    if (!eax)
        goto loc_1cb771;
    if (!ax)
        goto loc_1cb74a;
    if (al)
        goto loc_1cb739;
    al = memoryAGet(ds, edi + 316);
loc_1cb739: // 0160:1cb739
    if (ah)
        goto loc_1cb743;
    ah = memoryAGet(ds, edi + 317);
loc_1cb743: // 0160:1cb743
    memoryASet16(ds, edi + 316, ax);
loc_1cb74a: // 0160:1cb74a
    ax = memoryAGet16(ds, esi + 318);
    if (!ax)
        goto loc_1cb771;
    if (al)
        goto loc_1cb760;
    al = memoryAGet(ds, edi + 318);
loc_1cb760: // 0160:1cb760
    if (ah)
        goto loc_1cb76a;
    ah = memoryAGet(ds, edi + 319);
loc_1cb76a: // 0160:1cb76a
    memoryASet16(ds, edi + 318, ax);
loc_1cb771: // 0160:1cb771
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_1ca124;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1cb786() // 0160:1cb786 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 480);
    memoryASet32(ds, edi + 640, eax);
    eax = memoryAGet32(ds, esi + 484);
    memoryASet32(ds, edi + 644, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 1280, eax);
    eax = memoryAGet32(ds, esi + 964);
    memoryASet32(ds, edi + 1284, eax);
    eax = memoryAGet32(ds, esi + 1440);
    memoryASet32(ds, edi + 1920, eax);
    eax = memoryAGet32(ds, esi + 1444);
    memoryASet32(ds, edi + 1924, eax);
    eax = memoryAGet32(ds, esi + 1920);
    memoryASet32(ds, edi + 2560, eax);
    eax = memoryAGet32(ds, esi + 1924);
    memoryASet32(ds, edi + 2564, eax);
    eax = memoryAGet32(ds, esi + 2400);
    memoryASet32(ds, edi + 3200, eax);
    eax = memoryAGet32(ds, esi + 2404);
    memoryASet32(ds, edi + 3204, eax);
    eax = memoryAGet32(ds, esi + 2880);
    memoryASet32(ds, edi + 3840, eax);
    eax = memoryAGet32(ds, esi + 2884);
    memoryASet32(ds, edi + 3844, eax);
    eax = memoryAGet32(ds, esi + 3360);
    memoryASet32(ds, edi + 4480, eax);
    eax = memoryAGet32(ds, esi + 3364);
    memoryASet32(ds, edi + 4484, eax);
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1cb83f() // 0160:1cb83f +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    if ((int32_t)ebx <= (int32_t)0x00000000)
        goto loc_1cb8ec;
    if (ecx)
        goto loc_1cb8ec;
loc_1cb855: // 0160:1cb855
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_1cb86d;
    if (al)
        goto loc_1cb863;
    al = memoryAGet(ds, edi);
loc_1cb863: // 0160:1cb863
    if (ah)
        goto loc_1cb86a;
    ah = memoryAGet(ds, edi + 1);
loc_1cb86a: // 0160:1cb86a
    memoryASet16(ds, edi, ax);
loc_1cb86d: // 0160:1cb86d
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_1cb888;
    if (al)
        goto loc_1cb87d;
    al = memoryAGet(ds, edi + 2);
loc_1cb87d: // 0160:1cb87d
    if (ah)
        goto loc_1cb884;
    ah = memoryAGet(ds, edi + 3);
loc_1cb884: // 0160:1cb884
    memoryASet16(ds, edi + 2, ax);
loc_1cb888: // 0160:1cb888
    ax = memoryAGet16(ds, esi + 4);
    if (!ax)
        goto loc_1cb8a3;
    if (al)
        goto loc_1cb898;
    al = memoryAGet(ds, edi + 4);
loc_1cb898: // 0160:1cb898
    if (ah)
        goto loc_1cb89f;
    ah = memoryAGet(ds, edi + 5);
loc_1cb89f: // 0160:1cb89f
    memoryASet16(ds, edi + 4, ax);
loc_1cb8a3: // 0160:1cb8a3
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_1cb8be;
    if (al)
        goto loc_1cb8b3;
    al = memoryAGet(ds, edi + 6);
loc_1cb8b3: // 0160:1cb8b3
    if (ah)
        goto loc_1cb8ba;
    ah = memoryAGet(ds, edi + 7);
loc_1cb8ba: // 0160:1cb8ba
    memoryASet16(ds, edi + 6, ax);
loc_1cb8be: // 0160:1cb8be
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_1cb8d9;
    if (al)
        goto loc_1cb8ce;
    al = memoryAGet(ds, edi + 8);
loc_1cb8ce: // 0160:1cb8ce
    if (ah)
        goto loc_1cb8d5;
    ah = memoryAGet(ds, edi + 9);
loc_1cb8d5: // 0160:1cb8d5
    memoryASet16(ds, edi + 8, ax);
loc_1cb8d9: // 0160:1cb8d9
    esi += 0x00000140;
    edi += 0x00000140;
    ebx--;
    if (ebx)
        goto loc_1cb855;
loc_1cb8ec: // 0160:1cb8ec
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1cb8ee() // 0160:1cb8ee +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    bl = dl;
    edx = memoryAGet32(ds, eax);
    ecx = edx + 1;
    memoryASet32(ds, eax, ecx);
    memoryASet(ds, edx, bl);
    memoryASet32(ds, eax + 16, memoryAGet32(ds, eax + 16) + 1);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cb901() // 0160:1cb901 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    eax = esp + 28;
    edx = memoryAGet32(ds, esp + 24);
    ebx = esp;
    ecx = 0x001cb8ee;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 20);
    sub_1ccafb();
    edx = memoryAGet32(ds, esp + 20);
    memoryASet(ds, edx + eax, 0x00);
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cb931() // 0160:1cb931 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 16);
    ebx = esp + 20;
    sub_1cd4f5();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cb950() // 0160:1cb950 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if (eax == edx)
        goto loc_1cb9c4;
loc_1cb958: // 0160:1cb958
    eax = memoryAGet32(ds, ebx);
    ecx = memoryAGet32(ds, edx);
    if (ecx != eax)
        goto loc_1cb9c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1cb9c4;
    eax = memoryAGet32(ds, ebx + 4);
    ecx = memoryAGet32(ds, edx + 4);
    if (ecx != eax)
        goto loc_1cb9c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1cb9c4;
    eax = memoryAGet32(ds, ebx + 8);
    ecx = memoryAGet32(ds, edx + 8);
    if (ecx != eax)
        goto loc_1cb9c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1cb9c4;
    eax = memoryAGet32(ds, ebx + 12);
    ecx = memoryAGet32(ds, edx + 12);
    if (ecx != eax)
        goto loc_1cb9c9;
    ebx += 0x00000010;
    edx += 0x00000010;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (!eax)
        goto loc_1cb958;
loc_1cb9c4: // 0160:1cb9c4
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cb9c9: // 0160:1cb9c9
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1cb9ea;
    if (al == 0x00)
        goto loc_1cb9c4;
    flags.carry = ah < ch;
    if (ah != ch)
        goto loc_1cb9ea;
    if (ah == 0x00)
        goto loc_1cb9c4;
    eax >>= 16;
    ecx >>= 16;
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1cb9ea;
    if (al == 0x00)
        goto loc_1cb9c4;
    flags.carry = ah < ch;
loc_1cb9ea: // 0160:1cb9ea
    eax = -flags.carry;
    al |= 0x01;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cb9f2() // 0160:1cb9f2 +long
{
    esp -= 4;
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    push32(memoryAGet32(ds, esp));
    memoryASet(ds, esp + 1, 0x1f);
    fldcw(memoryAGet16(ds, esp));
    frndtint();
    fldcw(memoryAGet16(ds, esp + 4));
    esp = esp + 8;
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1cba0f() // 0160:1cba0f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000024;
    edx = eax;
    eax = esp;
    sub_1cd503();
    if ((int32_t)eax < (int32_t)0x000001f4)
        goto loc_1cba27;
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
loc_1cba27: // 0160:1cba27
    eax = esp;
    sub_1cd5c6();
    ebx = eax;
    if (!edx)
        goto loc_1cba36;
    memoryASet32(ds, edx, eax);
loc_1cba36: // 0160:1cba36
    esp += 0x00000024;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cba3c()
{
  sub_1cbab4();
}

void sub_1cbab4() // 0160:1cbab4 +long
{
    esp -= 4;
    flags.interrupts = 1;
    esp &= 0xfffffffc;
    ebx = esp;
    memoryASet32(ds, 0x1e3dd0, ebx);
    memoryASet32(ds, 0x1e3dbc, ebx);
    ax = 0x0024;
    memoryASet16(ds, 0x1e3dc8, ax);
    ebx = 0x50484152;
    eax = 0;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x1e3df3, al);
    memoryASet(ds, 0x1e3df4, ah);
    ecx = eax;
    esi = 0;
    edi = 0x00000081;
    eax >>= 16;
    if (ax != 0x4458)
        goto loc_1cbb36;
    bl -= 0x30;
    al = bl;
    ah = 0x00;
    push32(eax);
    es = memoryAGet16(ds, 0x1e3dc8);
    ebx = memoryAGet32(es, 0x005c);
    ebx += 0x00000fff;
    ebx &= 0xfffff000;
    memoryASet32(ds, 0x1e3dbc, ebx);
    ebx >>= 12;
    ax = ds;
    es = eax;
    ah = 0x4a;
    interrupt(0x21);
    eax = pop32();
    bx = ds;
    cx = 0x002c;
    goto loc_1cbb6e;
loc_1cbb36: // 0160:1cbb36
    if (ax != 0x4243)
        goto loc_1cbb70;
    memoryASet32(ds, 0x1e3d94, edx);
    esi = edx;
    edx = memoryAGet32(ds, esi + 28);
    ebx = esp;
    ebx -= edx;
    ah = 0x4a;
    interrupt(0x21);
    bx = ds;
    memoryASet16(ds, 0x1e3dc8, ds);
    eax = memoryAGet32(ds, esi + 16);
    edi += eax;
    esi = 0;
    si = memoryAGet16(ds, eax + 44);
    esi <<= 4;
    cx = ds;
    al = 0x09;
    ah = 0x00;
loc_1cbb6e: // 0160:1cbb6e
    goto loc_1cbbc9;
loc_1cbb70: // 0160:1cbb70
    dx = 0x0078;
    ax = 0xff00;
    interrupt(0x21);
    if (al == 0x00)
        goto loc_1cbbb2;
    ax = gs;
    if (ax == 0x0000)
        goto loc_1cbb8d;
    memoryASet16(ds, 0x1e3d98, ax);
loc_1cbb8d: // 0160:1cbb8d
    ax = 0x0006;
    bx = ds;
    interrupt(0x31);
    al = 0x01;
    ah = 0x00;
    dx |= cx;
    if (!dx)
        goto loc_1cbba1;
    ah = 0x01;
loc_1cbba1: // 0160:1cbba1
    memoryASet16(ds, 0x1e3dc8, es);
    cx = memoryAGet16(es, 0x002c);
    goto loc_1cbbc9;
loc_1cbbb2: // 0160:1cbbb2
    dx = ds;
    cx = 0x0024;
    ds = ecx;
    cx = 0x002c;
    ds = edx;
    bx = 0x0017;
    al = 0x00;
    ah = 0x00;
loc_1cbbc9: // 0160:1cbbc9
    memoryASet(ds, 0x1e3dea, al);
    memoryASet(ds, 0x1e3deb, ah);
    es = ebx;
    memoryASet16(es, 0x1cbd11, ds);
    memoryASet32(ds, 0x1e3ded, esi);
    memoryASet16(ds, 0x1e3df1, cx);
    push32(esi);
    es = memoryAGet16(ds, 0x1e3dc8);
    edx = 0x003f6840;
    edx += 0x0000000f;
    dl &= 0xf0;
    ecx = 0;
    cl = memoryAGet(es, edi + -1);
    flags.direction = 0;
    al = 0x20;
    for (flags.zero = 1; ecx != 0 && flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    esi = edi + -1;
    edi = edx;
    bx = es;
    dx = ds;
    ds = ebx;
    es = edx;
    if (flags.zero)
        goto loc_1cbc1e;
    ecx++;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
loc_1cbc1e: // 0160:1cbc1e
    al = 0;
    stosb<ES_EDI>(al);
    stosb<ES_EDI>(al);
    esi = pop32();
    edi--;
    push32(edi);
    push32(edx);
    ds = memoryAGet16(es, 0x1e3df1);
    ebp = 0;
loc_1cbc30: // 0160:1cbc30
    eax = memoryAGet32(ds, esi);
    eax |= 0x20202020;
    if (eax != 0x37386f6e)
        goto loc_1cbc45;
    if (memoryAGet(ds, esi + 4) != 0x3d)
        goto loc_1cbc45;
    ebp++;
loc_1cbc45: // 0160:1cbc45
    al = lodsb<DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1cbc45;
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1cbc30;
    al = lodsb<DS_ESI>();
    esi++;
    esi++;
loc_1cbc53: // 0160:1cbc53
    movsb<ES_EDI, DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1cbc53;
    ds = pop();
    esi = pop32();
    ebx = esp;
    memoryASet16(ds, 0x1e3de8, bp);
    memoryASet32(ds, 0x1e3dcc, edi);
    memoryASet32(ds, 0x1e3db8, ebx);
    ecx = 0x003f6840;
    edi = 0x001e4288;
    ecx -= edi;
    if (memoryAGet(ds, 0x1e3dea) != 0x01)
        goto loc_1cbc94;
    if (ecx <= 0x00001000)
        goto loc_1cbc94;
    ecx = 0x00001000;
loc_1cbc94: // 0160:1cbc94
    dl = cl;
    ecx >>= 2;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    cl = dl;
    cl &= 0x03;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    eax = 0x003f6840;
    eax += 0x0000000f;
    al &= 0xf0;
    memoryASet32(ds, 0x1e3dc0, eax);
    memoryASet32(ds, 0x1e3dc4, esi);
    eax = 0x000000ff;
    sub_1cd76a();
    ebp = 0;
    sub_1cd71a();
    goto loc_1cbcf0;
    // gap 35 bytes
loc_1cbcf0: // 0160:1cbcf0
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1cd7b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1cbccd() // 0160:1cbccd +long
{
    esp -= 4;
    push32(edx);
    push32(eax);
    edx = 0x001cbab0;
    ax = 0x3d01;
    interrupt(0x21);
    bx = ax;
    edx = pop32();
    esi = edx;
    flags.direction = 0;
loc_1cbce1: // 0160:1cbce1
    al = lodsb<DS_ESI>();
    if (al != 0x00)
        goto loc_1cbce1;
    ecx = esi;
    ecx -= edx;
    ecx--;
    ah = 0x40;
    interrupt(0x21);
    eax = pop32();
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1cd7b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1cbd14()
{
  sub_1cd820();
}

void sub_1cbd1e() // 0160:1cbd1e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000004;
    ebx = esp + 20;
    eax = 0x001e3e62;
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp, ebx);
    ebx = esp;
    sub_1cdb10();
    esp += 0x00000004;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cbd40() // 0160:1cbd40 +long
{
    esp -= 4;
    esp += 4;
}
void sub_1cbd41() // 0160:1cbd41 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    switch (memoryAGet32(ds, 0x1e3da0))
    {
        case 0x1cbd40: sub_1cbd40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x1e3da0));
            stop("ind 0160:1cbd44");
    }
    switch (memoryAGet32(ds, 0x1e3da4))
    {
        case 0x1cbd40: sub_1cbd40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x1e3da4));
            stop("ind 0160:1cbd4a");
    }
    eax = edx;
    sub_1cbd59();
    edx = pop32();
    esp += 4;
}
void sub_1cbd59() // 0160:1cbd59 +long
{
    esp -= 4;
    goto loc_1cbd59;
loc_1cbccb: // 0160:1cbccb
    goto loc_1cbcf0;
    // gap 35 bytes
loc_1cbcf0: // 0160:1cbcf0
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1cd7b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
    // gap 84 bytes
loc_1cbd59: // 0160:1cbd59
    push32(edx);
    edx = eax;
    switch (memoryAGet32(ds, 0x1e3da4))
    {
        case 0x1cbd40: sub_1cbd40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x1e3da4));
            stop("ind 0160:1cbd5c");
    }
    switch (memoryAGet32(ds, 0x1e3da8))
    {
        case 0x1cbd40: sub_1cbd40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x1e3da8));
            stop("ind 0160:1cbd62");
    }
    eax = edx;
    goto loc_1cbccb;
}
void sub_1cbd6f() // 0160:1cbd6f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = eax;
    al = cl;
    out8(dx, al);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cbd97() // 0160:1cbd97 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ah = memoryAGet(ds, 0x1e3dea);
    if (ah < 0x02)
        goto loc_1cbdb4;
    if (ah > 0x08)
        goto loc_1cbdb4;
    eax = 0x00002502;
    cl = bl;
    goto loc_1cbdc0;
loc_1cbdb4: // 0160:1cbdb4
    eax = ebx;
    eax &= 0x000000ff;
    cl = 0;
    ah |= 0x35;
loc_1cbdc0: // 0160:1cbdc0
    push(es);
    interrupt(0x21);
    edx = es;
    es = pop();
    eax = ebx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cbdcb() // 0160:1cbdcb +long
{
    esp -= 4;
    push32(edx);
    edx = ebx;
    bl = memoryAGet(ds, 0x1e3dea);
    if (bl < 0x02)
        goto loc_1cbdec;
    if (bl > 0x08)
        goto loc_1cbdec;
    push(ds);
    ds = ecx;
    cl = al;
    al = 0x04;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
    return;
loc_1cbdec: // 0160:1cbdec
    push(ds);
    ds = ecx;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
}
void sub_1cbe00() // 0160:1cbe00 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1cbe30;
loc_1cbe06: // 0160:1cbe06
    if (!(al & 0x03))
        goto loc_1cbe13;
    memoryASet(ds, eax, dl);
    eax++;
    edx = ror32(edx, 0x08);
    ecx--;
    if (ecx)
        goto loc_1cbe06;
loc_1cbe13: // 0160:1cbe13
    push32(ecx);
    ecx >>= 2;
    sub_1cbe37();
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1cbe30;
    memoryASet(ds, eax, dl);
    ecx--;
    if (!ecx)
        goto loc_1cbe30;
    memoryASet(ds, eax + 1, dh);
    ecx--;
    if (!ecx)
        goto loc_1cbe30;
    memoryASet(ds, eax + 2, dl);
loc_1cbe30: // 0160:1cbe30
    esp += 4;
    return;
}
void sub_1cbe37() // 0160:1cbe37 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1cbea2;
loc_1cbe3b: // 0160:1cbe3b
    if (!(al & 0x1f))
        goto loc_1cbe47;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (ecx)
        goto loc_1cbe3b;
loc_1cbe47: // 0160:1cbe47
    push32(ecx);
    ecx >>= 2;
    if (!ecx)
        goto loc_1cbe87;
    ecx--;
    if (!ecx)
        goto loc_1cbe79;
loc_1cbe50: // 0160:1cbe50
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    ecx--;
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    if (!ecx)
        goto loc_1cbe76;
    memoryASet32(ds, eax + 16, edx);
    memoryASet32(ds, eax + 20, edx);
    ecx--;
    memoryASet32(ds, eax + 24, edx);
    memoryASet32(ds, eax + 28, edx);
    eax = eax + 32;
    if (ecx)
        goto loc_1cbe50;
    eax = eax + -16;
loc_1cbe76: // 0160:1cbe76
    eax = eax + 16;
loc_1cbe79: // 0160:1cbe79
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    eax = eax + 16;
loc_1cbe87: // 0160:1cbe87
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1cbea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1cbea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1cbea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
loc_1cbea2: // 0160:1cbea2
    esp += 4;
    return;
}
void sub_1cbea3() // 0160:1cbea3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = eax;
    eax = 0;
    al = memoryAGet(ds, edx);
    ebx = 0;
    sub_1cdb95();
    memoryASet(ds, esp, al);
    if (al == 0x72)
        goto loc_1cbed6;
    if (al == 0x77)
        goto loc_1cbed6;
    if (al == 0x61)
        goto loc_1cbed6;
    eax = 0x00000009;
    sub_1cdba8();
    eax = 0;
    goto loc_1cbf50;
loc_1cbed6: // 0160:1cbed6
    eax = ebx;
    cl = memoryAGet(ds, edx + 1);
    al |= 0x03;
    if (cl != 0x2b)
        goto loc_1cbf03;
    ebx = eax;
    cl = memoryAGet(ds, edx + 2);
    al |= 0x40;
    if (cl == 0x62)
        goto loc_1cbeff;
    if (cl == 0x74)
        goto loc_1cbf36;
    flags.zero = memoryAGet32(ds, 0x1e4051) == 0x00000200;
loc_1cbefd: // 0160:1cbefd
    if (!flags.zero)
        goto loc_1cbf36;
loc_1cbeff: // 0160:1cbeff
    ebx = eax;
    goto loc_1cbf36;
loc_1cbf03: // 0160:1cbf03
    ecx = ebx;
    cl |= 0x40;
    if (memoryAGet(ds, edx + 1) != 0x62)
        goto loc_1cbf1c;
    al = memoryAGet(ds, edx + 2);
    ebx = ecx;
    if (al != 0x2b)
        goto loc_1cbf36;
    cl |= 0x03;
    goto loc_1cbf34;
loc_1cbf1c: // 0160:1cbf1c
    if (memoryAGet(ds, edx + 1) != 0x74)
        goto loc_1cbf28;
    flags.zero = memoryAGet(ds, edx + 2) == 0x2b;
    goto loc_1cbefd;
loc_1cbf28: // 0160:1cbf28
    if (memoryAGet32(ds, 0x1e4051) != 0x00000200)
        goto loc_1cbf36;
loc_1cbf34: // 0160:1cbf34
    ebx = ecx;
loc_1cbf36: // 0160:1cbf36
    al = memoryAGet(ds, esp);
    if (al != 0x77)
        goto loc_1cbf42;
    bl |= 0x02;
    goto loc_1cbf4e;
loc_1cbf42: // 0160:1cbf42
    if (al != 0x61)
        goto loc_1cbf4b;
    bl |= 0x82;
    goto loc_1cbf4e;
loc_1cbf4b: // 0160:1cbf4b
    bl |= 0x01;
loc_1cbf4e: // 0160:1cbf4e
    eax = ebx;
loc_1cbf50: // 0160:1cbf50
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cbf57() // 0160:1cbf57 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xfc);
    eax = edx;
    sub_1cbea3();
    edi = memoryAGet32(ds, ecx + 12);
    edi |= eax;
    eax = 0;
    memoryASet32(ds, ecx + 12, edi);
    al = memoryAGet(ds, edx);
    sub_1cdb95();
    dl = al;
    if (al != 0x72)
        goto loc_1cbf9e;
    dh = memoryAGet(ds, ecx + 12);
    eax = 0;
    if (!(dh & 0x02))
        goto loc_1cbf8c;
    eax = 0x00000002;
loc_1cbf8c: // 0160:1cbf8c
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1cbf97;
    ah |= 0x02;
    goto loc_1cbf9a;
loc_1cbf97: // 0160:1cbf97
    ah |= 0x01;
loc_1cbf9a: // 0160:1cbf9a
    push32(0x00000000);
    goto loc_1cbfcb;
loc_1cbf9e: // 0160:1cbf9e
    al = !!(memoryAGet(ds, ecx + 12) & 0x01);
    eax &= 0x000000ff;
    eax += 0x00000021;
    if (dl != 0x61)
        goto loc_1cbfb6;
    al |= 0x10;
    goto loc_1cbfb8;
loc_1cbfb6: // 0160:1cbfb6
    al |= 0x40;
loc_1cbfb8: // 0160:1cbfb8
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1cbfc3;
    ah |= 0x02;
    goto loc_1cbfc6;
loc_1cbfc3: // 0160:1cbfc3
    ah |= 0x01;
loc_1cbfc6: // 0160:1cbfc6
    push32(0x00000180);
loc_1cbfcb: // 0160:1cbfcb
    push32(ebx);
    push32(eax);
    push32(esi);
    sub_1cdc02();
    esp += 0x00000010;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet32(ds, ecx + 16) != 0xffffffff)
        goto loc_1cbfeb;
    eax = ecx;
    sub_1cded4();
    eax = 0;
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1cbfeb: // 0160:1cbfeb
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx + 8, 0x00000000);
    memoryASet32(ds, ecx + 20, 0x00000000);
    if (dl != 0x61)
        goto loc_1cc013;
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_1cc112();
loc_1cc013: // 0160:1cc013
    eax = ecx;
    sub_1cdf2b();
    eax = ecx;
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cc01f() // 0160:1cc01f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = 0;
    sub_1cde2c();
    ecx = eax;
    if (!eax)
        goto loc_1cc037;
    eax = esi;
    sub_1cbf57();
loc_1cc037: // 0160:1cc037
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cc03a() // 0160:1cc03a +long
{
    esp -= 4;
    push32(ebx);
    ebx = 0;
    sub_1cc01f();
    ebx = pop32();
    esp += 4;
}
void sub_1cc0d0() // 0160:1cc0d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) & 0xef);
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, edx + 4))
        goto loc_1cc0fc;
    ebx = memoryAGet32(ds, edx + 8);
    ecx = memoryAGet32(ds, edx);
    ebx -= ecx;
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_1cc0fc;
    edi = memoryAGet32(ds, edx + 4);
    esi = ecx + eax;
    edi -= eax;
    memoryASet32(ds, edx, esi);
    eax = 0;
    memoryASet32(ds, edx + 4, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cc0fc: // 0160:1cc0fc
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc112() // 0160:1cc112 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if (!(memoryAGet(ds, eax + 12) & 0x06))
        goto loc_1cc17a;
    if (!(memoryAGet(ds, ecx + 13) & 0x10))
        goto loc_1cc14b;
    eax = ecx;
    sub_1cdf5c();
    if (!eax)
        goto loc_1cc15f;
    if (ebx)
        goto loc_1cc142;
    if ((int32_t)esi >= 0)
        goto loc_1cc142;
loc_1cc138: // 0160:1cc138
    eax = 0x00000009;
    sub_1cdba8();
loc_1cc142: // 0160:1cc142
    eax = 0xffffffff;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cc14b: // 0160:1cc14b
    if (ebx != 0x00000001)
        goto loc_1cc153;
    esi -= memoryAGet32(ds, ecx + 4);
loc_1cc153: // 0160:1cc153
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
loc_1cc15f: // 0160:1cc15f
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xeb);
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce01b();
    if (eax != 0xffffffff)
        goto loc_1cc208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cc17a: // 0160:1cc17a
    if (ebx < 0x00000001)
        goto loc_1cc188;
    if (ebx <= 0x00000001)
        goto loc_1cc18e;
    if (ebx == 0x00000002)
        goto loc_1cc1e4;
    goto loc_1cc138;
loc_1cc188: // 0160:1cc188
    if (!ebx)
        goto loc_1cc1b3;
    goto loc_1cc138;
loc_1cc18e: // 0160:1cc18e
    eax = edx;
    edx = ecx;
    edi = memoryAGet32(ds, ecx + 4);
    sub_1cc0d0();
    if (!eax)
        goto loc_1cc208;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    edx -= edi;
    sub_1ce01b();
    if (eax != 0xffffffff)
        goto loc_1cc208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cc1b3: // 0160:1cc1b3
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce05c();
    edx = memoryAGet32(ds, ecx + 4);
    edi = esi;
    eax -= edx;
    edi -= eax;
    edx = ecx;
    eax = edi;
    sub_1cc0d0();
    if (!eax)
        goto loc_1cc208;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce01b();
    if (eax != 0xffffffff)
        goto loc_1cc208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cc1e4: // 0160:1cc1e4
    eax = memoryAGet32(ds, ecx + 8);
    dl = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx, eax);
    dl &= 0xef;
    eax = memoryAGet32(ds, ecx + 16);
    memoryASet(ds, ecx + 12, dl);
    edx = esi;
    memoryASet32(ds, ecx + 4, 0x00000000);
    sub_1ce01b();
    if (eax == 0xffffffff)
        goto loc_1cc20a;
loc_1cc208: // 0160:1cc208
    eax = 0;
loc_1cc20a: // 0160:1cc20a
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cc20e() // 0160:1cc20e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, eax + 16);
    sub_1ce05c();
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1cc23a;
    ecx = memoryAGet32(ds, edx + 4);
    if (!ecx)
        goto loc_1cc23a;
    if (!(memoryAGet(ds, edx + 13) & 0x10))
        goto loc_1cc236;
    eax = ecx + ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cc236: // 0160:1cc236
    eax = ebx;
    eax -= ecx;
loc_1cc23a: // 0160:1cc23a
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc23e() // 0160:1cc23e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x3f677c);
loc_1cc247: // 0160:1cc247
    if (eax)
        goto loc_1cc253;
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cc253: // 0160:1cc253
    ebx = memoryAGet32(ds, eax + 4);
    if (edx == ebx)
        goto loc_1cc25e;
    eax = memoryAGet32(ds, eax);
    goto loc_1cc247;
loc_1cc25e: // 0160:1cc25e
    edx = 0x00000001;
    eax = ebx;
    sub_1cc26d();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc26d() // 0160:1cc26d +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    sub_1cc2f7();
    edx = eax;
    eax = ebx;
    sub_1cded4();
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_1cc282() // 0160:1cc282 +long
{
    esp -= 4;
    eax += 0x00000030;
    if ((int32_t)eax <= (int32_t)0x00000039)
        goto loc_1cc28d;
    eax += 0x00000027;
loc_1cc28d: // 0160:1cc28d
    esp += 4;
    return;
}
void sub_1cc28e() // 0160:1cc28e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = edx;
    sub_1ce06d();
    edx = 0x00000004;
    ebx = eax;
    esi = ecx;
    memoryASet(ds, ecx, 0x74);
    edx += ecx;
loc_1cc2a9: // 0160:1cc2a9
    eax = ebx;
    eax &= 0x0000000f;
    sub_1cc282();
    memoryASet(ds, edx, al);
    edx--;
    ebx >>= 4;
    if (edx != esi)
        goto loc_1cc2a9;
    eax = edi;
    eax = sar32(eax, 0x04);
    eax &= 0x0000000f;
    memoryASet(ds, ecx + 5, 0x5f);
    sub_1cc282();
    memoryASet(ds, ecx + 6, al);
    eax = edi;
    eax &= 0x0000000f;
    sub_1cc282();
    memoryASet(ds, ecx + 8, 0x2e);
    memoryASet(ds, ecx + 9, 0x74);
    memoryASet(ds, ecx + 10, 0x6d);
    memoryASet(ds, ecx + 11, 0x70);
    memoryASet(ds, ecx + 12, 0x00);
    memoryASet(ds, ecx + 7, al);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc2f7() // 0160:1cc2f7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    ecx = eax;
    edi = edx;
    if (memoryAGet32(ds, eax + 12) != 0x00000000)
        goto loc_1cc30f;
    esi = 0xffffffff;
    goto loc_1cc376;
loc_1cc30f: // 0160:1cc30f
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1cc322;
    eax = ecx;
    sub_1cdf5c();
    esi = eax;
loc_1cc322: // 0160:1cc322
    eax = ecx;
    sub_1cc20e();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1cc33a;
    eax = memoryAGet32(ds, ecx + 16);
    ebx = 0;
    sub_1ce01b();
loc_1cc33a: // 0160:1cc33a
    if (!edi)
        goto loc_1cc348;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce073();
    esi |= eax;
loc_1cc348: // 0160:1cc348
    if (!(memoryAGet(ds, ecx + 12) & 0x08))
        goto loc_1cc35d;
    eax = memoryAGet32(ds, ecx + 8);
    sub_1cca84();
    memoryASet32(ds, ecx + 8, 0x00000000);
loc_1cc35d: // 0160:1cc35d
    if (!(memoryAGet(ds, ecx + 13) & 0x08))
        goto loc_1cc376;
    edx = 0;
    eax = esp;
    dl = memoryAGet(ds, ecx + 25);
    sub_1cc28e();
    eax = esp;
    sub_1ce0a5();
loc_1cc376: // 0160:1cc376
    eax = esi;
    esp += 0x00000010;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc380() // 0160:1cc380 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x01)
        goto loc_1cc3aa;
    eax = 0x00000004;
    sub_1cdba8();
    dh = memoryAGet(ds, ecx + 12);
    dh |= 0x20;
    eax = 0;
    memoryASet(ds, ecx + 12, dh);
    goto loc_1cc543;
loc_1cc3aa: // 0160:1cc3aa
    ebx = (int32_t)ebx * (int32_t)edx;
    if (ebx)
        goto loc_1cc3b8;
    eax = ebx;
    goto loc_1cc543;
loc_1cc3b8: // 0160:1cc3b8
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_1cc3c5;
    eax = ebp;
    sub_1ce0aa();
loc_1cc3c5: // 0160:1cc3c5
    esi = 0;
    dl = memoryAGet(ss, ebp + 12);
    memoryASet32(ds, esp + 12, esi);
    if (!(dl & 0x40))
        goto loc_1cc4c4;
    memoryASet32(ds, esp + 8, ebx);
loc_1cc3db: // 0160:1cc3db
    edx = memoryAGet32(ss, ebp + 4);
    if (!edx)
        goto loc_1cc436;
    ebx = memoryAGet32(ds, esp + 8);
    if (edx <= ebx)
        goto loc_1cc3ec;
    edx = ebx;
loc_1cc3ec: // 0160:1cc3ec
    edi = memoryAGet32(ds, esp + 4);
    ecx = edx;
    esi = memoryAGet32(ss, ebp);
    ebx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ss, ebp);
    esi = edi + edx;
    ebx += edx;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, ebx);
    edi = memoryAGet32(ss, ebp + 4);
    ecx += edx;
    eax -= edx;
    edi -= edx;
    memoryASet32(ss, ebp, ecx);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ss, ebp + 4, edi);
loc_1cc436: // 0160:1cc436
    ecx = memoryAGet32(ds, esp + 8);
    if (!ecx)
        goto loc_1cc538;
    if (ecx >= memoryAGet32(ss, ebp + 20))
        goto loc_1cc44d;
    if (!(memoryAGet(ss, ebp + 13) & 0x04))
        goto loc_1cc4b0;
loc_1cc44d: // 0160:1cc44d
    cl = memoryAGet(ss, ebp + 13);
    ebx = memoryAGet32(ds, esp + 8);
    if (cl & 0x04)
        goto loc_1cc466;
    if (ebx <= 0x00000200)
        goto loc_1cc466;
    bh &= 0xfe;
    bl = 0;
loc_1cc466: // 0160:1cc466
    edx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ss, ebp + 16);
    sub_1ce121();
    if (eax != 0xffffffff)
        goto loc_1cc480;
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_1cc538;
loc_1cc480: // 0160:1cc480
    if (eax)
        goto loc_1cc48d;
loc_1cc484: // 0160:1cc484
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x10);
    goto loc_1cc538;
loc_1cc48d: // 0160:1cc48d
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    edx += eax;
    ebx -= eax;
    ecx += eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    goto loc_1cc3db;
loc_1cc4b0: // 0160:1cc4b0
    eax = ebp;
    sub_1ce1f8();
    if (!eax)
        goto loc_1cc538;
    goto loc_1cc3db;
loc_1cc4c4: // 0160:1cc4c4
    edx = memoryAGet32(ds, esp + 4);
    ebx += edx;
loc_1cc4ca: // 0160:1cc4ca
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1cc4db;
    eax = ebp;
    sub_1ce1f8();
    if (!eax)
        goto loc_1cc538;
loc_1cc4db: // 0160:1cc4db
    ecx = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    ecx--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, ecx);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x0000000d)
        goto loc_1cc51f;
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1cc508;
    eax = ebp;
    sub_1ce1f8();
    if (!eax)
        goto loc_1cc538;
loc_1cc508: // 0160:1cc508
    edi = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    edi--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, edi);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
loc_1cc51f: // 0160:1cc51f
    if (eax == 0x0000001a)
        goto loc_1cc484;
    memoryASet(ds, edx, al);
    eax = memoryAGet32(ds, esp + 12);
    eax++;
    edx++;
    memoryASet32(ds, esp + 12, eax);
    if (edx != ebx)
        goto loc_1cc4ca;
loc_1cc538: // 0160:1cc538
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp);
    edx = 0;
    div32(esi);
loc_1cc543: // 0160:1cc543
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cc54a() // 0160:1cc54a +long
{
    esp -= 4;
    push32(ebx);
loc_1cc54b: // 0160:1cc54b
    bl = memoryAGet(ds, eax);
    bh = memoryAGet(ds, edx);
    if (bl < 0x41)
        goto loc_1cc55c;
    if (bl > 0x5a)
        goto loc_1cc55c;
    bl += 0x20;
loc_1cc55c: // 0160:1cc55c
    if (bh < 0x41)
        goto loc_1cc569;
    if (bh > 0x5a)
        goto loc_1cc569;
    bh += 0x20;
loc_1cc569: // 0160:1cc569
    if (bl != bh)
        goto loc_1cc575;
    if (!bh)
        goto loc_1cc575;
    eax++;
    edx++;
    goto loc_1cc54b;
loc_1cc575: // 0160:1cc575
    edx = 0;
    eax = 0;
    dl = bl;
    al = bh;
    edx -= eax;
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_1cc583() // 0160:1cc583 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x02)
        goto loc_1cc5a8;
    eax = 0x00000004;
    sub_1cdba8();
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x20);
    eax = 0;
    goto loc_1cc763;
loc_1cc5a8: // 0160:1cc5a8
    ebx = (int32_t)ebx * (int32_t)edx;
    if (ebx)
        goto loc_1cc5b6;
    eax = ebx;
    goto loc_1cc763;
loc_1cc5b6: // 0160:1cc5b6
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_1cc5c3;
    eax = ebp;
    sub_1ce0aa();
loc_1cc5c3: // 0160:1cc5c3
    eax = memoryAGet32(ss, ebp + 12);
    dl = memoryAGet(ss, ebp + 12);
    esi = 0;
    eax &= 0x00000030;
    dl &= 0xcf;
    memoryASet32(ds, esp + 12, esi);
    memoryASet32(ds, esp + 8, eax);
    memoryASet(ss, ebp + 12, dl);
    if (!(dl & 0x40))
        goto loc_1cc6df;
    memoryASet32(ds, esp + 16, ebx);
loc_1cc5e9: // 0160:1cc5e9
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1cc641;
    eax = memoryAGet32(ds, esp + 16);
    if (eax < memoryAGet32(ss, ebp + 20))
        goto loc_1cc641;
    ah &= 0xfe;
    al = 0;
    memoryASet32(ds, esp + 20, eax);
    if (eax)
        goto loc_1cc60d;
    eax = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 20, eax);
loc_1cc60d: // 0160:1cc60d
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 20);
    eax = memoryAGet32(ss, ebp + 16);
    sub_1ce2a3();
    if (eax != 0xffffffff)
        goto loc_1cc62b;
loc_1cc622: // 0160:1cc622
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_1cc6ab;
loc_1cc62b: // 0160:1cc62b
    if (eax == memoryAGet32(ds, esp + 20))
        goto loc_1cc6ab;
    eax = 0x0000000c;
    sub_1cdba8();
    goto loc_1cc622;
loc_1cc641: // 0160:1cc641
    eax = memoryAGet32(ss, ebp + 20);
    eax -= memoryAGet32(ss, ebp + 4);
    ecx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 20, eax);
    if (eax <= ecx)
        goto loc_1cc657;
    memoryASet32(ds, esp + 20, ecx);
loc_1cc657: // 0160:1cc657
    esi = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 20);
    edi = memoryAGet32(ss, ebp);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 20);
    esi = memoryAGet32(ss, ebp);
    edi = memoryAGet32(ss, ebp + 4);
    esi += eax;
    bh = memoryAGet(ss, ebp + 13);
    memoryASet32(ss, ebp, esi);
    edi += eax;
    edx = memoryAGet32(ss, ebp + 20);
    memoryASet32(ss, ebp + 4, edi);
    bh |= 0x10;
    eax = memoryAGet32(ss, ebp + 4);
    memoryASet(ss, ebp + 13, bh);
    if (eax == edx)
        goto loc_1cc6a4;
    if (!(bh & 0x04))
        goto loc_1cc6ab;
loc_1cc6a4: // 0160:1cc6a4
    eax = ebp;
    sub_1cdf5c();
loc_1cc6ab: // 0160:1cc6ab
    eax = memoryAGet32(ds, esp + 20);
    esi = memoryAGet32(ds, esp + 4);
    edi = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 16);
    esi += eax;
    edi += eax;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, edi);
    edx -= eax;
    memoryASet32(ds, esp + 16, edx);
    if (!edx)
        goto loc_1cc740;
    if (!(memoryAGet(ss, ebp + 12) & 0x20))
        goto loc_1cc5e9;
    goto loc_1cc740;
loc_1cc6df: // 0160:1cc6df
    cl = memoryAGet(ss, ebp + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_1cc6fd;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ss, ebp + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ss, ebp + 13, al);
loc_1cc6fd: // 0160:1cc6fd
    edx = memoryAGet32(ds, esp + 4);
    eax = 0;
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet32(ds, esp + 4, edx);
    edx = ebp;
    sub_1ce474();
    if (memoryAGet(ss, ebp + 12) & 0x30)
        goto loc_1cc724;
    ecx = memoryAGet32(ds, esp + 12);
    ecx++;
    memoryASet32(ds, esp + 12, ecx);
    if (ebx != ecx)
        goto loc_1cc6fd;
loc_1cc724: // 0160:1cc724
    if (!edi)
        goto loc_1cc740;
    dh = memoryAGet(ss, ebp + 13);
    dh &= 0xfa;
    bl = dh;
    memoryASet(ss, ebp + 13, dh);
    bl |= 0x04;
    eax = ebp;
    memoryASet(ss, ebp + 13, bl);
    sub_1cdf5c();
loc_1cc740: // 0160:1cc740
    if (!(memoryAGet(ss, ebp + 12) & 0x20))
        goto loc_1cc74c;
    ecx = 0;
    memoryASet32(ds, esp + 12, ecx);
loc_1cc74c: // 0160:1cc74c
    eax = memoryAGet32(ds, esp + 8);
    edi = memoryAGet32(ds, esp);
    esi = memoryAGet32(ss, ebp + 12);
    edx = 0;
    esi |= eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ss, ebp + 12, esi);
    div32(edi);
loc_1cc763: // 0160:1cc763
    esp += 0x00000018;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cc76a() // 0160:1cc76a +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x0000000c;
    ecx = eax;
    eax = esp;
    sub_1ce518();
    eax = ecx;
    ecx = esp;
    sub_1ccae2();
    esp += 0x0000000c;
    ecx = pop32();
    esp += 4;
}
void sub_1cc785() // 0160:1cc785 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = 0;
    al = in8(dx);
    edx = pop32();
    esp += 4;
}
void sub_1cc78d() // 0160:1cc78d +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = eax;
    eax = ebx;
    out16(dx, ax);
    ebx = pop32();
    esp += 4;
}
void sub_1cc798() // 0160:1cc798 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = memoryAGet32(ds, 0x1e405c);
    if (!esi)
        goto loc_1cc7e9;
    if (!eax)
        goto loc_1cc7e9;
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    edi = ecx;
    goto loc_1cc7e3;
loc_1cc7c4: // 0160:1cc7c4
    eax = ecx;
    edx = ebp;
    ebx = edi;
    sub_1ce540();
    if (eax)
        goto loc_1cc7e0;
    if (memoryAGet(ds, ecx + edi) != 0x3d)
        goto loc_1cc7e0;
    eax = edi + 1;
    eax += ecx;
    goto loc_1cc7eb;
loc_1cc7e0: // 0160:1cc7e0
    esi += 0x00000004;
loc_1cc7e3: // 0160:1cc7e3
    ecx = memoryAGet32(ds, esi);
    if (ecx)
        goto loc_1cc7c4;
loc_1cc7e9: // 0160:1cc7e9
    eax = 0;
loc_1cc7eb: // 0160:1cc7eb
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc7fb() // 0160:1cc7fb +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
loc_1cc7ff: // 0160:1cc7ff
    dl = memoryAGet(ds, eax);
    if (!dl)
        goto loc_1cc815;
    dl -= 0x61;
    if (dl > 0x19)
        goto loc_1cc812;
    dl += 0x41;
    memoryASet(ds, eax, dl);
loc_1cc812: // 0160:1cc812
    eax++;
    goto loc_1cc7ff;
loc_1cc815: // 0160:1cc815
    eax = ebx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cc81a()
{
  sub_1ce5c9();
}

void sub_1cc9a1() // 0160:1cc9a1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    push(gs);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    if (!eax)
        goto loc_1cc9ba;
    if (eax <= 0xffffffd4)
        goto loc_1cc9c1;
loc_1cc9ba: // 0160:1cc9ba
    eax = 0;
    goto loc_1cca75;
loc_1cc9c1: // 0160:1cc9c1
    ebp = 0x001e3dac;
    edi = esi + 3;
    ah = 0;
    ebx = 0;
    memoryASet(ds, esp, ah);
    di &= 0xfffc;
loc_1cc9d4: // 0160:1cc9d4
    eax = edi;
    if (edi >= 0x0000000c)
        goto loc_1cc9e0;
    eax = 0x0000000c;
loc_1cc9e0: // 0160:1cc9e0
    if (eax <= memoryAGet32(ds, 0x1e3db4))
        goto loc_1cca00;
    ecx = memoryAGet32(ds, 0x1e3db0);
    if (ecx)
        goto loc_1cca38;
loc_1cc9f2: // 0160:1cc9f2
    memoryASet32(ds, 0x1e3db4, ecx);
    ecx = memoryAGet32(ds, 0x1e3dac);
    goto loc_1cca38;
loc_1cca00: // 0160:1cca00
    ecx = 0;
    goto loc_1cc9f2;
loc_1cca04: // 0160:1cca04
    edx = ds;
    eax = ebp;
    memoryASet32(ds, 0x1e3db0, ecx);
    edx &= 0x0000ffff;
    eax = esi;
    ebx = ecx;
    sub_1ce674();
    ebx = eax;
    if (eax)
        goto loc_1cca6b;
    eax = memoryAGet32(ds, 0x1e3db4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= eax)
        goto loc_1cca35;
    memoryASet32(ds, 0x1e3db4, edx);
loc_1cca35: // 0160:1cca35
    ecx = memoryAGet32(ds, ecx + 8);
loc_1cca38: // 0160:1cca38
    if (ecx)
        goto loc_1cca04;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_1cca4d;
    eax = esi;
    sub_1cec0b();
    if (eax)
        goto loc_1cca62;
loc_1cca4d: // 0160:1cca4d
    eax = esi;
    sub_1cedc6();
    if (!eax)
        goto loc_1cca6b;
    cl = 0;
    memoryASet(ds, esp, cl);
    goto loc_1cc9d4;
loc_1cca62: // 0160:1cca62
    memoryASet(ds, esp, 0x01);
    goto loc_1cc9d4;
loc_1cca6b: // 0160:1cca6b
    ch = 0;
    eax = ebx;
    memoryASet(ds, 0x3f6785, ch);
loc_1cca75: // 0160:1cca75
    esp += 0x00000004;
    ebp = pop32();
    gs = pop();
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cca84() // 0160:1cca84 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x1e3dac);
    goto loc_1cca9d;
loc_1cca92: // 0160:1cca92
    if (ecx > ebx)
        goto loc_1cca9a;
    if (ebx < edx)
        goto loc_1ccaa4;
loc_1cca9a: // 0160:1cca9a
    ecx = memoryAGet32(ds, ecx + 8);
loc_1cca9d: // 0160:1cca9d
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_1cca92;
loc_1ccaa4: // 0160:1ccaa4
    eax = 0x001e3dac;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_1ce71c();
    if (ecx == memoryAGet32(ds, 0x1e3db0))
        goto loc_1ccad5;
    ebp = memoryAGet32(ds, 0x1e3db4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_1ccad5;
    memoryASet32(ds, 0x1e3db4, edx);
loc_1ccad5: // 0160:1ccad5
    ah = 0;
    memoryASet(ds, 0x3f6785, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ccae2() // 0160:1ccae2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = ebx;
    ebx = ecx;
    esi = eax;
    edi = edx;
    edx = ebp;
    sub_1cedca();
    eax = memoryAGet32(ss, ebp);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ccafb() // 0160:1ccafb +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x0000004c;
    esi = ebx;
    memoryASet32(ds, esp + 68, ecx);
    bl = 0;
    memoryASet32(ds, esp + 40, eax);
    memoryASet(ds, esp + 72, bl);
    memoryASet(ds, esp + 60, bl);
    ebx = 0;
    edi = edx;
    memoryASet32(ds, esp + 56, ebx);
    ebp = 0x00000004;
    goto loc_1ccb7e;
loc_1ccb25: // 0160:1ccb25
    ebx = esp + 40;
    edx = esi;
    sub_1ccd7c();
    edi = eax;
    al = memoryAGet(ds, eax);
    edi++;
    memoryASet(ds, esp + 61, al);
    if (!al)
        goto loc_1ccd70;
    if (al != 0x6e)
        goto loc_1ccc20;
    bl = memoryAGet(ds, esp + 60);
    if (!(bl & 0x20))
        goto loc_1ccbab;
    if (!(bl & 0x80))
        goto loc_1ccb6a;
    ecx = memoryAGet32(ds, esi);
    ecx += 0x00000008;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet16(ds, ecx + -8); es = memoryAGet32(ds, ecx + -8 + 2);
loc_1ccb61: // 0160:1ccb61
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(es, edx, eax);
    goto loc_1ccb7e;
loc_1ccb6a: // 0160:1ccb6a
    if (!(bl & 0x40))
        goto loc_1ccba0;
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
loc_1ccb78: // 0160:1ccb78
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, edx, eax);
loc_1ccb7e: // 0160:1ccb7e
    cl = memoryAGet(ds, edi);
    if (!cl)
        goto loc_1ccd70;
    eax = edi + 1;
    if (cl == 0x25)
        goto loc_1ccb25;
    edi = eax;
    edx = 0;
    eax = esp + 40;
    dl = cl;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1cdaff: sub_1cdaff(); break;
        case 0x1cb8ee: sub_1cb8ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:1ccb9a");
    }
    goto loc_1ccb7e;
loc_1ccba0: // 0160:1ccba0
    edx = memoryAGet32(ds, esi);
    edx += ebp;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    goto loc_1ccb78;
loc_1ccbab: // 0160:1ccbab
    if (!(bl & 0x10))
        goto loc_1ccbeb;
    if (!(bl & 0x80))
        goto loc_1ccbc9;
    eax = memoryAGet32(ds, esi);
    eax += 0x00000008;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet16(ds, eax + -8); es = memoryAGet32(ds, eax + -8 + 2);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(es, edx, ax);
    goto loc_1ccb7e;
loc_1ccbc9: // 0160:1ccbc9
    if (!(bl & 0x40))
        goto loc_1ccbe0;
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
loc_1ccbd7: // 0160:1ccbd7
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(ds, edx, ax);
    goto loc_1ccb7e;
loc_1ccbe0: // 0160:1ccbe0
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
    goto loc_1ccbd7;
loc_1ccbeb: // 0160:1ccbeb
    if (!(bl & 0x80))
        goto loc_1ccbff;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000008;
    memoryASet32(ds, esi, edx);
    {int tmp1 = memoryAGet16(ds, edx + -8); int tmp2 = memoryAGet32(ds, edx + -8 + 2); edx = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_1ccb61;
loc_1ccbff: // 0160:1ccbff
    if (!(bl & 0x40))
        goto loc_1ccc12;
    eax = memoryAGet32(ds, esi);
    eax += ebp;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet32(ds, eax + -4);
    goto loc_1ccb78;
loc_1ccc12: // 0160:1ccc12
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
    goto loc_1ccb78;
loc_1ccc20: // 0160:1ccc20
    eax = esp;
    ebx = esp + 40;
    ecx = esp + 72;
    edx = esi;
    sub_1cd094();
    es = edx;
    dl = memoryAGet(ds, esp + 60);
    ebx = eax;
    if (dl & 0x08)
        goto loc_1ccc62;
    if (memoryAGet(ds, esp + 62) != 0x20)
        goto loc_1ccc62;
loc_1ccc45: // 0160:1ccc45
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_1ccc62;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ccc5c;
    goto loc_1ccc45;
loc_1ccc62: // 0160:1ccc62
    ecx = esp + 63;
loc_1ccc66: // 0160:1ccc66
    al = memoryAGet(ds, ecx);
    if (!al)
        goto loc_1ccc7b;
    edx = 0;
    dl = al;
    eax = esp + 40;
    ecx++;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ccc75;
    goto loc_1ccc66;
loc_1ccc7b: // 0160:1ccc7b
    eax = memoryAGet32(ds, esp + 52);
    ecx = eax + -1;
    memoryASet32(ds, esp + 52, ecx);
    if (!eax)
        goto loc_1ccc99;
    eax = esp + 40;
    edx = 0x00000030;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1ccc93;
    goto loc_1ccc7b;
loc_1ccc99: // 0160:1ccc99
    if (memoryAGet(ds, esp + 60) & 0x08)
        goto loc_1cccc4;
    if (memoryAGet(ds, esp + 62) == 0x20)
        goto loc_1cccc4;
loc_1ccca7: // 0160:1ccca7
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_1cccc4;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1cccbe;
    goto loc_1ccca7;
loc_1cccc4: // 0160:1cccc4
    dh = memoryAGet(ds, esp + 61);
    if (dh == 0x73)
        goto loc_1cccd2;
    if (dh != 0x53)
        goto loc_1ccd19;
loc_1cccd2: // 0160:1cccd2
    if (!(memoryAGet(ds, esp + 60) & 0x20))
        goto loc_1cccfa;
loc_1cccd9: // 0160:1cccd9
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1ccd38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1cccf1;
    ebx += 0x00000002;
    goto loc_1cccd9;
loc_1cccfa: // 0160:1cccfa
    eax = memoryAGet32(ds, esp + 48);
    edx = eax + -1;
    memoryASet32(ds, esp + 48, edx);
    if (!eax)
        goto loc_1ccd38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1cdaff: sub_1cdaff(); break;
        case 0x1cb8ee: sub_1cb8ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:1ccd12");
    }
    ebx++;
    goto loc_1cccfa;
loc_1ccd19: // 0160:1ccd19
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1ccd38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1cdaff: sub_1cdaff(); break;
        case 0x1cb8ee: sub_1cb8ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:1ccd31");
    }
    ebx++;
    goto loc_1ccd19;
loc_1ccd38: // 0160:1ccd38
    if (!(memoryAGet(ds, esp + 60) & 0x08))
        goto loc_1ccb7e;
    if ((int32_t)memoryAGet32(ds, esp + 44) <= (int32_t)0x00000000)
        goto loc_1ccb7e;
loc_1ccd4e: // 0160:1ccd4e
    eax = memoryAGet32(ds, esp + 44);
    edx = eax + -1;
    memoryASet32(ds, esp + 44, edx);
    if (!eax)
        goto loc_1ccb7e;
    eax = esp + 40;
    edx = 0x00000020;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1cdaff: sub_1cdaff(); break;
        case 0x1cb8ee: sub_1cb8ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:1ccd6a");
    }
    goto loc_1ccd4e;
loc_1ccd70: // 0160:1ccd70
    eax = memoryAGet32(ds, esp + 56);
    esp += 0x0000004c;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ccd7c() // 0160:1ccd7c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    memoryASet(ds, ebx + 23, 0x00);
    edx = ebx;
    memoryASet(ds, ebx + 22, 0x20);
    sub_1cceaf();
    memoryASet32(ds, ebx + 4, 0x00000000);
    cl = memoryAGet(ds, eax);
    edx = eax;
    if (cl < 0x30)
        goto loc_1ccdc4;
    if (cl > 0x39)
        goto loc_1ccdc4;
loc_1ccda5: // 0160:1ccda5
    ecx = memoryAGet32(ds, ebx + 4) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 4, ecx);
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1ccdeb;
    if (cl <= 0x39)
        goto loc_1ccda5;
    goto loc_1ccdeb;
loc_1ccdc4: // 0160:1ccdc4
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1ccdeb;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 4, edx);
    if ((int32_t)edx >= 0)
        goto loc_1ccdea;
    edi = edx;
    dh = memoryAGet(ds, ebx + 20);
    edi = -edi;
    dh |= 0x08;
    memoryASet32(ds, ebx + 4, edi);
    memoryASet(ds, ebx + 20, dh);
loc_1ccdea: // 0160:1ccdea
    eax++;
loc_1ccdeb: // 0160:1ccdeb
    memoryASet32(ds, ebx + 8, 0xffffffff);
    if (memoryAGet(ds, eax) != 0x2e)
        goto loc_1cce3e;
    eax++;
    memoryASet32(ds, ebx + 8, 0x00000000);
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1cce1f;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 8, edx);
    if ((int32_t)edx >= 0)
        goto loc_1cce1c;
    memoryASet32(ds, ebx + 8, 0xffffffff);
loc_1cce1c: // 0160:1cce1c
    eax++;
    goto loc_1cce3e;
loc_1cce1f: // 0160:1cce1f
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1cce3e;
    if (cl > 0x39)
        goto loc_1cce3e;
    ecx = memoryAGet32(ds, ebx + 8) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 8, ecx);
    goto loc_1cce1f;
loc_1cce3e: // 0160:1cce3e
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl < 0x4e)
        goto loc_1cce63;
    if (cl <= 0x4e)
        goto loc_1ccea0;
    if (cl < 0x6c)
        goto loc_1cce5a;
    if (cl <= 0x6c)
        goto loc_1cce73;
    if (cl == 0x77)
        goto loc_1cce73;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce5a: // 0160:1cce5a
    if (cl == 0x68)
        goto loc_1cce81;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce63: // 0160:1cce63
    if (cl < 0x46)
        goto loc_1cceab;
    if (cl <= 0x46)
        goto loc_1cce9a;
    if (cl == 0x4c)
        goto loc_1cce90;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce73: // 0160:1cce73
    dl = memoryAGet(ds, ebx + 20);
    dl |= 0x20;
    eax++;
    memoryASet(ds, ebx + 20, dl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce81: // 0160:1cce81
    cl = memoryAGet(ds, ebx + 20);
    cl |= 0x10;
    eax = edx;
    memoryASet(ds, ebx + 20, cl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce90: // 0160:1cce90
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x40);
loc_1cce94: // 0160:1cce94
    eax = edx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1cce9a: // 0160:1cce9a
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x80);
    goto loc_1cce94;
loc_1ccea0: // 0160:1ccea0
    ch = memoryAGet(ds, ebx + 20);
    ch |= 0x40;
    eax = edx;
    memoryASet(ds, ebx + 20, ch);
loc_1cceab: // 0160:1cceab
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cceaf() // 0160:1cceaf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    memoryASet(ds, edx + 20, 0x00);
loc_1cceb5: // 0160:1cceb5
    bl = memoryAGet(ds, eax);
    if (bl != 0x2d)
        goto loc_1ccec2;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x08);
    goto loc_1ccf04;
loc_1ccec2: // 0160:1ccec2
    if (bl != 0x23)
        goto loc_1ccecd;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x01);
    goto loc_1ccf04;
loc_1ccecd: // 0160:1ccecd
    if (bl != 0x2b)
        goto loc_1ccee5;
    ch = memoryAGet(ds, edx + 20);
    ch |= 0x04;
    bl = ch;
    memoryASet(ds, edx + 20, ch);
    bl &= 0xfd;
    memoryASet(ds, edx + 20, bl);
    goto loc_1ccf04;
loc_1ccee5: // 0160:1ccee5
    if (bl != 0x20)
        goto loc_1ccefc;
    bh = memoryAGet(ds, edx + 20);
    if (bh & 0x04)
        goto loc_1ccf04;
    cl = bh;
    cl |= 0x02;
    memoryASet(ds, edx + 20, cl);
    goto loc_1ccf04;
loc_1ccefc: // 0160:1ccefc
    if (bl != 0x30)
        goto loc_1ccf07;
    memoryASet(ds, edx + 22, bl);
loc_1ccf04: // 0160:1ccf04
    eax++;
    goto loc_1cceb5;
loc_1ccf07: // 0160:1ccf07
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ccf0a() // 0160:1ccf0a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    esi = edx;
    edi = ebx;
    edx = eax;
    eax = 0;
loc_1ccf16: // 0160:1ccf16
    es = esi;
    ebx = edx;
    cl = memoryAGet(es, ebx);
    edx++;
    if (!cl)
        goto loc_1ccf29;
    if (eax == edi)
        goto loc_1ccf29;
    eax++;
    goto loc_1ccf16;
loc_1ccf29: // 0160:1ccf29
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ccf2e() // 0160:1ccf2e +long
{
    esp -= 4;
    goto loc_1ccf2e;
loc_1ccf29: // 0160:1ccf29
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1ccf2e: // 0160:1ccf2e
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    ecx = edx;
    esi = ebx;
    edx = eax;
    eax = 0;
loc_1ccf3a: // 0160:1ccf3a
    es = ecx;
    ebx = edx;
    di = memoryAGet16(es, ebx);
    edx += 0x00000002;
    if (!di)
        goto loc_1ccf29;
    if (eax == esi)
        goto loc_1ccf29;
    eax++;
    goto loc_1ccf3a;
}
void sub_1ccf51() // 0160:1ccf51 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = 0x00000010;
    edi = ebp;
    sub_1cf217();
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = memoryAGet32(ds, esp);
    esi = ecx;
    edi = ebp;
    eax--;
    edx = ecx + ebp;
    ebx = eax + ebp;
    goto loc_1ccf91;
loc_1ccf89: // 0160:1ccf89
    edx--;
    esi--;
    cl = memoryAGet(ds, edx);
    eax--;
    memoryASet(ds, ebx, cl);
    ebx--;
loc_1ccf91: // 0160:1ccf91
    if (edx != edi)
        goto loc_1ccf89;
    edx = eax + ebp;
loc_1ccf98: // 0160:1ccf98
    if ((int32_t)eax < 0)
        goto loc_1ccfa3;
    eax--;
    memoryASet(ds, edx, 0x30);
    edx--;
    goto loc_1ccf98;
loc_1ccfa3: // 0160:1ccfa3
    ebp += memoryAGet32(ds, esp);
    memoryASet(ss, ebp, 0x00);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ccfb2() // 0160:1ccfb2 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    esi = ebx;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx >= 0)
        goto loc_1ccfce;
    edx = -edx;
    ecx = eax + 1;
    memoryASet(ds, eax, 0x2d);
    memoryASet32(ds, esp, edx);
loc_1ccfce: // 0160:1ccfce
    if (memoryAGet32(ds, esi + 8) != 0xffffffff)
        goto loc_1ccfdb;
    memoryASet32(ds, esi + 8, 0x00000004);
loc_1ccfdb: // 0160:1ccfdb
    ebx = 0x0000000a;
    eax = 0;
    edx = ecx;
    ax = memoryAGet16(ds, esp + 2);
    sub_1cf217();
    ebx = ecx;
loc_1ccff0: // 0160:1ccff0
    ah = memoryAGet(ds, ecx);
    edx = ecx + 1;
    if (!ah)
        goto loc_1ccffd;
    ecx = edx;
    goto loc_1ccff0;
loc_1ccffd: // 0160:1ccffd
    if (memoryAGet32(ds, esi + 8) == 0x00000000)
        goto loc_1cd02f;
    memoryASet(ds, ecx, 0x2e);
    eax = 0;
    ecx = edx;
    goto loc_1cd027;
loc_1cd00c: // 0160:1cd00c
    edx = 0;
    memoryASet16(ds, esp + 2, dx);
    edi = memoryAGet32(ds, esp);
    edx = edi * 0x0000000a;
    memoryASet32(ds, esp, edx);
    dl = memoryAGet(ds, esp + 2);
    dl += 0x30;
    eax++;
    memoryASet(ds, ecx, dl);
    ecx++;
loc_1cd027: // 0160:1cd027
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esi + 8))
        goto loc_1cd00c;
    memoryASet(ds, ecx, 0x00);
loc_1cd02f: // 0160:1cd02f
    if (!(memoryAGet(ds, esp + 1) & 0x80))
        goto loc_1cd086;
loc_1cd036: // 0160:1cd036
    if (ecx != ebx)
        goto loc_1cd06c;
    ecx = ebx + 1;
    memoryASet(ds, ebx, 0x31);
loc_1cd040: // 0160:1cd040
    dl = memoryAGet(ds, ecx);
    eax = ecx + 1;
    if (dl != 0x30)
        goto loc_1cd04e;
    ecx = eax;
    goto loc_1cd040;
loc_1cd04e: // 0160:1cd04e
    if (dl != 0x2e)
        goto loc_1cd063;
    memoryASet(ds, ecx, 0x30);
    ecx = eax + 1;
    memoryASet(ds, eax, dl);
loc_1cd05b: // 0160:1cd05b
    if (memoryAGet(ds, ecx) != 0x30)
        goto loc_1cd063;
    ecx++;
    goto loc_1cd05b;
loc_1cd063: // 0160:1cd063
    memoryASet(ds, ecx, 0x30);
    ecx++;
    memoryASet(ds, ecx, 0x00);
    goto loc_1cd086;
loc_1cd06c: // 0160:1cd06c
    ecx--;
    if (memoryAGet(ds, ecx) != 0x2e)
        goto loc_1cd073;
    ecx--;
loc_1cd073: // 0160:1cd073
    al = memoryAGet(ds, ecx);
    if (al == 0x39)
        goto loc_1cd081;
    ah = al;
    ah++;
    memoryASet(ds, ecx, ah);
    goto loc_1cd086;
loc_1cd081: // 0160:1cd081
    memoryASet(ds, ecx, 0x30);
    goto loc_1cd036;
loc_1cd086: // 0160:1cd086
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cd08d() // 0160:1cd08d +long
{
    esp -= 4;
    indirectCall(cs, memoryAGet32(ds, 0x1e4078)); // 0160:1cd08d;
    esp += 4;
}
void sub_1cd094() // 0160:1cd094 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    ebx = 0x00000001;
    eax = ds;
    ecx = edi;
    memoryASet32(ds, esp + 4, ebx);
    es = eax;
    al = memoryAGet(ds, esi + 21);
    memoryASet32(ds, esi + 12, 0x00000000);
    if (al < 0x69)
        goto loc_1cd0d5;
    if (al <= 0x69)
        goto loc_1cd115;
    if (al < 0x75)
        goto loc_1cd0d1;
    if (al <= 0x75)
        goto loc_1cd0e1;
    flags.zero = al == 0x78;
loc_1cd0cd: // 0160:1cd0cd
    if (flags.zero)
        goto loc_1cd0e1;
    goto loc_1cd11f;
loc_1cd0d1: // 0160:1cd0d1
    flags.zero = al == 0x6f;
    goto loc_1cd0cd;
loc_1cd0d5: // 0160:1cd0d5
    if (al < 0x58)
        goto loc_1cd11f;
    if (al <= 0x58)
        goto loc_1cd0e1;
    if (al == 0x64)
        goto loc_1cd115;
    goto loc_1cd11f;
loc_1cd0e1: // 0160:1cd0e1
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x20))
        goto loc_1cd0f5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ebp = memoryAGet32(ds, ebx + -4);
    goto loc_1cd111;
loc_1cd0f5: // 0160:1cd0f5
    if (!(ah & 0x10))
        goto loc_1cd107;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebp = memoryAGet16(ds, eax + -4);
    goto loc_1cd111;
loc_1cd107: // 0160:1cd107
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    ebp = memoryAGet32(ss, ebp + -4);
loc_1cd111: // 0160:1cd111
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
loc_1cd115: // 0160:1cd115
    if (memoryAGet32(ds, esi + 8) == 0xffffffff)
        goto loc_1cd11f;
    memoryASet(ds, esi + 22, 0x20);
loc_1cd11f: // 0160:1cd11f
    al = memoryAGet(ds, esi + 21);
    ebx = 0x0000000a;
    if (al < 0x65)
        goto loc_1cd184;
    if (al <= 0x65)
        goto loc_1cd1f5;
    if (al < 0x6f)
        goto loc_1cd16d;
    if (al <= 0x6f)
        goto loc_1cd209;
    if (al < 0x73)
        goto loc_1cd160;
    if (al <= 0x73)
        goto loc_1cd284;
    if (al < 0x75)
        goto loc_1cd418;
    if (al <= 0x75)
        goto loc_1cd34d;
    if (al == 0x78)
        goto loc_1cd330;
    goto loc_1cd418;
loc_1cd160: // 0160:1cd160
    if (al == 0x70)
        goto loc_1cd36c;
    goto loc_1cd418;
loc_1cd16d: // 0160:1cd16d
    if (al < 0x67)
        goto loc_1cd1cb;
    if (al <= 0x67)
        goto loc_1cd1f5;
    if (al == 0x69)
        goto loc_1cd244;
    goto loc_1cd418;
loc_1cd184: // 0160:1cd184
    if (al < 0x50)
        goto loc_1cd1b8;
    if (al <= 0x50)
        goto loc_1cd36c;
    if (al < 0x58)
        goto loc_1cd1ab;
    if (al <= 0x58)
        goto loc_1cd330;
    if (al < 0x63)
        goto loc_1cd418;
    if (al <= 0x63)
        goto loc_1cd3eb;
    goto loc_1cd244;
loc_1cd1ab: // 0160:1cd1ab
    if (al == 0x53)
        goto loc_1cd284;
    goto loc_1cd418;
loc_1cd1b8: // 0160:1cd1b8
    if (al < 0x46)
        goto loc_1cd1c7;
    if (al <= 0x46)
        goto loc_1cd1cb;
    flags.zero = al == 0x47;
loc_1cd1c0: // 0160:1cd1c0
    if (flags.zero)
        goto loc_1cd1f5;
    goto loc_1cd418;
loc_1cd1c7: // 0160:1cd1c7
    flags.zero = al == 0x45;
    goto loc_1cd1c0;
loc_1cd1cb: // 0160:1cd1cb
    if (!(memoryAGet(ds, esi + 20) & 0x10))
        goto loc_1cd1f5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    eax = edi;
    edx = memoryAGet32(ds, ebx + -4);
    ebx = esi;
    sub_1ccfb2();
    ebx = 0xffffffff;
    eax = ds;
    edx = ds;
    es = eax;
    eax = edi;
    ecx = edi;
    goto loc_1cd23a;
loc_1cd1f5: // 0160:1cd1f5
    eax = edi;
    ebx = esi;
    sub_1cd08d();
    ebx = 0xffffffff;
    es = edx;
    ecx = eax;
    goto loc_1cd23a;
loc_1cd209: // 0160:1cd209
    al = memoryAGet(ds, esi + 20);
    ebx = 0x00000008;
    if (!(al & 0x01))
        goto loc_1cd219;
    memoryASet(ds, edi, 0x30);
    edi++;
loc_1cd219: // 0160:1cd219
    eax = ebp;
    edx = edi;
    sub_1cf2b2();
loc_1cd222: // 0160:1cd222
    if (memoryAGet32(ds, esi + 8) != 0x00000000)
        goto loc_1cd231;
    if (memoryAGet(ds, edi) != 0x30)
        goto loc_1cd231;
    memoryASet(es, ecx, 0x00);
loc_1cd231: // 0160:1cd231
    ebx = 0xffffffff;
    edx = es;
    eax = ecx;
loc_1cd23a: // 0160:1cd23a
    sub_1ccf0a();
    goto loc_1cd442;
loc_1cd244: // 0160:1cd244
    al = memoryAGet(ds, esi + 20);
    if (!(al & 0x20))
        goto loc_1cd25e;
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
loc_1cd257: // 0160:1cd257
    sub_1cf2b2();
    goto loc_1cd222;
loc_1cd25e: // 0160:1cd25e
    if (!(al & 0x10))
        goto loc_1cd271;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    edx = edi;
    eax = (short)memoryAGet16(ds, eax + -4);
    goto loc_1cd257;
loc_1cd271: // 0160:1cd271
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1cf217();
    goto loc_1cd222;
loc_1cd284: // 0160:1cd284
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x80))
        goto loc_1cd2ae;
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000008;
    memoryASet32(ds, edx, ecx);
    dx = memoryAGet16(ds, ecx + -4);
    ecx = memoryAGet32(ds, ecx + -8);
    if (ecx)
        goto loc_1cd2a3;
    if (!dx)
        goto loc_1cd2a7;
loc_1cd2a3: // 0160:1cd2a3
    es = edx;
    goto loc_1cd2da;
loc_1cd2a7: // 0160:1cd2a7
    eax = ds;
    ecx = memoryAGet32(ds, esp);
    goto loc_1cd2d8;
loc_1cd2ae: // 0160:1cd2ae
    if (!(ah & 0x40))
        goto loc_1cd2c5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ecx = memoryAGet32(ds, ebx + -4);
    if (!ecx)
        goto loc_1cd2a7;
loc_1cd2c1: // 0160:1cd2c1
    eax = ds;
    goto loc_1cd2d8;
loc_1cd2c5: // 0160:1cd2c5
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx)
        goto loc_1cd2c1;
    eax = ds;
    ecx = memoryAGet32(ds, esp);
loc_1cd2d8: // 0160:1cd2d8
    es = eax;
loc_1cd2da: // 0160:1cd2da
    bh = memoryAGet(ds, esi + 20);
    al = memoryAGet(ds, esi + 21);
    edi = 0;
    bh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, bh);
    if (al != 0x53)
        goto loc_1cd30e;
    if (!(bh & 0x20))
        goto loc_1cd303;
    eax = 0;
    ax = memoryAGet16(es, ecx);
    ecx += 0x00000002;
    goto loc_1cd442;
loc_1cd303: // 0160:1cd303
    eax = 0;
    al = memoryAGet(es, ecx);
    ecx++;
    goto loc_1cd442;
loc_1cd30e: // 0160:1cd30e
    if (!(bh & 0x20))
        goto loc_1cd324;
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    sub_1ccf2e();
    goto loc_1cd442;
loc_1cd324: // 0160:1cd324
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    goto loc_1cd23a;
loc_1cd330: // 0160:1cd330
    if (!(memoryAGet(ds, esi + 20) & 0x01))
        goto loc_1cd348;
    if (!ebp)
        goto loc_1cd348;
    memoryASet(ds, esi + 23, 0x30);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, esi + 25, 0x00);
    memoryASet(ds, esi + 24, al);
loc_1cd348: // 0160:1cd348
    ebx = 0x00000010;
loc_1cd34d: // 0160:1cd34d
    eax = ebp;
    edx = edi;
    sub_1cf269();
    if (memoryAGet(ds, esi + 21) != 0x58)
        goto loc_1cd222;
    eax = edi;
    sub_1cd4dd();
    goto loc_1cd222;
loc_1cd36c: // 0160:1cd36c
    if (memoryAGet32(ds, esi + 4) != 0x00000000)
        goto loc_1cd388;
    if (!(memoryAGet(ds, esi + 20) & 0x80))
        goto loc_1cd381;
    memoryASet32(ds, esi + 4, 0x0000000d);
    goto loc_1cd388;
loc_1cd381: // 0160:1cd381
    memoryASet32(ds, esi + 4, 0x00000008);
loc_1cd388: // 0160:1cd388
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    bl = memoryAGet(ds, esi + 20);
    ebp = memoryAGet32(ds, eax + -4);
    if (!(bl & 0x80))
        goto loc_1cd3c7;
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebx = 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    edx = edi;
    eax &= 0x0000ffff;
    sub_1ccf51();
    ebx = 0x00000008;
    edx = edi + 5;
    eax = ebp;
    memoryASet(ds, edi + 4, 0x3a);
    goto loc_1cd3d0;
loc_1cd3c7: // 0160:1cd3c7
    ebx = 0x00000008;
    eax = ebp;
    edx = edi;
loc_1cd3d0: // 0160:1cd3d0
    sub_1ccf51();
    if (memoryAGet(ds, esi + 21) != 0x50)
        goto loc_1cd231;
    eax = edi;
    sub_1cd4dd();
    goto loc_1cd231;
loc_1cd3eb: // 0160:1cd3eb
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    al = memoryAGet(ds, ebx + -4);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    eax = 0x00000001;
    dh = memoryAGet(ds, esi + 20);
    edi = 0;
    dh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, dh);
    goto loc_1cd442;
loc_1cd418: // 0160:1cd418
    memoryASet32(ds, esi + 4, 0x00000000);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    al = memoryAGet(ds, esi + 20);
    edi = 0;
    al &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, al);
    eax = 0x00000001;
loc_1cd442: // 0160:1cd442
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1cd488;
    dl = memoryAGet(es, ecx);
    if (dl != 0x2d)
        goto loc_1cd45c;
    ecx++;
    memoryASet(ds, esi + 24, 0x00);
    eax--;
    memoryASet(ds, esi + 23, dl);
    goto loc_1cd477;
loc_1cd45c: // 0160:1cd45c
    dh = memoryAGet(ds, esi + 20);
    if (!(dh & 0x02))
        goto loc_1cd46a;
    memoryASet(ds, esi + 23, 0x20);
    goto loc_1cd473;
loc_1cd46a: // 0160:1cd46a
    if (!(dh & 0x04))
        goto loc_1cd477;
    memoryASet(ds, esi + 23, 0x2b);
loc_1cd473: // 0160:1cd473
    memoryASet(ds, esi + 24, 0x00);
loc_1cd477: // 0160:1cd477
    edx = memoryAGet32(ds, esi + 8);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1cd483;
    memoryASet32(ds, esi + 8, eax);
    goto loc_1cd488;
loc_1cd483: // 0160:1cd483
    edx -= eax;
    memoryASet32(ds, esi + 12, edx);
loc_1cd488: // 0160:1cd488
    if (memoryAGet(ds, esi + 22) != 0x2a)
        goto loc_1cd49b;
    dl = memoryAGet(ds, esi + 20);
    memoryASet(ds, esi + 23, 0x00);
    dl &= 0xf9;
    memoryASet(ds, esi + 20, dl);
loc_1cd49b: // 0160:1cd49b
    ebx = memoryAGet32(ds, esi + 8);
    if (ebx == 0xffffffff)
        goto loc_1cd4a7;
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1cd4b0;
loc_1cd4a7: // 0160:1cd4a7
    if (memoryAGet(ds, esi + 21) == 0x63)
        goto loc_1cd4b0;
    memoryASet32(ds, esi + 8, eax);
loc_1cd4b0: // 0160:1cd4b0
    ebx = 0xffffffff;
    eax = esi + 23;
    edx = ds;
    sub_1ccf0a();
    ebp = memoryAGet32(ds, esi + 8);
    edx = memoryAGet32(ds, esi + 12);
    eax += ebp;
    ebx = memoryAGet32(ds, esi + 4);
    eax += edx;
    edx = es;
    ebx -= eax;
    eax = ecx;
    memoryASet32(ds, esi + 4, ebx);
    esp += 0x00000008;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cd4dd() // 0160:1cd4dd +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
loc_1cd4e0: // 0160:1cd4e0
    if (memoryAGet(ds, edx) == 0x00)
        goto loc_1cd4f3;
    eax = 0;
    al = memoryAGet(ds, edx);
    sub_1cf2cd();
    memoryASet(ds, edx, al);
    edx++;
    goto loc_1cd4e0;
loc_1cd4f3: // 0160:1cd4f3
    edx = pop32();
    esp += 4;
}
void sub_1cd4f5() // 0160:1cd4f5 +long
{
    esp -= 4;
    push32(ecx);
    ecx = memoryAGet32(ds, 0x1e405c);
    sub_1cf2db();
    ecx = pop32();
    esp += 4;
}
void sub_1cd503() // 0160:1cd503 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 4, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 6);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 5);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 4);
    memoryASet32(ds, ebx + 12, eax);
    ah = 0x2c;
    interrupt(0x21);
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 3);
    edx = 0;
    memoryASet32(ds, ebx + 8, eax);
    eax = 0;
    dl = memoryAGet(ds, esp);
    al = memoryAGet(ds, esp + 2);
    esi = edx;
    memoryASet32(ds, ebx + 4, eax);
    eax = 0;
    esi <<= 2;
    al = memoryAGet(ds, esp + 1);
    esi += edx;
    memoryASet32(ds, ebx, eax);
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 8, ecx);
    ah = memoryAGet(ds, esp + 4);
    al = memoryAGet(ds, esp + 8);
    esi += esi;
    if (al == ah)
        goto loc_1cd5b5;
    if (memoryAGet32(ds, ebx + 8) == 0x00000017)
        goto loc_1cd5b5;
    eax = 0;
    al = memoryAGet(ds, esp + 10);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 9);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 8);
    memoryASet32(ds, ebx + 12, eax);
loc_1cd5b5: // 0160:1cd5b5
    eax = esi;
    memoryASet32(ds, ebx + 32, 0xffffffff);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cd5c6() // 0160:1cd5c6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = 0x0000000c;
    edx = memoryAGet32(ss, ebp + 16);
    eax = memoryAGet32(ds, eax + 16);
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x001d63b8;
    esi = memoryAGet32(ss, ebp + 20);
    edi = edx;
    if ((int32_t)esi >= (int32_t)0xf4fb7ea1)
        goto loc_1cd5fa;
loc_1cd5f0: // 0160:1cd5f0
    eax = 0xffffffff;
    goto loc_1cd713;
loc_1cd5fa: // 0160:1cd5fa
    eax = memoryAGet32(ss, ebp + 16);
    edx = eax;
    ecx = 0x0000000c;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi += eax;
loc_1cd60b: // 0160:1cd60b
    if ((int32_t)edi >= 0)
        goto loc_1cd615;
    esi--;
    edi += 0x0000000c;
    goto loc_1cd60b;
loc_1cd615: // 0160:1cd615
    if ((int32_t)esi < 0)
        goto loc_1cd5f0;
    eax = esi + 1900;
    sub_1cf40c();
    if (!eax)
        goto loc_1cd62d;
    ebx = 0x001d63d2;
loc_1cd62d: // 0160:1cd62d
    eax = esi;
    eax <<= 3;
    eax += esi;
    eax <<= 3;
    eax += esi;
    ecx = esi + 3;
    edx = eax;
    eax <<= 2;
    ecx = sar32(ecx, 0x02);
    eax += edx;
    edx = eax + ecx;
    eax = (short)memoryAGet16(ds, ebx + edi*2);
    edi = memoryAGet32(ss, ebp + 12);
    eax += edx;
    edi += eax;
    edi--;
    if (!esi)
        goto loc_1cd65a;
    edi--;
loc_1cd65a: // 0160:1cd65a
    edx = memoryAGet32(ss, ebp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 2;
    edx = memoryAGet32(ss, ebp + 4);
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    esi = memoryAGet32(ss, ebp);
    eax <<= 2;
    esi += eax;
loc_1cd67b: // 0160:1cd67b
    if ((int32_t)esi >= 0)
        goto loc_1cd688;
    edi--;
    esi += 0x00015180;
    goto loc_1cd67b;
loc_1cd688: // 0160:1cd688
    eax = edi;
    edx = esi;
    ecx = ebp;
    ebx = 0;
    sub_1cf837();
    sub_1cf976();
    edx = memoryAGet32(ds, 0x1e40c8);
    ebx = memoryAGet32(ss, ebp + 32);
    esi += edx;
    if ((int32_t)ebx >= 0)
        goto loc_1cd6b0;
    eax = ebp;
    sub_1cf554();
loc_1cd6b0: // 0160:1cd6b0
    if ((int32_t)memoryAGet32(ss, ebp + 32) <= (int32_t)0x00000000)
        goto loc_1cd6bc;
    esi -= memoryAGet32(ds, 0x1e40cc);
loc_1cd6bc: // 0160:1cd6bc
    if ((int32_t)esi >= 0)
        goto loc_1cd6c9;
    edi--;
    esi += 0x00015180;
    goto loc_1cd6bc;
loc_1cd6c9: // 0160:1cd6c9
    if ((int32_t)edi < (int32_t)0x000063de)
        goto loc_1cd5f0;
    if (edi != 0x000063de)
        goto loc_1cd6f3;
    eax = memoryAGet32(ds, 0x1e40c8);
    esi -= 0x00015180;
    if ((int32_t)eax <= 0)
        goto loc_1cd5f0;
    if ((int32_t)esi >= 0)
        goto loc_1cd711;
    goto loc_1cd5f0;
loc_1cd6f3: // 0160:1cd6f3
    eax = edi + -25567;
    edi = eax;
    edi <<= 3;
    edi -= eax;
    edi <<= 5;
    edi += eax;
    edi <<= 7;
    eax = edi;
    edi <<= 2;
    edi -= eax;
    esi += edi;
loc_1cd711: // 0160:1cd711
    eax = esi;
loc_1cd713: // 0160:1cd713
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cd71a() // 0160:1cd71a +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    ebp = esp;
    edx = memoryAGet32(ds, 0x1e3dd4);
    edx += 0x00000003;
    dl &= 0xfc;
    sub_1cfc46();
    if (edx >= eax)
        goto loc_1cd73b;
    eax = edx;
    esp -= eax;
    eax = esp;
    goto loc_1cd73d;
loc_1cd73b: // 0160:1cd73b
    eax = 0;
loc_1cd73d: // 0160:1cd73d
    edx = memoryAGet32(ds, 0x1e3dd4);
    eax += edx;
    memoryASet32(ds, 0x1e3dd8, eax);
    sub_1cfc4f();
    edx = memoryAGet32(ds, 0x3f67b0);
    eax = memoryAGet32(ds, 0x3f67ac);
    sub_19c0a0();
    sub_1cbd41();
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1cd76a() // 0160:1cd76a +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push32(edx);
    push(es);
    edx = eax;
loc_1cd771: // 0160:1cd771
    esi = 0x001e4250;
    edi = 0x001e427a;
    ebx = edi;
    al = dl;
loc_1cd781: // 0160:1cd781
    if (esi >= edi)
        goto loc_1cd799;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1cd794;
    if (memoryAGet(ds, esi + 1) > al)
        goto loc_1cd794;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1cd794: // 0160:1cd794
    esi += 0x00000006;
    goto loc_1cd781;
loc_1cd799: // 0160:1cd799
    if (ebx == edi)
        goto loc_1cd7af;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1cd7aa;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x1cbd14: sub_1cbd14(); break;
        case 0x1cdabf: sub_1cdabf(); break;
        case 0x1d3380: sub_1d3380(); break;
        case 0x1d33c8: sub_1d33c8(); break;
        case 0x1d31b8: sub_1d31b8(); break;
        case 0x1ce597: sub_1ce597(); break;
        case 0x1cd805: sub_1cd805(); break;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:1cd7a7");
    }
    edx = pop32();
loc_1cd7aa: // 0160:1cd7aa
    memoryASet(ds, ebx, 0x02);
    goto loc_1cd771;
loc_1cd7af: // 0160:1cd7af
    es = pop();
    edx = pop32();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cd7b5() // 0160:1cd7b5 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push(es);
    dh = dl;
    dl = al;
loc_1cd7bd: // 0160:1cd7bd
    esi = 0x001e427a;
    edi = 0x001e4286;
    ebx = edi;
    al = dl;
loc_1cd7cd: // 0160:1cd7cd
    if (esi >= edi)
        goto loc_1cd7e5;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1cd7e0;
    if (al > memoryAGet(ds, esi + 1))
        goto loc_1cd7e0;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1cd7e0: // 0160:1cd7e0
    esi += 0x00000006;
    goto loc_1cd7cd;
loc_1cd7e5: // 0160:1cd7e5
    if (ebx == edi)
        goto loc_1cd7ff;
    if (al > dh)
        goto loc_1cd7fa;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1cd7fa;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x1d3230: sub_1d3230(); break;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:1cd7f7");
    }
    edx = pop32();
loc_1cd7fa: // 0160:1cd7fa
    memoryASet(ds, ebx, 0x02);
    goto loc_1cd7bd;
loc_1cd7ff: // 0160:1cd7ff
    es = pop();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cd805() // 0160:1cd805 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x001cfc5a;
    ebx = 0x001cfd7f;
    memoryASet32(ds, 0x1e4078, edx);
    memoryASet32(ds, 0x1e407c, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cd820() // 0160:1cd820 +long
{
    return;
    esp -= 4;
    push(es);
    push32(ecx);
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:1cd824 fninit ");
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    if (ah == 0x03)
        goto loc_1cd831;
    ebp++;
loc_1cd831: // 0160:1cd831
    flags.zero = !ebp;
    flags.sign = (int32_t)ebp < 0;
    if (flags.zero)
        goto loc_1cd83a;
    sub_1cd850();
    stop("propagate sign flag", "0160:1cd835");
loc_1cd83a: // 0160:1cd83a
    stop("disassembly failed at 160:1cd83b fninit ");
    fldcw(memoryAGet16(ds, 0x1e419c));
    stop("disassembly failed at 160:1cd843 fldz ");
    stop("disassembly failed at 160:1cd845 fldz ");
    stop("disassembly failed at 160:1cd847 fldz ");
    stop("disassembly failed at 160:1cd849 fldz ");
    edx = pop32();
    ebx = pop32();
    ecx = pop32();
    es = pop();
    esp += 4;
}
void sub_1cd850() // 0160:1cd850 +long +returnZero
{
    esp -= 4;
    memoryASet(ds, 0x1e3d9c, 0x03);
    memoryASet(ds, 0x1e3e44, 0x01);
    stop("disassembly failed at 160:1cd85e smsw word ptr [0x1e3e42]");
    memoryASet16(ds, 0x1e3e42, memoryAGet16(ds, 0x1e3e42) & 0x0006);
    esp -= 0x00000008;
    stop("disassembly failed at 160:1cd871 sidt [esp]");
    ebx = memoryAGet32(ds, esp + 2);
    ebx += 0x00000038;
    esp += 0x00000008;
    if (memoryAGet(ds, 0x1e3dec) == 0x00)
        goto loc_1cd8a2;
    sub_1cd91b();
    es = memoryAGet16(ds, 0x1e3d9a);
    memoryASet32(es, ebx, edx);
    memoryASet32(es, ebx + 4, ecx);
    sub_1cd985();
    goto loc_1cd91a;
loc_1cd8a2: // 0160:1cd8a2
    if (memoryAGet(ds, 0x1e3dea) != 0x00)
        goto loc_1cd8c6;
    ax = 0x2507;
    push(ds);
    cx = cs;
    ds = ecx;
    edx = 0x1d0178;
    interrupt(0x21);
    ds = pop();
    al = 0x04;
    ah = 0xf3;
    flags.zero = stop("nosave");
    interrupt(0x21);
    goto loc_1cd91a;
loc_1cd8c6: // 0160:1cd8c6
    if (memoryAGet(ds, 0x1e3dea) != 0x09)
        goto loc_1cd8ee;
    sub_1cd91b();
    memoryASet32(ds, ebx, edx);
    memoryASet32(ds, ebx + 4, ecx);
    eax = 0x00000e02;
    ebx = 0x00000004;
    ecx = memoryAGet32(ds, 0x1e3d94);
    indirectCall(cs, memoryAGet32(ds, ecx + 48)); // 0160:1cd8e9;
    stop("callee must return zero", "0160:1cd8e9");
    goto loc_1cd91a;
loc_1cd8ee: // 0160:1cd8ee
    if (memoryAGet(ds, 0x1e3dea) != 0x01)
        goto loc_1cd907;
    dx = memoryAGet16(ds, 0x1e3d98);
    eax = 0;
    sub_1d2fb6();
    goto loc_1cd91a;
loc_1cd907: // 0160:1cd907
    dx = 0;
    eax = 0;
    sub_1d2fb6();
    flags.zero = al == 0x01;
    if (flags.zero)
        goto loc_1cd91a;
    sub_1cd938();
loc_1cd91a: // 0160:1cd91a
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1cd91b() // 0160:1cd91b +long
{
    esp -= 4;
    ecx = 0x1d0178;
    dx = cs;
    edx <<= 16;
    dx = cx;
    cx = cs;
    cl &= 0x03;
    cx <<= 13;
    ch |= 0x8e;
    esp += 4;
}
void sub_1cd938() // 0160:1cd938 +long +returnZero
{
    bool temp_cond0;

    esp -= 4;
    cl = 0x07;
    ax = 0x2502;
    interrupt(0x21);
    memoryASet32(ds, 0x1e3e3c, ebx);
    memoryASet16(ds, 0x1e3e40, es);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    cl = 0x07;
    ax = 0x2504;
    push(ds);
    push(cs);
    ds = pop();
    if (stop("xxx multi precond"))
        goto loc_1cd96f;
    edx = 0x1d0108;
    interrupt(0x21);
    ds = pop();
    sub_1cd985();
    goto loc_1cd984;
loc_1cd96f: // 0160:1cd96f
    edx = 0x1d0178;
    interrupt(0x21);
    ds = pop();
    ecx = cr0;
    ecx |= 0x00000004;
    flags.zero = !(ecx & 0xfffffffd);
    ecx &= 0xfffffffd;
    cr0 = ecx;
loc_1cd984: // 0160:1cd984
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1cd985() // 0160:1cd985 +long +returnZero
{
    esp -= 4;
    ebx = 0;
    edx = 0x1e3dfc;
    ax = 0x2535;
    interrupt(0x21);
    memoryASet32(ds, 0x1e3dfc, memoryAGet32(ds, 0x1e3dfc) | 0x00000004);
    memoryASet32(ds, 0x1e3dfc, memoryAGet32(ds, 0x1e3dfc) & 0xfffffffd);
    ebx++;
    interrupt(0x21);
    esp += 4;
}
void sub_1cda84() // 0160:1cda84 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet(ds, 0x1e3d9d) == 0x00)
        goto loc_1cdaa5;
    edx = 0x001cda7b;
    ebx = 0x001cda80;
    memoryASet32(ds, 0x1e41a0, edx);
    memoryASet32(ds, 0x1e41a4, ebx);
loc_1cdaa5: // 0160:1cdaa5
    eax = 0;
    ax = memoryAGet16(ds, 0x1e419c);
    sub_1d30da();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cdabf() // 0160:1cdabf +long
{
    return;
    esp -= 4;
    push32(edx);
    ah = memoryAGet(ds, 0x1e3d9c);
    if (ah)
        goto loc_1cdafd;
    memoryASet(ds, 0x1e3d9d, ah);
    eax = 0;
    push32(eax);
    stop("disassembly failed at 160:1cdad3 fninit ");
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    al = ah;
    dl = 0;
    if (al != 0x03)
        goto loc_1cdae8;
    sub_1cda84();
    dl = al;
loc_1cdae8: // 0160:1cdae8
    if (memoryAGet(ds, 0x1e3de8) != 0x00)
        goto loc_1cdafd;
    memoryASet(ds, 0x1e3d9c, dl);
    memoryASet(ds, 0x1e3d9d, dl);
loc_1cdafd: // 0160:1cdafd
    edx = pop32();
    esp += 4;
}
void sub_1cdaff() // 0160:1cdaff +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    eax = edx;
    edx = memoryAGet32(ds, ebx);
    sub_1ce474();
    memoryASet32(ds, ebx + 16, memoryAGet32(ds, ebx + 16) + 1);
    ebx = pop32();
    esp += 4;
}
void sub_1cdb10() // 0160:1cdb10 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = memoryAGet32(ds, eax + 12);
    ah = memoryAGet(ds, eax + 12);
    ecx = memoryAGet32(ds, esi + 8);
    ah &= 0xcf;
    ebp &= 0x00000030;
    memoryASet(ds, esi + 12, ah);
    if (ecx)
        goto loc_1cdb33;
    eax = esi;
    sub_1ce0aa();
loc_1cdb33: // 0160:1cdb33
    cl = memoryAGet(ds, esi + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_1cdb51;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ds, esi + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ds, esi + 13, al);
loc_1cdb51: // 0160:1cdb51
    ecx = 0x001cdaff;
    eax = esi;
    sub_1ccafb();
    edx = eax;
    if (!edi)
        goto loc_1cdb7b;
    ah = memoryAGet(ds, esi + 13);
    ah &= 0xfa;
    bl = ah;
    memoryASet(ds, esi + 13, ah);
    bl |= 0x04;
    eax = esi;
    memoryASet(ds, esi + 13, bl);
    sub_1cdf5c();
loc_1cdb7b: // 0160:1cdb7b
    if (!(memoryAGet(ds, esi + 12) & 0x20))
        goto loc_1cdb86;
    edx = 0xffffffff;
loc_1cdb86: // 0160:1cdb86
    edi = memoryAGet32(ds, esi + 12);
    edi |= ebp;
    eax = edx;
    memoryASet32(ds, esi + 12, edi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cdb95() // 0160:1cdb95 +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_1cdba2;
    if ((int32_t)eax > (int32_t)0x0000005a)
        goto loc_1cdba2;
    eax += 0x00000020;
loc_1cdba2: // 0160:1cdba2
    esp += 4;
    return;
}
void sub_1cdba8() // 0160:1cdba8 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1d3101();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1cdbcb() // 0160:1cdbcb +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1d3107();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1cdc02() // 0160:1cdc02 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    esi = memoryAGet32(ds, esp + 36);
loc_1cdc0e: // 0160:1cdc0e
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1cdc16;
    esi++;
    goto loc_1cdc0e;
loc_1cdc16: // 0160:1cdc16
    eax = memoryAGet32(ds, esp + 40);
    eax &= 0x00000083;
    memoryASet32(ds, esp, eax);
    dl = memoryAGet(ds, esp + 44);
    al = memoryAGet(ds, esp);
    al |= dl;
    edx = esi;
    edi = 0xffffffff;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1cdc49;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1cdc49: // 0160:1cdc49
    dh = memoryAGet(ds, esp + 40);
    if (!(dh & 0x03))
        goto loc_1cdcc3;
    if (edi == 0xffffffff)
        goto loc_1cdcc3;
    eax = edi;
    sub_1d310d();
    if (eax)
        goto loc_1cdcc3;
    if (!(memoryAGet(ds, esp + 41) & 0x04))
        goto loc_1cdc8b;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    eax = 0x00000007;
    sub_1cdba8();
    eax = 0xffffffff;
    goto loc_1cddbe;
loc_1cdc8b: // 0160:1cdc8b
    if (!(dh & 0x40))
        goto loc_1cdcc3;
    edx = esp + 8;
    ebx = edi;
    ecx = 0;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax >= 0)
        goto loc_1cdcc3;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
loc_1cdcb2: // 0160:1cdcb2
    eax = 0;
    ax = memoryAGet16(ds, esp + 4);
    sub_1ce60d();
    goto loc_1cddbe;
loc_1cdcc3: // 0160:1cdcc3
    if (edi != 0xffffffff)
        goto loc_1cdd51;
    if (!(memoryAGet(ds, esp + 40) & 0x20))
        goto loc_1cdcb2;
    if (memoryAGet16(ds, esp + 4) != 0x0002)
        goto loc_1cdcb2;
    eax = esp + 48;
    eax += 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    if (eax)
        goto loc_1cdcee;
    eax = 0x00000180;
loc_1cdcee: // 0160:1cdcee
    eax ^= memoryAGet32(ds, 0x1e41a8);
    ecx = 0;
    if (al & 0x80)
        goto loc_1cdcff;
    ecx = 0x00000001;
loc_1cdcff: // 0160:1cdcff
    edx = esi;
    ecx &= 0x000000ff;
    ah = 0x3c;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1cdcb2;
    ebx = memoryAGet32(ds, esp + 4);
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1cdcb2;
    al = memoryAGet(ds, esp);
    ch = memoryAGet(ds, esp + 44);
    edx = esi;
    al |= ch;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1cdcb2;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1cdd51: // 0160:1cdd51
    eax = edi;
    sub_1d312b();
    al &= 0x3c;
    edx = eax;
    eax = edi;
    sub_1d310d();
    if (!eax)
        goto loc_1cdd6a;
    dh |= 0x20;
loc_1cdd6a: // 0160:1cdd6a
    memoryASet(ds, esp, memoryAGet(ds, esp) & 0x7f);
    if (memoryAGet32(ds, esp) != 0x00000002)
        goto loc_1cdd77;
    dl |= 0x03;
loc_1cdd77: // 0160:1cdd77
    if (memoryAGet32(ds, esp) != 0x00000000)
        goto loc_1cdd80;
    dl |= 0x01;
loc_1cdd80: // 0160:1cdd80
    if (memoryAGet32(ds, esp) != 0x00000001)
        goto loc_1cdd89;
    dl |= 0x02;
loc_1cdd89: // 0160:1cdd89
    if (!(memoryAGet(ds, esp + 40) & 0x10))
        goto loc_1cdd93;
    dl |= 0x80;
loc_1cdd93: // 0160:1cdd93
    eax = edx;
    bl = memoryAGet(ds, esp + 41);
    al |= 0x40;
    if (!(bl & 0x03))
        goto loc_1cdda7;
    if (!(bl & 0x02))
        goto loc_1cddb5;
    goto loc_1cddb3;
loc_1cdda7: // 0160:1cdda7
    if (memoryAGet32(ds, 0x1e4051) != 0x00000200)
        goto loc_1cddb5;
loc_1cddb3: // 0160:1cddb3
    edx = eax;
loc_1cddb5: // 0160:1cddb5
    eax = edi;
    sub_1d3180();
    eax = edi;
loc_1cddbe: // 0160:1cddbe
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cde2c() // 0160:1cde2c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = memoryAGet32(ds, 0x3f6778);
    if (!esi)
        goto loc_1cde54;
    ecx = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, ecx + 12);
    eax = memoryAGet32(ds, esi);
    edi &= 0x00004003;
    memoryASet32(ds, 0x3f6778, eax);
    di |= 0x0003;
    goto loc_1cde9d;
loc_1cde54: // 0160:1cde54
    ecx = 0x001e3e48;
    goto loc_1cde7b;
loc_1cde5b: // 0160:1cde5b
    if (memoryAGet(ds, ecx + 12) & 0x03)
        goto loc_1cde78;
    eax = 0x00000008;
    sub_1cc9a1();
    esi = eax;
    if (!eax)
        goto loc_1cdec2;
    edi = 0x00000003;
    goto loc_1cde9d;
loc_1cde78: // 0160:1cde78
    ecx += 0x0000001a;
loc_1cde7b: // 0160:1cde7b
    if (ecx < 0x001e4050)
        goto loc_1cde5b;
    eax = 0x00000022;
    edi = 0x00004003;
    sub_1cc9a1();
    ecx = eax;
    esi = eax;
    if (!eax)
        goto loc_1cdec2;
    ecx = eax + 8;
loc_1cde9d: // 0160:1cde9d
    ebx = 0x0000001a;
    eax = ecx;
    edx = 0;
    sub_1d31a0();
    memoryASet32(ds, ecx + 12, edi);
    eax = memoryAGet32(ds, 0x3f677c);
    memoryASet32(ds, esi + 4, ecx);
    memoryASet32(ds, 0x3f677c, esi);
    memoryASet32(ds, esi, eax);
    eax = ecx;
    goto loc_1cdece;
loc_1cdec2: // 0160:1cdec2
    eax = 0x00000005;
    sub_1cdba8();
    eax = 0;
loc_1cdece: // 0160:1cdece
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cded4() // 0160:1cded4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x003f677c;
loc_1cdede: // 0160:1cdede
    eax = memoryAGet32(ds, edx);
    if (!eax)
        goto loc_1cdf09;
    ecx = memoryAGet32(ds, eax + 4);
    if (ebx == ecx)
        goto loc_1cdeef;
    edx = eax;
    goto loc_1cdede;
loc_1cdeef: // 0160:1cdeef
    cl = memoryAGet(ds, ecx + 12);
    cl |= 0x03;
    memoryASet(ds, ebx + 12, cl);
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx = memoryAGet32(ds, 0x3f6778);
    memoryASet32(ds, 0x3f6778, eax);
    memoryASet32(ds, eax, edx);
loc_1cdf09: // 0160:1cdf09
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cdf2b() // 0160:1cdf2b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (memoryAGet(ds, eax + 13) & 0x20)
        goto loc_1cdf58;
    eax = memoryAGet32(ds, edx + 16);
    sub_1d310d();
    if (!eax)
        goto loc_1cdf58;
    bl = memoryAGet(ds, edx + 13);
    bl |= 0x20;
    memoryASet(ds, edx + 13, bl);
    if (bl & 0x07)
        goto loc_1cdf58;
    cl = bl;
    cl |= 0x02;
    memoryASet(ds, edx + 13, cl);
loc_1cdf58: // 0160:1cdf58
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cdf5c() // 0160:1cdf5c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1cdfc9;
    bh = memoryAGet(ds, ecx + 13);
    bh &= 0xef;
    al = memoryAGet(ds, ecx + 12);
    memoryASet(ds, ecx + 13, bh);
    if (!(al & 0x02))
        goto loc_1ce008;
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1ce008;
    ebx = memoryAGet32(ds, ecx + 4);
    edx = memoryAGet32(ds, ecx + 8);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1d3293();
    if (eax != 0xffffffff)
        goto loc_1cdfaa;
    dl = memoryAGet(ds, ecx + 12);
    dl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, dl);
    goto loc_1ce008;
loc_1cdfaa: // 0160:1cdfaa
    if (eax == memoryAGet32(ds, ecx + 4))
        goto loc_1ce008;
    eax = 0x0000000c;
    sub_1cdba8();
    ah = memoryAGet(ds, ecx + 12);
    ah |= 0x20;
    esi = 0xffffffff;
    memoryASet(ds, ecx + 12, ah);
    goto loc_1ce008;
loc_1cdfc9: // 0160:1cdfc9
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1ce008;
    dl = memoryAGet(ds, ecx + 12);
    dl &= 0xef;
    dh = memoryAGet(ds, ecx + 13);
    memoryASet(ds, ecx + 12, dl);
    if (dh & 0x20)
        goto loc_1ce008;
    eax = memoryAGet32(ds, ecx + 4);
    if (!eax)
        goto loc_1cdff8;
    edx = eax;
    ebx = 0x00000001;
    edx = -edx;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce01b();
loc_1cdff8: // 0160:1cdff8
    if (eax != 0xffffffff)
        goto loc_1ce008;
    bl = memoryAGet(ds, ecx + 12);
    bl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, bl);
loc_1ce008: // 0160:1ce008
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
    eax = esi;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce01b() // 0160:1ce01b +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    eax = ebx;
    edi = esp;
    ebx = ecx;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    memoryASet16(ss, edi, ax);
    memoryASet16(ss, edi + 2, dx);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1ce053;
    eax &= 0x0000ffff;
    sub_1ce60d();
    eax = 0xffffffff;
    goto loc_1ce056;
loc_1ce053: // 0160:1ce053
    eax = memoryAGet32(ds, esp);
loc_1ce056: // 0160:1ce056
    esp += 0x00000004;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ce05c() // 0160:1ce05c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0x00000001;
    edx = 0;
    sub_1ce01b();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce06d() // 0160:1ce06d +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x1e3dc8);
    esp += 4;
}
void sub_1ce073() // 0160:1ce073 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    ebx = eax;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_1ce093;
    eax = edx;
    edx = 0;
    sub_1d3180();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ce093: // 0160:1ce093
    eax = 0x00000004;
    sub_1cdba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce0a5()
{
  sub_1d330f();
}

void sub_1ce0aa() // 0160:1ce0aa +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = eax;
    sub_1cdf2b();
    if (memoryAGet32(ds, edx + 20) != 0x00000000)
        goto loc_1ce0df;
    ah = memoryAGet(ds, edx + 13);
    if (!(ah & 0x02))
        goto loc_1ce0ca;
    memoryASet32(ds, edx + 20, 0x00000086);
    goto loc_1ce0df;
loc_1ce0ca: // 0160:1ce0ca
    if (!(ah & 0x04))
        goto loc_1ce0d8;
    memoryASet32(ds, edx + 20, 0x00000001);
    goto loc_1ce0df;
loc_1ce0d8: // 0160:1ce0d8
    memoryASet32(ds, edx + 20, 0x00001000);
loc_1ce0df: // 0160:1ce0df
    eax = memoryAGet32(ds, edx + 20);
    sub_1cc9a1();
    memoryASet32(ds, edx + 8, eax);
    if (eax)
        goto loc_1ce10e;
    eax = edx + 24;
    cl = memoryAGet(ds, edx + 13);
    memoryASet32(ds, edx + 20, 0x00000001);
    cl &= 0xf8;
    memoryASet32(ds, edx + 8, eax);
    ch = cl;
    memoryASet(ds, edx + 13, cl);
    ch |= 0x04;
    memoryASet(ds, edx + 13, ch);
    goto loc_1ce112;
loc_1ce10e: // 0160:1ce10e
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x08);
loc_1ce112: // 0160:1ce112
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ce121() // 0160:1ce121 +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx;
    ebx = eax;
    ah = 0x3f;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1ce13e;
    eax &= 0x0000ffff;
    sub_1ce60d();
loc_1ce13e: // 0160:1ce13e
    ecx = pop32();
    esp += 4;
}
void sub_1ce1f8() // 0160:1ce1f8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    if (memoryAGet32(ds, eax + 8) != 0x00000000)
        goto loc_1ce209;
    sub_1ce0aa();
loc_1ce209: // 0160:1ce209
    ah = memoryAGet(ds, ecx + 13);
    if (!(ah & 0x20))
        goto loc_1ce220;
    if (!(ah & 0x06))
        goto loc_1ce220;
    eax = 0x00002000;
    sub_1d3333();
loc_1ce220: // 0160:1ce220
    edx = memoryAGet32(ds, ecx + 12);
    bl = memoryAGet(ds, ecx + 12);
    eax = memoryAGet32(ds, ecx + 8);
    bl &= 0xfb;
    memoryASet32(ds, ecx, eax);
    edx &= 0x00002400;
    memoryASet(ds, ecx + 12, bl);
    if (edx != 0x00002400)
        goto loc_1ce260;
    ebx = memoryAGet32(ds, ecx + 16);
    if (ebx)
        goto loc_1ce260;
    memoryASet32(ds, ecx + 4, ebx);
    sub_1d3362();
    if (eax == 0xffffffff)
        goto loc_1ce27d;
    ebx = memoryAGet32(ds, ecx);
    memoryASet(ds, ebx, al);
    memoryASet32(ds, ecx + 4, 0x00000001);
    goto loc_1ce27d;
loc_1ce260: // 0160:1ce260
    if (!(memoryAGet(ds, ecx + 13) & 0x04))
        goto loc_1ce26d;
    ebx = 0x00000001;
    goto loc_1ce270;
loc_1ce26d: // 0160:1ce26d
    ebx = memoryAGet32(ds, ecx + 20);
loc_1ce270: // 0160:1ce270
    edx = memoryAGet32(ds, ecx);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1ce121();
    memoryASet32(ds, ecx + 4, eax);
loc_1ce27d: // 0160:1ce27d
    esi = memoryAGet32(ds, ecx + 4);
    if ((int32_t)esi > 0)
        goto loc_1ce29b;
    if (esi)
        goto loc_1ce28c;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x10);
    goto loc_1ce29b;
loc_1ce28c: // 0160:1ce28c
    al = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx + 4, 0x00000000);
    al |= 0x20;
    memoryASet(ds, ecx + 12, al);
loc_1ce29b: // 0160:1ce29b
    eax = memoryAGet32(ds, ecx + 4);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce2a3() // 0160:1ce2a3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000018;
    push32(eax);
    push32(edx);
    push32(ebx);
    sub_1d312b();
    edx = eax;
    memoryASet32(ss, ebp + -24, eax);
    if (eax)
        goto loc_1ce2d1;
    eax = 0x00000004;
loc_1ce2c2: // 0160:1ce2c2
    sub_1cdba8();
    eax = 0xffffffff;
    goto loc_1ce46d;
loc_1ce2d1: // 0160:1ce2d1
    if (al & 0x02)
        goto loc_1ce2dc;
    eax = 0x00000006;
    goto loc_1ce2c2;
loc_1ce2dc: // 0160:1ce2dc
    if (!(al & 0x80))
        goto loc_1ce313;
    ebx = memoryAGet32(ss, ebp + -28);
    edx ^= eax;
    al = 0x02;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    memoryASet32(ss, ebp + -16, edx);
    if ((int32_t)edx >= 0)
        goto loc_1ce313;
loc_1ce303: // 0160:1ce303
    eax = 0;
    ax = memoryAGet16(ss, ebp + -16);
    sub_1ce60d();
    goto loc_1ce46d;
loc_1ce313: // 0160:1ce313
    if (!(memoryAGet(ss, ebp + -24) & 0x40))
        goto loc_1ce34e;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = memoryAGet32(ss, ebp + -32);
    ecx = memoryAGet32(ss, ebp + -36);
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_1ce303;
    if (eax == memoryAGet32(ss, ebp + -36))
        goto loc_1ce46a;
    eax = 0x0000000c;
    sub_1cdba8();
    memoryASet32(ss, ebp + -36, edx);
    goto loc_1ce46a;
loc_1ce34e: // 0160:1ce34e
    sub_1cfc46();
    edx = eax;
    if (eax >= 0x000000b0)
        goto loc_1ce361;
    sub_1d33b9();
loc_1ce361: // 0160:1ce361
    edi = 0x00000200;
    if (edx >= 0x00000230)
        goto loc_1ce373;
    edi = 0x00000080;
loc_1ce373: // 0160:1ce373
    eax = edi + 3;
    edx = 0;
    al &= 0xfc;
    esi = 0;
    esp -= eax;
    memoryASet32(ss, ebp + -4, edx);
    memoryASet32(ss, ebp + -20, edx);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -8, esp);
    memoryASet32(ss, ebp + -12, eax);
loc_1ce38d: // 0160:1ce38d
    eax = memoryAGet32(ss, ebp + -4);
    if (eax >= memoryAGet32(ss, ebp + -36))
        goto loc_1ce434;
    eax = memoryAGet32(ss, ebp + -12);
    if (memoryAGet(ds, eax) != 0x0a)
        goto loc_1ce3e9;
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet(ds, esi + eax, 0x0d);
    esi++;
    if (esi != edi)
        goto loc_1ce3e9;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = eax;
    ecx = edi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_1ce303;
    if (eax == edi)
        goto loc_1ce3e1;
loc_1ce3cd: // 0160:1ce3cd
    eax = 0x0000000c;
    sub_1cdba8();
    eax = memoryAGet32(ss, ebp + -20);
    eax += esi;
    goto loc_1ce46d;
loc_1ce3e1: // 0160:1ce3e1
    eax = memoryAGet32(ss, ebp + -4);
    esi ^= edi;
    memoryASet32(ss, ebp + -20, eax);
loc_1ce3e9: // 0160:1ce3e9
    eax = memoryAGet32(ss, ebp + -8);
    edx = memoryAGet32(ss, ebp + -12);
    ebx = memoryAGet32(ss, ebp + -12);
    ecx = memoryAGet32(ss, ebp + -4);
    ebx++;
    ecx++;
    dl = memoryAGet(ds, edx);
    memoryASet32(ss, ebp + -12, ebx);
    memoryASet(ds, esi + eax, dl);
    esi++;
    memoryASet32(ss, ebp + -4, ecx);
    if (esi != edi)
        goto loc_1ce38d;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = eax;
    ecx = edi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_1ce303;
    if (eax != edi)
        goto loc_1ce3cd;
    eax = memoryAGet32(ss, ebp + -4);
    esi ^= edi;
    memoryASet32(ss, ebp + -20, eax);
    goto loc_1ce38d;
loc_1ce434: // 0160:1ce434
    if (!esi)
        goto loc_1ce46a;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = memoryAGet32(ss, ebp + -8);
    ecx = esi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_1ce303;
    if (eax == esi)
        goto loc_1ce46a;
    eax = 0x0000000c;
    sub_1cdba8();
    eax = memoryAGet32(ss, ebp + -20);
    eax += edx;
    goto loc_1ce46d;
loc_1ce46a: // 0160:1ce46a
    eax = memoryAGet32(ss, ebp + -36);
loc_1ce46d: // 0160:1ce46d
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1ce474() // 0160:1ce474 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet(ds, edx + 12) & 0x02)
        goto loc_1ce499;
    eax = 0x00000004;
    sub_1cdba8();
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x20);
loc_1ce48f: // 0160:1ce48f
    eax = 0xffffffff;
    goto loc_1ce512;
loc_1ce499: // 0160:1ce499
    if (memoryAGet32(ds, edx + 8) != 0x00000000)
        goto loc_1ce4a6;
    eax = edx;
    sub_1ce0aa();
loc_1ce4a6: // 0160:1ce4a6
    ecx = 0x00000400;
    if (ebx != 0x0000000a)
        goto loc_1ce4e3;
    al = memoryAGet(ds, edx + 12);
    ecx = 0x00000600;
    if (al & 0x40)
        goto loc_1ce4e3;
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, 0x0d);
    esi = memoryAGet32(ds, edx);
    esi++;
    edi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, esi);
    edi++;
    ebp = memoryAGet32(ds, edx + 20);
    memoryASet32(ds, edx + 4, edi);
    if (edi != ebp)
        goto loc_1ce4e3;
    eax = edx;
    sub_1cdf5c();
    if (eax)
        goto loc_1ce48f;
loc_1ce4e3: // 0160:1ce4e3
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, bl);
    eax = memoryAGet32(ds, edx);
    eax++;
    esi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, eax);
    esi++;
    edi = memoryAGet32(ds, edx + 12);
    memoryASet32(ds, edx + 4, esi);
    if (ecx & edi)
        goto loc_1ce503;
    if (esi != memoryAGet32(ds, edx + 20))
        goto loc_1ce50e;
loc_1ce503: // 0160:1ce503
    eax = edx;
    sub_1cdf5c();
    if (eax)
        goto loc_1ce48f;
loc_1ce50e: // 0160:1ce50e
    eax = 0;
    al = bl;
loc_1ce512: // 0160:1ce512
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce518() // 0160:1ce518 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = cs;
    memoryASet16(ds, edx + 2, ax);
    eax = ds;
    memoryASet16(ds, edx + 6, ax);
    eax = es;
    memoryASet16(ds, edx, ax);
    eax = ss;
    memoryASet16(ds, edx + 4, ax);
    eax = fs;
    memoryASet16(ds, edx + 8, ax);
    eax = gs;
    memoryASet16(ds, edx + 10, ax);
    edx = pop32();
    esp += 4;
}
void sub_1ce540() // 0160:1ce540 +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x00000004;
loc_1ce544: // 0160:1ce544
    if (ebx)
        goto loc_1ce54f;
loc_1ce548: // 0160:1ce548
    eax = 0;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1ce54f: // 0160:1ce54f
    ch = memoryAGet(ds, edx);
    cl = memoryAGet(ds, eax);
    memoryASet(ds, esp, ch);
    if (cl < 0x41)
        goto loc_1ce563;
    if (cl > 0x5a)
        goto loc_1ce563;
    cl += 0x20;
loc_1ce563: // 0160:1ce563
    ch = memoryAGet(ds, esp);
    if (ch < 0x41)
        goto loc_1ce576;
    if (ch > 0x5a)
        goto loc_1ce576;
    ch += 0x20;
    memoryASet(ds, esp, ch);
loc_1ce576: // 0160:1ce576
    ch = memoryAGet(ds, esp);
    if (cl == ch)
        goto loc_1ce58e;
    edx = 0;
    eax = 0;
    dl = cl;
    al = ch;
    edx -= eax;
    eax = edx;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1ce58e: // 0160:1ce58e
    if (!ch)
        goto loc_1ce548;
    eax++;
    edx++;
    ebx--;
    goto loc_1ce544;
}
void sub_1ce597() // 0160:1ce597 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    ebx = eax;
loc_1ce5a5: // 0160:1ce5a5
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    if (ebx == eax)
        goto loc_1ce5a5;
    esi = 0;
    bl = al;
loc_1ce5b5: // 0160:1ce5b5
    ah = 0x2c;
    interrupt(0x21);
    esi++;
    if (bl == dh)
        goto loc_1ce5b5;
    memoryASet32(ds, 0x3f6780, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce5c9() // 0160:1ce5c9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (!eax)
        goto loc_1ce5fc;
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, 0x3f6780);
    esi = 0x000003e8;
    eax += 0x000001f4;
    edx = 0;
    div32(esi);
    esi = eax;
    if (eax)
        goto loc_1ce5ef;
    esi = eax + 1;
loc_1ce5ef: // 0160:1ce5ef
    eax = 0;
    bl = al;
loc_1ce5f3: // 0160:1ce5f3
    ah = 0x2c;
    interrupt(0x21);
    esi--;
    if (esi)
        goto loc_1ce5f3;
loc_1ce5fc: // 0160:1ce5fc
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce608() // 0160:1ce608 +long
{
    esp -= 4;
    if (edx)
        goto loc_1ce60d;
    esp += 4;
    return;
loc_1ce60d: // 0160:1ce60d
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_1cdbcb();
    if (edx >= 0x00000100)
        goto loc_1ce65c;
    if (memoryAGet(ds, 0x1e3df3) < 0x03)
        goto loc_1ce646;
    if (dl != 0x50)
        goto loc_1ce636;
    bl = 0x0e;
    goto loc_1ce646;
loc_1ce636: // 0160:1ce636
    if (dl < 0x22)
        goto loc_1ce63f;
    bl = 0x13;
    goto loc_1ce646;
loc_1ce63f: // 0160:1ce63f
    if (dl < 0x20)
        goto loc_1ce646;
    bl = 0x05;
loc_1ce646: // 0160:1ce646
    if (bl <= 0x13)
        goto loc_1ce64d;
    bl = 0x13;
loc_1ce64d: // 0160:1ce64d
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 1982561);
    eax = sar32(eax, 0x18);
    goto loc_1ce666;
loc_1ce65c: // 0160:1ce65c
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_1ce666: // 0160:1ce666
    sub_1cdba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce60d() // 0160:1ce60d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_1cdbcb();
    if (edx >= 0x00000100)
        goto loc_1ce65c;
    if (memoryAGet(ds, 0x1e3df3) < 0x03)
        goto loc_1ce646;
    if (dl != 0x50)
        goto loc_1ce636;
    bl = 0x0e;
    goto loc_1ce646;
loc_1ce636: // 0160:1ce636
    if (dl < 0x22)
        goto loc_1ce63f;
    bl = 0x13;
    goto loc_1ce646;
loc_1ce63f: // 0160:1ce63f
    if (dl < 0x20)
        goto loc_1ce646;
    bl = 0x05;
loc_1ce646: // 0160:1ce646
    if (bl <= 0x13)
        goto loc_1ce64d;
    bl = 0x13;
loc_1ce64d: // 0160:1ce64d
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 1982561);
    eax = sar32(eax, 0x18);
    goto loc_1ce666;
loc_1ce65c: // 0160:1ce65c
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_1ce666: // 0160:1ce666
    sub_1cdba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce674() // 0160:1ce674 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1ce6c3;
    flags.carry = ((uint64_t)eax + 0x00000007) >= 0x100000000ull;
    eax += 0x00000007;
    if (flags.carry)
        goto loc_1ce6c3;
    al &= 0xfc;
    edx = 0x0000000c;
    flags.carry = eax < edx;
    eax -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    eax &= ecx;
    eax += edx;
    if (eax > memoryAGet32(ds, ebx + 20))
        goto loc_1ce6c3;
    esi = memoryAGet32(ds, ebx + 12);
    edi = memoryAGet32(ds, ebx + 16);
    if (eax > edi)
        goto loc_1ce6a7;
    esi = memoryAGet32(ds, ebx + 40);
    edi = 0;
loc_1ce6a7: // 0160:1ce6a7
    edx = memoryAGet32(ds, esi);
    if (eax <= edx)
        goto loc_1ce6c7;
    flags.carry = edi < edx;
    edi -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    edi &= ecx;
    edi += edx;
    edx = ebx + 32;
    esi = memoryAGet32(ds, esi + 8);
    if (esi != edx)
        goto loc_1ce6a7;
    memoryASet32(ds, ebx + 20, edi);
loc_1ce6c3: // 0160:1ce6c3
    eax = 0;
    goto loc_1ce712;
loc_1ce6c7: // 0160:1ce6c7
    edx -= eax;
    memoryASet32(ds, ebx + 16, edi);
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) + 1);
    ecx = memoryAGet32(ds, esi + 8);
    if (edx < 0x0000000c)
        goto loc_1ce6f5;
    edi = esi;
    edi += eax;
    memoryASet32(ds, ebx + 12, edi);
    memoryASet32(ds, edi, edx);
    memoryASet32(ds, esi, eax);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, ebx + 8, edi);
    ebx = ecx;
    memoryASet32(ds, ebx + 4, edi);
    goto loc_1ce70a;
loc_1ce6f5: // 0160:1ce6f5
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    eax = esi;
    edi = ecx;
    esi = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi + 8, edi);
    memoryASet32(ds, edi + 4, esi);
    memoryASet32(ds, ebx + 12, esi);
    esi = eax;
loc_1ce70a: // 0160:1ce70a
    memoryASet32(ds, esi, memoryAGet32(ds, esi) | 0x00000001);
    eax = esi;
    eax += 0x00000004;
loc_1ce712: // 0160:1ce712
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ce71c() // 0160:1ce71c +long
{
    esp -= 4;
    goto loc_1ce71c;
loc_1ce717: // 0160:1ce717
    goto loc_1ce822;
loc_1ce71c: // 0160:1ce71c
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1ce717;
    esi = eax;
    esi -= 0x00000004;
    eax = memoryAGet32(ds, esi);
    if (!(al & 0x01))
        goto loc_1ce717;
    al &= 0xfe;
    edi = esi;
    edi += eax;
    if (memoryAGet32(ds, edi) & 0x00000001)
        goto loc_1ce75e;
    if (edi != memoryAGet32(ds, ebx + 12))
        goto loc_1ce747;
    memoryASet32(ds, ebx + 12, esi);
loc_1ce747: // 0160:1ce747
    eax += memoryAGet32(ds, edi);
    memoryASet32(ds, esi, eax);
    push32(ebx);
    ebx = memoryAGet32(ds, edi + 4);
    edi = memoryAGet32(ds, edi + 8);
    memoryASet32(ds, ebx + 8, edi);
    memoryASet32(ds, edi + 4, ebx);
    ebx = pop32();
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    goto loc_1ce7da;
loc_1ce75e: // 0160:1ce75e
    memoryASet32(ds, esi, eax);
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1ce775;
    if (esi > memoryAGet32(ds, edi + 4))
        goto loc_1ce7da;
    edi = memoryAGet32(ds, ebx + 40);
    if (esi < edi)
        goto loc_1ce7da;
    goto loc_1ce784;
loc_1ce775: // 0160:1ce775
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1ce7da;
    edi = ebx + 32;
    if (esi > memoryAGet32(ds, ebx + 36))
        goto loc_1ce7da;
loc_1ce784: // 0160:1ce784
    edx = 0;
    eax = memoryAGet32(ds, ebx + 24);
    ecx = memoryAGet32(ds, ebx + 28);
    ecx++;
    div32(ecx);
    ecx--;
    if (eax >= ecx)
        goto loc_1ce7b9;
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ecx;
    eax += eax;
    if (edx > ecx)
        goto loc_1ce7a1;
    eax = 0;
loc_1ce7a1: // 0160:1ce7a1
    edi = esi;
    edi += memoryAGet32(ds, esi);
loc_1ce7a5: // 0160:1ce7a5
    edx = memoryAGet32(ds, edi);
    if (!(dl & 0x01))
        goto loc_1ce7da;
    if (edx == 0xffffffff)
        goto loc_1ce7b9;
    dl &= 0xfe;
    edi += edx;
    eax--;
    if (eax)
        goto loc_1ce7a5;
loc_1ce7b9: // 0160:1ce7b9
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1ce7c3;
    edi = memoryAGet32(ds, ebx + 40);
loc_1ce7c3: // 0160:1ce7c3
    if (esi < edi)
        goto loc_1ce7da;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1ce7da;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1ce7da;
    edi = memoryAGet32(ds, edi + 8);
    goto loc_1ce7c3;
loc_1ce7da: // 0160:1ce7da
    edx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, esi);
    etx = edx; edx = edi; edi = etx;
    eax = edi;
    eax += memoryAGet32(ds, edi);
    if (eax != esi)
        goto loc_1ce7f9;
    ecx += memoryAGet32(ds, edi);
    memoryASet32(ds, edi, ecx);
    if (esi != memoryAGet32(ds, ebx + 12))
        goto loc_1ce7f5;
    memoryASet32(ds, ebx + 12, edi);
loc_1ce7f5: // 0160:1ce7f5
    esi = edi;
    goto loc_1ce80a;
loc_1ce7f9: // 0160:1ce7f9
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) + 1);
    memoryASet32(ds, esi + 8, edx);
    memoryASet32(ds, esi + 4, edi);
    memoryASet32(ds, edi + 8, esi);
    edi = edx;
    memoryASet32(ds, edi + 4, esi);
loc_1ce80a: // 0160:1ce80a
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) - 1);
    if (esi >= memoryAGet32(ds, ebx + 12))
        goto loc_1ce81a;
    if (ecx <= memoryAGet32(ds, ebx + 16))
        goto loc_1ce81a;
    memoryASet32(ds, ebx + 16, ecx);
loc_1ce81a: // 0160:1ce81a
    if (ecx <= memoryAGet32(ds, ebx + 20))
        goto loc_1ce822;
    memoryASet32(ds, ebx + 20, ecx);
loc_1ce822: // 0160:1ce822
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ce827() // 0160:1ce827 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3db0);
    if (eax != edx)
        goto loc_1ce83c;
    edx = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, 0x1e3db0, edx);
loc_1ce83c: // 0160:1ce83c
    ebx = memoryAGet32(ds, 0x1e3dac);
    if (eax != ebx)
        goto loc_1ce84f;
    edx = memoryAGet32(ds, ebx + 8);
    memoryASet32(ds, 0x1e3dac, edx);
loc_1ce84f: // 0160:1ce84f
    edx = memoryAGet32(ds, eax + 4);
    eax = memoryAGet32(ds, eax + 8);
    if (!edx)
        goto loc_1ce85c;
    memoryASet32(ds, edx + 8, eax);
loc_1ce85c: // 0160:1ce85c
    if (!eax)
        goto loc_1ce863;
    memoryASet32(ds, eax + 4, edx);
loc_1ce863: // 0160:1ce863
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce866() // 0160:1ce866 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x1e3dac);
loc_1ce871: // 0160:1ce871
    if (!edx)
        goto loc_1ceb56;
    eax = memoryAGet32(ds, edx + 36);
    eax = memoryAGet32(ds, eax);
    ebx = memoryAGet32(ds, edx);
    eax += 0x0000002c;
    if (eax != ebx)
        goto loc_1ce8bf;
    ebx = edx + -8;
    eax = edx;
    ecx = memoryAGet32(ds, edx + 8);
    sub_1ce827();
    edx = ecx;
    ecx = memoryAGet32(ds, ebx + 4);
    if (ecx)
        goto loc_1ce8af;
    eax = memoryAGet32(ds, ebx);
    eax >>= 16;
    di = memoryAGet16(ds, ebx);
    esi = eax;
    ah = 0x05;
    al = 0x02;
    interrupt(0x31);
    goto loc_1ce871;
loc_1ce8af: // 0160:1ce8af
    eax = ecx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    goto loc_1ce871;
loc_1ce8bf: // 0160:1ce8bf
    edx = memoryAGet32(ds, edx + 8);
    goto loc_1ce871;
    // gap 658 bytes
loc_1ceb56: // 0160:1ceb56
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ce9c7() // 0160:1ce9c7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x1e3dac);
    ebx = 0;
    goto loc_1ce9dd;
loc_1ce9d4: // 0160:1ce9d4
    if (edx < eax)
        goto loc_1ce9e1;
    ebx = eax;
    eax = memoryAGet32(ds, eax + 8);
loc_1ce9dd: // 0160:1ce9dd
    if (eax)
        goto loc_1ce9d4;
loc_1ce9e1: // 0160:1ce9e1
    memoryASet32(ds, edx + 4, ebx);
    memoryASet32(ds, edx + 8, eax);
    if (!ebx)
        goto loc_1ce9f0;
    memoryASet32(ds, ebx + 8, edx);
    goto loc_1ce9f6;
loc_1ce9f0: // 0160:1ce9f0
    memoryASet32(ds, 0x1e3dac, edx);
loc_1ce9f6: // 0160:1ce9f6
    if (!eax)
        goto loc_1ce9fd;
    memoryASet32(ds, eax + 4, edx);
loc_1ce9fd: // 0160:1ce9fd
    ebx = edx + 32;
    eax = memoryAGet32(ds, edx);
    edx += 0x0000002c;
    memoryASet32(ds, edx + -12, 0x00000000);
    memoryASet32(ds, edx + -28, 0x00000000);
    memoryASet32(ds, edx + -20, 0x00000000);
    memoryASet32(ds, edx + -16, 0x00000000);
    memoryASet32(ds, edx + -8, ebx);
    memoryASet32(ds, edx + -4, ebx);
    eax -= 0x0000002c;
    memoryASet32(ds, edx + -32, ebx);
    memoryASet32(ds, edx, eax);
    memoryASet32(ds, edx + eax, 0xffffffff);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cea3b() // 0160:1cea3b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x1e3dac);
    if (!edx)
        goto loc_1cea84;
    edx = memoryAGet32(ds, edx + 36);
    ebx = memoryAGet32(ds, edx);
    ebx += edx;
    ah = memoryAGet(ds, 0x1e3dea);
    ebx += 0x00000004;
    if (ah < 0x02)
        goto loc_1cea77;
    if (ah > 0x08)
        goto loc_1cea77;
    if (memoryAGet(ds, 0x1e3dec) != 0x00)
        goto loc_1cea77;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1cea6e lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x1e3dbc, eax);
loc_1cea77: // 0160:1cea77
    if (ebx != memoryAGet32(ds, 0x1e3dbc))
        goto loc_1cea84;
    eax = memoryAGet32(ds, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cea84: // 0160:1cea84
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cea89() // 0160:1cea89 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    sub_1ce866();
    eax = memoryAGet32(ds, esp);
    eax >>= 16;
    ecx = memoryAGet32(ds, esp);
    ebx = eax;
    ah = 0x05;
    al = 0x01;
    interrupt(0x31);
    eax = -flags.carry;
    eax++;
    if (!eax)
        goto loc_1ceaba;
    ax = bx;
    eax <<= 16;
    ax = cx;
    memoryASet16(ds, eax, di);
    memoryASet16(ds, eax + 2, si);
loc_1ceaba: // 0160:1ceaba
    if (!eax)
        goto loc_1cead7;
    ebx = memoryAGet32(ds, esp);
    edx = eax + 8;
    ebx -= 0x00000008;
    memoryASet32(ds, edx, ebx);
    memoryASet32(ds, eax + 4, 0x00000000);
    eax = edx;
    goto loc_1ceb53;
loc_1cead7: // 0160:1cead7
    if (!(memoryAGet16(ds, 0x3f683e) & 0xfff0))
        goto loc_1ceaec;
    memoryASet32(ds, 0x3f683c, 0x000fffff);
loc_1ceaec: // 0160:1ceaec
    if (memoryAGet32(ds, esp) > 0x00010000)
        goto loc_1ceb51;
    ebx = memoryAGet32(ds, 0x3f683c);
    ebx >>= 4;
    bl |= 0x01;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax < 0)
        goto loc_1ceb51;
    ebx = memoryAGet32(ds, esp);
    ebx >>= 4;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    ebx = eax;
    eax = edx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    if ((int32_t)esi < 0)
        goto loc_1ceb51;
    ah = 0x00;
    al = 0x06;
    interrupt(0x31);
    eax = ecx;
    eax <<= 16;
    ax = dx;
    eax += 0x00000008;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + -4, esi);
    edx -= 0x00000008;
    memoryASet32(ds, eax, edx);
    goto loc_1ceb53;
loc_1ceb51: // 0160:1ceb51
    eax = 0;
loc_1ceb53: // 0160:1ceb53
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ceb5c() // 0160:1ceb5c +long
{
    esp -= 4;
    goto loc_1ceb5c;
loc_1ceb53: // 0160:1ceb53
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ceb5c: // 0160:1ceb5c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    if (memoryAGet32(ds, 0x1e4218) != 0x00000000)
        goto loc_1ceb6f;
loc_1ceb6b: // 0160:1ceb6b
    eax = 0;
    goto loc_1ceb53;
loc_1ceb6f: // 0160:1ceb6f
    if (memoryAGet32(ds, 0x1e3dbc) == 0xfffffffe)
        goto loc_1ceb6b;
    eax = esp;
    sub_1ced4f();
    if (!eax)
        goto loc_1ceb53;
    if (memoryAGet(ds, 0x1e3dea) != 0x01)
        goto loc_1ceba3;
    eax = memoryAGet32(ds, esp);
    sub_1cea89();
    ebx = eax;
    edx = eax;
    if (!eax)
        goto loc_1cebbe;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    goto loc_1cebbe;
loc_1ceba3: // 0160:1ceba3
    ebx = memoryAGet32(ds, esp);
    eax = 0x80004800;
    interrupt(0x21);
    ebx = -flags.carry;
    ebx = ~ebx;
    eax &= ebx;
    ecx = memoryAGet32(ds, esp);
    ecx -= 0x00000004;
    edx = eax;
    memoryASet32(ds, esp, ecx);
loc_1cebbe: // 0160:1cebbe
    if (!edx)
        goto loc_1ceb6b;
    eax = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp);
    eax -= 0x00000004;
    if (eax > esi)
        goto loc_1ceb6b;
    memoryASet32(ds, esp, eax);
    if (eax < 0x00000038)
        goto loc_1ceb6b;
    memoryASet32(ds, edx, eax);
    eax = edx;
    sub_1ce9c7();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    edi = memoryAGet32(ds, edx + 24);
    memoryASet32(ds, edx + 20, 0xffffffff);
    edi++;
    eax = ebx + 4;
    memoryASet32(ds, edx + 24, edi);
    sub_1cca84();
    eax = 0x00000001;
    goto loc_1ceb53;
}
void sub_1cec0b() // 0160:1cec0b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(eax);
    if (memoryAGet(ds, 0x1e3dea) != 0x01)
        goto loc_1cec23;
    if (memoryAGet(ds, 0x1e3deb) == 0x00)
        goto loc_1cec2c;
loc_1cec23: // 0160:1cec23
    if (memoryAGet(ds, 0x1e3dea) != 0x09)
        goto loc_1cec39;
loc_1cec2c: // 0160:1cec2c
    eax = memoryAGet32(ds, esp);
    sub_1ceb5c();
    goto loc_1ced46;
loc_1cec39: // 0160:1cec39
    if (memoryAGet32(ds, 0x1e4218) != 0x00000000)
        goto loc_1cec49;
loc_1cec42: // 0160:1cec42
    eax = 0;
    goto loc_1ced46;
loc_1cec49: // 0160:1cec49
    if (memoryAGet32(ds, 0x1e3dbc) == 0xfffffffe)
        goto loc_1cec42;
    eax = esp;
    sub_1ced4f();
    if (!eax)
        goto loc_1ced46;
    bl = memoryAGet(ds, 0x1e3dea);
    if (bl < 0x02)
        goto loc_1cec87;
    if (bl > 0x08)
        goto loc_1cec87;
    if (memoryAGet(ds, 0x1e3dec) != 0x00)
        goto loc_1cec87;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1cec7e lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x1e3dbc, eax);
loc_1cec87: // 0160:1cec87
    edx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x1e3dbc);
    edx += ecx;
    if (edx >= ecx)
        goto loc_1cec9b;
    edx = 0xfffffffe;
loc_1cec9b: // 0160:1cec9b
    eax = edx;
    sub_1d356b();
    if (eax == 0xffffffff)
        goto loc_1cec42;
    ebx = eax;
    if (eax > 0xfffffff8)
        goto loc_1cec42;
    if (edx <= eax)
        goto loc_1cec42;
    edx -= eax;
    eax = edx + -4;
    memoryASet32(ds, esp, edx);
    if (eax > edx)
        goto loc_1cec42;
    edx = memoryAGet32(ds, 0x1e3dac);
    memoryASet32(ds, esp, eax);
    goto loc_1cecdb;
loc_1cecc9: // 0160:1cecc9
    ebp = memoryAGet32(ds, edx + 8);
    if (!ebp)
        goto loc_1cecdf;
    if (edx > ebx)
        goto loc_1cecd8;
    if (ebx < ebp)
        goto loc_1cecdf;
loc_1cecd8: // 0160:1cecd8
    edx = memoryAGet32(ds, edx + 8);
loc_1cecdb: // 0160:1cecdb
    if (edx)
        goto loc_1cecc9;
loc_1cecdf: // 0160:1cecdf
    if (!edx)
        goto loc_1ced09;
    eax = memoryAGet32(ds, edx);
    ecx = ebx + -4;
    eax += edx;
    if (ecx != eax)
        goto loc_1ced09;
    esi = memoryAGet32(ds, esp);
    esi += 0x00000004;
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + esi);
    ebp = memoryAGet32(ds, esp);
    ecx = eax + ebp;
    ebx = eax;
    memoryASet32(ds, ecx, 0xffffffff);
    goto loc_1ced28;
loc_1ced09: // 0160:1ced09
    if (memoryAGet32(ds, esp) < 0x00000038)
        goto loc_1cec42;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ebx, eax);
    eax = ebx;
    edx = ebx;
    sub_1ce9c7();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
loc_1ced28: // 0160:1ced28
    eax = memoryAGet32(ds, esp);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, edx + 24, memoryAGet32(ds, edx + 24) + 1);
    eax = ebx + 4;
    memoryASet32(ds, edx + 20, 0xffffffff);
    sub_1cca84();
    eax = 0x00000001;
loc_1ced46: // 0160:1ced46
    esp += 0x00000004;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ced4f() // 0160:1ced4f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    ebx = eax;
    edx = memoryAGet32(ds, eax);
    edx += 0x00000003;
    dl &= 0xfc;
    if (edx)
        goto loc_1ced66;
loc_1ced60: // 0160:1ced60
    eax = 0;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1ced66: // 0160:1ced66
    if (memoryAGet(ds, 0x1e3dea) != 0x01)
        goto loc_1ced78;
    if (memoryAGet(ds, 0x1e3deb) == 0x00)
        goto loc_1ced81;
loc_1ced78: // 0160:1ced78
    if (memoryAGet(ds, 0x1e3dea) != 0x09)
        goto loc_1ced86;
loc_1ced81: // 0160:1ced81
    edx += 0x00000008;
    goto loc_1ced8d;
loc_1ced86: // 0160:1ced86
    sub_1cea3b();
    edx -= eax;
loc_1ced8d: // 0160:1ced8d
    memoryASet32(ds, ebx, edx);
    edx += 0x0000003c;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1ced60;
    esi = memoryAGet32(ds, 0x1e421c);
    if (edx >= esi)
        goto loc_1ceda5;
    edx = esi;
    dl &= 0xfe;
loc_1ceda5: // 0160:1ceda5
    memoryASet32(ds, ebx, edx);
    edx += 0x00000fff;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1ced60;
    dh &= 0xf0;
    dl = 0;
    memoryASet32(ds, ebx, edx);
    al = !!(edx);
    eax &= 0x000000ff;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cedc6() // 0160:1cedc6 +long
{
    esp -= 4;
    eax = 0;
    esp += 4;
}
void sub_1cedca() // 0160:1cedca +long
{
    esp -= 4;
    push32(ebp);
    push(es);
    push32(ebx);
    push(ds);
    push32(edx);
    sub_1cee02();
    push(ds);
    push32(edi);
    ebp = esp;
    edi = memoryAGet32(ss, ebp + 8);
    ds = memoryAGet16(ss, ebp + 12);
    memoryASet32(ds, edi, eax);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, edi + 12, edx);
    memoryASet32(ds, edi + 16, esi);
    memoryASet32(ds, edi + 20, pop32());
    eax = -flags.carry;
    memoryASet32(ds, edi + 24, eax);
    eax = pop32();
    ebx = pop32();
    ebx = pop32();
    ebx = pop32();
    memoryASet16(ds, ebx + 6, ax);
    memoryASet16(ds, ebx, es);
    es = pop();
    ebp = pop32();
    esp += 4;
}
void sub_1cee02() // 0160:1cee02 +long +returnCarry
{
    esp -= 4;
    esi = esi + esi*2;
    eax = esi + 1896104;
    push32(eax);
    es = memoryAGet16(ds, ebx);
    bp = memoryAGet16(ds, ebx + 6);
    eax = memoryAGet32(ds, edi);
    ebx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, edi + 8);
    edx = memoryAGet32(ds, edi + 12);
    esi = memoryAGet32(ds, edi + 16);
    edi = memoryAGet32(ds, edi + 20);
    ds = ebp;
    switch (memoryAGet16(cs, pop32()))
    {
        case 0x31cd: interrupt(0x31); break;
        case 0x33cd: interrupt(0x33); break;
        case 0x10cd: interrupt(0x10); break;
        default:
            assert(0);
    }
    esp += 4;
}
void sub_1cf1cd() // 0160:1cf1cd +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    ebp = edx;
    edi = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 1;
    memoryASet(ds, esp, dl);
loc_1cf1e3: // 0160:1cf1e3
    ebx = esp + 36;
    memoryASet32(ds, esp + 36, edi);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, eax);
    al = memoryAGet(cs, edx + 1896872);
    memoryASet(ds, ecx, al);
    eax = memoryAGet32(ds, esp + 36);
    ecx++;
    if (eax)
        goto loc_1cf1e3;
loc_1cf203: // 0160:1cf203
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1cf203;
    eax = ebp;
    esp += 0x00000028;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cf217() // 0160:1cf217 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1cf229;
    if ((int32_t)eax >= 0)
        goto loc_1cf229;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1cf229: // 0160:1cf229
    sub_1cf1cd();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1cf269() // 0160:1cf269 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(ebp);
    esp -= 0x00000028;
    push32(edx);
    ebp = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 5;
    memoryASet(ds, esp + 4, dl);
loc_1cf27e: // 0160:1cf27e
    ebx = esp + 40;
    memoryASet32(ds, esp + 40, ebp);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, edx);
    edx = memoryAGet32(ds, esp + 40);
    dl = memoryAGet(cs, edx + 1897028);
    memoryASet(ds, ecx, dl);
    ecx++;
    if (eax)
        goto loc_1cf27e;
loc_1cf29e: // 0160:1cf29e
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1cf29e;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000002c;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cf2b2() // 0160:1cf2b2 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1cf2c4;
    if ((int32_t)eax >= 0)
        goto loc_1cf2c4;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1cf2c4: // 0160:1cf2c4
    sub_1cf269();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1cf2cd() // 0160:1cf2cd +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1cf2da;
    if ((int32_t)eax > (int32_t)0x0000007a)
        goto loc_1cf2da;
    eax -= 0x00000020;
loc_1cf2da: // 0160:1cf2da
    esp += 4;
    return;
}
void sub_1cf2db() // 0160:1cf2db +long
{
    return; // gabo check
    esp -= 4;
    push32(0x000000b4);
    sub_1d3388();
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:1cf2e7 enter 0xa0, 0");
    push32(eax);
    ebp -= 0x00000082;
    esi = edx;
    memoryASet32(ss, ebp + 122, ebx);
    memoryASet32(ss, ebp + 118, ecx);
    sub_1d36c7();
    ecx = eax;
    edx = eax;
    if (eax != 0xffffffff)
        goto loc_1cf400;
    sub_1d3101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_1cf400;
    if (memoryAGet(ds, esi) == 0x5c)
        goto loc_1cf400;
    if (memoryAGet(ds, esi) == 0x00)
        goto loc_1cf400;
    if (memoryAGet(ds, esi + 1) == 0x3a)
        goto loc_1cf400;
    eax = 0x001d6334;
    sub_1cc798();
    ebx = eax;
    if (eax)
        goto loc_1cf34d;
    eax = ecx;
    goto loc_1cf402;
loc_1cf34d: // 0160:1cf34d
    eax = esi;
    sub_1d39c5();
    eax++;
    memoryASet32(ss, ebp + 126, eax);
    eax = 0x00000090;
    eax -= memoryAGet32(ss, ebp + 126);
    memoryASet32(ss, ebp + 114, eax);
loc_1cf363: // 0160:1cf363
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_1cf400;
    edx = 0x0000003b;
    eax = ebx;
    sub_1d39de();
    edi = eax;
    if (eax)
        goto loc_1cf388;
    eax = ebx;
    sub_1d39c5();
    edi = ebx + eax;
loc_1cf388: // 0160:1cf388
    ecx = edi;
    ecx -= ebx;
    if (ecx <= memoryAGet32(ss, ebp + 114))
        goto loc_1cf3ac;
    eax = 0x00000002;
    sub_1cdba8();
    eax = 0x0000000a;
    sub_1cdbcb();
    eax = 0xffffffff;
    goto loc_1cf402;
loc_1cf3ac: // 0160:1cf3ac
    eax = ebp + -30;
    edx = ebx;
    ebx = ecx;
    sub_1d39f8();
    eax = ebp + -30;
    eax += ecx;
    if (memoryAGet(ds, eax + -1) == 0x5c)
        goto loc_1cf3c7;
    memoryASet(ds, eax, 0x5c);
    eax++;
loc_1cf3c7: // 0160:1cf3c7
    ebx = memoryAGet32(ss, ebp + 126);
    edx = esi;
    ecx = memoryAGet32(ss, ebp + 118);
    sub_1d39f8();
    eax = memoryAGet32(ss, ebp + -34);
    edx = ebp + -30;
    ebx = memoryAGet32(ss, ebp + 122);
    sub_1d36c7();
    edx = eax;
    if (eax != 0xffffffff)
        goto loc_1cf400;
    sub_1d3101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_1cf400;
    if (memoryAGet(ds, edi) != 0x3b)
        goto loc_1cf400;
    ebx = edi + 1;
    goto loc_1cf363;
loc_1cf400: // 0160:1cf400
    eax = edx;
loc_1cf402: // 0160:1cf402
    esp = ebp + 130;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1cf40c() // 0160:1cf40c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (bl & 0x03)
        goto loc_1cf441;
    edx = eax;
    ecx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_1cf42f;
loc_1cf426: // 0160:1cf426
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1cf42f: // 0160:1cf42f
    ecx = 0x00000190;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_1cf426;
loc_1cf441: // 0160:1cf441
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf447() // 0160:1cf447 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    ebx = eax;
    ecx = memoryAGet32(ds, eax + 32);
    if (ecx)
        goto loc_1cf514;
    eax = edx + 1900;
    sub_1cf40c();
    if (!eax)
        goto loc_1cf47e;
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax * 2 + 0x1d63d2);
    eax = memoryAGet32(ds, eax * 2 + 0x1d63d0);
    goto loc_1cf48f;
loc_1cf47e: // 0160:1cf47e
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax * 2 + 0x1d63b8);
    eax = memoryAGet32(ds, eax * 2 + 0x1d63b6);
loc_1cf48f: // 0160:1cf48f
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    esi -= eax;
    edi = 0;
    ecx = 0x00000001;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, ecx);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    eax = esp;
    memoryASet32(ds, esp + 32, edi);
    sub_1cd5c6();
    ebp = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ebp;
    edx += 0x00000007;
    ecx = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = memoryAGet32(ds, ebx + 12);
    if (eax != 0x00000005)
        goto loc_1cf502;
    ecx = eax + -1;
    edi = ecx;
    edi <<= 3;
    eax = edx + 1;
    edi -= ecx;
    eax += edi;
    if ((int32_t)eax <= (int32_t)esi)
        goto loc_1cf4fe;
    eax = memoryAGet32(ds, ebx + 12);
    eax -= 0x00000002;
    goto loc_1cf503;
loc_1cf4fe: // 0160:1cf4fe
    eax = ecx;
    goto loc_1cf503;
loc_1cf502: // 0160:1cf502
    eax--;
loc_1cf503: // 0160:1cf503
    ebx = memoryAGet32(ds, esp + 28);
    ebx += edx;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax += ebx;
    goto loc_1cf523;
loc_1cf514: // 0160:1cf514
    if (ecx != 0x00000001)
        goto loc_1cf520;
    eax = memoryAGet32(ds, eax + 28);
    eax -= ecx;
    goto loc_1cf523;
loc_1cf520: // 0160:1cf520
    eax = memoryAGet32(ds, eax + 28);
loc_1cf523: // 0160:1cf523
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf52c() // 0160:1cf52c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    edx = ebx;
    sub_1cf447();
    edi = eax;
    edx = ebx;
    eax = esi;
    ecx = 0;
    sub_1cf447();
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_1cf54e;
    ecx = 0x00000001;
loc_1cf54e: // 0160:1cf54e
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cf554() // 0160:1cf554 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ecx = eax;
    eax = memoryAGet32(ds, 0x1e4116);
    dl = memoryAGet(ds, eax);
    edi = 0;
    if (!dl)
        goto loc_1cf7f8;
    eax = 0x001e4080;
    edx = 0x001e40a4;
    ebx = memoryAGet32(ds, ecx + 20);
    sub_1cf52c();
    memoryASet32(ds, esp + 16, eax);
    if (!eax)
        goto loc_1cf596;
    ebx = 0x001e40a4;
    esi = 0x001e4080;
    goto loc_1cf5a0;
loc_1cf596: // 0160:1cf596
    ebx = 0x001e4080;
    esi = 0x001e40a4;
loc_1cf5a0: // 0160:1cf5a0
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    ebp = memoryAGet32(ds, ecx + 16);
    sub_1cf40c();
    edx = eax;
    eax = ebp + ebp;
    if (!edx)
        goto loc_1cf5c8;
    edx = memoryAGet32(ds, eax + 1926098);
    eax = memoryAGet32(ds, eax + 1926096);
    goto loc_1cf5d4;
loc_1cf5c8: // 0160:1cf5c8
    edx = memoryAGet32(ds, eax + 1926072);
    eax = memoryAGet32(ds, eax + 1926070);
loc_1cf5d4: // 0160:1cf5d4
    edx = sar32(edx, 0x10);
    eax = sar32(eax, 0x10);
    edx -= eax;
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    eax = memoryAGet32(ds, ebx + 32);
    memoryASet32(ds, esp + 20, edx);
    if (eax)
        goto loc_1cf6a4;
    eax = memoryAGet32(ds, ebx + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1cf602;
    edi = 0x00000001;
    goto loc_1cf6dd;
loc_1cf602: // 0160:1cf602
    if (ebp != eax)
        goto loc_1cf6dd;
    edx = memoryAGet32(ds, ecx + 24);
    eax = memoryAGet32(ds, ebx + 24);
    edx += 0x00000007;
    edx -= eax;
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp, eax);
    edx += 0x00000006;
    edx -= memoryAGet32(ds, ebx + 24);
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax--;
    eax -= edx;
    edx = memoryAGet32(ds, ebx + 12);
    memoryASet32(ds, esp + 8, eax);
    if (edx != 0x00000005)
        goto loc_1cf67d;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp);
    eax -= 0x00000007;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1cf6dd;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1cf6dd;
    goto loc_1cf6d9;
loc_1cf67d: // 0160:1cf67d
    eax = edx + -1;
    memoryASet32(ds, esp + 24, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_1cf6dd;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1cf6dd;
    goto loc_1cf6d9;
loc_1cf6a4: // 0160:1cf6a4
    edx = memoryAGet32(ds, ebx + 28);
    if (eax != 0x00000001)
        goto loc_1cf6cb;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_1cf40c();
    if (!eax)
        goto loc_1cf6ca;
    eax = memoryAGet32(ds, 0x1d63ba);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1cf6ca;
    edx++;
loc_1cf6ca: // 0160:1cf6ca
    edx--;
loc_1cf6cb: // 0160:1cf6cb
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_1cf6dd;
    edi = 0x00000001;
    if (edx != eax)
        goto loc_1cf6dd;
loc_1cf6d9: // 0160:1cf6d9
    memoryASet32(ds, esp + 20, edi);
loc_1cf6dd: // 0160:1cf6dd
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_1cf6f5;
    eax = ecx;
    edx = ebx;
    sub_1cf807();
    al = !eax;
    edi = al;
loc_1cf6f5: // 0160:1cf6f5
    if (edi)
        goto loc_1cf70c;
    esi = memoryAGet32(ds, esp + 16);
    if (!esi)
        goto loc_1cf7f8;
    edi = esi;
    goto loc_1cf7f8;
loc_1cf70c: // 0160:1cf70c
    eax = memoryAGet32(ds, esi + 32);
    ebx = 0;
    if (eax)
        goto loc_1cf7a2;
    eax = memoryAGet32(ds, esi + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_1cf727;
    edi = 0;
    goto loc_1cf7db;
loc_1cf727: // 0160:1cf727
    if (ebp != eax)
        goto loc_1cf7db;
    edx = memoryAGet32(ds, ecx + 24);
    ebp = memoryAGet32(ds, esi + 24);
    edx += 0x00000007;
    edx -= ebp;
    ebp = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp + 4, eax);
    edx += 0x00000006;
    eax = memoryAGet32(ds, esi + 24);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebp = memoryAGet32(ds, ecx + 12);
    ebp--;
    ebp -= edx;
    edx = memoryAGet32(ds, esi + 12);
    edi = 0;
    if (edx != 0x00000005)
        goto loc_1cf78b;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    eax -= 0x00000007;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1cf785;
loc_1cf77e: // 0160:1cf77e
    edi = 0x00000001;
    goto loc_1cf7db;
loc_1cf785: // 0160:1cf785
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_1cf7db;
    goto loc_1cf7d6;
loc_1cf78b: // 0160:1cf78b
    edx--;
    eax = edx;
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_1cf77e;
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_1cf7db;
    goto loc_1cf7d6;
loc_1cf7a2: // 0160:1cf7a2
    edx = memoryAGet32(ds, esi + 28);
    if (eax != 0x00000001)
        goto loc_1cf7c9;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_1cf40c();
    if (!eax)
        goto loc_1cf7c8;
    eax = memoryAGet32(ds, 0x1d63ba);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1cf7c8;
    edx++;
loc_1cf7c8: // 0160:1cf7c8
    edx--;
loc_1cf7c9: // 0160:1cf7c9
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_1cf7db;
    edi = 0;
    if (edx != eax)
        goto loc_1cf7db;
loc_1cf7d6: // 0160:1cf7d6
    ebx = 0x00000001;
loc_1cf7db: // 0160:1cf7db
    if (!ebx)
        goto loc_1cf7ea;
    eax = ecx;
    edx = esi;
    sub_1cf807();
    edi = eax;
loc_1cf7ea: // 0160:1cf7ea
    ebx = memoryAGet32(ds, esp + 16);
    if (!ebx)
        goto loc_1cf7f8;
    eax = ebx;
    eax -= edi;
    edi = eax;
loc_1cf7f8: // 0160:1cf7f8
    eax = edi;
    memoryASet32(ds, ecx + 32, edi);
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf807() // 0160:1cf807 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = memoryAGet32(ds, eax + 8);
    esi = memoryAGet32(ds, edx + 8);
    ebx = 0;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_1cf82b;
    if (ecx != esi)
        goto loc_1cf830;
    ecx = memoryAGet32(ds, eax + 4);
    ebp = memoryAGet32(ds, edx + 4);
    if ((int32_t)ecx < (int32_t)ebp)
        goto loc_1cf82b;
    if (ecx != ebp)
        goto loc_1cf830;
    eax = memoryAGet32(ds, eax);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx))
        goto loc_1cf830;
loc_1cf82b: // 0160:1cf82b
    ebx = 0x00000001;
loc_1cf830: // 0160:1cf830
    eax = ebx;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf837() // 0160:1cf837 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    eax = ebx;
    if (edx >= 0x0000a8c0)
        goto loc_1cf864;
    if ((int32_t)ebx <= 0)
        goto loc_1cf864;
    esi = edx + 86400;
    esi -= ebx;
    edx = 0;
    ebx = 0x00015180;
    eax = esi;
    div32(ebx);
    edi += eax;
    edi--;
    goto loc_1cf873;
loc_1cf864: // 0160:1cf864
    ebx = 0x00015180;
    esi -= eax;
    edx = 0;
    eax = esi;
    div32(ebx);
    edi += eax;
loc_1cf873: // 0160:1cf873
    ebx = 0x00015180;
    eax = esi;
    edx = 0;
    div32(ebx);
    ebx = edx;
    esi = 0x00000e10;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    div32(esi);
    ebx = edx;
    esi = 0x0000003c;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 4, eax);
    eax = ebx;
    div32(esi);
    ebx = 0x0000016e;
    eax = edi;
    memoryASet32(ds, ecx, edx);
    edx = 0;
    div32(ebx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    eax += edx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    ebx = edi;
    ebx -= eax;
    if (edx <= 0)
        goto loc_1cf8da;
    eax = edx + -1;
    eax >>= 2;
    ebx -= eax;
loc_1cf8da: // 0160:1cf8da
    eax = edx + 1900;
    sub_1cf40c();
    eax += 0x0000016d;
loc_1cf8ea: // 0160:1cf8ea
    if (ebx < eax)
        goto loc_1cf8f3;
    edx++;
    ebx -= eax;
    goto loc_1cf8ea;
loc_1cf8f3: // 0160:1cf8f3
    esi = 0x001d63b8;
    memoryASet32(ds, ecx + 28, ebx);
    eax = edx + 1900;
    memoryASet32(ds, ecx + 20, edx);
    sub_1cf40c();
    if (!eax)
        goto loc_1cf912;
    esi = 0x001d63d2;
loc_1cf912: // 0160:1cf912
    ebp = 0x0000001f;
    eax = ebx;
    edx = 0;
    div32(ebp);
    edx = eax;
    edx = memoryAGet32(ds, esi + edx*2);
    edx = sar32(edx, 0x10);
    if (ebx < edx)
        goto loc_1cf92a;
    eax++;
loc_1cf92a: // 0160:1cf92a
    memoryASet32(ds, ecx + 16, eax);
    eax = (short)memoryAGet16(ds, esi + eax*2);
    ebx -= eax;
    edx = 0;
    ebx++;
    eax = edi + 1;
    memoryASet32(ds, ecx + 12, ebx);
    ebx = 0x00000007;
    div32(ebx);
    eax = ecx;
    memoryASet32(ds, ecx + 24, edx);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1cf976() // 0160:1cf976 +long
{
    esp -= 4;
    eax = 0x001d633c;
    sub_1cc798();
    if (eax)
        goto loc_1cfbb7;
    esp += 4;
    return;
    // gap 558 bytes
loc_1cfbb7: // 0160:1cfbb7
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = 0;
    ebx = 0x001e40c8;
    memoryASet32(ds, 0x1e40d0, edx);
    edx = 0x001e40d4;
    sub_1cf9af();
    edx = eax;
    ah = memoryAGet(ds, eax);
    if (ah)
        goto loc_1cfbe4;
    memoryASet(ds, 0x1e40f3, ah);
    goto loc_1cfc3f;
loc_1cfbe4: // 0160:1cfbe4
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x1e40c8);
    memoryASet32(ds, 0x1e40d0, ebx);
    eax -= 0x00000e10;
    ebx = esp;
    memoryASet32(ds, esp, eax);
    eax = edx;
    edx = 0x001e40f3;
    sub_1cf9af();
    ecx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, 0x1e40c8);
    ebx -= ecx;
    memoryASet32(ds, 0x1e40cc, ebx);
    bl = memoryAGet(ds, eax);
    edx = eax;
    if (bl != 0x2c)
        goto loc_1cfc2f;
    edx = 0x001e4080;
    eax++;
    sub_1cfac5();
loc_1cfc2f: // 0160:1cfc2f
    if (memoryAGet(ds, eax) != 0x2c)
        goto loc_1cfc3f;
    edx = 0x001e40a4;
    eax++;
    sub_1cfac5();
loc_1cfc3f: // 0160:1cfc3f
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf989() // 0160:1cf989 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
loc_1cf98f: // 0160:1cf98f
    bl = memoryAGet(ds, eax);
    if (bl < 0x30)
        goto loc_1cf9aa;
    if (bl > 0x39)
        goto loc_1cf9aa;
    edx = edx * 0x0000000a;
    ebx = 0;
    bl = memoryAGet(ds, eax);
    edx += ebx;
    eax++;
    edx -= 0x00000030;
    goto loc_1cf98f;
loc_1cf9aa: // 0160:1cf9aa
    memoryASet32(ds, ecx, edx);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cf9af() // 0160:1cf9af +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebp = eax;
    memoryASet32(ds, esp + 16, edx);
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1cf9c2;
    ebp++;
loc_1cf9c2: // 0160:1cf9c2
    esi = ebp;
loc_1cf9c4: // 0160:1cf9c4
    dl = memoryAGet(ss, ebp);
    if (!dl)
        goto loc_1cf9e7;
    if (dl == 0x2c)
        goto loc_1cf9e7;
    if (dl == 0x2d)
        goto loc_1cf9e7;
    if (dl == 0x2b)
        goto loc_1cf9e7;
    if (dl < 0x30)
        goto loc_1cf9e4;
    if (dl <= 0x39)
        goto loc_1cf9e7;
loc_1cf9e4: // 0160:1cf9e4
    ebp++;
    goto loc_1cf9c4;
loc_1cf9e7: // 0160:1cf9e7
    eax = ebp;
    eax -= esi;
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_1cf9fc;
    memoryASet32(ds, esp + 12, 0x0000001e);
loc_1cf9fc: // 0160:1cf9fc
    edi = memoryAGet32(ds, esp + 16);
    ecx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    ecx = memoryAGet32(ds, esp + 12);
    eax = edi + ecx;
    esi = 0;
    memoryASet(ds, eax, 0x00);
    eax = ebp + 1;
    if (dl != 0x2d)
        goto loc_1cfa35;
    esi = 0x00000001;
    goto loc_1cfa3a;
loc_1cfa35: // 0160:1cfa35
    if (dl != 0x2b)
        goto loc_1cfa3c;
loc_1cfa3a: // 0160:1cfa3a
    ebp = eax;
loc_1cfa3c: // 0160:1cfa3c
    al = memoryAGet(ss, ebp);
    if (al < 0x30)
        goto loc_1cfabb;
    if (al > 0x39)
        goto loc_1cfabb;
    edx = esp + 8;
    edi = 0;
    eax = ebp;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    sub_1cf989();
    edx = eax;
    cl = memoryAGet(ds, eax);
    ebp = eax;
    if (cl != 0x3a)
        goto loc_1cfa8c;
    edx = esp + 4;
    eax++;
    sub_1cf989();
    edx = eax;
    ch = memoryAGet(ds, eax);
    ebp = eax;
    if (ch != cl)
        goto loc_1cfa8c;
    edx = esp;
    eax++;
    sub_1cf989();
    ebp = eax;
loc_1cfa8c: // 0160:1cfa8c
    edx = memoryAGet32(ds, esp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, ebx, edx);
    if (!esi)
        goto loc_1cfabb;
    ecx = edx;
    ecx = -ecx;
    memoryASet32(ds, ebx, ecx);
loc_1cfabb: // 0160:1cfabb
    eax = ebp;
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1cfac5() // 0160:1cfac5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esp -= 0x00000010;
    ebx = eax;
    ecx = edx;
    ah = memoryAGet(ds, eax);
    esi = 0xffffffff;
    if (ah != 0x4a)
        goto loc_1cfae2;
    esi = 0x00000001;
    ebx += esi;
loc_1cfae2: // 0160:1cfae2
    if (memoryAGet(ds, ebx) != 0x4d)
        goto loc_1cfaea;
    ebx++;
    esi = 0;
loc_1cfaea: // 0160:1cfaea
    edx = esp + 12;
    eax = ebx;
    memoryASet32(ds, ecx + 32, esi);
    sub_1cf989();
    edx = eax;
    ebx = eax;
    if (!esi)
        goto loc_1cfb09;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 28, eax);
    goto loc_1cfb4e;
loc_1cfb09: // 0160:1cfb09
    eax = memoryAGet32(ds, esp + 12);
    eax--;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_1cfb47;
    eax = edx + 1;
    edx = esp + 12;
    sub_1cf989();
    edx = eax;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 12, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_1cfb47;
    eax = edx + 1;
    edx = esp + 12;
    sub_1cf989();
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 24, eax);
loc_1cfb47: // 0160:1cfb47
    memoryASet32(ds, ecx + 28, 0x00000000);
loc_1cfb4e: // 0160:1cfb4e
    edx = 0x00000002;
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
    if (memoryAGet(ds, ebx) != 0x2f)
        goto loc_1cfb9b;
    edx = esp + 8;
    eax = ebx + 1;
    sub_1cf989();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1cfb9b;
    eax = edx + 1;
    edx = esp + 4;
    sub_1cf989();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_1cfb9b;
    eax = edx + 1;
    edx = esp;
    sub_1cf989();
    ebx = eax;
loc_1cfb9b: // 0160:1cfb9b
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ecx, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, ecx + 4, eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    esp += 0x00000010;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1cfc46() // 0160:1cfc46 +long
{
    esp -= 4;
    eax = esp;
    eax -= memoryAGet32(ds, 0x1e3dcc);
    esp += 4;
}
void sub_1cfc4f() // 0160:1cfc4f +long
{
    esp -= 4;
    memoryASet32(ds, 0x1e421c, 0x00008000);
    esp += 4;
}
void sub_1d2fb6() // 0160:1d2fb6 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(edx);
    ebp = eax;
    ax = 0x1600;
    interrupt(0x2f);
    if (!al)
        goto loc_1d301c;
    if (al == 0x80)
        goto loc_1d301c;
    al = 0;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax != 0x0666)
        goto loc_1d301c;
    al = 0x22;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax)
        goto loc_1d301c;
    dh = 0x01;
    al = 0x1e;
    ecx = 0;
    ebx = 0;
    memoryASet(ds, 0x1e4199, dh);
    edx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    eax = cs;
    ebx = 0x003f67b4;
    edx = eax;
    ecx = ebx;
    al = 0x20;
    ecx >>= 16;
    ah = 0xfa;
    interrupt(0x2f);
    al = 0x01;
    goto loc_1d3076;
loc_1d301c: // 0160:1d301c
    edx = memoryAGet32(ds, esp);
    if (ebp)
        goto loc_1d3028;
    if (!dx)
        goto loc_1d3074;
loc_1d3028: // 0160:1d3028
    esi = 0x001d6340;
    eax = 0x00000a00;
    push(es);
    interrupt(0x31);
    eax = -flags.carry;
    es = pop();
    if (eax)
        goto loc_1d3074;
    eax = 0x00000007;
    ebx = 0x001d0178;
    ecx = cs;
    sub_1cbdcb();
    es = memoryAGet16(ds, esp);
    ah = memoryAGet(es, ebp + 64);
    memoryASet(es, ebp + 62, 0x01);
    ah |= 0x04;
    memoryASet(es, ebp + 64, ah);
    eax = cr0;
    al |= 0x04;
    dl = 0x01;
    cr0 = eax;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x1e4198, dl);
loc_1d3074: // 0160:1d3074
    al = 0;
loc_1d3076: // 0160:1d3076
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    flags.zero = !esp;
    esp += 4;
}
void sub_1d30da() // 0160:1d30da +long
{
    esp -= 4;
    push(ax);
    stop("disassembly failed at 160:1d30dd fninit ");
    fld1();
    stop("disassembly failed at 160:1d30e1 fldz ");
    stop("disassembly failed at 160:1d30e3 fdivp st(1)");
    fld80(st(0));
    stop("disassembly failed at 160:1d30e7 fchs ");
    stop("disassembly failed at 160:1d30e9 fcompp ");
    ax = fnstsw();
    al = 0x02;
    sahf();
    if (flags.zero)
        goto loc_1d30f4;
    al = 0x03;
loc_1d30f4: // 0160:1d30f4
    stop("disassembly failed at 160:1d30f5 fninit ");
    fldcw(memoryAGet16(ds, esp));
    tx = memoryAGet16(ds, esp); memoryASet16(ds, esp, ax); ax = tx;
    ax = pop();
    esp += 4;
}
void sub_1d3101() // 0160:1d3101 +long
{
    esp -= 4;
    eax = 0x003f6838;
    esp += 4;
}
void sub_1d3107() // 0160:1d3107 +long
{
    esp -= 4;
    eax = 0x003f6834;
    esp += 4;
}
void sub_1d310d() // 0160:1d310d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    al = 0x00;
    ah = 0x44;
    interrupt(0x21);
    edx = rcl32(edx, 0x00000001);
    edx = ror32(edx, 0x00000001);
    al = !!(dl & 0x80);
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d312b() // 0160:1d312b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (eax < memoryAGet32(ds, 0x1e41ac))
        goto loc_1d313e;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1d313e: // 0160:1d313e
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1d3174;
    ebx = eax;
    eax = memoryAGet32(ds, 0x1e4200);
    ebx <<= 2;
    eax += ebx;
    cl = memoryAGet(ds, eax + 1);
    if (cl & 0x40)
        goto loc_1d3174;
    ch = cl;
    ch |= 0x40;
    memoryASet(ds, eax + 1, ch);
    eax = edx;
    sub_1d310d();
    if (!eax)
        goto loc_1d3174;
    eax = memoryAGet32(ds, 0x1e4200);
    memoryASet(ds, ebx + eax + 1, memoryAGet(ds, ebx + eax + 1) | 0x20);
loc_1d3174: // 0160:1d3174
    eax = memoryAGet32(ds, 0x1e4200);
    eax = memoryAGet32(ds, eax + edx*4);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d3180() // 0160:1d3180 +long
{
    esp -= 4;
    push32(ebx);
    dh |= 0x40;
    ebx = edx;
    edx = eax;
    eax = memoryAGet32(ds, 0x1e4200);
    edx <<= 2;
    memoryASet32(ds, edx + eax, ebx);
    ebx = pop32();
    esp += 4;
}
void sub_1d31a0() // 0160:1d31a0 +long
{
    esp -= 4;
    push32(eax);
    push32(ecx);
    dh = dl;
    edx <<= 8;
    dl = dh;
    edx <<= 8;
    dl = dh;
    ecx = ebx;
    sub_1cbe00();
    ecx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1d31b8() // 0160:1d31b8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = memoryAGet(ds, 0x1e3e89);
    ah &= 0xf8;
    dl = ah;
    memoryASet(ds, 0x1e3e89, ah);
    dl |= 0x04;
    ecx = 0x001e3e48;
    memoryASet(ds, 0x1e3e89, dl);
    goto loc_1d321f;
loc_1d31dc: // 0160:1d31dc
    eax = 0x00000008;
    sub_1cc9a1();
    ebx = eax;
    if (eax)
        goto loc_1d320b;
    eax = 0x00000008;
    sub_1cc9a1();
    ebx = eax;
    if (eax)
        goto loc_1d320b;
    eax = 0x001d6350;
    edx = 0x00000001;
    sub_1d3632();
loc_1d320b: // 0160:1d320b
    edx = memoryAGet32(ds, 0x3f677c);
    memoryASet32(ds, ebx + 4, ecx);
    memoryASet32(ds, 0x3f677c, ebx);
    ecx += 0x0000001a;
    memoryASet32(ds, ebx, edx);
loc_1d321f: // 0160:1d321f
    edx = memoryAGet32(ds, ecx + 12);
    if (edx)
        goto loc_1d31dc;
    memoryASet32(ds, 0x3f6778, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d3230() // 0160:1d3230 +long
{
    esp -= 4;
    goto loc_1d3230;
loc_1cdf0d: // 0160:1cdf0d
    push32(edx);
loc_1cdf0e: // 0160:1cdf0e
    edx = memoryAGet32(ds, 0x3f6778);
    if (!edx)
        goto loc_1cdf29;
    eax = edx;
    edx = memoryAGet32(ds, edx);
    sub_1cca84();
    memoryASet32(ds, 0x3f6778, edx);
    goto loc_1cdf0e;
loc_1cdf29: // 0160:1cdf29
    edx = pop32();
    esp += 4;
    return;
    // gap 21253 bytes
loc_1d3230: // 0160:1d3230
    eax = 0;
    sub_1d3241();
    goto loc_1cdf0d;
}
void sub_1d3241() // 0160:1d3241 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    esi = 0x001e3e48;
    eax += eax;
    ebx = 0;
    esi += eax;
    eax = memoryAGet32(ds, 0x3f677c);
    goto loc_1d3288;
loc_1d3263: // 0160:1d3263
    ecx = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, eax + 4);
    edx = 0x00000001;
    if (memoryAGet(ds, eax + 13) & 0x40)
        goto loc_1d3280;
    if (eax < esi)
        goto loc_1d3286;
    if (eax >= 0x001e3eca)
        goto loc_1d3280;
    edx = 0;
loc_1d3280: // 0160:1d3280
    sub_1cc26d();
    ebx++;
loc_1d3286: // 0160:1d3286
    eax = ecx;
loc_1d3288: // 0160:1d3288
    if (eax)
        goto loc_1d3263;
    eax = ebx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d3293() // 0160:1d3293 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    sub_1d312b();
    if (!(al & 0x80))
        goto loc_1d32d7;
    al = 0x02;
    ebx = esi;
    edx = 0;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    edi = edx;
    if ((int32_t)edx >= 0)
        goto loc_1d32d7;
    eax = 0;
    ax = dx;
loc_1d32d0: // 0160:1d32d0
    sub_1ce60d();
    goto loc_1d3307;
loc_1d32d7: // 0160:1d32d7
    edx = memoryAGet32(ds, esp);
    ebx = esi;
    ecx = ebp;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    edi = eax;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1d32f7;
    eax = 0;
    ax = si;
    goto loc_1d32d0;
loc_1d32f7: // 0160:1d32f7
    if (eax == ebp)
        goto loc_1d3305;
    eax = 0x0000000c;
    sub_1cdba8();
loc_1d3305: // 0160:1d3305
    eax = edx;
loc_1d3307: // 0160:1d3307
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1d330f() // 0160:1d330f +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    ah = 0x41;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1d332a;
    eax &= 0x0000ffff;
    sub_1ce60d();
    edx = pop32();
    esp += 4;
    return;
loc_1d332a: // 0160:1d332a
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_1d3333() // 0160:1d3333 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    edx = memoryAGet32(ds, 0x3f677c);
    ebx = 0;
    goto loc_1d3358;
loc_1d3342: // 0160:1d3342
    eax = memoryAGet32(ds, edx + 4);
    if (!(memoryAGet32(ds, eax + 12) & ecx))
        goto loc_1d3356;
    ebx++;
    if (!(memoryAGet(ds, eax + 13) & 0x10))
        goto loc_1d3356;
    sub_1cdf5c();
loc_1d3356: // 0160:1d3356
    edx = memoryAGet32(ds, edx);
loc_1d3358: // 0160:1d3358
    if (edx)
        goto loc_1d3342;
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d3362() // 0160:1d3362 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x1e3ddc);
    memoryASet32(ds, 0x1e3ddc, edx);
    if (eax)
        goto loc_1d337d;
    ah = 0x01;
    interrupt(0x21);
    eax &= 0x000000ff;
loc_1d337d: // 0160:1d337d
    edx = pop32();
    esp += 4;
}
void sub_1d3380() // 0160:1d3380 +long
{
    esp -= 4;
    memoryASet16(ds, 0x1e4204, ss);
    esp += 4;
}
void sub_1d3388() // 0160:1d3388 +long +stackDrop4
{
    esp -= 4;
    etx = memoryAGet32(ds, esp + 4); memoryASet32(ds, esp + 4, eax); eax = etx;
    sub_1d339b();
    eax = memoryAGet32(ds, esp + 4);
    esp += 4;
    esp += 4;
}
void sub_1d339b() // 0160:1d339b +long
{
    esp -= 4;
    if (eax >= esp)
        goto loc_1d33ac;
    eax -= esp;
    eax = -eax;
    if (eax <= memoryAGet32(ds, 0x1e3dcc))
        goto loc_1d33ac;
    esp += 4;
    return;
loc_1d33ac: // 0160:1d33ac
    ax = ss;
    if (ax == memoryAGet16(ds, 0x1e4204))
        goto loc_1d33b9;
    esp += 4;
    return;
loc_1d33b9: // 0160:1d33b9
    eax = 0x001e4206;
    edx = 0x00000001;
    sub_1d3632();
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x1e405c) != 0x00000000)
        goto loc_1d3493;
    fs = memoryAGet16(ds, 0x1e3df1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x1e3ded);
    es = eax;
    eax = edi;
loc_1d33f3: // 0160:1d33f3
    if (dl == memoryAGet(es, eax))
        goto loc_1d340b;
loc_1d33f8: // 0160:1d33f8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_1d3406;
    eax = ebx;
    goto loc_1d33f8;
loc_1d3406: // 0160:1d3406
    ecx++;
    eax = ebx;
    goto loc_1d33f3;
loc_1d340b: // 0160:1d340b
    eax -= edi;
    if (eax)
        goto loc_1d3414;
    eax = 0x00000001;
loc_1d3414: // 0160:1d3414
    sub_1cc9a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_1d3493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_1cc9a1();
    if (!eax)
        goto loc_1d348c;
    memoryASet32(ds, 0x1e405c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_1d3447: // 0160:1d3447
    if (memoryAGet(es, eax) == 0x00)
        goto loc_1d3467;
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, ebx);
loc_1d3456: // 0160:1d3456
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_1d3456;
    ecx += 0x00000004;
    esi++;
    goto loc_1d3447;
loc_1d3467: // 0160:1d3467
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x1e4060, edx);
    eax = edx;
    edx = 0;
    sub_1d31a0();
    goto loc_1d3493;
loc_1d348c: // 0160:1d348c
    eax = edx;
    sub_1cca84();
loc_1d3493: // 0160:1d3493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d33b9() // 0160:1d33b9 +long
{
    esp -= 4;
    eax = 0x001e4206;
    edx = 0x00000001;
    sub_1d3632();
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x1e405c) != 0x00000000)
        goto loc_1d3493;
    fs = memoryAGet16(ds, 0x1e3df1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x1e3ded);
    es = eax;
    eax = edi;
loc_1d33f3: // 0160:1d33f3
    if (dl == memoryAGet(es, eax))
        goto loc_1d340b;
loc_1d33f8: // 0160:1d33f8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_1d3406;
    eax = ebx;
    goto loc_1d33f8;
loc_1d3406: // 0160:1d3406
    ecx++;
    eax = ebx;
    goto loc_1d33f3;
loc_1d340b: // 0160:1d340b
    eax -= edi;
    if (eax)
        goto loc_1d3414;
    eax = 0x00000001;
loc_1d3414: // 0160:1d3414
    sub_1cc9a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_1d3493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_1cc9a1();
    if (!eax)
        goto loc_1d348c;
    memoryASet32(ds, 0x1e405c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_1d3447: // 0160:1d3447
    if (memoryAGet(es, eax) == 0x00)
        goto loc_1d3467;
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, ebx);
loc_1d3456: // 0160:1d3456
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_1d3456;
    ecx += 0x00000004;
    esi++;
    goto loc_1d3447;
loc_1d3467: // 0160:1d3467
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x1e4060, edx);
    eax = edx;
    edx = 0;
    sub_1d31a0();
    goto loc_1d3493;
loc_1d348c: // 0160:1d348c
    eax = edx;
    sub_1cca84();
loc_1d3493: // 0160:1d3493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d33c8() // 0160:1d33c8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x1e405c) != 0x00000000)
        goto loc_1d3493;
    fs = memoryAGet16(ds, 0x1e3df1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x1e3ded);
    es = eax;
    eax = edi;
loc_1d33f3: // 0160:1d33f3
    if (dl == memoryAGet(es, eax))
        goto loc_1d340b;
loc_1d33f8: // 0160:1d33f8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_1d3406;
    eax = ebx;
    goto loc_1d33f8;
loc_1d3406: // 0160:1d3406
    ecx++;
    eax = ebx;
    goto loc_1d33f3;
loc_1d340b: // 0160:1d340b
    eax -= edi;
    if (eax)
        goto loc_1d3414;
    eax = 0x00000001;
loc_1d3414: // 0160:1d3414
    sub_1cc9a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_1d3493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_1cc9a1();
    if (!eax)
        goto loc_1d348c;
    memoryASet32(ds, 0x1e405c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_1d3447: // 0160:1d3447
    if (memoryAGet(es, eax) == 0x00)
        goto loc_1d3467;
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, ebx);
loc_1d3456: // 0160:1d3456
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_1d3456;
    ecx += 0x00000004;
    esi++;
    goto loc_1d3447;
loc_1d3467: // 0160:1d3467
    edx = memoryAGet32(ds, 0x1e405c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x1e4060, edx);
    eax = edx;
    edx = 0;
    sub_1d31a0();
    goto loc_1d3493;
loc_1d348c: // 0160:1d348c
    eax = edx;
    sub_1cca84();
loc_1d3493: // 0160:1d3493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d356b() // 0160:1d356b +long
{
    esp -= 4;
    goto loc_1d356b;
loc_1d3565: // 0160:1d3565
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1d356b: // 0160:1d356b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(eax);
    if (eax < memoryAGet32(ds, 0x1e3dd0))
        goto loc_1d35d2;
    if (memoryAGet(ds, 0x1e3dea) != 0x00)
        goto loc_1d35e4;
    ebp = memoryAGet32(ds, esp);
    ebp += 0x0000000f;
    ebp >>= 4;
    if (ebp)
        goto loc_1d3596;
    ebp = 0x0fffffff;
loc_1d3596: // 0160:1d3596
    ebx = 0;
    eax = ds;
    bx = ax;
    ah = 0xed;
    interrupt(0x21);
    eax <<= 31;
    edi &= 0x0000ffff;
    edi |= eax;
    if ((int32_t)edi >= 0)
        goto loc_1d35c0;
    es = edi;
    ebx = ebp;
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_1d35d2;
loc_1d35c0: // 0160:1d35c0
    eax = ds;
    es = eax;
    ebx = ebp;
loc_1d35c6: // 0160:1d35c6
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1d3615;
loc_1d35d2: // 0160:1d35d2
    sub_1d3101();
    memoryASet32(ds, eax, 0x00000005);
    eax = 0xffffffff;
    goto loc_1d3623;
loc_1d35e4: // 0160:1d35e4
    ebx = memoryAGet32(ds, esp);
    ebx += 0x00000fff;
    ebx >>= 12;
    if (ebx)
        goto loc_1d35f9;
    ebx = 0x000fffff;
loc_1d35f9: // 0160:1d35f9
    dl = memoryAGet(ds, 0x1e3dea);
    if (dl != 0x01)
        goto loc_1d360f;
    if (dl != memoryAGet(ds, 0x1e3deb))
        goto loc_1d360f;
    ebx <<= 8;
loc_1d360f: // 0160:1d360f
    eax = ds;
    es = eax;
    goto loc_1d35c6;
loc_1d3615: // 0160:1d3615
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, 0x1e3dbc);
    memoryASet32(ds, 0x1e3dbc, ebx);
loc_1d3623: // 0160:1d3623
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    goto loc_1d3565;
}
void sub_1d3632() // 0160:1d3632 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = ds;
    sub_1d3f8a();
    if (eax)
        goto loc_1d364c;
    eax = ebx;
    edx = ecx;
    sub_1cbccd();
loc_1d364c: // 0160:1d364c
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d364f() // 0160:1d364f +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    if (!dl)
        goto loc_1d365b;
    memoryASet(ds, eax, 0x2f);
    goto loc_1d3669;
loc_1d365b: // 0160:1d365b
    push32(edx);
    ah = 0x37;
    al = 0x00;
    interrupt(0x21);
    al = dl;
    ah = 0x00;
    edx = pop32();
    memoryASet(ds, ebx, al);
loc_1d3669: // 0160:1d3669
    memoryASet(ds, ebx + 1, 0x63);
    eax = ebx;
    memoryASet(ds, ebx + 2, 0x00);
    ebx = pop32();
    esp += 4;
}
void sub_1d3675() // 0160:1d3675 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:1d3677 enter 0x2c, 0");
    edx = 0x00000007;
    ebx = ebp + -44;
    sub_1d3fb0();
    al = !eax;
    eax = al;
    esp = ebp; ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d3694() // 0160:1d3694 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:1d3696 enter 4, 0");
    push32(eax);
    esi = edx;
    edi = ebx;
    memoryASet32(ss, ebp + -4, ecx);
    eax = edx;
    ecx = 0;
    edx = memoryAGet32(ss, ebp + 16);
    sub_1d4179();
    push32(memoryAGet32(ss, ebp + 16));
    push32(memoryAGet32(ss, ebp + -4));
    push32(edi);
    push32(esi);
    push32(memoryAGet32(ss, ebp + -8));
    sub_1d41ce();
    esp += 0x00000014;
    esp = ebp; ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1d36c7() // 0160:1d36c7 +long
{
    esp -= 4;
    push32(0x000000e4);
    sub_1d3388();
    push32(esi);
    push32(edi);
    push(es);
    stop("disassembly failed at 160:1d36d4 enter 0xb0, 0");
    push32(eax);
    ebp -= 0x00000082;
    esi = edx;
    memoryASet32(ss, ebp + 110, ebx);
    edx = ecx;
    memoryASet(ss, ebp + 126, 0x00);
    if (eax < 0x00000002)
        goto loc_1d3703;
    eax = 0x00000009;
    sub_1cdba8();
loc_1d36f9: // 0160:1d36f9
    eax = 0xffffffff;
    goto loc_1d39ba;
loc_1d3703: // 0160:1d3703
    push32(0x00000000);
    eax = ebp + 82;
    push32(eax);
    eax = ebp + 86;
    ecx = ebp + 90;
    push32(eax);
    eax = ebx;
    ebx = ebp + 94;
    sub_1d4041();
    memoryASet32(ss, ebp + 118, eax);
    if (eax == 0xffffffff)
        goto loc_1d39ba;
    eax = esi;
    sub_1d39c5();
    edx = eax + 154;
    eax = edx;
    sub_1cc9a1();
    ebx = eax;
    memoryASet32(ss, ebp + 102, eax);
    if (eax)
        goto loc_1d376d;
    ebx = edx + 3;
    bl &= 0xfc;
    sub_1cfc46();
    if (ebx >= eax)
        goto loc_1d375a;
    eax = ebx;
    esp -= eax;
    eax = esp;
    goto loc_1d375c;
loc_1d375a: // 0160:1d375a
    eax = 0;
loc_1d375c: // 0160:1d375c
    memoryASet32(ss, ebp + 122, eax);
    if (eax)
        goto loc_1d3770;
    eax = memoryAGet32(ss, ebp + 94);
    sub_1cca84();
    goto loc_1d36f9;
loc_1d376d: // 0160:1d376d
    memoryASet32(ss, ebp + 122, eax);
loc_1d3770: // 0160:1d3770
    eax = ebp + 66;
    ebx = ebp + 70;
    ecx = ebp + 74;
    push32(eax);
    eax = ebp + 62;
    edx -= 0x00000093;
    push32(eax);
    edx += memoryAGet32(ss, ebp + 122);
    eax = esi;
    sub_1d42e0();
    eax = ebp + -46;
    indirectCall(cs, memoryAGet32(ds, 0x1e41a0)); // 0160:1d3791;
    eax = memoryAGet32(ss, ebp + 82);
    sub_1cc9a1();
    edx = eax;
    memoryASet32(ss, ebp + 98, eax);
    if (eax)
        goto loc_1d37f2;
    eax = memoryAGet32(ss, ebp + 82);
    eax += 0x00000003;
    al &= 0xfc;
    edx = eax;
    sub_1cfc46();
    if (edx >= eax)
        goto loc_1d37c9;
    eax = memoryAGet32(ss, ebp + 82);
    eax += 0x00000003;
    al &= 0xfc;
    esp -= eax;
    eax = esp;
    goto loc_1d37cb;
loc_1d37c9: // 0160:1d37c9
    eax = 0;
loc_1d37cb: // 0160:1d37cb
    memoryASet32(ss, ebp + 114, eax);
    if (eax)
        goto loc_1d37f5;
    eax = 0x00000002;
    sub_1cdba8();
    eax = 0x0000000a;
    memoryASet32(ss, ebp + 118, 0xffffffff);
    sub_1cdbcb();
    goto loc_1d3996;
loc_1d37f2: // 0160:1d37f2
    memoryASet32(ss, ebp + 114, eax);
loc_1d37f5: // 0160:1d37f5
    if (memoryAGet(ds, 0x1e3df3) < 0x03)
        goto loc_1d3815;
    eax = memoryAGet32(ss, ebp + 70);
    if (memoryAGet(ds, eax) != 0x00)
        goto loc_1d3815;
    eax = memoryAGet32(ss, ebp + 74);
    if (memoryAGet(ds, eax) != 0x00)
        goto loc_1d3815;
    memoryASet32(ss, ebp + 74, 0x001d6380);
loc_1d3815: // 0160:1d3815
    push32(memoryAGet32(ss, ebp + 66));
    eax = memoryAGet32(ss, ebp + 122);
    edx = memoryAGet32(ss, ebp + 70);
    ebx = memoryAGet32(ss, ebp + 74);
    ecx = memoryAGet32(ss, ebp + 62);
    sub_1d437b();
    eax = 0x00000001;
    sub_1cdba8();
    eax = memoryAGet32(ss, ebp + 66);
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_1d3885;
    edx = 0x001d6383;
    sub_1cc54a();
    if (eax)
        goto loc_1d3865;
    eax = memoryAGet32(ss, ebp + 122);
    memoryASet32(ss, ebp + 118, 0xffffffff);
    sub_1d3675();
    if (eax)
        goto loc_1d3933;
    goto loc_1d3996;
loc_1d3865: // 0160:1d3865
    edx = memoryAGet32(ss, ebp + 122);
    eax = 0;
    ebx = memoryAGet32(ss, ebp + 114);
    sub_1cdba8();
    push32(memoryAGet32(ss, ebp + 110));
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_1d3694();
    goto loc_1d3993;
loc_1d3885: // 0160:1d3885
    eax = memoryAGet32(ss, ebp + 122);
    edx = memoryAGet32(ss, ebp + 122);
    sub_1d39c5();
    edx += eax;
    memoryASet32(ss, ebp + 106, edx);
    if (memoryAGet(ss, ebp + 126) == 0x00)
        goto loc_1d38a7;
    eax = 0x00000001;
    sub_1cdba8();
    goto loc_1d38d0;
loc_1d38a7: // 0160:1d38a7
    ebx = memoryAGet32(ss, ebp + 114);
    push(ds);
    es = pop();
    edi = edx;
    esi = 0x001d6388;
    eax = 0;
    edx = memoryAGet32(ss, ebp + 122);
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_1cdba8();
    push32(memoryAGet32(ss, ebp + 110));
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_1d3694();
    memoryASet32(ss, ebp + 118, eax);
loc_1d38d0: // 0160:1d38d0
    sub_1d3101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_1d3996;
    edi = memoryAGet32(ss, ebp + 106);
    edx = memoryAGet32(ss, ebp + 122);
    eax = 0;
    ebx = memoryAGet32(ss, ebp + 114);
    sub_1cdba8();
    push(ds);
    es = pop();
    esi = 0x001d638d;
    push32(memoryAGet32(ss, ebp + 110));
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_1d3694();
    memoryASet32(ss, ebp + 118, eax);
    sub_1d3101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_1d3996;
    edi = memoryAGet32(ss, ebp + 106);
    eax = 0;
    esi = 0x001d6383;
    sub_1cdba8();
    eax = memoryAGet32(ss, ebp + 122);
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_1d3675();
    if (!eax)
        goto loc_1d3996;
loc_1d3933: // 0160:1d3933
    eax = memoryAGet32(ss, ebp + 94);
    edx = memoryAGet32(ss, ebp + 110);
    ebx = memoryAGet32(ss, ebp + 114);
    ecx = 0x00000001;
    sub_1cca84();
    eax = memoryAGet32(ss, ebp + 122);
    memoryASet32(ss, ebp + 94, 0x00000000);
    sub_1d4179();
    push32(0x00000000);
    push32(memoryAGet32(ss, ebp + 114));
    edx = memoryAGet(ss, ebp + 126);
    push32(memoryAGet32(ss, ebp + 122));
    eax = ebp + 78;
    sub_1d364f();
    push32(eax);
    if (memoryAGet(ss, ebp + 126) == 0x00)
        goto loc_1d3977;
    eax = 0x001d639a;
    goto loc_1d397c;
loc_1d3977: // 0160:1d3977
    eax = 0x001d639e;
loc_1d397c: // 0160:1d397c
    push32(eax);
    eax = 0x001d6392;
    sub_1cc798();
    push32(eax);
    push32(memoryAGet32(ss, ebp + -50));
    sub_1d4446();
    esp += 0x0000001c;
loc_1d3993: // 0160:1d3993
    memoryASet32(ss, ebp + 118, eax);
loc_1d3996: // 0160:1d3996
    eax = memoryAGet32(ss, ebp + 98);
    sub_1cca84();
    eax = memoryAGet32(ss, ebp + 102);
    sub_1cca84();
    eax = memoryAGet32(ss, ebp + 94);
    sub_1cca84();
    eax = ebp + -46;
    indirectCall(cs, memoryAGet32(ds, 0x1e41a4)); // 0160:1d39b1;
    eax = memoryAGet32(ss, ebp + 118);
loc_1d39ba: // 0160:1d39ba
    esp = ebp + 130;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1d39c5() // 0160:1d39c5 +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = ecx;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1d39de() // 0160:1d39de +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = edx;
loc_1d39e2: // 0160:1d39e2
    edx = 0;
    dl = memoryAGet(ds, eax);
    if (edx == ebx)
        goto loc_1d39f5;
    edx = eax;
    cl = memoryAGet(ds, edx);
    eax++;
    if (cl)
        goto loc_1d39e2;
    eax = 0;
loc_1d39f5: // 0160:1d39f5
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d39f8() // 0160:1d39f8 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = ebx;
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = edi;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1d3f8a() // 0160:1d3f8a +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x1e4224) == 0x00)
        goto loc_1d3fad;
    edx &= 0x0000ffff;
    push32(edx);
    push32(eax);
    stop("breakpoint");
    goto loc_1d3fa4;
    // gap 6 bytes
loc_1d3fa4: // 0160:1d3fa4
    eax = 0x00000001;
    esp += 0x00000008;
    esp += 4;
    return;
loc_1d3fad: // 0160:1d3fad
    eax = 0;
    esp += 4;
}
void sub_1d3fb0() // 0160:1d3fb0 +long
{
    esp -= 4;
    push32(ecx);
    push32(eax);
    push32(edx);
    edx = ebx;
    ah = 0x1a;
    interrupt(0x21);
    ecx = pop32();
    edx = pop32();
    ah = 0x4e;
    interrupt(0x21);
    sub_1d495e();
    edx = ebx;
    sub_1d3fec();
    ecx = pop32();
    esp += 4;
}
void sub_1d3fec() // 0160:1d3fec +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x1e3dea) != 0x09)
        goto loc_1d400e;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ah = 0x2f;
    interrupt(0x21);
    esi = ebx;
    edi = edx;
    ecx = 0x0000002b;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1d400e: // 0160:1d400e
    esp += 4;
    return;
}
void sub_1d4032() // 0160:1d4032 +long
{
    esp -= 4;
    push32(ebx);
loc_1d4033: // 0160:1d4033
    bl = memoryAGet(ds, edx);
    memoryASet(ds, eax, bl);
    if (!bl)
        goto loc_1d403f;
    eax++;
    edx++;
    goto loc_1d4033;
loc_1d403f: // 0160:1d403f
    ebx = pop32();
    esp += 4;
}
void sub_1d4041() // 0160:1d4041 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:1d4043 enter 8, 0");
    esi = eax;
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    if (edx)
        goto loc_1d4058;
    edi = memoryAGet32(ds, 0x1e405c);
loc_1d4058: // 0160:1d4058
    ebx = 0;
    if (!edi)
        goto loc_1d4074;
    edx = edi;
    goto loc_1d406f;
loc_1d4062: // 0160:1d4062
    eax = memoryAGet32(ds, edx);
    sub_1d39c5();
    eax++;
    edx += 0x00000004;
    ebx += eax;
loc_1d406f: // 0160:1d406f
    if (memoryAGet32(ds, edx) != 0x00000000)
        goto loc_1d4062;
loc_1d4074: // 0160:1d4074
    ebx++;
    if (memoryAGet32(ss, ebp + 24) == 0x00000000)
        goto loc_1d4087;
    eax = memoryAGet32(ds, esi);
    sub_1d39c5();
    eax += 0x00000003;
    ebx += eax;
loc_1d4087: // 0160:1d4087
    eax = memoryAGet32(ds, 0x1e421c);
    ebx += 0x0000000f;
    memoryASet32(ss, ebp + -8, eax);
    eax = ebx;
    memoryASet32(ds, 0x1e421c, 0x00000010);
    sub_1cc9a1();
    if (eax)
        goto loc_1d40d8;
    eax = ebx;
    sub_1cc9a1();
    if (eax)
        goto loc_1d40d8;
    eax = 0x00000005;
    sub_1cdba8();
    eax = 0x00000008;
    sub_1cdbcb();
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, 0x1e421c, eax);
loc_1d40ce: // 0160:1d40ce
    eax = 0xffffffff;
    goto loc_1d4173;
loc_1d40d8: // 0160:1d40d8
    edx = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, 0x1e421c, edx);
    edx = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, edx, eax);
    edx = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, edx, 0x00000000);
    memoryASet32(ds, ecx, eax);
    if (!edi)
        goto loc_1d4109;
    ecx = edi;
    goto loc_1d4104;
loc_1d40f9: // 0160:1d40f9
    edx = memoryAGet32(ds, ecx);
    sub_1d4032();
    eax++;
    ecx += 0x00000004;
loc_1d4104: // 0160:1d4104
    if (memoryAGet32(ds, ecx) != 0x00000000)
        goto loc_1d40f9;
loc_1d4109: // 0160:1d4109
    memoryASet(ds, eax, 0x00);
    eax++;
    if (memoryAGet32(ss, ebp + 24) == 0x00000000)
        goto loc_1d411c;
    eax++;
    eax++;
    edx = memoryAGet32(ds, esi);
    sub_1d4971();
loc_1d411c: // 0160:1d411c
    edx = 0;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_1d413d;
    esi += 0x00000004;
    goto loc_1d4137;
loc_1d4128: // 0160:1d4128
    if (!edx)
        goto loc_1d412d;
    edx++;
loc_1d412d: // 0160:1d412d
    sub_1d39c5();
    esi += 0x00000004;
    edx += eax;
loc_1d4137: // 0160:1d4137
    eax = memoryAGet32(ds, esi);
    if (eax)
        goto loc_1d4128;
loc_1d413d: // 0160:1d413d
    if (edx <= 0x0000007e)
        goto loc_1d4165;
    eax = 0x00000002;
    sub_1cdba8();
    eax = 0x0000000a;
    sub_1cdbcb();
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax);
    sub_1cca84();
    goto loc_1d40ce;
loc_1d4165: // 0160:1d4165
    eax = memoryAGet32(ss, ebp + 20);
    memoryASet32(ds, eax, 0x00000090);
    eax = ebx;
    eax >>= 4;
loc_1d4173: // 0160:1d4173
    esp = ebp; ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_1d4179() // 0160:1d4179 +long
{
    esp -= 4;
    push32(esi);
    stop("disassembly failed at 160:1d417a enter 4, 0");
    esi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    if (ecx)
        goto loc_1d4188;
    ebx++;
loc_1d4188: // 0160:1d4188
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_1d41b2;
    esi += 0x00000004;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_1d41b2;
loc_1d4195: // 0160:1d4195
    eax = ebx;
    edx = memoryAGet32(ds, esi);
    sub_1d4032();
    esi += 0x00000004;
    edx = eax;
    ebx = eax;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_1d41b2;
    ebx = eax + 1;
    memoryASet(ds, eax, 0x20);
    goto loc_1d4195;
loc_1d41b2: // 0160:1d41b2
    if (!ecx)
        goto loc_1d41bc;
    memoryASet(ds, ebx, 0x00);
    esp = ebp; ebp = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1d41bc: // 0160:1d41bc
    dl = bl;
    memoryASet(ds, ebx, 0x0d);
    dl -= memoryAGet(ss, ebp + -4);
    ebx = memoryAGet32(ss, ebp + -4);
    dl--;
    memoryASet(ds, ebx, dl);
    esp = ebp; ebp = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1d41ce() // 0160:1d41ce +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(esi);
    push32(edi);
    push32(edx);
    push32(ecx);
    push32(ebx);
    push(es);
    push(ds);
    ax = ss;
    ds = eax;
    eax = memoryAGet32(ss, ebp + 20);
    memoryASet32(ds, 0x1e4228, eax);
    memoryASet16(ds, 0x1e422c, ds);
    eax = 0;
    memoryASet32(ds, 0x1e4234, eax);
    memoryASet32(ds, 0x1e423a, eax);
    memoryASet16(ds, 0x1e4238, ax);
    memoryASet16(ds, 0x1e423e, ax);
    memoryASet32(ds, 0x1e4240, eax);
    memoryASet32(ds, 0x1e4244, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x1e422e, eax);
    memoryASet16(ds, 0x1e4232, ds);
    push(ds);
    es = pop();
    push32(ebp);
    push(es);
    push(ds);
    memoryASet16(ds, 0x1e424c, ss);
    memoryASet32(ds, 0x1e4248, esp);
    memoryASet16(ds, 0x1e424e, ds);
    ebx = 0x001e4228;
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_1d4248;
    al = 0x04;
    ecx = 0;
    goto loc_1d424a;
loc_1d4248: // 0160:1d4248
    al = 0;
loc_1d424a: // 0160:1d424a
    flags.carry = 0;
    push32(eax);
    ah = 0x0b;
    interrupt(0x21);
    eax = pop32();
    memoryASet32(ds, 0x1e3de4, 0x00000001);
    edx = memoryAGet32(ss, ebp + 12);
    ah = 0x4b;
    interrupt(0x21);
    ss = memoryAGet16(ds, 0x1e424c);
    esp = memoryAGet32(ds, 0x1e4248);
    ds = memoryAGet16(ds, 0x1e424e);
    ds = pop();
    memoryASet32(ds, 0x1e3de4, 0x00000000);
    es = pop();
    ebp = pop32();
    if (flags.carry)
        goto loc_1d4289;
    ah = 0x4d;
    interrupt(0x21);
loc_1d4289: // 0160:1d4289
    edx = -flags.carry;
    eax = ax;
    sub_1ce608();
    ds = pop();
    es = pop();
    ebx = pop32();
    ecx = pop32();
    edx = pop32();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1d429c() // 0160:1d429c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = ebx;
    if (eax)
        goto loc_1d42a9;
    eax = edx;
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1d42a9: // 0160:1d42a9
    ebx = ecx;
    ebx -= esi;
    memoryASet32(ds, eax, edx);
    if (ebx < 0x00000093)
        goto loc_1d42bc;
    ebx = 0x00000092;
loc_1d42bc: // 0160:1d42bc
    edi = edx;
    ecx = ebx;
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = edx + ebx;
    memoryASet(ds, eax, 0x00);
    eax++;
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1d42e0() // 0160:1d42e0 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_1d430a;
    if (memoryAGet(ds, esi + 1) != 0x3a)
        goto loc_1d430a;
    if (!ebx)
        goto loc_1d4305;
    memoryASet32(ds, ebx, edx);
    al = memoryAGet(ds, esi);
    memoryASet(ds, edx + 1, 0x3a);
    memoryASet(ds, edx + 2, 0x00);
    memoryASet(ds, edx, al);
    edx += 0x00000003;
loc_1d4305: // 0160:1d4305
    esi += 0x00000002;
    goto loc_1d4314;
loc_1d430a: // 0160:1d430a
    if (!ebx)
        goto loc_1d4314;
    memoryASet32(ds, ebx, edx);
    memoryASet(ds, edx, 0x00);
    edx++;
loc_1d4314: // 0160:1d4314
    ebp = esi;
    ebx = esi;
loc_1d4318: // 0160:1d4318
    edi = 0;
loc_1d431a: // 0160:1d431a
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1d4336;
    if (al != 0x2e)
        goto loc_1d4329;
    edi = esi;
    esi++;
    goto loc_1d431a;
loc_1d4329: // 0160:1d4329
    esi++;
    if (al == 0x5c)
        goto loc_1d4332;
    if (al != 0x2f)
        goto loc_1d431a;
loc_1d4332: // 0160:1d4332
    ebp = esi;
    goto loc_1d4318;
loc_1d4336: // 0160:1d4336
    eax = ecx;
    ecx = ebp;
    sub_1d429c();
    edx = eax;
    if (edi)
        goto loc_1d4347;
    edi = esi;
loc_1d4347: // 0160:1d4347
    eax = memoryAGet32(ds, esp + 16);
    ebx = ebp;
    ecx = edi;
    sub_1d429c();
    edx = eax;
    ebx = edi;
    ecx = esi;
    eax = memoryAGet32(ds, esp + 20);
    sub_1d429c();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1d4369() // 0160:1d4369 +long
{
    esp -= 4;
    if (al == 0x5c)
        goto loc_1d4371;
    if (al != 0x2f)
        goto loc_1d437a;
loc_1d4371: // 0160:1d4371
    if (memoryAGet(ds, edx) != 0x00)
        goto loc_1d4378;
    memoryASet(ds, edx, al);
loc_1d4378: // 0160:1d4378
    al = memoryAGet(ds, edx);
loc_1d437a: // 0160:1d437a
    esp += 4;
    return;
}
void sub_1d437b() // 0160:1d437b +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    edi = memoryAGet32(ds, esp + 16);
    esi = eax;
    ah = 0;
    memoryASet(ds, esp, ah);
    if (!edx)
        goto loc_1d439c;
    al = memoryAGet(ds, edx);
    if (!al)
        goto loc_1d439c;
    memoryASet(ds, esi, al);
    esi++;
    memoryASet(ds, esi, 0x3a);
    esi++;
loc_1d439c: // 0160:1d439c
    memoryASet(ds, esi, 0x00);
    if (!ebx)
        goto loc_1d43d4;
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_1d43d4;
loc_1d43a8: // 0160:1d43a8
    eax = 0;
    edx = esp;
    al = memoryAGet(ds, ebx);
    ebx++;
    sub_1d4369();
    memoryASet(ds, esi, al);
    dl = memoryAGet(ds, ebx);
    esi++;
    if (dl)
        goto loc_1d43a8;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_1d43c7;
    memoryASet(ds, esp, 0x5c);
loc_1d43c7: // 0160:1d43c7
    bh = memoryAGet(ds, esp);
    if (bh != memoryAGet(ds, esi + -1))
        goto loc_1d43d2;
    esi--;
    goto loc_1d43d4;
loc_1d43d2: // 0160:1d43d2
    memoryASet(ds, esi, bh);
loc_1d43d4: // 0160:1d43d4
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_1d43de;
    memoryASet(ds, esp, 0x5c);
loc_1d43de: // 0160:1d43de
    ebx = esi + 1;
    if (!ecx)
        goto loc_1d4414;
    eax = 0;
    edx = esp;
    al = memoryAGet(ds, ecx);
    sub_1d4369();
    dh = memoryAGet(ds, esp);
    if (al == dh)
        goto loc_1d43fd;
    if (dh != memoryAGet(ds, esi))
        goto loc_1d43fd;
    esi = ebx;
loc_1d43fd: // 0160:1d43fd
    dl = memoryAGet(ds, ecx);
    if (!dl)
        goto loc_1d441d;
    eax = 0;
    al = dl;
    edx = esp;
    ecx++;
    sub_1d4369();
    memoryASet(ds, esi, al);
    esi++;
    goto loc_1d43fd;
loc_1d4414: // 0160:1d4414
    dl = memoryAGet(ds, esp);
    if (dl != memoryAGet(ds, esi))
        goto loc_1d441d;
    esi = ebx;
loc_1d441d: // 0160:1d441d
    if (!edi)
        goto loc_1d443b;
    dh = memoryAGet(ds, edi);
    if (!dh)
        goto loc_1d443b;
    if (dh == 0x2e)
        goto loc_1d4430;
    memoryASet(ds, esi, 0x2e);
loc_1d442f: // 0160:1d442f
    esi++;
loc_1d4430: // 0160:1d4430
    bh = memoryAGet(ds, edi);
    if (!bh)
        goto loc_1d443b;
    edi++;
    memoryASet(ds, esi, bh);
    goto loc_1d442f;
loc_1d443b: // 0160:1d443b
    memoryASet(ds, esi, 0x00);
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1d4446() // 0160:1d4446 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, esp + 20);
    ebx = esp + 24;
    ecx = memoryAGet32(ds, 0x1e405c);
    sub_1d36c7();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d495e() // 0160:1d495e +long
{
    esp -= 4;
    if (stop("jae - flag.c not set yet"))
        goto loc_1d496e;
    eax &= 0x0000ffff;
    push32(eax);
    sub_1ce60d();
    eax = pop32();
    goto loc_1d4970;
loc_1d496e: // 0160:1d496e
    eax = 0;
loc_1d4970: // 0160:1d4970
    esp += 4;
    return;
}
void sub_1d4971() // 0160:1d4971 +long
{
    esp -= 4;
    push32(ecx);
    push32(eax);
loc_1d4973: // 0160:1d4973
    cl = memoryAGet(ds, edx);
    memoryASet(ds, eax, cl);
    if (cl == 0x00)
        goto loc_1d498d;
    cl = memoryAGet(ds, edx + 1);
    edx += 0x00000002;
    memoryASet(ds, eax + 1, cl);
    eax += 0x00000002;
    if (cl != 0x00)
        goto loc_1d4973;
loc_1d498d: // 0160:1d498d
    eax = pop32();
    ecx = pop32();
    esp += 4;
}
void fixReloc(uint16_t seg)
{
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x197010, 0x160, 0x197010, 0x160, 0x197059, 0x197059, 0x160, 0x197059, 0x160, 0x19708b, 
        0x19708b, 0x160, 0x19708b, 0x160, 0x1970f2, 0x1970f2, 0x160, 0x1970f2, 0x160, 0x19714b, 
        0x19714b, 0x160, 0x19714b, 0x160, 0x1972f1, 0x19714b, 0x160, 0x199549, 0x160, 0x19954f, 
        0x1972f1, 0x160, 0x1972f1, 0x160, 0x197336, 0x197336, 0x160, 0x197336, 0x160, 0x19739b, 
        0x19739b, 0x160, 0x19739b, 0x160, 0x1973b5, 0x1973b5, 0x160, 0x1973b5, 0x160, 0x1973d4, 
        0x1973d4, 0x160, 0x1973d4, 0x160, 0x19788b, 0x1973d4, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x1978b4, 0x160, 0x1978b4, 0x160, 0x1979eb, 0x197a14, 0x160, 0x197a14, 0x160, 0x197cac, 
        0x197ccc, 0x160, 0x197ccc, 0x160, 0x197df2, 0x197df2, 0x160, 0x197df2, 0x160, 0x197e44, 
        0x197e44, 0x160, 0x197e44, 0x160, 0x197f02, 0x197f02, 0x160, 0x197f02, 0x160, 0x197f65, 
        0x197f65, 0x160, 0x197f65, 0x160, 0x197f93, 0x197f93, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x197f93, 0x160, 0x197f93, 0x160, 0x198058, 0x198058, 0x160, 0x198058, 0x160, 0x1980af, 
        0x1980af, 0x160, 0x1980af, 0x160, 0x1981a0, 0x1980af, 0x160, 0x199549, 0x160, 0x19954f, 
        0x1981a0, 0x160, 0x1979e1, 0x160, 0x1979eb, 0x1981a0, 0x160, 0x1981a0, 0x160, 0x19828d, 
        0x19828d, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19828d, 0x160, 0x19828d, 0x160, 0x19839d, 
        0x19839d, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19839d, 0x160, 0x19839d, 0x160, 0x19843a, 
        0x19843a, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19843a, 0x160, 0x19843a, 0x160, 0x1984fb, 
        0x1984fb, 0x160, 0x1984fb, 0x160, 0x198723, 0x198723, 0x160, 0x198723, 0x160, 0x198797, 
        0x198797, 0x160, 0x198797, 0x160, 0x1987eb, 0x1987eb, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x1987eb, 0x160, 0x1987eb, 0x160, 0x198a6a, 0x198a6a, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x198a6a, 0x160, 0x198a6a, 0x160, 0x198bd3, 0x198bd3, 0x160, 0x198bd3, 0x160, 0x198cae, 
        0x198bd3, 0x160, 0x199549, 0x160, 0x19954f, 0x198cae, 0x160, 0x19871d, 0x160, 0x198723, 
        0x198cae, 0x160, 0x198cae, 0x160, 0x198cfe, 0x198d18, 0x160, 0x198d18, 0x160, 0x198f43, 
        0x198f43, 0x160, 0x1979e5, 0x160, 0x1979eb, 0x198f43, 0x160, 0x198f43, 0x160, 0x199079, 
        0x199079, 0x160, 0x199079, 0x160, 0x19917f, 0x199079, 0x160, 0x199549, 0x160, 0x19954f, 
        0x19917f, 0x160, 0x19917f, 0x160, 0x19930d, 0x19917f, 0x160, 0x199549, 0x160, 0x19954f, 
        0x19930d, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19930d, 0x160, 0x198395, 0x160, 0x19839d, 
        0x19930d, 0x160, 0x19930d, 0x160, 0x199382, 0x199382, 0x160, 0x1979e1, 0x160, 0x1979eb, 
        0x199382, 0x160, 0x199382, 0x160, 0x1994e6, 0x1994e6, 0x160, 0x1994e6, 0x160, 0x199501, 
        0x199501, 0x160, 0x199501, 0x160, 0x19954f, 0x19954f, 0x160, 0x199546, 0x160, 0x199593, 
        0x199593, 0x160, 0x1979e5, 0x160, 0x1979eb, 0x199593, 0x160, 0x199593, 0x160, 0x199645, 
        0x199645, 0x160, 0x199645, 0x160, 0x1996e2, 0x1996e2, 0x160, 0x1996e2, 0x160, 0x1996ed, 
        0x1996e2, 0x160, 0x19e44c, 0x160, 0x19e452, 0x1996e2, 0x160, 0x19fd41, 0x160, 0x19fdc8, 
        0x1996ed, 0x160, 0x1996ed, 0x160, 0x19995c, 0x19995c, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x19995c, 0x160, 0x19995c, 0x160, 0x199b2d, 0x199b2d, 0x160, 0x199b2d, 0x160, 0x199b95, 
        0x199b95, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x199b95, 0x160, 0x199b95, 0x160, 0x199f16, 
        0x199f16, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x199f16, 0x160, 0x199f16, 0x160, 0x19a0dc, 
        0x19a0dc, 0x160, 0x19a0dc, 0x160, 0x19a107, 0x19a107, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x19a107, 0x160, 0x19a107, 0x160, 0x19a305, 0x19a305, 0x160, 0x19a305, 0x160, 0x19a36c, 
        0x19a36c, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19a36c, 0x160, 0x19a36c, 0x160, 0x19a46a, 
        0x19a46a, 0x160, 0x19a46a, 0x160, 0x19a4f6, 0x19a50e, 0x160, 0x19a50e, 0x160, 0x19a556, 
        0x19a556, 0x160, 0x19a556, 0x160, 0x19a56b, 0x19a56b, 0x160, 0x19a56b, 0x160, 0x19a6ed, 
        0x19a6ed, 0x160, 0x19a6ed, 0x160, 0x19a730, 0x19a76a, 0x160, 0x19a76a, 0x160, 0x19a852, 
        0x19a852, 0x160, 0x19a852, 0x160, 0x19a8c0, 0x19a8c0, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x19a8c0, 0x160, 0x19a8c0, 0x160, 0x19abd3, 0x19abd3, 0x160, 0x19abd3, 0x160, 0x19ac2f, 
        0x19ac2f, 0x160, 0x19ac2f, 0x160, 0x19ac8b, 0x19ac8b, 0x160, 0x19ac8b, 0x160, 0x19ace7, 
        0x19ace7, 0x160, 0x19ace7, 0x160, 0x19ad75, 0x19ad75, 0x160, 0x19ad75, 0x160, 0x19adf1, 
        0x19adf1, 0x160, 0x19adf1, 0x160, 0x19ae47, 0x19ae47, 0x160, 0x19a6e7, 0x160, 0x19a6ed, 
        0x19ae47, 0x160, 0x19ae47, 0x160, 0x19af15, 0x19af15, 0x160, 0x19af15, 0x160, 0x19af45, 
        0x19af45, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19af45, 0x160, 0x19af45, 0x160, 0x19b06b, 
        0x19b06b, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19b06b, 0x160, 0x19b06b, 0x160, 0x19b22e, 
        0x19b22e, 0x160, 0x1979e4, 0x160, 0x1979eb, 0x19b22e, 0x160, 0x19b22e, 0x160, 0x19b3b3, 
        0x19b3b3, 0x160, 0x1979e5, 0x160, 0x1979eb, 0x19b3b3, 0x160, 0x19b3b3, 0x160, 0x19b539, 
        0x19b539, 0x160, 0x19b539, 0x160, 0x19b674, 0x19b674, 0x160, 0x19b674, 0x160, 0x19b709, 
        0x19b709, 0x160, 0x19b709, 0x160, 0x19b794, 0x19b794, 0x160, 0x19b794, 0x160, 0x19b983, 
        0x19bafa, 0x160, 0x19bafa, 0x160, 0x19bb2a, 0x19bb2a, 0x160, 0x199549, 0x160, 0x19954f, 
        0x19bb2a, 0x160, 0x19bb2a, 0x160, 0x19bcbd, 0x19bcbd, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x19bcbd, 0x160, 0x19bcbd, 0x160, 0x19bfa1, 0x19c025, 0x160, 0x19c025, 0x160, 0x19c07f, 
        0x19c07f, 0x160, 0x19c07f, 0x160, 0x19c0a0, 0x19c0a0, 0x160, 0x1979e4, 0x160, 0x1979eb, 
        0x19c0a0, 0x160, 0x19c0a0, 0x160, 0x19c3e0, 0x19c3e0, 0x160, 0x19c3e0, 0x160, 0x19c3f9, 
        0x19c3f9, 0x160, 0x19c3f9, 0x160, 0x19c40e, 0x19c40e, 0x160, 0x19c40e, 0x160, 0x19c452, 
        0x19c452, 0x160, 0x19c452, 0x160, 0x19c487, 0x19c487, 0x160, 0x19c487, 0x160, 0x19c4b0, 
        0x19c4b0, 0x160, 0x19c4b0, 0x160, 0x19c54b, 0x19c54b, 0x160, 0x19c54b, 0x160, 0x19c58b, 
        0x19c608, 0x160, 0x19c608, 0x160, 0x19c687, 0x19c687, 0x160, 0x19c687, 0x160, 0x19c6aa, 
        0x19c6aa, 0x160, 0x19c6aa, 0x160, 0x19c6b5, 0x19c6b5, 0x160, 0x19c6b5, 0x160, 0x19c6e0, 
        0x19c76f, 0x160, 0x19c76f, 0x160, 0x19c7d3, 0x19c7d3, 0x160, 0x19c7d3, 0x160, 0x19c7ef, 
        0x19c7ef, 0x160, 0x19c7ef, 0x160, 0x19c840, 0x19c840, 0x160, 0x19c840, 0x160, 0x19c8e6, 
        0x19c8e6, 0x160, 0x19c545, 0x160, 0x19c54b, 0x19c8e6, 0x160, 0x19c8e6, 0x160, 0x19c9c1, 
        0x19c9c1, 0x160, 0x19c9c1, 0x160, 0x19ca13, 0x19ca13, 0x160, 0x19ca13, 0x160, 0x19ca3d, 
        0x19ca3d, 0x160, 0x19ca3d, 0x160, 0x19ca7d, 0x19ca7d, 0x160, 0x19ca77, 0x160, 0x19cb1f, 
        0x19cb1f, 0x160, 0x19cb1f, 0x160, 0x19cb2e, 0x19cb2e, 0x160, 0x19cb2e, 0x160, 0x19cc1b, 
        0x19cc1b, 0x160, 0x19cc1b, 0x160, 0x19cc49, 0x19cc49, 0x160, 0x19c44c, 0x160, 0x19c452, 
        0x19cc49, 0x160, 0x19cc49, 0x160, 0x19ccc3, 0x19ccc3, 0x160, 0x19ca77, 0x160, 0x19ca7d, 
        0x19ccc3, 0x160, 0x19ccc3, 0x160, 0x19cce4, 0x19cd7f, 0x160, 0x19cd7f, 0x160, 0x19d28e, 
        0x19d28e, 0x160, 0x19d28e, 0x160, 0x19da3f, 0x19da3f, 0x160, 0x19da3f, 0x160, 0x19dc7f, 
        0x19dc7f, 0x160, 0x19dc7f, 0x160, 0x19ddd3, 0x19dc7f, 0x160, 0x19df4a, 0x160, 0x19df50, 
        0x19ddd3, 0x160, 0x19ddd3, 0x160, 0x19df50, 0x19df50, 0x160, 0x19df50, 0x160, 0x19e006, 
        0x19e006, 0x160, 0x19e006, 0x160, 0x19e029, 0x19e029, 0x160, 0x19e029, 0x160, 0x19e075, 
        0x19e075, 0x160, 0x19df49, 0x160, 0x19df50, 0x19e075, 0x160, 0x19e075, 0x160, 0x19e0ca, 
        0x19e0ca, 0x160, 0x19e0ca, 0x160, 0x19e1a9, 0x19e1a9, 0x160, 0x19e1a9, 0x160, 0x19e20e, 
        0x19e20e, 0x160, 0x19e20e, 0x160, 0x19e27a, 0x19e27a, 0x160, 0x19e27a, 0x160, 0x19e298, 
        0x19e298, 0x160, 0x19e298, 0x160, 0x19e2d6, 0x19e2d6, 0x160, 0x19e2d6, 0x160, 0x19e30a, 
        0x19e30a, 0x160, 0x19e30a, 0x160, 0x19e36c, 0x19e36c, 0x160, 0x19e36c, 0x160, 0x19e3c6, 
        0x19e3c6, 0x160, 0x19e3c6, 0x160, 0x19e452, 0x19e452, 0x160, 0x19e44b, 0x160, 0x19e5a8, 
        0x19e5a8, 0x160, 0x19e44b, 0x160, 0x19e452, 0x19e5a8, 0x160, 0x19e5a8, 0x160, 0x19e68b, 
        0x19e68b, 0x160, 0x19e68b, 0x160, 0x19e7ed, 0x19e7ed, 0x160, 0x19e7ed, 0x160, 0x19e83e, 
        0x19e83e, 0x160, 0x19e83e, 0x160, 0x19e8cb, 0x19e8cb, 0x160, 0x19e8cb, 0x160, 0x19e980, 
        0x19e980, 0x160, 0x19e44c, 0x160, 0x19e452, 0x19e980, 0x160, 0x19e980, 0x160, 0x19ea10, 
        0x19ea10, 0x160, 0x19ea10, 0x160, 0x19eaa6, 0x19eaa6, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x19eaa6, 0x160, 0x19eaa6, 0x160, 0x19ed21, 0x19ed21, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x19ed21, 0x160, 0x19ed21, 0x160, 0x19efad, 0x19efad, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x19efad, 0x160, 0x19efad, 0x160, 0x19f178, 0x19f178, 0x160, 0x19f178, 0x160, 0x19f1c7, 
        0x19f1c7, 0x160, 0x19f1c7, 0x160, 0x19f1fc, 0x19f1fc, 0x160, 0x19e44c, 0x160, 0x19e452, 
        0x19f1fc, 0x160, 0x19f1fc, 0x160, 0x19f308, 0x19f308, 0x160, 0x19f308, 0x160, 0x19f346, 
        0x19f346, 0x160, 0x19e448, 0x160, 0x19e452, 0x19f346, 0x160, 0x19f346, 0x160, 0x19f4a3, 
        0x19f4a3, 0x160, 0x19e44b, 0x160, 0x19e452, 0x19f4a3, 0x160, 0x19f4a3, 0x160, 0x19fd41, 
        0x19fd41, 0x160, 0x19e44c, 0x160, 0x19e452, 0x19fd41, 0x160, 0x19fd41, 0x160, 0x19fdc8, 
        0x19fdc8, 0x160, 0x19fdc8, 0x160, 0x19fde2, 0x19fde2, 0x160, 0x19fde2, 0x160, 0x19fe05, 
        0x19fe05, 0x160, 0x19fe05, 0x160, 0x19fe49, 0x19fe49, 0x160, 0x19fe49, 0x160, 0x19fe73, 
        0x19fe73, 0x160, 0x19fe73, 0x160, 0x19feb1, 0x19feb1, 0x160, 0x19feb1, 0x160, 0x19ff9b, 
        0x19ff9b, 0x160, 0x19ff9b, 0x160, 0x19ffae, 0x19ff9b, 0x160, 0x1a001f, 0x160, 0x1a0028, 
        0x19ffae, 0x160, 0x19ffae, 0x160, 0x19ffef, 0x19ffae, 0x160, 0x1a001f, 0x160, 0x1a0028, 
        0x19ffef, 0x160, 0x19ffef, 0x160, 0x1a0008, 0x19ffef, 0x160, 0x1a001f, 0x160, 0x1a0028, 
        0x1a0008, 0x160, 0x1a0008, 0x160, 0x1a0028, 0x1a0028, 0x160, 0x1a001a, 0x160, 0x1a003c, 
        0x1a003c, 0x160, 0x1a003c, 0x160, 0x1a0074, 0x1a003c, 0x160, 0x1a0126, 0x160, 0x1a012f, 
        0x1a0074, 0x160, 0x1a0074, 0x160, 0x1a009c, 0x1a009c, 0x160, 0x1a009c, 0x160, 0x1a00b5, 
        0x1a009c, 0x160, 0x1a0126, 0x160, 0x1a012f, 0x1a00b5, 0x160, 0x1a00b5, 0x160, 0x1a010f, 
        0x1a010f, 0x160, 0x1a010f, 0x160, 0x1a012f, 0x1a012f, 0x160, 0x1a012f, 0x160, 0x1a015d, 
        0x1a015d, 0x160, 0x1a0121, 0x160, 0x1a012f, 0x1a015d, 0x160, 0x1a015d, 0x160, 0x1a0171, 
        0x1a0171, 0x160, 0x1a0171, 0x160, 0x1a01d5, 0x1a01d5, 0x160, 0x1a01cc, 0x160, 0x1a0216, 
        0x1a0216, 0x160, 0x1a0106, 0x160, 0x1a010f, 0x1a0216, 0x160, 0x1a0216, 0x160, 0x1a025b, 
        0x1a025b, 0x160, 0x1a025b, 0x160, 0x1a029c, 0x1a029c, 0x160, 0x1a029c, 0x160, 0x1a02c4, 
        0x1a02c4, 0x160, 0x1a0106, 0x160, 0x1a010f, 0x1a02c4, 0x160, 0x1a02c4, 0x160, 0x1a0311, 
        0x1a0311, 0x160, 0x1a01cc, 0x160, 0x1a01d5, 0x1a0311, 0x160, 0x1a0311, 0x160, 0x1a0335, 
        0x1a0335, 0x160, 0x1a01cc, 0x160, 0x1a01d5, 0x1a0335, 0x160, 0x1a0335, 0x160, 0x1a0359, 
        0x1a0359, 0x160, 0x1a0106, 0x160, 0x1a010f, 0x1a0359, 0x160, 0x1a0359, 0x160, 0x1a03b7, 
        0x1a03b7, 0x160, 0x1a01cc, 0x160, 0x1a01d5, 0x1a03b7, 0x160, 0x1a03b7, 0x160, 0x1a03d0, 
        0x1a03d0, 0x160, 0x1a03d0, 0x160, 0x1a03f7, 0x1a03f7, 0x160, 0x1a03f7, 0x160, 0x1a041e, 
        0x1a041e, 0x160, 0x19e44b, 0x160, 0x19e452, 0x1a041e, 0x160, 0x1a041e, 0x160, 0x1a0a3c, 
        0x1a0a3c, 0x160, 0x19e44c, 0x160, 0x19e452, 0x1a0a3c, 0x160, 0x19f2de, 0x160, 0x19f2e8, 
        0x1a0a3c, 0x160, 0x1a0a3c, 0x160, 0x1a0b44, 0x1a0b44, 0x160, 0x1a0b44, 0x160, 0x1a0def, 
        0x1a0def, 0x160, 0x1a0de9, 0x160, 0x1a0f32, 0x1a0f32, 0x160, 0x1a0f32, 0x160, 0x1a10a6, 
        0x1a10a6, 0x160, 0x1a10a6, 0x160, 0x1a1248, 0x1a1248, 0x160, 0x19e44c, 0x160, 0x19e452, 
        0x1a1248, 0x160, 0x1a1248, 0x160, 0x1a1303, 0x1a1303, 0x160, 0x19e7e7, 0x160, 0x19e7ed, 
        0x1a1303, 0x160, 0x1a1303, 0x160, 0x1a1513, 0x1a1513, 0x160, 0x19e7e7, 0x160, 0x19e7ed, 
        0x1a1513, 0x160, 0x1a1513, 0x160, 0x1a1643, 0x1a1643, 0x160, 0x1a1643, 0x160, 0x1a16e3, 
        0x1a16e3, 0x160, 0x1a1242, 0x160, 0x1a1248, 0x1a16e3, 0x160, 0x1a16e3, 0x160, 0x1a1797, 
        0x1a1797, 0x160, 0x19e44b, 0x160, 0x19e452, 0x1a1797, 0x160, 0x1a1797, 0x160, 0x1a1e27, 
        0x1a1e27, 0x160, 0x1a1e27, 0x160, 0x1a1fc1, 0x1a1fc1, 0x160, 0x1a1fc1, 0x160, 0x1a1ff7, 
        0x1a1ff7, 0x160, 0x1a1ff7, 0x160, 0x1a201b, 0x1a201b, 0x160, 0x1a201b, 0x160, 0x1a2051, 
        0x1a2051, 0x160, 0x1a2051, 0x160, 0x1a209d, 0x1a209d, 0x160, 0x1a2094, 0x160, 0x1a20e2, 
        0x1a20e2, 0x160, 0x1a20e2, 0x160, 0x1a2682, 0x1a2682, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a2682, 0x160, 0x1a2682, 0x160, 0x1a2cbd, 0x1a2cbd, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a2cbd, 0x160, 0x1a2cbd, 0x160, 0x1a2edc, 0x1a2edc, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a2edc, 0x160, 0x1a2edc, 0x160, 0x1a2fe9, 0x1a2fe9, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a2fe9, 0x160, 0x1a2fe9, 0x160, 0x1a314d, 0x1a314d, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a314d, 0x160, 0x1a314d, 0x160, 0x1a36e1, 0x1a36e1, 0x160, 0x1a36e1, 0x160, 0x1a3755, 
        0x1a3755, 0x160, 0x1a0de9, 0x160, 0x1a0def, 0x1a3755, 0x160, 0x1a3755, 0x160, 0x1a3999, 
        0x1a3999, 0x160, 0x19e44b, 0x160, 0x19e452, 0x1a3999, 0x160, 0x1a3999, 0x160, 0x1a3a42, 
        0x1a3a42, 0x160, 0x19e44b, 0x160, 0x19e452, 0x1a3a42, 0x160, 0x1a2cb5, 0x160, 0x1a2cbd, 
        0x1a3a42, 0x160, 0x1a3a42, 0x160, 0x1a3d78, 0x1a3dd3, 0x160, 0x1a0de9, 0x160, 0x1a0def, 
        0x1a3dd3, 0x160, 0x1a3dd3, 0x160, 0x1a41fa, 0x1a41fa, 0x160, 0x1a0de9, 0x160, 0x1a0def, 
        0x1a41fa, 0x160, 0x1a41fa, 0x160, 0x1a455b, 0x1a455b, 0x160, 0x1a0de9, 0x160, 0x1a0def, 
        0x1a455b, 0x160, 0x1a455b, 0x160, 0x1a4712, 0x1a4712, 0x160, 0x1a4712, 0x160, 0x1a4755, 
        0x1a4755, 0x160, 0x1a4755, 0x160, 0x1a4923, 0x1a4923, 0x160, 0x1a4923, 0x160, 0x1a49b6, 
        0x1a49b6, 0x160, 0x1a49b6, 0x160, 0x1a4a35, 0x1a4a35, 0x160, 0x1a4a35, 0x160, 0x1a4b16, 
        0x1a4b16, 0x160, 0x19e44b, 0x160, 0x19e452, 0x1a4b16, 0x160, 0x1a4b16, 0x160, 0x1a4b92, 
        0x1a4b92, 0x160, 0x1a4b92, 0x160, 0x1a4e56, 0x1a4e56, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a4e56, 0x160, 0x1a4e56, 0x160, 0x1a4f22, 0x1a4f22, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a4f22, 0x160, 0x1a4f22, 0x160, 0x1a52dd, 0x1a52dd, 0x160, 0x19e44b, 0x160, 0x19e452, 
        0x1a52dd, 0x160, 0x1a52dd, 0x160, 0x1a54e5, 0x1a54e5, 0x160, 0x19e448, 0x160, 0x19e452, 
        0x1a54e5, 0x160, 0x1a54e5, 0x160, 0x1a55bd, 0x1a5616, 0x160, 0x1a5616, 0x160, 0x1a5625, 
        0x1a5625, 0x160, 0x1a5607, 0x160, 0x1a5616, 0x1a5625, 0x160, 0x1a5625, 0x160, 0x1a562c, 
        0x1a566f, 0x160, 0x1a566f, 0x160, 0x1a56c8, 0x1a56c8, 0x160, 0x1a56c8, 0x160, 0x1a56f1, 
        0x1a56f1, 0x160, 0x1a56f1, 0x160, 0x1a570c, 0x1a570c, 0x160, 0x1a570c, 0x160, 0x1a5720, 
        0x1a5720, 0x160, 0x1a5720, 0x160, 0x1a5738, 0x1a5738, 0x160, 0x1a572b, 0x160, 0x1a5742, 
        0x1a5742, 0x160, 0x1a5742, 0x160, 0x1a5793, 0x1a5793, 0x160, 0x1a572b, 0x160, 0x1a5738, 
        0x1a5793, 0x160, 0x1a5793, 0x160, 0x1a57a0, 0x1a57a0, 0x160, 0x1a57a0, 0x160, 0x1a57ba, 
        0x1a57ba, 0x160, 0x1a57ba, 0x160, 0x1a593a, 0x1a57ba, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a593a, 0x160, 0x1a57b8, 0x160, 0x1a57ba, 0x1a593a, 0x160, 0x1a593a, 0x160, 0x1a5964, 
        0x1a5964, 0x160, 0x1a5964, 0x160, 0x1a59c1, 0x1a59c1, 0x160, 0x1a59c1, 0x160, 0x1a5a04, 
        0x1a5a04, 0x160, 0x1a5a04, 0x160, 0x1a5a31, 0x1a5a31, 0x160, 0x1a5a31, 0x160, 0x1a5ae0, 
        0x1a5ae0, 0x160, 0x1a5ae0, 0x160, 0x1a5b1b, 0x1a5b1b, 0x160, 0x1a5b1b, 0x160, 0x1a5b58, 
        0x1a5b58, 0x160, 0x1a5b58, 0x160, 0x1a5c1f, 0x1a5c1f, 0x160, 0x1a5c1f, 0x160, 0x1a5c92, 
        0x1a5c92, 0x160, 0x1a5c92, 0x160, 0x1a5d0b, 0x1a5d0b, 0x160, 0x1a5ada, 0x160, 0x1a5ae0, 
        0x1a5d0b, 0x160, 0x1a5d0b, 0x160, 0x1a5d81, 0x1a5d81, 0x160, 0x1a5d81, 0x160, 0x1a5dc0, 
        0x1a5dc0, 0x160, 0x1a5dc0, 0x160, 0x1a5e64, 0x1a5dc0, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a5e64, 0x160, 0x1a5e64, 0x160, 0x1a5eb5, 0x1a5eb5, 0x160, 0x1a5eb5, 0x160, 0x1a5ecc, 
        0x1a5ecc, 0x160, 0x1a5ecc, 0x160, 0x1a5ef8, 0x1a5ef8, 0x160, 0x1a5ef8, 0x160, 0x1a5f3a, 
        0x1a5f3a, 0x160, 0x1a5f3a, 0x160, 0x1a5f62, 0x1a5f62, 0x160, 0x1a5f62, 0x160, 0x1a60bf, 
        0x1a5f62, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a60bf, 0x160, 0x1a60bf, 0x160, 0x1a614a, 
        0x1a60bf, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a60bf, 0x160, 0x1a6ee9, 0x160, 0x1a6ef3, 
        0x1a60bf, 0x160, 0x1a738b, 0x160, 0x1a739a, 0x1a614a, 0x160, 0x1a614a, 0x160, 0x1a617f, 
        0x1a617f, 0x160, 0x1a5d07, 0x160, 0x1a5d0b, 0x1a617f, 0x160, 0x1a617f, 0x160, 0x1a61d5, 
        0x1a61d5, 0x160, 0x1a61d5, 0x160, 0x1a6300, 0x1a6300, 0x160, 0x1a62f9, 0x160, 0x1a63f9, 
        0x1a63f9, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a63f9, 0x160, 0x1a63f9, 0x160, 0x1a651d, 
        0x1a651d, 0x160, 0x1a651d, 0x160, 0x1a659b, 0x1a659b, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a659b, 0x160, 0x1a659b, 0x160, 0x1a67e2, 0x1a67e2, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a67e2, 0x160, 0x1a67e2, 0x160, 0x1a699a, 0x1a699a, 0x160, 0x1a699a, 0x160, 0x1a69bc, 
        0x1a69bc, 0x160, 0x1a69bc, 0x160, 0x1a69e0, 0x1a69e0, 0x160, 0x1a69e0, 0x160, 0x1a6ac1, 
        0x1a6ac1, 0x160, 0x1a5e5c, 0x160, 0x1a5e64, 0x1a6ac1, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a6ac1, 0x160, 0x1a6ac1, 0x160, 0x1a6b31, 0x1a6b31, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a6b31, 0x160, 0x1a6b31, 0x160, 0x1a6c77, 0x1a6c77, 0x160, 0x1a6c77, 0x160, 0x1a6ca3, 
        0x1a6ca3, 0x160, 0x1a6ca3, 0x160, 0x1a6ce7, 0x1a6ce7, 0x160, 0x1a6ce7, 0x160, 0x1a6de2, 
        0x1a6ce7, 0x160, 0x1a70eb, 0x160, 0x1a70fa, 0x1a6de2, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a6de2, 0x160, 0x1a6de2, 0x160, 0x1a6e9a, 0x1a6e9a, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a6e9a, 0x160, 0x1a6e9a, 0x160, 0x1a6ef3, 0x1a6e9a, 0x160, 0x1a738b, 0x160, 0x1a739a, 
        0x1a6ef3, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a6ef3, 0x160, 0x1a6ef3, 0x160, 0x1a6f89, 
        0x1a6ef3, 0x160, 0x1a738b, 0x160, 0x1a739a, 0x1a6f89, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a6f89, 0x160, 0x1a6f89, 0x160, 0x1a6ff9, 0x1a6ff9, 0x160, 0x1a6ff9, 0x160, 0x1a7026, 
        0x1a7026, 0x160, 0x1a7026, 0x160, 0x1a7078, 0x1a7078, 0x160, 0x1a7078, 0x160, 0x1a70fa, 
        0x1a70fa, 0x160, 0x1a70fa, 0x160, 0x1a712b, 0x1a712b, 0x160, 0x1a712b, 0x160, 0x1a715e, 
        0x1a71e9, 0x160, 0x1a71e9, 0x160, 0x1a7271, 0x1a7271, 0x160, 0x1a715e, 0x160, 0x1a71e9, 
        0x1a7271, 0x160, 0x1a7271, 0x160, 0x1a733e, 0x1a733e, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a733e, 0x160, 0x1a733e, 0x160, 0x1a739a, 0x1a739a, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a739a, 0x160, 0x1a67d7, 0x160, 0x1a67e2, 0x1a739a, 0x160, 0x1a739a, 0x160, 0x1a74cb, 
        0x1a74e9, 0x160, 0x1a74e9, 0x160, 0x1a75c6, 0x1a75c6, 0x160, 0x1a70e1, 0x160, 0x1a70fa, 
        0x1a75c6, 0x160, 0x1a75c6, 0x160, 0x1a761a, 0x1a761a, 0x160, 0x1a761a, 0x160, 0x1a7683, 
        0x1a76a1, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a76a1, 0x160, 0x1a67d7, 0x160, 0x1a67e2, 
        0x1a76a1, 0x160, 0x1a76a1, 0x160, 0x1a7974, 0x1a7974, 0x160, 0x1a7974, 0x160, 0x1a79d7, 
        0x1a79d7, 0x160, 0x1a62fa, 0x160, 0x1a6300, 0x1a79d7, 0x160, 0x1a79d7, 0x160, 0x1a7a3f, 
        0x1a7a3f, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a7a3f, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a7a3f, 0x160, 0x1a7a3f, 0x160, 0x1a7a79, 0x1a7a79, 0x160, 0x1a7a79, 0x160, 0x1a7b5d, 
        0x1a7b5d, 0x160, 0x1a70e1, 0x160, 0x1a70fa, 0x1a7b5d, 0x160, 0x1a7b5d, 0x160, 0x1a7ba6, 
        0x1a7ba6, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a7ba6, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a7ba6, 0x160, 0x1a7ba6, 0x160, 0x1a7be0, 0x1a7be0, 0x160, 0x1a7be0, 0x160, 0x1a7bfb, 
        0x1a7bfb, 0x160, 0x1a7bfb, 0x160, 0x1a7c98, 0x1a7c98, 0x160, 0x1a7c98, 0x160, 0x1a7cd0, 
        0x1a7cd0, 0x160, 0x1a7cd0, 0x160, 0x1a7d0f, 0x1a7d0f, 0x160, 0x1a7d0f, 0x160, 0x1a7d2c, 
        0x1a7d2c, 0x160, 0x1a7d2c, 0x160, 0x1a7dac, 0x1a7dac, 0x160, 0x1a7dac, 0x160, 0x1a7e1a, 
        0x1a7e1a, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a7e1a, 0x160, 0x1a6ed7, 0x160, 0x1a6ef3, 
        0x1a7e1a, 0x160, 0x1a738b, 0x160, 0x1a739a, 0x1a7e1a, 0x160, 0x1a7e1a, 0x160, 0x1a7e5c, 
        0x1a7e5c, 0x160, 0x1a6595, 0x160, 0x1a659b, 0x1a7e5c, 0x160, 0x1a7e5c, 0x160, 0x1a7f95, 
        0x1a7f95, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a7f95, 0x160, 0x1a6c6f, 0x160, 0x1a6c77, 
        0x1a7f95, 0x160, 0x1a7f95, 0x160, 0x1a81b5, 0x1a81b5, 0x160, 0x1a70e1, 0x160, 0x1a70fa, 
        0x1a81b5, 0x160, 0x1a81b5, 0x160, 0x1a8212, 0x1a8212, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8212, 0x160, 0x1a7373, 0x160, 0x1a739a, 0x1a8212, 0x160, 0x1a8212, 0x160, 0x1a8251, 
        0x1a8251, 0x160, 0x1a8251, 0x160, 0x1a8294, 0x1a8294, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8294, 0x160, 0x1a6ed2, 0x160, 0x1a6ef3, 0x1a8294, 0x160, 0x1a738b, 0x160, 0x1a739a, 
        0x1a8294, 0x160, 0x1a8294, 0x160, 0x1a8308, 0x1a8308, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a8308, 0x160, 0x1a6fe8, 0x160, 0x1a6ff9, 0x1a8308, 0x160, 0x1a8308, 0x160, 0x1a836c, 
        0x1a8399, 0x160, 0x1a8399, 0x160, 0x1a8526, 0x1a8526, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a8526, 0x160, 0x1a7a30, 0x160, 0x1a7a3f, 0x1a8526, 0x160, 0x1a8526, 0x160, 0x1a859f, 
        0x1a859f, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a859f, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a859f, 0x160, 0x1a859f, 0x160, 0x1a85d9, 0x1a8605, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8605, 0x160, 0x1a67d7, 0x160, 0x1a67e2, 0x1a8605, 0x160, 0x1a8605, 0x160, 0x1a8811, 
        0x1a8811, 0x160, 0x1a70e1, 0x160, 0x1a70fa, 0x1a8811, 0x160, 0x1a8811, 0x160, 0x1a885f, 
        0x1a885f, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a885f, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a885f, 0x160, 0x1a885f, 0x160, 0x1a8899, 0x1a8899, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8899, 0x160, 0x1a74ba, 0x160, 0x1a74cb, 0x1a8899, 0x160, 0x1a8899, 0x160, 0x1a8998, 
        0x1a8998, 0x160, 0x1a8998, 0x160, 0x1a89ff, 0x1a89ff, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a89ff, 0x160, 0x1a89ff, 0x160, 0x1a8a8c, 0x1a8a8c, 0x160, 0x1a8a8c, 0x160, 0x1a8a9c, 
        0x1a8a9c, 0x160, 0x1a8a9c, 0x160, 0x1a8acd, 0x1a8acd, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a8acd, 0x160, 0x1a8acd, 0x160, 0x1a8b65, 0x1a8b65, 0x160, 0x1a62fa, 0x160, 0x1a6300, 
        0x1a8b65, 0x160, 0x1a8b5b, 0x160, 0x1a8c3a, 0x1a8c3a, 0x160, 0x1a8c3a, 0x160, 0x1a8caa, 
        0x1a8caa, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a8caa, 0x160, 0x1a8caa, 0x160, 0x1a8d1a, 
        0x1a8d1a, 0x160, 0x1a8d1a, 0x160, 0x1a8dc9, 0x1a8dc9, 0x160, 0x1a8c98, 0x160, 0x1a8caa, 
        0x1a8dc9, 0x160, 0x1a8dc9, 0x160, 0x1a8e32, 0x1a8e32, 0x160, 0x1a8e32, 0x160, 0x1a8e8e, 
        0x1a8e8e, 0x160, 0x1a8e8e, 0x160, 0x1a8ec1, 0x1a8ec1, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8ec1, 0x160, 0x1a6f7e, 0x160, 0x1a6f89, 0x1a8ec1, 0x160, 0x1a738b, 0x160, 0x1a739a, 
        0x1a8ec1, 0x160, 0x1a8ec1, 0x160, 0x1a8f18, 0x1a8f18, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a8f18, 0x160, 0x1a8f18, 0x160, 0x1a90cf, 0x1a90cf, 0x160, 0x1a5ada, 0x160, 0x1a5ae0, 
        0x1a90cf, 0x160, 0x1a90cf, 0x160, 0x1a916f, 0x1a916f, 0x160, 0x1a916f, 0x160, 0x1a9220, 
        0x1a9220, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a9220, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a9220, 0x160, 0x1a9220, 0x160, 0x1a925a, 0x1a925a, 0x160, 0x1a925a, 0x160, 0x1a929d, 
        0x1a929d, 0x160, 0x1a920d, 0x160, 0x1a9220, 0x1a929d, 0x160, 0x1a929d, 0x160, 0x1a92f5, 
        0x1a92f5, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a92f5, 0x160, 0x1a7373, 0x160, 0x1a739a, 
        0x1a92f5, 0x160, 0x1a92f5, 0x160, 0x1a932f, 0x1a932f, 0x160, 0x1a932f, 0x160, 0x1a9367, 
        0x1a9399, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1a9399, 0x160, 0x1a9399, 0x160, 0x1a9601, 
        0x1a9399, 0x160, 0x1a9648, 0x160, 0x1a9687, 0x1a9399, 0x160, 0x1a971a, 0x160, 0x1a973f, 
        0x1a9399, 0x160, 0x1a975e, 0x160, 0x1a97cf, 0x1a97cf, 0x160, 0x1a97cf, 0x160, 0x1a982c, 
        0x1a9869, 0x160, 0x1a9869, 0x160, 0x1a9950, 0x1a9950, 0x160, 0x1a9950, 0x160, 0x1a997c, 
        0x1a99ce, 0x160, 0x1a99ce, 0x160, 0x1a99fa, 0x1a99fa, 0x160, 0x1a70eb, 0x160, 0x1a70fa, 
        0x1a99fa, 0x160, 0x1a99fa, 0x160, 0x1a9a5b, 0x1a9a5b, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a9a5b, 0x160, 0x1a7373, 0x160, 0x1a739a, 0x1a9a5b, 0x160, 0x1a9a5b, 0x160, 0x1a9a95, 
        0x1a9a95, 0x160, 0x1a9a95, 0x160, 0x1a9ac5, 0x1a9ac5, 0x160, 0x1a9ac5, 0x160, 0x1a9bab, 
        0x1a9bf3, 0x160, 0x1a9bf3, 0x160, 0x1a9c24, 0x1a9c24, 0x160, 0x1a9c24, 0x160, 0x1a9c63, 
        0x1a9c63, 0x160, 0x1a9c63, 0x160, 0x1a9cc0, 0x1a9cc0, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a9cc0, 0x160, 0x1a9cc0, 0x160, 0x1a9e06, 0x1a9e27, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1a9e27, 0x160, 0x1a9e27, 0x160, 0x1aa084, 0x1aa084, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aa084, 0x160, 0x1a74ba, 0x160, 0x1a74cb, 0x1aa084, 0x160, 0x1aa084, 0x160, 0x1aa186, 
        0x1aa186, 0x160, 0x1aa186, 0x160, 0x1aa1d8, 0x1aa1d8, 0x160, 0x1aa1d8, 0x160, 0x1aa390, 
        0x1aa390, 0x160, 0x1a7652, 0x160, 0x1a7683, 0x1aa390, 0x160, 0x1a982c, 0x160, 0x1a9869, 
        0x1aa390, 0x160, 0x1aa390, 0x160, 0x1aa470, 0x1aa470, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aa470, 0x160, 0x1aa470, 0x160, 0x1aa4ba, 0x1aa4ba, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aa4ba, 0x160, 0x1aa4ba, 0x160, 0x1aa571, 0x1aa571, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aa571, 0x160, 0x1aa571, 0x160, 0x1aa620, 0x1aa620, 0x160, 0x1aa620, 0x160, 0x1aa67a, 
        0x1aa67a, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1aa67a, 0x160, 0x1aa67a, 0x160, 0x1aa7ed, 
        0x1aa7ed, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1aa7ed, 0x160, 0x1aa7ed, 0x160, 0x1aa8fe, 
        0x1aa8fe, 0x160, 0x1a62fa, 0x160, 0x1a6300, 0x1aa8fe, 0x160, 0x1aa8fe, 0x160, 0x1aaa18, 
        0x1aaa18, 0x160, 0x1a62fa, 0x160, 0x1a6300, 0x1aaa18, 0x160, 0x1aaa18, 0x160, 0x1aab63, 
        0x1aab63, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1aab63, 0x160, 0x1aa7e5, 0x160, 0x1aa7ed, 
        0x1aab63, 0x160, 0x1aab63, 0x160, 0x1aacc1, 0x1aacf6, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aacf6, 0x160, 0x1aacf6, 0x160, 0x1aadbd, 0x1aadbd, 0x160, 0x1a62f6, 0x160, 0x1a6300, 
        0x1aadbd, 0x160, 0x1aadbd, 0x160, 0x1aaf7e, 0x1aaf7e, 0x160, 0x1a62f9, 0x160, 0x1a6300, 
        0x1aaf7e, 0x160, 0x1aaf7e, 0x160, 0x1ab143, 0x1ab143, 0x160, 0x1ab143, 0x160, 0x1ab16d, 
        0x1ab16d, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1ab16d, 0x160, 0x1ab16d, 0x160, 0x1ab3aa, 
        0x1ab3aa, 0x160, 0x1ab3aa, 0x160, 0x1ab3de, 0x1ab3de, 0x160, 0x1a59bb, 0x160, 0x1a59c1, 
        0x1ab3de, 0x160, 0x1ab3de, 0x160, 0x1ab4ca, 0x1ab586, 0x160, 0x1ab586, 0x160, 0x1ab5ab, 
        0x1ab5ab, 0x160, 0x1a62f9, 0x160, 0x1a6300, 0x1ab5ab, 0x160, 0x1ab5ab, 0x160, 0x1ab6eb, 
        0x1ab6eb, 0x160, 0x1ab6eb, 0x160, 0x1ab709, 0x1ab709, 0x160, 0x1ab709, 0x160, 0x1ab73d, 
        0x1ab73d, 0x160, 0x1ab73d, 0x160, 0x1ab773, 0x1ab773, 0x160, 0x1ab773, 0x160, 0x1ab862, 
        0x1ab862, 0x160, 0x1ab862, 0x160, 0x1ab937, 0x1ab937, 0x160, 0x1ab937, 0x160, 0x1abb6d, 
        0x1abb6d, 0x160, 0x1abb6d, 0x160, 0x1abbec, 0x1abb6d, 0x160, 0x1ac878, 0x160, 0x1ac87f, 
        0x1abbec, 0x160, 0x1abbec, 0x160, 0x1abc6d, 0x1abbec, 0x160, 0x1ac879, 0x160, 0x1ac87f, 
        0x1abc6d, 0x160, 0x1abc6d, 0x160, 0x1abd00, 0x1abd00, 0x160, 0x1abd00, 0x160, 0x1abd15, 
        0x1abd15, 0x160, 0x1abd15, 0x160, 0x1abd42, 0x1abd42, 0x160, 0x1abd42, 0x160, 0x1abd78, 
        0x1abd78, 0x160, 0x1abd78, 0x160, 0x1ac0d4, 0x1abd78, 0x160, 0x1ac878, 0x160, 0x1ac87f, 
        0x1ac0d4, 0x160, 0x1ac0d4, 0x160, 0x1ac317, 0x1ac0d4, 0x160, 0x1ac878, 0x160, 0x1ac87f, 
        0x1ac317, 0x160, 0x1ac317, 0x160, 0x1ac5ea, 0x1ac5ea, 0x160, 0x1ac5ea, 0x160, 0x1ac674, 
        0x1ac674, 0x160, 0x1ac674, 0x160, 0x1ac70e, 0x1ac674, 0x160, 0x1ac879, 0x160, 0x1ac87f, 
        0x1ac70e, 0x160, 0x1ac70e, 0x160, 0x1ac87f, 0x1ac87f, 0x160, 0x1ac875, 0x160, 0x1ac9a8, 
        0x1ac9a8, 0x160, 0x1ac9a8, 0x160, 0x1ac9c0, 0x1ac9eb, 0x160, 0x1ac9eb, 0x160, 0x1acc78, 
        0x1acc78, 0x160, 0x1acc78, 0x160, 0x1accbc, 0x1accbc, 0x160, 0x1accbc, 0x160, 0x1accfe, 
        0x1accfe, 0x160, 0x1accfe, 0x160, 0x1acd40, 0x1acd40, 0x160, 0x1acd40, 0x160, 0x1acd6c, 
        0x1acd6c, 0x160, 0x1acd6c, 0x160, 0x1acf4b, 0x1acf4b, 0x160, 0x1acf4b, 0x160, 0x1ad074, 
        0x1acf4b, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1ad074, 0x160, 0x1ad074, 0x160, 0x1ad1b8, 
        0x1ad074, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 0x1ad1b8, 0x160, 0x1ad1b8, 0x160, 0x1ad1ca, 
        0x1ad1ca, 0x160, 0x1ad1ca, 0x160, 0x1ad1f8, 0x1ad1f8, 0x160, 0x1ad1f8, 0x160, 0x1ad28a, 
        0x1ad28a, 0x160, 0x1ad28a, 0x160, 0x1ad2ce, 0x1ad412, 0x160, 0x1ad412, 0x160, 0x1ad437, 
        0x1ad437, 0x160, 0x1ad437, 0x160, 0x1ad4e0, 0x1ad437, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1ad4e0, 0x160, 0x1ad4e0, 0x160, 0x1ad5cb, 0x1ad5cb, 0x160, 0x1ad5cb, 0x160, 0x1ad640, 
        0x1ad640, 0x160, 0x1ad640, 0x160, 0x1ad723, 0x1ad723, 0x160, 0x1ad723, 0x160, 0x1ad80e, 
        0x1ad80e, 0x160, 0x1ad80e, 0x160, 0x1ad933, 0x1ad933, 0x160, 0x1ad933, 0x160, 0x1ada58, 
        0x1ada58, 0x160, 0x1ada58, 0x160, 0x1adb97, 0x1ada58, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1adb97, 0x160, 0x1adb97, 0x160, 0x1add3f, 0x1add3f, 0x160, 0x1ad5c5, 0x160, 0x1ad5cb, 
        0x1add3f, 0x160, 0x1add3f, 0x160, 0x1ae04a, 0x1ae04a, 0x160, 0x1ae04a, 0x160, 0x1ae1e1, 
        0x1ae04a, 0x160, 0x1af4be, 0x160, 0x1af4c4, 0x1ae1e1, 0x160, 0x1ae1e1, 0x160, 0x1ae204, 
        0x1ae204, 0x160, 0x1ae204, 0x160, 0x1ae25e, 0x1ae25e, 0x160, 0x1ae25e, 0x160, 0x1ae2bf, 
        0x1ae2bf, 0x160, 0x1ae2bf, 0x160, 0x1ae345, 0x1ae2bf, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1ae345, 0x160, 0x1ae345, 0x160, 0x1ae3f2, 0x1ae345, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1ae3f2, 0x160, 0x1ae3f2, 0x160, 0x1ae5f9, 0x1ae5f9, 0x160, 0x1ae5f9, 0x160, 0x1ae62f, 
        0x1ae62f, 0x160, 0x1ae62f, 0x160, 0x1ae669, 0x1ae669, 0x160, 0x1ae669, 0x160, 0x1ae6ce, 
        0x1ae6ce, 0x160, 0x1ae6ce, 0x160, 0x1ae89c, 0x1ae6ce, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1aec45, 0x160, 0x1aec45, 0x160, 0x1af4c4, 0x1af4c4, 0x160, 0x1af4c4, 0x160, 0x1af508, 
        0x1af508, 0x160, 0x1af508, 0x160, 0x1af541, 0x1af541, 0x160, 0x1af541, 0x160, 0x1af5a6, 
        0x1af5a6, 0x160, 0x1af5a6, 0x160, 0x1af62c, 0x1af5a6, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1af62c, 0x160, 0x1af62c, 0x160, 0x1afb8f, 0x1af62c, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1afb8f, 0x160, 0x1ae3e8, 0x160, 0x1ae3f2, 0x1afb8f, 0x160, 0x1afb8f, 0x160, 0x1afc2f, 
        0x1afb8f, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 0x1afc2f, 0x160, 0x1afc2f, 0x160, 0x1b00e1, 
        0x1afc2f, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b00e1, 0x160, 0x1b00e1, 0x160, 0x1b028f, 
        0x1b00e1, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b028f, 0x160, 0x1b028f, 0x160, 0x1b0340, 
        0x1b0340, 0x160, 0x1b0340, 0x160, 0x1b0457, 0x1b0457, 0x160, 0x1b0450, 0x160, 0x1b055b, 
        0x1b055b, 0x160, 0x1b055b, 0x160, 0x1b0608, 0x1b0608, 0x160, 0x1b0608, 0x160, 0x1b06d3, 
        0x1b06d3, 0x160, 0x1b06d3, 0x160, 0x1b06fb, 0x1b06fb, 0x160, 0x1b06fb, 0x160, 0x1b09c3, 
        0x1b09c3, 0x160, 0x1b09c3, 0x160, 0x1b0a50, 0x1b0a50, 0x160, 0x1b0a50, 0x160, 0x1b10e2, 
        0x1b0a50, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b10e2, 0x160, 0x1b10e2, 0x160, 0x1b1154, 
        0x1b1154, 0x160, 0x1b1154, 0x160, 0x1b125b, 0x1b1154, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b125b, 0x160, 0x1af4bb, 0x160, 0x1af4c4, 0x1b125b, 0x160, 0x1b125b, 0x160, 0x1b177b, 
        0x1b177b, 0x160, 0x1af4be, 0x160, 0x1af4c4, 0x1b177b, 0x160, 0x1b177b, 0x160, 0x1b1d13, 
        0x1b1d13, 0x160, 0x1b1d13, 0x160, 0x1b1e30, 0x1b1e30, 0x160, 0x1b1e28, 0x160, 0x1b1f28, 
        0x1b1f28, 0x160, 0x1b1f28, 0x160, 0x1b2017, 0x1b2017, 0x160, 0x1b2017, 0x160, 0x1b211c, 
        0x1b211c, 0x160, 0x1b211c, 0x160, 0x1b21b4, 0x1b21b4, 0x160, 0x1b21b4, 0x160, 0x1b2246, 
        0x1b2246, 0x160, 0x1b2246, 0x160, 0x1b23ba, 0x1b23ba, 0x160, 0x1b23b4, 0x160, 0x1b2492, 
        0x1b2492, 0x160, 0x1b2492, 0x160, 0x1b252b, 0x1b252b, 0x160, 0x1b23a8, 0x160, 0x1b23ba, 
        0x1b252b, 0x160, 0x1b252b, 0x160, 0x1b268e, 0x1b268e, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b268e, 0x160, 0x1b268e, 0x160, 0x1b2772, 0x1b2772, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b2772, 0x160, 0x1b2768, 0x160, 0x1b2851, 0x1b2851, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b2851, 0x160, 0x1b2768, 0x160, 0x1b2772, 0x1b2851, 0x160, 0x1b2851, 0x160, 0x1b2930, 
        0x1b2930, 0x160, 0x1ad06c, 0x160, 0x1ad074, 0x1b2930, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b2930, 0x160, 0x1b2930, 0x160, 0x1b2afb, 0x1b2afb, 0x160, 0x1af4be, 0x160, 0x1af4c4, 
        0x1b2afb, 0x160, 0x1b2afb, 0x160, 0x1b2c6c, 0x1b2c6c, 0x160, 0x1af4be, 0x160, 0x1af4c4, 
        0x1b2c6c, 0x160, 0x1b2c6c, 0x160, 0x1b2e2b, 0x1b2e2b, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b2e2b, 0x160, 0x1b2e2b, 0x160, 0x1b2ed9, 0x1b2ed9, 0x160, 0x1b2ed9, 0x160, 0x1b2f43, 
        0x1b2f43, 0x160, 0x1b10da, 0x160, 0x1b10e2, 0x1b2f43, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b2f43, 0x160, 0x1b2f43, 0x160, 0x1b326b, 0x1b326b, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1b326b, 0x160, 0x1b326b, 0x160, 0x1b32e0, 0x1b32e0, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b32e0, 0x160, 0x1b32e0, 0x160, 0x1b3517, 0x1b3517, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1b3517, 0x160, 0x1b3517, 0x160, 0x1b35ef, 0x1b35ef, 0x160, 0x1b35ef, 0x160, 0x1b36d6, 
        0x1b36d6, 0x160, 0x1b10da, 0x160, 0x1b10e2, 0x1b36d6, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b36d6, 0x160, 0x1b36d6, 0x160, 0x1b3931, 0x1b3931, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1b3931, 0x160, 0x1b3931, 0x160, 0x1b39fa, 0x1b39fa, 0x160, 0x1af4be, 0x160, 0x1af4c4, 
        0x1b39fa, 0x160, 0x1b39fa, 0x160, 0x1b3b0c, 0x1b3b0c, 0x160, 0x1b2116, 0x160, 0x1b211c, 
        0x1b3b0c, 0x160, 0x1b3b0c, 0x160, 0x1b3bb0, 0x1b3bb0, 0x160, 0x1b3bb0, 0x160, 0x1b3ca5, 
        0x1b3ca5, 0x160, 0x1b21ad, 0x160, 0x1b21b4, 0x1b3ca5, 0x160, 0x1b3ca5, 0x160, 0x1b3e07, 
        0x1b3e07, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 0x1b3e07, 0x160, 0x1b3e07, 0x160, 0x1b3f20, 
        0x1b3f20, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b3f20, 0x160, 0x1b3f20, 0x160, 0x1b4068, 
        0x1b4068, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 0x1b4068, 0x160, 0x1b4068, 0x160, 0x1b40d6, 
        0x1b40d6, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b40d6, 0x160, 0x1b40d6, 0x160, 0x1b4152, 
        0x1b4152, 0x160, 0x1b4152, 0x160, 0x1b41b3, 0x1b41b3, 0x160, 0x1b41ac, 0x160, 0x1b420c, 
        0x1b420c, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 0x1b420c, 0x160, 0x1b420c, 0x160, 0x1b446a, 
        0x1b446a, 0x160, 0x1ad4d8, 0x160, 0x1ad4e0, 0x1b446a, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b446a, 0x160, 0x1b446a, 0x160, 0x1b490d, 0x1b490d, 0x160, 0x1b490d, 0x160, 0x1b49c7, 
        0x1b4a80, 0x160, 0x1ad5c5, 0x160, 0x1ad5cb, 0x1b4a80, 0x160, 0x1b4a80, 0x160, 0x1b4b55, 
        0x1b4b55, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 0x1b4b55, 0x160, 0x1b4b55, 0x160, 0x1b4ce6, 
        0x1b4ce6, 0x160, 0x1b4ce6, 0x160, 0x1b4d1b, 0x1b4d1b, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b4d1b, 0x160, 0x1b4d1b, 0x160, 0x1b4f2b, 0x1b4f2b, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1b4f2b, 0x160, 0x1b4f2b, 0x160, 0x1b5135, 0x1b5135, 0x160, 0x1b5135, 0x160, 0x1b518c, 
        0x1b518c, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b518c, 0x160, 0x1b518c, 0x160, 0x1b538a, 
        0x1b538a, 0x160, 0x1ad06c, 0x160, 0x1ad074, 0x1b538a, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b538a, 0x160, 0x1b538a, 0x160, 0x1b5af4, 0x1b5af4, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b5af4, 0x160, 0x1b5af4, 0x160, 0x1b5d3b, 0x1b5d3b, 0x160, 0x1ad4d8, 0x160, 0x1ad4e0, 
        0x1b5d3b, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b5d3b, 0x160, 0x1b5d3b, 0x160, 0x1b5e88, 
        0x1b5e88, 0x160, 0x1b5e88, 0x160, 0x1b62aa, 0x1b62aa, 0x160, 0x1b36d0, 0x160, 0x1b36d6, 
        0x1b62aa, 0x160, 0x1b62aa, 0x160, 0x1b6909, 0x1b6909, 0x160, 0x1b1253, 0x160, 0x1b125b, 
        0x1b6909, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 0x1b6909, 0x160, 0x1b6909, 0x160, 0x1b6b6f, 
        0x1b6b6f, 0x160, 0x1b6b6f, 0x160, 0x1b6bba, 0x1b6bba, 0x160, 0x1b23b3, 0x160, 0x1b23ba, 
        0x1b6bba, 0x160, 0x1b6bba, 0x160, 0x1b6d25, 0x1b6d25, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 
        0x1b6d25, 0x160, 0x1b6d25, 0x160, 0x1b6e24, 0x1b6e24, 0x160, 0x1b23b4, 0x160, 0x1b23ba, 
        0x1b6e24, 0x160, 0x1b6e24, 0x160, 0x1b701b, 0x1b701b, 0x160, 0x1b701b, 0x160, 0x1b7152, 
        0x1b7152, 0x160, 0x1b7152, 0x160, 0x1b7208, 0x1b7208, 0x160, 0x1b23b0, 0x160, 0x1b23ba, 
        0x1b7208, 0x160, 0x1b7208, 0x160, 0x1b7786, 0x1b77c2, 0x160, 0x1b77c2, 0x160, 0x1b7852, 
        0x1b77c2, 0x160, 0x1ba80c, 0x160, 0x1ba813, 0x1b7852, 0x160, 0x1b7852, 0x160, 0x1b7868, 
        0x1b7868, 0x160, 0x1b7868, 0x160, 0x1b78cc, 0x1b7868, 0x160, 0x1b7a47, 0x160, 0x1b7a4d, 
        0x1b78cc, 0x160, 0x1b78c5, 0x160, 0x1b7928, 0x1b78cc, 0x160, 0x1b7a47, 0x160, 0x1b7a4d, 
        0x1b7928, 0x160, 0x1b7928, 0x160, 0x1b79b0, 0x1b7928, 0x160, 0x1b7b72, 0x160, 0x1b7b7a, 
        0x1b7ae4, 0x160, 0x1b7ae4, 0x160, 0x1b7b7a, 0x1b7c0e, 0x160, 0x1b7c0e, 0x160, 0x1b7c67, 
        0x1b7c85, 0x160, 0x1b7c85, 0x160, 0x1b7cb9, 0x1b7cb9, 0x160, 0x1b7cb9, 0x160, 0x1b7d96, 
        0x1b7d96, 0x160, 0x1b7d96, 0x160, 0x1b7e53, 0x1b7e53, 0x160, 0x1b7e53, 0x160, 0x1b8095, 
        0x1b8095, 0x160, 0x1b8095, 0x160, 0x1b80f2, 0x1b80f2, 0x160, 0x1b80f2, 0x160, 0x1b813e, 
        0x1b813e, 0x160, 0x1b7a44, 0x160, 0x1b7a4d, 0x1b813e, 0x160, 0x1b813e, 0x160, 0x1b8201, 
        0x1b8201, 0x160, 0x1b7a47, 0x160, 0x1b7a4d, 0x1b8201, 0x160, 0x1b8201, 0x160, 0x1b8473, 
        0x1b8473, 0x160, 0x1b7b70, 0x160, 0x1b7b7a, 0x1b8473, 0x160, 0x1b8473, 0x160, 0x1b850b, 
        0x1b8562, 0x160, 0x1b8562, 0x160, 0x1b8616, 0x1b8616, 0x160, 0x1b8616, 0x160, 0x1b8658, 
        0x1b8658, 0x160, 0x1b8658, 0x160, 0x1b86ca, 0x1b86ca, 0x160, 0x1b7a47, 0x160, 0x1b7a4d, 
        0x1b86ca, 0x160, 0x1b86ca, 0x160, 0x1b8859, 0x1b8859, 0x160, 0x1b8859, 0x160, 0x1b895e, 
        0x1b895e, 0x160, 0x1b895e, 0x160, 0x1b8fe7, 0x1b895e, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1b8fe7, 0x160, 0x1b8fe7, 0x160, 0x1b94b9, 0x1b8fe7, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1b94b9, 0x160, 0x1b94b9, 0x160, 0x1b951a, 0x1b951a, 0x160, 0x1b951a, 0x160, 0x1b9581, 
        0x1b9581, 0x160, 0x1b9581, 0x160, 0x1b960d, 0x1b960d, 0x160, 0x1b960d, 0x160, 0x1b974f, 
        0x1b974f, 0x160, 0x1b974f, 0x160, 0x1b97fa, 0x1b97fa, 0x160, 0x1b97fa, 0x160, 0x1b9948, 
        0x1b9948, 0x160, 0x1b9948, 0x160, 0x1b99c1, 0x1b99c1, 0x160, 0x1b99c1, 0x160, 0x1b9aca, 
        0x1b9aca, 0x160, 0x1b9aca, 0x160, 0x1b9c78, 0x1b9c78, 0x160, 0x1b9c78, 0x160, 0x1b9fde, 
        0x1b9c78, 0x160, 0x1ba80c, 0x160, 0x1ba813, 0x1b9fde, 0x160, 0x1b9fde, 0x160, 0x1ba0e7, 
        0x1ba0e7, 0x160, 0x1ba0e7, 0x160, 0x1ba785, 0x1ba0e7, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1ba7ae, 0x160, 0x1ba7ae, 0x160, 0x1baa21, 0x1baa21, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1baa21, 0x160, 0x1baa21, 0x160, 0x1bac86, 0x1bac86, 0x160, 0x1bac86, 0x160, 0x1bad15, 
        0x1bad56, 0x160, 0x1ba77d, 0x160, 0x1ba785, 0x1bad56, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1bad56, 0x160, 0x1bad56, 0x160, 0x1baf82, 0x1baf82, 0x160, 0x1ba804, 0x160, 0x1ba813, 
        0x1baf82, 0x160, 0x1baa1a, 0x160, 0x1baa21, 0x1baf82, 0x160, 0x1baf82, 0x160, 0x1bb10f, 
        0x1bb10f, 0x160, 0x1bb10f, 0x160, 0x1bb18d, 0x1bb246, 0x160, 0x1ba80c, 0x160, 0x1ba813, 
        0x1bb246, 0x160, 0x1bb246, 0x160, 0x1bb827, 0x1bb827, 0x160, 0x1bb827, 0x160, 0x1bb889, 
        0x1bb889, 0x160, 0x1bb889, 0x160, 0x1bb8e7, 0x1bb8e7, 0x160, 0x1bb8e7, 0x160, 0x1bb927, 
        0x1bb927, 0x160, 0x1bb927, 0x160, 0x1bb965, 0x1bb965, 0x160, 0x1bb965, 0x160, 0x1bb9a8, 
        0x1bb9a8, 0x160, 0x1bb9a8, 0x160, 0x1bb9cd, 0x1bb9cd, 0x160, 0x1bb9cd, 0x160, 0x1bbaad, 
        0x1bbbff, 0x160, 0x1bbbff, 0x160, 0x1bbc45, 0x1bbc45, 0x160, 0x1bbc40, 0x160, 0x1bbc68, 
        0x1bbc9d, 0x160, 0x1bbc9d, 0x160, 0x1bbce7, 0x1bbd1e, 0x160, 0x1bbce1, 0x160, 0x1bbce7, 
        0x1bbd1e, 0x160, 0x1bbd1e, 0x160, 0x1bbd46, 0x1bbd46, 0x160, 0x1bbd46, 0x160, 0x1bbd74, 
        0x1bbd74, 0x160, 0x1bbd74, 0x160, 0x1bbda2, 0x1bbdfa, 0x160, 0x1bbdfa, 0x160, 0x1bbe3c, 
        0x1bbe3c, 0x160, 0x1bbe3c, 0x160, 0x1bbe7a, 0x1bbe7a, 0x160, 0x1bbe7a, 0x160, 0x1bbf20, 
        0x1bbf71, 0x160, 0x1bbf71, 0x160, 0x1bbfb3, 0x1bbfb3, 0x160, 0x1bbfb3, 0x160, 0x1bc03b, 
        0x1bc03b, 0x160, 0x1bc03b, 0x160, 0x1bc21f, 0x1bc21f, 0x160, 0x1bc21f, 0x160, 0x1bc38a, 
        0x1bc38a, 0x160, 0x1bc38a, 0x160, 0x1bc3dc, 0x1bc3dc, 0x160, 0x1bc3dc, 0x160, 0x1bc403, 
        0x1bc403, 0x160, 0x1bc403, 0x160, 0x1bc4f4, 0x1bc4f4, 0x160, 0x1bc4f4, 0x160, 0x1bc5d8, 
        0x1bc5d8, 0x160, 0x1bc5d8, 0x160, 0x1bc63d, 0x1bc63d, 0x160, 0x1bc63d, 0x160, 0x1bc694, 
        0x1bc694, 0x160, 0x1bc694, 0x160, 0x1bc6e7, 0x1bc6e7, 0x160, 0x1bc6e7, 0x160, 0x1bc727, 
        0x1bc727, 0x160, 0x1bc727, 0x160, 0x1bc7c0, 0x1bc7c0, 0x160, 0x1bc7c0, 0x160, 0x1bc801, 
        0x1bc801, 0x160, 0x1bc801, 0x160, 0x1bca20, 0x1bca20, 0x160, 0x1bca20, 0x160, 0x1bcab9, 
        0x1bcabc, 0x160, 0x1bcabc, 0x160, 0x1bcc50, 0x1bcd9f, 0x160, 0x1bcd9f, 0x160, 0x1bce43, 
        0x1bce43, 0x160, 0x1bce43, 0x160, 0x1bcf16, 0x1bcf16, 0x160, 0x1bca19, 0x160, 0x1bca20, 
        0x1bcf16, 0x160, 0x1bcf16, 0x160, 0x1bd039, 0x1bd039, 0x160, 0x1bd039, 0x160, 0x1bd0e1, 
        0x1bd039, 0x160, 0x1bd18a, 0x160, 0x1bd198, 0x1bd0e1, 0x160, 0x1bd0e1, 0x160, 0x1bd198, 
        0x1bd198, 0x160, 0x1bd114, 0x160, 0x1bd1d7, 0x1bd1d7, 0x160, 0x1bd1d7, 0x160, 0x1bd287, 
        0x1bd287, 0x160, 0x1bd287, 0x160, 0x1bd3ce, 0x1bd3ce, 0x160, 0x1bd3ce, 0x160, 0x1bd48f, 
        0x1bd48f, 0x160, 0x1bd3ce, 0x160, 0x1bd49d, 0x1bd49d, 0x160, 0x1bd49d, 0x160, 0x1bd569, 
        0x1bd569, 0x160, 0x1bc3dc, 0x160, 0x1bc403, 0x1bd569, 0x160, 0x1bd569, 0x160, 0x1bd5aa, 
        0x1bd5aa, 0x160, 0x1bd5aa, 0x160, 0x1bd615, 0x1bd615, 0x160, 0x1bd615, 0x160, 0x1bd68d, 
        0x1bd68d, 0x160, 0x1bd68d, 0x160, 0x1bd7fc, 0x1bd948, 0x160, 0x1bca19, 0x160, 0x1bca20, 
        0x1bd948, 0x160, 0x1bd948, 0x160, 0x1bda16, 0x1bda16, 0x160, 0x1bda16, 0x160, 0x1bda89, 
        0x1bda89, 0x160, 0x1bd3c8, 0x160, 0x1bd3ce, 0x1bda89, 0x160, 0x1bda89, 0x160, 0x1bdb87, 
        0x1bdb87, 0x160, 0x1bdb87, 0x160, 0x1bdb96, 0x1bdb87, 0x160, 0x1cca84, 0x160, 0x1ccae2, 
        0x1bdd06, 0x160, 0x1bdd06, 0x160, 0x1bdd61, 0x1be185, 0x160, 0x1be185, 0x160, 0x1be1b5, 
        0x1bf310, 0x160, 0x1bf310, 0x160, 0x1bf3a9, 0x1bf3a9, 0x160, 0x1bf3a9, 0x160, 0x1bf3cf, 
        0x1bf3cf, 0x160, 0x1bf3cf, 0x160, 0x1bf42a, 0x1bf42a, 0x160, 0x1bf42a, 0x160, 0x1bf43a, 
        0x1bf43a, 0x160, 0x1bf43a, 0x160, 0x1bf4d2, 0x1bf4d2, 0x160, 0x1bf4d2, 0x160, 0x1bf57c, 
        0x1bf57c, 0x160, 0x1bf57c, 0x160, 0x1bf625, 0x1bf625, 0x160, 0x1bf625, 0x160, 0x1bf710, 
        0x1bf710, 0x160, 0x1bf710, 0x160, 0x1bf7d4, 0x1bf7d4, 0x160, 0x1bf7d4, 0x160, 0x1bf833, 
        0x1bf833, 0x160, 0x1bf833, 0x160, 0x1bf86e, 0x1bf86e, 0x160, 0x1bf86e, 0x160, 0x1bf892, 
        0x1bf892, 0x160, 0x1bf892, 0x160, 0x1bf8aa, 0x1bf8aa, 0x160, 0x1bf8aa, 0x160, 0x1bf953, 
        0x1bf953, 0x160, 0x1bf953, 0x160, 0x1bf9c9, 0x1bf9c9, 0x160, 0x1bf9c9, 0x160, 0x1bfa0f, 
        0x1bfa0f, 0x160, 0x1bfa0f, 0x160, 0x1bfa50, 0x1bfa50, 0x160, 0x1bfa50, 0x160, 0x1bfb66, 
        0x1bfbd3, 0x160, 0x1bfbd3, 0x160, 0x1bfc97, 0x1bfcd4, 0x160, 0x1bfcd4, 0x160, 0x1bfd00, 
        0x1bfd00, 0x160, 0x1bfd00, 0x160, 0x1bfd2f, 0x1bfd2f, 0x160, 0x1bfd2f, 0x160, 0x1bfd4c, 
        0x1bfd4c, 0x160, 0x1bfd4c, 0x160, 0x1bfd80, 0x1bfd80, 0x160, 0x1bfd80, 0x160, 0x1bfd94, 
        0x1bfdbf, 0x160, 0x1bfdbf, 0x160, 0x1c0c03, 0x1c0c04, 0x160, 0x1c0c04, 0x160, 0x1c161b, 
        0x1c0c04, 0x160, 0x1c161c, 0x160, 0x1c1929, 0x1c1930, 0x160, 0x1c1930, 0x160, 0x1c19f9, 
        0x1c1930, 0x160, 0x1c19fc, 0x160, 0x1c4353, 0x1c4354, 0x160, 0x1c4354, 0x160, 0x1c4497, 
        0x1c4354, 0x160, 0x1c4498, 0x160, 0x1c8483, 0x1c84e8, 0x160, 0x1c84e8, 0x160, 0x1c880b, 
        0x1c880b, 0x160, 0x1c880b, 0x160, 0x1c8aae, 0x1c8aae, 0x160, 0x1c8aae, 0x160, 0x1c8af1, 
        0x1c8af1, 0x160, 0x1c8af1, 0x160, 0x1c8b3c, 0x1c8bd6, 0x160, 0x1c8bd6, 0x160, 0x1c8c05, 
        0x1c8c05, 0x160, 0x1c8c05, 0x160, 0x1c8c82, 0x1c8c83, 0x160, 0x1c8c83, 0x160, 0x1c8c93, 
        0x1c8c83, 0x160, 0x1c8c94, 0x160, 0x1ca116, 0x1ca116, 0x160, 0x1ca116, 0x160, 0x1ca123, 
        0x1ca116, 0x160, 0x1ca124, 0x160, 0x1cb786, 0x1cb786, 0x160, 0x1cb786, 0x160, 0x1cb83f, 
        0x1cb83f, 0x160, 0x1cb83f, 0x160, 0x1cb8ee, 0x1cb8ee, 0x160, 0x1cb8ee, 0x160, 0x1cb901, 
        0x1cb901, 0x160, 0x1cb901, 0x160, 0x1cb931, 0x1cb931, 0x160, 0x1cb931, 0x160, 0x1cb947, 
        0x1cb950, 0x160, 0x1cb950, 0x160, 0x1cb9f1, 0x1cb9f2, 0x160, 0x1cb9f2, 0x160, 0x1cba0e, 
        0x1cba0f, 0x160, 0x1cba0f, 0x160, 0x1cba3c, 0x1cba3c, 0x160, 0x1cba3c, 0x160, 0x1cba3e, 
        0x1cbab4, 0x160, 0x1cbab4, 0x160, 0x1cbccd, 0x1cbab4, 0x160, 0x1cbcf0, 0x160, 0x1cbd05, 
        0x1cbccd, 0x160, 0x1cbccd, 0x160, 0x1cbd05, 0x1cbd14, 0x160, 0x1cbd14, 0x160, 0x1cbd19, 
        0x1cbd1e, 0x160, 0x1cbd1e, 0x160, 0x1cbd40, 0x1cbd40, 0x160, 0x1cbd40, 0x160, 0x1cbd41, 
        0x1cbd41, 0x160, 0x1cbd41, 0x160, 0x1cbd59, 0x1cbd59, 0x160, 0x1cbccb, 0x160, 0x1cbccd, 
        0x1cbd59, 0x160, 0x1cbcf0, 0x160, 0x1cbd05, 0x1cbd59, 0x160, 0x1cbd59, 0x160, 0x1cbd6f, 
        0x1cbd6f, 0x160, 0x1cbd6f, 0x160, 0x1cbd7d, 0x1cbd97, 0x160, 0x1cbd97, 0x160, 0x1cbdcb, 
        0x1cbdcb, 0x160, 0x1cbdcb, 0x160, 0x1cbdf6, 0x1cbe00, 0x160, 0x1cbe00, 0x160, 0x1cbe31, 
        0x1cbe37, 0x160, 0x1cbe37, 0x160, 0x1cbea3, 0x1cbea3, 0x160, 0x1cbea3, 0x160, 0x1cbf57, 
        0x1cbf57, 0x160, 0x1cbf57, 0x160, 0x1cc01f, 0x1cc01f, 0x160, 0x1cc01f, 0x160, 0x1cc03a, 
        0x1cc03a, 0x160, 0x1cc03a, 0x160, 0x1cc044, 0x1cc0d0, 0x160, 0x1cc0d0, 0x160, 0x1cc112, 
        0x1cc112, 0x160, 0x1cc112, 0x160, 0x1cc20e, 0x1cc20e, 0x160, 0x1cc20e, 0x160, 0x1cc23e, 
        0x1cc23e, 0x160, 0x1cc23e, 0x160, 0x1cc26d, 0x1cc26d, 0x160, 0x1cc26d, 0x160, 0x1cc282, 
        0x1cc282, 0x160, 0x1cc282, 0x160, 0x1cc28e, 0x1cc28e, 0x160, 0x1cc28e, 0x160, 0x1cc2f7, 
        0x1cc2f7, 0x160, 0x1cc2f7, 0x160, 0x1cc380, 0x1cc380, 0x160, 0x1cc380, 0x160, 0x1cc54a, 
        0x1cc54a, 0x160, 0x1cc54a, 0x160, 0x1cc583, 0x1cc583, 0x160, 0x1cc583, 0x160, 0x1cc76a, 
        0x1cc76a, 0x160, 0x1cc76a, 0x160, 0x1cc785, 0x1cc785, 0x160, 0x1cc785, 0x160, 0x1cc78d, 
        0x1cc78d, 0x160, 0x1cc78d, 0x160, 0x1cc798, 0x1cc798, 0x160, 0x1cc798, 0x160, 0x1cc7f2, 
        0x1cc7fb, 0x160, 0x1cc7fb, 0x160, 0x1cc81a, 0x1cc81a, 0x160, 0x1cc81a, 0x160, 0x1cc81f, 
        0x1cc9a1, 0x160, 0x1cc9a1, 0x160, 0x1cca84, 0x1cca84, 0x160, 0x1cca84, 0x160, 0x1ccae2, 
        0x1ccae2, 0x160, 0x1ccae2, 0x160, 0x1ccafb, 0x1ccafb, 0x160, 0x1ccafb, 0x160, 0x1ccd7c, 
        0x1ccd7c, 0x160, 0x1ccd7c, 0x160, 0x1cceaf, 0x1cceaf, 0x160, 0x1cceaf, 0x160, 0x1ccf0a, 
        0x1ccf0a, 0x160, 0x1ccf0a, 0x160, 0x1ccf2e, 0x1ccf2e, 0x160, 0x1ccf29, 0x160, 0x1ccf51, 
        0x1ccf51, 0x160, 0x1ccf51, 0x160, 0x1ccfb2, 0x1ccfb2, 0x160, 0x1ccfb2, 0x160, 0x1cd08d, 
        0x1cd08d, 0x160, 0x1cd08d, 0x160, 0x1cd094, 0x1cd094, 0x160, 0x1cd094, 0x160, 0x1cd4dd, 
        0x1cd4dd, 0x160, 0x1cd4dd, 0x160, 0x1cd4f5, 0x1cd4f5, 0x160, 0x1cd4f5, 0x160, 0x1cd503, 
        0x1cd503, 0x160, 0x1cd503, 0x160, 0x1cd5c6, 0x1cd5c6, 0x160, 0x1cd5c6, 0x160, 0x1cd71a, 
        0x1cd71a, 0x160, 0x1cd71a, 0x160, 0x1cd768, 0x1cd76a, 0x160, 0x1cd76a, 0x160, 0x1cd7b5, 
        0x1cd7b5, 0x160, 0x1cd7b5, 0x160, 0x1cd804, 0x1cd805, 0x160, 0x1cd805, 0x160, 0x1cd820, 
        0x1cd820, 0x160, 0x1cd820, 0x160, 0x1cd835, 0x1cd820, 0x160, 0x1cd83a, 0x160, 0x1cd850, 
        0x1cd850, 0x160, 0x1cd850, 0x160, 0x1cd8e9, 0x1cd850, 0x160, 0x1cd8ec, 0x160, 0x1cd91b, 
        0x1cd91b, 0x160, 0x1cd91b, 0x160, 0x1cd938, 0x1cd938, 0x160, 0x1cd938, 0x160, 0x1cd985, 
        0x1cd985, 0x160, 0x1cd985, 0x160, 0x1cd9a5, 0x1cda84, 0x160, 0x1cda84, 0x160, 0x1cdab5, 
        0x1cdabf, 0x160, 0x1cdabf, 0x160, 0x1cdaff, 0x1cdaff, 0x160, 0x1cdaff, 0x160, 0x1cdb10, 
        0x1cdb10, 0x160, 0x1cdb10, 0x160, 0x1cdb95, 0x1cdb95, 0x160, 0x1cdb95, 0x160, 0x1cdba3, 
        0x1cdba8, 0x160, 0x1cdba8, 0x160, 0x1cdbb4, 0x1cdbcb, 0x160, 0x1cdbcb, 0x160, 0x1cdbd7, 
        0x1cdc02, 0x160, 0x1cdc02, 0x160, 0x1cddc7, 0x1cde2c, 0x160, 0x1cde2c, 0x160, 0x1cded4, 
        0x1cded4, 0x160, 0x1cded4, 0x160, 0x1cdf0d, 0x1cdf2b, 0x160, 0x1cdf2b, 0x160, 0x1cdf5c, 
        0x1cdf5c, 0x160, 0x1cdf5c, 0x160, 0x1ce01b, 0x1ce01b, 0x160, 0x1ce01b, 0x160, 0x1ce05c, 
        0x1ce05c, 0x160, 0x1ce05c, 0x160, 0x1ce06d, 0x1ce06d, 0x160, 0x1ce06d, 0x160, 0x1ce073, 
        0x1ce073, 0x160, 0x1ce073, 0x160, 0x1ce0a5, 0x1ce0a5, 0x160, 0x1ce0a5, 0x160, 0x1ce0aa, 
        0x1ce0aa, 0x160, 0x1ce0aa, 0x160, 0x1ce121, 0x1ce121, 0x160, 0x1ce121, 0x160, 0x1ce140, 
        0x1ce1f8, 0x160, 0x1ce1f8, 0x160, 0x1ce2a3, 0x1ce2a3, 0x160, 0x1ce2a3, 0x160, 0x1ce473, 
        0x1ce474, 0x160, 0x1ce474, 0x160, 0x1ce518, 0x1ce518, 0x160, 0x1ce518, 0x160, 0x1ce540, 
        0x1ce540, 0x160, 0x1ce540, 0x160, 0x1ce597, 0x1ce597, 0x160, 0x1ce597, 0x160, 0x1ce5c9, 
        0x1ce5c9, 0x160, 0x1ce5c9, 0x160, 0x1ce601, 0x1ce608, 0x160, 0x1ce608, 0x160, 0x1ce673, 
        0x1ce60d, 0x160, 0x1ce60d, 0x160, 0x1ce673, 0x1ce674, 0x160, 0x1ce674, 0x160, 0x1ce717, 
        0x1ce71c, 0x160, 0x1ce717, 0x160, 0x1ce827, 0x1ce827, 0x160, 0x1ce827, 0x160, 0x1ce866, 
        0x1ce866, 0x160, 0x1ce866, 0x160, 0x1ce8c4, 0x1ce866, 0x160, 0x1ceb56, 0x160, 0x1ceb5c, 
        0x1ce9c7, 0x160, 0x1ce9c7, 0x160, 0x1cea3b, 0x1cea3b, 0x160, 0x1cea3b, 0x160, 0x1cea89, 
        0x1cea89, 0x160, 0x1cea89, 0x160, 0x1ceb5c, 0x1ceb5c, 0x160, 0x1ceb53, 0x160, 0x1cec0b, 
        0x1cec0b, 0x160, 0x1cec0b, 0x160, 0x1ced4f, 0x1ced4f, 0x160, 0x1ced4f, 0x160, 0x1cedc6, 
        0x1cedc6, 0x160, 0x1cedc6, 0x160, 0x1cedc9, 0x1cedca, 0x160, 0x1cedca, 0x160, 0x1cee02, 
        0x1cee02, 0x160, 0x1cee02, 0x160, 0x1cee26, 0x1cf1cd, 0x160, 0x1cf1cd, 0x160, 0x1cf217, 
        0x1cf217, 0x160, 0x1cf217, 0x160, 0x1cf232, 0x1cf269, 0x160, 0x1cf269, 0x160, 0x1cf2b2, 
        0x1cf2b2, 0x160, 0x1cf2b2, 0x160, 0x1cf2cd, 0x1cf2cd, 0x160, 0x1cf2cd, 0x160, 0x1cf2db, 
        0x1cf2db, 0x160, 0x1cf2db, 0x160, 0x1cf40b, 0x1cf40c, 0x160, 0x1cf40c, 0x160, 0x1cf447, 
        0x1cf447, 0x160, 0x1cf447, 0x160, 0x1cf52c, 0x1cf52c, 0x160, 0x1cf52c, 0x160, 0x1cf554, 
        0x1cf554, 0x160, 0x1cf554, 0x160, 0x1cf807, 0x1cf807, 0x160, 0x1cf807, 0x160, 0x1cf837, 
        0x1cf837, 0x160, 0x1cf837, 0x160, 0x1cf94c, 0x1cf976, 0x160, 0x1cf976, 0x160, 0x1cf989, 
        0x1cf976, 0x160, 0x1cfbb7, 0x160, 0x1cfc46, 0x1cf989, 0x160, 0x1cf989, 0x160, 0x1cf9af, 
        0x1cf9af, 0x160, 0x1cf9af, 0x160, 0x1cfac5, 0x1cfac5, 0x160, 0x1cfac5, 0x160, 0x1cfbb7, 
        0x1cfc46, 0x160, 0x1cfc46, 0x160, 0x1cfc4f, 0x1cfc4f, 0x160, 0x1cfc4f, 0x160, 0x1cfc5a, 
        0x1d2fb6, 0x160, 0x1d2fb6, 0x160, 0x1d3080, 0x1d30da, 0x160, 0x1d30da, 0x160, 0x1d3101, 
        0x1d3101, 0x160, 0x1d3101, 0x160, 0x1d3107, 0x1d3107, 0x160, 0x1d3107, 0x160, 0x1d310d, 
        0x1d310d, 0x160, 0x1d310d, 0x160, 0x1d312b, 0x1d312b, 0x160, 0x1d312b, 0x160, 0x1d3180, 
        0x1d3180, 0x160, 0x1d3180, 0x160, 0x1d3195, 0x1d31a0, 0x160, 0x1d31a0, 0x160, 0x1d31b8, 
        0x1d31b8, 0x160, 0x1d31b8, 0x160, 0x1d3230, 0x1d3230, 0x160, 0x1cdf0d, 0x160, 0x1cdf2b, 
        0x1d3230, 0x160, 0x1d3230, 0x160, 0x1d323c, 0x1d3241, 0x160, 0x1d3241, 0x160, 0x1d3293, 
        0x1d3293, 0x160, 0x1d3293, 0x160, 0x1d330f, 0x1d330f, 0x160, 0x1d330f, 0x160, 0x1d332e, 
        0x1d3333, 0x160, 0x1d3333, 0x160, 0x1d3362, 0x1d3362, 0x160, 0x1d3362, 0x160, 0x1d337f, 
        0x1d3380, 0x160, 0x1d3380, 0x160, 0x1d3388, 0x1d3388, 0x160, 0x1d3388, 0x160, 0x1d3398, 
        0x1d339b, 0x160, 0x1d339b, 0x160, 0x1d349c, 0x1d33b9, 0x160, 0x1d33b9, 0x160, 0x1d349c, 
        0x1d33c8, 0x160, 0x1d33c8, 0x160, 0x1d349c, 0x1d356b, 0x160, 0x1d3565, 0x160, 0x1d362d, 
        0x1d3632, 0x160, 0x1d3632, 0x160, 0x1d364f, 0x1d364f, 0x160, 0x1d364f, 0x160, 0x1d3675, 
        0x1d3675, 0x160, 0x1d3675, 0x160, 0x1d3694, 0x1d3694, 0x160, 0x1d3694, 0x160, 0x1d36c7, 
        0x1d36c7, 0x160, 0x1d36c7, 0x160, 0x1d39c4, 0x1d39c5, 0x160, 0x1d39c5, 0x160, 0x1d39de, 
        0x1d39de, 0x160, 0x1d39de, 0x160, 0x1d39f8, 0x1d39f8, 0x160, 0x1d39f8, 0x160, 0x1d3a1d, 
        0x1d3f8a, 0x160, 0x1d3f8a, 0x160, 0x1d3f9e, 0x1d3f8a, 0x160, 0x1d3fa4, 0x160, 0x1d3fb0, 
        0x1d3fb0, 0x160, 0x1d3fb0, 0x160, 0x1d3fcd, 0x1d3fec, 0x160, 0x1d3fec, 0x160, 0x1d400f, 
        0x1d4032, 0x160, 0x1d4032, 0x160, 0x1d4041, 0x1d4041, 0x160, 0x1d4041, 0x160, 0x1d4179, 
        0x1d4179, 0x160, 0x1d4179, 0x160, 0x1d41ce, 0x1d41ce, 0x160, 0x1d41ce, 0x160, 0x1d429b, 
        0x1d429c, 0x160, 0x1d429c, 0x160, 0x1d42e0, 0x1d42e0, 0x160, 0x1d42e0, 0x160, 0x1d4369, 
        0x1d4369, 0x160, 0x1d4369, 0x160, 0x1d437b, 0x1d437b, 0x160, 0x1d437b, 0x160, 0x1d4446, 
        0x1d4446, 0x160, 0x1d4446, 0x160, 0x1d4464, 0x1d495e, 0x160, 0x1d495e, 0x160, 0x1d4971, 
        0x1d4971, 0x160, 0x1d4971, 0x160, 0x1d4990,     };

    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}

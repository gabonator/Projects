#include "cico32.h"

void init()
{
    ds = 0x0168;
    cs = 0x0160;
    es = 0x0028;
    ss = 0x0168;
    esp = 0x270840;
    loadOverlay("WRMS_1", 0x10000);
    loadOverlay("WRMS_2", 0x4e000);
}

void sub_44a3c();

void start()
{
    sub_44a3c();
}

void sub_10010();
void sub_10059();
void sub_1008b();
void sub_100f2();
void sub_1014b();
void sub_102f1();
void sub_10336();
void sub_1039b();
void sub_103b5();
void sub_103d4();
void sub_108b4();
void sub_10a14();
void sub_10ccc();
void sub_10df2();
void sub_10e44();
void sub_10f02();
void sub_10f65();
void sub_10f93();
void sub_11058();
void sub_110af();
void sub_111a0();
void sub_1128d();
void sub_1139d();
void sub_1143a();
void sub_114fb();
void sub_11723();
void sub_11797();
void sub_117eb();
void sub_11a6a();
void sub_11bd3();
void sub_11cae();
void sub_11d18();
void sub_11f43();
void sub_12079();
void sub_1217f();
void sub_1230d();
void sub_12382();
void sub_124e6();
void sub_12501();
void sub_1254f();
void sub_12593();
void sub_12645();
void sub_126e2();
void sub_126ed();
void sub_1295c();
void sub_12b2d();
void sub_12b95();
void sub_12f16();
void sub_130dc();
void sub_13107();
void sub_13305();
void sub_1336c();
void sub_1346a();
void sub_1350e();
void sub_13556();
void sub_1356b();
void sub_136ed();
void sub_1376a();
void sub_13852();
void sub_138c0();
void sub_13bd3();
void sub_13c2f();
void sub_13c8b();
void sub_13ce7();
void sub_13d75();
void sub_13df1();
void sub_13e47();
void sub_13f15();
void sub_13f45();
void sub_1406b();
void sub_1422e();
void sub_143b3();
void sub_14539();
void sub_14674();
void sub_14709();
void sub_14794();
void sub_14afa();
void sub_14b2a();
void sub_14cbd();
void sub_15025();
void sub_1507f();
void sub_150a0();
void sub_153e0();
void sub_153f9();
void sub_1540e();
void sub_15452();
void sub_15487();
void sub_154b0();
void sub_1554b();
void sub_15608();
void sub_15687();
void sub_156aa();
void sub_156b5();
void sub_1576f();
void sub_157d3();
void sub_157ef();
void sub_15840();
void sub_158e6();
void sub_159c1();
void sub_15a13();
void sub_15a3d();
void sub_15a7d();
void sub_15b1f();
void sub_15b2e();
void sub_15c1b();
void sub_15c49();
void sub_15cc3();
void sub_15d7f();
void sub_1628e();
void sub_16a3f();
void sub_16c7f();
void sub_16dd3();
void sub_16f50();
void sub_17006();
void sub_17029();
void sub_17075();
void sub_170ca();
void sub_171a9();
void sub_1720e();
void sub_1727a();
void sub_17298();
void sub_172d6();
void sub_1730a();
void sub_1736c();
void sub_173c6();
void sub_17452();
void sub_175a8();
void sub_1768b();
void sub_177ed();
void sub_1783e();
void sub_178cb();
void sub_17980();
void sub_17a10();
void sub_17aa6();
void sub_17d21();
void sub_17fad();
void sub_18178();
void sub_181c7();
void sub_181fc();
void sub_18308();
void sub_18346();
void sub_184a3();
void sub_18d41();
void sub_18dc8();
void sub_18de2();
void sub_18e05();
void sub_18e49();
void sub_18e73();
void sub_18eb1();
void sub_18f9b();
void sub_18fae();
void sub_18fef();
void sub_19008();
void sub_19028();
void sub_1903c();
void sub_19074();
void sub_1909c();
void sub_190b5();
void sub_1910f();
void sub_1912f();
void sub_1915d();
void sub_19171();
void sub_191d5();
void sub_19216();
void sub_1925b();
void sub_1929c();
void sub_192c4();
void sub_19311();
void sub_19335();
void sub_19359();
void sub_193b7();
void sub_193d0();
void sub_193f7();
void sub_1941e();
void sub_19a3c();
void sub_19b44();
void sub_19def();
void sub_19f32();
void sub_1a0a6();
void sub_1a248();
void sub_1a303();
void sub_1a513();
void sub_1a643();
void sub_1a6e3();
void sub_1a797();
void sub_1ae27();
void sub_1afc1();
void sub_1aff7();
void sub_1b01b();
void sub_1b051();
void sub_1b09d();
void sub_1b0e2();
void sub_1b682();
void sub_1bcbd();
void sub_1bedc();
void sub_1bfe9();
void sub_1c14d();
void sub_1c6e1();
void sub_1c755();
void sub_1c999();
void sub_1ca42();
void sub_1cdd3();
void sub_1d1fa();
void sub_1d55b();
void sub_1d712();
void sub_1d755();
void sub_1d923();
void sub_1d9b6();
void sub_1da35();
void sub_1db16();
void sub_1db92();
void sub_1de56();
void sub_1df22();
void sub_1e2dd();
void sub_1e4e5();
void sub_1e616();
void sub_1e625();
void sub_1e66f();
void sub_1e6c8();
void sub_1e6f1();
void sub_1e70c();
void sub_1e720();
void sub_1e738();
void sub_1e742();
void sub_1e793();
void sub_1e7a0();
void sub_1e7ba();
void sub_1e93a();
void sub_1e964();
void sub_1e9c1();
void sub_1ea04();
void sub_1ea31();
void sub_1eae0();
void sub_1eb1b();
void sub_1eb58();
void sub_1ec1f();
void sub_1ec92();
void sub_1ed0b();
void sub_1ed81();
void sub_1edc0();
void sub_1ee64();
void sub_1eeb5();
void sub_1eecc();
void sub_1eef8();
void sub_1ef3a();
void sub_1ef62();
void sub_1f0bf();
void sub_1f14a();
void sub_1f17f();
void sub_1f1d5();
void sub_1f300();
void sub_1f3f9();
void sub_1f51d();
void sub_1f59b();
void sub_1f7e2();
void sub_1f99a();
void sub_1f9bc();
void sub_1f9e0();
void sub_1fac1();
void sub_1fb31();
void sub_1fc77();
void sub_1fca3();
void sub_1fce7();
void sub_1fde2();
void sub_1fe9a();
void sub_1fef3();
void sub_1ff89();
void sub_1fff9();
void sub_20026();
void sub_20078();
void sub_200fa();
void sub_2012b();
void sub_201e9();
void sub_20271();
void sub_2033e();
void sub_2039a();
void sub_204e9();
void sub_205c6();
void sub_2061a();
void sub_206a1();
void sub_20974();
void sub_209d7();
void sub_20a3f();
void sub_20a79();
void sub_20b5d();
void sub_20ba6();
void sub_20be0();
void sub_20bfb();
void sub_20c98();
void sub_20cd0();
void sub_20d0f();
void sub_20d2c();
void sub_20dac();
void sub_20e1a();
void sub_20e5c();
void sub_20f95();
void sub_211b5();
void sub_21212();
void sub_21251();
void sub_21294();
void sub_21308();
void sub_21399();
void sub_21526();
void sub_2159f();
void sub_21605();
void sub_21811();
void sub_2185f();
void sub_21899();
void sub_21998();
void sub_219ff();
void sub_21a8c();
void sub_21a9c();
void sub_21acd();
void sub_21b65();
void sub_21c3a();
void sub_21caa();
void sub_21d1a();
void sub_21dc9();
void sub_21e32();
void sub_21e8e();
void sub_21ec1();
void sub_21f18();
void sub_220cf();
void sub_2216f();
void sub_22220();
void sub_2225a();
void sub_2229d();
void sub_222f5();
void sub_2232f();
void sub_22399();
void sub_227cf();
void sub_22869();
void sub_22950();
void sub_229ce();
void sub_229fa();
void sub_22a5b();
void sub_22a95();
void sub_22ac5();
void sub_22bf3();
void sub_22c24();
void sub_22c63();
void sub_22cc0();
void sub_22e27();
void sub_23084();
void sub_23186();
void sub_231d8();
void sub_23390();
void sub_23470();
void sub_234ba();
void sub_23571();
void sub_23620();
void sub_2367a();
void sub_237ed();
void sub_238fe();
void sub_23a18();
void sub_23b63();
void sub_23cf6();
void sub_23dbd();
void sub_23f7e();
void sub_24143();
void sub_2416d();
void sub_243aa();
void sub_243de();
void sub_24586();
void sub_245ab();
void sub_246eb();
void sub_24709();
void sub_2473d();
void sub_24773();
void sub_24862();
void sub_24937();
void sub_24b6d();
void sub_24bec();
void sub_24c6d();
void sub_24d00();
void sub_24d15();
void sub_24d42();
void sub_24d78();
void sub_250d4();
void sub_25317();
void sub_255ea();
void sub_25674();
void sub_2570e();
void sub_2587f();
void sub_259a8();
void sub_259eb();
void sub_25c78();
void sub_25cbc();
void sub_25cfe();
void sub_25d40();
void sub_25d6c();
void sub_25f4b();
void sub_26074();
void sub_261b8();
void sub_261ca();
void sub_261f8();
void sub_2628a();
void sub_26412();
void sub_26437();
void sub_264e0();
void sub_265cb();
void sub_26640();
void sub_26723();
void sub_2680e();
void sub_26933();
void sub_26a58();
void sub_26b97();
void sub_26d3f();
void sub_2704a();
void sub_271e1();
void sub_27204();
void sub_2725e();
void sub_272bf();
void sub_27345();
void sub_273f2();
void sub_275f9();
void sub_2762f();
void sub_27669();
void sub_276ce();
void sub_27c45();
void sub_284c4();
void sub_28508();
void sub_28541();
void sub_285a6();
void sub_2862c();
void sub_28b8f();
void sub_28c2f();
void sub_290e1();
void sub_2928f();
void sub_29340();
void sub_29457();
void sub_2955b();
void sub_29608();
void sub_296d3();
void sub_296fb();
void sub_299c3();
void sub_29a50();
void sub_2a0e2();
void sub_2a154();
void sub_2a25b();
void sub_2a77b();
void sub_2ad13();
void sub_2ae30();
void sub_2af28();
void sub_2b017();
void sub_2b11c();
void sub_2b1b4();
void sub_2b246();
void sub_2b3ba();
void sub_2b492();
void sub_2b52b();
void sub_2b68e();
void sub_2b772();
void sub_2b851();
void sub_2b930();
void sub_2bafb();
void sub_2bc6c();
void sub_2be2b();
void sub_2bed9();
void sub_2bf43();
void sub_2c26b();
void sub_2c2e0();
void sub_2c517();
void sub_2c5ef();
void sub_2c6d6();
void sub_2c931();
void sub_2c9fa();
void sub_2cb0c();
void sub_2cbb0();
void sub_2cca5();
void sub_2ce07();
void sub_2cf20();
void sub_2d068();
void sub_2d0d6();
void sub_2d152();
void sub_2d1b3();
void sub_2d20c();
void sub_2d46a();
void sub_2d90d();
void sub_2da80();
void sub_2db55();
void sub_2dce6();
void sub_2dd1b();
void sub_2df2b();
void sub_2e135();
void sub_2e18c();
void sub_2e38a();
void sub_2eaf4();
void sub_2ed3b();
void sub_2ee88();
void sub_2f2aa();
void sub_2f909();
void sub_2fb6f();
void sub_2fbba();
void sub_2fd25();
void sub_2fe24();
void sub_3001b();
void sub_30152();
void sub_30208();
void sub_307c2();
void sub_30852();
void sub_30868();
void sub_308cc();
void sub_30928();
void sub_30ae4();
void sub_30c0e();
void sub_30c85();
void sub_30cb9();
void sub_30d96();
void sub_30e53();
void sub_31095();
void sub_310f2();
void sub_3113e();
void sub_31201();
void sub_31473();
void sub_31562();
void sub_31616();
void sub_31658();
void sub_316ca();
void sub_31859();
void sub_3195e();
void sub_31fe7();
void sub_324b9();
void sub_3251a();
void sub_32581();
void sub_3260d();
void sub_3274f();
void sub_327fa();
void sub_32948();
void sub_329c1();
void sub_32aca();
void sub_32c78();
void sub_32fde();
void sub_330e7();
void sub_337ae();
void sub_33a21();
void sub_33c86();
void sub_33d56();
void sub_33f82();
void sub_3410f();
void sub_34246();
void sub_34827();
void sub_34889();
void sub_348e7();
void sub_34927();
void sub_34965();
void sub_349a8();
void sub_349cd();
void sub_34bff();
void sub_34c45();
void sub_34c9d();
void sub_34d1e();
void sub_34d46();
void sub_34d74();
void sub_34dfa();
void sub_34e3c();
void sub_34e7a();
void sub_34f71();
void sub_34fb3();
void sub_3503b();
void sub_3521f();
void sub_3538a();
void sub_353dc();
void sub_35403();
void sub_354f4();
void sub_355d8();
void sub_3563d();
void sub_35694();
void sub_356e7();
void sub_35727();
void sub_357c0();
void sub_35801();
void sub_35a20();
void sub_35abc();
void sub_35d9f();
void sub_35e43();
void sub_35f16();
void sub_36039();
void sub_360e1();
void sub_36198();
void sub_361d7();
void sub_36287();
void sub_363ce();
void sub_3648f();
void sub_3649d();
void sub_36569();
void sub_365aa();
void sub_36615();
void sub_3668d();
void sub_36948();
void sub_36a16();
void sub_36a89();
void sub_36b87();
void sub_36d06();
void sub_37185();
void sub_38310();
void sub_383a9();
void sub_383cf();
void sub_3842a();
void sub_3843a();
void sub_384d2();
void sub_3857c();
void sub_38625();
void sub_38710();
void sub_387d4();
void sub_38833();
void sub_3886e();
void sub_38892();
void sub_388aa();
void sub_38953();
void sub_389c9();
void sub_38a0f();
void sub_38a50();
void sub_38bd3();
void sub_38cd4();
void sub_38d00();
void sub_38d2f();
void sub_38d4c();
void sub_38d80();
void sub_38dbf();
void sub_39c04();
void sub_3a930();
void sub_3d354();
void sub_414e8();
void sub_4180b();
void sub_41aae();
void sub_41af1();
void sub_41bd6();
void sub_41c05();
void sub_41c83();
void sub_43116();
void sub_44786();
void sub_4483f();
void sub_448ee();
void sub_44901();
void sub_44931();
void sub_44950();
void sub_449f2();
void sub_44a0f();
void sub_44a3c();
void sub_44ab4();
void sub_44ccd();
void sub_44d14();
void sub_44d1e();
void sub_44d40();
void sub_44d41();
void sub_44d59();
void sub_44d6f();
void sub_44d97();
void sub_44dcb();
void sub_44e00();
void sub_44e37();
void sub_44ea3();
void sub_44f57();
void sub_4501f();
void sub_4503a();
void sub_450d0();
void sub_45112();
void sub_4520e();
void sub_4523e();
void sub_4526d();
void sub_45282();
void sub_4528e();
void sub_452f7();
void sub_45380();
void sub_4554a();
void sub_45583();
void sub_4576a();
void sub_45785();
void sub_4578d();
void sub_45798();
void sub_457fb();
void sub_4581a();
void sub_459a1();
void sub_45a84();
void sub_45ae2();
void sub_45afb();
void sub_45d7c();
void sub_45eaf();
void sub_45f0a();
void sub_45f2e();
void sub_45f51();
void sub_45fb2();
void sub_4608d();
void sub_46094();
void sub_464dd();
void sub_464f5();
void sub_46503();
void sub_465c6();
void sub_4671a();
void sub_4676a();
void sub_467b5();
void sub_46805();
void sub_46820();
void sub_46850();
void sub_4691b();
void sub_46938();
void sub_46985();
void sub_46a84();
void sub_46abf();
void sub_46aff();
void sub_46b10();
void sub_46b95();
void sub_46ba8();
void sub_46bcb();
void sub_46c02();
void sub_46e2c();
void sub_46ed4();
void sub_46f2b();
void sub_46f5c();
void sub_4701b();
void sub_4705c();
void sub_4706d();
void sub_47073();
void sub_470a5();
void sub_470aa();
void sub_47121();
void sub_471f8();
void sub_472a3();
void sub_47474();
void sub_47518();
void sub_47540();
void sub_47597();
void sub_475c9();
void sub_47608();
void sub_4760d();
void sub_47674();
void sub_4771c();
void sub_47827();
void sub_47866();
void sub_479c7();
void sub_47a3b();
void sub_47a89();
void sub_47b5c();
void sub_47c0b();
void sub_47d4f();
void sub_47dc6();
void sub_47dca();
void sub_47e02();
void sub_481cd();
void sub_48217();
void sub_48269();
void sub_482b2();
void sub_482cd();
void sub_482db();
void sub_4840c();
void sub_48447();
void sub_4852c();
void sub_48554();
void sub_48807();
void sub_48837();
void sub_48976();
void sub_48989();
void sub_489af();
void sub_48ac5();
void sub_48c46();
void sub_48c4f();
void sub_4bfb6();
void sub_4c0da();
void sub_4c101();
void sub_4c107();
void sub_4c10d();
void sub_4c12b();
void sub_4c180();
void sub_4c1a0();
void sub_4c1b8();
void sub_4c230();
void sub_4c241();
void sub_4c293();
void sub_4c30f();
void sub_4c333();
void sub_4c362();
void sub_4c380();
void sub_4c388();
void sub_4c39b();
void sub_4c3b9();
void sub_4c3c8();
void sub_4c56b();
void sub_4c632();
void sub_4c64f();
void sub_4c675();
void sub_4c694();
void sub_4c6c7();
void sub_4c9c5();
void sub_4c9de();
void sub_4c9f8();
void sub_4cf8a();
void sub_4cfb0();
void sub_4cfec();
void sub_4d032();
void sub_4d041();
void sub_4d179();
void sub_4d1ce();
void sub_4d29c();
void sub_4d2e0();
void sub_4d369();
void sub_4d37b();
void sub_4d446();
void sub_4d95e();
void sub_4d971();

void sub_10010() // 0160:10010 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    ecx = edx;
    if (eax == edx)
        goto loc_10055;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_10024;
    ebx = 0xfffffff8;
    goto loc_10029;
loc_10024: // 0160:10024
    ebx = 0x00000008;
loc_10029: // 0160:10029
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax = -eax;
    esi &= eax;
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax = -eax;
    edx = esi;
    ecx &= eax;
    goto loc_10051;
loc_10043: // 0160:10043
    sub_1e625();
    eax = edx;
    sub_38d4c();
    edx += ebx;
loc_10051: // 0160:10051
    if (edx != ecx)
        goto loc_10043;
loc_10055: // 0160:10055
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10059() // 0160:10059 +long
{
    esp -= 4;
    sub_38d2f();
    eax = memoryAGet32(ds, 0x590cc);
    eax = memoryAGet32(ds, eax * 8 + 0x590d0);
    sub_38bd3();
    eax = memoryAGet32(ds, 0x590cc);
    eax = memoryAGet32(ds, eax * 8 + 0x590d4);
    memoryASet32(ds, 0x217ad0, eax);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x21af04, eax);
    esp += 4;
}
void sub_1008b() // 0160:1008b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    if (eax != memoryAGet32(ds, 0x590cc))
        goto loc_100a2;
    if (memoryAGet32(ds, 0x217ad0) != 0x00000000)
        goto loc_100ef;
loc_100a2: // 0160:100a2
    edx = 0;
    sub_38d80();
    sub_10010();
    sub_38d2f();
    eax = memoryAGet32(ds, ebx * 8 + 0x590d0);
    sub_38bd3();
    edx = memoryAGet32(ds, 0x5c664);
    edx = (int32_t)edx * (int32_t)ecx;
    memoryASet32(ds, 0x590cc, ebx);
    eax = memoryAGet32(ds, ebx * 8 + 0x590d4);
    ebx = 0x0000000a;
    memoryASet32(ds, 0x217ad0, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    eax = 0;
    sub_10010();
loc_100ef: // 0160:100ef
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_100f2() // 0160:100f2 +long
{
    esp -= 4;
    push32(edx);
    if (memoryAGet32(ds, 0x217abc) == 0x00000000)
        goto loc_1013a;
    edx = 0x000a0000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000a4000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000a8000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000ac000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = pop32();
    esp += 4;
    return;
loc_1013a: // 0160:1013a
    edx = 0x000a0000;
    eax = 0x00102cb0;
    sub_17006();
    edx = pop32();
    esp += 4;
}
void sub_1014b() // 0160:1014b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000100;
    ebx = eax;
    ecx = edx;
    edx = 0x00000100;
    eax = 0;
    memoryASet32(ds, 0x5c704, edx);
    sub_1e93a();
    eax = 0;
loc_1016e: // 0160:1016e
    eax += 0x00000004;
    esi = 0;
    memoryASet32(ds, eax + 1060012, esi);
    if ((int32_t)eax < (int32_t)0x0000fa00)
        goto loc_1016e;
    sub_100f2();
    sub_157d3();
    sub_15687();
    sub_36b87();
    edx = 0;
    sub_38d80();
    sub_10010();
    sub_38cd4();
    push32(ebx);
    push32(0x0004e004);
    eax = esp + 8;
    push32(eax);
    sub_44901();
    edi = memoryAGet32(ds, 0x217abc);
    esp += 0x0000000c;
    if (!edi)
        goto loc_101f1;
    push32(esi);
    eax = esp + 4;
    push32(eax);
    push32(0x0004e00f);
    push32(0x0004e016);
    push32(0x0004e01d);
    push32(0x0004e026);
    push32(0x0004e02f);
    push32(0x0004e02f);
    push32(esi);
    sub_44931();
    esp += 0x00000024;
    goto loc_10219;
loc_101f1: // 0160:101f1
    push32(esi);
    eax = esp + 4;
    push32(eax);
    push32(0x0004e016);
    push32(0x0004e01d);
    push32(0x0004e026);
    push32(0x0004e02f);
    push32(0x0004e02f);
    push32(esi);
    sub_44931();
    esp += 0x00000020;
loc_10219: // 0160:10219
    eax = 0;
    sub_1e66f();
    sub_15608();
    sub_1576f();
    edx = memoryAGet32(ds, 0x5c66c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    ebp = 0x00000001;
    sub_36a89();
    eax = 0x00000028;
    memoryASet32(ds, 0x5900c, ebp);
    memoryASet32(ds, 0x59004, ebp);
    memoryASet32(ds, 0x21ad88, ebp);
    memoryASet32(ds, 0x58ff4, eax);
    sub_15c49();
    sub_15a7d();
    sub_124e6();
    sub_12593();
    sub_14794();
    if (memoryAGet32(ds, 0x5906c) == 0x00000000)
        goto loc_102a0;
    eax = 0;
loc_1028e: // 0160:1028e
    eax += 0x00000004;
    edi = 0;
    memoryASet32(ds, eax + 1060012, edi);
    if ((int32_t)eax < (int32_t)0x0000c580)
        goto loc_1028e;
loc_102a0: // 0160:102a0
    sub_100f2();
    eax = memoryAGet32(ds, 0x22313c);
    ebp = 0x00000100;
    memoryASet32(ds, 0x21af04, eax);
    memoryASet32(ds, 0x5c704, ebp);
    if (!ecx)
        goto loc_102c8;
    eax = 0x000000ff;
    sub_1e93a();
loc_102c8: // 0160:102c8
    eax = 0x000000b0;
    edx = 0;
    memoryASet32(ds, 0x5c704, eax);
    memoryASet32(ds, 0x5900c, edx);
    memoryASet32(ds, 0x59004, edx);
    memoryASet32(ds, 0x21ad88, edx);
    esp += 0x00000100;
    goto loc_12549;
    // gap 8792 bytes
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_102f1() // 0160:102f1 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x217abc) == 0x00000000)
        goto loc_1030b;
    memoryASet32(ds, 0x59000, 0x00000001);
    sub_15b2e();
loc_1030b: // 0160:1030b
    ecx = 0x00000001;
    eax = 0x0004e036;
    edx = ecx;
    memoryASet32(ds, 0x5906c, ecx);
    //sub_1014b();
    edx = 0x00000008;
    eax = 0;
    sub_24709();
    memoryASet32(ds, 0x59194, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_10336() // 0160:10336 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x59198) == 0x00000000)
        goto loc_1038e;
    if (memoryAGet32(ds, 0x5c674) == 0x00000000)
        goto loc_1038e;
    edx = memoryAGet32(ds, 0x59194);
    edx++;
    ebx = 0x00000009;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x59194, edx);
    if (edx)
        goto loc_1037b;
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_1037b;
    edi = edx + 1;
    memoryASet32(ds, 0x59194, edi);
loc_1037b: // 0160:1037b
    eax = memoryAGet32(ds, 0x59194);
    edx = 0;
    eax = memoryAGet32(ds, eax * 4 + 0x59170);
    sub_1014b();
loc_1038e: // 0160:1038e
    ebp = 0;
    memoryASet32(ds, 0x59198, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1039b() // 0160:1039b +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x00217ad4;
    esi = 0x002194fe;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_103b5() // 0160:103b5 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000068a;
    edi = 0x002194fe;
    esi = 0x00217ad4;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    sub_261b8();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_103d4() // 0160:103d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000200;
    edi = 0x00001356;
    edx = 0;
    ebx = 0;
    ecx = 0;
    eax = 0;
    memoryASet32(ds, 0x21ac46, edx);
    memoryASet32(ds, 0x21ac4a, edx);
    memoryASet32(ds, 0x590a0, edx);
    memoryASet32(ds, 0x21ac4e, edx);
    memoryASet32(ds, 0x217abc, ebx);
    memoryASet32(ds, 0x217acc, ebx);
    memoryASet32(ds, 0x21af14, ebx);
    memoryASet32(ds, 0x21af1c, ebx);
    memoryASet32(ds, 0x21af18, ebx);
    memoryASet32(ds, 0x21af20, ebx);
    memoryASet32(ds, 0x217ac8, esi);
    memoryASet32(ds, 0x217ac4, esi);
    memoryASet32(ds, 0x217ac0, ebx);
    memoryASet32(ds, 0x217a8c, ebx);
    memoryASet32(ds, 0x217ab0, esi);
    memoryASet32(ds, 0x217ab4, esi);
    memoryASet32(ds, 0x217a94, ebx);
    memoryASet32(ds, 0x217aac, ebx);
    memoryASet32(ds, 0x217a88, ebx);
    memoryASet32(ds, 0x217aa8, ebx);
    memoryASet32(ds, 0x217a98, ebx);
    memoryASet32(ds, 0x21ac54, ebx);
    memoryASet32(ds, 0x21ac58, ebx);
    memoryASet32(ds, 0x21af04, ebx);
    memoryASet32(ds, 0x21ac5c, ebx);
    memoryASet32(ds, 0x21ac60, edi);
    memoryASet32(ds, 0x21ac64, ebx);
    memoryASet32(ds, 0x21ac68, ebx);
    memoryASet32(ds, 0x21ac70, ebx);
    memoryASet32(ds, 0x21ac74, ebx);
    memoryASet32(ds, 0x21ac7c, ebx);
    memoryASet32(ds, 0x21ac80, ebx);
    memoryASet32(ds, 0x21ac84, ebx);
    memoryASet32(ds, 0x21ac90, ecx);
    memoryASet32(ds, 0x21ac94, ecx);
    memoryASet32(ds, 0x21ac98, ecx);
    memoryASet32(ds, 0x21ac9c, ecx);
    memoryASet32(ds, 0x21aca0, ecx);
    memoryASet32(ds, 0x21acac, ecx);
    memoryASet32(ds, 0x21acb4, ecx);
    memoryASet32(ds, 0x21acc0, ecx);
    memoryASet32(ds, 0x21acdc, ecx);
    memoryASet32(ds, 0x21ace0, eax);
    memoryASet32(ds, 0x21ace4, eax);
    edx = 0x0000ffff;
    esi = 0x00000010;
    ebx = 0x000001f4;
    edi = 0x00000001;
    eax = memoryAGet32(ds, 0x21ace8);
    memoryASet16(ds, 0x21ac52, dx);
    memoryASet32(ds, 0x21ac78, esi);
    memoryASet32(ds, 0x21ac8c, ebx);
    memoryASet32(ds, 0x21aca4, esi);
    memoryASet32(ds, 0x21aca8, esi);
    edx = 0x00000096;
    memoryASet32(ds, 0x21acc8, edi);
    memoryASet32(ds, 0x21ac6c, edx);
    memoryASet32(ds, 0x21ac88, edx);
    edx = esi;
    esi = 0x000000e6;
    memoryASet32(ds, 0x21acb8, edx);
    memoryASet32(ds, 0x21acbc, edx);
    memoryASet32(ds, 0x21acb0, esi);
    edx = 0;
    esi = 0x00000513;
    memoryASet32(ds, 0x21af24, edx);
    memoryASet32(ds, 0x21aefc, edx);
    memoryASet32(ds, 0x21accc, edx);
    memoryASet32(ds, 0x21acd0, edx);
    memoryASet32(ds, 0x21acd4, edx);
    memoryASet32(ds, 0x21acd8, edx);
    memoryASet32(ds, 0x21acc4, esi);
    memoryASet(ds, eax, 0x00);
    esi = 0x00010000;
    memoryASet32(ds, 0x21acec, edx);
    memoryASet32(ds, 0x21acf0, edx);
    memoryASet32(ds, 0x21acf4, edx);
    memoryASet32(ds, 0x21acf8, edx);
    memoryASet32(ds, 0x21acfc, ecx);
    memoryASet32(ds, 0x21af08, esi);
    memoryASet32(ds, 0x21af0c, edx);
    memoryASet32(ds, 0x21af10, edx);
    memoryASet32(ds, 0x21ad00, edx);
    memoryASet32(ds, 0x21ad04, edx);
    memoryASet32(ds, 0x21ad08, edx);
    eax = 0x00000004;
    memoryASet32(ds, 0x21ad0c, ecx);
    memoryASet32(ds, 0x21ad14, edx);
    memoryASet32(ds, 0x21ad18, edx);
    memoryASet32(ds, 0x21ad1c, edx);
    memoryASet32(ds, 0x21ad20, edx);
    memoryASet32(ds, 0x21ad24, edx);
    memoryASet32(ds, 0x21ad30, edx);
    memoryASet32(ds, 0x21ad34, edx);
    memoryASet32(ds, 0x21adec, edi);
    esi = 0;
    ecx = 0x00000096;
    edx = 0x00000040;
    memoryASet32(ds, 0x21ad10, esi);
    memoryASet32(ds, 0x21ad2c, esi);
    memoryASet32(ds, 0x21ad38, eax);
    memoryASet32(ds, 0x21ad40, esi);
    memoryASet32(ds, 0x21ad48, esi);
    memoryASet32(ds, 0x21ad4c, esi);
    memoryASet32(ds, 0x21ad50, esi);
    memoryASet32(ds, 0x21ad28, ecx);
    memoryASet32(ds, 0x21ad3c, edx);
    eax = 0;
    ecx = 0x0000003d;
    memoryASet32(ds, 0x21ad54, eax);
    memoryASet32(ds, 0x21ad58, eax);
    memoryASet32(ds, 0x21ad5c, eax);
    memoryASet32(ds, 0x21ad60, eax);
    memoryASet32(ds, 0x21ad64, eax);
    memoryASet32(ds, 0x21ad68, eax);
    memoryASet32(ds, 0x21ad6c, eax);
    memoryASet32(ds, 0x21ad70, eax);
    memoryASet32(ds, 0x21ad74, eax);
    memoryASet32(ds, 0x21ad78, eax);
    memoryASet32(ds, 0x21af00, eax);
    memoryASet32(ds, 0x21ad7c, eax);
    memoryASet32(ds, 0x21ad80, eax);
    memoryASet32(ds, 0x21ad84, eax);
    memoryASet32(ds, 0x21ad88, eax);
    memoryASet32(ds, 0x21ad8c, eax);
    memoryASet32(ds, 0x21ad90, eax);
    memoryASet32(ds, 0x21ad94, eax);
    memoryASet32(ds, 0x21ad98, eax);
    memoryASet32(ds, 0x21ad9c, eax);
    memoryASet32(ds, 0x21ada0, eax);
    memoryASet32(ds, 0x21ada4, eax);
    memoryASet32(ds, 0x21ada8, eax);
    memoryASet32(ds, 0x21adac, eax);
    memoryASet32(ds, 0x21adb0, eax);
    memoryASet32(ds, 0x21adb4, eax);
    memoryASet32(ds, 0x21aef8, eax);
    memoryASet32(ds, 0x21adb8, eax);
    memoryASet32(ds, 0x21adbc, eax);
    memoryASet32(ds, 0x21adc0, eax);
    memoryASet32(ds, 0x21adc4, eax);
    memoryASet32(ds, 0x21adc8, eax);
    memoryASet32(ds, 0x21addc, eax);
    memoryASet32(ds, 0x21ade0, eax);
    memoryASet32(ds, 0x21ade4, eax);
    memoryASet32(ds, 0x21ade8, eax);
    memoryASet32(ds, 0x21adf0, eax);
    memoryASet32(ds, 0x21adf4, eax);
    memoryASet32(ds, 0x21adf8, eax);
    memoryASet32(ds, 0x21adfc, eax);
    memoryASet32(ds, 0x21ae00, eax);
    memoryASet32(ds, 0x21ae04, eax);
    memoryASet32(ds, 0x21ae08, eax);
    memoryASet32(ds, 0x21ae0c, eax);
    memoryASet32(ds, 0x21ae10, eax);
    memoryASet32(ds, 0x21ae14, eax);
    memoryASet32(ds, 0x21ae18, eax);
    memoryASet32(ds, 0x21ae1c, eax);
    memoryASet32(ds, 0x21ae20, eax);
    memoryASet32(ds, 0x21ae24, eax);
    memoryASet32(ds, 0x21ae28, eax);
    memoryASet32(ds, 0x21ae2c, eax);
    memoryASet32(ds, 0x21ae30, eax);
    memoryASet32(ds, 0x21ae34, eax);
    memoryASet32(ds, 0x21ae38, eax);
    memoryASet32(ds, 0x21ae3c, eax);
    memoryASet32(ds, 0x21ae40, eax);
    memoryASet32(ds, 0x21ad44, ecx);
    ebp = 0x00000010;
    edi = 0x00000003;
    memoryASet32(ds, 0x21ae44, eax);
    memoryASet32(ds, 0x21ae48, eax);
    memoryASet32(ds, 0x21ae4c, eax);
    memoryASet32(ds, 0x21ae50, eax);
    memoryASet32(ds, 0x21ae54, eax);
    memoryASet32(ds, 0x21ae58, eax);
    memoryASet32(ds, 0x21ae5c, eax);
    memoryASet32(ds, 0x21ae60, eax);
    memoryASet32(ds, 0x21ae64, eax);
    memoryASet32(ds, 0x21ae68, eax);
    memoryASet32(ds, 0x21ae6c, eax);
    memoryASet32(ds, 0x21ae70, eax);
    memoryASet32(ds, 0x21ae74, eax);
    memoryASet32(ds, 0x21ae78, eax);
    memoryASet32(ds, 0x21ae7c, eax);
    memoryASet32(ds, 0x21ae80, eax);
    memoryASet32(ds, 0x21ae84, eax);
    memoryASet32(ds, 0x21ae88, eax);
    memoryASet32(ds, 0x21ae8c, eax);
    memoryASet32(ds, 0x21ae94, esi);
    memoryASet32(ds, 0x21ae9c, esi);
    memoryASet32(ds, 0x21aea0, esi);
    memoryASet32(ds, 0x21aea4, esi);
    memoryASet32(ds, 0x21aea8, esi);
    memoryASet32(ds, 0x21aeac, esi);
    memoryASet32(ds, 0x21aeb0, esi);
    memoryASet32(ds, 0x21aeb8, esi);
    memoryASet32(ds, 0x21aebc, esi);
    memoryASet32(ds, 0x21aec0, esi);
    memoryASet32(ds, 0x21aec8, esi);
    memoryASet32(ds, 0x21aedc, esi);
    memoryASet32(ds, 0x21aee4, esi);
    memoryASet32(ds, 0x21aee8, esi);
    memoryASet32(ds, 0x21aef0, esi);
    memoryASet32(ds, 0x21aef4, esi);
    ebx = 0;
    eax = 0xffffffff;
    memoryASet32(ds, 0x21ae98, ebx);
    memoryASet32(ds, 0x21aeb4, ebx);
    memoryASet32(ds, 0x21aec4, ebp);
    memoryASet32(ds, 0x21aee0, ebx);
    memoryASet32(ds, 0x21adcc, edi);
    memoryASet32(ds, 0x21add0, edi);
    memoryASet32(ds, 0x21add4, edi);
    memoryASet32(ds, 0x21add8, edi);
    memoryASet32(ds, 0x21aeec, ebx);
    memoryASet32(ds, 0x21ae90, eax);
    goto loc_109e4;
    // gap 345 bytes
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_108b4() // 0160:108b4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = memoryAGet32(ds, 0x217aa8);
    ebx = 0;
loc_108c5: // 0160:108c5
    ah = 0;
    edx = 0;
    ecx = 0;
    memoryASet(ds, ebx + 2193008, ah);
    eax = 0;
    dl = memoryAGet(ds, ebx + 2193010);
    al = memoryAGet(ds, ebx + 2193009);
    edx = edx + edx*4;
    eax += eax;
    cl = memoryAGet(ds, ebx + 2193011);
    edx += eax;
    edx += ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000);
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
    if (ebp > 0x00000009)
        goto loc_109d2;
    edx = eax * 0x000000e0;
    edi = eax * 0x000000f0;
    esi = eax * 0x000000c0;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx <<= 8;
    memoryASet32(ds, esp + 4, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esp, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    switch (ebp)
    {
        case 0: goto loc_10966;
        case 1: goto loc_1097b;
        case 2: goto loc_109a7;
        case 3: goto loc_10996;
        case 4: goto loc_10996;
        case 5: goto loc_10996;
        case 6: goto loc_109a7;
        case 7: goto loc_10966;
        case 8: goto loc_1097b;
        case 9: goto loc_109b9;
        default:
            printf("unhandled: %x\n", ebp);
            stop("ind 0160:1095e");
    }
loc_10966: // 0160:10966
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 2193010, cl);
    memoryASet(ds, ebx + 2193009, al);
loc_10975: // 0160:10975
    al = memoryAGet(ds, esp + 4);
    goto loc_109cc;
loc_1097b: // 0160:1097b
    al = memoryAGet(ds, esp + 4);
    memoryASet(ds, ebx + 2193011, cl);
    memoryASet(ds, ebx + 2193009, al);
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 2193010, al);
    goto loc_109d2;
loc_10996: // 0160:10996
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 2193009, cl);
    memoryASet(ds, ebx + 2193010, al);
    goto loc_10975;
loc_109a7: // 0160:109a7
    ah = memoryAGet(ds, esp + 4);
    memoryASet(ds, ebx + 2193009, cl);
    memoryASet(ds, ebx + 2193010, ah);
    goto loc_109cc;
loc_109b9: // 0160:109b9
    al = memoryAGet(ds, esp);
    memoryASet(ds, ebx + 2193010, cl);
    memoryASet(ds, ebx + 2193009, al);
    al = memoryAGet(ds, esp + 4);
loc_109cc: // 0160:109cc
    memoryASet(ds, ebx + 2193011, al);
loc_109d2: // 0160:109d2
    ebx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x000002c0)
        goto loc_108c5;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10a14() // 0160:10a14 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    sub_38d80();
    edx = 0;
    ebx = eax;
    sub_10010();
    sub_38cd4();
    edx = memoryAGet32(ds, 0x217a98);
    if (edx == 0x00000003)
        goto loc_10a3f;
    if (edx == 0x00000002)
        goto loc_10a3f;
    if (edx != 0x00000009)
        goto loc_10a6c;
loc_10a3f: // 0160:10a3f
    edx = 0x000eb970;
    eax = 0x0004e03c;
    sub_158e6();
    edx = 0x001eee70;
    eax = 0x0004e047;
    sub_158e6();
    edx = 0x00203270;
    eax = 0x0004e058;
    sub_158e6();
loc_10a6c: // 0160:10a6c
    eax = memoryAGet32(ds, 0x217aa8);
    memoryASet32(ds, 0x217a98, eax);
    if (eax > 0x00000009)
        goto loc_10c22;
    switch (eax)
    {
        case 0: goto loc_10a87;
        case 1: goto loc_10aa5;
        case 2: goto loc_10ac3;
        case 3: goto loc_10b0e;
        case 4: goto loc_10b59;
        case 5: goto loc_10b77;
        case 6: goto loc_10b95;
        case 7: goto loc_10bb0;
        case 8: goto loc_10bcb;
        case 9: goto loc_10be6;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:10a7f");
    }
loc_10a87: // 0160:10a87
    edx = 0x00217670;
    eax = 0x0004e069;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e07e;
    goto loc_10c1d;
loc_10aa5: // 0160:10aa5
    edx = 0x00217670;
    eax = 0x0004e091;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e0a3;
    goto loc_10c1d;
loc_10ac3: // 0160:10ac3
    edx = 0x00217670;
    eax = 0x0004e0b3;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e0c5;
    sub_158e6();
    edx = 0x001eee70;
    eax = 0x0004e0d5;
    sub_158e6();
    edx = 0x00203270;
    eax = 0x0004e0e7;
    sub_158e6();
    edx = 0x000eb970;
    eax = 0x0004e0f9;
    goto loc_10c1d;
loc_10b0e: // 0160:10b0e
    edx = 0x00217670;
    eax = 0x0004e108;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e11a;
    sub_158e6();
    edx = 0x000eb970;
    eax = 0x0004e12a;
    sub_158e6();
    edx = 0x001eee70;
    eax = 0x0004e139;
    sub_158e6();
    edx = 0x00203270;
    eax = 0x0004e149;
    goto loc_10c1d;
loc_10b59: // 0160:10b59
    edx = 0x00217670;
    eax = 0x0004e159;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e16d;
    goto loc_10c1d;
loc_10b77: // 0160:10b77
    edx = 0x00217670;
    eax = 0x0004e17f;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e192;
    goto loc_10c1d;
loc_10b95: // 0160:10b95
    edx = 0x00217670;
    eax = 0x0004e1a3;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e1b6;
    goto loc_10c1d;
loc_10bb0: // 0160:10bb0
    edx = 0x00217670;
    eax = 0x0004e1c7;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e1d8;
    goto loc_10c1d;
loc_10bcb: // 0160:10bcb
    edx = 0x00217670;
    eax = 0x0004e1e7;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e1f9;
    goto loc_10c1d;
loc_10be6: // 0160:10be6
    edx = 0x00217670;
    eax = 0x0004e209;
    sub_158e6();
    edx = 0x0007ea90;
    eax = 0x0004e21d;
    sub_158e6();
    edx = 0x001eee70;
    eax = 0x0004e0d5;
    sub_158e6();
    edx = 0x00203270;
    eax = 0x0004e0e7;
loc_10c1d: // 0160:10c1d
    sub_158e6();
loc_10c22: // 0160:10c22
    ah = 0;
    edi = memoryAGet32(ds, 0x5900c);
    memoryASet(ds, 0x217670, ah);
    memoryASet(ds, 0x217671, ah);
    memoryASet(ds, 0x217672, ah);
    memoryASet(ds, 0x217673, ah);
    if (!edi)
        goto loc_10c61;
    eax = 0;
loc_10c48: // 0160:10c48
    eax++;
    dl = memoryAGet(ds, eax + 2193007);
    memoryASet(ds, eax + 382671, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_10c48;
    sub_108b4();
loc_10c61: // 0160:10c61
    if (memoryAGet32(ds, 0x5906c) != 0x00000000)
        goto loc_10c73;
    sub_38d00();
    edx = ebx;
    goto loc_10ca1;
loc_10c73: // 0160:10c73
    eax = 0;
    edx = 0;
    memoryASet32(ds, 0x5906c, eax);
    eax = 0x0000000a;
    sub_1008b();
    edx = memoryAGet32(ds, 0x5c664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
loc_10ca1: // 0160:10ca1
    eax = 0;
    sub_10010();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10ccc() // 0160:10ccc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0x00217670;
    eax = 0x0004e22f;
    sub_158e6();
    edx = 0x001eee70;
    eax = 0x0004e241;
    sub_158e6();
    edx = 0x00203270;
    eax = 0x0004e252;
    sub_158e6();
    edx = 0x000eb970;
    eax = 0x0004e03c;
    sub_158e6();
    edx = 0x00155270;
    eax = 0x0004e263;
    sub_158e6();
    edx = 0x000a0890;
    eax = 0x0004e273;
    sub_158e6();
    edx = 0x000e4370;
    eax = 0x0004e283;
    sub_158e6();
    edx = 0x000eaa70;
    eax = 0x0004e293;
    sub_158e6();
    edx = 0x000e6b70;
    eax = 0x0004e2a6;
    sub_158e6();
    edx = 0x001158b0;
    eax = 0x0004e2b7;
    sub_158e6();
    edx = 0x001527b0;
    eax = 0x0004e2c7;
    ebx = 0x00000008;
    sub_158e6();
    edx = 0x000a8090;
    eax = 0x0004e2d7;
    esi = 0x00000001;
    sub_158e6();
    edx = 0x00223eb4;
    eax = 0x0004e2e7;
    ecx = 0;
    sub_158e6();
    edx = 0x00000007;
    memoryASet32(ds, 0x5c6d4, ebx);
    memoryASet32(ds, 0x5c6d8, ecx);
    memoryASet32(ds, 0x5c6dc, esi);
    memoryASet32(ds, 0x5c6e0, ecx);
    memoryASet32(ds, 0x5c6d0, ecx);
    memoryASet32(ds, 0x5c66c, edx);
    bl = 0;
    sub_20cd0();
    memoryASet(ds, 0x217673, bl);
    dl = 0;
    ah = 0;
    memoryASet(ds, 0x217671, dl);
    dh = 0;
    memoryASet(ds, 0x217670, ah);
    memoryASet(ds, 0x217672, dh);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10df2() // 0160:10df2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2202066, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201986, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201962);
    ebp = 0x00000001;
    eax -= 0x00004000;
    memoryASet32(ds, 0x21ac70, ebp);
    memoryASet32(ds, 0x21ac6c, ebx);
    memoryASet32(ds, 0x21ac74, eax);
    ebp = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10e44() // 0160:10e44 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x21ac6c) != 0x00000000)
        goto loc_10efd;
    if ((int32_t)memoryAGet32(ds, 0x21ac74) <= (int32_t)0xffff6000)
        goto loc_10efd;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202066) != 0x00000000)
        goto loc_10e81;
    if (memoryAGet32(ds, 0x5900c) == 0x00000000)
        goto loc_10ea1;
loc_10e81: // 0160:10e81
    ebp = memoryAGet32(ds, 0x21ac70);
    ebp -= 0x00000055;
    eax = memoryAGet32(ds, 0x21ac74);
    memoryASet32(ds, 0x21ac70, ebp);
    if ((int32_t)eax >= 0)
        goto loc_10ea1;
    edx = 0;
    memoryASet32(ds, 0x21ac6c, edx);
loc_10ea1: // 0160:10ea1
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x21ac70);
    ebx = memoryAGet32(ds, 0x21ac74);
    ecx = memoryAGet32(ds, 0x21ac70);
    ebx += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    ecx += eax;
    memoryASet32(ds, 0x21ac74, ebx);
    memoryASet32(ds, 0x21ac70, ecx);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, edx + 2201962))
        goto loc_10efd;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 3;
    ebp = eax;
    memoryASet32(ds, 0x21ac70, eax);
    ebp = -ebp;
    memoryASet32(ds, 0x21ac70, ebp);
    eax = memoryAGet32(ds, edx + 2201962);
    memoryASet32(ds, 0x21ac74, eax);
loc_10efd: // 0160:10efd
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10f02() // 0160:10f02 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x21ac6c) != 0x00000000)
        goto loc_10f60;
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201958) == 0x00000000)
        goto loc_10f60;
    eax = memoryAGet32(ds, 0x21ac74);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -38;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000010);
    ecx = 0x00000010;
    edx = eax + -8;
    ebx = esi;
    eax = 0x0017fce0;
    sub_17029();
loc_10f60: // 0160:10f60
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10f65() // 0160:10f65 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000007);
    ecx = 0x000000a1;
    ebx = 0x0000002c;
    push32(0x00000014);
    edx = 0x00102cb0;
    eax = 0x001810d0;
    sub_170ca();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_10f93() // 0160:10f93 +long
{
    esp -= 4;
    goto loc_10f93;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1448 bytes
loc_10f93: // 0160:10f93
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ac60);
    edx = eax;
    esi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if ((int32_t)eax >= 0)
        goto loc_10fb2;
    esi ^= eax;
loc_10fb2: // 0160:10fb2
    if (memoryAGet32(ds, 0x5c658) != 0x00000046)
        goto loc_10fc8;
    if (memoryAGet32(ds, 0x5900c) == 0x00000000)
        goto loc_109e4;
loc_10fc8: // 0160:10fc8
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x21ac5c, eax);
    eax = memoryAGet32(ds, 0x5900c);
    eax &= 0x0000000f;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_109e4;
    ebx = 0x0000000a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = memoryAGet32(ds, 0x5907c);
    edi -= 0x00000028;
    ebp = edi;
    ebp <<= 2;
    ebp += edi;
    edi = 0x00102cc0;
    ebp <<= 6;
    ecx = 0x0000000f;
    edi += ebp;
    ebx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x00155360;
    edi = 0x0000000a;
    sub_41bd6();
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebp += 0x00102cc8;
    ecx = 0x0000000f;
    eax = edx;
    ebx = 0x00000008;
    eax <<= 3;
    edx = ebp;
    eax += 0x00155360;
    sub_41bd6();
    goto loc_109e4;
}
void sub_11058() // 0160:11058 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = edx;
    esi = ebx;
    edx = eax + -32;
    eax = edx;
    eax <<= 2;
    eax += edx;
    esi = ebx + eax;
    eax = esi + 5;
    ebp = 0;
    memoryASet32(ds, esp, eax);
loc_11078: // 0160:11078
    ecx = memoryAGet32(ds, esp);
    edx = edi;
    eax = esi;
loc_1107f: // 0160:1107f
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1107f;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    esi += 0x00000128;
    edx += 0x00000128;
    ebp++;
    memoryASet32(ds, esp, edx);
    if ((int32_t)ebp < (int32_t)0x00000006)
        goto loc_11078;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_110af() // 0160:110af +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    esi = edx;
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x001527b0;
    eax <<= 4;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    ebp = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ebx = 0x00093490;
    eax <<= 8;
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1940;
loc_1112f: // 0160:1112f
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_1115f;
    if (memoryAGet32(ds, esp + 8) != 0x00000000)
        goto loc_1115f;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_1115f;
    eax = 0x00000020;
    goto loc_11163;
loc_1115f: // 0160:1115f
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + 1);
loc_11163: // 0160:11163
    ebx = memoryAGet32(ds, esp + 4);
    edx = ebp;
    sub_11058();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_1112f;
    eax = memoryAGet32(ds, esp) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 2202026, edx);
    esp += 0x0000000c;
    goto loc_12549;
    // gap 5033 bytes
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_111a0() // 0160:111a0 +long
{
    esp -= 4;
    goto loc_111a0;
loc_109e1: // 0160:109e1
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1973 bytes
loc_111a0: // 0160:111a0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 4;
    eax -= edx;
    edx = 0x001527b0;
    eax <<= 4;
    edx += eax;
    ebp = 0x00000003;
    memoryASet32(ds, esp, edx);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edx = eax;
    eax <<= 4;
    ebx = 0x00093490;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = esi;
    idiv32(ebp);
    esi = esi * 0x000000ac;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ecx = 0x00000064;
    eax += ebx;
    edi = 0;
    ebp = eax + 1920;
loc_11223: // 0160:11223
    eax = memoryAGet32(ds, esi + 2202034);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = edx + 48;
    if (eax != 0x00000030)
        goto loc_11257;
    if (memoryAGet32(ds, esp + 4) != 0x00000000)
        goto loc_11257;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_11257;
    eax = 0x00000020;
    goto loc_1125b;
loc_11257: // 0160:11257
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_1125b: // 0160:1125b
    ebx = memoryAGet32(ds, esp);
    edx = ebp;
    sub_11058();
    ebx = 0x0000000a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi++;
    ebp += 0x00000005;
    ecx = eax;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_11223;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2202022, eax);
    goto loc_109e1;
}
void sub_1128d() // 0160:1128d +long
{
    esp -= 4;
    goto loc_1128d;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2210 bytes
loc_1128d: // 0160:1128d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = 0;
    ebp = 0;
loc_1129a: // 0160:1129a
    eax = 0x0000000f;
    ecx = edi + eax;
    goto loc_112a6;
loc_112a4: // 0160:112a4
    ecx--;
    eax--;
loc_112a6: // 0160:112a6
    esi = memoryAGet(ds, ecx + 364956);
    if (esi == 0x00000020)
        goto loc_112a4;
    ebp += 0x000000ac;
    eax++;
    edi += 0x00000010;
    memoryASet32(ss, ebp + 2201846, eax);
    if (edi != 0x00000100)
        goto loc_1129a;
    dl = 0x80;
    eax = 0;
loc_112ce: // 0160:112ce
    eax++;
    memoryASet(ds, eax + 603279, dl);
    if ((int32_t)eax < (int32_t)0x00001c20)
        goto loc_112ce;
    edx = 0x00000010;
    ebp = 0;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebp);
loc_112ea: // 0160:112ea
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = eax * 0x000006f0;
    edi = 0x001527b0;
    edx = ebp;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebp;
    idiv32(ecx);
    eax = eax * 0x00000f00;
    esi = 0x00000003;
    edx = ebp;
    ecx = 0x00093490;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebp;
    idiv32(esi);
    edx = edx * 0x00000064;
    ebx = ebp;
    ebx <<= 4;
    eax = memoryAGet32(ds, esp);
    esi = ecx + edx;
    memoryASet32(ds, esp + 8, eax);
    ecx = ebx;
loc_11343: // 0160:11343
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 364956);
    ecx++;
    sub_11058();
    eax = memoryAGet32(ds, esp + 8);
    esi += 0x00000005;
    if (ecx != eax)
        goto loc_11343;
    eax = memoryAGet32(ds, esp + 4);
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_11374;
    eax = ebp;
    sub_111a0();
loc_11374: // 0160:11374
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000010;
    esi += 0x000000ac;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000010)
        goto loc_112ea;
    esp += 0x0000000c;
    goto loc_109e4;
}
void sub_1139d() // 0160:1139d +long
{
    esp -= 4;
    goto loc_1139d;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2482 bytes
loc_1139d: // 0160:1139d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    dl = 0x80;
    eax = 0;
loc_113aa: // 0160:113aa
    eax++;
    memoryASet(ds, eax + 626319, dl);
    if ((int32_t)eax < (int32_t)0x00000780)
        goto loc_113aa;
    ebx = 0x00000010;
    ecx = 0x00098e90;
    edx = 0;
    esi = 0x001527b0;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
loc_113d8: // 0160:113d8
    ecx = memoryAGet32(ds, esp + 12);
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    ecx <<= 4;
loc_113ea: // 0160:113ea
    ebx = edi;
    eax = 0;
    edx = esi;
    al = memoryAGet(ds, ecx + 365213);
    ecx++;
    sub_11058();
    esi += 0x00000005;
    if (ecx != ebp)
        goto loc_113ea;
    edi = memoryAGet32(ds, esp + 8);
    ebp = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 12);
    edi += 0x00000010;
    ebp += 0x00000050;
    eax += 0x000006f0;
    edx++;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 12, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_113d8;
    esp += 0x00000010;
    goto loc_109e4;
}
void sub_1143a() // 0160:1143a +long
{
    esp -= 4;
    goto loc_1143a;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2639 bytes
loc_1143a: // 0160:1143a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    esi = eax + -6;
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x592de);
    eax = 0x00098e90;
    push32(edx);
    ecx = esi;
    edx = 0x00102cb0;
    sub_170ca();
    push32(0x00000140);
    push32(0x00000140);
    edx = 0x00102cb0;
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x592e2);
    ecx = memoryAGet32(ds, 0x592e2);
    push32(ebx);
    ebx = 0x00000130;
    eax = 0x00098ee0;
    ebx -= ecx;
    ecx = esi;
    sub_170ca();
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000012;
    edx = 0x00102cb0;
    push32(0x00000006);
    edi = memoryAGet32(ds, 0x592e6);
    esi += 0x00000015;
    push32(edi);
    eax = 0x00098f30;
    ecx = esi;
    sub_170ca();
    push32(0x00000140);
    push32(0x00000140);
    ebx = 0x00000130;
    edx = 0x00102cb0;
    push32(0x00000006);
    ebp = memoryAGet32(ds, 0x592ea);
    eax = 0x00098f80;
    push32(ebp);
    ecx = esi;
    ebx -= ebp;
    sub_170ca();
    goto loc_109e4;
}
void sub_114fb() // 0160:114fb +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = edx;
    memoryASet32(ds, esp + 4, ebx);
    ebp = ecx;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    memoryASet32(ds, esp, edx);
loc_11514: // 0160:11514
    edi += memoryAGet32(ds, esp + 28);
    if ((int32_t)esi <= 0)
        goto loc_115fb;
    if (edi >= 0x000003c0)
        goto loc_115fb;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebx + 742608);
    ebx = 0;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, 0x21ac52);
    ebx &= eax;
    eax = esi * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (!eax)
        goto loc_115fb;
    ebx = esi * 0x000003c0;
    ecx = edx;
    ebx += edi;
loc_11590: // 0160:11590
    if ((int32_t)esi <= 0)
        goto loc_1167a;
    if (edi >= 0x000003c0)
        goto loc_1167a;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, ecx + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1167a;
    if ((int32_t)esi <= 0)
        goto loc_1167a;
    ebx -= 0x000003c0;
    esi--;
    goto loc_11590;
loc_115fb: // 0160:115fb
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_11611: // 0160:11611
    if ((int32_t)esi <= 0)
        goto loc_1165b;
    if (edi >= 0x000003c0)
        goto loc_1165b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_11662;
loc_1165b: // 0160:1165b
    eax = 0x00000001;
    goto loc_11664;
loc_11662: // 0160:11662
    eax = 0;
loc_11664: // 0160:11664
    if (!eax)
        goto loc_11679;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_11679;
    ebx += 0x000003c0;
    esi++;
    goto loc_11611;
loc_11679: // 0160:11679
    esi--;
loc_1167a: // 0160:1167a
    ebx = memoryAGet32(ds, esp);
    ebx++;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_11514;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, eax, edi);
    memoryASet32(ss, ebp, esi);
    ebx = esi + -4;
    if ((int32_t)ebx <= 0)
        goto loc_11702;
    if (edi >= 0x000003c0)
        goto loc_11702;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_11702;
    eax = 0xfffdffff;
    goto loc_1171a;
loc_11702: // 0160:11702
    edi = memoryAGet32(ds, esp + 8);
    edx = esi;
    edx -= edi;
    edx <<= 16;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
loc_1171a: // 0160:1171a
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_11723() // 0160:11723 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    esi = edx + 320;
loc_11731: // 0160:11731
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax)
        goto loc_1173e;
    eax = 0x00000020;
loc_1173e: // 0160:1173e
    eax <<= 3;
    edx = ebx;
    eax -= 0x00000100;
    ecx++;
    eax += 0x001158b0;
    ebx += 0x00000008;
    sub_44786();
    if (ebx != esi)
        goto loc_11731;
    ecx = memoryAGet32(ds, 0x5caac);
    edx = 0;
    ebx ^= esi;
    memoryASet32(ds, 0x217ab8, edx);
    memoryASet32(ds, 0x217a9c, ebx);
    if (!ecx)
        goto loc_11780;
    memoryASet32(ds, 0x217aa4, 0x00000019);
    goto loc_1178a;
loc_11780: // 0160:11780
    memoryASet32(ds, 0x217aa4, 0x00000032);
loc_1178a: // 0160:1178a
    ebp = 0;
    memoryASet32(ds, 0x217a90, ebp);
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_11797() // 0160:11797 +long
{
    esp -= 4;
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x5a2d2);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, eax * 4 + 0x5d68c, ebx);
    memoryASet32(ds, eax * 4 + 0x5d688, esi);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    memoryASet32(ds, 0x5a2d2, ebx);
    memoryASet32(ds, eax * 4 + 0x5d690, ecx);
    eax = memoryAGet32(ds, 0x5a2d2);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x5a2d2, edx);
    memoryASet32(ds, 0x5a2d6, memoryAGet32(ds, 0x5a2d6) + 1);
    esi = pop32();
    esp += 4;
}
void sub_117eb() // 0160:117eb +long
{
    esp -= 4;
    goto loc_117eb;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3584 bytes
loc_117eb: // 0160:117eb
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x5a2da);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebp = memoryAGet32(ds, eax * 4 + 0x5d68c);
    eax = memoryAGet32(ds, eax * 4 + 0x5d688);
    memoryASet32(ds, esp + 12, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx + 1;
    eax = memoryAGet32(ds, eax * 4 + 0x5d690);
    memoryASet32(ds, 0x5a2da, ebx);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x5a2da);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x5a2da, edx);
    edx = memoryAGet32(ds, 0x5a2de);
    edx++;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, 0x5a2de, edx);
    if (ebx != 0x0004f679)
        goto loc_118d1;
    edi = ebp;
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2202018);
    eax = 0x00000028;
    edx += 0x00000008;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 4;
    edx = eax;
    eax = ebx;
    ebx += 0x00000028;
loc_1188c: // 0160:1188c
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_1188c;
    eax ^= ebx;
    ebx = memoryAGet32(ds, esp + 12);
    ebx += edx;
loc_1189c: // 0160:1189c
    cl = memoryAGet(ds, eax + 325465);
    eax++;
    memoryASet(ds, ebx, cl);
    ebx++;
    if ((int32_t)eax < (int32_t)0x00000009)
        goto loc_1189c;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    ecx = 0;
    eax += edx;
    esi = ebp * 0x000000ac;
    goto loc_118c9;
loc_118bd: // 0160:118bd
    eax++;
    dl = memoryAGet(ds, ebx + 364956);
    ebx++;
    ecx++;
    memoryASet(ds, eax + 7, dl);
loc_118c9: // 0160:118c9
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 2202018))
        goto loc_118bd;
loc_118d1: // 0160:118d1
    if (memoryAGet32(ds, esp + 12) != 0x0004f6a2)
        goto loc_11963;
    eax = ebp;
    eax <<= 4;
    memoryASet32(ds, esp + 4, eax);
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2202018);
    eax = 0x00000028;
    edx += 0x0000000e;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = eax + 40;
loc_11910: // 0160:11910
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_11910;
    ebx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp + 4);
    ecx = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
    goto loc_11937;
loc_1192c: // 0160:1192c
    dl = memoryAGet(ds, eax + 364956);
    eax++;
    ecx++;
    memoryASet(ds, ebx, dl);
    ebx++;
loc_11937: // 0160:11937
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esi + 2202018))
        goto loc_1192c;
    ebx = memoryAGet32(ds, esp + 12);
    eax = 0;
    ebx += edi;
    esi = ebp * 0x000000ac;
loc_1194d: // 0160:1194d
    ebx++;
    ecx = memoryAGet32(ds, esi + 2202018);
    dl = memoryAGet(ds, eax + 325506);
    eax++;
    memoryASet(ds, ecx + ebx, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_1194d;
loc_11963: // 0160:11963
    if (memoryAGet32(ds, esp + 12) != 0x0004f6cb)
        goto loc_11a4c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    edx <<= 2;
    esi = eax;
    eax = memoryAGet32(ds, edx + 365278);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = 0x00000028;
    eax += 0x00000016;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 12);
    esi <<= 4;
    ebx = eax + 40;
loc_119ba: // 0160:119ba
    memoryASet(ds, eax, 0x20);
    eax++;
    if (eax != ebx)
        goto loc_119ba;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, esp + 8);
    edi = 0;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx <<= 2;
    ecx += eax;
    goto loc_119ef;
loc_119e4: // 0160:119e4
    al = memoryAGet(ds, esi + 365213);
    esi++;
    edi++;
    memoryASet(ds, ecx, al);
    ecx++;
loc_119ef: // 0160:119ef
    eax = memoryAGet32(ds, ebx + 365278);
    edx = eax;
    memoryASet32(ds, esp + 16, 0x00000005);
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    if ((int32_t)edi < (int32_t)eax)
        goto loc_119e4;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = memoryAGet32(ds, esp + 8);
    edi = 0x00000005;
    ebx = 0;
    ecx = eax;
    edx = memoryAGet32(ds, esp + 12);
    ecx <<= 2;
    esi += edx;
loc_11a2f: // 0160:11a2f
    eax = memoryAGet32(ds, ecx + 365278);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    dl = memoryAGet(ds, ebx + 325547);
    ebx++;
    memoryASet(ds, esi + eax, dl);
    esi++;
    if ((int32_t)ebx < (int32_t)0x00000016)
        goto loc_11a2f;
loc_11a4c: // 0160:11a4c
    edx = 0x00091b90;
    eax = memoryAGet32(ds, esp + 12);
    sub_11723();
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x217aa4, eax);
    esp += 0x00000014;
    goto loc_109e4;
}
void sub_11a6a() // 0160:11a6a +long
{
    esp -= 4;
    goto loc_11a6a;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4223 bytes
loc_11a6a: // 0160:11a6a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x5a2d6);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x5a2de))
        goto loc_11aa0;
    if (memoryAGet32(ds, 0x217a90) == 0x00000002)
        goto loc_11a8f;
    if (memoryAGet32(ds, 0x5a2e2) != 0x00000000)
        goto loc_11aa0;
loc_11a8f: // 0160:11a8f
    memoryASet32(ds, 0x5a2e2, 0x00000001);
    sub_117eb();
    goto loc_11afb;
loc_11aa0: // 0160:11aa0
    if (memoryAGet32(ds, 0x217a90) != 0x00000002)
        goto loc_11afb;
    edi = memoryAGet32(ds, 0x5cd20);
    if (!edi)
        goto loc_11af5;
    eax = 0;
    memoryASet32(ds, 0x5a2e2, eax);
    eax = memoryAGet32(ds, 0x217aa0);
    edx = eax;
    ebx = 0x00000010;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x217aa0, edx);
    edx++;
    eax = memoryAGet32(ds, edx * 4 + 0x5933e);
    memoryASet32(ds, 0x217aa0, edx);
    edx = 0x00091b90;
    sub_11723();
    memoryASet32(ds, 0x217aa4, 0x00000064);
    goto loc_11afb;
loc_11af5: // 0160:11af5
    memoryASet32(ds, 0x5a2e2, edi);
loc_11afb: // 0160:11afb
    if (memoryAGet32(ds, 0x217aa4) != 0xffffffff)
        goto loc_11b0c;
    esi = 0;
    memoryASet32(ds, 0x5a2e2, esi);
loc_11b0c: // 0160:11b0c
    if (memoryAGet32(ds, 0x5a2e2) == 0x00000000)
        goto loc_11b28;
    if (memoryAGet32(ds, 0x217aa4) == 0xffffffff)
        goto loc_11b28;
    memoryASet32(ds, 0x21aefc, 0x00000032);
loc_11b28: // 0160:11b28
    edx = memoryAGet32(ds, 0x217a90);
    if (edx != 0x00000001)
        goto loc_11b47;
    ebx = memoryAGet32(ds, 0x217aa4);
    if ((int32_t)ebx <= 0)
        goto loc_11b47;
    ecx = ebx;
    ecx -= edx;
    memoryASet32(ds, 0x217aa4, ecx);
loc_11b47: // 0160:11b47
    if (memoryAGet32(ds, 0x217aa4) == 0x00000000)
        goto loc_11b89;
    if (memoryAGet32(ds, 0x217a90) != 0x00000000)
        goto loc_11b89;
    ebp = memoryAGet32(ds, 0x217ab8);
    ebp += 0x00000100;
    memoryASet32(ds, 0x217ab8, ebp);
    if ((int32_t)ebp <= (int32_t)0x00001400)
        goto loc_11b89;
    edx = 0x00001400;
    ebx = 0x00000001;
    memoryASet32(ds, 0x217ab8, edx);
    memoryASet32(ds, 0x217a90, ebx);
loc_11b89: // 0160:11b89
    ecx = memoryAGet32(ds, 0x217aa4);
    if (ecx)
        goto loc_109e4;
    if (memoryAGet32(ds, 0x217a90) == 0x00000000)
        goto loc_109e4;
    edi = memoryAGet32(ds, 0x217ab8);
    edi -= 0x00000100;
    memoryASet32(ds, 0x217ab8, edi);
    if ((int32_t)edi >= 0)
        goto loc_109e4;
    eax = 0x00000002;
    memoryASet32(ds, 0x217ab8, ecx);
    memoryASet32(ds, 0x217a90, eax);
    goto loc_109e4;
}
void sub_11bd3() // 0160:11bd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x21ac78);
    if (eax == memoryAGet32(ds, 0x21acb8))
        goto loc_11ca6;
    if (eax == 0x00000011)
        goto loc_11ca6;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_11ca6;
    eax = memoryAGet32(ds, 0x21aca4);
    memoryASet32(ds, 0x21acb8, eax);
    eax = memoryAGet32(ds, 0x21aca8);
    edx = memoryAGet32(ds, 0x21aca4);
    eax -= 0x00000010;
    edx -= 0x00000010;
    memoryASet32(ds, esp + 4, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000086;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x00000095)
        goto loc_11c4f;
    esi = 0x00000095;
loc_11c4f: // 0160:11c4f
    eax = 0;
    edi += 0x0000ea65;
    memoryASet32(ds, esp, eax);
loc_11c5a: // 0160:11c5a
    ebx = memoryAGet32(ds, esp + 4);
    eax = ebx + edi;
    edx = ebx + ebp;
    goto loc_11c71;
loc_11c66: // 0160:11c66
    cl = memoryAGet(ds, edx + 1920);
    edx++;
    ebx++;
    memoryVideoSet(ds, eax, cl);
    eax++;
loc_11c71: // 0160:11c71
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_11c66;
    ebx = esi;
    eax = esi + edi;
    edx = esi + ebp;
    goto loc_11c86;
loc_11c7f: // 0160:11c7f
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryVideoSet(ds, eax, cl);
    eax++;
loc_11c86: // 0160:11c86
    if ((int32_t)ebx < (int32_t)0x00000095)
        goto loc_11c7f;
    edx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    edx++;
    ebp += 0x00000140;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_11c5a;
loc_11ca6: // 0160:11ca6
    esp += 0x00000008;
    goto loc_12549;
    // gap 2203 bytes
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_11cae() // 0160:11cae +long +stackDrop4
{
    esp -= 4;
    goto loc_11cae;
loc_1171d: // 0160:1171d
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 1419 bytes
loc_11cae: // 0160:11cae
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    edi = edx;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    goto loc_11ced;
loc_11cc5: // 0160:11cc5
    eax = edi;
    edx = ebp;
    ebx = 0;
    goto loc_11cd4;
loc_11ccd: // 0160:11ccd
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, eax, cl);
    eax++;
loc_11cd4: // 0160:11cd4
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_11ccd;
    ecx = memoryAGet32(ds, esp + 24);
    eax = memoryAGet32(ds, esp + 4);
    ebp += 0x00000120;
    eax++;
    edi += ecx;
    memoryASet32(ds, esp + 4, eax);
loc_11ced: // 0160:11ced
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_11cc5;
    esp += 0x00000008;
    goto loc_1171d;
}
void sub_11d18() // 0160:11d18 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    ebp = memoryAGet32(ds, esp + 40);
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 16, ecx);
    ecx = memoryAGet32(ds, esp + 48);
    eax = memoryAGet32(ds, esp + 44);
    edx = 0x00000064;
    eax += eax;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 20));
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    memoryASet32(ds, esp + 44, edx);
    eax = memoryAGet32(ds, esi);
    edx = memoryAGet32(ds, edi);
    if (eax == edx)
        goto loc_11e34;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_11d77;
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx += eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_11d8b;
    goto loc_11d89;
loc_11d77: // 0160:11d77
    eax = memoryAGet32(ds, esp + 44);
    edx = memoryAGet32(ds, esi);
    edx -= eax;
    memoryASet32(ds, esi, edx);
    eax = edx;
    edx = memoryAGet32(ds, edi);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_11d8b;
loc_11d89: // 0160:11d89
    memoryASet32(ds, esi, edx);
loc_11d8b: // 0160:11d8b
    memoryASet32(ds, 0x21aefc, 0x00000032);
    eax = memoryAGet32(ds, esi);
    esi = eax;
    esi <<= 5;
    esi += eax;
    esi <<= 2;
    esi += eax;
    ecx <<= 2;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi = 0x00000085;
    esi -= eax;
    if (ebx > 0x00000005)
        goto loc_11e34;
    eax = 0x000e6b70;
    eax += esi;
    edi = 0x00000085;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = 0x000e6c0b;
    eax += esi;
    ecx = ebp;
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx <<= 3;
    eax += 0x0000009b;
    edi -= esi;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= ebp;
    eax += 0x00000120;
    edx += edi;
    eax -= esi;
    switch (ebx)
    {
        case 0: goto loc_11e09;
        case 1: goto loc_11e3d;
        case 2: goto loc_11e6b;
        case 3: goto loc_11e98;
        case 4: goto loc_11ed1;
        case 5: goto loc_11f02;
        default:
            printf("unhandled: %x\n", ebx);
            stop("ind 0160:11e01");
    }
loc_11e09: // 0160:11e09
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 16);
    push32(ebp);
    eax = 0x000e7b30;
    ebx = esi;
    sub_11cae();
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 4);
    push32(ebp);
    eax = memoryAGet32(ds, esp + 16);
loc_11e2d: // 0160:11e2d
    ebx = edi;
loc_11e2f: // 0160:11e2f
    sub_11cae();
loc_11e34: // 0160:11e34
    esp += 0x00000018;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
    return;
loc_11e3d: // 0160:11e3d
    ecx = 0x0000000e;
    push32(ebp);
    edx += 0x00000fc0;
    ebx = esi;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    eax = memoryAGet32(ds, esp + 4);
    sub_11cae();
    ecx = 0x0000000e;
    edx = memoryAGet32(ds, esp + 8);
    push32(ebp);
    eax = 0x000e6c0b;
    goto loc_11e2d;
loc_11e6b: // 0160:11e6b
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 16);
    push32(ebp);
    eax = 0x000e9ab0;
    ebx = esi;
    sub_11cae();
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 4);
    push32(ebp);
    ebx = edi;
    eax += 0x00001f80;
    goto loc_11e2f;
loc_11e98: // 0160:11e98
    eax = memoryAGet32(ds, esp + 16);
    push32(ebp);
    ebx = esi;
    eax += ecx;
    ecx = 0x00000007;
    memoryASet32(ds, esp + 4, eax);
    edx = eax;
    eax = 0x000ea290;
    sub_11cae();
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000007;
    push32(ebp);
    ebx = edi;
    eax += 0x00002760;
    edx += esi;
    goto loc_11e2f;
loc_11ed1: // 0160:11ed1
    ecx = 0x00000007;
    push32(ebp);
    edx += 0x00002f40;
    ebx = esi;
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    eax = memoryAGet32(ds, esp + 4);
    sub_11cae();
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp + 8);
    push32(ebp);
    eax = 0x000e8b8b;
    goto loc_11e2d;
loc_11f02: // 0160:11f02
    eax = memoryAGet32(ds, esp + 8);
    push32(ebp);
    edx += 0x00003720;
    eax += ecx;
    ebx = esi;
    memoryASet32(ds, esp + 4, eax);
    eax += 0x00000085;
    memoryASet32(ds, esp + 24, edx);
    eax -= esi;
    ecx = 0x00000007;
    edx = eax;
    eax = memoryAGet32(ds, esp + 24);
    sub_11cae();
    ecx = 0x00000007;
    edx = memoryAGet32(ds, esp);
    push32(ebp);
    eax = 0x000e936b;
    goto loc_11e2d;
}
void sub_11f43() // 0160:11f43 +long
{
    esp -= 4;
    goto loc_11f43;
loc_109e5: // 0160:109e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5464 bytes
loc_11f43: // 0160:11f43
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = 0x000002b0;
    ebx = 0x00000810;
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x59034, edx);
    memoryASet32(ds, 0x59040, edx);
    memoryASet32(ds, 0x5904c, edx);
    memoryASet32(ds, 0x59058, edx);
    edx = 0x00000560;
loc_11f73: // 0160:11f73
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_11f90;
    edi = memoryAGet32(ds, 0x59034);
    esi = memoryAGet32(ds, eax + 2202034);
    edi += esi;
    memoryASet32(ds, 0x59034, edi);
loc_11f90: // 0160:11f90
    if (memoryAGet32(ds, ecx + 2201958) == 0x00000000)
        goto loc_11fad;
    edi = memoryAGet32(ds, 0x59040);
    esi = memoryAGet32(ds, ecx + 2202034);
    edi += esi;
    memoryASet32(ds, 0x59040, edi);
loc_11fad: // 0160:11fad
    if (memoryAGet32(ds, edx + 2201958) == 0x00000000)
        goto loc_11fca;
    edi = memoryAGet32(ds, 0x5904c);
    esi = memoryAGet32(ds, edx + 2202034);
    edi += esi;
    memoryASet32(ds, 0x5904c, edi);
loc_11fca: // 0160:11fca
    if (memoryAGet32(ds, ebx + 2201958) == 0x00000000)
        goto loc_11fe7;
    edi = memoryAGet32(ds, 0x59058);
    esi = memoryAGet32(ds, ebx + 2202034);
    edi += esi;
    memoryASet32(ds, 0x59058, edi);
loc_11fe7: // 0160:11fe7
    eax += 0x000000ac;
    ecx += 0x000000ac;
    edx += 0x000000ac;
    ebx += 0x000000ac;
    if (eax != 0x000002b0)
        goto loc_11f73;
    edi = memoryAGet32(ds, 0x59034);
    if (!edi)
        goto loc_12022;
    if ((int32_t)edi >= (int32_t)0x0000000a)
        goto loc_12022;
    memoryASet32(ds, 0x59034, 0x0000000a);
loc_12022: // 0160:12022
    edx = memoryAGet32(ds, 0x59040);
    if (!edx)
        goto loc_1203b;
    if ((int32_t)edx >= (int32_t)0x0000000a)
        goto loc_1203b;
    memoryASet32(ds, 0x59040, 0x0000000a);
loc_1203b: // 0160:1203b
    esi = memoryAGet32(ds, 0x5904c);
    if (!esi)
        goto loc_12054;
    if ((int32_t)esi >= (int32_t)0x0000000a)
        goto loc_12054;
    memoryASet32(ds, 0x5904c, 0x0000000a);
loc_12054: // 0160:12054
    eax = memoryAGet32(ds, 0x59058);
    if (!eax)
        goto loc_109e5;
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_109e5;
    memoryASet32(ds, 0x59058, 0x0000000a);
    goto loc_109e5;
}
void sub_12079() // 0160:12079 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = edx;
    edi = memoryAGet32(ds, 0x21af04);
    edx = memoryAGet32(ds, 0x5a2e6);
    eax = memoryAGet32(ds, 0x21af04);
    edi -= edx;
    memoryASet32(ds, 0x5a2e6, eax);
    if ((int32_t)edi <= (int32_t)0x00000004)
        goto loc_120a6;
    edi = 0x00000004;
    goto loc_120af;
loc_120a6: // 0160:120a6
    if (edi)
        goto loc_120af;
    edi = 0x00000001;
loc_120af: // 0160:120af
    if (memoryAGet32(ds, 0x59010) != 0x00000002)
        goto loc_120f2;
    ecx = memoryAGet32(ds, 0x59020);
    push32(ecx);
    push32(edi);
    edx = 0x00059034;
    eax = 0x00059030;
    push32(ebp);
    ebx = 0;
    ecx = esi;
    sub_11d18();
    eax = memoryAGet32(ds, 0x59024);
    push32(eax);
    push32(edi);
    ebx = 0x00000001;
    edx = 0x00059040;
    push32(ebp);
    ecx = esi;
    eax = 0x0005903c;
    sub_11d18();
loc_120f2: // 0160:120f2
    if ((int32_t)memoryAGet32(ds, 0x59010) < (int32_t)0x00000003)
        goto loc_12549;
    ebx = memoryAGet32(ds, 0x59020);
    push32(ebx);
    push32(edi);
    edx = 0x00059034;
    eax = 0x00059030;
    push32(ebp);
    ecx = esi;
    ebx = 0x00000002;
    sub_11d18();
    ecx = memoryAGet32(ds, 0x59024);
    push32(ecx);
    push32(edi);
    ebx = 0x00000004;
    edx = 0x00059040;
    push32(ebp);
    eax = 0x0005903c;
    ecx = esi;
    sub_11d18();
    eax = memoryAGet32(ds, 0x59028);
    push32(eax);
    push32(edi);
    ebx = 0x00000003;
    edx = 0x0005904c;
    push32(ebp);
    ecx = esi;
    eax = 0x00059048;
    sub_11d18();
    edx = memoryAGet32(ds, 0x5902c);
    push32(edx);
    push32(edi);
    ebx = 0x00000005;
    eax = 0x00059054;
    push32(ebp);
    ecx = esi;
    edx = 0x00059058;
    sub_11d18();
    goto loc_12549;
    // gap 970 bytes
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1217f() // 0160:1217f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = edx;
    if (memoryAGet32(ds, 0x21ac4a) == 0x00000000)
        goto loc_121cd;
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_121a6;
    ecx = 0;
    memoryASet32(ds, 0x21ac98, ecx);
    goto loc_121ba;
loc_121a6: // 0160:121a6
    edx = 0x00000010;
    eax = 0xfffffff0;
    sub_30c85();
    memoryASet32(ds, 0x21ac98, eax);
loc_121ba: // 0160:121ba
    esi = 0xfffffe70;
    ebp = 0;
    memoryASet32(ds, 0x21acbc, esi);
    memoryASet32(ds, 0x21ac4a, ebp);
loc_121cd: // 0160:121cd
    eax = memoryAGet32(ds, 0x21ac98);
    if (eax == memoryAGet32(ds, 0x21acbc))
        goto loc_12305;
    if ((int32_t)eax <= 0)
        goto loc_121f5;
    if ((int32_t)memoryAGet32(ds, 0x21ac9c) > (int32_t)0x00000000)
        goto loc_121f5;
    memoryASet32(ds, 0x21ac9c, 0xffffffff);
loc_121f5: // 0160:121f5
    if ((int32_t)memoryAGet32(ds, 0x21ac98) >= (int32_t)0x00000000)
        goto loc_1220f;
    if ((int32_t)memoryAGet32(ds, 0x21ac9c) < (int32_t)0x00000000)
        goto loc_1220f;
    edx = 0;
    memoryASet32(ds, 0x21ac9c, edx);
loc_1220f: // 0160:1220f
    eax = memoryAGet32(ds, 0x21ac9c);
    memoryASet32(ds, 0x21acbc, eax);
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ebp = memoryAGet32(ds, 0x21aca0);
    edi += 0x0000dc00;
    esi = eax;
    if ((int32_t)eax >= 0)
        goto loc_1226a;
    esi = -esi;
    if ((int32_t)esi <= (int32_t)0x0000003d)
        goto loc_12252;
    esi = 0x0000003d;
loc_12252: // 0160:12252
    eax = 0x0000003d;
    edi += 0x000000a5;
    eax -= esi;
    edx = 0;
    esi = eax;
    eax = 0x00000780;
    goto loc_12284;
loc_1226a: // 0160:1226a
    if ((int32_t)eax <= (int32_t)0x0000003a)
        goto loc_12274;
    esi = 0x0000003a;
loc_12274: // 0160:12274
    edx = 0x000007ba;
    eax = 0x0000003a;
    edi += 0x000000ff;
loc_12284: // 0160:12284
    ebx = 0;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    edx += ecx;
    eax += ecx;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, eax);
loc_12299: // 0160:12299
    eax = memoryAGet32(ds, esp + 8);
    ebx = ebp;
    edx = edi + ebp;
    eax += ebp;
    goto loc_122ad;
loc_122a6: // 0160:122a6
    ebx++;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryVideoSet(ds, edx, cl);
    edx++;
loc_122ad: // 0160:122ad
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_122a6;
    edx = memoryAGet32(ds, esp + 12);
    ebx = esi;
    eax = esi + edi;
    edx += esi;
    goto loc_122c5;
loc_122be: // 0160:122be
    ebx++;
    cl = memoryAGet(ds, edx);
    edx++;
    memoryVideoSet(ds, eax, cl);
    eax++;
loc_122c5: // 0160:122c5
    if ((int32_t)ebx < (int32_t)0x0000003a)
        goto loc_122be;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000140;
    ebx += 0x00000140;
    ecx += 0x00000140;
    eax += 0x00000140;
    edx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000006)
        goto loc_12299;
loc_12305: // 0160:12305
    esp += 0x00000010;
    goto loc_12549;
    // gap 572 bytes
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1230d() // 0160:1230d +long
{
    esp -= 4;
    goto loc_1230d;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2474 bytes
loc_11395: // 0160:11395
    esp += 0x0000000c;
    goto loc_109e4;
    // gap 3952 bytes
loc_1230d: // 0160:1230d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
loc_12324: // 0160:12324
    edi = memoryAGet32(ds, esp + 4) * 0x00000140;
    esi = 0;
    eax = edi + 15;
    ebp = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
loc_12338: // 0160:12338
    ecx = esi;
    ecx <<= 4;
    edx = memoryAGet32(ds, esp + 8);
    eax = edi + ecx;
    edx += ecx;
    ecx += ebp;
loc_12348: // 0160:12348
    eax++;
    bl = memoryAGet(ds, edx + 1397360);
    edx--;
    memoryASet(ds, eax + 1140655, bl);
    if (eax != ecx)
        goto loc_12348;
    esi++;
    if ((int32_t)esi < (int32_t)0x00000014)
        goto loc_12338;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000140;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000300)
        goto loc_12324;
    goto loc_11395;
}
void sub_12382() // 0160:12382 +long
{
    esp -= 4;
    goto loc_12382;
loc_109e1: // 0160:109e1
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6551 bytes
loc_12382: // 0160:12382
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x58ff8);
    if ((int32_t)eax < 0)
        goto loc_1239f;
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_123a1;
loc_1239f: // 0160:1239f
    eax = 0;
loc_123a1: // 0160:123a1
    edx = memoryAGet32(ds, 0x22313c);
    ebx = memoryAGet32(ds, 0x59004);
    memoryASet32(ds, 0x58ff8, edx);
    if (ebx)
        goto loc_123c0;
    if (memoryAGet32(ds, 0x5900c) == 0x00000000)
        goto loc_123df;
loc_123c0: // 0160:123c0
    edx = memoryAGet32(ds, 0x58ff4);
    edx += eax;
    memoryASet32(ds, 0x58ff4, edx);
    if ((int32_t)edx <= (int32_t)0x00000028)
        goto loc_123f7;
    memoryASet32(ds, 0x58ff4, 0x00000028);
    goto loc_123f7;
loc_123df: // 0160:123df
    esi = memoryAGet32(ds, 0x58ff4);
    esi -= eax;
    memoryASet32(ds, 0x58ff4, esi);
    if ((int32_t)esi >= 0)
        goto loc_123f7;
    memoryASet32(ds, 0x58ff4, ebx);
loc_123f7: // 0160:123f7
    eax = memoryAGet32(ds, 0x21af10);
    edx = eax;
    ebx = 0x00000005;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, 0x58ff4);
    edx += eax;
    eax = 0x00000010;
    eax -= edx;
    edx = eax;
    eax += 0x00000002;
    sub_23dbd();
    eax = edx;
    sub_14539();
    eax = edx;
    ebp = 0x0005dad0;
    sub_1143a();
    if ((int32_t)edx >= 0)
        goto loc_12451;
    edx = -edx;
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi = 0x00102cc0;
    eax <<= 5;
    memoryASet32(ds, esp + 4, esi);
    ebp += eax;
    goto loc_12469;
loc_12451: // 0160:12451
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x00102cb0;
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, esp + 4, eax);
loc_12469: // 0160:12469
    edi = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, edx);
    esi = ebp + 132;
    edi += 0x00000084;
    goto loc_124db;
loc_1247e: // 0160:1247e
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    ecx = esi;
loc_12486: // 0160:12486
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    ebx = memoryAGet32(ds, eax + 154);
    eax += 0x00000004;
    memoryASet32(ds, edx + 150, ebx);
    if (eax != ecx)
        goto loc_12486;
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp);
    ebp += 0x00000120;
    ax = memoryAGet16(ds, esi);
    edx += 0x00000140;
    esi += 0x00000120;
    ebx++;
    memoryASet16(ds, edi, ax);
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, edx);
    ax = memoryAGet16(ds, esi + -134);
    memoryASet32(ds, esp, ebx);
    memoryASet16(ds, edi + -166, ax);
loc_124db: // 0160:124db
    if ((int32_t)memoryAGet32(ds, esp) < (int32_t)0x0000000e)
        goto loc_1247e;
    goto loc_109e1;
}
void sub_124e6() // 0160:124e6 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_124e9: // 0160:124e9
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 934764);
    memoryASet32(ds, eax + 1113772, edx);
    if ((int32_t)eax < (int32_t)0x00002800)
        goto loc_124e9;
    edx = pop32();
    esp += 4;
}
void sub_12501() // 0160:12501 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 149;
    memoryASet32(ds, esp, edx);
loc_12518: // 0160:12518
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_1251e: // 0160:1251e
    bl = memoryAGet(ds, eax);
    eax++;
    memoryVideoSet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_1251e;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_12518;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1254f() // 0160:1254f +long
{
    esp -= 4;
    goto loc_1254f;
loc_12546: // 0160:12546
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1254f: // 0160:1254f
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    ebp = eax + 58;
    memoryASet32(ds, esp, edx);
loc_12563: // 0160:12563
    edx = edi;
    eax = esi;
    ecx = ebp;
loc_12569: // 0160:12569
    bl = memoryAGet(ds, eax);
    eax++;
    memoryVideoSet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_12569;
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000140;
    ebp += 0x00000140;
    ebx++;
    esi += 0x00000140;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x00000006)
        goto loc_12563;
    goto loc_12546;
}
void sub_12593() // 0160:12593 +long
{
    esp -= 4;
    goto loc_12593;
loc_109e5: // 0160:109e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7080 bytes
loc_12593: // 0160:12593
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x217abc) != 0x00000000)
        goto loc_125c6;
    edx = 0x000aea65;
    eax = 0x000eaa70;
    sub_12501();
    edx = 0x000adca5;
    eax = 0x000eaa70;
    sub_1254f();
    edx = 0x000adcff;
    goto loc_125e9;
loc_125c6: // 0160:125c6
    edx = 0x00111715;
    eax = 0x000eaa70;
    sub_12501();
    edx = 0x00110955;
    eax = 0x000eaa70;
    sub_1254f();
    edx = 0x001109af;
loc_125e9: // 0160:125e9
    eax = 0x000eaa70;
    sub_1254f();
    ebx = 0x00000010;
    ecx = 0x00000002;
    esi = 0x00000001;
    edi = 0;
    memoryASet32(ds, 0x21ac78, ebx);
    memoryASet32(ds, 0x21aca4, ebx);
    memoryASet32(ds, 0x21aca8, ebx);
    memoryASet32(ds, 0x21ac4a, edi);
    memoryASet32(ds, 0x21ac98, edi);
    memoryASet32(ds, 0x21ac9c, edi);
    memoryASet32(ds, 0x21aca0, edi);
    memoryASet32(ds, 0x21acbc, edi);
    memoryASet32(ds, 0x50648, ecx);
    memoryASet32(ds, 0x5064c, esi);
    goto loc_109e5;
}
void sub_12645() // 0160:12645 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x217abc) == 0x00000000)
        goto loc_126a6;
    if (memoryAGet32(ds, 0x59000) != 0x00000000)
        goto loc_12668;
    memoryASet32(ds, 0x59000, 0x00000001);
    sub_15b2e();
loc_12668: // 0160:12668
    edx = 0x000a0000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000a4000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000a8000;
    eax = 0x00102cb0;
    sub_41aae();
    edx = 0x000ac000;
    eax = 0x00102cb0;
    sub_41aae();
    goto loc_126da;
loc_126a6: // 0160:126a6
    if (memoryAGet32(ds, 0x59000) != 0x00000000)
        goto loc_126cb;
    ecx = 0x00000001;
    eax = 0x00000013;
    memoryASet32(ds, 0x59000, ecx);
    sub_15cc3();
    eax = 0;
    sub_1e66f();
loc_126cb: // 0160:126cb
    edx = 0x000a0000;
    eax = 0x00102cb0;
    sub_17006();
loc_126da: // 0160:126da
    sub_15c49();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_126e2() // 0160:126e2 +long
{
    esp -= 4;
    memoryASet32(ds, 0x21ad68, edx);
    goto loc_18d41;
    // gap 19807 bytes
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6383 bytes
loc_18d41: // 0160:18d41
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x21ac68);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x21ad68);
    esi += ebx;
    eax += memoryAGet32(ds, edx * 4 + 0x592ee);
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    memoryASet32(ds, ebx + 2205190, 3);
    edi = memoryAGet32(ds, ebx + 2205190);
    ecx = eax + 2;
    if (edi)
        goto loc_18d89;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_1744c;
loc_18d89: // 0160:18d89
    if (edi != 0xffffffff)
        goto loc_18d9c;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_1744c;
loc_18d9c: // 0160:18d9c
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x21ad68);
    edx += esi;
    edx = memoryAGet32(ds, edx * 4 + 0x21a606);
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_18dba;
    edx = 0x00000009;
loc_18dba: // 0160:18dba
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_1744c;
}
void sub_126ed() // 0160:126ed +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_126f0: // 0160:126f0
    eax++;
    dl = memoryAGet(ds, eax + 326653);
    memoryASet(ds, eax + 325669, dl);
    dl = memoryAGet(ds, eax + 326694);
    memoryASet(ds, eax + 325710, dl);
    dl = memoryAGet(ds, eax + 326735);
    memoryASet(ds, eax + 325751, dl);
    dl = memoryAGet(ds, eax + 326776);
    memoryASet(ds, eax + 325792, dl);
    dl = memoryAGet(ds, eax + 326817);
    memoryASet(ds, eax + 325833, dl);
    dl = memoryAGet(ds, eax + 326858);
    memoryASet(ds, eax + 325874, dl);
    dl = memoryAGet(ds, eax + 326899);
    memoryASet(ds, eax + 325915, dl);
    dl = memoryAGet(ds, eax + 326940);
    memoryASet(ds, eax + 325956, dl);
    dl = memoryAGet(ds, eax + 326981);
    memoryASet(ds, eax + 325997, dl);
    dl = memoryAGet(ds, eax + 327022);
    memoryASet(ds, eax + 326038, dl);
    dl = memoryAGet(ds, eax + 327063);
    memoryASet(ds, eax + 326079, dl);
    dl = memoryAGet(ds, eax + 327104);
    memoryASet(ds, eax + 326120, dl);
    dl = memoryAGet(ds, eax + 327145);
    memoryASet(ds, eax + 326161, dl);
    dl = memoryAGet(ds, eax + 327186);
    memoryASet(ds, eax + 326202, dl);
    dl = memoryAGet(ds, eax + 327227);
    memoryASet(ds, eax + 326243, dl);
    dl = memoryAGet(ds, eax + 327268);
    memoryASet(ds, eax + 326284, dl);
    dl = memoryAGet(ds, eax + 327309);
    memoryASet(ds, eax + 326325, dl);
    dl = memoryAGet(ds, eax + 327350);
    memoryASet(ds, eax + 326366, dl);
    dl = memoryAGet(ds, eax + 327391);
    memoryASet(ds, eax + 326407, dl);
    dl = memoryAGet(ds, eax + 327432);
    memoryASet(ds, eax + 326448, dl);
    dl = memoryAGet(ds, eax + 327473);
    memoryASet(ds, eax + 326489, dl);
    dl = memoryAGet(ds, eax + 327514);
    memoryASet(ds, eax + 326530, dl);
    dl = memoryAGet(ds, eax + 327555);
    memoryASet(ds, eax + 326571, dl);
    dl = memoryAGet(ds, eax + 327596);
    memoryASet(ds, eax + 326612, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_126f0;
    eax = 0x0004f826;
    edx = 0;
    sub_126e2();
    edx = 0x00000002;
    eax = 0x0004f84f;
    sub_126e2();
    edx = 0x00000004;
    eax = 0x0004f878;
    sub_126e2();
    edx = 0x00000008;
    eax = 0x0004f8a1;
    sub_126e2();
    edx = 0x0000000c;
    eax = 0x0004f8ca;
    sub_126e2();
    edx = 0x0000000d;
    eax = 0x0004f8f3;
    sub_126e2();
    edx = 0x0000000b;
    eax = 0x0004f91c;
    sub_126e2();
    edx = 0x00000006;
    eax = 0x0004f945;
    sub_126e2();
    edx = 0x00000011;
    eax = 0x0004f96e;
    sub_126e2();
    edx = 0x00000007;
    eax = 0x0004f997;
    sub_126e2();
    edx = 0x00000003;
    eax = 0x0004f9c0;
    sub_126e2();
    edx = 0x00000014;
    eax = 0x0004f9e9;
    sub_126e2();
    edx = 0x0000000a;
    eax = 0x0004fa12;
    sub_126e2();
    edx = 0x00000005;
    eax = 0x0004fa3b;
    sub_126e2();
    edx = 0x00000010;
    eax = 0x0004fa64;
    sub_126e2();
    edx = 0x00000001;
    eax = 0x0004fa8d;
    sub_126e2();
    edx = 0x00000012;
    eax = 0x0004fab6;
    sub_126e2();
    edx = 0x00000009;
    eax = 0x0004fadf;
    sub_126e2();
    edx = 0x0000000f;
    eax = 0x0004fb08;
    sub_126e2();
    edx = 0x0000000e;
    eax = 0x0004fb31;
    sub_126e2();
    edx = 0x00000013;
    eax = 0x0004fbd5;
    sub_126e2();
    edx = 0;
    memoryASet32(ds, 0x21ad68, edx);
    edx = pop32();
    esp += 4;
}
void sub_1295c() // 0160:1295c +long
{
    esp -= 4;
    goto loc_1295c;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8049 bytes
loc_1295c: // 0160:1295c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    sub_1e6c8();
    eax = 0;
    ebp = 0x00000001;
    sub_1e93a();
    sub_13107();
    ebx = 0;
    sub_1768b();
    memoryASet32(ds, 0x5a2fa, ebx);
    memoryASet32(ds, 0x217a80, ebx);
    sub_130dc();
    eax = memoryAGet32(ds, 0x21acc4);
    memoryASet32(ds, 0x5a5ec, ebx);
    memoryASet32(ds, 0x21ac84, ebx);
    memoryASet32(ds, 0x21acc8, ebp);
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21acb4, ebx);
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x21af24, ebx);
    memoryASet32(ds, 0x21ac64, ebx);
    memoryASet32(ds, 0x21ac68, ebx);
    ebx = 0x00000010;
    memoryASet32(ds, 0x21ac60, eax);
    eax = 0x00000280;
    memoryASet32(ds, 0x5908c, ebx);
    memoryASet32(ds, 0x59088, eax);
    sub_12f16();
    eax = edx;
    sub_259eb();
    sub_234ba();
    ecx = memoryAGet32(ds, 0x217aa8);
    if (ecx == ebp)
        goto loc_12a0c;
    if (ecx == 0x00000006)
        goto loc_12a0c;
    if (ecx != 0x00000009)
        goto loc_12a18;
loc_12a0c: // 0160:12a0c
    memoryASet32(ds, 0x21acb0, 0x000000f8);
    goto loc_12a22;
loc_12a18: // 0160:12a18
    memoryASet32(ds, 0x21acb0, 0x000000e6);
loc_12a22: // 0160:12a22
    eax = memoryAGet32(ds, 0x59020);
    eax <<= 2;
    memoryASet32(ds, 0x59030, eax);
    eax = memoryAGet32(ds, 0x59024);
    eax <<= 2;
    edx = 0;
    memoryASet32(ds, 0x5903c, eax);
    eax = memoryAGet32(ds, 0x59028);
    memoryASet32(ds, 0x59034, edx);
    eax <<= 2;
    memoryASet32(ds, 0x59040, edx);
    memoryASet32(ds, 0x59048, eax);
    eax = memoryAGet32(ds, 0x5902c);
    memoryASet32(ds, 0x5904c, edx);
    eax <<= 2;
    memoryASet32(ds, 0x59058, edx);
    memoryASet32(ds, 0x59054, eax);
    eax = 0;
loc_12a72: // 0160:12a72
    eax++;
    dl = memoryAGet(ds, eax + 945007);
    memoryASet(ds, eax + 383695, dl);
    if ((int32_t)eax < (int32_t)0x00000fc0)
        goto loc_12a72;
    sub_126ed();
    edx = 0x00000120;
    eax = 0x0005dad0;
    edi = 0x00000500;
    ebp = 0x000003a0;
    ecx = 0x00020000;
    esi = 0x00000001;
    sub_12079();
    sub_12382();
    sub_124e6();
    sub_12593();
    ebx = 0;
    memoryASet32(ds, 0x21af14, edi);
    memoryASet32(ds, 0x21af18, ebp);
    memoryASet32(ds, 0x21af1c, edi);
    memoryASet32(ds, 0x21af20, ebp);
    sub_12645();
    sub_11f43();
    edi = 0xffff6000;
    ebp = memoryAGet32(ds, 0x590a4);
    memoryASet32(ds, 0x21ac46, ebx);
    memoryASet32(ds, 0x21af08, ecx);
    memoryASet32(ds, 0x21ac6c, esi);
    memoryASet32(ds, 0x21ac74, edi);
    if (!ebp)
        goto loc_12b0f;
    sub_13ce7();
    goto loc_12b14;
loc_12b0f: // 0160:12b0f
    sub_13df1();
loc_12b14: // 0160:12b14
    sub_13bd3();
    sub_13c2f();
    sub_13c8b();
    sub_1e793();
    goto loc_109e4;
}
void sub_12b2d() // 0160:12b2d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x20;
    ebx = 0;
loc_12b35: // 0160:12b35
    ebx++;
    memoryASet(ds, ebx + 325613, ah);
    if ((int32_t)ebx < (int32_t)0x0000000e)
        goto loc_12b35;
    ebx = 0;
loc_12b43: // 0160:12b43
    edx = 0x00000009;
    eax = 0;
    ebx++;
    sub_24709();
    al += 0x30;
    memoryASet(ds, ebx + 325613, al);
    if ((int32_t)ebx < (int32_t)0x0000000a)
        goto loc_12b43;
    edx = 0x00000005;
    ebx = 0x00000024;
    eax = 0;
    cl = 0x20;
    sub_24709();
    esi = eax;
    edx = eax;
    ebx -= esi;
    eax = 0;
    esi = ebx;
    goto loc_12b84;
loc_12b7c: // 0160:12b7c
    ebx++;
    eax++;
    memoryASet(ds, ebx + 325587, cl);
loc_12b84: // 0160:12b84
    if ((int32_t)eax < (int32_t)edx)
        goto loc_12b7c;
    ch = 0;
    memoryASet(ds, esi + 325588, ch);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_12b95() // 0160:12b95 +long
{
    esp -= 4;
    goto loc_12b95;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8618 bytes
loc_12b95: // 0160:12b95
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x21ac90) == 0x00000000)
        goto loc_109e4;
    ebx = 0;
    sub_156b5();
    bl = al;
    if ((int32_t)ebx < (int32_t)0x00000030)
        goto loc_12bbb;
    if ((int32_t)ebx <= (int32_t)0x00000039)
        goto loc_12bcf;
loc_12bbb: // 0160:12bbb
    if ((int32_t)ebx < (int32_t)0x00000041)
        goto loc_12bc5;
    if ((int32_t)ebx <= (int32_t)0x0000005a)
        goto loc_12bcf;
loc_12bc5: // 0160:12bc5
    if (ebx == 0x00000001)
        goto loc_12bcf;
    if (ebx != 0x00000020)
        goto loc_12c0c;
loc_12bcf: // 0160:12bcf
    if (ebx == 0x00000001)
        goto loc_12bfd;
    if ((int32_t)memoryAGet32(ds, 0x21ac94) < (int32_t)0x0000000a)
        goto loc_12be7;
    memoryASet32(ds, 0x21ac94, 0x00000009);
loc_12be7: // 0160:12be7
    eax = memoryAGet32(ds, 0x21ac94);
    memoryASet(ds, eax + 325614, bl);
    if ((int32_t)eax >= (int32_t)0x0000000a)
        goto loc_12bfd;
    eax++;
    memoryASet32(ds, 0x21ac94, eax);
loc_12bfd: // 0160:12bfd
    edx = 0x00091b90;
    eax = 0x0004f7d4;
    sub_11723();
loc_12c0c: // 0160:12c0c
    if (ebx != 0x00000008)
        goto loc_12c51;
    edi = memoryAGet32(ds, 0x21ac94);
    if (!edi)
        goto loc_12c51;
    if (edi != 0x00000009)
        goto loc_12c30;
    al = memoryAGet(ds, edi + 325614);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_12c36;
loc_12c30: // 0160:12c30
    memoryASet32(ds, 0x21ac94, memoryAGet32(ds, 0x21ac94) - 1);
loc_12c36: // 0160:12c36
    eax = memoryAGet32(ds, 0x21ac94);
    memoryASet(ds, eax + 325614, 0x20);
    edx = 0x00091b90;
    eax = 0x0004f7d4;
    sub_11723();
loc_12c51: // 0160:12c51
    if (ebx != 0x0000000a)
        goto loc_12ef0;
    ebx = 0xffffffff;
    esi = 0x00000001;
    edx = 0;
    eax = memoryAGet32(ds, 0x21ac94);
    memoryASet32(ds, 0x59070, edx);
    memoryASet32(ds, 0x5a30a, ebx);
    memoryASet32(ds, 0x21ac90, edx);
    dh = 0;
    memoryASet32(ds, 0x5909c, esi);
    memoryASet(ds, eax + 325614, dh);
    memoryASet(ds, eax + 325655, dh);
    sub_13107();
    eax = 0x0004f7ee;
    edx = 0x0004f7ee;
    sub_2473d();
    memoryASet32(ds, 0x59060, eax);
    eax = 0x0004e2fa;
    sub_44950();
    if (eax)
        goto loc_12cc2;
    memoryASet32(ds, 0x5a30a, eax);
    goto loc_12e70;
loc_12cc2: // 0160:12cc2
    edx = 0x0004f7ee;
    eax = 0x0004e301;
    sub_44950();
    if (eax)
        goto loc_12ce4;
    memoryASet32(ds, 0x5a30a, 0x00000002);
    goto loc_12e70;
loc_12ce4: // 0160:12ce4
    edx = 0x0004f7ee;
    eax = 0x0004e306;
    sub_44950();
    if (eax)
        goto loc_12d02;
    memoryASet32(ds, 0x5a30a, esi);
    goto loc_12e70;
loc_12d02: // 0160:12d02
    edx = 0x0004f7ee;
    eax = 0x0004e30d;
    sub_44950();
    if (eax)
        goto loc_12d24;
    memoryASet32(ds, 0x5a30a, 0x00000004);
    goto loc_12e70;
loc_12d24: // 0160:12d24
    edx = 0x0004f7ee;
    eax = 0x0004e314;
    sub_44950();
    if (eax)
        goto loc_12d46;
    memoryASet32(ds, 0x5a30a, 0x00000003);
    goto loc_12e70;
loc_12d46: // 0160:12d46
    edx = 0x0004f7ee;
    eax = 0x0004e31a;
    sub_44950();
    if (eax)
        goto loc_12d68;
    memoryASet32(ds, 0x5a30a, 0x00000005);
    goto loc_12e70;
loc_12d68: // 0160:12d68
    edx = 0x0004f7ee;
    eax = 0x0004e320;
    sub_44950();
    if (eax)
        goto loc_12d8a;
    memoryASet32(ds, 0x5a30a, 0x00000006);
    goto loc_12e70;
loc_12d8a: // 0160:12d8a
    edx = 0x0004f7ee;
    eax = 0x0004e326;
    sub_44950();
    if (eax)
        goto loc_12dac;
    memoryASet32(ds, 0x5a30a, 0x00000007);
    goto loc_12e70;
loc_12dac: // 0160:12dac
    edx = 0x0004f7ee;
    eax = 0x0004e32e;
    sub_44950();
    if (eax)
        goto loc_12dce;
    memoryASet32(ds, 0x5a30a, 0x00000008);
    goto loc_12e70;
loc_12dce: // 0160:12dce
    edx = 0x0004f7ee;
    eax = 0x0004e333;
    sub_44950();
    if (eax)
        goto loc_12df0;
    memoryASet32(ds, 0x5a30a, 0x00000009);
    goto loc_12e70;
loc_12df0: // 0160:12df0
    edx = 0x0004f7ee;
    eax = 0x0004e339;
    sub_44950();
    if (eax)
        goto loc_12e16;
    ebp = 0x00000003;
    memoryASet32(ds, 0x59068, esi);
    memoryASet32(ds, 0x5a30a, ebp);
    goto loc_12e70;
loc_12e16: // 0160:12e16
    edx = 0x0004f7ee;
    eax = 0x0004e33d;
    sub_44950();
    if (eax)
        goto loc_12e36;
    memoryASet32(ds, 0x5a30a, ebx);
    sub_12b2d();
    goto loc_12e61;
loc_12e36: // 0160:12e36
    edx = 0x0004f7ee;
    eax = 0x0004e341;
    sub_44950();
    if (eax)
        goto loc_12e70;
loc_12e49: // 0160:12e49
    eax++;
    dl = memoryAGet(ds, eax + 2194035);
    memoryASet(ds, eax + 325613, dl);
    memoryASet(ds, eax + 325654, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_12e49;
loc_12e61: // 0160:12e61
    eax = 0x0004f7ee;
    sub_2473d();
    memoryASet32(ds, 0x59060, eax);
loc_12e70: // 0160:12e70
    if (memoryAGet32(ds, 0x5a30a) != 0xffffffff)
        goto loc_12ede;
    bh = 0x20;
    eax = 0;
loc_12e7d: // 0160:12e7d
    eax++;
    memoryASet(ds, eax + 325654, bh);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_12e7d;
    eax = 0;
loc_12e8b: // 0160:12e8b
    eax++;
    dl = memoryAGet(ds, eax + 325613);
    memoryASet(ds, eax + 325654, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_12e8b;
    eax = memoryAGet32(ds, 0x59060);
    sub_1295c();
    if (memoryAGet32(ds, 0x5a306) == 0x00000000)
        goto loc_12eb5;
    sub_1376a();
loc_12eb5: // 0160:12eb5
    memoryASet32(ds, 0x21ac60, 0x00000225);
    eax = memoryAGet32(ds, 0x22313c);
    edx = 0x00000001;
    memoryASet32(ds, 0x21af04, eax);
    ebx = 0;
    memoryASet32(ds, 0x21af00, edx);
    memoryASet32(ds, 0x21ae78, ebx);
    goto loc_12ee8;
loc_12ede: // 0160:12ede
    memoryASet32(ds, 0x59064, 0x00000001);
loc_12ee8: // 0160:12ee8
    ecx = 0;
    memoryASet32(ds, 0x5909c, ecx);
loc_12ef0: // 0160:12ef0
    esi = 0x00001400;
    edi = 0x00000064;
    ebp = 0x00000001;
    memoryASet32(ds, 0x217ab8, esi);
    memoryASet32(ds, 0x217aa4, edi);
    memoryASet32(ds, 0x217a90, ebp);
    goto loc_109e4;
}
void sub_12f16() // 0160:12f16 +long
{
    esp -= 4;
    goto loc_12f16;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9515 bytes
loc_12f16: // 0160:12f16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_12f22: // 0160:12f22
    edx = 0x00155270;
    memoryASet32(ds, ebx + 2202098, edx);
    ebp = 0x00000001;
    memoryASet32(ds, ebx + 2202102, edx);
    memoryASet32(ds, ebx + 2201958, ebp);
    eax = 0x00000032;
    memoryASet32(ds, ebx + 2201966, ebp);
    memoryASet32(ds, ebx + 2202046, eax);
    edx = 0x0000000a;
    ebp = 0x00000004;
    memoryASet32(ds, ebx + 2201970, edx);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx += 0x000000ac;
    memoryASet32(ds, ebx + 2201762, esi);
    memoryASet32(ds, ebx + 2201766, esi);
    memoryASet32(ds, ebx + 2201770, esi);
    memoryASet32(ds, ebx + 2201790, esi);
    memoryASet32(ds, ebx + 2201918, esi);
    memoryASet32(ds, ebx + 2201922, esi);
    memoryASet32(ds, ebx + 2201802, esi);
    memoryASet32(ds, ebx + 2201810, esi);
    memoryASet32(ds, ebx + 2201814, esi);
    memoryASet32(ds, ebx + 2201822, esi);
    memoryASet32(ds, ebx + 2201830, esi);
    memoryASet32(ds, ebx + 2201842, esi);
    memoryASet32(ds, ebx + 2201778, esi);
    memoryASet32(ds, ebx + 2201838, esi);
    memoryASet32(ds, ebx + 2201866, esi);
    memoryASet32(ds, ebx + 2201870, esi);
    memoryASet32(ds, ebx + 2201818, esi);
    memoryASet32(ds, ebx + 2201858, esi);
    memoryASet32(ds, ebx + 2201886, esi);
    memoryASet32(ds, ebx + 2201894, esi);
    memoryASet32(ds, ebx + 2201890, esi);
    memoryASet32(ds, ebx + 2201906, esi);
    memoryASet32(ds, ebx + 2201910, esi);
    edi = 0x00000100;
    memoryASet32(ds, ebx + 2201914, esi);
    memoryASet32(ds, ebx + 2201782, edi);
    edi = 0xffffffff;
    memoryASet32(ds, ebx + 2201834, ebp);
    memoryASet32(ds, ebx + 2201878, edi);
    eax = memoryAGet32(ds, eax * 4 + 0x59020);
    edx = 0x00000010;
    memoryASet32(ds, ebx + 2201862, eax);
    ebp = 0x00000096;
    memoryASet32(ds, ebx + 2201882, edx);
    eax = 0x00000001;
    memoryASet32(ds, ebx + 2201898, ebp);
    ecx += eax;
    memoryASet32(ds, ebx + 2201902, eax);
    if ((int32_t)ecx < (int32_t)edx)
        goto loc_12f22;
    edx = memoryAGet32(ds, 0x59010);
    memoryASet32(ds, 0x21ac88, ebp);
    memoryASet32(ds, 0x21ad84, eax);
    ecx = 0;
    eax = 0x00000003;
    memoryASet32(ds, 0x5a5d4, ecx);
    memoryASet32(ds, 0x5a5d8, ecx);
    memoryASet32(ds, 0x5a5dc, ecx);
    edx--;
    memoryASet32(ds, 0x21adcc, eax);
    memoryASet32(ds, 0x21add0, eax);
    ebx = eax;
    memoryASet32(ds, 0x21add4, eax);
    memoryASet32(ds, 0x21add8, eax);
    eax = 0;
    memoryASet32(ds, 0x5a5e0, ecx);
    sub_24709();
    eax--;
    eax &= ebx;
    memoryASet32(ds, 0x21ac68, eax);
    sub_17980();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202006, ecx);
    eax = 0x0004f826;
    memoryASet32(ds, 0x21ad68, ecx);
    memoryASet32(ds, 0x21ad6c, eax);
    sub_1128d();
    sub_1139d();
    goto loc_109e4;
}
void sub_130dc() // 0160:130dc +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_130df: // 0160:130df
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 378488);
    memoryASet32(ds, eax + 2205186, edx);
    memoryASet32(ds, eax + 2205270, edx);
    memoryASet32(ds, eax + 2205354, edx);
    memoryASet32(ds, eax + 2205438, edx);
    if (eax != 0x00000054)
        goto loc_130df;
    edx = pop32();
    esp += 4;
}
void sub_13107() // 0160:13107 +long
{
    esp -= 4;
    goto loc_13107;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10012 bytes
loc_13107: // 0160:13107
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1768b();
    edx = 0xffffffff;
    ecx = 0x00000010;
    edi = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x5a5e8, edx);
    sub_25c78();
    edx = 0x00000064;
    memoryASet32(ds, 0x5a2f2, ebx);
    memoryASet32(ds, 0x21aec4, ecx);
    memoryASet32(ds, 0x5a2e6, ebx);
    memoryASet32(ds, 0x21acc8, edi);
    memoryASet32(ds, 0x21acc0, edi);
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x5901c, edx);
    sub_25d40();
    sub_12f16();
    sub_1230d();
    dl = 0x80;
    eax = 0;
loc_13170: // 0160:13170
    eax++;
    memoryASet(ds, eax + 590479, dl);
    if ((int32_t)eax < (int32_t)0x00003200)
        goto loc_13170;
    ebx = 0x00050000;
    edx = 0x00000005;
    memoryASet32(ds, 0x217a84, ebx);
    sub_11a6a();
    sub_15c49();
    sub_15a7d();
    eax = memoryAGet32(ds, 0x217ac8);
    ecx = 0;
    memoryASet32(ds, 0x217ab0, eax);
    eax = memoryAGet32(ds, 0x217ac4);
    memoryASet32(ds, 0x21aea8, ecx);
    memoryASet32(ds, 0x217ab4, eax);
    eax = 0x00000002;
    memoryASet32(ds, 0x21ad70, ecx);
    sub_24709();
    edx = 0x00000001;
    memoryASet32(ds, 0x239f2c, eax);
    memoryASet32(ds, 0x5cb74, ecx);
    memoryASet32(ds, 0x21ad70, ecx);
    memoryASet32(ds, 0x21ad74, ecx);
    memoryASet32(ds, 0x21ad84, edx);
    eax = 0;
loc_131ed: // 0160:131ed
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 2207448, ebx);
    if (eax != 0x00000010)
        goto loc_131ed;
    eax = 0;
loc_131ff: // 0160:131ff
    eax += 0x00000018;
    ecx = 0;
    memoryASet32(ds, eax + 2200806, ecx);
    if (eax != 0x000000f0)
        goto loc_131ff;
    eax = 0;
loc_13213: // 0160:13213
    eax += 0x00000024;
    esi = 0;
    memoryASet32(ds, eax + 2204650, esi);
    if (eax != 0x00000120)
        goto loc_13213;
    memoryASet32(ds, 0x21a552, esi);
    eax = 0;
loc_1322d: // 0160:1322d
    eax += 0x00000020;
    ebp = 0;
    memoryASet32(ds, eax + 2205494, ebp);
    if (eax != 0x00000400)
        goto loc_1322d;
    eax = 0;
loc_13241: // 0160:13241
    eax += 0x00000024;
    edx = 0;
    memoryASet32(ds, eax + 2205046, edx);
    if (eax != 0x0000006c)
        goto loc_13241;
    eax = 0;
loc_13253: // 0160:13253
    eax += 0x00000004;
    ebx = 0;
    memoryASet32(ds, eax + 934604, ebx);
    if (eax != 0x00000020)
        goto loc_13253;
    eax = 0;
loc_13265: // 0160:13265
    eax += 0x00000004;
    ecx = 0;
    memoryASet32(ds, eax + 2333976, ecx);
    if (eax != 0x00000020)
        goto loc_13265;
    eax = 0;
loc_13277: // 0160:13277
    eax += 0x00000018;
    esi = 0;
    memoryASet32(ds, eax + 2330884, esi);
    if (eax != 0x00000c00)
        goto loc_13277;
    memoryASet32(ds, 0x21ab56, esi);
    eax = 0;
loc_13291: // 0160:13291
    eax += 0x00000024;
    ebp = 0;
    memoryASet32(ds, eax + 2201034, ebp);
    memoryASet32(ds, eax + 2201050, ebp);
    memoryASet32(ds, eax + 2201054, ebp);
    if (eax != 0x00000360)
        goto loc_13291;
    eax = 0;
loc_132b1: // 0160:132b1
    eax += 0x00000012;
    ecx = 0;
    memoryASet32(ds, eax + 639102, ecx);
    if (eax != 0x00004800)
        goto loc_132b1;
    sub_130dc();
    esi = 0x00000041;
    edi = 0x00000042;
    ebp = 0x00000043;
    edx = 0x00000044;
    eax = 0;
loc_132de: // 0160:132de
    eax += 0x00000010;
    memoryASet32(ds, eax + 934624, esi);
    memoryASet32(ds, eax + 934628, edi);
    memoryASet32(ds, eax + 934632, ebp);
    memoryASet32(ds, eax + 934636, edx);
    if (eax != 0x00000080)
        goto loc_132de;
    goto loc_109e4;
}
void sub_13305() // 0160:13305 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x21ac78);
    edx = memoryAGet32(ds, 0x21aca4);
    if (eax == edx)
        goto loc_1333d;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1332b;
    edi = edx + -2;
    memoryASet32(ds, 0x21aca4, edi);
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_1333d;
    goto loc_13338;
loc_1332b: // 0160:1332b
    ecx = edx + 2;
    memoryASet32(ds, 0x21aca4, ecx);
    if ((int32_t)ecx <= (int32_t)eax)
        goto loc_1333d;
loc_13338: // 0160:13338
    memoryASet32(ds, 0x21aca4, eax);
loc_1333d: // 0160:1333d
    eax = memoryAGet32(ds, 0x21ac98);
    edx = memoryAGet32(ds, 0x21ac9c);
    if (eax == edx)
        goto loc_13367;
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1335e;
    esi = edx + -1;
    memoryASet32(ds, 0x21ac9c, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1335e: // 0160:1335e
    ecx = edx + 1;
    memoryASet32(ds, 0x21ac9c, ecx);
loc_13367: // 0160:13367
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1336c() // 0160:1336c +long
{
    esp -= 4;
    goto loc_1336c;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10625 bytes
loc_1336c: // 0160:1336c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_133e1;
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_133e1;
    if (memoryAGet32(ds, 0x5a2f2) != 0x00000000)
        goto loc_133e1;
    if (memoryAGet(ds, 0x222f6a) == 0x00)
        goto loc_133b9;
    if (memoryAGet32(ds, 0x21af08) != 0x00010000)
        goto loc_133b9;
    if (memoryAGet32(ds, 0x21ac46) != 0x00000000)
        goto loc_133b9;
    memoryASet32(ds, 0x21ac46, 0x00000001);
loc_133b9: // 0160:133b9
    if (memoryAGet(ds, 0x222f6a) == 0x00)
        goto loc_133e1;
    if (memoryAGet32(ds, 0x21af08) != 0x00020000)
        goto loc_133e1;
    if (memoryAGet32(ds, 0x21ac46) != 0x00000000)
        goto loc_133e1;
    memoryASet32(ds, 0x21ac46, 0x00000002);
loc_133e1: // 0160:133e1
    ecx = memoryAGet32(ds, 0x21ac46);
    if (!ecx)
        goto loc_109e4;
    if (ecx != 0x00000001)
        goto loc_13423;
    ebx = memoryAGet32(ds, 0x21af08);
    ebx += 0x00000600;
    memoryASet32(ds, 0x21af08, ebx);
    if ((int32_t)ebx < (int32_t)0x00020000)
        goto loc_1344f;
    esi = 0;
    edi = 0x00020000;
    memoryASet32(ds, 0x21ac46, esi);
    memoryASet32(ds, 0x21af08, edi);
    goto loc_1344f;
loc_13423: // 0160:13423
    edi = memoryAGet32(ds, 0x21af08);
    edi -= 0x00000600;
    memoryASet32(ds, 0x21af08, edi);
    if ((int32_t)edi > (int32_t)0x00010000)
        goto loc_1344f;
    eax = 0;
    edx = 0x00010000;
    memoryASet32(ds, 0x21ac46, eax);
    memoryASet32(ds, 0x21af08, edx);
loc_1344f: // 0160:1344f
    if (memoryAGet(ds, 0x222f6a) != 0x00)
        goto loc_1345d;
    sub_175a8();
loc_1345d: // 0160:1345d
    ebp = 0;
    memoryASet32(ds, 0x21ac6c, ebp);
    goto loc_109e4;
}
void sub_1346a() // 0160:1346a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5a2ea);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x5a2ea, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x5c998);
    memoryASet32(ds, 0x5a2ea, ebx);
    if ((int32_t)ecx < 0)
        goto loc_134f2;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_134f2;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_134c6;
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x00155270;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x00102cb0;
    eax += 0x00003d10;
    goto loc_134ed;
loc_134c6: // 0160:134c6
    push32(0x00000140);
    push32(0x00000140);
    eax = 0x00155270;
    push32(0x00000008);
    ecx = 0x00000064;
    ebx = 0x00000088;
    push32(0x00000030);
    edx = 0x00102cb0;
    eax += 0x00004710;
loc_134ed: // 0160:134ed
    sub_170ca();
loc_134f2: // 0160:134f2
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1350e() // 0160:1350e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5a2ee);
    if (!edx)
        goto loc_13524;
    ebx = edx + -1;
    memoryASet32(ds, 0x5a2ee, ebx);
loc_13524: // 0160:13524
    ecx = memoryAGet32(ds, 0x5a2ee);
    if (!ecx)
        goto loc_13552;
    edx = memoryAGet32(ds, 0x5c664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_13552;
    eax -= ecx;
    sub_38d4c();
loc_13552: // 0160:13552
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_13556() // 0160:13556 +long
{
    esp -= 4;
    sub_38d80();
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1356a;
    memoryASet32(ds, 0x5a2ee, 0x0000015e);
loc_1356a: // 0160:1356a
    esp += 4;
    return;
}
void sub_1356b() // 0160:1356b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    sub_1350e();
    edx = memoryAGet32(ds, 0x590c0);
    if (!edx)
        goto loc_135a7;
    ebx = edx + -1;
    memoryASet32(ds, 0x590c0, ebx);
    if (ebx)
        goto loc_135a7;
    eax = memoryAGet32(ds, 0x21ad6c);
    esi = 0xffffffff;
    sub_18de2();
    memoryASet32(ds, 0x217aa4, esi);
    memoryASet32(ds, 0x59094, esi);
loc_135a7: // 0160:135a7
    if (memoryAGet32(ds, 0x21acc8) == 0x00000000)
        goto loc_136e7;
    if (memoryAGet32(ds, 0x21ac90) != 0x00000000)
        goto loc_136e7;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_136e7;
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_136e7;
    ecx = memoryAGet32(ds, 0x5a2f6);
    if (!ecx)
        goto loc_135ee;
    esi = ecx + -1;
    memoryASet32(ds, 0x5a2f6, esi);
loc_135ee: // 0160:135ee
    if (memoryAGet32(ds, 0x5a2f2) == 0x00000000)
        goto loc_13601;
    memoryASet32(ds, 0x217aa4, 0x00000032);
loc_13601: // 0160:13601
    if (memoryAGet(ds, 0x222f51) == 0x00)
        goto loc_136e7;
    eax = memoryAGet32(ds, 0x5a2f6);
    if (eax)
        goto loc_136e7;
    memoryASet(ds, 0x5a2f2, memoryAGet(ds, 0x5a2f2) ^ 0x01);
    edx = 0x0000000c;
    ebx = memoryAGet32(ds, 0x5a2f2);
    memoryASet32(ds, 0x5a2f6, edx);
    if (ebx)
        goto loc_1366f;
    sub_38d00();
    sub_13556();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202066, 0x00000001);
    eax = 0x0004f627;
    ebp = 0x00000032;
    sub_18de2();
    memoryASet32(ds, 0x590c0, ebp);
    goto loc_136e7;
loc_1366f: // 0160:1366f
    dh = 0x20;
    memoryASet32(ds, 0x590c0, eax);
    sub_10df2();
    eax = 0;
loc_1367d: // 0160:1367d
    eax++;
    memoryASet(ds, eax + 325124, dh);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_1367d;
    edx = memoryAGet32(ds, 0x21ac64);
    ecx = memoryAGet32(ds, 0x21ac64);
    eax = 0;
    edx <<= 4;
    ebx = ecx * 0x000000ac;
    goto loc_136b0;
loc_136a2: // 0160:136a2
    eax++;
    cl = memoryAGet(ds, edx + 364956);
    edx++;
    memoryASet(ds, eax + 325124, cl);
loc_136b0: // 0160:136b0
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, ebx + 2202018))
        goto loc_136a2;
    eax = 0;
loc_136ba: // 0160:136ba
    eax++;
    dl = memoryAGet(ds, eax + 325654);
    memoryASet(ds, eax + 325146, dl);
    if ((int32_t)eax < (int32_t)0x0000000a)
        goto loc_136ba;
    eax = 0x0004f5fe;
    sub_18de2();
    edx = 0;
    sub_38d80();
    sub_10010();
    sub_38cd4();
loc_136e7: // 0160:136e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_136ed() // 0160:136ed +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5a2fa);
    if (!edx)
        goto loc_1372c;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_1372c;
    eax = edx;
    eax &= 0x00000007;
    eax++;
    memoryASet32(ds, 0x5a2fa, eax);
    if ((int32_t)eax <= (int32_t)0x00000003)
        goto loc_1372c;
    ecx = 0x00000012;
    ebx = 0x00000010;
    edx = 0x00103bb8;
    eax = 0x00158ce0;
    sub_41bd6();
loc_1372c: // 0160:1372c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1376a() // 0160:1376a +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x5a306, edx);
    memoryASet32(ds, 0x5a30e, ecx);
    ecx = 0x0000000a;
loc_13785: // 0160:13785
    if (memoryAGet32(ds, 0x5a306) == 0x00000000)
        goto loc_13839;
    edi = memoryAGet32(ds, 0x5a30e);
    if ((int32_t)edi >= (int32_t)0x00000080)
        goto loc_13839;
    if ((int32_t)edi >= (int32_t)0x00000040)
        goto loc_137b0;
    sub_12b2d();
    goto loc_13801;
loc_137b0: // 0160:137b0
    edx = 0;
    dl = memoryAGet(ds, 0x4f7ee);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x4f7ee, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x4f7ef);
    edx -= 0x00000029;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x4f7ef, dl);
    edx = 0;
    dl = memoryAGet(ds, 0x4f7f0);
    edx -= 0x0000002d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx += 0x00000030;
    memoryASet(ds, 0x4f7f0, dl);
loc_13801: // 0160:13801
    eax = 0x0004f7ee;
    sub_2473d();
    memoryASet32(ds, 0x59060, eax);
    eax = 0;
loc_13812: // 0160:13812
    eax++;
    dl = memoryAGet(ds, eax + 325613);
    memoryASet(ds, eax + 325654, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_13812;
    eax = memoryAGet32(ds, 0x59060);
    sub_1295c();
    memoryASet32(ds, 0x5a30e, memoryAGet32(ds, 0x5a30e) + 1);
    goto loc_13785;
loc_13839: // 0160:13839
    if (memoryAGet32(ds, 0x59068) == 0x00000000)
        goto loc_1384e;
    eax = 0;
    memoryASet32(ds, 0x5a30a, eax);
    memoryASet32(ds, 0x59068, eax);
loc_1384e: // 0160:1384e
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_13852() // 0160:13852 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x0000002d;
    eax = 0;
    sub_24709();
    dl = 0x20;
    ecx = memoryAGet32(ds, eax * 4 + 0x59382);
    eax = 0;
loc_1386c: // 0160:1386c
    eax++;
    memoryASet(ds, eax + 328196, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_1386c;
    eax = ecx;
    ebx = 0;
loc_1387c: // 0160:1387c
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_13885;
    eax++;
    ebx++;
    goto loc_1387c;
loc_13885: // 0160:13885
    edx = 0x00000028;
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax = ecx;
    ecx += ebx;
    goto loc_138a7;
loc_1389d: // 0160:1389d
    edx++;
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx + 328196, bl);
loc_138a7: // 0160:138a7
    if (eax != ecx)
        goto loc_1389d;
    ebx = 0x000000c8;
    eax = 0x00050205;
    edx = 0;
    sub_18dc8();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_138c0() // 0160:138c0 +long
{
    esp -= 4;
    goto loc_138c0;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11989 bytes
loc_138c0: // 0160:138c0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x58ffc) == 0x00000000)
        goto loc_1390a;
    edi = 0x000000b0;
    ebp = 0xffffffff;
    ebx = 0;
    edx = 0;
    memoryASet32(ds, 0x58ffc, ebx);
    memoryASet32(ds, 0x59078, ebx);
    memoryASet32(ds, 0x59098, ebx);
    memoryASet32(ds, 0x5907c, edi);
    memoryASet32(ds, 0x590cc, ebp);
    sub_38d80();
    sub_10010();
    sub_38d2f();
loc_1390a: // 0160:1390a
    if (memoryAGet32(ds, 0x5900c) == 0x00000000)
        goto loc_109e4;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_109e4;
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1397f;
    if (memoryAGet32(ds, 0x21ac90) != 0x00000000)
        goto loc_1397f;
    sub_156aa();
    edi = 0x00000001;
    eax = 0x0000001a;
    dl = 0x20;
    memoryASet32(ds, 0x59070, edi);
    memoryASet32(ds, 0x21ac90, edi);
loc_13953: // 0160:13953
    eax++;
    memoryASet(ds, eax + 325587, dl);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_13953;
    dh = 0x3f;
    eax = 0x0004f7d4;
    memoryASet(ds, 0x4f7ee, dh);
    edx = 0x00091b90;
    sub_11723();
    eax = 0;
    memoryASet32(ds, 0x21ac94, eax);
    goto loc_139dc;
loc_1397f: // 0160:1397f
    if (memoryAGet32(ds, 0x21ac90) != 0x00000000)
        goto loc_139b1;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_139b1;
    if ((int32_t)memoryAGet32(ds, 0x5c998) < (int32_t)0x00000000)
        goto loc_139b1;
    eax = 0x0004f7fd;
    esi = 0x00000001;
    sub_18e05();
    memoryASet32(ds, 0x217aa4, esi);
    goto loc_139dc;
loc_139b1: // 0160:139b1
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_139cd;
    ebx = 0x00000063;
    memoryASet32(ds, 0x21ac60, ebx);
    memoryASet32(ds, 0x5900c, ebx);
    goto loc_139dc;
loc_139cd: // 0160:139cd
    eax = 0x00000225;
    memoryASet32(ds, 0x21ac60, eax);
    memoryASet32(ds, 0x5900c, eax);
loc_139dc: // 0160:139dc
    if (memoryAGet(ds, 0x222f85) != 0x00)
        goto loc_139fb;
    if (memoryAGet32(ds, 0x217a8c) != 0x00000000)
        goto loc_139fb;
    if (memoryAGet32(ds, 0x59064) == 0x00000000)
        goto loc_13abf;
loc_139fb: // 0160:139fb
    ecx = memoryAGet32(ds, 0x21ac90);
    if (ecx)
        goto loc_13abf;
    memoryASet32(ds, 0x59064, ecx);
    sub_12b2d();
    eax = 0x0004f7ee;
    sub_2473d();
    ebx = eax;
    eax = 0;
loc_13a22: // 0160:13a22
    eax++;
    dl = memoryAGet(ds, eax + 325613);
    memoryASet(ds, eax + 325654, dl);
    if ((int32_t)eax < (int32_t)0x0000000e)
        goto loc_13a22;
    edi = 0x00000001;
    ebp = memoryAGet32(ds, 0x590c8);
    memoryASet32(ds, 0x5909c, edi);
    if (ebp)
        goto loc_13a4e;
    sub_14794();
loc_13a4e: // 0160:13a4e
    if ((int32_t)memoryAGet32(ds, 0x5a30a) >= (int32_t)0x00000000)
        goto loc_13a67;
    eax = ebx;
    sub_1295c();
    if (memoryAGet32(ds, 0x5a306) == 0x00000000)
        goto loc_13a6c;
loc_13a67: // 0160:13a67
    sub_1376a();
loc_13a6c: // 0160:13a6c
    ebx = 0;
    ecx = memoryAGet32(ds, 0x5cd20);
    memoryASet32(ds, 0x5909c, ebx);
    if (!ecx)
        goto loc_13a91;
    ebp = 0x00000063;
    memoryASet32(ds, 0x21ac60, ebp);
    memoryASet32(ds, 0x5900c, ebp);
    goto loc_13aa2;
loc_13a91: // 0160:13a91
    esi = 0x00000225;
    memoryASet32(ds, 0x21ac60, esi);
    memoryASet32(ds, 0x5900c, esi);
loc_13aa2: // 0160:13aa2
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0x21af00, edx);
    memoryASet32(ds, 0x21ae78, ebx);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x21af04, eax);
loc_13abf: // 0160:13abf
    if (memoryAGet32(ds, 0x21ac90) != 0x00000000)
        goto loc_109e4;
    esi = memoryAGet32(ds, 0x5900c);
    esi--;
    memoryASet32(ds, 0x5900c, esi);
    if (!esi)
        goto loc_13af1;
    if (memoryAGet32(ds, 0x217ac0) != 0x00000000)
        goto loc_13af1;
    if (memoryAGet(ds, 0x222f83) == 0x00)
        goto loc_109e4;
loc_13af1: // 0160:13af1
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_13b28;
    if (memoryAGet32(ds, 0x590a8) == 0x00000000)
        goto loc_13b1c;
    edx = 0x000000ff;
    eax = 0x0000000b;
    ebx = 0;
    sub_1008b();
    memoryASet32(ds, 0x590a8, ebx);
    goto loc_13b37;
loc_13b1c: // 0160:13b1c
    edx = 0x000000ff;
    eax = 0x0000000a;
    goto loc_13b32;
loc_13b28: // 0160:13b28
    edx = 0x000000ff;
    eax = memoryAGet32(ds, 0x217aa8);
loc_13b32: // 0160:13b32
    sub_1008b();
loc_13b37: // 0160:13b37
    eax = memoryAGet32(ds, 0x22313c);
    ecx = 0x00000001;
    edi = 0x00000064;
    ebp = 0x00000002;
    ebx = 0x00000032;
    memoryASet32(ds, 0x21af04, eax);
    esi = 0;
    eax = memoryAGet32(ds, 0x21acc4);
    memoryASet32(ds, 0x21ac4a, ecx);
    memoryASet32(ds, 0x5900c, esi);
    memoryASet32(ds, 0x21ae78, edi);
    memoryASet32(ds, 0x21ac60, eax);
    eax = 0x0005d6d0;
    memoryASet32(ds, 0x21ac46, ebp);
    sub_1e7a0();
    memoryASet32(ds, 0x217aa4, ecx);
    memoryASet32(ds, 0x217a90, ecx);
    sub_13852();
    eax = 0x0004f679;
    edx = memoryAGet32(ds, 0x21ac64);
    sub_18dc8();
    eax = 0;
loc_13ba6: // 0160:13ba6
    eax++;
    dl = memoryAGet(ds, eax + 325613);
    memoryASet(ds, eax + 2194035, dl);
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_13ba6;
    ebx = 0x00000019;
    ecx = 0x0000015e;
    memoryASet32(ds, 0x217a70, ebx);
    memoryASet32(ds, 0x590c0, ecx);
    goto loc_109e4;
}
void sub_13bd3() // 0160:13bd3 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202078) == 0x00000000)
        goto loc_13bee;
    edx = 0x00000019;
    goto loc_13bf3;
loc_13bee: // 0160:13bee
    edx = 0x0000001c;
loc_13bf3: // 0160:13bf3
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x5a312);
    memoryASet32(ds, 0x5a376, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a316);
    memoryASet32(ds, 0x5a37a, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a31a);
    memoryASet32(ds, 0x5a37e, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x5a322);
    memoryASet32(ds, 0x5a386, eax);
    edx = pop32();
    esp += 4;
}
void sub_13c2f() // 0160:13c2f +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202082) == 0x00000000)
        goto loc_13c4a;
    edx = 0x00000018;
    goto loc_13c4f;
loc_13c4a: // 0160:13c4a
    edx = 0x0000001b;
loc_13c4f: // 0160:13c4f
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x5a312);
    memoryASet32(ds, 0x5a34e, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a316);
    memoryASet32(ds, 0x5a352, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a31a);
    memoryASet32(ds, 0x5a356, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x5a322);
    memoryASet32(ds, 0x5a35e, eax);
    edx = pop32();
    esp += 4;
}
void sub_13c8b() // 0160:13c8b +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202086) == 0x00000000)
        goto loc_13ca6;
    edx = 0x0000001a;
    goto loc_13cab;
loc_13ca6: // 0160:13ca6
    edx = 0x0000001d;
loc_13cab: // 0160:13cab
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x5a312);
    memoryASet32(ds, 0x5a3c6, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a316);
    memoryASet32(ds, 0x5a3ca, edx);
    edx = memoryAGet32(ds, eax * 4 + 0x5a31a);
    memoryASet32(ds, 0x5a3ce, edx);
    eax = memoryAGet32(ds, eax * 4 + 0x5a322);
    memoryASet32(ds, 0x5a3d6, eax);
    edx = pop32();
    esp += 4;
}
void sub_13ce7() // 0160:13ce7 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    eax = 0;
loc_13cf1: // 0160:13cf1
    eax += 0x000000ac;
    memoryASet32(ds, eax + 2201906, edx);
    memoryASet32(ds, eax + 2201910, edx);
    memoryASet32(ds, eax + 2201914, edx);
    if (eax != 0x00000ac0)
        goto loc_13cf1;
    sub_13c2f();
    sub_13bd3();
    sub_13c8b();
    if (memoryAGet32(ds, 0x590a4) != 0x00000000)
        goto loc_13d31;
    eax = 0x0004ffff;
    sub_18e05();
loc_13d31: // 0160:13d31
    edi = 0x00000001;
    ebp = 0xffffffff;
    memoryASet32(ds, 0x590a4, edi);
    memoryASet32(ds, 0x21a656, ebp);
    memoryASet32(ds, 0x21a6aa, ebp);
    memoryASet32(ds, 0x21a6fe, ebp);
    memoryASet32(ds, 0x21a752, ebp);
    memoryASet32(ds, 0x21a652, ebp);
    memoryASet32(ds, 0x21a6a6, ebp);
    memoryASet32(ds, 0x21a6fa, ebp);
    memoryASet32(ds, 0x21a74e, ebp);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_13d75() // 0160:13d75 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = memoryAGet32(ds, 0x21ac68);
    ecx = eax;
    edx = 0x00000001;
    ecx <<= 2;
    esi = memoryAGet32(ds, 0x5cd20);
    ecx += eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, 0x5cd20, edx);
    ecx += eax;
    eax = 0;
    goto loc_13dbf;
loc_13da1: // 0160:13da1
    edx = memoryAGet32(ds, eax + 369442);
    edx += ecx;
    if (memoryAGet32(ds, edx * 4 + 0x21a606) == 0x00000000)
        goto loc_13dbb;
    indirectCall(cs, memoryAGet32(ds, eax + 369430)); // 0160:13db3;
    goto loc_13de6;
loc_13dbb: // 0160:13dbb
    eax += 0x00000014;
    ebx++;
loc_13dbf: // 0160:13dbf
    if ((int32_t)eax < (int32_t)0x0000017c)
        goto loc_13da1;
    if (ebx != 0x00000013)
        goto loc_13de6;
    sub_193d0();
    ebx = 0x0000003d;
    ecx = 0x0004fb83;
    memoryASet32(ds, 0x21ad68, ebx);
    memoryASet32(ds, 0x21ad6c, ecx);
loc_13de6: // 0160:13de6
    memoryASet32(ds, 0x5cd20, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_13df1() // 0160:13df1 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = 0;
loc_13df5: // 0160:13df5
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201906, edx);
    memoryASet32(ds, eax + 2201910, edx);
    memoryASet32(ds, eax + 2201914, edx);
    if (eax != 0x00000ac0)
        goto loc_13df5;
    sub_13c2f();
    sub_13bd3();
    sub_13c8b();
    if (memoryAGet32(ds, 0x590a4) == 0x00000000)
        goto loc_13e3c;
    eax = 0x00050028;
    sub_18e05();
    sub_13d75();
loc_13e3c: // 0160:13e3c
    edi = 0;
    memoryASet32(ds, 0x590a4, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_13e47() // 0160:13e47 +long
{
    esp -= 4;
    goto loc_13e47;
loc_136e7: // 0160:136e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1882 bytes
loc_13e47: // 0160:13e47
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x59074);
    if (edx)
        goto loc_13edf;
    eax = memoryAGet32(ds, 0x22313c);
    esi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x5a56a, eax);
    eax = esi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x59080, edx);
    memoryASet32(ds, 0x59084, edx);
    memoryASet32(ds, 0x59090, edx);
    memoryASet32(ds, 0x590c0, edx);
    memoryASet32(ds, 0x59074, ebp);
    memoryASet32(ds, 0x59098, ebp);
    memoryASet32(ds, 0x217a90, ebp);
    esi = 0xffffffff;
    memoryASet32(ds, eax + 2202014, edx);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x21af00, ebp);
    memoryASet32(ds, 0x59094, esi);
    memoryASet32(ds, 0x21ad64, edx);
    memoryASet32(ds, 0x21acd0, edx);
    memoryASet32(ds, 0x217aa4, esi);
    esi = 0x00001400;
    memoryASet32(ds, 0x59078, eax);
    memoryASet32(ds, 0x217ab8, esi);
    goto loc_13ef5;
loc_13edf: // 0160:13edf
    ebx = 0x00000002;
    ecx = 0x00000001;
    memoryASet32(ds, 0x59078, ebx);
    memoryASet32(ds, 0x59084, ecx);
loc_13ef5: // 0160:13ef5
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000001e;
    sub_36a16();
    goto loc_136e7;
}
void sub_13f15() // 0160:13f15 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    edx = 0;
    ebp = 0x000000b0;
    memoryASet32(ds, 0x590c0, edx);
    memoryASet32(ds, 0x59078, edx);
    memoryASet32(ds, 0x59074, edx);
    memoryASet32(ds, 0x59098, edx);
    memoryASet32(ds, 0x59084, edx);
    memoryASet32(ds, 0x5907c, ebp);
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_13f45() // 0160:13f45 +long
{
    esp -= 4;
    goto loc_13f45;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13658 bytes
loc_13f45: // 0160:13f45
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x59080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x59094);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 369434);
    edx = memoryAGet32(ds, eax + 369442);
    if ((int32_t)ebx >= 0)
        goto loc_13f8e;
    if (edx != 0xffffffff)
        goto loc_109e4;
    if ((int32_t)ebx < 0)
        goto loc_109e4;
loc_13f8e: // 0160:13f8e
    if (edx == 0xffffffff)
        goto loc_13fb5;
    ebx = memoryAGet32(ds, 0x21ac68);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 2;
    eax += ebx;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_109e4;
loc_13fb5: // 0160:13fb5
    ebp = 0x00000002;
    edx = 0x00000032;
    ecx = 0x00000010;
    esi = 0x00000001;
    edi = 0;
    ah = 0;
    memoryASet32(ds, 0x590c0, edi);
    memoryASet32(ds, 0x59078, ebp);
    memoryASet32(ds, 0x59074, edi);
    memoryASet32(ds, 0x21ae78, edx);
    memoryASet32(ds, 0x59084, edi);
    memoryASet32(ds, 0x21ac78, ecx);
    memoryASet(ds, 0x222f71, ah);
    memoryASet32(ds, 0x217a94, esi);
    ebp = memoryAGet32(ds, 0x59004);
    memoryASet32(ds, 0x217ac0, esi);
    if (!ebp)
        goto loc_14014;
    sub_18f9b();
    goto loc_1404b;
loc_14014: // 0160:14014
    edx = memoryAGet32(ds, 0x59080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x59094);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 369434) < (int32_t)0x00000000)
        goto loc_1404b;
    switch (memoryAGet32(ds, eax + 369430))
    {
        case 0x18f9b: sub_18f9b(); break;
        case 0x192c4: sub_192c4(); break;
        case 0x18fae: sub_18fae(); break;
        case 0x19171: sub_19171(); break;
        case 0x18fef: sub_18fef(); break;
        case 0x1925b: sub_1925b(); break;
        case 0x1910f: sub_1910f(); break;
        case 0x1915d: sub_1915d(); break;
        case 0x19008: sub_19008(); break;
        case 0x1903c: sub_1903c(); break;
        case 0x19216: sub_19216(); break;
        case 0x190b5: sub_190b5(); break;
        case 0x19074: sub_19074(); break;
        case 0x1909c: sub_1909c(); break;
        case 0x19335: sub_19335(); break;
        case 0x19311: sub_19311(); break;
        case 0x19359: sub_19359(); break;
        case 0x1912f: sub_1912f(); break;
        case 0x193b7: sub_193b7(); break;
        case 0x193d0: sub_193d0(); break;
        case 0x193f7: sub_193f7(); break;
        case 0x191d5: sub_191d5(); break;
        case 0x1929c: sub_1929c(); break;
        case 0x19028: sub_19028(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, eax + 369430));
            stop("ind 0160:1403f");
    }
    memoryASet32(ds, 0x21ad88, edi);
loc_1404b: // 0160:1404b
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000001e;
    sub_36a16();
    goto loc_109e4;
}
void sub_1406b() // 0160:1406b +long
{
    esp -= 4;
    goto loc_1406b;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13952 bytes
loc_1406b: // 0160:1406b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5a56a);
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5a56a, edx);
    if (eax)
        goto loc_14091;
    eax = 0x00000001;
loc_14091: // 0160:14091
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, 0x59078);
    ecx = memoryAGet32(ds, 0x5907c);
    ecx += eax;
    memoryASet32(ds, 0x5907c, ecx);
    if ((int32_t)ecx >= (int32_t)0x00000084)
        goto loc_140c1;
    edi = 0;
    ebp = 0x00000084;
    memoryASet32(ds, 0x59078, edi);
    memoryASet32(ds, 0x5907c, ebp);
loc_140c1: // 0160:140c1
    if ((int32_t)memoryAGet32(ds, 0x5907c) <= (int32_t)0x000000b0)
        goto loc_1418c;
    edx = 0x000000b0;
    ebx = memoryAGet32(ds, 0x59084);
    memoryASet32(ds, 0x5907c, edx);
    if (!ebx)
        goto loc_14114;
    if (memoryAGet32(ds, 0x21ac60) == 0x00000000)
        goto loc_14114;
    eax = memoryAGet32(ds, 0x59080);
    eax++;
    eax &= 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x59080, eax);
    eax = 0xfffffffe;
    memoryASet32(ds, 0x59094, edx);
    memoryASet32(ds, 0x59078, eax);
    goto loc_1418c;
loc_14114: // 0160:14114
    esi = 0;
    ebp = memoryAGet32(ds, 0x21ac60);
    memoryASet32(ds, 0x59078, esi);
    memoryASet32(ds, 0x59098, esi);
    if (ebp)
        goto loc_1418c;
    ebx = 0x00000032;
    eax = 0x0004f650;
    edi = 0x00000032;
    memoryASet32(ds, 0x59074, esi);
    memoryASet32(ds, 0x59084, esi);
    memoryASet32(ds, 0x59080, esi);
    edx = 0;
    memoryASet32(ds, 0x21acc0, esi);
    sub_18dc8();
    esi = 0x00000001;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21aefc, edi);
    memoryASet32(ds, 0x21ad88, esi);
    memoryASet32(ds, 0x21ae68, esi);
    sub_1730a();
    edx = eax;
    eax = 0x0000002d;
    sub_36a16();
loc_1418c: // 0160:1418c
    eax = memoryAGet32(ds, 0x5a56e);
    eax++;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x5a56e, eax);
    eax = memoryAGet32(ds, 0x59080);
    edi = 0x00000010;
    ebp = eax;
    esi = eax;
    ebp <<= 2;
    esi <<= 4;
    ebp -= eax;
    esi -= eax;
    ebp <<= 2;
    esi <<= 4;
loc_141b8: // 0160:141b8
    if ((int32_t)memoryAGet32(ds, esi + 369434) < (int32_t)0x00000000)
        goto loc_1421a;
    edx = memoryAGet32(ds, 0x59080) * 0x0000000c;
    edx += memoryAGet32(ds, 0x59090);
    eax = 0;
    if (ebp != edx)
        goto loc_141eb;
    if (memoryAGet32(ds, 0x59078) != 0x00000000)
        goto loc_141eb;
    if ((int32_t)memoryAGet32(ds, 0x5a56e) >= (int32_t)0x00000008)
        goto loc_141eb;
    eax = 0x00003c00;
loc_141eb: // 0160:141eb
    push32(0x00000140);
    edx = 0x000a0890;
    push32(0x00000140);
    ecx = memoryAGet32(ds, 0x5907c);
    ebx = memoryAGet32(ds, esi + 369434);
    push32(0x00000018);
    edx += ebx;
    ebx = edi;
    push32(0x00000018);
    eax += edx;
    edx = 0x00102cb0;
    sub_170ca();
loc_1421a: // 0160:1421a
    esi += 0x00000014;
    edi += 0x00000018;
    ebp++;
    if ((int32_t)edi < (int32_t)0x00000130)
        goto loc_141b8;
    goto loc_109e4;
}
void sub_1422e() // 0160:1422e +long
{
    esp -= 4;
    goto loc_1422e;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14403 bytes
loc_1422e: // 0160:1422e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x59088) >= (int32_t)0x00000040)
        goto loc_14247;
    memoryASet32(ds, 0x59088, 0x00000040);
loc_14247: // 0160:14247
    if ((int32_t)memoryAGet32(ds, 0x59088) <= (int32_t)0x000004a0)
        goto loc_1425d;
    memoryASet32(ds, 0x59088, 0x000004a0);
loc_1425d: // 0160:1425d
    if ((int32_t)memoryAGet32(ds, 0x5908c) >= (int32_t)0x00000000)
        goto loc_1426e;
    ebp = 0;
    memoryASet32(ds, 0x5908c, ebp);
loc_1426e: // 0160:1426e
    if ((int32_t)memoryAGet32(ds, 0x5908c) <= (int32_t)0x00000048)
        goto loc_14281;
    memoryASet32(ds, 0x5908c, 0x00000048);
loc_14281: // 0160:14281
    eax = memoryAGet32(ds, 0x59088);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x5908c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = memoryAGet32(ds, 0x5907c);
    ebx = 0;
    edi = memoryAGet32(ds, 0x59004);
    memoryASet32(ds, 0x217a80, ebx);
    ecx += eax;
    if (edi)
        goto loc_142e0;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000d);
    edx = 0x00102cb0;
    push32(0x00000010);
    eax = 0x0017fcb0;
    ebx = esi;
    sub_170ca();
loc_142e0: // 0160:142e0
    edx = esi + -16;
    ecx = 0x00000018;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebp = memoryAGet32(ds, 0x59094);
    memoryASet32(ds, 0x59090, eax);
    if (eax != ebp)
        goto loc_1430b;
    if (memoryAGet32(ds, 0x5901c) == 0x00000000)
        goto loc_14397;
loc_1430b: // 0160:1430b
    eax = memoryAGet32(ds, 0x59090);
    edx = memoryAGet32(ds, 0x59080);
    memoryASet32(ds, 0x59094, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x59090);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 369438) != 0x00000000)
        goto loc_14361;
    ebx = memoryAGet32(ds, eax + 369442);
    if (ebx == 0xffffffff)
        goto loc_14361;
    eax = memoryAGet32(ds, eax + 369426);
    memoryASet32(ds, 0x21ad68, ebx);
    memoryASet32(ds, 0x21ad6c, eax);
    sub_18d41();
loc_14361: // 0160:14361
    edx = memoryAGet32(ds, 0x59080);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, 0x59090);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax = memoryAGet32(ds, eax * 4 + 0x5a312);
    ecx = 0xffffffff;
    sub_18e05();
    memoryASet32(ds, 0x217aa4, ecx);
loc_14397: // 0160:14397
    esi = memoryAGet32(ds, 0x5901c);
    if (!esi)
        goto loc_109e4;
    edi = esi + -1;
    memoryASet32(ds, 0x5901c, edi);
    goto loc_109e4;
}
void sub_143b3() // 0160:143b3 +long
{
    esp -= 4;
    goto loc_143b3;
loc_109e5: // 0160:109e5
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14792 bytes
loc_143b3: // 0160:143b3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = memoryAGet32(ds, 0x217a70);
    ebx = memoryAGet32(ds, eax * 4 + 0x5c79a);
    if (!edx)
        goto loc_143e4;
    ecx = edx + -1;
    memoryASet32(ds, 0x217a70, ecx);
loc_143e4: // 0160:143e4
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_109e5;
    if (memoryAGet32(ds, 0x5a2f2) != 0x00000000)
        goto loc_109e5;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    al = (int32_t)eax > (int32_t)0x00000200;
    edx = memoryAGet32(ds, 0x217a8c);
    eax &= 0x000000ff;
    if (!edx)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x217a70) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x59078) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x5a5fc) == 0x00000003)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ae88) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ae80) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ac78) != 0x00000010)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x5cc68) != 0x00000000)
        goto loc_144d2;
    if (ebx != 0x00000003)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ad2c) == 0x00000002)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ad0c) != 0x00000000)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_144d2;
    if (eax)
        goto loc_144d2;
    if (memoryAGet32(ds, 0x21ad18) != 0x00000000)
        goto loc_144d2;
    sub_13e47();
loc_144d2: // 0160:144d2
    if (memoryAGet32(ds, 0x59074) != 0x00000000)
        goto loc_144e4;
    if (memoryAGet32(ds, 0x59078) == 0x00000000)
        goto loc_144e9;
loc_144e4: // 0160:144e4
    sub_1406b();
loc_144e9: // 0160:144e9
    if (memoryAGet32(ds, 0x5907c) != 0x00000084)
        goto loc_109e5;
    sub_1422e();
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_14515;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_14515;
    sub_13f45();
loc_14515: // 0160:14515
    esi = memoryAGet32(ds, 0x21ac60);
    if (esi)
        goto loc_109e5;
    edi = 0x00000002;
    memoryASet32(ds, 0x59074, esi);
    memoryASet32(ds, 0x59078, edi);
    goto loc_109e5;
}
void sub_14539() // 0160:14539 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    edx = memoryAGet32(ds, 0x59010);
    if (edx != 0x00000002)
        goto loc_145a5;
    if (memoryAGet32(ds, 0x59038) == 0x00000000)
        goto loc_14574;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ecx = eax;
    ebx = edx;
    push32(0x0000000d);
    edx = 0x00102cb0;
    eax = 0x0018af80;
    sub_170ca();
loc_14574: // 0160:14574
    if (memoryAGet32(ds, 0x59044) == 0x00000000)
        goto loc_1466f;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000f);
    ebx = 0x00000131;
    edx = 0x00102cb0;
    push32(0x0000000d);
    eax = 0x0018af80;
    ecx = esi;
    goto loc_1466a;
loc_145a5: // 0160:145a5
    if ((int32_t)edx < (int32_t)0x00000003)
        goto loc_1466f;
    if (memoryAGet32(ds, 0x59038) == 0x00000000)
        goto loc_145dc;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    ecx = eax + -1;
    push32(0x00000008);
    edx = 0x00102cb0;
    eax = 0x0018af90;
    sub_170ca();
loc_145dc: // 0160:145dc
    if (memoryAGet32(ds, 0x59050) == 0x00000000)
        goto loc_1460a;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000007;
    edx = 0x00102cb0;
    push32(0x00000008);
    eax = 0x0018af90;
    ecx = esi + 7;
    sub_170ca();
loc_1460a: // 0160:1460a
    if (memoryAGet32(ds, 0x59044) == 0x00000000)
        goto loc_14638;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x00102cb0;
    push32(0x00000008);
    eax = 0x0018af90;
    ecx = esi + -1;
    sub_170ca();
loc_14638: // 0160:14638
    if (memoryAGet32(ds, 0x59010) != 0x00000004)
        goto loc_1466f;
    if (memoryAGet32(ds, 0x5905c) == 0x00000000)
        goto loc_1466f;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ebx = 0x00000131;
    edx = 0x00102cb0;
    push32(0x00000008);
    eax = 0x0018af90;
    ecx = esi + 7;
loc_1466a: // 0160:1466a
    sub_170ca();
loc_1466f: // 0160:1466f
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_14674() // 0160:14674 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if ((int32_t)memoryAGet32(ds, 0x5c998) < (int32_t)0x00000000)
        goto loc_14705;
    if (memoryAGet32(ds, 0x5909c) != 0x00000000)
        goto loc_146db;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x00000049;
    push32(0x00000080);
    edx = 0x00102cb0;
    eax = 0x00183f30;
    sub_170ca();
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x000000c9;
    push32(0x0000002e);
    edx = 0x00102cb0;
    eax = 0x0018ff50;
    goto loc_14700;
loc_146db: // 0160:146db
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x0000000a;
    ebx = 0x0000004c;
    push32(0x000000a8);
    edx = 0x00102cb0;
    eax = 0x0018f4e0;
loc_14700: // 0160:14700
    sub_170ca();
loc_14705: // 0160:14705
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_14709() // 0160:14709 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5a572);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x5a572, edx);
    ebx &= 0x0000003f;
    ecx = memoryAGet32(ds, 0x5cd20);
    memoryASet32(ds, 0x5a572, ebx);
    if (!ecx)
        goto loc_14790;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_14790;
    if (memoryAGet32(ds, 0x59018) != 0x00000000)
        goto loc_14790;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_14769;
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x00102cb0;
    eax = 0x0015a380;
    goto loc_1478b;
loc_14769: // 0160:14769
    push32(0x00000140);
    push32(0x00000140);
    push32(0x00000008);
    ecx = 0x00000020;
    ebx = 0x00000090;
    push32(0x00000020);
    edx = 0x00102cb0;
    eax = 0x0015ad80;
loc_1478b: // 0160:1478b
    sub_170ca();
loc_14790: // 0160:14790
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_14794() // 0160:14794 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    memoryASet32(ds, 0x590c4, 0x00000001);
    sub_16c7f();
    sub_10f02();
    sub_2a154();
    sub_2be2b();
    sub_2b3ba();
    sub_27345();
    sub_2cf20();
    sub_27669();
    sub_273f2();
    sub_275f9();
    sub_2fb6f();
    sub_1e4e5();
    sub_2d90d();
    sub_2a0e2();
    sub_2c26b();
    sub_2c517();
    sub_28b8f();
    sub_2c931();
    sub_17075();
    if (memoryAGet32(ds, 0x21ad88) != 0x00000000)
        goto loc_14820;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_14820;
    if ((int32_t)memoryAGet32(ds, 0x5c998) < (int32_t)0x00000000)
        goto loc_14820;
    sub_10f93();
loc_14820: // 0160:14820
    sub_143b3();
    sub_2eaf4();
    sub_12382();
    if (memoryAGet32(ds, 0x217a90) == 0x00000002)
        goto loc_14875;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_14875;
    if (memoryAGet32(ds, 0x59078) != 0x00000000)
        goto loc_14875;
    eax = memoryAGet32(ds, 0x217ab8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 7;
    edx = 0x0010f230;
    eax += 0x00090290;
    sub_41c83();
loc_14875: // 0160:14875
    if (memoryAGet32(ds, 0x5900c) == 0x00000000)
        goto loc_1488c;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_1488c;
    sub_14674();
loc_1488c: // 0160:1488c
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_148a4;
    edx = 0x00000120;
    eax = 0x0005dad0;
    sub_12079();
loc_148a4: // 0160:148a4
    sub_136ed();
    sub_14709();
    sub_15a7d();
    sub_2416d();
    sub_10f65();
    if (memoryAGet32(ds, 0x5a2f2) == 0x00000000)
        goto loc_148cb;
    sub_1346a();
loc_148cb: // 0160:148cb
    sub_1e7ba();
    if (memoryAGet32(ds, 0x217abc) == 0x00000000)
        goto loc_1494a;
    edx = 0x00102cb0;
    eax = 0x000eab10;
    ebx = 0x000000f0;
    sub_1217f();
    edx = memoryAGet32(ds, 0x217acc);
    eax = 0x001108b0;
    edx += 0x000a3700;
    sub_41af1();
    edx = 0x00102cb0;
    eax = 0x000eaa70;
    ebx = 0x000000f0;
    sub_11bd3();
    edx = memoryAGet32(ds, 0x217acc);
    eax = 0x00111670;
    edx += 0x000a3a70;
    sub_41af1();
    edx = memoryAGet32(ds, 0x217acc);
    eax = 0x00102cb0;
    edx += 0x000a0000;
    sub_4180b();
    sub_15c1b();
    goto loc_14977;
loc_1494a: // 0160:1494a
    edx = 0x000a0000;
    eax = 0x000eab10;
    sub_1217f();
    edx = 0x000a0000;
    eax = 0x000eaa70;
    sub_11bd3();
    edx = 0x000a0000;
    eax = 0x00102cb0;
    sub_414e8();
loc_14977: // 0160:14977
    ebp = 0;
    memoryASet32(ds, 0x590c4, ebp);
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_14afa() // 0160:14afa +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_14afd: // 0160:14afd
    edx++;
    sub_1e625();
    if ((int32_t)edx < (int32_t)0x00000019)
        goto loc_14afd;
    eax = 0;
loc_14b0a: // 0160:14b0a
    eax++;
    dl = 0;
    memoryASet(ds, eax + 2322675, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_14b0a;
    edx = 0;
    memoryASet32(ds, 0x21af04, edx);
    memoryASet32(ds, 0x22313c, edx);
    edx = pop32();
    esp += 4;
}
void sub_14b2a() // 0160:14b2a +long
{
    esp -= 4;
    goto loc_14b2a;
loc_12549: // 0160:12549
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9691 bytes
loc_14b2a: // 0160:14b2a
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x59098) == 0x00000000)
        goto loc_14b6e;
    eax = memoryAGet32(ds, 0x217ac8);
    ebx = memoryAGet32(ds, 0x217ab0);
    ecx = memoryAGet32(ds, 0x59088);
    eax -= ebx;
    esi = memoryAGet32(ds, 0x217ab4);
    ecx += eax;
    eax = memoryAGet32(ds, 0x217ac4);
    edi = memoryAGet32(ds, 0x5908c);
    eax -= esi;
    edi += eax;
    memoryASet32(ds, 0x59088, ecx);
    memoryASet32(ds, 0x5908c, edi);
loc_14b6e: // 0160:14b6e
    if (memoryAGet32(ds, 0x21acd0) == 0x00000000)
        goto loc_12549;
    if (memoryAGet32(ds, 0x21ad88) != 0x00000000)
        goto loc_12549;
    eax = memoryAGet32(ds, 0x217ac8);
    eax -= memoryAGet32(ds, 0x217ab0);
    ebx = memoryAGet32(ds, 0x21acd4);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x217ab4);
    ebx += eax;
    eax = memoryAGet32(ds, 0x217ac4);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x21acd8);
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x21acd4, ebx);
    memoryASet32(ds, 0x21acd8, esi);
    if ((int32_t)ebx >= 0)
        goto loc_14bce;
    ebp = 0;
    memoryASet32(ds, 0x21acd4, ebp);
loc_14bce: // 0160:14bce
    if ((int32_t)memoryAGet32(ds, 0x21acd4) <= (int32_t)0x00000ed4)
        goto loc_14be4;
    memoryASet32(ds, 0x21acd4, 0x00000ed4);
loc_14be4: // 0160:14be4
    if ((int32_t)memoryAGet32(ds, 0x21acd8) >= (int32_t)0x00000020)
        goto loc_14bf7;
    memoryASet32(ds, 0x21acd8, 0x00000020);
loc_14bf7: // 0160:14bf7
    if ((int32_t)memoryAGet32(ds, 0x21acd8) <= (int32_t)0x00000600)
        goto loc_14c0d;
    memoryASet32(ds, 0x21acd8, 0x00000600);
loc_14c0d: // 0160:14c0d
    if (memoryAGet32(ds, 0x21ad64) == 0x00000000)
        goto loc_12549;
    if ((int32_t)memoryAGet32(ds, 0x21acd8) >= (int32_t)0x000000a8)
        goto loc_14c30;
    memoryASet32(ds, 0x21acd8, 0x000000a8);
loc_14c30: // 0160:14c30
    eax = memoryAGet32(ds, 0x21acd4);
    eax -= memoryAGet32(ds, 0x21af14);
    if ((int32_t)eax <= (int32_t)0x00000480)
        goto loc_14c51;
    eax = memoryAGet32(ds, 0x21acd4);
    eax -= 0x00000480;
    memoryASet32(ds, 0x21af14, eax);
loc_14c51: // 0160:14c51
    eax = memoryAGet32(ds, 0x21acd4);
    eax -= memoryAGet32(ds, 0x21af14);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_14c72;
    eax = memoryAGet32(ds, 0x21acd4);
    eax -= 0x00000080;
    memoryASet32(ds, 0x21af14, eax);
loc_14c72: // 0160:14c72
    eax = memoryAGet32(ds, 0x21acd8);
    eax -= memoryAGet32(ds, 0x21af18);
    if ((int32_t)eax <= (int32_t)0x00000220)
        goto loc_14c93;
    eax = memoryAGet32(ds, 0x21acd8);
    eax -= 0x00000220;
    memoryASet32(ds, 0x21af18, eax);
loc_14c93: // 0160:14c93
    eax = memoryAGet32(ds, 0x21acd8);
    eax -= memoryAGet32(ds, 0x21af18);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_12549;
    eax = memoryAGet32(ds, 0x21acd8);
    eax -= 0x00000080;
    memoryASet32(ds, 0x21af18, eax);
    goto loc_12549;
}
void sub_14cbd() // 0160:14cbd +long
{
    esp -= 4;
    goto loc_14cbd;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17106 bytes
loc_14cbd: // 0160:14cbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0x00078000;
    ebp = 0x00032000;
    edx = memoryAGet32(ds, 0x59004);
    esi = 0;
    ecx = 0;
    if (edx)
        goto loc_109e4;
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_109e4;
    eax = memoryAGet32(ds, 0x217ab0);
    eax -= memoryAGet32(ds, 0x217ac8);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000040)
        goto loc_14d1c;
    eax = memoryAGet32(ds, 0x217ab4);
    eax -= memoryAGet32(ds, 0x217ac4);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000040)
        goto loc_14d26;
loc_14d1c: // 0160:14d1c
    memoryASet32(ds, 0x5cac0, 0x00000064);
loc_14d26: // 0160:14d26
    edx = memoryAGet32(ds, 0x5cac0);
    if (!edx)
        goto loc_14d39;
    ebx = edx + -1;
    memoryASet32(ds, 0x5cac0, ebx);
loc_14d39: // 0160:14d39
    if (memoryAGet32(ds, 0x5c6dc) == 0x00000000)
        goto loc_109e4;
    if (memoryAGet32(ds, 0x5cac0) != 0x00000000)
        goto loc_109e4;
    ebx = 0;
loc_14d55: // 0160:14d55
    if (memoryAGet32(ds, ebx + 2201950) != 0x00000000)
        goto loc_14d82;
    eax = memoryAGet32(ds, ebx + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_14d82;
    if (memoryAGet32(ds, ebx + 2201990) != 0x00000000)
        goto loc_14d82;
    if (memoryAGet32(ds, ebx + 2201938) != 0x0000000a)
        goto loc_14d89;
loc_14d82: // 0160:14d82
    eax = 0x00000001;
    goto loc_14d8b;
loc_14d89: // 0160:14d89
    eax = 0;
loc_14d8b: // 0160:14d8b
    edx = memoryAGet32(ds, ebx + 2201958);
    if (!edx)
        goto loc_14dc3;
    if (!eax)
        goto loc_14dc3;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_14d9f;
    edi = edx;
loc_14d9f: // 0160:14d9f
    edx = memoryAGet32(ds, ebx + 2201958);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_14dab;
    esi = edx;
loc_14dab: // 0160:14dab
    eax = memoryAGet32(ds, ebx + 2201962);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_14db7;
    ebp = eax;
loc_14db7: // 0160:14db7
    edx = memoryAGet32(ds, ebx + 2201962);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_14dc3;
    ecx = edx;
loc_14dc3: // 0160:14dc3
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_14d55;
    eax = memoryAGet32(ds, 0x21ab56);
    ebx = 0;
    if (!eax)
        goto loc_14e33;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_14de2;
    edi = eax;
loc_14de2: // 0160:14de2
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 2206550);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_14dfd;
    esi = edx;
loc_14dfd: // 0160:14dfd
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 2206554);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_14e18;
    ebp = edx;
loc_14e18: // 0160:14e18
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 2206554);
    if ((int32_t)ecx >= (int32_t)ebx)
        goto loc_14e33;
    ecx = ebx;
loc_14e33: // 0160:14e33
    ebx = 0;
loc_14e35: // 0160:14e35
    if (memoryAGet32(ds, ebx + 2201070) == 0x00000000)
        goto loc_14ebf;
    eax = memoryAGet32(ds, ebx + 2201086);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (eax & 0xfffffe00)
        goto loc_14e66;
    eax = memoryAGet32(ds, ebx + 2201090);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xfffffe00))
        goto loc_14e6d;
loc_14e66: // 0160:14e66
    eax = 0x00000001;
    goto loc_14e6f;
loc_14e6d: // 0160:14e6d
    eax = 0;
loc_14e6f: // 0160:14e6f
    if (eax)
        goto loc_14e7c;
    if ((int32_t)memoryAGet32(ds, ebx + 2201102) <= (int32_t)0x00000000)
        goto loc_14ebf;
loc_14e7c: // 0160:14e7c
    if (memoryAGet32(ds, ebx + 2201102) != 0x00000000)
        goto loc_14e8f;
    memoryASet32(ds, ebx + 2201102, 0x00000007);
loc_14e8f: // 0160:14e8f
    eax = memoryAGet32(ds, ebx + 2201070);
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_14e9b;
    edi = eax;
loc_14e9b: // 0160:14e9b
    edx = memoryAGet32(ds, ebx + 2201070);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_14ea7;
    esi = edx;
loc_14ea7: // 0160:14ea7
    eax = memoryAGet32(ds, ebx + 2201074);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_14eb3;
    ebp = eax;
loc_14eb3: // 0160:14eb3
    edx = memoryAGet32(ds, ebx + 2201074);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_14ebf;
    ecx = edx;
loc_14ebf: // 0160:14ebf
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_14e35;
    ebx = 0;
loc_14ed0: // 0160:14ed0
    eax = memoryAGet32(ds, ebx + 2200838);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (eax & 0xffffff00)
        goto loc_14ef4;
    eax = memoryAGet32(ds, ebx + 2200842);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!(eax & 0xffffff00))
        goto loc_14efb;
loc_14ef4: // 0160:14ef4
    eax = 0x00000001;
    goto loc_14efd;
loc_14efb: // 0160:14efb
    eax = 0;
loc_14efd: // 0160:14efd
    edx = memoryAGet32(ds, ebx + 2200830);
    if (!edx)
        goto loc_14f35;
    if (!eax)
        goto loc_14f35;
    if ((int32_t)edi <= (int32_t)edx)
        goto loc_14f11;
    edi = edx;
loc_14f11: // 0160:14f11
    edx = memoryAGet32(ds, ebx + 2200830);
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_14f1d;
    esi = edx;
loc_14f1d: // 0160:14f1d
    eax = memoryAGet32(ds, ebx + 2200834);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_14f29;
    ebp = eax;
loc_14f29: // 0160:14f29
    edx = memoryAGet32(ds, ebx + 2200834);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_14f35;
    ecx = edx;
loc_14f35: // 0160:14f35
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_14ed0;
    if ((int32_t)edi > (int32_t)esi)
        goto loc_109e4;
    if ((int32_t)ebp > (int32_t)ecx)
        goto loc_109e4;
    edx = edi + esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    edx = ecx + ebp;
    memoryASet32(ds, 0x21af14, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001a0;
    memoryASet32(ds, 0x21af18, eax);
    goto loc_109e4;
}
void sub_15025() // 0160:15025 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    eax = 0;
loc_15029: // 0160:15029
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_15058;
    if (memoryAGet32(ds, eax + 2202058) != 0x00000000)
        goto loc_15058;
    edx = memoryAGet32(ds, eax + 2202034);
    edx -= memoryAGet32(ds, eax + 2202038);
    if ((int32_t)edx <= 0)
        goto loc_15058;
    edx = memoryAGet32(ds, eax + 2202034);
    edx--;
    memoryASet32(ds, eax + 2202038, edx);
loc_15058: // 0160:15058
    eax += 0x000000ac;
    if (eax != 0x00000ac0)
        goto loc_15029;
    sub_1de56();
    esi = 0;
    sub_11f43();
    memoryASet32(ds, 0x21aef8, esi);
    memoryASet32(ds, 0x59014, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1507f() // 0160:1507f +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_44a0f();
    edx = eax;
    edx &= 0x0000ffff;
    eax <<= 16;
    eax |= edx;
    sub_246eb();
    sub_12b2d();
    edx = pop32();
    esp += 4;
}
void sub_150a0() // 0160:150a0 +long
{
    esp -= 4;
    goto loc_150a0;
loc_109e4: // 0160:109e4
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18101 bytes
loc_150a0: // 0160:150a0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_103d4();
    sub_1507f();
    sub_15a3d();
    sub_38a50();
    edx = memoryAGet32(ds, 0x5c66c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    sub_36a89();
    eax = 0x00000013;
    sub_15cc3();
    eax = 0;
    edx = 0x00000001;
    sub_1e66f();
    sub_15b1f();
    sub_15608();
    sub_1576f();
    sub_13107();
    sub_14afa();
    sub_10ccc();
    sub_13107();
    sub_102f1();
    memoryASet32(ds, 0x58ffc, edx);
    memoryASet32(ds, 0x59000, edx);
    memoryASet32(ds, 0x5900c, edx);
    memoryASet32(ds, 0x217ac0, edx);
    memoryASet32(ds, 0x22313c, edx);
    eax = 0;
    edx = 0x00000028;
    memoryASet32(ds, 0x21af04, eax);
    memoryASet32(ds, 0x58ff4, edx);
loc_15147: // 0160:15147
    eax++;
    dl = 0;
    memoryASet(ds, eax + 2193007, dl);
    memoryASet(ds, eax + 2322675, dl);
    if ((int32_t)eax < (int32_t)0x000002c0)
        goto loc_15147;
    ebx = 0x00217670;
    eax = 0;
    memoryASet32(ds, 0x5c6f8, ebx);
//    sub_1e93a();
    ebx = 0x00000046;
    edx = 0;
loc_15176: // 0160:15176
    sub_1e6f1();
    if (eax)
        goto loc_153b1;
    if (dl == memoryAGet(ds, 0x223070))
        goto loc_15197;
    if (dl != memoryAGet(ds, 0x223065))
        goto loc_153b1;
loc_15197: // 0160:15197
    eax = memoryAGet32(ds, 0x21af04);
loc_1519c: // 0160:1519c
    memoryASet32(ds, 0x22313c, memoryAGet32(ds, 0x22313c)+2);
    sync();
    if (eax == memoryAGet32(ds, 0x22313c))
        goto loc_1519c;
    sub_1356b();
    if (edx == memoryAGet32(ds, 0x58ffc))
        goto loc_151d6;
    edi = 0x00000001;
    eax = 0x00000019;
    memoryASet32(ds, 0x5900c, edi);
    memoryASet32(ds, 0x217a70, eax);
    eax = memoryAGet32(ds, 0x59060);
    memoryASet32(ds, 0x217a8c, edi);
    sub_138c0();
loc_151d6: // 0160:151d6
    eax = memoryAGet32(ds, 0x21af04);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_151ed;
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x21af04, eax);
loc_151ed: // 0160:151ed
    eax = memoryAGet32(ds, 0x21af04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_151ff;
    sub_153e0();
loc_151ff: // 0160:151ff
    eax = memoryAGet32(ds, 0x21af04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_1537b;
    esi = memoryAGet32(ds, 0x5a2f2);
    if (edx != esi)
        goto loc_15361;
    edi = memoryAGet32(ds, 0x59004);
    if (esi != edi)
        goto loc_15361;
    ebp = memoryAGet32(ds, 0x21aefc);
    if (edi == ebp)
        goto loc_1523e;
    eax = ebp + -1;
    memoryASet32(ds, 0x21aefc, eax);
loc_1523e: // 0160:1523e
    if (edx == memoryAGet32(ds, 0x21ac60))
        goto loc_1527a;
    esi = memoryAGet32(ds, 0x21ad88);
    if (edx != esi)
        goto loc_1527a;
    edi = memoryAGet32(ds, 0x21ad74);
    if (esi != edi)
        goto loc_1527a;
    ebp = memoryAGet32(ds, 0x59004);
    if (edi != ebp)
        goto loc_1527a;
    if (ebx == memoryAGet32(ds, 0x5c658))
        goto loc_1527a;
    if (ebp != memoryAGet32(ds, 0x21ae78))
        goto loc_1527a;
    memoryASet32(ds, 0x21ac60, memoryAGet32(ds, 0x21ac60) - 1);
loc_1527a: // 0160:1527a
    if (ebx != memoryAGet32(ds, 0x5c658))
        goto loc_15298;
    if (edx == memoryAGet32(ds, 0x5900c))
        goto loc_15298;
    if (edx != memoryAGet32(ds, 0x59004))
        goto loc_15298;
    memoryASet32(ds, 0x21ac60, memoryAGet32(ds, 0x21ac60) - 1);
loc_15298: // 0160:15298
    esi = memoryAGet32(ds, 0x21ac6c);
    if (edx == esi)
        goto loc_152ab;
    edi = esi + -1;
    memoryASet32(ds, 0x21ac6c, edi);
loc_152ab: // 0160:152ab
    sub_21998();
    sub_26a58();
    sub_16f50();
    sub_349cd();
    sub_14cbd();
    sub_16dd3();
    sub_11a6a();
    if (edx != memoryAGet32(ds, 0x21ac90))
        goto loc_152db;
    sub_1a797();
loc_152db: // 0160:152db
    sub_1df22();
    sub_1b682();
    sub_2bf43();
    sub_2b930();
    sub_10e44();
    sub_29a50();
    sub_2ce07();
    sub_2762f();
    sub_2862c();
    sub_2c6d6();
    sub_2c2e0();
    sub_2d46a();
    sub_13305();
    sub_2e38a();
    sub_30208();
    sub_2f909();
    if (edx != memoryAGet32(ds, 0x21ac90))
        goto loc_15338;
    sub_1336c();
loc_15338: // 0160:15338
    sub_17fad();
    eax = memoryAGet32(ds, 0x59060);
    sub_138c0();
    sub_14b2a();
    ecx = memoryAGet32(ds, 0x217ad0);
    if (edx == ecx)
        goto loc_1536b;
    esi = ecx + -1;
    memoryASet32(ds, 0x217ad0, esi);
    goto loc_1536b;
loc_15361: // 0160:15361
    sub_1336c();
    sub_11a6a();
loc_1536b: // 0160:1536b
    sub_153f9();
    memoryASet32(ds, 0x21af04, memoryAGet32(ds, 0x21af04) + 1);
    goto loc_151ff;
loc_1537b: // 0160:1537b
    if ((int32_t)edx < (int32_t)memoryAGet32(ds, 0x217ad0))
        goto loc_15388;
    sub_10059();
loc_15388: // 0160:15388
    sub_14794();
    if (edx == memoryAGet32(ds, 0x59014))
        goto loc_153a2;
    if (edx != memoryAGet32(ds, 0x59004))
        goto loc_153a2;
    sub_15025();
loc_153a2: // 0160:153a2
    sub_12b95();
    sub_10336();
    goto loc_15176;
loc_153b1: // 0160:153b1
    eax = 0x00000003;
    sub_15cc3();
    sub_157d3();
    sub_15687();
    sub_36b87();
    edx = 0;
    sub_38d80();
    sub_10010();
    sub_38d2f();
    goto loc_109e4;
}
void sub_153e0() // 0160:153e0 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_153e3: // 0160:153e3
    eax++;
    dl = memoryAGet(ds, eax + 2240567);
    memoryASet(ds, eax + 2240311, dl);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_153e3;
    edx = pop32();
    esp += 4;
}
void sub_153f9() // 0160:153f9 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x217ab0);
    memoryASet32(ds, 0x217ac8, eax);
    eax = memoryAGet32(ds, 0x217ab4);
    memoryASet32(ds, 0x217ac4, eax);
    esp += 4;
}
void sub_1540e() // 0160:1540e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, eax);
    ebx = 0;
    bl = memoryAGet(ds, edx);
    edx++;
    edi = ebx;
    ecx = ebx;
    edi >>= 7;
    ecx >>= 5;
    ebx &= 0x0000001f;
    memoryASet32(ds, eax, edx);
    edi &= 0x00000001;
    ecx &= 0x00000003;
loc_1542f: // 0160:1542f
    ecx--;
    if (ecx == 0xffffffff)
        goto loc_15444;
    edx = memoryAGet32(ds, eax);
    ebx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ebx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_1542f;
loc_15444: // 0160:15444
    eax = edi;
    ebx++;
    eax <<= 31;
    eax |= ebx;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15452() // 0160:15452 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, eax);
    ecx = 0;
    cl = memoryAGet(ds, edx);
    ebx = ecx;
    edx++;
    ebx >>= 6;
    ecx &= 0x0000003f;
    memoryASet32(ds, eax, edx);
    ebx &= 0x00000003;
loc_1546a: // 0160:1546a
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_1547f;
    edx = memoryAGet32(ds, eax);
    ecx <<= 8;
    esi = memoryAGet(ds, edx);
    edx++;
    ecx += esi;
    memoryASet32(ds, eax, edx);
    goto loc_1546a;
loc_1547f: // 0160:1547f
    eax = ecx + 1;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15487() // 0160:15487 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    edx = 0;
    ecx = eax + ebx;
    goto loc_154a7;
loc_15494: // 0160:15494
    ebx = edx;
    ebx >>= 31;
    edx += edx;
    ebx &= 0x00000001;
    ebx |= edx;
    edx = 0;
    dl = memoryAGet(ds, eax);
    eax++;
    edx ^= ebx;
loc_154a7: // 0160:154a7
    if (eax < ecx)
        goto loc_15494;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_154b0() // 0160:154b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    esi = edx;
    ebp = memoryAGet32(ds, eax + 4);
    memoryASet(ds, eax + 4, 0x00);
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, eax + 8);
    ebx += 0x0000000c;
    esi = edx + edi;
    memoryASet32(ds, esp, ebx);
loc_154ce: // 0160:154ce
    if (edx >= esi)
        goto loc_15518;
    eax = esp;
    sub_1540e();
    ebx = eax;
    if (!(eax & 0x80000000))
        goto loc_15503;
    eax = esp;
    ecx = edx;
    sub_15452();
    ecx -= eax;
    ebx &= 0x7fffffff;
    eax = ecx;
loc_154f5: // 0160:154f5
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_154ce;
    cl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, cl);
    edx++;
    goto loc_154f5;
loc_15503: // 0160:15503
    if (!eax)
        goto loc_154ce;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx + 1;
    memoryASet32(ds, esp, ecx);
    bl = memoryAGet(ds, ebx);
    eax--;
    memoryASet(ds, edx, bl);
    edx++;
    goto loc_15503;
loc_15518: // 0160:15518
    eax = esi;
    edx = edi;
    eax -= edi;
    sub_15487();
    if (eax == ebp)
        goto loc_15540;
    push32(eax);
    push32(ebp);
    push32(0x0004e3c4);
    sub_44d1e();
    esp += 0x0000000c;
    eax = 0x00000001;
    sub_44d41();
loc_15540: // 0160:15540
    eax = edi;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1554b() // 0160:1554b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = 0x00000036;
    eax = 0x00000043;
    sub_44d6f();
    edx = ebx;
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_44d6f();
    edx = ebx;
    edx = sar32(edx, 0x08);
    eax = 0x00000040;
    edx &= 0x000000ff;
    sub_44d6f();
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15608() // 0160:15608 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    memoryASet32(ds, 0x223150, 0x0000b1c7);
    ebx = 0;
    memoryASet32(ds, 0x223144, ebx);
    memoryASet32(ds, 0x223154, 0x00004111);
    memoryASet32(ds, 0x223148, ebx);
    edi = 0x0001558b;
    memoryASet16(ds, 0x223162, cs);
    memoryASet32(ds, 0x22315e, edi);
    memoryASet32(ds, 0x223140, ebx);
    memoryASet32(ds, 0x22313c, ebx);
    eax = 0x00000008;
    sub_44d97();
    cx = memoryAGet16(ds, 0x223162);
    ebx = memoryAGet32(ds, 0x22315e);
    memoryASet32(ds, 0x223164, eax);
    eax = 0x00000008;
    memoryASet16(ds, 0x223168, dx);
    sub_44dcb();
    eax = 0x000040a2;
    sub_1554b();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15687() // 0160:15687 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000008;
    cx = memoryAGet16(ds, 0x223168);
    ebx = memoryAGet32(ds, 0x223164);
    sub_44dcb();
    eax = 0;
    sub_1554b();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_156aa() // 0160:156aa +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x223138);
    memoryASet32(ds, 0x22314c, eax);
    esp += 4;
}
void sub_156b5() // 0160:156b5 +long
{
    esp -= 4;
    push32(edx);
    al = 0;
    edx = memoryAGet32(ds, 0x223138);
    if (edx == memoryAGet32(ds, 0x22314c))
        goto loc_156d7;
    eax = memoryAGet32(ds, 0x223138);
    memoryASet32(ds, 0x223138, memoryAGet32(ds, 0x223138) + 1);
    al = memoryAGet(ds, eax + 2207528);
loc_156d7: // 0160:156d7
    memoryASet32(ds, 0x223138, memoryAGet32(ds, 0x223138) & 0x0000000f);
    edx = pop32();
    esp += 4;
}
void sub_1576f() // 0160:1576f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x00000100;
    eax = 0x00223038;
    edx = 0;
    sub_44e00();
    edx = 0;
    memoryASet32(ds, 0x22314c, edx);
    memoryASet32(ds, 0x223138, edx);
    ecx = 0x000156e0;
    eax = 0x00000009;
    memoryASet16(ds, 0x22315c, cs);
    memoryASet32(ds, 0x223158, ecx);
    sub_44d97();
    cx = memoryAGet16(ds, 0x22315c);
    ebx = memoryAGet32(ds, 0x223158);
    memoryASet32(ds, 0x22316a, eax);
    eax = 0x00000009;
    memoryASet16(ds, 0x22316e, dx);
    sub_44dcb();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_157d3() // 0160:157d3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    eax = 0x00000009;
    cx = memoryAGet16(ds, 0x22316e);
    ebx = memoryAGet32(ds, 0x22316a);
    sub_44dcb();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_157ef() // 0160:157ef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x0004e3ed;
    sub_4503a();
    ecx = eax;
    if (eax)
        goto loc_1581c;
    push32(ebx);
    push32(0x0004e3f0);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_1581c: // 0160:1581c
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_45112();
    eax = ecx;
    sub_4520e();
    ebx = eax;
    eax = ecx;
    sub_4523e();
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15840() // 0160:15840 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    sub_157ef();
    edx = 0x0004e3ed;
    memoryASet32(ds, esp + 8, eax);
    eax = ebx;
    sub_4503a();
    esi = eax;
    if (eax)
        goto loc_1587c;
    push32(ebx);
    push32(0x0004e407);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_1587c: // 0160:1587c
    eax = esi;
    ebx = 0;
    edx = 0;
    sub_45112();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp;
    sub_45380();
    ah = 0;
    edx = 0x0004e41e;
    memoryASet(ds, esp + 4, ah);
    eax = esp;
    sub_4554a();
    if (eax)
        goto loc_158d3;
    edx = 0x00000008;
    eax = esi;
    ebx = 0;
    sub_45112();
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = esp + 8;
    sub_45380();
loc_158d3: // 0160:158d3
    eax = esi;
    sub_4523e();
    eax = memoryAGet32(ds, esp + 8);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_158e6() // 0160:158e6 +long
{
    esp -= 4;
    goto loc_158e6;
loc_15545: // 0160:15545
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 923 bytes
loc_158e6: // 0160:158e6
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edi = edx;
    sub_15840();
    ebp = eax;
    eax = ebx;
    sub_157ef();
    esi = eax;
    if (ebp != eax)
        goto loc_15948;
    edx = 0x0004e3ed;
    eax = ebx;
    sub_4503a();
    ebp = eax;
    if (eax)
        goto loc_1592d;
    push32(ebx);
    push32(0x0004e423);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_1592d: // 0160:1592d
    ebx = 0x00000001;
    ecx = ebp;
    edx = esi;
    eax = edi;
    sub_45380();
    esi = eax;
    eax = ebp;
    sub_4523e();
    goto loc_159ba;
loc_15948: // 0160:15948
    edx = 0x0004e3ed;
    eax = ebx;
    sub_4503a();
    ebp = eax;
    if (eax)
        goto loc_15972;
    push32(ebx);
    push32(0x0004e423);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_15972: // 0160:15972
    if (esi <= 0x00008000)
        goto loc_15992;
    push32(ebx);
    push32(0x0004e43a);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_15992: // 0160:15992
    ebx = 0x00000001;
    eax = 0x0021af38;
    ecx = ebp;
    edx = esi;
    sub_45380();
    esi = eax;
    eax = ebp;
    edx = edi;
    sub_4523e();
    eax = 0x0021af38;
    sub_154b0();
loc_159ba: // 0160:159ba
    eax = esi;
    goto loc_15545;
}
void sub_159c1() // 0160:159c1 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    edi = edx;
    ebp = ebx;
    edx = 0x0004e45b;
    sub_4503a();
    esi = eax;
    if (eax)
        goto loc_159f3;
    push32(ecx);
    push32(0x0004e45e);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_159f3: // 0160:159f3
    ebx = 0x00000001;
    ecx = esi;
    edx = ebp;
    eax = edi;
    sub_45583();
    ecx = eax;
    eax = esi;
    sub_4523e();
    eax = ecx;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_15a13() // 0160:15a13 +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    ebx = 0x00000004;
    memoryASet16(ds, esp + 8, ax);
    memoryASet16(ds, esp + 12, dx);
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, bx);
    ebx = esp;
    sub_4576a();
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_15a3d() // 0160:15a3d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    edx = 0;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_4576a();
    edx = 0;
    dx = memoryAGet16(ds, esp);
    if (edx)
        goto loc_15a77;
    push32(0x0004e470);
    sub_44d1e();
    esp += 0x00000004;
    eax = 0x00000002;
    sub_44d41();
loc_15a77: // 0160:15a77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_15a7d() // 0160:15a7d +long
{
    esp -= 4;
    goto loc_15a7d;
loc_15a77: // 0160:15a77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_15a7d: // 0160:15a7d
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000003;
    ebx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, dx);
    edx = esp;
    sub_4576a();
    eax = memoryAGet32(ds, 0x217ac8);
    memoryASet32(ds, 0x217ab0, eax);
    eax = memoryAGet32(ds, 0x217ac4);
    memoryASet32(ds, 0x217ab4, eax);
    eax = memoryAGet32(ds, 0x217ac0);
    memoryASet32(ds, 0x217a94, eax);
    eax = memoryAGet32(ds, 0x217a8c);
    memoryASet32(ds, 0x217aac, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 8);
    memoryASet32(ds, 0x217ac8, eax);
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    memoryASet32(ds, 0x217ac4, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x01;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x217ac0, eax);
    eax = memoryAGet32(ds, esp + 4);
    ah = 0;
    al &= 0x02;
    eax &= 0x0000ffff;
    edx = 0x00000200;
    memoryASet32(ds, 0x217a8c, eax);
    eax = edx;
    sub_15a13();
    edx = 0x00000200;
    memoryASet32(ds, 0x217ab0, edx);
    memoryASet32(ds, 0x217ab4, edx);
    goto loc_15a77;
}
void sub_15b1f() // 0160:15b1f +long
{
    esp -= 4;
loc_15b1f: // 0160:15b1f
    eax = 0x000003da;
    sub_45785();
    if (!(al & 0x08))
        goto loc_15b1f;
    esp += 4;
}
void sub_15b2e() // 0160:15b2e +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000005;
    eax = 0x000003ce;
    sub_44d6f();
    eax = 0x000003cf;
    sub_45785();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000ef;
    sub_44d6f();
    edx = 0x00000006;
    eax = 0x000003ce;
    sub_44d6f();
    eax = 0x000003cf;
    sub_45785();
    edx = eax;
    eax = 0x000003cf;
    edx &= 0x000000fd;
    sub_44d6f();
    edx = 0x00000004;
    eax = 0x000003c4;
    sub_44d6f();
    eax = 0x000003c5;
    sub_45785();
    eax &= 0x000000f7;
    al |= 0x04;
    edx = eax;
    eax = 0x000003c5;
    sub_44d6f();
    edx = 0x00000014;
    eax = 0x000003d4;
    sub_44d6f();
    eax = 0x000003d5;
    sub_45785();
    edx = eax;
    eax = 0x000003d5;
    edx &= 0x000000bf;
    sub_44d6f();
    edx = 0x00000017;
    eax = 0x000003d4;
    sub_44d6f();
    eax = 0x000003d5;
    sub_45785();
    al |= 0x40;
    edx = eax;
    eax = 0x000003d5;
    sub_44d6f();
    eax = 0;
loc_15c05: // 0160:15c05
    eax += 0x00000004;
    memoryASet32(ds, eax + 655356, 0x00000000);
    if ((int32_t)eax < (int32_t)0x0000fa00)
        goto loc_15c05;
    edx = pop32();
    esp += 4;
}
void sub_15c1b() // 0160:15c1b +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x217acc);
    eax = 0x000003d4;
    edx += 0x0000000c;
    sub_4578d();
    edx = memoryAGet32(ds, 0x217acc);
    edx += 0x00004000;
    edx &= 0x0000ffff;
    memoryASet32(ds, 0x217acc, edx);
    edx = pop32();
    esp += 4;
}
void sub_15c49() // 0160:15c49 +long
{
    esp -= 4;
    goto loc_15c49;
loc_1544c: // 0160:1544c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2039 bytes
loc_15c49: // 0160:15c49
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000001c;
    edx = 0x0000001c;
    ebx = 0x00000004;
    eax = 0x00000033;
    ecx = 0x00000007;
    edi = 0x00000400;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    esi = 0;
    sub_4576a();
    ebx = esp;
    edx = esp;
    eax = 0x00000033;
    memoryASet16(ds, esp, cx);
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp + 12, di);
    sub_4576a();
    eax = 0x00000008;
    ebx = esp;
    edx = esp;
    memoryASet16(ds, esp + 8, si);
    memoryASet16(ds, esp, ax);
    eax = 0x00000033;
    memoryASet16(ds, esp + 12, di);
    sub_4576a();
    esp += 0x0000001c;
    goto loc_1544c;
}
void sub_15cc3() // 0160:15cc3 +long
{
    esp -= 4;
    goto loc_15cc3;
loc_15a77: // 0160:15a77
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 582 bytes
loc_15cc3: // 0160:15cc3
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    ebx = esp;
    ah = 0;
    edx = esp;
    memoryASet(ds, esp + 1, ah);
    memoryASet(ds, esp, al);
    eax = 0x00000010;
    sub_4576a();
    goto loc_15a77;
}
void sub_15d7f() // 0160:15d7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000060;
    push32(eax);
    ebx = edx;
    edx = 0x000003c0;
    ecx = 0x00000144;
    edi = 0x00000140;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 52, edx);
    memoryASet32(ds, esp + 12, ecx);
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 56, edi);
    memoryASet32(ds, esp + 88, ebp);
    ecx = 0x00000003;
    eax = memoryAGet32(ds, 0x22313c);
    edx = memoryAGet32(ds, 0x22313c);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax &= 0x00000007;
    edx = ebx;
    memoryASet32(ds, esp + 76, eax);
    eax = edx;
    eax <<= 4;
    edi = 0x00191270;
    eax -= edx;
    ecx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    edi += eax;
    eax = ebx;
    idiv32(ecx);
    edx = eax;
    eax <<= 2;
    ebp = 0x00102cb0;
    eax += edx;
    esi = 0x00000178;
    eax <<= 4;
    esi -= ebx;
    eax += edx;
    edx = 0x001eee70;
    eax <<= 2;
    esi -= 0x00000018;
    edx += eax;
    ecx = 0x00205868;
    memoryASet32(ds, esp + 16, edx);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_15e28;
    esi = 0x000000a8;
loc_15e28: // 0160:15e28
    eax = memoryAGet32(ds, esp);
    edx = eax;
    ebx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 4);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 24);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    edx = memoryAGet32(ds, esp + 80);
    push32(edx);
    push32(ebp);
    push32(ecx);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    push32(edi);
    sub_3a930();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    eax = memoryAGet32(ds, esp + 12);
    eax = (int32_t)eax * (int32_t)esi;
    ecx = memoryAGet32(ds, esp + 16);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 56);
    eax = (int32_t)eax * (int32_t)esi;
    ebp += eax;
    eax = 0x000000a8;
    eax -= esi;
    edx = memoryAGet32(ds, esp);
    esi = eax;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x000eb970;
    edx += eax;
    eax = memoryAGet32(ds, esp + 76);
    eax += 0x00000002;
    memoryASet32(ds, esp + 16, ecx);
    eax &= 0x00000007;
    memoryASet32(ds, esp + 68, edx);
    memoryASet32(ds, esp + 76, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_15ef5;
    eax = 0x00000008;
    goto loc_15ef7;
loc_15ef5: // 0160:15ef5
    eax = esi;
loc_15ef7: // 0160:15ef7
    edx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x00000001);
    push32(edx);
    edx = memoryAGet32(ds, esp + 100);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 32);
    push32(eax);
    edx = memoryAGet32(ds, esp + 112);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 52);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_3a930();
    esp += 0x00000030;
    edx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 56);
    edx <<= 3;
    eax <<= 3;
    memoryASet32(ds, esp + 32, edx);
    memoryASet32(ds, esp + 20, eax);
    edi += edx;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = 0x00004a40;
    eax <<= 3;
    memoryASet32(ds, esp + 84, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ebx = edx * 0x00000000;
    eax <<= 3;
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    ebx += eax;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_1602e;
loc_15f8f: // 0160:15f8f
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 96, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax += ebx;
    memoryASet32(ds, esp + 76, ecx);
    memoryASet32(ds, esp + 68, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_15fcd;
    edx = 0x00000008;
    goto loc_15fcf;
loc_15fcd: // 0160:15fcd
    edx = esi;
loc_15fcf: // 0160:15fcf
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 100);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 8);
    push32(ebx);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 80);
    push32(ebx);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 84);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 108);
    push32(eax);
    push32(edi);
    sub_3a930();
    esp += 0x00000030;
    esi -= 0x00000008;
    edx = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 84);
    eax = memoryAGet32(ds, esp + 24);
    ecx += 0x00004a40;
    edi += edx;
    edx = memoryAGet32(ds, esp + 64);
    ebp += ebx;
    edx += eax;
    memoryASet32(ds, esp + 84, ecx);
    memoryASet32(ds, esp + 64, edx);
loc_1602e: // 0160:1602e
    ebx = memoryAGet32(ds, esp + 76) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 76);
    edx = memoryAGet32(ds, esp + 28);
    ecx += 0x00000002;
    eax = memoryAGet32(ds, esp + 68);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 84);
    ebx += 0x000eb970;
    if (edx != 0x0000dec0)
        goto loc_15f8f;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 96);
    edx <<= 8;
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 72, ecx);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 80, ebx);
    memoryASet32(ds, esp + 96, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_160a0;
    eax = 0x00000008;
    goto loc_160a2;
loc_160a0: // 0160:160a0
    eax = esi;
loc_160a2: // 0160:160a2
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 104);
    push32(edx);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 76);
    push32(eax);
    push32(ecx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 44);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    sub_3a930();
    esp += 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    eax <<= 3;
    edi += eax;
    eax = memoryAGet32(ds, esp + 56);
    eax <<= 3;
    ebp += eax;
    eax = memoryAGet32(ds, esp + 88);
    edx = memoryAGet32(ds, esp + 80);
    eax <<= 3;
    edx += eax;
    eax = memoryAGet32(ds, esp + 96);
    memoryASet32(ds, esp + 8, edx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 92, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x000eb970;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 80, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax += 0x00000002;
    eax &= 0x00000007;
    esi -= 0x00000008;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_16167;
    eax = 0x00000008;
    goto loc_16169;
loc_16167: // 0160:16167
    eax = esi;
loc_16169: // 0160:16169
    edx = memoryAGet32(ds, esp);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 96);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 104);
    push32(ecx);
    push32(eax);
    eax = memoryAGet32(ds, esp + 72);
    push32(eax);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 112);
    push32(ebx);
    push32(ebx);
    push32(ebp);
    push32(edi);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    edx = memoryAGet32(ds, esp + 124);
    push32(edx);
    esi -= 0x00000008;
    sub_3a930();
    esp += 0x00000030;
    ebx = 0x00000030;
    eax = memoryAGet32(ds, esp + 52);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 60, ebx);
    eax <<= 3;
    edx <<= 3;
    memoryASet32(ds, esp + 44, eax);
    edi += eax;
    eax = memoryAGet32(ds, esp + 88);
    memoryASet32(ds, esp + 40, edx);
    eax <<= 3;
    ebp += edx;
    memoryASet32(ds, esp + 36, eax);
loc_161cd: // 0160:161cd
    if ((int32_t)esi <= 0)
        goto loc_16285;
    ebx = memoryAGet32(ds, esp + 80);
    ecx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, esp + 96);
    ebx += ecx;
    ecx = memoryAGet32(ds, esp + 92);
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 60);
    edx = eax + 24;
    memoryASet32(ds, esp + 60, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 96, eax);
    eax = edx * 0x00000948;
    eax += 0x000eb970;
    eax += 0x00012900;
    memoryASet32(ds, esp + 80, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 72, eax);
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_16243;
    edx = 0x00000008;
    goto loc_16245;
loc_16243: // 0160:16243
    edx = esi;
loc_16245: // 0160:16245
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 96);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 104);
    push32(eax);
    push32(edx);
    edx = memoryAGet32(ds, esp + 72);
    push32(edx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 112);
    push32(eax);
    push32(eax);
    push32(ebp);
    push32(edi);
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 124);
    push32(ebx);
    sub_3a930();
    esp += 0x00000030;
    esi -= 0x00000008;
    ecx = memoryAGet32(ds, esp + 44);
    eax = memoryAGet32(ds, esp + 40);
    edi += ecx;
    ebp += eax;
    goto loc_161cd;
loc_16285: // 0160:16285
    esp += 0x00000064;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1628e() // 0160:1628e +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000090;
    push32(eax);
    ecx = edx;
    memoryASet32(ds, esp + 80, ebx);
    edx = 0x000003c0;
    ebx = 0x00000144;
    ebp = 0x00000084;
    memoryASet32(ds, esp + 96, edx);
    memoryASet32(ds, esp + 44, ebx);
    edx = ecx;
    memoryASet32(ds, esp + 12, ebx);
    eax = edx;
    memoryASet32(ds, esp + 124, ebp);
    eax <<= 4;
    ebp = 0x00191270;
    eax -= edx;
    ebx = 0x00000006;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebp += eax;
    eax = ecx;
    idiv32(ebx);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 4;
    eax += edx;
    edx = 0x001eee70;
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, esp + 16, 0x00205868);
    eax = 0x00000178;
    eax -= ecx;
    eax -= 0x00000018;
    memoryASet32(ds, esp + 48, eax);
    eax <<= 16;
    memoryASet32(ds, esp + 64, edx);
    edx = eax;
    ebx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, esp + 128, 0x00000140);
    edi = 0x00102cb0;
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_16339;
    esi = 0x000000a8;
loc_16339: // 0160:16339
    eax = memoryAGet32(ds, 0x21af08);
    eax = (int32_t)eax * (int32_t)esi;
    ebx = 0x00000009;
    edx = ecx;
    eax = sar32(eax, 0x10);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 144, eax);
    eax = ecx;
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 144);
    ebx = eax;
    ecx += eax;
    memoryASet32(ds, esp + 144, 0x00000003);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 144));
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, eax);
    if ((int32_t)ecx >= (int32_t)0x000000c8)
        goto loc_1640a;
    edx = memoryAGet32(ds, esp + 20);
    push32(edx);
    push32(eax);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    push32(eax);
    push32(esi);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 128);
    push32(eax);
    push32(edi);
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 108);
    push32(ebx);
    push32(ebp);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    edx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)edx;
    ebx = memoryAGet32(ds, esp + 64);
    ebx += eax;
    eax = memoryAGet32(ds, esp + 128);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ebx);
    goto loc_1652d;
loc_1640a: // 0160:1640a
    eax = 0x000000c8;
    eax -= ebx;
    memoryASet32(ds, esp + 4, eax);
    eax <<= 16;
    edx = eax;
    ebx = memoryAGet32(ds, 0x21af08);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 24);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 36);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 72);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 128);
    push32(ecx);
    push32(edi);
    eax = memoryAGet32(ds, esp + 56);
    push32(eax);
    edx = memoryAGet32(ds, esp + 108);
    push32(edx);
    push32(ebp);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 4);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    ecx = memoryAGet32(ds, esp + 44);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 4);
    eax = (int32_t)eax * (int32_t)ecx;
    edx = memoryAGet32(ds, esp + 64);
    ebx = memoryAGet32(ds, esp + 128);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    eax = (int32_t)eax * (int32_t)ebx;
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esp + 64, edx);
    esi -= ecx;
    edx = memoryAGet32(ds, esp + 48);
    ecx = memoryAGet32(ds, esp + 20);
    edi += eax;
    eax = memoryAGet32(ds, esp + 4);
    push32(ecx);
    edx -= eax;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, esp + 52, edx);
    push32(eax);
    edx = memoryAGet32(ds, esp + 8);
    ebx = 0;
    push32(edx);
    memoryASet32(ds, esp + 56, ebx);
    ebx = memoryAGet32(ds, esp + 92);
    push32(ebx);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 56);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 108);
    push32(ecx);
    push32(ebp);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 96);
    ebx = memoryAGet32(ds, esp + 48);
    ebp += eax;
    eax = ebx * 0x00000000;
    ecx = memoryAGet32(ds, esp + 64);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 128);
    eax = (int32_t)eax * (int32_t)esi;
    edi += eax;
    esi += memoryAGet32(ds, esp + 8);
    eax = 0x000000a8;
    eax -= esi;
    memoryASet32(ds, esp + 64, ecx);
loc_1652d: // 0160:1652d
    esi = eax;
    eax = 0x00080000;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 80);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 140, eax);
    eax = memoryAGet32(ds, 0x22313c);
    eax = sar32(eax, 0x02);
    eax &= 0x00000007;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 104, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 3;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 104);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    edx = 0x000eb970;
    edx += eax;
    eax = memoryAGet32(ds, esp + 104);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 104, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 92, edx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_165bd;
    memoryASet32(ds, esp + 40, eax);
    goto loc_165c1;
loc_165bd: // 0160:165bd
    memoryASet32(ds, esp + 40, esi);
loc_165c1: // 0160:165c1
    eax = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x00000001);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 140);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 8);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 92);
    edx = memoryAGet32(ds, esp + 152);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 56);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 68);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 152);
    push32(eax);
    edx = memoryAGet32(ds, esp + 128);
    push32(edx);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 104);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    push32(ebp);
    sub_3d354();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 56, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    eax <<= 3;
    edi += edx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 72, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 68, eax);
    eax = edx;
    edx = edx * 0x00000000;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 4;
    ecx = 0x00004a40;
    goto loc_16741;
loc_16670: // 0160:16670
    memoryASet32(ds, esp + 76, eax);
    eax = memoryAGet32(ds, esp + 136);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    memoryASet32(ds, esp + 136, eax);
    eax = memoryAGet32(ds, esp + 120);
    eax += ebx;
    memoryASet32(ds, esp + 92, eax);
    eax = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 104, ecx);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_166bc;
    memoryASet32(ds, esp + 112, eax);
    goto loc_166c0;
loc_166bc: // 0160:166bc
    memoryASet32(ds, esp + 112, esi);
loc_166c0: // 0160:166c0
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 140);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    push32(eax);
    ebx = memoryAGet32(ds, esp + 128);
    push32(ebx);
    push32(edi);
    ecx = memoryAGet32(ds, esp + 116);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 136);
    push32(eax);
    push32(ebp);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 112);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 128);
    edx = memoryAGet32(ds, esp + 56);
    ecx = memoryAGet32(ds, esp + 120);
    ebp += edx;
    edx = memoryAGet32(ds, esp + 84);
    edi += eax;
    eax = memoryAGet32(ds, esp + 68);
    ecx += 0x00004a40;
loc_16741: // 0160:16741
    edx += eax;
    memoryASet32(ds, esp + 120, ecx);
    memoryASet32(ds, esp + 84, edx);
    ebx = memoryAGet32(ds, esp + 104) * 0x00000948;
    ecx = memoryAGet32(ds, esp + 104);
    eax = memoryAGet32(ds, esp + 92);
    ecx += 0x00000002;
    edx = memoryAGet32(ds, esp + 72);
    ecx &= 0x00000007;
    eax += edx;
    edx = memoryAGet32(ds, esp + 120);
    ebx += 0x000eb970;
    if (edx != 0x0000dec0)
        goto loc_16670;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebx += 0x0000dec0;
    memoryASet32(ds, esp + 100, ecx);
    memoryASet32(ds, esp + 108, ebx);
    eax &= 0x0000007f;
    ebx = memoryAGet32(ds, esp + 140);
    memoryASet32(ds, esp + 136, eax);
    if ((int32_t)esi < (int32_t)ebx)
        goto loc_167cb;
    memoryASet32(ds, esp + 36, ebx);
    goto loc_167cf;
loc_167cb: // 0160:167cb
    memoryASet32(ds, esp + 36, esi);
loc_167cf: // 0160:167cf
    eax = memoryAGet32(ds, esp + 132);
    push32(eax);
    edx = memoryAGet32(ds, esp + 4);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 144);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    esi -= ecx;
    ecx = memoryAGet32(ds, esp + 92);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 52);
    push32(eax);
    edx = memoryAGet32(ds, esp + 148);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 148);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 124);
    push32(ecx);
    push32(ebx);
    push32(edi);
    edx = memoryAGet32(ds, esp + 68);
    push32(edx);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 156);
    push32(ebx);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    ecx = memoryAGet32(ds, esp + 128);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 36);
    eax = (int32_t)eax * (int32_t)ecx;
    edi += eax;
    eax = memoryAGet32(ds, esp + 124);
    edx = memoryAGet32(ds, esp + 108);
    eax <<= 3;
    edx += eax;
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 136);
    edx <<= 8;
    memoryASet32(ds, esp + 132, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    edx = eax;
    eax <<= 5;
    eax += edx;
    eax += 0x000eb970;
    eax += 0x0000dec0;
    memoryASet32(ds, esp + 108, eax);
    eax = memoryAGet32(ds, esp + 100);
    eax += 0x00000002;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_168bb;
    memoryASet32(ds, esp + 32, eax);
    goto loc_168bf;
loc_168bb: // 0160:168bb
    memoryASet32(ds, esp + 32, esi);
loc_168bf: // 0160:168bf
    ebx = memoryAGet32(ds, esp);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 136);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 48);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 148);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 120);
    push32(eax);
    edx = memoryAGet32(ds, esp + 152);
    push32(edx);
    push32(edx);
    push32(edi);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 72);
    push32(ecx);
    eax = memoryAGet32(ds, esp + 156);
    push32(eax);
    sub_3d354();
    esp += 0x00000034;
    edx = memoryAGet32(ds, esp + 32);
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, esp + 128);
    eax = memoryAGet32(ds, esp + 96);
    eax <<= 3;
    memoryASet32(ds, esp + 60, eax);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 124);
    ecx = 0x00000030;
    eax <<= 3;
    memoryASet32(ds, esp + 88, ecx);
    memoryASet32(ds, esp + 52, eax);
    edi += edx;
loc_16942: // 0160:16942
    if ((int32_t)esi <= 0)
        goto loc_16a34;
    ecx = memoryAGet32(ds, esp + 108);
    ebx = memoryAGet32(ds, esp + 52);
    eax = memoryAGet32(ds, esp + 136);
    ecx += ebx;
    ebx = memoryAGet32(ds, esp + 132);
    memoryASet32(ds, esp + 132, eax);
    eax = memoryAGet32(ds, esp + 88);
    edx = eax + 24;
    memoryASet32(ds, esp + 88, edx);
    eax += 0x00000100;
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax &= 0x0000007f;
    edx = memoryAGet32(ds, esp + 100);
    memoryASet32(ds, esp + 136, eax);
    eax = edx * 0x00000948;
    eax += 0x000eb970;
    eax += 0x00012900;
    memoryASet32(ds, esp + 108, eax);
    eax = edx + 2;
    eax &= 0x00000007;
    memoryASet32(ds, esp + 100, eax);
    eax = memoryAGet32(ds, esp + 140);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_169c9;
    memoryASet32(ds, esp + 116, eax);
    goto loc_169cd;
loc_169c9: // 0160:169c9
    memoryASet32(ds, esp + 116, esi);
loc_169cd: // 0160:169cd
    push32(ebx);
    ebx = memoryAGet32(ds, esp + 136);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 144);
    edx = memoryAGet32(ds, esp + 148);
    push32(eax);
    esi -= edx;
    edx = memoryAGet32(ds, esp + 92);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 132);
    push32(ebx);
    eax = memoryAGet32(ds, esp + 148);
    push32(eax);
    edx = memoryAGet32(ds, esp + 120);
    push32(edx);
    ebx = memoryAGet32(ds, esp + 152);
    push32(ebx);
    push32(ebx);
    push32(edi);
    push32(ebp);
    push32(ecx);
    edx = memoryAGet32(ds, esp + 156);
    push32(edx);
    sub_3d354();
    esp += 0x00000034;
    eax = memoryAGet32(ds, esp + 116);
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, esp + 128);
    ebp += memoryAGet32(ds, esp + 60);
    edi += eax;
    goto loc_16942;
loc_16a34: // 0160:16a34
    esp += 0x00000094;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_16a3f() // 0160:16a3f +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    esi = memoryAGet32(ds, esp + 28);
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, 0x21af0c);
    eax = memoryAGet32(ds, 0x21af10);
    ebx -= edx;
    edx = memoryAGet32(ds, 0x21af08);
    ecx -= eax;
    if (edx != 0x00010000)
        goto loc_16b46;
    if ((int32_t)ebx <= 0)
        goto loc_16ab2;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_16ab2;
    if ((int32_t)ecx <= 0)
        goto loc_16ab2;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_16ab2;
    edx = memoryAGet32(ds, esp + 4);
    edx += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebx += ecx;
    eax = ebp;
    ebx <<= 6;
    ecx = esi;
    edx += ebx;
    ebx = edi;
loc_16aa8: // 0160:16aa8
    sub_41bd6();
    goto loc_16c76;
loc_16ab2: // 0160:16ab2
    eax = ebx + edi;
    if ((int32_t)eax <= 0)
        goto loc_16c76;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_16c76;
    edx = ecx + esi;
    if ((int32_t)edx <= 0)
        goto loc_16c76;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_16c76;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_16aee;
    eax -= 0x00000140;
    edi -= eax;
loc_16aee: // 0160:16aee
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_16aff;
    eax -= 0x000000a8;
    esi -= eax;
loc_16aff: // 0160:16aff
    if ((int32_t)ebx >= 0)
        goto loc_16b0d;
    eax = ebx;
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_16b0d: // 0160:16b0d
    if ((int32_t)ecx >= 0)
        goto loc_16b29;
    eax = ecx;
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_16b29: // 0160:16b29
    eax = ecx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += ebx;
    eax += ecx;
    ebx = edi;
    eax <<= 6;
    ecx = esi;
    edx += eax;
    eax = ebp;
    goto loc_16aa8;
loc_16b46: // 0160:16b46
    edx = ebx;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = ecx;
    ebx = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = edi;
    ecx = eax;
    edx <<= 16;
    edi = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx = esi;
    edi = eax;
    edx <<= 16;
    esi = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    if ((int32_t)ebx <= 0)
        goto loc_16bc9;
    eax = ebx + edi;
    if ((int32_t)eax >= (int32_t)0x00000140)
        goto loc_16bc9;
    if ((int32_t)ecx <= 0)
        goto loc_16bc9;
    eax = ecx + esi;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_16bc9;
    eax = memoryAGet32(ds, esp + 4);
    eax += ebx;
    ebx = ecx;
    edx = memoryAGet32(ds, 0x21af08);
    ebx <<= 2;
    push32(edx);
    goto loc_16c63;
loc_16bc9: // 0160:16bc9
    eax = ebx + edi;
    if ((int32_t)eax <= 0)
        goto loc_16c76;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_16c76;
    edx = ecx + esi;
    if ((int32_t)edx <= 0)
        goto loc_16c76;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_16c76;
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_16c05;
    eax -= 0x00000140;
    edi -= eax;
loc_16c05: // 0160:16c05
    eax = ecx + esi;
    if ((int32_t)eax <= (int32_t)0x000000a8)
        goto loc_16c16;
    eax -= 0x000000a8;
    esi -= eax;
loc_16c16: // 0160:16c16
    if ((int32_t)ebx >= 0)
        goto loc_16c2d;
    eax = memoryAGet32(ds, 0x21af08);
    eax = (int32_t)eax * (int32_t)ebx;
    eax = sar32(eax, 0x10);
    edi += ebx;
    eax = -eax;
    ebx = 0;
    ebp += eax;
loc_16c2d: // 0160:16c2d
    if ((int32_t)ecx >= 0)
        goto loc_16c52;
    eax = memoryAGet32(ds, 0x21af08);
    eax = (int32_t)eax * (int32_t)ecx;
    eax = sar32(eax, 0x10);
    eax = -eax;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    eax += edx;
    esi += ecx;
    eax <<= 6;
    ecx = 0;
    ebp += eax;
loc_16c52: // 0160:16c52
    eax = memoryAGet32(ds, 0x21af08);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    eax += ebx;
    ebx = ecx;
    ebx <<= 2;
loc_16c63: // 0160:16c63
    ebx += ecx;
    push32(esi);
    ebx <<= 6;
    push32(edi);
    eax += ebx;
    push32(eax);
    push32(ebp);
    sub_41c05();
    esp += 0x00000014;
loc_16c76: // 0160:16c76
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_16c7f() // 0160:16c7f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if ((int32_t)memoryAGet32(ds, 0x21af08) >= (int32_t)0x00000001)
        goto loc_16c97;
    memoryASet32(ds, 0x21af08, 0x00000001);
loc_16c97: // 0160:16c97
    if ((int32_t)memoryAGet32(ds, 0x21af08) <= (int32_t)0x00020000)
        goto loc_16cad;
    memoryASet32(ds, 0x21af08, 0x00020000);
loc_16cad: // 0160:16cad
    eax = memoryAGet32(ds, 0x21af1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad58);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx += eax;
    eax = memoryAGet32(ds, 0x21af20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ad54);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebx + eax;
    esi = edx + 84;
    edx = memoryAGet32(ds, 0x21af08);
    ebx = ecx + 160;
    eax = edx;
    ecx = edx;
    eax <<= 2;
    ecx <<= 2;
    eax += edx;
    ecx += edx;
    eax <<= 2;
    ecx <<= 5;
    eax += edx;
    ecx = sar32(ecx, 0x10);
    eax <<= 2;
    edx = esi;
    ebx -= ecx;
    eax = sar32(eax, 0x10);
    ecx = ebx;
    edx -= eax;
    if ((int32_t)ebx >= 0)
        goto loc_16d3a;
    ecx ^= ebx;
loc_16d3a: // 0160:16d3a
    if ((int32_t)edx >= 0)
        goto loc_16d40;
    edx = 0;
loc_16d40: // 0160:16d40
    ebx = memoryAGet32(ds, 0x21af08);
    eax = ebx;
    eax <<= 2;
    esi = ebx;
    eax += ebx;
    esi <<= 2;
    eax <<= 2;
    esi += ebx;
    eax += ebx;
    esi <<= 6;
    eax <<= 3;
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    edi = ecx + esi;
    eax += edx;
    if ((int32_t)edi <= (int32_t)0x000003bf)
        goto loc_16d79;
    ecx = 0x000003be;
    ecx -= esi;
loc_16d79: // 0160:16d79
    if ((int32_t)eax <= (int32_t)0x0000018f)
        goto loc_16d9f;
    edx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    edx = 0x0000018e;
    eax = sar32(eax, 0x10);
    edx -= eax;
loc_16d9f: // 0160:16d9f
    edi = memoryAGet32(ds, 0x21af08);
    memoryASet32(ds, 0x21af0c, ecx);
    memoryASet32(ds, 0x21af10, edx);
    if (edi != 0x00010000)
        goto loc_16dc5;
    eax = ecx;
    sub_15d7f();
    goto loc_16f4a;
loc_16dc5: // 0160:16dc5
    ebx = edi;
    eax = ecx;
    sub_1628e();
    goto loc_16f4a;
    // gap 375 bytes
loc_16f4a: // 0160:16f4a
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_16dd3() // 0160:16dd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_16e0a;
    if (memoryAGet32(ds, 0x21acc8) != 0x00000000)
        goto loc_16f49;
    edi = 0x00000500;
    ebp = 0x000003a0;
    memoryASet32(ds, 0x21af14, edi);
    memoryASet32(ds, 0x21af18, ebp);
    goto loc_16edf;
loc_16e0a: // 0160:16e0a
    if (memoryAGet32(ds, 0x21af24) != 0x00000000)
        goto loc_16e5f;
    if (memoryAGet32(ds, 0x21acd0) != 0x00000000)
        goto loc_16e5f;
    if (memoryAGet32(ds, 0x59074) != 0x00000000)
        goto loc_16e5f;
    eax = memoryAGet32(ds, 0x217ac8);
    eax -= memoryAGet32(ds, 0x217ab0);
    edx = memoryAGet32(ds, 0x21af14);
    eax <<= 3;
    ecx = memoryAGet32(ds, 0x217ab4);
    edx += eax;
    eax = memoryAGet32(ds, 0x217ac4);
    eax -= ecx;
    esi = memoryAGet32(ds, 0x21af18);
    eax <<= 3;
    esi += eax;
    memoryASet32(ds, 0x21af14, edx);
    memoryASet32(ds, 0x21af18, esi);
loc_16e5f: // 0160:16e5f
    eax = memoryAGet32(ds, 0x21af1c);
    eax -= memoryAGet32(ds, 0x21af14);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = memoryAGet32(ds, 0x21af18);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21af20);
    eax -= ebp;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_16e91;
    eax = 0;
    memoryASet32(ds, 0x21af24, eax);
loc_16e91: // 0160:16e91
    if ((int32_t)memoryAGet32(ds, 0x21af14) < (int32_t)0x00000a00)
        goto loc_16ea7;
    memoryASet32(ds, 0x21af14, 0x00000a00);
loc_16ea7: // 0160:16ea7
    if ((int32_t)memoryAGet32(ds, 0x21af14) >= (int32_t)0x00000000)
        goto loc_16eb8;
    edi = 0;
    memoryASet32(ds, 0x21af14, edi);
loc_16eb8: // 0160:16eb8
    if ((int32_t)memoryAGet32(ds, 0x21af18) < (int32_t)0x000003a0)
        goto loc_16ece;
    memoryASet32(ds, 0x21af18, 0x000003a0);
loc_16ece: // 0160:16ece
    if ((int32_t)memoryAGet32(ds, 0x21af18) >= (int32_t)0x00000000)
        goto loc_16edf;
    ecx = 0;
    memoryASet32(ds, 0x21af18, ecx);
loc_16edf: // 0160:16edf
    if (memoryAGet32(ds, 0x21af24) != 0x00000000)
        goto loc_16eed;
    ebx = 0x00000003;
loc_16eed: // 0160:16eed
    if (memoryAGet32(ds, 0x21af24) != 0x00000001)
        goto loc_16efb;
    ebx = 0x00000002;
loc_16efb: // 0160:16efb
    if (memoryAGet32(ds, 0x21af24) != 0x00000002)
        goto loc_16f09;
    ebx = 0x00000006;
loc_16f09: // 0160:16f09
    if (memoryAGet32(ds, 0x21af24) != 0x00000003)
        goto loc_16f17;
    ebx = 0x00000004;
loc_16f17: // 0160:16f17
    eax = memoryAGet32(ds, 0x21af14);
    edi = memoryAGet32(ds, 0x21af1c);
    cl = bl;
    eax -= edi;
    eax = sar32(eax, cl);
    edx = memoryAGet32(ds, 0x21af20);
    ebp = edi + eax;
    eax = memoryAGet32(ds, 0x21af18);
    eax -= edx;
    eax = sar32(eax, cl);
    ebx = edx + eax;
    memoryASet32(ds, 0x21af1c, ebp);
    memoryASet32(ds, 0x21af20, ebx);
loc_16f49: // 0160:16f49
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_16f50() // 0160:16f50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x21ad50) == 0x00000000)
        goto loc_17002;
    eax = memoryAGet32(ds, 0x21ad5c);
    eax += 0x00000020;
    eax &= 0x000000ff;
    ebx = memoryAGet32(ds, 0x21ad50);
    edx = memoryAGet32(ds, eax * 4 + 0x50bf0);
    edx = (int32_t)edx * (int32_t)ebx;
    memoryASet32(ds, 0x21ad5c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x21ad54, eax);
    eax = memoryAGet32(ds, 0x21ad50);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, 0x21ad5c);
    ebx = ecx + 80;
    ebx &= 0x000000ff;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 330736);
    edx = (int32_t)edx * (int32_t)eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x21ad58, eax);
    if (ecx)
        goto loc_17002;
    edx = memoryAGet32(ds, 0x21ad50);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 5;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x21ad50, eax);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_17002;
    memoryASet32(ds, 0x21ad50, ecx);
loc_17002: // 0160:17002
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_17006() // 0160:17006 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    edx += 0x0000f9fc;
    eax += 0x0000f9fc;
    ecx -= 0x00000004;
loc_17018: // 0160:17018
    ebx = memoryAGet32(ds, eax);
    eax -= 0x00000004;
    memoryVideoSet32(ds, edx, ebx);
    edx -= 0x00000004;
    if (eax != ecx)
        goto loc_17018;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_17029() // 0160:17029 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = memoryAGet32(ds, 0x217a88);
    eax = edx;
    eax <<= 2;
    eax += edx;
    memoryASet32(ds, eax * 4 + 0x9ac90, esi);
    edx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, eax * 4 + 0x9ac94, edi);
    memoryASet32(ds, eax * 4 + 0x9aca0, edx);
    edx = memoryAGet32(ds, 0x217a88);
    memoryASet32(ds, eax * 4 + 0x9ac98, ebx);
    edx++;
    memoryASet32(ds, eax * 4 + 0x9ac9c, ecx);
    memoryASet32(ds, 0x217a88, edx);
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_17075() // 0160:17075 +long
{
    esp -= 4;
    goto loc_17075;
loc_16f49: // 0160:16f49
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 293 bytes
loc_17075: // 0160:17075
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
loc_1707b: // 0160:1707b
    edx = memoryAGet32(ds, 0x217a88);
    if ((int32_t)edx <= 0)
        goto loc_170bd;
    ebx = edx + -1;
    memoryASet32(ds, 0x217a88, ebx);
    eax = ebx * 0x00000014;
    esi = memoryAGet32(ds, eax + 634016);
    edx = 0x00102cb0;
    push32(esi);
    edi = memoryAGet32(ds, eax + 634012);
    ecx = memoryAGet32(ds, eax + 634008);
    push32(edi);
    ebx = memoryAGet32(ds, eax + 634004);
    eax = memoryAGet32(ds, eax + 634000);
    sub_16a3f();
    goto loc_1707b;
loc_170bd: // 0160:170bd
    ebp = 0;
    memoryASet32(ds, 0x217a88, ebp);
    goto loc_16f49;
}
void sub_170ca() // 0160:170ca +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 28);
    if ((int32_t)ebx <= 0)
        goto loc_170fe;
    esi = ebx + edi;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_170fe;
    if ((int32_t)ecx <= 0)
        goto loc_170fe;
    esi = ecx + edx;
    if ((int32_t)esi < (int32_t)0x000000a8)
        goto loc_17179;
loc_170fe: // 0160:170fe
    esi = ebx + edi;
    if ((int32_t)esi <= 0)
        goto loc_171a0;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_171a0;
    ebp = ecx + edx;
    if ((int32_t)ebp <= 0)
        goto loc_171a0;
    if ((int32_t)ecx >= (int32_t)0x000000a8)
        goto loc_171a0;
    if ((int32_t)esi <= (int32_t)0x00000140)
        goto loc_1713c;
    esi -= 0x00000140;
    edi -= esi;
loc_1713c: // 0160:1713c
    esi = ecx + edx;
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_1714f;
    esi -= 0x000000a8;
    edx -= esi;
loc_1714f: // 0160:1714f
    if ((int32_t)ebx >= 0)
        goto loc_1715d;
    esi = ebx;
    edi += ebx;
    esi = -esi;
    ebx = 0;
    eax += esi;
loc_1715d: // 0160:1715d
    if ((int32_t)ecx >= 0)
        goto loc_17179;
    esi = ecx;
    esi = -esi;
    memoryASet32(ds, esp, esi);
    ebp = memoryAGet32(ds, esp);
    esi <<= 2;
    esi += ebp;
    edx += ecx;
    esi <<= 6;
    ecx = 0;
    eax += esi;
loc_17179: // 0160:17179
    esi = memoryAGet32(ds, esp + 36);
    push32(esi);
    esi = memoryAGet32(ds, esp + 8);
    esi += ebx;
    ebx = ecx;
    ebx <<= 2;
    ebp = memoryAGet32(ds, esp + 36);
    ebx += ecx;
    push32(ebp);
    ebx <<= 6;
    ecx = edx;
    esi += ebx;
    ebx = edi;
    edx = esi;
    sub_171a9();
loc_171a0: // 0160:171a0
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_171a9() // 0160:171a9 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    edx = 0;
    memoryASet32(ds, esp + 8, edx);
    goto loc_171fd;
loc_171c1: // 0160:171c1
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_171dc;
loc_171cb: // 0160:171cb
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx == 0x00000080)
        goto loc_171d9;
    memoryASet(ds, edx, cl);
loc_171d9: // 0160:171d9
    eax++;
    edx++;
    ebx++;
loc_171dc: // 0160:171dc
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_171cb;
    ecx = memoryAGet32(ds, esp + 24);
    eax = memoryAGet32(ds, esp + 28);
    ebx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 4);
    ebx++;
    edx += eax;
    edi += ecx;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
loc_171fd: // 0160:171fd
    eax = memoryAGet32(ds, esp + 8);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_171c1;
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1720e() // 0160:1720e +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xffffffff;
    memoryASet32(ds, 0x21aeac, edx);
    memoryASet32(ds, 0x21ae9c, edx);
    memoryASet32(ds, 0x21aea0, edx);
    memoryASet32(ds, 0x21ae8c, edx);
    memoryASet32(ds, 0x21ae90, edi);
    memoryASet32(ds, 0x21ae98, edx);
    memoryASet32(ds, 0x21ae94, edx);
    memoryASet32(ds, 0x21aeb4, edx);
    memoryASet32(ds, 0x21aeb8, edx);
    memoryASet32(ds, 0x21aeb0, edx);
    memoryASet32(ds, 0x21aea4, edx);
    memoryASet32(ds, 0x21aebc, edx);
    memoryASet32(ds, 0x5ca9c, edx);
    memoryASet32(ds, 0x5caa0, edx);
    memoryASet32(ds, 0x5caa4, edi);
    memoryASet32(ds, 0x21aec0, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1727a() // 0160:1727a +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201982) != 0x00000000)
        goto loc_17297;
    memoryASet32(ds, eax + 2201982, 0xffffffff);
loc_17297: // 0160:17297
    esp += 4;
    return;
}
void sub_17298() // 0160:17298 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    if (memoryAGet32(ds, 0x5a5f4) == 0x00000000)
        goto loc_172d2;
    ebx = 0x00000032;
    ecx = 0x00000002;
    eax = memoryAGet32(ds, 0x5a5f0);
    esi = 0;
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x5a5fc, ecx);
    memoryASet32(ds, 0x5a5f8, eax);
    memoryASet32(ds, 0x5a5f0, esi);
    memoryASet32(ds, 0x590a0, esi);
loc_172d2: // 0160:172d2
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_172d6() // 0160:172d6 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    if (memoryAGet32(ds, 0x59008) == 0x00000000)
        goto loc_17307;
    ebx = memoryAGet32(ds, 0x5cd20);
    if (ebx)
        goto loc_17307;
    esi = 0x00000001;
    memoryASet32(ds, 0x5a5f0, ebx);
    memoryASet32(ds, 0x5a5fc, esi);
    memoryASet32(ds, 0x5a5f4, esi);
    sub_26412();
loc_17307: // 0160:17307
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1730a() // 0160:1730a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax * 0x000000ac;
    eax = memoryAGet32(ds, edx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21af1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx -= eax;
    eax = ebx;
    if ((int32_t)ebx >= 0)
        goto loc_17343;
    eax ^= ebx;
loc_17343: // 0160:17343
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_1734f;
    eax = 0x00000140;
loc_1734f: // 0160:1734f
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1736c() // 0160:1736c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21af1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ecx;
    if ((int32_t)eax >= 0)
        goto loc_1739c;
    eax = 0;
loc_1739c: // 0160:1739c
    if ((int32_t)eax <= (int32_t)0x00000140)
        goto loc_173a8;
    eax = 0x00000140;
loc_173a8: // 0160:173a8
    edx = 0x00000140;
    edx -= eax;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x00000140;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_173c6() // 0160:173c6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = 0;
    edi = 0x000002b0;
    memoryASet32(ds, esp, esi);
    goto loc_17440;
loc_173db: // 0160:173db
    eax = memoryAGet32(ds, esp);
    ecx = esi;
    ebx = edi;
    edx = 0;
    ecx <<= 2;
    goto loc_173f6;
loc_173e9: // 0160:173e9
    ebp = memoryAGet32(ds, eax + 2202034);
    eax += 0x000000ac;
    edx += ebp;
loc_173f6: // 0160:173f6
    if (eax != ebx)
        goto loc_173e9;
    if (edx)
        goto loc_1742d;
    if (memoryAGet32(ds, ecx + 2207452) != 0x00000000)
        goto loc_1742d;
    edx = 0x00000001;
    ebx = 0x00000032;
    eax = 0x0004f6cb;
    memoryASet32(ds, ecx + 2207452, edx);
    edx = ecx;
    sub_18dc8();
    memoryASet32(ds, 0x21aefc, 0x00000032);
loc_1742d: // 0160:1742d
    ecx = memoryAGet32(ds, esp);
    edi += 0x000002b0;
    ecx += 0x000002b0;
    esi++;
    memoryASet32(ds, esp, ecx);
loc_17440: // 0160:17440
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x59010))
        goto loc_173db;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_17452() // 0160:17452 +long
{
    esp -= 4;
    goto loc_17452;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_17452: // 0160:17452
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    eax = eax * 0x000000ac;
    memoryASet32(ds, 0x21ae08, 0x00000001);
    if (memoryAGet32(ds, eax + 2201958) <= 0x00078000)
        goto loc_1748b;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000002a;
    goto loc_174e4;
loc_1748b: // 0160:1748b
    if ((int32_t)memoryAGet32(ds, eax + 2201962) <= (int32_t)0x0002fc00)
        goto loc_174f3;
    edi = memoryAGet32(ds, 0x217aa8);
    if (edi != 0x00000002)
        goto loc_174b7;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000041;
    goto loc_174e4;
loc_174b7: // 0160:174b7
    if (edi != 0x00000003)
        goto loc_174d1;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000040;
    goto loc_174e4;
loc_174d1: // 0160:174d1
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000000e;
loc_174e4: // 0160:174e4
    sub_36a16();
    memoryASet32(ds, 0x21aeac, 0x00000001);
loc_174f3: // 0160:174f3
    if (cl & 0x03)
        goto loc_17502;
    memoryASet32(ds, 0x21ae98, 0x00000001);
loc_17502: // 0160:17502
    eax = ecx * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 2201974, esi);
    memoryASet32(ds, eax + 2201950, esi);
    memoryASet32(ds, eax + 2201954, esi);
    memoryASet32(ds, eax + 2201958, esi);
    memoryASet32(ds, eax + 2202034, esi);
    memoryASet32(ds, eax + 2202038, esi);
    memoryASet32(ds, eax + 2202042, esi);
    memoryASet32(ds, eax + 2201990, esi);
    eax = 0x00000010;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ac78, eax);
    if (ecx != edx)
        goto loc_17565;
    ebx = memoryAGet32(ds, 0x21acc0);
    ebx--;
    memoryASet32(ds, 0x21acc0, ebx);
    if ((int32_t)ebx >= 0)
        goto loc_17565;
    memoryASet32(ds, 0x21acc0, esi);
loc_17565: // 0160:17565
    eax = ecx * 0x000000ac;
    ebp = 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 2202006, ebp);
    edi = 0x00000032;
    memoryASet32(ds, eax + 2201938, edx);
    ebx = edi;
    memoryASet32(ds, eax + 2201934, edx);
    eax = 0x0004f6a2;
    memoryASet32(ds, 0x21acec, edx);
    edx = ecx;
    memoryASet32(ds, 0x21aefc, edi);
    sub_18dc8();
    goto loc_1744b;
}
void sub_175a8() // 0160:175a8 +long
{
    esp -= 4;
    goto loc_175a8;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 342 bytes
loc_175a8: // 0160:175a8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x21af14, eax);
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    ebx = memoryAGet32(ds, 0x21af14);
    memoryASet32(ds, 0x21af18, eax);
    if ((int32_t)ebx >= 0)
        goto loc_1760a;
    ecx = 0;
    memoryASet32(ds, 0x21af14, ecx);
loc_1760a: // 0160:1760a
    if ((int32_t)memoryAGet32(ds, 0x21af18) >= (int32_t)0x00000000)
        goto loc_1761b;
    edi = 0;
    memoryASet32(ds, 0x21af18, edi);
loc_1761b: // 0160:1761b
    if ((int32_t)memoryAGet32(ds, 0x21af14) <= (int32_t)0x00000a00)
        goto loc_17631;
    memoryASet32(ds, 0x21af14, 0x00000a00);
loc_17631: // 0160:17631
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201986, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = 0x00000001;
    eax = memoryAGet32(ds, eax + 2201962);
    ebp = memoryAGet32(ds, 0x21ad74);
    eax -= 0x00004000;
    memoryASet32(ds, 0x21ac70, esi);
    memoryASet32(ds, 0x21ac6c, esi);
    memoryASet32(ds, 0x21ac74, eax);
    if (!ebp)
        goto loc_1744b;
    eax = memoryAGet32(ds, 0x21acc4);
    memoryASet32(ds, 0x21ac60, eax);
    goto loc_1744b;
}
void sub_1768b() // 0160:1768b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ecx = 0x00000004;
    ebp = 0x00000001;
    esi = 0x00000010;
    edx = memoryAGet32(ds, 0x21ad68);
    sub_13f15();
    sub_126ed();
    memoryASet32(ds, 0x21ad68, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x5a600, edx);
    memoryASet32(ds, 0x21ad0c, edx);
    memoryASet32(ds, 0x21ad10, edx);
    memoryASet32(ds, 0x5ca80, edx);
    memoryASet32(ds, 0x5cac0, edx);
    memoryASet32(ds, 0x21ae54, edx);
    sub_2dce6();
    memoryASet32(ds, 0x21ae08, edx);
    memoryASet32(ds, 0x21ae4c, edx);
    memoryASet32(ds, 0x21ae60, edx);
    memoryASet32(ds, 0x21adbc, edx);
    memoryASet32(ds, 0x21aef8, edx);
    memoryASet32(ds, 0x21adc0, edx);
    memoryASet32(ds, 0x21adb4, edx);
    memoryASet32(ds, 0x21ae6c, edx);
    memoryASet32(ds, 0x21ae80, ebx);
    memoryASet32(ds, 0x21ae84, ebx);
    memoryASet32(ds, 0x21ad1c, ebx);
    memoryASet32(ds, 0x21ad20, ebx);
    memoryASet32(ds, 0x21ae68, ebx);
    memoryASet32(ds, 0x21adc4, ebx);
    memoryASet32(ds, 0x21adf8, ebx);
    memoryASet32(ds, 0x21ae10, ebx);
    memoryASet32(ds, 0x21ae14, ebx);
    memoryASet32(ds, 0x21ae18, ebx);
    memoryASet32(ds, 0x21ae1c, ebx);
    memoryASet32(ds, 0x21ae20, ebx);
    memoryASet32(ds, 0x21ae24, ebx);
    memoryASet32(ds, 0x21ae28, ebx);
    memoryASet32(ds, 0x21ae2c, ebx);
    memoryASet32(ds, 0x21ae30, ebx);
    memoryASet32(ds, 0x21ae34, ebx);
    memoryASet32(ds, 0x21ae38, ebx);
    memoryASet32(ds, 0x21ae3c, ebx);
    memoryASet32(ds, 0x21ae40, ebx);
    memoryASet32(ds, 0x21ad48, ebx);
    memoryASet32(ds, 0x21ad64, ebx);
    memoryASet32(ds, 0x21ad60, ecx);
    memoryASet32(ds, 0x21acd0, ebx);
    memoryASet32(ds, 0x21af24, ebx);
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21ac4a, ebp);
    memoryASet32(ds, 0x21ad88, ebx);
    memoryASet32(ds, 0x21ae88, ebx);
    memoryASet32(ds, 0x21adec, ebx);
    edx = 0x00000032;
    memoryASet32(ds, 0x21ac78, esi);
    memoryASet32(ds, 0x21ae78, edx);
    sub_1720e();
    memoryASet32(ds, 0x21ae70, ebx);
    sub_25c78();
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_177ed() // 0160:177ed +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax <<= 2;
    ecx = eax + 4;
    eax = eax * 0x000000ac;
    edx = 0;
    ecx = ecx * 0x000000ac;
    goto loc_17830;
loc_17806: // 0160:17806
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_1782b;
    if (memoryAGet32(ds, eax + 2202058) != 0x00000000)
        goto loc_1782b;
    ebx = memoryAGet32(ds, eax + 2202034);
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, eax + 2202038))
        goto loc_1782b;
    edx = 0x00000001;
loc_1782b: // 0160:1782b
    eax += 0x000000ac;
loc_17830: // 0160:17830
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_17838;
    if (!edx)
        goto loc_17806;
loc_17838: // 0160:17838
    eax = edx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1783e() // 0160:1783e +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, eax);
    if (!eax)
        goto loc_17857;
    edx = 0;
    memoryASet32(ds, 0x5a5e4, edx);
loc_17857: // 0160:17857
    eax = 0x00000001;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_17875;
    memoryASet32(ds, 0x5a5e4, 0x00000001);
loc_17875: // 0160:17875
    eax = 0x00000002;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_17893;
    memoryASet32(ds, 0x5a5e4, 0x00000002);
loc_17893: // 0160:17893
    eax = 0x00000003;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_178b1;
    memoryASet32(ds, 0x5a5e4, 0x00000003);
loc_178b1: // 0160:178b1
    if ((int32_t)memoryAGet32(ds, 0x21aec8) > (int32_t)0x00000001)
        goto loc_178c9;
    memoryASet32(ds, 0x5a5ec, 0x00000001);
    sub_17298();
loc_178c9: // 0160:178c9
    edx = pop32();
    esp += 4;
}
void sub_178cb() // 0160:178cb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, eax);
    if (!eax)
        goto loc_178e6;
    edx = 0;
    memoryASet32(ds, 0x5a5e4, edx);
loc_178e6: // 0160:178e6
    eax = 0x00000001;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_17904;
    memoryASet32(ds, 0x5a5e4, 0x00000001);
loc_17904: // 0160:17904
    eax = 0x00000002;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_17922;
    memoryASet32(ds, 0x5a5e4, 0x00000002);
loc_17922: // 0160:17922
    eax = 0x00000003;
    sub_177ed();
    memoryASet32(ds, 0x21aec8, memoryAGet32(ds, 0x21aec8) + eax);
    if (!eax)
        goto loc_17940;
    memoryASet32(ds, 0x5a5e4, 0x00000003);
loc_17940: // 0160:17940
    if ((int32_t)memoryAGet32(ds, 0x21aec8) > (int32_t)0x00000001)
        goto loc_1797c;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x21acc8, ebx);
    memoryASet32(ds, 0x21af00, ecx);
    memoryASet32(ds, eax + 2201994, ebx);
    eax = 0x00000032;
    memoryASet32(ds, 0x21ae78, ebx);
    memoryASet32(ds, 0x21aefc, eax);
loc_1797c: // 0160:1797c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_17980() // 0160:17980 +long
{
    esp -= 4;
    goto loc_17980;
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1326 bytes
loc_17980: // 0160:17980
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x21ac68);
    edi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_179ed;
loc_1799d: // 0160:1799d
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    ecx = eax;
    ebx = 0;
    ecx <<= 2;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ecx + 2207180);
    goto loc_179e7;
loc_179b6: // 0160:179b6
    edx++;
    edx &= 0x00000003;
    esi = edx + ecx;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_179e6;
    if (memoryAGet32(ds, eax + 2202058) != 0x00000000)
        goto loc_179e6;
    ebx = 0x00000004;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, ecx + 2207180, edx);
    edi = ebx;
loc_179e6: // 0160:179e6
    ebx++;
loc_179e7: // 0160:179e7
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_179b6;
    edi++;
loc_179ed: // 0160:179ed
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_1799d;
    ebx = memoryAGet32(ds, esp + 4);
    if ((int32_t)ebx < 0)
        goto loc_17a08;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x21ac64, ebx);
    memoryASet32(ds, 0x21ac68, eax);
loc_17a08: // 0160:17a08
    esp += 0x00000008;
    goto loc_1744c;
}
void sub_17a10() // 0160:17a10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ebx = 0x0004f868;
    ecx = memoryAGet32(ds, 0x5cd20);
    eax = memoryAGet32(ds, 0x21ad84);
    memoryASet32(ds, 0x5cd20, edx);
    edx = 0x0004f84f;
    sub_18e73();
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = memoryAGet32(ds, 0x21ac88);
    sub_18e49();
    ebx = 0x0004f9dc;
    edx = 0x0004f9c0;
    eax = memoryAGet32(ds, 0x21ad84);
    sub_18e73();
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = memoryAGet32(ds, 0x21ac88);
    sub_18e49();
    ebx = 0x0004fa05;
    edx = 0x0004f9e9;
    eax = memoryAGet32(ds, 0x21ad84);
    sub_18e73();
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = memoryAGet32(ds, 0x21ac88);
    sub_18e49();
    memoryASet32(ds, 0x5cd20, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_17aa6() // 0160:17aa6 +long
{
    esp -= 4;
    goto loc_17aa6;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1620 bytes
loc_17aa6: // 0160:17aa6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x21ac64);
    sub_1768b();
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad70);
    edx++;
    ecx = 0;
    memoryASet32(ds, 0x21ad70, edx);
    memoryASet32(ds, eax + 2201950, ecx);
    memoryASet32(ds, eax + 2201954, ecx);
    memoryASet32(ds, eax + 2202002, ecx);
    memoryASet32(ds, eax + 2202090, ecx);
    memoryASet32(ds, eax + 2202094, ecx);
    memoryASet32(ds, eax + 2201974, ecx);
    memoryASet32(ds, eax + 2202014, ecx);
    memoryASet32(ds, eax + 2201938, ecx);
    memoryASet32(ds, eax + 2201934, ecx);
    esi = 0;
    memoryASet32(ds, eax + 2201942, ecx);
    memoryASet32(ds, eax + 2202038, esi);
    memoryASet32(ds, eax + 2202066, esi);
    memoryASet32(ds, eax + 2202054, 0x00000001);
    if (memoryAGet32(ds, 0x21ad68) != 0x00000012)
        goto loc_17b33;
    memoryASet32(ds, 0x21ad68, 0x00000005);
loc_17b33: // 0160:17b33
    if (memoryAGet32(ds, 0x21ad68) != 0x00000013)
        goto loc_17b46;
    memoryASet32(ds, 0x21ad68, 0x00000009);
loc_17b46: // 0160:17b46
    if (memoryAGet32(ds, 0x21ad68) != 0x00000014)
        goto loc_17b59;
    memoryASet32(ds, 0x21ad68, 0x00000003);
loc_17b59: // 0160:17b59
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += ebp;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_17bb5;
    eax = ebx * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 2202006);
    if (ecx == 0x0000002b)
        goto loc_17bb5;
    if (ecx == 0x0000000b)
        goto loc_17bb5;
    if (ecx == 0x00000033)
        goto loc_17bb5;
    if (ecx == 0x00000026)
        goto loc_17bb5;
    if (ecx == 0x00000016)
        goto loc_17bb5;
    if (ecx == 0x0000001f)
        goto loc_17bb5;
    if (ecx == 0x00000034)
        goto loc_17bb5;
    if (memoryAGet32(ds, 0x21adb8) == 0x00000000)
        goto loc_17bcf;
loc_17bb5: // 0160:17bb5
    eax = ebx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, 0x21adb8, ebp);
    memoryASet32(ds, eax + 2202006, ebp);
    memoryASet32(ds, 0x21ad68, ebp);
loc_17bcf: // 0160:17bcf
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad68);
    esi = 0x00000004;
    memoryASet32(ds, eax + 2202010, edx);
    edi = 0x00000001;
    memoryASet32(ds, eax + 2202006, esi);
    memoryASet32(ds, eax + 2202054, edi);
    edx = memoryAGet32(ds, 0x21ac84);
    memoryASet32(ds, eax + 2202062, edx);
    edx = memoryAGet32(ds, 0x21ac88);
    memoryASet32(ds, eax + 2202070, edx);
    edx = memoryAGet32(ds, 0x21ad84);
    memoryASet32(ds, eax + 2202074, edx);
    sub_17980();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2202062);
    memoryASet32(ds, 0x21ac84, edx);
    edx = memoryAGet32(ds, eax + 2202070);
    memoryASet32(ds, 0x21ac88, edx);
    eax = memoryAGet32(ds, eax + 2202074);
    memoryASet32(ds, 0x21ad84, eax);
    sub_17a10();
    sub_13bd3();
    sub_13c2f();
    sub_13c8b();
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = 0x00000032;
    eax <<= 2;
    edx = 0x00000003;
    memoryASet32(ds, 0x21acd8, eax);
    sub_175a8();
    eax = 0x0004f679;
    memoryASet32(ds, 0x21af24, edx);
    edx = memoryAGet32(ds, 0x21ac64);
    sub_18dc8();
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, 0x21ae74, edi);
    edx = memoryAGet32(ds, edx + 2202010);
    eax = edx;
    eax <<= 2;
    esi = 0;
    eax += edx;
    ebx = edi;
    edi = 0x0000004b;
    switch (memoryAGet32(ds, eax * 4 + 0x5a316))
    {
        case 0x18f9b: sub_18f9b(); break;
        case 0x192c4: sub_192c4(); break;
        case 0x18fae: sub_18fae(); break;
        case 0x19171: sub_19171(); break;
        case 0x18fef: sub_18fef(); break;
        case 0x1925b: sub_1925b(); break;
        case 0x1910f: sub_1910f(); break;
        case 0x1915d: sub_1915d(); break;
        case 0x19008: sub_19008(); break;
        case 0x1903c: sub_1903c(); break;
        case 0x19216: sub_19216(); break;
        case 0x190b5: sub_190b5(); break;
        case 0x19074: sub_19074(); break;
        case 0x1909c: sub_1909c(); break;
        case 0x19335: sub_19335(); break;
        case 0x19311: sub_19311(); break;
        case 0x19359: sub_19359(); break;
        case 0x1912f: sub_1912f(); break;
        case 0x193b7: sub_193b7(); break;
        case 0x193d0: sub_193d0(); break;
        case 0x193f7: sub_193f7(); break;
        case 0x191d5: sub_191d5(); break;
        case 0x1929c: sub_1929c(); break;
        case 0x19028: sub_19028(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, eax * 4 + 0x5a316));
            stop("ind 0160:17cec");
    }
    memoryASet32(ds, 0x21ae74, esi);
    memoryASet32(ds, 0x5901c, edi);
    sub_349a8();
    if (eax != ebx)
        goto loc_1744b;
    memoryASet32(ds, 0x21ae78, esi);
    memoryASet32(ds, 0x21af00, eax);
    memoryASet32(ds, 0x5a600, eax);
    goto loc_1744b;
}
void sub_17d21() // 0160:17d21 +long
{
    esp -= 4;
    goto loc_17d21;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2255 bytes
loc_17d21: // 0160:17d21
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x21ac68);
    esi = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, eax);
    goto loc_17d89;
loc_17d3f: // 0160:17d3f
    eax = memoryAGet32(ds, esp);
    eax++;
    eax &= 0x00000003;
    edi = eax;
    edx = 0;
    edi <<= 2;
    memoryASet32(ds, esp, eax);
    ebx = memoryAGet32(ds, edi + 2207180);
    goto loc_17d83;
loc_17d58: // 0160:17d58
    ebx++;
    ebx &= 0x00000003;
    ecx = ebx + edi;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_17d82;
    if (memoryAGet32(ds, eax + 2202058) != 0x00000000)
        goto loc_17d82;
    edx = 0x00000004;
    memoryASet32(ds, esp + 4, ecx);
    esi = edx;
loc_17d82: // 0160:17d82
    edx++;
loc_17d83: // 0160:17d83
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_17d58;
    esi++;
loc_17d89: // 0160:17d89
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_17d3f;
    ecx = memoryAGet32(ds, esp + 4);
    if ((int32_t)ecx < 0)
        goto loc_17d98;
    ebx = ecx;
loc_17d98: // 0160:17d98
    esi = 0;
    edi = memoryAGet32(ds, 0x5a5ec);
    memoryASet32(ds, 0x21acd0, esi);
    if (edi)
        goto loc_17dc1;
    if (memoryAGet32(ds, 0x5a5f4) == 0x00000000)
        goto loc_17dc1;
    if (memoryAGet32(ds, 0x21aef8) != 0x00000000)
        goto loc_17dc1;
    sub_1783e();
loc_17dc1: // 0160:17dc1
    if (memoryAGet32(ds, 0x59008) == 0x00000000)
        goto loc_17e05;
    if ((int32_t)memoryAGet32(ds, 0x5a5f0) < (int32_t)0x00000002)
        goto loc_17e05;
    if (memoryAGet32(ds, 0x5a5f4) == 0x00000000)
        goto loc_17e05;
    if ((int32_t)memoryAGet32(ds, 0x5a5fc) >= (int32_t)0x00000003)
        goto loc_17e05;
    if (memoryAGet32(ds, 0x21aef8) != 0x00000000)
        goto loc_17e05;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_17e05;
    if (memoryAGet32(ds, 0x5a5ec) != 0x00000000)
        goto loc_17e05;
    sub_17298();
loc_17e05: // 0160:17e05
    ecx = memoryAGet32(ds, 0x21aefc);
    if (ecx)
        goto loc_17e1a;
    memoryASet32(ds, 0x590a0, ecx);
    sub_1de56();
loc_17e1a: // 0160:17e1a
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_17e28;
    sub_11f43();
loc_17e28: // 0160:17e28
    ebp = memoryAGet32(ds, 0x21aefc);
    if (ebp)
        goto loc_17e84;
    if (memoryAGet32(ds, 0x21ae80) != 0x00000001)
        goto loc_17e84;
    if (memoryAGet32(ds, 0x21ac60) == 0x00000000)
        goto loc_17e84;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_17e84;
    edi = 0x00000001;
    edx = 0x00000032;
    memoryASet32(ds, 0x5a5f0, ebp);
    memoryASet32(ds, 0x21ad88, ebp);
    memoryASet32(ds, 0x21aef8, ebp);
    memoryASet32(ds, 0x21acc0, edi);
    memoryASet32(ds, 0x21aefc, edx);
    sub_18178();
loc_17e84: // 0160:17e84
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_17e92;
    sub_173c6();
loc_17e92: // 0160:17e92
    if (memoryAGet32(ds, 0x21acc8) == 0x00000000)
        goto loc_17fa5;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_17fa5;
    if (memoryAGet32(ds, 0x5a5fc) == 0x00000002)
        goto loc_17eba;
    sub_178cb();
loc_17eba: // 0160:17eba
    if (memoryAGet32(ds, 0x21acc8) == 0x00000000)
        goto loc_17ee1;
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_17ee1;
    esi = 0x00000001;
    eax = memoryAGet32(ds, 0x21ad70);
    memoryASet32(ds, 0x21ae58, esi);
    sub_2d20c();
loc_17ee1: // 0160:17ee1
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_17fa5;
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_17f04;
    sub_21a9c();
    if ((int32_t)eax <= 0)
        goto loc_17fa5;
loc_17f04: // 0160:17f04
    eax = memoryAGet32(ds, 0x21af1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = ebx * 0x000000ac;
    esi = eax + 160;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21af20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx -= esi;
    esi = eax + 84;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax -= esi;
    eax = (int32_t)eax * (int32_t)eax;
    ecx += eax;
    if ((int32_t)ecx <= (int32_t)0x00010000)
        goto loc_17f7f;
    if (memoryAGet32(ds, 0x21af08) == 0x00010000)
        goto loc_17f86;
loc_17f7f: // 0160:17f7f
    sub_17aa6();
    goto loc_17f90;
loc_17f86: // 0160:17f86
    memoryASet32(ds, 0x21ad78, 0x00000001);
loc_17f90: // 0160:17f90
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x21acc4);
    memoryASet32(ds, 0x21ad74, ebx);
    memoryASet32(ds, 0x21ac60, eax);
loc_17fa5: // 0160:17fa5
    esp += 0x00000008;
    goto loc_1744b;
}
void sub_17fad() // 0160:17fad +long
{
    esp -= 4;
    goto loc_17fad;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2907 bytes
loc_17fad: // 0160:17fad
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x5a5e8);
    if ((int32_t)edx <= 0)
        goto loc_18000;
    ebx = edx + -1;
    memoryASet32(ds, 0x5a5e8, ebx);
    if (ebx)
        goto loc_18000;
    edx = memoryAGet32(ds, 0x5a5e4);
    if (memoryAGet32(ds, edx * 4 + 0x5a5d4) != 0x00000000)
        goto loc_18000;
    edi = 0xffffffff;
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x5a5e8, edi);
    sub_1730a();
    edx = eax;
    eax = 0x0000003d;
    sub_36a16();
loc_18000: // 0160:18000
    ebp = memoryAGet32(ds, 0x21ae7c);
    if (!ebp)
        goto loc_18052;
    eax = ebp + -1;
    memoryASet32(ds, 0x21ae7c, eax);
    if (eax)
        goto loc_18052;
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = 0x00000001;
    memoryASet32(ds, 0x21acc0, eax);
    memoryASet32(ds, 0x21af00, ecx);
    memoryASet32(ds, edx + 2201994, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2202014, ebx);
    memoryASet32(ds, 0x21aefc, 0x00000032);
loc_18052: // 0160:18052
    ecx = memoryAGet32(ds, 0x21ae78);
    if (!ecx)
        goto loc_1806f;
    esi = ecx + -1;
    memoryASet32(ds, 0x21ae78, esi);
    if (esi)
        goto loc_1806f;
    memoryASet32(ds, 0x21af00, esi);
loc_1806f: // 0160:1806f
    if (memoryAGet32(ds, 0x5a5fc) != 0x00000003)
        goto loc_1808f;
    eax = memoryAGet32(ds, 0x5a5f0);
    if (eax != memoryAGet32(ds, 0x5a5f8))
        goto loc_1808f;
    memoryASet32(ds, 0x5a5fc, 0x00000004);
loc_1808f: // 0160:1808f
    if (memoryAGet32(ds, 0x21ad74) == 0x00000000)
        goto loc_180eb;
    esi = memoryAGet32(ds, 0x21ad78);
    if (esi)
        goto loc_180eb;
    eax = memoryAGet32(ds, 0x21acc4);
    ebp = memoryAGet32(ds, 0x21af1c);
    edx = memoryAGet32(ds, 0x21af18);
    ebx = memoryAGet32(ds, 0x21af20);
    memoryASet32(ds, 0x21ac60, eax);
    eax = memoryAGet32(ds, 0x21af14);
    edx -= ebx;
    eax -= ebp;
    edi = 0x00000001;
    eax += edx;
    memoryASet32(ds, 0x21af00, edi);
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_180eb;
    memoryASet32(ds, 0x21ad74, esi);
    memoryASet32(ds, 0x21ae78, 0x00000032);
loc_180eb: // 0160:180eb
    if (memoryAGet32(ds, 0x21ad78) == 0x00000000)
        goto loc_1744b;
    ebp = 0x00000001;
    eax = 0x00000002;
    edx = memoryAGet32(ds, 0x21ad74);
    memoryASet32(ds, 0x21af00, ebp);
    edx += 0x00000010;
    memoryASet32(ds, 0x21af24, eax);
    memoryASet32(ds, 0x21ad74, edx);
    if ((int32_t)edx < (int32_t)0x00000801)
        goto loc_18144;
    esi = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x21ad74, esi);
    memoryASet32(ds, 0x21af24, esi);
    memoryASet32(ds, 0x21ad78, esi);
    memoryASet32(ds, 0x21ae78, eax);
    goto loc_1814e;
loc_18144: // 0160:18144
    if (edx != 0x00000011)
        goto loc_1814e;
    sub_17aa6();
loc_1814e: // 0160:1814e
    edx = memoryAGet32(ds, 0x21ad74);
    edx = memoryAGet32(ds, edx * 4 + 0x50ff0);
    edx += edx;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax += 0x00010000;
    memoryASet32(ds, 0x21af08, eax);
    goto loc_1744b;
}
void sub_18178() // 0160:18178 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x00000280;
    memoryASet32(ds, 0x21af14, eax);
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax <<= 2;
    eax -= 0x000001c0;
    memoryASet32(ds, 0x21af18, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_181c7() // 0160:181c7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x21ad68);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 2205190);
    if ((int32_t)ebx <= 0)
        goto loc_181f8;
    ecx = ebx + -1;
    memoryASet32(ds, eax + 2205190, ecx);
loc_181f8: // 0160:181f8
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_181fc() // 0160:181fc +long
{
    esp -= 4;
    goto loc_181fc;
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3498 bytes
loc_181fc: // 0160:181fc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x21aefc);
    if (edx)
        goto loc_182e8;
    esi = 0x00000001;
    edi = memoryAGet32(ds, 0x21ae70);
    memoryASet32(ds, 0x21adb8, esi);
    if (edi != esi)
        goto loc_18248;
    memoryASet32(ds, 0x21acc0, edx);
    memoryASet32(ds, 0x21af00, esi);
    ecx = 0;
    edx = 0x00000032;
    memoryASet32(ds, 0x21ae78, ecx);
    memoryASet32(ds, 0x21aefc, edx);
    goto loc_182c8;
loc_18248: // 0160:18248
    if (edi != 0x00000002)
        goto loc_182c8;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21acc0, edx);
    edx = 0x00000032;
    al &= 0xfc;
    memoryASet32(ds, 0x21aefc, edx);
    edx = eax * 0x000000ac;
    memoryASet32(ds, 0x21af00, esi);
    memoryASet32(ds, edx + 2202058, esi);
    edx = eax + esi;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202058, esi);
    edx = eax + edi;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202058, esi);
    memoryASet32(ds, eax + 2202058, esi);
    eax = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax += 0x00000031;
    memoryASet(ds, 0x5007c, al);
    eax = 0x0005006b;
    sub_18de2();
loc_182c8: // 0160:182c8
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000032;
    sub_36a16();
    goto loc_1744c;
loc_182e8: // 0160:182e8
    ebx = 0x00000010;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x21ac78, ebx);
    memoryASet32(ds, 0x21adec, ecx);
    memoryASet(ds, 0x222f71, ah);
    goto loc_1744c;
}
void sub_18308() // 0160:18308 +long
{
    esp -= 4;
    push32(edx);
    sub_181c7();
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18d41();
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax += memoryAGet32(ds, 0x21ad68);
    if ((int32_t)memoryAGet32(ds, eax * 4 + 0x21a606) < (int32_t)0x00000000)
        goto loc_18344;
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18de2();
loc_18344: // 0160:18344
    edx = pop32();
    esp += 4;
}
void sub_18346() // 0160:18346 +long
{
    esp -= 4;
    goto loc_18346;
loc_17448: // 0160:17448
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3828 bytes
loc_18346: // 0160:18346
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    memoryASet16(ds, 0x21ac52, dx);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = 0;
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 2201982);
    ecx -= 0x00000004;
    eax += eax;
    esi = memoryAGet32(ds, ebx + 2201982);
    ecx += eax;
    if ((int32_t)esi >= 0)
        goto loc_18391;
    ecx--;
loc_18391: // 0160:18391
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, edx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    esi = ecx;
    ebx = eax;
    eax += 0x00000009;
    ecx += 0x00000009;
    memoryASet32(ds, esp, eax);
loc_183be: // 0160:183be
    if ((int32_t)ebx <= 0)
        goto loc_18422;
    if (esi >= 0x000003c0)
        goto loc_18422;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = esi;
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_18422;
    eax = 0x00000001;
    goto loc_18424;
loc_18422: // 0160:18422
    eax = 0;
loc_18424: // 0160:18424
    edi |= eax;
    if ((int32_t)ebx <= 0)
        goto loc_1848a;
    if (ecx >= 0x000003c0)
        goto loc_1848a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebp &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_1848a;
    eax = 0x00000001;
    goto loc_1848c;
loc_1848a: // 0160:1848a
    eax = 0;
loc_1848c: // 0160:1848c
    esi++;
    ebx++;
    edi |= eax;
    eax = memoryAGet32(ds, esp);
    ecx--;
    if (ebx != eax)
        goto loc_183be;
    eax = edi;
    goto loc_17448;
}
void sub_184a3() // 0160:184a3 +long
{
    esp -= 4;
    goto loc_184a3;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4177 bytes
loc_184a3: // 0160:184a3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x21ac64);
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, edx + 2202006);
    if (eax < 0x00000022)
        goto loc_18541;
    if (eax <= 0x00000022)
        goto loc_18ae0;
    if (eax < 0x00000033)
        goto loc_1850b;
    if (eax <= 0x00000033)
        goto loc_188b0;
    if (eax < 0x00000036)
        goto loc_184fd;
    if (eax <= 0x00000036)
        goto loc_1866a;
    if (eax < 0x00000038)
        goto loc_1744b;
    if (eax <= 0x00000038)
        goto loc_18beb;
    if (eax == 0x0000003e)
        goto loc_18c77;
    goto loc_1744b;
loc_184fd: // 0160:184fd
    if (eax == 0x00000034)
        goto loc_18b2f;
    goto loc_1744b;
loc_1850b: // 0160:1850b
    if (eax < 0x00000027)
        goto loc_18533;
    if (eax <= 0x00000027)
        goto loc_1879a;
    if (eax < 0x0000002b)
        goto loc_1744b;
    if (eax <= 0x0000002b)
        goto loc_18b6b;
    if (eax == 0x0000002f)
        goto loc_1880a;
    goto loc_1744b;
loc_18533: // 0160:18533
    if (eax == 0x00000024)
        goto loc_1863a;
    goto loc_1744b;
loc_18541: // 0160:18541
    if (eax < 0x0000000b)
        goto loc_18582;
    if (eax <= 0x0000000b)
        goto loc_1886e;
    if (eax < 0x00000014)
        goto loc_18574;
    if (eax <= 0x00000014)
        goto loc_189d2;
    if (eax < 0x00000019)
        goto loc_1744b;
    if (eax <= 0x00000019)
        goto loc_18a3d;
    if (eax == 0x0000001f)
        goto loc_18a88;
    goto loc_1744b;
loc_18574: // 0160:18574
    if (eax == 0x00000010)
        goto loc_1892b;
    goto loc_1744b;
loc_18582: // 0160:18582
    if (eax < 0x00000004)
        goto loc_18597;
    if (eax <= 0x00000004)
        goto loc_18602;
    if (eax == 0x00000006)
        goto loc_18703;
    goto loc_1744b;
loc_18597: // 0160:18597
    if (eax)
        goto loc_1744b;
    if (memoryAGet32(ds, 0x21a40e) != 0x00000000)
        goto loc_1744b;
    eax = ebx * 0x000000ac;
    edx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201942);
    memoryASet32(ds, edx + 2201938, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = 0;
    ecx = 0x0000002b;
    memoryASet32(ds, eax + 2201934, edx);
    sub_18308();
    sub_172d6();
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
loc_185ef: // 0160:185ef
    sub_1730a();
    edx = eax;
    eax = ecx;
loc_185f8: // 0160:185f8
    sub_36a16();
    goto loc_1744b;
loc_18602: // 0160:18602
    esi = memoryAGet32(ds, 0x21a552);
    if (esi)
        goto loc_1744b;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000005);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, esi);
loc_18630: // 0160:18630
    sub_18308();
    goto loc_18d37;
loc_1863a: // 0160:1863a
    ebp = memoryAGet32(ds, 0x21a552);
    if (ebp)
        goto loc_1744b;
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000025);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, ebp);
    goto loc_18630;
loc_1866a: // 0160:1866a
    memoryASet32(ds, edx + 2201938, 0x00000037);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 2201934, esi);
    sub_18308();
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    edi = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += edi;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) != 0x00000000)
        goto loc_18d37;
    eax = memoryAGet32(ds, 0x21ac64);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202082, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202082, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202082, esi);
    ebp = 0x00000096;
    memoryASet32(ds, eax + 2202082, esi);
    memoryASet32(ds, 0x21ac88, ebp);
    goto loc_18d37;
loc_18703: // 0160:18703
    ebp = memoryAGet32(ds, 0x21a40e);
    if (ebp)
        goto loc_1744b;
    edx = ebx * 0x000000ac;
    memoryASet32(ds, 0x21ac78, 0x00000011);
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2201942);
    memoryASet32(ds, eax + 2201938, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, ebp);
    eax = memoryAGet32(ds, 0x21ae84);
    memoryASet32(ds, 0x5a5f0, ebp);
    if (eax)
        goto loc_18761;
    memoryASet32(ds, 0x21ae84, 0x00000001);
    sub_18308();
loc_18761: // 0160:18761
    sub_172d6();
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x21ac64);
    ecx = memoryAGet32(ds, 0x21ae80);
    memoryASet32(ds, 0x21ae88, ebx);
    ecx += ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x21ae80, ecx);
    sub_1730a();
    edx = eax;
    eax = 0x0000000c;
    goto loc_185f8;
loc_1879a: // 0160:1879a
    if (memoryAGet32(ds, 0x21a40e) != 0x00000000)
        goto loc_1744b;
    eax = ebx * 0x000000ac;
    ebp = 0x00000010;
    memoryASet32(ds, 0x21ac78, ebp);
    edx = memoryAGet32(ds, eax + 2201942);
    eax = ebx * 0x000000ac;
    memoryASet32(ds, eax + 2201938, edx);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x21ac64);
    edx = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax = ecx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    esi = 0x00000054;
    memoryASet32(ds, eax + 2201934, edx);
    edi = 0x000001f4;
    memoryASet32(ds, 0x21ad18, esi);
    memoryASet32(ds, 0x21ac8c, edi);
    goto loc_18630;
loc_1880a: // 0160:1880a
    if (memoryAGet32(ds, 0x21a40e) != 0x00000000)
        goto loc_1744b;
    ebp = 0x00000010;
    memoryASet32(ds, 0x21ac78, ebp);
    eax = memoryAGet32(ds, edx + 2201942);
    memoryASet32(ds, edx + 2201938, eax);
    edx = eax;
    eax <<= 2;
    eax -= edx;
    ebx = memoryAGet32(ds, 0x21ac64);
    edx = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax = ebx * 0x000000ac;
    edx <<= 4;
    edx += ebp;
    ecx = 0x00000048;
    memoryASet32(ds, eax + 2201934, edx);
    esi = 0x000001f4;
    memoryASet32(ds, 0x21ad18, ecx);
    memoryASet32(ds, 0x21ac8c, esi);
    goto loc_18630;
loc_1886e: // 0160:1886e
    if (memoryAGet32(ds, 0x21a552) != 0x00000000)
        goto loc_1744b;
    eax = 0x0000000b;
    ecx = 0x00000010;
    esi = 0x00000001;
    sub_276ce();
    memoryASet32(ds, 0x21ac78, ecx);
    memoryASet32(ds, 0x21ae88, esi);
    sub_18308();
    sub_172d6();
    memoryASet32(ds, 0x21adc4, esi);
    goto loc_1744b;
loc_188b0: // 0160:188b0
    if (memoryAGet32(ds, 0x21ac78) == 0x00000010)
        goto loc_1744b;
    eax = ebx;
    sub_1730a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    sub_36a16();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, 0x21ae7c, 0x000000fa);
    edx = memoryAGet32(ds, eax + 2201962);
    ecx = 0x00000001;
    edx -= 0x00000200;
    eax = memoryAGet32(ds, eax + 2201966);
    ebx = 0x00000010;
    sub_2bed9();
    memoryASet32(ds, 0x21ac78, ebx);
    memoryASet32(ds, 0x21ae88, ecx);
    sub_18308();
    sub_172d6();
    memoryASet32(ds, 0x21adc4, ecx);
    goto loc_1744b;
loc_1892b: // 0160:1892b
    sub_18308();
    sub_172d6();
    eax = 0x00000001;
    edi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ae6c, eax);
    memoryASet32(ds, 0x21adec, eax);
    eax = edi * 0x000000ac;
    dl = 0x01;
    ebx = 0x00000015;
    ecx = 0;
    memoryASet(ds, 0x222f71, dl);
    memoryASet32(ds, 0x21accc, ebx);
    edx = 0x00000011;
    memoryASet32(ds, 0x21ae50, ecx);
    memoryASet32(ds, 0x21ac78, edx);
    memoryASet32(ds, eax + 2201934, ecx);
    eax = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_1899f;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000013);
    goto loc_1744b;
loc_1899f: // 0160:1899f
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_189bd;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000012);
    goto loc_1744b;
loc_189bd: // 0160:189bd
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, edx);
    goto loc_1744b;
loc_189d2: // 0160:189d2
    sub_18308();
    sub_172d6();
    memoryASet(ds, 0x222f71, 0x01);
    eax = 0x00000015;
    ecx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21accc, eax);
    eax = ecx * 0x000000ac;
    edi = 0x00000001;
    ebp = 0x00000011;
    esi = 0x00000015;
    edx = 0;
    memoryASet32(ds, 0x21ae6c, edi);
    memoryASet32(ds, 0x21ac78, ebp);
    memoryASet32(ds, 0x21ae50, edx);
    memoryASet32(ds, 0x21adec, edi);
    memoryASet32(ds, eax + 2201938, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, edx);
    goto loc_1744b;
loc_18a3d: // 0160:18a3d
    memoryASet32(ds, 0x21adc8, 0x00000001);
    sub_18308();
    sub_172d6();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ac78, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201934, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x0000001a);
    goto loc_1744b;
loc_18a88: // 0160:18a88
    sub_18308();
    sub_172d6();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = 0x00000011;
    ebp = 0;
    memoryASet32(ds, 0x21ac78, esi);
    memoryASet32(ds, eax + 2201934, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0x00000020;
    ecx = 0x00000001;
    memoryASet32(ds, eax + 2201938, ebx);
    memoryASet32(ds, 0x21ae6c, ecx);
    memoryASet32(ds, 0x21ad00, ebp);
    memoryASet32(ds, 0x21ad04, ebp);
    goto loc_1744b;
loc_18ae0: // 0160:18ae0
    sub_18308();
    sub_172d6();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edi = 0x00000011;
    edx = 0;
    memoryASet32(ds, 0x21ac78, edi);
    memoryASet32(ds, eax + 2201934, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000023);
    ebx = 0x000000ff;
    eax = memoryAGet32(ds, 0x21ac64);
    ecx = 0x00000016;
    goto loc_185ef;
loc_18b2f: // 0160:18b2f
    sub_172d6();
    eax = 0x00000011;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ac78, eax);
    eax = edx * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201934, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000035);
    goto loc_1744b;
loc_18b6b: // 0160:18b6b
    edi = memoryAGet32(ds, 0x21a40e);
    if (edi)
        goto loc_1744b;
    sub_18308();
    sub_172d6();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201942);
    memoryASet32(ds, eax + 2201938, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, edi);
    edx = memoryAGet32(ds, 0x21ac78);
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x21ad38, 0x00000004);
    memoryASet32(ds, 0x21ad40, edi);
    memoryASet32(ds, 0x21ad3c, eax);
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000002b;
    goto loc_185f8;
loc_18beb: // 0160:18beb
    if (memoryAGet32(ds, 0x5ca98) != 0x00000000)
        goto loc_18c5f;
    sub_18346();
    if (eax)
        goto loc_18c5f;
    edi = 0x00000001;
    ebp = 0x00000010;
    eax = 0x00000038;
    memoryASet32(ds, 0x21ad2c, edi);
    memoryASet32(ds, 0x21ac78, ebp);
    sub_28c2f();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21aefc, eax);
    eax = edx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, 0x21ad8c, edx);
    eax = memoryAGet32(ds, eax + 2201962);
    eax -= 0x00000800;
    memoryASet32(ds, 0x21ad94, edx);
    memoryASet32(ds, 0x21ad90, eax);
    memoryASet32(ds, 0x21ad98, eax);
    goto loc_1744b;
loc_18c5f: // 0160:18c5f
    ecx = 0x00000010;
    esi = 0;
    memoryASet32(ds, 0x21ac78, ecx);
    memoryASet32(ds, 0x21ad88, esi);
    goto loc_1744b;
loc_18c77: // 0160:18c77
    esi = 0x00000001;
    eax = ebx;
    ebp = 0x00000010;
    sub_1730a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000026;
    ecx = 0;
    sub_36a16();
    sub_2ed3b();
    memoryASet32(ds, 0x21acc0, ecx);
    memoryASet32(ds, 0x21af00, esi);
    memoryASet32(ds, 0x21ae78, ecx);
    memoryASet32(ds, 0x21ac78, ebp);
    memoryASet32(ds, 0x21adc4, esi);
    memoryASet32(ds, 0x21ad88, esi);
    sub_18308();
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += ebx;
    al = memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_18d37;
    eax = memoryAGet32(ds, 0x21ac64);
    al &= 0xfc;
    edx = eax * 0x000000ac;
    esi = 0;
    memoryASet32(ds, edx + 2202086, esi);
    edx = eax + 1;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202086, esi);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202086, esi);
    memoryASet32(ds, eax + 2202086, esi);
loc_18d37: // 0160:18d37
    sub_172d6();
    goto loc_1744b;
}
void sub_18d41() // 0160:18d41 +long
{
    esp -= 4;
    goto loc_18d41;
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6383 bytes
loc_18d41: // 0160:18d41
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = memoryAGet32(ds, 0x21ac68);
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 2;
    edx = memoryAGet32(ds, 0x21ad68);
    esi += ebx;
    eax += memoryAGet32(ds, edx * 4 + 0x592ee);
    ebx = edx + esi;
    ebx <<= 2;
    edx = eax + 1;
    edi = memoryAGet32(ds, ebx + 2205190);
    ecx = eax + 2;
    if (edi)
        goto loc_18d89;
    memoryASet(ds, eax, 0x28);
    memoryASet(ds, edx, 0x30);
    memoryASet(ds, ecx, 0x29);
    goto loc_1744c;
loc_18d89: // 0160:18d89
    if (edi != 0xffffffff)
        goto loc_18d9c;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, edx, 0x20);
    memoryASet(ds, ecx, 0x20);
    goto loc_1744c;
loc_18d9c: // 0160:18d9c
    memoryASet(ds, eax, 0x28);
    eax = edx;
    edx = memoryAGet32(ds, 0x21ad68);
    edx += esi;
    edx = memoryAGet32(ds, edx * 4 + 0x21a606);
    if ((int32_t)edx <= (int32_t)0x00000009)
        goto loc_18dba;
    edx = 0x00000009;
loc_18dba: // 0160:18dba
    dl += 0x30;
    memoryASet(ds, eax, dl);
    eax++;
    memoryASet(ds, eax, 0x29);
    goto loc_1744c;
}
void sub_18dc8() // 0160:18dc8 +long
{
    esp -= 4;
    push32(ecx);
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_18de0;
    ecx = ebx;
    ebx = edx;
    edx = 0x00091b90;
    sub_11797();
loc_18de0: // 0160:18de0
    ecx = pop32();
    esp += 4;
}
void sub_18de2() // 0160:18de2 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_18e02;
    edx = 0x00091b90;
    ebx = 0x000000c8;
    sub_11723();
    memoryASet32(ds, 0x217aa4, ebx);
loc_18e02: // 0160:18e02
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_18e05() // 0160:18e05 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_18e19;
    if (eax != 0x0004f7fd)
        goto loc_18e44;
loc_18e19: // 0160:18e19
    edx = 0x00091b90;
    ebx = 0x00001400;
    ecx = 0x00000190;
    esi = 0x00000001;
    sub_11723();
    memoryASet32(ds, 0x217ab8, ebx);
    memoryASet32(ds, 0x217aa4, ecx);
    memoryASet32(ds, 0x217a90, esi);
loc_18e44: // 0160:18e44
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_18e49() // 0160:18e49 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    edx = eax;
    edi = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax += 0x00000030;
    memoryASet(ds, esi + ebx, al);
    eax = esi;
    sub_18e05();
    memoryASet32(ds, 0x21ac88, ecx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_18e73() // 0160:18e73 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    edx = ebx;
    if (!eax)
        goto loc_18e92;
    eax = 0;
loc_18e81: // 0160:18e81
    bl = memoryAGet(ds, eax + 327761);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax >= (int32_t)0x0000000c)
        goto loc_18ea1;
    goto loc_18e81;
loc_18e92: // 0160:18e92
    bl = memoryAGet(ds, eax + 327774);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_18e92;
loc_18ea1: // 0160:18ea1
    eax = esi;
    sub_18e05();
    memoryASet32(ds, 0x21ad84, ecx);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_18eb1() // 0160:18eb1 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (edx == 0x0000003f)
        goto loc_18ec3;
    edi = 0;
    memoryASet32(ds, 0x21ad30, edi);
loc_18ec3: // 0160:18ec3
    if (edx == 0x00000038)
        goto loc_18ed0;
    ebp = 0;
    memoryASet32(ds, 0x21ad2c, ebp);
loc_18ed0: // 0160:18ed0
    eax = 0;
    edi = 0;
    memoryASet32(ds, 0x21adb8, eax);
    memoryASet32(ds, 0x21ae70, eax);
    memoryASet32(ds, 0x21acd0, eax);
    memoryASet32(ds, 0x21ad64, eax);
    memoryASet32(ds, 0x21af24, edi);
    memoryASet32(ds, 0x21acec, edi);
    memoryASet32(ds, 0x21ad7c, edi);
    eax = 0x000003c0;
    edi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ad1c, eax);
    eax = edi * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, 0x21acb4, ebp);
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, eax + 2202046, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202006, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202054, 0x00000001);
    if ((int32_t)ebx < 0)
        goto loc_18f62;
    memoryASet32(ds, 0x21ad68, ebx);
    eax = ecx;
    memoryASet32(ds, 0x21ad6c, ecx);
    sub_18d41();
loc_18f62: // 0160:18f62
    if (memoryAGet32(ds, 0x21ae74) != 0x00000000)
        goto loc_18f89;
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_18f89;
    eax = ecx;
    sub_18de2();
    memoryASet32(ds, 0x217aa4, 0xffffffff);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_18f89: // 0160:18f89
    ebx = 0xffffffff;
    eax = ecx;
    edx = 0;
    sub_18dc8();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_18f9b() // 0160:18f9b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f826;
    eax = 0x00000032;
    ebx = 0;
    edx = 0;
    goto loc_1901f;
    // gap 113 bytes
loc_1901f: // 0160:1901f
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_18fae() // 0160:18fae +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x0004f868;
    edx = 0x0004f84f;
    eax = memoryAGet32(ds, 0x21ad84);
    sub_18e73();
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = memoryAGet32(ds, 0x21ac88);
    ecx = 0x0004f84f;
    sub_18e49();
    ebx = 0x00000002;
    edx = 0x00000004;
    eax = 0x00000032;
    goto loc_1901f;
    // gap 48 bytes
loc_1901f: // 0160:1901f
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_18fef() // 0160:18fef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f878;
    ebx = 0x00000004;
    edx = 0x00000006;
    eax = 0x00000019;
    goto loc_1901f;
    // gap 23 bytes
loc_1901f: // 0160:1901f
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19008() // 0160:19008 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f8a1;
    ebx = 0x00000008;
    edx = 0x0000000b;
    eax = 0x0000004b;
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19028() // 0160:19028 +long
{
    esp -= 4;
    goto loc_19028;
loc_1901a: // 0160:1901a
    eax = 0x0000004b;
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19028: // 0160:19028
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fbd5;
    ebx = 0x00000013;
    edx = 0x0000003e;
    goto loc_1901a;
}
void sub_1903c() // 0160:1903c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202086) == 0x00000000)
        goto loc_1905b;
    sub_19028();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1905b: // 0160:1905b
    ecx = 0x0004fadf;
    ebx = 0x00000009;
    edx = 0x00000033;
    eax = 0x0000004b;
    goto loc_19126;
    // gap 178 bytes
loc_19126: // 0160:19126
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19074() // 0160:19074 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f8ca;
    ebx = 0x0000000c;
    edx = 0x00000010;
    eax = 0x0000000f;
    sub_18eb1();
    edx = 0;
    memoryASet32(ds, 0x21ac84, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1909c() // 0160:1909c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f8f3;
    ebx = 0x0000000d;
    edx = 0x00000014;
    eax = 0x0000000f;
    goto loc_19126;
    // gap 113 bytes
loc_19126: // 0160:19126
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_190b5() // 0160:190b5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f91c;
    ebx = 0x0000000b;
    edx = 0x00000016;
    eax = 0;
    sub_18eb1();
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x21af1c);
    ecx = 0;
    eax += 0x00000280;
    memoryASet32(ds, 0x21acd0, edx);
    memoryASet32(ds, 0x21ad7c, edx);
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, 0x21af20);
    memoryASet32(ds, 0x21ad0c, ecx);
    eax += 0x00000140;
    memoryASet32(ds, 0x21ad10, ecx);
    memoryASet32(ds, 0x21acd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1910f() // 0160:1910f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f945;
    ebx = 0x00000006;
    edx = 0x00000019;
    eax = 0x0000001e;
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1912f() // 0160:1912f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f96e;
    ebx = 0x00000011;
    edx = 0x0000001f;
    eax = 0x00000032;
    sub_18eb1();
    edx = 0;
    memoryASet32(ds, 0x21ad00, edx);
    memoryASet32(ds, 0x21ad04, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1915d() // 0160:1915d +long
{
    esp -= 4;
    goto loc_1915d;
loc_19121: // 0160:19121
    eax = 0x0000001e;
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 46 bytes
loc_1915d: // 0160:1915d
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004f997;
    ebx = 0x00000007;
    edx = 0x00000022;
    goto loc_19121;
}
void sub_19171() // 0160:19171 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202082) == 0x00000000)
        goto loc_19190;
    sub_191d5();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19190: // 0160:19190
    ebx = 0x0004f9dc;
    edx = 0x0004f9c0;
    eax = memoryAGet32(ds, 0x21ad84);
    sub_18e73();
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = memoryAGet32(ds, 0x21ac88);
    ecx = 0x0004f9c0;
    sub_18e49();
    ebx = 0x00000003;
    edx = 0x00000024;
    eax = 0x0000001e;
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_191d5() // 0160:191d5 +long
{
    esp -= 4;
    goto loc_191d5;
loc_191cc: // 0160:191cc
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_191d5: // 0160:191d5
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x0004fa05;
    edx = 0x0004f9e9;
    eax = memoryAGet32(ds, 0x21ad84);
    sub_18e73();
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = memoryAGet32(ds, 0x21ac88);
    ecx = 0x0004f9e9;
    sub_18e49();
    ebx = 0x00000014;
    edx = 0x00000036;
    eax = 0x00000032;
    goto loc_191cc;
}
void sub_19216() // 0160:19216 +long
{
    esp -= 4;
    goto loc_19216;
loc_19106: // 0160:19106
    memoryASet32(ds, 0x21acd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 263 bytes
loc_19216: // 0160:19216
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fa12;
    ebx = 0x0000000a;
    edx = 0x00000026;
    eax = 0x0000001e;
    sub_18eb1();
    eax = memoryAGet32(ds, 0x21af1c);
    eax += 0x00000280;
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, 0x21af20);
    edx = 0x00000001;
    eax += 0x00000140;
    memoryASet32(ds, 0x21acd0, edx);
    goto loc_19106;
}
void sub_1925b() // 0160:1925b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202078) == 0x00000000)
        goto loc_1927a;
    sub_1929c();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1927a: // 0160:1927a
    ecx = 0x0004fa3b;
    ebx = 0x00000005;
    edx = 0x00000027;
    eax = ebx;
    sub_18eb1();
    ecx = 0;
    memoryASet32(ds, 0x21ad48, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1929c() // 0160:1929c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fab6;
    ebx = 0x00000012;
    edx = 0x0000002f;
    eax = 0x00000005;
    sub_18eb1();
    edx = 0;
    memoryASet32(ds, 0x21ad48, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_192c4() // 0160:192c4 +long
{
    esp -= 4;
    goto loc_192c4;
loc_19106: // 0160:19106
    memoryASet32(ds, 0x21acd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 437 bytes
loc_192c4: // 0160:192c4
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fa8d;
    ebx = 0x00000001;
    edx = 0x0000002b;
    eax = 0x00000032;
    sub_18eb1();
    eax = memoryAGet32(ds, 0x21af1c);
    edx = 0x00000001;
    eax += 0x00000280;
    ebx = 0;
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, 0x21af20);
    memoryASet32(ds, 0x21acd0, edx);
    eax += 0x00000150;
    memoryASet32(ds, 0x21ad1c, ebx);
    goto loc_19106;
}
void sub_19311() // 0160:19311 +long
{
    esp -= 4;
    goto loc_19311;
loc_191cc: // 0160:191cc
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 316 bytes
loc_19311: // 0160:19311
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ecx = 0x0004fb08;
    ebx = 0x0000000f;
    eax = 0;
    memoryASet32(ds, 0x21ad30, edx);
    edx = 0x0000003f;
    goto loc_191cc;
}
void sub_19335() // 0160:19335 +long
{
    esp -= 4;
    goto loc_19335;
loc_191cc: // 0160:191cc
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 352 bytes
loc_19335: // 0160:19335
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000001;
    ecx = 0x0004fb31;
    ebx = 0x0000000e;
    eax = 0;
    memoryASet32(ds, 0x21ad2c, edx);
    edx = 0x00000038;
    goto loc_191cc;
}
void sub_19359() // 0160:19359 +long
{
    esp -= 4;
    goto loc_19359;
loc_19106: // 0160:19106
    memoryASet32(ds, 0x21acd8, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 586 bytes
loc_19359: // 0160:19359
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00000004;
    ecx = 0x0004fa64;
    ebx = 0x00000010;
    memoryASet32(ds, 0x21ad60, edx);
    sub_1727a();
    edx = 0x00000014;
    eax = 0;
    sub_18eb1();
    eax = memoryAGet32(ds, 0x21af1c);
    ebx = 0x00000001;
    eax += 0x00000280;
    memoryASet32(ds, 0x21acd0, ebx);
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, 0x21af20);
    memoryASet32(ds, 0x21ad64, ebx);
    eax += 0x00000150;
    memoryASet32(ds, 0x21adb8, ebx);
    goto loc_19106;
}
void sub_193b7() // 0160:193b7 +long
{
    esp -= 4;
    goto loc_193b7;
loc_191cc: // 0160:191cc
    sub_18eb1();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 482 bytes
loc_193b7: // 0160:193b7
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fb5a;
    ebx = 0xffffffff;
    edx = 0x00000034;
    eax = 0;
    goto loc_191cc;
}
void sub_193d0() // 0160:193d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fb83;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_18eb1();
    memoryASet32(ds, 0x21ae70, 0x00000001);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_193f7() // 0160:193f7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = 0x0004fbac;
    ebx = 0xffffffff;
    edx = 0x0000003d;
    eax = 0;
    sub_18eb1();
    memoryASet32(ds, 0x21ae70, 0x00000002);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1941e() // 0160:1941e +long
{
    esp -= 4;
    goto loc_1941e;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8140 bytes
loc_1941e: // 0160:1941e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, 0x21adf0, edx);
    if (memoryAGet32(ds, eax + 2202006) != 0x00000004)
        goto loc_1950b;
    if (memoryAGet(ds, 0x222f3a) == 0x00)
        goto loc_19460;
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = 0x00000032;
    sub_18e49();
loc_19460: // 0160:19460
    if (memoryAGet(ds, 0x222f3b) == 0x00)
        goto loc_1947d;
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = 0x00000064;
    sub_18e49();
loc_1947d: // 0160:1947d
    if (memoryAGet(ds, 0x222f3c) == 0x00)
        goto loc_1949a;
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = 0x00000096;
    sub_18e49();
loc_1949a: // 0160:1949a
    if (memoryAGet(ds, 0x222f3d) == 0x00)
        goto loc_194b7;
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = 0x000000c8;
    sub_18e49();
loc_194b7: // 0160:194b7
    if (memoryAGet(ds, 0x222f3e) == 0x00)
        goto loc_194d4;
    ebx = 0x0000000f;
    edx = 0x0004f84f;
    eax = 0x000000fa;
    sub_18e49();
loc_194d4: // 0160:194d4
    if (memoryAGet(ds, 0x222f44) == 0x00)
        goto loc_194f1;
    ebx = 0x0004f868;
    edx = 0x0004f84f;
    eax = 0x00000001;
    sub_18e73();
loc_194f1: // 0160:194f1
    if (memoryAGet(ds, 0x222f45) == 0x00)
        goto loc_1950b;
    ebx = 0x0004f868;
    edx = 0x0004f84f;
    eax = 0;
    sub_18e73();
loc_1950b: // 0160:1950b
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000024)
        goto loc_195ea;
    if (memoryAGet(ds, 0x222f3a) == 0x00)
        goto loc_1953f;
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = 0x00000032;
    sub_18e49();
loc_1953f: // 0160:1953f
    if (memoryAGet(ds, 0x222f3b) == 0x00)
        goto loc_1955c;
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = 0x00000064;
    sub_18e49();
loc_1955c: // 0160:1955c
    if (memoryAGet(ds, 0x222f3c) == 0x00)
        goto loc_19579;
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = 0x00000096;
    sub_18e49();
loc_19579: // 0160:19579
    if (memoryAGet(ds, 0x222f3d) == 0x00)
        goto loc_19596;
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = 0x000000c8;
    sub_18e49();
loc_19596: // 0160:19596
    if (memoryAGet(ds, 0x222f3e) == 0x00)
        goto loc_195b3;
    ebx = 0x00000012;
    edx = 0x0004f9c0;
    eax = 0x000000fa;
    sub_18e49();
loc_195b3: // 0160:195b3
    if (memoryAGet(ds, 0x222f44) == 0x00)
        goto loc_195d0;
    ebx = 0x0004f9dc;
    edx = 0x0004f9c0;
    eax = 0x00000001;
    sub_18e73();
loc_195d0: // 0160:195d0
    if (memoryAGet(ds, 0x222f45) == 0x00)
        goto loc_195ea;
    ebx = 0x0004f9dc;
    edx = 0x0004f9c0;
    eax = 0;
    sub_18e73();
loc_195ea: // 0160:195ea
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000036)
        goto loc_196c9;
    if (memoryAGet(ds, 0x222f3a) == 0x00)
        goto loc_1961e;
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = 0x00000032;
    sub_18e49();
loc_1961e: // 0160:1961e
    if (memoryAGet(ds, 0x222f3b) == 0x00)
        goto loc_1963b;
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = 0x00000064;
    sub_18e49();
loc_1963b: // 0160:1963b
    if (memoryAGet(ds, 0x222f3c) == 0x00)
        goto loc_19658;
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = 0x00000096;
    sub_18e49();
loc_19658: // 0160:19658
    if (memoryAGet(ds, 0x222f3d) == 0x00)
        goto loc_19675;
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = 0x000000c8;
    sub_18e49();
loc_19675: // 0160:19675
    if (memoryAGet(ds, 0x222f3e) == 0x00)
        goto loc_19692;
    ebx = 0x00000012;
    edx = 0x0004f9e9;
    eax = 0x000000fa;
    sub_18e49();
loc_19692: // 0160:19692
    if (memoryAGet(ds, 0x222f44) == 0x00)
        goto loc_196af;
    ebx = 0x0004fa05;
    edx = 0x0004f9e9;
    eax = 0x00000001;
    sub_18e73();
loc_196af: // 0160:196af
    if (memoryAGet(ds, 0x222f45) == 0x00)
        goto loc_196c9;
    ebx = 0x0004fa05;
    edx = 0x0004f9e9;
    eax = 0;
    sub_18e73();
loc_196c9: // 0160:196c9
    if (memoryAGet(ds, 0x222f73) == 0x00)
        goto loc_19716;
    ebx = 0x0000003b;
    ecx = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ebx);
    if (ecx == ebx)
        goto loc_19716;
    if (ebx != memoryAGet32(ds, 0x21adf8))
        goto loc_196f6;
    memoryASet(ds, 0x21ae10, memoryAGet(ds, 0x21ae10) ^ 0x01);
loc_196f6: // 0160:196f6
    eax = memoryAGet32(ds, 0x21adf0);
    edi = memoryAGet32(ds, 0x21ae10);
    memoryASet32(ds, 0x21adf8, eax);
    if (edi)
        goto loc_19711;
    sub_18f9b();
    goto loc_19716;
loc_19711: // 0160:19711
    sub_192c4();
loc_19716: // 0160:19716
    if (memoryAGet(ds, 0x222f74) == 0x00)
        goto loc_19762;
    ebp = 0x0000003c;
    eax = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ebp);
    if (eax == ebp)
        goto loc_19762;
    if (ebp != memoryAGet32(ds, 0x21adf8))
        goto loc_19742;
    memoryASet(ds, 0x21ae14, memoryAGet(ds, 0x21ae14) ^ 0x01);
loc_19742: // 0160:19742
    eax = memoryAGet32(ds, 0x21adf0);
    ebx = memoryAGet32(ds, 0x21ae14);
    memoryASet32(ds, 0x21adf8, eax);
    if (ebx)
        goto loc_1975d;
    sub_18fae();
    goto loc_19762;
loc_1975d: // 0160:1975d
    sub_19171();
loc_19762: // 0160:19762
    if (memoryAGet(ds, 0x222f75) == 0x00)
        goto loc_197af;
    ecx = 0x0000003d;
    esi = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ecx);
    if (esi == ecx)
        goto loc_197af;
    if (ecx != memoryAGet32(ds, 0x21adf8))
        goto loc_1978f;
    memoryASet(ds, 0x21ae18, memoryAGet(ds, 0x21ae18) ^ 0x01);
loc_1978f: // 0160:1978f
    eax = memoryAGet32(ds, 0x21adf0);
    ebp = memoryAGet32(ds, 0x21ae18);
    memoryASet32(ds, 0x21adf8, eax);
    if (ebp)
        goto loc_197aa;
    sub_18fef();
    goto loc_197af;
loc_197aa: // 0160:197aa
    sub_1925b();
loc_197af: // 0160:197af
    if (memoryAGet(ds, 0x222f76) == 0x00)
        goto loc_197fb;
    eax = 0x0000003e;
    edx = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, eax);
    if (edx == eax)
        goto loc_197fb;
    if (eax != memoryAGet32(ds, 0x21adf8))
        goto loc_197db;
    memoryASet(ds, 0x21ae1c, memoryAGet(ds, 0x21ae1c) ^ 0x01);
loc_197db: // 0160:197db
    eax = memoryAGet32(ds, 0x21adf0);
    ecx = memoryAGet32(ds, 0x21ae1c);
    memoryASet32(ds, 0x21adf8, eax);
    if (ecx)
        goto loc_197f6;
    sub_1910f();
    goto loc_197fb;
loc_197f6: // 0160:197f6
    sub_1915d();
loc_197fb: // 0160:197fb
    if (memoryAGet(ds, 0x222f77) == 0x00)
        goto loc_19847;
    esi = 0x0000003f;
    edi = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, esi);
    if (edi == esi)
        goto loc_19847;
    if (esi != memoryAGet32(ds, 0x21adf8))
        goto loc_19828;
    memoryASet(ds, 0x21ae20, memoryAGet(ds, 0x21ae20) ^ 0x01);
loc_19828: // 0160:19828
    eax = memoryAGet32(ds, 0x21adf0);
    memoryASet32(ds, 0x21adf8, eax);
    if (memoryAGet32(ds, 0x21ae20) != 0x00000000)
        goto loc_19842;
    sub_19008();
    goto loc_19847;
loc_19842: // 0160:19842
    sub_1903c();
loc_19847: // 0160:19847
    if (memoryAGet(ds, 0x222f78) == 0x00)
        goto loc_19894;
    edx = 0x00000040;
    ebx = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, edx);
    if (ebx == edx)
        goto loc_19894;
    if (edx != memoryAGet32(ds, 0x21adf8))
        goto loc_19874;
    memoryASet(ds, 0x21ae24, memoryAGet(ds, 0x21ae24) ^ 0x01);
loc_19874: // 0160:19874
    eax = memoryAGet32(ds, 0x21adf0);
    esi = memoryAGet32(ds, 0x21ae24);
    memoryASet32(ds, 0x21adf8, eax);
    if (esi)
        goto loc_1988f;
    sub_19216();
    goto loc_19894;
loc_1988f: // 0160:1988f
    sub_190b5();
loc_19894: // 0160:19894
    if (memoryAGet(ds, 0x222f79) == 0x00)
        goto loc_198e1;
    edi = 0x00000041;
    ebp = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, edi);
    if (ebp == edi)
        goto loc_198e1;
    if (edi != memoryAGet32(ds, 0x21adf8))
        goto loc_198c1;
    memoryASet(ds, 0x21ae28, memoryAGet(ds, 0x21ae28) ^ 0x01);
loc_198c1: // 0160:198c1
    eax = memoryAGet32(ds, 0x21adf0);
    edx = memoryAGet32(ds, 0x21ae28);
    memoryASet32(ds, 0x21adf8, eax);
    if (edx)
        goto loc_198dc;
    sub_19074();
    goto loc_198e1;
loc_198dc: // 0160:198dc
    sub_1909c();
loc_198e1: // 0160:198e1
    if (memoryAGet(ds, 0x222f7a) == 0x00)
        goto loc_1992e;
    ebx = 0x00000042;
    ecx = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ebx);
    if (ecx == ebx)
        goto loc_1992e;
    if (ebx != memoryAGet32(ds, 0x21adf8))
        goto loc_1990e;
    memoryASet(ds, 0x21ae2c, memoryAGet(ds, 0x21ae2c) ^ 0x01);
loc_1990e: // 0160:1990e
    eax = memoryAGet32(ds, 0x21adf0);
    edi = memoryAGet32(ds, 0x21ae2c);
    memoryASet32(ds, 0x21adf8, eax);
    if (edi)
        goto loc_19929;
    sub_19311();
    goto loc_1992e;
loc_19929: // 0160:19929
    sub_19335();
loc_1992e: // 0160:1992e
    if (memoryAGet(ds, 0x222f7b) == 0x00)
        goto loc_1997a;
    ebp = 0x00000043;
    eax = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ebp);
    if (eax == ebp)
        goto loc_1997a;
    if (ebp != memoryAGet32(ds, 0x21adf8))
        goto loc_1995a;
    memoryASet(ds, 0x21ae30, memoryAGet(ds, 0x21ae30) ^ 0x01);
loc_1995a: // 0160:1995a
    eax = memoryAGet32(ds, 0x21adf0);
    ebx = memoryAGet32(ds, 0x21ae30);
    memoryASet32(ds, 0x21adf8, eax);
    if (ebx)
        goto loc_19975;
    sub_19359();
    goto loc_1997a;
loc_19975: // 0160:19975
    sub_193d0();
loc_1997a: // 0160:1997a
    if (memoryAGet(ds, 0x222f7c) == 0x00)
        goto loc_199c7;
    ecx = 0x00000044;
    esi = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, ecx);
    if (esi == ecx)
        goto loc_199c7;
    if (ecx != memoryAGet32(ds, 0x21adf8))
        goto loc_199a7;
    memoryASet(ds, 0x21ae34, memoryAGet(ds, 0x21ae34) ^ 0x01);
loc_199a7: // 0160:199a7
    eax = memoryAGet32(ds, 0x21adf0);
    ebp = memoryAGet32(ds, 0x21ae34);
    memoryASet32(ds, 0x21adf8, eax);
    if (ebp)
        goto loc_199c2;
    sub_1912f();
    goto loc_199c7;
loc_199c2: // 0160:199c2
    sub_193f7();
loc_199c7: // 0160:199c7
    if (memoryAGet(ds, 0x222f8f) == 0x00)
        goto loc_19a02;
    eax = 0x00000057;
    edx = memoryAGet32(ds, 0x21adf4);
    memoryASet32(ds, 0x21adf0, eax);
    if (edx == eax)
        goto loc_19a02;
    if (eax != memoryAGet32(ds, 0x21adf8))
        goto loc_199f3;
    memoryASet(ds, 0x21ae3c, memoryAGet(ds, 0x21ae3c) ^ 0x01);
loc_199f3: // 0160:199f3
    eax = memoryAGet32(ds, 0x21adf0);
    memoryASet32(ds, 0x21adf8, eax);
    sub_193b7();
loc_19a02: // 0160:19a02
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += ecx;
    esi = memoryAGet32(ds, eax * 4 + 0x21a606);
    if (esi)
        goto loc_19a2d;
    memoryASet32(ds, 0x21acd0, esi);
loc_19a2d: // 0160:19a2d
    eax = memoryAGet32(ds, 0x21adf0);
    memoryASet32(ds, 0x21adf4, eax);
    goto loc_1744b;
}
void sub_19a3c() // 0160:19a3c +long
{
    esp -= 4;
    goto loc_19a3c;
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3724 bytes
loc_182de: // 0160:182de
    sub_36a16();
    goto loc_1744c;
    // gap 5972 bytes
loc_19a3c: // 0160:19a3c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = eax * 0x000000ac;
    memoryASet32(ds, 0x21acb4, 0x00000001);
    if (memoryAGet32(ds, ecx + 2201994) != 0x00000042)
        goto loc_1744c;
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, ecx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_261f8();
    if (eax)
        goto loc_19ad6;
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -8;
    eax = memoryAGet32(ds, ecx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_261f8();
    if (eax)
        goto loc_19ad6;
    memoryASet32(ds, ecx + 2201962, memoryAGet32(ds, ecx + 2201962) - 0x00000800);
loc_19ad6: // 0160:19ad6
    ecx = esi * 0x000000ac;
    if (memoryAGet32(ds, ecx + 2201982) != 0x00000000)
        goto loc_19aef;
    memoryASet32(ds, ecx + 2201982, 0xffffffff);
loc_19aef: // 0160:19aef
    ecx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 2201982);
    memoryASet32(ds, ecx + 2201986, eax);
    eax = eax * 0x000001e6;
    ebx = 0xfffffc01;
    edi = 0x00000001;
    memoryASet32(ds, ecx + 2201954, ebx);
    edx = edi;
    memoryASet32(ds, ecx + 2201950, eax);
    eax = esi;
    memoryASet32(ds, ecx + 2201998, edi);
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000020;
    edx = ecx;
    goto loc_182de;
}
void sub_19b44() // 0160:19b44 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = eax;
    memoryASet32(ds, esp + 12, edx);
    ebx = edx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 2201982);
    esi = eax;
    if ((int32_t)ecx <= 0)
        goto loc_19b96;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_19b9e;
loc_19b96: // 0160:19b96
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_19b9e: // 0160:19b9e
    cl = memoryAGet(ds, esp + 12);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x21ac52, ax);
    eax = 0;
    edx = esi;
    ax = memoryAGet16(ds, 0x21ac52);
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 24, eax);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    ebx = 0x000b54d0;
    eax -= edx;
    edx = edi;
    eax <<= 6;
    edx = sar32(edx, 0x1f);
    ebx += eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 20);
    ecx = eax + eax;
    edx <<= 2;
    eax = ebx + ecx;
    memoryASet32(ds, esp, edx);
    dx = memoryAGet16(ds, edx + eax);
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, eax);
    eax &= 0x0000ffff;
    ebx = memoryAGet32(ds, esp + 24);
    eax |= edx;
    edx = esi + -8;
    ebx &= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += 0x000b54d0;
    eax += ecx;
    eax += memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax &= 0x0000ffff;
    eax &= edx;
    ebx |= eax;
    if (!ebx)
        goto loc_19de4;
    ecx = 0;
loc_19c4f: // 0160:19c4f
    if (bl & 0x01)
        goto loc_19c60;
    eax = ecx;
    ecx++;
    if ((int32_t)eax >= (int32_t)0x00000010)
        goto loc_19c60;
    ebx = sar32(ebx, 0x00000001);
    goto loc_19c4f;
loc_19c60: // 0160:19c60
    edx = 0;
    ebx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, 0x21ac52, dx);
    edx = ebx * 0x000000ac;
    eax = ecx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2201982);
    ebx = memoryAGet32(ds, eax + 2201982);
    if (edx == ebx)
        goto loc_19c9c;
    if (ebx)
        goto loc_19d71;
    if (memoryAGet32(ds, esp + 20) != 0xffffffff)
        goto loc_19d71;
loc_19c9c: // 0160:19c9c
    eax = esi + -3;
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)eax <= 0)
        goto loc_19d4a;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201982);
    ebx <<= 2;
    ebx += edi;
    if (ebx >= 0x000003c0)
        goto loc_19d4a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 6;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, esp + 4, edx);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    ebx = memoryAGet32(ds, esp + 4);
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_19d51;
loc_19d4a: // 0160:19d4a
    eax = 0x00000001;
    goto loc_19d53;
loc_19d51: // 0160:19d51
    eax = 0;
loc_19d53: // 0160:19d53
    if (!eax)
        goto loc_19d71;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    edx = esi;
    edx <<= 9;
    ebp = 0xffff0000;
    memoryASet32(ds, eax + 2201962, edx);
    goto loc_19d93;
loc_19d71: // 0160:19d71
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    if ((int32_t)eax > (int32_t)esi)
        goto loc_19d93;
    ebp = 0xfffdffff;
loc_19d93: // 0160:19d93
    eax = memoryAGet32(ds, esp + 24);
    ebx = esi;
    edx = edi;
    memoryASet16(ds, 0x21ac52, ax);
    eax = memoryAGet32(ds, esp + 12);
    sub_261f8();
    if (!eax)
        goto loc_19de4;
    if ((int32_t)ebp <= (int32_t)0xfffe0000)
        goto loc_19de4;
    eax = memoryAGet32(ds, esp + 12);
    ebx = esi + -8;
    edx = edi;
    sub_261f8();
    if (eax)
        goto loc_19de4;
    eax = memoryAGet32(ds, esp + 12) * 0x000000ac;
    esi -= 0x00000004;
    esi <<= 9;
    edx = 0;
    memoryASet32(ds, eax + 2201962, esi);
    memoryASet32(ds, eax + 2201954, edx);
loc_19de4: // 0160:19de4
    eax = ebp;
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_19def() // 0160:19def +long
{
    esp -= 4;
    goto loc_19def;
loc_19de9: // 0160:19de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_19def: // 0160:19def
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    if (memoryAGet32(ds, 0x21acc0) != 0x00000000)
        goto loc_19e1e;
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2202006);
    if (ebx == 0x0000000b)
        goto loc_19e1e;
    if (ebx != 0x00000033)
        goto loc_19f2a;
loc_19e1e: // 0160:19e1e
    ebx = esi * 0x000000ac;
    memoryASet32(ds, 0x21acb4, 0x00000001);
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = esp + 4;
    push32(edi);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = esi;
    edx = ebp;
    sub_261ca();
    ebx = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    if (esi != ebx)
        goto loc_19e80;
    edx = ebx;
    sub_19b44();
    edx = eax;
loc_19e80: // 0160:19e80
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_19e96;
    eax = esi * 0x000000ac;
    if (edi == memoryAGet32(ds, eax + 2201982))
        goto loc_19f04;
loc_19e96: // 0160:19e96
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201982);
    memoryASet32(ds, eax + 2201986, ebx);
    if (edi == ebx)
        goto loc_19eb6;
    memoryASet32(ds, 0x21ade0, 0x00000004);
loc_19eb6: // 0160:19eb6
    ebx = esi * 0x000000ac;
    ecx = memoryAGet32(ds, 0x21ade0);
    if (!ecx)
        goto loc_19ed9;
    ebp = ecx + -1;
    eax = 0;
    memoryASet32(ds, 0x21ade0, ebp);
    memoryASet32(ds, ebx + 2201934, eax);
    goto loc_19eee;
loc_19ed9: // 0160:19ed9
    eax = edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 2;
    eax -= edi;
    eax <<= 4;
    memoryASet32(ds, ebx + 2201974, eax);
loc_19eee: // 0160:19eee
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 2202014, 0x00000001);
    memoryASet32(ds, eax + 2201982, edi);
loc_19f04: // 0160:19f04
    if ((int32_t)edx > (int32_t)0xfffe0000)
        goto loc_19f2a;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2201958);
    memoryASet32(ds, esi + 2201966, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    memoryASet32(ds, esi + 2201970, eax);
loc_19f2a: // 0160:19f2a
    esp += 0x00000008;
    goto loc_19de9;
}
void sub_19f32() // 0160:19f32 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21acf8);
    if (!edx)
        goto loc_19f49;
    ebx = edx + -1;
    memoryASet32(ds, 0x21acf8, ebx);
loc_19f49: // 0160:19f49
    if (memoryAGet32(ds, 0x21acf8) != 0x00000000)
        goto loc_1a0a1;
    if (memoryAGet32(ds, 0x21ad18) != 0x00000000)
        goto loc_1a0a1;
    edi = memoryAGet32(ds, 0x21ac78);
    if (edi != 0x00000010)
        goto loc_1a0a1;
    if (memoryAGet32(ds, 0x21acd0) != 0x00000000)
        goto loc_1a0a1;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2202006);
    if (!ebx)
        goto loc_19fc3;
    if (ebx == 0x00000004)
        goto loc_19fc3;
    if (ebx == 0x00000024)
        goto loc_19fc3;
    if (ebx == 0x00000036)
        goto loc_19fc3;
    if (ebx == edi)
        goto loc_19fc3;
    if (ebx == 0x00000027)
        goto loc_19fc3;
    if (ebx == 0x0000002f)
        goto loc_19fc3;
    if (ebx == 0x0000002b)
        goto loc_19fc3;
    if (ebx == 0x00000006)
        goto loc_19fc3;
    if (ebx != 0x00000038)
        goto loc_1a0a1;
loc_19fc3: // 0160:19fc3
    ah = memoryAGet(ds, 0x222f80);
    edx = 0;
    if (!ah)
        goto loc_1a003;
    ebp = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)ebp >= (int32_t)0x00000040)
        goto loc_1a003;
    edx = 0x00000001;
    ebx = edx + ebp;
    memoryASet32(ds, 0x21acb4, edx);
    memoryASet32(ds, 0x21ac84, ebx);
    sub_1727a();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202054, edx);
loc_1a003: // 0160:1a003
    if (memoryAGet(ds, 0x222f88) == 0x00)
        goto loc_1a045;
    edi = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)edi <= (int32_t)0xffffffc0)
        goto loc_1a045;
    ebp = 0x00000001;
    eax = edi;
    eax -= ebp;
    memoryASet32(ds, 0x21acb4, ebp);
    memoryASet32(ds, 0x21ac84, eax);
    sub_1727a();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = 0xffffffff;
    memoryASet32(ds, eax + 2202054, ebp);
loc_1a045: // 0160:1a045
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000010)
        goto loc_1a0a1;
    memoryASet32(ds, 0x21acf8, 0x00000008);
    if ((int32_t)edx <= 0)
        goto loc_1a081;
    eax = memoryAGet32(ds, 0x21ac84);
    ebx = eax + -1;
    memoryASet32(ds, 0x21ac84, ebx);
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1a081;
    eax = ebx + 32;
    memoryASet32(ds, 0x21ac84, eax);
loc_1a081: // 0160:1a081
    if ((int32_t)edx >= 0)
        goto loc_1a0a1;
    eax = memoryAGet32(ds, 0x21ac84);
    edx = eax + 1;
    memoryASet32(ds, 0x21ac84, edx);
    if ((int32_t)eax <= (int32_t)0xffffffe0)
        goto loc_1a0a1;
    edx -= 0x00000020;
    memoryASet32(ds, 0x21ac84, edx);
loc_1a0a1: // 0160:1a0a1
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a0a6() // 0160:1a0a6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_1a242;
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1a0d4;
    if (memoryAGet32(ds, 0x21adec) != 0x00000000)
        goto loc_1a0d4;
    memoryASet32(ds, 0x21ae50, 0x00000001);
loc_1a0d4: // 0160:1a0d4
    esi = memoryAGet32(ds, 0x21accc);
    if (esi != 0x00000001)
        goto loc_1a242;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202054, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000014)
        goto loc_1a143;
    ebp = 0;
    memoryASet32(ds, eax + 2201938, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201934, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202090, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202094, ebp);
    goto loc_1a1c1;
loc_1a143: // 0160:1a143
    edx = memoryAGet32(ds, eax + 2201938);
    edx += 0x00000029;
    memoryASet32(ds, eax + 2201938, edx);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 2201938);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax <<= 4;
    memoryASet32(ds, edx + 2201934, eax);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 2201938);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x59446);
    memoryASet32(ds, edx + 2202090, eax);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 2201938);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax = memoryAGet32(ds, eax * 8 + 0x5944a);
    memoryASet32(ds, edx + 2202094, eax);
loc_1a1c1: // 0160:1a1c1
    eax = 0x00000010;
    esi = 0x00000032;
    edi = memoryAGet32(ds, 0x21acf4);
    edx = 0;
    memoryASet32(ds, 0x21ac78, eax);
    memoryASet32(ds, 0x21accc, edx);
    memoryASet32(ds, 0x21acf0, edx);
    memoryASet32(ds, 0x21acc0, edx);
    memoryASet32(ds, 0x21aefc, esi);
    if (!edi)
        goto loc_1a242;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000014)
        goto loc_1a234;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000200);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201982);
    ebp = memoryAGet32(ds, eax + 2201958);
    edx <<= 10;
    ebp += edx;
    memoryASet32(ds, eax + 2201958, ebp);
    goto loc_1a242;
loc_1a234: // 0160:1a234
    if ((int32_t)edi < 0)
        goto loc_1a242;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000600);
loc_1a242: // 0160:1a242
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a248() // 0160:1a248 +long
{
    esp -= 4;
    goto loc_1a248;
loc_1744c: // 0160:1744c
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11766 bytes
loc_1a248: // 0160:1a248
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax + -2;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax + -2;
    esi = 0;
    ebx = edi;
    edi += 0x00000008;
    goto loc_1a2f4;
loc_1a283: // 0160:1a283
    if ((int32_t)ebx < 0)
        goto loc_1a2f2;
    if ((int32_t)ebx <= 0)
        goto loc_1a2ee;
    if (ecx >= 0x000003c0)
        goto loc_1a2ee;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    eax += esi;
    esi = 0;
    si = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    esi &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_1a2ee;
    eax = 0x00000001;
    goto loc_1a2f0;
loc_1a2ee: // 0160:1a2ee
    eax = 0;
loc_1a2f0: // 0160:1a2f0
    esi = eax;
loc_1a2f2: // 0160:1a2f2
    ecx++;
    ebx++;
loc_1a2f4: // 0160:1a2f4
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_1a2fc;
    if (!esi)
        goto loc_1a283;
loc_1a2fc: // 0160:1a2fc
    eax = esi;
    goto loc_1744c;
}
void sub_1a303() // 0160:1a303 +long
{
    esp -= 4;
    goto loc_1a303;
loc_177e7: // 0160:177e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11030 bytes
loc_1a303: // 0160:1a303
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21ad0c);
    if (!edx)
        goto loc_1a355;
    ebx = edx + -1;
    memoryASet32(ds, 0x21ad0c, ebx);
    if (ebx)
        goto loc_1a335;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000017);
    goto loc_1a355;
loc_1a335: // 0160:1a335
    if (ebx != 0x0000000c)
        goto loc_1a355;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000012;
    sub_36a16();
loc_1a355: // 0160:1a355
    eax = memoryAGet32(ds, 0x21ad10);
    if (!eax)
        goto loc_1a3bf;
    edx = eax + -1;
    memoryASet32(ds, 0x21ad10, edx);
    if (edx)
        goto loc_1a3bf;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000018);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, 0x00000300);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x21acc0, edx);
    edx = 0x00000640;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21aefc, edx);
    sub_1730a();
    edx = eax;
    eax = 0x00000012;
    sub_36a16();
loc_1a3bf: // 0160:1a3bf
    if (memoryAGet32(ds, 0x21adc4) != 0x00000000)
        goto loc_177e7;
    eax = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += ecx;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_177e7;
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_177e7;
    ebp = memoryAGet32(ds, 0x217a94);
    if (ebp)
        goto loc_177e7;
    if (memoryAGet32(ds, 0x59098) != 0x00000000)
        goto loc_177e7;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000016)
        goto loc_177e7;
    sub_1a248();
    if (eax)
        goto loc_177e7;
    ecx = 0x00000001;
    memoryASet32(ds, 0x21adc4, ecx);
    sub_18178();
    sub_172d6();
    sub_1727a();
    eax = 0x000001f4;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ac8c, eax);
    eax = edx * 0x000000ac;
    esi = 0x00000011;
    ebx = 0;
    memoryASet32(ds, 0x21ac78, esi);
    memoryASet32(ds, 0x21ad88, ecx);
    memoryASet32(ds, 0x21acd0, ebp);
    memoryASet32(ds, eax + 2201934, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, ebx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202066, 0x00000001);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = 0x0000004b;
    memoryASet32(ds, eax + 2201934, ebx);
    memoryASet32(ds, 0x21ad0c, ecx);
    sub_181c7();
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18d41();
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18de2();
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000031;
    sub_36a16();
    goto loc_177e7;
}
void sub_1a513() // 0160:1a513 +long
{
    esp -= 4;
    goto loc_1a513;
loc_177e7: // 0160:177e7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11558 bytes
loc_1a513: // 0160:1a513
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21ad14);
    if (!edx)
        goto loc_1a53a;
    ebx = edx + -1;
    memoryASet32(ds, 0x21ad14, ebx);
    if (ebx)
        goto loc_1a53a;
    memoryASet32(ds, 0x21acc0, ebx);
    sub_272bf();
loc_1a53a: // 0160:1a53a
    if (memoryAGet32(ds, 0x21adc4) != 0x00000000)
        goto loc_177e7;
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_177e7;
    if (memoryAGet32(ds, 0x217a94) != 0x00000000)
        goto loc_177e7;
    if (memoryAGet32(ds, 0x59098) != 0x00000000)
        goto loc_177e7;
    ebx = memoryAGet32(ds, 0x21ac64);
    eax = ebx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000026)
        goto loc_177e7;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    esi = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += esi;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_177e7;
    ebp = 0x00000001;
    eax = ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x21adc4, ebp);
    sub_1730a();
    edx = eax;
    eax = 0x00000042;
    sub_36a16();
    sub_1727a();
    memoryASet32(ds, 0x21ad88, ebp);
    memoryASet32(ds, 0x21ad14, ebp);
    memoryASet32(ds, 0x21adc0, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = 0x000001f4;
    edx = 0x00000010;
    memoryASet32(ds, 0x21ac8c, ecx);
    ebx = 0;
    memoryASet32(ds, 0x21ac78, edx);
    memoryASet32(ds, 0x21acd0, ebx);
    memoryASet32(ds, eax + 2201934, ebx);
    sub_181c7();
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18d41();
    eax = memoryAGet32(ds, 0x21ad6c);
    sub_18de2();
    sub_172d6();
    goto loc_177e7;
}
void sub_1a643() // 0160:1a643 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1a6df;
    ebx = memoryAGet32(ds, 0x217a94);
    if (ebx)
        goto loc_1a6df;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x0000002b)
        goto loc_1a6df;
    if (memoryAGet32(ds, 0x21acd0) == 0x00000000)
        goto loc_1a6df;
    sub_18178();
    sub_1727a();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x21acd4);
    memoryASet32(ds, 0x21ad24, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, 0x21ad1c, eax);
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000010;
    memoryASet32(ds, 0x21acd0, ebx);
    memoryASet32(ds, 0x21ac78, ebp);
    eax -= 0x00000002;
    edx = 0x000001f4;
    memoryASet32(ds, 0x21ad20, eax);
    memoryASet32(ds, 0x21ac8c, edx);
loc_1a6df: // 0160:1a6df
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1a6e3() // 0160:1a6e3 +long
{
    esp -= 4;
    goto loc_1a6e3;
loc_1a242: // 0160:1a242
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1179 bytes
loc_1a6e3: // 0160:1a6e3
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21ae64);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x21ae64, edx);
    if (edx)
        goto loc_1a721;
    eax = 0;
loc_1a707: // 0160:1a707
    eax += 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201858, edx);
    if (eax == 0x00000ac0)
        goto loc_1a788;
    goto loc_1a707;
loc_1a721: // 0160:1a721
    if (edx != 0x00000001)
        goto loc_1a76a;
    edi = 0x00000001;
    eax = 0;
loc_1a72d: // 0160:1a72d
    eax += 0x000000ac;
    memoryASet32(ds, eax + 2201858, edi);
    if (eax != 0x00000ac0)
        goto loc_1a72d;
    eax = memoryAGet32(ds, 0x21ac64);
    al &= 0xfc;
    edx = eax + 4;
    eax = eax * 0x000000ac;
    edx = edx * 0x000000ac;
    goto loc_1a764;
loc_1a757: // 0160:1a757
    eax += 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 2201858, ebp);
loc_1a764: // 0160:1a764
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_1a788;
    goto loc_1a757;
loc_1a76a: // 0160:1a76a
    if (edx != 0x00000002)
        goto loc_1a788;
    esi = 0x00000001;
    eax = 0;
loc_1a776: // 0160:1a776
    eax += 0x000000ac;
    memoryASet32(ds, eax + 2201858, esi);
    if (eax != 0x00000ac0)
        goto loc_1a776;
loc_1a788: // 0160:1a788
    memoryASet32(ds, 0x21aefc, 0x0000000c);
    goto loc_1a242;
}
void sub_1a797() // 0160:1a797 +long
{
    esp -= 4;
    goto loc_1a797;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13125 bytes
loc_1a797: // 0160:1a797
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x21ac60) != 0x00000000)
        goto loc_1a7b8;
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_1a7b8;
    if (memoryAGet32(ds, 0x21ae68) != 0x00000000)
        goto loc_1a7ca;
loc_1a7b8: // 0160:1a7b8
    if (memoryAGet32(ds, 0x21acc0) != 0x00000000)
        goto loc_1a7cf;
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_1a7cf;
loc_1a7ca: // 0160:1a7ca
    sub_17d21();
loc_1a7cf: // 0160:1a7cf
    eax = memoryAGet32(ds, 0x21ac60);
    if (!eax)
        goto loc_1a813;
    if ((int32_t)eax > (int32_t)0x0000012c)
        goto loc_1a813;
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_1a813;
    if (memoryAGet32(ds, 0x21ad88) != 0x00000000)
        goto loc_1a813;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000001e;
    sub_36a16();
loc_1a813: // 0160:1a813
    ecx = memoryAGet32(ds, 0x21ac64);
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201994) == 0x00000000)
        goto loc_1a82f;
    eax = ecx;
    sub_19a3c();
loc_1a82f: // 0160:1a82f
    ebp = memoryAGet32(ds, 0x21af00);
    if (ebp)
        goto loc_1ae10;
    memoryASet32(ds, 0x21acb4, ebp);
    if (memoryAGet32(ds, 0x21ac60) != 0x00000000)
        goto loc_1a8b6;
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_1a8b6;
    edx = memoryAGet32(ds, 0x21ae68);
    if (edx)
        goto loc_1a8b6;
    ebx = 0x00000001;
    eax = 0x0004f650;
    memoryASet32(ds, 0x21ad88, ebx);
    esi = ebx;
    memoryASet32(ds, 0x21af00, ebx);
    ebx = 0x00000032;
    ebp = 0x00000032;
    sub_18dc8();
    ebx = 0x000000ff;
    memoryASet32(ds, 0x21aefc, ebp);
    eax = esi;
    edx = 0;
    memoryASet32(ds, 0x21ae68, eax);
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ad64, edx);
    sub_1730a();
    edx = eax;
    eax = 0x0000002d;
    sub_36a16();
loc_1a8b6: // 0160:1a8b6
    if (memoryAGet32(ds, 0x5c658) != 0x00000046)
        goto loc_1a8c9;
    memoryASet32(ds, 0x21ac60, 0x00000ddd);
loc_1a8c9: // 0160:1a8c9
    sub_1a0a6();
    sub_1a303();
    sub_1a513();
    sub_1a643();
    if (memoryAGet32(ds, 0x21ad30) != 0x00000001)
        goto loc_1a8eb;
    sub_2fd25();
loc_1a8eb: // 0160:1a8eb
    if (memoryAGet(ds, 0x222f8b) == 0x00)
        goto loc_1a902;
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_1a902;
    sub_1a6e3();
loc_1a902: // 0160:1a902
    if (memoryAGet(ds, 0x222f71) != 0x00)
        goto loc_1a913;
    edx = 0;
    memoryASet32(ds, 0x21adec, edx);
loc_1a913: // 0160:1a913
    if (memoryAGet(ds, 0x222f66) == 0x00)
        goto loc_1a921;
    sub_18178();
loc_1a921: // 0160:1a921
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201938);
    if (ebx == 0x0000000f)
        goto loc_1a947;
    if (ebx)
        goto loc_1adc7;
    if (memoryAGet32(ds, eax + 2201994) != 0x00000000)
        goto loc_1adc7;
loc_1a947: // 0160:1a947
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_1a999;
    if ((int32_t)memoryAGet32(ds, 0x21ac60) <= (int32_t)0x00000096)
        goto loc_1a999;
    eax = memoryAGet32(ds, 0x21ac8c);
    edx = eax + -1;
    memoryASet32(ds, 0x21ac8c, edx);
    if ((int32_t)eax > 0)
        goto loc_1a999;
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201994);
    if (ebx)
        goto loc_1a999;
    esi = 0x0000000f;
    memoryASet32(ds, eax + 2201934, ebx);
    memoryASet32(ds, eax + 2201938, esi);
    memoryASet32(ds, 0x21ac8c, 0x000001f4);
loc_1a999: // 0160:1a999
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1a9b0;
    if (memoryAGet32(ds, 0x21ae70) == 0x00000000)
        goto loc_1a9b0;
    sub_181fc();
loc_1a9b0: // 0160:1a9b0
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1a9be;
    sub_1727a();
loc_1a9be: // 0160:1a9be
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1abc5;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201982) == 0x00000000)
        goto loc_1abc5;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_1abc5;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax <<= 2;
    eax += esi;
    eax <<= 2;
    ebp = memoryAGet32(ds, 0x21ad68);
    eax += esi;
    eax += ebp;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) != 0x00000000)
        goto loc_1aa25;
    if (memoryAGet32(ds, 0x21ae84) == 0x00000000)
        goto loc_1abc5;
loc_1aa25: // 0160:1aa25
    if (memoryAGet32(ds, 0x21ad64) != 0x00000000)
        goto loc_1abc5;
    if ((int32_t)memoryAGet32(ds, 0x21ac60) <= (int32_t)0x00000002)
        goto loc_1abc5;
    if (memoryAGet32(ds, 0x21ad0c) != 0x00000000)
        goto loc_1abc5;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_1abc5;
    esi = ecx * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1abc5;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 2202054, ebp);
    memoryASet32(ds, 0x21adec, ebp);
    memoryASet32(ds, 0x21ad88, ebp);
    if (memoryAGet32(ds, esi + 2202006) != 0x0000002b)
        goto loc_1aad8;
    esi = memoryAGet32(ds, 0x21ad1c);
    if (!esi)
        goto loc_1aacd;
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x21ac78);
    memoryASet32(ds, 0x21acb4, ebp);
    edx += 0x00000002;
    memoryASet32(ds, 0x21aefc, eax);
    memoryASet32(ds, 0x21ac78, edx);
    goto loc_1abc5;
loc_1aacd: // 0160:1aacd
    memoryASet32(ds, 0x21ad88, esi);
    goto loc_1abc5;
loc_1aad8: // 0160:1aad8
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x21ac78);
    memoryASet32(ds, 0x21acb4, ebp);
    memoryASet32(ds, 0x21aefc, eax);
    if (edx != 0x00000010)
        goto loc_1ab5e;
    ebx = memoryAGet32(ds, esi + 2202006);
    if (!ebx)
        goto loc_1ab15;
    if (ebx == 0x0000002b)
        goto loc_1ab15;
    if (ebx == 0x00000004)
        goto loc_1ab15;
    if (ebx == 0x00000024)
        goto loc_1ab15;
    if (ebx != 0x00000036)
        goto loc_1ab5e;
loc_1ab15: // 0160:1ab15
    edx = 0x00000002;
    eax = 0;
    sub_24709();
    if (eax < 0x00000001)
        goto loc_1ab2f;
    if (eax <= 0x00000001)
        goto loc_1ab3a;
    if (eax == 0x00000002)
        goto loc_1ab41;
    goto loc_1ab46;
loc_1ab2f: // 0160:1ab2f
    if (eax)
        goto loc_1ab46;
    edi = 0x00000033;
    goto loc_1ab46;
loc_1ab3a: // 0160:1ab3a
    edi = 0x00000016;
    goto loc_1ab46;
loc_1ab41: // 0160:1ab41
    edi = 0x0000003a;
loc_1ab46: // 0160:1ab46
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = edi;
    sub_36a16();
loc_1ab5e: // 0160:1ab5e
    eax = ecx * 0x000000ac;
    memoryASet32(ds, 0x21ac78, memoryAGet32(ds, 0x21ac78) + 0x00000002);
    edi = memoryAGet32(ds, eax + 2202006);
    if (edi == 0x00000006)
        goto loc_1abb2;
    if (edi == 0x00000022)
        goto loc_1abb2;
    if (edi == 0x00000019)
        goto loc_1abb2;
    if (edi == 0x0000001f)
        goto loc_1abb2;
    if (edi == 0x0000000b)
        goto loc_1abb2;
    if (edi == 0x00000033)
        goto loc_1abb2;
    if (edi == 0x0000002f)
        goto loc_1abb2;
    if (edi == 0x00000034)
        goto loc_1abb2;
    if (edi == 0x00000010)
        goto loc_1abb2;
    if (edi == 0x00000014)
        goto loc_1abb2;
    if (edi == 0x00000038)
        goto loc_1abb2;
    if (edi == 0x0000003e)
        goto loc_1abb2;
    if (edi != 0x00000027)
        goto loc_1abc5;
loc_1abb2: // 0160:1abb2
    ebx = 0x00000011;
    ah = 0;
    memoryASet32(ds, 0x21ac78, ebx);
    memoryASet(ds, 0x222f71, ah);
loc_1abc5: // 0160:1abc5
    if (memoryAGet32(ds, 0x21ad30) == 0x00000000)
        goto loc_1abea;
    eax = 0x00000010;
    bl = 0;
    edx = 0;
    memoryASet32(ds, 0x21ac78, eax);
    memoryASet(ds, 0x222f71, bl);
    memoryASet32(ds, 0x21ad88, edx);
    goto loc_1ac1e;
loc_1abea: // 0160:1abea
    if (memoryAGet32(ds, 0x21adc4) != 0x00000000)
        goto loc_1ac05;
    if (memoryAGet32(ds, 0x21ac78) == 0x00000010)
        goto loc_1ac05;
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1ac11;
loc_1ac05: // 0160:1ac05
    if ((int32_t)memoryAGet32(ds, 0x21ac78) <= (int32_t)0x00000096)
        goto loc_1ac1e;
loc_1ac11: // 0160:1ac11
    dh = 0;
    sub_184a3();
    memoryASet(ds, 0x222f54, dh);
loc_1ac1e: // 0160:1ac1e
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_1ac43;
    sub_19f32();
    if (memoryAGet32(ds, 0x21ae88) != 0x00000000)
        goto loc_1ac43;
    if (memoryAGet32(ds, 0x21ac78) != 0x00000010)
        goto loc_1ac43;
    sub_1941e();
loc_1ac43: // 0160:1ac43
    eax = ecx * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 2201974, ebp);
    bh = memoryAGet(ds, 0x222f83);
    memoryASet32(ds, eax + 2202014, ebp);
    if (bh)
        goto loc_1ac6a;
    if (memoryAGet(ds, 0x222f85) == 0x00)
        goto loc_1ac74;
loc_1ac6a: // 0160:1ac6a
    memoryASet32(ds, 0x21ade4, 0x00000001);
loc_1ac74: // 0160:1ac74
    eax = ecx * 0x000000ac;
    esi = memoryAGet32(ds, eax + 2201954);
    if ((int32_t)esi > (int32_t)0x00000200)
        goto loc_1adc7;
    if ((int32_t)esi < 0)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21ac60) == 0x00000000)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21adec) != 0x00000000)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21ad0c) != 0x00000000)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_1adc7;
    if (memoryAGet32(ds, 0x21acd0) != 0x00000000)
        goto loc_1adc7;
    if (memoryAGet(ds, 0x222f83) == 0x00)
        goto loc_1ad00;
    if (memoryAGet32(ds, eax + 2201994) != 0x00000000)
        goto loc_1ad00;
    edx = 0xffffffff;
    eax = ecx;
    sub_19def();
loc_1ad00: // 0160:1ad00
    if (memoryAGet(ds, 0x222f85) == 0x00)
        goto loc_1ad24;
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201994) != 0x00000000)
        goto loc_1ad24;
    edx = 0x00000001;
    eax = ecx;
    sub_19def();
loc_1ad24: // 0160:1ad24
    if (memoryAGet(ds, 0x222f54) == 0x00)
        goto loc_1adbe;
    esi = ecx * 0x000000ac;
    edi = memoryAGet32(ds, esi + 2201954);
    if (edi)
        goto loc_1adbe;
    ebp = memoryAGet32(ds, esi + 2201994);
    if (ebp)
        goto loc_1adbe;
    if (memoryAGet32(ds, esi + 2201990) != 0x00000000)
        goto loc_1adbe;
    eax = memoryAGet32(ds, esi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = ecx;
    sub_261f8();
    if (!eax)
        goto loc_1adbe;
    if (memoryAGet(ds, 0x222f71) != 0x00)
        goto loc_1adbe;
    edx = 0x00000001;
    memoryASet32(ds, 0x21ade8, edi);
    edi = 0x00000092;
    memoryASet32(ds, 0x21acb4, edx);
    memoryASet32(ds, esi + 2201994, edi);
    memoryASet32(ds, esi + 2201974, ebp);
    sub_1727a();
loc_1adbe: // 0160:1adbe
    memoryASet16(ds, 0x21ac52, 0xffff);
loc_1adc7: // 0160:1adc7
    if (memoryAGet32(ds, 0x21acb4) == 0x00000000)
        goto loc_1744b;
    ecx = ecx * 0x000000ac;
    edx = 0x00000001;
    ebx = 0x000001f4;
    memoryASet32(ds, ecx + 2202066, edx);
    memoryASet32(ds, 0x21ac8c, ebx);
    if (memoryAGet32(ds, ecx + 2201938) != 0x0000000f)
        goto loc_1744b;
    edi = 0;
    memoryASet32(ds, ecx + 2201938, edi);
    memoryASet32(ds, ecx + 2201934, edi);
    goto loc_1744b;
loc_1ae10: // 0160:1ae10
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2202014, ebx);
    goto loc_1744b;
}
void sub_1ae27() // 0160:1ae27 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(eax);
    edx = memoryAGet32(ds, 0x21acec);
    esi = 0;
    if (edx)
        goto loc_1afb7;
    ebx = eax * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201990) == 0x00000000)
        goto loc_1afb7;
    if (memoryAGet32(ds, ebx + 2201950) == 0x00000000)
        goto loc_1afb7;
    cl = memoryAGet(ds, esp);
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x21ac52, ax);
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    ecx = 0x000b54d0;
    eax <<= 6;
    ecx += eax;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0;
    eax += eax;
    edx = 0;
    eax += ecx;
    dx = memoryAGet16(ds, 0x21ac52);
    ecx = 0;
    bx = memoryAGet16(ds, eax);
    cx = memoryAGet16(ds, eax + -4);
    ebx &= edx;
    ecx &= edx;
    ecx |= ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + -3840);
    ebx &= edx;
    ax = memoryAGet16(ds, eax + 4);
    ebx |= ecx;
    eax &= 0x0000ffff;
    edx &= eax;
    edx |= ebx;
    if (!edx)
        goto loc_1afb7;
    eax = 0;
loc_1aefa: // 0160:1aefa
    if (dl & 0x01)
        goto loc_1af0b;
    ebx = eax;
    eax++;
    if ((int32_t)ebx >= (int32_t)0x00000010)
        goto loc_1af0b;
    edx = sar32(edx, 0x00000001);
    goto loc_1aefa;
loc_1af0b: // 0160:1af0b
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 2201950);
    esi = 0x00000001;
    if (ebx)
        goto loc_1afb7;
    if (memoryAGet32(ds, edx + 2201954) != 0x00000000)
        goto loc_1afb7;
    if (memoryAGet32(ds, edx + 2201938) != 0x00000000)
        goto loc_1afb7;
    ebx = memoryAGet32(ds, esp) * 0x000000ac;
    ecx = memoryAGet32(ds, ebx + 2201950);
    memoryASet32(ds, edx + 2201950, ecx);
    memoryASet32(ds, edx + 2201990, esi);
    ecx = 0;
    memoryASet32(ds, edx + 2201954, ecx);
    memoryASet32(ds, edx + 2201994, ecx);
    if ((int32_t)memoryAGet32(ds, ebx + 2201950) <= (int32_t)0x00000000)
        goto loc_1af76;
    memoryASet32(ds, edx + 2201982, esi);
    goto loc_1af80;
loc_1af76: // 0160:1af76
    memoryASet32(ds, edx + 2201982, 0xffffffff);
loc_1af80: // 0160:1af80
    eax = eax * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201982);
    memoryASet32(ds, eax + 2201986, edx);
    eax = memoryAGet32(ds, esp);
    edx = 0x00000002;
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000006;
    edx = ecx;
    sub_36a16();
loc_1afb7: // 0160:1afb7
    eax = esi;
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1afc1() // 0160:1afc1 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201998, edx);
    ecx = 0x00000001;
    memoryASet32(ds, eax + 2201934, edx);
    memoryASet32(ds, eax + 2202054, ecx);
    memoryASet32(ds, eax + 2201938, edx);
    memoryASet32(ds, eax + 2201994, edx);
    memoryASet32(ds, eax + 2201950, edx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1aff7() // 0160:1aff7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = eax * 0x000000ac;
    edx = 0x0000001e;
    ebx = 0;
    memoryASet32(ds, eax + 2201938, edx);
    memoryASet32(ds, eax + 2201934, ebx);
    memoryASet32(ds, eax + 2201950, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b01b() // 0160:1b01b +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    eax = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201990, edx);
    memoryASet32(ds, eax + 2201950, edx);
    memoryASet32(ds, eax + 2201954, edx);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 2201978, edx);
    memoryASet32(ds, eax + 2201938, edi);
    memoryASet32(ds, eax + 2201934, edx);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1b051() // 0160:1b051 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201950, ebx);
    memoryASet32(ds, eax + 2201954, ebx);
    edi = 0x0000000e;
    memoryASet32(ds, eax + 2201994, ebx);
    memoryASet32(ds, eax + 2201938, edi);
    memoryASet32(ds, eax + 2201934, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000019;
    sub_36a16();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b09d() // 0160:1b09d +long
{
    esp -= 4;
    goto loc_1b09d;
loc_1b094: // 0160:1b094
    sub_36a16();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1b09d: // 0160:1b09d
    push32(ebx);
    push32(edx);
    push32(edi);
    edx = eax;
    eax = eax * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201950, ebx);
    memoryASet32(ds, eax + 2201954, ebx);
    edi = 0x0000000d;
    memoryASet32(ds, eax + 2201990, ebx);
    memoryASet32(ds, eax + 2201938, edi);
    memoryASet32(ds, eax + 2201934, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000014;
    goto loc_1b094;
}
void sub_1b0e2() // 0160:1b0e2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    esi = eax;
    memoryASet32(ds, esp + 4, edx);
    edi = ebx;
    ebp = ecx;
    edx = 0;
    sub_1ae27();
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    ecx -= 0x00000008;
    memoryASet16(ds, 0x21ac52, dx);
    if ((int32_t)ecx <= 0)
        goto loc_1b1a9;
    if (ebx >= 0x000003c0)
        goto loc_1b1a9;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1b1a9;
    eax = esi * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201954);
    if ((int32_t)ebx >= 0)
        goto loc_1b1a9;
    if (memoryAGet32(ds, 0x21adc8) != 0x00000000)
        goto loc_1b167;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, eax + 2201954, edx);
loc_1b167: // 0160:1b167
    eax = esi * 0x000000ac;
    al = (int32_t)memoryAGet32(ds, eax + 2201954) > (int32_t)0x00000040;
    eax &= 0x000000ff;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if (!eax)
        goto loc_1b1a9;
    eax = esi;
    edx = 0x00000002;
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000003;
    edx = ecx;
    sub_36a16();
loc_1b1a9: // 0160:1b1a9
    ecx = ebp + -4;
    if ((int32_t)ecx <= 0)
        goto loc_1b232;
    eax = edi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_1b232;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    ebx = ecx;
    ebx <<= 4;
    eax = 0;
    ebx -= ecx;
    ax = memoryAGet16(ds, 0x21ac52);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 1643117);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b232;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201950) < (int32_t)0x00000000)
        goto loc_1b2c1;
loc_1b232: // 0160:1b232
    ecx = ebp + -4;
    if ((int32_t)ecx <= 0)
        goto loc_1b32b;
    eax = edi + 4;
    memoryASet32(ds, esp, eax);
    if (eax >= 0x000003c0)
        goto loc_1b32b;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    ax = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    ebx = ecx;
    eax &= 0x0000ffff;
    ebx <<= 4;
    edx = 0;
    ebx -= ecx;
    dx = memoryAGet16(ds, 0x21ac52);
    ebx <<= 6;
    edx &= eax;
    al = memoryAGet(ds, edi + ebx + 1643124);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1b32b;
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201950) <= (int32_t)0x00000000)
        goto loc_1b32b;
loc_1b2c1: // 0160:1b2c1
    memoryASet32(ds, esp + 12, 0x00000001);
    ebx = esi * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 2201950);
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 2201950, eax);
    edx = edi;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = memoryAGet32(ds, ebx + 2201990);
    memoryASet32(ds, ebx + 2201958, eax);
    if (!ecx)
        goto loc_1b32b;
    eax = memoryAGet32(ds, ebx + 2201982);
    eax = -eax;
    memoryASet32(ds, ebx + 2201982, eax);
    memoryASet32(ds, ebx + 2201986, eax);
loc_1b32b: // 0160:1b32b
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1b4db;
    eax = esi * 0x000000ac;
    edx = 0x00000001;
    ebx = memoryAGet32(ds, eax + 2201994);
    memoryASet32(ds, esp + 12, edx);
    if (!ebx)
        goto loc_1b362;
    if ((int32_t)memoryAGet32(ds, eax + 2201954) <= (int32_t)0x00000600)
        goto loc_1b362;
    eax = esi;
    sub_1b051();
loc_1b362: // 0160:1b362
    ebx = esi * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201990) == 0x00000000)
        goto loc_1b49e;
    if ((int32_t)memoryAGet32(ds, ebx + 2201982) <= (int32_t)0x00000000)
        goto loc_1b3a0;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= 0x0000000d;
    ecx = memoryAGet32(ds, ebx + 2202090);
    ebx = eax;
    ebx -= ecx;
    goto loc_1b3be;
loc_1b3a0: // 0160:1b3a0
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, ebx + 2202090);
    eax -= 0x00000003;
    ebx += eax;
loc_1b3be: // 0160:1b3be
    eax = esi * 0x000000ac;
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 2201970);
    eax = memoryAGet32(ds, eax + 2201970);
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x00000140);
    ecx = memoryAGet32(ds, ecx + 2202094);
    eax -= 0x0000000c;
    push32(0x00000010);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 28);
    push32(0x00000010);
    edx = 0x00191270;
    eax = memoryAGet32(ds, eax + 2202098);
    sub_2b017();
    eax = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, eax + 2201950);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_1b443;
    eax = memoryAGet32(ds, esp + 16);
    if ((int32_t)memoryAGet32(ds, eax + 2201954) <= (int32_t)0x00000700)
        goto loc_1b443;
    eax = esi;
    sub_1b09d();
    goto loc_1b49e;
loc_1b443: // 0160:1b443
    eax = esi * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201954) <= (int32_t)0x00000200)
        goto loc_1b479;
    eax = esi;
    edx = 0x00000002;
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000003;
    edx = ecx;
    sub_36a16();
loc_1b479: // 0160:1b479
    ecx = memoryAGet32(ds, 0x217aa8);
    if (ecx == 0x00000001)
        goto loc_1b48e;
    if (ecx == 0x00000006)
        goto loc_1b48e;
    if (ecx != 0x00000009)
        goto loc_1b49e;
loc_1b48e: // 0160:1b48e
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 2202002, 0x00000001);
loc_1b49e: // 0160:1b49e
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201938) != 0x0000001d)
        goto loc_1b4b4;
    eax = esi;
    sub_1aff7();
loc_1b4b4: // 0160:1b4b4
    eax = esi * 0x000000ac;
    ebx = ebp;
    edx = memoryAGet32(ds, eax + 2201962);
    ebx <<= 9;
    edx &= 0x000001ff;
    edx |= ebx;
    memoryASet32(ds, eax + 2201962, edx);
    edx = 0;
    memoryASet32(ds, eax + 2201954, edx);
loc_1b4db: // 0160:1b4db
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201994) == 0x00000000)
        goto loc_1b533;
    if (memoryAGet32(ds, eax + 2201950) == 0x00000000)
        goto loc_1b4fc;
    if (memoryAGet32(ds, eax + 2201954) != 0x00000000)
        goto loc_1b502;
loc_1b4fc: // 0160:1b4fc
    memoryASet32(ds, 0x21ade8, memoryAGet32(ds, 0x21ade8) + 1);
loc_1b502: // 0160:1b502
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201950);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000380)
        goto loc_1b523;
    if (memoryAGet32(ds, ebx + 2201954) == 0x00000000)
        goto loc_1b52c;
loc_1b523: // 0160:1b523
    if ((int32_t)memoryAGet32(ds, 0x21ade8) <= (int32_t)0x00000004)
        goto loc_1b533;
loc_1b52c: // 0160:1b52c
    eax = esi;
    sub_1afc1();
loc_1b533: // 0160:1b533
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201990) == 0x00000000)
        goto loc_1b64a;
    if ((int32_t)ebp <= 0)
        goto loc_1b5b0;
    if (edi >= 0x000003c0)
        goto loc_1b5b0;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (eax)
        goto loc_1b61d;
loc_1b5b0: // 0160:1b5b0
    ebp++;
    if ((int32_t)ebp <= 0)
        goto loc_1b616;
    if (edi >= 0x000003c0)
        goto loc_1b616;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    edx = edi;
    ebx <<= 4;
    edx = sar32(edx, 0x1f);
    ebx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b61d;
loc_1b616: // 0160:1b616
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1b64a;
loc_1b61d: // 0160:1b61d
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201950);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1b64a;
    eax = memoryAGet32(ds, ebx + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_1b64a;
    eax = esi;
    sub_1b01b();
loc_1b64a: // 0160:1b64a
    esi = esi * 0x000000ac;
    if (memoryAGet32(ds, esi + 2201954) != 0x00000000)
        goto loc_1b67b;
    edi = memoryAGet32(ds, 0x21acb0);
    edx = memoryAGet32(ds, esi + 2201950);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, esi + 2201950, eax);
loc_1b67b: // 0160:1b67b
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1b682() // 0160:1b682 +long
{
    esp -= 4;
    goto loc_1b682;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16944 bytes
loc_1b682: // 0160:1b682
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    edx = 0;
    memoryASet16(ds, 0x21ac52, dx);
    edx = memoryAGet32(ds, 0x21addc);
    edx++;
    ebx = edx;
    memoryASet32(ds, 0x21addc, edx);
    ebx &= 0x0000000f;
    ecx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21addc, ebx);
    esi = ebx;
    if (ebx == ecx)
        goto loc_1b759;
    ebx = ebx * 0x000000ac;
    edi = memoryAGet32(ds, ebx + 2201958);
    if (!edi)
        goto loc_1b759;
    if (memoryAGet32(ds, ebx + 2201990) != 0x00000000)
        goto loc_1b759;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b733;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b733;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1b73a;
loc_1b733: // 0160:1b733
    eax = 0x00000001;
    goto loc_1b73c;
loc_1b73a: // 0160:1b73a
    eax = 0;
loc_1b73c: // 0160:1b73c
    if (!eax)
        goto loc_1b759;
    eax = memoryAGet32(ds, 0x21addc) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, memoryAGet32(ds, eax + 2201954) + 0x00000200);
    goto loc_1b866;
loc_1b759: // 0160:1b759
    eax = memoryAGet32(ds, 0x21ac64);
    if (esi != eax)
        goto loc_1b866;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_1b866;
    if (memoryAGet32(ds, eax + 2201990) != 0x00000000)
        goto loc_1b866;
    if (memoryAGet32(ds, eax + 2201954) != 0x00000000)
        goto loc_1b866;
    if (memoryAGet32(ds, eax + 2202014) != 0x00000000)
        goto loc_1b866;
    if (memoryAGet32(ds, eax + 2201994) != 0x00000000)
        goto loc_1b866;
    ebx = memoryAGet32(ds, 0x21addc) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_1b845;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b845;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ebx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b84c;
loc_1b845: // 0160:1b845
    eax = 0x00000001;
    goto loc_1b84e;
loc_1b84c: // 0160:1b84c
    eax = 0;
loc_1b84e: // 0160:1b84e
    if (!eax)
        goto loc_1b866;
    eax = memoryAGet32(ds, 0x21addc) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, memoryAGet32(ds, eax + 2201954) + 0x00000080);
loc_1b866: // 0160:1b866
    edi = 0;
    esi = 0;
loc_1b86a: // 0160:1b86a
    if (memoryAGet32(ds, esi + 2201958) == 0x00000000)
        goto loc_1bca5;
    if (memoryAGet32(ds, esi + 2201950) != 0x00000000)
        goto loc_1b8b1;
    if (memoryAGet32(ds, esi + 2201954) != 0x00000000)
        goto loc_1b8b1;
    if (memoryAGet32(ds, esi + 2201974) != 0x00000000)
        goto loc_1b8b1;
    if (memoryAGet32(ds, esi + 2201938) != 0x00000000)
        goto loc_1b8b1;
    if (memoryAGet32(ds, esi + 2201998) != 0x00000000)
        goto loc_1b8b1;
    if (memoryAGet32(ds, esi + 2201990) == 0x00000000)
        goto loc_1bca5;
loc_1b8b1: // 0160:1b8b1
    if (memoryAGet32(ds, esi + 2201974) != 0x00000000)
        goto loc_1b8d5;
    if (memoryAGet32(ds, esi + 2201950) != 0x00000000)
        goto loc_1b8d5;
    if (memoryAGet32(ds, esi + 2201990) != 0x00000000)
        goto loc_1b8d5;
    if (memoryAGet32(ds, esi + 2201938) == 0x00000000)
        goto loc_1b8df;
loc_1b8d5: // 0160:1b8d5
    memoryASet32(ds, esi + 2202030, 0x00000001);
loc_1b8df: // 0160:1b8df
    eax = memoryAGet32(ds, esi + 2201974);
    edx = memoryAGet32(ds, esi + 2201958);
    ebx = 0;
    edx += eax;
    memoryASet32(ds, esi + 2201974, ebx);
    memoryASet32(ds, esi + 2201958, edx);
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1b9e8;
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_1b9e8;
    if (memoryAGet32(ds, esi + 2202006) != 0x00000014)
        goto loc_1b9e8;
    eax = memoryAGet32(ds, esi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 5;
    if ((int32_t)ecx <= 0)
        goto loc_1b9ab;
    eax = memoryAGet32(ds, esi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1b9ab;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    ecx = ecx * 0x000003c0;
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_1b9b2;
loc_1b9ab: // 0160:1b9ab
    eax = 0x00000001;
    goto loc_1b9b4;
loc_1b9b2: // 0160:1b9b2
    eax = 0;
loc_1b9b4: // 0160:1b9b4
    if (!eax)
        goto loc_1b9e8;
    ebx = memoryAGet32(ds, 0x21ae60);
    ecx = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx++;
    memoryASet32(ds, 0x21ae60, ebx);
    if (edx)
        goto loc_1b9de;
    eax = edi;
    sub_1c6e1();
loc_1b9de: // 0160:1b9de
    memoryASet32(ds, esi + 2201962, memoryAGet32(ds, esi + 2201962) + 0x00000400);
loc_1b9e8: // 0160:1b9e8
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1ba24;
    if (memoryAGet32(ds, 0x21accc) != 0x00000000)
        goto loc_1bca5;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_1bca5;
    if (memoryAGet32(ds, esi + 2201938) == 0x00000018)
        goto loc_1bca5;
    if (memoryAGet32(ds, 0x21acec) != 0x00000000)
        goto loc_1bca5;
loc_1ba24: // 0160:1ba24
    eax = memoryAGet32(ds, esi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_1ba9e;
    ebx = eax;
    eax = eax * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 12);
    edx = esi;
    ebx <<= 9;
    eax += ebp;
loc_1ba6a: // 0160:1ba6a
    ecx = 0;
    cl = memoryAGet(ds, eax + 1643120);
    if (ecx == 0x00000080)
        goto loc_1ba9e;
    ecx = memoryAGet32(ds, esp + 8);
    eax -= 0x000003c0;
    ebx -= 0x00000200;
    ebp = 0;
    memoryASet32(ds, edx + 2201962, ebx);
    ecx--;
    memoryASet32(ds, edx + 2201954, ebp);
    memoryASet32(ds, esp + 8, ecx);
    goto loc_1ba6a;
loc_1ba9e: // 0160:1ba9e
    eax = memoryAGet32(ds, esi + 2201950);
    edx = memoryAGet32(ds, esi + 2201958);
    ecx = memoryAGet32(ds, esi + 2201962);
    edx += eax;
    eax = memoryAGet32(ds, esi + 2201954);
    memoryASet32(ds, esi + 2201958, edx);
    ecx += eax;
    memoryASet32(ds, esi + 2201962, ecx);
    ecx = 0;
    ebp = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x21ac52, cx);
    ecx = ebp + 1;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)ecx <= 0)
        goto loc_1bb1a;
    if (ebx >= 0x000003c0)
        goto loc_1bb1a;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ecx = ecx * 0x000003c0;
    eax = ebx;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1bb21;
loc_1bb1a: // 0160:1bb1a
    eax = 0x00000001;
    goto loc_1bb23;
loc_1bb21: // 0160:1bb21
    eax = 0;
loc_1bb23: // 0160:1bb23
    if (eax)
        goto loc_1bb2e;
    if ((int32_t)memoryAGet32(ds, esp + 8) >= (int32_t)0x00000008)
        goto loc_1bb39;
loc_1bb2e: // 0160:1bb2e
    eax = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, esi + 2201954, memoryAGet32(ds, esi + 2201954) + eax);
loc_1bb39: // 0160:1bb39
    eax = memoryAGet32(ds, esi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x21acec);
    memoryASet32(ds, esp + 8, eax);
    if (ecx)
        goto loc_1bbca;
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1bba4;
    if (memoryAGet32(ds, esi + 2201994) == 0x00000000)
        goto loc_1bba4;
    if ((int32_t)memoryAGet32(ds, esi + 2201954) >= (int32_t)0x00000000)
        goto loc_1bba4;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_26d3f();
    goto loc_1bbbe;
loc_1bba4: // 0160:1bba4
    eax = esp;
    push32(eax);
    eax = esp + 8;
    push32(eax);
    edx = esp + 20;
    ecx = ebx;
    push32(ebp);
    ebx = esp + 20;
    eax = edi;
    sub_2628a();
loc_1bbbe: // 0160:1bbbe
    ebp = eax;
    eax = 0;
    memoryASet16(ds, 0x21ac52, ax);
    goto loc_1bbe3;
loc_1bbca: // 0160:1bbca
    eax = esp;
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ecx = ebp;
    eax = esp + 20;
    sub_26d3f();
    ebp = eax;
loc_1bbe3: // 0160:1bbe3
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000008)
        goto loc_1bc15;
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1bc04;
    if (memoryAGet32(ds, 0x21adbc) == 0x00000000)
        goto loc_1bc04;
    if ((int32_t)memoryAGet32(ds, esi + 2201954) < (int32_t)0x00000000)
        goto loc_1bc15;
loc_1bc04: // 0160:1bc04
    ecx = memoryAGet32(ds, esp + 8);
    ebx = memoryAGet32(ds, esp + 12);
    edx = ebp;
    eax = edi;
    sub_1b0e2();
loc_1bc15: // 0160:1bc15
    if ((int32_t)memoryAGet32(ds, esi + 2201994) <= (int32_t)0x00000041)
        goto loc_1bc33;
    eax = memoryAGet32(ds, esp + 8);
    edx = 0;
    eax <<= 9;
    memoryASet32(ds, esi + 2201954, edx);
    memoryASet32(ds, esi + 2201962, eax);
loc_1bc33: // 0160:1bc33
    if ((int32_t)memoryAGet32(ds, esi + 2201954) <= (int32_t)0x00000800)
        goto loc_1bc68;
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1bc55;
    eax = memoryAGet32(ds, 0x21ae54);
    if (eax)
        goto loc_1bc55;
    memoryASet32(ds, 0x21acc0, eax);
loc_1bc55: // 0160:1bc55
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, esi + 2201990, ebx);
    memoryASet32(ds, esi + 2201994, ecx);
loc_1bc68: // 0160:1bc68
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1bc7c;
    if (!ebp)
        goto loc_1bc7c;
    edx = 0;
    memoryASet32(ds, 0x21ae54, edx);
loc_1bc7c: // 0160:1bc7c
    ebx = memoryAGet32(ds, esi + 2201958);
    if ((int32_t)ebx < 0)
        goto loc_1bc98;
    if ((int32_t)ebx > (int32_t)0x00078000)
        goto loc_1bc98;
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_1bca5;
loc_1bc98: // 0160:1bc98
    memoryASet32(ds, 0x5a5f0, memoryAGet32(ds, 0x5a5f0) + 1);
    eax = edi;
    sub_17452();
loc_1bca5: // 0160:1bca5
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1b86a;
    esp += 0x00000010;
    goto loc_1744b;
}
void sub_1bcbd() // 0160:1bcbd +long
{
    esp -= 4;
    goto loc_1bcbd;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18539 bytes
loc_1bcbd: // 0160:1bcbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201938) != 0x0000000a)
        goto loc_1bd52;
    if ((int32_t)memoryAGet32(ds, eax + 2201982) <= (int32_t)0x00000000)
        goto loc_1bce8;
    esi = 0xfffffff8;
    goto loc_1bced;
loc_1bce8: // 0160:1bce8
    esi = 0x00000002;
loc_1bced: // 0160:1bced
    edi = ebp * 0x000000ac;
    push32(0x0000000a);
    eax = esi + 12;
    ecx = 0x0000001e;
    eax <<= 9;
    ebx = memoryAGet32(ds, edi + 2201958);
    edx = memoryAGet32(ds, edi + 2201962);
    ebx -= eax;
    edx -= 0x00003000;
    eax = ebx;
    ebx = 0x00000019;
    sub_2704a();
    ecx = memoryAGet32(ds, edi + 2201958);
    if (ecx >= 0x00078000)
        goto loc_1bd44;
    eax = memoryAGet32(ds, edi + 2201962);
    if ((int32_t)eax >= (int32_t)0x0002fc00)
        goto loc_1bd44;
    edx = eax;
    eax = ecx;
    sub_2c5ef();
loc_1bd44: // 0160:1bd44
    eax = ebp * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201958, edx);
loc_1bd52: // 0160:1bd52
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 2202054, 0x00000002);
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_1be1e;
    edi = memoryAGet32(ds, eax + 2202006);
    if (edi == 0x00000010)
        goto loc_1bd83;
    if (edi != 0x00000014)
        goto loc_1be1e;
loc_1bd83: // 0160:1bd83
    if (memoryAGet32(ds, 0x21ae50) == 0x00000000)
        goto loc_1bd98;
    memoryASet32(ds, 0x21accc, 0x00000001);
    goto loc_1bd9e;
loc_1bd98: // 0160:1bd98
    memoryASet32(ds, 0x21accc, memoryAGet32(ds, 0x21accc) - 1);
loc_1bd9e: // 0160:1bd9e
    eax = ebp * 0x000000ac;
    esi = memoryAGet32(ds, eax + 2201938);
    edi = esi;
    edi <<= 2;
    edi -= esi;
    edx = memoryAGet32(ds, edi * 8 + 0x5943a);
    edx += 0x00000006;
    edx <<= 4;
    memoryASet32(ds, eax + 2201934, edx);
    edi = memoryAGet32(ds, eax + 2201962);
    edi += memoryAGet32(ds, 0x21acf4);
    edx = memoryAGet32(ds, eax + 2201982);
    memoryASet32(ds, eax + 2201962, edi);
    if (edx != 0x00000001)
        goto loc_1bdef;
    edx = memoryAGet32(ds, 0x21acf0);
    memoryASet32(ds, eax + 2201958, memoryAGet32(ds, eax + 2201958) + edx);
    goto loc_1bdfb;
loc_1bdef: // 0160:1bdef
    edx = memoryAGet32(ds, 0x21acf0);
    memoryASet32(ds, eax + 2201958, memoryAGet32(ds, eax + 2201958) - edx);
loc_1bdfb: // 0160:1bdfb
    ebp = ebp * 0x000000ac;
    eax = memoryAGet32(ss, ebp + 2201958);
    memoryASet32(ss, ebp + 2201966, eax);
    eax = memoryAGet32(ss, ebp + 2201962);
    memoryASet32(ss, ebp + 2201970, eax);
    goto loc_1bed5;
loc_1be1e: // 0160:1be1e
    eax = ebp * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201938);
    if ((int32_t)ebx < (int32_t)0x00000019)
        goto loc_1be90;
    if ((int32_t)ebx > (int32_t)0x0000001d)
        goto loc_1be90;
    if ((int32_t)memoryAGet32(ds, eax + 2201954) >= (int32_t)0xffffff9a)
        goto loc_1be42;
    esi = 0x0000001b;
loc_1be42: // 0160:1be42
    eax = ebp * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1be5d;
    esi = 0x0000001c;
loc_1be5d: // 0160:1be5d
    eax = ebp * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201954) <= (int32_t)0x00000066)
        goto loc_1be71;
    esi = 0x0000001d;
loc_1be71: // 0160:1be71
    ebp = ebp * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax <<= 4;
    memoryASet32(ss, ebp + 2201938, esi);
    goto loc_1becf;
loc_1be90: // 0160:1be90
    ebp = ebp * 0x000000ac;
    esi = 0;
    memoryASet32(ss, ebp + 2201938, esi);
    esi = memoryAGet32(ss, ebp + 2202006);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, eax * 8 + 0x59446);
    memoryASet32(ss, ebp + 2202090, edx);
    edx = memoryAGet32(ds, eax * 8 + 0x5944a);
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    memoryASet32(ss, ebp + 2202094, edx);
    eax <<= 4;
loc_1becf: // 0160:1becf
    memoryASet32(ss, ebp + 2201934, eax);
loc_1bed5: // 0160:1bed5
    eax = esi;
    goto loc_1744b;
}
void sub_1bedc() // 0160:1bedc +long
{
    esp -= 4;
    goto loc_1bedc;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19082 bytes
loc_1bedc: // 0160:1bedc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax * 0x000000ac;
    memoryASet32(ds, 0x21aefc, 0x00000032);
    if (memoryAGet32(ds, ebx + 2201990) == 0x00000000)
        goto loc_1bf8e;
    esi = 0;
    edi = memoryAGet32(ds, ebx + 2202002);
    memoryASet32(ds, ebx + 2201994, esi);
    if (!edi)
        goto loc_1bf50;
    eax = memoryAGet32(ds, ebx + 2201934);
    eax += 0x00000002;
    eax &= 0x0000003f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 2201934, eax);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ecx = 0xfffffffc;
    esi = 0xfffffffe;
    memoryASet32(ds, ebx + 2202090, ecx);
    memoryASet32(ds, ebx + 2202094, esi);
    eax += 0x00000137;
    goto loc_1744b;
loc_1bf50: // 0160:1bf50
    eax = memoryAGet32(ds, ebx + 2201934);
    eax += 0x00000004;
    eax &= 0x0000007f;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 2201934, eax);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    memoryASet32(ds, ebx + 2202090, 0xfffffffc);
    edx = 0xfffffffe;
    eax += 0x0000012f;
    memoryASet32(ds, ebx + 2202094, edx);
    goto loc_1744b;
loc_1bf8e: // 0160:1bf8e
    esi = memoryAGet32(ds, ebx + 2201994);
    esi -= 0x00000004;
    memoryASet32(ds, ebx + 2201994, esi);
    if ((int32_t)esi > (int32_t)0x00000001)
        goto loc_1bfab;
    ebp = esi + 64;
    memoryASet32(ds, ebx + 2201994, ebp);
loc_1bfab: // 0160:1bfab
    ebx = eax * 0x000000ac;
    edx = memoryAGet32(ds, ebx + 2201994);
    edx--;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = 0x00000009;
    edx -= eax;
    ecx = 0;
    eax = edx + 530;
    memoryASet32(ds, ebx + 2202094, ecx);
    memoryASet32(ds, ebx + 2202090, 0xfffffffd);
    goto loc_1744b;
}
void sub_1bfe9() // 0160:1bfe9 +long
{
    esp -= 4;
    goto loc_1bfe9;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19351 bytes
loc_1bfe9: // 0160:1bfe9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    edx = ebx * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2202006);
    eax = 0;
    if (edx < 0x00000010)
        goto loc_1c02d;
    if (edx <= 0x00000010)
        goto loc_1c111;
    if (edx < 0x0000002b)
        goto loc_1c01f;
    if (edx <= 0x0000002b)
        goto loc_1c068;
    if (edx == 0x0000002f)
        goto loc_1c0ec;
    goto loc_1744b;
loc_1c01f: // 0160:1c01f
    if (edx == 0x00000027)
        goto loc_1c0c4;
    goto loc_1744b;
loc_1c02d: // 0160:1c02d
    if (edx <= 0)
        goto loc_1c03b;
    if (edx == 0x00000006)
        goto loc_1c096;
    goto loc_1744b;
loc_1c03b: // 0160:1c03b
    eax = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_1c04f;
    eax = 0x00000003;
    goto loc_1c13c;
loc_1c04f: // 0160:1c04f
    if ((int32_t)eax >= (int32_t)0xfffffff0)
        goto loc_1c05e;
    eax = 0x00000002;
    goto loc_1c13c;
loc_1c05e: // 0160:1c05e
    eax = 0x00000001;
    goto loc_1c13c;
loc_1c068: // 0160:1c068
    esi = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)esi <= (int32_t)0x00000010)
        goto loc_1c07d;
    eax = 0x0000002e;
    goto loc_1c13c;
loc_1c07d: // 0160:1c07d
    if ((int32_t)esi >= (int32_t)0xfffffff0)
        goto loc_1c08c;
    eax = 0x0000002d;
    goto loc_1c13c;
loc_1c08c: // 0160:1c08c
    eax = 0x0000002c;
    goto loc_1c13c;
loc_1c096: // 0160:1c096
    edi = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)edi <= (int32_t)0x00000010)
        goto loc_1c0ab;
    eax = 0x00000009;
    goto loc_1c13c;
loc_1c0ab: // 0160:1c0ab
    if ((int32_t)edi >= (int32_t)0xfffffff0)
        goto loc_1c0ba;
    eax = 0x00000008;
    goto loc_1c13c;
loc_1c0ba: // 0160:1c0ba
    eax = 0x00000007;
    goto loc_1c13c;
loc_1c0c4: // 0160:1c0c4
    ebp = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)ebp <= (int32_t)0x00000010)
        goto loc_1c0d9;
    eax = 0x0000002a;
    goto loc_1c13c;
loc_1c0d9: // 0160:1c0d9
    if ((int32_t)ebp >= (int32_t)0xfffffff0)
        goto loc_1c0e5;
    eax = 0x00000029;
    goto loc_1c13c;
loc_1c0e5: // 0160:1c0e5
    eax = 0x00000028;
    goto loc_1c13c;
loc_1c0ec: // 0160:1c0ec
    edx = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)edx <= (int32_t)0x00000010)
        goto loc_1c0fe;
    eax = 0x00000032;
    goto loc_1c13c;
loc_1c0fe: // 0160:1c0fe
    if ((int32_t)edx >= (int32_t)0xfffffff0)
        goto loc_1c10a;
    eax = 0x00000031;
    goto loc_1c13c;
loc_1c10a: // 0160:1c10a
    eax = 0x00000030;
    goto loc_1c13c;
loc_1c111: // 0160:1c111
    edx = memoryAGet32(ds, 0x21acf0);
    eax = 0x00000011;
    if (!edx)
        goto loc_1c13c;
    ecx = memoryAGet32(ds, 0x21ac84);
    if ((int32_t)ecx <= (int32_t)0x00000010)
        goto loc_1c132;
    eax = 0x00000013;
    goto loc_1c13c;
loc_1c132: // 0160:1c132
    if ((int32_t)ecx >= (int32_t)0xfffffff0)
        goto loc_1c13c;
    eax = 0x00000012;
loc_1c13c: // 0160:1c13c
    ebx = ebx * 0x000000ac;
    memoryASet32(ds, ebx + 2201942, eax);
    goto loc_1744b;
}
void sub_1c14d() // 0160:1c14d +long
{
    esp -= 4;
    goto loc_1c14d;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19707 bytes
loc_1c14d: // 0160:1c14d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = memoryAGet32(ds, 0x21ac64);
    eax = esi * 0x000000ac;
    if (ecx < 0x00000023)
        goto loc_1c1d4;
    if (ecx <= 0x00000023)
        goto loc_1c566;
    if (ecx < 0x0000002f)
        goto loc_1c1ad;
    if (ecx <= 0x0000002f)
        goto loc_1c335;
    if (ecx < 0x00000037)
        goto loc_1c19f;
    if (ecx <= 0x00000037)
        goto loc_1c29d;
    if (ecx < 0x00000040)
        goto loc_1744b;
    if (ecx <= 0x00000040)
        goto loc_1c680;
    if (ecx == 0x00000041)
        goto loc_1c6b8;
    goto loc_1744b;
loc_1c19f: // 0160:1c19f
    if (ecx == 0x00000035)
        goto loc_1c592;
    goto loc_1744b;
loc_1c1ad: // 0160:1c1ad
    if (ecx < 0x00000027)
        goto loc_1c1c6;
    if (ecx <= 0x00000027)
        goto loc_1c335;
    if (ecx < 0x0000002c)
        goto loc_1744b;
    goto loc_1c2e2;
loc_1c1c6: // 0160:1c1c6
    if (ecx == 0x00000025)
        goto loc_1c26b;
    goto loc_1744b;
loc_1c1d4: // 0160:1c1d4
    if (ecx < 0x00000016)
        goto loc_1c206;
    if (ecx <= 0x00000016)
        goto loc_1c366;
    if (ecx < 0x00000020)
        goto loc_1c1f8;
    if (ecx <= 0x00000020)
        goto loc_1c4be;
    if (ecx == 0x00000021)
        goto loc_1c509;
    goto loc_1744b;
loc_1c1f8: // 0160:1c1f8
    if (ecx == 0x0000001a)
        goto loc_1c407;
    goto loc_1744b;
loc_1c206: // 0160:1c206
    if (ecx < 0x00000005)
        goto loc_1c224;
    if (ecx <= 0x00000005)
        goto loc_1c23b;
    if (ecx < 0x00000007)
        goto loc_1744b;
    if (ecx <= 0x00000009)
        goto loc_1c31c;
    goto loc_1744b;
loc_1c224: // 0160:1c224
    if (ecx < 0x00000001)
        goto loc_1744b;
    if (ecx <= 0x00000003)
        goto loc_1c2cf;
    goto loc_1744b;
loc_1c23b: // 0160:1c23b
    eax = 0x00000004;
    edi = 0x00000010;
    ebp = 0x00000032;
    sub_276ce();
    eax = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21ac78, edi);
    eax--;
    memoryASet32(ds, 0x21aefc, ebp);
    memoryASet32(ds, 0x21acc0, eax);
    goto loc_1744b;
loc_1c26b: // 0160:1c26b
    eax = 0x00000024;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_276ce();
loc_1c27f: // 0160:1c27f
    esi = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21ac78, ebx);
    esi--;
loc_1c28c: // 0160:1c28c
    memoryASet32(ds, 0x21aefc, ecx);
    memoryASet32(ds, 0x21acc0, esi);
    goto loc_1744b;
loc_1c29d: // 0160:1c29d
    eax = 0x00000036;
    edx = 0x00000010;
    ebx = 0x00000032;
    sub_276ce();
loc_1c2b1: // 0160:1c2b1
    ecx = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21ac78, edx);
    ecx--;
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x21acc0, ecx);
    goto loc_1744b;
loc_1c2cf: // 0160:1c2cf
    edx = 0x00000010;
    eax = 0;
    ebx = 0x00000032;
    sub_28c2f();
    goto loc_1c2b1;
loc_1c2e2: // 0160:1c2e2
    eax = 0x00000002;
    ecx = 0x00000010;
    esi = 0x00000032;
    sub_28c2f();
    ebx = 0;
    edi = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21acd0, ebx);
    memoryASet32(ds, 0x21ac78, ecx);
    edi--;
    memoryASet32(ds, 0x21aefc, esi);
    memoryASet32(ds, 0x21acc0, edi);
    goto loc_1744b;
loc_1c31c: // 0160:1c31c
    eax = 0x00000001;
    ebx = 0x00000010;
    ecx = 0x00000032;
    sub_28c2f();
    goto loc_1c27f;
loc_1c335: // 0160:1c335
    eax = 0x00000001;
    ebp = 0x00000010;
    sub_28c2f();
    eax = 0x00000032;
    edx = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21ac78, ebp);
    edx--;
    memoryASet32(ds, 0x21aefc, eax);
    memoryASet32(ds, 0x21acc0, edx);
    goto loc_1744b;
loc_1c366: // 0160:1c366
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 4;
    eax = esi * 0x000000ac;
    memoryASet32(ds, 0x21ac78, 0x00000010);
    edx <<= 9;
    memoryASet32(ds, eax + 2201958, edx);
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax + 2;
    eax = esi * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 2201962, edx);
    eax = esi * 0x000000ac;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, edx + 2201966, eax);
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201962);
    edx = 0x00000032;
    memoryASet32(ds, esi + 2201970, eax);
    sub_18178();
    eax = 0x0000004b;
    memoryASet32(ds, 0x21aefc, edx);
    memoryASet32(ds, 0x21ad10, eax);
    goto loc_1744b;
loc_1c407: // 0160:1c407
    eax = esi;
    edx = esi * 0x000000ac;
    edi = 0x00000010;
    ebp = 0;
    memoryASet32(ds, 0x21ac78, edi);
    sub_1c999();
    eax = 0x00000001;
    memoryASet32(ds, 0x21ae5c, ebp);
    memoryASet32(ds, 0x21adbc, eax);
    eax = memoryAGet32(ds, edx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = esi * 0x000000ac;
    ebx = eax + -4;
    eax = memoryAGet32(ds, edx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax;
    eax = esi;
    sub_261f8();
    if (eax)
        goto loc_1c47d;
    eax = esi * 0x000000ac;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000800);
loc_1c47d: // 0160:1c47d
    eax = esi * 0x000000ac;
    ebx = 0xfffffa01;
    ecx = 0x00000032;
    edi = 0;
    memoryASet32(ds, eax + 2201954, ebx);
    ebx = 0x000000ff;
    memoryASet32(ds, 0x21aefc, ecx);
    eax = esi;
    memoryASet32(ds, 0x21acc0, edi);
    sub_1730a();
    edx = eax;
    eax = 0x00000034;
loc_1c4b4: // 0160:1c4b4
    sub_36a16();
    goto loc_1744b;
loc_1c4be: // 0160:1c4be
    eax = esi * 0x000000ac;
    esi = esi * 0x000000ac;
    ecx = 0x00000001;
    edi = 0x00000021;
    memoryASet32(ds, 0x21acec, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 2201938, edi);
    memoryASet32(ds, esi + 2201934, ebp);
    if (memoryAGet32(ds, 0x21ad00) != 0x00000000)
        goto loc_1c4fd;
    memoryASet32(ds, 0x21ad00, ecx);
    memoryASet32(ds, 0x21ad04, ebp);
loc_1c4fd: // 0160:1c4fd
    ecx = 0x00000032;
    esi = 0;
    goto loc_1c28c;
loc_1c509: // 0160:1c509
    if (memoryAGet32(ds, eax + 2201950) != 0x00000000)
        goto loc_1c52a;
    eax = esi;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000025;
    sub_36a16();
loc_1c52a: // 0160:1c52a
    esi = esi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2201982);
    eax <<= 12;
    memoryASet32(ds, esi + 2201950, eax);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax <<= 4;
    ebx = 0x00000032;
    memoryASet32(ds, esi + 2201934, eax);
    memoryASet32(ds, 0x21aefc, ebx);
    goto loc_1744b;
loc_1c566: // 0160:1c566
    eax = 0x00000022;
    edi = 0x00000010;
    sub_28c2f();
    ebp = 0;
    eax = 0x00000032;
    memoryASet32(ds, 0x21ac78, edi);
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21aefc, eax);
    goto loc_1744b;
loc_1c592: // 0160:1c592
    edi = 0x00000010;
    edx = 0x00000032;
    ebp = 0;
    memoryASet32(ds, 0x21ac78, edi);
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21aefc, edx);
    ebx = memoryAGet32(ds, eax + 2201982);
    edx = 0xfffff400;
    if ((int32_t)ebx <= 0)
        goto loc_1c5c4;
    edx = 0x00000a00;
loc_1c5c4: // 0160:1c5c4
    esi = esi * 0x000000ac;
    ecx = 0x00002400;
    ebx = 0x00001000;
    eax = memoryAGet32(ds, esi + 2201962);
    edi = memoryAGet32(ds, esi + 2201958);
    eax -= 0x00000800;
    edi += edx;
    edx = eax;
    eax = edi;
    sub_29340();
    if (!eax)
        goto loc_1744b;
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2201934, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = memoryAGet32(ds, esi + 2201982);
    memoryASet32(ds, eax + 2201982, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx <<= 9;
    memoryASet32(ds, eax + 2201950, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edi = 0;
    memoryASet32(ds, eax + 2201954, edi);
    eax = memoryAGet32(ds, 0x21ac64);
    edx = 0x00000002;
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x00000040;
    sub_24709();
    eax += 0x00000003;
    edx = ecx;
    goto loc_1c4b4;
loc_1c680: // 0160:1c680
    edi = 0x00000041;
    ebp = 0;
    memoryASet32(ds, eax + 2201938, edi);
    memoryASet32(ds, eax + 2201934, ebp);
    memoryASet32(ds, 0x21aefc, 0x00000032);
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000002e;
    goto loc_1c4b4;
loc_1c6b8: // 0160:1c6b8
    edx = 0x00000003;
    ebx = 0;
    memoryASet32(ds, 0x21ad30, edx);
    memoryASet32(ds, eax + 2201938, ebx);
    esi = 0x00000032;
    memoryASet32(ds, eax + 2201934, ebx);
    memoryASet32(ds, 0x21aefc, esi);
    goto loc_1744b;
}
void sub_1c6e1() // 0160:1c6e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 2201982);
    ecx = eax + -3;
    if (edx != 0x00000001)
        goto loc_1c72b;
    eax = 0x0018af60;
    esi -= 0x00000002;
    goto loc_1c733;
loc_1c72b: // 0160:1c72b
    eax = 0x0014c4a0;
    esi -= 0x0000000e;
loc_1c733: // 0160:1c733
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000008);
    edx = 0x00191270;
    push32(0x00000010);
    ecx -= 0x00000002;
    ebx = esi;
    sub_2b017();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c755() // 0160:1c755 +long
{
    esp -= 4;
    goto loc_1c755;
loc_19de9: // 0160:19de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10598 bytes
loc_1c755: // 0160:1c755
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 2201982);
    ebp = eax;
    if (edx != 0x00000001)
        goto loc_1c7a4;
    eax = 0x00000002;
    goto loc_1c7a9;
loc_1c7a4: // 0160:1c7a4
    eax = 0xfffffffc;
loc_1c7a9: // 0160:1c7a9
    ecx = 0x00001400;
    edx = ebp;
    eax += edi;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_29340();
    if (!eax)
        goto loc_1c867;
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201934, ebx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000200);
    edx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2201958);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 2201958))
        goto loc_1c82a;
    edx = 0xffffffff;
    goto loc_1c82f;
loc_1c82a: // 0160:1c82a
    edx = 0x00000001;
loc_1c82f: // 0160:1c82f
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x21acac);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 2201950, edx);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x21acac);
    edx = memoryAGet32(ds, edx + 2202046);
    sub_1d712();
loc_1c867: // 0160:1c867
    edx = 0;
    memoryASet32(ds, 0x21acf0, edx);
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax = esi * 0x000000ac;
    edx += 0x00000006;
    edx <<= 4;
    if (edx != memoryAGet32(ds, eax + 2201934))
        goto loc_1c97f;
    ebx = ebp + 4;
    if ((int32_t)ebx <= 0)
        goto loc_1c922;
    if (edi >= 0x000003c0)
        goto loc_1c922;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = edi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    ax = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1c922;
    eax = esi;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000035;
    sub_36a16();
loc_1c922: // 0160:1c922
    ecx = 0x00000600;
    eax = esi;
    ebx = ebp + 10;
    edx = edi + 8;
    memoryASet32(ds, 0x21acf4, ecx);
    sub_1c6e1();
    eax = esi;
    sub_261f8();
    ebx = eax;
    eax = esi * 0x000000ac;
    if (ebx)
        goto loc_1c977;
    edx = memoryAGet32(ds, 0x21ad44);
    edi = memoryAGet32(ds, eax + 2201954);
    ebx = memoryAGet32(ds, eax + 2201962);
    edi += edx;
    ebx += edi;
    memoryASet32(ds, eax + 2201954, edi);
    memoryASet32(ds, eax + 2201962, ebx);
    memoryASet32(ds, eax + 2201970, ebx);
    goto loc_1c97f;
loc_1c977: // 0160:1c977
    esi = 0;
    memoryASet32(ds, eax + 2201954, esi);
loc_1c97f: // 0160:1c97f
    if ((int32_t)ebp <= (int32_t)0x00000178)
        goto loc_1c991;
    memoryASet32(ds, 0x21accc, 0x00000001);
loc_1c991: // 0160:1c991
    esp += 0x00000004;
    goto loc_19de9;
}
void sub_1c999() // 0160:1c999 +long
{
    esp -= 4;
    goto loc_1c999;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21831 bytes
loc_1c999: // 0160:1c999
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 2201982) != 0x00000001)
        goto loc_1c9ba;
    esi = 0x0018afa0;
    edi = 0xfffffffc;
    goto loc_1c9c4;
loc_1c9ba: // 0160:1c9ba
    esi = 0x0014c4e0;
    edi = 0xfffffff4;
loc_1c9c4: // 0160:1c9c4
    ebx = eax * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi += eax;
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x21ae5c);
    ecx = eax + -15;
    if (ebp)
        goto loc_1ca24;
    if ((int32_t)memoryAGet32(ds, ebx + 2201954) >= (int32_t)0x00000000)
        goto loc_1ca24;
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x00191270;
    push32(0x00000010);
    ebx = edi;
    eax = esi;
    sub_2b017();
loc_1ca24: // 0160:1ca24
    edx = memoryAGet32(ds, 0x21ae5c);
    edx++;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x21ae5c, edx);
    goto loc_1744b;
}
void sub_1ca42() // 0160:1ca42 +long
{
    esp -= 4;
    goto loc_1ca42;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18531 bytes
loc_1bcb5: // 0160:1bcb5
    esp += 0x00000010;
    goto loc_1744b;
    // gap 3461 bytes
loc_1ca42: // 0160:1ca42
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ebp = eax;
    edi = eax * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = 0;
    memoryASet16(ds, 0x21ac52, dx);
    eax = memoryAGet32(ds, edi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, edi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp, 0x0018b1f0);
    eax -= 0x00000006;
    ecx = memoryAGet32(ds, edi + 2201982);
    memoryASet32(ds, esp + 12, eax);
    if (ecx != 0xffffffff)
        goto loc_1caa8;
    esi -= 0x0000000c;
    goto loc_1cab0;
loc_1caa8: // 0160:1caa8
    memoryASet32(ds, esp + 4, 0x00000008);
loc_1cab0: // 0160:1cab0
    eax = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ecx = 0x00001400;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, eax + 2201982);
    ebx = esi + 5;
    eax <<= 3;
    edx += 0x00000002;
    eax += ebx;
    edx <<= 9;
    eax <<= 9;
    ebx = ecx;
    sub_29340();
    if (!eax)
        goto loc_1cb9d;
    ebx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201990) != 0x00000000)
        goto loc_1cb9d;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ebx + 2201990, ecx);
    eax = memoryAGet32(ds, eax + 2201982);
    edi = eax;
    edi <<= 2;
    edx = memoryAGet32(ds, 0x21acac);
    edi -= eax;
    eax = edx * 0x000000ac;
    edi <<= 9;
    memoryASet32(ds, eax + 2201950, edi);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, 0xfffff600);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, edx + 2201982);
    memoryASet32(ds, eax + 2201982, edx);
    ebx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, ebx + 2201962, memoryAGet32(ds, ebx + 2201962) - 0x00000200);
    edx = 0x0000001e;
    eax = memoryAGet32(ds, 0x21acac);
    sub_1d712();
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x00000080;
    sub_1730a();
    edx = eax;
    eax = 0x0000000b;
    sub_36a16();
loc_1cb9d: // 0160:1cb9d
    if (memoryAGet32(ds, 0x21ad00) == 0x00000000)
        goto loc_1ccd7;
    memoryASet32(ds, 0x21ad04, memoryAGet32(ds, 0x21ad04) + 1);
    ecx = memoryAGet32(ds, esp + 12);
    ecx += 0x00000006;
    if ((int32_t)ecx <= 0)
        goto loc_1ccb9;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += esi;
    if (ebx >= 0x000003c0)
        goto loc_1ccb9;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ebx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edi = ecx;
    eax = 0;
    edi <<= 4;
    ax = memoryAGet16(ds, 0x21ac52);
    edi -= ecx;
    eax &= edx;
    edi <<= 6;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 1643120);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_1ccb9;
    if ((int32_t)memoryAGet32(ds, 0x21ad00) <= (int32_t)0x00000000)
        goto loc_1cc42;
    memoryASet32(ds, 0x21ad00, 0x00000002);
loc_1cc42: // 0160:1cc42
    if ((int32_t)memoryAGet32(ds, 0x21ad00) <= (int32_t)0x00000000)
        goto loc_1cc58;
    if ((int32_t)memoryAGet32(ds, 0x21ad04) <= (int32_t)0x00000019)
        goto loc_1ccd7;
loc_1cc58: // 0160:1cc58
    edi = ebp * 0x000000ac;
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x00000026;
    edx = memoryAGet32(ds, edi + 2201962);
    eax = memoryAGet32(ds, edi + 2201958);
    edx -= 0x00004000;
    eax -= 0x00003000;
    sub_2704a();
    edx = 0;
    memoryASet32(ds, 0x21ad00, edx);
    memoryASet32(ds, 0x21acec, edx);
    memoryASet32(ds, edi + 2201958, edx);
    memoryASet32(ds, edi + 2202034, edx);
    ebx = 0x00000010;
    memoryASet32(ds, edi + 2202038, edx);
    memoryASet32(ds, 0x21ac78, ebx);
    memoryASet32(ds, 0x21acc0, edx);
    goto loc_1ccd7;
loc_1ccb9: // 0160:1ccb9
    edi = memoryAGet32(ds, 0x21ad00);
    if (edi != 0x00000002)
        goto loc_1ccd7;
    if ((int32_t)memoryAGet32(ds, 0x21ad04) <= (int32_t)0x00000019)
        goto loc_1ccd7;
    edx = edi;
    edx = -edx;
    memoryASet32(ds, 0x21ad00, edx);
loc_1ccd7: // 0160:1ccd7
    ebx = ebp * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    eax = esi;
    ecx = memoryAGet32(ds, ebx + 2201954);
    ebx = memoryAGet32(ds, ebx + 2201950);
    sub_26b97();
    if ((int32_t)esi <= 0)
        goto loc_1cd27;
    if ((int32_t)esi >= (int32_t)0x000003b8)
        goto loc_1cd27;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    edx = 0x00191270;
    eax = memoryAGet32(ds, esp + 12);
    push32(0x0000000e);
    ebx = esi;
    ecx -= 0x00000002;
    sub_2b017();
    goto loc_1cd6a;
loc_1cd27: // 0160:1cd27
    if ((int32_t)esi > 0)
        goto loc_1cd53;
    push32(0x000003c0);
    push32(0x00000140);
    ecx = memoryAGet32(ds, esp + 20);
    push32(0x0000000a);
    ebx = 0xfffffffe;
    edx = 0x00191270;
    push32(0x0000000e);
    eax = memoryAGet32(ds, esp + 16);
    ecx -= 0x00000002;
    sub_2b017();
loc_1cd53: // 0160:1cd53
    eax = ebp * 0x000000ac;
    memoryASet32(ds, eax + 2201958, 0x00078200);
    eax = ebp;
    sub_17452();
loc_1cd6a: // 0160:1cd6a
    memoryASet16(ds, 0x21ac52, 0xffff);
    goto loc_1bcb5;
}
void sub_1cdd3() // 0160:1cdd3 +long
{
    esp -= 4;
    goto loc_1cdd3;
loc_19de9: // 0160:19de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12260 bytes
loc_1cdd3: // 0160:1cdd3
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    esi = eax;
    memoryASet32(ds, esp + 8, edx);
    ecx = eax * 0x000000ac;
    edx = 0xfffffffd;
    ebx = memoryAGet32(ds, 0x21ac60);
    edi = 0;
    ebx++;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, 0x21ac60, ebx);
    memoryASet32(ds, esp + 28, edi);
    ecx = memoryAGet32(ds, ecx + 2201982);
    memoryASet32(ds, 0x21acf4, edi);
    if (ecx != 0x00000001)
        goto loc_1ce2c;
    ebx = 0x0018b0f0;
    edi = 0xfffffffe;
    ebp = 0x00000006;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebp);
    goto loc_1ce42;
loc_1ce2c: // 0160:1ce2c
    eax = 0x0014c630;
    edi = 0xfffffff2;
    edx = 0xfffffffa;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp, edx);
loc_1ce42: // 0160:1ce42
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, edx + 2201934);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax -= memoryAGet32(ds, ebx * 8 + 0x5943a);
    eax <<= 4;
    ebp = eax + -96;
    if (ecx != 0x00000001)
        goto loc_1ce8c;
    edx = 0x00000007;
    ebx = 0x00000009;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
    goto loc_1ce9e;
loc_1ce8c: // 0160:1ce8c
    ebx = 0x00000005;
    eax = 0x00000009;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 20, eax);
loc_1ce9e: // 0160:1ce9e
    if (ecx != 0x00000001)
        goto loc_1ceda;
    if ((int32_t)memoryAGet32(ds, 0x21ac84) > (int32_t)0xfffffff0)
        goto loc_1ceda;
    edx = 0x00000400;
    ebx = 0x00000002;
    ebp += 0x00000050;
    eax = 0;
    edi += ecx;
    memoryASet32(ds, 0x21acf4, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000005;
    ebx = 0x0000000a;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1ceda: // 0160:1ceda
    if (ecx != 0x00000001)
        goto loc_1cf20;
    if ((int32_t)memoryAGet32(ds, 0x21ac84) < (int32_t)0x00000010)
        goto loc_1cf20;
    edx = 0xfffffc00;
    ebx = 0xffffffff;
    eax = 0xfffffff8;
    ebp += 0x000000a0;
    edi -= 0x00000003;
    memoryASet32(ds, 0x21acf4, edx);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x0000000a;
    ebx = 0x0000000d;
    memoryASet32(ds, esp + 24, edx);
    memoryASet32(ds, esp + 20, ebx);
loc_1cf20: // 0160:1cf20
    if (ecx != 0xffffffff)
        goto loc_1cf61;
    if ((int32_t)memoryAGet32(ds, 0x21ac84) < (int32_t)0x00000010)
        goto loc_1cf61;
    edx = 0xfffffc00;
    eax = 0xfffffff8;
    ebx = 0x0000000b;
    memoryASet32(ds, esp + 28, ecx);
    ebp += 0x000000a0;
    edi += 0x00000003;
    memoryASet32(ds, 0x21acf4, edx);
    memoryASet32(ds, esp + 16, eax);
    edx = 0x00000002;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 24, edx);
loc_1cf61: // 0160:1cf61
    if (ecx != 0xffffffff)
        goto loc_1cf9e;
    if ((int32_t)memoryAGet32(ds, 0x21ac84) > (int32_t)0xfffffff0)
        goto loc_1cf9e;
    eax = 0x00000400;
    edx = 0x00000002;
    ecx = 0x00000008;
    ebp += 0x00000050;
    edi--;
    ebx = 0;
    memoryASet32(ds, 0x21acf4, eax);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 16, ebx);
    eax = 0x0000000b;
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 20, eax);
loc_1cf9e: // 0160:1cf9e
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 16);
    ebx = 0x00000600;
    edx += eax;
    eax = memoryAGet32(ds, esp);
    edx <<= 9;
    eax += ecx;
    ecx = 0x00001400;
    eax <<= 9;
    sub_29340();
    if (!eax)
        goto loc_1d0d8;
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201934, ebx);
    ebx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, ebx + 2201962, memoryAGet32(ds, ebx + 2201962) - 0x00000200);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx + 2201958))
        goto loc_1d057;
    edx = 0xffffffff;
    goto loc_1d05c;
loc_1d057: // 0160:1d057
    edx = 0x00000001;
loc_1d05c: // 0160:1d05c
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    ebx <<= 8;
    memoryASet32(ds, eax + 2201950, ebx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201982, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, 0xfffffe80);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2202046);
    eax = memoryAGet32(ds, 0x21acac);
    sub_1d712();
    eax = esi;
    edx = 0x00000002;
    sub_1730a();
    ecx = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000003;
    edx = ecx;
    sub_36a16();
loc_1d0d8: // 0160:1d0d8
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    edx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx * 8 + 0x5943a);
    eax += 0x00000006;
    eax <<= 4;
    if (eax != memoryAGet32(ds, edx + 2201934))
        goto loc_1d116;
    eax = esi;
    ebx = 0x00000020;
    sub_1730a();
    edx = eax;
    eax = 0x0000002c;
    sub_36a16();
loc_1d116: // 0160:1d116
    edx = memoryAGet32(ds, esp + 8);
    ebx = edx;
    ebx <<= 2;
    ebx -= edx;
    eax = memoryAGet32(ds, ebx * 8 + 0x5943a);
    ebx = esi * 0x000000ac;
    eax += 0x00000006;
    eax <<= 4;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, ebx + 2201934))
        goto loc_1d1f2;
    if (memoryAGet(ds, ebx + 2201934) & 0x0f)
        goto loc_1d1f2;
    memoryASet32(ds, 0x21acf0, 0x00000600);
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax += edi;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000000d);
    push32(0x00000010);
    edi = memoryAGet32(ds, esp + 44);
    ebx = memoryAGet32(ds, esp + 28);
    eax -= 0x0000000b;
    edx = 0x00191270;
    edi += eax;
    eax = memoryAGet32(ds, esp + 20);
    ecx = edi;
    eax += ebp;
    sub_2b017();
    eax = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 28);
    ebp += eax;
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 12, ebp);
    edi += eax;
    if (edx)
        goto loc_1d1cf;
    edi += 0x00000004;
loc_1d1cf: // 0160:1d1cf
    edx = memoryAGet32(ds, esp + 12);
    ebx = edi;
    eax = esi;
    sub_261f8();
    if (!eax)
        goto loc_1d1e8;
    if ((int32_t)edi <= (int32_t)0x0000017e)
        goto loc_1d1f2;
loc_1d1e8: // 0160:1d1e8
    memoryASet32(ds, 0x21accc, 0x00000001);
loc_1d1f2: // 0160:1d1f2
    esp += 0x00000020;
    goto loc_19de9;
}
void sub_1d1fa() // 0160:1d1fa +long
{
    esp -= 4;
    goto loc_1d1fa;
loc_19de9: // 0160:19de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13323 bytes
loc_1d1fa: // 0160:1d1fa
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x21ac64);
    if (eax != edx)
        goto loc_1d220;
    if (edx != edx)
        goto loc_1d22a;
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201938) == 0x00000000)
        goto loc_1d22a;
loc_1d220: // 0160:1d220
    memoryASet32(ds, 0x21aefc, 0x00000032);
loc_1d22a: // 0160:1d22a
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000010)
        goto loc_1d254;
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_1d254;
    if (memoryAGet32(ds, eax + 2201934) == 0x00000000)
        goto loc_1d254;
    edx = esi;
    eax = ecx;
    sub_1cdd3();
loc_1d254: // 0160:1d254
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000014)
        goto loc_1d275;
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_1d275;
    edx = esi;
    eax = ecx;
    sub_1c755();
loc_1d275: // 0160:1d275
    if (memoryAGet32(ds, 0x21adbc) == 0x00000000)
        goto loc_1d298;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201954) == 0x00000000)
        goto loc_1d298;
    eax = ecx;
    sub_1c999();
loc_1d298: // 0160:1d298
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x0000001f)
        goto loc_1d2b7;
    if (memoryAGet32(ds, 0x21acec) == 0x00000000)
        goto loc_1d2b7;
    eax = ecx;
    sub_1ca42();
loc_1d2b7: // 0160:1d2b7
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 2201938) != 0x0000000d)
        goto loc_1d2fc;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax += 0x0000001c;
    edi = memoryAGet32(ds, edx + 2201934);
    eax <<= 4;
    if (eax != edi)
        goto loc_1d2fc;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000000a;
    sub_36a16();
loc_1d2fc: // 0160:1d2fc
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 2201938) != 0x00000019)
        goto loc_1d341;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax += 0x00000006;
    ebx = memoryAGet32(ds, edx + 2201934);
    eax <<= 4;
    if (eax != ebx)
        goto loc_1d341;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000034;
    sub_36a16();
loc_1d341: // 0160:1d341
    edx = ecx * 0x000000ac;
    if (memoryAGet32(ds, edx + 2201938) != 0x0000000f)
        goto loc_1d3d7;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax += 0x00000005;
    ebp = memoryAGet32(ds, edx + 2201934);
    eax <<= 4;
    if (eax != ebp)
        goto loc_1d3d7;
    eax = memoryAGet32(ds, 0x21ac60);
    if ((int32_t)eax <= (int32_t)0x000001f4)
        goto loc_1d3b8;
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_1d3a3;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000001c;
    goto loc_1d3d2;
loc_1d3a3: // 0160:1d3a3
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000030;
    goto loc_1d3d2;
loc_1d3b8: // 0160:1d3b8
    if ((int32_t)eax <= (int32_t)0x00000096)
        goto loc_1d3d7;
    eax = ecx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000022;
loc_1d3d2: // 0160:1d3d2
    sub_36a16();
loc_1d3d7: // 0160:1d3d7
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201938) != 0x00000000)
        goto loc_1d438;
    ebx = memoryAGet32(ds, eax + 2202006);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    ebp = memoryAGet32(ds, eax + 2201934);
    edx = memoryAGet32(ds, edx * 8 + 0x59442);
    ebx = memoryAGet32(ds, eax + 2202006);
    ebp += edx;
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx = memoryAGet32(ds, edx * 8 + 0x59446);
    ebx = memoryAGet32(ds, eax + 2202006);
    memoryASet32(ds, eax + 2202090, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    memoryASet32(ds, eax + 2201934, ebp);
    edx = memoryAGet32(ds, edx * 8 + 0x5944a);
    goto loc_1d466;
loc_1d438: // 0160:1d438
    edx = esi;
    edx <<= 2;
    edx -= esi;
    edi = memoryAGet32(ds, eax + 2201934);
    edi += memoryAGet32(ds, edx * 8 + 0x59442);
    ebx = memoryAGet32(ds, edx * 8 + 0x59446);
    memoryASet32(ds, eax + 2201934, edi);
    edx = memoryAGet32(ds, edx * 8 + 0x5944a);
    memoryASet32(ds, eax + 2202090, ebx);
loc_1d466: // 0160:1d466
    memoryASet32(ds, eax + 2202094, edx);
    edx = ecx * 0x000000ac;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax <<= 3;
    if ((int32_t)memoryAGet32(ds, eax + 365634) <= (int32_t)0x00000000)
        goto loc_1d4bf;
    eax = memoryAGet32(ds, eax + 365626);
    ebp = memoryAGet32(ds, edx + 2201934);
    eax <<= 4;
    if ((int32_t)eax <= (int32_t)ebp)
        goto loc_1d49e;
    memoryASet32(ds, edx + 2201934, eax);
loc_1d49e: // 0160:1d49e
    eax = esi;
    eax <<= 2;
    eax -= esi;
    edx = memoryAGet32(ds, eax * 8 + 0x5943e);
    eax = ecx * 0x000000ac;
    edx <<= 4;
    if ((int32_t)edx > (int32_t)memoryAGet32(ds, eax + 2201934))
        goto loc_1d50e;
    goto loc_1d505;
loc_1d4bf: // 0160:1d4bf
    ebx = memoryAGet32(ds, eax + 365630);
    edi = memoryAGet32(ds, edx + 2201934);
    ebx <<= 4;
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1d4e1;
    eax = memoryAGet32(ds, eax + 365626);
    eax <<= 4;
    memoryASet32(ds, edx + 2201934, eax);
loc_1d4e1: // 0160:1d4e1
    eax = ecx * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201934);
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5943e);
    ebx -= 0x00000004;
    eax <<= 4;
    if ((int32_t)ebx > (int32_t)eax)
        goto loc_1d50e;
loc_1d505: // 0160:1d505
    eax = ecx;
    sub_1bcbd();
    esi = eax;
loc_1d50e: // 0160:1d50e
    ecx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ecx + 2201934);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = esi;
    eax <<= 2;
    eax -= esi;
    eax = memoryAGet32(ds, eax * 8 + 0x5944e);
    edi = memoryAGet32(ds, ecx + 2201934);
    eax <<= 4;
    if ((int32_t)eax > (int32_t)edi)
        goto loc_1d554;
    if (memoryAGet32(ds, 0x21ac78) == 0x00000010)
        goto loc_1d554;
    eax = esi;
    sub_1c14d();
loc_1d554: // 0160:1d554
    eax = edx;
    goto loc_19de9;
}
void sub_1d55b() // 0160:1d55b +long
{
    esp -= 4;
    goto loc_1d55b;
loc_19de9: // 0160:19de9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14188 bytes
loc_1d55b: // 0160:1d55b
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edi = eax;
    esi = eax * 0x000000ac;
    ebp = memoryAGet32(ds, esi + 2202006);
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ebx = memoryAGet32(ds, esi + 2202014);
    edx = memoryAGet32(ds, eax * 8 + 0x59442);
    edx = (int32_t)edx * (int32_t)ebx;
    ecx = memoryAGet32(ds, esi + 2201934);
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    ecx += edx;
    eax <<= 4;
    memoryASet32(ds, esi + 2201934, ecx);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1d5aa;
    memoryASet32(ds, esi + 2201934, eax);
loc_1d5aa: // 0160:1d5aa
    edx = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax <<= 3;
    ecx = memoryAGet32(ds, eax + 365630);
    ecx <<= 4;
    if ((int32_t)ecx > (int32_t)memoryAGet32(ds, edx + 2201934))
        goto loc_1d5da;
    eax = memoryAGet32(ds, eax + 365626);
    eax <<= 4;
    memoryASet32(ds, edx + 2201934, eax);
loc_1d5da: // 0160:1d5da
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax <<= 4;
    if (eax != memoryAGet32(ds, esi + 2201934))
        goto loc_1d611;
    eax = memoryAGet32(ds, esi + 2201958);
    memoryASet32(ds, esi + 2201966, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    memoryASet32(ds, esi + 2201970, eax);
loc_1d611: // 0160:1d611
    esi = edi * 0x000000ac;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    eax = memoryAGet32(ds, eax * 8 + 0x5943a);
    eax <<= 4;
    if (eax == memoryAGet32(ds, esi + 2201934))
        goto loc_1d63e;
    eax = memoryAGet32(ds, esi + 2201982);
    if (eax == memoryAGet32(ds, esi + 2201986))
        goto loc_1d691;
loc_1d63e: // 0160:1d63e
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esi + 2201982);
    ecx = esp + 4;
    push32(edx);
    edx = esp + 4;
    ebx = eax;
    push32(edx);
    eax = edi;
    edx = memoryAGet32(ds, esp + 16);
    sub_261ca();
    memoryASet32(ds, esi + 2201978, eax);
loc_1d691: // 0160:1d691
    esi = edi * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2201934);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    eax = ebp;
    eax <<= 2;
    eax -= ebp;
    ecx = memoryAGet32(ds, eax * 8 + 0x59446);
    eax = memoryAGet32(ds, eax * 8 + 0x5944a);
    memoryASet32(ds, esi + 2202090, ecx);
    memoryASet32(ds, esi + 2202094, eax);
    if (edi != memoryAGet32(ds, 0x21ac64))
        goto loc_1d708;
    ebp = memoryAGet32(ds, 0x21acfc);
    edx += ebp;
    if (ebp != 0x00000005)
        goto loc_1d6eb;
    ebx = eax + 3;
    memoryASet32(ds, esi + 2202094, ebx);
loc_1d6eb: // 0160:1d6eb
    if (memoryAGet32(ds, 0x21acfc) != 0x0000000a)
        goto loc_1d700;
    edi = edi * 0x000000ac;
    memoryASet32(ds, edi + 2202094, memoryAGet32(ds, edi + 2202094) - 1);
loc_1d700: // 0160:1d700
    edi = 0;
    memoryASet32(ds, 0x21acfc, edi);
loc_1d708: // 0160:1d708
    eax = edx;
    esp += 0x0000000c;
    goto loc_19de9;
}
void sub_1d712() // 0160:1d712 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    eax = eax * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2202038);
    ebx += edx;
    memoryASet32(ds, eax + 2202038, ebx);
    if (memoryAGet32(ds, 0x21aef8) == 0x00000000)
        goto loc_1d752;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, eax + 2202034))
        goto loc_1d752;
    edi = 0;
    memoryASet32(ds, eax + 2202034, edi);
    edx = 0x00000001;
    memoryASet32(ds, eax + 2202038, edi);
    memoryASet32(ds, eax + 2202030, edx);
loc_1d752: // 0160:1d752
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d755() // 0160:1d755 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = edx;
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edi = memoryAGet32(ds, edx + 2201982);
    ebx = 0xffffee00;
    if ((int32_t)edi <= 0)
        goto loc_1d779;
    ebx = 0x00000800;
loc_1d779: // 0160:1d779
    edx = ecx + -2048;
    eax += ebx;
    ecx = 0x00004000;
    ebx = 0x00001000;
    sub_29340();
    if (!eax)
        goto loc_1d91e;
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201982);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x21acac);
    edx = eax;
    eax = ecx * 0x000000ac;
    edx <<= 8;
    memoryASet32(ds, eax + 2201950, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, 0xfffffc00);
    ebx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = 0;
    memoryASet16(ds, 0x21ac52, dx);
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -2;
    if ((int32_t)ecx <= 0)
        goto loc_1d85c;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_1d85c;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (eax)
        goto loc_1d870;
loc_1d85c: // 0160:1d85c
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000400);
loc_1d870: // 0160:1d870
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet16(ds, 0x21ac52, 0xffff);
    eax = memoryAGet32(ds, eax + 2201982);
    memoryASet32(ds, edx + 2201982, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, 0x21ace8, 0x001582e0);
    edx = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, 0x21acdc, edx);
    if ((int32_t)memoryAGet32(ds, eax + 2201982) > (int32_t)0x00000000)
        goto loc_1d8cc;
    memoryASet32(ds, 0x21acdc, memoryAGet32(ds, 0x21acdc) - 0x00001c00);
loc_1d8cc: // 0160:1d8cc
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201962);
    esi = 0x00000001;
    edx += 0x00000e00;
    memoryASet32(ds, 0x21ace4, esi);
    memoryASet32(ds, 0x21ace0, edx);
    edx = memoryAGet32(ds, eax + 2202046);
    eax = memoryAGet32(ds, 0x21acac);
    sub_1d712();
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000000b;
    sub_36a16();
loc_1d91e: // 0160:1d91e
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d923() // 0160:1d923 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    ebx = eax;
    eax = eax * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201994) != 0x00000000)
        goto loc_1d949;
    if (memoryAGet32(ds, eax + 2201938) != 0x00000000)
        goto loc_1d949;
    if (memoryAGet32(ds, eax + 2201990) == 0x00000000)
        goto loc_1d97d;
loc_1d949: // 0160:1d949
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, eax + 2201966, edx);
    edx = memoryAGet32(ds, eax + 2201962);
    edi = memoryAGet32(ds, eax + 2201938);
    memoryASet32(ds, eax + 2201970, edx);
    if (edi != 0x0000001b)
        goto loc_1d97d;
    eax = memoryAGet32(ds, eax + 2201958);
    sub_1d755();
loc_1d97d: // 0160:1d97d
    if (memoryAGet32(ds, 0x21acec) == 0x00000000)
        goto loc_1d9b2;
    eax = ebx * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201950);
    ebx = memoryAGet32(ds, eax + 2201958);
    ebx += edx;
    memoryASet32(ds, eax + 2201958, ebx);
    edx = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, eax + 2201966, ebx);
    memoryASet32(ds, eax + 2201970, edx);
loc_1d9b2: // 0160:1d9b2
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1d9b6() // 0160:1d9b6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x21ad08);
    if (!edx)
        goto loc_1d9d8;
    ebx = 0x00000032;
    ecx = edx + -1;
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x21ad08, ecx);
loc_1d9d8: // 0160:1d9d8
    ecx = 0x00000032;
    ebx = 0x00000001;
    edx = 0;
    goto loc_1da2b;
loc_1d9e6: // 0160:1d9e6
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_1da2a;
    if (memoryAGet32(ds, eax + 2201938) != 0x0000000a)
        goto loc_1da1b;
    sub_1720e();
    esi = 0x00000080;
    edx = 0x00000010;
    memoryASet32(ds, 0x21aefc, ecx);
    memoryASet32(ds, 0x21ad08, esi);
    goto loc_1da2a;
loc_1da1b: // 0160:1da1b
    if (memoryAGet32(ds, eax + 2202034) != 0x00000000)
        goto loc_1da2a;
    memoryASet32(ds, eax + 2202054, ebx);
loc_1da2a: // 0160:1da2a
    edx++;
loc_1da2b: // 0160:1da2b
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1d9e6;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1da35() // 0160:1da35 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x5ca9c);
    edx = memoryAGet32(ds, 0x21aea8);
    ebx--;
    if (edx)
        goto loc_1da69;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, 0x21ac68))
        goto loc_1da69;
    memoryASet32(ds, 0x21aea8, 0x00000001);
loc_1da69: // 0160:1da69
    if (ebx != memoryAGet32(ds, 0x21ac64))
        goto loc_1da7b;
    memoryASet32(ds, 0x21ae9c, 0x00000001);
loc_1da7b: // 0160:1da7b
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x21ac68))
        goto loc_1da9e;
    memoryASet32(ds, 0x21aea0, 0x00000001);
    goto loc_1dada;
loc_1da9e: // 0160:1da9e
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_1dab8;
    memoryASet32(ds, 0x21aeb0, 0x00000001);
loc_1dab8: // 0160:1dab8
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x5caa0);
    if (edx != memoryAGet32(ds, eax + 2202046))
        goto loc_1dada;
    memoryASet32(ds, 0x21ae94, 0x00000001);
loc_1dada: // 0160:1dada
    if (ebx != memoryAGet32(ds, 0x21aec4))
        goto loc_1dafc;
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_1dafc;
    memoryASet32(ds, 0x21aec0, 0x00000001);
loc_1dafc: // 0160:1dafc
    memoryASet32(ds, 0x21aec4, ebx);
    ebx = ebx * 0x000000ac;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, ebx + 2202050, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db16() // 0160:1db16 +long
{
    esp -= 4;
    goto loc_1db16;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 26308 bytes
loc_1db16: // 0160:1db16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ac64);
    eax = eax * 0x000000ac;
    ecx = 0;
    edx = memoryAGet32(ds, eax + 2202038);
    ebx = memoryAGet32(ds, eax + 2202034);
    memoryASet32(ds, 0x2231b0, ecx);
    if ((int32_t)edx <= (int32_t)ebx)
        goto loc_1db43;
    esi = ebx;
    goto loc_1db45;
loc_1db43: // 0160:1db43
    esi = edx;
loc_1db45: // 0160:1db45
    ebp = memoryAGet32(ds, 0x21ac64);
    edx = 0;
    eax = 0;
loc_1db4f: // 0160:1db4f
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_1db70;
    if (edx == ebp)
        goto loc_1db70;
    ebx = memoryAGet32(ds, eax + 2202038);
    edi = memoryAGet32(ds, eax + 2202034);
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_1db6e;
    ebx = edi;
loc_1db6e: // 0160:1db6e
    ecx += ebx;
loc_1db70: // 0160:1db70
    edx++;
    eax += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1db4f;
    if ((int32_t)ecx <= (int32_t)esi)
        goto loc_1744b;
    memoryASet32(ds, 0x2231b0, 0x00000001);
    goto loc_1744b;
}
void sub_1db92() // 0160:1db92 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if ((int32_t)memoryAGet32(ds, 0x5ca9c) <= (int32_t)0x00000000)
        goto loc_1dba4;
    sub_1da35();
loc_1dba4: // 0160:1dba4
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 2202006);
    if (ecx == 0x00000026)
        goto loc_1dbcd;
    if (ecx == 0x00000024)
        goto loc_1dbcd;
    if (ecx == 0x00000036)
        goto loc_1dbcd;
    if (ecx == 0x0000002f)
        goto loc_1dbcd;
    if (ecx != 0x00000027)
        goto loc_1dbe1;
loc_1dbcd: // 0160:1dbcd
    ebx = 0;
    memoryASet32(ds, 0x21aeb8, ebx);
    memoryASet32(ds, 0x21ae94, ebx);
    memoryASet32(ds, 0x21ae8c, ebx);
loc_1dbe1: // 0160:1dbe1
    if (memoryAGet32(ds, 0x21ae08) == 0x00000000)
        goto loc_1dc04;
    ebp = 0;
    memoryASet32(ds, 0x21ae8c, ebp);
    memoryASet32(ds, 0x21aeb0, ebp);
    memoryASet32(ds, 0x21aec0, ebp);
    memoryASet32(ds, 0x21ae94, ebp);
loc_1dc04: // 0160:1dc04
    if (memoryAGet32(ds, 0x21aea8) != 0x00000001)
        goto loc_1dc38;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000003c;
    ecx = 0xffffffff;
    sub_36a16();
    memoryASet32(ds, 0x21aea8, ecx);
    goto loc_1de4c;
loc_1dc38: // 0160:1dc38
    if (memoryAGet32(ds, 0x21ae9c) == 0x00000000)
        goto loc_1dc65;
    if (memoryAGet32(ds, 0x2231b0) != 0x00000000)
        goto loc_1dc65;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000000f;
    goto loc_1de47;
loc_1dc65: // 0160:1dc65
    if (memoryAGet32(ds, 0x21aea0) == 0x00000000)
        goto loc_1dcbb;
    eax = memoryAGet32(ds, 0x21ae9c);
    if (eax)
        goto loc_1dcbb;
    edx = 0x00000001;
    sub_24709();
    if (eax)
        goto loc_1dca0;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000002;
    goto loc_1de47;
loc_1dca0: // 0160:1dca0
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000013;
    goto loc_1de47;
loc_1dcbb: // 0160:1dcbb
    if (memoryAGet32(ds, 0x21ae8c) == 0x00000000)
        goto loc_1dcdf;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000036;
    goto loc_1de47;
loc_1dcdf: // 0160:1dcdf
    if (memoryAGet32(ds, 0x21ae98) == 0x00000000)
        goto loc_1dd03;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000026;
    goto loc_1de47;
loc_1dd03: // 0160:1dd03
    if (memoryAGet32(ds, 0x21ae94) == 0x00000000)
        goto loc_1dd27;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000009;
    goto loc_1de47;
loc_1dd27: // 0160:1dd27
    if (memoryAGet32(ds, 0x21aebc) == 0x00000000)
        goto loc_1dd48;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0;
    goto loc_1de47;
loc_1dd48: // 0160:1dd48
    if (memoryAGet32(ds, 0x21aeac) == 0x00000000)
        goto loc_1dd6c;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000039;
    goto loc_1de47;
loc_1dd6c: // 0160:1dd6c
    if (memoryAGet32(ds, 0x21aec0) == 0x00000000)
        goto loc_1dd90;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000027;
    goto loc_1de47;
loc_1dd90: // 0160:1dd90
    eax = memoryAGet32(ds, 0x21aeb4);
    if (!eax)
        goto loc_1ddb4;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000018;
    goto loc_1de47;
loc_1ddb4: // 0160:1ddb4
    if (memoryAGet32(ds, 0x21aeb8) != 0x00000001)
        goto loc_1ddd8;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000029;
    goto loc_1de47;
loc_1ddd8: // 0160:1ddd8
    if (memoryAGet32(ds, 0x21aeb0) == 0x00000000)
        goto loc_1de4c;
    edx = 0x00000002;
    sub_24709();
    ecx = eax;
    if (eax)
        goto loc_1de0c;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000001b;
    sub_36a16();
loc_1de0c: // 0160:1de0c
    if (ecx != 0x00000001)
        goto loc_1de2c;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000023;
    sub_36a16();
loc_1de2c: // 0160:1de2c
    if (ecx != 0x00000002)
        goto loc_1de4c;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000024;
loc_1de47: // 0160:1de47
    sub_36a16();
loc_1de4c: // 0160:1de4c
    sub_1720e();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de56() // 0160:1de56 +long
{
    esp -= 4;
    goto loc_1de56;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27140 bytes
loc_1de56: // 0160:1de56
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_1db16();
    ecx = 0;
    ebx = 0;
loc_1de65: // 0160:1de65
    esi = 0;
    edi = memoryAGet32(ds, ebx + 2202038);
    memoryASet32(ds, ebx + 2202030, esi);
    if (!edi)
        goto loc_1dee6;
    ebp = memoryAGet32(ds, ebx + 2202034);
    edx = edi;
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_1de98;
    edi = 0x00000001;
    memoryASet32(ds, ebx + 2202034, esi);
    edx = ebp;
    memoryASet32(ds, 0x21ae08, edi);
    goto loc_1dea2;
loc_1de98: // 0160:1de98
    eax = ebp;
    eax -= edi;
    memoryASet32(ds, ebx + 2202034, eax);
loc_1dea2: // 0160:1dea2
    ebp = 0;
    eax = ecx;
    memoryASet32(ds, ebx + 2202038, ebp);
    sub_111a0();
    memoryASet32(ds, ebx + 2202042, 0x00009600);
    eax = ecx;
    sub_110af();
    memoryASet32(ds, 0x21aefc, 0x00000032);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, eax * 4 + 0x5a5d4, 0x00000001);
loc_1dee6: // 0160:1dee6
    ecx++;
    ebx += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_1de65;
    if (memoryAGet32(ds, 0x21aef8) != 0x00000000)
        goto loc_1df04;
    sub_1db92();
loc_1df04: // 0160:1df04
    edi = 0;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5a2fa, edi);
    memoryASet32(ds, 0x21aef8, ebp);
    memoryASet32(ds, 0x21ae6c, edi);
    goto loc_1744b;
}
void sub_1df22() // 0160:1df22 +long
{
    esp -= 4;
    goto loc_1df22;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27344 bytes
loc_1df22: // 0160:1df22
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21ae4c);
    ebx = memoryAGet32(ds, 0x21ae0c);
    if (!edx)
        goto loc_1df87;
    ecx = edx + -1;
    memoryASet32(ds, 0x21ae4c, ecx);
    if (ecx)
        goto loc_1df87;
    sub_1720e();
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_1df6f;
    eax = ebx;
    sub_1730a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x00000001;
    goto loc_1df82;
loc_1df6f: // 0160:1df6f
    eax = ebx;
    sub_1730a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x0000002f;
loc_1df82: // 0160:1df82
    sub_36a16();
loc_1df87: // 0160:1df87
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebp = memoryAGet32(ds, eax + 2202014);
    if (!ebp)
        goto loc_1dfd3;
    if ((int32_t)memoryAGet32(ds, eax + 2201978) <= (int32_t)0x00004000)
        goto loc_1dfb1;
    memoryASet32(ds, 0x21acfc, 0x00000005);
loc_1dfb1: // 0160:1dfb1
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201978) >= (int32_t)0xffffc000)
        goto loc_1dfd9;
    memoryASet32(ds, 0x21acfc, 0x0000000a);
    goto loc_1dfd9;
loc_1dfd3: // 0160:1dfd3
    memoryASet32(ds, 0x21acfc, ebp);
loc_1dfd9: // 0160:1dfd9
    sub_1d9b6();
    esi = 0;
    ecx = 0;
loc_1dfe2: // 0160:1dfe2
    if (memoryAGet32(ds, ecx + 2201958) == 0x00000000)
        goto loc_1e2c8;
    if (memoryAGet32(ds, ecx + 2201950) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2201938) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2201994) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2201990) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2202014) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2201954) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2202054) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2201934) != 0x00000000)
        goto loc_1e044;
    if (memoryAGet32(ds, ecx + 2202042) == 0x00000000)
        goto loc_1e2c8;
loc_1e044: // 0160:1e044
    ebp = memoryAGet32(ds, ecx + 2202054);
    if (!ebp)
        goto loc_1e057;
    eax = ebp + -1;
    memoryASet32(ds, ecx + 2202054, eax);
loc_1e057: // 0160:1e057
    if (memoryAGet32(ds, ecx + 2202042) == 0x00000000)
        goto loc_1e0c1;
    if (memoryAGet32(ds, ecx + 2201974) != 0x00000000)
        goto loc_1e0c1;
    if (memoryAGet32(ds, ecx + 2201950) != 0x00000000)
        goto loc_1e0c1;
    if (memoryAGet32(ds, ecx + 2201990) != 0x00000000)
        goto loc_1e0c1;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_1e0c1;
    edx = memoryAGet32(ds, ecx + 2201938);
    if (edx == 0x0000000f)
        goto loc_1e093;
    if (edx)
        goto loc_1e0c1;
loc_1e093: // 0160:1e093
    memoryASet32(ds, 0x21aefc, 0x00000032);
    ebp = memoryAGet32(ds, ecx + 2202042);
    ebp -= 0x00000170;
    memoryASet32(ds, ecx + 2202042, ebp);
    if ((int32_t)ebp > 0)
        goto loc_1e0c1;
    edx = 0;
    memoryASet32(ds, ecx + 2202042, edx);
    memoryASet32(ds, ecx + 2202030, edx);
loc_1e0c1: // 0160:1e0c1
    if (memoryAGet32(ds, ecx + 2202034) != 0x00000000)
        goto loc_1e12c;
    ebp = memoryAGet32(ds, ecx + 2201938);
    if (ebp)
        goto loc_1e12c;
    if (memoryAGet32(ds, ecx + 2201950) != 0x00000000)
        goto loc_1e12c;
    if (memoryAGet32(ds, ecx + 2202042) != 0x00000000)
        goto loc_1e12c;
    if (memoryAGet32(ds, 0x21ad08) != 0x00000000)
        goto loc_1e12c;
    edi = 0x0000000a;
    eax = 0x00000080;
    memoryASet32(ds, ecx + 2201934, ebp);
    ebx = 0x00000032;
    memoryASet32(ds, ecx + 2201938, edi);
    edx = esi;
    memoryASet32(ds, 0x21ad08, eax);
    eax = 0x0004f6a2;
    sub_18dc8();
    edx = 0x00000030;
    memoryASet32(ds, 0x21ae0c, esi);
    memoryASet32(ds, 0x21ae4c, edx);
loc_1e12c: // 0160:1e12c
    if (memoryAGet32(ds, ecx + 2201994) != 0x00000000)
        goto loc_1e15d;
    if ((int32_t)memoryAGet32(ds, ecx + 2201954) <= (int32_t)0x00000300)
        goto loc_1e15d;
    if (memoryAGet32(ds, ecx + 2201990) != 0x00000000)
        goto loc_1e15d;
    if (memoryAGet32(ds, ecx + 2201938) != 0x00000000)
        goto loc_1e15d;
    memoryASet32(ds, ecx + 2201994, 0x00000040);
loc_1e15d: // 0160:1e15d
    ebx = memoryAGet32(ds, ecx + 2201994);
    if (ebx)
        goto loc_1e170;
    if (memoryAGet32(ds, ecx + 2201990) == 0x00000000)
        goto loc_1e17e;
loc_1e170: // 0160:1e170
    eax = esi;
    sub_1bedc();
    ebx = eax;
    goto loc_1e268;
loc_1e17e: // 0160:1e17e
    eax = memoryAGet32(ds, ecx + 2201938);
    if (eax)
        goto loc_1e1af;
    if (memoryAGet32(ds, ecx + 2202014) != 0x00000000)
        goto loc_1e1af;
    edx = memoryAGet32(ds, ecx + 2201958);
    memoryASet32(ds, ecx + 2201934, ebx);
    memoryASet32(ds, ecx + 2201966, edx);
    edx = memoryAGet32(ds, ecx + 2201962);
    memoryASet32(ds, ecx + 2201970, edx);
loc_1e1af: // 0160:1e1af
    if (memoryAGet32(ds, ecx + 2201950) != 0x00000000)
        goto loc_1e1cc;
    if (memoryAGet32(ds, ecx + 2201974) != 0x00000000)
        goto loc_1e1cc;
    if (eax)
        goto loc_1e1cc;
    eax = esi;
    sub_1bfe9();
loc_1e1cc: // 0160:1e1cc
    if (!eax)
        goto loc_1e1db;
    edx = eax;
    eax = esi;
    sub_1d1fa();
    goto loc_1e1e4;
loc_1e1db: // 0160:1e1db
    edx = eax;
    eax = esi;
    sub_1d55b();
loc_1e1e4: // 0160:1e1e4
    ebx = eax;
    if (esi != memoryAGet32(ds, 0x21ac64))
        goto loc_1e268;
    if (memoryAGet32(ds, 0x21adb4) == 0x00000000)
        goto loc_1e21c;
    edx = memoryAGet32(ds, ecx + 2201938);
    if (edx)
        goto loc_1e21c;
    if (memoryAGet32(ds, ecx + 2202006) == 0x00000006)
        goto loc_1e21c;
    memoryASet32(ds, ecx + 2202090, edx);
    ebx = 0;
    memoryASet32(ds, ecx + 2202094, edx);
loc_1e21c: // 0160:1e21c
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_1e268;
    if (memoryAGet32(ds, 0x21ac60) == 0x00000000)
        goto loc_1e268;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_1e268;
    if (memoryAGet32(ds, ecx + 2201938) != 0x00000000)
        goto loc_1e268;
    eax = memoryAGet32(ds, ecx + 2202006);
    if (eax == 0x00000004)
        goto loc_1e250;
    if (eax != 0x00000024)
        goto loc_1e268;
loc_1e250: // 0160:1e250
    ebx = 0;
    edi = 0xfffffffd;
    memoryASet32(ds, ecx + 2202090, ebx);
    memoryASet32(ds, ecx + 2202094, edi);
    ebx = 0x000001f4;
loc_1e268: // 0160:1e268
    eax = esi;
    edi = 0x00000014;
    sub_1d923();
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edi = eax * 0x00001400;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    ebx = 0x00000014;
    idiv32(ebx);
    edx <<= 4;
    ebp = memoryAGet32(ds, ecx + 2201982);
    ebx = edi + edx;
    if ((int32_t)ebp <= 0)
        goto loc_1e2a8;
    eax = 0x00155270;
    goto loc_1e2ad;
loc_1e2a8: // 0160:1e2a8
    eax = 0x001167b0;
loc_1e2ad: // 0160:1e2ad
    eax += ebx;
    memoryASet32(ds, ecx + 2202098, eax);
    eax = esi;
    ebx += 0x00155270;
    sub_26074();
    memoryASet32(ds, ecx + 2202102, ebx);
loc_1e2c8: // 0160:1e2c8
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1dfe2;
    goto loc_1744b;
}
void sub_1e2dd() // 0160:1e2dd +long
{
    esp -= 4;
    goto loc_1e2dd;
loc_1744b: // 0160:1744b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 28299 bytes
loc_1e2dd: // 0160:1e2dd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edx = eax * 0x000000ac;
    ebx = memoryAGet32(ds, edx + 2202042);
    if (!ebx)
        goto loc_1e3c2;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000004b;
    ecx -= eax;
    if ((int32_t)ecx <= (int32_t)0x00000028)
        goto loc_1e31c;
    ecx = 0x00000028;
loc_1e31c: // 0160:1e31c
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = 0x00000003;
    eax -= ecx;
    ecx = memoryAGet32(ds, edi + 2202026);
    eax -= 0x0000000e;
    edx -= ecx;
    memoryASet32(ds, esp, eax);
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax = memoryAGet32(ds, edi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx += 0x00000007;
    ebp = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    ebp -= ebx;
    ebx = 0x00000003;
    idiv32(ebx);
    edx = eax;
    eax <<= 4;
    ecx = 0x00093c24;
    eax -= edx;
    edx = esi;
    eax <<= 8;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = esi;
    idiv32(ebx);
    edi = edx;
    edi <<= 2;
    edi -= edx;
    edi <<= 3;
    edi += edx;
    push32(0x00000006);
    edi <<= 2;
    ebx = memoryAGet32(ds, esp + 4);
    eax = ecx + edi;
    edx = ebp;
    ecx = 0x0000000f;
    sub_17029();
loc_1e3c2: // 0160:1e3c2
    edi = esi * 0x000000ac;
    eax = memoryAGet32(ds, edi + 2202018);
    ecx = eax;
    ecx <<= 2;
    ecx += eax;
    eax = memoryAGet32(ds, edi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -20;
    eax = memoryAGet32(ds, edi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    ebp -= eax;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    idiv32(memoryAGet32(ds, esp + 8));
    memoryASet32(ds, esp + 8, eax);
    edx = memoryAGet32(ds, esp + 8);
    eax <<= 4;
    eax -= edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    eax = 0x00093490;
    edx = memoryAGet32(ds, esp);
    eax += edx;
    memoryASet32(ds, esp + 4, eax);
    edx = esi;
    eax = 0x00000003;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp + 8, eax);
    eax = esi;
    esi = memoryAGet32(ds, esp + 8);
    idiv32(esi);
    esi = edx;
    esi <<= 2;
    esi -= edx;
    esi <<= 3;
    push32(0x00000006);
    esi += edx;
    eax = memoryAGet32(ds, esp + 8);
    esi <<= 2;
    edx = ebp;
    eax += esi;
    sub_17029();
    eax = memoryAGet32(ds, edi + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, edi + 2202022);
    edx = 0x00000003;
    ebx = eax + -14;
    edx -= ebp;
    eax = edx;
    eax <<= 2;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    eax = memoryAGet32(ds, edi + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx + 7;
    eax -= edx;
    ecx = memoryAGet32(ds, esp);
    edx = eax;
    eax = 0x00093c10;
    push32(0x00000006);
    eax += ecx;
    ecx = 0x0000000f;
    eax += esi;
    sub_17029();
    esp += 0x0000000c;
    goto loc_1744b;
}
void sub_1e4e5() // 0160:1e4e5 +long
{
    esp -= 4;
    goto loc_1e4e5;
loc_17448: // 0160:17448
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 28819 bytes
loc_1e4e5: // 0160:1e4e5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = 0;
    esi = 0;
loc_1e4f2: // 0160:1e4f2
    if (memoryAGet32(ds, esi + 2201958) == 0x00000000)
        goto loc_1e5a8;
    if (memoryAGet32(ds, esi + 2202030) != 0x00000000)
        goto loc_1e51b;
    if (memoryAGet32(ds, 0x21af08) != 0x00010000)
        goto loc_1e51b;
    eax = edi;
    sub_1e2dd();
loc_1e51b: // 0160:1e51b
    eax = memoryAGet32(ds, esi + 2201982);
    ebp = memoryAGet32(ds, esi + 2202102);
    if ((int32_t)eax <= 0)
        goto loc_1e538;
    ebx = 0x00000003;
    ebx -= memoryAGet32(ds, esi + 2202090);
    goto loc_1e54d;
loc_1e538: // 0160:1e538
    ebx = memoryAGet32(ds, esi + 2202090);
    ebp -= 0x00155270;
    ebx += 0x0000000d;
    ebp += 0x001167b0;
loc_1e54d: // 0160:1e54d
    eax = memoryAGet32(ds, esi + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= ebx;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esi + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 2202094);
    eax -= 0x0000000c;
    ecx = memoryAGet32(ds, 0x21ac64);
    ebx += eax;
    if (edi != ecx)
        goto loc_1e596;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_1e5a8;
loc_1e596: // 0160:1e596
    push32(0x00000010);
    ecx = 0x00000010;
    edx = memoryAGet32(ds, esp + 4);
    eax = ebp;
    sub_17029();
loc_1e5a8: // 0160:1e5a8
    edi++;
    esi += 0x000000ac;
    if ((int32_t)edi < (int32_t)0x00000010)
        goto loc_1e4f2;
    goto loc_17448;
}
void sub_1e616() // 0160:1e616 +long
{
    esp -= 4;
loc_1e616: // 0160:1e616
    eax = 0x000003da;
    sub_45785();
    if (al & 0x08)
        goto loc_1e616;
    esp += 4;
}
void sub_1e625() // 0160:1e625 +long
{
    esp -= 4;
    goto loc_1e625;
loc_1e607: // 0160:1e607
    eax = 0x000003da;
    sub_45785();
    if (!(al & 0x08))
        goto loc_1e607;
    esp += 4;
    return;
    // gap 15 bytes
loc_1e625: // 0160:1e625
    sub_1e616();
    goto loc_1e607;
}
void sub_1e66f() // 0160:1e66f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_1e625();
    eax = 0x000003c8;
    edx = 0;
    sub_44d6f();
    if (ecx)
        goto loc_1e6a2;
    ebx = 0;
loc_1e68b: // 0160:1e68b
    eax = 0x000003c9;
    edx = 0;
    ebx++;
    sub_44d6f();
    if ((int32_t)ebx >= (int32_t)0x00000300)
        goto loc_1e6c4;
    goto loc_1e68b;
loc_1e6a2: // 0160:1e6a2
    ebx = 0;
loc_1e6a4: // 0160:1e6a4
    if (!(bl & 0x03))
        goto loc_1e6ba;
    edx = 0;
    dl = memoryAGet(ds, ecx);
    eax = 0x000003c9;
    edx = sar32(edx, 0x02);
    sub_44d6f();
loc_1e6ba: // 0160:1e6ba
    ebx++;
    ecx++;
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1e6a4;
loc_1e6c4: // 0160:1e6c4
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6c8() // 0160:1e6c8 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00001001;
    eax = 0x00000010;
    ebx = 0;
    memoryASet16(ds, esp, dx);
    memoryASet16(ds, esp + 4, bx);
    ebx = esp;
    edx = esp;
    sub_4576a();
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6f1() // 0160:1e6f1 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x5c6fc) != 0x00000000)
        goto loc_1e709;
    if (memoryAGet32(ds, 0x5c70c) == 0x00000000)
        goto loc_1e709;
    eax = 0x00000001;
    esp += 4;
    return;
loc_1e709: // 0160:1e709
    eax = 0;
    esp += 4;
}
void sub_1e70c() // 0160:1e70c +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c708, edx);
    memoryASet32(ds, 0x5c700, eax);
    edx = pop32();
    esp += 4;
}
void sub_1e720() // 0160:1e720 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x22313c);
    edx = 0x00000050;
    memoryASet32(ds, 0x5c708, eax);
    memoryASet32(ds, 0x5c700, edx);
    edx = pop32();
    esp += 4;
}
void sub_1e738() // 0160:1e738 +long
{
    esp -= 4;
    goto loc_1e738;
loc_1e72b: // 0160:1e72b
    memoryASet32(ds, 0x5c708, eax);
    memoryASet32(ds, 0x5c700, edx);
    edx = pop32();
    esp += 4;
    return;
loc_1e738: // 0160:1e738
    push32(edx);
    eax = memoryAGet32(ds, 0x22313c);
    edx = 0;
    goto loc_1e72b;
}
void sub_1e742() // 0160:1e742 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = 0;
loc_1e748: // 0160:1e748
    eax++;
    dl = memoryAGet(ds, eax + 2322675);
    memoryASet(ds, eax + 2193007, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1e748;
    memoryASet32(ds, 0x5c6fc, 0x000000ff);
    eax = memoryAGet32(ds, 0x22313c);
    ebx = 0x00000100;
    esi = 0x00000001;
    memoryASet32(ds, 0x5c708, eax);
    ecx = 0;
    memoryASet32(ds, 0x5c704, ebx);
    memoryASet32(ds, 0x5c700, ecx);
    memoryASet32(ds, 0x5c70c, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e793() // 0160:1e793 +long
{
    esp -= 4;
    goto loc_1e793;
loc_1e72b: // 0160:1e72b
    memoryASet32(ds, 0x5c708, eax);
    memoryASet32(ds, 0x5c700, edx);
    edx = pop32();
    esp += 4;
    return;
    // gap 91 bytes
loc_1e793: // 0160:1e793
    push32(edx);
    eax = memoryAGet32(ds, 0x22313c);
    edx = 0x000000ff;
    goto loc_1e72b;
}
void sub_1e7a0() // 0160:1e7a0 +long
{
    esp -= 4;
    push32(edx);
    memoryASet32(ds, 0x5c6f8, eax);
    edx = 0;
    eax = 0x000000ff;
    memoryASet32(ds, 0x5c6fc, edx);
    sub_1e70c();
    edx = pop32();
    esp += 4;
}
void sub_1e7ba() // 0160:1e7ba +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x5c710, edx);
    edx = memoryAGet32(ds, 0x22313c);
    ebx = memoryAGet32(ds, 0x5c708);
    edx -= ebx;
    eax = edx;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax < 0)
        goto loc_1e7f7;
    if ((int32_t)eax <= (int32_t)0x000000c8)
        goto loc_1e805;
loc_1e7f7: // 0160:1e7f7
    eax = 0;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c708, edx);
loc_1e805: // 0160:1e805
    if (!eax)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c6fc);
    ecx = memoryAGet32(ds, 0x5c700);
    if (edx == ecx)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c708, edx);
    edx = memoryAGet32(ds, 0x5c6fc);
    if (edx == ecx)
        goto loc_1e8f1;
    if ((int32_t)edx <= (int32_t)ecx)
        goto loc_1e84d;
    ebx = edx;
    ebx -= eax;
    memoryASet32(ds, 0x5c6fc, ebx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1e860;
    goto loc_1e85a;
loc_1e84d: // 0160:1e84d
    ebp = edx + eax;
    memoryASet32(ds, 0x5c6fc, ebp);
    if ((int32_t)ebp <= (int32_t)ecx)
        goto loc_1e860;
loc_1e85a: // 0160:1e85a
    memoryASet32(ds, 0x5c6fc, ecx);
loc_1e860: // 0160:1e860
    ecx = memoryAGet32(ds, 0x5c704);
    esi = memoryAGet32(ds, 0x5c6f8);
    ecx <<= 2;
    if (esi)
        goto loc_1e8a1;
    esi = 0x000000ff;
    ebp = memoryAGet32(ds, 0x5c6fc);
    ebx = 0;
    goto loc_1e89b;
loc_1e882: // 0160:1e882
    edx = 0;
    dl = memoryAGet(ds, ebx + 2193008);
    edx = (int32_t)edx * (int32_t)ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 2322675, al);
loc_1e89b: // 0160:1e89b
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_1e8dd;
    goto loc_1e882;
loc_1e8a1: // 0160:1e8a1
    esi = ecx;
    ebx = 0;
    goto loc_1e8d9;
loc_1e8a7: // 0160:1e8a7
    eax = memoryAGet32(ds, 0x5c6f8);
    edx = 0;
    ecx = 0;
    dl = memoryAGet(ds, ebx + eax);
    cl = memoryAGet(ds, ebx + 2193008);
    edi = memoryAGet32(ds, 0x5c6fc);
    edx -= ecx;
    edx = (int32_t)edx * (int32_t)edi;
    edi = 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx++;
    eax += ecx;
    memoryASet(ds, ebx + 2322675, al);
loc_1e8d9: // 0160:1e8d9
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1e8a7;
loc_1e8dd: // 0160:1e8dd
    memoryASet32(ds, 0x5c710, 0x00000001);
    eax = 0x002370f4;
    sub_1e66f();
loc_1e8f1: // 0160:1e8f1
    eax = memoryAGet32(ds, 0x5c6fc);
    if (eax != memoryAGet32(ds, 0x5c700))
        goto loc_1f2f9;
    if (memoryAGet32(ds, 0x5c6f8) == 0x00000000)
        goto loc_1e922;
    ebx = 0;
loc_1e90d: // 0160:1e90d
    ebx++;
    al = memoryAGet(ds, ebx + 2322675);
    memoryASet(ds, ebx + 2193007, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1e90d;
loc_1e922: // 0160:1e922
    ecx = 0x000000b0;
    esi = 0;
    memoryASet32(ds, 0x5c704, ecx);
    memoryASet32(ds, 0x5c6f8, esi);
    goto loc_1f2f9;
    // gap 2495 bytes
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e93a() // 0160:1e93a +long
{
    esp -= 4;
    goto loc_1e93a;
loc_1e7b8: // 0160:1e7b8
    edx = pop32();
    esp += 4;
    return;
    // gap 384 bytes
loc_1e93a: // 0160:1e93a
    push32(edx);
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c708, edx);
    memoryASet32(ds, 0x5c700, eax);
loc_1e94c: // 0160:1e94c
    {
        static int c=0;
        if (++c%10 == 0)
        {
            memoryASet32(ds, 0x5c6fc, (memoryAGet32(ds, 0x5c6fc)+5)&255);
            memoryASet32(ds, 0x22313c, memoryAGet32(ds, 0x22313c)+1);
        }
        sync();
    }
    eax = memoryAGet32(ds, 0x5c6fc);
    if (eax == memoryAGet32(ds, 0x5c700))
        goto loc_1e7b8;
    sub_1e7ba();
    goto loc_1e94c;
}
void sub_1e964() // 0160:1e964 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    eax = 0;
loc_1e96b: // 0160:1e96b
    eax++;
    dl = memoryAGet(ds, eax + 2322675);
    memoryASet(ds, eax + 2243251, dl);
    if ((int32_t)eax < (int32_t)0x00000400)
        goto loc_1e96b;
    esi = 0x0000001f;
    ebp = esi;
loc_1e986: // 0160:1e986
    ecx = esi;
    ebx = 0;
loc_1e98a: // 0160:1e98a
    edx = 0;
    dl = memoryAGet(ds, ebx + 2243252);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx++;
    memoryASet(ds, ebx + 2322675, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1e98a;
    eax = 0x002370f4;
    esi--;
    sub_1e66f();
    if (esi != 0xffffffff)
        goto loc_1e986;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e9c1() // 0160:1e9c1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    esi = 0x0000001f;
loc_1e9cc: // 0160:1e9cc
    ebx = 0;
loc_1e9ce: // 0160:1e9ce
    edx = 0;
    dl = memoryAGet(ds, ebx + 2243252);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx++;
    memoryASet(ds, ebx + 2322675, al);
    if ((int32_t)ebx < (int32_t)0x00000400)
        goto loc_1e9ce;
    eax = 0x002370f4;
    ecx++;
    sub_1e66f();
    if ((int32_t)ecx < (int32_t)0x00000020)
        goto loc_1e9cc;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ea04() // 0160:1ea04 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    bl = al;
    edx = 0;
    goto loc_1ea0f;
loc_1ea0e: // 0160:1ea0e
    edx++;
loc_1ea0f: // 0160:1ea0f
    edi = 0x0005c724;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    if (edx >= ecx)
        goto loc_1ea2a;
    if (bl != memoryAGet(ds, edx + 378660))
        goto loc_1ea0e;
loc_1ea2a: // 0160:1ea2a
    eax = edx;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ea31() // 0160:1ea31 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = eax;
    esi = edx;
    edx = memoryAGet32(ds, 0x5c763);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 8;
    memoryASet32(ds, esp, eax);
    goto loc_1ead2;
loc_1ea5a: // 0160:1ea5a
    eax = 0;
    al = memoryAGet(ds, esi);
    if (eax == 0x00000020)
        goto loc_1eace;
    if (eax != 0x0000005f)
        goto loc_1ea7b;
    eax = 0x0000002d;
    sub_1ea04();
    ebx = eax;
    eax = 0x00000500;
    goto loc_1ea84;
loc_1ea7b: // 0160:1ea7b
    sub_1ea04();
    ebx = eax;
    eax = 0;
loc_1ea84: // 0160:1ea84
    if ((int32_t)ebx >= (int32_t)0x00000040)
        goto loc_1eace;
    edx = ebx;
    ebp = edi + eax;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    eax = eax * 0x00000c80;
    edx = ebx;
    ecx = 0x00223eb4;
    edx = sar32(edx, 0x1f);
    ecx += eax;
    eax = ebx;
    ebx = 0x00000020;
    idiv32(ebx);
    eax = edx * 0x0000000a;
    edx = memoryAGet32(ds, esp);
    eax += ecx;
    ebx = 0x0000000a;
    eax += edx;
    ecx = 0;
    edx = ebp;
    sub_4483f();
loc_1eace: // 0160:1eace
    edi += 0x0000000a;
    esi++;
loc_1ead2: // 0160:1ead2
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1ea5a;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eae0() // 0160:1eae0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ebx = eax;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    ecx += eax;
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x00229ef4;
    ecx >>= 1;
    eax += 0x000000a0;
    eax -= ecx;
    sub_1ea31();
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eb1b() // 0160:1eb1b +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    ecx = eax;
    eax = edx;
    edx = ebx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    eax <<= 6;
    eax += 0x00229ef4;
    edi = edx;
    ebx = eax + ecx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    eax >>= 1;
    ebx -= eax;
    eax = ebx;
    sub_1ea31();
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1eb58() // 0160:1eb58 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = ecx;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1ec18;
    if ((int32_t)edx >= 0)
        goto loc_1eba1;
    ebp = eax;
    ebp <<= 2;
    ebp += eax;
    ebp <<= 2;
    edi = memoryAGet32(ss, ebp + 2242628);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    ebp = memoryAGet32(ss, ebp + 2242612);
    edx >>= 1;
    ebp += edx;
loc_1eba1: // 0160:1eba1
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_1ebb8;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, edx * 4 + 0x223838);
    memoryASet32(ds, esp, eax);
loc_1ebb8: // 0160:1ebb8
    edi = ebx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    edx <<= 2;
    edx += ecx;
    edx += edx;
    edx >>= 1;
    ebp -= edx;
    edx = esi;
    edx <<= 2;
    edx += esi;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, edx * 4 + 0x223834, ebp);
    edi = ebx;
    memoryASet32(ds, edx * 4 + 0x223838, eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    memoryASet32(ds, edx * 4 + 0x223844, ebx);
    eax += eax;
    ecx = 0x0000000a;
    memoryASet32(ds, edx * 4 + 0x22383c, eax);
    memoryASet32(ds, edx * 4 + 0x223840, ecx);
loc_1ec18: // 0160:1ec18
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1ec1f() // 0160:1ec1f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ebx = edx;
    edi = edx;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    edx = ecx;
    ecx <<= 2;
    ecx += edx;
    edx = esi;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    ecx += ecx;
    eax += 0x00229ef4;
    ecx >>= 1;
    eax += 0x000000a0;
    edx = ebx;
    eax -= ecx;
    sub_1ea31();
    edx = memoryAGet32(ds, 0x237918);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x237918, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1ec7a;
    edi = edx + 1;
    memoryASet32(ds, 0x237918, edi);
loc_1ec7a: // 0160:1ec7a
    edx = 0x000000a0;
    eax = memoryAGet32(ds, 0x237918);
    ecx = ebx;
    ebx = esi;
    sub_1eb58();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ec92() // 0160:1ec92 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    esi = edx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    eax += 0x00229ef4;
    eax += ebp;
    edi = ebx;
    memoryASet32(ds, esp, eax);
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    eax = ecx;
    eax <<= 2;
    eax += ecx;
    eax += eax;
    edx = memoryAGet32(ds, esp);
    eax >>= 1;
    edx -= eax;
    eax = edx;
    edx = ebx;
    sub_1ea31();
    edx = memoryAGet32(ds, 0x237918);
    edx &= 0x0000001f;
    memoryASet32(ds, 0x237918, edx);
    if ((int32_t)edx >= (int32_t)0x0000001f)
        goto loc_1ecf3;
    edi = edx + 1;
    memoryASet32(ds, 0x237918, edi);
loc_1ecf3: // 0160:1ecf3
    eax = memoryAGet32(ds, 0x237918);
    ecx = ebx;
    edx = ebp;
    ebx = esi;
    sub_1eb58();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1ed0b() // 0160:1ed0b +long
{
    esp -= 4;
    goto loc_1ed0b;
loc_1eada: // 0160:1eada
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 555 bytes
loc_1ed0b: // 0160:1ed0b
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    edx = 0;
    memoryASet32(ds, 0x217a80, edx);
    edx = memoryAGet32(ds, 0x237918);
    edi = edx;
    edi <<= 2;
    esi = 0x00000001;
    edi += edx;
    eax = 0x00000014;
    edi <<= 2;
    goto loc_1ed74;
loc_1ed38: // 0160:1ed38
    ebp = memoryAGet32(ds, eax + 2242612);
    if ((int32_t)ecx <= (int32_t)ebp)
        goto loc_1ed70;
    edx = ebp;
    edx += memoryAGet32(ds, eax + 2242620);
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_1ed70;
    edx = memoryAGet32(ds, eax + 2242616);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_1ed70;
    edx += memoryAGet32(ds, eax + 2242624);
    if ((int32_t)ebx >= (int32_t)edx)
        goto loc_1ed70;
    eax = 0x00000001;
    edx = esi;
    memoryASet32(ds, 0x217a80, eax);
    goto loc_1ed7a;
loc_1ed70: // 0160:1ed70
    eax += 0x00000014;
    esi++;
loc_1ed74: // 0160:1ed74
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1ed38;
    edx = 0;
loc_1ed7a: // 0160:1ed7a
    eax = edx;
    goto loc_1eada;
}
void sub_1ed81() // 0160:1ed81 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (!eax)
        goto loc_1edbc;
    edx = eax;
    eax <<= 2;
    edx += eax;
    edx <<= 2;
    ebx = memoryAGet32(ds, edx + 2242616);
    eax = ebx;
    eax <<= 2;
    eax += ebx;
    ecx = memoryAGet32(ds, edx + 2242628);
    eax <<= 6;
    ebx = memoryAGet32(ds, edx + 2242612);
    eax += 0x00229ef4;
    edx = ecx;
    eax += ebx;
    sub_1ea31();
loc_1edbc: // 0160:1edbc
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1edc0() // 0160:1edc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    if (!eax)
        goto loc_1ee5c;
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 2242616);
    edx = ebx;
    edx <<= 2;
    ebp = 0x000a8090;
    edx += ebx;
    memoryASet32(ds, esp, eax);
    edx <<= 6;
    ebx = memoryAGet32(ds, eax + 2242612);
    ebp += edx;
    edx += 0x00229ef4;
    ebp += ebx;
    edi = ebx + edx;
    ecx = memoryAGet32(ds, eax + 2242620);
    esi = edi;
    edx = 0;
    esi &= 0x00000003;
    memoryASet32(ds, esp + 4, edx);
    edi -= esi;
    ebp -= esi;
    esi += ecx;
    goto loc_1ee4d;
loc_1ee1f: // 0160:1ee1f
    edx = edi;
    eax = ebp;
    ebx = 0;
    goto loc_1ee34;
loc_1ee27: // 0160:1ee27
    ebx += 0x00000004;
    ecx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ecx);
    edx += 0x00000004;
loc_1ee34: // 0160:1ee34
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1ee27;
    ecx = memoryAGet32(ds, esp + 4);
    ebp += 0x00000140;
    ecx++;
    edi += 0x00000140;
    memoryASet32(ds, esp + 4, ecx);
loc_1ee4d: // 0160:1ee4d
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, edx + 2242624))
        goto loc_1ee1f;
loc_1ee5c: // 0160:1ee5c
    esp += 0x00000008;
    goto loc_1f2f9;
    // gap 1173 bytes
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ee64() // 0160:1ee64 +long
{
    esp -= 4;
    push32(ebx);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (!eax)
        goto loc_1eeb1;
    eax <<= 2;
    if (!edx)
        goto loc_1ee7c;
    memoryASet32(ds, eax + 2242484, memoryAGet32(ds, eax + 2242484) + 1);
    goto loc_1ee82;
loc_1ee7c: // 0160:1ee7c
    memoryASet32(ds, eax + 2242484, memoryAGet32(ds, eax + 2242484) - 1);
loc_1ee82: // 0160:1ee82
    if (memoryAGet32(ds, ebx * 4 + 0x2237b4) == 0x00000000)
        goto loc_1eeaa;
    edi = 0x00000001;
    eax = ebx;
    ebp = 0;
    memoryASet32(ds, 0x5c763, edi);
    sub_1ed81();
    memoryASet32(ds, 0x5c763, ebp);
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1eeaa: // 0160:1eeaa
    eax = ebx;
    sub_1ed81();
loc_1eeb1: // 0160:1eeb1
    ebp = pop32();
    edi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eeb5() // 0160:1eeb5 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1eeb8: // 0160:1eeb8
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 2242480, edx);
    if (eax != 0x00000080)
        goto loc_1eeb8;
    edx = pop32();
    esp += 4;
}
void sub_1eecc() // 0160:1eecc +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = memoryAGet32(ds, 0x5c767);
    if (eax == edx)
        goto loc_1eef5;
    eax = edx;
    edx = 0;
    sub_1ee64();
    edx = 0x00000001;
    eax = ebx;
    sub_1ee64();
    memoryASet32(ds, 0x5c767, ebx);
loc_1eef5: // 0160:1eef5
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eef8() // 0160:1eef8 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = eax;
    if (!eax)
        goto loc_1ef37;
    if (memoryAGet32(ds, eax * 4 + 0x2237b4) == 0x00000000)
        goto loc_1ef2b;
    memoryASet32(ds, 0x5c763, 0x00000001);
    sub_1edc0();
    eax = edx;
    esi = 0;
    sub_1ed81();
    memoryASet32(ds, 0x5c763, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_1ef2b: // 0160:1ef2b
    sub_1edc0();
    eax = edx;
    sub_1ed81();
loc_1ef37: // 0160:1ef37
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1ef3a() // 0160:1ef3a +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = 0;
loc_1ef3f: // 0160:1ef3f
    if (memoryAGet32(ds, eax + 374522) == 0x00000000)
        goto loc_1ef49;
    edx++;
loc_1ef49: // 0160:1ef49
    eax += 0x000000aa;
    if (eax != 0x00000aa0)
        goto loc_1ef3f;
    al = (int32_t)edx >= (int32_t)0x00000002;
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_1ef62() // 0160:1ef62 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x00000001;
    edx = 0;
    ecx = 0;
    ah = 0;
    memoryASet32(ds, 0x5a2f2, edx);
    memoryASet32(ds, 0x21ac46, ebx);
    memoryASet32(ds, 0x59070, edx);
    memoryASet32(ds, 0x21ac90, edx);
    memoryASet(ds, 0x223071, ah);
    dl = 0;
    memoryASet(ds, 0x222f71, dl);
    sub_12593();
    memoryASet32(ds, 0x21ac4a, ebx);
    memoryASet32(ds, 0x21acc8, ecx);
    memoryASet32(ds, 0x5cd20, ecx);
    sub_243aa();
    edx = 0;
    ebx = 0x0004ed6a;
    eax = 0x000000a0;
    memoryASet32(ds, 0x237918, ecx);
    sub_1eb1b();
    ebx = 0x0004ed79;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1eb1b();
    sub_1ef3a();
    if (!eax)
        goto loc_1f00b;
    esi = 0x000000a0;
    edi = 0x00000042;
    edx = 0x0004ed8e;
    eax = 0x0000003c;
    memoryASet32(ds, 0x5c6ec, esi);
    memoryASet32(ds, 0x5c6f0, edi);
    goto loc_1f02b;
loc_1f00b: // 0160:1f00b
    ebx = 0x000000a0;
    ecx = 0x0000004e;
    edx = 0x0004ed98;
    eax = 0x0000003c;
    memoryASet32(ds, 0x5c6ec, ebx);
    memoryASet32(ds, 0x5c6f0, ecx);
loc_1f02b: // 0160:1f02b
    sub_1ec1f();
    edx = 0x0004ed9a;
    eax = 0x00000048;
    sub_1ec1f();
    edx = 0x0004eda5;
    eax = 0x00000090;
    sub_1ec1f();
    edx = 0x0004edb1;
    eax = 0x00000054;
    sub_1ec1f();
    edx = 0x0004edbe;
    eax = 0x0000006c;
    sub_1ec1f();
    edx = 0x0004edc6;
    eax = 0x00000060;
    ebp = 0x00000001;
    sub_1ec1f();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x5c76f, ebp);
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c714, eax);
    memoryASet32(ds, 0x5c718, edx);
    eax = memoryAGet32(ds, 0x22313c);
    edx = 0x000000ff;
    memoryASet32(ds, 0x5c720, eax);
    eax = 0x0000000a;
    sub_1008b();
    goto loc_1f2f9;
    // gap 570 bytes
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1f0bf() // 0160:1f0bf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_243aa();
    eax = 0x0000004e;
    ebx = 0x0004ede1;
    edx = 0;
    ecx = 0x00000060;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0004edd4;
    esi = 0x00000002;
    sub_1eae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1ec92();
    ebx = 0x0004ede5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1ec92();
    ebx = 0x000000b0;
    eax = 0x00000001;
    memoryASet32(ds, 0x5c6f0, ecx);
    memoryASet32(ds, 0x5c76f, esi);
    memoryASet32(ds, 0x5c714, edi);
    memoryASet32(ds, 0x5c718, ebp);
    memoryASet32(ds, 0x5c6ec, ebx);
    goto loc_1fee9;
    // gap 431 bytes
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3049 bytes
loc_1fee9: // 0160:1fee9
    memoryASet32(ds, 0x5c71c, eax);
    goto loc_2038b;
    // gap 1176 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
}
void sub_1f14a() // 0160:1f14a +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_1f14d: // 0160:1f14d
    eax += 0x00000018;
    edx = 0;
    memoryASet32(ds, eax + 377928, edx);
    memoryASet32(ds, eax + 377932, edx);
    memoryASet32(ds, eax + 377936, edx);
    memoryASet32(ds, eax + 377940, edx);
    memoryASet32(ds, eax + 377944, edx);
    memoryASet32(ds, eax + 377948, edx);
    if (eax != 0x00000180)
        goto loc_1f14d;
    edx = pop32();
    esp += 4;
}
void sub_1f17f() // 0160:1f17f +long
{
    esp -= 4;
    goto loc_1f17f;
loc_1ed07: // 0160:1ed07
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
    // gap 1140 bytes
loc_1f17f: // 0160:1f17f
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    ecx = edx;
    if ((int32_t)edx >= 0)
        goto loc_1f18c;
    ecx = -ecx;
loc_1f18c: // 0160:1f18c
    ebx--;
    if (ecx)
        goto loc_1f198;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x30);
loc_1f198: // 0160:1f198
    edi = 0x0000000a;
loc_1f19d: // 0160:1f19d
    if (!ecx)
        goto loc_1f1c4;
    if ((int32_t)ebx < 0)
        goto loc_1f1c4;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax = ebx;
    dl += 0x30;
    memoryASet(ds, esi + eax, dl);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx--;
    ecx = eax;
    goto loc_1f19d;
loc_1f1c4: // 0160:1f1c4
    if ((int32_t)ebx < 0)
        goto loc_1ed07;
    eax = ebx;
    ebx--;
    memoryASet(ds, esi + eax, 0x20);
    goto loc_1f1c4;
}
void sub_1f1d5() // 0160:1f1d5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    edi = 0;
    ebp = 0;
    memoryASet32(ds, esp, edx);
loc_1f1e7: // 0160:1f1e7
    edx = memoryAGet32(ds, esp);
    ecx = ebp;
    eax = 0;
loc_1f1ee: // 0160:1f1ee
    esi = memoryAGet32(ds, ecx + 378826);
    bl = memoryAGet(ds, edx + 374392);
    memoryASet(ds, esi + eax, bl);
    eax++;
    edx++;
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_1f1ee;
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 378826);
    edx = memoryAGet32(ds, edi + 377952);
    eax += 0x00000009;
    sub_1f17f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 378826);
    edx = memoryAGet32(ds, edi + 377956);
    eax += 0x0000000d;
    sub_1f17f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 378826);
    edx = memoryAGet32(ds, edi + 377964);
    eax += 0x00000011;
    sub_1f17f();
    ebx = 0x00000004;
    eax = memoryAGet32(ds, ecx + 378826);
    edx = memoryAGet32(ds, edi + 377968);
    eax += 0x00000015;
    sub_1f17f();
    esi = memoryAGet32(ds, edi + 377964);
    eax = memoryAGet32(ds, edi + 377968);
    ebx = 0x00000004;
    esi -= eax;
    eax = memoryAGet32(ds, ecx + 378826);
    edx = esi;
    eax += 0x00000019;
    sub_1f17f();
    eax = 0x00000019;
    edx = memoryAGet32(ds, ecx + 378826);
    edx += eax;
    dl = memoryAGet(ds, edx + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1f2ab;
    eax = 0x0000001a;
loc_1f2ab: // 0160:1f2ab
    edx = memoryAGet32(ss, ebp + 378826);
    dl = memoryAGet(ds, edx + eax + 1);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_1f2c1;
    eax++;
loc_1f2c1: // 0160:1f2c1
    if ((int32_t)esi <= 0)
        goto loc_1f2cf;
    edx = memoryAGet32(ss, ebp + 378826);
    memoryASet(ds, edx + eax, 0x2b);
loc_1f2cf: // 0160:1f2cf
    if ((int32_t)esi >= 0)
        goto loc_1f2db;
    edx = memoryAGet32(ss, ebp + 378826);
    memoryASet(ds, edx + eax, 0x2d);
loc_1f2db: // 0160:1f2db
    ebx = memoryAGet32(ds, esp);
    edi += 0x00000018;
    ebx += 0x000000aa;
    ebp += 0x00000004;
    memoryASet32(ds, esp, ebx);
    if (ebp != 0x00000040)
        goto loc_1f1e7;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1f300() // 0160:1f300 +long
{
    esp -= 4;
    goto loc_1f300;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1f300: // 0160:1f300
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    eax = 0;
loc_1f30a: // 0160:1f30a
    memoryASet32(ds, eax + 2242420, edx);
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_1f30a;
    esi = 0x00000001;
    edi = 0;
    ebp = 0;
loc_1f322: // 0160:1f322
    if (!esi)
        goto loc_1f2f9;
    edi++;
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_1f2f9;
    esi = ebp;
    eax = ebp;
loc_1f333: // 0160:1f333
    edx = memoryAGet32(ds, eax + 2242424) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 2242420) * 0x00000018;
    ebx = memoryAGet32(ds, ebx + 377972);
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, edx + 377972))
        goto loc_1f35b;
    if (ebp != memoryAGet32(ds, edx + 377952))
        goto loc_1f3cb;
loc_1f35b: // 0160:1f35b
    edx = memoryAGet32(ds, eax + 2242420) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 377952))
        goto loc_1f379;
    edx = memoryAGet32(ds, eax + 2242424) * 0x00000018;
    if (ebp != memoryAGet32(ds, edx + 377952))
        goto loc_1f3cb;
loc_1f379: // 0160:1f379
    edx = memoryAGet32(ds, eax + 2242424) * 0x00000018;
    ebx = memoryAGet32(ds, eax + 2242420) * 0x00000018;
    ecx = memoryAGet32(ds, ebx + 377972);
    if (ecx != memoryAGet32(ds, edx + 377972))
        goto loc_1f3a9;
    ebx = memoryAGet32(ds, ebx + 377952);
    ecx = memoryAGet32(ds, edx + 377952);
    if ((int32_t)ebx <= (int32_t)ecx)
        goto loc_1f3a9;
    if (ebp != ecx)
        goto loc_1f3cb;
loc_1f3a9: // 0160:1f3a9
    ebx = memoryAGet32(ds, eax + 2242424) * 0x000000aa;
    edx = memoryAGet32(ds, eax + 2242420) * 0x000000aa;
    edx = memoryAGet32(ds, edx + 374522);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, ebx + 374522))
        goto loc_1f3e8;
loc_1f3cb: // 0160:1f3cb
    edx = memoryAGet32(ds, eax + 2242424);
    ebx = memoryAGet32(ds, eax + 2242420);
    memoryASet32(ds, eax + 2242420, edx);
    esi = 0x00000001;
    memoryASet32(ds, eax + 2242424, ebx);
loc_1f3e8: // 0160:1f3e8
    eax += 0x00000004;
    if ((int32_t)eax >= (int32_t)0x0000003c)
        goto loc_1f322;
    goto loc_1f333;
}
void sub_1f3f9() // 0160:1f3f9 +long
{
    esp -= 4;
    goto loc_1f3f9;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 249 bytes
loc_1f3f9: // 0160:1f3f9
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_243aa();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0004ede8;
    edi = 0x0000002a;
    sub_1eae0();
    edx = 0x0004ee01;
    eax = 0x00000018;
    esi = 0;
    sub_1eae0();
loc_1f42e: // 0160:1f42e
    ecx = memoryAGet32(ds, 0x237910);
    ecx <<= 3;
    ecx += esi;
    ecx = memoryAGet32(ds, ecx * 4 + 0x223774);
    eax = ecx * 0x000000aa;
    ebp = memoryAGet32(ds, eax + 374522);
    ebx = memoryAGet32(ds, ecx * 4 + 0x5c7ca);
    if (ebp)
        goto loc_1f45c;
    ebx = 0x0004ed98;
loc_1f45c: // 0160:1f45c
    eax = 0x000000a0;
    edx = edi;
    sub_1ec92();
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x23790c);
    edi += 0x0000000c;
    eax <<= cl;
    esi++;
    if (!(eax & edx))
        goto loc_1f489;
    edx = 0x00000001;
    eax = esi;
    sub_1ee64();
loc_1f489: // 0160:1f489
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_1f42e;
    ebx = 0x0004ee1f;
    edx = 0x00000096;
    eax = 0x00000118;
    sub_1ec92();
    ebx = 0x0004ee24;
    edx = 0x00000096;
    eax = 0x000000c8;
    sub_1ec92();
    if ((int32_t)memoryAGet32(ds, 0x237908) >= (int32_t)0x00000002)
        goto loc_1f4c9;
    eax = 0x0000000a;
    sub_1edc0();
loc_1f4c9: // 0160:1f4c9
    eax = memoryAGet32(ds, 0x5c640);
    if (eax <= 0)
        goto loc_1f4d9;
    if (eax == 0x00000001)
        goto loc_1f4e0;
    goto loc_1f4f4;
loc_1f4d9: // 0160:1f4d9
    ebx = 0x0004ee2a;
    goto loc_1f4e5;
loc_1f4e0: // 0160:1f4e0
    ebx = 0x0004ee33;
loc_1f4e5: // 0160:1f4e5
    edx = 0x00000096;
    eax = 0x00000078;
    sub_1ec92();
loc_1f4f4: // 0160:1f4f4
    if (memoryAGet32(ds, 0x237910) == 0x00000000)
        goto loc_1f504;
    ebx = 0x0004ee3c;
    goto loc_1f509;
loc_1f504: // 0160:1f504
    ebx = 0x0004ee41;
loc_1f509: // 0160:1f509
    edx = 0x00000096;
    eax = 0x00000028;
    sub_1ec92();
    goto loc_1f2f9;
}
void sub_1f51d() // 0160:1f51d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0x00000118;
    edi = 0x0000009c;
    ebp = 0x0000000a;
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x237910, edx);
    memoryASet32(ds, 0x23790c, edx);
    memoryASet32(ds, 0x237908, edx);
    memoryASet32(ds, 0x5c6ec, esi);
    memoryASet32(ds, 0x5c6f0, edi);
    sub_1f300();
    sub_1f1d5();
    sub_1f3f9();
    sub_1eeb5();
    eax = 0x000000a8;
    edx = 0xffffff58;
    memoryASet32(ds, 0x5c76f, ebp);
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c714, eax);
    memoryASet32(ds, 0x5c718, edx);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1f59b() // 0160:1f59b +long
{
    esp -= 4;
    goto loc_1f59b;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 667 bytes
loc_1f59b: // 0160:1f59b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_1f5b8;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_1f7d7;
loc_1f5b8: // 0160:1f5b8
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f5c8;
    edi = 0x00000001;
    goto loc_1f5cd;
loc_1f5c8: // 0160:1f5c8
    edi = 0xffffffff;
loc_1f5cd: // 0160:1f5cd
    esi = memoryAGet32(ds, 0x22313c);
    esi -= memoryAGet32(ds, 0x5c773);
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1f6b2;
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
    ebx = 0;
loc_1f5ee: // 0160:1f5ee
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = eax;
    eax = ebx + 1;
    if (edx != eax)
        goto loc_1f6a8;
    ecx = memoryAGet32(ds, 0x237910);
    ecx <<= 3;
    ecx += ebx;
    ecx = memoryAGet32(ds, ecx * 4 + 0x223774);
    edx = ecx * 0x000000aa;
    if (memoryAGet32(ds, edx + 374522) == 0x00000000)
        goto loc_1f6a8;
    edx = 0x00000001;
    edx <<= cl;
    ecx = edx;
    edx = memoryAGet32(ds, 0x23790c);
    ebp = memoryAGet32(ds, 0x23790c);
    edx ^= ecx;
    if (!(ecx & ebp))
        goto loc_1f662;
    ecx = memoryAGet32(ds, 0x237908);
    memoryASet32(ds, 0x23790c, edx);
    ecx--;
    edx = 0;
    memoryASet32(ds, 0x237908, ecx);
    goto loc_1f684;
loc_1f662: // 0160:1f662
    ecx = memoryAGet32(ds, 0x237908);
    if ((int32_t)ecx >= (int32_t)memoryAGet32(ds, 0x5c65c))
        goto loc_1f689;
    memoryASet32(ds, 0x23790c, edx);
    edx = ecx + 1;
    memoryASet32(ds, 0x237908, edx);
    edx = 0x00000001;
loc_1f684: // 0160:1f684
    sub_1ee64();
loc_1f689: // 0160:1f689
    if ((int32_t)memoryAGet32(ds, 0x237908) <= (int32_t)0x00000001)
        goto loc_1f69e;
    eax = 0x0000000a;
    sub_1ed81();
    goto loc_1f6a8;
loc_1f69e: // 0160:1f69e
    eax = 0x0000000a;
    sub_1edc0();
loc_1f6a8: // 0160:1f6a8
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_1f5ee;
loc_1f6b2: // 0160:1f6b2
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000009)
        goto loc_1f6d9;
    eax = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x5c71c, eax);
    memoryASet32(ds, 0x5c76f, edx);
loc_1f6d9: // 0160:1f6d9
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x0000000a)
        goto loc_1f728;
    if ((int32_t)memoryAGet32(ds, 0x237908) <= (int32_t)0x00000001)
        goto loc_1f728;
    eax = 0xffffffff;
    ebx = 0x000000ff;
    ecx = 0;
    edx = 0x00000080;
    memoryASet32(ds, 0x5cd20, ecx);
    memoryASet32(ds, 0x5c71c, ecx);
    memoryASet32(ds, 0x5c76f, eax);
    sub_1e738();
    eax = 0x0000001a;
    sub_36a16();
loc_1f728: // 0160:1f728
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1f7a4;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x0000000b)
        goto loc_1f7a4;
    edx = memoryAGet32(ds, 0x5c640);
    edx += edi;
    memoryASet32(ds, 0x5c640, edx);
    if ((int32_t)edx <= (int32_t)0x00000001)
        goto loc_1f761;
    ecx = 0;
    memoryASet32(ds, 0x5c640, ecx);
loc_1f761: // 0160:1f761
    if ((int32_t)memoryAGet32(ds, 0x5c640) >= (int32_t)0x00000000)
        goto loc_1f774;
    memoryASet32(ds, 0x5c640, 0x00000001);
loc_1f774: // 0160:1f774
    eax = memoryAGet32(ds, 0x5c640);
    if (eax <= 0)
        goto loc_1f784;
    if (eax == 0x00000001)
        goto loc_1f790;
    goto loc_1f79a;
loc_1f784: // 0160:1f784
    memoryASet32(ds, 0x223920, 0x0004ee2a);
    goto loc_1f79a;
loc_1f790: // 0160:1f790
    memoryASet32(ds, 0x223920, 0x0004ee33);
loc_1f79a: // 0160:1f79a
    eax = 0x0000000b;
    sub_1eef8();
loc_1f7a4: // 0160:1f7a4
    if ((int32_t)esi <= (int32_t)0x00000023)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x0000000c)
        goto loc_1f2f9;
    memoryASet(ds, 0x237910, memoryAGet(ds, 0x237910) ^ 0x01);
    sub_1f3f9();
    goto loc_1f2f9;
loc_1f7d7: // 0160:1f7d7
    memoryASet32(ds, 0x5c773, edx);
    goto loc_1f2f9;
}
void sub_1f7e2() // 0160:1f7e2 +long
{
    esp -= 4;
    goto loc_1f7e2;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1250 bytes
loc_1f7e2: // 0160:1f7e2
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000020;
    edx = 0;
    ebx = 0x00000010;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
loc_1f801: // 0160:1f801
    eax = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, eax + 378762);
    if ((int32_t)eax < 0)
        goto loc_1f906;
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_1f82a;
    edx = memoryAGet32(ds, esp + 12);
    edi = 0;
    memoryASet32(ds, edx + 378778, edi);
    goto loc_1f83b;
loc_1f82a: // 0160:1f82a
    ecx = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, eax * 4 + 0x5c3c0);
    memoryASet32(ds, ecx + 378778, edx);
loc_1f83b: // 0160:1f83b
    edx = memoryAGet32(ds, eax * 4 + 0x5c410);
    eax = eax * 0x000000aa;
    ecx = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp + 4);
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 6;
    esi = 0;
    memoryASet32(ds, esp + 20, eax);
    eax = 0x00000040;
    memoryASet32(ds, ecx + 378794, edx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 20);
    ebp = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 16, eax);
loc_1f87c: // 0160:1f87c
    if ((int32_t)esi >= (int32_t)0x00000008)
        goto loc_1f88f;
    al = memoryAGet(ss, ebp + 374392);
    memoryASet(ds, edi + 365213, al);
    goto loc_1f896;
loc_1f88f: // 0160:1f88f
    memoryASet(ds, edi + 365213, 0x20);
loc_1f896: // 0160:1f896
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esp + 24);
    eax += esi;
    edx = esi + 18;
    ebx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    ecx = memoryAGet32(ds, esp + 16);
    ecx += ebx;
loc_1f8af: // 0160:1f8af
    eax += 0x00000010;
    bl = memoryAGet(ds, edx + 374392);
    edx += 0x00000012;
    memoryASet(ds, eax + 364940, bl);
    if (eax != ecx)
        goto loc_1f8af;
    ebx = memoryAGet32(ds, esp + 28);
    edi++;
    ebp++;
    ebx++;
    esi++;
    memoryASet32(ds, esp + 28, ebx);
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_1f87c;
    edx = 0x00000007;
    eax = memoryAGet32(ds, esp + 8);
    eax += edx;
    goto loc_1f8e5;
loc_1f8e3: // 0160:1f8e3
    eax--;
    edx--;
loc_1f8e5: // 0160:1f8e5
    if ((int32_t)edx <= 0)
        goto loc_1f8f6;
    ecx = 0;
    cl = memoryAGet(ds, eax + 365213);
    if (ecx == 0x00000020)
        goto loc_1f8e3;
loc_1f8f6: // 0160:1f8f6
    edx++;
    eax = memoryAGet32(ds, esp + 12);
    edx = edx + edx*4;
    memoryASet32(ds, eax + 365278, edx);
    goto loc_1f957;
loc_1f906: // 0160:1f906
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00000003;
    esi = memoryAGet32(ds, esp + 8);
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + 378778, ecx);
    eax = memoryAGet32(ds, esp + 4);
    dl = 0x20;
    eax <<= 6;
loc_1f925: // 0160:1f925
    eax++;
    memoryASet(ds, eax + 364955, dl);
    memoryASet(ds, eax + 364971, dl);
    esi++;
    memoryASet(ds, eax + 364987, dl);
    memoryASet(ds, esi + 365212, dl);
    memoryASet(ds, eax + 365003, dl);
    if (esi != edi)
        goto loc_1f925;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, eax + 365278, 0x00000005);
loc_1f957: // 0160:1f957
    edi = memoryAGet32(ds, esp);
    ebp = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    edi += 0x00000010;
    ebp += 0x00000010;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 12, eax);
    memoryASet32(ds, esp + 4, edx);
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_1f801;
    sub_1128d();
    sub_1139d();
    esp += 0x00000020;
    goto loc_1f2f9;
}
void sub_1f99a() // 0160:1f99a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = ebx;
    ebx = 0;
    goto loc_1f9b0;
loc_1f9a2: // 0160:1f9a2
    cl = memoryAGet(ds, eax);
    if (cl == memoryAGet(ds, edx))
        goto loc_1f9ad;
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1f9ad: // 0160:1f9ad
    edx++;
    eax++;
    ebx++;
loc_1f9b0: // 0160:1f9b0
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1f9a2;
    eax = 0x00000001;
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1f9bc() // 0160:1f9bc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
    goto loc_1f9d4;
loc_1f9c4: // 0160:1f9c4
    ebx = 0;
    bl = memoryAGet(ds, eax);
    if (ebx == 0x00000020)
        goto loc_1f9d2;
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1f9d2: // 0160:1f9d2
    eax++;
    edx++;
loc_1f9d4: // 0160:1f9d4
    if ((int32_t)edx < (int32_t)ecx)
        goto loc_1f9c4;
    eax = 0x00000001;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1f9e0() // 0160:1f9e0 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edi = eax;
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 20, ebx);
    if (!ebx)
        goto loc_1f9fc;
    ebp = 0x00000010;
    goto loc_1fa01;
loc_1f9fc: // 0160:1f9fc
    ebp = 0x00000008;
loc_1fa01: // 0160:1fa01
    edx = ebp;
    eax = edi;
    sub_1f9bc();
    if (eax)
        goto loc_1fab7;
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_1fa2d;
    eax = 0x00000001;
    edx = 0x00000005;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, edx);
    goto loc_1fa3a;
loc_1fa2d: // 0160:1fa2d
    esi = 0x00000001;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, esp + 16, esi);
loc_1fa3a: // 0160:1fa3a
    memoryASet32(ds, esp + 8, 0x0005b678);
    ecx = memoryAGet32(ds, esp + 4);
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebx = 0;
    eax += eax;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp, eax);
    goto loc_1fab0;
loc_1fa5a: // 0160:1fa5a
    esi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    esi += eax;
    goto loc_1fa93;
loc_1fa69: // 0160:1fa69
    eax = memoryAGet32(ds, esp + 24);
    if (eax != memoryAGet32(ds, esp + 12))
        goto loc_1fa79;
    if (ecx == memoryAGet32(ds, esp + 20))
        goto loc_1fa8f;
loc_1fa79: // 0160:1fa79
    ebx = ebp;
    edx = esi;
    eax = edi;
    sub_1f99a();
    if (!eax)
        goto loc_1fa8f;
    eax = 0x00000001;
    goto loc_1fab9;
loc_1fa8f: // 0160:1fa8f
    esi += 0x00000012;
    ecx++;
loc_1fa93: // 0160:1fa93
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_1fa69;
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 24);
    ebx += 0x000000aa;
    ecx++;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 24, ecx);
loc_1fab0: // 0160:1fab0
    if ((int32_t)memoryAGet32(ds, esp + 24) < (int32_t)0x00000010)
        goto loc_1fa5a;
loc_1fab7: // 0160:1fab7
    eax = 0;
loc_1fab9: // 0160:1fab9
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1fac1() // 0160:1fac1 +long
{
    esp -= 4;
    goto loc_1fac1;
loc_1ee5c: // 0160:1ee5c
    esp += 0x00000008;
    goto loc_1f2f9;
    // gap 1173 bytes
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1985 bytes
loc_1fac1: // 0160:1fac1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = 0;
    memoryASet32(ds, esp, ebp);
    memoryASet32(ds, esp + 4, ebp);
loc_1fad3: // 0160:1fad3
    if (!ebp)
        goto loc_1fade;
    ecx = 0x00000010;
    goto loc_1fae3;
loc_1fade: // 0160:1fade
    ecx = 0x00000008;
loc_1fae3: // 0160:1fae3
    edi = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax = 0;
    goto loc_1fb0e;
loc_1faee: // 0160:1faee
    edx = memoryAGet32(ds, 0x237914) * 0x000000aa;
    edx += edi;
    ebx = edx + eax;
    eax++;
    edx = memoryAGet32(ds, esi + 378894);
    bl = memoryAGet(ds, ebx + 374392);
    memoryASet(ds, edx + eax + 12, bl);
loc_1fb0e: // 0160:1fb0e
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1faee;
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ebp++;
    ecx += 0x00000004;
    esi += 0x00000012;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)ebp < (int32_t)0x00000005)
        goto loc_1fad3;
    goto loc_1ee5c;
}
void sub_1fb31() // 0160:1fb31 +long
{
    esp -= 4;
    goto loc_1fb31;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2097 bytes
loc_1fb31: // 0160:1fb31
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp + 12, edx);
    memoryASet32(ds, esp + 16, edx);
loc_1fb4a: // 0160:1fb4a
    if (memoryAGet32(ds, esp + 12) == 0x00000000)
        goto loc_1fb58;
    ecx = 0x00000010;
    goto loc_1fb5d;
loc_1fb58: // 0160:1fb58
    ecx = 0x00000008;
loc_1fb5d: // 0160:1fb5d
    edx = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, 0x237914);
    memoryASet32(ds, esp + 4, edx);
    edx = edi * 0x000000aa;
    esi = ebp;
    memoryASet32(ds, esp, edx);
    edi = edx;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    edi += edx;
    goto loc_1fb94;
loc_1fb82: // 0160:1fb82
    eax++;
    edx = memoryAGet32(ds, esi + 378894);
    dl = memoryAGet(ds, edx + eax + 12);
    memoryASet(ds, edi + eax + 374391, dl);
loc_1fb94: // 0160:1fb94
    if ((int32_t)eax < (int32_t)ecx)
        goto loc_1fb82;
    eax = 0x0005b678;
    ebx = memoryAGet32(ds, esp);
    edi = memoryAGet32(ds, esp + 4);
    eax += ebx;
    edx = ecx;
    eax += edi;
    sub_1f9bc();
    ebx = memoryAGet32(ds, 0x237914);
    edx = eax;
    eax = ebx * 0x000000aa;
    dl = !edx;
    edx &= 0x000000ff;
    memoryASet32(ds, esi + eax + 374522, edx);
    eax += ebp;
    ecx = memoryAGet32(ds, eax + 374522);
    if (ecx)
        goto loc_1fbf6;
    memoryASet32(ds, eax + 374542, ecx);
    ebx = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, eax + 374482, ecx);
    ebx++;
    memoryASet32(ds, eax + 374502, ecx);
    memoryASet32(ds, esp + 8, ebx);
loc_1fbf6: // 0160:1fbf6
    esi = memoryAGet32(ds, esp + 16);
    edi = memoryAGet32(ds, esp + 12);
    ebp += 0x00000004;
    esi += 0x00000012;
    edi++;
    memoryASet32(ds, esp + 16, esi);
    memoryASet32(ds, esp + 12, edi);
    if ((int32_t)edi < (int32_t)0x00000005)
        goto loc_1fb4a;
    edx = memoryAGet32(ds, 0x237914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    eax += edx;
    if ((int32_t)memoryAGet32(ds, esp + 8) < (int32_t)0x00000004)
        goto loc_1fc3d;
    ecx = 0;
    memoryASet32(ds, eax + 374522, ecx);
    goto loc_1fc6f;
loc_1fc3d: // 0160:1fc3d
    edx = 0x00000008;
    eax += 0x0005b678;
    sub_1f9bc();
    if (eax)
        goto loc_1fc6f;
    edx = memoryAGet32(ds, 0x237914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    edx = eax;
    eax <<= 4;
    memoryASet32(ds, edx + eax + 374522, 0x00000001);
loc_1fc6f: // 0160:1fc6f
    esp += 0x00000014;
    goto loc_1f2f9;
}
void sub_1fc77() // 0160:1fc77 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x237904) != 0x00000000)
        goto loc_1fca0;
    ebx = 0x0004ee46;
    edx = 0x0000009c;
    eax = 0x000000a0;
    sub_1eb1b();
    memoryASet32(ds, 0x237904, 0x00000001);
loc_1fca0: // 0160:1fca0
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1fca3() // 0160:1fca3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x237904) == 0x00000000)
        goto loc_1fce3;
    ecx = 0x000a8090;
    edx = 0x00229ef4;
    ecx += 0x0000c300;
    edx += 0x0000c300;
    eax = ecx;
    ecx += 0x00000c80;
loc_1fccd: // 0160:1fccd
    ebx = memoryAGet32(ds, eax);
    eax += 0x00000004;
    memoryASet32(ds, edx, ebx);
    edx += 0x00000004;
    if (eax != ecx)
        goto loc_1fccd;
    ebx = 0;
    memoryASet32(ds, 0x237904, ebx);
loc_1fce3: // 0160:1fce3
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1fce7() // 0160:1fce7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1f1d5();
    edx = 0;
    esi = 0x00000048;
    memoryASet32(ds, 0x237904, edx);
    sub_1fac1();
    sub_243aa();
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, 0x5c80e);
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0000000c;
    ecx = 0x00000004;
    sub_1ec92();
loc_1fd27: // 0160:1fd27
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 378894);
    sub_1ec92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_1fd27;
    ebx = memoryAGet32(ds, 0x237914);
    ebx = memoryAGet32(ds, ebx * 4 + 0x5c3c0);
    edx = 0x00000024;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, ebx * 4 + 0x5c7ba);
    sub_1ec92();
    ebx = 0x0004ee5a;
    edx = 0x00000090;
    eax = 0x00000037;
    sub_1ec92();
    ebx = 0x0004ee5f;
    edx = 0x00000084;
    eax = 0x00000037;
    sub_1ec92();
    ebx = 0x0004ee1f;
    edx = 0x0000008a;
    eax = 0x00000109;
    sub_1ec92();
    edx = memoryAGet32(ds, 0x237914);
    ebx = 0x00000003;
    eax = 0x0005c786;
    edx = memoryAGet32(ds, edx * 4 + 0x5c410);
    sub_1f17f();
    ebx = 0x0005c77f;
    edx = 0x00000030;
    eax = 0x000000a0;
    sub_1ec92();
    ebx = 0x0004ee64;
    edx = 0x0000008a;
    goto loc_200eb;
    // gap 777 bytes
loc_200eb: // 0160:200eb
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1fde2() // 0160:1fde2 +long
{
    esp -= 4;
    goto loc_1fde2;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2786 bytes
loc_1fde2: // 0160:1fde2
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x237914);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    ebp = eax;
    ebp <<= 4;
    ebp += eax;
    edi = ebp + 16;
    esi = 0;
    ebx = ebp;
    cl = 0x20;
loc_1fe07: // 0160:1fe07
    eax = esi * 0x00000012;
    edx = edi;
    eax += ebp;
loc_1fe0e: // 0160:1fe0e
    eax++;
    memoryASet(ds, eax + 374391, cl);
    if (eax != edx)
        goto loc_1fe0e;
    ebx += 0x00000004;
    edx = 0;
    memoryASet32(ds, ebx + 374538, edx);
    memoryASet32(ds, ebx + 374478, edx);
    edi += 0x00000012;
    memoryASet32(ds, ebx + 374498, edx);
    esi++;
    memoryASet32(ds, ebx + 374518, edx);
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_1fe07;
    edx = memoryAGet32(ds, 0x237914);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = 0;
    memoryASet32(ds, eax * 8 + 0x5c460, edx);
    memoryASet32(ds, eax * 8 + 0x5c464, edx);
    memoryASet32(ds, eax * 8 + 0x5c468, edx);
    memoryASet32(ds, eax * 8 + 0x5c46c, edx);
    memoryASet32(ds, eax * 8 + 0x5c470, edx);
    memoryASet32(ds, eax * 8 + 0x5c474, edx);
    eax = memoryAGet32(ds, 0x237914);
    edx = 0x00000003;
    ebx = 0x00000064;
    memoryASet32(ds, eax * 4 + 0x5c3c0, edx);
    memoryASet32(ds, eax * 4 + 0x5c410, ebx);
    goto loc_1f2f9;
}
void sub_1fe9a() // 0160:1fe9a +long
{
    esp -= 4;
    goto loc_1fe9a;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2970 bytes
loc_1fe9a: // 0160:1fe9a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000109;
    ebx = 0x00000090;
    esi = 0x00000003;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    ecx = 0;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    memoryASet32(ds, 0x5c777, ecx);
    sub_1fce7();
    eax = 0x00000001;
    memoryASet32(ds, 0x5c76f, esi);
    memoryASet32(ds, 0x5c714, edi);
    memoryASet32(ds, 0x5c718, ebp);
    memoryASet32(ds, 0x5c71c, eax);
    goto loc_2038b;
    // gap 1176 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
}
void sub_1fef3() // 0160:1fef3 +long
{
    esp -= 4;
    goto loc_1fef3;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3059 bytes
loc_1fef3: // 0160:1fef3
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = 0x0004ede1;
    edx = 0;
    ecx = 0x000000b0;
    memoryASet32(ds, 0x59070, edx);
    sub_243aa();
    eax = 0x0000004e;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0004ee6a;
    esi = 0x00000060;
    sub_1eae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x0000000f;
    sub_1ec92();
    ebx = 0x0004ede5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0x000000a8;
    sub_1ec92();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x5c6ec, ecx);
    memoryASet32(ds, 0x5c6f0, esi);
    memoryASet32(ds, 0x5c76f, edi);
    memoryASet32(ds, 0x5c714, ebp);
    memoryASet32(ds, 0x5c718, eax);
    memoryASet32(ds, 0x5c71c, edx);
    goto loc_2038b;
    // gap 1026 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
}
void sub_1ff89() // 0160:1ff89 +long
{
    esp -= 4;
    goto loc_1ff89;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3209 bytes
loc_1ff89: // 0160:1ff89
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f2fa;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_1ffc8;
    sub_1fde2();
    ebx = 0;
    ecx = 0x00000003;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_1ffc8: // 0160:1ffc8
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_1f2fa;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, edi);
    goto loc_1f2fa;
}
void sub_1fff9() // 0160:1fff9 +long
{
    esp -= 4;
    push32(ebx);
    if ((int32_t)edx >= 0)
        goto loc_2000b;
    memoryASet(ds, eax, 0x20);
    memoryASet(ds, eax + 1, 0x4f);
    memoryASet(ds, eax + 2, 0x4e);
    ebx = pop32();
    esp += 4;
    return;
loc_2000b: // 0160:2000b
    if (edx)
        goto loc_2001a;
    memoryASet(ds, eax, 0x4f);
    memoryASet(ds, eax + 1, 0x46);
    memoryASet(ds, eax + 2, 0x46);
    ebx = pop32();
    esp += 4;
    return;
loc_2001a: // 0160:2001a
    ebx = 0x00000003;
    sub_1f17f();
    ebx = pop32();
    esp += 4;
}
void sub_20026() // 0160:20026 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x5a608);
    edx = eax;
    if (!ebx)
        goto loc_2005a;
    if (eax < 0x00000005)
        goto loc_20042;
    if (eax <= 0x00000005)
        goto loc_2004e;
    if (eax == 0x00000009)
        goto loc_20055;
    goto loc_2005a;
loc_20042: // 0160:20042
    if (eax != 0x00000003)
        goto loc_2005a;
    edx = 0x00000014;
    goto loc_2005a;
loc_2004e: // 0160:2004e
    edx = 0x00000012;
    goto loc_2005a;
loc_20055: // 0160:20055
    edx = 0x00000013;
loc_2005a: // 0160:2005a
    if ((int32_t)eax >= (int32_t)0x00000012)
        goto loc_20075;
    eax = memoryAGet32(ds, eax * 4 + 0x5c822);
    edx = memoryAGet32(ds, edx * 4 + 0x5c67c);
    eax += 0x0000000b;
    sub_1fff9();
loc_20075: // 0160:20075
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20078() // 0160:20078 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    ebx = 0x0004ee76;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000018;
    sub_1eb1b();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x237918, edx);
loc_200a1: // 0160:200a1
    if ((int32_t)ecx >= (int32_t)0x00000012)
        goto loc_200e1;
    eax = ecx;
    sub_20026();
    edx = esi;
    eax = 0x00000050;
    ebx = memoryAGet32(ds, ecx * 4 + 0x5c822);
    ecx++;
    sub_1ec92();
    eax = ecx;
    sub_20026();
    edx = esi;
    eax = 0x000000f0;
    ebx = memoryAGet32(ds, ecx * 4 + 0x5c822);
    sub_1ec92();
    ecx++;
    esi += 0x0000000c;
    goto loc_200a1;
loc_200e1: // 0160:200e1
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_200fa() // 0160:200fa +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x5a608) == 0x00000000)
        goto loc_20129;
    ebx = 0x00000001;
    eax = 0;
loc_2010b: // 0160:2010b
    eax += 0x000000ac;
    memoryASet32(ds, eax + 2201906, ebx);
    memoryASet32(ds, eax + 2201910, ebx);
    memoryASet32(ds, eax + 2201914, ebx);
    if (eax != 0x00000ac0)
        goto loc_2010b;
loc_20129: // 0160:20129
    ebx = pop32();
    esp += 4;
}
void sub_2012b() // 0160:2012b +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_2012e: // 0160:2012e
    eax += 0x00000054;
    edx = memoryAGet32(ds, 0x5c6cc);
    memoryASet32(ds, eax + 2205186, edx);
    edx = memoryAGet32(ds, 0x5c6c4);
    memoryASet32(ds, eax + 2205178, edx);
    edx = memoryAGet32(ds, 0x5c6c8);
    memoryASet32(ds, eax + 2205182, edx);
    if (eax != 0x00000150)
        goto loc_2012e;
    edx = pop32();
    esp += 4;
}
void sub_201e9() // 0160:201e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    sub_156b5();
    bl = al;
    if (!al)
        goto loc_2022d;
    edx = memoryAGet32(ds, 0x5c8b8);
    if (al != memoryAGet(ds, edx + 379072))
        goto loc_20208;
    edx++;
    goto loc_2020a;
loc_20208: // 0160:20208
    edx = 0;
loc_2020a: // 0160:2020a
    memoryASet32(ds, 0x5c8b8, edx);
    eax = memoryAGet32(ds, 0x5c8bc);
    if (bl != memoryAGet(ds, eax + 379078))
        goto loc_20225;
    eax++;
    memoryASet32(ds, 0x5c8bc, eax);
    goto loc_2022d;
loc_20225: // 0160:20225
    ebx = 0;
    memoryASet32(ds, 0x5c8bc, ebx);
loc_2022d: // 0160:2022d
    if ((int32_t)memoryAGet32(ds, 0x5c8b8) <= (int32_t)0x00000005)
        goto loc_2024b;
    eax = 0;
    memoryASet32(ds, 0x5c8b8, eax);
    memoryASet32(ds, 0x5c8bc, eax);
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2024b: // 0160:2024b
    if ((int32_t)memoryAGet32(ds, 0x5c8bc) <= (int32_t)0x00000005)
        goto loc_2026b;
    edi = 0;
    eax = 0x00000002;
    memoryASet32(ds, 0x5c8b8, edi);
    memoryASet32(ds, 0x5c8bc, edi);
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2026b: // 0160:2026b
    eax = 0;
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20271() // 0160:20271 +long
{
    esp -= 4;
    goto loc_20271;
loc_2015e: // 0160:2015e
    sub_13df1();
    eax = memoryAGet32(ds, 0x5c6cc);
    ebx = 0;
    memoryASet32(ds, 0x5c8ac, eax);
    eax = memoryAGet32(ds, 0x5c6c4);
    memoryASet32(ds, 0x5c6cc, ebx);
    memoryASet32(ds, 0x5c8b0, eax);
    eax = memoryAGet32(ds, 0x5c6c8);
    memoryASet32(ds, 0x5c6c4, ebx);
    memoryASet32(ds, 0x5c8b4, eax);
    memoryASet32(ds, 0x5c6c8, ebx);
    sub_2012b();
    eax = 0;
loc_2019c: // 0160:2019c
    edx = memoryAGet32(ds, 0x5c82e);
    bl = memoryAGet(ds, eax + 379019);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x5c836);
    bl = memoryAGet(ds, eax + 378997);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x5c846);
    bl = memoryAGet(ds, eax + 379041);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax < (int32_t)0x0000000b)
        goto loc_2019c;
loc_201cf: // 0160:201cf
    if (memoryAGet32(ds, 0x5c76f) != 0x00000006)
        goto loc_201e6;
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_201e6;
    sub_20078();
loc_201e6: // 0160:201e6
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 136 bytes
loc_20271: // 0160:20271
    if (memoryAGet32(ds, 0x5c76f) != 0x00000006)
        goto loc_20283;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_2029e;
loc_20283: // 0160:20283
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_202b3;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_202b3;
    if (memoryAGet32(ds, 0x5c76f) != 0x00000000)
        goto loc_202b3;
loc_2029e: // 0160:2029e
    sub_201e9();
    if (eax < 0x00000001)
        goto loc_202b3;
    if (eax <= 0x00000001)
        goto loc_202b4;
    if (eax == 0x00000002)
        goto loc_20337;
loc_202b3: // 0160:202b3
    esp += 4;
    return;
loc_202b4: // 0160:202b4
    eax = 0x00000001;
loc_202b9: // 0160:202b9
    push32(ebx);
    push32(edx);
    if (eax == memoryAGet32(ds, 0x5a608))
        goto loc_201e6;
    memoryASet32(ds, 0x5a608, eax);
    if (!eax)
        goto loc_2015e;
    sub_13ce7();
    eax = memoryAGet32(ds, 0x5c8ac);
    memoryASet32(ds, 0x5c6cc, eax);
    eax = memoryAGet32(ds, 0x5c8b0);
    memoryASet32(ds, 0x5c6c4, eax);
    eax = memoryAGet32(ds, 0x5c8b4);
    memoryASet32(ds, 0x5c6c8, eax);
    sub_2012b();
    eax = 0;
loc_202fe: // 0160:202fe
    edx = memoryAGet32(ds, 0x5c82e);
    bl = memoryAGet(ds, eax + 379008);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x5c836);
    bl = memoryAGet(ds, eax + 378986);
    memoryASet(ds, edx + eax, bl);
    edx = memoryAGet32(ds, 0x5c846);
    bl = memoryAGet(ds, eax + 379030);
    memoryASet(ds, edx + eax, bl);
    eax++;
    if ((int32_t)eax >= (int32_t)0x0000000b)
        goto loc_201cf;
    goto loc_202fe;
loc_20337: // 0160:20337
    eax = 0;
    goto loc_202b9;
}
void sub_2033e() // 0160:2033e +long
{
    esp -= 4;
    goto loc_2033e;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4158 bytes
loc_2033e: // 0160:2033e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000006;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_20078();
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
}
void sub_2039a() // 0160:2039a +long
{
    esp -= 4;
    goto loc_2039a;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1f7d7: // 0160:1f7d7
    memoryASet32(ds, 0x5c773, edx);
    goto loc_1f2f9;
    // gap 3000 bytes
loc_2039a: // 0160:2039a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_203b7;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_1f7d7;
loc_203b7: // 0160:203b7
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_203c7;
    ecx = 0x00000001;
    goto loc_203cc;
loc_203c7: // 0160:203c7
    ecx = 0xffffffff;
loc_203cc: // 0160:203cc
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5c773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_203e8;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, edx);
loc_203e8: // 0160:203e8
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_2049a;
    ebx = 0;
loc_203f3: // 0160:203f3
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_20490;
    if ((int32_t)ebx >= (int32_t)0x00000012)
        goto loc_20490;
    ebp = memoryAGet32(ds, 0x5a608);
    edx = ebx;
    if (!ebp)
        goto loc_20449;
    if (ebx < 0x00000005)
        goto loc_20431;
    if (ebx <= 0x00000005)
        goto loc_2043d;
    if (ebx == 0x00000009)
        goto loc_20444;
    goto loc_20449;
loc_20431: // 0160:20431
    if (ebx != 0x00000003)
        goto loc_20449;
    edx = 0x00000014;
    goto loc_20449;
loc_2043d: // 0160:2043d
    edx = 0x00000012;
    goto loc_20449;
loc_20444: // 0160:20444
    edx = 0x00000013;
loc_20449: // 0160:20449
    eax = edx;
    eax <<= 2;
    esi = memoryAGet32(ds, eax + 378492);
    esi += ecx;
    memoryASet32(ds, eax + 378492, esi);
    if ((int32_t)esi >= (int32_t)0xffffffff)
        goto loc_2046b;
    memoryASet32(ds, eax + 378492, 0x00000009);
loc_2046b: // 0160:2046b
    edx <<= 2;
    if ((int32_t)memoryAGet32(ds, edx + 378492) <= (int32_t)0x00000009)
        goto loc_20481;
    memoryASet32(ds, edx + 378492, 0xffffffff);
loc_20481: // 0160:20481
    eax = ebx;
    sub_20026();
    eax = ebx + 1;
    sub_1eef8();
loc_20490: // 0160:20490
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000012)
        goto loc_203f3;
loc_2049a: // 0160:2049a
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000013)
        goto loc_1f2f9;
    edi = 0;
    ebp = 0x00000004;
    memoryASet32(ds, 0x5c71c, edi);
    memoryASet32(ds, 0x5c76f, ebp);
    goto loc_1f2f9;
}
void sub_204e9() // 0160:204e9 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (eax > 0x00000006)
        goto loc_205c2;
    esi = eax;
    esi <<= 2;
    switch (esi/4)
    {
        case 0: goto loc_20501;
        case 1: goto loc_2051e;
        case 2: goto loc_20531;
        case 3: goto loc_2055f;
        case 4: goto loc_2058a;
        case 5: goto loc_205c2;
        case 6: goto loc_205a0;
        default:
            printf("unhandled: %x\n", esi/4);
            stop("ind 0160:204fa");
    }
loc_20501: // 0160:20501
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = memoryAGet32(ds, 0x5c664);
loc_20512: // 0160:20512
    eax += 0x00000016;
loc_20515: // 0160:20515
    sub_1f17f();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2051e: // 0160:2051e
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = memoryAGet32(ds, 0x5c668);
    goto loc_20512;
loc_20531: // 0160:20531
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = memoryAGet32(ds, 0x2378fc);
    eax += 0x00000016;
    sub_1f17f();
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = 0x00000042;
loc_2055a: // 0160:2055a
    eax += 0x00000012;
    goto loc_20515;
loc_2055f: // 0160:2055f
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = memoryAGet32(ds, 0x2378f8);
    eax += 0x00000016;
    sub_1f17f();
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = 0x00000006;
    goto loc_2055a;
loc_2058a: // 0160:2058a
    ebx = 0x00000002;
    eax = memoryAGet32(ds, esi + 379100);
    edx = memoryAGet32(ds, 0x5c66c);
    goto loc_20512;
loc_205a0: // 0160:205a0
    eax = 0;
loc_205a2: // 0160:205a2
    edx = memoryAGet32(ds, 0x5c6d0);
    edx = memoryAGet32(ds, edx * 4 + 0x5c8cc);
    ebx = memoryAGet32(ds, esi + 379100);
    dl = memoryAGet(ds, edx + eax);
    eax++;
    memoryASet(ds, ebx + eax + 15, dl);
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_205a2;
loc_205c2: // 0160:205c2
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_205c6() // 0160:205c6 +long
{
    esp -= 4;
    goto loc_205c6;
loc_200e1: // 0160:200e1
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1228 bytes
loc_205c6: // 0160:205c6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    edx = 0x0004ee86;
    eax = 0x0000000c;
    sub_1eae0();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x237918, edx);
loc_205ea: // 0160:205ea
    eax = ecx;
    sub_204e9();
    eax = ecx;
    eax = eax * 0x0000000c;
    ebx = memoryAGet32(ds, esi + 379100);
    edx = eax + 48;
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1ec92();
    if ((int32_t)ecx < (int32_t)0x00000007)
        goto loc_205ea;
    goto loc_200e1;
}
void sub_2061a() // 0160:2061a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    edi = 0x00000007;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    memoryASet32(ds, 0x2378fc, ecx);
    memoryASet32(ds, 0x2378f8, ecx);
    sub_205c6();
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x5c76f, edi);
    memoryASet32(ds, 0x5c714, ebp);
    memoryASet32(ds, 0x5c718, eax);
    memoryASet32(ds, 0x5c71c, edx);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_206a1() // 0160:206a1 +long
{
    esp -= 4;
    goto loc_206a1;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1f7d7: // 0160:1f7d7
    memoryASet32(ds, 0x5c773, edx);
    goto loc_1f2f9;
    // gap 3775 bytes
loc_206a1: // 0160:206a1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_206be;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_1f7d7;
loc_206be: // 0160:206be
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_206ce;
    esi = 0x00000001;
    goto loc_206d3;
loc_206ce: // 0160:206ce
    esi = 0xffffffff;
loc_206d3: // 0160:206d3
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5c773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_206ef;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, edx);
loc_206ef: // 0160:206ef
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_2091b;
    ecx = 0;
    edi = 0;
    ebp = 0;
loc_206fe: // 0160:206fe
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = ecx + 1;
    if (eax != edx)
        goto loc_2090e;
    if (ecx > 0x00000006)
        goto loc_208ff;
    switch (edi/4)
    {
        case 0: goto loc_20729;
        case 1: goto loc_2078b;
        case 2: goto loc_207e9;
        case 3: goto loc_20833;
        case 4: goto loc_2088d;
        case 5: goto loc_208ce;
        case 6: goto loc_208ec;
        default:
            printf("unhandled: %x\n", edi/4);
            stop("ind 0160:20722");
    }
loc_20729: // 0160:20729
    edx = memoryAGet32(ds, 0x5c664);
    edx += esi;
    memoryASet32(ds, 0x5c664, edx);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_20745;
    memoryASet32(ds, 0x5c664, 0x0000000a);
loc_20745: // 0160:20745
    if ((int32_t)memoryAGet32(ds, 0x5c664) <= (int32_t)0x0000000a)
        goto loc_20754;
    memoryASet32(ds, 0x5c664, ebp);
loc_20754: // 0160:20754
    edx = memoryAGet32(ds, 0x5c664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_37185();
    eax = memoryAGet32(ds, 0x5c664);
    edx = eax * 0x000000ff;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_38d4c();
    goto loc_208ff;
loc_2078b: // 0160:2078b
    ebx = memoryAGet32(ds, 0x5c668);
    ebx += esi;
    memoryASet32(ds, 0x5c668, ebx);
    if ((int32_t)ebp <= (int32_t)ebx)
        goto loc_207a7;
    memoryASet32(ds, 0x5c668, 0x0000000a);
loc_207a7: // 0160:207a7
    if ((int32_t)memoryAGet32(ds, 0x5c668) <= (int32_t)0x0000000a)
        goto loc_207b6;
    memoryASet32(ds, 0x5c668, ebp);
loc_207b6: // 0160:207b6
    edx = 0x00000002;
    ebx = 0x000000ff;
    eax = ebp;
    memoryASet32(ds, 0x59004, ebp);
    sub_24709();
    edx = 0x00000080;
    eax += 0x00000003;
loc_207d5: // 0160:207d5
    sub_36a16();
    memoryASet32(ds, 0x59004, 0x00000001);
    goto loc_208ff;
loc_207e9: // 0160:207e9
    eax = memoryAGet32(ds, 0x2378fc);
    eax += esi;
    memoryASet32(ds, 0x2378fc, eax);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_20803;
    memoryASet32(ds, 0x2378fc, 0x00000042);
loc_20803: // 0160:20803
    if ((int32_t)memoryAGet32(ds, 0x2378fc) < (int32_t)0x00000043)
        goto loc_20812;
    memoryASet32(ds, 0x2378fc, ebp);
loc_20812: // 0160:20812
    eax = memoryAGet32(ds, 0x2378fc);
    memoryASet32(ds, 0x59004, ebp);
    if (eax != 0x0000003b)
        goto loc_20827;
    eax = 0x00000003;
loc_20827: // 0160:20827
    ebx = 0x000000ff;
    edx = 0x00000080;
    goto loc_207d5;
loc_20833: // 0160:20833
    eax = memoryAGet32(ds, 0x2378f8);
    eax += esi;
    memoryASet32(ds, 0x2378f8, eax);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_2084d;
    memoryASet32(ds, 0x2378f8, 0x00000006);
loc_2084d: // 0160:2084d
    if ((int32_t)memoryAGet32(ds, 0x2378f8) <= (int32_t)0x00000006)
        goto loc_2085c;
    memoryASet32(ds, 0x2378f8, ebp);
loc_2085c: // 0160:2085c
    edx = memoryAGet32(ds, 0x5c664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, 0x2378f8);
    ebx = memoryAGet32(ds, edx * 4 + 0x5c8f8);
loc_2087f: // 0160:2087f
    edx = eax;
    eax = ebx;
    sub_1008b();
    goto loc_208ff;
loc_2088d: // 0160:2088d
    edx = memoryAGet32(ds, 0x5c66c);
    edx += esi;
    memoryASet32(ds, 0x5c66c, edx);
    if ((int32_t)ebp <= (int32_t)edx)
        goto loc_208a9;
    memoryASet32(ds, 0x5c66c, 0x0000000a);
loc_208a9: // 0160:208a9
    if ((int32_t)memoryAGet32(ds, 0x5c66c) <= (int32_t)0x0000000a)
        goto loc_208b8;
    memoryASet32(ds, 0x5c66c, ebp);
loc_208b8: // 0160:208b8
    eax = memoryAGet32(ds, 0x5c66c) * 0x000003e8;
    eax += 0x00001388;
    sub_3648f();
    goto loc_208ff;
loc_208ce: // 0160:208ce
    edx = memoryAGet32(ds, 0x5c664) * 0x000000ff;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x5c910);
    goto loc_2087f;
loc_208ec: // 0160:208ec
    eax = memoryAGet32(ds, 0x5c6d0);
    eax++;
    eax &= 0x00000003;
    memoryASet32(ds, 0x5c6d0, eax);
    sub_36948();
loc_208ff: // 0160:208ff
    eax = ecx;
    sub_204e9();
    eax = ecx + 1;
    sub_1eef8();
loc_2090e: // 0160:2090e
    ecx++;
    edi += 0x00000004;
    if ((int32_t)ecx < (int32_t)0x00000007)
        goto loc_206fe;
loc_2091b: // 0160:2091b
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000008)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x5c8f8);
    edx = eax;
    eax = ebx;
    sub_1008b();
    edx = 0;
    ebx = 0x00000004;
    memoryASet32(ds, 0x5c71c, edx);
    memoryASet32(ds, 0x5c76f, ebx);
    goto loc_1f2f9;
}
void sub_20974() // 0160:20974 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax <<= 2;
    if (edx <= 0)
        goto loc_20985;
    if (edx == 0x00000001)
        goto loc_209ae;
    edx = pop32();
    esp += 4;
    return;
loc_20985: // 0160:20985
    if (memoryAGet32(ds, 0x5c674) == 0x00000000)
        goto loc_209b7;
loc_2098e: // 0160:2098e
    edx = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, edx + 24, 0x20);
    edx = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, edx + 25, 0x4f);
    eax = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, eax + 26, 0x4e);
    edx = pop32();
    esp += 4;
    return;
loc_209ae: // 0160:209ae
    if (memoryAGet32(ds, 0x217abc) != 0x00000000)
        goto loc_2098e;
loc_209b7: // 0160:209b7
    edx = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, edx + 24, 0x4f);
    edx = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, edx + 25, 0x46);
    eax = memoryAGet32(ds, eax + 379156);
    memoryASet(ds, eax + 26, 0x46);
    edx = pop32();
    esp += 4;
}
void sub_209d7() // 0160:209d7 +long
{
    esp -= 4;
    goto loc_209d7;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5847 bytes
loc_209d7: // 0160:209d7
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_243aa();
    edx = 0x0004ee95;
    eax = 0x0000000c;
    edi = 0x00000030;
    sub_1eae0();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x237918, edx);
loc_20a01: // 0160:20a01
    eax = ecx;
    sub_20974();
    edx = edi;
    eax = 0x000000a0;
    ebx = memoryAGet32(ds, esi + 379156);
    esi += 0x00000004;
    sub_1ec92();
    ecx++;
    edi += 0x00000018;
    if ((int32_t)ecx < (int32_t)0x00000002)
        goto loc_20a01;
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    goto loc_1f2fa;
}
void sub_20a3f() // 0160:20a3f +long
{
    esp -= 4;
    goto loc_20a3f;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 1701 bytes
loc_20a3f: // 0160:20a3f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000009;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_209d7();
    goto loc_20373;
}
void sub_20a79() // 0160:20a79 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_20a94;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_20b52;
loc_20a94: // 0160:20a94
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5c773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_20ab0;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, edx);
loc_20ab0: // 0160:20ab0
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_20b26;
    ebx = 0;
loc_20abb: // 0160:20abb
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_20b20;
    if (ebx <= 0)
        goto loc_20add;
    if (ebx == 0x00000001)
        goto loc_20ae6;
    goto loc_20b11;
loc_20add: // 0160:20add
    memoryASet(ds, 0x5c674, memoryAGet(ds, 0x5c674) ^ 0x01);
    goto loc_20b11;
loc_20ae6: // 0160:20ae6
    ah = memoryAGet(ds, 0x217abc);
    ah ^= 0x01;
    edi = 0;
    memoryASet(ds, 0x217abc, ah);
    sub_1e964();
    eax = memoryAGet32(ds, 0x217abc);
    memoryASet32(ds, 0x59000, edi);
    sub_12645();
    sub_1e9c1();
loc_20b11: // 0160:20b11
    eax = ebx;
    sub_20974();
    eax = ebx + 1;
    sub_1eef8();
loc_20b20: // 0160:20b20
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000002)
        goto loc_20abb;
loc_20b26: // 0160:20b26
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000003)
        goto loc_20b58;
    ebp = 0;
    eax = 0x00000004;
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_20b52: // 0160:20b52
    memoryASet32(ds, 0x5c773, edx);
loc_20b58: // 0160:20b58
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20b5d() // 0160:20b5d +long
{
    esp -= 4;
    goto loc_20b5d;
loc_200e1: // 0160:200e1
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2659 bytes
loc_20b5d: // 0160:20b5d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    edx = 0x0004eea4;
    eax = 0x0000000c;
    esi = 0x00000048;
    sub_1eae0();
    edx = 0;
    ecx = 0;
    memoryASet32(ds, 0x237918, edx);
loc_20b84: // 0160:20b84
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 379164);
    sub_1ec92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x0000000c)
        goto loc_20b84;
    goto loc_200e1;
}
void sub_20ba6() // 0160:20ba6 +long
{
    esp -= 4;
    goto loc_20ba6;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 2060 bytes
loc_20ba6: // 0160:20ba6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x0000000c;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_20b5d();
    goto loc_20373;
}
void sub_20be0() // 0160:20be0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x0004eeb7;
    sub_4503a();
    if (!eax)
        goto loc_20bf9;
    sub_4523e();
    eax = 0x00000001;
loc_20bf9: // 0160:20bf9
    edx = pop32();
    esp += 4;
}
void sub_20bfb() // 0160:20bfb +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5c664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_37185();
    edx = memoryAGet32(ds, 0x5c664);
    eax = edx;
    eax <<= 8;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    sub_38d4c();
    edx = memoryAGet32(ds, 0x5c66c);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 3;
    eax += 0x00001388;
    sub_3648f();
    eax = memoryAGet32(ds, 0x5c678);
    if (eax == memoryAGet32(ds, 0x217abc))
        goto loc_20c8b;
    ah = memoryAGet(ds, 0x217abc);
    ah ^= 0x01;
    ebx = 0;
    memoryASet(ds, 0x217abc, ah);
    sub_1e964();
    eax = memoryAGet32(ds, 0x217abc);
    memoryASet32(ds, 0x59000, ebx);
    sub_12645();
    sub_1e9c1();
loc_20c8b: // 0160:20c8b
    eax = memoryAGet32(ds, 0x5c6d0);
    sub_36948();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20c98() // 0160:20c98 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x217abc);
    memoryASet32(ds, 0x5c678, eax);
    eax = 0x0004eeba;
    sub_45798();
    if (!eax)
        goto loc_20ccb;
    eax = 0x0004eeba;
    ebx = 0x0000106c;
    edx = 0x0005b678;
    sub_45798();
    sub_159c1();
loc_20ccb: // 0160:20ccb
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20cd0() // 0160:20cd0 +long
{
    esp -= 4;
    push32(edx);
    eax = 0x0004eeba;
    sub_45798();
    if (!eax)
        goto loc_20d0b;
    eax = 0x0004eeba;
    sub_45798();
    sub_20be0();
    if (!eax)
        goto loc_20d0b;
    eax = 0x0004eeba;
    edx = 0x0005b678;
    sub_45798();
    sub_158e6();
    sub_20bfb();
loc_20d0b: // 0160:20d0b
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_20d0f() // 0160:20d0f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x0000041b;
    edi = 0x0005b678;
    esi = 0x0005a60c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_20bfb();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_20d2c() // 0160:20d2c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_20d43;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_20da1;
loc_20d43: // 0160:20d43
    ebx = 0;
loc_20d45: // 0160:20d45
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_20d74;
    eax = 0x0000000e;
    ebp = 0;
    memoryASet32(ds, 0x5c93c, ebx);
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, eax);
loc_20d74: // 0160:20d74
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000003)
        goto loc_20d45;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000004)
        goto loc_20da7;
    esi = 0;
    memoryASet32(ds, 0x5c76f, eax);
    memoryASet32(ds, 0x5c71c, esi);
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_20da1: // 0160:20da1
    memoryASet32(ds, 0x5c773, edx);
loc_20da7: // 0160:20da7
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20dac() // 0160:20dac +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_243aa();
    edx = 0;
    eax = memoryAGet32(ds, 0x5c93c);
    memoryASet32(ds, 0x237918, edx);
    if (eax < 0x00000001)
        goto loc_20dce;
    if (eax <= 0x00000001)
        goto loc_20dd9;
    if (eax == 0x00000002)
        goto loc_20de0;
    goto loc_20def;
loc_20dce: // 0160:20dce
    if (eax)
        goto loc_20def;
    edx = 0x0004eec3;
    goto loc_20de5;
loc_20dd9: // 0160:20dd9
    edx = 0x0004eed0;
    goto loc_20de5;
loc_20de0: // 0160:20de0
    edx = 0x0004eedd;
loc_20de5: // 0160:20de5
    eax = 0x0000004e;
    sub_1eae0();
loc_20def: // 0160:20def
    ebx = 0x0004ede1;
    edx = 0x0000005a;
    eax = 0x00000090;
    sub_1ec92();
    ebx = 0x0004ede5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    sub_1ec92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_20e1a() // 0160:20e1a +long
{
    esp -= 4;
    goto loc_20e1a;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3031 bytes
loc_1fed7: // 0160:1fed7
    memoryASet32(ds, 0x5c76f, esi);
    memoryASet32(ds, 0x5c714, edi);
    memoryASet32(ds, 0x5c718, ebp);
    memoryASet32(ds, 0x5c71c, eax);
    goto loc_2038b;
    // gap 1176 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 2688 bytes
loc_20e1a: // 0160:20e1a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_20dac();
    ebx = 0x000000b0;
    ecx = 0x00000060;
    esi = 0x0000000e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x5c940, edx);
    memoryASet32(ds, 0x5c6ec, ebx);
    memoryASet32(ds, 0x5c6f0, ecx);
    goto loc_1fed7;
}
void sub_20e5c() // 0160:20e5c +long
{
    esp -= 4;
    goto loc_20e5c;
loc_1f595: // 0160:1f595
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6337 bytes
loc_20e5c: // 0160:20e5c
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x5c944);
    if (!edx)
        goto loc_20e92;
    ebx = edx + -1;
    memoryASet32(ds, 0x5c944, ebx);
    if (ebx)
        goto loc_1f595;
    edi = 0x0000000c;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, edi);
    goto loc_1f595;
loc_20e92: // 0160:20e92
    ebx = memoryAGet32(ds, 0x5c940);
    if (!ebx)
        goto loc_20ee1;
    if ((int32_t)ebx <= (int32_t)0x00000002)
        goto loc_20eb2;
    edx = ebx + -65536;
    memoryASet32(ds, 0x5c940, edx);
    goto loc_1f595;
loc_20eb2: // 0160:20eb2
    if (ebx != 0x00000001)
        goto loc_20ebc;
    sub_20c98();
loc_20ebc: // 0160:20ebc
    if (memoryAGet32(ds, 0x5c940) != 0x00000002)
        goto loc_20eca;
    sub_20cd0();
loc_20eca: // 0160:20eca
    ebp = 0;
    eax = 0x0000000c;
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, eax);
    goto loc_1f595;
loc_20ee1: // 0160:20ee1
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f595;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_20f64;
    eax = memoryAGet32(ds, 0x5c93c);
    if (eax < 0x00000001)
        goto loc_20f16;
    if (eax <= 0x00000001)
        goto loc_20f35;
    if (eax == 0x00000002)
        goto loc_20f4c;
    goto loc_20f64;
loc_20f16: // 0160:20f16
    if (eax)
        goto loc_20f64;
    eax = 0x00020001;
    edx = 0x0004eeed;
    memoryASet32(ds, 0x5c940, eax);
    eax = 0x00000072;
loc_20f2e: // 0160:20f2e
    sub_1eae0();
    goto loc_20f64;
loc_20f35: // 0160:20f35
    ebp = 0x00020002;
    edx = 0x0004eefb;
    eax = 0x00000072;
    memoryASet32(ds, 0x5c940, ebp);
    goto loc_20f2e;
loc_20f4c: // 0160:20f4c
    sub_20d0f();
    esi = 0;
    edi = 0x0000000c;
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, edi);
loc_20f64: // 0160:20f64
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_1f595;
    edx = 0;
    ebx = 0x0000000c;
    memoryASet32(ds, 0x5c71c, edx);
    memoryASet32(ds, 0x5c76f, ebx);
    goto loc_1f595;
}
void sub_20f95() // 0160:20f95 +long
{
    esp -= 4;
    goto loc_20f95;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2415 bytes
loc_1fc6f: // 0160:1fc6f
    esp += 0x00000014;
    goto loc_1f2f9;
    // gap 4894 bytes
loc_20f95: // 0160:20f95
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edi = 0;
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, edi);
loc_20fa8: // 0160:20fa8
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 12);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = edi;
    ebx += 0x00000004;
    ecx <<= 3;
loc_20fbd: // 0160:20fbd
    eax = ebp;
    eax |= esi;
    memoryASet32(ds, ecx + 2241780, eax);
    if (memoryAGet32(ds, ebx + 374542) == 0x00000000)
        goto loc_2100b;
    eax = memoryAGet32(ds, ebx + 374482);
    edx = eax * 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, ebx + 374542));
    eax <<= 16;
    edx = memoryAGet32(ds, ebx + 374482);
    eax |= edx;
    memoryASet32(ds, ecx + 2241784, eax);
    if ((int32_t)eax <= (int32_t)0x270f0000)
        goto loc_21015;
    eax = edx;
    eax |= 0x270f0000;
    memoryASet32(ds, ecx + 2241784, eax);
    goto loc_21015;
loc_2100b: // 0160:2100b
    memoryASet32(ds, ecx + 2241784, 0xf0000001);
loc_21015: // 0160:21015
    ecx += 0x00000008;
    edi++;
    esi++;
    ebx += 0x00000004;
    if ((int32_t)esi < (int32_t)0x00000005)
        goto loc_20fbd;
    edx = memoryAGet32(ds, esp + 14);
    edx++;
    ecx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, esp + 14, dx);
    ecx += 0x000000aa;
    esi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 8, ecx);
    if (esi != 0x00140000)
        goto loc_20fa8;
    ebx = 0x00000001;
loc_2104f: // 0160:2104f
    if (!edi)
        goto loc_21095;
    edi = 0;
    eax = 0;
loc_21057: // 0160:21057
    edx = memoryAGet32(ds, eax + 2241784);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 2241792))
        goto loc_21089;
    edi = esp;
    esi = eax + 2241780;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = eax + 2241780;
    esi = eax + 2241788;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    esi = esp;
    edi = eax + 2241788;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = ebx;
loc_21089: // 0160:21089
    eax += 0x00000008;
    if ((int32_t)eax >= (int32_t)0x00000278)
        goto loc_2104f;
    goto loc_21057;
loc_21095: // 0160:21095
    memoryASet32(ds, esp + 16, edi);
    ebp = 0;
loc_2109b: // 0160:2109b
    if (memoryAGet32(ss, ebp + 2241784) == 0xf0000001)
        goto loc_2115e;
    ecx = memoryAGet32(ss, ebp + 2241780);
    ecx = sar32(ecx, 0x10);
    ecx = ecx * 0x000000aa;
    esi = memoryAGet32(ss, ebp + 2241780);
    esi &= 0x0000ffff;
    esi = esi * 0x00000012;
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    ebx = ecx;
    esi += ecx;
loc_210d3: // 0160:210d3
    edi = memoryAGet32(ds, edx + 379208);
    cl = memoryAGet(ds, esi + 374392);
    memoryASet(ds, edi + eax, cl);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_210f7;
    edi = memoryAGet32(ds, edx + 379208);
    cl = memoryAGet(ds, ebx + 374392);
    memoryASet(ds, edi + eax + 17, cl);
loc_210f7: // 0160:210f7
    ebx++;
    eax++;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_210d3;
    ebx = 0x00000005;
    eax = memoryAGet32(ss, ebp + 2241784);
    ecx = memoryAGet32(ds, edx + 379208);
    eax = sar32(eax, 0x10);
    ecx += 0x00000019;
    edx = eax;
    eax = ecx;
    sub_1f17f();
    eax = 0x00000019;
    ebx = memoryAGet32(ds, esp + 16);
loc_21128: // 0160:21128
    edx = memoryAGet32(ds, ebx + 379208);
    dl = memoryAGet(ds, edx + eax);
    edx &= 0x000000ff;
    if (edx != 0x00000020)
        goto loc_21144;
    if ((int32_t)eax >= (int32_t)0x0000001e)
        goto loc_21144;
    eax++;
    goto loc_21128;
loc_21144: // 0160:21144
    if ((int32_t)memoryAGet32(ss, ebp + 2241784) >= (int32_t)0x00000000)
        goto loc_21199;
    edx = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, edx + 379208);
    memoryASet(ds, edx + eax + -1, 0x2d);
    goto loc_21199;
loc_2115e: // 0160:2115e
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
loc_21164: // 0160:21164
    ebx = memoryAGet32(ds, edx + 379208);
    memoryASet(ds, ebx + eax, 0x2d);
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_2117e;
    ebx = memoryAGet32(ds, edx + 379208);
    memoryASet(ds, ebx + eax + 17, 0x2d);
loc_2117e: // 0160:2117e
    eax++;
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_21164;
    eax = memoryAGet32(ds, edx + 379208);
    ebx = 0x00000005;
    eax += 0x00000019;
    edx = 0;
    sub_1f17f();
loc_21199: // 0160:21199
    esi = memoryAGet32(ds, esp + 16);
    esi += 0x00000004;
    ebp += 0x00000008;
    memoryASet32(ds, esp + 16, esi);
    if (esi != 0x00000020)
        goto loc_2109b;
    goto loc_1fc6f;
}
void sub_211b5() // 0160:211b5 +long
{
    esp -= 4;
    goto loc_211b5;
loc_200e1: // 0160:200e1
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4283 bytes
loc_211b5: // 0160:211b5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    ebx = 0x0004ef0a;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x0000002a;
    memoryASet32(ds, 0x237918, edx);
    sub_1eb1b();
    ebx = 0x0004ef19;
    edx = 0x00000018;
    eax = 0x000000a0;
    ecx = 0;
    sub_1eb1b();
loc_211f0: // 0160:211f0
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 379208);
    sub_1eb1b();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000020)
        goto loc_211f0;
    goto loc_200e1;
}
void sub_21212() // 0160:21212 +long
{
    esp -= 4;
    goto loc_21212;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 3704 bytes
loc_21212: // 0160:21212
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000010;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_20f95();
    sub_211b5();
    goto loc_20373;
}
void sub_21251() // 0160:21251 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_21266;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_2128b;
loc_21266: // 0160:21266
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_21291;
    esi = 0;
    memoryASet32(ds, 0x5c76f, eax);
    memoryASet32(ds, 0x5c71c, esi);
    esi = pop32();
    edx = pop32();
    esp += 4;
    return;
loc_2128b: // 0160:2128b
    memoryASet32(ds, 0x5c773, edx);
loc_21291: // 0160:21291
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_21294() // 0160:21294 +long
{
    esp -= 4;
    goto loc_21294;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3026 bytes
loc_1fed2: // 0160:1fed2
    eax = 0x00000001;
    memoryASet32(ds, 0x5c76f, esi);
    memoryASet32(ds, 0x5c714, edi);
    memoryASet32(ds, 0x5c718, ebp);
    memoryASet32(ds, 0x5c71c, eax);
    goto loc_2038b;
    // gap 1176 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 3834 bytes
loc_21294: // 0160:21294
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000b0;
    ebx = 0x00000060;
    esi = 0x00000008;
    ecx = 0;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_243aa();
    edx = 0x0004ef38;
    eax = 0x0000004e;
    ebx = 0x0004ede1;
    memoryASet32(ds, 0x237918, ecx);
    sub_1eae0();
    edx = 0x0000005a;
    eax = 0x00000090;
    edi = 0x000000a8;
    sub_1ec92();
    ebx = 0x0004ede5;
    edx = 0x0000005a;
    eax = 0x000000b0;
    ebp = 0xffffff58;
    sub_1ec92();
    goto loc_1fed2;
}
void sub_21308() // 0160:21308 +long
{
    esp -= 4;
    goto loc_21308;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3304 bytes
loc_1ffe8: // 0160:1ffe8
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, edi);
    goto loc_1f2fa;
    // gap 4879 bytes
loc_21308: // 0160:21308
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f2fa;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_21347;
    sub_1f14a();
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_21347: // 0160:21347
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_1f2fa;
    esi = 0;
    edi = 0x00000005;
    goto loc_1ffe8;
}
void sub_21399() // 0160:21399 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    if (eax > 0x0000000a)
        goto loc_21521;
    eax <<= 2;
    switch (eax/4)
    {
        case 0: goto loc_213b0;
        case 1: goto loc_213ce;
        case 2: goto loc_213ec;
        case 3: goto loc_2140a;
        case 4: goto loc_21495;
        case 5: goto loc_214b1;
        case 6: goto loc_214dd;
        case 7: goto loc_214e8;
        case 8: goto loc_21521;
        case 9: goto loc_214f1;
        case 10: goto loc_214fa;
        default:
            printf("unhandled: %x\n", eax/4);
            stop("ind 0160:213a9");
    }
loc_213b0: // 0160:213b0
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 379240);
    edx = memoryAGet32(ds, 0x5c650);
loc_213c1: // 0160:213c1
    eax += 0x0000001b;
    sub_1f17f();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_213ce: // 0160:213ce
    ecx = memoryAGet32(ds, 0x5c654);
    if ((int32_t)ecx >= (int32_t)0x00000023)
        goto loc_21503;
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 379240);
    edx = ecx;
    goto loc_213c1;
loc_213ec: // 0160:213ec
    ebx = memoryAGet32(ds, 0x5c658);
    if ((int32_t)ebx >= (int32_t)0x00000046)
        goto loc_21503;
    edx = ebx;
    eax = memoryAGet32(ds, eax + 379240);
    ebx = 0x00000003;
    goto loc_213c1;
loc_2140a: // 0160:2140a
    if (memoryAGet32(ds, 0x5c648) == 0x00000000)
        goto loc_21454;
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 24, 0x52);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 25, 0x41);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 26, 0x4e);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 27, 0x44);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 28, 0x4f);
    eax = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, eax + 29, 0x4d);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_21454: // 0160:21454
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 24, 0x20);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 25, 0x54);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 26, 0x45);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 27, 0x41);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 28, 0x4d);
    eax = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, eax + 29, 0x53);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_21495: // 0160:21495
    ebp = memoryAGet32(ds, 0x5c6d4);
    if (!ebp)
        goto loc_21503;
    ebx = 0x00000003;
    eax = memoryAGet32(ds, eax + 379240);
    edx = ebp;
    goto loc_213c1;
loc_214b1: // 0160:214b1
    if (memoryAGet32(ds, 0x5c644) == 0x00000000)
        goto loc_21503;
loc_214ba: // 0160:214ba
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 27, 0x20);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 28, 0x4f);
    eax = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, eax + 29, 0x4e);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_214dd: // 0160:214dd
    flags.zero = memoryAGet32(ds, 0x5c64c) == 0x00000000;
loc_214e4: // 0160:214e4
    if (!flags.zero)
        goto loc_214ba;
    goto loc_21503;
loc_214e8: // 0160:214e8
    flags.zero = memoryAGet32(ds, 0x5c660) == 0x00000000;
    goto loc_214e4;
loc_214f1: // 0160:214f1
    flags.zero = memoryAGet32(ds, 0x5c6d8) == 0x00000000;
    goto loc_214e4;
loc_214fa: // 0160:214fa
    if (memoryAGet32(ds, 0x5c6dc) != 0x00000000)
        goto loc_214ba;
loc_21503: // 0160:21503
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 27, 0x4f);
    edx = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, edx + 28, 0x46);
    eax = memoryAGet32(ds, eax + 379240);
    memoryASet(ds, eax + 29, 0x46);
loc_21521: // 0160:21521
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_21526() // 0160:21526 +long
{
    esp -= 4;
    goto loc_21526;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5936 bytes
loc_20a30: // 0160:20a30
    eax = 0x000000a0;
    sub_1ec92();
    goto loc_1f2fa;
    // gap 2791 bytes
loc_21526: // 0160:21526
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    sub_243aa();
    ebx = 0x0004ef55;
    eax = 0x000000a0;
    edx = 0;
    edi = 0xfffffff4;
    sub_1eb1b();
    ecx = 0;
    edx = 0;
    esi = 0;
    memoryASet32(ds, 0x237918, edx);
loc_21552: // 0160:21552
    eax = ecx;
    sub_21399();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_21566;
    eax = ecx * 0x0000000c;
    eax += 0x0000000f;
    goto loc_21572;
loc_21566: // 0160:21566
    if (ecx != 0x00000008)
        goto loc_2156f;
    eax = 0x0000008c;
    goto loc_21572;
loc_2156f: // 0160:2156f
    eax = edi + 15;
loc_21572: // 0160:21572
    edx = eax;
    edi += 0x0000000c;
    ebx = memoryAGet32(ds, esi + 379240);
    esi += 0x00000004;
    eax = 0x000000a0;
    ecx++;
    sub_1ec92();
    if ((int32_t)ecx < (int32_t)0x0000000b)
        goto loc_21552;
    ebx = 0x0004ee1f;
    edx = 0x0000009d;
    goto loc_20a30;
}
void sub_2159f() // 0160:2159f +long
{
    esp -= 4;
    goto loc_2159f;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 4613 bytes
loc_2159f: // 0160:2159f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x000000a3;
    ecx = 0x00000005;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_21526();
    goto loc_20373;
}
void sub_21605() // 0160:21605 +long
{
    esp -= 4;
    goto loc_21605;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1239 bytes
loc_1f7d7: // 0160:1f7d7
    memoryASet32(ds, 0x5c773, edx);
    goto loc_1f2f9;
    // gap 7715 bytes
loc_21605: // 0160:21605
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_21622;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_1f7d7;
loc_21622: // 0160:21622
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_21632;
    esi = 0x00000001;
    goto loc_21637;
loc_21632: // 0160:21632
    esi = 0xffffffff;
loc_21637: // 0160:21637
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5c773);
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_21653;
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, edx);
loc_21653: // 0160:21653
    if ((int32_t)eax <= (int32_t)0x00000023)
        goto loc_217e0;
    ebp = esi;
    edi = esi;
    ebx = 0;
    ecx = 0;
    edi <<= 2;
    ebp <<= 2;
    edi += esi;
    ebp += esi;
    edi += edi;
loc_21670: // 0160:21670
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = ebx + 1;
    if (eax != edx)
        goto loc_217d3;
    if (ebx > 0x0000000a)
        goto loc_217c4;
    switch (ecx/4)
    {
        case 0: goto loc_2169b;
        case 1: goto loc_216d4;
        case 2: goto loc_2170b;
        case 3: goto loc_2174d;
        case 4: goto loc_21759;
        case 5: goto loc_21785;
        case 6: goto loc_2178e;
        case 7: goto loc_21797;
        case 8: goto loc_217a0;
        case 9: goto loc_217b4;
        case 10: goto loc_217bd;
        default:
            printf("unhandled: %x\n", ecx/4);
            stop("ind 0160:21694");
    }
loc_2169b: // 0160:2169b
    edx = memoryAGet32(ds, 0x5c650);
    edx += esi;
    memoryASet32(ds, 0x5c650, edx);
    if ((int32_t)edx >= (int32_t)0x00000001)
        goto loc_216b8;
    memoryASet32(ds, 0x5c650, 0x00000002);
loc_216b8: // 0160:216b8
    if ((int32_t)memoryAGet32(ds, 0x5c650) <= (int32_t)0x00000002)
        goto loc_217c4;
    memoryASet32(ds, 0x5c650, 0x00000001);
    goto loc_217c4;
loc_216d4: // 0160:216d4
    eax = memoryAGet32(ds, 0x5c654);
    eax += ebp;
    memoryASet32(ds, 0x5c654, eax);
    if ((int32_t)eax >= (int32_t)0x00000005)
        goto loc_216ef;
    memoryASet32(ds, 0x5c654, 0x00000023);
loc_216ef: // 0160:216ef
    if ((int32_t)memoryAGet32(ds, 0x5c654) <= (int32_t)0x00000023)
        goto loc_217c4;
    memoryASet32(ds, 0x5c654, 0x00000005);
    goto loc_217c4;
loc_2170b: // 0160:2170b
    edx = memoryAGet32(ds, 0x5c658);
    edx += edi;
    memoryASet32(ds, 0x5c658, edx);
    if ((int32_t)edx >= (int32_t)0x0000000a)
        goto loc_21728;
    memoryASet32(ds, 0x5c658, 0x00000046);
loc_21728: // 0160:21728
    if ((int32_t)memoryAGet32(ds, 0x5c658) <= (int32_t)0x00000046)
        goto loc_2173b;
    memoryASet32(ds, 0x5c658, 0x0000000a);
loc_2173b: // 0160:2173b
    eax = memoryAGet32(ds, 0x5c658);
    eax = eax * 0x00000032;
    memoryASet32(ds, 0x21acc4, eax);
    goto loc_217c4;
loc_2174d: // 0160:2174d
    memoryASet(ds, 0x5c648, memoryAGet(ds, 0x5c648) ^ 0x01);
    goto loc_217c4;
loc_21759: // 0160:21759
    eax = memoryAGet32(ds, 0x5c6d4);
    eax += esi;
    memoryASet32(ds, 0x5c6d4, eax);
    if ((int32_t)eax >= 0)
        goto loc_21773;
    memoryASet32(ds, 0x5c6d4, 0x00000008);
loc_21773: // 0160:21773
    if ((int32_t)memoryAGet32(ds, 0x5c6d4) <= (int32_t)0x00000008)
        goto loc_217c4;
    eax = 0;
    memoryASet32(ds, 0x5c6d4, eax);
    goto loc_217c4;
loc_21785: // 0160:21785
    memoryASet(ds, 0x5c644, memoryAGet(ds, 0x5c644) ^ 0x01);
    goto loc_217c4;
loc_2178e: // 0160:2178e
    memoryASet(ds, 0x5c64c, memoryAGet(ds, 0x5c64c) ^ 0x01);
    goto loc_217c4;
loc_21797: // 0160:21797
    memoryASet(ds, 0x5c660, memoryAGet(ds, 0x5c660) ^ 0x01);
    goto loc_217c4;
loc_217a0: // 0160:217a0
    eax ^= edx;
    edx = 0x00000008;
    memoryASet32(ds, 0x5c71c, eax);
    memoryASet32(ds, 0x5c76f, edx);
    goto loc_217c4;
loc_217b4: // 0160:217b4
    memoryASet(ds, 0x5c6d8, memoryAGet(ds, 0x5c6d8) ^ 0x01);
    goto loc_217c4;
loc_217bd: // 0160:217bd
    memoryASet(ds, 0x5c6dc, memoryAGet(ds, 0x5c6dc) ^ 0x01);
loc_217c4: // 0160:217c4
    eax = ebx;
    sub_21399();
    eax = ebx + 1;
    sub_1eef8();
loc_217d3: // 0160:217d3
    ebx++;
    ecx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x0000000b)
        goto loc_21670;
loc_217e0: // 0160:217e0
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x0000000c)
        goto loc_1f2f9;
    ebx = 0;
    ecx = 0x00000004;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
    goto loc_1f2f9;
}
void sub_21811() // 0160:21811 +long
{
    esp -= 4;
    goto loc_21811;
loc_200e1: // 0160:200e1
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5911 bytes
loc_21811: // 0160:21811
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    ebx = 0x0004ef63;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000030;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0000000c;
    ecx = 0;
    sub_1eb1b();
loc_2183d: // 0160:2183d
    eax = 0x000000a0;
    edx = esi;
    ebx = memoryAGet32(ds, ecx + 379176);
    sub_1ec92();
    ecx += 0x00000004;
    esi += 0x0000000c;
    if (ecx != 0x00000014)
        goto loc_2183d;
    goto loc_200e1;
}
void sub_2185f() // 0160:2185f +long
{
    esp -= 4;
    goto loc_2185f;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 5317 bytes
loc_2185f: // 0160:2185f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000004;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_21811();
    goto loc_20373;
}
void sub_21899() // 0160:21899 +long
{
    esp -= 4;
    goto loc_21899;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4538 bytes
loc_204ba: // 0160:204ba
    memoryASet32(ds, 0x5c71c, edi);
    memoryASet32(ds, 0x5c76f, ebp);
    goto loc_1f2f9;
    // gap 5070 bytes
loc_21899: // 0160:21899
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_218d4;
    ebx = 0;
    ecx = 0x00000005;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_218d4: // 0160:218d4
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_218fc;
    esi = 0;
    edi = 0x00000006;
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, edi);
loc_218fc: // 0160:218fc
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000003)
        goto loc_21923;
    ebp = 0;
    eax = 0x0000000c;
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, eax);
loc_21923: // 0160:21923
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000004)
        goto loc_2194b;
    edx = 0;
    ebx = 0x00000007;
    memoryASet32(ds, 0x5c71c, edx);
    memoryASet32(ds, 0x5c76f, ebx);
loc_2194b: // 0160:2194b
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000005)
        goto loc_21973;
    ecx = 0;
    esi = 0x00000009;
    memoryASet32(ds, 0x5c71c, ecx);
    memoryASet32(ds, 0x5c76f, esi);
loc_21973: // 0160:21973
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000006)
        goto loc_1f2f9;
    edi = 0;
    ebp = 0x00000001;
    goto loc_204ba;
}
void sub_21998() // 0160:21998 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_219fa;
    if (memoryAGet32(ds, 0x5900c) != 0x00000000)
        goto loc_219fa;
    if (memoryAGet32(ds, 0x5a2f2) != 0x00000000)
        goto loc_219fa;
    if (memoryAGet32(ds, 0x21acc8) == 0x00000000)
        goto loc_219fa;
    edi = memoryAGet32(ds, 0x5c998);
    if ((int32_t)edi < 0)
        goto loc_219fa;
    if ((int32_t)memoryAGet32(ds, 0x5c654) >= (int32_t)0x00000023)
        goto loc_219e0;
    if (!edi)
        goto loc_219e0;
    edx = edi + -1;
    memoryASet32(ds, 0x5c998, edx);
loc_219e0: // 0160:219e0
    ebx = memoryAGet32(ds, 0x5c99c);
    ecx = memoryAGet32(ds, 0x5c994);
    ebx++;
    ecx++;
    memoryASet32(ds, 0x5c99c, ebx);
    memoryASet32(ds, 0x5c994, ecx);
loc_219fa: // 0160:219fa
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_219ff() // 0160:219ff +long
{
    esp -= 4;
    goto loc_219ff;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9983 bytes
loc_219ff: // 0160:219ff
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_21a4a;
    ebx = 0x00001770;
    ecx = memoryAGet32(ds, 0x590a8);
    memoryASet32(ds, 0x5c998, ebx);
    if (ecx)
        goto loc_21a5a;
    edx = 0x00000005;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_21a5a;
    esi = 0x000036b0;
    edi = 0x00000001;
    memoryASet32(ds, 0x5c998, esi);
    memoryASet32(ds, 0x590a8, edi);
    goto loc_21a5a;
loc_21a4a: // 0160:21a4a
    eax = memoryAGet32(ds, 0x5c654);
    eax = eax * 0x00000bb8;
    memoryASet32(ds, 0x5c998, eax);
loc_21a5a: // 0160:21a5a
    if (memoryAGet32(ds, 0x5c80a) == 0x00000000)
        goto loc_21a6d;
    memoryASet32(ds, 0x5c998, 0x00003a98);
loc_21a6d: // 0160:21a6d
    ebx = memoryAGet32(ds, 0x5c998);
    edx = 0;
    ebx += 0x000000fa;
    memoryASet32(ds, 0x5c99c, edx);
    memoryASet32(ds, 0x5c998, ebx);
    goto loc_1f2fa;
}
void sub_21a8c() // 0160:21a8c +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x5c994, edx);
    sub_219ff();
    edx = pop32();
    esp += 4;
}
void sub_21a9c() // 0160:21a9c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x5c998);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al = !eax;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x5c9a0, eax);
    eax = memoryAGet32(ds, 0x5c998);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_21acd() // 0160:21acd +long
{
    esp -= 4;
    goto loc_21acd;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10189 bytes
loc_21acd: // 0160:21acd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x5c99c);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ecx = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(ecx);
    esi = 0x0000003c;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x00000002;
    eax = 0x0005c9d4;
    esi = edx;
    edx = ecx;
    sub_1f17f();
    ebx = 0;
    bl = memoryAGet(ds, 0x5c9d4);
    if (ebx != 0x00000020)
        goto loc_21b2a;
    memoryASet(ds, 0x5c9d4, 0x30);
loc_21b2a: // 0160:21b2a
    ebx = 0x00000002;
    eax = 0x0005c9d7;
    edx = esi;
    sub_1f17f();
    ebx = 0;
    bl = memoryAGet(ds, 0x5c9d7);
    if (ebx != 0x00000020)
        goto loc_21b4f;
    memoryASet(ds, 0x5c9d7, 0x30);
loc_21b4f: // 0160:21b4f
    ebx = 0x0005c9c7;
    eax = 0x000000a0;
    edx = edi;
    sub_1eb1b();
    goto loc_1f2fa;
}
void sub_21b65() // 0160:21b65 +long
{
    esp -= 4;
    goto loc_21b65;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10331 bytes
loc_21b5b: // 0160:21b5b
    sub_1eb1b();
    goto loc_1f2fa;
loc_21b65: // 0160:21b65
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = eax;
    eax = memoryAGet32(ds, 0x5c994);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    esi = 0x0000003c;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    idiv32(esi);
    edi = 0x0000003c;
    esi = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = 0x00000002;
    eax = 0x0005c9e4;
    edi = edx;
    edx = esi;
    sub_1f17f();
    edx = 0;
    dl = memoryAGet(ds, 0x5c9e4);
    if (edx != 0x00000020)
        goto loc_21bc2;
    memoryASet(ds, 0x5c9e4, 0x30);
loc_21bc2: // 0160:21bc2
    ebx = 0x00000002;
    eax = 0x0005c9e7;
    edx = edi;
    sub_1f17f();
    edx = 0;
    dl = memoryAGet(ds, 0x5c9e7);
    if (edx != 0x00000020)
        goto loc_21be7;
    memoryASet(ds, 0x5c9e7, 0x30);
loc_21be7: // 0160:21be7
    ebx = 0x00000002;
    eax = 0x0005c9eb;
    edx = memoryAGet32(ds, 0x5c9da);
    sub_1f17f();
    edx = 0;
    dl = memoryAGet(ds, 0x5c9eb);
    if (edx != 0x00000020)
        goto loc_21c10;
    memoryASet(ds, 0x5c9eb, 0x30);
loc_21c10: // 0160:21c10
    if ((int32_t)memoryAGet32(ds, 0x5c9da) <= (int32_t)0x00000001)
        goto loc_21c22;
    memoryASet(ds, 0x5c9f3, 0x53);
    goto loc_21c29;
loc_21c22: // 0160:21c22
    memoryASet(ds, 0x5c9f3, 0x20);
loc_21c29: // 0160:21c29
    ebx = 0x0005c9de;
    eax = 0x000000a0;
    edx = ecx;
    goto loc_21b5b;
}
void sub_21c3a() // 0160:21c3a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_243aa();
    edx = 0;
    eax = 0x00000030;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0004ef71;
    sub_1eae0();
    if (memoryAGet32(ds, 0x5c9a0) == 0x00000000)
        goto loc_21c70;
    edx = 0x0004ef7d;
    eax = 0x0000003c;
    sub_1eae0();
loc_21c70: // 0160:21c70
    eax = 0x00000054;
    sub_21acd();
    if (memoryAGet32(ds, 0x5c660) == 0x00000000)
        goto loc_21c93;
    if (memoryAGet32(ds, 0x5c80a) != 0x00000000)
        goto loc_21c93;
    ebx = 0x0004ef8e;
    goto loc_21c98;
loc_21c93: // 0160:21c93
    ebx = 0x0004efa0;
loc_21c98: // 0160:21c98
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_21caa() // 0160:21caa +long
{
    esp -= 4;
    goto loc_21caa;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10666 bytes
loc_21caa: // 0160:21caa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000014;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_21c3a();
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    memoryASet32(ds, 0x21acc8, ebp);
    ebx = 0;
    memoryASet32(ds, 0x21af00, ebp);
    memoryASet32(ds, 0x21ae78, ebx);
    goto loc_1f2f9;
}
void sub_21d1a() // 0160:21d1a +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_21dc5;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_21dc5;
    if (memoryAGet32(ds, 0x5c660) == 0x00000000)
        goto loc_21da2;
    ecx = memoryAGet32(ds, 0x5c80a);
    if (ecx)
        goto loc_21da2;
    edx = memoryAGet32(ds, 0x5c99c);
    memoryASet32(ds, 0x59014, eax);
    memoryASet32(ds, 0x5c80a, eax);
    memoryASet32(ds, 0x21acc8, eax);
    sub_219ff();
    eax = 0xfffffffd;
    esi = memoryAGet32(ds, 0x5c99c);
    memoryASet32(ds, 0x5c9a0, ecx);
    memoryASet32(ds, 0x5c71c, ecx);
    esi += edx;
    memoryASet32(ds, 0x5c76f, eax);
    memoryASet32(ds, 0x5c99c, esi);
    sub_18178();
    sub_1e793();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_21da2: // 0160:21da2
    esi = 0;
    eax = 0xfffffffe;
    memoryASet32(ds, 0x21acc8, esi);
    memoryASet32(ds, 0x5cd20, esi);
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, eax);
    sub_1e738();
loc_21dc5: // 0160:21dc5
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_21dc9() // 0160:21dc9 +long
{
    esp -= 4;
    goto loc_21dc9;
loc_21c98: // 0160:21c98
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 287 bytes
loc_21dc9: // 0160:21dc9
    push32(ebx);
    push32(edx);
    sub_243aa();
    ebx = 0x0004efaf;
    edx = 0x0000000c;
    eax = 0x000000a0;
    sub_1eb1b();
    ebx = 0x0004ef8e;
    edx = 0;
    eax = 0x000000a0;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x00000030;
    sub_1ec92();
    ebx = 0x0004efbd;
    edx = 0x00000048;
    eax = 0x000000a0;
    sub_1ec92();
    ebx = 0x0004efcd;
    edx = 0x00000060;
    eax = 0x000000a0;
    sub_1ec92();
    ebx = 0x0004efd9;
    goto loc_21c98;
}
void sub_21e32() // 0160:21e32 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x000000b0;
    eax = memoryAGet32(ds, 0x5907c);
    ebx = 0;
    memoryASet32(ds, 0x5c9f6, eax);
    eax = memoryAGet32(ds, 0x59078);
    memoryASet32(ds, 0x5907c, edx);
    memoryASet32(ds, 0x5c9fa, eax);
    eax = memoryAGet32(ds, 0x59074);
    memoryASet32(ds, 0x59078, ebx);
    memoryASet32(ds, 0x5c9fe, eax);
    eax = memoryAGet32(ds, 0x59098);
    memoryASet32(ds, 0x59074, ebx);
    memoryASet32(ds, 0x5ca02, eax);
    eax = memoryAGet32(ds, 0x59084);
    memoryASet32(ds, 0x59098, ebx);
    memoryASet32(ds, 0x5ca06, eax);
    memoryASet32(ds, 0x59084, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_21e8e() // 0160:21e8e +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x5c9f6);
    memoryASet32(ds, 0x5907c, eax);
    eax = memoryAGet32(ds, 0x5c9fa);
    memoryASet32(ds, 0x59078, eax);
    eax = memoryAGet32(ds, 0x5c9fe);
    memoryASet32(ds, 0x59074, eax);
    eax = memoryAGet32(ds, 0x5ca02);
    memoryASet32(ds, 0x59098, eax);
    eax = memoryAGet32(ds, 0x5ca06);
    memoryASet32(ds, 0x59084, eax);
    esp += 4;
}
void sub_21ec1() // 0160:21ec1 +long
{
    esp -= 4;
    goto loc_21ec1;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3198 bytes
loc_1ff7e: // 0160:1ff7e
    memoryASet32(ds, 0x5c71c, edx);
    goto loc_2038b;
    // gap 1026 bytes
loc_2038b: // 0160:2038b
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 6951 bytes
loc_21ec1: // 0160:21ec1
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x00000001;
    ebx = 0x000000a0;
    ecx = 0x00000066;
    esi = 0x0000001e;
    edi = 0x000000a8;
    ebp = 0xffffff58;
    memoryASet32(ds, 0x5a2f2, edx);
    sub_21e32();
    memoryASet32(ds, 0x5c6ec, ebx);
    memoryASet32(ds, 0x5c6f0, ecx);
    sub_21dc9();
    memoryASet32(ds, 0x5c76f, esi);
    memoryASet32(ds, 0x5c714, edi);
    memoryASet32(ds, 0x5c718, ebp);
    goto loc_1ff7e;
}
void sub_21f18() // 0160:21f18 +long
{
    esp -= 4;
    goto loc_21f18;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11288 bytes
loc_21f18: // 0160:21f18
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_21fc8;
    sub_38d00();
    sub_13556();
    ebx = 0x00000032;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, 0x5ca0a);
    edx = memoryAGet32(ds, 0x5c99c);
    esi = 0;
    memoryASet32(ds, 0x590c0, ebx);
    memoryASet32(ds, 0x59014, ecx);
    memoryASet32(ds, 0x21acd0, eax);
    memoryASet32(ds, 0x5a2f2, esi);
    memoryASet32(ds, 0x5c80a, ecx);
    memoryASet32(ds, 0x21acc8, ecx);
    sub_219ff();
    eax = memoryAGet32(ds, 0x5c99c);
    memoryASet32(ds, 0x5c9a0, esi);
    memoryASet32(ds, 0x5c71c, esi);
    eax += edx;
    esi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x5c99c, eax);
    eax = esi * 0x000000ac;
    edi = ecx;
    memoryASet32(ds, 0x5c76f, 0xfffffffd);
    memoryASet32(ds, eax + 2202066, edi);
    sub_1e793();
loc_21fc8: // 0160:21fc8
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_22001;
    ebp = 0;
    ebx = 0xfffffffe;
    memoryASet32(ds, 0x5a2f2, ebp);
    memoryASet32(ds, 0x5cd20, ebp);
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, ebx);
    sub_1e738();
loc_22001: // 0160:22001
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000003)
        goto loc_22074;
    sub_38d00();
    sub_13556();
    eax = memoryAGet32(ds, 0x5ca0a);
    memoryASet32(ds, 0x21acd0, eax);
    eax = 0xfffffffd;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x5c76f, eax);
    eax = edx * 0x000000ac;
    ecx = 0x00000032;
    edi = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x590c0, ecx);
    memoryASet32(ds, 0x5a2f2, esi);
    memoryASet32(ds, 0x21acc8, edi);
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, eax + 2202066, edi);
    sub_21e8e();
    sub_1e793();
loc_22074: // 0160:22074
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000004)
        goto loc_1f2f9;
    ecx = 0x00000001;
    esi = 0;
    memoryASet32(ds, 0x21ac46, ecx);
    memoryASet32(ds, 0x21acc8, esi);
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5a2f2, esi);
    memoryASet32(ds, 0x5a5fc, esi);
    memoryASet32(ds, 0x5cab4, esi);
    memoryASet32(ds, 0x5caac, esi);
    memoryASet32(ds, 0x5cab8, esi);
    goto loc_1f2f9;
}
void sub_220cf() // 0160:220cf +long
{
    esp -= 4;
    goto loc_220cf;
loc_1eada: // 0160:1eada
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 13807 bytes
loc_220cf: // 0160:220cf
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    push32(eax);
    ebp = edx;
    ecx = 0x00000006;
    edi = esp + 4;
    esi = 0x0001e5bd;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = 0x00000006;
    edi = esp + 28;
    esi = 0x0001e5d5;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (edx != 0x00000048)
        goto loc_22105;
    edi = esp + 28;
    goto loc_22109;
loc_22105: // 0160:22105
    edi = esp + 4;
loc_22109: // 0160:22109
    edx = 0;
    esi = 0;
    memoryASet32(ds, esp + 52, edx);
loc_22111: // 0160:22111
    cl = memoryAGet(ds, esp + 52);
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp);
    eax <<= cl;
    if (!(eax & edx))
        goto loc_22154;
    ecx = memoryAGet32(ds, esi + 378762);
    if ((int32_t)ecx < 0)
        goto loc_22154;
    ecx = ecx * 0x000000aa;
    edx = edi;
    eax = ecx;
    ecx += 0x00000008;
loc_2213a: // 0160:2213a
    bl = memoryAGet(ds, eax + 374392);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_2213a;
    edx = edi;
    eax = ebp;
    sub_1eae0();
    ebp += 0x0000000c;
loc_22154: // 0160:22154
    ebx = memoryAGet32(ds, esp + 52);
    ebx++;
    esi += 0x00000004;
    memoryASet32(ds, esp + 52, ebx);
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_22111;
    eax = ebp;
    esp += 0x00000038;
    goto loc_1eada;
}
void sub_2216f() // 0160:2216f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    sub_243aa();
    ebx = 0x00000002;
    edx = 0;
    eax = 0x0005c9c4;
    memoryASet32(ds, 0x237918, edx);
    edx = memoryAGet32(ds, 0x5c9da);
    sub_1f17f();
    edx = 0;
    dl = memoryAGet(ds, 0x5c9c4);
    if (edx != 0x00000020)
        goto loc_221aa;
    memoryASet(ds, 0x5c9c4, 0x30);
loc_221aa: // 0160:221aa
    ebx = 0x00000002;
    eax = 0x0005c9aa;
    edx = memoryAGet32(ds, 0x5c9da);
    sub_1f17f();
    edx = 0;
    dl = memoryAGet(ds, 0x5c9aa);
    if (edx != 0x00000020)
        goto loc_221d3;
    memoryASet(ds, 0x5c9aa, 0x30);
loc_221d3: // 0160:221d3
    if (memoryAGet32(ds, 0x5c9a0) == 0x00000000)
        goto loc_221e3;
    edx = 0x0005c9a4;
    goto loc_221e8;
loc_221e3: // 0160:221e3
    edx = 0x0005c9be;
loc_221e8: // 0160:221e8
    eax = 0x00000018;
    sub_1eae0();
    eax = 0x00000030;
    edx = 0x00000054;
    sub_21acd();
    eax = ecx;
    ebx = 0x0004efa0;
    sub_220cf();
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22220() // 0160:22220 +long
{
    esp -= 4;
    goto loc_22220;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 7814 bytes
loc_22220: // 0160:22220
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000015;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_2216f();
    goto loc_20373;
}
void sub_2225a() // 0160:2225a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_22299;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_22299;
    ebx = 0;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x5cd20, ebx);
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, esi);
    sub_1e738();
loc_22299: // 0160:22299
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2229d() // 0160:2229d +long
{
    esp -= 4;
    goto loc_2229d;
loc_2220d: // 0160:2220d
    edx = 0x00000090;
    eax = 0x000000a0;
    sub_1ec92();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 125 bytes
loc_2229d: // 0160:2229d
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    sub_243aa();
    edx = 0;
    ecx = memoryAGet32(ds, 0x5c9a0);
    memoryASet32(ds, 0x237918, edx);
    if (!ecx)
        goto loc_222c9;
    if ((int32_t)memoryAGet32(ds, 0x5ca0e) <= (int32_t)0x00000001)
        goto loc_222c9;
    edx = 0x0004efeb;
    goto loc_222ce;
loc_222c9: // 0160:222c9
    edx = 0x0004f007;
loc_222ce: // 0160:222ce
    eax = 0;
    sub_1eae0();
    eax = 0x00000024;
    edx = 0x00000048;
    sub_21b65();
    eax = ebx;
    sub_220cf();
    ebx = 0x0004f014;
    goto loc_2220d;
}
void sub_222f5() // 0160:222f5 +long
{
    esp -= 4;
    goto loc_222f5;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 8027 bytes
loc_222f5: // 0160:222f5
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x00000096;
    ecx = 0x00000016;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_2229d();
    goto loc_20373;
}
void sub_2232f() // 0160:2232f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_22363;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_22363;
    ebx = 0;
    ecx = 0x00000017;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_22363: // 0160:22363
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22399() // 0160:22399 +long
{
    esp -= 4;
    goto loc_22399;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12441 bytes
loc_22399: // 0160:22399
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000084;
    edi = 0x7fffffff;
    esi = 0x0001e5ed;
    edx = 0;
    ebx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 116, edx);
    memoryASet32(ds, esp + 112, edx);
    memoryASet32(ds, esp + 104, edx);
    memoryASet32(ds, esp + 108, edi);
    memoryASet32(ds, esp + 84, edx);
    edi = esp + 20;
    memoryASet32(ds, esp + 72, edx);
    memoryASet32(ds, esp + 80, edx);
    movsd<ES_EDI, DS_ESI>();
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, esp + 76, edx);
    eax = memoryAGet32(ds, 0x59010);
    esi = 0;
    eax <<= 2;
    edi = 0;
    memoryASet32(ds, esp + 44, eax);
    goto loc_22531;
loc_223f2: // 0160:223f2
    if (memoryAGet32(ds, ebx + 2241036) == 0x00000000)
        goto loc_22527;
    if (memoryAGet32(ds, ebx + 2241056) == 0x00000000)
        goto loc_22527;
    eax = memoryAGet32(ds, ebx + 2241048);
    eax -= memoryAGet32(ds, ebx + 2241044);
    eax <<= 16;
    eax += memoryAGet32(ds, ebx + 2241048);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 116))
        goto loc_2242f;
    memoryASet32(ds, esp + 84, esi);
    memoryASet32(ds, esp + 116, eax);
loc_2242f: // 0160:2242f
    eax = 0x00000001;
    edx = memoryAGet32(ds, edi + 2202058);
    eax -= edx;
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, ebx + 2241048);
    edx = memoryAGet32(ds, esp + 32);
    eax <<= 8;
    eax |= edx;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, esp + 108))
        goto loc_2245d;
    memoryASet32(ds, esp + 76, esi);
    memoryASet32(ds, esp + 108, eax);
loc_2245d: // 0160:2245d
    eax = memoryAGet32(ds, ebx + 2241040);
    edx = memoryAGet32(ds, ebx + 2241048);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 112))
        goto loc_2247c;
    memoryASet32(ds, esp + 72, esi);
    memoryASet32(ds, esp + 112, eax);
loc_2247c: // 0160:2247c
    eax = memoryAGet32(ds, ebx + 2241016);
    edx = memoryAGet32(ds, ebx + 2241048);
    eax <<= 16;
    eax += edx;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 104))
        goto loc_2249b;
    memoryASet32(ds, esp + 80, esi);
    memoryASet32(ds, esp + 104, eax);
loc_2249b: // 0160:2249b
    eax = memoryAGet32(ds, ebx + 2241020);
    edx = 0x0000ffff;
    eax <<= 16;
    edx -= memoryAGet32(ds, ebx + 2241048);
    eax += edx;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_224b7;
    ebp = eax;
loc_224b7: // 0160:224b7
    if (memoryAGet32(ds, 0x5c640) != 0x00000000)
        goto loc_22527;
    if (memoryAGet32(ds, 0x5cd20) != 0x00000000)
        goto loc_22527;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = memoryAGet32(ds, eax * 4 + 0x5c78a) * 0x000000aa;
    memoryASet32(ds, esp + 128, 0x00000004);
    memoryASet32(ds, esp + 32, eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 128));
    eax = memoryAGet32(ds, esp + 32);
    edx <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, ebx + 2241052);
    memoryASet32(ds, eax + 374506, memoryAGet32(ds, eax + 374506) + edx);
    edx = memoryAGet32(ds, ebx + 2241016);
    memoryASet32(ds, eax + 374486, memoryAGet32(ds, eax + 374486) + edx);
    memoryASet32(ds, eax + 374546, memoryAGet32(ds, eax + 374546) + 1);
loc_22527: // 0160:22527
    edi += 0x000000ac;
    ebx += 0x00000030;
    esi++;
loc_22531: // 0160:22531
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_223f2;
    edx = 0;
    memoryASet32(ds, esp + 120, edx);
    edx = memoryAGet32(ds, esp + 84);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, esp + 52, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 64, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    edx = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, esp + 36, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 4;
    memoryASet32(ds, esp + 68, eax);
    eax = memoryAGet32(ds, esp + 84);
    eax <<= 4;
    ebx = 0x00000018;
    memoryASet32(ds, esp + 60, eax);
    eax = memoryAGet32(ds, esp + 72);
    edi = 0x00000024;
    eax <<= 4;
    esi = 0;
    memoryASet32(ds, esp + 48, eax);
    eax = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, esp + 92, ebx);
    eax <<= 4;
    memoryASet32(ds, esp + 96, esi);
    memoryASet32(ds, esp + 40, eax);
    eax = edx;
    memoryASet32(ds, esp + 88, edi);
    eax <<= 4;
    memoryASet32(ds, esp + 100, esi);
    memoryASet32(ds, esp + 56, eax);
loc_225cf: // 0160:225cf
    edx = memoryAGet32(ds, esp + 96);
    edi = memoryAGet32(ds, esp + 56);
    ebx = memoryAGet32(ds, esp + 40);
    esi = memoryAGet32(ds, esp + 48);
    ebp = 0;
    eax = 0;
    memoryASet32(ds, esp + 124, ebp);
    memoryASet32(ds, esp + 28, edx);
    edx = memoryAGet32(ds, esp + 60);
loc_225ef: // 0160:225ef
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_22648;
    ebp = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, ebp + 140137)); return; // 0160:225fa;
    // gap 71 bytes
loc_22648: // 0160:22648
    if (ecx == 0x00000020)
        goto loc_22651;
    memoryASet32(ds, esp + 124, eax);
loc_22651: // 0160:22651
    edi++;
    ebx++;
    eax++;
    esi++;
    edx++;
    memoryASet(ds, esp + eax + -1, cl);
    if ((int32_t)eax < (int32_t)0x00000010)
        goto loc_225ef;
    eax = memoryAGet32(ds, esp + 124);
    dl = 0;
    memoryASet(ds, esp + eax + 1, dl);
    eax = 0;
    edx = memoryAGet32(ds, esp + 120);
    memoryASet32(ds, esp + 124, eax);
    if (edx > 0x00000003)
        goto loc_2271a;
    eax = memoryAGet32(ds, esp + 28);
    indirectJump(cs, memoryAGet32(cs, eax + 140153)); return; // 0160:22680;
    // gap 147 bytes
loc_2271a: // 0160:2271a
    if (memoryAGet32(ds, esp + 124) == 0x00000000)
        goto loc_227a7;
    if (memoryAGet32(ds, esp + 120) > 0x00000003)
        goto loc_2275e;
    eax = memoryAGet32(ds, esp + 92);
    eax += memoryAGet32(ds, esp + 100);
    edx = memoryAGet32(ds, esp + 96);
    indirectJump(cs, memoryAGet32(cs, edx + 140169)); return; // 0160:22738;
    // gap 31 bytes
loc_2275e: // 0160:2275e
    esi = memoryAGet32(ds, esp + 88);
    ebx = memoryAGet32(ds, esp + 100);
    eax = 0x0000005a;
    edi = memoryAGet32(ds, esp + 88);
    ebp = memoryAGet32(ds, esp + 100);
    edi += 0x00000018;
    esi += ebx;
    ebx = esp;
    edx = esi;
    ebp += 0x00000006;
    sub_1eb1b();
    memoryASet32(ds, esp + 88, edi);
    memoryASet32(ds, esp + 100, ebp);
    ebx = esp + 20;
    edx = esi;
    esi = memoryAGet32(ds, esp + 92);
    eax = 0x00000104;
    esi += 0x00000018;
    sub_1eb1b();
    memoryASet32(ds, esp + 92, esi);
loc_227a7: // 0160:227a7
    ebx = memoryAGet32(ds, esp + 96);
    esi = memoryAGet32(ds, esp + 120);
    ebx += 0x00000004;
    esi++;
    memoryASet32(ds, esp + 96, ebx);
    memoryASet32(ds, esp + 120, esi);
    if ((int32_t)esi < (int32_t)0x00000004)
        goto loc_225cf;
    esp += 0x00000084;
    goto loc_1f2f9;
}
void sub_227cf() // 0160:227cf +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_243aa();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x237918, edx);
    edx = 0x0004f014;
    sub_1eae0();
    sub_22399();
    if (memoryAGet32(ds, 0x5ca1a) != 0x00000000)
        goto loc_22829;
    if (memoryAGet32(ds, 0x5ca1e) != 0x00000000)
        goto loc_22829;
    ebx = 0x0004ee1f;
    edx = 0x00000090;
    eax = 0x0000010a;
    sub_1ec92();
    ebx = 0x0004f05f;
    edx = 0x00000090;
    eax = 0x00000072;
    sub_1ec92();
loc_22829: // 0160:22829
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22869() // 0160:22869 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x5ca1e);
    if (!edx)
        goto loc_228bc;
    edi = edx + -1;
    memoryASet32(ds, 0x5ca1e, edi);
    if (edi)
        goto loc_2289a;
    ebx = 0x00000001;
    memoryASet32(ds, 0x5c71c, edi);
    memoryASet32(ds, 0x5c76f, ebx);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2289a: // 0160:2289a
    if ((int32_t)edi <= (int32_t)0x00000047)
        goto loc_2294b;
    sub_227cf();
    edx = 0x0004f06b;
loc_228ad: // 0160:228ad
    eax = 0x00000090;
    sub_1eae0();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_228bc: // 0160:228bc
    ebx = memoryAGet32(ds, 0x5ca1a);
    if (!ebx)
        goto loc_228fa;
    edx = ebx + -1;
    memoryASet32(ds, 0x5ca1a, edx);
    if (edx)
        goto loc_228ee;
    sub_20c98();
    esi = 0x00000001;
    memoryASet32(ds, 0x5c71c, edx);
    memoryASet32(ds, 0x5c76f, esi);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_228ee: // 0160:228ee
    sub_227cf();
    edx = 0x0004eeed;
    goto loc_228ad;
loc_228fa: // 0160:228fa
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_2294b;
    if (memoryAGet32(ds, 0x5ca16) != 0x00000000)
        goto loc_2292c;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_2292c;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, eax);
loc_2292c: // 0160:2292c
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_2294b;
    memoryASet32(ds, 0x5ca1a, 0x00000004);
loc_2294b: // 0160:2294b
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22950() // 0160:22950 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_22965;
loc_22960: // 0160:22960
    ch += cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_22965: // 0160:22965
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_22978;
    eax = memoryAGet32(ds, ebx + 379426);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_22960;
loc_22978: // 0160:22978
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_229ce() // 0160:229ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    cl = al;
    ebx = eax;
    edx = 0;
    cl++;
    ebx <<= 2;
    goto loc_229e3;
loc_229de: // 0160:229de
    ch -= cl;
    edx++;
    memoryASet(ds, eax, ch);
loc_229e3: // 0160:229e3
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_229f6;
    eax = memoryAGet32(ds, ebx + 379426);
    eax += edx;
    ch = memoryAGet(ds, eax);
    if (ch)
        goto loc_229de;
loc_229f6: // 0160:229f6
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_229fa() // 0160:229fa +long
{
    esp -= 4;
    goto loc_229fa;
loc_200eb: // 0160:200eb
    eax = 0x000000a0;
    sub_1ec92();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10496 bytes
loc_229fa: // 0160:229fa
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_243aa();
    ebx = 0x0004f07e;
    eax = 0x000000a0;
    edx = 0;
    esi = 0x00000012;
    sub_1eb1b();
    ecx = 0;
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x237918, edx);
loc_22a25: // 0160:22a25
    eax = ebx;
    sub_229ce();
    eax = esi;
    edx = memoryAGet32(ds, ecx + 379426);
    sub_1eae0();
    eax = ebx;
    ecx += 0x00000004;
    sub_22950();
    ebx++;
    esi += 0x0000000c;
    if ((int32_t)ebx < (int32_t)0x0000000b)
        goto loc_22a25;
    ebx = 0x0004ee1f;
    edx = 0x00000096;
    goto loc_200eb;
}
void sub_22a5b() // 0160:22a5b +long
{
    esp -= 4;
    goto loc_22a5b;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4211 bytes
loc_20373: // 0160:20373
    memoryASet32(ds, 0x5c76f, ecx);
    memoryASet32(ds, 0x5c714, esi);
    memoryASet32(ds, 0x5c718, edi);
    memoryASet32(ds, 0x5c71c, ebp);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    goto loc_1f2f9;
    // gap 9921 bytes
loc_22a5b: // 0160:22a5b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0x000000a0;
    ebx = 0x0000009c;
    ecx = 0x0000000b;
    esi = 0x000000a8;
    edi = 0xffffff58;
    ebp = 0x00000001;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    sub_229fa();
    goto loc_20373;
}
void sub_22a95() // 0160:22a95 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_22ac2;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_22ac2;
    ebx = 0;
    memoryASet32(ds, 0x5c76f, eax);
    memoryASet32(ds, 0x5c71c, ebx);
loc_22ac2: // 0160:22ac2
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22ac5() // 0160:22ac5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    edx = 0x00000010;
    memoryASet32(ds, 0x5c777, eax);
    memoryASet32(ds, 0x2378f4, edx);
    if ((int32_t)eax < (int32_t)0x00000001)
        goto loc_22b0e;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_22b0e;
    edx = memoryAGet32(ds, eax * 4 + 0x5c80a);
    edx += 0x0000000d;
    memoryASet32(ds, 0x237900, edx);
    if (eax != 0x00000001)
        goto loc_22b02;
    memoryASet32(ds, 0x2378f4, 0x00000008);
loc_22b02: // 0160:22b02
    memoryASet32(ds, 0x59070, 0x00000001);
    goto loc_22b1c;
loc_22b0e: // 0160:22b0e
    ebx = 0;
    memoryASet32(ds, 0x5c777, ebx);
    memoryASet32(ds, 0x59070, ebx);
loc_22b1c: // 0160:22b1c
    ebp = memoryAGet32(ds, 0x5c777);
    if (!ebp)
        goto loc_22ba0;
    eax = memoryAGet32(ds, 0x2378f4);
    eax--;
    memoryASet32(ds, 0x5c77b, eax);
loc_22b35: // 0160:22b35
    eax = memoryAGet32(ds, 0x237900);
    edx = memoryAGet32(ds, 0x5c77b);
    eax += edx;
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x00000020)
        goto loc_22b5d;
    if ((int32_t)edx < 0)
        goto loc_22b5d;
    ebp = edx + -1;
    memoryASet32(ds, 0x5c77b, ebp);
    goto loc_22b35;
loc_22b5d: // 0160:22b5d
    ecx = memoryAGet32(ds, 0x5c77b);
    eax = memoryAGet32(ds, 0x237900);
    ecx++;
    eax += ecx;
    memoryASet32(ds, 0x5c77b, ecx);
    memoryASet(ds, eax, 0x5f);
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x5c777);
    sub_1ee64();
    eax = memoryAGet32(ds, 0x5c777);
    sub_1eef8();
    eax = memoryAGet32(ds, 0x237900);
    eax += memoryAGet32(ds, 0x5c77b);
    memoryASet(ds, eax, 0x20);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_22ba0: // 0160:22ba0
    memoryASet32(ds, 0x59070, ebp);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22bf3() // 0160:22bf3 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x5c777) == 0x00000000)
        goto loc_22c21;
    sub_1fb31();
    eax = memoryAGet32(ds, 0x5c777);
    edx = 0;
    sub_1ee64();
    eax = memoryAGet32(ds, 0x5c777);
    ebx = 0;
    sub_1eef8();
    memoryASet32(ds, 0x5c777, ebx);
loc_22c21: // 0160:22c21
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22c24() // 0160:22c24 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5c777);
    if (!edx)
        goto loc_22c5b;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x237900);
    edx = memoryAGet32(ds, 0x237914);
    sub_1f9e0();
    if (!eax)
        goto loc_22c51;
    sub_1fc77();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_22c51: // 0160:22c51
    sub_1fca3();
    sub_22bf3();
loc_22c5b: // 0160:22c5b
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22c63() // 0160:22c63 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5c777);
    if (!edx)
        goto loc_22cbd;
    ebx = edx + -1;
    eax = memoryAGet32(ds, 0x237900);
    edx = memoryAGet32(ds, 0x237914);
    sub_1f9e0();
    if (!eax)
        goto loc_22c8e;
    sub_1fc77();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_22c8e: // 0160:22c8e
    sub_1fb31();
    eax = memoryAGet32(ds, 0x5c777);
    edx = 0;
    sub_1ee64();
    eax = memoryAGet32(ds, 0x5c777);
    sub_1eef8();
    ebx = memoryAGet32(ds, 0x5c777);
    ebx++;
    eax = ebx;
    memoryASet32(ds, 0x5c777, ebx);
    sub_22ac5();
loc_22cbd: // 0160:22cbd
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_22cc0() // 0160:22cc0 +long
{
    esp -= 4;
    goto loc_22cc0;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14784 bytes
loc_22cc0: // 0160:22cc0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x5c777) == 0x00000000)
        goto loc_1f2f9;
    ebx = memoryAGet32(ds, 0x5ca4e);
    if (!ebx)
        goto loc_22ceb;
    ecx = ebx + -1;
    memoryASet32(ds, 0x5ca4e, ecx);
    goto loc_1f2f9;
loc_22ceb: // 0160:22ceb
    sub_156b5();
    bl = al;
    if (!al)
        goto loc_22dc5;
    edx = 0;
    dl = al;
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_22d40;
    if ((int32_t)edx > (int32_t)0x0000005a)
        goto loc_22d40;
    edx = memoryAGet32(ds, 0x5c77b);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, 0x2378f4))
        goto loc_22d40;
    edx = memoryAGet32(ds, 0x237900);
    edx += memoryAGet32(ds, 0x5c77b);
    memoryASet(ds, edx, al);
    ebp = 0x00000001;
    eax = memoryAGet32(ds, 0x5c77b);
    eax += ebp;
    memoryASet32(ds, 0x5ca52, ebp);
    memoryASet32(ds, 0x5c77b, eax);
    sub_1fca3();
loc_22d40: // 0160:22d40
    eax = 0;
    al = bl;
    if (eax != 0x00000008)
        goto loc_22da6;
    edx = memoryAGet32(ds, 0x5c77b);
    if (!edx)
        goto loc_22da6;
    eax = memoryAGet32(ds, 0x237900);
    ecx = edx + -1;
    eax += ecx;
    memoryASet32(ds, 0x5c77b, ecx);
    memoryASet(ds, eax, 0x20);
    if (memoryAGet(ds, 0x223062) != 0x00)
        goto loc_22d78;
    if (memoryAGet(ds, 0x22306e) == 0x00)
        goto loc_22d97;
loc_22d78: // 0160:22d78
    edi = memoryAGet32(ds, 0x5c77b);
    if (!edi)
        goto loc_22d97;
    eax = memoryAGet32(ds, 0x237900);
    ebp = edi + -1;
    eax += ebp;
    memoryASet32(ds, 0x5c77b, ebp);
    memoryASet(ds, eax, 0x20);
    goto loc_22d78;
loc_22d97: // 0160:22d97
    memoryASet32(ds, 0x5ca52, 0x00000001);
    sub_1fca3();
loc_22da6: // 0160:22da6
    eax = 0;
    al = bl;
    if (eax != 0x0000000a)
        goto loc_22dc5;
    esi = 0x00000001;
    memoryASet32(ds, 0x59070, esi);
    sub_22c63();
    memoryASet32(ds, 0x5ca52, esi);
loc_22dc5: // 0160:22dc5
    if (memoryAGet32(ds, 0x5c777) == 0x00000000)
        goto loc_1f2f9;
    if (memoryAGet32(ds, 0x5ca52) == 0x00000000)
        goto loc_1f2f9;
    edx = memoryAGet32(ds, 0x5c77b);
    eax = memoryAGet32(ds, 0x237900);
    memoryASet(ds, edx + eax, 0x5f);
    eax = memoryAGet32(ds, 0x5c777);
    sub_1eef8();
    eax = memoryAGet32(ds, 0x237900);
    memoryASet(ds, edx + eax, 0x20);
    goto loc_1f2f9;
}
void sub_22e27() // 0160:22e27 +long
{
    esp -= 4;
    goto loc_22e27;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15143 bytes
loc_22e27: // 0160:22e27
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x22313c);
    edx = memoryAGet32(ds, 0x5c773);
    eax -= edx;
    edx = eax;
    sub_22cc0();
    ebx = memoryAGet32(ds, 0x217ac0);
    if (ebx)
        goto loc_22e58;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_23079;
loc_22e58: // 0160:22e58
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_22e68;
    edi = 0x00000001;
    goto loc_22e6d;
loc_22e68: // 0160:22e68
    edi = 0xffffffff;
loc_22e6d: // 0160:22e6d
    if ((int32_t)edx <= (int32_t)0x00000023)
        goto loc_2304b;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    edx = eax;
    esi = eax;
    if ((int32_t)eax >= (int32_t)0x00000006)
        goto loc_22ebf;
    if (eax == memoryAGet32(ds, 0x5c777))
        goto loc_22ebf;
    sub_22c24();
    if (!eax)
        goto loc_22ebf;
    sub_156aa();
    eax = edx;
    sub_22ac5();
    if (memoryAGet32(ds, 0x5c777) == 0x00000000)
        goto loc_22ebf;
    memoryASet32(ds, 0x59070, 0x00000001);
loc_22ebf: // 0160:22ebf
    if (esi != 0x00000006)
        goto loc_22f3f;
    eax = memoryAGet32(ds, 0x237914);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 377792);
    ebx += edi;
    memoryASet32(ds, eax + 377792, ebx);
    if ((int32_t)ebx <= (int32_t)0x00000003)
        goto loc_22eeb;
    ebp = 0;
    memoryASet32(ds, eax + 377792, ebp);
loc_22eeb: // 0160:22eeb
    eax = memoryAGet32(ds, 0x237914);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 377792) >= (int32_t)0x00000000)
        goto loc_22f06;
    memoryASet32(ds, eax + 377792, 0x00000003);
loc_22f06: // 0160:22f06
    ecx = memoryAGet32(ds, 0x237914);
    ebx = 0xffffffff;
    ecx = memoryAGet32(ds, ecx * 4 + 0x5c3c0);
    eax = 0x00000006;
    edx = ebx;
    ecx = memoryAGet32(ds, ecx * 4 + 0x5c7ba);
    sub_1eb58();
    eax = 0x00000006;
    sub_1eef8();
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
loc_22f3f: // 0160:22f3f
    if (esi != 0x00000007)
        goto loc_22f71;
    sub_22c24();
    if (!eax)
        goto loc_22f71;
    eax = memoryAGet32(ds, 0x237914);
    eax--;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x237914, eax);
    sub_1fce7();
    eax = esi;
    sub_1eef8();
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
loc_22f71: // 0160:22f71
    if (esi != 0x00000008)
        goto loc_22fa3;
    sub_22c24();
    if (!eax)
        goto loc_22fa3;
    eax = memoryAGet32(ds, 0x237914);
    eax++;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x237914, eax);
    sub_1fce7();
    eax = esi;
    sub_1eef8();
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
loc_22fa3: // 0160:22fa3
    if (esi != 0x0000000a)
        goto loc_2302b;
    eax = edi;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x237914);
    eax -= edi;
    edx <<= 2;
    eax <<= 3;
    ecx = memoryAGet32(ds, edx + 377872);
    eax += edi;
    ecx += eax;
    memoryASet32(ds, edx + 377872, ecx);
    if ((int32_t)ecx <= (int32_t)0x000001f4)
        goto loc_22fe1;
    memoryASet32(ds, edx + 377872, 0x0000004b);
loc_22fe1: // 0160:22fe1
    eax = memoryAGet32(ds, 0x237914);
    eax <<= 2;
    if ((int32_t)memoryAGet32(ds, eax + 377872) >= (int32_t)0x0000004b)
        goto loc_22ffc;
    memoryASet32(ds, eax + 377872, 0x000001f4);
loc_22ffc: // 0160:22ffc
    eax = memoryAGet32(ds, 0x237914);
    ebx = 0x00000003;
    edx = memoryAGet32(ds, eax * 4 + 0x5c410);
    eax = 0x0005c786;
    sub_1f17f();
    eax = 0x0000000a;
    sub_1eef8();
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
loc_2302b: // 0160:2302b
    if (esi != 0x0000000b)
        goto loc_2304b;
    sub_1fde2();
    sub_1fce7();
    eax = esi;
    sub_1eef8();
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c773, eax);
loc_2304b: // 0160:2304b
    if (esi != 0x00000009)
        goto loc_1f2f9;
    sub_22c24();
    if (!eax)
        goto loc_1f2f9;
    ecx = 0;
    esi = 0x00000001;
    memoryASet32(ds, 0x5c71c, ecx);
    memoryASet32(ds, 0x5c76f, esi);
    goto loc_1f2f9;
loc_23079: // 0160:23079
    memoryASet32(ds, 0x5c773, ebx);
    goto loc_1f2f9;
}
void sub_23084() // 0160:23084 +long
{
    esp -= 4;
    goto loc_23084;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4538 bytes
loc_204ba: // 0160:204ba
    memoryASet32(ds, 0x5c71c, edi);
    memoryASet32(ds, 0x5c76f, ebp);
    goto loc_1f2f9;
    // gap 11193 bytes
loc_23084: // 0160:23084
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_1f2f9;
    sub_1ef3a();
    if (!eax)
        goto loc_230c8;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_230c8;
    ebx = 0;
    ecx = 0x0000000a;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_230c8: // 0160:230c8
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_230f0;
    esi = 0;
    edi = 0x00000003;
    memoryASet32(ds, 0x5c71c, esi);
    memoryASet32(ds, 0x5c76f, edi);
loc_230f0: // 0160:230f0
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000003)
        goto loc_23117;
    ebp = 0;
    eax = 0x00000002;
    memoryASet32(ds, 0x5c71c, ebp);
    memoryASet32(ds, 0x5c76f, eax);
loc_23117: // 0160:23117
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000004)
        goto loc_23139;
    edx = 0;
    memoryASet32(ds, 0x5c76f, eax);
    memoryASet32(ds, 0x5c71c, edx);
loc_23139: // 0160:23139
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000005)
        goto loc_23161;
    ecx = 0;
    esi = 0x0000000b;
    memoryASet32(ds, 0x5c71c, ecx);
    memoryASet32(ds, 0x5c76f, esi);
loc_23161: // 0160:23161
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000006)
        goto loc_1f2f9;
    edi = 0;
    ebp = 0x00000010;
    goto loc_204ba;
}
void sub_23186() // 0160:23186 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x217ac0) == 0x00000000)
        goto loc_231d4;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000001)
        goto loc_231ac;
    sub_1e742();
loc_231ac: // 0160:231ac
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    if (eax != 0x00000002)
        goto loc_231d4;
    ebx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x5c71c, ebx);
    memoryASet32(ds, 0x5c76f, ecx);
loc_231d4: // 0160:231d4
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_231d8() // 0160:231d8 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x5c70c) != 0x00000000)
        goto loc_2338c;
    edx = memoryAGet32(ds, 0x5c6f0);
    eax = memoryAGet32(ds, 0x5c6ec);
    sub_1ed0b();
    ebx = memoryAGet32(ds, 0x5c76f);
    edx = eax;
    if (ebx != 0x0000000a)
        goto loc_2320e;
    if ((int32_t)eax > (int32_t)0x00000008)
        goto loc_2320e;
    if (eax)
        goto loc_2323d;
loc_2320e: // 0160:2320e
    if (memoryAGet32(ds, 0x5c76f) != 0x00000003)
        goto loc_23220;
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_23220;
    if (eax)
        goto loc_2323d;
loc_23220: // 0160:23220
    esi = memoryAGet32(ds, 0x5c76f);
    if (esi != 0x0000000a)
        goto loc_23238;
    if (eax != esi)
        goto loc_23238;
    if ((int32_t)memoryAGet32(ds, 0x237908) <= (int32_t)0x00000001)
        goto loc_2323d;
loc_23238: // 0160:23238
    sub_1eecc();
loc_2323d: // 0160:2323d
    eax = memoryAGet32(ds, 0x5c76f);
    if (eax < 0x0000000a)
        goto loc_232b0;
    if (eax <= 0x0000000a)
        goto loc_2332d;
    if (eax < 0x00000010)
        goto loc_2328d;
    if (eax <= 0x00000010)
        goto loc_2335a;
    if (eax < 0x00000016)
        goto loc_23279;
    if (eax <= 0x00000016)
        goto loc_23375;
    if (eax <= 0x00000017)
        goto loc_2337e;
    if (eax == 0x0000001e)
        goto loc_23387;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23279: // 0160:23279
    if (eax < 0x00000014)
        goto loc_2338c;
    if (eax <= 0x00000014)
        goto loc_23363;
    goto loc_2336c;
loc_2328d: // 0160:2328d
    if (eax < 0x0000000c)
        goto loc_23336;
    if (eax <= 0x0000000c)
        goto loc_2333f;
    if (eax < 0x0000000e)
        goto loc_2338c;
    if (eax <= 0x0000000e)
        goto loc_23348;
    goto loc_23351;
loc_232b0: // 0160:232b0
    if (eax < 0x00000005)
        goto loc_232c5;
    if (eax <= 0x00000005)
        goto loc_23300;
    if (eax < 0x00000007)
        goto loc_23309;
    if (eax <= 0x00000007)
        goto loc_23312;
    if (eax <= 0x00000008)
        goto loc_2331b;
    goto loc_23324;
loc_232c5: // 0160:232c5
    if (eax < 0x00000002)
        goto loc_232d3;
    if (eax <= 0x00000002)
        goto loc_232e5;
    if (eax <= 0x00000003)
        goto loc_232ee;
    goto loc_232f7;
loc_232d3: // 0160:232d3
    if (eax != 0x00000001)
        goto loc_2338c;
    sub_23084();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_232e5: // 0160:232e5
    sub_23186();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_232ee: // 0160:232ee
    sub_22e27();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_232f7: // 0160:232f7
    sub_21899();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23300: // 0160:23300
    sub_21605();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23309: // 0160:23309
    sub_2039a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23312: // 0160:23312
    sub_206a1();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2331b: // 0160:2331b
    sub_21308();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23324: // 0160:23324
    sub_20a79();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2332d: // 0160:2332d
    sub_1f59b();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23336: // 0160:23336
    sub_22a95();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2333f: // 0160:2333f
    sub_20d2c();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23348: // 0160:23348
    sub_20e5c();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23351: // 0160:23351
    sub_1ff89();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2335a: // 0160:2335a
    sub_21251();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23363: // 0160:23363
    sub_21d1a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2336c: // 0160:2336c
    sub_2225a();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23375: // 0160:23375
    sub_2232f();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2337e: // 0160:2337e
    sub_22869();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_23387: // 0160:23387
    sub_21f18();
loc_2338c: // 0160:2338c
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_23390() // 0160:23390 +long
{
    esp -= 4;
    goto loc_23390;
loc_20652: // 0160:20652
    eax = 0xffffff58;
    edx = 0x00000001;
    memoryASet32(ds, 0x5c76f, edi);
    memoryASet32(ds, 0x5c714, ebp);
    memoryASet32(ds, 0x5c718, eax);
    memoryASet32(ds, 0x5c71c, edx);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, eax);
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8617 bytes
loc_2282c: // 0160:2282c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    edx = 0x00000078;
    ebx = 0x00000096;
    edi = 0x00000017;
    ebp = 0x000000a8;
    ecx = 0;
    memoryASet32(ds, 0x5c6ec, edx);
    memoryASet32(ds, 0x5c6f0, ebx);
    memoryASet32(ds, 0x5ca1e, ecx);
    memoryASet32(ds, 0x5ca1a, ecx);
    sub_227cf();
    goto loc_20652;
    // gap 2855 bytes
loc_23390: // 0160:23390
    if (memoryAGet32(ds, 0x5c76f) != 0x00000001)
        goto loc_2339e;
    sub_1ef62();
loc_2339e: // 0160:2339e
    if (memoryAGet32(ds, 0x5c76f) != 0x00000002)
        goto loc_233ac;
    sub_1f0bf();
loc_233ac: // 0160:233ac
    if (memoryAGet32(ds, 0x5c76f) != 0x00000003)
        goto loc_233ba;
    sub_1fe9a();
loc_233ba: // 0160:233ba
    if (memoryAGet32(ds, 0x5c76f) != 0x00000004)
        goto loc_233c8;
    sub_2185f();
loc_233c8: // 0160:233c8
    if (memoryAGet32(ds, 0x5c76f) != 0x00000005)
        goto loc_233d6;
    sub_2159f();
loc_233d6: // 0160:233d6
    if (memoryAGet32(ds, 0x5c76f) != 0x00000006)
        goto loc_233e4;
    sub_2033e();
loc_233e4: // 0160:233e4
    if (memoryAGet32(ds, 0x5c76f) != 0x00000007)
        goto loc_233f2;
    sub_2061a();
loc_233f2: // 0160:233f2
    if (memoryAGet32(ds, 0x5c76f) != 0x00000008)
        goto loc_23400;
    sub_21294();
loc_23400: // 0160:23400
    if (memoryAGet32(ds, 0x5c76f) != 0x00000009)
        goto loc_2340e;
    sub_20a3f();
loc_2340e: // 0160:2340e
    if (memoryAGet32(ds, 0x5c76f) != 0x0000000a)
        goto loc_2341c;
    sub_1f51d();
loc_2341c: // 0160:2341c
    if (memoryAGet32(ds, 0x5c76f) != 0x0000000b)
        goto loc_2342a;
    sub_22a5b();
loc_2342a: // 0160:2342a
    if (memoryAGet32(ds, 0x5c76f) != 0x0000000c)
        goto loc_23438;
    sub_20ba6();
loc_23438: // 0160:23438
    if (memoryAGet32(ds, 0x5c76f) != 0x0000000e)
        goto loc_23446;
    sub_20e1a();
loc_23446: // 0160:23446
    if (memoryAGet32(ds, 0x5c76f) != 0x0000000f)
        goto loc_23454;
    sub_1fef3();
loc_23454: // 0160:23454
    if (memoryAGet32(ds, 0x5c76f) != 0x00000010)
        goto loc_23462;
    sub_21212();
loc_23462: // 0160:23462
    if (memoryAGet32(ds, 0x5c76f) == 0x00000017)
        goto loc_2282c;
    esp += 4;
}
void sub_23470() // 0160:23470 +long
{
    esp -= 4;
    goto loc_23470;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16752 bytes
loc_23470: // 0160:23470
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = 0;
    ebp = 0;
loc_2347a: // 0160:2347a
    esi = edi;
    esi <<= 2;
    ebx = ebp;
    ecx = memoryAGet32(ds, esi + 378794);
    edx = 0;
    memoryASet32(ds, esi + 364576, ecx);
loc_2348f: // 0160:2348f
    eax = esi + edx;
    memoryASet32(ds, ebx + 2202034, ecx);
    sub_111a0();
    edx++;
    ebx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_2348f;
    edi++;
    ebp += 0x000002b0;
    if ((int32_t)edi < (int32_t)0x00000004)
        goto loc_2347a;
    goto loc_1f2f9;
}
void sub_234ba() // 0160:234ba +long
{
    esp -= 4;
    goto loc_234ba;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 16826 bytes
loc_234ba: // 0160:234ba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_200fa();
    sub_23470();
    ebp = 0;
    edi = 0;
loc_234ce: // 0160:234ce
    edx = edi * 0x000000ac;
    ebx = edi * 0x00000030;
    ecx = memoryAGet32(ds, 0x59010);
    eax = edx;
    if ((int32_t)ebp < (int32_t)ecx)
        goto loc_23505;
    ecx = edx + 688;
loc_234e9: // 0160:234e9
    eax += 0x000000ac;
    esi = 0;
    ebx += 0x00000030;
    memoryASet32(ds, eax + 2201786, esi);
    memoryASet32(ds, ebx + 2240988, esi);
    if (eax == ecx)
        goto loc_2355f;
    goto loc_234e9;
loc_23505: // 0160:23505
    esi = memoryAGet32(ds, edi + 378762) * 0x000000aa;
    edx = ebx;
    ebx = esi;
    esi += 0x00000010;
loc_23516: // 0160:23516
    ecx = memoryAGet32(ds, ebx + 374526);
    if (!ecx)
        goto loc_23538;
    memoryASet32(ds, edx + 2241036, 0x00000001);
    ecx = memoryAGet32(ds, eax + 2202034);
    memoryASet32(ds, edx + 2241012, ecx);
    goto loc_23550;
loc_23538: // 0160:23538
    memoryASet32(ds, eax + 2201958, ecx);
    memoryASet32(ds, eax + 2201950, ecx);
    memoryASet32(ds, eax + 2201954, ecx);
    memoryASet32(ds, edx + 2241036, ecx);
loc_23550: // 0160:23550
    edx += 0x00000030;
    ebx += 0x00000004;
    eax += 0x000000ac;
    if (ebx != esi)
        goto loc_23516;
loc_2355f: // 0160:2355f
    ebp++;
    edi += 0x00000004;
    if ((int32_t)ebp < (int32_t)0x00000004)
        goto loc_234ce;
    goto loc_1f2f9;
}
void sub_23571() // 0160:23571 +long
{
    esp -= 4;
    goto loc_23571;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17009 bytes
loc_23571: // 0160:23571
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x5c658);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = 0;
    eax <<= 3;
    memoryASet32(ds, 0x5ca66, edx);
    eax += ebx;
    memoryASet32(ds, 0x5c80a, edx);
    eax += eax;
    ebx = 0;
    memoryASet32(ds, 0x21acc4, eax);
    goto loc_235bd;
loc_235a2: // 0160:235a2
    edx = 0x00007fff;
    eax = 0;
    sub_30c85();
    ecx = memoryAGet32(ds, 0x59060);
    ecx += eax;
    ebx++;
    memoryASet32(ds, 0x59060, ecx);
loc_235bd: // 0160:235bd
    edx = 0x0000000a;
    eax = 0x00000005;
    sub_30c85();
    if ((int32_t)ebx < (int32_t)eax)
        goto loc_235a2;
    esi = 0x00000001;
    edi = 0xffffffff;
    edx = 0;
    memoryASet32(ds, 0x21acc8, esi);
    memoryASet32(ds, 0x5cc64, edi);
    ebp = esi;
    memoryASet32(ds, 0x58ffc, esi);
    memoryASet32(ds, 0x5ca5e, edi);
    memoryASet32(ds, 0x5ca62, edx);
    memoryASet32(ds, 0x5ca6a, edx);
    sub_219ff();
    esi = memoryAGet32(ds, 0x5c9da);
    esi += ebp;
    memoryASet32(ds, 0x5c9a0, edx);
    memoryASet32(ds, 0x5c9da, esi);
    goto loc_1f2f9;
}
void sub_23620() // 0160:23620 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = 0;
    ebx = 0x00000001;
    edx = 0;
loc_2362b: // 0160:2362b
    eax += 0x00000030;
    memoryASet32(ds, eax + 2240988, ebx);
    memoryASet32(ds, eax + 2240968, edx);
    memoryASet32(ds, eax + 2240992, edx);
    memoryASet32(ds, eax + 2241000, edx);
    memoryASet32(ds, eax + 2240996, edx);
    memoryASet32(ds, eax + 2240972, edx);
    memoryASet32(ds, eax + 2240976, edx);
    memoryASet32(ds, eax + 2240980, edx);
    memoryASet32(ds, eax + 2240984, edx);
    memoryASet32(ds, eax + 2241004, edx);
    memoryASet32(ds, eax + 2241008, edx);
    if (eax != 0x00000300)
        goto loc_2362b;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2367a() // 0160:2367a +long
{
    esp -= 4;
    goto loc_2367a;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17274 bytes
loc_2367a: // 0160:2367a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    push32(eax);
    edi = eax;
    edi <<= 2;
    edi -= eax;
    edi <<= 4;
    ebx = eax;
    eax = memoryAGet32(ds, edi + 2241016);
    memoryASet32(ds, esp + 4, eax);
    eax = ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = 0;
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, 0x59010);
    ebp = edi;
    eax <<= 2;
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_2378d;
loc_236c6: // 0160:236c6
    if (memoryAGet32(ds, ebx + 2241036) != 0x00000001)
        goto loc_23783;
    eax = memoryAGet32(ds, ebx + 2241012);
    if (eax == memoryAGet32(ds, ecx + 2202034))
        goto loc_23783;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_23714;
    memoryASet32(ds, edi + 2241024, memoryAGet32(ds, edi + 2241024) + 1);
    edx = memoryAGet32(ds, ecx + 2202034);
    eax = memoryAGet32(ds, ebx + 2241012);
    eax -= edx;
    memoryASet32(ds, edi + 2241048, memoryAGet32(ds, edi + 2241048) + eax);
loc_23714: // 0160:23714
    eax = memoryAGet32(ds, ebx + 2241012);
    eax -= memoryAGet32(ds, ecx + 2202034);
    edx = memoryAGet32(ds, ebx + 2241044);
    edx += eax;
    eax = memoryAGet32(ds, ebx + 2241020);
    memoryASet32(ds, ebx + 2241044, edx);
    eax++;
    edx = memoryAGet32(ds, ecx + 2202034);
    memoryASet32(ds, ebx + 2241020, eax);
    if (edx)
        goto loc_23777;
    edx = esi;
    eax = 0x00000002;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, ebx + 2241036, eax);
    eax = esi;
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, ebx + 2241052, memoryAGet32(ds, ebx + 2241052) + 1);
    if (eax == memoryAGet32(ds, esp + 12))
        goto loc_23771;
    memoryASet32(ss, ebp + 2241016, memoryAGet32(ss, ebp + 2241016) + 1);
loc_23771: // 0160:23771
    memoryASet32(ds, ebx + 2241028, memoryAGet32(ds, ebx + 2241028) + 1);
loc_23777: // 0160:23777
    eax = memoryAGet32(ds, ecx + 2202034);
    memoryASet32(ds, ebx + 2241012, eax);
loc_23783: // 0160:23783
    ebx += 0x00000030;
    ecx += 0x000000ac;
    esi++;
loc_2378d: // 0160:2378d
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_236c6;
    ebx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ds, edi + 2241016);
    eax -= ebx;
    ecx = memoryAGet32(ds, edi + 2241040);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_237b7;
    memoryASet32(ds, edi + 2241040, eax);
loc_237b7: // 0160:237b7
    ebx = memoryAGet32(ds, esp);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 4;
    ebx = memoryAGet32(ds, 0x5ca6a);
    ecx = memoryAGet32(ds, eax + 2241032);
    esi = memoryAGet32(ds, eax + 2241056);
    ecx += ebx;
    esi++;
    memoryASet32(ds, eax + 2241032, ecx);
    memoryASet32(ds, eax + 2241056, esi);
    esp += 0x00000010;
    goto loc_1f2f9;
}
void sub_237ed() // 0160:237ed +long
{
    esp -= 4;
    goto loc_237ed;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17645 bytes
loc_237ed: // 0160:237ed
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x5cd20);
    memoryASet32(ds, 0x5c9da, edx);
    if (!ebx)
        goto loc_23819;
    edx = 0x00000004;
    eax = 0x00000002;
    sub_24709();
    memoryASet32(ds, 0x237908, eax);
loc_23819: // 0160:23819
    esi = 0xffffffff;
    eax = memoryAGet32(ds, 0x237908);
    ecx = 0;
    memoryASet32(ds, 0x59010, eax);
    memoryASet32(ds, 0x5905c, ecx);
    memoryASet32(ds, 0x59050, ecx);
    memoryASet32(ds, 0x59044, ecx);
    memoryASet32(ds, 0x59038, ecx);
    sub_23620();
    eax = 0;
loc_23849: // 0160:23849
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 378758, esi);
    memoryASet32(ds, eax + 2240960, edx);
    memoryASet32(ds, eax + 2240976, edx);
    memoryASet32(ds, eax + 2240944, edx);
    if (eax != 0x00000010)
        goto loc_23849;
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_238a5;
    edx = 0x00000003;
    eax = 0;
    sub_24709();
    ebx = memoryAGet32(ds, 0x59010);
    edx = eax;
    ebx <<= 2;
    eax = 0;
    goto loc_2389f;
loc_2388f: // 0160:2388f
    esi = edx + 16;
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, eax + 378758, esi);
    edx &= 0x00000003;
loc_2389f: // 0160:2389f
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_238df;
    goto loc_2388f;
loc_238a5: // 0160:238a5
    ebp = 0x00000001;
    edi = memoryAGet32(ds, 0x59010);
    eax = 0;
    esi = 0;
    edi <<= 2;
    goto loc_238db;
loc_238b9: // 0160:238b9
    cl = al;
    ebx = ebp;
    ebx <<= cl;
    ecx = memoryAGet32(ds, 0x23790c);
    edx = eax + 1;
    if (ebx & ecx)
        goto loc_238d0;
    eax = edx;
    goto loc_238b9;
loc_238d0: // 0160:238d0
    memoryASet32(ds, esi + 378762, eax);
    esi += 0x00000004;
    eax = edx;
loc_238db: // 0160:238db
    if ((int32_t)esi < (int32_t)edi)
        goto loc_238b9;
loc_238df: // 0160:238df
    sub_1f7e2();
    sub_21a8c();
    esi = 0x00000001;
    sub_23571();
    memoryASet32(ds, 0x59198, esi);
    goto loc_1f2f9;
}
void sub_238fe() // 0160:238fe +long
{
    esp -= 4;
    goto loc_238fe;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17918 bytes
loc_238fe: // 0160:238fe
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    al = (int32_t)memoryAGet32(ds, 0x5c76f) > (int32_t)0x00000001;
    ebx = memoryAGet32(ds, 0x5a5fc);
    eax &= 0x000000ff;
    if (ebx == 0x00000002)
        goto loc_1f2fa;
    if (ebx == 0x00000003)
        goto loc_1f2fa;
    esi = memoryAGet32(ds, 0x21acc8);
    edx = memoryAGet32(ds, 0x5c6e4);
    if (esi)
        goto loc_23947;
    if (eax)
        goto loc_23947;
    if ((int32_t)memoryAGet32(ds, 0x5c76f) < (int32_t)0x00000014)
        goto loc_23951;
loc_23947: // 0160:23947
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5ca76, eax);
loc_23951: // 0160:23951
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_23975;
    if (memoryAGet32(ds, 0x5c6f4) != 0x00000000)
        goto loc_23975;
    if (memoryAGet32(ds, 0x5ca52) != 0x00000000)
        goto loc_23975;
    if (memoryAGet32(ds, 0x5c777) == 0x00000000)
        goto loc_2397f;
loc_23975: // 0160:23975
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5ca76, eax);
loc_2397f: // 0160:2397f
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    esi = memoryAGet32(ds, 0x5ca76);
    eax += eax;
    eax += esi;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_1f2fa;
    if ((int32_t)memoryAGet32(ds, 0x5c76f) <= (int32_t)0x00000000)
        goto loc_1f2fa;
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x5c65c);
    memoryASet32(ds, 0x5cd20, eax);
    eax = 0x00000002;
    sub_30c85();
    memoryASet32(ds, 0x237908, eax);
    edx = 0;
    ebx = memoryAGet32(ds, 0x237908);
    memoryASet32(ds, 0x23790c, edx);
    eax = 0;
    goto loc_239f7;
loc_239df: // 0160:239df
    edx = 0x00000001;
    cl = al;
    edi = memoryAGet32(ds, 0x23790c);
    edx <<= cl;
    edi |= edx;
    eax++;
    memoryASet32(ds, 0x23790c, edi);
loc_239f7: // 0160:239f7
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_239df;
    ecx = 0;
    esi = 0xffffffff;
    memoryASet32(ds, 0x5c71c, ecx);
    memoryASet32(ds, 0x5c76f, esi);
    sub_1e738();
    goto loc_1f2fa;
}
void sub_23a18() // 0160:23a18 +long
{
    esp -= 4;
    goto loc_23a18;
loc_1f2fa: // 0160:1f2fa
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18200 bytes
loc_23a18: // 0160:23a18
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    edi = esp;
    esi = 0x0001e5f4;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = memoryAGet32(ds, 0x5ca5e);
    if (edx != 0xfffffffe)
        goto loc_23a3d;
    eax = edx;
    goto loc_23b5b;
loc_23a3d: // 0160:23a3d
    if (memoryAGet32(ds, 0x21ae94) == 0x00000000)
        goto loc_23a50;
    memoryASet32(ds, 0x5ca6a, 0x00000001);
loc_23a50: // 0160:23a50
    eax = memoryAGet32(ds, 0x21ac64);
    if (eax == memoryAGet32(ds, 0x5ca5e))
        goto loc_23a6a;
    eax = memoryAGet32(ds, 0x22313c);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x5ca62))
        goto loc_23a77;
loc_23a6a: // 0160:23a6a
    if (memoryAGet32(ds, 0x21acc8) != 0x00000000)
        goto loc_23b3b;
loc_23a77: // 0160:23a77
    if (memoryAGet32(ds, 0x5ca5e) != 0xffffffff)
        goto loc_23a9a;
    edx = 0x00000004;
    eax = 0;
loc_23a87: // 0160:23a87
    memoryASet32(ds, eax + 2240996, edx);
    eax += edx;
    if (eax == 0x00000010)
        goto loc_23b1f;
    goto loc_23a87;
loc_23a9a: // 0160:23a9a
    ebx = 0;
    ecx = 0;
loc_23a9e: // 0160:23a9e
    if (memoryAGet32(ds, ecx + 2201958) == 0x00000000)
        goto loc_23ab9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, esp + eax*4, memoryAGet32(ds, esp + eax*4) + 1);
loc_23ab9: // 0160:23ab9
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_23a9e;
    eax = memoryAGet32(ds, 0x5ca5e);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    ebx = 0;
    edx = esi;
    eax = 0;
    edx <<= 2;
    goto loc_23b0d;
loc_23ae4: // 0160:23ae4
    ecx = memoryAGet32(ds, eax + 2240996);
    ecx -= memoryAGet32(ds, esp + eax);
    if (!ecx)
        goto loc_23aff;
    memoryASet32(ds, eax + 2240948, memoryAGet32(ds, eax + 2240948) + ecx);
    if (ebx == esi)
        goto loc_23aff;
    memoryASet32(ds, edx + 2240980, memoryAGet32(ds, edx + 2240980) + ecx);
loc_23aff: // 0160:23aff
    eax += 0x00000004;
    ecx = memoryAGet32(ds, esp + eax + -4);
    ebx++;
    memoryASet32(ds, eax + 2240992, ecx);
loc_23b0d: // 0160:23b0d
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x59010))
        goto loc_23ae4;
    eax = memoryAGet32(ds, 0x5ca5e);
    sub_2367a();
loc_23b1f: // 0160:23b1f
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0;
    memoryASet32(ds, 0x5ca5e, eax);
    memoryASet32(ds, 0x5ca6a, ebx);
    eax = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5ca62, eax);
loc_23b3b: // 0160:23b3b
    ecx = memoryAGet32(ds, 0x21acc8);
    if (ecx)
        goto loc_23b56;
    esi = 0xfffffffe;
    memoryASet32(ds, 0x5ca6a, ecx);
    memoryASet32(ds, 0x5ca5e, esi);
loc_23b56: // 0160:23b56
    eax = memoryAGet32(ds, 0x5ca5e);
loc_23b5b: // 0160:23b5b
    esp += 0x00000010;
    goto loc_1f2fa;
}
void sub_23b63() // 0160:23b63 +long
{
    esp -= 4;
    goto loc_23b63;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17637 bytes
loc_237e5: // 0160:237e5
    esp += 0x00000010;
    goto loc_1f2f9;
    // gap 886 bytes
loc_23b63: // 0160:23b63
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = 0xffffffff;
    esi = memoryAGet32(ds, 0x5c660);
    ebx = 0;
    eax = 0;
loc_23b7b: // 0160:23b7b
    if ((int32_t)memoryAGet32(ds, eax + 378762) < (int32_t)0x00000000)
        goto loc_23ba3;
    if (!esi)
        goto loc_23b8d;
    memoryASet32(ds, esp + eax, ebx);
    goto loc_23ba6;
loc_23b8d: // 0160:23b8d
    edx = memoryAGet32(ds, eax + 2240980);
    edx <<= 4;
    edx |= ebx;
    edx &= 0x000000ff;
    memoryASet32(ds, esp + eax, edx);
    goto loc_23ba6;
loc_23ba3: // 0160:23ba3
    memoryASet32(ds, esp + eax, ecx);
loc_23ba6: // 0160:23ba6
    ebx++;
    eax += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_23b7b;
    esi = memoryAGet32(ds, 0x5c660);
    ebx = 0;
    ecx = 0;
loc_23bb9: // 0160:23bb9
    if (memoryAGet32(ds, ecx + 2201958) == 0x00000000)
        goto loc_23c05;
    if (memoryAGet32(ds, ecx + 2202058) != 0x00000000)
        goto loc_23c05;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    if (!esi)
        goto loc_23bee;
    edx += 0x00010000;
    memoryASet32(ds, esp + eax, edx);
    goto loc_23c05;
loc_23bee: // 0160:23bee
    edx = memoryAGet32(ds, ecx + 2202034);
    edx += 0x000007d0;
    edi = memoryAGet32(ds, esp + eax);
    edx <<= 8;
    edi += edx;
    memoryASet32(ds, esp + eax, edi);
loc_23c05: // 0160:23c05
    ebx++;
    ecx += 0x000000ac;
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_23bb9;
    edx = 0x00000001;
    esi = edx;
    ebx = esi;
loc_23c1a: // 0160:23c1a
    if (!edx)
        goto loc_23c40;
    edx = 0;
    ecx = 0;
loc_23c22: // 0160:23c22
    eax = memoryAGet32(ds, esp + ecx);
    edi = memoryAGet32(ds, esp + ecx + 4);
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_23c36;
    memoryASet32(ds, esp + ecx, edi);
    edx = ebx;
    memoryASet32(ds, esp + ecx + 4, eax);
loc_23c36: // 0160:23c36
    ecx += 0x00000004;
    if ((int32_t)ecx >= (int32_t)0x0000000c)
        goto loc_23c1a;
    goto loc_23c22;
loc_23c40: // 0160:23c40
    esi = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x5ca0e, edx);
    si &= 0xfff0;
    eax = 0;
    if (!esi)
        goto loc_23c7a;
loc_23c53: // 0160:23c53
    ebx = memoryAGet32(ds, esp + edx);
    bl &= 0xf0;
    if (ebx != esi)
        goto loc_23c72;
    ecx = memoryAGet32(ds, esp + edx);
    ebx = 0x00000001;
    ecx &= 0x0000000f;
    ebx <<= cl;
    eax |= ebx;
    memoryASet32(ds, 0x5ca0e, memoryAGet32(ds, 0x5ca0e) + 1);
loc_23c72: // 0160:23c72
    edx += 0x00000004;
    if (edx != 0x00000010)
        goto loc_23c53;
loc_23c7a: // 0160:23c7a
    edx = memoryAGet32(ds, 0x59010);
    ecx = memoryAGet32(ds, 0x5ca0e);
    edx -= ecx;
    esi = memoryAGet32(ds, 0x5c660);
    memoryASet32(ds, 0x5ca12, edx);
    if (!esi)
        goto loc_23ca5;
    if ((int32_t)ecx <= (int32_t)0x00000001)
        goto loc_23ca5;
    ebp = 0;
    memoryASet32(ds, 0x5ca12, ebp);
loc_23ca5: // 0160:23ca5
    if ((int32_t)memoryAGet32(ds, 0x5ca12) > (int32_t)0x00000000)
        goto loc_237e5;
    ebx = 0;
    eax = 0;
    memoryASet32(ds, 0x5ca12, ebx);
    goto loc_237e5;
}
void sub_23cf6() // 0160:23cf6 +long
{
    esp -= 4;
    goto loc_23cf6;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18934 bytes
loc_23cf6: // 0160:23cf6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    edx = memoryAGet32(ds, 0x5c640);
    if (edx)
        goto loc_1f2f9;
    ebx = memoryAGet32(ds, 0x5cd20);
    if (ebx)
        goto loc_1f2f9;
loc_23d1a: // 0160:23d1a
    esi = memoryAGet32(ds, edx + 378762);
    if ((int32_t)esi < 0)
        goto loc_23dab;
    eax = 0x00000001;
    cl = bl;
    eax <<= cl;
    ecx = eax;
    eax = esi * 0x00000018;
    if (!(edi & ecx))
        goto loc_23d42;
    memoryASet32(ds, eax + 377956, memoryAGet32(ds, eax + 377956) + 1);
    goto loc_23d48;
loc_23d42: // 0160:23d42
    memoryASet32(ds, eax + 377960, memoryAGet32(ds, eax + 377960) + 1);
loc_23d48: // 0160:23d48
    eax = esi * 0x00000018;
    ecx = memoryAGet32(ds, eax + 377952);
    ecx++;
    esi = memoryAGet32(ds, eax + 377964);
    memoryASet32(ds, eax + 377952, ecx);
    ecx = memoryAGet32(ds, edx + 2240980);
    ebp = memoryAGet32(ds, eax + 377968);
    esi += ecx;
    ecx = memoryAGet32(ds, edx + 2240948);
    memoryASet32(ds, eax + 377964, esi);
    ebp += ecx;
    ecx = memoryAGet32(ds, eax + 377956);
    memoryASet32(ds, eax + 377968, ebp);
    ecx <<= 16;
    memoryASet32(ds, eax + 377972, ecx);
    esi = memoryAGet32(ds, eax + 377968);
    ecx = memoryAGet32(ds, eax + 377964);
    ebp = memoryAGet32(ds, eax + 377972);
    ecx -= esi;
    ebp += ecx;
    memoryASet32(ds, eax + 377972, ebp);
loc_23dab: // 0160:23dab
    ebx++;
    edx += 0x00000004;
    if ((int32_t)ebx < (int32_t)0x00000004)
        goto loc_23d1a;
    goto loc_1f2f9;
}
void sub_23dbd() // 0160:23dbd +long
{
    esp -= 4;
    goto loc_23dbd;
loc_1f2f6: // 0160:1f2f6
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19133 bytes
loc_23dbd: // 0160:23dbd
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    edi = esp;
    esi = 0x0001e604;
    movsw<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_21a9c();
    edx = memoryAGet32(ds, 0x5c64c);
    ecx = 0;
    if (!edx)
        goto loc_23e35;
    if (memoryAGet32(ds, 0x5c654) == 0x00000023)
        goto loc_23e35;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_23df4;
    edx ^= eax;
loc_23df4: // 0160:23df4
    if ((int32_t)edx <= (int32_t)0x00001734)
        goto loc_23e01;
    edx = 0x00001734;
loc_23e01: // 0160:23e01
    if ((int32_t)edx <= (int32_t)0x0000003b)
        goto loc_23e16;
    ebx = 0x0000003c;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    goto loc_23e1b;
loc_23e16: // 0160:23e16
    ecx = 0x00000001;
loc_23e1b: // 0160:23e1b
    ebx = 0x00000002;
    eax = esp;
    sub_1f17f();
    eax = 0;
    al = memoryAGet(ds, esp);
    if (eax != 0x00000020)
        goto loc_23e35;
    memoryASet(ds, esp, 0x30);
loc_23e35: // 0160:23e35
    if ((int32_t)ebp <= (int32_t)0xfffffff6)
        goto loc_1f2f6;
    if (!ecx)
        goto loc_23e5c;
    eax = memoryAGet32(ds, 0x5c998);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx >= (int32_t)0x00000019)
        goto loc_1f2f6;
loc_23e5c: // 0160:23e5c
    eax = 0;
    al = memoryAGet(ds, esp);
    sub_1ea04();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_23eea;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    ecx = 0x00223eb4;
    edx <<= 7;
    esi = 0x00000020;
    ecx += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = ecx + edx;
    if ((int32_t)ebp >= 0)
        goto loc_23ece;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x00102d46;
    goto loc_23ee5;
loc_23ece: // 0160:23ece
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x00102d46;
loc_23ee5: // 0160:23ee5
    sub_4483f();
loc_23eea: // 0160:23eea
    eax = 0;
    al = memoryAGet(ds, esp + 1);
    sub_1ea04();
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_1f2f6;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<4) & 0x80000000);
    edx <<= 5;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x05);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    esi = 0x00223eb4;
    edx <<= 7;
    ecx = 0x00000020;
    esi += edx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = edx;
    edx <<= 2;
    edx += eax;
    edx += edx;
    eax = esi + edx;
    if ((int32_t)ebp >= 0)
        goto loc_23f5d;
    ebx = ebp;
    ebx = -ebx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ecx = 0;
    edx <<= 6;
    ebx = ebp + 10;
    eax += edx;
    edx = 0x00102d50;
    goto loc_23f74;
loc_23f5d: // 0160:23f5d
    edx = ebp;
    edx <<= 2;
    edx += ebp;
    ebx = 0x0000000a;
    edx <<= 6;
    ecx = 0;
    edx += 0x00102d50;
loc_23f74: // 0160:23f74
    sub_4483f();
    goto loc_1f2f6;
}
void sub_23f7e() // 0160:23f7e +long
{
    esp -= 4;
    goto loc_23f7e;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19582 bytes
loc_23f7e: // 0160:23f7e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    if (memoryAGet32(ds, 0x5c998) != 0xffffffff)
        goto loc_23fa0;
    ebx = 0;
    sub_1f7e2();
    memoryASet32(ds, 0x21acc8, ebx);
    memoryASet32(ds, 0x21aefc, ebx);
loc_23fa0: // 0160:23fa0
    sub_21a9c();
    if (eax)
        goto loc_23fbc;
    if (memoryAGet32(ds, 0x21ae58) == 0x00000000)
        goto loc_23fbc;
    memoryASet32(ds, 0x21acc8, eax);
    memoryASet32(ds, 0x21aefc, eax);
loc_23fbc: // 0160:23fbc
    eax = 0;
    edx = memoryAGet32(ds, 0x21aefc);
    memoryASet32(ds, 0x21ae58, eax);
    if (edx)
        goto loc_2413c;
    ebx = memoryAGet32(ds, 0x5a5fc);
    if (ebx == 0x00000002)
        goto loc_2413c;
    if (ebx == 0x00000003)
        goto loc_2413c;
    if (memoryAGet32(ds, 0x21acc8) != 0x00000000)
        goto loc_1f2f9;
    edi = 0x00000001;
    memoryASet32(ds, 0x5ca66, edi);
    sub_23b63();
    ebp = memoryAGet32(ds, 0x5ca0e);
    ebx = eax;
    if (ebp)
        goto loc_24018;
    memoryASet32(ds, 0x5c80a, edi);
loc_24018: // 0160:24018
    if (!ebx)
        goto loc_240ad;
    edx = 0x00000002;
    ebp = 0x00000003;
    edi = memoryAGet32(ds, 0x5cd20);
    eax = 0;
    memoryASet32(ds, 0x5ca66, edx);
    edx = 0;
loc_2403a: // 0160:2403a
    esi = 0x00000001;
    cl = dl;
    esi <<= cl;
    if (!(ebx & esi))
        goto loc_24068;
    ecx = memoryAGet32(ds, eax + 2240964);
    ecx++;
    esi = memoryAGet32(ds, 0x5c650);
    memoryASet32(ds, eax + 2240964, ecx);
    if ((int32_t)ecx >= (int32_t)esi)
        goto loc_24062;
    if (!edi)
        goto loc_24068;
loc_24062: // 0160:24062
    memoryASet32(ds, 0x5ca66, ebp);
loc_24068: // 0160:24068
    edx++;
    eax += 0x00000004;
    if ((int32_t)edx < (int32_t)0x00000004)
        goto loc_2403a;
    if (memoryAGet32(ds, 0x5ca66) != 0x00000003)
        goto loc_24081;
    eax = ebx;
    sub_23cf6();
loc_24081: // 0160:24081
    if (!(bl & 0x01))
        goto loc_2408c;
    memoryASet32(ds, 0x59038, memoryAGet32(ds, 0x59038) + 1);
loc_2408c: // 0160:2408c
    if (!(bl & 0x02))
        goto loc_24097;
    memoryASet32(ds, 0x59044, memoryAGet32(ds, 0x59044) + 1);
loc_24097: // 0160:24097
    if (!(bl & 0x04))
        goto loc_240a2;
    memoryASet32(ds, 0x59050, memoryAGet32(ds, 0x59050) + 1);
loc_240a2: // 0160:240a2
    if (!(bl & 0x08))
        goto loc_240ad;
    memoryASet32(ds, 0x5905c, memoryAGet32(ds, 0x5905c) + 1);
loc_240ad: // 0160:240ad
    eax = 0x00000001;
    edx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x59004, eax);
    sub_24586();
    eax = memoryAGet32(ds, 0x21af00);
    esi = memoryAGet32(ds, 0x5c998);
    memoryASet32(ds, 0x21ae78, ecx);
    memoryASet32(ds, 0x5ca6e, eax);
    memoryASet32(ds, 0x21af00, edx);
    if (esi == 0xffffffff)
        goto loc_240ed;
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_24107;
loc_240ed: // 0160:240ed
    if (memoryAGet32(ds, 0x5cd20) == 0x00000000)
        goto loc_24100;
    memoryASet32(ds, 0x5c6e4, 0x00000005);
loc_24100: // 0160:24100
    sub_1ef62();
    goto loc_24137;
loc_24107: // 0160:24107
    eax = memoryAGet32(ds, 0x5ca66);
    if (eax < 0x00000002)
        goto loc_2411a;
    if (eax <= 0x00000002)
        goto loc_24127;
    if (eax == 0x00000003)
        goto loc_24130;
    goto loc_24137;
loc_2411a: // 0160:2411a
    if (eax != edx)
        goto loc_24137;
    eax = ebx;
    sub_21caa();
    goto loc_24137;
loc_24127: // 0160:24127
    eax = ebx;
    sub_22220();
    goto loc_24137;
loc_24130: // 0160:24130
    eax = ebx;
    sub_222f5();
loc_24137: // 0160:24137
    sub_1e720();
loc_2413c: // 0160:2413c
    eax = 0;
    goto loc_1f2f9;
}
void sub_24143() // 0160:24143 +long
{
    esp -= 4;
    push32(edx);
    push32(edi);
    edx = 0;
    edi = 0xfffffff0;
    memoryASet32(ds, 0x5a5fc, edx);
    memoryASet32(ds, 0x5cab4, edx);
    memoryASet32(ds, 0x5caac, edx);
    memoryASet32(ds, 0x5cab8, edx);
    memoryASet32(ds, 0x5a5f0, edi);
    edi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_2416d() // 0160:2416d +long
{
    esp -= 4;
    goto loc_2416d;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20077 bytes
loc_2416d: // 0160:2416d
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    memoryASet32(ds, 0x5ca52, edx);
    sub_23a18();
    al = memoryAGet32(ds, 0x59008) != 0x00000000;
    eax &= 0x000000ff;
    ecx = memoryAGet32(ds, 0x5cd20);
    memoryASet32(ds, 0x5c644, eax);
    if (!ecx)
        goto loc_241d9;
    if (memoryAGet(ds, 0x223071) != 0x00)
        goto loc_241b9;
    if (memoryAGet(ds, 0x223054) != 0x00)
        goto loc_241b9;
    if (memoryAGet(ds, 0x222f39) == 0x00)
        goto loc_241c0;
loc_241b9: // 0160:241b9
    eax = 0x00000001;
    goto loc_241c2;
loc_241c0: // 0160:241c0
    eax = 0;
loc_241c2: // 0160:241c2
    if (!eax)
        goto loc_241d9;
    esi = 0x0000001e;
    bl = 0x01;
    memoryASet32(ds, 0x5c6e4, esi);
    memoryASet(ds, 0x222f39, bl);
loc_241d9: // 0160:241d9
    edi = memoryAGet32(ds, 0x5c76f);
    if (edi)
        goto loc_242bd;
    if ((int32_t)memoryAGet32(ds, 0x5c718) < (int32_t)0x000000a8)
        goto loc_242bd;
    if (memoryAGet32(ds, 0x5c6fc) != 0x000000ff)
        goto loc_242bd;
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_2422a;
    eax = memoryAGet32(ds, 0x5ca6e);
    memoryASet32(ds, 0x21af00, eax);
    eax = memoryAGet32(ds, 0x5ca72);
    memoryASet32(ds, 0x59004, edi);
    memoryASet32(ds, 0x21ae78, eax);
loc_2422a: // 0160:2422a
    if (memoryAGet(ds, 0x222f39) == 0x00)
        goto loc_242b8;
    ecx = memoryAGet32(ds, 0x5900c);
    if (ecx)
        goto loc_242b8;
    if (memoryAGet32(ds, 0x5a5ec) != 0x00000000)
        goto loc_242b8;
    if (memoryAGet32(ds, 0x5a5fc) == 0x00000003)
        goto loc_242b8;
    memoryASet32(ds, 0x59004, 0x00000001);
    eax = memoryAGet32(ds, 0x21acd0);
    memoryASet32(ds, 0x21ac90, ecx);
    memoryASet32(ds, 0x5ca0a, eax);
    sub_24586();
    eax = memoryAGet32(ds, 0x21af00);
    edx = 0x00000001;
    memoryASet32(ds, 0x5ca6e, eax);
    memoryASet32(ds, 0x21af00, edx);
    eax = memoryAGet32(ds, 0x21ae78);
    memoryASet32(ds, 0x21ae78, ecx);
    ecx = memoryAGet32(ds, 0x5cd20);
    memoryASet32(ds, 0x5ca72, eax);
    if (!ecx)
        goto loc_242ac;
    sub_1ef62();
    goto loc_242b1;
loc_242ac: // 0160:242ac
    sub_21ec1();
loc_242b1: // 0160:242b1
    sub_1e720();
    goto loc_242bd;
loc_242b8: // 0160:242b8
    sub_23f7e();
loc_242bd: // 0160:242bd
    if (memoryAGet32(ds, 0x5c76f) != 0xffffffff)
        goto loc_242f9;
    if ((int32_t)memoryAGet32(ds, 0x5c718) < (int32_t)0x000000a8)
        goto loc_242f9;
    ebp = memoryAGet32(ds, 0x5c6fc);
    if (ebp)
        goto loc_242f9;
    sub_237ed();
    memoryASet32(ds, 0x59004, ebp);
    memoryASet32(ds, 0x21af00, ebp);
    memoryASet32(ds, 0x21ae78, ebp);
    memoryASet32(ds, 0x5c76f, ebp);
loc_242f9: // 0160:242f9
    if (memoryAGet32(ds, 0x5c76f) != 0xfffffffe)
        goto loc_24335;
    if ((int32_t)memoryAGet32(ds, 0x5c718) < (int32_t)0x000000a8)
        goto loc_24335;
    ebp = memoryAGet32(ds, 0x5c6fc);
    if (ebp)
        goto loc_24335;
    sub_23571();
    memoryASet32(ds, 0x59004, ebp);
    memoryASet32(ds, 0x21af00, ebp);
    memoryASet32(ds, 0x21ae78, ebp);
    memoryASet32(ds, 0x5c76f, ebp);
loc_24335: // 0160:24335
    if (memoryAGet32(ds, 0x5c76f) != 0xfffffffd)
        goto loc_24374;
    if ((int32_t)memoryAGet32(ds, 0x5c718) < (int32_t)0x000000a8)
        goto loc_24374;
    eax = memoryAGet32(ds, 0x5c6fc);
    ebp = memoryAGet32(ds, 0x5c700);
    if (eax != ebp)
        goto loc_24374;
    eax ^= ebp;
    edx = 0;
    memoryASet32(ds, 0x59004, eax);
    memoryASet32(ds, 0x21af00, edx);
    memoryASet32(ds, 0x21ae78, edx);
    memoryASet32(ds, 0x5c76f, edx);
loc_24374: // 0160:24374
    if (memoryAGet32(ds, 0x59004) == 0x00000000)
        goto loc_24387;
    sub_245ab();
    sub_1f7e2();
loc_24387: // 0160:24387
    sub_20271();
    al = memoryAGet32(ds, 0x5c644) != 0x00000000;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x59008, eax);
    sub_238fe();
    goto loc_1f2f9;
}
void sub_243aa() // 0160:243aa +long
{
    esp -= 4;
    push32(edx);
    sub_1eeb5();
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x5c767, edx);
    memoryASet32(ds, 0x5c76b, edx);
    memoryASet32(ds, 0x5c777, edx);
loc_243c6: // 0160:243c6
    eax += 0x00000004;
    edx = memoryAGet32(ds, eax + 688268);
    memoryASet32(ds, eax + 2268912, edx);
    if ((int32_t)eax < (int32_t)0x0000d200)
        goto loc_243c6;
    edx = pop32();
    esp += 4;
}
void sub_243de() // 0160:243de +long
{
    esp -= 4;
    goto loc_243de;
loc_1e9bb: // 0160:1e9bb
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 23069 bytes
loc_243de: // 0160:243de
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x59070);
    if (edx)
        goto loc_1e9bb;
    eax = memoryAGet32(ds, 0x217ac8);
    eax -= memoryAGet32(ds, 0x217ab0);
    ecx = memoryAGet32(ds, 0x217ab4);
    ebx = eax;
    eax = memoryAGet32(ds, 0x217ac4);
    eax -= ecx;
    if (ebx)
        goto loc_24425;
    if (eax)
        goto loc_24425;
    if (memoryAGet32(ds, 0x217ac0) != 0x00000000)
        goto loc_24425;
    if (memoryAGet32(ds, 0x217a8c) == 0x00000000)
        goto loc_24431;
loc_24425: // 0160:24425
    memoryASet32(ds, 0x5c6f4, 0x00000001);
    goto loc_24437;
loc_24431: // 0160:24431
    memoryASet32(ds, 0x5c6f4, edx);
loc_24437: // 0160:24437
    ecx = memoryAGet32(ds, 0x5c6ec);
    esi = memoryAGet32(ds, 0x5c6f0);
    ecx += ebx;
    esi += eax;
    memoryASet32(ds, 0x5c6ec, ecx);
    memoryASet32(ds, 0x5c6f0, esi);
    if ((int32_t)ecx >= 0)
        goto loc_2445f;
    ebp = 0;
    memoryASet32(ds, 0x5c6ec, ebp);
loc_2445f: // 0160:2445f
    if ((int32_t)memoryAGet32(ds, 0x5c6f0) >= (int32_t)0x00000000)
        goto loc_24470;
    edx = 0;
    memoryASet32(ds, 0x5c6f0, edx);
loc_24470: // 0160:24470
    if ((int32_t)memoryAGet32(ds, 0x5c6f0) <= (int32_t)0x000000a7)
        goto loc_24486;
    memoryASet32(ds, 0x5c6f0, 0x000000a7);
loc_24486: // 0160:24486
    if ((int32_t)memoryAGet32(ds, 0x5c6ec) <= (int32_t)0x0000013d)
        goto loc_2449c;
    memoryASet32(ds, 0x5c6ec, 0x0000013d);
loc_2449c: // 0160:2449c
    push32(0x00000140);
    push32(0x00000140);
    push32(0x0000000e);
    edx = 0x00102cb0;
    eax = 0x0017fcc0;
    push32(0x00000010);
    ecx = memoryAGet32(ds, 0x5c6f0);
    ebx = memoryAGet32(ds, 0x5c6ec);
    sub_170ca();
    goto loc_1e9bb;
}
void sub_24586() // 0160:24586 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x000000a0;
    edx = 0;
    ecx = 0x00000064;
    memoryASet32(ds, 0x21acd0, edx);
    memoryASet32(ds, 0x5c6ec, ebx);
    memoryASet32(ds, 0x5c6f0, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_245ab() // 0160:245ab +long
{
    esp -= 4;
    goto loc_245ab;
loc_1f2f9: // 0160:1f2f9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 21163 bytes
loc_245ab: // 0160:245ab
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    sub_24143();
    eax = memoryAGet32(ds, 0x22313c);
    eax -= memoryAGet32(ds, 0x5c720);
    if ((int32_t)eax <= (int32_t)0x00000019)
        goto loc_245c8;
    eax = 0;
loc_245c8: // 0160:245c8
    edx = memoryAGet32(ds, 0x22313c);
    memoryASet32(ds, 0x5c720, edx);
    edx = eax;
    eax <<= 3;
    edx += eax;
    edx <<= 5;
    ebx = 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x5c71c);
    edx = eax;
    if (!ebx)
        goto loc_24670;
    ebx = memoryAGet32(ds, 0x5c718);
    if ((int32_t)ebx >= 0)
        goto loc_24619;
    ecx = ebx + eax;
    memoryASet32(ds, 0x5c718, ecx);
    if ((int32_t)ecx <= 0)
        goto loc_24619;
    edi = 0;
    memoryASet32(ds, 0x5c718, edi);
loc_24619: // 0160:24619
    ebp = memoryAGet32(ds, 0x5c718);
    if ((int32_t)ebp >= 0)
        goto loc_2462b;
    ebx = ebp + 168;
    goto loc_24630;
loc_2462b: // 0160:2462b
    ebx = 0x000000a8;
loc_24630: // 0160:24630
    if ((int32_t)ebx <= 0)
        goto loc_24654;
    edx = 0x000000a8;
    edx -= ebx;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 6;
    edx = 0x00102cb0;
    eax += 0x00229ef4;
    sub_43116();
loc_24654: // 0160:24654
    if (memoryAGet32(ds, 0x5c718) != 0x00000000)
        goto loc_1f2f9;
    sub_243de();
    sub_231d8();
    goto loc_1f2f9;
loc_24670: // 0160:24670
    if ((int32_t)memoryAGet32(ds, 0x5c718) >= (int32_t)0x000000a8)
        goto loc_246e1;
    eax = memoryAGet32(ds, 0x5c767);
    sub_1ed81();
    esi = memoryAGet32(ds, 0x5c718);
    esi += edx;
    memoryASet32(ds, 0x5c718, esi);
    if ((int32_t)esi <= (int32_t)0x000000a8)
        goto loc_246ac;
    eax = 0x000000a8;
    memoryASet32(ds, 0x217a80, ebx);
    memoryASet32(ds, 0x5c718, eax);
loc_246ac: // 0160:246ac
    ebx = 0x000000a8;
    edx = memoryAGet32(ds, 0x5c718);
    ebx -= edx;
    if ((int32_t)ebx <= 0)
        goto loc_1f2f9;
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = 0x00102cb0;
    eax <<= 6;
    edx += eax;
    eax = 0x00229ef4;
    sub_43116();
    goto loc_1f2f9;
loc_246e1: // 0160:246e1
    sub_23390();
    goto loc_1f2f9;
}
void sub_246eb() // 0160:246eb +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax >>= 16;
    edx &= 0x0000ffff;
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x21ac54, edx);
    memoryASet32(ds, 0x21ac58, eax);
    edx = pop32();
    esp += 4;
}
void sub_24709() // 0160:24709 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x21ac54) * 0x00006255;
    esi = memoryAGet32(ds, 0x21ac58);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    edx = (int32_t)edx * (int32_t)ebx;
    edx >>= 16;
    memoryASet32(ds, 0x21ac54, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2473d() // 0160:2473d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    ebx = esi;
    eax = 0;
    edx = 0;
loc_24749: // 0160:24749
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_2476e;
    if (edx >= 0x00000010)
        goto loc_2476e;
    ecx = eax;
    ecx <<= 3;
    eax >>= 29;
    eax |= ecx;
    ecx = edx;
    ebx++;
    edx++;
    cl = memoryAGet(ds, ecx + esi);
    ecx &= 0x000000ff;
    eax ^= ecx;
    goto loc_24749;
loc_2476e: // 0160:2476e
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_24773() // 0160:24773 +long +stackDrop32
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    push32(eax);
    edi = ecx;
    if ((int32_t)edx >= 0)
        goto loc_24787;
    ecx = 0;
    edx = -edx;
    memoryASet32(ds, esp + 48, ecx);
loc_24787: // 0160:24787
    eax = memoryAGet32(ds, esp + 36);
    eax = (int32_t)eax * (int32_t)ebx;
    eax += memoryAGet32(ds, esp);
    eax += edx;
    edx = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    eax = (int32_t)eax * (int32_t)edx;
    ebx = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, esp + 28);
    eax += ebx;
    ecx = 0;
    edx += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp + 24, edx);
    goto loc_24841;
loc_247bc: // 0160:247bc
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    esi = 0;
    edx += edi;
    goto loc_2480e;
loc_247cc: // 0160:247cc
    ecx = memoryAGet32(ds, esp + 48);
    if (ecx)
        goto loc_247ee;
    cl = memoryAGet(ds, ebx);
    if (ecx == 0x00000080)
        goto loc_2480a;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_2480a;
    cl = memoryAGet(ds, ebx);
    goto loc_24808;
loc_247ee: // 0160:247ee
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_2480a;
    ecx = 0;
    cl = memoryAGet(ds, eax);
    if (ecx != 0x00000080)
        goto loc_2480a;
    cl = memoryAGet(ds, edx);
loc_24808: // 0160:24808
    memoryASet(ds, eax, cl);
loc_2480a: // 0160:2480a
    eax++;
    edx--;
    ebx++;
    esi++;
loc_2480e: // 0160:2480e
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_2481e;
    if ((int32_t)esi < 0)
        goto loc_2481e;
    if ((int32_t)esi < (int32_t)0x000003c0)
        goto loc_247cc;
loc_2481e: // 0160:2481e
    eax = memoryAGet32(ds, esp + 36);
    ebx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 24);
    esi++;
    ebx += eax;
    eax = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp, ebx);
    ecx += eax;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 24, ecx);
loc_24841: // 0160:24841
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_2485a;
    if ((int32_t)eax < 0)
        goto loc_2485a;
    if ((int32_t)eax < (int32_t)0x00000190)
        goto loc_247bc;
loc_2485a: // 0160:2485a
    esp += 0x00000008;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 32;
}
void sub_24862() // 0160:24862 +long +stackDrop28
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    esi = memoryAGet32(ds, esp + 32);
    edi = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, esp + 8, eax);
    ebp = ecx;
    eax = memoryAGet32(ds, esp + 48);
    eax = (int32_t)eax * (int32_t)ebx;
    eax += memoryAGet32(ds, esp + 8);
    eax += edx;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 44);
    eax = (int32_t)eax * (int32_t)edi;
    ecx = memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 40);
    eax += ecx;
    edx += eax;
    eax = memoryAGet32(ds, 0x590a0);
    memoryASet32(ds, esp + 36, edx);
    if (!eax)
        goto loc_248be;
    edx = memoryAGet32(ds, esp + 48);
    push32(edi);
    eax = memoryAGet32(ds, esp + 12);
    ecx = esi;
    push32(edx);
    ebx = ebp;
    edx = memoryAGet32(ds, esp + 44);
    sub_264e0();
loc_248be: // 0160:248be
    ebx = memoryAGet32(ds, esp + 44);
    ecx = memoryAGet32(ds, esp + 40);
    memoryASet32(ds, esp + 12, ebx);
    eax = ebx + esi;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, eax);
    goto loc_24925;
loc_248d6: // 0160:248d6
    if ((int32_t)eax <= 0)
        goto loc_24904;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 56))
        goto loc_24904;
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, esp + 8);
    esi = 0;
    goto loc_24900;
loc_248f0: // 0160:248f0
    if ((int32_t)edx <= 0)
        goto loc_248fc;
    if ((int32_t)edx >= (int32_t)edi)
        goto loc_248fc;
    cl = memoryAGet(ds, eax);
    memoryASet(ds, ebx, cl);
loc_248fc: // 0160:248fc
    edx++;
    ebx++;
    eax++;
    esi++;
loc_24900: // 0160:24900
    if ((int32_t)esi < (int32_t)ebp)
        goto loc_248f0;
loc_24904: // 0160:24904
    eax = memoryAGet32(ds, esp + 48);
    ebx = memoryAGet32(ds, esp + 8);
    esi = memoryAGet32(ds, esp + 12);
    ecx = memoryAGet32(ds, esp + 36);
    esi++;
    ebx += eax;
    ecx += edi;
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 36, ecx);
    memoryASet32(ds, esp + 12, esi);
loc_24925: // 0160:24925
    eax = memoryAGet32(ds, esp + 12);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp))
        goto loc_248d6;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 28;
}
void sub_24937() // 0160:24937 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 28, edx);
    goto loc_24b56;
loc_2494c: // 0160:2494c
    eax = ebx;
    edx = ebx;
    ebx = 0x0000000c;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_24b52;
    edx = memoryAGet32(ds, esp + 8);
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_24b52;
    ecx = memoryAGet32(ds, esp + 28);
    ecx <<= 2;
    if ((int32_t)memoryAGet32(ds, ecx + 1393520) <= (int32_t)0x00000000)
        goto loc_24b52;
    edx = memoryAGet32(ds, esp + 4);
    sub_24709();
    edx = memoryAGet32(ds, esp);
    edx += eax;
    eax = edx;
    eax <<= 4;
    memoryASet32(ds, esp + 24, edx);
    edx = memoryAGet32(ds, eax + 367562);
    eax = memoryAGet32(ds, eax + 367566);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp + 28);
    eax += edx;
    memoryASet32(ds, esp + 32, edx);
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_24b4a;
    esi = 0x00000190;
    eax = ecx;
    edx <<= 2;
    ebx = 0;
    edx += ecx;
    goto loc_249f0;
loc_249d5: // 0160:249d5
    ecx = memoryAGet32(ds, eax + 1393520);
    if ((int32_t)esi <= (int32_t)ecx)
        goto loc_249e1;
    esi = ecx;
loc_249e1: // 0160:249e1
    edi = memoryAGet32(ds, eax + 1393520);
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_249ed;
    ebx = edi;
loc_249ed: // 0160:249ed
    eax += 0x00000004;
loc_249f0: // 0160:249f0
    if ((int32_t)eax < (int32_t)edx)
        goto loc_249d5;
    eax = memoryAGet32(ds, esp + 32);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    eax += memoryAGet32(ds, esp + 28);
    edx = edi;
    ebp = eax + edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = 0;
    al = memoryAGet(ds, eax + ebp + 1643120);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_24a3c;
    ecx = 0x00000001;
loc_24a3c: // 0160:24a3c
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 28);
    ebp += eax;
    eax = edi + edi;
    edx = edi;
    ebp += eax;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    al = memoryAGet(ds, eax + ebp + 1643120);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_24a73;
    ecx = 0x00000001;
loc_24a73: // 0160:24a73
    eax = ebx + 2;
    eax = eax * 0x000003c0;
    eax += memoryAGet32(ds, esp + 28);
    edx = edi + edi*2;
    eax += edx;
    memoryASet32(ds, esp + 16, eax);
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += memoryAGet32(ds, esp + 16);
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    if (eax != 0x00000080)
        goto loc_24aaf;
    ecx = 0x00000001;
loc_24aaf: // 0160:24aaf
    edx = ebx + 2;
    edx = edx * 0x000003c0;
    ebp = memoryAGet32(ds, esp + 28);
    eax = 0;
    edx += ebp;
    ebp = memoryAGet32(ds, esp + 32);
    goto loc_24adb;
loc_24ac6: // 0160:24ac6
    edi = memoryAGet(ds, edx + 1643120);
    if (edi != 0x00000080)
        goto loc_24ada;
    ecx = 0x00000001;
loc_24ada: // 0160:24ada
    eax++;
loc_24adb: // 0160:24adb
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_24ae3;
    if (!ecx)
        goto loc_24ac6;
loc_24ae3: // 0160:24ae3
    if ((int32_t)ebx >= (int32_t)0x0000014e)
        goto loc_24b4a;
    eax = ebx;
    eax -= esi;
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_24b4a;
    if (ecx)
        goto loc_24b4a;
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    push32(eax);
    push32(0x00000190);
    push32(0x000003c0);
    edx = memoryAGet32(ds, esp + 32);
    eax = ebx + 4;
    push32(0x00000140);
    eax -= edx;
    push32(eax);
    ebx = memoryAGet32(ds, esp + 48);
    push32(ebx);
    ecx = memoryAGet32(ds, esp + 56);
    eax = memoryAGet32(ds, esp + 48);
    push32(0x00191270);
    eax <<= 4;
    push32(edx);
    ebx = memoryAGet32(ds, eax + 367558);
    edx = memoryAGet32(ds, eax + 367554);
    eax = 0x0007ea90;
    sub_24773();
loc_24b4a: // 0160:24b4a
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp + 28, memoryAGet32(ds, esp + 28) + eax);
loc_24b52: // 0160:24b52
    memoryASet32(ds, esp + 28, memoryAGet32(ds, esp + 28) + 1);
loc_24b56: // 0160:24b56
    ebx = memoryAGet32(ds, esp + 28);
    if ((int32_t)ebx < (int32_t)0x000003c0)
        goto loc_2494c;
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_24b6d() // 0160:24b6d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0;
    edi = 0;
    memoryASet32(ds, esp, edx);
    ebp = 0;
loc_24b7f: // 0160:24b7f
    eax = memoryAGet32(ds, esp);
    esi = ebp;
    edx = ebp;
    ebx = edi;
    memoryASet32(ds, edi + 1393520, ebp);
loc_24b8e: // 0160:24b8e
    ecx = 0;
    cl = memoryAGet(ds, eax + 1643120);
    if (ecx == 0x00000080)
        goto loc_24bc4;
    si ^= 0x0001;
    if (!esi)
        goto loc_24bbd;
    memoryASet(ds, eax + 1643120, 0x81);
    if (ebp != memoryAGet32(ds, ebx + 1393520))
        goto loc_24bc4;
    memoryASet32(ds, ebx + 1393520, edx);
    goto loc_24bc4;
loc_24bbd: // 0160:24bbd
    memoryASet(ds, eax + 1643120, 0x82);
loc_24bc4: // 0160:24bc4
    edx++;
    eax += 0x000003c0;
    if ((int32_t)edx < (int32_t)0x00000190)
        goto loc_24b8e;
    ebx = memoryAGet32(ds, esp);
    ebx++;
    edi += 0x00000004;
    memoryASet32(ds, esp, ebx);
    if ((int32_t)ebx < (int32_t)0x000003c0)
        goto loc_24b7f;
    esp += 0x00000004;
    goto loc_25878;
    // gap 3212 bytes
loc_25878: // 0160:25878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_24bec() // 0160:24bec +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = 0;
loc_24bf5: // 0160:24bf5
    ecx = edi;
    edx = 0;
    ecx &= 0x0000007f;
    goto loc_24c57;
loc_24bfe: // 0160:24bfe
    eax = edx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    if (eax != 0x00000081)
        goto loc_24c56;
    edx++;
    eax = edx * 0x000003c0;
    eax += edi;
loc_24c20: // 0160:24c20
    ebx = 0;
    bl = memoryAGet(ds, eax + 1643120);
    if (ebx == 0x00000082)
        goto loc_24c56;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_24c56;
    ebx = edx;
    ebx &= 0x0000007f;
    ebx = ebx * 0x00000140;
    ebx += esi;
    eax += 0x000003c0;
    bl = memoryAGet(ds, ecx + ebx);
    edx++;
    memoryASet(ds, eax + 1642160, bl);
    goto loc_24c20;
loc_24c56: // 0160:24c56
    edx++;
loc_24c57: // 0160:24c57
    if ((int32_t)edx < (int32_t)0x00000190)
        goto loc_24bfe;
    edi++;
    if ((int32_t)edi < (int32_t)0x000003c0)
        goto loc_24bf5;
    goto loc_25879;
    // gap 3084 bytes
loc_25879: // 0160:25879
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_24c6d() // 0160:24c6d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edi = 0;
loc_24c78: // 0160:24c78
    eax = edi;
    edx = memoryAGet32(ds, esp + 4);
    eax &= 0x0000001f;
    edx += eax;
    ebx = 0;
    memoryASet32(ds, esp + 8, edx);
    goto loc_24ce7;
loc_24c8b: // 0160:24c8b
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    edx = memoryAGet32(ds, esp);
    eax &= 0x000000ff;
    if (eax != edx)
        goto loc_24ce6;
    eax = ebx * 0x000003c0;
    edx = memoryAGet32(ds, esp + 8);
    esi = 0;
    eax += edi;
    goto loc_24cc9;
loc_24cb4: // 0160:24cb4
    eax += 0x000003c0;
    ebx++;
    esi++;
    cl = memoryAGet(ds, edx);
    edx += 0x00000140;
    memoryASet(ds, eax + 1642160, cl);
loc_24cc9: // 0160:24cc9
    if ((int32_t)esi >= (int32_t)0x00000008)
        goto loc_24cd6;
    if ((int32_t)ebx < (int32_t)0x00000190)
        goto loc_24cb4;
loc_24cd6: // 0160:24cd6
    ecx = 0;
    cl = memoryAGet(ds, eax + 1643120);
    if (ecx == 0x00000082)
        goto loc_24cb4;
loc_24ce6: // 0160:24ce6
    ebx++;
loc_24ce7: // 0160:24ce7
    if ((int32_t)ebx < (int32_t)0x00000190)
        goto loc_24c8b;
    edi++;
    if ((int32_t)edi < (int32_t)0x000003c0)
        goto loc_24c78;
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_24d00() // 0160:24d00 +long
{
    esp -= 4;
    push32(edx);
    dl = 0x80;
    eax = 0;
loc_24d05: // 0160:24d05
    eax++;
    memoryASet(ds, eax + 1643119, dl);
    if ((int32_t)eax < (int32_t)0x0005dc00)
        goto loc_24d05;
    edx = pop32();
    esp += 4;
}
void sub_24d15() // 0160:24d15 +long
{
    esp -= 4;
    push32(ecx);
    ecx = eax;
    if ((int32_t)eax < 0)
        goto loc_24d40;
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_24d40;
    if ((int32_t)edx < 0)
        goto loc_24d40;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_24d40;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet(ds, ecx + eax + 1643120, bl);
loc_24d40: // 0160:24d40
    ecx = pop32();
    esp += 4;
}
void sub_24d42() // 0160:24d42 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    if ((int32_t)eax < 0)
        goto loc_24d74;
    if ((int32_t)eax >= (int32_t)0x000003c0)
        goto loc_24d74;
    if ((int32_t)edx < 0)
        goto loc_24d74;
    if ((int32_t)edx >= (int32_t)0x00000190)
        goto loc_24d74;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 1643120);
    eax &= 0x000000ff;
    ebx = pop32();
    esp += 4;
    return;
loc_24d74: // 0160:24d74
    eax = 0;
    ebx = pop32();
    esp += 4;
}
void sub_24d78() // 0160:24d78 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    edx = 0x000003c0;
    eax = 0x00000032;
    memoryASet32(ds, esp + 8, edx);
    ecx = edx;
    memoryASet32(ds, esp + 24, edx);
    ecx ^= edx;
    edx = 0x00000064;
    sub_24709();
    edx = 0x00000167;
    memoryASet32(ds, esp + 16, eax);
    eax = 0;
    sub_24709();
    edx = eax;
    esi = 0x000000b4;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    idiv32(esi);
    ebx = 0xffffffff;
    edi = 0x00000001;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 32, ebx);
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_24dde;
    if ((int32_t)edx <= (int32_t)0x0000008c)
        goto loc_24de8;
loc_24dde: // 0160:24dde
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_24dee;
loc_24de8: // 0160:24de8
    eax = 0;
    memoryASet32(ds, esp + 20, eax);
loc_24dee: // 0160:24dee
    edx = 0x0000015e;
    eax = 0x000000fa;
    sub_24709();
    edx = 0x00000096;
    memoryASet32(ds, esp + 28, eax);
    eax = 0x00000032;
    sub_24709();
    edx = 0x00000001;
    memoryASet32(ds, esp + 36, eax);
    eax = 0xffffffff;
    sub_24709();
    edx = 0x00000032;
    memoryASet32(ds, esp + 12, eax);
    eax = 0x00000019;
    sub_24709();
    memoryASet32(ds, esp, eax);
loc_24e39: // 0160:24e39
    if ((int32_t)ecx >= (int32_t)0x000003c0)
        goto loc_250cc;
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_24e99;
    edx = 0x00000001;
    sub_24709();
    edx = eax + ebp;
    esi = 0x00000168;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = 0x000000b4;
    ebp = edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_24e89;
    if ((int32_t)edx <= (int32_t)0x0000008c)
        goto loc_24e93;
loc_24e89: // 0160:24e89
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_24e99;
loc_24e93: // 0160:24e93
    ebx = 0;
    memoryASet32(ds, esp + 20, ebx);
loc_24e99: // 0160:24e99
    edx = memoryAGet32(ds, esp + 36);
    ebx = memoryAGet32(ds, ebp * 4 + 0x50650);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = memoryAGet32(ds, esp + 28);
    esi += eax;
    if ((int32_t)ecx < 0)
        goto loc_24ffc;
    if ((int32_t)esi >= (int32_t)0x0000018f)
        goto loc_24ffc;
    edx = esi + -1;
    eax = ecx;
    sub_24d42();
    if (eax != 0x00000080)
        goto loc_25021;
    edx = esi;
    eax = ecx;
    sub_24d42();
    if (eax != 0x00000080)
        goto loc_25021;
    edx = esi + 1;
    eax = ecx;
    sub_24d42();
    if (eax != 0x00000080)
        goto loc_25021;
    if ((int32_t)esi >= (int32_t)0x0000014a)
        goto loc_24f28;
    if ((int32_t)ecx >= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_24f1e;
    memoryASet32(ds, esp + 24, ecx);
loc_24f1e: // 0160:24f1e
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ds, esp + 32))
        goto loc_24f28;
    memoryASet32(ds, esp + 32, ecx);
loc_24f28: // 0160:24f28
    if ((int32_t)esi >= (int32_t)0x0000014a)
        goto loc_24f3c;
    if (!ecx)
        goto loc_24f3c;
    if (ecx != 0x000003bf)
        goto loc_24f7c;
loc_24f3c: // 0160:24f3c
    ebx = memoryAGet32(ds, esp + 32);
    if ((int32_t)ebx <= (int32_t)0xffffffff)
        goto loc_24f7c;
    edx = memoryAGet32(ds, esp + 24);
    eax = ebx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000050)
        goto loc_24f6a;
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_24f5c;
    memoryASet32(ds, esp + 8, edx);
loc_24f5c: // 0160:24f5c
    eax = memoryAGet32(ds, esp + 32);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_24f6a;
    memoryASet32(ds, esp + 4, eax);
loc_24f6a: // 0160:24f6a
    ebx = 0x000003c0;
    eax = 0xffffffff;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 32, eax);
loc_24f7c: // 0160:24f7c
    ebx = 0x00000001;
    edx = esi;
    eax = ecx;
    sub_24d15();
    edx = memoryAGet32(ds, esp + 20);
    esi++;
    if (edx != 0x00000001)
        goto loc_24fb9;
    if (edi != 0xffffffff)
        goto loc_2501f;
    ebx = edx;
    eax = ecx;
    edx = esi;
    sub_24d15();
    edx = 0x00000064;
    eax = 0x00000032;
    edi = 0x00000001;
    goto loc_24ff1;
loc_24fb9: // 0160:24fb9
    edx = memoryAGet32(ds, esp + 16);
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_2501f;
    ebx = 0x00000001;
    edx = esi;
    eax = ecx;
    sub_24d15();
    if (edi != 0x00000001)
        goto loc_24fe2;
    edi = 0xffffffff;
    goto loc_24fe7;
loc_24fe2: // 0160:24fe2
    edi = 0x00000001;
loc_24fe7: // 0160:24fe7
    edx = 0x00000064;
    eax = 0x00000032;
loc_24ff1: // 0160:24ff1
    sub_24709();
    memoryASet32(ds, esp + 16, eax);
    goto loc_2501f;
loc_24ffc: // 0160:24ffc
    esi = memoryAGet32(ds, esp + 20);
    if (esi != 0x00000001)
        goto loc_2501f;
    if (edi != 0xffffffff)
        goto loc_2501f;
    edx = 0x00000064;
    eax = 0x00000032;
    edi = esi;
    sub_24709();
    memoryASet32(ds, esp + 16, eax);
loc_2501f: // 0160:2501f
    ecx += edi;
loc_25021: // 0160:25021
    if (memoryAGet32(ds, esp + 20) != 0x00000001)
        goto loc_25088;
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp + 36);
    esi += eax;
    memoryASet32(ds, esp + 36, esi);
    if ((int32_t)esi >= (int32_t)0x00000032)
        goto loc_25043;
    memoryASet32(ds, esp + 36, 0x00000032);
loc_25043: // 0160:25043
    if ((int32_t)memoryAGet32(ds, esp + 36) <= (int32_t)0x00000096)
        goto loc_25055;
    memoryASet32(ds, esp + 36, 0x00000096);
loc_25055: // 0160:25055
    edx = memoryAGet32(ds, esp);
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_25088;
    edx = 0x00000032;
    eax = 0x00000019;
    sub_24709();
    edx = 0x00000001;
    memoryASet32(ds, esp, eax);
    eax = 0xffffffff;
    sub_24709();
    memoryASet32(ds, esp + 12, eax);
loc_25088: // 0160:25088
    edx = 0x00000001;
    eax = 0xffffffff;
    sub_24709();
    edx = memoryAGet32(ds, esp + 28);
    edx += eax;
    memoryASet32(ds, esp + 28, edx);
    if ((int32_t)edx >= (int32_t)0x000000fa)
        goto loc_250b1;
    memoryASet32(ds, esp + 28, 0x000000fa);
loc_250b1: // 0160:250b1
    if ((int32_t)memoryAGet32(ds, esp + 28) <= (int32_t)0x0000015e)
        goto loc_24e39;
    memoryASet32(ds, esp + 28, 0x0000015e);
    goto loc_24e39;
loc_250cc: // 0160:250cc
    esp += 0x00000028;
    goto loc_25878;
    // gap 1956 bytes
loc_25878: // 0160:25878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_250d4() // 0160:250d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    edx = 0x00000030;
    eax = 0x000000c0;
loc_250e7: // 0160:250e7
    ebx = memoryAGet32(ds, eax + 1393520);
    if ((int32_t)ebx < (int32_t)0x00000064)
        goto loc_250fa;
    if ((int32_t)ebx <= (int32_t)0x0000014e)
        goto loc_25107;
loc_250fa: // 0160:250fa
    if ((int32_t)eax >= (int32_t)0x00000f00)
        goto loc_25107;
    eax += 0x00000004;
    edx++;
    goto loc_250e7;
loc_25107: // 0160:25107
    eax = edx;
    esi = 0;
    edi = 0;
    memoryASet32(ds, esp + 8, esi);
    eax <<= 2;
    ebp = edx + -1;
loc_25117: // 0160:25117
    if (esi)
        goto loc_25144;
    if ((int32_t)eax >= (int32_t)0x00000f00)
        goto loc_25144;
    ebp++;
    ebx = memoryAGet32(ds, eax + 1393524);
    eax += 0x00000004;
    edx++;
    if ((int32_t)ebx > (int32_t)0x0000016e)
        goto loc_2513a;
    if ((int32_t)ebx >= (int32_t)0x00000064)
        goto loc_25117;
loc_2513a: // 0160:2513a
    esi = ebp;
    edi = memoryAGet32(ds, eax + 1393516);
    goto loc_25117;
loc_25144: // 0160:25144
    eax = edi + 8;
    memoryASet32(ds, esp + 4, eax);
    eax = edi + -8;
    memoryASet32(ds, esp, eax);
    eax = edx;
    ebp = 0;
    eax <<= 2;
    ebx = edx + -96;
loc_2515b: // 0160:2515b
    if (!esi)
        goto loc_251b6;
    if (memoryAGet32(ds, esp + 8) != 0x00000000)
        goto loc_251b6;
    if ((int32_t)edx >= (int32_t)0x000003c0)
        goto loc_251b6;
    ebx++;
    ecx = memoryAGet32(ds, eax + 1393524);
    eax += 0x00000004;
    edx++;
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_2515b;
    if ((int32_t)ecx <= (int32_t)0x00000064)
        goto loc_2515b;
    ecx = esi + 128;
    if ((int32_t)edx >= (int32_t)ecx)
        goto loc_25192;
    esi = 0;
loc_25192: // 0160:25192
    ecx = memoryAGet32(ds, eax + 1393520);
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, esp))
        goto loc_251a3;
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_251b0;
loc_251a3: // 0160:251a3
    ebp++;
    if ((int32_t)ebp <= (int32_t)0x00000080)
        goto loc_2515b;
    esi = 0;
    goto loc_2515b;
loc_251b0: // 0160:251b0
    memoryASet32(ds, esp + 8, ebx);
    goto loc_2515b;
loc_251b6: // 0160:251b6
    if (!esi)
        goto loc_2530f;
    if (memoryAGet32(ds, esp + 8) == 0x00000000)
        goto loc_2530f;
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    edi -= 0x0000000c;
    push32(edi);
    ebp = esi + -32;
    push32(ebp);
    push32(0x00191270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x000000e0;
    eax = 0x0007ea90;
    sub_24773();
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    edi -= 0x00000010;
    push32(edi);
    ebp += 0x00000020;
    push32(ebp);
    push32(0x00191270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x000000e0;
loc_25231: // 0160:25231
    eax = 0x0007ea90;
    sub_24773();
    eax = ebp + 32;
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_25277;
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(edi);
    ebp = memoryAGet32(ds, esp + 32);
    push32(ebp);
    push32(0x00191270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000009);
    edx = 0x00000100;
    goto loc_25231;
loc_25277: // 0160:25277
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(edi);
    edx = memoryAGet32(ds, esp + 32);
    push32(edx);
    push32(0x00191270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    eax = 0x0007ea90;
    edx = 0x00000120;
    sub_24773();
    push32(0x00000000);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    eax = edi + 16;
    ebp = memoryAGet32(ds, esp + 28);
    push32(eax);
    ebp += 0x00000020;
    push32(ebp);
    push32(0x00191270);
    ecx = 0x00000020;
    ebx = 0x000000af;
    push32(0x00000019);
    edx = 0x00000120;
    eax = 0x0007ea90;
    sub_24773();
    edx = esi + -8;
    ebx = ebp;
    eax = edx;
    ebx <<= 2;
    eax <<= 2;
    goto loc_25304;
loc_252fa: // 0160:252fa
    eax += 0x00000004;
    edx++;
    memoryASet32(ds, eax + 1393516, edi);
loc_25304: // 0160:25304
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_2530f;
    if ((int32_t)eax < (int32_t)0x00000f00)
        goto loc_252fa;
loc_2530f: // 0160:2530f
    esp += 0x00000010;
    goto loc_25878;
    // gap 1377 bytes
loc_25878: // 0160:25878
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_25317() // 0160:25317 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    memoryASet32(ds, esp + 4, edx);
    ebp = ebx;
    edx = 0;
    eax = 0;
    memoryASet16(ds, 0x21ac52, dx);
    edx = 0x00000380;
loc_25336: // 0160:25336
    sub_30c85();
    ecx = eax + 32;
    ebx = ecx;
    ebx <<= 2;
    edx = memoryAGet32(ds, ebx + 1393520);
    if ((int32_t)edx < (int32_t)0x00000020)
        goto loc_25356;
    if ((int32_t)edx <= (int32_t)0x0000014e)
        goto loc_2535f;
loc_25356: // 0160:25356
    edx = 0x00000380;
    eax = 0;
    goto loc_25336;
loc_2535f: // 0160:2535f
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
    if (!ebp)
        goto loc_2557f;
    ebx = 0x0000016e;
    if (ecx >= 0x000003c0)
        goto loc_253be;
    edx = 0;
    eax = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    ax = memoryAGet16(ds, esi + 918288);
    edx &= eax;
    eax = ecx + 351360;
    esi += 0x0002ae40;
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_25429;
loc_253be: // 0160:253be
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_253cc: // 0160:253cc
    eax = ebx;
    ebx--;
    if ((int32_t)eax <= 0)
        goto loc_253cc;
    if (ecx >= 0x000003c0)
        goto loc_253cc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_253cc;
loc_25429: // 0160:25429
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
loc_25437: // 0160:25437
    eax = ebx;
    ebx--;
    if ((int32_t)eax <= 0)
        goto loc_25494;
    if (ecx >= 0x000003c0)
        goto loc_25494;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx--;
    ax = memoryAGet16(ds, esi + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx--;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_25437;
loc_25494: // 0160:25494
    eax = ebx + -5;
    ebx += 0x00000003;
    if ((int32_t)eax <= 0)
        goto loc_255da;
    if (ecx >= 0x000003c0)
        goto loc_255da;
    esi = ebx + -8;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = eax + eax;
    ax = memoryAGet16(ds, edx + ebp + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    ebp = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    ebp &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_255da;
    esi = edx;
    ebx = 0;
loc_25520: // 0160:25520
    eax = ebx;
    ebx++;
    if ((int32_t)eax <= 0)
        goto loc_25520;
    if (ecx >= 0x000003c0)
        goto loc_25520;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ebx++;
    ax = memoryAGet16(ds, esi + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_255da;
    goto loc_25520;
loc_2557f: // 0160:2557f
    ebx = 0;
loc_25581: // 0160:25581
    eax = ebx;
    ebx++;
    if ((int32_t)eax <= 0)
        goto loc_25581;
    if (ecx >= 0x000003c0)
        goto loc_25581;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebx++;
    edx &= eax;
    eax = ebx * 0x000003c0;
    ebx++;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_25581;
loc_255da: // 0160:255da
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, edi, ecx);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_255ea() // 0160:255ea +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0;
    ebx = 0;
    edi = eax;
    goto loc_25661;
loc_25618: // 0160:25618
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2565b;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2565b;
    ecx = 0x00000001;
loc_2565b: // 0160:2565b
    ebx += 0x000000ac;
loc_25661: // 0160:25661
    if ((int32_t)ebx >= (int32_t)0x00000ac0)
        goto loc_2566d;
    if (!ecx)
        goto loc_25618;
loc_2566d: // 0160:2566d
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_25674() // 0160:25674 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0x00000008;
    ecx = esi + 7680;
    edi = eax + eax;
loc_25692: // 0160:25692
    if ((int32_t)ebx >= (int32_t)0x0000014e)
        goto loc_256fa;
    if ((int32_t)ebx <= 0)
        goto loc_256e4;
    if (esi >= 0x000003c0)
        goto loc_256e4;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_256eb;
loc_256e4: // 0160:256e4
    eax = 0x00000001;
    goto loc_256ed;
loc_256eb: // 0160:256eb
    eax = 0;
loc_256ed: // 0160:256ed
    if (!eax)
        goto loc_256fa;
    ecx += 0x000003c0;
    ebx++;
    goto loc_25692;
loc_256fa: // 0160:256fa
    if ((int32_t)ebx < (int32_t)0x0000014e)
        goto loc_25707;
    ebx = 0xffffffff;
loc_25707: // 0160:25707
    eax = ebx;
    goto loc_25879;
    // gap 363 bytes
loc_25879: // 0160:25879
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2570e() // 0160:2570e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, 0x5c648);
    edx = 0;
    ecx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
    if (!esi)
        goto loc_257c5;
    edi = 0;
    ebp = 0;
loc_25734: // 0160:25734
    esi = ebp;
loc_25736: // 0160:25736
    edx = esp;
    eax = esp + 4;
    ebx = ecx;
    sub_25317();
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edx <<= 9;
    eax <<= 9;
    cl ^= 0x01;
    sub_255ea();
    if (!eax)
        goto loc_25766;
    eax = esi;
    esi++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_25736;
loc_25766: // 0160:25766
    if ((int32_t)esi >= (int32_t)0x00000200)
        goto loc_257a4;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, edi + 2201958, eax);
    eax = memoryAGet32(ds, esp);
    eax -= 0x00000002;
    eax <<= 9;
    memoryASet32(ds, edi + 2201962, eax);
    eax = memoryAGet32(ds, edi + 2201958);
    memoryASet32(ds, edi + 2201966, eax);
    eax = memoryAGet32(ds, edi + 2201962);
    memoryASet32(ds, edi + 2201970, eax);
    goto loc_257ae;
loc_257a4: // 0160:257a4
    memoryASet32(ds, 0x5a306, 0x00000001);
loc_257ae: // 0160:257ae
    edi += 0x000000ac;
    if (edi == 0x00000ac0)
        goto loc_25875;
    goto loc_25734;
loc_257c5: // 0160:257c5
    edi = 0x00000020;
    ebp = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edi);
    edi = 0x000002b0;
    goto loc_25853;
loc_257dc: // 0160:257dc
    edx = ebx;
    ecx = edi;
loc_257e0: // 0160:257e0
    memoryASet32(ds, esp, 0xffffffff);
loc_257e7: // 0160:257e7
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000000)
        goto loc_25806;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_25806;
    sub_25674();
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
    goto loc_257e7;
loc_25806: // 0160:25806
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)0x000003a0)
        goto loc_25827;
    eax <<= 9;
    memoryASet32(ds, edx + 2201958, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    esi++;
    memoryASet32(ds, edx + 2201962, eax);
loc_25827: // 0160:25827
    eax = memoryAGet32(ds, esp + 4);
    eax += 0x00000018;
    edx += 0x000000ac;
    memoryASet32(ds, esp + 4, eax);
    if (edx != ecx)
        goto loc_257e0;
    edx = eax + 128;
    edi += 0x000002b0;
    ebx += 0x000002b0;
    ebp++;
    memoryASet32(ds, esp + 4, edx);
loc_25853: // 0160:25853
    if ((int32_t)ebp >= (int32_t)0x00000004)
        goto loc_25866;
    if ((int32_t)memoryAGet32(ds, esp + 4) < (int32_t)0x000003c0)
        goto loc_257dc;
loc_25866: // 0160:25866
    if (esi == 0x00000010)
        goto loc_25875;
    memoryASet32(ds, 0x5a306, 0x00000001);
loc_25875: // 0160:25875
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2587f() // 0160:2587f +long
{
    esp -= 4;
    goto loc_2587f;
loc_25875: // 0160:25875
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2587f: // 0160:2587f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = 0;
    esi = 0;
    ebp = 0;
    goto loc_25997;
loc_25893: // 0160:25893
    ecx = ebp;
loc_25895: // 0160:25895
    edx = esp;
    eax = esp + 4;
    ebx = ebp;
    sub_25317();
    ebx = memoryAGet32(ds, esp);
    ebx -= 0x00000002;
    eax = memoryAGet32(ds, esp + 4);
    edx = ebx;
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp, ebx);
    sub_255ea();
    if (eax)
        goto loc_2593e;
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    sub_2d152();
    if (eax)
        goto loc_2593e;
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_2594c;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_2594c;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebx = memoryAGet32(ds, esp);
    edx &= eax;
    eax = ebx * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2594c;
loc_2593e: // 0160:2593e
    eax = ecx;
    ecx++;
    if ((int32_t)eax < (int32_t)0x00000200)
        goto loc_25895;
loc_2594c: // 0160:2594c
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_2598d;
    memoryASet32(ds, esi + 2201086, ebp);
    memoryASet32(ds, esi + 2201090, ebp);
    memoryASet32(ds, esi + 2201094, ebp);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2201098, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 2201070, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esi + 2201102, ebp);
    eax <<= 9;
    memoryASet32(ds, esi + 2201074, eax);
    goto loc_25993;
loc_2598d: // 0160:2598d
    memoryASet32(ds, esi + 2201070, ebp);
loc_25993: // 0160:25993
    esi += 0x00000024;
    edi++;
loc_25997: // 0160:25997
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x5c6d4))
        goto loc_25893;
    goto loc_25875;
}
void sub_259a8() // 0160:259a8 +long
{
    esp -= 4;
    push32(edx);
    eax = 0x0005a000;
    dl = 0x80;
loc_259b0: // 0160:259b0
    eax++;
    memoryASet(ds, eax + 1643119, dl);
    if ((int32_t)eax < (int32_t)0x0005dc00)
        goto loc_259b0;
    edx = pop32();
    esp += 4;
}
void sub_259eb() // 0160:259eb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    push32(ebp);
    sub_246eb();
    edx = 0x00000001;
    eax = 0;
    sub_24709();
    edx = 0x00000003;
    eax = 0;
    sub_24709();
    edx = 0x00000003;
    eax = 0;
    sub_24709();
    edx = 0x00000009;
    eax = 0;
    sub_24709();
    edx = memoryAGet32(ds, 0x5a30a);
    memoryASet32(ds, 0x217aa8, eax);
    if ((int32_t)edx < 0)
        goto loc_25a42;
    if ((int32_t)edx < 0)
        goto loc_25c68;
    if (eax != edx)
        goto loc_25c68;
loc_25a42: // 0160:25a42
    sub_10a14();
    sub_24d00();
    sub_24d78();
    sub_24b6d();
    eax = 0x0007ea90;
    edx = 0x00000081;
    sub_24bec();
    eax = 0x00088a90;
    sub_24c6d();
    edx = 0x00000082;
    eax = 0x00088ab0;
    edi = 0x0000003d;
    sub_24c6d();
    eax = memoryAGet32(ds, 0x217aa8);
    memoryASet32(ds, 0x21ad44, edi);
    if (eax > 0x00000009)
        goto loc_25c4a;
    switch (eax)
    {
        case 0: goto loc_25add;
        case 1: goto loc_25b05;
        case 2: goto loc_25a9f;
        case 3: goto loc_25b34;
        case 4: goto loc_25b54;
        case 5: goto loc_25b74;
        case 6: goto loc_25b99;
        case 7: goto loc_25bb9;
        case 8: goto loc_25bed;
        case 9: goto loc_25c0d;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:25a97");
    }
loc_25a9f: // 0160:25a9f
    ebx = 0x00000007;
    edx = 0x00000002;
    eax = 0x00000030;
    ecx = 0;
    sub_24937();
    ecx = 0x00000008;
    ebx = 0x00000003;
    edx = 0x00000004;
    eax = 0x00000080;
    sub_24937();
    memoryASet32(ds, 0x21ad44, 0x00000028);
    goto loc_25c4a;
loc_25add: // 0160:25add
    ecx = 0x0000000c;
    ebx = 0x00000005;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x00000012;
loc_25afb: // 0160:25afb
    ebx = 0x00000005;
    goto loc_25bdc;
loc_25b05: // 0160:25b05
    ecx = 0x00000018;
    ebx = 0x00000005;
    edx = 0x00000004;
    eax = 0x00000060;
    sub_24937();
    ecx = 0x0000001e;
loc_25b23: // 0160:25b23
    ebx = 0x00000005;
    eax = 0x0000000c;
    edx = ebx;
    goto loc_25be6;
loc_25b34: // 0160:25b34
    ecx = 0x00000024;
    ebx = 0x00000005;
    edx = 0x00000004;
    eax = 0x00000060;
    sub_24937();
    ecx = 0x0000002a;
    goto loc_25b23;
loc_25b54: // 0160:25b54
    ecx = 0x00000030;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x00000039;
    goto loc_25afb;
loc_25b74: // 0160:25b74
    ecx = 0x0000003f;
    ebx = 0x00000006;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x00000046;
loc_25b92: // 0160:25b92
    ebx = 0x00000001;
    goto loc_25bdc;
loc_25b99: // 0160:25b99
    ecx = 0x00000048;
    ebx = 0x00000006;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x0000004f;
    goto loc_25b92;
loc_25bb9: // 0160:25bb9
    ecx = 0x00000051;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x0000005a;
loc_25bd7: // 0160:25bd7
    ebx = 0x00000002;
loc_25bdc: // 0160:25bdc
    edx = 0x00000004;
    eax = 0x0000000c;
loc_25be6: // 0160:25be6
    sub_24937();
    goto loc_25c4a;
loc_25bed: // 0160:25bed
    ecx = 0x0000005d;
    ebx = 0x00000008;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x00000066;
    goto loc_25bd7;
loc_25c0d: // 0160:25c0d
    ecx = 0x00000069;
    ebx = 0x00000005;
    edx = 0x00000003;
    eax = 0x00000040;
    sub_24937();
    ecx = 0x0000006f;
    ebx = 0x00000001;
    edx = 0x00000004;
    eax = 0x0000000c;
    ebp = 0x00000028;
    sub_24937();
    memoryASet32(ds, 0x21ad44, ebp);
loc_25c4a: // 0160:25c4a
    edx = 0;
    memoryASet32(ds, 0x5a306, edx);
    sub_250d4();
    sub_259a8();
    sub_2570e();
    sub_2587f();
    goto loc_25c72;
loc_25c68: // 0160:25c68
    memoryASet32(ds, 0x5a306, 0x00000001);
loc_25c72: // 0160:25c72
    ebp = pop32();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_25c78() // 0160:25c78 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, 0x5a5fc, edx);
    memoryASet32(ds, 0x5cab4, edx);
    memoryASet32(ds, 0x5caac, edx);
    memoryASet32(ds, 0x5cab8, edx);
    memoryASet32(ds, 0x5a5f0, edx);
    memoryASet32(ds, 0x5a5f4, edx);
    memoryASet32(ds, 0x5caa8, edx);
    edx = 0x0005ea90;
    memoryASet32(ds, 0x590a0, ebx);
    memoryASet32(ds, 0x239f20, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_25cbc() // 0160:25cbc +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x217aa8);
    if (edx != 0x00000002)
        goto loc_25cd8;
    sub_1730a();
    edx = eax;
    eax = 0x00000041;
    goto loc_25cf7;
loc_25cd8: // 0160:25cd8
    if (edx != 0x00000003)
        goto loc_25ceb;
    sub_1730a();
    edx = eax;
    eax = 0x00000040;
    goto loc_25cf7;
loc_25ceb: // 0160:25ceb
    sub_1730a();
    edx = eax;
    eax = 0x0000000e;
loc_25cf7: // 0160:25cf7
    sub_36a16();
    ebx = pop32();
    esp += 4;
}
void sub_25cfe() // 0160:25cfe +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x217aa8);
    if (edx != 0x00000002)
        goto loc_25d1a;
    sub_1736c();
    edx = eax;
    eax = 0x00000041;
    goto loc_25d39;
loc_25d1a: // 0160:25d1a
    if (edx != 0x00000003)
        goto loc_25d2d;
    sub_1736c();
    edx = eax;
    eax = 0x00000040;
    goto loc_25d39;
loc_25d2d: // 0160:25d2d
    sub_1736c();
    edx = eax;
    eax = 0x0000000e;
loc_25d39: // 0160:25d39
    sub_36a16();
    ebx = pop32();
    esp += 4;
}
void sub_25d40() // 0160:25d40 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
loc_25d43: // 0160:25d43
    eax += 0x00000002;
    edx = 0;
    memoryASet16(ds, eax + 742606, dx);
    if (eax != 0x0002ee00)
        goto loc_25d43;
    eax = 0;
loc_25d58: // 0160:25d58
    eax += 0x00000010;
    edx = 0;
    memoryASet32(ds, eax + 742336, edx);
    if (eax != 0x00000100)
        goto loc_25d58;
    edx = pop32();
    esp += 4;
}
void sub_25d6c() // 0160:25d6c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    push32(eax);
    push32(ebx);
    eax = ecx;
    ebx = memoryAGet32(ds, esp + 4);
    ebx <<= 4;
    memoryASet32(ds, ebx + 742352, 0x00000001);
    memoryASet32(ds, ebx + 742356, edx);
    memoryASet32(ds, ebx + 742364, eax);
    ecx = memoryAGet32(ds, esp);
    esi = 0x00000001;
    memoryASet32(ds, ebx + 742360, ecx);
    cl = memoryAGet(ds, esp + 4);
    ebx = 0x00000010;
    esi <<= cl;
    if ((int32_t)eax >= 0)
        goto loc_25dc0;
    ecx = eax;
    ebx += eax;
    eax <<= 2;
    eax += ecx;
    eax <<= 6;
    edx -= eax;
    eax = 0;
loc_25dc0: // 0160:25dc0
    ecx = eax + ebx;
    if ((int32_t)ecx <= (int32_t)0x00000190)
        goto loc_25dd3;
    ecx -= 0x00000190;
    ebx -= ecx;
loc_25dd3: // 0160:25dd3
    ebp = 0x00000010;
    ecx = memoryAGet32(ds, esp);
    ecx += ebp;
    if ((int32_t)ecx <= (int32_t)0x000003c0)
        goto loc_25df7;
    ebp = memoryAGet32(ds, esp);
    ecx = 0x00000010;
    ebp -= 0x000003b0;
    ecx -= ebp;
    ebp = ecx;
loc_25df7: // 0160:25df7
    if (edx < 0x001167b0)
        goto loc_25eaf;
    if (edx >= 0x001527b0)
        goto loc_25eaf;
    ecx = memoryAGet32(ds, esp);
    if ((int32_t)ecx >= 0)
        goto loc_25e21;
    edi = ecx;
    ebp += ecx;
    edi ^= ecx;
    edx += ecx;
    memoryASet32(ds, esp, edi);
loc_25e21: // 0160:25e21
    ecx = 0x00155270;
    edx -= 0x001167b0;
    memoryASet32(ds, esp + 32, eax);
    ecx += edx;
    eax += ebx;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, ecx);
    memoryASet32(ds, esp + 8, eax);
    ebp += edx;
    goto loc_25e80;
loc_25e43: // 0160:25e43
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_25e63;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, eax * 2 + 0xb54d0, memoryAGet16(ds, eax * 2 + 0xb54d0) | si);
loc_25e63: // 0160:25e63
    ecx--;
    ebx++;
loc_25e65: // 0160:25e65
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_25e43;
    ebx = memoryAGet32(ds, esp + 24);
    ecx = memoryAGet32(ds, esp + 32);
    ebx += 0x00000140;
    ecx++;
    memoryASet32(ds, esp + 24, ebx);
    memoryASet32(ds, esp + 32, ecx);
loc_25e80: // 0160:25e80
    eax = memoryAGet32(ds, esp + 32);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_25f44;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    ecx = ebx;
    ecx = -ecx;
    ecx += 0x0000000f;
    ecx += memoryAGet32(ds, esp + 24);
    ecx += ebx;
    goto loc_25e65;
loc_25eaf: // 0160:25eaf
    edi = memoryAGet32(ds, esp);
    if ((int32_t)edi >= 0)
        goto loc_25ec1;
    ecx = edi;
    ebp += edi;
    ecx ^= edi;
    edx -= edi;
    memoryASet32(ds, esp, ecx);
loc_25ec1: // 0160:25ec1
    edi = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, eax);
    memoryASet32(ds, esp + 16, edi);
    eax += ebx;
    ebp += edi;
    memoryASet32(ds, esp + 12, eax);
    goto loc_25f3a;
loc_25eda: // 0160:25eda
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000001e0;
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 20);
    ecx = ebx + eax;
    eax = memoryAGet32(ds, esp + 16);
    eax = -eax;
    ecx += eax;
    goto loc_25f1f;
loc_25efd: // 0160:25efd
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (eax == 0x00000080)
        goto loc_25f1d;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += edi;
    memoryASet16(ds, eax * 2 + 0xb54d0, memoryAGet16(ds, eax * 2 + 0xb54d0) | si);
loc_25f1d: // 0160:25f1d
    ecx++;
    ebx++;
loc_25f1f: // 0160:25f1f
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_25efd;
    edx = memoryAGet32(ds, esp + 20);
    ebx = memoryAGet32(ds, esp + 28);
    edx += 0x00000140;
    ebx++;
    memoryASet32(ds, esp + 20, edx);
    memoryASet32(ds, esp + 28, ebx);
loc_25f3a: // 0160:25f3a
    eax = memoryAGet32(ds, esp + 28);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_25eda;
loc_25f44: // 0160:25f44
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_25f4b() // 0160:25f4b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    esi <<= 4;
    if (memoryAGet32(ds, esi + 742352) == 0x00000000)
        goto loc_2606c;
    cl = al;
    edx = memoryAGet32(ds, esi + 742360);
    ebx = 0;
    eax = 0x00000001;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esi + 742352, ebx);
    eax <<= cl;
    esi = memoryAGet32(ds, esi + 742364);
    ecx = eax;
    eax = 0x00000010;
    ecx ^= 0x0000ffff;
    if ((int32_t)esi >= 0)
        goto loc_25f9c;
    eax += esi;
    esi = 0;
loc_25f9c: // 0160:25f9c
    edx = esi + eax;
    if ((int32_t)edx <= (int32_t)0x00000190)
        goto loc_25faf;
    edx -= 0x00000190;
    eax -= edx;
loc_25faf: // 0160:25faf
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    if ((int32_t)edx <= (int32_t)0x000003c0)
        goto loc_25fd5;
    ebx = memoryAGet32(ds, esp + 8);
    edx = 0x00000010;
    ebx -= 0x000003b0;
    edx -= ebx;
    ebx = edx;
loc_25fd5: // 0160:25fd5
    edi = memoryAGet32(ds, esp + 8);
    if ((int32_t)edi >= 0)
        goto loc_25fe5;
    edx = 0;
    ebx += edi;
    memoryASet32(ds, esp + 8, edx);
loc_25fe5: // 0160:25fe5
    eax += esi;
    edx = eax + -1;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax++;
    edx = esi;
    memoryASet32(ds, esp + 4, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 8);
    edx += ebx;
    edx--;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax + 1;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edi = 0x000b54d0;
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, esp + 8);
    eax += eax;
    ebp = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, eax);
    goto loc_26068;
loc_2604b: // 0160:2604b
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 8);
    eax += edi;
    goto loc_2605d;
loc_26056: // 0160:26056
    edx++;
    memoryASet16(ds, eax, memoryAGet16(ds, eax) & cx);
    eax += 0x00000002;
loc_2605d: // 0160:2605d
    if ((int32_t)edx < (int32_t)ebx)
        goto loc_26056;
    edi += 0x000003c0;
    esi++;
loc_26068: // 0160:26068
    if ((int32_t)esi < (int32_t)ebp)
        goto loc_2604b;
loc_2606c: // 0160:2606c
    esp += 0x0000000c;
    goto loc_2b3b3;
    // gap 21311 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_26074() // 0160:26074 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edx = 0;
    memoryASet32(ds, esp, edx);
    edx = eax * 0x000000ac;
    if (memoryAGet32(ds, edx + 2201958) == 0x00000000)
        goto loc_26135;
    if ((int32_t)memoryAGet32(ds, edx + 2201982) <= (int32_t)0x00000000)
        goto loc_260ad;
    edi = 0x00000003;
    edi -= memoryAGet32(ds, edx + 2202090);
    goto loc_260b6;
loc_260ad: // 0160:260ad
    edi = memoryAGet32(ds, edx + 2202090);
    edi += 0x0000000d;
loc_260b6: // 0160:260b6
    ebx = esi * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201966);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201970);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, ebx + 2202094);
    eax -= 0x0000000c;
    edx = memoryAGet32(ds, 0x21ac64);
    ecx += eax;
    if (esi != edx)
        goto loc_26104;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_26135;
loc_26104: // 0160:26104
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_26135;
    eax = edi + 16;
    if ((int32_t)eax <= 0)
        goto loc_26135;
    if ((int32_t)ecx >= (int32_t)0x00000190)
        goto loc_26135;
    eax = ecx + 16;
    if ((int32_t)eax <= 0)
        goto loc_26135;
    memoryASet32(ds, esp, 0x00000001);
    ebp = esi * 0x000000ac;
    ebp = memoryAGet32(ss, ebp + 2202098);
loc_26135: // 0160:26135
    edx = esi;
    edx <<= 4;
    eax = memoryAGet32(ds, esp);
    if (eax != memoryAGet32(ds, edx + 742352))
        goto loc_2615d;
    if (ebp != memoryAGet32(ds, edx + 742356))
        goto loc_2615d;
    if (edi != memoryAGet32(ds, edx + 742360))
        goto loc_2615d;
    if (ecx == memoryAGet32(ds, edx + 742364))
        goto loc_26185;
loc_2615d: // 0160:2615d
    eax = esi;
    edx = memoryAGet32(ds, esp);
    sub_25f4b();
    if (!edx)
        goto loc_26185;
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201990) != 0x00000000)
        goto loc_26185;
    ebx = edi;
    edx = ebp;
    eax = esi;
    sub_25d6c();
loc_26185: // 0160:26185
    edx = 0;
    ebx = 0;
    ecx = 0;
loc_2618b: // 0160:2618b
    if (memoryAGet32(ds, ebx + 742352) == 0x00000000)
        goto loc_261a4;
    if (memoryAGet32(ds, ecx + 2201958) != 0x00000000)
        goto loc_261a4;
    eax = edx;
    sub_25f4b();
loc_261a4: // 0160:261a4
    ebx += 0x00000010;
    edx++;
    ecx += 0x000000ac;
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_2618b;
    goto loc_2b3b0;
    // gap 20984 bytes
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_261b8() // 0160:261b8 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_261bb: // 0160:261bb
    eax = edx;
    edx++;
    sub_26074();
    if ((int32_t)edx < (int32_t)0x00000010)
        goto loc_261bb;
    edx = pop32();
    esp += 4;
}
void sub_261ca() // 0160:261ca +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    ecx = 0;
    memoryASet16(ds, 0x21ac52, cx);
    ecx = memoryAGet32(ds, esp + 12);
    push32(ecx);
    ecx = memoryAGet32(ds, esp + 12);
    esi = 0x0000ffff;
    sub_114fb();
    memoryASet16(ds, 0x21ac52, si);
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_261f8() // 0160:261f8 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = edx;
    cl = al;
    eax = 0x00000001;
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x21ac52, ax);
    if ((int32_t)ebx <= 0)
        goto loc_2627c;
    if (edx >= 0x000003c0)
        goto loc_2627c;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    edx = esi;
    ecx <<= 4;
    edx = sar32(edx, 0x1f);
    ecx -= eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2627c;
    eax = 0x00000001;
    goto loc_2627e;
loc_2627c: // 0160:2627c
    eax = 0;
loc_2627e: // 0160:2627e
    memoryASet16(ds, 0x21ac52, 0xffff);
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_2628a() // 0160:2628a +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(eax);
    eax = edx;
    edx = ebx;
    ebx = ecx;
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    esi <<= cl;
    ecx = esi;
    ecx ^= 0x0000ffff;
    memoryASet16(ds, 0x21ac52, cx);
    ecx = memoryAGet32(ds, esp + 20);
    push32(ecx);
    esi = memoryAGet32(ds, esp + 20);
    push32(esi);
    ecx = memoryAGet32(ds, esp + 20);
    sub_26d3f();
    memoryASet16(ds, 0x21ac52, 0xffff);
    esp += 0x00000004;
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_26412() // 0160:26412 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = 0x0005ea90;
    edx = 0;
    ecx = 0x00000001;
    memoryASet32(ds, 0x5caa8, edx);
    memoryASet32(ds, 0x239f20, ebx);
    memoryASet32(ds, 0x590a0, ecx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_26437() // 0160:26437 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    eax = memoryAGet32(ds, 0x5caa8);
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, 0x239f20);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    memoryASet32(ds, esp + 4, eax);
loc_26462: // 0160:26462
    edx = memoryAGet32(ds, esp + 4);
    if (!edx)
        goto loc_264d2;
    ebx = edx + -24;
    eax = memoryAGet32(ds, ebx + 2324772);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, ebx + 2324784);
    ebp = memoryAGet32(ds, ebx + 2324776);
    memoryASet32(ds, esp + 8, eax);
    eax = (int32_t)eax * (int32_t)ebp;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebx);
    ecx--;
    esi = memoryAGet32(ds, ebx + 2324768);
    edi = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esp, ecx);
    edi--;
    ebp--;
    esi += eax;
    goto loc_264b1;
loc_264a5: // 0160:264a5
    ebx--;
    cl = memoryAGet(ds, edx);
    edx--;
    memoryASet(ds, eax, cl);
    eax--;
loc_264ac: // 0160:264ac
    if ((int32_t)ebx >= 0)
        goto loc_264a5;
    ebp--;
loc_264b1: // 0160:264b1
    if ((int32_t)ebp < 0)
        goto loc_26462;
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 16);
    esi -= eax;
    eax = memoryAGet32(ds, esp + 12);
    ebx = edi;
    edx -= eax;
    eax = edi + esi;
    memoryASet32(ds, esp + 16, edx);
    edx += edi;
    goto loc_264ac;
loc_264d2: // 0160:264d2
    memoryASet32(ds, 0x590a0, edx);
    esp += 0x00000014;
    goto loc_2b3b3;
    // gap 20179 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_264e0() // 0160:264e0 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    esi = ebx;
    memoryASet32(ds, esp + 4, ecx);
    if ((int32_t)memoryAGet32(ds, 0x5caa8) > (int32_t)0x000000ff)
        goto loc_26512;
    eax = ebx + 8;
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x0006ea90;
    ecx = memoryAGet32(ds, 0x239f20);
    edx -= eax;
    if (edx >= ecx)
        goto loc_2652b;
loc_26512: // 0160:26512
    edx = 0;
    memoryASet32(ds, 0x5a5f0, edx);
    memoryASet32(ds, 0x5a5f4, edx);
    memoryASet32(ds, 0x590a0, edx);
    goto loc_265c2;
loc_2652b: // 0160:2652b
    edx = memoryAGet32(ds, 0x5caa8);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    memoryASet32(ds, eax * 8 + 0x237920, edi);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax * 8 + 0x237924, ebx);
    memoryASet32(ds, eax * 8 + 0x23791c, edx);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, eax * 8 + 0x237928, edx);
    edx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, eax * 8 + 0x23792c, edx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax * 8 + 0x237930, edx);
    eax = memoryAGet32(ds, 0x5caa8);
    eax++;
    ebp = 0;
    memoryASet32(ds, 0x5caa8, eax);
    goto loc_265bc;
loc_26580: // 0160:26580
    edx = edi;
    eax = 0;
    goto loc_26597;
loc_26586: // 0160:26586
    ebx = memoryAGet32(ds, 0x239f20);
    ecx = memoryAGet32(ds, edx);
    edx += 0x00000004;
    memoryASet32(ds, ebx + eax, ecx);
    eax += 0x00000004;
loc_26597: // 0160:26597
    if ((int32_t)eax < (int32_t)esi)
        goto loc_26586;
    eax = memoryAGet32(ds, esp + 24);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, esp + 28);
    edx = memoryAGet32(ds, 0x239f20);
    ebp++;
    edx += esi;
    ebx += eax;
    edi += ecx;
    memoryASet32(ds, 0x239f20, edx);
    memoryASet32(ds, esp, ebx);
loc_265bc: // 0160:265bc
    if ((int32_t)ebp < (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_26580;
loc_265c2: // 0160:265c2
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_265cb() // 0160:265cb +long
{
    esp -= 4;
    ah = 0;
    memoryASet(ds, 0x222f83, ah);
    memoryASet(ds, 0x222f85, ah);
    memoryASet(ds, 0x222f80, ah);
    memoryASet(ds, 0x222f88, ah);
    memoryASet(ds, 0x222f71, ah);
    memoryASet(ds, 0x222f54, ah);
    memoryASet(ds, 0x222f73, ah);
    memoryASet(ds, 0x222f74, ah);
    memoryASet(ds, 0x222f75, ah);
    memoryASet(ds, 0x222f76, ah);
    memoryASet(ds, 0x222f77, ah);
    memoryASet(ds, 0x222f78, ah);
    memoryASet(ds, 0x222f79, ah);
    memoryASet(ds, 0x222f7a, ah);
    memoryASet(ds, 0x222f7b, ah);
    memoryASet(ds, 0x222f7c, ah);
    memoryASet(ds, 0x222f8f, ah);
    memoryASet(ds, 0x222f6a, ah);
    memoryASet(ds, 0x222f70, ah);
    esp += 4;
}
void sub_26640() // 0160:26640 +long
{
    esp -= 4;
    if (!(al & 0x01))
        goto loc_2664b;
    memoryASet(ds, 0x222f83, 0x01);
loc_2664b: // 0160:2664b
    if (!(al & 0x02))
        goto loc_26656;
    memoryASet(ds, 0x222f85, 0x01);
loc_26656: // 0160:26656
    if (!(al & 0x04))
        goto loc_26661;
    memoryASet(ds, 0x222f80, 0x01);
loc_26661: // 0160:26661
    if (!(al & 0x08))
        goto loc_2666c;
    memoryASet(ds, 0x222f88, 0x01);
loc_2666c: // 0160:2666c
    if (!(al & 0x10))
        goto loc_26677;
    memoryASet(ds, 0x222f54, 0x01);
loc_26677: // 0160:26677
    if (!(al & 0x20))
        goto loc_26682;
    memoryASet(ds, 0x222f71, 0x01);
loc_26682: // 0160:26682
    if (!(al & 0x40))
        goto loc_2668d;
    memoryASet(ds, 0x222f73, 0x01);
loc_2668d: // 0160:2668d
    if (!(al & 0x80))
        goto loc_26698;
    memoryASet(ds, 0x222f74, 0x01);
loc_26698: // 0160:26698
    if (!(ah & 0x01))
        goto loc_266a4;
    memoryASet(ds, 0x222f75, 0x01);
loc_266a4: // 0160:266a4
    if (!(ah & 0x02))
        goto loc_266b0;
    memoryASet(ds, 0x222f76, 0x01);
loc_266b0: // 0160:266b0
    if (!(ah & 0x04))
        goto loc_266bc;
    memoryASet(ds, 0x222f77, 0x01);
loc_266bc: // 0160:266bc
    if (!(ah & 0x08))
        goto loc_266c8;
    memoryASet(ds, 0x222f78, 0x01);
loc_266c8: // 0160:266c8
    if (!(ah & 0x10))
        goto loc_266d4;
    memoryASet(ds, 0x222f79, 0x01);
loc_266d4: // 0160:266d4
    if (!(ah & 0x20))
        goto loc_266e0;
    memoryASet(ds, 0x222f7a, 0x01);
loc_266e0: // 0160:266e0
    if (!(ah & 0x40))
        goto loc_266ec;
    memoryASet(ds, 0x222f7b, 0x01);
loc_266ec: // 0160:266ec
    if (!(ah & 0x80))
        goto loc_266f8;
    memoryASet(ds, 0x222f7c, 0x01);
loc_266f8: // 0160:266f8
    if (!(eax & 0x00010000))
        goto loc_26706;
    memoryASet(ds, 0x222f8f, 0x01);
loc_26706: // 0160:26706
    if (!(eax & 0x00020000))
        goto loc_26714;
    memoryASet(ds, 0x222f6a, 0x01);
loc_26714: // 0160:26714
    if (!(eax & 0x00040000))
        goto loc_26722;
    memoryASet(ds, 0x222f70, 0x01);
loc_26722: // 0160:26722
    esp += 4;
    return;
}
void sub_26723() // 0160:26723 +long
{
    esp -= 4;
    push32(edx);
    dl = memoryAGet(ds, 0x222f83);
    eax = 0;
    if (!dl)
        goto loc_26735;
    eax = 0x00000001;
loc_26735: // 0160:26735
    if (memoryAGet(ds, 0x222f85) == 0x00)
        goto loc_26740;
    al |= 0x02;
loc_26740: // 0160:26740
    if (memoryAGet(ds, 0x222f80) == 0x00)
        goto loc_2674b;
    al |= 0x04;
loc_2674b: // 0160:2674b
    if (memoryAGet(ds, 0x222f88) == 0x00)
        goto loc_26756;
    al |= 0x08;
loc_26756: // 0160:26756
    if (memoryAGet(ds, 0x222f54) == 0x00)
        goto loc_26761;
    al |= 0x10;
loc_26761: // 0160:26761
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_2676c;
    al |= 0x20;
loc_2676c: // 0160:2676c
    if (memoryAGet(ds, 0x222f73) == 0x00)
        goto loc_26777;
    al |= 0x40;
loc_26777: // 0160:26777
    if (memoryAGet(ds, 0x222f74) == 0x00)
        goto loc_26782;
    al |= 0x80;
loc_26782: // 0160:26782
    if (memoryAGet(ds, 0x222f75) == 0x00)
        goto loc_2678e;
    ah |= 0x01;
loc_2678e: // 0160:2678e
    if (memoryAGet(ds, 0x222f76) == 0x00)
        goto loc_2679a;
    ah |= 0x02;
loc_2679a: // 0160:2679a
    if (memoryAGet(ds, 0x222f77) == 0x00)
        goto loc_267a6;
    ah |= 0x04;
loc_267a6: // 0160:267a6
    if (memoryAGet(ds, 0x222f78) == 0x00)
        goto loc_267b2;
    ah |= 0x08;
loc_267b2: // 0160:267b2
    if (memoryAGet(ds, 0x222f79) == 0x00)
        goto loc_267be;
    ah |= 0x10;
loc_267be: // 0160:267be
    if (memoryAGet(ds, 0x222f7a) == 0x00)
        goto loc_267ca;
    ah |= 0x20;
loc_267ca: // 0160:267ca
    if (memoryAGet(ds, 0x222f7b) == 0x00)
        goto loc_267d6;
    ah |= 0x40;
loc_267d6: // 0160:267d6
    if (memoryAGet(ds, 0x222f7c) == 0x00)
        goto loc_267e2;
    ah |= 0x80;
loc_267e2: // 0160:267e2
    if (memoryAGet(ds, 0x222f8f) == 0x00)
        goto loc_267f0;
    eax |= 0x00010000;
loc_267f0: // 0160:267f0
    if (memoryAGet(ds, 0x222f6a) == 0x00)
        goto loc_267fe;
    eax |= 0x00020000;
loc_267fe: // 0160:267fe
    if (memoryAGet(ds, 0x222f70) == 0x00)
        goto loc_2680c;
    eax |= 0x00040000;
loc_2680c: // 0160:2680c
    edx = pop32();
    esp += 4;
}
void sub_2680e() // 0160:2680e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_26723();
    if (eax != memoryAGet32(ds, 0x239f10))
        goto loc_2684d;
    edx = memoryAGet32(ds, 0x217ac8);
    if (edx != memoryAGet32(ds, 0x239f1c))
        goto loc_2684d;
    edx = memoryAGet32(ds, 0x217ac4);
    if (edx != memoryAGet32(ds, 0x239f18))
        goto loc_2684d;
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx == memoryAGet32(ds, 0x239f14))
        goto loc_2692e;
loc_2684d: // 0160:2684d
    ecx = memoryAGet32(ds, 0x21af04);
    ebx = memoryAGet32(ds, 0x5cab8);
    edx = memoryAGet32(ds, 0x217ac8);
    ebp = memoryAGet32(ds, 0x239f1c);
    ebx++;
    ecx &= 0x0fffffff;
    memoryASet32(ds, 0x5cab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x6ea8c, ecx);
    if (edx == ebp)
        goto loc_26893;
    ecx = edx;
    ebx++;
    ecx |= 0x10000000;
    memoryASet32(ds, 0x5cab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x6ea8c, ecx);
loc_26893: // 0160:26893
    edx = memoryAGet32(ds, 0x217ac4);
    if (edx == memoryAGet32(ds, 0x239f18))
        goto loc_268bd;
    ebx = memoryAGet32(ds, 0x5cab8);
    ecx = edx;
    ebx++;
    ecx |= 0x20000000;
    memoryASet32(ds, 0x5cab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x6ea8c, ecx);
loc_268bd: // 0160:268bd
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx == memoryAGet32(ds, 0x239f14))
        goto loc_268e7;
    ebx = memoryAGet32(ds, 0x5cab8);
    ecx = edx;
    ebx++;
    ecx |= 0x30000000;
    memoryASet32(ds, 0x5cab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x6ea8c, ecx);
loc_268e7: // 0160:268e7
    if (eax == memoryAGet32(ds, 0x239f10))
        goto loc_2690b;
    ebx = memoryAGet32(ds, 0x5cab8);
    ecx = eax;
    ebx++;
    ecx |= 0x40000000;
    memoryASet32(ds, 0x5cab8, ebx);
    memoryASet32(ds, ebx * 4 + 0x6ea8c, ecx);
loc_2690b: // 0160:2690b
    memoryASet32(ds, 0x239f10, eax);
    eax = memoryAGet32(ds, 0x217ac8);
    memoryASet32(ds, 0x239f1c, eax);
    eax = memoryAGet32(ds, 0x217ac4);
    memoryASet32(ds, 0x239f18, eax);
    eax = memoryAGet32(ds, 0x217ac0);
    memoryASet32(ds, 0x239f14, eax);
loc_2692e: // 0160:2692e
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_26933() // 0160:26933 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_265cb();
    eax = memoryAGet32(ds, 0x5cab8);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x5cabc))
        goto loc_26a54;
    edx = memoryAGet32(ds, 0x21af04);
    ebx = memoryAGet32(ds, eax * 4 + 0x6ea90);
    edx &= 0x0fffffff;
    if (edx != ebx)
        goto loc_26a40;
    ecx = eax + 1;
    eax = memoryAGet32(ds, ecx * 4 + 0x6ea90);
    eax &= 0xf0000000;
    memoryASet32(ds, 0x5cab8, ecx);
    if (eax != 0x10000000)
        goto loc_2699e;
    edx = memoryAGet32(ds, ecx * 4 + 0x6ea90);
    eax = ecx + 1;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x5cab8, eax);
    memoryASet32(ds, 0x239f1c, edx);
loc_2699e: // 0160:2699e
    eax = memoryAGet32(ds, 0x5cab8);
    eax = memoryAGet32(ds, eax * 4 + 0x6ea90);
    eax &= 0xf0000000;
    if (eax != 0x20000000)
        goto loc_269d4;
    edx = memoryAGet32(ds, 0x5cab8);
    eax = memoryAGet32(ds, edx * 4 + 0x6ea90);
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x5cab8, edx);
    memoryASet32(ds, 0x239f18, eax);
loc_269d4: // 0160:269d4
    eax = memoryAGet32(ds, 0x5cab8);
    eax = memoryAGet32(ds, eax * 4 + 0x6ea90);
    eax &= 0xf0000000;
    if (eax != 0x30000000)
        goto loc_26a0a;
    edx = memoryAGet32(ds, 0x5cab8);
    eax = memoryAGet32(ds, edx * 4 + 0x6ea90);
    edx++;
    eax &= 0x0fffffff;
    memoryASet32(ds, 0x5cab8, edx);
    memoryASet32(ds, 0x239f14, eax);
loc_26a0a: // 0160:26a0a
    eax = memoryAGet32(ds, 0x5cab8);
    eax = memoryAGet32(ds, eax * 4 + 0x6ea90);
    eax &= 0xf0000000;
    if (eax != 0x40000000)
        goto loc_26a40;
    eax = memoryAGet32(ds, 0x5cab8);
    edx = memoryAGet32(ds, eax * 4 + 0x6ea90);
    eax++;
    edx &= 0x0fffffff;
    memoryASet32(ds, 0x5cab8, eax);
    memoryASet32(ds, 0x239f10, edx);
loc_26a40: // 0160:26a40
    eax = memoryAGet32(ds, 0x239f14);
    memoryASet32(ds, 0x217ac0, eax);
    eax = memoryAGet32(ds, 0x239f10);
    sub_26640();
loc_26a54: // 0160:26a54
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_26a58() // 0160:26a58 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x5a5fc) != 0x00000001)
        goto loc_26ab5;
    ebx = 0;
    memoryASet32(ds, 0x5a5fc, ebx);
    sub_26412();
    sub_1039b();
    eax = memoryAGet32(ds, 0x22313c);
    edi = 0xffffffff;
    memoryASet32(ds, 0x5cab0, eax);
    memoryASet32(ds, 0x5caac, ebx);
    memoryASet32(ds, 0x5cab8, ebx);
    eax = memoryAGet32(ds, 0x21af04);
    memoryASet32(ds, 0x239f10, edi);
    memoryASet32(ds, 0x239f1c, edi);
    memoryASet32(ds, 0x239f18, edi);
    memoryASet32(ds, 0x239f14, edi);
    memoryASet32(ds, 0x5cab4, eax);
loc_26ab5: // 0160:26ab5
    if (memoryAGet32(ds, 0x5a5fc) != 0x00000002)
        goto loc_26b72;
    ecx = 0x00000003;
    edi = memoryAGet32(ds, 0x5cab4);
    memoryASet32(ds, 0x5a2fa, ecx);
    memoryASet32(ds, 0x5a5fc, ecx);
    if (!edi)
        goto loc_26b00;
    eax = memoryAGet32(ds, 0x5cab8);
    memoryASet32(ds, 0x5cabc, eax);
    if ((int32_t)eax <= (int32_t)0x00003e80)
        goto loc_26af8;
    memoryASet32(ds, 0x5cabc, 0x00003e80);
loc_26af8: // 0160:26af8
    edx = 0;
    memoryASet32(ds, 0x5cab4, edx);
loc_26b00: // 0160:26b00
    if (memoryAGet32(ds, 0x5cabc) == 0x00000000)
        goto loc_26b72;
    eax = 0;
    sub_1e93a();
    sub_103b5();
    sub_26437();
    eax = memoryAGet32(ds, 0x5cab0);
    memoryASet32(ds, 0x22313c, eax);
    esi = 0xffffffff;
    ecx = 0;
    edx = 0x00000001;
    memoryASet32(ds, 0x5cab8, ecx);
    memoryASet32(ds, 0x239f10, esi);
    memoryASet32(ds, 0x239f1c, esi);
    memoryASet32(ds, 0x239f18, esi);
    memoryASet32(ds, 0x239f14, esi);
    memoryASet32(ds, 0x5caac, edx);
    sub_1128d();
    sub_14794();
    eax = 0x000000ff;
    sub_1e93a();
    eax = memoryAGet32(ds, 0x21af04);
    memoryASet32(ds, 0x22313c, eax);
loc_26b72: // 0160:26b72
    if (memoryAGet32(ds, 0x5caac) == 0x00000000)
        goto loc_26b80;
    sub_26933();
loc_26b80: // 0160:26b80
    if (memoryAGet32(ds, 0x5cab4) == 0x00000000)
        goto loc_2b3b4;
    sub_2680e();
    goto loc_2b3b4;
    // gap 18461 bytes
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_26b97() // 0160:26b97 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x217ab0);
    eax -= memoryAGet32(ds, 0x217ac8);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_26bde;
    eax = memoryAGet32(ds, 0x217ab4);
    eax -= memoryAGet32(ds, 0x217ac4);
    eax <<= 3;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_26be8;
loc_26bde: // 0160:26bde
    memoryASet32(ds, 0x5cac0, 0x000005dc);
loc_26be8: // 0160:26be8
    edx = memoryAGet32(ds, 0x5cac0);
    if (!edx)
        goto loc_26c07;
    ebp = 0;
    eax = edx + -1;
    memoryASet32(ds, 0x21af24, ebp);
    memoryASet32(ds, 0x5cac0, eax);
    goto loc_26d31;
loc_26c07: // 0160:26c07
    if (ebx != 0x00078000)
        goto loc_26c4c;
    if (ecx)
        goto loc_26c4c;
    ecx = 0x00000001;
    esi <<= 2;
    edi <<= 2;
    esi -= 0x00000280;
    edi -= 0x000001c0;
    memoryASet32(ds, 0x21af24, ecx);
    memoryASet32(ds, 0x21af14, esi);
    esi = 0x00000032;
    memoryASet32(ds, 0x21af18, edi);
    memoryASet32(ds, 0x21aefc, esi);
    goto loc_26d27;
loc_26c4c: // 0160:26c4c
    if (ebx)
        goto loc_26c58;
    if (!ecx)
        goto loc_26d27;
loc_26c58: // 0160:26c58
    eax = memoryAGet32(ds, 0x21af14);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x21af18);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = esi;
    edx <<= 2;
    if ((int32_t)ebx <= 0)
        goto loc_26c99;
    esi -= 0x000000c0;
    if ((int32_t)esi <= (int32_t)ebp)
        goto loc_26caf;
    ebx = edx + -768;
    goto loc_26ca9;
loc_26c99: // 0160:26c99
    esi -= 0x00000080;
    if ((int32_t)esi >= (int32_t)ebp)
        goto loc_26caf;
    ebx = edx + -512;
loc_26ca9: // 0160:26ca9
    memoryASet32(ds, 0x21af14, ebx);
loc_26caf: // 0160:26caf
    ebx = edi;
    ebx <<= 2;
    if ((int32_t)ecx <= 0)
        goto loc_26cc7;
    edi -= 0x00000048;
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_26cda;
    ebx -= 0x00000120;
    goto loc_26cd4;
loc_26cc7: // 0160:26cc7
    edi -= 0x00000060;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_26cda;
    ebx -= 0x00000100;
loc_26cd4: // 0160:26cd4
    memoryASet32(ds, 0x21af18, ebx);
loc_26cda: // 0160:26cda
    if ((int32_t)memoryAGet32(ds, 0x21af14) >= (int32_t)0x00000000)
        goto loc_26ceb;
    ecx = 0;
    memoryASet32(ds, 0x21af14, ecx);
loc_26ceb: // 0160:26ceb
    if ((int32_t)memoryAGet32(ds, 0x21af14) <= (int32_t)0x00000f00)
        goto loc_26d01;
    memoryASet32(ds, 0x21af18, 0x00000f00);
loc_26d01: // 0160:26d01
    if ((int32_t)memoryAGet32(ds, 0x21af18) >= (int32_t)0x00000000)
        goto loc_26d11;
    eax = 0;
    memoryASet32(ds, 0x21af18, eax);
loc_26d11: // 0160:26d11
    if ((int32_t)memoryAGet32(ds, 0x21af18) <= (int32_t)0x00000640)
        goto loc_26d27;
    memoryASet32(ds, 0x21af18, 0x00000640);
loc_26d27: // 0160:26d27
    memoryASet32(ds, 0x21af24, 0x00000001);
loc_26d31: // 0160:26d31
    memoryASet32(ds, 0x21aefc, 0x00000032);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_26d3f() // 0160:26d3f +long +stackDrop8
{
    esp -= 4;
    goto loc_26d3f;
loc_265c5: // 0160:265c5
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 1908 bytes
loc_26d3f: // 0160:26d3f
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    edi = eax;
    esi = edx;
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, edi, ebx);
    memoryASet32(ds, edx, ecx);
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, ebp);
    edx = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, esp + 4, ebp);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ds, edx, eax);
    if ((int32_t)eax < (int32_t)0x00000008)
        goto loc_27040;
    if ((int32_t)eax > (int32_t)0x00000190)
        goto loc_27040;
    ebp -= ebx;
    eax -= ecx;
    memoryASet32(ds, esp + 32, ebp);
    memoryASet32(ds, esp + 28, eax);
    if (ebp)
        goto loc_26d91;
    if (!eax)
        goto loc_27042;
loc_26d91: // 0160:26d91
    eax = memoryAGet32(ds, esp + 32);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebp = eax;
    eax = memoryAGet32(ds, esp + 28);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_26eac;
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ecx = memoryAGet32(ds, esp + 28);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 32);
    ebp <<= 16;
    if ((int32_t)eax <= 0)
        goto loc_26de7;
    memoryASet32(ds, esp + 24, 0x00000001);
    goto loc_26def;
loc_26de7: // 0160:26de7
    memoryASet32(ds, esp + 24, 0xffffffff);
loc_26def: // 0160:26def
    eax = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esp + 24);
    eax += edx;
    memoryASet32(ds, esp + 16, eax);
loc_26dfd: // 0160:26dfd
    if (ebx == memoryAGet32(ds, esp + 16))
        goto loc_26fa8;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if ((int32_t)ecx <= 0)
        goto loc_26e92;
    if (ebx >= 0x000003c0)
        goto loc_26e92;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ecx * 0x000003c0;
    al = memoryAGet(ds, ebx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_26e92;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ebx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ecx);
loc_26e88: // 0160:26e88
    eax = 0x00000001;
    goto loc_27042;
loc_26e92: // 0160:26e92
    eax = ebp;
    memoryASet32(ds, edi, ebx);
    eax = sar32(eax, 0x10);
    ecx = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esi, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebx += ecx;
    ebp += eax;
    goto loc_26dfd;
loc_26eac: // 0160:26eac
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx;
    ebx = ecx;
    ecx = memoryAGet32(ds, esp + 32);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx <<= 16;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    edx = ecx;
    ecx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, esp + 28);
    ebp <<= 16;
    if ((int32_t)eax <= 0)
        goto loc_26ee8;
    memoryASet32(ds, esp + 20, 0x00000001);
    goto loc_26ef0;
loc_26ee8: // 0160:26ee8
    memoryASet32(ds, esp + 20, 0xffffffff);
loc_26ef0: // 0160:26ef0
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esp + 20);
    eax += edx;
    memoryASet32(ds, esp + 12, eax);
loc_26efe: // 0160:26efe
    if (ebx == memoryAGet32(ds, esp + 12))
        goto loc_26fa8;
    if ((int32_t)ebx <= 0)
        goto loc_26f8e;
    ecx = ebp;
    ecx = sar32(ecx, 0x10);
    if (ecx >= 0x000003c0)
        goto loc_26f8e;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_26f8e;
    eax = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, eax, ebx);
    goto loc_26e88;
loc_26f8e: // 0160:26f8e
    eax = ebp;
    ecx = memoryAGet32(ds, esp + 32);
    eax = sar32(eax, 0x10);
    ebp += ecx;
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esi, ebx);
    ebx += eax;
    goto loc_26efe;
loc_26fa8: // 0160:26fa8
    edx = memoryAGet32(ds, esp + 8);
    if ((int32_t)edx <= 0)
        goto loc_27040;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_27040;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax <<= 4;
    eax -= ebx;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx <<= 6;
    eax += eax;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ecx = ebx;
    ax = memoryAGet16(ds, 0x21ac52);
    ebx = memoryAGet32(ds, esp + 8);
    ecx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    esi = memoryAGet32(ds, esp + 4);
    eax <<= 6;
    eax += esi;
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ecx;
    if (!eax)
        goto loc_27040;
    edx = memoryAGet32(ds, esp + 52);
    memoryASet32(ds, edx, esi);
    edx = memoryAGet32(ds, esp + 56);
    eax = 0x00000001;
    memoryASet32(ds, edx, ebx);
    goto loc_27042;
loc_27040: // 0160:27040
    eax = 0;
loc_27042: // 0160:27042
    esp += 0x00000024;
    goto loc_265c5;
}
void sub_2704a() // 0160:2704a +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = ebx;
    ebp = ecx;
    if ((int32_t)edx >= (int32_t)0x0002fc00)
        goto loc_2719a;
    if ((int32_t)edx <= (int32_t)0xffffc000)
        goto loc_2719a;
    ebx = 0;
    eax = 0;
loc_2706f: // 0160:2706f
    if ((int32_t)eax >= (int32_t)0x000000c0)
        goto loc_27085;
    if (memoryAGet32(ds, eax + 2206594) == 0x00000000)
        goto loc_27085;
    eax += 0x00000018;
    ebx++;
    goto loc_2706f;
loc_27085: // 0160:27085
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    if (memoryAGet32(ds, eax * 8 + 0x21ab82) != 0x00000000)
        goto loc_284be;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_284be;
    if (edi)
        goto loc_270ac;
    edi = 0xffffffff;
loc_270ac: // 0160:270ac
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 8 + 0x21ab82, edi);
    memoryASet32(ds, eax * 8 + 0x21ab86, edx);
    edx = 0;
    ecx = memoryAGet32(ds, 0x5c6d8);
    memoryASet32(ds, eax * 8 + 0x21ab8a, edx);
    if (!ecx)
        goto loc_270f0;
    edx = esi;
    edx <<= 2;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    if ((int32_t)eax <= (int32_t)0x0000005a)
        goto loc_270f0;
    esi = 0x0000005a;
loc_270f0: // 0160:270f0
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 8 + 0x21ab8e, esi);
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, eax * 8 + 0x21ab92, ebp);
    memoryASet32(ds, eax * 8 + 0x21ab96, edx);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_2713e;
    eax = edi + -81920;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000037;
    sub_36a16();
    eax = edi + 81920;
    ebx = 0x000000ff;
    goto loc_2714a;
loc_2713e: // 0160:2713e
    eax = esi;
    eax <<= 2;
    eax -= esi;
    ebx = eax + 32;
    eax = edi;
loc_2714a: // 0160:2714a
    sub_1736c();
    edx = eax;
    eax = 0x00000037;
    sub_36a16();
    edi = 0;
    memoryASet32(ds, 0x21af24, edi);
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_27177;
    memoryASet32(ds, 0x21ad50, memoryAGet32(ds, 0x21ad50) + 0x00000e00);
    goto loc_284be;
loc_27177: // 0160:27177
    if ((int32_t)esi < (int32_t)0x00000020)
        goto loc_2718b;
    memoryASet32(ds, 0x21ad50, memoryAGet32(ds, 0x21ad50) + 0x00000a00);
    goto loc_284be;
loc_2718b: // 0160:2718b
    memoryASet32(ds, 0x21ad50, memoryAGet32(ds, 0x21ad50) + 0x00000400);
    goto loc_284be;
loc_2719a: // 0160:2719a
    if ((int32_t)edx <= 0)
        goto loc_271b2;
    al = (int32_t)edi > (int32_t)0x00078000;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_284be;
loc_271b2: // 0160:271b2
    edx = memoryAGet32(ds, 0x21ad50);
    ebx = 0x00000040;
    edx += 0x00000200;
    eax = edi;
    memoryASet32(ds, 0x21ad50, edx);
    sub_1736c();
    edx = eax;
    eax = 0x00000037;
    sub_36a16();
    goto loc_284be;
    // gap 4829 bytes
loc_284be: // 0160:284be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_271e1() // 0160:271e1 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x21ac60);
    edx -= 0x000000fa;
    memoryASet32(ds, 0x21ac60, edx);
    if ((int32_t)edx > 0)
        goto loc_27202;
    memoryASet32(ds, 0x21ac60, 0x00000001);
loc_27202: // 0160:27202
    edx = pop32();
    esp += 4;
}
void sub_27204() // 0160:27204 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx + -8;
    ebx = 0;
loc_2720e: // 0160:2720e
    edx = 0x00000300;
    eax = 0xfffffd00;
    sub_24709();
    edx = 0xfffffc00;
    memoryASet32(ds, ebx + 2200838, eax);
    eax = 0xfffff800;
    ebx += 0x00000018;
    sub_24709();
    memoryASet32(ds, ebx + 2200818, eax);
    memoryASet32(ds, ebx + 2200806, ecx);
    edx = 0;
    memoryASet32(ds, ebx + 2200810, esi);
    memoryASet32(ds, ebx + 2200826, edx);
    memoryASet32(ds, ebx + 2200822, edx);
    if (ebx != 0x00000078)
        goto loc_2720e;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2725e() // 0160:2725e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = 0x00000036;
    esi = edx + -8;
    ebx = 0;
loc_2726e: // 0160:2726e
    edx = 0x00000200;
    memoryASet32(ds, ebx + 2200830, ecx);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 2200834, esi);
    sub_24709();
    edx = 0xfffff800;
    memoryASet32(ds, ebx + 2200838, eax);
    eax = 0xfffff400;
    ebx += 0x00000018;
    sub_24709();
    memoryASet32(ds, ebx + 2200818, eax);
    edx = 0;
    memoryASet32(ds, ebx + 2200822, edi);
    memoryASet32(ds, ebx + 2200826, edx);
    if (ebx != 0x00000078)
        goto loc_2726e;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_272bf() // 0160:272bf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    edx = eax;
    if ((int32_t)eax >= (int32_t)0x000001e0)
        goto loc_272f1;
    ecx = 0xffffff00;
    edx = eax + 112;
    esi = 0xffffe000;
    goto loc_272fe;
loc_272f1: // 0160:272f1
    ecx = 0x00000100;
    edx = eax + -112;
    esi = 0x00002000;
loc_272fe: // 0160:272fe
    edx <<= 9;
    edi = 0x00000001;
    eax = 0;
loc_27308: // 0160:27308
    eax += 0x00000018;
    memoryASet32(ds, eax + 2200806, edx);
    memoryASet32(ds, eax + 2200810, ebx);
    memoryASet32(ds, eax + 2200814, ecx);
    ebp = 0;
    memoryASet32(ds, eax + 2200818, edi);
    ebx -= 0x00001400;
    memoryASet32(ds, eax + 2200826, ebp);
    edx += esi;
    memoryASet32(ds, eax + 2200822, ebp);
    if (eax != 0x000000c0)
        goto loc_27308;
    goto loc_2b3b3;
    // gap 16494 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_27345() // 0160:27345 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x21acd0) == 0x00000000)
        goto loc_2b3b4;
    ebx = memoryAGet32(ds, 0x59074);
    if (ebx)
        goto loc_2b3b4;
    if (memoryAGet32(ds, 0x21ad88) != 0x00000000)
        goto loc_2b3b4;
    eax = memoryAGet32(ds, 0x21acd4);
    eax -= 0x00000280;
    memoryASet32(ds, 0x21af14, eax);
    eax = memoryAGet32(ds, 0x21acd8);
    eax -= 0x00000134;
    memoryASet32(ds, 0x21af18, eax);
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    esi = eax;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = memoryAGet32(ds, 0x21ad7c);
    memoryASet32(ds, 0x21af24, ebx);
    if (!edi)
        goto loc_273d8;
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x00180e30;
    goto loc_273e8;
loc_273d8: // 0160:273d8
    push32(0x0000000e);
    ecx = 0x00000010;
    ebx = eax;
    edx = esi;
    eax = 0x0017fcb0;
loc_273e8: // 0160:273e8
    sub_17029();
    goto loc_2b3b4;
    // gap 16322 bytes
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_273f2() // 0160:273f2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    edx = memoryAGet32(ds, 0x21af00);
    ecx = memoryAGet32(ds, 0x21ac64);
    if (edx)
        goto loc_275eb;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_275eb;
    if (memoryAGet32(ds, 0x21ade4) != 0x00000000)
        goto loc_275eb;
    ebx = ecx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201994) != 0x00000000)
        goto loc_275eb;
    if (memoryAGet32(ds, 0x21accc) != 0x00000000)
        goto loc_275eb;
    if (memoryAGet32(ds, ebx + 2201950) != 0x00000000)
        goto loc_275eb;
    eax = memoryAGet32(ds, ebx + 2201954);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_275eb;
    if (memoryAGet32(ds, ebx + 2201938) != 0x00000000)
        goto loc_275eb;
    esi = memoryAGet32(ds, ebx + 2202006);
    if (!esi)
        goto loc_274c3;
    if (esi == 0x0000002b)
        goto loc_274c3;
    if (esi == 0x00000004)
        goto loc_274c3;
    if (esi == 0x00000024)
        goto loc_274c3;
    if (esi == 0x00000036)
        goto loc_274c3;
    if (esi == 0x00000010)
        goto loc_274c3;
    if (esi == 0x00000027)
        goto loc_274c3;
    if (esi == 0x0000002f)
        goto loc_274c3;
    if (esi != 0x00000038)
        goto loc_274b0;
    if (memoryAGet32(ds, 0x21ad2c) == 0x00000001)
        goto loc_274c3;
loc_274b0: // 0160:274b0
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000006)
        goto loc_275eb;
loc_274c3: // 0160:274c3
    esi = ecx * 0x000000ac;
    esi = memoryAGet32(ds, esi + 2201982);
    if (esi)
        goto loc_274d8;
    esi = 0xffffffff;
loc_274d8: // 0160:274d8
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000010)
        goto loc_27524;
    eax = memoryAGet32(ds, 0x21ac84);
    eax &= 0x000000e0;
    eax = memoryAGet32(ds, eax * 4 + 0x50bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x21ac80, eax);
    eax = memoryAGet32(ds, 0x21ac84);
    eax += 0x00000040;
    eax &= 0x000000e0;
    goto loc_2755f;
loc_27524: // 0160:27524
    eax = memoryAGet32(ds, 0x21ac84);
    eax &= 0x000000ff;
    eax = memoryAGet32(ds, eax * 4 + 0x50bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x21ac80, eax);
    eax = memoryAGet32(ds, 0x21ac84);
    eax += 0x00000040;
    eax &= 0x000000ff;
loc_2755f: // 0160:2755f
    eax = memoryAGet32(ds, eax * 4 + 0x50bf0);
    ebx = eax;
    ebx <<= 4;
    ebx -= eax;
    ebx += ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)esi;
    memoryASet32(ds, 0x21ac7c, eax);
    ebx = ecx * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 4;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, ebx + 2201982);
    eax -= 0x00000006;
    if ((int32_t)ebp > 0)
        goto loc_275c5;
    ecx -= 0x00000008;
loc_275c5: // 0160:275c5
    push32(0x00000006);
    edx = memoryAGet32(ds, 0x21ac7c);
    ebx = memoryAGet32(ds, 0x21ac80);
    ecx += edx;
    eax -= ebx;
    edx = ecx + -3;
    ebx = eax;
    ecx = 0x00000006;
    eax = 0x0016d6f0;
    sub_17029();
loc_275eb: // 0160:275eb
    ecx = 0;
    memoryASet32(ds, 0x21ade4, ecx);
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_275f9() // 0160:275f9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x21ad24) == 0x00000000)
        goto loc_2762b;
    if (memoryAGet32(ds, 0x21ad1c) == 0x00000000)
        goto loc_2762b;
    push32(0x00000006);
    ecx = 0x00000006;
    eax = 0x0016d6f8;
    ebx = memoryAGet32(ds, 0x21ad20);
    edx = memoryAGet32(ds, 0x21ad1c);
    sub_17029();
loc_2762b: // 0160:2762b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2762f() // 0160:2762f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x21ace4);
    if (!edx)
        goto loc_27664;
    ebx = 0x00000032;
    ecx = edx + 2;
    memoryASet32(ds, 0x21aefc, ebx);
    memoryASet32(ds, 0x21ace4, ecx);
    if ((int32_t)ecx <= (int32_t)0x00000040)
        goto loc_27664;
    edi = 0;
    memoryASet32(ds, 0x21ace4, edi);
    memoryASet32(ds, 0x21acc0, edi);
loc_27664: // 0160:27664
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_27669() // 0160:27669 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x21ace4) == 0x00000000)
        goto loc_276c9;
    eax = memoryAGet32(ds, 0x21ace0);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21acdc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, 0x21ace4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000005);
    edx = memoryAGet32(ds, 0x21ace8);
    eax <<= 4;
    ecx = 0x00000010;
    eax += edx;
    edx = esi;
    sub_17029();
loc_276c9: // 0160:276c9
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_276ce() // 0160:276ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = memoryAGet32(ds, 0x21a552);
    edx = 0;
    if (ebx)
        goto loc_2b3b3;
    esi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21a572, eax);
    eax = esi * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201982) != 0x00000001)
        goto loc_2770d;
    eax = memoryAGet32(ds, eax + 2201958);
    eax += 0x00000c00;
    goto loc_27718;
loc_2770d: // 0160:2770d
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000c00;
loc_27718: // 0160:27718
    memoryASet32(ds, 0x21a552, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = memoryAGet32(ds, eax + 2201962);
    eax = edx;
    eax <<= 3;
    eax += edx;
    esi -= 0x00001800;
    memoryASet32(ds, eax * 4 + 0x21a556, esi);
    ebx = memoryAGet32(ds, 0x21ac88);
    memoryASet32(ds, eax * 4 + 0x21a56e, ebx);
    if (ecx != 0x00000004)
        goto loc_2775d;
    memoryASet32(ds, 0x21ae90, 0x0000007d);
loc_2775d: // 0160:2775d
    ebx = edx;
    ebx <<= 3;
    ebx += edx;
    ebx <<= 2;
    if (ecx != 0x0000000b)
        goto loc_27820;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201982) != 0x00000001)
        goto loc_27790;
    eax = memoryAGet32(ds, eax + 2201958);
    eax += 0x00000600;
    goto loc_2779b;
loc_27790: // 0160:27790
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000600;
loc_2779b: // 0160:2779b
    memoryASet32(ds, ebx + 2205010, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 2201962);
    eax = edx;
    eax <<= 3;
    eax += edx;
    ecx -= 0x00000800;
    ebp = 0x001642b0;
    memoryASet32(ds, eax * 4 + 0x21a556, ecx);
    memoryASet32(ds, eax * 4 + 0x21a56a, ebp);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, ebx + 2201982);
    memoryASet32(ds, eax * 4 + 0x21a562, ebx);
    ebx = memoryAGet32(ds, 0x21ad44);
    esi = 0x000000fa;
    ebx = -ebx;
    memoryASet32(ds, eax * 4 + 0x21a56e, esi);
    memoryASet32(ds, eax * 4 + 0x21a566, ebx);
    eax = edx;
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000026;
    sub_36a16();
    goto loc_2b3b3;
loc_27820: // 0160:27820
    ecx = 0x0016d6e0;
    esi = memoryAGet32(ds, 0x5cc68);
    memoryASet32(ds, ebx + 2205034, ecx);
    if (!esi)
        goto loc_27841;
    eax = edx;
    sub_34827();
    goto loc_2b3b3;
loc_27841: // 0160:27841
    eax = memoryAGet32(ds, 0x21ac78);
    edi = memoryAGet32(ds, 0x21ac7c);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)edi;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 2205026, eax);
    eax = memoryAGet32(ds, 0x21ac78);
    ebp = memoryAGet32(ds, 0x21ac80);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)ebp;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    memoryASet32(ds, ebx + 2205030, eax);
    goto loc_2b3b3;
    // gap 15127 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_27c45() // 0160:27c45 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000034;
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 44, ecx);
    ecx = memoryAGet32(ds, ebx);
    edx = 0;
    ebx = memoryAGet32(ds, esp + 44);
    ebp = edi + -4;
    memoryASet32(ds, esp + 48, edx);
    ebx = memoryAGet32(ds, ebx);
    if ((int32_t)ebp <= 0)
        goto loc_27d2c;
    if (eax >= 0x000003c0)
        goto loc_27d2c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_27d2c;
    if ((int32_t)ebx >= 0)
        goto loc_27d2c;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax + eax;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_27df5;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
    goto loc_27df5;
loc_27d2c: // 0160:27d2c
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_27dfd;
    if (esi >= 0x000003c0)
        goto loc_27dfd;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = esi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_27dfd;
    if ((int32_t)ebx <= 0)
        goto loc_27dfd;
    edx = ebx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)eax >= 0)
        goto loc_27dde;
    if ((int32_t)eax <= (int32_t)0xfffffe80)
        goto loc_27dde;
    ebx ^= eax;
loc_27dde: // 0160:27dde
    if (memoryAGet32(ds, esp + 68) == 0x00000000)
        goto loc_27df5;
    ebp = 0x00000003;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebx = eax;
loc_27df5: // 0160:27df5
    memoryASet32(ds, esp + 48, 0x00000001);
loc_27dfd: // 0160:27dfd
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_27e8d;
    eax = esi + -1;
    memoryASet32(ds, esp + 36, eax);
    if (eax >= 0x000003c0)
        goto loc_27e8d;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 36);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643119);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_27f9f;
loc_27e8d: // 0160:27e8d
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_27f18;
    eax = esi + -2;
    memoryASet32(ds, esp + 40, eax);
    if (eax >= 0x000003c0)
        goto loc_27f18;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643118);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_27f9f;
loc_27f18: // 0160:27f18
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_27fa7;
    eax = esi + -3;
    memoryASet32(ds, esp + 8, eax);
    if (eax >= 0x000003c0)
        goto loc_27fa7;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643117);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_27fa7;
loc_27f9f: // 0160:27f9f
    if ((int32_t)ecx < 0)
        goto loc_28156;
loc_27fa7: // 0160:27fa7
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_28032;
    eax = esi + 1;
    memoryASet32(ds, esp + 24, eax);
    if (eax >= 0x000003c0)
        goto loc_28032;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 24);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643121);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_28152;
loc_28032: // 0160:28032
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_280c2;
    eax = esi + 2;
    memoryASet32(ds, esp + 28, eax);
    if (eax >= 0x000003c0)
        goto loc_280c2;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643122);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_28152;
loc_280c2: // 0160:280c2
    ebp = edi + -3;
    if ((int32_t)ebp <= 0)
        goto loc_2817c;
    eax = esi + 3;
    memoryASet32(ds, esp + 12, eax);
    if (eax >= 0x000003c0)
        goto loc_2817c;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 12);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643123);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2817c;
loc_28152: // 0160:28152
    if ((int32_t)ecx <= 0)
        goto loc_2817c;
loc_28156: // 0160:28156
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    memoryASet32(ds, esp + 48, 0x00000001);
loc_2817c: // 0160:2817c
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_28447;
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_28223;
    eax = esi + -3;
    memoryASet32(ds, esp + 4, eax);
    if (eax >= 0x000003c0)
        goto loc_28223;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643117);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_28223;
    if ((int32_t)ecx >= 0)
        goto loc_28223;
    if ((int32_t)ebx > 0)
        goto loc_283e3;
loc_28223: // 0160:28223
    ebp = edi + 1;
    if ((int32_t)ebp <= 0)
        goto loc_282bf;
    eax = esi + 3;
    memoryASet32(ds, esp + 16, eax);
    if (eax >= 0x000003c0)
        goto loc_282bf;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643123);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_282bf;
    if ((int32_t)ecx <= 0)
        goto loc_282bf;
    if ((int32_t)ebx > 0)
        goto loc_283e3;
loc_282bf: // 0160:282bf
    ebp = edi + -4;
    if ((int32_t)ebp <= 0)
        goto loc_2835b;
    eax = esi + -3;
    memoryASet32(ds, esp + 32, eax);
    if (eax >= 0x000003c0)
        goto loc_2835b;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 32);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643117);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2835b;
    if ((int32_t)ecx >= 0)
        goto loc_2835b;
    if ((int32_t)ebx < 0)
        goto loc_283e3;
loc_2835b: // 0160:2835b
    edi -= 0x00000004;
    if ((int32_t)edi <= 0)
        goto loc_28447;
    ebp = esi + 3;
    if (ebp >= 0x000003c0)
        goto loc_28447;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = memoryAGet32(ds, esp);
    eax += eax;
    eax += ebp;
    edx = 0;
    dx = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = edi;
    eax <<= 4;
    eax -= edi;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643123);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_28447;
    if ((int32_t)ecx <= 0)
        goto loc_28447;
    if ((int32_t)ebx >= 0)
        goto loc_28447;
loc_283e3: // 0160:283e3
    ecx = -ecx;
    edx = ecx;
    edx <<= 4;
    edx -= ecx;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    eax = 0x00000001;
    edx = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, esp + 48, eax);
    if (!edx)
        goto loc_28447;
    esi = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = eax;
loc_28447: // 0160:28447
    if (memoryAGet32(ds, esp + 48) != 0x00000000)
        goto loc_28488;
    edx = ecx;
    edx = -edx;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    ecx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebx;
    edx = -edx;
    ecx = eax;
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    ebx = 0x00000064;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
loc_28488: // 0160:28488
    if (ebx)
        goto loc_284a1;
    edx = ecx * 0x000000e6;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = eax;
loc_284a1: // 0160:284a1
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000066)
        goto loc_284af;
    ecx = 0;
loc_284af: // 0160:284af
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax, ecx);
    eax = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, eax, ebx);
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_284c4() // 0160:284c4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000038;
    edx = edi + -24;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = esi + -12;
    edx <<= 9;
    eax <<= 9;
    sub_2704a();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_2725e();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_28508() // 0160:28508 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    push32(0x0000000a);
    ecx = 0x0000001e;
    ebx = 0x00000017;
    edx -= 0x00000018;
    eax -= 0x0000000c;
    edx <<= 9;
    eax <<= 9;
    sub_2704a();
    edx = edi;
    eax = esi;
    edx <<= 9;
    eax <<= 9;
    sub_27204();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_28541() // 0160:28541 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = 0;
    memoryASet32(ds, eax + 2202014, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201994, esi);
    eax = 0x00000001;
    memoryASet32(ds, 0x21acc0, esi);
    esi = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21af00, eax);
    eax = esi * 0x000000ac;
    push32(0x00000002);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = ebx + -24;
    edx <<= 9;
    ebx = 0x0000004b;
    eax <<= 9;
    sub_2704a();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_285a6() // 0160:285a6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    edi = eax;
    esi = memoryAGet32(ds, eax + 2205010);
    ebp = memoryAGet32(ds, eax + 2205014);
loc_285c6: // 0160:285c6
    edx = memoryAGet32(ds, ebx + 2201958);
    if (!edx)
        goto loc_28619;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 2201962);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)0x00002710)
        goto loc_28619;
    eax = memoryAGet32(ds, edi + 2205038);
    eax -= 0x00000021;
    memoryASet32(ds, 0x239f28, esi);
    memoryASet32(ds, 0x21aea4, eax);
loc_28619: // 0160:28619
    ebx += 0x000000ac;
    if (ebx != 0x00000ac0)
        goto loc_285c6;
    goto loc_2b3b3;
    // gap 11655 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2862c() // 0160:2862c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    edx = memoryAGet32(ds, 0x21aea4);
    if (!edx)
        goto loc_286bd;
    ebx = edx + -1;
    memoryASet32(ds, 0x21aea4, ebx);
    if (ebx)
        goto loc_286bd;
    edx = 0x00000002;
    eax = 0;
    sub_24709();
    ecx = eax;
    if (eax)
        goto loc_2867d;
    eax = memoryAGet32(ds, 0x239f28);
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000010;
    sub_36a16();
loc_2867d: // 0160:2867d
    if (ecx != 0x00000001)
        goto loc_2869d;
    eax = memoryAGet32(ds, 0x239f28);
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000017;
    sub_36a16();
loc_2869d: // 0160:2869d
    if (ecx != 0x00000002)
        goto loc_286bd;
    eax = memoryAGet32(ds, 0x239f28);
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x0000001f;
    sub_36a16();
loc_286bd: // 0160:286bd
    edi = memoryAGet32(ds, 0x21a552);
    ebp = 0;
    esi = 0;
    if (!edi)
        goto loc_28b87;
    eax = memoryAGet32(ds, 0x21a556);
    memoryASet32(ds, 0x21a55e, eax);
    eax = memoryAGet32(ds, 0x21a572);
    memoryASet32(ds, 0x21a55a, edi);
    if (eax == 0x0000000b)
        goto loc_286f7;
    eax = memoryAGet32(ds, 0x21a562);
    edx = edi + eax;
    memoryASet32(ds, 0x21a552, edx);
loc_286f7: // 0160:286f7
    eax = memoryAGet32(ds, esi + 2205030);
    ebx = memoryAGet32(ds, esi + 2205014);
    ebx += eax;
    ecx = memoryAGet32(ds, 0x5cc68);
    memoryASet32(ds, esi + 2205014, ebx);
    if (!ecx)
        goto loc_28723;
    ecx = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, esi + 2205030, memoryAGet32(ds, esi + 2205030) + ecx);
    goto loc_28754;
loc_28723: // 0160:28723
    edi = memoryAGet32(ds, esi + 2205030);
    if ((int32_t)edi >= (int32_t)0x00004000)
        goto loc_28754;
    if (edi)
        goto loc_2873e;
    if (memoryAGet32(ds, esi + 2205026) == 0x00000000)
        goto loc_28754;
loc_2873e: // 0160:2873e
    ebx = memoryAGet32(ds, 0x21ad44);
    eax = memoryAGet32(ds, esi + 2205030);
    eax += ebx;
    al |= 0x01;
    memoryASet32(ds, esi + 2205030, eax);
loc_28754: // 0160:28754
    eax = memoryAGet32(ds, esi + 2205010);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 2205014);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 16, eax);
    eax = memoryAGet32(ds, esi + 2205018);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 2205038, memoryAGet32(ds, esi + 2205038) - 1);
    edi = eax;
    eax = memoryAGet32(ds, esi + 2205022);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 24, eax);
    if (memoryAGet32(ds, esi + 2205042) != 0x0000000b)
        goto loc_28872;
    eax = memoryAGet32(ds, esi + 2205038);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = 0x00000008;
    eax += eax;
    ecx -= eax;
    eax = memoryAGet32(ds, esi + 2205038);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax &= 0x00000001;
    ecx += eax;
    if (memoryAGet(ds, esi + 2205038) & 0x0f)
        goto loc_2881a;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x00000030;
    sub_1736c();
    edx = eax;
    eax = 0x0000001d;
    sub_36a16();
loc_2881a: // 0160:2881a
    if ((int32_t)ecx >= 0)
        goto loc_28821;
    ecx += 0x00000002;
loc_28821: // 0160:28821
    eax = memoryAGet32(ds, esi + 2205026);
    ecx <<= 4;
    if ((int32_t)eax <= 0)
        goto loc_28836;
    ecx += 0x00164530;
    goto loc_2883c;
loc_28836: // 0160:28836
    ecx += 0x00125a70;
loc_2883c: // 0160:2883c
    memoryASet32(ds, esi + 2205034, ecx);
    edx = 0x00000032;
    eax = esp;
    ebx = memoryAGet32(ds, esp + 24);
    push32(eax);
    eax = esp + 8;
    ecx = edi;
    push32(eax);
    memoryASet32(ds, 0x21aefc, edx);
    edx = esp + 28;
loc_2885f: // 0160:2885f
    push32(ebx);
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = esp + 28;
    sub_2628a();
    edx = eax;
    goto loc_288a8;
loc_28872: // 0160:28872
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = memoryAGet32(ds, esi + 2205030);
    ebx = memoryAGet32(ds, esi + 2205026);
    sub_26b97();
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x00000008)
        goto loc_288a6;
    eax = esp;
    push32(eax);
    eax = esp + 8;
    ebx = memoryAGet32(ds, esp + 28);
    push32(eax);
    edx = esp + 28;
    ecx = edi;
    goto loc_2885f;
loc_288a6: // 0160:288a6
    edx = 0;
loc_288a8: // 0160:288a8
    if (memoryAGet32(ds, 0x21aea4) != 0x00000000)
        goto loc_288e5;
    if (memoryAGet32(ds, 0x239f28) != 0x00000000)
        goto loc_288e5;
    if (memoryAGet32(ds, esi + 2205026) != 0x00000000)
        goto loc_288e5;
    if (memoryAGet32(ds, esi + 2205030) != 0x00000000)
        goto loc_288e5;
    if ((int32_t)memoryAGet32(ds, esi + 2205038) <= (int32_t)0x00000025)
        goto loc_288e5;
    if (memoryAGet32(ds, esi + 2205042) != 0x00000004)
        goto loc_288e5;
    eax = ebp;
    sub_285a6();
loc_288e5: // 0160:288e5
    eax = memoryAGet32(ds, 0x21ae04);
    if (!eax)
        goto loc_28959;
    if ((int32_t)eax <= 0)
        goto loc_2890d;
    edi = eax + -1;
    eax = 0x0016d700;
    memoryASet32(ds, 0x21ae04, edi);
    ebx = 0;
    memoryASet32(ds, esi + 2205034, eax);
    ecx = 0xffffffff;
    goto loc_2892d;
loc_2890d: // 0160:2890d
    if ((int32_t)eax >= 0)
        goto loc_28939;
    edi = eax + 1;
    eax = 0x0016d708;
    memoryASet32(ds, 0x21ae04, edi);
    ebx = 0xffffffff;
    memoryASet32(ds, esi + 2205034, eax);
    ecx = 0x00000001;
loc_2892d: // 0160:2892d
    memoryASet32(ds, 0x21adfc, ebx);
    memoryASet32(ds, 0x21ae00, ecx);
loc_28939: // 0160:28939
    edi = memoryAGet32(ds, 0x21ae04);
    if (edi)
        goto loc_28959;
    memoryASet32(ds, esi + 2205034, 0x0016d6e0);
    memoryASet32(ds, 0x21adfc, edi);
    memoryASet32(ds, 0x21ae00, edi);
loc_28959: // 0160:28959
    if (!edx)
        goto loc_28a4d;
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    memoryASet32(ds, esi + 2205010, eax);
    eax = memoryAGet32(ds, esp + 16);
    ecx = esp + 8;
    eax <<= 9;
    ebx = esp + 12;
    memoryASet32(ds, esi + 2205014, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 2205026);
    edi = memoryAGet32(ds, 0x21ad84);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 2205030);
    push32(edi);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_27c45();
    if (memoryAGet32(ds, esi + 2205042) != 0x0000000b)
        goto loc_289c6;
    eax = memoryAGet32(ds, esp + 8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    goto loc_28a47;
loc_289c6: // 0160:289c6
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esi + 2205010);
    ebx = memoryAGet32(ds, esi + 2205014);
    edx += eax;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esi + 2205010, edx);
    ebx += eax;
    ecx = memoryAGet32(ds, esi + 2205042);
    memoryASet32(ds, esi + 2205014, ebx);
    if (ecx != 0x00000004)
        goto loc_28a39;
    edi = memoryAGet32(ds, esp + 12);
    if (edi == memoryAGet32(ds, esi + 2205026))
        goto loc_28a15;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_28a15;
    memoryASet32(ds, 0x21ae04, ecx);
loc_28a15: // 0160:28a15
    edx = memoryAGet32(ds, esp + 8);
    if (edx == memoryAGet32(ds, esi + 2205030))
        goto loc_28a39;
    eax = edx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_28a39;
    memoryASet32(ds, 0x21ae04, 0xfffffffc);
loc_28a39: // 0160:28a39
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esi + 2205026, eax);
    eax = memoryAGet32(ds, esp + 8);
loc_28a47: // 0160:28a47
    memoryASet32(ds, esi + 2205030, eax);
loc_28a4d: // 0160:28a4d
    if ((int32_t)memoryAGet32(ds, esi + 2205038) > (int32_t)0x00000000)
        goto loc_28ad4;
    edi = memoryAGet32(ds, esi + 2205042);
    if (edi != 0x00000036)
        goto loc_28a74;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_284c4();
    goto loc_28acc;
loc_28a74: // 0160:28a74
    if (edi != 0x00000024)
        goto loc_28a88;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_28508();
    goto loc_28acc;
loc_28a88: // 0160:28a88
    if (edi != 0x0000000b)
        goto loc_28a9c;
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    sub_28541();
    goto loc_28acc;
loc_28a9c: // 0160:28a9c
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 16);
    push32(0x00000005);
    edx -= 0x00000018;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = memoryAGet32(ds, esp + 24);
    edx <<= 9;
    eax -= 0x00000010;
    ebx = 0x0000002d;
    eax <<= 9;
    sub_2704a();
loc_28acc: // 0160:28acc
    ecx = 0;
    memoryASet32(ds, esi + 2205010, ecx);
loc_28ad4: // 0160:28ad4
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_28aec;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_28b87;
loc_28aec: // 0160:28aec
    edx = memoryAGet32(ds, esi + 2205042);
    if (edx == 0x00000004)
        goto loc_28afc;
    if (edx != 0x00000024)
        goto loc_28b26;
loc_28afc: // 0160:28afc
    edx = 0x00000004;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_28b26;
    eax = ebp;
    ebx = 0x00000080;
    sub_1730a();
    edx = eax;
    eax = 0x00000029;
    sub_36a16();
    goto loc_28b41;
loc_28b26: // 0160:28b26
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_28b41;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_25cfe();
loc_28b41: // 0160:28b41
    edi = 0;
    ebp = memoryAGet32(ds, esi + 2205042);
    memoryASet32(ds, esi + 2205010, edi);
    if (ebp != 0x0000000b)
        goto loc_28b87;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202014, edi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = 0;
    memoryASet32(ds, eax + 2201994, edi);
    edi = 0x00000001;
    memoryASet32(ds, 0x21acc0, ebx);
    memoryASet32(ds, 0x21af00, edi);
loc_28b87: // 0160:28b87
    esp += 0x0000001c;
    goto loc_2b3b3;
    // gap 10276 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_28b8f() // 0160:28b8f +long
{
    esp -= 4;
    goto loc_28b8f;
loc_273e8: // 0160:273e8
    sub_17029();
    goto loc_2b3b4;
    // gap 6045 bytes
loc_28b8f: // 0160:28b8f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x21a552);
    ebx = 0;
    if (!edx)
        goto loc_2b3b4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x21a572);
    ecx = eax;
    if (esi != 0x0000000b)
        goto loc_28bf9;
    edi = memoryAGet32(ds, 0x21a562);
    esi = eax;
    if ((int32_t)edi >= 0)
        goto loc_28bcd;
    esi = eax + -14;
loc_28bcd: // 0160:28bcd
    eax = memoryAGet32(ds, ebx + 2205014);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000d);
    edx = eax + -11;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, ebx + 2205034);
    ebx = edx;
    edx = esi;
    goto loc_273e8;
loc_28bf9: // 0160:28bf9
    eax = memoryAGet32(ds, 0x21a556);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    ebx = memoryAGet32(ds, 0x21ae00);
    eax -= 0x00000003;
    edx = memoryAGet32(ds, 0x21adfc);
    ebx += eax;
    edx += ecx;
    ecx = 0x00000006;
    eax = memoryAGet32(ds, 0x21a56a);
    goto loc_273e8;
    // gap 10117 bytes
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_28c2f() // 0160:28c2f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edx = memoryAGet32(ds, 0x21a40e);
    ecx = 0;
    if (edx)
        goto loc_2b3b3;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201966);
    memoryASet32(ds, 0x21a40e, edx);
    edx = memoryAGet32(ds, eax + 2201970);
    edx -= 0x00000a00;
    memoryASet32(ds, 0x21a412, edx);
    if ((int32_t)memoryAGet32(ds, eax + 2201982) <= (int32_t)0x00000000)
        goto loc_28c84;
    memoryASet32(ds, 0x21a40e, memoryAGet32(ds, 0x21a40e) + 0x00000600);
    goto loc_28c8e;
loc_28c84: // 0160:28c84
    memoryASet32(ds, 0x21a40e, memoryAGet32(ds, 0x21a40e) - 0x00000a00);
loc_28c8e: // 0160:28c8e
    edx = memoryAGet32(ds, 0x21ac7c);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx <<= 10;
    edi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    ebx <<= 2;
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) + eax);
    edx = memoryAGet32(ds, 0x21ac80);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 10;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    memoryASet32(ds, ebx + 2204714, esi);
    ebp = 0x00000020;
    edi = memoryAGet32(ds, ebx + 2204690);
    memoryASet32(ds, ebx + 2204718, ebp);
    edi -= eax;
    memoryASet32(ds, ebx + 2204690, edi);
    if (esi < 0x00000002)
        goto loc_28d1a;
    if (esi <= 0x00000002)
        goto loc_28dd8;
    if (esi < 0x00000022)
        goto loc_2b3b3;
    if (esi <= 0x00000022)
        goto loc_28ff5;
    if (esi == 0x00000038)
        goto loc_28f22;
    goto loc_2b3b3;
loc_28d1a: // 0160:28d1a
    if (esi > 0)
        goto loc_28ea0;
    edx = 0x0016e8b0;
    esi = memoryAGet32(ds, 0x5cc68);
    memoryASet32(ds, ebx + 2204710, edx);
    if (!esi)
        goto loc_28d43;
    eax = ecx;
    sub_34889();
    goto loc_28dc9;
loc_28d43: // 0160:28d43
    edx = memoryAGet32(ds, 0x21ac78);
    edi = memoryAGet32(ds, 0x21ac7c);
    edx -= 0x0000000f;
    edx = (int32_t)edx * (int32_t)edi;
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 2204702, eax);
    eax = memoryAGet32(ds, 0x21ac78);
    ebp = memoryAGet32(ds, 0x21ac80);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)ebp;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ecx = 0x00000003;
    edx = memoryAGet32(ds, ebx + 2204702);
    eax = -eax;
    edx += edx;
    memoryASet32(ds, ebx + 2204706, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) - eax);
    edx = memoryAGet32(ds, ebx + 2204706);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, ebx + 2204690, memoryAGet32(ds, ebx + 2204690) - eax);
loc_28dc9: // 0160:28dc9
    memoryASet32(ds, 0x21ae90, 0x0000004b);
    goto loc_2b3b3;
loc_28dd8: // 0160:28dd8
    ecx = memoryAGet32(ds, ebx + 2204690);
    esi = 0x0016e8b0;
    ecx -= 0x00000400;
    memoryASet32(ds, ebx + 2204710, esi);
    memoryASet32(ds, ebx + 2204690, ecx);
    eax = memoryAGet32(ds, 0x21ac78);
    edi = memoryAGet32(ds, 0x21ac7c);
    eax -= 0x0000000f;
    eax = (int32_t)eax * (int32_t)edi;
    edx = eax * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, ebx + 2204702, eax);
    edx = memoryAGet32(ds, 0x21ac78);
    ebp = memoryAGet32(ds, 0x21ac80);
    edx -= 0x0000000f;
    edx = (int32_t)edx * (int32_t)ebp;
    edx = edx * 0x0000015d;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    eax = -eax;
    edx = 0x00000001;
    memoryASet32(ds, ebx + 2204706, eax);
    eax = 0x0000004b;
    memoryASet32(ds, 0x21ad3c, edx);
    memoryASet32(ds, 0x21ae90, eax);
    eax = memoryAGet32(ds, ebx + 2204702);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ds, ebx + 2204686);
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 2204706);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = memoryAGet32(ds, ebx + 2204690);
    memoryASet32(ds, ebx + 2204686, ecx);
    esi -= eax;
    memoryASet32(ds, ebx + 2204690, esi);
    goto loc_2b3b3;
loc_28ea0: // 0160:28ea0
    edx = memoryAGet32(ds, 0x21ac7c);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    eax += edx;
    eax <<= 4;
    memoryASet32(ds, ebx + 2204702, eax);
    edx = memoryAGet32(ds, 0x21ac80);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edi = memoryAGet32(ds, ebx + 2204690);
    eax += edx;
    edi += 0x00000200;
    eax <<= 4;
    memoryASet32(ds, ebx + 2204690, edi);
    eax = -eax;
    ebp = memoryAGet32(ds, 0x5cc68);
    memoryASet32(ds, ebx + 2204706, eax);
    if (!ebp)
        goto loc_28efb;
    eax = ecx;
    sub_34927();
loc_28efb: // 0160:28efb
    memoryASet32(ds, 0x21ae90, 0x00000018);
    eax = ecx;
    ebx = 0x000000ff;
loc_28f0c: // 0160:28f0c
    sub_1730a();
    edx = eax;
    eax = 0x0000000d;
    sub_36a16();
    goto loc_2b3b3;
loc_28f22: // 0160:28f22
    memoryASet32(ds, ebx + 2204710, 0x0016d6e0);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = 0;
    ebx = memoryAGet32(ds, ebx + 2201982);
    memoryASet32(ds, 0x5ca8c, eax);
    if (ebx)
        goto loc_28f4c;
    ebx = 0xffffffff;
loc_28f4c: // 0160:28f4c
    eax = memoryAGet32(ds, 0x21ac84);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, eax * 4 + 0x50bf0);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    memoryASet32(ds, 0x21ac80, eax);
    eax = memoryAGet32(ds, 0x21ac84);
    eax += 0x00000040;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, eax * 4 + 0x50bf0);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax += eax;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)ebx;
    ebx = eax;
    ebx <<= 2;
    ebx += eax;
    ebx += ebx;
    memoryASet32(ds, 0x21ac7c, eax);
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x21a41e, ebx);
    edx = memoryAGet32(ds, 0x21ac80);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx += ebx;
    edx = ebx;
    ebx <<= 4;
    ebx -= edx;
    edx = ebx;
    edx = -edx;
    memoryASet32(ds, eax * 4 + 0x21a422, edx);
    eax = ecx;
    ebx = 0x00000020;
    goto loc_28f0c;
loc_28ff5: // 0160:28ff5
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201966);
    memoryASet32(ds, ebx + 2204686, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201982) <= (int32_t)0x00000000)
        goto loc_2902a;
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) + 0x00000600);
    goto loc_29034;
loc_2902a: // 0160:2902a
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) - 0x00000a00);
loc_29034: // 0160:29034
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    edx = memoryAGet32(ds, eax + 2201982);
    ebx <<= 2;
    if ((int32_t)edx < 0)
        goto loc_2907c;
    eax = 0x00177a70;
    esi = 0x00000600;
    edx = memoryAGet32(ds, ebx + 2204686);
    memoryASet32(ds, ebx + 2204710, eax);
    edx -= 0x00000400;
    memoryASet32(ds, ebx + 2204702, esi);
    memoryASet32(ds, ebx + 2204686, edx);
    goto loc_290a4;
loc_2907c: // 0160:2907c
    esi = 0x00176f30;
    ebp = 0xfffffa00;
    edi = memoryAGet32(ds, ebx + 2204686);
    memoryASet32(ds, ebx + 2204710, esi);
    edi += 0x00000400;
    memoryASet32(ds, ebx + 2204702, ebp);
    memoryASet32(ds, ebx + 2204686, edi);
loc_290a4: // 0160:290a4
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x21a42e, 0x00000014);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2201970);
    edx -= 0x00000600;
    memoryASet32(ds, eax * 4 + 0x21a412, edx);
    edx = 0;
    memoryASet32(ds, eax * 4 + 0x21a422, edx);
    goto loc_2b3b3;
    // gap 8914 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_290e1() // 0160:290e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = 0;
    goto loc_29281;
loc_290ee: // 0160:290ee
    ebx = ecx * 0x00000024;
    if (memoryAGet32(ds, ebx + 2204686) != 0x00000000)
        goto loc_29280;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201966);
    memoryASet32(ds, ebx + 2204686, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201970);
    eax -= 0x00000a00;
    memoryASet32(ds, ebx + 2204690, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201982) <= (int32_t)0x00000000)
        goto loc_2914e;
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) + 0x00000600);
    goto loc_29158;
loc_2914e: // 0160:2914e
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) - 0x00000a00);
loc_29158: // 0160:29158
    edx = memoryAGet32(ds, 0x21ac7c) * 0x00000c00;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = ecx * 0x00000024;
    memoryASet32(ds, ebx + 2204686, memoryAGet32(ds, ebx + 2204686) + eax);
    edx = memoryAGet32(ds, 0x21ac80) * 0x00000c00;
    edx = -edx;
    esi = 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edi = memoryAGet32(ds, ebx + 2204690);
    edi += eax;
    ebp = edi + 512;
    memoryASet32(ds, ebx + 2204690, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2202006);
    esi = 0;
    memoryASet32(ds, ebx + 2204714, eax);
    memoryASet32(ds, ebx + 2204718, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000027)
        goto loc_291e0;
    edx = 0x00000002;
    eax = 0xfffffffe;
    goto loc_291ea;
loc_291e0: // 0160:291e0
    edx = 0x00000004;
    eax = 0xfffffffc;
loc_291ea: // 0160:291ea
    sub_24709();
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ac84);
    eax += ebx;
    eax &= 0x000000ff;
    esi = memoryAGet32(ds, eax * 4 + 0x50bf0);
    edx = esi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = eax;
    eax = memoryAGet32(ds, 0x21ac84);
    eax += ebx;
    eax += 0x00000040;
    eax &= 0x000000ff;
    edi = memoryAGet32(ds, eax * 4 + 0x50bf0);
    edx = edi * 0x0000001e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, edx + 2201982);
    ebx = ecx * 0x00000024;
    eax = eax * 0x00000190;
    memoryASet32(ds, ebx + 2204702, eax);
    eax = esi * 0x00000190;
    eax = -eax;
    esi = memoryAGet32(ds, 0x5cc68);
    memoryASet32(ds, ebx + 2204706, eax);
    if (!esi)
        goto loc_2927b;
    eax = ecx;
    sub_34927();
loc_2927b: // 0160:2927b
    ecx = 0x00000008;
loc_29280: // 0160:29280
    ecx++;
loc_29281: // 0160:29281
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_290ee;
    goto loc_2b3b3;
    // gap 8484 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2928f() // 0160:2928f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x21ad18);
    if (!edx)
        goto loc_2933b;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = edx + -1;
    memoryASet32(ds, 0x21ad18, ecx);
    if (memoryAGet32(ds, eax + 2202006) != 0x00000027)
        goto loc_292e3;
    ebx = 0x00000006;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_292d4;
    sub_290e1();
loc_292d4: // 0160:292d4
    eax = memoryAGet32(ds, 0x21ad18);
    eax &= 0x00000003;
    if (eax != 0x00000003)
        goto loc_2932b;
    goto loc_29310;
loc_292e3: // 0160:292e3
    ebx = 0x00000003;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx)
        goto loc_292fa;
    sub_290e1();
loc_292fa: // 0160:292fa
    eax = memoryAGet32(ds, 0x21ad18);
    edx = eax;
    ebx = 0x00000002;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (edx != 0x00000001)
        goto loc_2932b;
loc_29310: // 0160:29310
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x00000015;
    sub_36a16();
loc_2932b: // 0160:2932b
    edi = memoryAGet32(ds, 0x21ad18);
    if (edi)
        goto loc_2933b;
    memoryASet32(ds, 0x21acc0, edi);
loc_2933b: // 0160:2933b
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_29340() // 0160:29340 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    ebx -= eax;
    eax = memoryAGet32(ds, esp);
    esi = 0;
    eax += 0x00001400;
    ecx = 0;
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp + 20, ebx);
    eax += 0x00002000;
    ebx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_29441;
loc_2939a: // 0160:2939a
    edx = memoryAGet32(ds, ebx + 2201958);
    if (!edx)
        goto loc_2943a;
    if (esi == memoryAGet32(ds, 0x21ac64))
        goto loc_2943a;
    if (memoryAGet32(ds, ebx + 2201990) != 0x00000000)
        goto loc_2943a;
    if (memoryAGet32(ds, ebx + 2201938) != 0x00000000)
        goto loc_2943a;
    eax = edx;
    edx = memoryAGet32(ds, esp + 24);
    edi = memoryAGet32(ds, esp + 12);
    eax -= edx;
    ebp = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ebx + 2201962);
    edx = memoryAGet32(ds, esp + 8);
    edi -= ebp;
    edi -= edx;
    if ((int32_t)eax <= 0)
        goto loc_2940a;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ecx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_29408;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_2940a;
loc_29408: // 0160:29408
    ecx = ebp;
loc_2940a: // 0160:2940a
    if (!ecx)
        goto loc_2943a;
    if ((int32_t)edi <= 0)
        goto loc_2942b;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ecx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_29429;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_2942b;
loc_29429: // 0160:29429
    ecx = ebp;
loc_2942b: // 0160:2942b
    if (ecx != 0x00000002)
        goto loc_29438;
    memoryASet32(ds, 0x21acac, esi);
    goto loc_2943a;
loc_29438: // 0160:29438
    ecx = 0;
loc_2943a: // 0160:2943a
    ebx += 0x000000ac;
    esi++;
loc_29441: // 0160:29441
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_2944e;
    if (!ecx)
        goto loc_2939a;
loc_2944e: // 0160:2944e
    eax = ecx;
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_29457() // 0160:29457 +long
{
    esp -= 4;
    goto loc_29457;
loc_29450: // 0160:29450
    esp += 0x00000020;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_29457: // 0160:29457
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0xfffff000;
    edx = ecx;
    ebx -= eax;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 24, ebx);
    ebx = 0xfffffe00;
    esi = 0;
    ebx -= eax;
    eax = ecx + 5120;
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 4);
    ebx = 0;
    eax += 0x00002000;
    ecx = 0;
    memoryASet32(ds, esp + 16, eax);
    goto loc_29547;
loc_294af: // 0160:294af
    edx = memoryAGet32(ds, ecx + 2201958);
    if (!edx)
        goto loc_29540;
    edi = memoryAGet32(ds, esp + 24);
    ebp = memoryAGet32(ds, esp + 12);
    eax = edx;
    edx = memoryAGet32(ds, esp + 20);
    eax -= edi;
    edi = memoryAGet32(ds, ecx + 2201962);
    eax -= ebp;
    ebp = memoryAGet32(ds, esp + 8);
    edi -= edx;
    edi -= ebp;
    if ((int32_t)eax <= 0)
        goto loc_294f9;
    edx = memoryAGet32(ds, esp + 16);
    ebp = ebx + 1;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_294f7;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_294f9;
loc_294f7: // 0160:294f7
    ebx = ebp;
loc_294f9: // 0160:294f9
    if (!ebx)
        goto loc_29540;
    if ((int32_t)edi <= 0)
        goto loc_2951a;
    eax = memoryAGet32(ds, esp + 28);
    ebp = ebx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_29518;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_2951a;
loc_29518: // 0160:29518
    ebx = ebp;
loc_2951a: // 0160:2951a
    if (ebx != 0x00000002)
        goto loc_29527;
    memoryASet32(ds, 0x21acac, esi);
    goto loc_29529;
loc_29527: // 0160:29527
    ebx = 0;
loc_29529: // 0160:29529
    if (memoryAGet32(ds, 0x5cac4) == 0x00000000)
        goto loc_29540;
    if (!ebx)
        goto loc_29540;
    if (esi == memoryAGet32(ds, 0x21ac64))
        goto loc_29540;
    ebx = 0;
loc_29540: // 0160:29540
    ecx += 0x000000ac;
    esi++;
loc_29547: // 0160:29547
    if ((int32_t)esi >= (int32_t)0x00000010)
        goto loc_29554;
    if (!ebx)
        goto loc_294af;
loc_29554: // 0160:29554
    eax = ebx;
    goto loc_29450;
}
void sub_2955b() // 0160:2955b +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    edi = edx;
    esi = ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0xfffff000;
    edx -= eax;
    memoryASet32(ds, esp, edx);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0xfffffe00;
    edx -= eax;
    eax = memoryAGet32(ds, 0x21ab56);
    ebx = 0;
    if (!eax)
        goto loc_295ff;
    eax -= memoryAGet32(ds, esp);
    eax -= ebp;
    ebp = memoryAGet32(ds, 0x21ab5a);
    ebp -= edx;
    ebp -= edi;
    edi = ebp;
    if ((int32_t)eax <= 0)
        goto loc_295ca;
    ebp = esi + 8192;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_295c5;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_295ca;
loc_295c5: // 0160:295c5
    ebx = 0x00000001;
loc_295ca: // 0160:295ca
    if (!ebx)
        goto loc_295ff;
    if ((int32_t)edi <= 0)
        goto loc_295ec;
    eax = ecx + 5120;
    esi = ebx + 1;
    if ((int32_t)edi < (int32_t)eax)
        goto loc_295ea;
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_295ec;
loc_295ea: // 0160:295ea
    ebx = esi;
loc_295ec: // 0160:295ec
    if (ebx != 0x00000002)
        goto loc_295fd;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21acac, eax);
    goto loc_295ff;
loc_295fd: // 0160:295fd
    ebx = 0;
loc_295ff: // 0160:295ff
    eax = ebx;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_29608() // 0160:29608 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, ebx * 4 + 0x21a422, memoryAGet32(ds, ebx * 4 + 0x21a422) + eax);
    edx = memoryAGet32(ds, 0x21ac98);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    edx <<= 9;
    esi = 0x0000004b;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = memoryAGet32(ds, ebx * 4 + 0x21a41e);
    esi += eax;
    eax = esi;
    memoryASet32(ds, ebx * 4 + 0x21a41e, esi);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_29670;
    ebx = 0x00000001;
loc_29670: // 0160:29670
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, eax * 4 + 0x21a422);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_29691;
    eax = 0x00000004;
loc_29691: // 0160:29691
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_2969b;
    eax = 0xfffffffc;
loc_2969b: // 0160:2969b
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, ebx * 4 + 0x21a41e) > (int32_t)0x00000000)
        goto loc_296b0;
    eax = -eax;
    goto loc_296b3;
loc_296b0: // 0160:296b0
    eax += 0x00000008;
loc_296b3: // 0160:296b3
    eax &= 0x0000000f;
    edx = 0x0016e8b0;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x21a426, edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_296d3() // 0160:296d3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    ecx = edx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)esi <= (int32_t)eax)
        goto loc_296f0;
    eax = ebx;
    goto loc_296f2;
loc_296f0: // 0160:296f0
    eax = ecx;
loc_296f2: // 0160:296f2
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_296fb() // 0160:296fb +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000028;
    ecx = eax;
    ebx = eax;
    ebx <<= 3;
    ebx += eax;
    ebx <<= 2;
    eax = memoryAGet32(ds, ebx + 2204686);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2204690);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x21ad3c);
    edx++;
    memoryASet32(ds, 0x21ad3c, edx);
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_2992b;
    if ((int32_t)edx >= (int32_t)0x000000fa)
        goto loc_2992b;
    fild32(memoryAGet32(ds, ebx + 2204702));
    edx = memoryAGet32(ds, 0x21ad1c);
    fmul32(memoryAGet32(ds, 0x4f08c));
    edx -= esi;
    memoryASet32(ds, esp + 32, fstp32());
    fild32(memoryAGet32(ds, ebx + 2204706));
    fmul32(memoryAGet32(ds, 0x4f08c));
    memoryASet32(ds, esp, edx);
    edx = memoryAGet32(ds, 0x21ad20);
    memoryASet32(ds, esp + 4, fstp32());
    edx -= eax;
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, fstp32());
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 8, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul80(st(0));
    fld32(memoryAGet32(ds, esp + 8));
    fmul80(st(0));
    faddp80(st(1));
    sub_449f2();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    sub_307c2();
    memoryASet32(ds, esp, eax);
    fild32(memoryAGet32(ds, esp));
    memoryASet32(ds, esp + 16, fstp32());
    if (!(memoryAGet32(ds, esp + 16) & 0x7fffffff))
        goto loc_2993f;
    fld32(memoryAGet32(ds, 0x4f090));
    stop("disassembly failed at 160:297d8 fsub dword ptr [esp + 0x10]");
    stop("disassembly failed at 160:297dc fst dword ptr [esp + 0x24]");
    fcomp32(memoryAGet32(ds, 0x4f094));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_297f3;
    memoryASet32(ds, esp + 36, 0x43800000);
loc_297f3: // 0160:297f3
    fld32(memoryAGet32(ds, esp + 36));
    fcomp32(memoryAGet32(ds, 0x4f090));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_2980a;
    memoryASet32(ds, esp + 36, 0x44800000);
loc_2980a: // 0160:2980a
    fld32(memoryAGet32(ds, esp + 16));
    fmul32(memoryAGet32(ds, 0x4f090));
    stop("disassembly failed at 160:29814 fdivr dword ptr [esp + 0x24]");
    memoryASet32(ds, esp + 36, fstp32());
    fld32(memoryAGet32(ds, esp + 12));
    fmul32(memoryAGet32(ds, esp + 36));
    fadd32(memoryAGet32(ds, esp + 32));
    memoryASet32(ds, esp + 20, fstp32());
    fld32(memoryAGet32(ds, esp + 8));
    fmul32(memoryAGet32(ds, esp + 36));
    eax = memoryAGet32(ds, esp + 20);
    fadd32(memoryAGet32(ds, esp + 4));
    memoryASet32(ds, esp + 32, eax);
    memoryASet32(ds, esp + 24, fstp32());
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x4f098));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_2985d;
    memoryASet32(ds, esp + 32, 0xc1000000);
    goto loc_29874;
loc_2985d: // 0160:2985d
    fld32(memoryAGet32(ds, esp + 20));
    fcomp32(memoryAGet32(ds, 0x4f09c));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_29874;
    memoryASet32(ds, esp + 32, 0x41000000);
loc_29874: // 0160:29874
    fld32(memoryAGet32(ds, esp + 32));
    fcomp32(memoryAGet32(ds, esp + 20));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_29893;
    fld32(memoryAGet32(ds, esp + 32));
    fmul32(memoryAGet32(ds, esp + 24));
    fdiv32(memoryAGet32(ds, esp + 20));
    memoryASet32(ds, esp + 28, fstp32());
    goto loc_298e8;
loc_29893: // 0160:29893
    eax = memoryAGet32(ds, esp + 24);
    fld32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 28, eax);
    fcomp32(memoryAGet32(ds, 0x4f098));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_298b4;
    memoryASet32(ds, esp + 28, 0xc1000000);
    goto loc_298cb;
loc_298b4: // 0160:298b4
    fld32(memoryAGet32(ds, esp + 24));
    fcomp32(memoryAGet32(ds, 0x4f09c));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_298cb;
    memoryASet32(ds, esp + 28, 0x41000000);
loc_298cb: // 0160:298cb
    fld32(memoryAGet32(ds, esp + 28));
    fcomp32(memoryAGet32(ds, esp + 24));
    ax = fnstsw();
    sahf();
    if (flags.zero)
        goto loc_298e8;
    fld32(memoryAGet32(ds, esp + 28));
    fmul32(memoryAGet32(ds, esp + 20));
    fdiv32(memoryAGet32(ds, esp + 24));
    memoryASet32(ds, esp + 32, fstp32());
loc_298e8: // 0160:298e8
    fld32(memoryAGet32(ds, esp + 32));
    eax = ecx;
    fmul32(memoryAGet32(ds, 0x4f0a0));
    eax <<= 3;
    sub_449f2();
    memoryASet32(ds, esp, fistp32());
    edx = ecx + eax;
    fld32(memoryAGet32(ds, esp + 28));
    eax = memoryAGet32(ds, esp);
    edx <<= 2;
    fmul32(memoryAGet32(ds, 0x4f0a0));
    memoryASet32(ds, edx + 2204702, eax);
    sub_449f2();
    memoryASet32(ds, esp, fistp32());
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, edx + 2204706, eax);
    goto loc_2993f;
loc_2992b: // 0160:2992b
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, eax * 4 + 0x21a422, memoryAGet32(ds, eax * 4 + 0x21a422) + edx);
loc_2993f: // 0160:2993f
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    eax = memoryAGet32(ds, eax * 4 + 0x21a41e);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    if (eax)
        goto loc_2995d;
    ebx = 0x00000001;
loc_2995d: // 0160:2995d
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    edx = memoryAGet32(ds, eax * 4 + 0x21a422);
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax <= (int32_t)0x00000004)
        goto loc_2997e;
    eax = 0x00000004;
loc_2997e: // 0160:2997e
    if ((int32_t)eax >= (int32_t)0xfffffffc)
        goto loc_29988;
    eax = 0xfffffffc;
loc_29988: // 0160:29988
    ebx = ecx;
    ebx <<= 3;
    ebx += ecx;
    if ((int32_t)memoryAGet32(ds, ebx * 4 + 0x21a41e) > (int32_t)0x00000000)
        goto loc_2999d;
    eax = -eax;
    goto loc_299a0;
loc_2999d: // 0160:2999d
    eax += 0x00000008;
loc_299a0: // 0160:299a0
    eax &= 0x0000000f;
    edx = 0x0016e8b0;
    eax <<= 4;
    edx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    memoryASet32(ds, eax * 4 + 0x21a426, edx);
    esp += 0x00000028;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_299c3() // 0160:299c3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    if ((int32_t)ebx <= 0)
        goto loc_299d5;
    ecx = 0xffffffff;
    goto loc_299da;
loc_299d5: // 0160:299d5
    ecx = 0x00000001;
loc_299da: // 0160:299da
    edx = 0x00000001;
    ebx = 0;
    memoryASet32(ds, 0xe42d0, edx);
loc_299e7: // 0160:299e7
    edx = 0x00000600;
    memoryASet32(ds, ebx + 639120, edi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 639124, esi);
    sub_24709();
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 639128, eax);
    eax = 0xfffffc00;
    sub_24709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 639132, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_24709();
    al = memoryAGet(ds, eax * 4 + 0xe42f0);
    memoryASet(ds, ebx + 639118, al);
    ah = 0;
    memoryASet(ds, ebx + 639119, ah);
    if (ebx != 0x000002f4)
        goto loc_299e7;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_29a50() // 0160:29a50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    sub_2928f();
    edx = memoryAGet32(ds, 0x21ae90);
    if ((int32_t)edx <= 0)
        goto loc_29a71;
    ebx = edx + -1;
    memoryASet32(ds, 0x21ae90, ebx);
loc_29a71: // 0160:29a71
    edi = 0;
    esi = 0;
loc_29a75: // 0160:29a75
    ecx = memoryAGet32(ds, esi + 2204686);
    if (!ecx)
        goto loc_2a0cd;
    eax = memoryAGet32(ds, esi + 2204690);
    memoryASet32(ds, esi + 2204698, eax);
    ebp = memoryAGet32(ds, esi + 2204686);
    edx = memoryAGet32(ds, esi + 2204690);
    eax = memoryAGet32(ds, esi + 2204702);
    memoryASet32(ds, esi + 2204694, ecx);
    ebp += eax;
    eax = memoryAGet32(ds, esi + 2204706);
    memoryASet32(ds, esi + 2204686, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, esi + 2204714);
    memoryASet32(ds, esi + 2204690, edx);
    if (ebx)
        goto loc_29ad0;
    eax = edi;
    sub_29608();
    goto loc_29adc;
loc_29ad0: // 0160:29ad0
    if (ebx != 0x00000002)
        goto loc_29adc;
    eax = edi;
    sub_296fb();
loc_29adc: // 0160:29adc
    eax = memoryAGet32(ds, esi + 2204694);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 2204698);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 2204686);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 2204690);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax--;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 2204718);
    eax--;
    edx = memoryAGet32(ds, esi + 2204714);
    memoryASet32(ds, esi + 2204718, eax);
    if (!edx)
        goto loc_29b53;
    if (edx != 0x00000002)
        goto loc_29b73;
loc_29b53: // 0160:29b53
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esi + 2204706);
    eax++;
    ebx = memoryAGet32(ds, esi + 2204702);
    memoryASet32(ds, esp + 8, eax);
    edx = eax;
    eax = memoryAGet32(ds, esp + 12);
    sub_26b97();
loc_29b73: // 0160:29b73
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000010)
        goto loc_29bba;
    ecx = esp;
    ebx = esp + 4;
    edx = esp + 8;
    eax = esp + 12;
    sub_348e7();
    memoryASet32(ds, esp + 16, eax);
    eax = esp;
    ebx = memoryAGet32(ds, esp + 20);
    push32(eax);
    eax = esp + 8;
    edx = esp + 16;
    push32(eax);
    ecx = ebp;
    eax = memoryAGet32(ds, 0x21ac64);
    push32(ebx);
    ebx = esp + 20;
    ebp = memoryAGet32(ds, esp + 28);
    sub_2628a();
    ebp |= eax;
    goto loc_29bd9;
loc_29bba: // 0160:29bba
    ebx = memoryAGet32(ds, esi + 2204714);
    ebp = 0;
    if (ebx == 0x00000001)
        goto loc_29bd1;
    if (ebx == 0x00000027)
        goto loc_29bd1;
    if (ebx != 0x0000002f)
        goto loc_29bd9;
loc_29bd1: // 0160:29bd1
    edx = 0;
    memoryASet32(ds, esi + 2204686, edx);
loc_29bd9: // 0160:29bd9
    if (memoryAGet32(ds, esi + 2204714) != 0x00000022)
        goto loc_29d05;
    ecx = 0x00001000;
    edx = memoryAGet32(ds, esi + 2204690);
    eax = memoryAGet32(ds, esi + 2204686);
    edx += 0x00000400;
    eax += 0x00000400;
    ebx = ecx;
    sub_29340();
    if (!eax)
        goto loc_29cd3;
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = memoryAGet32(ds, edx + 2201982);
    memoryASet32(ds, eax + 2201982, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, 0x21acac);
    ebp = memoryAGet32(ds, eax + 2201982);
    eax = ebx * 0x000000ac;
    edx = ebp * 0x00000533;
    memoryASet32(ds, eax + 2201950, edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, 0xfffffd00);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) - 0x00000200);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    ebp = 0x00000001;
    memoryASet32(ds, eax + 2201990, ebp);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, 0x21acac);
    edx = memoryAGet32(ds, edx + 2202046);
    sub_1d712();
    edx = 0;
    memoryASet32(ds, esi + 2204686, edx);
    eax = memoryAGet32(ds, 0x21acac);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000000b;
    sub_36a16();
loc_29cd3: // 0160:29cd3
    ebx = 0x00000010;
    edx = memoryAGet32(ds, esi + 2204690);
    eax = memoryAGet32(ds, esi + 2204686);
    edx -= 0x00000400;
    eax -= 0x00000400;
    sub_2ad13();
    if (memoryAGet32(ds, 0x21ad80) == 0x00000000)
        goto loc_29d05;
    ecx = 0;
    memoryASet32(ds, esi + 2204686, ecx);
loc_29d05: // 0160:29d05
    if (memoryAGet32(ds, esi + 2204714) != 0x00000038)
        goto loc_29e0b;
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, esi + 2204686);
    memoryASet32(ds, 0x21ad94, eax);
    eax = memoryAGet32(ds, esi + 2204690);
    memoryASet32(ds, 0x21ad98, eax);
    edx = memoryAGet32(ds, 0x21ad94);
    ecx = memoryAGet32(ds, ebx + 2201958);
    edx -= ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x21ad98);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    eax += ecx;
    if ((int32_t)eax > (int32_t)0x000057e4)
        goto loc_29da2;
    edx = memoryAGet32(ds, 0x21ad98);
    if ((int32_t)edx < (int32_t)0x00000008)
        goto loc_29da2;
    if ((int32_t)edx > (int32_t)0x0002f400)
        goto loc_29da2;
    ecx = memoryAGet32(ds, 0x21ad94);
    if ((int32_t)ecx > (int32_t)0x00078000)
        goto loc_29da2;
    if ((int32_t)ecx >= (int32_t)0x00000200)
        goto loc_29deb;
loc_29da2: // 0160:29da2
    ebx = 0x00000001;
    ecx = 0;
    memoryASet32(ds, 0x21ad2c, ebx);
    edx = 0x00000019;
    memoryASet32(ds, esi + 2204686, ecx);
    memoryASet32(ds, 0x5ca98, edx);
    memoryASet32(ds, 0x21ad94, ecx);
    memoryASet32(ds, 0x21ad98, ecx);
    memoryASet32(ds, 0x21ad8c, ecx);
    memoryASet32(ds, 0x21ad90, ecx);
    memoryASet32(ds, 0x21ad88, ecx);
    memoryASet32(ds, 0x21acc0, ebx);
    sub_19335();
    goto loc_29e0b;
loc_29deb: // 0160:29deb
    if (!ebp)
        goto loc_29e0b;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, 0x21ad94, eax);
    eax = memoryAGet32(ds, esp);
    eax <<= 9;
    memoryASet32(ds, 0x21ad98, eax);
    sub_2db55();
loc_29e0b: // 0160:29e0b
    if (ebp)
        goto loc_29e29;
    if (memoryAGet32(ds, esi + 2204714) != 0x00000022)
        goto loc_2a04c;
    if (memoryAGet32(ds, esi + 2204718) != 0x00000000)
        goto loc_2a04c;
loc_29e29: // 0160:29e29
    ebp = memoryAGet32(ds, esi + 2204714);
    if (ebp != 0x00000022)
        goto loc_29e81;
    eax = memoryAGet32(ds, esp + 12);
    eax += 0x00000004;
    eax <<= 9;
    memoryASet32(ds, 0x21acdc, eax);
    eax = memoryAGet32(ds, esp + 8);
    eax++;
    eax <<= 9;
    memoryASet32(ds, 0x21ace0, eax);
    memoryASet32(ds, 0x21ace4, 0x00000001);
    if ((int32_t)memoryAGet32(ds, esi + 2204702) <= (int32_t)0x00000000)
        goto loc_29e72;
    memoryASet32(ds, 0x21ace8, 0x00177a80);
    goto loc_2a03e;
loc_29e72: // 0160:29e72
    memoryASet32(ds, 0x21ace8, 0x00176f40);
    goto loc_2a03e;
loc_29e81: // 0160:29e81
    if (ebp == 0x00000027)
        goto loc_29e8f;
    if (ebp != 0x0000002f)
        goto loc_29f30;
loc_29e8f: // 0160:29e8f
    if (memoryAGet32(ds, 0x21ad18) == 0x00000000)
        goto loc_2a03e;
    if (memoryAGet32(ds, 0x21ad48) != 0x00000000)
        goto loc_29eb6;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, 0x21ad48, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x21ad4c, eax);
loc_29eb6: // 0160:29eb6
    ecx = 0;
    edx = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x21ac52, cx);
    if ((int32_t)edx <= 0)
        goto loc_29efd;
    ebx = memoryAGet32(ds, esp + 4);
    if (ebx >= 0x000003c0)
        goto loc_29efd;
    eax = edx * 0x000003c0;
    eax += ebx;
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_29efd;
    eax = 0x00000001;
    goto loc_29eff;
loc_29efd: // 0160:29efd
    eax = 0;
loc_29eff: // 0160:29eff
    edx = 0x0000ffff;
    push32(eax);
    eax = memoryAGet32(ds, esp + 16);
    memoryASet16(ds, 0x21ac52, dx);
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 2204706);
    ebx = memoryAGet32(ds, esi + 2204702);
    edx <<= 9;
    sub_2bc6c();
    goto loc_2a03e;
loc_29f30: // 0160:29f30
    if (ebp != 0x00000001)
        goto loc_29fb2;
    edx = 0;
    ebp = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x21ac52, dx);
    if ((int32_t)ebp <= 0)
        goto loc_29f80;
    if (memoryAGet32(ds, esp + 4) >= 0x000003c0)
        goto loc_29f80;
    eax = ebp * 0x000003c0;
    eax += memoryAGet32(ds, esp + 4);
    al = memoryAGet(ds, eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_29f80;
    eax = 0x00000001;
    goto loc_29f82;
loc_29f80: // 0160:29f80
    eax = 0;
loc_29f82: // 0160:29f82
    ebx = 0x0000ffff;
    edx = memoryAGet32(ds, esp);
    push32(eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, 0x21ac52, bx);
    edx <<= 9;
    eax <<= 9;
    ecx = memoryAGet32(ds, esi + 2204706);
    ebx = memoryAGet32(ds, esi + 2204702);
    sub_2bafb();
    goto loc_2a03e;
loc_29fb2: // 0160:29fb2
    if (ebp != 0x00000038)
        goto loc_29fd0;
    ebx = memoryAGet32(ds, esi + 2204702);
    edx = memoryAGet32(ds, esi + 2204698);
    eax = memoryAGet32(ds, esi + 2204694);
    sub_299c3();
    goto loc_2a03e;
loc_29fd0: // 0160:29fd0
    ebp = 0;
    memoryASet32(ds, 0x21ad24, ebp);
    eax = memoryAGet32(ds, esi + 2204702);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    edx = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = memoryAGet32(ds, esi + 2204706);
    memoryASet32(ds, esp + 4, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x21ac64);
    ebx -= eax;
    eax = ecx * 0x000000ac;
    push32(ebp);
    memoryASet32(ds, esp + 4, ebx);
    edx = ebx + -24;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = memoryAGet32(ds, esp + 8);
    ebx = 0x0000002d;
    eax -= 0x00000010;
    edx <<= 9;
    eax <<= 9;
    sub_2704a();
loc_2a03e: // 0160:2a03e
    ebp = 0;
    memoryASet32(ds, esi + 2204686, ebp);
    memoryASet32(ds, 0x21af24, ebp);
loc_2a04c: // 0160:2a04c
    if ((int32_t)memoryAGet32(ds, esp + 8) > (int32_t)0x0000017e)
        goto loc_2a067;
    ebx = memoryAGet32(ds, esp + 12);
    if ((int32_t)ebx < (int32_t)0x00000001)
        goto loc_2a067;
    if ((int32_t)ebx <= (int32_t)0x000003c0)
        goto loc_2a0cd;
loc_2a067: // 0160:2a067
    if (memoryAGet32(ds, esi + 2204714) != 0x00000000)
        goto loc_2a09a;
    edx = 0x00000004;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_2a09a;
    eax = edi;
    ebx = 0x00000080;
    sub_1730a();
    edx = eax;
    eax = 0x00000029;
    sub_36a16();
    goto loc_2a0bf;
loc_2a09a: // 0160:2a09a
    eax = memoryAGet32(ds, esi + 2204714);
    if (!eax)
        goto loc_2a0a9;
    if (eax != 0x00000002)
        goto loc_2a0bf;
loc_2a0a9: // 0160:2a0a9
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x0000017e)
        goto loc_2a0bf;
    edx = 0x00000080;
    eax = edi;
    sub_25cbc();
loc_2a0bf: // 0160:2a0bf
    ecx = 0;
    memoryASet32(ds, esi + 2204686, ecx);
    memoryASet32(ds, 0x21af24, ecx);
loc_2a0cd: // 0160:2a0cd
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000008)
        goto loc_29a75;
    esp += 0x00000018;
    goto loc_2b3b3;
    // gap 4817 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2a0e2() // 0160:2a0e2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_2a0e8: // 0160:2a0e8
    if (memoryAGet32(ds, esi + 2204686) == 0x00000000)
        goto loc_2a144;
    ebx = memoryAGet32(ds, esi + 2204714);
    if (ebx == 0x00000027)
        goto loc_2a144;
    if (ebx == 0x0000002f)
        goto loc_2a144;
    if (ebx == 0x00000001)
        goto loc_2a144;
    eax = memoryAGet32(ds, esi + 2204690);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -2;
    eax = memoryAGet32(ds, esi + 2204686);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000007);
    edx = eax + -2;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, esi + 2204710);
    sub_17029();
loc_2a144: // 0160:2a144
    esi += 0x00000024;
    if (esi != 0x00000120)
        goto loc_2a0e8;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2a154() // 0160:2a154 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp, edx);
loc_2a166: // 0160:2a166
    eax = memoryAGet32(ds, esp);
    if (memoryAGet32(ds, eax + 934608) == 0x00000000)
        goto loc_2a238;
    edi = memoryAGet32(ds, esp + 4);
    edi <<= 7;
    ebp = edi + 128;
    ebx = edi * 0x00000012;
    ebp = ebp * 0x00000012;
    goto loc_2a230;
loc_2a18e: // 0160:2a18e
    eax = memoryAGet32(ds, ebx + 639120);
    if (!eax)
        goto loc_2a22c;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x21af0c);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 639124);
    esi -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, 0x21af10);
    edx = esi;
    eax -= ecx;
    esi = memoryAGet32(ds, 0x21af08);
    edx <<= 16;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    esi = eax;
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ecx = eax;
    if ((int32_t)esi <= 0)
        goto loc_2a224;
    if ((int32_t)esi >= (int32_t)0x00000140)
        goto loc_2a224;
    if ((int32_t)eax <= 0)
        goto loc_2a224;
    if ((int32_t)eax >= (int32_t)0x000000a8)
        goto loc_2a224;
    ecx = eax * 0x00000140;
    al = memoryAGet(ds, ebx + 639136);
    memoryASet(ds, ecx + esi + 1060016, al);
    goto loc_2a22c;
loc_2a224: // 0160:2a224
    esi = 0;
    memoryASet32(ds, ebx + 639120, esi);
loc_2a22c: // 0160:2a22c
    ebx += 0x00000012;
    edi++;
loc_2a230: // 0160:2a230
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_2a18e;
loc_2a238: // 0160:2a238
    ecx = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp + 4);
    ecx += 0x00000004;
    esi++;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    if ((int32_t)esi < (int32_t)0x00000008)
        goto loc_2a166;
    esp += 0x00000008;
    goto loc_2b3b3;
    // gap 4440 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2a25b() // 0160:2a25b +long +stackDrop4
{
    esp -= 4;
    goto loc_2a25b;
loc_284bb: // 0160:284bb
    esp += 0x00000034;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 7575 bytes
loc_2a25b: // 0160:2a25b
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)ebx <= (int32_t)0x00000032)
        goto loc_2a2a0;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    edx = eax;
    edx <<= 9;
    ecx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 8, memoryAGet32(ds, esp + 8) + eax);
    goto loc_2a2ad;
loc_2a2a0: // 0160:2a2a0
    edi = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    edi += eax;
    memoryASet32(ds, esp + 8, edi);
loc_2a2ad: // 0160:2a2ad
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 68);
    eax += 0x00000006;
    eax += edx;
    ecx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ecx += eax;
    eax = ebx + 16;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = (int32_t)ebx * (int32_t)ebx;
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 44, ebx);
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 16, eax);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edx = eax;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    ebx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = 0;
    memoryASet32(ds, esp + 4, ecx);
    ecx = 0;
    memoryASet32(ds, esp + 12, eax);
loc_2a327: // 0160:2a327
    edi = memoryAGet32(ds, ecx + 2201958);
    if (!edi)
        goto loc_2a6c9;
    ebp = memoryAGet32(ds, esp + 8);
    edx = edi;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, ecx + 2201962);
    eax = memoryAGet32(ds, esp + 4);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    edx = (int32_t)edx * (int32_t)ebp;
    edi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edx += eax;
    memoryASet32(ds, esp + 48, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 44);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_2a690;
    edx -= eax;
    edx = edx * 0x000000eb;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, esp);
    edx = (int32_t)edx * (int32_t)eax;
    memoryASet32(ds, 0x21ac4e, 0x00000001);
    ebx = memoryAGet32(ds, esp + 44);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_2a3bf;
    ebx += memoryAGet32(ds, esp + 16);
loc_2a3bf: // 0160:2a3bf
    if (ebx)
        goto loc_2a3ca;
    ebx = 0x00000001;
    goto loc_2a3d3;
loc_2a3ca: // 0160:2a3ca
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_2a3d3;
    ebx = eax;
loc_2a3d3: // 0160:2a3d3
    edx = ebx;
    eax = esi;
    sub_1d712();
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, esp + 40, ebx);
    if (esi != edx)
        goto loc_2a3f4;
    memoryASet32(ds, 0x21ae9c, 0x00000001);
loc_2a3f4: // 0160:2a3f4
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_2a45d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x21ac68))
        goto loc_2a41e;
    memoryASet32(ds, 0x21aea0, 0x00000001);
loc_2a41e: // 0160:2a41e
    edx = memoryAGet32(ds, ecx + 2202034);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_2a42a;
    ebx = edx;
loc_2a42a: // 0160:2a42a
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x5caa0))
        goto loc_2a45d;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x21ae90);
    memoryASet32(ds, 0x5caa0, ebx);
    memoryASet32(ds, 0x5caa4, eax);
    if (eax)
        goto loc_2a45d;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_2a45d;
    memoryASet32(ds, 0x21ae8c, 0x00000001);
loc_2a45d: // 0160:2a45d
    edx = edi;
    eax = ebp;
    sub_296d3();
    ebx = eax;
    if (eax)
        goto loc_2a476;
    ebx = 0x00000200;
    edi = 0xfffffe00;
loc_2a476: // 0160:2a476
    eax = memoryAGet32(ds, ecx + 2201954);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)ebp;
    ebx <<= 4;
    edx <<= 9;
    memoryASet32(ds, ecx + 2201954, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 40);
    edx = (int32_t)edx * (int32_t)edi;
    ebp = memoryAGet32(ds, ecx + 2201950);
    edx <<= 9;
    ebp += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    edx = memoryAGet32(ds, ecx + 2201954);
    memoryASet32(ds, ecx + 2201950, ebp);
    edx += eax;
    ebx = memoryAGet32(ds, ecx + 2201950);
    memoryASet32(ds, ecx + 2201954, edx);
    if ((int32_t)ebx <= 0)
        goto loc_2a4e4;
    memoryASet32(ds, ecx + 2201982, 0x00000001);
    goto loc_2a4ee;
loc_2a4e4: // 0160:2a4e4
    memoryASet32(ds, ecx + 2201982, 0xffffffff);
loc_2a4ee: // 0160:2a4ee
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)edi <= 0)
        goto loc_2a574;
    eax = memoryAGet32(ds, ecx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_2a574;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, edi + ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2a57e;
loc_2a574: // 0160:2a574
    memoryASet32(ds, ecx + 2201962, memoryAGet32(ds, ecx + 2201962) - 0x00000200);
loc_2a57e: // 0160:2a57e
    edx = 0;
    ebx = memoryAGet32(ds, ecx + 2201990);
    memoryASet32(ds, ecx + 2201994, edx);
    if (ebx)
        goto loc_2a5b4;
    eax = esi;
    edx = 0x00000002;
    sub_1730a();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000006;
    edx = edi;
    sub_36a16();
loc_2a5b4: // 0160:2a5b4
    memoryASet32(ds, ecx + 2201990, 0x00000001);
    if (esi != memoryAGet32(ds, 0x21ac64))
        goto loc_2a690;
    if (memoryAGet32(ds, 0x21ad2c) != 0x00000002)
        goto loc_2a5d8;
    sub_2dd1b();
loc_2a5d8: // 0160:2a5d8
    if ((int32_t)memoryAGet32(ds, 0x21ad30) < (int32_t)0x00000002)
        goto loc_2a5e6;
    sub_3001b();
loc_2a5e6: // 0160:2a5e6
    if (memoryAGet32(ds, ecx + 2202006) != 0x0000001f)
        goto loc_2a607;
    edi = 0;
    eax = 0x00000010;
    memoryASet32(ds, 0x21acec, edi);
    memoryASet32(ds, 0x21af24, edi);
    memoryASet32(ds, 0x21ac78, eax);
loc_2a607: // 0160:2a607
    if (memoryAGet32(ds, 0x21accc) == 0x00000000)
        goto loc_2a61a;
    memoryASet32(ds, 0x21ac78, 0x00000010);
loc_2a61a: // 0160:2a61a
    edi = 0;
    memoryASet32(ds, 0x21acec, edi);
    memoryASet32(ds, 0x21accc, edi);
    memoryASet32(ds, 0x21ad0c, edi);
    memoryASet32(ds, 0x21ad10, edi);
    memoryASet32(ds, 0x21ad18, edi);
    if (memoryAGet32(ds, ecx + 2202006) != 0x00000006)
        goto loc_2a664;
    ebp = memoryAGet32(ds, 0x21ae80);
    if (ebp)
        goto loc_2a664;
    eax = 0x00000001;
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21ae80, eax);
    memoryASet32(ds, 0x21ad88, eax);
    goto loc_2a690;
loc_2a664: // 0160:2a664
    eax = 0x00000001;
    edx = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21adb4, eax);
    if ((int32_t)edx <= 0)
        goto loc_2a690;
    ebx = 0x00000002;
    memoryASet32(ds, 0x21ad88, eax);
    edi = 0;
    memoryASet32(ds, 0x21ae80, ebx);
    memoryASet32(ds, 0x21acc0, edi);
loc_2a690: // 0160:2a690
    eax = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 44))
        goto loc_2a6c9;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_2a6c9;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x21ac68))
        goto loc_2a6c1;
    memoryASet32(ds, esp + 28, 0x00000001);
    goto loc_2a6c9;
loc_2a6c1: // 0160:2a6c1
    memoryASet32(ds, esp + 32, 0x00000001);
loc_2a6c9: // 0160:2a6c9
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_2a327;
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_2a71b;
    edi = memoryAGet32(ds, esp + 36);
    if (!edi)
        goto loc_2a71b;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, 0x5ca9c, edi);
    edx = edi + -1;
    if (edx != memoryAGet32(ds, eax + 2202050))
        goto loc_2a71b;
    ecx = 0x00000001;
    esi = 0xffffffff;
    memoryASet32(ds, 0x21aebc, ecx);
    memoryASet32(ds, eax + 2202050, esi);
loc_2a71b: // 0160:2a71b
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_284bb;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_284bb;
    if (memoryAGet32(ds, esp + 32) != 0x00000000)
        goto loc_2a745;
    if (memoryAGet32(ds, esp + 28) == 0x00000000)
        goto loc_284bb;
loc_2a745: // 0160:2a745
    ebx = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x5ca9c, ebx);
    sub_24709();
    if (eax)
        goto loc_284bb;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x21aeb4, eax);
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x21aeb8, eax);
    goto loc_284bb;
}
void sub_2a77b() // 0160:2a77b +long +stackDrop4
{
    esp -= 4;
    goto loc_2a77b;
loc_284be: // 0160:284be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 8887 bytes
loc_2a77b: // 0160:2a77b
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    push32(eax);
    push32(edx);
    push32(ebx);
    push32(ecx);
    edx = 0;
    memoryASet32(ds, esp + 36, edx);
    memoryASet32(ds, esp + 28, edx);
    memoryASet32(ds, esp + 32, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = memoryAGet32(ds, esp + 72);
    edx = eax;
    eax += edi;
    eax += 0x00000003;
    ebp = memoryAGet32(ds, esp + 8);
    eax <<= 9;
    ebp += eax;
    eax = ebx + 16;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp + 16, eax);
    eax = ebx;
    eax = (int32_t)eax * (int32_t)ebx;
    memoryASet32(ds, esp + 48, eax);
    eax = ebx;
    esi = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    edx <<= 9;
    memoryASet32(ds, esp + 40, eax);
    eax = memoryAGet32(ds, esp);
    esi += edx;
    edx = eax;
    ebx = 0x0000000a;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 24, eax);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    memoryASet32(ds, esp + 12, esi);
    esi = 0;
    memoryASet32(ds, esp + 8, ebp);
    memoryASet32(ds, esp + 20, eax);
loc_2a811: // 0160:2a811
    eax = memoryAGet32(ds, ecx + 2201958);
    if (!eax)
        goto loc_2ac6e;
    ebx = memoryAGet32(ds, esp + 12);
    eax -= ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, ecx + 2201962);
    edx -= edi;
    ebp = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ebp;
    edx = (int32_t)edx * (int32_t)ebp;
    edi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edx += eax;
    memoryASet32(ds, esp + 52, edx);
    eax = edx;
    edx = memoryAGet32(ds, esp + 48);
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_2ac6e;
    memoryASet32(ds, 0x21ac4e, 0x00000001);
    ebx = edx;
    edx = memoryAGet32(ds, esp);
    ebx -= eax;
    edx = (int32_t)edx * (int32_t)ebx;
    ebx = memoryAGet32(ds, esp + 48);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = eax;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 20))
        goto loc_2a896;
    ebx += memoryAGet32(ds, esp + 24);
loc_2a896: // 0160:2a896
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x00000027)
        goto loc_2a8bc;
    if ((int32_t)memoryAGet32(ds, ecx + 2202038) < (int32_t)0x00000032)
        goto loc_2a8b6;
    ebx = 0;
    goto loc_2a8bc;
loc_2a8b6: // 0160:2a8b6
    ebx = memoryAGet32(ds, eax + 2202046);
loc_2a8bc: // 0160:2a8bc
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x0000002f)
        goto loc_2a8e2;
    if ((int32_t)memoryAGet32(ds, ecx + 2202038) < (int32_t)0x00000050)
        goto loc_2a8dc;
    ebx = 0;
    goto loc_2a8e2;
loc_2a8dc: // 0160:2a8dc
    ebx = memoryAGet32(ds, eax + 2202046);
loc_2a8e2: // 0160:2a8e2
    eax = memoryAGet32(ds, esp);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_2a8eb;
    ebx = eax;
loc_2a8eb: // 0160:2a8eb
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2202006);
    if (edx == 0x00000006)
        goto loc_2a90a;
    if (edx == 0x00000027)
        goto loc_2a90a;
    if (edx != 0x0000002f)
        goto loc_2a952;
loc_2a90a: // 0160:2a90a
    edi = memoryAGet32(ds, esp + 12);
    eax = memoryAGet32(ds, ecx + 2201958);
    eax -= edi;
    if ((int32_t)eax < 0)
        goto loc_2a920;
    ebp = memoryAGet32(ds, esp + 40);
    goto loc_2a929;
loc_2a920: // 0160:2a920
    ebp = memoryAGet32(ds, esp + 4);
    ebp = -ebp;
    ebp <<= 9;
loc_2a929: // 0160:2a929
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, ecx + 2201962);
    eax -= edx;
    if ((int32_t)eax < 0)
        goto loc_2a93f;
    edi = memoryAGet32(ds, esp + 40);
    goto loc_2a948;
loc_2a93f: // 0160:2a93f
    edi = memoryAGet32(ds, esp + 4);
    edi = -edi;
    edi <<= 9;
loc_2a948: // 0160:2a948
    memoryASet32(ds, esp + 44, 0x0000001e);
    goto loc_2a956;
loc_2a952: // 0160:2a952
    memoryASet32(ds, esp + 44, ebx);
loc_2a956: // 0160:2a956
    edx = ebx;
    eax = esi;
    sub_1d712();
    if (esi != memoryAGet32(ds, 0x21ac64))
        goto loc_2a971;
    memoryASet32(ds, 0x21ae9c, 0x00000001);
loc_2a971: // 0160:2a971
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_2a9c6;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x21ac68))
        goto loc_2a99b;
    memoryASet32(ds, 0x21aea0, 0x00000001);
loc_2a99b: // 0160:2a99b
    edx = memoryAGet32(ds, ecx + 2202034);
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_2a9a7;
    ebx = edx;
loc_2a9a7: // 0160:2a9a7
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x5caa0))
        goto loc_2a9c6;
    eax = esi + 1;
    memoryASet32(ds, esp + 36, eax);
    eax = memoryAGet32(ds, 0x21ae90);
    memoryASet32(ds, 0x5caa0, ebx);
    memoryASet32(ds, 0x5caa4, eax);
loc_2a9c6: // 0160:2a9c6
    edx = edi;
    eax = ebp;
    sub_296d3();
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax)
        goto loc_2a9ec;
    ebx = 0x00000001;
    edi = 0xfffffe00;
loc_2a9ec: // 0160:2a9ec
    eax = memoryAGet32(ds, ecx + 2201954);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = ebx * 0x00000014;
    edx = memoryAGet32(ds, esp + 44);
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, ecx + 2201954, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 2201950, memoryAGet32(ds, ecx + 2201950) + eax);
    edx = memoryAGet32(ds, esp + 44);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    al |= 0x01;
    ebx = memoryAGet32(ds, ecx + 2201954);
    ebx += eax;
    edi = memoryAGet32(ds, ecx + 2201950);
    memoryASet32(ds, ecx + 2201954, ebx);
    if ((int32_t)edi <= 0)
        goto loc_2aa4c;
    memoryASet32(ds, ecx + 2201982, 0x00000001);
    goto loc_2aa56;
loc_2aa4c: // 0160:2aa4c
    memoryASet32(ds, ecx + 2201982, 0xffffffff);
loc_2aa56: // 0160:2aa56
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    if ((int32_t)edi <= 0)
        goto loc_2aade;
    eax = memoryAGet32(ds, ecx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if (eax >= 0x000003c0)
        goto loc_2aade;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax * 0x000003c0;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = edi * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, edi + ebx + 1643120);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2aae8;
loc_2aade: // 0160:2aade
    memoryASet32(ds, ecx + 2201962, memoryAGet32(ds, ecx + 2201962) - 0x00000200);
loc_2aae8: // 0160:2aae8
    ebx = 0;
    memoryASet32(ds, ecx + 2201994, ebx);
    edi = memoryAGet32(ds, 0x21ad18);
    if (!edi)
        goto loc_2ab54;
    if (memoryAGet32(ds, 0x217aa8) != 0x00000002)
        goto loc_2ab14;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    goto loc_2ab23;
loc_2ab14: // 0160:2ab14
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<2) & 0x80000000);
    edx <<= 3;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x03);
loc_2ab23: // 0160:2ab23
    ebx = eax;
    if (ebx)
        goto loc_2ab2e;
    ebx = 0x00000001;
loc_2ab2e: // 0160:2ab2e
    eax = memoryAGet32(ds, ecx + 2201950);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 2201950, eax);
    eax = memoryAGet32(ds, ecx + 2201954);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, ecx + 2201954, eax);
loc_2ab54: // 0160:2ab54
    if (memoryAGet32(ds, ecx + 2201990) != 0x00000000)
        goto loc_2ab81;
    eax = esi;
    edx = 0x00000002;
    sub_1730a();
    edi = eax;
    eax = 0;
    ebx = 0x000000ff;
    sub_24709();
    eax += 0x00000006;
    edx = edi;
    sub_36a16();
loc_2ab81: // 0160:2ab81
    memoryASet32(ds, ecx + 2201990, 0x00000001);
    if (esi != memoryAGet32(ds, 0x21ac64))
        goto loc_2ac35;
    if (memoryAGet32(ds, 0x21ad2c) != 0x00000002)
        goto loc_2aba5;
    sub_2dd1b();
loc_2aba5: // 0160:2aba5
    if ((int32_t)memoryAGet32(ds, 0x21ad30) < (int32_t)0x00000002)
        goto loc_2abb3;
    sub_3001b();
loc_2abb3: // 0160:2abb3
    if (memoryAGet32(ds, ecx + 2202006) != 0x0000001f)
        goto loc_2abd5;
    edx = 0;
    edi = 0x00000010;
    memoryASet32(ds, 0x21acec, edx);
    memoryASet32(ds, 0x21af24, edx);
    memoryASet32(ds, 0x21ac78, edi);
loc_2abd5: // 0160:2abd5
    ebp = 0;
    memoryASet32(ds, 0x21ad18, ebp);
    if (memoryAGet32(ds, ecx + 2202006) != 0x00000006)
        goto loc_2ac08;
    if (memoryAGet32(ds, 0x21ae80) != 0x00000000)
        goto loc_2ac08;
    ebx = 0x00000001;
    memoryASet32(ds, 0x21acc0, ebp);
    memoryASet32(ds, 0x21ae80, ebx);
    memoryASet32(ds, 0x21ad88, ebx);
    goto loc_2ac35;
loc_2ac08: // 0160:2ac08
    ebx = 0x00000001;
    edi = memoryAGet32(ds, 0x21acc0);
    memoryASet32(ds, 0x21adb4, ebx);
    if ((int32_t)edi <= 0)
        goto loc_2ac35;
    ebp = 0x00000002;
    memoryASet32(ds, 0x21ad88, ebx);
    eax = 0;
    memoryASet32(ds, 0x21ae80, ebp);
    memoryASet32(ds, 0x21acc0, eax);
loc_2ac35: // 0160:2ac35
    eax = memoryAGet32(ds, esp + 52);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + 48))
        goto loc_2ac6e;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_2ac6e;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, 0x21ac68))
        goto loc_2ac66;
    memoryASet32(ds, esp + 32, 0x00000001);
    goto loc_2ac6e;
loc_2ac66: // 0160:2ac66
    memoryASet32(ds, esp + 28, 0x00000001);
loc_2ac6e: // 0160:2ac6e
    esi++;
    ecx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_2a811;
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_2acc0;
    ecx = memoryAGet32(ds, esp + 36);
    if (!ecx)
        goto loc_2acc0;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, 0x5ca9c, ecx);
    edx = ecx + -1;
    if (edx != memoryAGet32(ds, eax + 2202050))
        goto loc_2acc0;
    ebp = 0x00000001;
    edx = 0xffffffff;
    memoryASet32(ds, 0x21aebc, ebp);
    memoryASet32(ds, eax + 2202050, edx);
loc_2acc0: // 0160:2acc0
    if (memoryAGet32(ds, 0x5ca9c) != 0x00000000)
        goto loc_2ad0b;
    if (memoryAGet32(ds, esp + 36) != 0x00000000)
        goto loc_2ad0b;
    if (memoryAGet32(ds, esp + 28) != 0x00000000)
        goto loc_2acde;
    if (memoryAGet32(ds, esp + 32) == 0x00000000)
        goto loc_2ad0b;
loc_2acde: // 0160:2acde
    ebp = 0xffffffff;
    edx = 0x00000003;
    eax = 0;
    memoryASet32(ds, 0x5ca9c, ebp);
    sub_24709();
    if (eax)
        goto loc_2ad0b;
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, 0x21aeb4, eax);
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, 0x21aeb8, eax);
loc_2ad0b: // 0160:2ad0b
    esp += 0x00000038;
    goto loc_284be;
}
void sub_2ad13() // 0160:2ad13 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x21ad80, edx);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = ebx;
    ebp = (int32_t)ebp * (int32_t)ebx;
    ecx = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, esp);
    eax <<= 9;
    ebx = 0;
    ecx += eax;
    esi += eax;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_2ad4b: // 0160:2ad4b
    edi = memoryAGet32(ds, ebx + 2201070);
    if (!edi)
        goto loc_2ae19;
    eax = memoryAGet32(ds, esp + 4);
    edx = edi;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, ebx + 2201074);
    edx -= ecx;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = esi;
    edi = (int32_t)edi * (int32_t)esi;
    ecx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    edi += eax;
    if ((int32_t)edi >= (int32_t)ebp)
        goto loc_2ae19;
    eax = ebp;
    eax -= edi;
    edx = eax * 0x00000032;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    edi = eax;
    edx = ecx;
    eax = esi;
    sub_296d3();
    memoryASet32(ds, esp + 8, eax);
    if (eax)
        goto loc_2adcb;
    eax = 0x00000200;
    ecx = 0xfffffe00;
    memoryASet32(ds, esp + 8, eax);
loc_2adcb: // 0160:2adcb
    edx = esi;
    edx = (int32_t)edx * (int32_t)edi;
    esi = memoryAGet32(ds, esp + 8);
    edx <<= 9;
    esi <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)edi;
    edx <<= 9;
    memoryASet32(ds, ebx + 2201086, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = memoryAGet32(ds, ebx + 2201074);
    memoryASet32(ds, ebx + 2201090, eax);
    edx -= 0x00000200;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 2201074, edx);
    memoryASet32(ds, 0x21ad80, ecx);
loc_2ae19: // 0160:2ae19
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_2ad4b;
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_2ae30() // 0160:2ae30 +long
{
    esp -= 4;
    goto loc_2ae30;
loc_2ae28: // 0160:2ae28
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_2ae30: // 0160:2ae30
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    edi = ebx;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    ebx = memoryAGet32(ds, esp);
    edx += eax;
    ebx += eax;
    eax = edi;
    eax = (int32_t)eax * (int32_t)edi;
    memoryASet32(ds, esp, ebx);
    memoryASet32(ds, esp + 4, edx);
    ebp = memoryAGet32(ds, esp);
    ebx = 0;
    memoryASet32(ds, esp + 8, eax);
loc_2ae69: // 0160:2ae69
    ecx = memoryAGet32(ds, ebx + 2200830);
    if (!ecx)
        goto loc_2af14;
    esi = memoryAGet32(ds, esp + 4);
    edx = ecx;
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, ebx + 2200834);
    edx -= ebp;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)ecx;
    esi = eax;
    eax = (int32_t)eax * (int32_t)eax;
    eax += edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_2af14;
    if ((int32_t)ecx < 0)
        goto loc_2aeca;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    goto loc_2aedb;
loc_2aeca: // 0160:2aeca
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    al |= 0x01;
    eax = -eax;
loc_2aedb: // 0160:2aedb
    eax <<= 9;
    eax = sar32(eax, 0x05);
    memoryASet32(ds, ebx + 2200838, eax);
    eax = esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = edi;
    edx -= eax;
    eax = edx;
    ecx = memoryAGet32(ds, ebx + 2200834);
    eax <<= 9;
    ecx -= 0x00000200;
    eax = sar32(eax, 0x06);
    memoryASet32(ds, ebx + 2200834, ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2200842, eax);
loc_2af14: // 0160:2af14
    ebx += 0x00000018;
    if (ebx != 0x000000f0)
        goto loc_2ae69;
    goto loc_2ae28;
}
void sub_2af28() // 0160:2af28 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebp = eax;
    memoryASet32(ds, esp + 4, edx);
    edx = ebx;
    edx <<= 2;
    edx -= ebx;
    edx <<= 2;
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    ebx = eax;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = (int32_t)ebx * (int32_t)ebx;
    edi = 0;
    esi = 0;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 9;
    memoryASet32(ds, esp, ebx);
    edx += eax;
    ebp += eax;
    memoryASet32(ds, esp + 4, edx);
loc_2af6f: // 0160:2af6f
    ebx = memoryAGet32(ds, esi + 2205082);
    if (!ebx)
        goto loc_2b002;
    edx = ebx;
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esp + 4);
    edx = memoryAGet32(ds, esi + 2205086);
    edx -= ecx;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = (int32_t)ebx * (int32_t)ebx;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp);
    eax += ebx;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_2b002;
    if (memoryAGet32(ds, esi + 2205106) == 0x00000000)
        goto loc_2afc8;
    eax = edi;
    sub_2d0d6();
loc_2afc8: // 0160:2afc8
    push32(0x00000000);
    ecx = 0x00000032;
    ebx = 0x0000002d;
    edx = memoryAGet32(ds, esi + 2205086);
    eax = memoryAGet32(ds, esi + 2205082);
    edx -= 0x00003000;
    eax -= 0x00003000;
    sub_2704a();
    eax = 0x00000032;
    ecx = 0;
    memoryASet32(ds, 0x5ca80, eax);
    memoryASet32(ds, esi + 2205082, ecx);
loc_2b002: // 0160:2b002
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_2af6f;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_2b017() // 0160:2b017 +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = memoryAGet32(ds, esp + 24);
    memoryASet32(ds, esp + 4, eax);
    edi = edx;
    if ((int32_t)ebx > (int32_t)0x000003c0)
        goto loc_2b113;
    eax = ebx + esi;
    if ((int32_t)eax < 0)
        goto loc_2b113;
    edx = memoryAGet32(ds, esp + 28);
    edx += ecx;
    if ((int32_t)edx < 0)
        goto loc_2b113;
    if ((int32_t)ecx > (int32_t)0x00000190)
        goto loc_2b113;
    if ((int32_t)eax <= (int32_t)0x000003c0)
        goto loc_2b066;
    esi = 0x000003c0;
    esi -= ebx;
loc_2b066: // 0160:2b066
    if ((int32_t)ebx >= 0)
        goto loc_2b078;
    edx = memoryAGet32(ds, esp + 4);
    edx -= ebx;
    esi += ebx;
    memoryASet32(ds, esp + 4, edx);
    ebx = 0;
loc_2b078: // 0160:2b078
    eax = memoryAGet32(ds, esp + 28);
    eax += ecx;
    if ((int32_t)eax <= (int32_t)0x00000190)
        goto loc_2b090;
    eax = 0x00000190;
    eax -= ecx;
    memoryASet32(ds, esp + 28, eax);
loc_2b090: // 0160:2b090
    ebp = memoryAGet32(ds, esp + 36);
    ecx = (int32_t)ecx * (int32_t)ebp;
    edi += ecx;
    edi += ebx;
    if ((int32_t)esi <= 0)
        goto loc_2b113;
    if (memoryAGet32(ds, 0x590a0) == 0x00000000)
        goto loc_2b0c3;
    ebx = memoryAGet32(ds, esp + 32);
    push32(ebp);
    ecx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp + 8);
    push32(ebx);
    edx = edi;
    ebx = esi;
    sub_264e0();
loc_2b0c3: // 0160:2b0c3
    ecx = 0;
    ebp = 0x00000080;
    memoryASet32(ds, esp, ecx);
    goto loc_2b10a;
loc_2b0cf: // 0160:2b0cf
    edx = memoryAGet32(ds, esp + 4);
    eax = edi;
    ebx = 0;
    goto loc_2b0eb;
loc_2b0d9: // 0160:2b0d9
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_2b0e8;
    memoryASet(ds, eax, 0x80);
loc_2b0e8: // 0160:2b0e8
    edx++;
    eax++;
    ebx++;
loc_2b0eb: // 0160:2b0eb
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_2b0d9;
    eax = memoryAGet32(ds, esp + 32);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 36);
    ebx += eax;
    eax = memoryAGet32(ds, esp);
    edi += ecx;
    eax++;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, eax);
loc_2b10a: // 0160:2b10a
    eax = memoryAGet32(ds, esp);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 28))
        goto loc_2b0cf;
loc_2b113: // 0160:2b113
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_2b11c() // 0160:2b11c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    memoryASet32(ds, esp, ecx);
    ecx = 0x00000041;
    edi = 0x00000043;
    ebp = 0x00000044;
    eax = edx;
    ebx <<= 4;
    eax <<= 4;
    memoryASet32(ds, ebx + 934640, ecx);
    eax -= edx;
    edx = 0x00191270;
    eax <<= 6;
    memoryASet32(ds, ebx + 934648, edi);
    edx += eax;
    memoryASet32(ds, ebx + 934652, ebp);
    edx += esi;
    eax = 0;
    esi = 0x00000042;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 934644, esi);
    esi = 0;
    goto loc_2b1a3;
loc_2b173: // 0160:2b173
    ecx = 0;
    cl = memoryAGet(ds, edx);
    if (ecx == 0x00000080)
        goto loc_2b19a;
    edi = memoryAGet32(ds, esp + 4);
    if (ecx == memoryAGet32(ds, edi * 4 + 0xe42f0))
        goto loc_2b19a;
    ebx += 0x00000004;
    memoryASet32(ds, esp + 4, eax);
    memoryASet32(ds, ebx + 934636, ecx);
    eax++;
loc_2b19a: // 0160:2b19a
    edx += 0x00000780;
    esi += 0x00000002;
loc_2b1a3: // 0160:2b1a3
    if ((int32_t)esi >= (int32_t)memoryAGet32(ds, esp))
        goto loc_2b1ad;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_2b173;
loc_2b1ad: // 0160:2b1ad
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_2b1b4() // 0160:2b1b4 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    memoryASet32(ds, ebx * 4 + 0x239d1c, 0x00000001);
    ebx <<= 4;
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    ecx += ebx;
    ebx = eax;
    eax = ecx;
    ecx <<= 2;
    ecx -= eax;
    ebx <<= 3;
    ecx <<= 3;
    goto loc_2b23e;
loc_2b1e3: // 0160:2b1e3
    edx = 0x00000400;
    memoryASet32(ds, ebx + 2330908, esi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 2330912, edi);
    sub_24709();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 2330916, eax);
    eax = 0xfffffa00;
    ebx += 0x00000018;
    sub_24709();
    memoryASet32(ds, ebx + 2330896, eax);
    eax = memoryAGet32(ds, 0x5cac8);
    memoryASet32(ds, ebx + 2330904, eax);
    ah = memoryAGet(ds, 0x5cac8);
    ebp = 0;
    ah ^= 0x01;
    memoryASet32(ds, ebx + 2330900, ebp);
    memoryASet(ds, 0x5cac8, ah);
loc_2b23e: // 0160:2b23e
    if ((int32_t)ebx < (int32_t)ecx)
        goto loc_2b1e3;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_2b246() // 0160:2b246 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 16;
    ebx = eax;
    eax <<= 2;
    eax -= ebx;
    ebx = eax;
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    ebp = memoryAGet32(ds, 0x21aefc);
    eax <<= 3;
    ebx <<= 3;
    memoryASet32(ds, esp, eax);
    goto loc_2b39f;
loc_2b276: // 0160:2b276
    ecx = memoryAGet32(ds, ebx + 2330908);
    if (!ecx)
        goto loc_2b39c;
    eax = memoryAGet32(ds, ebx + 2330916);
    edi = memoryAGet32(ds, ebx + 2330912);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 2330920);
    ebp = memoryAGet32(ds, ebx + 2330920);
    edi += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, ebx + 2330912, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 2330912);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 2330908, esi);
    memoryASet32(ds, ebx + 2330920, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)eax <= 0)
        goto loc_2b37e;
    eax = memoryAGet32(ds, ebx + 2330908);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_2b37e;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_2b37e;
    eax = memoryAGet32(ds, ebx + 2330916);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2330916, eax);
    eax = memoryAGet32(ds, ebx + 2330920);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 2330920, eax);
loc_2b37e: // 0160:2b37e
    eax = memoryAGet32(ds, ebx + 2330924);
    eax += 0x00000004;
    memoryASet32(ds, ebx + 2330924, eax);
    if ((int32_t)eax < (int32_t)0x00000080)
        goto loc_2b39c;
    ecx = 0;
    memoryASet32(ds, ebx + 2330908, ecx);
loc_2b39c: // 0160:2b39c
    ebx += 0x00000018;
loc_2b39f: // 0160:2b39f
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_2b276;
    memoryASet32(ds, 0x21aefc, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2b3ba() // 0160:2b3ba +long
{
    esp -= 4;
    goto loc_2b3ba;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2b3ba: // 0160:2b3ba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_2b3c1: // 0160:2b3c1
    if (memoryAGet32(ds, esi + 2330908) == 0x00000000)
        goto loc_2b47e;
    if ((int32_t)memoryAGet32(ds, esi + 2330916) <= (int32_t)0x00000000)
        goto loc_2b429;
    eax = memoryAGet32(ds, esi + 2330912);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 2330908);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 2330924);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x00190050;
    goto loc_2b479;
loc_2b429: // 0160:2b429
    eax = memoryAGet32(ds, esi + 2330912);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 2330908);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 2330924);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000008);
    ecx = 0x00000008;
    eax <<= 3;
    edx = edi;
    eax += 0x00151590;
loc_2b479: // 0160:2b479
    sub_17029();
loc_2b47e: // 0160:2b47e
    esi += 0x00000018;
    if (esi != 0x00000c00)
        goto loc_2b3c1;
    goto loc_2b3b4;
}
void sub_2b492() // 0160:2b492 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    ebp = ecx;
    ecx = ebx;
    edx = 0x00000001;
    ecx <<= 2;
    ebx <<= 7;
    memoryASet32(ds, ecx + 934608, edx);
    edx = ebx;
    eax = ebp;
    edx <<= 3;
    eax <<= 3;
    edx += ebx;
    eax += ebp;
    edx += edx;
    eax += eax;
    ebx = edx;
    ebp = edx + eax;
    goto loc_2b523;
loc_2b4c7: // 0160:2b4c7
    edx = 0x00000400;
    memoryASet32(ds, ebx + 639120, edi);
    eax = 0xfffffc00;
    memoryASet32(ds, ebx + 639124, esi);
    sub_24709();
    edx = 0xfffffe00;
    memoryASet32(ds, ebx + 639128, eax);
    eax = 0xfffffa00;
    sub_24709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 639132, eax);
    eax = 0;
    sub_24709();
    eax += ecx;
    ebx += 0x00000012;
    al = memoryAGet(ds, eax * 4 + 0xe42f0);
    memoryASet(ds, ebx + 639118, al);
    ah = 0;
    memoryASet(ds, ebx + 639119, ah);
loc_2b523: // 0160:2b523
    if ((int32_t)ebx < (int32_t)ebp)
        goto loc_2b4c7;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_2b52b() // 0160:2b52b +long
{
    esp -= 4;
    goto loc_2b52b;
loc_2b3a8: // 0160:2b3a8
    memoryASet32(ds, 0x21aefc, ebp);
    eax = ebp;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 369 bytes
loc_2b52b: // 0160:2b52b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ecx = eax + 128;
    ebx = eax;
    eax <<= 3;
    ebx += eax;
    eax = ecx;
    eax <<= 3;
    eax += ecx;
    ebp = memoryAGet32(ds, 0x21aefc);
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp, eax);
    goto loc_2b680;
loc_2b55a: // 0160:2b55a
    ecx = memoryAGet32(ds, ebx + 639120);
    if (!ecx)
        goto loc_2b67d;
    eax = memoryAGet32(ds, ebx + 639128);
    edi = memoryAGet32(ds, ebx + 639124);
    esi = ecx + eax;
    eax = memoryAGet32(ds, ebx + 639132);
    ebp = memoryAGet32(ds, ebx + 639132);
    edi += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, ebx + 639124, edi);
    ebp += eax;
    eax = memoryAGet32(ds, ebx + 639124);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, ebx + 639120, esi);
    memoryASet32(ds, ebx + 639132, ebp);
    ebp = 0x00000032;
    esi = eax;
    if ((int32_t)eax <= 0)
        goto loc_2b67d;
    eax = memoryAGet32(ds, ebx + 639120);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_2b67d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = esi * 0x000003c0;
    eax += eax;
    eax += edi;
    edi = 0;
    di = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (!eax)
        goto loc_2b67d;
    eax = memoryAGet32(ds, ebx + 639132);
    edx = eax;
    ecx = 0x00000003;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 639132, eax);
    eax = memoryAGet32(ds, ebx + 639128);
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = -eax;
    memoryASet32(ds, ebx + 639128, eax);
    memoryASet(ds, ebx + 639137, memoryAGet(ds, ebx + 639137) + 1);
    eax = 0;
    al = memoryAGet(ds, ebx + 639137);
    if ((int32_t)eax <= (int32_t)0x00000005)
        goto loc_2b67d;
    eax = 0;
    memoryASet32(ds, ebx + 639120, eax);
loc_2b67d: // 0160:2b67d
    ebx += 0x00000012;
loc_2b680: // 0160:2b680
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp))
        goto loc_2b55a;
    goto loc_2b3a8;
}
void sub_2b68e() // 0160:2b68e +long
{
    esp -= 4;
    goto loc_2b68e;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 724 bytes
loc_2b68e: // 0160:2b68e
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000003d;
    ebx = edi;
    eax += 0x00000020;
    edx = ebp;
    sub_2b11c();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00004000;
    sub_2b492();
    ecx = 0x00000010;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00004000;
    sub_2b1b4();
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -4;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x0000003d);
    push32(0x0000003d);
    ebx = eax + -4;
    edx = 0x00191270;
    eax = 0x00181fb0;
    sub_2b017();
    goto loc_2b3b3;
}
void sub_2b772() // 0160:2b772 +long
{
    esp -= 4;
    goto loc_2b772;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 942 bytes
loc_2b768: // 0160:2b768
    sub_2b017();
    goto loc_2b3b3;
loc_2b772: // 0160:2b772
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x0000002f;
    ebx = edi;
    eax += 0x00000018;
    edx = ebp;
    sub_2b11c();
    ecx = 0x00000040;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00003000;
    sub_2b492();
    ecx = 0x0000000c;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00003000;
    sub_2b1b4();
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 6;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000029);
    push32(0x00000029);
    ebx = eax + -2;
    edx = 0x00191270;
    eax = 0x0017fc78;
    goto loc_2b768;
}
void sub_2b851() // 0160:2b851 +long
{
    esp -= 4;
    goto loc_2b851;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 942 bytes
loc_2b768: // 0160:2b768
    sub_2b017();
    goto loc_2b3b3;
    // gap 223 bytes
loc_2b851: // 0160:2b851
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0x00000015;
    ebx = edi;
    eax += 0x0000000c;
    edx = ebp;
    sub_2b11c();
    ecx = 0x00000020;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00001800;
    sub_2b492();
    ecx = 0x00000008;
    ebx = edi;
    edx = memoryAGet32(ds, esi * 8 + 0x21ab86);
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx += 0x00004000;
    eax += 0x00001800;
    sub_2b1b4();
    eax = memoryAGet32(ds, esi * 8 + 0x21ab86);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + 10;
    eax = memoryAGet32(ds, esi * 8 + 0x21ab82);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000019);
    push32(0x00000019);
    ebx = eax + -2;
    edx = 0x00191270;
    eax = 0x0017fc58;
    goto loc_2b768;
}
void sub_2b930() // 0160:2b930 +long
{
    esp -= 4;
    goto loc_2b930;
loc_2606c: // 0160:2606c
    esp += 0x0000000c;
    goto loc_2b3b3;
    // gap 21311 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1398 bytes
loc_2b930: // 0160:2b930
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = memoryAGet32(ds, 0x5ca80);
    if (!edx)
        goto loc_2b97b;
    ebx = edx + -1;
    memoryASet32(ds, 0x5ca80, ebx);
    if (ebx)
        goto loc_2b97b;
    edx = 0x00000007;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_2b97b;
    eax = 0x0003c000;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000011;
    sub_36a16();
loc_2b97b: // 0160:2b97b
    esi = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, esi);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
loc_2b98a: // 0160:2b98a
    if (memoryAGet32(ss, ebp + 934608) == 0x00000000)
        goto loc_2b9a1;
    eax = memoryAGet32(ds, esp);
    sub_2b52b();
    memoryASet32(ss, ebp + 934608, eax);
loc_2b9a1: // 0160:2b9a1
    if (memoryAGet32(ss, ebp + 2333980) == 0x00000000)
        goto loc_2b9b9;
    eax = memoryAGet32(ds, esp + 4);
    sub_2b246();
    memoryASet32(ss, ebp + 934608, eax);
loc_2b9b9: // 0160:2b9b9
    if (memoryAGet32(ds, esi + 2206594) == 0x00000000)
        goto loc_2bac7;
    memoryASet32(ds, 0x21aefc, 0x00000032);
    edi = memoryAGet32(ds, esi + 2206602);
    edi++;
    memoryASet32(ds, esi + 2206602, edi);
    if ((int32_t)edi < (int32_t)0x0000000a)
        goto loc_2b9ea;
    edx = 0;
    memoryASet32(ds, esi + 2206594, edx);
loc_2b9ea: // 0160:2b9ea
    if (memoryAGet32(ds, esi + 2206602) != 0x00000002)
        goto loc_2ba8f;
    ecx = memoryAGet32(ds, 0x5c6d8);
    edi = memoryAGet32(ds, esi + 2206606);
    if (ecx)
        goto loc_2ba1a;
    if (edi == 0x00000017)
        goto loc_2ba1a;
    if (edi == 0x00000038)
        goto loc_2ba1a;
    if (memoryAGet32(ds, 0x21adc0) == 0x00000000)
        goto loc_2ba36;
loc_2ba1a: // 0160:2ba1a
    if (memoryAGet32(ds, 0x5c6d8) == 0x00000000)
        goto loc_2ba49;
    if (edi == 0x00000022)
        goto loc_2ba49;
    if (edi == 0x00000054)
        goto loc_2ba49;
    if (memoryAGet32(ds, 0x21adc0) != 0x00000000)
        goto loc_2ba49;
loc_2ba36: // 0160:2ba36
    ebx = edi;
    edx = memoryAGet32(ds, esi + 2206598);
    eax = memoryAGet32(ds, esi + 2206594);
    sub_2ae30();
loc_2ba49: // 0160:2ba49
    ebx = edi;
    edx = memoryAGet32(ds, esi + 2206598);
    eax = memoryAGet32(ds, esi + 2206594);
    sub_2ad13();
    ebx = edi;
    edx = memoryAGet32(ds, esi + 2206598);
    eax = memoryAGet32(ds, esi + 2206594);
    sub_2af28();
    ebx = edi;
    ecx = memoryAGet32(ds, esi + 2206614);
    edx = memoryAGet32(ds, esi + 2206598);
    push32(ecx);
    eax = memoryAGet32(ds, esi + 2206594);
    ecx = memoryAGet32(ds, esi + 2206610);
    sub_2a25b();
loc_2ba8f: // 0160:2ba8f
    if (memoryAGet32(ds, esi + 2206602) != 0x00000005)
        goto loc_2bac7;
    eax = memoryAGet32(ds, esi + 2206606);
    if ((int32_t)eax < (int32_t)0x00000032)
        goto loc_2baae;
    eax = memoryAGet32(ds, esp + 8);
    sub_2b68e();
    goto loc_2bac7;
loc_2baae: // 0160:2baae
    if ((int32_t)eax < (int32_t)0x00000020)
        goto loc_2babe;
    eax = memoryAGet32(ds, esp + 8);
    sub_2b772();
    goto loc_2bac7;
loc_2babe: // 0160:2babe
    eax = memoryAGet32(ds, esp + 8);
    sub_2b851();
loc_2bac7: // 0160:2bac7
    edx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 8);
    ebp += 0x00000004;
    esi += 0x00000018;
    edx += 0x00000080;
    ebx += 0x00000010;
    ecx++;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, ecx);
    if ((int32_t)ecx < (int32_t)0x00000008)
        goto loc_2b98a;
    goto loc_2606c;
}
void sub_2bafb() // 0160:2bafb +long +stackDrop4
{
    esp -= 4;
    goto loc_2bafb;
loc_284be: // 0160:284be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 13879 bytes
loc_2bafb: // 0160:2bafb
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    edi = edx;
    ebp = ebx;
    memoryASet32(ds, esp, ecx);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -10;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000015);
    push32(0x00000015);
    ebx = eax + -10;
    edx = 0x00191270;
    eax = 0x0017fc40;
    sub_2b017();
    if ((int32_t)ebp <= 0)
        goto loc_2bb54;
    ecx = 0xffffffff;
    goto loc_2bb59;
loc_2bb54: // 0160:2bb54
    ecx = 0x00000001;
loc_2bb59: // 0160:2bb59
    edx = memoryAGet32(ds, esp + 24);
    esi += 0x00000c00;
    edi += 0x00000400;
    if (!edx)
        goto loc_2bc11;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    ebp = esi;
    ebp -= eax;
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    memoryASet32(ds, 0xe42d0, 0x00000001);
    ebx = edi;
    ebx -= eax;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0;
loc_2bba8: // 0160:2bba8
    eax = memoryAGet32(ds, esp + 4);
    edx = 0x00000600;
    memoryASet32(ds, ebx + 639124, eax);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 639120, ebp);
    sub_24709();
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 639128, eax);
    eax = 0xfffffc00;
    sub_24709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 639132, eax);
    eax = 0;
    ebx += 0x00000012;
    sub_24709();
    al = memoryAGet(ds, eax * 4 + 0xe42f0);
    memoryASet(ds, ebx + 639118, al);
    ah = 0;
    memoryASet(ds, ebx + 639119, ah);
    if (ebx != 0x00000900)
        goto loc_2bba8;
loc_2bc11: // 0160:2bc11
    if (ecx != 0x00000001)
        goto loc_2bc1c;
    esi += 0x00001400;
loc_2bc1c: // 0160:2bc1c
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    push32(0x00000000);
    ebx = 0x00000014;
    edi -= 0x00002000;
    esi -= 0x00002000;
    edx = edi;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = esi;
    sub_2a77b();
    ebx = 0x00000014;
    edx = edi;
    eax = esi;
    sub_2ad13();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_2af28();
    esp += 0x00000008;
    goto loc_284be;
}
void sub_2bc6c() // 0160:2bc6c +long +stackDrop4
{
    esp -= 4;
    goto loc_2bc6c;
loc_284be: // 0160:284be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 14248 bytes
loc_2bc6c: // 0160:2bc6c
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    esi = eax;
    edi = edx;
    ebp = ebx;
    edx = 0;
    memoryASet32(ds, esp + 4, edx);
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000);
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    ecx = ebx;
    ecx -= 0x00000004;
    edx = esi;
    ecx -= eax;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<11) & 0x80000000);
    edx <<= 12;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0c);
    push32(0x000003c0);
    push32(0x00000140);
    push32(0x00000009);
    push32(0x00000009);
    ebx -= 0x00000004;
    edx = 0x00191270;
    ebx -= eax;
    eax = 0x0017fc30;
    sub_2b017();
    if ((int32_t)ebp <= 0)
        goto loc_2bcf2;
    ebp = 0xffffffff;
    goto loc_2bcf7;
loc_2bcf2: // 0160:2bcf2
    ebp = 0x00000001;
loc_2bcf7: // 0160:2bcf7
    ebx = 0;
    goto loc_2bd0f;
loc_2bcfb: // 0160:2bcfb
    if (memoryAGet32(ds, ebx * 4 + 0xe42d0) != 0x00000000)
        goto loc_2bd0e;
    memoryASet32(ds, esp + 4, ebx);
    ebx = 0x00000008;
loc_2bd0e: // 0160:2bd0e
    ebx++;
loc_2bd0f: // 0160:2bd0f
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_2bcfb;
    ebx = memoryAGet32(ds, esp + 28);
    edi += 0x00000400;
    if (!ebx)
        goto loc_2bdc4;
    eax = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    memoryASet32(ds, eax + 934608, 0x00000001);
    ecx = memoryAGet32(ds, esp + 4);
    ecx <<= 7;
    edx = ecx + 64;
    memoryASet32(ds, esp, eax);
    eax = ecx;
    eax <<= 3;
    ebx = ecx + eax;
    eax = edx;
    eax <<= 3;
    eax += edx;
    eax += eax;
    ebx += ebx;
    memoryASet32(ds, esp + 8, eax);
    goto loc_2bdbe;
loc_2bd5d: // 0160:2bd5d
    edx = 0x00000600;
    memoryASet32(ds, ebx + 639120, esi);
    eax = 0xfffffe00;
    memoryASet32(ds, ebx + 639124, edi);
    sub_24709();
    eax = (int32_t)eax * (int32_t)ebp;
    edx = 0x00000400;
    memoryASet32(ds, ebx + 639128, eax);
    eax = 0xfffffc00;
    sub_24709();
    edx = 0x00000003;
    memoryASet32(ds, ebx + 639132, eax);
    eax = 0;
    sub_24709();
    eax += memoryAGet32(ds, esp);
    ebx += 0x00000012;
    al = memoryAGet(ds, eax * 4 + 0xe42f0);
    memoryASet(ds, ebx + 639118, al);
    ah = 0;
    ecx++;
    memoryASet(ds, ebx + 639119, ah);
loc_2bdbe: // 0160:2bdbe
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_2bd5d;
loc_2bdc4: // 0160:2bdc4
    esi += 0x00000c00;
    if (ebp != 0x00000001)
        goto loc_2bdd5;
    esi += 0x00001400;
loc_2bdd5: // 0160:2bdd5
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    push32(0x00000000);
    edi -= 0x00001000;
    esi -= 0x00002000;
    edx = edi;
    ebx = 0x00000010;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = esi;
    edi -= 0x00000c00;
    sub_2a77b();
    ebx = 0x00000010;
    edx = edi;
    eax = esi;
    sub_2ad13();
    ebx = 0x00000020;
    edx = edi;
    eax = esi;
    sub_2af28();
    esp += 0x0000000c;
    goto loc_284be;
}
void sub_2be2b() // 0160:2be2b +long
{
    esp -= 4;
    goto loc_2be2b;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2673 bytes
loc_2be2b: // 0160:2be2b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_2be33: // 0160:2be33
    if (memoryAGet32(ds, esi + 2206594) == 0x00000000)
        goto loc_2bec5;
    if ((int32_t)memoryAGet32(ds, esi + 2206606) >= (int32_t)0x00000020)
        goto loc_2be50;
    ebp = 0xfffffff4;
    goto loc_2be52;
loc_2be50: // 0160:2be50
    ebp = 0;
loc_2be52: // 0160:2be52
    if ((int32_t)memoryAGet32(ds, esi + 2206606) < (int32_t)0x0000002d)
        goto loc_2be63;
    ebx = memoryAGet32(ds, esi + 2206602);
    goto loc_2be6c;
loc_2be63: // 0160:2be63
    ebx = memoryAGet32(ds, esi + 2206602);
    ebx += 0x0000000a;
loc_2be6c: // 0160:2be6c
    eax = memoryAGet32(ds, esi + 2206598);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx <<= 4;
    edi = memoryAGet32(ds, ebx + 367246);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, esi + 2206594);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + ebp;
    eax = memoryAGet32(ds, ebx + 367238) * 0x00000140;
    ecx = memoryAGet32(ds, ebx + 367242);
    eax += 0x00155270;
    ebp = memoryAGet32(ds, ebx + 367234);
    ebx = edi;
    eax += ebp;
    sub_17029();
loc_2bec5: // 0160:2bec5
    esi += 0x00000018;
    if (esi != 0x000000c0)
        goto loc_2be33;
    goto loc_2b3b3;
}
void sub_2bed9() // 0160:2bed9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edi);
    ecx = eax;
    ebx = edx;
    edx = 0;
    eax = 0;
loc_2bee4: // 0160:2bee4
    if ((int32_t)eax >= (int32_t)0x00000360)
        goto loc_2befa;
    if (memoryAGet32(ds, eax + 2201070) == 0x00000000)
        goto loc_2befa;
    eax += 0x00000024;
    edx++;
    goto loc_2bee4;
loc_2befa: // 0160:2befa
    if ((int32_t)edx < (int32_t)0x00000018)
        goto loc_2bf01;
    edx = 0;
loc_2bf01: // 0160:2bf01
    eax = edx;
    eax <<= 3;
    eax += edx;
    memoryASet32(ds, eax * 4 + 0x2195f2, ebx);
    edi = 0;
    memoryASet32(ds, eax * 4 + 0x2195ee, ecx);
    memoryASet32(ds, eax * 4 + 0x2195fe, edi);
    memoryASet32(ds, eax * 4 + 0x219602, edi);
    memoryASet32(ds, eax * 4 + 0x219606, edi);
    memoryASet32(ds, eax * 4 + 0x21960e, edi);
    memoryASet32(ds, eax * 4 + 0x21960a, 0x00000600);
    edi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2bf43() // 0160:2bf43 +long
{
    esp -= 4;
    goto loc_2bf43;
loc_2a0da: // 0160:2a0da
    esp += 0x00000018;
    goto loc_2b3b3;
    // gap 4817 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2953 bytes
loc_2bf43: // 0160:2bf43
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edi = 0;
    esi = 0;
    ebp = 0;
loc_2bf52: // 0160:2bf52
    if (ebp == memoryAGet32(ds, esi + 2201070))
        goto loc_2c259;
    eax = memoryAGet32(ds, 0x21ad44);
    ebx = memoryAGet32(ds, esi + 2201090);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 2201070);
    memoryASet32(ds, esi + 2201078, eax);
    eax = memoryAGet32(ds, esi + 2201074);
    memoryASet32(ds, esi + 2201082, eax);
    ecx = memoryAGet32(ds, esi + 2201070);
    edx = memoryAGet32(ds, esi + 2201074);
    eax = memoryAGet32(ds, esi + 2201086);
    memoryASet32(ds, esi + 2201090, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 2201090);
    memoryASet32(ds, esi + 2201070, ecx);
    edx += eax;
    eax = memoryAGet32(ds, esi + 2201070);
    memoryASet32(ds, esi + 2201074, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, esi + 2201074);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esi + 2201102);
    memoryASet32(ds, esp + 16, eax);
    if ((int32_t)ebp <= (int32_t)ebx)
        goto loc_2bfef;
    memoryASet32(ds, esi + 2201102, ebp);
loc_2bfef: // 0160:2bfef
    ecx = memoryAGet32(ds, esi + 2201102);
    if (ebp == ecx)
        goto loc_2c002;
    eax = ecx + -1;
    memoryASet32(ds, esi + 2201102, eax);
loc_2c002: // 0160:2c002
    if (ebp == memoryAGet32(ds, esi + 2201086))
        goto loc_2c014;
    memoryASet32(ds, 0x21aefc, 0x00000032);
loc_2c014: // 0160:2c014
    eax = memoryAGet32(ds, esi + 2201078);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, esi + 2201082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 2201086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<5) & 0x80000000);
    edx <<= 6;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x06);
    if (eax)
        goto loc_2c062;
    if ((int32_t)ebp > (int32_t)memoryAGet32(ds, esi + 2201086))
        goto loc_2c062;
    eax = 0x00000001;
loc_2c062: // 0160:2c062
    if (eax)
        goto loc_2c073;
    if ((int32_t)ebp <= (int32_t)memoryAGet32(ds, esi + 2201086))
        goto loc_2c073;
    eax = 0xffffffff;
loc_2c073: // 0160:2c073
    edx = memoryAGet32(ds, esi + 2201094);
    edx += eax;
    eax = edx;
    eax &= 0x0000007f;
    memoryASet32(ds, esi + 2201094, eax);
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 28;
    push32(ebx);
    eax = edi;
    ebx = esp + 28;
    sub_2628a();
    if (!eax)
        goto loc_2c161;
    eax = memoryAGet32(ds, esi + 2201070);
    edx = memoryAGet32(ds, esp + 20);
    eax &= 0x000001ff;
    edx <<= 9;
    eax |= edx;
    memoryASet32(ds, esi + 2201070, eax);
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esi + 2201074);
    edx <<= 9;
    eax &= 0x000001ff;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 2201074, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 2201086);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 2201090);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_27c45();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2201086, eax);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2201090, eax);
    if (ebp != edx)
        goto loc_2c125;
    memoryASet32(ds, esi + 2201094, edx);
loc_2c125: // 0160:2c125
    eax = memoryAGet32(ds, esp);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_2c144;
    eax = memoryAGet32(ds, esp + 4);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_2c161;
loc_2c144: // 0160:2c144
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000028;
    sub_36a16();
loc_2c161: // 0160:2c161
    edx = memoryAGet32(ds, esp + 16);
    eax = memoryAGet32(ds, esp + 20);
    ecx = 0x00002c00;
    ebx = 0x00002400;
    edx -= 0x00000002;
    eax--;
    edx <<= 9;
    eax <<= 9;
    sub_29457();
    if (!eax)
        goto loc_2c224;
    if (ebp != memoryAGet32(ds, 0x21ad10))
        goto loc_2c224;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201938) == 0x00000018)
        goto loc_2c224;
    ebx = memoryAGet32(ds, 0x21ae7c);
    if (ebp == ebx)
        goto loc_2c1c5;
    ecx = memoryAGet32(ds, esi + 2201098);
    if (ebp != ecx)
        goto loc_2c224;
    if (ecx == ebx)
        goto loc_2c224;
loc_2c1c5: // 0160:2c1c5
    memoryASet32(ds, esi + 2201070, ebp);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201950);
    memoryASet32(ds, eax + 2201958, memoryAGet32(ds, eax + 2201958) - edx);
    eax = memoryAGet32(ds, 0x21acac) * 0x000000ac;
    push32(0x00000005);
    edx = memoryAGet32(ds, eax + 2201954);
    ebx = memoryAGet32(ds, eax + 2201962);
    ecx = 0x00000032;
    ebx -= edx;
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, eax + 2201962, ebx);
    eax = memoryAGet32(ds, esp + 24);
    ebx = 0x0000002d;
    edx -= 0x00000018;
    eax -= 0x00000018;
    edx <<= 9;
    eax <<= 9;
    sub_2704a();
loc_2c224: // 0160:2c224
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_2c238;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_2c259;
loc_2c238: // 0160:2c238
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_2c253;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_25cfe();
loc_2c253: // 0160:2c253
    memoryASet32(ds, esi + 2201070, ebp);
loc_2c259: // 0160:2c259
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000018)
        goto loc_2bf52;
    goto loc_2a0da;
}
void sub_2c26b() // 0160:2c26b +long
{
    esp -= 4;
    goto loc_2c26b;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3761 bytes
loc_2c26b: // 0160:2c26b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_2c272: // 0160:2c272
    if (memoryAGet32(ds, esi + 2201070) == 0x00000000)
        goto loc_2c2d0;
    eax = memoryAGet32(ds, esi + 2201074);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 2201070);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -4;
    eax = memoryAGet32(ds, esi + 2201094);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000007);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x001710b0;
    sub_17029();
loc_2c2d0: // 0160:2c2d0
    esi += 0x00000024;
    if (esi != 0x00000360)
        goto loc_2c272;
    goto loc_2b3b4;
}
void sub_2c2e0() // 0160:2c2e0 +long
{
    esp -= 4;
    goto loc_2c2e0;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3878 bytes
loc_2c2e0: // 0160:2c2e0
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = 0;
loc_2c2e8: // 0160:2c2e8
    if (memoryAGet32(ds, esi + 2200830) == 0x00000000)
        goto loc_2c503;
    memoryASet32(ds, 0x21aefc, 0x00000032);
    eax = memoryAGet32(ds, esi + 2200838);
    ecx = memoryAGet32(ds, esi + 2200830);
    edi = memoryAGet32(ds, esi + 2200834);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 2200842);
    memoryASet32(ds, esi + 2200830, ecx);
    edi += eax;
    ebp = memoryAGet32(ds, esi + 2200842);
    memoryASet32(ds, esi + 2200834, edi);
    if ((int32_t)ebp >= (int32_t)0x00002000)
        goto loc_2c343;
    eax = memoryAGet32(ds, 0x21ad44);
    edx = eax + ebp;
    memoryASet32(ds, esi + 2200842, edx);
loc_2c343: // 0160:2c343
    if ((int32_t)memoryAGet32(ds, esi + 2200838) <= (int32_t)0x00000000)
        goto loc_2c355;
    memoryASet32(ds, esi + 2200850, memoryAGet32(ds, esi + 2200850) + 0x00000008);
    goto loc_2c35c;
loc_2c355: // 0160:2c355
    memoryASet32(ds, esi + 2200850, memoryAGet32(ds, esi + 2200850) - 0x00000008);
loc_2c35c: // 0160:2c35c
    eax = memoryAGet32(ds, esi + 2200830);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, esi + 2200834);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 2200850, memoryAGet32(ds, esi + 2200850) & 0x0000007f);
    ebp = eax;
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_2c4c2;
    if ((int32_t)eax >= (int32_t)0x0000017e)
        goto loc_2c4c2;
    if (edi >= 0x000003c0)
        goto loc_2c4c2;
    if ((int32_t)eax <= 0)
        goto loc_2c40e;
    if (edi >= 0x000003c0)
        goto loc_2c40e;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    edx |= eax;
    if (edx)
        goto loc_2c478;
loc_2c40e: // 0160:2c40e
    ebx = ebp + 1;
    if ((int32_t)ebx <= 0)
        goto loc_2c4c2;
    if (edi >= 0x000003c0)
        goto loc_2c4c2;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2c4c2;
loc_2c478: // 0160:2c478
    eax = 0;
    memoryASet32(ds, esi + 2200830, eax);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = ebp + -28;
    edx <<= 9;
    eax = edi + -8;
    ecx = memoryAGet32(ds, esi + 2200846);
    eax <<= 9;
    if (ecx != 0x00000036)
        goto loc_2c4b0;
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 2202046);
    ebx = 0x00000037;
    goto loc_2c4bd;
loc_2c4b0: // 0160:2c4b0
    push32(0x0000000a);
    ecx = memoryAGet32(ds, ebx + 2202046);
    ebx = 0x00000018;
loc_2c4bd: // 0160:2c4bd
    sub_2704a();
loc_2c4c2: // 0160:2c4c2
    if ((int32_t)ebp > (int32_t)0x0000017e)
        goto loc_2c4d2;
    if (edi <= 0x000003c0)
        goto loc_2c503;
loc_2c4d2: // 0160:2c4d2
    if ((int32_t)ebp <= (int32_t)0x0000017e)
        goto loc_2c4fb;
    eax = edi;
    edi = memoryAGet32(ds, esi + 2200846);
    eax <<= 9;
    if (edi != 0x00000036)
        goto loc_2c4f1;
    edx = 0x000000ff;
    goto loc_2c4f6;
loc_2c4f1: // 0160:2c4f1
    edx = 0x00000080;
loc_2c4f6: // 0160:2c4f6
    sub_25cfe();
loc_2c4fb: // 0160:2c4fb
    ebp = 0;
    memoryASet32(ds, esi + 2200830, ebp);
loc_2c503: // 0160:2c503
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_2c2e8;
    goto loc_2b3b3;
}
void sub_2c517() // 0160:2c517 +long
{
    esp -= 4;
    goto loc_2c517;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4445 bytes
loc_2c517: // 0160:2c517
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_2c51e: // 0160:2c51e
    if (memoryAGet32(ds, esi + 2200830) == 0x00000000)
        goto loc_2c5db;
    if (memoryAGet32(ds, esi + 2200846) != 0x00000036)
        goto loc_2c586;
    eax = memoryAGet32(ds, esi + 2200834);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 2200830);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 2200850);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x0000000b);
    ecx = 0x00000010;
    eax <<= 4;
    edx = edi;
    eax += 0x00183ab0;
    goto loc_2c5d6;
loc_2c586: // 0160:2c586
    eax = memoryAGet32(ds, esi + 2200834);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -4;
    eax = memoryAGet32(ds, esi + 2200830);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -5;
    eax = memoryAGet32(ds, esi + 2200850);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000003);
    ecx = 0x00000003;
    eax <<= 4;
    edx = edi;
    eax += 0x00170d70;
loc_2c5d6: // 0160:2c5d6
    sub_17029();
loc_2c5db: // 0160:2c5db
    esi += 0x00000018;
    if (esi != 0x000000f0)
        goto loc_2c51e;
    goto loc_2b3b4;
}
void sub_2c5ef() // 0160:2c5ef +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    edi = edx;
    ebx = 0;
    eax = 0;
loc_2c5fc: // 0160:2c5fc
    if (memoryAGet32(ds, eax + 2205526) == 0x00000000)
        goto loc_2c612;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_2c612;
    eax += 0x00000020;
    ebx++;
    goto loc_2c5fc;
loc_2c612: // 0160:2c612
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_2c619;
    ebx = 0;
loc_2c619: // 0160:2c619
    ecx = ebx;
    ecx <<= 5;
    edx = 0x00000100;
    memoryASet32(ds, ecx + 2205526, esi);
    ebp = 0;
    memoryASet32(ds, ecx + 2205530, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ecx + 2205554, ebp);
    sub_24709();
    edx = 0xfffffe00;
    memoryASet32(ds, ecx + 2205542, eax);
    eax = 0xfffffd00;
    sub_24709();
    memoryASet32(ds, ecx + 2205546, eax);
    memoryASet32(ds, ecx + 2205550, ebp);
    eax = ecx;
loc_2c664: // 0160:2c664
    if (memoryAGet32(ds, eax + 2205526) == 0x00000000)
        goto loc_2c67a;
    if ((int32_t)eax >= (int32_t)0x00000400)
        goto loc_2c67a;
    eax += 0x00000020;
    ebx++;
    goto loc_2c664;
loc_2c67a: // 0160:2c67a
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_2c684;
    ebx = 0x00000001;
loc_2c684: // 0160:2c684
    ebx <<= 5;
    ecx = 0x00000001;
    memoryASet32(ds, ebx + 2205526, esi);
    edx = 0x00000100;
    memoryASet32(ds, ebx + 2205530, edi);
    eax = 0xffffff00;
    memoryASet32(ds, ebx + 2205554, ecx);
    sub_24709();
    edx = 0xffffff00;
    memoryASet32(ds, ebx + 2205542, eax);
    eax = 0xfffffe00;
    esi = 0;
    sub_24709();
    memoryASet32(ds, ebx + 2205546, eax);
    memoryASet32(ds, ebx + 2205550, esi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2c6d6() // 0160:2c6d6 +long
{
    esp -= 4;
    goto loc_2c6d6;
loc_2a0da: // 0160:2a0da
    esp += 0x00000018;
    goto loc_2b3b3;
    // gap 4817 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4892 bytes
loc_2c6d6: // 0160:2c6d6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edx = 0;
    esi = 0;
    memoryASet16(ds, 0x21ac52, dx);
    ebp = 0;
loc_2c6ec: // 0160:2c6ec
    edx = memoryAGet32(ds, esi + 2205526);
    if (ebp == edx)
        goto loc_2c914;
    eax = memoryAGet32(ds, esi + 2205530);
    memoryASet32(ds, esi + 2205538, eax);
    ebx = memoryAGet32(ds, esi + 2205526);
    eax = memoryAGet32(ds, esi + 2205542);
    ecx = memoryAGet32(ds, esi + 2205530);
    ebx += eax;
    eax = memoryAGet32(ds, esi + 2205546);
    memoryASet32(ds, esi + 2205526, ebx);
    ecx += eax;
    eax = memoryAGet32(ds, esi + 2205526);
    memoryASet32(ds, esi + 2205534, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 20, eax);
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esi + 2205530, ecx);
    memoryASet32(ds, esp + 16, eax);
    edx = memoryAGet32(ds, esi + 2205546);
    edx += memoryAGet32(ds, 0x21ad44);
    eax = memoryAGet32(ds, esi + 2205534);
    memoryASet32(ds, esi + 2205546, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esi + 2205538);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (ebp != memoryAGet32(ds, esi + 2205554))
        goto loc_2c7fb;
    eax = memoryAGet32(ds, esi + 2205546);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_2c7c6;
    edx = memoryAGet32(ds, esi + 2205542);
    if (ebp != edx)
        goto loc_2c7c6;
loc_2c7be: // 0160:2c7be
    memoryASet32(ds, esi + 2205550, edx);
    goto loc_2c801;
loc_2c7c6: // 0160:2c7c6
    eax = memoryAGet32(ds, esi + 2205542);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_2c7ec;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esi + 2205542))
        goto loc_2c7e7;
    edi = 0x00000004;
    goto loc_2c7ec;
loc_2c7e7: // 0160:2c7e7
    edi = 0xfffffffc;
loc_2c7ec: // 0160:2c7ec
    eax = memoryAGet32(ds, esi + 2205550);
    eax += edi;
    edx = eax;
    edx &= 0x0000007f;
    goto loc_2c7be;
loc_2c7fb: // 0160:2c7fb
    memoryASet32(ds, esi + 2205542, ebp);
loc_2c801: // 0160:2c801
    eax = esp + 8;
    push32(eax);
    eax = esp + 16;
    push32(eax);
    edx = esp + 24;
    eax = esp + 28;
    sub_26d3f();
    if (!eax)
        goto loc_2c8df;
    edx = memoryAGet32(ds, esi + 2205526);
    eax = memoryAGet32(ds, esp + 20);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    edx = memoryAGet32(ds, esi + 2205530);
    memoryASet32(ds, esi + 2205526, eax);
    eax = memoryAGet32(ds, esp + 16);
    edx &= 0x000001ff;
    eax <<= 9;
    eax |= edx;
    ecx = esp;
    memoryASet32(ds, esi + 2205530, eax);
    ebx = esp + 4;
    eax = memoryAGet32(ds, esi + 2205542);
    push32(ebp);
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esi + 2205546);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 4, eax);
    eax = memoryAGet32(ds, esp + 24);
    sub_27c45();
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2205542, eax);
    eax = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esi + 2205546, eax);
    if (ebp != ebx)
        goto loc_2c8a3;
    if (ebx != eax)
        goto loc_2c8a3;
    memoryASet32(ds, esi + 2205550, eax);
loc_2c8a3: // 0160:2c8a3
    eax = memoryAGet32(ds, esp);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000100)
        goto loc_2c8c2;
    eax = memoryAGet32(ds, esp + 4);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_2c8df;
loc_2c8c2: // 0160:2c8c2
    eax = memoryAGet32(ds, esp + 20);
    eax <<= 9;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x0000001e;
    sub_36a16();
loc_2c8df: // 0160:2c8df
    if ((int32_t)memoryAGet32(ds, esp + 16) > (int32_t)0x0000017e)
        goto loc_2c8f3;
    if (memoryAGet32(ds, esp + 20) <= 0x000003c0)
        goto loc_2c914;
loc_2c8f3: // 0160:2c8f3
    if ((int32_t)memoryAGet32(ds, esp + 16) <= (int32_t)0x0000017e)
        goto loc_2c90e;
    eax = memoryAGet32(ds, esp + 20);
    edx = 0x00000080;
    eax <<= 9;
    sub_25cfe();
loc_2c90e: // 0160:2c90e
    memoryASet32(ds, esi + 2205526, ebp);
loc_2c914: // 0160:2c914
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_2c6ec;
    memoryASet16(ds, 0x21ac52, 0xffff);
    goto loc_2a0da;
}
void sub_2c931() // 0160:2c931 +long
{
    esp -= 4;
    goto loc_2c931;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 5495 bytes
loc_2c931: // 0160:2c931
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
loc_2c938: // 0160:2c938
    if (memoryAGet32(ds, esi + 2205526) == 0x00000000)
        goto loc_2c9e6;
    if (memoryAGet32(ds, esi + 2205554) != 0x00000000)
        goto loc_2c9a0;
    eax = memoryAGet32(ds, esi + 2205530);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -1;
    eax = memoryAGet32(ds, esi + 2205526);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -1;
    eax = memoryAGet32(ds, esi + 2205550);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    push32(0x00000002);
    ecx = 0x00000002;
    eax <<= 4;
    edx = edi;
    eax += 0x001713b0;
    goto loc_2c9e1;
loc_2c9a0: // 0160:2c9a0
    eax = memoryAGet32(ds, esi + 2205530);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -7;
    eax = memoryAGet32(ds, esi + 2205526);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = eax + -5;
    eax = memoryAGet32(ds, esi + 2205550);
    push32(0x00000008);
    eax <<= 4;
    ecx = 0x00000007;
    eax += 0x00170cb0;
loc_2c9e1: // 0160:2c9e1
    sub_17029();
loc_2c9e6: // 0160:2c9e6
    esi += 0x00000020;
    if (esi != 0x00000400)
        goto loc_2c938;
    goto loc_2b3b4;
}
void sub_2c9fa() // 0160:2c9fa +long +stackDrop4
{
    esp -= 4;
    goto loc_2c9fa;
loc_284be: // 0160:284be
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
    return;
    // gap 17718 bytes
loc_2c9fa: // 0160:2c9fa
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ebp = memoryAGet32(ds, esp + 44);
    edi = eax;
    memoryASet32(ds, esp + 16, edx);
    memoryASet32(ds, esp + 20, ebx);
    memoryASet32(ds, esp + 4, ecx);
    eax = ebp;
    edx = 0x0000ffff;
    eax <<= 4;
    esi = 0;
    eax -= ebp;
    memoryASet16(ds, 0x21ac52, dx);
    eax <<= 6;
    memoryASet32(ds, esp + 24, esi);
    memoryASet32(ds, esp, eax);
    goto loc_2caf4;
loc_2ca36: // 0160:2ca36
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp);
    ecx = 0;
    memoryASet32(ds, esp + 8, eax);
    goto loc_2cacd;
loc_2ca59: // 0160:2ca59
    eax = memoryAGet32(ds, esp + 20);
    al = memoryAGet(ds, ecx + eax + 1632880);
    eax &= 0x000000ff;
    if (eax == 0x00000080)
        goto loc_2cacc;
    if ((int32_t)ebp <= 0)
        goto loc_2cacc;
    ebx = memoryAGet32(ds, esp + 4);
    ebx += ecx;
    if (ebx >= 0x000003c0)
        goto loc_2cacc;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp + 12);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = eax;
    ebx += memoryAGet32(ds, esp + 8);
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    edx &= 0x0000ffff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2cacc;
    eax = memoryAGet32(ds, esp + 16);
    ecx = edi;
    esi++;
    memoryASet32(ds, esp + 24, eax);
loc_2cacc: // 0160:2cacc
    ecx++;
loc_2cacd: // 0160:2cacd
    if ((int32_t)ecx < (int32_t)edi)
        goto loc_2ca59;
    ecx = memoryAGet32(ds, esp + 20);
    eax = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, esp + 24);
    ebp++;
    ecx += 0x00000140;
    eax += 0x000003c0;
    edx++;
    memoryASet32(ds, esp + 20, ecx);
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, esp + 24, edx);
loc_2caf4: // 0160:2caf4
    eax = memoryAGet32(ds, esp + 24);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esp + 16))
        goto loc_2ca36;
    eax = esi;
    esp += 0x0000001c;
    goto loc_284be;
}
void sub_2cb0c() // 0160:2cb0c +long +stackDrop16
{
    esp -= 4;
    goto loc_2cb0c;
loc_2b116: // 0160:2b116
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
    return;
    // gap 6640 bytes
loc_2cb0c: // 0160:2cb0c
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edi = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp, eax);
    esi = edx;
    edx = memoryAGet32(ds, esp + 28);
    eax = memoryAGet32(ds, esp + 32);
    ebp = ecx;
    ebp = -ebp;
    if ((int32_t)edx < (int32_t)ebp)
        goto loc_2cba8;
    ebp = ecx + 960;
    if ((int32_t)edx > (int32_t)ebp)
        goto loc_2cba8;
    ebp = edi;
    ebp = -ebp;
    if ((int32_t)eax < (int32_t)ebp)
        goto loc_2cba8;
    ebp = edi + 400;
    if ((int32_t)eax > (int32_t)ebp)
        goto loc_2cba8;
    if ((int32_t)edx >= 0)
        goto loc_2cb59;
    ecx += edx;
    esi -= edx;
    edx = 0;
loc_2cb59: // 0160:2cb59
    ebp = edx + ecx;
    if ((int32_t)ebp <= (int32_t)0x000003c0)
        goto loc_2cb6b;
    ecx = 0x000003c0;
    ecx -= edx;
loc_2cb6b: // 0160:2cb6b
    if ((int32_t)eax >= 0)
        goto loc_2cb75;
    edi += eax;
    ebx -= eax;
    eax = 0;
loc_2cb75: // 0160:2cb75
    ebp = eax + edi;
    if ((int32_t)ebp <= (int32_t)0x00000190)
        goto loc_2cb87;
    edi = 0x00000190;
    edi -= eax;
loc_2cb87: // 0160:2cb87
    push32(0x00000000);
    push32(0x00000028);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    push32(edx);
    eax = memoryAGet32(ds, esp + 48);
    push32(eax);
    push32(edi);
    edx = esi;
    eax = memoryAGet32(ds, esp + 32);
    sub_24773();
loc_2cba8: // 0160:2cba8
    esp += 0x00000004;
    goto loc_2b116;
}
void sub_2cbb0() // 0160:2cbb0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    ebx = memoryAGet32(ds, esi + 379620);
    ebp = memoryAGet32(ds, esi + 379624);
    eax = memoryAGet32(ds, esi + 379608);
    ecx += ebp;
    edi += ebx;
    push32(ecx);
    ebx = edx;
    ebp = memoryAGet32(ds, esi + 379604);
    ecx = edi;
    edx = eax;
    eax = ebp;
    sub_2c9fa();
    if (eax)
        goto loc_2cca1;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000035;
    sub_36a16();
    eax = 0x00000001;
    edx = 0;
    memoryASet32(ds, 0x21ad88, eax);
    memoryASet32(ds, 0x21acd0, edx);
    memoryASet32(ds, 0x21acc0, edx);
    memoryASet32(ds, 0x21adb8, eax);
    eax = memoryAGet32(ds, 0x21acd4);
    memoryASet32(ds, 0x21ad64, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = 0;
    push32(edi);
    push32(0x00000190);
    push32(0x000003c0);
    push32(0x00000140);
    push32(eax);
    ecx = 0x00000032;
    push32(ebx);
    memoryASet32(ds, 0x21aefc, ecx);
    ecx = memoryAGet32(ds, esi + 379604);
    push32(0x00191270);
    eax = memoryAGet32(ds, esi + 379608);
    edx = memoryAGet32(ds, esi + 379596);
    push32(eax);
    ebx = memoryAGet32(ds, esi + 379600);
    eax = 0x0018ea70;
    sub_24773();
    sub_181c7();
loc_2cca1: // 0160:2cca1
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_2cca5() // 0160:2cca5 +long
{
    esp -= 4;
    goto loc_2cca5;
loc_2b1ad: // 0160:2b1ad
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
    // gap 6897 bytes
loc_2cca5: // 0160:2cca5
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(edx);
    edi = ebx;
    ebp = ecx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 379628);
    edi = ebx + edx;
    ebx = memoryAGet32(ds, esi + 379632);
    eax = memoryAGet32(ds, esi + 379604);
    ebp = ecx + ebx;
    edx = memoryAGet32(ds, esi + 379608);
    push32(ebp);
    ebx = memoryAGet32(ds, esp + 4);
    ecx = edi;
    sub_2c9fa();
    ebx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, eax);
    ecx = memoryAGet32(ds, esi + 379612);
    eax = memoryAGet32(ds, esi + 379616);
    edx = memoryAGet32(ds, esi + 379608);
    ebp += eax;
    edi += ecx;
    push32(ebp);
    ecx = edi;
    eax = memoryAGet32(ds, esi + 379604);
    sub_2c9fa();
    eax += memoryAGet32(ds, esp + 4);
    if (eax)
        goto loc_2b1ad;
    eax = edi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000035;
    sub_36a16();
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0x00000032;
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x21acd0, ecx);
    memoryASet32(ds, 0x21acc0, ecx);
    memoryASet32(ds, 0x21aefc, ebp);
    memoryASet32(ds, 0x21ad64, ecx);
    memoryASet32(ds, 0x21ad88, ebx);
    ecx = memoryAGet32(ds, esi + 379632);
    memoryASet32(ds, 0x21adb8, ebx);
    ebp = eax + ecx;
    ebx = memoryAGet32(ds, esi + 379628);
    push32(ebp);
    edi += ebx;
    push32(edi);
    ebx = memoryAGet32(ds, esi + 379600);
    push32(0x00191270);
    eax = memoryAGet32(ds, esi + 379608);
    edx = memoryAGet32(ds, esi + 379596);
    push32(eax);
    ecx = memoryAGet32(ds, esi + 379604);
    eax = 0x0018ea70;
    sub_2cb0c();
    ebp += memoryAGet32(ds, esi + 379616);
    edx = memoryAGet32(ds, esi + 379612);
    push32(ebp);
    edi += edx;
    push32(edi);
    eax = 0x0018ea70;
    push32(0x00191270);
    ecx = memoryAGet32(ds, esi + 379608);
    ebx = memoryAGet32(ds, esi + 379600);
    push32(ecx);
    edx = memoryAGet32(ds, esi + 379596);
    ecx = memoryAGet32(ds, esi + 379604);
    sub_2cb0c();
    sub_181c7();
    goto loc_2b1ad;
}
void sub_2ce07() // 0160:2ce07 +long
{
    esp -= 4;
    goto loc_2ce07;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 6733 bytes
loc_2ce07: // 0160:2ce07
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    if (memoryAGet32(ds, 0x21ad64) == 0x00000000)
        goto loc_2b3b4;
    edx = memoryAGet32(ds, 0x21ac68);
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = memoryAGet32(ds, 0x21ad68);
    eax += edx;
    eax += ebx;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_2b3b4;
    esi = memoryAGet32(ds, 0x217ac0);
    if (!esi)
        goto loc_2ce7f;
    if (esi == memoryAGet32(ds, 0x217a94))
        goto loc_2ce7f;
    if (memoryAGet32(ds, 0x5cb70) != 0x00000000)
        goto loc_2ce7f;
    edx = memoryAGet32(ds, 0x21ad60);
    edx++;
    ebx = 0x00000008;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax = 0x00000001;
    memoryASet32(ds, 0x21ad60, edx);
    memoryASet32(ds, 0x5cb70, eax);
loc_2ce7f: // 0160:2ce7f
    edx = memoryAGet32(ds, 0x217ac0);
    if (edx)
        goto loc_2ce8f;
    memoryASet32(ds, 0x5cb70, edx);
loc_2ce8f: // 0160:2ce8f
    eax = memoryAGet32(ds, 0x21ad60);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    ebx <<= 2;
    ebx += edx;
    ebx <<= 3;
    esi = edx;
    edx = memoryAGet32(ds, ebx + 379600);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = memoryAGet32(ds, ebx + 379596);
    eax <<= 6;
    edi += eax;
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_2b3b4;
    if ((int32_t)memoryAGet32(ds, 0x21ad60) >= (int32_t)0x00000004)
        goto loc_2cf10;
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_2cbb0();
    goto loc_2b3b4;
loc_2cf10: // 0160:2cf10
    ecx = eax;
    edx = edi;
    eax = esi;
    sub_2cca5();
    goto loc_2b3b4;
}
void sub_2cf20() // 0160:2cf20 +long
{
    esp -= 4;
    goto loc_2cf20;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7014 bytes
loc_2cf20: // 0160:2cf20
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ad60);
    edx = eax;
    ebx = 0x00000004;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = edx;
    if (memoryAGet32(ds, 0x21ad64) == 0x00000000)
        goto loc_2b3b3;
    eax = memoryAGet32(ds, 0x21ac68);
    esi = eax;
    esi <<= 2;
    esi += eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x21ad68);
    eax += esi;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_2b3b3;
    eax = memoryAGet32(ds, 0x21acd4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = eax;
    eax = memoryAGet32(ds, 0x21acd8);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = ebx;
    esi = eax;
    esi <<= 2;
    esi += eax;
    eax = memoryAGet32(ds, 0x21ad60);
    esi <<= 3;
    if ((int32_t)eax < (int32_t)0x00000004)
        goto loc_2cfbc;
    eax = memoryAGet32(ds, esi + 379628);
    edx = memoryAGet32(ds, esi + 379632);
    ebp += eax;
    edi += edx;
    goto loc_2cfcc;
loc_2cfbc: // 0160:2cfbc
    edx = memoryAGet32(ds, esi + 379620);
    ecx = memoryAGet32(ds, esi + 379624);
    ebp += edx;
    edi += ecx;
loc_2cfcc: // 0160:2cfcc
    esi = ebx;
    esi <<= 2;
    esi += ebx;
    esi <<= 3;
    edx = memoryAGet32(ds, esi + 379600);
    edx += 0x000002e0;
    eax = edx;
    ebx = memoryAGet32(ds, esi + 379608);
    eax <<= 2;
    ecx = memoryAGet32(ds, esi + 379604);
    eax += edx;
    push32(ebx);
    eax <<= 6;
    edx = memoryAGet32(ds, esi + 379596);
    eax += 0x00155270;
    ebx = edi;
    eax += edx;
    edx = ebp;
    sub_17029();
    if ((int32_t)memoryAGet32(ds, 0x21ad60) < (int32_t)0x00000004)
        goto loc_2b3b3;
    ecx = memoryAGet32(ds, esi + 379608);
    ebx = memoryAGet32(ds, esi + 379600);
    eax = memoryAGet32(ds, esi + 379616);
    ebx += 0x000002e0;
    edi += eax;
    eax = ebx;
    edx = memoryAGet32(ds, esi + 379612);
    eax <<= 2;
    push32(ecx);
    eax += ebx;
    edx += ebp;
    eax <<= 6;
    ebx = memoryAGet32(ds, esi + 379596);
    eax += 0x00155270;
    ecx = memoryAGet32(ds, esi + 379604);
    eax += ebx;
    ebx = edi;
    sub_17029();
    goto loc_2b3b3;
}
void sub_2d068() // 0160:2d068 +long
{
    esp -= 4;
    goto loc_2d068;
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7342 bytes
loc_2d068: // 0160:2d068
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = eax;
    ecx = eax;
    eax <<= 3;
    eax += edx;
    ebx = memoryAGet32(ds, eax * 4 + 0x21a5b2);
    eax = edx;
    esi = 0x00191270;
    eax <<= 2;
    ebp = 0x00239d3c;
    eax += edx;
    ecx ^= edx;
    eax <<= 3;
    memoryASet32(ds, esp, ecx);
    eax -= edx;
    esi += ebx;
    eax <<= 2;
    edi = esi + 13;
    ebp += eax;
loc_2d0a6: // 0160:2d0a6
    edx = ebp;
    eax = esi;
    ecx = edi;
loc_2d0ac: // 0160:2d0ac
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_2d0ac;
    eax = memoryAGet32(ds, esp);
    edi += 0x000003c0;
    esi += 0x000003c0;
    eax++;
    ebp += 0x0000000d;
    memoryASet32(ds, esp, eax);
    if ((int32_t)eax < (int32_t)0x0000000c)
        goto loc_2d0a6;
    goto loc_2b3b0;
}
void sub_2d0d6() // 0160:2d0d6 +long
{
    esp -= 4;
    goto loc_2d0d6;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7452 bytes
loc_2d0d6: // 0160:2d0d6
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = eax;
    eax <<= 3;
    eax += edx;
    ebx = memoryAGet32(ds, eax * 4 + 0x21a5b2);
    eax = edx;
    eax <<= 2;
    eax += edx;
    edi = 0x00191270;
    eax <<= 3;
    esi = 0x00239d3c;
    eax -= edx;
    ecx = memoryAGet32(ds, 0x590a0);
    eax <<= 2;
    edi += ebx;
    esi += eax;
    if (!ecx)
        goto loc_2d12b;
    push32(0x000003c0);
    ecx = 0x0000000c;
    ebx = 0x0000000d;
    push32(0x0000000d);
    edx = edi;
    eax = esi;
    sub_264e0();
loc_2d12b: // 0160:2d12b
    ebp = 0;
loc_2d12d: // 0160:2d12d
    edx = edi;
    eax = esi;
    ecx = esi + 13;
loc_2d134: // 0160:2d134
    bl = memoryAGet(ds, eax);
    eax++;
    memoryASet(ds, edx, bl);
    edx++;
    if (eax != ecx)
        goto loc_2d134;
    edi += 0x000003c0;
    ebp++;
    esi += 0x0000000d;
    if ((int32_t)ebp < (int32_t)0x0000000c)
        goto loc_2d12d;
    goto loc_2b3b3;
}
void sub_2d152() // 0160:2d152 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = 0;
    ebx = 0;
loc_2d15e: // 0160:2d15e
    eax = memoryAGet32(ds, ebx + 2201070);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2d1a1;
    eax = memoryAGet32(ds, ebx + 2201074);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2d1a1;
    ecx = 0x00000001;
loc_2d1a1: // 0160:2d1a1
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_2d15e;
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2d1b3() // 0160:2d1b3 +long
{
    esp -= 4;
    goto loc_2d1b3;
loc_2d1ac: // 0160:2d1ac
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_2d1b3: // 0160:2d1b3
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = 0;
    ebx = 0;
loc_2d1bf: // 0160:2d1bf
    eax = memoryAGet32(ds, ebx + 2205082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2d202;
    eax = memoryAGet32(ds, ebx + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000018)
        goto loc_2d202;
    ecx = 0x00000001;
loc_2d202: // 0160:2d202
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_2d1bf;
    goto loc_2d1ac;
}
void sub_2d20c() // 0160:2d20c +long
{
    esp -= 4;
    goto loc_2d20c;
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 7762 bytes
loc_2d20c: // 0160:2d20c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = memoryAGet32(ds, 0x239f2c);
    esi = 0;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_2b3b0;
    memoryASet32(ds, esp, esi);
    goto loc_2d2ec;
loc_2d22d: // 0160:2d22d
    edx = 0x00000380;
    eax = 0x00000040;
    sub_24709();
    edx = eax;
    ecx = eax;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = 0;
    ebp = eax + eax;
    goto loc_2d2aa;
loc_2d250: // 0160:2d250
    if ((int32_t)ebx <= 0)
        goto loc_2d29f;
    if (edi >= 0x000003c0)
        goto loc_2d29f;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    si = memoryAGet16(ds, eax + ebp + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    esi &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_2d29f;
    eax = 0x00000001;
    goto loc_2d2a1;
loc_2d29f: // 0160:2d29f
    eax = 0;
loc_2d2a1: // 0160:2d2a1
    esi = eax;
    ecx += 0x000003c0;
    ebx++;
loc_2d2aa: // 0160:2d2aa
    if ((int32_t)ebx >= (int32_t)0x0000016e)
        goto loc_2d2b6;
    if (!esi)
        goto loc_2d250;
loc_2d2b6: // 0160:2d2b6
    if (!esi)
        goto loc_2d2e9;
    edx = ebx;
    eax = edi;
    edx <<= 9;
    eax <<= 9;
    sub_255ea();
    if (eax)
        goto loc_2d2e7;
    edx = ebx;
    eax = edi;
    sub_2d152();
    if (eax)
        goto loc_2d2e7;
    edx = ebx;
    eax = edi;
    sub_2d1b3();
    if (!eax)
        goto loc_2d2e9;
loc_2d2e7: // 0160:2d2e7
    esi = 0;
loc_2d2e9: // 0160:2d2e9
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
loc_2d2ec: // 0160:2d2ec
    if ((int32_t)memoryAGet32(ds, esp) >= (int32_t)0x00000010)
        goto loc_2d2fa;
    if (!esi)
        goto loc_2d22d;
loc_2d2fa: // 0160:2d2fa
    if ((int32_t)memoryAGet32(ds, esp) < (int32_t)0x00000010)
        goto loc_2d302;
    esi = 0;
loc_2d302: // 0160:2d302
    if (!esi)
        goto loc_2d42a;
    edx = 0;
    eax = 0;
loc_2d30e: // 0160:2d30e
    if (memoryAGet32(ds, eax + 2205082) == 0x00000000)
        goto loc_2d322;
    ecx = edx;
    eax += 0x00000024;
    edx++;
    if ((int32_t)ecx < (int32_t)0x00000003)
        goto loc_2d30e;
loc_2d322: // 0160:2d322
    if ((int32_t)edx >= (int32_t)0x00000003)
        goto loc_2d42a;
    memoryASet32(ds, 0x5cc1c, ebx);
    ebx -= 0x00000080;
    memoryASet32(ds, 0x5cc18, edi);
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_2d347;
    ebx = 0x00000008;
loc_2d347: // 0160:2d347
    if (memoryAGet32(ds, 0x21af08) == 0x00010000)
        goto loc_2d358;
    ebx = 0x00000008;
loc_2d358: // 0160:2d358
    ecx = edx;
    ecx <<= 3;
    edi <<= 9;
    ecx += edx;
    ebx <<= 9;
    memoryASet32(ds, ecx * 4 + 0x21a59a, edi);
    eax = 0x00000155;
    memoryASet32(ds, ecx * 4 + 0x21a59e, ebx);
    memoryASet32(ds, ecx * 4 + 0x21a5a6, eax);
    edi = 0;
    edx = 0x0000000f;
    memoryASet32(ds, ecx * 4 + 0x21a5aa, edi);
    eax = 0;
    memoryASet32(ds, ecx * 4 + 0x21a5a2, edi);
    sub_24709();
    memoryASet32(ds, ecx * 4 + 0x21a5ae, eax);
    ebx = 0x00000064;
    memoryASet32(ds, ecx * 4 + 0x21a5b2, edi);
    esi = 0x000000af;
    memoryASet32(ds, ecx * 4 + 0x21a5b6, ebx);
    ebp = 0x000001f4;
    memoryASet32(ds, ecx * 4 + 0x21a5ba, esi);
    eax = 0x00050094;
    edi = 0x00000032;
    ebx = 0x00000001;
    sub_18de2();
    memoryASet32(ds, 0x21aefc, edi);
    memoryASet32(ds, 0x21ac6c, ebp);
    eax = 0;
    memoryASet32(ds, 0x21ad88, ebx);
    memoryASet32(ds, 0x21acc0, eax);
    memoryASet32(ds, 0x5cac0, eax);
    eax = 0x0003c000;
    ebx = 0x00000080;
    sub_1736c();
    edx = eax;
    eax = 0x00000042;
    ecx = 0;
    sub_36a16();
    ebx = 0x00078000;
    edx = memoryAGet32(ds, 0x5cc1c);
    eax = memoryAGet32(ds, 0x5cc18);
    sub_26b97();
loc_2d42a: // 0160:2d42a
    edx = 0x00000005;
    eax = 0x00000001;
    ebx = memoryAGet32(ds, 0x5cb74);
    sub_24709();
    edx = memoryAGet32(ds, ebx * 4 + 0x5cb78);
    eax += edx;
    ecx = memoryAGet32(ds, 0x5cb74);
    memoryASet32(ds, 0x239f2c, eax);
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_2b3b0;
    esi = ecx + 1;
    memoryASet32(ds, 0x5cb74, esi);
    goto loc_2b3b0;
}
void sub_2d46a() // 0160:2d46a +long
{
    esp -= 4;
    goto loc_2d46a;
loc_264d8: // 0160:264d8
    esp += 0x00000014;
    goto loc_2b3b3;
    // gap 20179 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8368 bytes
loc_2d46a: // 0160:2d46a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = 0x00000001;
    edi = 0;
    esi = 0;
    memoryASet32(ds, 0x5cac4, edx);
loc_2d482: // 0160:2d482
    ebx = memoryAGet32(ds, esi + 2205082);
    if (!ebx)
        goto loc_2d8f3;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = memoryAGet32(ds, esi + 2205110);
    memoryASet32(ds, esp + 16, eax);
    if (!ecx)
        goto loc_2d4cb;
    ecx--;
    memoryASet32(ds, esi + 2205110, ecx);
    goto loc_2d4ee;
loc_2d4cb: // 0160:2d4cb
    eax = memoryAGet32(ds, esi + 2205090);
    edx = ebx + eax;
    eax = memoryAGet32(ds, esi + 2205094);
    ebx = memoryAGet32(ds, esi + 2205086);
    memoryASet32(ds, esi + 2205082, edx);
    ebx += eax;
    memoryASet32(ds, esi + 2205086, ebx);
loc_2d4ee: // 0160:2d4ee
    eax = memoryAGet32(ds, esi + 2205114);
    if (!eax)
        goto loc_2d503;
    ecx = eax + -1;
    memoryASet32(ds, esi + 2205114, ecx);
    goto loc_2d51b;
loc_2d503: // 0160:2d503
    edx = memoryAGet32(ds, esi + 2205094);
    if (!edx)
        goto loc_2d51b;
    eax = memoryAGet32(ds, 0x21ad44);
    ebx = edx + eax;
    memoryASet32(ds, esi + 2205094, ebx);
loc_2d51b: // 0160:2d51b
    eax = memoryAGet32(ds, esi + 2205082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esi + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 8, eax);
    if (memoryAGet32(ds, esi + 2205094) == 0x00000000)
        goto loc_2d57d;
    ebx = 0x00078000;
    eax = memoryAGet32(ds, 0x21acc4);
    edx = memoryAGet32(ds, 0x5cc1c);
    ecx = 0;
    memoryASet32(ds, 0x21ac60, eax);
    eax = memoryAGet32(ds, 0x5cc18);
    sub_26b97();
    memoryASet32(ds, 0x21ae6c, 0x00000001);
loc_2d57d: // 0160:2d57d
    eax = esp;
    ecx = memoryAGet32(ds, esp + 16);
    push32(eax);
    eax = esp + 8;
    edx = esp + 12;
    push32(eax);
    ebx = ebp;
    eax = esp + 20;
    sub_26d3f();
    if (!eax)
        goto loc_2d65c;
    eax = memoryAGet32(ds, esp + 12);
    eax <<= 9;
    memoryASet32(ds, esi + 2205082, eax);
    eax = memoryAGet32(ds, esp + 8);
    edx = memoryAGet32(ds, esi + 2205094);
    eax <<= 9;
    edx = -edx;
    memoryASet32(ds, esi + 2205086, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    memoryASet32(ds, esi + 2205094, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000100)
        goto loc_2d65c;
    eax = memoryAGet32(ds, esp + 8);
    eax -= 0x0000000b;
    edx = eax * 0x000003c0;
    ebx = 0;
    ecx = 0x00000004;
    memoryASet32(ds, esi + 2205094, ebx);
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, esi + 2205098, ecx);
    eax -= 0x00000006;
    memoryASet32(ds, 0x21ae6c, ebx);
    eax += edx;
    memoryASet32(ds, esi + 2205106, eax);
    eax = edi;
    sub_2d068();
    push32(0x00000190);
    push32(0x000003c0);
    eax = memoryAGet32(ds, esp + 16);
    push32(0x00000140);
    eax -= 0x0000000b;
    push32(eax);
    eax = memoryAGet32(ds, esp + 28);
    eax -= 0x00000006;
    push32(eax);
    push32(0x00191270);
    ecx = 0x0000000d;
    ebx = 0x0000001e;
    push32(0x0000000c);
    edx = 0x00000130;
    eax = 0x00155270;
    sub_24862();
loc_2d65c: // 0160:2d65c
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00001c00;
    ebx = 0x00002000;
    edx -= 0x00000006;
    eax <<= 9;
    edx <<= 9;
    sub_29457();
    if (!eax)
        goto loc_2d692;
    if (memoryAGet32(ds, 0x21ad10) != 0x00000000)
        goto loc_2d692;
    if (memoryAGet32(ds, esi + 2205094) == 0x00000000)
        goto loc_2d6ba;
loc_2d692: // 0160:2d692
    edx = memoryAGet32(ds, esp + 8);
    eax = memoryAGet32(ds, esp + 12);
    ecx = 0x00001c00;
    ebx = 0x00002000;
    edx -= 0x00000006;
    eax <<= 9;
    edx <<= 9;
    sub_2955b();
    if (!eax)
        goto loc_2d8c9;
loc_2d6ba: // 0160:2d6ba
    ebx = memoryAGet32(ds, 0x21acac);
    eax = ebx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2201990) != 0x00000000)
        goto loc_2d8c9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax = eax * 0x00000015;
    ebp = memoryAGet32(ds, esi + 2205102);
    ebp = memoryAGet32(ds, ebp * 4 + 0x5cbd8);
    ebp += eax;
    eax = ebp;
    eax <<= 2;
    edx = memoryAGet32(ds, eax + 2205190);
    if ((int32_t)edx < 0)
        goto loc_2d70c;
    ebx = edx + 1;
    memoryASet32(ds, eax + 2205190, ebx);
loc_2d70c: // 0160:2d70c
    eax = memoryAGet32(ds, esi + 2205102);
    if (memoryAGet32(ds, eax * 4 + 0x5cbd8) != 0x00000012)
        goto loc_2d78a;
    edx = memoryAGet32(ds, 0x21ac64);
    eax = edx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202078) != 0x00000000)
        goto loc_2d78a;
    eax = edx;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 2202078, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202078, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202078, ebx);
    memoryASet32(ds, eax + 2202078, ebx);
    sub_13bd3();
    eax = ebp;
    memoryASet32(ds, eax * 4 + 0x21a606, 0xffffffff);
    goto loc_2d864;
loc_2d78a: // 0160:2d78a
    eax = memoryAGet32(ds, esi + 2205102);
    if (memoryAGet32(ds, eax * 4 + 0x5cbd8) != 0x00000014)
        goto loc_2d7f8;
    ebp = memoryAGet32(ds, 0x21ac64);
    eax = ebp * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202082) != 0x00000000)
        goto loc_2d7f8;
    eax = ebp;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 2202082, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202082, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202082, ebx);
    memoryASet32(ds, eax + 2202082, ebx);
    sub_13c2f();
    goto loc_2d864;
loc_2d7f8: // 0160:2d7f8
    eax = memoryAGet32(ds, esi + 2205102);
    if (memoryAGet32(ds, eax * 4 + 0x5cbd8) != 0x00000013)
        goto loc_2d864;
    ecx = memoryAGet32(ds, 0x21ac64);
    eax = ecx * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202086) != 0x00000000)
        goto loc_2d864;
    eax = ecx;
    al &= 0xfc;
    edx = eax * 0x000000ac;
    ebx = 0x00000001;
    memoryASet32(ds, edx + 2202086, ebx);
    edx = eax + ebx;
    edx = edx * 0x000000ac;
    memoryASet32(ds, edx + 2202086, ebx);
    edx = eax + 2;
    edx = edx * 0x000000ac;
    eax += 0x00000003;
    eax = eax * 0x000000ac;
    memoryASet32(ds, edx + 2202086, ebx);
    memoryASet32(ds, eax + 2202086, ebx);
    sub_13c8b();
loc_2d864: // 0160:2d864
    if (memoryAGet32(ds, esi + 2205106) == 0x00000000)
        goto loc_2d874;
    eax = edi;
    sub_2d0d6();
loc_2d874: // 0160:2d874
    eax = memoryAGet32(ds, esi + 2205102);
    ebx = 0x00000032;
    edx = 0;
    eax = memoryAGet32(ds, eax * 4 + 0x5cb98);
    sub_18dc8();
    edx = 0x0000004b;
    eax = memoryAGet32(ds, esi + 2205082);
    memoryASet32(ds, 0x590c0, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x0000000c;
    sub_36a16();
    ebx = 0;
    memoryASet32(ds, esi + 2205082, ebx);
loc_2d8c9: // 0160:2d8c9
    ecx = memoryAGet32(ds, esi + 2205098);
    if (!ecx)
        goto loc_2d8f3;
    if ((int32_t)ecx >= (int32_t)0x00000100)
        goto loc_2d8f3;
    eax = ecx + 4;
    memoryASet32(ds, esi + 2205098, eax);
    if (eax != 0x00000100)
        goto loc_2d8f3;
    ebx = 0;
    memoryASet32(ds, 0x21aefc, ebx);
loc_2d8f3: // 0160:2d8f3
    edi++;
    esi += 0x00000024;
    if ((int32_t)edi < (int32_t)0x00000003)
        goto loc_2d482;
    ecx = 0;
    memoryASet32(ds, 0x5cac4, ecx);
    goto loc_264d8;
}
void sub_2d90d() // 0160:2d90d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0;
loc_2d913: // 0160:2d913
    if (memoryAGet32(ds, esi + 2205082) == 0x00000000)
        goto loc_2d9b6;
    if (memoryAGet32(ds, esi + 2205114) == 0x00000000)
        goto loc_2d970;
    if (memoryAGet32(ds, esi + 2205110) != 0x00000000)
        goto loc_2d9b6;
    eax = memoryAGet32(ds, esi + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -22;
    eax = memoryAGet32(ds, esi + 2205082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000017);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x00156b60;
    goto loc_2d9b1;
loc_2d970: // 0160:2d970
    if (memoryAGet32(ds, esi + 2205094) == 0x00000000)
        goto loc_2d9b6;
    eax = memoryAGet32(ds, esi + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -11;
    eax = memoryAGet32(ds, esi + 2205082);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x0000000c);
    edx = eax + -6;
    ecx = 0x0000000d;
    eax = 0x00157920;
loc_2d9b1: // 0160:2d9b1
    sub_17029();
loc_2d9b6: // 0160:2d9b6
    esi += 0x00000024;
    if (esi != 0x0000006c)
        goto loc_2d913;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2da80() // 0160:2da80 +long +stackDrop8
{
    esp -= 4;
    goto loc_2da80;
loc_265c5: // 0160:265c5
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
    return;
    // gap 29877 bytes
loc_2da80: // 0160:2da80
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, esp + 4, eax);
    esi = edx;
    memoryASet32(ds, esp + 8, ebx);
    edi = ecx;
    edx = ebx;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi;
    edx -= esi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = ecx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebx;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp))
        goto loc_2db15;
    eax = memoryAGet32(ds, esp + 4);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_2dae8;
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0x00000200);
    goto loc_2daf2;
loc_2dae8: // 0160:2dae8
    eax = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, eax, 0xfffffe00);
loc_2daf2: // 0160:2daf2
    if (ecx)
        goto loc_2dafb;
    ecx = 0x00000001;
loc_2dafb: // 0160:2dafb
    eax = ecx;
    ebx <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ecx = eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ss, ebp, eax);
    goto loc_2db4d;
loc_2db15: // 0160:2db15
    if ((int32_t)esi >= (int32_t)edi)
        goto loc_2db22;
    memoryASet32(ss, ebp, 0x00000200);
    goto loc_2db29;
loc_2db22: // 0160:2db22
    memoryASet32(ss, ebp, 0xfffffe00);
loc_2db29: // 0160:2db29
    if (ebx)
        goto loc_2db32;
    ebx = 0x00000001;
loc_2db32: // 0160:2db32
    eax = ebx;
    ecx <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    ebx = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 28);
    memoryASet32(ds, edx, eax);
loc_2db4d: // 0160:2db4d
    esp += 0x0000000c;
    goto loc_265c5;
}
void sub_2db55() // 0160:2db55 +long
{
    esp -= 4;
    goto loc_2db55;
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10139 bytes
loc_2db55: // 0160:2db55
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = 0x00000002;
    push32(0x0021adb0);
    eax = memoryAGet32(ds, 0x21ad94);
    edx = 0;
    push32(0x0021adac);
    memoryASet32(ds, 0x5ca90, edx);
    memoryASet32(ds, 0x21ad2c, ebx);
    memoryASet32(ds, 0x21ad9c, eax);
    eax = memoryAGet32(ds, 0x21ad98);
    ebx = memoryAGet32(ds, 0x21ad9c);
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, 0x21ada0, eax);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad8c);
    sub_2da80();
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = memoryAGet32(ds, 0x21ad9c);
    ecx = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, 0x21ada4, eax);
    eax = memoryAGet32(ds, 0x21ad90);
    edx -= ecx;
    memoryASet32(ds, 0x21ada8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x21ad90);
    edx = memoryAGet32(ds, 0x21ada0);
    edx -= esi;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebx;
    ecx = (int32_t)ecx * (int32_t)ebx;
    edx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    ecx += eax;
    memoryASet32(ds, esp, ecx);
    fild32(memoryAGet32(ds, esp));
    stop("disassembly failed at 160:2dc05 fsqrt ");
    sub_449f2();
    memoryASet32(ds, 0x21ad28, fistp32());
    if (memoryAGet32(ds, 0x21ad28) != 0x00000000)
        goto loc_2dc25;
    memoryASet32(ds, 0x21ad28, 0x00000001);
loc_2dc25: // 0160:2dc25
    edx <<= 11;
    ecx = memoryAGet32(ds, 0x21ad28);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax += 0x00000800;
    eax = memoryAGet32(ds, eax * 4 + 0x54ff0);
    memoryASet32(ds, 0x5ca84, eax);
    if ((int32_t)ebx >= 0)
        goto loc_2dc5e;
    eax = 0x00001000;
    edi = memoryAGet32(ds, 0x5ca84);
    eax -= edi;
    memoryASet32(ds, 0x5ca84, eax);
    goto loc_2dc6a;
loc_2dc5e: // 0160:2dc5e
    esi = eax + 2048;
    memoryASet32(ds, 0x5ca84, esi);
loc_2dc6a: // 0160:2dc6a
    edx = 0x00000019;
    ebp = memoryAGet32(ds, 0x5ca84);
    eax = memoryAGet32(ds, 0x21ad28);
    ebx = 0;
    ebp <<= 9;
    eax <<= 9;
    memoryASet32(ds, 0x5ca88, edx);
    memoryASet32(ds, 0x5cc20, ebx);
    memoryASet32(ds, 0x5cc24, ebx);
    memoryASet32(ds, 0x5ca84, ebp);
    memoryASet32(ds, 0x239f24, ebp);
    memoryASet32(ds, 0x21ad28, eax);
    if ((int32_t)eax >= (int32_t)0x00000800)
        goto loc_2b3b0;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, 0x21ad8c, edx);
    eax = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, 0x21ad90, eax);
    memoryASet32(ds, 0x21ada4, edx);
    memoryASet32(ds, 0x21ada8, eax);
    sub_2dd1b();
    goto loc_2b3b0;
}
void sub_2dce6() // 0160:2dce6 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x21ad8c, edx);
    memoryASet32(ds, 0x21ad90, edx);
    memoryASet32(ds, 0x21ad94, edx);
    memoryASet32(ds, 0x21ad98, edx);
    memoryASet32(ds, 0x21ad9c, edx);
    memoryASet32(ds, 0x21ada0, edx);
    memoryASet32(ds, 0x21ad2c, edx);
    memoryASet32(ds, 0x21ad30, edx);
    edx = pop32();
    esp += 4;
}
void sub_2dd1b() // 0160:2dd1b +long
{
    esp -= 4;
    goto loc_2dd1b;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 10593 bytes
loc_2dd1b: // 0160:2dd1b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x21ada4);
    edx = memoryAGet32(ds, 0x21ad8c);
    edx -= ebp;
    esi = eax;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = 0;
    memoryASet32(ds, 0x21ad2c, edi);
    memoryASet32(ds, ebx + 2201950, eax);
    eax = memoryAGet32(ds, 0x21ad90);
    edx = memoryAGet32(ds, 0x21ada8);
    eax -= edx;
    edx = eax;
    edx <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = esi + 2;
    memoryASet32(ds, edx + 2201954, eax);
    if ((int32_t)ebx <= 0)
        goto loc_2de27;
    if (ecx >= 0x000003c0)
        goto loc_2de27;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ecx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    ax = memoryAGet16(ds, esi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    ebx <<= 4;
    ebx -= eax;
    ebx <<= 6;
    eax = 0;
    al = memoryAGet(ds, ecx + ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2de3b;
loc_2de27: // 0160:2de27
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201962, memoryAGet32(ds, eax + 2201962) + 0x00000400);
loc_2de3b: // 0160:2de3b
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201950) <= (int32_t)0x00000000)
        goto loc_2de5a;
    memoryASet32(ds, eax + 2201982, 0x00000001);
    goto loc_2de64;
loc_2de5a: // 0160:2de5a
    memoryASet32(ds, eax + 2201982, 0xffffffff);
loc_2de64: // 0160:2de64
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 2202090, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202094, ebp);
    eax = memoryAGet32(ds, 0x5ca90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00002000)
        goto loc_2dec6;
    eax = memoryAGet32(ds, 0x21ac64);
    ebx = 0x000000ff;
    sub_1730a();
    edx = eax;
    eax = 0x0000003f;
    sub_36a16();
loc_2dec6: // 0160:2dec6
    ecx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x21ad8c, ecx);
    memoryASet32(ds, 0x21ad90, ecx);
    memoryASet32(ds, 0x21ad94, ecx);
    memoryASet32(ds, 0x21ad98, ecx);
    memoryASet32(ds, 0x21ad9c, ecx);
    memoryASet32(ds, 0x21ada0, ecx);
    memoryASet32(ds, 0x21ae54, ebx);
    memoryASet32(ds, 0x21acec, ecx);
    memoryASet32(ds, 0x21ad88, ecx);
    sub_19335();
    if (memoryAGet32(ds, 0x5ca8c) == 0x00000000)
        goto loc_2df16;
    sub_271e1();
loc_2df16: // 0160:2df16
    ebp = 0;
    ah = 0;
    memoryASet32(ds, 0x5ca8c, ebp);
    memoryASet(ds, 0x222f71, ah);
    goto loc_2b3b3;
}
void sub_2df2b() // 0160:2df2b +long
{
    esp -= 4;
    goto loc_2df2b;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11121 bytes
loc_2df2b: // 0160:2df2b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = 0;
    ah = memoryAGet(ds, 0x222f85);
    memoryASet16(ds, 0x21ac52, dx);
    if (ah)
        goto loc_2df50;
    if (memoryAGet(ds, 0x222f83) == 0x00)
        goto loc_2e0ce;
loc_2df50: // 0160:2df50
    if (memoryAGet32(ds, 0x5cc24) != 0x00000000)
        goto loc_2e0ce;
    if ((int32_t)memoryAGet32(ds, 0x5ca90) <= (int32_t)0x00000000)
        goto loc_2df6d;
    esi = 0x00000001;
    goto loc_2df72;
loc_2df6d: // 0160:2df6d
    esi = 0xffffffff;
loc_2df72: // 0160:2df72
    eax = memoryAGet32(ds, 0x5ca90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_2e02e;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_2e02e;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_2e02e;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2e02e;
    edi = memoryAGet32(ds, 0x5ca90);
    esi <<= 12;
    edi += esi;
    memoryASet32(ds, 0x5ca90, edi);
    goto loc_2e03f;
loc_2e02e: // 0160:2e02e
    ecx = memoryAGet32(ds, 0x5ca90);
    esi <<= 5;
    ecx += esi;
    memoryASet32(ds, 0x5ca90, ecx);
loc_2e03f: // 0160:2e03f
    if (memoryAGet32(ds, 0x590a4) != 0x00000000)
        goto loc_2e0ce;
    ebx = memoryAGet32(ds, 0x5ca84);
    ebx &= 0x001fffff;
    if ((int32_t)ebx <= (int32_t)0x00100000)
        goto loc_2e092;
    if ((int32_t)ebx >= (int32_t)0x00180000)
        goto loc_2e092;
    eax = memoryAGet32(ds, 0x5ca90);
    if ((int32_t)eax <= 0)
        goto loc_2e092;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x5ca90, eax);
loc_2e092: // 0160:2e092
    if ((int32_t)ebx < 0)
        goto loc_2e0a7;
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_2e0ce;
    if ((int32_t)memoryAGet32(ds, 0x5ca90) >= (int32_t)0x00000000)
        goto loc_2e0ce;
loc_2e0a7: // 0160:2e0a7
    edx = memoryAGet32(ds, 0x5ca90);
    eax = edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x5ca90, eax);
loc_2e0ce: // 0160:2e0ce
    if (memoryAGet(ds, 0x222f80) == 0x00)
        goto loc_2e0fb;
    ebx = memoryAGet32(ds, 0x21ad28);
    ebx -= 0x00000400;
    memoryASet32(ds, 0x21ad28, ebx);
    if ((int32_t)ebx >= (int32_t)0x00000800)
        goto loc_2e0fb;
    memoryASet32(ds, 0x21ad28, 0x00000800);
loc_2e0fb: // 0160:2e0fb
    if (memoryAGet(ds, 0x222f88) == 0x00)
        goto loc_2b3b4;
    edi = memoryAGet32(ds, 0x21ad28);
    edi += 0x00000400;
    memoryASet32(ds, 0x21ad28, edi);
    if ((int32_t)edi <= (int32_t)0x00012c00)
        goto loc_2b3b4;
    memoryASet32(ds, 0x21ad28, 0x00012c00);
    goto loc_2b3b4;
}
void sub_2e135() // 0160:2e135 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ad8c, edx);
    memoryASet32(ds, 0x21ad90, edx);
    memoryASet32(ds, 0x21ad94, edx);
    memoryASet32(ds, 0x21ad98, edx);
    memoryASet32(ds, 0x21ad9c, edx);
    memoryASet32(ds, 0x21ada0, edx);
    memoryASet32(ds, 0x21acec, edx);
    memoryASet32(ds, 0x21ad88, edx);
    memoryASet32(ds, 0x5ca8c, edx);
    memoryASet32(ds, 0x21ad2c, edx);
    memoryASet32(ds, 0x21ad30, edx);
    sub_17452();
    memoryASet32(ds, 0x21acc0, edx);
    edx = pop32();
    esp += 4;
}
void sub_2e18c() // 0160:2e18c +long
{
    esp -= 4;
    goto loc_2e18c;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11730 bytes
loc_2e18c: // 0160:2e18c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_2e227;
    if (ebx >= 0x000003c0)
        goto loc_2e227;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    eax <<= 4;
    edx = ebx;
    eax -= esi;
    edx = sar32(edx, 0x1f);
    esi = eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    esi = ecx;
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e379;
loc_2e227: // 0160:2e227
    esi = ecx + -4;
    if ((int32_t)esi <= 0)
        goto loc_2e29b;
    if (ebx >= 0x000003c0)
        goto loc_2e29b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax <<= 4;
    edx = ebx;
    eax -= edi;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax = ebx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e379;
loc_2e29b: // 0160:2e29b
    esi = ecx + -4;
    if ((int32_t)esi <= 0)
        goto loc_2e308;
    edi = ebx + -3;
    if (edi >= 0x000003c0)
        goto loc_2e308;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = edi;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ebx + eax + 1643117);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e379;
loc_2e308: // 0160:2e308
    ecx -= 0x00000004;
    if ((int32_t)ecx <= 0)
        goto loc_2e383;
    esi = ebx + 4;
    if (esi >= 0x000003c0)
        goto loc_2e383;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax <<= 4;
    edx = esi;
    eax -= edi;
    edx = sar32(edx, 0x1f);
    edi = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebx += eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643124);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2e383;
loc_2e379: // 0160:2e379
    eax = 0x00000001;
    goto loc_2b3b3;
loc_2e383: // 0160:2e383
    eax = 0;
    goto loc_2b3b3;
}
void sub_2e38a() // 0160:2e38a +long
{
    esp -= 4;
    goto loc_2e38a;
loc_2606c: // 0160:2606c
    esp += 0x0000000c;
    goto loc_2b3b3;
    // gap 21311 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 12240 bytes
loc_2e38a: // 0160:2e38a
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    edx = memoryAGet32(ds, 0x5ca98);
    if (!edx)
        goto loc_2e3a6;
    ebx = edx + -1;
    memoryASet32(ds, 0x5ca98, ebx);
loc_2e3a6: // 0160:2e3a6
    if (memoryAGet32(ds, 0x21ad2c) == 0x00000000)
        goto loc_2606c;
    eax = memoryAGet32(ds, 0x21ad28);
    esi = memoryAGet32(ds, 0x5ca88);
    memoryASet32(ds, esp + 4, eax);
    if (esi)
        goto loc_2e3cb;
    sub_2df2b();
loc_2e3cb: // 0160:2e3cb
    eax = memoryAGet32(ds, 0x5ca84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax &= 0x00000fff;
    ebx = eax + 1024;
    edi = memoryAGet32(ds, 0x21ad2c);
    ebx &= 0x00000fff;
    memoryASet32(ds, esp + 8, eax);
    if (edi != 0x00000002)
        goto loc_2eaac;
    ebp = memoryAGet32(ds, 0x5cc24);
    if (!ebp)
        goto loc_2e413;
    eax = ebp + -1;
    memoryASet32(ds, 0x5cc24, eax);
loc_2e413: // 0160:2e413
    edx = 0x00000001;
    ecx = memoryAGet32(ds, 0x5ca88);
    memoryASet32(ds, 0x21ad88, edx);
    if (!ecx)
        goto loc_2e439;
    esi = ecx;
    esi -= edx;
    memoryASet32(ds, 0x5ca88, esi);
    if (esi)
        goto loc_2e439;
    sub_18308();
loc_2e439: // 0160:2e439
    eax = memoryAGet32(ds, 0x21ad94);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_2e52e;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    if ((int32_t)eax <= 0)
        goto loc_2e514;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    if (eax >= 0x000003c0)
        goto loc_2e514;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, esp);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = edi;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e51b;
loc_2e514: // 0160:2e514
    eax = 0x00000001;
    goto loc_2e51d;
loc_2e51b: // 0160:2e51b
    eax = 0;
loc_2e51d: // 0160:2e51d
    if (!eax)
        goto loc_2e52e;
    if (memoryAGet32(ds, 0x5ca88) == 0x00000000)
        goto loc_2e6a3;
loc_2e52e: // 0160:2e52e
    edi = esi + -1;
    if ((int32_t)edi <= 0)
        goto loc_2e598;
    if (ecx >= 0x000003c0)
        goto loc_2e598;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = edi;
    eax <<= 4;
    eax -= edi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e59f;
loc_2e598: // 0160:2e598
    eax = 0x00000001;
    goto loc_2e5a1;
loc_2e59f: // 0160:2e59f
    eax = 0;
loc_2e5a1: // 0160:2e5a1
    if (!eax)
        goto loc_2e6ad;
    if ((int32_t)esi <= 0)
        goto loc_2e612;
    if (ecx >= 0x000003c0)
        goto loc_2e612;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    eax = 0;
    edi = edx;
    ax = memoryAGet16(ds, 0x21ac52);
    edi &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edi;
    if (eax)
        goto loc_2e619;
loc_2e612: // 0160:2e612
    eax = 0x00000001;
    goto loc_2e61b;
loc_2e619: // 0160:2e619
    eax = 0;
loc_2e61b: // 0160:2e61b
    if (!eax)
        goto loc_2e6ad;
    esi++;
    if ((int32_t)esi <= 0)
        goto loc_2e68d;
    if (ecx >= 0x000003c0)
        goto loc_2e68d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2e694;
loc_2e68d: // 0160:2e68d
    eax = 0x00000001;
    goto loc_2e696;
loc_2e694: // 0160:2e694
    eax = 0;
loc_2e696: // 0160:2e696
    if (!eax)
        goto loc_2e6ad;
    if (memoryAGet32(ds, 0x5ca88) != 0x00000000)
        goto loc_2e6ad;
loc_2e6a3: // 0160:2e6a3
    sub_2dd1b();
    goto loc_2eaac;
loc_2e6ad: // 0160:2e6ad
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, 0x5ca8c, edx);
    memoryASet32(ds, 0x21ada4, eax);
    edx = memoryAGet32(ds, ebx * 4 + 0x50ff0);
    eax = memoryAGet32(ds, 0x21ad90);
    edx <<= 9;
    memoryASet32(ds, 0x21ada8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    esi = eax;
    eax = memoryAGet32(ds, 0x21ad28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 8);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad94);
    edx = memoryAGet32(ds, edx * 4 + 0x50ff0);
    eax += esi;
    edx <<= 9;
    memoryASet32(ds, 0x21ad8c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    ecx = (int32_t)ecx * (int32_t)eax;
    eax = memoryAGet32(ds, 0x21ad98);
    eax += ecx;
    ecx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ad90, eax);
    eax = ecx * 0x000000ac;
    esi = 0x00000001;
    memoryASet32(ds, eax + 2201950, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, esi);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, eax + 2201958, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, eax + 2201962, edx);
    ebp = esi;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, eax + 2201966, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, eax + 2201970, edx);
    edx = 0;
    memoryASet32(ds, 0x21acec, ebp);
    memoryASet16(ds, 0x21ac52, dx);
    sub_2e18c();
    if (!eax)
        goto loc_2e829;
    eax = memoryAGet32(ds, 0x239f24);
    dl = memoryAGet(ds, 0x222f83);
    memoryASet32(ds, 0x5ca84, eax);
    if (dl)
        goto loc_2e7e8;
    if (memoryAGet(ds, 0x222f85) == 0x00)
        goto loc_2e7f0;
loc_2e7e8: // 0160:2e7e8
    memoryASet32(ds, 0x5ca90, -memoryAGet32(ds, 0x5ca90));
    goto loc_2e806;
loc_2e7f0: // 0160:2e7f0
    edx = memoryAGet32(ds, 0x5ca90);
    edx = -edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x5ca90, eax);
loc_2e806: // 0160:2e806
    eax = memoryAGet32(ds, esp + 4);
    edx = 0x00000001;
    cl = memoryAGet(ds, 0x222f71);
    memoryASet32(ds, 0x21ad28, eax);
    memoryASet32(ds, 0x5cc24, edx);
    if (!cl)
        goto loc_2e829;
    sub_2dd1b();
loc_2e829: // 0160:2e829
    edx = memoryAGet32(ds, ebx * 4 + 0x50ff0);
    ebx = memoryAGet32(ds, 0x21ad44);
    edx <<= 9;
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<6) & 0x80000000);
    edx <<= 7;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x07);
    memoryASet16(ds, 0x21ac52, 0xffff);
    ecx = memoryAGet32(ds, 0x5ca90);
    ecx += eax;
    eax = memoryAGet32(ds, 0x5ca84);
    memoryASet32(ds, 0x239f24, eax);
    eax = memoryAGet32(ds, 0x21ad28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<10) & 0x80000000);
    edx <<= 11;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0b);
    memoryASet32(ds, 0x5ca90, ecx);
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_2e897;
    ebx = 0x00000004;
    goto loc_2e8a1;
loc_2e897: // 0160:2e897
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_2e8a1;
    ebx = 0x00000032;
loc_2e8a1: // 0160:2e8a1
    eax = memoryAGet32(ds, 0x5ca90);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 3;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = memoryAGet32(ds, 0x5ca84);
    esi += eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x239f24);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x5ca84, esi);
    ebx &= 0x00000fff;
    ecx = eax;
    eax = memoryAGet32(ds, 0x5ca90);
    ecx &= 0x00000fff;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000200)
        goto loc_2e9be;
    edx = 0x00000003;
    eax = 0;
    sub_24709();
    if (eax)
        goto loc_2e976;
    if (memoryAGet32(ds, 0x5cc20) != 0x00000000)
        goto loc_2e976;
    if ((int32_t)ebx >= (int32_t)0x00000800)
        goto loc_2e976;
    if ((int32_t)ecx >= (int32_t)0x00000800)
        goto loc_2e976;
    if ((int32_t)ebx <= (int32_t)0x00000400)
        goto loc_2e946;
    if ((int32_t)ecx < (int32_t)0x00000400)
        goto loc_2e956;
loc_2e946: // 0160:2e946
    if ((int32_t)ebx >= (int32_t)0x00000400)
        goto loc_2e976;
    if ((int32_t)ecx <= (int32_t)0x00000400)
        goto loc_2e976;
loc_2e956: // 0160:2e956
    ebp = 0x00000019;
    eax = ebx;
    ebx = 0x000000ff;
    memoryASet32(ds, 0x5cc20, ebp);
    sub_1730a();
    edx = eax;
    eax = 0x0000003e;
    goto loc_2e9b9;
loc_2e976: // 0160:2e976
    if ((int32_t)ebx <= (int32_t)0x00000800)
        goto loc_2e9be;
    if ((int32_t)ecx <= (int32_t)0x00000800)
        goto loc_2e9be;
    if ((int32_t)ebx <= (int32_t)0x00000c00)
        goto loc_2e996;
    if ((int32_t)ecx < (int32_t)0x00000c00)
        goto loc_2e9a6;
loc_2e996: // 0160:2e996
    if ((int32_t)ebx >= (int32_t)0x00000c00)
        goto loc_2e9be;
    if ((int32_t)ecx <= (int32_t)0x00000c00)
        goto loc_2e9be;
loc_2e9a6: // 0160:2e9a6
    eax = ebx;
    sub_1730a();
    ebx = 0x000000ff;
    edx = eax;
    eax = 0x0000003f;
loc_2e9b9: // 0160:2e9b9
    sub_36a16();
loc_2e9be: // 0160:2e9be
    eax = memoryAGet32(ds, 0x5ca90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_2e9e1;
    edx = 0x00000008;
loc_2e9e1: // 0160:2e9e1
    eax = edx;
    edx = memoryAGet32(ds, 0x5ca90);
    ebx = memoryAGet32(ds, eax * 4 + 0x5cc28);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x5ca84);
    edx &= 0x001fffff;
    memoryASet32(ds, 0x5ca90, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, edx + 2202090, 0xfffffffc);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebp = memoryAGet32(ds, edx + 2201982);
    eax &= 0x0000000f;
    if ((int32_t)ebp <= 0)
        goto loc_2ea6c;
    memoryASet32(ds, edx + 2202090, 0xfffffffd);
    edx = 0x00000007;
    edx -= eax;
    eax = edx;
    eax &= 0x0000000f;
loc_2ea6c: // 0160:2ea6c
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax <<= 4;
    eax += 0x00003840;
    memoryASet32(ds, edx + 2201934, eax);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201938, 0x00000039);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202094, 0x00000006);
loc_2eaac: // 0160:2eaac
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 2201958);
    if ((int32_t)ecx < 0)
        goto loc_2ead4;
    if ((int32_t)ecx > (int32_t)0x00078000)
        goto loc_2ead4;
    if ((int32_t)memoryAGet32(ds, eax + 2201962) <= (int32_t)0x0002fc00)
        goto loc_2ead9;
loc_2ead4: // 0160:2ead4
    sub_2e135();
loc_2ead9: // 0160:2ead9
    ebp = memoryAGet32(ds, 0x5cc20);
    if (!ebp)
        goto loc_2606c;
    eax = ebp + -1;
    memoryASet32(ds, 0x5cc20, eax);
    goto loc_2606c;
}
void sub_2eaf4() // 0160:2eaf4 +long
{
    esp -= 4;
    goto loc_2eaf4;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14138 bytes
loc_2eaf4: // 0160:2eaf4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    if (memoryAGet32(ds, 0x21ad2c) != 0x00000000)
        goto loc_2eb13;
    if ((int32_t)memoryAGet32(ds, 0x21ad30) < (int32_t)0x00000002)
        goto loc_2ed33;
loc_2eb13: // 0160:2eb13
    ecx = memoryAGet32(ds, 0x21ad8c);
    if (!ecx)
        goto loc_2ed33;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, 0x21af0c);
    eax -= esi;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, 0x21ad94);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, 0x21af10);
    eax -= ebp;
    ebp = eax;
    eax = memoryAGet32(ds, 0x21ad98);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, 0x21ad94);
    ebx -= esi;
    esi = memoryAGet32(ds, 0x21ad8c);
    esi -= edi;
    edi = memoryAGet32(ds, 0x21ad90);
    edx = memoryAGet32(ds, 0x21af10);
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad98);
    ecx -= edx;
    edx = memoryAGet32(ds, 0x21ad30);
    edi -= eax;
    if ((int32_t)edx < (int32_t)0x00000002)
        goto loc_2ebbc;
    eax = memoryAGet32(ds, 0x5cc4c);
    ebx -= eax;
    eax <<= 9;
    esi += eax;
loc_2ebbc: // 0160:2ebbc
    edx = ebx;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = memoryAGet32(ds, esp + 8);
    edx <<= 16;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, 0x21af08));
    edx = ecx;
    memoryASet32(ds, esp + 8, eax);
    edx <<= 16;
    ecx = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = ebp;
    ecx = eax;
    edx <<= 16;
    ebp = memoryAGet32(ds, 0x21af08);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebp = eax;
    eax = esi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    memoryASet32(ds, esp + 4, eax);
    eax = edi;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 4))
        goto loc_2ecaf;
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, esp + 8))
        goto loc_2ec37;
    ebp = 0x00000001;
    goto loc_2ec3c;
loc_2ec37: // 0160:2ec37
    ebp = 0xffffffff;
loc_2ec3c: // 0160:2ec3c
    if (esi)
        goto loc_2ec45;
    esi = 0x00000001;
loc_2ec45: // 0160:2ec45
    eax = esi;
    edi <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    esi = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx <<= 9;
    ecx += 0x00000100;
    edi = eax;
loc_2ec65: // 0160:2ec65
    if (ebx == memoryAGet32(ds, esp + 8))
        goto loc_2ed33;
    if (ebx >= 0x00000140)
        goto loc_2eca9;
    if (ecx >= 0x00015000)
        goto loc_2eca9;
    al = bl;
    al &= 0x01;
    edx = ecx;
    al += 0x09;
    edx = sar32(edx, 0x1f);
    memoryASet(ds, esp + 12, al);
    eax = ecx;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = eax * 0x00000140;
    dl = memoryAGet(ds, esp + 12);
    memoryASet(ds, ebx + eax + 1060016, dl);
loc_2eca9: // 0160:2eca9
    ebx += ebp;
    ecx += edi;
    goto loc_2ec65;
loc_2ecaf: // 0160:2ecaf
    if ((int32_t)ecx >= (int32_t)ebp)
        goto loc_2ecbc;
    memoryASet32(ds, esp, 0x00000001);
    goto loc_2ecc3;
loc_2ecbc: // 0160:2ecbc
    memoryASet32(ds, esp, 0xffffffff);
loc_2ecc3: // 0160:2ecc3
    if (edi)
        goto loc_2eccc;
    edi = 0x00000001;
loc_2eccc: // 0160:2eccc
    eax = edi;
    esi <<= 9;
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edi = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    ebx <<= 9;
    ebx += 0x00000100;
    esi = eax;
loc_2ecec: // 0160:2ecec
    if (ecx == ebp)
        goto loc_2ed33;
    if (ebx >= 0x00028000)
        goto loc_2ed2a;
    if (ecx >= 0x000000a8)
        goto loc_2ed2a;
    al = cl;
    al &= 0x01;
    edx = ebx;
    al += 0x09;
    edx = sar32(edx, 0x1f);
    memoryASet(ds, esp + 12, al);
    eax = ebx;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = ecx * 0x00000140;
    dl = memoryAGet(ds, esp + 12);
    memoryASet(ds, edi + eax + 1060016, dl);
loc_2ed2a: // 0160:2ed2a
    eax = memoryAGet32(ds, esp);
    ebx += esi;
    ecx += eax;
    goto loc_2ecec;
loc_2ed33: // 0160:2ed33
    esp += 0x00000010;
    goto loc_2b3b3;
}
void sub_2ed3b() // 0160:2ed3b +long
{
    esp -= 4;
    goto loc_2ed3b;
loc_264d8: // 0160:264d8
    esp += 0x00000014;
    goto loc_2b3b3;
    // gap 20179 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 14721 bytes
loc_2ed3b: // 0160:2ed3b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, esp + 16, edx);
    edx = 0;
    memoryASet16(ds, 0x21ac52, dx);
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax + -6;
    ebp = memoryAGet32(ds, ebx + 2201982);
    eax = edi;
    eax += ebp;
    ebx = edi;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    eax = esp + 20;
    memoryASet32(ds, esp + 16, esi);
    sub_26d3f();
    if (!eax)
        goto loc_2ede2;
    ebp = -ebp;
    eax = edi;
    eax += ebp;
    memoryASet32(ds, esp + 12, eax);
    eax = esp;
    edx = esp + 8;
    push32(eax);
    eax = esp + 8;
    ecx = esi;
    push32(eax);
    ebx = edi;
    eax = esp + 20;
    sub_26d3f();
    if (eax)
        goto loc_264d8;
loc_2ede2: // 0160:2ede2
    ebx = memoryAGet32(ds, esp + 16);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    edx = memoryAGet32(ds, esp + 12);
    eax <<= 2;
    esi = 0;
    eax -= ebx;
    memoryASet32(ds, 0x21aeec, esi);
    eax <<= 2;
    edx <<= 9;
    memoryASet32(ds, eax + 2206550, edx);
    memoryASet32(ds, eax + 2206558, esi);
    memoryASet32(ds, eax + 2206562, esi);
    memoryASet32(ds, eax + 2206586, esi);
    memoryASet32(ds, eax + 2206570, esi);
    edx = memoryAGet32(ds, esp + 8);
    esi = 0x000001f4;
    edx += 0x00000006;
    memoryASet32(ds, eax + 2206582, esi);
    edx <<= 9;
    memoryASet32(ds, eax + 2206554, edx);
    edx = memoryAGet32(ds, eax + 2206550);
    memoryASet32(ds, eax + 2206574, edx);
    edx = memoryAGet32(ds, eax + 2206554);
    edi = 0x0000000c;
    memoryASet32(ds, eax + 2206578, edx);
    memoryASet32(ds, 0x21aef0, edi);
    memoryASet32(ds, eax + 2206566, ebp);
    if ((int32_t)ebp <= 0)
        goto loc_2ee79;
    memoryASet32(ds, eax + 2206590, 0x001903e0);
    goto loc_264d8;
loc_2ee79: // 0160:2ee79
    memoryASet32(ds, eax + 2206590, 0x00151920);
    goto loc_264d8;
}
void sub_2ee88() // 0160:2ee88 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    esi = eax;
    edi = edx;
    memoryASet32(ds, esp + 8, ecx);
    eax = 0x00000001;
    cl = memoryAGet(ds, 0x21ac64);
    eax <<= cl;
    edx = 0;
    eax ^= 0x0000ffff;
    memoryASet32(ds, esp + 12, edx);
    memoryASet16(ds, 0x21ac52, ax);
    if ((int32_t)edi <= 0)
        goto loc_2f2a3;
    ecx = edi + 1;
    if ((int32_t)ecx <= 0)
        goto loc_2f0cb;
    if (esi >= 0x000003c0)
        goto loc_2f0cb;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (!eax)
        goto loc_2f0cb;
    ecx = edi + -15;
    if ((int32_t)ecx <= 0)
        goto loc_2ef9c;
    if (esi >= 0x000003c0)
        goto loc_2ef9c;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ebp = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebp;
    if (eax)
        goto loc_2efa3;
loc_2ef9c: // 0160:2ef9c
    eax = 0x00000001;
    goto loc_2efa5;
loc_2efa3: // 0160:2efa3
    eax = 0;
loc_2efa5: // 0160:2efa5
    if (!eax)
        goto loc_2f0cb;
    ecx = edi + -4;
    if ((int32_t)ecx <= 0)
        goto loc_2f033;
    ebp = esi + ebx;
    if (ebp >= 0x000003c0)
        goto loc_2f033;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = memoryAGet32(ds, esp);
    eax += eax;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    dx = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    ebp += eax;
    eax = 0;
    al = memoryAGet(ss, ebp + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f168;
loc_2f033: // 0160:2f033
    ebp = edi + -4;
    if ((int32_t)ebp <= 0)
        goto loc_2f0cb;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = esi + eax;
    if (ecx >= 0x000003c0)
        goto loc_2f0cb;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    edx = ebp;
    memoryASet32(ds, esp, eax);
    edx = sar32(edx, 0x1f);
    eax = ebp;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 6;
    eax += edx;
    ax = memoryAGet16(ds, eax + 742608);
    eax &= 0x0000ffff;
    memoryASet32(ds, esp + 4, eax);
    eax = 0;
    edx = memoryAGet32(ds, esp + 4);
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebp;
    eax <<= 4;
    eax -= ebp;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f168;
loc_2f0cb: // 0160:2f0cb
    ecx = edi + 8;
    if ((int32_t)ecx <= 0)
        goto loc_2f139;
    if (esi >= 0x000003c0)
        goto loc_2f139;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    eax <<= 4;
    edx = esi;
    eax -= ebp;
    edx = sar32(edx, 0x1f);
    ebp = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    ax = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    ebp = memoryAGet16(ds, 0x21ac52);
    eax &= 0x0000ffff;
    ebp &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    al = memoryAGet(ds, esi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    ebp |= eax;
    if (ebp)
        goto loc_2f140;
loc_2f139: // 0160:2f139
    eax = 0x00000001;
    goto loc_2f142;
loc_2f140: // 0160:2f140
    eax = 0;
loc_2f142: // 0160:2f142
    if (!eax)
        goto loc_2f1f6;
    ecx = memoryAGet32(ds, esp + 12);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax <<= 2;
    eax -= ecx;
    if (memoryAGet32(ds, eax * 4 + 0x21ab6a) != 0x00000000)
        goto loc_2f1f6;
loc_2f168: // 0160:2f168
    ecx = memoryAGet32(ds, esp + 12);
    eax = ecx;
    eax <<= 2;
    eax -= ecx;
    eax <<= 2;
    eax -= ecx;
    edi = 0x00000251;
    eax <<= 2;
    ebp = 0xfffffb00;
    memoryASet32(ds, eax + 2206558, edi);
    memoryASet32(ds, eax + 2206562, ebp);
    if ((int32_t)ebx >= 0)
        goto loc_2f1a3;
    ebx = memoryAGet32(ds, eax + 2206558);
    ebx = -ebx;
    memoryASet32(ds, eax + 2206558, ebx);
loc_2f1a3: // 0160:2f1a3
    ebx = memoryAGet32(ds, esp + 12);
    eax = ebx;
    eax <<= 2;
    eax -= ebx;
    eax <<= 2;
    eax -= ebx;
    memoryASet32(ds, eax * 4 + 0x21ab6a, 0x0000000a);
    if (memoryAGet32(ds, 0x21aef0) != 0x00000000)
        goto loc_2f2a3;
    eax = esi;
    eax <<= 9;
    ebx = 0x000000ff;
    sub_1736c();
    edx = eax;
    eax = 0x00000011;
    ecx = 0x00000032;
    sub_36a16();
    memoryASet32(ds, 0x21aef0, ecx);
    goto loc_2f2a3;
loc_2f1f6: // 0160:2f1f6
    ebx = edi + 1;
    if ((int32_t)ebx <= 0)
        goto loc_2f2a3;
    if (esi >= 0x000003c0)
        goto loc_2f2a3;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax;
    eax <<= 4;
    edx = esi;
    eax -= ecx;
    edx = sar32(edx, 0x1f);
    ecx = eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx <<= 6;
    eax += eax;
    eax += ecx;
    ecx = 0;
    cx = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    ecx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ecx;
    if (!eax)
        goto loc_2f2a3;
    if ((int32_t)memoryAGet32(ds, esp + 8) <= (int32_t)0x00000000)
        goto loc_2f2a3;
    eax = memoryAGet32(ds, esp + 12);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    edi <<= 9;
    edx = 0;
    memoryASet32(ds, esi * 4 + 0x21ab5a, edi);
    memoryASet32(ds, esi * 4 + 0x21ab62, edx);
    memoryASet32(ds, esi * 4 + 0x21ab5e, edx);
    memoryASet32(ds, esi * 4 + 0x21ab6a, edx);
loc_2f2a3: // 0160:2f2a3
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_2f2aa() // 0160:2f2aa +long
{
    esp -= 4;
    goto loc_2f2aa;
loc_2c6d0: // 0160:2c6d0
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11220 bytes
loc_2f2aa: // 0160:2f2aa
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ecx = eax;
    ebx = edx;
    edx = 0;
    esi = ebx + -4;
    memoryASet32(ds, esp, edx);
    if ((int32_t)esi <= 0)
        goto loc_2f424;
    if (eax >= 0x000003c0)
        goto loc_2f424;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2f424;
    ebx = memoryAGet32(ds, 0x21ab62);
    if ((int32_t)ebx >= 0)
        goto loc_2f368;
    eax = ebx;
    eax = -eax;
    memoryASet32(ds, 0x21ab62, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000200)
        goto loc_2f368;
    edx = memoryAGet32(ds, 0x21ab62);
    edx += edx;
    ebx = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x21ab62, eax);
loc_2f368: // 0160:2f368
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx <<= 2;
    eax = memoryAGet32(ds, edx + 2206578);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    esi = eax + 2;
    if ((int32_t)esi <= 0)
        goto loc_2f3ff;
    if (ecx >= 0x000003c0)
        goto loc_2f3ff;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f402;
loc_2f3ff: // 0160:2f3ff
    ebx += 0x00000002;
loc_2f402: // 0160:2f402
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    esi = ebx;
    eax -= edx;
    esi <<= 9;
    memoryASet32(ds, eax * 4 + 0x21ab5a, esi);
    memoryASet32(ds, eax * 4 + 0x21ab72, esi);
loc_2f424: // 0160:2f424
    eax = memoryAGet32(ds, esp);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    if (memoryAGet32(ds, esi + 2206570) != 0x00000000)
        goto loc_2f764;
    edx = memoryAGet32(ds, esi + 2206586);
    edx += 0x00000004;
    edi = 0x00000030;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    eax = memoryAGet32(ds, esi + 2206566);
    memoryASet32(ds, esi + 2206586, edx);
    eax <<= 9;
    memoryASet32(ds, esi + 2206550, memoryAGet32(ds, esi + 2206550) + eax);
    esi = ebx + -3;
    if ((int32_t)esi <= 0)
        goto loc_2f4de;
    if (ecx >= 0x000003c0)
        goto loc_2f4de;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f569;
loc_2f4de: // 0160:2f4de
    esi = ebx + -3;
    if ((int32_t)esi <= 0)
        goto loc_2f5d6;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edi = memoryAGet32(ds, eax * 4 + 0x21ab66);
    edi += ecx;
    if (edi >= 0x000003c0)
        goto loc_2f5d6;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, eax + ebp + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    edi += eax;
    eax = 0;
    al = memoryAGet(ds, edi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2f5d6;
loc_2f569: // 0160:2f569
    if (memoryAGet32(ds, 0x21aeec) != 0x00000000)
        goto loc_2f59c;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    esi = 0x00000004;
    eax -= edx;
    memoryASet32(ds, 0x21aeec, esi);
    edx = memoryAGet32(ds, eax * 4 + 0x21ab66);
    edx = -edx;
    memoryASet32(ds, eax * 4 + 0x21ab66, edx);
loc_2f59c: // 0160:2f59c
    eax = memoryAGet32(ds, esp);
    edx = eax;
    edx <<= 2;
    edx -= eax;
    edx <<= 2;
    edx -= eax;
    eax = memoryAGet32(ds, edx * 4 + 0x21ab6e);
    memoryASet32(ds, edx * 4 + 0x21ab56, eax);
    eax = memoryAGet32(ds, edx * 4 + 0x21ab72);
    memoryASet32(ds, edx * 4 + 0x21ab5a, eax);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
loc_2f5d6: // 0160:2f5d6
    if ((int32_t)ebx <= 0)
        goto loc_2f6b9;
    if (ecx >= 0x000003c0)
        goto loc_2f6b9;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax;
    edx = ecx;
    esi <<= 4;
    edx = sar32(edx, 0x1f);
    esi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi <<= 6;
    edi = eax + eax;
    eax = esi + edi;
    esi = 0;
    si = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    esi &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_2f6b9;
    esi = ebx;
    esi <<= 4;
    esi -= ebx;
    esi <<= 6;
    esi += ecx;
loc_2f656: // 0160:2f656
    if ((int32_t)ebx <= 0)
        goto loc_2f746;
    if (ecx >= 0x000003c0)
        goto loc_2f746;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, edi + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2f746;
    esi -= 0x000003c0;
    ebx--;
    goto loc_2f656;
loc_2f6b9: // 0160:2f6b9
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = ebx;
    esi <<= 4;
    edi = 0;
    esi -= ebx;
    eax += eax;
    esi <<= 6;
    memoryASet32(ds, esp + 4, eax);
    esi += ecx;
    ebp = memoryAGet32(ds, esp + 4);
loc_2f6dc: // 0160:2f6dc
    if ((int32_t)ebx <= 0)
        goto loc_2f729;
    if (ecx >= 0x000003c0)
        goto loc_2f729;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    eax += ebp;
    edx = 0;
    dx = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, esi + 1643120);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f730;
loc_2f729: // 0160:2f729
    eax = 0x00000001;
    goto loc_2f732;
loc_2f730: // 0160:2f730
    eax = 0;
loc_2f732: // 0160:2f732
    if (!eax)
        goto loc_2f745;
    edi++;
    if ((int32_t)edi >= (int32_t)0x00000003)
        goto loc_2f745;
    esi += 0x000003c0;
    ebx++;
    goto loc_2f6dc;
loc_2f745: // 0160:2f745
    ebx--;
loc_2f746: // 0160:2f746
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    ebx <<= 9;
    memoryASet32(ds, eax * 4 + 0x21ab5a, ebx);
    goto loc_2f8ef;
loc_2f764: // 0160:2f764
    if ((int32_t)memoryAGet32(ds, esi + 2206562) >= (int32_t)0x00000000)
        goto loc_2f779;
    memoryASet32(ds, esi + 2206586, 0x00000010);
    goto loc_2f783;
loc_2f779: // 0160:2f779
    memoryASet32(ds, esi + 2206586, 0x00000020);
loc_2f783: // 0160:2f783
    esi = ebx + -4;
    if ((int32_t)esi <= 0)
        goto loc_2f7f4;
    if (ecx >= 0x000003c0)
        goto loc_2f7f4;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax + eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi;
    eax <<= 4;
    eax -= esi;
    eax <<= 6;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2f87d;
loc_2f7f4: // 0160:2f7f4
    ebx -= 0x00000004;
    if ((int32_t)ebx <= 0)
        goto loc_2f8ef;
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    ecx += memoryAGet32(ds, eax * 4 + 0x21ab66);
    if (ecx >= 0x000003c0)
        goto loc_2f8ef;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax + eax;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    edx = 0;
    dx = memoryAGet16(ds, esi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2f8ef;
loc_2f87d: // 0160:2f87d
    if (memoryAGet32(ds, 0x21aeec) != 0x00000000)
        goto loc_2f8d2;
    eax = memoryAGet32(ds, esp);
    ebx = eax;
    ebx <<= 2;
    ebx -= eax;
    ebx <<= 2;
    ebx -= eax;
    ebp = 0x00000004;
    ebx <<= 2;
    memoryASet32(ds, 0x21aeec, ebp);
    eax = memoryAGet32(ds, ebx + 2206558);
    eax = -eax;
    memoryASet32(ds, ebx + 2206558, eax);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax <= (int32_t)0x00000100)
        goto loc_2f8d2;
    eax = memoryAGet32(ds, ebx + 2206558);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, ebx + 2206558, eax);
loc_2f8d2: // 0160:2f8d2
    edx = memoryAGet32(ds, esp);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax -= edx;
    edx = memoryAGet32(ds, eax * 4 + 0x21ab6e);
    memoryASet32(ds, eax * 4 + 0x21ab56, edx);
loc_2f8ef: // 0160:2f8ef
    eax = memoryAGet32(ds, 0x21aeec);
    if (!eax)
        goto loc_2f901;
    edx = eax + -1;
    memoryASet32(ds, 0x21aeec, edx);
loc_2f901: // 0160:2f901
    esp += 0x00000008;
    goto loc_2c6d0;
}
void sub_2f909() // 0160:2f909 +long
{
    esp -= 4;
    goto loc_2f909;
loc_2a253: // 0160:2a253
    esp += 0x00000008;
    goto loc_2b3b3;
    // gap 4440 bytes
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 17743 bytes
loc_2f909: // 0160:2f909
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edx = 0;
    ebx = memoryAGet32(ds, 0x21ab56);
    memoryASet32(ds, esp + 4, edx);
    if (!ebx)
        goto loc_2a253;
    ecx = 0x00000032;
    eax = memoryAGet32(ds, 0x21ab66);
    esi = memoryAGet32(ds, 0x21ab76);
    edi = memoryAGet32(ds, 0x21aef0);
    memoryASet32(ds, 0x21aefc, ecx);
    esi--;
    memoryASet32(ds, esp, eax);
    memoryASet32(ds, 0x21ab76, esi);
    if (!edi)
        goto loc_2f959;
    ebp = edi + -1;
    memoryASet32(ds, 0x21aef0, ebp);
loc_2f959: // 0160:2f959
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    eax = memoryAGet32(ds, esi + 2206550);
    memoryASet32(ds, esi + 2206574, eax);
    eax = memoryAGet32(ds, esi + 2206554);
    memoryASet32(ds, esi + 2206578, eax);
    edx = memoryAGet32(ds, esi + 2206550);
    eax = memoryAGet32(ds, esi + 2206558);
    ebx = memoryAGet32(ds, esi + 2206554);
    edx += eax;
    eax = memoryAGet32(ds, esi + 2206562);
    memoryASet32(ds, esi + 2206550, edx);
    ebx += eax;
    memoryASet32(ds, esi + 2206554, ebx);
    ecx = memoryAGet32(ds, esi + 2206562);
    ecx += memoryAGet32(ds, 0x21ad44);
    eax = memoryAGet32(ds, esi + 2206550);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    eax = memoryAGet32(ds, esi + 2206554);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esi + 2206566);
    ebx = edx;
    ebx <<= 4;
    edi = eax;
    ebx -= edx;
    edx = eax;
    ebx += ebx;
    eax = ebp;
    memoryASet32(ds, esi + 2206562, ecx);
    sub_2ee88();
    edx = edi;
    eax = ebp;
    sub_2f2aa();
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_2fa4b;
    if ((int32_t)memoryAGet32(ds, esi + 2206582) <= (int32_t)0x000001f0)
        goto loc_2fa4b;
    sub_2ed3b();
    edx = memoryAGet32(ds, 0x21aef4);
    edx += 0x00000004;
    memoryASet32(ds, 0x21aef4, edx);
    if ((int32_t)edx <= (int32_t)0x00000064)
        goto loc_2fa4b;
    if ((int32_t)edx >= (int32_t)0x00000124)
        goto loc_2fa4b;
    eax = edx + 1820;
    memoryASet32(ds, esi + 2206586, eax);
loc_2fa4b: // 0160:2fa4b
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    eax = memoryAGet32(ds, esp);
    esi <<= 2;
    if ((int32_t)eax <= 0)
        goto loc_2fa82;
    eax = memoryAGet32(ds, esi + 2206586);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    eax <<= 4;
    eax += 0x001903e0;
    goto loc_2fa9d;
loc_2fa82: // 0160:2fa82
    eax = memoryAGet32(ds, esi + 2206586);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    eax <<= 4;
    eax += 0x00151920;
loc_2fa9d: // 0160:2fa9d
    memoryASet32(ds, esi + 2206590, eax);
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    if (memoryAGet32(ds, esi + 2206582) == 0x00000000)
        goto loc_2fad4;
    if (memoryAGet(ds, 0x222f71) == 0x00)
        goto loc_2fb22;
    if ((int32_t)memoryAGet32(ds, esi + 2206582) > (int32_t)0x000001e4)
        goto loc_2fb22;
loc_2fad4: // 0160:2fad4
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ecx = memoryAGet32(ds, eax + 2202046);
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    push32(0x00000000);
    ebx = 0x0000004b;
    edx = memoryAGet32(ds, esi * 4 + 0x21ab5a);
    eax = memoryAGet32(ds, esi * 4 + 0x21ab56);
    edx -= 0x00003000;
    eax -= 0x00001800;
    sub_2704a();
    eax = 0;
    memoryASet32(ds, esi * 4 + 0x21ab56, eax);
loc_2fb22: // 0160:2fb22
    if (ebp > 0x000003c0)
        goto loc_2fb36;
    if ((int32_t)edi <= (int32_t)0x00000182)
        goto loc_2a253;
loc_2fb36: // 0160:2fb36
    eax = memoryAGet32(ds, esp + 4);
    esi = eax;
    esi <<= 2;
    esi -= eax;
    esi <<= 2;
    esi -= eax;
    edx = 0;
    memoryASet32(ds, esi * 4 + 0x21ab56, edx);
    if ((int32_t)edi <= (int32_t)0x00000182)
        goto loc_2a253;
    eax = ebp;
    edx = 0x00000080;
    eax <<= 9;
    sub_25cfe();
    goto loc_2a253;
}
void sub_2fb6f() // 0160:2fb6f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x21ab56) == 0x00000000)
        goto loc_2fbb6;
    eax = memoryAGet32(ds, 0x21ab5a);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax + -5;
    eax = memoryAGet32(ds, 0x21ab56);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    push32(0x00000006);
    edx = eax + -8;
    ecx = 0x00000010;
    eax = memoryAGet32(ds, 0x21ab7e);
    sub_17029();
loc_2fbb6: // 0160:2fbb6
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_2fbba() // 0160:2fbba +long
{
    esp -= 4;
    goto loc_2fbba;
loc_2b3b3: // 0160:2b3b3
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18432 bytes
loc_2fbba: // 0160:2fbba
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, 0x21ad94, edx);
    ecx = memoryAGet32(ds, eax + 2201982);
    edx = ecx;
    edx <<= 2;
    edx -= ecx;
    memoryASet32(ds, 0x5cc4c, edx);
    edx = memoryAGet32(ds, eax + 2201962);
    edx += 0x00000400;
    memoryASet32(ds, 0x21ad98, edx);
    edx = memoryAGet32(ds, 0x21ad94);
    memoryASet32(ds, 0x21ad8c, edx);
    edx = memoryAGet32(ds, 0x21ad98);
    memoryASet32(ds, 0x21ad90, edx);
    edx = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, 0x21ada4, edx);
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, 0x21ada8, edx);
    edx = memoryAGet32(ds, 0x21ad94);
    memoryASet32(ds, 0x21ad9c, edx);
    edx = memoryAGet32(ds, 0x21ad98);
    memoryASet32(ds, 0x21ada0, edx);
    ecx = 0;
    esi = memoryAGet32(ds, eax + 2201982);
    memoryASet32(ds, 0x5ca90, ecx);
    if ((int32_t)esi <= 0)
        goto loc_2fc63;
    memoryASet32(ds, 0x5ca84, 0x00040000);
    goto loc_2fc6d;
loc_2fc63: // 0160:2fc63
    memoryASet32(ds, 0x5ca84, 0x000c0000);
loc_2fc6d: // 0160:2fc6d
    if ((int32_t)ebx <= (int32_t)0x00000096)
        goto loc_2fc7a;
    ebx = 0x00000096;
loc_2fc7a: // 0160:2fc7a
    eax = 0x00000400;
    edx = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x21ad28, eax);
    eax = edx * 0x000000ac;
    ebx -= 0x00000018;
    ebx <<= 9;
    memoryASet32(ds, 0x21ad34, ebx);
    memoryASet32(ds, eax + 2201938, 0x00000040);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edi = 0x00000100;
    ebp = 0x00000002;
    esi = 0;
    memoryASet32(ds, 0x5cc5c, edi);
    memoryASet32(ds, 0x5cc50, esi);
    memoryASet32(ds, 0x5cc54, esi);
    edx = 0x00000011;
    memoryASet32(ds, eax + 2201934, esi);
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x21ac60);
    memoryASet32(ds, 0x21ac78, edx);
    memoryASet32(ds, 0x21af00, ebx);
    memoryASet32(ds, 0x21ae78, esi);
    memoryASet32(ds, 0x21ad88, ebx);
    memoryASet32(ds, 0x21acec, ebx);
    eax -= 0x000000fa;
    memoryASet32(ds, 0x21ad30, ebp);
    memoryASet32(ds, 0x21ac60, eax);
    if ((int32_t)eax >= 0)
        goto loc_2fd1b;
    memoryASet32(ds, 0x21ac60, esi);
loc_2fd1b: // 0160:2fd1b
    sub_18308();
    goto loc_2b3b3;
}
void sub_2fd25() // 0160:2fd25 +long
{
    esp -= 4;
    goto loc_2fd25;
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 18795 bytes
loc_2fd25: // 0160:2fd25
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x21ac64);
    ebx = ebx * 0x000000ac;
    if (memoryAGet32(ds, ebx + 2201994) != 0x00000000)
        goto loc_2b3b0;
    if (memoryAGet32(ds, ebx + 2201990) != 0x00000000)
        goto loc_2b3b0;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = ebx;
    ecx = edx;
    esi = 0;
    ecx <<= 4;
    eax += eax;
    ecx -= edx;
    memoryASet32(ds, esp, eax);
    ecx <<= 6;
    ebp = memoryAGet32(ds, esp);
    ecx += edi;
loc_2fda1: // 0160:2fda1
    if ((int32_t)ebx <= 0)
        goto loc_2fdf0;
    if (edi >= 0x000003c0)
        goto loc_2fdf0;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    eax += ebp;
    ax = memoryAGet16(ds, eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_2fdf7;
loc_2fdf0: // 0160:2fdf0
    eax = 0x00000001;
    goto loc_2fdf9;
loc_2fdf7: // 0160:2fdf7
    eax = 0;
loc_2fdf9: // 0160:2fdf9
    if (!eax)
        goto loc_2fe0f;
    if ((int32_t)ebx >= (int32_t)0x0000016e)
        goto loc_2fe0f;
    ecx += 0x000003c0;
    ebx++;
    esi++;
    goto loc_2fda1;
loc_2fe0f: // 0160:2fe0f
    if ((int32_t)esi <= (int32_t)0x00000028)
        goto loc_2b3b0;
    eax = esi;
    sub_2fbba();
    goto loc_2b3b0;
}
void sub_2fe24() // 0160:2fe24 +long
{
    esp -= 4;
    goto loc_2fe24;
loc_2b3b4: // 0160:2b3b4
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19050 bytes
loc_2fe24: // 0160:2fe24
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = 0;
    ah = memoryAGet(ds, 0x222f85);
    memoryASet16(ds, 0x21ac52, dx);
    if (ah)
        goto loc_2fe49;
    if (memoryAGet(ds, 0x222f83) == 0x00)
        goto loc_2ffbc;
loc_2fe49: // 0160:2fe49
    if ((int32_t)memoryAGet32(ds, 0x5ca90) <= (int32_t)0x00000000)
        goto loc_2fe59;
    esi = 0x00000001;
    goto loc_2fe5e;
loc_2fe59: // 0160:2fe59
    esi = 0xffffffff;
loc_2fe5e: // 0160:2fe5e
    eax = memoryAGet32(ds, 0x5ca90);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_2ff1a;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_2ff1a;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_2ff1a;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    edx = ecx;
    edi <<= 4;
    edx = sar32(edx, 0x1f);
    edi -= eax;
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi <<= 6;
    ax = memoryAGet16(ds, edi + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_2ff1a;
    ecx = memoryAGet32(ds, 0x5ca90);
    esi <<= 11;
    ecx += esi;
    memoryASet32(ds, 0x5ca90, ecx);
    goto loc_2ff2b;
loc_2ff1a: // 0160:2ff1a
    ebx = memoryAGet32(ds, 0x5ca90);
    esi <<= 4;
    ebx += esi;
    memoryASet32(ds, 0x5ca90, ebx);
loc_2ff2b: // 0160:2ff2b
    if (memoryAGet32(ds, 0x590a4) != 0x00000000)
        goto loc_2ffbc;
    ebx = memoryAGet32(ds, 0x5ca84);
    ebx &= 0x001fffff;
    if ((int32_t)ebx <= (int32_t)0x00100000)
        goto loc_2ff80;
    if ((int32_t)ebx >= (int32_t)0x00180000)
        goto loc_2ff80;
    edi = memoryAGet32(ds, 0x5ca90);
    if ((int32_t)edi <= 0)
        goto loc_2ff80;
    eax = edi;
    eax <<= 3;
    eax -= edi;
    eax <<= 2;
    edx = edi + eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x5ca90, eax);
loc_2ff80: // 0160:2ff80
    if ((int32_t)ebx < 0)
        goto loc_2ff95;
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_2ffbc;
    if ((int32_t)memoryAGet32(ds, 0x5ca90) >= (int32_t)0x00000000)
        goto loc_2ffbc;
loc_2ff95: // 0160:2ff95
    edx = memoryAGet32(ds, 0x5ca90);
    eax = edx;
    eax <<= 3;
    eax -= edx;
    eax <<= 2;
    edx += eax;
    edx <<= 3;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    memoryASet32(ds, 0x5ca90, eax);
loc_2ffbc: // 0160:2ffbc
    if (memoryAGet(ds, 0x222f80) == 0x00)
        goto loc_2ffe5;
    eax = memoryAGet32(ds, 0x21ad34);
    edx = memoryAGet32(ds, 0x21ad28);
    eax -= 0x00000a00;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_2ffe5;
    ebx = edx + -512;
    memoryASet32(ds, 0x21ad28, ebx);
loc_2ffe5: // 0160:2ffe5
    if (memoryAGet(ds, 0x222f88) == 0x00)
        goto loc_2b3b4;
    eax = memoryAGet32(ds, 0x21ad34);
    ecx = memoryAGet32(ds, 0x21ad28);
    eax += 0x00000a00;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_2b3b4;
    esi = ecx + 512;
    memoryASet32(ds, 0x21ad28, esi);
    goto loc_2b3b4;
}
void sub_3001b() // 0160:3001b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edx = 0;
    ebx = memoryAGet32(ds, 0x21ada4);
    memoryASet32(ds, 0x21ad30, edx);
    edx = memoryAGet32(ds, 0x21ad8c);
    edx -= ebx;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, edx + 2201950, eax);
    edx = memoryAGet32(ds, 0x21ad90);
    esi = memoryAGet32(ds, 0x21ada8);
    edx -= esi;
    eax = edx;
    eax <<= 4;
    edx += eax;
    edx <<= 4;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edi = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    eax = edi * 0x000000ac;
    memoryASet32(ds, eax + 2201954, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, eax + 2201950) <= (int32_t)0x00000000)
        goto loc_300b5;
    memoryASet32(ds, eax + 2201982, 0x00000001);
    goto loc_300bf;
loc_300b5: // 0160:300b5
    memoryASet32(ds, eax + 2201982, 0xffffffff);
loc_300bf: // 0160:300bf
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201990, 0x00000001);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = 0;
    memoryASet32(ds, eax + 2202090, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, eax + 2202094, edx);
    ebp = 0x00000001;
    memoryASet32(ds, 0x21ad8c, edx);
    memoryASet32(ds, 0x21ad90, edx);
    memoryASet32(ds, 0x21ad94, edx);
    memoryASet32(ds, 0x21ad98, edx);
    memoryASet32(ds, 0x21ad9c, edx);
    memoryASet32(ds, 0x21ada0, edx);
    memoryASet32(ds, 0x21af00, edx);
    memoryASet32(ds, 0x21ae78, edx);
    memoryASet32(ds, 0x21ac78, edi);
    memoryASet32(ds, 0x21ae54, ebp);
    memoryASet32(ds, 0x21acec, edx);
    memoryASet32(ds, 0x21ad88, edx);
    sub_19311();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_30152() // 0160:30152 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x5ca84);
    ebx &= 0x001fffff;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    if ((int32_t)ebx <= (int32_t)0x00180000)
        goto loc_30186;
    eax = 0;
loc_30186: // 0160:30186
    if ((int32_t)eax < (int32_t)0x00000007)
        goto loc_30190;
    eax = 0x00000007;
loc_30190: // 0160:30190
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, edx + 2201982) >= (int32_t)0x00000000)
        goto loc_301ac;
    edx = 0x00000007;
    edx -= eax;
    eax = edx;
loc_301ac: // 0160:301ac
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, edx + 2201938, 0x00000042);
    edx = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    eax <<= 4;
    ebx = eax + 14144;
    memoryASet32(ds, edx + 2201934, ebx);
    if ((int32_t)eax < (int32_t)0x00000040)
        goto loc_301ea;
    memoryASet32(ds, 0x59a76, 0xfffffff4);
    goto loc_301f1;
loc_301ea: // 0160:301ea
    eax = 0;
    memoryASet32(ds, 0x59a76, eax);
loc_301f1: // 0160:301f1
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2202094, 0x0000000a);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_30208() // 0160:30208 +long
{
    esp -= 4;
    goto loc_30208;
loc_2b3b0: // 0160:2b3b0
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20046 bytes
loc_30208: // 0160:30208
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    if ((int32_t)memoryAGet32(ds, 0x21ad30) < (int32_t)0x00000002)
        goto loc_2b3b0;
    eax = memoryAGet32(ds, 0x21ad28);
    ebx = memoryAGet32(ds, 0x5caac);
    memoryASet32(ds, esp, eax);
    if (ebx)
        goto loc_30235;
    sub_2fe24();
loc_30235: // 0160:30235
    edx = 0;
    ecx = memoryAGet32(ds, 0x5cc54);
    memoryASet16(ds, 0x21ac52, dx);
    if (ecx)
        goto loc_30356;
    eax = memoryAGet32(ds, 0x21ad28);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x21ad34))
        goto loc_30356;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    if ((int32_t)eax <= 0)
        goto loc_30315;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if (eax >= 0x000003c0)
        goto loc_30315;
    eax = ebx;
    eax <<= 4;
    eax -= ebx;
    eax <<= 6;
    ecx += eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_30315;
    sub_3001b();
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebp = 0;
    memoryASet32(ds, eax + 2201950, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    memoryASet32(ds, eax + 2201954, ebp);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ada4);
    memoryASet32(ds, eax + 2201958, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ada8);
    memoryASet32(ds, eax + 2201962, edx);
    goto loc_2b3b0;
loc_30315: // 0160:30315
    eax = memoryAGet32(ds, 0x5cc50);
    edi = memoryAGet32(ds, 0x21ad28);
    ebp = memoryAGet32(ds, 0x5cc50);
    edi += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    edx = memoryAGet32(ds, 0x21ad34);
    ebp += eax;
    memoryASet32(ds, 0x21ad28, edi);
    memoryASet32(ds, 0x5cc50, ebp);
    if ((int32_t)edi < (int32_t)edx)
        goto loc_30356;
    ebx = 0x00000001;
    memoryASet32(ds, 0x21ad28, edx);
    memoryASet32(ds, 0x5cc54, ebx);
loc_30356: // 0160:30356
    eax = memoryAGet32(ds, 0x5ca84);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax &= 0x00000fff;
    ecx = 0x00000001;
    ebx = eax + 1024;
    memoryASet32(ds, 0x21ad88, ecx);
    edi = eax;
    ah = memoryAGet(ds, 0x222f71);
    ebx &= 0x00000fff;
    if (!ah)
        goto loc_30437;
    eax = memoryAGet32(ds, 0x21ad90);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_30420;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (eax >= 0x000003c0)
        goto loc_30420;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = esi;
    ebp <<= 4;
    edx = sar32(edx, 0x1f);
    ebp -= eax;
    eax = esi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp <<= 6;
    edx = 0;
    dx = memoryAGet16(ss, ebp + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_30427;
loc_30420: // 0160:30420
    eax = 0x00000001;
    goto loc_30429;
loc_30427: // 0160:30427
    eax = 0;
loc_30429: // 0160:30429
    if (!eax)
        goto loc_30437;
    sub_3001b();
    goto loc_30750;
loc_30437: // 0160:30437
    eax = memoryAGet32(ds, 0x21ad28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    if (eax)
        goto loc_30454;
    ecx = 0x00000200;
loc_30454: // 0160:30454
    eax = memoryAGet32(ds, 0x5cc58);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, eax * 4 + 0x50ff0);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    eax = memoryAGet32(ds, 0x5cc58);
    eax += 0x00007000;
    esi = memoryAGet32(ds, 0x5cc5c);
    eax &= 0x001fffff;
    edx <<= 8;
    memoryASet32(ds, 0x5cc58, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ecx = eax;
    if ((int32_t)esi >= (int32_t)0x00000800)
        goto loc_304b5;
    eax = esi + 2;
    memoryASet32(ds, 0x5cc5c, eax);
loc_304b5: // 0160:304b5
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = memoryAGet32(ds, ebx * 4 + 0x50ff0);
    memoryASet32(ds, 0x21ada4, eax);
    eax = memoryAGet32(ds, 0x21ad90);
    edx <<= 9;
    memoryASet32(ds, 0x21ada8, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = memoryAGet32(ds, 0x21ad28);
    edx += ecx;
    esi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)eax;
    ecx = eax;
    eax = memoryAGet32(ds, 0x21ad94);
    edx = memoryAGet32(ds, edi * 4 + 0x50ff0);
    eax += esi;
    edx <<= 9;
    memoryASet32(ds, 0x21ad8c, eax);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    eax = (int32_t)eax * (int32_t)ecx;
    edx = memoryAGet32(ds, 0x21ad98);
    eax += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x21ad90, eax);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = 0;
    memoryASet16(ds, 0x21ac52, cx);
    ecx = eax;
    if ((int32_t)eax <= 0)
        goto loc_305f9;
    eax = memoryAGet32(ds, 0x21ad8c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    if (eax >= 0x000003c0)
        goto loc_305f9;
    eax = ecx;
    eax <<= 4;
    eax -= ecx;
    eax <<= 6;
    esi += eax;
    eax = 0;
    al = memoryAGet(ds, esi + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_305f9;
    eax = memoryAGet32(ds, 0x239f24);
    dl = memoryAGet(ds, 0x222f83);
    memoryASet32(ds, 0x5ca84, eax);
    if (dl)
        goto loc_305b0;
    if (memoryAGet(ds, 0x222f85) == 0x00)
        goto loc_305b8;
loc_305b0: // 0160:305b0
    memoryASet32(ds, 0x5ca90, -memoryAGet32(ds, 0x5ca90));
    goto loc_305ce;
loc_305b8: // 0160:305b8
    edx = memoryAGet32(ds, 0x5ca90);
    edx = -edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x5ca90, eax);
loc_305ce: // 0160:305ce
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x21ad28, eax);
    eax = memoryAGet32(ds, 0x21ada4);
    memoryASet32(ds, 0x21ad8c, eax);
    eax = memoryAGet32(ds, 0x21ada8);
    cl = memoryAGet(ds, 0x222f71);
    memoryASet32(ds, 0x21ad90, eax);
    if (!cl)
        goto loc_305f9;
    sub_3001b();
loc_305f9: // 0160:305f9
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    esi = 0x0000ffff;
    edx = memoryAGet32(ds, 0x21ad8c);
    memoryASet16(ds, 0x21ac52, si);
    memoryASet32(ds, eax + 2201958, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, eax + 2201962, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad8c);
    memoryASet32(ds, eax + 2201966, edx);
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    edx = memoryAGet32(ds, 0x21ad90);
    memoryASet32(ds, eax + 2201970, edx);
    edx = memoryAGet32(ds, ebx * 4 + 0x50ff0);
    ebx = memoryAGet32(ds, 0x21ad44);
    edx <<= 9;
    edx = (int32_t)edx * (int32_t)ebx;
    memoryASet32(ds, 0x21acec, 0x00000001);
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<6) & 0x80000000);
    edx <<= 7;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x07);
    ecx = memoryAGet32(ds, 0x5ca90);
    ecx += eax;
    eax = memoryAGet32(ds, 0x5ca84);
    memoryASet32(ds, 0x239f24, eax);
    eax = memoryAGet32(ds, 0x21ad28);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<10) & 0x80000000);
    edx <<= 11;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0b);
    memoryASet32(ds, 0x5ca90, ecx);
    ebx = eax;
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_306cc;
    ebx = 0x00000004;
    goto loc_306d6;
loc_306cc: // 0160:306cc
    if ((int32_t)eax <= (int32_t)0x00000032)
        goto loc_306d6;
    ebx = 0x00000032;
loc_306d6: // 0160:306d6
    edx = memoryAGet32(ds, 0x5ca90);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    eax <<= 3;
    edx += eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    esi = memoryAGet32(ds, 0x5ca84);
    esi += eax;
    eax = memoryAGet32(ds, 0x5ca90);
    memoryASet32(ds, 0x5ca84, esi);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    if ((int32_t)eax <= (int32_t)0x00000008)
        goto loc_3071e;
    eax = 0x00000008;
loc_3071e: // 0160:3071e
    edx = memoryAGet32(ds, 0x5ca90);
    edi = memoryAGet32(ds, eax * 4 + 0x5cc28);
    edx = (int32_t)edx * (int32_t)edi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<15) & 0x80000000);
    edx <<= 16;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x10);
    ebp = memoryAGet32(ds, 0x21ad30);
    memoryASet32(ds, 0x5ca90, eax);
    if (ebp != 0x00000003)
        goto loc_30750;
    sub_30152();
loc_30750: // 0160:30750
    eax = memoryAGet32(ds, 0x21ac64) * 0x000000ac;
    ebx = memoryAGet32(ds, eax + 2201958);
    if ((int32_t)ebx < 0)
        goto loc_3077c;
    if ((int32_t)ebx > (int32_t)0x00078000)
        goto loc_3077c;
    if ((int32_t)memoryAGet32(ds, eax + 2201962) <= (int32_t)0x0002fc00)
        goto loc_2b3b0;
loc_3077c: // 0160:3077c
    sub_2e135();
    goto loc_2b3b0;
}
void sub_307c2() // 0160:307c2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    if (eax)
        goto loc_307d8;
    ecx = 0;
    goto loc_30848;
loc_307d8: // 0160:307d8
    if ((int32_t)eax >= 0)
        goto loc_307dc;
    edi = -edi;
loc_307dc: // 0160:307dc
    ebx = 0x0000000e;
    edx = 0x00008000;
    eax = 0x40000000;
    ecx = 0x0000000f;
    esi = 0x0000001c;
    memoryASet32(ds, esp + 4, ecx);
    memoryASet32(ds, esp, esi);
loc_307fc: // 0160:307fc
    if ((int32_t)ebx < 0)
        goto loc_30846;
    if (edi == eax)
        goto loc_30846;
    esi = 0x00000001;
    cl = bl;
    ebp = edx;
    esi <<= cl;
    cl = memoryAGet(ds, esp + 4);
    ebp <<= cl;
    ecx = ebp;
    if ((int32_t)edi >= (int32_t)eax)
        goto loc_30821;
    eax -= ebp;
    edx -= esi;
    goto loc_30825;
loc_30821: // 0160:30821
    eax += ebp;
    edx += esi;
loc_30825: // 0160:30825
    cl = memoryAGet(ds, esp);
    esi = 0x00000001;
    ebp = memoryAGet32(ds, esp + 4);
    ebx--;
    ebp--;
    esi <<= cl;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, esp + 4, ebp);
    ecx -= 0x00000002;
    eax += esi;
    memoryASet32(ds, esp, ecx);
    goto loc_307fc;
loc_30846: // 0160:30846
    ecx = edx;
loc_30848: // 0160:30848
    eax = ecx;
    esp += 0x00000008;
    goto loc_3380c;
    // gap 12218 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_30852() // 0160:30852 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    sub_265cb();
    memoryASet32(ds, 0x217ac0, edx);
    memoryASet32(ds, 0x217a8c, edx);
    edx = pop32();
    esp += 4;
}
void sub_30868() // 0160:30868 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    edi = edx;
    esi = 0x7fffffff;
    ebx = 0;
loc_30878: // 0160:30878
    edx = memoryAGet32(ds, ebx + 2201070);
    if (!edx)
        goto loc_308ba;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebp;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 2201074);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = edi;
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_308ba;
    esi = eax;
loc_308ba: // 0160:308ba
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_30878;
    eax = esi;
    goto loc_30a47;
    // gap 379 bytes
loc_30a47: // 0160:30a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_308cc() // 0160:308cc +long
{
    esp -= 4;
    goto loc_308cc;
loc_308c5: // 0160:308c5
    eax = esi;
    goto loc_30a47;
loc_308cc: // 0160:308cc
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    edi = edx;
    esi = 0x7fffffff;
    ebx = 0;
loc_308dc: // 0160:308dc
    edx = memoryAGet32(ds, ebx + 2205082);
    if (!edx)
        goto loc_3091e;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = ebp;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 2205086);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = edi;
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_3091e;
    esi = eax;
loc_3091e: // 0160:3091e
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_308dc;
    goto loc_308c5;
    // gap 287 bytes
loc_30a47: // 0160:30a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_30928() // 0160:30928 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    esi = 0x7fffffff;
    edx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edx);
loc_30943: // 0160:30943
    cl = memoryAGet(ds, esp + 4);
    eax = 0x00000001;
    eax <<= cl;
    if (!(ebp & eax))
        goto loc_30995;
    edx = memoryAGet32(ds, ebx + 2201958);
    if (!edx)
        goto loc_30995;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = edi;
    ecx -= eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += ecx;
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_30995;
    esi = eax;
loc_30995: // 0160:30995
    ecx = memoryAGet32(ds, esp + 4);
    ecx++;
    ebx += 0x000000ac;
    memoryASet32(ds, esp + 4, ecx);
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_30943;
    eax = esi;
    goto loc_30b72;
    // gap 450 bytes
loc_30b72: // 0160:30b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_30ae4() // 0160:30ae4 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    push32(edx);
    edi = ebx;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    ebx = 0;
    ebp = eax;
    goto loc_30b6b;
loc_30b06: // 0160:30b06
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax == ebp)
        goto loc_30b64;
    edx = memoryAGet32(ds, ebx + 2201958);
    if (!edx)
        goto loc_30b64;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, esp + 4);
    esi -= eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    edx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = edx;
    eax = (int32_t)eax * (int32_t)edx;
    eax += esi;
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_30b64;
    eax = memoryAGet32(ds, ebx + 2202034);
    goto loc_30b72;
loc_30b64: // 0160:30b64
    ebx += 0x000000ac;
    ecx++;
loc_30b6b: // 0160:30b6b
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_30b06;
    eax = 0;
loc_30b72: // 0160:30b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_30c0e() // 0160:30c0e +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x7fffffff;
    sub_30928();
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_30c25;
    ecx = eax;
loc_30c25: // 0160:30c25
    edx = edi;
    eax = esi;
    sub_30868();
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_30c34;
    ecx = eax;
loc_30c34: // 0160:30c34
    eax = esi;
    eax = (int32_t)eax * (int32_t)esi;
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_30c3f;
    ecx = eax;
loc_30c3f: // 0160:30c3f
    eax = 0x000003c0;
    eax -= esi;
    esi = eax;
    esi = (int32_t)esi * (int32_t)eax;
    if ((int32_t)esi >= (int32_t)ecx)
        goto loc_30c51;
    ecx = esi;
loc_30c51: // 0160:30c51
    esi = 0x0000017e;
    esi -= edi;
    esi = (int32_t)esi * (int32_t)esi;
    if ((int32_t)esi >= (int32_t)ecx)
        goto loc_30c61;
    ecx = esi;
loc_30c61: // 0160:30c61
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_30c85() // 0160:30c85 +long
{
    esp -= 4;
    push32(ebx);
    push32(esi);
    ebx = memoryAGet32(ds, 0x5cc74) * 0x00006255;
    esi = memoryAGet32(ds, 0x5cc78);
    ebx += 0x00003619;
    edx -= eax;
    ebx += esi;
    edx++;
    ebx &= 0x0000ffff;
    edx = (int32_t)edx * (int32_t)ebx;
    edx = sar32(edx, 0x10);
    memoryASet32(ds, 0x5cc74, ebx);
    eax += edx;
    esi = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_30cb9() // 0160:30cb9 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    if (ecx)
        goto loc_30d90;
    ecx = memoryAGet32(ds, 0x23a088);
    if (ecx == 0x00000006)
        goto loc_30cd4;
    if (ecx != 0x00000027)
        goto loc_30cd9;
loc_30cd4: // 0160:30cd4
    ebx = 0x00000011;
loc_30cd9: // 0160:30cd9
    if ((int32_t)ebx >= (int32_t)0x00000011)
        goto loc_30ce3;
    ebx = 0x00000011;
loc_30ce3: // 0160:30ce3
    if ((int32_t)ebx <= (int32_t)0x00000096)
        goto loc_30cf0;
    ebx = 0x00000095;
loc_30cf0: // 0160:30cf0
    ecx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    if (edx == memoryAGet32(ds, ecx + 2201982))
        goto loc_30d20;
    if ((int32_t)edx >= 0)
        goto loc_30d0f;
    memoryASet(ds, 0x222f83, 0x01);
    goto loc_30d16;
loc_30d0f: // 0160:30d0f
    memoryASet(ds, 0x222f85, 0x01);
loc_30d16: // 0160:30d16
    memoryASet32(ds, 0x23a048, 0x00000003);
loc_30d20: // 0160:30d20
    ecx = memoryAGet32(ds, 0x23a048);
    ecx &= 0x00000003;
    memoryASet32(ds, 0x23a048, ecx);
    if (ecx)
        goto loc_30d7e;
    edi = memoryAGet32(ds, 0x21ac84);
    if (eax != edi)
        goto loc_30d66;
    if ((int32_t)ebx > (int32_t)memoryAGet32(ds, 0x21ac78))
        goto loc_30d4c;
loc_30d43: // 0160:30d43
    eax = 0x00000001;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_30d4c: // 0160:30d4c
    cl = 0x01;
    esi = memoryAGet32(ds, 0x23a088);
    memoryASet(ds, 0x222f71, cl);
    if (esi == 0x00000006)
        goto loc_30d43;
    if (esi != 0x00000027)
        goto loc_30d7e;
    goto loc_30d43;
loc_30d66: // 0160:30d66
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_30d6f;
    memoryASet(ds, 0x222f80, 0x01);
loc_30d6f: // 0160:30d6f
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x21ac84))
        goto loc_30d7e;
    memoryASet(ds, 0x222f88, 0x01);
loc_30d7e: // 0160:30d7e
    ebp = memoryAGet32(ds, 0x23a048);
    if (!ebp)
        goto loc_30d90;
    eax = ebp + -1;
    memoryASet32(ds, 0x23a048, eax);
loc_30d90: // 0160:30d90
    eax = 0;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_30d96() // 0160:30d96 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x21af04);
    eax += 0x0000000a;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_30e4e;
loc_30dae: // 0160:30dae
    eax = memoryAGet32(ds, 0x21af04);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x22313c))
        goto loc_30e49;
    ecx = memoryAGet32(ds, 0x21aefc);
    if (!ecx)
        goto loc_30dd2;
    esi = ecx + -1;
    memoryASet32(ds, 0x21aefc, esi);
loc_30dd2: // 0160:30dd2
    edi = memoryAGet32(ds, 0x21ac60);
    if (!edi)
        goto loc_30e12;
    if (memoryAGet32(ds, 0x21ad88) != 0x00000000)
        goto loc_30e12;
    if (memoryAGet32(ds, 0x21ad74) != 0x00000000)
        goto loc_30e12;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_30e12;
    if (memoryAGet32(ds, 0x5c658) == 0x00000046)
        goto loc_30e12;
    if (memoryAGet32(ds, 0x21ae78) != 0x00000000)
        goto loc_30e12;
    esi = edi + -1;
    memoryASet32(ds, 0x21ac60, esi);
loc_30e12: // 0160:30e12
    edi = memoryAGet32(ds, 0x21ac6c);
    if (!edi)
        goto loc_30e25;
    ebp = edi + -1;
    memoryASet32(ds, 0x21ac6c, ebp);
loc_30e25: // 0160:30e25
    sub_15a7d();
    sub_11a6a();
    sub_10e44();
    sub_16dd3();
    sub_153f9();
    memoryASet32(ds, 0x21af04, memoryAGet32(ds, 0x21af04) + 1);
    goto loc_30dae;
loc_30e49: // 0160:30e49
    sub_14794();
loc_30e4e: // 0160:30e4e
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_30e53() // 0160:30e53 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if ((int32_t)memoryAGet32(ds, 0x23a03c) < (int32_t)0x00000032)
        goto loc_3108f;
    edi = 0x00000032;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    esi -= edx;
    if ((int32_t)edx <= (int32_t)0x00000019)
        goto loc_30e7e;
    esi += edi;
loc_30e7e: // 0160:30e7e
    if ((int32_t)esi >= (int32_t)0x00000032)
        goto loc_30e88;
    esi = 0x00000032;
loc_30e88: // 0160:30e88
    if ((int32_t)esi <= (int32_t)0x000000fa)
        goto loc_30e95;
    esi = 0x000000fa;
loc_30e95: // 0160:30e95
    if (esi != memoryAGet32(ds, 0x21ac88))
        goto loc_30ea5;
    if (ebx == memoryAGet32(ds, 0x21ad84))
        goto loc_30eb3;
loc_30ea5: // 0160:30ea5
    if (ecx == 0x00000024)
        goto loc_30f12;
    if (ecx == 0x00000004)
        goto loc_30f12;
loc_30eb3: // 0160:30eb3
    eax = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    edi = memoryAGet32(ds, eax + 2202006);
    if (ecx == edi)
        goto loc_30f01;
    if (ecx != 0x00000024)
        goto loc_30ed1;
    if (edi == 0x00000036)
        goto loc_30f01;
loc_30ed1: // 0160:30ed1
    if (ecx != 0x00000027)
        goto loc_30ee9;
    eax = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) == 0x0000002f)
        goto loc_30f01;
loc_30ee9: // 0160:30ee9
    if (ecx != 0x00000033)
        goto loc_30f12;
    eax = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    if (memoryAGet32(ds, eax + 2202006) != 0x0000003e)
        goto loc_30f12;
loc_30f01: // 0160:30f01
    edx = 0;
    eax = 0x00000001;
    memoryASet32(ds, 0x5cc7c, edx);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_30f12: // 0160:30f12
    memoryASet32(ds, 0x5cc7c, memoryAGet32(ds, 0x5cc7c) + 1);
    if (memoryAGet(ds, 0x5cc7c) & 0x0f)
        goto loc_3108f;
    if (ecx < 0x00000019)
        goto loc_30f89;
    if (ecx <= 0x00000019)
        goto loc_30fd7;
    if (ecx < 0x00000027)
        goto loc_30f62;
    if (ecx <= 0x00000027)
        goto loc_30fce;
    if (ecx < 0x00000033)
        goto loc_30f54;
    if (ecx <= 0x00000033)
        goto loc_30fe0;
    if (ecx == 0x0000003d)
        goto loc_30ffb;
    goto loc_31002;
loc_30f54: // 0160:30f54
    if (ecx == 0x0000002b)
        goto loc_30fbc;
    goto loc_31002;
loc_30f62: // 0160:30f62
    if (ecx < 0x00000024)
        goto loc_30f7b;
    if (ecx <= 0x00000024)
        goto loc_30fc5;
    flags.zero = ecx == 0x00000026;
loc_30f70: // 0160:30f70
    if (flags.zero)
        goto loc_30fe9;
    goto loc_31002;
loc_30f7b: // 0160:30f7b
    if (ecx == 0x00000022)
        goto loc_30fd7;
    goto loc_31002;
loc_30f89: // 0160:30f89
    if (ecx < 0x0000000b)
        goto loc_30faa;
    if (ecx <= 0x0000000b)
        goto loc_30fe0;
    if (ecx < 0x00000014)
        goto loc_30fa0;
    if (ecx <= 0x00000014)
        goto loc_30ff2;
    flags.zero = ecx == 0x00000016;
    goto loc_30f70;
loc_30fa0: // 0160:30fa0
    if (ecx == 0x00000010)
        goto loc_30ff2;
    goto loc_31002;
loc_30faa: // 0160:30faa
    if (ecx < 0x00000004)
        goto loc_30fb8;
    if (ecx <= 0x00000004)
        goto loc_30fc5;
    if (ecx == 0x00000006)
        goto loc_30fce;
    goto loc_31002;
loc_30fb8: // 0160:30fb8
    if (ecx)
        goto loc_31002;
loc_30fbc: // 0160:30fbc
    memoryASet(ds, 0x222f73, 0x01);
    goto loc_31002;
loc_30fc5: // 0160:30fc5
    memoryASet(ds, 0x222f74, 0x01);
    goto loc_31002;
loc_30fce: // 0160:30fce
    memoryASet(ds, 0x222f75, 0x01);
    goto loc_31002;
loc_30fd7: // 0160:30fd7
    memoryASet(ds, 0x222f76, 0x01);
    goto loc_31002;
loc_30fe0: // 0160:30fe0
    memoryASet(ds, 0x222f77, 0x01);
    goto loc_31002;
loc_30fe9: // 0160:30fe9
    memoryASet(ds, 0x222f78, 0x01);
    goto loc_31002;
loc_30ff2: // 0160:30ff2
    memoryASet(ds, 0x222f79, 0x01);
    goto loc_31002;
loc_30ffb: // 0160:30ffb
    memoryASet(ds, 0x222f7b, 0x01);
loc_31002: // 0160:31002
    if (ecx == 0x00000004)
        goto loc_31010;
    if (ecx != 0x00000024)
        goto loc_3108f;
loc_31010: // 0160:31010
    if (esi == memoryAGet32(ds, 0x21ac88))
        goto loc_31073;
    if (esi < 0x00000096)
        goto loc_3103a;
    if (esi <= 0x00000096)
        goto loc_3105a;
    if (esi < 0x000000c8)
        goto loc_31073;
    if (esi <= 0x000000c8)
        goto loc_31063;
    if (esi == 0x000000fa)
        goto loc_3106c;
    goto loc_31073;
loc_3103a: // 0160:3103a
    if (esi < 0x00000032)
        goto loc_31073;
    if (esi <= 0x00000032)
        goto loc_31048;
    if (esi == 0x00000064)
        goto loc_31051;
    goto loc_31073;
loc_31048: // 0160:31048
    memoryASet(ds, 0x222f3a, 0x01);
    goto loc_31073;
loc_31051: // 0160:31051
    memoryASet(ds, 0x222f3b, 0x01);
    goto loc_31073;
loc_3105a: // 0160:3105a
    memoryASet(ds, 0x222f3c, 0x01);
    goto loc_31073;
loc_31063: // 0160:31063
    memoryASet(ds, 0x222f3d, 0x01);
    goto loc_31073;
loc_3106c: // 0160:3106c
    memoryASet(ds, 0x222f3e, 0x01);
loc_31073: // 0160:31073
    if (ebx == memoryAGet32(ds, 0x21ad84))
        goto loc_3108f;
    if (!ebx)
        goto loc_31088;
    memoryASet(ds, 0x222f44, 0x01);
    goto loc_3108f;
loc_31088: // 0160:31088
    memoryASet(ds, 0x222f45, 0x01);
loc_3108f: // 0160:3108f
    eax = 0;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_31095() // 0160:31095 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    al &= 0xfc;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_310a5;
loc_3109e: // 0160:3109e
    edx = 0;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_310a5: // 0160:310a5
    if ((int32_t)eax > (int32_t)0x000003b8)
        goto loc_3109e;
    ecx = 0x00191270;
    ecx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += ecx;
loc_310bf: // 0160:310bf
    ebx = memoryAGet32(ds, eax + -4);
    if (ebx != 0x80808080)
        goto loc_310e4;
    if (ebx != memoryAGet32(ds, eax))
        goto loc_310e4;
    if (ebx != memoryAGet32(ds, eax + -8))
        goto loc_310e4;
    if (ebx != memoryAGet32(ds, eax + 4))
        goto loc_310e4;
    if ((int32_t)edx <= 0)
        goto loc_310e4;
    edx--;
    eax -= 0x000003c0;
    goto loc_310bf;
loc_310e4: // 0160:310e4
    if (edx)
        goto loc_3109e;
    edx = 0x00000001;
    eax = edx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_310f2() // 0160:310f2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    al &= 0xfc;
    if ((int32_t)eax >= (int32_t)0x00000008)
        goto loc_31102;
loc_310fc: // 0160:310fc
    eax = 0;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_31102: // 0160:31102
    if ((int32_t)eax > (int32_t)0x000003b8)
        goto loc_310fc;
    esi = 0x00191270;
    esi += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 6;
    eax += esi;
loc_3111c: // 0160:3111c
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx != 0x80808080)
        goto loc_31138;
    if (ecx != memoryAGet32(ds, eax))
        goto loc_31138;
    if ((int32_t)edx <= 0)
        goto loc_31138;
    edx--;
    ebx++;
    eax -= 0x000003c0;
    goto loc_3111c;
loc_31138: // 0160:31138
    eax = ebx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3113e() // 0160:3113e +long
{
    esp -= 4;
    goto loc_3113e;
loc_30a44: // 0160:30a44
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1777 bytes
loc_3113e: // 0160:3113e
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebx = eax;
    edi = edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ecx != eax)
        goto loc_31176;
loc_3116f: // 0160:3116f
    eax = 0;
    goto loc_30a44;
loc_31176: // 0160:31176
    ebx = ebx * 0x000000ac;
    memoryASet32(ds, esp + 4, eax);
    ecx = 0;
    edx = memoryAGet32(ds, ebx + 2201958);
    ebp = memoryAGet32(ds, ebx + 2201962);
    memoryASet32(ds, esp, edx);
    ebx = 0;
    goto loc_311f2;
loc_31195: // 0160:31195
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, esp + 4))
        goto loc_311eb;
    esi = memoryAGet32(ds, ebx + 2201958);
    if (!esi)
        goto loc_311eb;
    edx = memoryAGet32(ds, esp);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    edx = ebp;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    esi += eax;
    if ((int32_t)esi < (int32_t)edi)
        goto loc_3116f;
loc_311eb: // 0160:311eb
    ebx += 0x000000ac;
    ecx++;
loc_311f2: // 0160:311f2
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_31195;
    eax = 0x00000001;
    goto loc_30a44;
}
void sub_31201() // 0160:31201 +long
{
    esp -= 4;
    goto loc_31201;
loc_30a47: // 0160:30a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1972 bytes
loc_31201: // 0160:31201
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebx = eax;
    memoryASet32(ds, esp + 16, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ecx != eax)
        goto loc_3123b;
    eax = 0;
    goto loc_3146b;
loc_3123b: // 0160:3123b
    ebx = ebx * 0x000000ac;
    edi = 0x00000010;
    memoryASet32(ds, esp, eax);
    edx = memoryAGet32(ds, ebx + 2201958);
    ecx = 0;
    memoryASet32(ds, esp + 12, edx);
    edx = memoryAGet32(ds, ebx + 2201962);
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    edx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 4, edx);
loc_31269: // 0160:31269
    ebp = memoryAGet32(ds, ebx + 2201958);
    if (!ebp)
        goto loc_31301;
    edx = memoryAGet32(ds, esp + 12);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    ebp = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = (int32_t)ebp * (int32_t)ebp;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += ebp;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_31301;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != memoryAGet32(ds, esp))
        goto loc_312e4;
    eax = memoryAGet32(ds, ebx + 2202034);
    edi -= 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_312d8;
    edi--;
loc_312d8: // 0160:312d8
    if ((int32_t)memoryAGet32(ds, ebx + 2202034) >= (int32_t)0x00000032)
        goto loc_31301;
    edi--;
    goto loc_31301;
loc_312e4: // 0160:312e4
    eax = memoryAGet32(ds, ebx + 2202034);
    ecx += 0x00000002;
    if ((int32_t)eax >= (int32_t)0x00000019)
        goto loc_312f3;
    ecx++;
loc_312f3: // 0160:312f3
    if ((int32_t)memoryAGet32(ds, ebx + 2202034) >= (int32_t)0x00000032)
        goto loc_312fd;
    ecx++;
loc_312fd: // 0160:312fd
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
loc_31301: // 0160:31301
    esi++;
    ebx += 0x000000ac;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_31269;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_31326: // 0160:31326
    esi = memoryAGet32(ds, ebx + 2201070);
    if (!esi)
        goto loc_31374;
    edx = memoryAGet32(ds, esp + 12);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201074);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_3136f;
    ecx++;
loc_3136f: // 0160:3136f
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_31374;
    ecx++;
loc_31374: // 0160:31374
    ebx += 0x00000024;
    if (ebx != 0x00000360)
        goto loc_31326;
    eax = memoryAGet32(ds, esp + 16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = 0;
    ebp = eax;
loc_31394: // 0160:31394
    if (memoryAGet32(ds, ebx + 2205082) == 0x00000000)
        goto loc_313e7;
    edx = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, ebx + 2205082);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2205086);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 16);
    eax += esi;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_313e2;
    ecx++;
loc_313e2: // 0160:313e2
    if ((int32_t)eax >= (int32_t)ebp)
        goto loc_313e7;
    ecx++;
loc_313e7: // 0160:313e7
    ebx += 0x00000024;
    if (ebx != 0x0000006c)
        goto loc_31394;
    ebx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    edx = memoryAGet32(ds, esp + 12);
    ebp = memoryAGet32(ds, ebx + 2201958);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 8);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = (int32_t)eax * (int32_t)eax;
    edx = esi;
    edx = (int32_t)edx * (int32_t)edx;
    edx += eax;
    eax = 0;
    if ((int32_t)edx >= (int32_t)0x00010000)
        goto loc_31446;
    eax = 0x00000001;
loc_31446: // 0160:31446
    if ((int32_t)edx >= (int32_t)0x00004000)
        goto loc_3144f;
    eax++;
loc_3144f: // 0160:3144f
    if ((int32_t)edx >= (int32_t)0x00001900)
        goto loc_31458;
    eax++;
loc_31458: // 0160:31458
    edx = memoryAGet32(ds, esp + 4);
    edi <<= 24;
    eax <<= 16;
    edx <<= 8;
    eax |= edi;
    eax |= edx;
    eax |= ecx;
loc_3146b: // 0160:3146b
    esp += 0x00000014;
    goto loc_30a47;
}
void sub_31473() // 0160:31473 +long
{
    esp -= 4;
    goto loc_31473;
loc_30b70: // 0160:30b70
    eax = 0;
loc_30b72: // 0160:30b72
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
    // gap 2297 bytes
loc_31473: // 0160:31473
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    push32(edx);
    edi = ebx;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ecx = 0;
    ebx = 0;
    ebp = eax;
    goto loc_31501;
loc_31495: // 0160:31495
    if (memoryAGet32(ds, ebx + 2201958) == 0x00000000)
        goto loc_314fa;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (eax != ebp)
        goto loc_314fa;
    edx = memoryAGet32(ds, esp + 4);
    esi = memoryAGet32(ds, ebx + 2201958);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    eax += esi;
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_314fa;
    eax = 0x00000001;
    goto loc_30b72;
loc_314fa: // 0160:314fa
    ebx += 0x000000ac;
    ecx++;
loc_31501: // 0160:31501
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_31495;
    goto loc_30b70;
}
void sub_31562() // 0160:31562 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    push32(edx);
    push32(ebx);
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = 0;
    ebp = 0;
    ecx = 0;
    ebx = 0;
    memoryASet32(ds, esp + 12, eax);
loc_3158a: // 0160:3158a
    if (memoryAGet32(ds, ebx + 2201958) == 0x00000000)
        goto loc_315f8;
    edx = memoryAGet32(ds, esp + 8);
    esi = memoryAGet32(ds, ebx + 2201958);
    edx -= esi;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp + 4);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = (int32_t)esi * (int32_t)esi;
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp);
    esi += eax;
    if ((int32_t)esi >= (int32_t)edx)
        goto loc_315f8;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax = memoryAGet32(ds, esp);
    eax -= esi;
    if (edx != memoryAGet32(ds, esp + 12))
        goto loc_315f6;
    edi += eax;
    goto loc_315f8;
loc_315f6: // 0160:315f6
    ebp += eax;
loc_315f8: // 0160:315f8
    ecx++;
    ebx += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_3158a;
    al = (int32_t)edi <= (int32_t)ebp;
    eax &= 0x000000ff;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_31616() // 0160:31616 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_31620: // 0160:31620
    edx = memoryAGet32(ds, esi + 2201958);
    if (!edx)
        goto loc_3163e;
    edx = 0x00000640;
    eax = ecx;
    sub_31201();
    memoryASet32(ds, ebx + 2334512, eax);
    goto loc_31644;
loc_3163e: // 0160:3163e
    memoryASet32(ds, ebx + 2334512, edx);
loc_31644: // 0160:31644
    ebx += 0x00000004;
    ecx++;
    esi += 0x000000ac;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_31620;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_31658() // 0160:31658 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    edx = 0;
    eax = 0;
    memoryASet32(ds, esp, edx);
loc_31669: // 0160:31669
    if ((int32_t)eax >= (int32_t)0x00000004)
        goto loc_316c0;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    eax = memoryAGet32(ds, ecx);
    memoryASet32(ds, edi, memoryAGet32(ds, edi) + eax);
    eax = memoryAGet32(ds, 0x23a04c);
    memoryASet32(ds, ebx, memoryAGet32(ds, ebx) + eax);
    eax = memoryAGet32(ds, 0x23a050);
    memoryASet32(ds, ecx, memoryAGet32(ds, ecx) + eax);
    ebp = memoryAGet32(ds, 0x23a068);
    edx = memoryAGet32(ds, esi);
    edx -= ebp;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = memoryAGet32(ds, edi);
    eax = memoryAGet32(ds, 0x23a06c);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = (int32_t)ebp * (int32_t)ebp;
    eax = (int32_t)eax * (int32_t)eax;
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
    eax += ebp;
    goto loc_31669;
loc_316c0: // 0160:316c0
    eax = memoryAGet32(ds, esp);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_316ca() // 0160:316ca +long
{
    esp -= 4;
    goto loc_316ca;
loc_30a47: // 0160:30a47
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3197 bytes
loc_316ca: // 0160:316ca
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = eax;
    memoryASet32(ds, esp, edx);
    if (memoryAGet32(ds, 0x5cc6c) == 0x00000000)
        goto loc_31851;
    edx = ebp;
    edx = memoryAGet32(ds, edx);
    eax = memoryAGet32(ds, eax);
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, esp);
    esi = eax;
    edx = memoryAGet32(ds, edx);
    eax = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    eax = memoryAGet32(ds, eax);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = 0x00000001;
    ebx = eax;
    eax = 0;
    sub_30c85();
    edx = memoryAGet32(ds, 0x5cc6c);
    edx <<= 5;
    if (!eax)
        goto loc_31732;
    eax = 0;
    sub_30c85();
    esi -= eax;
    goto loc_31739;
loc_31732: // 0160:31732
    sub_30c85();
    esi += eax;
loc_31739: // 0160:31739
    if ((int32_t)esi >= (int32_t)0x00000004)
        goto loc_31743;
    esi = 0x00000004;
loc_31743: // 0160:31743
    if ((int32_t)esi <= (int32_t)0x000003bc)
        goto loc_31750;
    esi = 0x000003bc;
loc_31750: // 0160:31750
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = ebx;
    ecx <<= 4;
    ecx -= ebx;
    ecx <<= 6;
    ecx += esi;
    edi = eax + eax;
loc_3176a: // 0160:3176a
    if ((int32_t)ebx <= 0)
        goto loc_317c1;
    if (esi >= 0x000003c0)
        goto loc_317c1;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_317c1;
    if ((int32_t)ebx <= 0)
        goto loc_317c1;
    ecx -= 0x000003c0;
    ebx--;
    goto loc_3176a;
loc_317c1: // 0160:317c1
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = ebx;
    ecx <<= 4;
    ecx -= ebx;
    ecx <<= 6;
    ecx += esi;
    edi = eax + eax;
loc_317db: // 0160:317db
    if ((int32_t)ebx <= 0)
        goto loc_31825;
    if (esi >= 0x000003c0)
        goto loc_31825;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, edi + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ecx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_3182c;
loc_31825: // 0160:31825
    eax = 0x00000001;
    goto loc_3182e;
loc_3182c: // 0160:3182c
    eax = 0;
loc_3182e: // 0160:3182e
    if (!eax)
        goto loc_31843;
    if ((int32_t)ebx >= (int32_t)0x0000018f)
        goto loc_31843;
    ecx += 0x000003c0;
    ebx++;
    goto loc_317db;
loc_31843: // 0160:31843
    eax = memoryAGet32(ds, esp);
    esi <<= 9;
    ebx <<= 9;
    memoryASet32(ss, ebp, esi);
    memoryASet32(ds, eax, ebx);
loc_31851: // 0160:31851
    esp += 0x00000004;
    goto loc_30a47;
}
void sub_31859() // 0160:31859 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (memoryAGet32(ds, 0x5cc6c) == 0x00000000)
        goto loc_31959;
    ebx = memoryAGet32(ds, 0x23a088);
    if (ebx == 0x00000004)
        goto loc_3187e;
    if (ebx != 0x00000024)
        goto loc_31959;
loc_3187e: // 0160:3187e
    if (memoryAGet32(ds, 0x23a054) == 0x00000000)
        goto loc_31959;
    if (memoryAGet32(ds, 0x5cc6c) != 0x00000001)
        goto loc_318f2;
    if ((int32_t)memoryAGet32(ds, 0x23a074) <= (int32_t)0x00000096)
        goto loc_318b4;
    edx = 0x00000019;
    eax = 0;
    sub_30c85();
    memoryASet32(ds, 0x23a074, memoryAGet32(ds, 0x23a074) - eax);
    goto loc_318c6;
loc_318b4: // 0160:318b4
    edx = 0x00000019;
    eax = 0;
    sub_30c85();
    memoryASet32(ds, 0x23a074, memoryAGet32(ds, 0x23a074) + eax);
loc_318c6: // 0160:318c6
    eax = memoryAGet32(ds, 0x23a074);
    edx = eax;
    ebx = 0x00000019;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (!edx)
        goto loc_318f2;
    ecx = memoryAGet32(ds, 0x23a074);
    ecx -= edx;
    memoryASet32(ds, 0x23a074, ecx);
    esi = ecx + ebx;
    memoryASet32(ds, 0x23a074, esi);
loc_318f2: // 0160:318f2
    if (memoryAGet32(ds, 0x5cc6c) != 0x00000002)
        goto loc_31959;
    if ((int32_t)memoryAGet32(ds, 0x23a074) <= (int32_t)0x00000096)
        goto loc_3191b;
    edx = 0x00000032;
    eax = 0;
    sub_30c85();
    memoryASet32(ds, 0x23a074, memoryAGet32(ds, 0x23a074) - eax);
    goto loc_3192d;
loc_3191b: // 0160:3191b
    edx = 0x00000032;
    eax = 0;
    sub_30c85();
    memoryASet32(ds, 0x23a074, memoryAGet32(ds, 0x23a074) + eax);
loc_3192d: // 0160:3192d
    eax = memoryAGet32(ds, 0x23a074);
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if (!edx)
        goto loc_31959;
    ecx = memoryAGet32(ds, 0x23a074);
    ecx -= edx;
    memoryASet32(ds, 0x23a074, ecx);
    esi = ecx + ebx;
    memoryASet32(ds, 0x23a074, esi);
loc_31959: // 0160:31959
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3195e() // 0160:3195e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000054;
    edx = 0x7fffffff;
    memoryASet32(ds, 0x23a088, eax);
    ebx = 0;
    memoryASet32(ds, 0x23a058, edx);
    memoryASet32(ds, 0x23a054, ebx);
    memoryASet32(ds, 0x23a064, ebx);
    if (eax != 0x00000004)
        goto loc_319bc;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a60e) != 0x00000000)
        goto loc_319bc;
    memoryASet32(ds, 0x23a088, 0x00000024);
loc_319bc: // 0160:319bc
    if (memoryAGet32(ds, 0x23a088) != 0x00000024)
        goto loc_319f4;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a612) != 0x00000000)
        goto loc_319f4;
loc_319ed: // 0160:319ed
    eax = 0;
    goto loc_31fdf;
loc_319f4: // 0160:319f4
    if (memoryAGet32(ds, 0x23a088) != 0x00000000)
        goto loc_31a25;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a606) == 0x00000000)
        goto loc_319ed;
loc_31a25: // 0160:31a25
    if (memoryAGet32(ds, 0x23a088) != 0x00000000)
        goto loc_31a6a;
    edx = memoryAGet32(ds, 0x21ac98);
    eax = edx;
    eax <<= 2;
    edx += eax;
    edx += edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    edx = eax;
    edx <<= 9;
    ebx = 0x0000004b;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x23a04c, eax);
    memoryASet32(ds, esp + 44, 0x00000010);
    goto loc_31a7b;
loc_31a6a: // 0160:31a6a
    edi = 0;
    ebp = 0x00000008;
    memoryASet32(ds, 0x23a04c, edi);
    memoryASet32(ds, esp + 44, ebp);
loc_31a7b: // 0160:31a7b
    edx = 0x0000000a;
    eax = memoryAGet32(ds, 0x21ad44);
    cl = memoryAGet(ds, 0x5cc64);
    memoryASet32(ds, 0x23a050, eax);
    eax = 0x00000001;
    ebx = 0x00000014;
    eax <<= cl;
    memoryASet32(ds, esp, edx);
    eax ^= 0x0000ffff;
    memoryASet32(ds, esp + 48, ebx);
    memoryASet16(ds, 0x21ac52, ax);
loc_31aae: // 0160:31aae
    if (memoryAGet32(ds, 0x23a088) == 0x00000000)
        goto loc_31add;
    eax = memoryAGet32(ds, esp);
    if ((int32_t)eax < (int32_t)0x00000028)
        goto loc_31f32;
    edx = eax;
    ebx = 0x00000032;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx <= (int32_t)0x0000000a)
        goto loc_31add;
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_31f32;
loc_31add: // 0160:31add
    edx = 0;
    eax = memoryAGet32(ds, esp + 48);
    memoryASet32(ds, esp + 76, edx);
    memoryASet32(ds, esp + 56, eax);
    memoryASet32(ds, esp + 60, edx);
    memoryASet32(ds, esp + 72, edx);
loc_31af3: // 0160:31af3
    eax = memoryAGet32(ds, esp + 76);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_31f07;
    eax = memoryAGet32(ds, esp + 72);
    if (memoryAGet32(ds, eax + 2201958) == 0x00000000)
        goto loc_31f07;
    sub_30d96();
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 2201958);
    memoryASet32(ds, esp + 40, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 2201962);
    edx = esp + 36;
    memoryASet32(ds, esp + 36, eax);
    eax = esp + 40;
    sub_316ca();
    edx = memoryAGet32(ds, esp + 40);
    ebx = memoryAGet32(ds, 0x23a068);
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax = (int32_t)eax * (int32_t)eax;
    if ((int32_t)eax >= (int32_t)0x00000900)
        goto loc_31ba0;
    eax = memoryAGet32(ds, esp + 40);
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_31b96;
    edi = eax + 512;
    memoryASet32(ds, esp + 40, edi);
    goto loc_31ba0;
loc_31b96: // 0160:31b96
    esi = eax + -512;
    memoryASet32(ds, esp + 40, esi);
loc_31ba0: // 0160:31ba0
    ebp = memoryAGet32(ds, esp + 40);
    if ((int32_t)ebp >= (int32_t)0x00002000)
        goto loc_31bb6;
    eax = ebp + 512;
    memoryASet32(ds, esp + 40, eax);
loc_31bb6: // 0160:31bb6
    edx = memoryAGet32(ds, esp + 40);
    if ((int32_t)edx <= (int32_t)0x00076000)
        goto loc_31bcc;
    ebx = edx + -512;
    memoryASet32(ds, esp + 40, ebx);
loc_31bcc: // 0160:31bcc
    edi = memoryAGet32(ds, esp);
    edx = memoryAGet32(ds, 0x23a04c);
    edx = (int32_t)edx * (int32_t)edi;
    edx = (int32_t)edx * (int32_t)edi;
    eax = memoryAGet32(ds, esp + 40);
    eax -= memoryAGet32(ds, 0x23a068);
    eax += eax;
    eax -= edx;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 56);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 68, eax);
    eax = memoryAGet32(ds, 0x23a050);
    eax = (int32_t)eax * (int32_t)edi;
    eax = (int32_t)eax * (int32_t)edi;
    ebx = memoryAGet32(ds, esp + 36);
    ebx -= memoryAGet32(ds, 0x23a06c);
    edx = ebx + ebx;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    memoryASet32(ds, esp + 64, eax);
    eax = memoryAGet32(ds, esp + 68);
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, esp + 64);
    edx = (int32_t)edx * (int32_t)edx;
    eax += edx;
    sub_307c2();
    eax <<= 3;
    edx = eax;
    ebx = 0x0000015d;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax += 0x0000000f;
    if ((int32_t)eax <= (int32_t)0x00000011)
        goto loc_31f07;
    if ((int32_t)eax >= (int32_t)0x0000008e)
        goto loc_31f07;
    eax = memoryAGet32(ds, esp + 68);
    edx = esp + 28;
    memoryASet32(ds, esp + 24, eax);
    eax = memoryAGet32(ds, esp + 64);
    ecx = 0;
    memoryASet32(ds, esp + 20, eax);
    eax = memoryAGet32(ds, 0x23a068);
    memoryASet32(ds, esp + 80, ecx);
    memoryASet32(ds, esp + 32, eax);
    eax = memoryAGet32(ds, 0x23a06c);
    cl = memoryAGet(ds, esp + 76);
    memoryASet32(ds, esp + 28, eax);
    edi = eax;
    eax = 0x00000001;
    bx = memoryAGet16(ds, 0x21ac52);
    eax <<= cl;
    ecx = esp + 20;
    ebx ^= eax;
    eax = esp + 32;
    memoryASet16(ds, 0x21ac52, bx);
    ebx = esp + 24;
    esi = memoryAGet32(ds, esp + 32);
    sub_31658();
    ebp = eax;
    goto loc_31d8c;
loc_31cbd: // 0160:31cbd
    esi = memoryAGet32(ds, esp + 32);
    edi = memoryAGet32(ds, esp + 28);
    eax = memoryAGet32(ds, esp + 24);
    ecx = memoryAGet32(ds, esp + 24);
    edx = esi + eax;
    eax = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp + 32, edx);
    ebx = edi + eax;
    eax = memoryAGet32(ds, 0x23a04c);
    edx = memoryAGet32(ds, esp + 20);
    ecx += eax;
    edx += memoryAGet32(ds, 0x23a050);
    eax = memoryAGet32(ds, esp + 32);
    memoryASet32(ds, esp + 20, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 16, eax);
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 24, ecx);
    ebx = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_31d65;
    eax = esp + 4;
    edx = edi;
    push32(eax);
    eax = esp + 12;
    edx = sar32(edx, 0x1f);
    push32(eax);
    eax = edi;
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = esp + 20;
    ebx = eax;
    eax = esp + 24;
    sub_26d3f();
    memoryASet32(ds, esp + 80, eax);
loc_31d65: // 0160:31d65
    ecx = memoryAGet32(ds, esp + 32);
    if ((int32_t)ecx < (int32_t)0x00000800)
        goto loc_31d83;
    if ((int32_t)ecx > (int32_t)0x00077800)
        goto loc_31d83;
    if ((int32_t)memoryAGet32(ds, esp + 20) < (int32_t)0x00004000)
        goto loc_31d8b;
loc_31d83: // 0160:31d83
    memoryASet32(ds, esp + 80, 0x00000002);
loc_31d8b: // 0160:31d8b
    ebp++;
loc_31d8c: // 0160:31d8c
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp))
        goto loc_31d9c;
    if (memoryAGet32(ds, esp + 80) == 0x00000000)
        goto loc_31cbd;
loc_31d9c: // 0160:31d9c
    cl = memoryAGet(ds, esp + 76);
    eax = 0x00000001;
    eax <<= cl;
    cx = memoryAGet16(ds, 0x21ac52);
    ecx ^= eax;
    ebx = memoryAGet32(ds, esp + 80);
    memoryASet16(ds, 0x21ac52, cx);
    if (!ebx)
        goto loc_31dc7;
    memoryASet32(ds, esp + 32, esi);
    memoryASet32(ds, esp + 28, edi);
loc_31dc7: // 0160:31dc7
    edx = memoryAGet32(ds, esp + 40);
    ecx = memoryAGet32(ds, esp + 32);
    edx -= ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = memoryAGet32(ds, esp + 28);
    edx = memoryAGet32(ds, esp + 36);
    edx -= esi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = (int32_t)ecx * (int32_t)ecx;
    eax = (int32_t)eax * (int32_t)eax;
    edi = memoryAGet32(ds, esp + 80);
    ecx += eax;
    if ((int32_t)edi >= (int32_t)0x00000002)
        goto loc_31f07;
    if ((int32_t)ecx < (int32_t)0x00000400)
        goto loc_31e2c;
    ebx = 0x00001000;
    eax = memoryAGet32(ds, esp + 32);
    edx = esi;
    sub_31562();
    if (!eax)
        goto loc_31f07;
loc_31e2c: // 0160:31e2c
    eax = memoryAGet32(ds, 0x23a058);
    if ((int32_t)ecx < (int32_t)eax)
        goto loc_31e56;
    eax += 0x00000040;
    if ((int32_t)ecx > (int32_t)eax)
        goto loc_31f07;
    eax = memoryAGet32(ds, esp + 60);
    edx = memoryAGet32(ds, 0x23a064);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax + 2334512))
        goto loc_31f07;
loc_31e56: // 0160:31e56
    if (memoryAGet32(ds, 0x23a088) == 0x00000000)
        goto loc_31e84;
    if ((int32_t)ebp < (int32_t)0x00000028)
        goto loc_31f07;
    ebx = 0x00000032;
    edx = ebp;
    eax = ebp;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)edx <= (int32_t)0x0000000a)
        goto loc_31e84;
    if ((int32_t)edx < (int32_t)0x00000028)
        goto loc_31f07;
loc_31e84: // 0160:31e84
    eax = memoryAGet32(ds, esp + 76);
    memoryASet32(ds, 0x23a084, eax);
    eax = memoryAGet32(ds, esp + 60);
    eax = memoryAGet32(ds, eax + 2334512);
    memoryASet32(ds, 0x23a064, eax);
    eax = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, 0x23a058, ecx);
    memoryASet32(ds, 0x23a05c, eax);
    eax = memoryAGet32(ds, esp + 64);
    ecx = memoryAGet32(ds, esp + 80);
    memoryASet32(ds, 0x23a060, eax);
    if (!ecx)
        goto loc_31ec4;
    memoryASet32(ds, 0x23a074, ebp);
    goto loc_31ecc;
loc_31ec4: // 0160:31ec4
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x23a074, eax);
loc_31ecc: // 0160:31ecc
    esi = 0x00000001;
    edi = memoryAGet32(ds, esp + 68);
    memoryASet32(ds, 0x23a080, esi);
    if ((int32_t)edi >= 0)
        goto loc_31eeb;
    memoryASet32(ds, 0x23a070, 0xffffffff);
    goto loc_31ef1;
loc_31eeb: // 0160:31eeb
    memoryASet32(ds, 0x23a070, esi);
loc_31ef1: // 0160:31ef1
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x23a054, eax);
    eax = memoryAGet32(ds, esp + 72);
    eax = memoryAGet32(ds, eax + 2202034);
    memoryASet32(ds, esp + 52, eax);
loc_31f07: // 0160:31f07
    esi = memoryAGet32(ds, esp + 60);
    edi = memoryAGet32(ds, esp + 72);
    ebp = memoryAGet32(ds, esp + 76);
    esi += 0x00000004;
    edi += 0x000000ac;
    ebp++;
    memoryASet32(ds, esp + 60, esi);
    memoryASet32(ds, esp + 72, edi);
    memoryASet32(ds, esp + 76, ebp);
    if ((int32_t)ebp < (int32_t)0x00000010)
        goto loc_31af3;
loc_31f32: // 0160:31f32
    ecx = memoryAGet32(ds, esp + 48);
    esi = memoryAGet32(ds, esp);
    ecx += 0x00000014;
    esi += 0x0000000a;
    memoryASet32(ds, esp + 48, ecx);
    memoryASet32(ds, esp, esi);
    if ((int32_t)esi <= (int32_t)0x000000fa)
        goto loc_31aae;
    edx = 0x0000ffff;
    ebp = memoryAGet32(ds, 0x23a058);
    memoryASet16(ds, 0x21ac52, dx);
    if ((int32_t)ebp >= (int32_t)0x00001000)
        goto loc_31f74;
    if ((int32_t)ebp >= (int32_t)0x00000100)
        goto loc_31f87;
loc_31f74: // 0160:31f74
    if ((int32_t)memoryAGet32(ds, esp + 52) <= (int32_t)0x00000032)
        goto loc_31fd5;
    if ((int32_t)memoryAGet32(ds, 0x23a058) >= (int32_t)0x00001000)
        goto loc_31fd5;
loc_31f87: // 0160:31f87
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a612) == 0x00000000)
        goto loc_31fd5;
    if (memoryAGet32(ds, 0x23a088) != 0x00000004)
        goto loc_31fd5;
    edx = 0x00004000;
    eax = memoryAGet32(ds, 0x23a084);
    sub_3113e();
    if (!eax)
        goto loc_31fd5;
    memoryASet32(ds, 0x23a088, 0x00000024);
loc_31fd5: // 0160:31fd5
    sub_31859();
    eax = memoryAGet32(ds, 0x23a054);
loc_31fdf: // 0160:31fdf
    esp += 0x00000054;
    goto loc_3380c;
    // gap 6181 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_31fe7() // 0160:31fe7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000058;
    edi = esp + 12;
    esi = 0x00030786;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = esp;
    esi = 0x00030792;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = 0x7fffffff;
    eax = memoryAGet32(ds, 0x5cc64);
    memoryASet32(ds, 0x23a058, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    ebx = 0;
    eax <<= 2;
    esi = 0x00000006;
    eax += edx;
    memoryASet32(ds, 0x23a054, ebx);
    eax <<= 2;
    memoryASet32(ds, 0x23a064, ebx);
    edi = memoryAGet32(ds, eax + 2205206);
    memoryASet32(ds, 0x23a088, esi);
    if (edi)
        goto loc_32065;
    if (memoryAGet32(ds, eax + 2205210) != 0x00000000)
        goto loc_32065;
    eax = 0;
    goto loc_324b1;
loc_32065: // 0160:32065
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    eax += edx;
    memoryASet32(ds, 0x23a04c, ebx);
    esi = memoryAGet32(ds, eax * 4 + 0x21a606);
    memoryASet32(ds, 0x23a050, ebx);
    if (esi)
        goto loc_320c4;
    eax = edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 2205198) != 0x00000000)
        goto loc_320c4;
    if (memoryAGet32(ds, eax + 2205202) != 0x00000000)
        goto loc_320c4;
    eax = 0x00000001;
    goto loc_320c6;
loc_320c4: // 0160:320c4
    eax = 0;
loc_320c6: // 0160:320c6
    if (memoryAGet32(ds, 0x23a034) != 0x00000000)
        goto loc_320d3;
    if (!eax)
        goto loc_320e7;
loc_320d3: // 0160:320d3
    ecx = 0x000003e8;
    esi = 0x00100000;
    memoryASet32(ds, esp + 56, ecx);
    memoryASet32(ds, esp + 52, esi);
    goto loc_320fb;
loc_320e7: // 0160:320e7
    eax = memoryAGet32(ds, 0x5cc6c);
    edx = memoryAGet32(ds, esp + eax * 4 + 0xc);
    eax = memoryAGet32(ds, esp + eax*4);
    memoryASet32(ds, esp + 56, edx);
    memoryASet32(ds, esp + 52, eax);
loc_320fb: // 0160:320fb
    eax = 0x00000001;
    cl = memoryAGet(ds, 0x5cc64);
    eax <<= cl;
    eax ^= 0x0000ffff;
    memoryASet16(ds, 0x21ac52, ax);
    eax = memoryAGet32(ds, esp + 56);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = 0;
    esi = 0;
    memoryASet32(ds, esp + 76, edi);
    memoryASet32(ds, esp + 72, edi);
    memoryASet32(ds, esp + 48, eax);
loc_32130: // 0160:32130
    eax = memoryAGet32(ds, esp + 76);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_32452;
    if (memoryAGet32(ds, esi + 2201958) == 0x00000000)
        goto loc_32452;
    sub_30d96();
    eax = memoryAGet32(ds, esi + 2201958);
    memoryASet32(ds, esp + 44, eax);
    eax = memoryAGet32(ds, esi + 2201962);
    eax -= 0x00000400;
    edx = esp + 40;
    memoryASet32(ds, esp + 40, eax);
    eax = esp + 44;
    sub_316ca();
    edx = memoryAGet32(ds, esp + 44);
    ebx = memoryAGet32(ds, 0x23a068);
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = memoryAGet32(ds, 0x23a06c);
    edx = memoryAGet32(ds, esp + 40);
    edx -= edi;
    ecx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    edx = (int32_t)edx * (int32_t)ecx;
    ebx = eax;
    eax = (int32_t)eax * (int32_t)eax;
    eax += edx;
    sub_307c2();
    memoryASet32(ds, esp + 68, eax);
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_321fb;
    edx = memoryAGet32(ds, 0x5cc6c);
    edi = 0x00000005;
    edx += edx;
    edi -= edx;
    edx = edi;
    edx <<= 7;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_32208;
loc_321fb: // 0160:321fb
    if (memoryAGet32(ds, 0x23a034) == 0x00000000)
        goto loc_32452;
loc_32208: // 0160:32208
    edx = ecx * 0x00002ee0;
    edi = memoryAGet32(ds, esp + 68);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx = ebx * 0x00002ee0;
    edi = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 68));
    memoryASet32(ds, esp + 80, eax);
    if (!edi)
        goto loc_32240;
    edx = ecx;
    edx <<= 9;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    goto loc_32254;
loc_32240: // 0160:32240
    if (!eax)
        goto loc_32256;
    edx = ebx;
    edx <<= 9;
    ebx = memoryAGet32(ds, esp + 80);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
loc_32254: // 0160:32254
    ebp = eax;
loc_32256: // 0160:32256
    if (ebp)
        goto loc_3225f;
    ebp = 0x00000032;
loc_3225f: // 0160:3225f
    cl = memoryAGet(ds, esp + 76);
    eax = 0x00000001;
    eax <<= cl;
    bx = memoryAGet16(ds, 0x21ac52);
    memoryASet32(ds, esp + 84, eax);
    ebx ^= eax;
    eax = memoryAGet32(ds, esp + 44);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 28, eax);
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 24, eax);
    eax = esp + 32;
    push32(eax);
    eax = esp + 40;
    push32(eax);
    eax = memoryAGet32(ds, 0x23a06c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, 0x23a068);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet16(ds, 0x21ac52, bx);
    edx = esp + 32;
    ebx = eax;
    eax = esp + 36;
    sub_26d3f();
    cx = memoryAGet16(ds, 0x21ac52);
    memoryASet32(ds, esp + 60, eax);
    ecx ^= memoryAGet32(ds, esp + 84);
    eax = memoryAGet32(ds, esp + 44);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, esp + 40);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet16(ds, 0x21ac52, cx);
    ebx -= memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 32);
    ecx = eax;
    ecx -= edx;
    if (!edi)
        goto loc_32348;
    edx = memoryAGet32(ds, esp + 36);
    eax = memoryAGet32(ds, 0x23a068);
    edx <<= 9;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    goto loc_32362;
loc_32348: // 0160:32348
    if (memoryAGet32(ds, esp + 80) == 0x00000000)
        goto loc_32366;
    eax = memoryAGet32(ds, 0x23a06c);
    edx <<= 9;
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 80));
loc_32362: // 0160:32362
    memoryASet32(ds, esp + 64, eax);
loc_32366: // 0160:32366
    ebx = (int32_t)ebx * (int32_t)ebx;
    ecx = (int32_t)ecx * (int32_t)ecx;
    edx = memoryAGet32(ds, esp + 52);
    ecx += ebx;
    if ((int32_t)ecx >= (int32_t)edx)
        goto loc_32452;
    ebx = memoryAGet32(ds, esp + 56);
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, esi + 2202034))
        goto loc_32452;
    edx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp + 36);
    ebx = 0x00000240;
    edx <<= 9;
    eax <<= 9;
    sub_31473();
    if (eax)
        goto loc_32452;
    eax = memoryAGet32(ds, 0x23a058);
    if ((int32_t)ecx < (int32_t)eax)
        goto loc_323cf;
    if (ecx != eax)
        goto loc_32452;
    eax = memoryAGet32(ds, esp + 72);
    ebx = memoryAGet32(ds, 0x23a064);
    if ((int32_t)ebx >= (int32_t)memoryAGet32(ds, eax + 2334512))
        goto loc_32452;
loc_323cf: // 0160:323cf
    eax = memoryAGet32(ds, esp + 72);
    memoryASet32(ds, 0x23a058, ecx);
    eax = memoryAGet32(ds, eax + 2334512);
    memoryASet32(ds, 0x23a05c, edi);
    memoryASet32(ds, 0x23a064, eax);
    eax = memoryAGet32(ds, esp + 80);
    ecx = memoryAGet32(ds, esp + 60);
    memoryASet32(ds, 0x23a060, eax);
    if (!ecx)
        goto loc_32406;
    eax = memoryAGet32(ds, esp + 64);
    memoryASet32(ds, 0x23a074, eax);
    goto loc_3240c;
loc_32406: // 0160:32406
    memoryASet32(ds, 0x23a074, ebp);
loc_3240c: // 0160:3240c
    eax = 0x00000001;
    memoryASet32(ds, 0x23a080, eax);
    if ((int32_t)edi >= 0)
        goto loc_32426;
    memoryASet32(ds, 0x23a070, 0xffffffff);
    goto loc_3242b;
loc_32426: // 0160:32426
    memoryASet32(ds, 0x23a070, eax);
loc_3242b: // 0160:3242b
    ecx = memoryAGet32(ds, esp + 48);
    eax = memoryAGet32(ds, esi + 2202034);
    memoryASet32(ds, 0x23a054, ebp);
    if ((int32_t)eax >= (int32_t)ecx)
        goto loc_32448;
    eax = 0;
    memoryASet32(ds, 0x23a038, eax);
    goto loc_32452;
loc_32448: // 0160:32448
    memoryASet32(ds, 0x23a038, 0x00000001);
loc_32452: // 0160:32452
    edx = memoryAGet32(ds, esp + 72);
    ebx = memoryAGet32(ds, esp + 76);
    esi += 0x000000ac;
    edx += 0x00000004;
    ebx++;
    memoryASet32(ds, esp + 72, edx);
    memoryASet32(ds, esp + 76, ebx);
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_32130;
    edx = 0x0000ffff;
    esi = memoryAGet32(ds, 0x5cc6c);
    memoryASet16(ds, 0x21ac52, dx);
    if (esi != 0x00000002)
        goto loc_324ac;
    edi = memoryAGet32(ds, 0x23a034);
    if (edi)
        goto loc_324ac;
    edx = 0x00000001;
    eax = 0;
    sub_30c85();
    if (!eax)
        goto loc_324ac;
    memoryASet32(ds, 0x23a054, edi);
loc_324ac: // 0160:324ac
    eax = memoryAGet32(ds, 0x23a054);
loc_324b1: // 0160:324b1
    esp += 0x00000058;
    goto loc_3380c;
    // gap 4947 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_324b9() // 0160:324b9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = memoryAGet32(ds, 0x23a080);
    edx = memoryAGet32(ds, 0x23a074);
    eax = memoryAGet32(ds, 0x23a088);
    sub_30e53();
    if (!eax)
        goto loc_32514;
    edx = memoryAGet32(ds, 0x5cc80);
    if (!edx)
        goto loc_324ef;
    ebx = edx + -1;
    eax = 0;
    memoryASet32(ds, 0x5cc80, ebx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_324ef: // 0160:324ef
    ebx = memoryAGet32(ds, 0x23a078);
    edx = memoryAGet32(ds, 0x23a070);
    eax = memoryAGet32(ds, 0x23a07c);
    ecx = 0;
    sub_30cb9();
    if (!eax)
        goto loc_32514;
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32514: // 0160:32514
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3251a() // 0160:3251a +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = 0;
    memoryASet32(ds, 0x23a088, edx);
    sub_3195e();
    memoryASet32(ds, 0x23a030, eax);
    eax = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, 0x23a020, eax);
    eax = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, 0x23a01c, eax);
    eax = memoryAGet32(ds, 0x23a04c);
    memoryASet32(ds, 0x23a024, eax);
    eax = memoryAGet32(ds, 0x23a050);
    memoryASet32(ds, 0x239fec, eax);
    eax = memoryAGet32(ds, 0x23a064);
    memoryASet32(ds, 0x239fd8, eax);
    eax = memoryAGet32(ds, 0x23a074);
    memoryASet32(ds, 0x23a02c, eax);
    eax = memoryAGet32(ds, 0x23a058);
    memoryASet32(ds, 0x239ff0, eax);
    eax = memoryAGet32(ds, 0x23a070);
    memoryASet32(ds, 0x23a028, eax);
    edx = pop32();
    esp += 4;
}
void sub_32581() // 0160:32581 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x00000004;
    eax = edx;
    memoryASet32(ds, 0x23a088, edx);
    sub_3195e();
    memoryASet32(ds, 0x23a018, eax);
    eax = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, 0x239fcc, eax);
    eax = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, 0x239fd0, eax);
    eax = memoryAGet32(ds, 0x23a04c);
    memoryASet32(ds, 0x239fc0, eax);
    eax = memoryAGet32(ds, 0x23a050);
    memoryASet32(ds, 0x239fc4, eax);
    eax = memoryAGet32(ds, 0x23a080);
    memoryASet32(ds, 0x23a000, eax);
    eax = memoryAGet32(ds, 0x23a064);
    memoryASet32(ds, 0x239fe4, eax);
    eax = memoryAGet32(ds, 0x23a074);
    memoryASet32(ds, 0x23a004, eax);
    eax = memoryAGet32(ds, 0x23a058);
    memoryASet32(ds, 0x23a00c, eax);
    eax = memoryAGet32(ds, 0x23a070);
    ebx = memoryAGet32(ds, 0x23a088);
    memoryASet32(ds, 0x23a008, eax);
    al = ebx == 0x00000024;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x239ffc, eax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3260d() // 0160:3260d +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    edx = 0x00000006;
    memoryASet32(ds, 0x23a034, eax);
    memoryASet32(ds, 0x23a088, edx);
    sub_31fe7();
    memoryASet32(ds, 0x239fe8, eax);
    if (!eax)
        goto loc_32747;
    eax = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, 0x23a014, eax);
    eax = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, 0x23a010, eax);
    eax = memoryAGet32(ds, 0x23a04c);
    memoryASet32(ds, 0x239ff8, eax);
    eax = memoryAGet32(ds, 0x23a050);
    memoryASet32(ds, 0x239ff4, eax);
    eax = memoryAGet32(ds, 0x23a080);
    memoryASet32(ds, 0x239fd4, eax);
    eax = memoryAGet32(ds, 0x23a064);
    memoryASet32(ds, 0x239fa0, eax);
    eax = memoryAGet32(ds, 0x23a074);
    memoryASet32(ds, 0x239fdc, eax);
    eax = memoryAGet32(ds, 0x23a058);
    memoryASet32(ds, 0x239fa8, eax);
    eax = memoryAGet32(ds, 0x23a070);
    memoryASet32(ds, 0x239fe0, eax);
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    al = memoryAGet32(ds, eax * 4 + 0x21a616) == 0x00000000;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x239fc8, eax);
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 2205206) == 0x00000000)
        goto loc_32715;
    if (memoryAGet32(ds, eax + 2205210) == 0x00000000)
        goto loc_32715;
    if (memoryAGet32(ds, 0x23a038) == 0x00000000)
        goto loc_32704;
    ebp = 0;
    memoryASet32(ds, 0x239fc8, ebp);
    goto loc_32715;
loc_32704: // 0160:32704
    edx = 0x00000001;
    eax = 0;
    sub_30c85();
    memoryASet32(ds, 0x239fc8, eax);
loc_32715: // 0160:32715
    if (memoryAGet32(ds, 0x239fc8) == 0x00000000)
        goto loc_3272a;
    memoryASet32(ds, 0x23a088, 0x00000027);
    goto loc_32734;
loc_3272a: // 0160:3272a
    memoryASet32(ds, 0x23a088, 0x00000006);
loc_32734: // 0160:32734
    if (memoryAGet32(ds, 0x23a034) == 0x00000000)
        goto loc_32747;
    memoryASet32(ds, 0x23a088, 0x00000006);
loc_32747: // 0160:32747
    eax = memoryAGet32(ds, 0x239fe8);
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_3274f() // 0160:3274f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if ((int32_t)memoryAGet32(ds, 0x23a054) <= (int32_t)0x00000000)
        goto loc_327f5;
    eax = memoryAGet32(ds, 0x23a05c);
    eax = (int32_t)eax * (int32_t)eax;
    edx = memoryAGet32(ds, 0x23a060);
    edx = (int32_t)edx * (int32_t)edx;
    eax += edx;
    sub_307c2();
    edx = eax;
    ecx = 0x0000015d;
    edx <<= 3;
    ebx = eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi = memoryAGet32(ds, 0x23a05c);
    eax += 0x0000000f;
    edx = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, 0x23a078, eax);
    edx = -edx;
    if (!esi)
        goto loc_327d8;
    edx <<= 11;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax + 2048;
    edx <<= 2;
    edx = memoryAGet32(ds, edx + 348144);
    edx <<= 6;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<9) & 0x80000000);
    edx <<= 10;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x0a);
    memoryASet32(ds, 0x23a07c, eax);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_327d8: // 0160:327d8
    if ((int32_t)edx >= 0)
        goto loc_327eb;
    memoryASet32(ds, 0x23a07c, 0xffffffc0);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_327eb: // 0160:327eb
    memoryASet32(ds, 0x23a07c, 0x00000040);
loc_327f5: // 0160:327f5
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_327fa() // 0160:327fa +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    eax = memoryAGet32(ds, 0x239ff0);
    edx = 0;
    ebx = memoryAGet32(ds, 0x23a00c);
    memoryASet32(ds, 0x23a054, edx);
    if (eax == ebx)
        goto loc_3281e;
    if ((int32_t)eax > (int32_t)0x00000040)
        goto loc_32856;
    if ((int32_t)ebx > (int32_t)0x00000040)
        goto loc_32856;
loc_3281e: // 0160:3281e
    eax = memoryAGet32(ds, 0x239fd8);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, 0x239fe4))
        goto loc_3282f;
    eax = 0;
    goto loc_32834;
loc_3282f: // 0160:3282f
    eax = 0x00000004;
loc_32834: // 0160:32834
    edx = memoryAGet32(ds, 0x239fd8);
    if (edx != memoryAGet32(ds, 0x239fe4))
        goto loc_32868;
    edx = 0x00000001;
    eax = 0;
    sub_30c85();
    if (!eax)
        goto loc_32863;
loc_32852: // 0160:32852
    eax = 0;
    goto loc_32868;
loc_32856: // 0160:32856
    eax = memoryAGet32(ds, 0x239ff0);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x23a00c))
        goto loc_32852;
loc_32863: // 0160:32863
    eax = 0x00000004;
loc_32868: // 0160:32868
    if (eax <= 0)
        goto loc_32876;
    if (eax == 0x00000004)
        goto loc_328cb;
    goto loc_3293f;
loc_32876: // 0160:32876
    eax = memoryAGet32(ds, 0x23a020);
    memoryASet32(ds, 0x23a05c, eax);
    eax = memoryAGet32(ds, 0x23a01c);
    memoryASet32(ds, 0x23a060, eax);
    eax = memoryAGet32(ds, 0x23a024);
    memoryASet32(ds, 0x23a04c, eax);
    eax = memoryAGet32(ds, 0x239fec);
    memoryASet32(ds, 0x23a050, eax);
    eax = memoryAGet32(ds, 0x23a02c);
    memoryASet32(ds, 0x23a074, eax);
    eax = memoryAGet32(ds, 0x23a030);
    memoryASet32(ds, 0x23a054, eax);
    eax = memoryAGet32(ds, 0x239ff0);
    ebp = 0;
    memoryASet32(ds, 0x23a058, eax);
    eax = memoryAGet32(ds, 0x23a028);
    memoryASet32(ds, 0x23a088, ebp);
    goto loc_3293a;
loc_328cb: // 0160:328cb
    if (memoryAGet32(ds, 0x239ffc) == 0x00000000)
        goto loc_328e0;
    memoryASet32(ds, 0x23a088, 0x00000024);
    goto loc_328e5;
loc_328e0: // 0160:328e0
    memoryASet32(ds, 0x23a088, eax);
loc_328e5: // 0160:328e5
    eax = memoryAGet32(ds, 0x239fcc);
    memoryASet32(ds, 0x23a05c, eax);
    eax = memoryAGet32(ds, 0x239fd0);
    memoryASet32(ds, 0x23a060, eax);
    eax = memoryAGet32(ds, 0x239fc0);
    memoryASet32(ds, 0x23a04c, eax);
    eax = memoryAGet32(ds, 0x239fc4);
    memoryASet32(ds, 0x23a050, eax);
    eax = memoryAGet32(ds, 0x23a004);
    memoryASet32(ds, 0x23a074, eax);
    eax = memoryAGet32(ds, 0x23a000);
    memoryASet32(ds, 0x23a080, eax);
    eax = memoryAGet32(ds, 0x23a018);
    memoryASet32(ds, 0x23a054, eax);
    eax = memoryAGet32(ds, 0x23a00c);
    memoryASet32(ds, 0x23a058, eax);
    eax = memoryAGet32(ds, 0x23a008);
loc_3293a: // 0160:3293a
    memoryASet32(ds, 0x23a070, eax);
loc_3293f: // 0160:3293f
    eax = memoryAGet32(ds, 0x23a054);
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_32948() // 0160:32948 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 2205214) == 0x00000000)
        goto loc_3297a;
loc_32973: // 0160:32973
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
    return;
loc_3297a: // 0160:3297a
    if (memoryAGet32(ds, eax + 2205218) != 0x00000000)
        goto loc_32973;
    if (memoryAGet32(ds, eax + 2205266) != 0x00000000)
        goto loc_32995;
    if (memoryAGet32(ds, eax + 2205226) != 0x00000000)
        goto loc_32973;
loc_32995: // 0160:32995
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a626) != 0x00000000)
        goto loc_32973;
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_329c1() // 0160:329c1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x5cc6c);
    ebx = edx;
    ebx <<= 2;
    eax = memoryAGet32(ds, 0x5cc64);
    ebx += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x21a61e);
    ebx <<= 3;
    if (!edx)
        goto loc_32a15;
    ecx = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 20;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_32a15;
loc_32a0b: // 0160:32a0b
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32a15: // 0160:32a15
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a622) == 0x00000000)
        goto loc_32a4a;
    edi = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 30;
    if ((int32_t)eax > (int32_t)edi)
        goto loc_32a0b;
loc_32a4a: // 0160:32a4a
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 2205266) != 0x00000000)
        goto loc_32a8a;
    if (memoryAGet32(ds, eax + 2205226) == 0x00000000)
        goto loc_32a8a;
    ecx = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 50;
    if ((int32_t)eax > (int32_t)ecx)
        goto loc_32a0b;
loc_32a8a: // 0160:32a8a
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a626) == 0x00000000)
        goto loc_32ac3;
    edi = memoryAGet32(ds, 0x239fb4);
    ebx += 0x00000046;
    if ((int32_t)ebx > (int32_t)edi)
        goto loc_32a0b;
loc_32ac3: // 0160:32ac3
    eax = 0;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_32aca() // 0160:32aca +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    edx = memoryAGet32(ds, 0x5cc6c);
    ebx = edx;
    ebx <<= 2;
    eax = memoryAGet32(ds, 0x5cc64);
    ebx += edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    edx = memoryAGet32(ds, eax * 4 + 0x21a61e);
    ebx <<= 3;
    if (!edx)
        goto loc_32b42;
    ecx = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 20;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_32b42;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000019;
    sub_30e53();
    if (!eax)
        goto loc_32c73;
    bl = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x222f71, bl);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32b42: // 0160:32b42
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a622) == 0x00000000)
        goto loc_32ba5;
    edi = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 30;
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_32ba5;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000022;
    sub_30e53();
    if (!eax)
        goto loc_32c73;
    dh = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x222f71, dh);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32ba5: // 0160:32ba5
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    if (memoryAGet32(ds, eax + 2205266) != 0x00000000)
        goto loc_32c13;
    if (memoryAGet32(ds, eax + 2205226) == 0x00000000)
        goto loc_32c13;
    ecx = memoryAGet32(ds, 0x239fb4);
    eax = ebx + 50;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_32c13;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x00000033;
    sub_30e53();
    if (!eax)
        goto loc_32c73;
    dl = 0x01;
    eax = 0x00000001;
    memoryASet(ds, 0x222f71, dl);
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32c13: // 0160:32c13
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a626) == 0x00000000)
        goto loc_32c71;
    edi = memoryAGet32(ds, 0x239fb4);
    ebx += 0x00000046;
    if ((int32_t)ebx <= (int32_t)edi)
        goto loc_32c71;
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000000b;
    sub_30e53();
    if (!eax)
        goto loc_32c73;
    memoryASet(ds, 0x222f71, 0x01);
    eax = 0x00000001;
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_32c71: // 0160:32c71
    eax = 0;
loc_32c73: // 0160:32c73
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_32c78() // 0160:32c78 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    sub_32948();
    if (!eax)
        goto loc_32fd6;
    ebx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = memoryAGet32(ds, 0x21acc4);
    esi = eax;
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebp = 0xffffffff;
    cl = memoryAGet(ds, 0x5cc64);
    memoryASet32(ds, 0x239fb4, ebp);
    memoryASet32(ds, 0x239fb8, edi);
    memoryASet32(ds, esp + 12, eax);
    eax = 0x00000001;
    memoryASet32(ds, 0x239fbc, edi);
    eax <<= cl;
    ebx = 0x00000008;
    eax ^= 0x0000ffff;
    memoryASet32(ds, 0x239fa4, ebx);
    memoryASet16(ds, 0x21ac52, ax);
    eax = 0x00000001;
    memoryASet32(ds, 0x239fac, ebx);
    memoryASet32(ds, esp + 16, eax);
    ebp = 0;
loc_32d2c: // 0160:32d2c
    if (ebp == memoryAGet32(ds, esp + 16))
        goto loc_32f87;
    if ((int32_t)edi <= 0)
        goto loc_32f87;
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_32f87;
    if ((int32_t)esi >= (int32_t)0x0000017a)
        goto loc_32f87;
    edx = esi + -8;
    eax = edi;
    sub_30868();
    if ((int32_t)eax <= (int32_t)0x00000400)
        goto loc_32f87;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 12))
        goto loc_32f87;
    sub_30d96();
    if (memoryAGet32(ds, esp + 16) != 0x00000001)
        goto loc_32dd3;
    ebx = 0x00000040;
    edx = esi;
    eax = edi;
    sub_30ae4();
    if (!eax)
        goto loc_32dd3;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x239fbc, edi);
    edx = -edx;
    memoryASet32(ds, 0x239fb4, eax);
    memoryASet32(ds, esp, edx);
    edx = memoryAGet32(ds, 0x5cc6c);
    eax = ebp;
    edx <<= 3;
    ebx = memoryAGet32(ds, esp);
    sub_30c85();
    eax = (int32_t)eax * (int32_t)ebx;
    ecx = memoryAGet32(ds, 0x239fbc);
    ecx += eax;
    eax = 0x00000002;
    memoryASet32(ds, 0x239fbc, ecx);
    memoryASet32(ds, esp + 16, eax);
loc_32dd3: // 0160:32dd3
    edx = memoryAGet32(ds, esp);
    edi += edx;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 8, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_32df2: // 0160:32df2
    if ((int32_t)esi <= 0)
        goto loc_32e40;
    if (edi >= 0x000003c0)
        goto loc_32e40;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    ax = memoryAGet16(ds, ecx + eax + 742608);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_32e47;
loc_32e40: // 0160:32e40
    eax = 0x00000001;
    goto loc_32e49;
loc_32e47: // 0160:32e47
    eax = ebp;
loc_32e49: // 0160:32e49
    if (!eax)
        goto loc_32e5e;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_32e5e;
    ebx += 0x000003c0;
    esi++;
    goto loc_32df2;
loc_32e5e: // 0160:32e5e
    ebx = memoryAGet32(ds, esp + 8);
    eax = esi;
    eax -= ebx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_32e6f;
    memoryASet32(ds, esp + 16, ebp);
loc_32e6f: // 0160:32e6f
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_32e89: // 0160:32e89
    if ((int32_t)esi <= 0)
        goto loc_32ee0;
    if (edi >= 0x000003c0)
        goto loc_32ee0;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = 0;
    al = memoryAGet(ds, ebx + 1643120);
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_32ee0;
    if ((int32_t)esi <= 0)
        goto loc_32ee0;
    ebx -= 0x000003c0;
    esi--;
    goto loc_32e89;
loc_32ee0: // 0160:32ee0
    eax = memoryAGet32(ds, esp + 4);
    eax -= esi;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_32eef;
    memoryASet32(ds, esp + 16, ebp);
loc_32eef: // 0160:32eef
    ebx = esi + -8;
    if ((int32_t)ebx <= 0)
        goto loc_32f55;
    if (edi >= 0x000003c0)
        goto loc_32f55;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_32f55;
    memoryASet32(ds, esp + 16, ebp);
loc_32f55: // 0160:32f55
    ecx = memoryAGet32(ds, esp);
    ebx = 0x0023a044;
    edx = esi;
    push32(ecx);
    eax = edi;
    ecx = 0x0023a040;
    sub_114fb();
    if ((int32_t)eax <= (int32_t)0xfffe0000)
        goto loc_32f7a;
    if ((int32_t)eax <= (int32_t)0x00020000)
        goto loc_32f7e;
loc_32f7a: // 0160:32f7a
    memoryASet32(ds, esp + 16, ebp);
loc_32f7e: // 0160:32f7e
    memoryASet32(ds, esp + 12, memoryAGet32(ds, esp + 12) - 1);
    goto loc_32d2c;
loc_32f87: // 0160:32f87
    edx = 0x0000ffff;
    ecx = memoryAGet32(ds, 0x239fb4);
    memoryASet16(ds, 0x21ac52, dx);
    if ((int32_t)ecx < 0)
        goto loc_32fd4;
    eax = memoryAGet32(ds, 0x239fbc);
    eax -= edi;
    memoryASet32(ds, 0x239fb0, edi);
    if ((int32_t)eax >= 0)
        goto loc_32fb0;
    eax = -eax;
loc_32fb0: // 0160:32fb0
    edx = memoryAGet32(ds, 0x5cc6c);
    ebx = 0x00000040;
    edx <<= 4;
    ebx -= edx;
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_32fd4;
    sub_329c1();
    if (!eax)
        goto loc_32fd4;
    eax = 0x00000001;
    goto loc_32fd6;
loc_32fd4: // 0160:32fd4
    eax = 0;
loc_32fd6: // 0160:32fd6
    esp += 0x00000014;
    goto loc_3380c;
    // gap 2094 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_32fde() // 0160:32fde +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ebx = eax;
    ecx = edx;
    edx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    edi = memoryAGet32(ds, 0x239fa4);
    if ((int32_t)edi > 0)
        goto loc_33061;
    if (memoryAGet32(ds, edx + 2201994) != 0x00000000)
        goto loc_3304f;
    if (memoryAGet32(ds, edx + 2201950) != 0x00000000)
        goto loc_3304f;
    if (memoryAGet32(ds, edx + 2201954) != 0x00000000)
        goto loc_3304f;
    if (memoryAGet32(ds, edx + 2201974) != 0x00000000)
        goto loc_3304f;
    eax = memoryAGet32(ds, 0x239fac);
    edx = eax + -1;
    memoryASet32(ds, 0x239fac, edx);
    if ((int32_t)eax > 0)
        goto loc_330e0;
    edi = 0x00000008;
    eax = 0x00000001;
    memoryASet32(ds, 0x239fa4, edi);
    memoryASet32(ds, 0x239fac, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_3304f: // 0160:3304f
    esi = 0x00000008;
    eax = 0;
    memoryASet32(ds, 0x239fac, esi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_33061: // 0160:33061
    eax = memoryAGet32(ds, edx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi + -1;
    if ((int32_t)ecx <= 0)
        goto loc_330ac;
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, 0x239fb8))
        goto loc_3308b;
    memoryASet32(ds, 0x239fa4, edx);
    goto loc_33095;
loc_3308b: // 0160:3308b
    memoryASet32(ds, 0x239fa4, 0x00000008);
loc_33095: // 0160:33095
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_330a2;
    memoryASet(ds, 0x222f85, 0x01);
    goto loc_330db;
loc_330a2: // 0160:330a2
    edi = 0;
    memoryASet32(ds, 0x239fa4, edi);
    goto loc_330db;
loc_330ac: // 0160:330ac
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x239fb8))
        goto loc_330bc;
    memoryASet32(ds, 0x239fa4, edx);
    goto loc_330c6;
loc_330bc: // 0160:330bc
    memoryASet32(ds, 0x239fa4, 0x00000008);
loc_330c6: // 0160:330c6
    if ((int32_t)eax <= (int32_t)ebx)
        goto loc_330d3;
    memoryASet(ds, 0x222f83, 0x01);
    goto loc_330db;
loc_330d3: // 0160:330d3
    ebx = 0;
    memoryASet32(ds, 0x239fa4, ebx);
loc_330db: // 0160:330db
    memoryASet32(ds, 0x239fb8, eax);
loc_330e0: // 0160:330e0
    eax = 0;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_330e7() // 0160:330e7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000002c;
    push32(eax);
    esi = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    ebx = memoryAGet32(ds, 0x5cc8c);
    edi = memoryAGet32(ds, esi + 2201958);
    esi = memoryAGet32(ds, esi + 2201962);
    if (ebx)
        goto loc_33143;
    if ((int32_t)eax >= 0)
        goto loc_33143;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f94, eax);
    memoryASet32(ds, 0x239f8c, eax);
    eax = 0x00000008;
    memoryASet32(ds, 0x239f90, ebx);
    memoryASet32(ds, 0x239f98, eax);
    memoryASet32(ds, 0x239f9c, eax);
loc_33143: // 0160:33143
    edx = memoryAGet32(ds, 0x21acc4);
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = memoryAGet32(ds, 0x5cc8c);
    memoryASet32(ds, esp + 24, eax);
    if (!ebx)
        goto loc_33182;
    ecx = 0x00000400;
    edi = memoryAGet32(ds, 0x5cc84);
    esi = memoryAGet32(ds, 0x5cc88);
    memoryASet32(ds, esp + 24, ecx);
    goto loc_3318e;
loc_33182: // 0160:33182
    memoryASet32(ds, 0x5cc84, edi);
    memoryASet32(ds, 0x5cc88, esi);
loc_3318e: // 0160:3318e
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, edi);
    edi = eax;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 40, esi);
    esi = eax;
    eax = edi;
    ebp = memoryAGet32(ds, esp + 44);
    eax <<= 9;
    ebp -= eax;
    eax = esi;
    edx = memoryAGet32(ds, esp + 40);
    eax <<= 9;
    cl = memoryAGet(ds, 0x5cc64);
    edx -= eax;
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, esp + 44, ebp);
    eax ^= 0x0000ffff;
    ebp = memoryAGet32(ds, esp);
    memoryASet16(ds, 0x21ac52, ax);
    eax = ebp * 0x000001e6;
    ebx = 0;
    memoryASet32(ds, esp + 28, ebx);
    memoryASet32(ds, esp + 40, edx);
    memoryASet32(ds, esp + 8, eax);
    eax = ebp;
    ecx = 0x00000001;
    eax <<= 4;
    memoryASet32(ds, esp + 36, ecx);
    memoryASet32(ds, esp + 4, eax);
    ebp = 0;
loc_33215: // 0160:33215
    if (ebp == memoryAGet32(ds, esp + 36))
        goto loc_33774;
    if ((int32_t)edi <= 0)
        goto loc_33774;
    if ((int32_t)edi >= (int32_t)0x000003c0)
        goto loc_33774;
    if ((int32_t)esi >= (int32_t)0x0000017a)
        goto loc_33774;
    edx = esi + -8;
    eax = edi;
    sub_30868();
    if ((int32_t)eax <= (int32_t)0x00000400)
        goto loc_33774;
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp + 24))
        goto loc_33774;
    ebx = memoryAGet32(ds, esp + 28);
    sub_30d96();
    if (ebp != ebx)
        goto loc_334df;
    if (ebx != memoryAGet32(ds, 0x5cc8c))
        goto loc_332f0;
    edx = esi;
    eax = edi;
    sub_308cc();
    if ((int32_t)eax >= (int32_t)0x00000040)
        goto loc_3328f;
    memoryASet32(ds, 0x239f90, ebp);
loc_3328f: // 0160:3328f
    edx = esi;
    ebx = 0;
    eax = edi;
    bx = memoryAGet16(ds, 0x21ac52);
    sub_30c0e();
    ecx = eax;
    ebx = eax;
    edx = esi + -8;
    eax = edi;
    sub_31095();
    if (!eax)
        goto loc_332b9;
    ebx = ecx + 268435456;
loc_332b9: // 0160:332b9
    edx = esi + -8;
    eax = edi;
    sub_310f2();
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_332ce;
    ebx += 0x01000000;
loc_332ce: // 0160:332ce
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, 0x239f90))
        goto loc_332f0;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, 0x239f8c, edi);
    memoryASet32(ds, 0x239f88, esi);
    memoryASet32(ds, 0x239f90, ebx);
    memoryASet32(ds, 0x239f84, eax);
loc_332f0: // 0160:332f0
    ebx = memoryAGet32(ds, esp);
    edi += ebx;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 20, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_3330f: // 0160:3330f
    if ((int32_t)esi <= 0)
        goto loc_3335b;
    if (edi >= 0x000003c0)
        goto loc_3335b;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, ebx + 1643120);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_33362;
loc_3335b: // 0160:3335b
    eax = 0x00000001;
    goto loc_33364;
loc_33362: // 0160:33362
    eax = ebp;
loc_33364: // 0160:33364
    if (!eax)
        goto loc_33379;
    if ((int32_t)esi >= (int32_t)0x00000190)
        goto loc_33379;
    ebx += 0x000003c0;
    esi++;
    goto loc_3330f;
loc_33379: // 0160:33379
    ecx = memoryAGet32(ds, esp + 20);
    eax = esi;
    eax -= ecx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_3338a;
    memoryASet32(ds, esp + 36, ebp);
loc_3338a: // 0160:3338a
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, esp + 16, esi);
    ebx = esi * 0x000003c0;
    ebx += edi;
    ecx = eax + eax;
loc_333a4: // 0160:333a4
    if ((int32_t)esi <= 0)
        goto loc_333fd;
    if (edi >= 0x000003c0)
        goto loc_333fd;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax = eax * 0x000003c0;
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    eax &= edx;
    edx = 0;
    dl = memoryAGet(ds, ebx + 1643120);
    dl = edx != 0x00000080;
    edx &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_333fd;
    if ((int32_t)esi <= 0)
        goto loc_333fd;
    ebx -= 0x000003c0;
    esi--;
    goto loc_333a4;
loc_333fd: // 0160:333fd
    eax = memoryAGet32(ds, esp + 16);
    eax -= esi;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_3340c;
    memoryASet32(ds, esp + 36, ebp);
loc_3340c: // 0160:3340c
    ebx = esi + -8;
    if ((int32_t)ebx <= 0)
        goto loc_33472;
    if (edi >= 0x000003c0)
        goto loc_33472;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_33472;
    memoryASet32(ds, esp + 36, ebp);
loc_33472: // 0160:33472
    if (ebp == memoryAGet32(ds, esp + 36))
        goto loc_3369d;
    edx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    ecx = 0x0023a040;
    ebx = 0x0023a044;
    push32(edx);
    eax += edi;
    edx = esi;
    sub_114fb();
    if ((int32_t)eax > (int32_t)0xfffe0000)
        goto loc_3369d;
    eax = edi;
    ebx = memoryAGet32(ds, esp + 44);
    eax <<= 9;
    ecx = memoryAGet32(ds, esp + 40);
    ebx += eax;
    eax = esi;
    edx = 0x00000001;
    eax <<= 9;
    memoryASet32(ds, esp + 28, edx);
    ecx += eax;
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, esp + 44, ebx);
    memoryASet32(ds, esp + 12, eax);
    eax = 0xfffffc01;
    memoryASet32(ds, esp + 40, ecx);
    memoryASet32(ds, esp + 32, eax);
    goto loc_3369d;
loc_334df: // 0160:334df
    eax = memoryAGet32(ds, esp + 32);
    ecx = memoryAGet32(ds, esp + 40);
    esi = memoryAGet32(ds, esp + 32);
    ecx += eax;
    eax = memoryAGet32(ds, 0x21ad44);
    edi = memoryAGet32(ds, esp + 44);
    esi += eax;
    eax = memoryAGet32(ds, esp + 12);
    edi += eax;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, edi);
    edi = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 32, esi);
    esi = eax;
    ebx = eax + 1;
    memoryASet32(ds, esp + 40, ecx);
    if ((int32_t)ebx <= 0)
        goto loc_335c6;
    if (edi >= 0x000003c0)
        goto loc_335c6;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_335c6;
    edx = edi;
    eax = edi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, esp + 44, memoryAGet32(ds, esp + 44) - eax);
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = memoryAGet32(ds, esp + 40);
    ebx -= eax;
    memoryASet32(ds, esp + 28, ebp);
    memoryASet32(ds, esp + 40, ebx);
loc_335c6: // 0160:335c6
    if ((int32_t)memoryAGet32(ds, esp + 32) > (int32_t)0x00000600)
        goto loc_33699;
    ebx = esi + -16;
    if ((int32_t)ebx <= 0)
        goto loc_33636;
    if (edi >= 0x000003c0)
        goto loc_33636;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = 0;
    dx = memoryAGet16(ds, ecx + eax * 2 + 0xb54d0);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (eax)
        goto loc_33699;
loc_33636: // 0160:33636
    if ((int32_t)esi <= 0)
        goto loc_3369d;
    if (edi >= 0x000003c0)
        goto loc_3369d;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax * 0x000003c0;
    edx = edi;
    edx = sar32(edx, 0x1f);
    eax = edi;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ax = memoryAGet16(ds, ebx + eax * 2 + 0xb54d0);
    edx = 0;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, 0x21ac52);
    edx &= eax;
    eax = esi * 0x000003c0;
    al = memoryAGet(ds, edi + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= edx;
    if (!eax)
        goto loc_3369d;
loc_33699: // 0160:33699
    memoryASet32(ds, esp + 36, ebp);
loc_3369d: // 0160:3369d
    if (ebp != memoryAGet32(ds, esp + 28))
        goto loc_336cc;
    ecx = memoryAGet32(ds, esp);
    ebx = 0x0023a044;
    edx = esi;
    push32(ecx);
    eax = edi;
    ecx = 0x0023a040;
    sub_114fb();
    if ((int32_t)eax <= (int32_t)0xfffe0000)
        goto loc_336c8;
    if ((int32_t)eax <= (int32_t)0x00100000)
        goto loc_336cc;
loc_336c8: // 0160:336c8
    memoryASet32(ds, esp + 36, ebp);
loc_336cc: // 0160:336cc
    eax = memoryAGet32(ds, esp + 24);
    eax--;
    edx = memoryAGet32(ds, 0x5cc8c);
    memoryASet32(ds, esp + 24, eax);
    if (ebp == edx)
        goto loc_33215;
    eax = memoryAGet32(ds, 0x21af1c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = edi;
    ebx -= eax;
    eax = memoryAGet32(ds, 0x21af20);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = esi;
    ecx = memoryAGet32(ds, esp);
    edx -= eax;
    eax = 0x000000ff;
    if ((int32_t)ebp <= (int32_t)ecx)
        goto loc_33728;
    if ((int32_t)edi > (int32_t)memoryAGet32(ds, 0x239f8c))
        goto loc_33728;
    eax = 0x000000fe;
loc_33728: // 0160:33728
    if ((int32_t)ebp >= (int32_t)memoryAGet32(ds, esp))
        goto loc_3373a;
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x239f8c))
        goto loc_3373a;
    eax = 0x000000fe;
loc_3373a: // 0160:3373a
    if ((int32_t)ebx < 0)
        goto loc_33215;
    if ((int32_t)ebx >= (int32_t)0x00000140)
        goto loc_33215;
    if ((int32_t)edx < 0)
        goto loc_33215;
    if ((int32_t)edx >= (int32_t)0x000000a8)
        goto loc_33215;
    edx = edx * 0x00000140;
    memoryASet(ds, edx + ebx + 1060016, al);
    goto loc_33215;
loc_33774: // 0160:33774
    memoryASet16(ds, 0x21ac52, 0xffff);
    esp += 0x00000030;
    goto loc_3380c;
    // gap 135 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_337ae() // 0160:337ae +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    if ((int32_t)memoryAGet32(ds, 0x239f98) > (int32_t)0x00000000)
        goto loc_33822;
    if (memoryAGet32(ds, ebx + 2201994) != 0x00000000)
        goto loc_33813;
    if (memoryAGet32(ds, ebx + 2201950) != 0x00000000)
        goto loc_33813;
    if (memoryAGet32(ds, ebx + 2201954) != 0x00000000)
        goto loc_33813;
    if (memoryAGet32(ds, ebx + 2201974) != 0x00000000)
        goto loc_33813;
    eax = memoryAGet32(ds, 0x239f9c);
    edx = eax + -1;
    memoryASet32(ds, 0x239f9c, edx);
    if ((int32_t)eax > 0)
        goto loc_33a1a;
    eax = 0x00000001;
loc_33809: // 0160:33809
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_33813: // 0160:33813
    ebp = 0x00000008;
    eax = 0;
    memoryASet32(ds, 0x239f9c, ebp);
    goto loc_33809;
loc_33822: // 0160:33822
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = memoryAGet32(ds, ebx + 2201994);
    edi = eax;
    if (!ebp)
        goto loc_3388d;
    if ((int32_t)memoryAGet32(ds, 0x239f84) <= (int32_t)0x00000000)
        goto loc_33871;
    if ((int32_t)memoryAGet32(ds, ebx + 2201950) >= (int32_t)0x00000000)
        goto loc_33882;
    eax = 0;
    memoryASet32(ds, 0x239f98, eax);
    goto loc_33882;
loc_33871: // 0160:33871
    if ((int32_t)memoryAGet32(ds, ebx + 2201950) <= (int32_t)0x00000000)
        goto loc_33882;
    edi ^= eax;
    memoryASet32(ds, 0x239f98, edi);
loc_33882: // 0160:33882
    memoryASet32(ds, 0x239f94, esi);
    goto loc_33a1a;
loc_3388d: // 0160:3388d
    ecx = eax + 1;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebp = eax;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = ecx;
    ebx <<= 4;
    ebx -= ecx;
    ebx <<= 6;
    memoryASet32(ds, esp, ebx);
    ebx = eax;
    edx = ebp;
    ebp = ebx;
    ebx <<= 4;
    ebx -= ebp;
    edx += edx;
    ebx <<= 6;
    eax = memoryAGet32(ds, esp);
    ebx += edx;
    edx = memoryAGet32(ds, 0x239f84);
    eax += esi;
    if ((int32_t)edx <= 0)
        goto loc_33988;
    if ((int32_t)esi > (int32_t)memoryAGet32(ds, 0x239f94))
        goto loc_33926;
    if ((int32_t)ecx <= 0)
        goto loc_33930;
    if (esi >= 0x000003c0)
        goto loc_33930;
    ecx = 0;
    cx = memoryAGet16(ds, ebx + 742608);
    ebx = 0;
    bx = memoryAGet16(ds, 0x21ac52);
    al = memoryAGet(ds, eax + 1643120);
    ebx &= ecx;
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= ebx;
    if (!eax)
        goto loc_33930;
    memoryASet32(ds, 0x239f98, memoryAGet32(ds, 0x239f98) - 1);
    goto loc_33930;
loc_33926: // 0160:33926
    memoryASet32(ds, 0x239f98, 0x00000008);
loc_33930: // 0160:33930
    ebp = memoryAGet32(ds, 0x239f8c);
    if ((int32_t)esi >= (int32_t)ebp)
        goto loc_3397c;
    eax = ebp;
    dh = 0x01;
    eax -= esi;
    memoryASet(ds, 0x222f85, dh);
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_33a14;
    push32(0x00000001);
    ecx = 0x0023a040;
    ebx = 0x0023a044;
    eax = esi + 16;
loc_3395e: // 0160:3395e
    edx = edi;
    sub_114fb();
    if ((int32_t)eax > (int32_t)0xfffe0000)
        goto loc_33a14;
    memoryASet(ds, 0x222f54, 0x01);
    goto loc_33a14;
loc_3397c: // 0160:3397c
    eax = 0;
    memoryASet32(ds, 0x239f98, eax);
    goto loc_33a14;
loc_33988: // 0160:33988
    if ((int32_t)esi < (int32_t)memoryAGet32(ds, 0x239f94))
        goto loc_339d4;
    if ((int32_t)ecx <= 0)
        goto loc_339de;
    if (esi >= 0x000003c0)
        goto loc_339de;
    edx = 0;
    dx = memoryAGet16(ds, ebx + 742608);
    ebx = 0;
    bx = memoryAGet16(ds, 0x21ac52);
    al = memoryAGet(ds, eax + 1643120);
    ebx &= edx;
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    ebx |= eax;
    if (!ebx)
        goto loc_339de;
    memoryASet32(ds, 0x239f98, memoryAGet32(ds, 0x239f98) - 1);
    goto loc_339de;
loc_339d4: // 0160:339d4
    memoryASet32(ds, 0x239f98, 0x00000008);
loc_339de: // 0160:339de
    ebx = memoryAGet32(ds, 0x239f8c);
    if ((int32_t)esi <= (int32_t)ebx)
        goto loc_33a0c;
    memoryASet(ds, 0x222f83, 0x01);
    eax = esi;
    eax -= ebx;
    if ((int32_t)eax <= (int32_t)0x00000020)
        goto loc_33a14;
    push32(0xffffffff);
    ecx = 0x0023a040;
    ebx = 0x0023a044;
    eax = esi + -16;
    goto loc_3395e;
loc_33a0c: // 0160:33a0c
    ecx = 0;
    memoryASet32(ds, 0x239f98, ecx);
loc_33a14: // 0160:33a14
    memoryASet32(ds, 0x239f94, esi);
loc_33a1a: // 0160:33a1a
    eax = 0;
    goto loc_33809;
}
void sub_33a21() // 0160:33a21 +long
{
    esp -= 4;
    goto loc_33a21;
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 526 bytes
loc_33a21: // 0160:33a21
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000018;
    edi = esp;
    esi = 0x0003079e;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edx = 0;
    eax = memoryAGet32(ds, 0x5cc64);
    memoryASet32(ds, esp + 20, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    ebx = 0xffffffff;
    ecx = memoryAGet32(ds, eax * 4 + 0x21a62e);
    memoryASet32(ds, esp + 16, ebx);
    if (!ecx)
        goto loc_33c7c;
    esi = 0;
    ecx = 0;
    edi = 0;
loc_33a76: // 0160:33a76
    if (memoryAGet32(ds, ecx + 2201958) == 0x00000000)
        goto loc_33b24;
    edx = esi;
    eax = esi;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (ebx == eax)
        goto loc_33b24;
    eax = memoryAGet32(ds, ecx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebx = eax;
    eax = memoryAGet32(ds, ecx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ebp = eax;
    edx = eax + -8;
    eax = ebx;
    sub_31095();
    if (!eax)
        goto loc_33b24;
    eax = memoryAGet32(ds, 0x5cc6c);
    edx = ebp;
    ebx <<= 9;
    edx <<= 9;
    eax = memoryAGet32(ds, esp + eax*4);
    memoryASet32(ds, esp + 12, ebx);
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    sub_31473();
    if (eax)
        goto loc_33b24;
    eax = memoryAGet32(ds, edi + 2334512);
    edx = memoryAGet32(ds, esp + 20);
    eax &= 0x0000ffff;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_33b24;
    memoryASet32(ds, esp + 20, eax);
    memoryASet32(ds, esp + 16, esi);
loc_33b24: // 0160:33b24
    ecx += 0x000000ac;
    esi++;
    edi += 0x00000004;
    if ((int32_t)esi < (int32_t)0x00000010)
        goto loc_33a76;
    if ((int32_t)memoryAGet32(ds, esp + 20) < (int32_t)0x00000200)
        goto loc_33c7c;
    eax = memoryAGet32(ds, esp + 16) * 0x000000ac;
    edx = memoryAGet32(ds, eax + 2201958);
    edi = 0x00000026;
    memoryASet32(ds, 0x239f7c, edx);
    eax = memoryAGet32(ds, eax + 2201962);
    edx = 0x00239f80;
    memoryASet32(ds, 0x239f80, eax);
    eax = 0x00239f7c;
    memoryASet32(ds, 0x23a088, edi);
    sub_316ca();
    eax = 0x00000032;
    edx = 0x00000001;
    memoryASet32(ds, 0x239f78, eax);
    eax = memoryAGet32(ds, 0x21ad44);
    memoryASet32(ds, 0x23a060, edx);
    memoryASet32(ds, 0x23a050, eax);
    eax = memoryAGet32(ds, 0x239f80);
    edx = memoryAGet32(ds, 0x23a050);
    eax += 0x00005000;
    edx += edx;
    eax = (int32_t)eax * (int32_t)edx;
    ebx = 0xffffb000;
    eax++;
    memoryASet32(ds, 0x23a06c, ebx);
    sub_307c2();
    ecx = memoryAGet32(ds, 0x23a060);
    edx = eax;
    edx -= ecx;
    ebx = memoryAGet32(ds, 0x23a050);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x23a054, eax);
    memoryASet32(ds, 0x23a074, eax);
    eax <<= 9;
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = eax;
    eax = memoryAGet32(ds, 0x239f7c);
    eax += edx;
    esi = 0;
    eax -= 0x00006000;
    memoryASet32(ds, 0x23a04c, esi);
    if ((int32_t)eax >= (int32_t)0x0003c000)
        goto loc_33c24;
    ebp = 0xffffff00;
    memoryASet32(ds, 0x239f7c, eax);
    eax += 0x00006000;
    memoryASet32(ds, 0x23a05c, ebp);
    goto loc_33c42;
loc_33c24: // 0160:33c24
    eax = memoryAGet32(ds, 0x239f7c);
    eax -= edx;
    edi = 0x00000100;
    edx = eax + 24576;
    memoryASet32(ds, 0x23a05c, edi);
    memoryASet32(ds, 0x239f7c, edx);
loc_33c42: // 0160:33c42
    memoryASet32(ds, 0x23a068, eax);
    eax = memoryAGet32(ds, 0x239f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f7c, eax);
    eax = memoryAGet32(ds, 0x239f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f80, eax);
    eax = 0x00000001;
    goto loc_33c7e;
loc_33c7c: // 0160:33c7c
    eax = 0;
loc_33c7e: // 0160:33c7e
    esp += 0x00000018;
    goto loc_3380c;
}
void sub_33c86() // 0160:33c86 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ebx = eax;
    ecx = ebx + -2;
    edi = edx + -2;
    eax = 0;
    ebx = edi;
    edi += 0x00000008;
    goto loc_33d08;
loc_33c9b: // 0160:33c9b
    if ((int32_t)ebx <= 0)
        goto loc_33d04;
    if (ecx >= 0x000003c0)
        goto loc_33d04;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = eax * 0x000003c0;
    edx = ecx;
    edx = sar32(edx, 0x1f);
    eax = ecx;
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    eax += eax;
    eax += esi;
    esi = 0;
    si = memoryAGet16(ds, eax + 742608);
    eax = 0;
    ax = memoryAGet16(ds, 0x21ac52);
    esi &= eax;
    eax = ebx * 0x000003c0;
    al = memoryAGet(ds, ecx + eax + 1643120);
    eax &= 0x000000ff;
    al = eax != 0x00000080;
    eax &= 0x000000ff;
    eax |= esi;
    if (!eax)
        goto loc_33d04;
    eax = 0x00000001;
    goto loc_33d06;
loc_33d04: // 0160:33d04
    eax = 0;
loc_33d06: // 0160:33d06
    ecx++;
    ebx++;
loc_33d08: // 0160:33d08
    if ((int32_t)ebx >= (int32_t)edi)
        goto loc_33d10;
    if (!eax)
        goto loc_33c9b;
loc_33d10: // 0160:33d10
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_33d56() // 0160:33d56 +long
{
    esp -= 4;
    goto loc_33d56;
loc_3377d: // 0160:3377d
    esp += 0x00000030;
    goto loc_3380c;
    // gap 135 bytes
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1347 bytes
loc_33d56: // 0160:33d56
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000002c;
    push32(eax);
    edi = esp + 4;
    esi = 0x000307aa;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    edi = esp + 16;
    esi = 0x000307b6;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edx = eax;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    eax += edx;
    if (memoryAGet32(ds, eax * 4 + 0x21a632) == 0x00000000)
        goto loc_33f79;
    edx = memoryAGet32(ds, 0x5cc6c);
    eax = memoryAGet32(ds, esp + edx * 4 + 0x4);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    esi = 0x00000001;
    cl = memoryAGet(ds, 0x5cc64);
    esi <<= cl;
    ebx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    edi = eax;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    si ^= 0xffff;
    ebx = esi;
    edx = ecx;
    sub_30928();
    if ((int32_t)eax < (int32_t)edi)
        goto loc_33e13;
    if (memoryAGet32(ds, esp) == 0x00000001)
        goto loc_33f79;
loc_33e13: // 0160:33e13
    esi = 0x00000040;
    ebp = 0x0000003e;
    edi = 0;
    eax = 0x00000042;
    memoryASet32(ds, esp + 40, edi);
    edi = 0x00191270;
    memoryASet32(ds, esp + 44, eax);
    edi += esi;
loc_33e33: // 0160:33e33
    sub_30d96();
    ecx = 0x00000030;
    eax = edi + 46080;
loc_33e43: // 0160:33e43
    if (!(memoryAGet32(ds, eax) & 0x80808080))
        goto loc_33e5b;
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_33e5b;
    ecx++;
    eax += 0x000003c0;
    goto loc_33e43;
loc_33e5b: // 0160:33e5b
    if ((int32_t)ecx >= (int32_t)0x0000016e)
        goto loc_33ed6;
    ecx -= 0x00000020;
    if ((int32_t)ecx >= (int32_t)0x00000010)
        goto loc_33e74;
    ecx = 0x00000010;
loc_33e74: // 0160:33e74
    eax = ecx * 0x000003c0;
    if (memoryAGet32(ds, edi + eax) != 0x80808080)
        goto loc_33ed6;
    edx = ecx + -2;
    eax = ebp;
    sub_33c86();
    if (eax)
        goto loc_33ed6;
    ebx = 0x0000ffff;
    edx = ecx;
    eax = esi;
    sub_30928();
    ebx = eax;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ds, esp + 40))
        goto loc_33ed6;
    eax = memoryAGet32(ds, 0x5cc6c);
    eax <<= 2;
    edx = ecx;
    memoryASet32(ds, esp + 28, eax);
    eax = esi;
    sub_30868();
    edx = memoryAGet32(ds, esp + 28);
    if ((int32_t)eax <= (int32_t)memoryAGet32(ds, esp + edx + 16))
        goto loc_33ed6;
    eax = memoryAGet32(ds, esp + 44);
    memoryASet32(ds, esp + 32, ecx);
    memoryASet32(ds, esp + 40, ebx);
    memoryASet32(ds, esp + 36, eax);
loc_33ed6: // 0160:33ed6
    edx = memoryAGet32(ds, esp + 44);
    edi += 0x00000004;
    ebp += 0x00000004;
    edx += 0x00000004;
    esi += 0x00000004;
    memoryASet32(ds, esp + 44, edx);
    if ((int32_t)esi < (int32_t)0x00000380)
        goto loc_33e33;
    edx = memoryAGet32(ds, 0x5cc6c);
    eax = memoryAGet32(ds, esp + edx * 4 + 0x4);
    edx = eax;
    ebx = memoryAGet32(ds, esp);
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, esp + 40))
        goto loc_33f79;
    eax = memoryAGet32(ds, esp + 36);
    eax -= 0x00000004;
    eax <<= 9;
    memoryASet32(ds, 0x239f7c, eax);
    eax = memoryAGet32(ds, esp + 32);
    eax -= 0x00000002;
    eax <<= 9;
    memoryASet32(ds, 0x239f80, eax);
    eax = memoryAGet32(ds, 0x239f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f7c, eax);
    eax = memoryAGet32(ds, 0x239f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    esi = 0x00000016;
    edi = 0x00000032;
    ecx = 0x00000001;
    memoryASet32(ds, 0x23a088, esi);
    memoryASet32(ds, 0x239f78, edi);
    memoryASet32(ds, 0x239f80, eax);
    goto loc_33f7b;
loc_33f79: // 0160:33f79
    ecx = 0;
loc_33f7b: // 0160:33f7b
    eax = ecx;
    goto loc_3377d;
}
void sub_33f82() // 0160:33f82 +long
{
    esp -= 4;
    goto loc_33f82;
loc_33804: // 0160:33804
    eax = 0x00000001;
loc_33809: // 0160:33809
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 519 bytes
loc_33a1a: // 0160:33a1a
    eax = 0;
    goto loc_33809;
    // gap 1377 bytes
loc_33f82: // 0160:33f82
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x5cc64);
    memoryASet32(ds, esp, edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    eax <<= 2;
    eax += ebx;
    ebx = memoryAGet32(ds, eax * 4 + 0x21a60a);
    ebp = 0;
    if (!ebx)
        goto loc_33a1a;
    ebx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    ecx = eax + -5;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = ecx;
    sub_31095();
    if (!eax)
        goto loc_33809;
    ecx = 0;
    ebx = 0;
    esi = 0;
loc_3400a: // 0160:3400a
    if (memoryAGet32(ds, ebx + 2201958) == 0x00000000)
        goto loc_3407d;
    edx = ecx;
    eax = ecx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    edi = eax;
    eax = memoryAGet32(ds, 0x5cc64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    if (edi == eax)
        goto loc_3407d;
    eax = memoryAGet32(ds, ebx + 2201962);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edi = eax + -16;
    eax = memoryAGet32(ds, ebx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    edx = edi;
    sub_31095();
    if (!eax)
        goto loc_3407d;
    edi = memoryAGet32(ds, esi + 2334512);
    if ((int32_t)ebp > (int32_t)edi)
        goto loc_3407d;
    memoryASet32(ds, esp, ecx);
    ebp = edi;
loc_3407d: // 0160:3407d
    ebx += 0x000000ac;
    ecx++;
    esi += 0x00000004;
    if ((int32_t)ecx < (int32_t)0x00000010)
        goto loc_3400a;
    esi = memoryAGet32(ds, esp);
    if ((int32_t)esi < 0)
        goto loc_33a1a;
    eax = esi * 0x000000ac;
    edi = 0x0000002b;
    edx = 0x00239f80;
    ebx = memoryAGet32(ds, eax + 2201958);
    eax = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, 0x23a088, edi);
    memoryASet32(ds, 0x239f80, eax);
    eax = 0x00239f7c;
    memoryASet32(ds, 0x239f7c, ebx);
    sub_316ca();
    memoryASet32(ds, 0x239f78, 0x00000032);
    eax = memoryAGet32(ds, 0x239f7c);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f7c, eax);
    eax = memoryAGet32(ds, 0x239f80);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    memoryASet32(ds, 0x239f80, eax);
    goto loc_33804;
}
void sub_3410f() // 0160:3410f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = memoryAGet32(ds, 0x23a088);
    sub_30e53();
    if (!eax)
        goto loc_34188;
    eax = memoryAGet32(ds, 0x239f7c);
    eax <<= 2;
    memoryASet32(ds, 0x21acd4, eax);
    eax = memoryAGet32(ds, 0x239f80);
    eax <<= 2;
    memoryASet32(ds, 0x21acd8, eax);
    eax = memoryAGet32(ds, 0x217ab0);
    memoryASet32(ds, 0x217ac8, eax);
    eax = memoryAGet32(ds, 0x217ab4);
    edx = memoryAGet32(ds, 0x239f78);
    memoryASet32(ds, 0x217ac4, eax);
    if (!edx)
        goto loc_3417b;
    esi = edx + -1;
    ecx = 0;
    eax = 0;
    memoryASet32(ds, 0x217ac0, ecx);
    memoryASet32(ds, 0x239f78, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_3417b: // 0160:3417b
    ebx = 0x00000001;
    memoryASet32(ds, 0x217ac0, ebx);
    eax = ebx;
loc_34188: // 0160:34188
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34246() // 0160:34246 +long
{
    esp -= 4;
    goto loc_34246;
loc_3380c: // 0160:3380c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 2611 bytes
loc_34246: // 0160:34246
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    eax = memoryAGet32(ds, 0x5cc70);
    eax--;
    if (eax > 0x000003bf)
        goto loc_3380c;
    ecx = 0x0000001f;
    edi = 0x0003418e;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasw_inv<ES_EDI>(ax);
    edx = memoryAGet32(ds, 0x5cc64) * 0x000000ac;
    switch (ecx)
    {
        case 0: goto loc_3380c;
        case 1: goto loc_3427c;
        case 2: goto loc_342a8;
        case 3: goto loc_342d4;
        case 4: goto loc_342ee;
        case 5: goto loc_34308;
        case 6: goto loc_34361;
        case 7: goto loc_343cb;
        case 8: goto loc_343f2;
        case 9: goto loc_34438;
        case 10: goto loc_3444d;
        case 11: goto loc_34462;
        case 12: goto loc_34544;
        case 13: goto loc_34558;
        case 14: goto loc_3456c;
        case 15: goto loc_34588;
        case 16: goto loc_345b1;
        case 17: goto loc_345cb;
        case 18: goto loc_345df;
        case 19: goto loc_34634;
        case 20: goto loc_34676;
        case 21: goto loc_3469b;
        case 22: goto loc_346c3;
        case 23: goto loc_346df;
        case 24: goto loc_34704;
        case 25: goto loc_34713;
        case 26: goto loc_34739;
        case 27: goto loc_3477c;
        case 28: goto loc_3479a;
        case 29: goto loc_347c0;
        case 30: goto loc_34803;
        default:
            printf("unhandled: %x\n", ecx);
            stop("ind 0160:34274");
    }
loc_3427c: // 0160:3427c
    eax = 0xffffffff;
    sub_32c78();
    if (!eax)
        goto loc_34299;
    memoryASet32(ds, 0x5cc70, 0x00000384);
    goto loc_3380c;
loc_34299: // 0160:34299
    memoryASet32(ds, 0x5cc70, 0x00000002);
    goto loc_3380c;
loc_342a8: // 0160:342a8
    eax = 0x00000001;
    sub_32c78();
    if (!eax)
        goto loc_342c5;
    memoryASet32(ds, 0x5cc70, 0x000003b6);
    goto loc_3380c;
loc_342c5: // 0160:342c5
    memoryASet32(ds, 0x5cc70, 0x00000005);
    goto loc_3380c;
loc_342d4: // 0160:342d4
    eax = 0xffffffff;
    ebx = 0x00000007;
    sub_330e7();
loc_342e3: // 0160:342e3
    memoryASet32(ds, 0x5cc70, ebx);
    goto loc_3380c;
loc_342ee: // 0160:342ee
    eax = 0x00000001;
    edx = 0x00000008;
    sub_330e7();
loc_342fd: // 0160:342fd
    memoryASet32(ds, 0x5cc70, edx);
    goto loc_3380c;
loc_34308: // 0160:34308
    sub_337ae();
    if (!eax)
        goto loc_3380c;
    edi = memoryAGet32(ds, 0x5cc64);
    eax = edi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000200;
    memoryASet32(ds, 0x23a068, eax);
    eax = edi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201962);
    eax -= 0x00000c00;
    esi = 0x00000008;
    memoryASet32(ds, 0x23a06c, eax);
    eax = 0x00000009;
    memoryASet32(ds, 0x5cc80, esi);
loc_34357: // 0160:34357
    memoryASet32(ds, 0x5cc70, eax);
    goto loc_3380c;
loc_34361: // 0160:34361
    eax = 0x00000001;
    sub_33d56();
    if (!eax)
        goto loc_343bc;
    edx = memoryAGet32(ds, 0x5cc64);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000200;
    memoryASet32(ds, 0x23a068, eax);
    eax = edx * 0x000000ac;
    ebp = 0x00000008;
    ecx = 0x0000006e;
    eax = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, 0x5cc80, ebp);
loc_343a7: // 0160:343a7
    eax -= 0x00000c00;
    memoryASet32(ds, 0x5cc70, ecx);
loc_343b2: // 0160:343b2
    memoryASet32(ds, 0x23a06c, eax);
    goto loc_3380c;
loc_343bc: // 0160:343bc
    memoryASet32(ds, 0x5cc70, 0x0000000a);
    goto loc_3380c;
loc_343cb: // 0160:343cb
    sub_33a21();
    if (!eax)
        goto loc_343e3;
    memoryASet32(ds, 0x5cc70, 0x0000006e);
    goto loc_3380c;
loc_343e3: // 0160:343e3
    memoryASet32(ds, 0x5cc70, 0x0000000b);
    goto loc_3380c;
loc_343f2: // 0160:343f2
    eax = 0;
    sub_3260d();
    if (!eax)
        goto loc_34429;
    sub_3274f();
    if (memoryAGet32(ds, 0x23a088) == 0x00000006)
        goto loc_3441a;
    memoryASet32(ds, 0x5cc70, 0x00000064);
    goto loc_3380c;
loc_3441a: // 0160:3441a
    memoryASet32(ds, 0x5cc70, 0x000000c8);
    goto loc_3380c;
loc_34429: // 0160:34429
    memoryASet32(ds, 0x5cc70, 0x0000005a);
    goto loc_3380c;
loc_34438: // 0160:34438
    edi = 0x0000005b;
    sub_3251a();
loc_34442: // 0160:34442
    memoryASet32(ds, 0x5cc70, edi);
    goto loc_3380c;
loc_3444d: // 0160:3444d
    esi = 0x0000005c;
    sub_32581();
loc_34457: // 0160:34457
    memoryASet32(ds, 0x5cc70, esi);
    goto loc_3380c;
loc_34462: // 0160:34462
    if ((int32_t)memoryAGet32(ds, 0x23a00c) <= (int32_t)0x00000400)
        goto loc_3451d;
    if ((int32_t)memoryAGet32(ds, 0x239ff0) <= (int32_t)0x00000400)
        goto loc_3451d;
    sub_33f82();
    if (!eax)
        goto loc_344c7;
    eax = 0x00000008;
    edx = memoryAGet32(ds, 0x5cc64);
    memoryASet32(ds, 0x5cc80, eax);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000200;
    memoryASet32(ds, 0x23a068, eax);
    eax = edx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201962);
    ecx = 0x000002bc;
    goto loc_343a7;
loc_344c7: // 0160:344c7
    eax = 0x00000002;
    sub_33d56();
    if (!eax)
        goto loc_3451d;
    esi = memoryAGet32(ds, 0x5cc64);
    eax = esi * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000200;
    memoryASet32(ds, 0x23a068, eax);
    eax = esi * 0x000000ac;
    ecx = 0x00000008;
    ebp = 0x0000006e;
    eax = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, 0x5cc80, ecx);
    eax -= 0x00000c00;
    memoryASet32(ds, 0x5cc70, ebp);
    goto loc_343b2;
loc_3451d: // 0160:3451d
    sub_327fa();
    if (!eax)
        goto loc_34535;
    ebx = 0x00000064;
    sub_3274f();
    goto loc_342e3;
loc_34535: // 0160:34535
    memoryASet32(ds, 0x5cc70, 0x00000320);
    goto loc_3380c;
loc_34544: // 0160:34544
    sub_324b9();
    if (!eax)
        goto loc_3380c;
    edi = 0;
    goto loc_34442;
loc_34558: // 0160:34558
    sub_3410f();
    if (!eax)
        goto loc_3380c;
    esi = 0;
    goto loc_34457;
loc_3456c: // 0160:3456c
    sub_324b9();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x000000cd);
    goto loc_3380c;
loc_34588: // 0160:34588
    if (memoryAGet32(ds, 0x21aefc) != 0x00000000)
        goto loc_3380c;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x000000d2);
    goto loc_3380c;
loc_345b1: // 0160:345b1
    eax = 0xffffffff;
    ebp = 0x000000dc;
    sub_330e7();
    memoryASet32(ds, 0x5cc70, ebp);
    goto loc_3380c;
loc_345cb: // 0160:345cb
    eax = 0x00000001;
    edi = 0x000000e6;
    sub_330e7();
    goto loc_34442;
loc_345df: // 0160:345df
    sub_337ae();
    if (!eax)
        goto loc_3380c;
    ebx = memoryAGet32(ds, 0x5cc64);
    eax = ebx * 0x000000ac;
    eax = memoryAGet32(ds, eax + 2201958);
    eax -= 0x00000200;
    memoryASet32(ds, 0x23a068, eax);
    eax = ebx * 0x000000ac;
    edx = 0x00000008;
    esi = 0x000000f0;
    eax = memoryAGet32(ds, eax + 2201962);
    memoryASet32(ds, 0x5cc80, edx);
    eax -= 0x00000c00;
    memoryASet32(ds, 0x5cc70, esi);
    goto loc_343b2;
loc_34634: // 0160:34634
    eax = 0x00000001;
    sub_3260d();
    if (!eax)
        goto loc_3465c;
    sub_3274f();
    ebp = 0x00000006;
    eax = 0x00000064;
    memoryASet32(ds, 0x23a088, ebp);
    goto loc_34357;
loc_3465c: // 0160:3465c
    esi = 0xffffd120;
    edi = 0x00000190;
    memoryASet32(ds, 0x23a05c, eax);
    memoryASet32(ds, 0x23a060, esi);
    goto loc_34442;
loc_34676: // 0160:34676
    ebx = 0x00000096;
    edx = 0x00000001;
    eax = 0x00000040;
    ecx = 0;
    sub_30cb9();
    if (!eax)
        goto loc_3380c;
    ebx = 0;
    goto loc_342e3;
loc_3469b: // 0160:3469b
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000003d;
    sub_30e53();
    if (!eax)
        goto loc_3380c;
    memoryASet(ds, 0x222f71, 0x01);
    goto loc_3380c;
loc_346c3: // 0160:346c3
    sub_3410f();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x000002c6);
    goto loc_3380c;
loc_346df: // 0160:346df
    ebx = 0x00000096;
    edx = 0x00000001;
    eax = 0x00000040;
    ecx = 0;
    sub_30cb9();
    if (!eax)
        goto loc_3380c;
    eax = 0;
    goto loc_34357;
loc_34704: // 0160:34704
    memoryASet32(ds, 0x5cc70, 0x000001f4);
    goto loc_3380c;
loc_34713: // 0160:34713
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x239fbc);
    sub_32fde();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x00000389);
    goto loc_3380c;
loc_34739: // 0160:34739
    eax = memoryAGet32(ds, edx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= memoryAGet32(ds, 0x239fbc);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000002)
        goto loc_342c5;
    sub_32aca();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x0000038e);
    goto loc_3380c;
loc_3477c: // 0160:3477c
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x239fb0);
    sub_32fde();
    if (!eax)
        goto loc_3380c;
    edx = 0;
    goto loc_342fd;
loc_3479a: // 0160:3479a
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x239fbc);
    sub_32fde();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x000003bb);
    goto loc_3380c;
loc_347c0: // 0160:347c0
    eax = memoryAGet32(ds, edx + 2201958);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<8) & 0x80000000);
    edx <<= 9;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x09);
    eax -= memoryAGet32(ds, 0x239fbc);
    edx = (int32_t)eax < 0 ? -1 : 0;
    eax ^= edx;
    eax -= edx;
    if ((int32_t)eax > (int32_t)0x00000002)
        goto loc_342c5;
    sub_32aca();
    if (!eax)
        goto loc_3380c;
    memoryASet32(ds, 0x5cc70, 0x000003c0);
    goto loc_3380c;
loc_34803: // 0160:34803
    edx = 0xffffffff;
    eax = memoryAGet32(ds, 0x239fb0);
    sub_32fde();
    if (!eax)
        goto loc_3380c;
    ecx = 0;
    memoryASet32(ds, 0x5cc70, ecx);
    goto loc_3380c;
}
void sub_34827() // 0160:34827 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    esi <<= 3;
    esi += eax;
    esi <<= 2;
    eax = memoryAGet32(ds, 0x23a068);
    memoryASet32(ds, esi + 2205010, eax);
    eax = memoryAGet32(ds, 0x23a06c);
    memoryASet32(ds, esi + 2205014, eax);
    eax = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, esi + 2205026, eax);
    eax = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, esi + 2205030, eax);
    eax = 0x0021a552;
    eax += esi;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_31658();
    edx = memoryAGet32(ds, 0x23a074);
    edx -= eax;
    memoryASet32(ds, esi + 2205038, edx);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34889() // 0160:34889 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 2;
    edx = memoryAGet32(ds, 0x23a068);
    memoryASet32(ds, eax + 2204686, edx);
    edx = memoryAGet32(ds, 0x23a06c);
    memoryASet32(ds, eax + 2204690, edx);
    edx = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, eax + 2204702, edx);
    edx = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, eax + 2204706, edx);
    eax += 0x0021a40e;
    ecx = eax + 20;
    ebx = eax + 16;
    edx = eax + 4;
    sub_31658();
    eax = memoryAGet32(ds, 0x23a074);
    memoryASet32(ds, 0x239f70, eax);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_348e7() // 0160:348e7 +long
{
    esp -= 4;
    push32(esi);
    if (memoryAGet32(ds, 0x5cc68) == 0x00000000)
        goto loc_34923;
    if (memoryAGet32(ds, 0x23a088) != 0x00000000)
        goto loc_34923;
    if (memoryAGet32(ds, 0x5cc6c) != 0x00000000)
        goto loc_34923;
    esi = memoryAGet32(ds, 0x239f70);
    esi--;
    memoryASet32(ds, 0x239f70, esi);
    if ((int32_t)esi >= 0)
        goto loc_34923;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, ebx, eax);
    eax = memoryAGet32(ds, edx);
    memoryASet32(ds, ecx, eax);
    eax = 0x00000001;
    esi = pop32();
    esp += 4;
    return;
loc_34923: // 0160:34923
    eax = 0;
    esi = pop32();
    esp += 4;
}
void sub_34927() // 0160:34927 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    edx = memoryAGet32(ds, 0x23a068);
    memoryASet32(ds, eax * 4 + 0x21a40e, edx);
    edx = memoryAGet32(ds, 0x23a06c);
    memoryASet32(ds, eax * 4 + 0x21a412, edx);
    edx = memoryAGet32(ds, 0x23a05c);
    memoryASet32(ds, eax * 4 + 0x21a41e, edx);
    edx = memoryAGet32(ds, 0x23a060);
    memoryASet32(ds, eax * 4 + 0x21a422, edx);
    edx = pop32();
    esp += 4;
}
void sub_34965() // 0160:34965 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x239f74);
    edx++;
    memoryASet32(ds, 0x239f74, edx);
    if ((int32_t)edx >= (int32_t)0x00000bb8)
        goto loc_34984;
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_34984: // 0160:34984
    ebx = 0x00000001;
    edx = 0x00000032;
    eax = 0x0000003d;
    sub_30e53();
    if (!eax)
        goto loc_349a3;
    memoryASet(ds, 0x222f71, 0x01);
loc_349a3: // 0160:349a3
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_349a8() // 0160:349a8 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    al = (int32_t)memoryAGet32(ds, eax * 4 + 0x5c79a) < (int32_t)0x00000003;
    eax &= 0x000000ff;
    edx = pop32();
    esp += 4;
}
void sub_349cd() // 0160:349cd +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = memoryAGet32(ds, 0x5caac);
    if (edx)
        goto loc_34aa8;
    if (memoryAGet32(ds, 0x59004) != 0x00000000)
        goto loc_34aa8;
    if (memoryAGet32(ds, 0x21af00) != 0x00000000)
        goto loc_34aa8;
    if (memoryAGet32(ds, 0x21acc0) == 0x00000000)
        goto loc_34aa8;
    if (memoryAGet32(ds, 0x5cc68) == 0x00000000)
        goto loc_34a27;
    eax = memoryAGet32(ds, 0x21ac64);
    if (eax == memoryAGet32(ds, 0x5cc64))
        goto loc_34a27;
    sub_30852();
    memoryASet32(ds, 0x5cc68, edx);
loc_34a27: // 0160:34a27
    if (memoryAGet32(ds, 0x5cc68) == 0x00000000)
        goto loc_34a4e;
    memoryASet32(ds, 0x23a03c, memoryAGet32(ds, 0x23a03c) + 1);
    sub_30852();
    sub_34965();
    if (!eax)
        goto loc_34aa8;
    sub_34246();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_34a4e: // 0160:34a4e
    eax = memoryAGet32(ds, 0x21ac64);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<1) & 0x80000000);
    edx <<= 2;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x02);
    eax <<= 2;
    ebx = memoryAGet32(ds, eax + 378778);
    if ((int32_t)ebx >= (int32_t)0x00000003)
        goto loc_34aa8;
    ecx = 0x00000001;
    eax = memoryAGet32(ds, 0x21ac64);
    memoryASet32(ds, 0x5cc6c, ebx);
    esi = 0;
    memoryASet32(ds, 0x5cc68, ecx);
    memoryASet32(ds, 0x23a054, esi);
    memoryASet32(ds, 0x5cc64, eax);
    sub_31616();
    memoryASet32(ds, 0x5cc70, ecx);
    memoryASet32(ds, 0x239f74, esi);
    memoryASet32(ds, 0x23a03c, esi);
loc_34aa8: // 0160:34aa8
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34bff() // 0160:34bff +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_34c05: // 0160:34c05
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_34c40;
    edx <<= 4;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_34c20;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_34c20;
    edx += eax;
    edx -= 0x00000030;
loc_34c20: // 0160:34c20
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_34c2f;
    if ((int32_t)eax > (int32_t)0x00000046)
        goto loc_34c2f;
    edx += eax;
    edx -= 0x00000037;
loc_34c2f: // 0160:34c2f
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_34c05;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_34c05;
    edx += eax;
    edx -= 0x00000057;
    goto loc_34c05;
loc_34c40: // 0160:34c40
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34c45() // 0160:34c45 +long
{
    esp -= 4;
    goto loc_34c45;
loc_34c40: // 0160:34c40
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_34c45: // 0160:34c45
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
loc_34c4b: // 0160:34c4b
    eax = 0;
    al = memoryAGet(ds, ebx);
    ebx++;
    if (!eax)
        goto loc_34c40;
    edx = edx * 0x0000000a;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_34c4b;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_34c4b;
    edx += eax;
    edx -= 0x00000030;
    goto loc_34c4b;
}
void sub_34c9d() // 0160:34c9d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000100;
    ebx = esp;
    eax += 0x0000000f;
    memoryASet32(ds, esp, edx);
    eax = sar32(eax, 0x04);
    edx = esp;
    memoryASet32(ds, esp + 4, eax);
    eax = 0x00000031;
    sub_4576a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_34ccd;
    eax = 0;
    goto loc_34ce1;
loc_34ccd: // 0160:34ccd
    eax = 0;
    ax = memoryAGet16(ds, esp + 12);
    edx = eax;
    eax = 0;
    edx <<= 16;
    ax = memoryAGet16(ds, esp);
    eax |= edx;
loc_34ce1: // 0160:34ce1
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34d1e() // 0160:34d1e +long
{
    esp -= 4;
    goto loc_34d1e;
loc_34ce1: // 0160:34ce1
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 55 bytes
loc_34d1e: // 0160:34d1e
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000101;
    ebx = esp;
    eax >>= 16;
    memoryASet32(ds, esp, edx);
    memoryASet32(ds, esp + 12, eax);
    edx = esp;
    eax = 0x00000031;
    sub_4576a();
    eax = memoryAGet32(ds, esp + 24);
    goto loc_34ce1;
}
void sub_34d46() // 0160:34d46 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x26f630);
    edx = eax;
    eax = esi;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f62c);
    edx = ecx;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f620);
    edx = ebx;
    sub_4578d();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_34d74() // 0160:34d74 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = memoryAGet32(ds, 0x26f630);
    edx = eax;
    eax = esi;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f62c);
    edx = ecx;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f624);
    edx = ebx;
    sub_44d6f();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_34dfa() // 0160:34dfa +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_34d46();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_34d74();
    eax = memoryAGet32(ds, 0x26f628);
    edx = esi;
    sub_44d6f();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34e3c() // 0160:34e3c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    ebx = eax;
    edx = 0x00000043;
    ebx &= 0x0000ffff;
    eax = 0;
    sub_34d46();
    ebx = ecx;
    edx = 0x00000044;
    ebx = sar32(ebx, 0x10);
    eax = 0;
    ebx &= 0x000000ff;
    sub_34d74();
    eax = memoryAGet32(ds, 0x26f628);
    sub_45785();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34e7a() // 0160:34e7a +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    push32(eax);
    ebp = edx;
    edx = 0x00000043;
    esi = ebx;
    eax = 0;
    esi = sar32(esi, 0x10);
    ebx &= 0x0000ffff;
    esi &= 0x000000ff;
    ecx = ebx;
    sub_34d46();
    edx = 0x00000044;
    ebx = esi;
    eax = 0;
    edi = 0;
    sub_34d74();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x26f62c);
    ebx = memoryAGet32(ds, esp);
    sub_44d6f();
    goto loc_34f15;
loc_34ec3: // 0160:34ec3
    eax = memoryAGet32(ds, 0x26f620);
    edx = ecx;
    sub_4578d();
    edx = 0;
    eax = memoryAGet32(ds, 0x26f628);
    dl = memoryAGet(ds, ebx);
    ecx++;
    sub_44d6f();
    if ((int32_t)ecx <= (int32_t)0x0000ffff)
        goto loc_34f13;
    edx = 0x00000044;
    eax = memoryAGet32(ds, 0x26f62c);
    sub_44d6f();
    esi++;
    eax = memoryAGet32(ds, 0x26f624);
    edx = esi;
    sub_44d6f();
    edx = 0x00000043;
    eax = memoryAGet32(ds, 0x26f62c);
    ecx = 0;
    sub_44d6f();
loc_34f13: // 0160:34f13
    ebx++;
    edi++;
loc_34f15: // 0160:34f15
    if ((int32_t)edi < (int32_t)ebp)
        goto loc_34ec3;
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_34f71() // 0160:34f71 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = memoryAGet32(ds, 0x5cce8);
    edx <<= 9;
    eax = sar32(eax, 0x00000001);
    edx += eax;
    ebx = memoryAGet32(ds, 0x5cce8);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = eax + eax;
    edx = 0x00000001;
    ebx = ecx;
    eax = esi;
    sub_34d46();
    edx = 0x00000001;
    eax = esi + 8;
    ebx = ecx;
    sub_34d46();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_34fb3() // 0160:34fb3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = ebx;
    if ((int32_t)edx < 0)
        goto loc_34ff8;
    eax = edx;
    eax <<= 8;
    eax -= edx;
    eax <<= 15;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_34fd6: // 0160:34fd6
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_34fe2;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_34fd6;
loc_34fe2: // 0160:34fe2
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx;
    ebx |= edx;
    edx = 0x00000009;
    sub_34d46();
loc_34ff8: // 0160:34ff8
    if ((int32_t)esi < 0)
        goto loc_35038;
    edx = esi;
    edx <<= 8;
    edx -= esi;
    edx <<= 15;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    edx = 0;
loc_35015: // 0160:35015
    if ((int32_t)eax <= (int32_t)0x000000ff)
        goto loc_35021;
    eax = sar32(eax, 0x00000001);
    edx++;
    goto loc_35015;
loc_35021: // 0160:35021
    ebx = eax;
    edx <<= 12;
    ebx <<= 4;
    eax = ecx + 8;
    ebx |= edx;
    edx = 0x00000009;
    sub_34d46();
loc_35038: // 0160:35038
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_3503b() // 0160:3503b +long +stackDrop16
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    push32(eax);
    edi = edx;
    ebp = ebx;
    esi = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, 0x26f634);
    ebx = 0x00000002;
    edi -= edx;
    ebp -= edx;
    esi -= edx;
    edx = 0;
    sub_34d74();
    eax = memoryAGet32(ds, esp);
    ebx = 0x00000002;
    edx = 0;
    eax += 0x00000008;
    memoryASet32(ds, esp + 24, esi);
    sub_34d74();
    if ((int32_t)ecx < 0)
        goto loc_35086;
    eax = memoryAGet32(ds, esp);
    edx = ecx;
    sub_34f71();
loc_35086: // 0160:35086
    if (ebp != memoryAGet32(ds, esp + 24))
        goto loc_35092;
    edx = 0;
    memoryASet32(ds, esp + 24, edx);
loc_35092: // 0160:35092
    esi = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, esp + 24);
    esi += 0x00000008;
    if (!ebx)
        goto loc_350c7;
    eax = ebx + -1;
    ecx = eax;
    edx = 0x00000002;
    ecx = sar32(ecx, 0x07);
    memoryASet32(ds, esp + 4, eax);
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_34d46();
    eax = memoryAGet32(ds, esp + 4);
    goto loc_350e3;
loc_350c7: // 0160:350c7
    ecx = edi;
    ecx = sar32(ecx, 0x07);
    edx = 0x00000002;
    ecx &= 0x0000ffff;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_34d46();
    eax = edi;
loc_350e3: // 0160:350e3
    eax &= 0x0000007f;
    eax <<= 9;
    edx = 0x00000003;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    sub_34d46();
    edx = 0x00000002;
    ebx = ecx;
    eax = esi;
    sub_34d46();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x00000003;
    eax = esi;
    sub_34d46();
    ecx = ebp + -1;
    ebp = ecx;
    edx = 0x00000004;
    ebp = sar32(ebp, 0x07);
    eax = memoryAGet32(ds, esp);
    ebp &= 0x0000ffff;
    ecx &= 0x0000007f;
    ebx = ebp;
    ecx <<= 9;
    sub_34d46();
    edx = 0x00000005;
    eax = memoryAGet32(ds, esp);
    ebx = ecx;
    sub_34d46();
    eax = edi;
    esi = memoryAGet32(ds, esp);
    eax = sar32(eax, 0x07);
    edx = 0x0000000a;
    eax &= 0x0000ffff;
    edi &= 0x0000007f;
    memoryASet32(ds, esp + 4, eax);
    ebx = eax;
    eax = memoryAGet32(ds, esp);
    edi <<= 9;
    sub_34d46();
    edx = 0x0000000b;
    eax = memoryAGet32(ds, esp);
    ebx = edi;
    esi += 0x00000008;
    sub_34d46();
    edx = 0x00000004;
    ebx = ebp;
    eax = esi;
    sub_34d46();
    edx = 0x00000005;
    ebx = ecx;
    eax = esi;
    sub_34d46();
    ebx = memoryAGet32(ds, esp + 4);
    edx = 0x0000000a;
    eax = esi;
    sub_34d46();
    edx = 0x0000000b;
    ebx = edi;
    eax = esi;
    sub_34d46();
    ebx = memoryAGet32(ds, esp + 36);
    edx = memoryAGet32(ds, esp + 32);
    eax = memoryAGet32(ds, esp);
    cl = memoryAGet(ds, esp);
    sub_34fb3();
    eax = 0x00000001;
    eax <<= cl;
    if (!(memoryAGet32(ds, 0x5ccf0) & eax))
        goto loc_35216;
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_351ff;
    ebx = 0x00000008;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    sub_34d74();
    ebx = 0x00000008;
    eax = esi;
    goto loc_3520f;
loc_351ff: // 0160:351ff
    eax = memoryAGet32(ds, esp);
    ebx = 0;
    edx = 0;
    sub_34d74();
    eax = esi;
    ebx = 0;
loc_3520f: // 0160:3520f
    edx = 0;
    sub_34d74();
loc_35216: // 0160:35216
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 16;
}
void sub_3521f() // 0160:3521f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = 0x00000001;
    edx = 0x0000004c;
    eax = 0;
    sub_34d74();
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0x00000043;
    eax -= 0x00000100;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0;
    eax -= 0x000000f5;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0x00000003;
    eax -= 0x00000100;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0;
    eax -= 0x000000f5;
    sub_44d6f();
    ebx = memoryAGet32(ds, 0x5ccec);
    edx = 0x0000000e;
    ebx--;
    eax = 0;
    bl |= 0xc0;
    ecx = 0;
    sub_34d74();
    esi = 0;
    goto loc_35368;
loc_3529d: // 0160:3529d
    ebx = 0x00000002;
    edx = esi;
    eax = ecx;
    sub_34d74();
    ebx = 0x00000002;
    edx = 0x0000000d;
    eax = ecx;
    sub_34d74();
    edx = 0x00000001;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x00000002;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x00000003;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x00000004;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x00000005;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x0000000a;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x0000000b;
    ebx = esi;
    eax = ecx;
    sub_34d46();
    edx = 0x00000006;
    ebx = esi;
    eax = ecx;
    sub_34d74();
    edx = 0x00000007;
    ebx = esi;
    eax = ecx;
    sub_34d74();
    edx = 0x00000008;
    ebx = esi;
    eax = ecx;
    sub_34d74();
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_35359;
    ebx = 0x0000000f;
    edx = 0x0000000c;
    goto loc_35360;
loc_35359: // 0160:35359
    edx = 0x0000000c;
    ebx = esi;
loc_35360: // 0160:35360
    eax = ecx;
    sub_34d74();
    ecx++;
loc_35368: // 0160:35368
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, 0x5ccec))
        goto loc_3529d;
    ebx = 0x00000003;
    edx = 0x0000004c;
    eax = 0;
    sub_34d74();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3538a() // 0160:3538a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    sub_3521f();
    sub_3521f();
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0x00000001;
    eax -= 0x00000100;
    sub_44d6f();
    edx = 0;
    ebx = 0x00000001;
    memoryASet32(ds, 0x5cc98, edx);
    eax = 0;
    memoryASet32(ds, 0x5cc98, ebx);
    sub_34dfa();
    eax = memoryAGet32(ds, 0x5cc98);
    edx = eax + ebx;
    memoryASet32(ds, 0x5cc98, edx);
    edx = 0;
    sub_34dfa();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_353dc() // 0160:353dc +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_44d6f();
    edx = 0x0000004c;
    eax = 0;
    sub_34d74();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35403() // 0160:35403 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x00000080;
    eax = 0;
    sub_34dfa();
    eax = 0;
    sub_34e3c();
    if (eax == 0x00000080)
        goto loc_35422;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_35422: // 0160:35422
    edx = 0x00000081;
    eax = 0x00040000;
    sub_34dfa();
    eax = 0;
    sub_34e3c();
    if (eax != 0x00000080)
        goto loc_35450;
    eax = 0x00040000;
    sub_34e3c();
    if (eax == 0x00000081)
        goto loc_35457;
loc_35450: // 0160:35450
    eax = 0x00000100;
    edx = pop32();
    esp += 4;
    return;
loc_35457: // 0160:35457
    edx = 0x00000082;
    eax = 0x00080000;
    sub_34dfa();
    eax = 0;
    sub_34e3c();
    if (eax != 0x00000080)
        goto loc_35496;
    eax = 0x00040000;
    sub_34e3c();
    if (eax != 0x00000081)
        goto loc_35496;
    eax = 0x00080000;
    sub_34e3c();
    if (eax == 0x00000082)
        goto loc_3549d;
loc_35496: // 0160:35496
    eax = 0x00000200;
    edx = pop32();
    esp += 4;
    return;
loc_3549d: // 0160:3549d
    edx = 0x00000083;
    eax = 0x000c0000;
    sub_34dfa();
    eax = 0;
    sub_34e3c();
    if (eax != 0x00000080)
        goto loc_35496;
    eax = 0x00040000;
    sub_34e3c();
    if (eax != 0x00000081)
        goto loc_35496;
    eax = 0x00080000;
    sub_34e3c();
    if (eax != 0x00000082)
        goto loc_35496;
    eax = 0x000c0000;
    sub_34e3c();
    if (eax != 0x00000083)
        goto loc_35496;
    eax = 0x00000400;
    edx = pop32();
    esp += 4;
}
void sub_354f4() // 0160:354f4 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x00000080;
    eax = 0x0004f23b;
    edx = 0;
    edi = esp;
    memoryASet32(ds, 0x5cc94, edx);
    sub_45798();
    esi = eax;
    push32(edi);
loc_35515: // 0160:35515
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_3552d;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_35515;
loc_3552d: // 0160:3552d
    edi = pop32();
    eax = esp;
    sub_457fb();
    ah = 0;
    memoryASet(ds, esp + 3, ah);
    eax = esp;
    sub_34bff();
    edi = eax + 256;
    memoryASet32(ds, 0x5cc90, edi);
    edi = eax + 258;
    memoryASet32(ds, 0x26f630, edi);
    edi = eax + 259;
    memoryASet32(ds, 0x26f62c, edi);
    edi = eax + 260;
    memoryASet32(ds, 0x26f620, edi);
    edi = eax + 261;
    ebx = memoryAGet32(ds, 0x5cc90);
    eax += 0x00000107;
    memoryASet32(ds, 0x26f624, edi);
    memoryASet32(ds, 0x26f628, eax);
    if ((int32_t)ebx < (int32_t)0x00000310)
        goto loc_355c8;
    if ((int32_t)ebx > (int32_t)0x00000360)
        goto loc_355c8;
    sub_3538a();
    sub_35403();
    memoryASet32(ds, 0x5cc94, eax);
    if ((int32_t)eax >= (int32_t)0x00000200)
        goto loc_355ba;
    memoryASet32(ds, 0x5cc94, edx);
loc_355ba: // 0160:355ba
    if (memoryAGet32(ds, 0x5cc94) != 0x00000000)
        goto loc_355c8;
    sub_353dc();
loc_355c8: // 0160:355c8
    eax = memoryAGet32(ds, 0x5cc94);
    esp += 0x00000080;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_355d8() // 0160:355d8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = 0xe1;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_355e8: // 0160:355e8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_355e8;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f5e4);
    ecx = 0x0000ffff;
loc_355fb: // 0160:355fb
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_355fb;
    eax = memoryAGet32(ds, 0x26f5e8);
    sub_45785();
    ebx = eax;
    edx = memoryAGet32(ds, 0x26f5e4);
    ecx = 0x0000ffff;
loc_35617: // 0160:35617
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_35617;
    eax = memoryAGet32(ds, 0x26f5e8);
    ebx <<= 8;
    sub_45785();
    edx = memoryAGet32(ds, 0x5ccf8);
    ebx |= eax;
    if ((int32_t)ebx <= (int32_t)edx)
        goto loc_35637;
    ebx = edx;
loc_35637: // 0160:35637
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3563d() // 0160:3563d +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x26f5f0);
    edx = 0x00000001;
    eax += 0x00000006;
    sub_44d6f();
    eax = 0x00000001;
    sub_4581a();
    eax = memoryAGet32(ds, 0x26f5f0);
    edx = 0;
    eax += 0x00000006;
    sub_44d6f();
    eax = 0x00000001;
    sub_4581a();
    edx = memoryAGet32(ds, 0x26f5e4);
    ecx = 0x0000ffff;
loc_3567f: // 0160:3567f
    al = in8(dx);
    if (--ecx && !!(al & 0x80))
        goto loc_3567f;
    eax = memoryAGet32(ds, 0x26f5f0);
    eax += 0x0000000a;
    sub_45785();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_35694() // 0160:35694 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x26f5c0) == 0x00000000)
        goto loc_356e4;
    eax = memoryAGet32(ds, 0x26f5f0);
    edx = 0x0000000e;
    eax += 0x00000004;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f5f0);
    eax += 0x00000005;
    sub_45785();
    ebx = eax;
    eax = memoryAGet32(ds, 0x26f5f0);
    edx = 0x0000000e;
    eax += 0x00000004;
    bl |= 0x02;
    sub_44d6f();
    eax = memoryAGet32(ds, 0x26f5f0);
    edx = ebx;
    eax += 0x00000005;
    sub_44d6f();
loc_356e4: // 0160:356e4
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_356e7() // 0160:356e7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    edx = 0;
    goto loc_356f6;
loc_356f0: // 0160:356f0
    sub_3563d();
    edx++;
loc_356f6: // 0160:356f6
    bl = (int32_t)edx < (int32_t)0x00000064;
    ecx = ebx;
    ecx &= 0x000000ff;
    bl = eax != 0x000000aa;
    ebx &= 0x000000ff;
    if (ecx & ebx)
        goto loc_356f0;
    al = eax == 0x000000aa;
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35727() // 0160:35727 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_356e7();
    memoryASet32(ds, 0x5ccf4, eax);
    sub_355d8();
    memoryASet32(ds, 0x26f61c, eax);
    al = (int32_t)eax >= (int32_t)0x00000200;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x26f60c, eax);
    eax = memoryAGet32(ds, 0x26f61c);
    eax = sar32(eax, 0x08);
    al = eax == 0x00000003;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x26f5c0, eax);
    eax = memoryAGet32(ds, 0x26f61c);
    eax = sar32(eax, 0x08);
    al = eax == 0x00000004;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, 0x26f5c0);
    memoryASet32(ds, 0x26f618, eax);
    if (edx)
        goto loc_3578e;
    if (!eax)
        goto loc_35798;
loc_3578e: // 0160:3578e
    esi = 0;
    memoryASet32(ds, 0x26f5e0, esi);
    goto loc_357a2;
loc_35798: // 0160:35798
    memoryASet32(ds, 0x26f5e0, 0x00000001);
loc_357a2: // 0160:357a2
    sub_35694();
    ah = 0xd1;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_357b4: // 0160:357b4
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_357b4;
    al = ah;
    out8(dx, al);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_357c0() // 0160:357c0 +long
{
    esp -= 4;
    push32(ecx);
loc_357c1: // 0160:357c1
    ah = memoryAGet(ds, edx);
    if (al == ah)
        goto loc_357ce;
    if (!ah)
        goto loc_357ce;
    edx++;
    goto loc_357c1;
loc_357ce: // 0160:357ce
    ecx = edx;
    ah = memoryAGet(ds, ecx);
    edx++;
    if (al != ah)
        goto loc_357fc;
loc_357d7: // 0160:357d7
    eax = 0;
    al = memoryAGet(ds, edx);
    ecx = 0;
    al = eax != 0x00000020;
    cl = al;
    al = memoryAGet(ds, edx) != 0x00;
    eax &= 0x000000ff;
    if (!(ecx & eax))
        goto loc_357fc;
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, ebx, al);
    ebx++;
    goto loc_357d7;
loc_357fc: // 0160:357fc
    memoryASet(ds, ebx, 0x00);
    ecx = pop32();
    esp += 4;
}
void sub_35801() // 0160:35801 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000100;
    edx = 0;
    edi = memoryAGet32(ds, 0x5ccf8);
    memoryASet32(ds, 0x26f618, edx);
    memoryASet32(ds, 0x26f5c0, edx);
    memoryASet32(ds, 0x26f5e0, edx);
    memoryASet32(ds, 0x5ccf4, edx);
    if ((int32_t)edi >= (int32_t)0x00000100)
        goto loc_3583c;
loc_35835: // 0160:35835
    eax = 0;
    goto loc_35a13;
loc_3583c: // 0160:3583c
    eax = 0x0004f244;
    edi = esp + 128;
    sub_45798();
    esi = eax;
    push32(edi);
loc_35850: // 0160:35850
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_35868;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_35850;
loc_35868: // 0160:35868
    edi = pop32();
    eax = esp + 128;
    sub_457fb();
    if (memoryAGet(ds, esp + 128) == 0x00)
        goto loc_35835;
    ebx = esp;
    edx = esp + 128;
    eax = 0x00000041;
    sub_357c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_34bff();
    memoryASet32(ds, 0x26f5f0, eax);
    eax = 0x00000049;
    sub_357c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_34c45();
    memoryASet32(ds, 0x26f5d0, eax);
    eax = 0x00000044;
    sub_357c0();
    eax = esp;
    ebx = esp;
    edx = esp + 128;
    sub_34c45();
    memoryASet32(ds, 0x26f5d4, eax);
    eax = 0x00000054;
    sub_357c0();
    eax = esp;
    sub_34c45();
    memoryASet32(ds, 0x26f614, eax);
    eax = memoryAGet32(ds, 0x26f5f0);
    eax += 0x0000000a;
    memoryASet32(ds, 0x26f5e8, eax);
    eax = memoryAGet32(ds, 0x26f5f0);
    eax += 0x0000000c;
    memoryASet32(ds, 0x26f5ec, eax);
    eax = memoryAGet32(ds, 0x26f5f0);
    eax += 0x0000000e;
    ebp = memoryAGet32(ds, 0x26f5d0);
    memoryASet32(ds, 0x26f5e4, eax);
    if ((int32_t)ebp >= (int32_t)0x00000008)
        goto loc_3594e;
    ecx = 0x00000020;
    esi = 0x00000021;
    edi = ebp + 8;
    memoryASet32(ds, 0x26f5cc, ecx);
    memoryASet32(ds, 0x26f5d8, esi);
    memoryASet32(ds, 0x26f5d0, edi);
    goto loc_3596c;
loc_3594e: // 0160:3594e
    eax = 0x000000a0;
    edx = 0x000000a1;
    ebx = ebp + 104;
    memoryASet32(ds, 0x26f5cc, eax);
    memoryASet32(ds, 0x26f5d8, edx);
    memoryASet32(ds, 0x26f5d0, ebx);
loc_3596c: // 0160:3596c
    if (memoryAGet32(ds, 0x26f5d4) != 0x00000000)
        goto loc_3597f;
    memoryASet32(ds, 0x26f5f4, 0x00000087);
loc_3597f: // 0160:3597f
    if (memoryAGet32(ds, 0x26f5d4) != 0x00000001)
        goto loc_35992;
    memoryASet32(ds, 0x26f5f4, 0x00000083);
loc_35992: // 0160:35992
    if (memoryAGet32(ds, 0x26f5d4) != 0x00000002)
        goto loc_359a5;
    memoryASet32(ds, 0x26f5f4, 0x00000081);
loc_359a5: // 0160:359a5
    if (memoryAGet32(ds, 0x26f5d4) != 0x00000003)
        goto loc_359b8;
    memoryASet32(ds, 0x26f5f4, 0x00000082);
loc_359b8: // 0160:359b8
    eax = memoryAGet32(ds, 0x26f5d4);
    eax += eax;
    memoryASet32(ds, 0x26f600, eax);
    eax++;
    memoryASet32(ds, 0x26f5f8, eax);
    memoryASet32(ds, 0x26f608, 0x0000000a);
    eax = memoryAGet32(ds, 0x26f5d4);
    edx = 0x0000000b;
    memoryASet32(ds, 0x26f5dc, eax);
    eax += 0x00000004;
    ebx = 0x0000000c;
    memoryASet32(ds, 0x26f604, eax);
    eax = memoryAGet32(ds, 0x26f5d4);
    memoryASet32(ds, 0x26f5c4, edx);
    eax += 0x00000048;
    memoryASet32(ds, 0x26f5c8, ebx);
    memoryASet32(ds, 0x26f610, eax);
    sub_35727();
    eax = memoryAGet32(ds, 0x5ccf4);
loc_35a13: // 0160:35a13
    esp += 0x00000100;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35a20() // 0160:35a20 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_35a65;
    ah = 0x41;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35a38: // 0160:35a38
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35a38;
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x5ccfc);
    eax = sar32(eax, 0x08);
    ah = al;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35a55: // 0160:35a55
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35a55;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x5ccfc);
    goto loc_35a80;
loc_35a65: // 0160:35a65
    ah = 0x40;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35a72: // 0160:35a72
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35a72;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, 0x26f5a8);
loc_35a80: // 0160:35a80
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35a8b: // 0160:35a8b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35a8b;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f610);
    eax = memoryAGet32(ds, 0x26f5c4);
    sub_44d6f();
    edx = memoryAGet32(ds, 0x26f5fc);
    eax = memoryAGet32(ds, 0x26f5f4);
    edx = sar32(edx, 0x10);
    sub_44d6f();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_35abc() // 0160:35abc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x00000004;
    ebx = memoryAGet32(ds, 0x26f5c0);
    edx = memoryAGet32(ds, 0x5ccfc);
    if (ebx)
        goto loc_35adc;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_35ae5;
loc_35adc: // 0160:35adc
    eax = memoryAGet32(ds, 0x26f5b8);
    eax += eax;
    goto loc_35aea;
loc_35ae5: // 0160:35ae5
    eax = memoryAGet32(ds, 0x26f5b8);
loc_35aea: // 0160:35aea
    eax--;
    bl = al;
    eax = sar32(eax, 0x08);
    esi = memoryAGet32(ds, 0x26f618);
    memoryASet32(ds, esp, eax);
    if (!esi)
        goto loc_35b44;
    ah = 0xc6;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b0a: // 0160:35b0a
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b0a;
    al = ah;
    out8(dx, al);
    ah = 0x20;
loc_35b14: // 0160:35b14
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b1f: // 0160:35b1f
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b1f;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b34: // 0160:35b34
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b34;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    goto loc_35c35;
loc_35b44: // 0160:35b44
    if (memoryAGet32(ds, 0x26f60c) == 0x00000000)
        goto loc_35be4;
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_35ba0;
    ah = 0x48;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b66: // 0160:35b66
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b66;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b7b: // 0160:35b7b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b7b;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35b91: // 0160:35b91
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35b91;
    al = ah;
    out8(dx, al);
    ah = 0x1c;
    goto loc_35c35;
loc_35ba0: // 0160:35ba0
    ah = 0x48;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35bad: // 0160:35bad
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35bad;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35bc2: // 0160:35bc2
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35bc2;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35bd8: // 0160:35bd8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35bd8;
    al = ah;
    out8(dx, al);
    ah = 0x90;
    goto loc_35c35;
loc_35be4: // 0160:35be4
    if ((int32_t)edx >= (int32_t)0x000059d8)
        goto loc_35bf3;
    ah = 0x14;
    goto loc_35b14;
loc_35bf3: // 0160:35bf3
    ah = 0x48;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35c00: // 0160:35c00
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35c00;
    al = ah;
    out8(dx, al);
    ah = bl;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35c15: // 0160:35c15
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35c15;
    al = ah;
    out8(dx, al);
    ah = memoryAGet(ds, esp);
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35c2b: // 0160:35c2b
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35c2b;
    al = ah;
    out8(dx, al);
    ah = 0x91;
loc_35c35: // 0160:35c35
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35c40: // 0160:35c40
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35c40;
    al = ah;
    out8(dx, al);
    esp += 0x00000004;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35d9f() // 0160:35d9f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = 0;
    memoryASet32(ds, 0x26f5bc, edx);
    memoryASet32(ds, 0x26f5b0, edx);
    memoryASet32(ds, 0x26f5ac, 0x0000b6db);
    esi = 0x00000001;
    ebx = 0x00035c50;
    eax = memoryAGet32(ds, 0x26f5d0);
    ecx = memoryAGet32(ds, 0x26f5d0);
    sub_44d97();
    ecx &= 0x00000007;
    memoryASet32(ds, 0x26f638, eax);
    eax = memoryAGet32(ds, 0x26f5d0);
    esi <<= cl;
    ecx = cs;
    memoryASet16(ds, 0x26f63c, dx);
    sub_44dcb();
    eax = memoryAGet32(ds, 0x26f5d8);
    si ^= 0x00ff;
    sub_45785();
    memoryASet32(ds, 0x26f5a0, eax);
    edx = eax;
    eax = memoryAGet32(ds, 0x26f5d8);
    edx &= esi;
    sub_44d6f();
    if ((int32_t)memoryAGet32(ds, 0x26f5d0) < (int32_t)0x00000070)
        goto loc_35e3e;
    eax = 0x00000021;
    sub_45785();
    memoryASet32(ds, 0x26f5a4, eax);
    edx = eax;
    eax = 0x00000021;
    edx &= 0x000000fb;
    sub_44d6f();
loc_35e3e: // 0160:35e3e
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35e43() // 0160:35e43 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(flagAsReg32());
    flags.interrupts = 0;
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35e55: // 0160:35e55
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35e55;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35e76: // 0160:35e76
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35e76;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35e97: // 0160:35e97
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35e97;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_35eb8: // 0160:35eb8
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_35eb8;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    sub_356e7();
    edx = memoryAGet32(ds, 0x26f5a0);
    eax = memoryAGet32(ds, 0x26f5d8);
    sub_44d6f();
    if ((int32_t)memoryAGet32(ds, 0x26f5d0) < (int32_t)0x00000070)
        goto loc_35efa;
    eax = 0x00000021;
    edx = memoryAGet32(ds, 0x26f5a4);
    sub_44d6f();
loc_35efa: // 0160:35efa
    cx = memoryAGet16(ds, 0x26f63c);
    ebx = memoryAGet32(ds, 0x26f638);
    eax = memoryAGet32(ds, 0x26f5d0);
    sub_44dcb();
    flagsFromReg32(pop32());
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_35f16() // 0160:35f16 +long
{
    esp -= 4;
    goto loc_35f16;
loc_35a19: // 0160:35a19
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1270 bytes
loc_35f16: // 0160:35f16
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    edx = memoryAGet32(ds, 0x26f618);
    ebp = 0x000000c8;
    if (edx)
        goto loc_35f37;
    if (memoryAGet32(ds, 0x26f5c0) == 0x00000000)
        goto loc_35f39;
loc_35f37: // 0160:35f37
    ebp += ebp;
loc_35f39: // 0160:35f39
    ebx = 0;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp, ebx);
loc_35f42: // 0160:35f42
    eax = memoryAGet32(ds, esp);
    esi = 0;
    memoryASet32(ds, esp + 12, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    edi = eax * 0x00000000;
loc_35f55: // 0160:35f55
    edx = edi;
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    esi++;
    edx = memoryAGet32(ds, esp + 12);
    memoryASet16(ds, ecx + 2349674, ax);
    edi += edx;
    if ((int32_t)esi < (int32_t)0x00000080)
        goto loc_35f55;
    eax = memoryAGet32(ds, esp);
    edi = 0xffffff80;
    memoryASet32(ds, esp + 8, eax);
    eax = memoryAGet32(ds, esp + 4);
    ecx = ebx + ebx;
    esi = eax * 0xffffff80;
loc_35f9b: // 0160:35f9b
    edx = esi;
    edx = (int32_t)edx * (int32_t)ebp;
    memoryASet32(ds, esp + 16, 0x00000320);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 16));
    ecx += 0x00000002;
    ebx++;
    edi++;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet16(ds, ecx + 2349674, ax);
    esi += edx;
    if ((int32_t)edi < 0)
        goto loc_35f9b;
    edi = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, esp + 4);
    edi++;
    eax++;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < (int32_t)0x00000100)
        goto loc_35f42;
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_35ff4;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_3600e;
loc_35ff4: // 0160:35ff4
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_38dbf();
    esp += 0x00000024;
loc_3600e: // 0160:3600e
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_36031;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0xffffffff);
    sub_39c04();
    esp += 0x00000024;
loc_36031: // 0160:36031
    esp += 0x00000014;
    goto loc_35a19;
}
void sub_36039() // 0160:36039 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    edx = eax;
    edx <<= 2;
    if ((int32_t)esi >= 0)
        goto loc_36053;
    esi = memoryAGet32(ds, edx + 2349644);
    goto loc_36059;
loc_36053: // 0160:36053
    memoryASet32(ds, edx + 2349644, esi);
loc_36059: // 0160:36059
    if (memoryAGet32(ds, 0x5cc94) == 0x00000000)
        goto loc_3606b;
    edx = esi;
    eax = edi;
    sub_34f71();
loc_3606b: // 0160:3606b
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_3607d;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_360aa;
loc_3607d: // 0160:3607d
    edx = esi;
    edx <<= 16;
    ebp = memoryAGet32(ds, 0x26f5b4);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    eax = edi + 32;
    push32(eax);
    sub_38dbf();
    esp += 0x00000024;
loc_360aa: // 0160:360aa
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_36192;
    edx = esi;
    edx <<= 16;
    ebx = memoryAGet32(ds, 0x26f5b4);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(eax);
    push32(0x00000000);
    push32(0x00000000);
    edi += 0x00000020;
    push32(edi);
    goto loc_3618a;
    // gap 169 bytes
loc_3618a: // 0160:3618a
    sub_39c04();
    esp += 0x00000024;
loc_36192: // 0160:36192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_360e1() // 0160:360e1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if ((int32_t)edx >= 0)
        goto loc_360f3;
    edx = memoryAGet32(ds, eax * 4 + 0x23da0c);
loc_360f3: // 0160:360f3
    if ((int32_t)edx >= 0)
        goto loc_360f9;
    edx = 0;
loc_360f9: // 0160:360f9
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_36106;
    edx = 0x000000ff;
loc_36106: // 0160:36106
    ecx = memoryAGet32(ds, esi * 4 + 0x23da2c);
    memoryASet32(ds, esi * 4 + 0x23da0c, edx);
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, esi * 4 + 0x23da0c);
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x5cc94) == 0x00000000)
        goto loc_36143;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_34fb3();
loc_36143: // 0160:36143
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_36155;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_3616f;
loc_36155: // 0160:36155
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_38dbf();
    esp += 0x00000024;
loc_3616f: // 0160:3616f
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_36192;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_39c04();
    esp += 0x00000024;
loc_36192: // 0160:36192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_36198() // 0160:36198 +long
{
    esp -= 4;
    goto loc_36198;
loc_36114: // 0160:36114
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    ebp = memoryAGet32(ds, esi * 4 + 0x23da0c);
    edi = eax;
    ebp -= eax;
    if (memoryAGet32(ds, 0x5cc94) == 0x00000000)
        goto loc_36143;
    ebx = ebp;
    edx = edi;
    eax = esi;
    sub_34fb3();
loc_36143: // 0160:36143
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_36155;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_3616f;
loc_36155: // 0160:36155
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    edx = esi + 16;
    push32(edx);
    sub_38dbf();
    esp += 0x00000024;
loc_3616f: // 0160:3616f
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_36192;
    push32(0x00000000);
    push32(ebp);
    push32(edi);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi += 0x00000010;
    push32(esi);
    sub_39c04();
    esp += 0x00000024;
loc_36192: // 0160:36192
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_36198: // 0160:36198
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if ((int32_t)edx >= 0)
        goto loc_361aa;
    edx = memoryAGet32(ds, eax * 4 + 0x23da2c);
loc_361aa: // 0160:361aa
    if ((int32_t)edx >= 0)
        goto loc_361b0;
    edx = 0;
loc_361b0: // 0160:361b0
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_361bd;
    edx = 0x000000ff;
loc_361bd: // 0160:361bd
    memoryASet32(ds, esi * 4 + 0x23da2c, edx);
    edx = memoryAGet32(ds, esi * 4 + 0x23da0c);
    ecx = memoryAGet32(ds, esi * 4 + 0x23da2c);
    goto loc_36114;
}
void sub_361d7() // 0160:361d7 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    ebp = edx;
    edi = ebx;
    memoryASet32(ds, esp, ecx);
    if (memoryAGet32(ds, esp + 20) != 0x00000000)
        goto loc_361f1;
    memoryASet32(ds, esp + 20, ebx);
loc_361f1: // 0160:361f1
    if (memoryAGet32(ds, 0x5cc94) == 0x00000000)
        goto loc_36211;
    push32(0x00000000);
    push32(0x00000000);
    ecx = memoryAGet32(ds, esp + 28);
    push32(edi);
    ebx = edi;
    edx = ebp;
    push32(ecx);
    eax = esi;
    ecx = 0;
    sub_3503b();
loc_36211: // 0160:36211
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_36223;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_3623c;
loc_36223: // 0160:36223
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    ebx = memoryAGet32(ds, esp + 36);
    push32(ebx);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_38dbf();
    esp += 0x00000024;
loc_3623c: // 0160:3623c
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_3625e;
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(edi);
    eax = memoryAGet32(ds, esp + 36);
    push32(eax);
    push32(0x00000000);
    push32(edi);
    push32(ebp);
    push32(esi);
    sub_39c04();
    esp += 0x00000024;
loc_3625e: // 0160:3625e
    edx = memoryAGet32(ds, esp + 28);
    eax = esi;
    sub_36198();
    edx = memoryAGet32(ds, esp + 24);
    eax = esi;
    sub_360e1();
    edx = memoryAGet32(ds, esp);
    eax = esi;
    sub_36039();
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_36287() // 0160:36287 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if (memoryAGet32(ds, 0x26f5c0) != 0x00000000)
        goto loc_362a0;
    if (memoryAGet32(ds, 0x26f618) == 0x00000000)
        goto loc_362c4;
loc_362a0: // 0160:362a0
    ecx = memoryAGet32(ds, 0x26f5b8);
    push32(ecx);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    esi = memoryAGet32(ds, 0x26f5fc);
    push32(esi);
    push32(0xfffffffe);
    sub_38dbf();
    esp += 0x00000024;
loc_362c4: // 0160:362c4
    if (memoryAGet32(ds, 0x26f5e0) == 0x00000000)
        goto loc_362f0;
    ebp = memoryAGet32(ds, 0x26f5b8);
    push32(ebp);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    push32(0x00000000);
    eax = memoryAGet32(ds, 0x26f5fc);
    push32(eax);
    push32(0xfffffffe);
    sub_39c04();
    esp += 0x00000024;
loc_362f0: // 0160:362f0
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_362fd: // 0160:362fd
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_362fd;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_3631e: // 0160:3631e
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_3631e;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_3633f: // 0160:3633f
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_3633f;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    ah = 0xd0;
    edx = memoryAGet32(ds, 0x26f5ec);
    ecx = 0x0000ffff;
loc_36360: // 0160:36360
    al = in8(dx);
    if (--ecx && al & 0x80)
        goto loc_36360;
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f604);
    out8(dx, al);
    sub_35a20();
    edx = memoryAGet32(ds, 0x26f5c8);
    eax = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f600);
    eax = memoryAGet32(ds, 0x26f5fc);
    out8(dx, al);
    al = ah;
    out8(dx, al);
    eax = memoryAGet32(ds, 0x26f5b8);
    ecx = memoryAGet32(ds, 0x26f618);
    ecx |= memoryAGet32(ds, 0x26f5c0);
    eax <<= cl;
    edx = memoryAGet32(ds, 0x26f5f8);
    eax--;
    out8(dx, al);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f608);
    eax = memoryAGet32(ds, 0x26f5dc);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x26f5e4);
    al = in8(dx);
    sub_35abc();
    flagsFromReg32(pop32());
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_363ce() // 0160:363ce +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_363df;
    ebx = 0x00000fa0;
loc_363df: // 0160:363df
    if (ebx <= 0x00009c40)
        goto loc_363ec;
    ebx = 0x00009c40;
loc_363ec: // 0160:363ec
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x5ccfc, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x26f5a8, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x5ccfc, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x26f5c0);
    memoryASet32(ds, 0x26f5b8, eax);
    if (!ebx)
        goto loc_36455;
    edx = memoryAGet32(ds, 0x5ccfc);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x26f5b8, sar32(memoryAGet32(ds, 0x26f5b8), 0x00000001));
    goto loc_3645a;
loc_36455: // 0160:36455
    eax = memoryAGet32(ds, 0x5ccfc);
loc_3645a: // 0160:3645a
    memoryASet32(ds, 0x26f5b4, eax);
    ebx = 0;
    ecx = 0;
loc_36463: // 0160:36463
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 2349644);
    ecx += 0x00000004;
    sub_36039();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 2349576);
    ebx++;
    sub_360e1();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_36463;
    sub_36287();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3648f() // 0160:3648f +long
{
    esp -= 4;
    goto loc_3648f;
loc_363ce: // 0160:363ce
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (eax >= 0x00000fa0)
        goto loc_363df;
    ebx = 0x00000fa0;
loc_363df: // 0160:363df
    if (ebx <= 0x00009c40)
        goto loc_363ec;
    ebx = 0x00009c40;
loc_363ec: // 0160:363ec
    eax = 0x000f4240;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    memoryASet32(ds, 0x5ccfc, ebx);
    edx = 0x00000100;
    ebx = 0x00000100;
    edx -= eax;
    eax = 0x000f4240;
    memoryASet32(ds, 0x26f5a8, edx);
    ebx -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    ebx = 0x00000046;
    edx = sar32(edx, 0x1f);
    memoryASet32(ds, 0x5ccfc, eax);
    idiv32(ebx);
    ebx = memoryAGet32(ds, 0x26f5c0);
    memoryASet32(ds, 0x26f5b8, eax);
    if (!ebx)
        goto loc_36455;
    edx = memoryAGet32(ds, 0x5ccfc);
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    memoryASet32(ds, 0x26f5b8, sar32(memoryAGet32(ds, 0x26f5b8), 0x00000001));
    goto loc_3645a;
loc_36455: // 0160:36455
    eax = memoryAGet32(ds, 0x5ccfc);
loc_3645a: // 0160:3645a
    memoryASet32(ds, 0x26f5b4, eax);
    ebx = 0;
    ecx = 0;
loc_36463: // 0160:36463
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 2349644);
    ecx += 0x00000004;
    sub_36039();
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 2349576);
    ebx++;
    sub_360e1();
    if ((int32_t)ebx < (int32_t)0x00000008)
        goto loc_36463;
    sub_36287();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_3648f: // 0160:3648f
    if (memoryAGet32(ds, 0x5ccf4) != 0x00000000)
        goto loc_363ce;
    esp += 4;
}
void sub_3649d() // 0160:3649d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    ecx = 0x0000007f;
    eax = 0;
loc_364a8: // 0160:364a8
    eax += 0x00000004;
    edx = 0;
    memoryASet32(ds, eax + 2349608, ecx);
    memoryASet32(ds, eax + 2349640, edx);
    memoryASet32(ds, eax + 2349576, edx);
    if (eax != 0x00000020)
        goto loc_364a8;
    if (memoryAGet32(ds, 0x5ccf4) == 0x00000000)
        goto loc_36564;
    eax = 0x00010000;
    sub_34c9d();
    memoryASet32(ds, 0x26f59c, eax);
    if (eax)
        goto loc_364fb;
    push32(0x0004f24c);
    sub_44d1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_44d41();
loc_364fb: // 0160:364fb
    eax = memoryAGet32(ds, 0x26f59c);
    eax &= 0x0000ffff;
    eax <<= 4;
    memoryASet32(ds, 0x26f5fc, eax);
    eax += 0x00008000;
loc_36512: // 0160:36512
    ebx = eax;
    edx = memoryAGet32(ds, 0x26f5fc);
    ebx = sar32(ebx, 0x10);
    edx = sar32(edx, 0x10);
    if (edx == ebx)
        goto loc_36534;
    edi = memoryAGet32(ds, 0x26f5fc);
    edi++;
    eax++;
    memoryASet32(ds, 0x26f5fc, edi);
    goto loc_36512;
loc_36534: // 0160:36534
    eax = memoryAGet32(ds, 0x26f5fc);
    memoryASet32(ds, 0x25da6c, eax);
    eax += 0x00004000;
    memoryASet32(ds, 0x25da70, eax);
    ah = 0;
    memoryASet(ds, 0x26f644, ah);
    sub_35f16();
    sub_35d9f();
    eax = memoryAGet32(ds, 0x5ccfc);
    sub_363ce();
loc_36564: // 0160:36564
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_36569() // 0160:36569 +long
{
    esp -= 4;
    goto loc_36569;
loc_353dc: // 0160:353dc
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, 0x5cc90);
    edx = 0x00000003;
    eax -= 0x00000100;
    ebx = 0;
    sub_44d6f();
    edx = 0x0000004c;
    eax = 0;
    sub_34d74();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 4454 bytes
loc_36569: // 0160:36569
    if (memoryAGet32(ds, 0x5ccf4) == 0x00000000)
        goto loc_3659c;
    sub_35e43();
    eax = memoryAGet32(ds, 0x26f59c);
    sub_34d1e();
    if (!eax)
        goto loc_3659c;
    push32(0x0004f260);
    sub_44d1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_44d41();
loc_3659c: // 0160:3659c
    if (memoryAGet32(ds, 0x5cc94) != 0x00000000)
        goto loc_353dc;
    esp += 4;
}
void sub_365aa() // 0160:365aa +long
{
    esp -= 4;
    push32(ebx);
    esp -= 0x0000001c;
    memoryASet32(ds, esp, 0x00000600);
    ebx = eax;
    ebx >>= 16;
    eax &= 0x0000ffff;
    memoryASet32(ds, esp + 4, ebx);
    memoryASet32(ds, esp + 8, eax);
    eax = edx;
    ebx = esp;
    eax >>= 16;
    edx &= 0x0000ffff;
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    edx = esp;
    eax = 0x00000031;
    sub_4576a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_36610;
    eax = 0x00000003;
    sub_15cc3();
    push32(0x0004f274);
    sub_44d1e();
    esp += 0x00000004;
    eax = 0x00000001;
    sub_44d41();
loc_36610: // 0160:36610
    esp += 0x0000001c;
    ebx = pop32();
    esp += 4;
}
void sub_36615() // 0160:36615 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000000c;
    ebp = eax;
    esi = edx;
    memoryASet32(ds, esp, ebx);
    edx = ecx;
    edx <<= 10;
    ebx = memoryAGet32(ds, esp + 28);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edi = eax;
    eax = memoryAGet32(ds, esp);
    edx = 0;
    eax <<= 10;
    div32(edi);
    ebx = 0;
    memoryASet32(ds, esp, eax);
    eax += esi;
    edx = esi;
    memoryASet32(ds, esp + 8, eax);
    goto loc_3667b;
loc_3664d: // 0160:3664d
    eax = ebx;
    eax >>= 10;
    ecx = (char)memoryAGet(ds, eax + ebp + 1);
    esi = (char)memoryAGet(ds, eax + ebp);
    ecx -= esi;
    esi = ebx;
    esi &= 0x000003ff;
    ecx = (int32_t)ecx * (int32_t)esi;
    ecx >>= 10;
    al = memoryAGet(ds, eax + ebp);
    memoryASet32(ds, esp + 4, ecx);
    al += memoryAGet(ds, esp + 4);
    ebx += edi;
    memoryASet(ds, edx, al);
    edx++;
loc_3667b: // 0160:3667b
    if (edx < memoryAGet32(ds, esp + 8))
        goto loc_3664d;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000000c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_3668d() // 0160:3668d +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    ecx = eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    edx = 0x0004f280;
    esi = memoryAGet32(ds, 0x26f634);
    sub_15840();
    edi = eax;
    eax = ecx;
    sub_4503a();
    ebp = eax;
    if (eax)
        goto loc_366d5;
    push32(ecx);
    push32(0x0004f283);
    sub_44d1e();
    esp += 0x00000008;
    eax = 0x00000001;
    sub_44d41();
loc_366d5: // 0160:366d5
    ebx = 0x00000001;
    edx = 0x00000800;
    ecx = ebp;
    eax = esi;
    sub_45380();
    edi -= 0x00000800;
    esi += 0x00000800;
loc_366f4: // 0160:366f4
    if (!edi)
        goto loc_36763;
    if ((int32_t)edi <= (int32_t)0x00008000)
        goto loc_3673a;
    ebx = 0x00000001;
    edx = 0x00008000;
    eax = 0x0021af38;
    ecx = ebp;
    sub_45380();
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x0021af38;
    edx = esi;
    push32(ebx);
    ebx = 0x00008000;
    edi += 0xffff8000;
loc_36731: // 0160:36731
    sub_36615();
    esi += eax;
    goto loc_366f4;
loc_3673a: // 0160:3673a
    ebx = 0x00000001;
    eax = 0x0021af38;
    ecx = ebp;
    edx = edi;
    sub_45380();
    edx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 4);
    eax = 0x0021af38;
    ebx = edi;
    push32(edx);
    edx = esi;
    edi = 0;
    goto loc_36731;
loc_36763: // 0160:36763
    eax = 0;
loc_36765: // 0160:36765
    eax++;
    memoryASet(ds, esi, 0x00);
    esi++;
    if (eax < 0x000000ff)
        goto loc_36765;
    eax = ebp;
    edx = memoryAGet32(ds, esp + 8);
    sub_4523e();
    eax = edx;
    eax <<= 2;
    eax -= edx;
    edx = eax;
    ecx = memoryAGet32(ds, esp + 4);
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    ebx = 0;
    ebp = 0;
    ecx = eax;
loc_36794: // 0160:36794
    edi = memoryAGet32(ds, 0x26f634);
    eax = memoryAGet32(ds, edi + ebx + 1024);
    edx = memoryAGet32(ds, edi + ebx);
    eax -= edx;
    memoryASet32(ds, esp, eax);
    eax = ebp;
    eax = (int32_t)eax * (int32_t)ecx;
    memoryASet32(ds, esp + 12, 0x00000003);
    edx = 0;
    div32(memoryAGet32(ds, esp + 12));
    memoryASet32(ds, edi + ebx, eax);
    edi = memoryAGet32(ds, esp);
    ebp += edi;
    eax = ebp;
    eax = (int32_t)eax * (int32_t)ecx;
    edx = 0;
    edi = 0x00000003;
    div32(edi);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x26f634);
    memoryASet32(ds, edi + ebx + 1020, eax);
    if (ebx != 0x00000400)
        goto loc_36794;
    ebp = memoryAGet32(ds, 0x26f634);
    eax = esi;
    eax -= ebp;
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_36948() // 0160:36948 +long
{
    esp -= 4;
    goto loc_36948;
loc_35a19: // 0160:35a19
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3880 bytes
loc_36948: // 0160:36948
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet32(ds, 0x5cd04) == 0x00000000)
        goto loc_35a19;
    if (!eax)
        goto loc_36968;
    ecx = 0x000012aa;
    goto loc_3696d;
loc_36968: // 0160:36968
    ecx = 0x00001400;
loc_3696d: // 0160:3696d
    eax = ecx;
    ebx <<= 2;
    ecx <<= 2;
    edx = 0;
    ecx -= eax;
    sub_38d80();
    ebp = eax;
    sub_10010();
    sub_38cd4();
    eax = memoryAGet32(ds, ebx + 380172);
    sub_15840();
    esi = memoryAGet32(ds, 0x5cd08);
    edi = eax;
    memoryASet32(ds, 0x26f598, ecx);
    if ((int32_t)esi >= (int32_t)0x00100000)
        goto loc_369d5;
    edx = ecx + ecx;
    esi = 0x00000003;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    esi = eax;
    edx = ecx;
    eax = memoryAGet32(ds, ebx + 380172);
    ebx = esi;
    sub_3668d();
    edi = eax;
    memoryASet32(ds, 0x26f598, esi);
    goto loc_369e6;
loc_369d5: // 0160:369d5
    edx = memoryAGet32(ds, 0x26f634);
    eax = memoryAGet32(ds, ebx + 380172);
    sub_158e6();
loc_369e6: // 0160:369e6
    if (memoryAGet32(ds, 0x5cc94) == 0x00000000)
        goto loc_36a03;
    ecx = memoryAGet32(ds, 0x5cc90);
    eax = memoryAGet32(ds, 0x26f634);
    edx = edi;
    ebx = 0;
    sub_34e7a();
loc_36a03: // 0160:36a03
    sub_38d00();
    edx = ebp;
    eax = 0;
    sub_10010();
    goto loc_35a19;
}
void sub_36a16() // 0160:36a16 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (memoryAGet32(ds, 0x5cd04) == 0x00000000)
        goto loc_36a84;
    edi = memoryAGet32(ds, 0x5cd20);
    if (edi)
        goto loc_36a84;
    push32(edx);
    edx = memoryAGet32(ds, 0x5c668);
    edx = (int32_t)edx * (int32_t)ebx;
    eax = memoryAGet32(ds, 0x5cd24);
    eax++;
    eax &= 0x00000007;
    memoryASet32(ds, 0x5cd24, eax);
    ebx = 0x0000000a;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    push32(eax);
    eax = esi;
    edx = memoryAGet32(ds, 0x26f634);
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x26f598);
    eax += edx;
    push32(edi);
    edx += 0x00000800;
    ebx = memoryAGet32(ds, eax + 1024);
    ebp = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, 0x5cd24);
    ebx += edx;
    edx += ebp;
    sub_361d7();
loc_36a84: // 0160:36a84
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_36a89() // 0160:36a89 +long
{
    esp -= 4;
    goto loc_36a89;
loc_363c8: // 0160:363c8
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 1723 bytes
loc_36a89: // 0160:36a89
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ebx = eax;
    edx = 0;
    ecx = 0x00100000;
    memoryASet32(ds, 0x5cd04, edx);
    eax = ecx;
    memoryASet32(ds, 0x5cd08, ecx);
    sub_459a1();
    memoryASet32(ds, 0x26f634, eax);
    if (eax)
        goto loc_36ad2;
    esi = 0x00080000;
    eax = esi;
    memoryASet32(ds, 0x5cd08, esi);
    sub_459a1();
    memoryASet32(ds, 0x26f634, eax);
    if (!eax)
        goto loc_363c8;
loc_36ad2: // 0160:36ad2
    edx = 0x0003a92a;
    eax = 0x00038d94;
    edx -= 0x00038d94;
    sub_365aa();
    edx = 0x00010000;
    eax = 0x0025da74;
    sub_365aa();
    edx = memoryAGet32(ds, 0x5cd08);
    eax = memoryAGet32(ds, 0x26f634);
    sub_365aa();
    sub_354f4();
    if (eax)
        goto loc_36b24;
    sub_35801();
    if (memoryAGet32(ds, 0x5ccf4) != 0x00000000)
        goto loc_36b24;
    eax = 0;
    goto loc_363c8;
loc_36b24: // 0160:36b24
    ebp = memoryAGet32(ds, 0x5cc94);
    if (!ebp)
        goto loc_36b40;
    if ((int32_t)ebp >= (int32_t)0x00000400)
        goto loc_36b40;
    memoryASet32(ds, 0x5cd08, 0x00080000);
loc_36b40: // 0160:36b40
    if (memoryAGet32(ds, 0x5cc94) != 0x00000000)
        goto loc_36b52;
    if (memoryAGet32(ds, 0x5ccf4) == 0x00000000)
        goto loc_36b5c;
loc_36b52: // 0160:36b52
    memoryASet32(ds, 0x5cd04, 0x00000001);
loc_36b5c: // 0160:36b5c
    ebp = 0xffffffff;
    eax = memoryAGet32(ds, 0x5c6d0);
    memoryASet32(ds, 0x5cd1c, ebp);
    sub_36948();
    sub_3649d();
    eax = ebx;
    sub_3648f();
    eax = 0x00000001;
    goto loc_363c8;
}
void sub_36b87() // 0160:36b87 +long
{
    esp -= 4;
    sub_36569();
    eax = memoryAGet32(ds, 0x26f634);
    goto loc_45a84;
    // gap 61166 bytes
loc_45a84: // 0160:45a84
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x5cdac);
    goto loc_45a9d;
loc_45a92: // 0160:45a92
    if (ecx > ebx)
        goto loc_45a9a;
    if (ebx < edx)
        goto loc_45aa4;
loc_45a9a: // 0160:45a9a
    ecx = memoryAGet32(ds, ecx + 8);
loc_45a9d: // 0160:45a9d
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_45a92;
loc_45aa4: // 0160:45aa4
    eax = 0x0005cdac;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_4771c();
    if (ecx == memoryAGet32(ds, 0x5cdb0))
        goto loc_45ad5;
    ebp = memoryAGet32(ds, 0x5cdb4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_45ad5;
    memoryASet32(ds, 0x5cdb4, edx);
loc_45ad5: // 0160:45ad5
    ah = 0;
    memoryASet(ds, 0x26f785, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_36d06() // 0160:36d06 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if ((int32_t)edx >= 0)
        goto loc_36d10;
    edx = 0;
loc_36d10: // 0160:36d10
    if ((int32_t)edx <= (int32_t)0x00000100)
        goto loc_36d1d;
    edx = 0x00000100;
loc_36d1d: // 0160:36d1d
    eax = ebx;
    eax <<= 2;
    ecx = memoryAGet32(ds, 0x26dac8);
    memoryASet32(ds, eax + 2335628, edx);
    if ((int32_t)ebx >= (int32_t)ecx)
        goto loc_36d3b;
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, 0x26da98);
    goto loc_36d42;
loc_36d3b: // 0160:36d3b
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, 0x26daa0);
loc_36d42: // 0160:36d42
    edx = (int32_t)edx * (int32_t)memoryAGet32(ds, eax + 2335148);
    ecx = 0x0000fe01;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    eax = ebx;
    sub_360e1();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_37185() // 0160:37185 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax &= 0x000000ff;
    ebx = 0;
    ecx = 0;
    memoryASet32(ds, 0x26da98, eax);
    goto loc_371a9;
loc_37198: // 0160:37198
    eax = ebx;
    edx = memoryAGet32(ds, ecx + 2335628);
    sub_36d06();
    ecx += 0x00000004;
    ebx++;
loc_371a9: // 0160:371a9
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x26dac8))
        goto loc_37198;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38310() // 0160:38310 +long
{
    return;
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    edx = 0x00001510;
    eax = memoryAGet32(ds, 0x26f768);
    ebx = 0;
    memoryASet32(ds, 0x26f664, edx);
    memoryASet32(ds, 0x26f660, eax);
    memoryASet16(ds, 0x26f684, bx);
    eax = esi;
    edx = 0x00000300;
    eax &= 0x0000000f;
    memoryASet16(ds, 0x26f67c, dx);
    memoryASet32(ds, 0x26f658, eax);
    eax = esi;
    dl = 0;
    eax = sar32(eax, 0x04);
    memoryASet(ds, 0x26f681, dl);
    memoryASet16(ds, 0x26f66a, ax);
    ah = 0x2f;
    edx = ds;
    memoryASet(ds, 0x26f680, ah);
    eax = 0x0026f648;
    ebx = 0x0026f648;
    memoryASet16(ds, 0x26f698, dx);
    memoryASet32(ds, 0x26f690, ebx);
loc_3837e: // 0160:3837e
    ecx = 0x0026f698;
    ebx = 0x0026f67c;
    eax = 0x00000031;
    edx = ebx;
    sub_45ae2();
    ax = memoryAGet16(ds, esi + 3);
    al = 0;
    ah &= 0x01;
    eax &= 0x0000ffff;
    if (!eax)
        goto loc_3837e;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_383a9() // 0160:383a9 +long
{
    esp -= 4;
    esp -= 0x00000004;
    memoryASet(ds, ecx, al);
    ecx = eax;
    ecx &= 0x0000ff00;
    ecx >>= 8;
    memoryASet32(ds, esp, ecx);
    eax &= 0x00ff0000;
    cl = memoryAGet(ds, esp);
    eax >>= 16;
    memoryASet(ds, ebx, cl);
    memoryASet(ds, edx, al);
    esp += 0x00000004;
    esp += 4;
}
void sub_383cf() // 0160:383cf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x0000000c;
    ecx = esp + 8;
    ebx = esp + 4;
    edx = esp;
    sub_383a9();
    edx = 0;
    dl = memoryAGet(ds, esp);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax <<= 2;
    ebx = 0;
    edx = eax;
    eax <<= 3;
    bl = memoryAGet(ds, esp + 4);
    eax += edx;
    edx = ebx;
    edx <<= 2;
    edx += ebx;
    ebx = edx;
    edx <<= 4;
    edx -= ebx;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, esp + 8);
    edx -= 0x00000096;
    eax += edx;
    esp += 0x0000000c;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_3842a() // 0160:3842a +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    edx = sar32(edx, 0x04);
    eax &= 0x0000000f;
    edx <<= 16;
    eax += edx;
    edx = pop32();
    esp += 4;
}
void sub_3843a() // 0160:3843a +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 2, 0x03);
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x26f734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x26f734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x26f738);
    sub_3842a();
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet16(ds, eax + 18, 0x0006);
    eax = memoryAGet32(ds, 0x26f738);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x26f738);
    memoryASet(ds, eax + 1, 0x00);
    eax = memoryAGet32(ds, 0x26f734);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    eax = memoryAGet32(ds, 0x26f738);
    eax = memoryAGet32(ds, eax + 2);
    edx = pop32();
    esp += 4;
}
void sub_384d2() // 0160:384d2 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x26f708);
    memoryASet(ds, eax, 0x04);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 2, 0x03);
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x26f734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x26f734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x26f708);
    sub_3842a();
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x26f734);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f734);
    ecx = 0x00000009;
    ax = memoryAGet16(ds, eax + 3);
    esi = memoryAGet32(ds, 0x26f708);
    memoryASet16(ds, 0x26f72f, ax);
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_3857c() // 0160:3857c +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    ecx = 0x00000009;
    edi = memoryAGet32(ds, 0x26f708);
    esi = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x26f708);
    memoryASet(ds, eax, 0x03);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, eax + 22, 0x00000000);
    edx = memoryAGet32(ds, 0x26f734);
    ax = memoryAGet16(ds, eax + 22);
    memoryASet16(ds, edx + 20, ax);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, edx + 20);
    memoryASet(ds, eax + 13, dl);
    eax = memoryAGet32(ds, 0x26f708);
    sub_3842a();
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x26f734);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_38625() // 0160:38625 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet(ds, eax, 0x1a);
    eax = memoryAGet32(ds, 0x26f740);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet16(ds, eax + 20, 0x0000);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet32(ds, eax + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x26f744);
    sub_3842a();
    edx = eax;
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet32(ds, eax + 14, edx);
    eax = memoryAGet32(ds, 0x26f740);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x26f744);
    memoryASet(ds, eax, 0x0a);
    eax = memoryAGet32(ds, 0x26f740);
    ecx = 0x00000006;
    sub_38310();
    esi = memoryAGet32(ds, 0x26f744);
    edi = 0x0026f725;
    esi++;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x26f744);
    dl = memoryAGet(ds, eax + 1);
    memoryASet(ds, 0x26f715, dl);
    ebx = 0x0026f718;
    dl = memoryAGet(ds, eax + 2);
    ecx = 0x0026f719;
    memoryASet(ds, 0x26f716, dl);
    edx = 0x0026f717;
    eax = memoryAGet32(ds, eax + 3);
    sub_383a9();
    eax = memoryAGet32(ds, 0x26f744);
    eax = memoryAGet32(ds, eax + 3);
    sub_383cf();
    memoryASet32(ds, 0x26f71a, eax);
    eax = memoryAGet32(ds, 0x26f740);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38710() // 0160:38710 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 13, 0x00);
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x26f734);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x26f734);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x26f748);
    sub_3842a();
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x26f748);
    memoryASet(ds, eax, 0x0b);
    eax = memoryAGet32(ds, 0x26f748);
    memoryASet(ds, eax + 1, bl);
    eax = memoryAGet32(ds, 0x26f734);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    eax = memoryAGet32(ds, 0x26f748);
    eax = memoryAGet32(ds, eax + 2);
    sub_383cf();
    memoryASet32(ds, 0x26f710, eax);
    eax = memoryAGet32(ds, 0x26f748);
    memoryASet16(ds, 0x26f70e, bx);
    al = memoryAGet(ds, eax + 6);
    al &= 0xd0;
    memoryASet(ds, 0x26f714, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_387d4() // 0160:387d4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = edx;
    edx = memoryAGet32(ds, 0x26f758);
    memoryASet(ds, edx, 0x16);
    edx = memoryAGet32(ds, 0x26f758);
    cl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, edx + 1, cl);
    edx = memoryAGet32(ds, 0x26f758);
    memoryASet(ds, edx + 2, 0x84);
    edx = memoryAGet32(ds, 0x26f758);
    memoryASet(ds, edx + 13, 0x00);
    edx = memoryAGet32(ds, 0x26f758);
    memoryASet32(ds, edx + 14, eax);
    ebx -= eax;
    eax = memoryAGet32(ds, 0x26f758);
    memoryASet32(ds, eax + 18, ebx);
    eax = memoryAGet32(ds, 0x26f758);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f758);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38833() // 0160:38833 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x26f75c);
    memoryASet(ds, eax, 0x0d);
    eax = memoryAGet32(ds, 0x26f75c);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f75c);
    memoryASet(ds, eax + 2, 0x85);
    eax = memoryAGet32(ds, 0x26f75c);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f75c);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    edx = pop32();
    esp += 4;
}
void sub_3886e() // 0160:3886e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
loc_38874: // 0160:38874
    edx = ecx;
    eax = ebx;
    sub_387d4();
    ax = memoryAGet16(ds, 0x26f72f);
    al = 0;
    ah &= 0x02;
    eax &= 0x0000ffff;
    if (!eax)
        goto loc_38874;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38892() // 0160:38892 +long
{
    esp -= 4;
loc_38892: // 0160:38892
    sub_38833();
    ax = memoryAGet16(ds, 0x26f72f);
    al = 0;
    ah &= 0x02;
    eax &= 0x0000ffff;
    if (eax)
        goto loc_38892;
    esp += 4;
}
void sub_388aa() // 0160:388aa +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0x00001500;
    ah = 0x2f;
    ecx = 0x0026f6a4;
    ebx = 0;
    memoryASet32(ds, 0x26f6c0, edx);
    memoryASet32(ds, 0x26f6b4, ebx);
    memoryASet(ds, 0x26f6dc, ah);
    edx = 0x00000300;
    eax = 0x0026f6a4;
    ebx = 0;
    memoryASet16(ds, 0x26f6d8, dx);
    dl = 0;
    memoryASet16(ds, 0x26f6e0, bx);
    memoryASet(ds, 0x26f6dd, dl);
    edx = ds;
    ebx = 0x0026f6d8;
    eax = 0x00000031;
    memoryASet16(ds, 0x26f6f4, dx);
    memoryASet32(ds, 0x26f6ec, ecx);
    ecx = 0x0026f6f4;
    edx = ebx;
    sub_45ae2();
    if (memoryAGet16(ds, 0x26f6b4) & 0xffff)
        goto loc_38925;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_38925: // 0160:38925
    al = memoryAGet(ds, 0x26f6b4);
    memoryASet(ds, 0x26f70c, al);
    al = memoryAGet(ds, 0x26f6bc);
    memoryASet(ds, 0x26f70d, al);
    eax = 0;
    al = memoryAGet(ds, 0x26f70d);
    memoryASet32(ds, 0x26f768, eax);
    sub_38625();
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38953() // 0160:38953 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    bl = al;
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x26f734);
    dl = memoryAGet(ds, 0x26f764);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x26f750);
    sub_3842a();
    edx = memoryAGet32(ds, 0x26f734);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x26f734);
    memoryASet16(ds, eax + 18, 0x0002);
    eax = memoryAGet32(ds, 0x26f750);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x26f750);
    memoryASet(ds, eax + 1, bl);
    eax = memoryAGet32(ds, 0x26f734);
    sub_38310();
    eax = memoryAGet32(ds, 0x26f734);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x26f72f, ax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_389c9() // 0160:389c9 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_389cc: // 0160:389cc
    sub_38625();
    eax = 0;
    ax = memoryAGet16(ds, 0x26f72f);
    edx++;
    if (eax != 0x00008102)
        goto loc_389e9;
    if ((int32_t)edx < (int32_t)0x000001f4)
        goto loc_389cc;
loc_389e9: // 0160:389e9
    if (edx != 0x000001f4)
        goto loc_389f5;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_389f5: // 0160:389f5
    eax = 0;
    al = memoryAGet(ds, 0x26f716);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_38a08;
    memoryASet(ds, 0x26f716, 0x23);
loc_38a08: // 0160:38a08
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
}
void sub_38a0f() // 0160:38a0f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x0000001c;
    edx = 0x00000100;
    ebx = esp;
    eax += 0x0000000f;
    memoryASet32(ds, esp, edx);
    eax = sar32(eax, 0x04);
    edx = esp;
    memoryASet32(ds, esp + 4, eax);
    eax = 0x00000031;
    sub_4576a();
    if (memoryAGet32(ds, esp + 24) == 0x00000000)
        goto loc_38a3f;
    eax = 0;
    goto loc_38a4a;
loc_38a3f: // 0160:38a3f
    eax = memoryAGet32(ds, esp);
    eax &= 0x0000ffff;
    eax <<= 4;
loc_38a4a: // 0160:38a4a
    esp += 0x0000001c;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38a50() // 0160:38a50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    if (memoryAGet32(ds, 0x26f700) != 0x00000000)
        goto loc_38b3c;
    eax = 0x0000001e;
    sub_38a0f();
    memoryASet32(ds, 0x26f734, eax);
    eax = 0x00000006;
    sub_38a0f();
    memoryASet32(ds, 0x26f738, eax);
    eax = 0x0000000b;
    sub_38a0f();
    memoryASet32(ds, 0x26f73c, eax);
    eax = 0x0000001a;
    sub_38a0f();
    memoryASet32(ds, 0x26f740, eax);
    eax = 0x00000007;
    sub_38a0f();
    memoryASet32(ds, 0x26f744, eax);
    eax = 0x00000007;
    sub_38a0f();
    memoryASet32(ds, 0x26f748, eax);
    eax = 0x00000005;
    sub_38a0f();
    memoryASet32(ds, 0x26f74c, eax);
    eax = 0x00000002;
    sub_38a0f();
    memoryASet32(ds, 0x26f750, eax);
    eax = 0x00000018;
    sub_38a0f();
    memoryASet32(ds, 0x26f754, eax);
    eax = 0x00000016;
    sub_38a0f();
    memoryASet32(ds, 0x26f758, eax);
    eax = 0x0000000d;
    sub_38a0f();
    memoryASet32(ds, 0x26f75c, eax);
    eax = 0x00000001;
    sub_38a0f();
    memoryASet32(ds, 0x26f760, eax);
    eax = 0x0000000b;
    sub_38a0f();
    memoryASet32(ds, 0x26f704, eax);
    eax = 0x00000009;
    ebx = 0x00000001;
    sub_38a0f();
    memoryASet32(ds, 0x26f708, eax);
    memoryASet32(ds, 0x26f700, ebx);
loc_38b3c: // 0160:38b3c
    sub_388aa();
    if (ax)
        goto loc_38b4b;
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_38b4b: // 0160:38b4b
    ecx = 0;
    memoryASet32(ds, 0x26f76c, ecx);
    memoryASet32(ds, 0x26f770, ecx);
    sub_38892();
    eax = 0x00000001;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38bd3() // 0160:38bd3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    ebx = 0;
    sub_38d2f();
    memoryASet32(ds, 0x26f76c, ebx);
    memoryASet32(ds, 0x26f770, ebx);
    sub_389c9();
    if (!eax)
        goto loc_38c92;
    eax = 0;
    al = memoryAGet(ds, 0x26f715);
    if ((int32_t)edx < (int32_t)eax)
        goto loc_38c0f;
    eax = 0;
    al = memoryAGet(ds, 0x26f716);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_38c16;
loc_38c0f: // 0160:38c0f
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_38c16: // 0160:38c16
    ebx = (short)dx;
    eax = ebx;
    sub_38710();
    eax = 0;
    al = memoryAGet(ds, 0x26f714);
    if (eax == 0x00000040)
        goto loc_38c0f;
    ecx = 0;
    eax = memoryAGet32(ds, 0x26f710);
    cl = memoryAGet(ds, 0x26f716);
    memoryASet32(ds, 0x5cd90, eax);
    eax = edx + 1;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_38c51;
    eax = memoryAGet32(ds, 0x26f71a);
    memoryASet32(ds, 0x26f774, eax);
    goto loc_38c6b;
loc_38c51: // 0160:38c51
    edx++;
    eax = (short)dx;
    sub_38710();
    eax = memoryAGet32(ds, 0x26f710);
    memoryASet32(ds, 0x26f774, eax);
    eax = ebx;
    sub_38710();
loc_38c6b: // 0160:38c6b
    eax = 0x00000001;
    sub_38953();
    edx = memoryAGet32(ds, 0x26f774);
    eax = memoryAGet32(ds, 0x5cd90);
    esi = 0x00000001;
    sub_3886e();
    memoryASet32(ds, 0x26f76c, esi);
    eax = esi;
loc_38c92: // 0160:38c92
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_38cd4() // 0160:38cd4 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x26f76c) == 0x00000000)
        goto loc_38cf5;
    if (memoryAGet32(ds, 0x26f770) != 0x00000000)
        goto loc_38cf5;
    sub_3843a();
    memoryASet32(ds, 0x5cd8c, eax);
    sub_38892();
loc_38cf5: // 0160:38cf5
    memoryASet32(ds, 0x26f770, 0x00000001);
    esp += 4;
}
void sub_38d00() // 0160:38d00 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x26f76c) == 0x00000000)
        goto loc_38d24;
    if (memoryAGet32(ds, 0x26f770) == 0x00000000)
        goto loc_38d24;
    edx = memoryAGet32(ds, 0x26f774);
    eax = memoryAGet32(ds, 0x5cd8c);
    sub_3886e();
loc_38d24: // 0160:38d24
    ecx = 0;
    memoryASet32(ds, 0x26f770, ecx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_38d2f() // 0160:38d2f +long
{
    esp -= 4;
    push32(edx);
    sub_38892();
    eax = 0;
    edx = 0;
    sub_38953();
    memoryASet32(ds, 0x26f76c, edx);
    memoryASet32(ds, 0x26f770, edx);
    edx = pop32();
    esp += 4;
}
void sub_38d4c() // 0160:38d4c +long
{
    esp -= 4;
    push32(edx);
    esp -= 0x0000000c;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_38d58;
    edx ^= eax;
loc_38d58: // 0160:38d58
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_38d65;
    edx = 0x000000ff;
loc_38d65: // 0160:38d65
    eax = esp;
    sub_384d2();
    eax = esp;
    memoryASet(ds, esp + 2, dl);
    memoryASet(ds, esp + 4, dl);
    sub_3857c();
    esp += 0x0000000c;
    edx = pop32();
    esp += 4;
}
void sub_38d80() // 0160:38d80 +long
{
    esp -= 4;
    esp -= 0x0000000c;
    eax = esp;
    sub_384d2();
    eax = 0;
    al = memoryAGet(ds, esp + 2);
    esp += 0x0000000c;
    esp += 4;
}
void sub_38dbf() // 0160:38dbf +long
{
    if (memoryAGet32(ss, esp+8) > memoryAGet32(ss, esp+4))
        playSound(ds, memoryAGet32(ss, esp+4), memoryAGet32(ss, esp+8)-memoryAGet32(ss, esp+4), 16000, "s8");
    return;

    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_39559;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_393f0;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_39692;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_39897;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_38eb9;
    memoryASet32(ds, 0x398d6, 0x00000000);
    memoryASet32(ds, 0x398cc, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x398b2, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398c2, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398ba, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x398e0, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39a9e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39aa8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39abc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39ab2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_38ea3;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39a9e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39aa8, eax);
    memoryASet32(ds, 0x39abc, 0x00000000);
    memoryASet32(ds, 0x39ab2, 0x00000000);
loc_38ea3: // 0160:38ea3
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x398d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x398cc, eax);
loc_38eb9: // 0160:38eb9
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_38f77;
    memoryASet32(ds, 0x39910, 0x00000000);
    memoryASet32(ds, 0x39906, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x398ec, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398fc, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398f4, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3991a, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39acb, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39ad5, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39ae9, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39adf, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_38f61;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39acb, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39ad5, eax);
    memoryASet32(ds, 0x39ae9, 0x00000000);
    memoryASet32(ds, 0x39adf, 0x00000000);
loc_38f61: // 0160:38f61
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39910, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39906, eax);
loc_38f77: // 0160:38f77
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_39035;
    memoryASet32(ds, 0x3994a, 0x00000000);
    memoryASet32(ds, 0x39940, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x39926, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39936, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3992e, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x39954, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39af8, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39b02, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b16, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b0c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_3901f;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39af8, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b02, eax);
    memoryASet32(ds, 0x39b16, 0x00000000);
    memoryASet32(ds, 0x39b0c, 0x00000000);
loc_3901f: // 0160:3901f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3994a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39940, eax);
loc_39035: // 0160:39035
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_390f3;
    memoryASet32(ds, 0x39984, 0x00000000);
    memoryASet32(ds, 0x3997a, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x39960, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39970, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39968, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3998e, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39b25, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39b2f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b43, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b39, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_390dd;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b25, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b2f, eax);
    memoryASet32(ds, 0x39b43, 0x00000000);
    memoryASet32(ds, 0x39b39, 0x00000000);
loc_390dd: // 0160:390dd
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39984, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3997a, eax);
loc_390f3: // 0160:390f3
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_391b1;
    memoryASet32(ds, 0x399be, 0x00000000);
    memoryASet32(ds, 0x399b4, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3999a, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399aa, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399a2, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x399c8, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39b52, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39b5c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b70, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b66, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_3919b;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b52, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b5c, eax);
    memoryASet32(ds, 0x39b70, 0x00000000);
    memoryASet32(ds, 0x39b66, 0x00000000);
loc_3919b: // 0160:3919b
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x399be, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x399b4, eax);
loc_391b1: // 0160:391b1
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_3926f;
    memoryASet32(ds, 0x399f8, 0x00000000);
    memoryASet32(ds, 0x399ee, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x399d4, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399e4, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399dc, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x39a02, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39b7f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39b89, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b9d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b93, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39259;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b7f, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b89, eax);
    memoryASet32(ds, 0x39b9d, 0x00000000);
    memoryASet32(ds, 0x39b93, 0x00000000);
loc_39259: // 0160:39259
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x399f8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x399ee, eax);
loc_3926f: // 0160:3926f
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_3932d;
    memoryASet32(ds, 0x39a32, 0x00000000);
    memoryASet32(ds, 0x39a28, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x39a0e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a1e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a16, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x39a3c, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39bac, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39bb6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39bca, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39bc0, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39317;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39bac, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39bb6, eax);
    memoryASet32(ds, 0x39bca, 0x00000000);
    memoryASet32(ds, 0x39bc0, 0x00000000);
loc_39317: // 0160:39317
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39a32, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39a28, eax);
loc_3932d: // 0160:3932d
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_393eb;
    memoryASet32(ds, 0x39a6c, 0x00000000);
    memoryASet32(ds, 0x39a62, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x39a48, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a58, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a50, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x39a76, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x39bd9, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x39be3, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39bf7, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39bed, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_393d5;
    eax = 0x00038d97;
    memoryASet32(ds, 0x39bd9, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39be3, eax);
    memoryASet32(ds, 0x39bf7, 0x00000000);
    memoryASet32(ds, 0x39bed, 0x00000000);
loc_393d5: // 0160:393d5
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39a6c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39a62, eax);
loc_393eb: // 0160:393eb
    goto loc_39c00;
loc_393f0: // 0160:393f0
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_39420;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398c2, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398ba, eax);
loc_39420: // 0160:39420
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_3944c;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398fc, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x398f4, eax);
loc_3944c: // 0160:3944c
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_39478;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39936, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3992e, eax);
loc_39478: // 0160:39478
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_394a4;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39970, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39968, eax);
loc_394a4: // 0160:394a4
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_394d0;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399aa, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399a2, eax);
loc_394d0: // 0160:394d0
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_394fc;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399e4, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x399dc, eax);
loc_394fc: // 0160:394fc
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_39528;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a1e, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a16, eax);
loc_39528: // 0160:39528
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_39554;
    eax = memoryAGet32(ss, ebp + 32);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a58, eax);
    eax = memoryAGet32(ss, ebp + 36);
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x39a50, eax);
loc_39554: // 0160:39554
    goto loc_39c00;
loc_39559: // 0160:39559
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_39583;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39abc, eax);
    memoryASet32(ds, 0x398d6, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39ab2, eax);
    memoryASet32(ds, 0x398cc, eax);
loc_39583: // 0160:39583
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_395a9;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39ae9, eax);
    memoryASet32(ds, 0x39910, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39adf, eax);
    memoryASet32(ds, 0x39906, eax);
loc_395a9: // 0160:395a9
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_395cf;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b16, eax);
    memoryASet32(ds, 0x3994a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b0c, eax);
    memoryASet32(ds, 0x39940, eax);
loc_395cf: // 0160:395cf
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_395f5;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b43, eax);
    memoryASet32(ds, 0x39984, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b39, eax);
    memoryASet32(ds, 0x3997a, eax);
loc_395f5: // 0160:395f5
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_3961b;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b70, eax);
    memoryASet32(ds, 0x399be, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b66, eax);
    memoryASet32(ds, 0x399b4, eax);
loc_3961b: // 0160:3961b
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_39641;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39b9d, eax);
    memoryASet32(ds, 0x399f8, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39b93, eax);
    memoryASet32(ds, 0x399ee, eax);
loc_39641: // 0160:39641
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_39667;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39bca, eax);
    memoryASet32(ds, 0x39a32, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39bc0, eax);
    memoryASet32(ds, 0x39a28, eax);
loc_39667: // 0160:39667
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_3968d;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x39bf7, eax);
    memoryASet32(ds, 0x39a6c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x39bed, eax);
    memoryASet32(ds, 0x39a62, eax);
loc_3968d: // 0160:3968d
    goto loc_39c00;
loc_39692: // 0160:39692
    eax = 0x23da6c;
    memoryASet32(ds, 0x398c2, eax);
    memoryASet32(ds, 0x398ba, eax);
    memoryASet32(ds, 0x398d6, 0x00000000);
    memoryASet32(ds, 0x398cc, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39a9e, eax);
    memoryASet32(ds, 0x398b2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39aa8, eax);
    memoryASet32(ds, 0x398e0, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x398fc, eax);
    memoryASet32(ds, 0x398f4, eax);
    memoryASet32(ds, 0x39910, 0x00000000);
    memoryASet32(ds, 0x39906, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39acb, eax);
    memoryASet32(ds, 0x398ec, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39ad5, eax);
    memoryASet32(ds, 0x3991a, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x39936, eax);
    memoryASet32(ds, 0x3992e, eax);
    memoryASet32(ds, 0x3994a, 0x00000000);
    memoryASet32(ds, 0x39940, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39af8, eax);
    memoryASet32(ds, 0x39926, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b02, eax);
    memoryASet32(ds, 0x39954, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x39970, eax);
    memoryASet32(ds, 0x39968, eax);
    memoryASet32(ds, 0x39984, 0x00000000);
    memoryASet32(ds, 0x3997a, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b25, eax);
    memoryASet32(ds, 0x39960, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b2f, eax);
    memoryASet32(ds, 0x3998e, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x399aa, eax);
    memoryASet32(ds, 0x399a2, eax);
    memoryASet32(ds, 0x399be, 0x00000000);
    memoryASet32(ds, 0x399b4, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b52, eax);
    memoryASet32(ds, 0x3999a, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b5c, eax);
    memoryASet32(ds, 0x399c8, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x399e4, eax);
    memoryASet32(ds, 0x399dc, eax);
    memoryASet32(ds, 0x399f8, 0x00000000);
    memoryASet32(ds, 0x399ee, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39b7f, eax);
    memoryASet32(ds, 0x399d4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39b89, eax);
    memoryASet32(ds, 0x39a02, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x39a1e, eax);
    memoryASet32(ds, 0x39a16, eax);
    memoryASet32(ds, 0x39a32, 0x00000000);
    memoryASet32(ds, 0x39a28, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39bac, eax);
    memoryASet32(ds, 0x39a0e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39bb6, eax);
    memoryASet32(ds, 0x39a3c, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x39a58, eax);
    memoryASet32(ds, 0x39a50, eax);
    memoryASet32(ds, 0x39a6c, 0x00000000);
    memoryASet32(ds, 0x39a62, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x39bd9, eax);
    memoryASet32(ds, 0x39a48, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x39be3, eax);
    memoryASet32(ds, 0x39a76, eax);
    goto loc_39c00;
loc_39897: // 0160:39897
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    ecx += ecx;
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_398a8;
loc_398a8: // 0160:398a8
    goto loc_398aa;
loc_398aa: // 0160:398aa
    goto loc_398ac;
loc_398ac: // 0160:398ac
    goto loc_398ae;
loc_398ae: // 0160:398ae
    goto loc_398b0;
loc_398b0: // 0160:398b0
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38d9f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38d9f, memoryAGet32(ds, 0x38d9f) + 0x7fffffff);
    memoryASet32(ds, 0x398b2, memoryAGet32(ds, 0x398b2) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x398b2) >= 0x7fffffff)
        goto loc_39a98;
loc_398ea: // 0160:398ea
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38da3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38da3, memoryAGet32(ds, 0x38da3) + 0x7fffffff);
    memoryASet32(ds, 0x398ec, memoryAGet32(ds, 0x398ec) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x398ec) >= 0x7fffffff)
        goto loc_39ac5;
loc_39924: // 0160:39924
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38da7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38da7, memoryAGet32(ds, 0x38da7) + 0x7fffffff);
    memoryASet32(ds, 0x39926, memoryAGet32(ds, 0x39926) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x39926) >= 0x7fffffff)
        goto loc_39af2;
loc_3995e: // 0160:3995e
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38dab) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38dab, memoryAGet32(ds, 0x38dab) + 0x7fffffff);
    memoryASet32(ds, 0x39960, memoryAGet32(ds, 0x39960) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x39960) >= 0x7fffffff)
        goto loc_39b1f;
loc_39998: // 0160:39998
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38daf) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38daf, memoryAGet32(ds, 0x38daf) + 0x7fffffff);
    memoryASet32(ds, 0x3999a, memoryAGet32(ds, 0x3999a) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3999a) >= 0x7fffffff)
        goto loc_39b4c;
loc_399d2: // 0160:399d2
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38db3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38db3, memoryAGet32(ds, 0x38db3) + 0x7fffffff);
    memoryASet32(ds, 0x399d4, memoryAGet32(ds, 0x399d4) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x399d4) >= 0x7fffffff)
        goto loc_39b79;
loc_39a0c: // 0160:39a0c
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38db7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38db7, memoryAGet32(ds, 0x38db7) + 0x7fffffff);
    memoryASet32(ds, 0x39a0e, memoryAGet32(ds, 0x39a0e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x39a0e) >= 0x7fffffff)
        goto loc_39ba6;
loc_39a46: // 0160:39a46
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    dx += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38dbb) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38dbb, memoryAGet32(ds, 0x38dbb) + 0x7fffffff);
    memoryASet32(ds, 0x39a48, memoryAGet32(ds, 0x39a48) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x39a48) >= 0x7fffffff)
        goto loc_39bd3;
loc_39a80: // 0160:39a80
    al = dh;
    ax ^= 0x8080;
    memoryASet16(ds, ecx + edi, ax);
    ecx += 0x00000002;
    if (ecx)
        goto loc_398b0;
    goto loc_39c00;
loc_39a98: // 0160:39a98
    memoryASet32(ds, 0x398b2, 0x7fffffff);
    memoryASet32(ds, 0x398e0, 0x7fffffff);
    memoryASet32(ds, 0x398cc, 0x7fffffff);
    memoryASet32(ds, 0x398d6, 0x7fffffff);
    goto loc_398ea;
loc_39ac5: // 0160:39ac5
    memoryASet32(ds, 0x398ec, 0x7fffffff);
    memoryASet32(ds, 0x3991a, 0x7fffffff);
    memoryASet32(ds, 0x39906, 0x7fffffff);
    memoryASet32(ds, 0x39910, 0x7fffffff);
    goto loc_39924;
loc_39af2: // 0160:39af2
    memoryASet32(ds, 0x39926, 0x7fffffff);
    memoryASet32(ds, 0x39954, 0x7fffffff);
    memoryASet32(ds, 0x39940, 0x7fffffff);
    memoryASet32(ds, 0x3994a, 0x7fffffff);
    goto loc_3995e;
loc_39b1f: // 0160:39b1f
    memoryASet32(ds, 0x39960, 0x7fffffff);
    memoryASet32(ds, 0x3998e, 0x7fffffff);
    memoryASet32(ds, 0x3997a, 0x7fffffff);
    memoryASet32(ds, 0x39984, 0x7fffffff);
    goto loc_39998;
loc_39b4c: // 0160:39b4c
    memoryASet32(ds, 0x3999a, 0x7fffffff);
    memoryASet32(ds, 0x399c8, 0x7fffffff);
    memoryASet32(ds, 0x399b4, 0x7fffffff);
    memoryASet32(ds, 0x399be, 0x7fffffff);
    goto loc_399d2;
loc_39b79: // 0160:39b79
    memoryASet32(ds, 0x399d4, 0x7fffffff);
    memoryASet32(ds, 0x39a02, 0x7fffffff);
    memoryASet32(ds, 0x399ee, 0x7fffffff);
    memoryASet32(ds, 0x399f8, 0x7fffffff);
    goto loc_39a0c;
loc_39ba6: // 0160:39ba6
    memoryASet32(ds, 0x39a0e, 0x7fffffff);
    memoryASet32(ds, 0x39a3c, 0x7fffffff);
    memoryASet32(ds, 0x39a28, 0x7fffffff);
    memoryASet32(ds, 0x39a32, 0x7fffffff);
    goto loc_39a46;
loc_39bd3: // 0160:39bd3
    memoryASet32(ds, 0x39a48, 0x7fffffff);
    memoryASet32(ds, 0x39a76, 0x7fffffff);
    memoryASet32(ds, 0x39a62, 0x7fffffff);
    memoryASet32(ds, 0x39a6c, 0x7fffffff);
    goto loc_39a80;
loc_39c00: // 0160:39c00
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    flagsFromReg32(pop32());
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_39c04() // 0160:39c04 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(flagAsReg32());
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    flags.interrupts = 0;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) & 0x000000ff);
    memoryASet32(ss, ebp + 36, memoryAGet32(ss, ebp + 36) & 0x000000ff);
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000020)
        goto loc_3a2ee;
    if ((int32_t)memoryAGet32(ss, ebp + 8) >= (int32_t)0x00000010)
        goto loc_3a1dd;
    if (memoryAGet32(ss, ebp + 8) == 0xffffffff)
        goto loc_3a427;
    if (memoryAGet32(ss, ebp + 8) == 0xfffffffe)
        goto loc_3a604;
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_39cf3;
    memoryASet32(ds, 0x3a63a, 0x00000000);
    memoryASet32(ds, 0x3a630, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a61e, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a626, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a644, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a7c4, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a7ce, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a7e2, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a7d8, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39cdd;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a7c4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a7ce, eax);
    memoryASet32(ds, 0x3a7e2, 0x00000000);
    memoryASet32(ds, 0x3a7d8, 0x00000000);
loc_39cdd: // 0160:39cdd
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a63a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a630, eax);
loc_39cf3: // 0160:39cf3
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_39da6;
    memoryASet32(ds, 0x3a66c, 0x00000000);
    memoryASet32(ds, 0x3a662, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a650, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a658, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a676, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a7f1, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a7fb, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a80f, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a805, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39d90;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a7f1, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a7fb, eax);
    memoryASet32(ds, 0x3a80f, 0x00000000);
    memoryASet32(ds, 0x3a805, 0x00000000);
loc_39d90: // 0160:39d90
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a66c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a662, eax);
loc_39da6: // 0160:39da6
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_39e59;
    memoryASet32(ds, 0x3a69e, 0x00000000);
    memoryASet32(ds, 0x3a694, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a682, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a68a, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a6a8, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a81e, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a828, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a83c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a832, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39e43;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a81e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a828, eax);
    memoryASet32(ds, 0x3a83c, 0x00000000);
    memoryASet32(ds, 0x3a832, 0x00000000);
loc_39e43: // 0160:39e43
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a69e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a694, eax);
loc_39e59: // 0160:39e59
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_39f0c;
    memoryASet32(ds, 0x3a6d0, 0x00000000);
    memoryASet32(ds, 0x3a6c6, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a6b4, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a6bc, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a6da, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a84b, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a855, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a869, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a85f, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39ef6;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a84b, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a855, eax);
    memoryASet32(ds, 0x3a869, 0x00000000);
    memoryASet32(ds, 0x3a85f, 0x00000000);
loc_39ef6: // 0160:39ef6
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a6d0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a6c6, eax);
loc_39f0c: // 0160:39f0c
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_39fbf;
    memoryASet32(ds, 0x3a702, 0x00000000);
    memoryASet32(ds, 0x3a6f8, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a6e6, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a6ee, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a70c, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a878, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a882, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a896, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a88c, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_39fa9;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a878, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a882, eax);
    memoryASet32(ds, 0x3a896, 0x00000000);
    memoryASet32(ds, 0x3a88c, 0x00000000);
loc_39fa9: // 0160:39fa9
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a702, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a6f8, eax);
loc_39fbf: // 0160:39fbf
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_3a072;
    memoryASet32(ds, 0x3a734, 0x00000000);
    memoryASet32(ds, 0x3a72a, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a718, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a720, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a73e, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a8a5, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a8af, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a8c3, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a8b9, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_3a05c;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8a5, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a8af, eax);
    memoryASet32(ds, 0x3a8c3, 0x00000000);
    memoryASet32(ds, 0x3a8b9, 0x00000000);
loc_3a05c: // 0160:3a05c
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a734, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a72a, eax);
loc_3a072: // 0160:3a072
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_3a125;
    memoryASet32(ds, 0x3a766, 0x00000000);
    memoryASet32(ds, 0x3a75c, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a74a, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a752, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a770, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a8d2, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a8dc, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a8f0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a8e6, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_3a10f;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8d2, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a8dc, eax);
    memoryASet32(ds, 0x3a8f0, 0x00000000);
    memoryASet32(ds, 0x3a8e6, 0x00000000);
loc_3a10f: // 0160:3a10f
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a766, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a75c, eax);
loc_3a125: // 0160:3a125
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_3a1d8;
    memoryASet32(ds, 0x3a798, 0x00000000);
    memoryASet32(ds, 0x3a78e, 0x00000000);
    eax = memoryAGet32(ss, ebp + 12);
    memoryASet32(ds, 0x3a77c, eax);
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a784, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x3a7a2, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x3a8ff, eax);
    eax = memoryAGet32(ss, ebp + 28);
    memoryASet32(ds, 0x3a909, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a91d, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a913, eax);
    eax = memoryAGet32(ss, ebp + 28);
    if (eax != memoryAGet32(ss, ebp + 24))
        goto loc_3a1c2;
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8ff, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a909, eax);
    memoryASet32(ds, 0x3a91d, 0x00000000);
    memoryASet32(ds, 0x3a913, 0x00000000);
loc_3a1c2: // 0160:3a1c2
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a798, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a78e, eax);
loc_3a1d8: // 0160:3a1d8
    goto loc_3a926;
loc_3a1dd: // 0160:3a1dd
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000010);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_3a202;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a626, eax);
loc_3a202: // 0160:3a202
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_3a223;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a658, eax);
loc_3a223: // 0160:3a223
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_3a244;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a68a, eax);
loc_3a244: // 0160:3a244
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_3a265;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a6bc, eax);
loc_3a265: // 0160:3a265
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_3a286;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a6ee, eax);
loc_3a286: // 0160:3a286
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_3a2a7;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a720, eax);
loc_3a2a7: // 0160:3a2a7
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_3a2c8;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a752, eax);
loc_3a2c8: // 0160:3a2c8
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_3a2e9;
    eax = memoryAGet32(ss, ebp + 32);
    eax += memoryAGet32(ss, ebp + 36);
    eax &= 0x000000ff;
    eax <<= 9;
    ebx = 0x23da6c;
    eax += ebx;
    memoryASet32(ds, 0x3a784, eax);
loc_3a2e9: // 0160:3a2e9
    goto loc_3a926;
loc_3a2ee: // 0160:3a2ee
    memoryASet32(ss, ebp + 8, memoryAGet32(ss, ebp + 8) - 0x00000020);
    if (memoryAGet32(ss, ebp + 8) != 0x00000000)
        goto loc_3a318;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a7e2, eax);
    memoryASet32(ds, 0x3a63a, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a7d8, eax);
    memoryASet32(ds, 0x3a630, eax);
loc_3a318: // 0160:3a318
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_3a33e;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a80f, eax);
    memoryASet32(ds, 0x3a66c, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a805, eax);
    memoryASet32(ds, 0x3a662, eax);
loc_3a33e: // 0160:3a33e
    if (memoryAGet32(ss, ebp + 8) != 0x00000002)
        goto loc_3a364;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a83c, eax);
    memoryASet32(ds, 0x3a69e, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a832, eax);
    memoryASet32(ds, 0x3a694, eax);
loc_3a364: // 0160:3a364
    if (memoryAGet32(ss, ebp + 8) != 0x00000003)
        goto loc_3a38a;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a869, eax);
    memoryASet32(ds, 0x3a6d0, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a85f, eax);
    memoryASet32(ds, 0x3a6c6, eax);
loc_3a38a: // 0160:3a38a
    if (memoryAGet32(ss, ebp + 8) != 0x00000004)
        goto loc_3a3b0;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a896, eax);
    memoryASet32(ds, 0x3a702, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a88c, eax);
    memoryASet32(ds, 0x3a6f8, eax);
loc_3a3b0: // 0160:3a3b0
    if (memoryAGet32(ss, ebp + 8) != 0x00000005)
        goto loc_3a3d6;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a8c3, eax);
    memoryASet32(ds, 0x3a734, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a8b9, eax);
    memoryASet32(ds, 0x3a72a, eax);
loc_3a3d6: // 0160:3a3d6
    if (memoryAGet32(ss, ebp + 8) != 0x00000006)
        goto loc_3a3fc;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a8f0, eax);
    memoryASet32(ds, 0x3a766, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a8e6, eax);
    memoryASet32(ds, 0x3a75c, eax);
loc_3a3fc: // 0160:3a3fc
    if (memoryAGet32(ss, ebp + 8) != 0x00000007)
        goto loc_3a422;
    eax = memoryAGet32(ss, ebp + 20);
    eax >>= 16;
    memoryASet32(ds, 0x3a91d, eax);
    memoryASet32(ds, 0x3a798, eax);
    eax = memoryAGet32(ss, ebp + 20);
    eax <<= 16;
    memoryASet32(ds, 0x3a913, eax);
    memoryASet32(ds, 0x3a78e, eax);
loc_3a422: // 0160:3a422
    goto loc_3a926;
loc_3a427: // 0160:3a427
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a626, eax);
    memoryASet32(ds, 0x3a63a, 0x00000000);
    memoryASet32(ds, 0x3a630, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a7c4, eax);
    memoryASet32(ds, 0x3a61e, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a7ce, eax);
    memoryASet32(ds, 0x3a644, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a658, eax);
    memoryASet32(ds, 0x3a66c, 0x00000000);
    memoryASet32(ds, 0x3a662, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a7f1, eax);
    memoryASet32(ds, 0x3a650, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a7fb, eax);
    memoryASet32(ds, 0x3a676, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a68a, eax);
    memoryASet32(ds, 0x3a69e, 0x00000000);
    memoryASet32(ds, 0x3a694, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a81e, eax);
    memoryASet32(ds, 0x3a682, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a828, eax);
    memoryASet32(ds, 0x3a6a8, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a6bc, eax);
    memoryASet32(ds, 0x3a6d0, 0x00000000);
    memoryASet32(ds, 0x3a6c6, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a84b, eax);
    memoryASet32(ds, 0x3a6b4, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a855, eax);
    memoryASet32(ds, 0x3a6da, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a6ee, eax);
    memoryASet32(ds, 0x3a702, 0x00000000);
    memoryASet32(ds, 0x3a6f8, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a878, eax);
    memoryASet32(ds, 0x3a6e6, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a882, eax);
    memoryASet32(ds, 0x3a70c, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a720, eax);
    memoryASet32(ds, 0x3a734, 0x00000000);
    memoryASet32(ds, 0x3a72a, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8a5, eax);
    memoryASet32(ds, 0x3a718, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a8af, eax);
    memoryASet32(ds, 0x3a73e, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a752, eax);
    memoryASet32(ds, 0x3a766, 0x00000000);
    memoryASet32(ds, 0x3a75c, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8d2, eax);
    memoryASet32(ds, 0x3a74a, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a8dc, eax);
    memoryASet32(ds, 0x3a770, eax);
    eax = 0x23da6c;
    memoryASet32(ds, 0x3a784, eax);
    memoryASet32(ds, 0x3a798, 0x00000000);
    memoryASet32(ds, 0x3a78e, 0x00000000);
    eax = 0x00038d97;
    memoryASet32(ds, 0x3a8ff, eax);
    memoryASet32(ds, 0x3a77c, eax);
    eax += 0x00000004;
    memoryASet32(ds, 0x3a909, eax);
    memoryASet32(ds, 0x3a7a2, eax);
    goto loc_3a926;
loc_3a604: // 0160:3a604
    flags.direction = 0;
    edi = memoryAGet32(ss, ebp + 12);
    ecx = memoryAGet32(ss, ebp + 40);
    edi += ecx;
    ecx = -ecx;
    ebx = 0;
    goto loc_3a613;
loc_3a613: // 0160:3a613
    goto loc_3a615;
loc_3a615: // 0160:3a615
    goto loc_3a617;
loc_3a617: // 0160:3a617
    goto loc_3a619;
loc_3a619: // 0160:3a619
    goto loc_3a61c;
    // gap 1 bytes
loc_3a61c: // 0160:3a61c
    bl = memoryAGet(ds, 0x7fffffff);
    ax = memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38d9f) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38d9f, memoryAGet32(ds, 0x38d9f) + 0x7fffffff);
    memoryASet32(ds, 0x3a61e, memoryAGet32(ds, 0x3a61e) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a61e) >= 0x7fffffff)
        goto loc_3a7be;
loc_3a64e: // 0160:3a64e
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38da3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38da3, memoryAGet32(ds, 0x38da3) + 0x7fffffff);
    memoryASet32(ds, 0x3a650, memoryAGet32(ds, 0x3a650) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a650) >= 0x7fffffff)
        goto loc_3a7eb;
loc_3a680: // 0160:3a680
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38da7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38da7, memoryAGet32(ds, 0x38da7) + 0x7fffffff);
    memoryASet32(ds, 0x3a682, memoryAGet32(ds, 0x3a682) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a682) >= 0x7fffffff)
        goto loc_3a818;
loc_3a6b2: // 0160:3a6b2
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38dab) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38dab, memoryAGet32(ds, 0x38dab) + 0x7fffffff);
    memoryASet32(ds, 0x3a6b4, memoryAGet32(ds, 0x3a6b4) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a6b4) >= 0x7fffffff)
        goto loc_3a845;
loc_3a6e4: // 0160:3a6e4
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38daf) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38daf, memoryAGet32(ds, 0x38daf) + 0x7fffffff);
    memoryASet32(ds, 0x3a6e6, memoryAGet32(ds, 0x3a6e6) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a6e6) >= 0x7fffffff)
        goto loc_3a872;
loc_3a716: // 0160:3a716
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38db3) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38db3, memoryAGet32(ds, 0x38db3) + 0x7fffffff);
    memoryASet32(ds, 0x3a718, memoryAGet32(ds, 0x3a718) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a718) >= 0x7fffffff)
        goto loc_3a89f;
loc_3a748: // 0160:3a748
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38db7) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38db7, memoryAGet32(ds, 0x38db7) + 0x7fffffff);
    memoryASet32(ds, 0x3a74a, memoryAGet32(ds, 0x3a74a) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a74a) >= 0x7fffffff)
        goto loc_3a8cc;
loc_3a77a: // 0160:3a77a
    bl = memoryAGet(ds, 0x7fffffff);
    ax += memoryAGet16(ds, ebx * 2 + 0x7fffffff);
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x38dbb) + 0x7fffffff) >= 0x100000000ull;
    memoryASet32(ds, 0x38dbb, memoryAGet32(ds, 0x38dbb) + 0x7fffffff);
    memoryASet32(ds, 0x3a77c, memoryAGet32(ds, 0x3a77c) + (0x7fffffff + flags.carry));
    if (memoryAGet32(ds, 0x3a77c) >= 0x7fffffff)
        goto loc_3a8f9;
loc_3a7ac: // 0160:3a7ac
    ah ^= 0x80;
    memoryASet(ds, ecx + edi, ah);
    ecx++;
    if (ecx)
        goto loc_3a61c;
    goto loc_3a926;
loc_3a7be: // 0160:3a7be
    memoryASet32(ds, 0x3a61e, 0x7fffffff);
    memoryASet32(ds, 0x3a644, 0x7fffffff);
    memoryASet32(ds, 0x3a630, 0x7fffffff);
    memoryASet32(ds, 0x3a63a, 0x7fffffff);
    goto loc_3a64e;
loc_3a7eb: // 0160:3a7eb
    memoryASet32(ds, 0x3a650, 0x7fffffff);
    memoryASet32(ds, 0x3a676, 0x7fffffff);
    memoryASet32(ds, 0x3a662, 0x7fffffff);
    memoryASet32(ds, 0x3a66c, 0x7fffffff);
    goto loc_3a680;
loc_3a818: // 0160:3a818
    memoryASet32(ds, 0x3a682, 0x7fffffff);
    memoryASet32(ds, 0x3a6a8, 0x7fffffff);
    memoryASet32(ds, 0x3a694, 0x7fffffff);
    memoryASet32(ds, 0x3a69e, 0x7fffffff);
    goto loc_3a6b2;
loc_3a845: // 0160:3a845
    memoryASet32(ds, 0x3a6b4, 0x7fffffff);
    memoryASet32(ds, 0x3a6da, 0x7fffffff);
    memoryASet32(ds, 0x3a6c6, 0x7fffffff);
    memoryASet32(ds, 0x3a6d0, 0x7fffffff);
    goto loc_3a6e4;
loc_3a872: // 0160:3a872
    memoryASet32(ds, 0x3a6e6, 0x7fffffff);
    memoryASet32(ds, 0x3a70c, 0x7fffffff);
    memoryASet32(ds, 0x3a6f8, 0x7fffffff);
    memoryASet32(ds, 0x3a702, 0x7fffffff);
    goto loc_3a716;
loc_3a89f: // 0160:3a89f
    memoryASet32(ds, 0x3a718, 0x7fffffff);
    memoryASet32(ds, 0x3a73e, 0x7fffffff);
    memoryASet32(ds, 0x3a72a, 0x7fffffff);
    memoryASet32(ds, 0x3a734, 0x7fffffff);
    goto loc_3a748;
loc_3a8cc: // 0160:3a8cc
    memoryASet32(ds, 0x3a74a, 0x7fffffff);
    memoryASet32(ds, 0x3a770, 0x7fffffff);
    memoryASet32(ds, 0x3a75c, 0x7fffffff);
    memoryASet32(ds, 0x3a766, 0x7fffffff);
    goto loc_3a77a;
loc_3a8f9: // 0160:3a8f9
    memoryASet32(ds, 0x3a77c, 0x7fffffff);
    memoryASet32(ds, 0x3a7a2, 0x7fffffff);
    memoryASet32(ds, 0x3a78e, 0x7fffffff);
    memoryASet32(ds, 0x3a798, 0x7fffffff);
    goto loc_3a7ac;
loc_3a926: // 0160:3a926
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    flagsFromReg32(pop32());
    esp = ebp; ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_3a930() // 0160:3a930 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_3d351;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_3a94b;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_3a94b: // 0160:3a94b
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_3a958;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_3a958: // 0160:3a958
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_3a965;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_3a965: // 0160:3a965
    ebx = memoryAGet32(ss, ebp + 44);
    ecx = memoryAGet32(ss, ebp + 48);
    edx = memoryAGet32(ss, ebp + 52);
    edi = 0xffffa9fc;
    eax = 0;
    edi = 0;
loc_3a977: // 0160:3a977
    memoryASet32(ds, edi + 240126, ebx);
    ebx += 0x00000004;
    if ((int32_t)ebx <= (int32_t)memoryAGet32(ss, ebp + 24))
        goto loc_3a988;
    ebx -= memoryAGet32(ss, ebp + 24);
loc_3a988: // 0160:3a988
    memoryASet32(ds, edi + 240141, ecx);
    ecx += 0x00000004;
    if ((int32_t)ecx <= (int32_t)memoryAGet32(ss, ebp + 28))
        goto loc_3a999;
    ecx -= memoryAGet32(ss, ebp + 28);
loc_3a999: // 0160:3a999
    memoryASet32(ds, edi + 240201, edx);
    edx += 0x00000004;
    if ((int32_t)edx <= (int32_t)memoryAGet32(ss, ebp + 32))
        goto loc_3a9aa;
    edx -= memoryAGet32(ss, ebp + 32);
loc_3a9aa: // 0160:3a9aa
    memoryASet32(ds, edi + 240252, eax);
    edi += 0x00000084;
    eax += 0x00000004;
    if (eax != 0x00000140)
        goto loc_3a977;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_3a9cd;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_3a9cd: // 0160:3a9cd
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_3a9da;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_3a9da: // 0160:3a9da
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_3a9e7;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_3a9e7: // 0160:3a9e7
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    goto loc_3a9f5;
loc_3a9f5: // 0160:3a9f5
    goto loc_3a9f7;
loc_3a9f7: // 0160:3a9f7
    goto loc_3a9fc;
    // gap 3 bytes
loc_3a9fc: // 0160:3a9fc
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3a9fe));
    if (!(eax & 0x80808080))
        goto loc_3aa7a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3aa0d));
    if (edx == 0x80808080)
        goto loc_3aa3e;
    if (dl & 0x80)
        goto loc_3aa20;
    al = dl;
loc_3aa20: // 0160:3aa20
    if (dh & 0x80)
        goto loc_3aa27;
    ah = dh;
loc_3aa27: // 0160:3aa27
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3aa34;
    al = dl;
loc_3aa34: // 0160:3aa34
    if (dh & 0x80)
        goto loc_3aa3b;
    ah = dh;
loc_3aa3b: // 0160:3aa3b
    eax = rol32(eax, 0x10);
loc_3aa3e: // 0160:3aa3e
    if (!(eax & 0x80808080))
        goto loc_3aa7a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3aa49));
    if (edx == 0x80808080)
        goto loc_3aa7a;
    if (dl & 0x80)
        goto loc_3aa5c;
    al = dl;
loc_3aa5c: // 0160:3aa5c
    if (dh & 0x80)
        goto loc_3aa63;
    ah = dh;
loc_3aa63: // 0160:3aa63
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3aa70;
    al = dl;
loc_3aa70: // 0160:3aa70
    if (dh & 0x80)
        goto loc_3aa77;
    ah = dh;
loc_3aa77: // 0160:3aa77
    eax = rol32(eax, 0x10);
loc_3aa7a: // 0160:3aa7a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3aa7c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3aa82));
    if (!(eax & 0x80808080))
        goto loc_3aafe;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3aa91));
    if (edx == 0x80808080)
        goto loc_3aac2;
    if (dl & 0x80)
        goto loc_3aaa4;
    al = dl;
loc_3aaa4: // 0160:3aaa4
    if (dh & 0x80)
        goto loc_3aaab;
    ah = dh;
loc_3aaab: // 0160:3aaab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3aab8;
    al = dl;
loc_3aab8: // 0160:3aab8
    if (dh & 0x80)
        goto loc_3aabf;
    ah = dh;
loc_3aabf: // 0160:3aabf
    eax = rol32(eax, 0x10);
loc_3aac2: // 0160:3aac2
    if (!(eax & 0x80808080))
        goto loc_3aafe;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3aacd));
    if (edx == 0x80808080)
        goto loc_3aafe;
    if (dl & 0x80)
        goto loc_3aae0;
    al = dl;
loc_3aae0: // 0160:3aae0
    if (dh & 0x80)
        goto loc_3aae7;
    ah = dh;
loc_3aae7: // 0160:3aae7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3aaf4;
    al = dl;
loc_3aaf4: // 0160:3aaf4
    if (dh & 0x80)
        goto loc_3aafb;
    ah = dh;
loc_3aafb: // 0160:3aafb
    eax = rol32(eax, 0x10);
loc_3aafe: // 0160:3aafe
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ab00), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ab06));
    if (!(eax & 0x80808080))
        goto loc_3ab82;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ab15));
    if (edx == 0x80808080)
        goto loc_3ab46;
    if (dl & 0x80)
        goto loc_3ab28;
    al = dl;
loc_3ab28: // 0160:3ab28
    if (dh & 0x80)
        goto loc_3ab2f;
    ah = dh;
loc_3ab2f: // 0160:3ab2f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ab3c;
    al = dl;
loc_3ab3c: // 0160:3ab3c
    if (dh & 0x80)
        goto loc_3ab43;
    ah = dh;
loc_3ab43: // 0160:3ab43
    eax = rol32(eax, 0x10);
loc_3ab46: // 0160:3ab46
    if (!(eax & 0x80808080))
        goto loc_3ab82;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ab51));
    if (edx == 0x80808080)
        goto loc_3ab82;
    if (dl & 0x80)
        goto loc_3ab64;
    al = dl;
loc_3ab64: // 0160:3ab64
    if (dh & 0x80)
        goto loc_3ab6b;
    ah = dh;
loc_3ab6b: // 0160:3ab6b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ab78;
    al = dl;
loc_3ab78: // 0160:3ab78
    if (dh & 0x80)
        goto loc_3ab7f;
    ah = dh;
loc_3ab7f: // 0160:3ab7f
    eax = rol32(eax, 0x10);
loc_3ab82: // 0160:3ab82
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ab84), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ab8a));
    if (!(eax & 0x80808080))
        goto loc_3ac06;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ab99));
    if (edx == 0x80808080)
        goto loc_3abca;
    if (dl & 0x80)
        goto loc_3abac;
    al = dl;
loc_3abac: // 0160:3abac
    if (dh & 0x80)
        goto loc_3abb3;
    ah = dh;
loc_3abb3: // 0160:3abb3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3abc0;
    al = dl;
loc_3abc0: // 0160:3abc0
    if (dh & 0x80)
        goto loc_3abc7;
    ah = dh;
loc_3abc7: // 0160:3abc7
    eax = rol32(eax, 0x10);
loc_3abca: // 0160:3abca
    if (!(eax & 0x80808080))
        goto loc_3ac06;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3abd5));
    if (edx == 0x80808080)
        goto loc_3ac06;
    if (dl & 0x80)
        goto loc_3abe8;
    al = dl;
loc_3abe8: // 0160:3abe8
    if (dh & 0x80)
        goto loc_3abef;
    ah = dh;
loc_3abef: // 0160:3abef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3abfc;
    al = dl;
loc_3abfc: // 0160:3abfc
    if (dh & 0x80)
        goto loc_3ac03;
    ah = dh;
loc_3ac03: // 0160:3ac03
    eax = rol32(eax, 0x10);
loc_3ac06: // 0160:3ac06
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ac08), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ac0e));
    if (!(eax & 0x80808080))
        goto loc_3ac8a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ac1d));
    if (edx == 0x80808080)
        goto loc_3ac4e;
    if (dl & 0x80)
        goto loc_3ac30;
    al = dl;
loc_3ac30: // 0160:3ac30
    if (dh & 0x80)
        goto loc_3ac37;
    ah = dh;
loc_3ac37: // 0160:3ac37
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ac44;
    al = dl;
loc_3ac44: // 0160:3ac44
    if (dh & 0x80)
        goto loc_3ac4b;
    ah = dh;
loc_3ac4b: // 0160:3ac4b
    eax = rol32(eax, 0x10);
loc_3ac4e: // 0160:3ac4e
    if (!(eax & 0x80808080))
        goto loc_3ac8a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ac59));
    if (edx == 0x80808080)
        goto loc_3ac8a;
    if (dl & 0x80)
        goto loc_3ac6c;
    al = dl;
loc_3ac6c: // 0160:3ac6c
    if (dh & 0x80)
        goto loc_3ac73;
    ah = dh;
loc_3ac73: // 0160:3ac73
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ac80;
    al = dl;
loc_3ac80: // 0160:3ac80
    if (dh & 0x80)
        goto loc_3ac87;
    ah = dh;
loc_3ac87: // 0160:3ac87
    eax = rol32(eax, 0x10);
loc_3ac8a: // 0160:3ac8a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ac8c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ac92));
    if (!(eax & 0x80808080))
        goto loc_3ad0e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3aca1));
    if (edx == 0x80808080)
        goto loc_3acd2;
    if (dl & 0x80)
        goto loc_3acb4;
    al = dl;
loc_3acb4: // 0160:3acb4
    if (dh & 0x80)
        goto loc_3acbb;
    ah = dh;
loc_3acbb: // 0160:3acbb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3acc8;
    al = dl;
loc_3acc8: // 0160:3acc8
    if (dh & 0x80)
        goto loc_3accf;
    ah = dh;
loc_3accf: // 0160:3accf
    eax = rol32(eax, 0x10);
loc_3acd2: // 0160:3acd2
    if (!(eax & 0x80808080))
        goto loc_3ad0e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3acdd));
    if (edx == 0x80808080)
        goto loc_3ad0e;
    if (dl & 0x80)
        goto loc_3acf0;
    al = dl;
loc_3acf0: // 0160:3acf0
    if (dh & 0x80)
        goto loc_3acf7;
    ah = dh;
loc_3acf7: // 0160:3acf7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ad04;
    al = dl;
loc_3ad04: // 0160:3ad04
    if (dh & 0x80)
        goto loc_3ad0b;
    ah = dh;
loc_3ad0b: // 0160:3ad0b
    eax = rol32(eax, 0x10);
loc_3ad0e: // 0160:3ad0e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ad10), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ad16));
    if (!(eax & 0x80808080))
        goto loc_3ad92;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ad25));
    if (edx == 0x80808080)
        goto loc_3ad56;
    if (dl & 0x80)
        goto loc_3ad38;
    al = dl;
loc_3ad38: // 0160:3ad38
    if (dh & 0x80)
        goto loc_3ad3f;
    ah = dh;
loc_3ad3f: // 0160:3ad3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ad4c;
    al = dl;
loc_3ad4c: // 0160:3ad4c
    if (dh & 0x80)
        goto loc_3ad53;
    ah = dh;
loc_3ad53: // 0160:3ad53
    eax = rol32(eax, 0x10);
loc_3ad56: // 0160:3ad56
    if (!(eax & 0x80808080))
        goto loc_3ad92;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ad61));
    if (edx == 0x80808080)
        goto loc_3ad92;
    if (dl & 0x80)
        goto loc_3ad74;
    al = dl;
loc_3ad74: // 0160:3ad74
    if (dh & 0x80)
        goto loc_3ad7b;
    ah = dh;
loc_3ad7b: // 0160:3ad7b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ad88;
    al = dl;
loc_3ad88: // 0160:3ad88
    if (dh & 0x80)
        goto loc_3ad8f;
    ah = dh;
loc_3ad8f: // 0160:3ad8f
    eax = rol32(eax, 0x10);
loc_3ad92: // 0160:3ad92
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ad94), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ad9a));
    if (!(eax & 0x80808080))
        goto loc_3ae16;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ada9));
    if (edx == 0x80808080)
        goto loc_3adda;
    if (dl & 0x80)
        goto loc_3adbc;
    al = dl;
loc_3adbc: // 0160:3adbc
    if (dh & 0x80)
        goto loc_3adc3;
    ah = dh;
loc_3adc3: // 0160:3adc3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3add0;
    al = dl;
loc_3add0: // 0160:3add0
    if (dh & 0x80)
        goto loc_3add7;
    ah = dh;
loc_3add7: // 0160:3add7
    eax = rol32(eax, 0x10);
loc_3adda: // 0160:3adda
    if (!(eax & 0x80808080))
        goto loc_3ae16;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ade5));
    if (edx == 0x80808080)
        goto loc_3ae16;
    if (dl & 0x80)
        goto loc_3adf8;
    al = dl;
loc_3adf8: // 0160:3adf8
    if (dh & 0x80)
        goto loc_3adff;
    ah = dh;
loc_3adff: // 0160:3adff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ae0c;
    al = dl;
loc_3ae0c: // 0160:3ae0c
    if (dh & 0x80)
        goto loc_3ae13;
    ah = dh;
loc_3ae13: // 0160:3ae13
    eax = rol32(eax, 0x10);
loc_3ae16: // 0160:3ae16
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ae18), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ae1e));
    if (!(eax & 0x80808080))
        goto loc_3ae9a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ae2d));
    if (edx == 0x80808080)
        goto loc_3ae5e;
    if (dl & 0x80)
        goto loc_3ae40;
    al = dl;
loc_3ae40: // 0160:3ae40
    if (dh & 0x80)
        goto loc_3ae47;
    ah = dh;
loc_3ae47: // 0160:3ae47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ae54;
    al = dl;
loc_3ae54: // 0160:3ae54
    if (dh & 0x80)
        goto loc_3ae5b;
    ah = dh;
loc_3ae5b: // 0160:3ae5b
    eax = rol32(eax, 0x10);
loc_3ae5e: // 0160:3ae5e
    if (!(eax & 0x80808080))
        goto loc_3ae9a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ae69));
    if (edx == 0x80808080)
        goto loc_3ae9a;
    if (dl & 0x80)
        goto loc_3ae7c;
    al = dl;
loc_3ae7c: // 0160:3ae7c
    if (dh & 0x80)
        goto loc_3ae83;
    ah = dh;
loc_3ae83: // 0160:3ae83
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ae90;
    al = dl;
loc_3ae90: // 0160:3ae90
    if (dh & 0x80)
        goto loc_3ae97;
    ah = dh;
loc_3ae97: // 0160:3ae97
    eax = rol32(eax, 0x10);
loc_3ae9a: // 0160:3ae9a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ae9c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3aea2));
    if (!(eax & 0x80808080))
        goto loc_3af1e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3aeb1));
    if (edx == 0x80808080)
        goto loc_3aee2;
    if (dl & 0x80)
        goto loc_3aec4;
    al = dl;
loc_3aec4: // 0160:3aec4
    if (dh & 0x80)
        goto loc_3aecb;
    ah = dh;
loc_3aecb: // 0160:3aecb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3aed8;
    al = dl;
loc_3aed8: // 0160:3aed8
    if (dh & 0x80)
        goto loc_3aedf;
    ah = dh;
loc_3aedf: // 0160:3aedf
    eax = rol32(eax, 0x10);
loc_3aee2: // 0160:3aee2
    if (!(eax & 0x80808080))
        goto loc_3af1e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3aeed));
    if (edx == 0x80808080)
        goto loc_3af1e;
    if (dl & 0x80)
        goto loc_3af00;
    al = dl;
loc_3af00: // 0160:3af00
    if (dh & 0x80)
        goto loc_3af07;
    ah = dh;
loc_3af07: // 0160:3af07
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3af14;
    al = dl;
loc_3af14: // 0160:3af14
    if (dh & 0x80)
        goto loc_3af1b;
    ah = dh;
loc_3af1b: // 0160:3af1b
    eax = rol32(eax, 0x10);
loc_3af1e: // 0160:3af1e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3af20), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3af26));
    if (!(eax & 0x80808080))
        goto loc_3afa2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3af35));
    if (edx == 0x80808080)
        goto loc_3af66;
    if (dl & 0x80)
        goto loc_3af48;
    al = dl;
loc_3af48: // 0160:3af48
    if (dh & 0x80)
        goto loc_3af4f;
    ah = dh;
loc_3af4f: // 0160:3af4f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3af5c;
    al = dl;
loc_3af5c: // 0160:3af5c
    if (dh & 0x80)
        goto loc_3af63;
    ah = dh;
loc_3af63: // 0160:3af63
    eax = rol32(eax, 0x10);
loc_3af66: // 0160:3af66
    if (!(eax & 0x80808080))
        goto loc_3afa2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3af71));
    if (edx == 0x80808080)
        goto loc_3afa2;
    if (dl & 0x80)
        goto loc_3af84;
    al = dl;
loc_3af84: // 0160:3af84
    if (dh & 0x80)
        goto loc_3af8b;
    ah = dh;
loc_3af8b: // 0160:3af8b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3af98;
    al = dl;
loc_3af98: // 0160:3af98
    if (dh & 0x80)
        goto loc_3af9f;
    ah = dh;
loc_3af9f: // 0160:3af9f
    eax = rol32(eax, 0x10);
loc_3afa2: // 0160:3afa2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3afa4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3afaa));
    if (!(eax & 0x80808080))
        goto loc_3b026;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3afb9));
    if (edx == 0x80808080)
        goto loc_3afea;
    if (dl & 0x80)
        goto loc_3afcc;
    al = dl;
loc_3afcc: // 0160:3afcc
    if (dh & 0x80)
        goto loc_3afd3;
    ah = dh;
loc_3afd3: // 0160:3afd3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3afe0;
    al = dl;
loc_3afe0: // 0160:3afe0
    if (dh & 0x80)
        goto loc_3afe7;
    ah = dh;
loc_3afe7: // 0160:3afe7
    eax = rol32(eax, 0x10);
loc_3afea: // 0160:3afea
    if (!(eax & 0x80808080))
        goto loc_3b026;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3aff5));
    if (edx == 0x80808080)
        goto loc_3b026;
    if (dl & 0x80)
        goto loc_3b008;
    al = dl;
loc_3b008: // 0160:3b008
    if (dh & 0x80)
        goto loc_3b00f;
    ah = dh;
loc_3b00f: // 0160:3b00f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b01c;
    al = dl;
loc_3b01c: // 0160:3b01c
    if (dh & 0x80)
        goto loc_3b023;
    ah = dh;
loc_3b023: // 0160:3b023
    eax = rol32(eax, 0x10);
loc_3b026: // 0160:3b026
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b028), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b02e));
    if (!(eax & 0x80808080))
        goto loc_3b0aa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b03d));
    if (edx == 0x80808080)
        goto loc_3b06e;
    if (dl & 0x80)
        goto loc_3b050;
    al = dl;
loc_3b050: // 0160:3b050
    if (dh & 0x80)
        goto loc_3b057;
    ah = dh;
loc_3b057: // 0160:3b057
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b064;
    al = dl;
loc_3b064: // 0160:3b064
    if (dh & 0x80)
        goto loc_3b06b;
    ah = dh;
loc_3b06b: // 0160:3b06b
    eax = rol32(eax, 0x10);
loc_3b06e: // 0160:3b06e
    if (!(eax & 0x80808080))
        goto loc_3b0aa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b079));
    if (edx == 0x80808080)
        goto loc_3b0aa;
    if (dl & 0x80)
        goto loc_3b08c;
    al = dl;
loc_3b08c: // 0160:3b08c
    if (dh & 0x80)
        goto loc_3b093;
    ah = dh;
loc_3b093: // 0160:3b093
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b0a0;
    al = dl;
loc_3b0a0: // 0160:3b0a0
    if (dh & 0x80)
        goto loc_3b0a7;
    ah = dh;
loc_3b0a7: // 0160:3b0a7
    eax = rol32(eax, 0x10);
loc_3b0aa: // 0160:3b0aa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b0ac), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b0b2));
    if (!(eax & 0x80808080))
        goto loc_3b12e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b0c1));
    if (edx == 0x80808080)
        goto loc_3b0f2;
    if (dl & 0x80)
        goto loc_3b0d4;
    al = dl;
loc_3b0d4: // 0160:3b0d4
    if (dh & 0x80)
        goto loc_3b0db;
    ah = dh;
loc_3b0db: // 0160:3b0db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b0e8;
    al = dl;
loc_3b0e8: // 0160:3b0e8
    if (dh & 0x80)
        goto loc_3b0ef;
    ah = dh;
loc_3b0ef: // 0160:3b0ef
    eax = rol32(eax, 0x10);
loc_3b0f2: // 0160:3b0f2
    if (!(eax & 0x80808080))
        goto loc_3b12e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b0fd));
    if (edx == 0x80808080)
        goto loc_3b12e;
    if (dl & 0x80)
        goto loc_3b110;
    al = dl;
loc_3b110: // 0160:3b110
    if (dh & 0x80)
        goto loc_3b117;
    ah = dh;
loc_3b117: // 0160:3b117
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b124;
    al = dl;
loc_3b124: // 0160:3b124
    if (dh & 0x80)
        goto loc_3b12b;
    ah = dh;
loc_3b12b: // 0160:3b12b
    eax = rol32(eax, 0x10);
loc_3b12e: // 0160:3b12e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b130), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b136));
    if (!(eax & 0x80808080))
        goto loc_3b1b2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b145));
    if (edx == 0x80808080)
        goto loc_3b176;
    if (dl & 0x80)
        goto loc_3b158;
    al = dl;
loc_3b158: // 0160:3b158
    if (dh & 0x80)
        goto loc_3b15f;
    ah = dh;
loc_3b15f: // 0160:3b15f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b16c;
    al = dl;
loc_3b16c: // 0160:3b16c
    if (dh & 0x80)
        goto loc_3b173;
    ah = dh;
loc_3b173: // 0160:3b173
    eax = rol32(eax, 0x10);
loc_3b176: // 0160:3b176
    if (!(eax & 0x80808080))
        goto loc_3b1b2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b181));
    if (edx == 0x80808080)
        goto loc_3b1b2;
    if (dl & 0x80)
        goto loc_3b194;
    al = dl;
loc_3b194: // 0160:3b194
    if (dh & 0x80)
        goto loc_3b19b;
    ah = dh;
loc_3b19b: // 0160:3b19b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b1a8;
    al = dl;
loc_3b1a8: // 0160:3b1a8
    if (dh & 0x80)
        goto loc_3b1af;
    ah = dh;
loc_3b1af: // 0160:3b1af
    eax = rol32(eax, 0x10);
loc_3b1b2: // 0160:3b1b2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b1b4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b1ba));
    if (!(eax & 0x80808080))
        goto loc_3b236;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b1c9));
    if (edx == 0x80808080)
        goto loc_3b1fa;
    if (dl & 0x80)
        goto loc_3b1dc;
    al = dl;
loc_3b1dc: // 0160:3b1dc
    if (dh & 0x80)
        goto loc_3b1e3;
    ah = dh;
loc_3b1e3: // 0160:3b1e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b1f0;
    al = dl;
loc_3b1f0: // 0160:3b1f0
    if (dh & 0x80)
        goto loc_3b1f7;
    ah = dh;
loc_3b1f7: // 0160:3b1f7
    eax = rol32(eax, 0x10);
loc_3b1fa: // 0160:3b1fa
    if (!(eax & 0x80808080))
        goto loc_3b236;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b205));
    if (edx == 0x80808080)
        goto loc_3b236;
    if (dl & 0x80)
        goto loc_3b218;
    al = dl;
loc_3b218: // 0160:3b218
    if (dh & 0x80)
        goto loc_3b21f;
    ah = dh;
loc_3b21f: // 0160:3b21f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b22c;
    al = dl;
loc_3b22c: // 0160:3b22c
    if (dh & 0x80)
        goto loc_3b233;
    ah = dh;
loc_3b233: // 0160:3b233
    eax = rol32(eax, 0x10);
loc_3b236: // 0160:3b236
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b238), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b23e));
    if (!(eax & 0x80808080))
        goto loc_3b2ba;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b24d));
    if (edx == 0x80808080)
        goto loc_3b27e;
    if (dl & 0x80)
        goto loc_3b260;
    al = dl;
loc_3b260: // 0160:3b260
    if (dh & 0x80)
        goto loc_3b267;
    ah = dh;
loc_3b267: // 0160:3b267
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b274;
    al = dl;
loc_3b274: // 0160:3b274
    if (dh & 0x80)
        goto loc_3b27b;
    ah = dh;
loc_3b27b: // 0160:3b27b
    eax = rol32(eax, 0x10);
loc_3b27e: // 0160:3b27e
    if (!(eax & 0x80808080))
        goto loc_3b2ba;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b289));
    if (edx == 0x80808080)
        goto loc_3b2ba;
    if (dl & 0x80)
        goto loc_3b29c;
    al = dl;
loc_3b29c: // 0160:3b29c
    if (dh & 0x80)
        goto loc_3b2a3;
    ah = dh;
loc_3b2a3: // 0160:3b2a3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b2b0;
    al = dl;
loc_3b2b0: // 0160:3b2b0
    if (dh & 0x80)
        goto loc_3b2b7;
    ah = dh;
loc_3b2b7: // 0160:3b2b7
    eax = rol32(eax, 0x10);
loc_3b2ba: // 0160:3b2ba
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b2bc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b2c2));
    if (!(eax & 0x80808080))
        goto loc_3b33e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b2d1));
    if (edx == 0x80808080)
        goto loc_3b302;
    if (dl & 0x80)
        goto loc_3b2e4;
    al = dl;
loc_3b2e4: // 0160:3b2e4
    if (dh & 0x80)
        goto loc_3b2eb;
    ah = dh;
loc_3b2eb: // 0160:3b2eb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b2f8;
    al = dl;
loc_3b2f8: // 0160:3b2f8
    if (dh & 0x80)
        goto loc_3b2ff;
    ah = dh;
loc_3b2ff: // 0160:3b2ff
    eax = rol32(eax, 0x10);
loc_3b302: // 0160:3b302
    if (!(eax & 0x80808080))
        goto loc_3b33e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b30d));
    if (edx == 0x80808080)
        goto loc_3b33e;
    if (dl & 0x80)
        goto loc_3b320;
    al = dl;
loc_3b320: // 0160:3b320
    if (dh & 0x80)
        goto loc_3b327;
    ah = dh;
loc_3b327: // 0160:3b327
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b334;
    al = dl;
loc_3b334: // 0160:3b334
    if (dh & 0x80)
        goto loc_3b33b;
    ah = dh;
loc_3b33b: // 0160:3b33b
    eax = rol32(eax, 0x10);
loc_3b33e: // 0160:3b33e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b340), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b346));
    if (!(eax & 0x80808080))
        goto loc_3b3c2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b355));
    if (edx == 0x80808080)
        goto loc_3b386;
    if (dl & 0x80)
        goto loc_3b368;
    al = dl;
loc_3b368: // 0160:3b368
    if (dh & 0x80)
        goto loc_3b36f;
    ah = dh;
loc_3b36f: // 0160:3b36f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b37c;
    al = dl;
loc_3b37c: // 0160:3b37c
    if (dh & 0x80)
        goto loc_3b383;
    ah = dh;
loc_3b383: // 0160:3b383
    eax = rol32(eax, 0x10);
loc_3b386: // 0160:3b386
    if (!(eax & 0x80808080))
        goto loc_3b3c2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b391));
    if (edx == 0x80808080)
        goto loc_3b3c2;
    if (dl & 0x80)
        goto loc_3b3a4;
    al = dl;
loc_3b3a4: // 0160:3b3a4
    if (dh & 0x80)
        goto loc_3b3ab;
    ah = dh;
loc_3b3ab: // 0160:3b3ab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b3b8;
    al = dl;
loc_3b3b8: // 0160:3b3b8
    if (dh & 0x80)
        goto loc_3b3bf;
    ah = dh;
loc_3b3bf: // 0160:3b3bf
    eax = rol32(eax, 0x10);
loc_3b3c2: // 0160:3b3c2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b3c4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b3ca));
    if (!(eax & 0x80808080))
        goto loc_3b446;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b3d9));
    if (edx == 0x80808080)
        goto loc_3b40a;
    if (dl & 0x80)
        goto loc_3b3ec;
    al = dl;
loc_3b3ec: // 0160:3b3ec
    if (dh & 0x80)
        goto loc_3b3f3;
    ah = dh;
loc_3b3f3: // 0160:3b3f3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b400;
    al = dl;
loc_3b400: // 0160:3b400
    if (dh & 0x80)
        goto loc_3b407;
    ah = dh;
loc_3b407: // 0160:3b407
    eax = rol32(eax, 0x10);
loc_3b40a: // 0160:3b40a
    if (!(eax & 0x80808080))
        goto loc_3b446;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b415));
    if (edx == 0x80808080)
        goto loc_3b446;
    if (dl & 0x80)
        goto loc_3b428;
    al = dl;
loc_3b428: // 0160:3b428
    if (dh & 0x80)
        goto loc_3b42f;
    ah = dh;
loc_3b42f: // 0160:3b42f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b43c;
    al = dl;
loc_3b43c: // 0160:3b43c
    if (dh & 0x80)
        goto loc_3b443;
    ah = dh;
loc_3b443: // 0160:3b443
    eax = rol32(eax, 0x10);
loc_3b446: // 0160:3b446
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b448), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b44e));
    if (!(eax & 0x80808080))
        goto loc_3b4ca;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b45d));
    if (edx == 0x80808080)
        goto loc_3b48e;
    if (dl & 0x80)
        goto loc_3b470;
    al = dl;
loc_3b470: // 0160:3b470
    if (dh & 0x80)
        goto loc_3b477;
    ah = dh;
loc_3b477: // 0160:3b477
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b484;
    al = dl;
loc_3b484: // 0160:3b484
    if (dh & 0x80)
        goto loc_3b48b;
    ah = dh;
loc_3b48b: // 0160:3b48b
    eax = rol32(eax, 0x10);
loc_3b48e: // 0160:3b48e
    if (!(eax & 0x80808080))
        goto loc_3b4ca;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b499));
    if (edx == 0x80808080)
        goto loc_3b4ca;
    if (dl & 0x80)
        goto loc_3b4ac;
    al = dl;
loc_3b4ac: // 0160:3b4ac
    if (dh & 0x80)
        goto loc_3b4b3;
    ah = dh;
loc_3b4b3: // 0160:3b4b3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b4c0;
    al = dl;
loc_3b4c0: // 0160:3b4c0
    if (dh & 0x80)
        goto loc_3b4c7;
    ah = dh;
loc_3b4c7: // 0160:3b4c7
    eax = rol32(eax, 0x10);
loc_3b4ca: // 0160:3b4ca
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b4cc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b4d2));
    if (!(eax & 0x80808080))
        goto loc_3b54e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b4e1));
    if (edx == 0x80808080)
        goto loc_3b512;
    if (dl & 0x80)
        goto loc_3b4f4;
    al = dl;
loc_3b4f4: // 0160:3b4f4
    if (dh & 0x80)
        goto loc_3b4fb;
    ah = dh;
loc_3b4fb: // 0160:3b4fb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b508;
    al = dl;
loc_3b508: // 0160:3b508
    if (dh & 0x80)
        goto loc_3b50f;
    ah = dh;
loc_3b50f: // 0160:3b50f
    eax = rol32(eax, 0x10);
loc_3b512: // 0160:3b512
    if (!(eax & 0x80808080))
        goto loc_3b54e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b51d));
    if (edx == 0x80808080)
        goto loc_3b54e;
    if (dl & 0x80)
        goto loc_3b530;
    al = dl;
loc_3b530: // 0160:3b530
    if (dh & 0x80)
        goto loc_3b537;
    ah = dh;
loc_3b537: // 0160:3b537
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b544;
    al = dl;
loc_3b544: // 0160:3b544
    if (dh & 0x80)
        goto loc_3b54b;
    ah = dh;
loc_3b54b: // 0160:3b54b
    eax = rol32(eax, 0x10);
loc_3b54e: // 0160:3b54e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b550), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b556));
    if (!(eax & 0x80808080))
        goto loc_3b5d2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b565));
    if (edx == 0x80808080)
        goto loc_3b596;
    if (dl & 0x80)
        goto loc_3b578;
    al = dl;
loc_3b578: // 0160:3b578
    if (dh & 0x80)
        goto loc_3b57f;
    ah = dh;
loc_3b57f: // 0160:3b57f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b58c;
    al = dl;
loc_3b58c: // 0160:3b58c
    if (dh & 0x80)
        goto loc_3b593;
    ah = dh;
loc_3b593: // 0160:3b593
    eax = rol32(eax, 0x10);
loc_3b596: // 0160:3b596
    if (!(eax & 0x80808080))
        goto loc_3b5d2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b5a1));
    if (edx == 0x80808080)
        goto loc_3b5d2;
    if (dl & 0x80)
        goto loc_3b5b4;
    al = dl;
loc_3b5b4: // 0160:3b5b4
    if (dh & 0x80)
        goto loc_3b5bb;
    ah = dh;
loc_3b5bb: // 0160:3b5bb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b5c8;
    al = dl;
loc_3b5c8: // 0160:3b5c8
    if (dh & 0x80)
        goto loc_3b5cf;
    ah = dh;
loc_3b5cf: // 0160:3b5cf
    eax = rol32(eax, 0x10);
loc_3b5d2: // 0160:3b5d2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b5d4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b5da));
    if (!(eax & 0x80808080))
        goto loc_3b656;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b5e9));
    if (edx == 0x80808080)
        goto loc_3b61a;
    if (dl & 0x80)
        goto loc_3b5fc;
    al = dl;
loc_3b5fc: // 0160:3b5fc
    if (dh & 0x80)
        goto loc_3b603;
    ah = dh;
loc_3b603: // 0160:3b603
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b610;
    al = dl;
loc_3b610: // 0160:3b610
    if (dh & 0x80)
        goto loc_3b617;
    ah = dh;
loc_3b617: // 0160:3b617
    eax = rol32(eax, 0x10);
loc_3b61a: // 0160:3b61a
    if (!(eax & 0x80808080))
        goto loc_3b656;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b625));
    if (edx == 0x80808080)
        goto loc_3b656;
    if (dl & 0x80)
        goto loc_3b638;
    al = dl;
loc_3b638: // 0160:3b638
    if (dh & 0x80)
        goto loc_3b63f;
    ah = dh;
loc_3b63f: // 0160:3b63f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b64c;
    al = dl;
loc_3b64c: // 0160:3b64c
    if (dh & 0x80)
        goto loc_3b653;
    ah = dh;
loc_3b653: // 0160:3b653
    eax = rol32(eax, 0x10);
loc_3b656: // 0160:3b656
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b658), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b65e));
    if (!(eax & 0x80808080))
        goto loc_3b6da;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b66d));
    if (edx == 0x80808080)
        goto loc_3b69e;
    if (dl & 0x80)
        goto loc_3b680;
    al = dl;
loc_3b680: // 0160:3b680
    if (dh & 0x80)
        goto loc_3b687;
    ah = dh;
loc_3b687: // 0160:3b687
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b694;
    al = dl;
loc_3b694: // 0160:3b694
    if (dh & 0x80)
        goto loc_3b69b;
    ah = dh;
loc_3b69b: // 0160:3b69b
    eax = rol32(eax, 0x10);
loc_3b69e: // 0160:3b69e
    if (!(eax & 0x80808080))
        goto loc_3b6da;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b6a9));
    if (edx == 0x80808080)
        goto loc_3b6da;
    if (dl & 0x80)
        goto loc_3b6bc;
    al = dl;
loc_3b6bc: // 0160:3b6bc
    if (dh & 0x80)
        goto loc_3b6c3;
    ah = dh;
loc_3b6c3: // 0160:3b6c3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b6d0;
    al = dl;
loc_3b6d0: // 0160:3b6d0
    if (dh & 0x80)
        goto loc_3b6d7;
    ah = dh;
loc_3b6d7: // 0160:3b6d7
    eax = rol32(eax, 0x10);
loc_3b6da: // 0160:3b6da
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b6dc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b6e2));
    if (!(eax & 0x80808080))
        goto loc_3b75e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b6f1));
    if (edx == 0x80808080)
        goto loc_3b722;
    if (dl & 0x80)
        goto loc_3b704;
    al = dl;
loc_3b704: // 0160:3b704
    if (dh & 0x80)
        goto loc_3b70b;
    ah = dh;
loc_3b70b: // 0160:3b70b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b718;
    al = dl;
loc_3b718: // 0160:3b718
    if (dh & 0x80)
        goto loc_3b71f;
    ah = dh;
loc_3b71f: // 0160:3b71f
    eax = rol32(eax, 0x10);
loc_3b722: // 0160:3b722
    if (!(eax & 0x80808080))
        goto loc_3b75e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b72d));
    if (edx == 0x80808080)
        goto loc_3b75e;
    if (dl & 0x80)
        goto loc_3b740;
    al = dl;
loc_3b740: // 0160:3b740
    if (dh & 0x80)
        goto loc_3b747;
    ah = dh;
loc_3b747: // 0160:3b747
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b754;
    al = dl;
loc_3b754: // 0160:3b754
    if (dh & 0x80)
        goto loc_3b75b;
    ah = dh;
loc_3b75b: // 0160:3b75b
    eax = rol32(eax, 0x10);
loc_3b75e: // 0160:3b75e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b760), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b766));
    if (!(eax & 0x80808080))
        goto loc_3b7e2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b775));
    if (edx == 0x80808080)
        goto loc_3b7a6;
    if (dl & 0x80)
        goto loc_3b788;
    al = dl;
loc_3b788: // 0160:3b788
    if (dh & 0x80)
        goto loc_3b78f;
    ah = dh;
loc_3b78f: // 0160:3b78f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b79c;
    al = dl;
loc_3b79c: // 0160:3b79c
    if (dh & 0x80)
        goto loc_3b7a3;
    ah = dh;
loc_3b7a3: // 0160:3b7a3
    eax = rol32(eax, 0x10);
loc_3b7a6: // 0160:3b7a6
    if (!(eax & 0x80808080))
        goto loc_3b7e2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b7b1));
    if (edx == 0x80808080)
        goto loc_3b7e2;
    if (dl & 0x80)
        goto loc_3b7c4;
    al = dl;
loc_3b7c4: // 0160:3b7c4
    if (dh & 0x80)
        goto loc_3b7cb;
    ah = dh;
loc_3b7cb: // 0160:3b7cb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b7d8;
    al = dl;
loc_3b7d8: // 0160:3b7d8
    if (dh & 0x80)
        goto loc_3b7df;
    ah = dh;
loc_3b7df: // 0160:3b7df
    eax = rol32(eax, 0x10);
loc_3b7e2: // 0160:3b7e2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b7e4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b7ea));
    if (!(eax & 0x80808080))
        goto loc_3b866;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b7f9));
    if (edx == 0x80808080)
        goto loc_3b82a;
    if (dl & 0x80)
        goto loc_3b80c;
    al = dl;
loc_3b80c: // 0160:3b80c
    if (dh & 0x80)
        goto loc_3b813;
    ah = dh;
loc_3b813: // 0160:3b813
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b820;
    al = dl;
loc_3b820: // 0160:3b820
    if (dh & 0x80)
        goto loc_3b827;
    ah = dh;
loc_3b827: // 0160:3b827
    eax = rol32(eax, 0x10);
loc_3b82a: // 0160:3b82a
    if (!(eax & 0x80808080))
        goto loc_3b866;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b835));
    if (edx == 0x80808080)
        goto loc_3b866;
    if (dl & 0x80)
        goto loc_3b848;
    al = dl;
loc_3b848: // 0160:3b848
    if (dh & 0x80)
        goto loc_3b84f;
    ah = dh;
loc_3b84f: // 0160:3b84f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b85c;
    al = dl;
loc_3b85c: // 0160:3b85c
    if (dh & 0x80)
        goto loc_3b863;
    ah = dh;
loc_3b863: // 0160:3b863
    eax = rol32(eax, 0x10);
loc_3b866: // 0160:3b866
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b868), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b86e));
    if (!(eax & 0x80808080))
        goto loc_3b8ea;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b87d));
    if (edx == 0x80808080)
        goto loc_3b8ae;
    if (dl & 0x80)
        goto loc_3b890;
    al = dl;
loc_3b890: // 0160:3b890
    if (dh & 0x80)
        goto loc_3b897;
    ah = dh;
loc_3b897: // 0160:3b897
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b8a4;
    al = dl;
loc_3b8a4: // 0160:3b8a4
    if (dh & 0x80)
        goto loc_3b8ab;
    ah = dh;
loc_3b8ab: // 0160:3b8ab
    eax = rol32(eax, 0x10);
loc_3b8ae: // 0160:3b8ae
    if (!(eax & 0x80808080))
        goto loc_3b8ea;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b8b9));
    if (edx == 0x80808080)
        goto loc_3b8ea;
    if (dl & 0x80)
        goto loc_3b8cc;
    al = dl;
loc_3b8cc: // 0160:3b8cc
    if (dh & 0x80)
        goto loc_3b8d3;
    ah = dh;
loc_3b8d3: // 0160:3b8d3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b8e0;
    al = dl;
loc_3b8e0: // 0160:3b8e0
    if (dh & 0x80)
        goto loc_3b8e7;
    ah = dh;
loc_3b8e7: // 0160:3b8e7
    eax = rol32(eax, 0x10);
loc_3b8ea: // 0160:3b8ea
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b8ec), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b8f2));
    if (!(eax & 0x80808080))
        goto loc_3b96e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b901));
    if (edx == 0x80808080)
        goto loc_3b932;
    if (dl & 0x80)
        goto loc_3b914;
    al = dl;
loc_3b914: // 0160:3b914
    if (dh & 0x80)
        goto loc_3b91b;
    ah = dh;
loc_3b91b: // 0160:3b91b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b928;
    al = dl;
loc_3b928: // 0160:3b928
    if (dh & 0x80)
        goto loc_3b92f;
    ah = dh;
loc_3b92f: // 0160:3b92f
    eax = rol32(eax, 0x10);
loc_3b932: // 0160:3b932
    if (!(eax & 0x80808080))
        goto loc_3b96e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b93d));
    if (edx == 0x80808080)
        goto loc_3b96e;
    if (dl & 0x80)
        goto loc_3b950;
    al = dl;
loc_3b950: // 0160:3b950
    if (dh & 0x80)
        goto loc_3b957;
    ah = dh;
loc_3b957: // 0160:3b957
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b964;
    al = dl;
loc_3b964: // 0160:3b964
    if (dh & 0x80)
        goto loc_3b96b;
    ah = dh;
loc_3b96b: // 0160:3b96b
    eax = rol32(eax, 0x10);
loc_3b96e: // 0160:3b96e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b970), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b976));
    if (!(eax & 0x80808080))
        goto loc_3b9f2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3b985));
    if (edx == 0x80808080)
        goto loc_3b9b6;
    if (dl & 0x80)
        goto loc_3b998;
    al = dl;
loc_3b998: // 0160:3b998
    if (dh & 0x80)
        goto loc_3b99f;
    ah = dh;
loc_3b99f: // 0160:3b99f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b9ac;
    al = dl;
loc_3b9ac: // 0160:3b9ac
    if (dh & 0x80)
        goto loc_3b9b3;
    ah = dh;
loc_3b9b3: // 0160:3b9b3
    eax = rol32(eax, 0x10);
loc_3b9b6: // 0160:3b9b6
    if (!(eax & 0x80808080))
        goto loc_3b9f2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3b9c1));
    if (edx == 0x80808080)
        goto loc_3b9f2;
    if (dl & 0x80)
        goto loc_3b9d4;
    al = dl;
loc_3b9d4: // 0160:3b9d4
    if (dh & 0x80)
        goto loc_3b9db;
    ah = dh;
loc_3b9db: // 0160:3b9db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3b9e8;
    al = dl;
loc_3b9e8: // 0160:3b9e8
    if (dh & 0x80)
        goto loc_3b9ef;
    ah = dh;
loc_3b9ef: // 0160:3b9ef
    eax = rol32(eax, 0x10);
loc_3b9f2: // 0160:3b9f2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3b9f4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3b9fa));
    if (!(eax & 0x80808080))
        goto loc_3ba76;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ba09));
    if (edx == 0x80808080)
        goto loc_3ba3a;
    if (dl & 0x80)
        goto loc_3ba1c;
    al = dl;
loc_3ba1c: // 0160:3ba1c
    if (dh & 0x80)
        goto loc_3ba23;
    ah = dh;
loc_3ba23: // 0160:3ba23
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ba30;
    al = dl;
loc_3ba30: // 0160:3ba30
    if (dh & 0x80)
        goto loc_3ba37;
    ah = dh;
loc_3ba37: // 0160:3ba37
    eax = rol32(eax, 0x10);
loc_3ba3a: // 0160:3ba3a
    if (!(eax & 0x80808080))
        goto loc_3ba76;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ba45));
    if (edx == 0x80808080)
        goto loc_3ba76;
    if (dl & 0x80)
        goto loc_3ba58;
    al = dl;
loc_3ba58: // 0160:3ba58
    if (dh & 0x80)
        goto loc_3ba5f;
    ah = dh;
loc_3ba5f: // 0160:3ba5f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ba6c;
    al = dl;
loc_3ba6c: // 0160:3ba6c
    if (dh & 0x80)
        goto loc_3ba73;
    ah = dh;
loc_3ba73: // 0160:3ba73
    eax = rol32(eax, 0x10);
loc_3ba76: // 0160:3ba76
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ba78), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ba7e));
    if (!(eax & 0x80808080))
        goto loc_3bafa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ba8d));
    if (edx == 0x80808080)
        goto loc_3babe;
    if (dl & 0x80)
        goto loc_3baa0;
    al = dl;
loc_3baa0: // 0160:3baa0
    if (dh & 0x80)
        goto loc_3baa7;
    ah = dh;
loc_3baa7: // 0160:3baa7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bab4;
    al = dl;
loc_3bab4: // 0160:3bab4
    if (dh & 0x80)
        goto loc_3babb;
    ah = dh;
loc_3babb: // 0160:3babb
    eax = rol32(eax, 0x10);
loc_3babe: // 0160:3babe
    if (!(eax & 0x80808080))
        goto loc_3bafa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bac9));
    if (edx == 0x80808080)
        goto loc_3bafa;
    if (dl & 0x80)
        goto loc_3badc;
    al = dl;
loc_3badc: // 0160:3badc
    if (dh & 0x80)
        goto loc_3bae3;
    ah = dh;
loc_3bae3: // 0160:3bae3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3baf0;
    al = dl;
loc_3baf0: // 0160:3baf0
    if (dh & 0x80)
        goto loc_3baf7;
    ah = dh;
loc_3baf7: // 0160:3baf7
    eax = rol32(eax, 0x10);
loc_3bafa: // 0160:3bafa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bafc), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bb02));
    if (!(eax & 0x80808080))
        goto loc_3bb7e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bb11));
    if (edx == 0x80808080)
        goto loc_3bb42;
    if (dl & 0x80)
        goto loc_3bb24;
    al = dl;
loc_3bb24: // 0160:3bb24
    if (dh & 0x80)
        goto loc_3bb2b;
    ah = dh;
loc_3bb2b: // 0160:3bb2b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bb38;
    al = dl;
loc_3bb38: // 0160:3bb38
    if (dh & 0x80)
        goto loc_3bb3f;
    ah = dh;
loc_3bb3f: // 0160:3bb3f
    eax = rol32(eax, 0x10);
loc_3bb42: // 0160:3bb42
    if (!(eax & 0x80808080))
        goto loc_3bb7e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bb4d));
    if (edx == 0x80808080)
        goto loc_3bb7e;
    if (dl & 0x80)
        goto loc_3bb60;
    al = dl;
loc_3bb60: // 0160:3bb60
    if (dh & 0x80)
        goto loc_3bb67;
    ah = dh;
loc_3bb67: // 0160:3bb67
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bb74;
    al = dl;
loc_3bb74: // 0160:3bb74
    if (dh & 0x80)
        goto loc_3bb7b;
    ah = dh;
loc_3bb7b: // 0160:3bb7b
    eax = rol32(eax, 0x10);
loc_3bb7e: // 0160:3bb7e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bb80), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bb86));
    if (!(eax & 0x80808080))
        goto loc_3bc02;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bb95));
    if (edx == 0x80808080)
        goto loc_3bbc6;
    if (dl & 0x80)
        goto loc_3bba8;
    al = dl;
loc_3bba8: // 0160:3bba8
    if (dh & 0x80)
        goto loc_3bbaf;
    ah = dh;
loc_3bbaf: // 0160:3bbaf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bbbc;
    al = dl;
loc_3bbbc: // 0160:3bbbc
    if (dh & 0x80)
        goto loc_3bbc3;
    ah = dh;
loc_3bbc3: // 0160:3bbc3
    eax = rol32(eax, 0x10);
loc_3bbc6: // 0160:3bbc6
    if (!(eax & 0x80808080))
        goto loc_3bc02;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bbd1));
    if (edx == 0x80808080)
        goto loc_3bc02;
    if (dl & 0x80)
        goto loc_3bbe4;
    al = dl;
loc_3bbe4: // 0160:3bbe4
    if (dh & 0x80)
        goto loc_3bbeb;
    ah = dh;
loc_3bbeb: // 0160:3bbeb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bbf8;
    al = dl;
loc_3bbf8: // 0160:3bbf8
    if (dh & 0x80)
        goto loc_3bbff;
    ah = dh;
loc_3bbff: // 0160:3bbff
    eax = rol32(eax, 0x10);
loc_3bc02: // 0160:3bc02
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bc04), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bc0a));
    if (!(eax & 0x80808080))
        goto loc_3bc86;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bc19));
    if (edx == 0x80808080)
        goto loc_3bc4a;
    if (dl & 0x80)
        goto loc_3bc2c;
    al = dl;
loc_3bc2c: // 0160:3bc2c
    if (dh & 0x80)
        goto loc_3bc33;
    ah = dh;
loc_3bc33: // 0160:3bc33
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bc40;
    al = dl;
loc_3bc40: // 0160:3bc40
    if (dh & 0x80)
        goto loc_3bc47;
    ah = dh;
loc_3bc47: // 0160:3bc47
    eax = rol32(eax, 0x10);
loc_3bc4a: // 0160:3bc4a
    if (!(eax & 0x80808080))
        goto loc_3bc86;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bc55));
    if (edx == 0x80808080)
        goto loc_3bc86;
    if (dl & 0x80)
        goto loc_3bc68;
    al = dl;
loc_3bc68: // 0160:3bc68
    if (dh & 0x80)
        goto loc_3bc6f;
    ah = dh;
loc_3bc6f: // 0160:3bc6f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bc7c;
    al = dl;
loc_3bc7c: // 0160:3bc7c
    if (dh & 0x80)
        goto loc_3bc83;
    ah = dh;
loc_3bc83: // 0160:3bc83
    eax = rol32(eax, 0x10);
loc_3bc86: // 0160:3bc86
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bc88), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bc8e));
    if (!(eax & 0x80808080))
        goto loc_3bd0a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bc9d));
    if (edx == 0x80808080)
        goto loc_3bcce;
    if (dl & 0x80)
        goto loc_3bcb0;
    al = dl;
loc_3bcb0: // 0160:3bcb0
    if (dh & 0x80)
        goto loc_3bcb7;
    ah = dh;
loc_3bcb7: // 0160:3bcb7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bcc4;
    al = dl;
loc_3bcc4: // 0160:3bcc4
    if (dh & 0x80)
        goto loc_3bccb;
    ah = dh;
loc_3bccb: // 0160:3bccb
    eax = rol32(eax, 0x10);
loc_3bcce: // 0160:3bcce
    if (!(eax & 0x80808080))
        goto loc_3bd0a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bcd9));
    if (edx == 0x80808080)
        goto loc_3bd0a;
    if (dl & 0x80)
        goto loc_3bcec;
    al = dl;
loc_3bcec: // 0160:3bcec
    if (dh & 0x80)
        goto loc_3bcf3;
    ah = dh;
loc_3bcf3: // 0160:3bcf3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bd00;
    al = dl;
loc_3bd00: // 0160:3bd00
    if (dh & 0x80)
        goto loc_3bd07;
    ah = dh;
loc_3bd07: // 0160:3bd07
    eax = rol32(eax, 0x10);
loc_3bd0a: // 0160:3bd0a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bd0c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bd12));
    if (!(eax & 0x80808080))
        goto loc_3bd8e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bd21));
    if (edx == 0x80808080)
        goto loc_3bd52;
    if (dl & 0x80)
        goto loc_3bd34;
    al = dl;
loc_3bd34: // 0160:3bd34
    if (dh & 0x80)
        goto loc_3bd3b;
    ah = dh;
loc_3bd3b: // 0160:3bd3b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bd48;
    al = dl;
loc_3bd48: // 0160:3bd48
    if (dh & 0x80)
        goto loc_3bd4f;
    ah = dh;
loc_3bd4f: // 0160:3bd4f
    eax = rol32(eax, 0x10);
loc_3bd52: // 0160:3bd52
    if (!(eax & 0x80808080))
        goto loc_3bd8e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bd5d));
    if (edx == 0x80808080)
        goto loc_3bd8e;
    if (dl & 0x80)
        goto loc_3bd70;
    al = dl;
loc_3bd70: // 0160:3bd70
    if (dh & 0x80)
        goto loc_3bd77;
    ah = dh;
loc_3bd77: // 0160:3bd77
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bd84;
    al = dl;
loc_3bd84: // 0160:3bd84
    if (dh & 0x80)
        goto loc_3bd8b;
    ah = dh;
loc_3bd8b: // 0160:3bd8b
    eax = rol32(eax, 0x10);
loc_3bd8e: // 0160:3bd8e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bd90), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bd96));
    if (!(eax & 0x80808080))
        goto loc_3be12;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bda5));
    if (edx == 0x80808080)
        goto loc_3bdd6;
    if (dl & 0x80)
        goto loc_3bdb8;
    al = dl;
loc_3bdb8: // 0160:3bdb8
    if (dh & 0x80)
        goto loc_3bdbf;
    ah = dh;
loc_3bdbf: // 0160:3bdbf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bdcc;
    al = dl;
loc_3bdcc: // 0160:3bdcc
    if (dh & 0x80)
        goto loc_3bdd3;
    ah = dh;
loc_3bdd3: // 0160:3bdd3
    eax = rol32(eax, 0x10);
loc_3bdd6: // 0160:3bdd6
    if (!(eax & 0x80808080))
        goto loc_3be12;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bde1));
    if (edx == 0x80808080)
        goto loc_3be12;
    if (dl & 0x80)
        goto loc_3bdf4;
    al = dl;
loc_3bdf4: // 0160:3bdf4
    if (dh & 0x80)
        goto loc_3bdfb;
    ah = dh;
loc_3bdfb: // 0160:3bdfb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3be08;
    al = dl;
loc_3be08: // 0160:3be08
    if (dh & 0x80)
        goto loc_3be0f;
    ah = dh;
loc_3be0f: // 0160:3be0f
    eax = rol32(eax, 0x10);
loc_3be12: // 0160:3be12
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3be14), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3be1a));
    if (!(eax & 0x80808080))
        goto loc_3be96;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3be29));
    if (edx == 0x80808080)
        goto loc_3be5a;
    if (dl & 0x80)
        goto loc_3be3c;
    al = dl;
loc_3be3c: // 0160:3be3c
    if (dh & 0x80)
        goto loc_3be43;
    ah = dh;
loc_3be43: // 0160:3be43
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3be50;
    al = dl;
loc_3be50: // 0160:3be50
    if (dh & 0x80)
        goto loc_3be57;
    ah = dh;
loc_3be57: // 0160:3be57
    eax = rol32(eax, 0x10);
loc_3be5a: // 0160:3be5a
    if (!(eax & 0x80808080))
        goto loc_3be96;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3be65));
    if (edx == 0x80808080)
        goto loc_3be96;
    if (dl & 0x80)
        goto loc_3be78;
    al = dl;
loc_3be78: // 0160:3be78
    if (dh & 0x80)
        goto loc_3be7f;
    ah = dh;
loc_3be7f: // 0160:3be7f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3be8c;
    al = dl;
loc_3be8c: // 0160:3be8c
    if (dh & 0x80)
        goto loc_3be93;
    ah = dh;
loc_3be93: // 0160:3be93
    eax = rol32(eax, 0x10);
loc_3be96: // 0160:3be96
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3be98), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3be9e));
    if (!(eax & 0x80808080))
        goto loc_3bf1a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bead));
    if (edx == 0x80808080)
        goto loc_3bede;
    if (dl & 0x80)
        goto loc_3bec0;
    al = dl;
loc_3bec0: // 0160:3bec0
    if (dh & 0x80)
        goto loc_3bec7;
    ah = dh;
loc_3bec7: // 0160:3bec7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bed4;
    al = dl;
loc_3bed4: // 0160:3bed4
    if (dh & 0x80)
        goto loc_3bedb;
    ah = dh;
loc_3bedb: // 0160:3bedb
    eax = rol32(eax, 0x10);
loc_3bede: // 0160:3bede
    if (!(eax & 0x80808080))
        goto loc_3bf1a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bee9));
    if (edx == 0x80808080)
        goto loc_3bf1a;
    if (dl & 0x80)
        goto loc_3befc;
    al = dl;
loc_3befc: // 0160:3befc
    if (dh & 0x80)
        goto loc_3bf03;
    ah = dh;
loc_3bf03: // 0160:3bf03
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bf10;
    al = dl;
loc_3bf10: // 0160:3bf10
    if (dh & 0x80)
        goto loc_3bf17;
    ah = dh;
loc_3bf17: // 0160:3bf17
    eax = rol32(eax, 0x10);
loc_3bf1a: // 0160:3bf1a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bf1c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bf22));
    if (!(eax & 0x80808080))
        goto loc_3bf9e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bf31));
    if (edx == 0x80808080)
        goto loc_3bf62;
    if (dl & 0x80)
        goto loc_3bf44;
    al = dl;
loc_3bf44: // 0160:3bf44
    if (dh & 0x80)
        goto loc_3bf4b;
    ah = dh;
loc_3bf4b: // 0160:3bf4b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bf58;
    al = dl;
loc_3bf58: // 0160:3bf58
    if (dh & 0x80)
        goto loc_3bf5f;
    ah = dh;
loc_3bf5f: // 0160:3bf5f
    eax = rol32(eax, 0x10);
loc_3bf62: // 0160:3bf62
    if (!(eax & 0x80808080))
        goto loc_3bf9e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bf6d));
    if (edx == 0x80808080)
        goto loc_3bf9e;
    if (dl & 0x80)
        goto loc_3bf80;
    al = dl;
loc_3bf80: // 0160:3bf80
    if (dh & 0x80)
        goto loc_3bf87;
    ah = dh;
loc_3bf87: // 0160:3bf87
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bf94;
    al = dl;
loc_3bf94: // 0160:3bf94
    if (dh & 0x80)
        goto loc_3bf9b;
    ah = dh;
loc_3bf9b: // 0160:3bf9b
    eax = rol32(eax, 0x10);
loc_3bf9e: // 0160:3bf9e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3bfa0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3bfa6));
    if (!(eax & 0x80808080))
        goto loc_3c022;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3bfb5));
    if (edx == 0x80808080)
        goto loc_3bfe6;
    if (dl & 0x80)
        goto loc_3bfc8;
    al = dl;
loc_3bfc8: // 0160:3bfc8
    if (dh & 0x80)
        goto loc_3bfcf;
    ah = dh;
loc_3bfcf: // 0160:3bfcf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3bfdc;
    al = dl;
loc_3bfdc: // 0160:3bfdc
    if (dh & 0x80)
        goto loc_3bfe3;
    ah = dh;
loc_3bfe3: // 0160:3bfe3
    eax = rol32(eax, 0x10);
loc_3bfe6: // 0160:3bfe6
    if (!(eax & 0x80808080))
        goto loc_3c022;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3bff1));
    if (edx == 0x80808080)
        goto loc_3c022;
    if (dl & 0x80)
        goto loc_3c004;
    al = dl;
loc_3c004: // 0160:3c004
    if (dh & 0x80)
        goto loc_3c00b;
    ah = dh;
loc_3c00b: // 0160:3c00b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c018;
    al = dl;
loc_3c018: // 0160:3c018
    if (dh & 0x80)
        goto loc_3c01f;
    ah = dh;
loc_3c01f: // 0160:3c01f
    eax = rol32(eax, 0x10);
loc_3c022: // 0160:3c022
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c024), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c02a));
    if (!(eax & 0x80808080))
        goto loc_3c0a6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c039));
    if (edx == 0x80808080)
        goto loc_3c06a;
    if (dl & 0x80)
        goto loc_3c04c;
    al = dl;
loc_3c04c: // 0160:3c04c
    if (dh & 0x80)
        goto loc_3c053;
    ah = dh;
loc_3c053: // 0160:3c053
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c060;
    al = dl;
loc_3c060: // 0160:3c060
    if (dh & 0x80)
        goto loc_3c067;
    ah = dh;
loc_3c067: // 0160:3c067
    eax = rol32(eax, 0x10);
loc_3c06a: // 0160:3c06a
    if (!(eax & 0x80808080))
        goto loc_3c0a6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c075));
    if (edx == 0x80808080)
        goto loc_3c0a6;
    if (dl & 0x80)
        goto loc_3c088;
    al = dl;
loc_3c088: // 0160:3c088
    if (dh & 0x80)
        goto loc_3c08f;
    ah = dh;
loc_3c08f: // 0160:3c08f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c09c;
    al = dl;
loc_3c09c: // 0160:3c09c
    if (dh & 0x80)
        goto loc_3c0a3;
    ah = dh;
loc_3c0a3: // 0160:3c0a3
    eax = rol32(eax, 0x10);
loc_3c0a6: // 0160:3c0a6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c0a8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c0ae));
    if (!(eax & 0x80808080))
        goto loc_3c12a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c0bd));
    if (edx == 0x80808080)
        goto loc_3c0ee;
    if (dl & 0x80)
        goto loc_3c0d0;
    al = dl;
loc_3c0d0: // 0160:3c0d0
    if (dh & 0x80)
        goto loc_3c0d7;
    ah = dh;
loc_3c0d7: // 0160:3c0d7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c0e4;
    al = dl;
loc_3c0e4: // 0160:3c0e4
    if (dh & 0x80)
        goto loc_3c0eb;
    ah = dh;
loc_3c0eb: // 0160:3c0eb
    eax = rol32(eax, 0x10);
loc_3c0ee: // 0160:3c0ee
    if (!(eax & 0x80808080))
        goto loc_3c12a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c0f9));
    if (edx == 0x80808080)
        goto loc_3c12a;
    if (dl & 0x80)
        goto loc_3c10c;
    al = dl;
loc_3c10c: // 0160:3c10c
    if (dh & 0x80)
        goto loc_3c113;
    ah = dh;
loc_3c113: // 0160:3c113
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c120;
    al = dl;
loc_3c120: // 0160:3c120
    if (dh & 0x80)
        goto loc_3c127;
    ah = dh;
loc_3c127: // 0160:3c127
    eax = rol32(eax, 0x10);
loc_3c12a: // 0160:3c12a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c12c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c132));
    if (!(eax & 0x80808080))
        goto loc_3c1ae;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c141));
    if (edx == 0x80808080)
        goto loc_3c172;
    if (dl & 0x80)
        goto loc_3c154;
    al = dl;
loc_3c154: // 0160:3c154
    if (dh & 0x80)
        goto loc_3c15b;
    ah = dh;
loc_3c15b: // 0160:3c15b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c168;
    al = dl;
loc_3c168: // 0160:3c168
    if (dh & 0x80)
        goto loc_3c16f;
    ah = dh;
loc_3c16f: // 0160:3c16f
    eax = rol32(eax, 0x10);
loc_3c172: // 0160:3c172
    if (!(eax & 0x80808080))
        goto loc_3c1ae;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c17d));
    if (edx == 0x80808080)
        goto loc_3c1ae;
    if (dl & 0x80)
        goto loc_3c190;
    al = dl;
loc_3c190: // 0160:3c190
    if (dh & 0x80)
        goto loc_3c197;
    ah = dh;
loc_3c197: // 0160:3c197
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c1a4;
    al = dl;
loc_3c1a4: // 0160:3c1a4
    if (dh & 0x80)
        goto loc_3c1ab;
    ah = dh;
loc_3c1ab: // 0160:3c1ab
    eax = rol32(eax, 0x10);
loc_3c1ae: // 0160:3c1ae
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c1b0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c1b6));
    if (!(eax & 0x80808080))
        goto loc_3c232;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c1c5));
    if (edx == 0x80808080)
        goto loc_3c1f6;
    if (dl & 0x80)
        goto loc_3c1d8;
    al = dl;
loc_3c1d8: // 0160:3c1d8
    if (dh & 0x80)
        goto loc_3c1df;
    ah = dh;
loc_3c1df: // 0160:3c1df
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c1ec;
    al = dl;
loc_3c1ec: // 0160:3c1ec
    if (dh & 0x80)
        goto loc_3c1f3;
    ah = dh;
loc_3c1f3: // 0160:3c1f3
    eax = rol32(eax, 0x10);
loc_3c1f6: // 0160:3c1f6
    if (!(eax & 0x80808080))
        goto loc_3c232;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c201));
    if (edx == 0x80808080)
        goto loc_3c232;
    if (dl & 0x80)
        goto loc_3c214;
    al = dl;
loc_3c214: // 0160:3c214
    if (dh & 0x80)
        goto loc_3c21b;
    ah = dh;
loc_3c21b: // 0160:3c21b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c228;
    al = dl;
loc_3c228: // 0160:3c228
    if (dh & 0x80)
        goto loc_3c22f;
    ah = dh;
loc_3c22f: // 0160:3c22f
    eax = rol32(eax, 0x10);
loc_3c232: // 0160:3c232
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c234), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c23a));
    if (!(eax & 0x80808080))
        goto loc_3c2b6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c249));
    if (edx == 0x80808080)
        goto loc_3c27a;
    if (dl & 0x80)
        goto loc_3c25c;
    al = dl;
loc_3c25c: // 0160:3c25c
    if (dh & 0x80)
        goto loc_3c263;
    ah = dh;
loc_3c263: // 0160:3c263
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c270;
    al = dl;
loc_3c270: // 0160:3c270
    if (dh & 0x80)
        goto loc_3c277;
    ah = dh;
loc_3c277: // 0160:3c277
    eax = rol32(eax, 0x10);
loc_3c27a: // 0160:3c27a
    if (!(eax & 0x80808080))
        goto loc_3c2b6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c285));
    if (edx == 0x80808080)
        goto loc_3c2b6;
    if (dl & 0x80)
        goto loc_3c298;
    al = dl;
loc_3c298: // 0160:3c298
    if (dh & 0x80)
        goto loc_3c29f;
    ah = dh;
loc_3c29f: // 0160:3c29f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c2ac;
    al = dl;
loc_3c2ac: // 0160:3c2ac
    if (dh & 0x80)
        goto loc_3c2b3;
    ah = dh;
loc_3c2b3: // 0160:3c2b3
    eax = rol32(eax, 0x10);
loc_3c2b6: // 0160:3c2b6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c2b8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c2be));
    if (!(eax & 0x80808080))
        goto loc_3c33a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c2cd));
    if (edx == 0x80808080)
        goto loc_3c2fe;
    if (dl & 0x80)
        goto loc_3c2e0;
    al = dl;
loc_3c2e0: // 0160:3c2e0
    if (dh & 0x80)
        goto loc_3c2e7;
    ah = dh;
loc_3c2e7: // 0160:3c2e7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c2f4;
    al = dl;
loc_3c2f4: // 0160:3c2f4
    if (dh & 0x80)
        goto loc_3c2fb;
    ah = dh;
loc_3c2fb: // 0160:3c2fb
    eax = rol32(eax, 0x10);
loc_3c2fe: // 0160:3c2fe
    if (!(eax & 0x80808080))
        goto loc_3c33a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c309));
    if (edx == 0x80808080)
        goto loc_3c33a;
    if (dl & 0x80)
        goto loc_3c31c;
    al = dl;
loc_3c31c: // 0160:3c31c
    if (dh & 0x80)
        goto loc_3c323;
    ah = dh;
loc_3c323: // 0160:3c323
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c330;
    al = dl;
loc_3c330: // 0160:3c330
    if (dh & 0x80)
        goto loc_3c337;
    ah = dh;
loc_3c337: // 0160:3c337
    eax = rol32(eax, 0x10);
loc_3c33a: // 0160:3c33a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c33c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c342));
    if (!(eax & 0x80808080))
        goto loc_3c3be;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c351));
    if (edx == 0x80808080)
        goto loc_3c382;
    if (dl & 0x80)
        goto loc_3c364;
    al = dl;
loc_3c364: // 0160:3c364
    if (dh & 0x80)
        goto loc_3c36b;
    ah = dh;
loc_3c36b: // 0160:3c36b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c378;
    al = dl;
loc_3c378: // 0160:3c378
    if (dh & 0x80)
        goto loc_3c37f;
    ah = dh;
loc_3c37f: // 0160:3c37f
    eax = rol32(eax, 0x10);
loc_3c382: // 0160:3c382
    if (!(eax & 0x80808080))
        goto loc_3c3be;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c38d));
    if (edx == 0x80808080)
        goto loc_3c3be;
    if (dl & 0x80)
        goto loc_3c3a0;
    al = dl;
loc_3c3a0: // 0160:3c3a0
    if (dh & 0x80)
        goto loc_3c3a7;
    ah = dh;
loc_3c3a7: // 0160:3c3a7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c3b4;
    al = dl;
loc_3c3b4: // 0160:3c3b4
    if (dh & 0x80)
        goto loc_3c3bb;
    ah = dh;
loc_3c3bb: // 0160:3c3bb
    eax = rol32(eax, 0x10);
loc_3c3be: // 0160:3c3be
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c3c0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c3c6));
    if (!(eax & 0x80808080))
        goto loc_3c442;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c3d5));
    if (edx == 0x80808080)
        goto loc_3c406;
    if (dl & 0x80)
        goto loc_3c3e8;
    al = dl;
loc_3c3e8: // 0160:3c3e8
    if (dh & 0x80)
        goto loc_3c3ef;
    ah = dh;
loc_3c3ef: // 0160:3c3ef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c3fc;
    al = dl;
loc_3c3fc: // 0160:3c3fc
    if (dh & 0x80)
        goto loc_3c403;
    ah = dh;
loc_3c403: // 0160:3c403
    eax = rol32(eax, 0x10);
loc_3c406: // 0160:3c406
    if (!(eax & 0x80808080))
        goto loc_3c442;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c411));
    if (edx == 0x80808080)
        goto loc_3c442;
    if (dl & 0x80)
        goto loc_3c424;
    al = dl;
loc_3c424: // 0160:3c424
    if (dh & 0x80)
        goto loc_3c42b;
    ah = dh;
loc_3c42b: // 0160:3c42b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c438;
    al = dl;
loc_3c438: // 0160:3c438
    if (dh & 0x80)
        goto loc_3c43f;
    ah = dh;
loc_3c43f: // 0160:3c43f
    eax = rol32(eax, 0x10);
loc_3c442: // 0160:3c442
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c444), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c44a));
    if (!(eax & 0x80808080))
        goto loc_3c4c6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c459));
    if (edx == 0x80808080)
        goto loc_3c48a;
    if (dl & 0x80)
        goto loc_3c46c;
    al = dl;
loc_3c46c: // 0160:3c46c
    if (dh & 0x80)
        goto loc_3c473;
    ah = dh;
loc_3c473: // 0160:3c473
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c480;
    al = dl;
loc_3c480: // 0160:3c480
    if (dh & 0x80)
        goto loc_3c487;
    ah = dh;
loc_3c487: // 0160:3c487
    eax = rol32(eax, 0x10);
loc_3c48a: // 0160:3c48a
    if (!(eax & 0x80808080))
        goto loc_3c4c6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c495));
    if (edx == 0x80808080)
        goto loc_3c4c6;
    if (dl & 0x80)
        goto loc_3c4a8;
    al = dl;
loc_3c4a8: // 0160:3c4a8
    if (dh & 0x80)
        goto loc_3c4af;
    ah = dh;
loc_3c4af: // 0160:3c4af
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c4bc;
    al = dl;
loc_3c4bc: // 0160:3c4bc
    if (dh & 0x80)
        goto loc_3c4c3;
    ah = dh;
loc_3c4c3: // 0160:3c4c3
    eax = rol32(eax, 0x10);
loc_3c4c6: // 0160:3c4c6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c4c8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c4ce));
    if (!(eax & 0x80808080))
        goto loc_3c54a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c4dd));
    if (edx == 0x80808080)
        goto loc_3c50e;
    if (dl & 0x80)
        goto loc_3c4f0;
    al = dl;
loc_3c4f0: // 0160:3c4f0
    if (dh & 0x80)
        goto loc_3c4f7;
    ah = dh;
loc_3c4f7: // 0160:3c4f7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c504;
    al = dl;
loc_3c504: // 0160:3c504
    if (dh & 0x80)
        goto loc_3c50b;
    ah = dh;
loc_3c50b: // 0160:3c50b
    eax = rol32(eax, 0x10);
loc_3c50e: // 0160:3c50e
    if (!(eax & 0x80808080))
        goto loc_3c54a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c519));
    if (edx == 0x80808080)
        goto loc_3c54a;
    if (dl & 0x80)
        goto loc_3c52c;
    al = dl;
loc_3c52c: // 0160:3c52c
    if (dh & 0x80)
        goto loc_3c533;
    ah = dh;
loc_3c533: // 0160:3c533
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c540;
    al = dl;
loc_3c540: // 0160:3c540
    if (dh & 0x80)
        goto loc_3c547;
    ah = dh;
loc_3c547: // 0160:3c547
    eax = rol32(eax, 0x10);
loc_3c54a: // 0160:3c54a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c54c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c552));
    if (!(eax & 0x80808080))
        goto loc_3c5ce;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c561));
    if (edx == 0x80808080)
        goto loc_3c592;
    if (dl & 0x80)
        goto loc_3c574;
    al = dl;
loc_3c574: // 0160:3c574
    if (dh & 0x80)
        goto loc_3c57b;
    ah = dh;
loc_3c57b: // 0160:3c57b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c588;
    al = dl;
loc_3c588: // 0160:3c588
    if (dh & 0x80)
        goto loc_3c58f;
    ah = dh;
loc_3c58f: // 0160:3c58f
    eax = rol32(eax, 0x10);
loc_3c592: // 0160:3c592
    if (!(eax & 0x80808080))
        goto loc_3c5ce;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c59d));
    if (edx == 0x80808080)
        goto loc_3c5ce;
    if (dl & 0x80)
        goto loc_3c5b0;
    al = dl;
loc_3c5b0: // 0160:3c5b0
    if (dh & 0x80)
        goto loc_3c5b7;
    ah = dh;
loc_3c5b7: // 0160:3c5b7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c5c4;
    al = dl;
loc_3c5c4: // 0160:3c5c4
    if (dh & 0x80)
        goto loc_3c5cb;
    ah = dh;
loc_3c5cb: // 0160:3c5cb
    eax = rol32(eax, 0x10);
loc_3c5ce: // 0160:3c5ce
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c5d0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c5d6));
    if (!(eax & 0x80808080))
        goto loc_3c652;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c5e5));
    if (edx == 0x80808080)
        goto loc_3c616;
    if (dl & 0x80)
        goto loc_3c5f8;
    al = dl;
loc_3c5f8: // 0160:3c5f8
    if (dh & 0x80)
        goto loc_3c5ff;
    ah = dh;
loc_3c5ff: // 0160:3c5ff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c60c;
    al = dl;
loc_3c60c: // 0160:3c60c
    if (dh & 0x80)
        goto loc_3c613;
    ah = dh;
loc_3c613: // 0160:3c613
    eax = rol32(eax, 0x10);
loc_3c616: // 0160:3c616
    if (!(eax & 0x80808080))
        goto loc_3c652;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c621));
    if (edx == 0x80808080)
        goto loc_3c652;
    if (dl & 0x80)
        goto loc_3c634;
    al = dl;
loc_3c634: // 0160:3c634
    if (dh & 0x80)
        goto loc_3c63b;
    ah = dh;
loc_3c63b: // 0160:3c63b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c648;
    al = dl;
loc_3c648: // 0160:3c648
    if (dh & 0x80)
        goto loc_3c64f;
    ah = dh;
loc_3c64f: // 0160:3c64f
    eax = rol32(eax, 0x10);
loc_3c652: // 0160:3c652
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c654), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c65a));
    if (!(eax & 0x80808080))
        goto loc_3c6d6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c669));
    if (edx == 0x80808080)
        goto loc_3c69a;
    if (dl & 0x80)
        goto loc_3c67c;
    al = dl;
loc_3c67c: // 0160:3c67c
    if (dh & 0x80)
        goto loc_3c683;
    ah = dh;
loc_3c683: // 0160:3c683
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c690;
    al = dl;
loc_3c690: // 0160:3c690
    if (dh & 0x80)
        goto loc_3c697;
    ah = dh;
loc_3c697: // 0160:3c697
    eax = rol32(eax, 0x10);
loc_3c69a: // 0160:3c69a
    if (!(eax & 0x80808080))
        goto loc_3c6d6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c6a5));
    if (edx == 0x80808080)
        goto loc_3c6d6;
    if (dl & 0x80)
        goto loc_3c6b8;
    al = dl;
loc_3c6b8: // 0160:3c6b8
    if (dh & 0x80)
        goto loc_3c6bf;
    ah = dh;
loc_3c6bf: // 0160:3c6bf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c6cc;
    al = dl;
loc_3c6cc: // 0160:3c6cc
    if (dh & 0x80)
        goto loc_3c6d3;
    ah = dh;
loc_3c6d3: // 0160:3c6d3
    eax = rol32(eax, 0x10);
loc_3c6d6: // 0160:3c6d6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c6d8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c6de));
    if (!(eax & 0x80808080))
        goto loc_3c75a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c6ed));
    if (edx == 0x80808080)
        goto loc_3c71e;
    if (dl & 0x80)
        goto loc_3c700;
    al = dl;
loc_3c700: // 0160:3c700
    if (dh & 0x80)
        goto loc_3c707;
    ah = dh;
loc_3c707: // 0160:3c707
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c714;
    al = dl;
loc_3c714: // 0160:3c714
    if (dh & 0x80)
        goto loc_3c71b;
    ah = dh;
loc_3c71b: // 0160:3c71b
    eax = rol32(eax, 0x10);
loc_3c71e: // 0160:3c71e
    if (!(eax & 0x80808080))
        goto loc_3c75a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c729));
    if (edx == 0x80808080)
        goto loc_3c75a;
    if (dl & 0x80)
        goto loc_3c73c;
    al = dl;
loc_3c73c: // 0160:3c73c
    if (dh & 0x80)
        goto loc_3c743;
    ah = dh;
loc_3c743: // 0160:3c743
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c750;
    al = dl;
loc_3c750: // 0160:3c750
    if (dh & 0x80)
        goto loc_3c757;
    ah = dh;
loc_3c757: // 0160:3c757
    eax = rol32(eax, 0x10);
loc_3c75a: // 0160:3c75a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c75c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c762));
    if (!(eax & 0x80808080))
        goto loc_3c7de;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c771));
    if (edx == 0x80808080)
        goto loc_3c7a2;
    if (dl & 0x80)
        goto loc_3c784;
    al = dl;
loc_3c784: // 0160:3c784
    if (dh & 0x80)
        goto loc_3c78b;
    ah = dh;
loc_3c78b: // 0160:3c78b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c798;
    al = dl;
loc_3c798: // 0160:3c798
    if (dh & 0x80)
        goto loc_3c79f;
    ah = dh;
loc_3c79f: // 0160:3c79f
    eax = rol32(eax, 0x10);
loc_3c7a2: // 0160:3c7a2
    if (!(eax & 0x80808080))
        goto loc_3c7de;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c7ad));
    if (edx == 0x80808080)
        goto loc_3c7de;
    if (dl & 0x80)
        goto loc_3c7c0;
    al = dl;
loc_3c7c0: // 0160:3c7c0
    if (dh & 0x80)
        goto loc_3c7c7;
    ah = dh;
loc_3c7c7: // 0160:3c7c7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c7d4;
    al = dl;
loc_3c7d4: // 0160:3c7d4
    if (dh & 0x80)
        goto loc_3c7db;
    ah = dh;
loc_3c7db: // 0160:3c7db
    eax = rol32(eax, 0x10);
loc_3c7de: // 0160:3c7de
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c7e0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c7e6));
    if (!(eax & 0x80808080))
        goto loc_3c862;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c7f5));
    if (edx == 0x80808080)
        goto loc_3c826;
    if (dl & 0x80)
        goto loc_3c808;
    al = dl;
loc_3c808: // 0160:3c808
    if (dh & 0x80)
        goto loc_3c80f;
    ah = dh;
loc_3c80f: // 0160:3c80f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c81c;
    al = dl;
loc_3c81c: // 0160:3c81c
    if (dh & 0x80)
        goto loc_3c823;
    ah = dh;
loc_3c823: // 0160:3c823
    eax = rol32(eax, 0x10);
loc_3c826: // 0160:3c826
    if (!(eax & 0x80808080))
        goto loc_3c862;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c831));
    if (edx == 0x80808080)
        goto loc_3c862;
    if (dl & 0x80)
        goto loc_3c844;
    al = dl;
loc_3c844: // 0160:3c844
    if (dh & 0x80)
        goto loc_3c84b;
    ah = dh;
loc_3c84b: // 0160:3c84b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c858;
    al = dl;
loc_3c858: // 0160:3c858
    if (dh & 0x80)
        goto loc_3c85f;
    ah = dh;
loc_3c85f: // 0160:3c85f
    eax = rol32(eax, 0x10);
loc_3c862: // 0160:3c862
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c864), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c86a));
    if (!(eax & 0x80808080))
        goto loc_3c8e6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c879));
    if (edx == 0x80808080)
        goto loc_3c8aa;
    if (dl & 0x80)
        goto loc_3c88c;
    al = dl;
loc_3c88c: // 0160:3c88c
    if (dh & 0x80)
        goto loc_3c893;
    ah = dh;
loc_3c893: // 0160:3c893
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c8a0;
    al = dl;
loc_3c8a0: // 0160:3c8a0
    if (dh & 0x80)
        goto loc_3c8a7;
    ah = dh;
loc_3c8a7: // 0160:3c8a7
    eax = rol32(eax, 0x10);
loc_3c8aa: // 0160:3c8aa
    if (!(eax & 0x80808080))
        goto loc_3c8e6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c8b5));
    if (edx == 0x80808080)
        goto loc_3c8e6;
    if (dl & 0x80)
        goto loc_3c8c8;
    al = dl;
loc_3c8c8: // 0160:3c8c8
    if (dh & 0x80)
        goto loc_3c8cf;
    ah = dh;
loc_3c8cf: // 0160:3c8cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c8dc;
    al = dl;
loc_3c8dc: // 0160:3c8dc
    if (dh & 0x80)
        goto loc_3c8e3;
    ah = dh;
loc_3c8e3: // 0160:3c8e3
    eax = rol32(eax, 0x10);
loc_3c8e6: // 0160:3c8e6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c8e8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c8ee));
    if (!(eax & 0x80808080))
        goto loc_3c96a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c8fd));
    if (edx == 0x80808080)
        goto loc_3c92e;
    if (dl & 0x80)
        goto loc_3c910;
    al = dl;
loc_3c910: // 0160:3c910
    if (dh & 0x80)
        goto loc_3c917;
    ah = dh;
loc_3c917: // 0160:3c917
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c924;
    al = dl;
loc_3c924: // 0160:3c924
    if (dh & 0x80)
        goto loc_3c92b;
    ah = dh;
loc_3c92b: // 0160:3c92b
    eax = rol32(eax, 0x10);
loc_3c92e: // 0160:3c92e
    if (!(eax & 0x80808080))
        goto loc_3c96a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c939));
    if (edx == 0x80808080)
        goto loc_3c96a;
    if (dl & 0x80)
        goto loc_3c94c;
    al = dl;
loc_3c94c: // 0160:3c94c
    if (dh & 0x80)
        goto loc_3c953;
    ah = dh;
loc_3c953: // 0160:3c953
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c960;
    al = dl;
loc_3c960: // 0160:3c960
    if (dh & 0x80)
        goto loc_3c967;
    ah = dh;
loc_3c967: // 0160:3c967
    eax = rol32(eax, 0x10);
loc_3c96a: // 0160:3c96a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c96c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c972));
    if (!(eax & 0x80808080))
        goto loc_3c9ee;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3c981));
    if (edx == 0x80808080)
        goto loc_3c9b2;
    if (dl & 0x80)
        goto loc_3c994;
    al = dl;
loc_3c994: // 0160:3c994
    if (dh & 0x80)
        goto loc_3c99b;
    ah = dh;
loc_3c99b: // 0160:3c99b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c9a8;
    al = dl;
loc_3c9a8: // 0160:3c9a8
    if (dh & 0x80)
        goto loc_3c9af;
    ah = dh;
loc_3c9af: // 0160:3c9af
    eax = rol32(eax, 0x10);
loc_3c9b2: // 0160:3c9b2
    if (!(eax & 0x80808080))
        goto loc_3c9ee;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3c9bd));
    if (edx == 0x80808080)
        goto loc_3c9ee;
    if (dl & 0x80)
        goto loc_3c9d0;
    al = dl;
loc_3c9d0: // 0160:3c9d0
    if (dh & 0x80)
        goto loc_3c9d7;
    ah = dh;
loc_3c9d7: // 0160:3c9d7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3c9e4;
    al = dl;
loc_3c9e4: // 0160:3c9e4
    if (dh & 0x80)
        goto loc_3c9eb;
    ah = dh;
loc_3c9eb: // 0160:3c9eb
    eax = rol32(eax, 0x10);
loc_3c9ee: // 0160:3c9ee
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3c9f0), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3c9f6));
    if (!(eax & 0x80808080))
        goto loc_3ca72;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ca05));
    if (edx == 0x80808080)
        goto loc_3ca36;
    if (dl & 0x80)
        goto loc_3ca18;
    al = dl;
loc_3ca18: // 0160:3ca18
    if (dh & 0x80)
        goto loc_3ca1f;
    ah = dh;
loc_3ca1f: // 0160:3ca1f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ca2c;
    al = dl;
loc_3ca2c: // 0160:3ca2c
    if (dh & 0x80)
        goto loc_3ca33;
    ah = dh;
loc_3ca33: // 0160:3ca33
    eax = rol32(eax, 0x10);
loc_3ca36: // 0160:3ca36
    if (!(eax & 0x80808080))
        goto loc_3ca72;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ca41));
    if (edx == 0x80808080)
        goto loc_3ca72;
    if (dl & 0x80)
        goto loc_3ca54;
    al = dl;
loc_3ca54: // 0160:3ca54
    if (dh & 0x80)
        goto loc_3ca5b;
    ah = dh;
loc_3ca5b: // 0160:3ca5b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ca68;
    al = dl;
loc_3ca68: // 0160:3ca68
    if (dh & 0x80)
        goto loc_3ca6f;
    ah = dh;
loc_3ca6f: // 0160:3ca6f
    eax = rol32(eax, 0x10);
loc_3ca72: // 0160:3ca72
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ca74), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ca7a));
    if (!(eax & 0x80808080))
        goto loc_3caf6;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ca89));
    if (edx == 0x80808080)
        goto loc_3caba;
    if (dl & 0x80)
        goto loc_3ca9c;
    al = dl;
loc_3ca9c: // 0160:3ca9c
    if (dh & 0x80)
        goto loc_3caa3;
    ah = dh;
loc_3caa3: // 0160:3caa3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cab0;
    al = dl;
loc_3cab0: // 0160:3cab0
    if (dh & 0x80)
        goto loc_3cab7;
    ah = dh;
loc_3cab7: // 0160:3cab7
    eax = rol32(eax, 0x10);
loc_3caba: // 0160:3caba
    if (!(eax & 0x80808080))
        goto loc_3caf6;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cac5));
    if (edx == 0x80808080)
        goto loc_3caf6;
    if (dl & 0x80)
        goto loc_3cad8;
    al = dl;
loc_3cad8: // 0160:3cad8
    if (dh & 0x80)
        goto loc_3cadf;
    ah = dh;
loc_3cadf: // 0160:3cadf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3caec;
    al = dl;
loc_3caec: // 0160:3caec
    if (dh & 0x80)
        goto loc_3caf3;
    ah = dh;
loc_3caf3: // 0160:3caf3
    eax = rol32(eax, 0x10);
loc_3caf6: // 0160:3caf6
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3caf8), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cafe));
    if (!(eax & 0x80808080))
        goto loc_3cb7a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cb0d));
    if (edx == 0x80808080)
        goto loc_3cb3e;
    if (dl & 0x80)
        goto loc_3cb20;
    al = dl;
loc_3cb20: // 0160:3cb20
    if (dh & 0x80)
        goto loc_3cb27;
    ah = dh;
loc_3cb27: // 0160:3cb27
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cb34;
    al = dl;
loc_3cb34: // 0160:3cb34
    if (dh & 0x80)
        goto loc_3cb3b;
    ah = dh;
loc_3cb3b: // 0160:3cb3b
    eax = rol32(eax, 0x10);
loc_3cb3e: // 0160:3cb3e
    if (!(eax & 0x80808080))
        goto loc_3cb7a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cb49));
    if (edx == 0x80808080)
        goto loc_3cb7a;
    if (dl & 0x80)
        goto loc_3cb5c;
    al = dl;
loc_3cb5c: // 0160:3cb5c
    if (dh & 0x80)
        goto loc_3cb63;
    ah = dh;
loc_3cb63: // 0160:3cb63
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cb70;
    al = dl;
loc_3cb70: // 0160:3cb70
    if (dh & 0x80)
        goto loc_3cb77;
    ah = dh;
loc_3cb77: // 0160:3cb77
    eax = rol32(eax, 0x10);
loc_3cb7a: // 0160:3cb7a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cb7c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cb82));
    if (!(eax & 0x80808080))
        goto loc_3cbfe;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cb91));
    if (edx == 0x80808080)
        goto loc_3cbc2;
    if (dl & 0x80)
        goto loc_3cba4;
    al = dl;
loc_3cba4: // 0160:3cba4
    if (dh & 0x80)
        goto loc_3cbab;
    ah = dh;
loc_3cbab: // 0160:3cbab
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cbb8;
    al = dl;
loc_3cbb8: // 0160:3cbb8
    if (dh & 0x80)
        goto loc_3cbbf;
    ah = dh;
loc_3cbbf: // 0160:3cbbf
    eax = rol32(eax, 0x10);
loc_3cbc2: // 0160:3cbc2
    if (!(eax & 0x80808080))
        goto loc_3cbfe;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cbcd));
    if (edx == 0x80808080)
        goto loc_3cbfe;
    if (dl & 0x80)
        goto loc_3cbe0;
    al = dl;
loc_3cbe0: // 0160:3cbe0
    if (dh & 0x80)
        goto loc_3cbe7;
    ah = dh;
loc_3cbe7: // 0160:3cbe7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cbf4;
    al = dl;
loc_3cbf4: // 0160:3cbf4
    if (dh & 0x80)
        goto loc_3cbfb;
    ah = dh;
loc_3cbfb: // 0160:3cbfb
    eax = rol32(eax, 0x10);
loc_3cbfe: // 0160:3cbfe
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cc00), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cc06));
    if (!(eax & 0x80808080))
        goto loc_3cc82;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cc15));
    if (edx == 0x80808080)
        goto loc_3cc46;
    if (dl & 0x80)
        goto loc_3cc28;
    al = dl;
loc_3cc28: // 0160:3cc28
    if (dh & 0x80)
        goto loc_3cc2f;
    ah = dh;
loc_3cc2f: // 0160:3cc2f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cc3c;
    al = dl;
loc_3cc3c: // 0160:3cc3c
    if (dh & 0x80)
        goto loc_3cc43;
    ah = dh;
loc_3cc43: // 0160:3cc43
    eax = rol32(eax, 0x10);
loc_3cc46: // 0160:3cc46
    if (!(eax & 0x80808080))
        goto loc_3cc82;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cc51));
    if (edx == 0x80808080)
        goto loc_3cc82;
    if (dl & 0x80)
        goto loc_3cc64;
    al = dl;
loc_3cc64: // 0160:3cc64
    if (dh & 0x80)
        goto loc_3cc6b;
    ah = dh;
loc_3cc6b: // 0160:3cc6b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cc78;
    al = dl;
loc_3cc78: // 0160:3cc78
    if (dh & 0x80)
        goto loc_3cc7f;
    ah = dh;
loc_3cc7f: // 0160:3cc7f
    eax = rol32(eax, 0x10);
loc_3cc82: // 0160:3cc82
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cc84), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cc8a));
    if (!(eax & 0x80808080))
        goto loc_3cd06;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cc99));
    if (edx == 0x80808080)
        goto loc_3ccca;
    if (dl & 0x80)
        goto loc_3ccac;
    al = dl;
loc_3ccac: // 0160:3ccac
    if (dh & 0x80)
        goto loc_3ccb3;
    ah = dh;
loc_3ccb3: // 0160:3ccb3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ccc0;
    al = dl;
loc_3ccc0: // 0160:3ccc0
    if (dh & 0x80)
        goto loc_3ccc7;
    ah = dh;
loc_3ccc7: // 0160:3ccc7
    eax = rol32(eax, 0x10);
loc_3ccca: // 0160:3ccca
    if (!(eax & 0x80808080))
        goto loc_3cd06;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ccd5));
    if (edx == 0x80808080)
        goto loc_3cd06;
    if (dl & 0x80)
        goto loc_3cce8;
    al = dl;
loc_3cce8: // 0160:3cce8
    if (dh & 0x80)
        goto loc_3ccef;
    ah = dh;
loc_3ccef: // 0160:3ccef
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ccfc;
    al = dl;
loc_3ccfc: // 0160:3ccfc
    if (dh & 0x80)
        goto loc_3cd03;
    ah = dh;
loc_3cd03: // 0160:3cd03
    eax = rol32(eax, 0x10);
loc_3cd06: // 0160:3cd06
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cd08), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cd0e));
    if (!(eax & 0x80808080))
        goto loc_3cd8a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cd1d));
    if (edx == 0x80808080)
        goto loc_3cd4e;
    if (dl & 0x80)
        goto loc_3cd30;
    al = dl;
loc_3cd30: // 0160:3cd30
    if (dh & 0x80)
        goto loc_3cd37;
    ah = dh;
loc_3cd37: // 0160:3cd37
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cd44;
    al = dl;
loc_3cd44: // 0160:3cd44
    if (dh & 0x80)
        goto loc_3cd4b;
    ah = dh;
loc_3cd4b: // 0160:3cd4b
    eax = rol32(eax, 0x10);
loc_3cd4e: // 0160:3cd4e
    if (!(eax & 0x80808080))
        goto loc_3cd8a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cd59));
    if (edx == 0x80808080)
        goto loc_3cd8a;
    if (dl & 0x80)
        goto loc_3cd6c;
    al = dl;
loc_3cd6c: // 0160:3cd6c
    if (dh & 0x80)
        goto loc_3cd73;
    ah = dh;
loc_3cd73: // 0160:3cd73
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cd80;
    al = dl;
loc_3cd80: // 0160:3cd80
    if (dh & 0x80)
        goto loc_3cd87;
    ah = dh;
loc_3cd87: // 0160:3cd87
    eax = rol32(eax, 0x10);
loc_3cd8a: // 0160:3cd8a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cd8c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cd92));
    if (!(eax & 0x80808080))
        goto loc_3ce0e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cda1));
    if (edx == 0x80808080)
        goto loc_3cdd2;
    if (dl & 0x80)
        goto loc_3cdb4;
    al = dl;
loc_3cdb4: // 0160:3cdb4
    if (dh & 0x80)
        goto loc_3cdbb;
    ah = dh;
loc_3cdbb: // 0160:3cdbb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cdc8;
    al = dl;
loc_3cdc8: // 0160:3cdc8
    if (dh & 0x80)
        goto loc_3cdcf;
    ah = dh;
loc_3cdcf: // 0160:3cdcf
    eax = rol32(eax, 0x10);
loc_3cdd2: // 0160:3cdd2
    if (!(eax & 0x80808080))
        goto loc_3ce0e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cddd));
    if (edx == 0x80808080)
        goto loc_3ce0e;
    if (dl & 0x80)
        goto loc_3cdf0;
    al = dl;
loc_3cdf0: // 0160:3cdf0
    if (dh & 0x80)
        goto loc_3cdf7;
    ah = dh;
loc_3cdf7: // 0160:3cdf7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ce04;
    al = dl;
loc_3ce04: // 0160:3ce04
    if (dh & 0x80)
        goto loc_3ce0b;
    ah = dh;
loc_3ce0b: // 0160:3ce0b
    eax = rol32(eax, 0x10);
loc_3ce0e: // 0160:3ce0e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ce10), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ce16));
    if (!(eax & 0x80808080))
        goto loc_3ce92;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3ce25));
    if (edx == 0x80808080)
        goto loc_3ce56;
    if (dl & 0x80)
        goto loc_3ce38;
    al = dl;
loc_3ce38: // 0160:3ce38
    if (dh & 0x80)
        goto loc_3ce3f;
    ah = dh;
loc_3ce3f: // 0160:3ce3f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ce4c;
    al = dl;
loc_3ce4c: // 0160:3ce4c
    if (dh & 0x80)
        goto loc_3ce53;
    ah = dh;
loc_3ce53: // 0160:3ce53
    eax = rol32(eax, 0x10);
loc_3ce56: // 0160:3ce56
    if (!(eax & 0x80808080))
        goto loc_3ce92;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3ce61));
    if (edx == 0x80808080)
        goto loc_3ce92;
    if (dl & 0x80)
        goto loc_3ce74;
    al = dl;
loc_3ce74: // 0160:3ce74
    if (dh & 0x80)
        goto loc_3ce7b;
    ah = dh;
loc_3ce7b: // 0160:3ce7b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ce88;
    al = dl;
loc_3ce88: // 0160:3ce88
    if (dh & 0x80)
        goto loc_3ce8f;
    ah = dh;
loc_3ce8f: // 0160:3ce8f
    eax = rol32(eax, 0x10);
loc_3ce92: // 0160:3ce92
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3ce94), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3ce9a));
    if (!(eax & 0x80808080))
        goto loc_3cf16;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cea9));
    if (edx == 0x80808080)
        goto loc_3ceda;
    if (dl & 0x80)
        goto loc_3cebc;
    al = dl;
loc_3cebc: // 0160:3cebc
    if (dh & 0x80)
        goto loc_3cec3;
    ah = dh;
loc_3cec3: // 0160:3cec3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3ced0;
    al = dl;
loc_3ced0: // 0160:3ced0
    if (dh & 0x80)
        goto loc_3ced7;
    ah = dh;
loc_3ced7: // 0160:3ced7
    eax = rol32(eax, 0x10);
loc_3ceda: // 0160:3ceda
    if (!(eax & 0x80808080))
        goto loc_3cf16;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cee5));
    if (edx == 0x80808080)
        goto loc_3cf16;
    if (dl & 0x80)
        goto loc_3cef8;
    al = dl;
loc_3cef8: // 0160:3cef8
    if (dh & 0x80)
        goto loc_3ceff;
    ah = dh;
loc_3ceff: // 0160:3ceff
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cf0c;
    al = dl;
loc_3cf0c: // 0160:3cf0c
    if (dh & 0x80)
        goto loc_3cf13;
    ah = dh;
loc_3cf13: // 0160:3cf13
    eax = rol32(eax, 0x10);
loc_3cf16: // 0160:3cf16
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cf18), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cf1e));
    if (!(eax & 0x80808080))
        goto loc_3cf9a;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cf2d));
    if (edx == 0x80808080)
        goto loc_3cf5e;
    if (dl & 0x80)
        goto loc_3cf40;
    al = dl;
loc_3cf40: // 0160:3cf40
    if (dh & 0x80)
        goto loc_3cf47;
    ah = dh;
loc_3cf47: // 0160:3cf47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cf54;
    al = dl;
loc_3cf54: // 0160:3cf54
    if (dh & 0x80)
        goto loc_3cf5b;
    ah = dh;
loc_3cf5b: // 0160:3cf5b
    eax = rol32(eax, 0x10);
loc_3cf5e: // 0160:3cf5e
    if (!(eax & 0x80808080))
        goto loc_3cf9a;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cf69));
    if (edx == 0x80808080)
        goto loc_3cf9a;
    if (dl & 0x80)
        goto loc_3cf7c;
    al = dl;
loc_3cf7c: // 0160:3cf7c
    if (dh & 0x80)
        goto loc_3cf83;
    ah = dh;
loc_3cf83: // 0160:3cf83
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cf90;
    al = dl;
loc_3cf90: // 0160:3cf90
    if (dh & 0x80)
        goto loc_3cf97;
    ah = dh;
loc_3cf97: // 0160:3cf97
    eax = rol32(eax, 0x10);
loc_3cf9a: // 0160:3cf9a
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3cf9c), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3cfa2));
    if (!(eax & 0x80808080))
        goto loc_3d01e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3cfb1));
    if (edx == 0x80808080)
        goto loc_3cfe2;
    if (dl & 0x80)
        goto loc_3cfc4;
    al = dl;
loc_3cfc4: // 0160:3cfc4
    if (dh & 0x80)
        goto loc_3cfcb;
    ah = dh;
loc_3cfcb: // 0160:3cfcb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3cfd8;
    al = dl;
loc_3cfd8: // 0160:3cfd8
    if (dh & 0x80)
        goto loc_3cfdf;
    ah = dh;
loc_3cfdf: // 0160:3cfdf
    eax = rol32(eax, 0x10);
loc_3cfe2: // 0160:3cfe2
    if (!(eax & 0x80808080))
        goto loc_3d01e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3cfed));
    if (edx == 0x80808080)
        goto loc_3d01e;
    if (dl & 0x80)
        goto loc_3d000;
    al = dl;
loc_3d000: // 0160:3d000
    if (dh & 0x80)
        goto loc_3d007;
    ah = dh;
loc_3d007: // 0160:3d007
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d014;
    al = dl;
loc_3d014: // 0160:3d014
    if (dh & 0x80)
        goto loc_3d01b;
    ah = dh;
loc_3d01b: // 0160:3d01b
    eax = rol32(eax, 0x10);
loc_3d01e: // 0160:3d01e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d020), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d026));
    if (!(eax & 0x80808080))
        goto loc_3d0a2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d035));
    if (edx == 0x80808080)
        goto loc_3d066;
    if (dl & 0x80)
        goto loc_3d048;
    al = dl;
loc_3d048: // 0160:3d048
    if (dh & 0x80)
        goto loc_3d04f;
    ah = dh;
loc_3d04f: // 0160:3d04f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d05c;
    al = dl;
loc_3d05c: // 0160:3d05c
    if (dh & 0x80)
        goto loc_3d063;
    ah = dh;
loc_3d063: // 0160:3d063
    eax = rol32(eax, 0x10);
loc_3d066: // 0160:3d066
    if (!(eax & 0x80808080))
        goto loc_3d0a2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d071));
    if (edx == 0x80808080)
        goto loc_3d0a2;
    if (dl & 0x80)
        goto loc_3d084;
    al = dl;
loc_3d084: // 0160:3d084
    if (dh & 0x80)
        goto loc_3d08b;
    ah = dh;
loc_3d08b: // 0160:3d08b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d098;
    al = dl;
loc_3d098: // 0160:3d098
    if (dh & 0x80)
        goto loc_3d09f;
    ah = dh;
loc_3d09f: // 0160:3d09f
    eax = rol32(eax, 0x10);
loc_3d0a2: // 0160:3d0a2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d0a4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d0aa));
    if (!(eax & 0x80808080))
        goto loc_3d126;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d0b9));
    if (edx == 0x80808080)
        goto loc_3d0ea;
    if (dl & 0x80)
        goto loc_3d0cc;
    al = dl;
loc_3d0cc: // 0160:3d0cc
    if (dh & 0x80)
        goto loc_3d0d3;
    ah = dh;
loc_3d0d3: // 0160:3d0d3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d0e0;
    al = dl;
loc_3d0e0: // 0160:3d0e0
    if (dh & 0x80)
        goto loc_3d0e7;
    ah = dh;
loc_3d0e7: // 0160:3d0e7
    eax = rol32(eax, 0x10);
loc_3d0ea: // 0160:3d0ea
    if (!(eax & 0x80808080))
        goto loc_3d126;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d0f5));
    if (edx == 0x80808080)
        goto loc_3d126;
    if (dl & 0x80)
        goto loc_3d108;
    al = dl;
loc_3d108: // 0160:3d108
    if (dh & 0x80)
        goto loc_3d10f;
    ah = dh;
loc_3d10f: // 0160:3d10f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d11c;
    al = dl;
loc_3d11c: // 0160:3d11c
    if (dh & 0x80)
        goto loc_3d123;
    ah = dh;
loc_3d123: // 0160:3d123
    eax = rol32(eax, 0x10);
loc_3d126: // 0160:3d126
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d128), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d12e));
    if (!(eax & 0x80808080))
        goto loc_3d1aa;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d13d));
    if (edx == 0x80808080)
        goto loc_3d16e;
    if (dl & 0x80)
        goto loc_3d150;
    al = dl;
loc_3d150: // 0160:3d150
    if (dh & 0x80)
        goto loc_3d157;
    ah = dh;
loc_3d157: // 0160:3d157
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d164;
    al = dl;
loc_3d164: // 0160:3d164
    if (dh & 0x80)
        goto loc_3d16b;
    ah = dh;
loc_3d16b: // 0160:3d16b
    eax = rol32(eax, 0x10);
loc_3d16e: // 0160:3d16e
    if (!(eax & 0x80808080))
        goto loc_3d1aa;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d179));
    if (edx == 0x80808080)
        goto loc_3d1aa;
    if (dl & 0x80)
        goto loc_3d18c;
    al = dl;
loc_3d18c: // 0160:3d18c
    if (dh & 0x80)
        goto loc_3d193;
    ah = dh;
loc_3d193: // 0160:3d193
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d1a0;
    al = dl;
loc_3d1a0: // 0160:3d1a0
    if (dh & 0x80)
        goto loc_3d1a7;
    ah = dh;
loc_3d1a7: // 0160:3d1a7
    eax = rol32(eax, 0x10);
loc_3d1aa: // 0160:3d1aa
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d1ac), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d1b2));
    if (!(eax & 0x80808080))
        goto loc_3d22e;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d1c1));
    if (edx == 0x80808080)
        goto loc_3d1f2;
    if (dl & 0x80)
        goto loc_3d1d4;
    al = dl;
loc_3d1d4: // 0160:3d1d4
    if (dh & 0x80)
        goto loc_3d1db;
    ah = dh;
loc_3d1db: // 0160:3d1db
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d1e8;
    al = dl;
loc_3d1e8: // 0160:3d1e8
    if (dh & 0x80)
        goto loc_3d1ef;
    ah = dh;
loc_3d1ef: // 0160:3d1ef
    eax = rol32(eax, 0x10);
loc_3d1f2: // 0160:3d1f2
    if (!(eax & 0x80808080))
        goto loc_3d22e;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d1fd));
    if (edx == 0x80808080)
        goto loc_3d22e;
    if (dl & 0x80)
        goto loc_3d210;
    al = dl;
loc_3d210: // 0160:3d210
    if (dh & 0x80)
        goto loc_3d217;
    ah = dh;
loc_3d217: // 0160:3d217
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d224;
    al = dl;
loc_3d224: // 0160:3d224
    if (dh & 0x80)
        goto loc_3d22b;
    ah = dh;
loc_3d22b: // 0160:3d22b
    eax = rol32(eax, 0x10);
loc_3d22e: // 0160:3d22e
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d230), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d236));
    if (!(eax & 0x80808080))
        goto loc_3d2b2;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d245));
    if (edx == 0x80808080)
        goto loc_3d276;
    if (dl & 0x80)
        goto loc_3d258;
    al = dl;
loc_3d258: // 0160:3d258
    if (dh & 0x80)
        goto loc_3d25f;
    ah = dh;
loc_3d25f: // 0160:3d25f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d26c;
    al = dl;
loc_3d26c: // 0160:3d26c
    if (dh & 0x80)
        goto loc_3d273;
    ah = dh;
loc_3d273: // 0160:3d273
    eax = rol32(eax, 0x10);
loc_3d276: // 0160:3d276
    if (!(eax & 0x80808080))
        goto loc_3d2b2;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d281));
    if (edx == 0x80808080)
        goto loc_3d2b2;
    if (dl & 0x80)
        goto loc_3d294;
    al = dl;
loc_3d294: // 0160:3d294
    if (dh & 0x80)
        goto loc_3d29b;
    ah = dh;
loc_3d29b: // 0160:3d29b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d2a8;
    al = dl;
loc_3d2a8: // 0160:3d2a8
    if (dh & 0x80)
        goto loc_3d2af;
    ah = dh;
loc_3d2af: // 0160:3d2af
    eax = rol32(eax, 0x10);
loc_3d2b2: // 0160:3d2b2
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d2b4), eax);
    eax = memoryAGet32(ds, ecx + memoryAGet32(cs, 0x3d2ba));
    if (!(eax & 0x80808080))
        goto loc_3d336;
    edx = eax;
    eax = memoryAGet32(ds, ebx + memoryAGet32(cs, 0x3d2c9));
    if (edx == 0x80808080)
        goto loc_3d2fa;
    if (dl & 0x80)
        goto loc_3d2dc;
    al = dl;
loc_3d2dc: // 0160:3d2dc
    if (dh & 0x80)
        goto loc_3d2e3;
    ah = dh;
loc_3d2e3: // 0160:3d2e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d2f0;
    al = dl;
loc_3d2f0: // 0160:3d2f0
    if (dh & 0x80)
        goto loc_3d2f7;
    ah = dh;
loc_3d2f7: // 0160:3d2f7
    eax = rol32(eax, 0x10);
loc_3d2fa: // 0160:3d2fa
    if (!(eax & 0x80808080))
        goto loc_3d336;
    edx = eax;
    eax = memoryAGet32(ds, esi + memoryAGet32(cs, 0x3d305));
    if (edx == 0x80808080)
        goto loc_3d336;
    if (dl & 0x80)
        goto loc_3d318;
    al = dl;
loc_3d318: // 0160:3d318
    if (dh & 0x80)
        goto loc_3d31f;
    ah = dh;
loc_3d31f: // 0160:3d31f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (dl & 0x80)
        goto loc_3d32c;
    al = dl;
loc_3d32c: // 0160:3d32c
    if (dh & 0x80)
        goto loc_3d333;
    ah = dh;
loc_3d333: // 0160:3d333
    eax = rol32(eax, 0x10);
loc_3d336: // 0160:3d336
    memoryASet32(ds, edi + memoryAGet32(cs, 0x3d338), eax);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_3a9fc;
loc_3d351: // 0160:3d351
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_3d354() // 0160:3d354 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_3d368;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) - 0x00000004);
loc_3d368: // 0160:3d368
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_3d375;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) - 0x00000004);
loc_3d375: // 0160:3d375
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_3d382;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) - 0x00000004);
loc_3d382: // 0160:3d382
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    esi = 0;
    edi = 0;
loc_3d38e: // 0160:3d38e
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 251034, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 251055, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 251096, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_3d3c5;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_3d3c5: // 0160:3d3c5
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_3d3d3;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_3d3d3: // 0160:3d3d3
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_3d3e1;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_3d3e1: // 0160:3d3e1
    edx = 0;
    eax = memoryAGet32(ss, ebp + 48);
    memoryASet32(ds, esi + 251040, eax);
    eax = memoryAGet32(ss, ebp + 52);
    memoryASet32(ds, esi + 251061, eax);
    eax = memoryAGet32(ss, ebp + 56);
    memoryASet32(ds, esi + 251102, eax);
    flags.carry = (bx + memoryAGet16(ss, ebp + 44)) >= 0x10000;
    bx += memoryAGet16(ss, ebp + 44);
    dx += memoryAGet16(ss, ebp + 46) + flags.carry;
    edx &= 0x000003ff;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) + edx);
    eax = memoryAGet32(ss, ebp + 24);
    if ((int32_t)memoryAGet32(ss, ebp + 48) <= (int32_t)eax)
        goto loc_3d41a;
    memoryASet32(ss, ebp + 48, memoryAGet32(ss, ebp + 48) - eax);
loc_3d41a: // 0160:3d41a
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) + edx);
    eax = memoryAGet32(ss, ebp + 28);
    if ((int32_t)memoryAGet32(ss, ebp + 52) <= (int32_t)eax)
        goto loc_3d428;
    memoryASet32(ss, ebp + 52, memoryAGet32(ss, ebp + 52) - eax);
loc_3d428: // 0160:3d428
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) + edx);
    eax = memoryAGet32(ss, ebp + 32);
    if ((int32_t)memoryAGet32(ss, ebp + 56) <= (int32_t)eax)
        goto loc_3d436;
    memoryASet32(ss, ebp + 56, memoryAGet32(ss, ebp + 56) - eax);
loc_3d436: // 0160:3d436
    edx = 0;
    esi += 0x00000066;
    ecx += 0x00000002;
    if (ecx != 0x00000140)
        goto loc_3d38e;
    if (memoryAGet32(ss, ebp + 24) == 0x000003c0)
        goto loc_3d45a;
    memoryASet32(ss, ebp + 24, memoryAGet32(ss, ebp + 24) + 0x00000004);
loc_3d45a: // 0160:3d45a
    if (memoryAGet32(ss, ebp + 28) == 0x000003c0)
        goto loc_3d467;
    memoryASet32(ss, ebp + 28, memoryAGet32(ss, ebp + 28) + 0x00000004);
loc_3d467: // 0160:3d467
    if (memoryAGet32(ss, ebp + 32) == 0x000003c0)
        goto loc_3d474;
    memoryASet32(ss, ebp + 32, memoryAGet32(ss, ebp + 32) + 0x00000004);
loc_3d474: // 0160:3d474
    ecx = memoryAGet32(ss, ebp + 8);
    ebx = memoryAGet32(ss, ebp + 12);
    esi = memoryAGet32(ss, ebp + 16);
    edi = memoryAGet32(ss, ebp + 20);
    memoryASet32(ss, ebp + -4, 0x00000000);
    if ((int32_t)memoryAGet32(ss, ebp + 40) <= (int32_t)0x00000000)
        goto loc_41481;
    goto loc_3d493;
loc_3d493: // 0160:3d493
    goto loc_3d495;
loc_3d495: // 0160:3d495
    goto loc_3d498;
    // gap 1 bytes
loc_3d498: // 0160:3d498
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d49a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d4a0));
    if (!(eax & 0x00008080))
        goto loc_3d4f7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d4af));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d4b5));
    if (dx == 0x8080)
        goto loc_3d4ce;
    if (dl & 0x80)
        goto loc_3d4c7;
    al = dl;
loc_3d4c7: // 0160:3d4c7
    if (dh & 0x80)
        goto loc_3d4ce;
    ah = dh;
loc_3d4ce: // 0160:3d4ce
    if (!(ax & 0x8080))
        goto loc_3d4f7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d4d8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d4de));
    if (dx == 0x8080)
        goto loc_3d4f7;
    if (dl & 0x80)
        goto loc_3d4f0;
    al = dl;
loc_3d4f0: // 0160:3d4f0
    if (dh & 0x80)
        goto loc_3d4f7;
    ah = dh;
loc_3d4f7: // 0160:3d4f7
    memoryASet16(ds, edi, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d500));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d506));
    if (!(eax & 0x00008080))
        goto loc_3d55d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d515));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d51b));
    if (dx == 0x8080)
        goto loc_3d534;
    if (dl & 0x80)
        goto loc_3d52d;
    al = dl;
loc_3d52d: // 0160:3d52d
    if (dh & 0x80)
        goto loc_3d534;
    ah = dh;
loc_3d534: // 0160:3d534
    if (!(ax & 0x8080))
        goto loc_3d55d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d53e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d544));
    if (dx == 0x8080)
        goto loc_3d55d;
    if (dl & 0x80)
        goto loc_3d556;
    al = dl;
loc_3d556: // 0160:3d556
    if (dh & 0x80)
        goto loc_3d55d;
    ah = dh;
loc_3d55d: // 0160:3d55d
    memoryASet16(ds, edi + 2, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d566));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d56c));
    if (!(eax & 0x00008080))
        goto loc_3d5c3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d57b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d581));
    if (dx == 0x8080)
        goto loc_3d59a;
    if (dl & 0x80)
        goto loc_3d593;
    al = dl;
loc_3d593: // 0160:3d593
    if (dh & 0x80)
        goto loc_3d59a;
    ah = dh;
loc_3d59a: // 0160:3d59a
    if (!(ax & 0x8080))
        goto loc_3d5c3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d5a4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d5aa));
    if (dx == 0x8080)
        goto loc_3d5c3;
    if (dl & 0x80)
        goto loc_3d5bc;
    al = dl;
loc_3d5bc: // 0160:3d5bc
    if (dh & 0x80)
        goto loc_3d5c3;
    ah = dh;
loc_3d5c3: // 0160:3d5c3
    memoryASet16(ds, edi + 4, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d5cc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d5d2));
    if (!(eax & 0x00008080))
        goto loc_3d629;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d5e1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d5e7));
    if (dx == 0x8080)
        goto loc_3d600;
    if (dl & 0x80)
        goto loc_3d5f9;
    al = dl;
loc_3d5f9: // 0160:3d5f9
    if (dh & 0x80)
        goto loc_3d600;
    ah = dh;
loc_3d600: // 0160:3d600
    if (!(ax & 0x8080))
        goto loc_3d629;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d60a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d610));
    if (dx == 0x8080)
        goto loc_3d629;
    if (dl & 0x80)
        goto loc_3d622;
    al = dl;
loc_3d622: // 0160:3d622
    if (dh & 0x80)
        goto loc_3d629;
    ah = dh;
loc_3d629: // 0160:3d629
    memoryASet16(ds, edi + 6, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d632));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d638));
    if (!(eax & 0x00008080))
        goto loc_3d68f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d647));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d64d));
    if (dx == 0x8080)
        goto loc_3d666;
    if (dl & 0x80)
        goto loc_3d65f;
    al = dl;
loc_3d65f: // 0160:3d65f
    if (dh & 0x80)
        goto loc_3d666;
    ah = dh;
loc_3d666: // 0160:3d666
    if (!(ax & 0x8080))
        goto loc_3d68f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d670));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d676));
    if (dx == 0x8080)
        goto loc_3d68f;
    if (dl & 0x80)
        goto loc_3d688;
    al = dl;
loc_3d688: // 0160:3d688
    if (dh & 0x80)
        goto loc_3d68f;
    ah = dh;
loc_3d68f: // 0160:3d68f
    memoryASet16(ds, edi + 8, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d698));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d69e));
    if (!(eax & 0x00008080))
        goto loc_3d6f5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d6ad));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d6b3));
    if (dx == 0x8080)
        goto loc_3d6cc;
    if (dl & 0x80)
        goto loc_3d6c5;
    al = dl;
loc_3d6c5: // 0160:3d6c5
    if (dh & 0x80)
        goto loc_3d6cc;
    ah = dh;
loc_3d6cc: // 0160:3d6cc
    if (!(ax & 0x8080))
        goto loc_3d6f5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d6d6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d6dc));
    if (dx == 0x8080)
        goto loc_3d6f5;
    if (dl & 0x80)
        goto loc_3d6ee;
    al = dl;
loc_3d6ee: // 0160:3d6ee
    if (dh & 0x80)
        goto loc_3d6f5;
    ah = dh;
loc_3d6f5: // 0160:3d6f5
    memoryASet16(ds, edi + 10, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d6fe));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d704));
    if (!(eax & 0x00008080))
        goto loc_3d75b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d713));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d719));
    if (dx == 0x8080)
        goto loc_3d732;
    if (dl & 0x80)
        goto loc_3d72b;
    al = dl;
loc_3d72b: // 0160:3d72b
    if (dh & 0x80)
        goto loc_3d732;
    ah = dh;
loc_3d732: // 0160:3d732
    if (!(ax & 0x8080))
        goto loc_3d75b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d73c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d742));
    if (dx == 0x8080)
        goto loc_3d75b;
    if (dl & 0x80)
        goto loc_3d754;
    al = dl;
loc_3d754: // 0160:3d754
    if (dh & 0x80)
        goto loc_3d75b;
    ah = dh;
loc_3d75b: // 0160:3d75b
    memoryASet16(ds, edi + 12, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d764));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d76a));
    if (!(eax & 0x00008080))
        goto loc_3d7c1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d779));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d77f));
    if (dx == 0x8080)
        goto loc_3d798;
    if (dl & 0x80)
        goto loc_3d791;
    al = dl;
loc_3d791: // 0160:3d791
    if (dh & 0x80)
        goto loc_3d798;
    ah = dh;
loc_3d798: // 0160:3d798
    if (!(ax & 0x8080))
        goto loc_3d7c1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d7a2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d7a8));
    if (dx == 0x8080)
        goto loc_3d7c1;
    if (dl & 0x80)
        goto loc_3d7ba;
    al = dl;
loc_3d7ba: // 0160:3d7ba
    if (dh & 0x80)
        goto loc_3d7c1;
    ah = dh;
loc_3d7c1: // 0160:3d7c1
    memoryASet16(ds, edi + 14, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d7ca));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d7d0));
    if (!(eax & 0x00008080))
        goto loc_3d827;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d7df));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d7e5));
    if (dx == 0x8080)
        goto loc_3d7fe;
    if (dl & 0x80)
        goto loc_3d7f7;
    al = dl;
loc_3d7f7: // 0160:3d7f7
    if (dh & 0x80)
        goto loc_3d7fe;
    ah = dh;
loc_3d7fe: // 0160:3d7fe
    if (!(ax & 0x8080))
        goto loc_3d827;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d808));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d80e));
    if (dx == 0x8080)
        goto loc_3d827;
    if (dl & 0x80)
        goto loc_3d820;
    al = dl;
loc_3d820: // 0160:3d820
    if (dh & 0x80)
        goto loc_3d827;
    ah = dh;
loc_3d827: // 0160:3d827
    memoryASet16(ds, edi + 16, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d830));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d836));
    if (!(eax & 0x00008080))
        goto loc_3d88d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d845));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d84b));
    if (dx == 0x8080)
        goto loc_3d864;
    if (dl & 0x80)
        goto loc_3d85d;
    al = dl;
loc_3d85d: // 0160:3d85d
    if (dh & 0x80)
        goto loc_3d864;
    ah = dh;
loc_3d864: // 0160:3d864
    if (!(ax & 0x8080))
        goto loc_3d88d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d86e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d874));
    if (dx == 0x8080)
        goto loc_3d88d;
    if (dl & 0x80)
        goto loc_3d886;
    al = dl;
loc_3d886: // 0160:3d886
    if (dh & 0x80)
        goto loc_3d88d;
    ah = dh;
loc_3d88d: // 0160:3d88d
    memoryASet16(ds, edi + 18, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d896));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d89c));
    if (!(eax & 0x00008080))
        goto loc_3d8f3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d8ab));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d8b1));
    if (dx == 0x8080)
        goto loc_3d8ca;
    if (dl & 0x80)
        goto loc_3d8c3;
    al = dl;
loc_3d8c3: // 0160:3d8c3
    if (dh & 0x80)
        goto loc_3d8ca;
    ah = dh;
loc_3d8ca: // 0160:3d8ca
    if (!(ax & 0x8080))
        goto loc_3d8f3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d8d4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d8da));
    if (dx == 0x8080)
        goto loc_3d8f3;
    if (dl & 0x80)
        goto loc_3d8ec;
    al = dl;
loc_3d8ec: // 0160:3d8ec
    if (dh & 0x80)
        goto loc_3d8f3;
    ah = dh;
loc_3d8f3: // 0160:3d8f3
    memoryASet16(ds, edi + 20, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d8fc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d902));
    if (!(eax & 0x00008080))
        goto loc_3d959;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d911));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d917));
    if (dx == 0x8080)
        goto loc_3d930;
    if (dl & 0x80)
        goto loc_3d929;
    al = dl;
loc_3d929: // 0160:3d929
    if (dh & 0x80)
        goto loc_3d930;
    ah = dh;
loc_3d930: // 0160:3d930
    if (!(ax & 0x8080))
        goto loc_3d959;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d93a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d940));
    if (dx == 0x8080)
        goto loc_3d959;
    if (dl & 0x80)
        goto loc_3d952;
    al = dl;
loc_3d952: // 0160:3d952
    if (dh & 0x80)
        goto loc_3d959;
    ah = dh;
loc_3d959: // 0160:3d959
    memoryASet16(ds, edi + 22, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d962));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d968));
    if (!(eax & 0x00008080))
        goto loc_3d9bf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d977));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d97d));
    if (dx == 0x8080)
        goto loc_3d996;
    if (dl & 0x80)
        goto loc_3d98f;
    al = dl;
loc_3d98f: // 0160:3d98f
    if (dh & 0x80)
        goto loc_3d996;
    ah = dh;
loc_3d996: // 0160:3d996
    if (!(ax & 0x8080))
        goto loc_3d9bf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d9a0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3d9a6));
    if (dx == 0x8080)
        goto loc_3d9bf;
    if (dl & 0x80)
        goto loc_3d9b8;
    al = dl;
loc_3d9b8: // 0160:3d9b8
    if (dh & 0x80)
        goto loc_3d9bf;
    ah = dh;
loc_3d9bf: // 0160:3d9bf
    memoryASet16(ds, edi + 24, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d9c8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3d9ce));
    if (!(eax & 0x00008080))
        goto loc_3da25;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d9dd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3d9e3));
    if (dx == 0x8080)
        goto loc_3d9fc;
    if (dl & 0x80)
        goto loc_3d9f5;
    al = dl;
loc_3d9f5: // 0160:3d9f5
    if (dh & 0x80)
        goto loc_3d9fc;
    ah = dh;
loc_3d9fc: // 0160:3d9fc
    if (!(ax & 0x8080))
        goto loc_3da25;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3da06));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3da0c));
    if (dx == 0x8080)
        goto loc_3da25;
    if (dl & 0x80)
        goto loc_3da1e;
    al = dl;
loc_3da1e: // 0160:3da1e
    if (dh & 0x80)
        goto loc_3da25;
    ah = dh;
loc_3da25: // 0160:3da25
    memoryASet16(ds, edi + 26, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3da2e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3da34));
    if (!(eax & 0x00008080))
        goto loc_3da8b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3da43));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3da49));
    if (dx == 0x8080)
        goto loc_3da62;
    if (dl & 0x80)
        goto loc_3da5b;
    al = dl;
loc_3da5b: // 0160:3da5b
    if (dh & 0x80)
        goto loc_3da62;
    ah = dh;
loc_3da62: // 0160:3da62
    if (!(ax & 0x8080))
        goto loc_3da8b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3da6c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3da72));
    if (dx == 0x8080)
        goto loc_3da8b;
    if (dl & 0x80)
        goto loc_3da84;
    al = dl;
loc_3da84: // 0160:3da84
    if (dh & 0x80)
        goto loc_3da8b;
    ah = dh;
loc_3da8b: // 0160:3da8b
    memoryASet16(ds, edi + 28, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3da94));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3da9a));
    if (!(eax & 0x00008080))
        goto loc_3daf1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3daa9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3daaf));
    if (dx == 0x8080)
        goto loc_3dac8;
    if (dl & 0x80)
        goto loc_3dac1;
    al = dl;
loc_3dac1: // 0160:3dac1
    if (dh & 0x80)
        goto loc_3dac8;
    ah = dh;
loc_3dac8: // 0160:3dac8
    if (!(ax & 0x8080))
        goto loc_3daf1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dad2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dad8));
    if (dx == 0x8080)
        goto loc_3daf1;
    if (dl & 0x80)
        goto loc_3daea;
    al = dl;
loc_3daea: // 0160:3daea
    if (dh & 0x80)
        goto loc_3daf1;
    ah = dh;
loc_3daf1: // 0160:3daf1
    memoryASet16(ds, edi + 30, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dafa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3db00));
    if (!(eax & 0x00008080))
        goto loc_3db57;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3db0f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3db15));
    if (dx == 0x8080)
        goto loc_3db2e;
    if (dl & 0x80)
        goto loc_3db27;
    al = dl;
loc_3db27: // 0160:3db27
    if (dh & 0x80)
        goto loc_3db2e;
    ah = dh;
loc_3db2e: // 0160:3db2e
    if (!(ax & 0x8080))
        goto loc_3db57;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3db38));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3db3e));
    if (dx == 0x8080)
        goto loc_3db57;
    if (dl & 0x80)
        goto loc_3db50;
    al = dl;
loc_3db50: // 0160:3db50
    if (dh & 0x80)
        goto loc_3db57;
    ah = dh;
loc_3db57: // 0160:3db57
    memoryASet16(ds, edi + 32, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3db60));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3db66));
    if (!(eax & 0x00008080))
        goto loc_3dbbd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3db75));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3db7b));
    if (dx == 0x8080)
        goto loc_3db94;
    if (dl & 0x80)
        goto loc_3db8d;
    al = dl;
loc_3db8d: // 0160:3db8d
    if (dh & 0x80)
        goto loc_3db94;
    ah = dh;
loc_3db94: // 0160:3db94
    if (!(ax & 0x8080))
        goto loc_3dbbd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3db9e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dba4));
    if (dx == 0x8080)
        goto loc_3dbbd;
    if (dl & 0x80)
        goto loc_3dbb6;
    al = dl;
loc_3dbb6: // 0160:3dbb6
    if (dh & 0x80)
        goto loc_3dbbd;
    ah = dh;
loc_3dbbd: // 0160:3dbbd
    memoryASet16(ds, edi + 34, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dbc6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dbcc));
    if (!(eax & 0x00008080))
        goto loc_3dc23;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dbdb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dbe1));
    if (dx == 0x8080)
        goto loc_3dbfa;
    if (dl & 0x80)
        goto loc_3dbf3;
    al = dl;
loc_3dbf3: // 0160:3dbf3
    if (dh & 0x80)
        goto loc_3dbfa;
    ah = dh;
loc_3dbfa: // 0160:3dbfa
    if (!(ax & 0x8080))
        goto loc_3dc23;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dc04));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dc0a));
    if (dx == 0x8080)
        goto loc_3dc23;
    if (dl & 0x80)
        goto loc_3dc1c;
    al = dl;
loc_3dc1c: // 0160:3dc1c
    if (dh & 0x80)
        goto loc_3dc23;
    ah = dh;
loc_3dc23: // 0160:3dc23
    memoryASet16(ds, edi + 36, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dc2c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dc32));
    if (!(eax & 0x00008080))
        goto loc_3dc89;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dc41));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dc47));
    if (dx == 0x8080)
        goto loc_3dc60;
    if (dl & 0x80)
        goto loc_3dc59;
    al = dl;
loc_3dc59: // 0160:3dc59
    if (dh & 0x80)
        goto loc_3dc60;
    ah = dh;
loc_3dc60: // 0160:3dc60
    if (!(ax & 0x8080))
        goto loc_3dc89;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dc6a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dc70));
    if (dx == 0x8080)
        goto loc_3dc89;
    if (dl & 0x80)
        goto loc_3dc82;
    al = dl;
loc_3dc82: // 0160:3dc82
    if (dh & 0x80)
        goto loc_3dc89;
    ah = dh;
loc_3dc89: // 0160:3dc89
    memoryASet16(ds, edi + 38, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dc92));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dc98));
    if (!(eax & 0x00008080))
        goto loc_3dcef;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dca7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dcad));
    if (dx == 0x8080)
        goto loc_3dcc6;
    if (dl & 0x80)
        goto loc_3dcbf;
    al = dl;
loc_3dcbf: // 0160:3dcbf
    if (dh & 0x80)
        goto loc_3dcc6;
    ah = dh;
loc_3dcc6: // 0160:3dcc6
    if (!(ax & 0x8080))
        goto loc_3dcef;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dcd0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dcd6));
    if (dx == 0x8080)
        goto loc_3dcef;
    if (dl & 0x80)
        goto loc_3dce8;
    al = dl;
loc_3dce8: // 0160:3dce8
    if (dh & 0x80)
        goto loc_3dcef;
    ah = dh;
loc_3dcef: // 0160:3dcef
    memoryASet16(ds, edi + 40, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dcf8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dcfe));
    if (!(eax & 0x00008080))
        goto loc_3dd55;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dd0d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dd13));
    if (dx == 0x8080)
        goto loc_3dd2c;
    if (dl & 0x80)
        goto loc_3dd25;
    al = dl;
loc_3dd25: // 0160:3dd25
    if (dh & 0x80)
        goto loc_3dd2c;
    ah = dh;
loc_3dd2c: // 0160:3dd2c
    if (!(ax & 0x8080))
        goto loc_3dd55;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dd36));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dd3c));
    if (dx == 0x8080)
        goto loc_3dd55;
    if (dl & 0x80)
        goto loc_3dd4e;
    al = dl;
loc_3dd4e: // 0160:3dd4e
    if (dh & 0x80)
        goto loc_3dd55;
    ah = dh;
loc_3dd55: // 0160:3dd55
    memoryASet16(ds, edi + 42, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dd5e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dd64));
    if (!(eax & 0x00008080))
        goto loc_3ddbb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dd73));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dd79));
    if (dx == 0x8080)
        goto loc_3dd92;
    if (dl & 0x80)
        goto loc_3dd8b;
    al = dl;
loc_3dd8b: // 0160:3dd8b
    if (dh & 0x80)
        goto loc_3dd92;
    ah = dh;
loc_3dd92: // 0160:3dd92
    if (!(ax & 0x8080))
        goto loc_3ddbb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dd9c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dda2));
    if (dx == 0x8080)
        goto loc_3ddbb;
    if (dl & 0x80)
        goto loc_3ddb4;
    al = dl;
loc_3ddb4: // 0160:3ddb4
    if (dh & 0x80)
        goto loc_3ddbb;
    ah = dh;
loc_3ddbb: // 0160:3ddbb
    memoryASet16(ds, edi + 44, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ddc4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ddca));
    if (!(eax & 0x00008080))
        goto loc_3de21;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ddd9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dddf));
    if (dx == 0x8080)
        goto loc_3ddf8;
    if (dl & 0x80)
        goto loc_3ddf1;
    al = dl;
loc_3ddf1: // 0160:3ddf1
    if (dh & 0x80)
        goto loc_3ddf8;
    ah = dh;
loc_3ddf8: // 0160:3ddf8
    if (!(ax & 0x8080))
        goto loc_3de21;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3de02));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3de08));
    if (dx == 0x8080)
        goto loc_3de21;
    if (dl & 0x80)
        goto loc_3de1a;
    al = dl;
loc_3de1a: // 0160:3de1a
    if (dh & 0x80)
        goto loc_3de21;
    ah = dh;
loc_3de21: // 0160:3de21
    memoryASet16(ds, edi + 46, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3de2a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3de30));
    if (!(eax & 0x00008080))
        goto loc_3de87;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3de3f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3de45));
    if (dx == 0x8080)
        goto loc_3de5e;
    if (dl & 0x80)
        goto loc_3de57;
    al = dl;
loc_3de57: // 0160:3de57
    if (dh & 0x80)
        goto loc_3de5e;
    ah = dh;
loc_3de5e: // 0160:3de5e
    if (!(ax & 0x8080))
        goto loc_3de87;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3de68));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3de6e));
    if (dx == 0x8080)
        goto loc_3de87;
    if (dl & 0x80)
        goto loc_3de80;
    al = dl;
loc_3de80: // 0160:3de80
    if (dh & 0x80)
        goto loc_3de87;
    ah = dh;
loc_3de87: // 0160:3de87
    memoryASet16(ds, edi + 48, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3de90));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3de96));
    if (!(eax & 0x00008080))
        goto loc_3deed;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dea5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3deab));
    if (dx == 0x8080)
        goto loc_3dec4;
    if (dl & 0x80)
        goto loc_3debd;
    al = dl;
loc_3debd: // 0160:3debd
    if (dh & 0x80)
        goto loc_3dec4;
    ah = dh;
loc_3dec4: // 0160:3dec4
    if (!(ax & 0x8080))
        goto loc_3deed;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dece));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ded4));
    if (dx == 0x8080)
        goto loc_3deed;
    if (dl & 0x80)
        goto loc_3dee6;
    al = dl;
loc_3dee6: // 0160:3dee6
    if (dh & 0x80)
        goto loc_3deed;
    ah = dh;
loc_3deed: // 0160:3deed
    memoryASet16(ds, edi + 50, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3def6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3defc));
    if (!(eax & 0x00008080))
        goto loc_3df53;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3df0b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3df11));
    if (dx == 0x8080)
        goto loc_3df2a;
    if (dl & 0x80)
        goto loc_3df23;
    al = dl;
loc_3df23: // 0160:3df23
    if (dh & 0x80)
        goto loc_3df2a;
    ah = dh;
loc_3df2a: // 0160:3df2a
    if (!(ax & 0x8080))
        goto loc_3df53;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3df34));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3df3a));
    if (dx == 0x8080)
        goto loc_3df53;
    if (dl & 0x80)
        goto loc_3df4c;
    al = dl;
loc_3df4c: // 0160:3df4c
    if (dh & 0x80)
        goto loc_3df53;
    ah = dh;
loc_3df53: // 0160:3df53
    memoryASet16(ds, edi + 52, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3df5c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3df62));
    if (!(eax & 0x00008080))
        goto loc_3dfb9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3df71));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3df77));
    if (dx == 0x8080)
        goto loc_3df90;
    if (dl & 0x80)
        goto loc_3df89;
    al = dl;
loc_3df89: // 0160:3df89
    if (dh & 0x80)
        goto loc_3df90;
    ah = dh;
loc_3df90: // 0160:3df90
    if (!(ax & 0x8080))
        goto loc_3dfb9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3df9a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3dfa0));
    if (dx == 0x8080)
        goto loc_3dfb9;
    if (dl & 0x80)
        goto loc_3dfb2;
    al = dl;
loc_3dfb2: // 0160:3dfb2
    if (dh & 0x80)
        goto loc_3dfb9;
    ah = dh;
loc_3dfb9: // 0160:3dfb9
    memoryASet16(ds, edi + 54, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dfc2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3dfc8));
    if (!(eax & 0x00008080))
        goto loc_3e01f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dfd7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3dfdd));
    if (dx == 0x8080)
        goto loc_3dff6;
    if (dl & 0x80)
        goto loc_3dfef;
    al = dl;
loc_3dfef: // 0160:3dfef
    if (dh & 0x80)
        goto loc_3dff6;
    ah = dh;
loc_3dff6: // 0160:3dff6
    if (!(ax & 0x8080))
        goto loc_3e01f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e000));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e006));
    if (dx == 0x8080)
        goto loc_3e01f;
    if (dl & 0x80)
        goto loc_3e018;
    al = dl;
loc_3e018: // 0160:3e018
    if (dh & 0x80)
        goto loc_3e01f;
    ah = dh;
loc_3e01f: // 0160:3e01f
    memoryASet16(ds, edi + 56, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e028));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e02e));
    if (!(eax & 0x00008080))
        goto loc_3e085;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e03d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e043));
    if (dx == 0x8080)
        goto loc_3e05c;
    if (dl & 0x80)
        goto loc_3e055;
    al = dl;
loc_3e055: // 0160:3e055
    if (dh & 0x80)
        goto loc_3e05c;
    ah = dh;
loc_3e05c: // 0160:3e05c
    if (!(ax & 0x8080))
        goto loc_3e085;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e066));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e06c));
    if (dx == 0x8080)
        goto loc_3e085;
    if (dl & 0x80)
        goto loc_3e07e;
    al = dl;
loc_3e07e: // 0160:3e07e
    if (dh & 0x80)
        goto loc_3e085;
    ah = dh;
loc_3e085: // 0160:3e085
    memoryASet16(ds, edi + 58, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e08e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e094));
    if (!(eax & 0x00008080))
        goto loc_3e0eb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e0a3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e0a9));
    if (dx == 0x8080)
        goto loc_3e0c2;
    if (dl & 0x80)
        goto loc_3e0bb;
    al = dl;
loc_3e0bb: // 0160:3e0bb
    if (dh & 0x80)
        goto loc_3e0c2;
    ah = dh;
loc_3e0c2: // 0160:3e0c2
    if (!(ax & 0x8080))
        goto loc_3e0eb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e0cc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e0d2));
    if (dx == 0x8080)
        goto loc_3e0eb;
    if (dl & 0x80)
        goto loc_3e0e4;
    al = dl;
loc_3e0e4: // 0160:3e0e4
    if (dh & 0x80)
        goto loc_3e0eb;
    ah = dh;
loc_3e0eb: // 0160:3e0eb
    memoryASet16(ds, edi + 60, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e0f4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e0fa));
    if (!(eax & 0x00008080))
        goto loc_3e151;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e109));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e10f));
    if (dx == 0x8080)
        goto loc_3e128;
    if (dl & 0x80)
        goto loc_3e121;
    al = dl;
loc_3e121: // 0160:3e121
    if (dh & 0x80)
        goto loc_3e128;
    ah = dh;
loc_3e128: // 0160:3e128
    if (!(ax & 0x8080))
        goto loc_3e151;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e132));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e138));
    if (dx == 0x8080)
        goto loc_3e151;
    if (dl & 0x80)
        goto loc_3e14a;
    al = dl;
loc_3e14a: // 0160:3e14a
    if (dh & 0x80)
        goto loc_3e151;
    ah = dh;
loc_3e151: // 0160:3e151
    memoryASet16(ds, edi + 62, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e15a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e160));
    if (!(eax & 0x00008080))
        goto loc_3e1b7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e16f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e175));
    if (dx == 0x8080)
        goto loc_3e18e;
    if (dl & 0x80)
        goto loc_3e187;
    al = dl;
loc_3e187: // 0160:3e187
    if (dh & 0x80)
        goto loc_3e18e;
    ah = dh;
loc_3e18e: // 0160:3e18e
    if (!(ax & 0x8080))
        goto loc_3e1b7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e198));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e19e));
    if (dx == 0x8080)
        goto loc_3e1b7;
    if (dl & 0x80)
        goto loc_3e1b0;
    al = dl;
loc_3e1b0: // 0160:3e1b0
    if (dh & 0x80)
        goto loc_3e1b7;
    ah = dh;
loc_3e1b7: // 0160:3e1b7
    memoryASet16(ds, edi + 64, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e1c0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e1c6));
    if (!(eax & 0x00008080))
        goto loc_3e21d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e1d5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e1db));
    if (dx == 0x8080)
        goto loc_3e1f4;
    if (dl & 0x80)
        goto loc_3e1ed;
    al = dl;
loc_3e1ed: // 0160:3e1ed
    if (dh & 0x80)
        goto loc_3e1f4;
    ah = dh;
loc_3e1f4: // 0160:3e1f4
    if (!(ax & 0x8080))
        goto loc_3e21d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e1fe));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e204));
    if (dx == 0x8080)
        goto loc_3e21d;
    if (dl & 0x80)
        goto loc_3e216;
    al = dl;
loc_3e216: // 0160:3e216
    if (dh & 0x80)
        goto loc_3e21d;
    ah = dh;
loc_3e21d: // 0160:3e21d
    memoryASet16(ds, edi + 66, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e226));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e22c));
    if (!(eax & 0x00008080))
        goto loc_3e283;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e23b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e241));
    if (dx == 0x8080)
        goto loc_3e25a;
    if (dl & 0x80)
        goto loc_3e253;
    al = dl;
loc_3e253: // 0160:3e253
    if (dh & 0x80)
        goto loc_3e25a;
    ah = dh;
loc_3e25a: // 0160:3e25a
    if (!(ax & 0x8080))
        goto loc_3e283;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e264));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e26a));
    if (dx == 0x8080)
        goto loc_3e283;
    if (dl & 0x80)
        goto loc_3e27c;
    al = dl;
loc_3e27c: // 0160:3e27c
    if (dh & 0x80)
        goto loc_3e283;
    ah = dh;
loc_3e283: // 0160:3e283
    memoryASet16(ds, edi + 68, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e28c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e292));
    if (!(eax & 0x00008080))
        goto loc_3e2e9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e2a1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e2a7));
    if (dx == 0x8080)
        goto loc_3e2c0;
    if (dl & 0x80)
        goto loc_3e2b9;
    al = dl;
loc_3e2b9: // 0160:3e2b9
    if (dh & 0x80)
        goto loc_3e2c0;
    ah = dh;
loc_3e2c0: // 0160:3e2c0
    if (!(ax & 0x8080))
        goto loc_3e2e9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e2ca));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e2d0));
    if (dx == 0x8080)
        goto loc_3e2e9;
    if (dl & 0x80)
        goto loc_3e2e2;
    al = dl;
loc_3e2e2: // 0160:3e2e2
    if (dh & 0x80)
        goto loc_3e2e9;
    ah = dh;
loc_3e2e9: // 0160:3e2e9
    memoryASet16(ds, edi + 70, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e2f2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e2f8));
    if (!(eax & 0x00008080))
        goto loc_3e34f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e307));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e30d));
    if (dx == 0x8080)
        goto loc_3e326;
    if (dl & 0x80)
        goto loc_3e31f;
    al = dl;
loc_3e31f: // 0160:3e31f
    if (dh & 0x80)
        goto loc_3e326;
    ah = dh;
loc_3e326: // 0160:3e326
    if (!(ax & 0x8080))
        goto loc_3e34f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e330));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e336));
    if (dx == 0x8080)
        goto loc_3e34f;
    if (dl & 0x80)
        goto loc_3e348;
    al = dl;
loc_3e348: // 0160:3e348
    if (dh & 0x80)
        goto loc_3e34f;
    ah = dh;
loc_3e34f: // 0160:3e34f
    memoryASet16(ds, edi + 72, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e358));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e35e));
    if (!(eax & 0x00008080))
        goto loc_3e3b5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e36d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e373));
    if (dx == 0x8080)
        goto loc_3e38c;
    if (dl & 0x80)
        goto loc_3e385;
    al = dl;
loc_3e385: // 0160:3e385
    if (dh & 0x80)
        goto loc_3e38c;
    ah = dh;
loc_3e38c: // 0160:3e38c
    if (!(ax & 0x8080))
        goto loc_3e3b5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e396));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e39c));
    if (dx == 0x8080)
        goto loc_3e3b5;
    if (dl & 0x80)
        goto loc_3e3ae;
    al = dl;
loc_3e3ae: // 0160:3e3ae
    if (dh & 0x80)
        goto loc_3e3b5;
    ah = dh;
loc_3e3b5: // 0160:3e3b5
    memoryASet16(ds, edi + 74, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e3be));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e3c4));
    if (!(eax & 0x00008080))
        goto loc_3e41b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e3d3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e3d9));
    if (dx == 0x8080)
        goto loc_3e3f2;
    if (dl & 0x80)
        goto loc_3e3eb;
    al = dl;
loc_3e3eb: // 0160:3e3eb
    if (dh & 0x80)
        goto loc_3e3f2;
    ah = dh;
loc_3e3f2: // 0160:3e3f2
    if (!(ax & 0x8080))
        goto loc_3e41b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e3fc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e402));
    if (dx == 0x8080)
        goto loc_3e41b;
    if (dl & 0x80)
        goto loc_3e414;
    al = dl;
loc_3e414: // 0160:3e414
    if (dh & 0x80)
        goto loc_3e41b;
    ah = dh;
loc_3e41b: // 0160:3e41b
    memoryASet16(ds, edi + 76, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e424));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e42a));
    if (!(eax & 0x00008080))
        goto loc_3e481;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e439));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e43f));
    if (dx == 0x8080)
        goto loc_3e458;
    if (dl & 0x80)
        goto loc_3e451;
    al = dl;
loc_3e451: // 0160:3e451
    if (dh & 0x80)
        goto loc_3e458;
    ah = dh;
loc_3e458: // 0160:3e458
    if (!(ax & 0x8080))
        goto loc_3e481;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e462));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e468));
    if (dx == 0x8080)
        goto loc_3e481;
    if (dl & 0x80)
        goto loc_3e47a;
    al = dl;
loc_3e47a: // 0160:3e47a
    if (dh & 0x80)
        goto loc_3e481;
    ah = dh;
loc_3e481: // 0160:3e481
    memoryASet16(ds, edi + 78, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e48a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e490));
    if (!(eax & 0x00008080))
        goto loc_3e4e7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e49f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e4a5));
    if (dx == 0x8080)
        goto loc_3e4be;
    if (dl & 0x80)
        goto loc_3e4b7;
    al = dl;
loc_3e4b7: // 0160:3e4b7
    if (dh & 0x80)
        goto loc_3e4be;
    ah = dh;
loc_3e4be: // 0160:3e4be
    if (!(ax & 0x8080))
        goto loc_3e4e7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e4c8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e4ce));
    if (dx == 0x8080)
        goto loc_3e4e7;
    if (dl & 0x80)
        goto loc_3e4e0;
    al = dl;
loc_3e4e0: // 0160:3e4e0
    if (dh & 0x80)
        goto loc_3e4e7;
    ah = dh;
loc_3e4e7: // 0160:3e4e7
    memoryASet16(ds, edi + 80, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e4f0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e4f6));
    if (!(eax & 0x00008080))
        goto loc_3e54d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e505));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e50b));
    if (dx == 0x8080)
        goto loc_3e524;
    if (dl & 0x80)
        goto loc_3e51d;
    al = dl;
loc_3e51d: // 0160:3e51d
    if (dh & 0x80)
        goto loc_3e524;
    ah = dh;
loc_3e524: // 0160:3e524
    if (!(ax & 0x8080))
        goto loc_3e54d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e52e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e534));
    if (dx == 0x8080)
        goto loc_3e54d;
    if (dl & 0x80)
        goto loc_3e546;
    al = dl;
loc_3e546: // 0160:3e546
    if (dh & 0x80)
        goto loc_3e54d;
    ah = dh;
loc_3e54d: // 0160:3e54d
    memoryASet16(ds, edi + 82, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e556));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e55c));
    if (!(eax & 0x00008080))
        goto loc_3e5b3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e56b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e571));
    if (dx == 0x8080)
        goto loc_3e58a;
    if (dl & 0x80)
        goto loc_3e583;
    al = dl;
loc_3e583: // 0160:3e583
    if (dh & 0x80)
        goto loc_3e58a;
    ah = dh;
loc_3e58a: // 0160:3e58a
    if (!(ax & 0x8080))
        goto loc_3e5b3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e594));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e59a));
    if (dx == 0x8080)
        goto loc_3e5b3;
    if (dl & 0x80)
        goto loc_3e5ac;
    al = dl;
loc_3e5ac: // 0160:3e5ac
    if (dh & 0x80)
        goto loc_3e5b3;
    ah = dh;
loc_3e5b3: // 0160:3e5b3
    memoryASet16(ds, edi + 84, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e5bc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e5c2));
    if (!(eax & 0x00008080))
        goto loc_3e619;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e5d1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e5d7));
    if (dx == 0x8080)
        goto loc_3e5f0;
    if (dl & 0x80)
        goto loc_3e5e9;
    al = dl;
loc_3e5e9: // 0160:3e5e9
    if (dh & 0x80)
        goto loc_3e5f0;
    ah = dh;
loc_3e5f0: // 0160:3e5f0
    if (!(ax & 0x8080))
        goto loc_3e619;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e5fa));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e600));
    if (dx == 0x8080)
        goto loc_3e619;
    if (dl & 0x80)
        goto loc_3e612;
    al = dl;
loc_3e612: // 0160:3e612
    if (dh & 0x80)
        goto loc_3e619;
    ah = dh;
loc_3e619: // 0160:3e619
    memoryASet16(ds, edi + 86, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e622));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e628));
    if (!(eax & 0x00008080))
        goto loc_3e67f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e637));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e63d));
    if (dx == 0x8080)
        goto loc_3e656;
    if (dl & 0x80)
        goto loc_3e64f;
    al = dl;
loc_3e64f: // 0160:3e64f
    if (dh & 0x80)
        goto loc_3e656;
    ah = dh;
loc_3e656: // 0160:3e656
    if (!(ax & 0x8080))
        goto loc_3e67f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e660));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e666));
    if (dx == 0x8080)
        goto loc_3e67f;
    if (dl & 0x80)
        goto loc_3e678;
    al = dl;
loc_3e678: // 0160:3e678
    if (dh & 0x80)
        goto loc_3e67f;
    ah = dh;
loc_3e67f: // 0160:3e67f
    memoryASet16(ds, edi + 88, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e688));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e68e));
    if (!(eax & 0x00008080))
        goto loc_3e6e5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e69d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e6a3));
    if (dx == 0x8080)
        goto loc_3e6bc;
    if (dl & 0x80)
        goto loc_3e6b5;
    al = dl;
loc_3e6b5: // 0160:3e6b5
    if (dh & 0x80)
        goto loc_3e6bc;
    ah = dh;
loc_3e6bc: // 0160:3e6bc
    if (!(ax & 0x8080))
        goto loc_3e6e5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e6c6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e6cc));
    if (dx == 0x8080)
        goto loc_3e6e5;
    if (dl & 0x80)
        goto loc_3e6de;
    al = dl;
loc_3e6de: // 0160:3e6de
    if (dh & 0x80)
        goto loc_3e6e5;
    ah = dh;
loc_3e6e5: // 0160:3e6e5
    memoryASet16(ds, edi + 90, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e6ee));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e6f4));
    if (!(eax & 0x00008080))
        goto loc_3e74b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e703));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e709));
    if (dx == 0x8080)
        goto loc_3e722;
    if (dl & 0x80)
        goto loc_3e71b;
    al = dl;
loc_3e71b: // 0160:3e71b
    if (dh & 0x80)
        goto loc_3e722;
    ah = dh;
loc_3e722: // 0160:3e722
    if (!(ax & 0x8080))
        goto loc_3e74b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e72c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e732));
    if (dx == 0x8080)
        goto loc_3e74b;
    if (dl & 0x80)
        goto loc_3e744;
    al = dl;
loc_3e744: // 0160:3e744
    if (dh & 0x80)
        goto loc_3e74b;
    ah = dh;
loc_3e74b: // 0160:3e74b
    memoryASet16(ds, edi + 92, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e754));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e75a));
    if (!(eax & 0x00008080))
        goto loc_3e7b1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e769));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e76f));
    if (dx == 0x8080)
        goto loc_3e788;
    if (dl & 0x80)
        goto loc_3e781;
    al = dl;
loc_3e781: // 0160:3e781
    if (dh & 0x80)
        goto loc_3e788;
    ah = dh;
loc_3e788: // 0160:3e788
    if (!(ax & 0x8080))
        goto loc_3e7b1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e792));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e798));
    if (dx == 0x8080)
        goto loc_3e7b1;
    if (dl & 0x80)
        goto loc_3e7aa;
    al = dl;
loc_3e7aa: // 0160:3e7aa
    if (dh & 0x80)
        goto loc_3e7b1;
    ah = dh;
loc_3e7b1: // 0160:3e7b1
    memoryASet16(ds, edi + 94, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e7ba));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e7c0));
    if (!(eax & 0x00008080))
        goto loc_3e817;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e7cf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e7d5));
    if (dx == 0x8080)
        goto loc_3e7ee;
    if (dl & 0x80)
        goto loc_3e7e7;
    al = dl;
loc_3e7e7: // 0160:3e7e7
    if (dh & 0x80)
        goto loc_3e7ee;
    ah = dh;
loc_3e7ee: // 0160:3e7ee
    if (!(ax & 0x8080))
        goto loc_3e817;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e7f8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e7fe));
    if (dx == 0x8080)
        goto loc_3e817;
    if (dl & 0x80)
        goto loc_3e810;
    al = dl;
loc_3e810: // 0160:3e810
    if (dh & 0x80)
        goto loc_3e817;
    ah = dh;
loc_3e817: // 0160:3e817
    memoryASet16(ds, edi + 96, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e820));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e826));
    if (!(eax & 0x00008080))
        goto loc_3e87d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e835));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e83b));
    if (dx == 0x8080)
        goto loc_3e854;
    if (dl & 0x80)
        goto loc_3e84d;
    al = dl;
loc_3e84d: // 0160:3e84d
    if (dh & 0x80)
        goto loc_3e854;
    ah = dh;
loc_3e854: // 0160:3e854
    if (!(ax & 0x8080))
        goto loc_3e87d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e85e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e864));
    if (dx == 0x8080)
        goto loc_3e87d;
    if (dl & 0x80)
        goto loc_3e876;
    al = dl;
loc_3e876: // 0160:3e876
    if (dh & 0x80)
        goto loc_3e87d;
    ah = dh;
loc_3e87d: // 0160:3e87d
    memoryASet16(ds, edi + 98, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e886));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e88c));
    if (!(eax & 0x00008080))
        goto loc_3e8e3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e89b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e8a1));
    if (dx == 0x8080)
        goto loc_3e8ba;
    if (dl & 0x80)
        goto loc_3e8b3;
    al = dl;
loc_3e8b3: // 0160:3e8b3
    if (dh & 0x80)
        goto loc_3e8ba;
    ah = dh;
loc_3e8ba: // 0160:3e8ba
    if (!(ax & 0x8080))
        goto loc_3e8e3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e8c4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e8ca));
    if (dx == 0x8080)
        goto loc_3e8e3;
    if (dl & 0x80)
        goto loc_3e8dc;
    al = dl;
loc_3e8dc: // 0160:3e8dc
    if (dh & 0x80)
        goto loc_3e8e3;
    ah = dh;
loc_3e8e3: // 0160:3e8e3
    memoryASet16(ds, edi + 100, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e8ec));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e8f2));
    if (!(eax & 0x00008080))
        goto loc_3e949;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e901));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e907));
    if (dx == 0x8080)
        goto loc_3e920;
    if (dl & 0x80)
        goto loc_3e919;
    al = dl;
loc_3e919: // 0160:3e919
    if (dh & 0x80)
        goto loc_3e920;
    ah = dh;
loc_3e920: // 0160:3e920
    if (!(ax & 0x8080))
        goto loc_3e949;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e92a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e930));
    if (dx == 0x8080)
        goto loc_3e949;
    if (dl & 0x80)
        goto loc_3e942;
    al = dl;
loc_3e942: // 0160:3e942
    if (dh & 0x80)
        goto loc_3e949;
    ah = dh;
loc_3e949: // 0160:3e949
    memoryASet16(ds, edi + 102, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e952));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e958));
    if (!(eax & 0x00008080))
        goto loc_3e9af;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e967));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e96d));
    if (dx == 0x8080)
        goto loc_3e986;
    if (dl & 0x80)
        goto loc_3e97f;
    al = dl;
loc_3e97f: // 0160:3e97f
    if (dh & 0x80)
        goto loc_3e986;
    ah = dh;
loc_3e986: // 0160:3e986
    if (!(ax & 0x8080))
        goto loc_3e9af;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e990));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e996));
    if (dx == 0x8080)
        goto loc_3e9af;
    if (dl & 0x80)
        goto loc_3e9a8;
    al = dl;
loc_3e9a8: // 0160:3e9a8
    if (dh & 0x80)
        goto loc_3e9af;
    ah = dh;
loc_3e9af: // 0160:3e9af
    memoryASet16(ds, edi + 104, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e9b8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3e9be));
    if (!(eax & 0x00008080))
        goto loc_3ea15;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e9cd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3e9d3));
    if (dx == 0x8080)
        goto loc_3e9ec;
    if (dl & 0x80)
        goto loc_3e9e5;
    al = dl;
loc_3e9e5: // 0160:3e9e5
    if (dh & 0x80)
        goto loc_3e9ec;
    ah = dh;
loc_3e9ec: // 0160:3e9ec
    if (!(ax & 0x8080))
        goto loc_3ea15;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e9f6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3e9fc));
    if (dx == 0x8080)
        goto loc_3ea15;
    if (dl & 0x80)
        goto loc_3ea0e;
    al = dl;
loc_3ea0e: // 0160:3ea0e
    if (dh & 0x80)
        goto loc_3ea15;
    ah = dh;
loc_3ea15: // 0160:3ea15
    memoryASet16(ds, edi + 106, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ea1e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ea24));
    if (!(eax & 0x00008080))
        goto loc_3ea7b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ea33));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ea39));
    if (dx == 0x8080)
        goto loc_3ea52;
    if (dl & 0x80)
        goto loc_3ea4b;
    al = dl;
loc_3ea4b: // 0160:3ea4b
    if (dh & 0x80)
        goto loc_3ea52;
    ah = dh;
loc_3ea52: // 0160:3ea52
    if (!(ax & 0x8080))
        goto loc_3ea7b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ea5c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ea62));
    if (dx == 0x8080)
        goto loc_3ea7b;
    if (dl & 0x80)
        goto loc_3ea74;
    al = dl;
loc_3ea74: // 0160:3ea74
    if (dh & 0x80)
        goto loc_3ea7b;
    ah = dh;
loc_3ea7b: // 0160:3ea7b
    memoryASet16(ds, edi + 108, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ea84));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ea8a));
    if (!(eax & 0x00008080))
        goto loc_3eae1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ea99));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ea9f));
    if (dx == 0x8080)
        goto loc_3eab8;
    if (dl & 0x80)
        goto loc_3eab1;
    al = dl;
loc_3eab1: // 0160:3eab1
    if (dh & 0x80)
        goto loc_3eab8;
    ah = dh;
loc_3eab8: // 0160:3eab8
    if (!(ax & 0x8080))
        goto loc_3eae1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eac2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eac8));
    if (dx == 0x8080)
        goto loc_3eae1;
    if (dl & 0x80)
        goto loc_3eada;
    al = dl;
loc_3eada: // 0160:3eada
    if (dh & 0x80)
        goto loc_3eae1;
    ah = dh;
loc_3eae1: // 0160:3eae1
    memoryASet16(ds, edi + 110, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eaea));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eaf0));
    if (!(eax & 0x00008080))
        goto loc_3eb47;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3eaff));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3eb05));
    if (dx == 0x8080)
        goto loc_3eb1e;
    if (dl & 0x80)
        goto loc_3eb17;
    al = dl;
loc_3eb17: // 0160:3eb17
    if (dh & 0x80)
        goto loc_3eb1e;
    ah = dh;
loc_3eb1e: // 0160:3eb1e
    if (!(ax & 0x8080))
        goto loc_3eb47;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eb28));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eb2e));
    if (dx == 0x8080)
        goto loc_3eb47;
    if (dl & 0x80)
        goto loc_3eb40;
    al = dl;
loc_3eb40: // 0160:3eb40
    if (dh & 0x80)
        goto loc_3eb47;
    ah = dh;
loc_3eb47: // 0160:3eb47
    memoryASet16(ds, edi + 112, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eb50));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eb56));
    if (!(eax & 0x00008080))
        goto loc_3ebad;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3eb65));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3eb6b));
    if (dx == 0x8080)
        goto loc_3eb84;
    if (dl & 0x80)
        goto loc_3eb7d;
    al = dl;
loc_3eb7d: // 0160:3eb7d
    if (dh & 0x80)
        goto loc_3eb84;
    ah = dh;
loc_3eb84: // 0160:3eb84
    if (!(ax & 0x8080))
        goto loc_3ebad;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eb8e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eb94));
    if (dx == 0x8080)
        goto loc_3ebad;
    if (dl & 0x80)
        goto loc_3eba6;
    al = dl;
loc_3eba6: // 0160:3eba6
    if (dh & 0x80)
        goto loc_3ebad;
    ah = dh;
loc_3ebad: // 0160:3ebad
    memoryASet16(ds, edi + 114, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ebb6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ebbc));
    if (!(eax & 0x00008080))
        goto loc_3ec13;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ebcb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ebd1));
    if (dx == 0x8080)
        goto loc_3ebea;
    if (dl & 0x80)
        goto loc_3ebe3;
    al = dl;
loc_3ebe3: // 0160:3ebe3
    if (dh & 0x80)
        goto loc_3ebea;
    ah = dh;
loc_3ebea: // 0160:3ebea
    if (!(ax & 0x8080))
        goto loc_3ec13;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ebf4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ebfa));
    if (dx == 0x8080)
        goto loc_3ec13;
    if (dl & 0x80)
        goto loc_3ec0c;
    al = dl;
loc_3ec0c: // 0160:3ec0c
    if (dh & 0x80)
        goto loc_3ec13;
    ah = dh;
loc_3ec13: // 0160:3ec13
    memoryASet16(ds, edi + 116, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ec1c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ec22));
    if (!(eax & 0x00008080))
        goto loc_3ec79;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ec31));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ec37));
    if (dx == 0x8080)
        goto loc_3ec50;
    if (dl & 0x80)
        goto loc_3ec49;
    al = dl;
loc_3ec49: // 0160:3ec49
    if (dh & 0x80)
        goto loc_3ec50;
    ah = dh;
loc_3ec50: // 0160:3ec50
    if (!(ax & 0x8080))
        goto loc_3ec79;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ec5a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ec60));
    if (dx == 0x8080)
        goto loc_3ec79;
    if (dl & 0x80)
        goto loc_3ec72;
    al = dl;
loc_3ec72: // 0160:3ec72
    if (dh & 0x80)
        goto loc_3ec79;
    ah = dh;
loc_3ec79: // 0160:3ec79
    memoryASet16(ds, edi + 118, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ec82));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ec88));
    if (!(eax & 0x00008080))
        goto loc_3ecdf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ec97));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ec9d));
    if (dx == 0x8080)
        goto loc_3ecb6;
    if (dl & 0x80)
        goto loc_3ecaf;
    al = dl;
loc_3ecaf: // 0160:3ecaf
    if (dh & 0x80)
        goto loc_3ecb6;
    ah = dh;
loc_3ecb6: // 0160:3ecb6
    if (!(ax & 0x8080))
        goto loc_3ecdf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ecc0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ecc6));
    if (dx == 0x8080)
        goto loc_3ecdf;
    if (dl & 0x80)
        goto loc_3ecd8;
    al = dl;
loc_3ecd8: // 0160:3ecd8
    if (dh & 0x80)
        goto loc_3ecdf;
    ah = dh;
loc_3ecdf: // 0160:3ecdf
    memoryASet16(ds, edi + 120, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ece8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ecee));
    if (!(eax & 0x00008080))
        goto loc_3ed45;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ecfd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ed03));
    if (dx == 0x8080)
        goto loc_3ed1c;
    if (dl & 0x80)
        goto loc_3ed15;
    al = dl;
loc_3ed15: // 0160:3ed15
    if (dh & 0x80)
        goto loc_3ed1c;
    ah = dh;
loc_3ed1c: // 0160:3ed1c
    if (!(ax & 0x8080))
        goto loc_3ed45;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ed26));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ed2c));
    if (dx == 0x8080)
        goto loc_3ed45;
    if (dl & 0x80)
        goto loc_3ed3e;
    al = dl;
loc_3ed3e: // 0160:3ed3e
    if (dh & 0x80)
        goto loc_3ed45;
    ah = dh;
loc_3ed45: // 0160:3ed45
    memoryASet16(ds, edi + 122, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ed4e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ed54));
    if (!(eax & 0x00008080))
        goto loc_3edab;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ed63));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ed69));
    if (dx == 0x8080)
        goto loc_3ed82;
    if (dl & 0x80)
        goto loc_3ed7b;
    al = dl;
loc_3ed7b: // 0160:3ed7b
    if (dh & 0x80)
        goto loc_3ed82;
    ah = dh;
loc_3ed82: // 0160:3ed82
    if (!(ax & 0x8080))
        goto loc_3edab;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ed8c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ed92));
    if (dx == 0x8080)
        goto loc_3edab;
    if (dl & 0x80)
        goto loc_3eda4;
    al = dl;
loc_3eda4: // 0160:3eda4
    if (dh & 0x80)
        goto loc_3edab;
    ah = dh;
loc_3edab: // 0160:3edab
    memoryASet16(ds, edi + 124, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3edb4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3edba));
    if (!(eax & 0x00008080))
        goto loc_3ee11;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3edc9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3edcf));
    if (dx == 0x8080)
        goto loc_3ede8;
    if (dl & 0x80)
        goto loc_3ede1;
    al = dl;
loc_3ede1: // 0160:3ede1
    if (dh & 0x80)
        goto loc_3ede8;
    ah = dh;
loc_3ede8: // 0160:3ede8
    if (!(ax & 0x8080))
        goto loc_3ee11;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3edf2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3edf8));
    if (dx == 0x8080)
        goto loc_3ee11;
    if (dl & 0x80)
        goto loc_3ee0a;
    al = dl;
loc_3ee0a: // 0160:3ee0a
    if (dh & 0x80)
        goto loc_3ee11;
    ah = dh;
loc_3ee11: // 0160:3ee11
    memoryASet16(ds, edi + 126, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ee1a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ee20));
    if (!(eax & 0x00008080))
        goto loc_3ee77;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ee2f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ee35));
    if (dx == 0x8080)
        goto loc_3ee4e;
    if (dl & 0x80)
        goto loc_3ee47;
    al = dl;
loc_3ee47: // 0160:3ee47
    if (dh & 0x80)
        goto loc_3ee4e;
    ah = dh;
loc_3ee4e: // 0160:3ee4e
    if (!(ax & 0x8080))
        goto loc_3ee77;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ee58));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ee5e));
    if (dx == 0x8080)
        goto loc_3ee77;
    if (dl & 0x80)
        goto loc_3ee70;
    al = dl;
loc_3ee70: // 0160:3ee70
    if (dh & 0x80)
        goto loc_3ee77;
    ah = dh;
loc_3ee77: // 0160:3ee77
    memoryASet16(ds, edi + 128, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ee80));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ee86));
    if (!(eax & 0x00008080))
        goto loc_3eedd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ee95));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ee9b));
    if (dx == 0x8080)
        goto loc_3eeb4;
    if (dl & 0x80)
        goto loc_3eead;
    al = dl;
loc_3eead: // 0160:3eead
    if (dh & 0x80)
        goto loc_3eeb4;
    ah = dh;
loc_3eeb4: // 0160:3eeb4
    if (!(ax & 0x8080))
        goto loc_3eedd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eebe));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eec4));
    if (dx == 0x8080)
        goto loc_3eedd;
    if (dl & 0x80)
        goto loc_3eed6;
    al = dl;
loc_3eed6: // 0160:3eed6
    if (dh & 0x80)
        goto loc_3eedd;
    ah = dh;
loc_3eedd: // 0160:3eedd
    memoryASet16(ds, edi + 130, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eee6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3eeec));
    if (!(eax & 0x00008080))
        goto loc_3ef43;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3eefb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ef01));
    if (dx == 0x8080)
        goto loc_3ef1a;
    if (dl & 0x80)
        goto loc_3ef13;
    al = dl;
loc_3ef13: // 0160:3ef13
    if (dh & 0x80)
        goto loc_3ef1a;
    ah = dh;
loc_3ef1a: // 0160:3ef1a
    if (!(ax & 0x8080))
        goto loc_3ef43;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ef24));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ef2a));
    if (dx == 0x8080)
        goto loc_3ef43;
    if (dl & 0x80)
        goto loc_3ef3c;
    al = dl;
loc_3ef3c: // 0160:3ef3c
    if (dh & 0x80)
        goto loc_3ef43;
    ah = dh;
loc_3ef43: // 0160:3ef43
    memoryASet16(ds, edi + 132, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ef4c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ef52));
    if (!(eax & 0x00008080))
        goto loc_3efa9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ef61));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ef67));
    if (dx == 0x8080)
        goto loc_3ef80;
    if (dl & 0x80)
        goto loc_3ef79;
    al = dl;
loc_3ef79: // 0160:3ef79
    if (dh & 0x80)
        goto loc_3ef80;
    ah = dh;
loc_3ef80: // 0160:3ef80
    if (!(ax & 0x8080))
        goto loc_3efa9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ef8a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ef90));
    if (dx == 0x8080)
        goto loc_3efa9;
    if (dl & 0x80)
        goto loc_3efa2;
    al = dl;
loc_3efa2: // 0160:3efa2
    if (dh & 0x80)
        goto loc_3efa9;
    ah = dh;
loc_3efa9: // 0160:3efa9
    memoryASet16(ds, edi + 134, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3efb2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3efb8));
    if (!(eax & 0x00008080))
        goto loc_3f00f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3efc7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3efcd));
    if (dx == 0x8080)
        goto loc_3efe6;
    if (dl & 0x80)
        goto loc_3efdf;
    al = dl;
loc_3efdf: // 0160:3efdf
    if (dh & 0x80)
        goto loc_3efe6;
    ah = dh;
loc_3efe6: // 0160:3efe6
    if (!(ax & 0x8080))
        goto loc_3f00f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eff0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3eff6));
    if (dx == 0x8080)
        goto loc_3f00f;
    if (dl & 0x80)
        goto loc_3f008;
    al = dl;
loc_3f008: // 0160:3f008
    if (dh & 0x80)
        goto loc_3f00f;
    ah = dh;
loc_3f00f: // 0160:3f00f
    memoryASet16(ds, edi + 136, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f018));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f01e));
    if (!(eax & 0x00008080))
        goto loc_3f075;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f02d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f033));
    if (dx == 0x8080)
        goto loc_3f04c;
    if (dl & 0x80)
        goto loc_3f045;
    al = dl;
loc_3f045: // 0160:3f045
    if (dh & 0x80)
        goto loc_3f04c;
    ah = dh;
loc_3f04c: // 0160:3f04c
    if (!(ax & 0x8080))
        goto loc_3f075;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f056));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f05c));
    if (dx == 0x8080)
        goto loc_3f075;
    if (dl & 0x80)
        goto loc_3f06e;
    al = dl;
loc_3f06e: // 0160:3f06e
    if (dh & 0x80)
        goto loc_3f075;
    ah = dh;
loc_3f075: // 0160:3f075
    memoryASet16(ds, edi + 138, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f07e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f084));
    if (!(eax & 0x00008080))
        goto loc_3f0db;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f093));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f099));
    if (dx == 0x8080)
        goto loc_3f0b2;
    if (dl & 0x80)
        goto loc_3f0ab;
    al = dl;
loc_3f0ab: // 0160:3f0ab
    if (dh & 0x80)
        goto loc_3f0b2;
    ah = dh;
loc_3f0b2: // 0160:3f0b2
    if (!(ax & 0x8080))
        goto loc_3f0db;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f0bc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f0c2));
    if (dx == 0x8080)
        goto loc_3f0db;
    if (dl & 0x80)
        goto loc_3f0d4;
    al = dl;
loc_3f0d4: // 0160:3f0d4
    if (dh & 0x80)
        goto loc_3f0db;
    ah = dh;
loc_3f0db: // 0160:3f0db
    memoryASet16(ds, edi + 140, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f0e4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f0ea));
    if (!(eax & 0x00008080))
        goto loc_3f141;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f0f9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f0ff));
    if (dx == 0x8080)
        goto loc_3f118;
    if (dl & 0x80)
        goto loc_3f111;
    al = dl;
loc_3f111: // 0160:3f111
    if (dh & 0x80)
        goto loc_3f118;
    ah = dh;
loc_3f118: // 0160:3f118
    if (!(ax & 0x8080))
        goto loc_3f141;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f122));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f128));
    if (dx == 0x8080)
        goto loc_3f141;
    if (dl & 0x80)
        goto loc_3f13a;
    al = dl;
loc_3f13a: // 0160:3f13a
    if (dh & 0x80)
        goto loc_3f141;
    ah = dh;
loc_3f141: // 0160:3f141
    memoryASet16(ds, edi + 142, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f14a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f150));
    if (!(eax & 0x00008080))
        goto loc_3f1a7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f15f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f165));
    if (dx == 0x8080)
        goto loc_3f17e;
    if (dl & 0x80)
        goto loc_3f177;
    al = dl;
loc_3f177: // 0160:3f177
    if (dh & 0x80)
        goto loc_3f17e;
    ah = dh;
loc_3f17e: // 0160:3f17e
    if (!(ax & 0x8080))
        goto loc_3f1a7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f188));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f18e));
    if (dx == 0x8080)
        goto loc_3f1a7;
    if (dl & 0x80)
        goto loc_3f1a0;
    al = dl;
loc_3f1a0: // 0160:3f1a0
    if (dh & 0x80)
        goto loc_3f1a7;
    ah = dh;
loc_3f1a7: // 0160:3f1a7
    memoryASet16(ds, edi + 144, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f1b0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f1b6));
    if (!(eax & 0x00008080))
        goto loc_3f20d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f1c5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f1cb));
    if (dx == 0x8080)
        goto loc_3f1e4;
    if (dl & 0x80)
        goto loc_3f1dd;
    al = dl;
loc_3f1dd: // 0160:3f1dd
    if (dh & 0x80)
        goto loc_3f1e4;
    ah = dh;
loc_3f1e4: // 0160:3f1e4
    if (!(ax & 0x8080))
        goto loc_3f20d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f1ee));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f1f4));
    if (dx == 0x8080)
        goto loc_3f20d;
    if (dl & 0x80)
        goto loc_3f206;
    al = dl;
loc_3f206: // 0160:3f206
    if (dh & 0x80)
        goto loc_3f20d;
    ah = dh;
loc_3f20d: // 0160:3f20d
    memoryASet16(ds, edi + 146, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f216));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f21c));
    if (!(eax & 0x00008080))
        goto loc_3f273;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f22b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f231));
    if (dx == 0x8080)
        goto loc_3f24a;
    if (dl & 0x80)
        goto loc_3f243;
    al = dl;
loc_3f243: // 0160:3f243
    if (dh & 0x80)
        goto loc_3f24a;
    ah = dh;
loc_3f24a: // 0160:3f24a
    if (!(ax & 0x8080))
        goto loc_3f273;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f254));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f25a));
    if (dx == 0x8080)
        goto loc_3f273;
    if (dl & 0x80)
        goto loc_3f26c;
    al = dl;
loc_3f26c: // 0160:3f26c
    if (dh & 0x80)
        goto loc_3f273;
    ah = dh;
loc_3f273: // 0160:3f273
    memoryASet16(ds, edi + 148, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f27c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f282));
    if (!(eax & 0x00008080))
        goto loc_3f2d9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f291));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f297));
    if (dx == 0x8080)
        goto loc_3f2b0;
    if (dl & 0x80)
        goto loc_3f2a9;
    al = dl;
loc_3f2a9: // 0160:3f2a9
    if (dh & 0x80)
        goto loc_3f2b0;
    ah = dh;
loc_3f2b0: // 0160:3f2b0
    if (!(ax & 0x8080))
        goto loc_3f2d9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f2ba));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f2c0));
    if (dx == 0x8080)
        goto loc_3f2d9;
    if (dl & 0x80)
        goto loc_3f2d2;
    al = dl;
loc_3f2d2: // 0160:3f2d2
    if (dh & 0x80)
        goto loc_3f2d9;
    ah = dh;
loc_3f2d9: // 0160:3f2d9
    memoryASet16(ds, edi + 150, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f2e2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f2e8));
    if (!(eax & 0x00008080))
        goto loc_3f33f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f2f7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f2fd));
    if (dx == 0x8080)
        goto loc_3f316;
    if (dl & 0x80)
        goto loc_3f30f;
    al = dl;
loc_3f30f: // 0160:3f30f
    if (dh & 0x80)
        goto loc_3f316;
    ah = dh;
loc_3f316: // 0160:3f316
    if (!(ax & 0x8080))
        goto loc_3f33f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f320));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f326));
    if (dx == 0x8080)
        goto loc_3f33f;
    if (dl & 0x80)
        goto loc_3f338;
    al = dl;
loc_3f338: // 0160:3f338
    if (dh & 0x80)
        goto loc_3f33f;
    ah = dh;
loc_3f33f: // 0160:3f33f
    memoryASet16(ds, edi + 152, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f348));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f34e));
    if (!(eax & 0x00008080))
        goto loc_3f3a5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f35d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f363));
    if (dx == 0x8080)
        goto loc_3f37c;
    if (dl & 0x80)
        goto loc_3f375;
    al = dl;
loc_3f375: // 0160:3f375
    if (dh & 0x80)
        goto loc_3f37c;
    ah = dh;
loc_3f37c: // 0160:3f37c
    if (!(ax & 0x8080))
        goto loc_3f3a5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f386));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f38c));
    if (dx == 0x8080)
        goto loc_3f3a5;
    if (dl & 0x80)
        goto loc_3f39e;
    al = dl;
loc_3f39e: // 0160:3f39e
    if (dh & 0x80)
        goto loc_3f3a5;
    ah = dh;
loc_3f3a5: // 0160:3f3a5
    memoryASet16(ds, edi + 154, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f3ae));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f3b4));
    if (!(eax & 0x00008080))
        goto loc_3f40b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f3c3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f3c9));
    if (dx == 0x8080)
        goto loc_3f3e2;
    if (dl & 0x80)
        goto loc_3f3db;
    al = dl;
loc_3f3db: // 0160:3f3db
    if (dh & 0x80)
        goto loc_3f3e2;
    ah = dh;
loc_3f3e2: // 0160:3f3e2
    if (!(ax & 0x8080))
        goto loc_3f40b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f3ec));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f3f2));
    if (dx == 0x8080)
        goto loc_3f40b;
    if (dl & 0x80)
        goto loc_3f404;
    al = dl;
loc_3f404: // 0160:3f404
    if (dh & 0x80)
        goto loc_3f40b;
    ah = dh;
loc_3f40b: // 0160:3f40b
    memoryASet16(ds, edi + 156, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f414));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f41a));
    if (!(eax & 0x00008080))
        goto loc_3f471;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f429));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f42f));
    if (dx == 0x8080)
        goto loc_3f448;
    if (dl & 0x80)
        goto loc_3f441;
    al = dl;
loc_3f441: // 0160:3f441
    if (dh & 0x80)
        goto loc_3f448;
    ah = dh;
loc_3f448: // 0160:3f448
    if (!(ax & 0x8080))
        goto loc_3f471;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f452));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f458));
    if (dx == 0x8080)
        goto loc_3f471;
    if (dl & 0x80)
        goto loc_3f46a;
    al = dl;
loc_3f46a: // 0160:3f46a
    if (dh & 0x80)
        goto loc_3f471;
    ah = dh;
loc_3f471: // 0160:3f471
    memoryASet16(ds, edi + 158, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f47a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f480));
    if (!(eax & 0x00008080))
        goto loc_3f4d7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f48f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f495));
    if (dx == 0x8080)
        goto loc_3f4ae;
    if (dl & 0x80)
        goto loc_3f4a7;
    al = dl;
loc_3f4a7: // 0160:3f4a7
    if (dh & 0x80)
        goto loc_3f4ae;
    ah = dh;
loc_3f4ae: // 0160:3f4ae
    if (!(ax & 0x8080))
        goto loc_3f4d7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f4b8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f4be));
    if (dx == 0x8080)
        goto loc_3f4d7;
    if (dl & 0x80)
        goto loc_3f4d0;
    al = dl;
loc_3f4d0: // 0160:3f4d0
    if (dh & 0x80)
        goto loc_3f4d7;
    ah = dh;
loc_3f4d7: // 0160:3f4d7
    memoryASet16(ds, edi + 160, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f4e0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f4e6));
    if (!(eax & 0x00008080))
        goto loc_3f53d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f4f5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f4fb));
    if (dx == 0x8080)
        goto loc_3f514;
    if (dl & 0x80)
        goto loc_3f50d;
    al = dl;
loc_3f50d: // 0160:3f50d
    if (dh & 0x80)
        goto loc_3f514;
    ah = dh;
loc_3f514: // 0160:3f514
    if (!(ax & 0x8080))
        goto loc_3f53d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f51e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f524));
    if (dx == 0x8080)
        goto loc_3f53d;
    if (dl & 0x80)
        goto loc_3f536;
    al = dl;
loc_3f536: // 0160:3f536
    if (dh & 0x80)
        goto loc_3f53d;
    ah = dh;
loc_3f53d: // 0160:3f53d
    memoryASet16(ds, edi + 162, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f546));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f54c));
    if (!(eax & 0x00008080))
        goto loc_3f5a3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f55b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f561));
    if (dx == 0x8080)
        goto loc_3f57a;
    if (dl & 0x80)
        goto loc_3f573;
    al = dl;
loc_3f573: // 0160:3f573
    if (dh & 0x80)
        goto loc_3f57a;
    ah = dh;
loc_3f57a: // 0160:3f57a
    if (!(ax & 0x8080))
        goto loc_3f5a3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f584));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f58a));
    if (dx == 0x8080)
        goto loc_3f5a3;
    if (dl & 0x80)
        goto loc_3f59c;
    al = dl;
loc_3f59c: // 0160:3f59c
    if (dh & 0x80)
        goto loc_3f5a3;
    ah = dh;
loc_3f5a3: // 0160:3f5a3
    memoryASet16(ds, edi + 164, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f5ac));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f5b2));
    if (!(eax & 0x00008080))
        goto loc_3f609;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f5c1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f5c7));
    if (dx == 0x8080)
        goto loc_3f5e0;
    if (dl & 0x80)
        goto loc_3f5d9;
    al = dl;
loc_3f5d9: // 0160:3f5d9
    if (dh & 0x80)
        goto loc_3f5e0;
    ah = dh;
loc_3f5e0: // 0160:3f5e0
    if (!(ax & 0x8080))
        goto loc_3f609;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f5ea));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f5f0));
    if (dx == 0x8080)
        goto loc_3f609;
    if (dl & 0x80)
        goto loc_3f602;
    al = dl;
loc_3f602: // 0160:3f602
    if (dh & 0x80)
        goto loc_3f609;
    ah = dh;
loc_3f609: // 0160:3f609
    memoryASet16(ds, edi + 166, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f612));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f618));
    if (!(eax & 0x00008080))
        goto loc_3f66f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f627));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f62d));
    if (dx == 0x8080)
        goto loc_3f646;
    if (dl & 0x80)
        goto loc_3f63f;
    al = dl;
loc_3f63f: // 0160:3f63f
    if (dh & 0x80)
        goto loc_3f646;
    ah = dh;
loc_3f646: // 0160:3f646
    if (!(ax & 0x8080))
        goto loc_3f66f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f650));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f656));
    if (dx == 0x8080)
        goto loc_3f66f;
    if (dl & 0x80)
        goto loc_3f668;
    al = dl;
loc_3f668: // 0160:3f668
    if (dh & 0x80)
        goto loc_3f66f;
    ah = dh;
loc_3f66f: // 0160:3f66f
    memoryASet16(ds, edi + 168, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f678));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f67e));
    if (!(eax & 0x00008080))
        goto loc_3f6d5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f68d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f693));
    if (dx == 0x8080)
        goto loc_3f6ac;
    if (dl & 0x80)
        goto loc_3f6a5;
    al = dl;
loc_3f6a5: // 0160:3f6a5
    if (dh & 0x80)
        goto loc_3f6ac;
    ah = dh;
loc_3f6ac: // 0160:3f6ac
    if (!(ax & 0x8080))
        goto loc_3f6d5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f6b6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f6bc));
    if (dx == 0x8080)
        goto loc_3f6d5;
    if (dl & 0x80)
        goto loc_3f6ce;
    al = dl;
loc_3f6ce: // 0160:3f6ce
    if (dh & 0x80)
        goto loc_3f6d5;
    ah = dh;
loc_3f6d5: // 0160:3f6d5
    memoryASet16(ds, edi + 170, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f6de));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f6e4));
    if (!(eax & 0x00008080))
        goto loc_3f73b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f6f3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f6f9));
    if (dx == 0x8080)
        goto loc_3f712;
    if (dl & 0x80)
        goto loc_3f70b;
    al = dl;
loc_3f70b: // 0160:3f70b
    if (dh & 0x80)
        goto loc_3f712;
    ah = dh;
loc_3f712: // 0160:3f712
    if (!(ax & 0x8080))
        goto loc_3f73b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f71c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f722));
    if (dx == 0x8080)
        goto loc_3f73b;
    if (dl & 0x80)
        goto loc_3f734;
    al = dl;
loc_3f734: // 0160:3f734
    if (dh & 0x80)
        goto loc_3f73b;
    ah = dh;
loc_3f73b: // 0160:3f73b
    memoryASet16(ds, edi + 172, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f744));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f74a));
    if (!(eax & 0x00008080))
        goto loc_3f7a1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f759));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f75f));
    if (dx == 0x8080)
        goto loc_3f778;
    if (dl & 0x80)
        goto loc_3f771;
    al = dl;
loc_3f771: // 0160:3f771
    if (dh & 0x80)
        goto loc_3f778;
    ah = dh;
loc_3f778: // 0160:3f778
    if (!(ax & 0x8080))
        goto loc_3f7a1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f782));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f788));
    if (dx == 0x8080)
        goto loc_3f7a1;
    if (dl & 0x80)
        goto loc_3f79a;
    al = dl;
loc_3f79a: // 0160:3f79a
    if (dh & 0x80)
        goto loc_3f7a1;
    ah = dh;
loc_3f7a1: // 0160:3f7a1
    memoryASet16(ds, edi + 174, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f7aa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f7b0));
    if (!(eax & 0x00008080))
        goto loc_3f807;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f7bf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f7c5));
    if (dx == 0x8080)
        goto loc_3f7de;
    if (dl & 0x80)
        goto loc_3f7d7;
    al = dl;
loc_3f7d7: // 0160:3f7d7
    if (dh & 0x80)
        goto loc_3f7de;
    ah = dh;
loc_3f7de: // 0160:3f7de
    if (!(ax & 0x8080))
        goto loc_3f807;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f7e8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f7ee));
    if (dx == 0x8080)
        goto loc_3f807;
    if (dl & 0x80)
        goto loc_3f800;
    al = dl;
loc_3f800: // 0160:3f800
    if (dh & 0x80)
        goto loc_3f807;
    ah = dh;
loc_3f807: // 0160:3f807
    memoryASet16(ds, edi + 176, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f810));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f816));
    if (!(eax & 0x00008080))
        goto loc_3f86d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f825));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f82b));
    if (dx == 0x8080)
        goto loc_3f844;
    if (dl & 0x80)
        goto loc_3f83d;
    al = dl;
loc_3f83d: // 0160:3f83d
    if (dh & 0x80)
        goto loc_3f844;
    ah = dh;
loc_3f844: // 0160:3f844
    if (!(ax & 0x8080))
        goto loc_3f86d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f84e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f854));
    if (dx == 0x8080)
        goto loc_3f86d;
    if (dl & 0x80)
        goto loc_3f866;
    al = dl;
loc_3f866: // 0160:3f866
    if (dh & 0x80)
        goto loc_3f86d;
    ah = dh;
loc_3f86d: // 0160:3f86d
    memoryASet16(ds, edi + 178, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f876));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f87c));
    if (!(eax & 0x00008080))
        goto loc_3f8d3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f88b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f891));
    if (dx == 0x8080)
        goto loc_3f8aa;
    if (dl & 0x80)
        goto loc_3f8a3;
    al = dl;
loc_3f8a3: // 0160:3f8a3
    if (dh & 0x80)
        goto loc_3f8aa;
    ah = dh;
loc_3f8aa: // 0160:3f8aa
    if (!(ax & 0x8080))
        goto loc_3f8d3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f8b4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f8ba));
    if (dx == 0x8080)
        goto loc_3f8d3;
    if (dl & 0x80)
        goto loc_3f8cc;
    al = dl;
loc_3f8cc: // 0160:3f8cc
    if (dh & 0x80)
        goto loc_3f8d3;
    ah = dh;
loc_3f8d3: // 0160:3f8d3
    memoryASet16(ds, edi + 180, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f8dc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f8e2));
    if (!(eax & 0x00008080))
        goto loc_3f939;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f8f1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f8f7));
    if (dx == 0x8080)
        goto loc_3f910;
    if (dl & 0x80)
        goto loc_3f909;
    al = dl;
loc_3f909: // 0160:3f909
    if (dh & 0x80)
        goto loc_3f910;
    ah = dh;
loc_3f910: // 0160:3f910
    if (!(ax & 0x8080))
        goto loc_3f939;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f91a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f920));
    if (dx == 0x8080)
        goto loc_3f939;
    if (dl & 0x80)
        goto loc_3f932;
    al = dl;
loc_3f932: // 0160:3f932
    if (dh & 0x80)
        goto loc_3f939;
    ah = dh;
loc_3f939: // 0160:3f939
    memoryASet16(ds, edi + 182, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f942));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f948));
    if (!(eax & 0x00008080))
        goto loc_3f99f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f957));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f95d));
    if (dx == 0x8080)
        goto loc_3f976;
    if (dl & 0x80)
        goto loc_3f96f;
    al = dl;
loc_3f96f: // 0160:3f96f
    if (dh & 0x80)
        goto loc_3f976;
    ah = dh;
loc_3f976: // 0160:3f976
    if (!(ax & 0x8080))
        goto loc_3f99f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f980));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f986));
    if (dx == 0x8080)
        goto loc_3f99f;
    if (dl & 0x80)
        goto loc_3f998;
    al = dl;
loc_3f998: // 0160:3f998
    if (dh & 0x80)
        goto loc_3f99f;
    ah = dh;
loc_3f99f: // 0160:3f99f
    memoryASet16(ds, edi + 184, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f9a8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3f9ae));
    if (!(eax & 0x00008080))
        goto loc_3fa05;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f9bd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3f9c3));
    if (dx == 0x8080)
        goto loc_3f9dc;
    if (dl & 0x80)
        goto loc_3f9d5;
    al = dl;
loc_3f9d5: // 0160:3f9d5
    if (dh & 0x80)
        goto loc_3f9dc;
    ah = dh;
loc_3f9dc: // 0160:3f9dc
    if (!(ax & 0x8080))
        goto loc_3fa05;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f9e6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3f9ec));
    if (dx == 0x8080)
        goto loc_3fa05;
    if (dl & 0x80)
        goto loc_3f9fe;
    al = dl;
loc_3f9fe: // 0160:3f9fe
    if (dh & 0x80)
        goto loc_3fa05;
    ah = dh;
loc_3fa05: // 0160:3fa05
    memoryASet16(ds, edi + 186, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fa0e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fa14));
    if (!(eax & 0x00008080))
        goto loc_3fa6b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fa23));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fa29));
    if (dx == 0x8080)
        goto loc_3fa42;
    if (dl & 0x80)
        goto loc_3fa3b;
    al = dl;
loc_3fa3b: // 0160:3fa3b
    if (dh & 0x80)
        goto loc_3fa42;
    ah = dh;
loc_3fa42: // 0160:3fa42
    if (!(ax & 0x8080))
        goto loc_3fa6b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fa4c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fa52));
    if (dx == 0x8080)
        goto loc_3fa6b;
    if (dl & 0x80)
        goto loc_3fa64;
    al = dl;
loc_3fa64: // 0160:3fa64
    if (dh & 0x80)
        goto loc_3fa6b;
    ah = dh;
loc_3fa6b: // 0160:3fa6b
    memoryASet16(ds, edi + 188, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fa74));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fa7a));
    if (!(eax & 0x00008080))
        goto loc_3fad1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fa89));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fa8f));
    if (dx == 0x8080)
        goto loc_3faa8;
    if (dl & 0x80)
        goto loc_3faa1;
    al = dl;
loc_3faa1: // 0160:3faa1
    if (dh & 0x80)
        goto loc_3faa8;
    ah = dh;
loc_3faa8: // 0160:3faa8
    if (!(ax & 0x8080))
        goto loc_3fad1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fab2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fab8));
    if (dx == 0x8080)
        goto loc_3fad1;
    if (dl & 0x80)
        goto loc_3faca;
    al = dl;
loc_3faca: // 0160:3faca
    if (dh & 0x80)
        goto loc_3fad1;
    ah = dh;
loc_3fad1: // 0160:3fad1
    memoryASet16(ds, edi + 190, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fada));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fae0));
    if (!(eax & 0x00008080))
        goto loc_3fb37;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3faef));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3faf5));
    if (dx == 0x8080)
        goto loc_3fb0e;
    if (dl & 0x80)
        goto loc_3fb07;
    al = dl;
loc_3fb07: // 0160:3fb07
    if (dh & 0x80)
        goto loc_3fb0e;
    ah = dh;
loc_3fb0e: // 0160:3fb0e
    if (!(ax & 0x8080))
        goto loc_3fb37;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fb18));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fb1e));
    if (dx == 0x8080)
        goto loc_3fb37;
    if (dl & 0x80)
        goto loc_3fb30;
    al = dl;
loc_3fb30: // 0160:3fb30
    if (dh & 0x80)
        goto loc_3fb37;
    ah = dh;
loc_3fb37: // 0160:3fb37
    memoryASet16(ds, edi + 192, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fb40));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fb46));
    if (!(eax & 0x00008080))
        goto loc_3fb9d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fb55));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fb5b));
    if (dx == 0x8080)
        goto loc_3fb74;
    if (dl & 0x80)
        goto loc_3fb6d;
    al = dl;
loc_3fb6d: // 0160:3fb6d
    if (dh & 0x80)
        goto loc_3fb74;
    ah = dh;
loc_3fb74: // 0160:3fb74
    if (!(ax & 0x8080))
        goto loc_3fb9d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fb7e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fb84));
    if (dx == 0x8080)
        goto loc_3fb9d;
    if (dl & 0x80)
        goto loc_3fb96;
    al = dl;
loc_3fb96: // 0160:3fb96
    if (dh & 0x80)
        goto loc_3fb9d;
    ah = dh;
loc_3fb9d: // 0160:3fb9d
    memoryASet16(ds, edi + 194, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fba6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fbac));
    if (!(eax & 0x00008080))
        goto loc_3fc03;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fbbb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fbc1));
    if (dx == 0x8080)
        goto loc_3fbda;
    if (dl & 0x80)
        goto loc_3fbd3;
    al = dl;
loc_3fbd3: // 0160:3fbd3
    if (dh & 0x80)
        goto loc_3fbda;
    ah = dh;
loc_3fbda: // 0160:3fbda
    if (!(ax & 0x8080))
        goto loc_3fc03;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fbe4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fbea));
    if (dx == 0x8080)
        goto loc_3fc03;
    if (dl & 0x80)
        goto loc_3fbfc;
    al = dl;
loc_3fbfc: // 0160:3fbfc
    if (dh & 0x80)
        goto loc_3fc03;
    ah = dh;
loc_3fc03: // 0160:3fc03
    memoryASet16(ds, edi + 196, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fc0c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fc12));
    if (!(eax & 0x00008080))
        goto loc_3fc69;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fc21));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fc27));
    if (dx == 0x8080)
        goto loc_3fc40;
    if (dl & 0x80)
        goto loc_3fc39;
    al = dl;
loc_3fc39: // 0160:3fc39
    if (dh & 0x80)
        goto loc_3fc40;
    ah = dh;
loc_3fc40: // 0160:3fc40
    if (!(ax & 0x8080))
        goto loc_3fc69;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fc4a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fc50));
    if (dx == 0x8080)
        goto loc_3fc69;
    if (dl & 0x80)
        goto loc_3fc62;
    al = dl;
loc_3fc62: // 0160:3fc62
    if (dh & 0x80)
        goto loc_3fc69;
    ah = dh;
loc_3fc69: // 0160:3fc69
    memoryASet16(ds, edi + 198, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fc72));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fc78));
    if (!(eax & 0x00008080))
        goto loc_3fccf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fc87));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fc8d));
    if (dx == 0x8080)
        goto loc_3fca6;
    if (dl & 0x80)
        goto loc_3fc9f;
    al = dl;
loc_3fc9f: // 0160:3fc9f
    if (dh & 0x80)
        goto loc_3fca6;
    ah = dh;
loc_3fca6: // 0160:3fca6
    if (!(ax & 0x8080))
        goto loc_3fccf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fcb0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fcb6));
    if (dx == 0x8080)
        goto loc_3fccf;
    if (dl & 0x80)
        goto loc_3fcc8;
    al = dl;
loc_3fcc8: // 0160:3fcc8
    if (dh & 0x80)
        goto loc_3fccf;
    ah = dh;
loc_3fccf: // 0160:3fccf
    memoryASet16(ds, edi + 200, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fcd8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fcde));
    if (!(eax & 0x00008080))
        goto loc_3fd35;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fced));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fcf3));
    if (dx == 0x8080)
        goto loc_3fd0c;
    if (dl & 0x80)
        goto loc_3fd05;
    al = dl;
loc_3fd05: // 0160:3fd05
    if (dh & 0x80)
        goto loc_3fd0c;
    ah = dh;
loc_3fd0c: // 0160:3fd0c
    if (!(ax & 0x8080))
        goto loc_3fd35;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fd16));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fd1c));
    if (dx == 0x8080)
        goto loc_3fd35;
    if (dl & 0x80)
        goto loc_3fd2e;
    al = dl;
loc_3fd2e: // 0160:3fd2e
    if (dh & 0x80)
        goto loc_3fd35;
    ah = dh;
loc_3fd35: // 0160:3fd35
    memoryASet16(ds, edi + 202, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fd3e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fd44));
    if (!(eax & 0x00008080))
        goto loc_3fd9b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fd53));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fd59));
    if (dx == 0x8080)
        goto loc_3fd72;
    if (dl & 0x80)
        goto loc_3fd6b;
    al = dl;
loc_3fd6b: // 0160:3fd6b
    if (dh & 0x80)
        goto loc_3fd72;
    ah = dh;
loc_3fd72: // 0160:3fd72
    if (!(ax & 0x8080))
        goto loc_3fd9b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fd7c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fd82));
    if (dx == 0x8080)
        goto loc_3fd9b;
    if (dl & 0x80)
        goto loc_3fd94;
    al = dl;
loc_3fd94: // 0160:3fd94
    if (dh & 0x80)
        goto loc_3fd9b;
    ah = dh;
loc_3fd9b: // 0160:3fd9b
    memoryASet16(ds, edi + 204, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fda4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fdaa));
    if (!(eax & 0x00008080))
        goto loc_3fe01;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fdb9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fdbf));
    if (dx == 0x8080)
        goto loc_3fdd8;
    if (dl & 0x80)
        goto loc_3fdd1;
    al = dl;
loc_3fdd1: // 0160:3fdd1
    if (dh & 0x80)
        goto loc_3fdd8;
    ah = dh;
loc_3fdd8: // 0160:3fdd8
    if (!(ax & 0x8080))
        goto loc_3fe01;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fde2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fde8));
    if (dx == 0x8080)
        goto loc_3fe01;
    if (dl & 0x80)
        goto loc_3fdfa;
    al = dl;
loc_3fdfa: // 0160:3fdfa
    if (dh & 0x80)
        goto loc_3fe01;
    ah = dh;
loc_3fe01: // 0160:3fe01
    memoryASet16(ds, edi + 206, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fe0a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fe10));
    if (!(eax & 0x00008080))
        goto loc_3fe67;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fe1f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fe25));
    if (dx == 0x8080)
        goto loc_3fe3e;
    if (dl & 0x80)
        goto loc_3fe37;
    al = dl;
loc_3fe37: // 0160:3fe37
    if (dh & 0x80)
        goto loc_3fe3e;
    ah = dh;
loc_3fe3e: // 0160:3fe3e
    if (!(ax & 0x8080))
        goto loc_3fe67;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fe48));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3fe4e));
    if (dx == 0x8080)
        goto loc_3fe67;
    if (dl & 0x80)
        goto loc_3fe60;
    al = dl;
loc_3fe60: // 0160:3fe60
    if (dh & 0x80)
        goto loc_3fe67;
    ah = dh;
loc_3fe67: // 0160:3fe67
    memoryASet16(ds, edi + 208, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fe70));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fe76));
    if (!(eax & 0x00008080))
        goto loc_3fecd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fe85));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fe8b));
    if (dx == 0x8080)
        goto loc_3fea4;
    if (dl & 0x80)
        goto loc_3fe9d;
    al = dl;
loc_3fe9d: // 0160:3fe9d
    if (dh & 0x80)
        goto loc_3fea4;
    ah = dh;
loc_3fea4: // 0160:3fea4
    if (!(ax & 0x8080))
        goto loc_3fecd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3feae));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3feb4));
    if (dx == 0x8080)
        goto loc_3fecd;
    if (dl & 0x80)
        goto loc_3fec6;
    al = dl;
loc_3fec6: // 0160:3fec6
    if (dh & 0x80)
        goto loc_3fecd;
    ah = dh;
loc_3fecd: // 0160:3fecd
    memoryASet16(ds, edi + 210, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fed6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3fedc));
    if (!(eax & 0x00008080))
        goto loc_3ff33;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3feeb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3fef1));
    if (dx == 0x8080)
        goto loc_3ff0a;
    if (dl & 0x80)
        goto loc_3ff03;
    al = dl;
loc_3ff03: // 0160:3ff03
    if (dh & 0x80)
        goto loc_3ff0a;
    ah = dh;
loc_3ff0a: // 0160:3ff0a
    if (!(ax & 0x8080))
        goto loc_3ff33;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ff14));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ff1a));
    if (dx == 0x8080)
        goto loc_3ff33;
    if (dl & 0x80)
        goto loc_3ff2c;
    al = dl;
loc_3ff2c: // 0160:3ff2c
    if (dh & 0x80)
        goto loc_3ff33;
    ah = dh;
loc_3ff33: // 0160:3ff33
    memoryASet16(ds, edi + 212, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ff3c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ff42));
    if (!(eax & 0x00008080))
        goto loc_3ff99;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ff51));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ff57));
    if (dx == 0x8080)
        goto loc_3ff70;
    if (dl & 0x80)
        goto loc_3ff69;
    al = dl;
loc_3ff69: // 0160:3ff69
    if (dh & 0x80)
        goto loc_3ff70;
    ah = dh;
loc_3ff70: // 0160:3ff70
    if (!(ax & 0x8080))
        goto loc_3ff99;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ff7a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ff80));
    if (dx == 0x8080)
        goto loc_3ff99;
    if (dl & 0x80)
        goto loc_3ff92;
    al = dl;
loc_3ff92: // 0160:3ff92
    if (dh & 0x80)
        goto loc_3ff99;
    ah = dh;
loc_3ff99: // 0160:3ff99
    memoryASet16(ds, edi + 214, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ffa2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x3ffa8));
    if (!(eax & 0x00008080))
        goto loc_3ffff;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ffb7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x3ffbd));
    if (dx == 0x8080)
        goto loc_3ffd6;
    if (dl & 0x80)
        goto loc_3ffcf;
    al = dl;
loc_3ffcf: // 0160:3ffcf
    if (dh & 0x80)
        goto loc_3ffd6;
    ah = dh;
loc_3ffd6: // 0160:3ffd6
    if (!(ax & 0x8080))
        goto loc_3ffff;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ffe0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x3ffe6));
    if (dx == 0x8080)
        goto loc_3ffff;
    if (dl & 0x80)
        goto loc_3fff8;
    al = dl;
loc_3fff8: // 0160:3fff8
    if (dh & 0x80)
        goto loc_3ffff;
    ah = dh;
loc_3ffff: // 0160:3ffff
    memoryASet16(ds, edi + 216, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40008));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4000e));
    if (!(eax & 0x00008080))
        goto loc_40065;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4001d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40023));
    if (dx == 0x8080)
        goto loc_4003c;
    if (dl & 0x80)
        goto loc_40035;
    al = dl;
loc_40035: // 0160:40035
    if (dh & 0x80)
        goto loc_4003c;
    ah = dh;
loc_4003c: // 0160:4003c
    if (!(ax & 0x8080))
        goto loc_40065;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40046));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4004c));
    if (dx == 0x8080)
        goto loc_40065;
    if (dl & 0x80)
        goto loc_4005e;
    al = dl;
loc_4005e: // 0160:4005e
    if (dh & 0x80)
        goto loc_40065;
    ah = dh;
loc_40065: // 0160:40065
    memoryASet16(ds, edi + 218, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4006e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40074));
    if (!(eax & 0x00008080))
        goto loc_400cb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40083));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40089));
    if (dx == 0x8080)
        goto loc_400a2;
    if (dl & 0x80)
        goto loc_4009b;
    al = dl;
loc_4009b: // 0160:4009b
    if (dh & 0x80)
        goto loc_400a2;
    ah = dh;
loc_400a2: // 0160:400a2
    if (!(ax & 0x8080))
        goto loc_400cb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x400ac));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x400b2));
    if (dx == 0x8080)
        goto loc_400cb;
    if (dl & 0x80)
        goto loc_400c4;
    al = dl;
loc_400c4: // 0160:400c4
    if (dh & 0x80)
        goto loc_400cb;
    ah = dh;
loc_400cb: // 0160:400cb
    memoryASet16(ds, edi + 220, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x400d4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x400da));
    if (!(eax & 0x00008080))
        goto loc_40131;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x400e9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x400ef));
    if (dx == 0x8080)
        goto loc_40108;
    if (dl & 0x80)
        goto loc_40101;
    al = dl;
loc_40101: // 0160:40101
    if (dh & 0x80)
        goto loc_40108;
    ah = dh;
loc_40108: // 0160:40108
    if (!(ax & 0x8080))
        goto loc_40131;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40112));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40118));
    if (dx == 0x8080)
        goto loc_40131;
    if (dl & 0x80)
        goto loc_4012a;
    al = dl;
loc_4012a: // 0160:4012a
    if (dh & 0x80)
        goto loc_40131;
    ah = dh;
loc_40131: // 0160:40131
    memoryASet16(ds, edi + 222, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4013a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40140));
    if (!(eax & 0x00008080))
        goto loc_40197;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4014f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40155));
    if (dx == 0x8080)
        goto loc_4016e;
    if (dl & 0x80)
        goto loc_40167;
    al = dl;
loc_40167: // 0160:40167
    if (dh & 0x80)
        goto loc_4016e;
    ah = dh;
loc_4016e: // 0160:4016e
    if (!(ax & 0x8080))
        goto loc_40197;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40178));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4017e));
    if (dx == 0x8080)
        goto loc_40197;
    if (dl & 0x80)
        goto loc_40190;
    al = dl;
loc_40190: // 0160:40190
    if (dh & 0x80)
        goto loc_40197;
    ah = dh;
loc_40197: // 0160:40197
    memoryASet16(ds, edi + 224, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x401a0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x401a6));
    if (!(eax & 0x00008080))
        goto loc_401fd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x401b5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x401bb));
    if (dx == 0x8080)
        goto loc_401d4;
    if (dl & 0x80)
        goto loc_401cd;
    al = dl;
loc_401cd: // 0160:401cd
    if (dh & 0x80)
        goto loc_401d4;
    ah = dh;
loc_401d4: // 0160:401d4
    if (!(ax & 0x8080))
        goto loc_401fd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x401de));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x401e4));
    if (dx == 0x8080)
        goto loc_401fd;
    if (dl & 0x80)
        goto loc_401f6;
    al = dl;
loc_401f6: // 0160:401f6
    if (dh & 0x80)
        goto loc_401fd;
    ah = dh;
loc_401fd: // 0160:401fd
    memoryASet16(ds, edi + 226, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40206));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4020c));
    if (!(eax & 0x00008080))
        goto loc_40263;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4021b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40221));
    if (dx == 0x8080)
        goto loc_4023a;
    if (dl & 0x80)
        goto loc_40233;
    al = dl;
loc_40233: // 0160:40233
    if (dh & 0x80)
        goto loc_4023a;
    ah = dh;
loc_4023a: // 0160:4023a
    if (!(ax & 0x8080))
        goto loc_40263;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40244));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4024a));
    if (dx == 0x8080)
        goto loc_40263;
    if (dl & 0x80)
        goto loc_4025c;
    al = dl;
loc_4025c: // 0160:4025c
    if (dh & 0x80)
        goto loc_40263;
    ah = dh;
loc_40263: // 0160:40263
    memoryASet16(ds, edi + 228, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4026c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40272));
    if (!(eax & 0x00008080))
        goto loc_402c9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40281));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40287));
    if (dx == 0x8080)
        goto loc_402a0;
    if (dl & 0x80)
        goto loc_40299;
    al = dl;
loc_40299: // 0160:40299
    if (dh & 0x80)
        goto loc_402a0;
    ah = dh;
loc_402a0: // 0160:402a0
    if (!(ax & 0x8080))
        goto loc_402c9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x402aa));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x402b0));
    if (dx == 0x8080)
        goto loc_402c9;
    if (dl & 0x80)
        goto loc_402c2;
    al = dl;
loc_402c2: // 0160:402c2
    if (dh & 0x80)
        goto loc_402c9;
    ah = dh;
loc_402c9: // 0160:402c9
    memoryASet16(ds, edi + 230, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x402d2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x402d8));
    if (!(eax & 0x00008080))
        goto loc_4032f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x402e7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x402ed));
    if (dx == 0x8080)
        goto loc_40306;
    if (dl & 0x80)
        goto loc_402ff;
    al = dl;
loc_402ff: // 0160:402ff
    if (dh & 0x80)
        goto loc_40306;
    ah = dh;
loc_40306: // 0160:40306
    if (!(ax & 0x8080))
        goto loc_4032f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40310));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40316));
    if (dx == 0x8080)
        goto loc_4032f;
    if (dl & 0x80)
        goto loc_40328;
    al = dl;
loc_40328: // 0160:40328
    if (dh & 0x80)
        goto loc_4032f;
    ah = dh;
loc_4032f: // 0160:4032f
    memoryASet16(ds, edi + 232, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40338));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4033e));
    if (!(eax & 0x00008080))
        goto loc_40395;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4034d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40353));
    if (dx == 0x8080)
        goto loc_4036c;
    if (dl & 0x80)
        goto loc_40365;
    al = dl;
loc_40365: // 0160:40365
    if (dh & 0x80)
        goto loc_4036c;
    ah = dh;
loc_4036c: // 0160:4036c
    if (!(ax & 0x8080))
        goto loc_40395;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40376));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4037c));
    if (dx == 0x8080)
        goto loc_40395;
    if (dl & 0x80)
        goto loc_4038e;
    al = dl;
loc_4038e: // 0160:4038e
    if (dh & 0x80)
        goto loc_40395;
    ah = dh;
loc_40395: // 0160:40395
    memoryASet16(ds, edi + 234, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4039e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x403a4));
    if (!(eax & 0x00008080))
        goto loc_403fb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x403b3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x403b9));
    if (dx == 0x8080)
        goto loc_403d2;
    if (dl & 0x80)
        goto loc_403cb;
    al = dl;
loc_403cb: // 0160:403cb
    if (dh & 0x80)
        goto loc_403d2;
    ah = dh;
loc_403d2: // 0160:403d2
    if (!(ax & 0x8080))
        goto loc_403fb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x403dc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x403e2));
    if (dx == 0x8080)
        goto loc_403fb;
    if (dl & 0x80)
        goto loc_403f4;
    al = dl;
loc_403f4: // 0160:403f4
    if (dh & 0x80)
        goto loc_403fb;
    ah = dh;
loc_403fb: // 0160:403fb
    memoryASet16(ds, edi + 236, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40404));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4040a));
    if (!(eax & 0x00008080))
        goto loc_40461;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40419));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4041f));
    if (dx == 0x8080)
        goto loc_40438;
    if (dl & 0x80)
        goto loc_40431;
    al = dl;
loc_40431: // 0160:40431
    if (dh & 0x80)
        goto loc_40438;
    ah = dh;
loc_40438: // 0160:40438
    if (!(ax & 0x8080))
        goto loc_40461;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40442));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40448));
    if (dx == 0x8080)
        goto loc_40461;
    if (dl & 0x80)
        goto loc_4045a;
    al = dl;
loc_4045a: // 0160:4045a
    if (dh & 0x80)
        goto loc_40461;
    ah = dh;
loc_40461: // 0160:40461
    memoryASet16(ds, edi + 238, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4046a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40470));
    if (!(eax & 0x00008080))
        goto loc_404c7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4047f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40485));
    if (dx == 0x8080)
        goto loc_4049e;
    if (dl & 0x80)
        goto loc_40497;
    al = dl;
loc_40497: // 0160:40497
    if (dh & 0x80)
        goto loc_4049e;
    ah = dh;
loc_4049e: // 0160:4049e
    if (!(ax & 0x8080))
        goto loc_404c7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x404a8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x404ae));
    if (dx == 0x8080)
        goto loc_404c7;
    if (dl & 0x80)
        goto loc_404c0;
    al = dl;
loc_404c0: // 0160:404c0
    if (dh & 0x80)
        goto loc_404c7;
    ah = dh;
loc_404c7: // 0160:404c7
    memoryASet16(ds, edi + 240, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x404d0));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x404d6));
    if (!(eax & 0x00008080))
        goto loc_4052d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x404e5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x404eb));
    if (dx == 0x8080)
        goto loc_40504;
    if (dl & 0x80)
        goto loc_404fd;
    al = dl;
loc_404fd: // 0160:404fd
    if (dh & 0x80)
        goto loc_40504;
    ah = dh;
loc_40504: // 0160:40504
    if (!(ax & 0x8080))
        goto loc_4052d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4050e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40514));
    if (dx == 0x8080)
        goto loc_4052d;
    if (dl & 0x80)
        goto loc_40526;
    al = dl;
loc_40526: // 0160:40526
    if (dh & 0x80)
        goto loc_4052d;
    ah = dh;
loc_4052d: // 0160:4052d
    memoryASet16(ds, edi + 242, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40536));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4053c));
    if (!(eax & 0x00008080))
        goto loc_40593;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4054b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40551));
    if (dx == 0x8080)
        goto loc_4056a;
    if (dl & 0x80)
        goto loc_40563;
    al = dl;
loc_40563: // 0160:40563
    if (dh & 0x80)
        goto loc_4056a;
    ah = dh;
loc_4056a: // 0160:4056a
    if (!(ax & 0x8080))
        goto loc_40593;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40574));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4057a));
    if (dx == 0x8080)
        goto loc_40593;
    if (dl & 0x80)
        goto loc_4058c;
    al = dl;
loc_4058c: // 0160:4058c
    if (dh & 0x80)
        goto loc_40593;
    ah = dh;
loc_40593: // 0160:40593
    memoryASet16(ds, edi + 244, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4059c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x405a2));
    if (!(eax & 0x00008080))
        goto loc_405f9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x405b1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x405b7));
    if (dx == 0x8080)
        goto loc_405d0;
    if (dl & 0x80)
        goto loc_405c9;
    al = dl;
loc_405c9: // 0160:405c9
    if (dh & 0x80)
        goto loc_405d0;
    ah = dh;
loc_405d0: // 0160:405d0
    if (!(ax & 0x8080))
        goto loc_405f9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x405da));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x405e0));
    if (dx == 0x8080)
        goto loc_405f9;
    if (dl & 0x80)
        goto loc_405f2;
    al = dl;
loc_405f2: // 0160:405f2
    if (dh & 0x80)
        goto loc_405f9;
    ah = dh;
loc_405f9: // 0160:405f9
    memoryASet16(ds, edi + 246, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40602));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40608));
    if (!(eax & 0x00008080))
        goto loc_4065f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40617));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4061d));
    if (dx == 0x8080)
        goto loc_40636;
    if (dl & 0x80)
        goto loc_4062f;
    al = dl;
loc_4062f: // 0160:4062f
    if (dh & 0x80)
        goto loc_40636;
    ah = dh;
loc_40636: // 0160:40636
    if (!(ax & 0x8080))
        goto loc_4065f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40640));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40646));
    if (dx == 0x8080)
        goto loc_4065f;
    if (dl & 0x80)
        goto loc_40658;
    al = dl;
loc_40658: // 0160:40658
    if (dh & 0x80)
        goto loc_4065f;
    ah = dh;
loc_4065f: // 0160:4065f
    memoryASet16(ds, edi + 248, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40668));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4066e));
    if (!(eax & 0x00008080))
        goto loc_406c5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4067d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40683));
    if (dx == 0x8080)
        goto loc_4069c;
    if (dl & 0x80)
        goto loc_40695;
    al = dl;
loc_40695: // 0160:40695
    if (dh & 0x80)
        goto loc_4069c;
    ah = dh;
loc_4069c: // 0160:4069c
    if (!(ax & 0x8080))
        goto loc_406c5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x406a6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x406ac));
    if (dx == 0x8080)
        goto loc_406c5;
    if (dl & 0x80)
        goto loc_406be;
    al = dl;
loc_406be: // 0160:406be
    if (dh & 0x80)
        goto loc_406c5;
    ah = dh;
loc_406c5: // 0160:406c5
    memoryASet16(ds, edi + 250, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x406ce));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x406d4));
    if (!(eax & 0x00008080))
        goto loc_4072b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x406e3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x406e9));
    if (dx == 0x8080)
        goto loc_40702;
    if (dl & 0x80)
        goto loc_406fb;
    al = dl;
loc_406fb: // 0160:406fb
    if (dh & 0x80)
        goto loc_40702;
    ah = dh;
loc_40702: // 0160:40702
    if (!(ax & 0x8080))
        goto loc_4072b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4070c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40712));
    if (dx == 0x8080)
        goto loc_4072b;
    if (dl & 0x80)
        goto loc_40724;
    al = dl;
loc_40724: // 0160:40724
    if (dh & 0x80)
        goto loc_4072b;
    ah = dh;
loc_4072b: // 0160:4072b
    memoryASet16(ds, edi + 252, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40734));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4073a));
    if (!(eax & 0x00008080))
        goto loc_40791;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40749));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4074f));
    if (dx == 0x8080)
        goto loc_40768;
    if (dl & 0x80)
        goto loc_40761;
    al = dl;
loc_40761: // 0160:40761
    if (dh & 0x80)
        goto loc_40768;
    ah = dh;
loc_40768: // 0160:40768
    if (!(ax & 0x8080))
        goto loc_40791;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40772));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40778));
    if (dx == 0x8080)
        goto loc_40791;
    if (dl & 0x80)
        goto loc_4078a;
    al = dl;
loc_4078a: // 0160:4078a
    if (dh & 0x80)
        goto loc_40791;
    ah = dh;
loc_40791: // 0160:40791
    memoryASet16(ds, edi + 254, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4079a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x407a0));
    if (!(eax & 0x00008080))
        goto loc_407f7;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x407af));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x407b5));
    if (dx == 0x8080)
        goto loc_407ce;
    if (dl & 0x80)
        goto loc_407c7;
    al = dl;
loc_407c7: // 0160:407c7
    if (dh & 0x80)
        goto loc_407ce;
    ah = dh;
loc_407ce: // 0160:407ce
    if (!(ax & 0x8080))
        goto loc_407f7;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x407d8));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x407de));
    if (dx == 0x8080)
        goto loc_407f7;
    if (dl & 0x80)
        goto loc_407f0;
    al = dl;
loc_407f0: // 0160:407f0
    if (dh & 0x80)
        goto loc_407f7;
    ah = dh;
loc_407f7: // 0160:407f7
    memoryASet16(ds, edi + 256, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40800));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40806));
    if (!(eax & 0x00008080))
        goto loc_4085d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40815));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4081b));
    if (dx == 0x8080)
        goto loc_40834;
    if (dl & 0x80)
        goto loc_4082d;
    al = dl;
loc_4082d: // 0160:4082d
    if (dh & 0x80)
        goto loc_40834;
    ah = dh;
loc_40834: // 0160:40834
    if (!(ax & 0x8080))
        goto loc_4085d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4083e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40844));
    if (dx == 0x8080)
        goto loc_4085d;
    if (dl & 0x80)
        goto loc_40856;
    al = dl;
loc_40856: // 0160:40856
    if (dh & 0x80)
        goto loc_4085d;
    ah = dh;
loc_4085d: // 0160:4085d
    memoryASet16(ds, edi + 258, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40866));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4086c));
    if (!(eax & 0x00008080))
        goto loc_408c3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4087b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40881));
    if (dx == 0x8080)
        goto loc_4089a;
    if (dl & 0x80)
        goto loc_40893;
    al = dl;
loc_40893: // 0160:40893
    if (dh & 0x80)
        goto loc_4089a;
    ah = dh;
loc_4089a: // 0160:4089a
    if (!(ax & 0x8080))
        goto loc_408c3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x408a4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x408aa));
    if (dx == 0x8080)
        goto loc_408c3;
    if (dl & 0x80)
        goto loc_408bc;
    al = dl;
loc_408bc: // 0160:408bc
    if (dh & 0x80)
        goto loc_408c3;
    ah = dh;
loc_408c3: // 0160:408c3
    memoryASet16(ds, edi + 260, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x408cc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x408d2));
    if (!(eax & 0x00008080))
        goto loc_40929;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x408e1));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x408e7));
    if (dx == 0x8080)
        goto loc_40900;
    if (dl & 0x80)
        goto loc_408f9;
    al = dl;
loc_408f9: // 0160:408f9
    if (dh & 0x80)
        goto loc_40900;
    ah = dh;
loc_40900: // 0160:40900
    if (!(ax & 0x8080))
        goto loc_40929;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4090a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40910));
    if (dx == 0x8080)
        goto loc_40929;
    if (dl & 0x80)
        goto loc_40922;
    al = dl;
loc_40922: // 0160:40922
    if (dh & 0x80)
        goto loc_40929;
    ah = dh;
loc_40929: // 0160:40929
    memoryASet16(ds, edi + 262, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40932));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40938));
    if (!(eax & 0x00008080))
        goto loc_4098f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40947));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4094d));
    if (dx == 0x8080)
        goto loc_40966;
    if (dl & 0x80)
        goto loc_4095f;
    al = dl;
loc_4095f: // 0160:4095f
    if (dh & 0x80)
        goto loc_40966;
    ah = dh;
loc_40966: // 0160:40966
    if (!(ax & 0x8080))
        goto loc_4098f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40970));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40976));
    if (dx == 0x8080)
        goto loc_4098f;
    if (dl & 0x80)
        goto loc_40988;
    al = dl;
loc_40988: // 0160:40988
    if (dh & 0x80)
        goto loc_4098f;
    ah = dh;
loc_4098f: // 0160:4098f
    memoryASet16(ds, edi + 264, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40998));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4099e));
    if (!(eax & 0x00008080))
        goto loc_409f5;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x409ad));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x409b3));
    if (dx == 0x8080)
        goto loc_409cc;
    if (dl & 0x80)
        goto loc_409c5;
    al = dl;
loc_409c5: // 0160:409c5
    if (dh & 0x80)
        goto loc_409cc;
    ah = dh;
loc_409cc: // 0160:409cc
    if (!(ax & 0x8080))
        goto loc_409f5;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x409d6));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x409dc));
    if (dx == 0x8080)
        goto loc_409f5;
    if (dl & 0x80)
        goto loc_409ee;
    al = dl;
loc_409ee: // 0160:409ee
    if (dh & 0x80)
        goto loc_409f5;
    ah = dh;
loc_409f5: // 0160:409f5
    memoryASet16(ds, edi + 266, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x409fe));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40a04));
    if (!(eax & 0x00008080))
        goto loc_40a5b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40a13));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40a19));
    if (dx == 0x8080)
        goto loc_40a32;
    if (dl & 0x80)
        goto loc_40a2b;
    al = dl;
loc_40a2b: // 0160:40a2b
    if (dh & 0x80)
        goto loc_40a32;
    ah = dh;
loc_40a32: // 0160:40a32
    if (!(ax & 0x8080))
        goto loc_40a5b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40a3c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40a42));
    if (dx == 0x8080)
        goto loc_40a5b;
    if (dl & 0x80)
        goto loc_40a54;
    al = dl;
loc_40a54: // 0160:40a54
    if (dh & 0x80)
        goto loc_40a5b;
    ah = dh;
loc_40a5b: // 0160:40a5b
    memoryASet16(ds, edi + 268, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40a64));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40a6a));
    if (!(eax & 0x00008080))
        goto loc_40ac1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40a79));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40a7f));
    if (dx == 0x8080)
        goto loc_40a98;
    if (dl & 0x80)
        goto loc_40a91;
    al = dl;
loc_40a91: // 0160:40a91
    if (dh & 0x80)
        goto loc_40a98;
    ah = dh;
loc_40a98: // 0160:40a98
    if (!(ax & 0x8080))
        goto loc_40ac1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40aa2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40aa8));
    if (dx == 0x8080)
        goto loc_40ac1;
    if (dl & 0x80)
        goto loc_40aba;
    al = dl;
loc_40aba: // 0160:40aba
    if (dh & 0x80)
        goto loc_40ac1;
    ah = dh;
loc_40ac1: // 0160:40ac1
    memoryASet16(ds, edi + 270, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40aca));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40ad0));
    if (!(eax & 0x00008080))
        goto loc_40b27;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40adf));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40ae5));
    if (dx == 0x8080)
        goto loc_40afe;
    if (dl & 0x80)
        goto loc_40af7;
    al = dl;
loc_40af7: // 0160:40af7
    if (dh & 0x80)
        goto loc_40afe;
    ah = dh;
loc_40afe: // 0160:40afe
    if (!(ax & 0x8080))
        goto loc_40b27;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40b08));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40b0e));
    if (dx == 0x8080)
        goto loc_40b27;
    if (dl & 0x80)
        goto loc_40b20;
    al = dl;
loc_40b20: // 0160:40b20
    if (dh & 0x80)
        goto loc_40b27;
    ah = dh;
loc_40b27: // 0160:40b27
    memoryASet16(ds, edi + 272, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40b30));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40b36));
    if (!(eax & 0x00008080))
        goto loc_40b8d;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40b45));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40b4b));
    if (dx == 0x8080)
        goto loc_40b64;
    if (dl & 0x80)
        goto loc_40b5d;
    al = dl;
loc_40b5d: // 0160:40b5d
    if (dh & 0x80)
        goto loc_40b64;
    ah = dh;
loc_40b64: // 0160:40b64
    if (!(ax & 0x8080))
        goto loc_40b8d;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40b6e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40b74));
    if (dx == 0x8080)
        goto loc_40b8d;
    if (dl & 0x80)
        goto loc_40b86;
    al = dl;
loc_40b86: // 0160:40b86
    if (dh & 0x80)
        goto loc_40b8d;
    ah = dh;
loc_40b8d: // 0160:40b8d
    memoryASet16(ds, edi + 274, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40b96));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40b9c));
    if (!(eax & 0x00008080))
        goto loc_40bf3;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40bab));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40bb1));
    if (dx == 0x8080)
        goto loc_40bca;
    if (dl & 0x80)
        goto loc_40bc3;
    al = dl;
loc_40bc3: // 0160:40bc3
    if (dh & 0x80)
        goto loc_40bca;
    ah = dh;
loc_40bca: // 0160:40bca
    if (!(ax & 0x8080))
        goto loc_40bf3;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40bd4));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40bda));
    if (dx == 0x8080)
        goto loc_40bf3;
    if (dl & 0x80)
        goto loc_40bec;
    al = dl;
loc_40bec: // 0160:40bec
    if (dh & 0x80)
        goto loc_40bf3;
    ah = dh;
loc_40bf3: // 0160:40bf3
    memoryASet16(ds, edi + 276, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40bfc));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40c02));
    if (!(eax & 0x00008080))
        goto loc_40c59;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40c11));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40c17));
    if (dx == 0x8080)
        goto loc_40c30;
    if (dl & 0x80)
        goto loc_40c29;
    al = dl;
loc_40c29: // 0160:40c29
    if (dh & 0x80)
        goto loc_40c30;
    ah = dh;
loc_40c30: // 0160:40c30
    if (!(ax & 0x8080))
        goto loc_40c59;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40c3a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40c40));
    if (dx == 0x8080)
        goto loc_40c59;
    if (dl & 0x80)
        goto loc_40c52;
    al = dl;
loc_40c52: // 0160:40c52
    if (dh & 0x80)
        goto loc_40c59;
    ah = dh;
loc_40c59: // 0160:40c59
    memoryASet16(ds, edi + 278, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40c62));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40c68));
    if (!(eax & 0x00008080))
        goto loc_40cbf;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40c77));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40c7d));
    if (dx == 0x8080)
        goto loc_40c96;
    if (dl & 0x80)
        goto loc_40c8f;
    al = dl;
loc_40c8f: // 0160:40c8f
    if (dh & 0x80)
        goto loc_40c96;
    ah = dh;
loc_40c96: // 0160:40c96
    if (!(ax & 0x8080))
        goto loc_40cbf;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40ca0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40ca6));
    if (dx == 0x8080)
        goto loc_40cbf;
    if (dl & 0x80)
        goto loc_40cb8;
    al = dl;
loc_40cb8: // 0160:40cb8
    if (dh & 0x80)
        goto loc_40cbf;
    ah = dh;
loc_40cbf: // 0160:40cbf
    memoryASet16(ds, edi + 280, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40cc8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40cce));
    if (!(eax & 0x00008080))
        goto loc_40d25;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40cdd));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40ce3));
    if (dx == 0x8080)
        goto loc_40cfc;
    if (dl & 0x80)
        goto loc_40cf5;
    al = dl;
loc_40cf5: // 0160:40cf5
    if (dh & 0x80)
        goto loc_40cfc;
    ah = dh;
loc_40cfc: // 0160:40cfc
    if (!(ax & 0x8080))
        goto loc_40d25;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40d06));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40d0c));
    if (dx == 0x8080)
        goto loc_40d25;
    if (dl & 0x80)
        goto loc_40d1e;
    al = dl;
loc_40d1e: // 0160:40d1e
    if (dh & 0x80)
        goto loc_40d25;
    ah = dh;
loc_40d25: // 0160:40d25
    memoryASet16(ds, edi + 282, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40d2e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40d34));
    if (!(eax & 0x00008080))
        goto loc_40d8b;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40d43));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40d49));
    if (dx == 0x8080)
        goto loc_40d62;
    if (dl & 0x80)
        goto loc_40d5b;
    al = dl;
loc_40d5b: // 0160:40d5b
    if (dh & 0x80)
        goto loc_40d62;
    ah = dh;
loc_40d62: // 0160:40d62
    if (!(ax & 0x8080))
        goto loc_40d8b;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40d6c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40d72));
    if (dx == 0x8080)
        goto loc_40d8b;
    if (dl & 0x80)
        goto loc_40d84;
    al = dl;
loc_40d84: // 0160:40d84
    if (dh & 0x80)
        goto loc_40d8b;
    ah = dh;
loc_40d8b: // 0160:40d8b
    memoryASet16(ds, edi + 284, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40d94));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40d9a));
    if (!(eax & 0x00008080))
        goto loc_40df1;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40da9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40daf));
    if (dx == 0x8080)
        goto loc_40dc8;
    if (dl & 0x80)
        goto loc_40dc1;
    al = dl;
loc_40dc1: // 0160:40dc1
    if (dh & 0x80)
        goto loc_40dc8;
    ah = dh;
loc_40dc8: // 0160:40dc8
    if (!(ax & 0x8080))
        goto loc_40df1;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40dd2));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40dd8));
    if (dx == 0x8080)
        goto loc_40df1;
    if (dl & 0x80)
        goto loc_40dea;
    al = dl;
loc_40dea: // 0160:40dea
    if (dh & 0x80)
        goto loc_40df1;
    ah = dh;
loc_40df1: // 0160:40df1
    memoryASet16(ds, edi + 286, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40dfa));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40e00));
    if (!(eax & 0x00008080))
        goto loc_40e57;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40e0f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40e15));
    if (dx == 0x8080)
        goto loc_40e2e;
    if (dl & 0x80)
        goto loc_40e27;
    al = dl;
loc_40e27: // 0160:40e27
    if (dh & 0x80)
        goto loc_40e2e;
    ah = dh;
loc_40e2e: // 0160:40e2e
    if (!(ax & 0x8080))
        goto loc_40e57;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40e38));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40e3e));
    if (dx == 0x8080)
        goto loc_40e57;
    if (dl & 0x80)
        goto loc_40e50;
    al = dl;
loc_40e50: // 0160:40e50
    if (dh & 0x80)
        goto loc_40e57;
    ah = dh;
loc_40e57: // 0160:40e57
    memoryASet16(ds, edi + 288, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40e60));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40e66));
    if (!(eax & 0x00008080))
        goto loc_40ebd;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40e75));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40e7b));
    if (dx == 0x8080)
        goto loc_40e94;
    if (dl & 0x80)
        goto loc_40e8d;
    al = dl;
loc_40e8d: // 0160:40e8d
    if (dh & 0x80)
        goto loc_40e94;
    ah = dh;
loc_40e94: // 0160:40e94
    if (!(ax & 0x8080))
        goto loc_40ebd;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40e9e));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40ea4));
    if (dx == 0x8080)
        goto loc_40ebd;
    if (dl & 0x80)
        goto loc_40eb6;
    al = dl;
loc_40eb6: // 0160:40eb6
    if (dh & 0x80)
        goto loc_40ebd;
    ah = dh;
loc_40ebd: // 0160:40ebd
    memoryASet16(ds, edi + 290, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40ec6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40ecc));
    if (!(eax & 0x00008080))
        goto loc_40f23;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40edb));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40ee1));
    if (dx == 0x8080)
        goto loc_40efa;
    if (dl & 0x80)
        goto loc_40ef3;
    al = dl;
loc_40ef3: // 0160:40ef3
    if (dh & 0x80)
        goto loc_40efa;
    ah = dh;
loc_40efa: // 0160:40efa
    if (!(ax & 0x8080))
        goto loc_40f23;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40f04));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40f0a));
    if (dx == 0x8080)
        goto loc_40f23;
    if (dl & 0x80)
        goto loc_40f1c;
    al = dl;
loc_40f1c: // 0160:40f1c
    if (dh & 0x80)
        goto loc_40f23;
    ah = dh;
loc_40f23: // 0160:40f23
    memoryASet16(ds, edi + 292, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40f2c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40f32));
    if (!(eax & 0x00008080))
        goto loc_40f89;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40f41));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40f47));
    if (dx == 0x8080)
        goto loc_40f60;
    if (dl & 0x80)
        goto loc_40f59;
    al = dl;
loc_40f59: // 0160:40f59
    if (dh & 0x80)
        goto loc_40f60;
    ah = dh;
loc_40f60: // 0160:40f60
    if (!(ax & 0x8080))
        goto loc_40f89;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40f6a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40f70));
    if (dx == 0x8080)
        goto loc_40f89;
    if (dl & 0x80)
        goto loc_40f82;
    al = dl;
loc_40f82: // 0160:40f82
    if (dh & 0x80)
        goto loc_40f89;
    ah = dh;
loc_40f89: // 0160:40f89
    memoryASet16(ds, edi + 294, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40f92));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40f98));
    if (!(eax & 0x00008080))
        goto loc_40fef;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40fa7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x40fad));
    if (dx == 0x8080)
        goto loc_40fc6;
    if (dl & 0x80)
        goto loc_40fbf;
    al = dl;
loc_40fbf: // 0160:40fbf
    if (dh & 0x80)
        goto loc_40fc6;
    ah = dh;
loc_40fc6: // 0160:40fc6
    if (!(ax & 0x8080))
        goto loc_40fef;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x40fd0));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x40fd6));
    if (dx == 0x8080)
        goto loc_40fef;
    if (dl & 0x80)
        goto loc_40fe8;
    al = dl;
loc_40fe8: // 0160:40fe8
    if (dh & 0x80)
        goto loc_40fef;
    ah = dh;
loc_40fef: // 0160:40fef
    memoryASet16(ds, edi + 296, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40ff8));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x40ffe));
    if (!(eax & 0x00008080))
        goto loc_41055;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4100d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41013));
    if (dx == 0x8080)
        goto loc_4102c;
    if (dl & 0x80)
        goto loc_41025;
    al = dl;
loc_41025: // 0160:41025
    if (dh & 0x80)
        goto loc_4102c;
    ah = dh;
loc_4102c: // 0160:4102c
    if (!(ax & 0x8080))
        goto loc_41055;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41036));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4103c));
    if (dx == 0x8080)
        goto loc_41055;
    if (dl & 0x80)
        goto loc_4104e;
    al = dl;
loc_4104e: // 0160:4104e
    if (dh & 0x80)
        goto loc_41055;
    ah = dh;
loc_41055: // 0160:41055
    memoryASet16(ds, edi + 298, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4105e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41064));
    if (!(eax & 0x00008080))
        goto loc_410bb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41073));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41079));
    if (dx == 0x8080)
        goto loc_41092;
    if (dl & 0x80)
        goto loc_4108b;
    al = dl;
loc_4108b: // 0160:4108b
    if (dh & 0x80)
        goto loc_41092;
    ah = dh;
loc_41092: // 0160:41092
    if (!(ax & 0x8080))
        goto loc_410bb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4109c));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x410a2));
    if (dx == 0x8080)
        goto loc_410bb;
    if (dl & 0x80)
        goto loc_410b4;
    al = dl;
loc_410b4: // 0160:410b4
    if (dh & 0x80)
        goto loc_410bb;
    ah = dh;
loc_410bb: // 0160:410bb
    memoryASet16(ds, edi + 300, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x410c4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x410ca));
    if (!(eax & 0x00008080))
        goto loc_41121;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x410d9));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x410df));
    if (dx == 0x8080)
        goto loc_410f8;
    if (dl & 0x80)
        goto loc_410f1;
    al = dl;
loc_410f1: // 0160:410f1
    if (dh & 0x80)
        goto loc_410f8;
    ah = dh;
loc_410f8: // 0160:410f8
    if (!(ax & 0x8080))
        goto loc_41121;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41102));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x41108));
    if (dx == 0x8080)
        goto loc_41121;
    if (dl & 0x80)
        goto loc_4111a;
    al = dl;
loc_4111a: // 0160:4111a
    if (dh & 0x80)
        goto loc_41121;
    ah = dh;
loc_41121: // 0160:41121
    memoryASet16(ds, edi + 302, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4112a));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41130));
    if (!(eax & 0x00008080))
        goto loc_41187;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4113f));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41145));
    if (dx == 0x8080)
        goto loc_4115e;
    if (dl & 0x80)
        goto loc_41157;
    al = dl;
loc_41157: // 0160:41157
    if (dh & 0x80)
        goto loc_4115e;
    ah = dh;
loc_4115e: // 0160:4115e
    if (!(ax & 0x8080))
        goto loc_41187;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41168));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4116e));
    if (dx == 0x8080)
        goto loc_41187;
    if (dl & 0x80)
        goto loc_41180;
    al = dl;
loc_41180: // 0160:41180
    if (dh & 0x80)
        goto loc_41187;
    ah = dh;
loc_41187: // 0160:41187
    memoryASet16(ds, edi + 304, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41190));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41196));
    if (!(eax & 0x00008080))
        goto loc_411ed;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x411a5));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x411ab));
    if (dx == 0x8080)
        goto loc_411c4;
    if (dl & 0x80)
        goto loc_411bd;
    al = dl;
loc_411bd: // 0160:411bd
    if (dh & 0x80)
        goto loc_411c4;
    ah = dh;
loc_411c4: // 0160:411c4
    if (!(ax & 0x8080))
        goto loc_411ed;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x411ce));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x411d4));
    if (dx == 0x8080)
        goto loc_411ed;
    if (dl & 0x80)
        goto loc_411e6;
    al = dl;
loc_411e6: // 0160:411e6
    if (dh & 0x80)
        goto loc_411ed;
    ah = dh;
loc_411ed: // 0160:411ed
    memoryASet16(ds, edi + 306, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x411f6));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x411fc));
    if (!(eax & 0x00008080))
        goto loc_41253;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4120b));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41211));
    if (dx == 0x8080)
        goto loc_4122a;
    if (dl & 0x80)
        goto loc_41223;
    al = dl;
loc_41223: // 0160:41223
    if (dh & 0x80)
        goto loc_4122a;
    ah = dh;
loc_4122a: // 0160:4122a
    if (!(ax & 0x8080))
        goto loc_41253;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41234));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4123a));
    if (dx == 0x8080)
        goto loc_41253;
    if (dl & 0x80)
        goto loc_4124c;
    al = dl;
loc_4124c: // 0160:4124c
    if (dh & 0x80)
        goto loc_41253;
    ah = dh;
loc_41253: // 0160:41253
    memoryASet16(ds, edi + 308, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4125c));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41262));
    if (!(eax & 0x00008080))
        goto loc_412b9;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41271));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41277));
    if (dx == 0x8080)
        goto loc_41290;
    if (dl & 0x80)
        goto loc_41289;
    al = dl;
loc_41289: // 0160:41289
    if (dh & 0x80)
        goto loc_41290;
    ah = dh;
loc_41290: // 0160:41290
    if (!(ax & 0x8080))
        goto loc_412b9;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x4129a));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x412a0));
    if (dx == 0x8080)
        goto loc_412b9;
    if (dl & 0x80)
        goto loc_412b2;
    al = dl;
loc_412b2: // 0160:412b2
    if (dh & 0x80)
        goto loc_412b9;
    ah = dh;
loc_412b9: // 0160:412b9
    memoryASet16(ds, edi + 310, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x412c2));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x412c8));
    if (!(eax & 0x00008080))
        goto loc_4131f;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x412d7));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x412dd));
    if (dx == 0x8080)
        goto loc_412f6;
    if (dl & 0x80)
        goto loc_412ef;
    al = dl;
loc_412ef: // 0160:412ef
    if (dh & 0x80)
        goto loc_412f6;
    ah = dh;
loc_412f6: // 0160:412f6
    if (!(ax & 0x8080))
        goto loc_4131f;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41300));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x41306));
    if (dx == 0x8080)
        goto loc_4131f;
    if (dl & 0x80)
        goto loc_41318;
    al = dl;
loc_41318: // 0160:41318
    if (dh & 0x80)
        goto loc_4131f;
    ah = dh;
loc_4131f: // 0160:4131f
    memoryASet16(ds, edi + 312, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41328));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4132e));
    if (!(eax & 0x00008080))
        goto loc_41385;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4133d));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41343));
    if (dx == 0x8080)
        goto loc_4135c;
    if (dl & 0x80)
        goto loc_41355;
    al = dl;
loc_41355: // 0160:41355
    if (dh & 0x80)
        goto loc_4135c;
    ah = dh;
loc_4135c: // 0160:4135c
    if (!(ax & 0x8080))
        goto loc_41385;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41366));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x4136c));
    if (dx == 0x8080)
        goto loc_41385;
    if (dl & 0x80)
        goto loc_4137e;
    al = dl;
loc_4137e: // 0160:4137e
    if (dh & 0x80)
        goto loc_41385;
    ah = dh;
loc_41385: // 0160:41385
    memoryASet16(ds, edi + 314, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x4138e));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x41394));
    if (!(eax & 0x00008080))
        goto loc_413eb;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x413a3));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x413a9));
    if (dx == 0x8080)
        goto loc_413c2;
    if (dl & 0x80)
        goto loc_413bb;
    al = dl;
loc_413bb: // 0160:413bb
    if (dh & 0x80)
        goto loc_413c2;
    ah = dh;
loc_413c2: // 0160:413c2
    if (!(ax & 0x8080))
        goto loc_413eb;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x413cc));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x413d2));
    if (dx == 0x8080)
        goto loc_413eb;
    if (dl & 0x80)
        goto loc_413e4;
    al = dl;
loc_413e4: // 0160:413e4
    if (dh & 0x80)
        goto loc_413eb;
    ah = dh;
loc_413eb: // 0160:413eb
    memoryASet16(ds, edi + 316, ax);
    al = memoryAGet(ds, ecx + memoryAGet32(cs, 0x413f4));
    ah = memoryAGet(ds, ecx + memoryAGet32(cs, 0x413fa));
    if (!(eax & 0x00008080))
        goto loc_41451;
    edx = eax;
    al = memoryAGet(ds, ebx + memoryAGet32(cs, 0x41409));
    ah = memoryAGet(ds, ebx + memoryAGet32(cs, 0x4140f));
    if (dx == 0x8080)
        goto loc_41428;
    if (dl & 0x80)
        goto loc_41421;
    al = dl;
loc_41421: // 0160:41421
    if (dh & 0x80)
        goto loc_41428;
    ah = dh;
loc_41428: // 0160:41428
    if (!(ax & 0x8080))
        goto loc_41451;
    edx = eax;
    al = memoryAGet(ds, esi + memoryAGet32(cs, 0x41432));
    ah = memoryAGet(ds, esi + memoryAGet32(cs, 0x41438));
    if (dx == 0x8080)
        goto loc_41451;
    if (dl & 0x80)
        goto loc_4144a;
    al = dl;
loc_4144a: // 0160:4144a
    if (dh & 0x80)
        goto loc_41451;
    ah = dh;
loc_41451: // 0160:41451
    memoryASet16(ds, edi + 318, ax);
    eax = memoryAGet32(ss, ebp + 44);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + eax);
loc_4145e: // 0160:4145e
    if (memoryAGet16(ss, ebp + -2) == 0x0000)
        goto loc_41475;
    memoryASet16(ss, ebp + -2, memoryAGet16(ss, ebp + -2) - 0x0001);
    ecx += memoryAGet32(ss, ebp + 24);
    ebx += memoryAGet32(ss, ebp + 28);
    esi += memoryAGet32(ss, ebp + 32);
    goto loc_4145e;
loc_41475: // 0160:41475
    edi += memoryAGet32(ss, ebp + 36);
    memoryASet32(ss, ebp + 40, memoryAGet32(ss, ebp + 40) - 1);
    if (memoryAGet32(ss, ebp + 40))
        goto loc_3d498;
loc_41481: // 0160:41481
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_414e8() // 0160:414e8 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x000000a8;
    goto loc_414f4;
loc_414f4: // 0160:414f4
    goto loc_414f6;
loc_414f6: // 0160:414f6
    goto loc_414f8;
loc_414f8: // 0160:414f8
    eax = memoryAGet32(ds, esi);
    memoryVideoSet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryVideoSet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 8);
    memoryVideoSet32(ds, edi + 8, eax);
    eax = memoryAGet32(ds, esi + 12);
    memoryVideoSet32(ds, edi + 12, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryVideoSet32(ds, edi + 16, eax);
    eax = memoryAGet32(ds, esi + 20);
    memoryVideoSet32(ds, edi + 20, eax);
    eax = memoryAGet32(ds, esi + 24);
    memoryVideoSet32(ds, edi + 24, eax);
    eax = memoryAGet32(ds, esi + 28);
    memoryVideoSet32(ds, edi + 28, eax);
    eax = memoryAGet32(ds, esi + 32);
    memoryVideoSet32(ds, edi + 32, eax);
    eax = memoryAGet32(ds, esi + 36);
    memoryVideoSet32(ds, edi + 36, eax);
    eax = memoryAGet32(ds, esi + 40);
    memoryVideoSet32(ds, edi + 40, eax);
    eax = memoryAGet32(ds, esi + 44);
    memoryVideoSet32(ds, edi + 44, eax);
    eax = memoryAGet32(ds, esi + 48);
    memoryVideoSet32(ds, edi + 48, eax);
    eax = memoryAGet32(ds, esi + 52);
    memoryVideoSet32(ds, edi + 52, eax);
    eax = memoryAGet32(ds, esi + 56);
    memoryVideoSet32(ds, edi + 56, eax);
    eax = memoryAGet32(ds, esi + 60);
    memoryVideoSet32(ds, edi + 60, eax);
    eax = memoryAGet32(ds, esi + 64);
    memoryVideoSet32(ds, edi + 64, eax);
    eax = memoryAGet32(ds, esi + 68);
    memoryVideoSet32(ds, edi + 68, eax);
    eax = memoryAGet32(ds, esi + 72);
    memoryVideoSet32(ds, edi + 72, eax);
    eax = memoryAGet32(ds, esi + 76);
    memoryVideoSet32(ds, edi + 76, eax);
    eax = memoryAGet32(ds, esi + 80);
    memoryVideoSet32(ds, edi + 80, eax);
    eax = memoryAGet32(ds, esi + 84);
    memoryVideoSet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 88);
    memoryVideoSet32(ds, edi + 88, eax);
    eax = memoryAGet32(ds, esi + 92);
    memoryVideoSet32(ds, edi + 92, eax);
    eax = memoryAGet32(ds, esi + 96);
    memoryVideoSet32(ds, edi + 96, eax);
    eax = memoryAGet32(ds, esi + 100);
    memoryVideoSet32(ds, edi + 100, eax);
    eax = memoryAGet32(ds, esi + 104);
    memoryVideoSet32(ds, edi + 104, eax);
    eax = memoryAGet32(ds, esi + 108);
    memoryVideoSet32(ds, edi + 108, eax);
    eax = memoryAGet32(ds, esi + 112);
    memoryVideoSet32(ds, edi + 112, eax);
    eax = memoryAGet32(ds, esi + 116);
    memoryVideoSet32(ds, edi + 116, eax);
    eax = memoryAGet32(ds, esi + 120);
    memoryVideoSet32(ds, edi + 120, eax);
    eax = memoryAGet32(ds, esi + 124);
    memoryVideoSet32(ds, edi + 124, eax);
    eax = memoryAGet32(ds, esi + 128);
    memoryVideoSet32(ds, edi + 128, eax);
    eax = memoryAGet32(ds, esi + 132);
    memoryVideoSet32(ds, edi + 132, eax);
    eax = memoryAGet32(ds, esi + 136);
    memoryVideoSet32(ds, edi + 136, eax);
    eax = memoryAGet32(ds, esi + 140);
    memoryVideoSet32(ds, edi + 140, eax);
    eax = memoryAGet32(ds, esi + 144);
    memoryVideoSet32(ds, edi + 144, eax);
    eax = memoryAGet32(ds, esi + 148);
    memoryVideoSet32(ds, edi + 148, eax);
    eax = memoryAGet32(ds, esi + 152);
    memoryVideoSet32(ds, edi + 152, eax);
    eax = memoryAGet32(ds, esi + 156);
    memoryVideoSet32(ds, edi + 156, eax);
    eax = memoryAGet32(ds, esi + 160);
    memoryVideoSet32(ds, edi + 160, eax);
    eax = memoryAGet32(ds, esi + 164);
    memoryVideoSet32(ds, edi + 164, eax);
    eax = memoryAGet32(ds, esi + 168);
    memoryVideoSet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 172);
    memoryVideoSet32(ds, edi + 172, eax);
    eax = memoryAGet32(ds, esi + 176);
    memoryVideoSet32(ds, edi + 176, eax);
    eax = memoryAGet32(ds, esi + 180);
    memoryVideoSet32(ds, edi + 180, eax);
    eax = memoryAGet32(ds, esi + 184);
    memoryVideoSet32(ds, edi + 184, eax);
    eax = memoryAGet32(ds, esi + 188);
    memoryVideoSet32(ds, edi + 188, eax);
    eax = memoryAGet32(ds, esi + 192);
    memoryVideoSet32(ds, edi + 192, eax);
    eax = memoryAGet32(ds, esi + 196);
    memoryVideoSet32(ds, edi + 196, eax);
    eax = memoryAGet32(ds, esi + 200);
    memoryVideoSet32(ds, edi + 200, eax);
    eax = memoryAGet32(ds, esi + 204);
    memoryVideoSet32(ds, edi + 204, eax);
    eax = memoryAGet32(ds, esi + 208);
    memoryVideoSet32(ds, edi + 208, eax);
    eax = memoryAGet32(ds, esi + 212);
    memoryVideoSet32(ds, edi + 212, eax);
    eax = memoryAGet32(ds, esi + 216);
    memoryVideoSet32(ds, edi + 216, eax);
    eax = memoryAGet32(ds, esi + 220);
    memoryVideoSet32(ds, edi + 220, eax);
    eax = memoryAGet32(ds, esi + 224);
    memoryVideoSet32(ds, edi + 224, eax);
    eax = memoryAGet32(ds, esi + 228);
    memoryVideoSet32(ds, edi + 228, eax);
    eax = memoryAGet32(ds, esi + 232);
    memoryVideoSet32(ds, edi + 232, eax);
    eax = memoryAGet32(ds, esi + 236);
    memoryVideoSet32(ds, edi + 236, eax);
    eax = memoryAGet32(ds, esi + 240);
    memoryVideoSet32(ds, edi + 240, eax);
    eax = memoryAGet32(ds, esi + 244);
    memoryVideoSet32(ds, edi + 244, eax);
    eax = memoryAGet32(ds, esi + 248);
    memoryVideoSet32(ds, edi + 248, eax);
    eax = memoryAGet32(ds, esi + 252);
    memoryVideoSet32(ds, edi + 252, eax);
    eax = memoryAGet32(ds, esi + 256);
    memoryVideoSet32(ds, edi + 256, eax);
    eax = memoryAGet32(ds, esi + 260);
    memoryVideoSet32(ds, edi + 260, eax);
    eax = memoryAGet32(ds, esi + 264);
    memoryVideoSet32(ds, edi + 264, eax);
    eax = memoryAGet32(ds, esi + 268);
    memoryVideoSet32(ds, edi + 268, eax);
    eax = memoryAGet32(ds, esi + 272);
    memoryVideoSet32(ds, edi + 272, eax);
    eax = memoryAGet32(ds, esi + 276);
    memoryVideoSet32(ds, edi + 276, eax);
    eax = memoryAGet32(ds, esi + 280);
    memoryVideoSet32(ds, edi + 280, eax);
    eax = memoryAGet32(ds, esi + 284);
    memoryVideoSet32(ds, edi + 284, eax);
    eax = memoryAGet32(ds, esi + 288);
    memoryVideoSet32(ds, edi + 288, eax);
    eax = memoryAGet32(ds, esi + 292);
    memoryVideoSet32(ds, edi + 292, eax);
    eax = memoryAGet32(ds, esi + 296);
    memoryVideoSet32(ds, edi + 296, eax);
    eax = memoryAGet32(ds, esi + 300);
    memoryVideoSet32(ds, edi + 300, eax);
    eax = memoryAGet32(ds, esi + 304);
    memoryVideoSet32(ds, edi + 304, eax);
    eax = memoryAGet32(ds, esi + 308);
    memoryVideoSet32(ds, edi + 308, eax);
    eax = memoryAGet32(ds, esi + 312);
    memoryVideoSet32(ds, edi + 312, eax);
    eax = memoryAGet32(ds, esi + 316);
    memoryVideoSet32(ds, edi + 316, eax);
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_414f8;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_4180b() // 0160:4180b +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ch = 0xa8;
    edx = 0x000003c4;
    ebx = 0;
loc_41819: // 0160:41819
    al = 0x02;
    ah = 0x01;
    cl = bl;
    ah <<= cl;
    out16(dx, ax);
    eax = memoryAGet32(ds, ebx + esi);
    ah = memoryAGet(ds, ebx + esi + 4);
    memoryASet16(ds, edi, ax);
    eax = memoryAGet32(ds, ebx + esi + 8);
    ah = memoryAGet(ds, ebx + esi + 12);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, ebx + esi + 16);
    ah = memoryAGet(ds, ebx + esi + 20);
    memoryASet16(ds, edi + 4, ax);
    eax = memoryAGet32(ds, ebx + esi + 24);
    ah = memoryAGet(ds, ebx + esi + 28);
    memoryASet16(ds, edi + 6, ax);
    eax = memoryAGet32(ds, ebx + esi + 32);
    ah = memoryAGet(ds, ebx + esi + 36);
    memoryASet16(ds, edi + 8, ax);
    eax = memoryAGet32(ds, ebx + esi + 40);
    ah = memoryAGet(ds, ebx + esi + 44);
    memoryASet16(ds, edi + 10, ax);
    eax = memoryAGet32(ds, ebx + esi + 48);
    ah = memoryAGet(ds, ebx + esi + 52);
    memoryASet16(ds, edi + 12, ax);
    eax = memoryAGet32(ds, ebx + esi + 56);
    ah = memoryAGet(ds, ebx + esi + 60);
    memoryASet16(ds, edi + 14, ax);
    eax = memoryAGet32(ds, ebx + esi + 64);
    ah = memoryAGet(ds, ebx + esi + 68);
    memoryASet16(ds, edi + 16, ax);
    eax = memoryAGet32(ds, ebx + esi + 72);
    ah = memoryAGet(ds, ebx + esi + 76);
    memoryASet16(ds, edi + 18, ax);
    eax = memoryAGet32(ds, ebx + esi + 80);
    ah = memoryAGet(ds, ebx + esi + 84);
    memoryASet16(ds, edi + 20, ax);
    eax = memoryAGet32(ds, ebx + esi + 88);
    ah = memoryAGet(ds, ebx + esi + 92);
    memoryASet16(ds, edi + 22, ax);
    eax = memoryAGet32(ds, ebx + esi + 96);
    ah = memoryAGet(ds, ebx + esi + 100);
    memoryASet16(ds, edi + 24, ax);
    eax = memoryAGet32(ds, ebx + esi + 104);
    ah = memoryAGet(ds, ebx + esi + 108);
    memoryASet16(ds, edi + 26, ax);
    eax = memoryAGet32(ds, ebx + esi + 112);
    ah = memoryAGet(ds, ebx + esi + 116);
    memoryASet16(ds, edi + 28, ax);
    eax = memoryAGet32(ds, ebx + esi + 120);
    ah = memoryAGet(ds, ebx + esi + 124);
    memoryASet16(ds, edi + 30, ax);
    eax = memoryAGet32(ds, ebx + esi + 128);
    ah = memoryAGet(ds, ebx + esi + 132);
    memoryASet16(ds, edi + 32, ax);
    eax = memoryAGet32(ds, ebx + esi + 136);
    ah = memoryAGet(ds, ebx + esi + 140);
    memoryASet16(ds, edi + 34, ax);
    eax = memoryAGet32(ds, ebx + esi + 144);
    ah = memoryAGet(ds, ebx + esi + 148);
    memoryASet16(ds, edi + 36, ax);
    eax = memoryAGet32(ds, ebx + esi + 152);
    ah = memoryAGet(ds, ebx + esi + 156);
    memoryASet16(ds, edi + 38, ax);
    eax = memoryAGet32(ds, ebx + esi + 160);
    ah = memoryAGet(ds, ebx + esi + 164);
    memoryASet16(ds, edi + 40, ax);
    eax = memoryAGet32(ds, ebx + esi + 168);
    ah = memoryAGet(ds, ebx + esi + 172);
    memoryASet16(ds, edi + 42, ax);
    eax = memoryAGet32(ds, ebx + esi + 176);
    ah = memoryAGet(ds, ebx + esi + 180);
    memoryASet16(ds, edi + 44, ax);
    eax = memoryAGet32(ds, ebx + esi + 184);
    ah = memoryAGet(ds, ebx + esi + 188);
    memoryASet16(ds, edi + 46, ax);
    eax = memoryAGet32(ds, ebx + esi + 192);
    ah = memoryAGet(ds, ebx + esi + 196);
    memoryASet16(ds, edi + 48, ax);
    eax = memoryAGet32(ds, ebx + esi + 200);
    ah = memoryAGet(ds, ebx + esi + 204);
    memoryASet16(ds, edi + 50, ax);
    eax = memoryAGet32(ds, ebx + esi + 208);
    ah = memoryAGet(ds, ebx + esi + 212);
    memoryASet16(ds, edi + 52, ax);
    eax = memoryAGet32(ds, ebx + esi + 216);
    ah = memoryAGet(ds, ebx + esi + 220);
    memoryASet16(ds, edi + 54, ax);
    eax = memoryAGet32(ds, ebx + esi + 224);
    ah = memoryAGet(ds, ebx + esi + 228);
    memoryASet16(ds, edi + 56, ax);
    eax = memoryAGet32(ds, ebx + esi + 232);
    ah = memoryAGet(ds, ebx + esi + 236);
    memoryASet16(ds, edi + 58, ax);
    eax = memoryAGet32(ds, ebx + esi + 240);
    ah = memoryAGet(ds, ebx + esi + 244);
    memoryASet16(ds, edi + 60, ax);
    eax = memoryAGet32(ds, ebx + esi + 248);
    ah = memoryAGet(ds, ebx + esi + 252);
    memoryASet16(ds, edi + 62, ax);
    eax = memoryAGet32(ds, ebx + esi + 256);
    ah = memoryAGet(ds, ebx + esi + 260);
    memoryASet16(ds, edi + 64, ax);
    eax = memoryAGet32(ds, ebx + esi + 264);
    ah = memoryAGet(ds, ebx + esi + 268);
    memoryASet16(ds, edi + 66, ax);
    eax = memoryAGet32(ds, ebx + esi + 272);
    ah = memoryAGet(ds, ebx + esi + 276);
    memoryASet16(ds, edi + 68, ax);
    eax = memoryAGet32(ds, ebx + esi + 280);
    ah = memoryAGet(ds, ebx + esi + 284);
    memoryASet16(ds, edi + 70, ax);
    eax = memoryAGet32(ds, ebx + esi + 288);
    ah = memoryAGet(ds, ebx + esi + 292);
    memoryASet16(ds, edi + 72, ax);
    eax = memoryAGet32(ds, ebx + esi + 296);
    ah = memoryAGet(ds, ebx + esi + 300);
    memoryASet16(ds, edi + 74, ax);
    eax = memoryAGet32(ds, ebx + esi + 304);
    ah = memoryAGet(ds, ebx + esi + 308);
    memoryASet16(ds, edi + 76, ax);
    eax = memoryAGet32(ds, ebx + esi + 312);
    ah = memoryAGet(ds, ebx + esi + 316);
    memoryASet16(ds, edi + 78, ax);
    ebx++;
    ebx &= 0x00000003;
    if (ebx)
        goto loc_41819;
    esi += 0x00000140;
    edi += 0x00000050;
    ch--;
    if (ch)
        goto loc_41819;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_41aae() // 0160:41aae +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ebx = 0x00000000;
loc_41ab8: // 0160:41ab8
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = 0x00001f40;
loc_41acc: // 0160:41acc
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_41acc;
    esi -= 0x0000f9ff;
    edi -= 0x00003e80;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_41ab8;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_41af1() // 0160:41af1 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xfffffffc;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    ebx = 0x00000000;
loc_41b04: // 0160:41b04
    ecx = ebx;
    ah = 0x01;
    ah <<= cl;
    al = 0x02;
    edx = 0x000003c4;
    out16(dx, ax);
    ecx = memoryAGet32(ss, ebp + -4);
loc_41b16: // 0160:41b16
    eax = memoryAGet32(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet16(ds, edi, ax);
    esi += 0x00000008;
    edi += 0x00000002;
    ecx--;
    if (ecx)
        goto loc_41b16;
    eax = memoryAGet32(ss, ebp + -4);
    eax += eax;
    edi -= eax;
    eax <<= 2;
    eax--;
    esi -= eax;
    ebx++;
    if (ebx != 0x00000004)
        goto loc_41b04;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_41bd6() // 0160:41bd6 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if (!ebx)
        goto loc_41c03;
    if (!ecx)
        goto loc_41c03;
    esi = eax;
    edi = edx;
    esi--;
    edi--;
loc_41be5: // 0160:41be5
    edx = ebx;
loc_41be7: // 0160:41be7
    al = memoryAGet(ds, edx + esi);
    if (al & 0x80)
        goto loc_41bf1;
    memoryASet(ds, edx + edi, al);
loc_41bf1: // 0160:41bf1
    edx--;
    if (edx)
        goto loc_41be7;
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_41be5;
loc_41c03: // 0160:41c03
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_41c05() // 0160:41c05 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp += 0xffffffec;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    eax = memoryAGet32(ss, ebp + 24);
    eax <<= 16;
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ss, ebp + 24);
    eax >>= 16;
    memoryASet32(ss, ebp + -20, eax);
    if (memoryAGet32(ss, ebp + 16) == 0x00000000)
        goto loc_41c80;
    if (memoryAGet32(ss, ebp + 20) == 0x00000000)
        goto loc_41c80;
    esi = memoryAGet32(ss, ebp + 8);
    edi = memoryAGet32(ss, ebp + 12);
    eax = 0x00000140;
    eax -= memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -12, eax);
    memoryASet32(ss, ebp + -8, 0x00000000);
    ecx = 0;
loc_41c44: // 0160:41c44
    edx = 0;
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ss, ebp + -4, eax);
    push32(esi);
loc_41c4d: // 0160:41c4d
    al = memoryAGet(ds, esi);
    if (al & 0x80)
        goto loc_41c55;
    memoryASet(ds, edi, al);
loc_41c55: // 0160:41c55
    edi++;
    flags.carry = ((uint64_t)edx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    edx += memoryAGet32(ss, ebp + -16);
    esi += memoryAGet32(ss, ebp + -20) + flags.carry;
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) - 1);
    if (memoryAGet32(ss, ebp + -4))
        goto loc_41c4d;
    esi = pop32();
    eax = memoryAGet32(ss, ebp + -20);
    flags.carry = ((uint64_t)ecx + memoryAGet32(ss, ebp + -16)) >= 0x100000000ull;
    ecx += memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) + (eax + flags.carry));
    if (!memoryAGet32(ss, ebp + -8))
        goto loc_41c78;
loc_41c6d: // 0160:41c6d
    esi += 0x00000140;
    memoryASet32(ss, ebp + -8, memoryAGet32(ss, ebp + -8) - 1);
    if (memoryAGet32(ss, ebp + -8))
        goto loc_41c6d;
loc_41c78: // 0160:41c78
    edi += memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + 20, memoryAGet32(ss, ebp + 20) - 1);
    if (memoryAGet32(ss, ebp + 20))
        goto loc_41c44;
loc_41c80: // 0160:41c80
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp = ebp; ebp = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_41c83() // 0160:41c83 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = 0x00000009;
    goto loc_41c8f;
loc_41c8f: // 0160:41c8f
    goto loc_41c91;
loc_41c91: // 0160:41c91
    goto loc_41c94;
    // gap 1 bytes
loc_41c94: // 0160:41c94
    eax = memoryAGet32(ds, esi);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41ccb;
    edx = memoryAGet32(ds, edi);
    if (eax == 0x80808080)
        goto loc_41ccb;
    if (al & 0x80)
        goto loc_41cae;
    dl = al;
loc_41cae: // 0160:41cae
    if (ah & 0x80)
        goto loc_41cb5;
    dh = ah;
loc_41cb5: // 0160:41cb5
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41cc1;
    dl = al;
loc_41cc1: // 0160:41cc1
    if (ah & 0x80)
        goto loc_41cc8;
    dh = ah;
loc_41cc8: // 0160:41cc8
    edx = rol32(edx, 0x10);
loc_41ccb: // 0160:41ccb
    memoryASet32(ds, edi, edx);
    eax = memoryAGet32(ds, esi + 4);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41d06;
    edx = memoryAGet32(ds, edi + 4);
    if (eax == 0x80808080)
        goto loc_41d06;
    if (al & 0x80)
        goto loc_41ce9;
    dl = al;
loc_41ce9: // 0160:41ce9
    if (ah & 0x80)
        goto loc_41cf0;
    dh = ah;
loc_41cf0: // 0160:41cf0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41cfc;
    dl = al;
loc_41cfc: // 0160:41cfc
    if (ah & 0x80)
        goto loc_41d03;
    dh = ah;
loc_41d03: // 0160:41d03
    edx = rol32(edx, 0x10);
loc_41d06: // 0160:41d06
    memoryASet32(ds, edi + 4, edx);
    eax = memoryAGet32(ds, esi + 8);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41d42;
    edx = memoryAGet32(ds, edi + 8);
    if (eax == 0x80808080)
        goto loc_41d42;
    if (al & 0x80)
        goto loc_41d25;
    dl = al;
loc_41d25: // 0160:41d25
    if (ah & 0x80)
        goto loc_41d2c;
    dh = ah;
loc_41d2c: // 0160:41d2c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41d38;
    dl = al;
loc_41d38: // 0160:41d38
    if (ah & 0x80)
        goto loc_41d3f;
    dh = ah;
loc_41d3f: // 0160:41d3f
    edx = rol32(edx, 0x10);
loc_41d42: // 0160:41d42
    memoryASet32(ds, edi + 8, edx);
    eax = memoryAGet32(ds, esi + 12);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41d7e;
    edx = memoryAGet32(ds, edi + 12);
    if (eax == 0x80808080)
        goto loc_41d7e;
    if (al & 0x80)
        goto loc_41d61;
    dl = al;
loc_41d61: // 0160:41d61
    if (ah & 0x80)
        goto loc_41d68;
    dh = ah;
loc_41d68: // 0160:41d68
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41d74;
    dl = al;
loc_41d74: // 0160:41d74
    if (ah & 0x80)
        goto loc_41d7b;
    dh = ah;
loc_41d7b: // 0160:41d7b
    edx = rol32(edx, 0x10);
loc_41d7e: // 0160:41d7e
    memoryASet32(ds, edi + 12, edx);
    eax = memoryAGet32(ds, esi + 16);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41dba;
    edx = memoryAGet32(ds, edi + 16);
    if (eax == 0x80808080)
        goto loc_41dba;
    if (al & 0x80)
        goto loc_41d9d;
    dl = al;
loc_41d9d: // 0160:41d9d
    if (ah & 0x80)
        goto loc_41da4;
    dh = ah;
loc_41da4: // 0160:41da4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41db0;
    dl = al;
loc_41db0: // 0160:41db0
    if (ah & 0x80)
        goto loc_41db7;
    dh = ah;
loc_41db7: // 0160:41db7
    edx = rol32(edx, 0x10);
loc_41dba: // 0160:41dba
    memoryASet32(ds, edi + 16, edx);
    eax = memoryAGet32(ds, esi + 20);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41df6;
    edx = memoryAGet32(ds, edi + 20);
    if (eax == 0x80808080)
        goto loc_41df6;
    if (al & 0x80)
        goto loc_41dd9;
    dl = al;
loc_41dd9: // 0160:41dd9
    if (ah & 0x80)
        goto loc_41de0;
    dh = ah;
loc_41de0: // 0160:41de0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41dec;
    dl = al;
loc_41dec: // 0160:41dec
    if (ah & 0x80)
        goto loc_41df3;
    dh = ah;
loc_41df3: // 0160:41df3
    edx = rol32(edx, 0x10);
loc_41df6: // 0160:41df6
    memoryASet32(ds, edi + 20, edx);
    eax = memoryAGet32(ds, esi + 24);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41e32;
    edx = memoryAGet32(ds, edi + 24);
    if (eax == 0x80808080)
        goto loc_41e32;
    if (al & 0x80)
        goto loc_41e15;
    dl = al;
loc_41e15: // 0160:41e15
    if (ah & 0x80)
        goto loc_41e1c;
    dh = ah;
loc_41e1c: // 0160:41e1c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41e28;
    dl = al;
loc_41e28: // 0160:41e28
    if (ah & 0x80)
        goto loc_41e2f;
    dh = ah;
loc_41e2f: // 0160:41e2f
    edx = rol32(edx, 0x10);
loc_41e32: // 0160:41e32
    memoryASet32(ds, edi + 24, edx);
    eax = memoryAGet32(ds, esi + 28);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41e6e;
    edx = memoryAGet32(ds, edi + 28);
    if (eax == 0x80808080)
        goto loc_41e6e;
    if (al & 0x80)
        goto loc_41e51;
    dl = al;
loc_41e51: // 0160:41e51
    if (ah & 0x80)
        goto loc_41e58;
    dh = ah;
loc_41e58: // 0160:41e58
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41e64;
    dl = al;
loc_41e64: // 0160:41e64
    if (ah & 0x80)
        goto loc_41e6b;
    dh = ah;
loc_41e6b: // 0160:41e6b
    edx = rol32(edx, 0x10);
loc_41e6e: // 0160:41e6e
    memoryASet32(ds, edi + 28, edx);
    eax = memoryAGet32(ds, esi + 32);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41eaa;
    edx = memoryAGet32(ds, edi + 32);
    if (eax == 0x80808080)
        goto loc_41eaa;
    if (al & 0x80)
        goto loc_41e8d;
    dl = al;
loc_41e8d: // 0160:41e8d
    if (ah & 0x80)
        goto loc_41e94;
    dh = ah;
loc_41e94: // 0160:41e94
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41ea0;
    dl = al;
loc_41ea0: // 0160:41ea0
    if (ah & 0x80)
        goto loc_41ea7;
    dh = ah;
loc_41ea7: // 0160:41ea7
    edx = rol32(edx, 0x10);
loc_41eaa: // 0160:41eaa
    memoryASet32(ds, edi + 32, edx);
    eax = memoryAGet32(ds, esi + 36);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41ee6;
    edx = memoryAGet32(ds, edi + 36);
    if (eax == 0x80808080)
        goto loc_41ee6;
    if (al & 0x80)
        goto loc_41ec9;
    dl = al;
loc_41ec9: // 0160:41ec9
    if (ah & 0x80)
        goto loc_41ed0;
    dh = ah;
loc_41ed0: // 0160:41ed0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41edc;
    dl = al;
loc_41edc: // 0160:41edc
    if (ah & 0x80)
        goto loc_41ee3;
    dh = ah;
loc_41ee3: // 0160:41ee3
    edx = rol32(edx, 0x10);
loc_41ee6: // 0160:41ee6
    memoryASet32(ds, edi + 36, edx);
    eax = memoryAGet32(ds, esi + 40);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41f22;
    edx = memoryAGet32(ds, edi + 40);
    if (eax == 0x80808080)
        goto loc_41f22;
    if (al & 0x80)
        goto loc_41f05;
    dl = al;
loc_41f05: // 0160:41f05
    if (ah & 0x80)
        goto loc_41f0c;
    dh = ah;
loc_41f0c: // 0160:41f0c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41f18;
    dl = al;
loc_41f18: // 0160:41f18
    if (ah & 0x80)
        goto loc_41f1f;
    dh = ah;
loc_41f1f: // 0160:41f1f
    edx = rol32(edx, 0x10);
loc_41f22: // 0160:41f22
    memoryASet32(ds, edi + 40, edx);
    eax = memoryAGet32(ds, esi + 44);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41f5e;
    edx = memoryAGet32(ds, edi + 44);
    if (eax == 0x80808080)
        goto loc_41f5e;
    if (al & 0x80)
        goto loc_41f41;
    dl = al;
loc_41f41: // 0160:41f41
    if (ah & 0x80)
        goto loc_41f48;
    dh = ah;
loc_41f48: // 0160:41f48
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41f54;
    dl = al;
loc_41f54: // 0160:41f54
    if (ah & 0x80)
        goto loc_41f5b;
    dh = ah;
loc_41f5b: // 0160:41f5b
    edx = rol32(edx, 0x10);
loc_41f5e: // 0160:41f5e
    memoryASet32(ds, edi + 44, edx);
    eax = memoryAGet32(ds, esi + 48);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41f9a;
    edx = memoryAGet32(ds, edi + 48);
    if (eax == 0x80808080)
        goto loc_41f9a;
    if (al & 0x80)
        goto loc_41f7d;
    dl = al;
loc_41f7d: // 0160:41f7d
    if (ah & 0x80)
        goto loc_41f84;
    dh = ah;
loc_41f84: // 0160:41f84
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41f90;
    dl = al;
loc_41f90: // 0160:41f90
    if (ah & 0x80)
        goto loc_41f97;
    dh = ah;
loc_41f97: // 0160:41f97
    edx = rol32(edx, 0x10);
loc_41f9a: // 0160:41f9a
    memoryASet32(ds, edi + 48, edx);
    eax = memoryAGet32(ds, esi + 52);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_41fd6;
    edx = memoryAGet32(ds, edi + 52);
    if (eax == 0x80808080)
        goto loc_41fd6;
    if (al & 0x80)
        goto loc_41fb9;
    dl = al;
loc_41fb9: // 0160:41fb9
    if (ah & 0x80)
        goto loc_41fc0;
    dh = ah;
loc_41fc0: // 0160:41fc0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_41fcc;
    dl = al;
loc_41fcc: // 0160:41fcc
    if (ah & 0x80)
        goto loc_41fd3;
    dh = ah;
loc_41fd3: // 0160:41fd3
    edx = rol32(edx, 0x10);
loc_41fd6: // 0160:41fd6
    memoryASet32(ds, edi + 52, edx);
    eax = memoryAGet32(ds, esi + 56);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42012;
    edx = memoryAGet32(ds, edi + 56);
    if (eax == 0x80808080)
        goto loc_42012;
    if (al & 0x80)
        goto loc_41ff5;
    dl = al;
loc_41ff5: // 0160:41ff5
    if (ah & 0x80)
        goto loc_41ffc;
    dh = ah;
loc_41ffc: // 0160:41ffc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42008;
    dl = al;
loc_42008: // 0160:42008
    if (ah & 0x80)
        goto loc_4200f;
    dh = ah;
loc_4200f: // 0160:4200f
    edx = rol32(edx, 0x10);
loc_42012: // 0160:42012
    memoryASet32(ds, edi + 56, edx);
    eax = memoryAGet32(ds, esi + 60);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4204e;
    edx = memoryAGet32(ds, edi + 60);
    if (eax == 0x80808080)
        goto loc_4204e;
    if (al & 0x80)
        goto loc_42031;
    dl = al;
loc_42031: // 0160:42031
    if (ah & 0x80)
        goto loc_42038;
    dh = ah;
loc_42038: // 0160:42038
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42044;
    dl = al;
loc_42044: // 0160:42044
    if (ah & 0x80)
        goto loc_4204b;
    dh = ah;
loc_4204b: // 0160:4204b
    edx = rol32(edx, 0x10);
loc_4204e: // 0160:4204e
    memoryASet32(ds, edi + 60, edx);
    eax = memoryAGet32(ds, esi + 64);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4208a;
    edx = memoryAGet32(ds, edi + 64);
    if (eax == 0x80808080)
        goto loc_4208a;
    if (al & 0x80)
        goto loc_4206d;
    dl = al;
loc_4206d: // 0160:4206d
    if (ah & 0x80)
        goto loc_42074;
    dh = ah;
loc_42074: // 0160:42074
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42080;
    dl = al;
loc_42080: // 0160:42080
    if (ah & 0x80)
        goto loc_42087;
    dh = ah;
loc_42087: // 0160:42087
    edx = rol32(edx, 0x10);
loc_4208a: // 0160:4208a
    memoryASet32(ds, edi + 64, edx);
    eax = memoryAGet32(ds, esi + 68);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_420c6;
    edx = memoryAGet32(ds, edi + 68);
    if (eax == 0x80808080)
        goto loc_420c6;
    if (al & 0x80)
        goto loc_420a9;
    dl = al;
loc_420a9: // 0160:420a9
    if (ah & 0x80)
        goto loc_420b0;
    dh = ah;
loc_420b0: // 0160:420b0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_420bc;
    dl = al;
loc_420bc: // 0160:420bc
    if (ah & 0x80)
        goto loc_420c3;
    dh = ah;
loc_420c3: // 0160:420c3
    edx = rol32(edx, 0x10);
loc_420c6: // 0160:420c6
    memoryASet32(ds, edi + 68, edx);
    eax = memoryAGet32(ds, esi + 72);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42102;
    edx = memoryAGet32(ds, edi + 72);
    if (eax == 0x80808080)
        goto loc_42102;
    if (al & 0x80)
        goto loc_420e5;
    dl = al;
loc_420e5: // 0160:420e5
    if (ah & 0x80)
        goto loc_420ec;
    dh = ah;
loc_420ec: // 0160:420ec
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_420f8;
    dl = al;
loc_420f8: // 0160:420f8
    if (ah & 0x80)
        goto loc_420ff;
    dh = ah;
loc_420ff: // 0160:420ff
    edx = rol32(edx, 0x10);
loc_42102: // 0160:42102
    memoryASet32(ds, edi + 72, edx);
    eax = memoryAGet32(ds, esi + 76);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4213e;
    edx = memoryAGet32(ds, edi + 76);
    if (eax == 0x80808080)
        goto loc_4213e;
    if (al & 0x80)
        goto loc_42121;
    dl = al;
loc_42121: // 0160:42121
    if (ah & 0x80)
        goto loc_42128;
    dh = ah;
loc_42128: // 0160:42128
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42134;
    dl = al;
loc_42134: // 0160:42134
    if (ah & 0x80)
        goto loc_4213b;
    dh = ah;
loc_4213b: // 0160:4213b
    edx = rol32(edx, 0x10);
loc_4213e: // 0160:4213e
    memoryASet32(ds, edi + 76, edx);
    eax = memoryAGet32(ds, esi + 80);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4217a;
    edx = memoryAGet32(ds, edi + 80);
    if (eax == 0x80808080)
        goto loc_4217a;
    if (al & 0x80)
        goto loc_4215d;
    dl = al;
loc_4215d: // 0160:4215d
    if (ah & 0x80)
        goto loc_42164;
    dh = ah;
loc_42164: // 0160:42164
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42170;
    dl = al;
loc_42170: // 0160:42170
    if (ah & 0x80)
        goto loc_42177;
    dh = ah;
loc_42177: // 0160:42177
    edx = rol32(edx, 0x10);
loc_4217a: // 0160:4217a
    memoryASet32(ds, edi + 80, edx);
    eax = memoryAGet32(ds, esi + 84);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_421b6;
    edx = memoryAGet32(ds, edi + 84);
    if (eax == 0x80808080)
        goto loc_421b6;
    if (al & 0x80)
        goto loc_42199;
    dl = al;
loc_42199: // 0160:42199
    if (ah & 0x80)
        goto loc_421a0;
    dh = ah;
loc_421a0: // 0160:421a0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_421ac;
    dl = al;
loc_421ac: // 0160:421ac
    if (ah & 0x80)
        goto loc_421b3;
    dh = ah;
loc_421b3: // 0160:421b3
    edx = rol32(edx, 0x10);
loc_421b6: // 0160:421b6
    memoryASet32(ds, edi + 84, edx);
    eax = memoryAGet32(ds, esi + 88);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_421f2;
    edx = memoryAGet32(ds, edi + 88);
    if (eax == 0x80808080)
        goto loc_421f2;
    if (al & 0x80)
        goto loc_421d5;
    dl = al;
loc_421d5: // 0160:421d5
    if (ah & 0x80)
        goto loc_421dc;
    dh = ah;
loc_421dc: // 0160:421dc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_421e8;
    dl = al;
loc_421e8: // 0160:421e8
    if (ah & 0x80)
        goto loc_421ef;
    dh = ah;
loc_421ef: // 0160:421ef
    edx = rol32(edx, 0x10);
loc_421f2: // 0160:421f2
    memoryASet32(ds, edi + 88, edx);
    eax = memoryAGet32(ds, esi + 92);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4222e;
    edx = memoryAGet32(ds, edi + 92);
    if (eax == 0x80808080)
        goto loc_4222e;
    if (al & 0x80)
        goto loc_42211;
    dl = al;
loc_42211: // 0160:42211
    if (ah & 0x80)
        goto loc_42218;
    dh = ah;
loc_42218: // 0160:42218
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42224;
    dl = al;
loc_42224: // 0160:42224
    if (ah & 0x80)
        goto loc_4222b;
    dh = ah;
loc_4222b: // 0160:4222b
    edx = rol32(edx, 0x10);
loc_4222e: // 0160:4222e
    memoryASet32(ds, edi + 92, edx);
    eax = memoryAGet32(ds, esi + 96);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4226a;
    edx = memoryAGet32(ds, edi + 96);
    if (eax == 0x80808080)
        goto loc_4226a;
    if (al & 0x80)
        goto loc_4224d;
    dl = al;
loc_4224d: // 0160:4224d
    if (ah & 0x80)
        goto loc_42254;
    dh = ah;
loc_42254: // 0160:42254
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42260;
    dl = al;
loc_42260: // 0160:42260
    if (ah & 0x80)
        goto loc_42267;
    dh = ah;
loc_42267: // 0160:42267
    edx = rol32(edx, 0x10);
loc_4226a: // 0160:4226a
    memoryASet32(ds, edi + 96, edx);
    eax = memoryAGet32(ds, esi + 100);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_422a6;
    edx = memoryAGet32(ds, edi + 100);
    if (eax == 0x80808080)
        goto loc_422a6;
    if (al & 0x80)
        goto loc_42289;
    dl = al;
loc_42289: // 0160:42289
    if (ah & 0x80)
        goto loc_42290;
    dh = ah;
loc_42290: // 0160:42290
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4229c;
    dl = al;
loc_4229c: // 0160:4229c
    if (ah & 0x80)
        goto loc_422a3;
    dh = ah;
loc_422a3: // 0160:422a3
    edx = rol32(edx, 0x10);
loc_422a6: // 0160:422a6
    memoryASet32(ds, edi + 100, edx);
    eax = memoryAGet32(ds, esi + 104);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_422e2;
    edx = memoryAGet32(ds, edi + 104);
    if (eax == 0x80808080)
        goto loc_422e2;
    if (al & 0x80)
        goto loc_422c5;
    dl = al;
loc_422c5: // 0160:422c5
    if (ah & 0x80)
        goto loc_422cc;
    dh = ah;
loc_422cc: // 0160:422cc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_422d8;
    dl = al;
loc_422d8: // 0160:422d8
    if (ah & 0x80)
        goto loc_422df;
    dh = ah;
loc_422df: // 0160:422df
    edx = rol32(edx, 0x10);
loc_422e2: // 0160:422e2
    memoryASet32(ds, edi + 104, edx);
    eax = memoryAGet32(ds, esi + 108);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4231e;
    edx = memoryAGet32(ds, edi + 108);
    if (eax == 0x80808080)
        goto loc_4231e;
    if (al & 0x80)
        goto loc_42301;
    dl = al;
loc_42301: // 0160:42301
    if (ah & 0x80)
        goto loc_42308;
    dh = ah;
loc_42308: // 0160:42308
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42314;
    dl = al;
loc_42314: // 0160:42314
    if (ah & 0x80)
        goto loc_4231b;
    dh = ah;
loc_4231b: // 0160:4231b
    edx = rol32(edx, 0x10);
loc_4231e: // 0160:4231e
    memoryASet32(ds, edi + 108, edx);
    eax = memoryAGet32(ds, esi + 112);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4235a;
    edx = memoryAGet32(ds, edi + 112);
    if (eax == 0x80808080)
        goto loc_4235a;
    if (al & 0x80)
        goto loc_4233d;
    dl = al;
loc_4233d: // 0160:4233d
    if (ah & 0x80)
        goto loc_42344;
    dh = ah;
loc_42344: // 0160:42344
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42350;
    dl = al;
loc_42350: // 0160:42350
    if (ah & 0x80)
        goto loc_42357;
    dh = ah;
loc_42357: // 0160:42357
    edx = rol32(edx, 0x10);
loc_4235a: // 0160:4235a
    memoryASet32(ds, edi + 112, edx);
    eax = memoryAGet32(ds, esi + 116);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42396;
    edx = memoryAGet32(ds, edi + 116);
    if (eax == 0x80808080)
        goto loc_42396;
    if (al & 0x80)
        goto loc_42379;
    dl = al;
loc_42379: // 0160:42379
    if (ah & 0x80)
        goto loc_42380;
    dh = ah;
loc_42380: // 0160:42380
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4238c;
    dl = al;
loc_4238c: // 0160:4238c
    if (ah & 0x80)
        goto loc_42393;
    dh = ah;
loc_42393: // 0160:42393
    edx = rol32(edx, 0x10);
loc_42396: // 0160:42396
    memoryASet32(ds, edi + 116, edx);
    eax = memoryAGet32(ds, esi + 120);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_423d2;
    edx = memoryAGet32(ds, edi + 120);
    if (eax == 0x80808080)
        goto loc_423d2;
    if (al & 0x80)
        goto loc_423b5;
    dl = al;
loc_423b5: // 0160:423b5
    if (ah & 0x80)
        goto loc_423bc;
    dh = ah;
loc_423bc: // 0160:423bc
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_423c8;
    dl = al;
loc_423c8: // 0160:423c8
    if (ah & 0x80)
        goto loc_423cf;
    dh = ah;
loc_423cf: // 0160:423cf
    edx = rol32(edx, 0x10);
loc_423d2: // 0160:423d2
    memoryASet32(ds, edi + 120, edx);
    eax = memoryAGet32(ds, esi + 124);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4240e;
    edx = memoryAGet32(ds, edi + 124);
    if (eax == 0x80808080)
        goto loc_4240e;
    if (al & 0x80)
        goto loc_423f1;
    dl = al;
loc_423f1: // 0160:423f1
    if (ah & 0x80)
        goto loc_423f8;
    dh = ah;
loc_423f8: // 0160:423f8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42404;
    dl = al;
loc_42404: // 0160:42404
    if (ah & 0x80)
        goto loc_4240b;
    dh = ah;
loc_4240b: // 0160:4240b
    edx = rol32(edx, 0x10);
loc_4240e: // 0160:4240e
    memoryASet32(ds, edi + 124, edx);
    eax = memoryAGet32(ds, esi + 128);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42450;
    edx = memoryAGet32(ds, edi + 128);
    if (eax == 0x80808080)
        goto loc_42450;
    if (al & 0x80)
        goto loc_42433;
    dl = al;
loc_42433: // 0160:42433
    if (ah & 0x80)
        goto loc_4243a;
    dh = ah;
loc_4243a: // 0160:4243a
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42446;
    dl = al;
loc_42446: // 0160:42446
    if (ah & 0x80)
        goto loc_4244d;
    dh = ah;
loc_4244d: // 0160:4244d
    edx = rol32(edx, 0x10);
loc_42450: // 0160:42450
    memoryASet32(ds, edi + 128, edx);
    eax = memoryAGet32(ds, esi + 132);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42495;
    edx = memoryAGet32(ds, edi + 132);
    if (eax == 0x80808080)
        goto loc_42495;
    if (al & 0x80)
        goto loc_42478;
    dl = al;
loc_42478: // 0160:42478
    if (ah & 0x80)
        goto loc_4247f;
    dh = ah;
loc_4247f: // 0160:4247f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4248b;
    dl = al;
loc_4248b: // 0160:4248b
    if (ah & 0x80)
        goto loc_42492;
    dh = ah;
loc_42492: // 0160:42492
    edx = rol32(edx, 0x10);
loc_42495: // 0160:42495
    memoryASet32(ds, edi + 132, edx);
    eax = memoryAGet32(ds, esi + 136);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_424da;
    edx = memoryAGet32(ds, edi + 136);
    if (eax == 0x80808080)
        goto loc_424da;
    if (al & 0x80)
        goto loc_424bd;
    dl = al;
loc_424bd: // 0160:424bd
    if (ah & 0x80)
        goto loc_424c4;
    dh = ah;
loc_424c4: // 0160:424c4
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_424d0;
    dl = al;
loc_424d0: // 0160:424d0
    if (ah & 0x80)
        goto loc_424d7;
    dh = ah;
loc_424d7: // 0160:424d7
    edx = rol32(edx, 0x10);
loc_424da: // 0160:424da
    memoryASet32(ds, edi + 136, edx);
    eax = memoryAGet32(ds, esi + 140);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4251f;
    edx = memoryAGet32(ds, edi + 140);
    if (eax == 0x80808080)
        goto loc_4251f;
    if (al & 0x80)
        goto loc_42502;
    dl = al;
loc_42502: // 0160:42502
    if (ah & 0x80)
        goto loc_42509;
    dh = ah;
loc_42509: // 0160:42509
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42515;
    dl = al;
loc_42515: // 0160:42515
    if (ah & 0x80)
        goto loc_4251c;
    dh = ah;
loc_4251c: // 0160:4251c
    edx = rol32(edx, 0x10);
loc_4251f: // 0160:4251f
    memoryASet32(ds, edi + 140, edx);
    eax = memoryAGet32(ds, esi + 144);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42564;
    edx = memoryAGet32(ds, edi + 144);
    if (eax == 0x80808080)
        goto loc_42564;
    if (al & 0x80)
        goto loc_42547;
    dl = al;
loc_42547: // 0160:42547
    if (ah & 0x80)
        goto loc_4254e;
    dh = ah;
loc_4254e: // 0160:4254e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4255a;
    dl = al;
loc_4255a: // 0160:4255a
    if (ah & 0x80)
        goto loc_42561;
    dh = ah;
loc_42561: // 0160:42561
    edx = rol32(edx, 0x10);
loc_42564: // 0160:42564
    memoryASet32(ds, edi + 144, edx);
    eax = memoryAGet32(ds, esi + 148);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_425a9;
    edx = memoryAGet32(ds, edi + 148);
    if (eax == 0x80808080)
        goto loc_425a9;
    if (al & 0x80)
        goto loc_4258c;
    dl = al;
loc_4258c: // 0160:4258c
    if (ah & 0x80)
        goto loc_42593;
    dh = ah;
loc_42593: // 0160:42593
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4259f;
    dl = al;
loc_4259f: // 0160:4259f
    if (ah & 0x80)
        goto loc_425a6;
    dh = ah;
loc_425a6: // 0160:425a6
    edx = rol32(edx, 0x10);
loc_425a9: // 0160:425a9
    memoryASet32(ds, edi + 148, edx);
    eax = memoryAGet32(ds, esi + 152);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_425ee;
    edx = memoryAGet32(ds, edi + 152);
    if (eax == 0x80808080)
        goto loc_425ee;
    if (al & 0x80)
        goto loc_425d1;
    dl = al;
loc_425d1: // 0160:425d1
    if (ah & 0x80)
        goto loc_425d8;
    dh = ah;
loc_425d8: // 0160:425d8
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_425e4;
    dl = al;
loc_425e4: // 0160:425e4
    if (ah & 0x80)
        goto loc_425eb;
    dh = ah;
loc_425eb: // 0160:425eb
    edx = rol32(edx, 0x10);
loc_425ee: // 0160:425ee
    memoryASet32(ds, edi + 152, edx);
    eax = memoryAGet32(ds, esi + 156);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42633;
    edx = memoryAGet32(ds, edi + 156);
    if (eax == 0x80808080)
        goto loc_42633;
    if (al & 0x80)
        goto loc_42616;
    dl = al;
loc_42616: // 0160:42616
    if (ah & 0x80)
        goto loc_4261d;
    dh = ah;
loc_4261d: // 0160:4261d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42629;
    dl = al;
loc_42629: // 0160:42629
    if (ah & 0x80)
        goto loc_42630;
    dh = ah;
loc_42630: // 0160:42630
    edx = rol32(edx, 0x10);
loc_42633: // 0160:42633
    memoryASet32(ds, edi + 156, edx);
    eax = memoryAGet32(ds, esi + 160);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42678;
    edx = memoryAGet32(ds, edi + 160);
    if (eax == 0x80808080)
        goto loc_42678;
    if (al & 0x80)
        goto loc_4265b;
    dl = al;
loc_4265b: // 0160:4265b
    if (ah & 0x80)
        goto loc_42662;
    dh = ah;
loc_42662: // 0160:42662
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4266e;
    dl = al;
loc_4266e: // 0160:4266e
    if (ah & 0x80)
        goto loc_42675;
    dh = ah;
loc_42675: // 0160:42675
    edx = rol32(edx, 0x10);
loc_42678: // 0160:42678
    memoryASet32(ds, edi + 160, edx);
    eax = memoryAGet32(ds, esi + 164);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_426bd;
    edx = memoryAGet32(ds, edi + 164);
    if (eax == 0x80808080)
        goto loc_426bd;
    if (al & 0x80)
        goto loc_426a0;
    dl = al;
loc_426a0: // 0160:426a0
    if (ah & 0x80)
        goto loc_426a7;
    dh = ah;
loc_426a7: // 0160:426a7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_426b3;
    dl = al;
loc_426b3: // 0160:426b3
    if (ah & 0x80)
        goto loc_426ba;
    dh = ah;
loc_426ba: // 0160:426ba
    edx = rol32(edx, 0x10);
loc_426bd: // 0160:426bd
    memoryASet32(ds, edi + 164, edx);
    eax = memoryAGet32(ds, esi + 168);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42702;
    edx = memoryAGet32(ds, edi + 168);
    if (eax == 0x80808080)
        goto loc_42702;
    if (al & 0x80)
        goto loc_426e5;
    dl = al;
loc_426e5: // 0160:426e5
    if (ah & 0x80)
        goto loc_426ec;
    dh = ah;
loc_426ec: // 0160:426ec
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_426f8;
    dl = al;
loc_426f8: // 0160:426f8
    if (ah & 0x80)
        goto loc_426ff;
    dh = ah;
loc_426ff: // 0160:426ff
    edx = rol32(edx, 0x10);
loc_42702: // 0160:42702
    memoryASet32(ds, edi + 168, edx);
    eax = memoryAGet32(ds, esi + 172);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42747;
    edx = memoryAGet32(ds, edi + 172);
    if (eax == 0x80808080)
        goto loc_42747;
    if (al & 0x80)
        goto loc_4272a;
    dl = al;
loc_4272a: // 0160:4272a
    if (ah & 0x80)
        goto loc_42731;
    dh = ah;
loc_42731: // 0160:42731
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4273d;
    dl = al;
loc_4273d: // 0160:4273d
    if (ah & 0x80)
        goto loc_42744;
    dh = ah;
loc_42744: // 0160:42744
    edx = rol32(edx, 0x10);
loc_42747: // 0160:42747
    memoryASet32(ds, edi + 172, edx);
    eax = memoryAGet32(ds, esi + 176);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4278c;
    edx = memoryAGet32(ds, edi + 176);
    if (eax == 0x80808080)
        goto loc_4278c;
    if (al & 0x80)
        goto loc_4276f;
    dl = al;
loc_4276f: // 0160:4276f
    if (ah & 0x80)
        goto loc_42776;
    dh = ah;
loc_42776: // 0160:42776
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42782;
    dl = al;
loc_42782: // 0160:42782
    if (ah & 0x80)
        goto loc_42789;
    dh = ah;
loc_42789: // 0160:42789
    edx = rol32(edx, 0x10);
loc_4278c: // 0160:4278c
    memoryASet32(ds, edi + 176, edx);
    eax = memoryAGet32(ds, esi + 180);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_427d1;
    edx = memoryAGet32(ds, edi + 180);
    if (eax == 0x80808080)
        goto loc_427d1;
    if (al & 0x80)
        goto loc_427b4;
    dl = al;
loc_427b4: // 0160:427b4
    if (ah & 0x80)
        goto loc_427bb;
    dh = ah;
loc_427bb: // 0160:427bb
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_427c7;
    dl = al;
loc_427c7: // 0160:427c7
    if (ah & 0x80)
        goto loc_427ce;
    dh = ah;
loc_427ce: // 0160:427ce
    edx = rol32(edx, 0x10);
loc_427d1: // 0160:427d1
    memoryASet32(ds, edi + 180, edx);
    eax = memoryAGet32(ds, esi + 184);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42816;
    edx = memoryAGet32(ds, edi + 184);
    if (eax == 0x80808080)
        goto loc_42816;
    if (al & 0x80)
        goto loc_427f9;
    dl = al;
loc_427f9: // 0160:427f9
    if (ah & 0x80)
        goto loc_42800;
    dh = ah;
loc_42800: // 0160:42800
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_4280c;
    dl = al;
loc_4280c: // 0160:4280c
    if (ah & 0x80)
        goto loc_42813;
    dh = ah;
loc_42813: // 0160:42813
    edx = rol32(edx, 0x10);
loc_42816: // 0160:42816
    memoryASet32(ds, edi + 184, edx);
    eax = memoryAGet32(ds, esi + 188);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4285b;
    edx = memoryAGet32(ds, edi + 188);
    if (eax == 0x80808080)
        goto loc_4285b;
    if (al & 0x80)
        goto loc_4283e;
    dl = al;
loc_4283e: // 0160:4283e
    if (ah & 0x80)
        goto loc_42845;
    dh = ah;
loc_42845: // 0160:42845
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42851;
    dl = al;
loc_42851: // 0160:42851
    if (ah & 0x80)
        goto loc_42858;
    dh = ah;
loc_42858: // 0160:42858
    edx = rol32(edx, 0x10);
loc_4285b: // 0160:4285b
    memoryASet32(ds, edi + 188, edx);
    eax = memoryAGet32(ds, esi + 192);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_428a0;
    edx = memoryAGet32(ds, edi + 192);
    if (eax == 0x80808080)
        goto loc_428a0;
    if (al & 0x80)
        goto loc_42883;
    dl = al;
loc_42883: // 0160:42883
    if (ah & 0x80)
        goto loc_4288a;
    dh = ah;
loc_4288a: // 0160:4288a
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42896;
    dl = al;
loc_42896: // 0160:42896
    if (ah & 0x80)
        goto loc_4289d;
    dh = ah;
loc_4289d: // 0160:4289d
    edx = rol32(edx, 0x10);
loc_428a0: // 0160:428a0
    memoryASet32(ds, edi + 192, edx);
    eax = memoryAGet32(ds, esi + 196);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_428e5;
    edx = memoryAGet32(ds, edi + 196);
    if (eax == 0x80808080)
        goto loc_428e5;
    if (al & 0x80)
        goto loc_428c8;
    dl = al;
loc_428c8: // 0160:428c8
    if (ah & 0x80)
        goto loc_428cf;
    dh = ah;
loc_428cf: // 0160:428cf
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_428db;
    dl = al;
loc_428db: // 0160:428db
    if (ah & 0x80)
        goto loc_428e2;
    dh = ah;
loc_428e2: // 0160:428e2
    edx = rol32(edx, 0x10);
loc_428e5: // 0160:428e5
    memoryASet32(ds, edi + 196, edx);
    eax = memoryAGet32(ds, esi + 200);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4292a;
    edx = memoryAGet32(ds, edi + 200);
    if (eax == 0x80808080)
        goto loc_4292a;
    if (al & 0x80)
        goto loc_4290d;
    dl = al;
loc_4290d: // 0160:4290d
    if (ah & 0x80)
        goto loc_42914;
    dh = ah;
loc_42914: // 0160:42914
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42920;
    dl = al;
loc_42920: // 0160:42920
    if (ah & 0x80)
        goto loc_42927;
    dh = ah;
loc_42927: // 0160:42927
    edx = rol32(edx, 0x10);
loc_4292a: // 0160:4292a
    memoryASet32(ds, edi + 200, edx);
    eax = memoryAGet32(ds, esi + 204);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4296f;
    edx = memoryAGet32(ds, edi + 204);
    if (eax == 0x80808080)
        goto loc_4296f;
    if (al & 0x80)
        goto loc_42952;
    dl = al;
loc_42952: // 0160:42952
    if (ah & 0x80)
        goto loc_42959;
    dh = ah;
loc_42959: // 0160:42959
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42965;
    dl = al;
loc_42965: // 0160:42965
    if (ah & 0x80)
        goto loc_4296c;
    dh = ah;
loc_4296c: // 0160:4296c
    edx = rol32(edx, 0x10);
loc_4296f: // 0160:4296f
    memoryASet32(ds, edi + 204, edx);
    eax = memoryAGet32(ds, esi + 208);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_429b4;
    edx = memoryAGet32(ds, edi + 208);
    if (eax == 0x80808080)
        goto loc_429b4;
    if (al & 0x80)
        goto loc_42997;
    dl = al;
loc_42997: // 0160:42997
    if (ah & 0x80)
        goto loc_4299e;
    dh = ah;
loc_4299e: // 0160:4299e
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_429aa;
    dl = al;
loc_429aa: // 0160:429aa
    if (ah & 0x80)
        goto loc_429b1;
    dh = ah;
loc_429b1: // 0160:429b1
    edx = rol32(edx, 0x10);
loc_429b4: // 0160:429b4
    memoryASet32(ds, edi + 208, edx);
    eax = memoryAGet32(ds, esi + 212);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_429f9;
    edx = memoryAGet32(ds, edi + 212);
    if (eax == 0x80808080)
        goto loc_429f9;
    if (al & 0x80)
        goto loc_429dc;
    dl = al;
loc_429dc: // 0160:429dc
    if (ah & 0x80)
        goto loc_429e3;
    dh = ah;
loc_429e3: // 0160:429e3
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_429ef;
    dl = al;
loc_429ef: // 0160:429ef
    if (ah & 0x80)
        goto loc_429f6;
    dh = ah;
loc_429f6: // 0160:429f6
    edx = rol32(edx, 0x10);
loc_429f9: // 0160:429f9
    memoryASet32(ds, edi + 212, edx);
    eax = memoryAGet32(ds, esi + 216);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42a3e;
    edx = memoryAGet32(ds, edi + 216);
    if (eax == 0x80808080)
        goto loc_42a3e;
    if (al & 0x80)
        goto loc_42a21;
    dl = al;
loc_42a21: // 0160:42a21
    if (ah & 0x80)
        goto loc_42a28;
    dh = ah;
loc_42a28: // 0160:42a28
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42a34;
    dl = al;
loc_42a34: // 0160:42a34
    if (ah & 0x80)
        goto loc_42a3b;
    dh = ah;
loc_42a3b: // 0160:42a3b
    edx = rol32(edx, 0x10);
loc_42a3e: // 0160:42a3e
    memoryASet32(ds, edi + 216, edx);
    eax = memoryAGet32(ds, esi + 220);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42a83;
    edx = memoryAGet32(ds, edi + 220);
    if (eax == 0x80808080)
        goto loc_42a83;
    if (al & 0x80)
        goto loc_42a66;
    dl = al;
loc_42a66: // 0160:42a66
    if (ah & 0x80)
        goto loc_42a6d;
    dh = ah;
loc_42a6d: // 0160:42a6d
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42a79;
    dl = al;
loc_42a79: // 0160:42a79
    if (ah & 0x80)
        goto loc_42a80;
    dh = ah;
loc_42a80: // 0160:42a80
    edx = rol32(edx, 0x10);
loc_42a83: // 0160:42a83
    memoryASet32(ds, edi + 220, edx);
    eax = memoryAGet32(ds, esi + 224);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42ac8;
    edx = memoryAGet32(ds, edi + 224);
    if (eax == 0x80808080)
        goto loc_42ac8;
    if (al & 0x80)
        goto loc_42aab;
    dl = al;
loc_42aab: // 0160:42aab
    if (ah & 0x80)
        goto loc_42ab2;
    dh = ah;
loc_42ab2: // 0160:42ab2
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42abe;
    dl = al;
loc_42abe: // 0160:42abe
    if (ah & 0x80)
        goto loc_42ac5;
    dh = ah;
loc_42ac5: // 0160:42ac5
    edx = rol32(edx, 0x10);
loc_42ac8: // 0160:42ac8
    memoryASet32(ds, edi + 224, edx);
    eax = memoryAGet32(ds, esi + 228);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42b0d;
    edx = memoryAGet32(ds, edi + 228);
    if (eax == 0x80808080)
        goto loc_42b0d;
    if (al & 0x80)
        goto loc_42af0;
    dl = al;
loc_42af0: // 0160:42af0
    if (ah & 0x80)
        goto loc_42af7;
    dh = ah;
loc_42af7: // 0160:42af7
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42b03;
    dl = al;
loc_42b03: // 0160:42b03
    if (ah & 0x80)
        goto loc_42b0a;
    dh = ah;
loc_42b0a: // 0160:42b0a
    edx = rol32(edx, 0x10);
loc_42b0d: // 0160:42b0d
    memoryASet32(ds, edi + 228, edx);
    eax = memoryAGet32(ds, esi + 232);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42b52;
    edx = memoryAGet32(ds, edi + 232);
    if (eax == 0x80808080)
        goto loc_42b52;
    if (al & 0x80)
        goto loc_42b35;
    dl = al;
loc_42b35: // 0160:42b35
    if (ah & 0x80)
        goto loc_42b3c;
    dh = ah;
loc_42b3c: // 0160:42b3c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42b48;
    dl = al;
loc_42b48: // 0160:42b48
    if (ah & 0x80)
        goto loc_42b4f;
    dh = ah;
loc_42b4f: // 0160:42b4f
    edx = rol32(edx, 0x10);
loc_42b52: // 0160:42b52
    memoryASet32(ds, edi + 232, edx);
    eax = memoryAGet32(ds, esi + 236);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42b97;
    edx = memoryAGet32(ds, edi + 236);
    if (eax == 0x80808080)
        goto loc_42b97;
    if (al & 0x80)
        goto loc_42b7a;
    dl = al;
loc_42b7a: // 0160:42b7a
    if (ah & 0x80)
        goto loc_42b81;
    dh = ah;
loc_42b81: // 0160:42b81
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42b8d;
    dl = al;
loc_42b8d: // 0160:42b8d
    if (ah & 0x80)
        goto loc_42b94;
    dh = ah;
loc_42b94: // 0160:42b94
    edx = rol32(edx, 0x10);
loc_42b97: // 0160:42b97
    memoryASet32(ds, edi + 236, edx);
    eax = memoryAGet32(ds, esi + 240);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42bdc;
    edx = memoryAGet32(ds, edi + 240);
    if (eax == 0x80808080)
        goto loc_42bdc;
    if (al & 0x80)
        goto loc_42bbf;
    dl = al;
loc_42bbf: // 0160:42bbf
    if (ah & 0x80)
        goto loc_42bc6;
    dh = ah;
loc_42bc6: // 0160:42bc6
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42bd2;
    dl = al;
loc_42bd2: // 0160:42bd2
    if (ah & 0x80)
        goto loc_42bd9;
    dh = ah;
loc_42bd9: // 0160:42bd9
    edx = rol32(edx, 0x10);
loc_42bdc: // 0160:42bdc
    memoryASet32(ds, edi + 240, edx);
    eax = memoryAGet32(ds, esi + 244);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42c21;
    edx = memoryAGet32(ds, edi + 244);
    if (eax == 0x80808080)
        goto loc_42c21;
    if (al & 0x80)
        goto loc_42c04;
    dl = al;
loc_42c04: // 0160:42c04
    if (ah & 0x80)
        goto loc_42c0b;
    dh = ah;
loc_42c0b: // 0160:42c0b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42c17;
    dl = al;
loc_42c17: // 0160:42c17
    if (ah & 0x80)
        goto loc_42c1e;
    dh = ah;
loc_42c1e: // 0160:42c1e
    edx = rol32(edx, 0x10);
loc_42c21: // 0160:42c21
    memoryASet32(ds, edi + 244, edx);
    eax = memoryAGet32(ds, esi + 248);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42c66;
    edx = memoryAGet32(ds, edi + 248);
    if (eax == 0x80808080)
        goto loc_42c66;
    if (al & 0x80)
        goto loc_42c49;
    dl = al;
loc_42c49: // 0160:42c49
    if (ah & 0x80)
        goto loc_42c50;
    dh = ah;
loc_42c50: // 0160:42c50
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42c5c;
    dl = al;
loc_42c5c: // 0160:42c5c
    if (ah & 0x80)
        goto loc_42c63;
    dh = ah;
loc_42c63: // 0160:42c63
    edx = rol32(edx, 0x10);
loc_42c66: // 0160:42c66
    memoryASet32(ds, edi + 248, edx);
    eax = memoryAGet32(ds, esi + 252);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42cab;
    edx = memoryAGet32(ds, edi + 252);
    if (eax == 0x80808080)
        goto loc_42cab;
    if (al & 0x80)
        goto loc_42c8e;
    dl = al;
loc_42c8e: // 0160:42c8e
    if (ah & 0x80)
        goto loc_42c95;
    dh = ah;
loc_42c95: // 0160:42c95
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42ca1;
    dl = al;
loc_42ca1: // 0160:42ca1
    if (ah & 0x80)
        goto loc_42ca8;
    dh = ah;
loc_42ca8: // 0160:42ca8
    edx = rol32(edx, 0x10);
loc_42cab: // 0160:42cab
    memoryASet32(ds, edi + 252, edx);
    eax = memoryAGet32(ds, esi + 256);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42cf0;
    edx = memoryAGet32(ds, edi + 256);
    if (eax == 0x80808080)
        goto loc_42cf0;
    if (al & 0x80)
        goto loc_42cd3;
    dl = al;
loc_42cd3: // 0160:42cd3
    if (ah & 0x80)
        goto loc_42cda;
    dh = ah;
loc_42cda: // 0160:42cda
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42ce6;
    dl = al;
loc_42ce6: // 0160:42ce6
    if (ah & 0x80)
        goto loc_42ced;
    dh = ah;
loc_42ced: // 0160:42ced
    edx = rol32(edx, 0x10);
loc_42cf0: // 0160:42cf0
    memoryASet32(ds, edi + 256, edx);
    eax = memoryAGet32(ds, esi + 260);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42d35;
    edx = memoryAGet32(ds, edi + 260);
    if (eax == 0x80808080)
        goto loc_42d35;
    if (al & 0x80)
        goto loc_42d18;
    dl = al;
loc_42d18: // 0160:42d18
    if (ah & 0x80)
        goto loc_42d1f;
    dh = ah;
loc_42d1f: // 0160:42d1f
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42d2b;
    dl = al;
loc_42d2b: // 0160:42d2b
    if (ah & 0x80)
        goto loc_42d32;
    dh = ah;
loc_42d32: // 0160:42d32
    edx = rol32(edx, 0x10);
loc_42d35: // 0160:42d35
    memoryASet32(ds, edi + 260, edx);
    eax = memoryAGet32(ds, esi + 264);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42d7a;
    edx = memoryAGet32(ds, edi + 264);
    if (eax == 0x80808080)
        goto loc_42d7a;
    if (al & 0x80)
        goto loc_42d5d;
    dl = al;
loc_42d5d: // 0160:42d5d
    if (ah & 0x80)
        goto loc_42d64;
    dh = ah;
loc_42d64: // 0160:42d64
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42d70;
    dl = al;
loc_42d70: // 0160:42d70
    if (ah & 0x80)
        goto loc_42d77;
    dh = ah;
loc_42d77: // 0160:42d77
    edx = rol32(edx, 0x10);
loc_42d7a: // 0160:42d7a
    memoryASet32(ds, edi + 264, edx);
    eax = memoryAGet32(ds, esi + 268);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42dbf;
    edx = memoryAGet32(ds, edi + 268);
    if (eax == 0x80808080)
        goto loc_42dbf;
    if (al & 0x80)
        goto loc_42da2;
    dl = al;
loc_42da2: // 0160:42da2
    if (ah & 0x80)
        goto loc_42da9;
    dh = ah;
loc_42da9: // 0160:42da9
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42db5;
    dl = al;
loc_42db5: // 0160:42db5
    if (ah & 0x80)
        goto loc_42dbc;
    dh = ah;
loc_42dbc: // 0160:42dbc
    edx = rol32(edx, 0x10);
loc_42dbf: // 0160:42dbf
    memoryASet32(ds, edi + 268, edx);
    eax = memoryAGet32(ds, esi + 272);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42e04;
    edx = memoryAGet32(ds, edi + 272);
    if (eax == 0x80808080)
        goto loc_42e04;
    if (al & 0x80)
        goto loc_42de7;
    dl = al;
loc_42de7: // 0160:42de7
    if (ah & 0x80)
        goto loc_42dee;
    dh = ah;
loc_42dee: // 0160:42dee
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42dfa;
    dl = al;
loc_42dfa: // 0160:42dfa
    if (ah & 0x80)
        goto loc_42e01;
    dh = ah;
loc_42e01: // 0160:42e01
    edx = rol32(edx, 0x10);
loc_42e04: // 0160:42e04
    memoryASet32(ds, edi + 272, edx);
    eax = memoryAGet32(ds, esi + 276);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42e49;
    edx = memoryAGet32(ds, edi + 276);
    if (eax == 0x80808080)
        goto loc_42e49;
    if (al & 0x80)
        goto loc_42e2c;
    dl = al;
loc_42e2c: // 0160:42e2c
    if (ah & 0x80)
        goto loc_42e33;
    dh = ah;
loc_42e33: // 0160:42e33
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42e3f;
    dl = al;
loc_42e3f: // 0160:42e3f
    if (ah & 0x80)
        goto loc_42e46;
    dh = ah;
loc_42e46: // 0160:42e46
    edx = rol32(edx, 0x10);
loc_42e49: // 0160:42e49
    memoryASet32(ds, edi + 276, edx);
    eax = memoryAGet32(ds, esi + 280);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42e8e;
    edx = memoryAGet32(ds, edi + 280);
    if (eax == 0x80808080)
        goto loc_42e8e;
    if (al & 0x80)
        goto loc_42e71;
    dl = al;
loc_42e71: // 0160:42e71
    if (ah & 0x80)
        goto loc_42e78;
    dh = ah;
loc_42e78: // 0160:42e78
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42e84;
    dl = al;
loc_42e84: // 0160:42e84
    if (ah & 0x80)
        goto loc_42e8b;
    dh = ah;
loc_42e8b: // 0160:42e8b
    edx = rol32(edx, 0x10);
loc_42e8e: // 0160:42e8e
    memoryASet32(ds, edi + 280, edx);
    eax = memoryAGet32(ds, esi + 284);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42ed3;
    edx = memoryAGet32(ds, edi + 284);
    if (eax == 0x80808080)
        goto loc_42ed3;
    if (al & 0x80)
        goto loc_42eb6;
    dl = al;
loc_42eb6: // 0160:42eb6
    if (ah & 0x80)
        goto loc_42ebd;
    dh = ah;
loc_42ebd: // 0160:42ebd
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42ec9;
    dl = al;
loc_42ec9: // 0160:42ec9
    if (ah & 0x80)
        goto loc_42ed0;
    dh = ah;
loc_42ed0: // 0160:42ed0
    edx = rol32(edx, 0x10);
loc_42ed3: // 0160:42ed3
    memoryASet32(ds, edi + 284, edx);
    eax = memoryAGet32(ds, esi + 288);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42f18;
    edx = memoryAGet32(ds, edi + 288);
    if (eax == 0x80808080)
        goto loc_42f18;
    if (al & 0x80)
        goto loc_42efb;
    dl = al;
loc_42efb: // 0160:42efb
    if (ah & 0x80)
        goto loc_42f02;
    dh = ah;
loc_42f02: // 0160:42f02
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42f0e;
    dl = al;
loc_42f0e: // 0160:42f0e
    if (ah & 0x80)
        goto loc_42f15;
    dh = ah;
loc_42f15: // 0160:42f15
    edx = rol32(edx, 0x10);
loc_42f18: // 0160:42f18
    memoryASet32(ds, edi + 288, edx);
    eax = memoryAGet32(ds, esi + 292);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42f5d;
    edx = memoryAGet32(ds, edi + 292);
    if (eax == 0x80808080)
        goto loc_42f5d;
    if (al & 0x80)
        goto loc_42f40;
    dl = al;
loc_42f40: // 0160:42f40
    if (ah & 0x80)
        goto loc_42f47;
    dh = ah;
loc_42f47: // 0160:42f47
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42f53;
    dl = al;
loc_42f53: // 0160:42f53
    if (ah & 0x80)
        goto loc_42f5a;
    dh = ah;
loc_42f5a: // 0160:42f5a
    edx = rol32(edx, 0x10);
loc_42f5d: // 0160:42f5d
    memoryASet32(ds, edi + 292, edx);
    eax = memoryAGet32(ds, esi + 296);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42fa2;
    edx = memoryAGet32(ds, edi + 296);
    if (eax == 0x80808080)
        goto loc_42fa2;
    if (al & 0x80)
        goto loc_42f85;
    dl = al;
loc_42f85: // 0160:42f85
    if (ah & 0x80)
        goto loc_42f8c;
    dh = ah;
loc_42f8c: // 0160:42f8c
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42f98;
    dl = al;
loc_42f98: // 0160:42f98
    if (ah & 0x80)
        goto loc_42f9f;
    dh = ah;
loc_42f9f: // 0160:42f9f
    edx = rol32(edx, 0x10);
loc_42fa2: // 0160:42fa2
    memoryASet32(ds, edi + 296, edx);
    eax = memoryAGet32(ds, esi + 300);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_42fe7;
    edx = memoryAGet32(ds, edi + 300);
    if (eax == 0x80808080)
        goto loc_42fe7;
    if (al & 0x80)
        goto loc_42fca;
    dl = al;
loc_42fca: // 0160:42fca
    if (ah & 0x80)
        goto loc_42fd1;
    dh = ah;
loc_42fd1: // 0160:42fd1
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_42fdd;
    dl = al;
loc_42fdd: // 0160:42fdd
    if (ah & 0x80)
        goto loc_42fe4;
    dh = ah;
loc_42fe4: // 0160:42fe4
    edx = rol32(edx, 0x10);
loc_42fe7: // 0160:42fe7
    memoryASet32(ds, edi + 300, edx);
    eax = memoryAGet32(ds, esi + 304);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_4302c;
    edx = memoryAGet32(ds, edi + 304);
    if (eax == 0x80808080)
        goto loc_4302c;
    if (al & 0x80)
        goto loc_4300f;
    dl = al;
loc_4300f: // 0160:4300f
    if (ah & 0x80)
        goto loc_43016;
    dh = ah;
loc_43016: // 0160:43016
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_43022;
    dl = al;
loc_43022: // 0160:43022
    if (ah & 0x80)
        goto loc_43029;
    dh = ah;
loc_43029: // 0160:43029
    edx = rol32(edx, 0x10);
loc_4302c: // 0160:4302c
    memoryASet32(ds, edi + 304, edx);
    eax = memoryAGet32(ds, esi + 308);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_43071;
    edx = memoryAGet32(ds, edi + 308);
    if (eax == 0x80808080)
        goto loc_43071;
    if (al & 0x80)
        goto loc_43054;
    dl = al;
loc_43054: // 0160:43054
    if (ah & 0x80)
        goto loc_4305b;
    dh = ah;
loc_4305b: // 0160:4305b
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_43067;
    dl = al;
loc_43067: // 0160:43067
    if (ah & 0x80)
        goto loc_4306e;
    dh = ah;
loc_4306e: // 0160:4306e
    edx = rol32(edx, 0x10);
loc_43071: // 0160:43071
    memoryASet32(ds, edi + 308, edx);
    eax = memoryAGet32(ds, esi + 312);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_430b6;
    edx = memoryAGet32(ds, edi + 312);
    if (eax == 0x80808080)
        goto loc_430b6;
    if (al & 0x80)
        goto loc_43099;
    dl = al;
loc_43099: // 0160:43099
    if (ah & 0x80)
        goto loc_430a0;
    dh = ah;
loc_430a0: // 0160:430a0
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_430ac;
    dl = al;
loc_430ac: // 0160:430ac
    if (ah & 0x80)
        goto loc_430b3;
    dh = ah;
loc_430b3: // 0160:430b3
    edx = rol32(edx, 0x10);
loc_430b6: // 0160:430b6
    memoryASet32(ds, edi + 312, edx);
    eax = memoryAGet32(ds, esi + 316);
    edx = eax;
    if (!(eax & 0x80808080))
        goto loc_430fb;
    edx = memoryAGet32(ds, edi + 316);
    if (eax == 0x80808080)
        goto loc_430fb;
    if (al & 0x80)
        goto loc_430de;
    dl = al;
loc_430de: // 0160:430de
    if (ah & 0x80)
        goto loc_430e5;
    dh = ah;
loc_430e5: // 0160:430e5
    eax = ror32(eax, 0x10);
    edx = ror32(edx, 0x10);
    if (al & 0x80)
        goto loc_430f1;
    dl = al;
loc_430f1: // 0160:430f1
    if (ah & 0x80)
        goto loc_430f8;
    dh = ah;
loc_430f8: // 0160:430f8
    edx = rol32(edx, 0x10);
loc_430fb: // 0160:430fb
    memoryASet32(ds, edi + 316, edx);
    esi += 0x00000280;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_41c94;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_43116() // 0160:43116 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    ecx = ebx;
    goto loc_4311f;
loc_4311f: // 0160:4311f
    goto loc_43121;
loc_43121: // 0160:43121
    goto loc_43124;
    // gap 1 bytes
loc_43124: // 0160:43124
    eax = memoryAGet32(ds, esi);
    if (!eax)
        goto loc_4315a;
    if (!ax)
        goto loc_4313f;
    if (al)
        goto loc_43135;
    al = memoryAGet(ds, edi);
loc_43135: // 0160:43135
    if (ah)
        goto loc_4313c;
    ah = memoryAGet(ds, edi + 1);
loc_4313c: // 0160:4313c
    memoryASet16(ds, edi, ax);
loc_4313f: // 0160:4313f
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_4315a;
    if (al)
        goto loc_4314f;
    al = memoryAGet(ds, edi + 2);
loc_4314f: // 0160:4314f
    if (ah)
        goto loc_43156;
    ah = memoryAGet(ds, edi + 3);
loc_43156: // 0160:43156
    memoryASet16(ds, edi + 2, ax);
loc_4315a: // 0160:4315a
    eax = memoryAGet32(ds, esi + 4);
    if (!eax)
        goto loc_43193;
    if (!ax)
        goto loc_43178;
    if (al)
        goto loc_4316d;
    al = memoryAGet(ds, edi + 4);
loc_4316d: // 0160:4316d
    if (ah)
        goto loc_43174;
    ah = memoryAGet(ds, edi + 5);
loc_43174: // 0160:43174
    memoryASet16(ds, edi + 4, ax);
loc_43178: // 0160:43178
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_43193;
    if (al)
        goto loc_43188;
    al = memoryAGet(ds, edi + 6);
loc_43188: // 0160:43188
    if (ah)
        goto loc_4318f;
    ah = memoryAGet(ds, edi + 7);
loc_4318f: // 0160:4318f
    memoryASet16(ds, edi + 6, ax);
loc_43193: // 0160:43193
    eax = memoryAGet32(ds, esi + 8);
    if (!eax)
        goto loc_431cc;
    if (!ax)
        goto loc_431b1;
    if (al)
        goto loc_431a6;
    al = memoryAGet(ds, edi + 8);
loc_431a6: // 0160:431a6
    if (ah)
        goto loc_431ad;
    ah = memoryAGet(ds, edi + 9);
loc_431ad: // 0160:431ad
    memoryASet16(ds, edi + 8, ax);
loc_431b1: // 0160:431b1
    ax = memoryAGet16(ds, esi + 10);
    if (!ax)
        goto loc_431cc;
    if (al)
        goto loc_431c1;
    al = memoryAGet(ds, edi + 10);
loc_431c1: // 0160:431c1
    if (ah)
        goto loc_431c8;
    ah = memoryAGet(ds, edi + 11);
loc_431c8: // 0160:431c8
    memoryASet16(ds, edi + 10, ax);
loc_431cc: // 0160:431cc
    eax = memoryAGet32(ds, esi + 12);
    if (!eax)
        goto loc_43205;
    if (!ax)
        goto loc_431ea;
    if (al)
        goto loc_431df;
    al = memoryAGet(ds, edi + 12);
loc_431df: // 0160:431df
    if (ah)
        goto loc_431e6;
    ah = memoryAGet(ds, edi + 13);
loc_431e6: // 0160:431e6
    memoryASet16(ds, edi + 12, ax);
loc_431ea: // 0160:431ea
    ax = memoryAGet16(ds, esi + 14);
    if (!ax)
        goto loc_43205;
    if (al)
        goto loc_431fa;
    al = memoryAGet(ds, edi + 14);
loc_431fa: // 0160:431fa
    if (ah)
        goto loc_43201;
    ah = memoryAGet(ds, edi + 15);
loc_43201: // 0160:43201
    memoryASet16(ds, edi + 14, ax);
loc_43205: // 0160:43205
    eax = memoryAGet32(ds, esi + 16);
    if (!eax)
        goto loc_4323e;
    if (!ax)
        goto loc_43223;
    if (al)
        goto loc_43218;
    al = memoryAGet(ds, edi + 16);
loc_43218: // 0160:43218
    if (ah)
        goto loc_4321f;
    ah = memoryAGet(ds, edi + 17);
loc_4321f: // 0160:4321f
    memoryASet16(ds, edi + 16, ax);
loc_43223: // 0160:43223
    ax = memoryAGet16(ds, esi + 18);
    if (!ax)
        goto loc_4323e;
    if (al)
        goto loc_43233;
    al = memoryAGet(ds, edi + 18);
loc_43233: // 0160:43233
    if (ah)
        goto loc_4323a;
    ah = memoryAGet(ds, edi + 19);
loc_4323a: // 0160:4323a
    memoryASet16(ds, edi + 18, ax);
loc_4323e: // 0160:4323e
    eax = memoryAGet32(ds, esi + 20);
    if (!eax)
        goto loc_43277;
    if (!ax)
        goto loc_4325c;
    if (al)
        goto loc_43251;
    al = memoryAGet(ds, edi + 20);
loc_43251: // 0160:43251
    if (ah)
        goto loc_43258;
    ah = memoryAGet(ds, edi + 21);
loc_43258: // 0160:43258
    memoryASet16(ds, edi + 20, ax);
loc_4325c: // 0160:4325c
    ax = memoryAGet16(ds, esi + 22);
    if (!ax)
        goto loc_43277;
    if (al)
        goto loc_4326c;
    al = memoryAGet(ds, edi + 22);
loc_4326c: // 0160:4326c
    if (ah)
        goto loc_43273;
    ah = memoryAGet(ds, edi + 23);
loc_43273: // 0160:43273
    memoryASet16(ds, edi + 22, ax);
loc_43277: // 0160:43277
    eax = memoryAGet32(ds, esi + 24);
    if (!eax)
        goto loc_432b0;
    if (!ax)
        goto loc_43295;
    if (al)
        goto loc_4328a;
    al = memoryAGet(ds, edi + 24);
loc_4328a: // 0160:4328a
    if (ah)
        goto loc_43291;
    ah = memoryAGet(ds, edi + 25);
loc_43291: // 0160:43291
    memoryASet16(ds, edi + 24, ax);
loc_43295: // 0160:43295
    ax = memoryAGet16(ds, esi + 26);
    if (!ax)
        goto loc_432b0;
    if (al)
        goto loc_432a5;
    al = memoryAGet(ds, edi + 26);
loc_432a5: // 0160:432a5
    if (ah)
        goto loc_432ac;
    ah = memoryAGet(ds, edi + 27);
loc_432ac: // 0160:432ac
    memoryASet16(ds, edi + 26, ax);
loc_432b0: // 0160:432b0
    eax = memoryAGet32(ds, esi + 28);
    if (!eax)
        goto loc_432e9;
    if (!ax)
        goto loc_432ce;
    if (al)
        goto loc_432c3;
    al = memoryAGet(ds, edi + 28);
loc_432c3: // 0160:432c3
    if (ah)
        goto loc_432ca;
    ah = memoryAGet(ds, edi + 29);
loc_432ca: // 0160:432ca
    memoryASet16(ds, edi + 28, ax);
loc_432ce: // 0160:432ce
    ax = memoryAGet16(ds, esi + 30);
    if (!ax)
        goto loc_432e9;
    if (al)
        goto loc_432de;
    al = memoryAGet(ds, edi + 30);
loc_432de: // 0160:432de
    if (ah)
        goto loc_432e5;
    ah = memoryAGet(ds, edi + 31);
loc_432e5: // 0160:432e5
    memoryASet16(ds, edi + 30, ax);
loc_432e9: // 0160:432e9
    eax = memoryAGet32(ds, esi + 32);
    if (!eax)
        goto loc_43322;
    if (!ax)
        goto loc_43307;
    if (al)
        goto loc_432fc;
    al = memoryAGet(ds, edi + 32);
loc_432fc: // 0160:432fc
    if (ah)
        goto loc_43303;
    ah = memoryAGet(ds, edi + 33);
loc_43303: // 0160:43303
    memoryASet16(ds, edi + 32, ax);
loc_43307: // 0160:43307
    ax = memoryAGet16(ds, esi + 34);
    if (!ax)
        goto loc_43322;
    if (al)
        goto loc_43317;
    al = memoryAGet(ds, edi + 34);
loc_43317: // 0160:43317
    if (ah)
        goto loc_4331e;
    ah = memoryAGet(ds, edi + 35);
loc_4331e: // 0160:4331e
    memoryASet16(ds, edi + 34, ax);
loc_43322: // 0160:43322
    eax = memoryAGet32(ds, esi + 36);
    if (!eax)
        goto loc_4335b;
    if (!ax)
        goto loc_43340;
    if (al)
        goto loc_43335;
    al = memoryAGet(ds, edi + 36);
loc_43335: // 0160:43335
    if (ah)
        goto loc_4333c;
    ah = memoryAGet(ds, edi + 37);
loc_4333c: // 0160:4333c
    memoryASet16(ds, edi + 36, ax);
loc_43340: // 0160:43340
    ax = memoryAGet16(ds, esi + 38);
    if (!ax)
        goto loc_4335b;
    if (al)
        goto loc_43350;
    al = memoryAGet(ds, edi + 38);
loc_43350: // 0160:43350
    if (ah)
        goto loc_43357;
    ah = memoryAGet(ds, edi + 39);
loc_43357: // 0160:43357
    memoryASet16(ds, edi + 38, ax);
loc_4335b: // 0160:4335b
    eax = memoryAGet32(ds, esi + 40);
    if (!eax)
        goto loc_43394;
    if (!ax)
        goto loc_43379;
    if (al)
        goto loc_4336e;
    al = memoryAGet(ds, edi + 40);
loc_4336e: // 0160:4336e
    if (ah)
        goto loc_43375;
    ah = memoryAGet(ds, edi + 41);
loc_43375: // 0160:43375
    memoryASet16(ds, edi + 40, ax);
loc_43379: // 0160:43379
    ax = memoryAGet16(ds, esi + 42);
    if (!ax)
        goto loc_43394;
    if (al)
        goto loc_43389;
    al = memoryAGet(ds, edi + 42);
loc_43389: // 0160:43389
    if (ah)
        goto loc_43390;
    ah = memoryAGet(ds, edi + 43);
loc_43390: // 0160:43390
    memoryASet16(ds, edi + 42, ax);
loc_43394: // 0160:43394
    eax = memoryAGet32(ds, esi + 44);
    if (!eax)
        goto loc_433cd;
    if (!ax)
        goto loc_433b2;
    if (al)
        goto loc_433a7;
    al = memoryAGet(ds, edi + 44);
loc_433a7: // 0160:433a7
    if (ah)
        goto loc_433ae;
    ah = memoryAGet(ds, edi + 45);
loc_433ae: // 0160:433ae
    memoryASet16(ds, edi + 44, ax);
loc_433b2: // 0160:433b2
    ax = memoryAGet16(ds, esi + 46);
    if (!ax)
        goto loc_433cd;
    if (al)
        goto loc_433c2;
    al = memoryAGet(ds, edi + 46);
loc_433c2: // 0160:433c2
    if (ah)
        goto loc_433c9;
    ah = memoryAGet(ds, edi + 47);
loc_433c9: // 0160:433c9
    memoryASet16(ds, edi + 46, ax);
loc_433cd: // 0160:433cd
    eax = memoryAGet32(ds, esi + 48);
    if (!eax)
        goto loc_43406;
    if (!ax)
        goto loc_433eb;
    if (al)
        goto loc_433e0;
    al = memoryAGet(ds, edi + 48);
loc_433e0: // 0160:433e0
    if (ah)
        goto loc_433e7;
    ah = memoryAGet(ds, edi + 49);
loc_433e7: // 0160:433e7
    memoryASet16(ds, edi + 48, ax);
loc_433eb: // 0160:433eb
    ax = memoryAGet16(ds, esi + 50);
    if (!ax)
        goto loc_43406;
    if (al)
        goto loc_433fb;
    al = memoryAGet(ds, edi + 50);
loc_433fb: // 0160:433fb
    if (ah)
        goto loc_43402;
    ah = memoryAGet(ds, edi + 51);
loc_43402: // 0160:43402
    memoryASet16(ds, edi + 50, ax);
loc_43406: // 0160:43406
    eax = memoryAGet32(ds, esi + 52);
    if (!eax)
        goto loc_4343f;
    if (!ax)
        goto loc_43424;
    if (al)
        goto loc_43419;
    al = memoryAGet(ds, edi + 52);
loc_43419: // 0160:43419
    if (ah)
        goto loc_43420;
    ah = memoryAGet(ds, edi + 53);
loc_43420: // 0160:43420
    memoryASet16(ds, edi + 52, ax);
loc_43424: // 0160:43424
    ax = memoryAGet16(ds, esi + 54);
    if (!ax)
        goto loc_4343f;
    if (al)
        goto loc_43434;
    al = memoryAGet(ds, edi + 54);
loc_43434: // 0160:43434
    if (ah)
        goto loc_4343b;
    ah = memoryAGet(ds, edi + 55);
loc_4343b: // 0160:4343b
    memoryASet16(ds, edi + 54, ax);
loc_4343f: // 0160:4343f
    eax = memoryAGet32(ds, esi + 56);
    if (!eax)
        goto loc_43478;
    if (!ax)
        goto loc_4345d;
    if (al)
        goto loc_43452;
    al = memoryAGet(ds, edi + 56);
loc_43452: // 0160:43452
    if (ah)
        goto loc_43459;
    ah = memoryAGet(ds, edi + 57);
loc_43459: // 0160:43459
    memoryASet16(ds, edi + 56, ax);
loc_4345d: // 0160:4345d
    ax = memoryAGet16(ds, esi + 58);
    if (!ax)
        goto loc_43478;
    if (al)
        goto loc_4346d;
    al = memoryAGet(ds, edi + 58);
loc_4346d: // 0160:4346d
    if (ah)
        goto loc_43474;
    ah = memoryAGet(ds, edi + 59);
loc_43474: // 0160:43474
    memoryASet16(ds, edi + 58, ax);
loc_43478: // 0160:43478
    eax = memoryAGet32(ds, esi + 60);
    if (!eax)
        goto loc_434b1;
    if (!ax)
        goto loc_43496;
    if (al)
        goto loc_4348b;
    al = memoryAGet(ds, edi + 60);
loc_4348b: // 0160:4348b
    if (ah)
        goto loc_43492;
    ah = memoryAGet(ds, edi + 61);
loc_43492: // 0160:43492
    memoryASet16(ds, edi + 60, ax);
loc_43496: // 0160:43496
    ax = memoryAGet16(ds, esi + 62);
    if (!ax)
        goto loc_434b1;
    if (al)
        goto loc_434a6;
    al = memoryAGet(ds, edi + 62);
loc_434a6: // 0160:434a6
    if (ah)
        goto loc_434ad;
    ah = memoryAGet(ds, edi + 63);
loc_434ad: // 0160:434ad
    memoryASet16(ds, edi + 62, ax);
loc_434b1: // 0160:434b1
    eax = memoryAGet32(ds, esi + 64);
    if (!eax)
        goto loc_434ea;
    if (!ax)
        goto loc_434cf;
    if (al)
        goto loc_434c4;
    al = memoryAGet(ds, edi + 64);
loc_434c4: // 0160:434c4
    if (ah)
        goto loc_434cb;
    ah = memoryAGet(ds, edi + 65);
loc_434cb: // 0160:434cb
    memoryASet16(ds, edi + 64, ax);
loc_434cf: // 0160:434cf
    ax = memoryAGet16(ds, esi + 66);
    if (!ax)
        goto loc_434ea;
    if (al)
        goto loc_434df;
    al = memoryAGet(ds, edi + 66);
loc_434df: // 0160:434df
    if (ah)
        goto loc_434e6;
    ah = memoryAGet(ds, edi + 67);
loc_434e6: // 0160:434e6
    memoryASet16(ds, edi + 66, ax);
loc_434ea: // 0160:434ea
    eax = memoryAGet32(ds, esi + 68);
    if (!eax)
        goto loc_43523;
    if (!ax)
        goto loc_43508;
    if (al)
        goto loc_434fd;
    al = memoryAGet(ds, edi + 68);
loc_434fd: // 0160:434fd
    if (ah)
        goto loc_43504;
    ah = memoryAGet(ds, edi + 69);
loc_43504: // 0160:43504
    memoryASet16(ds, edi + 68, ax);
loc_43508: // 0160:43508
    ax = memoryAGet16(ds, esi + 70);
    if (!ax)
        goto loc_43523;
    if (al)
        goto loc_43518;
    al = memoryAGet(ds, edi + 70);
loc_43518: // 0160:43518
    if (ah)
        goto loc_4351f;
    ah = memoryAGet(ds, edi + 71);
loc_4351f: // 0160:4351f
    memoryASet16(ds, edi + 70, ax);
loc_43523: // 0160:43523
    eax = memoryAGet32(ds, esi + 72);
    if (!eax)
        goto loc_4355c;
    if (!ax)
        goto loc_43541;
    if (al)
        goto loc_43536;
    al = memoryAGet(ds, edi + 72);
loc_43536: // 0160:43536
    if (ah)
        goto loc_4353d;
    ah = memoryAGet(ds, edi + 73);
loc_4353d: // 0160:4353d
    memoryASet16(ds, edi + 72, ax);
loc_43541: // 0160:43541
    ax = memoryAGet16(ds, esi + 74);
    if (!ax)
        goto loc_4355c;
    if (al)
        goto loc_43551;
    al = memoryAGet(ds, edi + 74);
loc_43551: // 0160:43551
    if (ah)
        goto loc_43558;
    ah = memoryAGet(ds, edi + 75);
loc_43558: // 0160:43558
    memoryASet16(ds, edi + 74, ax);
loc_4355c: // 0160:4355c
    eax = memoryAGet32(ds, esi + 76);
    if (!eax)
        goto loc_43595;
    if (!ax)
        goto loc_4357a;
    if (al)
        goto loc_4356f;
    al = memoryAGet(ds, edi + 76);
loc_4356f: // 0160:4356f
    if (ah)
        goto loc_43576;
    ah = memoryAGet(ds, edi + 77);
loc_43576: // 0160:43576
    memoryASet16(ds, edi + 76, ax);
loc_4357a: // 0160:4357a
    ax = memoryAGet16(ds, esi + 78);
    if (!ax)
        goto loc_43595;
    if (al)
        goto loc_4358a;
    al = memoryAGet(ds, edi + 78);
loc_4358a: // 0160:4358a
    if (ah)
        goto loc_43591;
    ah = memoryAGet(ds, edi + 79);
loc_43591: // 0160:43591
    memoryASet16(ds, edi + 78, ax);
loc_43595: // 0160:43595
    eax = memoryAGet32(ds, esi + 80);
    if (!eax)
        goto loc_435ce;
    if (!ax)
        goto loc_435b3;
    if (al)
        goto loc_435a8;
    al = memoryAGet(ds, edi + 80);
loc_435a8: // 0160:435a8
    if (ah)
        goto loc_435af;
    ah = memoryAGet(ds, edi + 81);
loc_435af: // 0160:435af
    memoryASet16(ds, edi + 80, ax);
loc_435b3: // 0160:435b3
    ax = memoryAGet16(ds, esi + 82);
    if (!ax)
        goto loc_435ce;
    if (al)
        goto loc_435c3;
    al = memoryAGet(ds, edi + 82);
loc_435c3: // 0160:435c3
    if (ah)
        goto loc_435ca;
    ah = memoryAGet(ds, edi + 83);
loc_435ca: // 0160:435ca
    memoryASet16(ds, edi + 82, ax);
loc_435ce: // 0160:435ce
    eax = memoryAGet32(ds, esi + 84);
    if (!eax)
        goto loc_43607;
    if (!ax)
        goto loc_435ec;
    if (al)
        goto loc_435e1;
    al = memoryAGet(ds, edi + 84);
loc_435e1: // 0160:435e1
    if (ah)
        goto loc_435e8;
    ah = memoryAGet(ds, edi + 85);
loc_435e8: // 0160:435e8
    memoryASet16(ds, edi + 84, ax);
loc_435ec: // 0160:435ec
    ax = memoryAGet16(ds, esi + 86);
    if (!ax)
        goto loc_43607;
    if (al)
        goto loc_435fc;
    al = memoryAGet(ds, edi + 86);
loc_435fc: // 0160:435fc
    if (ah)
        goto loc_43603;
    ah = memoryAGet(ds, edi + 87);
loc_43603: // 0160:43603
    memoryASet16(ds, edi + 86, ax);
loc_43607: // 0160:43607
    eax = memoryAGet32(ds, esi + 88);
    if (!eax)
        goto loc_43640;
    if (!ax)
        goto loc_43625;
    if (al)
        goto loc_4361a;
    al = memoryAGet(ds, edi + 88);
loc_4361a: // 0160:4361a
    if (ah)
        goto loc_43621;
    ah = memoryAGet(ds, edi + 89);
loc_43621: // 0160:43621
    memoryASet16(ds, edi + 88, ax);
loc_43625: // 0160:43625
    ax = memoryAGet16(ds, esi + 90);
    if (!ax)
        goto loc_43640;
    if (al)
        goto loc_43635;
    al = memoryAGet(ds, edi + 90);
loc_43635: // 0160:43635
    if (ah)
        goto loc_4363c;
    ah = memoryAGet(ds, edi + 91);
loc_4363c: // 0160:4363c
    memoryASet16(ds, edi + 90, ax);
loc_43640: // 0160:43640
    eax = memoryAGet32(ds, esi + 92);
    if (!eax)
        goto loc_43679;
    if (!ax)
        goto loc_4365e;
    if (al)
        goto loc_43653;
    al = memoryAGet(ds, edi + 92);
loc_43653: // 0160:43653
    if (ah)
        goto loc_4365a;
    ah = memoryAGet(ds, edi + 93);
loc_4365a: // 0160:4365a
    memoryASet16(ds, edi + 92, ax);
loc_4365e: // 0160:4365e
    ax = memoryAGet16(ds, esi + 94);
    if (!ax)
        goto loc_43679;
    if (al)
        goto loc_4366e;
    al = memoryAGet(ds, edi + 94);
loc_4366e: // 0160:4366e
    if (ah)
        goto loc_43675;
    ah = memoryAGet(ds, edi + 95);
loc_43675: // 0160:43675
    memoryASet16(ds, edi + 94, ax);
loc_43679: // 0160:43679
    eax = memoryAGet32(ds, esi + 96);
    if (!eax)
        goto loc_436b2;
    if (!ax)
        goto loc_43697;
    if (al)
        goto loc_4368c;
    al = memoryAGet(ds, edi + 96);
loc_4368c: // 0160:4368c
    if (ah)
        goto loc_43693;
    ah = memoryAGet(ds, edi + 97);
loc_43693: // 0160:43693
    memoryASet16(ds, edi + 96, ax);
loc_43697: // 0160:43697
    ax = memoryAGet16(ds, esi + 98);
    if (!ax)
        goto loc_436b2;
    if (al)
        goto loc_436a7;
    al = memoryAGet(ds, edi + 98);
loc_436a7: // 0160:436a7
    if (ah)
        goto loc_436ae;
    ah = memoryAGet(ds, edi + 99);
loc_436ae: // 0160:436ae
    memoryASet16(ds, edi + 98, ax);
loc_436b2: // 0160:436b2
    eax = memoryAGet32(ds, esi + 100);
    if (!eax)
        goto loc_436eb;
    if (!ax)
        goto loc_436d0;
    if (al)
        goto loc_436c5;
    al = memoryAGet(ds, edi + 100);
loc_436c5: // 0160:436c5
    if (ah)
        goto loc_436cc;
    ah = memoryAGet(ds, edi + 101);
loc_436cc: // 0160:436cc
    memoryASet16(ds, edi + 100, ax);
loc_436d0: // 0160:436d0
    ax = memoryAGet16(ds, esi + 102);
    if (!ax)
        goto loc_436eb;
    if (al)
        goto loc_436e0;
    al = memoryAGet(ds, edi + 102);
loc_436e0: // 0160:436e0
    if (ah)
        goto loc_436e7;
    ah = memoryAGet(ds, edi + 103);
loc_436e7: // 0160:436e7
    memoryASet16(ds, edi + 102, ax);
loc_436eb: // 0160:436eb
    eax = memoryAGet32(ds, esi + 104);
    if (!eax)
        goto loc_43724;
    if (!ax)
        goto loc_43709;
    if (al)
        goto loc_436fe;
    al = memoryAGet(ds, edi + 104);
loc_436fe: // 0160:436fe
    if (ah)
        goto loc_43705;
    ah = memoryAGet(ds, edi + 105);
loc_43705: // 0160:43705
    memoryASet16(ds, edi + 104, ax);
loc_43709: // 0160:43709
    ax = memoryAGet16(ds, esi + 106);
    if (!ax)
        goto loc_43724;
    if (al)
        goto loc_43719;
    al = memoryAGet(ds, edi + 106);
loc_43719: // 0160:43719
    if (ah)
        goto loc_43720;
    ah = memoryAGet(ds, edi + 107);
loc_43720: // 0160:43720
    memoryASet16(ds, edi + 106, ax);
loc_43724: // 0160:43724
    eax = memoryAGet32(ds, esi + 108);
    if (!eax)
        goto loc_4375d;
    if (!ax)
        goto loc_43742;
    if (al)
        goto loc_43737;
    al = memoryAGet(ds, edi + 108);
loc_43737: // 0160:43737
    if (ah)
        goto loc_4373e;
    ah = memoryAGet(ds, edi + 109);
loc_4373e: // 0160:4373e
    memoryASet16(ds, edi + 108, ax);
loc_43742: // 0160:43742
    ax = memoryAGet16(ds, esi + 110);
    if (!ax)
        goto loc_4375d;
    if (al)
        goto loc_43752;
    al = memoryAGet(ds, edi + 110);
loc_43752: // 0160:43752
    if (ah)
        goto loc_43759;
    ah = memoryAGet(ds, edi + 111);
loc_43759: // 0160:43759
    memoryASet16(ds, edi + 110, ax);
loc_4375d: // 0160:4375d
    eax = memoryAGet32(ds, esi + 112);
    if (!eax)
        goto loc_43796;
    if (!ax)
        goto loc_4377b;
    if (al)
        goto loc_43770;
    al = memoryAGet(ds, edi + 112);
loc_43770: // 0160:43770
    if (ah)
        goto loc_43777;
    ah = memoryAGet(ds, edi + 113);
loc_43777: // 0160:43777
    memoryASet16(ds, edi + 112, ax);
loc_4377b: // 0160:4377b
    ax = memoryAGet16(ds, esi + 114);
    if (!ax)
        goto loc_43796;
    if (al)
        goto loc_4378b;
    al = memoryAGet(ds, edi + 114);
loc_4378b: // 0160:4378b
    if (ah)
        goto loc_43792;
    ah = memoryAGet(ds, edi + 115);
loc_43792: // 0160:43792
    memoryASet16(ds, edi + 114, ax);
loc_43796: // 0160:43796
    eax = memoryAGet32(ds, esi + 116);
    if (!eax)
        goto loc_437cf;
    if (!ax)
        goto loc_437b4;
    if (al)
        goto loc_437a9;
    al = memoryAGet(ds, edi + 116);
loc_437a9: // 0160:437a9
    if (ah)
        goto loc_437b0;
    ah = memoryAGet(ds, edi + 117);
loc_437b0: // 0160:437b0
    memoryASet16(ds, edi + 116, ax);
loc_437b4: // 0160:437b4
    ax = memoryAGet16(ds, esi + 118);
    if (!ax)
        goto loc_437cf;
    if (al)
        goto loc_437c4;
    al = memoryAGet(ds, edi + 118);
loc_437c4: // 0160:437c4
    if (ah)
        goto loc_437cb;
    ah = memoryAGet(ds, edi + 119);
loc_437cb: // 0160:437cb
    memoryASet16(ds, edi + 118, ax);
loc_437cf: // 0160:437cf
    eax = memoryAGet32(ds, esi + 120);
    if (!eax)
        goto loc_43808;
    if (!ax)
        goto loc_437ed;
    if (al)
        goto loc_437e2;
    al = memoryAGet(ds, edi + 120);
loc_437e2: // 0160:437e2
    if (ah)
        goto loc_437e9;
    ah = memoryAGet(ds, edi + 121);
loc_437e9: // 0160:437e9
    memoryASet16(ds, edi + 120, ax);
loc_437ed: // 0160:437ed
    ax = memoryAGet16(ds, esi + 122);
    if (!ax)
        goto loc_43808;
    if (al)
        goto loc_437fd;
    al = memoryAGet(ds, edi + 122);
loc_437fd: // 0160:437fd
    if (ah)
        goto loc_43804;
    ah = memoryAGet(ds, edi + 123);
loc_43804: // 0160:43804
    memoryASet16(ds, edi + 122, ax);
loc_43808: // 0160:43808
    eax = memoryAGet32(ds, esi + 124);
    if (!eax)
        goto loc_43841;
    if (!ax)
        goto loc_43826;
    if (al)
        goto loc_4381b;
    al = memoryAGet(ds, edi + 124);
loc_4381b: // 0160:4381b
    if (ah)
        goto loc_43822;
    ah = memoryAGet(ds, edi + 125);
loc_43822: // 0160:43822
    memoryASet16(ds, edi + 124, ax);
loc_43826: // 0160:43826
    ax = memoryAGet16(ds, esi + 126);
    if (!ax)
        goto loc_43841;
    if (al)
        goto loc_43836;
    al = memoryAGet(ds, edi + 126);
loc_43836: // 0160:43836
    if (ah)
        goto loc_4383d;
    ah = memoryAGet(ds, edi + 127);
loc_4383d: // 0160:4383d
    memoryASet16(ds, edi + 126, ax);
loc_43841: // 0160:43841
    eax = memoryAGet32(ds, esi + 128);
    if (!eax)
        goto loc_43892;
    if (!ax)
        goto loc_4386b;
    if (al)
        goto loc_4385a;
    al = memoryAGet(ds, edi + 128);
loc_4385a: // 0160:4385a
    if (ah)
        goto loc_43864;
    ah = memoryAGet(ds, edi + 129);
loc_43864: // 0160:43864
    memoryASet16(ds, edi + 128, ax);
loc_4386b: // 0160:4386b
    ax = memoryAGet16(ds, esi + 130);
    if (!ax)
        goto loc_43892;
    if (al)
        goto loc_43881;
    al = memoryAGet(ds, edi + 130);
loc_43881: // 0160:43881
    if (ah)
        goto loc_4388b;
    ah = memoryAGet(ds, edi + 131);
loc_4388b: // 0160:4388b
    memoryASet16(ds, edi + 130, ax);
loc_43892: // 0160:43892
    eax = memoryAGet32(ds, esi + 132);
    if (!eax)
        goto loc_438e3;
    if (!ax)
        goto loc_438bc;
    if (al)
        goto loc_438ab;
    al = memoryAGet(ds, edi + 132);
loc_438ab: // 0160:438ab
    if (ah)
        goto loc_438b5;
    ah = memoryAGet(ds, edi + 133);
loc_438b5: // 0160:438b5
    memoryASet16(ds, edi + 132, ax);
loc_438bc: // 0160:438bc
    ax = memoryAGet16(ds, esi + 134);
    if (!ax)
        goto loc_438e3;
    if (al)
        goto loc_438d2;
    al = memoryAGet(ds, edi + 134);
loc_438d2: // 0160:438d2
    if (ah)
        goto loc_438dc;
    ah = memoryAGet(ds, edi + 135);
loc_438dc: // 0160:438dc
    memoryASet16(ds, edi + 134, ax);
loc_438e3: // 0160:438e3
    eax = memoryAGet32(ds, esi + 136);
    if (!eax)
        goto loc_43934;
    if (!ax)
        goto loc_4390d;
    if (al)
        goto loc_438fc;
    al = memoryAGet(ds, edi + 136);
loc_438fc: // 0160:438fc
    if (ah)
        goto loc_43906;
    ah = memoryAGet(ds, edi + 137);
loc_43906: // 0160:43906
    memoryASet16(ds, edi + 136, ax);
loc_4390d: // 0160:4390d
    ax = memoryAGet16(ds, esi + 138);
    if (!ax)
        goto loc_43934;
    if (al)
        goto loc_43923;
    al = memoryAGet(ds, edi + 138);
loc_43923: // 0160:43923
    if (ah)
        goto loc_4392d;
    ah = memoryAGet(ds, edi + 139);
loc_4392d: // 0160:4392d
    memoryASet16(ds, edi + 138, ax);
loc_43934: // 0160:43934
    eax = memoryAGet32(ds, esi + 140);
    if (!eax)
        goto loc_43985;
    if (!ax)
        goto loc_4395e;
    if (al)
        goto loc_4394d;
    al = memoryAGet(ds, edi + 140);
loc_4394d: // 0160:4394d
    if (ah)
        goto loc_43957;
    ah = memoryAGet(ds, edi + 141);
loc_43957: // 0160:43957
    memoryASet16(ds, edi + 140, ax);
loc_4395e: // 0160:4395e
    ax = memoryAGet16(ds, esi + 142);
    if (!ax)
        goto loc_43985;
    if (al)
        goto loc_43974;
    al = memoryAGet(ds, edi + 142);
loc_43974: // 0160:43974
    if (ah)
        goto loc_4397e;
    ah = memoryAGet(ds, edi + 143);
loc_4397e: // 0160:4397e
    memoryASet16(ds, edi + 142, ax);
loc_43985: // 0160:43985
    eax = memoryAGet32(ds, esi + 144);
    if (!eax)
        goto loc_439d6;
    if (!ax)
        goto loc_439af;
    if (al)
        goto loc_4399e;
    al = memoryAGet(ds, edi + 144);
loc_4399e: // 0160:4399e
    if (ah)
        goto loc_439a8;
    ah = memoryAGet(ds, edi + 145);
loc_439a8: // 0160:439a8
    memoryASet16(ds, edi + 144, ax);
loc_439af: // 0160:439af
    ax = memoryAGet16(ds, esi + 146);
    if (!ax)
        goto loc_439d6;
    if (al)
        goto loc_439c5;
    al = memoryAGet(ds, edi + 146);
loc_439c5: // 0160:439c5
    if (ah)
        goto loc_439cf;
    ah = memoryAGet(ds, edi + 147);
loc_439cf: // 0160:439cf
    memoryASet16(ds, edi + 146, ax);
loc_439d6: // 0160:439d6
    eax = memoryAGet32(ds, esi + 148);
    if (!eax)
        goto loc_43a27;
    if (!ax)
        goto loc_43a00;
    if (al)
        goto loc_439ef;
    al = memoryAGet(ds, edi + 148);
loc_439ef: // 0160:439ef
    if (ah)
        goto loc_439f9;
    ah = memoryAGet(ds, edi + 149);
loc_439f9: // 0160:439f9
    memoryASet16(ds, edi + 148, ax);
loc_43a00: // 0160:43a00
    ax = memoryAGet16(ds, esi + 150);
    if (!ax)
        goto loc_43a27;
    if (al)
        goto loc_43a16;
    al = memoryAGet(ds, edi + 150);
loc_43a16: // 0160:43a16
    if (ah)
        goto loc_43a20;
    ah = memoryAGet(ds, edi + 151);
loc_43a20: // 0160:43a20
    memoryASet16(ds, edi + 150, ax);
loc_43a27: // 0160:43a27
    eax = memoryAGet32(ds, esi + 152);
    if (!eax)
        goto loc_43a78;
    if (!ax)
        goto loc_43a51;
    if (al)
        goto loc_43a40;
    al = memoryAGet(ds, edi + 152);
loc_43a40: // 0160:43a40
    if (ah)
        goto loc_43a4a;
    ah = memoryAGet(ds, edi + 153);
loc_43a4a: // 0160:43a4a
    memoryASet16(ds, edi + 152, ax);
loc_43a51: // 0160:43a51
    ax = memoryAGet16(ds, esi + 154);
    if (!ax)
        goto loc_43a78;
    if (al)
        goto loc_43a67;
    al = memoryAGet(ds, edi + 154);
loc_43a67: // 0160:43a67
    if (ah)
        goto loc_43a71;
    ah = memoryAGet(ds, edi + 155);
loc_43a71: // 0160:43a71
    memoryASet16(ds, edi + 154, ax);
loc_43a78: // 0160:43a78
    eax = memoryAGet32(ds, esi + 156);
    if (!eax)
        goto loc_43ac9;
    if (!ax)
        goto loc_43aa2;
    if (al)
        goto loc_43a91;
    al = memoryAGet(ds, edi + 156);
loc_43a91: // 0160:43a91
    if (ah)
        goto loc_43a9b;
    ah = memoryAGet(ds, edi + 157);
loc_43a9b: // 0160:43a9b
    memoryASet16(ds, edi + 156, ax);
loc_43aa2: // 0160:43aa2
    ax = memoryAGet16(ds, esi + 158);
    if (!ax)
        goto loc_43ac9;
    if (al)
        goto loc_43ab8;
    al = memoryAGet(ds, edi + 158);
loc_43ab8: // 0160:43ab8
    if (ah)
        goto loc_43ac2;
    ah = memoryAGet(ds, edi + 159);
loc_43ac2: // 0160:43ac2
    memoryASet16(ds, edi + 158, ax);
loc_43ac9: // 0160:43ac9
    eax = memoryAGet32(ds, esi + 160);
    if (!eax)
        goto loc_43b1a;
    if (!ax)
        goto loc_43af3;
    if (al)
        goto loc_43ae2;
    al = memoryAGet(ds, edi + 160);
loc_43ae2: // 0160:43ae2
    if (ah)
        goto loc_43aec;
    ah = memoryAGet(ds, edi + 161);
loc_43aec: // 0160:43aec
    memoryASet16(ds, edi + 160, ax);
loc_43af3: // 0160:43af3
    ax = memoryAGet16(ds, esi + 162);
    if (!ax)
        goto loc_43b1a;
    if (al)
        goto loc_43b09;
    al = memoryAGet(ds, edi + 162);
loc_43b09: // 0160:43b09
    if (ah)
        goto loc_43b13;
    ah = memoryAGet(ds, edi + 163);
loc_43b13: // 0160:43b13
    memoryASet16(ds, edi + 162, ax);
loc_43b1a: // 0160:43b1a
    eax = memoryAGet32(ds, esi + 164);
    if (!eax)
        goto loc_43b6b;
    if (!ax)
        goto loc_43b44;
    if (al)
        goto loc_43b33;
    al = memoryAGet(ds, edi + 164);
loc_43b33: // 0160:43b33
    if (ah)
        goto loc_43b3d;
    ah = memoryAGet(ds, edi + 165);
loc_43b3d: // 0160:43b3d
    memoryASet16(ds, edi + 164, ax);
loc_43b44: // 0160:43b44
    ax = memoryAGet16(ds, esi + 166);
    if (!ax)
        goto loc_43b6b;
    if (al)
        goto loc_43b5a;
    al = memoryAGet(ds, edi + 166);
loc_43b5a: // 0160:43b5a
    if (ah)
        goto loc_43b64;
    ah = memoryAGet(ds, edi + 167);
loc_43b64: // 0160:43b64
    memoryASet16(ds, edi + 166, ax);
loc_43b6b: // 0160:43b6b
    eax = memoryAGet32(ds, esi + 168);
    if (!eax)
        goto loc_43bbc;
    if (!ax)
        goto loc_43b95;
    if (al)
        goto loc_43b84;
    al = memoryAGet(ds, edi + 168);
loc_43b84: // 0160:43b84
    if (ah)
        goto loc_43b8e;
    ah = memoryAGet(ds, edi + 169);
loc_43b8e: // 0160:43b8e
    memoryASet16(ds, edi + 168, ax);
loc_43b95: // 0160:43b95
    ax = memoryAGet16(ds, esi + 170);
    if (!ax)
        goto loc_43bbc;
    if (al)
        goto loc_43bab;
    al = memoryAGet(ds, edi + 170);
loc_43bab: // 0160:43bab
    if (ah)
        goto loc_43bb5;
    ah = memoryAGet(ds, edi + 171);
loc_43bb5: // 0160:43bb5
    memoryASet16(ds, edi + 170, ax);
loc_43bbc: // 0160:43bbc
    eax = memoryAGet32(ds, esi + 172);
    if (!eax)
        goto loc_43c0d;
    if (!ax)
        goto loc_43be6;
    if (al)
        goto loc_43bd5;
    al = memoryAGet(ds, edi + 172);
loc_43bd5: // 0160:43bd5
    if (ah)
        goto loc_43bdf;
    ah = memoryAGet(ds, edi + 173);
loc_43bdf: // 0160:43bdf
    memoryASet16(ds, edi + 172, ax);
loc_43be6: // 0160:43be6
    ax = memoryAGet16(ds, esi + 174);
    if (!ax)
        goto loc_43c0d;
    if (al)
        goto loc_43bfc;
    al = memoryAGet(ds, edi + 174);
loc_43bfc: // 0160:43bfc
    if (ah)
        goto loc_43c06;
    ah = memoryAGet(ds, edi + 175);
loc_43c06: // 0160:43c06
    memoryASet16(ds, edi + 174, ax);
loc_43c0d: // 0160:43c0d
    eax = memoryAGet32(ds, esi + 176);
    if (!eax)
        goto loc_43c5e;
    if (!ax)
        goto loc_43c37;
    if (al)
        goto loc_43c26;
    al = memoryAGet(ds, edi + 176);
loc_43c26: // 0160:43c26
    if (ah)
        goto loc_43c30;
    ah = memoryAGet(ds, edi + 177);
loc_43c30: // 0160:43c30
    memoryASet16(ds, edi + 176, ax);
loc_43c37: // 0160:43c37
    ax = memoryAGet16(ds, esi + 178);
    if (!ax)
        goto loc_43c5e;
    if (al)
        goto loc_43c4d;
    al = memoryAGet(ds, edi + 178);
loc_43c4d: // 0160:43c4d
    if (ah)
        goto loc_43c57;
    ah = memoryAGet(ds, edi + 179);
loc_43c57: // 0160:43c57
    memoryASet16(ds, edi + 178, ax);
loc_43c5e: // 0160:43c5e
    eax = memoryAGet32(ds, esi + 180);
    if (!eax)
        goto loc_43caf;
    if (!ax)
        goto loc_43c88;
    if (al)
        goto loc_43c77;
    al = memoryAGet(ds, edi + 180);
loc_43c77: // 0160:43c77
    if (ah)
        goto loc_43c81;
    ah = memoryAGet(ds, edi + 181);
loc_43c81: // 0160:43c81
    memoryASet16(ds, edi + 180, ax);
loc_43c88: // 0160:43c88
    ax = memoryAGet16(ds, esi + 182);
    if (!ax)
        goto loc_43caf;
    if (al)
        goto loc_43c9e;
    al = memoryAGet(ds, edi + 182);
loc_43c9e: // 0160:43c9e
    if (ah)
        goto loc_43ca8;
    ah = memoryAGet(ds, edi + 183);
loc_43ca8: // 0160:43ca8
    memoryASet16(ds, edi + 182, ax);
loc_43caf: // 0160:43caf
    eax = memoryAGet32(ds, esi + 184);
    if (!eax)
        goto loc_43d00;
    if (!ax)
        goto loc_43cd9;
    if (al)
        goto loc_43cc8;
    al = memoryAGet(ds, edi + 184);
loc_43cc8: // 0160:43cc8
    if (ah)
        goto loc_43cd2;
    ah = memoryAGet(ds, edi + 185);
loc_43cd2: // 0160:43cd2
    memoryASet16(ds, edi + 184, ax);
loc_43cd9: // 0160:43cd9
    ax = memoryAGet16(ds, esi + 186);
    if (!ax)
        goto loc_43d00;
    if (al)
        goto loc_43cef;
    al = memoryAGet(ds, edi + 186);
loc_43cef: // 0160:43cef
    if (ah)
        goto loc_43cf9;
    ah = memoryAGet(ds, edi + 187);
loc_43cf9: // 0160:43cf9
    memoryASet16(ds, edi + 186, ax);
loc_43d00: // 0160:43d00
    eax = memoryAGet32(ds, esi + 188);
    if (!eax)
        goto loc_43d51;
    if (!ax)
        goto loc_43d2a;
    if (al)
        goto loc_43d19;
    al = memoryAGet(ds, edi + 188);
loc_43d19: // 0160:43d19
    if (ah)
        goto loc_43d23;
    ah = memoryAGet(ds, edi + 189);
loc_43d23: // 0160:43d23
    memoryASet16(ds, edi + 188, ax);
loc_43d2a: // 0160:43d2a
    ax = memoryAGet16(ds, esi + 190);
    if (!ax)
        goto loc_43d51;
    if (al)
        goto loc_43d40;
    al = memoryAGet(ds, edi + 190);
loc_43d40: // 0160:43d40
    if (ah)
        goto loc_43d4a;
    ah = memoryAGet(ds, edi + 191);
loc_43d4a: // 0160:43d4a
    memoryASet16(ds, edi + 190, ax);
loc_43d51: // 0160:43d51
    eax = memoryAGet32(ds, esi + 192);
    if (!eax)
        goto loc_43da2;
    if (!ax)
        goto loc_43d7b;
    if (al)
        goto loc_43d6a;
    al = memoryAGet(ds, edi + 192);
loc_43d6a: // 0160:43d6a
    if (ah)
        goto loc_43d74;
    ah = memoryAGet(ds, edi + 193);
loc_43d74: // 0160:43d74
    memoryASet16(ds, edi + 192, ax);
loc_43d7b: // 0160:43d7b
    ax = memoryAGet16(ds, esi + 194);
    if (!ax)
        goto loc_43da2;
    if (al)
        goto loc_43d91;
    al = memoryAGet(ds, edi + 194);
loc_43d91: // 0160:43d91
    if (ah)
        goto loc_43d9b;
    ah = memoryAGet(ds, edi + 195);
loc_43d9b: // 0160:43d9b
    memoryASet16(ds, edi + 194, ax);
loc_43da2: // 0160:43da2
    eax = memoryAGet32(ds, esi + 196);
    if (!eax)
        goto loc_43df3;
    if (!ax)
        goto loc_43dcc;
    if (al)
        goto loc_43dbb;
    al = memoryAGet(ds, edi + 196);
loc_43dbb: // 0160:43dbb
    if (ah)
        goto loc_43dc5;
    ah = memoryAGet(ds, edi + 197);
loc_43dc5: // 0160:43dc5
    memoryASet16(ds, edi + 196, ax);
loc_43dcc: // 0160:43dcc
    ax = memoryAGet16(ds, esi + 198);
    if (!ax)
        goto loc_43df3;
    if (al)
        goto loc_43de2;
    al = memoryAGet(ds, edi + 198);
loc_43de2: // 0160:43de2
    if (ah)
        goto loc_43dec;
    ah = memoryAGet(ds, edi + 199);
loc_43dec: // 0160:43dec
    memoryASet16(ds, edi + 198, ax);
loc_43df3: // 0160:43df3
    eax = memoryAGet32(ds, esi + 200);
    if (!eax)
        goto loc_43e44;
    if (!ax)
        goto loc_43e1d;
    if (al)
        goto loc_43e0c;
    al = memoryAGet(ds, edi + 200);
loc_43e0c: // 0160:43e0c
    if (ah)
        goto loc_43e16;
    ah = memoryAGet(ds, edi + 201);
loc_43e16: // 0160:43e16
    memoryASet16(ds, edi + 200, ax);
loc_43e1d: // 0160:43e1d
    ax = memoryAGet16(ds, esi + 202);
    if (!ax)
        goto loc_43e44;
    if (al)
        goto loc_43e33;
    al = memoryAGet(ds, edi + 202);
loc_43e33: // 0160:43e33
    if (ah)
        goto loc_43e3d;
    ah = memoryAGet(ds, edi + 203);
loc_43e3d: // 0160:43e3d
    memoryASet16(ds, edi + 202, ax);
loc_43e44: // 0160:43e44
    eax = memoryAGet32(ds, esi + 204);
    if (!eax)
        goto loc_43e95;
    if (!ax)
        goto loc_43e6e;
    if (al)
        goto loc_43e5d;
    al = memoryAGet(ds, edi + 204);
loc_43e5d: // 0160:43e5d
    if (ah)
        goto loc_43e67;
    ah = memoryAGet(ds, edi + 205);
loc_43e67: // 0160:43e67
    memoryASet16(ds, edi + 204, ax);
loc_43e6e: // 0160:43e6e
    ax = memoryAGet16(ds, esi + 206);
    if (!ax)
        goto loc_43e95;
    if (al)
        goto loc_43e84;
    al = memoryAGet(ds, edi + 206);
loc_43e84: // 0160:43e84
    if (ah)
        goto loc_43e8e;
    ah = memoryAGet(ds, edi + 207);
loc_43e8e: // 0160:43e8e
    memoryASet16(ds, edi + 206, ax);
loc_43e95: // 0160:43e95
    eax = memoryAGet32(ds, esi + 208);
    if (!eax)
        goto loc_43ee6;
    if (!ax)
        goto loc_43ebf;
    if (al)
        goto loc_43eae;
    al = memoryAGet(ds, edi + 208);
loc_43eae: // 0160:43eae
    if (ah)
        goto loc_43eb8;
    ah = memoryAGet(ds, edi + 209);
loc_43eb8: // 0160:43eb8
    memoryASet16(ds, edi + 208, ax);
loc_43ebf: // 0160:43ebf
    ax = memoryAGet16(ds, esi + 210);
    if (!ax)
        goto loc_43ee6;
    if (al)
        goto loc_43ed5;
    al = memoryAGet(ds, edi + 210);
loc_43ed5: // 0160:43ed5
    if (ah)
        goto loc_43edf;
    ah = memoryAGet(ds, edi + 211);
loc_43edf: // 0160:43edf
    memoryASet16(ds, edi + 210, ax);
loc_43ee6: // 0160:43ee6
    eax = memoryAGet32(ds, esi + 212);
    if (!eax)
        goto loc_43f37;
    if (!ax)
        goto loc_43f10;
    if (al)
        goto loc_43eff;
    al = memoryAGet(ds, edi + 212);
loc_43eff: // 0160:43eff
    if (ah)
        goto loc_43f09;
    ah = memoryAGet(ds, edi + 213);
loc_43f09: // 0160:43f09
    memoryASet16(ds, edi + 212, ax);
loc_43f10: // 0160:43f10
    ax = memoryAGet16(ds, esi + 214);
    if (!ax)
        goto loc_43f37;
    if (al)
        goto loc_43f26;
    al = memoryAGet(ds, edi + 214);
loc_43f26: // 0160:43f26
    if (ah)
        goto loc_43f30;
    ah = memoryAGet(ds, edi + 215);
loc_43f30: // 0160:43f30
    memoryASet16(ds, edi + 214, ax);
loc_43f37: // 0160:43f37
    eax = memoryAGet32(ds, esi + 216);
    if (!eax)
        goto loc_43f88;
    if (!ax)
        goto loc_43f61;
    if (al)
        goto loc_43f50;
    al = memoryAGet(ds, edi + 216);
loc_43f50: // 0160:43f50
    if (ah)
        goto loc_43f5a;
    ah = memoryAGet(ds, edi + 217);
loc_43f5a: // 0160:43f5a
    memoryASet16(ds, edi + 216, ax);
loc_43f61: // 0160:43f61
    ax = memoryAGet16(ds, esi + 218);
    if (!ax)
        goto loc_43f88;
    if (al)
        goto loc_43f77;
    al = memoryAGet(ds, edi + 218);
loc_43f77: // 0160:43f77
    if (ah)
        goto loc_43f81;
    ah = memoryAGet(ds, edi + 219);
loc_43f81: // 0160:43f81
    memoryASet16(ds, edi + 218, ax);
loc_43f88: // 0160:43f88
    eax = memoryAGet32(ds, esi + 220);
    if (!eax)
        goto loc_43fd9;
    if (!ax)
        goto loc_43fb2;
    if (al)
        goto loc_43fa1;
    al = memoryAGet(ds, edi + 220);
loc_43fa1: // 0160:43fa1
    if (ah)
        goto loc_43fab;
    ah = memoryAGet(ds, edi + 221);
loc_43fab: // 0160:43fab
    memoryASet16(ds, edi + 220, ax);
loc_43fb2: // 0160:43fb2
    ax = memoryAGet16(ds, esi + 222);
    if (!ax)
        goto loc_43fd9;
    if (al)
        goto loc_43fc8;
    al = memoryAGet(ds, edi + 222);
loc_43fc8: // 0160:43fc8
    if (ah)
        goto loc_43fd2;
    ah = memoryAGet(ds, edi + 223);
loc_43fd2: // 0160:43fd2
    memoryASet16(ds, edi + 222, ax);
loc_43fd9: // 0160:43fd9
    eax = memoryAGet32(ds, esi + 224);
    if (!eax)
        goto loc_4402a;
    if (!ax)
        goto loc_44003;
    if (al)
        goto loc_43ff2;
    al = memoryAGet(ds, edi + 224);
loc_43ff2: // 0160:43ff2
    if (ah)
        goto loc_43ffc;
    ah = memoryAGet(ds, edi + 225);
loc_43ffc: // 0160:43ffc
    memoryASet16(ds, edi + 224, ax);
loc_44003: // 0160:44003
    ax = memoryAGet16(ds, esi + 226);
    if (!ax)
        goto loc_4402a;
    if (al)
        goto loc_44019;
    al = memoryAGet(ds, edi + 226);
loc_44019: // 0160:44019
    if (ah)
        goto loc_44023;
    ah = memoryAGet(ds, edi + 227);
loc_44023: // 0160:44023
    memoryASet16(ds, edi + 226, ax);
loc_4402a: // 0160:4402a
    eax = memoryAGet32(ds, esi + 228);
    if (!eax)
        goto loc_4407b;
    if (!ax)
        goto loc_44054;
    if (al)
        goto loc_44043;
    al = memoryAGet(ds, edi + 228);
loc_44043: // 0160:44043
    if (ah)
        goto loc_4404d;
    ah = memoryAGet(ds, edi + 229);
loc_4404d: // 0160:4404d
    memoryASet16(ds, edi + 228, ax);
loc_44054: // 0160:44054
    ax = memoryAGet16(ds, esi + 230);
    if (!ax)
        goto loc_4407b;
    if (al)
        goto loc_4406a;
    al = memoryAGet(ds, edi + 230);
loc_4406a: // 0160:4406a
    if (ah)
        goto loc_44074;
    ah = memoryAGet(ds, edi + 231);
loc_44074: // 0160:44074
    memoryASet16(ds, edi + 230, ax);
loc_4407b: // 0160:4407b
    eax = memoryAGet32(ds, esi + 232);
    if (!eax)
        goto loc_440cc;
    if (!ax)
        goto loc_440a5;
    if (al)
        goto loc_44094;
    al = memoryAGet(ds, edi + 232);
loc_44094: // 0160:44094
    if (ah)
        goto loc_4409e;
    ah = memoryAGet(ds, edi + 233);
loc_4409e: // 0160:4409e
    memoryASet16(ds, edi + 232, ax);
loc_440a5: // 0160:440a5
    ax = memoryAGet16(ds, esi + 234);
    if (!ax)
        goto loc_440cc;
    if (al)
        goto loc_440bb;
    al = memoryAGet(ds, edi + 234);
loc_440bb: // 0160:440bb
    if (ah)
        goto loc_440c5;
    ah = memoryAGet(ds, edi + 235);
loc_440c5: // 0160:440c5
    memoryASet16(ds, edi + 234, ax);
loc_440cc: // 0160:440cc
    eax = memoryAGet32(ds, esi + 236);
    if (!eax)
        goto loc_4411d;
    if (!ax)
        goto loc_440f6;
    if (al)
        goto loc_440e5;
    al = memoryAGet(ds, edi + 236);
loc_440e5: // 0160:440e5
    if (ah)
        goto loc_440ef;
    ah = memoryAGet(ds, edi + 237);
loc_440ef: // 0160:440ef
    memoryASet16(ds, edi + 236, ax);
loc_440f6: // 0160:440f6
    ax = memoryAGet16(ds, esi + 238);
    if (!ax)
        goto loc_4411d;
    if (al)
        goto loc_4410c;
    al = memoryAGet(ds, edi + 238);
loc_4410c: // 0160:4410c
    if (ah)
        goto loc_44116;
    ah = memoryAGet(ds, edi + 239);
loc_44116: // 0160:44116
    memoryASet16(ds, edi + 238, ax);
loc_4411d: // 0160:4411d
    eax = memoryAGet32(ds, esi + 240);
    if (!eax)
        goto loc_4416e;
    if (!ax)
        goto loc_44147;
    if (al)
        goto loc_44136;
    al = memoryAGet(ds, edi + 240);
loc_44136: // 0160:44136
    if (ah)
        goto loc_44140;
    ah = memoryAGet(ds, edi + 241);
loc_44140: // 0160:44140
    memoryASet16(ds, edi + 240, ax);
loc_44147: // 0160:44147
    ax = memoryAGet16(ds, esi + 242);
    if (!ax)
        goto loc_4416e;
    if (al)
        goto loc_4415d;
    al = memoryAGet(ds, edi + 242);
loc_4415d: // 0160:4415d
    if (ah)
        goto loc_44167;
    ah = memoryAGet(ds, edi + 243);
loc_44167: // 0160:44167
    memoryASet16(ds, edi + 242, ax);
loc_4416e: // 0160:4416e
    eax = memoryAGet32(ds, esi + 244);
    if (!eax)
        goto loc_441bf;
    if (!ax)
        goto loc_44198;
    if (al)
        goto loc_44187;
    al = memoryAGet(ds, edi + 244);
loc_44187: // 0160:44187
    if (ah)
        goto loc_44191;
    ah = memoryAGet(ds, edi + 245);
loc_44191: // 0160:44191
    memoryASet16(ds, edi + 244, ax);
loc_44198: // 0160:44198
    ax = memoryAGet16(ds, esi + 246);
    if (!ax)
        goto loc_441bf;
    if (al)
        goto loc_441ae;
    al = memoryAGet(ds, edi + 246);
loc_441ae: // 0160:441ae
    if (ah)
        goto loc_441b8;
    ah = memoryAGet(ds, edi + 247);
loc_441b8: // 0160:441b8
    memoryASet16(ds, edi + 246, ax);
loc_441bf: // 0160:441bf
    eax = memoryAGet32(ds, esi + 248);
    if (!eax)
        goto loc_44210;
    if (!ax)
        goto loc_441e9;
    if (al)
        goto loc_441d8;
    al = memoryAGet(ds, edi + 248);
loc_441d8: // 0160:441d8
    if (ah)
        goto loc_441e2;
    ah = memoryAGet(ds, edi + 249);
loc_441e2: // 0160:441e2
    memoryASet16(ds, edi + 248, ax);
loc_441e9: // 0160:441e9
    ax = memoryAGet16(ds, esi + 250);
    if (!ax)
        goto loc_44210;
    if (al)
        goto loc_441ff;
    al = memoryAGet(ds, edi + 250);
loc_441ff: // 0160:441ff
    if (ah)
        goto loc_44209;
    ah = memoryAGet(ds, edi + 251);
loc_44209: // 0160:44209
    memoryASet16(ds, edi + 250, ax);
loc_44210: // 0160:44210
    eax = memoryAGet32(ds, esi + 252);
    if (!eax)
        goto loc_44261;
    if (!ax)
        goto loc_4423a;
    if (al)
        goto loc_44229;
    al = memoryAGet(ds, edi + 252);
loc_44229: // 0160:44229
    if (ah)
        goto loc_44233;
    ah = memoryAGet(ds, edi + 253);
loc_44233: // 0160:44233
    memoryASet16(ds, edi + 252, ax);
loc_4423a: // 0160:4423a
    ax = memoryAGet16(ds, esi + 254);
    if (!ax)
        goto loc_44261;
    if (al)
        goto loc_44250;
    al = memoryAGet(ds, edi + 254);
loc_44250: // 0160:44250
    if (ah)
        goto loc_4425a;
    ah = memoryAGet(ds, edi + 255);
loc_4425a: // 0160:4425a
    memoryASet16(ds, edi + 254, ax);
loc_44261: // 0160:44261
    eax = memoryAGet32(ds, esi + 256);
    if (!eax)
        goto loc_442b2;
    if (!ax)
        goto loc_4428b;
    if (al)
        goto loc_4427a;
    al = memoryAGet(ds, edi + 256);
loc_4427a: // 0160:4427a
    if (ah)
        goto loc_44284;
    ah = memoryAGet(ds, edi + 257);
loc_44284: // 0160:44284
    memoryASet16(ds, edi + 256, ax);
loc_4428b: // 0160:4428b
    ax = memoryAGet16(ds, esi + 258);
    if (!ax)
        goto loc_442b2;
    if (al)
        goto loc_442a1;
    al = memoryAGet(ds, edi + 258);
loc_442a1: // 0160:442a1
    if (ah)
        goto loc_442ab;
    ah = memoryAGet(ds, edi + 259);
loc_442ab: // 0160:442ab
    memoryASet16(ds, edi + 258, ax);
loc_442b2: // 0160:442b2
    eax = memoryAGet32(ds, esi + 260);
    if (!eax)
        goto loc_44303;
    if (!ax)
        goto loc_442dc;
    if (al)
        goto loc_442cb;
    al = memoryAGet(ds, edi + 260);
loc_442cb: // 0160:442cb
    if (ah)
        goto loc_442d5;
    ah = memoryAGet(ds, edi + 261);
loc_442d5: // 0160:442d5
    memoryASet16(ds, edi + 260, ax);
loc_442dc: // 0160:442dc
    ax = memoryAGet16(ds, esi + 262);
    if (!ax)
        goto loc_44303;
    if (al)
        goto loc_442f2;
    al = memoryAGet(ds, edi + 262);
loc_442f2: // 0160:442f2
    if (ah)
        goto loc_442fc;
    ah = memoryAGet(ds, edi + 263);
loc_442fc: // 0160:442fc
    memoryASet16(ds, edi + 262, ax);
loc_44303: // 0160:44303
    eax = memoryAGet32(ds, esi + 264);
    if (!eax)
        goto loc_44354;
    if (!ax)
        goto loc_4432d;
    if (al)
        goto loc_4431c;
    al = memoryAGet(ds, edi + 264);
loc_4431c: // 0160:4431c
    if (ah)
        goto loc_44326;
    ah = memoryAGet(ds, edi + 265);
loc_44326: // 0160:44326
    memoryASet16(ds, edi + 264, ax);
loc_4432d: // 0160:4432d
    ax = memoryAGet16(ds, esi + 266);
    if (!ax)
        goto loc_44354;
    if (al)
        goto loc_44343;
    al = memoryAGet(ds, edi + 266);
loc_44343: // 0160:44343
    if (ah)
        goto loc_4434d;
    ah = memoryAGet(ds, edi + 267);
loc_4434d: // 0160:4434d
    memoryASet16(ds, edi + 266, ax);
loc_44354: // 0160:44354
    eax = memoryAGet32(ds, esi + 268);
    if (!eax)
        goto loc_443a5;
    if (!ax)
        goto loc_4437e;
    if (al)
        goto loc_4436d;
    al = memoryAGet(ds, edi + 268);
loc_4436d: // 0160:4436d
    if (ah)
        goto loc_44377;
    ah = memoryAGet(ds, edi + 269);
loc_44377: // 0160:44377
    memoryASet16(ds, edi + 268, ax);
loc_4437e: // 0160:4437e
    ax = memoryAGet16(ds, esi + 270);
    if (!ax)
        goto loc_443a5;
    if (al)
        goto loc_44394;
    al = memoryAGet(ds, edi + 270);
loc_44394: // 0160:44394
    if (ah)
        goto loc_4439e;
    ah = memoryAGet(ds, edi + 271);
loc_4439e: // 0160:4439e
    memoryASet16(ds, edi + 270, ax);
loc_443a5: // 0160:443a5
    eax = memoryAGet32(ds, esi + 272);
    if (!eax)
        goto loc_443f6;
    if (!ax)
        goto loc_443cf;
    if (al)
        goto loc_443be;
    al = memoryAGet(ds, edi + 272);
loc_443be: // 0160:443be
    if (ah)
        goto loc_443c8;
    ah = memoryAGet(ds, edi + 273);
loc_443c8: // 0160:443c8
    memoryASet16(ds, edi + 272, ax);
loc_443cf: // 0160:443cf
    ax = memoryAGet16(ds, esi + 274);
    if (!ax)
        goto loc_443f6;
    if (al)
        goto loc_443e5;
    al = memoryAGet(ds, edi + 274);
loc_443e5: // 0160:443e5
    if (ah)
        goto loc_443ef;
    ah = memoryAGet(ds, edi + 275);
loc_443ef: // 0160:443ef
    memoryASet16(ds, edi + 274, ax);
loc_443f6: // 0160:443f6
    eax = memoryAGet32(ds, esi + 276);
    if (!eax)
        goto loc_44447;
    if (!ax)
        goto loc_44420;
    if (al)
        goto loc_4440f;
    al = memoryAGet(ds, edi + 276);
loc_4440f: // 0160:4440f
    if (ah)
        goto loc_44419;
    ah = memoryAGet(ds, edi + 277);
loc_44419: // 0160:44419
    memoryASet16(ds, edi + 276, ax);
loc_44420: // 0160:44420
    ax = memoryAGet16(ds, esi + 278);
    if (!ax)
        goto loc_44447;
    if (al)
        goto loc_44436;
    al = memoryAGet(ds, edi + 278);
loc_44436: // 0160:44436
    if (ah)
        goto loc_44440;
    ah = memoryAGet(ds, edi + 279);
loc_44440: // 0160:44440
    memoryASet16(ds, edi + 278, ax);
loc_44447: // 0160:44447
    eax = memoryAGet32(ds, esi + 280);
    if (!eax)
        goto loc_44498;
    if (!ax)
        goto loc_44471;
    if (al)
        goto loc_44460;
    al = memoryAGet(ds, edi + 280);
loc_44460: // 0160:44460
    if (ah)
        goto loc_4446a;
    ah = memoryAGet(ds, edi + 281);
loc_4446a: // 0160:4446a
    memoryASet16(ds, edi + 280, ax);
loc_44471: // 0160:44471
    ax = memoryAGet16(ds, esi + 282);
    if (!ax)
        goto loc_44498;
    if (al)
        goto loc_44487;
    al = memoryAGet(ds, edi + 282);
loc_44487: // 0160:44487
    if (ah)
        goto loc_44491;
    ah = memoryAGet(ds, edi + 283);
loc_44491: // 0160:44491
    memoryASet16(ds, edi + 282, ax);
loc_44498: // 0160:44498
    eax = memoryAGet32(ds, esi + 284);
    if (!eax)
        goto loc_444e9;
    if (!ax)
        goto loc_444c2;
    if (al)
        goto loc_444b1;
    al = memoryAGet(ds, edi + 284);
loc_444b1: // 0160:444b1
    if (ah)
        goto loc_444bb;
    ah = memoryAGet(ds, edi + 285);
loc_444bb: // 0160:444bb
    memoryASet16(ds, edi + 284, ax);
loc_444c2: // 0160:444c2
    ax = memoryAGet16(ds, esi + 286);
    if (!ax)
        goto loc_444e9;
    if (al)
        goto loc_444d8;
    al = memoryAGet(ds, edi + 286);
loc_444d8: // 0160:444d8
    if (ah)
        goto loc_444e2;
    ah = memoryAGet(ds, edi + 287);
loc_444e2: // 0160:444e2
    memoryASet16(ds, edi + 286, ax);
loc_444e9: // 0160:444e9
    eax = memoryAGet32(ds, esi + 288);
    if (!eax)
        goto loc_4453a;
    if (!ax)
        goto loc_44513;
    if (al)
        goto loc_44502;
    al = memoryAGet(ds, edi + 288);
loc_44502: // 0160:44502
    if (ah)
        goto loc_4450c;
    ah = memoryAGet(ds, edi + 289);
loc_4450c: // 0160:4450c
    memoryASet16(ds, edi + 288, ax);
loc_44513: // 0160:44513
    ax = memoryAGet16(ds, esi + 290);
    if (!ax)
        goto loc_4453a;
    if (al)
        goto loc_44529;
    al = memoryAGet(ds, edi + 290);
loc_44529: // 0160:44529
    if (ah)
        goto loc_44533;
    ah = memoryAGet(ds, edi + 291);
loc_44533: // 0160:44533
    memoryASet16(ds, edi + 290, ax);
loc_4453a: // 0160:4453a
    eax = memoryAGet32(ds, esi + 292);
    if (!eax)
        goto loc_4458b;
    if (!ax)
        goto loc_44564;
    if (al)
        goto loc_44553;
    al = memoryAGet(ds, edi + 292);
loc_44553: // 0160:44553
    if (ah)
        goto loc_4455d;
    ah = memoryAGet(ds, edi + 293);
loc_4455d: // 0160:4455d
    memoryASet16(ds, edi + 292, ax);
loc_44564: // 0160:44564
    ax = memoryAGet16(ds, esi + 294);
    if (!ax)
        goto loc_4458b;
    if (al)
        goto loc_4457a;
    al = memoryAGet(ds, edi + 294);
loc_4457a: // 0160:4457a
    if (ah)
        goto loc_44584;
    ah = memoryAGet(ds, edi + 295);
loc_44584: // 0160:44584
    memoryASet16(ds, edi + 294, ax);
loc_4458b: // 0160:4458b
    eax = memoryAGet32(ds, esi + 296);
    if (!eax)
        goto loc_445dc;
    if (!ax)
        goto loc_445b5;
    if (al)
        goto loc_445a4;
    al = memoryAGet(ds, edi + 296);
loc_445a4: // 0160:445a4
    if (ah)
        goto loc_445ae;
    ah = memoryAGet(ds, edi + 297);
loc_445ae: // 0160:445ae
    memoryASet16(ds, edi + 296, ax);
loc_445b5: // 0160:445b5
    ax = memoryAGet16(ds, esi + 298);
    if (!ax)
        goto loc_445dc;
    if (al)
        goto loc_445cb;
    al = memoryAGet(ds, edi + 298);
loc_445cb: // 0160:445cb
    if (ah)
        goto loc_445d5;
    ah = memoryAGet(ds, edi + 299);
loc_445d5: // 0160:445d5
    memoryASet16(ds, edi + 298, ax);
loc_445dc: // 0160:445dc
    eax = memoryAGet32(ds, esi + 300);
    if (!eax)
        goto loc_4462d;
    if (!ax)
        goto loc_44606;
    if (al)
        goto loc_445f5;
    al = memoryAGet(ds, edi + 300);
loc_445f5: // 0160:445f5
    if (ah)
        goto loc_445ff;
    ah = memoryAGet(ds, edi + 301);
loc_445ff: // 0160:445ff
    memoryASet16(ds, edi + 300, ax);
loc_44606: // 0160:44606
    ax = memoryAGet16(ds, esi + 302);
    if (!ax)
        goto loc_4462d;
    if (al)
        goto loc_4461c;
    al = memoryAGet(ds, edi + 302);
loc_4461c: // 0160:4461c
    if (ah)
        goto loc_44626;
    ah = memoryAGet(ds, edi + 303);
loc_44626: // 0160:44626
    memoryASet16(ds, edi + 302, ax);
loc_4462d: // 0160:4462d
    eax = memoryAGet32(ds, esi + 304);
    if (!eax)
        goto loc_4467e;
    if (!ax)
        goto loc_44657;
    if (al)
        goto loc_44646;
    al = memoryAGet(ds, edi + 304);
loc_44646: // 0160:44646
    if (ah)
        goto loc_44650;
    ah = memoryAGet(ds, edi + 305);
loc_44650: // 0160:44650
    memoryASet16(ds, edi + 304, ax);
loc_44657: // 0160:44657
    ax = memoryAGet16(ds, esi + 306);
    if (!ax)
        goto loc_4467e;
    if (al)
        goto loc_4466d;
    al = memoryAGet(ds, edi + 306);
loc_4466d: // 0160:4466d
    if (ah)
        goto loc_44677;
    ah = memoryAGet(ds, edi + 307);
loc_44677: // 0160:44677
    memoryASet16(ds, edi + 306, ax);
loc_4467e: // 0160:4467e
    eax = memoryAGet32(ds, esi + 308);
    if (!eax)
        goto loc_446cf;
    if (!ax)
        goto loc_446a8;
    if (al)
        goto loc_44697;
    al = memoryAGet(ds, edi + 308);
loc_44697: // 0160:44697
    if (ah)
        goto loc_446a1;
    ah = memoryAGet(ds, edi + 309);
loc_446a1: // 0160:446a1
    memoryASet16(ds, edi + 308, ax);
loc_446a8: // 0160:446a8
    ax = memoryAGet16(ds, esi + 310);
    if (!ax)
        goto loc_446cf;
    if (al)
        goto loc_446be;
    al = memoryAGet(ds, edi + 310);
loc_446be: // 0160:446be
    if (ah)
        goto loc_446c8;
    ah = memoryAGet(ds, edi + 311);
loc_446c8: // 0160:446c8
    memoryASet16(ds, edi + 310, ax);
loc_446cf: // 0160:446cf
    eax = memoryAGet32(ds, esi + 312);
    if (!eax)
        goto loc_44720;
    if (!ax)
        goto loc_446f9;
    if (al)
        goto loc_446e8;
    al = memoryAGet(ds, edi + 312);
loc_446e8: // 0160:446e8
    if (ah)
        goto loc_446f2;
    ah = memoryAGet(ds, edi + 313);
loc_446f2: // 0160:446f2
    memoryASet16(ds, edi + 312, ax);
loc_446f9: // 0160:446f9
    ax = memoryAGet16(ds, esi + 314);
    if (!ax)
        goto loc_44720;
    if (al)
        goto loc_4470f;
    al = memoryAGet(ds, edi + 314);
loc_4470f: // 0160:4470f
    if (ah)
        goto loc_44719;
    ah = memoryAGet(ds, edi + 315);
loc_44719: // 0160:44719
    memoryASet16(ds, edi + 314, ax);
loc_44720: // 0160:44720
    eax = memoryAGet32(ds, esi + 316);
    if (!eax)
        goto loc_44771;
    if (!ax)
        goto loc_4474a;
    if (al)
        goto loc_44739;
    al = memoryAGet(ds, edi + 316);
loc_44739: // 0160:44739
    if (ah)
        goto loc_44743;
    ah = memoryAGet(ds, edi + 317);
loc_44743: // 0160:44743
    memoryASet16(ds, edi + 316, ax);
loc_4474a: // 0160:4474a
    ax = memoryAGet16(ds, esi + 318);
    if (!ax)
        goto loc_44771;
    if (al)
        goto loc_44760;
    al = memoryAGet(ds, edi + 318);
loc_44760: // 0160:44760
    if (ah)
        goto loc_4476a;
    ah = memoryAGet(ds, edi + 319);
loc_4476a: // 0160:4476a
    memoryASet16(ds, edi + 318, ax);
loc_44771: // 0160:44771
    esi += 0x00000140;
    edi += 0x00000140;
    ecx--;
    if (ecx)
        goto loc_43124;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_44786() // 0160:44786 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 480);
    memoryASet32(ds, edi + 640, eax);
    eax = memoryAGet32(ds, esi + 484);
    memoryASet32(ds, edi + 644, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 1280, eax);
    eax = memoryAGet32(ds, esi + 964);
    memoryASet32(ds, edi + 1284, eax);
    eax = memoryAGet32(ds, esi + 1440);
    memoryASet32(ds, edi + 1920, eax);
    eax = memoryAGet32(ds, esi + 1444);
    memoryASet32(ds, edi + 1924, eax);
    eax = memoryAGet32(ds, esi + 1920);
    memoryASet32(ds, edi + 2560, eax);
    eax = memoryAGet32(ds, esi + 1924);
    memoryASet32(ds, edi + 2564, eax);
    eax = memoryAGet32(ds, esi + 2400);
    memoryASet32(ds, edi + 3200, eax);
    eax = memoryAGet32(ds, esi + 2404);
    memoryASet32(ds, edi + 3204, eax);
    eax = memoryAGet32(ds, esi + 2880);
    memoryASet32(ds, edi + 3840, eax);
    eax = memoryAGet32(ds, esi + 2884);
    memoryASet32(ds, edi + 3844, eax);
    eax = memoryAGet32(ds, esi + 3360);
    memoryASet32(ds, edi + 4480, eax);
    eax = memoryAGet32(ds, esi + 3364);
    memoryASet32(ds, edi + 4484, eax);
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_4483f() // 0160:4483f +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx);
    push32(etx); push32(ebp); push32(esi); push32(edi);
    esi = eax;
    edi = edx;
    if ((int32_t)ebx <= (int32_t)0x00000000)
        goto loc_448ec;
    if (ecx)
        goto loc_448ec;
loc_44855: // 0160:44855
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_4486d;
    if (al)
        goto loc_44863;
    al = memoryAGet(ds, edi);
loc_44863: // 0160:44863
    if (ah)
        goto loc_4486a;
    ah = memoryAGet(ds, edi + 1);
loc_4486a: // 0160:4486a
    memoryASet16(ds, edi, ax);
loc_4486d: // 0160:4486d
    ax = memoryAGet16(ds, esi + 2);
    if (!ax)
        goto loc_44888;
    if (al)
        goto loc_4487d;
    al = memoryAGet(ds, edi + 2);
loc_4487d: // 0160:4487d
    if (ah)
        goto loc_44884;
    ah = memoryAGet(ds, edi + 3);
loc_44884: // 0160:44884
    memoryASet16(ds, edi + 2, ax);
loc_44888: // 0160:44888
    ax = memoryAGet16(ds, esi + 4);
    if (!ax)
        goto loc_448a3;
    if (al)
        goto loc_44898;
    al = memoryAGet(ds, edi + 4);
loc_44898: // 0160:44898
    if (ah)
        goto loc_4489f;
    ah = memoryAGet(ds, edi + 5);
loc_4489f: // 0160:4489f
    memoryASet16(ds, edi + 4, ax);
loc_448a3: // 0160:448a3
    ax = memoryAGet16(ds, esi + 6);
    if (!ax)
        goto loc_448be;
    if (al)
        goto loc_448b3;
    al = memoryAGet(ds, edi + 6);
loc_448b3: // 0160:448b3
    if (ah)
        goto loc_448ba;
    ah = memoryAGet(ds, edi + 7);
loc_448ba: // 0160:448ba
    memoryASet16(ds, edi + 6, ax);
loc_448be: // 0160:448be
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_448d9;
    if (al)
        goto loc_448ce;
    al = memoryAGet(ds, edi + 8);
loc_448ce: // 0160:448ce
    if (ah)
        goto loc_448d5;
    ah = memoryAGet(ds, edi + 9);
loc_448d5: // 0160:448d5
    memoryASet16(ds, edi + 8, ax);
loc_448d9: // 0160:448d9
    esi += 0x00000140;
    edi += 0x00000140;
    ebx--;
    if (ebx)
        goto loc_44855;
loc_448ec: // 0160:448ec
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4;
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_448ee() // 0160:448ee +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    bl = dl;
    edx = memoryAGet32(ds, eax);
    ecx = edx + 1;
    memoryASet32(ds, eax, ecx);
    memoryASet(ds, edx, bl);
    memoryASet32(ds, eax + 16, memoryAGet32(ds, eax + 16) + 1);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44901() // 0160:44901 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    eax = esp + 28;
    edx = memoryAGet32(ds, esp + 24);
    ebx = esp;
    ecx = 0x000448ee;
    memoryASet32(ds, esp, eax);
    eax = memoryAGet32(ds, esp + 20);
    sub_45afb();
    edx = memoryAGet32(ds, esp + 20);
    memoryASet(ds, edx + eax, 0x00);
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44931() // 0160:44931 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 16);
    ebx = esp + 20;
    sub_464f5();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44950() // 0160:44950 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if (eax == edx)
        goto loc_449c4;
loc_44958: // 0160:44958
    eax = memoryAGet32(ds, ebx);
    ecx = memoryAGet32(ds, edx);
    if (ecx != eax)
        goto loc_449c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_449c4;
    eax = memoryAGet32(ds, ebx + 4);
    ecx = memoryAGet32(ds, edx + 4);
    if (ecx != eax)
        goto loc_449c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_449c4;
    eax = memoryAGet32(ds, ebx + 8);
    ecx = memoryAGet32(ds, edx + 8);
    if (ecx != eax)
        goto loc_449c9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_449c4;
    eax = memoryAGet32(ds, ebx + 12);
    ecx = memoryAGet32(ds, edx + 12);
    if (ecx != eax)
        goto loc_449c9;
    ebx += 0x00000010;
    edx += 0x00000010;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (!eax)
        goto loc_44958;
loc_449c4: // 0160:449c4
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_449c9: // 0160:449c9
    flags.carry = al < cl;
    if (al != cl)
        goto loc_449ea;
    if (al == 0x00)
        goto loc_449c4;
    flags.carry = ah < ch;
    if (ah != ch)
        goto loc_449ea;
    if (ah == 0x00)
        goto loc_449c4;
    eax >>= 16;
    ecx >>= 16;
    flags.carry = al < cl;
    if (al != cl)
        goto loc_449ea;
    if (al == 0x00)
        goto loc_449c4;
    flags.carry = ah < ch;
loc_449ea: // 0160:449ea
    eax = -flags.carry;
    al |= 0x01;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_449f2() // 0160:449f2 +long
{
    esp -= 4;
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    push32(memoryAGet32(ds, esp));
    memoryASet(ds, esp + 1, 0x1f);
    fldcw(memoryAGet16(ds, esp));
    frndtint();
    fldcw(memoryAGet16(ds, esp + 4));
    esp = esp + 8;
    stop("stack_unbalanced");
    esp += 4;
}
void sub_44a0f() // 0160:44a0f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000024;
    edx = eax;
    eax = esp;
    sub_46503();
    if ((int32_t)eax < (int32_t)0x000001f4)
        goto loc_44a27;
    memoryASet32(ds, esp, memoryAGet32(ds, esp) + 1);
loc_44a27: // 0160:44a27
    eax = esp;
    sub_465c6();
    ebx = eax;
    if (!edx)
        goto loc_44a36;
    memoryASet32(ds, edx, eax);
loc_44a36: // 0160:44a36
    esp += 0x00000024;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44a3c()
{
  sub_44ab4();
}

void sub_44ab4() // 0160:44ab4 +long
{
    esp -= 4;
    flags.interrupts = 1;
    esp &= 0xfffffffc;
    ebx = esp;
    memoryASet32(ds, 0x5cdd0, ebx);
    memoryASet32(ds, 0x5cdbc, ebx);
    ax = 0x0024;
    memoryASet16(ds, 0x5cdc8, ax);
    ebx = 0x50484152;
    eax = 0;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x5cdf3, al);
    memoryASet(ds, 0x5cdf4, ah);
    ecx = eax;
    esi = 0;
    edi = 0x00000081;
    eax >>= 16;
    if (ax != 0x4458)
        goto loc_44b36;
    bl -= 0x30;
    al = bl;
    ah = 0x00;
    push32(eax);
    es = memoryAGet16(ds, 0x5cdc8);
    ebx = memoryAGet32(es, 0x005c);
    ebx += 0x00000fff;
    ebx &= 0xfffff000;
    memoryASet32(ds, 0x5cdbc, ebx);
    ebx >>= 12;
    ax = ds;
    es = eax;
    ah = 0x4a;
    interrupt(0x21);
    eax = pop32();
    bx = ds;
    cx = 0x002c;
    goto loc_44b6e;
loc_44b36: // 0160:44b36
    if (ax != 0x4243)
        goto loc_44b70;
    memoryASet32(ds, 0x5cd94, edx);
    esi = edx;
    edx = memoryAGet32(ds, esi + 28);
    ebx = esp;
    ebx -= edx;
    ah = 0x4a;
    interrupt(0x21);
    bx = ds;
    memoryASet16(ds, 0x5cdc8, ds);
    eax = memoryAGet32(ds, esi + 16);
    edi += eax;
    esi = 0;
    si = memoryAGet16(ds, eax + 44);
    esi <<= 4;
    cx = ds;
    al = 0x09;
    ah = 0x00;
loc_44b6e: // 0160:44b6e
    goto loc_44bc9;
loc_44b70: // 0160:44b70
    dx = 0x0078;
    ax = 0xff00;
    interrupt(0x21);
    if (al == 0x00)
        goto loc_44bb2;
    ax = gs;
    if (ax == 0x0000)
        goto loc_44b8d;
    memoryASet16(ds, 0x5cd98, ax);
loc_44b8d: // 0160:44b8d
    ax = 0x0006;
    bx = ds;
    interrupt(0x31);
    al = 0x01;
    ah = 0x00;
    dx |= cx;
    if (!dx)
        goto loc_44ba1;
    ah = 0x01;
loc_44ba1: // 0160:44ba1
    memoryASet16(ds, 0x5cdc8, es);
    cx = memoryPspGet16(es, 0x002c);
    goto loc_44bc9;
loc_44bb2: // 0160:44bb2
    dx = ds;
    cx = 0x0024;
    ds = ecx;
    cx = 0x002c;
    ds = edx;
    bx = 0x0017;
    al = 0x00;
    ah = 0x00;
loc_44bc9: // 0160:44bc9
    memoryASet(ds, 0x5cdea, al);
    memoryASet(ds, 0x5cdeb, ah);
    es = ebx;
    memoryASet16(es, 0x44d11, ds);
    memoryASet32(ds, 0x5cded, esi);
    memoryASet16(ds, 0x5cdf1, cx);
    push32(esi);
    es = memoryAGet16(ds, 0x5cdc8);
    edx = 0x0026f840;
    edx += 0x0000000f;
    dl &= 0xf0;
    ecx = 0;
    cl = memoryPspGet(es, edi + -1);
    flags.direction = 0;
    al = 0x20;
    for (flags.zero = 1; ecx != 0 && flags.zero; --ecx) scasb_inv<ES_EDI_PSP>(al);
    esi = edi + -1;
    edi = edx;
    bx = es;
    dx = ds;
    ds = ebx;
    es = edx;
    if (flags.zero)
        goto loc_44c1e;
    ecx++;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI_PSP>();
loc_44c1e: // 0160:44c1e
    al = 0;
    stosb<ES_EDI>(al);
    stosb<ES_EDI>(al);
    esi = pop32();
    edi--;
    push32(edi);
    push32(edx);
    ds = memoryAGet16(es, 0x5cdf1);
    ebp = 0;
loc_44c30: // 0160:44c30
    eax = memoryPspGet32(ds, esi);
    eax |= 0x20202020;
    if (eax != 0x37386f6e)
        goto loc_44c45;
    if (memoryAGet(ds, esi + 4) != 0x3d)
        goto loc_44c45;
    ebp++;
loc_44c45: // 0160:44c45
    al = lodsb<DS_ESI_PSP>();
    if (memoryPspGet(ds, esi) != 0x00)
        goto loc_44c45;
    if (memoryPspGet(ds, esi) != 0x00)
        goto loc_44c30;
    al = lodsb<DS_ESI_PSP>();
    esi++;
    esi++;
loc_44c53: // 0160:44c53
    movsb<ES_EDI, DS_ESI_PSP>();
    if (memoryPspGet(ds, esi) != 0x00)
        goto loc_44c53;
    ds = pop();
    esi = pop32();
    ebx = esp;
    memoryASet16(ds, 0x5cde8, bp);
    memoryASet32(ds, 0x5cdcc, edi);
    memoryASet32(ds, 0x5cdb8, ebx);
    ecx = 0x0026f840;
    edi = 0x0005d288;
    ecx -= edi;
    if (memoryAGet(ds, 0x5cdea) != 0x01)
        goto loc_44c94;
    if (ecx <= 0x00001000)
        goto loc_44c94;
    ecx = 0x00001000;
loc_44c94: // 0160:44c94
    dl = cl;
    ecx >>= 2;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    cl = dl;
    cl &= 0x03;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    eax = 0x0026f840;
    eax += 0x0000000f;
    al &= 0xf0;
    memoryASet32(ds, 0x5cdc0, eax);
    memoryASet32(ds, 0x5cdc4, esi);
    eax = 0x000000ff;
    sub_4676a();
    ebp = 0;
    sub_4671a();
    goto loc_44cf0;
    // gap 35 bytes
loc_44cf0: // 0160:44cf0
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_467b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_44ccd() // 0160:44ccd +long
{
    esp -= 4;
    push32(edx);
    push32(eax);
    edx = 0x00044ab0;
    ax = 0x3d01;
    interrupt(0x21);
    bx = ax;
    edx = pop32();
    esi = edx;
    flags.direction = 0;
loc_44ce1: // 0160:44ce1
    al = lodsb<DS_ESI>();
    if (al != 0x00)
        goto loc_44ce1;
    ecx = esi;
    ecx -= edx;
    ecx--;
    ah = 0x40;
    interrupt(0x21);
    eax = pop32();
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_467b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_44d14()
{
  sub_46820();
}

void sub_44d1e() // 0160:44d1e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000004;
    ebx = esp + 20;
    eax = 0x0005ce62;
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp, ebx);
    ebx = esp;
    sub_46b10();
    esp += 0x00000004;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44d40() // 0160:44d40 +long
{
    esp -= 4;
    esp += 4;
}
void sub_44d41() // 0160:44d41 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    switch (memoryAGet32(ds, 0x5cda0))
    {
        case 0x44d40: sub_44d40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x5cda0));
            stop("ind 0160:44d44");
    }
    switch (memoryAGet32(ds, 0x5cda4))
    {
        case 0x44d40: sub_44d40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x5cda4));
            stop("ind 0160:44d4a");
    }
    eax = edx;
    sub_44d59();
    edx = pop32();
    esp += 4;
}
void sub_44d59() // 0160:44d59 +long
{
    esp -= 4;
    goto loc_44d59;
loc_44ccb: // 0160:44ccb
    goto loc_44cf0;
    // gap 35 bytes
loc_44cf0: // 0160:44cf0
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_467b5();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
    // gap 84 bytes
loc_44d59: // 0160:44d59
    push32(edx);
    edx = eax;
    switch (memoryAGet32(ds, 0x5cda4))
    {
        case 0x44d40: sub_44d40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x5cda4));
            stop("ind 0160:44d5c");
    }
    switch (memoryAGet32(ds, 0x5cda8))
    {
        case 0x44d40: sub_44d40(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, 0x5cda8));
            stop("ind 0160:44d62");
    }
    eax = edx;
    goto loc_44ccb;
}
void sub_44d6f() // 0160:44d6f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = eax;
    al = cl;
    out8(dx, al);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44d97() // 0160:44d97 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ah = memoryAGet(ds, 0x5cdea);
    if (ah < 0x02)
        goto loc_44db4;
    if (ah > 0x08)
        goto loc_44db4;
    eax = 0x00002502;
    cl = bl;
    goto loc_44dc0;
loc_44db4: // 0160:44db4
    eax = ebx;
    eax &= 0x000000ff;
    cl = 0;
    ah |= 0x35;
loc_44dc0: // 0160:44dc0
    push(es);
    interrupt(0x21);
    edx = es;
    es = pop();
    eax = ebx;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44dcb() // 0160:44dcb +long
{
    esp -= 4;
    push32(edx);
    edx = ebx;
    bl = memoryAGet(ds, 0x5cdea);
    if (bl < 0x02)
        goto loc_44dec;
    if (bl > 0x08)
        goto loc_44dec;
    push(ds);
    ds = ecx;
    cl = al;
    al = 0x04;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
    return;
loc_44dec: // 0160:44dec
    push(ds);
    ds = ecx;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
}
void sub_44e00() // 0160:44e00 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_44e30;
loc_44e06: // 0160:44e06
    if (!(al & 0x03))
        goto loc_44e13;
    memoryASet(ds, eax, dl);
    eax++;
    edx = ror32(edx, 0x08);
    ecx--;
    if (ecx)
        goto loc_44e06;
loc_44e13: // 0160:44e13
    push32(ecx);
    ecx >>= 2;
    sub_44e37();
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_44e30;
    memoryASet(ds, eax, dl);
    ecx--;
    if (!ecx)
        goto loc_44e30;
    memoryASet(ds, eax + 1, dh);
    ecx--;
    if (!ecx)
        goto loc_44e30;
    memoryASet(ds, eax + 2, dl);
loc_44e30: // 0160:44e30
    esp += 4;
    return;
}
void sub_44e37() // 0160:44e37 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_44ea2;
loc_44e3b: // 0160:44e3b
    if (!(al & 0x1f))
        goto loc_44e47;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (ecx)
        goto loc_44e3b;
loc_44e47: // 0160:44e47
    push32(ecx);
    ecx >>= 2;
    if (!ecx)
        goto loc_44e87;
    ecx--;
    if (!ecx)
        goto loc_44e79;
loc_44e50: // 0160:44e50
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    ecx--;
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    if (!ecx)
        goto loc_44e76;
    memoryASet32(ds, eax + 16, edx);
    memoryASet32(ds, eax + 20, edx);
    ecx--;
    memoryASet32(ds, eax + 24, edx);
    memoryASet32(ds, eax + 28, edx);
    eax = eax + 32;
    if (ecx)
        goto loc_44e50;
    eax = eax + -16;
loc_44e76: // 0160:44e76
    eax = eax + 16;
loc_44e79: // 0160:44e79
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    eax = eax + 16;
loc_44e87: // 0160:44e87
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_44ea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_44ea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_44ea2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
loc_44ea2: // 0160:44ea2
    esp += 4;
    return;
}
void sub_44ea3() // 0160:44ea3 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = eax;
    eax = 0;
    al = memoryAGet(ds, edx);
    ebx = 0;
    sub_46b95();
    memoryASet(ds, esp, al);
    if (al == 0x72)
        goto loc_44ed6;
    if (al == 0x77)
        goto loc_44ed6;
    if (al == 0x61)
        goto loc_44ed6;
    eax = 0x00000009;
    sub_46ba8();
    eax = 0;
    goto loc_44f50;
loc_44ed6: // 0160:44ed6
    eax = ebx;
    cl = memoryAGet(ds, edx + 1);
    al |= 0x03;
    if (cl != 0x2b)
        goto loc_44f03;
    ebx = eax;
    cl = memoryAGet(ds, edx + 2);
    al |= 0x40;
    if (cl == 0x62)
        goto loc_44eff;
    if (cl == 0x74)
        goto loc_44f36;
    flags.zero = memoryAGet32(ds, 0x5d051) == 0x00000200;
loc_44efd: // 0160:44efd
    if (!flags.zero)
        goto loc_44f36;
loc_44eff: // 0160:44eff
    ebx = eax;
    goto loc_44f36;
loc_44f03: // 0160:44f03
    ecx = ebx;
    cl |= 0x40;
    if (memoryAGet(ds, edx + 1) != 0x62)
        goto loc_44f1c;
    al = memoryAGet(ds, edx + 2);
    ebx = ecx;
    if (al != 0x2b)
        goto loc_44f36;
    cl |= 0x03;
    goto loc_44f34;
loc_44f1c: // 0160:44f1c
    if (memoryAGet(ds, edx + 1) != 0x74)
        goto loc_44f28;
    flags.zero = memoryAGet(ds, edx + 2) == 0x2b;
    goto loc_44efd;
loc_44f28: // 0160:44f28
    if (memoryAGet32(ds, 0x5d051) != 0x00000200)
        goto loc_44f36;
loc_44f34: // 0160:44f34
    ebx = ecx;
loc_44f36: // 0160:44f36
    al = memoryAGet(ds, esp);
    if (al != 0x77)
        goto loc_44f42;
    bl |= 0x02;
    goto loc_44f4e;
loc_44f42: // 0160:44f42
    if (al != 0x61)
        goto loc_44f4b;
    bl |= 0x82;
    goto loc_44f4e;
loc_44f4b: // 0160:44f4b
    bl |= 0x01;
loc_44f4e: // 0160:44f4e
    eax = ebx;
loc_44f50: // 0160:44f50
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_44f57() // 0160:44f57 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xfc);
    eax = edx;
    sub_44ea3();
    edi = memoryAGet32(ds, ecx + 12);
    edi |= eax;
    eax = 0;
    memoryASet32(ds, ecx + 12, edi);
    al = memoryAGet(ds, edx);
    sub_46b95();
    dl = al;
    if (al != 0x72)
        goto loc_44f9e;
    dh = memoryAGet(ds, ecx + 12);
    eax = 0;
    if (!(dh & 0x02))
        goto loc_44f8c;
    eax = 0x00000002;
loc_44f8c: // 0160:44f8c
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_44f97;
    ah |= 0x02;
    goto loc_44f9a;
loc_44f97: // 0160:44f97
    ah |= 0x01;
loc_44f9a: // 0160:44f9a
    push32(0x00000000);
    goto loc_44fcb;
loc_44f9e: // 0160:44f9e
    al = !!(memoryAGet(ds, ecx + 12) & 0x01);
    eax &= 0x000000ff;
    eax += 0x00000021;
    if (dl != 0x61)
        goto loc_44fb6;
    al |= 0x10;
    goto loc_44fb8;
loc_44fb6: // 0160:44fb6
    al |= 0x40;
loc_44fb8: // 0160:44fb8
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_44fc3;
    ah |= 0x02;
    goto loc_44fc6;
loc_44fc3: // 0160:44fc3
    ah |= 0x01;
loc_44fc6: // 0160:44fc6
    push32(0x00000180);
loc_44fcb: // 0160:44fcb
    push32(ebx);
    push32(eax);
    push32(esi);
    sub_46c02();
    esp += 0x00000010;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet32(ds, ecx + 16) != 0xffffffff)
        goto loc_44feb;
    eax = ecx;
    sub_46ed4();
    eax = 0;
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_44feb: // 0160:44feb
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx + 8, 0x00000000);
    memoryASet32(ds, ecx + 20, 0x00000000);
    if (dl != 0x61)
        goto loc_45013;
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_45112();
loc_45013: // 0160:45013
    eax = ecx;
    sub_46f2b();
    eax = ecx;
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4501f() // 0160:4501f +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = 0;
    sub_46e2c();
    ecx = eax;
    if (!eax)
        goto loc_45037;
    eax = esi;
    sub_44f57();
loc_45037: // 0160:45037
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4503a() // 0160:4503a +long
{
    esp -= 4;
    push32(ebx);
    ebx = 0;
    sub_4501f();
    ebx = pop32();
    esp += 4;
}
void sub_450d0() // 0160:450d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) & 0xef);
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, edx + 4))
        goto loc_450fc;
    ebx = memoryAGet32(ds, edx + 8);
    ecx = memoryAGet32(ds, edx);
    ebx -= ecx;
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_450fc;
    edi = memoryAGet32(ds, edx + 4);
    esi = ecx + eax;
    edi -= eax;
    memoryASet32(ds, edx, esi);
    eax = 0;
    memoryASet32(ds, edx + 4, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_450fc: // 0160:450fc
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_45112() // 0160:45112 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if (!(memoryAGet(ds, eax + 12) & 0x06))
        goto loc_4517a;
    if (!(memoryAGet(ds, ecx + 13) & 0x10))
        goto loc_4514b;
    eax = ecx;
    sub_46f5c();
    if (!eax)
        goto loc_4515f;
    if (ebx)
        goto loc_45142;
    if ((int32_t)esi >= 0)
        goto loc_45142;
loc_45138: // 0160:45138
    eax = 0x00000009;
    sub_46ba8();
loc_45142: // 0160:45142
    eax = 0xffffffff;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_4514b: // 0160:4514b
    if (ebx != 0x00000001)
        goto loc_45153;
    esi -= memoryAGet32(ds, ecx + 4);
loc_45153: // 0160:45153
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
loc_4515f: // 0160:4515f
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xeb);
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_4701b();
    if (eax != 0xffffffff)
        goto loc_45208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_4517a: // 0160:4517a
    if (ebx < 0x00000001)
        goto loc_45188;
    if (ebx <= 0x00000001)
        goto loc_4518e;
    if (ebx == 0x00000002)
        goto loc_451e4;
    goto loc_45138;
loc_45188: // 0160:45188
    if (!ebx)
        goto loc_451b3;
    goto loc_45138;
loc_4518e: // 0160:4518e
    eax = edx;
    edx = ecx;
    edi = memoryAGet32(ds, ecx + 4);
    sub_450d0();
    if (!eax)
        goto loc_45208;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    edx -= edi;
    sub_4701b();
    if (eax != 0xffffffff)
        goto loc_45208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_451b3: // 0160:451b3
    eax = memoryAGet32(ds, ecx + 16);
    sub_4705c();
    edx = memoryAGet32(ds, ecx + 4);
    edi = esi;
    eax -= edx;
    edi -= eax;
    edx = ecx;
    eax = edi;
    sub_450d0();
    if (!eax)
        goto loc_45208;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_4701b();
    if (eax != 0xffffffff)
        goto loc_45208;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_451e4: // 0160:451e4
    eax = memoryAGet32(ds, ecx + 8);
    dl = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx, eax);
    dl &= 0xef;
    eax = memoryAGet32(ds, ecx + 16);
    memoryASet(ds, ecx + 12, dl);
    edx = esi;
    memoryASet32(ds, ecx + 4, 0x00000000);
    sub_4701b();
    if (eax == 0xffffffff)
        goto loc_4520a;
loc_45208: // 0160:45208
    eax = 0;
loc_4520a: // 0160:4520a
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4520e() // 0160:4520e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, eax + 16);
    sub_4705c();
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_4523a;
    ecx = memoryAGet32(ds, edx + 4);
    if (!ecx)
        goto loc_4523a;
    if (!(memoryAGet(ds, edx + 13) & 0x10))
        goto loc_45236;
    eax = ecx + ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_45236: // 0160:45236
    eax = ebx;
    eax -= ecx;
loc_4523a: // 0160:4523a
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4523e() // 0160:4523e +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x26f77c);
loc_45247: // 0160:45247
    if (eax)
        goto loc_45253;
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_45253: // 0160:45253
    ebx = memoryAGet32(ds, eax + 4);
    if (edx == ebx)
        goto loc_4525e;
    eax = memoryAGet32(ds, eax);
    goto loc_45247;
loc_4525e: // 0160:4525e
    edx = 0x00000001;
    eax = ebx;
    sub_4526d();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4526d() // 0160:4526d +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    sub_452f7();
    edx = eax;
    eax = ebx;
    sub_46ed4();
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_45282() // 0160:45282 +long
{
    esp -= 4;
    eax += 0x00000030;
    if ((int32_t)eax <= (int32_t)0x00000039)
        goto loc_4528d;
    eax += 0x00000027;
loc_4528d: // 0160:4528d
    esp += 4;
    return;
}
void sub_4528e() // 0160:4528e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = edx;
    sub_4706d();
    edx = 0x00000004;
    ebx = eax;
    esi = ecx;
    memoryASet(ds, ecx, 0x74);
    edx += ecx;
loc_452a9: // 0160:452a9
    eax = ebx;
    eax &= 0x0000000f;
    sub_45282();
    memoryASet(ds, edx, al);
    edx--;
    ebx >>= 4;
    if (edx != esi)
        goto loc_452a9;
    eax = edi;
    eax = sar32(eax, 0x04);
    eax &= 0x0000000f;
    memoryASet(ds, ecx + 5, 0x5f);
    sub_45282();
    memoryASet(ds, ecx + 6, al);
    eax = edi;
    eax &= 0x0000000f;
    sub_45282();
    memoryASet(ds, ecx + 8, 0x2e);
    memoryASet(ds, ecx + 9, 0x74);
    memoryASet(ds, ecx + 10, 0x6d);
    memoryASet(ds, ecx + 11, 0x70);
    memoryASet(ds, ecx + 12, 0x00);
    memoryASet(ds, ecx + 7, al);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_452f7() // 0160:452f7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    ecx = eax;
    edi = edx;
    if (memoryAGet32(ds, eax + 12) != 0x00000000)
        goto loc_4530f;
    esi = 0xffffffff;
    goto loc_45376;
loc_4530f: // 0160:4530f
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_45322;
    eax = ecx;
    sub_46f5c();
    esi = eax;
loc_45322: // 0160:45322
    eax = ecx;
    sub_4520e();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_4533a;
    eax = memoryAGet32(ds, ecx + 16);
    ebx = 0;
    sub_4701b();
loc_4533a: // 0160:4533a
    if (!edi)
        goto loc_45348;
    eax = memoryAGet32(ds, ecx + 16);
    sub_47073();
    esi |= eax;
loc_45348: // 0160:45348
    if (!(memoryAGet(ds, ecx + 12) & 0x08))
        goto loc_4535d;
    eax = memoryAGet32(ds, ecx + 8);
    sub_45a84();
    memoryASet32(ds, ecx + 8, 0x00000000);
loc_4535d: // 0160:4535d
    if (!(memoryAGet(ds, ecx + 13) & 0x08))
        goto loc_45376;
    edx = 0;
    eax = esp;
    dl = memoryAGet(ds, ecx + 25);
    sub_4528e();
    eax = esp;
    sub_470a5();
loc_45376: // 0160:45376
    eax = esi;
    esp += 0x00000010;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_45380() // 0160:45380 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x01)
        goto loc_453aa;
    eax = 0x00000004;
    sub_46ba8();
    dh = memoryAGet(ds, ecx + 12);
    dh |= 0x20;
    eax = 0;
    memoryASet(ds, ecx + 12, dh);
    goto loc_45543;
loc_453aa: // 0160:453aa
    ebx = (int32_t)ebx * (int32_t)edx;
    if (ebx)
        goto loc_453b8;
    eax = ebx;
    goto loc_45543;
loc_453b8: // 0160:453b8
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_453c5;
    eax = ebp;
    sub_470aa();
loc_453c5: // 0160:453c5
    esi = 0;
    dl = memoryAGet(ss, ebp + 12);
    memoryASet32(ds, esp + 12, esi);
    if (!(dl & 0x40))
        goto loc_454c4;
    memoryASet32(ds, esp + 8, ebx);
loc_453db: // 0160:453db
    edx = memoryAGet32(ss, ebp + 4);
    if (!edx)
        goto loc_45436;
    ebx = memoryAGet32(ds, esp + 8);
    if (edx <= ebx)
        goto loc_453ec;
    edx = ebx;
loc_453ec: // 0160:453ec
    edi = memoryAGet32(ds, esp + 4);
    ecx = edx;
    esi = memoryAGet32(ss, ebp);
    ebx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ss, ebp);
    esi = edi + edx;
    ebx += edx;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, ebx);
    edi = memoryAGet32(ss, ebp + 4);
    ecx += edx;
    eax -= edx;
    edi -= edx;
    memoryASet32(ss, ebp, ecx);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ss, ebp + 4, edi);
loc_45436: // 0160:45436
    ecx = memoryAGet32(ds, esp + 8);
    if (!ecx)
        goto loc_45538;
    if (ecx >= memoryAGet32(ss, ebp + 20))
        goto loc_4544d;
    if (!(memoryAGet(ss, ebp + 13) & 0x04))
        goto loc_454b0;
loc_4544d: // 0160:4544d
    cl = memoryAGet(ss, ebp + 13);
    ebx = memoryAGet32(ds, esp + 8);
    if (cl & 0x04)
        goto loc_45466;
    if (ebx <= 0x00000200)
        goto loc_45466;
    bh &= 0xfe;
    bl = 0;
loc_45466: // 0160:45466
    edx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ss, ebp + 16);
    sub_47121();
    if (eax != 0xffffffff)
        goto loc_45480;
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_45538;
loc_45480: // 0160:45480
    if (eax)
        goto loc_4548d;
loc_45484: // 0160:45484
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x10);
    goto loc_45538;
loc_4548d: // 0160:4548d
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    edx += eax;
    ebx -= eax;
    ecx += eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    goto loc_453db;
loc_454b0: // 0160:454b0
    eax = ebp;
    sub_471f8();
    if (!eax)
        goto loc_45538;
    goto loc_453db;
loc_454c4: // 0160:454c4
    edx = memoryAGet32(ds, esp + 4);
    ebx += edx;
loc_454ca: // 0160:454ca
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_454db;
    eax = ebp;
    sub_471f8();
    if (!eax)
        goto loc_45538;
loc_454db: // 0160:454db
    ecx = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    ecx--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, ecx);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x0000000d)
        goto loc_4551f;
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_45508;
    eax = ebp;
    sub_471f8();
    if (!eax)
        goto loc_45538;
loc_45508: // 0160:45508
    edi = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    edi--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, edi);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
loc_4551f: // 0160:4551f
    if (eax == 0x0000001a)
        goto loc_45484;
    memoryASet(ds, edx, al);
    eax = memoryAGet32(ds, esp + 12);
    eax++;
    edx++;
    memoryASet32(ds, esp + 12, eax);
    if (edx != ebx)
        goto loc_454ca;
loc_45538: // 0160:45538
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp);
    edx = 0;
    div32(esi);
loc_45543: // 0160:45543
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4554a() // 0160:4554a +long
{
    esp -= 4;
    push32(ebx);
loc_4554b: // 0160:4554b
    bl = memoryAGet(ds, eax);
    bh = memoryAGet(ds, edx);
    if (bl < 0x41)
        goto loc_4555c;
    if (bl > 0x5a)
        goto loc_4555c;
    bl += 0x20;
loc_4555c: // 0160:4555c
    if (bh < 0x41)
        goto loc_45569;
    if (bh > 0x5a)
        goto loc_45569;
    bh += 0x20;
loc_45569: // 0160:45569
    if (bl != bh)
        goto loc_45575;
    if (!bh)
        goto loc_45575;
    eax++;
    edx++;
    goto loc_4554b;
loc_45575: // 0160:45575
    edx = 0;
    eax = 0;
    dl = bl;
    al = bh;
    edx -= eax;
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_45583() // 0160:45583 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000010;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x02)
        goto loc_455a8;
    eax = 0x00000004;
    sub_46ba8();
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x20);
    eax = 0;
    goto loc_45763;
loc_455a8: // 0160:455a8
    ebx = (int32_t)ebx * (int32_t)edx;
    if (ebx)
        goto loc_455b6;
    eax = ebx;
    goto loc_45763;
loc_455b6: // 0160:455b6
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_455c3;
    eax = ebp;
    sub_470aa();
loc_455c3: // 0160:455c3
    eax = memoryAGet32(ss, ebp + 12);
    dl = memoryAGet(ss, ebp + 12);
    esi = 0;
    eax &= 0x00000030;
    dl &= 0xcf;
    memoryASet32(ds, esp + 12, esi);
    memoryASet32(ds, esp + 8, eax);
    memoryASet(ss, ebp + 12, dl);
    if (!(dl & 0x40))
        goto loc_456df;
    memoryASet32(ds, esp + 16, ebx);
loc_455e9: // 0160:455e9
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_45641;
    eax = memoryAGet32(ds, esp + 16);
    if (eax < memoryAGet32(ss, ebp + 20))
        goto loc_45641;
    ah &= 0xfe;
    al = 0;
    memoryASet32(ds, esp + 20, eax);
    if (eax)
        goto loc_4560d;
    eax = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 20, eax);
loc_4560d: // 0160:4560d
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 20);
    eax = memoryAGet32(ss, ebp + 16);
    sub_472a3();
    if (eax != 0xffffffff)
        goto loc_4562b;
loc_45622: // 0160:45622
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_456ab;
loc_4562b: // 0160:4562b
    if (eax == memoryAGet32(ds, esp + 20))
        goto loc_456ab;
    eax = 0x0000000c;
    sub_46ba8();
    goto loc_45622;
loc_45641: // 0160:45641
    eax = memoryAGet32(ss, ebp + 20);
    eax -= memoryAGet32(ss, ebp + 4);
    ecx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp + 20, eax);
    if (eax <= ecx)
        goto loc_45657;
    memoryASet32(ds, esp + 20, ecx);
loc_45657: // 0160:45657
    esi = memoryAGet32(ds, esp + 4);
    ecx = memoryAGet32(ds, esp + 20);
    edi = memoryAGet32(ss, ebp);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 20);
    esi = memoryAGet32(ss, ebp);
    edi = memoryAGet32(ss, ebp + 4);
    esi += eax;
    bh = memoryAGet(ss, ebp + 13);
    memoryASet32(ss, ebp, esi);
    edi += eax;
    edx = memoryAGet32(ss, ebp + 20);
    memoryASet32(ss, ebp + 4, edi);
    bh |= 0x10;
    eax = memoryAGet32(ss, ebp + 4);
    memoryASet(ss, ebp + 13, bh);
    if (eax == edx)
        goto loc_456a4;
    if (!(bh & 0x04))
        goto loc_456ab;
loc_456a4: // 0160:456a4
    eax = ebp;
    sub_46f5c();
loc_456ab: // 0160:456ab
    eax = memoryAGet32(ds, esp + 20);
    esi = memoryAGet32(ds, esp + 4);
    edi = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 16);
    esi += eax;
    edi += eax;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, edi);
    edx -= eax;
    memoryASet32(ds, esp + 16, edx);
    if (!edx)
        goto loc_45740;
    if (!(memoryAGet(ss, ebp + 12) & 0x20))
        goto loc_455e9;
    goto loc_45740;
loc_456df: // 0160:456df
    cl = memoryAGet(ss, ebp + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_456fd;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ss, ebp + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ss, ebp + 13, al);
loc_456fd: // 0160:456fd
    edx = memoryAGet32(ds, esp + 4);
    eax = 0;
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet32(ds, esp + 4, edx);
    edx = ebp;
    sub_47474();
    if (memoryAGet(ss, ebp + 12) & 0x30)
        goto loc_45724;
    ecx = memoryAGet32(ds, esp + 12);
    ecx++;
    memoryASet32(ds, esp + 12, ecx);
    if (ebx != ecx)
        goto loc_456fd;
loc_45724: // 0160:45724
    if (!edi)
        goto loc_45740;
    dh = memoryAGet(ss, ebp + 13);
    dh &= 0xfa;
    bl = dh;
    memoryASet(ss, ebp + 13, dh);
    bl |= 0x04;
    eax = ebp;
    memoryASet(ss, ebp + 13, bl);
    sub_46f5c();
loc_45740: // 0160:45740
    if (!(memoryAGet(ss, ebp + 12) & 0x20))
        goto loc_4574c;
    ecx = 0;
    memoryASet32(ds, esp + 12, ecx);
loc_4574c: // 0160:4574c
    eax = memoryAGet32(ds, esp + 8);
    edi = memoryAGet32(ds, esp);
    esi = memoryAGet32(ss, ebp + 12);
    edx = 0;
    esi |= eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ss, ebp + 12, esi);
    div32(edi);
loc_45763: // 0160:45763
    esp += 0x00000018;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4576a() // 0160:4576a +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x0000000c;
    ecx = eax;
    eax = esp;
    sub_47518();
    eax = ecx;
    ecx = esp;
    sub_45ae2();
    esp += 0x0000000c;
    ecx = pop32();
    esp += 4;
}
void sub_45785() // 0160:45785 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = 0;
    al = in8(dx);
    edx = pop32();
    esp += 4;
}
void sub_4578d() // 0160:4578d +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = eax;
    eax = ebx;
    out16(dx, ax);
    ebx = pop32();
    esp += 4;
}
void sub_45798() // 0160:45798 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = memoryAGet32(ds, 0x5d05c);
    if (!esi)
        goto loc_457e9;
    if (!eax)
        goto loc_457e9;
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    edi = ecx;
    goto loc_457e3;
loc_457c4: // 0160:457c4
    eax = ecx;
    edx = ebp;
    ebx = edi;
    sub_47540();
    if (eax)
        goto loc_457e0;
    if (memoryAGet(ds, ecx + edi) != 0x3d)
        goto loc_457e0;
    eax = edi + 1;
    eax += ecx;
    goto loc_457eb;
loc_457e0: // 0160:457e0
    esi += 0x00000004;
loc_457e3: // 0160:457e3
    ecx = memoryAGet32(ds, esi);
    if (ecx)
        goto loc_457c4;
loc_457e9: // 0160:457e9
    eax = 0;
loc_457eb: // 0160:457eb
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_457fb() // 0160:457fb +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
loc_457ff: // 0160:457ff
    dl = memoryAGet(ds, eax);
    if (!dl)
        goto loc_45815;
    dl -= 0x61;
    if (dl > 0x19)
        goto loc_45812;
    dl += 0x41;
    memoryASet(ds, eax, dl);
loc_45812: // 0160:45812
    eax++;
    goto loc_457ff;
loc_45815: // 0160:45815
    eax = ebx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4581a()
{
  sub_475c9();
}

void sub_459a1() // 0160:459a1 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    push(gs);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    if (!eax)
        goto loc_459ba;
    if (eax <= 0xffffffd4)
        goto loc_459c1;
loc_459ba: // 0160:459ba
    eax = 0;
    goto loc_45a75;
loc_459c1: // 0160:459c1
    ebp = 0x0005cdac;
    edi = esi + 3;
    ah = 0;
    ebx = 0;
    memoryASet(ds, esp, ah);
    di &= 0xfffc;
loc_459d4: // 0160:459d4
    eax = edi;
    if (edi >= 0x0000000c)
        goto loc_459e0;
    eax = 0x0000000c;
loc_459e0: // 0160:459e0
    if (eax <= memoryAGet32(ds, 0x5cdb4))
        goto loc_45a00;
    ecx = memoryAGet32(ds, 0x5cdb0);
    if (ecx)
        goto loc_45a38;
loc_459f2: // 0160:459f2
    memoryASet32(ds, 0x5cdb4, ecx);
    ecx = memoryAGet32(ds, 0x5cdac);
    goto loc_45a38;
loc_45a00: // 0160:45a00
    ecx = 0;
    goto loc_459f2;
loc_45a04: // 0160:45a04
    edx = ds;
    eax = ebp;
    memoryASet32(ds, 0x5cdb0, ecx);
    edx &= 0x0000ffff;
    eax = esi;
    ebx = ecx;
    sub_47674();
    ebx = eax;
    if (eax)
        goto loc_45a6b;
    eax = memoryAGet32(ds, 0x5cdb4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= eax)
        goto loc_45a35;
    memoryASet32(ds, 0x5cdb4, edx);
loc_45a35: // 0160:45a35
    ecx = memoryAGet32(ds, ecx + 8);
loc_45a38: // 0160:45a38
    if (ecx)
        goto loc_45a04;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_45a4d;
    eax = esi;
    sub_47c0b();
    if (eax)
        goto loc_45a62;
loc_45a4d: // 0160:45a4d
    eax = esi;
    sub_47dc6();
    if (!eax)
        goto loc_45a6b;
    cl = 0;
    memoryASet(ds, esp, cl);
    goto loc_459d4;
loc_45a62: // 0160:45a62
    memoryASet(ds, esp, 0x01);
    goto loc_459d4;
loc_45a6b: // 0160:45a6b
    ch = 0;
    eax = ebx;
    memoryASet(ds, 0x26f785, ch);
loc_45a75: // 0160:45a75
    esp += 0x00000004;
    ebp = pop32();
    gs = pop();
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_45a84() // 0160:45a84 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x5cdac);
    goto loc_45a9d;
loc_45a92: // 0160:45a92
    if (ecx > ebx)
        goto loc_45a9a;
    if (ebx < edx)
        goto loc_45aa4;
loc_45a9a: // 0160:45a9a
    ecx = memoryAGet32(ds, ecx + 8);
loc_45a9d: // 0160:45a9d
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_45a92;
loc_45aa4: // 0160:45aa4
    eax = 0x0005cdac;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_4771c();
    if (ecx == memoryAGet32(ds, 0x5cdb0))
        goto loc_45ad5;
    ebp = memoryAGet32(ds, 0x5cdb4);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_45ad5;
    memoryASet32(ds, 0x5cdb4, edx);
loc_45ad5: // 0160:45ad5
    ah = 0;
    memoryASet(ds, 0x26f785, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_45ae2() // 0160:45ae2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = ebx;
    ebx = ecx;
    esi = eax;
    edi = edx;
    edx = ebp;
    sub_47dca();
    eax = memoryAGet32(ss, ebp);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_45afb() // 0160:45afb +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x0000004c;
    esi = ebx;
    memoryASet32(ds, esp + 68, ecx);
    bl = 0;
    memoryASet32(ds, esp + 40, eax);
    memoryASet(ds, esp + 72, bl);
    memoryASet(ds, esp + 60, bl);
    ebx = 0;
    edi = edx;
    memoryASet32(ds, esp + 56, ebx);
    ebp = 0x00000004;
    goto loc_45b7e;
loc_45b25: // 0160:45b25
    ebx = esp + 40;
    edx = esi;
    sub_45d7c();
    edi = eax;
    al = memoryAGet(ds, eax);
    edi++;
    memoryASet(ds, esp + 61, al);
    if (!al)
        goto loc_45d70;
    if (al != 0x6e)
        goto loc_45c20;
    bl = memoryAGet(ds, esp + 60);
    if (!(bl & 0x20))
        goto loc_45bab;
    if (!(bl & 0x80))
        goto loc_45b6a;
    ecx = memoryAGet32(ds, esi);
    ecx += 0x00000008;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet16(ds, ecx + -8); es = memoryAGet32(ds, ecx + -8 + 2);
loc_45b61: // 0160:45b61
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(es, edx, eax);
    goto loc_45b7e;
loc_45b6a: // 0160:45b6a
    if (!(bl & 0x40))
        goto loc_45ba0;
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
loc_45b78: // 0160:45b78
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, edx, eax);
loc_45b7e: // 0160:45b7e
    cl = memoryAGet(ds, edi);
    if (!cl)
        goto loc_45d70;
    eax = edi + 1;
    if (cl == 0x25)
        goto loc_45b25;
    edi = eax;
    edx = 0;
    eax = esp + 40;
    dl = cl;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x46aff: sub_46aff(); break;
        case 0x448ee: sub_448ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:45b9a");
    }
    goto loc_45b7e;
loc_45ba0: // 0160:45ba0
    edx = memoryAGet32(ds, esi);
    edx += ebp;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    goto loc_45b78;
loc_45bab: // 0160:45bab
    if (!(bl & 0x10))
        goto loc_45beb;
    if (!(bl & 0x80))
        goto loc_45bc9;
    eax = memoryAGet32(ds, esi);
    eax += 0x00000008;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet16(ds, eax + -8); es = memoryAGet32(ds, eax + -8 + 2);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(es, edx, ax);
    goto loc_45b7e;
loc_45bc9: // 0160:45bc9
    if (!(bl & 0x40))
        goto loc_45be0;
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
loc_45bd7: // 0160:45bd7
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(ds, edx, ax);
    goto loc_45b7e;
loc_45be0: // 0160:45be0
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
    goto loc_45bd7;
loc_45beb: // 0160:45beb
    if (!(bl & 0x80))
        goto loc_45bff;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000008;
    memoryASet32(ds, esi, edx);
    {int tmp1 = memoryAGet16(ds, edx + -8); int tmp2 = memoryAGet32(ds, edx + -8 + 2); edx = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_45b61;
loc_45bff: // 0160:45bff
    if (!(bl & 0x40))
        goto loc_45c12;
    eax = memoryAGet32(ds, esi);
    eax += ebp;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet32(ds, eax + -4);
    goto loc_45b78;
loc_45c12: // 0160:45c12
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
    goto loc_45b78;
loc_45c20: // 0160:45c20
    eax = esp;
    ebx = esp + 40;
    ecx = esp + 72;
    edx = esi;
    sub_46094();
    es = edx;
    dl = memoryAGet(ds, esp + 60);
    ebx = eax;
    if (dl & 0x08)
        goto loc_45c62;
    if (memoryAGet(ds, esp + 62) != 0x20)
        goto loc_45c62;
loc_45c45: // 0160:45c45
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_45c62;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:45c5c;
    goto loc_45c45;
loc_45c62: // 0160:45c62
    ecx = esp + 63;
loc_45c66: // 0160:45c66
    al = memoryAGet(ds, ecx);
    if (!al)
        goto loc_45c7b;
    edx = 0;
    dl = al;
    eax = esp + 40;
    ecx++;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:45c75;
    goto loc_45c66;
loc_45c7b: // 0160:45c7b
    eax = memoryAGet32(ds, esp + 52);
    ecx = eax + -1;
    memoryASet32(ds, esp + 52, ecx);
    if (!eax)
        goto loc_45c99;
    eax = esp + 40;
    edx = 0x00000030;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:45c93;
    goto loc_45c7b;
loc_45c99: // 0160:45c99
    if (memoryAGet(ds, esp + 60) & 0x08)
        goto loc_45cc4;
    if (memoryAGet(ds, esp + 62) == 0x20)
        goto loc_45cc4;
loc_45ca7: // 0160:45ca7
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_45cc4;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:45cbe;
    goto loc_45ca7;
loc_45cc4: // 0160:45cc4
    dh = memoryAGet(ds, esp + 61);
    if (dh == 0x73)
        goto loc_45cd2;
    if (dh != 0x53)
        goto loc_45d19;
loc_45cd2: // 0160:45cd2
    if (!(memoryAGet(ds, esp + 60) & 0x20))
        goto loc_45cfa;
loc_45cd9: // 0160:45cd9
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_45d38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:45cf1;
    ebx += 0x00000002;
    goto loc_45cd9;
loc_45cfa: // 0160:45cfa
    eax = memoryAGet32(ds, esp + 48);
    edx = eax + -1;
    memoryASet32(ds, esp + 48, edx);
    if (!eax)
        goto loc_45d38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x46aff: sub_46aff(); break;
        case 0x448ee: sub_448ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:45d12");
    }
    ebx++;
    goto loc_45cfa;
loc_45d19: // 0160:45d19
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_45d38;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x46aff: sub_46aff(); break;
        case 0x448ee: sub_448ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:45d31");
    }
    ebx++;
    goto loc_45d19;
loc_45d38: // 0160:45d38
    if (!(memoryAGet(ds, esp + 60) & 0x08))
        goto loc_45b7e;
    if ((int32_t)memoryAGet32(ds, esp + 44) <= (int32_t)0x00000000)
        goto loc_45b7e;
loc_45d4e: // 0160:45d4e
    eax = memoryAGet32(ds, esp + 44);
    edx = eax + -1;
    memoryASet32(ds, esp + 44, edx);
    if (!eax)
        goto loc_45b7e;
    eax = esp + 40;
    edx = 0x00000020;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x46aff: sub_46aff(); break;
        case 0x448ee: sub_448ee(); break;
        default:
            printf("unhandled: %x\n", memoryAGet32(ds, esp + 68));
            stop("ind 0160:45d6a");
    }
    goto loc_45d4e;
loc_45d70: // 0160:45d70
    eax = memoryAGet32(ds, esp + 56);
    esp += 0x0000004c;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_45d7c() // 0160:45d7c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    memoryASet(ds, ebx + 23, 0x00);
    edx = ebx;
    memoryASet(ds, ebx + 22, 0x20);
    sub_45eaf();
    memoryASet32(ds, ebx + 4, 0x00000000);
    cl = memoryAGet(ds, eax);
    edx = eax;
    if (cl < 0x30)
        goto loc_45dc4;
    if (cl > 0x39)
        goto loc_45dc4;
loc_45da5: // 0160:45da5
    ecx = memoryAGet32(ds, ebx + 4) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 4, ecx);
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_45deb;
    if (cl <= 0x39)
        goto loc_45da5;
    goto loc_45deb;
loc_45dc4: // 0160:45dc4
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_45deb;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 4, edx);
    if ((int32_t)edx >= 0)
        goto loc_45dea;
    edi = edx;
    dh = memoryAGet(ds, ebx + 20);
    edi = -edi;
    dh |= 0x08;
    memoryASet32(ds, ebx + 4, edi);
    memoryASet(ds, ebx + 20, dh);
loc_45dea: // 0160:45dea
    eax++;
loc_45deb: // 0160:45deb
    memoryASet32(ds, ebx + 8, 0xffffffff);
    if (memoryAGet(ds, eax) != 0x2e)
        goto loc_45e3e;
    eax++;
    memoryASet32(ds, ebx + 8, 0x00000000);
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_45e1f;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 8, edx);
    if ((int32_t)edx >= 0)
        goto loc_45e1c;
    memoryASet32(ds, ebx + 8, 0xffffffff);
loc_45e1c: // 0160:45e1c
    eax++;
    goto loc_45e3e;
loc_45e1f: // 0160:45e1f
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_45e3e;
    if (cl > 0x39)
        goto loc_45e3e;
    ecx = memoryAGet32(ds, ebx + 8) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 8, ecx);
    goto loc_45e1f;
loc_45e3e: // 0160:45e3e
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl < 0x4e)
        goto loc_45e63;
    if (cl <= 0x4e)
        goto loc_45ea0;
    if (cl < 0x6c)
        goto loc_45e5a;
    if (cl <= 0x6c)
        goto loc_45e73;
    if (cl == 0x77)
        goto loc_45e73;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e5a: // 0160:45e5a
    if (cl == 0x68)
        goto loc_45e81;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e63: // 0160:45e63
    if (cl < 0x46)
        goto loc_45eab;
    if (cl <= 0x46)
        goto loc_45e9a;
    if (cl == 0x4c)
        goto loc_45e90;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e73: // 0160:45e73
    dl = memoryAGet(ds, ebx + 20);
    dl |= 0x20;
    eax++;
    memoryASet(ds, ebx + 20, dl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e81: // 0160:45e81
    cl = memoryAGet(ds, ebx + 20);
    cl |= 0x10;
    eax = edx;
    memoryASet(ds, ebx + 20, cl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e90: // 0160:45e90
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x40);
loc_45e94: // 0160:45e94
    eax = edx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45e9a: // 0160:45e9a
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x80);
    goto loc_45e94;
loc_45ea0: // 0160:45ea0
    ch = memoryAGet(ds, ebx + 20);
    ch |= 0x40;
    eax = edx;
    memoryASet(ds, ebx + 20, ch);
loc_45eab: // 0160:45eab
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_45eaf() // 0160:45eaf +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    memoryASet(ds, edx + 20, 0x00);
loc_45eb5: // 0160:45eb5
    bl = memoryAGet(ds, eax);
    if (bl != 0x2d)
        goto loc_45ec2;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x08);
    goto loc_45f04;
loc_45ec2: // 0160:45ec2
    if (bl != 0x23)
        goto loc_45ecd;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x01);
    goto loc_45f04;
loc_45ecd: // 0160:45ecd
    if (bl != 0x2b)
        goto loc_45ee5;
    ch = memoryAGet(ds, edx + 20);
    ch |= 0x04;
    bl = ch;
    memoryASet(ds, edx + 20, ch);
    bl &= 0xfd;
    memoryASet(ds, edx + 20, bl);
    goto loc_45f04;
loc_45ee5: // 0160:45ee5
    if (bl != 0x20)
        goto loc_45efc;
    bh = memoryAGet(ds, edx + 20);
    if (bh & 0x04)
        goto loc_45f04;
    cl = bh;
    cl |= 0x02;
    memoryASet(ds, edx + 20, cl);
    goto loc_45f04;
loc_45efc: // 0160:45efc
    if (bl != 0x30)
        goto loc_45f07;
    memoryASet(ds, edx + 22, bl);
loc_45f04: // 0160:45f04
    eax++;
    goto loc_45eb5;
loc_45f07: // 0160:45f07
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_45f0a() // 0160:45f0a +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    esi = edx;
    edi = ebx;
    edx = eax;
    eax = 0;
loc_45f16: // 0160:45f16
    es = esi;
    ebx = edx;
    cl = memoryAGet(es, ebx);
    edx++;
    if (!cl)
        goto loc_45f29;
    if (eax == edi)
        goto loc_45f29;
    eax++;
    goto loc_45f16;
loc_45f29: // 0160:45f29
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_45f2e() // 0160:45f2e +long
{
    esp -= 4;
    goto loc_45f2e;
loc_45f29: // 0160:45f29
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_45f2e: // 0160:45f2e
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    ecx = edx;
    esi = ebx;
    edx = eax;
    eax = 0;
loc_45f3a: // 0160:45f3a
    es = ecx;
    ebx = edx;
    di = memoryAGet16(es, ebx);
    edx += 0x00000002;
    if (!di)
        goto loc_45f29;
    if (eax == esi)
        goto loc_45f29;
    eax++;
    goto loc_45f3a;
}
void sub_45f51() // 0160:45f51 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = 0x00000010;
    edi = ebp;
    sub_48217();
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = memoryAGet32(ds, esp);
    esi = ecx;
    edi = ebp;
    eax--;
    edx = ecx + ebp;
    ebx = eax + ebp;
    goto loc_45f91;
loc_45f89: // 0160:45f89
    edx--;
    esi--;
    cl = memoryAGet(ds, edx);
    eax--;
    memoryASet(ds, ebx, cl);
    ebx--;
loc_45f91: // 0160:45f91
    if (edx != edi)
        goto loc_45f89;
    edx = eax + ebp;
loc_45f98: // 0160:45f98
    if ((int32_t)eax < 0)
        goto loc_45fa3;
    eax--;
    memoryASet(ds, edx, 0x30);
    edx--;
    goto loc_45f98;
loc_45fa3: // 0160:45fa3
    ebp += memoryAGet32(ds, esp);
    memoryASet(ss, ebp, 0x00);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_45fb2() // 0160:45fb2 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    esi = ebx;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx >= 0)
        goto loc_45fce;
    edx = -edx;
    ecx = eax + 1;
    memoryASet(ds, eax, 0x2d);
    memoryASet32(ds, esp, edx);
loc_45fce: // 0160:45fce
    if (memoryAGet32(ds, esi + 8) != 0xffffffff)
        goto loc_45fdb;
    memoryASet32(ds, esi + 8, 0x00000004);
loc_45fdb: // 0160:45fdb
    ebx = 0x0000000a;
    eax = 0;
    edx = ecx;
    ax = memoryAGet16(ds, esp + 2);
    sub_48217();
    ebx = ecx;
loc_45ff0: // 0160:45ff0
    ah = memoryAGet(ds, ecx);
    edx = ecx + 1;
    if (!ah)
        goto loc_45ffd;
    ecx = edx;
    goto loc_45ff0;
loc_45ffd: // 0160:45ffd
    if (memoryAGet32(ds, esi + 8) == 0x00000000)
        goto loc_4602f;
    memoryASet(ds, ecx, 0x2e);
    eax = 0;
    ecx = edx;
    goto loc_46027;
loc_4600c: // 0160:4600c
    edx = 0;
    memoryASet16(ds, esp + 2, dx);
    edi = memoryAGet32(ds, esp);
    edx = edi * 0x0000000a;
    memoryASet32(ds, esp, edx);
    dl = memoryAGet(ds, esp + 2);
    dl += 0x30;
    eax++;
    memoryASet(ds, ecx, dl);
    ecx++;
loc_46027: // 0160:46027
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esi + 8))
        goto loc_4600c;
    memoryASet(ds, ecx, 0x00);
loc_4602f: // 0160:4602f
    if (!(memoryAGet(ds, esp + 1) & 0x80))
        goto loc_46086;
loc_46036: // 0160:46036
    if (ecx != ebx)
        goto loc_4606c;
    ecx = ebx + 1;
    memoryASet(ds, ebx, 0x31);
loc_46040: // 0160:46040
    dl = memoryAGet(ds, ecx);
    eax = ecx + 1;
    if (dl != 0x30)
        goto loc_4604e;
    ecx = eax;
    goto loc_46040;
loc_4604e: // 0160:4604e
    if (dl != 0x2e)
        goto loc_46063;
    memoryASet(ds, ecx, 0x30);
    ecx = eax + 1;
    memoryASet(ds, eax, dl);
loc_4605b: // 0160:4605b
    if (memoryAGet(ds, ecx) != 0x30)
        goto loc_46063;
    ecx++;
    goto loc_4605b;
loc_46063: // 0160:46063
    memoryASet(ds, ecx, 0x30);
    ecx++;
    memoryASet(ds, ecx, 0x00);
    goto loc_46086;
loc_4606c: // 0160:4606c
    ecx--;
    if (memoryAGet(ds, ecx) != 0x2e)
        goto loc_46073;
    ecx--;
loc_46073: // 0160:46073
    al = memoryAGet(ds, ecx);
    if (al == 0x39)
        goto loc_46081;
    ah = al;
    ah++;
    memoryASet(ds, ecx, ah);
    goto loc_46086;
loc_46081: // 0160:46081
    memoryASet(ds, ecx, 0x30);
    goto loc_46036;
loc_46086: // 0160:46086
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4608d() // 0160:4608d +long
{
    esp -= 4;
    indirectCall(cs, memoryAGet32(ds, 0x5d078)); // 0160:4608d;
    esp += 4;
}
void sub_46094() // 0160:46094 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    ebx = 0x00000001;
    eax = ds;
    ecx = edi;
    memoryASet32(ds, esp + 4, ebx);
    es = eax;
    al = memoryAGet(ds, esi + 21);
    memoryASet32(ds, esi + 12, 0x00000000);
    if (al < 0x69)
        goto loc_460d5;
    if (al <= 0x69)
        goto loc_46115;
    if (al < 0x75)
        goto loc_460d1;
    if (al <= 0x75)
        goto loc_460e1;
    flags.zero = al == 0x78;
loc_460cd: // 0160:460cd
    if (flags.zero)
        goto loc_460e1;
    goto loc_4611f;
loc_460d1: // 0160:460d1
    flags.zero = al == 0x6f;
    goto loc_460cd;
loc_460d5: // 0160:460d5
    if (al < 0x58)
        goto loc_4611f;
    if (al <= 0x58)
        goto loc_460e1;
    if (al == 0x64)
        goto loc_46115;
    goto loc_4611f;
loc_460e1: // 0160:460e1
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x20))
        goto loc_460f5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ebp = memoryAGet32(ds, ebx + -4);
    goto loc_46111;
loc_460f5: // 0160:460f5
    if (!(ah & 0x10))
        goto loc_46107;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebp = memoryAGet16(ds, eax + -4);
    goto loc_46111;
loc_46107: // 0160:46107
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    ebp = memoryAGet32(ss, ebp + -4);
loc_46111: // 0160:46111
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
loc_46115: // 0160:46115
    if (memoryAGet32(ds, esi + 8) == 0xffffffff)
        goto loc_4611f;
    memoryASet(ds, esi + 22, 0x20);
loc_4611f: // 0160:4611f
    al = memoryAGet(ds, esi + 21);
    ebx = 0x0000000a;
    if (al < 0x65)
        goto loc_46184;
    if (al <= 0x65)
        goto loc_461f5;
    if (al < 0x6f)
        goto loc_4616d;
    if (al <= 0x6f)
        goto loc_46209;
    if (al < 0x73)
        goto loc_46160;
    if (al <= 0x73)
        goto loc_46284;
    if (al < 0x75)
        goto loc_46418;
    if (al <= 0x75)
        goto loc_4634d;
    if (al == 0x78)
        goto loc_46330;
    goto loc_46418;
loc_46160: // 0160:46160
    if (al == 0x70)
        goto loc_4636c;
    goto loc_46418;
loc_4616d: // 0160:4616d
    if (al < 0x67)
        goto loc_461cb;
    if (al <= 0x67)
        goto loc_461f5;
    if (al == 0x69)
        goto loc_46244;
    goto loc_46418;
loc_46184: // 0160:46184
    if (al < 0x50)
        goto loc_461b8;
    if (al <= 0x50)
        goto loc_4636c;
    if (al < 0x58)
        goto loc_461ab;
    if (al <= 0x58)
        goto loc_46330;
    if (al < 0x63)
        goto loc_46418;
    if (al <= 0x63)
        goto loc_463eb;
    goto loc_46244;
loc_461ab: // 0160:461ab
    if (al == 0x53)
        goto loc_46284;
    goto loc_46418;
loc_461b8: // 0160:461b8
    if (al < 0x46)
        goto loc_461c7;
    if (al <= 0x46)
        goto loc_461cb;
    flags.zero = al == 0x47;
loc_461c0: // 0160:461c0
    if (flags.zero)
        goto loc_461f5;
    goto loc_46418;
loc_461c7: // 0160:461c7
    flags.zero = al == 0x45;
    goto loc_461c0;
loc_461cb: // 0160:461cb
    if (!(memoryAGet(ds, esi + 20) & 0x10))
        goto loc_461f5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    eax = edi;
    edx = memoryAGet32(ds, ebx + -4);
    ebx = esi;
    sub_45fb2();
    ebx = 0xffffffff;
    eax = ds;
    edx = ds;
    es = eax;
    eax = edi;
    ecx = edi;
    goto loc_4623a;
loc_461f5: // 0160:461f5
    eax = edi;
    ebx = esi;
    sub_4608d();
    ebx = 0xffffffff;
    es = edx;
    ecx = eax;
    goto loc_4623a;
loc_46209: // 0160:46209
    al = memoryAGet(ds, esi + 20);
    ebx = 0x00000008;
    if (!(al & 0x01))
        goto loc_46219;
    memoryASet(ds, edi, 0x30);
    edi++;
loc_46219: // 0160:46219
    eax = ebp;
    edx = edi;
    sub_482b2();
loc_46222: // 0160:46222
    if (memoryAGet32(ds, esi + 8) != 0x00000000)
        goto loc_46231;
    if (memoryAGet(ds, edi) != 0x30)
        goto loc_46231;
    memoryASet(es, ecx, 0x00);
loc_46231: // 0160:46231
    ebx = 0xffffffff;
    edx = es;
    eax = ecx;
loc_4623a: // 0160:4623a
    sub_45f0a();
    goto loc_46442;
loc_46244: // 0160:46244
    al = memoryAGet(ds, esi + 20);
    if (!(al & 0x20))
        goto loc_4625e;
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
loc_46257: // 0160:46257
    sub_482b2();
    goto loc_46222;
loc_4625e: // 0160:4625e
    if (!(al & 0x10))
        goto loc_46271;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    edx = edi;
    eax = (short)memoryAGet16(ds, eax + -4);
    goto loc_46257;
loc_46271: // 0160:46271
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
    sub_48217();
    goto loc_46222;
loc_46284: // 0160:46284
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x80))
        goto loc_462ae;
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000008;
    memoryASet32(ds, edx, ecx);
    dx = memoryAGet16(ds, ecx + -4);
    ecx = memoryAGet32(ds, ecx + -8);
    if (ecx)
        goto loc_462a3;
    if (!dx)
        goto loc_462a7;
loc_462a3: // 0160:462a3
    es = edx;
    goto loc_462da;
loc_462a7: // 0160:462a7
    eax = ds;
    ecx = memoryAGet32(ds, esp);
    goto loc_462d8;
loc_462ae: // 0160:462ae
    if (!(ah & 0x40))
        goto loc_462c5;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ecx = memoryAGet32(ds, ebx + -4);
    if (!ecx)
        goto loc_462a7;
loc_462c1: // 0160:462c1
    eax = ds;
    goto loc_462d8;
loc_462c5: // 0160:462c5
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx)
        goto loc_462c1;
    eax = ds;
    ecx = memoryAGet32(ds, esp);
loc_462d8: // 0160:462d8
    es = eax;
loc_462da: // 0160:462da
    bh = memoryAGet(ds, esi + 20);
    al = memoryAGet(ds, esi + 21);
    edi = 0;
    bh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, bh);
    if (al != 0x53)
        goto loc_4630e;
    if (!(bh & 0x20))
        goto loc_46303;
    eax = 0;
    ax = memoryAGet16(es, ecx);
    ecx += 0x00000002;
    goto loc_46442;
loc_46303: // 0160:46303
    eax = 0;
    al = memoryAGet(es, ecx);
    ecx++;
    goto loc_46442;
loc_4630e: // 0160:4630e
    if (!(bh & 0x20))
        goto loc_46324;
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    sub_45f2e();
    goto loc_46442;
loc_46324: // 0160:46324
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    goto loc_4623a;
loc_46330: // 0160:46330
    if (!(memoryAGet(ds, esi + 20) & 0x01))
        goto loc_46348;
    if (!ebp)
        goto loc_46348;
    memoryASet(ds, esi + 23, 0x30);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, esi + 25, 0x00);
    memoryASet(ds, esi + 24, al);
loc_46348: // 0160:46348
    ebx = 0x00000010;
loc_4634d: // 0160:4634d
    eax = ebp;
    edx = edi;
    sub_48269();
    if (memoryAGet(ds, esi + 21) != 0x58)
        goto loc_46222;
    eax = edi;
    sub_464dd();
    goto loc_46222;
loc_4636c: // 0160:4636c
    if (memoryAGet32(ds, esi + 4) != 0x00000000)
        goto loc_46388;
    if (!(memoryAGet(ds, esi + 20) & 0x80))
        goto loc_46381;
    memoryASet32(ds, esi + 4, 0x0000000d);
    goto loc_46388;
loc_46381: // 0160:46381
    memoryASet32(ds, esi + 4, 0x00000008);
loc_46388: // 0160:46388
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    bl = memoryAGet(ds, esi + 20);
    ebp = memoryAGet32(ds, eax + -4);
    if (!(bl & 0x80))
        goto loc_463c7;
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebx = 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    edx = edi;
    eax &= 0x0000ffff;
    sub_45f51();
    ebx = 0x00000008;
    edx = edi + 5;
    eax = ebp;
    memoryASet(ds, edi + 4, 0x3a);
    goto loc_463d0;
loc_463c7: // 0160:463c7
    ebx = 0x00000008;
    eax = ebp;
    edx = edi;
loc_463d0: // 0160:463d0
    sub_45f51();
    if (memoryAGet(ds, esi + 21) != 0x50)
        goto loc_46231;
    eax = edi;
    sub_464dd();
    goto loc_46231;
loc_463eb: // 0160:463eb
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    al = memoryAGet(ds, ebx + -4);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    eax = 0x00000001;
    dh = memoryAGet(ds, esi + 20);
    edi = 0;
    dh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, dh);
    goto loc_46442;
loc_46418: // 0160:46418
    memoryASet32(ds, esi + 4, 0x00000000);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    al = memoryAGet(ds, esi + 20);
    edi = 0;
    al &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, al);
    eax = 0x00000001;
loc_46442: // 0160:46442
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_46488;
    dl = memoryAGet(es, ecx);
    if (dl != 0x2d)
        goto loc_4645c;
    ecx++;
    memoryASet(ds, esi + 24, 0x00);
    eax--;
    memoryASet(ds, esi + 23, dl);
    goto loc_46477;
loc_4645c: // 0160:4645c
    dh = memoryAGet(ds, esi + 20);
    if (!(dh & 0x02))
        goto loc_4646a;
    memoryASet(ds, esi + 23, 0x20);
    goto loc_46473;
loc_4646a: // 0160:4646a
    if (!(dh & 0x04))
        goto loc_46477;
    memoryASet(ds, esi + 23, 0x2b);
loc_46473: // 0160:46473
    memoryASet(ds, esi + 24, 0x00);
loc_46477: // 0160:46477
    edx = memoryAGet32(ds, esi + 8);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_46483;
    memoryASet32(ds, esi + 8, eax);
    goto loc_46488;
loc_46483: // 0160:46483
    edx -= eax;
    memoryASet32(ds, esi + 12, edx);
loc_46488: // 0160:46488
    if (memoryAGet(ds, esi + 22) != 0x2a)
        goto loc_4649b;
    dl = memoryAGet(ds, esi + 20);
    memoryASet(ds, esi + 23, 0x00);
    dl &= 0xf9;
    memoryASet(ds, esi + 20, dl);
loc_4649b: // 0160:4649b
    ebx = memoryAGet32(ds, esi + 8);
    if (ebx == 0xffffffff)
        goto loc_464a7;
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_464b0;
loc_464a7: // 0160:464a7
    if (memoryAGet(ds, esi + 21) == 0x63)
        goto loc_464b0;
    memoryASet32(ds, esi + 8, eax);
loc_464b0: // 0160:464b0
    ebx = 0xffffffff;
    eax = esi + 23;
    edx = ds;
    sub_45f0a();
    ebp = memoryAGet32(ds, esi + 8);
    edx = memoryAGet32(ds, esi + 12);
    eax += ebp;
    ebx = memoryAGet32(ds, esi + 4);
    eax += edx;
    edx = es;
    ebx -= eax;
    eax = ecx;
    memoryASet32(ds, esi + 4, ebx);
    esp += 0x00000008;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_464dd() // 0160:464dd +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
loc_464e0: // 0160:464e0
    if (memoryAGet(ds, edx) == 0x00)
        goto loc_464f3;
    eax = 0;
    al = memoryAGet(ds, edx);
    sub_482cd();
    memoryASet(ds, edx, al);
    edx++;
    goto loc_464e0;
loc_464f3: // 0160:464f3
    edx = pop32();
    esp += 4;
}
void sub_464f5() // 0160:464f5 +long
{
    esp -= 4;
    push32(ecx);
    ecx = memoryAGet32(ds, 0x5d05c);
    sub_482db();
    ecx = pop32();
    esp += 4;
}
void sub_46503() // 0160:46503 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esp -= 0x0000000c;
    ebx = eax;
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 4, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 6);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 5);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 4);
    memoryASet32(ds, ebx + 12, eax);
    ah = 0x2c;
    interrupt(0x21);
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp, ecx);
    eax = 0;
    al = memoryAGet(ds, esp + 3);
    edx = 0;
    memoryASet32(ds, ebx + 8, eax);
    eax = 0;
    dl = memoryAGet(ds, esp);
    al = memoryAGet(ds, esp + 2);
    esi = edx;
    memoryASet32(ds, ebx + 4, eax);
    eax = 0;
    esi <<= 2;
    al = memoryAGet(ds, esp + 1);
    esi += edx;
    memoryASet32(ds, ebx, eax);
    ah = 0x2a;
    interrupt(0x21);
    cx -= 0x076c;
    ch = al;
    ecx <<= 16;
    cx = dx;
    memoryASet32(ds, esp + 8, ecx);
    ah = memoryAGet(ds, esp + 4);
    al = memoryAGet(ds, esp + 8);
    esi += esi;
    if (al == ah)
        goto loc_465b5;
    if (memoryAGet32(ds, ebx + 8) == 0x00000017)
        goto loc_465b5;
    eax = 0;
    al = memoryAGet(ds, esp + 10);
    memoryASet32(ds, ebx + 20, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 9);
    eax--;
    memoryASet32(ds, ebx + 16, eax);
    eax = 0;
    al = memoryAGet(ds, esp + 8);
    memoryASet32(ds, ebx + 12, eax);
loc_465b5: // 0160:465b5
    eax = esi;
    memoryASet32(ds, ebx + 32, 0xffffffff);
    esp += 0x0000000c;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_465c6() // 0160:465c6 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = 0x0000000c;
    edx = memoryAGet32(ss, ebp + 16);
    eax = memoryAGet32(ds, eax + 16);
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    ebx = 0x0004f3b8;
    esi = memoryAGet32(ss, ebp + 20);
    edi = edx;
    if ((int32_t)esi >= (int32_t)0xf4fb7ea1)
        goto loc_465fa;
loc_465f0: // 0160:465f0
    eax = 0xffffffff;
    goto loc_46713;
loc_465fa: // 0160:465fa
    eax = memoryAGet32(ss, ebp + 16);
    edx = eax;
    ecx = 0x0000000c;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    esi += eax;
loc_4660b: // 0160:4660b
    if ((int32_t)edi >= 0)
        goto loc_46615;
    esi--;
    edi += 0x0000000c;
    goto loc_4660b;
loc_46615: // 0160:46615
    if ((int32_t)esi < 0)
        goto loc_465f0;
    eax = esi + 1900;
    sub_4840c();
    if (!eax)
        goto loc_4662d;
    ebx = 0x0004f3d2;
loc_4662d: // 0160:4662d
    eax = esi;
    eax <<= 3;
    eax += esi;
    eax <<= 3;
    eax += esi;
    ecx = esi + 3;
    edx = eax;
    eax <<= 2;
    ecx = sar32(ecx, 0x02);
    eax += edx;
    edx = eax + ecx;
    eax = (short)memoryAGet16(ds, ebx + edi*2);
    edi = memoryAGet32(ss, ebp + 12);
    eax += edx;
    edi += eax;
    edi--;
    if (!esi)
        goto loc_4665a;
    edi--;
loc_4665a: // 0160:4665a
    edx = memoryAGet32(ss, ebp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    eax <<= 2;
    edx = memoryAGet32(ss, ebp + 4);
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    esi = memoryAGet32(ss, ebp);
    eax <<= 2;
    esi += eax;
loc_4667b: // 0160:4667b
    if ((int32_t)esi >= 0)
        goto loc_46688;
    edi--;
    esi += 0x00015180;
    goto loc_4667b;
loc_46688: // 0160:46688
    eax = edi;
    edx = esi;
    ecx = ebp;
    ebx = 0;
    sub_48837();
    sub_48976();
    edx = memoryAGet32(ds, 0x5d0c8);
    ebx = memoryAGet32(ss, ebp + 32);
    esi += edx;
    if ((int32_t)ebx >= 0)
        goto loc_466b0;
    eax = ebp;
    sub_48554();
loc_466b0: // 0160:466b0
    if ((int32_t)memoryAGet32(ss, ebp + 32) <= (int32_t)0x00000000)
        goto loc_466bc;
    esi -= memoryAGet32(ds, 0x5d0cc);
loc_466bc: // 0160:466bc
    if ((int32_t)esi >= 0)
        goto loc_466c9;
    edi--;
    esi += 0x00015180;
    goto loc_466bc;
loc_466c9: // 0160:466c9
    if ((int32_t)edi < (int32_t)0x000063de)
        goto loc_465f0;
    if (edi != 0x000063de)
        goto loc_466f3;
    eax = memoryAGet32(ds, 0x5d0c8);
    esi -= 0x00015180;
    if ((int32_t)eax <= 0)
        goto loc_465f0;
    if ((int32_t)esi >= 0)
        goto loc_46711;
    goto loc_465f0;
loc_466f3: // 0160:466f3
    eax = edi + -25567;
    edi = eax;
    edi <<= 3;
    edi -= eax;
    edi <<= 5;
    edi += eax;
    edi <<= 7;
    eax = edi;
    edi <<= 2;
    edi -= eax;
    esi += edi;
loc_46711: // 0160:46711
    eax = esi;
loc_46713: // 0160:46713
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4671a() // 0160:4671a +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    ebp = esp;
    edx = memoryAGet32(ds, 0x5cdd4);
    edx += 0x00000003;
    dl &= 0xfc;
    sub_48c46();
    if (edx >= eax)
        goto loc_4673b;
    eax = edx;
    esp -= eax;
    eax = esp;
    goto loc_4673d;
loc_4673b: // 0160:4673b
    eax = 0;
loc_4673d: // 0160:4673d
    edx = memoryAGet32(ds, 0x5cdd4);
    eax += edx;
    memoryASet32(ds, 0x5cdd8, eax);
    sub_48c4f();
    edx = memoryAGet32(ds, 0x26f7b0);
    eax = memoryAGet32(ds, 0x26f7ac);
    sub_150a0();
    sub_44d41();
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_4676a() // 0160:4676a +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push32(edx);
    push(es);
    edx = eax;
loc_46771: // 0160:46771
    esi = 0x0005d250;
    edi = 0x0005d27a;
    ebx = edi;
    al = dl;
loc_46781: // 0160:46781
    if (esi >= edi)
        goto loc_46799;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_46794;
    if (memoryAGet(ds, esi + 1) > al)
        goto loc_46794;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_46794: // 0160:46794
    esi += 0x00000006;
    goto loc_46781;
loc_46799: // 0160:46799
    if (ebx == edi)
        goto loc_467af;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_467aa;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x44d14: sub_44d14(); break;
        case 0x46abf: sub_46abf(); break;
        case 0x4c380: sub_4c380(); break;
        case 0x4c3c8: sub_4c3c8(); break;
        case 0x4c1b8: sub_4c1b8(); break;
        case 0x47597: sub_47597(); break;
        case 0x46805: sub_46805(); break;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:467a7");
    }
    edx = pop32();
loc_467aa: // 0160:467aa
    memoryASet(ds, ebx, 0x02);
    goto loc_46771;
loc_467af: // 0160:467af
    es = pop();
    edx = pop32();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_467b5() // 0160:467b5 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push(es);
    dh = dl;
    dl = al;
loc_467bd: // 0160:467bd
    esi = 0x0005d27a;
    edi = 0x0005d286;
    ebx = edi;
    al = dl;
loc_467cd: // 0160:467cd
    if (esi >= edi)
        goto loc_467e5;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_467e0;
    if (al > memoryAGet(ds, esi + 1))
        goto loc_467e0;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_467e0: // 0160:467e0
    esi += 0x00000006;
    goto loc_467cd;
loc_467e5: // 0160:467e5
    if (ebx == edi)
        goto loc_467ff;
    if (al > dh)
        goto loc_467fa;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_467fa;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x4c230: sub_4c230(); break;
        default:
            printf("unhandled: %x\n", eax);
            stop("ind 0160:467f7");
    }
    edx = pop32();
loc_467fa: // 0160:467fa
    memoryASet(ds, ebx, 0x02);
    goto loc_467bd;
loc_467ff: // 0160:467ff
    es = pop();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_46805() // 0160:46805 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x00048c5a;
    ebx = 0x00048d7f;
    memoryASet32(ds, 0x5d078, edx);
    memoryASet32(ds, 0x5d07c, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46820() // 0160:46820 +long
{
    return;
    esp -= 4;
    push(es);
    push32(ecx);
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:46824 fninit ");
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    if (ah == 0x03)
        goto loc_46831;
    ebp++;
loc_46831: // 0160:46831
    flags.zero = !ebp;
    flags.sign = (int32_t)ebp < 0;
    if (flags.zero)
        goto loc_4683a;
    sub_46850();
    stop("propagate sign flag", "0160:46835");
loc_4683a: // 0160:4683a
    stop("disassembly failed at 160:4683b fninit ");
    fldcw(memoryAGet16(ds, 0x5d19c));
    stop("disassembly failed at 160:46843 fldz ");
    stop("disassembly failed at 160:46845 fldz ");
    stop("disassembly failed at 160:46847 fldz ");
    stop("disassembly failed at 160:46849 fldz ");
    edx = pop32();
    ebx = pop32();
    ecx = pop32();
    es = pop();
    esp += 4;
}
void sub_46850() // 0160:46850 +long +returnZero
{
    esp -= 4;
    memoryASet(ds, 0x5cd9c, 0x03);
    memoryASet(ds, 0x5ce44, 0x01);
    stop("disassembly failed at 160:4685e smsw word ptr [0x5ce42]");
    memoryASet16(ds, 0x5ce42, memoryAGet16(ds, 0x5ce42) & 0x0006);
    esp -= 0x00000008;
    stop("disassembly failed at 160:46871 sidt [esp]");
    ebx = memoryAGet32(ds, esp + 2);
    ebx += 0x00000038;
    esp += 0x00000008;
    if (memoryAGet(ds, 0x5cdec) == 0x00)
        goto loc_468a2;
    sub_4691b();
    es = memoryAGet16(ds, 0x5cd9a);
    memoryASet32(es, ebx, edx);
    memoryASet32(es, ebx + 4, ecx);
    sub_46985();
    goto loc_4691a;
loc_468a2: // 0160:468a2
    if (memoryAGet(ds, 0x5cdea) != 0x00)
        goto loc_468c6;
    ax = 0x2507;
    push(ds);
    cx = cs;
    ds = ecx;
    edx = 0x49178;
    interrupt(0x21);
    ds = pop();
    al = 0x04;
    ah = 0xf3;
    flags.zero = stop("nosave");
    interrupt(0x21);
    goto loc_4691a;
loc_468c6: // 0160:468c6
    if (memoryAGet(ds, 0x5cdea) != 0x09)
        goto loc_468ee;
    sub_4691b();
    memoryASet32(ds, ebx, edx);
    memoryASet32(ds, ebx + 4, ecx);
    eax = 0x00000e02;
    ebx = 0x00000004;
    ecx = memoryAGet32(ds, 0x5cd94);
    indirectCall(cs, memoryAGet32(ds, ecx + 48)); // 0160:468e9;
    stop("callee must return zero", "0160:468e9");
    goto loc_4691a;
loc_468ee: // 0160:468ee
    if (memoryAGet(ds, 0x5cdea) != 0x01)
        goto loc_46907;
    dx = memoryAGet16(ds, 0x5cd98);
    eax = 0;
    sub_4bfb6();
    goto loc_4691a;
loc_46907: // 0160:46907
    dx = 0;
    eax = 0;
    sub_4bfb6();
    flags.zero = al == 0x01;
    if (flags.zero)
        goto loc_4691a;
    sub_46938();
loc_4691a: // 0160:4691a
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_4691b() // 0160:4691b +long
{
    esp -= 4;
    ecx = 0x49178;
    dx = cs;
    edx <<= 16;
    dx = cx;
    cx = cs;
    cl &= 0x03;
    cx <<= 13;
    ch |= 0x8e;
    esp += 4;
}
void sub_46938() // 0160:46938 +long +returnZero
{
    bool temp_cond0;

    esp -= 4;
    cl = 0x07;
    ax = 0x2502;
    interrupt(0x21);
    memoryASet32(ds, 0x5ce3c, ebx);
    memoryASet16(ds, 0x5ce40, es);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    cl = 0x07;
    ax = 0x2504;
    push(ds);
    push(cs);
    ds = pop();
    if (stop("xxx multi precond"))
        goto loc_4696f;
    edx = 0x49108;
    interrupt(0x21);
    ds = pop();
    sub_46985();
    goto loc_46984;
loc_4696f: // 0160:4696f
    edx = 0x49178;
    interrupt(0x21);
    ds = pop();
    ecx = cr0;
    ecx |= 0x00000004;
    flags.zero = !(ecx & 0xfffffffd);
    ecx &= 0xfffffffd;
    cr0 = ecx;
loc_46984: // 0160:46984
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_46985() // 0160:46985 +long +returnZero
{
    esp -= 4;
    ebx = 0;
    edx = 0x5cdfc;
    ax = 0x2535;
    interrupt(0x21);
    memoryASet32(ds, 0x5cdfc, memoryAGet32(ds, 0x5cdfc) | 0x00000004);
    memoryASet32(ds, 0x5cdfc, memoryAGet32(ds, 0x5cdfc) & 0xfffffffd);
    ebx++;
    interrupt(0x21);
    esp += 4;
}
void sub_46a84() // 0160:46a84 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet(ds, 0x5cd9d) == 0x00)
        goto loc_46aa5;
    edx = 0x00046a7b;
    ebx = 0x00046a80;
    memoryASet32(ds, 0x5d1a0, edx);
    memoryASet32(ds, 0x5d1a4, ebx);
loc_46aa5: // 0160:46aa5
    eax = 0;
    ax = memoryAGet16(ds, 0x5d19c);
    sub_4c0da();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46abf() // 0160:46abf +long
{
    return;
    esp -= 4;
    push32(edx);
    ah = memoryAGet(ds, 0x5cd9c);
    if (ah)
        goto loc_46afd;
    memoryASet(ds, 0x5cd9d, ah);
    eax = 0;
    push32(eax);
    stop("disassembly failed at 160:46ad3 fninit ");
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    al = ah;
    dl = 0;
    if (al != 0x03)
        goto loc_46ae8;
    sub_46a84();
    dl = al;
loc_46ae8: // 0160:46ae8
    if (memoryAGet(ds, 0x5cde8) != 0x00)
        goto loc_46afd;
    memoryASet(ds, 0x5cd9c, dl);
    memoryASet(ds, 0x5cd9d, dl);
loc_46afd: // 0160:46afd
    edx = pop32();
    esp += 4;
}
void sub_46aff() // 0160:46aff +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    eax = edx;
    edx = memoryAGet32(ds, ebx);
    sub_47474();
    memoryASet32(ds, ebx + 16, memoryAGet32(ds, ebx + 16) + 1);
    ebx = pop32();
    esp += 4;
}
void sub_46b10() // 0160:46b10 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = memoryAGet32(ds, eax + 12);
    ah = memoryAGet(ds, eax + 12);
    ecx = memoryAGet32(ds, esi + 8);
    ah &= 0xcf;
    ebp &= 0x00000030;
    memoryASet(ds, esi + 12, ah);
    if (ecx)
        goto loc_46b33;
    eax = esi;
    sub_470aa();
loc_46b33: // 0160:46b33
    cl = memoryAGet(ds, esi + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_46b51;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ds, esi + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ds, esi + 13, al);
loc_46b51: // 0160:46b51
    ecx = 0x00046aff;
    eax = esi;
    sub_45afb();
    edx = eax;
    if (!edi)
        goto loc_46b7b;
    ah = memoryAGet(ds, esi + 13);
    ah &= 0xfa;
    bl = ah;
    memoryASet(ds, esi + 13, ah);
    bl |= 0x04;
    eax = esi;
    memoryASet(ds, esi + 13, bl);
    sub_46f5c();
loc_46b7b: // 0160:46b7b
    if (!(memoryAGet(ds, esi + 12) & 0x20))
        goto loc_46b86;
    edx = 0xffffffff;
loc_46b86: // 0160:46b86
    edi = memoryAGet32(ds, esi + 12);
    edi |= ebp;
    eax = edx;
    memoryASet32(ds, esi + 12, edi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_46b95() // 0160:46b95 +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_46ba2;
    if ((int32_t)eax > (int32_t)0x0000005a)
        goto loc_46ba2;
    eax += 0x00000020;
loc_46ba2: // 0160:46ba2
    esp += 4;
    return;
}
void sub_46ba8() // 0160:46ba8 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_4c101();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_46bcb() // 0160:46bcb +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_4c107();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_46c02() // 0160:46c02 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    esi = memoryAGet32(ds, esp + 36);
loc_46c0e: // 0160:46c0e
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_46c16;
    esi++;
    goto loc_46c0e;
loc_46c16: // 0160:46c16
    eax = memoryAGet32(ds, esp + 40);
    eax &= 0x00000083;
    memoryASet32(ds, esp, eax);
    dl = memoryAGet(ds, esp + 44);
    al = memoryAGet(ds, esp);
    al |= dl;
    edx = esi;
    edi = 0xffffffff;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_46c49;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_46c49: // 0160:46c49
    dh = memoryAGet(ds, esp + 40);
    if (!(dh & 0x03))
        goto loc_46cc3;
    if (edi == 0xffffffff)
        goto loc_46cc3;
    eax = edi;
    sub_4c10d();
    if (eax)
        goto loc_46cc3;
    if (!(memoryAGet(ds, esp + 41) & 0x04))
        goto loc_46c8b;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    eax = 0x00000007;
    sub_46ba8();
    eax = 0xffffffff;
    goto loc_46dbe;
loc_46c8b: // 0160:46c8b
    if (!(dh & 0x40))
        goto loc_46cc3;
    edx = esp + 8;
    ebx = edi;
    ecx = 0;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax >= 0)
        goto loc_46cc3;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
loc_46cb2: // 0160:46cb2
    eax = 0;
    ax = memoryAGet16(ds, esp + 4);
    sub_4760d();
    goto loc_46dbe;
loc_46cc3: // 0160:46cc3
    if (edi != 0xffffffff)
        goto loc_46d51;
    if (!(memoryAGet(ds, esp + 40) & 0x20))
        goto loc_46cb2;
    if (memoryAGet16(ds, esp + 4) != 0x0002)
        goto loc_46cb2;
    eax = esp + 48;
    eax += 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    if (eax)
        goto loc_46cee;
    eax = 0x00000180;
loc_46cee: // 0160:46cee
    eax ^= memoryAGet32(ds, 0x5d1a8);
    ecx = 0;
    if (al & 0x80)
        goto loc_46cff;
    ecx = 0x00000001;
loc_46cff: // 0160:46cff
    edx = esi;
    ecx &= 0x000000ff;
    ah = 0x3c;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_46cb2;
    ebx = memoryAGet32(ds, esp + 4);
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_46cb2;
    al = memoryAGet(ds, esp);
    ch = memoryAGet(ds, esp + 44);
    edx = esi;
    al |= ch;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_46cb2;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_46d51: // 0160:46d51
    eax = edi;
    sub_4c12b();
    al &= 0x3c;
    edx = eax;
    eax = edi;
    sub_4c10d();
    if (!eax)
        goto loc_46d6a;
    dh |= 0x20;
loc_46d6a: // 0160:46d6a
    memoryASet(ds, esp, memoryAGet(ds, esp) & 0x7f);
    if (memoryAGet32(ds, esp) != 0x00000002)
        goto loc_46d77;
    dl |= 0x03;
loc_46d77: // 0160:46d77
    if (memoryAGet32(ds, esp) != 0x00000000)
        goto loc_46d80;
    dl |= 0x01;
loc_46d80: // 0160:46d80
    if (memoryAGet32(ds, esp) != 0x00000001)
        goto loc_46d89;
    dl |= 0x02;
loc_46d89: // 0160:46d89
    if (!(memoryAGet(ds, esp + 40) & 0x10))
        goto loc_46d93;
    dl |= 0x80;
loc_46d93: // 0160:46d93
    eax = edx;
    bl = memoryAGet(ds, esp + 41);
    al |= 0x40;
    if (!(bl & 0x03))
        goto loc_46da7;
    if (!(bl & 0x02))
        goto loc_46db5;
    goto loc_46db3;
loc_46da7: // 0160:46da7
    if (memoryAGet32(ds, 0x5d051) != 0x00000200)
        goto loc_46db5;
loc_46db3: // 0160:46db3
    edx = eax;
loc_46db5: // 0160:46db5
    eax = edi;
    sub_4c180();
    eax = edi;
loc_46dbe: // 0160:46dbe
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46e2c() // 0160:46e2c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = memoryAGet32(ds, 0x26f778);
    if (!esi)
        goto loc_46e54;
    ecx = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, ecx + 12);
    eax = memoryAGet32(ds, esi);
    edi &= 0x00004003;
    memoryASet32(ds, 0x26f778, eax);
    di |= 0x0003;
    goto loc_46e9d;
loc_46e54: // 0160:46e54
    ecx = 0x0005ce48;
    goto loc_46e7b;
loc_46e5b: // 0160:46e5b
    if (memoryAGet(ds, ecx + 12) & 0x03)
        goto loc_46e78;
    eax = 0x00000008;
    sub_459a1();
    esi = eax;
    if (!eax)
        goto loc_46ec2;
    edi = 0x00000003;
    goto loc_46e9d;
loc_46e78: // 0160:46e78
    ecx += 0x0000001a;
loc_46e7b: // 0160:46e7b
    if (ecx < 0x0005d050)
        goto loc_46e5b;
    eax = 0x00000022;
    edi = 0x00004003;
    sub_459a1();
    ecx = eax;
    esi = eax;
    if (!eax)
        goto loc_46ec2;
    ecx = eax + 8;
loc_46e9d: // 0160:46e9d
    ebx = 0x0000001a;
    eax = ecx;
    edx = 0;
    sub_4c1a0();
    memoryASet32(ds, ecx + 12, edi);
    eax = memoryAGet32(ds, 0x26f77c);
    memoryASet32(ds, esi + 4, ecx);
    memoryASet32(ds, 0x26f77c, esi);
    memoryASet32(ds, esi, eax);
    eax = ecx;
    goto loc_46ece;
loc_46ec2: // 0160:46ec2
    eax = 0x00000005;
    sub_46ba8();
    eax = 0;
loc_46ece: // 0160:46ece
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46ed4() // 0160:46ed4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x0026f77c;
loc_46ede: // 0160:46ede
    eax = memoryAGet32(ds, edx);
    if (!eax)
        goto loc_46f09;
    ecx = memoryAGet32(ds, eax + 4);
    if (ebx == ecx)
        goto loc_46eef;
    edx = eax;
    goto loc_46ede;
loc_46eef: // 0160:46eef
    cl = memoryAGet(ds, ecx + 12);
    cl |= 0x03;
    memoryASet(ds, ebx + 12, cl);
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx = memoryAGet32(ds, 0x26f778);
    memoryASet32(ds, 0x26f778, eax);
    memoryASet32(ds, eax, edx);
loc_46f09: // 0160:46f09
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46f2b() // 0160:46f2b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (memoryAGet(ds, eax + 13) & 0x20)
        goto loc_46f58;
    eax = memoryAGet32(ds, edx + 16);
    sub_4c10d();
    if (!eax)
        goto loc_46f58;
    bl = memoryAGet(ds, edx + 13);
    bl |= 0x20;
    memoryASet(ds, edx + 13, bl);
    if (bl & 0x07)
        goto loc_46f58;
    cl = bl;
    cl |= 0x02;
    memoryASet(ds, edx + 13, cl);
loc_46f58: // 0160:46f58
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_46f5c() // 0160:46f5c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_46fc9;
    bh = memoryAGet(ds, ecx + 13);
    bh &= 0xef;
    al = memoryAGet(ds, ecx + 12);
    memoryASet(ds, ecx + 13, bh);
    if (!(al & 0x02))
        goto loc_47008;
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_47008;
    ebx = memoryAGet32(ds, ecx + 4);
    edx = memoryAGet32(ds, ecx + 8);
    eax = memoryAGet32(ds, ecx + 16);
    sub_4c293();
    if (eax != 0xffffffff)
        goto loc_46faa;
    dl = memoryAGet(ds, ecx + 12);
    dl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, dl);
    goto loc_47008;
loc_46faa: // 0160:46faa
    if (eax == memoryAGet32(ds, ecx + 4))
        goto loc_47008;
    eax = 0x0000000c;
    sub_46ba8();
    ah = memoryAGet(ds, ecx + 12);
    ah |= 0x20;
    esi = 0xffffffff;
    memoryASet(ds, ecx + 12, ah);
    goto loc_47008;
loc_46fc9: // 0160:46fc9
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_47008;
    dl = memoryAGet(ds, ecx + 12);
    dl &= 0xef;
    dh = memoryAGet(ds, ecx + 13);
    memoryASet(ds, ecx + 12, dl);
    if (dh & 0x20)
        goto loc_47008;
    eax = memoryAGet32(ds, ecx + 4);
    if (!eax)
        goto loc_46ff8;
    edx = eax;
    ebx = 0x00000001;
    edx = -edx;
    eax = memoryAGet32(ds, ecx + 16);
    sub_4701b();
loc_46ff8: // 0160:46ff8
    if (eax != 0xffffffff)
        goto loc_47008;
    bl = memoryAGet(ds, ecx + 12);
    bl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, bl);
loc_47008: // 0160:47008
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
    eax = esi;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4701b() // 0160:4701b +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    eax = ebx;
    edi = esp;
    ebx = ecx;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    memoryASet16(ss, edi, ax);
    memoryASet16(ss, edi + 2, dx);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_47053;
    eax &= 0x0000ffff;
    sub_4760d();
    eax = 0xffffffff;
    goto loc_47056;
loc_47053: // 0160:47053
    eax = memoryAGet32(ds, esp);
loc_47056: // 0160:47056
    esp += 0x00000004;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4705c() // 0160:4705c +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0x00000001;
    edx = 0;
    sub_4701b();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4706d() // 0160:4706d +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x5cdc8);
    esp += 4;
}
void sub_47073() // 0160:47073 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    ebx = eax;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_47093;
    eax = edx;
    edx = 0;
    sub_4c180();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_47093: // 0160:47093
    eax = 0x00000004;
    sub_46ba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_470a5()
{
  sub_4c30f();
}

void sub_470aa() // 0160:470aa +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = eax;
    sub_46f2b();
    if (memoryAGet32(ds, edx + 20) != 0x00000000)
        goto loc_470df;
    ah = memoryAGet(ds, edx + 13);
    if (!(ah & 0x02))
        goto loc_470ca;
    memoryASet32(ds, edx + 20, 0x00000086);
    goto loc_470df;
loc_470ca: // 0160:470ca
    if (!(ah & 0x04))
        goto loc_470d8;
    memoryASet32(ds, edx + 20, 0x00000001);
    goto loc_470df;
loc_470d8: // 0160:470d8
    memoryASet32(ds, edx + 20, 0x00001000);
loc_470df: // 0160:470df
    eax = memoryAGet32(ds, edx + 20);
    sub_459a1();
    memoryASet32(ds, edx + 8, eax);
    if (eax)
        goto loc_4710e;
    eax = edx + 24;
    cl = memoryAGet(ds, edx + 13);
    memoryASet32(ds, edx + 20, 0x00000001);
    cl &= 0xf8;
    memoryASet32(ds, edx + 8, eax);
    ch = cl;
    memoryASet(ds, edx + 13, cl);
    ch |= 0x04;
    memoryASet(ds, edx + 13, ch);
    goto loc_47112;
loc_4710e: // 0160:4710e
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x08);
loc_47112: // 0160:47112
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_47121() // 0160:47121 +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx;
    ebx = eax;
    ah = 0x3f;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_4713e;
    eax &= 0x0000ffff;
    sub_4760d();
loc_4713e: // 0160:4713e
    ecx = pop32();
    esp += 4;
}
void sub_471f8() // 0160:471f8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    if (memoryAGet32(ds, eax + 8) != 0x00000000)
        goto loc_47209;
    sub_470aa();
loc_47209: // 0160:47209
    ah = memoryAGet(ds, ecx + 13);
    if (!(ah & 0x20))
        goto loc_47220;
    if (!(ah & 0x06))
        goto loc_47220;
    eax = 0x00002000;
    sub_4c333();
loc_47220: // 0160:47220
    edx = memoryAGet32(ds, ecx + 12);
    bl = memoryAGet(ds, ecx + 12);
    eax = memoryAGet32(ds, ecx + 8);
    bl &= 0xfb;
    memoryASet32(ds, ecx, eax);
    edx &= 0x00002400;
    memoryASet(ds, ecx + 12, bl);
    if (edx != 0x00002400)
        goto loc_47260;
    ebx = memoryAGet32(ds, ecx + 16);
    if (ebx)
        goto loc_47260;
    memoryASet32(ds, ecx + 4, ebx);
    sub_4c362();
    if (eax == 0xffffffff)
        goto loc_4727d;
    ebx = memoryAGet32(ds, ecx);
    memoryASet(ds, ebx, al);
    memoryASet32(ds, ecx + 4, 0x00000001);
    goto loc_4727d;
loc_47260: // 0160:47260
    if (!(memoryAGet(ds, ecx + 13) & 0x04))
        goto loc_4726d;
    ebx = 0x00000001;
    goto loc_47270;
loc_4726d: // 0160:4726d
    ebx = memoryAGet32(ds, ecx + 20);
loc_47270: // 0160:47270
    edx = memoryAGet32(ds, ecx);
    eax = memoryAGet32(ds, ecx + 16);
    sub_47121();
    memoryASet32(ds, ecx + 4, eax);
loc_4727d: // 0160:4727d
    esi = memoryAGet32(ds, ecx + 4);
    if ((int32_t)esi > 0)
        goto loc_4729b;
    if (esi)
        goto loc_4728c;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x10);
    goto loc_4729b;
loc_4728c: // 0160:4728c
    al = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx + 4, 0x00000000);
    al |= 0x20;
    memoryASet(ds, ecx + 12, al);
loc_4729b: // 0160:4729b
    eax = memoryAGet32(ds, ecx + 4);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_472a3() // 0160:472a3 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000018;
    push32(eax);
    push32(edx);
    push32(ebx);
    sub_4c12b();
    edx = eax;
    memoryASet32(ss, ebp + -24, eax);
    if (eax)
        goto loc_472d1;
    eax = 0x00000004;
loc_472c2: // 0160:472c2
    sub_46ba8();
    eax = 0xffffffff;
    goto loc_4746d;
loc_472d1: // 0160:472d1
    if (al & 0x02)
        goto loc_472dc;
    eax = 0x00000006;
    goto loc_472c2;
loc_472dc: // 0160:472dc
    if (!(al & 0x80))
        goto loc_47313;
    ebx = memoryAGet32(ss, ebp + -28);
    edx ^= eax;
    al = 0x02;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    memoryASet32(ss, ebp + -16, edx);
    if ((int32_t)edx >= 0)
        goto loc_47313;
loc_47303: // 0160:47303
    eax = 0;
    ax = memoryAGet16(ss, ebp + -16);
    sub_4760d();
    goto loc_4746d;
loc_47313: // 0160:47313
    if (!(memoryAGet(ss, ebp + -24) & 0x40))
        goto loc_4734e;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = memoryAGet32(ss, ebp + -32);
    ecx = memoryAGet32(ss, ebp + -36);
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_47303;
    if (eax == memoryAGet32(ss, ebp + -36))
        goto loc_4746a;
    eax = 0x0000000c;
    sub_46ba8();
    memoryASet32(ss, ebp + -36, edx);
    goto loc_4746a;
loc_4734e: // 0160:4734e
    sub_48c46();
    edx = eax;
    if (eax >= 0x000000b0)
        goto loc_47361;
    sub_4c3b9();
loc_47361: // 0160:47361
    edi = 0x00000200;
    if (edx >= 0x00000230)
        goto loc_47373;
    edi = 0x00000080;
loc_47373: // 0160:47373
    eax = edi + 3;
    edx = 0;
    al &= 0xfc;
    esi = 0;
    esp -= eax;
    memoryASet32(ss, ebp + -4, edx);
    memoryASet32(ss, ebp + -20, edx);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -8, esp);
    memoryASet32(ss, ebp + -12, eax);
loc_4738d: // 0160:4738d
    eax = memoryAGet32(ss, ebp + -4);
    if (eax >= memoryAGet32(ss, ebp + -36))
        goto loc_47434;
    eax = memoryAGet32(ss, ebp + -12);
    if (memoryAGet(ds, eax) != 0x0a)
        goto loc_473e9;
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet(ds, esi + eax, 0x0d);
    esi++;
    if (esi != edi)
        goto loc_473e9;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = eax;
    ecx = edi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_47303;
    if (eax == edi)
        goto loc_473e1;
loc_473cd: // 0160:473cd
    eax = 0x0000000c;
    sub_46ba8();
    eax = memoryAGet32(ss, ebp + -20);
    eax += esi;
    goto loc_4746d;
loc_473e1: // 0160:473e1
    eax = memoryAGet32(ss, ebp + -4);
    esi ^= edi;
    memoryASet32(ss, ebp + -20, eax);
loc_473e9: // 0160:473e9
    eax = memoryAGet32(ss, ebp + -8);
    edx = memoryAGet32(ss, ebp + -12);
    ebx = memoryAGet32(ss, ebp + -12);
    ecx = memoryAGet32(ss, ebp + -4);
    ebx++;
    ecx++;
    dl = memoryAGet(ds, edx);
    memoryASet32(ss, ebp + -12, ebx);
    memoryASet(ds, esi + eax, dl);
    esi++;
    memoryASet32(ss, ebp + -4, ecx);
    if (esi != edi)
        goto loc_4738d;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = eax;
    ecx = edi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_47303;
    if (eax != edi)
        goto loc_473cd;
    eax = memoryAGet32(ss, ebp + -4);
    esi ^= edi;
    memoryASet32(ss, ebp + -20, eax);
    goto loc_4738d;
loc_47434: // 0160:47434
    if (!esi)
        goto loc_4746a;
    ebx = memoryAGet32(ss, ebp + -28);
    edx = memoryAGet32(ss, ebp + -8);
    ecx = esi;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)eax < 0)
        goto loc_47303;
    if (eax == esi)
        goto loc_4746a;
    eax = 0x0000000c;
    sub_46ba8();
    eax = memoryAGet32(ss, ebp + -20);
    eax += edx;
    goto loc_4746d;
loc_4746a: // 0160:4746a
    eax = memoryAGet32(ss, ebp + -36);
loc_4746d: // 0160:4746d
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_47474() // 0160:47474 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet(ds, edx + 12) & 0x02)
        goto loc_47499;
    eax = 0x00000004;
    sub_46ba8();
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x20);
loc_4748f: // 0160:4748f
    eax = 0xffffffff;
    goto loc_47512;
loc_47499: // 0160:47499
    if (memoryAGet32(ds, edx + 8) != 0x00000000)
        goto loc_474a6;
    eax = edx;
    sub_470aa();
loc_474a6: // 0160:474a6
    ecx = 0x00000400;
    if (ebx != 0x0000000a)
        goto loc_474e3;
    al = memoryAGet(ds, edx + 12);
    ecx = 0x00000600;
    if (al & 0x40)
        goto loc_474e3;
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, 0x0d);
    esi = memoryAGet32(ds, edx);
    esi++;
    edi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, esi);
    edi++;
    ebp = memoryAGet32(ds, edx + 20);
    memoryASet32(ds, edx + 4, edi);
    if (edi != ebp)
        goto loc_474e3;
    eax = edx;
    sub_46f5c();
    if (eax)
        goto loc_4748f;
loc_474e3: // 0160:474e3
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, bl);
    eax = memoryAGet32(ds, edx);
    eax++;
    esi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, eax);
    esi++;
    edi = memoryAGet32(ds, edx + 12);
    memoryASet32(ds, edx + 4, esi);
    if (ecx & edi)
        goto loc_47503;
    if (esi != memoryAGet32(ds, edx + 20))
        goto loc_4750e;
loc_47503: // 0160:47503
    eax = edx;
    sub_46f5c();
    if (eax)
        goto loc_4748f;
loc_4750e: // 0160:4750e
    eax = 0;
    al = bl;
loc_47512: // 0160:47512
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47518() // 0160:47518 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = cs;
    memoryASet16(ds, edx + 2, ax);
    eax = ds;
    memoryASet16(ds, edx + 6, ax);
    eax = es;
    memoryASet16(ds, edx, ax);
    eax = ss;
    memoryASet16(ds, edx + 4, ax);
    eax = fs;
    memoryASet16(ds, edx + 8, ax);
    eax = gs;
    memoryASet16(ds, edx + 10, ax);
    edx = pop32();
    esp += 4;
}
void sub_47540() // 0160:47540 +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x00000004;
loc_47544: // 0160:47544
    if (ebx)
        goto loc_4754f;
loc_47548: // 0160:47548
    eax = 0;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_4754f: // 0160:4754f
    ch = memoryAGet(ds, edx);
    cl = memoryAGet(ds, eax);
    memoryASet(ds, esp, ch);
    if (cl < 0x41)
        goto loc_47563;
    if (cl > 0x5a)
        goto loc_47563;
    cl += 0x20;
loc_47563: // 0160:47563
    ch = memoryAGet(ds, esp);
    if (ch < 0x41)
        goto loc_47576;
    if (ch > 0x5a)
        goto loc_47576;
    ch += 0x20;
    memoryASet(ds, esp, ch);
loc_47576: // 0160:47576
    ch = memoryAGet(ds, esp);
    if (cl == ch)
        goto loc_4758e;
    edx = 0;
    eax = 0;
    dl = cl;
    al = ch;
    edx -= eax;
    eax = edx;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_4758e: // 0160:4758e
    if (!ch)
        goto loc_47548;
    eax++;
    edx++;
    ebx--;
    goto loc_47544;
}
void sub_47597() // 0160:47597 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    ebx = eax;
loc_475a5: // 0160:475a5
    ah = 0x2c;
    interrupt(0x21);
    eax = 0;
    al = dh;
    if (ebx == eax)
        goto loc_475a5;
    esi = 0;
    bl = al;
loc_475b5: // 0160:475b5
    ah = 0x2c;
    interrupt(0x21);
    esi++;
    if (bl == dh)
        goto loc_475b5;
    memoryASet32(ds, 0x26f780, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_475c9() // 0160:475c9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    if (!eax)
        goto loc_475fc;
    eax = (int32_t)eax * (int32_t)memoryAGet32(ds, 0x26f780);
    esi = 0x000003e8;
    eax += 0x000001f4;
    edx = 0;
    div32(esi);
    esi = eax;
    if (eax)
        goto loc_475ef;
    esi = eax + 1;
loc_475ef: // 0160:475ef
    eax = 0;
    bl = al;
loc_475f3: // 0160:475f3
    ah = 0x2c;
    interrupt(0x21);
    esi--;
    if (esi)
        goto loc_475f3;
loc_475fc: // 0160:475fc
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47608() // 0160:47608 +long
{
    esp -= 4;
    if (edx)
        goto loc_4760d;
    esp += 4;
    return;
loc_4760d: // 0160:4760d
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_46bcb();
    if (edx >= 0x00000100)
        goto loc_4765c;
    if (memoryAGet(ds, 0x5cdf3) < 0x03)
        goto loc_47646;
    if (dl != 0x50)
        goto loc_47636;
    bl = 0x0e;
    goto loc_47646;
loc_47636: // 0160:47636
    if (dl < 0x22)
        goto loc_4763f;
    bl = 0x13;
    goto loc_47646;
loc_4763f: // 0160:4763f
    if (dl < 0x20)
        goto loc_47646;
    bl = 0x05;
loc_47646: // 0160:47646
    if (bl <= 0x13)
        goto loc_4764d;
    bl = 0x13;
loc_4764d: // 0160:4764d
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 381025);
    eax = sar32(eax, 0x18);
    goto loc_47666;
loc_4765c: // 0160:4765c
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_47666: // 0160:47666
    sub_46ba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4760d() // 0160:4760d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_46bcb();
    if (edx >= 0x00000100)
        goto loc_4765c;
    if (memoryAGet(ds, 0x5cdf3) < 0x03)
        goto loc_47646;
    if (dl != 0x50)
        goto loc_47636;
    bl = 0x0e;
    goto loc_47646;
loc_47636: // 0160:47636
    if (dl < 0x22)
        goto loc_4763f;
    bl = 0x13;
    goto loc_47646;
loc_4763f: // 0160:4763f
    if (dl < 0x20)
        goto loc_47646;
    bl = 0x05;
loc_47646: // 0160:47646
    if (bl <= 0x13)
        goto loc_4764d;
    bl = 0x13;
loc_4764d: // 0160:4764d
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 381025);
    eax = sar32(eax, 0x18);
    goto loc_47666;
loc_4765c: // 0160:4765c
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_47666: // 0160:47666
    sub_46ba8();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47674() // 0160:47674 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_476c3;
    flags.carry = ((uint64_t)eax + 0x00000007) >= 0x100000000ull;
    eax += 0x00000007;
    if (flags.carry)
        goto loc_476c3;
    al &= 0xfc;
    edx = 0x0000000c;
    flags.carry = eax < edx;
    eax -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    eax &= ecx;
    eax += edx;
    if (eax > memoryAGet32(ds, ebx + 20))
        goto loc_476c3;
    esi = memoryAGet32(ds, ebx + 12);
    edi = memoryAGet32(ds, ebx + 16);
    if (eax > edi)
        goto loc_476a7;
    esi = memoryAGet32(ds, ebx + 40);
    edi = 0;
loc_476a7: // 0160:476a7
    edx = memoryAGet32(ds, esi);
    if (eax <= edx)
        goto loc_476c7;
    flags.carry = edi < edx;
    edi -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    edi &= ecx;
    edi += edx;
    edx = ebx + 32;
    esi = memoryAGet32(ds, esi + 8);
    if (esi != edx)
        goto loc_476a7;
    memoryASet32(ds, ebx + 20, edi);
loc_476c3: // 0160:476c3
    eax = 0;
    goto loc_47712;
loc_476c7: // 0160:476c7
    edx -= eax;
    memoryASet32(ds, ebx + 16, edi);
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) + 1);
    ecx = memoryAGet32(ds, esi + 8);
    if (edx < 0x0000000c)
        goto loc_476f5;
    edi = esi;
    edi += eax;
    memoryASet32(ds, ebx + 12, edi);
    memoryASet32(ds, edi, edx);
    memoryASet32(ds, esi, eax);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, ebx + 8, edi);
    ebx = ecx;
    memoryASet32(ds, ebx + 4, edi);
    goto loc_4770a;
loc_476f5: // 0160:476f5
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    eax = esi;
    edi = ecx;
    esi = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi + 8, edi);
    memoryASet32(ds, edi + 4, esi);
    memoryASet32(ds, ebx + 12, esi);
    esi = eax;
loc_4770a: // 0160:4770a
    memoryASet32(ds, esi, memoryAGet32(ds, esi) | 0x00000001);
    eax = esi;
    eax += 0x00000004;
loc_47712: // 0160:47712
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4771c() // 0160:4771c +long
{
    esp -= 4;
    goto loc_4771c;
loc_47717: // 0160:47717
    goto loc_47822;
loc_4771c: // 0160:4771c
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_47717;
    esi = eax;
    esi -= 0x00000004;
    eax = memoryAGet32(ds, esi);
    if (!(al & 0x01))
        goto loc_47717;
    al &= 0xfe;
    edi = esi;
    edi += eax;
    if (memoryAGet32(ds, edi) & 0x00000001)
        goto loc_4775e;
    if (edi != memoryAGet32(ds, ebx + 12))
        goto loc_47747;
    memoryASet32(ds, ebx + 12, esi);
loc_47747: // 0160:47747
    eax += memoryAGet32(ds, edi);
    memoryASet32(ds, esi, eax);
    push32(ebx);
    ebx = memoryAGet32(ds, edi + 4);
    edi = memoryAGet32(ds, edi + 8);
    memoryASet32(ds, ebx + 8, edi);
    memoryASet32(ds, edi + 4, ebx);
    ebx = pop32();
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    goto loc_477da;
loc_4775e: // 0160:4775e
    memoryASet32(ds, esi, eax);
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_47775;
    if (esi > memoryAGet32(ds, edi + 4))
        goto loc_477da;
    edi = memoryAGet32(ds, ebx + 40);
    if (esi < edi)
        goto loc_477da;
    goto loc_47784;
loc_47775: // 0160:47775
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_477da;
    edi = ebx + 32;
    if (esi > memoryAGet32(ds, ebx + 36))
        goto loc_477da;
loc_47784: // 0160:47784
    edx = 0;
    eax = memoryAGet32(ds, ebx + 24);
    ecx = memoryAGet32(ds, ebx + 28);
    ecx++;
    div32(ecx);
    ecx--;
    if (eax >= ecx)
        goto loc_477b9;
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ecx;
    eax += eax;
    if (edx > ecx)
        goto loc_477a1;
    eax = 0;
loc_477a1: // 0160:477a1
    edi = esi;
    edi += memoryAGet32(ds, esi);
loc_477a5: // 0160:477a5
    edx = memoryAGet32(ds, edi);
    if (!(dl & 0x01))
        goto loc_477da;
    if (edx == 0xffffffff)
        goto loc_477b9;
    dl &= 0xfe;
    edi += edx;
    eax--;
    if (eax)
        goto loc_477a5;
loc_477b9: // 0160:477b9
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_477c3;
    edi = memoryAGet32(ds, ebx + 40);
loc_477c3: // 0160:477c3
    if (esi < edi)
        goto loc_477da;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_477da;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_477da;
    edi = memoryAGet32(ds, edi + 8);
    goto loc_477c3;
loc_477da: // 0160:477da
    edx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, esi);
    etx = edx; edx = edi; edi = etx;
    eax = edi;
    eax += memoryAGet32(ds, edi);
    if (eax != esi)
        goto loc_477f9;
    ecx += memoryAGet32(ds, edi);
    memoryASet32(ds, edi, ecx);
    if (esi != memoryAGet32(ds, ebx + 12))
        goto loc_477f5;
    memoryASet32(ds, ebx + 12, edi);
loc_477f5: // 0160:477f5
    esi = edi;
    goto loc_4780a;
loc_477f9: // 0160:477f9
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) + 1);
    memoryASet32(ds, esi + 8, edx);
    memoryASet32(ds, esi + 4, edi);
    memoryASet32(ds, edi + 8, esi);
    edi = edx;
    memoryASet32(ds, edi + 4, esi);
loc_4780a: // 0160:4780a
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) - 1);
    if (esi >= memoryAGet32(ds, ebx + 12))
        goto loc_4781a;
    if (ecx <= memoryAGet32(ds, ebx + 16))
        goto loc_4781a;
    memoryASet32(ds, ebx + 16, ecx);
loc_4781a: // 0160:4781a
    if (ecx <= memoryAGet32(ds, ebx + 20))
        goto loc_47822;
    memoryASet32(ds, ebx + 20, ecx);
loc_47822: // 0160:47822
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_47827() // 0160:47827 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5cdb0);
    if (eax != edx)
        goto loc_4783c;
    edx = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, 0x5cdb0, edx);
loc_4783c: // 0160:4783c
    ebx = memoryAGet32(ds, 0x5cdac);
    if (eax != ebx)
        goto loc_4784f;
    edx = memoryAGet32(ds, ebx + 8);
    memoryASet32(ds, 0x5cdac, edx);
loc_4784f: // 0160:4784f
    edx = memoryAGet32(ds, eax + 4);
    eax = memoryAGet32(ds, eax + 8);
    if (!edx)
        goto loc_4785c;
    memoryASet32(ds, edx + 8, eax);
loc_4785c: // 0160:4785c
    if (!eax)
        goto loc_47863;
    memoryASet32(ds, eax + 4, edx);
loc_47863: // 0160:47863
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47866() // 0160:47866 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x5cdac);
loc_47871: // 0160:47871
    if (!edx)
        goto loc_47b56;
    eax = memoryAGet32(ds, edx + 36);
    eax = memoryAGet32(ds, eax);
    ebx = memoryAGet32(ds, edx);
    eax += 0x0000002c;
    if (eax != ebx)
        goto loc_478bf;
    ebx = edx + -8;
    eax = edx;
    ecx = memoryAGet32(ds, edx + 8);
    sub_47827();
    edx = ecx;
    ecx = memoryAGet32(ds, ebx + 4);
    if (ecx)
        goto loc_478af;
    eax = memoryAGet32(ds, ebx);
    eax >>= 16;
    di = memoryAGet16(ds, ebx);
    esi = eax;
    ah = 0x05;
    al = 0x02;
    interrupt(0x31);
    goto loc_47871;
loc_478af: // 0160:478af
    eax = ecx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    goto loc_47871;
loc_478bf: // 0160:478bf
    edx = memoryAGet32(ds, edx + 8);
    goto loc_47871;
    // gap 658 bytes
loc_47b56: // 0160:47b56
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_479c7() // 0160:479c7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x5cdac);
    ebx = 0;
    goto loc_479dd;
loc_479d4: // 0160:479d4
    if (edx < eax)
        goto loc_479e1;
    ebx = eax;
    eax = memoryAGet32(ds, eax + 8);
loc_479dd: // 0160:479dd
    if (eax)
        goto loc_479d4;
loc_479e1: // 0160:479e1
    memoryASet32(ds, edx + 4, ebx);
    memoryASet32(ds, edx + 8, eax);
    if (!ebx)
        goto loc_479f0;
    memoryASet32(ds, ebx + 8, edx);
    goto loc_479f6;
loc_479f0: // 0160:479f0
    memoryASet32(ds, 0x5cdac, edx);
loc_479f6: // 0160:479f6
    if (!eax)
        goto loc_479fd;
    memoryASet32(ds, eax + 4, edx);
loc_479fd: // 0160:479fd
    ebx = edx + 32;
    eax = memoryAGet32(ds, edx);
    edx += 0x0000002c;
    memoryASet32(ds, edx + -12, 0x00000000);
    memoryASet32(ds, edx + -28, 0x00000000);
    memoryASet32(ds, edx + -20, 0x00000000);
    memoryASet32(ds, edx + -16, 0x00000000);
    memoryASet32(ds, edx + -8, ebx);
    memoryASet32(ds, edx + -4, ebx);
    eax -= 0x0000002c;
    memoryASet32(ds, edx + -32, ebx);
    memoryASet32(ds, edx, eax);
    memoryASet32(ds, edx + eax, 0xffffffff);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47a3b() // 0160:47a3b +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x5cdac);
    if (!edx)
        goto loc_47a84;
    edx = memoryAGet32(ds, edx + 36);
    ebx = memoryAGet32(ds, edx);
    ebx += edx;
    ah = memoryAGet(ds, 0x5cdea);
    ebx += 0x00000004;
    if (ah < 0x02)
        goto loc_47a77;
    if (ah > 0x08)
        goto loc_47a77;
    if (memoryAGet(ds, 0x5cdec) != 0x00)
        goto loc_47a77;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:47a6e lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x5cdbc, eax);
loc_47a77: // 0160:47a77
    if (ebx != memoryAGet32(ds, 0x5cdbc))
        goto loc_47a84;
    eax = memoryAGet32(ds, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_47a84: // 0160:47a84
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47a89() // 0160:47a89 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    sub_47866();
    eax = memoryAGet32(ds, esp);
    eax >>= 16;
    ecx = memoryAGet32(ds, esp);
    ebx = eax;
    ah = 0x05;
    al = 0x01;
    interrupt(0x31);
    eax = -flags.carry;
    eax++;
    if (!eax)
        goto loc_47aba;
    ax = bx;
    eax <<= 16;
    ax = cx;
    memoryASet16(ds, eax, di);
    memoryASet16(ds, eax + 2, si);
loc_47aba: // 0160:47aba
    if (!eax)
        goto loc_47ad7;
    ebx = memoryAGet32(ds, esp);
    edx = eax + 8;
    ebx -= 0x00000008;
    memoryASet32(ds, edx, ebx);
    memoryASet32(ds, eax + 4, 0x00000000);
    eax = edx;
    goto loc_47b53;
loc_47ad7: // 0160:47ad7
    if (!(memoryAGet16(ds, 0x26f83e) & 0xfff0))
        goto loc_47aec;
    memoryASet32(ds, 0x26f83c, 0x000fffff);
loc_47aec: // 0160:47aec
    if (memoryAGet32(ds, esp) > 0x00010000)
        goto loc_47b51;
    ebx = memoryAGet32(ds, 0x26f83c);
    ebx >>= 4;
    bl |= 0x01;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax < 0)
        goto loc_47b51;
    ebx = memoryAGet32(ds, esp);
    ebx >>= 4;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    ebx = eax;
    eax = edx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    if ((int32_t)esi < 0)
        goto loc_47b51;
    ah = 0x00;
    al = 0x06;
    interrupt(0x31);
    eax = ecx;
    eax <<= 16;
    ax = dx;
    eax += 0x00000008;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + -4, esi);
    edx -= 0x00000008;
    memoryASet32(ds, eax, edx);
    goto loc_47b53;
loc_47b51: // 0160:47b51
    eax = 0;
loc_47b53: // 0160:47b53
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47b5c() // 0160:47b5c +long
{
    esp -= 4;
    goto loc_47b5c;
loc_47b53: // 0160:47b53
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_47b5c: // 0160:47b5c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    if (memoryAGet32(ds, 0x5d218) != 0x00000000)
        goto loc_47b6f;
loc_47b6b: // 0160:47b6b
    eax = 0;
    goto loc_47b53;
loc_47b6f: // 0160:47b6f
    if (memoryAGet32(ds, 0x5cdbc) == 0xfffffffe)
        goto loc_47b6b;
    eax = esp;
    sub_47d4f();
    if (!eax)
        goto loc_47b53;
    if (memoryAGet(ds, 0x5cdea) != 0x01)
        goto loc_47ba3;
    eax = memoryAGet32(ds, esp);
    sub_47a89();
    ebx = eax;
    edx = eax;
    if (!eax)
        goto loc_47bbe;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    goto loc_47bbe;
loc_47ba3: // 0160:47ba3
    ebx = memoryAGet32(ds, esp);
    eax = 0x80004800;
    interrupt(0x21);
    ebx = -flags.carry;
    ebx = ~ebx;
    eax &= ebx;
    ecx = memoryAGet32(ds, esp);
    ecx -= 0x00000004;
    edx = eax;
    memoryASet32(ds, esp, ecx);
loc_47bbe: // 0160:47bbe
    if (!edx)
        goto loc_47b6b;
    eax = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp);
    eax -= 0x00000004;
    if (eax > esi)
        goto loc_47b6b;
    memoryASet32(ds, esp, eax);
    if (eax < 0x00000038)
        goto loc_47b6b;
    memoryASet32(ds, edx, eax);
    eax = edx;
    sub_479c7();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    edi = memoryAGet32(ds, edx + 24);
    memoryASet32(ds, edx + 20, 0xffffffff);
    edi++;
    eax = ebx + 4;
    memoryASet32(ds, edx + 24, edi);
    sub_45a84();
    eax = 0x00000001;
    goto loc_47b53;
}
void sub_47c0b() // 0160:47c0b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(eax);
    if (memoryAGet(ds, 0x5cdea) != 0x01)
        goto loc_47c23;
    if (memoryAGet(ds, 0x5cdeb) == 0x00)
        goto loc_47c2c;
loc_47c23: // 0160:47c23
    if (memoryAGet(ds, 0x5cdea) != 0x09)
        goto loc_47c39;
loc_47c2c: // 0160:47c2c
    eax = memoryAGet32(ds, esp);
    sub_47b5c();
    goto loc_47d46;
loc_47c39: // 0160:47c39
    if (memoryAGet32(ds, 0x5d218) != 0x00000000)
        goto loc_47c49;
loc_47c42: // 0160:47c42
    eax = 0;
    goto loc_47d46;
loc_47c49: // 0160:47c49
    if (memoryAGet32(ds, 0x5cdbc) == 0xfffffffe)
        goto loc_47c42;
    eax = esp;
    sub_47d4f();
    if (!eax)
        goto loc_47d46;
    bl = memoryAGet(ds, 0x5cdea);
    if (bl < 0x02)
        goto loc_47c87;
    if (bl > 0x08)
        goto loc_47c87;
    if (memoryAGet(ds, 0x5cdec) != 0x00)
        goto loc_47c87;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:47c7e lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x5cdbc, eax);
loc_47c87: // 0160:47c87
    edx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x5cdbc);
    edx += ecx;
    if (edx >= ecx)
        goto loc_47c9b;
    edx = 0xfffffffe;
loc_47c9b: // 0160:47c9b
    eax = edx;
    sub_4c56b();
    if (eax == 0xffffffff)
        goto loc_47c42;
    ebx = eax;
    if (eax > 0xfffffff8)
        goto loc_47c42;
    if (edx <= eax)
        goto loc_47c42;
    edx -= eax;
    eax = edx + -4;
    memoryASet32(ds, esp, edx);
    if (eax > edx)
        goto loc_47c42;
    edx = memoryAGet32(ds, 0x5cdac);
    memoryASet32(ds, esp, eax);
    goto loc_47cdb;
loc_47cc9: // 0160:47cc9
    ebp = memoryAGet32(ds, edx + 8);
    if (!ebp)
        goto loc_47cdf;
    if (edx > ebx)
        goto loc_47cd8;
    if (ebx < ebp)
        goto loc_47cdf;
loc_47cd8: // 0160:47cd8
    edx = memoryAGet32(ds, edx + 8);
loc_47cdb: // 0160:47cdb
    if (edx)
        goto loc_47cc9;
loc_47cdf: // 0160:47cdf
    if (!edx)
        goto loc_47d09;
    eax = memoryAGet32(ds, edx);
    ecx = ebx + -4;
    eax += edx;
    if (ecx != eax)
        goto loc_47d09;
    esi = memoryAGet32(ds, esp);
    esi += 0x00000004;
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + esi);
    ebp = memoryAGet32(ds, esp);
    ecx = eax + ebp;
    ebx = eax;
    memoryASet32(ds, ecx, 0xffffffff);
    goto loc_47d28;
loc_47d09: // 0160:47d09
    if (memoryAGet32(ds, esp) < 0x00000038)
        goto loc_47c42;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ebx, eax);
    eax = ebx;
    edx = ebx;
    sub_479c7();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
loc_47d28: // 0160:47d28
    eax = memoryAGet32(ds, esp);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, edx + 24, memoryAGet32(ds, edx + 24) + 1);
    eax = ebx + 4;
    memoryASet32(ds, edx + 20, 0xffffffff);
    sub_45a84();
    eax = 0x00000001;
loc_47d46: // 0160:47d46
    esp += 0x00000004;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47d4f() // 0160:47d4f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    ebx = eax;
    edx = memoryAGet32(ds, eax);
    edx += 0x00000003;
    dl &= 0xfc;
    if (edx)
        goto loc_47d66;
loc_47d60: // 0160:47d60
    eax = 0;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_47d66: // 0160:47d66
    if (memoryAGet(ds, 0x5cdea) != 0x01)
        goto loc_47d78;
    if (memoryAGet(ds, 0x5cdeb) == 0x00)
        goto loc_47d81;
loc_47d78: // 0160:47d78
    if (memoryAGet(ds, 0x5cdea) != 0x09)
        goto loc_47d86;
loc_47d81: // 0160:47d81
    edx += 0x00000008;
    goto loc_47d8d;
loc_47d86: // 0160:47d86
    sub_47a3b();
    edx -= eax;
loc_47d8d: // 0160:47d8d
    memoryASet32(ds, ebx, edx);
    edx += 0x0000003c;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_47d60;
    esi = memoryAGet32(ds, 0x5d21c);
    if (edx >= esi)
        goto loc_47da5;
    edx = esi;
    dl &= 0xfe;
loc_47da5: // 0160:47da5
    memoryASet32(ds, ebx, edx);
    edx += 0x00000fff;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_47d60;
    dh &= 0xf0;
    dl = 0;
    memoryASet32(ds, ebx, edx);
    al = !!(edx);
    eax &= 0x000000ff;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_47dc6() // 0160:47dc6 +long
{
    esp -= 4;
    eax = 0;
    esp += 4;
}
void sub_47dca() // 0160:47dca +long
{
    esp -= 4;
    push32(ebp);
    push(es);
    push32(ebx);
    push(ds);
    push32(edx);
    sub_47e02();
    push(ds);
    push32(edi);
    ebp = esp;
    edi = memoryAGet32(ss, ebp + 8);
    ds = memoryAGet16(ss, ebp + 12);
    memoryASet32(ds, edi, eax);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, edi + 12, edx);
    memoryASet32(ds, edi + 16, esi);
    memoryASet32(ds, edi + 20, pop32());
    eax = -flags.carry;
    memoryASet32(ds, edi + 24, eax);
    eax = pop32();
    ebx = pop32();
    ebx = pop32();
    ebx = pop32();
    memoryASet16(ds, ebx + 6, ax);
    memoryASet16(ds, ebx, es);
    es = pop();
    ebp = pop32();
    esp += 4;
}
void sub_47e02() // 0160:47e02 +long +returnCarry
{
    esp -= 4;
    esi = esi + esi*2;
    eax = esi + 294568;
    push32(eax);
    es = memoryAGet16(ds, ebx);
    bp = memoryAGet16(ds, ebx + 6);
    eax = memoryAGet32(ds, edi);
    ebx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, edi + 8);
    edx = memoryAGet32(ds, edi + 12);
    esi = memoryAGet32(ds, edi + 16);
    edi = memoryAGet32(ds, edi + 20);
    ds = ebp;
    switch (memoryAGet16(cs, pop32()))
    {
        case 0x31cd: interrupt(0x31); break;
        case 0x33cd: interrupt(0x33); break;
        case 0x10cd: interrupt(0x10); break;
        default:
            assert(0);
    }
    esp += 4;
}
void sub_481cd() // 0160:481cd +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    ebp = edx;
    edi = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 1;
    memoryASet(ds, esp, dl);
loc_481e3: // 0160:481e3
    ebx = esp + 36;
    memoryASet32(ds, esp + 36, edi);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, eax);
    al = memoryAGet(cs, edx + 295336);
    memoryASet(ds, ecx, al);
    eax = memoryAGet32(ds, esp + 36);
    ecx++;
    if (eax)
        goto loc_481e3;
loc_48203: // 0160:48203
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_48203;
    eax = ebp;
    esp += 0x00000028;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_48217() // 0160:48217 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_48229;
    if ((int32_t)eax >= 0)
        goto loc_48229;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_48229: // 0160:48229
    sub_481cd();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_48269() // 0160:48269 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(ebp);
    esp -= 0x00000028;
    push32(edx);
    ebp = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 5;
    memoryASet(ds, esp + 4, dl);
loc_4827e: // 0160:4827e
    ebx = esp + 40;
    memoryASet32(ds, esp + 40, ebp);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, edx);
    edx = memoryAGet32(ds, esp + 40);
    dl = memoryAGet(cs, edx + 295492);
    memoryASet(ds, ecx, dl);
    ecx++;
    if (eax)
        goto loc_4827e;
loc_4829e: // 0160:4829e
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_4829e;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000002c;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_482b2() // 0160:482b2 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_482c4;
    if ((int32_t)eax >= 0)
        goto loc_482c4;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_482c4: // 0160:482c4
    sub_48269();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_482cd() // 0160:482cd +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_482da;
    if ((int32_t)eax > (int32_t)0x0000007a)
        goto loc_482da;
    eax -= 0x00000020;
loc_482da: // 0160:482da
    esp += 4;
    return;
}
void sub_482db() // 0160:482db +long
{
    return;
    esp -= 4;
    push32(0x000000b4);
    sub_4c388();
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:482e7 enter 0xa0, 0");
    push32(eax);
    ebp -= 0x00000082;
    esi = edx;
    memoryASet32(ss, ebp + 122, ebx);
    memoryASet32(ss, ebp + 118, ecx);
    sub_4c6c7();
    ecx = eax;
    edx = eax;
    if (eax != 0xffffffff)
        goto loc_48400;
    sub_4c101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_48400;
    if (memoryAGet(ds, esi) == 0x5c)
        goto loc_48400;
    if (memoryAGet(ds, esi) == 0x00)
        goto loc_48400;
    if (memoryAGet(ds, esi + 1) == 0x3a)
        goto loc_48400;
    eax = 0x0004f334;
    sub_45798();
    ebx = eax;
    if (eax)
        goto loc_4834d;
    eax = ecx;
    goto loc_48402;
loc_4834d: // 0160:4834d
    eax = esi;
    sub_4c9c5();
    eax++;
    memoryASet32(ss, ebp + 126, eax);
    eax = 0x00000090;
    eax -= memoryAGet32(ss, ebp + 126);
    memoryASet32(ss, ebp + 114, eax);
loc_48363: // 0160:48363
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_48400;
    edx = 0x0000003b;
    eax = ebx;
    sub_4c9de();
    edi = eax;
    if (eax)
        goto loc_48388;
    eax = ebx;
    sub_4c9c5();
    edi = ebx + eax;
loc_48388: // 0160:48388
    ecx = edi;
    ecx -= ebx;
    if (ecx <= memoryAGet32(ss, ebp + 114))
        goto loc_483ac;
    eax = 0x00000002;
    sub_46ba8();
    eax = 0x0000000a;
    sub_46bcb();
    eax = 0xffffffff;
    goto loc_48402;
loc_483ac: // 0160:483ac
    eax = ebp + -30;
    edx = ebx;
    ebx = ecx;
    sub_4c9f8();
    eax = ebp + -30;
    eax += ecx;
    if (memoryAGet(ds, eax + -1) == 0x5c)
        goto loc_483c7;
    memoryASet(ds, eax, 0x5c);
    eax++;
loc_483c7: // 0160:483c7
    ebx = memoryAGet32(ss, ebp + 126);
    edx = esi;
    ecx = memoryAGet32(ss, ebp + 118);
    sub_4c9f8();
    eax = memoryAGet32(ss, ebp + -34);
    edx = ebp + -30;
    ebx = memoryAGet32(ss, ebp + 122);
    sub_4c6c7();
    edx = eax;
    if (eax != 0xffffffff)
        goto loc_48400;
    sub_4c101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_48400;
    if (memoryAGet(ds, edi) != 0x3b)
        goto loc_48400;
    ebx = edi + 1;
    goto loc_48363;
loc_48400: // 0160:48400
    eax = edx;
loc_48402: // 0160:48402
    esp = ebp + 130;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_4840c() // 0160:4840c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    if (bl & 0x03)
        goto loc_48441;
    edx = eax;
    ecx = 0x00000064;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_4842f;
loc_48426: // 0160:48426
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_4842f: // 0160:4842f
    ecx = 0x00000190;
    edx = ebx;
    eax = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    if (!edx)
        goto loc_48426;
loc_48441: // 0160:48441
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_48447() // 0160:48447 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000024;
    ebx = eax;
    ecx = memoryAGet32(ds, eax + 32);
    if (ecx)
        goto loc_48514;
    eax = edx + 1900;
    sub_4840c();
    if (!eax)
        goto loc_4847e;
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax * 2 + 0x4f3d2);
    eax = memoryAGet32(ds, eax * 2 + 0x4f3d0);
    goto loc_4848f;
loc_4847e: // 0160:4847e
    eax = memoryAGet32(ds, ebx + 16);
    esi = memoryAGet32(ds, eax * 2 + 0x4f3b8);
    eax = memoryAGet32(ds, eax * 2 + 0x4f3b6);
loc_4848f: // 0160:4848f
    esi = sar32(esi, 0x10);
    eax = sar32(eax, 0x10);
    esi -= eax;
    edi = 0;
    ecx = 0x00000001;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    memoryASet32(ds, esp + 12, ecx);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, esp + 16, eax);
    memoryASet32(ds, esp + 20, edx);
    eax = esp;
    memoryASet32(ds, esp + 32, edi);
    sub_465c6();
    ebp = memoryAGet32(ds, esp + 24);
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ebp;
    edx += 0x00000007;
    ecx = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    eax = memoryAGet32(ds, ebx + 12);
    if (eax != 0x00000005)
        goto loc_48502;
    ecx = eax + -1;
    edi = ecx;
    edi <<= 3;
    eax = edx + 1;
    edi -= ecx;
    eax += edi;
    if ((int32_t)eax <= (int32_t)esi)
        goto loc_484fe;
    eax = memoryAGet32(ds, ebx + 12);
    eax -= 0x00000002;
    goto loc_48503;
loc_484fe: // 0160:484fe
    eax = ecx;
    goto loc_48503;
loc_48502: // 0160:48502
    eax--;
loc_48503: // 0160:48503
    ebx = memoryAGet32(ds, esp + 28);
    ebx += edx;
    edx = eax;
    eax <<= 3;
    eax -= edx;
    eax += ebx;
    goto loc_48523;
loc_48514: // 0160:48514
    if (ecx != 0x00000001)
        goto loc_48520;
    eax = memoryAGet32(ds, eax + 28);
    eax -= ecx;
    goto loc_48523;
loc_48520: // 0160:48520
    eax = memoryAGet32(ds, eax + 28);
loc_48523: // 0160:48523
    esp += 0x00000024;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4852c() // 0160:4852c +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    edx = ebx;
    sub_48447();
    edi = eax;
    edx = ebx;
    eax = esi;
    ecx = 0;
    sub_48447();
    if ((int32_t)edi <= (int32_t)eax)
        goto loc_4854e;
    ecx = 0x00000001;
loc_4854e: // 0160:4854e
    eax = ecx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_48554() // 0160:48554 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x0000001c;
    ecx = eax;
    eax = memoryAGet32(ds, 0x5d116);
    dl = memoryAGet(ds, eax);
    edi = 0;
    if (!dl)
        goto loc_487f8;
    eax = 0x0005d080;
    edx = 0x0005d0a4;
    ebx = memoryAGet32(ds, ecx + 20);
    sub_4852c();
    memoryASet32(ds, esp + 16, eax);
    if (!eax)
        goto loc_48596;
    ebx = 0x0005d0a4;
    esi = 0x0005d080;
    goto loc_485a0;
loc_48596: // 0160:48596
    ebx = 0x0005d080;
    esi = 0x0005d0a4;
loc_485a0: // 0160:485a0
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    ebp = memoryAGet32(ds, ecx + 16);
    sub_4840c();
    edx = eax;
    eax = ebp + ebp;
    if (!edx)
        goto loc_485c8;
    edx = memoryAGet32(ds, eax + 324562);
    eax = memoryAGet32(ds, eax + 324560);
    goto loc_485d4;
loc_485c8: // 0160:485c8
    edx = memoryAGet32(ds, eax + 324536);
    eax = memoryAGet32(ds, eax + 324534);
loc_485d4: // 0160:485d4
    edx = sar32(edx, 0x10);
    eax = sar32(eax, 0x10);
    edx -= eax;
    memoryASet32(ds, esp + 12, edx);
    edx = 0;
    eax = memoryAGet32(ds, ebx + 32);
    memoryASet32(ds, esp + 20, edx);
    if (eax)
        goto loc_486a4;
    eax = memoryAGet32(ds, ebx + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_48602;
    edi = 0x00000001;
    goto loc_486dd;
loc_48602: // 0160:48602
    if (ebp != eax)
        goto loc_486dd;
    edx = memoryAGet32(ds, ecx + 24);
    eax = memoryAGet32(ds, ebx + 24);
    edx += 0x00000007;
    edx -= eax;
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp, eax);
    edx += 0x00000006;
    edx -= memoryAGet32(ds, ebx + 24);
    memoryASet32(ds, esp + 24, 0x00000007);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(memoryAGet32(ds, esp + 24));
    eax = memoryAGet32(ds, ecx + 12);
    eax--;
    eax -= edx;
    edx = memoryAGet32(ds, ebx + 12);
    memoryASet32(ds, esp + 8, eax);
    if (edx != 0x00000005)
        goto loc_4867d;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp);
    eax -= 0x00000007;
    if ((int32_t)eax >= (int32_t)edx)
        goto loc_486dd;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_486dd;
    goto loc_486d9;
loc_4867d: // 0160:4867d
    eax = edx + -1;
    memoryASet32(ds, esp + 24, eax);
    edx = memoryAGet32(ds, esp + 24);
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_486dd;
    edx = memoryAGet32(ds, esp + 8);
    edi = 0x00000001;
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_486dd;
    goto loc_486d9;
loc_486a4: // 0160:486a4
    edx = memoryAGet32(ds, ebx + 28);
    if (eax != 0x00000001)
        goto loc_486cb;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_4840c();
    if (!eax)
        goto loc_486ca;
    eax = memoryAGet32(ds, 0x4f3ba);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_486ca;
    edx++;
loc_486ca: // 0160:486ca
    edx--;
loc_486cb: // 0160:486cb
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_486dd;
    edi = 0x00000001;
    if (edx != eax)
        goto loc_486dd;
loc_486d9: // 0160:486d9
    memoryASet32(ds, esp + 20, edi);
loc_486dd: // 0160:486dd
    if (memoryAGet32(ds, esp + 20) == 0x00000000)
        goto loc_486f5;
    eax = ecx;
    edx = ebx;
    sub_48807();
    al = !eax;
    edi = al;
loc_486f5: // 0160:486f5
    if (edi)
        goto loc_4870c;
    esi = memoryAGet32(ds, esp + 16);
    if (!esi)
        goto loc_487f8;
    edi = esi;
    goto loc_487f8;
loc_4870c: // 0160:4870c
    eax = memoryAGet32(ds, esi + 32);
    ebx = 0;
    if (eax)
        goto loc_487a2;
    eax = memoryAGet32(ds, esi + 16);
    if ((int32_t)ebp <= (int32_t)eax)
        goto loc_48727;
    edi = 0;
    goto loc_487db;
loc_48727: // 0160:48727
    if (ebp != eax)
        goto loc_487db;
    edx = memoryAGet32(ds, ecx + 24);
    ebp = memoryAGet32(ds, esi + 24);
    edx += 0x00000007;
    edx -= ebp;
    ebp = 0x00000007;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    eax = memoryAGet32(ds, ecx + 12);
    eax -= edx;
    edx = memoryAGet32(ds, ecx + 24);
    memoryASet32(ds, esp + 4, eax);
    edx += 0x00000006;
    eax = memoryAGet32(ds, esi + 24);
    edx -= eax;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebp);
    ebp = memoryAGet32(ds, ecx + 12);
    ebp--;
    ebp -= edx;
    edx = memoryAGet32(ds, esi + 12);
    edi = 0;
    if (edx != 0x00000005)
        goto loc_4878b;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, esp + 4);
    eax -= 0x00000007;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_48785;
loc_4877e: // 0160:4877e
    edi = 0x00000001;
    goto loc_487db;
loc_48785: // 0160:48785
    if ((int32_t)ebp > (int32_t)eax)
        goto loc_487db;
    goto loc_487d6;
loc_4878b: // 0160:4878b
    edx--;
    eax = edx;
    eax <<= 3;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax++;
    if ((int32_t)eax > (int32_t)edx)
        goto loc_4877e;
    if ((int32_t)ebp >= (int32_t)eax)
        goto loc_487db;
    goto loc_487d6;
loc_487a2: // 0160:487a2
    edx = memoryAGet32(ds, esi + 28);
    if (eax != 0x00000001)
        goto loc_487c9;
    eax = memoryAGet32(ds, ecx + 20);
    eax += 0x0000076c;
    sub_4840c();
    if (!eax)
        goto loc_487c8;
    eax = memoryAGet32(ds, 0x4f3ba);
    eax = sar32(eax, 0x10);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_487c8;
    edx++;
loc_487c8: // 0160:487c8
    edx--;
loc_487c9: // 0160:487c9
    eax = memoryAGet32(ds, ecx + 28);
    if ((int32_t)edx > (int32_t)eax)
        goto loc_487db;
    edi = 0;
    if (edx != eax)
        goto loc_487db;
loc_487d6: // 0160:487d6
    ebx = 0x00000001;
loc_487db: // 0160:487db
    if (!ebx)
        goto loc_487ea;
    eax = ecx;
    edx = esi;
    sub_48807();
    edi = eax;
loc_487ea: // 0160:487ea
    ebx = memoryAGet32(ds, esp + 16);
    if (!ebx)
        goto loc_487f8;
    eax = ebx;
    eax -= edi;
    edi = eax;
loc_487f8: // 0160:487f8
    eax = edi;
    memoryASet32(ds, ecx + 32, edi);
    esp += 0x0000001c;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_48807() // 0160:48807 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ecx = memoryAGet32(ds, eax + 8);
    esi = memoryAGet32(ds, edx + 8);
    ebx = 0;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_4882b;
    if (ecx != esi)
        goto loc_48830;
    ecx = memoryAGet32(ds, eax + 4);
    ebp = memoryAGet32(ds, edx + 4);
    if ((int32_t)ecx < (int32_t)ebp)
        goto loc_4882b;
    if (ecx != ebp)
        goto loc_48830;
    eax = memoryAGet32(ds, eax);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, edx))
        goto loc_48830;
loc_4882b: // 0160:4882b
    ebx = 0x00000001;
loc_48830: // 0160:48830
    eax = ebx;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_48837() // 0160:48837 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    edi = eax;
    esi = edx;
    eax = ebx;
    if (edx >= 0x0000a8c0)
        goto loc_48864;
    if ((int32_t)ebx <= 0)
        goto loc_48864;
    esi = edx + 86400;
    esi -= ebx;
    edx = 0;
    ebx = 0x00015180;
    eax = esi;
    div32(ebx);
    edi += eax;
    edi--;
    goto loc_48873;
loc_48864: // 0160:48864
    ebx = 0x00015180;
    esi -= eax;
    edx = 0;
    eax = esi;
    div32(ebx);
    edi += eax;
loc_48873: // 0160:48873
    ebx = 0x00015180;
    eax = esi;
    edx = 0;
    div32(ebx);
    ebx = edx;
    esi = 0x00000e10;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    div32(esi);
    ebx = edx;
    esi = 0x0000003c;
    eax = ebx;
    edx = 0;
    div32(esi);
    edx = 0;
    memoryASet32(ds, ecx + 4, eax);
    eax = ebx;
    div32(esi);
    ebx = 0x0000016e;
    eax = edi;
    memoryASet32(ds, ecx, edx);
    edx = 0;
    div32(ebx);
    edx = eax;
    eax <<= 3;
    eax += edx;
    eax <<= 3;
    eax += edx;
    ebx = eax;
    eax <<= 2;
    eax += ebx;
    ebx = edi;
    ebx -= eax;
    if (edx <= 0)
        goto loc_488da;
    eax = edx + -1;
    eax >>= 2;
    ebx -= eax;
loc_488da: // 0160:488da
    eax = edx + 1900;
    sub_4840c();
    eax += 0x0000016d;
loc_488ea: // 0160:488ea
    if (ebx < eax)
        goto loc_488f3;
    edx++;
    ebx -= eax;
    goto loc_488ea;
loc_488f3: // 0160:488f3
    esi = 0x0004f3b8;
    memoryASet32(ds, ecx + 28, ebx);
    eax = edx + 1900;
    memoryASet32(ds, ecx + 20, edx);
    sub_4840c();
    if (!eax)
        goto loc_48912;
    esi = 0x0004f3d2;
loc_48912: // 0160:48912
    ebp = 0x0000001f;
    eax = ebx;
    edx = 0;
    div32(ebp);
    edx = eax;
    edx = memoryAGet32(ds, esi + edx*2);
    edx = sar32(edx, 0x10);
    if (ebx < edx)
        goto loc_4892a;
    eax++;
loc_4892a: // 0160:4892a
    memoryASet32(ds, ecx + 16, eax);
    eax = (short)memoryAGet16(ds, esi + eax*2);
    ebx -= eax;
    edx = 0;
    ebx++;
    eax = edi + 1;
    memoryASet32(ds, ecx + 12, ebx);
    ebx = 0x00000007;
    div32(ebx);
    eax = ecx;
    memoryASet32(ds, ecx + 24, edx);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_48976() // 0160:48976 +long
{
    esp -= 4;
    eax = 0x0004f33c;
    sub_45798();
    if (eax)
        goto loc_48bb7;
    esp += 4;
    return;
    // gap 558 bytes
loc_48bb7: // 0160:48bb7
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = 0;
    ebx = 0x0005d0c8;
    memoryASet32(ds, 0x5d0d0, edx);
    edx = 0x0005d0d4;
    sub_489af();
    edx = eax;
    ah = memoryAGet(ds, eax);
    if (ah)
        goto loc_48be4;
    memoryASet(ds, 0x5d0f3, ah);
    goto loc_48c3f;
loc_48be4: // 0160:48be4
    ebx = 0x00000001;
    eax = memoryAGet32(ds, 0x5d0c8);
    memoryASet32(ds, 0x5d0d0, ebx);
    eax -= 0x00000e10;
    ebx = esp;
    memoryASet32(ds, esp, eax);
    eax = edx;
    edx = 0x0005d0f3;
    sub_489af();
    ecx = memoryAGet32(ds, esp);
    ebx = memoryAGet32(ds, 0x5d0c8);
    ebx -= ecx;
    memoryASet32(ds, 0x5d0cc, ebx);
    bl = memoryAGet(ds, eax);
    edx = eax;
    if (bl != 0x2c)
        goto loc_48c2f;
    edx = 0x0005d080;
    eax++;
    sub_48ac5();
loc_48c2f: // 0160:48c2f
    if (memoryAGet(ds, eax) != 0x2c)
        goto loc_48c3f;
    edx = 0x0005d0a4;
    eax++;
    sub_48ac5();
loc_48c3f: // 0160:48c3f
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_48989() // 0160:48989 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = edx;
    edx = 0;
loc_4898f: // 0160:4898f
    bl = memoryAGet(ds, eax);
    if (bl < 0x30)
        goto loc_489aa;
    if (bl > 0x39)
        goto loc_489aa;
    edx = edx * 0x0000000a;
    ebx = 0;
    bl = memoryAGet(ds, eax);
    edx += ebx;
    eax++;
    edx -= 0x00000030;
    goto loc_4898f;
loc_489aa: // 0160:489aa
    memoryASet32(ds, ecx, edx);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_489af() // 0160:489af +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000014;
    ebp = eax;
    memoryASet32(ds, esp + 16, edx);
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_489c2;
    ebp++;
loc_489c2: // 0160:489c2
    esi = ebp;
loc_489c4: // 0160:489c4
    dl = memoryAGet(ss, ebp);
    if (!dl)
        goto loc_489e7;
    if (dl == 0x2c)
        goto loc_489e7;
    if (dl == 0x2d)
        goto loc_489e7;
    if (dl == 0x2b)
        goto loc_489e7;
    if (dl < 0x30)
        goto loc_489e4;
    if (dl <= 0x39)
        goto loc_489e7;
loc_489e4: // 0160:489e4
    ebp++;
    goto loc_489c4;
loc_489e7: // 0160:489e7
    eax = ebp;
    eax -= esi;
    memoryASet32(ds, esp + 12, eax);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_489fc;
    memoryASet32(ds, esp + 12, 0x0000001e);
loc_489fc: // 0160:489fc
    edi = memoryAGet32(ds, esp + 16);
    ecx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    ecx = memoryAGet32(ds, esp + 12);
    eax = edi + ecx;
    esi = 0;
    memoryASet(ds, eax, 0x00);
    eax = ebp + 1;
    if (dl != 0x2d)
        goto loc_48a35;
    esi = 0x00000001;
    goto loc_48a3a;
loc_48a35: // 0160:48a35
    if (dl != 0x2b)
        goto loc_48a3c;
loc_48a3a: // 0160:48a3a
    ebp = eax;
loc_48a3c: // 0160:48a3c
    al = memoryAGet(ss, ebp);
    if (al < 0x30)
        goto loc_48abb;
    if (al > 0x39)
        goto loc_48abb;
    edx = esp + 8;
    edi = 0;
    eax = ebp;
    memoryASet32(ds, esp, edi);
    memoryASet32(ds, esp + 4, edi);
    memoryASet32(ds, esp + 8, edi);
    sub_48989();
    edx = eax;
    cl = memoryAGet(ds, eax);
    ebp = eax;
    if (cl != 0x3a)
        goto loc_48a8c;
    edx = esp + 4;
    eax++;
    sub_48989();
    edx = eax;
    ch = memoryAGet(ds, eax);
    ebp = eax;
    if (ch != cl)
        goto loc_48a8c;
    edx = esp;
    eax++;
    sub_48989();
    ebp = eax;
loc_48a8c: // 0160:48a8c
    edx = memoryAGet32(ds, esp + 8);
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp + 4);
    eax <<= 2;
    edx += eax;
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = memoryAGet32(ds, esp);
    eax <<= 2;
    edx += eax;
    memoryASet32(ds, ebx, edx);
    if (!esi)
        goto loc_48abb;
    ecx = edx;
    ecx = -ecx;
    memoryASet32(ds, ebx, ecx);
loc_48abb: // 0160:48abb
    eax = ebp;
    esp += 0x00000014;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_48ac5() // 0160:48ac5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esp -= 0x00000010;
    ebx = eax;
    ecx = edx;
    ah = memoryAGet(ds, eax);
    esi = 0xffffffff;
    if (ah != 0x4a)
        goto loc_48ae2;
    esi = 0x00000001;
    ebx += esi;
loc_48ae2: // 0160:48ae2
    if (memoryAGet(ds, ebx) != 0x4d)
        goto loc_48aea;
    ebx++;
    esi = 0;
loc_48aea: // 0160:48aea
    edx = esp + 12;
    eax = ebx;
    memoryASet32(ds, ecx + 32, esi);
    sub_48989();
    edx = eax;
    ebx = eax;
    if (!esi)
        goto loc_48b09;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 28, eax);
    goto loc_48b4e;
loc_48b09: // 0160:48b09
    eax = memoryAGet32(ds, esp + 12);
    eax--;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_48b47;
    eax = edx + 1;
    edx = esp + 12;
    sub_48989();
    edx = eax;
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 12, eax);
    if (memoryAGet(ds, edx) != 0x2e)
        goto loc_48b47;
    eax = edx + 1;
    edx = esp + 12;
    sub_48989();
    ebx = eax;
    eax = memoryAGet32(ds, esp + 12);
    memoryASet32(ds, ecx + 24, eax);
loc_48b47: // 0160:48b47
    memoryASet32(ds, ecx + 28, 0x00000000);
loc_48b4e: // 0160:48b4e
    edx = 0x00000002;
    esi = 0;
    memoryASet32(ds, esp + 8, edx);
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, esp + 4, esi);
    if (memoryAGet(ds, ebx) != 0x2f)
        goto loc_48b9b;
    edx = esp + 8;
    eax = ebx + 1;
    sub_48989();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_48b9b;
    eax = edx + 1;
    edx = esp + 4;
    sub_48989();
    edx = eax;
    ebx = eax;
    if (memoryAGet(ds, eax) != 0x3a)
        goto loc_48b9b;
    eax = edx + 1;
    edx = esp;
    sub_48989();
    ebx = eax;
loc_48b9b: // 0160:48b9b
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ecx, eax);
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, ecx + 4, eax);
    eax = memoryAGet32(ds, esp + 8);
    memoryASet32(ds, ecx + 8, eax);
    eax = ebx;
    esp += 0x00000010;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_48c46() // 0160:48c46 +long
{
    esp -= 4;
    eax = esp;
    eax -= memoryAGet32(ds, 0x5cdcc);
    esp += 4;
}
void sub_48c4f() // 0160:48c4f +long
{
    esp -= 4;
    memoryASet32(ds, 0x5d21c, 0x00008000);
    esp += 4;
}
void sub_4bfb6() // 0160:4bfb6 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(edx);
    ebp = eax;
    ax = 0x1600;
    interrupt(0x2f);
    if (!al)
        goto loc_4c01c;
    if (al == 0x80)
        goto loc_4c01c;
    al = 0;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax != 0x0666)
        goto loc_4c01c;
    al = 0x22;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax)
        goto loc_4c01c;
    dh = 0x01;
    al = 0x1e;
    ecx = 0;
    ebx = 0;
    memoryASet(ds, 0x5d199, dh);
    edx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    eax = cs;
    ebx = 0x0026f7b4;
    edx = eax;
    ecx = ebx;
    al = 0x20;
    ecx >>= 16;
    ah = 0xfa;
    interrupt(0x2f);
    al = 0x01;
    goto loc_4c076;
loc_4c01c: // 0160:4c01c
    edx = memoryAGet32(ds, esp);
    if (ebp)
        goto loc_4c028;
    if (!dx)
        goto loc_4c074;
loc_4c028: // 0160:4c028
    esi = 0x0004f340;
    eax = 0x00000a00;
    push(es);
    interrupt(0x31);
    eax = -flags.carry;
    es = pop();
    if (eax)
        goto loc_4c074;
    eax = 0x00000007;
    ebx = 0x00049178;
    ecx = cs;
    sub_44dcb();
    es = memoryAGet16(ds, esp);
    ah = memoryAGet(es, ebp + 64);
    memoryASet(es, ebp + 62, 0x01);
    ah |= 0x04;
    memoryASet(es, ebp + 64, ah);
    eax = cr0;
    al |= 0x04;
    dl = 0x01;
    cr0 = eax;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x5d198, dl);
loc_4c074: // 0160:4c074
    al = 0;
loc_4c076: // 0160:4c076
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    flags.zero = !esp;
    esp += 4;
}
void sub_4c0da() // 0160:4c0da +long
{
    esp -= 4;
    push(ax);
    stop("disassembly failed at 160:4c0dd fninit ");
    fld1();
    stop("disassembly failed at 160:4c0e1 fldz ");
    stop("disassembly failed at 160:4c0e3 fdivp st(1)");
    fld80(st(0));
    stop("disassembly failed at 160:4c0e7 fchs ");
    stop("disassembly failed at 160:4c0e9 fcompp ");
    ax = fnstsw();
    al = 0x02;
    sahf();
    if (flags.zero)
        goto loc_4c0f4;
    al = 0x03;
loc_4c0f4: // 0160:4c0f4
    stop("disassembly failed at 160:4c0f5 fninit ");
    fldcw(memoryAGet16(ds, esp));
    tx = memoryAGet16(ds, esp); memoryASet16(ds, esp, ax); ax = tx;
    ax = pop();
    esp += 4;
}
void sub_4c101() // 0160:4c101 +long
{
    esp -= 4;
    eax = 0x0026f838;
    esp += 4;
}
void sub_4c107() // 0160:4c107 +long
{
    esp -= 4;
    eax = 0x0026f834;
    esp += 4;
}
void sub_4c10d() // 0160:4c10d +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    al = 0x00;
    ah = 0x44;
    interrupt(0x21);
    edx = rcl32(edx, 0x00000001);
    edx = ror32(edx, 0x00000001);
    al = !!(dl & 0x80);
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c12b() // 0160:4c12b +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (eax < memoryAGet32(ds, 0x5d1ac))
        goto loc_4c13e;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_4c13e: // 0160:4c13e
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_4c174;
    ebx = eax;
    eax = memoryAGet32(ds, 0x5d200);
    ebx <<= 2;
    eax += ebx;
    cl = memoryAGet(ds, eax + 1);
    if (cl & 0x40)
        goto loc_4c174;
    ch = cl;
    ch |= 0x40;
    memoryASet(ds, eax + 1, ch);
    eax = edx;
    sub_4c10d();
    if (!eax)
        goto loc_4c174;
    eax = memoryAGet32(ds, 0x5d200);
    memoryASet(ds, ebx + eax + 1, memoryAGet(ds, ebx + eax + 1) | 0x20);
loc_4c174: // 0160:4c174
    eax = memoryAGet32(ds, 0x5d200);
    eax = memoryAGet32(ds, eax + edx*4);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c180() // 0160:4c180 +long
{
    esp -= 4;
    push32(ebx);
    dh |= 0x40;
    ebx = edx;
    edx = eax;
    eax = memoryAGet32(ds, 0x5d200);
    edx <<= 2;
    memoryASet32(ds, edx + eax, ebx);
    ebx = pop32();
    esp += 4;
}
void sub_4c1a0() // 0160:4c1a0 +long
{
    esp -= 4;
    push32(eax);
    push32(ecx);
    dh = dl;
    edx <<= 8;
    dl = dh;
    edx <<= 8;
    dl = dh;
    ecx = ebx;
    sub_44e00();
    ecx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_4c1b8() // 0160:4c1b8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = memoryAGet(ds, 0x5ce89);
    ah &= 0xf8;
    dl = ah;
    memoryASet(ds, 0x5ce89, ah);
    dl |= 0x04;
    ecx = 0x0005ce48;
    memoryASet(ds, 0x5ce89, dl);
    goto loc_4c21f;
loc_4c1dc: // 0160:4c1dc
    eax = 0x00000008;
    sub_459a1();
    ebx = eax;
    if (eax)
        goto loc_4c20b;
    eax = 0x00000008;
    sub_459a1();
    ebx = eax;
    if (eax)
        goto loc_4c20b;
    eax = 0x0004f350;
    edx = 0x00000001;
    sub_4c632();
loc_4c20b: // 0160:4c20b
    edx = memoryAGet32(ds, 0x26f77c);
    memoryASet32(ds, ebx + 4, ecx);
    memoryASet32(ds, 0x26f77c, ebx);
    ecx += 0x0000001a;
    memoryASet32(ds, ebx, edx);
loc_4c21f: // 0160:4c21f
    edx = memoryAGet32(ds, ecx + 12);
    if (edx)
        goto loc_4c1dc;
    memoryASet32(ds, 0x26f778, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c230() // 0160:4c230 +long
{
    esp -= 4;
    goto loc_4c230;
loc_46f0d: // 0160:46f0d
    push32(edx);
loc_46f0e: // 0160:46f0e
    edx = memoryAGet32(ds, 0x26f778);
    if (!edx)
        goto loc_46f29;
    eax = edx;
    edx = memoryAGet32(ds, edx);
    sub_45a84();
    memoryASet32(ds, 0x26f778, edx);
    goto loc_46f0e;
loc_46f29: // 0160:46f29
    edx = pop32();
    esp += 4;
    return;
    // gap 21253 bytes
loc_4c230: // 0160:4c230
    eax = 0;
    sub_4c241();
    goto loc_46f0d;
}
void sub_4c241() // 0160:4c241 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    esi = 0x0005ce48;
    eax += eax;
    ebx = 0;
    esi += eax;
    eax = memoryAGet32(ds, 0x26f77c);
    goto loc_4c288;
loc_4c263: // 0160:4c263
    ecx = memoryAGet32(ds, eax);
    eax = memoryAGet32(ds, eax + 4);
    edx = 0x00000001;
    if (memoryAGet(ds, eax + 13) & 0x40)
        goto loc_4c280;
    if (eax < esi)
        goto loc_4c286;
    if (eax >= 0x0005ceca)
        goto loc_4c280;
    edx = 0;
loc_4c280: // 0160:4c280
    sub_4526d();
    ebx++;
loc_4c286: // 0160:4c286
    eax = ecx;
loc_4c288: // 0160:4c288
    if (eax)
        goto loc_4c263;
    eax = ebx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c293() // 0160:4c293 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    sub_4c12b();
    if (!(al & 0x80))
        goto loc_4c2d7;
    al = 0x02;
    ebx = esi;
    edx = 0;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    edi = edx;
    if ((int32_t)edx >= 0)
        goto loc_4c2d7;
    eax = 0;
    ax = dx;
loc_4c2d0: // 0160:4c2d0
    sub_4760d();
    goto loc_4c307;
loc_4c2d7: // 0160:4c2d7
    edx = memoryAGet32(ds, esp);
    ebx = esi;
    ecx = ebp;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    edi = eax;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_4c2f7;
    eax = 0;
    ax = si;
    goto loc_4c2d0;
loc_4c2f7: // 0160:4c2f7
    if (eax == ebp)
        goto loc_4c305;
    eax = 0x0000000c;
    sub_46ba8();
loc_4c305: // 0160:4c305
    eax = edx;
loc_4c307: // 0160:4c307
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4c30f() // 0160:4c30f +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    ah = 0x41;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_4c32a;
    eax &= 0x0000ffff;
    sub_4760d();
    edx = pop32();
    esp += 4;
    return;
loc_4c32a: // 0160:4c32a
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_4c333() // 0160:4c333 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    edx = memoryAGet32(ds, 0x26f77c);
    ebx = 0;
    goto loc_4c358;
loc_4c342: // 0160:4c342
    eax = memoryAGet32(ds, edx + 4);
    if (!(memoryAGet32(ds, eax + 12) & ecx))
        goto loc_4c356;
    ebx++;
    if (!(memoryAGet(ds, eax + 13) & 0x10))
        goto loc_4c356;
    sub_46f5c();
loc_4c356: // 0160:4c356
    edx = memoryAGet32(ds, edx);
loc_4c358: // 0160:4c358
    if (edx)
        goto loc_4c342;
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c362() // 0160:4c362 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x5cddc);
    memoryASet32(ds, 0x5cddc, edx);
    if (eax)
        goto loc_4c37d;
    ah = 0x01;
    interrupt(0x21);
    eax &= 0x000000ff;
loc_4c37d: // 0160:4c37d
    edx = pop32();
    esp += 4;
}
void sub_4c380() // 0160:4c380 +long
{
    esp -= 4;
    memoryASet16(ds, 0x5d204, ss);
    esp += 4;
}
void sub_4c388() // 0160:4c388 +long +stackDrop4
{
    esp -= 4;
    etx = memoryAGet32(ds, esp + 4); memoryASet32(ds, esp + 4, eax); eax = etx;
    sub_4c39b();
    eax = memoryAGet32(ds, esp + 4);
    esp += 4;
    esp += 4;
}
void sub_4c39b() // 0160:4c39b +long
{
    esp -= 4;
    if (eax >= esp)
        goto loc_4c3ac;
    eax -= esp;
    eax = -eax;
    if (eax <= memoryAGet32(ds, 0x5cdcc))
        goto loc_4c3ac;
    esp += 4;
    return;
loc_4c3ac: // 0160:4c3ac
    ax = ss;
    if (ax == memoryAGet16(ds, 0x5d204))
        goto loc_4c3b9;
    esp += 4;
    return;
loc_4c3b9: // 0160:4c3b9
    eax = 0x0005d206;
    edx = 0x00000001;
    sub_4c632();
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x5d05c) != 0x00000000)
        goto loc_4c493;
    fs = memoryAGet16(ds, 0x5cdf1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x5cded);
    es = eax;
    eax = edi;
loc_4c3f3: // 0160:4c3f3
    if (dl == memoryAGet(es, eax))
        goto loc_4c40b;
loc_4c3f8: // 0160:4c3f8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_4c406;
    eax = ebx;
    goto loc_4c3f8;
loc_4c406: // 0160:4c406
    ecx++;
    eax = ebx;
    goto loc_4c3f3;
loc_4c40b: // 0160:4c40b
    eax -= edi;
    if (eax)
        goto loc_4c414;
    eax = 0x00000001;
loc_4c414: // 0160:4c414
    sub_459a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_4c493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_459a1();
    if (!eax)
        goto loc_4c48c;
    memoryASet32(ds, 0x5d05c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_4c447: // 0160:4c447
    if (memoryAGet(es, eax) == 0x00)
        goto loc_4c467;
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, ebx);
loc_4c456: // 0160:4c456
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_4c456;
    ecx += 0x00000004;
    esi++;
    goto loc_4c447;
loc_4c467: // 0160:4c467
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x5d060, edx);
    eax = edx;
    edx = 0;
    sub_4c1a0();
    goto loc_4c493;
loc_4c48c: // 0160:4c48c
    eax = edx;
    sub_45a84();
loc_4c493: // 0160:4c493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c3b9() // 0160:4c3b9 +long
{
    esp -= 4;
    eax = 0x0005d206;
    edx = 0x00000001;
    sub_4c632();
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x5d05c) != 0x00000000)
        goto loc_4c493;
    fs = memoryAGet16(ds, 0x5cdf1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x5cded);
    es = eax;
    eax = edi;
loc_4c3f3: // 0160:4c3f3
    if (dl == memoryAGet(es, eax))
        goto loc_4c40b;
loc_4c3f8: // 0160:4c3f8
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_4c406;
    eax = ebx;
    goto loc_4c3f8;
loc_4c406: // 0160:4c406
    ecx++;
    eax = ebx;
    goto loc_4c3f3;
loc_4c40b: // 0160:4c40b
    eax -= edi;
    if (eax)
        goto loc_4c414;
    eax = 0x00000001;
loc_4c414: // 0160:4c414
    sub_459a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_4c493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_459a1();
    if (!eax)
        goto loc_4c48c;
    memoryASet32(ds, 0x5d05c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_4c447: // 0160:4c447
    if (memoryAGet(es, eax) == 0x00)
        goto loc_4c467;
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, ebx);
loc_4c456: // 0160:4c456
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_4c456;
    ecx += 0x00000004;
    esi++;
    goto loc_4c447;
loc_4c467: // 0160:4c467
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x5d060, edx);
    eax = edx;
    edx = 0;
    sub_4c1a0();
    goto loc_4c493;
loc_4c48c: // 0160:4c48c
    eax = edx;
    sub_45a84();
loc_4c493: // 0160:4c493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c3c8() // 0160:4c3c8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x5d05c) != 0x00000000)
        goto loc_4c493;
    fs = memoryAGet16(ds, 0x5cdf1);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x5cded);
    es = eax;
    eax = edi;
loc_4c3f3: // 0160:4c3f3
    if (dl == memoryPspGet(es, eax))
        goto loc_4c40b;
loc_4c3f8: // 0160:4c3f8
    dh = memoryPspGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_4c406;
    eax = ebx;
    goto loc_4c3f8;
loc_4c406: // 0160:4c406
    ecx++;
    eax = ebx;
    goto loc_4c3f3;
loc_4c40b: // 0160:4c40b
    eax -= edi;
    if (eax)
        goto loc_4c414;
    eax = 0x00000001;
loc_4c414: // 0160:4c414
    sub_459a1();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_4c493;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_459a1();
    if (!eax)
        goto loc_4c48c;
    memoryASet32(ds, 0x5d05c, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_4c447: // 0160:4c447
    if (memoryPspGet(es, eax) == 0x00)
        goto loc_4c467;
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, ebx);
loc_4c456: // 0160:4c456
    dl = memoryPspGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_4c456;
    ecx += 0x00000004;
    esi++;
    goto loc_4c447;
loc_4c467: // 0160:4c467
    edx = memoryAGet32(ds, 0x5d05c);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x5d060, edx);
    eax = edx;
    edx = 0;
    sub_4c1a0();
    goto loc_4c493;
loc_4c48c: // 0160:4c48c
    eax = edx;
    sub_45a84();
loc_4c493: // 0160:4c493
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c56b() // 0160:4c56b +long
{
    esp -= 4;
    goto loc_4c56b;
loc_4c565: // 0160:4c565
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_4c56b: // 0160:4c56b
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(eax);
    if (eax < memoryAGet32(ds, 0x5cdd0))
        goto loc_4c5d2;
    if (memoryAGet(ds, 0x5cdea) != 0x00)
        goto loc_4c5e4;
    ebp = memoryAGet32(ds, esp);
    ebp += 0x0000000f;
    ebp >>= 4;
    if (ebp)
        goto loc_4c596;
    ebp = 0x0fffffff;
loc_4c596: // 0160:4c596
    ebx = 0;
    eax = ds;
    bx = ax;
    ah = 0xed;
    interrupt(0x21);
    eax <<= 31;
    edi &= 0x0000ffff;
    edi |= eax;
    if ((int32_t)edi >= 0)
        goto loc_4c5c0;
    es = edi;
    ebx = ebp;
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_4c5d2;
loc_4c5c0: // 0160:4c5c0
    eax = ds;
    es = eax;
    ebx = ebp;
loc_4c5c6: // 0160:4c5c6
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_4c615;
loc_4c5d2: // 0160:4c5d2
    sub_4c101();
    memoryASet32(ds, eax, 0x00000005);
    eax = 0xffffffff;
    goto loc_4c623;
loc_4c5e4: // 0160:4c5e4
    ebx = memoryAGet32(ds, esp);
    ebx += 0x00000fff;
    ebx >>= 12;
    if (ebx)
        goto loc_4c5f9;
    ebx = 0x000fffff;
loc_4c5f9: // 0160:4c5f9
    dl = memoryAGet(ds, 0x5cdea);
    if (dl != 0x01)
        goto loc_4c60f;
    if (dl != memoryAGet(ds, 0x5cdeb))
        goto loc_4c60f;
    ebx <<= 8;
loc_4c60f: // 0160:4c60f
    eax = ds;
    es = eax;
    goto loc_4c5c6;
loc_4c615: // 0160:4c615
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, 0x5cdbc);
    memoryASet32(ds, 0x5cdbc, ebx);
loc_4c623: // 0160:4c623
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    goto loc_4c565;
}
void sub_4c632() // 0160:4c632 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = ds;
    sub_4cf8a();
    if (eax)
        goto loc_4c64c;
    eax = ebx;
    edx = ecx;
    sub_44ccd();
loc_4c64c: // 0160:4c64c
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c64f() // 0160:4c64f +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    if (!dl)
        goto loc_4c65b;
    memoryASet(ds, eax, 0x2f);
    goto loc_4c669;
loc_4c65b: // 0160:4c65b
    push32(edx);
    ah = 0x37;
    al = 0x00;
    interrupt(0x21);
    al = dl;
    ah = 0x00;
    edx = pop32();
    memoryASet(ds, ebx, al);
loc_4c669: // 0160:4c669
    memoryASet(ds, ebx + 1, 0x63);
    eax = ebx;
    memoryASet(ds, ebx + 2, 0x00);
    ebx = pop32();
    esp += 4;
}
void sub_4c675() // 0160:4c675 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:4c677 enter 0x2c, 0");
    edx = 0x00000007;
    ebx = ebp + -44;
    sub_4cfb0();
    al = !eax;
    eax = al;
    esp = ebp; ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c694() // 0160:4c694 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:4c696 enter 4, 0");
    push32(eax);
    esi = edx;
    edi = ebx;
    memoryASet32(ss, ebp + -4, ecx);
    eax = edx;
    ecx = 0;
    edx = memoryAGet32(ss, ebp + 16);
    sub_4d179();
    push32(memoryAGet32(ss, ebp + 16));
    push32(memoryAGet32(ss, ebp + -4));
    push32(edi);
    push32(esi);
    push32(memoryAGet32(ss, ebp + -8));
    sub_4d1ce();
    esp += 0x00000014;
    esp = ebp; ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_4c6c7() // 0160:4c6c7 +long
{
    esp -= 4;
    push32(0x000000e4);
    sub_4c388();
    push32(esi);
    push32(edi);
    push(es);
    stop("disassembly failed at 160:4c6d4 enter 0xb0, 0");
    push32(eax);
    ebp -= 0x00000082;
    esi = edx;
    memoryASet32(ss, ebp + 110, ebx);
    edx = ecx;
    memoryASet(ss, ebp + 126, 0x00);
    if (eax < 0x00000002)
        goto loc_4c703;
    eax = 0x00000009;
    sub_46ba8();
loc_4c6f9: // 0160:4c6f9
    eax = 0xffffffff;
    goto loc_4c9ba;
loc_4c703: // 0160:4c703
    push32(0x00000000);
    eax = ebp + 82;
    push32(eax);
    eax = ebp + 86;
    ecx = ebp + 90;
    push32(eax);
    eax = ebx;
    ebx = ebp + 94;
    sub_4d041();
    memoryASet32(ss, ebp + 118, eax);
    if (eax == 0xffffffff)
        goto loc_4c9ba;
    eax = esi;
    sub_4c9c5();
    edx = eax + 154;
    eax = edx;
    sub_459a1();
    ebx = eax;
    memoryASet32(ss, ebp + 102, eax);
    if (eax)
        goto loc_4c76d;
    ebx = edx + 3;
    bl &= 0xfc;
    sub_48c46();
    if (ebx >= eax)
        goto loc_4c75a;
    eax = ebx;
    esp -= eax;
    eax = esp;
    goto loc_4c75c;
loc_4c75a: // 0160:4c75a
    eax = 0;
loc_4c75c: // 0160:4c75c
    memoryASet32(ss, ebp + 122, eax);
    if (eax)
        goto loc_4c770;
    eax = memoryAGet32(ss, ebp + 94);
    sub_45a84();
    goto loc_4c6f9;
loc_4c76d: // 0160:4c76d
    memoryASet32(ss, ebp + 122, eax);
loc_4c770: // 0160:4c770
    eax = ebp + 66;
    ebx = ebp + 70;
    ecx = ebp + 74;
    push32(eax);
    eax = ebp + 62;
    edx -= 0x00000093;
    push32(eax);
    edx += memoryAGet32(ss, ebp + 122);
    eax = esi;
    sub_4d2e0();
    eax = ebp + -46;
    indirectCall(cs, memoryAGet32(ds, 0x5d1a0)); // 0160:4c791;
    eax = memoryAGet32(ss, ebp + 82);
    sub_459a1();
    edx = eax;
    memoryASet32(ss, ebp + 98, eax);
    if (eax)
        goto loc_4c7f2;
    eax = memoryAGet32(ss, ebp + 82);
    eax += 0x00000003;
    al &= 0xfc;
    edx = eax;
    sub_48c46();
    if (edx >= eax)
        goto loc_4c7c9;
    eax = memoryAGet32(ss, ebp + 82);
    eax += 0x00000003;
    al &= 0xfc;
    esp -= eax;
    eax = esp;
    goto loc_4c7cb;
loc_4c7c9: // 0160:4c7c9
    eax = 0;
loc_4c7cb: // 0160:4c7cb
    memoryASet32(ss, ebp + 114, eax);
    if (eax)
        goto loc_4c7f5;
    eax = 0x00000002;
    sub_46ba8();
    eax = 0x0000000a;
    memoryASet32(ss, ebp + 118, 0xffffffff);
    sub_46bcb();
    goto loc_4c996;
loc_4c7f2: // 0160:4c7f2
    memoryASet32(ss, ebp + 114, eax);
loc_4c7f5: // 0160:4c7f5
    if (memoryAGet(ds, 0x5cdf3) < 0x03)
        goto loc_4c815;
    eax = memoryAGet32(ss, ebp + 70);
    if (memoryAGet(ds, eax) != 0x00)
        goto loc_4c815;
    eax = memoryAGet32(ss, ebp + 74);
    if (memoryAGet(ds, eax) != 0x00)
        goto loc_4c815;
    memoryASet32(ss, ebp + 74, 0x0004f380);
loc_4c815: // 0160:4c815
    push32(memoryAGet32(ss, ebp + 66));
    eax = memoryAGet32(ss, ebp + 122);
    edx = memoryAGet32(ss, ebp + 70);
    ebx = memoryAGet32(ss, ebp + 74);
    ecx = memoryAGet32(ss, ebp + 62);
    sub_4d37b();
    eax = 0x00000001;
    sub_46ba8();
    eax = memoryAGet32(ss, ebp + 66);
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_4c885;
    edx = 0x0004f383;
    sub_4554a();
    if (eax)
        goto loc_4c865;
    eax = memoryAGet32(ss, ebp + 122);
    memoryASet32(ss, ebp + 118, 0xffffffff);
    sub_4c675();
    if (eax)
        goto loc_4c933;
    goto loc_4c996;
loc_4c865: // 0160:4c865
    edx = memoryAGet32(ss, ebp + 122);
    eax = 0;
    ebx = memoryAGet32(ss, ebp + 114);
    sub_46ba8();
    push32(memoryAGet32(ss, ebp + 110));
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_4c694();
    goto loc_4c993;
loc_4c885: // 0160:4c885
    eax = memoryAGet32(ss, ebp + 122);
    edx = memoryAGet32(ss, ebp + 122);
    sub_4c9c5();
    edx += eax;
    memoryASet32(ss, ebp + 106, edx);
    if (memoryAGet(ss, ebp + 126) == 0x00)
        goto loc_4c8a7;
    eax = 0x00000001;
    sub_46ba8();
    goto loc_4c8d0;
loc_4c8a7: // 0160:4c8a7
    ebx = memoryAGet32(ss, ebp + 114);
    push(ds);
    es = pop();
    edi = edx;
    esi = 0x0004f388;
    eax = 0;
    edx = memoryAGet32(ss, ebp + 122);
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_46ba8();
    push32(memoryAGet32(ss, ebp + 110));
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_4c694();
    memoryASet32(ss, ebp + 118, eax);
loc_4c8d0: // 0160:4c8d0
    sub_4c101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_4c996;
    edi = memoryAGet32(ss, ebp + 106);
    edx = memoryAGet32(ss, ebp + 122);
    eax = 0;
    ebx = memoryAGet32(ss, ebp + 114);
    sub_46ba8();
    push(ds);
    es = pop();
    esi = 0x0004f38d;
    push32(memoryAGet32(ss, ebp + 110));
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    eax = memoryAGet32(ss, ebp + -50);
    ecx = memoryAGet32(ss, ebp + 94);
    sub_4c694();
    memoryASet32(ss, ebp + 118, eax);
    sub_4c101();
    if (memoryAGet32(ds, eax) != 0x00000001)
        goto loc_4c996;
    edi = memoryAGet32(ss, ebp + 106);
    eax = 0;
    esi = 0x0004f383;
    sub_46ba8();
    eax = memoryAGet32(ss, ebp + 122);
    movsd<ES_EDI, DS_ESI>();
    movsb<ES_EDI, DS_ESI>();
    sub_4c675();
    if (!eax)
        goto loc_4c996;
loc_4c933: // 0160:4c933
    eax = memoryAGet32(ss, ebp + 94);
    edx = memoryAGet32(ss, ebp + 110);
    ebx = memoryAGet32(ss, ebp + 114);
    ecx = 0x00000001;
    sub_45a84();
    eax = memoryAGet32(ss, ebp + 122);
    memoryASet32(ss, ebp + 94, 0x00000000);
    sub_4d179();
    push32(0x00000000);
    push32(memoryAGet32(ss, ebp + 114));
    edx = memoryAGet(ss, ebp + 126);
    push32(memoryAGet32(ss, ebp + 122));
    eax = ebp + 78;
    sub_4c64f();
    push32(eax);
    if (memoryAGet(ss, ebp + 126) == 0x00)
        goto loc_4c977;
    eax = 0x0004f39a;
    goto loc_4c97c;
loc_4c977: // 0160:4c977
    eax = 0x0004f39e;
loc_4c97c: // 0160:4c97c
    push32(eax);
    eax = 0x0004f392;
    sub_45798();
    push32(eax);
    push32(memoryAGet32(ss, ebp + -50));
    sub_4d446();
    esp += 0x0000001c;
loc_4c993: // 0160:4c993
    memoryASet32(ss, ebp + 118, eax);
loc_4c996: // 0160:4c996
    eax = memoryAGet32(ss, ebp + 98);
    sub_45a84();
    eax = memoryAGet32(ss, ebp + 102);
    sub_45a84();
    eax = memoryAGet32(ss, ebp + 94);
    sub_45a84();
    eax = ebp + -46;
    indirectCall(cs, memoryAGet32(ds, 0x5d1a4)); // 0160:4c9b1;
    eax = memoryAGet32(ss, ebp + 118);
loc_4c9ba: // 0160:4c9ba
    esp = ebp + 130;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_4c9c5() // 0160:4c9c5 +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = ecx;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4c9de() // 0160:4c9de +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = edx;
loc_4c9e2: // 0160:4c9e2
    edx = 0;
    dl = memoryAGet(ds, eax);
    if (edx == ebx)
        goto loc_4c9f5;
    edx = eax;
    cl = memoryAGet(ds, edx);
    eax++;
    if (cl)
        goto loc_4c9e2;
    eax = 0;
loc_4c9f5: // 0160:4c9f5
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4c9f8() // 0160:4c9f8 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    ecx = ebx;
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = edi;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_4cf8a() // 0160:4cf8a +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x5d224) == 0x00)
        goto loc_4cfad;
    edx &= 0x0000ffff;
    push32(edx);
    push32(eax);
    stop("breakpoint");
    goto loc_4cfa4;
    // gap 6 bytes
loc_4cfa4: // 0160:4cfa4
    eax = 0x00000001;
    esp += 0x00000008;
    esp += 4;
    return;
loc_4cfad: // 0160:4cfad
    eax = 0;
    esp += 4;
}
void sub_4cfb0() // 0160:4cfb0 +long
{
    esp -= 4;
    push32(ecx);
    push32(eax);
    push32(edx);
    edx = ebx;
    ah = 0x1a;
    interrupt(0x21);
    ecx = pop32();
    edx = pop32();
    ah = 0x4e;
    interrupt(0x21);
    sub_4d95e();
    edx = ebx;
    sub_4cfec();
    ecx = pop32();
    esp += 4;
}
void sub_4cfec() // 0160:4cfec +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x5cdea) != 0x09)
        goto loc_4d00e;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ah = 0x2f;
    interrupt(0x21);
    esi = ebx;
    edi = edx;
    ecx = 0x0000002b;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_4d00e: // 0160:4d00e
    esp += 4;
    return;
}
void sub_4d032() // 0160:4d032 +long
{
    esp -= 4;
    push32(ebx);
loc_4d033: // 0160:4d033
    bl = memoryAGet(ds, edx);
    memoryASet(ds, eax, bl);
    if (!bl)
        goto loc_4d03f;
    eax++;
    edx++;
    goto loc_4d033;
loc_4d03f: // 0160:4d03f
    ebx = pop32();
    esp += 4;
}
void sub_4d041() // 0160:4d041 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    stop("disassembly failed at 160:4d043 enter 8, 0");
    esi = eax;
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    if (edx)
        goto loc_4d058;
    edi = memoryAGet32(ds, 0x5d05c);
loc_4d058: // 0160:4d058
    ebx = 0;
    if (!edi)
        goto loc_4d074;
    edx = edi;
    goto loc_4d06f;
loc_4d062: // 0160:4d062
    eax = memoryAGet32(ds, edx);
    sub_4c9c5();
    eax++;
    edx += 0x00000004;
    ebx += eax;
loc_4d06f: // 0160:4d06f
    if (memoryAGet32(ds, edx) != 0x00000000)
        goto loc_4d062;
loc_4d074: // 0160:4d074
    ebx++;
    if (memoryAGet32(ss, ebp + 24) == 0x00000000)
        goto loc_4d087;
    eax = memoryAGet32(ds, esi);
    sub_4c9c5();
    eax += 0x00000003;
    ebx += eax;
loc_4d087: // 0160:4d087
    eax = memoryAGet32(ds, 0x5d21c);
    ebx += 0x0000000f;
    memoryASet32(ss, ebp + -8, eax);
    eax = ebx;
    memoryASet32(ds, 0x5d21c, 0x00000010);
    sub_459a1();
    if (eax)
        goto loc_4d0d8;
    eax = ebx;
    sub_459a1();
    if (eax)
        goto loc_4d0d8;
    eax = 0x00000005;
    sub_46ba8();
    eax = 0x00000008;
    sub_46bcb();
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, 0x5d21c, eax);
loc_4d0ce: // 0160:4d0ce
    eax = 0xffffffff;
    goto loc_4d173;
loc_4d0d8: // 0160:4d0d8
    edx = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, 0x5d21c, edx);
    edx = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, edx, eax);
    edx = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, edx, 0x00000000);
    memoryASet32(ds, ecx, eax);
    if (!edi)
        goto loc_4d109;
    ecx = edi;
    goto loc_4d104;
loc_4d0f9: // 0160:4d0f9
    edx = memoryAGet32(ds, ecx);
    sub_4d032();
    eax++;
    ecx += 0x00000004;
loc_4d104: // 0160:4d104
    if (memoryAGet32(ds, ecx) != 0x00000000)
        goto loc_4d0f9;
loc_4d109: // 0160:4d109
    memoryASet(ds, eax, 0x00);
    eax++;
    if (memoryAGet32(ss, ebp + 24) == 0x00000000)
        goto loc_4d11c;
    eax++;
    eax++;
    edx = memoryAGet32(ds, esi);
    sub_4d971();
loc_4d11c: // 0160:4d11c
    edx = 0;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_4d13d;
    esi += 0x00000004;
    goto loc_4d137;
loc_4d128: // 0160:4d128
    if (!edx)
        goto loc_4d12d;
    edx++;
loc_4d12d: // 0160:4d12d
    sub_4c9c5();
    esi += 0x00000004;
    edx += eax;
loc_4d137: // 0160:4d137
    eax = memoryAGet32(ds, esi);
    if (eax)
        goto loc_4d128;
loc_4d13d: // 0160:4d13d
    if (edx <= 0x0000007e)
        goto loc_4d165;
    eax = 0x00000002;
    sub_46ba8();
    eax = 0x0000000a;
    sub_46bcb();
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax);
    sub_45a84();
    goto loc_4d0ce;
loc_4d165: // 0160:4d165
    eax = memoryAGet32(ss, ebp + 20);
    memoryASet32(ds, eax, 0x00000090);
    eax = ebx;
    eax >>= 4;
loc_4d173: // 0160:4d173
    esp = ebp; ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_4d179() // 0160:4d179 +long
{
    esp -= 4;
    push32(esi);
    stop("disassembly failed at 160:4d17a enter 4, 0");
    esi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    if (ecx)
        goto loc_4d188;
    ebx++;
loc_4d188: // 0160:4d188
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_4d1b2;
    esi += 0x00000004;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_4d1b2;
loc_4d195: // 0160:4d195
    eax = ebx;
    edx = memoryAGet32(ds, esi);
    sub_4d032();
    esi += 0x00000004;
    edx = eax;
    ebx = eax;
    if (memoryAGet32(ds, esi) == 0x00000000)
        goto loc_4d1b2;
    ebx = eax + 1;
    memoryASet(ds, eax, 0x20);
    goto loc_4d195;
loc_4d1b2: // 0160:4d1b2
    if (!ecx)
        goto loc_4d1bc;
    memoryASet(ds, ebx, 0x00);
    esp = ebp; ebp = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_4d1bc: // 0160:4d1bc
    dl = bl;
    memoryASet(ds, ebx, 0x0d);
    dl -= memoryAGet(ss, ebp + -4);
    ebx = memoryAGet32(ss, ebp + -4);
    dl--;
    memoryASet(ds, ebx, dl);
    esp = ebp; ebp = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4d1ce() // 0160:4d1ce +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(esi);
    push32(edi);
    push32(edx);
    push32(ecx);
    push32(ebx);
    push(es);
    push(ds);
    ax = ss;
    ds = eax;
    eax = memoryAGet32(ss, ebp + 20);
    memoryASet32(ds, 0x5d228, eax);
    memoryASet16(ds, 0x5d22c, ds);
    eax = 0;
    memoryASet32(ds, 0x5d234, eax);
    memoryASet32(ds, 0x5d23a, eax);
    memoryASet16(ds, 0x5d238, ax);
    memoryASet16(ds, 0x5d23e, ax);
    memoryASet32(ds, 0x5d240, eax);
    memoryASet32(ds, 0x5d244, eax);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x5d22e, eax);
    memoryASet16(ds, 0x5d232, ds);
    push(ds);
    es = pop();
    push32(ebp);
    push(es);
    push(ds);
    memoryASet16(ds, 0x5d24c, ss);
    memoryASet32(ds, 0x5d248, esp);
    memoryASet16(ds, 0x5d24e, ds);
    ebx = 0x0005d228;
    if (memoryAGet32(ss, ebp + 8) != 0x00000001)
        goto loc_4d248;
    al = 0x04;
    ecx = 0;
    goto loc_4d24a;
loc_4d248: // 0160:4d248
    al = 0;
loc_4d24a: // 0160:4d24a
    flags.carry = 0;
    push32(eax);
    ah = 0x0b;
    interrupt(0x21);
    eax = pop32();
    memoryASet32(ds, 0x5cde4, 0x00000001);
    edx = memoryAGet32(ss, ebp + 12);
    ah = 0x4b;
    interrupt(0x21);
    ss = memoryAGet16(ds, 0x5d24c);
    esp = memoryAGet32(ds, 0x5d248);
    ds = memoryAGet16(ds, 0x5d24e);
    ds = pop();
    memoryASet32(ds, 0x5cde4, 0x00000000);
    es = pop();
    ebp = pop32();
    if (flags.carry)
        goto loc_4d289;
    ah = 0x4d;
    interrupt(0x21);
loc_4d289: // 0160:4d289
    edx = -flags.carry;
    eax = ax;
    sub_47608();
    ds = pop();
    es = pop();
    ebx = pop32();
    ecx = pop32();
    edx = pop32();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_4d29c() // 0160:4d29c +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = ebx;
    if (eax)
        goto loc_4d2a9;
    eax = edx;
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_4d2a9: // 0160:4d2a9
    ebx = ecx;
    ebx -= esi;
    memoryASet32(ds, eax, edx);
    if (ebx < 0x00000093)
        goto loc_4d2bc;
    ebx = 0x00000092;
loc_4d2bc: // 0160:4d2bc
    edi = edx;
    ecx = ebx;
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = edx + ebx;
    memoryASet(ds, eax, 0x00);
    eax++;
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_4d2e0() // 0160:4d2e0 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_4d30a;
    if (memoryAGet(ds, esi + 1) != 0x3a)
        goto loc_4d30a;
    if (!ebx)
        goto loc_4d305;
    memoryASet32(ds, ebx, edx);
    al = memoryAGet(ds, esi);
    memoryASet(ds, edx + 1, 0x3a);
    memoryASet(ds, edx + 2, 0x00);
    memoryASet(ds, edx, al);
    edx += 0x00000003;
loc_4d305: // 0160:4d305
    esi += 0x00000002;
    goto loc_4d314;
loc_4d30a: // 0160:4d30a
    if (!ebx)
        goto loc_4d314;
    memoryASet32(ds, ebx, edx);
    memoryASet(ds, edx, 0x00);
    edx++;
loc_4d314: // 0160:4d314
    ebp = esi;
    ebx = esi;
loc_4d318: // 0160:4d318
    edi = 0;
loc_4d31a: // 0160:4d31a
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_4d336;
    if (al != 0x2e)
        goto loc_4d329;
    edi = esi;
    esi++;
    goto loc_4d31a;
loc_4d329: // 0160:4d329
    esi++;
    if (al == 0x5c)
        goto loc_4d332;
    if (al != 0x2f)
        goto loc_4d31a;
loc_4d332: // 0160:4d332
    ebp = esi;
    goto loc_4d318;
loc_4d336: // 0160:4d336
    eax = ecx;
    ecx = ebp;
    sub_4d29c();
    edx = eax;
    if (edi)
        goto loc_4d347;
    edi = esi;
loc_4d347: // 0160:4d347
    eax = memoryAGet32(ds, esp + 16);
    ebx = ebp;
    ecx = edi;
    sub_4d29c();
    edx = eax;
    ebx = edi;
    ecx = esi;
    eax = memoryAGet32(ds, esp + 20);
    sub_4d29c();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_4d369() // 0160:4d369 +long
{
    esp -= 4;
    if (al == 0x5c)
        goto loc_4d371;
    if (al != 0x2f)
        goto loc_4d37a;
loc_4d371: // 0160:4d371
    if (memoryAGet(ds, edx) != 0x00)
        goto loc_4d378;
    memoryASet(ds, edx, al);
loc_4d378: // 0160:4d378
    al = memoryAGet(ds, edx);
loc_4d37a: // 0160:4d37a
    esp += 4;
    return;
}
void sub_4d37b() // 0160:4d37b +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    edi = memoryAGet32(ds, esp + 16);
    esi = eax;
    ah = 0;
    memoryASet(ds, esp, ah);
    if (!edx)
        goto loc_4d39c;
    al = memoryAGet(ds, edx);
    if (!al)
        goto loc_4d39c;
    memoryASet(ds, esi, al);
    esi++;
    memoryASet(ds, esi, 0x3a);
    esi++;
loc_4d39c: // 0160:4d39c
    memoryASet(ds, esi, 0x00);
    if (!ebx)
        goto loc_4d3d4;
    if (memoryAGet(ds, ebx) == 0x00)
        goto loc_4d3d4;
loc_4d3a8: // 0160:4d3a8
    eax = 0;
    edx = esp;
    al = memoryAGet(ds, ebx);
    ebx++;
    sub_4d369();
    memoryASet(ds, esi, al);
    dl = memoryAGet(ds, ebx);
    esi++;
    if (dl)
        goto loc_4d3a8;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_4d3c7;
    memoryASet(ds, esp, 0x5c);
loc_4d3c7: // 0160:4d3c7
    bh = memoryAGet(ds, esp);
    if (bh != memoryAGet(ds, esi + -1))
        goto loc_4d3d2;
    esi--;
    goto loc_4d3d4;
loc_4d3d2: // 0160:4d3d2
    memoryASet(ds, esi, bh);
loc_4d3d4: // 0160:4d3d4
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_4d3de;
    memoryASet(ds, esp, 0x5c);
loc_4d3de: // 0160:4d3de
    ebx = esi + 1;
    if (!ecx)
        goto loc_4d414;
    eax = 0;
    edx = esp;
    al = memoryAGet(ds, ecx);
    sub_4d369();
    dh = memoryAGet(ds, esp);
    if (al == dh)
        goto loc_4d3fd;
    if (dh != memoryAGet(ds, esi))
        goto loc_4d3fd;
    esi = ebx;
loc_4d3fd: // 0160:4d3fd
    dl = memoryAGet(ds, ecx);
    if (!dl)
        goto loc_4d41d;
    eax = 0;
    al = dl;
    edx = esp;
    ecx++;
    sub_4d369();
    memoryASet(ds, esi, al);
    esi++;
    goto loc_4d3fd;
loc_4d414: // 0160:4d414
    dl = memoryAGet(ds, esp);
    if (dl != memoryAGet(ds, esi))
        goto loc_4d41d;
    esi = ebx;
loc_4d41d: // 0160:4d41d
    if (!edi)
        goto loc_4d43b;
    dh = memoryAGet(ds, edi);
    if (!dh)
        goto loc_4d43b;
    if (dh == 0x2e)
        goto loc_4d430;
    memoryASet(ds, esi, 0x2e);
loc_4d42f: // 0160:4d42f
    esi++;
loc_4d430: // 0160:4d430
    bh = memoryAGet(ds, edi);
    if (!bh)
        goto loc_4d43b;
    edi++;
    memoryASet(ds, esi, bh);
    goto loc_4d42f;
loc_4d43b: // 0160:4d43b
    memoryASet(ds, esi, 0x00);
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_4d446() // 0160:4d446 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, esp + 20);
    ebx = esp + 24;
    ecx = memoryAGet32(ds, 0x5d05c);
    sub_4c6c7();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_4d95e() // 0160:4d95e +long
{
    esp -= 4;
    if (stop("jae - flag.c not set yet"))
        goto loc_4d96e;
    eax &= 0x0000ffff;
    push32(eax);
    sub_4760d();
    eax = pop32();
    goto loc_4d970;
loc_4d96e: // 0160:4d96e
    eax = 0;
loc_4d970: // 0160:4d970
    esp += 4;
    return;
}
void sub_4d971() // 0160:4d971 +long
{
    esp -= 4;
    push32(ecx);
    push32(eax);
loc_4d973: // 0160:4d973
    cl = memoryAGet(ds, edx);
    memoryASet(ds, eax, cl);
    if (cl == 0x00)
        goto loc_4d98d;
    cl = memoryAGet(ds, edx + 1);
    edx += 0x00000002;
    memoryVideoSet(ds, eax + 1, cl);
    eax += 0x00000002;
    if (cl != 0x00)
        goto loc_4d973;
loc_4d98d: // 0160:4d98d
    eax = pop32();
    ecx = pop32();
    esp += 4;
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x10010, 0x160, 0x10010, 0x160, 0x10059, 0x10059, 0x160, 0x10059, 0x160, 0x1008b,
        0x1008b, 0x160, 0x1008b, 0x160, 0x100f2, 0x100f2, 0x160, 0x100f2, 0x160, 0x1014b,
        0x1014b, 0x160, 0x1014b, 0x160, 0x102f1, 0x1014b, 0x160, 0x12549, 0x160, 0x1254f,
        0x102f1, 0x160, 0x102f1, 0x160, 0x10336, 0x10336, 0x160, 0x10336, 0x160, 0x1039b,
        0x1039b, 0x160, 0x1039b, 0x160, 0x103b5, 0x103b5, 0x160, 0x103b5, 0x160, 0x103d4,
        0x103d4, 0x160, 0x103d4, 0x160, 0x1088b, 0x103d4, 0x160, 0x109e4, 0x160, 0x109eb,
        0x108b4, 0x160, 0x108b4, 0x160, 0x109eb, 0x10a14, 0x160, 0x10a14, 0x160, 0x10cac,
        0x10ccc, 0x160, 0x10ccc, 0x160, 0x10df2, 0x10df2, 0x160, 0x10df2, 0x160, 0x10e44,
        0x10e44, 0x160, 0x10e44, 0x160, 0x10f02, 0x10f02, 0x160, 0x10f02, 0x160, 0x10f65,
        0x10f65, 0x160, 0x10f65, 0x160, 0x10f93, 0x10f93, 0x160, 0x109e4, 0x160, 0x109eb,
        0x10f93, 0x160, 0x10f93, 0x160, 0x11058, 0x11058, 0x160, 0x11058, 0x160, 0x110af,
        0x110af, 0x160, 0x110af, 0x160, 0x111a0, 0x110af, 0x160, 0x12549, 0x160, 0x1254f,
        0x111a0, 0x160, 0x109e1, 0x160, 0x109eb, 0x111a0, 0x160, 0x111a0, 0x160, 0x1128d,
        0x1128d, 0x160, 0x109e4, 0x160, 0x109eb, 0x1128d, 0x160, 0x1128d, 0x160, 0x1139d,
        0x1139d, 0x160, 0x109e4, 0x160, 0x109eb, 0x1139d, 0x160, 0x1139d, 0x160, 0x1143a,
        0x1143a, 0x160, 0x109e4, 0x160, 0x109eb, 0x1143a, 0x160, 0x1143a, 0x160, 0x114fb,
        0x114fb, 0x160, 0x114fb, 0x160, 0x11723, 0x11723, 0x160, 0x11723, 0x160, 0x11797,
        0x11797, 0x160, 0x11797, 0x160, 0x117eb, 0x117eb, 0x160, 0x109e4, 0x160, 0x109eb,
        0x117eb, 0x160, 0x117eb, 0x160, 0x11a6a, 0x11a6a, 0x160, 0x109e4, 0x160, 0x109eb,
        0x11a6a, 0x160, 0x11a6a, 0x160, 0x11bd3, 0x11bd3, 0x160, 0x11bd3, 0x160, 0x11cae,
        0x11bd3, 0x160, 0x12549, 0x160, 0x1254f, 0x11cae, 0x160, 0x1171d, 0x160, 0x11723,
        0x11cae, 0x160, 0x11cae, 0x160, 0x11cfe, 0x11d18, 0x160, 0x11d18, 0x160, 0x11f43,
        0x11f43, 0x160, 0x109e5, 0x160, 0x109eb, 0x11f43, 0x160, 0x11f43, 0x160, 0x12079,
        0x12079, 0x160, 0x12079, 0x160, 0x1217f, 0x12079, 0x160, 0x12549, 0x160, 0x1254f,
        0x1217f, 0x160, 0x1217f, 0x160, 0x1230d, 0x1217f, 0x160, 0x12549, 0x160, 0x1254f,
        0x1230d, 0x160, 0x109e4, 0x160, 0x109eb, 0x1230d, 0x160, 0x11395, 0x160, 0x1139d,
        0x1230d, 0x160, 0x1230d, 0x160, 0x12382, 0x12382, 0x160, 0x109e1, 0x160, 0x109eb,
        0x12382, 0x160, 0x12382, 0x160, 0x124e6, 0x124e6, 0x160, 0x124e6, 0x160, 0x12501,
        0x12501, 0x160, 0x12501, 0x160, 0x1254f, 0x1254f, 0x160, 0x12546, 0x160, 0x12593,
        0x12593, 0x160, 0x109e5, 0x160, 0x109eb, 0x12593, 0x160, 0x12593, 0x160, 0x12645,
        0x12645, 0x160, 0x12645, 0x160, 0x126e2, 0x126e2, 0x160, 0x126e2, 0x160, 0x126ed,
        0x126e2, 0x160, 0x1744c, 0x160, 0x17452, 0x126e2, 0x160, 0x18d41, 0x160, 0x18dc8,
        0x126ed, 0x160, 0x126ed, 0x160, 0x1295c, 0x1295c, 0x160, 0x109e4, 0x160, 0x109eb,
        0x1295c, 0x160, 0x1295c, 0x160, 0x12b2d, 0x12b2d, 0x160, 0x12b2d, 0x160, 0x12b95,
        0x12b95, 0x160, 0x109e4, 0x160, 0x109eb, 0x12b95, 0x160, 0x12b95, 0x160, 0x12f16,
        0x12f16, 0x160, 0x109e4, 0x160, 0x109eb, 0x12f16, 0x160, 0x12f16, 0x160, 0x130dc,
        0x130dc, 0x160, 0x130dc, 0x160, 0x13107, 0x13107, 0x160, 0x109e4, 0x160, 0x109eb,
        0x13107, 0x160, 0x13107, 0x160, 0x13305, 0x13305, 0x160, 0x13305, 0x160, 0x1336c,
        0x1336c, 0x160, 0x109e4, 0x160, 0x109eb, 0x1336c, 0x160, 0x1336c, 0x160, 0x1346a,
        0x1346a, 0x160, 0x1346a, 0x160, 0x134f6, 0x1350e, 0x160, 0x1350e, 0x160, 0x13556,
        0x13556, 0x160, 0x13556, 0x160, 0x1356b, 0x1356b, 0x160, 0x1356b, 0x160, 0x136ed,
        0x136ed, 0x160, 0x136ed, 0x160, 0x13730, 0x1376a, 0x160, 0x1376a, 0x160, 0x13852,
        0x13852, 0x160, 0x13852, 0x160, 0x138c0, 0x138c0, 0x160, 0x109e4, 0x160, 0x109eb,
        0x138c0, 0x160, 0x138c0, 0x160, 0x13bd3, 0x13bd3, 0x160, 0x13bd3, 0x160, 0x13c2f,
        0x13c2f, 0x160, 0x13c2f, 0x160, 0x13c8b, 0x13c8b, 0x160, 0x13c8b, 0x160, 0x13ce7,
        0x13ce7, 0x160, 0x13ce7, 0x160, 0x13d75, 0x13d75, 0x160, 0x13d75, 0x160, 0x13df1,
        0x13df1, 0x160, 0x13df1, 0x160, 0x13e47, 0x13e47, 0x160, 0x136e7, 0x160, 0x136ed,
        0x13e47, 0x160, 0x13e47, 0x160, 0x13f15, 0x13f15, 0x160, 0x13f15, 0x160, 0x13f45,
        0x13f45, 0x160, 0x109e4, 0x160, 0x109eb, 0x13f45, 0x160, 0x13f45, 0x160, 0x1406b,
        0x1406b, 0x160, 0x109e4, 0x160, 0x109eb, 0x1406b, 0x160, 0x1406b, 0x160, 0x1422e,
        0x1422e, 0x160, 0x109e4, 0x160, 0x109eb, 0x1422e, 0x160, 0x1422e, 0x160, 0x143b3,
        0x143b3, 0x160, 0x109e5, 0x160, 0x109eb, 0x143b3, 0x160, 0x143b3, 0x160, 0x14539,
        0x14539, 0x160, 0x14539, 0x160, 0x14674, 0x14674, 0x160, 0x14674, 0x160, 0x14709,
        0x14709, 0x160, 0x14709, 0x160, 0x14794, 0x14794, 0x160, 0x14794, 0x160, 0x14983,
        0x14afa, 0x160, 0x14afa, 0x160, 0x14b2a, 0x14b2a, 0x160, 0x12549, 0x160, 0x1254f,
        0x14b2a, 0x160, 0x14b2a, 0x160, 0x14cbd, 0x14cbd, 0x160, 0x109e4, 0x160, 0x109eb,
        0x14cbd, 0x160, 0x14cbd, 0x160, 0x14fa1, 0x15025, 0x160, 0x15025, 0x160, 0x1507f,
        0x1507f, 0x160, 0x1507f, 0x160, 0x150a0, 0x150a0, 0x160, 0x109e4, 0x160, 0x109eb,
        0x150a0, 0x160, 0x150a0, 0x160, 0x153e0, 0x153e0, 0x160, 0x153e0, 0x160, 0x153f9,
        0x153f9, 0x160, 0x153f9, 0x160, 0x1540e, 0x1540e, 0x160, 0x1540e, 0x160, 0x15452,
        0x15452, 0x160, 0x15452, 0x160, 0x15487, 0x15487, 0x160, 0x15487, 0x160, 0x154b0,
        0x154b0, 0x160, 0x154b0, 0x160, 0x1554b, 0x1554b, 0x160, 0x1554b, 0x160, 0x1558b,
        0x15608, 0x160, 0x15608, 0x160, 0x15687, 0x15687, 0x160, 0x15687, 0x160, 0x156aa,
        0x156aa, 0x160, 0x156aa, 0x160, 0x156b5, 0x156b5, 0x160, 0x156b5, 0x160, 0x156e0,
        0x1576f, 0x160, 0x1576f, 0x160, 0x157d3, 0x157d3, 0x160, 0x157d3, 0x160, 0x157ef,
        0x157ef, 0x160, 0x157ef, 0x160, 0x15840, 0x15840, 0x160, 0x15840, 0x160, 0x158e6,
        0x158e6, 0x160, 0x15545, 0x160, 0x1554b, 0x158e6, 0x160, 0x158e6, 0x160, 0x159c1,
        0x159c1, 0x160, 0x159c1, 0x160, 0x15a13, 0x15a13, 0x160, 0x15a13, 0x160, 0x15a3d,
        0x15a3d, 0x160, 0x15a3d, 0x160, 0x15a7d, 0x15a7d, 0x160, 0x15a77, 0x160, 0x15b1f,
        0x15b1f, 0x160, 0x15b1f, 0x160, 0x15b2e, 0x15b2e, 0x160, 0x15b2e, 0x160, 0x15c1b,
        0x15c1b, 0x160, 0x15c1b, 0x160, 0x15c49, 0x15c49, 0x160, 0x1544c, 0x160, 0x15452,
        0x15c49, 0x160, 0x15c49, 0x160, 0x15cc3, 0x15cc3, 0x160, 0x15a77, 0x160, 0x15a7d,
        0x15cc3, 0x160, 0x15cc3, 0x160, 0x15ce4, 0x15d7f, 0x160, 0x15d7f, 0x160, 0x1628e,
        0x1628e, 0x160, 0x1628e, 0x160, 0x16a3f, 0x16a3f, 0x160, 0x16a3f, 0x160, 0x16c7f,
        0x16c7f, 0x160, 0x16c7f, 0x160, 0x16dd3, 0x16c7f, 0x160, 0x16f4a, 0x160, 0x16f50,
        0x16dd3, 0x160, 0x16dd3, 0x160, 0x16f50, 0x16f50, 0x160, 0x16f50, 0x160, 0x17006,
        0x17006, 0x160, 0x17006, 0x160, 0x17029, 0x17029, 0x160, 0x17029, 0x160, 0x17075,
        0x17075, 0x160, 0x16f49, 0x160, 0x16f50, 0x17075, 0x160, 0x17075, 0x160, 0x170ca,
        0x170ca, 0x160, 0x170ca, 0x160, 0x171a9, 0x171a9, 0x160, 0x171a9, 0x160, 0x1720e,
        0x1720e, 0x160, 0x1720e, 0x160, 0x1727a, 0x1727a, 0x160, 0x1727a, 0x160, 0x17298,
        0x17298, 0x160, 0x17298, 0x160, 0x172d6, 0x172d6, 0x160, 0x172d6, 0x160, 0x1730a,
        0x1730a, 0x160, 0x1730a, 0x160, 0x1736c, 0x1736c, 0x160, 0x1736c, 0x160, 0x173c6,
        0x173c6, 0x160, 0x173c6, 0x160, 0x17452, 0x17452, 0x160, 0x1744b, 0x160, 0x175a8,
        0x175a8, 0x160, 0x1744b, 0x160, 0x17452, 0x175a8, 0x160, 0x175a8, 0x160, 0x1768b,
        0x1768b, 0x160, 0x1768b, 0x160, 0x177ed, 0x177ed, 0x160, 0x177ed, 0x160, 0x1783e,
        0x1783e, 0x160, 0x1783e, 0x160, 0x178cb, 0x178cb, 0x160, 0x178cb, 0x160, 0x17980,
        0x17980, 0x160, 0x1744c, 0x160, 0x17452, 0x17980, 0x160, 0x17980, 0x160, 0x17a10,
        0x17a10, 0x160, 0x17a10, 0x160, 0x17aa6, 0x17aa6, 0x160, 0x1744b, 0x160, 0x17452,
        0x17aa6, 0x160, 0x17aa6, 0x160, 0x17d21, 0x17d21, 0x160, 0x1744b, 0x160, 0x17452,
        0x17d21, 0x160, 0x17d21, 0x160, 0x17fad, 0x17fad, 0x160, 0x1744b, 0x160, 0x17452,
        0x17fad, 0x160, 0x17fad, 0x160, 0x18178, 0x18178, 0x160, 0x18178, 0x160, 0x181c7,
        0x181c7, 0x160, 0x181c7, 0x160, 0x181fc, 0x181fc, 0x160, 0x1744c, 0x160, 0x17452,
        0x181fc, 0x160, 0x181fc, 0x160, 0x18308, 0x18308, 0x160, 0x18308, 0x160, 0x18346,
        0x18346, 0x160, 0x17448, 0x160, 0x17452, 0x18346, 0x160, 0x18346, 0x160, 0x184a3,
        0x184a3, 0x160, 0x1744b, 0x160, 0x17452, 0x184a3, 0x160, 0x184a3, 0x160, 0x18d41,
        0x18d41, 0x160, 0x1744c, 0x160, 0x17452, 0x18d41, 0x160, 0x18d41, 0x160, 0x18dc8,
        0x18dc8, 0x160, 0x18dc8, 0x160, 0x18de2, 0x18de2, 0x160, 0x18de2, 0x160, 0x18e05,
        0x18e05, 0x160, 0x18e05, 0x160, 0x18e49, 0x18e49, 0x160, 0x18e49, 0x160, 0x18e73,
        0x18e73, 0x160, 0x18e73, 0x160, 0x18eb1, 0x18eb1, 0x160, 0x18eb1, 0x160, 0x18f9b,
        0x18f9b, 0x160, 0x18f9b, 0x160, 0x18fae, 0x18f9b, 0x160, 0x1901f, 0x160, 0x19028,
        0x18fae, 0x160, 0x18fae, 0x160, 0x18fef, 0x18fae, 0x160, 0x1901f, 0x160, 0x19028,
        0x18fef, 0x160, 0x18fef, 0x160, 0x19008, 0x18fef, 0x160, 0x1901f, 0x160, 0x19028,
        0x19008, 0x160, 0x19008, 0x160, 0x19028, 0x19028, 0x160, 0x1901a, 0x160, 0x1903c,
        0x1903c, 0x160, 0x1903c, 0x160, 0x19074, 0x1903c, 0x160, 0x19126, 0x160, 0x1912f,
        0x19074, 0x160, 0x19074, 0x160, 0x1909c, 0x1909c, 0x160, 0x1909c, 0x160, 0x190b5,
        0x1909c, 0x160, 0x19126, 0x160, 0x1912f, 0x190b5, 0x160, 0x190b5, 0x160, 0x1910f,
        0x1910f, 0x160, 0x1910f, 0x160, 0x1912f, 0x1912f, 0x160, 0x1912f, 0x160, 0x1915d,
        0x1915d, 0x160, 0x19121, 0x160, 0x1912f, 0x1915d, 0x160, 0x1915d, 0x160, 0x19171,
        0x19171, 0x160, 0x19171, 0x160, 0x191d5, 0x191d5, 0x160, 0x191cc, 0x160, 0x19216,
        0x19216, 0x160, 0x19106, 0x160, 0x1910f, 0x19216, 0x160, 0x19216, 0x160, 0x1925b,
        0x1925b, 0x160, 0x1925b, 0x160, 0x1929c, 0x1929c, 0x160, 0x1929c, 0x160, 0x192c4,
        0x192c4, 0x160, 0x19106, 0x160, 0x1910f, 0x192c4, 0x160, 0x192c4, 0x160, 0x19311,
        0x19311, 0x160, 0x191cc, 0x160, 0x191d5, 0x19311, 0x160, 0x19311, 0x160, 0x19335,
        0x19335, 0x160, 0x191cc, 0x160, 0x191d5, 0x19335, 0x160, 0x19335, 0x160, 0x19359,
        0x19359, 0x160, 0x19106, 0x160, 0x1910f, 0x19359, 0x160, 0x19359, 0x160, 0x193b7,
        0x193b7, 0x160, 0x191cc, 0x160, 0x191d5, 0x193b7, 0x160, 0x193b7, 0x160, 0x193d0,
        0x193d0, 0x160, 0x193d0, 0x160, 0x193f7, 0x193f7, 0x160, 0x193f7, 0x160, 0x1941e,
        0x1941e, 0x160, 0x1744b, 0x160, 0x17452, 0x1941e, 0x160, 0x1941e, 0x160, 0x19a3c,
        0x19a3c, 0x160, 0x1744c, 0x160, 0x17452, 0x19a3c, 0x160, 0x182de, 0x160, 0x182e8,
        0x19a3c, 0x160, 0x19a3c, 0x160, 0x19b44, 0x19b44, 0x160, 0x19b44, 0x160, 0x19def,
        0x19def, 0x160, 0x19de9, 0x160, 0x19f32, 0x19f32, 0x160, 0x19f32, 0x160, 0x1a0a6,
        0x1a0a6, 0x160, 0x1a0a6, 0x160, 0x1a248, 0x1a248, 0x160, 0x1744c, 0x160, 0x17452,
        0x1a248, 0x160, 0x1a248, 0x160, 0x1a303, 0x1a303, 0x160, 0x177e7, 0x160, 0x177ed,
        0x1a303, 0x160, 0x1a303, 0x160, 0x1a513, 0x1a513, 0x160, 0x177e7, 0x160, 0x177ed,
        0x1a513, 0x160, 0x1a513, 0x160, 0x1a643, 0x1a643, 0x160, 0x1a643, 0x160, 0x1a6e3,
        0x1a6e3, 0x160, 0x1a242, 0x160, 0x1a248, 0x1a6e3, 0x160, 0x1a6e3, 0x160, 0x1a797,
        0x1a797, 0x160, 0x1744b, 0x160, 0x17452, 0x1a797, 0x160, 0x1a797, 0x160, 0x1ae27,
        0x1ae27, 0x160, 0x1ae27, 0x160, 0x1afc1, 0x1afc1, 0x160, 0x1afc1, 0x160, 0x1aff7,
        0x1aff7, 0x160, 0x1aff7, 0x160, 0x1b01b, 0x1b01b, 0x160, 0x1b01b, 0x160, 0x1b051,
        0x1b051, 0x160, 0x1b051, 0x160, 0x1b09d, 0x1b09d, 0x160, 0x1b094, 0x160, 0x1b0e2,
        0x1b0e2, 0x160, 0x1b0e2, 0x160, 0x1b682, 0x1b682, 0x160, 0x1744b, 0x160, 0x17452,
        0x1b682, 0x160, 0x1b682, 0x160, 0x1bcbd, 0x1bcbd, 0x160, 0x1744b, 0x160, 0x17452,
        0x1bcbd, 0x160, 0x1bcbd, 0x160, 0x1bedc, 0x1bedc, 0x160, 0x1744b, 0x160, 0x17452,
        0x1bedc, 0x160, 0x1bedc, 0x160, 0x1bfe9, 0x1bfe9, 0x160, 0x1744b, 0x160, 0x17452,
        0x1bfe9, 0x160, 0x1bfe9, 0x160, 0x1c14d, 0x1c14d, 0x160, 0x1744b, 0x160, 0x17452,
        0x1c14d, 0x160, 0x1c14d, 0x160, 0x1c6e1, 0x1c6e1, 0x160, 0x1c6e1, 0x160, 0x1c755,
        0x1c755, 0x160, 0x19de9, 0x160, 0x19def, 0x1c755, 0x160, 0x1c755, 0x160, 0x1c999,
        0x1c999, 0x160, 0x1744b, 0x160, 0x17452, 0x1c999, 0x160, 0x1c999, 0x160, 0x1ca42,
        0x1ca42, 0x160, 0x1744b, 0x160, 0x17452, 0x1ca42, 0x160, 0x1bcb5, 0x160, 0x1bcbd,
        0x1ca42, 0x160, 0x1ca42, 0x160, 0x1cd78, 0x1cdd3, 0x160, 0x19de9, 0x160, 0x19def,
        0x1cdd3, 0x160, 0x1cdd3, 0x160, 0x1d1fa, 0x1d1fa, 0x160, 0x19de9, 0x160, 0x19def,
        0x1d1fa, 0x160, 0x1d1fa, 0x160, 0x1d55b, 0x1d55b, 0x160, 0x19de9, 0x160, 0x19def,
        0x1d55b, 0x160, 0x1d55b, 0x160, 0x1d712, 0x1d712, 0x160, 0x1d712, 0x160, 0x1d755,
        0x1d755, 0x160, 0x1d755, 0x160, 0x1d923, 0x1d923, 0x160, 0x1d923, 0x160, 0x1d9b6,
        0x1d9b6, 0x160, 0x1d9b6, 0x160, 0x1da35, 0x1da35, 0x160, 0x1da35, 0x160, 0x1db16,
        0x1db16, 0x160, 0x1744b, 0x160, 0x17452, 0x1db16, 0x160, 0x1db16, 0x160, 0x1db92,
        0x1db92, 0x160, 0x1db92, 0x160, 0x1de56, 0x1de56, 0x160, 0x1744b, 0x160, 0x17452,
        0x1de56, 0x160, 0x1de56, 0x160, 0x1df22, 0x1df22, 0x160, 0x1744b, 0x160, 0x17452,
        0x1df22, 0x160, 0x1df22, 0x160, 0x1e2dd, 0x1e2dd, 0x160, 0x1744b, 0x160, 0x17452,
        0x1e2dd, 0x160, 0x1e2dd, 0x160, 0x1e4e5, 0x1e4e5, 0x160, 0x17448, 0x160, 0x17452,
        0x1e4e5, 0x160, 0x1e4e5, 0x160, 0x1e5bd, 0x1e616, 0x160, 0x1e616, 0x160, 0x1e625,
        0x1e625, 0x160, 0x1e607, 0x160, 0x1e616, 0x1e625, 0x160, 0x1e625, 0x160, 0x1e62c,
        0x1e66f, 0x160, 0x1e66f, 0x160, 0x1e6c8, 0x1e6c8, 0x160, 0x1e6c8, 0x160, 0x1e6f1,
        0x1e6f1, 0x160, 0x1e6f1, 0x160, 0x1e70c, 0x1e70c, 0x160, 0x1e70c, 0x160, 0x1e720,
        0x1e720, 0x160, 0x1e720, 0x160, 0x1e738, 0x1e738, 0x160, 0x1e72b, 0x160, 0x1e742,
        0x1e742, 0x160, 0x1e742, 0x160, 0x1e793, 0x1e793, 0x160, 0x1e72b, 0x160, 0x1e738,
        0x1e793, 0x160, 0x1e793, 0x160, 0x1e7a0, 0x1e7a0, 0x160, 0x1e7a0, 0x160, 0x1e7ba,
        0x1e7ba, 0x160, 0x1e7ba, 0x160, 0x1e93a, 0x1e7ba, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1e93a, 0x160, 0x1e7b8, 0x160, 0x1e7ba, 0x1e93a, 0x160, 0x1e93a, 0x160, 0x1e964,
        0x1e964, 0x160, 0x1e964, 0x160, 0x1e9c1, 0x1e9c1, 0x160, 0x1e9c1, 0x160, 0x1ea04,
        0x1ea04, 0x160, 0x1ea04, 0x160, 0x1ea31, 0x1ea31, 0x160, 0x1ea31, 0x160, 0x1eae0,
        0x1eae0, 0x160, 0x1eae0, 0x160, 0x1eb1b, 0x1eb1b, 0x160, 0x1eb1b, 0x160, 0x1eb58,
        0x1eb58, 0x160, 0x1eb58, 0x160, 0x1ec1f, 0x1ec1f, 0x160, 0x1ec1f, 0x160, 0x1ec92,
        0x1ec92, 0x160, 0x1ec92, 0x160, 0x1ed0b, 0x1ed0b, 0x160, 0x1eada, 0x160, 0x1eae0,
        0x1ed0b, 0x160, 0x1ed0b, 0x160, 0x1ed81, 0x1ed81, 0x160, 0x1ed81, 0x160, 0x1edc0,
        0x1edc0, 0x160, 0x1edc0, 0x160, 0x1ee64, 0x1edc0, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1ee64, 0x160, 0x1ee64, 0x160, 0x1eeb5, 0x1eeb5, 0x160, 0x1eeb5, 0x160, 0x1eecc,
        0x1eecc, 0x160, 0x1eecc, 0x160, 0x1eef8, 0x1eef8, 0x160, 0x1eef8, 0x160, 0x1ef3a,
        0x1ef3a, 0x160, 0x1ef3a, 0x160, 0x1ef62, 0x1ef62, 0x160, 0x1ef62, 0x160, 0x1f0bf,
        0x1ef62, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x1f0bf, 0x160, 0x1f0bf, 0x160, 0x1f14a,
        0x1f0bf, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x1f0bf, 0x160, 0x1fee9, 0x160, 0x1fef3,
        0x1f0bf, 0x160, 0x2038b, 0x160, 0x2039a, 0x1f14a, 0x160, 0x1f14a, 0x160, 0x1f17f,
        0x1f17f, 0x160, 0x1ed07, 0x160, 0x1ed0b, 0x1f17f, 0x160, 0x1f17f, 0x160, 0x1f1d5,
        0x1f1d5, 0x160, 0x1f1d5, 0x160, 0x1f300, 0x1f300, 0x160, 0x1f2f9, 0x160, 0x1f3f9,
        0x1f3f9, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x1f3f9, 0x160, 0x1f3f9, 0x160, 0x1f51d,
        0x1f51d, 0x160, 0x1f51d, 0x160, 0x1f59b, 0x1f59b, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1f59b, 0x160, 0x1f59b, 0x160, 0x1f7e2, 0x1f7e2, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1f7e2, 0x160, 0x1f7e2, 0x160, 0x1f99a, 0x1f99a, 0x160, 0x1f99a, 0x160, 0x1f9bc,
        0x1f9bc, 0x160, 0x1f9bc, 0x160, 0x1f9e0, 0x1f9e0, 0x160, 0x1f9e0, 0x160, 0x1fac1,
        0x1fac1, 0x160, 0x1ee5c, 0x160, 0x1ee64, 0x1fac1, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1fac1, 0x160, 0x1fac1, 0x160, 0x1fb31, 0x1fb31, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1fb31, 0x160, 0x1fb31, 0x160, 0x1fc77, 0x1fc77, 0x160, 0x1fc77, 0x160, 0x1fca3,
        0x1fca3, 0x160, 0x1fca3, 0x160, 0x1fce7, 0x1fce7, 0x160, 0x1fce7, 0x160, 0x1fde2,
        0x1fce7, 0x160, 0x200eb, 0x160, 0x200fa, 0x1fde2, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1fde2, 0x160, 0x1fde2, 0x160, 0x1fe9a, 0x1fe9a, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x1fe9a, 0x160, 0x1fe9a, 0x160, 0x1fef3, 0x1fe9a, 0x160, 0x2038b, 0x160, 0x2039a,
        0x1fef3, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x1fef3, 0x160, 0x1fef3, 0x160, 0x1ff89,
        0x1fef3, 0x160, 0x2038b, 0x160, 0x2039a, 0x1ff89, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x1ff89, 0x160, 0x1ff89, 0x160, 0x1fff9, 0x1fff9, 0x160, 0x1fff9, 0x160, 0x20026,
        0x20026, 0x160, 0x20026, 0x160, 0x20078, 0x20078, 0x160, 0x20078, 0x160, 0x200fa,
        0x200fa, 0x160, 0x200fa, 0x160, 0x2012b, 0x2012b, 0x160, 0x2012b, 0x160, 0x2015e,
        0x201e9, 0x160, 0x201e9, 0x160, 0x20271, 0x20271, 0x160, 0x2015e, 0x160, 0x201e9,
        0x20271, 0x160, 0x20271, 0x160, 0x2033e, 0x2033e, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x2033e, 0x160, 0x2033e, 0x160, 0x2039a, 0x2039a, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x2039a, 0x160, 0x1f7d7, 0x160, 0x1f7e2, 0x2039a, 0x160, 0x2039a, 0x160, 0x204cb,
        0x204e9, 0x160, 0x204e9, 0x160, 0x205c6, 0x205c6, 0x160, 0x200e1, 0x160, 0x200fa,
        0x205c6, 0x160, 0x205c6, 0x160, 0x2061a, 0x2061a, 0x160, 0x2061a, 0x160, 0x20683,
        0x206a1, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x206a1, 0x160, 0x1f7d7, 0x160, 0x1f7e2,
        0x206a1, 0x160, 0x206a1, 0x160, 0x20974, 0x20974, 0x160, 0x20974, 0x160, 0x209d7,
        0x209d7, 0x160, 0x1f2fa, 0x160, 0x1f300, 0x209d7, 0x160, 0x209d7, 0x160, 0x20a3f,
        0x20a3f, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x20a3f, 0x160, 0x20373, 0x160, 0x2039a,
        0x20a3f, 0x160, 0x20a3f, 0x160, 0x20a79, 0x20a79, 0x160, 0x20a79, 0x160, 0x20b5d,
        0x20b5d, 0x160, 0x200e1, 0x160, 0x200fa, 0x20b5d, 0x160, 0x20b5d, 0x160, 0x20ba6,
        0x20ba6, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x20ba6, 0x160, 0x20373, 0x160, 0x2039a,
        0x20ba6, 0x160, 0x20ba6, 0x160, 0x20be0, 0x20be0, 0x160, 0x20be0, 0x160, 0x20bfb,
        0x20bfb, 0x160, 0x20bfb, 0x160, 0x20c98, 0x20c98, 0x160, 0x20c98, 0x160, 0x20cd0,
        0x20cd0, 0x160, 0x20cd0, 0x160, 0x20d0f, 0x20d0f, 0x160, 0x20d0f, 0x160, 0x20d2c,
        0x20d2c, 0x160, 0x20d2c, 0x160, 0x20dac, 0x20dac, 0x160, 0x20dac, 0x160, 0x20e1a,
        0x20e1a, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x20e1a, 0x160, 0x1fed7, 0x160, 0x1fef3,
        0x20e1a, 0x160, 0x2038b, 0x160, 0x2039a, 0x20e1a, 0x160, 0x20e1a, 0x160, 0x20e5c,
        0x20e5c, 0x160, 0x1f595, 0x160, 0x1f59b, 0x20e5c, 0x160, 0x20e5c, 0x160, 0x20f95,
        0x20f95, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x20f95, 0x160, 0x1fc6f, 0x160, 0x1fc77,
        0x20f95, 0x160, 0x20f95, 0x160, 0x211b5, 0x211b5, 0x160, 0x200e1, 0x160, 0x200fa,
        0x211b5, 0x160, 0x211b5, 0x160, 0x21212, 0x21212, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21212, 0x160, 0x20373, 0x160, 0x2039a, 0x21212, 0x160, 0x21212, 0x160, 0x21251,
        0x21251, 0x160, 0x21251, 0x160, 0x21294, 0x21294, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21294, 0x160, 0x1fed2, 0x160, 0x1fef3, 0x21294, 0x160, 0x2038b, 0x160, 0x2039a,
        0x21294, 0x160, 0x21294, 0x160, 0x21308, 0x21308, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x21308, 0x160, 0x1ffe8, 0x160, 0x1fff9, 0x21308, 0x160, 0x21308, 0x160, 0x2136c,
        0x21399, 0x160, 0x21399, 0x160, 0x21526, 0x21526, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x21526, 0x160, 0x20a30, 0x160, 0x20a3f, 0x21526, 0x160, 0x21526, 0x160, 0x2159f,
        0x2159f, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x2159f, 0x160, 0x20373, 0x160, 0x2039a,
        0x2159f, 0x160, 0x2159f, 0x160, 0x215d9, 0x21605, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21605, 0x160, 0x1f7d7, 0x160, 0x1f7e2, 0x21605, 0x160, 0x21605, 0x160, 0x21811,
        0x21811, 0x160, 0x200e1, 0x160, 0x200fa, 0x21811, 0x160, 0x21811, 0x160, 0x2185f,
        0x2185f, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x2185f, 0x160, 0x20373, 0x160, 0x2039a,
        0x2185f, 0x160, 0x2185f, 0x160, 0x21899, 0x21899, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21899, 0x160, 0x204ba, 0x160, 0x204cb, 0x21899, 0x160, 0x21899, 0x160, 0x21998,
        0x21998, 0x160, 0x21998, 0x160, 0x219ff, 0x219ff, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x219ff, 0x160, 0x219ff, 0x160, 0x21a8c, 0x21a8c, 0x160, 0x21a8c, 0x160, 0x21a9c,
        0x21a9c, 0x160, 0x21a9c, 0x160, 0x21acd, 0x21acd, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x21acd, 0x160, 0x21acd, 0x160, 0x21b65, 0x21b65, 0x160, 0x1f2fa, 0x160, 0x1f300,
        0x21b65, 0x160, 0x21b5b, 0x160, 0x21c3a, 0x21c3a, 0x160, 0x21c3a, 0x160, 0x21caa,
        0x21caa, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x21caa, 0x160, 0x21caa, 0x160, 0x21d1a,
        0x21d1a, 0x160, 0x21d1a, 0x160, 0x21dc9, 0x21dc9, 0x160, 0x21c98, 0x160, 0x21caa,
        0x21dc9, 0x160, 0x21dc9, 0x160, 0x21e32, 0x21e32, 0x160, 0x21e32, 0x160, 0x21e8e,
        0x21e8e, 0x160, 0x21e8e, 0x160, 0x21ec1, 0x21ec1, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21ec1, 0x160, 0x1ff7e, 0x160, 0x1ff89, 0x21ec1, 0x160, 0x2038b, 0x160, 0x2039a,
        0x21ec1, 0x160, 0x21ec1, 0x160, 0x21f18, 0x21f18, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x21f18, 0x160, 0x21f18, 0x160, 0x220cf, 0x220cf, 0x160, 0x1eada, 0x160, 0x1eae0,
        0x220cf, 0x160, 0x220cf, 0x160, 0x2216f, 0x2216f, 0x160, 0x2216f, 0x160, 0x22220,
        0x22220, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x22220, 0x160, 0x20373, 0x160, 0x2039a,
        0x22220, 0x160, 0x22220, 0x160, 0x2225a, 0x2225a, 0x160, 0x2225a, 0x160, 0x2229d,
        0x2229d, 0x160, 0x2220d, 0x160, 0x22220, 0x2229d, 0x160, 0x2229d, 0x160, 0x222f5,
        0x222f5, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x222f5, 0x160, 0x20373, 0x160, 0x2039a,
        0x222f5, 0x160, 0x222f5, 0x160, 0x2232f, 0x2232f, 0x160, 0x2232f, 0x160, 0x22367,
        0x22399, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x22399, 0x160, 0x22399, 0x160, 0x22601,
        0x22399, 0x160, 0x22648, 0x160, 0x22687, 0x22399, 0x160, 0x2271a, 0x160, 0x2273f,
        0x22399, 0x160, 0x2275e, 0x160, 0x227cf, 0x227cf, 0x160, 0x227cf, 0x160, 0x2282c,
        0x22869, 0x160, 0x22869, 0x160, 0x22950, 0x22950, 0x160, 0x22950, 0x160, 0x2297c,
        0x229ce, 0x160, 0x229ce, 0x160, 0x229fa, 0x229fa, 0x160, 0x200eb, 0x160, 0x200fa,
        0x229fa, 0x160, 0x229fa, 0x160, 0x22a5b, 0x22a5b, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x22a5b, 0x160, 0x20373, 0x160, 0x2039a, 0x22a5b, 0x160, 0x22a5b, 0x160, 0x22a95,
        0x22a95, 0x160, 0x22a95, 0x160, 0x22ac5, 0x22ac5, 0x160, 0x22ac5, 0x160, 0x22bab,
        0x22bf3, 0x160, 0x22bf3, 0x160, 0x22c24, 0x22c24, 0x160, 0x22c24, 0x160, 0x22c63,
        0x22c63, 0x160, 0x22c63, 0x160, 0x22cc0, 0x22cc0, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x22cc0, 0x160, 0x22cc0, 0x160, 0x22e06, 0x22e27, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x22e27, 0x160, 0x22e27, 0x160, 0x23084, 0x23084, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x23084, 0x160, 0x204ba, 0x160, 0x204cb, 0x23084, 0x160, 0x23084, 0x160, 0x23186,
        0x23186, 0x160, 0x23186, 0x160, 0x231d8, 0x231d8, 0x160, 0x231d8, 0x160, 0x23390,
        0x23390, 0x160, 0x20652, 0x160, 0x20683, 0x23390, 0x160, 0x2282c, 0x160, 0x22869,
        0x23390, 0x160, 0x23390, 0x160, 0x23470, 0x23470, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x23470, 0x160, 0x23470, 0x160, 0x234ba, 0x234ba, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x234ba, 0x160, 0x234ba, 0x160, 0x23571, 0x23571, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x23571, 0x160, 0x23571, 0x160, 0x23620, 0x23620, 0x160, 0x23620, 0x160, 0x2367a,
        0x2367a, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x2367a, 0x160, 0x2367a, 0x160, 0x237ed,
        0x237ed, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x237ed, 0x160, 0x237ed, 0x160, 0x238fe,
        0x238fe, 0x160, 0x1f2fa, 0x160, 0x1f300, 0x238fe, 0x160, 0x238fe, 0x160, 0x23a18,
        0x23a18, 0x160, 0x1f2fa, 0x160, 0x1f300, 0x23a18, 0x160, 0x23a18, 0x160, 0x23b63,
        0x23b63, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x23b63, 0x160, 0x237e5, 0x160, 0x237ed,
        0x23b63, 0x160, 0x23b63, 0x160, 0x23cc1, 0x23cf6, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x23cf6, 0x160, 0x23cf6, 0x160, 0x23dbd, 0x23dbd, 0x160, 0x1f2f6, 0x160, 0x1f300,
        0x23dbd, 0x160, 0x23dbd, 0x160, 0x23f7e, 0x23f7e, 0x160, 0x1f2f9, 0x160, 0x1f300,
        0x23f7e, 0x160, 0x23f7e, 0x160, 0x24143, 0x24143, 0x160, 0x24143, 0x160, 0x2416d,
        0x2416d, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x2416d, 0x160, 0x2416d, 0x160, 0x243aa,
        0x243aa, 0x160, 0x243aa, 0x160, 0x243de, 0x243de, 0x160, 0x1e9bb, 0x160, 0x1e9c1,
        0x243de, 0x160, 0x243de, 0x160, 0x244ca, 0x24586, 0x160, 0x24586, 0x160, 0x245ab,
        0x245ab, 0x160, 0x1f2f9, 0x160, 0x1f300, 0x245ab, 0x160, 0x245ab, 0x160, 0x246eb,
        0x246eb, 0x160, 0x246eb, 0x160, 0x24709, 0x24709, 0x160, 0x24709, 0x160, 0x2473d,
        0x2473d, 0x160, 0x2473d, 0x160, 0x24773, 0x24773, 0x160, 0x24773, 0x160, 0x24862,
        0x24862, 0x160, 0x24862, 0x160, 0x24937, 0x24937, 0x160, 0x24937, 0x160, 0x24b6d,
        0x24b6d, 0x160, 0x24b6d, 0x160, 0x24bec, 0x24b6d, 0x160, 0x25878, 0x160, 0x2587f,
        0x24bec, 0x160, 0x24bec, 0x160, 0x24c6d, 0x24bec, 0x160, 0x25879, 0x160, 0x2587f,
        0x24c6d, 0x160, 0x24c6d, 0x160, 0x24d00, 0x24d00, 0x160, 0x24d00, 0x160, 0x24d15,
        0x24d15, 0x160, 0x24d15, 0x160, 0x24d42, 0x24d42, 0x160, 0x24d42, 0x160, 0x24d78,
        0x24d78, 0x160, 0x24d78, 0x160, 0x250d4, 0x24d78, 0x160, 0x25878, 0x160, 0x2587f,
        0x250d4, 0x160, 0x250d4, 0x160, 0x25317, 0x250d4, 0x160, 0x25878, 0x160, 0x2587f,
        0x25317, 0x160, 0x25317, 0x160, 0x255ea, 0x255ea, 0x160, 0x255ea, 0x160, 0x25674,
        0x25674, 0x160, 0x25674, 0x160, 0x2570e, 0x25674, 0x160, 0x25879, 0x160, 0x2587f,
        0x2570e, 0x160, 0x2570e, 0x160, 0x2587f, 0x2587f, 0x160, 0x25875, 0x160, 0x259a8,
        0x259a8, 0x160, 0x259a8, 0x160, 0x259c0, 0x259eb, 0x160, 0x259eb, 0x160, 0x25c78,
        0x25c78, 0x160, 0x25c78, 0x160, 0x25cbc, 0x25cbc, 0x160, 0x25cbc, 0x160, 0x25cfe,
        0x25cfe, 0x160, 0x25cfe, 0x160, 0x25d40, 0x25d40, 0x160, 0x25d40, 0x160, 0x25d6c,
        0x25d6c, 0x160, 0x25d6c, 0x160, 0x25f4b, 0x25f4b, 0x160, 0x25f4b, 0x160, 0x26074,
        0x25f4b, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x26074, 0x160, 0x26074, 0x160, 0x261b8,
        0x26074, 0x160, 0x2b3b0, 0x160, 0x2b3ba, 0x261b8, 0x160, 0x261b8, 0x160, 0x261ca,
        0x261ca, 0x160, 0x261ca, 0x160, 0x261f8, 0x261f8, 0x160, 0x261f8, 0x160, 0x2628a,
        0x2628a, 0x160, 0x2628a, 0x160, 0x262ce, 0x26412, 0x160, 0x26412, 0x160, 0x26437,
        0x26437, 0x160, 0x26437, 0x160, 0x264e0, 0x26437, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x264e0, 0x160, 0x264e0, 0x160, 0x265cb, 0x265cb, 0x160, 0x265cb, 0x160, 0x26640,
        0x26640, 0x160, 0x26640, 0x160, 0x26723, 0x26723, 0x160, 0x26723, 0x160, 0x2680e,
        0x2680e, 0x160, 0x2680e, 0x160, 0x26933, 0x26933, 0x160, 0x26933, 0x160, 0x26a58,
        0x26a58, 0x160, 0x26a58, 0x160, 0x26b97, 0x26a58, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x26b97, 0x160, 0x26b97, 0x160, 0x26d3f, 0x26d3f, 0x160, 0x265c5, 0x160, 0x265cb,
        0x26d3f, 0x160, 0x26d3f, 0x160, 0x2704a, 0x2704a, 0x160, 0x2704a, 0x160, 0x271e1,
        0x2704a, 0x160, 0x284be, 0x160, 0x284c4, 0x271e1, 0x160, 0x271e1, 0x160, 0x27204,
        0x27204, 0x160, 0x27204, 0x160, 0x2725e, 0x2725e, 0x160, 0x2725e, 0x160, 0x272bf,
        0x272bf, 0x160, 0x272bf, 0x160, 0x27345, 0x272bf, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x27345, 0x160, 0x27345, 0x160, 0x273f2, 0x27345, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x273f2, 0x160, 0x273f2, 0x160, 0x275f9, 0x275f9, 0x160, 0x275f9, 0x160, 0x2762f,
        0x2762f, 0x160, 0x2762f, 0x160, 0x27669, 0x27669, 0x160, 0x27669, 0x160, 0x276ce,
        0x276ce, 0x160, 0x276ce, 0x160, 0x2789c, 0x276ce, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x27c45, 0x160, 0x27c45, 0x160, 0x284c4, 0x284c4, 0x160, 0x284c4, 0x160, 0x28508,
        0x28508, 0x160, 0x28508, 0x160, 0x28541, 0x28541, 0x160, 0x28541, 0x160, 0x285a6,
        0x285a6, 0x160, 0x285a6, 0x160, 0x2862c, 0x285a6, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2862c, 0x160, 0x2862c, 0x160, 0x28b8f, 0x2862c, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x28b8f, 0x160, 0x273e8, 0x160, 0x273f2, 0x28b8f, 0x160, 0x28b8f, 0x160, 0x28c2f,
        0x28b8f, 0x160, 0x2b3b4, 0x160, 0x2b3ba, 0x28c2f, 0x160, 0x28c2f, 0x160, 0x290e1,
        0x28c2f, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x290e1, 0x160, 0x290e1, 0x160, 0x2928f,
        0x290e1, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2928f, 0x160, 0x2928f, 0x160, 0x29340,
        0x29340, 0x160, 0x29340, 0x160, 0x29457, 0x29457, 0x160, 0x29450, 0x160, 0x2955b,
        0x2955b, 0x160, 0x2955b, 0x160, 0x29608, 0x29608, 0x160, 0x29608, 0x160, 0x296d3,
        0x296d3, 0x160, 0x296d3, 0x160, 0x296fb, 0x296fb, 0x160, 0x296fb, 0x160, 0x299c3,
        0x299c3, 0x160, 0x299c3, 0x160, 0x29a50, 0x29a50, 0x160, 0x29a50, 0x160, 0x2a0e2,
        0x29a50, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2a0e2, 0x160, 0x2a0e2, 0x160, 0x2a154,
        0x2a154, 0x160, 0x2a154, 0x160, 0x2a25b, 0x2a154, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2a25b, 0x160, 0x284bb, 0x160, 0x284c4, 0x2a25b, 0x160, 0x2a25b, 0x160, 0x2a77b,
        0x2a77b, 0x160, 0x284be, 0x160, 0x284c4, 0x2a77b, 0x160, 0x2a77b, 0x160, 0x2ad13,
        0x2ad13, 0x160, 0x2ad13, 0x160, 0x2ae30, 0x2ae30, 0x160, 0x2ae28, 0x160, 0x2af28,
        0x2af28, 0x160, 0x2af28, 0x160, 0x2b017, 0x2b017, 0x160, 0x2b017, 0x160, 0x2b11c,
        0x2b11c, 0x160, 0x2b11c, 0x160, 0x2b1b4, 0x2b1b4, 0x160, 0x2b1b4, 0x160, 0x2b246,
        0x2b246, 0x160, 0x2b246, 0x160, 0x2b3ba, 0x2b3ba, 0x160, 0x2b3b4, 0x160, 0x2b492,
        0x2b492, 0x160, 0x2b492, 0x160, 0x2b52b, 0x2b52b, 0x160, 0x2b3a8, 0x160, 0x2b3ba,
        0x2b52b, 0x160, 0x2b52b, 0x160, 0x2b68e, 0x2b68e, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2b68e, 0x160, 0x2b68e, 0x160, 0x2b772, 0x2b772, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2b772, 0x160, 0x2b768, 0x160, 0x2b851, 0x2b851, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2b851, 0x160, 0x2b768, 0x160, 0x2b772, 0x2b851, 0x160, 0x2b851, 0x160, 0x2b930,
        0x2b930, 0x160, 0x2606c, 0x160, 0x26074, 0x2b930, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2b930, 0x160, 0x2b930, 0x160, 0x2bafb, 0x2bafb, 0x160, 0x284be, 0x160, 0x284c4,
        0x2bafb, 0x160, 0x2bafb, 0x160, 0x2bc6c, 0x2bc6c, 0x160, 0x284be, 0x160, 0x284c4,
        0x2bc6c, 0x160, 0x2bc6c, 0x160, 0x2be2b, 0x2be2b, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2be2b, 0x160, 0x2be2b, 0x160, 0x2bed9, 0x2bed9, 0x160, 0x2bed9, 0x160, 0x2bf43,
        0x2bf43, 0x160, 0x2a0da, 0x160, 0x2a0e2, 0x2bf43, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2bf43, 0x160, 0x2bf43, 0x160, 0x2c26b, 0x2c26b, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x2c26b, 0x160, 0x2c26b, 0x160, 0x2c2e0, 0x2c2e0, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2c2e0, 0x160, 0x2c2e0, 0x160, 0x2c517, 0x2c517, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x2c517, 0x160, 0x2c517, 0x160, 0x2c5ef, 0x2c5ef, 0x160, 0x2c5ef, 0x160, 0x2c6d6,
        0x2c6d6, 0x160, 0x2a0da, 0x160, 0x2a0e2, 0x2c6d6, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2c6d6, 0x160, 0x2c6d6, 0x160, 0x2c931, 0x2c931, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x2c931, 0x160, 0x2c931, 0x160, 0x2c9fa, 0x2c9fa, 0x160, 0x284be, 0x160, 0x284c4,
        0x2c9fa, 0x160, 0x2c9fa, 0x160, 0x2cb0c, 0x2cb0c, 0x160, 0x2b116, 0x160, 0x2b11c,
        0x2cb0c, 0x160, 0x2cb0c, 0x160, 0x2cbb0, 0x2cbb0, 0x160, 0x2cbb0, 0x160, 0x2cca5,
        0x2cca5, 0x160, 0x2b1ad, 0x160, 0x2b1b4, 0x2cca5, 0x160, 0x2cca5, 0x160, 0x2ce07,
        0x2ce07, 0x160, 0x2b3b4, 0x160, 0x2b3ba, 0x2ce07, 0x160, 0x2ce07, 0x160, 0x2cf20,
        0x2cf20, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2cf20, 0x160, 0x2cf20, 0x160, 0x2d068,
        0x2d068, 0x160, 0x2b3b0, 0x160, 0x2b3ba, 0x2d068, 0x160, 0x2d068, 0x160, 0x2d0d6,
        0x2d0d6, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2d0d6, 0x160, 0x2d0d6, 0x160, 0x2d152,
        0x2d152, 0x160, 0x2d152, 0x160, 0x2d1b3, 0x2d1b3, 0x160, 0x2d1ac, 0x160, 0x2d20c,
        0x2d20c, 0x160, 0x2b3b0, 0x160, 0x2b3ba, 0x2d20c, 0x160, 0x2d20c, 0x160, 0x2d46a,
        0x2d46a, 0x160, 0x264d8, 0x160, 0x264e0, 0x2d46a, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2d46a, 0x160, 0x2d46a, 0x160, 0x2d90d, 0x2d90d, 0x160, 0x2d90d, 0x160, 0x2d9c7,
        0x2da80, 0x160, 0x265c5, 0x160, 0x265cb, 0x2da80, 0x160, 0x2da80, 0x160, 0x2db55,
        0x2db55, 0x160, 0x2b3b0, 0x160, 0x2b3ba, 0x2db55, 0x160, 0x2db55, 0x160, 0x2dce6,
        0x2dce6, 0x160, 0x2dce6, 0x160, 0x2dd1b, 0x2dd1b, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2dd1b, 0x160, 0x2dd1b, 0x160, 0x2df2b, 0x2df2b, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x2df2b, 0x160, 0x2df2b, 0x160, 0x2e135, 0x2e135, 0x160, 0x2e135, 0x160, 0x2e18c,
        0x2e18c, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2e18c, 0x160, 0x2e18c, 0x160, 0x2e38a,
        0x2e38a, 0x160, 0x2606c, 0x160, 0x26074, 0x2e38a, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2e38a, 0x160, 0x2e38a, 0x160, 0x2eaf4, 0x2eaf4, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2eaf4, 0x160, 0x2eaf4, 0x160, 0x2ed3b, 0x2ed3b, 0x160, 0x264d8, 0x160, 0x264e0,
        0x2ed3b, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2ed3b, 0x160, 0x2ed3b, 0x160, 0x2ee88,
        0x2ee88, 0x160, 0x2ee88, 0x160, 0x2f2aa, 0x2f2aa, 0x160, 0x2c6d0, 0x160, 0x2c6d6,
        0x2f2aa, 0x160, 0x2f2aa, 0x160, 0x2f909, 0x2f909, 0x160, 0x2a253, 0x160, 0x2a25b,
        0x2f909, 0x160, 0x2b3b3, 0x160, 0x2b3ba, 0x2f909, 0x160, 0x2f909, 0x160, 0x2fb6f,
        0x2fb6f, 0x160, 0x2fb6f, 0x160, 0x2fbba, 0x2fbba, 0x160, 0x2b3b3, 0x160, 0x2b3ba,
        0x2fbba, 0x160, 0x2fbba, 0x160, 0x2fd25, 0x2fd25, 0x160, 0x2b3b0, 0x160, 0x2b3ba,
        0x2fd25, 0x160, 0x2fd25, 0x160, 0x2fe24, 0x2fe24, 0x160, 0x2b3b4, 0x160, 0x2b3ba,
        0x2fe24, 0x160, 0x2fe24, 0x160, 0x3001b, 0x3001b, 0x160, 0x3001b, 0x160, 0x30152,
        0x30152, 0x160, 0x30152, 0x160, 0x30208, 0x30208, 0x160, 0x2b3b0, 0x160, 0x2b3ba,
        0x30208, 0x160, 0x30208, 0x160, 0x30786, 0x307c2, 0x160, 0x307c2, 0x160, 0x30852,
        0x307c2, 0x160, 0x3380c, 0x160, 0x33813, 0x30852, 0x160, 0x30852, 0x160, 0x30868,
        0x30868, 0x160, 0x30868, 0x160, 0x308cc, 0x30868, 0x160, 0x30a47, 0x160, 0x30a4d,
        0x308cc, 0x160, 0x308c5, 0x160, 0x30928, 0x308cc, 0x160, 0x30a47, 0x160, 0x30a4d,
        0x30928, 0x160, 0x30928, 0x160, 0x309b0, 0x30928, 0x160, 0x30b72, 0x160, 0x30b7a,
        0x30ae4, 0x160, 0x30ae4, 0x160, 0x30b7a, 0x30c0e, 0x160, 0x30c0e, 0x160, 0x30c67,
        0x30c85, 0x160, 0x30c85, 0x160, 0x30cb9, 0x30cb9, 0x160, 0x30cb9, 0x160, 0x30d96,
        0x30d96, 0x160, 0x30d96, 0x160, 0x30e53, 0x30e53, 0x160, 0x30e53, 0x160, 0x31095,
        0x31095, 0x160, 0x31095, 0x160, 0x310f2, 0x310f2, 0x160, 0x310f2, 0x160, 0x3113e,
        0x3113e, 0x160, 0x30a44, 0x160, 0x30a4d, 0x3113e, 0x160, 0x3113e, 0x160, 0x31201,
        0x31201, 0x160, 0x30a47, 0x160, 0x30a4d, 0x31201, 0x160, 0x31201, 0x160, 0x31473,
        0x31473, 0x160, 0x30b70, 0x160, 0x30b7a, 0x31473, 0x160, 0x31473, 0x160, 0x3150b,
        0x31562, 0x160, 0x31562, 0x160, 0x31616, 0x31616, 0x160, 0x31616, 0x160, 0x31658,
        0x31658, 0x160, 0x31658, 0x160, 0x316ca, 0x316ca, 0x160, 0x30a47, 0x160, 0x30a4d,
        0x316ca, 0x160, 0x316ca, 0x160, 0x31859, 0x31859, 0x160, 0x31859, 0x160, 0x3195e,
        0x3195e, 0x160, 0x3195e, 0x160, 0x31fe7, 0x3195e, 0x160, 0x3380c, 0x160, 0x33813,
        0x31fe7, 0x160, 0x31fe7, 0x160, 0x324b9, 0x31fe7, 0x160, 0x3380c, 0x160, 0x33813,
        0x324b9, 0x160, 0x324b9, 0x160, 0x3251a, 0x3251a, 0x160, 0x3251a, 0x160, 0x32581,
        0x32581, 0x160, 0x32581, 0x160, 0x3260d, 0x3260d, 0x160, 0x3260d, 0x160, 0x3274f,
        0x3274f, 0x160, 0x3274f, 0x160, 0x327fa, 0x327fa, 0x160, 0x327fa, 0x160, 0x32948,
        0x32948, 0x160, 0x32948, 0x160, 0x329c1, 0x329c1, 0x160, 0x329c1, 0x160, 0x32aca,
        0x32aca, 0x160, 0x32aca, 0x160, 0x32c78, 0x32c78, 0x160, 0x32c78, 0x160, 0x32fde,
        0x32c78, 0x160, 0x3380c, 0x160, 0x33813, 0x32fde, 0x160, 0x32fde, 0x160, 0x330e7,
        0x330e7, 0x160, 0x330e7, 0x160, 0x33785, 0x330e7, 0x160, 0x3380c, 0x160, 0x33813,
        0x337ae, 0x160, 0x337ae, 0x160, 0x33a21, 0x33a21, 0x160, 0x3380c, 0x160, 0x33813,
        0x33a21, 0x160, 0x33a21, 0x160, 0x33c86, 0x33c86, 0x160, 0x33c86, 0x160, 0x33d15,
        0x33d56, 0x160, 0x3377d, 0x160, 0x33785, 0x33d56, 0x160, 0x3380c, 0x160, 0x33813,
        0x33d56, 0x160, 0x33d56, 0x160, 0x33f82, 0x33f82, 0x160, 0x33804, 0x160, 0x33813,
        0x33f82, 0x160, 0x33a1a, 0x160, 0x33a21, 0x33f82, 0x160, 0x33f82, 0x160, 0x3410f,
        0x3410f, 0x160, 0x3410f, 0x160, 0x3418d, 0x34246, 0x160, 0x3380c, 0x160, 0x33813,
        0x34246, 0x160, 0x34246, 0x160, 0x34827, 0x34827, 0x160, 0x34827, 0x160, 0x34889,
        0x34889, 0x160, 0x34889, 0x160, 0x348e7, 0x348e7, 0x160, 0x348e7, 0x160, 0x34927,
        0x34927, 0x160, 0x34927, 0x160, 0x34965, 0x34965, 0x160, 0x34965, 0x160, 0x349a8,
        0x349a8, 0x160, 0x349a8, 0x160, 0x349cd, 0x349cd, 0x160, 0x349cd, 0x160, 0x34aad,
        0x34bff, 0x160, 0x34bff, 0x160, 0x34c45, 0x34c45, 0x160, 0x34c40, 0x160, 0x34c68,
        0x34c9d, 0x160, 0x34c9d, 0x160, 0x34ce7, 0x34d1e, 0x160, 0x34ce1, 0x160, 0x34ce7,
        0x34d1e, 0x160, 0x34d1e, 0x160, 0x34d46, 0x34d46, 0x160, 0x34d46, 0x160, 0x34d74,
        0x34d74, 0x160, 0x34d74, 0x160, 0x34da2, 0x34dfa, 0x160, 0x34dfa, 0x160, 0x34e3c,
        0x34e3c, 0x160, 0x34e3c, 0x160, 0x34e7a, 0x34e7a, 0x160, 0x34e7a, 0x160, 0x34f20,
        0x34f71, 0x160, 0x34f71, 0x160, 0x34fb3, 0x34fb3, 0x160, 0x34fb3, 0x160, 0x3503b,
        0x3503b, 0x160, 0x3503b, 0x160, 0x3521f, 0x3521f, 0x160, 0x3521f, 0x160, 0x3538a,
        0x3538a, 0x160, 0x3538a, 0x160, 0x353dc, 0x353dc, 0x160, 0x353dc, 0x160, 0x35403,
        0x35403, 0x160, 0x35403, 0x160, 0x354f4, 0x354f4, 0x160, 0x354f4, 0x160, 0x355d8,
        0x355d8, 0x160, 0x355d8, 0x160, 0x3563d, 0x3563d, 0x160, 0x3563d, 0x160, 0x35694,
        0x35694, 0x160, 0x35694, 0x160, 0x356e7, 0x356e7, 0x160, 0x356e7, 0x160, 0x35727,
        0x35727, 0x160, 0x35727, 0x160, 0x357c0, 0x357c0, 0x160, 0x357c0, 0x160, 0x35801,
        0x35801, 0x160, 0x35801, 0x160, 0x35a20, 0x35a20, 0x160, 0x35a20, 0x160, 0x35ab9,
        0x35abc, 0x160, 0x35abc, 0x160, 0x35c50, 0x35d9f, 0x160, 0x35d9f, 0x160, 0x35e43,
        0x35e43, 0x160, 0x35e43, 0x160, 0x35f16, 0x35f16, 0x160, 0x35a19, 0x160, 0x35a20,
        0x35f16, 0x160, 0x35f16, 0x160, 0x36039, 0x36039, 0x160, 0x36039, 0x160, 0x360e1,
        0x36039, 0x160, 0x3618a, 0x160, 0x36198, 0x360e1, 0x160, 0x360e1, 0x160, 0x36198,
        0x36198, 0x160, 0x36114, 0x160, 0x361d7, 0x361d7, 0x160, 0x361d7, 0x160, 0x36287,
        0x36287, 0x160, 0x36287, 0x160, 0x363ce, 0x363ce, 0x160, 0x363ce, 0x160, 0x3648f,
        0x3648f, 0x160, 0x363ce, 0x160, 0x3649d, 0x3649d, 0x160, 0x3649d, 0x160, 0x36569,
        0x36569, 0x160, 0x353dc, 0x160, 0x35403, 0x36569, 0x160, 0x36569, 0x160, 0x365aa,
        0x365aa, 0x160, 0x365aa, 0x160, 0x36615, 0x36615, 0x160, 0x36615, 0x160, 0x3668d,
        0x3668d, 0x160, 0x3668d, 0x160, 0x367fc, 0x36948, 0x160, 0x35a19, 0x160, 0x35a20,
        0x36948, 0x160, 0x36948, 0x160, 0x36a16, 0x36a16, 0x160, 0x36a16, 0x160, 0x36a89,
        0x36a89, 0x160, 0x363c8, 0x160, 0x363ce, 0x36a89, 0x160, 0x36a89, 0x160, 0x36b87,
        0x36b87, 0x160, 0x36b87, 0x160, 0x36b96, 0x36b87, 0x160, 0x45a84, 0x160, 0x45ae2,
        0x36d06, 0x160, 0x36d06, 0x160, 0x36d61, 0x37185, 0x160, 0x37185, 0x160, 0x371b5,
        0x38310, 0x160, 0x38310, 0x160, 0x383a9, 0x383a9, 0x160, 0x383a9, 0x160, 0x383cf,
        0x383cf, 0x160, 0x383cf, 0x160, 0x3842a, 0x3842a, 0x160, 0x3842a, 0x160, 0x3843a,
        0x3843a, 0x160, 0x3843a, 0x160, 0x384d2, 0x384d2, 0x160, 0x384d2, 0x160, 0x3857c,
        0x3857c, 0x160, 0x3857c, 0x160, 0x38625, 0x38625, 0x160, 0x38625, 0x160, 0x38710,
        0x38710, 0x160, 0x38710, 0x160, 0x387d4, 0x387d4, 0x160, 0x387d4, 0x160, 0x38833,
        0x38833, 0x160, 0x38833, 0x160, 0x3886e, 0x3886e, 0x160, 0x3886e, 0x160, 0x38892,
        0x38892, 0x160, 0x38892, 0x160, 0x388aa, 0x388aa, 0x160, 0x388aa, 0x160, 0x38953,
        0x38953, 0x160, 0x38953, 0x160, 0x389c9, 0x389c9, 0x160, 0x389c9, 0x160, 0x38a0f,
        0x38a0f, 0x160, 0x38a0f, 0x160, 0x38a50, 0x38a50, 0x160, 0x38a50, 0x160, 0x38b66,
        0x38bd3, 0x160, 0x38bd3, 0x160, 0x38c97, 0x38cd4, 0x160, 0x38cd4, 0x160, 0x38d00,
        0x38d00, 0x160, 0x38d00, 0x160, 0x38d2f, 0x38d2f, 0x160, 0x38d2f, 0x160, 0x38d4c,
        0x38d4c, 0x160, 0x38d4c, 0x160, 0x38d80, 0x38d80, 0x160, 0x38d80, 0x160, 0x38d94,
        0x38dbf, 0x160, 0x38dbf, 0x160, 0x39c03, 0x39c04, 0x160, 0x39c04, 0x160, 0x3a61b,
        0x39c04, 0x160, 0x3a61c, 0x160, 0x3a929, 0x3a930, 0x160, 0x3a930, 0x160, 0x3a9f9,
        0x3a930, 0x160, 0x3a9fc, 0x160, 0x3d353, 0x3d354, 0x160, 0x3d354, 0x160, 0x3d497,
        0x3d354, 0x160, 0x3d498, 0x160, 0x41483, 0x414e8, 0x160, 0x414e8, 0x160, 0x4180b,
        0x4180b, 0x160, 0x4180b, 0x160, 0x41aae, 0x41aae, 0x160, 0x41aae, 0x160, 0x41af1,
        0x41af1, 0x160, 0x41af1, 0x160, 0x41b3c, 0x41bd6, 0x160, 0x41bd6, 0x160, 0x41c05,
        0x41c05, 0x160, 0x41c05, 0x160, 0x41c82, 0x41c83, 0x160, 0x41c83, 0x160, 0x41c93,
        0x41c83, 0x160, 0x41c94, 0x160, 0x43116, 0x43116, 0x160, 0x43116, 0x160, 0x43123,
        0x43116, 0x160, 0x43124, 0x160, 0x44786, 0x44786, 0x160, 0x44786, 0x160, 0x4483f,
        0x4483f, 0x160, 0x4483f, 0x160, 0x448ee, 0x448ee, 0x160, 0x448ee, 0x160, 0x44901,
        0x44901, 0x160, 0x44901, 0x160, 0x44931, 0x44931, 0x160, 0x44931, 0x160, 0x44947,
        0x44950, 0x160, 0x44950, 0x160, 0x449f1, 0x449f2, 0x160, 0x449f2, 0x160, 0x44a0e,
        0x44a0f, 0x160, 0x44a0f, 0x160, 0x44a3c, 0x44a3c, 0x160, 0x44a3c, 0x160, 0x44a3e,
        0x44ab4, 0x160, 0x44ab4, 0x160, 0x44ccd, 0x44ab4, 0x160, 0x44cf0, 0x160, 0x44d05,
        0x44ccd, 0x160, 0x44ccd, 0x160, 0x44d05, 0x44d14, 0x160, 0x44d14, 0x160, 0x44d19,
        0x44d1e, 0x160, 0x44d1e, 0x160, 0x44d40, 0x44d40, 0x160, 0x44d40, 0x160, 0x44d41,
        0x44d41, 0x160, 0x44d41, 0x160, 0x44d59, 0x44d59, 0x160, 0x44ccb, 0x160, 0x44ccd,
        0x44d59, 0x160, 0x44cf0, 0x160, 0x44d05, 0x44d59, 0x160, 0x44d59, 0x160, 0x44d6f,
        0x44d6f, 0x160, 0x44d6f, 0x160, 0x44d7d, 0x44d97, 0x160, 0x44d97, 0x160, 0x44dcb,
        0x44dcb, 0x160, 0x44dcb, 0x160, 0x44df6, 0x44e00, 0x160, 0x44e00, 0x160, 0x44e31,
        0x44e37, 0x160, 0x44e37, 0x160, 0x44ea3, 0x44ea3, 0x160, 0x44ea3, 0x160, 0x44f57,
        0x44f57, 0x160, 0x44f57, 0x160, 0x4501f, 0x4501f, 0x160, 0x4501f, 0x160, 0x4503a,
        0x4503a, 0x160, 0x4503a, 0x160, 0x45044, 0x450d0, 0x160, 0x450d0, 0x160, 0x45112,
        0x45112, 0x160, 0x45112, 0x160, 0x4520e, 0x4520e, 0x160, 0x4520e, 0x160, 0x4523e,
        0x4523e, 0x160, 0x4523e, 0x160, 0x4526d, 0x4526d, 0x160, 0x4526d, 0x160, 0x45282,
        0x45282, 0x160, 0x45282, 0x160, 0x4528e, 0x4528e, 0x160, 0x4528e, 0x160, 0x452f7,
        0x452f7, 0x160, 0x452f7, 0x160, 0x45380, 0x45380, 0x160, 0x45380, 0x160, 0x4554a,
        0x4554a, 0x160, 0x4554a, 0x160, 0x45583, 0x45583, 0x160, 0x45583, 0x160, 0x4576a,
        0x4576a, 0x160, 0x4576a, 0x160, 0x45785, 0x45785, 0x160, 0x45785, 0x160, 0x4578d,
        0x4578d, 0x160, 0x4578d, 0x160, 0x45798, 0x45798, 0x160, 0x45798, 0x160, 0x457f2,
        0x457fb, 0x160, 0x457fb, 0x160, 0x4581a, 0x4581a, 0x160, 0x4581a, 0x160, 0x4581f,
        0x459a1, 0x160, 0x459a1, 0x160, 0x45a84, 0x45a84, 0x160, 0x45a84, 0x160, 0x45ae2,
        0x45ae2, 0x160, 0x45ae2, 0x160, 0x45afb, 0x45afb, 0x160, 0x45afb, 0x160, 0x45d7c,
        0x45d7c, 0x160, 0x45d7c, 0x160, 0x45eaf, 0x45eaf, 0x160, 0x45eaf, 0x160, 0x45f0a,
        0x45f0a, 0x160, 0x45f0a, 0x160, 0x45f2e, 0x45f2e, 0x160, 0x45f29, 0x160, 0x45f51,
        0x45f51, 0x160, 0x45f51, 0x160, 0x45fb2, 0x45fb2, 0x160, 0x45fb2, 0x160, 0x4608d,
        0x4608d, 0x160, 0x4608d, 0x160, 0x46094, 0x46094, 0x160, 0x46094, 0x160, 0x464dd,
        0x464dd, 0x160, 0x464dd, 0x160, 0x464f5, 0x464f5, 0x160, 0x464f5, 0x160, 0x46503,
        0x46503, 0x160, 0x46503, 0x160, 0x465c6, 0x465c6, 0x160, 0x465c6, 0x160, 0x4671a,
        0x4671a, 0x160, 0x4671a, 0x160, 0x46768, 0x4676a, 0x160, 0x4676a, 0x160, 0x467b5,
        0x467b5, 0x160, 0x467b5, 0x160, 0x46804, 0x46805, 0x160, 0x46805, 0x160, 0x46820,
        0x46820, 0x160, 0x46820, 0x160, 0x46835, 0x46820, 0x160, 0x4683a, 0x160, 0x46850,
        0x46850, 0x160, 0x46850, 0x160, 0x468e9, 0x46850, 0x160, 0x468ec, 0x160, 0x4691b,
        0x4691b, 0x160, 0x4691b, 0x160, 0x46938, 0x46938, 0x160, 0x46938, 0x160, 0x46985,
        0x46985, 0x160, 0x46985, 0x160, 0x469a5, 0x46a84, 0x160, 0x46a84, 0x160, 0x46ab5,
        0x46abf, 0x160, 0x46abf, 0x160, 0x46aff, 0x46aff, 0x160, 0x46aff, 0x160, 0x46b10,
        0x46b10, 0x160, 0x46b10, 0x160, 0x46b95, 0x46b95, 0x160, 0x46b95, 0x160, 0x46ba3,
        0x46ba8, 0x160, 0x46ba8, 0x160, 0x46bb4, 0x46bcb, 0x160, 0x46bcb, 0x160, 0x46bd7,
        0x46c02, 0x160, 0x46c02, 0x160, 0x46dc7, 0x46e2c, 0x160, 0x46e2c, 0x160, 0x46ed4,
        0x46ed4, 0x160, 0x46ed4, 0x160, 0x46f0d, 0x46f2b, 0x160, 0x46f2b, 0x160, 0x46f5c,
        0x46f5c, 0x160, 0x46f5c, 0x160, 0x4701b, 0x4701b, 0x160, 0x4701b, 0x160, 0x4705c,
        0x4705c, 0x160, 0x4705c, 0x160, 0x4706d, 0x4706d, 0x160, 0x4706d, 0x160, 0x47073,
        0x47073, 0x160, 0x47073, 0x160, 0x470a5, 0x470a5, 0x160, 0x470a5, 0x160, 0x470aa,
        0x470aa, 0x160, 0x470aa, 0x160, 0x47121, 0x47121, 0x160, 0x47121, 0x160, 0x47140,
        0x471f8, 0x160, 0x471f8, 0x160, 0x472a3, 0x472a3, 0x160, 0x472a3, 0x160, 0x47473,
        0x47474, 0x160, 0x47474, 0x160, 0x47518, 0x47518, 0x160, 0x47518, 0x160, 0x47540,
        0x47540, 0x160, 0x47540, 0x160, 0x47597, 0x47597, 0x160, 0x47597, 0x160, 0x475c9,
        0x475c9, 0x160, 0x475c9, 0x160, 0x47601, 0x47608, 0x160, 0x47608, 0x160, 0x47673,
        0x4760d, 0x160, 0x4760d, 0x160, 0x47673, 0x47674, 0x160, 0x47674, 0x160, 0x47717,
        0x4771c, 0x160, 0x47717, 0x160, 0x47827, 0x47827, 0x160, 0x47827, 0x160, 0x47866,
        0x47866, 0x160, 0x47866, 0x160, 0x478c4, 0x47866, 0x160, 0x47b56, 0x160, 0x47b5c,
        0x479c7, 0x160, 0x479c7, 0x160, 0x47a3b, 0x47a3b, 0x160, 0x47a3b, 0x160, 0x47a89,
        0x47a89, 0x160, 0x47a89, 0x160, 0x47b5c, 0x47b5c, 0x160, 0x47b53, 0x160, 0x47c0b,
        0x47c0b, 0x160, 0x47c0b, 0x160, 0x47d4f, 0x47d4f, 0x160, 0x47d4f, 0x160, 0x47dc6,
        0x47dc6, 0x160, 0x47dc6, 0x160, 0x47dc9, 0x47dca, 0x160, 0x47dca, 0x160, 0x47e02,
        0x47e02, 0x160, 0x47e02, 0x160, 0x47e26, 0x481cd, 0x160, 0x481cd, 0x160, 0x48217,
        0x48217, 0x160, 0x48217, 0x160, 0x48232, 0x48269, 0x160, 0x48269, 0x160, 0x482b2,
        0x482b2, 0x160, 0x482b2, 0x160, 0x482cd, 0x482cd, 0x160, 0x482cd, 0x160, 0x482db,
        0x482db, 0x160, 0x482db, 0x160, 0x4840b, 0x4840c, 0x160, 0x4840c, 0x160, 0x48447,
        0x48447, 0x160, 0x48447, 0x160, 0x4852c, 0x4852c, 0x160, 0x4852c, 0x160, 0x48554,
        0x48554, 0x160, 0x48554, 0x160, 0x48807, 0x48807, 0x160, 0x48807, 0x160, 0x48837,
        0x48837, 0x160, 0x48837, 0x160, 0x4894c, 0x48976, 0x160, 0x48976, 0x160, 0x48989,
        0x48976, 0x160, 0x48bb7, 0x160, 0x48c46, 0x48989, 0x160, 0x48989, 0x160, 0x489af,
        0x489af, 0x160, 0x489af, 0x160, 0x48ac5, 0x48ac5, 0x160, 0x48ac5, 0x160, 0x48bb7,
        0x48c46, 0x160, 0x48c46, 0x160, 0x48c4f, 0x48c4f, 0x160, 0x48c4f, 0x160, 0x48c5a,
        0x4bfb6, 0x160, 0x4bfb6, 0x160, 0x4c080, 0x4c0da, 0x160, 0x4c0da, 0x160, 0x4c101,
        0x4c101, 0x160, 0x4c101, 0x160, 0x4c107, 0x4c107, 0x160, 0x4c107, 0x160, 0x4c10d,
        0x4c10d, 0x160, 0x4c10d, 0x160, 0x4c12b, 0x4c12b, 0x160, 0x4c12b, 0x160, 0x4c180,
        0x4c180, 0x160, 0x4c180, 0x160, 0x4c195, 0x4c1a0, 0x160, 0x4c1a0, 0x160, 0x4c1b8,
        0x4c1b8, 0x160, 0x4c1b8, 0x160, 0x4c230, 0x4c230, 0x160, 0x46f0d, 0x160, 0x46f2b,
        0x4c230, 0x160, 0x4c230, 0x160, 0x4c23c, 0x4c241, 0x160, 0x4c241, 0x160, 0x4c293,
        0x4c293, 0x160, 0x4c293, 0x160, 0x4c30f, 0x4c30f, 0x160, 0x4c30f, 0x160, 0x4c32e,
        0x4c333, 0x160, 0x4c333, 0x160, 0x4c362, 0x4c362, 0x160, 0x4c362, 0x160, 0x4c37f,
        0x4c380, 0x160, 0x4c380, 0x160, 0x4c388, 0x4c388, 0x160, 0x4c388, 0x160, 0x4c398,
        0x4c39b, 0x160, 0x4c39b, 0x160, 0x4c49c, 0x4c3b9, 0x160, 0x4c3b9, 0x160, 0x4c49c,
        0x4c3c8, 0x160, 0x4c3c8, 0x160, 0x4c49c, 0x4c56b, 0x160, 0x4c565, 0x160, 0x4c62d,
        0x4c632, 0x160, 0x4c632, 0x160, 0x4c64f, 0x4c64f, 0x160, 0x4c64f, 0x160, 0x4c675,
        0x4c675, 0x160, 0x4c675, 0x160, 0x4c694, 0x4c694, 0x160, 0x4c694, 0x160, 0x4c6c7,
        0x4c6c7, 0x160, 0x4c6c7, 0x160, 0x4c9c4, 0x4c9c5, 0x160, 0x4c9c5, 0x160, 0x4c9de,
        0x4c9de, 0x160, 0x4c9de, 0x160, 0x4c9f8, 0x4c9f8, 0x160, 0x4c9f8, 0x160, 0x4ca1d,
        0x4cf8a, 0x160, 0x4cf8a, 0x160, 0x4cf9e, 0x4cf8a, 0x160, 0x4cfa4, 0x160, 0x4cfb0,
        0x4cfb0, 0x160, 0x4cfb0, 0x160, 0x4cfcd, 0x4cfec, 0x160, 0x4cfec, 0x160, 0x4d00f,
        0x4d032, 0x160, 0x4d032, 0x160, 0x4d041, 0x4d041, 0x160, 0x4d041, 0x160, 0x4d179,
        0x4d179, 0x160, 0x4d179, 0x160, 0x4d1ce, 0x4d1ce, 0x160, 0x4d1ce, 0x160, 0x4d29b,
        0x4d29c, 0x160, 0x4d29c, 0x160, 0x4d2e0, 0x4d2e0, 0x160, 0x4d2e0, 0x160, 0x4d369,
        0x4d369, 0x160, 0x4d369, 0x160, 0x4d37b, 0x4d37b, 0x160, 0x4d37b, 0x160, 0x4d446,
        0x4d446, 0x160, 0x4d446, 0x160, 0x4d464, 0x4d95e, 0x160, 0x4d95e, 0x160, 0x4d971,
        0x4d971, 0x160, 0x4d971, 0x160, 0x4d990,     };

    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}

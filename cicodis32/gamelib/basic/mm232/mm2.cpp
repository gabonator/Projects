#include "cico32.h"

void init()
{
    ds = 0x0168;
    cs = 0x0160;
    es = 0x0028;
    ss = 0x0168;
    esp = 0x318570;
    // Overlay1: base 0x1a8000 size 0x43f5f
    // Overlay2: base 0x1ec000 size 0x12c570
}

void sub_1e36e8();

void start()
{
    // eip = 0x3b6e8
    sub_1e36e8(); // 0160:1e36e8 (1a8000+3b6e8)
}

void sub_1a8010();
void sub_1a801e();
void sub_1a8044();
void sub_1a8054();
void sub_1a807e();
void sub_1a81f3();
void sub_1a840e();
void sub_1a841e();
void sub_1a8499();
void sub_1a84d3();
void sub_1a8596();
void sub_1a85aa();
void sub_1a861d();
void sub_1a862c();
void sub_1a86b0();
void sub_1a8760();
void sub_1a88e4();
void sub_1a8a9b();
void sub_1a8b3c();
void sub_1a8c90();
void sub_1a8cae();
void sub_1a8d10();
void sub_1a8e36();
void sub_1a8f63();
void sub_1a8f94();
void sub_1a9055();
void sub_1a9c1f();
void sub_1a9c54();
void sub_1a9c89();
void sub_1a9cdc();
void sub_1a9d2f();
void sub_1aa00c();
void sub_1aa260();
void sub_1aa484();
void sub_1aa4e9();
void sub_1aa553();
void sub_1aa5d3();
void sub_1aa5d6();
void sub_1aa64a();
void sub_1aa9d7();
void sub_1aafe3();
void sub_1ab386();
void sub_1ab3d2();
void sub_1abb6f();
void sub_1abc11();
void sub_1abc93();
void sub_1abd5e();
void sub_1abe5b();
void sub_1ac75e();
void sub_1ac7de();
void sub_1ac839();
void sub_1ac863();
void sub_1aca1a();
void sub_1acdb4();
void sub_1ace94();
void sub_1acec3();
void sub_1acfa2();
void sub_1ad031();
void sub_1ad149();
void sub_1ad188();
void sub_1ad258();
void sub_1ad34b();
void sub_1ad42e();
void sub_1ad47f();
void sub_1ad4d0();
void sub_1ad521();
void sub_1ad572();
void sub_1ad5c3();
void sub_1ad600();
void sub_1ad60e();
void sub_1ad86e();
void sub_1adaba();
void sub_1add06();
void sub_1adf52();
void sub_1ae073();
void sub_1ae99b();
void sub_1ae9c3();
void sub_1af190();
void sub_1af488();
void sub_1af780();
void sub_1afa78();
void sub_1afd70();
void sub_1afd83();
void sub_1aff13();
void sub_1aff53();
void sub_1b0063();
void sub_1b0c20();
void sub_1b0c88();
void sub_1b0da2();
void sub_1b0dfd();
void sub_1b0ee3();
void sub_1b0f0a();
void sub_1b10c5();
void sub_1b10ec();
void sub_1b1113();
void sub_1b1715();
void sub_1b17b7();
void sub_1b18a6();
void sub_1b191a();
void sub_1b198d();
void sub_1b19ac();
void sub_1b19e0();
void sub_1b1a14();
void sub_1b1a48();
void sub_1b1ad6();
void sub_1b1b7c();
void sub_1b1c22();
void sub_1b1c25();
void sub_1b1c5c();
void sub_1b1c6b();
void sub_1b1ca2();
void sub_1b1e81();
void sub_1b1ef1();
void sub_1b242c();
void sub_1b24f5();
void sub_1b2598();
void sub_1b266d();
void sub_1b29b6();
void sub_1b2a07();
void sub_1b2aca();
void sub_1b2b87();
void sub_1b2bb1();
void sub_1b2cde();
void sub_1b2cf7();
void sub_1b2d91();
void sub_1b2df9();
void sub_1b2f18();
void sub_1b2f82();
void sub_1b2f96();
void sub_1b3052();
void sub_1b3199();
void sub_1b336c();
void sub_1b3470();
void sub_1b34bd();
void sub_1b34c8();
void sub_1b35a6();
void sub_1b35db();
void sub_1b3602();
void sub_1b36ec();
void sub_1b385b();
void sub_1b38a1();
void sub_1b38ea();
void sub_1b3905();
void sub_1b39c3();
void sub_1b39d1();
void sub_1b39dc();
void sub_1b3ac8();
void sub_1b3af9();
void sub_1b3b0f();
void sub_1b3b3d();
void sub_1b3b47();
void sub_1b3eb2();
void sub_1b41f7();
void sub_1b4263();
void sub_1b426d();
void sub_1b42c5();
void sub_1b46ff();
void sub_1b4714();
void sub_1b47cb();
void sub_1b4814();
void sub_1b486a();
void sub_1b4925();
void sub_1b4941();
void sub_1b49ae();
void sub_1b49c8();
void sub_1b4a47();
void sub_1b4a91();
void sub_1b4ad8();
void sub_1b4b02();
void sub_1b4b3b();
void sub_1b4b5a();
void sub_1b4b5f();
void sub_1b4b7d();
void sub_1b4b8c();
void sub_1b4bb8();
void sub_1b4bc9();
void sub_1b4c48();
void sub_1b4c53();
void sub_1b4c61();
void sub_1b4c6f();
void sub_1b4dc7();
void sub_1b4e20();
void sub_1b4e5b();
void sub_1b4e8c();
void sub_1b4ec6();
void sub_1b4eda();
void sub_1b4edf();
void sub_1b4f0e();
void sub_1b4f37();
void sub_1b4f8f();
void sub_1b4ff7();
void sub_1b5096();
void sub_1b5126();
void sub_1b51f4();
void sub_1b5205();
void sub_1b521d();
void sub_1b524f();
void sub_1b5267();
void sub_1b52a1();
void sub_1b531f();
void sub_1b5329();
void sub_1b5442();
void sub_1b5477();
void sub_1b54af();
void sub_1b54e7();
void sub_1b551f();
void sub_1b5561();
void sub_1b5585();
void sub_1b55c7();
void sub_1b560a();
void sub_1b5643();
void sub_1b56a2();
void sub_1b56fa();
void sub_1b5747();
void sub_1b57ae();
void sub_1b57fb();
void sub_1b583e();
void sub_1b589b();
void sub_1b58f3();
void sub_1b596f();
void sub_1b5998();
void sub_1b59bc();
void sub_1b59d4();
void sub_1b5a1d();
void sub_1b5a2d();
void sub_1b5a3a();
void sub_1b5af4();
void sub_1b5b7c();
void sub_1b5bf5();
void sub_1b5c89();
void sub_1b5d9c();
void sub_1b5ec4();
void sub_1b5f0f();
void sub_1b5f59();
void sub_1b5f91();
void sub_1b5fc9();
void sub_1b6083();
void sub_1b60a7();
void sub_1b60d3();
void sub_1b60e3();
void sub_1b60f2();
void sub_1b6113();
void sub_1b6269();
void sub_1b63d3();
void sub_1b6427();
void sub_1b65e6();
void sub_1b66b7();
void sub_1b66e5();
void sub_1b66fb();
void sub_1b6be9();
void sub_1b6f9d();
void sub_1b6fce();
void sub_1b7018();
void sub_1b703c();
void sub_1b7060();
void sub_1b707e();
void sub_1b709c();
void sub_1b70ba();
void sub_1b7140();
void sub_1b71fc();
void sub_1b72b8();
void sub_1b734c();
void sub_1b7445();
void sub_1b7477();
void sub_1b7609();
void sub_1b7680();
void sub_1b77c2();
void sub_1b77e0();
void sub_1b77f4();
void sub_1b7808();
void sub_1b781c();
void sub_1b7945();
void sub_1b79d3();
void sub_1b7a6e();
void sub_1b7af3();
void sub_1b7afd();
void sub_1b7dc1();
void sub_1b7e59();
void sub_1b7f70();
void sub_1b8075();
void sub_1b8154();
void sub_1b818f();
void sub_1b81c4();
void sub_1b8241();
void sub_1b8253();
void sub_1b836d();
void sub_1b84d2();
void sub_1b8511();
void sub_1b85c3();
void sub_1b88a2();
void sub_1b88cb();
void sub_1b88d3();
void sub_1b88fc();
void sub_1b8c45();
void sub_1b8d12();
void sub_1b8ec1();
void sub_1b8f3e();
void sub_1b8f52();
void sub_1b8f8f();
void sub_1b8ff7();
void sub_1b9017();
void sub_1b9020();
void sub_1b95f6();
void sub_1b96d5();
void sub_1b97b1();
void sub_1b9afb();
void sub_1b9b10();
void sub_1b9b3d();
void sub_1b9ca1();
void sub_1b9dce();
void sub_1b9fb2();
void sub_1b9fc3();
void sub_1ba001();
void sub_1ba249();
void sub_1ba2f6();
void sub_1ba4c9();
void sub_1ba572();
void sub_1ba724();
void sub_1ba8b8();
void sub_1ba934();
void sub_1ba9c8();
void sub_1ba9cd();
void sub_1ba9f5();
void sub_1baa06();
void sub_1bae42();
void sub_1bae67();
void sub_1bafa9();
void sub_1bafc3();
void sub_1bafe1();
void sub_1bb00d();
void sub_1bb4ed();
void sub_1bb8a9();
void sub_1bb8ca();
void sub_1bb8eb();
void sub_1bba0a();
void sub_1bbd8b();
void sub_1bbee8();
void sub_1bc168();
void sub_1bc1a6();
void sub_1bc1bf();
void sub_1bc274();
void sub_1bc288();
void sub_1bc2af();
void sub_1bc2d6();
void sub_1bc2de();
void sub_1bc2fe();
void sub_1bc31a();
void sub_1bc33c();
void sub_1bc34a();
void sub_1bc39e();
void sub_1bc3a9();
void sub_1bc3e8();
void sub_1bc40e();
void sub_1bc4ef();
void sub_1bc566();
void sub_1bc57d();
void sub_1bc633();
void sub_1bc63b();
void sub_1bc9ea();
void sub_1bc9ff();
void sub_1bcb9e();
void sub_1bcd1f();
void sub_1bcee8();
void sub_1bcef5();
void sub_1bcf73();
void sub_1bd042();
void sub_1bd124();
void sub_1bd15a();
void sub_1bd17e();
void sub_1bd184();
void sub_1bd1ac();
void sub_1bd1d4();
void sub_1bd24a();
void sub_1bd2a7();
void sub_1bd2bb();
void sub_1bd2c7();
void sub_1bd346();
void sub_1bd3c8();
void sub_1bd406();
void sub_1bd478();
void sub_1bd4ff();
void sub_1bd507();
void sub_1bd50f();
void sub_1bd51f();
void sub_1bd56b();
void sub_1bd6c9();
void sub_1bd70e();
void sub_1bd7dd();
void sub_1bd825();
void sub_1bd849();
void sub_1bd85e();
void sub_1bd863();
void sub_1bd879();
void sub_1bd87e();
void sub_1bd894();
void sub_1bd899();
void sub_1bd8b7();
void sub_1bd8d7();
void sub_1bd90e();
void sub_1bd930();
void sub_1bd96a();
void sub_1bd9e7();
void sub_1bdb00();
void sub_1bdc88();
void sub_1bdee4();
void sub_1bdf30();
void sub_1bdfd5();
void sub_1be01a();
void sub_1be14f();
void sub_1be2c6();
void sub_1be39c();
void sub_1be455();
void sub_1be4a2();
void sub_1be4a7();
void sub_1be5a6();
void sub_1be628();
void sub_1be64f();
void sub_1be66c();
void sub_1be67e();
void sub_1be796();
void sub_1be7c6();
void sub_1be816();
void sub_1be986();
void sub_1be9d2();
void sub_1be9da();
void sub_1bea97();
void sub_1beae9();
void sub_1bebdd();
void sub_1bec59();
void sub_1bed9e();
void sub_1bee9c();
void sub_1beec4();
void sub_1bef0c();
void sub_1bef15();
void sub_1bf077();
void sub_1bf07d();
void sub_1bf08c();
void sub_1bf269();
void sub_1bf456();
void sub_1bf49e();
void sub_1bf4c9();
void sub_1bf4ea();
void sub_1bf5ae();
void sub_1bf923();
void sub_1bf9c6();
void sub_1bf9d1();
void sub_1bf9e7();
void sub_1bf9f2();
void sub_1bfc08();
void sub_1bfc33();
void sub_1bfcbb();
void sub_1bfd0f();
void sub_1bfd3e();
void sub_1bfe41();
void sub_1bfe67();
void sub_1bfedb();
void sub_1bff01();
void sub_1bff3d();
void sub_1bffa9();
void sub_1bffce();
void sub_1bfff9();
void sub_1c003b();
void sub_1c004f();
void sub_1c007a();
void sub_1c0466();
void sub_1c049d();
void sub_1c04c8();
void sub_1c04e6();
void sub_1c05ef();
void sub_1c0636();
void sub_1c06b3();
void sub_1c094a();
void sub_1c0975();
void sub_1c098b();
void sub_1c09ca();
void sub_1c09f5();
void sub_1c0a16();
void sub_1c0b03();
void sub_1c0b64();
void sub_1c0d00();
void sub_1c0d29();
void sub_1c0eff();
void sub_1c0f25();
void sub_1c0f4d();
void sub_1c0f92();
void sub_1c103c();
void sub_1c10ee();
void sub_1c1122();
void sub_1c112d();
void sub_1c11a3();
void sub_1c11f4();
void sub_1c126f();
void sub_1c13b8();
void sub_1c13c0();
void sub_1c151e();
void sub_1c1553();
void sub_1c1567();
void sub_1c1588();
void sub_1c167d();
void sub_1c1692();
void sub_1c19b0();
void sub_1c1a0b();
void sub_1c1a37();
void sub_1c1a63();
void sub_1c1ad8();
void sub_1c1b47();
void sub_1c1b76();
void sub_1c1c1d();
void sub_1c1c26();
void sub_1c1cf3();
void sub_1c1d74();
void sub_1c1db4();
void sub_1c1db9();
void sub_1c1e87();
void sub_1c1f2e();
void sub_1c209a();
void sub_1c2205();
void sub_1c2296();
void sub_1c229e();
void sub_1c22b5();
void sub_1c2305();
void sub_1c2315();
void sub_1c235a();
void sub_1c2388();
void sub_1c2465();
void sub_1c24a8();
void sub_1c2599();
void sub_1c295a();
void sub_1c2984();
void sub_1c29ab();
void sub_1c2aaf();
void sub_1c2c57();
void sub_1c2c7c();
void sub_1c2d80();
void sub_1c2df3();
void sub_1c2f5a();
void sub_1c30b4();
void sub_1c312e();
void sub_1c3224();
void sub_1c33a1();
void sub_1c3486();
void sub_1c34a7();
void sub_1c34c4();
void sub_1c3869();
void sub_1c393a();
void sub_1c3982();
void sub_1c3c21();
void sub_1c3cf3();
void sub_1c3f42();
void sub_1c3f53();
void sub_1c3f64();
void sub_1c3f75();
void sub_1c3f86();
void sub_1c3fa2();
void sub_1c4039();
void sub_1c4076();
void sub_1c41a7();
void sub_1c42f0();
void sub_1c433c();
void sub_1c4361();
void sub_1c446d();
void sub_1c451f();
void sub_1c4573();
void sub_1c459c();
void sub_1c4984();
void sub_1c49d6();
void sub_1c4a09();
void sub_1c4ba6();
void sub_1c4e8e();
void sub_1c50ff();
void sub_1c51d6();
void sub_1c52c2();
void sub_1c52fc();
void sub_1c5300();
void sub_1c5695();
void sub_1c5772();
void sub_1c58cb();
void sub_1c58f8();
void sub_1c59f0();
void sub_1c6524();
void sub_1c6a11();
void sub_1c6ab4();
void sub_1c6ad8();
void sub_1c6b7d();
void sub_1c6ba2();
void sub_1c6c7f();
void sub_1c6caa();
void sub_1c6d87();
void sub_1c6db2();
void sub_1c6e8f();
void sub_1c6eba();
void sub_1c6f97();
void sub_1c6fc2();
void sub_1c6ff7();
void sub_1c7113();
void sub_1c7260();
void sub_1c727c();
void sub_1c7954();
void sub_1c79ac();
void sub_1c7a40();
void sub_1c7b00();
void sub_1c7de8();
void sub_1c8008();
void sub_1c8088();
void sub_1c82bc();
void sub_1c8474();
void sub_1c84b4();
void sub_1c8520();
void sub_1c858c();
void sub_1c85f8();
void sub_1c8664();
void sub_1c86d0();
void sub_1c8734();
void sub_1c8764();
void sub_1c8794();
void sub_1c8824();
void sub_1c8ae0();
void sub_1c8b58();
void sub_1c8c9d();
void sub_1c8de8();
void sub_1c8f33();
void sub_1c9084();
void sub_1c9326();
void sub_1c9cd7();
void sub_1c9d42();
void sub_1ca0cd();
void sub_1ca12c();
void sub_1ca3e8();
void sub_1ca6b3();
void sub_1ca96f();
void sub_1caa0d();
void sub_1cadfc();
void sub_1caf91();
void sub_1cb035();
void sub_1cb1e2();
void sub_1cb291();
void sub_1cb3f3();
void sub_1cb497();
void sub_1cb5f9();
void sub_1cb68e();
void sub_1cb6fa();
void sub_1cbd44();
void sub_1cbe86();
void sub_1cc181();
void sub_1cc2ad();
void sub_1cc428();
void sub_1cc73b();
void sub_1cc7d8();
void sub_1cc875();
void sub_1cc912();
void sub_1cc919();
void sub_1cca0a();
void sub_1ccafb();
void sub_1ccbec();
void sub_1cccef();
void sub_1cd100();
void sub_1cd1f5();
void sub_1cd336();
void sub_1cd445();
void sub_1cd554();
void sub_1cd72b();
void sub_1cd75c();
void sub_1cd7c5();
void sub_1cd830();
void sub_1cd896();
void sub_1cd927();
void sub_1cd983();
void sub_1cdac7();
void sub_1cdb0a();
void sub_1cdb89();
void sub_1cde4a();
void sub_1cde9e();
void sub_1cdeae();
void sub_1ce004();
void sub_1ce10a();
void sub_1ce128();
void sub_1ce18e();
void sub_1ce20d();
void sub_1ce269();
void sub_1ce643();
void sub_1ce65c();
void sub_1ce6b7();
void sub_1cea28();
void sub_1ceb3a();
void sub_1cec54();
void sub_1cec8a();
void sub_1cee0a();
void sub_1cef93();
void sub_1cf13b();
void sub_1cf2d2();
void sub_1cf538();
void sub_1cf9db();
void sub_1cfb7c();
void sub_1cfcb2();
void sub_1cfdfb();
void sub_1cfebb();
void sub_1cff9b();
void sub_1d01bc();
void sub_1d0261();
void sub_1d03dc();
void sub_1d04a1();
void sub_1d091e();
void sub_1d0dda();
void sub_1d18c0();
void sub_1d198c();
void sub_1d1d9b();
void sub_1d1ece();
void sub_1d1fdf();
void sub_1d1feb();
void sub_1d2341();
void sub_1d23ff();
void sub_1d24f6();
void sub_1d24fb();
void sub_1d2697();
void sub_1d27ad();
void sub_1d3339();
void sub_1d33a0();
void sub_1d3411();
void sub_1d348a();
void sub_1d34d9();
void sub_1d359b();
void sub_1d4dd2();
void sub_1d4e8e();
void sub_1d4f07();
void sub_1d562f();
void sub_1d58e6();
void sub_1d5ba6();
void sub_1d5be1();
void sub_1d5c5e();
void sub_1d5e9d();
void sub_1d5ed3();
void sub_1d5fa8();
void sub_1d608c();
void sub_1d62df();
void sub_1d6603();
void sub_1d6607();
void sub_1d71ce();
void sub_1d7823();
void sub_1d794c();
void sub_1d79cf();
void sub_1d7a6a();
void sub_1d7b93();
void sub_1d7c1b();
void sub_1d7c99();
void sub_1d7d99();
void sub_1d81e0();
void sub_1d8222();
void sub_1d8275();
void sub_1d83da();
void sub_1d843e();
void sub_1d8798();
void sub_1d8828();
void sub_1d88b9();
void sub_1d8a81();
void sub_1d8b8a();
void sub_1d8d96();
void sub_1d8ee1();
void sub_1d90ff();
void sub_1d9116();
void sub_1d91ba();
void sub_1d91bd();
void sub_1d9409();
void sub_1d9419();
void sub_1d946e();
void sub_1d9599();
void sub_1d982d();
void sub_1d99bc();
void sub_1d9b94();
void sub_1d9d6c();
void sub_1d9daf();
void sub_1d9e4f();
void sub_1d9f0e();
void sub_1d9fc8();
void sub_1d9fd1();
void sub_1da112();
void sub_1da2a0();
void sub_1da2a8();
void sub_1da3c8();
void sub_1daab0();
void sub_1dab50();
void sub_1dab80();
void sub_1dabf0();
void sub_1dac00();
void sub_1daca0();
void sub_1dad50();
void sub_1dae00();
void sub_1daef0();
void sub_1dafc0();
void sub_1db020();
void sub_1db060();
void sub_1db0d0();
void sub_1db180();
void sub_1db1a0();
void sub_1db220();
void sub_1db270();
void sub_1db2c0();
void sub_1db470();
void sub_1db5b0();
void sub_1db5f0();
void sub_1db620();
void sub_1db660();
void sub_1db6c0();
void sub_1db720();
void sub_1db7a0();
void sub_1db8a0();
void sub_1db8b0();
void sub_1db8c0();
void sub_1db920();
void sub_1db960();
void sub_1db9b0();
void sub_1db9c0();
void sub_1db9d0();
void sub_1db9e0();
void sub_1dba40();
void sub_1dba80();
void sub_1dbad0();
void sub_1dbe60();
void sub_1dbe90();
void sub_1dbef0();
void sub_1dbf20();
void sub_1dbf80();
void sub_1dc050();
void sub_1dc120();
void sub_1dc170();
void sub_1dc3f0();
void sub_1dc430();
void sub_1dc610();
void sub_1dc840();
void sub_1dc880();
void sub_1dc8e0();
void sub_1dc960();
void sub_1dc990();
void sub_1dc9c0();
void sub_1dcad0();
void sub_1dcaf0();
void sub_1dcb60();
void sub_1dcb80();
void sub_1dcbc0();
void sub_1dcbe0();
void sub_1dcc20();
void sub_1dcc70();
void sub_1dcca0();
void sub_1dccc0();
void sub_1dcd00();
void sub_1dcd20();
void sub_1dcd60();
void sub_1dce10();
void sub_1dcea0();
void sub_1dcee0();
void sub_1dcf70();
void sub_1dcfc0();
void sub_1dd0b0();
void sub_1dd220();
void sub_1dd430();
void sub_1dd480();
void sub_1dd4d0();
void sub_1dd4f0();
void sub_1dd510();
void sub_1dd530();
void sub_1dd550();
void sub_1dd570();
void sub_1dd590();
void sub_1dd6d0();
void sub_1dd740();
void sub_1dd790();
void sub_1dd8e0();
void sub_1dd970();
void sub_1dd9a0();
void sub_1ddb40();
void sub_1ddbb0();
void sub_1ddc20();
void sub_1ddca0();
void sub_1dddb0();
void sub_1dddf0();
void sub_1dde70();
void sub_1dde80();
void sub_1dde90();
void sub_1de180();
void sub_1de1a0();
void sub_1de1c0();
void sub_1de210();
void sub_1de330();
void sub_1de780();
void sub_1dea00();
void sub_1deac0();
void sub_1deb10();
void sub_1deb60();
void sub_1ded70();
void sub_1dedd0();
void sub_1df1f0();
void sub_1df200();
void sub_1df310();
void sub_1df340();
void sub_1df3f0();
void sub_1df430();
void sub_1df5b0();
void sub_1df600();
void sub_1df620();
void sub_1df740();
void sub_1df790();
void sub_1df820();
void sub_1df860();
void sub_1df870();
void sub_1df8c0();
void sub_1df990();
void sub_1dfa50();
void sub_1dfb30();
void sub_1dfb50();
void sub_1dfc80();
void sub_1dfcb0();
void sub_1e0030();
void sub_1e00f0();
void sub_1e0350();
void sub_1e0370();
void sub_1e0380();
void sub_1e0390();
void sub_1e03a0();
void sub_1e03c0();
void sub_1e0440();
void sub_1e0500();
void sub_1e05e0();
void sub_1e0690();
void sub_1e0740();
void sub_1e0760();
void sub_1e0800();
void sub_1e0830();
void sub_1e0940();
void sub_1e09d0();
void sub_1e0a20();
void sub_1e0ab0();
void sub_1e0d30();
void sub_1e0d40();
void sub_1e0d50();
void sub_1e0d60();
void sub_1e0d70();
void sub_1e0d80();
void sub_1e0dd0();
void sub_1e0e80();
void sub_1e0ec0();
void sub_1e0f00();
void sub_1e0f30();
void sub_1e0f70();
void sub_1e0fb0();
void sub_1e0fe0();
void sub_1e0ff0();
void sub_1e1000();
void sub_1e1090();
void sub_1e11d0();
void sub_1e1270();
void sub_1e1340();
void sub_1e1390();
void sub_1e13c0();
void sub_1e1410();
void sub_1e1440();
void sub_1e1460();
void sub_1e14f0();
void sub_1e1500();
void sub_1e1530();
void sub_1e1590();
void sub_1e15c0();
void sub_1e15e0();
void sub_1e15f0();
void sub_1e1610();
void sub_1e19e0();
void sub_1e1c00();
void sub_1e1d00();
void sub_1e2350();
void sub_1e23a0();
void sub_1e2460();
void sub_1e24b0();
void sub_1e2500();
void sub_1e2510();
void sub_1e2560();
void sub_1e2580();
void sub_1e25a0();
void sub_1e2600();
void sub_1e2690();
void sub_1e26f0();
void sub_1e3220();
void sub_1e3320();
void sub_1e3340();
void sub_1e3350();
void sub_1e33c0();
void sub_1e34e6();
void sub_1e3508();
void sub_1e3562();
void sub_1e3645();
void sub_1e3663();
void sub_1e367b();
void sub_1e3691();
void sub_1e36e8();
void sub_1e3760();
void sub_1e3979();
void sub_1e39c0();
void sub_1e39d9();
void sub_1e39f4();
void sub_1e3b0d();
void sub_1e3b30();
void sub_1e3b40();
void sub_1e3b5d();
void sub_1e3d27();
void sub_1e3d50();
void sub_1e3d5a();
void sub_1e3d6a();
void sub_1e3d93();
void sub_1e3d97();
void sub_1e3dbe();
void sub_1e3de0();
void sub_1e3df8();
void sub_1e3e56();
void sub_1e3f0a();
void sub_1e3fd2();
void sub_1e3fed();
void sub_1e4083();
void sub_1e40b3();
void sub_1e40e2();
void sub_1e40f7();
void sub_1e4103();
void sub_1e416c();
void sub_1e41f5();
void sub_1e4237();
void sub_1e4340();
void sub_1e43e1();
void sub_1e43f2();
void sub_1e4478();
void sub_1e44d0();
void sub_1e4578();
void sub_1e4683();
void sub_1e46c2();
void sub_1e4823();
void sub_1e4897();
void sub_1e48e5();
void sub_1e49b8();
void sub_1e4a67();
void sub_1e4bab();
void sub_1e4c22();
void sub_1e4c26();
void sub_1e4c76();
void sub_1e4cc1();
void sub_1e4d10();
void sub_1e4dcd();
void sub_1e4eb6();
void sub_1e4eee();
void sub_1e5294();
void sub_1e52bc();
void sub_1e535e();
void sub_1e53cc();
void sub_1e53d1();
void sub_1e53dd();
void sub_1e53f4();
void sub_1e5407();
void sub_1e547e();
void sub_1e5555();
void sub_1e5600();
void sub_1e561c();
void sub_1e564c();
void sub_1e5717();
void sub_1e5734();
void sub_1e5781();
void sub_1e5880();
void sub_1e58bb();
void sub_1e58fc();
void sub_1e59bb();
void sub_1e59c0();
void sub_1e59ef();
void sub_1e5c10();
void sub_1e5ce9();
void sub_1e5d1e();
void sub_1e5da4();
void sub_1e5e92();
void sub_1e5ef0();
void sub_1e5f33();
void sub_1e6019();
void sub_1e62f7();
void sub_1e64ef();
void sub_1e6516();
void sub_1e6540();
void sub_1e6577();
void sub_1e65e3();
void sub_1e6615();
void sub_1e683f();
void sub_1e68e7();
void sub_1e693e();
void sub_1e696f();
void sub_1e6980();
void sub_1e6986();
void sub_1e69c7();
void sub_1e69f9();
void sub_1e69fe();
void sub_1e6aa2();
void sub_1e6d23();
void sub_1e6e56();
void sub_1e6eb1();
void sub_1e6ed5();
void sub_1e6ef8();
void sub_1e6f59();
void sub_1e7034();
void sub_1e703b();
void sub_1e7484();
void sub_1e749c();
void sub_1e763f();
void sub_1e7701();
void sub_1e770a();
void sub_1e7715();
void sub_1e771f();
void sub_1e77fa();
void sub_1e7875();
void sub_1e787b();
void sub_1e788d();
void sub_1e78f3();
void sub_1eac7e();
void sub_1eada2();
void sub_1eadc9();
void sub_1eaea4();
void sub_1eaf20();
void sub_1eaf6c();
void sub_1eaf8a();
void sub_1eafdf();
void sub_1eaff4();
void sub_1eb038();
void sub_1eb082();
void sub_1eb0c2();
void sub_1eb10b();
void sub_1eb126();
void sub_1eb13a();
void sub_1eb182();
void sub_1eb6fe();
void sub_1eb71b();
void sub_1eb74b();
void sub_1eb76a();
void sub_1ebce6();

void sub_1a8010() // 0160:1a8010 +long +returnCarry
{
    esp -= 4;
    sub_1c8794();
    flags.carry = eax < 0x00000001;
    if (!flags.carry)
        goto loc_1a801c;
    al = 0x08;
loc_1a801c: // 0160:1a801c
    esp += 4;
    return;
}
void sub_1a801e() // 0160:1a801e +long
{
    esp -= 4;
    push32(ebp);
    push32(flagAsReg32());
    flags.interrupts = 0;
    al = 0x34;
    out8(0x43, al);
    eax = 0;
    out8(0x40, al);
    al = ah;
    out8(0x40, al);
    flagsFromReg32(pop32());
    push(ds);
    edx = memoryAGet16(ds, 0x2eebdc); ds = memoryAGet32(ds, 0x2eebdc + 2);
    eax = 0x00002508;
    interrupt(0x21);
    ds = pop();
    sub_1a8044();
    ebp = pop32();
    esp += 4;
}
void sub_1a8044() // 0160:1a8044 +long
{
    esp -= 4;
    push(ds);
    edx = memoryAGet16(ds, 0x2eebe2); ds = memoryAGet32(ds, 0x2eebe2 + 2);
    eax = 0x00002509;
    interrupt(0x21);
    ds = pop();
    esp += 4;
}
void sub_1a8054() // 0160:1a8054 +long
{
    esp -= 4;
    flags.direction = 0;
    push(ds);
    es = pop();
    edi = 0x0030b070;
    ecx = 0x00000030;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8a9b;
    eax = 0x00002509;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x0417, memoryAGet16(ds, 0x0417) & 0x00f0);
    esp += 4;
}
void sub_1a807e() // 0160:1a807e +long
{
    esp -= 4;
    memoryASet16(ds, 0x20eead, 0x0000);
    push32(ebp);
    eax = 0x00003509;
    interrupt(0x21);
    memoryASet32(ds, 0x2eebe2, ebx);
    memoryASet16(ds, 0x2eebe6, es);
    eax = 0x00003508;
    interrupt(0x21);
    memoryASet32(ds, 0x2eebdc, ebx);
    memoryASet16(ds, 0x2eebe0, es);
    sub_1a8054();
    push32(flagAsReg32());
    flags.interrupts = 0;
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a88e4;
    eax = 0x00002508;
    interrupt(0x21);
    ds = pop();
    al = 0x34;
    out8(0x43, al);
    ax = memoryAGet16(ds, 0x1f1d3c);
    out8(0x40, al);
    al = ah;
    out8(0x40, al);
    memoryASet32(ds, 0x2eebd4, 0x00000011);
    flagsFromReg32(pop32());
    ax = 0x0013;
    interrupt(0x10);
    ebp = pop32();
    push32(ebp);
    edx = 0x001ecad8;
    sub_1aa484();
    esi = 0x0023f52c;
    bx = 0x0000;
loc_1a80fd: // 0160:1a80fd
    al = memoryAGet(ds, esi);
    esi++;
    if (al != 0x0d)
        goto loc_1a80fd;
    esi++;
    bx++;
    if (bx != 0x0002)
        goto loc_1a80fd;
    al = memoryAGet(ds, esi);
    if (al == 0x41)
        goto loc_1a8127;
    if (al == 0x31)
        goto loc_1a8127;
loc_1a8117: // 0160:1a8117
    memoryASet16(ds, 0x1f1ccc, 0x0001);
    sub_1c7260();
    goto loc_1a8130;
loc_1a8127: // 0160:1a8127
    memoryASet16(ds, 0x1f1ccc, 0x0000);
loc_1a8130: // 0160:1a8130
    eax = 0x00060e94;
    sub_1a8010();
    if (flags.carry)
        goto loc_1a8147;
    memoryASet32(ds, 0x20b800, eax);
    goto loc_1a816a;
loc_1a8147: // 0160:1a8147
    eax = 0x00000000;
    ax = 0x0100;
    ebx = 0x000060ea;
    interrupt(0x31);
    if (flags.carry)
        goto loc_1a81bd;
    eax &= 0x0000ffff;
    eax <<= 4;
    memoryASet32(ds, 0x20b800, eax);
loc_1a816a: // 0160:1a816a
    eax = 0x00010ad4;
    sub_1a8010();
    if (flags.carry)
        goto loc_1a818b;
    memoryASet32(ds, 0x20b804, eax);
    eax += 0x00006d44;
    memoryASet32(ds, 0x20b808, eax);
    goto loc_1a81db;
loc_1a818b: // 0160:1a818b
    eax = 0x00000000;
    ax = 0x0100;
    ebx = 0x000010ae;
    interrupt(0x31);
    if (flags.carry)
        goto loc_1a81bd;
    eax &= 0x0000ffff;
    eax <<= 4;
    memoryASet32(ds, 0x20b804, eax);
    eax += 0x00006d44;
    memoryASet32(ds, 0x20b808, eax);
    goto loc_1a81db;
    // gap 3 bytes
loc_1a81bd: // 0160:1a81bd
    if (memoryAGet32(ds, 0x30b134) == 0x00000000)
        goto loc_1a81d9;
    memoryASet32(ds, 0x30b134, 0x00000000);
    goto loc_1a8117;
loc_1a81d9: // 0160:1a81d9
    ebp = pop32();
    esp += 4;
    return;
loc_1a81db: // 0160:1a81db
    ebp = pop32();
    push32(ebp);
    sub_1a81f3();
    if (memoryAGet16(ds, 0x1f1ccc) != 0x0001)
        goto loc_1a81f1;
    sub_1c727c();
loc_1a81f1: // 0160:1a81f1
    ebp = pop32();
    esp += 4;
}
void sub_1a81f3() // 0160:1a81f3 +long
{
    esp -= 4;
    sub_1b10ec();
    memoryASet32(ds, 0x20c84e, 0xe7190345);
    memoryASet32(ds, 0x20c852, 0xe7190345);
    eax = 0;
    ah = 0x02;
    interrupt(0x1a);
    memoryASet(ds, 0x20c84e, dh);
    memoryASet(ds, 0x20c84f, cl);
    memoryASet(ds, 0x20c850, ch);
    sub_1b10c5();
    al = 0x00;
    memoryASet(ds, 0x20eea1, al);
    memoryASet(ds, 0x20eea3, al);
    al = 0x03;
    memoryASet(ds, 0x20eea2, al);
    memoryASet(ds, 0x20eea4, al);
    ax = 0x0140;
    bx = 0x00e0;
    memoryASet16(ds, 0x20ee53, ax);
    memoryASet16(ds, 0x20ee55, bx);
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1a8289;
    sub_1c7b00();
    memoryASet32(ds, 0x1f1cdc, 0x00000000);
    memoryASet32(ds, 0x1f1ce0, 0x00000001);
    memoryASet32(ds, 0x1f1ce4, 0x0000007f);
    sub_1aa64a();
loc_1a8289: // 0160:1a8289
    sub_1b2a07();
    ecx = 0x00000064;
loc_1a8293: // 0160:1a8293
    eax = memoryAGet32(ds, 0x2eebd0);
loc_1a8298: // 0160:1a8298
    sync();
    if (memoryAGet32(ds, 0x2eebd0) == eax)
        goto loc_1a8298;
    if (--ecx)
        goto loc_1a8293;
    if (memoryAGet16(ds, 0x1f1ccc) != 0x0001)
        goto loc_1a82b1;
    sub_1c8474();
loc_1a82b1: // 0160:1a82b1
    sub_1cde9e();
    memoryASet16(ds, 0x20d8b9, 0x00ff);
    memoryASet16(ds, 0x20d8bb, 0x00ff);
    memoryASet16(ds, 0x20d8b7, 0x0000);
    if (memoryAGet32(ds, 0x22479c) != 0x68617372)
        goto loc_1a82ed;
    if (memoryAGet32(ds, 0x2247a0) == 0x65736574)
        goto loc_1a8343;
loc_1a82ed: // 0160:1a82ed
    esi = 0x002246d2;
    ecx = 0x00000060;
loc_1a82f7: // 0160:1a82f7
    memoryASet(ds, esi, 0xff);
    esi += 0x00000001;
    if (--ecx)
        goto loc_1a82f7;
    sub_1b2f18();
    memoryASet16(ds, 0x22479a, ax);
    if (ax)
        goto loc_1a832c;
    esi = 0x002247a6;
    ecx = 0x00000010;
loc_1a8319: // 0160:1a8319
    memoryASet16(ds, esi + 8, 0x00ff);
    memoryASet16(ds, esi + 10, 0x00ff);
    esi += 0x0000000c;
    if (--ecx)
        goto loc_1a8319;
    goto loc_1a8343;
loc_1a832c: // 0160:1a832c
    sub_1b2df9();
    esi = 0x002246d2;
    ecx = 0x00000060;
loc_1a833b: // 0160:1a833b
    memoryASet(ds, esi, 0xff);
    esi += 0x00000001;
    if (--ecx)
        goto loc_1a833b;
loc_1a8343: // 0160:1a8343
    sub_1bafa9();
    sub_1b7477();
    if (memoryAGet16(ds, 0x20eead) == 0x0001)
        goto loc_1b6be8;
    goto loc_1a8360;
    // gap 3 bytes
loc_1a8360: // 0160:1a8360
    if (memoryAGet16(ds, 0x20eead) == 0x0001)
        goto loc_1b6be8;
    sub_1a841e();
    al = memoryAGet(ds, 0x224ba8);
    if (al == 0x01)
        goto loc_1a8380;
    if (al != 0x00)
        goto loc_1a83d6;
loc_1a8380: // 0160:1a8380
    ax = memoryAGet16(ds, 0x224ba4);
    bx = memoryAGet16(ds, 0x224ba6);
    if (ax != 0x0140)
        goto loc_1a839c;
    if (bx != 0x00e0)
        goto loc_1a83d6;
    goto loc_1a83db;
loc_1a839c: // 0160:1a839c
    if (ax != 0x0120)
        goto loc_1a83ab;
    if (bx != 0x00c8)
        goto loc_1a83d6;
    goto loc_1a83db;
loc_1a83ab: // 0160:1a83ab
    if (ax != 0x0100)
        goto loc_1a83ba;
    if (bx != 0x00b4)
        goto loc_1a83d6;
    goto loc_1a83db;
loc_1a83ba: // 0160:1a83ba
    if (ax != 0x00f0)
        goto loc_1a83c9;
    if (bx != 0x00a8)
        goto loc_1a83d6;
    goto loc_1a83db;
loc_1a83c9: // 0160:1a83c9
    if (ax != 0x00e0)
        goto loc_1a83d6;
    if (bx == 0x009c)
        goto loc_1a83db;
loc_1a83d6: // 0160:1a83d6
    sub_1b63d3();
loc_1a83db: // 0160:1a83db
    ax = memoryAGet16(ds, 0x224ba4);
    memoryASet16(ds, 0x20ee53, ax);
    ax = memoryAGet16(ds, 0x224ba6);
    memoryASet16(ds, 0x20ee55, ax);
    ax = memoryAGet16(ds, 0x224baa);
    memoryASet16(ds, 0x20ee77, ax);
    al = memoryAGet(ds, 0x224ba8);
    memoryASet(ds, 0x1f1cbf, al);
    goto loc_1aa659;
    // gap 8779 bytes
loc_1aa659: // 0160:1aa659
    memoryASet16(ds, 0x20eda7, 0x0001);
    sub_1acfa2();
    sub_1b3b47();
    if (memoryAGet16(ds, 0x20eead) == 0x0001)
        goto loc_1b6be8;
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
loc_1aa684: // 0160:1aa684
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    memoryASet16(ds, 0x20e90d, 0x0002);
    if ((short)memoryAGet16(ds, 0x22464a) < (short)0x0001)
        goto loc_1aaa24;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1aa76c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1aa6ed;
    memoryASet16(ds, 0x22464e, 0x0000);
    sub_1b191a();
    al = 0x82;
    sub_1b18a6();
    sub_1c0f92();
    goto loc_1aa741;
    // gap 3 bytes
loc_1aa6ed: // 0160:1aa6ed
    memoryASet16(ds, 0x22464e, 0x0001);
    memoryASet16(ds, 0x20ed4d, 0x0006);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    sub_1c1c1d();
    sub_1b191a();
    al = 0x82;
    sub_1b18a6();
    sub_1c103c();
loc_1aa741: // 0160:1aa741
    sub_1c13c0();
    sub_1acfa2();
    memoryASet16(ds, 0x22464a, 0x0001);
    sub_1b3b3d();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    goto loc_1aa684;
loc_1aa76c: // 0160:1aa76c
    if (memoryAGet16(ds, 0x22464a) != 0x0002)
        goto loc_1aa8c9;
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1aa81d;
    ax = memoryAGet16(ds, 0x20e82f);
    if (ax != 0x0003)
        goto loc_1aa7a0;
    memoryASet16(ds, 0x20d7d5, 0x0001);
    ax--;
loc_1aa7a0: // 0160:1aa7a0
    ax += 0x0002;
    memoryASet16(ds, 0x20d7f5, ax);
    memoryASet16(ds, 0x20e90d, ax);
    sub_1b66fb();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20ed4d, 0x0006);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
loc_1aa7e8: // 0160:1aa7e8
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    memoryASet16(ds, 0x20d8ab, 0x0004);
    memoryASet16(ds, 0x20d8ad, 0x0000);
loc_1aa81d: // 0160:1aa81d
    memoryASet16(ds, 0x22466a, 0x0001);
    sub_1c1c26();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1aa84d;
    memoryASet16(ds, 0x22464a, 0x0001);
    sub_1b3b3d();
    goto loc_1aa684;
loc_1aa84d: // 0160:1aa84d
    sub_1ba9f5();
    sub_1c58cb();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d7a5, 0x02bd);
    sub_1d04a1();
    sub_1aafe3();
    memoryASet16(ds, 0x20eda9, 0x0000);
    sub_1b88fc();
    memoryASet16(ds, 0x20ecbd, 0x0000);
    sub_1ba2f6();
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1aa7e8;
    goto loc_1aa659;
loc_1aa8a8: // 0160:1aa8a8
    memoryASet16(ds, 0x22466a, 0x0001);
    sub_1c1c26();
    memoryASet16(ds, 0x22464a, 0x0001);
    sub_1b3b3d();
    goto loc_1aa684;
loc_1aa8c9: // 0160:1aa8c9
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1aa8a8;
    ax = memoryAGet16(ds, 0x20e82f);
    ax++;
    memoryASet16(ds, 0x20d7f5, ax);
    memoryASet16(ds, 0x20e90d, ax);
    sub_1b66fb();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20eda1, 0xffff);
    memoryASet16(ds, 0x20ed4d, 0x0004);
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1aa960;
    memoryASet16(ds, 0x20ed41, 0x0001);
    sub_1b9020();
    memoryASet16(ds, 0x20ed41, 0x0000);
    ax = memoryAGet16(ds, 0x20e8c1);
    memoryASet16(ds, 0x20e8e1, ax);
    ax = memoryAGet16(ds, 0x20e8c3);
    memoryASet16(ds, 0x20e8e7, ax);
    ax = memoryAGet16(ds, 0x20e8c5);
    memoryASet16(ds, 0x20e8ed, ax);
    ax = memoryAGet16(ds, 0x20e8c7);
    memoryASet16(ds, 0x20e8f3, ax);
    goto loc_1aa96e;
loc_1aa960: // 0160:1aa960
    memoryASet16(ds, 0x20ecb5, 0x0003);
    sub_1b9017();
loc_1aa96e: // 0160:1aa96e
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    memoryASet16(ds, 0x2247a4, 0x0016);
    memoryASet16(ds, 0x20d7d5, 0x0000);
    memoryASet16(ds, 0x20ec87, 0x0000);
    memoryASet16(ds, 0x20ec89, 0x0001);
    sub_1aa9d7();
    sub_1bb4ed();
    sub_1b191a();
    goto loc_1aa659;
    // gap 77 bytes
loc_1aaa24: // 0160:1aaa24
    ax = memoryAGet16(ds, 0x20e82f);
    if ((short)ax <= (short)0x0003)
        goto loc_1aaa64;
    if (ax == 0x0005)
        goto loc_1ab3f2;
    if (ax != 0x0006)
        goto loc_1aaa57;
    memoryASet16(ds, 0x20e90d, 0x0001);
    sub_1b8f8f();
    goto loc_1aa659;
loc_1aaa57: // 0160:1aaa57
    memoryASet16(ds, 0x20d7d5, 0x0001);
    ax = 0x0003;
loc_1aaa64: // 0160:1aaa64
    ax++;
    memoryASet16(ds, 0x20d7f5, ax);
    memoryASet16(ds, 0x20e90d, ax);
    if (ax == 0x0001)
        goto loc_1ab4cc;
    sub_1b66fb();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20ed4d, 0x0004);
    sub_1b3199();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    ax = memoryAGet16(ds, 0x20edf9);
    if (ax == 0x00ff)
        goto loc_1aaac7;
    if (!ax)
        goto loc_1aaaf3;
    if (ax == 0x0001)
        goto loc_1aaae7;
    goto loc_1aaadb;
    // gap 3 bytes
loc_1aaac7: // 0160:1aaac7
    ax = memoryAGet16(ds, 0x20e82f);
    if (!ax)
        goto loc_1aaf24;
    goto loc_1aae6a;
loc_1aaadb: // 0160:1aaadb
    eax = 0x001ec0e4;
    memoryASet32(ds, 0x20ecd1, eax);
    goto loc_1aaafd;
loc_1aaae7: // 0160:1aaae7
    eax = 0x001ec0de;
    memoryASet32(ds, 0x20ecd1, eax);
    goto loc_1aaafd;
loc_1aaaf3: // 0160:1aaaf3
    eax = 0x001ec0d8;
    memoryASet32(ds, 0x20ecd1, eax);
loc_1aaafd: // 0160:1aaafd
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d8ab, 0x0004);
    memoryASet16(ds, 0x20d8ad, 0x0000);
loc_1aab2b: // 0160:1aab2b
    memoryASet16(ds, 0x20e8e3, 0x0000);
    memoryASet16(ds, 0x20e8e9, 0x0000);
    memoryASet16(ds, 0x20e8ef, 0x0000);
    memoryASet16(ds, 0x20e8f5, 0x0000);
    memoryASet(ds, 0x20e9b9, 0x01);
loc_1aab56: // 0160:1aab56
    memoryASet16(ds, 0x20ec8f, 0x0000);
loc_1aab5f: // 0160:1aab5f
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    esi = memoryAGet32(ds, 0x20ecd1);
    memoryASet16(ds, 0x20ec9d, 0x0000);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ec8f);
    ebx = 0;
    bl = memoryAGet(ds, esi + eax);
    if (bl != 0x80)
        goto loc_1aabd0;
    sub_1b1c25();
    ax &= 0x0003;
    bx = memoryAGet16(ds, 0x20ec8f);
    bx <<= 2;
    ax += bx;
    if ((short)ax < (short)0x001b)
        goto loc_1aabc3;
    ax = 0;
loc_1aabc3: // 0160:1aabc3
    esi = 0x001ec0bc;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
loc_1aabd0: // 0160:1aabd0
    if (bl == 0xff)
        goto loc_1aab56;
    memoryASet16(ds, 0x20d7b9, bx);
    sub_1b8241();
    sub_1ba9f5();
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d7a5, 0x02bd);
    sub_1d04a1();
    sub_1b191a();
    al = 0x8a;
    sub_1b18a6();
    sub_1aafe3();
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1aac53;
    ax = memoryAGet16(ds, 0x20d7b7);
    if (ax == 0x0001)
        goto loc_1aac41;
    memoryASet16(ds, 0x20e8e9, memoryAGet16(ds, 0x20e8e9) + 0x0001);
    memoryASet16(ds, 0x20e8f5, memoryAGet16(ds, 0x20e8f5) + 0x0001);
    goto loc_1aac77;
loc_1aac41: // 0160:1aac41
    memoryASet16(ds, 0x20e8e3, memoryAGet16(ds, 0x20e8e3) + 0x0001);
    memoryASet16(ds, 0x20e8ef, memoryAGet16(ds, 0x20e8ef) + 0x0001);
    goto loc_1aac77;
loc_1aac53: // 0160:1aac53
    ax = memoryAGet16(ds, 0x20d7b7);
    ax--;
    ax += ax;
    bx = ax;
    ax += ax;
    ax += bx;
    esi = 0x0020e8e1;
    eax &= 0x0000ffff;
    memoryASet16(ds, esi + eax + 2, memoryAGet16(ds, esi + eax + 2) + 0x0001);
loc_1aac77: // 0160:1aac77
    memoryASet16(ds, 0x20ecbd, 0x0001);
    sub_1ba2f6();
    if (memoryAGet16(ds, 0x20e8e3) == 0x0003)
        goto loc_1aacc1;
    if (memoryAGet16(ds, 0x20e8e9) == 0x0003)
        goto loc_1aacc1;
    if (memoryAGet16(ds, 0x20e8ef) == 0x0003)
        goto loc_1aacc1;
    if (memoryAGet16(ds, 0x20e8f5) == 0x0003)
        goto loc_1aacc1;
    memoryASet(ds, 0x20e9b9, memoryAGet(ds, 0x20e9b9) + 0x01);
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 0x0001);
    goto loc_1aab5f;
loc_1aacc1: // 0160:1aacc1
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1aad40;
    if (memoryAGet16(ds, 0x20d7b7) == 0x0001)
        goto loc_1aad0b;
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb5, ax);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20ceb7, ax);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb9, ax);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20cebb, ax);
    goto loc_1aae0a;
loc_1aad0b: // 0160:1aad0b
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb5, ax);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20ceb7, ax);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb9, ax);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20cebb, ax);
    goto loc_1aae0a;
loc_1aad40: // 0160:1aad40
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb5, ax);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb7, ax);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20ceb9, ax);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20cebb, ax);
    bx = memoryAGet16(ds, 0x20e8e3);
    cx = memoryAGet16(ds, 0x20e8e9);
    dx = memoryAGet16(ds, 0x20e8ef);
    bp = memoryAGet16(ds, 0x20e8f5);
loc_1aad8c: // 0160:1aad8c
    if ((short)cx > (short)bx)
        goto loc_1aade5;
    if ((short)dx > (short)cx)
        goto loc_1aadc0;
    if ((short)bp <= (short)dx)
        goto loc_1aae0a;
    ax = dx;
    dx = bp;
    bp = ax;
    ax = memoryAGet16(ds, 0x20ceb9);
    di = memoryAGet16(ds, 0x20cebb);
    memoryASet16(ds, 0x20ceb9, di);
    memoryASet16(ds, 0x20cebb, ax);
    goto loc_1aad8c;
loc_1aadc0: // 0160:1aadc0
    ax = cx;
    cx = dx;
    dx = ax;
    ax = memoryAGet16(ds, 0x20ceb7);
    di = memoryAGet16(ds, 0x20ceb9);
    memoryASet16(ds, 0x20ceb7, di);
    memoryASet16(ds, 0x20ceb9, ax);
    goto loc_1aad8c;
loc_1aade5: // 0160:1aade5
    ax = bx;
    bx = cx;
    cx = ax;
    ax = memoryAGet16(ds, 0x20ceb5);
    di = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20ceb5, di);
    memoryASet16(ds, 0x20ceb7, ax);
    goto loc_1aad8c;
loc_1aae0a: // 0160:1aae0a
    ax = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20e843, ax);
    ax = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20e845, ax);
    ax = memoryAGet16(ds, 0x20ceb9);
    memoryASet16(ds, 0x20e847, ax);
    ax = memoryAGet16(ds, 0x20cebb);
    memoryASet16(ds, 0x20e849, ax);
    memoryASet16(ds, 0x20eda9, 0x0001);
    sub_1b88fc();
    memoryASet16(ds, 0x20ecbd, 0x0000);
    sub_1ba2f6();
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1aab2b;
    goto loc_1aa659;
loc_1aae6a: // 0160:1aae6a
    memoryASet16(ds, 0x20ed41, 0x0001);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9020();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d8ab, 0x0002);
    memoryASet16(ds, 0x20d8ad, 0x0000);
    memoryASet16(ds, 0x20d8a9, 0x0000);
    memoryASet16(ds, 0x20ed41, 0x0000);
    ax = memoryAGet16(ds, 0x20e8c1);
    memoryASet16(ds, 0x20e8e1, ax);
    ax = memoryAGet16(ds, 0x20e8c3);
    memoryASet16(ds, 0x20e8e7, ax);
    ax = memoryAGet16(ds, 0x20e8c5);
    memoryASet16(ds, 0x20e8ed, ax);
    ax = memoryAGet16(ds, 0x20e8c7);
    memoryASet16(ds, 0x20e8f3, ax);
    ax = memoryAGet16(ds, 0x20d7d5);
    push32(eax);
    memoryASet16(ds, 0x2247a4, 0x0016);
    memoryASet16(ds, 0x20d7d5, 0x0000);
    memoryASet16(ds, 0x20ec87, 0x0000);
    memoryASet16(ds, 0x20ec89, 0x0001);
    sub_1bb4ed();
    eax = pop32();
    memoryASet16(ds, 0x20d7d5, ax);
    sub_1b191a();
    goto loc_1aa659;
loc_1aaf24: // 0160:1aaf24
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
loc_1aaf40: // 0160:1aaf40
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    memoryASet16(ds, 0x20d8ab, 0x0004);
    memoryASet16(ds, 0x20d8ad, 0x0000);
    sub_1abb6f();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1aa659;
    sub_1ba9f5();
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d7a5, 0x02bd);
    sub_1d04a1();
    sub_1aafe3();
    memoryASet16(ds, 0x20eda9, 0x0000);
    sub_1b88fc();
    memoryASet16(ds, 0x20ecbd, 0x0000);
    sub_1ba2f6();
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1aaf40;
    goto loc_1aa659;
    // gap 1039 bytes
loc_1ab3f2: // 0160:1ab3f2
    esi = 0x00224866;
    edi = 0x00224732;
    ecx = 0x00000018;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet(ds, 0x2246d2) == 0xff)
        goto loc_1ab41d;
    esi = 0x002246d2;
    edi = 0x00224866;
    ecx = 0x00000018;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
loc_1ab41d: // 0160:1ab41d
    memoryASet16(ds, 0x20ed4d, 0x0005);
    sub_1b781c();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    ax = memoryAGet16(ds, 0x20e82f);
    ax += 0x0004;
    memoryASet16(ds, 0x20ecd7, ax);
    memoryASet16(ds, 0x20e90d, ax);
    memoryASet16(ds, 0x20d7f5, ax);
    memoryASet16(ds, 0x20ed41, 0x0001);
    memoryASet16(ds, 0x20eda1, 0xffff);
    memoryASet16(ds, 0x20ee45, 0x0001);
    sub_1b9020();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20ee45, 0x0000);
    esi = 0x0020ece3;
    ecx = 0x0000002f;
loc_1ab496: // 0160:1ab496
    memoryASet16(ds, esi, 0x00ff);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1ab496;
    sub_1b7afd();
    esi = 0x00224866;
    edi = 0x002246d2;
    ecx = 0x00000018;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi = 0x00224732;
    edi = 0x00224866;
    ecx = 0x00000018;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    goto loc_1aa659;
loc_1ab4cc: // 0160:1ab4cc
    sub_1b66fb();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    sub_1b3602();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20ecb5, ax);
    if (!ax)
        goto loc_1ab5b6;
    if (ax == 0x0001)
        goto loc_1ab896;
    if (ax == 0x0002)
        goto loc_1ab588;
    memoryASet16(ds, 0x2247a4, 0x0016);
    memoryASet16(ds, 0x20ed4d, 0x0004);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    memoryASet16(ds, 0x20ec87, 0x0000);
    memoryASet16(ds, 0x20ec89, 0x0001);
    sub_1bb4ed();
    goto loc_1aa659;
loc_1ab588: // 0160:1ab588
    memoryASet16(ds, 0x20eda1, 0xffff);
    memoryASet16(ds, 0x20ed4d, 0x0002);
    memoryASet16(ds, 0x20edfb, 0x0001);
    sub_1bc63b();
    memoryASet16(ds, 0x20edfb, 0x0000);
    goto loc_1aa659;
loc_1ab5b6: // 0160:1ab5b6
    memoryASet16(ds, 0x20edcb, 0x0000);
    memoryASet16(ds, 0x20edcd, 0x0000);
    memoryASet16(ds, 0x20d863, 0x0000);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
loc_1ab609: // 0160:1ab609
    if (memoryAGet16(ds, 0x20edcd) != 0x0003)
        goto loc_1ab67c;
    memoryASet16(ds, 0x20edcd, 0x0000);
    ax = memoryAGet16(ds, 0x20edcb);
    ax += 0x0037;
    memoryASet16(ds, 0x20d7b9, ax);
    memoryASet16(ds, 0x20ed4d, 0x0004);
    sub_1b191a();
    al = 0x80;
    sub_1b18a6();
    sub_1b8241();
    ax = memoryAGet16(ds, 0x20e90b);
    push32(eax);
    sub_1ac839();
    eax = pop32();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    if (ax == memoryAGet16(ds, 0x20e90b))
        goto loc_1ab67c;
    if (memoryAGet16(ds, 0x20edcb) == 0x0004)
        goto loc_1ab67c;
    memoryASet16(ds, 0x20edcb, memoryAGet16(ds, 0x20edcb) + 0x0001);
loc_1ab67c: // 0160:1ab67c
    memoryASet16(ds, 0x20ed4d, 0x0000);
    esi = 0x00203e42;
    bx = memoryAGet16(ds, 0x2247a4);
    ax = memoryAGet16(ds, 0x20d863);
    if ((short)bx >= (short)ax)
        goto loc_1ab6a2;
    memoryASet16(ds, 0x2247a4, ax);
loc_1ab6a2: // 0160:1ab6a2
    cx = 0x000e;
    mul16(cx);
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, dx);
    edx = memoryAGet32(ds, esi + eax + 10);
    memoryASet32(ds, 0x20d859, edx);
    memoryASet16(ds, 0x20d865, 0x0003);
    memoryASet16(ds, 0x20e8bb, 0x0003);
    edi = 0x0020e8c1;
    cx = memoryAGet16(ds, esi + eax + 8);
    dx = 0x0003;
loc_1ab6e3: // 0160:1ab6e3
    bx = memoryAGet16(ds, esi + eax + 2);
    if (bx != memoryAGet16(ds, 0x20e8e1))
        goto loc_1ab6f4;
    bx = cx;
loc_1ab6f4: // 0160:1ab6f4
    memoryASet16(ds, edi, bx);
    edi += 0x00000002;
    eax += 0x00000002;
    dx--;
    if (dx)
        goto loc_1ab6e3;
    sub_1b191a();
    al = 0x80;
    sub_1b18a6();
    sub_1b8241();
    sub_1ba9f5();
    memoryASet16(ds, 0x20edef, 0x0001);
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20edef, 0x0000);
    if (!(memoryAGet16(ds, 0x20d87f) & 0xffff))
        goto loc_1ab754;
    memoryASet16(ds, 0x20edcd, memoryAGet16(ds, 0x20edcd) + 0x0001);
    goto loc_1ab821;
loc_1ab754: // 0160:1ab754
    esi = 0x0020e843;
    edi = 0x0020e8c1;
    ax = memoryAGet16(ds, 0x20d1f7);
    ax--;
    ax <<= 1;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, dx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1f9);
    ax--;
    ax <<= 1;
    dx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, dx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1fb);
    ax--;
    ax <<= 1;
    dx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, dx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1fd);
    ax--;
    ax <<= 1;
    dx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, dx);
    esi += 0x00000002;
    memoryASet16(ds, 0x20e9a7, 0x0001);
    sub_1b88fc();
    if (memoryAGet16(ds, 0x20d1f7) != 0x0001)
        goto loc_1ab7d9;
    memoryASet16(ds, 0x20edcd, memoryAGet16(ds, 0x20edcd) + 0x0001);
    goto loc_1ab821;
loc_1ab7d9: // 0160:1ab7d9
    memoryASet16(ds, 0x20edcd, 0x0000);
    dx = memoryAGet16(ds, 0x20d863);
    dx++;
    if (dx == 0x0019)
        goto loc_1ab7fb;
    if (memoryAGet16(ds, 0x20d1f9) == 0x0001)
        goto loc_1ab821;
loc_1ab7fb: // 0160:1ab7fb
    sub_1b2f96();
    memoryASet16(ds, 0x20e90b, memoryAGet16(ds, 0x20e90b) - 0x0001);
    if (!(memoryAGet16(ds, 0x20e90b) & 0xffff & 0x8000))
        goto loc_1ab67c;
    sub_1ba001();
    goto loc_1aa659;
loc_1ab821: // 0160:1ab821
    memoryASet16(ds, 0x20d863, memoryAGet16(ds, 0x20d863) + 0x0001);
    ax = memoryAGet16(ds, 0x20d863);
    esi = 0x002247a6;
    bx = memoryAGet16(ds, 0x20e8e1);
    bx <<= 1;
    bx <<= 1;
    bp = bx;
    bx <<= 1;
    bx += bp;
    ebx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ebx);
    if (cx == 0x00ff)
        goto loc_1ab860;
    if ((short)ax <= (short)cx)
        goto loc_1ab869;
loc_1ab860: // 0160:1ab860
    memoryASet16(ds, esi + ebx, ax);
    sub_1b2d91();
loc_1ab869: // 0160:1ab869
    if (memoryAGet16(ds, 0x20d863) != 0x0019)
        goto loc_1ab609;
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e9c1, ax);
    memoryASet16(ds, 0x20e9c3, 0x0002);
    sub_1b9ca1();
    goto loc_1aa659;
loc_1ab896: // 0160:1ab896
    memoryASet16(ds, 0x20edcb, 0x0000);
    memoryASet16(ds, 0x20edcd, 0x0000);
    memoryASet16(ds, 0x20eda1, 0xffff);
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
loc_1ab8e0: // 0160:1ab8e0
    if (memoryAGet16(ds, 0x20edcd) != 0x0003)
        goto loc_1ab945;
    memoryASet16(ds, 0x20edcd, 0x0000);
    ax = memoryAGet16(ds, 0x20edcb);
    ax += 0x0037;
    memoryASet16(ds, 0x20d7b9, ax);
    memoryASet16(ds, 0x20ed4d, 0x0004);
    sub_1b191a();
    al = 0x80;
    sub_1b18a6();
    sub_1b8241();
    ax = memoryAGet16(ds, 0x20e90b);
    push32(eax);
    sub_1ac839();
    eax = pop32();
    if (ax == memoryAGet16(ds, 0x20e90b))
        goto loc_1ab945;
    if (memoryAGet16(ds, 0x20edcb) == 0x0004)
        goto loc_1ab945;
    memoryASet16(ds, 0x20edcb, memoryAGet16(ds, 0x20edcb) + 0x0001);
loc_1ab945: // 0160:1ab945
    memoryASet16(ds, 0x20ed4d, 0x0001);
    esi = 0x00203e42;
    bx = memoryAGet16(ds, 0x2247a4);
    ax = memoryAGet16(ds, 0x20d863);
    if ((short)bx >= (short)ax)
        goto loc_1ab96b;
    memoryASet16(ds, 0x2247a4, ax);
loc_1ab96b: // 0160:1ab96b
    ebx = 0;
    eax &= 0x0000ffff;
    bx = ax;
    dx = 0x000e;
    mul16(dx);
    dx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, dx);
    bx <<= 1;
    dx = bx;
    bx <<= 3;
    bx += dx;
    ecx = 0x00203fa0;
    ebx += ecx;
    memoryASet32(ds, 0x20d859, ebx);
    memoryASet16(ds, 0x20d865, 0x0003);
    memoryASet16(ds, 0x20e8bb, 0x0003);
    edi = 0x0020e8c1;
    cx = memoryAGet16(ds, esi + eax + 8);
    dx = 0x0003;
loc_1ab9c1: // 0160:1ab9c1
    bx = memoryAGet16(ds, esi + eax + 2);
    if (bx != memoryAGet16(ds, 0x20e8e1))
        goto loc_1ab9d2;
    bx = cx;
loc_1ab9d2: // 0160:1ab9d2
    memoryASet16(ds, edi, bx);
    edi += 0x00000002;
    eax += 0x00000002;
    dx--;
    if (dx)
        goto loc_1ab9c1;
    ax = memoryAGet16(ds, 0x20e8c1);
    memoryASet16(ds, 0x20e8e7, ax);
    sub_1b191a();
    al = 0x80;
    sub_1b18a6();
    sub_1b8241();
    memoryASet16(ds, 0x20d7f5, 0x0002);
    memoryASet16(ds, 0x20e90d, 0x0002);
    memoryASet16(ds, 0x20d89f, 0x0001);
    sub_1ba9f5();
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1aa659;
    memoryASet16(ds, 0x20d7f5, 0x0001);
    memoryASet16(ds, 0x20e90d, 0x0001);
    esi = 0x0020e843;
    edi = 0x0020e8c1;
    ax = memoryAGet16(ds, 0x20d7b7);
    if (ax == 0x0001)
        goto loc_1aba89;
    dx = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, esi, dx);
    dx = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, esi + 2, dx);
    memoryASet16(ds, 0x20d1f7, 0x0000);
    memoryASet16(ds, 0x20d1f9, 0x0000);
    memoryASet16(ds, 0x20edcd, 0x0000);
    goto loc_1abaaf;
loc_1aba89: // 0160:1aba89
    dx = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, esi, dx);
    dx = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, esi + 2, dx);
    memoryASet16(ds, 0x20d1f7, 0x0001);
    memoryASet16(ds, 0x20edcd, memoryAGet16(ds, 0x20edcd) + 0x0001);
loc_1abaaf: // 0160:1abaaf
    memoryASet16(ds, 0x20e9a7, 0x0002);
    sub_1b88fc();
    memoryASet16(ds, 0x20d89f, 0x0000);
    if (memoryAGet16(ds, 0x20d7b7) == 0x0001)
        goto loc_1abaf6;
    sub_1b2f96();
    memoryASet16(ds, 0x20e90b, memoryAGet16(ds, 0x20e90b) - 0x0001);
    if (!(memoryAGet16(ds, 0x20e90b) & 0xffff & 0x8000))
        goto loc_1ab945;
    sub_1ba001();
    goto loc_1aa659;
loc_1abaf6: // 0160:1abaf6
    memoryASet16(ds, 0x20d863, memoryAGet16(ds, 0x20d863) + 0x0001);
    ax = memoryAGet16(ds, 0x20d863);
    esi = 0x002247a6;
    bx = memoryAGet16(ds, 0x20e8e1);
    bx <<= 1;
    bx <<= 1;
    dx = bx;
    bx <<= 1;
    bx += dx;
    bx += 0x0002;
    ebx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ebx);
    if (cx == 0x00ff)
        goto loc_1abb39;
    if ((short)ax <= (short)cx)
        goto loc_1abb42;
loc_1abb39: // 0160:1abb39
    memoryASet16(ds, esi + ebx, ax);
    sub_1b2d91();
loc_1abb42: // 0160:1abb42
    if (memoryAGet16(ds, 0x20d863) != 0x0019)
        goto loc_1ab8e0;
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e9c1, ax);
    memoryASet16(ds, 0x20e9c3, 0x0001);
    sub_1b9ca1();
    goto loc_1aa659;
    // gap 45177 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1a840e() // 0160:1a840e +long
{
    esp -= 4;
    push32(eax);
    eax = memoryAGet32(ds, 0x2eebd0);
loc_1a8414: // 0160:1a8414
    sync();
    if (memoryAGet32(ds, 0x2eebd0) == eax)
        goto loc_1a8414;
    eax = pop32();
    esp += 4;
}
void sub_1a841e() // 0160:1a841e +long
{
    esp -= 4;
    sub_1c1cf3();
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1a8498;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    memoryASet16(ds, 0x20ec8f, 0x0000);
    ebx = 0;
loc_1a8449: // 0160:1a8449
    push32(edi);
    push32(ebx);
    memoryASet32(ds, 0x224670, 0x00000010);
    eax = 0x0023c4e0;
    memoryASet32(ds, 0x224674, eax);
    sub_1c1d74();
    ebx = pop32();
    edi = pop32();
    if (!ax)
        goto loc_1a846f;
    bx++;
    goto loc_1a847b;
loc_1a846f: // 0160:1a846f
    esi = 0x0023c4e0;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
loc_1a847b: // 0160:1a847b
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 1);
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1a8449;
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) - bx);
loc_1a8498: // 0160:1a8498
    esp += 4;
    return;
}
void sub_1a8499() // 0160:1a8499 +long
{
    esp -= 4;
    eax = 0;
    ebx = 0;
    ax = memoryAGet16(ds, 0x20ee53);
    bx = memoryAGet16(ds, 0x20ee55);
    memoryASet32(ds, 0x1f1c48, eax);
    memoryASet32(ds, 0x1f1c4c, ebx);
    if (memoryAGet16(ds, 0x20ee5d) == 0x0001)
        goto loc_1a852d;
    sub_1a86b0();
    sub_1a862c();
    sub_1a861d();
    sub_1a8596();
    edi = 0x002eebec;
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000014;
    ecx = 0x00000080;
    ebp = ecx;
    if (memoryAGet(ds, 0x1f1c44) & 0xff)
        goto loc_1a84f1;
loc_1a84f1: // 0160:1a84f1
    eax = 0;
    ebx = 0;
    edx = 0;
    al = memoryAGet(ds, esi);
    eax += eax;
    bl = memoryAGet(ds, esi + 1);
    eax += ebx;
    ebx <<= 3;
    eax += ebx;
    dl = memoryAGet(ds, esi + 2);
    eax += edx;
    edx <<= 2;
    eax += edx;
    bx = 0x0155;
    edx = 0;
    div16(bx);
    al += 0x90;
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi++;
    if (--ecx)
        goto loc_1a84f1;
    ecx = ebp;
loc_1a8524: // 0160:1a8524
    al = 0;
    al -= cl;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1a8524;
loc_1a852d: // 0160:1a852d
    sub_1a8b3c();
    dx = 0x03d4;
    al = 0x13;
    out8(dx, al);
    dx++;
    al = 0x2a;
    out8(dx, al);
    if (memoryAGet16(ds, 0x20ee5b) == 0x0001)
        goto loc_1a857a;
    eax = memoryAGet32(ds, 0x2eeb8c);
    eax += 0x00000014;
    sub_1aa5d6();
    if (memoryAGet16(ds, 0x20d7b9) != 0x000e)
        goto loc_1a857a;
    edx = 0x001ecae4;
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0x00;
    sub_1b5442();
loc_1a857a: // 0160:1a857a
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    edi = 0x000a0000;
    ecx = 0x00004000;
    eax = 0;
    push(ds);
    es = pop();
    flags.direction = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    esp += 4;
}
void sub_1a84d3() // 0160:1a84d3 +long
{
    esp -= 4;
    edi = 0x002eebec;
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000014;
    ecx = 0x00000080;
    ebp = ecx;
    if (memoryAGet(ds, 0x1f1c44) & 0xff)
        goto loc_1a84f1;
loc_1a84f1: // 0160:1a84f1
    eax = 0;
    ebx = 0;
    edx = 0;
    al = memoryAGet(ds, esi);
    eax += eax;
    bl = memoryAGet(ds, esi + 1);
    eax += ebx;
    ebx <<= 3;
    eax += ebx;
    dl = memoryAGet(ds, esi + 2);
    eax += edx;
    edx <<= 2;
    eax += edx;
    bx = 0x0155;
    edx = 0;
    div16(bx);
    al += 0x90;
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi++;
    if (--ecx)
        goto loc_1a84f1;
    ecx = ebp;
loc_1a8524: // 0160:1a8524
    al = 0;
    al -= cl;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1a8524;
    sub_1a8b3c();
    dx = 0x03d4;
    al = 0x13;
    out8(dx, al);
    dx++;
    al = 0x2a;
    out8(dx, al);
    if (memoryAGet16(ds, 0x20ee5b) == 0x0001)
        goto loc_1a857a;
    eax = memoryAGet32(ds, 0x2eeb8c);
    eax += 0x00000014;
    sub_1aa5d6();
    if (memoryAGet16(ds, 0x20d7b9) != 0x000e)
        goto loc_1a857a;
    edx = 0x001ecae4;
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0x00;
    sub_1b5442();
loc_1a857a: // 0160:1a857a
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    edi = 0x000a0000;
    ecx = 0x00004000;
    eax = 0;
    push(ds);
    es = pop();
    flags.direction = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    esp += 4;
}
void sub_1a8596() // 0160:1a8596 +long
{
    esp -= 4;
    esi = 0x00204d14;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    edx = memoryAGet32(ds, esi + eax);
    ecx = 0;
    memoryASet32(ds, 0x2eeb5c, ecx);
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    push32(eax);
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    edx <<= 16;
    dx = ax;
    ebx = pop32();
    push32(ebx);
    push32(edx);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    eax = 0x00231cd8;
    ecx = pop32();
    ebx = pop32();
    edx = eax;
    push32(edx);
    push32(ecx);
    push32(ebx);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ebx = pop32();
    eax = 0x00003e00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ecx = pop32();
    ecx += memoryAGet32(ds, 0x2eeb5c);
    edx = pop32();
    esp += 4;
    return;
    // gap 131531 bytes
loc_1c87e8: // 0160:1c87e8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -4);
    push32(eax);
    eax = 0x0020aaa8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000008;
    sub_1e3645();
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1a85aa() // 0160:1a85aa +long
{
    esp -= 4;
    ecx = 0;
    memoryASet32(ds, 0x2eeb5c, ecx);
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    push32(eax);
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    edx <<= 16;
    dx = ax;
    ebx = pop32();
    push32(ebx);
    push32(edx);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    eax = 0x00231cd8;
    ecx = pop32();
    ebx = pop32();
    edx = eax;
    push32(edx);
    push32(ecx);
    push32(ebx);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ebx = pop32();
    eax = 0x00003e00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ecx = pop32();
    ecx += memoryAGet32(ds, 0x2eeb5c);
    edx = pop32();
    esp += 4;
    return;
    // gap 131531 bytes
loc_1c87e8: // 0160:1c87e8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -4);
    push32(eax);
    eax = 0x0020aaa8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000008;
    sub_1e3645();
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1a861d() // 0160:1a861d +long
{
    esp -= 4;
    sub_1b0c88();
    sub_1b0ee3();
    goto loc_1b0dfd;
    // gap 34678 bytes
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
loc_1b0dfd: // 0160:1b0dfd
    esi = 0x00206adc;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    if (!eax)
        goto loc_1b0ee2;
    esi = eax;
    memoryASet32(ds, 0x20cecb, esi);
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = 0x002da260;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002d9f4c;
    memoryASet32(ds, 0x2eebc0, ecx);
    memoryASet32(ds, 0x2eebc4, edx);
    esi = memoryAGet32(ds, 0x2eebc4);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0e6a: // 0160:1b0e6a
    ecx = 0x00000014;
loc_1b0e6f: // 0160:1b0e6f
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0e6f;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0e6a;
    esi = memoryAGet32(ds, 0x20cecb);
    eax = 0x002da3a0;
    goto loc_1b0da2;
loc_1b0ee2: // 0160:1b0ee2
    esp += 4;
    return;
}
void sub_1a862c() // 0160:1a862c +long
{
    esp -= 4;
    esi = 0x00207c0a;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    eax <<= 2;
    esi += eax;
    edx = memoryAGet32(ds, esi);
    eax = 0x00232cd8;
    sub_1aa4e9();
    memoryASet32(ds, 0x2eeb90, ecx);
    memoryASet32(ds, 0x2eeb94, edx);
    eax = 0;
    al = memoryAGet(ds, edx + 1);
    memoryASet32(ds, 0x1f1cb0, eax);
    memoryASet16(ds, 0x20cef3, ax);
    ebx = 0;
    bl = memoryAGet(ds, edx + 3);
    memoryASet32(ds, 0x1f1cb4, ebx);
    memoryASet16(ds, 0x20cef7, bx);
    mul8(bl);
    eax += eax;
    memoryASet32(ds, 0x2eeba4, eax);
    eax += memoryAGet32(ds, 0x2eeb94);
    eax += 0x00000004;
    memoryASet32(ds, 0x2eeba0, eax);
    ecx = 0;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cef7);
    cx = memoryAGet16(ds, 0x20cef3);
    edx = 0;
    mul16(cx);
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x20cefb, eax);
    esp += 4;
}
void sub_1a86b0() // 0160:1a86b0 +long
{
    esp -= 4;
    esi = 0x00208058;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    edx = memoryAGet32(ds, esi + eax);
    if (!edx)
        goto loc_1a86de;
    eax = 0x002390dc;
    sub_1aa4e9();
    memoryASet32(ds, 0x2eeb98, ecx);
    memoryASet32(ds, 0x2eeb9c, edx);
loc_1a86de: // 0160:1a86de
    esi = 0x002079fa;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    eax <<= 2;
    esi += eax;
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    if (memoryAGet16(ds, 0x20d7b9) != 0x0022)
        goto loc_1a8745;
    edi = 0x002971d4;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00051714;
    ecx = 0x00000060;
loc_1a872c: // 0160:1a872c
    push32(ecx);
    push32(esi);
    ecx = 0x000000a0;
loc_1a8733: // 0160:1a8733
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1a8733;
    esi = pop32();
    esi += 0x00000140;
    ecx = pop32();
    if (--ecx)
        goto loc_1a872c;
loc_1a8745: // 0160:1a8745
    esi = 0x00201a98;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20d867, ax);
    memoryASet32(ds, 0x1f1c40, eax);
    ecx = 0x00060e94;
    edx = memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x2eeb88, ecx);
    memoryASet32(ds, 0x2eeb8c, edx);
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    ebp = 0x000060b8;
loc_1a8788: // 0160:1a8788
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    bl = memoryAGet(ds, esi + 9);
    bh = memoryAGet(ds, esi + 13);
    ebx <<= 16;
    bl = memoryAGet(ds, esi + 1);
    bh = memoryAGet(ds, esi + 5);
    cl = memoryAGet(ds, esi + 10);
    ch = memoryAGet(ds, esi + 14);
    ecx <<= 16;
    cl = memoryAGet(ds, esi + 2);
    ch = memoryAGet(ds, esi + 6);
    dl = memoryAGet(ds, esi + 11);
    dh = memoryAGet(ds, esi + 15);
    edx <<= 16;
    dl = memoryAGet(ds, esi + 3);
    dh = memoryAGet(ds, esi + 7);
    memoryASet32(ds, esi, eax);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 8, ecx);
    memoryASet32(ds, esi + 12, edx);
    esi += 0x00000010;
    ebp--;
    if (ebp)
        goto loc_1a8788;
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    edi = 0x0030acec;
    edx = 0x002eecec;
    memoryASet32(ds, 0x2eeb68, 0x00000027);
loc_1a87f4: // 0160:1a87f4
    memoryASet32(ds, 0x2eeb64, 0x0000000a);
loc_1a87fe: // 0160:1a87fe
    bx = 0x00ff;
    memoryASet32(ds, 0x2eeb60, 0x00000004);
loc_1a880c: // 0160:1a880c
    memoryASet32(ds, 0x2eeb58, esi);
    memoryASet32(ds, 0x2eeb6c, edx);
    memoryASet32(ds, 0x2eeb5c, 0x00000020);
    if (!(memoryAGet(ds, 0x1f1c40) & 0xff))
        goto loc_1a8835;
    memoryASet32(ds, 0x2eeb5c, 0x00000010);
loc_1a8835: // 0160:1a8835
    ecx = 0x00000004;
loc_1a883a: // 0160:1a883a
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a8846;
    al = 0xff;
loc_1a8846: // 0160:1a8846
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1a883a;
    esi += 0x0000000c;
    ecx = 0x00000004;
loc_1a8856: // 0160:1a8856
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a8862;
    al = 0xff;
loc_1a8862: // 0160:1a8862
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1a8856;
    if (!(memoryAGet(ds, 0x1f1c40) & 0xff))
        goto loc_1a887d;
    ah &= 0x0f;
    al = ah;
    al <<= 4;
    ah |= al;
loc_1a887d: // 0160:1a887d
    memoryASet(ds, edx, ah);
    bl &= ah;
    bh |= ah;
    edx++;
    esi += 0x0000012c;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - 1);
    if (memoryAGet32(ds, 0x2eeb5c))
        goto loc_1a8835;
    esi = memoryAGet32(ds, 0x2eeb58);
    edx = memoryAGet32(ds, 0x2eeb6c);
    edx += 0x00000020;
    esi += 0x00000004;
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - 1);
    if (memoryAGet32(ds, 0x2eeb60))
        goto loc_1a880c;
    al = 0;
    if (bl != 0xff)
        goto loc_1a88b9;
    al = 0x02;
loc_1a88b9: // 0160:1a88b9
    if (bh)
        goto loc_1a88bf;
    al = 0x01;
loc_1a88bf: // 0160:1a88bf
    memoryASet(ds, edi, al);
    edi++;
    esi += 0x00000010;
    memoryASet32(ds, 0x2eeb64, memoryAGet32(ds, 0x2eeb64) - 1);
    if (memoryAGet32(ds, 0x2eeb64))
        goto loc_1a87fe;
    esi += 0x000026c0;
    memoryASet32(ds, 0x2eeb68, memoryAGet32(ds, 0x2eeb68) - 1);
    if (memoryAGet32(ds, 0x2eeb68))
        goto loc_1a87f4;
    esp += 4;
}
void sub_1a8760() // 0160:1a8760 +long
{
    esp -= 4;
    ecx = 0x00060e94;
    edx = memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x2eeb88, ecx);
    memoryASet32(ds, 0x2eeb8c, edx);
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    ebp = 0x000060b8;
loc_1a8788: // 0160:1a8788
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    bl = memoryAGet(ds, esi + 9);
    bh = memoryAGet(ds, esi + 13);
    ebx <<= 16;
    bl = memoryAGet(ds, esi + 1);
    bh = memoryAGet(ds, esi + 5);
    cl = memoryAGet(ds, esi + 10);
    ch = memoryAGet(ds, esi + 14);
    ecx <<= 16;
    cl = memoryAGet(ds, esi + 2);
    ch = memoryAGet(ds, esi + 6);
    dl = memoryAGet(ds, esi + 11);
    dh = memoryAGet(ds, esi + 15);
    edx <<= 16;
    dl = memoryAGet(ds, esi + 3);
    dh = memoryAGet(ds, esi + 7);
    memoryASet32(ds, esi, eax);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 8, ecx);
    memoryASet32(ds, esi + 12, edx);
    esi += 0x00000010;
    ebp--;
    if (ebp)
        goto loc_1a8788;
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    edi = 0x0030acec;
    edx = 0x002eecec;
    memoryASet32(ds, 0x2eeb68, 0x00000027);
loc_1a87f4: // 0160:1a87f4
    memoryASet32(ds, 0x2eeb64, 0x0000000a);
loc_1a87fe: // 0160:1a87fe
    bx = 0x00ff;
    memoryASet32(ds, 0x2eeb60, 0x00000004);
loc_1a880c: // 0160:1a880c
    memoryASet32(ds, 0x2eeb58, esi);
    memoryASet32(ds, 0x2eeb6c, edx);
    memoryASet32(ds, 0x2eeb5c, 0x00000020);
    if (!(memoryAGet(ds, 0x1f1c40) & 0xff))
        goto loc_1a8835;
    memoryASet32(ds, 0x2eeb5c, 0x00000010);
loc_1a8835: // 0160:1a8835
    ecx = 0x00000004;
loc_1a883a: // 0160:1a883a
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a8846;
    al = 0xff;
loc_1a8846: // 0160:1a8846
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1a883a;
    esi += 0x0000000c;
    ecx = 0x00000004;
loc_1a8856: // 0160:1a8856
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a8862;
    al = 0xff;
loc_1a8862: // 0160:1a8862
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1a8856;
    if (!(memoryAGet(ds, 0x1f1c40) & 0xff))
        goto loc_1a887d;
    ah &= 0x0f;
    al = ah;
    al <<= 4;
    ah |= al;
loc_1a887d: // 0160:1a887d
    memoryASet(ds, edx, ah);
    bl &= ah;
    bh |= ah;
    edx++;
    esi += 0x0000012c;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - 1);
    if (memoryAGet32(ds, 0x2eeb5c))
        goto loc_1a8835;
    esi = memoryAGet32(ds, 0x2eeb58);
    edx = memoryAGet32(ds, 0x2eeb6c);
    edx += 0x00000020;
    esi += 0x00000004;
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - 1);
    if (memoryAGet32(ds, 0x2eeb60))
        goto loc_1a880c;
    al = 0;
    if (bl != 0xff)
        goto loc_1a88b9;
    al = 0x02;
loc_1a88b9: // 0160:1a88b9
    if (bh)
        goto loc_1a88bf;
    al = 0x01;
loc_1a88bf: // 0160:1a88bf
    memoryASet(ds, edi, al);
    edi++;
    esi += 0x00000010;
    memoryASet32(ds, 0x2eeb64, memoryAGet32(ds, 0x2eeb64) - 1);
    if (memoryAGet32(ds, 0x2eeb64))
        goto loc_1a87fe;
    esi += 0x000026c0;
    memoryASet32(ds, 0x2eeb68, memoryAGet32(ds, 0x2eeb68) - 1);
    if (memoryAGet32(ds, 0x2eeb68))
        goto loc_1a87f4;
    esp += 4;
}
void sub_1a88e4() // 0160:1a88e4 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    push(es);
    push(ds);
    ax = 0xc000;
    ds = eax;
    memoryASet32(ds, 0x2eebd4, memoryAGet32(ds, 0x2eebd4) + 1);
    al = memoryAGet(ds, 0x2eebd4);
    if (al == 0x10)
        goto loc_1a8a19;
    if (al < 0x10)
        goto loc_1a89db;
    dx = 0x03d4;
    bx = memoryAGet16(ds, 0x1f1cb8);
    ah = bh;
    al = 0x0c;
    out16(dx, ax);
    al++;
    ah = bl;
    out16(dx, ax);
    dl = 0xc0;
    al = 0x33;
    out8(dx, al);
    al = memoryAGet(ds, 0x1f1cba);
    out8(dx, al);
    al = memoryAGet(ds, 0x1f1cbe);
    memoryASet(ds, 0x1f1cba, al);
    memoryASet32(ds, 0x2eebd4, 0x00000000);
    memoryASet32(ds, 0x2eebd0, memoryAGet32(ds, 0x2eebd0) + 1);
    al = 0x34;
    out8(0x43, al);
    al = 0;
    out8(0x40, al);
    out8(0x40, al);
loc_1a894c: // 0160:1a894c
    al = 0x04;
    out8(0x43, al);
    al = in8(0x40);
    bl = al;
    al = in8(0x40);
    bh = al;
    if ((short)bx > (short)0xff38)
        goto loc_1a894c;
    bx = 0x0064;
    dl = 0xda;
    al = in8(dx);
    if (al & 0x08)
        goto loc_1a8993;
loc_1a896a: // 0160:1a896a
    al = in8(dx);
    if (!(al & 0x08))
        goto loc_1a896a;
    al = 0x04;
    out8(0x43, al);
    al = in8(0x40);
    bl = al;
    al = in8(0x40);
    bh = al;
    ax = bx;
    bx = 0x02bc;
    if (ax < 0xe026)
        goto loc_1a8993;
    bx = ax;
    bx = sar16(bx, 0x0001);
    bx += 0x00c8;
loc_1a8993: // 0160:1a8993
    memoryASet16(ds, 0x1f1d3c, memoryAGet16(ds, 0x1f1d3c) - bx);
    al = 0x34;
    out8(0x43, al);
    ax = memoryAGet16(ds, 0x1f1d38);
    out8(0x40, al);
    al = ah;
    out8(0x40, al);
    dx = 0x0201;
    eax = 0;
    out8(dx, al);
    memoryASet32(ds, 0x1f1cc8, eax);
    memoryASet(ds, 0x1f1cc2, al);
    memoryASet(ds, 0x1f1cc1, 0xf0);
    if (memoryAGet16(ds, 0x224666) >= 0x0100)
        goto loc_1a89d2;
    sub_1b4f37();
loc_1a89d2: // 0160:1a89d2
    memoryASet16(ds, 0x20ee4f, memoryAGet16(ds, 0x20ee4f) + 1);
    goto loc_1a8a11;
loc_1a89db: // 0160:1a89db
    dx = 0x0201;
    al = in8(dx);
    memoryASet(ds, 0x1f1cc1, memoryAGet(ds, 0x1f1cc1) & al);
    memoryASet(ds, 0x1f1cc2, memoryAGet(ds, 0x1f1cc2) | al);
    flags.carry = !!((al<<4) & 0x80);
    al <<= 5;
    memoryASet(ds, 0x1f1ccb, memoryAGet(ds, 0x1f1ccb) + (0x00 + flags.carry));
    flags.carry = (al + al) >= 0x100;
    al += al;
    memoryASet(ds, 0x1f1cca, memoryAGet(ds, 0x1f1cca) + (0x00 + flags.carry));
    flags.carry = (al + al) >= 0x100;
    al += al;
    memoryASet(ds, 0x1f1cc9, memoryAGet(ds, 0x1f1cc9) + (0x00 + flags.carry));
    flags.carry = (al + al) >= 0x100;
    al += al;
    memoryASet(ds, 0x1f1cc8, memoryAGet(ds, 0x1f1cc8) + (0x00 + flags.carry));
loc_1a8a11: // 0160:1a8a11
    al = 0x20;
    out8(0x20, al);
    ds = pop();
    es = pop();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    stop("iretd");
loc_1a8a19: // 0160:1a8a19
    al = 0x34;
    out8(0x43, al);
    ax = memoryAGet16(ds, 0x1f1d3c);
    out8(0x40, al);
    al = ah;
    out8(0x40, al);
    eax = memoryAGet32(ds, 0x1f1cc8);
    memoryASet32(ds, 0x1f1cc4, eax);
    al = memoryAGet(ds, 0x1f1cc3);
    al |= memoryAGet(ds, 0x1f1cc1);
    al &= memoryAGet(ds, 0x1f1cc2);
    memoryASet(ds, 0x1f1cc3, al);
    push(fs);
    push(gs);
    sub_1b4f8f();
    indirectCall(cs, memoryAGet32(ds, 0x1f1c50)); // 0160:1a8a52;
    memoryASet32(ds, 0x1f1c54, memoryAGet32(ds, 0x1f1c54) + 1);
    gs = pop();
    fs = pop();
    eax = memoryAGet32(ds, 0x1f1d38);
    eax <<= 4;
    eax += memoryAGet32(ds, 0x1f1d3c);
    eax += memoryAGet32(ds, 0x2eebd8);
    eax += 0x0000000f;
    memoryASet32(ds, 0x2eebd8, eax);
    flags.carry = eax < 0x00010000;
    eax -= 0x00010000;
    if (!flags.carry)
        goto loc_1a8a8b;
    al = 0x20;
    out8(0x20, al);
    goto loc_1a8a97;
loc_1a8a8b: // 0160:1a8a8b
    memoryASet32(ds, 0x2eebd8, eax);
    push32(flagAsReg32());
    indirectCall(cs, memoryAGet32(ds, 0x2eebdc)); // 0160:1a8a91;
loc_1a8a97: // 0160:1a8a97
    ds = pop();
    es = pop();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    stop("iretd");
}
void sub_1a8a9b() // 0160:1a8a9b +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(edx);
    push(ds);
    ax = 0xc000;
    ds = eax;
    al = in8(0x60);
    if (al == 0xe0)
        goto loc_1a8b0c;
    if (al == 0xe1)
        goto loc_1a8b0c;
    ebx = 0x0000007f;
    bl &= al;
    dl = bl;
    if (bl >= 0x60)
        goto loc_1a8b03;
    bl += memoryAGet(ds, 0x2eebe8);
    memoryASet(ds, 0x2eebe8, 0x00);
    al = ~al;
    al >>= 7;
    memoryASet(ds, ebx + 3190896, al);
    ah = memoryAGet(ds, 0x30b0a8);
    ah |= memoryAGet(ds, 0x30b108);
    ah += ah;
    ah |= memoryAGet(ds, 0x30b08d);
    ah |= memoryAGet(ds, 0x30b0ed);
    ah += ah;
    ah |= memoryAGet(ds, 0x30b09a);
    ah |= memoryAGet(ds, 0x30b0a6);
    memoryASet(ds, 0x1f1cc0, ah);
loc_1a8b03: // 0160:1a8b03
    al = 0x20;
    out8(0x20, al);
    ds = pop();
    edx = pop32();
    ebx = pop32();
    eax = pop32();
    stop("iretd");
loc_1a8b0c: // 0160:1a8b0c
    memoryASet(ds, 0x2eebe8, 0x60);
    goto loc_1a8b03;
}
void sub_1a8b3c() // 0160:1a8b3c +long
{
    esp -= 4;
    dx = 0x03d4;
    al = 0x11;
    out8(dx, al);
    al = 0x0c;
    dx++;
    out8(dx, al);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xef;
    out8(dx, al);
    dx--;
    al = 0x06;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xfd;
    out8(dx, al);
    dx = 0x03c4;
    al = 0x04;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xf7;
    al |= 0x04;
    out8(dx, al);
    dx = 0x03d4;
    al = 0x14;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al &= 0xbf;
    out8(dx, al);
    dx--;
    al = 0x17;
    out8(dx, al);
    dx++;
    al = in8(dx);
    al |= 0x40;
    out8(dx, al);
    dx = 0x03d4;
    al = 0x01;
    out8(dx, al);
    dx++;
    eax = memoryAGet32(ds, 0x1f1c48);
    eax >>= 2;
    eax--;
    out8(dx, al);
    dx--;
    al = 0x12;
    out8(dx, al);
    dx++;
    eax = memoryAGet32(ds, 0x1f1c4c);
    eax += eax;
    eax--;
    out8(dx, al);
    dx--;
    al = 0x02;
    out8(dx, al);
    dx++;
    al = memoryAGet(ds, 0x1f1cbb);
    if (al != 0x99)
        goto loc_1a8bc0;
    al = in8(dx);
    memoryASet(ds, 0x1f1cbb, al);
loc_1a8bc0: // 0160:1a8bc0
    ebx = 0x00000140;
    ebx -= memoryAGet32(ds, 0x1f1c48);
    ebx >>= 2;
    al -= bl;
    out8(dx, al);
    eax = 0x00000140;
    eax -= memoryAGet32(ds, 0x1f1c48);
    eax >>= 3;
    ch = al;
    dx--;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = memoryAGet(ds, 0x1f1cbc);
    if (al != 0x99)
        goto loc_1a8bf7;
    al = in8(dx);
    memoryASet(ds, 0x1f1cbc, al);
loc_1a8bf7: // 0160:1a8bf7
    cl = al;
    cl &= 0xe0;
    al -= ch;
    al &= 0x1f;
    al |= cl;
    out8(dx, al);
    dx--;
    al = 0x04;
    out8(dx, al);
    dx++;
    al = memoryAGet(ds, 0x1f1cbd);
    if (al != 0x99)
        goto loc_1a8c19;
    al = in8(dx);
    memoryASet(ds, 0x1f1cbd, al);
loc_1a8c19: // 0160:1a8c19
    ebx >>= 1;
    al -= bl;
    out8(dx, al);
    dx--;
    al = 0x10;
    out8(dx, al);
    dx++;
    ebx = 0x000000f0;
    ebx -= memoryAGet32(ds, 0x1f1c4c);
    al = 0xea;
    al -= bl;
    out8(dx, al);
    dx--;
    al = 0x15;
    out8(dx, al);
    dx++;
    eax = memoryAGet32(ds, 0x1f1c4c);
    eax += eax;
    eax += 0x00000007;
    ch = ah;
    out8(dx, al);
    dx--;
    al = 0x07;
    out8(dx, al);
    dx++;
    eax = memoryAGet32(ds, 0x1f1c4c);
    eax += eax;
    eax--;
    eax >>= 7;
    al &= 0x02;
    ch &= 0x01;
    ch <<= 3;
    al |= ch;
    al |= 0x34;
    out8(dx, al);
    dx = 0x03c2;
    al = 0xe3;
    out8(dx, al);
    dx = 0x03d4;
    al = 0x06;
    out8(dx, al);
    dx++;
    al = 0x0d;
    out8(dx, al);
    dx--;
    al = 0x11;
    out8(dx, al);
    dx++;
    al = 0x8c;
    out8(dx, al);
    dx--;
    al = 0x16;
    out8(dx, al);
    dx++;
    al = 0x06;
    out8(dx, al);
    esp += 4;
}
void sub_1a8c90() // 0160:1a8c90 +long
{
    esp -= 4;
    al = 0x02;
    sub_1a9055();
    eax = memoryAGet32(ds, 0x1f1c38);
    ebx = memoryAGet32(ds, 0x1f1c3c);
    memoryASet32(ds, 0x1f1ca8, eax);
    memoryASet32(ds, 0x1f1cac, ebx);
    esp += 4;
}
void sub_1a8cae() // 0160:1a8cae +long
{
    esp -= 4;
    memoryASet16(ds, 0x20c832, memoryAGet16(ds, 0x20c832) + 0x0001);
    if (memoryAGet16(ds, 0x20ee85) == 0x0000)
        goto loc_1a8cc8;
    memoryASet16(ds, 0x20ee85, memoryAGet16(ds, 0x20ee85) - 0x0001);
loc_1a8cc8: // 0160:1a8cc8
    memoryASet16(ds, 0x20ee85, memoryAGet16(ds, 0x20ee85) & 0x00ff);
    if (memoryAGet16(ds, 0x20ee83) == 0x0000)
        goto loc_1a8ce3;
    memoryASet16(ds, 0x20ee83, memoryAGet16(ds, 0x20ee83) - 0x0001);
loc_1a8ce3: // 0160:1a8ce3
    memoryASet16(ds, 0x20ee83, memoryAGet16(ds, 0x20ee83) & 0x00ff);
    if (memoryAGet16(ds, 0x20d7bf) & 0xffff)
        goto loc_1a8d0f;
    memoryASet16(ds, 0x20c830, memoryAGet16(ds, 0x20c830) + 0x0001);
    al = memoryAGet(ds, 0x20c82e);
    al <<= 1;
    if (!!al)
        goto loc_1a8d0a;
    al = 0x01;
loc_1a8d0a: // 0160:1a8d0a
    memoryASet(ds, 0x20c82e, al);
loc_1a8d0f: // 0160:1a8d0f
    esp += 4;
    return;
}
void sub_1a8d10() // 0160:1a8d10 +long
{
    esp -= 4;
    eax = 0;
    ebx = 0;
    ax = memoryAGet16(ds, 0x20cf23);
    bx = memoryAGet16(ds, 0x20cf25);
    memoryASet32(ds, 0x1f1c38, eax);
    memoryASet32(ds, 0x1f1c3c, ebx);
    ebx = memoryAGet32(ds, 0x1f1c34);
    eax = memoryAGet32(ds, 0x1f1ca8);
    bl = 0x0f;
    bl &= al;
    bl >>= 2;
    memoryASet16(ds, 0x1f1cb8, bx);
    eax = memoryAGet32(ds, 0x1f1ca8);
    al &= 0x03;
    al += al;
    memoryASet(ds, 0x1f1cbe, al);
    if (memoryAGet(ds, 0x1f1cbf) != 0x00)
        goto loc_1a8d61;
    memoryASet(ds, 0x1f1cba, al);
loc_1a8d61: // 0160:1a8d61
    eax = memoryAGet32(ds, 0x2eebd0);
loc_1a8d66: // 0160:1a8d66
    sync();
    if (memoryAGet32(ds, 0x2eebd0) == eax)
        goto loc_1a8d66;
    if (!(memoryAGet(ds, 0x1f1d34) & 0x01))
        goto loc_1a8d78;
    esp += 4;
    return;
loc_1a8d78: // 0160:1a8d78
    eax = memoryAGet32(ds, 0x1f1c34);
    eax += 0x00005500;
    if (eax < 0x000aff00)
        goto loc_1a8d8e;
    eax -= 0x0000ff00;
loc_1a8d8e: // 0160:1a8d8e
    memoryASet32(ds, 0x1f1c34, eax);
    if (memoryAGet(ds, 0x1f1c44) & 0xff)
        goto loc_1a8e20;
    ebp = memoryAGet32(ds, 0x1f1c38);
    if (!(memoryAGet16(ds, 0x20d867) & 0xffff))
        goto loc_1a8db7;
    ebp >>= 1;
loc_1a8db7: // 0160:1a8db7
    eax = memoryAGet32(ds, 0x1f1ca8);
    ebp >>= 1;
    eax >>= 1;
    ebp -= eax;
    ebp &= 0x0000001f;
    if (!ebp)
        goto loc_1a8de0;
    ebp -= 0x00000010;
    if ((int32_t)ebp >= 0)
        goto loc_1a8dd6;
    ebp += 0x00000010;
    sub_1a9c89();
    goto loc_1a8de0;
loc_1a8dd6: // 0160:1a8dd6
    ebp = -ebp;
    ebp += 0x00000010;
    sub_1a9cdc();
loc_1a8de0: // 0160:1a8de0
    ebp = memoryAGet32(ds, 0x1f1c3c);
    eax = memoryAGet32(ds, 0x1f1cac);
    ebp >>= 1;
    eax >>= 1;
    ebp -= eax;
    if (!(memoryAGet16(ds, 0x20d867) & 0xffff))
        goto loc_1a8e02;
    ebp >>= 1;
loc_1a8e02: // 0160:1a8e02
    ebp &= 0x0000001f;
    if (!ebp)
        goto loc_1a8e20;
    ebp -= 0x00000010;
    if ((int32_t)ebp >= 0)
        goto loc_1a8e16;
    ebp += 0x00000010;
    sub_1a9c1f();
    goto loc_1a8e20;
loc_1a8e16: // 0160:1a8e16
    ebp = -ebp;
    ebp += 0x00000010;
    sub_1a9c54();
loc_1a8e20: // 0160:1a8e20
    if (!(memoryAGet(ds, 0x1f1c40) & 0xff))
        goto loc_1a8e30;
    sub_1a8f63();
    goto loc_1a8e35;
loc_1a8e30: // 0160:1a8e30
    sub_1a8e36();
loc_1a8e35: // 0160:1a8e35
    esp += 4;
    return;
}
void sub_1a8e36() // 0160:1a8e36 +long
{
    esp -= 4;
    eax = (short)memoryAGet16(ds, 0x1f1c38);
    eax = sar32(eax, 0x05);
loc_1a8e40: // 0160:1a8e40
    eax -= memoryAGet32(ds, 0x1f1cb0);
    if ((int32_t)eax >= 0)
        goto loc_1a8e40;
loc_1a8e48: // 0160:1a8e48
    eax += memoryAGet32(ds, 0x1f1cb0);
    if ((int32_t)eax < 0)
        goto loc_1a8e48;
    mul16(memoryAGet16(ds, 0x1f1cb4));
    esi = (short)memoryAGet16(ds, 0x1f1c3c);
    esi = sar32(esi, 0x05);
loc_1a8e61: // 0160:1a8e61
    esi -= memoryAGet32(ds, 0x1f1cb4);
    if ((int32_t)esi >= 0)
        goto loc_1a8e61;
loc_1a8e69: // 0160:1a8e69
    esi += memoryAGet32(ds, 0x1f1cb4);
    if ((int32_t)esi < 0)
        goto loc_1a8e69;
    ebx = memoryAGet32(ds, 0x1f1cb4);
    ebx -= esi;
    memoryASet32(ds, 0x2eeb7c, ebx);
    esi += eax;
    esi += esi;
    esi += memoryAGet32(ds, 0x2eeb94);
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x1f1c34);
    if (!(memoryAGet(ds, 0x1f1c38) & 0x10))
        goto loc_1a8ede;
    eax = memoryAGet32(ds, 0x1f1c3c);
    eax &= 0x0000001f;
    ecx = memoryAGet32(ds, 0x1f1c4c);
    push32(esi);
    push32(edi);
    ebx = 0x00000010;
    edx = memoryAGet32(ds, 0x2eeb7c);
    sub_1aa00c();
    edi = pop32();
    esi = pop32();
    edi += 0x00000004;
    esi += memoryAGet32(ds, 0x1f1cb4);
    esi += memoryAGet32(ds, 0x1f1cb4);
    if (esi < memoryAGet32(ds, 0x2eeba0))
        goto loc_1a8ede;
    esi -= memoryAGet32(ds, 0x2eeba4);
loc_1a8ede: // 0160:1a8ede
    eax = memoryAGet32(ds, 0x1f1c38);
    eax = ~eax;
    eax &= 0x00000010;
    eax += memoryAGet32(ds, 0x1f1c48);
    eax >>= 5;
    memoryASet32(ds, 0x2eeb68, eax);
loc_1a8ef6: // 0160:1a8ef6
    eax = memoryAGet32(ds, 0x1f1c3c);
    eax &= 0x0000001f;
    ecx = memoryAGet32(ds, 0x1f1c4c);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x2eeb7c);
    sub_1a9d2f();
    edi = pop32();
    esi = pop32();
    edi += 0x00000008;
    esi += memoryAGet32(ds, 0x1f1cb4);
    esi += memoryAGet32(ds, 0x1f1cb4);
    if (esi < memoryAGet32(ds, 0x2eeba0))
        goto loc_1a8f30;
    esi -= memoryAGet32(ds, 0x2eeba4);
loc_1a8f30: // 0160:1a8f30
    memoryASet32(ds, 0x2eeb68, memoryAGet32(ds, 0x2eeb68) - 1);
    if (memoryAGet32(ds, 0x2eeb68))
        goto loc_1a8ef6;
    eax = memoryAGet32(ds, 0x1f1c38);
    eax ^= memoryAGet32(ds, 0x1f1c48);
    if (al & 0x10)
        goto loc_1a8f62;
    eax = memoryAGet32(ds, 0x1f1c3c);
    eax &= 0x0000001f;
    ecx = memoryAGet32(ds, 0x1f1c4c);
    ebx = 0;
    edx = memoryAGet32(ds, 0x2eeb7c);
    sub_1aa00c();
loc_1a8f62: // 0160:1a8f62
    esp += 4;
    return;
}
void sub_1a8f63() // 0160:1a8f63 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x1f1c38);
    bx = memoryAGet16(ds, 0x1f1c3c);
    push32(eax);
    push32(ebx);
    ax >>= 1;
    bx >>= 1;
    memoryASet16(ds, 0x1f1c38, ax);
    memoryASet16(ds, 0x1f1c3c, bx);
    sub_1a8f94();
    ebx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x1f1c3c, bx);
    esp += 4;
}
void sub_1a8f94() // 0160:1a8f94 +long
{
    esp -= 4;
    eax = (short)memoryAGet16(ds, 0x1f1c38);
    eax = sar32(eax, 0x04);
loc_1a8f9e: // 0160:1a8f9e
    eax -= memoryAGet32(ds, 0x1f1cb0);
    if ((int32_t)eax >= 0)
        goto loc_1a8f9e;
loc_1a8fa6: // 0160:1a8fa6
    eax += memoryAGet32(ds, 0x1f1cb0);
    if ((int32_t)eax < 0)
        goto loc_1a8fa6;
    mul16(memoryAGet16(ds, 0x1f1cb4));
    esi = (short)memoryAGet16(ds, 0x1f1c3c);
    esi = sar32(esi, 0x04);
loc_1a8fbf: // 0160:1a8fbf
    esi -= memoryAGet32(ds, 0x1f1cb4);
    if ((int32_t)esi >= 0)
        goto loc_1a8fbf;
loc_1a8fc7: // 0160:1a8fc7
    esi += memoryAGet32(ds, 0x1f1cb4);
    if ((int32_t)esi < 0)
        goto loc_1a8fc7;
    ebx = memoryAGet32(ds, 0x1f1cb4);
    ebx -= esi;
    memoryASet32(ds, 0x2eeb7c, ebx);
    esi += eax;
    esi += esi;
    esi += memoryAGet32(ds, 0x2eeb94);
    esi += 0x00000004;
    eax = memoryAGet32(ds, 0x1f1c38);
    eax &= 0x00000010;
    memoryASet32(ds, 0x2eeb74, eax);
    edi = memoryAGet32(ds, 0x1f1c34);
    eax = memoryAGet32(ds, 0x1f1c48);
    eax >>= 4;
    eax++;
    memoryASet32(ds, 0x2eeb68, eax);
loc_1a900b: // 0160:1a900b
    eax = memoryAGet32(ds, 0x1f1c3c);
    eax &= 0x0000001f;
    ecx = memoryAGet32(ds, 0x1f1c4c);
    edx = memoryAGet32(ds, 0x2eeb7c);
    push32(esi);
    push32(edi);
    sub_1aa260();
    edi = pop32();
    esi = pop32();
    memoryASet(ds, 0x2eeb74, memoryAGet(ds, 0x2eeb74) ^ 0x10);
    edi += 0x00000004;
    esi += memoryAGet32(ds, 0x1f1cb4);
    esi += memoryAGet32(ds, 0x1f1cb4);
    if (esi < memoryAGet32(ds, 0x2eeba0))
        goto loc_1a904c;
    esi -= memoryAGet32(ds, 0x2eeba4);
loc_1a904c: // 0160:1a904c
    memoryASet32(ds, 0x2eeb68, memoryAGet32(ds, 0x2eeb68) - 1);
    if (memoryAGet32(ds, 0x2eeb68))
        goto loc_1a900b;
    esp += 4;
}
void sub_1a9055() // 0160:1a9055 +long
{
    esp -= 4;
    ah = al;
    esp += 4;
}
void sub_1a9c1f() // 0160:1a9c1f +long
{
    esp -= 4;
loc_1a9c1f: // 0160:1a9c1f
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00041294;
    dl = 0x08;
loc_1a9c2d: // 0160:1a9c2d
    ebx = memoryAGet32(ds, esi);
    ecx = 0x0000001f;
loc_1a9c34: // 0160:1a9c34
    eax = memoryAGet32(ds, esi + -320);
    memoryASet32(ds, esi, eax);
    esi -= 0x00000140;
    if (--ecx)
        goto loc_1a9c34;
    memoryASet32(ds, esi, ebx);
    esi += 0x000026c4;
    dl--;
    if (dl)
        goto loc_1a9c2d;
    ebp--;
    if (ebp)
        goto loc_1a9c1f;
    esp += 4;
}
void sub_1a9c54() // 0160:1a9c54 +long
{
    esp -= 4;
loc_1a9c54: // 0160:1a9c54
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    dl = 0x08;
loc_1a9c62: // 0160:1a9c62
    ebx = memoryAGet32(ds, esi);
    ecx = 0x0000001f;
loc_1a9c69: // 0160:1a9c69
    eax = memoryAGet32(ds, esi + 320);
    memoryASet32(ds, esi, eax);
    esi += 0x00000140;
    if (--ecx)
        goto loc_1a9c69;
    memoryASet32(ds, esi, ebx);
    esi += 0xffffd944;
    dl--;
    if (dl)
        goto loc_1a9c62;
    ebp--;
    if (ebp)
        goto loc_1a9c54;
    esp += 4;
}
void sub_1a9c89() // 0160:1a9c89 +long
{
    esp -= 4;
loc_1a9c89: // 0160:1a9c89
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    ecx = 0x00000020;
loc_1a9c9a: // 0160:1a9c9a
    eax = memoryAGet32(ds, esi + 12);
    ebx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, esi + 12, ebx);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi + 8, ebx);
    ebx = memoryAGet32(ds, esi);
    memoryASet32(ds, esi + 4, ebx);
    ebx = memoryAGet32(ds, esi + 28);
    edx = memoryAGet32(ds, esi + 24);
    memoryASet32(ds, esi + 28, edx);
    edx = memoryAGet32(ds, esi + 20);
    memoryASet32(ds, esi + 24, edx);
    edx = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, esi + 20, edx);
    eax = rol32(eax, 0x08);
    ebx = rol32(ebx, 0x08);
    tl = bl; bl = al; al = tl;
    memoryASet32(ds, esi, eax);
    memoryASet32(ds, esi + 16, ebx);
    esi += 0x00000140;
    if (--ecx)
        goto loc_1a9c9a;
    ebp--;
    if (ebp)
        goto loc_1a9c89;
    esp += 4;
}
void sub_1a9cdc() // 0160:1a9cdc +long
{
    esp -= 4;
loc_1a9cdc: // 0160:1a9cdc
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    ecx = 0x00000020;
loc_1a9ced: // 0160:1a9ced
    eax = memoryAGet32(ds, esi);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi, ebx);
    ebx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, esi + 4, ebx);
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, esi + 8, ebx);
    ebx = memoryAGet32(ds, esi + 16);
    edx = memoryAGet32(ds, esi + 20);
    memoryASet32(ds, esi + 16, edx);
    edx = memoryAGet32(ds, esi + 24);
    memoryASet32(ds, esi + 20, edx);
    edx = memoryAGet32(ds, esi + 28);
    memoryASet32(ds, esi + 24, edx);
    tl = bl; bl = al; al = tl;
    eax = ror32(eax, 0x08);
    ebx = ror32(ebx, 0x08);
    memoryASet32(ds, esi + 12, eax);
    memoryASet32(ds, esi + 28, ebx);
    esi += 0x00000140;
    if (--ecx)
        goto loc_1a9ced;
    ebp--;
    if (ebp)
        goto loc_1a9cdc;
    esp += 4;
}
void sub_1a9d2f() // 0160:1a9d2f +long
{
    esp -= 4;
    memoryASet32(ds, 0x2eeb78, edx);
    edx = 0x00000020;
    edx -= eax;
    bl = 0x0a;
    mul8(bl);
    ebp = eax;
loc_1a9d42: // 0160:1a9d42
    eax = 0;
    ax = memoryAGet16(ds, esi);
    bl = memoryAGet(ds, eax + 3189996);
    memoryASet(ds, 0x2eeb84, bl);
    if (bl == 0x02)
        goto loc_1a9d8d;
    ebx = eax;
    ebx <<= 7;
    ebx += 0x00000020;
    ebx -= edx;
    ebx += 0x002eecec;
    memoryASet32(ds, 0x2eeb58, ebx);
    ebx = 0x0000000a;
    div8(bl);
    eax >>= 8;
    bx = memoryAGet16(ds, esi);
    ebx -= eax;
    ebx <<= 5;
    ebx += eax;
    ebx += ebp;
    ebx <<= 5;
    ebx += memoryAGet32(ds, 0x2eeb8c);
loc_1a9d8d: // 0160:1a9d8d
    esi += 0x00000002;
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a9da4;
    esi -= memoryAGet32(ds, 0x1f1cb4);
    esi -= memoryAGet32(ds, 0x1f1cb4);
loc_1a9da4: // 0160:1a9da4
    ebx += 0x00000314;
    memoryASet32(ds, 0x2eeb60, esi);
    esi = 0x00000020;
    esi -= edx;
    esi <<= 6;
    eax = esi;
    esi <<= 2;
    esi += eax;
    esi += memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    flags.carry = ecx < edx;
    ecx -= edx;
    if (!flags.carry)
        goto loc_1a9dd5;
    edx += ecx;
    ecx = 0;
loc_1a9dd5: // 0160:1a9dd5
    memoryASet32(ds, 0x2eeb6c, edi);
    memoryASet32(ds, 0x2eeb70, edx);
    ax = 0x0102;
loc_1a9de5: // 0160:1a9de5
    memoryASet32(ds, 0x2eeb5c, esi);
    memoryASet32(ds, 0x2eeb64, ebx);
    memoryASet32(ds, 0x2eeb54, eax);
    dx = 0x03c4;
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x2eeb58);
    ebp = memoryAGet32(ds, 0x2eeb70);
    if (memoryAGet(ds, 0x2eeb84) == 0x01)
        goto loc_1a9f02;
    if (memoryAGet(ds, 0x2eeb84) == 0x02)
        goto loc_1a9f87;
loc_1a9e22: // 0160:1a9e22
    al = memoryAGet(ds, edx);
    al++;
    if (!al)
        goto loc_1a9eb9;
    al--;
    if (!al)
        goto loc_1a9edc;
    eax &= 0x0000000f;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c68);
    eax &= memoryAGet32(ds, esi);
    eax |= memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, edx);
    eax &= 0x000000f0;
    eax >>= 2;
    eax = memoryAGet32(ds, eax + 2038888);
    eax &= memoryAGet32(ds, esi + 16);
    eax |= memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, edi + 4, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1a9e22;
loc_1a9e70: // 0160:1a9e70
    eax = memoryAGet32(ds, 0x2eeb54);
    ah += ah;
    if (ah >= 0x10)
        goto loc_1a9ea5;
    memoryASet32(ds, 0x2eeb54, eax);
    esi = memoryAGet32(ds, 0x2eeb5c);
    esi += 0x00000004;
    ebx = memoryAGet32(ds, 0x2eeb64);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb58, memoryAGet32(ds, 0x2eeb58) + 0x00000020);
    goto loc_1a9de5;
loc_1a9ea5: // 0160:1a9ea5
    esi = memoryAGet32(ds, 0x2eeb60);
    edx = 0x00000020;
    if (ecx)
        goto loc_1a9d42;
    esp += 4;
    return;
loc_1a9eb9: // 0160:1a9eb9
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, edi + 4, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1a9e22;
    goto loc_1a9e70;
loc_1a9edc: // 0160:1a9edc
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, edi + 4, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1a9e22;
    goto loc_1a9e70;
loc_1a9f02: // 0160:1a9f02
    if (!(ebp & 0x00000003))
        goto loc_1a9f25;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, edi + 4, eax);
    ebx += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1a9f02;
    goto loc_1a9e70;
loc_1a9f25: // 0160:1a9f25
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 16);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, ebx + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, ebx + 336);
    memoryASet32(ds, edi + 88, eax);
    eax = memoryAGet32(ds, ebx + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, ebx + 656);
    memoryASet32(ds, edi + 172, eax);
    eax = memoryAGet32(ds, ebx + 960);
    memoryASet32(ds, edi + 252, eax);
    eax = memoryAGet32(ds, ebx + 976);
    memoryASet32(ds, edi + 256, eax);
    ebx += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1a9f25;
    goto loc_1a9e70;
loc_1a9f87: // 0160:1a9f87
    if (!(ebp & 0x00000003))
        goto loc_1a9faa;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, edi + 4, eax);
    esi += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1a9f87;
    goto loc_1a9e70;
loc_1a9faa: // 0160:1a9faa
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 16);
    memoryASet32(ds, edi + 4, eax);
    eax = memoryAGet32(ds, esi + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 336);
    memoryASet32(ds, edi + 88, eax);
    eax = memoryAGet32(ds, esi + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 656);
    memoryASet32(ds, edi + 172, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 252, eax);
    eax = memoryAGet32(ds, esi + 976);
    memoryASet32(ds, edi + 256, eax);
    esi += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1a9faa;
    goto loc_1a9e70;
}
void sub_1aa00c() // 0160:1aa00c +long
{
    esp -= 4;
    memoryASet32(ds, 0x2eeb78, edx);
    memoryASet32(ds, 0x2eeb74, ebx);
    edx = 0x00000020;
    edx -= eax;
    bl = 0x0a;
    mul8(bl);
    ebp = eax;
loc_1aa025: // 0160:1aa025
    eax = 0;
    ax = memoryAGet16(ds, esi);
    bl = memoryAGet(ds, eax + 3189996);
    memoryASet(ds, 0x2eeb84, bl);
    if (bl == 0x02)
        goto loc_1aa076;
    ebx = eax;
    ebx <<= 7;
    ebx += 0x00000020;
    ebx -= edx;
    ebx += 0x002eecec;
    memoryASet32(ds, 0x2eeb58, ebx);
    ebx = 0x0000000a;
    div8(bl);
    eax >>= 8;
    bx = memoryAGet16(ds, esi);
    ebx -= eax;
    ebx <<= 5;
    ebx += eax;
    ebx += ebp;
    ebx <<= 5;
    ebx += memoryAGet32(ds, 0x2eeb8c);
    ebx += memoryAGet32(ds, 0x2eeb74);
loc_1aa076: // 0160:1aa076
    esi += 0x00000002;
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1aa08d;
    esi -= memoryAGet32(ds, 0x1f1cb4);
    esi -= memoryAGet32(ds, 0x1f1cb4);
loc_1aa08d: // 0160:1aa08d
    ebx += 0x00000314;
    memoryASet32(ds, 0x2eeb60, esi);
    esi = 0x00000020;
    esi -= edx;
    esi <<= 6;
    eax = esi;
    esi <<= 2;
    esi += eax;
    esi += memoryAGet32(ds, 0x2eeb74);
    esi += memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    flags.carry = ecx < edx;
    ecx -= edx;
    if (!flags.carry)
        goto loc_1aa0c4;
    edx += ecx;
    ecx = 0;
loc_1aa0c4: // 0160:1aa0c4
    memoryASet32(ds, 0x2eeb6c, edi);
    memoryASet32(ds, 0x2eeb70, edx);
    ax = 0x0102;
loc_1aa0d4: // 0160:1aa0d4
    memoryASet32(ds, 0x2eeb5c, esi);
    memoryASet32(ds, 0x2eeb64, ebx);
    memoryASet32(ds, 0x2eeb54, eax);
    dx = 0x03c4;
    out16(dx, ax);
    ebp = memoryAGet32(ds, 0x2eeb70);
    edx = memoryAGet32(ds, 0x2eeb58);
    if (memoryAGet(ds, 0x2eeb84) == 0x01)
        goto loc_1aa1b3;
    if (memoryAGet(ds, 0x2eeb84) == 0x02)
        goto loc_1aa208;
    if (!(memoryAGet(ds, 0x2eeb74) & 0x10))
        goto loc_1aa145;
loc_1aa11a: // 0160:1aa11a
    al = memoryAGet(ds, edx);
    eax &= 0x000000f0;
    eax >>= 2;
    eax = memoryAGet32(ds, eax + 2038888);
    eax &= memoryAGet32(ds, esi);
    eax |= memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1aa11a;
    goto loc_1aa16a;
loc_1aa145: // 0160:1aa145
    al = memoryAGet(ds, edx);
    eax &= 0x0000000f;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c68);
    eax &= memoryAGet32(ds, esi);
    eax |= memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1aa145;
loc_1aa16a: // 0160:1aa16a
    eax = memoryAGet32(ds, 0x2eeb54);
    ah += ah;
    if (ah >= 0x10)
        goto loc_1aa19f;
    memoryASet32(ds, 0x2eeb54, eax);
    esi = memoryAGet32(ds, 0x2eeb5c);
    esi += 0x00000004;
    ebx = memoryAGet32(ds, 0x2eeb64);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb58, memoryAGet32(ds, 0x2eeb58) + 0x00000020);
    goto loc_1aa0d4;
loc_1aa19f: // 0160:1aa19f
    esi = memoryAGet32(ds, 0x2eeb60);
    edx = 0x00000020;
    if (ecx)
        goto loc_1aa025;
    esp += 4;
    return;
loc_1aa1b3: // 0160:1aa1b3
    if (!(ebp & 0x00000003))
        goto loc_1aa1cd;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    ebx += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1aa1b3;
    goto loc_1aa16a;
loc_1aa1cd: // 0160:1aa1cd
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, ebx + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, ebx + 960);
    memoryASet32(ds, edi + 252, eax);
    ebx += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1aa1cd;
    goto loc_1aa16a;
loc_1aa208: // 0160:1aa208
    if (!(ebp & 0x00000003))
        goto loc_1aa225;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    esi += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1aa208;
    goto loc_1aa16a;
loc_1aa225: // 0160:1aa225
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 252, eax);
    esi += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1aa225;
    goto loc_1aa16a;
}
void sub_1aa260() // 0160:1aa260 +long
{
    esp -= 4;
    memoryASet32(ds, 0x2eeb78, edx);
    memoryASet32(ds, 0x2eeb80, eax);
    al &= 0x0f;
    edx = 0x00000010;
    edx -= eax;
    bl = 0x0a;
    mul8(bl);
    ebp = eax;
loc_1aa27a: // 0160:1aa27a
    eax = 0;
    ax = memoryAGet16(ds, esi);
    bl = memoryAGet(ds, eax + 3189996);
    memoryASet(ds, 0x2eeb84, bl);
    if (bl == 0x02)
        goto loc_1aa2c5;
    ebx = eax;
    ebx <<= 7;
    ebx += 0x00000010;
    ebx -= edx;
    ebx += 0x002eecec;
    memoryASet32(ds, 0x2eeb58, ebx);
    ebx = 0x0000000a;
    div8(bl);
    eax >>= 8;
    bx = memoryAGet16(ds, esi);
    ebx -= eax;
    ebx <<= 5;
    ebx += eax;
    ebx += ebp;
    ebx <<= 5;
    ebx += memoryAGet32(ds, 0x2eeb8c);
loc_1aa2c5: // 0160:1aa2c5
    esi += 0x00000002;
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1aa2dc;
    esi -= memoryAGet32(ds, 0x1f1cb4);
    esi -= memoryAGet32(ds, 0x1f1cb4);
loc_1aa2dc: // 0160:1aa2dc
    ebx += 0x00000314;
    memoryASet32(ds, 0x2eeb60, esi);
    esi = memoryAGet32(ds, 0x2eeb80);
    eax = 0x00000010;
    eax &= esi;
    al ^= 0x10;
    memoryASet32(ds, 0x2eeb80, eax);
    esi <<= 6;
    eax = esi;
    esi <<= 2;
    esi += eax;
    esi += memoryAGet32(ds, 0x2eeb74);
    esi += memoryAGet32(ds, 0x2eeb8c);
    esi += 0x0003ebd4;
    flags.carry = ecx < edx;
    ecx -= edx;
    if (!flags.carry)
        goto loc_1aa320;
    edx += ecx;
    ecx = 0;
loc_1aa320: // 0160:1aa320
    memoryASet32(ds, 0x2eeb6c, edi);
    memoryASet32(ds, 0x2eeb70, edx);
    ax = 0x0102;
loc_1aa330: // 0160:1aa330
    memoryASet32(ds, 0x2eeb5c, esi);
    memoryASet32(ds, 0x2eeb64, ebx);
    memoryASet32(ds, 0x2eeb54, eax);
    dx = 0x03c4;
    out16(dx, ax);
    ebp = memoryAGet32(ds, 0x2eeb70);
    edx = memoryAGet32(ds, 0x2eeb58);
    if (memoryAGet(ds, 0x2eeb84) == 0x01)
        goto loc_1aa3d7;
    if (memoryAGet(ds, 0x2eeb84) == 0x02)
        goto loc_1aa42c;
loc_1aa369: // 0160:1aa369
    al = memoryAGet(ds, edx);
    eax &= 0x0000000f;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c68);
    eax &= memoryAGet32(ds, esi);
    eax |= memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    edx++;
    edi += 0x00000054;
    esi += 0x00000140;
    ebx += 0x00000140;
    ebp--;
    if (ebp)
        goto loc_1aa369;
loc_1aa38e: // 0160:1aa38e
    eax = memoryAGet32(ds, 0x2eeb54);
    ah += ah;
    if (ah >= 0x10)
        goto loc_1aa3c3;
    memoryASet32(ds, 0x2eeb54, eax);
    esi = memoryAGet32(ds, 0x2eeb5c);
    esi += 0x00000004;
    ebx = memoryAGet32(ds, 0x2eeb64);
    ebx += 0x00000004;
    edi = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb58, memoryAGet32(ds, 0x2eeb58) + 0x00000020);
    goto loc_1aa330;
loc_1aa3c3: // 0160:1aa3c3
    esi = memoryAGet32(ds, 0x2eeb60);
    edx = 0x00000010;
    if (ecx)
        goto loc_1aa27a;
    esp += 4;
    return;
loc_1aa3d7: // 0160:1aa3d7
    if (!(ebp & 0x00000003))
        goto loc_1aa3f1;
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    ebx += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1aa3d7;
    goto loc_1aa38e;
loc_1aa3f1: // 0160:1aa3f1
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, ebx + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, ebx + 960);
    memoryASet32(ds, edi + 252, eax);
    ebx += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1aa3f1;
    goto loc_1aa38e;
loc_1aa42c: // 0160:1aa42c
    if (!(ebp & 0x00000003))
        goto loc_1aa449;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    esi += 0x00000140;
    edi += 0x00000054;
    ebp--;
    if (ebp)
        goto loc_1aa42c;
    goto loc_1aa38e;
loc_1aa449: // 0160:1aa449
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 320);
    memoryASet32(ds, edi + 84, eax);
    eax = memoryAGet32(ds, esi + 640);
    memoryASet32(ds, edi + 168, eax);
    eax = memoryAGet32(ds, esi + 960);
    memoryASet32(ds, edi + 252, eax);
    esi += 0x00000500;
    edi += 0x00000150;
    ebp -= 0x00000004;
    if (ebp)
        goto loc_1aa449;
    goto loc_1aa38e;
}
void sub_1aa484() // 0160:1aa484 +long
{
    esp -= 4;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    push32(eax);
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    edx <<= 16;
    dx = ax;
    ebx = pop32();
    push32(ebx);
    push32(edx);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    eax = 0x0023f52c;
    ecx = pop32();
    ebx = pop32();
    edx = eax;
    push32(edx);
    push32(ecx);
    push32(ebx);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ebx = pop32();
    eax = 0x00003e00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ecx = pop32();
    edx = pop32();
    esp += 4;
    return;
    // gap 123647 bytes
loc_1c87e8: // 0160:1c87e8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -4);
    push32(eax);
    eax = 0x0020aaa8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000008;
    sub_1e3645();
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1aa4e9() // 0160:1aa4e9 +long
{
    esp -= 4;
    memoryASet32(ds, 0x20ce9d, eax);
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    push32(eax);
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    edx <<= 16;
    dx = ax;
    ebx = pop32();
    push32(ebx);
    push32(edx);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    eax = memoryAGet32(ds, 0x20ce9d);
    ecx = pop32();
    ebx = pop32();
    edx = eax;
    push32(edx);
    push32(ecx);
    push32(ebx);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ebx = pop32();
    eax = 0x00003e00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c87e8;
    ecx = pop32();
    edx = pop32();
    esp += 4;
    return;
    // gap 123541 bytes
loc_1c87e8: // 0160:1c87e8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -4);
    push32(eax);
    eax = 0x0020aaa8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000008;
    sub_1e3645();
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1aa553() // 0160:1aa553 +long
{
    esp -= 4;
    push(ax);
    esi = 0x0023f52c;
    edx = 0;
    ax = memoryAGet16(ds, esi + 8);
    ax += 0x0001;
    bx = memoryAGet16(ds, esi + 10);
    bx += 0x0001;
    mul16(bx);
    edx <<= 16;
    eax &= 0x0000ffff;
    eax |= edx;
    ecx = eax;
    esi = 0x0023f5ac;
loc_1aa580: // 0160:1aa580
    al = memoryAGet(ds, esi);
    if (al < 0xc0)
        goto loc_1aa598;
    al -= 0xc0;
    esi++;
    bl = memoryAGet(ds, esi);
loc_1aa58b: // 0160:1aa58b
    memoryASet(ds, edi, bl);
    edi++;
    ecx--;
    if (!ecx)
        goto loc_1aa59f;
    al--;
    if (al)
        goto loc_1aa58b;
    esi++;
    goto loc_1aa580;
loc_1aa598: // 0160:1aa598
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1aa580;
    esi--;
loc_1aa59f: // 0160:1aa59f
    esi++;
    ax = pop();
    if (!ax)
        goto loc_1aa5d2;
    esi++;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000014;
    ecx = 0x00000100;
loc_1aa5ba: // 0160:1aa5ba
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi + 2, al);
    al = memoryAGet(ds, esi + 1);
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1aa5ba;
loc_1aa5d2: // 0160:1aa5d2
    esp += 4;
    return;
}
void sub_1aa5d3() // 0160:1aa5d3 +long
{
    esp -= 4;
    interrupt(0x10);
    esp += 4;
}
void sub_1aa5d6() // 0160:1aa5d6 +long
{
    esp -= 4;
    push32(esi);
    push32(edx);
    push32(ecx);
    push32(edi);
    esi = eax;
    dx = 0x03c8;
    al = 0;
    out8(dx, al);
    dx++;
    ecx = 0x00000100;
    edi = 0x0020c88f;
loc_1aa5ef: // 0160:1aa5ef
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    edi++;
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi, al);
    edi++;
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi, al);
    edi++;
    esi += 0x00000003;
    if (--ecx)
        goto loc_1aa5ef;
    memoryASet(ds, 0x20c88f, 0x00);
    memoryASet(ds, 0x20c890, 0x00);
    memoryASet(ds, 0x20c891, 0x00);
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1aa645;
    esi = 0x001ecaa8;
    edi = 0x0020ca0f;
    ecx = 0x00000030;
loc_1aa63d: // 0160:1aa63d
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1aa63d;
loc_1aa645: // 0160:1aa645
    edi = pop32();
    ecx = pop32();
    edx = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1aa64a() // 0160:1aa64a +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 120019 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1aa9d7() // 0160:1aa9d7 +long
{
    esp -= 4;
    edx = 0x001ed0a1;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0023f52c;
    ecx = 0x00002ed4;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (eax != 0x00002ed4)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1c1e87;
    // gap 95298 bytes
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1aafe3() // 0160:1aafe3 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20e8e1);
    sub_1ab386();
    ax = memoryAGet16(ds, 0x20e8e7);
    sub_1ab386();
    if ((short)memoryAGet16(ds, 0x20e90d) < (short)0x0003)
        goto loc_1ab023;
    ax = memoryAGet16(ds, 0x20e8ed);
    sub_1ab386();
    if (memoryAGet16(ds, 0x20e90d) != 0x0004)
        goto loc_1ab023;
    ax = memoryAGet16(ds, 0x20e8f3);
    sub_1ab386();
loc_1ab023: // 0160:1ab023
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1ab0d4;
    ax = memoryAGet16(ds, 0x20d7b7);
    if (ax == 0x0001)
        goto loc_1ab089;
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e843, ax);
    bx = 0x001e;
    sub_1ab3d2();
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20e845, ax);
    bx = 0x001e;
    sub_1ab3d2();
    di = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e847, di);
    di = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20e849, di);
    goto loc_1ab385;
loc_1ab089: // 0160:1ab089
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e843, ax);
    bx = 0x001e;
    sub_1ab3d2();
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20e845, ax);
    bx = 0x001e;
    sub_1ab3d2();
    di = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e847, di);
    di = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20e849, di);
    goto loc_1ab385;
loc_1ab0d4: // 0160:1ab0d4
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0002)
        goto loc_1ab33a;
    if (ax == 0x0003)
        goto loc_1ab2af;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1ab183;
    ax = memoryAGet16(ds, 0x20ce93);
    if ((short)ax >= (short)0x0004)
        goto loc_1ab146;
    di = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e843, di);
    di = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20e845, di);
    di = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e847, di);
    di = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20e849, di);
    goto loc_1ab385;
loc_1ab146: // 0160:1ab146
    di = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e843, di);
    di = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20e845, di);
    di = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e847, di);
    di = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20e849, di);
    goto loc_1ab385;
loc_1ab183: // 0160:1ab183
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb5, ax);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb7, ax);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20ceb9, ax);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20cebb, ax);
    bx = memoryAGet16(ds, 0x20ce95);
    cx = memoryAGet16(ds, 0x20ce97);
    dx = memoryAGet16(ds, 0x20ce99);
    bp = memoryAGet16(ds, 0x20ce9b);
loc_1ab1cf: // 0160:1ab1cf
    if ((short)cx > (short)bx)
        goto loc_1ab228;
    if ((short)dx > (short)cx)
        goto loc_1ab203;
    if ((short)bp <= (short)dx)
        goto loc_1ab24d;
    ax = dx;
    dx = bp;
    bp = ax;
    ax = memoryAGet16(ds, 0x20ceb9);
    di = memoryAGet16(ds, 0x20cebb);
    memoryASet16(ds, 0x20ceb9, di);
    memoryASet16(ds, 0x20cebb, ax);
    goto loc_1ab1cf;
loc_1ab203: // 0160:1ab203
    ax = cx;
    cx = dx;
    dx = ax;
    ax = memoryAGet16(ds, 0x20ceb7);
    di = memoryAGet16(ds, 0x20ceb9);
    memoryASet16(ds, 0x20ceb7, di);
    memoryASet16(ds, 0x20ceb9, ax);
    goto loc_1ab1cf;
loc_1ab228: // 0160:1ab228
    ax = bx;
    bx = cx;
    cx = ax;
    ax = memoryAGet16(ds, 0x20ceb5);
    di = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20ceb5, di);
    memoryASet16(ds, 0x20ceb7, ax);
    goto loc_1ab1cf;
loc_1ab24d: // 0160:1ab24d
    ax = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20e843, ax);
    ax = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20e845, ax);
    ax = memoryAGet16(ds, 0x20ceb9);
    memoryASet16(ds, 0x20e847, ax);
    ax = memoryAGet16(ds, 0x20cebb);
    memoryASet16(ds, 0x20e849, ax);
    ax = memoryAGet16(ds, 0x20ceb5);
    bx = 0x001e;
    sub_1ab3d2();
    ax = memoryAGet16(ds, 0x20ceb7);
    bx = 0x0014;
    sub_1ab3d2();
    ax = memoryAGet16(ds, 0x20ceb9);
    bx = 0x000a;
    sub_1ab3d2();
    goto loc_1ab385;
loc_1ab2af: // 0160:1ab2af
    bp = memoryAGet16(ds, 0x20e8e1);
    si = memoryAGet16(ds, 0x20e8e7);
    di = memoryAGet16(ds, 0x20e8ed);
    bx = memoryAGet16(ds, 0x20ce95);
    cx = memoryAGet16(ds, 0x20ce97);
    dx = memoryAGet16(ds, 0x20ce99);
loc_1ab2d9: // 0160:1ab2d9
    if ((short)cx > (short)bx)
        goto loc_1ab2f7;
    if ((short)dx <= (short)cx)
        goto loc_1ab30b;
    ax = cx;
    cx = dx;
    dx = ax;
    ax = si;
    si = di;
    di = ax;
    goto loc_1ab2d9;
loc_1ab2f7: // 0160:1ab2f7
    ax = bx;
    bx = cx;
    cx = ax;
    ax = bp;
    bp = si;
    si = ax;
    goto loc_1ab2d9;
loc_1ab30b: // 0160:1ab30b
    memoryASet16(ds, 0x20e843, di);
    memoryASet16(ds, 0x20e845, si);
    memoryASet16(ds, 0x20e847, bp);
    ax = di;
    bx = 0x001e;
    sub_1ab3d2();
    ax = si;
    bx = 0x000f;
    sub_1ab3d2();
    goto loc_1ab385;
loc_1ab33a: // 0160:1ab33a
    if (memoryAGet16(ds, 0x20d7b7) == 0x0001)
        goto loc_1ab35e;
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e843, ax);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e845, ax);
    goto loc_1ab376;
loc_1ab35e: // 0160:1ab35e
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e843, ax);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e845, ax);
loc_1ab376: // 0160:1ab376
    ax = memoryAGet16(ds, 0x20e843);
    bx = 0x001e;
    sub_1ab3d2();
loc_1ab385: // 0160:1ab385
    esp += 4;
    return;
}
void sub_1ab386() // 0160:1ab386 +long
{
    esp -= 4;
    esi = 0x002247ae;
    ax <<= 1;
    ax <<= 1;
    cx = ax;
    ax <<= 1;
    ax += cx;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax + 2);
    if (cx != 0x00ff)
        goto loc_1ab3c3;
    cx = memoryAGet16(ds, esi + eax);
    if (cx != 0x00ff)
        goto loc_1ab3c3;
    memoryASet16(ds, esi + eax, 0x0000);
    memoryASet16(ds, esi + eax + 2, 0x0000);
loc_1ab3c3: // 0160:1ab3c3
    if (memoryAGet16(ds, esi + eax + 2) == 0x0063)
        goto loc_1ab3d1;
    memoryASet16(ds, esi + eax + 2, memoryAGet16(ds, esi + eax + 2) + 0x0001);
loc_1ab3d1: // 0160:1ab3d1
    esp += 4;
    return;
}
void sub_1ab3d2() // 0160:1ab3d2 +long
{
    esp -= 4;
    push32(esi);
    esi = 0x002247ae;
    ax <<= 1;
    ax <<= 1;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + bx);
    esi = pop32();
    esp += 4;
}
void sub_1abb6f() // 0160:1abb6f +long
{
    esp -= 4;
    esi = 0x001ec0bc;
    memoryASet16(ds, 0x20ec9d, 0x0000);
loc_1abb7d: // 0160:1abb7d
    ax = memoryAGet16(ds, 0x20ec8f);
    bx = 0;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, bx);
    push32(esi);
    memoryASet16(ds, 0x20eca9, 0x0001);
    sub_1b8253();
    esi = pop32();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1bb88b;
    memoryASet16(ds, 0x20ec9d, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1abbd2;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1abc10;
loc_1abbd2: // 0160:1abbd2
    ax = memoryAGet16(ds, 0x20ecab);
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + ax);
    if (!!(memoryAGet16(ds, 0x20ec8f) & 0xffff & 0x8000))
        goto loc_1abc02;
    if (memoryAGet16(ds, 0x20ec8f) != 0x001b)
        goto loc_1abb7d;
    memoryASet16(ds, 0x20ec8f, 0x0000);
    goto loc_1abb7d;
loc_1abc02: // 0160:1abc02
    memoryASet16(ds, 0x20ec8f, 0x001a);
    goto loc_1abb7d;
loc_1abc10: // 0160:1abc10
    esp += 4;
    return;
    // gap 64634 bytes
loc_1bb88b: // 0160:1bb88b
    esp += 4;
    return;
}
void sub_1abc11() // 0160:1abc11 +long
{
    esp -= 4;
    sub_1abc93();
    memoryASet16(ds, 0x2231d0, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x224644, 0x0000);
    if (memoryAGet16(ds, 0x20ee5b) == 0x0001)
        goto loc_1abc92;
    eax = 0x000000ff;
    if (memoryAGet32(ds, 0x30b13c) == 0x00000001)
        goto loc_1abc6e;
    eax = 0x000000a0;
    if (memoryAGet32(ds, 0x30b13c) == 0x00000002)
        goto loc_1abc6e;
    eax = 0x00000050;
loc_1abc6e: // 0160:1abc6e
    memoryASet32(ds, 0x30b144, eax);
    push32(eax);
loc_1abc74: // 0160:1abc74
    sub_1ad600();
    sub_1c86d0();
    memoryASet32(ds, 0x30b144, memoryAGet32(ds, 0x30b144) - 0x00000005);
    if ((int32_t)memoryAGet32(ds, 0x30b144) >= 0)
        goto loc_1abc74;
    eax = pop32();
    memoryASet32(ds, 0x30b144, eax);
    goto loc_1c8704;
loc_1abc92: // 0160:1abc92
    esp += 4;
    return;
    // gap 117361 bytes
loc_1c8704: // 0160:1c8704
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8724;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c8726;
loc_1c8724: // 0160:1c8724
    goto loc_1c872b;
loc_1c8726: // 0160:1c8726
    sub_1e0d80();
loc_1c872b: // 0160:1c872b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1abc93() // 0160:1abc93 +long
{
    esp -= 4;
    sub_1b4eda();
    sub_1b0063();
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1abcd5;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1abcd5;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1abcd5;
loc_1abcbe: // 0160:1abcbe
    eax = memoryAGet32(ds, 0x2eebd0);
    eax -= memoryAGet32(ds, 0x20ee7b);
    if ((int32_t)eax < (int32_t)0x0000008c)
        goto loc_1abcbe;
    sub_1c79ac();
loc_1abcd5: // 0160:1abcd5
    sub_1ac7de();
    if (memoryAGet16(ds, 0x20ee5b) == 0x0001)
        goto loc_1abd39;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1abd39;
    ax = memoryAGet16(ds, 0x20d7b9);
loc_1abcf5: // 0160:1abcf5
    if ((short)ax < (short)0x0005)
        goto loc_1abd01;
    ax -= 0x0005;
    goto loc_1abcf5;
loc_1abd01: // 0160:1abd01
    if (!ax)
        goto loc_1abd34;
    if (ax == 0x0001)
        goto loc_1abd2d;
    if (ax == 0x0002)
        goto loc_1abd26;
    if (ax == 0x0003)
        goto loc_1abd1f;
    sub_1c8664();
    goto loc_1abd39;
loc_1abd1f: // 0160:1abd1f
    sub_1c85f8();
    goto loc_1abd39;
loc_1abd26: // 0160:1abd26
    sub_1c858c();
    goto loc_1abd39;
loc_1abd2d: // 0160:1abd2d
    sub_1c8520();
    goto loc_1abd39;
loc_1abd34: // 0160:1abd34
    sub_1c84b4();
loc_1abd39: // 0160:1abd39
    if (memoryAGet16(ds, 0x20ee5b) != 0x0000)
        goto loc_1abd5e;
    if ((short)memoryAGet16(ds, 0x20ee77) >= (short)0x0003)
        goto loc_1abd59;
    memoryASet32(ds, 0x2246cc, 0x00000001);
    goto loc_1abd5e;
loc_1abd59: // 0160:1abd59
    sub_1b4f0e();
loc_1abd5e: // 0160:1abd5e
    ax = memoryAGet16(ds, 0x20ee4f);
    memoryASet16(ds, 0x20ee51, ax);
    push32(eax);
    sub_1a8d10();
    memoryASet32(ds, 0x20c80c, 0x00000000);
    sub_1ad031();
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    sub_1b1ca2();
    eax = pop32();
    memoryASet16(ds, 0x20ee4f, ax);
    sub_1abe5b();
    if (!ax)
        goto loc_1abda6;
    eax = pop32();
    goto loc_1abe5a;
loc_1abda6: // 0160:1abda6
    sub_1a8c90();
    eax = pop32();
loc_1abdac: // 0160:1abdac
    bx = memoryAGet16(ds, 0x20ee4f);
    bx -= ax;
    if (!bx)
        goto loc_1abdf5;
    bx -= 0x0001;
    if (!bx)
        goto loc_1abdf5;
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    memoryASet16(ds, 0x20ee59, 0x0001);
    ecx = 0;
    cx = bx;
loc_1abdd9: // 0160:1abdd9
    push32(ecx);
    sub_1abe5b();
    if (!ax)
        goto loc_1abdef;
    ecx = pop32();
    eax = pop32();
    goto loc_1abe5a;
    // gap 3 bytes
loc_1abdef: // 0160:1abdef
    ecx = pop32();
    if (--ecx)
        goto loc_1abdd9;
    eax = pop32();
    goto loc_1abdac;
loc_1abdf5: // 0160:1abdf5
    ax = memoryAGet16(ds, 0x20ee4f);
    ax -= memoryAGet16(ds, 0x20ee51);
    memoryASet16(ds, 0x20ee57, ax);
    memoryASet16(ds, 0x20ee59, 0x0000);
    if (memoryAGet32(ds, 0x2246cc) == 0x00000000)
        goto loc_1abe4c;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1abe4c;
    memoryASet32(ds, 0x2246cc, memoryAGet32(ds, 0x2246cc) + 1);
    if (memoryAGet32(ds, 0x2246cc) != 0x00000008)
        goto loc_1abe4c;
    memoryASet32(ds, 0x2246cc, 0x00000001);
    sub_1cea28();
    memoryASet32(ds, 0x2246cc, 0x00000000);
loc_1abe4c: // 0160:1abe4c
    if (memoryAGet16(ds, 0x20ee5b) != 0x0001)
        goto loc_1abd5e;
loc_1abe5a: // 0160:1abe5a
    esp += 4;
    return;
}
void sub_1abd5e() // 0160:1abd5e +long
{
    esp -= 4;
loc_1abd5e: // 0160:1abd5e
    ax = memoryAGet16(ds, 0x20ee4f);
    memoryASet16(ds, 0x20ee51, ax);
    push32(eax);
    sub_1a8d10();
    memoryASet32(ds, 0x20c80c, 0x00000000);
    sub_1ad031();
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    sub_1b1ca2();
    eax = pop32();
    memoryASet16(ds, 0x20ee4f, ax);
    sub_1abe5b();
    if (!ax)
        goto loc_1abda6;
    eax = pop32();
    goto loc_1abe5a;
loc_1abda6: // 0160:1abda6
    sub_1a8c90();
    eax = pop32();
loc_1abdac: // 0160:1abdac
    bx = memoryAGet16(ds, 0x20ee4f);
    bx -= ax;
    if (!bx)
        goto loc_1abdf5;
    bx -= 0x0001;
    if (!bx)
        goto loc_1abdf5;
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    memoryASet16(ds, 0x20ee59, 0x0001);
    ecx = 0;
    cx = bx;
loc_1abdd9: // 0160:1abdd9
    push32(ecx);
    sub_1abe5b();
    if (!ax)
        goto loc_1abdef;
    ecx = pop32();
    eax = pop32();
    goto loc_1abe5a;
    // gap 3 bytes
loc_1abdef: // 0160:1abdef
    ecx = pop32();
    if (--ecx)
        goto loc_1abdd9;
    eax = pop32();
    goto loc_1abdac;
loc_1abdf5: // 0160:1abdf5
    ax = memoryAGet16(ds, 0x20ee4f);
    ax -= memoryAGet16(ds, 0x20ee51);
    memoryASet16(ds, 0x20ee57, ax);
    memoryASet16(ds, 0x20ee59, 0x0000);
    if (memoryAGet32(ds, 0x2246cc) == 0x00000000)
        goto loc_1abe4c;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1abe4c;
    memoryASet32(ds, 0x2246cc, memoryAGet32(ds, 0x2246cc) + 1);
    if (memoryAGet32(ds, 0x2246cc) != 0x00000008)
        goto loc_1abe4c;
    memoryASet32(ds, 0x2246cc, 0x00000001);
    sub_1cea28();
    memoryASet32(ds, 0x2246cc, 0x00000000);
loc_1abe4c: // 0160:1abe4c
    if (memoryAGet16(ds, 0x20ee5b) != 0x0001)
        goto loc_1abd5e;
loc_1abe5a: // 0160:1abe5a
    esp += 4;
    return;
}
void sub_1abe5b() // 0160:1abe5b +long
{
    esp -= 4;
    sub_1a8cae();
    if (!(memoryAGet16(ds, 0x20d87f) & 0xffff))
        goto loc_1abf18;
    if (memoryAGet16(ds, 0x20d7bb) != 0xffff)
        goto loc_1abe86;
    ax = memoryAGet16(ds, 0x20edf1);
    memoryASet16(ds, 0x20d7bb, ax);
loc_1abe86: // 0160:1abe86
    memoryASet(ds, 0x20c840, 0x00);
    memoryASet16(ds, 0x20d87f, memoryAGet16(ds, 0x20d87f) + 0x0001);
    ax = memoryAGet16(ds, 0x20ee53);
    ax >>= 1;
    ax += 0x0054;
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x007e;
    bx -= memoryAGet16(ds, 0x20d87f);
    bx -= memoryAGet16(ds, 0x20d87f);
    dx = memoryAGet16(ds, 0x20ee55);
    dx >>= 1;
    dx += 0x0094;
    if ((short)bx >= (short)dx)
        goto loc_1abed2;
    bx = dx;
loc_1abed2: // 0160:1abed2
    cx = 0;
    dx = 0x0010;
    sub_1b19e0();
    if (memoryAGet16(ds, 0x20ee35) == 0x0001)
        goto loc_1abf18;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1abefd;
    sub_1b191a();
    al = 0xa5;
    sub_1b18a6();
loc_1abefd: // 0160:1abefd
    memoryASet16(ds, 0x20ee35, 0x0001);
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x013a;
    sub_1b1715();
loc_1abf18: // 0160:1abf18
    if (memoryAGet16(ds, 0x20eddb) & 0xffff)
        goto loc_1abf30;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1abf79;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1abf6f;
loc_1abf30: // 0160:1abf30
    memoryASet16(ds, 0x20d7bf, 0x0000);
    al = 0x05;
    memoryASet(ds, 0x20d77b, al);
    memoryASet(ds, 0x20d793, al);
    ax = 0;
    memoryASet(ds, 0x20d77c, al);
    memoryASet(ds, 0x20d794, al);
    memoryASet16(ds, 0x20d77d, ax);
    memoryASet16(ds, 0x20d77f, ax);
    memoryASet16(ds, 0x20d795, ax);
    memoryASet16(ds, 0x20d797, ax);
    goto loc_1ac07a;
loc_1abf6f: // 0160:1abf6f
    sub_1cd896();
    sub_1cd830();
loc_1abf79: // 0160:1abf79
    if (!(memoryAGet16(ds, 0x20d7a3) & 0xffff))
        goto loc_1ac028;
    memoryASet16(ds, 0x20d7c1, 0x0001);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    if ((short)memoryAGet16(ds, 0x20d7a3) <= (short)0x001e)
        goto loc_1abfad;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (al)
        goto loc_1abfd7;
loc_1abfad: // 0160:1abfad
    memoryASet16(ds, 0x20d7a3, memoryAGet16(ds, 0x20d7a3) + 0x0001);
    if (memoryAGet16(ds, 0x20ee35) != 0x0001)
        goto loc_1abfcc;
    if (memoryAGet16(ds, 0x20d7a3) != 0x015e)
        goto loc_1ac028;
    goto loc_1abfd7;
loc_1abfcc: // 0160:1abfcc
    if (memoryAGet16(ds, 0x20d7a3) != 0x00fa)
        goto loc_1ac028;
loc_1abfd7: // 0160:1abfd7
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ac026;
    ecx = 0x00000004;
    ax = 0;
    esi = 0x0020d1f7;
loc_1abfee: // 0160:1abfee
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1ac01d;
    bx = 0x0001;
    edi = 0x0020d16d;
    dx = 0x0004;
loc_1ac002: // 0160:1ac002
    if (ax == memoryAGet16(ds, edi))
        goto loc_1ac017;
    edi += 0x00000002;
    bx += 0x0001;
    dx -= 0x0001;
    if (dx)
        goto loc_1ac002;
    edi -= 0x00000002;
loc_1ac017: // 0160:1ac017
    edi += 0x00000002;
    memoryASet16(ds, esi, bx);
loc_1ac01d: // 0160:1ac01d
    ax += 0x0002;
    esi += 0x00000002;
    if (--ecx)
        goto loc_1abfee;
loc_1ac026: // 0160:1ac026
    goto loc_1ac07a;
loc_1ac028: // 0160:1ac028
    if (!(memoryAGet16(ds, 0x20d7b7) & 0xffff))
        goto loc_1ac08f;
    memoryASet16(ds, 0x20d7c1, 0x0001);
    if (memoryAGet16(ds, 0x20d7a5) != 0x0005)
        goto loc_1ac06f;
    sub_1b191a();
    al = 0xa5;
    sub_1b18a6();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0002)
        goto loc_1ac06f;
    if (memoryAGet16(ds, 0x20d081) != 0x0003)
        goto loc_1ac06f;
    ax = 0x013b;
    sub_1b1715();
loc_1ac06f: // 0160:1ac06f
    if ((short)memoryAGet16(ds, 0x20d7a5) <= (short)0x0226)
        goto loc_1ac08f;
loc_1ac07a: // 0160:1ac07a
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1ac08e;
    sub_1b191a();
    ax = 0x0001;
loc_1ac08e: // 0160:1ac08e
    esp += 4;
    return;
loc_1ac08f: // 0160:1ac08f
    if (!(memoryAGet16(ds, 0x20ed7f) & 0xffff))
        goto loc_1ac0e8;
    memoryASet16(ds, 0x20d7c1, 0x0001);
    memoryASet16(ds, 0x20ed81, memoryAGet16(ds, 0x20ed81) - 0x0001);
    if (!memoryAGet16(ds, 0x20ed81))
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b071) != 0x00)
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b08c) != 0x00)
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b118) != 0x00)
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b120) != 0x00)
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b11d) != 0x00)
        goto loc_1ac07a;
    if (memoryAGet(ds, 0x30b11b) != 0x00)
        goto loc_1ac07a;
    sub_1cd100();
loc_1ac0e8: // 0160:1ac0e8
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1ac124;
    ax = 0;
    memoryASet16(ds, 0x20cfa9, ax);
    memoryASet16(ds, 0x20cfab, ax);
    memoryASet16(ds, 0x20cfad, ax);
    memoryASet16(ds, 0x20cfaf, ax);
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c843, al);
loc_1ac124: // 0160:1ac124
    sub_1cb6fa();
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1ac139;
    sub_1ce269();
loc_1ac139: // 0160:1ac139
    sub_1ce6b7();
    if (memoryAGet16(ds, 0x2246cc) != 0x0000)
        goto loc_1ac1fd;
    sub_1d0dda();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0004)
        goto loc_1ac17e;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1ac1f8;
    sub_1cc428();
    sub_1cc73b();
    sub_1d0261();
    goto loc_1ac1f8;
    // gap 3 bytes
loc_1ac17e: // 0160:1ac17e
    if (memoryAGet16(ds, 0x20d7f5) != 0x0003)
        goto loc_1ac19c;
    sub_1cc428();
    sub_1cc73b();
    sub_1d03dc();
    goto loc_1ac1f8;
    // gap 3 bytes
loc_1ac19c: // 0160:1ac19c
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ac1da;
    sub_1cc428();
    sub_1cc73b();
    sub_1cc7d8();
    sub_1cc875();
    sub_1cf9db();
    sub_1cff9b();
    if (memoryAGet16(ds, 0x20d89f) & 0xffff)
        goto loc_1ac1f3;
    sub_1cfb7c();
    goto loc_1ac1f3;
loc_1ac1da: // 0160:1ac1da
    sub_1cc428();
    sub_1cc73b();
    sub_1cc7d8();
    sub_1cc875();
    sub_1cf9db();
loc_1ac1f3: // 0160:1ac1f3
    sub_1d18c0();
loc_1ac1f8: // 0160:1ac1f8
    sub_1d198c();
loc_1ac1fd: // 0160:1ac1fd
    if (!(memoryAGet16(ds, 0x20d2c3) & 0xffff))
        goto loc_1ac4ba;
    memoryASet16(ds, 0x20d2c3, memoryAGet16(ds, 0x20d2c3) - 0x0001);
    if (memoryAGet16(ds, 0x20d2c3) == 0x003c)
        goto loc_1ac228;
    if (memoryAGet16(ds, 0x20d2c3) != 0x001e)
        goto loc_1ac231;
loc_1ac228: // 0160:1ac228
    al = 0xaa;
    sub_1b17b7();
    goto loc_1ac242;
loc_1ac231: // 0160:1ac231
    if (memoryAGet16(ds, 0x20d2c3) != 0x0001)
        goto loc_1ac242;
    al = 0xab;
    sub_1b17b7();
loc_1ac242: // 0160:1ac242
    if (!(memoryAGet16(ds, 0x20d2bb) & 0xffff))
        goto loc_1ac255;
    memoryASet16(ds, 0x20d2bb, memoryAGet16(ds, 0x20d2bb) - 0x0001);
loc_1ac255: // 0160:1ac255
    if (!(memoryAGet16(ds, 0x20d2bd) & 0xffff))
        goto loc_1ac268;
    memoryASet16(ds, 0x20d2bd, memoryAGet16(ds, 0x20d2bd) - 0x0001);
loc_1ac268: // 0160:1ac268
    if (!(memoryAGet16(ds, 0x20d2bf) & 0xffff))
        goto loc_1ac27b;
    memoryASet16(ds, 0x20d2bf, memoryAGet16(ds, 0x20d2bf) - 0x0001);
loc_1ac27b: // 0160:1ac27b
    if (!(memoryAGet16(ds, 0x20d2c1) & 0xffff))
        goto loc_1ac28e;
    memoryASet16(ds, 0x20d2c1, memoryAGet16(ds, 0x20d2c1) - 0x0001);
loc_1ac28e: // 0160:1ac28e
    al = memoryAGet(ds, 0x20c840);
    al &= 0x10;
    if (!al)
        goto loc_1ac29f;
    memoryASet16(ds, 0x20d2bb, memoryAGet16(ds, 0x20d2bb) + 0x0002);
loc_1ac29f: // 0160:1ac29f
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ac2cf;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1ac2fb;
    al = memoryAGet(ds, 0x20c841);
    al &= 0x10;
    if (!al)
        goto loc_1ac2c5;
    memoryASet16(ds, 0x20d2bd, memoryAGet16(ds, 0x20d2bd) + 0x0002);
loc_1ac2c5: // 0160:1ac2c5
    if ((short)memoryAGet16(ds, 0x20d7f5) <= (short)0x0002)
        goto loc_1ac2fb;
loc_1ac2cf: // 0160:1ac2cf
    al = memoryAGet(ds, 0x20c842);
    al &= 0x10;
    if (!al)
        goto loc_1ac2e0;
    memoryASet16(ds, 0x20d2bf, memoryAGet16(ds, 0x20d2bf) + 0x0002);
loc_1ac2e0: // 0160:1ac2e0
    if ((short)memoryAGet16(ds, 0x20d7f5) <= (short)0x0003)
        goto loc_1ac2fb;
    al = memoryAGet(ds, 0x20c843);
    al &= 0x10;
    if (!al)
        goto loc_1ac2fb;
    memoryASet16(ds, 0x20d2c1, memoryAGet16(ds, 0x20d2c1) + 0x0002);
loc_1ac2fb: // 0160:1ac2fb
    if ((short)memoryAGet16(ds, 0x20d2bb) <= (short)0x0032)
        goto loc_1ac31e;
    ax = memoryAGet16(ds, 0x20cf73);
    bx = memoryAGet16(ds, 0x20cf4f);
    cx = memoryAGet16(ds, 0x20cf61);
    sub_1b0c20();
loc_1ac31e: // 0160:1ac31e
    if ((short)memoryAGet16(ds, 0x20d2bd) <= (short)0x0032)
        goto loc_1ac341;
    ax = memoryAGet16(ds, 0x20cf75);
    bx = memoryAGet16(ds, 0x20cf51);
    cx = memoryAGet16(ds, 0x20cf63);
    sub_1b0c20();
loc_1ac341: // 0160:1ac341
    if ((short)memoryAGet16(ds, 0x20d2bf) <= (short)0x0032)
        goto loc_1ac364;
    ax = memoryAGet16(ds, 0x20cf77);
    bx = memoryAGet16(ds, 0x20cf53);
    cx = memoryAGet16(ds, 0x20cf65);
    sub_1b0c20();
loc_1ac364: // 0160:1ac364
    if ((short)memoryAGet16(ds, 0x20d2c1) <= (short)0x0032)
        goto loc_1ac387;
    ax = memoryAGet16(ds, 0x20cf79);
    bx = memoryAGet16(ds, 0x20cf55);
    cx = memoryAGet16(ds, 0x20cf67);
    sub_1b0c20();
loc_1ac387: // 0160:1ac387
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    memoryASet(ds, 0x20c840, al);
    al = memoryAGet(ds, 0x20c841);
    al &= 0x80;
    memoryASet(ds, 0x20c841, al);
    al = memoryAGet(ds, 0x20c842);
    al &= 0x80;
    memoryASet(ds, 0x20c842, al);
    al = memoryAGet(ds, 0x20c843);
    al &= 0x80;
    memoryASet(ds, 0x20c843, al);
    ax = memoryAGet16(ds, 0x20d2bb);
    ax <<= 2;
    ax += memoryAGet16(ds, 0x20d2bb);
    memoryASet16(ds, 0x20cfa9, ax);
    ax = memoryAGet16(ds, 0x20d2bd);
    ax <<= 2;
    ax += memoryAGet16(ds, 0x20d2bd);
    memoryASet16(ds, 0x20cfab, ax);
    ax = memoryAGet16(ds, 0x20d2bf);
    ax <<= 2;
    ax += memoryAGet16(ds, 0x20d2bf);
    memoryASet16(ds, 0x20cfad, ax);
    ax = memoryAGet16(ds, 0x20d2c1);
    ax <<= 2;
    ax += memoryAGet16(ds, 0x20d2c1);
    memoryASet16(ds, 0x20cfaf, ax);
    sub_1ce269();
    ax = 0;
    memoryASet16(ds, 0x20cfa9, ax);
    memoryASet16(ds, 0x20cfab, ax);
    memoryASet16(ds, 0x20cfad, ax);
    memoryASet16(ds, 0x20cfaf, ax);
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1ac4ba;
    ax = memoryAGet16(ds, 0x20d2bb);
    if ((short)ax >= (short)0x0032)
        goto loc_1ac456;
    memoryASet16(ds, 0x20cfa9, ax);
    goto loc_1ac460;
loc_1ac456: // 0160:1ac456
    ax -= 0x0032;
    memoryASet16(ds, 0x20d217, ax);
loc_1ac460: // 0160:1ac460
    ax = memoryAGet16(ds, 0x20d2bd);
    if ((short)ax >= (short)0x0032)
        goto loc_1ac474;
    memoryASet16(ds, 0x20cfab, ax);
    goto loc_1ac47e;
loc_1ac474: // 0160:1ac474
    ax -= 0x0032;
    memoryASet16(ds, 0x20d219, ax);
loc_1ac47e: // 0160:1ac47e
    ax = memoryAGet16(ds, 0x20d2bf);
    if ((short)ax >= (short)0x0032)
        goto loc_1ac492;
    memoryASet16(ds, 0x20cfad, ax);
    goto loc_1ac49c;
loc_1ac492: // 0160:1ac492
    ax -= 0x0032;
    memoryASet16(ds, 0x20d21b, ax);
loc_1ac49c: // 0160:1ac49c
    ax = memoryAGet16(ds, 0x20d2c1);
    if ((short)ax >= (short)0x0032)
        goto loc_1ac4b0;
    memoryASet16(ds, 0x20cfaf, ax);
    goto loc_1ac4ba;
loc_1ac4b0: // 0160:1ac4b0
    ax -= 0x0032;
    memoryASet16(ds, 0x20d21d, ax);
loc_1ac4ba: // 0160:1ac4ba
    eax = memoryAGet32(ds, 0x20cf0b);
    memoryASet32(ds, 0x20e81d, eax);
    esi = 0x00231cd8;
    memoryASet32(ds, 0x20e821, esi);
    esi = 0x00200a10;
    memoryASet32(ds, 0x20e819, esi);
    if (!(memoryAGet16(ds, 0x20cf3d) & 0xffff))
        goto loc_1ac4ef;
    sub_1ad60e();
    sub_1c9d42();
loc_1ac4ef: // 0160:1ac4ef
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1ac527;
    eax = memoryAGet32(ds, 0x20cf0f);
    memoryASet32(ds, 0x20e81d, eax);
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1ac518;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ac51d;
loc_1ac518: // 0160:1ac518
    sub_1cd1f5();
loc_1ac51d: // 0160:1ac51d
    sub_1ad86e();
    sub_1ca12c();
loc_1ac527: // 0160:1ac527
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1ac57d;
    eax = memoryAGet32(ds, 0x20cf13);
    memoryASet32(ds, 0x20e81d, eax);
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ac556;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ac556;
    sub_1cd336();
loc_1ac556: // 0160:1ac556
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1ac56a;
    memoryASet16(ds, 0x20eda7, 0x0000);
loc_1ac56a: // 0160:1ac56a
    sub_1adaba();
    sub_1ca3e8();
    memoryASet16(ds, 0x20eda7, 0x0001);
loc_1ac57d: // 0160:1ac57d
    if (!(memoryAGet16(ds, 0x20cf43) & 0xffff))
        goto loc_1ac5ab;
    eax = memoryAGet32(ds, 0x20cf17);
    memoryASet32(ds, 0x20e81d, eax);
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ac5a1;
    sub_1cd445();
loc_1ac5a1: // 0160:1ac5a1
    sub_1add06();
    sub_1ca6b3();
loc_1ac5ab: // 0160:1ac5ab
    sub_1b1e81();
    sub_1cd927();
    if (memoryAGet32(ds, 0x20d85d) == 0x00204c2a)
        goto loc_1ac5cc;
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ac61d;
loc_1ac5cc: // 0160:1ac5cc
    ax = memoryAGet16(ds, 0x20cf23);
    bx = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20c810, ax);
    memoryASet16(ds, 0x20c812, bx);
    eax = memoryAGet32(ds, 0x1f1c38);
    ebx = memoryAGet32(ds, 0x1f1c3c);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    sub_1d71ce();
    ax = memoryAGet16(ds, 0x20c810);
    bx = memoryAGet16(ds, 0x20c812);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
loc_1ac61d: // 0160:1ac61d
    sub_1c8ae0();
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1ac641;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1ac641;
    sub_1cef93();
loc_1ac641: // 0160:1ac641
    if (!(memoryAGet16(ds, 0x20cf3d) & 0xffff))
        goto loc_1ac67b;
    sub_1cec8a();
    sub_1cc919();
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1ac676;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    if (ax)
        goto loc_1ac676;
    memoryASet16(ds, 0x20d89d, 0x0001);
loc_1ac676: // 0160:1ac676
    sub_1caa0d();
loc_1ac67b: // 0160:1ac67b
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1ac695;
    sub_1cee0a();
    sub_1cca0a();
    sub_1caf91();
loc_1ac695: // 0160:1ac695
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1ac6be;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ac6b4;
    sub_1cef93();
loc_1ac6b4: // 0160:1ac6b4
    sub_1ccafb();
    sub_1cb1e2();
loc_1ac6be: // 0160:1ac6be
    if (!(memoryAGet16(ds, 0x20cf43) & 0xffff))
        goto loc_1ac6d8;
    sub_1cf13b();
    sub_1ccbec();
    sub_1cb3f3();
loc_1ac6d8: // 0160:1ac6d8
    ax = memoryAGet16(ds, 0x20cf23);
    bx = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20c810, ax);
    memoryASet16(ds, 0x20c812, bx);
    eax = memoryAGet32(ds, 0x1f1c38);
    ebx = memoryAGet32(ds, 0x1f1c3c);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    sub_1cfebb();
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1ac72b;
    if (memoryAGet32(ds, 0x20d85d) == 0x00204c2a)
        goto loc_1ac72b;
    sub_1d71ce();
loc_1ac72b: // 0160:1ac72b
    sub_1d1d9b();
    sub_1d04a1();
    ax = memoryAGet16(ds, 0x20c810);
    bx = memoryAGet16(ds, 0x20c812);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    sub_1b1113();
    sub_1ac75e();
    ax = 0x0000;
    esp += 4;
}
void sub_1ac75e() // 0160:1ac75e +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ee59) & 0xffff))
        goto loc_1ac778;
    memoryASet32(ds, 0x20c80c, 0x00000000);
    goto loc_1ac7d4;
    // gap 3 bytes
loc_1ac778: // 0160:1ac778
    eax = memoryAGet32(ds, 0x20c80c);
    if (!eax)
        goto loc_1ac7d4;
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) - 0x0000000c);
    eax = memoryAGet32(ds, 0x20c80c);
    esi = 0x0020c00c;
    esi += eax;
    ax = memoryAGet16(ds, esi + 8);
    memoryASet16(ds, 0x20ce8f, ax);
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = memoryAGet16(ds, esi + 4);
    dx = memoryAGet16(ds, esi + 6);
    if (memoryAGet16(ds, esi + 10) == 0x0000)
        goto loc_1ac7c6;
    if (memoryAGet16(ds, esi + 10) == 0x0001)
        goto loc_1ac7cd;
    sub_1b1b7c();
    goto loc_1ac7d2;
loc_1ac7c6: // 0160:1ac7c6
    sub_1b1a48();
    goto loc_1ac7d2;
loc_1ac7cd: // 0160:1ac7cd
    sub_1b1ad6();
loc_1ac7d2: // 0160:1ac7d2
    goto loc_1ac778;
loc_1ac7d4: // 0160:1ac7d4
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
}
void sub_1ac7de() // 0160:1ac7de +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d7bb, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c5, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0001);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x20d7cf, 0x0014);
    memoryASet16(ds, 0x20c830, 0xfffc);
    memoryASet16(ds, 0x20ee9f, 0xfffc);
    memoryASet16(ds, 0x20eddb, 0x0000);
    memoryASet16(ds, 0x20d2c3, 0x0064);
    esp += 4;
}
void sub_1ac839() // 0160:1ac839 +long
{
    esp -= 4;
    sub_1ac863();
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x224644, 0x0000);
    esp += 4;
}
void sub_1ac863() // 0160:1ac863 +long
{
    esp -= 4;
    sub_1b191a();
    al = 0x82;
    sub_1b18a6();
    sub_1b4eda();
    sub_1b0063();
loc_1ac879: // 0160:1ac879
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1ac89b;
    eax = memoryAGet32(ds, 0x2eebd0);
    eax -= memoryAGet32(ds, 0x20ee7b);
    if ((int32_t)eax < (int32_t)0x0000008c)
        goto loc_1ac879;
    sub_1c7a40();
loc_1ac89b: // 0160:1ac89b
    sub_1b4f0e();
    memoryASet16(ds, 0x20d7bb, 0x0009);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c5, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0001);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x20d7cf, 0x0014);
    memoryASet(ds, 0x20d77c, 0x03);
    memoryASet16(ds, 0x20d877, 0x0000);
    memoryASet32(ds, 0x20d879, 0x0020d36d);
    memoryASet16(ds, 0x20d87d, 0x00c8);
    memoryASet16(ds, 0x20d87f, 0x0000);
    if (memoryAGet16(ds, 0x20d7b9) == 0x0038)
        goto loc_1ac920;
    if (memoryAGet16(ds, 0x20d7b9) == 0x003a)
        goto loc_1ac920;
    if (memoryAGet16(ds, 0x20d7b9) != 0x003b)
        goto loc_1ac930;
loc_1ac920: // 0160:1ac920
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
loc_1ac930: // 0160:1ac930
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20d0b7, ax);
    memoryASet16(ds, 0x20d0b9, bx);
    memoryASet16(ds, 0x20d0bb, ax);
    memoryASet16(ds, 0x20d0bd, bx);
loc_1ac957: // 0160:1ac957
    ax = memoryAGet16(ds, 0x20ee4f);
    memoryASet16(ds, 0x20ee51, ax);
    push32(eax);
    sub_1a8d10();
    memoryASet32(ds, 0x20c80c, 0x00000000);
    sub_1ad031();
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    sub_1b1ca2();
    eax = pop32();
    memoryASet16(ds, 0x20ee4f, ax);
    if (memoryAGet16(ds, 0x20eddb) == 0x0001)
        goto loc_1ac9a3;
    sub_1aca1a();
    if (!ax)
        goto loc_1ac9a9;
loc_1ac9a3: // 0160:1ac9a3
    eax = pop32();
    goto loc_1aca19;
    // gap 3 bytes
loc_1ac9a9: // 0160:1ac9a9
    sub_1a8c90();
    eax = pop32();
loc_1ac9af: // 0160:1ac9af
    bx = memoryAGet16(ds, 0x20ee4f);
    bx -= ax;
    if (!bx)
        goto loc_1ac9f8;
    bx -= 0x0001;
    if (!bx)
        goto loc_1ac9f8;
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    memoryASet16(ds, 0x20ee59, 0x0001);
    ecx = 0;
    cx = bx;
loc_1ac9dc: // 0160:1ac9dc
    push32(ecx);
    sub_1aca1a();
    if (!ax)
        goto loc_1ac9f2;
    ecx = pop32();
    eax = pop32();
    goto loc_1aca19;
    // gap 3 bytes
loc_1ac9f2: // 0160:1ac9f2
    ecx = pop32();
    if (--ecx)
        goto loc_1ac9dc;
    eax = pop32();
    goto loc_1ac9af;
loc_1ac9f8: // 0160:1ac9f8
    ax = memoryAGet16(ds, 0x20ee4f);
    ax -= memoryAGet16(ds, 0x20ee51);
    memoryASet16(ds, 0x20ee57, ax);
    memoryASet16(ds, 0x20ee59, 0x0000);
    goto loc_1ac957;
loc_1aca19: // 0160:1aca19
    esp += 4;
    return;
}
void sub_1aca1a() // 0160:1aca1a +long
{
    esp -= 4;
    goto loc_1aca1a;
loc_1ac07a: // 0160:1ac07a
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1ac08e;
    sub_1b191a();
    ax = 0x0001;
loc_1ac08e: // 0160:1ac08e
    esp += 4;
    return;
    // gap 2443 bytes
loc_1aca1a: // 0160:1aca1a
    sub_1a8cae();
    if (memoryAGet16(ds, 0x20eddb) & 0xffff)
        goto loc_1ac07a;
    if ((short)memoryAGet16(ds, 0x20c830) <= (short)0x00c8)
        goto loc_1aca8e;
    bx = memoryAGet16(ds, 0x20c830);
    bx >>= 8;
    bx += 0x002a;
    if ((short)bx <= (short)0x003c)
        goto loc_1aca52;
    bx = 0x003c;
loc_1aca52: // 0160:1aca52
    al = 0xa8;
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1aca8e;
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1aca8e;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1aca8e;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1aca85;
    al = 0xa8;
    sub_1b18a6();
loc_1aca85: // 0160:1aca85
    memoryASet16(ds, 0x20d897, 0x0001);
loc_1aca8e: // 0160:1aca8e
    if (!(memoryAGet16(ds, 0x20d7a3) & 0xffff))
        goto loc_1acab8;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    memoryASet16(ds, 0x20d7a3, memoryAGet16(ds, 0x20d7a3) + 0x0001);
    if (memoryAGet16(ds, 0x20d7a3) == 0x00fa)
        goto loc_1acac3;
    goto loc_1acadb;
    // gap 3 bytes
loc_1acab8: // 0160:1acab8
    if ((short)memoryAGet16(ds, 0x20d7a5) <= (short)0x0226)
        goto loc_1acadb;
loc_1acac3: // 0160:1acac3
    if (!(memoryAGet16(ds, 0x20d7b7) & 0xffff))
        goto loc_1acad6;
    memoryASet16(ds, 0x20e90b, memoryAGet16(ds, 0x20e90b) + 0x0001);
loc_1acad6: // 0160:1acad6
    ax = 0x0001;
    esp += 4;
    return;
loc_1acadb: // 0160:1acadb
    sub_1cfdfb();
    if (!(memoryAGet16(ds, 0x20d87f) & 0xffff))
        goto loc_1acb71;
    if (memoryAGet16(ds, 0x20d87f) != 0x0001)
        goto loc_1acb20;
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x012c;
    sub_1b1715();
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1acb20;
    sub_1b191a();
    al = 0x06;
    sub_1b18a6();
loc_1acb20: // 0160:1acb20
    memoryASet16(ds, 0x20d87f, memoryAGet16(ds, 0x20d87f) + 0x0001);
    ax = memoryAGet16(ds, 0x20ee53);
    ax >>= 1;
    ax += 0x0054;
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x007e;
    bx -= memoryAGet16(ds, 0x20d87f);
    bx -= memoryAGet16(ds, 0x20d87f);
    dx = memoryAGet16(ds, 0x20ee55);
    dx >>= 1;
    dx += 0x0094;
    if ((short)bx >= (short)dx)
        goto loc_1acb65;
    bx = dx;
loc_1acb65: // 0160:1acb65
    dx = 0;
    cx = 0x005d;
    sub_1b19e0();
loc_1acb71: // 0160:1acb71
    sub_1ce269();
    sub_1ce6b7();
    sub_1d198c();
    if (!(memoryAGet16(ds, 0x20d7b7) & 0xffff))
        goto loc_1acc14;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    bx = 0x01f6;
    ax = memoryAGet16(ds, 0x20d7a5);
    bx -= ax;
    dx = memoryAGet16(ds, 0x20ee55);
    dx >>= 1;
    dx += 0x00a8;
    if ((short)bx > (short)dx)
        goto loc_1acbba;
    bx = dx;
loc_1acbba: // 0160:1acbba
    ax = memoryAGet16(ds, 0x20ee53);
    ax >>= 1;
    ax += 0x0058;
    dx = 0x0010;
    cx = 0x005c;
    sub_1b19e0();
    memoryASet16(ds, 0x20cfa9, 0x0000);
    ax = memoryAGet16(ds, 0x20cf73);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf73, ax);
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1acc14;
    if (memoryAGet16(ds, 0x20d06f) & 0xffff)
        goto loc_1acc14;
    memoryASet16(ds, 0x20d06f, 0x0014);
loc_1acc14: // 0160:1acc14
    if (memoryAGet16(ds, 0x20d87d) & 0xffff)
        goto loc_1acc49;
    eax = memoryAGet32(ds, 0x20cf07);
    memoryASet32(ds, 0x20e81d, eax);
    esi = 0x00231cd8;
    memoryASet32(ds, 0x20e821, esi);
    esi = 0x00200a10;
    memoryASet32(ds, 0x20e819, esi);
    sub_1ad60e();
    sub_1c9d42();
loc_1acc49: // 0160:1acc49
    sub_1b1e81();
    sub_1acdb4();
    sub_1cec8a();
    sub_1caa0d();
    sub_1ace94();
    if (memoryAGet16(ds, 0x20d87d) == 0x0001)
        goto loc_1acd36;
    if (memoryAGet16(ds, 0x20d87d) & 0xffff)
        goto loc_1acd5c;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1acd5c;
    esi = memoryAGet32(ds, 0x20d879);
    esi -= 0x00000006;
    ax = memoryAGet16(ds, esi);
    ax -= memoryAGet16(ds, 0x20cf4f);
    ax -= 0x0074;
    if ((short)ax < 0)
        goto loc_1acd5c;
    if ((short)ax >= (short)0x0020)
        goto loc_1acd5c;
    ax = memoryAGet16(ds, esi + 2);
    ax -= memoryAGet16(ds, 0x20cf61);
    ax -= 0x0074;
    if ((short)ax < 0)
        goto loc_1acd5c;
    if ((short)ax >= (short)0x0020)
        goto loc_1acd5c;
    memoryASet16(ds, esi + 4, 0x0014);
    memoryASet16(ds, 0x20d877, memoryAGet16(ds, 0x20d877) + 0x0001);
    push32(esi);
    al = 0x07;
    sub_1b17b7();
    esi = pop32();
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    ax -= 0x0080;
    bx -= 0x0080;
    ax &= 0xfff8;
    bx &= 0xfff8;
    memoryASet16(ds, 0x20d0b7, ax);
    memoryASet16(ds, 0x20d0b9, bx);
    memoryASet16(ds, 0x20d0bb, ax);
    memoryASet16(ds, 0x20d0bd, bx);
    ax = memoryAGet16(ds, 0x20cf73);
    ax &= 0x001f;
    ax >>= 2;
    ax <<= 8;
    memoryASet16(ds, 0x20d04b, ax);
loc_1acd36: // 0160:1acd36
    esi = memoryAGet32(ds, 0x20d879);
    ax = memoryAGet16(ds, esi);
    if ((short)ax < 0)
        goto loc_1acd5c;
    ax = memoryAGet16(ds, esi + 4);
    if (ax)
        goto loc_1acd5c;
    memoryASet16(ds, esi + 4, 0x0005);
    esi += 0x00000006;
    memoryASet32(ds, 0x20d879, esi);
loc_1acd5c: // 0160:1acd5c
    if (memoryAGet16(ds, 0x20d877) != 0x001e)
        goto loc_1acdaa;
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1acdaa;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1acd86;
    sub_1b191a();
    al = 0xa5;
    sub_1b18a6();
loc_1acd86: // 0160:1acd86
    ax = 0x013a;
    sub_1b1715();
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20d7b7, 0x0001);
loc_1acdaa: // 0160:1acdaa
    sub_1ac75e();
    ax = 0x0000;
    esp += 4;
}
void sub_1acdb4() // 0160:1acdb4 +long
{
    esp -= 4;
    ax = 0x0096;
    bx = 0x008c;
    cx = 0x005a;
    dx = 0;
    sub_1b19e0();
    cx = memoryAGet16(ds, 0x20d877);
    memoryASet16(ds, 0x20ceb3, 0x0000);
loc_1acdd8: // 0160:1acdd8
    if ((short)cx < (short)0x000a)
        goto loc_1acdec;
    cx -= 0x000a;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    goto loc_1acdd8;
loc_1acdec: // 0160:1acdec
    ax = 0x00a8;
    bx = 0x0096;
    cx += 0x0005;
    dx = 0x0010;
    sub_1b19e0();
    ax = 0x009c;
    bx = 0x0096;
    cx = memoryAGet16(ds, 0x20ceb3);
    if (flags.zero)
        goto loc_1ace1f;
    cx += 0x0005;
    dx = 0x0010;
    sub_1b19e0();
loc_1ace1f: // 0160:1ace1f
    ax = 0x00b0;
    bx = 0x0093;
    ebp = 0;
    esi = 0x002050bc;
    bp <<= 3;
    cx = memoryAGet16(ds, esi + ebp);
    cx += 0x0050;
    ax += memoryAGet16(ds, esi + ebp + 2);
    bx += memoryAGet16(ds, esi + ebp + 4);
    dx = memoryAGet16(ds, esi + ebp + 6);
    dx |= 0x0010;
    sub_1b19e0();
    if (!(memoryAGet16(ds, 0x20d87d) & 0xffff))
        goto loc_1ace93;
    memoryASet16(ds, 0x20d87d, memoryAGet16(ds, 0x20d87d) - 0x0001);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x000f;
    if ((short)ax >= (short)0x000c)
        goto loc_1ace93;
    ax = memoryAGet16(ds, 0x20ee53);
    ax >>= 1;
    ax += 0x0014;
    bx = 0x0108;
    dx = 0x0010;
    cx = 0x005b;
    sub_1b19e0();
loc_1ace93: // 0160:1ace93
    esp += 4;
    return;
}
void sub_1ace94() // 0160:1ace94 +long
{
    esp -= 4;
    esi = 0x0020d36d;
loc_1ace99: // 0160:1ace99
    ax = memoryAGet16(ds, esi);
    if ((short)ax < 0)
        goto loc_1aceb9;
    if (!(memoryAGet16(ds, esi + 4) & 0xffff))
        goto loc_1aceb4;
    bx = memoryAGet16(ds, esi + 2);
    push32(esi);
    sub_1acec3();
    esi = pop32();
loc_1aceb4: // 0160:1aceb4
    esi += 0x00000006;
    goto loc_1ace99;
loc_1aceb9: // 0160:1aceb9
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
}
void sub_1acec3() // 0160:1acec3 +long
{
    esp -= 4;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1aced9;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1acefc;
loc_1aced9: // 0160:1aced9
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1aceeb;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1acefc;
loc_1aceeb: // 0160:1aceeb
    if (bx >= 0x0160)
        goto loc_1acefc;
    if ((short)ax <= (short)0x01c0)
        goto loc_1acefd;
loc_1acefc: // 0160:1acefc
    esp += 4;
    return;
loc_1acefd: // 0160:1acefd
    cx = memoryAGet16(ds, esi + 4);
    if (cx == 0x0001)
        goto loc_1acf60;
    if ((short)cx < (short)0x0014)
        goto loc_1acf42;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0003;
    if (bp)
        goto loc_1acf2c;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 0x0001);
    if (memoryAGet16(ds, esi + 4) != 0x0019)
        goto loc_1acf2c;
    memoryASet16(ds, esi + 4, 0x0000);
loc_1acf2c: // 0160:1acf2c
    cx += 0x004c;
    if ((short)cx < (short)0x0043)
        goto loc_1acfa1;
    dx = 0;
    goto loc_1b19e0;
loc_1acf42: // 0160:1acf42
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0003;
    if (bp)
        goto loc_1acf54;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) - 0x0001);
loc_1acf54: // 0160:1acf54
    cx += 0x0060;
    dx = 0;
    goto loc_1b19e0;
loc_1acf60: // 0160:1acf60
    ebp = 0;
    bp = memoryAGet16(ds, 0x20c830);
    ebp += esi;
    memoryASet16(ds, 0x20ceb5, bp);
    ebp &= 0x0000003e;
    bp >>= 1;
    esi = 0x002050bc;
    bp <<= 3;
    cx = memoryAGet16(ds, esi + ebp);
    cx += 0x0050;
    ax += memoryAGet16(ds, esi + ebp + 2);
    bx += memoryAGet16(ds, esi + ebp + 4);
    dx = memoryAGet16(ds, esi + ebp + 6);
    dx |= 0x0010;
    goto loc_1b19e0;
loc_1acfa1: // 0160:1acfa1
    esp += 4;
    return;
    // gap 19006 bytes
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
}
void sub_1acfa2() // 0160:1acfa2 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20eda1, 0x0000);
    memoryASet(ds, 0x20eda3, 0xe0);
    sub_1b191a();
    al = 0x79;
    sub_1b18a6();
    ax = 0;
    memoryASet16(ds, 0x20ee45, ax);
    memoryASet16(ds, 0x20edfb, ax);
    memoryASet16(ds, 0x20ed7f, ax);
    memoryASet16(ds, 0x20ee49, ax);
    memoryASet16(ds, 0x20ed81, ax);
    memoryASet16(ds, 0x20ecb9, ax);
    memoryASet16(ds, 0x20ec8f, ax);
    memoryASet16(ds, 0x20eccf, ax);
    memoryASet16(ds, 0x20d89f, ax);
    memoryASet16(ds, 0x20edef, ax);
    memoryASet16(ds, 0x20ed41, ax);
    memoryASet16(ds, 0x20eda9, ax);
    memoryASet16(ds, 0x20ee15, ax);
    memoryASet16(ds, 0x20ee33, ax);
    memoryASet16(ds, 0x20d863, ax);
    memoryASet16(ds, 0x20d7d5, ax);
    memoryASet16(ds, 0x20d89b, ax);
    memoryASet16(ds, 0x20e90b, 0x0002);
    esp += 4;
}
void sub_1ad031() // 0160:1ad031 +long
{
    esp -= 4;
    ax = 0;
    memoryASet(ds, 0x20c840, al);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c843, al);
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1ad136;
    if (memoryAGet16(ds, 0x20d89b) != 0x0001)
        goto loc_1ad107;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1ad136;
    if (memoryAGet16(ds, 0x20e90d) != 0x0002)
        goto loc_1ad09e;
    sub_1ad149();
    if (memoryAGet16(ds, 0x20ec89) == 0x0001)
        goto loc_1ad106;
loc_1ad093: // 0160:1ad093
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c840, al);
    esp += 4;
    return;
loc_1ad09e: // 0160:1ad09e
    if (memoryAGet16(ds, 0x20e90d) != 0x0003)
        goto loc_1ad0d4;
    sub_1ad188();
    if (memoryAGet16(ds, 0x20ec89) == 0x0001)
        goto loc_1ad106;
    if (memoryAGet16(ds, 0x20ec89) == 0x0002)
        goto loc_1ad093;
loc_1ad0c9: // 0160:1ad0c9
    al = memoryAGet(ds, 0x20c842);
    memoryASet(ds, 0x20c840, al);
    esp += 4;
    return;
loc_1ad0d4: // 0160:1ad0d4
    sub_1ad258();
    if (memoryAGet16(ds, 0x20ec89) == 0x0001)
        goto loc_1ad106;
    if (memoryAGet16(ds, 0x20ec89) == 0x0002)
        goto loc_1ad093;
    if (memoryAGet16(ds, 0x20ec89) == 0x0003)
        goto loc_1ad0c9;
    al = memoryAGet(ds, 0x20c843);
    memoryASet(ds, 0x20c840, al);
    esp += 4;
    return;
loc_1ad106: // 0160:1ad106
    esp += 4;
    return;
loc_1ad107: // 0160:1ad107
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1ad136;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1ad149;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1ad188;
    goto loc_1ad258;
loc_1ad136: // 0160:1ad136
    if (memoryAGet16(ds, 0x224b9c) == 0x0001)
        goto loc_1ad34b;
    goto loc_1ad394;
loc_1ad149: // 0160:1ad149
    ax = memoryAGet16(ds, 0x224b9e);
    if (ax)
        goto loc_1ad15e;
    sub_1ad47f();
    goto loc_1ad4d0;
loc_1ad15e: // 0160:1ad15e
    if (ax != 0x0001)
        goto loc_1ad16e;
    sub_1ad521();
    goto loc_1ad572;
loc_1ad16e: // 0160:1ad16e
    if (ax != 0x0002)
        goto loc_1ad17e;
    sub_1ad34b();
    goto loc_1ad42e;
loc_1ad17e: // 0160:1ad17e
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad188: // 0160:1ad188
    ax = memoryAGet16(ds, 0x224ba0);
    if (ax)
        goto loc_1ad1bd;
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    goto loc_1ad34b;
loc_1ad1bd: // 0160:1ad1bd
    if (ax != 0x0001)
        goto loc_1ad1ed;
    sub_1ad572();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    sub_1ad521();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    goto loc_1ad34b;
loc_1ad1ed: // 0160:1ad1ed
    if (ax != 0x0002)
        goto loc_1ad213;
    sub_1ad42e();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad213: // 0160:1ad213
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x10;
    if (!al)
        goto loc_1ad228;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad228: // 0160:1ad228
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    al &= 0x10;
    if (!al)
        goto loc_1ad244;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad244: // 0160:1ad244
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
    sub_1ad5c3();
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x10);
    esp += 4;
    return;
loc_1ad258: // 0160:1ad258
    ax = memoryAGet16(ds, 0x224ba2);
    if (ax)
        goto loc_1ad299;
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c843, al);
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c840, 0x00);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad299: // 0160:1ad299
    if (ax != 0x0001)
        goto loc_1ad2d5;
    sub_1ad572();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c843, al);
    sub_1ad521();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c840, 0x00);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad2d5: // 0160:1ad2d5
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x10;
    if (!al)
        goto loc_1ad2ea;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad2ea: // 0160:1ad2ea
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    al &= 0x10;
    if (!al)
        goto loc_1ad306;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad306: // 0160:1ad306
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
    sub_1ad5c3();
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x10);
    al = memoryAGet(ds, 0x20c842);
    memoryASet(ds, 0x20c843, al);
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    sub_1ad34b();
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    esp += 4;
    return;
loc_1ad34b: // 0160:1ad34b
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x10;
    if (al)
        goto loc_1ad35b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad35b: // 0160:1ad35b
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x20;
    if (al)
        goto loc_1ad36b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad36b: // 0160:1ad36b
    al = memoryAGet(ds, 0x1f1cc4);
    if ((char)al < (char)memoryAGet(ds, 0x20eea2))
        goto loc_1ad37f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad37f: // 0160:1ad37f
    al = memoryAGet(ds, 0x1f1cc4);
    if (al != memoryAGet(ds, 0x20eea1))
        goto loc_1ad393;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad393: // 0160:1ad393
    esp += 4;
    return;
loc_1ad394: // 0160:1ad394
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1ad3a8;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad3a8: // 0160:1ad3a8
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad3bc;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad3bc: // 0160:1ad3bc
    al = memoryAGet(ds, 0x30b089);
    if (!al)
        goto loc_1ad3d0;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad3d0: // 0160:1ad3d0
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1ad3e4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad3e4: // 0160:1ad3e4
    esp += 4;
    return;
loc_1ad3e5: // 0160:1ad3e5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x40;
    if (al)
        goto loc_1ad3f5;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad3f5: // 0160:1ad3f5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x80;
    if (al)
        goto loc_1ad405;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad405: // 0160:1ad405
    al = memoryAGet(ds, 0x1f1cc6);
    if ((char)al < (char)memoryAGet(ds, 0x20eea4))
        goto loc_1ad419;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad419: // 0160:1ad419
    al = memoryAGet(ds, 0x1f1cc6);
    if (al != memoryAGet(ds, 0x20eea3))
        goto loc_1ad42d;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad42d: // 0160:1ad42d
    esp += 4;
    return;
loc_1ad42e: // 0160:1ad42e
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1ad442;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad442: // 0160:1ad442
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad456;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad456: // 0160:1ad456
    al = memoryAGet(ds, 0x30b089);
    if (!al)
        goto loc_1ad46a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad46a: // 0160:1ad46a
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1ad47e;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad47e: // 0160:1ad47e
    esp += 4;
    return;
    // gap 81 bytes
loc_1ad4d0: // 0160:1ad4d0
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad4e4;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad4e4: // 0160:1ad4e4
    al = memoryAGet(ds, 0x30b08a);
    if (!al)
        goto loc_1ad4f8;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad4f8: // 0160:1ad4f8
    al = memoryAGet(ds, 0x30b08b);
    if (!al)
        goto loc_1ad50c;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad50c: // 0160:1ad50c
    al = memoryAGet(ds, 0x30b096);
    if (!al)
        goto loc_1ad520;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad520: // 0160:1ad520
    esp += 4;
    return;
    // gap 81 bytes
loc_1ad572: // 0160:1ad572
    al = memoryAGet(ds, 0x30b0a6);
    if (!al)
        goto loc_1ad586;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad586: // 0160:1ad586
    al = memoryAGet(ds, 0x30b097);
    if (!al)
        goto loc_1ad59a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad59a: // 0160:1ad59a
    al = memoryAGet(ds, 0x30b098);
    if (!al)
        goto loc_1ad5ae;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad5ae: // 0160:1ad5ae
    al = memoryAGet(ds, 0x30b0ed);
    if (!al)
        goto loc_1ad5c2;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad5c2: // 0160:1ad5c2
    esp += 4;
    return;
}
void sub_1ad149() // 0160:1ad149 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x224b9e);
    if (ax)
        goto loc_1ad15e;
    sub_1ad47f();
    goto loc_1ad4d0;
loc_1ad15e: // 0160:1ad15e
    if (ax != 0x0001)
        goto loc_1ad16e;
    sub_1ad521();
    goto loc_1ad572;
loc_1ad16e: // 0160:1ad16e
    if (ax != 0x0002)
        goto loc_1ad17e;
    sub_1ad34b();
    goto loc_1ad42e;
loc_1ad17e: // 0160:1ad17e
    sub_1ad34b();
    goto loc_1ad3e5;
    // gap 605 bytes
loc_1ad3e5: // 0160:1ad3e5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x40;
    if (al)
        goto loc_1ad3f5;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad3f5: // 0160:1ad3f5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x80;
    if (al)
        goto loc_1ad405;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad405: // 0160:1ad405
    al = memoryAGet(ds, 0x1f1cc6);
    if ((char)al < (char)memoryAGet(ds, 0x20eea4))
        goto loc_1ad419;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad419: // 0160:1ad419
    al = memoryAGet(ds, 0x1f1cc6);
    if (al != memoryAGet(ds, 0x20eea3))
        goto loc_1ad42d;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad42d: // 0160:1ad42d
    esp += 4;
    return;
loc_1ad42e: // 0160:1ad42e
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1ad442;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad442: // 0160:1ad442
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad456;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad456: // 0160:1ad456
    al = memoryAGet(ds, 0x30b089);
    if (!al)
        goto loc_1ad46a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad46a: // 0160:1ad46a
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1ad47e;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad47e: // 0160:1ad47e
    esp += 4;
    return;
    // gap 81 bytes
loc_1ad4d0: // 0160:1ad4d0
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad4e4;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad4e4: // 0160:1ad4e4
    al = memoryAGet(ds, 0x30b08a);
    if (!al)
        goto loc_1ad4f8;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad4f8: // 0160:1ad4f8
    al = memoryAGet(ds, 0x30b08b);
    if (!al)
        goto loc_1ad50c;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad50c: // 0160:1ad50c
    al = memoryAGet(ds, 0x30b096);
    if (!al)
        goto loc_1ad520;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad520: // 0160:1ad520
    esp += 4;
    return;
    // gap 81 bytes
loc_1ad572: // 0160:1ad572
    al = memoryAGet(ds, 0x30b0a6);
    if (!al)
        goto loc_1ad586;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad586: // 0160:1ad586
    al = memoryAGet(ds, 0x30b097);
    if (!al)
        goto loc_1ad59a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad59a: // 0160:1ad59a
    al = memoryAGet(ds, 0x30b098);
    if (!al)
        goto loc_1ad5ae;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad5ae: // 0160:1ad5ae
    al = memoryAGet(ds, 0x30b0ed);
    if (!al)
        goto loc_1ad5c2;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad5c2: // 0160:1ad5c2
    esp += 4;
    return;
}
void sub_1ad188() // 0160:1ad188 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x224ba0);
    if (ax)
        goto loc_1ad1bd;
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    goto loc_1ad34b;
loc_1ad1bd: // 0160:1ad1bd
    if (ax != 0x0001)
        goto loc_1ad1ed;
    sub_1ad572();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    sub_1ad521();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    goto loc_1ad34b;
loc_1ad1ed: // 0160:1ad1ed
    if (ax != 0x0002)
        goto loc_1ad213;
    sub_1ad42e();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad213: // 0160:1ad213
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x10;
    if (!al)
        goto loc_1ad228;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad228: // 0160:1ad228
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    al &= 0x10;
    if (!al)
        goto loc_1ad244;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad244: // 0160:1ad244
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
    sub_1ad5c3();
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x10);
    esp += 4;
    return;
    // gap 243 bytes
loc_1ad34b: // 0160:1ad34b
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x10;
    if (al)
        goto loc_1ad35b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad35b: // 0160:1ad35b
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x20;
    if (al)
        goto loc_1ad36b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad36b: // 0160:1ad36b
    al = memoryAGet(ds, 0x1f1cc4);
    if ((char)al < (char)memoryAGet(ds, 0x20eea2))
        goto loc_1ad37f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad37f: // 0160:1ad37f
    al = memoryAGet(ds, 0x1f1cc4);
    if (al != memoryAGet(ds, 0x20eea1))
        goto loc_1ad393;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad393: // 0160:1ad393
    esp += 4;
    return;
    // gap 81 bytes
loc_1ad3e5: // 0160:1ad3e5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x40;
    if (al)
        goto loc_1ad3f5;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad3f5: // 0160:1ad3f5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x80;
    if (al)
        goto loc_1ad405;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad405: // 0160:1ad405
    al = memoryAGet(ds, 0x1f1cc6);
    if ((char)al < (char)memoryAGet(ds, 0x20eea4))
        goto loc_1ad419;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad419: // 0160:1ad419
    al = memoryAGet(ds, 0x1f1cc6);
    if (al != memoryAGet(ds, 0x20eea3))
        goto loc_1ad42d;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad42d: // 0160:1ad42d
    esp += 4;
    return;
}
void sub_1ad258() // 0160:1ad258 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x224ba2);
    if (ax)
        goto loc_1ad299;
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c843, al);
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c840, 0x00);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad299: // 0160:1ad299
    if (ax != 0x0001)
        goto loc_1ad2d5;
    sub_1ad572();
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c843, al);
    sub_1ad521();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c842, al);
    memoryASet(ds, 0x20c840, 0x00);
    memoryASet(ds, 0x20c841, 0x00);
    sub_1ad34b();
    goto loc_1ad3e5;
loc_1ad2d5: // 0160:1ad2d5
    sub_1ad47f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x10;
    if (!al)
        goto loc_1ad2ea;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad2ea: // 0160:1ad2ea
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    sub_1ad4d0();
    al = memoryAGet(ds, 0x20c841);
    al &= 0x10;
    if (!al)
        goto loc_1ad306;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad306: // 0160:1ad306
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
    sub_1ad5c3();
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x10);
    al = memoryAGet(ds, 0x20c842);
    memoryASet(ds, 0x20c843, al);
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c842, al);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c841, al);
    memoryASet(ds, 0x20c840, 0x00);
    sub_1ad34b();
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
    esp += 4;
    return;
    // gap 154 bytes
loc_1ad3e5: // 0160:1ad3e5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x40;
    if (al)
        goto loc_1ad3f5;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad3f5: // 0160:1ad3f5
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x80;
    if (al)
        goto loc_1ad405;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad405: // 0160:1ad405
    al = memoryAGet(ds, 0x1f1cc6);
    if ((char)al < (char)memoryAGet(ds, 0x20eea4))
        goto loc_1ad419;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad419: // 0160:1ad419
    al = memoryAGet(ds, 0x1f1cc6);
    if (al != memoryAGet(ds, 0x20eea3))
        goto loc_1ad42d;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad42d: // 0160:1ad42d
    esp += 4;
    return;
}
void sub_1ad34b() // 0160:1ad34b +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x10;
    if (al)
        goto loc_1ad35b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad35b: // 0160:1ad35b
    al = memoryAGet(ds, 0x1f1cc3);
    al &= 0x20;
    if (al)
        goto loc_1ad36b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad36b: // 0160:1ad36b
    al = memoryAGet(ds, 0x1f1cc4);
    if ((char)al < (char)memoryAGet(ds, 0x20eea2))
        goto loc_1ad37f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad37f: // 0160:1ad37f
    al = memoryAGet(ds, 0x1f1cc4);
    if (al != memoryAGet(ds, 0x20eea1))
        goto loc_1ad393;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad393: // 0160:1ad393
    esp += 4;
    return;
}
void sub_1ad42e() // 0160:1ad42e +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1ad442;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad442: // 0160:1ad442
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad456;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad456: // 0160:1ad456
    al = memoryAGet(ds, 0x30b089);
    if (!al)
        goto loc_1ad46a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad46a: // 0160:1ad46a
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1ad47e;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad47e: // 0160:1ad47e
    esp += 4;
    return;
}
void sub_1ad47f() // 0160:1ad47f +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b09a);
    if (!al)
        goto loc_1ad493;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad493: // 0160:1ad493
    al = memoryAGet(ds, 0x30b09c);
    if (!al)
        goto loc_1ad4a7;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad4a7: // 0160:1ad4a7
    al = memoryAGet(ds, 0x30b09d);
    if (!al)
        goto loc_1ad4bb;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad4bb: // 0160:1ad4bb
    al = memoryAGet(ds, 0x30b08d);
    if (!al)
        goto loc_1ad4cf;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad4cf: // 0160:1ad4cf
    esp += 4;
    return;
}
void sub_1ad4d0() // 0160:1ad4d0 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1ad4e4;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad4e4: // 0160:1ad4e4
    al = memoryAGet(ds, 0x30b08a);
    if (!al)
        goto loc_1ad4f8;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad4f8: // 0160:1ad4f8
    al = memoryAGet(ds, 0x30b08b);
    if (!al)
        goto loc_1ad50c;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad50c: // 0160:1ad50c
    al = memoryAGet(ds, 0x30b096);
    if (!al)
        goto loc_1ad520;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad520: // 0160:1ad520
    esp += 4;
    return;
}
void sub_1ad521() // 0160:1ad521 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b091);
    if (!al)
        goto loc_1ad535;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1ad535: // 0160:1ad535
    al = memoryAGet(ds, 0x30b09c);
    if (!al)
        goto loc_1ad549;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1ad549: // 0160:1ad549
    al = memoryAGet(ds, 0x30b09d);
    if (!al)
        goto loc_1ad55d;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1ad55d: // 0160:1ad55d
    al = memoryAGet(ds, 0x30b09e);
    if (!al)
        goto loc_1ad571;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1ad571: // 0160:1ad571
    esp += 4;
    return;
}
void sub_1ad572() // 0160:1ad572 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b0a6);
    if (!al)
        goto loc_1ad586;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x10);
loc_1ad586: // 0160:1ad586
    al = memoryAGet(ds, 0x30b097);
    if (!al)
        goto loc_1ad59a;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x04);
loc_1ad59a: // 0160:1ad59a
    al = memoryAGet(ds, 0x30b098);
    if (!al)
        goto loc_1ad5ae;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x08);
loc_1ad5ae: // 0160:1ad5ae
    al = memoryAGet(ds, 0x30b0ed);
    if (!al)
        goto loc_1ad5c2;
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) | 0x40);
loc_1ad5c2: // 0160:1ad5c2
    esp += 4;
    return;
}
void sub_1ad5c3() // 0160:1ad5c3 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x30b0c0);
    if (!al)
        goto loc_1ad5d7;
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x04);
loc_1ad5d7: // 0160:1ad5d7
    al = memoryAGet(ds, 0x30b0c1);
    if (!al)
        goto loc_1ad5eb;
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x08);
loc_1ad5eb: // 0160:1ad5eb
    al = memoryAGet(ds, 0x30b0bb);
    if (!al)
        goto loc_1ad5ff;
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) | 0x40);
loc_1ad5ff: // 0160:1ad5ff
    esp += 4;
    return;
}
void sub_1ad600() // 0160:1ad600 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x2eebd0);
loc_1ad605: // 0160:1ad605
    sync();
    if (memoryAGet32(ds, 0x2eebd0) == eax)
        goto loc_1ad605;
    esp += 4;
}
void sub_1ad60e() // 0160:1ad60e +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d081) & 0xffff)
        goto loc_1ad677;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ad677;
    if (memoryAGet16(ds, 0x20d7a3) & 0xffff)
        goto loc_1ad637;
    memoryASet16(ds, 0x20d7a3, 0x0001);
loc_1ad637: // 0160:1ad637
    eax = 0x00000001;
    ecx = 0x00000004;
    esi = 0x0020d1f7;
loc_1ad646: // 0160:1ad646
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1ad65a;
    if (ax == memoryAGet16(ds, esi))
        goto loc_1ad65a;
    esi++;
    esi++;
    if (--ecx)
        goto loc_1ad646;
loc_1ad65a: // 0160:1ad65a
    memoryASet16(ds, esi, ax);
    if (!(memoryAGet16(ds, 0x20cfa9) & 0xffff))
        goto loc_1ad670;
    memoryASet16(ds, 0x20cfa9, memoryAGet16(ds, 0x20cfa9) - 0x0004);
loc_1ad670: // 0160:1ad670
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x8f);
loc_1ad677: // 0160:1ad677
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1ad695;
    if (memoryAGet16(ds, 0x20cf85) != 0x0023)
        goto loc_1ad695;
    memoryASet16(ds, 0x20cf85, 0x002e);
loc_1ad695: // 0160:1ad695
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0024)
        goto loc_1ad86d;
    if (memoryAGet16(ds, 0x20cf85) < 0x0020)
        goto loc_1ad6db;
    bx = memoryAGet16(ds, 0x20cf4f);
    cx = memoryAGet16(ds, 0x20cf61);
    ax = memoryAGet16(ds, 0x20cf97);
    dl = memoryAGet(ds, 0x20d123);
    sub_1cd983();
    memoryASet16(ds, 0x20cf4f, bx);
    memoryASet16(ds, 0x20cf61, cx);
    esp += 4;
    return;
loc_1ad6db: // 0160:1ad6db
    ax = memoryAGet16(ds, 0x20d0ff);
    memoryASet16(ds, 0x20d10f, ax);
    ax = memoryAGet16(ds, 0x20d06f);
    memoryASet16(ds, 0x20e801, ax);
    ax = memoryAGet16(ds, 0x20d05d);
    memoryASet16(ds, 0x20e805, ax);
    sub_1adf52();
    ax = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20d05d, ax);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d06f, ax);
    memoryASet16(ds, 0x20d07f, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20cf73);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf85);
    memoryASet16(ds, 0x20cf95, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20cfbb);
    memoryASet16(ds, 0x20cfcb, ax);
    ax = memoryAGet16(ds, 0x20cfcd);
    memoryASet16(ds, 0x20cfdd, ax);
    ax = memoryAGet16(ds, 0x20cfdf);
    memoryASet16(ds, 0x20cfef, ax);
    ax = memoryAGet16(ds, 0x20cff1);
    memoryASet16(ds, 0x20d001, ax);
    ax = memoryAGet16(ds, 0x20d003);
    memoryASet16(ds, 0x20d013, ax);
    ax = memoryAGet16(ds, 0x20d015);
    memoryASet16(ds, 0x20d025, ax);
    ax = memoryAGet16(ds, 0x20d027);
    memoryASet16(ds, 0x20d037, ax);
    ax = memoryAGet16(ds, 0x20d039);
    memoryASet16(ds, 0x20d049, ax);
    ax = memoryAGet16(ds, 0x20d217);
    memoryASet16(ds, 0x20d21f, ax);
    al = memoryAGet(ds, 0x20d123);
    memoryASet(ds, 0x20d133, al);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c848, al);
    sub_1ae073();
    ax = memoryAGet16(ds, 0x20d21f);
    memoryASet16(ds, 0x20d217, ax);
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf4f, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf61, ax);
    ax = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf73, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    memoryASet16(ds, 0x20cf85, ax);
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20cf97, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    memoryASet16(ds, 0x20cfa9, ax);
    ax = memoryAGet16(ds, 0x20cfcb);
    memoryASet16(ds, 0x20cfbb, ax);
    ax = memoryAGet16(ds, 0x20cfdd);
    memoryASet16(ds, 0x20cfcd, ax);
    ax = memoryAGet16(ds, 0x20d049);
    memoryASet16(ds, 0x20d039, ax);
loc_1ad86d: // 0160:1ad86d
    esp += 4;
    return;
}
void sub_1ad86e() // 0160:1ad86e +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d083) & 0xffff)
        goto loc_1ad8c3;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ad8c3;
    eax = 0x00000002;
    ecx = 0x00000004;
    esi = 0x0020d1f7;
loc_1ad892: // 0160:1ad892
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1ad8a6;
    if (ax == memoryAGet16(ds, esi))
        goto loc_1ad8a6;
    esi++;
    esi++;
    if (--ecx)
        goto loc_1ad892;
loc_1ad8a6: // 0160:1ad8a6
    memoryASet16(ds, esi, ax);
    if (!(memoryAGet16(ds, 0x20cfab) & 0xffff))
        goto loc_1ad8bc;
    memoryASet16(ds, 0x20cfab, memoryAGet16(ds, 0x20cfab) - 0x0004);
loc_1ad8bc: // 0160:1ad8bc
    memoryASet(ds, 0x20c841, memoryAGet(ds, 0x20c841) & 0x8f);
loc_1ad8c3: // 0160:1ad8c3
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1ad8e1;
    if (memoryAGet16(ds, 0x20cf87) != 0x0023)
        goto loc_1ad8e1;
    memoryASet16(ds, 0x20cf87, 0x002e);
loc_1ad8e1: // 0160:1ad8e1
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0024)
        goto loc_1adab9;
    if (memoryAGet16(ds, 0x20cf87) < 0x0020)
        goto loc_1ad927;
    bx = memoryAGet16(ds, 0x20cf51);
    cx = memoryAGet16(ds, 0x20cf63);
    ax = memoryAGet16(ds, 0x20cf99);
    dl = memoryAGet(ds, 0x20d125);
    sub_1cd983();
    memoryASet16(ds, 0x20cf51, bx);
    memoryASet16(ds, 0x20cf63, cx);
    esp += 4;
    return;
loc_1ad927: // 0160:1ad927
    ax = memoryAGet16(ds, 0x20d101);
    memoryASet16(ds, 0x20d10f, ax);
    ax = memoryAGet16(ds, 0x20d071);
    memoryASet16(ds, 0x20e801, ax);
    ax = memoryAGet16(ds, 0x20d05f);
    memoryASet16(ds, 0x20e805, ax);
    sub_1adf52();
    ax = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20d05f, ax);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d071, ax);
    memoryASet16(ds, 0x20d07f, ax);
    ax = memoryAGet16(ds, 0x20cf51);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf63);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20cf75);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf87);
    memoryASet16(ds, 0x20cf95, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20cfbd);
    memoryASet16(ds, 0x20cfcb, ax);
    ax = memoryAGet16(ds, 0x20cfcf);
    memoryASet16(ds, 0x20cfdd, ax);
    ax = memoryAGet16(ds, 0x20cfe1);
    memoryASet16(ds, 0x20cfef, ax);
    ax = memoryAGet16(ds, 0x20cff3);
    memoryASet16(ds, 0x20d001, ax);
    ax = memoryAGet16(ds, 0x20d005);
    memoryASet16(ds, 0x20d013, ax);
    ax = memoryAGet16(ds, 0x20d017);
    memoryASet16(ds, 0x20d025, ax);
    ax = memoryAGet16(ds, 0x20d029);
    memoryASet16(ds, 0x20d037, ax);
    ax = memoryAGet16(ds, 0x20d03b);
    memoryASet16(ds, 0x20d049, ax);
    ax = memoryAGet16(ds, 0x20d219);
    memoryASet16(ds, 0x20d21f, ax);
    al = memoryAGet(ds, 0x20d125);
    memoryASet(ds, 0x20d133, al);
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c848, al);
    sub_1ae073();
    ax = memoryAGet16(ds, 0x20d21f);
    memoryASet16(ds, 0x20d219, ax);
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf51, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf63, ax);
    ax = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf75, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    memoryASet16(ds, 0x20cf87, ax);
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20cf99, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    memoryASet16(ds, 0x20cfab, ax);
    ax = memoryAGet16(ds, 0x20cfcb);
    memoryASet16(ds, 0x20cfbd, ax);
    ax = memoryAGet16(ds, 0x20cfdd);
    memoryASet16(ds, 0x20cfcf, ax);
    ax = memoryAGet16(ds, 0x20d049);
    memoryASet16(ds, 0x20d03b, ax);
loc_1adab9: // 0160:1adab9
    esp += 4;
    return;
}
void sub_1adaba() // 0160:1adaba +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d085) & 0xffff)
        goto loc_1adb0f;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1adb0f;
    eax = 0x00000003;
    ecx = 0x00000004;
    esi = 0x0020d1f7;
loc_1adade: // 0160:1adade
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1adaf2;
    if (ax == memoryAGet16(ds, esi))
        goto loc_1adaf2;
    esi++;
    esi++;
    if (--ecx)
        goto loc_1adade;
loc_1adaf2: // 0160:1adaf2
    memoryASet16(ds, esi, ax);
    if (!(memoryAGet16(ds, 0x20cfad) & 0xffff))
        goto loc_1adb08;
    memoryASet16(ds, 0x20cfad, memoryAGet16(ds, 0x20cfad) - 0x0004);
loc_1adb08: // 0160:1adb08
    memoryASet(ds, 0x20c842, memoryAGet(ds, 0x20c842) & 0x8f);
loc_1adb0f: // 0160:1adb0f
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1adb2d;
    if (memoryAGet16(ds, 0x20cf89) != 0x0023)
        goto loc_1adb2d;
    memoryASet16(ds, 0x20cf89, 0x002e);
loc_1adb2d: // 0160:1adb2d
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0024)
        goto loc_1add05;
    if (memoryAGet16(ds, 0x20cf89) < 0x0020)
        goto loc_1adb73;
    bx = memoryAGet16(ds, 0x20cf53);
    cx = memoryAGet16(ds, 0x20cf65);
    ax = memoryAGet16(ds, 0x20cf9b);
    dl = memoryAGet(ds, 0x20d127);
    sub_1cd983();
    memoryASet16(ds, 0x20cf53, bx);
    memoryASet16(ds, 0x20cf65, cx);
    esp += 4;
    return;
loc_1adb73: // 0160:1adb73
    ax = memoryAGet16(ds, 0x20d103);
    memoryASet16(ds, 0x20d10f, ax);
    ax = memoryAGet16(ds, 0x20d073);
    memoryASet16(ds, 0x20e801, ax);
    ax = memoryAGet16(ds, 0x20d061);
    memoryASet16(ds, 0x20e805, ax);
    sub_1adf52();
    ax = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20d061, ax);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d073, ax);
    memoryASet16(ds, 0x20d07f, ax);
    ax = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20cf77);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf89);
    memoryASet16(ds, 0x20cf95, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20cfbf);
    memoryASet16(ds, 0x20cfcb, ax);
    ax = memoryAGet16(ds, 0x20cfd1);
    memoryASet16(ds, 0x20cfdd, ax);
    ax = memoryAGet16(ds, 0x20cfe3);
    memoryASet16(ds, 0x20cfef, ax);
    ax = memoryAGet16(ds, 0x20cff5);
    memoryASet16(ds, 0x20d001, ax);
    ax = memoryAGet16(ds, 0x20d007);
    memoryASet16(ds, 0x20d013, ax);
    ax = memoryAGet16(ds, 0x20d019);
    memoryASet16(ds, 0x20d025, ax);
    ax = memoryAGet16(ds, 0x20d02b);
    memoryASet16(ds, 0x20d037, ax);
    ax = memoryAGet16(ds, 0x20d03d);
    memoryASet16(ds, 0x20d049, ax);
    ax = memoryAGet16(ds, 0x20d21b);
    memoryASet16(ds, 0x20d21f, ax);
    al = memoryAGet(ds, 0x20d127);
    memoryASet(ds, 0x20d133, al);
    al = memoryAGet(ds, 0x20c842);
    memoryASet(ds, 0x20c848, al);
    sub_1ae073();
    ax = memoryAGet16(ds, 0x20d21f);
    memoryASet16(ds, 0x20d21b, ax);
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf77, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    memoryASet16(ds, 0x20cf89, ax);
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20cf9b, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    memoryASet16(ds, 0x20cfad, ax);
    ax = memoryAGet16(ds, 0x20cfcb);
    memoryASet16(ds, 0x20cfbf, ax);
    ax = memoryAGet16(ds, 0x20cfdd);
    memoryASet16(ds, 0x20cfd1, ax);
    ax = memoryAGet16(ds, 0x20d049);
    memoryASet16(ds, 0x20d03d, ax);
loc_1add05: // 0160:1add05
    esp += 4;
    return;
}
void sub_1add06() // 0160:1add06 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d087) & 0xffff)
        goto loc_1add5b;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1add5b;
    eax = 0x00000004;
    ecx = 0x00000004;
    esi = 0x0020d1f7;
loc_1add2a: // 0160:1add2a
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1add3e;
    if (ax == memoryAGet16(ds, esi))
        goto loc_1add3e;
    esi++;
    esi++;
    if (--ecx)
        goto loc_1add2a;
loc_1add3e: // 0160:1add3e
    memoryASet16(ds, esi, ax);
    if (!(memoryAGet16(ds, 0x20cfaf) & 0xffff))
        goto loc_1add54;
    memoryASet16(ds, 0x20cfaf, memoryAGet16(ds, 0x20cfaf) - 0x0004);
loc_1add54: // 0160:1add54
    memoryASet(ds, 0x20c843, memoryAGet(ds, 0x20c843) & 0x8f);
loc_1add5b: // 0160:1add5b
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1add79;
    if (memoryAGet16(ds, 0x20cf8b) != 0x0023)
        goto loc_1add79;
    memoryASet16(ds, 0x20cf8b, 0x002e);
loc_1add79: // 0160:1add79
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0024)
        goto loc_1adf51;
    if (memoryAGet16(ds, 0x20cf8b) < 0x0020)
        goto loc_1addbf;
    bx = memoryAGet16(ds, 0x20cf55);
    cx = memoryAGet16(ds, 0x20cf67);
    ax = memoryAGet16(ds, 0x20cf9d);
    dl = memoryAGet(ds, 0x20d129);
    sub_1cd983();
    memoryASet16(ds, 0x20cf55, bx);
    memoryASet16(ds, 0x20cf67, cx);
    esp += 4;
    return;
loc_1addbf: // 0160:1addbf
    ax = memoryAGet16(ds, 0x20d105);
    memoryASet16(ds, 0x20d10f, ax);
    ax = memoryAGet16(ds, 0x20d075);
    memoryASet16(ds, 0x20e801, ax);
    ax = memoryAGet16(ds, 0x20d063);
    memoryASet16(ds, 0x20e805, ax);
    sub_1adf52();
    ax = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20d063, ax);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d075, ax);
    memoryASet16(ds, 0x20d07f, ax);
    ax = memoryAGet16(ds, 0x20cf55);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf67);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20cf79);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf8b);
    memoryASet16(ds, 0x20cf95, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20cfc1);
    memoryASet16(ds, 0x20cfcb, ax);
    ax = memoryAGet16(ds, 0x20cfd3);
    memoryASet16(ds, 0x20cfdd, ax);
    ax = memoryAGet16(ds, 0x20cfe5);
    memoryASet16(ds, 0x20cfef, ax);
    ax = memoryAGet16(ds, 0x20cff7);
    memoryASet16(ds, 0x20d001, ax);
    ax = memoryAGet16(ds, 0x20d009);
    memoryASet16(ds, 0x20d013, ax);
    ax = memoryAGet16(ds, 0x20d01b);
    memoryASet16(ds, 0x20d025, ax);
    ax = memoryAGet16(ds, 0x20d02d);
    memoryASet16(ds, 0x20d037, ax);
    ax = memoryAGet16(ds, 0x20d03f);
    memoryASet16(ds, 0x20d049, ax);
    ax = memoryAGet16(ds, 0x20d21d);
    memoryASet16(ds, 0x20d21f, ax);
    al = memoryAGet(ds, 0x20d129);
    memoryASet(ds, 0x20d133, al);
    al = memoryAGet(ds, 0x20c843);
    memoryASet(ds, 0x20c848, al);
    sub_1ae073();
    ax = memoryAGet16(ds, 0x20d21f);
    memoryASet16(ds, 0x20d21d, ax);
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf55, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf67, ax);
    ax = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf79, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    memoryASet16(ds, 0x20cf8b, ax);
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20cf9d, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    memoryASet16(ds, 0x20cfaf, ax);
    ax = memoryAGet16(ds, 0x20cfcb);
    memoryASet16(ds, 0x20cfc1, ax);
    ax = memoryAGet16(ds, 0x20cfdd);
    memoryASet16(ds, 0x20cfd3, ax);
    ax = memoryAGet16(ds, 0x20d049);
    memoryASet16(ds, 0x20d03f, ax);
loc_1adf51: // 0160:1adf51
    esp += 4;
    return;
}
void sub_1adf52() // 0160:1adf52 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20e801) & 0xffff)
        goto loc_1adf6c;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1ae072;
loc_1adf6c: // 0160:1adf6c
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - 0x0001);
    ax = memoryAGet16(ds, 0x20e801);
    if ((short)ax >= 0)
        goto loc_1adfa4;
    ax = -ax;
    if ((short)ax <= (short)0x003f)
        goto loc_1adf8e;
    ax = 0xfff8;
    goto loc_1adfc1;
loc_1adf8e: // 0160:1adf8e
    esi = 0x00204f38;
    eax &= 0x0000ffff;
    al = memoryAGet(ds, esi + eax);
    ax &= 0x00ff;
    ax = -ax;
    goto loc_1adfc1;
loc_1adfa4: // 0160:1adfa4
    if ((short)ax <= (short)0x003f)
        goto loc_1adfb0;
    ax = 0x0008;
    goto loc_1adfc1;
loc_1adfb0: // 0160:1adfb0
    esi = 0x00204f38;
    eax &= 0x0000ffff;
    al = memoryAGet(ds, esi + eax);
    ax &= 0x00ff;
loc_1adfc1: // 0160:1adfc1
    bx = memoryAGet16(ds, 0x20e805);
    bx += ax;
    if ((short)bx >= 0)
        goto loc_1adffe;
    ax = memoryAGet16(ds, 0x20e801);
    ax = -ax;
    bx = ax;
    if (memoryAGet16(ds, 0x20edcf) & 0xffff)
        goto loc_1adfea;
    ax >>= 2;
    goto loc_1adfee;
loc_1adfea: // 0160:1adfea
    ax >>= 5;
loc_1adfee: // 0160:1adfee
    bx >>= 1;
    bx -= ax;
    memoryASet16(ds, 0x20e801, bx);
    bx = 0;
loc_1adffe: // 0160:1adffe
    memoryASet16(ds, 0x20e805, bx);
    if (bx)
        goto loc_1ae072;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x0002)
        goto loc_1ae072;
    if (!(memoryAGet16(ds, 0x20d10f) & 0xffff))
        goto loc_1ae072;
    push(memoryAGet16(ds, 0x20e801));
    push(memoryAGet16(ds, 0x20e805));
    al = 0x57;
    if (memoryAGet16(ds, 0x20d7b9) == 0x002b)
        goto loc_1ae04d;
    if (memoryAGet16(ds, 0x20d7b9) != 0x000f)
        goto loc_1ae051;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x0004)
        goto loc_1ae05f;
loc_1ae04d: // 0160:1ae04d
    al = 0x86;
    goto loc_1ae05f;
loc_1ae051: // 0160:1ae051
    al = 0x55;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x0004)
        goto loc_1ae05f;
    al = 0x6d;
loc_1ae05f: // 0160:1ae05f
    sub_1b17b7();
    memoryASet16(ds, 0x20e805, pop());
    memoryASet16(ds, 0x20e801, pop());
loc_1ae072: // 0160:1ae072
    esp += 4;
    return;
}
void sub_1ae073() // 0160:1ae073 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ee47) & 0xffff))
        goto loc_1ae0bb;
    memoryASet(ds, 0x20c848, 0x00);
    ax = memoryAGet16(ds, 0x20cf83);
    ax <<= 5;
    bx = ax;
    ax -= memoryAGet16(ds, 0x20cfa7);
    ax &= 0x03ff;
    if ((short)ax <= (short)0x0160)
        goto loc_1ae0a9;
    if ((short)ax <= (short)0x02a0)
        goto loc_1ae0bb;
loc_1ae0a9: // 0160:1ae0a9
    if (!(memoryAGet16(ds, 0x20cfb9) & 0xffff))
        goto loc_1ae0bb;
    memoryASet(ds, 0x20c840, 0x40);
loc_1ae0bb: // 0160:1ae0bb
    memoryASet32(ds, 0x20d805, 0x00000000);
    memoryASet32(ds, 0x20d809, 0x00000000);
    al = memoryAGet(ds, 0x20d133);
    if (!al)
        goto loc_1ae166;
    if (al == 0x10)
        goto loc_1ae198;
    if (al == 0x18)
        goto loc_1ae12d;
    if (al != 0x08)
        goto loc_1ae29d;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cf83);
    ax += 0x0008;
    ax &= 0x001f;
    ax <<= 3;
    esi = 0x00204f78;
    ebp = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d809, ebp);
    eax = memoryAGet32(ds, esi + eax + 4);
    eax = -eax;
    memoryASet32(ds, 0x20d805, eax);
    cx = memoryAGet16(ds, 0x20cf83);
    cx -= 0x0008;
    goto loc_1ae1cb;
loc_1ae12d: // 0160:1ae12d
    eax = 0;
    ax = memoryAGet16(ds, 0x20cf83);
    ax += 0x0008;
    ax &= 0x001f;
    ax <<= 3;
    esi = 0x00204f78;
    ebp = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d809, ebp);
    ebp = memoryAGet32(ds, esi + eax + 4);
    memoryASet32(ds, 0x20d805, ebp);
    cx = memoryAGet16(ds, 0x20cf83);
    cx -= 0x0018;
    goto loc_1ae1cb;
loc_1ae166: // 0160:1ae166
    eax = 0;
    ax = memoryAGet16(ds, 0x20cf83);
    ax &= 0x001f;
    ax <<= 3;
    esi = 0x00204f78;
    ebp = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d805, ebp);
    eax = memoryAGet32(ds, esi + eax + 4);
    eax = -eax;
    memoryASet32(ds, 0x20d809, eax);
    cx = memoryAGet16(ds, 0x20cf83);
    goto loc_1ae1cb;
loc_1ae198: // 0160:1ae198
    eax = 0;
    ax = memoryAGet16(ds, 0x20cf83);
    ax &= 0x001f;
    ax <<= 3;
    esi = 0x00204f78;
    ebp = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d805, ebp);
    ebp = memoryAGet32(ds, esi + eax + 4);
    memoryASet32(ds, 0x20d809, ebp);
    cx = memoryAGet16(ds, 0x20cf83);
    cx -= 0x0010;
loc_1ae1cb: // 0160:1ae1cb
    cx &= 0x001f;
    if ((short)cx < (short)0x0010)
        goto loc_1ae1df;
    dx = 0x0020;
    dx -= cx;
    cx = dx;
loc_1ae1df: // 0160:1ae1df
    dx = 0x0010;
    dx -= cx;
    if ((short)dx <= (short)0x0008)
        goto loc_1ae1fb;
    dx -= 0x0008;
    dx <<= 4;
    memoryASet16(ds, 0x20d001, memoryAGet16(ds, 0x20d001) + dx);
loc_1ae1fb: // 0160:1ae1fb
    if (!(memoryAGet16(ds, 0x20cfb9) & 0xffff))
        goto loc_1ae29d;
    al = memoryAGet(ds, 0x20c848);
    al &= 0x0c;
    if (al)
        goto loc_1ae29d;
    eax = 0;
    al = memoryAGet(ds, 0x20d133);
    bx = memoryAGet16(ds, 0x20cf83);
    if ((short)bx >= (short)0x0020)
        goto loc_1ae29d;
    if (bx == ax)
        goto loc_1ae29d;
    ax -= bx;
    ax &= 0x001f;
    if (ax == 0x0010)
        goto loc_1ae29d;
    cx = memoryAGet16(ds, 0x20c830);
    if ((short)cx < (short)0x0004)
        goto loc_1ae280;
    if ((short)ax > (short)0x001c)
        goto loc_1ae280;
    if ((short)ax < (short)0x0008)
        goto loc_1ae278;
    if ((short)ax > (short)0x0018)
        goto loc_1ae278;
    if ((short)ax < (short)0x000c)
        goto loc_1ae270;
    if ((short)ax > (short)0x0014)
        goto loc_1ae270;
    cx &= 0x001f;
    if (cx)
        goto loc_1ae29d;
    if (!cx)
        goto loc_1ae286;
loc_1ae270: // 0160:1ae270
    cx &= 0x000f;
    if (cx)
        goto loc_1ae29d;
    if (!cx)
        goto loc_1ae286;
loc_1ae278: // 0160:1ae278
    cx &= 0x0007;
    if (cx)
        goto loc_1ae29d;
    if (!cx)
        goto loc_1ae286;
loc_1ae280: // 0160:1ae280
    cx &= 0x0003;
    if (cx)
        goto loc_1ae29d;
loc_1ae286: // 0160:1ae286
    if ((short)ax < (short)0x0010)
        goto loc_1ae290;
    bx -= 0x0002;
loc_1ae290: // 0160:1ae290
    bx++;
    bx &= 0x001f;
    memoryASet16(ds, 0x20cf83, bx);
loc_1ae29d: // 0160:1ae29d
    bp = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20d2cb, bp);
    if (!(memoryAGet16(ds, 0x20d21f) & 0xffff))
        goto loc_1ae2d9;
    memoryASet16(ds, 0x20d21f, memoryAGet16(ds, 0x20d21f) - 0x0001);
    memoryASet16(ds, 0x20d013, 0x0006);
    memoryASet16(ds, 0x20d025, 0x0001);
    memoryASet16(ds, 0x20d037, 0x0002);
loc_1ae2d9: // 0160:1ae2d9
    ax = memoryAGet16(ds, 0x20cfb9);
    if ((short)ax <= (short)0x0200)
        goto loc_1ae2e9;
    ax = 0x0200;
loc_1ae2e9: // 0160:1ae2e9
    ax >>= 1;
    bx = 0x0100;
    bx -= ax;
    bx >>= 3;
    bx += 0x000a;
    memoryASet16(ds, 0x20ceb3, bx);
    ax = memoryAGet16(ds, 0x20cf83);
    ax <<= 5;
    bx = ax;
    ax -= memoryAGet16(ds, 0x20cfa7);
    ax &= 0x03ff;
    if ((short)ax <= (short)0x0160)
        goto loc_1ae33c;
    if ((short)ax >= (short)0x02a0)
        goto loc_1ae33c;
    memoryASet16(ds, 0x20d7d1, 0x0001);
    ax = bx;
    ax += 0x0200;
    ax &= 0x03ff;
    goto loc_1ae348;
loc_1ae33c: // 0160:1ae33c
    memoryASet16(ds, 0x20d7d1, 0x0000);
    ax = bx;
loc_1ae348: // 0160:1ae348
    bx = memoryAGet16(ds, 0x20d049);
    cx = bx;
    cx -= ax;
    if (!cx)
        goto loc_1ae3fa;
    cx &= 0x03ff;
    if ((short)cx >= (short)0x0200)
        goto loc_1ae3aa;
    if ((short)cx <= (short)0x0080)
        goto loc_1ae38a;
    bx -= memoryAGet16(ds, 0x20ceb3);
    if ((short)cx <= (short)0x0100)
        goto loc_1ae38a;
    bx -= memoryAGet16(ds, 0x20ceb3);
    if ((short)cx >= (short)0x0180)
        goto loc_1ae3eb;
loc_1ae38a: // 0160:1ae38a
    bx -= memoryAGet16(ds, 0x20ceb3);
    bx &= 0x03ff;
    cx = bx;
    cx -= ax;
    cx &= 0x03ff;
    if ((short)cx <= (short)0x0200)
        goto loc_1ae3ee;
    goto loc_1ae3eb;
loc_1ae3aa: // 0160:1ae3aa
    if ((short)cx >= (short)0x0380)
        goto loc_1ae3cd;
    bx += memoryAGet16(ds, 0x20ceb3);
    if ((short)cx >= (short)0x0300)
        goto loc_1ae3cd;
    bx += memoryAGet16(ds, 0x20ceb3);
    if ((short)cx <= (short)0x0280)
        goto loc_1ae3eb;
loc_1ae3cd: // 0160:1ae3cd
    bx += memoryAGet16(ds, 0x20ceb3);
    bx &= 0x03ff;
    cx = bx;
    cx -= ax;
    cx &= 0x03ff;
    if ((short)cx >= (short)0x0200)
        goto loc_1ae3ee;
loc_1ae3eb: // 0160:1ae3eb
    bx = ax;
loc_1ae3ee: // 0160:1ae3ee
    bx &= 0x03ff;
    memoryASet16(ds, 0x20d049, bx);
loc_1ae3fa: // 0160:1ae3fa
    al = memoryAGet(ds, 0x20c848);
    al &= 0x40;
    if (!al)
        goto loc_1ae40e;
    if (!(memoryAGet16(ds, 0x20d7d1) & 0xffff))
        goto loc_1ae452;
loc_1ae40e: // 0160:1ae40e
    if (memoryAGet16(ds, 0x20d7b9) == 0x000f)
        goto loc_1ae452;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0004)
        goto loc_1ae46b;
    bx -= memoryAGet16(ds, 0x20cfa7);
    if (bx >= memoryAGet16(ds, 0x20d7f7))
        goto loc_1ae46b;
    if (bx < memoryAGet16(ds, 0x20d7f9))
        goto loc_1ae46b;
    if (memoryAGet16(ds, 0x20d06d) & 0xffff)
        goto loc_1ae46b;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1ae46b;
loc_1ae452: // 0160:1ae452
    ax = memoryAGet16(ds, 0x20cf95);
    bx = memoryAGet16(ds, 0x20cf5f);
    cx = memoryAGet16(ds, 0x20cf71);
    sub_1b0c20();
loc_1ae46b: // 0160:1ae46b
    cx = memoryAGet16(ds, 0x20cf95);
    bp = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf95, bp);
    ax = memoryAGet16(ds, 0x20cfef);
    bx = memoryAGet16(ds, 0x20cfdd);
    bx++;
    if (bx != ax)
        goto loc_1ae4a2;
    memoryASet16(ds, 0x20cfdd, 0x0000);
    goto loc_1ae578;
loc_1ae4a2: // 0160:1ae4a2
    memoryASet16(ds, 0x20cfdd, bx);
    al = memoryAGet(ds, 0x20c848);
    al &= 0x08;
    if (!al)
        goto loc_1ae4eb;
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) + 0x0001);
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) & 0x001f);
    ax = memoryAGet16(ds, 0x20cf95);
    sub_1afd83();
    if (!ax)
        goto loc_1ae615;
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) - 0x0001);
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) & 0x001f);
    goto loc_1ae615;
loc_1ae4eb: // 0160:1ae4eb
    al = memoryAGet(ds, 0x20c848);
    al &= 0x04;
    if (!al)
        goto loc_1ae52d;
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) - 0x0001);
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) & 0x001f);
    ax = memoryAGet16(ds, 0x20cf95);
    sub_1afd83();
    if (!ax)
        goto loc_1ae615;
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) + 0x0001);
    memoryASet16(ds, 0x20cf95, memoryAGet16(ds, 0x20cf95) & 0x001f);
    goto loc_1ae615;
loc_1ae52d: // 0160:1ae52d
    if (cx == memoryAGet16(ds, 0x20cf83))
        goto loc_1ae634;
    if (!(memoryAGet16(ds, 0x20edff) & 0xffff))
        goto loc_1ae634;
    ax = cx;
    ax &= 0x0001;
    if (ax)
        goto loc_1ae634;
    ax = cx;
    ax -= memoryAGet16(ds, 0x20cf83);
    if (ax == 0x0001)
        goto loc_1ae56c;
    if (ax != 0xffff)
        goto loc_1ae573;
loc_1ae56c: // 0160:1ae56c
    memoryASet16(ds, 0x20cf83, cx);
loc_1ae573: // 0160:1ae573
    goto loc_1ae634;
loc_1ae578: // 0160:1ae578
    al = memoryAGet(ds, 0x20c848);
    al &= 0x08;
    if (!al)
        goto loc_1ae5b3;
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) + 0x0001);
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) & 0x001f);
    ax = memoryAGet16(ds, 0x20cf83);
    sub_1afd83();
    if (!ax)
        goto loc_1ae5ec;
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) - 0x0001);
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) & 0x001f);
    goto loc_1ae5ec;
loc_1ae5b3: // 0160:1ae5b3
    al = memoryAGet(ds, 0x20c848);
    al &= 0x04;
    if (!al)
        goto loc_1ae634;
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) - 0x0001);
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) & 0x001f);
    ax = memoryAGet16(ds, 0x20cf83);
    sub_1afd83();
    if (!ax)
        goto loc_1ae5ec;
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) + 0x0001);
    memoryASet16(ds, 0x20cf83, memoryAGet16(ds, 0x20cf83) & 0x001f);
loc_1ae5ec: // 0160:1ae5ec
    bp = memoryAGet16(ds, 0x20cf83);
    memoryASet16(ds, 0x20cf95, bp);
    ax = memoryAGet16(ds, 0x20d013);
    ax >>= 1;
    memoryASet16(ds, 0x20cfb9, memoryAGet16(ds, 0x20cfb9) - ax);
    if ((short)memoryAGet16(ds, 0x20cfb9) >= 0)
        goto loc_1ae615;
    memoryASet16(ds, 0x20cfb9, 0x0000);
loc_1ae615: // 0160:1ae615
    ax = memoryAGet16(ds, 0x20cfb9);
    if (ax)
        goto loc_1ae634;
    bx = memoryAGet16(ds, 0x20d013);
    bx <<= 2;
    ax += bx;
    memoryASet16(ds, 0x20cfb9, ax);
loc_1ae634: // 0160:1ae634
    ax = memoryAGet16(ds, 0x20cfa7);
    bx = memoryAGet16(ds, 0x20cfb9);
    if (memoryAGet16(ds, 0x20d06d) & 0xffff)
        goto loc_1ae66c;
    dx = memoryAGet16(ds, 0x20cfb9);
    dx >>= 7;
    memoryASet16(ds, 0x20cec5, dx);
    dx += memoryAGet16(ds, 0x20d037);
    bx -= dx;
    if ((short)bx >= 0)
        goto loc_1ae66c;
    ebx = 0;
loc_1ae66c: // 0160:1ae66c
    sub_1cdb0a();
    memoryASet32(ds, 0x20cecb, eax);
    memoryASet32(ds, 0x20cecf, ebx);
    if (memoryAGet16(ds, 0x20d06d) & 0xffff)
        goto loc_1ae77e;
    cx = memoryAGet16(ds, 0x20cfb9);
    cx -= memoryAGet16(ds, 0x20d025);
    if ((short)cx >= 0)
        goto loc_1ae69e;
    cx = 0;
loc_1ae69e: // 0160:1ae69e
    memoryASet16(ds, 0x20cfb9, cx);
    ax = memoryAGet16(ds, 0x20d049);
    bx = memoryAGet16(ds, 0x20d037);
    bx -= memoryAGet16(ds, 0x20d025);
    bx += memoryAGet16(ds, 0x20cec5);
    if (bx < cx)
        goto loc_1ae6c8;
    bx = cx;
loc_1ae6c8: // 0160:1ae6c8
    sub_1cdb0a();
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + ebx);
    cl = memoryAGet(ds, 0x20c848);
    cl &= 0x40;
    if (cl)
        goto loc_1ae717;
    cl = memoryAGet(ds, 0x20c848);
    cl &= 0x10;
    if (!cl)
        goto loc_1ae77e;
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 5;
    bx = memoryAGet16(ds, 0x20d013);
    sub_1cdb0a();
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + ebx);
    goto loc_1ae77e;
loc_1ae717: // 0160:1ae717
    ax = memoryAGet16(ds, 0x20d001);
    ax >>= 1;
    if (ax >= memoryAGet16(ds, 0x20cfb9))
        goto loc_1ae74a;
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 5;
    ax -= memoryAGet16(ds, 0x20cfa7);
    ax &= 0x03ff;
    if ((short)ax <= (short)0x00ff)
        goto loc_1ae74a;
    if ((short)ax <= (short)0x0301)
        goto loc_1ae77e;
loc_1ae74a: // 0160:1ae74a
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 5;
    ax += 0x0200;
    ax &= 0x03ff;
    bx = memoryAGet16(ds, 0x20d013);
    cx = bx;
    cx >>= 2;
    bx -= cx;
    sub_1cdb0a();
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + ebx);
loc_1ae77e: // 0160:1ae77e
    ax = memoryAGet16(ds, 0x20cfb9);
    if ((short)ax >= (short)0x0080)
        goto loc_1ae793;
    al = memoryAGet(ds, 0x20c848);
    al &= 0x10;
    if (al)
        goto loc_1ae7aa;
loc_1ae793: // 0160:1ae793
    eax = memoryAGet32(ds, 0x20d805);
    ecx = memoryAGet32(ds, 0x20d809);
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + ecx);
loc_1ae7aa: // 0160:1ae7aa
    sub_1cdb89();
    eax = memoryAGet32(ds, 0x20d7fb);
    if (eax)
        goto loc_1ae7c2;
    ecx = memoryAGet32(ds, 0x20d7ff);
    if (!ecx)
        goto loc_1ae7ff;
loc_1ae7c2: // 0160:1ae7c2
    ecx = memoryAGet32(ds, 0x20d7ff);
    ebx = 0;
    bx = memoryAGet16(ds, 0x20cfb9);
    mul16(bx);
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    eax = ecx;
    mul16(bx);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + eax);
    ax = memoryAGet16(ds, 0x20cfb9);
    push32(eax);
    sub_1cdb89();
    ax = memoryAGet16(ds, 0x20cfb9);
    ebx = pop32();
    memoryASet16(ds, 0x20cfb9, bx);
loc_1ae7ff: // 0160:1ae7ff
    if (memoryAGet16(ds, 0x20d803) & 0xffff)
        goto loc_1ae8ae;
    ax = memoryAGet16(ds, 0x20cfb9);
    bx = ax;
    bx >>= 6;
    ax &= 0x003f;
    ax <<= 3;
    esi = 0x00201220;
    eax &= 0x0000ffff;
    al = memoryAGet(ds, esi + eax);
    al &= memoryAGet(ds, 0x20c82e);
    if (!al)
        goto loc_1ae83a;
    al = 0x01;
loc_1ae83a: // 0160:1ae83a
    al += bl;
    if (!al)
        goto loc_1ae8ad;
    al--;
    memoryASet32(ds, 0x20e809, 0x00000000);
    memoryASet(ds, 0x20e809, al);
    esi = 0x00200910;
    sub_1ae99b();
    ax = memoryAGet16(ds, 0x20cf5f);
    if ((short)ax >= 0)
        goto loc_1ae86d;
    ax += memoryAGet16(ds, 0x20cef5);
    goto loc_1ae87d;
loc_1ae86d: // 0160:1ae86d
    if (ax < memoryAGet16(ds, 0x20cef5))
        goto loc_1ae883;
    ax -= memoryAGet16(ds, 0x20cef5);
loc_1ae87d: // 0160:1ae87d
    memoryASet16(ds, 0x20cf5f, ax);
loc_1ae883: // 0160:1ae883
    ax = memoryAGet16(ds, 0x20cf71);
    if ((short)ax >= 0)
        goto loc_1ae897;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1ae8a7;
loc_1ae897: // 0160:1ae897
    if (ax < memoryAGet16(ds, 0x20cef9))
        goto loc_1ae8ad;
    ax -= memoryAGet16(ds, 0x20cef9);
loc_1ae8a7: // 0160:1ae8a7
    memoryASet16(ds, 0x20cf71, ax);
loc_1ae8ad: // 0160:1ae8ad
    esp += 4;
    return;
loc_1ae8ae: // 0160:1ae8ae
    ax = memoryAGet16(ds, 0x20cfa7);
    bx = memoryAGet16(ds, 0x20cfb9);
    push32(eax);
    push32(ebx);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + 0xfffe0000);
    sub_1cdb89();
    ax = memoryAGet16(ds, 0x20cfb9);
    bx = ax;
    bx >>= 6;
    ax &= 0x003f;
    ax <<= 3;
    esi = 0x00201220;
    eax &= 0x0000ffff;
    al = memoryAGet(ds, esi + eax);
    al &= memoryAGet(ds, 0x20c82e);
    if (!al)
        goto loc_1ae8f8;
    al = 0x01;
loc_1ae8f8: // 0160:1ae8f8
    al += bl;
    if (al)
        goto loc_1ae90d;
    ebx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20cfa7, ax);
    memoryASet16(ds, 0x20cfb9, bx);
    goto loc_1ae8ad;
loc_1ae90d: // 0160:1ae90d
    al--;
    memoryASet32(ds, 0x20e809, 0x00000000);
    memoryASet(ds, 0x20e809, al);
    esi = 0x00200910;
    sub_1ae99b();
    ebx = pop32();
    eax = pop32();
    if (memoryAGet16(ds, 0x20d889) & 0xffff)
        goto loc_1ae942;
    memoryASet16(ds, 0x20cfa7, ax);
    memoryASet16(ds, 0x20cfb9, bx);
loc_1ae942: // 0160:1ae942
    ax = memoryAGet16(ds, 0x20cf5f);
    if ((short)ax >= 0)
        goto loc_1ae956;
    ax += memoryAGet16(ds, 0x20cef5);
    goto loc_1ae966;
loc_1ae956: // 0160:1ae956
    if (ax < memoryAGet16(ds, 0x20cef5))
        goto loc_1ae96c;
    ax -= memoryAGet16(ds, 0x20cef5);
loc_1ae966: // 0160:1ae966
    memoryASet16(ds, 0x20cf5f, ax);
loc_1ae96c: // 0160:1ae96c
    ax = memoryAGet16(ds, 0x20cf71);
    if ((short)ax >= 0)
        goto loc_1ae980;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1ae994;
loc_1ae980: // 0160:1ae980
    if (ax < memoryAGet16(ds, 0x20cef9))
        goto loc_1ae8ad;
    ax -= memoryAGet16(ds, 0x20cef9);
loc_1ae994: // 0160:1ae994
    memoryASet16(ds, 0x20cf71, ax);
    esp += 4;
}
void sub_1ae99b() // 0160:1ae99b +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ee15) & 0xffff))
        goto loc_1ae9c3;
    ax = memoryAGet16(ds, 0x20d06d);
    push32(eax);
    memoryASet16(ds, 0x20d06d, 0x0014);
    sub_1ae9c3();
    eax = pop32();
    memoryASet16(ds, 0x20d06d, ax);
    esp += 4;
    return;
loc_1ae9c3: // 0160:1ae9c3
    eax = 0;
    memoryASet16(ds, 0x20d889, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 2;
    bx = ax;
    ax <<= 1;
    ax += bx;
    memoryASet16(ds, 0x20ceb3, ax);
    edi = 0x00200410;
    ax -= memoryAGet16(ds, 0x20cf95);
    ax -= memoryAGet16(ds, 0x20cf95);
    ax <<= 2;
    edi += eax;
    memoryASet32(ds, 0x20e815, edi);
    ax = memoryAGet16(ds, 0x20cfa7);
    ax >>= 2;
    if ((short)ax <= (short)0x003f)
        goto loc_1aefb6;
    if ((short)ax <= (short)0x007f)
        goto loc_1aeddc;
    if ((short)ax <= (short)0x00bf)
        goto loc_1aec02;
    ax -= 0x00c0;
    ax <<= 2;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aeb60;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aeb60;
loc_1aea67: // 0160:1aea67
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aeb19;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeafc;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeafc;
    sub_1af780();
    if (ax)
        goto loc_1aeb57;
loc_1aeafc: // 0160:1aeafc
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeb40;
    sub_1af190();
    if (!flags.zero)
        goto loc_1aeb57;
    if (flags.zero)
        goto loc_1aeb40;
loc_1aeb19: // 0160:1aeb19
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeb40;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeb40;
    sub_1af780();
    if (ax)
        goto loc_1aeb57;
loc_1aeb40: // 0160:1aeb40
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aea67;
    esp += 4;
    return;
loc_1aeb57: // 0160:1aeb57
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aeb60: // 0160:1aeb60
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aebda;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
loc_1aebda: // 0160:1aebda
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aebeb;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
loc_1aebeb: // 0160:1aebeb
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aeb60;
    esp += 4;
    return;
loc_1aec02: // 0160:1aec02
    ax -= 0x0080;
    ax <<= 2;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aed3a;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aed3a;
loc_1aec3e: // 0160:1aec3e
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aecf3;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aecd3;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aecd3;
    sub_1afa78();
    if (ax)
        goto loc_1aed31;
loc_1aecd3: // 0160:1aecd3
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aed1a;
    sub_1af190();
    if (ax)
        goto loc_1aed31;
    if (!ax)
        goto loc_1aed1a;
loc_1aecf3: // 0160:1aecf3
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aed1a;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aed1a;
    sub_1afa78();
    if (ax)
        goto loc_1aed31;
loc_1aed1a: // 0160:1aed1a
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aec3e;
    esp += 4;
    return;
loc_1aed31: // 0160:1aed31
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aed3a: // 0160:1aed3a
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aedb4;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
loc_1aedb4: // 0160:1aedb4
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aedc5;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
loc_1aedc5: // 0160:1aedc5
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aed3a;
    esp += 4;
    return;
loc_1aeddc: // 0160:1aeddc
    ax -= 0x0040;
    ax <<= 2;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aef14;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aef14;
loc_1aee18: // 0160:1aee18
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aeecd;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeead;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeead;
    sub_1afa78();
    if (ax)
        goto loc_1aef0b;
loc_1aeead: // 0160:1aeead
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeef4;
    sub_1af488();
    if (ax)
        goto loc_1aef0b;
    if (!ax)
        goto loc_1aeef4;
loc_1aeecd: // 0160:1aeecd
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeef4;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeef4;
    sub_1afa78();
    if (ax)
        goto loc_1aef0b;
loc_1aeef4: // 0160:1aeef4
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aee18;
    esp += 4;
    return;
loc_1aef0b: // 0160:1aef0b
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aef14: // 0160:1aef14
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aef8e;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
loc_1aef8e: // 0160:1aef8e
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aef9f;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
loc_1aef9f: // 0160:1aef9f
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aef14;
    esp += 4;
    return;
loc_1aefb6: // 0160:1aefb6
    ax <<= 2;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)memoryAGet16(ds, 0x20e805) >= (short)0x000e)
        goto loc_1af0ee;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1af0ee;
loc_1aeff2: // 0160:1aeff2
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1af0a7;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af087;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1af087;
    sub_1af780();
    if (ax)
        goto loc_1af0e5;
loc_1af087: // 0160:1af087
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (ax)
        goto loc_1af0ce;
    sub_1af488();
    if (ax)
        goto loc_1af0e5;
    if (!ax)
        goto loc_1af0ce;
loc_1af0a7: // 0160:1af0a7
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af0ce;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1af0ce;
    sub_1af780();
    if (ax)
        goto loc_1af0e5;
loc_1af0ce: // 0160:1af0ce
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aeff2;
    esp += 4;
    return;
loc_1af0e5: // 0160:1af0e5
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1af0ee: // 0160:1af0ee
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1af168;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
loc_1af168: // 0160:1af168
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af179;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
loc_1af179: // 0160:1af179
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1af0ee;
    esp += 4;
}
void sub_1ae9c3() // 0160:1ae9c3 +long
{
    esp -= 4;
    eax = 0;
    memoryASet16(ds, 0x20d889, ax);
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 2;
    bx = ax;
    ax <<= 1;
    ax += bx;
    memoryASet16(ds, 0x20ceb3, ax);
    edi = 0x00200410;
    ax -= memoryAGet16(ds, 0x20cf95);
    ax -= memoryAGet16(ds, 0x20cf95);
    ax <<= 2;
    edi += eax;
    memoryASet32(ds, 0x20e815, edi);
    ax = memoryAGet16(ds, 0x20cfa7);
    ax >>= 2;
    if ((short)ax <= (short)0x003f)
        goto loc_1aefb6;
    if ((short)ax <= (short)0x007f)
        goto loc_1aeddc;
    if ((short)ax <= (short)0x00bf)
        goto loc_1aec02;
    ax -= 0x00c0;
    ax <<= 2;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aeb60;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aeb60;
loc_1aea67: // 0160:1aea67
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aeb19;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeafc;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeafc;
    sub_1af780();
    if (ax)
        goto loc_1aeb57;
loc_1aeafc: // 0160:1aeafc
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeb40;
    sub_1af190();
    if (!flags.zero)
        goto loc_1aeb57;
    if (flags.zero)
        goto loc_1aeb40;
loc_1aeb19: // 0160:1aeb19
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeb40;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aeb40;
    sub_1af780();
    if (ax)
        goto loc_1aeb57;
loc_1aeb40: // 0160:1aeb40
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aea67;
    esp += 4;
    return;
loc_1aeb57: // 0160:1aeb57
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aeb60: // 0160:1aeb60
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aebda;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
loc_1aebda: // 0160:1aebda
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aebeb;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
loc_1aebeb: // 0160:1aebeb
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aeb60;
    esp += 4;
    return;
loc_1aec02: // 0160:1aec02
    ax -= 0x0080;
    ax <<= 2;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aed3a;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aed3a;
loc_1aec3e: // 0160:1aec3e
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aecf3;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aecd3;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aecd3;
    sub_1afa78();
    if (ax)
        goto loc_1aed31;
loc_1aecd3: // 0160:1aecd3
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (!ax)
        goto loc_1aed1a;
    sub_1af190();
    if (ax)
        goto loc_1aed31;
    if (!ax)
        goto loc_1aed1a;
loc_1aecf3: // 0160:1aecf3
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aed1a;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aed1a;
    sub_1afa78();
    if (ax)
        goto loc_1aed31;
loc_1aed1a: // 0160:1aed1a
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aec3e;
    esp += 4;
    return;
loc_1aed31: // 0160:1aed31
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aed3a: // 0160:1aed3a
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aedb4;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0001);
loc_1aedb4: // 0160:1aedb4
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aedc5;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
loc_1aedc5: // 0160:1aedc5
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aed3a;
    esp += 4;
    return;
loc_1aeddc: // 0160:1aeddc
    ax -= 0x0040;
    ax <<= 2;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp >= (short)0x000e)
        goto loc_1aef14;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1aef14;
loc_1aee18: // 0160:1aee18
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aeecd;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeead;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeead;
    sub_1afa78();
    if (ax)
        goto loc_1aef0b;
loc_1aeead: // 0160:1aeead
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeef4;
    sub_1af488();
    if (ax)
        goto loc_1aef0b;
    if (!ax)
        goto loc_1aeef4;
loc_1aeecd: // 0160:1aeecd
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aeef4;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (ax)
        goto loc_1aeef4;
    sub_1afa78();
    if (ax)
        goto loc_1aef0b;
loc_1aeef4: // 0160:1aeef4
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aee18;
    esp += 4;
    return;
loc_1aef0b: // 0160:1aef0b
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1aef14: // 0160:1aef14
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1aef8e;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
loc_1aef8e: // 0160:1aef8e
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1aef9f;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0001);
loc_1aef9f: // 0160:1aef9f
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aef14;
    esp += 4;
    return;
loc_1aefb6: // 0160:1aefb6
    ax <<= 2;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    bp = memoryAGet16(ds, 0x20d06d);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)memoryAGet16(ds, 0x20e805) >= (short)0x000e)
        goto loc_1af0ee;
    if ((short)memoryAGet16(ds, 0x20d07f) >= (short)0x0006)
        goto loc_1af0ee;
loc_1aeff2: // 0160:1aeff2
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    mul16(bp);
    bx = ax;
    ax = cx;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1af0a7;
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af087;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1af087;
    sub_1af780();
    if (ax)
        goto loc_1af0e5;
loc_1af087: // 0160:1af087
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax &= 0x0001;
    if (ax)
        goto loc_1af0ce;
    sub_1af488();
    if (ax)
        goto loc_1af0e5;
    if (!ax)
        goto loc_1af0ce;
loc_1af0a7: // 0160:1af0a7
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af0ce;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax &= 0x0001;
    if (!ax)
        goto loc_1af0ce;
    sub_1af780();
    if (ax)
        goto loc_1af0e5;
loc_1af0ce: // 0160:1af0ce
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1aeff2;
    esp += 4;
    return;
loc_1af0e5: // 0160:1af0e5
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1af0ee: // 0160:1af0ee
    push32(ebx);
    push32(ecx);
    push32(memoryAGet32(ds, 0x20e809));
    memoryASet16(ds, 0x20cfcb, memoryAGet16(ds, 0x20cfcb) + 0x0001);
    bp = memoryAGet16(ds, 0x20cfcb);
    ax = bx;
    push32(eax);
    push32(ecx);
    edx = 0;
    mul16(bp);
    bx = ax;
    ax = cx;
    edx = 0;
    mul16(bp);
    cx = ax;
    edx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, bx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - ax);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0xff00);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) & 0xff00);
    bx &= 0xff00;
    cx &= 0xff00;
    if (bx == memoryAGet16(ds, 0x20e801))
        goto loc_1af168;
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0001);
loc_1af168: // 0160:1af168
    if (cx == memoryAGet16(ds, 0x20e805))
        goto loc_1af179;
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0001);
loc_1af179: // 0160:1af179
    memoryASet32(ds, 0x20e809, pop32());
    ecx = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e809) >= 0)
        goto loc_1af0ee;
    esp += 4;
}
void sub_1af190() // 0160:1af190 +long +returnZero
{
    esp -= 4;
    eax = 0x001ec60c;
    memoryASet32(ds, 0x20d7d7, eax);
    esi = 0x00200290;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceb3);
    esi += eax;
    ebp = 0;
    bp = memoryAGet16(ds, esi);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af1fe;
    if ((char)al <= (char)0x20)
        goto loc_1af209;
loc_1af1fe: // 0160:1af1fe
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af209: // 0160:1af209
    ebp = 0;
    bp = memoryAGet16(ds, esi + 2);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af25f;
    if ((char)al <= (char)0x20)
        goto loc_1af26a;
loc_1af25f: // 0160:1af25f
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af26a: // 0160:1af26a
    ebp = 0;
    bp = memoryAGet16(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af2c0;
    if ((char)al <= (char)0x20)
        goto loc_1af2cb;
loc_1af2c0: // 0160:1af2c0
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af2cb: // 0160:1af2cb
    ebp = 0;
    bp = memoryAGet16(ds, esi + 6);
    if ((short)bp < 0)
        goto loc_1af3f8;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af32a;
    if ((char)al <= (char)0x20)
        goto loc_1af335;
loc_1af32a: // 0160:1af32a
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af335: // 0160:1af335
    ebp = 0;
    bp = memoryAGet16(ds, esi + 8);
    if ((short)bp < 0)
        goto loc_1af3f8;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af394;
    if ((char)al <= (char)0x20)
        goto loc_1af39b;
loc_1af394: // 0160:1af394
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af39b: // 0160:1af39b
    ebp = 0;
    bp = memoryAGet16(ds, esi + 10);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af3f1;
    if ((char)al <= (char)0x20)
        goto loc_1af3f8;
loc_1af3f1: // 0160:1af3f1
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af3fd;
loc_1af3f8: // 0160:1af3f8
    eax = 0;
    flags.zero = !eax;
    esp += 4;
    return;
loc_1af3fd: // 0160:1af3fd
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) + 0x0003);
    memoryASet16(ds, 0x20d7dd, bx);
    ax = bx;
    bx -= memoryAGet16(ds, 0x20cfa7);
    bx += ax;
    bx &= 0x03ff;
    memoryASet16(ds, 0x20cfa7, bx);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (!(memoryAGet16(ds, 0x20d7dd) & 0xffff))
        goto loc_1af441;
    if (memoryAGet16(ds, 0x20d7dd) != 0x0100)
        goto loc_1af450;
loc_1af441: // 0160:1af441
    bx = ax;
    bx >>= 2;
    ax -= bx;
    if ((short)ax >= 0)
        goto loc_1af450;
    ax = 0;
loc_1af450: // 0160:1af450
    if ((short)ax >= (short)memoryAGet16(ds, 0x20d88f))
        goto loc_1af45f;
    ax = memoryAGet16(ds, 0x20d88f);
loc_1af45f: // 0160:1af45f
    memoryASet16(ds, 0x20cfb9, ax);
    bp = memoryAGet16(ds, 0x20d2cb);
    memoryASet16(ds, 0x20cf83, bp);
    sub_1afd70();
    memoryASet16(ds, 0x20d889, 0x0001);
    ax = 0x0001;
    flags.zero = !al;
    esp += 4;
}
void sub_1af488() // 0160:1af488 +long
{
    esp -= 4;
    eax = 0x001ec660;
    memoryASet32(ds, 0x20d7d7, eax);
    esi = 0x001fff90;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceb3);
    esi += eax;
    ebp = 0;
    bp = memoryAGet16(ds, esi);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af4f6;
    if ((char)al <= (char)0x20)
        goto loc_1af501;
loc_1af4f6: // 0160:1af4f6
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af501: // 0160:1af501
    ebp = 0;
    bp = memoryAGet16(ds, esi + 2);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af557;
    if ((char)al <= (char)0x20)
        goto loc_1af562;
loc_1af557: // 0160:1af557
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af562: // 0160:1af562
    ebp = 0;
    bp = memoryAGet16(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af5b8;
    if ((char)al <= (char)0x20)
        goto loc_1af5c3;
loc_1af5b8: // 0160:1af5b8
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af5c3: // 0160:1af5c3
    ebp = 0;
    bp = memoryAGet16(ds, esi + 6);
    if ((short)bp < 0)
        goto loc_1af6f0;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af622;
    if ((char)al <= (char)0x20)
        goto loc_1af62d;
loc_1af622: // 0160:1af622
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af62d: // 0160:1af62d
    ebp = 0;
    bp = memoryAGet16(ds, esi + 8);
    if ((short)bp < 0)
        goto loc_1af6f0;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af68c;
    if ((char)al <= (char)0x20)
        goto loc_1af693;
loc_1af68c: // 0160:1af68c
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af693: // 0160:1af693
    ebp = 0;
    bp = memoryAGet16(ds, esi + 10);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af6e9;
    if ((char)al <= (char)0x20)
        goto loc_1af6f0;
loc_1af6e9: // 0160:1af6e9
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af6f5;
loc_1af6f0: // 0160:1af6f0
    eax = 0;
    esp += 4;
    return;
loc_1af6f5: // 0160:1af6f5
    memoryASet16(ds, 0x20cf5f, memoryAGet16(ds, 0x20cf5f) - 0x0003);
    memoryASet16(ds, 0x20d7dd, bx);
    ax = bx;
    bx -= memoryAGet16(ds, 0x20cfa7);
    bx += ax;
    bx &= 0x03ff;
    memoryASet16(ds, 0x20cfa7, bx);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (!(memoryAGet16(ds, 0x20d7dd) & 0xffff))
        goto loc_1af739;
    if (memoryAGet16(ds, 0x20d7dd) != 0x0100)
        goto loc_1af748;
loc_1af739: // 0160:1af739
    bx = ax;
    bx >>= 2;
    ax -= bx;
    if ((short)ax >= 0)
        goto loc_1af748;
    ax = 0;
loc_1af748: // 0160:1af748
    if ((short)ax >= (short)memoryAGet16(ds, 0x20d893))
        goto loc_1af757;
    ax = memoryAGet16(ds, 0x20d893);
loc_1af757: // 0160:1af757
    memoryASet16(ds, 0x20cfb9, ax);
    bp = memoryAGet16(ds, 0x20d2cb);
    memoryASet16(ds, 0x20cf83, bp);
    sub_1afd70();
    memoryASet16(ds, 0x20d889, 0x0001);
    ax = 0x0001;
    esp += 4;
}
void sub_1af780() // 0160:1af780 +long
{
    esp -= 4;
    eax = 0x001ec6b4;
    memoryASet32(ds, 0x20d7d7, eax);
    esi = 0x001ffe10;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceb3);
    esi += eax;
    ebp = 0;
    bp = memoryAGet16(ds, esi);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af7ee;
    if ((char)al <= (char)0x20)
        goto loc_1af7f9;
loc_1af7ee: // 0160:1af7ee
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af7f9: // 0160:1af7f9
    ebp = 0;
    bp = memoryAGet16(ds, esi + 2);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af84f;
    if ((char)al <= (char)0x20)
        goto loc_1af85a;
loc_1af84f: // 0160:1af84f
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af85a: // 0160:1af85a
    ebp = 0;
    bp = memoryAGet16(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af8b0;
    if ((char)al <= (char)0x20)
        goto loc_1af8bb;
loc_1af8b0: // 0160:1af8b0
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af8bb: // 0160:1af8bb
    ebp = 0;
    bp = memoryAGet16(ds, esi + 6);
    if ((short)bp < 0)
        goto loc_1af9e8;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af91a;
    if ((char)al <= (char)0x20)
        goto loc_1af925;
loc_1af91a: // 0160:1af91a
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af925: // 0160:1af925
    ebp = 0;
    bp = memoryAGet16(ds, esi + 8);
    if ((short)bp < 0)
        goto loc_1af9e8;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af984;
    if ((char)al <= (char)0x20)
        goto loc_1af98b;
loc_1af984: // 0160:1af984
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af98b: // 0160:1af98b
    ebp = 0;
    bp = memoryAGet16(ds, esi + 10);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1af9e1;
    if ((char)al <= (char)0x20)
        goto loc_1af9e8;
loc_1af9e1: // 0160:1af9e1
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1af9ed;
loc_1af9e8: // 0160:1af9e8
    eax = 0;
    esp += 4;
    return;
loc_1af9ed: // 0160:1af9ed
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) + 0x0003);
    memoryASet16(ds, 0x20d7dd, bx);
    ax = bx;
    bx -= memoryAGet16(ds, 0x20cfa7);
    bx += ax;
    bx &= 0x03ff;
    memoryASet16(ds, 0x20cfa7, bx);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (!(memoryAGet16(ds, 0x20d7dd) & 0xffff))
        goto loc_1afa31;
    if (memoryAGet16(ds, 0x20d7dd) != 0x0100)
        goto loc_1afa40;
loc_1afa31: // 0160:1afa31
    bx = ax;
    bx >>= 2;
    ax -= bx;
    if ((short)ax >= 0)
        goto loc_1afa40;
    ax = 0;
loc_1afa40: // 0160:1afa40
    if ((short)ax >= (short)memoryAGet16(ds, 0x20d891))
        goto loc_1afa4f;
    ax = memoryAGet16(ds, 0x20d891);
loc_1afa4f: // 0160:1afa4f
    memoryASet16(ds, 0x20cfb9, ax);
    bp = memoryAGet16(ds, 0x20d2cb);
    memoryASet16(ds, 0x20cf83, bp);
    sub_1afd70();
    memoryASet16(ds, 0x20d889, 0x0001);
    ax = 0x0001;
    esp += 4;
}
void sub_1afa78() // 0160:1afa78 +long
{
    esp -= 4;
    eax = 0x001ec708;
    memoryASet32(ds, 0x20d7d7, eax);
    esi = 0x00200110;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceb3);
    esi += eax;
    ebp = 0;
    bp = memoryAGet16(ds, esi);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afae6;
    if ((char)al <= (char)0x20)
        goto loc_1afaf1;
loc_1afae6: // 0160:1afae6
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afaf1: // 0160:1afaf1
    ebp = 0;
    bp = memoryAGet16(ds, esi + 2);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afb47;
    if ((char)al <= (char)0x20)
        goto loc_1afb52;
loc_1afb47: // 0160:1afb47
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afb52: // 0160:1afb52
    ebp = 0;
    bp = memoryAGet16(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afba8;
    if ((char)al <= (char)0x20)
        goto loc_1afbb3;
loc_1afba8: // 0160:1afba8
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afbb3: // 0160:1afbb3
    ebp = 0;
    bp = memoryAGet16(ds, esi + 6);
    if ((short)bp < 0)
        goto loc_1afce0;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afc12;
    if ((char)al <= (char)0x20)
        goto loc_1afc1d;
loc_1afc12: // 0160:1afc12
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afc1d: // 0160:1afc1d
    ebp = 0;
    bp = memoryAGet16(ds, esi + 8);
    if ((short)bp < 0)
        goto loc_1afce0;
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afc7c;
    if ((char)al <= (char)0x20)
        goto loc_1afc83;
loc_1afc7c: // 0160:1afc7c
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afc83: // 0160:1afc83
    ebp = 0;
    bp = memoryAGet16(ds, esi + 10);
    edi = memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edi + ebp);
    bx = memoryAGet16(ds, edi + ebp + 2);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    edi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, edi + eax);
    if ((char)al < 0)
        goto loc_1afcd9;
    if ((char)al <= (char)0x20)
        goto loc_1afce0;
loc_1afcd9: // 0160:1afcd9
    sub_1cd75c();
    if (!flags.zero)
        goto loc_1afce5;
loc_1afce0: // 0160:1afce0
    eax = 0;
    esp += 4;
    return;
loc_1afce5: // 0160:1afce5
    memoryASet16(ds, 0x20cf71, memoryAGet16(ds, 0x20cf71) - 0x0003);
    memoryASet16(ds, 0x20d7dd, bx);
    ax = bx;
    bx -= memoryAGet16(ds, 0x20cfa7);
    bx += ax;
    bx &= 0x03ff;
    memoryASet16(ds, 0x20cfa7, bx);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (!(memoryAGet16(ds, 0x20d7dd) & 0xffff))
        goto loc_1afd29;
    if (memoryAGet16(ds, 0x20d7dd) != 0x0100)
        goto loc_1afd38;
loc_1afd29: // 0160:1afd29
    bx = ax;
    bx >>= 2;
    ax -= bx;
    if ((short)ax >= 0)
        goto loc_1afd38;
    ax = 0;
loc_1afd38: // 0160:1afd38
    if ((short)ax >= (short)memoryAGet16(ds, 0x20d895))
        goto loc_1afd47;
    ax = memoryAGet16(ds, 0x20d895);
loc_1afd47: // 0160:1afd47
    memoryASet16(ds, 0x20cfb9, ax);
    bp = memoryAGet16(ds, 0x20d2cb);
    memoryASet16(ds, 0x20cf83, bp);
    sub_1afd70();
    memoryASet16(ds, 0x20d889, 0x0001);
    ax = 0x0001;
    esp += 4;
}
void sub_1afd70() // 0160:1afd70 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20d10f) & 0xffff))
        goto loc_1afd82;
    al = 0x6c;
    sub_1b17b7();
loc_1afd82: // 0160:1afd82
    esp += 4;
    return;
}
void sub_1afd83() // 0160:1afd83 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20ee15) & 0xffff)
        goto loc_1aff04;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ceb3, ax);
    ebx = 0;
    ebx = eax;
    bx <<= 3;
    ax = bx;
    bx <<= 2;
    bx += ax;
    edi = 0x00200410;
    edi += ebx;
    ax = memoryAGet16(ds, edi + 4);
    bx = memoryAGet16(ds, edi + 6);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    esi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, esi + eax);
    if ((char)al < 0)
        goto loc_1afdff;
    if ((char)al <= (char)0x20)
        goto loc_1afe0a;
loc_1afdff: // 0160:1afdff
    sub_1aff13();
    if (!flags.zero)
        goto loc_1aff0b;
loc_1afe0a: // 0160:1afe0a
    ax = memoryAGet16(ds, edi + 16);
    bx = memoryAGet16(ds, edi + 18);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    esi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, esi + eax);
    if ((char)al < 0)
        goto loc_1afe53;
    if ((char)al < (char)0x20)
        goto loc_1afe5e;
loc_1afe53: // 0160:1afe53
    sub_1aff13();
    if (!flags.zero)
        goto loc_1aff0b;
loc_1afe5e: // 0160:1afe5e
    ax = memoryAGet16(ds, edi + 24);
    bx = memoryAGet16(ds, edi + 26);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    ax += bx;
    esi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, esi + eax);
    if ((char)al < 0)
        goto loc_1afea7;
    if ((char)al <= (char)0x20)
        goto loc_1afeb2;
loc_1afea7: // 0160:1afea7
    sub_1aff13();
    if (!flags.zero)
        goto loc_1aff0b;
loc_1afeb2: // 0160:1afeb2
    ax = memoryAGet16(ds, edi + 36);
    bx = memoryAGet16(ds, edi + 38);
    ax += memoryAGet16(ds, 0x20cf5f);
    bx += memoryAGet16(ds, 0x20cf71);
    cx = ax;
    dx = bx;
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    push(dx);
    mul16(memoryAGet16(ds, 0x20cef7));
    dx = pop();
    flags.sign = (ax + bx) & 0x8000;
    ax += bx;
    esi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, esi + eax);
    if (flags.sign)
        goto loc_1afef9;
    if ((char)al <= (char)0x20)
        goto loc_1aff04;
loc_1afef9: // 0160:1afef9
    sub_1aff13();
    if (!flags.zero)
        goto loc_1aff0b;
loc_1aff04: // 0160:1aff04
    ax = 0;
    esp += 4;
    return;
loc_1aff0b: // 0160:1aff0b
    ax = 0x0001;
    esp += 4;
}
void sub_1aff13() // 0160:1aff13 +long +returnZero
{
    esp -= 4;
    ax &= 0x00ff;
    ax <<= 4;
    cx &= 0x0018;
    cx >>= 1;
    dx &= 0x0018;
    dx >>= 3;
    cx += dx;
    ax += cx;
    esi = memoryAGet32(ds, 0x20e821);
    al = memoryAGet(ds, esi + eax);
    if (al == 0x20)
        goto loc_1aff45;
    if ((char)al < (char)0x2c)
        goto loc_1aff4d;
    if ((char)al >= (char)0x38)
        goto loc_1aff4d;
loc_1aff45: // 0160:1aff45
    ax = 0x0001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1aff4d: // 0160:1aff4d
    eax = 0;
    flags.zero = !ax;
    esp += 4;
}
void sub_1aff53() // 0160:1aff53 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d7f5, 0x0001);
    esi = 0x00203e42;
    ax = 0x0010;
    cx = 0x000e;
    mul16(cx);
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, dx);
    edx = memoryAGet32(ds, esi + eax + 10);
    memoryASet32(ds, 0x20d859, edx);
    memoryASet16(ds, 0x20ee5b, 0x0001);
    memoryASet16(ds, 0x20ee5d, 0x0000);
    memoryASet16(ds, 0x20ee53, 0x0140);
    memoryASet16(ds, 0x20ee55, 0x00e0);
    sub_1abc11();
    ax = memoryAGet16(ds, 0x20ee57);
    memoryASet16(ds, 0x20d80d, ax);
    memoryASet16(ds, 0x20ee5d, 0x0001);
    memoryASet16(ds, 0x20ee53, 0x0120);
    memoryASet16(ds, 0x20ee55, 0x00c8);
    sub_1abc11();
    ax = memoryAGet16(ds, 0x20ee57);
    memoryASet16(ds, 0x20d811, ax);
    memoryASet16(ds, 0x20ee53, 0x0100);
    memoryASet16(ds, 0x20ee55, 0x00b4);
    sub_1abc11();
    ax = memoryAGet16(ds, 0x20ee57);
    memoryASet16(ds, 0x20d815, ax);
    memoryASet16(ds, 0x20ee53, 0x00f0);
    memoryASet16(ds, 0x20ee55, 0x00a8);
    sub_1abc11();
    ax = memoryAGet16(ds, 0x20ee57);
    memoryASet16(ds, 0x20d819, ax);
    memoryASet16(ds, 0x20ee53, 0x00e0);
    memoryASet16(ds, 0x20ee55, 0x009c);
    sub_1abc11();
    ax = memoryAGet16(ds, 0x20ee57);
    memoryASet16(ds, 0x20d81d, ax);
    memoryASet16(ds, 0x20ee5b, 0x0000);
    memoryASet16(ds, 0x20ee5d, 0x0000);
    esp += 4;
}
void sub_1b0063() // 0160:1b0063 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20cef5, 0x0000);
    esi = 0x00201a20;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20edfd, ax);
    sub_1a8499();
    eax = 0;
    memoryASet(ds, 0x1f1c44, al);
    memoryASet16(ds, 0x20d2bb, ax);
    memoryASet16(ds, 0x20d2bd, ax);
    memoryASet16(ds, 0x20d2bf, ax);
    memoryASet16(ds, 0x20d2c1, ax);
    memoryASet16(ds, 0x20eda7, 0x0001);
    esi = 0x0020cf39;
    eax = 0x0020d2c7;
    eax -= esi;
    eax >>= 2;
loc_1b00be: // 0160:1b00be
    memoryASet32(ds, esi, 0x00000000);
    esi += 0x00000004;
    eax -= 0x00000001;
    if (eax)
        goto loc_1b00be;
    eax = 0;
    memoryASet16(ds, 0x20d89d, ax);
    esi = 0x002019a8;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    ax &= 0x00ff;
    memoryASet16(ds, 0x20ed9d, ax);
    esi = 0x002018f4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20edcf, ax);
    esi = 0x00201930;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20edff, ax);
    esi = 0x002019e4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    memoryASet16(ds, 0x20ed9f, ax);
    bx = 0x00b0;
    cx = 0x000e;
    dx = 0xfff2;
    memoryASet16(ds, 0x20e7fd, 0x00a2);
    memoryASet16(ds, 0x20e801, 0xff5e);
    esi = 0x00201da4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + eax);
    if (!ax)
        goto loc_1b0181;
    bx = 0x0058;
    cx = 0x001c;
    dx = 0xffe4;
    memoryASet16(ds, 0x20e7fd, 0x0094);
    memoryASet16(ds, 0x20e801, 0xff6c);
loc_1b0181: // 0160:1b0181
    memoryASet16(ds, 0x20d7e7, bx);
    memoryASet16(ds, 0x20d7e9, cx);
    memoryASet16(ds, 0x20d7eb, dx);
    ax = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d7ed, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d7ef, ax);
    eax = 0;
    esi = 0x001ec130;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d76f, eax);
    sub_1b29b6();
    ecx = 0;
    esi = 0x00201cb4;
    cx = memoryAGet16(ds, 0x20d7b9);
    cx <<= 2;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    memoryASet16(ds, 0x20ce93, 0x0004);
    eax = 0;
    memoryASet32(ds, 0x20d77b, eax);
    memoryASet16(ds, 0x20d77f, ax);
    memoryASet32(ds, 0x20d799, eax);
    memoryASet16(ds, 0x20d79d, ax);
    memoryASet(ds, 0x20d793, 0x09);
    memoryASet(ds, 0x20d794, 0x05);
    memoryASet(ds, 0x20d795, 0x09);
    memoryASet(ds, 0x20d796, 0x09);
    memoryASet(ds, 0x20d797, 0x09);
    memoryASet16(ds, 0x20d79f, ax);
    memoryASet16(ds, 0x20d7a1, 0x0057);
    memoryASet16(ds, 0x20d7d3, ax);
    ax = 0x0003;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1b0262;
    ax = memoryAGet16(ds, 0x20ec8d);
loc_1b0262: // 0160:1b0262
    memoryASet16(ds, 0x20d081, ax);
    memoryASet16(ds, 0x20d083, ax);
    memoryASet16(ds, 0x20d085, ax);
    memoryASet16(ds, 0x20d087, ax);
    ax = 0x0042;
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    ax = 0x00af;
    if (memoryAGet16(ds, 0x20d7b9) == 0x002b)
        goto loc_1b02c6;
    if (memoryAGet16(ds, 0x20d7b9) != 0x0007)
        goto loc_1b02ca;
loc_1b02c6: // 0160:1b02c6
    ax = 0x04af;
loc_1b02ca: // 0160:1b02ca
    memoryASet16(ds, 0x20d04b, ax);
    memoryASet16(ds, 0x20d04d, ax);
    memoryASet16(ds, 0x20d04f, ax);
    memoryASet16(ds, 0x20d051, ax);
    ax = 0x0001;
    memoryASet16(ds, 0x20d0ff, ax);
    memoryASet16(ds, 0x20d101, ax);
    memoryASet16(ds, 0x20d103, ax);
    memoryASet16(ds, 0x20d105, ax);
    memoryASet16(ds, 0x20d111, ax);
    memoryASet16(ds, 0x20d113, ax);
    memoryASet16(ds, 0x20d115, ax);
    memoryASet16(ds, 0x20d117, ax);
    esi = 0x00201ad4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 3;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20cf4f, bx);
    memoryASet16(ds, 0x20cf53, bx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20cf61, bx);
    memoryASet16(ds, 0x20cf63, bx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet16(ds, 0x20cf51, bx);
    memoryASet16(ds, 0x20cf55, bx);
    bx = memoryAGet16(ds, esi + eax + 6);
    memoryASet16(ds, 0x20cf65, bx);
    memoryASet16(ds, 0x20cf67, bx);
    if (memoryAGet16(ds, 0x20d7b9) == 0x0015)
        goto loc_1b0388;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b0388;
    goto loc_1b03e4;
loc_1b0388: // 0160:1b0388
    esi = 0x00201ad4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 3;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20cf4f, bx);
    memoryASet16(ds, 0x20cf51, bx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20cf61, bx);
    memoryASet16(ds, 0x20cf65, bx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet16(ds, 0x20cf53, bx);
    memoryASet16(ds, 0x20cf55, bx);
    bx = memoryAGet16(ds, esi + eax + 6);
    memoryASet16(ds, 0x20cf63, bx);
    memoryASet16(ds, 0x20cf67, bx);
loc_1b03e4: // 0160:1b03e4
    esi = 0x00204a3e;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    esi = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d85d, esi);
    bp = memoryAGet16(ds, esi + 10);
    memoryASet16(ds, 0x20e7cf, bp);
    bp = memoryAGet16(ds, esi + 12);
    memoryASet16(ds, 0x20e7d1, bp);
    bp = memoryAGet16(ds, esi + 14);
    memoryASet16(ds, 0x20e7d3, bp);
    bp = memoryAGet16(ds, esi + 16);
    memoryASet16(ds, 0x20e7d5, bp);
    memoryASet16(ds, 0x20e7d7, 0x0000);
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, 0x20d003, ax);
    memoryASet16(ds, 0x20d005, ax);
    memoryASet16(ds, 0x20d007, ax);
    memoryASet16(ds, 0x20d009, ax);
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, 0x20d015, ax);
    memoryASet16(ds, 0x20d017, ax);
    memoryASet16(ds, 0x20d019, ax);
    memoryASet16(ds, 0x20d01b, ax);
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, 0x20d027, ax);
    memoryASet16(ds, 0x20d029, ax);
    memoryASet16(ds, 0x20d02b, ax);
    memoryASet16(ds, 0x20d02d, ax);
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, 0x20cff1, ax);
    memoryASet16(ds, 0x20cff3, ax);
    memoryASet16(ds, 0x20cff5, ax);
    memoryASet16(ds, 0x20cff7, ax);
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, 0x20cfdf, ax);
    memoryASet16(ds, 0x20cfe1, ax);
    memoryASet16(ds, 0x20cfe3, ax);
    memoryASet16(ds, 0x20cfe5, ax);
    memoryASet16(ds, 0x20cf3d, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0005);
    memoryASet16(ds, 0x20cf41, 0x0006);
    memoryASet16(ds, 0x20cf43, 0x0007);
    memoryASet16(ds, 0x20cf45, 0x0008);
    memoryASet16(ds, 0x20cf47, 0x0009);
    memoryASet16(ds, 0x20cf49, 0x000a);
    memoryASet16(ds, 0x20cf4b, 0x000b);
    eax = 0;
    memoryASet16(ds, 0x20d217, ax);
    memoryASet16(ds, 0x20d219, ax);
    memoryASet16(ds, 0x20d21b, ax);
    memoryASet16(ds, 0x20d21d, ax);
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0001)
        goto loc_1b0715;
    if (ax == 0x0002)
        goto loc_1b06f5;
    if (ax == 0x0003)
        goto loc_1b064a;
    memoryASet16(ds, 0x20d7d3, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0002);
    memoryASet16(ds, 0x20cf41, 0x0003);
    memoryASet16(ds, 0x20cf43, 0x0004);
    if (memoryAGet16(ds, 0x20d7b9) == 0x0015)
        goto loc_1b05d9;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b05d9;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - 0x000f);
    memoryASet16(ds, 0x20cf51, memoryAGet16(ds, 0x20cf51) - 0x001e);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf67, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf55, ax);
    memoryASet16(ds, 0x20cf53, memoryAGet16(ds, 0x20cf53) + 0x0032);
    memoryASet16(ds, 0x20cf55, memoryAGet16(ds, 0x20cf55) + 0x004b);
    goto loc_1b0629;
loc_1b05d9: // 0160:1b05d9
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) - 0x000f);
    memoryASet16(ds, 0x20cf63, memoryAGet16(ds, 0x20cf63) - 0x001e);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf67, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf55, ax);
    memoryASet16(ds, 0x20cf65, memoryAGet16(ds, 0x20cf65) + 0x0032);
    memoryASet16(ds, 0x20cf67, memoryAGet16(ds, 0x20cf67) + 0x004b);
loc_1b0629: // 0160:1b0629
    ax = 0x0006;
    memoryASet16(ds, 0x20ce95, ax);
    memoryASet16(ds, 0x20ce97, ax);
    memoryASet16(ds, 0x20ce99, ax);
    memoryASet16(ds, 0x20ce9b, ax);
    goto loc_1b0715;
loc_1b064a: // 0160:1b064a
    memoryASet16(ds, 0x20d7d3, 0x0001);
    if (memoryAGet16(ds, 0x20d7b9) == 0x0015)
        goto loc_1b0699;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b0699;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - 0x000a);
    memoryASet16(ds, 0x20cf51, memoryAGet16(ds, 0x20cf51) - 0x0014);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    memoryASet16(ds, 0x20cf53, memoryAGet16(ds, 0x20cf53) + 0x003c);
    goto loc_1b06c9;
loc_1b0699: // 0160:1b0699
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) - 0x000a);
    memoryASet16(ds, 0x20cf63, memoryAGet16(ds, 0x20cf63) - 0x0014);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    memoryASet16(ds, 0x20cf65, memoryAGet16(ds, 0x20cf65) + 0x003c);
loc_1b06c9: // 0160:1b06c9
    memoryASet16(ds, 0x20cf3f, 0x0002);
    memoryASet16(ds, 0x20cf41, 0x0003);
    ax = 0x0004;
    memoryASet16(ds, 0x20ce95, ax);
    memoryASet16(ds, 0x20ce97, ax);
    memoryASet16(ds, 0x20ce99, ax);
    eax = 0;
    goto loc_1b070f;
loc_1b06f5: // 0160:1b06f5
    memoryASet16(ds, 0x20d7d3, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0002);
    eax = 0;
    memoryASet16(ds, 0x20cf41, ax);
loc_1b070f: // 0160:1b070f
    memoryASet16(ds, 0x20cf43, ax);
loc_1b0715: // 0160:1b0715
    eax = 0;
    memoryASet16(ds, 0x20cf45, ax);
    memoryASet16(ds, 0x20cf47, ax);
    memoryASet16(ds, 0x20cf49, ax);
    memoryASet16(ds, 0x20cf4b, ax);
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1b078c;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1b08ea;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1b08ea;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    cx = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20cf4f, cx);
    cx = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20cf61, cx);
    memoryASet16(ds, 0x20cf53, ax);
    memoryASet16(ds, 0x20cf65, bx);
loc_1b078c: // 0160:1b078c
    esi = memoryAGet32(ds, 0x20d859);
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d005, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d017, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d029, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cff3, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cfe1, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d83b, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d843, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d84b, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d853, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d007, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d019, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d02b, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cff5, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cfe3, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d83d, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d845, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d84d, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d855, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d009, bp);
    esi += 0x00000002;
    bp = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d01b, bp);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d02d, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cff7, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cfe5, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d83f, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d847, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d84f, ax);
    esi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20d857, ax);
    esi += 0x00000002;
loc_1b08ea: // 0160:1b08ea
    eax = 0;
    memoryASet32(ds, 0x20d773, eax);
    memoryASet32(ds, 0x20d777, eax);
    memoryASet(ds, 0x20d773, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1b0930;
    memoryASet(ds, 0x20d774, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1b0930;
    memoryASet(ds, 0x20d775, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1b0930;
    memoryASet(ds, 0x20d776, 0x01);
loc_1b0930: // 0160:1b0930
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1b09c2;
    eax = 0;
    memoryASet16(ds, 0x20cf3f, ax);
    memoryASet16(ds, 0x20cf41, ax);
    memoryASet16(ds, 0x20cf43, ax);
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b0967;
    if (memoryAGet16(ds, 0x20d7b9) != 0x0015)
        goto loc_1b0971;
loc_1b0967: // 0160:1b0967
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) + 0x0014);
    goto loc_1b09a1;
loc_1b0971: // 0160:1b0971
    if (memoryAGet16(ds, 0x20d7b9) != 0x0007)
        goto loc_1b0985;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + 0x0014);
    goto loc_1b09a1;
loc_1b0985: // 0160:1b0985
    if (memoryAGet16(ds, 0x20d7b9) != 0x000d)
        goto loc_1b0999;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + 0x0014);
    goto loc_1b09a1;
loc_1b0999: // 0160:1b0999
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + 0x0014);
loc_1b09a1: // 0160:1b09a1
    memoryASet16(ds, 0x20cf41, 0x0001);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
loc_1b09c2: // 0160:1b09c2
    eax = 0;
    memoryASet16(ds, 0x20d2b9, ax);
    memoryASet16(ds, 0x20d7a9, ax);
    memoryASet16(ds, 0x20d7ad, ax);
    memoryASet16(ds, 0x20d7af, ax);
    esi = 0x0020d221;
    ecx = 0x00000008;
loc_1b09e6: // 0160:1b09e6
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b09e6;
    memoryASet16(ds, 0x20d7ab, ax);
    memoryASet16(ds, 0x20d7a3, ax);
    memoryASet16(ds, 0x20d7a7, ax);
    memoryASet16(ds, 0x20d7a5, ax);
    memoryASet16(ds, 0x20d7b1, ax);
    memoryASet16(ds, 0x20d7b5, ax);
    memoryASet16(ds, 0x20d7b7, ax);
    esi = 0x0020d251;
    ecx = 0x00000030;
loc_1b0a22: // 0160:1b0a22
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b0a22;
    esi = 0x0020d36d;
    ecx = 0x00000100;
loc_1b0a34: // 0160:1b0a34
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b0a34;
    esi = 0x00201de0;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    if (!eax)
        goto loc_1b0a6d;
    esi = eax;
    edi = 0x0020d36d;
loc_1b0a5b: // 0160:1b0a5b
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    if (ax != 0xffff)
        goto loc_1b0a5b;
loc_1b0a6d: // 0160:1b0a6d
    memoryASet16(ds, 0x20d16d, 0x0000);
    memoryASet16(ds, 0x20d16f, 0x0002);
    memoryASet16(ds, 0x20d171, 0x0004);
    memoryASet16(ds, 0x20d173, 0x0006);
    eax = 0;
    memoryASet16(ds, 0x20d803, ax);
    memoryASet32(ds, 0x20d7fb, eax);
    memoryASet32(ds, 0x20d7ff, eax);
    memoryASet16(ds, 0x20d7f7, 0xffb0);
    memoryASet16(ds, 0x20d7f9, 0x0050);
    memoryASet16(ds, 0x20d825, 0x0005);
    memoryASet16(ds, 0x20d869, ax);
    memoryASet16(ds, 0x20d861, ax);
    ax = memoryAGet16(ds, 0x20cf23);
    memoryASet16(ds, 0x20d881, ax);
    ax = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20d883, ax);
    eax = 0;
    memoryASet16(ds, 0x20d885, ax);
    memoryASet16(ds, 0x20d887, ax);
    memoryASet16(ds, 0x20d897, ax);
    esi = 0x00201a5c;
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7b9);
    al = memoryAGet(ds, esi + ecx);
    memoryASet(ds, 0x20d88b, al);
    memoryASet(ds, 0x20d88d, al);
    memoryASet16(ds, 0x20d88f, 0x003c);
    memoryASet16(ds, 0x20d891, 0x003c);
    memoryASet16(ds, 0x20d893, 0x003c);
    memoryASet16(ds, 0x20d895, 0x003c);
    memoryASet16(ds, 0x20dcc3, 0xffff);
    memoryASet16(ds, 0x20d8bd, 0xffff);
    memoryASet(ds, 0x20d8c0, 0x00);
    memoryASet(ds, 0x20d8bf, 0x00);
    esi = 0x0020dcc5;
    ecx = 0x000001ff;
loc_1b0b5f: // 0160:1b0b5f
    memoryASet16(ds, esi, 0xffff);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b0b5f;
    eax = 0;
    memoryASet16(ds, 0x20ee3b, ax);
    memoryASet16(ds, 0x20ed97, ax);
    memoryASet16(ds, 0x20ed99, ax);
    memoryASet16(ds, 0x20ed9b, ax);
    eax = 0;
    memoryASet16(ds, 0x20ed95, ax);
    memoryASet16(ds, 0x20ed93, ax);
    memoryASet32(ds, 0x20c84e, 0xe7190345);
    memoryASet32(ds, 0x20c852, 0xe7190345);
    memoryASet16(ds, 0x20c830, ax);
    memoryASet16(ds, 0x20c82e, ax);
    memoryASet16(ds, 0x20d87f, ax);
    memoryASet16(ds, 0x20eddd, ax);
    memoryASet16(ds, 0x20ede1, ax);
    memoryASet16(ds, 0x20ede5, ax);
    memoryASet16(ds, 0x20ede7, ax);
    memoryASet16(ds, 0x20ede9, ax);
    memoryASet16(ds, 0x20ee31, ax);
    memoryASet16(ds, 0x20ee35, ax);
    memoryASet16(ds, 0x20ee47, ax);
    memoryASet16(ds, 0x20ee37, 0x008c);
    memoryASet16(ds, 0x20e7df, ax);
    memoryASet16(ds, 0x20e7e1, ax);
    memoryASet16(ds, 0x20e7e3, ax);
    memoryASet16(ds, 0x20e7e5, 0x0008);
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1b0c1f;
    memoryASet16(ds, 0x20e7e5, 0x0010);
loc_1b0c1f: // 0160:1b0c1f
    esp += 4;
    return;
}
void sub_1b0c20() // 0160:1b0c20 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20ee15) & 0xffff)
        goto loc_1b0c44;
    edi = 0x0020d251;
    bp = cx;
    ecx = 0x00000004;
loc_1b0c38: // 0160:1b0c38
    if (!(memoryAGet16(ds, edi) & 0xffff))
        goto loc_1b0c45;
    edi += 0x0000000c;
    if (--ecx)
        goto loc_1b0c38;
loc_1b0c44: // 0160:1b0c44
    esp += 4;
    return;
loc_1b0c45: // 0160:1b0c45
    cx = bp;
    esi = 0x00204e38;
    eax &= 0x0000001f;
    eax <<= 3;
    dx = bx;
    bp = cx;
    bx += memoryAGet16(ds, esi + eax);
    cx += memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, edi, 0x0001);
    memoryASet16(ds, edi + 2, bx);
    memoryASet16(ds, edi + 4, cx);
    dx += memoryAGet16(ds, esi + eax + 4);
    bp += memoryAGet16(ds, esi + eax + 6);
    memoryASet16(ds, edi + 6, 0x0001);
    memoryASet16(ds, edi + 8, dx);
    memoryASet16(ds, edi + 10, bp);
    esp += 4;
}
void sub_1b0c88() // 0160:1b0c88 +long
{
    esp -= 4;
    esi = 0x0020b80c;
    memoryASet32(ds, 0x20c85f, esi);
    esi = 0x001ec90c;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1b0cdb;
    esi = 0x001ec900;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1b0cdb;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1b0cdb;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1b0cdb;
    esi = 0x001ec918;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1b0cdb;
    esi = 0x001ec924;
loc_1b0cdb: // 0160:1b0cdb
    memoryASet32(ds, 0x20cecb, esi);
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = 0x002c5658;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002c5344;
    memoryASet32(ds, 0x2eebb8, ecx);
    memoryASet32(ds, 0x2eebbc, edx);
    esi = memoryAGet32(ds, 0x2eebbc);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0d2a: // 0160:1b0d2a
    ecx = 0x00000014;
loc_1b0d2f: // 0160:1b0d2f
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0d2f;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0d2a;
    esi = memoryAGet32(ds, 0x20cecb);
    eax = 0x002c5798;
    goto loc_1b0da2;
    // gap 3 bytes
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
}
void sub_1b0da2() // 0160:1b0da2 +long
{
    esp -= 4;
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
}
void sub_1b0dfd() // 0160:1b0dfd +long
{
    esp -= 4;
    goto loc_1b0dfd;
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
loc_1b0dfd: // 0160:1b0dfd
    esi = 0x00206adc;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    if (!eax)
        goto loc_1b0ee2;
    esi = eax;
    memoryASet32(ds, 0x20cecb, esi);
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = 0x002da260;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002d9f4c;
    memoryASet32(ds, 0x2eebc0, ecx);
    memoryASet32(ds, 0x2eebc4, edx);
    esi = memoryAGet32(ds, 0x2eebc4);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0e6a: // 0160:1b0e6a
    ecx = 0x00000014;
loc_1b0e6f: // 0160:1b0e6f
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0e6f;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0e6a;
    esi = memoryAGet32(ds, 0x20cecb);
    eax = 0x002da3a0;
    goto loc_1b0da2;
loc_1b0ee2: // 0160:1b0ee2
    esp += 4;
    return;
}
void sub_1b0ee3() // 0160:1b0ee3 +long
{
    esp -= 4;
    goto loc_1b0ee3;
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
    // gap 230 bytes
loc_1b0ee3: // 0160:1b0ee3
    esi = 0x001ec24c;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 4;
    esi += eax;
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = 0x0029be48;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x0029bb34;
    memoryASet32(ds, 0x2eeba8, ecx);
    memoryASet32(ds, 0x2eebac, edx);
    esi = memoryAGet32(ds, 0x2eebac);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0f3f: // 0160:1b0f3f
    ecx = 0x00000014;
loc_1b0f44: // 0160:1b0f44
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0f44;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0f3f;
    edx = 0x001ec8d6;
    sub_1aa484();
    edi = 0x002b0a50;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002b073c;
    memoryASet32(ds, 0x2eebb0, ecx);
    memoryASet32(ds, 0x2eebb4, edx);
    esi = memoryAGet32(ds, 0x2eebb4);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0ff3: // 0160:1b0ff3
    ecx = 0x00000014;
loc_1b0ff8: // 0160:1b0ff8
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0ff8;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0ff3;
    esi = 0x001ec24c;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 4;
    esi += eax;
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, 0x20d82b, ebx);
    eax = 0x0029bf88;
    sub_1b0da2();
    if (memoryAGet16(ds, 0x20d7b9) == 0x001e)
        goto loc_1b10be;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b10be;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0032)
        goto loc_1b10be;
    esi = 0x001ec228;
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1b10b4;
    esi = 0x001ec234;
loc_1b10b4: // 0160:1b10b4
    eax = 0x002b0b90;
    goto loc_1b0da2;
loc_1b10be: // 0160:1b10be
    esi = 0x001ec240;
    goto loc_1b10b4;
}
void sub_1b0f0a() // 0160:1b0f0a +long
{
    esp -= 4;
    goto loc_1b0f0a;
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
    // gap 269 bytes
loc_1b0f0a: // 0160:1b0f0a
    ecx = 0x00014314;
    edx = 0x0029bb34;
    memoryASet32(ds, 0x2eeba8, ecx);
    memoryASet32(ds, 0x2eebac, edx);
    esi = memoryAGet32(ds, 0x2eebac);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0f3f: // 0160:1b0f3f
    ecx = 0x00000014;
loc_1b0f44: // 0160:1b0f44
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0f44;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0f3f;
    edx = 0x001ec8d6;
    sub_1aa484();
    edi = 0x002b0a50;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002b073c;
    memoryASet32(ds, 0x2eebb0, ecx);
    memoryASet32(ds, 0x2eebb4, edx);
    esi = memoryAGet32(ds, 0x2eebb4);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1b0ff3: // 0160:1b0ff3
    ecx = 0x00000014;
loc_1b0ff8: // 0160:1b0ff8
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b0ff8;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1b0ff3;
    esi = 0x001ec24c;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 4;
    esi += eax;
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, 0x20d82b, ebx);
    eax = 0x0029bf88;
    sub_1b0da2();
    if (memoryAGet16(ds, 0x20d7b9) == 0x001e)
        goto loc_1b10be;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0013)
        goto loc_1b10be;
    if (memoryAGet16(ds, 0x20d7b9) == 0x0032)
        goto loc_1b10be;
    esi = 0x001ec228;
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1b10b4;
    esi = 0x001ec234;
loc_1b10b4: // 0160:1b10b4
    eax = 0x002b0b90;
    goto loc_1b0da2;
loc_1b10be: // 0160:1b10be
    esi = 0x001ec240;
    goto loc_1b10b4;
}
void sub_1b10c5() // 0160:1b10c5 +long
{
    esp -= 4;
    esi = 0x0020c858;
    eax = 0x002246d0;
    eax -= esi;
    eax >>= 2;
loc_1b10d4: // 0160:1b10d4
    memoryASet32(ds, esi, 0x00000000);
    esi += 0x00000004;
    eax -= 0x00000001;
    if (eax)
        goto loc_1b10d4;
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
}
void sub_1b10ec() // 0160:1b10ec +long
{
    esp -= 4;
    esi = 0x0020c814;
    eax = 0x002246d0;
    eax -= esi;
    eax >>= 2;
loc_1b10fb: // 0160:1b10fb
    memoryASet32(ds, esi, 0x00000000);
    esi += 0x00000004;
    eax -= 0x00000001;
    if (eax)
        goto loc_1b10fb;
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
}
void sub_1b1113() // 0160:1b1113 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b16f9;
    if (memoryAGet16(ds, 0x20d7b9) != 0x0022)
        goto loc_1b1168;
    if (memoryAGet16(ds, 0x20d04b) != 0x0224)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    if ((char)al < (char)0x40)
        goto loc_1b1703;
    ax = 0x00f9;
    goto loc_1b1715;
loc_1b1168: // 0160:1b1168
    if (memoryAGet16(ds, 0x20d7b9) != 0x0006)
        goto loc_1b11dd;
    if (memoryAGet16(ds, 0x20d04b) != 0x0215)
        goto loc_1b11a3;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
    ax = 0x0101;
    goto loc_1b1715;
loc_1b11a3: // 0160:1b11a3
    if (memoryAGet16(ds, 0x20d04b) != 0x0453)
        goto loc_1b16f9;
loc_1b11b2: // 0160:1b11b2
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x00ff;
    goto loc_1b1715;
loc_1b11dd: // 0160:1b11dd
    if (memoryAGet16(ds, 0x20d7b9) != 0x0021)
        goto loc_1b11f8;
    if (memoryAGet16(ds, 0x20d04b) != 0x0647)
        goto loc_1b16f9;
    goto loc_1b11b2;
loc_1b11f8: // 0160:1b11f8
    if (memoryAGet16(ds, 0x20d7b9) != 0x001a)
        goto loc_1b1242;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x8e)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x0102;
    goto loc_1b1715;
loc_1b1242: // 0160:1b1242
    if (memoryAGet16(ds, 0x20d7b9) != 0x0005)
        goto loc_1b12bc;
    if (memoryAGet16(ds, 0x20d04b) != 0x057c)
        goto loc_1b127d;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x0103;
    goto loc_1b1715;
loc_1b127d: // 0160:1b127d
    if (memoryAGet16(ds, 0x20d04b) != 0x0096)
        goto loc_1b16f9;
    if (memoryAGet16(ds, 0x20d89b) == 0x0001)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
    ax = 0x0104;
    goto loc_1b1715;
loc_1b12bc: // 0160:1b12bc
    if (memoryAGet16(ds, 0x20d7b9) != 0x002f)
        goto loc_1b1304;
    if (memoryAGet16(ds, 0x20d04b) != 0x0462)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    if ((char)al < (char)0x40)
        goto loc_1b16fa;
    ax = 0x0106;
    goto loc_1b1715;
loc_1b1304: // 0160:1b1304
    if (memoryAGet16(ds, 0x20d7b9) != 0x0030)
        goto loc_1b1348;
    if (memoryAGet16(ds, 0x20d04b) != 0x0440)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    if ((char)al < (char)0x40)
        goto loc_1b1703;
    goto loc_1b16fa;
loc_1b1348: // 0160:1b1348
    if (memoryAGet16(ds, 0x20d7b9) != 0x000a)
        goto loc_1b13b4;
    if (memoryAGet16(ds, 0x20d04b) != 0x0312)
        goto loc_1b1383;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x010b;
    goto loc_1b1715;
loc_1b1383: // 0160:1b1383
    if (memoryAGet16(ds, 0x20d04b) != 0x0676)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
    ax = 0x010a;
    goto loc_1b1715;
loc_1b13b4: // 0160:1b13b4
    if (memoryAGet16(ds, 0x20d7b9) != 0x0008)
        goto loc_1b1426;
    if (memoryAGet16(ds, 0x20d04b) != 0x0222)
        goto loc_1b13e8;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    goto loc_1b1410;
loc_1b13e8: // 0160:1b13e8
    if (memoryAGet16(ds, 0x20d04b) != 0x066e)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
loc_1b1410: // 0160:1b1410
    sub_1b1c25();
    if ((char)al < (char)0x40)
        goto loc_1b1703;
    ax = 0x010b;
    goto loc_1b1715;
loc_1b1426: // 0160:1b1426
    if (memoryAGet16(ds, 0x20d7b9) != 0x0016)
        goto loc_1b1460;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x64)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x0118;
    goto loc_1b1715;
loc_1b1460: // 0160:1b1460
    if (memoryAGet16(ds, 0x20d7b9) != 0x0012)
        goto loc_1b14a7;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x22)
        goto loc_1b16f9;
loc_1b1478: // 0160:1b1478
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    al &= 0x03;
    if (!al)
        goto loc_1b1703;
    ax = 0x011a;
    goto loc_1b1715;
loc_1b14a7: // 0160:1b14a7
    if (memoryAGet16(ds, 0x20d7b9) != 0x0014)
        goto loc_1b14c1;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x64)
        goto loc_1b16f9;
    goto loc_1b1478;
loc_1b14c1: // 0160:1b14c1
    if (memoryAGet16(ds, 0x20d7b9) != 0x0019)
        goto loc_1b14fb;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x28)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x0120;
    goto loc_1b1715;
loc_1b14fb: // 0160:1b14fb
    if (memoryAGet16(ds, 0x20d7b9) != 0x0004)
        goto loc_1b1535;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x1c)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    ax = 0x0124;
    goto loc_1b1715;
loc_1b1535: // 0160:1b1535
    if (memoryAGet16(ds, 0x20d7b9) != 0x002a)
        goto loc_1b1597;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x30)
        goto loc_1b1564;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    goto loc_1b1585;
loc_1b1564: // 0160:1b1564
    if (al != 0x78)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
loc_1b1585: // 0160:1b1585
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x0140;
    goto loc_1b1715;
loc_1b1597: // 0160:1b1597
    if (memoryAGet16(ds, 0x20d7b9) != 0x0009)
        goto loc_1b15da;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x9c)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x0142;
    goto loc_1b1715;
loc_1b15da: // 0160:1b15da
    if (memoryAGet16(ds, 0x20d7b9) != 0x0025)
        goto loc_1b16f9;
    ax = memoryAGet16(ds, 0x20d04b);
    if (al != 0x36)
        goto loc_1b1614;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8b) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8b, ax);
loc_1b160b: // 0160:1b160b
    ax = 0x0146;
    goto loc_1b1715;
loc_1b1614: // 0160:1b1614
    if (al != 0x40)
        goto loc_1b1647;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8d) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8d, ax);
loc_1b1635: // 0160:1b1635
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x0147;
    goto loc_1b1715;
loc_1b1647: // 0160:1b1647
    if (al != 0x5c)
        goto loc_1b1666;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee8f) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee8f, ax);
    goto loc_1b160b;
loc_1b1666: // 0160:1b1666
    if (al != 0x66)
        goto loc_1b1689;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee91) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee91, ax);
    goto loc_1b1635;
loc_1b1689: // 0160:1b1689
    if (al != 0x88)
        goto loc_1b16ac;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee95) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee95, ax);
    goto loc_1b1635;
loc_1b16ac: // 0160:1b16ac
    if (al != 0x06)
        goto loc_1b16ce;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee97) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee97, ax);
    goto loc_1b160b;
loc_1b16ce: // 0160:1b16ce
    if (al != 0x0e)
        goto loc_1b16f4;
    ax = memoryAGet16(ds, 0x20d081);
    if (memoryAGet16(ds, 0x20ee99) == ax)
        goto loc_1b16f9;
    memoryASet16(ds, 0x20ee99, ax);
    goto loc_1b1635;
loc_1b16f4: // 0160:1b16f4
    goto loc_1b16f9;
    // gap 3 bytes
loc_1b16f9: // 0160:1b16f9
    esp += 4;
    return;
loc_1b16fa: // 0160:1b16fa
    ax = 0x0108;
    goto loc_1b1715;
    // gap 3 bytes
loc_1b1703: // 0160:1b1703
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x00fa;
    goto loc_1b1715;
    // gap 3 bytes
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b1715() // 0160:1b1715 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b17b7() // 0160:1b17b7 +long
{
    esp -= 4;
    goto loc_1b17b7;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b18a6() // 0160:1b18a6 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b1919;
    if (al != 0x79)
        goto loc_1b18be;
    goto loc_1c72ac;
loc_1b18be: // 0160:1b18be
    if (al != 0x8a)
        goto loc_1b18c7;
    goto loc_1c735c;
loc_1b18c7: // 0160:1b18c7
    if (al != 0x80)
        goto loc_1b18d0;
    goto loc_1c740c;
loc_1b18d0: // 0160:1b18d0
    if (al != 0x82)
        goto loc_1b18e3;
    eax = memoryAGet32(ds, 0x2eebd0);
    memoryASet32(ds, 0x20ee7b, eax);
    goto loc_1c74bc;
loc_1b18e3: // 0160:1b18e3
    if (al != 0xa5)
        goto loc_1b18ec;
    goto loc_1c7784;
loc_1b18ec: // 0160:1b18ec
    if (al != 0x8b)
        goto loc_1b18f5;
    goto loc_1c76d4;
loc_1b18f5: // 0160:1b18f5
    if (al != 0x06)
        goto loc_1b18fe;
    goto loc_1c756c;
loc_1b18fe: // 0160:1b18fe
    if (al != 0x09)
        goto loc_1b1907;
    goto loc_1c7624;
loc_1b1907: // 0160:1b1907
    if (al != 0xa8)
        goto loc_1b1910;
    goto loc_1c783c;
loc_1b1910: // 0160:1b1910
    if (al != 0x81)
        goto loc_1b1919;
    goto loc_1c78ec;
loc_1b1919: // 0160:1b1919
    esp += 4;
    return;
    // gap 88466 bytes
loc_1c72ac: // 0160:1c72ac
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c72ff;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c72fd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c72e4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c72e4: // 0160:1c72e4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c72fd: // 0160:1c72fd
    goto loc_1c7336;
loc_1c72ff: // 0160:1c72ff
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000000)
        goto loc_1c7336;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7320;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7320: // 0160:1c7320
    sub_1c82bc();
    eax = 0;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000000);
loc_1c7336: // 0160:1c7336
    memoryASet32(ss, ebp + -8, 0x0020a9f4);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c735c: // 0160:1c735c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c73af;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c73ad;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7394;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7394: // 0160:1c7394
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c73ad: // 0160:1c73ad
    goto loc_1c73e9;
loc_1c73af: // 0160:1c73af
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c73e9;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c73d0;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c73d0: // 0160:1c73d0
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c73e9: // 0160:1c73e9
    memoryASet32(ss, ebp + -8, 0x0020aa00);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c740c: // 0160:1c740c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c745f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c745d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7444;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7444: // 0160:1c7444
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c745d: // 0160:1c745d
    goto loc_1c7499;
loc_1c745f: // 0160:1c745f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c7499;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7480;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7480: // 0160:1c7480
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7499: // 0160:1c7499
    memoryASet32(ss, ebp + -8, 0x0020aa08);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c74bc: // 0160:1c74bc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c750f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c750d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c74f4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c74f4: // 0160:1c74f4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c750d: // 0160:1c750d
    goto loc_1c7549;
loc_1c750f: // 0160:1c750f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c7549;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7530;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7530: // 0160:1c7530
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7549: // 0160:1c7549
    memoryASet32(ss, ebp + -8, 0x0020aa14);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c756c: // 0160:1c756c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c75bf;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c75bd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c75a4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c75a4: // 0160:1c75a4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c75bd: // 0160:1c75bd
    goto loc_1c7604;
loc_1c75bf: // 0160:1c75bf
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c75d1;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c75d3;
loc_1c75d1: // 0160:1c75d1
    goto loc_1c7604;
loc_1c75d3: // 0160:1c75d3
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c75eb;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c75eb: // 0160:1c75eb
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7604: // 0160:1c7604
    memoryASet32(ss, ebp + -8, 0x0020aa24);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7624: // 0160:1c7624
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7677;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c7675;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c765c;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c765c: // 0160:1c765c
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c7675: // 0160:1c7675
    goto loc_1c76b1;
loc_1c7677: // 0160:1c7677
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c76b1;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7698;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7698: // 0160:1c7698
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c76b1: // 0160:1c76b1
    memoryASet32(ss, ebp + -8, 0x0020aa30);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c76d4: // 0160:1c76d4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7727;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c7725;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c770c;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c770c: // 0160:1c770c
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c7725: // 0160:1c7725
    goto loc_1c777b;
loc_1c7727: // 0160:1c7727
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7761;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7748;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7748: // 0160:1c7748
    sub_1c82bc();
    eax = 0x00000002;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000002);
loc_1c7761: // 0160:1c7761
    memoryASet32(ss, ebp + -8, 0x0020aa3c);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
loc_1c777b: // 0160:1c777b
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7784: // 0160:1c7784
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c77d7;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c77d5;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c77bc;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c77bc: // 0160:1c77bc
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c77d5: // 0160:1c77d5
    goto loc_1c781c;
loc_1c77d7: // 0160:1c77d7
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c77e9;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c77eb;
loc_1c77e9: // 0160:1c77e9
    goto loc_1c781c;
loc_1c77eb: // 0160:1c77eb
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7803;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7803: // 0160:1c7803
    sub_1c82bc();
    eax = 0x00000002;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000002);
loc_1c781c: // 0160:1c781c
    memoryASet32(ss, ebp + -8, 0x0020aa44);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c783c: // 0160:1c783c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c788f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c788d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7874;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7874: // 0160:1c7874
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c788d: // 0160:1c788d
    goto loc_1c78e3;
loc_1c788f: // 0160:1c788f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000003)
        goto loc_1c78c9;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c78b0;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c78b0: // 0160:1c78b0
    sub_1c82bc();
    eax = 0x00000003;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000003);
loc_1c78c9: // 0160:1c78c9
    memoryASet32(ss, ebp + -8, 0x0020aa4c);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
loc_1c78e3: // 0160:1c78e3
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c78ec: // 0160:1c78ec
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000004)
        goto loc_1c7934;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c791b;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c791b: // 0160:1c791b
    sub_1c82bc();
    eax = 0x00000004;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000004);
loc_1c7934: // 0160:1c7934
    memoryASet32(ss, ebp + -8, 0x0020aa58);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b191a() // 0160:1b191a +long
{
    esp -= 4;
    goto loc_1b191a;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29377 bytes
loc_1b191a: // 0160:1b191a
    memoryASet16(ds, 0x20d897, 0x0000);
    memoryASet16(ds, 0x20e7d7, 0x0000);
    memoryASet16(ds, 0x20e7d9, 0x0000);
    memoryASet16(ds, 0x20e7db, 0x0000);
    memoryASet16(ds, 0x20e7dd, 0x0000);
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b6be8;
    eax = 0x00000000;
    sub_1b198d();
    eax = 0x00000001;
    sub_1b198d();
    eax = 0x00000002;
    sub_1b198d();
    eax = 0x00000003;
    sub_1b198d();
    eax = 0x00000004;
    sub_1b198d();
    eax = 0x00000005;
    memoryASet32(ds, 0x1f1cdc, eax);
    memoryASet32(ds, 0x1f1ce0, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000140);
    goto loc_1aa64a;
    // gap 21053 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 69443 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b198d() // 0160:1b198d +long
{
    esp -= 4;
    goto loc_1b198d;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29492 bytes
loc_1b198d: // 0160:1b198d
    memoryASet32(ds, 0x1f1cdc, eax);
    memoryASet32(ds, 0x1f1ce0, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000140);
    goto loc_1aa64a;
    // gap 90497 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1b19ac() // 0160:1b19ac +long
{
    esp -= 4;
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
}
void sub_1b19e0() // 0160:1b19e0 +long +returnZero
{
    esp -= 4;
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    flags.zero = !memoryAGet32(ds, 0x20c80c);
    esp += 4;
}
void sub_1b1a14() // 0160:1b1a14 +long
{
    esp -= 4;
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0002);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
}
void sub_1b1a48() // 0160:1b1a48 +long
{
    bool temp_cond0;
    bool temp_cond1;

    esp -= 4;
    goto loc_1b1a48;
loc_1a9519: // 0160:1a9519
    memoryASet(ds, 0x2eeb58, ch);
    ch = cl;
    memoryASet16(ds, 0x2eebc8, cx);
    ecx = 0;
    cl = bl;
    memoryASet32(ds, 0x2eeb64, ecx);
    cl = bh;
    memoryASet32(ds, 0x2eeb68, ecx);
    memoryASet16(ds, 0x2eeb54, ax);
    eax = 0;
    ecx--;
    ecx >>= 1;
    edx -= ecx;
    if ((int32_t)edx >= 0)
        goto loc_1a954b;
    eax -= edx;
loc_1a954b: // 0160:1a954b
    memoryASet32(ds, 0x2eeb70, eax);
    eax = memoryAGet32(ds, 0x2eeb68);
    eax += edx;
    eax -= memoryAGet32(ds, 0x1f1c4c);
    if ((int32_t)eax >= 0)
        goto loc_1a9561;
    eax = 0;
loc_1a9561: // 0160:1a9561
    memoryASet32(ds, 0x2eeb74, eax);
    eax = 0;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx <<= 2;
    ecx--;
    edi -= ecx;
    if ((int32_t)edi >= 0)
        goto loc_1a957b;
    eax -= edi;
    eax >>= 3;
loc_1a957b: // 0160:1a957b
    memoryASet32(ds, 0x2eeb78, eax);
    ecx++;
    ecx += ecx;
    eax = ecx;
    eax += edi;
    eax -= memoryAGet32(ds, 0x1f1c48);
    if ((int32_t)eax >= 0)
        goto loc_1a9591;
    eax = 0;
loc_1a9591: // 0160:1a9591
    eax >>= 3;
    memoryASet32(ds, 0x2eeb7c, eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax <<= 3;
    edi += eax;
    edx += memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x1f1c38);
    eax &= 0x0000000f;
    edi += eax;
    eax = edi;
    eax &= 0x00000003;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c58);
    memoryASet32(ds, 0x2eeb6c, eax);
    edi = sar32(edi, 0x02);
    edi += memoryAGet32(ds, 0x1f1c34);
    eax = 0x00000054;
    mul8(dl);
    edi += eax;
    eax = memoryAGet32(ds, 0x2eeb68);
    ecx = eax;
    eax -= memoryAGet32(ds, 0x2eeb70);
//    temp_cond0 = (int32_t)eax - (int32_t)memoryAGet32(ds, 0x2eeb74) <= 0;
//    temp_cond0 = (int32_t)eax - (int32_t)memoryAGet32(ds, 0x2eeb74) <= 0;
    eax -= memoryAGet32(ds, 0x2eeb74);
    if ((int32_t)eax <= 0)
        goto loc_1a975a;
    memoryASet32(ds, 0x2eeb68, eax);
    ebx = 0x00000140;
    eax = memoryAGet32(ds, 0x2eeb70);
    if (!(memoryAGet(ds, 0x2eeb55) & 0xff))
        goto loc_1a9612;
    eax = ecx;
    eax -= memoryAGet32(ds, 0x2eeb70);
    eax--;
    ebx = -ebx;
loc_1a9612: // 0160:1a9612
    eax <<= 6;
    esi += eax;
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x2eeb5c, ebx);
    ecx = memoryAGet32(ds, 0x2eeb64);
    eax = ecx;
    ecx -= memoryAGet32(ds, 0x2eeb78);
    ecx -= memoryAGet32(ds, 0x2eeb7c);
    if ((int32_t)ecx < 0)
        goto loc_1a975a;
    memoryASet32(ds, 0x2eeb64, ecx);
    memoryASet32(ds, 0x2eeb60, 0x00000054);
    if (memoryAGet(ds, 0x2eeb54) & 0xff)
        goto loc_1a97ea;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    esi += eax;
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
    if (!(memoryAGet(ds, 0x2eeb58) & 0xff))
        goto loc_1a998d;
loc_1a9691: // 0160:1a9691
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a975b;
loc_1a96c5: // 0160:1a96c5
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a96cb: // 0160:1a96cb
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, edi);
    if (bl >= al)
        goto loc_1a96ff;
    if (bh >= ah)
        goto loc_1a96ed;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
    goto loc_1a9714;
loc_1a96ed: // 0160:1a96ed
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
    goto loc_1a9714;
loc_1a96ff: // 0160:1a96ff
    if (bh >= ah)
        goto loc_1a970c;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a970c: // 0160:1a970c
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
loc_1a9714: // 0160:1a9714
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a96c5;
loc_1a9728: // 0160:1a9728
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi += 0x00000050;
    ah += ah;
    eax += 0x01000000;
    if (ah < 0x10)
        goto loc_1a974e;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a974e: // 0160:1a974e
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a9691;
loc_1a975a: // 0160:1a975a
    esp += 4;
    return;
loc_1a975b: // 0160:1a975b
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a9769;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9769: // 0160:1a9769
    edi++;
    esi++;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a97bd;
loc_1a9774: // 0160:1a9774
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, edi);
    if (bl >= al)
        goto loc_1a97a8;
    if (bh >= ah)
        goto loc_1a9796;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
    goto loc_1a97bd;
loc_1a9796: // 0160:1a9796
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
    goto loc_1a97bd;
loc_1a97a8: // 0160:1a97a8
    if (bh >= ah)
        goto loc_1a97b5;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a97b5: // 0160:1a97b5
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
loc_1a97bd: // 0160:1a97bd
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a97cb;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a97cb: // 0160:1a97cb
    esi++;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a975b;
    goto loc_1a9728;
loc_1a97ea: // 0160:1a97ea
    eax -= memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    eax--;
    esi += eax;
    esi += 0x000000f0;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) + eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
    if (!(memoryAGet(ds, 0x2eeb58) & 0xff))
        goto loc_1a9ad1;
loc_1a982a: // 0160:1a982a
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a98f9;
loc_1a985e: // 0160:1a985e
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a9864: // 0160:1a9864
    ax = memoryAGet16(ds, esi + -1);
    bx = memoryAGet16(ds, edi);
    if (bl >= ah)
        goto loc_1a989d;
    if (bh >= al)
        goto loc_1a988b;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
    goto loc_1a98b2;
loc_1a988b: // 0160:1a988b
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
    goto loc_1a98b2;
loc_1a989d: // 0160:1a989d
    if (bh >= al)
        goto loc_1a98aa;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a98aa: // 0160:1a98aa
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
loc_1a98b2: // 0160:1a98b2
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a985e;
loc_1a98c6: // 0160:1a98c6
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi -= 0x00000050;
    eax += 0x01000000;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a98ec;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a98ec: // 0160:1a98ec
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a982a;
    esp += 4;
    return;
loc_1a98f9: // 0160:1a98f9
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a9907;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9907: // 0160:1a9907
    edi++;
    esi--;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9960;
loc_1a9912: // 0160:1a9912
    ax = memoryAGet16(ds, esi + -1);
    bx = memoryAGet16(ds, edi);
    if (bl >= ah)
        goto loc_1a994b;
    if (bh >= al)
        goto loc_1a9939;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
    goto loc_1a9960;
loc_1a9939: // 0160:1a9939
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
    goto loc_1a9960;
loc_1a994b: // 0160:1a994b
    if (bh >= al)
        goto loc_1a9958;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9958: // 0160:1a9958
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
loc_1a9960: // 0160:1a9960
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a996e;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a996e: // 0160:1a996e
    esi--;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a98f9;
    goto loc_1a98c6;
loc_1a998d: // 0160:1a998d
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a9a45;
loc_1a99ba: // 0160:1a99ba
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a99c0: // 0160:1a99c0
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a99f1;
    if (!ah)
        goto loc_1a99df;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
    goto loc_1a9a06;
loc_1a99df: // 0160:1a99df
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
    goto loc_1a9a06;
loc_1a99f1: // 0160:1a99f1
    if (!ah)
        goto loc_1a99fe;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a99fe: // 0160:1a99fe
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
loc_1a9a06: // 0160:1a9a06
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a99ba;
loc_1a9a1a: // 0160:1a9a1a
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi += 0x00000050;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a9a38;
    ah = 0x01;
    edi++;
loc_1a9a38: // 0160:1a9a38
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a998d;
    esp += 4;
    return;
loc_1a9a45: // 0160:1a9a45
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9a53;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9a53: // 0160:1a9a53
    edi++;
    esi++;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9aa4;
loc_1a9a5e: // 0160:1a9a5e
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a9a8f;
    if (!ah)
        goto loc_1a9a7d;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
    goto loc_1a9aa4;
loc_1a9a7d: // 0160:1a9a7d
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
    goto loc_1a9aa4;
loc_1a9a8f: // 0160:1a9a8f
    if (!ah)
        goto loc_1a9a9c;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a9a9c: // 0160:1a9a9c
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
loc_1a9aa4: // 0160:1a9aa4
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9ab2;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9ab2: // 0160:1a9ab2
    esi++;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9a45;
    goto loc_1a9a1a;
loc_1a9ad1: // 0160:1a9ad1
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a9b8e;
loc_1a9afe: // 0160:1a9afe
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a9b04: // 0160:1a9b04
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a9b3a;
    if (!al)
        goto loc_1a9b28;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
    goto loc_1a9b4f;
loc_1a9b28: // 0160:1a9b28
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
    goto loc_1a9b4f;
loc_1a9b3a: // 0160:1a9b3a
    if (!al)
        goto loc_1a9b47;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9b47: // 0160:1a9b47
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
loc_1a9b4f: // 0160:1a9b4f
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9afe;
loc_1a9b63: // 0160:1a9b63
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi -= 0x00000050;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a9b81;
    ah = 0x01;
    edi++;
loc_1a9b81: // 0160:1a9b81
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a9ad1;
    esp += 4;
    return;
loc_1a9b8e: // 0160:1a9b8e
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9b9c;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9b9c: // 0160:1a9b9c
    edi++;
    esi--;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9bf2;
loc_1a9ba7: // 0160:1a9ba7
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a9bdd;
    if (!al)
        goto loc_1a9bcb;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
    goto loc_1a9bf2;
loc_1a9bcb: // 0160:1a9bcb
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
    goto loc_1a9bf2;
loc_1a9bdd: // 0160:1a9bdd
    if (!al)
        goto loc_1a9bea;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9bea: // 0160:1a9bea
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
loc_1a9bf2: // 0160:1a9bf2
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9c00;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9c00: // 0160:1a9c00
    esi--;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9b8e;
    goto loc_1a9b63;
    // gap 32297 bytes
loc_1b1a48: // 0160:1b1a48
    push32(ebx);
    edi = 0x0020b80c;
    cx <<= 3;
    ecx &= 0x0000ffff;
    edi += ecx;
    esi = memoryAGet32(ds, edi);
    bl = memoryAGet(ds, edi + 4);
    bh = memoryAGet(ds, edi + 6);
    eax &= 0x0000ffff;
    edi = eax;
    edi -= 0x00000080;
    ax = dx;
    ax &= 0x0003;
    cx = dx;
    if (ax == 0x0001)
        goto loc_1b1a99;
    if (ax == 0x0002)
        goto loc_1b1a93;
    if (ax == 0x0003)
        goto loc_1b1a8d;
    goto loc_1b1a9d;
loc_1b1a8d: // 0160:1b1a8d
    al = 0x01;
    ah = 0x01;
    goto loc_1b1a9d;
loc_1b1a93: // 0160:1b1a93
    al = 0x00;
    ah = 0x01;
    goto loc_1b1a9d;
loc_1b1a99: // 0160:1b1a99
    al = 0x01;
    ah = 0x00;
loc_1b1a9d: // 0160:1b1a9d
    edx = pop32();
    edx &= 0x0000ffff;
    edx -= 0x00000080;
    if (cx < 0x0010)
        goto loc_1b1ab5;
    cx = 0;
    goto loc_1b1ab9;
loc_1b1ab5: // 0160:1b1ab5
    ch = 0x01;
    cl = 0;
loc_1b1ab9: // 0160:1b1ab9
    if (memoryAGet16(ds, 0x20ce8f) == 0xffff)
        goto loc_1b1ad1;
    cl = memoryAGet(ds, 0x20ce8f);
    cl <<= 2;
loc_1b1ad1: // 0160:1b1ad1
    goto loc_1a9519;
}
void sub_1b1ad6() // 0160:1b1ad6 +long
{
    bool temp_cond0;
    bool temp_cond1;

    esp -= 4;
    goto loc_1b1ad6;
loc_1a9519: // 0160:1a9519
    memoryASet(ds, 0x2eeb58, ch);
    ch = cl;
    memoryASet16(ds, 0x2eebc8, cx);
    ecx = 0;
    cl = bl;
    memoryASet32(ds, 0x2eeb64, ecx);
    cl = bh;
    memoryASet32(ds, 0x2eeb68, ecx);
    memoryASet16(ds, 0x2eeb54, ax);
    eax = 0;
    ecx--;
    ecx >>= 1;
    edx -= ecx;
    if ((int32_t)edx >= 0)
        goto loc_1a954b;
    eax -= edx;
loc_1a954b: // 0160:1a954b
    memoryASet32(ds, 0x2eeb70, eax);
    eax = memoryAGet32(ds, 0x2eeb68);
    eax += edx;
    eax -= memoryAGet32(ds, 0x1f1c4c);
    if ((int32_t)eax >= 0)
        goto loc_1a9561;
    eax = 0;
loc_1a9561: // 0160:1a9561
    memoryASet32(ds, 0x2eeb74, eax);
    eax = 0;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx <<= 2;
    ecx--;
    edi -= ecx;
    if ((int32_t)edi >= 0)
        goto loc_1a957b;
    eax -= edi;
    eax >>= 3;
loc_1a957b: // 0160:1a957b
    memoryASet32(ds, 0x2eeb78, eax);
    ecx++;
    ecx += ecx;
    eax = ecx;
    eax += edi;
    eax -= memoryAGet32(ds, 0x1f1c48);
    if ((int32_t)eax >= 0)
        goto loc_1a9591;
    eax = 0;
loc_1a9591: // 0160:1a9591
    eax >>= 3;
    memoryASet32(ds, 0x2eeb7c, eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax <<= 3;
    edi += eax;
    edx += memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x1f1c38);
    eax &= 0x0000000f;
    edi += eax;
    eax = edi;
    eax &= 0x00000003;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c58);
    memoryASet32(ds, 0x2eeb6c, eax);
    edi = sar32(edi, 0x02);
    edi += memoryAGet32(ds, 0x1f1c34);
    eax = 0x00000054;
    mul8(dl);
    edi += eax;
    eax = memoryAGet32(ds, 0x2eeb68);
    ecx = eax;
    eax -= memoryAGet32(ds, 0x2eeb70);
//    temp_cond0 = (int32_t)eax - (int32_t)memoryAGet32(ds, 0x2eeb74) <= 0; // CICO BUG
//    temp_cond0 = (int32_t)eax - (int32_t)memoryAGet32(ds, 0x2eeb74) <= 0;
    eax -= memoryAGet32(ds, 0x2eeb74);
    if ((int32_t)eax <= 0)
        goto loc_1a975a;
    memoryASet32(ds, 0x2eeb68, eax);
    ebx = 0x00000140;
    eax = memoryAGet32(ds, 0x2eeb70);
    if (!(memoryAGet(ds, 0x2eeb55) & 0xff))
        goto loc_1a9612;
    eax = ecx;
    eax -= memoryAGet32(ds, 0x2eeb70);
    eax--;
    ebx = -ebx;
loc_1a9612: // 0160:1a9612
    eax <<= 6;
    esi += eax;
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x2eeb5c, ebx);
    ecx = memoryAGet32(ds, 0x2eeb64);
    eax = ecx;
    ecx -= memoryAGet32(ds, 0x2eeb78);
//    temp_cond1 = (int32_t)ecx - (int32_t)memoryAGet32(ds, 0x2eeb7c) <= 0;
//    temp_cond1 = (int32_t)ecx - (int32_t)memoryAGet32(ds, 0x2eeb7c) <= 0;
    ecx -= memoryAGet32(ds, 0x2eeb7c);
    if ((int32_t)ecx <= 0)
        goto loc_1a975a;
    memoryASet32(ds, 0x2eeb64, ecx);
    memoryASet32(ds, 0x2eeb60, 0x00000054);
    if (memoryAGet(ds, 0x2eeb54) & 0xff)
        goto loc_1a97ea;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    esi += eax;
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
    if (!(memoryAGet(ds, 0x2eeb58) & 0xff))
        goto loc_1a998d;
loc_1a9691: // 0160:1a9691
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a975b;
loc_1a96c5: // 0160:1a96c5
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a96cb: // 0160:1a96cb
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, edi);
    if (bl >= al)
        goto loc_1a96ff;
    if (bh >= ah)
        goto loc_1a96ed;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
    goto loc_1a9714;
loc_1a96ed: // 0160:1a96ed
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
    goto loc_1a9714;
loc_1a96ff: // 0160:1a96ff
    if (bh >= ah)
        goto loc_1a970c;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a970c: // 0160:1a970c
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a96cb;
loc_1a9714: // 0160:1a9714
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a96c5;
loc_1a9728: // 0160:1a9728
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi += 0x00000050;
    ah += ah;
    eax += 0x01000000;
    if (ah < 0x10)
        goto loc_1a974e;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a974e: // 0160:1a974e
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a9691;
loc_1a975a: // 0160:1a975a
    esp += 4;
    return;
loc_1a975b: // 0160:1a975b
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a9769;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9769: // 0160:1a9769
    edi++;
    esi++;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a97bd;
loc_1a9774: // 0160:1a9774
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, edi);
    if (bl >= al)
        goto loc_1a97a8;
    if (bh >= ah)
        goto loc_1a9796;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
    goto loc_1a97bd;
loc_1a9796: // 0160:1a9796
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
    goto loc_1a97bd;
loc_1a97a8: // 0160:1a97a8
    if (bh >= ah)
        goto loc_1a97b5;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a97b5: // 0160:1a97b5
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9774;
loc_1a97bd: // 0160:1a97bd
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a97cb;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a97cb: // 0160:1a97cb
    esi++;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a975b;
    goto loc_1a9728;
loc_1a97ea: // 0160:1a97ea
    eax -= memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    eax--;
    esi += eax;
    esi += 0x000000f0;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) + eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
    if (!(memoryAGet(ds, 0x2eeb58) & 0xff))
        goto loc_1a9ad1;
loc_1a982a: // 0160:1a982a
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a98f9;
loc_1a985e: // 0160:1a985e
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a9864: // 0160:1a9864
    ax = memoryAGet16(ds, esi + -1);
    bx = memoryAGet16(ds, edi);
    if (bl >= ah)
        goto loc_1a989d;
    if (bh >= al)
        goto loc_1a988b;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
    goto loc_1a98b2;
loc_1a988b: // 0160:1a988b
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
    goto loc_1a98b2;
loc_1a989d: // 0160:1a989d
    if (bh >= al)
        goto loc_1a98aa;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a98aa: // 0160:1a98aa
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9864;
loc_1a98b2: // 0160:1a98b2
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a985e;
loc_1a98c6: // 0160:1a98c6
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi -= 0x00000050;
    eax += 0x01000000;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a98ec;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a98ec: // 0160:1a98ec
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a982a;
    esp += 4;
    return;
loc_1a98f9: // 0160:1a98f9
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a9907;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9907: // 0160:1a9907
    edi++;
    esi--;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9960;
loc_1a9912: // 0160:1a9912
    ax = memoryAGet16(ds, esi + -1);
    bx = memoryAGet16(ds, edi);
    if (bl >= ah)
        goto loc_1a994b;
    if (bh >= al)
        goto loc_1a9939;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
    goto loc_1a9960;
loc_1a9939: // 0160:1a9939
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
    goto loc_1a9960;
loc_1a994b: // 0160:1a994b
    if (bh >= al)
        goto loc_1a9958;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9958: // 0160:1a9958
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9912;
loc_1a9960: // 0160:1a9960
    al = memoryAGet(ds, esi);
    if (al <= memoryAGet(ds, edi))
        goto loc_1a996e;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a996e: // 0160:1a996e
    esi--;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a98f9;
    goto loc_1a98c6;
loc_1a998d: // 0160:1a998d
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a9a45;
loc_1a99ba: // 0160:1a99ba
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a99c0: // 0160:1a99c0
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a99f1;
    if (!ah)
        goto loc_1a99df;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
    goto loc_1a9a06;
loc_1a99df: // 0160:1a99df
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
    goto loc_1a9a06;
loc_1a99f1: // 0160:1a99f1
    if (!ah)
        goto loc_1a99fe;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a99fe: // 0160:1a99fe
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a99c0;
loc_1a9a06: // 0160:1a9a06
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a99ba;
loc_1a9a1a: // 0160:1a9a1a
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi += 0x00000050;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a9a38;
    ah = 0x01;
    edi++;
loc_1a9a38: // 0160:1a9a38
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a998d;
    esp += 4;
    return;
loc_1a9a45: // 0160:1a9a45
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9a53;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9a53: // 0160:1a9a53
    edi++;
    esi++;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9aa4;
loc_1a9a5e: // 0160:1a9a5e
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a9a8f;
    if (!ah)
        goto loc_1a9a7d;
    ax |= memoryAGet16(ds, 0x2eebc8);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
    goto loc_1a9aa4;
loc_1a9a7d: // 0160:1a9a7d
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
    goto loc_1a9aa4;
loc_1a9a8f: // 0160:1a9a8f
    if (!ah)
        goto loc_1a9a9c;
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, ah);
loc_1a9a9c: // 0160:1a9a9c
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9a5e;
loc_1a9aa4: // 0160:1a9aa4
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9ab2;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9ab2: // 0160:1a9ab2
    esi++;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9a45;
    goto loc_1a9a1a;
loc_1a9ad1: // 0160:1a9ad1
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a9b8e;
loc_1a9afe: // 0160:1a9afe
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a9b04: // 0160:1a9b04
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a9b3a;
    if (!al)
        goto loc_1a9b28;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
    goto loc_1a9b4f;
loc_1a9b28: // 0160:1a9b28
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
    goto loc_1a9b4f;
loc_1a9b3a: // 0160:1a9b3a
    if (!al)
        goto loc_1a9b47;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9b47: // 0160:1a9b47
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9b04;
loc_1a9b4f: // 0160:1a9b4f
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9afe;
loc_1a9b63: // 0160:1a9b63
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi -= 0x00000050;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a9b81;
    ah = 0x01;
    edi++;
loc_1a9b81: // 0160:1a9b81
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a9ad1;
    esp += 4;
    return;
loc_1a9b8e: // 0160:1a9b8e
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9b9c;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9b9c: // 0160:1a9b9c
    edi++;
    esi--;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a9bf2;
loc_1a9ba7: // 0160:1a9ba7
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a9bdd;
    if (!al)
        goto loc_1a9bcb;
    ax |= memoryAGet16(ds, 0x2eebc8);
    ax = rol16(ax, 0x08);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
    goto loc_1a9bf2;
loc_1a9bcb: // 0160:1a9bcb
    ah |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
    goto loc_1a9bf2;
loc_1a9bdd: // 0160:1a9bdd
    if (!al)
        goto loc_1a9bea;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi + 1, al);
loc_1a9bea: // 0160:1a9bea
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9ba7;
loc_1a9bf2: // 0160:1a9bf2
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9c00;
    al |= memoryAGet(ds, 0x2eebc8);
    memoryASet(ds, edi, al);
loc_1a9c00: // 0160:1a9c00
    esi--;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9b8e;
    goto loc_1a9b63;
    // gap 32439 bytes
loc_1b1ad6: // 0160:1b1ad6
    push32(ebx);
    edi = 0x0020b80c;
    cx <<= 3;
    ecx &= 0x0000ffff;
    edi += ecx;
    esi = memoryAGet32(ds, edi);
    bl = memoryAGet(ds, edi + 4);
    bl <<= 2;
    bh = 0;
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, edi + 6);
    bl >>= 1;
    ebp = pop32();
    bp += bx;
    push32(ebp);
    bl = memoryAGet(ds, edi + 4);
    bh = memoryAGet(ds, edi + 6);
    eax &= 0x0000ffff;
    edi = eax;
    edi -= 0x00000080;
    ax = dx;
    ax &= 0x0003;
    cx = dx;
    if (ax == 0x0001)
        goto loc_1b1b3f;
    if (ax == 0x0002)
        goto loc_1b1b39;
    if (ax == 0x0003)
        goto loc_1b1b33;
    goto loc_1b1b43;
loc_1b1b33: // 0160:1b1b33
    al = 0x01;
    ah = 0x01;
    goto loc_1b1b43;
loc_1b1b39: // 0160:1b1b39
    al = 0x00;
    ah = 0x01;
    goto loc_1b1b43;
loc_1b1b3f: // 0160:1b1b3f
    al = 0x01;
    ah = 0x00;
loc_1b1b43: // 0160:1b1b43
    edx = pop32();
    edx &= 0x0000ffff;
    edx -= 0x00000080;
    if (cx < 0x0010)
        goto loc_1b1b5b;
    cx = 0;
    goto loc_1b1b5f;
loc_1b1b5b: // 0160:1b1b5b
    ch = 0x01;
    cl = 0;
loc_1b1b5f: // 0160:1b1b5f
    if (memoryAGet16(ds, 0x20ce8f) == 0xffff)
        goto loc_1b1b77;
    cl = memoryAGet(ds, 0x20ce8f);
    cl <<= 2;
loc_1b1b77: // 0160:1b1b77
    goto loc_1a9519;
}
void sub_1b1b7c() // 0160:1b1b7c +long
{
    bool temp_cond0;
    bool temp_cond1;

    esp -= 4;
    goto loc_1b1b7c;
loc_1a9094: // 0160:1a9094
    ecx = 0;
    cl = bl;
    memoryASet32(ds, 0x2eeb64, ecx);
    cl = bh;
    memoryASet32(ds, 0x2eeb68, ecx);
    memoryASet16(ds, 0x2eeb54, ax);
    eax = 0;
    ecx--;
    ecx >>= 1;
    edx -= ecx;
    if ((int32_t)edx >= 0)
        goto loc_1a90b7;
    eax -= edx;
loc_1a90b7: // 0160:1a90b7
    memoryASet32(ds, 0x2eeb70, eax);
    eax = memoryAGet32(ds, 0x2eeb68);
    eax += edx;
    eax -= memoryAGet32(ds, 0x1f1c4c);
    if ((int32_t)eax >= 0)
        goto loc_1a90cd;
    eax = 0;
loc_1a90cd: // 0160:1a90cd
    memoryASet32(ds, 0x2eeb74, eax);
    eax = 0;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx <<= 2;
    ecx--;
    edi -= ecx;
    if ((int32_t)edi >= 0)
        goto loc_1a90e7;
    eax -= edi;
    eax >>= 3;
loc_1a90e7: // 0160:1a90e7
    memoryASet32(ds, 0x2eeb78, eax);
    ecx++;
    ecx += ecx;
    eax = ecx;
    eax += edi;
    eax -= memoryAGet32(ds, 0x1f1c48);
    if ((int32_t)eax >= 0)
        goto loc_1a90fd;
    eax = 0;
loc_1a90fd: // 0160:1a90fd
    eax >>= 3;
    memoryASet32(ds, 0x2eeb7c, eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax <<= 3;
    edi += eax;
    edx += memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x1f1c38);
    eax &= 0x0000000f;
    edi += eax;
    eax = edi;
    eax &= 0x00000003;
    eax = memoryAGet32(ds, eax * 4 + 0x1f1c58);
    memoryASet32(ds, 0x2eeb6c, eax);
    edi = sar32(edi, 0x02);
    edi += memoryAGet32(ds, 0x1f1c34);
    eax = 0x00000054;
    mul8(dl);
    edi += eax;
    eax = memoryAGet32(ds, 0x2eeb68);
    ecx = eax;
    eax -= memoryAGet32(ds, 0x2eeb70);
    eax -= memoryAGet32(ds, 0x2eeb74);
    if ((int32_t)eax <= 0)
        goto loc_1a92c9;
    memoryASet32(ds, 0x2eeb68, eax);
    ebx = 0x00000140;
    eax = memoryAGet32(ds, 0x2eeb70);
    if (!(memoryAGet(ds, 0x2eeb55) & 0xff))
        goto loc_1a917e;
    eax = ecx;
    eax -= memoryAGet32(ds, 0x2eeb70);
    eax--;
    ebx = -ebx;
loc_1a917e: // 0160:1a917e
    eax <<= 6;
    esi += eax;
    eax <<= 2;
    esi += eax;
    memoryASet32(ds, 0x2eeb5c, ebx);
    ecx = memoryAGet32(ds, 0x2eeb64);
    eax = ecx;
    ecx -= memoryAGet32(ds, 0x2eeb78);
    ecx -= memoryAGet32(ds, 0x2eeb7c);
    if ((ecx)<=0)
        goto loc_1a92c9;
    memoryASet32(ds, 0x2eeb64, ecx);
    memoryASet32(ds, 0x2eeb60, 0x00000054);
    ebx = 0;
    if (memoryAGet(ds, 0x2eeb54) & 0xff)
        goto loc_1a936b;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    esi += eax;
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
loc_1a91f2: // 0160:1a91f2
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a92ca;
loc_1a9226: // 0160:1a9226
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a922c: // 0160:1a922c
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a926b;
    if (!ah)
        goto loc_1a9257;
    ax = memoryAGet16(ds, edi);
    bl = al;
    al = memoryAGet(ds, ebx + 3075052);
    bl = ah;
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a922c;
    goto loc_1a9283;
loc_1a9257: // 0160:1a9257
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a922c;
    goto loc_1a9283;
loc_1a926b: // 0160:1a926b
    if (!ah)
        goto loc_1a927b;
    bl = memoryAGet(ds, edi + 1);
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi + 1, ah);
loc_1a927b: // 0160:1a927b
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a922c;
loc_1a9283: // 0160:1a9283
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9226;
loc_1a9297: // 0160:1a9297
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi += 0x00000050;
    ah += ah;
    eax += 0x01000000;
    if (ah < 0x10)
        goto loc_1a92bd;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a92bd: // 0160:1a92bd
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a91f2;
loc_1a92c9: // 0160:1a92c9
    esp += 4;
    return;
loc_1a92ca: // 0160:1a92ca
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a92da;
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
loc_1a92da: // 0160:1a92da
    edi++;
    esi++;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a933c;
loc_1a92e5: // 0160:1a92e5
    ax = memoryAGet16(ds, esi);
    if (!al)
        goto loc_1a9324;
    if (!ah)
        goto loc_1a9310;
    ax = memoryAGet16(ds, edi);
    bl = al;
    al = memoryAGet(ds, ebx + 3075052);
    bl = ah;
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a92e5;
    goto loc_1a933c;
loc_1a9310: // 0160:1a9310
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a92e5;
    goto loc_1a933c;
loc_1a9324: // 0160:1a9324
    if (!ah)
        goto loc_1a9334;
    bl = memoryAGet(ds, edi + 1);
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi + 1, ah);
loc_1a9334: // 0160:1a9334
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a92e5;
loc_1a933c: // 0160:1a933c
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a934c;
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
loc_1a934c: // 0160:1a934c
    esi++;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a92ca;
    goto loc_1a9297;
loc_1a936b: // 0160:1a936b
    eax -= memoryAGet32(ds, 0x2eeb78);
    eax += eax;
    eax--;
    esi += eax;
    esi += 0x000000f0;
    eax = memoryAGet32(ds, 0x2eeb64);
    eax += eax;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) + eax);
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - eax);
    eax = memoryAGet32(ds, 0x2eeb6c);
    memoryASet32(ds, 0x2eeb78, 0x00000004);
loc_1a939e: // 0160:1a939e
    memoryASet32(ds, 0x2eeb6c, esi);
    memoryASet32(ds, 0x2eeb70, edi);
    memoryASet32(ds, 0x2eeb74, eax);
    dx = 0x03c4;
    out16(dx, ax);
    eax = ror32(eax, 0x10);
    dl = 0xce;
    out16(dx, ax);
    eax = memoryAGet32(ds, 0x2eeb68);
    memoryASet32(ds, 0x2eeb54, eax);
    if (edi & 0x00000001)
        goto loc_1a9477;
loc_1a93d2: // 0160:1a93d2
    ecx = memoryAGet32(ds, 0x2eeb64);
loc_1a93d8: // 0160:1a93d8
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a9418;
    if (!al)
        goto loc_1a9404;
    ax = memoryAGet16(ds, edi);
    bl = al;
    al = memoryAGet(ds, ebx + 3075052);
    bl = ah;
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a93d8;
    goto loc_1a9430;
loc_1a9404: // 0160:1a9404
    bl = memoryAGet(ds, edi);
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a93d8;
    goto loc_1a9430;
loc_1a9418: // 0160:1a9418
    if (!al)
        goto loc_1a9428;
    bl = memoryAGet(ds, edi + 1);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi + 1, al);
loc_1a9428: // 0160:1a9428
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a93d8;
loc_1a9430: // 0160:1a9430
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a93d2;
loc_1a9444: // 0160:1a9444
    esi = memoryAGet32(ds, 0x2eeb6c);
    edi = memoryAGet32(ds, 0x2eeb70);
    eax = memoryAGet32(ds, 0x2eeb74);
    esi -= 0x00000050;
    eax += 0x01000000;
    ah += ah;
    if (ah < 0x10)
        goto loc_1a946a;
    eax = memoryAGet32(ds, 0x1f1c58);
    edi++;
loc_1a946a: // 0160:1a946a
    memoryASet32(ds, 0x2eeb78, memoryAGet32(ds, 0x2eeb78) - 1);
    if (memoryAGet32(ds, 0x2eeb78))
        goto loc_1a939e;
    esp += 4;
    return;
loc_1a9477: // 0160:1a9477
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a9487;
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
loc_1a9487: // 0160:1a9487
    edi++;
    esi--;
    ecx = memoryAGet32(ds, 0x2eeb64);
    ecx--;
    if (ecx==0)
        goto loc_1a94ea;
loc_1a9492: // 0160:1a9492
    ax = memoryAGet16(ds, esi + -1);
    if (!ah)
        goto loc_1a94d2;
    if (!al)
        goto loc_1a94be;
    ax = memoryAGet16(ds, edi);
    bl = al;
    al = memoryAGet(ds, ebx + 3075052);
    bl = ah;
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9492;
    goto loc_1a94ea;
loc_1a94be: // 0160:1a94be
    bl = memoryAGet(ds, edi);
    ah = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, ah);
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9492;
    goto loc_1a94ea;
loc_1a94d2: // 0160:1a94d2
    if (!al)
        goto loc_1a94e2;
    bl = memoryAGet(ds, edi + 1);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi + 1, al);
loc_1a94e2: // 0160:1a94e2
    esi -= 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1a9492;
loc_1a94ea: // 0160:1a94ea
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1a94fa;
    bl = memoryAGet(ds, edi);
    al = memoryAGet(ds, ebx + 3075052);
    memoryASet(ds, edi, al);
loc_1a94fa: // 0160:1a94fa
    esi--;
    edi++;
    esi += memoryAGet32(ds, 0x2eeb5c);
    edi += memoryAGet32(ds, 0x2eeb60);
    memoryASet32(ds, 0x2eeb54, memoryAGet32(ds, 0x2eeb54) - 1);
    if (memoryAGet32(ds, 0x2eeb54))
        goto loc_1a9477;
    goto loc_1a9444;
    // gap 34403 bytes
loc_1b1b7c: // 0160:1b1b7c
    push32(ebx);
    edi = 0x0020b80c;
    cx <<= 3;
    ecx &= 0x0000ffff;
    edi += ecx;
    esi = memoryAGet32(ds, edi);
    bl = memoryAGet(ds, edi + 4);
    bl <<= 2;
    bh = 0;
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, edi + 6);
    bl >>= 1;
    ebp = pop32();
    bp += bx;
    push32(ebp);
    bl = memoryAGet(ds, edi + 4);
    bh = memoryAGet(ds, edi + 6);
    eax &= 0x0000ffff;
    edi = eax;
    edi -= 0x00000080;
    ax = dx;
    ax &= 0x0003;
    cx = dx;
    if (ax == 0x0001)
        goto loc_1b1be5;
    if (ax == 0x0002)
        goto loc_1b1bdf;
    if (ax == 0x0003)
        goto loc_1b1bd9;
    goto loc_1b1be9;
loc_1b1bd9: // 0160:1b1bd9
    al = 0x01;
    ah = 0x01;
    goto loc_1b1be9;
loc_1b1bdf: // 0160:1b1bdf
    al = 0x00;
    ah = 0x01;
    goto loc_1b1be9;
loc_1b1be5: // 0160:1b1be5
    al = 0x01;
    ah = 0x00;
loc_1b1be9: // 0160:1b1be9
    edx = pop32();
    edx &= 0x0000ffff;
    edx -= 0x00000080;
    if (cx < 0x0010)
        goto loc_1b1c01;
    cx = 0;
    goto loc_1b1c05;
loc_1b1c01: // 0160:1b1c01
    ch = 0x01;
    cl = 0;
loc_1b1c05: // 0160:1b1c05
    if (memoryAGet16(ds, 0x20ce8f) == 0xffff)
        goto loc_1b1c1d;
    cl = memoryAGet(ds, 0x20ce8f);
    cl <<= 2;
loc_1b1c1d: // 0160:1b1c1d
    goto loc_1a9094;
}
void sub_1b1c22() // 0160:1b1c22 +long
{
    esp -= 4;
    ax = 0;
    al = memoryAGet(ds, 0x20c84e);
    bl = memoryAGet(ds, 0x20c84f);
    cl = memoryAGet(ds, 0x20c850);
    al -= 0x01;
    al ^= bl;
    al = rol8(al, 0x01);
    cl = ror8(cl, 0x01);
    memoryASet(ds, 0x20c84e, al);
    al ^= 0xff;
    al = rol8(al, 0x01);
    al ^= 0x30;
    al ^= bl;
    bl = al;
    al ^= cl;
    memoryASet(ds, 0x20c850, cl);
    memoryASet(ds, 0x20c84f, bl);
    esp += 4;
}
void sub_1b1c25() // 0160:1b1c25 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x20c84e);
    bl = memoryAGet(ds, 0x20c84f);
    cl = memoryAGet(ds, 0x20c850);
    al -= 0x01;
    al ^= bl;
    al = rol8(al, 0x01);
    cl = ror8(cl, 0x01);
    memoryASet(ds, 0x20c84e, al);
    al ^= 0xff;
    al = rol8(al, 0x01);
    al ^= 0x30;
    al ^= bl;
    bl = al;
    al ^= cl;
    memoryASet(ds, 0x20c850, cl);
    memoryASet(ds, 0x20c84f, bl);
    esp += 4;
}
void sub_1b1c5c() // 0160:1b1c5c +long
{
    esp -= 4;
    goto loc_1b1c5c;
loc_1b1c25: // 0160:1b1c25
    al = memoryAGet(ds, 0x20c84e);
    bl = memoryAGet(ds, 0x20c84f);
    cl = memoryAGet(ds, 0x20c850);
    al -= 0x01;
    al ^= bl;
    al = rol8(al, 0x01);
    cl = ror8(cl, 0x01);
    memoryASet(ds, 0x20c84e, al);
    al ^= 0xff;
    al = rol8(al, 0x01);
    al ^= 0x30;
    al ^= bl;
    bl = al;
    al ^= cl;
    memoryASet(ds, 0x20c850, cl);
    memoryASet(ds, 0x20c84f, bl);
    esp += 4;
    return;
loc_1b1c5c: // 0160:1b1c5c
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1b1c25;
    ax = 0;
    esp += 4;
}
void sub_1b1c6b() // 0160:1b1c6b +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x20c852);
    bl = memoryAGet(ds, 0x20c853);
    cl = memoryAGet(ds, 0x20c854);
    al -= 0x01;
    al ^= bl;
    al = rol8(al, 0x01);
    cl = ror8(cl, 0x01);
    memoryASet(ds, 0x20c852, al);
    al ^= 0xff;
    al = rol8(al, 0x01);
    al ^= 0x30;
    al ^= bl;
    bl = al;
    al ^= cl;
    memoryASet(ds, 0x20c854, cl);
    memoryASet(ds, 0x20c853, bl);
    esp += 4;
}
void sub_1b1ca2() // 0160:1b1ca2 +long
{
    esp -= 4;
    goto loc_1b1ca2;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 654 bytes
loc_1b1ca2: // 0160:1b1ca2
    if (!(memoryAGet16(ds, 0x20d7cf) & 0xffff))
        goto loc_1b1cd0;
    memoryASet16(ds, 0x20d7cf, memoryAGet16(ds, 0x20d7cf) - 0x0001);
    if (memoryAGet16(ds, 0x20d7cf))
        goto loc_1b1cd0;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b1cc7;
    sub_1b191a();
loc_1b1cc7: // 0160:1b1cc7
    memoryASet16(ds, 0x20d7c1, 0x0000);
loc_1b1cd0: // 0160:1b1cd0
    if (memoryAGet16(ds, 0x20d7c1) & 0xffff)
        goto loc_1b1e80;
    bl = memoryAGet(ds, 0x20e82d);
    al = memoryAGet(ds, 0x30b071);
    if (memoryAGet16(ds, 0x20d7bf) != 0x0000)
        goto loc_1b1d05;
    memoryASet(ds, 0x20e82d, al);
    if (!al)
        goto loc_1b1d05;
    if (!bl)
        goto loc_1b1d25;
loc_1b1d05: // 0160:1b1d05
    bl = memoryAGet(ds, 0x20d7c7);
    al = memoryAGet(ds, 0x30b0ab);
    memoryASet(ds, 0x20d7c7, al);
    if (!al)
        goto loc_1b1d9d;
    if (bl)
        goto loc_1b1d9d;
loc_1b1d25: // 0160:1b1d25
    al = memoryAGet(ds, 0x30b071);
    memoryASet(ds, 0x20e82d, al);
    memoryASet16(ds, 0x20d7bf, memoryAGet16(ds, 0x20d7bf) + 0x0001);
    memoryASet16(ds, 0x20d7bf, memoryAGet16(ds, 0x20d7bf) & 0x0001);
    if (memoryAGet16(ds, 0x20d7bf) & 0xffff)
        goto loc_1b1d83;
    sub_1c8764();
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x20d897, 0x0000);
    al = 0x7a;
    sub_1b17b7();
    if (!(memoryAGet16(ds, 0x20d7b5) & 0xffff))
        goto loc_1b1e68;
    al = 0x8b;
    sub_1b18a6();
    goto loc_1b1e68;
loc_1b1d83: // 0160:1b1d83
    sub_1c8734();
    memoryASet16(ds, 0x20d7c3, 0x0001);
    sub_1b191a();
    al = 0x4e;
    sub_1b17b7();
loc_1b1d9d: // 0160:1b1d9d
    if (!(memoryAGet16(ds, 0x20d7bf) & 0xffff))
        goto loc_1b1e80;
    bl = memoryAGet(ds, 0x20e82d);
    al = memoryAGet(ds, 0x30b071);
    memoryASet(ds, 0x20e82d, al);
    if (!al)
        goto loc_1b1de0;
    if (bl)
        goto loc_1b1de0;
    memoryASet16(ds, 0x20ee81, 0x0001);
    memoryASet16(ds, 0x20eddb, 0x0001);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    esp += 4;
    return;
loc_1b1de0: // 0160:1b1de0
    memoryASet16(ds, 0x20d7c3, memoryAGet16(ds, 0x20d7c3) + 0x0001);
    ax = memoryAGet16(ds, 0x20d7c3);
    if (ax < 0x0002)
        goto loc_1b1e80;
    if (ax == 0x0065)
        goto loc_1b1e04;
    if (ax != 0x0028)
        goto loc_1b1e0b;
loc_1b1e04: // 0160:1b1e04
    sub_1b191a();
    goto loc_1b1e51;
loc_1b1e0b: // 0160:1b1e0b
    if (ax != 0x0003)
        goto loc_1b1e51;
    ax = memoryAGet16(ds, 0x20ee53);
    ax -= 0x0030;
    ax >>= 1;
    ax += 0x0080;
    bx = memoryAGet16(ds, 0x20ee55);
    bx >>= 1;
    bx -= 0x0028;
    bx += 0x0080;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1b1e44;
    bx -= 0x0020;
loc_1b1e44: // 0160:1b1e44
    cx = 0x001f;
    dx = 0x0010;
    goto loc_1b19e0;
loc_1b1e51: // 0160:1b1e51
    ax = memoryAGet16(ds, 0x20ee4f);
loc_1b1e57: // 0160:1b1e57
    bx = memoryAGet16(ds, 0x20ee4f);
    if (bx == ax)
        goto loc_1b1e57;
    goto loc_1b1cd0;
loc_1b1e68: // 0160:1b1e68
    memoryASet16(ds, 0x20c830, memoryAGet16(ds, 0x20c830) + 0x0001);
    al = memoryAGet(ds, 0x20c82e);
    al <<= 1;
    if (!!al && stop())
        goto loc_1b1e7b;
    al = 0x01;
loc_1b1e7b: // 0160:1b1e7b
    memoryASet(ds, 0x20c82e, al);
loc_1b1e80: // 0160:1b1e80
    esp += 4;
    return;
}
void sub_1b1e81() // 0160:1b1e81 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d7f1, 0x0000);
    memoryASet16(ds, 0x20d7f3, 0x0000);
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1b1ee8;
    memoryASet16(ds, 0x20d7b3, 0x0003);
    eax = 0x0020cf4f;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020cf61;
    memoryASet32(ds, 0x20e815, eax);
    edx = 0;
    dx = memoryAGet16(ds, 0x20d7a7);
    dx <<= 1;
    edi = memoryAGet32(ds, 0x20e811);
    ax = memoryAGet16(ds, edi + edx);
    ax += 0x0010;
    edi = memoryAGet32(ds, 0x20e815);
    bx = memoryAGet16(ds, edi + edx);
    bx += 0x0010;
    goto loc_1b2008;
loc_1b1ee8: // 0160:1b1ee8
    memoryASet16(ds, 0x20d7b3, 0x0010);
    esi = 0x0020d773;
    eax = 0x0020cf4f;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020cf61;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf3d;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020cf85;
    memoryASet32(ds, 0x20e81d, eax);
    eax = 0;
    cx = 0;
    dx = 0;
    ax = 0xffff;
    bx = 0xffff;
    memoryASet16(ds, 0x20e7fd, 0x0000);
    memoryASet16(ds, 0x20e809, 0x0008);
loc_1b1f40: // 0160:1b1f40
    push(ax);
    al = memoryAGet(ds, esi);
    memoryASet(ds, 0x20e801, al);
    esi += 0x00000001;
    ax = pop();
    if (!(memoryAGet(ds, 0x20e801) & 0xff))
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e819);
    bp = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x20e819, memoryAGet32(ds, 0x20e819) + 0x00000002);
    if (bp > 0x0004)
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e81d);
    bp = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x20e81d, memoryAGet32(ds, 0x20e81d) + 0x00000002);
    if ((short)bp >= (short)0x0049)
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e811);
    ebp = 0;
    bp = memoryAGet16(ds, 0x20e7fd);
    bp = memoryAGet16(ds, edi + ebp);
    if (bp > ax)
        goto loc_1b1f9e;
    ax = bp;
loc_1b1f9e: // 0160:1b1f9e
    if (bp < cx)
        goto loc_1b1fa6;
    cx = bp;
loc_1b1fa6: // 0160:1b1fa6
    memoryASet16(ds, 0x20e801, bp);
    edi = memoryAGet32(ds, 0x20e815);
    ebp = 0;
    bp = memoryAGet16(ds, 0x20e7fd);
    bp = memoryAGet16(ds, edi + ebp);
    if (bp > bx)
        goto loc_1b1fc8;
    bx = bp;
loc_1b1fc8: // 0160:1b1fc8
    if (bp < dx)
        goto loc_1b1fd0;
    dx = bp;
loc_1b1fd0: // 0160:1b1fd0
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) + 0x0002);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1b1f40;
    ax += cx;
    ax >>= 1;
    ax += 0x0008;
    bx += dx;
    bx >>= 1;
    bx += 0x0008;
    bp = memoryAGet16(ds, 0x20d2b3);
    memoryASet16(ds, 0x20e805, bp);
loc_1b2008: // 0160:1b2008
    memoryASet16(ds, 0x20d2b1, ax);
    memoryASet16(ds, 0x20d2b3, bx);
    memoryASet16(ds, 0x20d2b5, 0x0000);
    if (!(memoryAGet16(ds, 0x20d867) & 0xffff))
        goto loc_1b206b;
    ax = memoryAGet16(ds, 0x20ee53);
    ax -= 0x0008;
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b1) >= 0)
        goto loc_1b2049;
    ax = memoryAGet16(ds, 0x20cef5);
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) + ax);
loc_1b2049: // 0160:1b2049
    ax = memoryAGet16(ds, 0x20ee55);
    ax -= 0x0010;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b3) >= 0)
        goto loc_1b20b1;
    ax = memoryAGet16(ds, 0x20cef9);
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
    goto loc_1b20b1;
loc_1b206b: // 0160:1b206b
    ax = memoryAGet16(ds, 0x20ee53);
    ax -= 0x0010;
    ax >>= 1;
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b1) >= 0)
        goto loc_1b208e;
    ax = memoryAGet16(ds, 0x20cef5);
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) + ax);
loc_1b208e: // 0160:1b208e
    ax = memoryAGet16(ds, 0x20ee55);
    ax -= 0x0010;
    ax >>= 1;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b3) >= 0)
        goto loc_1b20b1;
    ax = memoryAGet16(ds, 0x20cef9);
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
loc_1b20b1: // 0160:1b20b1
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1b210c;
    bp = memoryAGet16(ds, 0x20e805);
    bp -= memoryAGet16(ds, 0x20d2b3);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp <= (short)0x0708)
        goto loc_1b210c;
    if (bp >= 0xf8f8)
        goto loc_1b210c;
    ax = memoryAGet16(ds, 0x20d2b3);
    if (ax <= 0x0708)
        goto loc_1b210c;
    bx = memoryAGet16(ds, 0x20cef9);
    bx -= 0x0708;
    if (bx <= ax)
        goto loc_1b210c;
    ax = memoryAGet16(ds, 0x20cef9);
    ax >>= 1;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
loc_1b210c: // 0160:1b210c
    bx = memoryAGet16(ds, 0x20cef5);
    bx >>= 1;
    if (!(memoryAGet16(ds, 0x20d7f5) & 0xffff))
        goto loc_1b2148;
    ax = memoryAGet16(ds, 0x20cf23);
    ax -= memoryAGet16(ds, 0x20d2b1);
    if (!ax)
        goto loc_1b2253;
    if ((short)ax >= 0)
        goto loc_1b213d;
    ax += memoryAGet16(ds, 0x20cef5);
loc_1b213d: // 0160:1b213d
    if ((short)bx < (short)ax)
        goto loc_1b21e4;
    goto loc_1b216a;
loc_1b2148: // 0160:1b2148
    ax = memoryAGet16(ds, 0x20cf23);
    ax -= memoryAGet16(ds, 0x20d2b1);
    if (!ax)
        goto loc_1b2253;
    if ((short)ax >= 0)
        goto loc_1b216a;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1b21e4;
loc_1b216a: // 0160:1b216a
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b219c;
    bx = memoryAGet16(ds, 0x20cf23);
    if ((short)bx < (short)memoryAGet16(ds, 0x20d2b1))
        goto loc_1b219c;
    bx = memoryAGet16(ds, 0x20d2b1);
    bx -= memoryAGet16(ds, 0x20cf23);
    if ((short)bx > (short)0x0028)
        goto loc_1b219c;
    goto loc_1b2221;
loc_1b219c: // 0160:1b219c
    ax -= memoryAGet16(ds, 0x20cef5);
    ax = -ax;
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b21bd;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b21bd: // 0160:1b21bd
    memoryASet16(ds, 0x20d7f1, ax);
    memoryASet16(ds, 0x20d7f1, memoryAGet16(ds, 0x20d7f1) + 0x0001);
    memoryASet16(ds, 0x20d7f1, -memoryAGet16(ds, 0x20d7f1));
loc_1b21d2: // 0160:1b21d2
    push32(eax);
    sub_1b242c();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b21d2;
    goto loc_1b2253;
    // gap 3 bytes
loc_1b21e4: // 0160:1b21e4
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b2221;
    bx = memoryAGet16(ds, 0x20cf23);
    if ((short)bx > (short)memoryAGet16(ds, 0x20d2b1))
        goto loc_1b2221;
    bx = memoryAGet16(ds, 0x20d2b1);
    bx -= memoryAGet16(ds, 0x20cf23);
    cx = memoryAGet16(ds, 0x20cef5);
    cx -= bx;
    if ((short)cx < (short)0x00a0)
        goto loc_1b2221;
    goto loc_1b219c;
loc_1b2221: // 0160:1b2221
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2238;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2238: // 0160:1b2238
    memoryASet16(ds, 0x20d7f1, ax);
    memoryASet16(ds, 0x20d7f1, memoryAGet16(ds, 0x20d7f1) + 0x0001);
loc_1b2246: // 0160:1b2246
    push32(eax);
    sub_1b24f5();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b2246;
loc_1b2253: // 0160:1b2253
    if (memoryAGet16(ds, 0x20d7b9) != 0x0015)
        goto loc_1b228a;
    if (!(memoryAGet16(ds, 0x20d861) & 0xffff))
        goto loc_1b228a;
    ax = memoryAGet16(ds, 0x20cf25);
    ax -= memoryAGet16(ds, 0x20d2b3);
    if (!ax)
        goto loc_1b239e;
    if ((short)ax >= 0)
        goto loc_1b232f;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1b22b5;
loc_1b228a: // 0160:1b228a
    bx = memoryAGet16(ds, 0x20cef9);
    bx >>= 1;
    ax = memoryAGet16(ds, 0x20cf25);
    ax -= memoryAGet16(ds, 0x20d2b3);
    if (!ax)
        goto loc_1b239e;
    if ((short)ax >= 0)
        goto loc_1b22b0;
    ax += memoryAGet16(ds, 0x20cef9);
loc_1b22b0: // 0160:1b22b0
    if ((short)bx >= (short)ax)
        goto loc_1b232f;
loc_1b22b5: // 0160:1b22b5
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b22e7;
    bx = memoryAGet16(ds, 0x20cf25);
    if ((short)bx < (short)memoryAGet16(ds, 0x20d2b3))
        goto loc_1b22e7;
    bx = memoryAGet16(ds, 0x20d2b3);
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx > (short)0x0028)
        goto loc_1b22e7;
    goto loc_1b236c;
loc_1b22e7: // 0160:1b22e7
    ax -= memoryAGet16(ds, 0x20cef9);
    ax = -ax;
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2308;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2308: // 0160:1b2308
    memoryASet16(ds, 0x20d7f3, ax);
    memoryASet16(ds, 0x20d7f3, memoryAGet16(ds, 0x20d7f3) + 0x0001);
    memoryASet16(ds, 0x20d7f3, -memoryAGet16(ds, 0x20d7f3));
loc_1b231d: // 0160:1b231d
    push32(eax);
    sub_1b2598();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b231d;
    goto loc_1b239e;
    // gap 3 bytes
loc_1b232f: // 0160:1b232f
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b236c;
    bx = memoryAGet16(ds, 0x20cf25);
    if ((short)bx > (short)memoryAGet16(ds, 0x20d2b3))
        goto loc_1b236c;
    bx = memoryAGet16(ds, 0x20d2b3);
    bx -= memoryAGet16(ds, 0x20cf25);
    cx = memoryAGet16(ds, 0x20cef9);
    cx -= bx;
    if ((short)cx < (short)0x00a0)
        goto loc_1b236c;
    goto loc_1b22e7;
loc_1b236c: // 0160:1b236c
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2383;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2383: // 0160:1b2383
    memoryASet16(ds, 0x20d7f3, ax);
    memoryASet16(ds, 0x20d7f3, memoryAGet16(ds, 0x20d7f3) + 0x0001);
loc_1b2391: // 0160:1b2391
    push32(eax);
    sub_1b266d();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b2391;
loc_1b239e: // 0160:1b239e
    if (memoryAGet16(ds, 0x20d88d) & 0xffff)
        goto loc_1b2404;
    ax = memoryAGet16(ds, 0x20d2b1);
    ax -= memoryAGet16(ds, 0x20cf23);
    if (ax)
        goto loc_1b23c7;
    ax = memoryAGet16(ds, 0x20d2b3);
    ax -= memoryAGet16(ds, 0x20cf25);
    if (!ax)
        goto loc_1b2422;
loc_1b23c7: // 0160:1b23c7
    ax = memoryAGet16(ds, 0x20cf25);
    if (!ax)
        goto loc_1b2422;
    bx = memoryAGet16(ds, 0x20cf23);
    if (!bx)
        goto loc_1b2422;
    bx += memoryAGet16(ds, 0x20ee53);
    bx++;
    if (bx == memoryAGet16(ds, 0x20cef5))
        goto loc_1b2422;
    ax += memoryAGet16(ds, 0x20ee55);
    ax++;
    if (ax == memoryAGet16(ds, 0x20cef9))
        goto loc_1b2422;
    goto loc_1b242b;
loc_1b2404: // 0160:1b2404
    ax = memoryAGet16(ds, 0x20d2b1);
    ax -= memoryAGet16(ds, 0x20cf23);
    if (ax)
        goto loc_1b242b;
    ax = memoryAGet16(ds, 0x20d2b3);
    ax -= memoryAGet16(ds, 0x20cf25);
    if (ax)
        goto loc_1b242b;
loc_1b2422: // 0160:1b2422
    memoryASet16(ds, 0x20d2b5, 0x0001);
loc_1b242b: // 0160:1b242b
    esp += 4;
    return;
}
void sub_1b1ef1() // 0160:1b1ef1 +long
{
    esp -= 4;
    esi = 0x0020d773;
    eax = 0x0020cf4f;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020cf61;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf3d;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020cf85;
    memoryASet32(ds, 0x20e81d, eax);
    eax = 0;
    cx = 0;
    dx = 0;
    ax = 0xffff;
    bx = 0xffff;
    memoryASet16(ds, 0x20e7fd, 0x0000);
    memoryASet16(ds, 0x20e809, 0x0008);
loc_1b1f40: // 0160:1b1f40
    push(ax);
    al = memoryAGet(ds, esi);
    memoryASet(ds, 0x20e801, al);
    esi += 0x00000001;
    ax = pop();
    if (!(memoryAGet(ds, 0x20e801) & 0xff))
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e819);
    bp = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x20e819, memoryAGet32(ds, 0x20e819) + 0x00000002);
    if (bp > 0x0004)
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e81d);
    bp = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x20e81d, memoryAGet32(ds, 0x20e81d) + 0x00000002);
    if ((short)bp >= (short)0x0049)
        goto loc_1b1fd0;
    edi = memoryAGet32(ds, 0x20e811);
    ebp = 0;
    bp = memoryAGet16(ds, 0x20e7fd);
    bp = memoryAGet16(ds, edi + ebp);
    if (bp > ax)
        goto loc_1b1f9e;
    ax = bp;
loc_1b1f9e: // 0160:1b1f9e
    if (bp < cx)
        goto loc_1b1fa6;
    cx = bp;
loc_1b1fa6: // 0160:1b1fa6
    memoryASet16(ds, 0x20e801, bp);
    edi = memoryAGet32(ds, 0x20e815);
    ebp = 0;
    bp = memoryAGet16(ds, 0x20e7fd);
    bp = memoryAGet16(ds, edi + ebp);
    if (bp > bx)
        goto loc_1b1fc8;
    bx = bp;
loc_1b1fc8: // 0160:1b1fc8
    if (bp < dx)
        goto loc_1b1fd0;
    dx = bp;
loc_1b1fd0: // 0160:1b1fd0
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) + 0x0002);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1b1f40;
    ax += cx;
    ax >>= 1;
    ax += 0x0008;
    bx += dx;
    bx >>= 1;
    bx += 0x0008;
    bp = memoryAGet16(ds, 0x20d2b3);
    memoryASet16(ds, 0x20e805, bp);
    memoryASet16(ds, 0x20d2b1, ax);
    memoryASet16(ds, 0x20d2b3, bx);
    memoryASet16(ds, 0x20d2b5, 0x0000);
    if (!(memoryAGet16(ds, 0x20d867) & 0xffff))
        goto loc_1b206b;
    ax = memoryAGet16(ds, 0x20ee53);
    ax -= 0x0008;
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b1) >= 0)
        goto loc_1b2049;
    ax = memoryAGet16(ds, 0x20cef5);
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) + ax);
loc_1b2049: // 0160:1b2049
    ax = memoryAGet16(ds, 0x20ee55);
    ax -= 0x0010;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b3) >= 0)
        goto loc_1b20b1;
    ax = memoryAGet16(ds, 0x20cef9);
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
    goto loc_1b20b1;
loc_1b206b: // 0160:1b206b
    ax = memoryAGet16(ds, 0x20ee53);
    ax -= 0x0010;
    ax >>= 1;
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b1) >= 0)
        goto loc_1b208e;
    ax = memoryAGet16(ds, 0x20cef5);
    memoryASet16(ds, 0x20d2b1, memoryAGet16(ds, 0x20d2b1) + ax);
loc_1b208e: // 0160:1b208e
    ax = memoryAGet16(ds, 0x20ee55);
    ax -= 0x0010;
    ax >>= 1;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) - ax);
    if ((short)memoryAGet16(ds, 0x20d2b3) >= 0)
        goto loc_1b20b1;
    ax = memoryAGet16(ds, 0x20cef9);
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
loc_1b20b1: // 0160:1b20b1
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1b210c;
    bp = memoryAGet16(ds, 0x20e805);
    bp -= memoryAGet16(ds, 0x20d2b3);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp <= (short)0x0708)
        goto loc_1b210c;
    if (bp >= 0xf8f8)
        goto loc_1b210c;
    ax = memoryAGet16(ds, 0x20d2b3);
    if (ax <= 0x0708)
        goto loc_1b210c;
    bx = memoryAGet16(ds, 0x20cef9);
    bx -= 0x0708;
    if (bx <= ax)
        goto loc_1b210c;
    ax = memoryAGet16(ds, 0x20cef9);
    ax >>= 1;
    memoryASet16(ds, 0x20d2b3, memoryAGet16(ds, 0x20d2b3) + ax);
loc_1b210c: // 0160:1b210c
    bx = memoryAGet16(ds, 0x20cef5);
    bx >>= 1;
    if (!(memoryAGet16(ds, 0x20d7f5) & 0xffff))
        goto loc_1b2148;
    ax = memoryAGet16(ds, 0x20cf23);
    ax -= memoryAGet16(ds, 0x20d2b1);
    if (!ax)
        goto loc_1b2253;
    if ((short)ax >= 0)
        goto loc_1b213d;
    ax += memoryAGet16(ds, 0x20cef5);
loc_1b213d: // 0160:1b213d
    if ((short)bx < (short)ax)
        goto loc_1b21e4;
    goto loc_1b216a;
loc_1b2148: // 0160:1b2148
    ax = memoryAGet16(ds, 0x20cf23);
    ax -= memoryAGet16(ds, 0x20d2b1);
    if (!ax)
        goto loc_1b2253;
    if ((short)ax >= 0)
        goto loc_1b216a;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1b21e4;
loc_1b216a: // 0160:1b216a
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b219c;
    bx = memoryAGet16(ds, 0x20cf23);
    if ((short)bx < (short)memoryAGet16(ds, 0x20d2b1))
        goto loc_1b219c;
    bx = memoryAGet16(ds, 0x20d2b1);
    bx -= memoryAGet16(ds, 0x20cf23);
    if ((short)bx > (short)0x0028)
        goto loc_1b219c;
    goto loc_1b2221;
loc_1b219c: // 0160:1b219c
    ax -= memoryAGet16(ds, 0x20cef5);
    ax = -ax;
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b21bd;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b21bd: // 0160:1b21bd
    memoryASet16(ds, 0x20d7f1, ax);
    memoryASet16(ds, 0x20d7f1, memoryAGet16(ds, 0x20d7f1) + 0x0001);
    memoryASet16(ds, 0x20d7f1, -memoryAGet16(ds, 0x20d7f1));
loc_1b21d2: // 0160:1b21d2
    push32(eax);
    sub_1b242c();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b21d2;
    goto loc_1b2253;
    // gap 3 bytes
loc_1b21e4: // 0160:1b21e4
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b2221;
    bx = memoryAGet16(ds, 0x20cf23);
    if ((short)bx > (short)memoryAGet16(ds, 0x20d2b1))
        goto loc_1b2221;
    bx = memoryAGet16(ds, 0x20d2b1);
    bx -= memoryAGet16(ds, 0x20cf23);
    cx = memoryAGet16(ds, 0x20cef5);
    cx -= bx;
    if ((short)cx < (short)0x00a0)
        goto loc_1b2221;
    goto loc_1b219c;
loc_1b2221: // 0160:1b2221
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2238;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2238: // 0160:1b2238
    memoryASet16(ds, 0x20d7f1, ax);
    memoryASet16(ds, 0x20d7f1, memoryAGet16(ds, 0x20d7f1) + 0x0001);
loc_1b2246: // 0160:1b2246
    push32(eax);
    sub_1b24f5();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b2246;
loc_1b2253: // 0160:1b2253
    if (memoryAGet16(ds, 0x20d7b9) != 0x0015)
        goto loc_1b228a;
    if (!(memoryAGet16(ds, 0x20d861) & 0xffff))
        goto loc_1b228a;
    ax = memoryAGet16(ds, 0x20cf25);
    ax -= memoryAGet16(ds, 0x20d2b3);
    if (!ax)
        goto loc_1b239e;
    if ((short)ax >= 0)
        goto loc_1b232f;
    ax += memoryAGet16(ds, 0x20cef9);
    goto loc_1b22b5;
loc_1b228a: // 0160:1b228a
    bx = memoryAGet16(ds, 0x20cef9);
    bx >>= 1;
    ax = memoryAGet16(ds, 0x20cf25);
    ax -= memoryAGet16(ds, 0x20d2b3);
    if (!ax)
        goto loc_1b239e;
    if ((short)ax >= 0)
        goto loc_1b22b0;
    ax += memoryAGet16(ds, 0x20cef9);
loc_1b22b0: // 0160:1b22b0
    if ((short)bx >= (short)ax)
        goto loc_1b232f;
loc_1b22b5: // 0160:1b22b5
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b22e7;
    bx = memoryAGet16(ds, 0x20cf25);
    if ((short)bx < (short)memoryAGet16(ds, 0x20d2b3))
        goto loc_1b22e7;
    bx = memoryAGet16(ds, 0x20d2b3);
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx > (short)0x0028)
        goto loc_1b22e7;
    goto loc_1b236c;
loc_1b22e7: // 0160:1b22e7
    ax -= memoryAGet16(ds, 0x20cef9);
    ax = -ax;
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2308;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2308: // 0160:1b2308
    memoryASet16(ds, 0x20d7f3, ax);
    memoryASet16(ds, 0x20d7f3, memoryAGet16(ds, 0x20d7f3) + 0x0001);
    memoryASet16(ds, 0x20d7f3, -memoryAGet16(ds, 0x20d7f3));
loc_1b231d: // 0160:1b231d
    push32(eax);
    sub_1b2598();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b231d;
    goto loc_1b239e;
    // gap 3 bytes
loc_1b232f: // 0160:1b232f
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b236c;
    bx = memoryAGet16(ds, 0x20cf25);
    if ((short)bx > (short)memoryAGet16(ds, 0x20d2b3))
        goto loc_1b236c;
    bx = memoryAGet16(ds, 0x20d2b3);
    bx -= memoryAGet16(ds, 0x20cf25);
    cx = memoryAGet16(ds, 0x20cef9);
    cx -= bx;
    if ((short)cx < (short)0x00a0)
        goto loc_1b236c;
    goto loc_1b22e7;
loc_1b236c: // 0160:1b236c
    ax -= 0x0001;
    if (ax < memoryAGet16(ds, 0x20d7b3))
        goto loc_1b2383;
    ax = memoryAGet16(ds, 0x20d7b3);
    ax -= 0x0001;
loc_1b2383: // 0160:1b2383
    memoryASet16(ds, 0x20d7f3, ax);
    memoryASet16(ds, 0x20d7f3, memoryAGet16(ds, 0x20d7f3) + 0x0001);
loc_1b2391: // 0160:1b2391
    push32(eax);
    sub_1b266d();
    eax = pop32();
    ax -= 0x0001;
    if ((short)ax >= 0)
        goto loc_1b2391;
loc_1b239e: // 0160:1b239e
    if (memoryAGet16(ds, 0x20d88d) & 0xffff)
        goto loc_1b2404;
    ax = memoryAGet16(ds, 0x20d2b1);
    ax -= memoryAGet16(ds, 0x20cf23);
    if (ax)
        goto loc_1b23c7;
    ax = memoryAGet16(ds, 0x20d2b3);
    ax -= memoryAGet16(ds, 0x20cf25);
    if (!ax)
        goto loc_1b2422;
loc_1b23c7: // 0160:1b23c7
    ax = memoryAGet16(ds, 0x20cf25);
    if (!ax)
        goto loc_1b2422;
    bx = memoryAGet16(ds, 0x20cf23);
    if (!bx)
        goto loc_1b2422;
    bx += memoryAGet16(ds, 0x20ee53);
    bx++;
    if (bx == memoryAGet16(ds, 0x20cef5))
        goto loc_1b2422;
    ax += memoryAGet16(ds, 0x20ee55);
    ax++;
    if (ax == memoryAGet16(ds, 0x20cef9))
        goto loc_1b2422;
    goto loc_1b242b;
loc_1b2404: // 0160:1b2404
    ax = memoryAGet16(ds, 0x20d2b1);
    ax -= memoryAGet16(ds, 0x20cf23);
    if (ax)
        goto loc_1b242b;
    ax = memoryAGet16(ds, 0x20d2b3);
    ax -= memoryAGet16(ds, 0x20cf25);
    if (ax)
        goto loc_1b242b;
loc_1b2422: // 0160:1b2422
    memoryASet16(ds, 0x20d2b5, 0x0001);
loc_1b242b: // 0160:1b242b
    esp += 4;
    return;
}
void sub_1b242c() // 0160:1b242c +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1b2482;
    bx = memoryAGet16(ds, 0x20cf23);
    bx += 0x0001;
    cx = memoryAGet16(ds, 0x20cef5);
    cx -= memoryAGet16(ds, 0x20ee53);
    if (bx != cx)
        goto loc_1b246e;
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b246e;
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b246e;
    esp += 4;
    return;
loc_1b246e: // 0160:1b246e
    if (bx != memoryAGet16(ds, 0x20cef5))
        goto loc_1b247a;
    bx = 0;
loc_1b247a: // 0160:1b247a
    memoryASet16(ds, 0x20cf23, bx);
    esp += 4;
    return;
loc_1b2482: // 0160:1b2482
    bx = memoryAGet16(ds, 0x20cf23);
    bx += 0x0001;
    memoryASet16(ds, 0x20cf23, bx);
    bx &= 0x0001;
    if (bx)
        goto loc_1b24f4;
    bx = memoryAGet16(ds, 0x20cf23);
    cx = memoryAGet16(ds, 0x20cef5);
    cx -= memoryAGet16(ds, 0x20ee53);
    cx -= memoryAGet16(ds, 0x20ee53);
    if (bx != cx)
        goto loc_1b24e1;
    memoryASet16(ds, 0x20d2b5, 0x0001);
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b24e1;
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b24e1;
    memoryASet16(ds, 0x20cf23, memoryAGet16(ds, 0x20cf23) - 0x0001);
    esp += 4;
    return;
loc_1b24e1: // 0160:1b24e1
    if (bx != memoryAGet16(ds, 0x20cef5))
        goto loc_1b24ed;
    bx = 0;
loc_1b24ed: // 0160:1b24ed
    memoryASet16(ds, 0x20cf23, bx);
loc_1b24f4: // 0160:1b24f4
    esp += 4;
    return;
}
void sub_1b24f5() // 0160:1b24f5 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1b253d;
    bx = memoryAGet16(ds, 0x20cf23);
    bx -= 0x0001;
    if (bx != 0xffff)
        goto loc_1b2535;
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b252a;
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b252a;
    esp += 4;
    return;
loc_1b252a: // 0160:1b252a
    bx = memoryAGet16(ds, 0x20cef5);
    bx -= 0x0001;
loc_1b2535: // 0160:1b2535
    memoryASet16(ds, 0x20cf23, bx);
    esp += 4;
    return;
loc_1b253d: // 0160:1b253d
    bx = memoryAGet16(ds, 0x20cf23);
    bx -= 0x0001;
    memoryASet16(ds, 0x20cf23, bx);
    bx &= 0x0001;
    if (!bx)
        goto loc_1b2597;
    bx = memoryAGet16(ds, 0x20cf23);
    if (bx != 0xffff)
        goto loc_1b2590;
    memoryASet16(ds, 0x20d2b5, 0x0001);
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b258d;
    if (memoryAGet(ds, 0x20d88b) & 0xff)
        goto loc_1b258d;
    memoryASet16(ds, 0x20cf23, memoryAGet16(ds, 0x20cf23) + 0x0001);
    esp += 4;
    return;
loc_1b258d: // 0160:1b258d
    bx = 0;
loc_1b2590: // 0160:1b2590
    memoryASet16(ds, 0x20cf23, bx);
loc_1b2597: // 0160:1b2597
    esp += 4;
    return;
}
void sub_1b2598() // 0160:1b2598 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1b25f2;
    bx = memoryAGet16(ds, 0x20cf25);
    bx += 0x0001;
    cx = memoryAGet16(ds, 0x20cef9);
    cx -= memoryAGet16(ds, 0x20ee55);
    if (bx != cx)
        goto loc_1b25da;
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b25da;
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b25da;
    esp += 4;
    return;
loc_1b25da: // 0160:1b25da
    if (bx < memoryAGet16(ds, 0x20cef9))
        goto loc_1b25ea;
    bx -= memoryAGet16(ds, 0x20cef9);
loc_1b25ea: // 0160:1b25ea
    memoryASet16(ds, 0x20cf25, bx);
    esp += 4;
    return;
loc_1b25f2: // 0160:1b25f2
    bx = memoryAGet16(ds, 0x20cf25);
    bx += 0x0001;
    memoryASet16(ds, 0x20cf25, bx);
    bx &= 0x0001;
    if (bx)
        goto loc_1b266c;
    bx = memoryAGet16(ds, 0x20cf25);
    cx = memoryAGet16(ds, 0x20cef9);
    cx -= memoryAGet16(ds, 0x20ee55);
    cx -= memoryAGet16(ds, 0x20ee55);
    if (bx != cx)
        goto loc_1b2655;
    memoryASet16(ds, 0x20d2b5, 0x0001);
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b2655;
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b2655;
    memoryASet16(ds, 0x20cf25, memoryAGet16(ds, 0x20cf25) - 0x0001);
    esp += 4;
    return;
loc_1b2655: // 0160:1b2655
    if (bx < memoryAGet16(ds, 0x20cef9))
        goto loc_1b2665;
    bx -= memoryAGet16(ds, 0x20cef9);
loc_1b2665: // 0160:1b2665
    memoryASet16(ds, 0x20cf25, bx);
loc_1b266c: // 0160:1b266c
    esp += 4;
    return;
}
void sub_1b266d() // 0160:1b266d +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1b26b5;
    bx = memoryAGet16(ds, 0x20cf25);
    bx -= 0x0001;
    if (bx != 0xffff)
        goto loc_1b26ad;
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b26a2;
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b26a2;
    esp += 4;
    return;
loc_1b26a2: // 0160:1b26a2
    bx = memoryAGet16(ds, 0x20cef9);
    bx -= 0x0001;
loc_1b26ad: // 0160:1b26ad
    memoryASet16(ds, 0x20cf25, bx);
    esp += 4;
    return;
loc_1b26b5: // 0160:1b26b5
    bx = memoryAGet16(ds, 0x20cf25);
    bx -= 0x0001;
    memoryASet16(ds, 0x20cf25, bx);
    bx &= 0x0001;
    if (!bx)
        goto loc_1b270f;
    bx = memoryAGet16(ds, 0x20cf25);
    if (bx != 0xffff)
        goto loc_1b2708;
    memoryASet16(ds, 0x20d2b5, 0x0001);
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1b2704;
    if (memoryAGet(ds, 0x20d88d) & 0xff)
        goto loc_1b2704;
    memoryASet16(ds, 0x20cf25, memoryAGet16(ds, 0x20cf25) + 0x0001);
    esp += 4;
    return;
loc_1b2704: // 0160:1b2704
    bx = 0x0001;
loc_1b2708: // 0160:1b2708
    memoryASet16(ds, 0x20cf25, bx);
loc_1b270f: // 0160:1b270f
    esp += 4;
    return;
}
void sub_1b29b6() // 0160:1b29b6 +long
{
    esp -= 4;
    esi = memoryAGet32(ds, 0x2eeb94);
    eax = 0;
    al = memoryAGet(ds, esi + 1);
    ebx = 0;
    bl = memoryAGet(ds, esi + 3);
    push32(eax);
    push32(ebx);
    ax <<= 5;
    bx <<= 5;
    memoryASet16(ds, 0x20cef9, bx);
    ebx = pop32();
    eax = pop32();
    mul16(bx);
    eax <<= 1;
    memoryASet32(ds, 0x20ceff, eax);
    esi += 0x00000004;
    esi += eax;
    memoryASet32(ds, 0x20cf07, esi);
    memoryASet32(ds, 0x20cf0b, esi);
    memoryASet32(ds, 0x20cf0f, esi);
    memoryASet32(ds, 0x20cf13, esi);
    memoryASet32(ds, 0x20cf17, esi);
    esp += 4;
}
void sub_1b2a07() // 0160:1b2a07 +long
{
    esp -= 4;
    sub_1b4bc9();
    memoryASet16(ds, 0x224644, 0x0000);
    memoryASet32(ds, 0x1f1c48, 0x00000140);
    memoryASet32(ds, 0x1f1c4c, 0x000000f0);
    sub_1a8b3c();
    edx = 0x001ecb03;
    eax = 0x0023c4e0;
    sub_1aa4e9();
    esi = 0x0023c4e0;
    edi = 0x0020c88f;
    ecx = 0x00000300;
loc_1b2a4c: // 0160:1b2a4c
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b2a4c;
    memoryASet16(ds, 0x224666, 0x0000);
    eax = 0x000a5000;
    edx = 0x0023c7e0;
    memoryASet16(ds, 0x20d80d, 0x0000);
loc_1b2a89: // 0160:1b2a89
    ecx = memoryAGet32(ds, 0x2eebd0);
    push32(ecx);
    ebx = memoryAGet32(ds, 0x20b800);
    ebx += 0x00030d40;
    push32(eax);
    sub_1da2a8();
    eax = pop32();
    memoryASet16(ds, 0x1f1cb8, ax);
    ax += 0x5000;
    if (ax < 0xf000)
        goto loc_1b2ab6;
    ax = 0;
loc_1b2ab6: // 0160:1b2ab6
    ecx = pop32();
    ecx += 0x00000003;
loc_1b2aba: // 0160:1b2aba
    sync();
    if (memoryAGet32(ds, 0x2eebd0) < ecx)
        goto loc_1b2aba;
    if (memoryAGet16(ds, edx) != 0xffff)
        goto loc_1b2a89;
    esp += 4;
}
void sub_1b2aca() // 0160:1b2aca +long
{
    esp -= 4;
    sub_1b4bc9();
    edx = 0x001ed0b5;
    edi = 0x000a0000;
    sub_1b524f();
    edx = 0x001ed0c9;
    edi = 0x000a4800;
    sub_1b524f();
    memoryASet16(ds, 0x224648, 0x0000);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1b4f0e();
loc_1b2b0d: // 0160:1b2b0d
    sub_1b2b87();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b2b25;
    memoryASet16(ds, 0x20cec3, memoryAGet16(ds, 0x20cec3) + 1);
loc_1b2b25: // 0160:1b2b25
    if (memoryAGet16(ds, 0x20cec3) != 0x0006)
        goto loc_1b2b70;
    esi = 0x0020c88f;
    edi = 0x0020e9c5;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_1b4edf();
    sub_1b4ec6();
    edi = 0x0020c88f;
    esi = 0x0020e9c5;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_1b4f0e();
    memoryASet16(ds, 0x224648, 0x0001);
    memoryASet16(ds, 0x20cec3, memoryAGet16(ds, 0x20cec3) + 1);
loc_1b2b70: // 0160:1b2b70
    if (memoryAGet16(ds, 0x20cec3) != 0x000d)
        goto loc_1b2b7b;
    esp += 4;
    return;
loc_1b2b7b: // 0160:1b2b7b
    if (memoryAGet(ds, 0x20c840) & 0xff)
        goto loc_1b2b86;
    goto loc_1b2b0d;
loc_1b2b86: // 0160:1b2b86
    esp += 4;
    return;
}
void sub_1b2b87() // 0160:1b2b87 +long
{
    esp -= 4;
    bx = 0;
    if (!(memoryAGet16(ds, 0x224648) & 0xffff))
        goto loc_1b2b99;
    bx = 0x4800;
loc_1b2b99: // 0160:1b2b99
    memoryASet16(ds, 0x1f1cb8, bx);
    sub_1a840e();
    memoryASet16(ds, 0x20eeb0, memoryAGet16(ds, 0x20eeb0) + 1);
    goto loc_1bdf30;
    // gap 45951 bytes
loc_1bdf30: // 0160:1bdf30
    memoryASet(ds, 0x20c840, 0x00);
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1bdf4b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1bdf4b: // 0160:1bdf4b
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1bdf5f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x20);
loc_1bdf5f: // 0160:1bdf5f
    al = memoryAGet(ds, 0x30b0ec);
    if (al)
        goto loc_1bdf79;
    al = memoryAGet(ds, 0x30b08c);
    if (!al)
        goto loc_1bdf80;
loc_1bdf79: // 0160:1bdf79
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1bdf80: // 0160:1bdf80
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1bdf94;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1bdf94: // 0160:1bdf94
    if (memoryAGet(ds, 0x30b118) == 0x00)
        goto loc_1bdfa4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x01);
loc_1bdfa4: // 0160:1bdfa4
    if (memoryAGet(ds, 0x30b120) == 0x00)
        goto loc_1bdfb4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x02);
loc_1bdfb4: // 0160:1bdfb4
    if (memoryAGet(ds, 0x30b11d) == 0x00)
        goto loc_1bdfc4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1bdfc4: // 0160:1bdfc4
    if (memoryAGet(ds, 0x30b11b) == 0x00)
        goto loc_1bdfd4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1bdfd4: // 0160:1bdfd4
    esp += 4;
    return;
}
void sub_1b2bb1() // 0160:1b2bb1 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed7f, 0x0001);
    memoryASet16(ds, 0x20ee49, 0x0001);
    ax = memoryAGet16(ds, 0x20ed83);
    ax++;
    if (ax != 0x000c)
        goto loc_1b2bd3;
    eax = 0;
loc_1b2bd3: // 0160:1b2bd3
    memoryASet16(ds, 0x20ed83, ax);
    ax <<= 1;
    esi = 0x001ef528;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    if (ax == 0x00ff)
        goto loc_1b2caa;
    memoryASet16(ds, 0x20ed4d, 0x0004);
    esi = 0x00203e42;
    cx = 0x000e;
    mul16(cx);
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, cx);
    ecx = memoryAGet32(ds, esi + eax + 10);
    memoryASet32(ds, 0x20d859, ecx);
    bx = 0x0003;
    memoryASet16(ds, 0x20d865, bx);
    memoryASet16(ds, 0x20e8bb, bx);
    edi = 0x0020e8c1;
    cx = memoryAGet16(ds, esi + eax + 8);
    ebp = 0x00000003;
loc_1b2c44: // 0160:1b2c44
    bx = memoryAGet16(ds, esi + eax + 2);
    if (bx != memoryAGet16(ds, 0x20e8e1))
        goto loc_1b2c55;
    bx = cx;
loc_1b2c55: // 0160:1b2c55
    memoryASet16(ds, edi, bx);
    edi += 0x00000002;
    eax += 0x00000002;
    ebp--;
    if (ebp)
        goto loc_1b2c44;
    memoryASet16(ds, 0x20ed81, 0x0078);
    sub_1b8241();
    if (memoryAGet16(ds, 0x20ed81) & 0xffff)
        goto loc_1b2cb9;
    ax = memoryAGet16(ds, 0x20d7f5);
    push32(eax);
    memoryASet16(ds, 0x20d7f5, 0x0001);
    memoryASet16(ds, 0x20d89f, 0x0000);
    memoryASet16(ds, 0x20ed81, 0x028a);
    sub_1abc11();
    eax = pop32();
    memoryASet16(ds, 0x20d7f5, ax);
    goto loc_1b2cb9;
loc_1b2caa: // 0160:1b2caa
    sub_1b2a07();
    sub_1cdeae();
    sub_1b2aca();
loc_1b2cb9: // 0160:1b2cb9
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b2ccb;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b2ccb: // 0160:1b2ccb
    memoryASet16(ds, 0x20ed7f, 0x0000);
    memoryASet16(ds, 0x20ed81, 0x0000);
    esp += 4;
}
void sub_1b2cde() // 0160:1b2cde +long
{
    esp -= 4;
    edx = 0x001ed0a1;
    eax = 0x00003d02;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    goto loc_1b2d10;
    // gap 25 bytes
loc_1b2d10: // 0160:1b2d10
    edx = 0x0023f52c;
    ecx = 0x00002ed4;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
    // gap 144 bytes
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2cf7() // 0160:1b2cf7 +long
{
    esp -= 4;
    edx = 0x001ed0a1;
    ecx = 0;
    eax = 0x00003c00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0023f52c;
    ecx = 0x00002ed4;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
    // gap 144 bytes
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2d91() // 0160:1b2d91 +long
{
    esp -= 4;
    edx = 0x001ed08d;
    eax = 0x00003d02;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0022479c;
    ecx = 0x00000410;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2df9() // 0160:1b2df9 +long
{
    esp -= 4;
    goto loc_1b2df9;
loc_1b2d3b: // 0160:1b2d3b
    memoryASet32(ds, 0x224b7a, 0x53757065);
    memoryASet32(ds, 0x224b7e, 0x72736f6e);
    memoryASet32(ds, 0x224b82, 0x69632053);
    memoryASet32(ds, 0x224b86, 0x6f667477);
    memoryASet32(ds, 0x224b8a, 0x61726520);
    memoryASet32(ds, 0x224b8e, 0x4c74642e);
    edx = 0x001ed08d;
    ecx = 0;
    eax = 0x00003c00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    goto loc_1b2da4;
    // gap 22 bytes
loc_1b2da4: // 0160:1b2da4
    edx = 0x0022479c;
    ecx = 0x00000410;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
loc_1b2df9: // 0160:1b2df9
    memoryASet32(ds, 0x22479c, 0x68617372);
    memoryASet32(ds, 0x2247a0, 0x65736574);
    memoryASet16(ds, 0x2247a4, 0x0000);
    memoryASet16(ds, 0x20ee3d, 0x0000);
    memoryASet16(ds, 0x20ee3f, 0x0000);
    memoryASet16(ds, 0x20ee41, 0x0000);
    memoryASet16(ds, 0x20ee43, 0x0000);
    push(ds);
    es = pop();
    edi = 0x00224866;
    esi = 0x001ec010;
    ecx = 0x00000060;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020edbd;
    memoryASet(ds, esi, 0x04);
    memoryASet(ds, esi + 1, 0x05);
    memoryASet(ds, esi + 2, 0x09);
    memoryASet(ds, esi + 3, 0x09);
    memoryASet(ds, esi + 4, 0x09);
    memoryASet(ds, esi + 5, 0x00);
    eax = memoryAGet32(ds, 0x224866);
    bx = memoryAGet16(ds, 0x22486a);
    push32(eax);
    push32(ebx);
    esi = 0x00224866;
    ecx = 0x00000006;
loc_1b2e81: // 0160:1b2e81
    memoryASet(ds, esi, 0x5b);
    esi++;
    if (--ecx)
        goto loc_1b2e81;
    memoryASet16(ds, 0x20e809, 0x001d);
    edi = 0x002248c6;
loc_1b2e95: // 0160:1b2e95
    sub_1be4a2();
    sub_1be4a2();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 1);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1b2e95;
    memoryASet16(ds, 0x20e809, 0x001b);
    edi = 0x002249f6;
loc_1b2eb6: // 0160:1b2eb6
    sub_1be4a2();
    sub_1be4a2();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 1);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1b2eb6;
    memoryASet16(ds, 0x20e809, 0x03e7);
    edi = 0x0023f52c;
loc_1b2ed7: // 0160:1b2ed7
    sub_1be4a2();
    sub_1be4a2();
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 1);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1b2ed7;
    sub_1b2cf7();
    ebx = pop32();
    eax = pop32();
    memoryASet32(ds, 0x224866, eax);
    memoryASet16(ds, 0x22486a, bx);
    esi = 0x002247a6;
    ax = 0x00ff;
    ecx = 0x00000060;
loc_1b2f0b: // 0160:1b2f0b
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b2f0b;
    goto loc_1b2d3b;
    // gap 106 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2f18() // 0160:1b2f18 +long
{
    esp -= 4;
    edx = 0x001ed08d;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2f77;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0022479c;
    ecx = 0x00000410;
    memoryASet32(ds, 0x20ceeb, ecx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2f6c;
    if (memoryAGet32(ds, 0x20ceeb) != eax)
        goto loc_1b2f61;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1b2f61: // 0160:1b2f61
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f82;
loc_1b2f6c: // 0160:1b2f6c
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1b2f82;
loc_1b2f77: // 0160:1b2f77
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2f82() // 0160:1b2f82 +long
{
    esp -= 4;
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1b2f96() // 0160:1b2f96 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecd32;
    sub_1bd863();
    sub_1b55c7();
    sub_1bd478();
    esi = 0x0020e8e1;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ecbb, 0x0001);
    sub_1bd346();
    memoryASet16(ds, 0x20e909, 0x0000);
    memoryASet16(ds, 0x20e8fb, 0x0002);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20e8fd, 0x0114);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
    sub_1b191a();
    al = 0x06;
    sub_1b18a6();
loc_1b3019: // 0160:1b3019
    sub_1b5096();
    sub_1b531f();
    if ((short)memoryAGet16(ds, 0x20e909) <= (short)0x001e)
        goto loc_1b302e;
    esp += 4;
    return;
loc_1b302e: // 0160:1b302e
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1b3041;
    memoryASet16(ds, 0x20e909, memoryAGet16(ds, 0x20e909) + 1);
loc_1b3041: // 0160:1b3041
    sub_1b3052();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b3019;
}
void sub_1b3052() // 0160:1b3052 +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231d2, 0x0001);
    esi = 0x002245f0;
    memoryASet16(ds, esi, 0x00b0);
    memoryASet16(ds, esi + 2, 0x009c);
    memoryASet16(ds, esi + 4, 0x0010);
    memoryASet16(ds, esi + 6, 0x0010);
    ax = memoryAGet16(ds, 0x20e8fb);
    if (ax == 0x0102)
        goto loc_1b308d;
    ax += 0x0008;
    memoryASet16(ds, 0x20e8fb, ax);
loc_1b308d: // 0160:1b308d
    bx = 0x0114;
    cx = 0;
    dx = 0x0005;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_1bd7dd();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ax += 0x0034;
    if ((short)memoryAGet16(ds, 0x20e909) < (short)0x0008)
        goto loc_1b3107;
    if ((short)memoryAGet16(ds, 0x20e909) < (short)0x000a)
        goto loc_1b30e8;
    if ((short)memoryAGet16(ds, 0x20e909) < (short)0x0014)
        goto loc_1b3107;
    if (memoryAGet16(ds, 0x20e8fd) == 0x0114)
        goto loc_1b3107;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0001;
    if (!bp)
        goto loc_1b3107;
    memoryASet16(ds, 0x20e8fd, memoryAGet16(ds, 0x20e8fd) - 1);
    goto loc_1b3107;
loc_1b30e8: // 0160:1b30e8
    if (memoryAGet16(ds, 0x20e8fd) == 0x011c)
        goto loc_1b3107;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0001;
    if (!bp)
        goto loc_1b3107;
    memoryASet16(ds, 0x20e8fd, memoryAGet16(ds, 0x20e8fd) + 1);
loc_1b3107: // 0160:1b3107
    bx = memoryAGet16(ds, 0x20e8fd);
    bp = memoryAGet16(ds, 0x20e90b);
    if (memoryAGet16(ds, 0x20e909) > 0x0013)
        goto loc_1b3121;
    bp++;
loc_1b3121: // 0160:1b3121
    if ((short)bp < (short)0x000a)
        goto loc_1b312b;
    bp = 0x0009;
loc_1b312b: // 0160:1b312b
    bp++;
    cx += bp;
    sub_1bd7dd();
    ax = 0x0108;
    bx = 0x00d8;
    cx = 0;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x003f;
    bp >>= 5;
    if (!bp)
        goto loc_1b3153;
    cx++;
loc_1b3153: // 0160:1b3153
    cx &= 0x0001;
    cx += 0x000b;
    dx = 0x0004;
    sub_1bd50f();
    cx = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20cec3, cx);
    cx += 0x0012;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    bx += 0x0030;
    sub_1bd51f();
    sub_1bd50f();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    cx = 0x000d;
    dx = 0x0008;
    goto loc_1bd507;
    // gap 41838 bytes
loc_1bd507: // 0160:1bd507
    ax -= 0x0008;
    bx -= 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1b3199() // 0160:1b3199 +long
{
    esp -= 4;
    sub_1b34c8();
    sub_1b3af9();
loc_1b31a3: // 0160:1b31a3
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b31cb;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b31cb: // 0160:1b31cb
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b31dd;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b31dd: // 0160:1b31dd
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b31f4;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b31fe;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b3222;
loc_1b31f4: // 0160:1b31f4
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b3222;
loc_1b31fe: // 0160:1b31fe
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20ed5f, ax);
    ax = memoryAGet16(ds, 0x20e90d);
    memoryASet16(ds, 0x20ed61, ax);
    sub_1b2bb1();
    sub_1b34bd();
    goto loc_1b31a3;
loc_1b3222: // 0160:1b3222
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b3234;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b3234: // 0160:1b3234
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b329a;
    if (!(memoryAGet16(ds, 0x20edf7) & 0xffff))
        goto loc_1b3260;
    memoryASet16(ds, 0x20edf7, 0x0000);
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20edf9, ax);
    esp += 4;
    return;
loc_1b3260: // 0160:1b3260
    if (memoryAGet16(ds, 0x20e82f) != 0x0001)
        goto loc_1b3290;
    memoryASet16(ds, 0x20edf7, 0x0001);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    goto loc_1b329a;
loc_1b3290: // 0160:1b3290
    memoryASet16(ds, 0x20edf9, 0x00ff);
    esp += 4;
    return;
loc_1b329a: // 0160:1b329a
    sub_1b4941();
    if (memoryAGet16(ds, 0x20edf7) & 0xffff)
        goto loc_1b330a;
    if (memoryAGet16(ds, 0x20d7d5) == 0x0000)
        goto loc_1b32c8;
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    goto loc_1b32da;
loc_1b32c8: // 0160:1b32c8
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
loc_1b32da: // 0160:1b32da
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4b3b();
    sub_1b39c3();
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b3308;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    sub_1b35a6();
loc_1b3308: // 0160:1b3308
    goto loc_1b3358;
loc_1b330a: // 0160:1b330a
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4b8c();
    sub_1b3470();
    esi = 0x001ee8da;
    al = 0xc2;
    bl = 0xc6;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b3358;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    sub_1b35db();
loc_1b3358: // 0160:1b3358
    sub_1b336c();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b31a3;
    // gap 14460 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b336c() // 0160:1b336c +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20edf7) & 0xffff))
        goto loc_1b33a7;
    ax = 0x013b;
    bx = 0x010d;
    cx = 0x0016;
    dx = 0x0004;
    sub_1bd7dd();
    memoryASet16(ds, 0x20ceb1, 0x000c);
    sub_1b38a1();
    ax = 0x0138;
    bx = 0x0100;
    goto loc_1b340a;
    // gap 3 bytes
loc_1b33a7: // 0160:1b33a7
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b33e6;
    ax = 0x013b;
    bx = 0x010d;
    cx = 0x0016;
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1b33ca;
    cx--;
loc_1b33ca: // 0160:1b33ca
    dx = 0x0004;
    sub_1bd7dd();
    memoryASet16(ds, 0x20ceb1, 0x000c);
    sub_1b38a1();
    goto loc_1b33f4;
    // gap 3 bytes
loc_1b33e6: // 0160:1b33e6
    memoryASet16(ds, 0x20ceb1, 0x0003);
    sub_1b38ea();
loc_1b33f4: // 0160:1b33f4
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x0002;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b3467;
loc_1b340a: // 0160:1b340a
    memoryASet16(ds, 0x2231d2, 0x0002);
    esi = 0x002245f0;
    memoryASet16(ds, esi, 0x00b8);
    memoryASet16(ds, esi + 2, 0x0068);
    memoryASet16(ds, esi + 4, 0x0060);
    memoryASet16(ds, esi + 6, 0x0018);
    memoryASet16(ds, esi + 8, 0x00b8);
    memoryASet16(ds, esi + 10, 0x00c0);
    memoryASet16(ds, esi + 12, 0x0060);
    memoryASet16(ds, esi + 14, 0x0018);
    esi = 0x0020ec43;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0001;
    if (bp)
        goto loc_1b3460;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
    memoryASet16(ds, esi, memoryAGet16(ds, esi) & 0x0007);
loc_1b3460: // 0160:1b3460
    bx -= memoryAGet16(ds, esi);
    cx = 0x0001;
loc_1b3467: // 0160:1b3467
    dx = 0x0009;
    goto loc_1bd7dd;
    // gap 41837 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b3470() // 0160:1b3470 +long
{
    esp -= 4;
    ebx = 0;
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b3489;
    ebx++;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b3489;
    ebx++;
loc_1b3489: // 0160:1b3489
    eax = ebx;
    ecx = ebx;
    ecx <<= 2;
    ebx <<= 4;
    ebx += eax;
    ebx += ecx;
    esi = 0x001ef11b;
    esi += ebx;
    ecx = 0x00000007;
    al = 0x22;
    dx = 0x03c8;
    out8(dx, al);
    dx++;
loc_1b34ac: // 0160:1b34ac
    al = memoryAGet(ds, esi);
    out8(dx, al);
    al = memoryAGet(ds, esi + 1);
    out8(dx, al);
    al = memoryAGet(ds, esi + 2);
    out8(dx, al);
    esi += 0x00000003;
    if (--ecx)
        goto loc_1b34ac;
    esp += 4;
}
void sub_1b34bd() // 0160:1b34bd +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0001);
    goto loc_1b34d1;
    // gap 9 bytes
loc_1b34d1: // 0160:1b34d1
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5585();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b3552;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20e90d, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20d7f5, ax);
loc_1b3552: // 0160:1b3552
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ec43, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008f);
    memoryASet16(ds, 0x20ec3f, 0x0106);
    memoryASet16(ds, 0x20e97f, 0x015c);
    memoryASet(ds, 0x20e981, 0x0d);
    memoryASet(ds, 0x20ceb7, 0x0f);
    sub_1b385b();
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 6504 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b34c8() // 0160:1b34c8 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5585();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b3552;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20e90d, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20d7f5, ax);
loc_1b3552: // 0160:1b3552
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ec43, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008f);
    memoryASet16(ds, 0x20ec3f, 0x0106);
    memoryASet16(ds, 0x20e97f, 0x015c);
    memoryASet(ds, 0x20e981, 0x0d);
    memoryASet(ds, 0x20ceb7, 0x0f);
    sub_1b385b();
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 6504 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b35a6() // 0160:1b35a6 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee92c;
    sub_1b60d3();
    esi = 0x001ee93b;
    sub_1b60d3();
    if (memoryAGet16(ds, 0x20d7d5) != 0x0000)
        goto loc_1b6be8;
    esi = 0x001ee94a;
    goto loc_1b60d3;
    // gap 11000 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 2822 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b35db() // 0160:1b35db +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee8fb;
    sub_1b60d3();
    esi = 0x001ee90b;
    sub_1b60d3();
    esi = 0x001ee91a;
    goto loc_1b60d3;
    // gap 10961 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b3602() // 0160:1b3602 +long
{
    esp -= 4;
    sub_1b39dc();
    sub_1b3af9();
loc_1b360c: // 0160:1b360c
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b362f;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b362f: // 0160:1b362f
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b3641;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b3641: // 0160:1b3641
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b3658;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b3662;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b3686;
loc_1b3658: // 0160:1b3658
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b3686;
loc_1b3662: // 0160:1b3662
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20ed5f, ax);
    ax = memoryAGet16(ds, 0x20e90d);
    memoryASet16(ds, 0x20ed61, ax);
    sub_1b2bb1();
    sub_1b39d1();
    goto loc_1b360c;
loc_1b3686: // 0160:1b3686
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b3698;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b3698: // 0160:1b3698
    sub_1b531f();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b36a9;
    esp += 4;
    return;
loc_1b36a9: // 0160:1b36a9
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4b02();
    sub_1b36ec();
    sub_1b39c3();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b360c;
    // gap 13564 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b36ec() // 0160:1b36ec +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b37e1;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b3791;
    if (memoryAGet16(ds, 0x20e82f) != 0x0002)
        goto loc_1b3831;
    edi = 0x0020ec45;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1b372f;
    memoryASet16(ds, edi, memoryAGet16(ds, edi) + 1);
    memoryASet16(ds, edi, memoryAGet16(ds, edi) & 0x0003);
loc_1b372f: // 0160:1b372f
    esi = 0x001ef0f5;
    ax = memoryAGet16(ds, edi);
    if (ax != 0x0003)
        goto loc_1b3741;
    ax = 0x0001;
loc_1b3741: // 0160:1b3741
    ax <<= 1;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    bx = 0x0137;
    cx = 0x0005;
    dx = 0x0004;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ax += 0x0048;
    if (!(memoryAGet16(ds, edi) & 0xffff))
        goto loc_1b3787;
    ax -= 0x0017;
    if (memoryAGet16(ds, edi) == 0x0001)
        goto loc_1b3787;
    if (memoryAGet16(ds, edi) == 0x0003)
        goto loc_1b3787;
    ax -= 0x0017;
loc_1b3787: // 0160:1b3787
    sub_1bd7dd();
    goto loc_1b383f;
loc_1b3791: // 0160:1b3791
    esi = 0x0020ec45;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b37b9;
    sub_1b1c22();
    if (al > 0x0a)
        goto loc_1b383f;
    memoryASet16(ds, esi, 0x000f);
    sub_1b1c22();
    al &= 0x0f;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + ax);
loc_1b37b9: // 0160:1b37b9
    ax = 0x0001;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x000a)
        goto loc_1b383f;
    ax = 0x0138;
    bx = 0x0100;
    dx = 0x0009;
    cx = 0x0006;
    goto loc_1bd7dd;
loc_1b37e1: // 0160:1b37e1
    memoryASet16(ds, 0x2231d2, 0x0002);
    esi = 0x002245f0;
    memoryASet16(ds, esi, 0x00d0);
    memoryASet16(ds, esi + 2, 0x0068);
    memoryASet16(ds, esi + 4, 0x0038);
    memoryASet16(ds, esi + 6, 0x0018);
    memoryASet16(ds, esi + 8, 0x00d0);
    memoryASet16(ds, esi + 10, 0x00c0);
    memoryASet16(ds, esi + 12, 0x0038);
    memoryASet16(ds, esi + 14, 0x0018);
    memoryASet16(ds, 0x20ceb1, 0x0010);
    sub_1b38a1();
    goto loc_1b383f;
    // gap 3 bytes
loc_1b3831: // 0160:1b3831
    memoryASet16(ds, 0x20ceb1, 0x0007);
    sub_1b38ea();
loc_1b383f: // 0160:1b383f
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x0001;
    cx += memoryAGet16(ds, 0x20e82f);
    dx = 0x0009;
    goto loc_1bd7dd;
    // gap 40834 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b385b() // 0160:1b385b +long
{
    esp -= 4;
    bp = 0x0010;
    esi = 0x0020ebc5;
    edi = 0x001ef0fb;
loc_1b3869: // 0160:1b3869
    sub_1b1c22();
    al &= 0x07;
    al += memoryAGet(ds, 0x20e981);
    memoryASet16(ds, esi, ax);
    sub_1b1c25();
    al &= memoryAGet(ds, 0x20ceb7);
    ax += memoryAGet16(ds, 0x20e97f);
    memoryASet16(ds, esi + 2, ax);
    ax = memoryAGet16(ds, edi);
    memoryASet16(ds, esi + 4, ax);
    esi += 0x00000006;
    edi += 0x00000002;
    bp--;
    if (bp)
        goto loc_1b3869;
    esp += 4;
}
void sub_1b38a1() // 0160:1b38a1 +long
{
    esp -= 4;
    ecx = 0x00000010;
    esi = 0x0020ebc5;
loc_1b38ab: // 0160:1b38ab
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 0x0003);
    if ((short)memoryAGet16(ds, esi + 4) < (short)0x0280)
        goto loc_1b38be;
    memoryASet16(ds, esi + 4, 0x0000);
loc_1b38be: // 0160:1b38be
    push32(ecx);
    push32(esi);
    cx = memoryAGet16(ds, esi);
    ax = memoryAGet16(ds, esi + 2);
    bx = memoryAGet16(ds, esi + 4);
    if ((short)bx < (short)0x00e4)
        goto loc_1b38e2;
    if (bx > 0x0140)
        goto loc_1b38e2;
    dx = 0x0004;
    sub_1bd7dd();
loc_1b38e2: // 0160:1b38e2
    esi = pop32();
    ecx = pop32();
    esi += 0x00000006;
    if (--ecx)
        goto loc_1b38ab;
    esp += 4;
}
void sub_1b38ea() // 0160:1b38ea +long
{
    esp -= 4;
    esi = 0x0020ec45;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 1);
    cx = 0x0001;
    sub_1b3905();
    esi = 0x0020ec47;
    cx = 0x003f;
    ax = memoryAGet16(ds, 0x20ec49);
    ax &= cx;
    if (ax)
        goto loc_1b3913;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
loc_1b3913: // 0160:1b3913
    cx = memoryAGet16(ds, esi);
    bp = cx;
    cx &= 0x000f;
    if ((short)cx < (short)0x0009)
        goto loc_1b3930;
    bx = cx;
    bx -= 0x0008;
    bx <<= 1;
    cx -= bx;
loc_1b3930: // 0160:1b3930
    cx += memoryAGet16(ds, 0x20ceb1);
    ax = 0x0177;
    bp &= 0x001f;
    if ((short)bp < (short)0x0011)
        goto loc_1b396d;
    ax--;
    if (bp == 0x0011)
        goto loc_1b396d;
    if (bp == 0x001f)
        goto loc_1b396d;
    ax -= 0x0008;
    if ((short)bp < (short)0x0016)
        goto loc_1b396d;
    if (bp == 0x0018)
        goto loc_1b3969;
    if (bp > 0x001a)
        goto loc_1b396d;
loc_1b3969: // 0160:1b3969
    ax -= 0x0008;
loc_1b396d: // 0160:1b396d
    bx = 0x010d;
    if ((short)bp < (short)0x0004)
        goto loc_1b399f;
    if (bp > 0x001c)
        goto loc_1b399f;
    bx += 0x0008;
    if ((short)bp < (short)0x0007)
        goto loc_1b399f;
    if (bp > 0x0019)
        goto loc_1b399f;
    bx += 0x0008;
    if ((short)bp < (short)0x0009)
        goto loc_1b399f;
    if (bp == 0x0019)
        goto loc_1b399f;
    bx++;
loc_1b399f: // 0160:1b399f
    dx = 0;
    if ((short)bp < (short)0x0009)
        goto loc_1b39be;
    dx += 0x0002;
    if ((short)bp < (short)0x0011)
        goto loc_1b39be;
    dx++;
    if ((short)bp < (short)0x0019)
        goto loc_1b39be;
    dx -= 0x0002;
loc_1b39be: // 0160:1b39be
    goto loc_1bd7dd;
    // gap 40474 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b3905() // 0160:1b3905 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20ec49);
    ax &= cx;
    if (ax)
        goto loc_1b3913;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
loc_1b3913: // 0160:1b3913
    cx = memoryAGet16(ds, esi);
    bp = cx;
    cx &= 0x000f;
    if ((short)cx < (short)0x0009)
        goto loc_1b3930;
    bx = cx;
    bx -= 0x0008;
    bx <<= 1;
    cx -= bx;
loc_1b3930: // 0160:1b3930
    cx += memoryAGet16(ds, 0x20ceb1);
    ax = 0x0177;
    bp &= 0x001f;
    if ((short)bp < (short)0x0011)
        goto loc_1b396d;
    ax--;
    if (bp == 0x0011)
        goto loc_1b396d;
    if (bp == 0x001f)
        goto loc_1b396d;
    ax -= 0x0008;
    if ((short)bp < (short)0x0016)
        goto loc_1b396d;
    if (bp == 0x0018)
        goto loc_1b3969;
    if (bp > 0x001a)
        goto loc_1b396d;
loc_1b3969: // 0160:1b3969
    ax -= 0x0008;
loc_1b396d: // 0160:1b396d
    bx = 0x010d;
    if ((short)bp < (short)0x0004)
        goto loc_1b399f;
    if (bp > 0x001c)
        goto loc_1b399f;
    bx += 0x0008;
    if ((short)bp < (short)0x0007)
        goto loc_1b399f;
    if (bp > 0x0019)
        goto loc_1b399f;
    bx += 0x0008;
    if ((short)bp < (short)0x0009)
        goto loc_1b399f;
    if (bp == 0x0019)
        goto loc_1b399f;
    bx++;
loc_1b399f: // 0160:1b399f
    dx = 0;
    if ((short)bp < (short)0x0009)
        goto loc_1b39be;
    dx += 0x0002;
    if ((short)bp < (short)0x0011)
        goto loc_1b39be;
    dx++;
    if ((short)bp < (short)0x0019)
        goto loc_1b39be;
    dx -= 0x0002;
loc_1b39be: // 0160:1b39be
    goto loc_1bd7dd;
    // gap 40474 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b39c3() // 0160:1b39c3 +long
{
    esp -= 4;
    esi = 0x001ee884;
    al = 0xc2;
    bl = 0xc9;
    goto loc_1b60a7;
    // gap 9942 bytes
loc_1b60a7: // 0160:1b60a7
    memoryASet16(ds, 0x20e905, 0x0002);
    goto loc_1b60bb;
    // gap 9 bytes
loc_1b60bb: // 0160:1b60bb
    cl = memoryAGet(ds, esi + 3);
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x001f;
    if ((short)dx >= (short)0x0014)
        goto loc_1b60e3;
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 1 bytes
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b39d1() // 0160:1b39d1 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0001);
    goto loc_1b39e5;
    // gap 9 bytes
loc_1b39e5: // 0160:1b39e5
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5561();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b3a7d;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20e90d, ax);
    memoryASet16(ds, 0x20d7f5, ax);
loc_1b3a7d: // 0160:1b3a7d
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e97f, 0x0154);
    memoryASet(ds, 0x20e981, 0x11);
    memoryASet(ds, 0x20ceb7, 0x1f);
    sub_1b385b();
    memoryASet16(ds, 0x20ec3d, 0x008f);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 5190 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b39dc() // 0160:1b39dc +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5561();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1b3ac8();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b3a7d;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
    ax = memoryAGet16(ds, 0x20ed61);
    memoryASet16(ds, 0x20e90d, ax);
    memoryASet16(ds, 0x20d7f5, ax);
loc_1b3a7d: // 0160:1b3a7d
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e97f, 0x0154);
    memoryASet(ds, 0x20e981, 0x11);
    memoryASet(ds, 0x20ceb7, 0x1f);
    sub_1b385b();
    memoryASet16(ds, 0x20ec3d, 0x008f);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 5190 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b3ac8() // 0160:1b3ac8 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee8af;
    sub_1b60d3();
    esi = 0x001ee89f;
    sub_1b60d3();
    esi = 0x001ee8bc;
    sub_1b60d3();
    esi = 0x001ee8cc;
    goto loc_1b60d3;
    // gap 9690 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b3af9() // 0160:1b3af9 +long
{
    esp -= 4;
    push32(eax);
    memoryASet16(ds, 0x20ee81, 0x0000);
    al = memoryAGet(ds, 0x30b071);
    memoryASet(ds, 0x20ee7f, al);
    eax = pop32();
    esp += 4;
}
void sub_1b3b0f() // 0160:1b3b0f +long +returnZero
{
    esp -= 4;
    if (memoryAGet(ds, 0x30b071) == 0x00)
        goto loc_1b3b2e;
    if (memoryAGet(ds, 0x20ee7f) != 0x00)
        goto loc_1b3b2e;
    ax = 0x0001;
    memoryASet16(ds, 0x20ee81, ax);
    flags.zero = !al;
    esp += 4;
    return;
loc_1b3b2e: // 0160:1b3b2e
    al = memoryAGet(ds, 0x30b071);
    memoryASet(ds, 0x20ee7f, al);
    al = 0;
    flags.zero = !al;
    esp += 4;
}
void sub_1b3b3d() // 0160:1b3b3d +long
{
    esp -= 4;
    sub_1b4c53();
    goto loc_1b3b51;
    // gap 3 bytes
loc_1b3b47: // 0160:1b3b47
    sub_1b4c6f();
    sub_1b3af9();
loc_1b3b51: // 0160:1b3b51
    sub_1b5096();
    sub_1b3b0f();
    if (flags.zero)
        goto loc_1b3b74;
    if (memoryAGet16(ds, 0x22464a) == 0x0000)
        goto loc_1b63c9;
    goto loc_1b6be8;
loc_1b3b74: // 0160:1b3b74
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b3b87;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b3b87: // 0160:1b3b87
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b3b99;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b3b99: // 0160:1b3b99
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b3bb0;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b3bba;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b3bf5;
loc_1b3bb0: // 0160:1b3bb0
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b3bf5;
loc_1b3bba: // 0160:1b3bba
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20ed5f, ax);
    sub_1b2bb1();
    if (memoryAGet16(ds, 0x22464a) == 0x0001)
        goto loc_1b3be1;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3beb;
    sub_1b4c48();
    goto loc_1b3b51;
loc_1b3be1: // 0160:1b3be1
    sub_1b4c53();
    goto loc_1b3b51;
loc_1b3beb: // 0160:1b3beb
    sub_1b4c61();
    goto loc_1b3b51;
loc_1b3bf5: // 0160:1b3bf5
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b3c07;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b3c07: // 0160:1b3c07
    if (memoryAGet16(ds, 0x22464a) == 0x0000)
        goto loc_1b3c18;
    sub_1c6ff7();
    goto loc_1b3c1d;
loc_1b3c18: // 0160:1b3c18
    sub_1b531f();
loc_1b3c1d: // 0160:1b3c1d
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1b3c3a;
    if (memoryAGet16(ds, 0x20ec41) == 0x0032)
        goto loc_1b3c3a;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
loc_1b3c3a: // 0160:1b3c3a
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b3d5d;
    if ((short)memoryAGet16(ds, 0x22464a) < (short)0x0001)
        goto loc_1b3d09;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3d5c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b3cce;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1b3d5c;
    memoryASet16(ds, 0x22464a, 0x0002);
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0001)
        goto loc_1b3c8d;
    memoryASet16(ds, 0x22464a, 0x0003);
loc_1b3c8d: // 0160:1b3c8d
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1b3d5c;
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b3d5d;
loc_1b3cce: // 0160:1b3cce
    memoryASet16(ds, 0x22464a, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
    goto loc_1b3d5d;
    // gap 3 bytes
loc_1b3d09: // 0160:1b3d09
    if (memoryAGet16(ds, 0x20e82f) == 0x0006)
        goto loc_1b4316;
    if (memoryAGet16(ds, 0x20e82f) != 0x0007)
        goto loc_1b3d5c;
    memoryASet16(ds, 0x22464a, 0x0001);
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b3d5d;
    // gap 3 bytes
loc_1b3d5c: // 0160:1b3d5c
    esp += 4;
    return;
loc_1b3d5d: // 0160:1b3d5d
    sub_1b4941();
    if ((short)memoryAGet16(ds, 0x22464a) < (short)0x0001)
        goto loc_1b3df2;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3da1;
    memoryASet16(ds, 0x20e805, 0x0005);
    memoryASet16(ds, 0x20e809, 0x0004);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4a91();
    sub_1b41f7();
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3da1: // 0160:1b3da1
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4ad8();
    if (memoryAGet16(ds, 0x22464a) != 0x0002)
        goto loc_1b3de8;
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + 1);
    sub_1b3eb2();
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) - 1);
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3de8: // 0160:1b3de8
    sub_1b3eb2();
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3df2: // 0160:1b3df2
    memoryASet16(ds, 0x20e805, 0x0008);
    memoryASet16(ds, 0x20e809, 0x0007);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4a47();
    sub_1b3eb2();
loc_1b3e1c: // 0160:1b3e1c
    al = 0xc3;
    bl = 0x0e;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee673;
    al = 0xc2;
    bl = 0x8a;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1b3e6b;
    memoryASet16(ds, 0x20e905, 0x0000);
    al = 0xc2;
    bl = 0x8a;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee65b;
    al = 0xc2;
    bl = 0xca;
    if (memoryAGet16(ds, 0x22464a) == 0x0001)
        goto loc_1b3e6b;
    esi = 0x001ef00d;
    al = 0xc2;
    bl = 0xc8;
loc_1b3e6b: // 0160:1b3e6b
    memoryASet16(ds, 0x20e905, 0x0002);
    sub_1b60a7();
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b3ea3;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    if (memoryAGet16(ds, 0x22464a) != 0x0001)
        goto loc_1b3e9e;
    sub_1b4263();
    goto loc_1b3ea3;
    // gap 3 bytes
loc_1b3e9e: // 0160:1b3e9e
    sub_1b42c5();
loc_1b3ea3: // 0160:1b3ea3
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b3b51;
    // gap 1124 bytes
loc_1b4316: // 0160:1b4316
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b426d();
    sub_1b486a();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b426d();
    sub_1b486a();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    sub_1b3af9();
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b4385;
    memoryASet16(ds, 0x20ec3f, 0x0106);
loc_1b4385: // 0160:1b4385
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b43a8;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b43a8: // 0160:1b43a8
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b43ba;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b43ba: // 0160:1b43ba
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b43d1;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b43db;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b43fc;
loc_1b43d1: // 0160:1b43d1
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b43fc;
loc_1b43db: // 0160:1b43db
    sub_1b2bb1();
    sub_1b4c6f();
    memoryASet16(ds, 0x20e831, 0x0001);
    memoryASet16(ds, 0x20e82f, 0x0006);
    goto loc_1b3b51;
loc_1b43fc: // 0160:1b43fc
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b440e;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b440e: // 0160:1b440e
    sub_1b531f();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1b4430;
    if (memoryAGet16(ds, 0x20ec41) == 0x0032)
        goto loc_1b4430;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
loc_1b4430: // 0160:1b4430
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b465e;
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1b4454;
    memoryASet16(ds, 0x20e82f, 0x0006);
    esp += 4;
    return;
loc_1b4454: // 0160:1b4454
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b447b;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1b45d3;
    goto loc_1b44d8;
loc_1b447b: // 0160:1b447b
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b44be;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b44ec;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b44d8;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b4573;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) != 0x0004)
        goto loc_1b45d3;
loc_1b44be: // 0160:1b44be
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) > 0x0002)
        goto loc_1b45d3;
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0002)
        goto loc_1b44ec;
loc_1b44d8: // 0160:1b44d8
    sub_1b63d3();
    goto loc_1b3b47;
loc_1b44e2: // 0160:1b44e2
    sub_1b7680();
    goto loc_1b3b47;
loc_1b44ec: // 0160:1b44ec
    memoryASet32(ds, 0x30b13c, memoryAGet32(ds, 0x30b13c) + 1);
    memoryASet32(ds, 0x30b13c, memoryAGet32(ds, 0x30b13c) & 0x00000003);
    eax = memoryAGet32(ds, 0x30b13c);
    if (!eax)
        goto loc_1b4507;
    eax = 0x00000001;
loc_1b4507: // 0160:1b4507
    memoryASet32(ds, 0x30b140, eax);
    sub_1b5096();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee7a8;
    eax = memoryAGet32(ds, 0x30b13c);
    if (eax == 0x00000001)
        goto loc_1b4549;
    esi = 0x001ee7b8;
    if (eax == 0x00000002)
        goto loc_1b4549;
    esi = 0x001ee7c8;
    if (eax == 0x00000003)
        goto loc_1b4549;
    esi = 0x001ee7d8;
loc_1b4549: // 0160:1b4549
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b60d3();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b4385;
loc_1b4573: // 0160:1b4573
    memoryASet32(ds, 0x30b130, memoryAGet32(ds, 0x30b130) + 1);
    memoryASet32(ds, 0x30b130, memoryAGet32(ds, 0x30b130) & 0x00000001);
    sub_1b5096();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee819;
    eax = memoryAGet32(ds, 0x30b130);
    if (eax == 0x00000001)
        goto loc_1b45a9;
    esi = 0x001ee827;
loc_1b45a9: // 0160:1b45a9
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b60d3();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b4385;
loc_1b45d3: // 0160:1b45d3
    sub_1b5096();
    memoryASet16(ds, 0x20ed5d, 0x0000);
    memoryASet16(ds, 0x22464a, 0x0000);
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4814();
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b4814();
    sub_1b4dc7();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
    sub_1b4bb8();
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b3b51;
loc_1b465e: // 0160:1b465e
    sub_1b46ff();
    sub_1b4941();
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b469b;
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b47cb();
    goto loc_1b46d7;
    // gap 3 bytes
loc_1b469b: // 0160:1b469b
    memoryASet16(ds, 0x20e805, 0x0005);
    memoryASet16(ds, 0x20e809, 0x0004);
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b46c4;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) + 1);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 1);
loc_1b46c4: // 0160:1b46c4
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4714();
loc_1b46d7: // 0160:1b46d7
    al = 0xc2;
    bl = 0x8a;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee65b;
    al = 0xc2;
    bl = 0xca;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b4385;
    // gap 7370 bytes
loc_1b63c9: // 0160:1b63c9
    memoryASet16(ds, 0x20eead, 0x0001);
    esp += 4;
    return;
    // gap 2069 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b3b47() // 0160:1b3b47 +long
{
    esp -= 4;
loc_1b3b47: // 0160:1b3b47
    sub_1b4c6f();
    sub_1b3af9();
loc_1b3b51: // 0160:1b3b51
    sub_1b5096();
    sub_1b3b0f();
    if (flags.zero)
        goto loc_1b3b74;
    if (memoryAGet16(ds, 0x22464a) == 0x0000)
        goto loc_1b63c9;
    goto loc_1b6be8;
loc_1b3b74: // 0160:1b3b74
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b3b87;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b3b87: // 0160:1b3b87
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b3b99;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b3b99: // 0160:1b3b99
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b3bb0;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b3bba;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b3bf5;
loc_1b3bb0: // 0160:1b3bb0
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b3bf5;
loc_1b3bba: // 0160:1b3bba
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x20ed5f, ax);
    sub_1b2bb1();
    if (memoryAGet16(ds, 0x22464a) == 0x0001)
        goto loc_1b3be1;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3beb;
    sub_1b4c48();
    goto loc_1b3b51;
loc_1b3be1: // 0160:1b3be1
    sub_1b4c53();
    goto loc_1b3b51;
loc_1b3beb: // 0160:1b3beb
    sub_1b4c61();
    goto loc_1b3b51;
loc_1b3bf5: // 0160:1b3bf5
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b3c07;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b3c07: // 0160:1b3c07
    if (memoryAGet16(ds, 0x22464a) == 0x0000)
        goto loc_1b3c18;
    sub_1c6ff7();
    goto loc_1b3c1d;
loc_1b3c18: // 0160:1b3c18
    sub_1b531f();
loc_1b3c1d: // 0160:1b3c1d
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1b3c3a;
    if (memoryAGet16(ds, 0x20ec41) == 0x0032)
        goto loc_1b3c3a;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
loc_1b3c3a: // 0160:1b3c3a
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b3d5d;
    if ((short)memoryAGet16(ds, 0x22464a) < (short)0x0001)
        goto loc_1b3d09;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3d5c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b3cce;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1b3d5c;
    memoryASet16(ds, 0x22464a, 0x0002);
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0001)
        goto loc_1b3c8d;
    memoryASet16(ds, 0x22464a, 0x0003);
loc_1b3c8d: // 0160:1b3c8d
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1b3d5c;
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b3d5d;
loc_1b3cce: // 0160:1b3cce
    memoryASet16(ds, 0x22464a, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
    goto loc_1b3d5d;
    // gap 3 bytes
loc_1b3d09: // 0160:1b3d09
    if (memoryAGet16(ds, 0x20e82f) == 0x0006)
        goto loc_1b4316;
    if (memoryAGet16(ds, 0x20e82f) != 0x0007)
        goto loc_1b3d5c;
    memoryASet16(ds, 0x22464a, 0x0001);
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b3d5d;
    // gap 3 bytes
loc_1b3d5c: // 0160:1b3d5c
    esp += 4;
    return;
loc_1b3d5d: // 0160:1b3d5d
    sub_1b4941();
    if ((short)memoryAGet16(ds, 0x22464a) < (short)0x0001)
        goto loc_1b3df2;
    if (memoryAGet16(ds, 0x22464a) > 0x0001)
        goto loc_1b3da1;
    memoryASet16(ds, 0x20e805, 0x0005);
    memoryASet16(ds, 0x20e809, 0x0004);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4a91();
    sub_1b41f7();
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3da1: // 0160:1b3da1
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4ad8();
    if (memoryAGet16(ds, 0x22464a) != 0x0002)
        goto loc_1b3de8;
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + 1);
    sub_1b3eb2();
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) - 1);
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3de8: // 0160:1b3de8
    sub_1b3eb2();
    goto loc_1b3e1c;
    // gap 3 bytes
loc_1b3df2: // 0160:1b3df2
    memoryASet16(ds, 0x20e805, 0x0008);
    memoryASet16(ds, 0x20e809, 0x0007);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4a47();
    sub_1b3eb2();
loc_1b3e1c: // 0160:1b3e1c
    al = 0xc3;
    bl = 0x0e;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee673;
    al = 0xc2;
    bl = 0x8a;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1b3e6b;
    memoryASet16(ds, 0x20e905, 0x0000);
    al = 0xc2;
    bl = 0x8a;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee65b;
    al = 0xc2;
    bl = 0xca;
    if (memoryAGet16(ds, 0x22464a) == 0x0001)
        goto loc_1b3e6b;
    esi = 0x001ef00d;
    al = 0xc2;
    bl = 0xc8;
loc_1b3e6b: // 0160:1b3e6b
    memoryASet16(ds, 0x20e905, 0x0002);
    sub_1b60a7();
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b3ea3;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    if (memoryAGet16(ds, 0x22464a) != 0x0001)
        goto loc_1b3e9e;
    sub_1b4263();
    goto loc_1b3ea3;
    // gap 3 bytes
loc_1b3e9e: // 0160:1b3e9e
    sub_1b42c5();
loc_1b3ea3: // 0160:1b3ea3
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b3b51;
    // gap 1124 bytes
loc_1b4316: // 0160:1b4316
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b426d();
    sub_1b486a();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b426d();
    sub_1b486a();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    sub_1b3af9();
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b4385;
    memoryASet16(ds, 0x20ec3f, 0x0106);
loc_1b4385: // 0160:1b4385
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x003f;
    if (ax)
        goto loc_1b43a8;
    memoryASet16(ds, 0x20ed5b, memoryAGet16(ds, 0x20ed5b) + 1);
loc_1b43a8: // 0160:1b43a8
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b43ba;
    memoryASet16(ds, 0x20ee49, 0x0000);
loc_1b43ba: // 0160:1b43ba
    if (memoryAGet16(ds, 0x20ee49) & 0xffff)
        goto loc_1b43d1;
    if (memoryAGet16(ds, 0x20ed5b) == 0x0018)
        goto loc_1b43db;
    if (memoryAGet16(ds, 0x20ed5b) != 0x0018)
        goto loc_1b43fc;
loc_1b43d1: // 0160:1b43d1
    if (memoryAGet16(ds, 0x20ed5b) != 0x0003)
        goto loc_1b43fc;
loc_1b43db: // 0160:1b43db
    sub_1b2bb1();
    sub_1b4c6f();
    memoryASet16(ds, 0x20e831, 0x0001);
    memoryASet16(ds, 0x20e82f, 0x0006);
    goto loc_1b3b51;
loc_1b43fc: // 0160:1b43fc
    al = memoryAGet(ds, 0x20c840);
    if (!al)
        goto loc_1b440e;
    memoryASet16(ds, 0x20ed5b, 0x0000);
loc_1b440e: // 0160:1b440e
    sub_1b531f();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1b4430;
    if (memoryAGet16(ds, 0x20ec41) == 0x0032)
        goto loc_1b4430;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
loc_1b4430: // 0160:1b4430
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b465e;
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1b4454;
    memoryASet16(ds, 0x20e82f, 0x0006);
    esp += 4;
    return;
loc_1b4454: // 0160:1b4454
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b447b;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1b45d3;
    goto loc_1b44d8;
loc_1b447b: // 0160:1b447b
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b44be;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b44ec;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b44d8;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b4573;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) != 0x0004)
        goto loc_1b45d3;
loc_1b44be: // 0160:1b44be
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b44e2;
    if (memoryAGet16(ds, 0x20e82f) > 0x0002)
        goto loc_1b45d3;
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0002)
        goto loc_1b44ec;
loc_1b44d8: // 0160:1b44d8
    sub_1b63d3();
    goto loc_1b3b47;
loc_1b44e2: // 0160:1b44e2
    sub_1b7680();
    goto loc_1b3b47;
loc_1b44ec: // 0160:1b44ec
    memoryASet32(ds, 0x30b13c, memoryAGet32(ds, 0x30b13c) + 1);
    memoryASet32(ds, 0x30b13c, memoryAGet32(ds, 0x30b13c) & 0x00000003);
    eax = memoryAGet32(ds, 0x30b13c);
    if (!eax)
        goto loc_1b4507;
    eax = 0x00000001;
loc_1b4507: // 0160:1b4507
    memoryASet32(ds, 0x30b140, eax);
    sub_1b5096();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee7a8;
    eax = memoryAGet32(ds, 0x30b13c);
    if (eax == 0x00000001)
        goto loc_1b4549;
    esi = 0x001ee7b8;
    if (eax == 0x00000002)
        goto loc_1b4549;
    esi = 0x001ee7c8;
    if (eax == 0x00000003)
        goto loc_1b4549;
    esi = 0x001ee7d8;
loc_1b4549: // 0160:1b4549
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b60d3();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b4385;
loc_1b4573: // 0160:1b4573
    memoryASet32(ds, 0x30b130, memoryAGet32(ds, 0x30b130) + 1);
    memoryASet32(ds, 0x30b130, memoryAGet32(ds, 0x30b130) & 0x00000001);
    sub_1b5096();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee819;
    eax = memoryAGet32(ds, 0x30b130);
    if (eax == 0x00000001)
        goto loc_1b45a9;
    esi = 0x001ee827;
loc_1b45a9: // 0160:1b45a9
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b60d3();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b4385;
loc_1b45d3: // 0160:1b45d3
    sub_1b5096();
    memoryASet16(ds, 0x20ed5d, 0x0000);
    memoryASet16(ds, 0x22464a, 0x0000);
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4814();
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b4814();
    sub_1b4dc7();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
    sub_1b4bb8();
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b3b51;
loc_1b465e: // 0160:1b465e
    sub_1b46ff();
    sub_1b4941();
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b469b;
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b47cb();
    goto loc_1b46d7;
    // gap 3 bytes
loc_1b469b: // 0160:1b469b
    memoryASet16(ds, 0x20e805, 0x0005);
    memoryASet16(ds, 0x20e809, 0x0004);
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b46c4;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) + 1);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 1);
loc_1b46c4: // 0160:1b46c4
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b4714();
loc_1b46d7: // 0160:1b46d7
    al = 0xc2;
    bl = 0x8a;
    cl = 0x14;
    sub_1b60e3();
    esi = 0x001ee65b;
    al = 0xc2;
    bl = 0xca;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b4385;
    // gap 7370 bytes
loc_1b63c9: // 0160:1b63c9
    memoryASet16(ds, 0x20eead, 0x0001);
    esp += 4;
    return;
    // gap 2069 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b3eb2() // 0160:1b3eb2 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20e82f) == 0x0007)
        goto loc_1b41f7;
    if (memoryAGet16(ds, 0x20e82f) == 0x0006)
        goto loc_1b41f5;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1b4208;
    if ((short)memoryAGet16(ds, 0x20ec41) < (short)0x0006)
        goto loc_1b4229;
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4007;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4051;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b40c3;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b4196;
    esi = 0x0020ec45;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b3f60;
    sub_1b1c22();
    if (al > 0x05)
        goto loc_1b3fa9;
    sub_1b1c25();
    memoryASet16(ds, esi, 0x0035);
    al &= 0x01;
    if (!al)
        goto loc_1b3f4b;
    memoryASet16(ds, esi, 0x0029);
loc_1b3f4b: // 0160:1b3f4b
    sub_1b1c25();
    memoryASet16(ds, esi + 2, 0x0000);
    al &= 0x01;
    if (!al)
        goto loc_1b3f60;
    memoryASet16(ds, esi + 2, 0x0002);
loc_1b3f60: // 0160:1b3f60
    ax = 0x0004;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x000c)
        goto loc_1b3fa9;
    dx = memoryAGet16(ds, esi + 2);
    ax = memoryAGet16(ds, esi);
    bl = 0x06;
    div8(bl);
    ax &= 0x0001;
    dx += ax;
    cx = dx;
    edi = 0x001ef0d5;
    dx <<= 2;
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, edi + edx);
    bx = memoryAGet16(ds, edi + edx + 2);
    cx += 0x0014;
    dx = 0x0004;
    sub_1bd7dd();
loc_1b3fa9: // 0160:1b3fa9
    esi = 0x0020ec4f;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b3fc7;
    sub_1b1c22();
    if (al > 0x03)
        goto loc_1b4002;
    memoryASet16(ds, esi, 0x001a);
    memoryASet16(ds, esi + 2, ax);
loc_1b3fc7: // 0160:1b3fc7
    ax = 0x0004;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x0014)
        goto loc_1b4002;
    bx = memoryAGet16(ds, esi + 2);
    cx = bx;
    bx <<= 2;
    edi = 0x001ef0e5;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, edi + ebx);
    bx = memoryAGet16(ds, edi + ebx + 2);
    cx += 0x0018;
    dx = 0x0004;
    sub_1bd7dd();
loc_1b4002: // 0160:1b4002
    goto loc_1b4229;
loc_1b4007: // 0160:1b4007
    esi = 0x0020ec45;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b4025;
    sub_1b1c22();
    if (al > 0x0f)
        goto loc_1b4229;
    memoryASet16(ds, esi, 0x0014);
loc_1b4025: // 0160:1b4025
    ax = 0;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x000a)
        goto loc_1b4229;
    ax = 0x0138;
    bx = 0x0120;
    cx = 0x0006;
    dx = 0x0004;
    sub_1bd7dd();
    goto loc_1b4229;
loc_1b4051: // 0160:1b4051
    ax = 0;
    esi = 0x0020ec45;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b407f;
    sub_1b1c25();
    if (al > 0x0a)
        goto loc_1b4229;
    memoryASet16(ds, esi, 0x0014);
    sub_1b1c25();
    al &= 0x01;
    if (!al)
        goto loc_1b407f;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x000a);
loc_1b407f: // 0160:1b407f
    ax = 0x0001;
    sub_1b4925();
    if (memoryAGet16(ds, esi) != 0x0015)
        goto loc_1b4093;
    memoryASet16(ds, esi, 0x0009);
loc_1b4093: // 0160:1b4093
    if ((short)memoryAGet16(ds, esi) < (short)0x000a)
        goto loc_1b4229;
    ax = 0x0140;
    bx = 0x0118;
    cx = 0x0007;
    dx = 0x0004;
    if ((short)memoryAGet16(ds, esi) < (short)0x0015)
        goto loc_1b40b9;
    ax += 0x0008;
    cx++;
loc_1b40b9: // 0160:1b40b9
    sub_1bd7dd();
    goto loc_1b4229;
loc_1b40c3: // 0160:1b40c3
    esi = 0x0020ec45;
    sub_1b1c22();
    if (al > 0x0f)
        goto loc_1b4103;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b4103;
    memoryASet16(ds, esi, 0x001e);
    sub_1b1c22();
    if (al > 0x3c)
        goto loc_1b4103;
    al &= 0x03;
    if (al == 0x03)
        goto loc_1b4103;
    al <<= 1;
    eax &= 0x000000ff;
    if (memoryAGet16(ds, esi + eax + 8) & 0xffff)
        goto loc_1b4103;
    memoryASet16(ds, esi + eax + 8, 0x001e);
loc_1b4103: // 0160:1b4103
    sub_1b1c22();
    if (al > 0x02)
        goto loc_1b4123;
    al <<= 1;
    eax &= 0x000000ff;
    if (memoryAGet16(ds, esi + eax + 2) & 0xffff)
        goto loc_1b4123;
    memoryASet16(ds, esi + eax + 2, 0x0010);
loc_1b4123: // 0160:1b4123
    memoryASet32(ds, 0x20e7fd, 0x00000007);
    memoryASet16(ds, 0x20e887, 0x0000);
    edi = 0x001ef0a9;
loc_1b413b: // 0160:1b413b
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1b417c;
    ax = 0x0002;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x000b)
        goto loc_1b417c;
    ax = memoryAGet16(ds, edi);
    bx = memoryAGet16(ds, edi + 2);
    cx = 0x0009;
    cx += memoryAGet16(ds, 0x20e887);
    dx = 0x0004;
    push32(memoryAGet32(ds, 0x20e7fd));
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    memoryASet32(ds, 0x20e7fd, pop32());
loc_1b417c: // 0160:1b417c
    esi += 0x00000002;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    edi += 0x00000004;
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) - 1);
    if (memoryAGet32(ds, 0x20e7fd))
        goto loc_1b413b;
    goto loc_1b4229;
loc_1b4196: // 0160:1b4196
    edi = 0x001ef0c5;
    esi = 0x0020ec45;
    if (memoryAGet16(ds, esi) & 0xffff)
        goto loc_1b41b9;
    sub_1b1c22();
    if (al > 0x03)
        goto loc_1b41f0;
    memoryASet16(ds, esi, 0x0012);
    memoryASet16(ds, esi + 2, ax);
loc_1b41b9: // 0160:1b41b9
    ax = 0x0003;
    sub_1b4925();
    if ((short)memoryAGet16(ds, esi) < (short)0x000c)
        goto loc_1b41f0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 2;
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, edi + edx);
    bx = memoryAGet16(ds, edi + edx + 2);
    cx = 0x0010;
    cx += memoryAGet16(ds, esi + 2);
    dx = 0x0004;
    sub_1bd7dd();
loc_1b41f0: // 0160:1b41f0
    goto loc_1b4229;
    // gap 3 bytes
loc_1b41f5: // 0160:1b41f5
    goto loc_1b4229;
loc_1b41f7: // 0160:1b41f7
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x001f;
    goto loc_1b425a;
    // gap 3 bytes
loc_1b4208: // 0160:1b4208
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x001d;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x001f;
    bp >>= 4;
    if (!bp)
        goto loc_1b425a;
    cx++;
    goto loc_1b425a;
loc_1b4229: // 0160:1b4229
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x0001;
    cx += memoryAGet16(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e82f) != 0x0005)
        goto loc_1b424c;
    cx = 0x001d;
    goto loc_1b425a;
loc_1b424c: // 0160:1b424c
    if (memoryAGet16(ds, 0x20e82f) != 0x0006)
        goto loc_1b425a;
    cx = 0x001c;
loc_1b425a: // 0160:1b425a
    dx = 0x0009;
    goto loc_1bd7dd;
    // gap 38266 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b41f7() // 0160:1b41f7 +long
{
    esp -= 4;
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x001f;
    goto loc_1b425a;
    // gap 85 bytes
loc_1b425a: // 0160:1b425a
    dx = 0x0009;
    goto loc_1bd7dd;
    // gap 38266 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4263() // 0160:1b4263 +long
{
    esp -= 4;
    sub_1b426d();
    goto loc_1b4e20;
    // gap 2995 bytes
loc_1b4e20: // 0160:1b4e20
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee700;
    sub_1b60d3();
    esi = 0x001ee70f;
    sub_1b60d3();
    esi = 0x001ee71d;
    sub_1b60d3();
    esi = 0x001ee725;
    sub_1b60d3();
    esi = 0x001ee72c;
    goto loc_1b60d3;
    // gap 4728 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b426d() // 0160:1b426d +long
{
    esp -= 4;
    al = 0xc3;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x84;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x84;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x84;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x84;
    cl = 0x10;
    goto loc_1b60e3;
    // gap 7710 bytes
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b42c5() // 0160:1b42c5 +long
{
    esp -= 4;
    al = 0xc4;
    bl = 0x08;
    cl = 0x0c;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x88;
    cl = 0x0a;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x08;
    cl = 0x04;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x88;
    cl = 0x04;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x08;
    cl = 0x04;
    sub_1b60e3();
    if (memoryAGet16(ds, 0x22464a) >= 0x0002)
        goto loc_1b430b;
    goto loc_1b4dc7;
loc_1b430b: // 0160:1b430b
    if (memoryAGet16(ds, 0x22464a) == 0x0002)
        goto loc_1b4e5b;
    goto loc_1b4e8c;
    // gap 2737 bytes
loc_1b4dc7: // 0160:1b4dc7
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee68b;
    sub_1b60d3();
    esi = 0x001ee697;
    sub_1b60d3();
    esi = 0x001ee6a3;
    sub_1b60d3();
    esi = 0x001ee6af;
    sub_1b60d3();
    esi = 0x001ee6bb;
    sub_1b60d3();
    esi = 0x001ee6cd;
    sub_1b60d3();
    esi = 0x001ee6db;
    sub_1b60d3();
    esi = 0x001ee6ec;
    goto loc_1b60d3;
    // gap 59 bytes
loc_1b4e5b: // 0160:1b4e5b
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee734;
    sub_1b60d3();
    esi = 0x001ee740;
    sub_1b60d3();
    esi = 0x001ee74c;
    sub_1b60d3();
    esi = 0x001ee758;
    goto loc_1b60d3;
loc_1b4e8c: // 0160:1b4e8c
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet16(ds, 0x20ee81, 0x0000);
    esi = 0x001ee76a;
    sub_1b60d3();
    esi = 0x001ee776;
    sub_1b60d3();
    esi = 0x001ee782;
    sub_1b60d3();
    esi = 0x001ee78e;
    goto loc_1b60d3;
    // gap 4621 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b46ff() // 0160:1b46ff +long
{
    esp -= 4;
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x001c;
    dx = 0x0009;
    goto loc_1bd7dd;
    // gap 37065 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4714() // 0160:1b4714 +long
{
    esp -= 4;
    ax += 0x0063;
    if (!bp)
        goto loc_1b4721;
    ax += 0x0002;
loc_1b4721: // 0160:1b4721
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4b56;
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b478c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1b47c2;
    ax += 0x0048;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b47c2;
    ax -= 0x0048;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b47b0;
    ax -= 0x0010;
    if (memoryAGet32(ds, 0x30b130) == 0x00000001)
        goto loc_1b47bd;
    ax += 0x0008;
    goto loc_1b47bd;
loc_1b478c: // 0160:1b478c
    ax += 0x0048;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b47c2;
    ax -= 0x0048;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b47c2;
loc_1b47b0: // 0160:1b47b0
    if (memoryAGet32(ds, 0x30b13c) == 0x00000001)
        goto loc_1b47bd;
    ax += 0x0008;
loc_1b47bd: // 0160:1b47bd
    goto loc_1b4b56;
loc_1b47c2: // 0160:1b47c2
    ax -= 0x0038;
    goto loc_1b4b56;
    // gap 907 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b47cb() // 0160:1b47cb +long
{
    esp -= 4;
    ax += 0x0063;
    if (!bp)
        goto loc_1b47d8;
    ax += 0x0002;
loc_1b47d8: // 0160:1b47d8
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax += 0x0010;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4b56;
    ax -= 0x0048;
    goto loc_1b4b56;
    // gap 834 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4814() // 0160:1b4814 +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b483e;
    al = 0xc4;
    bl = 0x44;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0xc4;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x44;
    cl = 0x10;
    goto loc_1b60e3;
loc_1b483e: // 0160:1b483e
    al = 0xc4;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x84;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x04;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x84;
    cl = 0x10;
    goto loc_1b60e3;
    // gap 6265 bytes
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b486a() // 0160:1b486a +long
{
    esp -= 4;
    if (memoryAGet32(ds, 0x30b138) != 0x00000000)
        goto loc_1b489b;
    esi = 0x001ee84e;
    sub_1b60d3();
    esi = 0x001ee85c;
    sub_1b60d3();
    esi = 0x001ee86b;
    sub_1b60d3();
    esi = 0x001ee87c;
    goto loc_1b60d3;
loc_1b489b: // 0160:1b489b
    esi = 0x001ee79a;
    sub_1b60d3();
    esi = 0x001ee7a8;
    eax = memoryAGet32(ds, 0x30b13c);
    if (eax == 0x00000001)
        goto loc_1b48cd;
    esi = 0x001ee7b8;
    if (eax == 0x00000002)
        goto loc_1b48cd;
    esi = 0x001ee7c8;
    if (eax == 0x00000003)
        goto loc_1b48cd;
    esi = 0x001ee7d8;
loc_1b48cd: // 0160:1b48cd
    sub_1b60d3();
    esi = 0x001ee7e8;
    sub_1b60d3();
    if (memoryAGet32(ds, 0x30b158) == 0x00000000)
        goto loc_1b4911;
    esi = 0x001ee819;
    if (memoryAGet32(ds, 0x30b130) == 0x00000001)
        goto loc_1b48f8;
    esi = 0x001ee827;
loc_1b48f8: // 0160:1b48f8
    sub_1b60d3();
    esi = 0x001ee835;
    sub_1b60d3();
    esi = 0x001ee846;
    goto loc_1b60d3;
loc_1b4911: // 0160:1b4911
    esi = 0x001ee7f7;
    sub_1b60d3();
    esi = 0x001ee808;
    goto loc_1b60d3;
    // gap 6062 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b4925() // 0160:1b4925 +long
{
    esp -= 4;
    bx = memoryAGet16(ds, 0x20e82f);
    if (ax != bx)
        goto loc_1b4940;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0001;
    if (ax)
        goto loc_1b4940;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 1);
loc_1b4940: // 0160:1b4940
    esp += 4;
    return;
}
void sub_1b4941() // 0160:1b4941 +long
{
    esp -= 4;
    cx = 0;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b496b;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b496b;
    al = 0x88;
    sub_1b17b7();
    memoryASet16(ds, 0x20e831, 0x0001);
    esp += 4;
    return;
loc_1b496b: // 0160:1b496b
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1b498c;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b498c;
    al = 0x87;
    sub_1b17b7();
    cx = 0xffff;
loc_1b498c: // 0160:1b498c
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1b49ad;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b49ad;
    al = 0x87;
    sub_1b17b7();
    cx = 0x0001;
loc_1b49ad: // 0160:1b49ad
    esp += 4;
    return;
}
void sub_1b49ae() // 0160:1b49ae +long
{
    esp -= 4;
    push32(eax);
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20ee75, ax);
    eax = pop32();
    if (!cx)
        goto loc_1b49c8;
    push32(ecx);
    sub_1b4bb8();
    ecx = pop32();
loc_1b49c8: // 0160:1b49c8
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + cx);
    if ((short)memoryAGet16(ds, 0x20e82f) < 0)
        goto loc_1b49eb;
    ax = memoryAGet16(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e805) != ax)
        goto loc_1b49f7;
    memoryASet16(ds, 0x20e82f, 0x0000);
    goto loc_1b49f7;
loc_1b49eb: // 0160:1b49eb
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b49f7: // 0160:1b49f7
    bp = 0x0000;
    ax = memoryAGet16(ds, 0x20ec3d);
    si = memoryAGet16(ds, 0x20eeb0);
    si &= 0x0007;
    si >>= 2;
    if (!si)
        goto loc_1b4a18;
    ax--;
    bp = 0x0001;
loc_1b4a18: // 0160:1b4a18
    bx = memoryAGet16(ds, 0x20ec3f);
    si = memoryAGet16(ds, 0x20e82f);
    si <<= 4;
    bx += si;
    cx = memoryAGet16(ds, 0x20ceb1);
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1b49c8() // 0160:1b49c8 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + cx);
    if ((short)memoryAGet16(ds, 0x20e82f) < 0)
        goto loc_1b49eb;
    ax = memoryAGet16(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e805) != ax)
        goto loc_1b49f7;
    memoryASet16(ds, 0x20e82f, 0x0000);
    goto loc_1b49f7;
loc_1b49eb: // 0160:1b49eb
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b49f7: // 0160:1b49f7
    bp = 0x0000;
    ax = memoryAGet16(ds, 0x20ec3d);
    si = memoryAGet16(ds, 0x20eeb0);
    si &= 0x0007;
    si >>= 2;
    if (!si)
        goto loc_1b4a18;
    ax--;
    bp = 0x0001;
loc_1b4a18: // 0160:1b4a18
    bx = memoryAGet16(ds, 0x20ec3f);
    si = memoryAGet16(ds, 0x20e82f);
    si <<= 4;
    bx += si;
    cx = memoryAGet16(ds, 0x20ceb1);
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1b4a47() // 0160:1b4a47 +long
{
    esp -= 4;
    ax += 0x0054;
    if (!bp)
        goto loc_1b4a54;
    ax += 0x0002;
loc_1b4a54: // 0160:1b4a54
    if ((short)memoryAGet16(ds, 0x20e82f) <= (short)0x0003)
        goto loc_1b4a8c;
    ax += 0x0030;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b4a8c;
    ax -= 0x0020;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1b4a8c;
    ax += 0x0018;
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0007)
        goto loc_1b4a8c;
    ax += 0x0018;
loc_1b4a8c: // 0160:1b4a8c
    goto loc_1b4b56;
    // gap 197 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4a91() // 0160:1b4a91 +long
{
    esp -= 4;
    ax += 0x006b;
    if (!bp)
        goto loc_1b4a9e;
    ax += 0x0002;
loc_1b4a9e: // 0160:1b4a9e
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4ad3;
    ax -= 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4ad3;
    ax -= 0x0030;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4ad3;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b4ad3;
    ax -= 0x0008;
loc_1b4ad3: // 0160:1b4ad3
    goto loc_1b4b56;
    // gap 126 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4ad8() // 0160:1b4ad8 +long
{
    esp -= 4;
    ax += 0x0054;
    if (!bp)
        goto loc_1b4ae5;
    ax += 0x0002;
loc_1b4ae5: // 0160:1b4ae5
    if (memoryAGet16(ds, 0x20e82f) != 0x0003)
        goto loc_1b4afd;
    if (memoryAGet16(ds, 0x22464a) == 0x0003)
        goto loc_1b4afd;
    ax += 0x0030;
loc_1b4afd: // 0160:1b4afd
    goto loc_1b4b56;
    // gap 87 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4b02() // 0160:1b4b02 +long
{
    esp -= 4;
    ax += 0x005a;
    if (!bp)
        goto loc_1b4b0f;
    ax += 0x0002;
loc_1b4b0f: // 0160:1b4b0f
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b36;
    ax += 0x0018;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b36;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4b36;
    ax -= 0x0010;
loc_1b4b36: // 0160:1b4b36
    goto loc_1b4b56;
    // gap 30 bytes
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4b3b() // 0160:1b4b3b +long
{
    esp -= 4;
    ax += 0x006a;
    if (!bp)
        goto loc_1b4b48;
    ax += 0x0002;
loc_1b4b48: // 0160:1b4b48
    if ((short)memoryAGet16(ds, 0x20e82f) <= (short)0x0001)
        goto loc_1b4b56;
    ax -= 0x0008;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4b5a()
{
  sub_1bd7dd();
}

void sub_1b4b5f() // 0160:1b4b5f +long
{
    esp -= 4;
    goto loc_1b4b5f;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
loc_1b4b5f: // 0160:1b4b5f
    ax += 0x0020;
    if (!bp)
        goto loc_1b4b6c;
    ax += 0x0002;
loc_1b4b6c: // 0160:1b4b6c
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax += 0x0008;
    goto loc_1b4b56;
    // gap 35936 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4b7d() // 0160:1b4b7d +long
{
    esp -= 4;
    goto loc_1b4b7d;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 30 bytes
loc_1b4b7d: // 0160:1b4b7d
    ax += 0x0060;
    if (!bp)
        goto loc_1b4b8a;
    ax += 0x0002;
loc_1b4b8a: // 0160:1b4b8a
    goto loc_1b4b56;
    // gap 35921 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4b8c() // 0160:1b4b8c +long
{
    esp -= 4;
    goto loc_1b4b8c;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 45 bytes
loc_1b4b8c: // 0160:1b4b8c
    ax += 0x0072;
    if (!bp)
        goto loc_1b4b99;
    ax += 0x0002;
loc_1b4b99: // 0160:1b4b99
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax -= 0x0020;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax += 0x0030;
    goto loc_1b4b56;
    // gap 35877 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b4bb8() // 0160:1b4bb8 +long
{
    esp -= 4;
    edi = 0x0020ec45;
    ecx = 0x00000020;
    ax = 0;
    for (; ecx != 0; --ecx) stosw<ES_EDI>(ax);
    esp += 4;
}
void sub_1b4bc9() // 0160:1b4bc9 +long
{
    esp -= 4;
    sub_1b4eda();
    memoryASet16(ds, 0x224646, 0x0000);
    memoryASet(ds, 0x1f1cba, 0x00);
    memoryASet(ds, 0x1f1cbe, 0x00);
    if (memoryAGet16(ds, 0x224644) & 0xffff)
        goto loc_1b4c1e;
    memoryASet32(ds, 0x1f1c48, 0x00000140);
    memoryASet32(ds, 0x1f1c4c, 0x000000e0);
    sub_1a8b3c();
    dx = 0x03d4;
    al = 0x13;
    out8(dx, al);
    dx++;
    al = 0x28;
    out8(dx, al);
    memoryASet16(ds, 0x224644, 0x0001);
loc_1b4c1e: // 0160:1b4c1e
    sub_1b51f4();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x22463a, 0x0000);
    memoryASet16(ds, 0x22463c, 0x0000);
    esp += 4;
}
void sub_1b4c48() // 0160:1b4c48 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0001);
    goto loc_1b4c81;
    // gap 46 bytes
loc_1b4c81: // 0160:1b4c81
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4d22;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4cee;
    sub_1b4e20();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e20();
    goto loc_1b4d35;
    // gap 3 bytes
loc_1b4cee: // 0160:1b4cee
    if (memoryAGet16(ds, 0x22464a) == 0x0002)
        goto loc_1b4d0d;
    sub_1b4e8c();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e8c();
    goto loc_1b4d35;
loc_1b4d0d: // 0160:1b4d0d
    sub_1b4e5b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e5b();
    goto loc_1b4d35;
loc_1b4d22: // 0160:1b4d22
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4dc7();
loc_1b4d35: // 0160:1b4d35
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b4d5e;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b4d5e: // 0160:1b4d5e
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4da2;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4d8b;
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4d8b: // 0160:1b4d8b
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4da2: // 0160:1b4da2
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
loc_1b4db4: // 0160:1b4db4
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 327 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b4c53() // 0160:1b4c53 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0002);
    goto loc_1b4c81;
    // gap 35 bytes
loc_1b4c81: // 0160:1b4c81
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4d22;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4cee;
    sub_1b4e20();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e20();
    goto loc_1b4d35;
    // gap 3 bytes
loc_1b4cee: // 0160:1b4cee
    if (memoryAGet16(ds, 0x22464a) == 0x0002)
        goto loc_1b4d0d;
    sub_1b4e8c();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e8c();
    goto loc_1b4d35;
loc_1b4d0d: // 0160:1b4d0d
    sub_1b4e5b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e5b();
    goto loc_1b4d35;
loc_1b4d22: // 0160:1b4d22
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4dc7();
loc_1b4d35: // 0160:1b4d35
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b4d5e;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b4d5e: // 0160:1b4d5e
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4da2;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4d8b;
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4d8b: // 0160:1b4d8b
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4da2: // 0160:1b4da2
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
loc_1b4db4: // 0160:1b4db4
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 327 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b4c61() // 0160:1b4c61 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0003);
    goto loc_1b4c81;
    // gap 21 bytes
loc_1b4c81: // 0160:1b4c81
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4d22;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4cee;
    sub_1b4e20();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e20();
    goto loc_1b4d35;
    // gap 3 bytes
loc_1b4cee: // 0160:1b4cee
    if (memoryAGet16(ds, 0x22464a) == 0x0002)
        goto loc_1b4d0d;
    sub_1b4e8c();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e8c();
    goto loc_1b4d35;
loc_1b4d0d: // 0160:1b4d0d
    sub_1b4e5b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e5b();
    goto loc_1b4d35;
loc_1b4d22: // 0160:1b4d22
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4dc7();
loc_1b4d35: // 0160:1b4d35
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b4d5e;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b4d5e: // 0160:1b4d5e
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4da2;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4d8b;
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4d8b: // 0160:1b4d8b
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4da2: // 0160:1b4da2
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
loc_1b4db4: // 0160:1b4db4
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 327 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b4c6f() // 0160:1b4c6f +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ed5d, 0x0000);
    memoryASet16(ds, 0x22464a, 0x0000);
    memoryASet16(ds, 0x20ed4d, 0x0000);
    memoryASet16(ds, 0x20ed5b, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4d22;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4cee;
    sub_1b4e20();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e20();
    goto loc_1b4d35;
    // gap 3 bytes
loc_1b4cee: // 0160:1b4cee
    if (memoryAGet16(ds, 0x22464a) == 0x0002)
        goto loc_1b4d0d;
    sub_1b4e8c();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e8c();
    goto loc_1b4d35;
loc_1b4d0d: // 0160:1b4d0d
    sub_1b4e5b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4e5b();
    goto loc_1b4d35;
loc_1b4d22: // 0160:1b4d22
    sub_1b4dc7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b4dc7();
loc_1b4d35: // 0160:1b4d35
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed5d) & 0xffff))
        goto loc_1b4d5e;
    ax = memoryAGet16(ds, 0x20ed5f);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b4d5e: // 0160:1b4d5e
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if ((short)memoryAGet16(ds, 0x20ed5d) < (short)0x0002)
        goto loc_1b4da2;
    if (memoryAGet16(ds, 0x20ed5d) > 0x0002)
        goto loc_1b4d8b;
    memoryASet16(ds, 0x20ec3d, 0x00ae);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4d8b: // 0160:1b4d8b
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    goto loc_1b4db4;
    // gap 3 bytes
loc_1b4da2: // 0160:1b4da2
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
loc_1b4db4: // 0160:1b4db4
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4bb8();
    goto loc_1b4f0e;
    // gap 327 bytes
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b4dc7() // 0160:1b4dc7 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee68b;
    sub_1b60d3();
    esi = 0x001ee697;
    sub_1b60d3();
    esi = 0x001ee6a3;
    sub_1b60d3();
    esi = 0x001ee6af;
    sub_1b60d3();
    esi = 0x001ee6bb;
    sub_1b60d3();
    esi = 0x001ee6cd;
    sub_1b60d3();
    esi = 0x001ee6db;
    sub_1b60d3();
    esi = 0x001ee6ec;
    goto loc_1b60d3;
    // gap 4787 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b4e20() // 0160:1b4e20 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee700;
    sub_1b60d3();
    esi = 0x001ee70f;
    sub_1b60d3();
    esi = 0x001ee71d;
    sub_1b60d3();
    esi = 0x001ee725;
    sub_1b60d3();
    esi = 0x001ee72c;
    goto loc_1b60d3;
    // gap 4728 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b4e5b() // 0160:1b4e5b +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee734;
    sub_1b60d3();
    esi = 0x001ee740;
    sub_1b60d3();
    esi = 0x001ee74c;
    sub_1b60d3();
    esi = 0x001ee758;
    goto loc_1b60d3;
    // gap 4679 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b4e8c() // 0160:1b4e8c +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet16(ds, 0x20ee81, 0x0000);
    esi = 0x001ee76a;
    sub_1b60d3();
    esi = 0x001ee776;
    sub_1b60d3();
    esi = 0x001ee782;
    sub_1b60d3();
    esi = 0x001ee78e;
    goto loc_1b60d3;
    // gap 4621 bytes
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b4ec6() // 0160:1b4ec6 +long
{
    esp -= 4;
    ecx = 0x00000100;
    eax = 0;
    dx = 0x03c8;
    out8(dx, al);
    dx++;
loc_1b4ed4: // 0160:1b4ed4
    out8(dx, al);
    out8(dx, al);
    out8(dx, al);
    if (--ecx)
        goto loc_1b4ed4;
    esp += 4;
}
void sub_1b4eda() // 0160:1b4eda +long
{
    esp -= 4;
    sub_1b5126();
    ecx = 0x00000010;
loc_1b4ee4: // 0160:1b4ee4
    push32(ecx);
    sub_1a840e();
    ecx = 0x00000300;
    esi = 0x0020c88f;
loc_1b4ef4: // 0160:1b4ef4
    al = memoryAGet(ds, esi);
    flags.carry = al < 0x04;
    al -= 0x04;
    if (!flags.carry)
        goto loc_1b4efc;
    al = 0;
loc_1b4efc: // 0160:1b4efc
    memoryASet(ds, esi, al);
    esi++;
    if (--ecx)
        goto loc_1b4ef4;
    memoryASet16(ds, 0x224666, 0x0000);
    ecx = pop32();
    if (--ecx)
        goto loc_1b4ee4;
    esp += 4;
}
void sub_1b4edf() // 0160:1b4edf +long
{
    esp -= 4;
    ecx = 0x00000010;
loc_1b4ee4: // 0160:1b4ee4
    push32(ecx);
    sub_1a840e();
    ecx = 0x00000300;
    esi = 0x0020c88f;
loc_1b4ef4: // 0160:1b4ef4
    al = memoryAGet(ds, esi);
    flags.carry = al < 0x04;
    al -= 0x04;
    if (!flags.carry)
        goto loc_1b4efc;
    al = 0;
loc_1b4efc: // 0160:1b4efc
    memoryASet(ds, esi, al);
    esi++;
    if (--ecx)
        goto loc_1b4ef4;
    memoryASet16(ds, 0x224666, 0x0000);
    ecx = pop32();
    if (--ecx)
        goto loc_1b4ee4;
    esp += 4;
}
void sub_1b4f0e() // 0160:1b4f0e +long
{
    esp -= 4;
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
}
void sub_1b4f37() // 0160:1b4f37 +long
{
    bool temp_cond0;

    esp -= 4;
    ecx = 0x00000100;
    eax = memoryAGet16(ds, 0x224666);
    memoryASet16(ds, 0x224666, cx);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    ecx -= eax;
    if (stop("xxx multi precond"))
        goto loc_1b4f8e;
    if (memoryAGet16(ds, 0x20eeab) != 0x0001)
        goto loc_1b4f6a;
    ecx = 0x00000010;
    memoryASet16(ds, 0x20eeab, 0x0000);
loc_1b4f6a: // 0160:1b4f6a
    esi = eax + eax * 2 + 0x20c88f;
    bl = al;
loc_1b4f73: // 0160:1b4f73
    dx = 0x03c8;
    al = bl;
    out8(dx, al);
    dx++;
    bl++;
    al = memoryAGet(ds, esi);
    out8(dx, al);
    al = memoryAGet(ds, esi + 1);
    out8(dx, al);
    al = memoryAGet(ds, esi + 2);
    out8(dx, al);
    esi += 0x00000003;
    if (--ecx)
        goto loc_1b4f73;
loc_1b4f8e: // 0160:1b4f8e
    esp += 4;
    return;
}
void sub_1b4f8f() // 0160:1b4f8f +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20ce91) >= 0x0010)
        goto loc_1b4ff6;
    memoryASet16(ds, 0x20ce91, memoryAGet16(ds, 0x20ce91) + 1);
    memoryASet32(ds, 0x1f1cc4, 0x00000000);
    ecx = 0x00000100;
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
loc_1b4fb9: // 0160:1b4fb9
    al = memoryAGet(ds, esi);
    al += 0x04;
    if ((char)al < (char)memoryAGet(ds, edi))
        goto loc_1b4fc3;
    al = memoryAGet(ds, edi);
loc_1b4fc3: // 0160:1b4fc3
    memoryASet(ds, esi, al);
    al = memoryAGet(ds, esi + 1);
    al += 0x04;
    if ((char)al < (char)memoryAGet(ds, edi + 1))
        goto loc_1b4fd2;
    al = memoryAGet(ds, edi + 1);
loc_1b4fd2: // 0160:1b4fd2
    memoryASet(ds, esi + 1, al);
    al = memoryAGet(ds, esi + 2);
    al += 0x04;
    if ((char)al < (char)memoryAGet(ds, edi + 2))
        goto loc_1b4fe2;
    al = memoryAGet(ds, edi + 2);
loc_1b4fe2: // 0160:1b4fe2
    memoryASet(ds, esi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b4fb9;
    memoryASet16(ds, 0x224666, 0x0000);
loc_1b4ff6: // 0160:1b4ff6
    esp += 4;
    return;
}
void sub_1b4ff7() // 0160:1b4ff7 +long
{
    esp -= 4;
    sub_1bd825();
    ax = memoryAGet16(ds, 0x2231d2);
    eax &= 0x0000ffff;
    ecx = eax;
    esi = 0x002245e8;
    eax <<= 3;
    esi += eax;
loc_1b5013: // 0160:1b5013
    push32(ecx);
    ax = memoryAGet16(ds, esi + 2);
    bx = ax;
    ax <<= 6;
    bx <<= 4;
    ax += bx;
    bx = memoryAGet16(ds, esi);
    bx >>= 2;
    ax += bx;
    cx = memoryAGet16(ds, esi + 4);
    cx >>= 2;
    dx = memoryAGet16(ds, esi + 6);
    push32(esi);
    esi = 0x000a9000;
    esi += eax;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1b5059;
    edi = 0x000a0000;
loc_1b5059: // 0160:1b5059
    edi += eax;
    push(ds);
    es = pop();
    ebx = 0x00000050;
    bx -= cx;
    ecx &= 0x0000ffff;
loc_1b506b: // 0160:1b506b
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1b506b;
    esi = pop32();
    esi -= 0x00000008;
    ecx = pop32();
    if (--ecx)
        goto loc_1b5085;
    goto loc_1b5087;
    // gap 3 bytes
loc_1b5085: // 0160:1b5085
    goto loc_1b5013;
loc_1b5087: // 0160:1b5087
    sub_1bd849();
    memoryASet16(ds, 0x2231d2, 0x0000);
    esp += 4;
}
void sub_1b5096() // 0160:1b5096 +long
{
    esp -= 4;
    sub_1b5126();
    if (!(memoryAGet16(ds, 0x2231d2) & 0xffff))
        goto loc_1b50ab;
    sub_1b4ff7();
loc_1b50ab: // 0160:1b50ab
    memoryASet16(ds, 0x20eeb0, memoryAGet16(ds, 0x20eeb0) + 1);
    bx = 0x4800;
    cx = 0x4800;
    if (memoryAGet(ds, 0x1f1cbf) == 0x00)
        goto loc_1b50da;
    cx = 0;
    if (memoryAGet16(ds, 0x2231c4) & 0xffff)
        goto loc_1b50ef;
    bx = 0;
    cx = 0x4800;
    goto loc_1b50ef;
loc_1b50da: // 0160:1b50da
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1b50ef;
    bx = 0;
    cx = 0;
loc_1b50ef: // 0160:1b50ef
    memoryASet16(ds, 0x2231c4, cx);
    memoryASet16(ds, 0x1f1cb8, bx);
    sub_1a840e();
    sub_1b5329();
    if (memoryAGet16(ds, 0x2231c4) == 0x0000)
        goto loc_1b511c;
    sub_1b5f59();
    goto loc_1b5121;
loc_1b511c: // 0160:1b511c
    sub_1b5f91();
loc_1b5121: // 0160:1b5121
    goto loc_1bdf30;
    // gap 36362 bytes
loc_1bdf30: // 0160:1bdf30
    memoryASet(ds, 0x20c840, 0x00);
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1bdf4b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1bdf4b: // 0160:1bdf4b
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1bdf5f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x20);
loc_1bdf5f: // 0160:1bdf5f
    al = memoryAGet(ds, 0x30b0ec);
    if (al)
        goto loc_1bdf79;
    al = memoryAGet(ds, 0x30b08c);
    if (!al)
        goto loc_1bdf80;
loc_1bdf79: // 0160:1bdf79
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1bdf80: // 0160:1bdf80
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1bdf94;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1bdf94: // 0160:1bdf94
    if (memoryAGet(ds, 0x30b118) == 0x00)
        goto loc_1bdfa4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x01);
loc_1bdfa4: // 0160:1bdfa4
    if (memoryAGet(ds, 0x30b120) == 0x00)
        goto loc_1bdfb4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x02);
loc_1bdfb4: // 0160:1bdfb4
    if (memoryAGet(ds, 0x30b11d) == 0x00)
        goto loc_1bdfc4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1bdfc4: // 0160:1bdfc4
    if (memoryAGet(ds, 0x30b11b) == 0x00)
        goto loc_1bdfd4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1bdfd4: // 0160:1bdfd4
    esp += 4;
    return;
}
void sub_1b5126() // 0160:1b5126 +long
{
    esp -= 4;
    esi = 0x002231e8;
    cx = memoryAGet16(ds, 0x2231d0);
    ecx &= 0x0000ffff;
    if (!ecx)
        goto loc_1b51f3;
    ecx <<= 3;
    esi += ecx;
    ecx >>= 3;
loc_1b5146: // 0160:1b5146
    push32(ecx);
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = memoryAGet16(ds, esi + 4);
    dx = memoryAGet16(ds, esi + 6);
    if (!dx)
        goto loc_1b51a8;
    if (dx == 0x0001)
        goto loc_1b519d;
    if (dx == 0x0002)
        goto loc_1b5195;
    if (dx == 0x0003)
        goto loc_1b518d;
    if (dx == 0x0004)
        goto loc_1b51b0;
    if (dx == 0x0005)
        goto loc_1b51b8;
    if (dx == 0x0006)
        goto loc_1b51c0;
    if (dx == 0x0007)
        goto loc_1b51c8;
    if (dx == 0x0008)
        goto loc_1b51d0;
    if (dx != 0x0008)
        goto loc_1b51d8;
loc_1b518d: // 0160:1b518d
    push32(esi);
    sub_1b5bf5();
    goto loc_1b51de;
loc_1b5195: // 0160:1b5195
    push32(esi);
    sub_1b5b7c();
    goto loc_1b51de;
loc_1b519d: // 0160:1b519d
    push32(esi);
    sub_1b5af4();
    goto loc_1b51de;
    // gap 3 bytes
loc_1b51a8: // 0160:1b51a8
    push32(esi);
    sub_1b5d9c();
    goto loc_1b51de;
loc_1b51b0: // 0160:1b51b0
    push32(esi);
    sub_1b5c89();
    goto loc_1b51de;
loc_1b51b8: // 0160:1b51b8
    push32(esi);
    sub_1bd56b();
    goto loc_1b51de;
loc_1b51c0: // 0160:1b51c0
    push32(esi);
    sub_1bd70e();
    goto loc_1b51de;
loc_1b51c8: // 0160:1b51c8
    push32(esi);
    sub_1bdb00();
    goto loc_1b51de;
loc_1b51d0: // 0160:1b51d0
    push32(esi);
    sub_1bd6c9();
    goto loc_1b51de;
loc_1b51d8: // 0160:1b51d8
    push32(esi);
    sub_1bd9e7();
loc_1b51de: // 0160:1b51de
    esi = pop32();
    esi -= 0x00000008;
    ecx = pop32();
    ecx--;
    if (ecx)
        goto loc_1b5146;
    memoryASet16(ds, 0x2231d0, 0x0000);
loc_1b51f3: // 0160:1b51f3
    esp += 4;
    return;
}
void sub_1b51f4() // 0160:1b51f4 +long
{
    esp -= 4;
    edi = 0x000a0000;
    push(ds);
    es = pop();
    ecx = 0x00004000;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    esp += 4;
}
void sub_1b5205() // 0160:1b5205 +long
{
    esp -= 4;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000060;
    al = 0xa0;
    sub_1b5442();
    edi = pop32();
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b522f: // 0160:1b522f
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b523c: // 0160:1b523c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1b523c;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b522f;
    esp += 4;
}
void sub_1b521d() // 0160:1b521d +long
{
    esp -= 4;
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b522f: // 0160:1b522f
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b523c: // 0160:1b523c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1b523c;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b522f;
    esp += 4;
}
void sub_1b524f() // 0160:1b524f +long
{
    esp -= 4;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x000000a0;
    al = 0;
    sub_1b5442();
    edi = pop32();
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b5279: // 0160:1b5279
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b5286: // 0160:1b5286
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5295;
    memoryASet(ds, edi, al);
loc_1b5295: // 0160:1b5295
    edi++;
    if (--ecx)
        goto loc_1b5286;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5279;
    esp += 4;
}
void sub_1b5267() // 0160:1b5267 +long
{
    esp -= 4;
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b5279: // 0160:1b5279
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b5286: // 0160:1b5286
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5295;
    memoryASet(ds, edi, al);
loc_1b5295: // 0160:1b5295
    edi++;
    if (--ecx)
        goto loc_1b5286;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5279;
    esp += 4;
}
void sub_1b52a1() // 0160:1b52a1 +long
{
    esp -= 4;
    sub_1aa484();
    goto loc_1b52ab;
    // gap 3 bytes
loc_1b52ab: // 0160:1b52ab
    edi = 0x0020f1c4;
    esi = 0x0023f52c;
    edx = 0;
    ax = memoryAGet16(ds, esi + 8);
    ax += 0x0001;
    bx = memoryAGet16(ds, esi + 10);
    bx += 0x0001;
    mul16(bx);
    edx <<= 16;
    eax &= 0x0000ffff;
    eax |= edx;
    ecx = eax;
    esi = 0x0023f5ac;
loc_1b52db: // 0160:1b52db
    al = memoryAGet(ds, esi);
    if (al < 0xc0)
        goto loc_1b52f3;
    al -= 0xc0;
    esi++;
    bl = memoryAGet(ds, esi);
loc_1b52e6: // 0160:1b52e6
    memoryASet(ds, edi, bl);
    edi++;
    ecx--;
    if (!ecx)
        goto loc_1b52fa;
    al--;
    if (al)
        goto loc_1b52e6;
    esi++;
    goto loc_1b52db;
loc_1b52f3: // 0160:1b52f3
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1b52db;
    esi--;
loc_1b52fa: // 0160:1b52fa
    esi++;
    esi++;
    edi = 0x0020eec4;
    ecx = 0x00000100;
loc_1b5306: // 0160:1b5306
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi + 2, al);
    al = memoryAGet(ds, esi + 1);
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5306;
    esp += 4;
}
void sub_1b531f() // 0160:1b531f +long
{
    esp -= 4;
    memoryASet16(ds, 0x224646, 0x0001);
    esp += 4;
}
void sub_1b5329() // 0160:1b5329 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x224646) & 0xffff))
        goto loc_1b5421;
    al = 0xc0;
    edx = 0x0020cb8f;
    if (memoryAGet16(ds, 0x20ce91) < 0x0010)
        goto loc_1b5352;
    edx = 0x0020c88f;
loc_1b5352: // 0160:1b5352
    edi = edx + 576;
    bp = 0x0008;
loc_1b535c: // 0160:1b535c
    push32(ebp);
    esi = 0x001ed284;
    ebx = 0;
    bx = memoryAGet16(ds, 0x20eeb0);
    bp <<= 3;
    bx += bp;
    bx &= 0x003e;
    bx = memoryAGet16(ds, esi + ebx);
    bx >>= 5;
    ecx = 0x00000004;
loc_1b5383: // 0160:1b5383
    esi = edx + 573;
    if ((short)bx >= (short)cx)
        goto loc_1b5394;
    esi = edx + 570;
loc_1b5394: // 0160:1b5394
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    memoryASet(ds, edi + 2, al);
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5383;
    ebp = pop32();
    bp--;
    if (bp)
        goto loc_1b535c;
    bp = 0x0008;
loc_1b53b2: // 0160:1b53b2
    push32(ebp);
    esi = 0x001ed284;
    ebx = 0;
    bx = memoryAGet16(ds, 0x20eeb0);
    bp <<= 3;
    bx += bp;
    bx &= 0x003e;
    bx = memoryAGet16(ds, esi + ebx);
    bx >>= 5;
    ecx = 0x00000004;
loc_1b53d9: // 0160:1b53d9
    esi = edx + 570;
    if ((short)bx >= (short)cx)
        goto loc_1b53ea;
    esi = edx + 573;
loc_1b53ea: // 0160:1b53ea
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    memoryASet(ds, edi + 2, al);
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b53d9;
    ebp = pop32();
    bp--;
    if (bp)
        goto loc_1b53b2;
    memoryASet16(ds, 0x224646, 0x0000);
    if (memoryAGet16(ds, 0x224666) <= 0x00c0)
        goto loc_1b5421;
    memoryASet16(ds, 0x224666, 0x00c0);
loc_1b5421: // 0160:1b5421
    esp += 4;
    return;
}
void sub_1b5442() // 0160:1b5442 +long
{
    esp -= 4;
    edi = 0x0020c88f;
    edx = 0;
    dl = al;
    ebp = edx;
    edx += edx;
    edx += ebp;
    esi += edx;
    edi += edx;
loc_1b5455: // 0160:1b5455
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5455;
    esp += 4;
}
void sub_1b5477() // 0160:1b5477 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed6a8;
    sub_1b5a2d();
    esi = 0x001ed752;
    sub_1b5a2d();
    esi = 0x001ed7a4;
    goto loc_1b5a2d;
    // gap 1406 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b54af() // 0160:1b54af +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed658;
    sub_1b5a2d();
    esi = 0x001ed66a;
    sub_1b5a2d();
    esi = 0x001ed67c;
    goto loc_1b5a2d;
    // gap 1350 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b54e7() // 0160:1b54e7 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed696;
    sub_1b5a2d();
    esi = 0x001ed66a;
    sub_1b5a2d();
    esi = 0x001ed67c;
    goto loc_1b5a2d;
    // gap 1294 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b551f() // 0160:1b551f +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed658;
    sub_1b5a2d();
    esi = 0x001ed66a;
    sub_1b5a2d();
    esi = 0x001ed67c;
    sub_1b5a2d();
    esi = 0x001edd70;
    goto loc_1b5a2d;
    // gap 1228 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5561() // 0160:1b5561 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed586;
    goto loc_1b5a2d;
    // gap 1192 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5585() // 0160:1b5585 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed7c6;
    sub_1b5a2d();
    esi = 0x001ed7e0;
    sub_1b5a2d();
    esi = 0x001ed7f2;
    sub_1b5a3a();
    esi = 0x001ed7fa;
    goto loc_1b5a2d;
    // gap 1126 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b55c7() // 0160:1b55c7 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001ed814;
    sub_1b5a2d();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001ed876;
    sub_1b5a2d();
    esi = 0x001ed890;
    sub_1b5a3a();
    goto loc_1b5a1d;
    // gap 1043 bytes
loc_1b5a1d: // 0160:1b5a1d
    memoryASet32(ds, 0x2231e4, ebx);
    esi = 0x001ed8f4;
    goto loc_1b5a2d;
    // gap 3 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b560a() // 0160:1b560a +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001eda5e;
    sub_1b5a2d();
    sub_1b5a1d();
    esi = 0x001edb76;
    goto loc_1b5a2d;
    // gap 1002 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5643() // 0160:1b5643 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edaf8;
    sub_1b5a2d();
    esi = 0x001ed890;
    sub_1b5a2d();
    sub_1b5a1d();
    esi = 0x001edb52;
    sub_1b5a3a();
    memoryASet32(ds, 0x2231e8, ebx);
    cx = memoryAGet16(ds, 0x20e90d);
    ecx &= 0x0000ffff;
loc_1b5693: // 0160:1b5693
    push32(ecx);
    esi = 0x001ed876;
    sub_1b5a3a();
    ecx = pop32();
    if (--ecx)
        goto loc_1b5693;
    esp += 4;
}
void sub_1b56a2() // 0160:1b56a2 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edb9a;
    sub_1b5a2d();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001ed876;
    sub_1b5a2d();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    esi = 0x001edb88;
    goto loc_1b5a2d;
    // gap 819 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b56fa() // 0160:1b56fa +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edbec;
    sub_1b5a2d();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001ed876;
    sub_1b5a2d();
    esi = 0x001ed890;
    sub_1b5a3a();
    sub_1b5a1d();
    esi = 0x001edbfe;
    goto loc_1b5a2d;
    // gap 742 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5747() // 0160:1b5747 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001eda56;
    sub_1b5a2d();
    esi = 0x001edccc;
    sub_1b5a2d();
    sub_1b5a1d();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001ed876;
    sub_1b5a3a();
    esi = 0x001ed890;
    sub_1b5a3a();
    esi = 0x001edc90;
    sub_1b5a3a();
    memoryASet32(ds, 0x2231ec, ebx);
    esi = 0x001edcb2;
    goto loc_1b5a3a;
    // gap 652 bytes
loc_1b5a3a: // 0160:1b5a3a
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b57ae() // 0160:1b57ae +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001eda56;
    sub_1b5a2d();
    sub_1b5a1d();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001ed876;
    sub_1b5a3a();
    esi = 0x001ed890;
    sub_1b5a3a();
    esi = 0x001ed67c;
    goto loc_1b5a2d;
    // gap 562 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b57fb() // 0160:1b57fb +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001eda66;
    sub_1b5a2d();
    sub_1b5a1d();
    esi = 0x001ed8c2;
    sub_1b5a3a();
    esi = 0x001edcde;
    goto loc_1b5a2d;
    // gap 495 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b583e() // 0160:1b583e +long
{
    esp -= 4;
    eax = 0x002231e0;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002239f0;
    ebx = 0x0028890c;
    esi = 0x001ed2c4;
    sub_1b5a2d();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    if (!(memoryAGet16(ds, 0x20eca9) & 0xffff))
        goto loc_1b5891;
    esi = 0x001edeea;
    goto loc_1b5a2d;
loc_1b5891: // 0160:1b5891
    esi = 0x001edf1c;
    goto loc_1b5a2d;
    // gap 402 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b589b() // 0160:1b589b +long
{
    esp -= 4;
    eax = 0x002231e0;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002239f0;
    ebx = 0x0028890c;
    esi = 0x001ed2c4;
    sub_1b5a2d();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edeea;
    sub_1b5a2d();
    memoryASet32(ds, 0x20ee67, ebx);
    esi = 0x001edd78;
    goto loc_1b5a2d;
    // gap 314 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b58f3() // 0160:1b58f3 +long
{
    esp -= 4;
    eax = 0x002231e0;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002239f0;
    ebx = 0x0028890c;
    esi = 0x001ed2c4;
    sub_1b5a2d();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edfe4;
    sub_1b5a3a();
    memoryASet32(ds, 0x2231e8, ebx);
    esi = 0x001eda5e;
    sub_1b5a2d();
    esi = 0x001ed890;
    sub_1b5a3a();
    esi = 0x001ed8ec;
    memoryASet32(ds, 0x2231e4, ebx);
    sub_1b5a3a();
    esi = 0x001edb64;
    goto loc_1b5a3a;
    // gap 203 bytes
loc_1b5a3a: // 0160:1b5a3a
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b596f() // 0160:1b596f +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    sub_1b5a1d();
    esi = 0x001edf52;
    goto loc_1b5a2d;
    // gap 149 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5998() // 0160:1b5998 +long
{
    esp -= 4;
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001edb52;
    goto loc_1b5a2d;
    // gap 116 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b59bc() // 0160:1b59bc +long
{
    esp -= 4;
    memoryASet16(ds, 0x20eca9, 0x0000);
    sub_1b583e();
    esi = 0x001ee07e;
    goto loc_1b5a2d;
    // gap 92 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b59d4() // 0160:1b59d4 +long
{
    esp -= 4;
    eax = 0x001eccf9;
    memoryASet32(ds, 0x20ee05, eax);
    ax = memoryAGet16(ds, 0x20ceb7);
    esi = 0x001ee0b0;
    ax <<= 1;
    dx = ax;
    ax <<= 2;
    ax += dx;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet32(ds, 0x20ee09, esi);
    esi = 0x0020ee05;
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1b5a18;
    goto loc_1b5a2d;
    // gap 3 bytes
loc_1b5a18: // 0160:1b5a18
    goto loc_1b5a3a;
    // gap 19 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
loc_1b5a3a: // 0160:1b5a3a
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5a1d() // 0160:1b5a1d +long
{
    esp -= 4;
    memoryASet32(ds, 0x2231e4, ebx);
    esi = 0x001ed8f4;
    goto loc_1b5a2d;
    // gap 3 bytes
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5a2d() // 0160:1b5a2d +long
{
    esp -= 4;
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5a3a() // 0160:1b5a3a +long
{
    esp -= 4;
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
}
void sub_1b5af4() // 0160:1b5af4 +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    esi += memoryAGet32(ds, 0x2231d8);
    esi -= 0x00000004;
    edi = 0x002915ac;
    push32(ecx);
    push32(ebx);
    ecx = 0;
    ebx = 0;
    ebp = memoryAGet32(ds, 0x2231d8);
    ebp <<= 1;
    dx = memoryAGet16(ds, 0x224636);
loc_1b5b4b: // 0160:1b5b4b
    cx = memoryAGet16(ds, 0x224634);
loc_1b5b52: // 0160:1b5b52
    eax = memoryAGet32(ds, esi);
    memoryASet(ds, edi + 2, ah);
    memoryASet(ds, edi + 3, al);
    eax >>= 16;
    memoryASet(ds, edi, ah);
    memoryASet(ds, edi + 1, al);
    esi -= 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b5b52;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5b4b;
    ebx = pop32();
    ecx = pop32();
    esi = 0x002915ac;
    goto loc_1b5dcb;
    // gap 591 bytes
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b5b7c() // 0160:1b5b7c +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    dx = ax;
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    mul16(dx);
    esi += eax;
    esi -= memoryAGet32(ds, 0x2231d8);
    edi = 0x002915ac;
    push32(ecx);
    push32(ebx);
    ebx = 0;
    ecx = 0;
    push(ds);
    es = pop();
    ebp = memoryAGet32(ds, 0x2231d8);
    ebp <<= 1;
    dx = memoryAGet16(ds, 0x224636);
loc_1b5bda: // 0160:1b5bda
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi -= ebp;
    dx--;
    if (dx)
        goto loc_1b5bda;
    ebx = pop32();
    ecx = pop32();
    esi = 0x002915ac;
    goto loc_1b5dcb;
    // gap 470 bytes
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b5bf5() // 0160:1b5bf5 +long
{
    esp -= 4;
    goto loc_1b5bf5;
loc_1b5bb6: // 0160:1b5bb6
    esi += eax;
    esi -= memoryAGet32(ds, 0x2231d8);
    edi = 0x002915ac;
    push32(ecx);
    push32(ebx);
    ebx = 0;
    ecx = 0;
    push(ds);
    es = pop();
    ebp = memoryAGet32(ds, 0x2231d8);
    ebp <<= 1;
    dx = memoryAGet16(ds, 0x224636);
loc_1b5bda: // 0160:1b5bda
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi -= ebp;
    dx--;
    if (dx)
        goto loc_1b5bda;
    ebx = pop32();
    ecx = pop32();
    esi = 0x002915ac;
    goto loc_1b5dcb;
loc_1b5bf5: // 0160:1b5bf5
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    esi += memoryAGet32(ds, 0x2231d8);
    esi -= 0x00000004;
    edi = 0x00293cbc;
    push32(ecx);
    push32(ebx);
    ecx = 0;
    ebx = 0;
    ebp = memoryAGet32(ds, 0x2231d8);
    ebp <<= 1;
    dx = memoryAGet16(ds, 0x224636);
loc_1b5c4c: // 0160:1b5c4c
    cx = memoryAGet16(ds, 0x224634);
loc_1b5c53: // 0160:1b5c53
    eax = memoryAGet32(ds, esi);
    memoryASet(ds, edi + 2, ah);
    memoryASet(ds, edi + 3, al);
    eax >>= 16;
    memoryASet(ds, edi, ah);
    memoryASet(ds, edi + 1, al);
    esi -= 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1b5c53;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5c4c;
    ebx = pop32();
    ecx = pop32();
    esi = 0x00293cbc;
    eax = memoryAGet32(ds, 0x2231d8);
    mul16(memoryAGet16(ds, 0x224636));
    goto loc_1b5bb6;
    // gap 322 bytes
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b5c89() // 0160:1b5c89 +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5ce0;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x224640) & 0xffff))
        goto loc_1b5ce0;
    edi = 0x000a9000;
loc_1b5ce0: // 0160:1b5ce0
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5d3b: // 0160:1b5d3b
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5d52: // 0160:1b5d52
    cx = memoryAGet16(ds, 0x224634);
loc_1b5d59: // 0160:1b5d59
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5d68;
    memoryASet(ds, edi, al);
loc_1b5d68: // 0160:1b5d68
    edi++;
    if (--ecx)
        goto loc_1b5d59;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5d52;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5d95;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5d3b;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5d3b;
loc_1b5d95: // 0160:1b5d95
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b5d9c() // 0160:1b5d9c +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b5ec4() // 0160:1b5ec4 +long
{
    esp -= 4;
    push32(edi);
    ax = memoryAGet16(ds, 0x22463a);
    ax <<= 3;
    edi = 0x00223df0;
    eax &= 0x0000ffff;
    edi += eax;
    memoryASet16(ds, edi, bx);
    memoryASet16(ds, edi + 2, cx);
    memoryASet16(ds, 0x224634, memoryAGet16(ds, 0x224634) + 0x0001);
    ax = memoryAGet16(ds, 0x224634);
    memoryASet16(ds, edi + 4, ax);
    ax = memoryAGet16(ds, 0x224636);
    memoryASet16(ds, edi + 6, ax);
    edi = pop32();
    memoryASet16(ds, 0x22463a, memoryAGet16(ds, 0x22463a) + 1);
    memoryASet16(ds, 0x224634, memoryAGet16(ds, 0x224634) - 0x0001);
    esp += 4;
}
void sub_1b5f0f() // 0160:1b5f0f +long
{
    esp -= 4;
    push32(edi);
    ax = memoryAGet16(ds, 0x22463c);
    ax <<= 3;
    edi = 0x002241f0;
    eax &= 0x0000ffff;
    edi += eax;
    memoryASet16(ds, edi, bx);
    memoryASet16(ds, edi + 2, cx);
    memoryASet16(ds, 0x224634, memoryAGet16(ds, 0x224634) + 1);
    ax = memoryAGet16(ds, 0x224634);
    memoryASet16(ds, edi + 4, ax);
    ax = memoryAGet16(ds, 0x224636);
    memoryASet16(ds, edi + 6, ax);
    edi = pop32();
    memoryASet16(ds, 0x22463c, memoryAGet16(ds, 0x22463c) + 1);
    memoryASet16(ds, 0x224634, memoryAGet16(ds, 0x224634) - 0x0001);
    esp += 4;
}
void sub_1b5f59() // 0160:1b5f59 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x22463a);
    if (!ax)
        goto loc_1b5f8f;
    ebx = 0x00223de8;
    memoryASet32(ds, 0x20ceeb, 0x000a9000);
    memoryASet32(ds, 0x20ceef, 0x000a0000);
    sub_1b5fc9();
    memoryASet16(ds, 0x22463a, 0x0000);
loc_1b5f8f: // 0160:1b5f8f
    flags.interrupts = 1;
    esp += 4;
}
void sub_1b5f91() // 0160:1b5f91 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x22463c);
    if (!ax)
        goto loc_1b5fc7;
    ebx = 0x002241e8;
    memoryASet32(ds, 0x20ceeb, 0x000a9000);
    memoryASet32(ds, 0x20ceef, 0x000a4800);
    sub_1b5fc9();
    memoryASet16(ds, 0x22463c, 0x0000);
loc_1b5fc7: // 0160:1b5fc7
    flags.interrupts = 1;
    esp += 4;
}
void sub_1b5fc9() // 0160:1b5fc9 +long
{
    esp -= 4;
    sub_1bd825();
    memoryASet32(ds, 0x2246c8, ebx);
    eax &= 0x0000ffff;
    ecx = eax;
loc_1b5fdb: // 0160:1b5fdb
    push32(ecx);
    ebx = memoryAGet32(ds, 0x2246c8);
    edx = ecx;
    edx <<= 3;
    bp = memoryAGet16(ds, ebx + edx);
    memoryASet16(ds, 0x2231cc, bp);
    bp = memoryAGet16(ds, ebx + edx + 2);
    memoryASet16(ds, 0x2231ce, bp);
    bp = memoryAGet16(ds, ebx + edx + 4);
    memoryASet16(ds, 0x224634, bp);
    bp = memoryAGet16(ds, ebx + edx + 6);
    memoryASet16(ds, 0x224636, bp);
    ax = memoryAGet16(ds, 0x2231ce);
    bx = ax;
    ax <<= 6;
    bx <<= 4;
    ax += bx;
    bx = memoryAGet16(ds, 0x2231cc);
    bx >>= 2;
    ax += bx;
    eax &= 0x0000ffff;
    esi = eax;
    esi += memoryAGet32(ds, 0x20ceeb);
    edi = eax;
    edi += memoryAGet32(ds, 0x20ceef);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    dx = memoryAGet16(ds, 0x224636);
    bp = memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
loc_1b6069: // 0160:1b6069
    cx = bp;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi += ebx;
    esi += ebx;
    dx--;
    if (dx)
        goto loc_1b6069;
    ecx = pop32();
    if (--ecx)
        goto loc_1b607e;
    goto loc_1bd849;
loc_1b607e: // 0160:1b607e
    goto loc_1b5fdb;
    // gap 30662 bytes
loc_1bd849: // 0160:1bd849
    push32(edx);
    push32(eax);
    dx = 0x03ce;
    ax = memoryAGet16(ds, 0x22463e);
    ah = al;
    al = 0x05;
    out16(dx, ax);
    eax = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1b6083() // 0160:1b6083 +long
{
    esp -= 4;
    goto loc_1b6083;
loc_1b5a2d: // 0160:1b5a2d
    edx = memoryAGet32(ds, esi);
    push32(esi);
    push32(edi);
    push32(ebx);
    sub_1b52a1();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esi = memoryAGet32(ds, esi + 4);
loc_1b5a3d: // 0160:1b5a3d
    ax = memoryAGet16(ds, esi);
    if (ax == 0xffff)
        goto loc_1b5af3;
    ax <<= 3;
    eax &= 0x0000ffff;
    ebp = eax;
    ax = memoryAGet16(ds, esi + 2);
    ax <<= 3;
    ecx = eax;
    eax <<= 8;
    ecx <<= 6;
    eax += ecx;
    ebp += eax;
    ax = memoryAGet16(ds, esi + 4);
    ax <<= 3;
    memoryASet16(ds, 0x2231c8, ax);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 6);
    ax <<= 3;
    memoryASet16(ds, 0x2231ca, ax);
    memoryASet16(ds, edi + 2, ax);
    eax = memoryAGet32(ds, 0x20ceef);
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    push32(esi);
    esi = 0x0020f1c4;
    esi += ebp;
    ecx = 0;
    ebp = 0x00000140;
    bp -= memoryAGet16(ds, 0x2231c8);
    dx = memoryAGet16(ds, 0x2231ca);
loc_1b5ab9: // 0160:1b5ab9
    cx = memoryAGet16(ds, 0x2231c8);
    cx >>= 2;
loc_1b5ac4: // 0160:1b5ac4
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1b5ac4;
    esi += ebp;
    dx--;
    if (dx)
        goto loc_1b5ab9;
    eax = 0;
    ax = memoryAGet16(ds, 0x2231c8);
    mul16(memoryAGet16(ds, 0x2231ca));
    esi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, esi, memoryAGet32(ds, esi) + eax);
    esi = pop32();
    goto loc_1b5a3d;
loc_1b5af3: // 0160:1b5af3
    esp += 4;
    return;
    // gap 1423 bytes
loc_1b6083: // 0160:1b6083
    eax = 0x002231e0;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002239f0;
    ebx = 0x0028890c;
    esi = 0x001ed2cc;
    goto loc_1b5a2d;
}
void sub_1b60a7() // 0160:1b60a7 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    goto loc_1b60bb;
    // gap 9 bytes
loc_1b60bb: // 0160:1b60bb
    cl = memoryAGet(ds, esi + 3);
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x001f;
    if ((short)dx >= (short)0x0014)
        goto loc_1b60e3;
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 1 bytes
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b60d3() // 0160:1b60d3 +long
{
    esp -= 4;
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b60e3() // 0160:1b60e3 +long
{
    esp -= 4;
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
}
void sub_1b60f2() // 0160:1b60f2 +long
{
    esp -= 4;
    edi = 0x0020e9c5;
    memoryASet(ds, edi, al);
    memoryASet(ds, edi + 1, bl);
    memoryASet(ds, edi + 2, 0xf0);
    memoryASet(ds, edi + 3, cl);
    edi += 0x00000004;
    ecx &= 0x000000ff;
    al = 0xff;
    memoryASet(ds, edi, al);
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    esp += 4;
}
void sub_1b6113() // 0160:1b6113 +long
{
    esp -= 4;
    edi = 0x0020e9c5;
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    ecx = 0;
    cl = memoryAGet(ds, edi + 3);
    esi += 0x00000004;
    edi += 0x00000004;
    if (memoryAGet16(ds, 0x20e905) != 0x0002)
        goto loc_1b61b6;
loc_1b6135: // 0160:1b6135
    al = memoryAGet(ds, esi);
    esi++;
    if (al != 0x20)
        goto loc_1b6147;
    al = 0xff;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b6147: // 0160:1b6147
    if ((char)al < (char)0x30)
        goto loc_1b6171;
    if ((char)al < (char)0x3a)
        goto loc_1b6168;
    if ((char)al < (char)0x41)
        goto loc_1b6171;
    al -= 0x41;
    al += 0x29;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b6168: // 0160:1b6168
    al -= 0x30;
    al += 0x43;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b6171: // 0160:1b6171
    if (al != 0x2e)
        goto loc_1b6180;
    al = 0x4d;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b6180: // 0160:1b6180
    if (al != 0x2d)
        goto loc_1b618f;
    al = 0x4e;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b618f: // 0160:1b618f
    if (al != 0x3a)
        goto loc_1b619e;
    al = 0x4f;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b619e: // 0160:1b619e
    if (al != 0x21)
        goto loc_1b61ad;
    al = 0x50;
    goto loc_1b61af;
    // gap 3 bytes
loc_1b61ad: // 0160:1b61ad
    al = 0x51;
loc_1b61af: // 0160:1b61af
    memoryASet(ds, edi, al);
    edi++;
    ecx--;
    if (ecx)
        goto loc_1b6135;
    esp += 4;
    return;
loc_1b61b6: // 0160:1b61b6
    al = memoryAGet(ds, esi);
    esi++;
    if (al == 0x5b)
        goto loc_1b6250;
    if (al == 0x5d)
        goto loc_1b6254;
    if (al == 0x3b)
        goto loc_1b6258;
    if (al == 0x40)
        goto loc_1b625c;
    if (al != 0x20)
        goto loc_1b61e8;
    al = 0xff;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b61e8: // 0160:1b61e8
    if ((char)al < (char)0x30)
        goto loc_1b6210;
    if ((char)al < (char)0x3a)
        goto loc_1b6207;
    if ((char)al < (char)0x41)
        goto loc_1b6210;
    al -= 0x41;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b6207: // 0160:1b6207
    al -= 0x30;
    al += 0x1a;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b6210: // 0160:1b6210
    if (al != 0x2e)
        goto loc_1b621f;
    al = 0x24;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b621f: // 0160:1b621f
    if (al != 0x16)
        goto loc_1b622e;
    al = 0x25;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b622e: // 0160:1b622e
    if (al != 0x3a)
        goto loc_1b623d;
    al = 0x26;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b623d: // 0160:1b623d
    if (al != 0x21)
        goto loc_1b624c;
    al = 0x27;
    goto loc_1b625e;
    // gap 3 bytes
loc_1b624c: // 0160:1b624c
    al = 0x28;
    goto loc_1b625e;
loc_1b6250: // 0160:1b6250
    al = 0x52;
    goto loc_1b625e;
loc_1b6254: // 0160:1b6254
    al = 0x53;
    goto loc_1b625e;
loc_1b6258: // 0160:1b6258
    al = 0x54;
    goto loc_1b625e;
loc_1b625c: // 0160:1b625c
    al = 0x55;
loc_1b625e: // 0160:1b625e
    memoryASet(ds, edi, al);
    edi++;
    ecx--;
    if (ecx)
        goto loc_1b61b6;
    esp += 4;
}
void sub_1b6269() // 0160:1b6269 +long +isolate
{
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1b627c: // 0160:1b627c
    if (al < 0x40)
        goto loc_1b6286;
    bl++;
    al -= 0x40;
    goto loc_1b627c;
loc_1b6286: // 0160:1b6286
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1b62e3;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1b62e3;
    edi = 0x000a0000;
loc_1b62e3: // 0160:1b62e3
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1b6301;
    dx = 0x0008;
loc_1b6301: // 0160:1b6301
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1b630f: // 0160:1b630f
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1b630f;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1b6332: // 0160:1b6332
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1b63a9;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1b6361: // 0160:1b6361
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1b6378: // 0160:1b6378
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1b6384;
    memoryASet(ds, edi, cl);
loc_1b6384: // 0160:1b6384
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1b6392;
    memoryASet(ds, edi, cl);
loc_1b6392: // 0160:1b6392
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1b6378;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b6361;
loc_1b63a9: // 0160:1b63a9
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1b63c2;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1b6332;
loc_1b63c2: // 0160:1b63c2
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 2;
}
void sub_1b63d3() // 0160:1b63d3 +long
{
    esp -= 4;
    goto loc_1b63d3;
loc_1b2d91: // 0160:1b2d91
    edx = 0x001ed08d;
    eax = 0x00003d02;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0022479c;
    ecx = 0x00000410;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 13373 bytes
loc_1b63d3: // 0160:1b63d3
    sub_1b191a();
    ax = memoryAGet16(ds, 0x1f1ccc);
    push32(eax);
    memoryASet16(ds, 0x1f1ccc, 0x0000);
    sub_1b6427();
    eax = pop32();
    memoryASet16(ds, 0x1f1ccc, ax);
    ax = memoryAGet16(ds, 0x20ee53);
    memoryASet16(ds, 0x224ba4, ax);
    ax = memoryAGet16(ds, 0x20ee55);
    memoryASet16(ds, 0x224ba6, ax);
    ax = memoryAGet16(ds, 0x20ee77);
    memoryASet16(ds, 0x224baa, ax);
    al = memoryAGet(ds, 0x1f1cbf);
    memoryASet(ds, 0x224ba8, al);
    goto loc_1b2d91;
}
void sub_1b6427() // 0160:1b6427 +long
{
    esp -= 4;
    sub_1b734c();
    sub_1aff53();
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5998();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b65e6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b65e6();
    memoryASet16(ds, 0x2231c4, 0x0000);
    ecx = 0x00000004;
    esi = 0x0020d81d;
    ax = memoryAGet16(ds, esi);
loc_1b6496: // 0160:1b6496
    esi -= 0x00000004;
    if (ax != memoryAGet16(ds, esi))
        goto loc_1b64a0;
    if (--ecx)
        goto loc_1b6496;
loc_1b64a0: // 0160:1b64a0
    memoryASet16(ds, 0x20e82f, cx);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x00a6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
loc_1b64d1: // 0160:1b64d1
    sub_1b5096();
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0005);
    memoryASet16(ds, 0x20e809, 0x0004);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b66e5();
    esi = 0x001ef5b3;
    al = 0xc2;
    bl = 0xc8;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b652a;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b64d1;
loc_1b652a: // 0160:1b652a
    ax = memoryAGet16(ds, 0x20e82f);
    if (!ax)
        goto loc_1b65c7;
    if (ax == 0x0001)
        goto loc_1b65a8;
    if (ax == 0x0002)
        goto loc_1b6589;
    if (ax == 0x0003)
        goto loc_1b656a;
    memoryASet16(ds, 0x20ee53, 0x00e0);
    memoryASet16(ds, 0x20ee55, 0x009c);
    ax = memoryAGet16(ds, 0x20d81d);
    memoryASet16(ds, 0x20ee77, ax);
    esp += 4;
    return;
loc_1b656a: // 0160:1b656a
    memoryASet16(ds, 0x20ee53, 0x00f0);
    memoryASet16(ds, 0x20ee55, 0x00a8);
    ax = memoryAGet16(ds, 0x20d819);
    memoryASet16(ds, 0x20ee77, ax);
    esp += 4;
    return;
loc_1b6589: // 0160:1b6589
    memoryASet16(ds, 0x20ee53, 0x0100);
    memoryASet16(ds, 0x20ee55, 0x00b4);
    ax = memoryAGet16(ds, 0x20d815);
    memoryASet16(ds, 0x20ee77, ax);
    esp += 4;
    return;
loc_1b65a8: // 0160:1b65a8
    memoryASet16(ds, 0x20ee53, 0x0120);
    memoryASet16(ds, 0x20ee55, 0x00c8);
    ax = memoryAGet16(ds, 0x20d811);
    memoryASet16(ds, 0x20ee77, ax);
    esp += 4;
    return;
loc_1b65c7: // 0160:1b65c7
    memoryASet16(ds, 0x20ee53, 0x0140);
    memoryASet16(ds, 0x20ee55, 0x00e0);
    ax = memoryAGet16(ds, 0x20d80d);
    memoryASet16(ds, 0x20ee77, ax);
    esp += 4;
}
void sub_1b65e6() // 0160:1b65e6 +long
{
    esp -= 4;
    goto loc_1b65e6;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 1284 bytes
loc_1b65e6: // 0160:1b65e6
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ef5d0;
    sub_1be816();
    esi = 0x001ef5f1;
    sub_1b60d3();
    esi = 0x001ef605;
    sub_1b60d3();
    esi = 0x001ef619;
    sub_1b60d3();
    esi = 0x001ef62d;
    sub_1b60d3();
    esi = 0x001ef641;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d80d);
    sub_1b66b7();
    esi = 0x0020ea29;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d811);
    sub_1b66b7();
    memoryASet(ds, 0x20ea2a, 0x99);
    esi = 0x0020ea29;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d815);
    sub_1b66b7();
    memoryASet(ds, 0x20ea29, 0xc5);
    esi = 0x0020ea29;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d819);
    sub_1b66b7();
    memoryASet(ds, 0x20ea29, 0xc5);
    memoryASet(ds, 0x20ea2a, 0x99);
    esi = 0x0020ea29;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d81d);
    sub_1b66b7();
    memoryASet(ds, 0x20ea29, 0xc6);
    esi = 0x0020ea29;
    goto loc_1b60d3;
}
void sub_1b66b7() // 0160:1b66b7 +long
{
    esp -= 4;
    edi = 0x0020ea29;
    esi = 0x001ef655;
    ecx = 0x0000000d;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    al--;
    al += al;
    eax &= 0x000000ff;
    bl = memoryAGet(ds, esi + eax);
    memoryASet(ds, 0x20ea2d, bl);
    bl = memoryAGet(ds, esi + eax + 1);
    memoryASet(ds, 0x20ea2e, bl);
    esp += 4;
}
void sub_1b66e5() // 0160:1b66e5 +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b66ee;
    ax += 0x0002;
loc_1b66ee: // 0160:1b66ee
    ax += 0x00ec;
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 28898 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b66fb() // 0160:1b66fb +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5998();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b6be9();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b6be9();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x0136);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
    sub_1b3af9();
loc_1b678b: // 0160:1b678b
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1b7018();
    esi = 0x001ef68c;
    al = 0xc5;
    bl = 0x0d;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b67ef;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b678b;
loc_1b67ef: // 0160:1b67ef
    memoryASet16(ds, 0x20e831, 0x0000);
    if (memoryAGet16(ds, 0x20e82f) != 0x0001)
        goto loc_1b6be8;
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1b68dc;
    memoryASet16(ds, 0x20ec3d, 0x00ce);
    memoryASet16(ds, 0x20ec3f, 0x00f6);
    sub_1b5096();
    sub_1b5096();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b6fce();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b6fce();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
loc_1b686d: // 0160:1b686d
    sub_1b5096();
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b70ba();
    sub_1b703c();
    esi = 0x001efae1;
    al = 0xc3;
    bl = 0x05;
    sub_1b60a7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b68d0;
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x224b9c, ax);
    sub_1b2d91();
    goto loc_1b6be8;
loc_1b68d0: // 0160:1b68d0
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b686d;
loc_1b68dc: // 0160:1b68dc
    if (memoryAGet16(ds, 0x20d7f5) != 0x0002)
        goto loc_1b69e5;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecc1d;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1bd85e();
    sub_1b7140();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b7140();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00be);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
loc_1b697a: // 0160:1b697a
    sub_1b5096();
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b70ba();
    sub_1b7060();
    esi = 0x001efb02;
    al = 0xc0;
    bl = 0x85;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b69d3;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b697a;
loc_1b69d3: // 0160:1b69d3
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x224b9e, ax);
    sub_1b2d91();
    esp += 4;
    return;
loc_1b69e5: // 0160:1b69e5
    if (memoryAGet16(ds, 0x20d7f5) != 0x0003)
        goto loc_1b6aee;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecc1d;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1bd85e();
    sub_1b71fc();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b71fc();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x009e);
    memoryASet16(ds, 0x20ec3f, 0x00be);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
loc_1b6a83: // 0160:1b6a83
    sub_1b5096();
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b70ba();
    sub_1b707e();
    esi = 0x001efb23;
    al = 0xc0;
    bl = 0x85;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b6adc;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b6a83;
loc_1b6adc: // 0160:1b6adc
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x224ba0, ax);
    sub_1b2d91();
    esp += 4;
    return;
loc_1b6aee: // 0160:1b6aee
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5477();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecc1d;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1bd85e();
    sub_1b72b8();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b72b8();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x0086);
    memoryASet16(ds, 0x20ec3f, 0x00be);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
loc_1b6b7e: // 0160:1b6b7e
    sub_1b5096();
    sub_1b531f();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b70ba();
    sub_1b709c();
    esi = 0x001efb44;
    al = 0xc0;
    bl = 0x85;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b6bd7;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b6b7e;
loc_1b6bd7: // 0160:1b6bd7
    ax = memoryAGet16(ds, 0x20e82f);
    memoryASet16(ds, 0x224ba2, ax);
    sub_1b2d91();
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
}
void sub_1b6be9() // 0160:1b6be9 +long
{
    esp -= 4;
    goto loc_1b6be9;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 2823 bytes
loc_1b6be9: // 0160:1b6be9
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ef69f;
    sub_1b60d3();
    esi = 0x001ef6a5;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax != 0x0001)
        goto loc_1b6c84;
    esi = 0x001ef6ac;
    sub_1b60d3();
    memoryASet16(ds, 0x20e905, 0x0000);
    if (memoryAGet16(ds, 0x224b9c) & 0xffff)
        goto loc_1b6c5c;
    esi = 0x001efa66;
    sub_1b60d3();
    esi = 0x001efa72;
    sub_1b60d3();
    esi = 0x001efa7e;
    sub_1b60d3();
    esi = 0x001efa8a;
    goto loc_1b60d3;
loc_1b6c5c: // 0160:1b6c5c
    esi = 0x001efa96;
    sub_1b60d3();
    esi = 0x001efaa7;
    sub_1b60d3();
    esi = 0x001efab8;
    sub_1b60d3();
    esi = 0x001efacc;
    goto loc_1b60d3;
loc_1b6c84: // 0160:1b6c84
    if (ax != 0x0002)
        goto loc_1b6da2;
    esi = 0x001ef6c6;
    sub_1b60d3();
    esi = 0x001ef714;
    sub_1b60d3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001ef72b;
    sub_1b60d3();
    esi = 0x001ef734;
    sub_1b60d3();
    esi = 0x001ef73d;
    sub_1b60d3();
    esi = 0x001ef745;
    sub_1b60d3();
    if (memoryAGet16(ds, 0x224b9e) & 0xffff)
        goto loc_1b6d0b;
    esi = 0x001ef74e;
    sub_1b60d3();
    esi = 0x001ef761;
    sub_1b60d3();
    esi = 0x001ef774;
    sub_1b60d3();
    esi = 0x001ef787;
    sub_1b60d3();
    goto loc_1b6da1;
loc_1b6d0b: // 0160:1b6d0b
    if (memoryAGet16(ds, 0x224b9e) != 0x0001)
        goto loc_1b6d42;
    esi = 0x001ef79a;
    sub_1b60d3();
    esi = 0x001ef7ad;
    sub_1b60d3();
    esi = 0x001ef7bf;
    sub_1b60d3();
    esi = 0x001ef7ce;
    sub_1b60d3();
    goto loc_1b6da1;
    // gap 3 bytes
loc_1b6d42: // 0160:1b6d42
    if (memoryAGet16(ds, 0x224b9e) != 0x0002)
        goto loc_1b6d79;
    esi = 0x001ef7dd;
    sub_1b60d3();
    esi = 0x001ef7ef;
    sub_1b60d3();
    esi = 0x001ef801;
    sub_1b60d3();
    esi = 0x001ef813;
    sub_1b60d3();
    goto loc_1b6da1;
    // gap 3 bytes
loc_1b6d79: // 0160:1b6d79
    esi = 0x001ef825;
    sub_1b60d3();
    esi = 0x001ef83a;
    sub_1b60d3();
    esi = 0x001ef84f;
    sub_1b60d3();
    esi = 0x001ef864;
    sub_1b60d3();
loc_1b6da1: // 0160:1b6da1
    esp += 4;
    return;
loc_1b6da2: // 0160:1b6da2
    if (ax != 0x0003)
        goto loc_1b6ec0;
    esi = 0x001ef6e0;
    sub_1b60d3();
    esi = 0x001efbc0;
    sub_1b60d3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001efbe0;
    sub_1b60d3();
    esi = 0x001efbe9;
    sub_1b60d3();
    esi = 0x001efbf2;
    sub_1b60d3();
    esi = 0x001efbfa;
    sub_1b60d3();
    if (memoryAGet16(ds, 0x224ba0) & 0xffff)
        goto loc_1b6e29;
    esi = 0x001efc03;
    sub_1b60d3();
    esi = 0x001efc1f;
    sub_1b60d3();
    esi = 0x001efc3b;
    sub_1b60d3();
    esi = 0x001efc57;
    sub_1b60d3();
    goto loc_1b6ebf;
loc_1b6e29: // 0160:1b6e29
    if (memoryAGet16(ds, 0x224ba0) != 0x0001)
        goto loc_1b6e60;
    esi = 0x001efc73;
    sub_1b60d3();
    esi = 0x001efc91;
    sub_1b60d3();
    esi = 0x001efcae;
    sub_1b60d3();
    esi = 0x001efcc8;
    sub_1b60d3();
    goto loc_1b6ebf;
    // gap 3 bytes
loc_1b6e60: // 0160:1b6e60
    if (memoryAGet16(ds, 0x224ba0) != 0x0002)
        goto loc_1b6e97;
    esi = 0x001efce2;
    sub_1b60d3();
    esi = 0x001efcfe;
    sub_1b60d3();
    esi = 0x001efd1a;
    sub_1b60d3();
    esi = 0x001efd36;
    sub_1b60d3();
    goto loc_1b6ebf;
    // gap 3 bytes
loc_1b6e97: // 0160:1b6e97
    esi = 0x001efd52;
    sub_1b60d3();
    esi = 0x001efd6e;
    sub_1b60d3();
    esi = 0x001efd8b;
    sub_1b60d3();
    esi = 0x001efda8;
    sub_1b60d3();
loc_1b6ebf: // 0160:1b6ebf
    esp += 4;
    return;
loc_1b6ec0: // 0160:1b6ec0
    esi = 0x001ef6fa;
    sub_1b60d3();
    esi = 0x001effbc;
    sub_1b60d3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001effdc;
    sub_1b60d3();
    esi = 0x001effe5;
    sub_1b60d3();
    esi = 0x001effee;
    sub_1b60d3();
    esi = 0x001efff6;
    sub_1b60d3();
    if (memoryAGet16(ds, 0x224ba2) & 0xffff)
        goto loc_1b6f3d;
    esi = 0x001effff;
    sub_1b60d3();
    esi = 0x001f001c;
    sub_1b60d3();
    esi = 0x001f0039;
    sub_1b60d3();
    esi = 0x001f0056;
    sub_1b60d3();
    goto loc_1b6f9c;
    // gap 3 bytes
loc_1b6f3d: // 0160:1b6f3d
    if (memoryAGet16(ds, 0x224ba2) != 0x0001)
        goto loc_1b6f74;
    esi = 0x001f0073;
    sub_1b60d3();
    esi = 0x001f0094;
    sub_1b60d3();
    esi = 0x001f00b4;
    sub_1b60d3();
    esi = 0x001f00d1;
    sub_1b60d3();
    goto loc_1b6f9c;
    // gap 3 bytes
loc_1b6f74: // 0160:1b6f74
    esi = 0x001f00ee;
    sub_1b60d3();
    esi = 0x001f010e;
    sub_1b60d3();
    esi = 0x001f012e;
    sub_1b60d3();
    esi = 0x001f014e;
    goto loc_1b60d3;
loc_1b6f9c: // 0160:1b6f9c
    esp += 4;
    return;
}
void sub_1b6f9d() // 0160:1b6f9d +long
{
    esp -= 4;
    goto loc_1b6f9d;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 3771 bytes
loc_1b6f9d: // 0160:1b6f9d
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001efa1b;
    sub_1b60d3();
    esi = 0x001efa2c;
    sub_1b60d3();
    esi = 0x001efa3d;
    sub_1b60d3();
    esi = 0x001efa51;
    goto loc_1b60d3;
}
void sub_1b6fce() // 0160:1b6fce +long
{
    esp -= 4;
    goto loc_1b6fce;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 3820 bytes
loc_1b6fce: // 0160:1b6fce
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001efbb3;
    sub_1b60d3();
    esi = 0x001efbb9;
    sub_1b60d3();
    sub_1b6f9d();
    esi = 0x001efb65;
    sub_1b60d3();
    esi = 0x001efb76;
    sub_1b60d3();
    esi = 0x001efb8a;
    sub_1b60d3();
    esi = 0x001efb9e;
    goto loc_1b60d3;
}
void sub_1b7018() // 0160:1b7018 +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b7021;
    ax += 0x0002;
loc_1b7021: // 0160:1b7021
    ax += 0x002c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b7033;
    ax -= 0x0008;
loc_1b7033: // 0160:1b7033
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 26529 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b703c() // 0160:1b703c +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b7045;
    ax += 0x0002;
loc_1b7045: // 0160:1b7045
    ax += 0x0094;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b7057;
    ax -= 0x0040;
loc_1b7057: // 0160:1b7057
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 26493 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b7060() // 0160:1b7060 +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b7069;
    ax += 0x0002;
loc_1b7069: // 0160:1b7069
    ax += 0x00bc;
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 26463 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b707e() // 0160:1b707e +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b7087;
    ax += 0x0002;
loc_1b7087: // 0160:1b7087
    ax += 0x00e4;
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 26433 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b709c() // 0160:1b709c +long
{
    esp -= 4;
    if (!bp)
        goto loc_1b70a5;
    ax += 0x0002;
loc_1b70a5: // 0160:1b70a5
    ax += 0x011c;
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 26403 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1b70ba() // 0160:1b70ba +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + cx);
    if ((short)memoryAGet16(ds, 0x20e82f) < 0)
        goto loc_1b70dd;
    ax = memoryAGet16(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e805) != ax)
        goto loc_1b70e9;
    memoryASet16(ds, 0x20e82f, 0x0000);
    goto loc_1b70e9;
loc_1b70dd: // 0160:1b70dd
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20e82f, ax);
loc_1b70e9: // 0160:1b70e9
    bp = 0x0000;
    ax = memoryAGet16(ds, 0x20ec3d);
    si = memoryAGet16(ds, 0x20eeb0);
    si &= 0x0007;
    si >>= 2;
    if (!si)
        goto loc_1b710a;
    ax--;
    bp = 0x0001;
loc_1b710a: // 0160:1b710a
    bx = memoryAGet16(ds, 0x20ec3f);
    si = memoryAGet16(ds, 0x20e82f);
    si <<= 3;
    bx += si;
    si <<= 2;
    bx += si;
    cx = memoryAGet16(ds, 0x20ceb1);
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1b7140() // 0160:1b7140 +long
{
    esp -= 4;
    goto loc_1b7140;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 4190 bytes
loc_1b7140: // 0160:1b7140
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ef879;
    sub_1be816();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001ef88b;
    sub_1b60d3();
    esi = 0x001ef8a4;
    sub_1b60d3();
    esi = 0x001ef8bd;
    sub_1b60d3();
    esi = 0x001ef8d6;
    sub_1b60d3();
    esi = 0x001ef8ef;
    sub_1b60d3();
    esi = 0x001ef908;
    sub_1b60d3();
    esi = 0x001ef921;
    sub_1b60d3();
    esi = 0x001ef93a;
    sub_1b60d3();
    esi = 0x001ef953;
    sub_1b60d3();
    esi = 0x001ef96c;
    sub_1b60d3();
    esi = 0x001ef985;
    sub_1b60d3();
    esi = 0x001ef99e;
    sub_1b60d3();
    esi = 0x001ef9b7;
    sub_1b60d3();
    esi = 0x001ef9d0;
    sub_1b60d3();
    esi = 0x001ef9e9;
    sub_1b60d3();
    esi = 0x001efa02;
    goto loc_1b60d3;
}
void sub_1b71fc() // 0160:1b71fc +long
{
    esp -= 4;
    goto loc_1b71fc;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 4378 bytes
loc_1b71fc: // 0160:1b71fc
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001efdc5;
    sub_1be816();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001efddc;
    sub_1b60d3();
    esi = 0x001efdfa;
    sub_1b60d3();
    esi = 0x001efe18;
    sub_1b60d3();
    esi = 0x001efe36;
    sub_1b60d3();
    esi = 0x001efe54;
    sub_1b60d3();
    esi = 0x001efe72;
    sub_1b60d3();
    esi = 0x001efe90;
    sub_1b60d3();
    esi = 0x001efeae;
    sub_1b60d3();
    esi = 0x001efecc;
    sub_1b60d3();
    esi = 0x001efeea;
    sub_1b60d3();
    esi = 0x001eff08;
    sub_1b60d3();
    esi = 0x001eff26;
    sub_1b60d3();
    esi = 0x001eff44;
    sub_1b60d3();
    esi = 0x001eff62;
    sub_1b60d3();
    esi = 0x001eff80;
    sub_1b60d3();
    esi = 0x001eff9e;
    goto loc_1b60d3;
}
void sub_1b72b8() // 0160:1b72b8 +long
{
    esp -= 4;
    goto loc_1b72b8;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 4566 bytes
loc_1b72b8: // 0160:1b72b8
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001f016e;
    sub_1be816();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001f018c;
    sub_1b60d3();
    esi = 0x001f01af;
    sub_1b60d3();
    esi = 0x001f01d2;
    sub_1b60d3();
    esi = 0x001f01f5;
    sub_1b60d3();
    esi = 0x001f0218;
    sub_1b60d3();
    esi = 0x001f023d;
    sub_1b60d3();
    esi = 0x001f0262;
    sub_1b60d3();
    esi = 0x001f0285;
    sub_1b60d3();
    esi = 0x001f02a8;
    sub_1b60d3();
    esi = 0x001f02cd;
    sub_1b60d3();
    esi = 0x001f02f2;
    sub_1b60d3();
    esi = 0x001f0317;
    goto loc_1b60d3;
}
void sub_1b734c() // 0160:1b734c +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001f18f2;
    sub_1be816();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001f1909;
    sub_1be816();
    sub_1b7445();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b7445();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1b73d4: // 0160:1b73d4
    sub_1b5096();
    sub_1b531f();
    bl = 0;
    if (memoryAGet(ds, 0x30b080) != 0x00)
        goto loc_1b743e;
    bl = 0x01;
    if (memoryAGet(ds, 0x30b089) != 0x00)
        goto loc_1b743e;
    al = memoryAGet(ds, 0x1f1c54);
loc_1b73f9: // 0160:1b73f9
    sync();
    if (al == memoryAGet(ds, 0x1f1c54))
        goto loc_1b73f9;
    bx = 0x4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1b7417;
    bx = 0;
loc_1b7417: // 0160:1b7417
    memoryASet16(ds, 0x2231c4, bx);
    memoryASet16(ds, 0x1f1cb8, bx);
    dx = 0x03d4;
    bx = memoryAGet16(ds, 0x1f1cb8);
    ah = bh;
    al = 0x0c;
    out16(dx, ax);
    al++;
    ah = bl;
    out16(dx, ax);
    goto loc_1b73d4;
loc_1b743e: // 0160:1b743e
    memoryASet(ds, 0x1f1cbf, bl);
    esp += 4;
}
void sub_1b7445() // 0160:1b7445 +long
{
    esp -= 4;
    goto loc_1b7445;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 4963 bytes
loc_1b7445: // 0160:1b7445
    esi = 0x001f1920;
    sub_1be816();
    esi = 0x001f1933;
    sub_1b60d3();
    esi = 0x001f195b;
    sub_1b60d3();
    esi = 0x001f1983;
    sub_1b60d3();
    esi = 0x001f19a5;
    goto loc_1b60d3;
}
void sub_1b7477() // 0160:1b7477 +long
{
    esp -= 4;
    goto loc_1b7477;
loc_1b63c9: // 0160:1b63c9
    memoryASet16(ds, 0x20eead, 0x0001);
    esp += 4;
    return;
    // gap 4260 bytes
loc_1b7477: // 0160:1b7477
    edx = 0x001f19c6;
    eax = 0x0023f52c;
    memoryASet32(ds, 0x20ce9d, eax);
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b7608;
    push32(eax);
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b7608;
    edx <<= 16;
    dx = ax;
    ebx = pop32();
    push32(ebx);
    push32(edx);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b7608;
    eax = memoryAGet32(ds, 0x20ce9d);
    ecx = pop32();
    ebx = pop32();
    edx = eax;
    push32(edx);
    push32(ecx);
    push32(ebx);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b7608;
    ebx = pop32();
    eax = 0x00003e00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b7608;
    ecx = pop32();
    edx = pop32();
loc_1b74ea: // 0160:1b74ea
    al = memoryAGet(ds, edx);
    if (al == 0x0d)
        goto loc_1b7527;
    if (al == 0x65)
        goto loc_1b7501;
    if (al == 0x45)
        goto loc_1b7501;
    edx++;
    ecx--;
    if (ecx)
        goto loc_1b74ea;
    goto loc_1b7608;
loc_1b7501: // 0160:1b7501
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al == 0x6d)
        goto loc_1b7513;
    if (al != 0x4d)
        goto loc_1b74ea;
loc_1b7513: // 0160:1b7513
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al == 0x6d)
        goto loc_1b7578;
    if (al == 0x4d)
        goto loc_1b7578;
    goto loc_1b74ea;
loc_1b7527: // 0160:1b7527
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al == 0x0a)
        goto loc_1b7527;
    if (al == 0x20)
        goto loc_1b7527;
    if (al == 0x72)
        goto loc_1b7541;
    if (al != 0x52)
        goto loc_1b74ea;
loc_1b7541: // 0160:1b7541
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al == 0x65)
        goto loc_1b7553;
    if (al != 0x45)
        goto loc_1b74ea;
loc_1b7553: // 0160:1b7553
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al == 0x6d)
        goto loc_1b7565;
    if (al != 0x4d)
        goto loc_1b74ea;
loc_1b7565: // 0160:1b7565
    edx++;
    ecx--;
    if (!ecx)
        goto loc_1b7608;
    al = memoryAGet(ds, edx);
    if (al != 0x0d)
        goto loc_1b7565;
    goto loc_1b74ea;
loc_1b7578: // 0160:1b7578
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5998();
    edx = 0x001ecc30;
    sub_1bd899();
    sub_1b7609();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b7609();
    memoryASet16(ds, 0x2231c4, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1b4f0e();
loc_1b75c5: // 0160:1b75c5
    sub_1b5096();
    sub_1b531f();
    esi = 0x001f19d2;
    al = 0xc0;
    bl = 0x4f;
    sub_1b60a7();
    if (memoryAGet(ds, 0x30b071) != 0x00)
        goto loc_1b63c9;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b75fc;
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (al)
        goto loc_1b7608;
loc_1b75fc: // 0160:1b75fc
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b75c5;
loc_1b7608: // 0160:1b7608
    esp += 4;
    return;
}
void sub_1b7609() // 0160:1b7609 +long
{
    esp -= 4;
    goto loc_1b7609;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 5415 bytes
loc_1b7609: // 0160:1b7609
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001f19e0;
    sub_1be816();
    esi = 0x001f1a01;
    sub_1be816();
    esi = 0x001f1a26;
    sub_1be816();
    esi = 0x001f1a4e;
    sub_1be816();
    esi = 0x001f1a6b;
    sub_1be816();
    esi = 0x001f1a91;
    sub_1be816();
    esi = 0x001f1aba;
    sub_1be816();
    esi = 0x001f1ae1;
    sub_1be816();
    esi = 0x001f1b08;
    sub_1be816();
    esi = 0x001f1b2b;
    sub_1be816();
    esi = 0x001f1b51;
    goto loc_1b60d3;
}
void sub_1b7680() // 0160:1b7680 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b77c2();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b77c2();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
    memoryASet16(ds, 0x20ce9d, 0x0000);
loc_1b76eb: // 0160:1b76eb
    sub_1b5096();
    sub_1b531f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b77b2;
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (al)
        goto loc_1b77b2;
    ax = memoryAGet16(ds, 0x20ce9d);
    memoryASet16(ds, 0x20ce9d, memoryAGet16(ds, 0x20ce9d) + 1);
    if (!ax)
        goto loc_1b778c;
    if (ax == 0x0001)
        goto loc_1b7764;
    if (ax == 0x0002)
        goto loc_1b773c;
    al = memoryAGet(ds, 0x1f1cc6);
    memoryASet(ds, 0x20eea4, al);
    goto loc_1b77c1;
loc_1b773c: // 0160:1b773c
    al = memoryAGet(ds, 0x1f1cc6);
    memoryASet(ds, 0x20eea3, al);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b7808();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b7808();
    goto loc_1b77b2;
loc_1b7764: // 0160:1b7764
    al = memoryAGet(ds, 0x1f1cc4);
    memoryASet(ds, 0x20eea2, al);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b77f4();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b77f4();
    goto loc_1b77b2;
loc_1b778c: // 0160:1b778c
    al = memoryAGet(ds, 0x1f1cc4);
    memoryASet(ds, 0x20eea1, al);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b77e0();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b77e0();
loc_1b77b2: // 0160:1b77b2
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b76eb;
loc_1b77c1: // 0160:1b77c1
    esp += 4;
    return;
}
void sub_1b77c2() // 0160:1b77c2 +long
{
    esp -= 4;
    goto loc_1b77c2;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 5856 bytes
loc_1b77c2: // 0160:1b77c2
    esi = 0x001f1b78;
    sub_1be816();
    esi = 0x001f1b90;
    sub_1b60d3();
    esi = 0x001f1c0f;
    goto loc_1b60d3;
}
void sub_1b77e0() // 0160:1b77e0 +long
{
    esp -= 4;
    esi = 0x001f1baf;
    sub_1be816();
    esi = 0x001f1c0f;
    goto loc_1be816;
    // gap 28706 bytes
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b77f4() // 0160:1b77f4 +long
{
    esp -= 4;
    goto loc_1b77f4;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 5906 bytes
loc_1b77f4: // 0160:1b77f4
    esi = 0x001f1bcf;
    sub_1b60d3();
    esi = 0x001f1c0f;
    goto loc_1b60d3;
}
void sub_1b7808() // 0160:1b7808 +long
{
    esp -= 4;
    esi = 0x001f1bef;
    sub_1be816();
    esi = 0x001f1c0f;
    goto loc_1be816;
    // gap 28666 bytes
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b781c() // 0160:1b781c +long
{
    esp -= 4;
    goto loc_1b781c;
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 3123 bytes
loc_1b781c: // 0160:1b781c
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b7a6e();
    sub_1b5998();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00e7);
    memoryASet16(ds, 0x20ec3f, 0x00ed);
    sub_1b4f0e();
    sub_1b3af9();
loc_1b788b: // 0160:1b788b
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b78ac;
    esp += 4;
    return;
loc_1b78ac: // 0160:1b78ac
    esi = 0x001ef00d;
    al = 0xc2;
    bl = 0xc8;
    sub_1b60a7();
    sub_1b7945();
    sub_1b4941();
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + cx);
    if ((short)memoryAGet16(ds, 0x20e82f) < 0)
        goto loc_1b78e2;
    if (memoryAGet16(ds, 0x20e82f) != 0x000d)
        goto loc_1b78eb;
    memoryASet16(ds, 0x20e82f, 0x0000);
    goto loc_1b78eb;
loc_1b78e2: // 0160:1b78e2
    memoryASet16(ds, 0x20e82f, 0x000c);
loc_1b78eb: // 0160:1b78eb
    ebp = 0;
    ax = memoryAGet16(ds, 0x20ec3d);
    si = memoryAGet16(ds, 0x20eeb0);
    si &= 0x0007;
    si >>= 2;
    if (!si)
        goto loc_1b790a;
    ax--;
    bp = 0x0001;
loc_1b790a: // 0160:1b790a
    bx = memoryAGet16(ds, 0x20ec3f);
    si = memoryAGet16(ds, 0x20e82f);
    si <<= 3;
    bx += si;
    ecx = 0;
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    sub_1b4b7d();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b788b;
}
void sub_1b7945() // 0160:1b7945 +long
{
    esp -= 4;
    ecx = 0x0000000e;
    esi = 0x001ef029;
    edi = 0x0020ea5b;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20e905, 0x0000);
    eax = 0x0000000d;
    ebx = 0;
    bl = 0x04;
loc_1b7968: // 0160:1b7968
    push32(eax);
    push32(ebx);
    dl = bl;
    esi = 0x0020ea5f;
    ecx = 0;
loc_1b7973: // 0160:1b7973
    if ((char)bl < (char)0x0a)
        goto loc_1b797f;
    cl++;
    bl -= 0x0a;
    goto loc_1b7973;
loc_1b797f: // 0160:1b797f
    if (!cl)
        goto loc_1b7989;
    cl += 0x30;
    memoryASet(ds, esi, cl);
    esi++;
loc_1b7989: // 0160:1b7989
    bl += 0x30;
    memoryASet(ds, esi, bl);
    memoryASet16(ds, 0x20e90f, 0x0000);
    eax = 0;
    al = dl;
    ax -= 0x0004;
    if (ax != memoryAGet16(ds, 0x20e82f))
        goto loc_1b79b1;
    memoryASet16(ds, 0x20e90f, 0x0001);
loc_1b79b1: // 0160:1b79b1
    esi = 0x0020ea5b;
    sub_1b79d3();
    flags.carry = (memoryAGet(ds, 0x20ea5c) + 0x40) >= 0x100;
    memoryASet(ds, 0x20ea5c, memoryAGet(ds, 0x20ea5c) + 0x40);
    if (!flags.carry)
        goto loc_1b79cb;
    memoryASet(ds, 0x20ea5b, memoryAGet(ds, 0x20ea5b) + 0x01);
loc_1b79cb: // 0160:1b79cb
    ebx = pop32();
    eax = pop32();
    bl++;
    eax--;
    if (eax)
        goto loc_1b7968;
    esp += 4;
}
void sub_1b79d3() // 0160:1b79d3 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20e90f) & 0xffff)
        goto loc_1b7a40;
    ax = memoryAGet16(ds, 0x20e82f);
    ax += 0x0003;
    if (ax != 0x0003)
        goto loc_1b79f2;
    ax = 0x0010;
loc_1b79f2: // 0160:1b79f2
    if (al == dl)
        goto loc_1b7a0e;
    ax = memoryAGet16(ds, 0x20e82f);
    ax += 0x0005;
    if (ax != 0x0011)
        goto loc_1b7a0a;
    ax = 0x0004;
loc_1b7a0a: // 0160:1b7a0a
    if (al != dl)
        goto loc_1b7a6d;
loc_1b7a0e: // 0160:1b7a0e
    push32(memoryAGet32(ds, 0x2231c4));
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b60d3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea5b;
    sub_1b60d3();
    memoryASet32(ds, 0x2231c4, pop32());
    goto loc_1b7a6d;
    // gap 3 bytes
loc_1b7a40: // 0160:1b7a40
    push32(memoryAGet32(ds, 0x2231c4));
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1be816();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea5b;
    sub_1be816();
    memoryASet32(ds, 0x2231c4, pop32());
loc_1b7a6d: // 0160:1b7a6d
    esp += 4;
    return;
}
void sub_1b7a6e() // 0160:1b7a6e +long
{
    esp -= 4;
    ecx = 0x0000000e;
    esi = 0x001ef029;
    edi = 0x0020ea5b;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20e905, 0x0000);
    eax = 0x0000000d;
    ebx = 0;
    bl = 0x04;
loc_1b7a91: // 0160:1b7a91
    push32(eax);
    push32(ebx);
    esi = 0x0020ea5f;
    ecx = 0;
loc_1b7a9a: // 0160:1b7a9a
    if ((char)bl < (char)0x0a)
        goto loc_1b7aa6;
    cl++;
    bl -= 0x0a;
    goto loc_1b7a9a;
loc_1b7aa6: // 0160:1b7aa6
    if (!cl)
        goto loc_1b7ab0;
    cl += 0x30;
    memoryASet(ds, esi, cl);
    esi++;
loc_1b7ab0: // 0160:1b7ab0
    bl += 0x30;
    memoryASet(ds, esi, bl);
    sub_1b7af3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b7af3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1b7af3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    flags.carry = (memoryAGet(ds, 0x20ea5c) + 0x40) >= 0x100;
    memoryASet(ds, 0x20ea5c, memoryAGet(ds, 0x20ea5c) + 0x40);
    if (!flags.carry)
        goto loc_1b7aeb;
    memoryASet(ds, 0x20ea5b, memoryAGet(ds, 0x20ea5b) + 0x01);
loc_1b7aeb: // 0160:1b7aeb
    ebx = pop32();
    eax = pop32();
    bl++;
    eax--;
    if (eax)
        goto loc_1b7a91;
    esp += 4;
}
void sub_1b7af3() // 0160:1b7af3 +long
{
    esp -= 4;
    goto loc_1b7af3;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 6673 bytes
loc_1b7af3: // 0160:1b7af3
    esi = 0x0020ea5b;
    goto loc_1b60d3;
}
void sub_1b7afd() // 0160:1b7afd +long
{
    esp -= 4;
    goto loc_1b7afd;
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 3860 bytes
loc_1b7afd: // 0160:1b7afd
    memoryASet16(ds, 0x20ecd5, 0x0000);
    esi = 0x0020ece3;
loc_1b7b0b: // 0160:1b7b0b
    edi = 0x0020e8c1;
    sub_1b1c22();
    al &= 0x0f;
    bp = memoryAGet16(ds, 0x20ecd7);
loc_1b7b1e: // 0160:1b7b1e
    if (ax == memoryAGet16(ds, edi))
        goto loc_1b7b2c;
    edi += 0x00000002;
    bp--;
    if (bp)
        goto loc_1b7b1e;
    goto loc_1b7b0b;
loc_1b7b2c: // 0160:1b7b2c
    edx = 0x0020ece3;
    bp = memoryAGet16(ds, 0x20ecd7);
loc_1b7b38: // 0160:1b7b38
    if (ax == memoryAGet16(ds, edx))
        goto loc_1b7b0b;
    edx += 0x00000002;
    bp--;
    if (bp)
        goto loc_1b7b38;
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    memoryASet16(ds, 0x20ecd5, memoryAGet16(ds, 0x20ecd5) + 1);
    ax = memoryAGet16(ds, 0x20ecd7);
    if (ax != memoryAGet16(ds, 0x20ecd5))
        goto loc_1b7b0b;
    sub_1b81c4();
    memoryASet16(ds, 0x20ecdd, bx);
    edx = 0x0020ece3;
loc_1b7b71: // 0160:1b7b71
    bx = memoryAGet16(ds, edi);
    edi += 0x00000002;
    bx <<= 1;
    ebx &= 0x0000ffff;
    bp = memoryAGet16(ds, edx + ebx);
    memoryASet16(ds, esi, bp);
    esi += 0x00000002;
    eax--;
    if (eax)
        goto loc_1b7b71;
    if (memoryAGet16(ds, 0x20ecd9) == 0x0002)
        goto loc_1b7bc4;
    sub_1b81c4();
    ebx = 0;
    ax >>= 1;
    esi += 0x00000002;
loc_1b7ba4: // 0160:1b7ba4
    if (memoryAGet16(ds, esi) != 0x00ff)
        goto loc_1b7bbb;
    cx = memoryAGet16(ds, esi + -2);
    push32(esi);
    esi = memoryAGet32(ds, 0x20e819);
    memoryASet16(ds, esi + ebx, cx);
    esi = pop32();
loc_1b7bbb: // 0160:1b7bbb
    ebx += 0x00000002;
    esi += 0x00000004;
    eax--;
    if (eax)
        goto loc_1b7ba4;
loc_1b7bc4: // 0160:1b7bc4
    memoryASet16(ds, 0x20ed51, 0x0001);
    memoryASet16(ds, 0x20edf3, 0x0000);
loc_1b7bd6: // 0160:1b7bd6
    memoryASet16(ds, 0x20ecdf, 0x0000);
loc_1b7bdf: // 0160:1b7bdf
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    if (memoryAGet16(ds, 0x20edf3) & 0xffff)
        goto loc_1b7c49;
    ax = memoryAGet16(ds, 0x20d8ab);
    push32(eax);
    memoryASet16(ds, 0x20d8ab, 0x0000);
    memoryASet16(ds, 0x20ec8f, 0x0000);
    sub_1abb6f();
    eax = pop32();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1b6be8;
    memoryASet16(ds, 0x20d8ab, ax);
    memoryASet16(ds, 0x20edf3, 0x0001);
loc_1b7c49: // 0160:1b7c49
    esi = 0x0020ed03;
    edi = 0x0020ed23;
    memoryASet16(ds, 0x20ece1, 0x0008);
    if (!(memoryAGet16(ds, 0x20ecd9) & 0xffff))
        goto loc_1b7cb4;
    esi = 0x0020ed23;
    edi = 0x0020ed33;
    memoryASet16(ds, 0x20ece1, 0x0004);
    if (memoryAGet16(ds, 0x20ecd9) == 0x0001)
        goto loc_1b7cb4;
    esi = 0x0020ed33;
    edi = 0x0020ed3b;
    memoryASet16(ds, 0x20ece1, 0x0002);
    if (memoryAGet16(ds, 0x20ecd9) == 0x0002)
        goto loc_1b7cb4;
    esi = 0x0020ed3b;
    edi = 0x0020ed3f;
    memoryASet16(ds, 0x20ece1, 0x0001);
loc_1b7cb4: // 0160:1b7cb4
    ax = memoryAGet16(ds, 0x20ecdf);
    eax &= 0x0000ffff;
    if (memoryAGet16(ds, esi + eax + 2) == 0x00ff)
        goto loc_1b7d5e;
    bp = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20e8e1, bp);
    bp = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20e8e7, bp);
    memoryASet16(ds, 0x20e90d, 0x0002);
    push32(esi);
    push32(edi);
    sub_1b7dc1();
    sub_1ba9f5();
    memoryASet16(ds, 0x20d8ab, 0x0004);
    memoryASet16(ds, 0x20d7f5, 0x0002);
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) == 0x0000)
        goto loc_1b7d24;
    edi = pop32();
    esi = pop32();
    goto loc_1b6be8;
loc_1b7d24: // 0160:1b7d24
    ax = memoryAGet16(ds, 0x20e8e1);
    if (memoryAGet16(ds, 0x20d7b7) == 0x0001)
        goto loc_1b7d3a;
    ax = memoryAGet16(ds, 0x20e8e7);
loc_1b7d3a: // 0160:1b7d3a
    edi = pop32();
    esi = pop32();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1b6be8;
    bx = memoryAGet16(ds, 0x20ecdf);
    bx >>= 1;
    ebx &= 0x0000ffff;
    memoryASet16(ds, edi + ebx, ax);
loc_1b7d5e: // 0160:1b7d5e
    memoryASet16(ds, 0x20ecdf, memoryAGet16(ds, 0x20ecdf) + 0x0004);
    ax = memoryAGet16(ds, 0x20ecdf);
    ax >>= 2;
    if (ax != memoryAGet16(ds, 0x20ece1))
        goto loc_1b7bdf;
    memoryASet16(ds, 0x20edf3, 0x0000);
    memoryASet16(ds, 0x20ed51, memoryAGet16(ds, 0x20ed51) + 1);
    memoryASet16(ds, 0x20ecd9, memoryAGet16(ds, 0x20ecd9) + 1);
    if (memoryAGet16(ds, 0x20ecd9) != 0x0004)
        goto loc_1b7bd6;
    sub_1b7dc1();
    ax = memoryAGet16(ds, 0x20ed3f);
    memoryASet16(ds, 0x20e9c1, ax);
    memoryASet16(ds, 0x20e9c3, 0x0003);
    goto loc_1b9ca1;
    // gap 7904 bytes
loc_1b9ca1: // 0160:1b9ca1
    sub_1b191a();
    al = 0x81;
    sub_1b18a6();
    sub_1b4bc9();
    sub_1bd3c8();
    sub_1b56fa();
    sub_1bd478();
    edx = 0x001ece20;
    edi = 0x000a0000;
    sub_1b5205();
    edi = 0x000a4800;
    sub_1b521d();
    edi = 0x000a9000;
    sub_1b521d();
    edx = 0x001ece32;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    esi = 0x0020e9c1;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    memoryASet16(ds, 0x20ceb7, 0x00c8);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e9c5, 0x0000);
    ax = memoryAGet16(ds, 0x20e9c3);
    ax <<= 1;
    esi = 0x001ef2c8;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20e9c7, ax);
    memoryASet16(ds, 0x20e887, 0x0000);
    if (!(memoryAGet16(ds, 0x20e9c3) & 0xffff))
        goto loc_1b9d83;
    memoryASet16(ds, 0x20e887, 0x0005);
    if (memoryAGet16(ds, 0x20e9c3) == 0x0001)
        goto loc_1b9d83;
    memoryASet16(ds, 0x20e887, 0x0008);
loc_1b9d83: // 0160:1b9d83
    sub_1b4f0e();
loc_1b9d88: // 0160:1b9d88
    sub_1b5096();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1b9da0;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
loc_1b9da0: // 0160:1b9da0
    sub_1b9dce();
    if ((short)memoryAGet16(ds, 0x20e887) <= (short)0x0028)
        goto loc_1b9dc2;
    if (memoryAGet(ds, 0x20c840) != 0x80)
        goto loc_1b9dc2;
    if (memoryAGet(ds, 0x20e837) == 0x80)
        goto loc_1b9dc2;
    esp += 4;
    return;
loc_1b9dc2: // 0160:1b9dc2
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b9d88;
}
void sub_1b7dc1() // 0160:1b7dc1 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1bd3c8();
    sub_1b59bc();
    edx = 0x001ed07a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    edx = 0x001ed019;
    sub_1bd87e();
    sub_1b4f0e();
    memoryASet16(ds, 0x20d8ab, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b7e27: // 0160:1b7e27
    sub_1b5096();
    sub_1b7e59();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b7e48;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b7e48;
    esp += 4;
    return;
loc_1b7e48: // 0160:1b7e48
    sub_1b8075();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b7e27;
}
void sub_1b7e59() // 0160:1b7e59 +long
{
    esp -= 4;
    esi = 0x0020ed03;
    if (!(memoryAGet16(ds, 0x20ecd9) & 0xffff))
        goto loc_1b7e8c;
    esi = 0x0020ed23;
    if (memoryAGet16(ds, 0x20ecd9) == 0x0001)
        goto loc_1b7e8c;
    esi = 0x0020ed33;
    if (memoryAGet16(ds, 0x20ecd9) == 0x0002)
        goto loc_1b7e8c;
    esi = 0x0020ed3b;
loc_1b7e8c: // 0160:1b7e8c
    ax = memoryAGet16(ds, 0x20ecdf);
    eax &= 0x0000ffff;
    if (memoryAGet16(ds, esi + eax + 2) == 0x00ff)
        goto loc_1b7eb7;
    bp = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ed43, bp);
    bp = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20ed45, bp);
loc_1b7eb7: // 0160:1b7eb7
    esi = 0x001ef4ea;
    ecx = 0x0020ed03;
    memoryASet16(ds, 0x20ecdb, 0x0000);
    memoryASet16(ds, 0x20e887, 0x0000);
    eax = 0x00000010;
    sub_1b7f70();
    esi = 0x001ef50a;
    ecx = 0x0020ed23;
    memoryASet16(ds, 0x20ecdb, 0x0001);
    memoryASet16(ds, 0x20e887, 0x0000);
    eax = 0x00000008;
    sub_1b7f70();
    esi = 0x001ef51a;
    ecx = 0x0020ed33;
    memoryASet16(ds, 0x20ecdb, 0x0002);
    memoryASet16(ds, 0x20e887, 0x0000);
    eax = 0x00000004;
    sub_1b7f70();
    esi = 0x001ef522;
    ecx = 0x0020ed3b;
    memoryASet16(ds, 0x20ecdb, 0x0003);
    memoryASet16(ds, 0x20e887, 0x0000);
    eax = 0x00000002;
    sub_1b7f70();
    esi = 0x001ef526;
    ecx = 0x0020ed3f;
    memoryASet16(ds, 0x20ecdb, 0x0004);
    memoryASet16(ds, 0x20e887, 0x0000);
    eax = 0x00000001;
loc_1b7f70: // 0160:1b7f70
    push32(eax);
    edx = 0x0020ea5b;
    ax = memoryAGet16(ds, 0x20e887);
    ax <<= 1;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edx, bl);
    bl = memoryAGet(ds, esi + eax + 1);
    memoryASet(ds, edx + 1, bl);
    memoryASet(ds, edx + 2, 0xf0);
    memoryASet(ds, edx + 3, 0x06);
    edx += 0x00000004;
    ax = memoryAGet16(ds, ecx);
    ecx += 0x00000002;
    memoryASet16(ds, 0x20ed47, ax);
    if (ax != 0x00ff)
        goto loc_1b7fc9;
    edi = 0x001ef4e4;
    bx = memoryAGet16(ds, 0x20ecdb);
    if ((short)bx <= (short)memoryAGet16(ds, 0x20ecd9))
        goto loc_1b7fe1;
    edi = 0x001ef4de;
    goto loc_1b7fe1;
loc_1b7fc9: // 0160:1b7fc9
    edi = 0x00224866;
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    edi += eax;
loc_1b7fe1: // 0160:1b7fe1
    ebx = 0x00000003;
loc_1b7fe6: // 0160:1b7fe6
    bp = memoryAGet16(ds, edi);
    memoryASet16(ds, edx, bp);
    edi += 0x00000002;
    edx += 0x00000002;
    ebx--;
    if (ebx)
        goto loc_1b7fe6;
    push32(esi);
    push32(edi);
    push32(ecx);
    push32(edx);
    memoryASet16(ds, 0x20e905, 0x0000);
    ax = memoryAGet16(ds, 0x20ecd9);
    if (ax != memoryAGet16(ds, 0x20ecdb))
        goto loc_1b804d;
    ax = memoryAGet16(ds, 0x20ed47);
    if (ax == memoryAGet16(ds, 0x20ed43))
        goto loc_1b8029;
    if (ax != memoryAGet16(ds, 0x20ed45))
        goto loc_1b804d;
loc_1b8029: // 0160:1b8029
    memoryASet16(ds, 0x20e90f, 0x0002);
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x001f;
    ax >>= 4;
    if (!ax)
        goto loc_1b8056;
    memoryASet16(ds, 0x20e90f, 0x0001);
    goto loc_1b8056;
loc_1b804d: // 0160:1b804d
    memoryASet16(ds, 0x20e90f, 0x0000);
loc_1b8056: // 0160:1b8056
    esi = 0x0020ea5b;
    sub_1b818f();
    edx = pop32();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    eax = pop32();
    ax--;
    if (ax)
        goto loc_1b7f70;
    esp += 4;
}
void sub_1b7f70() // 0160:1b7f70 +long
{
    esp -= 4;
loc_1b7f70: // 0160:1b7f70
    push32(eax);
    edx = 0x0020ea5b;
    ax = memoryAGet16(ds, 0x20e887);
    ax <<= 1;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edx, bl);
    bl = memoryAGet(ds, esi + eax + 1);
    memoryASet(ds, edx + 1, bl);
    memoryASet(ds, edx + 2, 0xf0);
    memoryASet(ds, edx + 3, 0x06);
    edx += 0x00000004;
    ax = memoryAGet16(ds, ecx);
    ecx += 0x00000002;
    memoryASet16(ds, 0x20ed47, ax);
    if (ax != 0x00ff)
        goto loc_1b7fc9;
    edi = 0x001ef4e4;
    bx = memoryAGet16(ds, 0x20ecdb);
    if ((short)bx <= (short)memoryAGet16(ds, 0x20ecd9))
        goto loc_1b7fe1;
    edi = 0x001ef4de;
    goto loc_1b7fe1;
loc_1b7fc9: // 0160:1b7fc9
    edi = 0x00224866;
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    edi += eax;
loc_1b7fe1: // 0160:1b7fe1
    ebx = 0x00000003;
loc_1b7fe6: // 0160:1b7fe6
    bp = memoryAGet16(ds, edi);
    memoryASet16(ds, edx, bp);
    edi += 0x00000002;
    edx += 0x00000002;
    ebx--;
    if (ebx)
        goto loc_1b7fe6;
    push32(esi);
    push32(edi);
    push32(ecx);
    push32(edx);
    memoryASet16(ds, 0x20e905, 0x0000);
    ax = memoryAGet16(ds, 0x20ecd9);
    if (ax != memoryAGet16(ds, 0x20ecdb))
        goto loc_1b804d;
    ax = memoryAGet16(ds, 0x20ed47);
    if (ax == memoryAGet16(ds, 0x20ed43))
        goto loc_1b8029;
    if (ax != memoryAGet16(ds, 0x20ed45))
        goto loc_1b804d;
loc_1b8029: // 0160:1b8029
    memoryASet16(ds, 0x20e90f, 0x0002);
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x001f;
    ax >>= 4;
    if (!ax)
        goto loc_1b8056;
    memoryASet16(ds, 0x20e90f, 0x0001);
    goto loc_1b8056;
loc_1b804d: // 0160:1b804d
    memoryASet16(ds, 0x20e90f, 0x0000);
loc_1b8056: // 0160:1b8056
    esi = 0x0020ea5b;
    sub_1b818f();
    edx = pop32();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    eax = pop32();
    ax--;
    if (ax)
        goto loc_1b7f70;
    esp += 4;
}
void sub_1b8075() // 0160:1b8075 +long
{
    esp -= 4;
    ax = 0x0148;
    bx = 0x0128;
    ecx = 0;
    dx = 0x0004;
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    bx += 0x0020;
    ax += 0x0028;
    dx = 0x0004;
    cx = 0x0001;
    sub_1bd7dd();
    ax = 0x0158;
    bx = 0x0088;
    cx = 0x0005;
    dx = 0x0004;
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    bx += 0x0010;
    ax += 0x0004;
    dx = 0x0004;
    cx = 0x0006;
    sub_1bd7dd();
    ebp = 0x00000008;
    memoryASet16(ds, 0x20e887, 0x0002);
    memoryASet16(ds, 0x20cec1, 0x00c0);
    memoryASet16(ds, 0x20cec3, 0x0003);
    memoryASet16(ds, 0x20cec5, 0x0007);
    sub_1b8154();
    ebp = 0x00000004;
    memoryASet16(ds, 0x20e887, 0x0003);
    memoryASet16(ds, 0x20cec1, 0x0100);
    memoryASet16(ds, 0x20cec3, 0x0006);
    memoryASet16(ds, 0x20cec5, 0x0008);
    sub_1b8154();
    ebp = 0x00000002;
    memoryASet16(ds, 0x20e887, 0x0004);
    memoryASet16(ds, 0x20cec1, 0x0140);
    memoryASet16(ds, 0x20cec3, 0x000c);
    memoryASet16(ds, 0x20cec5, 0x0009);
loc_1b8154: // 0160:1b8154
    ax = memoryAGet16(ds, 0x20cec1);
    bx = 0x0080;
    dx = memoryAGet16(ds, 0x20e887);
    dx <<= 3;
    bx += dx;
    cx = memoryAGet16(ds, 0x20cec5);
    dx = 0x0004;
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ax = memoryAGet16(ds, 0x20cec3);
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + ax);
    ebp--;
    if (ebp)
        goto loc_1b8154;
    esp += 4;
}
void sub_1b8154() // 0160:1b8154 +long
{
    esp -= 4;
loc_1b8154: // 0160:1b8154
    ax = memoryAGet16(ds, 0x20cec1);
    bx = 0x0080;
    dx = memoryAGet16(ds, 0x20e887);
    dx <<= 3;
    bx += dx;
    cx = memoryAGet16(ds, 0x20cec5);
    dx = 0x0004;
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ax = memoryAGet16(ds, 0x20cec3);
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + ax);
    ebp--;
    if (ebp)
        goto loc_1b8154;
    esp += 4;
}
void sub_1b818f() // 0160:1b818f +long
{
    esp -= 4;
    goto loc_1b818f;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 8365 bytes
loc_1b818f: // 0160:1b818f
    if (!(memoryAGet16(ds, 0x20e90f) & 0xffff))
        goto loc_1b81ad;
    if (memoryAGet16(ds, 0x20e90f) == 0x0001)
        goto loc_1b60d3;
    goto loc_1be816;
loc_1b81ad: // 0160:1b81ad
    if (memoryAGet16(ds, 0x2231d4) == 0x003f)
        goto loc_1b81c3;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    goto loc_1b60d3;
loc_1b81c3: // 0160:1b81c3
    esp += 4;
    return;
    // gap 26194 bytes
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1b81c4() // 0160:1b81c4 +long
{
    esp -= 4;
    esi = 0x0020ed03;
    eax = 0x0020ed23;
    memoryASet32(ds, 0x20e819, eax);
    edi = 0x001ef4a6;
    memoryASet16(ds, 0x20ecd9, 0x0000);
    eax = 0x00000010;
    bx = 0x0200;
    if (memoryAGet16(ds, 0x20ecd7) > 0x0008)
        goto loc_1b8240;
    esi = 0x0020ed23;
    eax = 0x0020ed33;
    memoryASet32(ds, 0x20e819, eax);
    edi = 0x001ef4c6;
    memoryASet16(ds, 0x20ecd9, 0x0001);
    eax = 0x00000008;
    bx = 0x01c0;
    if (memoryAGet16(ds, 0x20ecd7) > 0x0004)
        goto loc_1b8240;
    esi = 0x0020ed33;
    edi = 0x001ef4d6;
    memoryASet16(ds, 0x20ecd9, 0x0002);
    eax = 0x00000004;
    bx = 0x0180;
loc_1b8240: // 0160:1b8240
    esp += 4;
    return;
}
void sub_1b8241() // 0160:1b8241 +long
{
    esp -= 4;
    goto loc_1b8241;
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 5720 bytes
loc_1b8241: // 0160:1b8241
    memoryASet16(ds, 0x20ec9d, 0x0000);
    memoryASet16(ds, 0x20eca9, 0x0000);
    ax = memoryAGet16(ds, 0x20d7b9);
    memoryASet16(ds, 0x20e995, ax);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b3af9();
    if (!(memoryAGet16(ds, 0x20ec9d) & 0xffff))
        goto loc_1b8285;
    sub_1b84d2();
    sub_1b4f0e();
    goto loc_1b82aa;
loc_1b8285: // 0160:1b8285
    memoryASet16(ds, 0x20eca3, 0x0090);
    memoryASet16(ds, 0x20eca5, 0x0148);
    memoryASet16(ds, 0x20eca7, 0x0200);
    sub_1b8511();
    sub_1b4f0e();
loc_1b82aa: // 0160:1b82aa
    sub_1b5096();
    if (memoryAGet16(ds, 0x20eca9) == 0x0000)
        goto loc_1b82c4;
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
loc_1b82c4: // 0160:1b82c4
    if (!(memoryAGet16(ds, 0x20ed7f) & 0xffff))
        goto loc_1b82e9;
    memoryASet16(ds, 0x20ed81, memoryAGet16(ds, 0x20ed81) - 1);
    if (!memoryAGet16(ds, 0x20ed81))
        goto loc_1b8358;
    if (memoryAGet(ds, 0x20c840) & 0xff)
        goto loc_1b8358;
loc_1b82e9: // 0160:1b82e9
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b830a;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b830a;
    memoryASet16(ds, 0x20ecab, 0x0000);
    goto loc_1b8358;
loc_1b830a: // 0160:1b830a
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1b8332;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b8332;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0xffff);
    goto loc_1b8358;
loc_1b8332: // 0160:1b8332
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1b8359;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b8359;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0x0001);
loc_1b8358: // 0160:1b8358
    esp += 4;
    return;
loc_1b8359: // 0160:1b8359
    sub_1b836d();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b82aa;
}
void sub_1b8253() // 0160:1b8253 +long
{
    esp -= 4;
    goto loc_1b8253;
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 5738 bytes
loc_1b8253: // 0160:1b8253
    ax = memoryAGet16(ds, 0x20d7b9);
    memoryASet16(ds, 0x20e995, ax);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b3af9();
    if (!(memoryAGet16(ds, 0x20ec9d) & 0xffff))
        goto loc_1b8285;
    sub_1b84d2();
    sub_1b4f0e();
    goto loc_1b82aa;
loc_1b8285: // 0160:1b8285
    memoryASet16(ds, 0x20eca3, 0x0090);
    memoryASet16(ds, 0x20eca5, 0x0148);
    memoryASet16(ds, 0x20eca7, 0x0200);
    sub_1b8511();
    sub_1b4f0e();
loc_1b82aa: // 0160:1b82aa
    sub_1b5096();
    if (memoryAGet16(ds, 0x20eca9) == 0x0000)
        goto loc_1b82c4;
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
loc_1b82c4: // 0160:1b82c4
    if (!(memoryAGet16(ds, 0x20ed7f) & 0xffff))
        goto loc_1b82e9;
    memoryASet16(ds, 0x20ed81, memoryAGet16(ds, 0x20ed81) - 1);
    if (!memoryAGet16(ds, 0x20ed81))
        goto loc_1b8358;
    if (memoryAGet(ds, 0x20c840) & 0xff)
        goto loc_1b8358;
loc_1b82e9: // 0160:1b82e9
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b830a;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b830a;
    memoryASet16(ds, 0x20ecab, 0x0000);
    goto loc_1b8358;
loc_1b830a: // 0160:1b830a
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1b8332;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b8332;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0xffff);
    goto loc_1b8358;
loc_1b8332: // 0160:1b8332
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1b8359;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b8359;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0x0001);
loc_1b8358: // 0160:1b8358
    esp += 4;
    return;
loc_1b8359: // 0160:1b8359
    sub_1b836d();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b82aa;
}
void sub_1b836d() // 0160:1b836d +long
{
    esp -= 4;
    esi = 0x001eed71;
    sub_1b60d3();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0040;
    if (!ax)
        goto loc_1b838a;
    sub_1b85c3();
    goto loc_1b83b1;
loc_1b838a: // 0160:1b838a
    esi = 0x0020196c;
    bx = memoryAGet16(ds, 0x20e995);
    eax = 0;
    ebx &= 0x0000ffff;
    al = memoryAGet(ds, esi + ebx);
    eax <<= 2;
    esi = 0x001eed85;
    esi = memoryAGet32(ds, esi + eax);
    sub_1b60d3();
loc_1b83b1: // 0160:1b83b1
    if (memoryAGet16(ds, 0x20eca9) & 0xffff)
        goto loc_1b8405;
    esi = 0x001ef434;
    dx = memoryAGet16(ds, 0x20e99d);
    dx <<= 2;
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + edx);
    bx = memoryAGet16(ds, esi + edx + 2);
    cx = 0;
    dx = 0x0004;
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    bx += 0x0020;
    ax += 0x0028;
    dx = 0x0004;
    cx = 0x0001;
    sub_1bd7dd();
    goto loc_1b84d1;
loc_1b8405: // 0160:1b8405
    ecx = 0x00000003;
    esi = 0x0020eca3;
loc_1b840f: // 0160:1b840f
    push32(ecx);
    ebp = 0x00000004;
    memoryASet16(ds, 0x20e887, 0x0000);
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0002);
    if (memoryAGet16(ds, esi) != 0xffd4)
        goto loc_1b8430;
    memoryASet16(ds, esi, 0x0200);
loc_1b8430: // 0160:1b8430
    esi += 0x00000002;
loc_1b8433: // 0160:1b8433
    bx = 0x0090;
    cx = memoryAGet16(ds, 0x20e887);
    dx = 0x0005;
    if ((short)ax <= (short)0x0068)
        goto loc_1b845d;
    if (ax >= 0x01c0)
        goto loc_1b845d;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1b845d: // 0160:1b845d
    ax += 0x0018;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    ebp--;
    if (ebp)
        goto loc_1b8433;
    ecx = pop32();
    if (--ecx)
        goto loc_1b840f;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x001c;
    ax >>= 1;
    esi = 0x001ef464;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    ax += 0x008c;
    bx = 0x00fa;
    cx = 0x0004;
    dx = 0x0001;
    sub_1bd7dd();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax += 0x0010;
    ax &= 0x001c;
    ax >>= 1;
    esi = 0x001ef464;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    ax += 0x01a4;
    bx = 0x00fa;
    cx = 0x0004;
    dx = 0;
    sub_1bd7dd();
loc_1b84d1: // 0160:1b84d1
    esp += 4;
    return;
}
void sub_1b84d2() // 0160:1b84d2 +long
{
    esp -= 4;
    sub_1b4bc9();
    goto loc_1b851b;
    // gap 66 bytes
loc_1b851b: // 0160:1b851b
    edx = 0x001ed019;
    sub_1bd87e();
    esi = 0x00201804;
    ax = memoryAGet16(ds, 0x20e995);
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    bl = memoryAGet(ds, esi + eax);
    cl = memoryAGet(ds, esi + eax + 1);
    memoryASet16(ds, 0x20e99d, cx);
    cl = memoryAGet(ds, esi + eax + 2);
    memoryASet16(ds, 0x20e99f, cx);
    cl = memoryAGet(ds, esi + eax + 3);
    memoryASet16(ds, 0x20e9a1, cx);
    esi = 0x001ec0ec;
    ebx <<= 2;
    edx = memoryAGet32(ds, esi + ebx);
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x224642, 0x0001);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esp += 4;
}
void sub_1b8511() // 0160:1b8511 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b583e();
    edx = 0x001ed019;
    sub_1bd87e();
    esi = 0x00201804;
    ax = memoryAGet16(ds, 0x20e995);
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    bl = memoryAGet(ds, esi + eax);
    cl = memoryAGet(ds, esi + eax + 1);
    memoryASet16(ds, 0x20e99d, cx);
    cl = memoryAGet(ds, esi + eax + 2);
    memoryASet16(ds, 0x20e99f, cx);
    cl = memoryAGet(ds, esi + eax + 3);
    memoryASet16(ds, 0x20e9a1, cx);
    esi = 0x001ec0ec;
    ebx <<= 2;
    edx = memoryAGet32(ds, esi + ebx);
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x224642, 0x0001);
    sub_1b85c3();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esp += 4;
}
void sub_1b85c3() // 0160:1b85c3 +long
{
    esp -= 4;
    goto loc_1b85c3;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 9441 bytes
loc_1b85c3: // 0160:1b85c3
    esi = 0x0020ea5b;
    if (memoryAGet16(ds, 0x20ed4d) != 0x0006)
        goto loc_1b85f0;
    edi = 0x0023c4e0;
    memoryASet(ds, esi, 0xc6);
    memoryASet(ds, esi + 1, 0x08);
    memoryASet(ds, esi + 2, 0xf0);
    memoryASet(ds, esi + 3, 0x10);
    esi += 0x00000004;
    ecx = 0x00000010;
    goto loc_1b862a;
loc_1b85f0: // 0160:1b85f0
    edi = 0x002084b8;
    cx = memoryAGet16(ds, 0x20e995);
    if (!cx)
        goto loc_1b8610;
    ebx = 0;
    ecx &= 0x0000ffff;
loc_1b8609: // 0160:1b8609
    bl = memoryAGet(ds, edi);
    edi++;
    edi += ebx;
    if (--ecx)
        goto loc_1b8609;
loc_1b8610: // 0160:1b8610
    memoryASet(ds, esi, 0xc6);
    memoryASet(ds, esi + 1, 0x02);
    memoryASet(ds, esi + 2, 0xf0);
    cl = memoryAGet(ds, edi);
    memoryASet(ds, esi + 3, cl);
    esi += 0x00000004;
    edi++;
    ecx &= 0x000000ff;
loc_1b862a: // 0160:1b862a
    etx = edi; edi = esi; esi = etx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20e905, 0x0002);
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1b865f;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1b86cb;
    if (memoryAGet16(ds, 0x20ed41) & 0xffff)
        goto loc_1b86cb;
loc_1b865f: // 0160:1b865f
    esi = 0x0020ea5b;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 0x02);
    ax = memoryAGet16(ds, 0x20ec8f);
    ax++;
    if ((short)ax < (short)0x000a)
        goto loc_1b8679;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
loc_1b8679: // 0160:1b8679
    sub_1b60d3();
    esi = 0x0020ea5b;
    memoryASet(ds, esi + 3, 0x02);
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) - 0x02);
    ax = memoryAGet16(ds, 0x20ec8f);
    ax++;
    if ((short)ax < (short)0x000a)
        goto loc_1b869f;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) - 1);
    memoryASet(ds, esi + 3, memoryAGet(ds, esi + 3) + 1);
loc_1b869f: // 0160:1b869f
    ebx = 0;
loc_1b86a1: // 0160:1b86a1
    if ((char)al < (char)0x0a)
        goto loc_1b86ad;
    bl++;
    ax -= 0x000a;
    goto loc_1b86a1;
loc_1b86ad: // 0160:1b86ad
    if (!bl)
        goto loc_1b86c2;
    bl += 0x30;
    memoryASet(ds, esi + 4, bl);
    al += 0x30;
    memoryASet(ds, esi + 5, al);
    memoryASet(ds, esi + 6, 0x20);
    goto loc_1b86cb;
loc_1b86c2: // 0160:1b86c2
    al += 0x30;
    memoryASet(ds, esi + 4, al);
    memoryASet(ds, esi + 5, 0x20);
loc_1b86cb: // 0160:1b86cb
    esi = 0x0020ea5b;
    sub_1b60d3();
    if (memoryAGet16(ds, 0x224642) & 0xffff)
        goto loc_1b8898;
    edi = 0x001eeca5;
    if (!(memoryAGet16(ds, 0x20ed4d) & 0xffff))
        goto loc_1b8788;
    edi = 0x001eecc6;
    if (memoryAGet16(ds, 0x20ed4d) == 0x0001)
        goto loc_1b87c6;
    edi = 0x001eecd1;
    if (memoryAGet16(ds, 0x20ed4d) == 0x0002)
        goto loc_1b87e3;
    if (memoryAGet16(ds, 0x20ed4d) == 0x0003)
        goto loc_1b880e;
    if (memoryAGet16(ds, 0x20ed4d) == 0x0004)
        goto loc_1b885a;
    if (memoryAGet16(ds, 0x20ed4d) == 0x0006)
        goto loc_1b8859;
    if (memoryAGet16(ds, 0x20ecd9) != 0x0003)
        goto loc_1b8768;
    edi = 0x001eecf4;
    sub_1b88a2();
    memoryASet(ds, 0x20ea5c, memoryAGet(ds, 0x20ea5c) + 0x04);
    goto loc_1b8885;
loc_1b8768: // 0160:1b8768
    edi = 0x001eece3;
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 0x02);
    ax = memoryAGet16(ds, 0x20ed51);
    ax += 0x0030;
    memoryASet(ds, esi + 19, al);
    goto loc_1b8885;
loc_1b8788: // 0160:1b8788
    bp = memoryAGet16(ds, 0x20d863);
    bp++;
    if (bp != 0x0019)
        goto loc_1b87aa;
    edi = 0x001eecb7;
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 0x04);
    goto loc_1b8885;
loc_1b87aa: // 0160:1b87aa
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
    edi = esi;
    edi += 0x00000013;
    edx = esi;
    edx += 0x00000014;
    sub_1b88cb();
    goto loc_1b8885;
loc_1b87c6: // 0160:1b87c6
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 0x08);
    edi = esi;
    edx = esi;
    edi += 0x0000000c;
    edx += 0x0000000d;
    sub_1b88cb();
    goto loc_1b8885;
loc_1b87e3: // 0160:1b87e3
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
    eax = 0;
    ax = memoryAGet16(ds, 0x20e913);
    ax += 0x0031;
    memoryASet(ds, esi + 13, al);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ed4f);
    ax += 0x0031;
    memoryASet(ds, esi + 20, al);
    goto loc_1b8885;
    // gap 3 bytes
loc_1b880e: // 0160:1b880e
    if ((short)memoryAGet16(ds, 0x20ec8f) <= (short)0x0003)
        goto loc_1b8840;
    edi = 0x001eeca5;
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
    edi = esi;
    edx = esi;
    edi += 0x00000013;
    edx += 0x00000014;
    ax = memoryAGet16(ds, 0x20ec8f);
    ax -= 0x0003;
    sub_1b88d3();
    goto loc_1b8857;
loc_1b8840: // 0160:1b8840
    sub_1b88a2();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ec8f);
    ax += 0x0031;
    memoryASet(ds, esi + 20, al);
loc_1b8857: // 0160:1b8857
    goto loc_1b8885;
loc_1b8859: // 0160:1b8859
    esp += 4;
    return;
loc_1b885a: // 0160:1b885a
    ax = memoryAGet16(ds, 0x20e9a1);
    ax <<= 2;
    ecx = 0x001eed03;
    eax &= 0x0000ffff;
    edi = memoryAGet32(ds, ecx + eax);
    eax = 0;
    al = memoryAGet(ds, edi);
    ebx = 0;
    bl = 0x12;
    bl -= al;
    push32(ebx);
    sub_1b88a2();
    ebx = pop32();
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + bl);
loc_1b8885: // 0160:1b8885
    esi = 0x0020ea5b;
    memoryASet16(ds, 0x20e905, 0x0002);
    goto loc_1b60d3;
loc_1b8898: // 0160:1b8898
    memoryASet16(ds, 0x224642, 0x0000);
    esp += 4;
}
void sub_1b88a2() // 0160:1b88a2 +long
{
    esp -= 4;
    esi = 0x0020ea5b;
    memoryASet(ds, esi, 0xc6);
    memoryASet(ds, esi + 1, 0x14);
    memoryASet(ds, esi + 2, 0xf0);
    cl = memoryAGet(ds, edi);
    memoryASet(ds, esi + 3, cl);
    edi++;
    esi += 0x00000004;
    ecx &= 0x000000ff;
    etx = edi; edi = esi; esi = etx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020ea5b;
    esp += 4;
}
void sub_1b88cb() // 0160:1b88cb +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d863);
    ax++;
    if (ax >= 0x000a)
        goto loc_1b88dc;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
loc_1b88dc: // 0160:1b88dc
    ebx = 0;
loc_1b88de: // 0160:1b88de
    if ((char)al < (char)0x0a)
        goto loc_1b88e8;
    al -= 0x0a;
    bl++;
    goto loc_1b88de;
loc_1b88e8: // 0160:1b88e8
    if (!bl)
        goto loc_1b88f7;
    bl += 0x30;
    memoryASet(ds, edi, bl);
    al += 0x30;
    memoryASet(ds, edx, al);
    goto loc_1b88fb;
loc_1b88f7: // 0160:1b88f7
    al += 0x30;
    memoryASet(ds, edi, al);
loc_1b88fb: // 0160:1b88fb
    esp += 4;
    return;
}
void sub_1b88d3() // 0160:1b88d3 +long
{
    esp -= 4;
    if (ax >= 0x000a)
        goto loc_1b88dc;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + 1);
loc_1b88dc: // 0160:1b88dc
    ebx = 0;
loc_1b88de: // 0160:1b88de
    if ((char)al < (char)0x0a)
        goto loc_1b88e8;
    al -= 0x0a;
    bl++;
    goto loc_1b88de;
loc_1b88e8: // 0160:1b88e8
    if (!bl)
        goto loc_1b88f7;
    bl += 0x30;
    memoryASet(ds, edi, bl);
    al += 0x30;
    memoryASet(ds, edx, al);
    goto loc_1b88fb;
loc_1b88f7: // 0160:1b88f7
    al += 0x30;
    memoryASet(ds, edi, al);
loc_1b88fb: // 0160:1b88fb
    esp += 4;
    return;
}
void sub_1b88fc() // 0160:1b88fc +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    edx = 0x001ece68;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1bd879();
    sub_1b57fb();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    ax = memoryAGet16(ds, 0x20e843);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e845);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e847);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1b89b4;
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e849);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1b89b4;
    sub_1b59d4();
loc_1b89b4: // 0160:1b89b4
    sub_1bd478();
    sub_1b8f52();
    ax = memoryAGet16(ds, 0x20e903);
    esi = 0x001ef31c;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1b89ef;
    esi = 0x001ef32c;
    if (ax == 0x0004)
        goto loc_1b89ef;
    esi = 0x001ef33c;
    if (ax == 0x0003)
        goto loc_1b89ef;
    esi = 0x001ef348;
loc_1b89ef: // 0160:1b89ef
    edi = 0x0020ea8d;
    memoryASet16(ds, edi, 0x0001);
    edi += 0x00000002;
    goto loc_1b8a06;
loc_1b89fe: // 0160:1b89fe
    memoryASet16(ds, edi, 0x0000);
    edi += 0x00000002;
loc_1b8a06: // 0160:1b8a06
    movsw<ES_EDI, DS_ESI>();
    memoryASet16(ds, edi, 0x0040);
    edi += 0x00000002;
    movsw<ES_EDI, DS_ESI>();
    memoryASet16(ds, edi, 0x0000);
    memoryASet16(ds, edi + 2, 0x0020);
    memoryASet16(ds, edi + 4, 0x0020);
    edi += 0x00000006;
    ax--;
    if (ax)
        goto loc_1b89fe;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1b8a89;
    if (memoryAGet16(ds, 0x20e9a7) == 0x0003)
        goto loc_1b8acf;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1b8acf;
    esi = 0x0020e843;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    memoryASet16(ds, 0x20ecbb, 0x0001);
    esi = 0x0020e845;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    goto loc_1b8afe;
    // gap 3 bytes
loc_1b8a89: // 0160:1b8a89
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1b8acf;
    esi = 0x0020e843;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    memoryASet16(ds, 0x20ecbb, 0x0001);
    esi = 0x0020e845;
    ax = memoryAGet16(ds, 0x20e903);
    memoryASet16(ds, 0x20ceb1, ax);
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    sub_1bd346();
    goto loc_1b8afe;
loc_1b8acf: // 0160:1b8acf
    esi = 0x0020e843;
    memoryASet16(ds, 0x20ceb1, 0x0002);
    sub_1bd346();
    memoryASet16(ds, 0x20ecbb, 0x0001);
    esi = 0x0020e847;
    memoryASet16(ds, 0x20ceb1, 0x0002);
    sub_1bd346();
loc_1b8afe: // 0160:1b8afe
    memoryASet16(ds, 0x20e831, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x224640, 0x0001);
    sub_1b8ec1();
    sub_1b5126();
    memoryASet16(ds, 0x224640, 0x0000);
    sub_1b8ec1();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, 0x0001);
    sub_1b8ec1();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1b191a();
    al = 0x8a;
    sub_1b18a6();
    sub_1b4f0e();
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20ee13, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b8b7d: // 0160:1b8b7d
    sub_1b5096();
    al = 0xc0;
    if (!(memoryAGet16(ds, 0x20eda9) & 0xffff))
        goto loc_1b8b98;
    esi = 0x001eec27;
    bl = 0x87;
    goto loc_1b8bfa;
loc_1b8b98: // 0160:1b8b98
    esi = 0x001eec10;
    bl = 0x8b;
    if (memoryAGet16(ds, 0x20e90d) != 0x0001)
        goto loc_1b8bfa;
    if (memoryAGet16(ds, 0x20e9a7) != 0x0001)
        goto loc_1b8bfa;
    bp = memoryAGet16(ds, 0x20d863);
    bp++;
    if (bp != 0x0019)
        goto loc_1b8bd8;
    esi = 0x001eec5c;
    if (memoryAGet16(ds, 0x20d1f7) == 0x0001)
        goto loc_1b8bfa;
    esi = 0x001eec8c;
    goto loc_1b8bf6;
loc_1b8bd8: // 0160:1b8bd8
    esi = 0x001eec45;
    if (memoryAGet16(ds, 0x20d1f7) == 0x0001)
        goto loc_1b8bfa;
    if (memoryAGet16(ds, 0x20d1f9) == 0x0001)
        goto loc_1b8bfa;
    esi = 0x001eec73;
loc_1b8bf6: // 0160:1b8bf6
    al = 0xc0;
    bl = 0x8a;
loc_1b8bfa: // 0160:1b8bfa
    sub_1b60a7();
    sub_1b8c45();
    ax = memoryAGet16(ds, 0x20eeb0);
    if (ax == 0x0bb8)
        goto loc_1b8c2e;
    ax = memoryAGet16(ds, 0x20ee13);
    if ((short)ax <= (short)0x00fa)
        goto loc_1b8c2f;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b8c36;
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (al)
        goto loc_1b8c36;
loc_1b8c2e: // 0160:1b8c2e
    esp += 4;
    return;
loc_1b8c2f: // 0160:1b8c2f
    memoryASet16(ds, 0x20ee13, memoryAGet16(ds, 0x20ee13) + 1);
loc_1b8c36: // 0160:1b8c36
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b8b7d;
}
void sub_1b8c45() // 0160:1b8c45 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20e903);
    memoryASet16(ds, 0x20e887, ax);
    esi = 0x0020ea8d;
loc_1b8c56: // 0160:1b8c56
    if (memoryAGet16(ds, esi) == 0x0002)
        goto loc_1b8caa;
    if (memoryAGet16(ds, esi) > 0x0002)
        goto loc_1b8c94;
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1b8ca5;
    if (memoryAGet16(ds, esi + 4) != 0x0080)
        goto loc_1b8c7d;
    if (memoryAGet16(ds, 0x20e887) == 0x0001)
        goto loc_1b8c7d;
    memoryASet16(ds, esi + 14, 0x0001);
loc_1b8c7d: // 0160:1b8c7d
    ax = memoryAGet16(ds, esi + 4);
    ax += 0x0004;
    memoryASet16(ds, esi + 4, ax);
    if (ax != memoryAGet16(ds, esi + 6))
        goto loc_1b8c94;
    memoryASet16(ds, esi, 0x0002);
loc_1b8c94: // 0160:1b8c94
    sub_1b8d12();
    esi += 0x0000000e;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) - 1);
    if (memoryAGet16(ds, 0x20e887))
        goto loc_1b8c56;
loc_1b8ca5: // 0160:1b8ca5
    goto loc_1b8ec0;
loc_1b8caa: // 0160:1b8caa
    memoryASet16(ds, esi + 8, memoryAGet16(ds, esi + 8) + 1);
    ax = memoryAGet16(ds, esi + 12);
    if ((short)ax >= 0)
        goto loc_1b8cc7;
    ax = -ax;
    if (ax == memoryAGet16(ds, esi + 10))
        goto loc_1b8ea4;
    ax = -ax;
loc_1b8cc7: // 0160:1b8cc7
    ax--;
    memoryASet16(ds, esi + 12, ax);
    if ((short)ax >= 0)
        goto loc_1b8cd2;
    ax = -ax;
loc_1b8cd2: // 0160:1b8cd2
    if ((short)ax < (short)0x0008)
        goto loc_1b8ce3;
    ax -= 0x0008;
    sub_1b8f3e();
    goto loc_1b8cd2;
loc_1b8ce3: // 0160:1b8ce3
    if (!ax)
        goto loc_1b8d10;
    ax <<= 3;
    ax &= 0x0038;
    bx = memoryAGet16(ds, esi + 8);
    bx &= 0x0007;
    ax += bx;
    edi = 0x001ef3f4;
    eax &= 0x0000ffff;
    if (!(memoryAGet(ds, edi + eax) & 0xff))
        goto loc_1b8d10;
    sub_1b8f3e();
loc_1b8d10: // 0160:1b8d10
    goto loc_1b8c94;
    // gap 392 bytes
loc_1b8e9a: // 0160:1b8e9a
    memoryASet16(ds, esi, 0x0003);
    goto loc_1b8c94;
loc_1b8ea4: // 0160:1b8ea4
    ax = memoryAGet16(ds, esi + 10);
    ax >>= 1;
    if (!ax)
        goto loc_1b8e9a;
    memoryASet16(ds, esi + 10, ax);
    memoryASet16(ds, esi + 12, ax);
    memoryASet16(ds, esi + 8, 0x0000);
    goto loc_1b8c94;
loc_1b8ec0: // 0160:1b8ec0
    esp += 4;
    return;
}
void sub_1b8d12() // 0160:1b8d12 +long
{
    esp -= 4;
    memoryASet32(ds, 0x20ced3, esi);
    ax = memoryAGet16(ds, esi + 2);
    bx = memoryAGet16(ds, esi + 4);
    cx = memoryAGet16(ds, 0x20e887);
    cx--;
    cx <<= 1;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x003f;
    bp >>= 5;
    if (!bp)
        goto loc_1b8d3f;
    cx++;
loc_1b8d3f: // 0160:1b8d3f
    if ((short)memoryAGet16(ds, 0x20eeb0) < (short)0x00fa)
        goto loc_1b8d55;
    cx = 0x002c;
    cx += memoryAGet16(ds, 0x20e887);
loc_1b8d55: // 0160:1b8d55
    dx = 0x0007;
    sub_1bd50f();
    push32(eax);
    push32(ebx);
    push32(esi);
    esi = 0x0020e843;
    bp = memoryAGet16(ds, 0x20e887);
    bp--;
    bp <<= 1;
    ebp &= 0x0000ffff;
    esi += ebp;
    cx = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20cec3, cx);
    cx += 0x0008;
    bx += 0x0030;
    esi = memoryAGet32(ds, 0x20ced3);
    if (memoryAGet16(ds, esi) != 0x0003)
        goto loc_1b8e7b;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0040;
    if (!bp)
        goto loc_1b8dbc;
loc_1b8da9: // 0160:1b8da9
    sub_1bd51f();
    dx = 0x0004;
    sub_1bd50f();
    goto loc_1b8e7b;
loc_1b8dbc: // 0160:1b8dbc
    dx = memoryAGet16(ds, 0x20d7f5);
    if (dx == 0x0001)
        goto loc_1b8e29;
    if (memoryAGet16(ds, 0x20eda9) & 0xffff)
        goto loc_1b8da9;
    if (dx == 0x0002)
        goto loc_1b8e60;
    if (dx == 0x0003)
        goto loc_1b8e44;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1b8dff;
    cx = 0x0024;
    if ((short)memoryAGet16(ds, 0x20e887) <= (short)0x0002)
        goto loc_1b8e72;
    goto loc_1b8e6e;
loc_1b8dff: // 0160:1b8dff
    cx = 0x0024;
    if (memoryAGet16(ds, 0x20e887) == 0x0001)
        goto loc_1b8e72;
    cx = 0x0025;
    if (memoryAGet16(ds, 0x20e887) == 0x0002)
        goto loc_1b8e72;
    cx = 0x0027;
    flags.zero = memoryAGet16(ds, 0x20e887) == 0x0003;
    goto loc_1b8e6c;
loc_1b8e29: // 0160:1b8e29
    if (memoryAGet16(ds, 0x20ecb5) != 0x0002)
        goto loc_1b8da9;
    cx = memoryAGet16(ds, 0x20e887);
    cx += 0x0028;
    goto loc_1b8e72;
loc_1b8e44: // 0160:1b8e44
    cx = 0x0024;
    if (memoryAGet16(ds, 0x20e887) == 0x0001)
        goto loc_1b8e72;
    cx = 0x0026;
    flags.zero = memoryAGet16(ds, 0x20e887) == 0x0002;
    goto loc_1b8e6c;
loc_1b8e60: // 0160:1b8e60
    cx = 0x0024;
    flags.zero = memoryAGet16(ds, 0x20e887) == 0x0001;
loc_1b8e6c: // 0160:1b8e6c
    if (flags.zero)
        goto loc_1b8e72;
loc_1b8e6e: // 0160:1b8e6e
    cx = 0x0028;
loc_1b8e72: // 0160:1b8e72
    dx = 0x0004;
    sub_1bd7dd();
loc_1b8e7b: // 0160:1b8e7b
    esi = pop32();
    ebx = pop32();
    eax = pop32();
    cx = 0x0018;
    ax -= 0x0008;
    bx -= 0x0008;
    dx = 0x0008;
    sub_1bd50f();
    esi = memoryAGet32(ds, 0x20ced3);
    esp += 4;
}
void sub_1b8ec1() // 0160:1b8ec1 +long
{
    esp -= 4;
    esi = 0x001ef350;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1b8ef4;
    esi = 0x001ef382;
    if (memoryAGet16(ds, 0x20e903) == 0x0004)
        goto loc_1b8ef4;
    esi = 0x001ef3b4;
    if (memoryAGet16(ds, 0x20e903) == 0x0003)
        goto loc_1b8ef4;
    esi = 0x001ef3da;
loc_1b8ef4: // 0160:1b8ef4
    bp = memoryAGet16(ds, esi);
    esi += 0x00000002;
loc_1b8efa: // 0160:1b8efa
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = memoryAGet16(ds, esi + 4);
    esi += 0x00000006;
    dx = 0x0004;
    push32(ebp);
    push32(esi);
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1b8f1e;
    sub_1bd7dd();
loc_1b8f1e: // 0160:1b8f1e
    esi = pop32();
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = memoryAGet16(ds, esi + 4);
    esi += 0x00000006;
    dx = 0x0004;
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    ebp = pop32();
    bp--;
    if (bp)
        goto loc_1b8efa;
    esp += 4;
}
void sub_1b8f3e() // 0160:1b8f3e +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, esi + 12) & 0xffff))
        goto loc_1b8f51;
    if (!!(memoryAGet16(ds, esi + 12) & 0xffff & 0x8000))
        goto loc_1b8f4d;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) - 0x0002);
loc_1b8f4d: // 0160:1b8f4d
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 1);
loc_1b8f51: // 0160:1b8f51
    esp += 4;
    return;
}
void sub_1b8f52() // 0160:1b8f52 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20e90d);
    memoryASet16(ds, 0x20e903, ax);
    if (memoryAGet16(ds, 0x20e90d) != 0x0001)
        goto loc_1b8f8e;
    memoryASet16(ds, 0x20e903, 0x0004);
    if (memoryAGet16(ds, 0x20e9a7) == 0x0001)
        goto loc_1b8f8e;
    if (memoryAGet16(ds, 0x20e9a7) == 0x0003)
        goto loc_1b8f8e;
    memoryASet16(ds, 0x20e903, 0x0002);
loc_1b8f8e: // 0160:1b8f8e
    esp += 4;
    return;
}
void sub_1b8f8f() // 0160:1b8f8f +long
{
    esp -= 4;
    goto loc_1b8f8f;
loc_1a81dc: // 0160:1a81dc
    push32(ebp);
    sub_1a81f3();
    if (memoryAGet16(ds, 0x1f1ccc) != 0x0001)
        goto loc_1a81f1;
    sub_1c727c();
loc_1a81f1: // 0160:1a81f1
    ebp = pop32();
    esp += 4;
    return;
    // gap 59893 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 9126 bytes
loc_1b8f8f: // 0160:1b8f8f
    memoryASet16(ds, 0x20ed41, 0x0000);
    memoryASet16(ds, 0x20edd1, 0x0001);
    ebx = 0x002967b4;
    memoryASet32(ds, 0x20cee7, ebx);
    ecx = 0x0000001d;
    esi = 0x002248c6;
loc_1b8fb6: // 0160:1b8fb6
    push32(ecx);
    sub_1be39c();
    sub_1b8ff7();
    sub_1be39c();
    sub_1b8ff7();
    ecx = pop32();
    if (--ecx)
        goto loc_1b8fb6;
    ecx = 0x0000001b;
    esi = 0x002249f6;
loc_1b8fd8: // 0160:1b8fd8
    push32(ecx);
    sub_1be39c();
    sub_1b8ff7();
    sub_1be39c();
    sub_1b8ff7();
    ecx = pop32();
    if (--ecx)
        goto loc_1b8fd8;
    sub_1b9b3d();
    goto loc_1b902e;
    // gap 55 bytes
loc_1b902e: // 0160:1b902e
    memoryASet16(ds, 0x20d897, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    sub_1b3af9();
loc_1b9045: // 0160:1b9045
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) != 0x2ee0)
        goto loc_1b9071;
    goto loc_1a81dc;
loc_1b9071: // 0160:1b9071
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b9083;
    memoryASet16(ds, 0x20edab, 0x0000);
loc_1b9083: // 0160:1b9083
    memoryASet16(ds, 0x20ecaf, memoryAGet16(ds, 0x20ecaf) + 1);
    ax = memoryAGet16(ds, 0x20ecaf);
    ax &= 0x003f;
    if (ax)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecad, memoryAGet16(ds, 0x20ecad) + 1);
    memoryASet16(ds, 0x20ecb7, memoryAGet16(ds, 0x20ecb7) + 1);
    if (memoryAGet16(ds, 0x20ecb7) != 0x0003)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecb7, 0x0000);
loc_1b90b7: // 0160:1b90b7
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b937c;
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b90d2;
    esp += 4;
    return;
loc_1b90d2: // 0160:1b90d2
    memoryASet16(ds, 0x20e8af, 0x0002);
    sub_1b97b1();
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1b9139;
    memoryASet16(ds, 0x20d897, 0x0001);
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    esi = 0x00224866;
    edi = 0x001ec010;
    ecx = 0x00000006;
    eax &= 0x0000ffff;
loc_1b911a: // 0160:1b911a
    bl = memoryAGet(ds, esi + eax);
    if (bl != memoryAGet(ds, edi + eax))
        goto loc_1b9130;
    eax++;
    if (--ecx)
        goto loc_1b911a;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1b9139;
loc_1b9130: // 0160:1b9130
    memoryASet16(ds, 0x20e82f, 0x0000);
loc_1b9139: // 0160:1b9139
    if (memoryAGet16(ds, 0x2231d4) == 0x0003)
        goto loc_1b9160;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc3;
    bl = 0x51;
    cl = 0x14;
    sub_1b60e3();
    al = 0xc3;
    bl = 0xd1;
    cl = 0x14;
    sub_1b60e3();
loc_1b9160: // 0160:1b9160
    esi = 0x001ee9f9;
    al = 0xc2;
    bl = 0xd4;
    sub_1b60a7();
    esi = 0x001eea10;
    sub_1b60d3();
    esi = 0x001eea09;
    sub_1b60d3();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0029);
    sub_1b49ae();
    sub_1b4b5f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b95e7;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b95e7;
    memoryASet16(ds, 0x20d897, 0x0000);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b9291;
    sub_1bdfd5();
    memoryASet16(ds, 0x20d897, 0x0000);
    ax = memoryAGet16(ds, 0x20e887);
    ax++;
    if (ax != memoryAGet16(ds, 0x20e90d))
        goto loc_1b9227;
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    memoryASet32(ds, 0x20e9b3, esi);
    goto loc_1b937b;
loc_1b9227: // 0160:1b9227
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecb66;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b5747();
    sub_1bd478();
    memoryASet16(ds, 0x20e8bb, 0x0003);
    memoryASet16(ds, 0x20ec3d, 0x0130);
    memoryASet16(ds, 0x20ec3f, 0x00ee);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1b9291: // 0160:1b9291
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b92ba;
    esi -= 0x00000004;
loc_1b92ba: // 0160:1b92ba
    memoryASet32(ds, 0x20e9b3, esi);
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    ax = memoryAGet16(ds, 0x20e887);
    if (ax == memoryAGet16(ds, 0x20e90d))
        goto loc_1b937b;
    memoryASet16(ds, 0x20e831, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ad);
    bx = ax;
loc_1b92ec: // 0160:1b92ec
    ax--;
    bx++;
    ax &= 0x000f;
    bx &= 0x000f;
    memoryASet(ds, 0x20c840, 0x01);
    cx = memoryAGet16(ds, 0x20e887);
    ecx &= 0x0000ffff;
    cx--;
    if (!cx)
        goto loc_1b936c;
    dx = cx;
    esi = 0x0020e8db;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b9328;
    esi = 0x0020e8bf;
loc_1b9328: // 0160:1b9328
    edi = esi;
loc_1b932a: // 0160:1b932a
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b933b;
    esi -= 0x00000004;
loc_1b933b: // 0160:1b933b
    if (ax == memoryAGet16(ds, esi))
        goto loc_1b934b;
    if (--ecx)
        goto loc_1b932a;
    memoryASet(ds, 0x20c840, 0x01);
    goto loc_1b936c;
loc_1b934b: // 0160:1b934b
    edi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b935c;
    edi -= 0x00000004;
loc_1b935c: // 0160:1b935c
    if (bx == memoryAGet16(ds, edi))
        goto loc_1b92ec;
    dx--;
    if (dx)
        goto loc_1b934b;
    memoryASet(ds, 0x20c840, 0x02);
loc_1b936c: // 0160:1b936c
    sub_1b95f6();
    sub_1b96d5();
    goto loc_1b94e8;
loc_1b937b: // 0160:1b937b
    esp += 4;
    return;
loc_1b937c: // 0160:1b937c
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9473;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9473;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    sub_1be5a6();
    esi = 0x001ef037;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60d3();
    al = 0xc6;
    bl = 0x8e;
    cl = 0x0d;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60e3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001eeb09;
    bx = 0;
    cx = 0x0014;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb1f;
    bx = 0x0002;
    cx = 0x0017;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb38;
    bx = 0x0004;
    cx = 0x0015;
    memoryASet16(ds, 0x20cebb, 0x0002);
    sub_1be66c();
    esi = 0x001eeb4e;
    bx = 0x0006;
    cx = 0x0007;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ceb7, 0x0001);
    sub_1be67e();
    esi = 0x001eeb5f;
    bx = memoryAGet16(ds, 0x20edd9);
    cx = 0x0004;
    sub_1be64f();
    esi = 0x001eeb65;
    bx = memoryAGet16(ds, 0x20edd7);
    cx = 0x0004;
    sub_1be64f();
loc_1b9473: // 0160:1b9473
    if (memoryAGet16(ds, 0x20e8af) != 0x0002)
        goto loc_1b94d4;
    ax = memoryAGet16(ds, 0x20e8ad);
    sub_1bd90e();
    memoryASet16(ds, 0x20e8af, 0x0003);
    memoryASet16(ds, 0x20ecad, 0x0000);
    memoryASet16(ds, 0x20ecaf, 0x0000);
    memoryASet16(ds, 0x20ecb7, 0x0000);
    memoryASet16(ds, 0x20e8b5, 0x0000);
    memoryASet16(ds, 0x20e8b3, 0x0000);
    memoryASet16(ds, 0x20ec45, 0x000c);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b94d4: // 0160:1b94d4
    sub_1bdc88();
    sub_1b95f6();
    sub_1b96d5();
    sub_1b97b1();
loc_1b94e8: // 0160:1b94e8
    if (memoryAGet16(ds, 0x20edd1) & 0xffff)
        goto loc_1b95e7;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9513;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc2;
    bl = 0xd4;
    cl = 0x0c;
    sub_1b60e3();
loc_1b9513: // 0160:1b9513
    esi = 0x001eea16;
    al = 0xc3;
    bl = 0x53;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1b95b1;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1b9565;
    bl = 0x51;
    esi = 0x001eea3d;
    bp = memoryAGet16(ds, 0x20e887);
    if (!bp)
        goto loc_1b95b1;
    esi = 0x001eea67;
    if (bp == 0x0001)
        goto loc_1b95b1;
    esi = 0x001eea52;
    if (bp == 0x0002)
        goto loc_1b95b1;
    esi = 0x001eea7d;
    goto loc_1b95b1;
loc_1b9565: // 0160:1b9565
    bl = 0x56;
    esi = 0x001eea93;
    edi = 0x0020ea5b;
    ecx = 0x00000015;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = 0x0020ea5b;
    dx = memoryAGet16(ds, 0x20e887);
    dx++;
    dh = 0;
loc_1b9588: // 0160:1b9588
    if ((char)dl < (char)0x0a)
        goto loc_1b9594;
    dl -= 0x0a;
    dh++;
    goto loc_1b9588;
loc_1b9594: // 0160:1b9594
    if (!dh)
        goto loc_1b95a6;
    dh += 0x30;
    memoryASet(ds, edi + 11, dh);
    dl += 0x30;
    memoryASet(ds, edi + 12, dl);
    goto loc_1b95ac;
loc_1b95a6: // 0160:1b95a6
    dl += 0x30;
    memoryASet(ds, edi + 11, dl);
loc_1b95ac: // 0160:1b95ac
    esi = 0x0020ea5b;
loc_1b95b1: // 0160:1b95b1
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1b95cb;
    esi = 0x001eeaa0;
    al = 0xc3;
    bl = 0xd1;
    goto loc_1b95d4;
loc_1b95cb: // 0160:1b95cb
    esi = 0x001eea27;
    al = 0xc3;
    bl = 0xd4;
loc_1b95d4: // 0160:1b95d4
    sub_1b60a7();
    esi = 0x001eea36;
    al = 0xc4;
    bl = 0x58;
    sub_1b60a7();
loc_1b95e7: // 0160:1b95e7
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b9045;
}
void sub_1b8ff7() // 0160:1b8ff7 +long
{
    esp -= 4;
    ecx = 0x0000000c;
    edi = 0x0020edb1;
    ebx = memoryAGet32(ds, 0x20cee7);
loc_1b9007: // 0160:1b9007
    al = memoryAGet(ds, edi);
    edi++;
    memoryASet(ds, ebx, al);
    ebx++;
    if (--ecx)
        goto loc_1b9007;
    memoryASet32(ds, 0x20cee7, memoryAGet32(ds, 0x20cee7) + 0x0000000c);
    esp += 4;
}
void sub_1b9017() // 0160:1b9017 +long
{
    esp -= 4;
    goto loc_1b9017;
loc_1a81dc: // 0160:1a81dc
    push32(ebp);
    sub_1a81f3();
    if (memoryAGet16(ds, 0x1f1ccc) != 0x0001)
        goto loc_1a81f1;
    sub_1c727c();
loc_1a81f1: // 0160:1a81f1
    ebp = pop32();
    esp += 4;
    return;
    // gap 59893 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 9262 bytes
loc_1b9017: // 0160:1b9017
    memoryASet16(ds, 0x20ed41, 0x0000);
    memoryASet16(ds, 0x20edd1, 0x0000);
    sub_1b9b3d();
    memoryASet16(ds, 0x20d897, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    sub_1b3af9();
loc_1b9045: // 0160:1b9045
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) != 0x2ee0)
        goto loc_1b9071;
    goto loc_1a81dc;
loc_1b9071: // 0160:1b9071
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b9083;
    memoryASet16(ds, 0x20edab, 0x0000);
loc_1b9083: // 0160:1b9083
    memoryASet16(ds, 0x20ecaf, memoryAGet16(ds, 0x20ecaf) + 1);
    ax = memoryAGet16(ds, 0x20ecaf);
    ax &= 0x003f;
    if (ax)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecad, memoryAGet16(ds, 0x20ecad) + 1);
    memoryASet16(ds, 0x20ecb7, memoryAGet16(ds, 0x20ecb7) + 1);
    if (memoryAGet16(ds, 0x20ecb7) != 0x0003)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecb7, 0x0000);
loc_1b90b7: // 0160:1b90b7
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b937c;
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b90d2;
    esp += 4;
    return;
loc_1b90d2: // 0160:1b90d2
    memoryASet16(ds, 0x20e8af, 0x0002);
    sub_1b97b1();
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1b9139;
    memoryASet16(ds, 0x20d897, 0x0001);
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    esi = 0x00224866;
    edi = 0x001ec010;
    ecx = 0x00000006;
    eax &= 0x0000ffff;
loc_1b911a: // 0160:1b911a
    bl = memoryAGet(ds, esi + eax);
    if (bl != memoryAGet(ds, edi + eax))
        goto loc_1b9130;
    eax++;
    if (--ecx)
        goto loc_1b911a;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1b9139;
loc_1b9130: // 0160:1b9130
    memoryASet16(ds, 0x20e82f, 0x0000);
loc_1b9139: // 0160:1b9139
    if (memoryAGet16(ds, 0x2231d4) == 0x0003)
        goto loc_1b9160;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc3;
    bl = 0x51;
    cl = 0x14;
    sub_1b60e3();
    al = 0xc3;
    bl = 0xd1;
    cl = 0x14;
    sub_1b60e3();
loc_1b9160: // 0160:1b9160
    esi = 0x001ee9f9;
    al = 0xc2;
    bl = 0xd4;
    sub_1b60a7();
    esi = 0x001eea10;
    sub_1b60d3();
    esi = 0x001eea09;
    sub_1b60d3();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0029);
    sub_1b49ae();
    sub_1b4b5f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b95e7;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b95e7;
    memoryASet16(ds, 0x20d897, 0x0000);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b9291;
    sub_1bdfd5();
    memoryASet16(ds, 0x20d897, 0x0000);
    ax = memoryAGet16(ds, 0x20e887);
    ax++;
    if (ax != memoryAGet16(ds, 0x20e90d))
        goto loc_1b9227;
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    memoryASet32(ds, 0x20e9b3, esi);
    goto loc_1b937b;
loc_1b9227: // 0160:1b9227
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecb66;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b5747();
    sub_1bd478();
    memoryASet16(ds, 0x20e8bb, 0x0003);
    memoryASet16(ds, 0x20ec3d, 0x0130);
    memoryASet16(ds, 0x20ec3f, 0x00ee);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1b9291: // 0160:1b9291
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b92ba;
    esi -= 0x00000004;
loc_1b92ba: // 0160:1b92ba
    memoryASet32(ds, 0x20e9b3, esi);
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    ax = memoryAGet16(ds, 0x20e887);
    if (ax == memoryAGet16(ds, 0x20e90d))
        goto loc_1b937b;
    memoryASet16(ds, 0x20e831, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ad);
    bx = ax;
loc_1b92ec: // 0160:1b92ec
    ax--;
    bx++;
    ax &= 0x000f;
    bx &= 0x000f;
    memoryASet(ds, 0x20c840, 0x01);
    cx = memoryAGet16(ds, 0x20e887);
    ecx &= 0x0000ffff;
    cx--;
    if (!cx)
        goto loc_1b936c;
    dx = cx;
    esi = 0x0020e8db;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b9328;
    esi = 0x0020e8bf;
loc_1b9328: // 0160:1b9328
    edi = esi;
loc_1b932a: // 0160:1b932a
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b933b;
    esi -= 0x00000004;
loc_1b933b: // 0160:1b933b
    if (ax == memoryAGet16(ds, esi))
        goto loc_1b934b;
    if (--ecx)
        goto loc_1b932a;
    memoryASet(ds, 0x20c840, 0x01);
    goto loc_1b936c;
loc_1b934b: // 0160:1b934b
    edi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b935c;
    edi -= 0x00000004;
loc_1b935c: // 0160:1b935c
    if (bx == memoryAGet16(ds, edi))
        goto loc_1b92ec;
    dx--;
    if (dx)
        goto loc_1b934b;
    memoryASet(ds, 0x20c840, 0x02);
loc_1b936c: // 0160:1b936c
    sub_1b95f6();
    sub_1b96d5();
    goto loc_1b94e8;
loc_1b937b: // 0160:1b937b
    esp += 4;
    return;
loc_1b937c: // 0160:1b937c
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9473;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9473;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    sub_1be5a6();
    esi = 0x001ef037;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60d3();
    al = 0xc6;
    bl = 0x8e;
    cl = 0x0d;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60e3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001eeb09;
    bx = 0;
    cx = 0x0014;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb1f;
    bx = 0x0002;
    cx = 0x0017;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb38;
    bx = 0x0004;
    cx = 0x0015;
    memoryASet16(ds, 0x20cebb, 0x0002);
    sub_1be66c();
    esi = 0x001eeb4e;
    bx = 0x0006;
    cx = 0x0007;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ceb7, 0x0001);
    sub_1be67e();
    esi = 0x001eeb5f;
    bx = memoryAGet16(ds, 0x20edd9);
    cx = 0x0004;
    sub_1be64f();
    esi = 0x001eeb65;
    bx = memoryAGet16(ds, 0x20edd7);
    cx = 0x0004;
    sub_1be64f();
loc_1b9473: // 0160:1b9473
    if (memoryAGet16(ds, 0x20e8af) != 0x0002)
        goto loc_1b94d4;
    ax = memoryAGet16(ds, 0x20e8ad);
    sub_1bd90e();
    memoryASet16(ds, 0x20e8af, 0x0003);
    memoryASet16(ds, 0x20ecad, 0x0000);
    memoryASet16(ds, 0x20ecaf, 0x0000);
    memoryASet16(ds, 0x20ecb7, 0x0000);
    memoryASet16(ds, 0x20e8b5, 0x0000);
    memoryASet16(ds, 0x20e8b3, 0x0000);
    memoryASet16(ds, 0x20ec45, 0x000c);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b94d4: // 0160:1b94d4
    sub_1bdc88();
    sub_1b95f6();
    sub_1b96d5();
    sub_1b97b1();
loc_1b94e8: // 0160:1b94e8
    if (memoryAGet16(ds, 0x20edd1) & 0xffff)
        goto loc_1b95e7;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9513;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc2;
    bl = 0xd4;
    cl = 0x0c;
    sub_1b60e3();
loc_1b9513: // 0160:1b9513
    esi = 0x001eea16;
    al = 0xc3;
    bl = 0x53;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1b95b1;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1b9565;
    bl = 0x51;
    esi = 0x001eea3d;
    bp = memoryAGet16(ds, 0x20e887);
    if (!bp)
        goto loc_1b95b1;
    esi = 0x001eea67;
    if (bp == 0x0001)
        goto loc_1b95b1;
    esi = 0x001eea52;
    if (bp == 0x0002)
        goto loc_1b95b1;
    esi = 0x001eea7d;
    goto loc_1b95b1;
loc_1b9565: // 0160:1b9565
    bl = 0x56;
    esi = 0x001eea93;
    edi = 0x0020ea5b;
    ecx = 0x00000015;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = 0x0020ea5b;
    dx = memoryAGet16(ds, 0x20e887);
    dx++;
    dh = 0;
loc_1b9588: // 0160:1b9588
    if ((char)dl < (char)0x0a)
        goto loc_1b9594;
    dl -= 0x0a;
    dh++;
    goto loc_1b9588;
loc_1b9594: // 0160:1b9594
    if (!dh)
        goto loc_1b95a6;
    dh += 0x30;
    memoryASet(ds, edi + 11, dh);
    dl += 0x30;
    memoryASet(ds, edi + 12, dl);
    goto loc_1b95ac;
loc_1b95a6: // 0160:1b95a6
    dl += 0x30;
    memoryASet(ds, edi + 11, dl);
loc_1b95ac: // 0160:1b95ac
    esi = 0x0020ea5b;
loc_1b95b1: // 0160:1b95b1
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1b95cb;
    esi = 0x001eeaa0;
    al = 0xc3;
    bl = 0xd1;
    goto loc_1b95d4;
loc_1b95cb: // 0160:1b95cb
    esi = 0x001eea27;
    al = 0xc3;
    bl = 0xd4;
loc_1b95d4: // 0160:1b95d4
    sub_1b60a7();
    esi = 0x001eea36;
    al = 0xc4;
    bl = 0x58;
    sub_1b60a7();
loc_1b95e7: // 0160:1b95e7
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b9045;
}
void sub_1b9020() // 0160:1b9020 +long
{
    esp -= 4;
    goto loc_1b9020;
loc_1a81dc: // 0160:1a81dc
    push32(ebp);
    sub_1a81f3();
    if (memoryAGet16(ds, 0x1f1ccc) != 0x0001)
        goto loc_1a81f1;
    sub_1c727c();
loc_1a81f1: // 0160:1a81f1
    ebp = pop32();
    esp += 4;
    return;
    // gap 59893 bytes
loc_1b6be8: // 0160:1b6be8
    esp += 4;
    return;
    // gap 9271 bytes
loc_1b9020: // 0160:1b9020
    memoryASet16(ds, 0x20edd1, 0x0000);
    sub_1b9b3d();
    memoryASet16(ds, 0x20d897, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    sub_1b3af9();
loc_1b9045: // 0160:1b9045
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1b6be8;
    sub_1b531f();
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) != 0x2ee0)
        goto loc_1b9071;
    goto loc_1a81dc;
loc_1b9071: // 0160:1b9071
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1b9083;
    memoryASet16(ds, 0x20edab, 0x0000);
loc_1b9083: // 0160:1b9083
    memoryASet16(ds, 0x20ecaf, memoryAGet16(ds, 0x20ecaf) + 1);
    ax = memoryAGet16(ds, 0x20ecaf);
    ax &= 0x003f;
    if (ax)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecad, memoryAGet16(ds, 0x20ecad) + 1);
    memoryASet16(ds, 0x20ecb7, memoryAGet16(ds, 0x20ecb7) + 1);
    if (memoryAGet16(ds, 0x20ecb7) != 0x0003)
        goto loc_1b90b7;
    memoryASet16(ds, 0x20ecb7, 0x0000);
loc_1b90b7: // 0160:1b90b7
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b937c;
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b90d2;
    esp += 4;
    return;
loc_1b90d2: // 0160:1b90d2
    memoryASet16(ds, 0x20e8af, 0x0002);
    sub_1b97b1();
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1b9139;
    memoryASet16(ds, 0x20d897, 0x0001);
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    esi = 0x00224866;
    edi = 0x001ec010;
    ecx = 0x00000006;
    eax &= 0x0000ffff;
loc_1b911a: // 0160:1b911a
    bl = memoryAGet(ds, esi + eax);
    if (bl != memoryAGet(ds, edi + eax))
        goto loc_1b9130;
    eax++;
    if (--ecx)
        goto loc_1b911a;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1b9139;
loc_1b9130: // 0160:1b9130
    memoryASet16(ds, 0x20e82f, 0x0000);
loc_1b9139: // 0160:1b9139
    if (memoryAGet16(ds, 0x2231d4) == 0x0003)
        goto loc_1b9160;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc3;
    bl = 0x51;
    cl = 0x14;
    sub_1b60e3();
    al = 0xc3;
    bl = 0xd1;
    cl = 0x14;
    sub_1b60e3();
loc_1b9160: // 0160:1b9160
    esi = 0x001ee9f9;
    al = 0xc2;
    bl = 0xd4;
    sub_1b60a7();
    esi = 0x001eea10;
    sub_1b60d3();
    esi = 0x001eea09;
    sub_1b60d3();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0029);
    sub_1b49ae();
    sub_1b4b5f();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1b95e7;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b95e7;
    memoryASet16(ds, 0x20d897, 0x0000);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b9291;
    sub_1bdfd5();
    memoryASet16(ds, 0x20d897, 0x0000);
    ax = memoryAGet16(ds, 0x20e887);
    ax++;
    if (ax != memoryAGet16(ds, 0x20e90d))
        goto loc_1b9227;
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    memoryASet32(ds, 0x20e9b3, esi);
    goto loc_1b937b;
loc_1b9227: // 0160:1b9227
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecb66;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b5747();
    sub_1bd478();
    memoryASet16(ds, 0x20e8bb, 0x0003);
    memoryASet16(ds, 0x20ec3d, 0x0130);
    memoryASet16(ds, 0x20ec3f, 0x00ee);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1b9291: // 0160:1b9291
    memoryASet16(ds, 0x20e8af, 0x0000);
    esi = memoryAGet32(ds, 0x20e9b3);
    ax = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, esi, ax);
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b92ba;
    esi -= 0x00000004;
loc_1b92ba: // 0160:1b92ba
    memoryASet32(ds, 0x20e9b3, esi);
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    ax = memoryAGet16(ds, 0x20e887);
    if (ax == memoryAGet16(ds, 0x20e90d))
        goto loc_1b937b;
    memoryASet16(ds, 0x20e831, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ad);
    bx = ax;
loc_1b92ec: // 0160:1b92ec
    ax--;
    bx++;
    ax &= 0x000f;
    bx &= 0x000f;
    memoryASet(ds, 0x20c840, 0x01);
    cx = memoryAGet16(ds, 0x20e887);
    ecx &= 0x0000ffff;
    cx--;
    if (!cx)
        goto loc_1b936c;
    dx = cx;
    esi = 0x0020e8db;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b9328;
    esi = 0x0020e8bf;
loc_1b9328: // 0160:1b9328
    edi = esi;
loc_1b932a: // 0160:1b932a
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b933b;
    esi -= 0x00000004;
loc_1b933b: // 0160:1b933b
    if (ax == memoryAGet16(ds, esi))
        goto loc_1b934b;
    if (--ecx)
        goto loc_1b932a;
    memoryASet(ds, 0x20c840, 0x01);
    goto loc_1b936c;
loc_1b934b: // 0160:1b934b
    edi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b935c;
    edi -= 0x00000004;
loc_1b935c: // 0160:1b935c
    if (bx == memoryAGet16(ds, edi))
        goto loc_1b92ec;
    dx--;
    if (dx)
        goto loc_1b934b;
    memoryASet(ds, 0x20c840, 0x02);
loc_1b936c: // 0160:1b936c
    sub_1b95f6();
    sub_1b96d5();
    goto loc_1b94e8;
loc_1b937b: // 0160:1b937b
    esp += 4;
    return;
loc_1b937c: // 0160:1b937c
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9473;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9473;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    sub_1be5a6();
    esi = 0x001ef037;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60d3();
    al = 0xc6;
    bl = 0x8e;
    cl = 0x0d;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1b60e3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001eeb09;
    bx = 0;
    cx = 0x0014;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb1f;
    bx = 0x0002;
    cx = 0x0017;
    memoryASet16(ds, 0x20cebb, 0x0001);
    sub_1be66c();
    esi = 0x001eeb38;
    bx = 0x0004;
    cx = 0x0015;
    memoryASet16(ds, 0x20cebb, 0x0002);
    sub_1be66c();
    esi = 0x001eeb4e;
    bx = 0x0006;
    cx = 0x0007;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ceb7, 0x0001);
    sub_1be67e();
    esi = 0x001eeb5f;
    bx = memoryAGet16(ds, 0x20edd9);
    cx = 0x0004;
    sub_1be64f();
    esi = 0x001eeb65;
    bx = memoryAGet16(ds, 0x20edd7);
    cx = 0x0004;
    sub_1be64f();
loc_1b9473: // 0160:1b9473
    if (memoryAGet16(ds, 0x20e8af) != 0x0002)
        goto loc_1b94d4;
    ax = memoryAGet16(ds, 0x20e8ad);
    sub_1bd90e();
    memoryASet16(ds, 0x20e8af, 0x0003);
    memoryASet16(ds, 0x20ecad, 0x0000);
    memoryASet16(ds, 0x20ecaf, 0x0000);
    memoryASet16(ds, 0x20ecb7, 0x0000);
    memoryASet16(ds, 0x20e8b5, 0x0000);
    memoryASet16(ds, 0x20e8b3, 0x0000);
    memoryASet16(ds, 0x20ec45, 0x000c);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b94d4: // 0160:1b94d4
    sub_1bdc88();
    sub_1b95f6();
    sub_1b96d5();
    sub_1b97b1();
loc_1b94e8: // 0160:1b94e8
    if (memoryAGet16(ds, 0x20edd1) & 0xffff)
        goto loc_1b95e7;
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1b9513;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc2;
    bl = 0xd4;
    cl = 0x0c;
    sub_1b60e3();
loc_1b9513: // 0160:1b9513
    esi = 0x001eea16;
    al = 0xc3;
    bl = 0x53;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1b95b1;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1b9565;
    bl = 0x51;
    esi = 0x001eea3d;
    bp = memoryAGet16(ds, 0x20e887);
    if (!bp)
        goto loc_1b95b1;
    esi = 0x001eea67;
    if (bp == 0x0001)
        goto loc_1b95b1;
    esi = 0x001eea52;
    if (bp == 0x0002)
        goto loc_1b95b1;
    esi = 0x001eea7d;
    goto loc_1b95b1;
loc_1b9565: // 0160:1b9565
    bl = 0x56;
    esi = 0x001eea93;
    edi = 0x0020ea5b;
    ecx = 0x00000015;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = 0x0020ea5b;
    dx = memoryAGet16(ds, 0x20e887);
    dx++;
    dh = 0;
loc_1b9588: // 0160:1b9588
    if ((char)dl < (char)0x0a)
        goto loc_1b9594;
    dl -= 0x0a;
    dh++;
    goto loc_1b9588;
loc_1b9594: // 0160:1b9594
    if (!dh)
        goto loc_1b95a6;
    dh += 0x30;
    memoryASet(ds, edi + 11, dh);
    dl += 0x30;
    memoryASet(ds, edi + 12, dl);
    goto loc_1b95ac;
loc_1b95a6: // 0160:1b95a6
    dl += 0x30;
    memoryASet(ds, edi + 11, dl);
loc_1b95ac: // 0160:1b95ac
    esi = 0x0020ea5b;
loc_1b95b1: // 0160:1b95b1
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1b95cb;
    esi = 0x001eeaa0;
    al = 0xc3;
    bl = 0xd1;
    goto loc_1b95d4;
loc_1b95cb: // 0160:1b95cb
    esi = 0x001eea27;
    al = 0xc3;
    bl = 0xd4;
loc_1b95d4: // 0160:1b95d4
    sub_1b60a7();
    esi = 0x001eea36;
    al = 0xc4;
    bl = 0x58;
    sub_1b60a7();
loc_1b95e7: // 0160:1b95e7
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b9045;
}
void sub_1b95f6() // 0160:1b95f6 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e833, 0x0000);
    memoryASet16(ds, 0x20e835, 0x0000);
    ax = memoryAGet16(ds, 0x20e8a9);
    if (ax != memoryAGet16(ds, 0x20e889))
        goto loc_1b964f;
    al = memoryAGet(ds, 0x20c840);
    if (al != 0x80)
        goto loc_1b9650;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1b9650;
    al = 0x88;
    sub_1b17b7();
    memoryASet16(ds, 0x20e831, 0x0001);
    memoryASet16(ds, 0x2231d4, 0x0000);
loc_1b964f: // 0160:1b964f
    esp += 4;
    return;
loc_1b9650: // 0160:1b9650
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1b9664;
    edi = 0x0020e833;
    ax = 0xffff;
    goto loc_1b9676;
loc_1b9664: // 0160:1b9664
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1b964f;
    edi = 0x0020e835;
    ax = 0x0001;
loc_1b9676: // 0160:1b9676
    memoryASet16(ds, 0x20e8af, 0x0001);
loc_1b967f: // 0160:1b967f
    memoryASet16(ds, 0x20e8ad, memoryAGet16(ds, 0x20e8ad) + ax);
    memoryASet16(ds, edi, memoryAGet16(ds, edi) + 1);
    memoryASet16(ds, 0x20e8ad, memoryAGet16(ds, 0x20e8ad) & 0x000f);
    bx = memoryAGet16(ds, 0x20e90d);
    if (bx == 0x0001)
        goto loc_1b964f;
    esi = 0x0020e8db;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b96b3;
    esi = 0x0020e8bf;
loc_1b96b3: // 0160:1b96b3
    esi += 0x00000006;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b96c4;
    esi -= 0x00000004;
loc_1b96c4: // 0160:1b96c4
    cx = memoryAGet16(ds, esi);
    if (cx == memoryAGet16(ds, 0x20e8ad))
        goto loc_1b967f;
    bx--;
    if (bx)
        goto loc_1b96b3;
    esp += 4;
}
void sub_1b96d5() // 0160:1b96d5 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20e833);
    if (!cx)
        goto loc_1b9710;
    memoryASet16(ds, 0x20e8ab, 0x0006);
    ecx &= 0x0000ffff;
loc_1b96f0: // 0160:1b96f0
    memoryASet16(ds, 0x20e8a9, memoryAGet16(ds, 0x20e8a9) + 0x0048);
    if (memoryAGet16(ds, 0x20e8a9) != 0x0358)
        goto loc_1b970c;
    memoryASet16(ds, 0x20e8a9, 0xfed8);
loc_1b970c: // 0160:1b970c
    if (--ecx)
        goto loc_1b96f0;
    goto loc_1b9749;
loc_1b9710: // 0160:1b9710
    cx = memoryAGet16(ds, 0x20e835);
    if (!cx)
        goto loc_1b9749;
    memoryASet16(ds, 0x20e8ab, 0xfffa);
    ecx &= 0x0000ffff;
loc_1b972b: // 0160:1b972b
    memoryASet16(ds, 0x20e8a9, memoryAGet16(ds, 0x20e8a9) + 0xffb8);
    if (memoryAGet16(ds, 0x20e8a9) != 0xfe90)
        goto loc_1b9747;
    memoryASet16(ds, 0x20e8a9, 0x0310);
loc_1b9747: // 0160:1b9747
    if (--ecx)
        goto loc_1b972b;
loc_1b9749: // 0160:1b9749
    esi = 0x0020e889;
    ax = memoryAGet16(ds, 0x20e8a9);
    if (ax == memoryAGet16(ds, esi))
        goto loc_1b9789;
    ecx = 0x00000010;
loc_1b975e: // 0160:1b975e
    bx = memoryAGet16(ds, esi);
    bx += memoryAGet16(ds, 0x20e8ab);
    if (bx != 0x0358)
        goto loc_1b9775;
    bx = 0xfed8;
    goto loc_1b9780;
loc_1b9775: // 0160:1b9775
    if (bx != 0xfe90)
        goto loc_1b9780;
    bx = 0x0310;
loc_1b9780: // 0160:1b9780
    memoryASet16(ds, esi, bx);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b975e;
loc_1b9788: // 0160:1b9788
    esp += 4;
    return;
loc_1b9789: // 0160:1b9789
    ax = memoryAGet16(ds, 0x20e8af);
    if (ax == 0x0003)
        goto loc_1b9788;
    memoryASet16(ds, 0x20e8af, 0x0002);
    memoryASet16(ds, 0x20e8b3, 0x0000);
    memoryASet16(ds, 0x20e8b5, 0x0000);
    esp += 4;
}
void sub_1b97b1() // 0160:1b97b1 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20e90d) > 0x0001)
        goto loc_1b9891;
    if (memoryAGet16(ds, 0x20e8af) != 0x0003)
        goto loc_1b9891;
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 2;
    bx = ax;
    ax <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi = 0x002247a6;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, esi + eax + 4);
    if (memoryAGet16(ds, 0x20edd1) == 0x0001)
        goto loc_1b983d;
    ax = memoryAGet16(ds, 0x20ecb5);
    if (!ax)
        goto loc_1b9832;
    if (ax == 0x0001)
        goto loc_1b9827;
    if (ax != 0x0002)
        goto loc_1b9891;
    if (!dx)
        goto loc_1b9877;
    goto loc_1b9891;
    // gap 3 bytes
loc_1b9827: // 0160:1b9827
    if (cx == 0x0019)
        goto loc_1b9877;
    goto loc_1b9891;
    // gap 3 bytes
loc_1b9832: // 0160:1b9832
    if (bx == 0x0019)
        goto loc_1b9877;
    goto loc_1b9891;
    // gap 3 bytes
loc_1b983d: // 0160:1b983d
    if (bx != 0x0019)
        goto loc_1b9850;
    ax = 0x01a0;
    bx = 0x0110;
    sub_1b9afb();
loc_1b9850: // 0160:1b9850
    if (cx != 0x0019)
        goto loc_1b9863;
    ax = 0x01a0;
    bx = 0x012a;
    sub_1b9afb();
loc_1b9863: // 0160:1b9863
    if (dx)
        goto loc_1b9891;
    ax = 0x01a0;
    bx = 0x0144;
    sub_1b9afb();
    goto loc_1b9891;
loc_1b9877: // 0160:1b9877
    ax = 0x0090;
    bx = 0x00e7;
    sub_1b9afb();
    ax = 0x00d9;
    bx = 0x00e7;
    sub_1b9afb();
loc_1b9891: // 0160:1b9891
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1b98bd;
    sub_1bd930();
    memoryASet16(ds, 0x20ceb1, 0x0038);
    memoryASet16(ds, 0x20ceb7, 0x003b);
    esi = 0x001ef318;
    sub_1bd96a();
loc_1b98bd: // 0160:1b98bd
    if (memoryAGet16(ds, 0x20e8af) != 0x0003)
        goto loc_1b9954;
    ax = 0x00a8;
    bx = 0x0108;
    cx = memoryAGet16(ds, 0x20e8ad);
    cx += 0x0012;
    if (memoryAGet16(ds, 0x20edd1) & 0xffff)
        goto loc_1b9938;
    if (memoryAGet16(ds, 0x20ed41) & 0xffff)
        goto loc_1b9938;
    if (!(memoryAGet16(ds, 0x20ecb3) & 0xffff))
        goto loc_1b9938;
    if (memoryAGet16(ds, 0x20e90d) != 0x0001)
        goto loc_1b9922;
    if (memoryAGet16(ds, 0x20ecb5) > 0x0001)
        goto loc_1b9922;
    bp = memoryAGet16(ds, 0x20ecad);
    bp &= 0x0001;
    if (!bp)
        goto loc_1b9938;
    goto loc_1b992d;
loc_1b9922: // 0160:1b9922
    if (!(memoryAGet16(ds, 0x20ecb7) & 0xffff))
        goto loc_1b9938;
loc_1b992d: // 0160:1b992d
    cx = 0x002c;
    sub_1b9b10();
    goto loc_1b994b;
loc_1b9938: // 0160:1b9938
    bp = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, 0x20cec3, bp);
    sub_1bd51f();
loc_1b994b: // 0160:1b994b
    dx = 0x0004;
    sub_1bd7dd();
loc_1b9954: // 0160:1b9954
    esi = 0x0020e889;
    memoryASet16(ds, 0x20e8b9, 0x0000);
loc_1b9962: // 0160:1b9962
    ax = 0x00a6;
    bx = memoryAGet16(ds, esi);
    esi += 0x00000002;
    bx += 0x0008;
    if ((short)bx < (short)0x0040)
        goto loc_1b9a82;
    if (bx >= 0x0158)
        goto loc_1b9a82;
    cx = memoryAGet16(ds, 0x20e8b9);
    if (memoryAGet16(ds, 0x20ed41) & 0xffff)
        goto loc_1b99ba;
    bp = memoryAGet16(ds, 0x20e90d);
    edi = 0x0020e8db;
loc_1b99a3: // 0160:1b99a3
    edi += 0x00000006;
    if (cx == memoryAGet16(ds, edi))
        goto loc_1b99b1;
    bp--;
    if (bp)
        goto loc_1b99a3;
    goto loc_1b99da;
loc_1b99b1: // 0160:1b99b1
    cx = 0x0028;
    goto loc_1b9a74;
loc_1b99ba: // 0160:1b99ba
    bp = 0x0010;
    edi = 0x0020e8c1;
loc_1b99c3: // 0160:1b99c3
    if (cx == memoryAGet16(ds, edi))
        goto loc_1b99d1;
    edi += 0x00000002;
    bp--;
    if (bp)
        goto loc_1b99c3;
    goto loc_1b99da;
loc_1b99d1: // 0160:1b99d1
    cx = 0x0028;
    goto loc_1b9a74;
loc_1b99da: // 0160:1b99da
    bp = cx;
    cx++;
    if (bp != memoryAGet16(ds, 0x20e8ad))
        goto loc_1b9a51;
    if (memoryAGet16(ds, 0x20e8af) != 0x0003)
        goto loc_1b9a51;
    memoryASet16(ds, 0x20e8b5, memoryAGet16(ds, 0x20e8b5) + 1);
    memoryASet16(ds, 0x20e8b5, memoryAGet16(ds, 0x20e8b5) & 0x000f);
    if (memoryAGet16(ds, 0x20e8b5))
        goto loc_1b9a12;
    memoryASet16(ds, 0x20e8b3, memoryAGet16(ds, 0x20e8b3) + 1);
    memoryASet16(ds, 0x20e8b3, memoryAGet16(ds, 0x20e8b3) & 0x0001);
loc_1b9a12: // 0160:1b9a12
    cx = memoryAGet16(ds, 0x20e8b3);
    cx += 0x0022;
    if (memoryAGet16(ds, 0x20ec45) & 0xffff)
        goto loc_1b9a2a;
    goto loc_1b9a48;
loc_1b9a2a: // 0160:1b9a2a
    di = memoryAGet16(ds, 0x20e8b5);
    di &= 0x000f;
    if (di)
        goto loc_1b9a3e;
    memoryASet16(ds, 0x20ec45, memoryAGet16(ds, 0x20ec45) - 1);
loc_1b9a3e: // 0160:1b9a3e
    if (memoryAGet16(ds, 0x20ec45) >= 0x000a)
        goto loc_1b9a51;
loc_1b9a48: // 0160:1b9a48
    cx = memoryAGet16(ds, 0x20e8b9);
    cx++;
loc_1b9a51: // 0160:1b9a51
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1b9a74;
    if (bp != memoryAGet16(ds, 0x20e8ad))
        goto loc_1b9a74;
    if (memoryAGet16(ds, 0x20edd1) & 0xffff)
        goto loc_1b9a74;
    cx = 0x0028;
loc_1b9a74: // 0160:1b9a74
    dx = 0x0007;
    sub_1bd50f();
    sub_1bd4ff();
loc_1b9a82: // 0160:1b9a82
    memoryASet16(ds, 0x20e8b9, memoryAGet16(ds, 0x20e8b9) + 1);
    if (memoryAGet16(ds, 0x20e8b9) != 0x0010)
        goto loc_1b9962;
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9aa3;
    esp += 4;
    return;
loc_1b9aa3: // 0160:1b9aa3
    ax = 0x0134;
    bx = 0x0120;
    cx = 0x0011;
    dx = 0;
    bp = memoryAGet16(ds, 0x20e831);
    if (!bp)
        goto loc_1b9afa;
    cx = memoryAGet16(ds, 0x20e8ad);
    cx++;
    sub_1bd7dd();
    ax = 0x0134;
    bx = 0x0150;
    cx = memoryAGet16(ds, 0x20e8ad);
    cx += 0x0012;
    bp = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, 0x20cec3, bp);
    sub_1bd51f();
    dx = 0;
    sub_1bd7dd();
loc_1b9afa: // 0160:1b9afa
    esp += 4;
    return;
}
void sub_1b9afb() // 0160:1b9afb +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    dx = 0;
    cx = 0x002d;
    sub_1bd7dd();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1b9b10() // 0160:1b9b10 +long
{
    esp -= 4;
    push32(ecx);
    push32(ebp);
    ax -= 0x0008;
    bp = 0x000c;
    ecx = 0x0020ed53;
    dl = memoryAGet(ds, ecx + 5);
    if (dl == 0x20)
        goto loc_1b9b37;
    bp = 0x0003;
    dl = memoryAGet(ds, ecx + 6);
    if (dl != 0x20)
        goto loc_1b9b37;
    bp = 0x0008;
loc_1b9b37: // 0160:1b9b37
    ax += bp;
    ebp = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1b9b3d() // 0160:1b9b3d +long
{
    esp -= 4;
    memoryASet16(ds, 0x20edab, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9b8d;
    edx = 0x001ecb8e;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    goto loc_1b9bb0;
    // gap 3 bytes
loc_1b9b8d: // 0160:1b9b8d
    edx = 0x001ecb66;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
loc_1b9bb0: // 0160:1b9bb0
    sub_1b5747();
    sub_1bd478();
    esi = 0x0020e889;
    ax = 0xfed8;
    ecx = 0x00000010;
loc_1b9bc8: // 0160:1b9bc8
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    ax += 0x0048;
    if (--ecx)
        goto loc_1b9bc8;
    memoryASet16(ds, 0x20e8a9, 0xfed8);
    memoryASet16(ds, 0x20e8ad, 0x0007);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e9a3, 0x0000);
    esi = 0x0020e8e1;
    memoryASet32(ds, 0x20e9b3, esi);
    ecx = 0x00000004;
loc_1b9c08: // 0160:1b9c08
    memoryASet16(ds, esi, 0x00ff);
    memoryASet32(ds, esi + 2, 0x00000000);
    esi += 0x00000006;
    if (--ecx)
        goto loc_1b9c08;
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1b9c3e;
    esi = 0x0020e8c1;
    memoryASet32(ds, 0x20e9b3, esi);
    ecx = 0x00000010;
loc_1b9c34: // 0160:1b9c34
    memoryASet16(ds, esi, 0x00ff);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1b9c34;
loc_1b9c3e: // 0160:1b9c3e
    memoryASet16(ds, 0x20e887, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ecad, 0x0000);
    memoryASet16(ds, 0x20ecaf, 0x0000);
    memoryASet16(ds, 0x20ecb7, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x0130);
    memoryASet16(ds, 0x20ec3f, 0x00ee);
    memoryASet16(ds, 0x20e8af, 0x0002);
    if (!(memoryAGet16(ds, 0x20edd1) & 0xffff))
        goto loc_1b9c96;
    sub_1be796();
loc_1b9c96: // 0160:1b9c96
    sub_1bd8b7();
    sub_1b4f0e();
    esp += 4;
}
void sub_1b9ca1() // 0160:1b9ca1 +long
{
    esp -= 4;
    sub_1b191a();
    al = 0x81;
    sub_1b18a6();
    sub_1b4bc9();
    sub_1bd3c8();
    sub_1b56fa();
    sub_1bd478();
    edx = 0x001ece20;
    edi = 0x000a0000;
    sub_1b5205();
    edi = 0x000a4800;
    sub_1b521d();
    edi = 0x000a9000;
    sub_1b521d();
    edx = 0x001ece32;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    esi = 0x0020e9c1;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    memoryASet16(ds, 0x20ceb7, 0x00c8);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e9c5, 0x0000);
    ax = memoryAGet16(ds, 0x20e9c3);
    ax <<= 1;
    esi = 0x001ef2c8;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20e9c7, ax);
    memoryASet16(ds, 0x20e887, 0x0000);
    if (!(memoryAGet16(ds, 0x20e9c3) & 0xffff))
        goto loc_1b9d83;
    memoryASet16(ds, 0x20e887, 0x0005);
    if (memoryAGet16(ds, 0x20e9c3) == 0x0001)
        goto loc_1b9d83;
    memoryASet16(ds, 0x20e887, 0x0008);
loc_1b9d83: // 0160:1b9d83
    sub_1b4f0e();
loc_1b9d88: // 0160:1b9d88
    sub_1b5096();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1b9da0;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
loc_1b9da0: // 0160:1b9da0
    sub_1b9dce();
    if ((short)memoryAGet16(ds, 0x20e887) <= (short)0x0028)
        goto loc_1b9dc2;
    if (memoryAGet(ds, 0x20c840) != 0x80)
        goto loc_1b9dc2;
    if (memoryAGet(ds, 0x20e837) == 0x80)
        goto loc_1b9dc2;
    esp += 4;
    return;
loc_1b9dc2: // 0160:1b9dc2
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1b9d88;
}
void sub_1b9dce() // 0160:1b9dce +long
{
    esp -= 4;
    ax = 0x00f8;
    bx = 0x00c0;
    cx = 0;
    dx = 0x0004;
    sub_1bd7dd();
    ax = 0x0108;
    if (memoryAGet16(ds, 0x20ceb7) == 0x008e)
        goto loc_1b9e02;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0019)
        goto loc_1b9e02;
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
loc_1b9e02: // 0160:1b9e02
    bx = memoryAGet16(ds, 0x20ceb7);
    cx = 0x0001;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x001f;
    bp >>= 4;
    if (!bp)
        goto loc_1b9e20;
    cx++;
loc_1b9e20: // 0160:1b9e20
    dx = 0x0004;
    push32(ecx);
    push32(eax);
    push32(ebx);
    cx = memoryAGet16(ds, 0x20e9c1);
    memoryASet16(ds, 0x20cec3, cx);
    cx += 0x0008;
    bx += 0x0030;
    sub_1bd51f();
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    push32(eax);
    push32(ebx);
    cx = 0x0003;
    dx = 0x0008;
    sub_1bd507();
    ebx = pop32();
    eax = pop32();
    ecx = pop32();
    dx = 0x0007;
    sub_1bd7dd();
    edi = 0x001ef2b8;
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20cebb, 0x0100);
    memoryASet16(ds, 0x20cebd, 0x0118);
loc_1b9e84: // 0160:1b9e84
    ax = memoryAGet16(ds, 0x20ceb1);
    if (ax == memoryAGet16(ds, edi + -2))
        goto loc_1b9e9e;
    sub_1b9fb2();
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
    goto loc_1b9e84;
loc_1b9e9e: // 0160:1b9e9e
    esi = 0x0020e9c5;
    edi = 0x001ef25e;
    if (!(memoryAGet16(ds, 0x20e9c3) & 0xffff))
        goto loc_1b9ed6;
    edi = 0x001ef278;
    if (memoryAGet16(ds, 0x20e9c3) == 0x0001)
        goto loc_1b9ed6;
    edi = 0x001ef292;
    if (memoryAGet16(ds, 0x20e9c3) == 0x0002)
        goto loc_1b9ed6;
    edi = 0x001ef2a6;
loc_1b9ed6: // 0160:1b9ed6
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e9c3);
    ax <<= 1;
    edx = 0x001ef2d0;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, edx + eax);
    memoryASet16(ds, 0x20cebb, ax);
    memoryASet16(ds, 0x20cebd, 0x0108);
loc_1b9f05: // 0160:1b9f05
    ax = memoryAGet16(ds, 0x20ceb1);
    if (ax == memoryAGet16(ds, edi + -2))
        goto loc_1b9fa6;
    ax = memoryAGet16(ds, esi);
    if (ax == memoryAGet16(ds, 0x20ceb1))
        goto loc_1b9f35;
    if ((short)ax < (short)memoryAGet16(ds, 0x20ceb1))
        goto loc_1b9fa6;
    sub_1b9fb2();
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
    goto loc_1b9f05;
loc_1b9f35: // 0160:1b9f35
    ax = memoryAGet16(ds, 0x20ceb1);
    ax <<= 3;
    ax += memoryAGet16(ds, 0x20cebb);
    if (ax != memoryAGet16(ds, esi + 2))
        goto loc_1b9fa7;
    ax = memoryAGet16(ds, esi + 2);
    sub_1b9fc3();
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
    ax = memoryAGet16(ds, esi);
    ax <<= 1;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edi + eax);
    if (bx != 0x00ff)
        goto loc_1b9f78;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
loc_1b9f78: // 0160:1b9f78
    bx = memoryAGet16(ds, 0x20e9c3);
    bx <<= 1;
    ebx &= 0x0000ffff;
    edx = 0x001ef2c8;
    ax = memoryAGet16(ds, edx + ebx);
    memoryASet16(ds, esi + 2, ax);
    ax = memoryAGet16(ds, 0x20ceb1);
    ax &= 0x0001;
    if (ax)
        goto loc_1b9fa6;
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) + 0x0008);
loc_1b9fa6: // 0160:1b9fa6
    esp += 4;
    return;
loc_1b9fa7: // 0160:1b9fa7
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - 0x0010);
    ax = memoryAGet16(ds, esi + 2);
    goto loc_1b9fc3;
    // gap 17 bytes
loc_1b9fc3: // 0160:1b9fc3
    bx = memoryAGet16(ds, 0x20cebd);
    edx = edi;
    cx = memoryAGet16(ds, 0x20ceb1);
    cx <<= 1;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, edx + ecx);
    push32(edx);
    dx = 0x0005;
    if (cx == 0x00ff)
        goto loc_1b9fff;
    cx += 0x0018;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1b9fff: // 0160:1b9fff
    edx = pop32();
    esp += 4;
}
void sub_1b9fb2() // 0160:1b9fb2 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20ceb1);
    ax <<= 3;
    ax += memoryAGet16(ds, 0x20cebb);
    bx = memoryAGet16(ds, 0x20cebd);
    edx = edi;
    cx = memoryAGet16(ds, 0x20ceb1);
    cx <<= 1;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, edx + ecx);
    push32(edx);
    dx = 0x0005;
    if (cx == 0x00ff)
        goto loc_1b9fff;
    cx += 0x0018;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1b9fff: // 0160:1b9fff
    edx = pop32();
    esp += 4;
}
void sub_1b9fc3() // 0160:1b9fc3 +long
{
    esp -= 4;
    bx = memoryAGet16(ds, 0x20cebd);
    edx = edi;
    cx = memoryAGet16(ds, 0x20ceb1);
    cx <<= 1;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, edx + ecx);
    push32(edx);
    dx = 0x0005;
    if (cx == 0x00ff)
        goto loc_1b9fff;
    cx += 0x0018;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1b9fff: // 0160:1b9fff
    edx = pop32();
    esp += 4;
}
void sub_1ba001() // 0160:1ba001 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b56a2();
    edx = 0x001ece0b;
    edi = 0x000a0000;
    sub_1b5205();
    edi = 0x000a4800;
    sub_1b521d();
    edi = 0x000a9000;
    sub_1b521d();
    edx = 0x001ecdf6;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    esi = 0x0020c8ec;
    al = memoryAGet(ds, esi);
    bl = memoryAGet(ds, esi + 1);
    cl = memoryAGet(ds, esi + 2);
    memoryASet(ds, esi + -6, al);
    memoryASet(ds, esi + -5, bl);
    memoryASet(ds, esi + -4, cl);
    memoryASet(ds, esi + -3, al);
    memoryASet(ds, esi + -2, bl);
    memoryASet(ds, esi + -1, cl);
    memoryASet(ds, esi + 3, al);
    memoryASet(ds, esi + 4, bl);
    memoryASet(ds, esi + 5, cl);
    memoryASet(ds, esi + 6, al);
    memoryASet(ds, esi + 7, bl);
    memoryASet(ds, esi + 8, cl);
    esi = 0x0020e8e1;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ecbb, 0x0001);
    sub_1bd346();
    esi = 0x0020e889;
    ecx = 0x00000008;
    memoryASet16(ds, esi, 0x0001);
    memoryASet16(ds, esi + 2, 0x01c0);
    esi += 0x00000004;
    edx = 0;
loc_1ba0bd: // 0160:1ba0bd
    dx++;
    memoryASet16(ds, esi, 0x0000);
    memoryASet16(ds, esi + 2, 0x01c8);
    if (dx == 0x0001)
        goto loc_1ba0db;
    if (dx == 0x0008)
        goto loc_1ba0db;
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - 0x0008);
loc_1ba0db: // 0160:1ba0db
    esi += 0x00000004;
    if (--ecx)
        goto loc_1ba0bd;
    memoryASet16(ds, 0x20e887, 0x0000);
    memoryASet(ds, 0x20e837, 0x80);
    sub_1b191a();
    al = 0x09;
    sub_1b18a6();
    memoryASet16(ds, 0x2231d4, 0x0000);
    sub_1b4f0e();
loc_1ba10a: // 0160:1ba10a
    sub_1b5096();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1ba122;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
loc_1ba122: // 0160:1ba122
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1ba20d;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ee9d3;
    edi = 0x0020ea5b;
    ecx = 0x00000026;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020ea5b;
    edi = esi;
    edi += 0x00000011;
    edx = esi;
    edx += 0x00000012;
    ax = memoryAGet16(ds, 0x20d863);
    al++;
    bl = 0;
loc_1ba16a: // 0160:1ba16a
    if ((char)al < (char)0x0a)
        goto loc_1ba174;
    bl++;
    al -= 0x0a;
    goto loc_1ba16a;
loc_1ba174: // 0160:1ba174
    if (!bl)
        goto loc_1ba18f;
    ecx = esi;
    ecx += 0x00000014;
    memoryASet(ds, 0x20e7fd, 0x11);
    bl += 0x30;
    memoryASet(ds, edi, bl);
    al += 0x30;
    memoryASet(ds, edx, al);
    goto loc_1ba19f;
loc_1ba18f: // 0160:1ba18f
    ecx = esi;
    ecx += 0x00000013;
    memoryASet(ds, 0x20e7fd, 0x10);
    al += 0x30;
    memoryASet(ds, edi, al);
loc_1ba19f: // 0160:1ba19f
    memoryASet(ds, ecx, 0x2d);
    ecx += 0x00000002;
    ax = memoryAGet16(ds, 0x20d863);
    esi = 0x00203e42;
    ax <<= 1;
    bx = ax;
    ax <<= 2;
    ax += bx;
    ax += bx;
    ax += bx;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    edi = 0x002084b8;
    if (!bx)
        goto loc_1ba1e1;
    eax = 0;
loc_1ba1d8: // 0160:1ba1d8
    al = memoryAGet(ds, edi);
    edi++;
    edi += eax;
    bx--;
    if (bx)
        goto loc_1ba1d8;
loc_1ba1e1: // 0160:1ba1e1
    eax = 0;
    al = memoryAGet(ds, edi);
    edi++;
    memoryASet(ds, 0x20e7fd, memoryAGet(ds, 0x20e7fd) + al);
    dl = 0x28;
    dl -= memoryAGet(ds, 0x20e7fd);
    dl >>= 1;
loc_1ba1f6: // 0160:1ba1f6
    bl = memoryAGet(ds, edi);
    memoryASet(ds, ecx, bl);
    edi++;
    ecx++;
    ax--;
    if (ax)
        goto loc_1ba1f6;
    esi = 0x0020ea5b;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + dl);
    sub_1b60d3();
loc_1ba20d: // 0160:1ba20d
    sub_1ba249();
    if (memoryAGet16(ds, 0x20e887) == 0x0640)
        goto loc_1ba239;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x001e)
        goto loc_1ba23a;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1ba23a;
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (!al)
        goto loc_1ba23a;
loc_1ba239: // 0160:1ba239
    esp += 4;
    return;
loc_1ba23a: // 0160:1ba23a
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1ba10a;
}
void sub_1ba249() // 0160:1ba249 +long
{
    esp -= 4;
    ax = 0x0100;
    bx = 0x00f8;
    cx = 0x000c;
    dx = 0x0004;
    sub_1bd7dd();
    ax = 0x0108;
    bx = 0x00df;
    cx = 0x0009;
    dx = 0x0004;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x001f;
    bp >>= 4;
    if (!bp)
        goto loc_1ba281;
    cx++;
loc_1ba281: // 0160:1ba281
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x001e)
        goto loc_1ba28f;
    cx = 0x000b;
loc_1ba28f: // 0160:1ba28f
    sub_1bd7dd();
    ebp = 0x00000009;
    cx = 0;
    esi = 0x001ef238;
    edi = 0x0020e889;
loc_1ba2a6: // 0160:1ba2a6
    if (!(memoryAGet16(ds, edi) & 0xffff))
        goto loc_1ba2f5;
    edi += 0x00000002;
    ax = memoryAGet16(ds, edi);
    if (ax != memoryAGet16(ds, esi))
        goto loc_1ba2c2;
    memoryASet16(ds, edi + 2, 0x0001);
    ax += 0x0010;
loc_1ba2c2: // 0160:1ba2c2
    esi += 0x00000002;
    ax -= 0x0010;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    bx = memoryAGet16(ds, esi);
    esi += 0x00000002;
    push32(ecx);
    push32(ebp);
    push32(esi);
    push32(edi);
    if (cx != 0x0003)
        goto loc_1ba2e3;
    ax += 0x0004;
loc_1ba2e3: // 0160:1ba2e3
    dx = 0x0005;
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ecx = pop32();
    cx++;
    ebp--;
    if (ebp)
        goto loc_1ba2a6;
loc_1ba2f5: // 0160:1ba2f5
    esp += 4;
    return;
}
void sub_1ba2f6() // 0160:1ba2f6 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    memoryASet16(ds, 0x20eeb0, 0x0000);
    sub_1b5643();
    push32(ebx);
    push32(edi);
    sub_1bd478();
    edi = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1ba398;
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1ba398;
    sub_1b59d4();
loc_1ba398: // 0160:1ba398
    esi = 0x0020e8e1;
    cx = memoryAGet16(ds, 0x20e90d);
    ecx &= 0x0000ffff;
loc_1ba3aa: // 0160:1ba3aa
    push32(ecx);
    memoryASet16(ds, 0x20ceb1, 0x0001);
    sub_1bd346();
    esi += 0x00000004;
    ecx = pop32();
    if (--ecx)
        goto loc_1ba3aa;
    sub_1bd894();
    edx = 0x001ecd44;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0004)
        goto loc_1ba3e7;
    edx = 0x001ecd57;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0003)
        goto loc_1ba3e7;
    edx = 0x001ecd6a;
loc_1ba3e7: // 0160:1ba3e7
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x0108);
    memoryASet16(ds, 0x20ec3f, 0x00e6);
    memoryASet16(ds, 0x20e82f, 0x0001);
    memoryASet16(ds, 0x20e887, 0x0000);
    memoryASet(ds, 0x20e837, 0x80);
    memoryASet16(ds, 0x20ec45, 0x0000);
    memoryASet16(ds, 0x20edab, 0x0000);
    memoryASet16(ds, 0x2231d4, 0x0000);
    sub_1b4f0e();
loc_1ba459: // 0160:1ba459
    sub_1b5096();
    memoryASet16(ds, 0x20ec45, memoryAGet16(ds, 0x20ec45) + 1);
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) != 0x0bb8)
        goto loc_1ba48b;
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1ba49d;
loc_1ba48b: // 0160:1ba48b
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1ba49d;
    memoryASet16(ds, 0x20edab, 0x0000);
loc_1ba49d: // 0160:1ba49d
    sub_1b531f();
    sub_1ba572();
    sub_1ba4c9();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1ba4b8;
    esp += 4;
    return;
loc_1ba4b8: // 0160:1ba4b8
    sub_1ba724();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1ba459;
}
void sub_1ba4c9() // 0160:1ba4c9 +long
{
    esp -= 4;
    goto loc_1ba4c9;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
loc_1b4b5f: // 0160:1b4b5f
    ax += 0x0020;
    if (!bp)
        goto loc_1b4b6c;
    ax += 0x0002;
loc_1b4b6c: // 0160:1b4b6c
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax += 0x0008;
    goto loc_1b4b56;
    // gap 22860 bytes
loc_1ba4c9: // 0160:1ba4c9
    if (memoryAGet16(ds, 0x20ecbd) & 0xffff)
        goto loc_1ba520;
    esi = 0x001ee97c;
    al = 0xc2;
    bl = 0xcf;
    sub_1b60a7();
    esi = 0x001ee98b;
    sub_1b60d3();
    esi = 0x001ee992;
    sub_1b60d3();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x001f);
    sub_1b49c8();
    goto loc_1b4b5f;
loc_1ba520: // 0160:1ba520
    esi = 0x001ee962;
    edi = 0x0020ea45;
    ebx = edi;
    ecx = 0x00000009;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, ebx + 3, memoryAGet(ds, ebx + 3) + 1);
    dx = 0;
    dl = memoryAGet(ds, 0x20e9b9);
    dl += 0x30;
    memoryASet(ds, ebx + 9, dl);
    esi = ebx;
    sub_1b60d3();
    esi = 0x001ee96b;
    sub_1b60d3();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1ba571;
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (al)
        goto loc_1ba571;
    memoryASet16(ds, 0x20e831, 0x0001);
loc_1ba571: // 0160:1ba571
    esp += 4;
    return;
    // gap 12907 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1ba572() // 0160:1ba572 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ecbd) & 0xffff))
        goto loc_1ba683;
    esi = 0x001ef210;
    sub_1ba9cd();
    cx = memoryAGet16(ds, 0x20e90d);
    edi = esi;
    memoryASet16(ds, 0x20e905, 0x0000);
    memoryASet16(ds, 0x20ce9d, 0x0001);
    ecx &= 0x0000ffff;
loc_1ba5ac: // 0160:1ba5ac
    esi = 0x001ee9a7;
    push32(ecx);
    push32(edi);
    sub_1b6113();
    edi = pop32();
    esi = 0x0020e9c5;
    ax = memoryAGet16(ds, edi);
    memoryASet(ds, esi, al);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet(ds, esi + 1, al);
    push32(edi);
    sub_1b6269();
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1ba5f8;
    ax = memoryAGet16(ds, 0x20ce9d);
    bx = memoryAGet16(ds, 0x20d7b7);
    if (ax == bx)
        goto loc_1ba607;
    bx += 0x0002;
    if (ax == bx)
        goto loc_1ba607;
    goto loc_1ba66b;
loc_1ba5f8: // 0160:1ba5f8
    ax = memoryAGet16(ds, 0x20ce9d);
    if (ax != memoryAGet16(ds, 0x20d7b7))
        goto loc_1ba66b;
loc_1ba607: // 0160:1ba607
    al = memoryAGet(ds, 0x20e9c5);
    bl = memoryAGet(ds, 0x20e9c6);
    esi = 0x001ee9af;
    cx = memoryAGet16(ds, 0x20eeb0);
    cx &= 0x000f;
    if (cx > 0x0003)
        goto loc_1ba63d;
    esi = 0x001ee9c1;
    push32(eax);
    push32(ebx);
    sub_1b6113();
    ebx = pop32();
    eax = pop32();
    esi = 0x0020e9c5;
    goto loc_1ba65a;
loc_1ba63d: // 0160:1ba63d
    push32(eax);
    push32(ebx);
    sub_1b6113();
    ebx = pop32();
    eax = pop32();
    esi = 0x0020e9c5;
    cx = 0;
    cl = memoryAGet(ds, 0x20e9b9);
    cl += 0x1a;
    memoryASet(ds, esi + 9, cl);
loc_1ba65a: // 0160:1ba65a
    flags.carry = bl < 0x44;
    bl -= 0x44;
    if (!flags.carry)
        goto loc_1ba661;
    al--;
loc_1ba661: // 0160:1ba661
    memoryASet(ds, esi, al);
    memoryASet(ds, esi + 1, bl);
    sub_1b6269();
loc_1ba66b: // 0160:1ba66b
    memoryASet16(ds, 0x20ce9d, memoryAGet16(ds, 0x20ce9d) + 1);
    edi = pop32();
    ecx = pop32();
    edi += 0x00000004;
    ecx--;
    if (ecx)
        goto loc_1ba5ac;
    goto loc_1ba723;
loc_1ba683: // 0160:1ba683
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1ba723;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    esi = 0x001ef1e8;
    sub_1ba9cd();
    cx = memoryAGet16(ds, 0x20e90d);
    edi = esi;
    memoryASet16(ds, 0x20e905, 0x0000);
    ecx &= 0x0000ffff;
loc_1ba6ba: // 0160:1ba6ba
    esi = 0x001ee998;
    push32(ecx);
    push32(edi);
    sub_1b6113();
    edi = pop32();
    esi = 0x0020e9c5;
    ax = memoryAGet16(ds, edi);
    memoryASet(ds, esi, al);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet(ds, esi + 1, al);
    push32(edi);
    sub_1b6269();
    esi = 0x0020e9c5;
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) - 0x40);
    memoryASet(ds, esi + 4, 0x13);
    memoryASet(ds, esi + 5, 0x0e);
    memoryASet(ds, esi + 6, 0x13);
    sub_1b6269();
    esi = 0x001ee99f;
    sub_1b6113();
    edi = pop32();
    esi = 0x0020e9c5;
    ax = memoryAGet16(ds, edi);
    memoryASet(ds, esi, al);
    ax = memoryAGet16(ds, edi + 2);
    al += 0x0b;
    memoryASet(ds, esi + 1, al);
    push32(edi);
    sub_1b6269();
    edi = pop32();
    edi += 0x00000004;
    ecx = pop32();
    if (--ecx)
        goto loc_1ba6ba;
loc_1ba723: // 0160:1ba723
    esp += 4;
    return;
}
void sub_1ba724() // 0160:1ba724 +long
{
    esp -= 4;
    sub_1ba9c8();
    bp = memoryAGet16(ds, 0x20e90d);
    memoryASet16(ds, 0x20e8b9, 0x0000);
loc_1ba739: // 0160:1ba739
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    esi += 0x00000004;
    cx = memoryAGet16(ds, 0x20e8b9);
    cx <<= 1;
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x001f;
    dx >>= 4;
    if (!dx)
        goto loc_1ba760;
    cx++;
loc_1ba760: // 0160:1ba760
    cx += 0x0020;
    dx = 0x0004;
    if ((short)memoryAGet16(ds, 0x20ec45) < (short)0x00c8)
        goto loc_1ba788;
    cx = memoryAGet16(ds, 0x20e90d);
    cx <<= 1;
    cx += memoryAGet16(ds, 0x20e8b9);
    cx += 0x0020;
loc_1ba788: // 0160:1ba788
    push32(ebp);
    push32(esi);
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    esi = 0x0020e8e1;
    cx = memoryAGet16(ds, 0x20e8b9);
    cx <<= 1;
    dx = cx;
    cx <<= 1;
    cx += dx;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ecx);
    memoryASet16(ds, 0x20cec3, cx);
    cx += 0x000f;
    bx += 0x0030;
    sub_1bd51f();
    dx = 0x0004;
    ax++;
    sub_1bd7dd();
    esi = pop32();
    ebp = pop32();
    memoryASet16(ds, 0x20e8b9, memoryAGet16(ds, 0x20e8b9) + 1);
    bp--;
    if (bp)
        goto loc_1ba739;
    cx = memoryAGet16(ds, 0x20e90d);
    edi = 0x0020ecbf;
    if (!(memoryAGet16(ds, 0x20ecbd) & 0xffff))
        goto loc_1ba81f;
    esi = 0x0020e8e3;
    ecx &= 0x0000ffff;
loc_1ba807: // 0160:1ba807
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, edi, ax);
    ax = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, edi + 2, ax);
    esi += 0x00000006;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1ba807;
    goto loc_1ba857;
loc_1ba81f: // 0160:1ba81f
    esi = 0x0020e8e1;
    ebx = 0x002247a6;
loc_1ba829: // 0160:1ba829
    ax = memoryAGet16(ds, esi);
    ax <<= 2;
    dx = ax;
    ax <<= 1;
    ax += dx;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, ebx + eax + 8);
    memoryASet16(ds, edi, dx);
    dx = memoryAGet16(ds, ebx + eax + 10);
    memoryASet16(ds, edi + 2, dx);
    edi += 0x00000004;
    esi += 0x00000006;
    if (--ecx)
        goto loc_1ba829;
loc_1ba857: // 0160:1ba857
    sub_1ba9c8();
    bp = memoryAGet16(ds, 0x20e90d);
    memoryASet16(ds, 0x20e8b9, 0x0000);
    edi = 0x0020ecbf;
loc_1ba871: // 0160:1ba871
    sub_1ba8b8();
    ax -= 0x0018;
    if (!(memoryAGet16(ds, 0x20ecbd) & 0xffff))
        goto loc_1ba88d;
    ax += 0x0040;
    bx += 0x002e;
loc_1ba88d: // 0160:1ba88d
    sub_1ba934();
    if (!(memoryAGet16(ds, 0x20ecbd) & 0xffff))
        goto loc_1ba8a2;
    edi += 0x00000002;
    goto loc_1ba8b0;
loc_1ba8a2: // 0160:1ba8a2
    sub_1ba8b8();
    ax += 0x0044;
    sub_1ba934();
loc_1ba8b0: // 0160:1ba8b0
    esi += 0x00000004;
    bp--;
    if (bp)
        goto loc_1ba871;
    esp += 4;
}
void sub_1ba8b8() // 0160:1ba8b8 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, edi);
    edi += 0x00000002;
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20ceb7, 0x0000);
    memoryASet16(ds, 0x20ceb9, 0x0000);
    memoryASet16(ds, 0x20cebb, 0x0000);
loc_1ba8e2: // 0160:1ba8e2
    if ((short)ax < (short)0x03e8)
        goto loc_1ba8f5;
    ax -= 0x03e8;
    memoryASet16(ds, 0x20cebb, memoryAGet16(ds, 0x20cebb) + 1);
    goto loc_1ba8e2;
loc_1ba8f5: // 0160:1ba8f5
    if ((short)ax < (short)0x0064)
        goto loc_1ba908;
    ax -= 0x0064;
    memoryASet16(ds, 0x20ceb9, memoryAGet16(ds, 0x20ceb9) + 1);
    goto loc_1ba8f5;
loc_1ba908: // 0160:1ba908
    if ((short)ax < (short)0x000a)
        goto loc_1ba91b;
    ax -= 0x000a;
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) + 1);
    goto loc_1ba908;
loc_1ba91b: // 0160:1ba91b
    memoryASet16(ds, 0x20ceb1, ax);
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    bx += 0x0012;
    cx = memoryAGet16(ds, 0x20ceb1);
    esp += 4;
}
void sub_1ba934() // 0160:1ba934 +long
{
    esp -= 4;
    push32(ebp);
    push32(esi);
    push32(edi);
    if (!(memoryAGet16(ds, 0x20cebb) & 0xffff))
        goto loc_1ba960;
    push32(eax);
    push32(ebx);
    ax -= 0x000e;
    cx = memoryAGet16(ds, 0x20cebb);
    dx = 0x0004;
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    ax += 0x0003;
    goto loc_1ba96b;
loc_1ba960: // 0160:1ba960
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1ba989;
loc_1ba96b: // 0160:1ba96b
    push32(eax);
    push32(ebx);
    ax -= 0x0009;
    cx = memoryAGet16(ds, 0x20ceb9);
    dx = 0x0004;
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    ax += 0x0003;
    goto loc_1ba994;
loc_1ba989: // 0160:1ba989
    if (!(memoryAGet16(ds, 0x20ceb7) & 0xffff))
        goto loc_1ba9b0;
loc_1ba994: // 0160:1ba994
    push32(eax);
    push32(ebx);
    ax -= 0x0004;
    cx = memoryAGet16(ds, 0x20ceb7);
    dx = 0x0004;
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    ax += 0x0004;
loc_1ba9b0: // 0160:1ba9b0
    push32(eax);
    push32(ebx);
    cx = memoryAGet16(ds, 0x20ceb1);
    dx = 0x0004;
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    esp += 4;
}
void sub_1ba9c8() // 0160:1ba9c8 +long
{
    esp -= 4;
    esi = 0x001ef1c0;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1ba9f4;
    esi += 0x00000004;
    if (memoryAGet16(ds, 0x20e90d) == 0x0002)
        goto loc_1ba9f4;
    esi += 0x00000008;
    if (memoryAGet16(ds, 0x20e90d) == 0x0003)
        goto loc_1ba9f4;
    esi += 0x0000000c;
loc_1ba9f4: // 0160:1ba9f4
    esp += 4;
    return;
}
void sub_1ba9cd() // 0160:1ba9cd +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1ba9f4;
    esi += 0x00000004;
    if (memoryAGet16(ds, 0x20e90d) == 0x0002)
        goto loc_1ba9f4;
    esi += 0x00000008;
    if (memoryAGet16(ds, 0x20e90d) == 0x0003)
        goto loc_1ba9f4;
    esi += 0x0000000c;
loc_1ba9f4: // 0160:1ba9f4
    esp += 4;
    return;
}
void sub_1ba9f5() // 0160:1ba9f5 +long
{
    esp -= 4;
    goto loc_1ba9f5;
loc_1b18a6: // 0160:1b18a6
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b1919;
    if (al != 0x79)
        goto loc_1b18be;
    goto loc_1c72ac;
loc_1b18be: // 0160:1b18be
    if (al != 0x8a)
        goto loc_1b18c7;
    goto loc_1c735c;
loc_1b18c7: // 0160:1b18c7
    if (al != 0x80)
        goto loc_1b18d0;
    goto loc_1c740c;
loc_1b18d0: // 0160:1b18d0
    if (al != 0x82)
        goto loc_1b18e3;
    eax = memoryAGet32(ds, 0x2eebd0);
    memoryASet32(ds, 0x20ee7b, eax);
    goto loc_1c74bc;
loc_1b18e3: // 0160:1b18e3
    if (al != 0xa5)
        goto loc_1b18ec;
    goto loc_1c7784;
loc_1b18ec: // 0160:1b18ec
    if (al != 0x8b)
        goto loc_1b18f5;
    goto loc_1c76d4;
loc_1b18f5: // 0160:1b18f5
    if (al != 0x06)
        goto loc_1b18fe;
    goto loc_1c756c;
loc_1b18fe: // 0160:1b18fe
    if (al != 0x09)
        goto loc_1b1907;
    goto loc_1c7624;
loc_1b1907: // 0160:1b1907
    if (al != 0xa8)
        goto loc_1b1910;
    goto loc_1c783c;
loc_1b1910: // 0160:1b1910
    if (al != 0x81)
        goto loc_1b1919;
    goto loc_1c78ec;
loc_1b1919: // 0160:1b1919
    esp += 4;
    return;
    // gap 37083 bytes
loc_1ba9f5: // 0160:1ba9f5
    sub_1baa06();
    sub_1b191a();
    al = 0x82;
    goto loc_1b18a6;
    // gap 51366 bytes
loc_1c72ac: // 0160:1c72ac
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c72ff;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c72fd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c72e4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c72e4: // 0160:1c72e4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c72fd: // 0160:1c72fd
    goto loc_1c7336;
loc_1c72ff: // 0160:1c72ff
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000000)
        goto loc_1c7336;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7320;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7320: // 0160:1c7320
    sub_1c82bc();
    eax = 0;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000000);
loc_1c7336: // 0160:1c7336
    memoryASet32(ss, ebp + -8, 0x0020a9f4);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c735c: // 0160:1c735c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c73af;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c73ad;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7394;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7394: // 0160:1c7394
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c73ad: // 0160:1c73ad
    goto loc_1c73e9;
loc_1c73af: // 0160:1c73af
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c73e9;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c73d0;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c73d0: // 0160:1c73d0
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c73e9: // 0160:1c73e9
    memoryASet32(ss, ebp + -8, 0x0020aa00);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c740c: // 0160:1c740c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c745f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c745d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7444;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7444: // 0160:1c7444
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c745d: // 0160:1c745d
    goto loc_1c7499;
loc_1c745f: // 0160:1c745f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c7499;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7480;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7480: // 0160:1c7480
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7499: // 0160:1c7499
    memoryASet32(ss, ebp + -8, 0x0020aa08);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c74bc: // 0160:1c74bc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c750f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c750d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c74f4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c74f4: // 0160:1c74f4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c750d: // 0160:1c750d
    goto loc_1c7549;
loc_1c750f: // 0160:1c750f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c7549;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7530;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7530: // 0160:1c7530
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7549: // 0160:1c7549
    memoryASet32(ss, ebp + -8, 0x0020aa14);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c756c: // 0160:1c756c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c75bf;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c75bd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c75a4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c75a4: // 0160:1c75a4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c75bd: // 0160:1c75bd
    goto loc_1c7604;
loc_1c75bf: // 0160:1c75bf
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c75d1;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c75d3;
loc_1c75d1: // 0160:1c75d1
    goto loc_1c7604;
loc_1c75d3: // 0160:1c75d3
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c75eb;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c75eb: // 0160:1c75eb
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c7604: // 0160:1c7604
    memoryASet32(ss, ebp + -8, 0x0020aa24);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7624: // 0160:1c7624
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7677;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c7675;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c765c;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c765c: // 0160:1c765c
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c7675: // 0160:1c7675
    goto loc_1c76b1;
loc_1c7677: // 0160:1c7677
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000001)
        goto loc_1c76b1;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7698;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7698: // 0160:1c7698
    sub_1c82bc();
    eax = 0x00000001;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000001);
loc_1c76b1: // 0160:1c76b1
    memoryASet32(ss, ebp + -8, 0x0020aa30);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 3 bytes
loc_1c76d4: // 0160:1c76d4
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7727;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c7725;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c770c;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c770c: // 0160:1c770c
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c7725: // 0160:1c7725
    goto loc_1c777b;
loc_1c7727: // 0160:1c7727
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7761;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7748;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7748: // 0160:1c7748
    sub_1c82bc();
    eax = 0x00000002;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000002);
loc_1c7761: // 0160:1c7761
    memoryASet32(ss, ebp + -8, 0x0020aa3c);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
loc_1c777b: // 0160:1c777b
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7784: // 0160:1c7784
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c77d7;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c77d5;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c77bc;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c77bc: // 0160:1c77bc
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c77d5: // 0160:1c77d5
    goto loc_1c781c;
loc_1c77d7: // 0160:1c77d7
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c77e9;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c77eb;
loc_1c77e9: // 0160:1c77e9
    goto loc_1c781c;
loc_1c77eb: // 0160:1c77eb
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7803;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7803: // 0160:1c7803
    sub_1c82bc();
    eax = 0x00000002;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000002);
loc_1c781c: // 0160:1c781c
    memoryASet32(ss, ebp + -8, 0x0020aa44);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c783c: // 0160:1c783c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c788f;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c788d;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7874;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7874: // 0160:1c7874
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c788d: // 0160:1c788d
    goto loc_1c78e3;
loc_1c788f: // 0160:1c788f
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000003)
        goto loc_1c78c9;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c78b0;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c78b0: // 0160:1c78b0
    sub_1c82bc();
    eax = 0x00000003;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000003);
loc_1c78c9: // 0160:1c78c9
    memoryASet32(ss, ebp + -8, 0x0020aa4c);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0x00000001;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
loc_1c78e3: // 0160:1c78e3
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c78ec: // 0160:1c78ec
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000004)
        goto loc_1c7934;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c791b;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c791b: // 0160:1c791b
    sub_1c82bc();
    eax = 0x00000004;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000004);
loc_1c7934: // 0160:1c7934
    memoryASet32(ss, ebp + -8, 0x0020aa58);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -4, eax);
    edx = 0;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1c7de8();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1baa06() // 0160:1baa06 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1b560a();
    push32(ebx);
    push32(edi);
    sub_1bd478();
    cx = memoryAGet16(ds, 0x20e90d);
    if (cx == 0x0001)
        goto loc_1baa59;
    cx--;
    memoryASet16(ds, 0x20e8bb, cx);
    esi = 0x0020e8db;
    edi = 0x0020e8c1;
    cx++;
    ecx &= 0x0000ffff;
loc_1baa49: // 0160:1baa49
    esi += 0x00000006;
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    if (--ecx)
        goto loc_1baa49;
    goto loc_1baa93;
loc_1baa59: // 0160:1baa59
    esi = 0x0020e8c1;
    ax = memoryAGet16(ds, 0x20e8bb);
    cx = ax;
    ax <<= 1;
    eax &= 0x0000ffff;
    esi += eax;
    edi = esi;
    esi -= 0x00000002;
    ecx &= 0x0000ffff;
loc_1baa7c: // 0160:1baa7c
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, edi, ax);
    esi -= 0x00000002;
    edi -= 0x00000002;
    if (--ecx)
        goto loc_1baa7c;
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, edi, ax);
loc_1baa93: // 0160:1baa93
    sub_1bae42();
    edi = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    ax = memoryAGet16(ds, 0x20e8c1);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8c3);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8c5);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1bab16;
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8c7);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1bab16;
    sub_1b59d4();
loc_1bab16: // 0160:1bab16
    esi = 0x0020e8c1;
    ax = memoryAGet16(ds, 0x20e8bb);
    ax++;
    memoryASet16(ds, 0x20ceb1, ax);
    sub_1bd346();
    ax = memoryAGet16(ds, 0x20e8bb);
    ax++;
    memoryASet16(ds, 0x20e8ff, ax);
    ax >>= 1;
    if (memoryAGet16(ds, 0x20e90d) != 0x0003)
        goto loc_1bab4b;
    ax++;
loc_1bab4b: // 0160:1bab4b
    memoryASet16(ds, 0x20e901, ax);
    sub_1bd894();
    edx = 0x001ecd0e;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0004)
        goto loc_1bab79;
    edx = 0x001ecd20;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0003)
        goto loc_1bab79;
    edx = 0x001ecd32;
loc_1bab79: // 0160:1bab79
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1bac4e;
    memoryASet(ds, 0x20c98e, 0x31);
    memoryASet(ds, 0x20c98f, 0x15);
    memoryASet(ds, 0x20c990, 0x15);
    memoryASet(ds, 0x20c991, 0x38);
    memoryASet(ds, 0x20c992, 0x1e);
    memoryASet(ds, 0x20c993, 0x1e);
    memoryASet(ds, 0x20c99a, 0x0c);
    memoryASet(ds, 0x20c99b, 0x0c);
    memoryASet(ds, 0x20c99c, 0x31);
    memoryASet(ds, 0x20c99d, 0x1e);
    memoryASet(ds, 0x20c99e, 0x1e);
    memoryASet(ds, 0x20c99f, 0x38);
    memoryASet(ds, 0x20c9a6, 0x25);
    memoryASet(ds, 0x20c9a7, 0x05);
    memoryASet(ds, 0x20c9a8, 0x05);
    memoryASet(ds, 0x20c9a9, 0x2b);
    memoryASet(ds, 0x20c9aa, 0x0c);
    memoryASet(ds, 0x20c9ab, 0x0c);
    memoryASet(ds, 0x20c9a0, 0x05);
    memoryASet(ds, 0x20c9a1, 0x05);
    memoryASet(ds, 0x20c9a2, 0x25);
    memoryASet(ds, 0x20c9a3, 0x0c);
    memoryASet(ds, 0x20c9a4, 0x0c);
    memoryASet(ds, 0x20c9a5, 0x2b);
loc_1bac4e: // 0160:1bac4e
    memoryASet16(ds, 0x20e8bd, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e965, 0x0000);
    memoryASet16(ds, 0x20e8fb, 0x0200);
    esi = 0x001ef19c;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0004)
        goto loc_1bac95;
    esi = 0x001ef1aa;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0002)
        goto loc_1bac95;
    esi = 0x001ef1a4;
loc_1bac95: // 0160:1bac95
    memoryASet32(ds, 0x20e83f, esi);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec45, 0x0000);
    memoryASet16(ds, 0x20ee13, 0x0000);
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1baccb;
    memoryASet16(ds, 0x20ceaf, 0x0000);
loc_1baccb: // 0160:1baccb
    sub_1b4f0e();
loc_1bacd0: // 0160:1bacd0
    sub_1b5096();
    memoryASet16(ds, 0x20ec45, memoryAGet16(ds, 0x20ec45) + 1);
    sub_1b531f();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bad56;
    memoryASet16(ds, 0x20e965, memoryAGet16(ds, 0x20e965) + 1);
    ax = memoryAGet16(ds, 0x20eeb0);
    memoryASet16(ds, 0x20cec5, ax);
    ax = memoryAGet16(ds, 0x20e965);
    memoryASet16(ds, 0x20eeb0, ax);
    if (memoryAGet16(ds, 0x20ed41) & 0xffff)
        goto loc_1bad28;
    esi = 0x001ee958;
    al = 0xc3;
    bl = 0x51;
    sub_1b60a7();
loc_1bad28: // 0160:1bad28
    ax = memoryAGet16(ds, 0x20cec5);
    memoryASet16(ds, 0x20eeb0, ax);
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1bad56;
    al = memoryAGet(ds, 0x20c840);
    if (al != 0x80)
        goto loc_1bad56;
    memoryASet16(ds, 0x20ceaf, 0x0002);
    esp += 4;
    return;
loc_1bad56: // 0160:1bad56
    bx = memoryAGet16(ds, 0x20e8bd);
    if (memoryAGet16(ds, 0x20e8ff) != bx)
        goto loc_1bad74;
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1badf3;
loc_1bad74: // 0160:1bad74
    bx <<= 1;
    cx = memoryAGet16(ds, 0x20e8fb);
    esi = memoryAGet32(ds, 0x20e83f);
    ebx &= 0x0000ffff;
    if (memoryAGet16(ds, esi + ebx) != cx)
        goto loc_1badd4;
    esi = 0x001ef1ae;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0004)
        goto loc_1badb3;
    esi += 0x00000008;
    if (memoryAGet16(ds, 0x20e8ff) == 0x0003)
        goto loc_1badb3;
    esi += 0x00000006;
loc_1badb3: // 0160:1badb3
    memoryASet16(ds, 0x20e8bd, memoryAGet16(ds, 0x20e8bd) + 1);
    ax = memoryAGet16(ds, 0x20e8bd);
    ax <<= 1;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20e8fb, ax);
    goto loc_1badf3;
loc_1badd4: // 0160:1badd4
    memoryASet16(ds, 0x20e8fb, memoryAGet16(ds, 0x20e8fb) + 0xfff0);
    ax = memoryAGet16(ds, 0x20e901);
    if ((short)memoryAGet16(ds, 0x20e8bd) < (short)ax)
        goto loc_1badf3;
    memoryASet16(ds, 0x20e8fb, memoryAGet16(ds, 0x20e8fb) + 0x0020);
loc_1badf3: // 0160:1badf3
    sub_1bae67();
    if (!(memoryAGet16(ds, 0x20ed41) & 0xffff))
        goto loc_1bae05;
    goto loc_1bae27;
loc_1bae05: // 0160:1bae05
    if (memoryAGet16(ds, 0x20ee13) != 0x003c)
        goto loc_1bae27;
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1bae2e;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1bae3d;
    goto loc_1bae2e;
loc_1bae27: // 0160:1bae27
    memoryASet16(ds, 0x20ee13, memoryAGet16(ds, 0x20ee13) + 1);
loc_1bae2e: // 0160:1bae2e
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bacd0;
loc_1bae3d: // 0160:1bae3d
    goto loc_1bae42;
    // gap 3 bytes
loc_1bae42: // 0160:1bae42
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1bae66;
    ax = memoryAGet16(ds, 0x20e8c5);
    bx = memoryAGet16(ds, 0x20e8c7);
    memoryASet16(ds, 0x20e8c5, bx);
    memoryASet16(ds, 0x20e8c7, ax);
loc_1bae66: // 0160:1bae66
    esp += 4;
    return;
}
void sub_1bae42() // 0160:1bae42 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1bae66;
    ax = memoryAGet16(ds, 0x20e8c5);
    bx = memoryAGet16(ds, 0x20e8c7);
    memoryASet16(ds, 0x20e8c5, bx);
    memoryASet16(ds, 0x20e8c7, ax);
loc_1bae66: // 0160:1bae66
    esp += 4;
    return;
}
void sub_1bae67() // 0160:1bae67 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e8b9, 0x0000);
loc_1bae70: // 0160:1bae70
    bx = memoryAGet16(ds, 0x20e8bd);
    if ((short)bx < (short)memoryAGet16(ds, 0x20e8b9))
        goto loc_1baf76;
    if (bx == memoryAGet16(ds, 0x20e8b9))
        goto loc_1baeab;
    esi = memoryAGet32(ds, 0x20e83f);
    bx = memoryAGet16(ds, 0x20e8b9);
    bx <<= 1;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    memoryASet16(ds, 0x20e9b5, 0x0001);
    goto loc_1baeba;
loc_1baeab: // 0160:1baeab
    memoryASet16(ds, 0x20e9b5, 0x0000);
    ax = memoryAGet16(ds, 0x20e8fb);
loc_1baeba: // 0160:1baeba
    bx = 0x00a0;
    bp = memoryAGet16(ds, 0x20e901);
    if (bp > memoryAGet16(ds, 0x20e8b9))
        goto loc_1baed2;
    bx = 0x0110;
loc_1baed2: // 0160:1baed2
    cx = memoryAGet16(ds, 0x20e8b9);
    cx <<= 1;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x001f;
    bp >>= 4;
    if (!bp)
        goto loc_1baeef;
    cx++;
loc_1baeef: // 0160:1baeef
    dx = 0x0005;
    if ((short)memoryAGet16(ds, 0x20ec45) < (short)0x00c8)
        goto loc_1baf0d;
    cx = memoryAGet16(ds, 0x20e8b9);
    cx += 0x0021;
    dx = 0x0004;
loc_1baf0d: // 0160:1baf0d
    push32(eax);
    push32(ebx);
    push32(edx);
    sub_1bd7dd();
    edx = pop32();
    ebx = pop32();
    eax = pop32();
    if (!(memoryAGet16(ds, 0x20e9b5) & 0xffff))
        goto loc_1baf5b;
    bx += 0x0030;
    cx = memoryAGet16(ds, 0x20e8b9);
    cx <<= 1;
    esi = 0x0020e8c1;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ecx);
    memoryASet16(ds, 0x20cec3, cx);
    cx += 0x0010;
    dx = 0x0004;
    sub_1bd51f();
    ax++;
    sub_1bd7dd();
loc_1baf5b: // 0160:1baf5b
    memoryASet16(ds, 0x20e8b9, memoryAGet16(ds, 0x20e8b9) + 1);
    ax = memoryAGet16(ds, 0x20e8b9);
    if (ax == memoryAGet16(ds, 0x20e8ff))
        goto loc_1baf76;
    goto loc_1bae70;
loc_1baf76: // 0160:1baf76
    if (memoryAGet16(ds, 0x20e8ff) != 0x0002)
        goto loc_1bafa8;
    ax = 0x0090;
    bx = 0x0108;
    cx = 0x0020;
    dx = 0x0004;
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_1bd7dd();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    ax = 0x0140;
    bx -= 0x0050;
    sub_1bd7dd();
loc_1bafa8: // 0160:1bafa8
    esp += 4;
    return;
}
void sub_1bafa9() // 0160:1bafa9 +long
{
    esp -= 4;
    eax = 0;
    interrupt(0x33);
    memoryASet16(ds, 0x22465e, ax);
    eax = 0x0000000f;
    cx = 0x0008;
    dx = 0x000a;
    interrupt(0x33);
    esp += 4;
}
void sub_1bafc3() // 0160:1bafc3 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    ax += 0x0080;
    bx += 0x0080;
    dx = 0;
    goto loc_1bd7dd;
    // gap 10236 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bafe1() // 0160:1bafe1 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x22465e) & 0xffff))
        goto loc_1bb00c;
    cx = memoryAGet16(ds, 0x224656);
    cx <<= 1;
    dx = memoryAGet16(ds, 0x224658);
    dx -= 0x0008;
    eax = 0x00000004;
    interrupt(0x33);
loc_1bb00c: // 0160:1bb00c
    esp += 4;
    return;
}
void sub_1bb00d() // 0160:1bb00d +long
{
    esp -= 4;
    memoryASet16(ds, 0x22465a, 0x0000);
    memoryASet16(ds, 0x22465c, 0x0000);
    if (!(memoryAGet16(ds, 0x22465e) & 0xffff))
        goto loc_1bb07e;
    eax = 0x00000003;
    interrupt(0x33);
    cx >>= 1;
    if ((short)cx >= (short)0x0008)
        goto loc_1bb044;
    cx = 0x0008;
    goto loc_1bb04f;
loc_1bb044: // 0160:1bb044
    if ((short)cx <= (short)0x0130)
        goto loc_1bb04f;
    cx = 0x0130;
loc_1bb04f: // 0160:1bb04f
    memoryASet16(ds, 0x224656, cx);
    flags.carry = (dx + 0x0008) >= 0x10000;
    dx += 0x0008;
    memoryASet16(ds, 0x224658, dx);
    bx = rcr16(bx, 0x0001);
    if (!flags.carry)
        goto loc_1bb070;
    memoryASet16(ds, 0x22465a, 0x0001);
    esp += 4;
    return;
loc_1bb070: // 0160:1bb070
    bx = rcr16(bx, 0x0001);
    if (!flags.carry)
        goto loc_1bb07e;
    memoryASet16(ds, 0x22465c, 0x0001);
loc_1bb07e: // 0160:1bb07e
    if ((short)memoryAGet16(ds, 0x224656) >= (short)0x0008)
        goto loc_1bb093;
    memoryASet16(ds, 0x224656, 0x0008);
    goto loc_1bb0a7;
loc_1bb093: // 0160:1bb093
    if ((short)memoryAGet16(ds, 0x224656) <= (short)0x0130)
        goto loc_1bb0a7;
    memoryASet16(ds, 0x224656, 0x0130);
loc_1bb0a7: // 0160:1bb0a7
    if ((short)memoryAGet16(ds, 0x224658) >= (short)0x0008)
        goto loc_1bb0bc;
    memoryASet16(ds, 0x224658, 0x0008);
    goto loc_1bb0d0;
loc_1bb0bc: // 0160:1bb0bc
    if ((short)memoryAGet16(ds, 0x224658) <= (short)0x00d4)
        goto loc_1bb0d0;
    memoryASet16(ds, 0x224658, 0x00d4);
loc_1bb0d0: // 0160:1bb0d0
    esp += 4;
    return;
}
void sub_1bb4ed() // 0160:1bb4ed +long
{
    esp -= 4;
    goto loc_1bb4ed;
loc_1bb4bc: // 0160:1bb4bc
    memoryASet16(ds, 0x22466a, 0x0001);
    memoryASet16(ds, 0x20ed4d, 0x0006);
    sub_1c1c26();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1bb4ec;
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1bb5f3;
loc_1bb4ec: // 0160:1bb4ec
    esp += 4;
    return;
loc_1bb4ed: // 0160:1bb4ed
    memoryASet16(ds, 0x20d89b, 0x0001);
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
loc_1bb514: // 0160:1bb514
    if (memoryAGet16(ds, 0x20ec87) & 0xffff)
        goto loc_1bb614;
    if (memoryAGet16(ds, 0x22464a) & 0xffff)
        goto loc_1bb4bc;
    esi = 0x00203e0a;
    edi = 0x001ec0bc;
    memoryASet16(ds, 0x20ec9d, 0x0000);
loc_1bb541: // 0160:1bb541
    ax = memoryAGet16(ds, 0x20ec8f);
    ebx = 0;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, edi + eax);
    if (bl == 0x37)
        goto loc_1bb5a1;
    if (bl == 0x38)
        goto loc_1bb5a1;
    memoryASet16(ds, 0x20d7b9, bx);
    push32(esi);
    push32(edi);
    memoryASet16(ds, 0x20eca9, 0x0001);
    sub_1b8253();
    edi = pop32();
    esi = pop32();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1bb88b;
    memoryASet16(ds, 0x20ec9d, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1bb5a1;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1bb5f3;
loc_1bb5a1: // 0160:1bb5a1
    ax = memoryAGet16(ds, 0x20ecab);
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + ax);
    if (!!(memoryAGet16(ds, 0x20ec8f) & 0xffff & 0x8000))
        goto loc_1bb5de;
    ax = memoryAGet16(ds, 0x2247a4);
    ax += 0x0005;
    if (ax != memoryAGet16(ds, 0x20ec8f))
        goto loc_1bb541;
    memoryASet16(ds, 0x20ec8f, 0x0000);
    goto loc_1bb541;
loc_1bb5de: // 0160:1bb5de
    ax = memoryAGet16(ds, 0x2247a4);
    ax += 0x0004;
    memoryASet16(ds, 0x20ec8f, ax);
    goto loc_1bb541;
loc_1bb5f3: // 0160:1bb5f3
    memoryASet16(ds, 0x20ec9d, 0x0000);
    sub_1bb8eb();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1bb88b;
    goto loc_1bb8a4;
loc_1bb614: // 0160:1bb614
    if (memoryAGet16(ds, 0x20ec87) == 0x0001)
        goto loc_1bb88c;
    if (memoryAGet16(ds, 0x20ec87) != 0x0002)
        goto loc_1bb831;
    esi = 0x002249f6;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bb69f;
    sub_1aa9d7();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet(ds, esi + 5);
    ax -= 0x0030;
    cx = 0x0064;
    mul16(cx);
    bx = ax;
    ax = memoryAGet(ds, esi + 6);
    ax -= 0x0030;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    ax = memoryAGet(ds, esi + 7);
    ax -= 0x0030;
    ax += bx;
    cx = 0x000c;
    mul16(cx);
    esi = 0x0023f52c;
    goto loc_1bb6ac;
loc_1bb69f: // 0160:1bb69f
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
loc_1bb6ac: // 0160:1bb6ac
    eax &= 0x0000ffff;
    esi += eax;
    sub_1be39c();
    edx = 0x0020edb1;
    edi = 0x0020d787;
    ecx = 0x00000006;
loc_1bb6c7: // 0160:1bb6c7
    al = memoryAGet(ds, edx);
    memoryASet(ds, edi, al);
    edx++;
    edi++;
    if (--ecx)
        goto loc_1bb6c7;
    sub_1be39c();
    edx = 0x0020edb1;
    edi = 0x0020d78d;
    ebx = 0x0020d793;
    ecx = 0x00000006;
loc_1bb6e8: // 0160:1bb6e8
    al = memoryAGet(ds, edx);
    edx++;
    memoryASet(ds, edi, al);
    edi++;
    memoryASet(ds, ebx, al);
    ebx++;
    if (--ecx)
        goto loc_1bb6e8;
    ax = memoryAGet16(ds, 0x20d7f5);
    push32(eax);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1bb70d;
    memoryASet16(ds, 0x20d8ab, 0x0005);
loc_1bb70d: // 0160:1bb70d
    memoryASet16(ds, 0x20d7f5, 0x0001);
    al = 0x82;
    sub_1b18a6();
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bb734;
    sub_1bebdd();
    sub_1c58cb();
    goto loc_1bb73e;
loc_1bb734: // 0160:1bb734
    sub_1bec59();
    sub_1abc11();
loc_1bb73e: // 0160:1bb73e
    eax = pop32();
    memoryASet16(ds, 0x20d7f5, ax);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1bb758;
    memoryASet16(ds, 0x20d8ab, 0x0000);
loc_1bb758: // 0160:1bb758
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    if (memoryAGet16(ds, 0x20d77b) != 0x0504)
        goto loc_1bb79f;
    if (memoryAGet16(ds, 0x20d77d) != 0x0909)
        goto loc_1bb79f;
    if (memoryAGet(ds, 0x20d77f) != 0x09)
        goto loc_1bb79f;
    sub_1bb8a9();
    sub_1bb8ca();
loc_1bb79f: // 0160:1bb79f
    if (memoryAGet16(ds, 0x20ec8d) != 0x0001)
        goto loc_1bb7b0;
    sub_1bb8a9();
    goto loc_1bb7b5;
loc_1bb7b0: // 0160:1bb7b0
    sub_1bb8ca();
loc_1bb7b5: // 0160:1bb7b5
    eax = memoryAGet32(ds, 0x20d77b);
    memoryASet32(ds, 0x20ec91, eax);
    al = memoryAGet(ds, 0x20d77f);
    memoryASet(ds, 0x20ec95, al);
    ax = memoryAGet16(ds, 0x20e8e1);
    bx = memoryAGet16(ds, 0x20ec89);
    if (bx == 0x0001)
        goto loc_1bb7fa;
    ax = memoryAGet16(ds, 0x20e8e7);
    if (bx == 0x0002)
        goto loc_1bb7fa;
    ax = memoryAGet16(ds, 0x20e8ed);
    if (bx == 0x0003)
        goto loc_1bb7fa;
    ax = memoryAGet16(ds, 0x20e8f3);
loc_1bb7fa: // 0160:1bb7fa
    memoryASet(ds, 0x20ec96, al);
    edx = memoryAGet32(ds, 0x20d793);
    memoryASet32(ds, 0x20ec97, edx);
    dl = memoryAGet(ds, 0x20d797);
    memoryASet(ds, 0x20ec9b, dl);
    memoryASet(ds, 0x20ec9c, al);
    memoryASet(ds, 0x20ec95, memoryAGet(ds, 0x20ec95) & 0xfe);
    memoryASet(ds, 0x20ec9b, memoryAGet(ds, 0x20ec9b) & 0xfe);
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) + 1);
loc_1bb831: // 0160:1bb831
    if (memoryAGet16(ds, 0x20ec87) == 0x0003)
        goto loc_1bb5f3;
    if (memoryAGet16(ds, 0x20ec87) != 0x0004)
        goto loc_1bb86a;
    ax = memoryAGet16(ds, 0x20ec89);
    if (ax == memoryAGet16(ds, 0x20e90d))
        goto loc_1bb88c;
    memoryASet16(ds, 0x20ec87, 0x0001);
    memoryASet16(ds, 0x20ec89, memoryAGet16(ds, 0x20ec89) + 1);
    goto loc_1bb88c;
loc_1bb86a: // 0160:1bb86a
    if (memoryAGet16(ds, 0x20ec87) != 0x0005)
        goto loc_1bb88b;
    memoryASet16(ds, 0x20ec87, 0x0000);
    memoryASet16(ds, 0x20ec89, 0x0001);
    goto loc_1bb514;
loc_1bb88b: // 0160:1bb88b
    esp += 4;
    return;
loc_1bb88c: // 0160:1bb88c
    memoryASet16(ds, 0x20ec9d, 0x0001);
    sub_1bba0a();
    if (memoryAGet16(ds, 0x20ee81) == 0x0001)
        goto loc_1bb88b;
loc_1bb8a4: // 0160:1bb8a4
    goto loc_1bb514;
}
void sub_1bb8a9() // 0160:1bb8a9 +long
{
    esp -= 4;
    memoryASet(ds, 0x20d77b, 0x05);
    memoryASet(ds, 0x20d77c, 0x00);
    memoryASet16(ds, 0x20d77d, 0x0000);
    memoryASet16(ds, 0x20d77f, 0x0000);
    esp += 4;
}
void sub_1bb8ca() // 0160:1bb8ca +long
{
    esp -= 4;
    memoryASet(ds, 0x20d793, 0x05);
    memoryASet(ds, 0x20d794, 0x00);
    memoryASet16(ds, 0x20d795, 0x0000);
    memoryASet16(ds, 0x20d797, 0x0000);
    esp += 4;
}
void sub_1bb8eb() // 0160:1bb8eb +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    edx = 0x001ed055;
    edi = 0x000a0000;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0;
    sub_1b5442();
    edi = pop32();
    sub_1b5267();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b58f3();
    push32(ebx);
    push32(edi);
    esi = 0x0020e8e1;
    sub_1bc288();
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1bb982;
    esi = 0x0020e8e7;
    sub_1bc288();
    if (memoryAGet16(ds, 0x20e90d) == 0x0002)
        goto loc_1bb982;
    esi = 0x0020e8ed;
    sub_1bc288();
    if (memoryAGet16(ds, 0x20e90d) == 0x0003)
        goto loc_1bb982;
    esi = 0x0020e8f3;
    sub_1bc288();
loc_1bb982: // 0160:1bb982
    edi = pop32();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20ceb7, ax);
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1bba0a;
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ed);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1bba0a;
    sub_1b59d4();
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, 0x20e8f3);
    memoryASet16(ds, 0x20ceb7, ax);
    if (memoryAGet16(ds, 0x20ceb7) >= 0x0010)
        goto loc_1bba0a;
    sub_1b59d4();
loc_1bba0a: // 0160:1bba0a
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20ec41, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (memoryAGet16(ds, 0x20ec87) & 0xffff)
        goto loc_1bba67;
    if (!(memoryAGet16(ds, 0x20eccf) & 0xffff))
        goto loc_1bba52;
    ax = memoryAGet16(ds, 0x20ec8d);
    if (ax == 0x0001)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1bba7e;
loc_1bba52: // 0160:1bba52
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1bba7e;
loc_1bba67: // 0160:1bba67
    if (memoryAGet16(ds, 0x20ec87) != 0x0004)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    ebx = 0;
    goto loc_1bba87;
loc_1bba7e: // 0160:1bba7e
    bx = memoryAGet16(ds, 0x20ec89);
    bx--;
loc_1bba87: // 0160:1bba87
    bx <<= 1;
    cx = bx;
    bx <<= 1;
    bx += cx;
    esi = 0x0020e8e1;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    memoryASet16(ds, 0x20ec9f, ax);
    sub_1bd406();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e999, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x0160);
    memoryASet16(ds, 0x20ec3f, 0x0120);
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbb00;
    esi = 0x0023c4ef;
    ecx = 0x00000010;
loc_1bbae6: // 0160:1bbae6
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1bbaee;
    esi--;
    if (--ecx)
        goto loc_1bbae6;
loc_1bbaee: // 0160:1bbaee
    cl += 0x02;
    if (cx >= 0x000b)
        goto loc_1bbafb;
    cx = 0x000b;
loc_1bbafb: // 0160:1bbafb
    bx = cx;
    goto loc_1bbb2b;
loc_1bbb00: // 0160:1bbb00
    ax = memoryAGet16(ds, 0x20ec8f);
    esi = 0x00203e0a;
    edi = 0x001ec0bc;
    ebx = 0;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, edi + eax);
    al = bl;
    ax <<= 2;
    esi = 0x00201804;
    ebx = 0;
    bl = memoryAGet(ds, esi + eax + 2);
loc_1bbb2b: // 0160:1bbb2b
    memoryASet16(ds, 0x20e99f, bx);
    esi = 0x001ec0a4;
    ecx = 0;
loc_1bbb39: // 0160:1bbb39
    if (bl == memoryAGet(ds, esi))
        goto loc_1bbb4e;
    esi += 0x00000002;
    cx++;
    if (cx != 0x000b)
        goto loc_1bbb39;
    bx = 0x0001;
    goto loc_1bbb53;
loc_1bbb4e: // 0160:1bbb4e
    ebx = 0;
    bl = memoryAGet(ds, esi + 1);
loc_1bbb53: // 0160:1bbb53
    memoryASet16(ds, 0x20e9a1, bx);
    memoryASet16(ds, 0x224640, 0x0001);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x224640, 0x0000);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, 0x0001);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    eax = 0x001ec090;
    memoryASet32(ds, 0x20e843, eax);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esi = 0x002249f6;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbc5f;
    sub_1aa9d7();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet(ds, esi + 5);
    ax -= 0x0030;
    cx = 0x0064;
    mul16(cx);
    bx = ax;
    ax = memoryAGet(ds, esi + 6);
    ax -= 0x0030;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    ax = memoryAGet(ds, esi + 7);
    ax -= 0x0030;
    ax += bx;
    cx = 0x000c;
    mul16(cx);
    esi = 0x0023f52c;
    goto loc_1bbc6c;
loc_1bbc5f: // 0160:1bbc5f
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
loc_1bbc6c: // 0160:1bbc6c
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, 0x20cebf, 0x0000);
    sub_1bc3a9();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bbcb2;
    sub_1be39c();
    memoryASet(ds, 0x20ea29, 0xc2);
    memoryASet(ds, 0x20ea2a, 0x14);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x0e);
    sub_1bc31a();
loc_1bbcb2: // 0160:1bbcb2
    memoryASet16(ds, 0x20cebf, 0x0001);
    sub_1bc3a9();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bbcf1;
    sub_1be39c();
    memoryASet(ds, 0x20ea29, 0xc3);
    memoryASet(ds, 0x20ea2a, 0x54);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x0e);
    sub_1bc31a();
loc_1bbcf1: // 0160:1bbcf1
    if (memoryAGet16(ds, 0x20ec9d) & 0xffff)
        goto loc_1bbd31;
    if (memoryAGet16(ds, 0x20ec87) != 0x0003)
        goto loc_1bbd0b;
    sub_1bbd8b();
loc_1bbd0b: // 0160:1bbd0b
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1bbd1e;
    memoryASet16(ds, 0x20d8ab, 0x0000);
loc_1bbd1e: // 0160:1bbd1e
    memoryASet16(ds, 0x20edab, 0x0000);
    sub_1b4f0e();
    sub_1b3af9();
loc_1bbd31: // 0160:1bbd31
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1bbee7;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bbd54;
    esp += 4;
    return;
loc_1bbd54: // 0160:1bbd54
    eax = 0x001ec090;
    memoryASet32(ds, 0x20e843, eax);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20ceb7, 0x0006);
    sub_1bc57d();
    sub_1bbee8();
    sub_1bc1bf();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bbd31;
    // gap 348 bytes
loc_1bbee7: // 0160:1bbee7
    esp += 4;
    return;
}
void sub_1bba0a() // 0160:1bba0a +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231d4, 0x0000);
    memoryASet16(ds, 0x20ec41, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if (memoryAGet16(ds, 0x20ec87) & 0xffff)
        goto loc_1bba67;
    if (!(memoryAGet16(ds, 0x20eccf) & 0xffff))
        goto loc_1bba52;
    ax = memoryAGet16(ds, 0x20ec8d);
    if (ax == 0x0001)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1bba7e;
loc_1bba52: // 0160:1bba52
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    goto loc_1bba7e;
loc_1bba67: // 0160:1bba67
    if (memoryAGet16(ds, 0x20ec87) != 0x0004)
        goto loc_1bba7e;
    memoryASet16(ds, 0x20e82f, 0x0001);
    ebx = 0;
    goto loc_1bba87;
loc_1bba7e: // 0160:1bba7e
    bx = memoryAGet16(ds, 0x20ec89);
    bx--;
loc_1bba87: // 0160:1bba87
    bx <<= 1;
    cx = bx;
    bx <<= 1;
    bx += cx;
    esi = 0x0020e8e1;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    memoryASet16(ds, 0x20ec9f, ax);
    sub_1bd406();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e999, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x0160);
    memoryASet16(ds, 0x20ec3f, 0x0120);
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbb00;
    esi = 0x0023c4ef;
    ecx = 0x00000010;
loc_1bbae6: // 0160:1bbae6
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1bbaee;
    esi--;
    if (--ecx)
        goto loc_1bbae6;
loc_1bbaee: // 0160:1bbaee
    cl += 0x02;
    if (cx >= 0x000b)
        goto loc_1bbafb;
    cx = 0x000b;
loc_1bbafb: // 0160:1bbafb
    bx = cx;
    goto loc_1bbb2b;
loc_1bbb00: // 0160:1bbb00
    ax = memoryAGet16(ds, 0x20ec8f);
    esi = 0x00203e0a;
    edi = 0x001ec0bc;
    ebx = 0;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, edi + eax);
    al = bl;
    ax <<= 2;
    esi = 0x00201804;
    ebx = 0;
    bl = memoryAGet(ds, esi + eax + 2);
loc_1bbb2b: // 0160:1bbb2b
    memoryASet16(ds, 0x20e99f, bx);
    esi = 0x001ec0a4;
    ecx = 0;
loc_1bbb39: // 0160:1bbb39
    if (bl == memoryAGet(ds, esi))
        goto loc_1bbb4e;
    esi += 0x00000002;
    cx++;
    if (cx != 0x000b)
        goto loc_1bbb39;
    bx = 0x0001;
    goto loc_1bbb53;
loc_1bbb4e: // 0160:1bbb4e
    ebx = 0;
    bl = memoryAGet(ds, esi + 1);
loc_1bbb53: // 0160:1bbb53
    memoryASet16(ds, 0x20e9a1, bx);
    memoryASet16(ds, 0x224640, 0x0001);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x224640, 0x0000);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, 0x0001);
    sub_1bc4ef();
    sub_1b5126();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    eax = 0x001ec090;
    memoryASet32(ds, 0x20e843, eax);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc40e();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bc274();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esi = 0x002249f6;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbc5f;
    sub_1aa9d7();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet(ds, esi + 5);
    ax -= 0x0030;
    cx = 0x0064;
    mul16(cx);
    bx = ax;
    ax = memoryAGet(ds, esi + 6);
    ax -= 0x0030;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    ax = memoryAGet(ds, esi + 7);
    ax -= 0x0030;
    ax += bx;
    cx = 0x000c;
    mul16(cx);
    esi = 0x0023f52c;
    goto loc_1bbc6c;
loc_1bbc5f: // 0160:1bbc5f
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
loc_1bbc6c: // 0160:1bbc6c
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, 0x20cebf, 0x0000);
    sub_1bc3a9();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bbcb2;
    sub_1be39c();
    memoryASet(ds, 0x20ea29, 0xc2);
    memoryASet(ds, 0x20ea2a, 0x14);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x0e);
    sub_1bc31a();
loc_1bbcb2: // 0160:1bbcb2
    memoryASet16(ds, 0x20cebf, 0x0001);
    sub_1bc3a9();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bbcf1;
    sub_1be39c();
    memoryASet(ds, 0x20ea29, 0xc3);
    memoryASet(ds, 0x20ea2a, 0x54);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x0e);
    sub_1bc31a();
loc_1bbcf1: // 0160:1bbcf1
    if (memoryAGet16(ds, 0x20ec9d) & 0xffff)
        goto loc_1bbd31;
    if (memoryAGet16(ds, 0x20ec87) != 0x0003)
        goto loc_1bbd0b;
    sub_1bbd8b();
loc_1bbd0b: // 0160:1bbd0b
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1bbd1e;
    memoryASet16(ds, 0x20d8ab, 0x0000);
loc_1bbd1e: // 0160:1bbd1e
    memoryASet16(ds, 0x20edab, 0x0000);
    sub_1b4f0e();
    sub_1b3af9();
loc_1bbd31: // 0160:1bbd31
    sub_1b5096();
    sub_1b3b0f();
    if (!flags.zero)
        goto loc_1bbee7;
    memoryASet16(ds, 0x20ec41, memoryAGet16(ds, 0x20ec41) + 1);
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bbd54;
    esp += 4;
    return;
loc_1bbd54: // 0160:1bbd54
    eax = 0x001ec090;
    memoryASet32(ds, 0x20e843, eax);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20ceb7, 0x0006);
    sub_1bc57d();
    sub_1bbee8();
    sub_1bc1bf();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bbd31;
    // gap 348 bytes
loc_1bbee7: // 0160:1bbee7
    esp += 4;
    return;
}
void sub_1bbd8b() // 0160:1bbd8b +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ec8b, 0x0000);
    esi = 0x0020ec91;
    edi = 0x0020ec45;
    sub_1be4a7();
    esi = 0x0020ec97;
    edi = 0x0020ec4b;
    sub_1be4a7();
    edi = 0x002249f6;
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbe21;
    sub_1aa9d7();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet(ds, esi + 5);
    ax -= 0x0030;
    cx = 0x0064;
    mul16(cx);
    bx = ax;
    ax = memoryAGet(ds, esi + 6);
    ax -= 0x0030;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    ax = memoryAGet(ds, esi + 7);
    ax -= 0x0030;
    ax += bx;
    cx = 0x000c;
    mul16(cx);
    edi = 0x0023f52c;
    goto loc_1bbe2e;
loc_1bbe21: // 0160:1bbe21
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
loc_1bbe2e: // 0160:1bbe2e
    eax &= 0x0000ffff;
    edi += eax;
    ax = memoryAGet16(ds, 0x20ec45);
    ax &= 0x3fff;
    bx = memoryAGet16(ds, edi);
    bx &= 0x3fff;
    if ((short)bx <= (short)ax)
        goto loc_1bbe55;
    memoryASet16(ds, 0x20ec8b, 0x0001);
loc_1bbe55: // 0160:1bbe55
    ax = memoryAGet16(ds, 0x20ec4b);
    ax &= 0x3fff;
    bx = memoryAGet16(ds, edi + 6);
    bx &= 0x3fff;
    if ((short)bx <= (short)ax)
        goto loc_1bbe8c;
    if (!(memoryAGet16(ds, 0x20ec8b) & 0xffff))
        goto loc_1bbe83;
    memoryASet16(ds, 0x20ec8b, 0x0003);
    goto loc_1bbe8c;
loc_1bbe83: // 0160:1bbe83
    memoryASet16(ds, 0x20ec8b, 0x0002);
loc_1bbe8c: // 0160:1bbe8c
    if (!(memoryAGet16(ds, 0x20ec8b) & 0xffff))
        goto loc_1bbee7;
    esi = 0x0020ec45;
    ecx = 0x0000000c;
    if (memoryAGet16(ds, 0x20ec8b) == 0x0003)
        goto loc_1bbec4;
    ecx = 0x00000006;
    if (memoryAGet16(ds, 0x20ec8b) == 0x0001)
        goto loc_1bbec4;
    edi += 0x00000006;
    esi += 0x00000006;
loc_1bbec4: // 0160:1bbec4
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bbedd;
    sub_1b2cde();
    sub_1bea97();
    goto loc_1bbee7;
loc_1bbedd: // 0160:1bbedd
    sub_1b2d91();
    sub_1beae9();
loc_1bbee7: // 0160:1bbee7
    esp += 4;
    return;
}
void sub_1bbee8() // 0160:1bbee8 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ec87) & 0xffff))
        goto loc_1bc0e6;
    if (memoryAGet16(ds, 0x20ec87) == 0x0001)
        goto loc_1bc0b7;
    if (memoryAGet16(ds, 0x20ec87) == 0x0003)
        goto loc_1bbfb8;
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) != 0x0bb8)
        goto loc_1bbf39;
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1bbf4b;
loc_1bbf39: // 0160:1bbf39
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1bbf4b;
    memoryASet16(ds, 0x20edab, 0x0000);
loc_1bbf4b: // 0160:1bbf4b
    memoryASet16(ds, 0x20eccf, 0x0001);
    sub_1bc2af();
    memoryASet16(ds, 0x20ec89, 0x0001);
    esi = 0x001eef26;
    al = 0xc4;
    bl = 0x14;
    sub_1b60a7();
    esi = 0x001eefdc;
    sub_1b60d3();
    esi = 0x001eefe2;
    sub_1b60d3();
    memoryASet16(ds, 0x20cebb, 0x002a);
    sub_1bc168();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bbfb7;
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) + 0x0002);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1bbfb7;
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) - 1);
loc_1bbfb7: // 0160:1bbfb7
    esp += 4;
    return;
loc_1bbfb8: // 0160:1bbfb8
    sub_1bc2af();
    if (!(memoryAGet16(ds, 0x20ec8b) & 0xffff))
        goto loc_1bbff1;
    if (memoryAGet16(ds, 0x20ec8b) == 0x0001)
        goto loc_1bbfea;
    if (memoryAGet16(ds, 0x20ec8b) == 0x0002)
        goto loc_1bbfe3;
    esi = 0x001eef4b;
    goto loc_1bbff6;
loc_1bbfe3: // 0160:1bbfe3
    esi = 0x001eef5a;
    goto loc_1bbff6;
loc_1bbfea: // 0160:1bbfea
    esi = 0x001eef6c;
    goto loc_1bbff6;
loc_1bbff1: // 0160:1bbff1
    esi = 0x001eef39;
loc_1bbff6: // 0160:1bbff6
    al = 0xc4;
    bl = 0x14;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20ec8d) == 0x0001)
        goto loc_1bc055;
    esi = 0x001eef7f;
    sub_1b60d3();
    edx = 0x0020ec91;
    if (memoryAGet(ds, edx) != 0x05)
        goto loc_1bc029;
    esi = 0x001eef9b;
    sub_1b60d3();
    goto loc_1bc09f;
loc_1bc029: // 0160:1bc029
    memoryASet(ds, 0x20ea29, 0xc5);
    memoryASet(ds, 0x20ea2a, 0xdd);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x07);
    memoryASet16(ds, 0x20ceb9, 0x0000);
    sub_1bc34a();
    goto loc_1bc09f;
loc_1bc055: // 0160:1bc055
    esi = 0x001eef8d;
    sub_1b60d3();
    edx = 0x0020ec97;
    if (memoryAGet(ds, edx) != 0x05)
        goto loc_1bc075;
    esi = 0x001eef9b;
    sub_1b60d3();
    goto loc_1bc09f;
loc_1bc075: // 0160:1bc075
    memoryASet(ds, 0x20ea29, 0xc5);
    memoryASet(ds, 0x20ea2a, 0xdd);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x07);
    memoryASet16(ds, 0x20ceb9, 0x0000);
    sub_1bc34a();
loc_1bc09f: // 0160:1bc09f
    sub_1bc2de();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bc0b6;
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) + 1);
loc_1bc0b6: // 0160:1bc0b6
    esp += 4;
    return;
loc_1bc0b7: // 0160:1bc0b7
    sub_1bc2af();
    esi = 0x001eeff8;
    al = 0xc4;
    bl = 0x14;
    sub_1b60a7();
    sub_1bc2fe();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bc167;
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) + 1);
    esp += 4;
    return;
loc_1bc0e6: // 0160:1bc0e6
    sub_1bc2af();
    esi = 0x001eefe9;
    al = 0xc4;
    bl = 0x14;
    sub_1b60a7();
    esi = 0x001eefc1;
    sub_1b60d3();
    esi = 0x001eefca;
    sub_1b60d3();
    esi = 0x001eefd4;
    sub_1b60d3();
    memoryASet16(ds, 0x20cebb, 0x0042);
    sub_1bc1a6();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bc167;
    memoryASet16(ds, 0x20ec8d, 0x0001);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1bc160;
    memoryASet16(ds, 0x20ec8d, memoryAGet16(ds, 0x20ec8d) + 0x0002);
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bc160;
    memoryASet16(ds, 0x20ec87, 0x0005);
    esp += 4;
    return;
loc_1bc160: // 0160:1bc160
    memoryASet16(ds, 0x20ec87, memoryAGet16(ds, 0x20ec87) + 1);
loc_1bc167: // 0160:1bc167
    esp += 4;
    return;
}
void sub_1bc168() // 0160:1bc168 +long
{
    esp -= 4;
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0028);
    sub_1b49c8();
    ax += memoryAGet16(ds, 0x20cebb);
    if (!bp)
        goto loc_1bc19d;
    ax += 0x0002;
loc_1bc19d: // 0160:1bc19d
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 5687 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bc1a6() // 0160:1bc1a6 +long
{
    esp -= 4;
    goto loc_1bc1a6;
loc_1bc17f: // 0160:1bc17f
    memoryASet16(ds, 0x20ceb1, 0x0028);
    sub_1b49c8();
    ax += memoryAGet16(ds, 0x20cebb);
    if (!bp)
        goto loc_1bc19d;
    ax += 0x0002;
loc_1bc19d: // 0160:1bc19d
    dx = 0x0001;
    goto loc_1bd7dd;
loc_1bc1a6: // 0160:1bc1a6
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
    goto loc_1bc17f;
    // gap 5662 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bc1bf() // 0160:1bc1bf +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20ec87) != 0x0004)
        goto loc_1bc1cd;
    ecx = 0;
    goto loc_1bc1da;
loc_1bc1cd: // 0160:1bc1cd
    cx = memoryAGet16(ds, 0x20ec89);
    cx--;
    cx <<= 2;
loc_1bc1da: // 0160:1bc1da
    cx += 0x0012;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x001f;
    bp >>= 4;
    if (!bp)
        goto loc_1bc1f1;
    cx++;
loc_1bc1f1: // 0160:1bc1f1
    if (memoryAGet16(ds, 0x20ec87) != 0x0003)
        goto loc_1bc20a;
    if (memoryAGet16(ds, 0x20ec8b) & 0xffff)
        goto loc_1bc20a;
    cx += 0x0002;
loc_1bc20a: // 0160:1bc20a
    ax = 0x0128;
    bx = 0x011e;
    dx = 0x0004;
    if ((short)memoryAGet16(ds, 0x20ec41) < (short)0x00c8)
        goto loc_1bc22c;
    cx = 0x0028;
    cx += memoryAGet16(ds, 0x20ec89);
loc_1bc22c: // 0160:1bc22c
    push32(eax);
    push32(ebx);
    push32(ecx);
    dx = 0x0004;
    sub_1bd7dd();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    push32(eax);
    push32(ebx);
    push32(ecx);
    bx += 0x0030;
    cx = 0x0027;
    bp = memoryAGet16(ds, 0x20ec9f);
    memoryASet16(ds, 0x20cec3, bp);
    sub_1bd51f();
    ax++;
    dx = 0x0004;
    sub_1bd7dd();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    cx = 0x0022;
    dx = 0x0008;
    goto loc_1bd507;
    // gap 4755 bytes
loc_1bd507: // 0160:1bd507
    ax -= 0x0008;
    bx -= 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1bc274() // 0160:1bc274 +long
{
    esp -= 4;
    goto loc_1bc274;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 24978 bytes
loc_1bc274: // 0160:1bc274
    esi = 0x001eefa3;
    sub_1b60d3();
    esi = 0x001eefb2;
    goto loc_1b60d3;
}
void sub_1bc288() // 0160:1bc288 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    push32(esi);
    sub_1bd346();
    esi = pop32();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    memoryASet16(ds, 0x20ecbb, 0x0001);
    goto loc_1bd346;
    // gap 4247 bytes
loc_1bd346: // 0160:1bd346
    ax = memoryAGet16(ds, esi);
    ax <<= 2;
    eax &= 0x0000ffff;
    edi = 0x001ef15c;
    edx = memoryAGet32(ds, edi + eax);
    push32(esi);
    sub_1b52a1();
    esi = 0x0020f1c4;
    edi = memoryAGet32(ds, 0x2231e8);
    if (!(memoryAGet16(ds, 0x20ecbb) & 0xffff))
        goto loc_1bd379;
    esi += 0x00000060;
loc_1bd379: // 0160:1bd379
    ebp = esi;
    memoryASet16(ds, 0x20ceb7, 0x0002);
loc_1bd384: // 0160:1bd384
    esi = ebp;
    edx = 0x00000030;
loc_1bd38b: // 0160:1bd38b
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi += 0x00000110;
    edx--;
    if (edx)
        goto loc_1bd38b;
    ebp += 0x00000030;
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (memoryAGet16(ds, 0x20ceb7))
        goto loc_1bd384;
    esi = pop32();
    esi += 0x00000002;
    memoryASet32(ds, 0x2231e8, memoryAGet32(ds, 0x2231e8) + 0x00001200);
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    if (memoryAGet16(ds, 0x20ceb1))
        goto loc_1bd346;
    memoryASet16(ds, 0x20ecbb, 0x0000);
    esp += 4;
}
void sub_1bc2af() // 0160:1bc2af +long
{
    esp -= 4;
    goto loc_1bc2af;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 25021 bytes
loc_1bc2af: // 0160:1bc2af
    if (memoryAGet16(ds, 0x2231d4) == 0x0002)
        goto loc_1bc2dd;
    memoryASet16(ds, 0x2231d4, memoryAGet16(ds, 0x2231d4) + 1);
    al = 0xc5;
    bl = 0x1d;
    sub_1bc2d6();
    al = 0xc5;
    bl = 0x9d;
    sub_1bc2d6();
    al = 0xc6;
    bl = 0x1d;
    cl = 0x0b;
    goto loc_1b60e3;
loc_1bc2dd: // 0160:1bc2dd
    esp += 4;
    return;
}
void sub_1bc2d6() // 0160:1bc2d6 +long
{
    esp -= 4;
    goto loc_1bc2d6;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 25060 bytes
loc_1bc2d6: // 0160:1bc2d6
    cl = 0x0b;
    goto loc_1b60e3;
}
void sub_1bc2de() // 0160:1bc2de +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1bc2fd;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1bc2fd;
    memoryASet16(ds, 0x20e831, 0x0001);
loc_1bc2fd: // 0160:1bc2fd
    esp += 4;
    return;
}
void sub_1bc2fe() // 0160:1bc2fe +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x20c840);
    if (al != 0x80)
        goto loc_1bc319;
    al = memoryAGet(ds, 0x20e837);
    if (al == 0x80)
        goto loc_1bc319;
    memoryASet16(ds, 0x20e831, 0x0001);
loc_1bc319: // 0160:1bc319
    esp += 4;
    return;
}
void sub_1bc31a() // 0160:1bc31a +long
{
    esp -= 4;
    sub_1bc33c();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bc33c();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esp += 4;
}
void sub_1bc33c() // 0160:1bc33c +long
{
    esp -= 4;
    edx = 0x0020edb1;
    memoryASet16(ds, 0x20ceb9, 0x0001);
    edi = 0x0020ea2d;
    ecx = 0x00000001;
    sub_1bc39e();
    memoryASet(ds, edi, 0x2e);
    edi++;
    ecx = 0x00000002;
    sub_1bc39e();
    memoryASet(ds, edi, 0x2e);
    edi++;
    ecx = 0x00000002;
    sub_1bc39e();
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1bc391;
    memoryASet(ds, edi, 0x20);
    edi++;
    ecx = 0x00000006;
loc_1bc389: // 0160:1bc389
    al = memoryAGet(ds, edx);
    memoryASet(ds, edi, al);
    edx++;
    edi++;
    if (--ecx)
        goto loc_1bc389;
loc_1bc391: // 0160:1bc391
    push32(esi);
    esi = 0x0020ea29;
    sub_1b60d3();
    esi = pop32();
    esp += 4;
}
void sub_1bc34a() // 0160:1bc34a +long
{
    esp -= 4;
    edi = 0x0020ea2d;
    ecx = 0x00000001;
    sub_1bc39e();
    memoryASet(ds, edi, 0x2e);
    edi++;
    ecx = 0x00000002;
    sub_1bc39e();
    memoryASet(ds, edi, 0x2e);
    edi++;
    ecx = 0x00000002;
    sub_1bc39e();
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1bc391;
    memoryASet(ds, edi, 0x20);
    edi++;
    ecx = 0x00000006;
loc_1bc389: // 0160:1bc389
    al = memoryAGet(ds, edx);
    memoryASet(ds, edi, al);
    edx++;
    edi++;
    if (--ecx)
        goto loc_1bc389;
loc_1bc391: // 0160:1bc391
    push32(esi);
    esi = 0x0020ea29;
    sub_1b60d3();
    esi = pop32();
    esp += 4;
}
void sub_1bc39e() // 0160:1bc39e +long
{
    esp -= 4;
loc_1bc39e: // 0160:1bc39e
    al = memoryAGet(ds, edx);
    edx++;
    al += 0x30;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1bc39e;
    esp += 4;
}
void sub_1bc3a9() // 0160:1bc3a9 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ceb1, 0x0000);
    ax = memoryAGet16(ds, esi);
    ax &= 0x3fff;
    if (ax != 0x3a97)
        goto loc_1bc3e7;
    push32(esi);
    esi = 0x001eef0a;
    if (!(memoryAGet16(ds, 0x20cebf) & 0xffff))
        goto loc_1bc3d5;
    esi = 0x001eef18;
loc_1bc3d5: // 0160:1bc3d5
    sub_1bc3e8();
    esi = pop32();
    memoryASet16(ds, 0x20ceb1, 0x0001);
    esi += 0x00000006;
loc_1bc3e7: // 0160:1bc3e7
    esp += 4;
    return;
}
void sub_1bc3e8() // 0160:1bc3e8 +long
{
    esp -= 4;
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, 0x0002);
    push32(esi);
    sub_1b60d3();
    esi = pop32();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esp += 4;
}
void sub_1bc40e() // 0160:1bc40e +long
{
    esp -= 4;
    goto loc_1bc40e;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 25388 bytes
loc_1bc40e: // 0160:1bc40e
    if (!(memoryAGet16(ds, 0x22464a) & 0xffff))
        goto loc_1bc44a;
    esi = 0x0023c4e0;
    edi = 0x0020e9c5;
    ax = memoryAGet16(ds, 0x20e99f);
    ax -= 0x0002;
    memoryASet(ds, edi, al);
    edi++;
    cx = ax;
    ecx &= 0x0000ffff;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020ea5b;
    edi = 0x0020e9c5;
    goto loc_1bc46f;
    // gap 3 bytes
loc_1bc44a: // 0160:1bc44a
    esi = 0x0020ea5b;
    edi = 0x002084b8;
    cx = memoryAGet16(ds, 0x20e995);
    if (!cx)
        goto loc_1bc46f;
    ebx = 0;
    ecx &= 0x0000ffff;
loc_1bc468: // 0160:1bc468
    bl = memoryAGet(ds, edi);
    edi++;
    edi += ebx;
    if (--ecx)
        goto loc_1bc468;
loc_1bc46f: // 0160:1bc46f
    edx = memoryAGet32(ds, 0x20e843);
    ax = memoryAGet16(ds, 0x20e9a1);
    ax <<= 2;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edx + eax);
    cx = memoryAGet16(ds, edx + eax + 2);
    cx += 0x0008;
    cx -= 0x0080;
    cx >>= 3;
    dx = cx;
    dx >>= 2;
    cx &= 0x0003;
    al = 0xc0;
    al += dl;
    memoryASet(ds, esi, al);
    esi++;
    bx -= 0x0080;
    bx >>= 3;
    ax = cx;
    cx = 0x0040;
    mul16(cx);
    bl += al;
    bl += 0x05;
    memoryASet(ds, esi, bl);
    esi++;
    memoryASet(ds, esi, 0xf0);
    esi++;
    al = memoryAGet(ds, edi);
    memoryASet(ds, esi, al);
    esi++;
    eax &= 0x000000ff;
    edi++;
    ecx = eax;
    etx = esi; esi = edi; edi = etx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020ea5b;
    memoryASet16(ds, 0x20e905, 0x0002);
    goto loc_1b60d3;
}
void sub_1bc4ef() // 0160:1bc4ef +long
{
    esp -= 4;
    eax = 0x001ec090;
    memoryASet32(ds, 0x20e843, eax);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20ceb7, 0x0006);
    esi = memoryAGet32(ds, 0x20e843);
    dx = memoryAGet16(ds, 0x20e9a1);
    dx <<= 2;
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + edx);
    bx = memoryAGet16(ds, esi + edx + 2);
    cx = memoryAGet16(ds, 0x20ceb1);
    cx += memoryAGet16(ds, 0x20e999);
    ebp = 0x00000002;
    ax += 0x001c;
    cx = memoryAGet16(ds, 0x20ceb7);
    dx = 0x0004;
    sub_1bc566();
    bp = memoryAGet16(ds, 0x20e99f);
    bp -= 0x0009;
    ax += 0x0038;
    goto loc_1bc566;
    // gap 3 bytes
loc_1bc566: // 0160:1bc566
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ax += 0x0008;
    cx++;
    ebp--;
    if (ebp)
        goto loc_1bc566;
    esp += 4;
}
void sub_1bc566() // 0160:1bc566 +long
{
    esp -= 4;
loc_1bc566: // 0160:1bc566
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ax += 0x0008;
    cx++;
    ebp--;
    if (ebp)
        goto loc_1bc566;
    esp += 4;
}
void sub_1bc57d() // 0160:1bc57d +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1bc5a3;
    memoryASet16(ds, 0x20e999, memoryAGet16(ds, 0x20e999) + 1);
    if (memoryAGet16(ds, 0x20e999) != 0x0006)
        goto loc_1bc5a3;
    memoryASet16(ds, 0x20e999, 0x0000);
loc_1bc5a3: // 0160:1bc5a3
    esi = memoryAGet32(ds, 0x20e843);
    dx = memoryAGet16(ds, 0x20e9a1);
    dx <<= 2;
    edx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + edx);
    bx = memoryAGet16(ds, esi + edx + 2);
    cx = memoryAGet16(ds, 0x20ceb1);
    cx += memoryAGet16(ds, 0x20e999);
    dx = 0x0001;
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    ebp = 0x00000002;
    ax += 0x001c;
    cx = memoryAGet16(ds, 0x20ceb7);
    dx = 0x0004;
    sub_1bc633();
    bp = memoryAGet16(ds, 0x20e99f);
    bp -= 0x0009;
    ax += 0x0038;
    sub_1bc633();
    ax -= 0x0006;
    if (memoryAGet16(ds, 0x20e99f) != 0x0013)
        goto loc_1bc61d;
    ax -= 0x0004;
loc_1bc61d: // 0160:1bc61d
    cx = memoryAGet16(ds, 0x20ceb1);
    cx += memoryAGet16(ds, 0x20e999);
    dx = 0;
    goto loc_1bd7dd;
    // gap 4522 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bc633() // 0160:1bc633 +long
{
    esp -= 4;
loc_1bc633: // 0160:1bc633
    ax += 0x0008;
    ebp--;
    if (ebp)
        goto loc_1bc633;
    esp += 4;
}
void sub_1bc63b() // 0160:1bc63b +long
{
    esp -= 4;
    sub_1b9017();
    if (memoryAGet16(ds, 0x20ee81) != 0x0000)
        goto loc_1bc96a;
    memoryASet16(ds, 0x20eda1, 0x0001);
    memoryASet16(ds, 0x20e8bb, 0x000f);
    memoryASet(ds, 0x20e82f, 0x0f);
    sub_1bd2bb();
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e8df, ax);
    memoryASet16(ds, 0x20e913, 0x0003);
    esi = 0x0020e8c1;
    edi = 0x0020e915;
    ecx = 0x00000010;
loc_1bc690: // 0160:1bc690
    movsw<ES_EDI, DS_ESI>();
    edi += 0x00000002;
    if (--ecx)
        goto loc_1bc690;
    sub_1bc9ea();
    memoryASet16(ds, 0x20e955, 0x0001);
    sub_1bcf73();
loc_1bc6aa: // 0160:1bc6aa
    esi = 0x0020e915;
    edi = 0x0020e989;
    eax = 0;
    ax = memoryAGet16(ds, 0x20e913);
    eax <<= 4;
    esi += eax;
    ecx = 0x00000004;
loc_1bc6c6: // 0160:1bc6c6
    bx = memoryAGet16(ds, esi);
    if (bx == memoryAGet16(ds, 0x20e8e1))
        goto loc_1bc6d8;
    memoryASet16(ds, edi, bx);
    edi += 0x00000002;
loc_1bc6d8: // 0160:1bc6d8
    esi += 0x00000004;
    if (--ecx)
        goto loc_1bc6c6;
    eax = 0x00000004;
loc_1bc6e2: // 0160:1bc6e2
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 1);
    push32(eax);
    ecx = 0x00000003;
    esi = 0x0020e989;
    edi = 0x0020e8c1;
    for (; ecx != 0; --ecx) movsw<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20e8bb, 0x0003);
    esi = 0x00203d62;
    eax = 0;
    ax = memoryAGet16(ds, 0x20e913);
    cx = 0x0038;
    mul16(cx);
    bx = 0x0003;
    bx -= memoryAGet16(ds, 0x20ceb3);
    memoryASet16(ds, 0x20ed4f, bx);
    tx = bx; bx = ax; ax = tx;
    cx = 0x000e;
    mul16(cx);
    ax += bx;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d7b9, cx);
    ecx = memoryAGet32(ds, esi + eax + 10);
    memoryASet32(ds, 0x20d859, ecx);
    sub_1b191a();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    al = 0x80;
    sub_1b18a6();
    sub_1b8241();
    sub_1ba9f5();
    sub_1abc11();
    if (memoryAGet16(ds, 0x20ee81) == 0x0000)
        goto loc_1bc79d;
    eax = pop32();
    goto loc_1bc96a;
loc_1bc79d: // 0160:1bc79d
    esi = 0x0020e843;
    edi = 0x0020e8c1;
    ax = memoryAGet16(ds, 0x20d1f7);
    ax--;
    ax <<= 1;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, bx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1f9);
    if (ax)
        goto loc_1bc7fa;
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d16d) == 0x0002)
        goto loc_1bc7fa;
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d16f) == 0x0002)
        goto loc_1bc7fa;
    ax = 0x0003;
    if (memoryAGet16(ds, 0x20d171) == 0x0002)
        goto loc_1bc7fa;
    ax = 0x0004;
loc_1bc7fa: // 0160:1bc7fa
    ax--;
    ax <<= 1;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, bx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1fb);
    if (ax)
        goto loc_1bc847;
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d16d) == 0x0004)
        goto loc_1bc847;
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d16f) == 0x0004)
        goto loc_1bc847;
    ax = 0x0003;
    if (memoryAGet16(ds, 0x20d171) == 0x0004)
        goto loc_1bc847;
    ax = 0x0004;
loc_1bc847: // 0160:1bc847
    ax--;
    ax <<= 1;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, bx);
    esi += 0x00000002;
    ax = memoryAGet16(ds, 0x20d1fd);
    if (esi)
        goto loc_1bc891;
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d16d) == 0x0006)
        goto loc_1bc891;
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d16f) == 0x0006)
        goto loc_1bc891;
    ax = 0x0003;
    if (memoryAGet16(ds, 0x20d171) == 0x0006)
        goto loc_1bc891;
    ax = 0x0004;
loc_1bc891: // 0160:1bc891
    ax--;
    ax <<= 1;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, esi, bx);
    esi += 0x00000002;
    memoryASet16(ds, 0x20e9a7, 0x0003);
    sub_1b88fc();
    sub_1b191a();
    al = 0x79;
    sub_1b18a6();
    memoryASet(ds, 0x20e805, 0xe0);
    memoryASet(ds, 0x20eda3, 0xe0);
    memoryASet16(ds, 0x20eda1, 0x0000);
    sub_1bcf73();
    eax = pop32();
    eax--;
    if (eax)
        goto loc_1bc6e2;
    if (memoryAGet16(ds, 0x20ecb9) == 0x0063)
        goto loc_1bc8f4;
    memoryASet16(ds, 0x20ecb9, memoryAGet16(ds, 0x20ecb9) + 1);
loc_1bc8f4: // 0160:1bc8f4
    ax = memoryAGet16(ds, 0x20e915);
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bc96b;
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e9c1, ax);
    memoryASet16(ds, 0x20e9c3, 0x0000);
    sub_1b9ca1();
    esi = 0x002247a6;
    ax = memoryAGet16(ds, 0x20e8e1);
    cl = 0x0c;
    mul8(cl);
    eax &= 0x0000ffff;
    if (!(memoryAGet16(ds, esi + eax + 4) & 0xffff))
        goto loc_1bc94f;
    memoryASet16(ds, esi + eax + 4, 0x0000);
    bx = memoryAGet16(ds, 0x20ecb9);
    memoryASet16(ds, esi + eax + 6, bx);
    goto loc_1bc965;
loc_1bc94f: // 0160:1bc94f
    bx = memoryAGet16(ds, 0x20ecb9);
    cx = memoryAGet16(ds, esi + eax + 6);
    if ((short)cx <= (short)bx)
        goto loc_1bc96a;
    memoryASet16(ds, esi + eax + 6, bx);
loc_1bc965: // 0160:1bc965
    sub_1b2d91();
loc_1bc96a: // 0160:1bc96a
    esp += 4;
    return;
loc_1bc96b: // 0160:1bc96b
    sub_1bc9ff();
    esi = 0x002247a6;
    ax = memoryAGet16(ds, 0x20e8e1);
    cl = 0x0c;
    mul8(cl);
    ax += 0x0004;
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    dx = memoryAGet16(ds, 0x20e913);
    dx++;
    if (cx == 0x00ff)
        goto loc_1bc9b1;
    if ((short)cx < (short)dx)
        goto loc_1bc9c6;
    if (cx > dx)
        goto loc_1bc9b1;
    bp = memoryAGet16(ds, esi + eax + 2);
    if ((short)bp <= (short)memoryAGet16(ds, 0x20ecb9))
        goto loc_1bc9c6;
loc_1bc9b1: // 0160:1bc9b1
    memoryASet16(ds, esi + eax, dx);
    dx = memoryAGet16(ds, 0x20ecb9);
    memoryASet16(ds, esi + eax + 2, dx);
    sub_1b2d91();
loc_1bc9c6: // 0160:1bc9c6
    sub_1bc9ea();
    if (!(memoryAGet16(ds, 0x20e9b1) & 0xffff))
        goto loc_1bc9e9;
    memoryASet16(ds, 0x20e955, 0x0001);
    sub_1bcf73();
    goto loc_1bc6aa;
loc_1bc9e9: // 0160:1bc9e9
    esp += 4;
    return;
}
void sub_1bc9ea() // 0160:1bc9ea +long
{
    esp -= 4;
    esi = 0x0020e917;
    ecx = 0x00000010;
loc_1bc9f4: // 0160:1bc9f4
    memoryASet16(ds, esi, 0x0000);
    esi += 0x00000004;
    if (--ecx)
        goto loc_1bc9f4;
    esp += 4;
}
void sub_1bc9ff() // 0160:1bc9ff +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    edx = 0x0020e889;
    edi = 0x001ef454;
    esi = 0x001ef486;
    ecx = 0x00000006;
loc_1bca1d: // 0160:1bca1d
    ax = lodsw<DS_ESI>();
    bx = ax;
    ax &= 0x00fc;
    bx &= 0x0003;
    bx <<= 3;
    eax &= 0x0000ffff;
    bp = memoryAGet16(ds, edi + eax);
    memoryASet16(ds, edx, bp);
    edx += 0x00000002;
    bp = memoryAGet16(ds, edi + eax + 2);
    memoryASet16(ds, edx, bp);
    memoryASet16(ds, edx, memoryAGet16(ds, edx) + bx);
    edx += 0x00000002;
    if (--ecx)
        goto loc_1bca1d;
    memoryASet16(ds, 0x2231c4, 0x0000);
    al = 0xc0;
    bl = 0xce;
    cl = 0x0c;
    memoryASet16(ds, 0x20e905, 0x0002);
    sub_1b60e3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    al = 0xc0;
    bl = 0xce;
    cl = 0x0c;
    sub_1b60e3();
    memoryASet16(ds, 0x20e887, 0x0000);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20e9a9, 0x01c4);
    memoryASet16(ds, 0x20e9ab, 0x01c4);
    memoryASet16(ds, 0x20e9ad, 0x01c4);
    memoryASet16(ds, 0x20e9b1, 0x0001);
loc_1bcab4: // 0160:1bcab4
    sub_1b5096();
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x004e)
        goto loc_1bcb6d;
    al = memoryAGet(ds, 0x20c840);
    al &= 0xf0;
    if (!al)
        goto loc_1bcadd;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1bcb08;
loc_1bcadd: // 0160:1bcadd
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1bcb6d;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1bcb6d;
    memoryASet16(ds, 0x20e9b1, memoryAGet16(ds, 0x20e9b1) + 1);
    memoryASet16(ds, 0x20e9b1, memoryAGet16(ds, 0x20e9b1) & 0x0001);
    goto loc_1bcb6d;
loc_1bcb08: // 0160:1bcb08
    memoryASet16(ds, 0x20e955, 0x0000);
    esi = 0x0020e921;
    edi = 0x0020e925;
    ecx = 0x00000003;
loc_1bcb20: // 0160:1bcb20
    ax = memoryAGet16(ds, esi);
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bcb3d;
    if (memoryAGet16(ds, 0x20e913) == 0x0003)
        goto loc_1bcb3d;
    memoryASet16(ds, 0x20e913, memoryAGet16(ds, 0x20e913) + 1);
loc_1bcb3d: // 0160:1bcb3d
    dx = memoryAGet16(ds, edi);
    memoryASet16(ds, esi, dx);
    memoryASet16(ds, edi, ax);
    dx = memoryAGet16(ds, esi);
    if (dx != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bcb64;
    if (!(memoryAGet16(ds, 0x20e913) & 0xffff))
        goto loc_1bcb64;
    memoryASet16(ds, 0x20e913, memoryAGet16(ds, 0x20e913) - 1);
loc_1bcb64: // 0160:1bcb64
    esi += 0x00000010;
    edi += 0x00000010;
    if (--ecx)
        goto loc_1bcb20;
    esp += 4;
    return;
loc_1bcb6d: // 0160:1bcb6d
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0007;
    if (ax)
        goto loc_1bcb8a;
    if (memoryAGet16(ds, 0x20e887) == 0x0064)
        goto loc_1bcb8a;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
loc_1bcb8a: // 0160:1bcb8a
    sub_1bcb9e();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bcab4;
}
void sub_1bcb9e() // 0160:1bcb9e +long
{
    esp -= 4;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0002)
        goto loc_1bcc62;
    if (memoryAGet16(ds, 0x20e887) > 0x0018)
        goto loc_1bcbdd;
    if (memoryAGet16(ds, 0x20e9a9) == 0x00dc)
        goto loc_1bcbc9;
loc_1bcbc1: // 0160:1bcbc1
    memoryASet16(ds, 0x20e9a9, memoryAGet16(ds, 0x20e9a9) - 0x0008);
loc_1bcbc9: // 0160:1bcbc9
    ax = memoryAGet16(ds, 0x20e9a9);
    cx = 0x001a;
    sub_1bcee8();
    goto loc_1bcc62;
loc_1bcbdd: // 0160:1bcbdd
    if ((short)memoryAGet16(ds, 0x20e887) <= (short)0x001c)
        goto loc_1bcbc1;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0020)
        goto loc_1bcc62;
    if (memoryAGet16(ds, 0x20e887) > 0x003a)
        goto loc_1bcc1f;
    if (memoryAGet16(ds, 0x20e9ab) == 0x00dc)
        goto loc_1bcc0e;
loc_1bcc06: // 0160:1bcc06
    memoryASet16(ds, 0x20e9ab, memoryAGet16(ds, 0x20e9ab) - 0x0008);
loc_1bcc0e: // 0160:1bcc0e
    ax = memoryAGet16(ds, 0x20e9ab);
    cx = 0x001b;
    sub_1bcee8();
    goto loc_1bcc62;
loc_1bcc1f: // 0160:1bcc1f
    if ((short)memoryAGet16(ds, 0x20e887) <= (short)0x003e)
        goto loc_1bcc06;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0049)
        goto loc_1bcc62;
    if (memoryAGet16(ds, 0x20e9ad) == 0x00bc)
        goto loc_1bcc46;
    memoryASet16(ds, 0x20e9ad, memoryAGet16(ds, 0x20e9ad) - 0x0008);
loc_1bcc46: // 0160:1bcc46
    ax = memoryAGet16(ds, 0x20e9ad);
    cx = 0x001d;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    bx = 0x0090;
    sub_1bcef5();
loc_1bcc62: // 0160:1bcc62
    esi = 0x0020e915;
    edi = 0x001ef486;
    edx = 0x001ef454;
    memoryASet32(ds, 0x20e815, edx);
    edx = 0x0020e889;
    memoryASet32(ds, 0x20e819, edx);
    memoryASet16(ds, 0x20e8b9, 0x0000);
    memoryASet16(ds, 0x20e7fd, 0x0010);
loc_1bcc94: // 0160:1bcc94
    memoryASet16(ds, 0x20e9af, 0x0000);
    if (memoryAGet16(ds, 0x20e8b9) > 0x0005)
        goto loc_1bccae;
    sub_1bcd1f();
    goto loc_1bccf4;
loc_1bccae: // 0160:1bccae
    dx = memoryAGet16(ds, edi);
    edi += 0x00000002;
    cx = dx;
    cx <<= 2;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ecx);
    bp = dx;
    dx &= 0x00fc;
    bp &= 0x0003;
    bp <<= 3;
    edx &= 0x0000ffff;
    edx += memoryAGet32(ds, 0x20e815);
    ax = memoryAGet16(ds, edx);
    bx = memoryAGet16(ds, edx + 2);
    bx += bp;
    dx = 0x0004;
    goto loc_1bccf8;
    // gap 3 bytes
loc_1bccf4: // 0160:1bccf4
    dx = 0x0005;
loc_1bccf8: // 0160:1bccf8
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    if (memoryAGet16(ds, 0x20e9af) & 0xffff)
        goto loc_1bcd09;
    sub_1bd7dd();
loc_1bcd09: // 0160:1bcd09
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    memoryASet16(ds, 0x20e8b9, memoryAGet16(ds, 0x20e8b9) + 1);
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) - 1);
    if (memoryAGet16(ds, 0x20e7fd))
        goto loc_1bcc94;
    esp += 4;
}
void sub_1bcd1f() // 0160:1bcd1f +long
{
    esp -= 4;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0007)
        goto loc_1bcdca;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0013)
        goto loc_1bcdf1;
    if (memoryAGet16(ds, 0x20e887) == 0x0013)
        goto loc_1bcdec;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0019)
        goto loc_1bcdcc;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0025)
        goto loc_1bcdec;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0030)
        goto loc_1bce06;
    if (memoryAGet16(ds, 0x20e887) == 0x0030)
        goto loc_1bcd91;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0039)
        goto loc_1bce25;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0042)
        goto loc_1bcdec;
    if ((short)memoryAGet16(ds, 0x20e887) < (short)0x0047)
        goto loc_1bcdcc;
    goto loc_1bcdec;
loc_1bcd91: // 0160:1bcd91
    if (memoryAGet16(ds, 0x20e8b9) > 0x0002)
        goto loc_1bcdec;
    ax = memoryAGet16(ds, 0x20e8b9);
    push32(esi);
    push32(edi);
    esi = 0x001ef47a;
    edi = 0x0020e889;
    ax <<= 2;
    eax &= 0x0000ffff;
    dx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, edi + eax, dx);
    dx = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, edi + eax + 2, dx);
    edi = pop32();
    esi = pop32();
loc_1bcdca: // 0160:1bcdca
    goto loc_1bcdec;
loc_1bcdcc: // 0160:1bcdcc
    if (memoryAGet16(ds, 0x20e8b9) > 0x0002)
        goto loc_1bcdec;
    edx = memoryAGet32(ds, 0x20e819);
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + 0xfffffffc);
    if (memoryAGet16(ds, 0x20e8b9) != 0x0001)
        goto loc_1bcdec;
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + 0x00000008);
loc_1bcdec: // 0160:1bcdec
    goto loc_1bce9a;
loc_1bcdf1: // 0160:1bcdf1
    if (memoryAGet16(ds, 0x20e8b9) > 0x0002)
        goto loc_1bcdec;
    memoryASet16(ds, 0x20e9af, 0x0001);
    goto loc_1bcdec;
loc_1bce06: // 0160:1bce06
    if ((short)memoryAGet16(ds, 0x20e8b9) < (short)0x0003)
        goto loc_1bcdec;
    if (memoryAGet16(ds, 0x20e8b9) > 0x0005)
        goto loc_1bcdec;
    memoryASet16(ds, 0x20e9af, 0x0001);
    goto loc_1bcdec;
loc_1bce25: // 0160:1bce25
    if ((short)memoryAGet16(ds, 0x20e8b9) < (short)0x0003)
        goto loc_1bce9a;
    if (memoryAGet16(ds, 0x20e8b9) > 0x0005)
        goto loc_1bce9a;
    ax = memoryAGet16(ds, 0x20e8b9);
    bx = ax;
    ax -= 0x0003;
    ax <<= 1;
    bx <<= 2;
    push32(esi);
    push32(edi);
    eax &= 0x0000ffff;
    ebx &= 0x0000ffff;
    esi = 0x001ef474;
    edi = 0x0020e889;
    memoryASet16(ds, edi + ebx, memoryAGet16(ds, edi + ebx) - 0x0002);
    if (memoryAGet16(ds, 0x20e8b9) != 0x0004)
        goto loc_1bce78;
    memoryASet16(ds, edi + ebx, memoryAGet16(ds, edi + ebx) + 0x0004);
loc_1bce78: // 0160:1bce78
    cx = memoryAGet16(ds, esi + eax);
    if (cx == memoryAGet16(ds, edi + ebx + 2))
        goto loc_1bce98;
    memoryASet16(ds, edi + ebx + 2, memoryAGet16(ds, edi + ebx + 2) + 1);
    if (memoryAGet16(ds, 0x20e8b9) != 0x0004)
        goto loc_1bce98;
    memoryASet16(ds, edi + ebx + 2, memoryAGet16(ds, edi + ebx + 2) - 0x0002);
loc_1bce98: // 0160:1bce98
    edi = pop32();
    esi = pop32();
loc_1bce9a: // 0160:1bce9a
    cx = memoryAGet16(ds, edi);
    edi += 0x00000002;
    cx <<= 2;
    ecx &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + ecx);
    if (!(memoryAGet16(ds, 0x20e9af) & 0xffff))
        goto loc_1bced3;
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x001f;
    dx >>= 4;
    if (dx)
        goto loc_1bced3;
    memoryASet16(ds, 0x20e9af, 0x0000);
loc_1bced3: // 0160:1bced3
    edx = memoryAGet32(ds, 0x20e819);
    ax = memoryAGet16(ds, edx);
    bx = memoryAGet16(ds, edx + 2);
    memoryASet32(ds, 0x20e819, memoryAGet32(ds, 0x20e819) + 0x00000004);
    esp += 4;
}
void sub_1bcee8() // 0160:1bcee8 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ceb1, 0x0000);
    bx = 0x0098;
    dx = 0x0005;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bcf18;
    cx = 0x001c;
    ax += 0x0050;
    goto loc_1bd7dd;
loc_1bcf18: // 0160:1bcf18
    bx += 0x0010;
    ax += 0x0044;
    cx = 0x001f;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    ax += 0x0030;
    cx--;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    ax -= 0x0018;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x000f;
    bp >>= 2;
    if (bp != 0x0003)
        goto loc_1bcf55;
    bp = 0x0001;
loc_1bcf55: // 0160:1bcf55
    if (memoryAGet16(ds, 0x20e9b1) & 0xffff)
        goto loc_1bcf67;
    bp = -bp;
    dx = 0x0001;
loc_1bcf67: // 0160:1bcf67
    ax += bp;
    cx += 0x0002;
    goto loc_1bd7dd;
    // gap 2154 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bcef5() // 0160:1bcef5 +long
{
    esp -= 4;
    dx = 0x0005;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    if (memoryAGet16(ds, 0x20ceb1) & 0xffff)
        goto loc_1bcf18;
    cx = 0x001c;
    ax += 0x0050;
    goto loc_1bd7dd;
loc_1bcf18: // 0160:1bcf18
    bx += 0x0010;
    ax += 0x0044;
    cx = 0x001f;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    ax += 0x0030;
    cx--;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1bd7dd();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    ax -= 0x0018;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x000f;
    bp >>= 2;
    if (bp != 0x0003)
        goto loc_1bcf55;
    bp = 0x0001;
loc_1bcf55: // 0160:1bcf55
    if (memoryAGet16(ds, 0x20e9b1) & 0xffff)
        goto loc_1bcf67;
    bp = -bp;
    dx = 0x0001;
loc_1bcf67: // 0160:1bcf67
    ax += bp;
    cx += 0x0002;
    goto loc_1bd7dd;
    // gap 2154 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bcf73() // 0160:1bcf73 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1b596f();
    sub_1bd478();
    edx = 0x001ed040;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1bd879();
    sub_1bd1ac();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bd1ac();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1bd1ac();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
    if (memoryAGet16(ds, 0x20e955) & 0xffff)
        goto loc_1bcff9;
    sub_1bd042();
loc_1bcff9: // 0160:1bcff9
    sub_1b5096();
    if (!(memoryAGet(ds, 0x20c840) & 0xff))
        goto loc_1bd01e;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1bd01e;
    memoryASet16(ds, 0x20e955, 0x0000);
    esp += 4;
    return;
loc_1bd01e: // 0160:1bd01e
    esi = 0x001eeefa;
    memoryASet16(ds, 0x20e905, 0x0002);
    sub_1b60d3();
    sub_1bd1d4();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bcff9;
}
void sub_1bd042() // 0160:1bd042 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e8bb, 0x0004);
    memoryASet(ds, 0x20e82f, 0x03);
    ax = memoryAGet16(ds, 0x20e8e1);
    memoryASet16(ds, 0x20e8e7, ax);
    memoryASet16(ds, 0x20e8e1, 0x00ff);
    edx = 0x0020e917;
    memoryASet16(ds, 0x20e887, 0x0000);
    ecx = 0x00000004;
loc_1bd07a: // 0160:1bd07a
    bp = memoryAGet16(ds, 0x20e913);
    if (bp != memoryAGet16(ds, 0x20e887))
        goto loc_1bd094;
    sub_1bd124();
    edx += 0x00000010;
    goto loc_1bd0c9;
loc_1bd094: // 0160:1bd094
    push32(ecx);
    push32(edx);
    sub_1bd2c7();
    edx = pop32();
    ecx = pop32();
    ebx = 0x00000004;
    esi = 0x0020e8c1;
loc_1bd0a7: // 0160:1bd0a7
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 1);
    esi += 0x00000002;
    ebx--;
    if (ebx)
        goto loc_1bd0a7;
    ebx = 0x00000004;
    edi = 0x0020e8c1;
loc_1bd0ba: // 0160:1bd0ba
    bp = memoryAGet16(ds, edi);
    edi += 0x00000002;
    memoryASet16(ds, edx, memoryAGet16(ds, edx) + bp);
    edx += 0x00000004;
    ebx--;
    if (ebx)
        goto loc_1bd0ba;
loc_1bd0c9: // 0160:1bd0c9
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    if (--ecx)
        goto loc_1bd07a;
    ax = memoryAGet16(ds, 0x20e8e7);
    memoryASet16(ds, 0x20e8e1, ax);
    memoryASet16(ds, 0x20e809, 0x0004);
    eax = 0x0020e917;
    memoryASet32(ds, 0x20e877, eax);
    eax = 0x0020e91b;
    memoryASet32(ds, 0x20e87b, eax);
loc_1bd0fb: // 0160:1bd0fb
    push32(memoryAGet32(ds, 0x20e809));
    sub_1bd15a();
    memoryASet32(ds, 0x20e877, memoryAGet32(ds, 0x20e877) + 0x00000010);
    memoryASet32(ds, 0x20e87b, memoryAGet32(ds, 0x20e87b) + 0x00000010);
    memoryASet32(ds, 0x20e809, pop32());
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 1);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1bd0fb;
    esp += 4;
}
void sub_1bd124() // 0160:1bd124 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    edx -= 0x00000006;
    edi = edx;
    eax = 0x00000004;
    ebx = 0x00000004;
    esi = 0x0020e843;
loc_1bd139: // 0160:1bd139
    edx = edi;
    bp = memoryAGet16(ds, esi);
    esi += 0x00000002;
    ecx = 0x00000004;
loc_1bd146: // 0160:1bd146
    edx += 0x00000004;
    if (bp == memoryAGet16(ds, edx))
        goto loc_1bd150;
    if (--ecx)
        goto loc_1bd146;
loc_1bd150: // 0160:1bd150
    memoryASet16(ds, edx + 2, memoryAGet16(ds, edx + 2) + ax);
    eax--;
    ebx--;
    if (ebx)
        goto loc_1bd139;
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1bd15a() // 0160:1bd15a +long
{
    esp -= 4;
    eax = 0x00000003;
loc_1bd15f: // 0160:1bd15f
    esi = memoryAGet32(ds, 0x20e877);
    edi = memoryAGet32(ds, 0x20e87b);
    sub_1bd184();
    sub_1bd17e();
    sub_1bd17e();
    eax--;
    if (eax)
        goto loc_1bd15f;
    esp += 4;
}
void sub_1bd17e() // 0160:1bd17e +long
{
    esp -= 4;
    esi += 0x00000004;
    edi += 0x00000004;
    bx = memoryAGet16(ds, esi);
    cx = memoryAGet16(ds, edi);
    if ((short)bx < (short)cx)
        goto loc_1bd19f;
    if (bx > cx)
        goto loc_1bd19e;
    bp = memoryAGet16(ds, edi + -2);
    if (bp == memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd19f;
loc_1bd19e: // 0160:1bd19e
    esp += 4;
    return;
loc_1bd19f: // 0160:1bd19f
    edx = memoryAGet32(ds, esi + -2);
    ebp = memoryAGet32(ds, edi + -2);
    memoryASet32(ds, esi + -2, ebp);
    memoryASet32(ds, edi + -2, edx);
    esp += 4;
}
void sub_1bd184() // 0160:1bd184 +long
{
    esp -= 4;
    bx = memoryAGet16(ds, esi);
    cx = memoryAGet16(ds, edi);
    if ((short)bx < (short)cx)
        goto loc_1bd19f;
    if (bx > cx)
        goto loc_1bd19e;
    bp = memoryAGet16(ds, edi + -2);
    if (bp == memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd19f;
loc_1bd19e: // 0160:1bd19e
    esp += 4;
    return;
loc_1bd19f: // 0160:1bd19f
    edx = memoryAGet32(ds, esi + -2);
    ebp = memoryAGet32(ds, edi + -2);
    memoryASet32(ds, esi + -2, ebp);
    memoryASet32(ds, edi + -2, edx);
    esp += 4;
}
void sub_1bd1ac() // 0160:1bd1ac +long
{
    esp -= 4;
    edi = 0x001eeeba;
    memoryASet16(ds, 0x20e905, 0x0002);
    eax = 0x00000004;
loc_1bd1bf: // 0160:1bd1bf
    esi = edi;
    ebx = 0;
    bl = memoryAGet(ds, edi + 3);
    edi += ebx;
    edi += 0x00000004;
    sub_1bd2a7();
    eax--;
    if (eax)
        goto loc_1bd1bf;
    esp += 4;
}
void sub_1bd1d4() // 0160:1bd1d4 +long
{
    esp -= 4;
    esi = 0x0020e915;
    edi = 0x001ef454;
    ebp = 0x00000004;
loc_1bd1e3: // 0160:1bd1e3
    ax = memoryAGet16(ds, edi);
    bx = memoryAGet16(ds, edi + 2);
    edi += 0x00000004;
    memoryASet16(ds, 0x20e801, 0x0004);
loc_1bd1f6: // 0160:1bd1f6
    cx = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if (cx != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd21b;
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x001f;
    dx >>= 4;
    if (!dx)
        goto loc_1bd230;
    dx = 0;
    goto loc_1bd21f;
loc_1bd21b: // 0160:1bd21b
    dx = 0x0004;
loc_1bd21f: // 0160:1bd21f
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1bd230: // 0160:1bd230
    dx = 0x0004;
    sub_1bd24a();
    bx += 0x0008;
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - 1);
    if (memoryAGet16(ds, 0x20e801))
        goto loc_1bd1f6;
    ebp--;
    if (ebp)
        goto loc_1bd1e3;
    esp += 4;
}
void sub_1bd24a() // 0160:1bd24a +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    cx = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20ceb1, 0x0000);
loc_1bd257: // 0160:1bd257
    if ((short)cx < (short)0x000a)
        goto loc_1bd26a;
    cx -= 0x000a;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
    goto loc_1bd257;
loc_1bd26a: // 0160:1bd26a
    ax += 0x0058;
    cx += 0x0010;
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1bd7dd();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1bd2a2;
    ax -= 0x0008;
    cx = memoryAGet16(ds, 0x20ceb1);
    cx += 0x0010;
    dx = 0;
    sub_1bd7dd();
loc_1bd2a2: // 0160:1bd2a2
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esi += 0x00000002;
    esp += 4;
}
void sub_1bd2a7() // 0160:1bd2a7 +long
{
    esp -= 4;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1b6113();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esi = 0x0020e9c5;
    etx = esp; push32(eax); push32(ecx); push32(edx); push32(ebx); 
    push32(etx); push32(ebp); push32(esi); push32(edi);
    sub_1b6269();
    edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
    ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
    esp += 4;
}
void sub_1bd2bb() // 0160:1bd2bb +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20eeb0);
    memoryASet16(ds, 0x20c84e, ax);
    memoryASet16(ds, 0x20e8bd, 0x0000);
    esi = 0x0020e8c1;
loc_1bd2d5: // 0160:1bd2d5
    ax = memoryAGet16(ds, 0x20e8bd);
    if (ax == memoryAGet16(ds, 0x20e8bb))
        goto loc_1bd345;
    sub_1b1c22();
    al &= memoryAGet(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e8bd) & 0xffff)
        goto loc_1bd31a;
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd30b;
    al++;
    al &= memoryAGet(ds, 0x20e82f);
loc_1bd30b: // 0160:1bd30b
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    memoryASet16(ds, 0x20e8bd, memoryAGet16(ds, 0x20e8bd) + 1);
    goto loc_1bd2d5;
loc_1bd31a: // 0160:1bd31a
    bx = memoryAGet16(ds, 0x20e8bd);
    edi = 0x0020e8c1;
loc_1bd326: // 0160:1bd326
    if (ax == memoryAGet16(ds, edi))
        goto loc_1bd33b;
    edi += 0x00000002;
    bx--;
    if (bx)
        goto loc_1bd326;
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd30b;
loc_1bd33b: // 0160:1bd33b
    al++;
    al &= memoryAGet(ds, 0x20e82f);
    goto loc_1bd31a;
loc_1bd345: // 0160:1bd345
    esp += 4;
    return;
}
void sub_1bd2c7() // 0160:1bd2c7 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e8bd, 0x0000);
    esi = 0x0020e8c1;
loc_1bd2d5: // 0160:1bd2d5
    ax = memoryAGet16(ds, 0x20e8bd);
    if (ax == memoryAGet16(ds, 0x20e8bb))
        goto loc_1bd345;
    sub_1b1c22();
    al &= memoryAGet(ds, 0x20e82f);
    if (memoryAGet16(ds, 0x20e8bd) & 0xffff)
        goto loc_1bd31a;
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd30b;
    al++;
    al &= memoryAGet(ds, 0x20e82f);
loc_1bd30b: // 0160:1bd30b
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    memoryASet16(ds, 0x20e8bd, memoryAGet16(ds, 0x20e8bd) + 1);
    goto loc_1bd2d5;
loc_1bd31a: // 0160:1bd31a
    bx = memoryAGet16(ds, 0x20e8bd);
    edi = 0x0020e8c1;
loc_1bd326: // 0160:1bd326
    if (ax == memoryAGet16(ds, edi))
        goto loc_1bd33b;
    edi += 0x00000002;
    bx--;
    if (bx)
        goto loc_1bd326;
    if (ax != memoryAGet16(ds, 0x20e8e1))
        goto loc_1bd30b;
loc_1bd33b: // 0160:1bd33b
    al++;
    al &= memoryAGet(ds, 0x20e82f);
    goto loc_1bd31a;
loc_1bd345: // 0160:1bd345
    esp += 4;
    return;
}
void sub_1bd346() // 0160:1bd346 +long
{
    esp -= 4;
loc_1bd346: // 0160:1bd346
    ax = memoryAGet16(ds, esi);
    ax <<= 2;
    eax &= 0x0000ffff;
    edi = 0x001ef15c;
    edx = memoryAGet32(ds, edi + eax);
    push32(esi);
    sub_1b52a1();
    esi = 0x0020f1c4;
    edi = memoryAGet32(ds, 0x2231e8);
    if (!(memoryAGet16(ds, 0x20ecbb) & 0xffff))
        goto loc_1bd379;
    esi += 0x00000060;
loc_1bd379: // 0160:1bd379
    ebp = esi;
    memoryASet16(ds, 0x20ceb7, 0x0002);
loc_1bd384: // 0160:1bd384
    esi = ebp;
    edx = 0x00000030;
loc_1bd38b: // 0160:1bd38b
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi += 0x00000110;
    edx--;
    if (edx)
        goto loc_1bd38b;
    ebp += 0x00000030;
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (memoryAGet16(ds, 0x20ceb7))
        goto loc_1bd384;
    esi = pop32();
    esi += 0x00000002;
    memoryASet32(ds, 0x2231e8, memoryAGet32(ds, 0x2231e8) + 0x00001200);
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    if (memoryAGet16(ds, 0x20ceb1))
        goto loc_1bd346;
    memoryASet16(ds, 0x20ecbb, 0x0000);
    esp += 4;
}
void sub_1bd3c8() // 0160:1bd3c8 +long
{
    esp -= 4;
    edx = 0x001ecccf;
    sub_1b52a1();
    esi = 0x0020f1c4;
    edi = 0x0029b134;
    ebx = esi;
    edx = 0x00000027;
loc_1bd3e3: // 0160:1bd3e3
    esi = ebx;
    ecx = 0x00000008;
loc_1bd3ea: // 0160:1bd3ea
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000140;
    if (--ecx)
        goto loc_1bd3ea;
    ebx += 0x00000008;
    edx--;
    if (edx)
        goto loc_1bd3e3;
    esp += 4;
}
void sub_1bd406() // 0160:1bd406 +long
{
    esp -= 4;
    bp = ax;
    esi = 0x00224866;
    ax <<= 1;
    dx = ax;
    ax <<= 1;
    ax += dx;
    eax &= 0x0000ffff;
    esi += eax;
    ebp = memoryAGet32(ds, 0x2231e4);
    memoryASet16(ds, 0x20ceb1, 0x0001);
    goto loc_1bd48e;
    // gap 92 bytes
loc_1bd48e: // 0160:1bd48e
    edi = ebp;
    edx = 0x00000006;
loc_1bd495: // 0160:1bd495
    al = memoryAGet(ds, esi);
    if (al >= 0x40)
        goto loc_1bd4bd;
    if (al == 0x20)
        goto loc_1bd4b9;
    if ((char)al < (char)0x30)
        goto loc_1bd4a7;
    if ((char)al <= (char)0x39)
        goto loc_1bd4b3;
loc_1bd4a7: // 0160:1bd4a7
    if (al == 0x2f)
        goto loc_1bd4af;
    al = 0x26;
    goto loc_1bd4bf;
loc_1bd4af: // 0160:1bd4af
    al = 0x25;
    goto loc_1bd4bf;
loc_1bd4b3: // 0160:1bd4b3
    al -= 0x30;
    al += 0x1b;
    goto loc_1bd4bf;
loc_1bd4b9: // 0160:1bd4b9
    al = 0;
    goto loc_1bd4bf;
loc_1bd4bd: // 0160:1bd4bd
    al -= 0x40;
loc_1bd4bf: // 0160:1bd4bf
    eax &= 0x000000ff;
    eax <<= 6;
    ebx = 0x0029b134;
    ebx += eax;
    ecx = 0x00000008;
loc_1bd4d3: // 0160:1bd4d3
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 4);
    memoryASet32(ds, edi + 4, eax);
    ebx += 0x00000008;
    edi += 0x00000030;
    if (--ecx)
        goto loc_1bd4d3;
    edi -= 0x00000178;
    esi++;
    edx--;
    if (edx)
        goto loc_1bd495;
    ebp += 0x00000180;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    if (memoryAGet16(ds, 0x20ceb1))
        goto loc_1bd48e;
    esp += 4;
}
void sub_1bd478() // 0160:1bd478 +long
{
    esp -= 4;
    esi = 0x00224866;
    edi = memoryAGet32(ds, 0x2231e4);
    ebp = edi;
    memoryASet16(ds, 0x20ceb1, 0x0010);
loc_1bd48e: // 0160:1bd48e
    edi = ebp;
    edx = 0x00000006;
loc_1bd495: // 0160:1bd495
    al = memoryAGet(ds, esi);
    if (al >= 0x40)
        goto loc_1bd4bd;
    if (al == 0x20)
        goto loc_1bd4b9;
    if ((char)al < (char)0x30)
        goto loc_1bd4a7;
    if ((char)al <= (char)0x39)
        goto loc_1bd4b3;
loc_1bd4a7: // 0160:1bd4a7
    if (al == 0x2f)
        goto loc_1bd4af;
    al = 0x26;
    goto loc_1bd4bf;
loc_1bd4af: // 0160:1bd4af
    al = 0x25;
    goto loc_1bd4bf;
loc_1bd4b3: // 0160:1bd4b3
    al -= 0x30;
    al += 0x1b;
    goto loc_1bd4bf;
loc_1bd4b9: // 0160:1bd4b9
    al = 0;
    goto loc_1bd4bf;
loc_1bd4bd: // 0160:1bd4bd
    al -= 0x40;
loc_1bd4bf: // 0160:1bd4bf
    eax &= 0x000000ff;
    eax <<= 6;
    ebx = 0x0029b134;
    ebx += eax;
    ecx = 0x00000008;
loc_1bd4d3: // 0160:1bd4d3
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 4);
    memoryASet32(ds, edi + 4, eax);
    ebx += 0x00000008;
    edi += 0x00000030;
    if (--ecx)
        goto loc_1bd4d3;
    edi -= 0x00000178;
    esi++;
    edx--;
    if (edx)
        goto loc_1bd495;
    ebp += 0x00000180;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    if (memoryAGet16(ds, 0x20ceb1))
        goto loc_1bd48e;
    esp += 4;
}
void sub_1bd4ff() // 0160:1bd4ff +long
{
    esp -= 4;
    dx = 0x0008;
    cx = 0x0024;
    ax -= 0x0008;
    bx -= 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1bd507() // 0160:1bd507 +long
{
    esp -= 4;
    ax -= 0x0008;
    bx -= 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1bd50f() // 0160:1bd50f +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1bd51f() // 0160:1bd51f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(eax);
    ax = memoryAGet16(ds, 0x20cec3);
    ecx = 0;
    edx = 0;
    esi = 0x00224866;
    bx = ax;
    ax <<= 2;
    bx <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi += eax;
    ebp = 0x00000006;
loc_1bd54c: // 0160:1bd54c
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1bd552;
    edx++;
loc_1bd552: // 0160:1bd552
    esi++;
    ebp--;
    if (ebp)
        goto loc_1bd54c;
    flags.carry = 0;
    edx = rcr32(edx, 0x00000001);
    if (!flags.carry)
        goto loc_1bd55e;
    ecx += 0x00000004;
loc_1bd55e: // 0160:1bd55e
    eax = pop32();
    eax += ecx;
    edx <<= 3;
    eax += edx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1bd56b() // 0160:1bd56b +long
{
    esp -= 4;
    goto loc_1bd56b;
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
    return;
    // gap 30375 bytes
loc_1bd56b: // 0160:1bd56b
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    if ((short)bx >= 0)
        goto loc_1bd630;
    bx = -bx;
    if ((short)memoryAGet16(ds, edi) <= (short)bx)
        goto loc_1bd6c8;
    dx = memoryAGet16(ds, edi);
    dx -= bx;
    ebx &= 0x0000ffff;
    edx &= 0x0000ffff;
    esi += ebx;
    bx = memoryAGet16(ds, edi + 2);
    edi = 0x002915ac;
    push32(ecx);
    cx = dx;
    cx &= 0x0003;
    ax = 0x0004;
    ax -= cx;
    memoryASet16(ds, 0x20ceb1, ax);
    ebp = esi;
loc_1bd5e8: // 0160:1bd5e8
    esi = ebp;
    ecx = edx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    cx = memoryAGet16(ds, 0x20ceb1);
    if (cx == 0x0004)
        goto loc_1bd5ff;
    al = 0;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
loc_1bd5ff: // 0160:1bd5ff
    ebp += memoryAGet32(ds, 0x2231d8);
    bx--;
    if (bx)
        goto loc_1bd5e8;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) & 0x0003);
    dx += memoryAGet16(ds, 0x20ceb1);
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    esi = 0x002915ac;
    ecx = pop32();
    ebx = 0;
loc_1bd62b: // 0160:1bd62b
    goto loc_1b5dcb;
loc_1bd630: // 0160:1bd630
    dx = bx;
    dx += memoryAGet16(ds, edi);
    if ((short)dx < (short)0x0140)
        goto loc_1bd62b;
    if (bx >= 0x0140)
        goto loc_1bd6c8;
    ax = memoryAGet16(ds, edi);
    ax += bx;
    ax -= 0x0140;
    dx = memoryAGet16(ds, edi);
    dx -= ax;
    push32(ecx);
    cx = dx;
    cx &= 0x0003;
    ax = 0x0004;
    ax -= cx;
    memoryASet16(ds, 0x20ceb1, ax);
    bx = memoryAGet16(ds, edi + 2);
    edi = 0x002915ac;
    ecx = 0;
    ebp = esi;
loc_1bd67a: // 0160:1bd67a
    esi = ebp;
    cx = memoryAGet16(ds, 0x20ceb1);
    if (cx == 0x0004)
        goto loc_1bd68d;
    al = 0;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
loc_1bd68d: // 0160:1bd68d
    cx = dx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ebp += memoryAGet32(ds, 0x2231d8);
    bx--;
    if (bx)
        goto loc_1bd67a;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) & 0x0003);
    dx += memoryAGet16(ds, 0x20ceb1);
    bx = 0x0140;
    bx -= dx;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    ecx = pop32();
    esi = 0x002915ac;
    goto loc_1b5dcb;
loc_1bd6c8: // 0160:1bd6c8
    esp += 4;
    return;
}
void sub_1bd6c9() // 0160:1bd6c9 +long
{
    esp -= 4;
    goto loc_1bd6c9;
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
    return;
    // gap 30725 bytes
loc_1bd6c9: // 0160:1bd6c9
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    esi += 0x000000e0;
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    memoryASet16(ds, edi + 2, 0x003c);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    goto loc_1bd742;
    // gap 55 bytes
loc_1bd742: // 0160:1bd742
    if ((short)cx >= 0)
        goto loc_1bd790;
    cx = -cx;
    if ((short)memoryAGet16(ds, edi + 2) <= (short)cx)
        goto loc_1bd7dc;
    edi = 0x002915ac;
    eax = memoryAGet32(ds, 0x2231d8);
    mul16(cx);
    esi += eax;
    dx = memoryAGet16(ds, 0x224636);
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
    ecx = 0;
loc_1bd776: // 0160:1bd776
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bd776;
    cx = 0;
    esi = 0x002915ac;
loc_1bd78b: // 0160:1bd78b
    goto loc_1b5dcb;
loc_1bd790: // 0160:1bd790
    if (cx >= 0x00e0)
        goto loc_1bd7dc;
    dx = memoryAGet16(ds, edi + 2);
    dx += cx;
    if ((short)dx < (short)0x00e0)
        goto loc_1bd78b;
    dx = 0x00e0;
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
    edi = 0x002915ac;
    ecx = 0;
loc_1bd7ba: // 0160:1bd7ba
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bd7ba;
    cx = 0x00e0;
    cx -= memoryAGet16(ds, 0x224636);
    esi = 0x002915ac;
    goto loc_1b5dcb;
loc_1bd7dc: // 0160:1bd7dc
    esp += 4;
    return;
}
void sub_1bd70e() // 0160:1bd70e +long
{
    esp -= 4;
    goto loc_1bd70e;
loc_1b5dcb: // 0160:1b5dcb
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1b5de3;
    edi = 0x000a4800;
loc_1b5de3: // 0160:1b5de3
    memoryASet32(ds, 0x224630, edi);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    if (memoryAGet32(ds, 0x224630) != 0x000a0000)
        goto loc_1b5e26;
    sub_1b5ec4();
    goto loc_1b5e2b;
    // gap 3 bytes
loc_1b5e26: // 0160:1b5e26
    sub_1b5f0f();
loc_1b5e2b: // 0160:1b5e2b
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1b5e63: // 0160:1b5e63
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1b5e7a: // 0160:1b5e7a
    cx = memoryAGet16(ds, 0x224634);
loc_1b5e81: // 0160:1b5e81
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5e90;
    memoryASet(ds, edi, al);
loc_1b5e90: // 0160:1b5e90
    edi++;
    if (--ecx)
        goto loc_1b5e81;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1b5e7a;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1b5ebd;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5e63;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1b5e63;
loc_1b5ebd: // 0160:1b5ebd
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
    return;
    // gap 30794 bytes
loc_1bd70e: // 0160:1bd70e
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet32(ds, 0x2231d8, eax);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    if ((short)cx >= 0)
        goto loc_1bd790;
    cx = -cx;
    if ((short)memoryAGet16(ds, edi + 2) <= (short)cx)
        goto loc_1bd7dc;
    edi = 0x002915ac;
    eax = memoryAGet32(ds, 0x2231d8);
    mul16(cx);
    esi += eax;
    dx = memoryAGet16(ds, 0x224636);
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
    ecx = 0;
loc_1bd776: // 0160:1bd776
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bd776;
    cx = 0;
    esi = 0x002915ac;
loc_1bd78b: // 0160:1bd78b
    goto loc_1b5dcb;
loc_1bd790: // 0160:1bd790
    if (cx >= 0x00e0)
        goto loc_1bd7dc;
    dx = memoryAGet16(ds, edi + 2);
    dx += cx;
    if ((short)dx < (short)0x00e0)
        goto loc_1bd78b;
    dx = 0x00e0;
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
    edi = 0x002915ac;
    ecx = 0;
loc_1bd7ba: // 0160:1bd7ba
    cx = memoryAGet16(ds, 0x224634);
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bd7ba;
    cx = 0x00e0;
    cx -= memoryAGet16(ds, 0x224636);
    esi = 0x002915ac;
    goto loc_1b5dcb;
loc_1bd7dc: // 0160:1bd7dc
    esp += 4;
    return;
}
void sub_1bd7dd() // 0160:1bd7dd +long
{
    esp -= 4;
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
}
void sub_1bd825() // 0160:1bd825 +long
{
    esp -= 4;
    push32(edx);
    push32(eax);
    dx = 0x03ce;
    al = 0x05;
    out8(dx, al);
    dx++;
    al = in8(dx);
    memoryASet16(ds, 0x22463e, ax);
    al &= 0xfc;
    al |= 0x01;
    out8(dx, al);
    dx = 0x03c4;
    ah = 0x0f;
    al = 0x02;
    out16(dx, ax);
    eax = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1bd849() // 0160:1bd849 +long
{
    esp -= 4;
    push32(edx);
    push32(eax);
    dx = 0x03ce;
    ax = memoryAGet16(ds, 0x22463e);
    ah = al;
    al = 0x05;
    out16(dx, ax);
    eax = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1bd85e() // 0160:1bd85e +long
{
    esp -= 4;
    goto loc_1bd85e;
loc_1b5442: // 0160:1b5442
    edi = 0x0020c88f;
    edx = 0;
    dl = al;
    ebp = edx;
    edx += edx;
    edx += ebp;
    esi += edx;
    edi += edx;
loc_1b5455: // 0160:1b5455
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5455;
    esp += 4;
    return;
    // gap 33767 bytes
loc_1bd85e: // 0160:1bd85e
    edx = 0x001ecb53;
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x000000a0;
    al = 0;
    goto loc_1b5442;
}
void sub_1bd863() // 0160:1bd863 +long
{
    esp -= 4;
    goto loc_1bd863;
loc_1b5442: // 0160:1b5442
    edi = 0x0020c88f;
    edx = 0;
    dl = al;
    ebp = edx;
    edx += edx;
    edx += ebp;
    esi += edx;
    edi += edx;
loc_1b5455: // 0160:1b5455
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5455;
    esp += 4;
    return;
    // gap 33772 bytes
loc_1bd863: // 0160:1bd863
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x000000a0;
    al = 0;
    goto loc_1b5442;
}
void sub_1bd879() // 0160:1bd879 +long
{
    esp -= 4;
    goto loc_1bd879;
loc_1b5442: // 0160:1b5442
    edi = 0x0020c88f;
    edx = 0;
    dl = al;
    ebp = edx;
    edx += edx;
    edx += ebp;
    esi += edx;
    edi += edx;
loc_1b5455: // 0160:1b5455
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5455;
    esp += 4;
    return;
    // gap 33794 bytes
loc_1bd879: // 0160:1bd879
    edx = 0x001ecc1d;
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000060;
    al = 0xa0;
    goto loc_1b5442;
}
void sub_1bd87e() // 0160:1bd87e +long
{
    esp -= 4;
    goto loc_1bd87e;
loc_1b5442: // 0160:1b5442
    edi = 0x0020c88f;
    edx = 0;
    dl = al;
    ebp = edx;
    edx += edx;
    edx += ebp;
    esi += edx;
    edi += edx;
loc_1b5455: // 0160:1b5455
    al = memoryAGet(ds, esi + 2);
    al >>= 2;
    memoryASet(ds, edi, al);
    al = memoryAGet(ds, esi + 1);
    al >>= 2;
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi);
    al >>= 2;
    memoryASet(ds, edi + 2, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1b5455;
    esp += 4;
    return;
    // gap 33799 bytes
loc_1bd87e: // 0160:1bd87e
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000060;
    al = 0xa0;
    goto loc_1b5442;
}
void sub_1bd894() // 0160:1bd894 +long
{
    esp -= 4;
    goto loc_1bd894;
loc_1b521d: // 0160:1b521d
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b522f: // 0160:1b522f
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b523c: // 0160:1b523c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1b523c;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b522f;
    esp += 4;
    return;
    // gap 34373 bytes
loc_1bd894: // 0160:1bd894
    edx = 0x001ecc1d;
    edi = 0x000a0000;
    sub_1b5205();
    edi = 0x000a4800;
    sub_1b521d();
    edi = 0x000a9000;
    goto loc_1b521d;
}
void sub_1bd899() // 0160:1bd899 +long
{
    esp -= 4;
    goto loc_1bd899;
loc_1b521d: // 0160:1b521d
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b522f: // 0160:1b522f
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b523c: // 0160:1b523c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1b523c;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b522f;
    esp += 4;
    return;
    // gap 34378 bytes
loc_1bd899: // 0160:1bd899
    edi = 0x000a0000;
    sub_1b5205();
    edi = 0x000a4800;
    sub_1b521d();
    edi = 0x000a9000;
    goto loc_1b521d;
}
void sub_1bd8b7() // 0160:1bd8b7 +long
{
    esp -= 4;
    edx = 0x001ed214;
    sub_1b52a1();
    edi = 0x0027508c;
    sub_1bd8d7();
    edx = 0x001ed229;
    push32(edi);
    sub_1b52a1();
    edi = pop32();
    esi = 0x0020f1c4;
    ebp = 0x00000004;
loc_1bd8e1: // 0160:1bd8e1
    ebx = 0x00000004;
loc_1bd8e6: // 0160:1bd8e6
    edx = 0x00000030;
loc_1bd8eb: // 0160:1bd8eb
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi += 0x00000110;
    edx--;
    if (edx)
        goto loc_1bd8eb;
    esi -= 0x00003bd0;
    ebx--;
    if (ebx)
        goto loc_1bd8e6;
    esi += 0x00003b40;
    ebp--;
    if (ebp)
        goto loc_1bd8e1;
    esp += 4;
}
void sub_1bd8d7() // 0160:1bd8d7 +long
{
    esp -= 4;
    esi = 0x0020f1c4;
    ebp = 0x00000004;
loc_1bd8e1: // 0160:1bd8e1
    ebx = 0x00000004;
loc_1bd8e6: // 0160:1bd8e6
    edx = 0x00000030;
loc_1bd8eb: // 0160:1bd8eb
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi += 0x00000110;
    edx--;
    if (edx)
        goto loc_1bd8eb;
    esi -= 0x00003bd0;
    ebx--;
    if (ebx)
        goto loc_1bd8e6;
    esi += 0x00003b40;
    ebp--;
    if (ebp)
        goto loc_1bd8e1;
    esp += 4;
}
void sub_1bd90e() // 0160:1bd90e +long
{
    esp -= 4;
    eax &= 0x0000000f;
    ebx = eax;
    eax <<= 12;
    ebx <<= 9;
    eax += ebx;
    esi = 0x0027508c;
    esi += eax;
    edi = memoryAGet32(ds, 0x2231e8);
    ecx = 0x00000480;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esp += 4;
}
void sub_1bd930() // 0160:1bd930 +long
{
    esp -= 4;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0003;
    if (bp)
        goto loc_1bd94c;
    memoryASet16(ds, 0x20e9a3, memoryAGet16(ds, 0x20e9a3) + 1);
    memoryASet16(ds, 0x20e9a3, memoryAGet16(ds, 0x20e9a3) & 0x0003);
loc_1bd94c: // 0160:1bd94c
    ebp = 0;
    bp = memoryAGet16(ds, 0x20e9a3);
    if (bp != 0x0003)
        goto loc_1bd95f;
    bp = 0x0001;
loc_1bd95f: // 0160:1bd95f
    edi = 0x001ef2d8;
    ebp <<= 4;
    edi += ebp;
    esp += 4;
}
void sub_1bd96a() // 0160:1bd96a +long
{
    esp -= 4;
    ebp = 0x00000004;
    memoryASet16(ds, 0x20e9a5, 0x0000);
loc_1bd978: // 0160:1bd978
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    dx = 0;
    if (!(memoryAGet16(ds, 0x20e9a5) & 0xffff))
        goto loc_1bd9c4;
    if (memoryAGet16(ds, 0x20e9a5) != 0x0001)
        goto loc_1bd99d;
    dx += 0x0002;
    goto loc_1bd9bd;
loc_1bd99d: // 0160:1bd99d
    if (memoryAGet16(ds, 0x20e9a5) != 0x0002)
        goto loc_1bd9b2;
    dx++;
    ax += memoryAGet16(ds, 0x20ceb1);
    goto loc_1bd9c4;
loc_1bd9b2: // 0160:1bd9b2
    dx += 0x0003;
    ax += memoryAGet16(ds, 0x20ceb1);
loc_1bd9bd: // 0160:1bd9bd
    bx += memoryAGet16(ds, 0x20ceb7);
loc_1bd9c4: // 0160:1bd9c4
    ax += memoryAGet16(ds, edi);
    bx += memoryAGet16(ds, edi + 2);
    edi += 0x00000004;
    cx = 0;
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1bd7dd();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    memoryASet16(ds, 0x20e9a5, memoryAGet16(ds, 0x20e9a5) + 1);
    ebp--;
    if (ebp)
        goto loc_1bd978;
    esp += 4;
}
void sub_1bd9e7() // 0160:1bd9e7 +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1bda2e;
    edi = 0x000a4800;
loc_1bda2e: // 0160:1bda2e
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
    al = 0x02;
loc_1bda8b: // 0160:1bda8b
    memoryASet16(ds, 0x20ceb1, ax);
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1bdaa6: // 0160:1bdaa6
    cx = memoryAGet16(ds, 0x224634);
    cx >>= 2;
loc_1bdab1: // 0160:1bdab1
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1bdab1;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1bdaa6;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1bdaf9;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ax = memoryAGet16(ds, 0x20ceb1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1bda8b;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1bda8b;
loc_1bdaf9: // 0160:1bdaf9
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1bdb00() // 0160:1bdb00 +long
{
    esp -= 4;
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    if ((short)cx >= 0)
        goto loc_1bdb69;
    cx = -cx;
    if ((short)memoryAGet16(ds, edi + 2) <= (short)cx)
        goto loc_1bdbb1;
    edi = 0x002915ac;
    eax = 0x00000030;
    mul16(cx);
    esi += eax;
    dx = memoryAGet16(ds, 0x224636);
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
loc_1bdb54: // 0160:1bdb54
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bdb54;
    esi = 0x002915ac;
loc_1bdb64: // 0160:1bdb64
    goto loc_1bdbb2;
    // gap 3 bytes
loc_1bdb69: // 0160:1bdb69
    if (cx >= 0x00e0)
        goto loc_1bdbb1;
    dx = memoryAGet16(ds, edi + 2);
    dx += cx;
    if ((short)dx < (short)0x00e0)
        goto loc_1bdb64;
    dx = 0x00e0;
    dx -= cx;
    memoryASet16(ds, 0x224636, dx);
    edi = 0x002915ac;
loc_1bdb91: // 0160:1bdb91
    ecx = 0x0000000c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    dx--;
    if (dx)
        goto loc_1bdb91;
    cx = 0x00e0;
    cx -= memoryAGet16(ds, 0x224636);
    esi = 0x002915ac;
    goto loc_1bdbb2;
    // gap 3 bytes
loc_1bdbb1: // 0160:1bdbb1
    esp += 4;
    return;
loc_1bdbb2: // 0160:1bdbb2
    edi = 0x000a0000;
    if (memoryAGet16(ds, 0x2231c4) != 0x0000)
        goto loc_1bdbca;
    edi = 0x000a4800;
loc_1bdbca: // 0160:1bdbca
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    ebp = 0x00000004;
    ecx = 0;
    al = 0x02;
loc_1bdc11: // 0160:1bdc11
    out16(dx, ax);
    cx = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
    push32(eax);
loc_1bdc27: // 0160:1bdc27
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 24);
    ah = memoryAGet(ds, esi + 28);
    eax <<= 16;
    al = memoryAGet(ds, esi + 16);
    ah = memoryAGet(ds, esi + 20);
    memoryASet32(ds, edi + 4, eax);
    al = memoryAGet(ds, esi + 40);
    ah = memoryAGet(ds, esi + 44);
    eax <<= 16;
    al = memoryAGet(ds, esi + 32);
    ah = memoryAGet(ds, esi + 36);
    memoryASet32(ds, edi + 8, eax);
    esi += 0x00000030;
    edi += ebx;
    if (--ecx)
        goto loc_1bdc27;
    eax = pop32();
    ebp--;
    if (!ebp)
        goto loc_1bdc81;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1bdc11;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1bdc11;
loc_1bdc81: // 0160:1bdc81
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1bdc88() // 0160:1bdc88 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ecb3, 0x0000);
    if (memoryAGet16(ds, 0x20e90d) == 0x0001)
        goto loc_1bdd06;
    bp = 0;
    memoryASet16(ds, 0x20e805, 0x0008);
    sub_1bdee4();
    esi = 0x001eeaf1;
    if (!(memoryAGet16(ds, 0x20e809) & 0xffff))
        goto loc_1bdcd0;
    esi = 0x001eeaf9;
    if (memoryAGet16(ds, 0x20e809) == 0x0001)
        goto loc_1bdcd0;
    esi = 0x001eeb01;
loc_1bdcd0: // 0160:1bdcd0
    if (memoryAGet16(ds, 0x20ecb7) == 0x0001)
        goto loc_1bddbe;
    bp = 0x0005;
    memoryASet16(ds, 0x20e805, 0x000a);
    sub_1bdee4();
    esi = 0x001eeac9;
    if (memoryAGet16(ds, 0x20e809) != 0x0002)
        goto loc_1bdd01;
    bp--;
loc_1bdd01: // 0160:1bdd01
    goto loc_1bddbe;
loc_1bdd06: // 0160:1bdd06
    if (memoryAGet16(ds, 0x20ecb5) == 0x0003)
        goto loc_1bdee3;
    bp = 0x0005;
    memoryASet16(ds, 0x20e805, 0x0000);
    if (!(memoryAGet16(ds, 0x20ecb5) & 0xffff))
        goto loc_1bdd3f;
    memoryASet16(ds, 0x20e805, 0x0002);
    if (memoryAGet16(ds, 0x20ecb5) != 0x0001)
        goto loc_1bdd51;
loc_1bdd3f: // 0160:1bdd3f
    sub_1bdee4();
    esi = 0x001eeac9;
    if (bx != 0x0019)
        goto loc_1bddbe;
    if (bx == 0x0019)
        goto loc_1bdd6e;
loc_1bdd51: // 0160:1bdd51
    if (memoryAGet16(ds, 0x20ecb7) == 0x0002)
        goto loc_1bdd98;
    memoryASet16(ds, 0x20e805, 0x0004);
    sub_1bdee4();
    if (bx)
        goto loc_1bdd84;
loc_1bdd6e: // 0160:1bdd6e
    esi = 0x001eead9;
    ecx = 0x00000002;
    edi = 0x0020ed53;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    goto loc_1bde6c;
loc_1bdd84: // 0160:1bdd84
    esi = 0x001eead1;
    bp = 0x0004;
    memoryASet16(ds, 0x20e805, 0x0004);
    goto loc_1bddbe;
loc_1bdd98: // 0160:1bdd98
    bp = 0;
    memoryASet16(ds, 0x20e805, 0x0006);
    sub_1bdee4();
    esi = 0x001eeae1;
    if (!(memoryAGet16(ds, 0x20e809) & 0xffff))
        goto loc_1bddbe;
    esi = 0x001eeae9;
loc_1bddbe: // 0160:1bddbe
    ecx = 0x00000002;
    edi = 0x0020ed53;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_1bdee4();
    if (bx == 0x00ff)
        goto loc_1bdee3;
    memoryASet16(ds, 0x20e801, 0x0000);
    al = 0;
    cl = 0;
    dl = 0;
loc_1bdde9: // 0160:1bdde9
    if ((short)bx < (short)0x03e8)
        goto loc_1bddf9;
    al++;
    bx -= 0x03e8;
    goto loc_1bdde9;
loc_1bddf9: // 0160:1bddf9
    if ((short)bx < (short)0x0064)
        goto loc_1bde07;
    cl++;
    bx -= 0x0064;
    goto loc_1bddf9;
loc_1bde07: // 0160:1bde07
    if ((short)bx < (short)0x000a)
        goto loc_1bde15;
    dl++;
    bx -= 0x000a;
    goto loc_1bde07;
loc_1bde15: // 0160:1bde15
    edi = 0x0020ed53;
    ebp &= 0x0000ffff;
    edi += ebp;
    if (!al)
        goto loc_1bde34;
    al += 0x30;
    memoryASet(ds, edi, al);
    edi++;
    memoryASet16(ds, 0x20e801, 0x0001);
loc_1bde34: // 0160:1bde34
    if (memoryAGet16(ds, 0x20e801) & 0xffff)
        goto loc_1bde43;
    if (!cl)
        goto loc_1bde52;
loc_1bde43: // 0160:1bde43
    cl += 0x30;
    memoryASet(ds, edi, cl);
    edi++;
    memoryASet16(ds, 0x20e801, 0x0001);
loc_1bde52: // 0160:1bde52
    if (memoryAGet16(ds, 0x20e801) & 0xffff)
        goto loc_1bde61;
    if (!dl)
        goto loc_1bde67;
loc_1bde61: // 0160:1bde61
    dl += 0x30;
    memoryASet(ds, edi, dl);
    edi++;
loc_1bde67: // 0160:1bde67
    bl += 0x30;
    memoryASet(ds, edi, bl);
loc_1bde6c: // 0160:1bde6c
    esi = 0x0020ed53;
    edi = memoryAGet32(ds, 0x2231ec);
    ebp = edi;
    edi = ebp;
    edx = 0x00000008;
loc_1bde80: // 0160:1bde80
    al = memoryAGet(ds, esi);
    if (al >= 0x40)
        goto loc_1bdea8;
    if (al == 0x20)
        goto loc_1bdea4;
    if ((char)al < (char)0x30)
        goto loc_1bde92;
    if ((char)al <= (char)0x39)
        goto loc_1bde9e;
loc_1bde92: // 0160:1bde92
    if (al == 0x2f)
        goto loc_1bde9a;
    al = 0x26;
    goto loc_1bdeaa;
loc_1bde9a: // 0160:1bde9a
    al = 0x25;
    goto loc_1bdeaa;
loc_1bde9e: // 0160:1bde9e
    al -= 0x30;
    al += 0x1b;
    goto loc_1bdeaa;
loc_1bdea4: // 0160:1bdea4
    eax = 0;
    goto loc_1bdeaf;
loc_1bdea8: // 0160:1bdea8
    al -= 0x40;
loc_1bdeaa: // 0160:1bdeaa
    eax &= 0x000000ff;
loc_1bdeaf: // 0160:1bdeaf
    eax <<= 6;
    ebx = 0x0029b134;
    ebx += eax;
    ecx = 0x00000008;
loc_1bdebe: // 0160:1bdebe
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 4);
    memoryASet32(ds, edi + 4, eax);
    ebx += 0x00000008;
    edi += 0x00000040;
    if (--ecx)
        goto loc_1bdebe;
    edi -= 0x000001f8;
    esi++;
    edx--;
    if (edx)
        goto loc_1bde80;
    memoryASet16(ds, 0x20ecb3, 0x0001);
loc_1bdee3: // 0160:1bdee3
    esp += 4;
    return;
}
void sub_1bdee4() // 0160:1bdee4 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 2;
    si = ax;
    ax <<= 1;
    ax += si;
    ax += memoryAGet16(ds, 0x20e805);
    esi = 0x002247a6;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20e809, 0x0000);
    if ((short)bx < (short)0x000a)
        goto loc_1bdf2f;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 1);
    if ((short)bx < (short)0x0064)
        goto loc_1bdf2f;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 1);
loc_1bdf2f: // 0160:1bdf2f
    esp += 4;
    return;
}
void sub_1bdf30() // 0160:1bdf30 +long
{
    esp -= 4;
    memoryASet(ds, 0x20c840, 0x00);
    al = memoryAGet(ds, 0x30b080);
    if (!al)
        goto loc_1bdf4b;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x40);
loc_1bdf4b: // 0160:1bdf4b
    al = memoryAGet(ds, 0x30b088);
    if (!al)
        goto loc_1bdf5f;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x20);
loc_1bdf5f: // 0160:1bdf5f
    al = memoryAGet(ds, 0x30b0ec);
    if (al)
        goto loc_1bdf79;
    al = memoryAGet(ds, 0x30b08c);
    if (!al)
        goto loc_1bdf80;
loc_1bdf79: // 0160:1bdf79
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1bdf80: // 0160:1bdf80
    al = memoryAGet(ds, 0x30b08e);
    if (!al)
        goto loc_1bdf94;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x10);
loc_1bdf94: // 0160:1bdf94
    if (memoryAGet(ds, 0x30b118) == 0x00)
        goto loc_1bdfa4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x01);
loc_1bdfa4: // 0160:1bdfa4
    if (memoryAGet(ds, 0x30b120) == 0x00)
        goto loc_1bdfb4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x02);
loc_1bdfb4: // 0160:1bdfb4
    if (memoryAGet(ds, 0x30b11d) == 0x00)
        goto loc_1bdfc4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
loc_1bdfc4: // 0160:1bdfc4
    if (memoryAGet(ds, 0x30b11b) == 0x00)
        goto loc_1bdfd4;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
loc_1bdfd4: // 0160:1bdfd4
    esp += 4;
    return;
}
void sub_1bdfd5() // 0160:1bdfd5 +long
{
    esp -= 4;
    goto loc_1bdfd5;
loc_1b2d91: // 0160:1b2d91
    edx = 0x001ed08d;
    eax = 0x00003d02;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0022479c;
    ecx = 0x00000410;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 45119 bytes
loc_1bdfd5: // 0160:1bdfd5
    sub_1be01a();
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1be019;
    if (memoryAGet16(ds, 0x20ee45) & 0xffff)
        goto loc_1be019;
    esi = 0x002247a6;
    ax = memoryAGet16(ds, 0x20e8ad);
    bl = 0x0c;
    mul8(bl);
    ecx = 0x00000006;
    eax &= 0x0000ffff;
loc_1be009: // 0160:1be009
    memoryASet16(ds, esi + eax, 0x00ff);
    eax += 0x00000002;
    if (--ecx)
        goto loc_1be009;
    goto loc_1b2d91;
loc_1be019: // 0160:1be019
    esp += 4;
    return;
}
void sub_1be01a() // 0160:1be01a +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d897, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1bd3c8();
    sub_1bd894();
    edx = 0x001ecba2;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1b57ae();
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x00224866;
    bx = ax;
    ax <<= 2;
    bx <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020ce9d;
    ecx = 0x00000006;
loc_1be088: // 0160:1be088
    movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, esi + -1, 0x20);
    if (--ecx)
        goto loc_1be088;
    sub_1bd478();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20eca1, 0x0000);
    sub_1a8044();
    sub_1b4f0e();
loc_1be0b0: // 0160:1be0b0
    sub_1b5096();
    sub_1b531f();
    memoryASet16(ds, 0x20edab, memoryAGet16(ds, 0x20edab) + 1);
    if (memoryAGet16(ds, 0x20edab) == 0x2ee0)
        goto loc_1be0df;
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1be132;
loc_1be0df: // 0160:1be0df
    sub_1a8054();
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x00224866;
    bx = ax;
    ax <<= 2;
    bx <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020ce9d;
    bx = 0;
    ecx = 0x00000006;
    ebx &= 0x0000ffff;
loc_1be116: // 0160:1be116
    if (memoryAGet(ds, esi + ebx) != 0x20)
        goto loc_1be131;
    ebx++;
    if (--ecx)
        goto loc_1be116;
    ecx = 0x00000006;
    etx = edi; edi = esi; esi = etx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20d897, 0x0001);
loc_1be131: // 0160:1be131
    esp += 4;
    return;
loc_1be132: // 0160:1be132
    sub_1be14f();
    sub_1be2c6();
    esi = 0x001eeab6;
    al = 0xc3;
    bl = 0x0d;
    sub_1b60a7();
    goto loc_1be0b0;
}
void sub_1be14f() // 0160:1be14f +long
{
    esp -= 4;
    goto loc_1be14f;
loc_1bd435: // 0160:1bd435
    bp = ax;
    esi = 0x00224866;
    ax <<= 1;
    dx = ax;
    ax <<= 1;
    ax += dx;
    eax &= 0x0000ffff;
    esi += eax;
    edi = memoryAGet32(ds, 0x2231e4);
    ax = bp;
    ax <<= 8;
    bp <<= 7;
    ebp &= 0x0000ffff;
    eax += ebp;
    edi += eax;
    ebp = edi;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    goto loc_1bd48e;
    // gap 22 bytes
loc_1bd48e: // 0160:1bd48e
    edi = ebp;
    edx = 0x00000006;
loc_1bd495: // 0160:1bd495
    al = memoryAGet(ds, esi);
    if (al >= 0x40)
        goto loc_1bd4bd;
    if (al == 0x20)
        goto loc_1bd4b9;
    if ((char)al < (char)0x30)
        goto loc_1bd4a7;
    if ((char)al <= (char)0x39)
        goto loc_1bd4b3;
loc_1bd4a7: // 0160:1bd4a7
    if (al == 0x2f)
        goto loc_1bd4af;
    al = 0x26;
    goto loc_1bd4bf;
loc_1bd4af: // 0160:1bd4af
    al = 0x25;
    goto loc_1bd4bf;
loc_1bd4b3: // 0160:1bd4b3
    al -= 0x30;
    al += 0x1b;
    goto loc_1bd4bf;
loc_1bd4b9: // 0160:1bd4b9
    al = 0;
    goto loc_1bd4bf;
loc_1bd4bd: // 0160:1bd4bd
    al -= 0x40;
loc_1bd4bf: // 0160:1bd4bf
    eax &= 0x000000ff;
    eax <<= 6;
    ebx = 0x0029b134;
    ebx += eax;
    ecx = 0x00000008;
loc_1bd4d3: // 0160:1bd4d3
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, ebx + 4);
    memoryASet32(ds, edi + 4, eax);
    ebx += 0x00000008;
    edi += 0x00000030;
    if (--ecx)
        goto loc_1bd4d3;
    edi -= 0x00000178;
    esi++;
    edx--;
    if (edx)
        goto loc_1bd495;
    ebp += 0x00000180;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) - 1);
    if (memoryAGet16(ds, 0x20ceb1))
        goto loc_1bd48e;
    esp += 4;
    return;
    // gap 3152 bytes
loc_1be14f: // 0160:1be14f
    memoryASet16(ds, 0x20cec1, 0x0000);
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1be2c5;
    eax = 0;
    interrupt(0x16);
    if (ah != 0x1c)
        goto loc_1be17c;
loc_1be16e: // 0160:1be16e
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1be2b1;
loc_1be17c: // 0160:1be17c
    if (ah == 0x01)
        goto loc_1be16e;
    if (ah != 0x53)
        goto loc_1be1a9;
loc_1be186: // 0160:1be186
    if (!(memoryAGet16(ds, 0x20eca1) & 0xffff))
        goto loc_1be2b1;
    memoryASet16(ds, 0x20eca1, memoryAGet16(ds, 0x20eca1) - 1);
    al = 0x20;
    memoryASet16(ds, 0x20cec1, 0x0001);
    goto loc_1be1f6;
loc_1be1a9: // 0160:1be1a9
    if (ah == 0x0e)
        goto loc_1be186;
    if (memoryAGet16(ds, 0x20eca1) == 0x0006)
        goto loc_1be2b1;
    if (al == 0x20)
        goto loc_1be1f6;
    if (al < 0x30)
        goto loc_1be2b1;
    if (al < 0x3a)
        goto loc_1be1f6;
    if (al < 0x41)
        goto loc_1be2b1;
    if (al < 0x5b)
        goto loc_1be1f6;
    if (al < 0x61)
        goto loc_1be2b1;
    if (al > 0x7a)
        goto loc_1be2b1;
    al -= 0x20;
loc_1be1f6: // 0160:1be1f6
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet(ds, 0x20ea29, 0xc6);
    bx = 0x0011;
    bx += memoryAGet16(ds, 0x20eca1);
    memoryASet(ds, 0x20ea2a, bl);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x01);
    memoryASet(ds, 0x20ea2d, al);
    dx = memoryAGet16(ds, 0x2231c4);
    push32(edx);
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x0020ea29;
    sub_1b60d3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea29;
    sub_1b60d3();
    edx = pop32();
    memoryASet16(ds, 0x2231c4, dx);
    if (memoryAGet16(ds, 0x20cec1) & 0xffff)
        goto loc_1be272;
    memoryASet16(ds, 0x20eca1, memoryAGet16(ds, 0x20eca1) + 1);
loc_1be272: // 0160:1be272
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x00224866;
    bx = ax;
    ax <<= 2;
    bx <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet16(ds, 0x20eca1);
    eax &= 0x0000ffff;
    if (memoryAGet16(ds, 0x20cec1) & 0xffff)
        goto loc_1be2a8;
    eax--;
loc_1be2a8: // 0160:1be2a8
    bl = memoryAGet(ds, 0x20ea2d);
    memoryASet(ds, esi + eax, bl);
loc_1be2b1: // 0160:1be2b1
    memoryASet16(ds, 0x20edab, 0x0000);
    ax = memoryAGet16(ds, 0x20e8ad);
    goto loc_1bd435;
loc_1be2c5: // 0160:1be2c5
    esp += 4;
    return;
}
void sub_1be2c6() // 0160:1be2c6 +long
{
    esp -= 4;
    goto loc_1be2c6;
loc_1bd507: // 0160:1bd507
    ax -= 0x0008;
    bx -= 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
    return;
    // gap 3495 bytes
loc_1be2c6: // 0160:1be2c6
    if (memoryAGet16(ds, 0x20eca1) == 0x0006)
        goto loc_1be340;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0008;
    if (!ax)
        goto loc_1be307;
    eax = 0x00000108;
    dx = memoryAGet16(ds, 0x20eca1);
    dx <<= 3;
    ax += dx;
    ebx = 0x00000144;
    ecx = 0x00000029;
    edx = 0x00000004;
    sub_1bd7dd();
loc_1be307: // 0160:1be307
    dx = memoryAGet16(ds, 0x20eca1);
    bp = dx;
    eax = 0x00000108;
    dx <<= 3;
    ax += dx;
loc_1be31d: // 0160:1be31d
    ebx = 0x00000144;
    ecx = 0x00000028;
    edx = 0x00000004;
    push32(eax);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    eax = pop32();
    eax += 0x00000008;
    bp++;
    if (bp != 0x0006)
        goto loc_1be31d;
loc_1be340: // 0160:1be340
    ax = 0x0108;
    bx = 0x00fe;
    bx += 0x0030;
    cx = memoryAGet16(ds, 0x20e8ad);
    cx += 0x0011;
    bp = memoryAGet16(ds, 0x20e8ad);
    memoryASet16(ds, 0x20cec3, bp);
    sub_1bd51f();
    ax++;
    dx = 0x0004;
    sub_1bd50f();
    ax = 0x0108;
    bx = 0x00fe;
    cx = memoryAGet16(ds, 0x20e8ad);
    cx++;
    dx = 0x0007;
    sub_1bd50f();
    dx = 0x0008;
    cx = 0x0023;
    goto loc_1bd507;
}
void sub_1be39c() // 0160:1be39c +long
{
    esp -= 4;
    edi = 0x0020edb1;
    eax = 0;
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    cx = ax;
    bx = 0;
    cx = rcl16(cx, 0x0001);
    bl = rcl8(bl, 0x01);
    cx = rcl16(cx, 0x0001);
    bl = rcl8(bl, 0x01);
    ax &= 0x3fff;
    ax <<= 1;
    memoryASet(ds, 0x20ceb1, bl);
    bl = 0;
loc_1be3c8: // 0160:1be3c8
    if ((short)ax < (short)0x1770)
        goto loc_1be3d6;
    bl++;
    ax -= 0x1770;
    goto loc_1be3c8;
loc_1be3d6: // 0160:1be3d6
    memoryASet(ds, edi, bl);
    edi++;
    bl = 0;
loc_1be3db: // 0160:1be3db
    if ((short)ax < (short)0x03e8)
        goto loc_1be3e9;
    bl++;
    ax -= 0x03e8;
    goto loc_1be3db;
loc_1be3e9: // 0160:1be3e9
    memoryASet(ds, edi, bl);
    edi++;
    bl = 0;
loc_1be3ee: // 0160:1be3ee
    if ((short)ax < (short)0x0064)
        goto loc_1be3fc;
    bl++;
    ax -= 0x0064;
    goto loc_1be3ee;
loc_1be3fc: // 0160:1be3fc
    memoryASet(ds, edi, bl);
    edi++;
    bl = 0;
loc_1be401: // 0160:1be401
    if ((short)ax < (short)0x000a)
        goto loc_1be40f;
    bl++;
    ax -= 0x000a;
    goto loc_1be401;
loc_1be40f: // 0160:1be40f
    memoryASet(ds, edi, bl);
    edi++;
    memoryASet(ds, edi, al);
    edi++;
    eax = memoryAGet32(ds, esi);
    al &= 0x03;
    bl = memoryAGet(ds, 0x20ceb1);
    bl <<= 2;
    bl |= al;
    memoryASet(ds, 0x20ceb1, bl);
    eax = memoryAGet32(ds, esi);
    esi += 0x00000004;
    sub_1be455();
    sub_1be455();
    sub_1be455();
    sub_1be455();
    sub_1be455();
    sub_1be455();
    al = memoryAGet(ds, 0x20ceb1);
    memoryASet(ds, edi, al);
    esp += 4;
}
void sub_1be455() // 0160:1be455 +long
{
    esp -= 4;
    ecx = 0x00000005;
    flags.carry = 0;
    bl = 0;
loc_1be45c: // 0160:1be45c
    eax = rcl32(eax, 0x00000001);
    bl = rcl8(bl, 0x01);
    if (--ecx)
        goto loc_1be45c;
    if (bl)
        goto loc_1be46b;
    bl += 0x20;
    goto loc_1be46e;
loc_1be46b: // 0160:1be46b
    bl += 0x40;
loc_1be46e: // 0160:1be46e
    memoryASet(ds, edi, bl);
    edi++;
    esp += 4;
}
void sub_1be4a2() // 0160:1be4a2 +long
{
    esp -= 4;
    esi = 0x0020edbd;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x1770;
    mul16(cx);
    bx = ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x03e8;
    mul16(cx);
    bp = ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x0064;
    mul16(cx);
    ax += bp;
    bx += ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x000a;
    mul16(cx);
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, esi);
    memoryASet(ds, 0x20ceb1, bl);
    bx <<= 12;
    bx &= 0xc000;
    ax >>= 1;
    ax |= bx;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ebx = 0x00224866;
    edx = 0x0020edc3;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    ax <<= 1;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    ebx += eax;
    ecx = 0x00000006;
loc_1be53b: // 0160:1be53b
    al = memoryAGet(ds, ebx);
    ebx++;
    if (al != 0x20)
        goto loc_1be546;
    al -= 0x20;
    goto loc_1be548;
loc_1be546: // 0160:1be546
    al -= 0x40;
loc_1be548: // 0160:1be548
    memoryASet(ds, edx, al);
    edx++;
    if (--ecx)
        goto loc_1be53b;
    push32(esi);
    push32(edi);
    edi = 0x0020edc3;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    ebp = 0;
    esi = 0;
    al = memoryAGet(ds, edi);
    bl = memoryAGet(ds, edi + 1);
    cl = memoryAGet(ds, edi + 2);
    dl = memoryAGet(ds, edi + 4);
    bp = dx;
    dl = memoryAGet(ds, edi + 5);
    si = dx;
    dl = memoryAGet(ds, edi + 3);
    eax <<= 27;
    ebx <<= 22;
    ecx <<= 17;
    edx <<= 12;
    ebp <<= 7;
    esi <<= 2;
    eax |= ebx;
    eax |= ecx;
    eax |= edx;
    eax |= ebp;
    eax |= esi;
    bl = memoryAGet(ds, 0x20ceb1);
    ebx &= 0x00000003;
    eax |= ebx;
    edi = pop32();
    esi = pop32();
    memoryASet32(ds, edi, eax);
    edi += 0x00000004;
    esp += 4;
}
void sub_1be4a7() // 0160:1be4a7 +long
{
    esp -= 4;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x1770;
    mul16(cx);
    bx = ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x03e8;
    mul16(cx);
    bp = ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x0064;
    mul16(cx);
    ax += bp;
    bx += ax;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cx = 0x000a;
    mul16(cx);
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    ax += bx;
    bx = 0;
    bl = memoryAGet(ds, esi);
    memoryASet(ds, 0x20ceb1, bl);
    bx <<= 12;
    bx &= 0xc000;
    ax >>= 1;
    ax |= bx;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ebx = 0x00224866;
    edx = 0x0020edc3;
    ax = 0;
    al = memoryAGet(ds, esi);
    esi++;
    ax <<= 1;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    ebx += eax;
    ecx = 0x00000006;
loc_1be53b: // 0160:1be53b
    al = memoryAGet(ds, ebx);
    ebx++;
    if (al != 0x20)
        goto loc_1be546;
    al -= 0x20;
    goto loc_1be548;
loc_1be546: // 0160:1be546
    al -= 0x40;
loc_1be548: // 0160:1be548
    memoryASet(ds, edx, al);
    edx++;
    if (--ecx)
        goto loc_1be53b;
    push32(esi);
    push32(edi);
    edi = 0x0020edc3;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    ebp = 0;
    esi = 0;
    al = memoryAGet(ds, edi);
    bl = memoryAGet(ds, edi + 1);
    cl = memoryAGet(ds, edi + 2);
    dl = memoryAGet(ds, edi + 4);
    bp = dx;
    dl = memoryAGet(ds, edi + 5);
    si = dx;
    dl = memoryAGet(ds, edi + 3);
    eax <<= 27;
    ebx <<= 22;
    ecx <<= 17;
    edx <<= 12;
    ebp <<= 7;
    esi <<= 2;
    eax |= ebx;
    eax |= ecx;
    eax |= edx;
    eax |= ebp;
    eax |= esi;
    bl = memoryAGet(ds, 0x20ceb1);
    ebx &= 0x00000003;
    eax |= ebx;
    edi = pop32();
    esi = pop32();
    memoryASet32(ds, edi, eax);
    edi += 0x00000004;
    esp += 4;
}
void sub_1be5a6() // 0160:1be5a6 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20edd3, 0x0000);
    memoryASet16(ds, 0x20edd5, 0x0000);
    memoryASet16(ds, 0x20edd7, 0x0000);
    memoryASet16(ds, 0x20edd9, 0x0000);
    esi = 0x00224866;
    ax = memoryAGet16(ds, 0x20e8ad);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    eax &= 0x0000ffff;
    esi += eax;
    ecx = 0x0000001d;
    edi = 0x002967b4;
loc_1be5f2: // 0160:1be5f2
    push32(ecx);
    ebx = 0x0020edd3;
    sub_1be628();
    ebx = 0x0020edd5;
    sub_1be628();
    ecx = pop32();
    if (--ecx)
        goto loc_1be5f2;
    ecx = 0x0000001b;
loc_1be60f: // 0160:1be60f
    push32(ecx);
    ebx = 0x0020edd7;
    sub_1be628();
    ebx = 0x0020edd9;
    sub_1be628();
    ecx = pop32();
    if (--ecx)
        goto loc_1be60f;
    esp += 4;
}
void sub_1be628() // 0160:1be628 +long
{
    esp -= 4;
    ecx = edi;
    ecx += 0x00000005;
    edx = esi;
    ebp = 0x00000006;
loc_1be634: // 0160:1be634
    al = memoryAGet(ds, ecx);
    if (al != memoryAGet(ds, edx))
        goto loc_1be64b;
    ebp--;
    if (ebp)
        goto loc_1be634;
    ax = memoryAGet16(ds, 0x20e8ad);
    if (al != memoryAGet(ds, edi + 11))
        goto loc_1be64b;
    memoryASet16(ds, ebx, memoryAGet16(ds, ebx) + 1);
loc_1be64b: // 0160:1be64b
    edi += 0x0000000c;
    esp += 4;
}
void sub_1be64f() // 0160:1be64f +long
{
    esp -= 4;
    goto loc_1be64f;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 34157 bytes
loc_1be64f: // 0160:1be64f
    memoryASet16(ds, 0x20ceb7, 0x0001);
    memoryASet16(ds, 0x20ceb9, 0x0001);
    memoryASet16(ds, 0x20cebb, 0x0000);
    goto loc_1be687;
    // gap 27 bytes
loc_1be687: // 0160:1be687
    edi = 0x0020ea5b;
    edx = edi;
    push32(ecx);
    ecx = 0x0000000a;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = pop32();
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be6a7;
    ax = bx;
    goto loc_1be6fe;
loc_1be6a7: // 0160:1be6a7
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x002247a6;
    ax <<= 2;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    esi += eax;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    if (ax != 0x00ff)
        goto loc_1be6fe;
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1be6e2;
    esp += 4;
    return;
loc_1be6e2: // 0160:1be6e2
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb80;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be6fe: // 0160:1be6fe
    if (!(memoryAGet16(ds, 0x20cebb) & 0xffff))
        goto loc_1be73c;
    if (memoryAGet16(ds, 0x20cebb) != 0x0001)
        goto loc_1be71b;
    if (ax != 0x0019)
        goto loc_1be73c;
    goto loc_1be720;
loc_1be71b: // 0160:1be71b
    if (ax)
        goto loc_1be73c;
loc_1be720: // 0160:1be720
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb6b;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be73c: // 0160:1be73c
    ecx &= 0x0000ffff;
    bl = 0;
loc_1be744: // 0160:1be744
    if ((short)ax < (short)0x000a)
        goto loc_1be752;
    ax -= 0x000a;
    bl++;
    goto loc_1be744;
loc_1be752: // 0160:1be752
    if (!bl)
        goto loc_1be75d;
    bl += 0x30;
    memoryASet(ds, edx + ecx, bl);
    ecx++;
loc_1be75d: // 0160:1be75d
    al += 0x30;
    memoryASet(ds, edx + ecx, al);
    esi = edx;
    if (!(memoryAGet16(ds, 0x20ceb7) & 0xffff))
        goto loc_1be791;
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be783;
    if (bl)
        goto loc_1be791;
    memoryASet(ds, edx + 1, memoryAGet(ds, edx + 1) + 1);
    goto loc_1be791;
loc_1be783: // 0160:1be783
    if (bl)
        goto loc_1be791;
    al -= 0x30;
    if (al != 0x01)
        goto loc_1be791;
    memoryASet(ds, edx + 16, 0x20);
loc_1be791: // 0160:1be791
    goto loc_1b60d3;
}
void sub_1be66c() // 0160:1be66c +long
{
    esp -= 4;
    goto loc_1be66c;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 34186 bytes
loc_1be66c: // 0160:1be66c
    memoryASet16(ds, 0x20ceb1, 0x0000);
    memoryASet16(ds, 0x20ceb7, 0x0000);
    memoryASet16(ds, 0x20ceb9, 0x0000);
    edi = 0x0020ea5b;
    edx = edi;
    push32(ecx);
    ecx = 0x0000000a;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = pop32();
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be6a7;
    ax = bx;
    goto loc_1be6fe;
loc_1be6a7: // 0160:1be6a7
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x002247a6;
    ax <<= 2;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    esi += eax;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    if (ax != 0x00ff)
        goto loc_1be6fe;
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1be6e2;
    esp += 4;
    return;
loc_1be6e2: // 0160:1be6e2
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb80;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be6fe: // 0160:1be6fe
    if (!(memoryAGet16(ds, 0x20cebb) & 0xffff))
        goto loc_1be73c;
    if (memoryAGet16(ds, 0x20cebb) != 0x0001)
        goto loc_1be71b;
    if (ax != 0x0019)
        goto loc_1be73c;
    goto loc_1be720;
loc_1be71b: // 0160:1be71b
    if (ax)
        goto loc_1be73c;
loc_1be720: // 0160:1be720
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb6b;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be73c: // 0160:1be73c
    ecx &= 0x0000ffff;
    bl = 0;
loc_1be744: // 0160:1be744
    if ((short)ax < (short)0x000a)
        goto loc_1be752;
    ax -= 0x000a;
    bl++;
    goto loc_1be744;
loc_1be752: // 0160:1be752
    if (!bl)
        goto loc_1be75d;
    bl += 0x30;
    memoryASet(ds, edx + ecx, bl);
    ecx++;
loc_1be75d: // 0160:1be75d
    al += 0x30;
    memoryASet(ds, edx + ecx, al);
    esi = edx;
    if (!(memoryAGet16(ds, 0x20ceb7) & 0xffff))
        goto loc_1be791;
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be783;
    if (bl)
        goto loc_1be791;
    memoryASet(ds, edx + 1, memoryAGet(ds, edx + 1) + 1);
    goto loc_1be791;
loc_1be783: // 0160:1be783
    if (bl)
        goto loc_1be791;
    al -= 0x30;
    if (al != 0x01)
        goto loc_1be791;
    memoryASet(ds, edx + 16, 0x20);
loc_1be791: // 0160:1be791
    goto loc_1b60d3;
}
void sub_1be67e() // 0160:1be67e +long
{
    esp -= 4;
    goto loc_1be67e;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 34204 bytes
loc_1be67e: // 0160:1be67e
    memoryASet16(ds, 0x20ceb9, 0x0000);
    edi = 0x0020ea5b;
    edx = edi;
    push32(ecx);
    ecx = 0x0000000a;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = pop32();
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be6a7;
    ax = bx;
    goto loc_1be6fe;
loc_1be6a7: // 0160:1be6a7
    ax = memoryAGet16(ds, 0x20e8ad);
    esi = 0x002247a6;
    ax <<= 2;
    bp = ax;
    ax <<= 1;
    ax += bp;
    eax &= 0x0000ffff;
    esi += eax;
    ebx &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + ebx);
    if (ax != 0x00ff)
        goto loc_1be6fe;
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1be6e2;
    esp += 4;
    return;
loc_1be6e2: // 0160:1be6e2
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb80;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be6fe: // 0160:1be6fe
    if (!(memoryAGet16(ds, 0x20cebb) & 0xffff))
        goto loc_1be73c;
    if (memoryAGet16(ds, 0x20cebb) != 0x0001)
        goto loc_1be71b;
    if (ax != 0x0019)
        goto loc_1be73c;
    goto loc_1be720;
loc_1be71b: // 0160:1be71b
    if (ax)
        goto loc_1be73c;
loc_1be720: // 0160:1be720
    memoryASet(ds, edx + 3, 0x15);
    ecx = 0x00000015;
    esi = 0x001eeb6b;
    edi = edx;
    edi += 0x00000004;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = edx;
    goto loc_1b60d3;
loc_1be73c: // 0160:1be73c
    ecx &= 0x0000ffff;
    bl = 0;
loc_1be744: // 0160:1be744
    if ((short)ax < (short)0x000a)
        goto loc_1be752;
    ax -= 0x000a;
    bl++;
    goto loc_1be744;
loc_1be752: // 0160:1be752
    if (!bl)
        goto loc_1be75d;
    bl += 0x30;
    memoryASet(ds, edx + ecx, bl);
    ecx++;
loc_1be75d: // 0160:1be75d
    al += 0x30;
    memoryASet(ds, edx + ecx, al);
    esi = edx;
    if (!(memoryAGet16(ds, 0x20ceb7) & 0xffff))
        goto loc_1be791;
    if (!(memoryAGet16(ds, 0x20ceb9) & 0xffff))
        goto loc_1be783;
    if (bl)
        goto loc_1be791;
    memoryASet(ds, edx + 1, memoryAGet(ds, edx + 1) + 1);
    goto loc_1be791;
loc_1be783: // 0160:1be783
    if (bl)
        goto loc_1be791;
    al -= 0x30;
    if (al != 0x01)
        goto loc_1be791;
    memoryASet(ds, edx + 16, 0x20);
loc_1be791: // 0160:1be791
    goto loc_1b60d3;
}
void sub_1be796() // 0160:1be796 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0000);
    sub_1be7c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1be7c6();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    sub_1be7c6();
    memoryASet16(ds, 0x2231c4, memoryAGet16(ds, 0x2231c4) - 1);
    esp += 4;
}
void sub_1be7c6() // 0160:1be7c6 +long
{
    esp -= 4;
    esi = 0x001eeb95;
    sub_1be816();
    esi = 0x001eeb9e;
    sub_1be816();
    esi = 0x001eeba9;
    sub_1be816();
    esi = 0x001eebb2;
    sub_1be816();
    esi = 0x001eebbd;
    sub_1be816();
    esi = 0x001eebcb;
    sub_1be816();
    esi = 0x001eebe2;
    sub_1be816();
    esi = 0x001eebfc;
    goto loc_1be816;
    // gap 3 bytes
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1be816() // 0160:1be816 +long
{
    esp -= 4;
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1be986() // 0160:1be986 +long
{
    esp -= 4;
    esi = 0x001ecb29;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi = memoryAGet32(ds, 0x20b808);
    edx = 0x0020e9c5;
    bl = memoryAGet(ds, esi + eax + 5);
    ax = memoryAGet16(ds, esi + eax + 6);
    memoryASet(ds, edx + 13, bl);
    memoryASet16(ds, edx + 14, ax);
    sub_1be9d2();
    edx = 0x0020e9c5;
    memoryASet(ds, edx + 19, 0x72);
    eax = 0x00004100;
    interrupt(0x21);
    esp += 4;
}
void sub_1be9d2() // 0160:1be9d2 +long
{
    esp -= 4;
    eax = 0x00004100;
    interrupt(0x21);
    esp += 4;
}
void sub_1be9da() // 0160:1be9da +long
{
    esp -= 4;
    goto loc_1be9da;
loc_1b2cde: // 0160:1b2cde
    edx = 0x001ed0a1;
    eax = 0x00003d02;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dcb;
    memoryASet32(ds, 0x20ee4b, eax);
    goto loc_1b2d10;
    // gap 25 bytes
loc_1b2d10: // 0160:1b2d10
    edx = 0x0023f52c;
    ecx = 0x00002ed4;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1b2dd9;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
    // gap 144 bytes
loc_1b2dcb: // 0160:1b2dcb
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1b2dd9: // 0160:1b2dd9
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
    // gap 393 bytes
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 47684 bytes
loc_1be9da: // 0160:1be9da
    sub_1aa9d7();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    ax = memoryAGet(ds, esi + 5);
    ax -= 0x0030;
    cx = 0x0064;
    mul16(cx);
    bx = ax;
    ax = memoryAGet(ds, esi + 6);
    ax -= 0x0030;
    cx = 0x000a;
    mul16(cx);
    bx += ax;
    ax = memoryAGet(ds, esi + 7);
    ax -= 0x0030;
    ax += bx;
    cx = 0x000c;
    mul16(cx);
    esi = 0x0023f52c;
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020edbd;
    memoryASet(ds, edi, 0x04);
    memoryASet(ds, edi + 1, 0x05);
    memoryASet(ds, edi + 2, 0x09);
    memoryASet(ds, edi + 3, 0x09);
    memoryASet(ds, edi + 4, 0x09);
    memoryASet(ds, edi + 5, 0x00);
    eax = memoryAGet32(ds, 0x224866);
    bx = memoryAGet16(ds, 0x22486a);
    push32(eax);
    push32(ebx);
    edx = 0x00224866;
    ecx = 0x00000006;
loc_1bea72: // 0160:1bea72
    memoryASet(ds, edx, 0x5b);
    edx++;
    if (--ecx)
        goto loc_1bea72;
    edi = esi;
    sub_1be4a2();
    sub_1be4a2();
    ebx = pop32();
    eax = pop32();
    memoryASet32(ds, 0x224866, eax);
    memoryASet16(ds, 0x22486a, bx);
    goto loc_1b2cde;
}
void sub_1bea97() // 0160:1bea97 +long
{
    esp -= 4;
    goto loc_1bea97;
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 47873 bytes
loc_1bea97: // 0160:1bea97
    esi = 0x001ecb29;
    if (memoryAGet16(ds, 0x20ec8d) != 0x0003)
        goto loc_1beaab;
    esi = 0x001ecb3e;
loc_1beaab: // 0160:1beaab
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020e9c5;
    ax = memoryAGet16(ds, esi + 5);
    memoryASet16(ds, edi + 13, ax);
    al = memoryAGet(ds, esi + 7);
    memoryASet(ds, edi + 15, al);
    goto loc_1beb72;
    // gap 137 bytes
loc_1beb72: // 0160:1beb72
    edx = 0x0020e9c5;
    ecx = 0;
    eax = 0x00003c00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bebae;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0020dcc5;
    ecx = 0x00000400;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bebbc;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1bebae: // 0160:1bebae
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1bebbc: // 0160:1bebbc
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
}
void sub_1beae9() // 0160:1beae9 +long
{
    esp -= 4;
    goto loc_1beae9;
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 47955 bytes
loc_1beae9: // 0160:1beae9
    cx = memoryAGet16(ds, 0x20d7b9);
    if (cx == 0x0002)
        goto loc_1bebdc;
    if (cx == 0x0012)
        goto loc_1bebdc;
    if (cx == 0x001d)
        goto loc_1bebdc;
    if (cx == 0x0022)
        goto loc_1bebdc;
    esi = 0x001ecb14;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ec8d);
    if (ax != 0x0003)
        goto loc_1beb4a;
    memoryASet(ds, 0x20e9d6, 0x52);
    memoryASet(ds, 0x20e9d7, 0x41);
    memoryASet(ds, 0x20e9d8, 0x43);
loc_1beb4a: // 0160:1beb4a
    ax = memoryAGet16(ds, 0x20d7b9);
    bl = 0x30;
loc_1beb52: // 0160:1beb52
    if ((short)ax < (short)0x000a)
        goto loc_1beb65;
    ax -= 0x000a;
    bl += 0x01;
    goto loc_1beb52;
loc_1beb65: // 0160:1beb65
    memoryASet(ds, 0x20e9d3, bl);
    al += 0x30;
    memoryASet(ds, 0x20e9d4, al);
    edx = 0x0020e9c5;
    ecx = 0;
    eax = 0x00003c00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bebae;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0020dcc5;
    ecx = 0x00000400;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bebbc;
    memoryASet16(ds, 0x20cec3, 0x0000);
    goto loc_1b2f82;
loc_1bebae: // 0160:1bebae
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f8f;
loc_1bebbc: // 0160:1bebbc
    memoryASet16(ds, 0x20cec3, 0x0002);
    if (eax == 0x00000005)
        goto loc_1b2f8f;
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
loc_1bebdc: // 0160:1bebdc
    esp += 4;
    return;
}
void sub_1bebdd() // 0160:1bebdd +long
{
    esp -= 4;
    goto loc_1bebdd;
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 48199 bytes
loc_1bebdd: // 0160:1bebdd
    memoryASet16(ds, 0x20d8b7, 0x0000);
    esi = 0x0020d793;
    edi = 0x001ecb29;
    if (memoryAGet16(ds, 0x20ec8d) == 0x0001)
        goto loc_1bec04;
    esi = 0x0020d787;
    edi = 0x001ecb3e;
loc_1bec04: // 0160:1bec04
    if (memoryAGet(ds, esi) != 0x04)
        goto loc_1bec19;
    if (memoryAGet(ds, esi + 1) != 0x05)
        goto loc_1bec19;
    if (memoryAGet(ds, esi + 2) == 0x09)
        goto loc_1bed9d;
loc_1bec19: // 0160:1bec19
    esi = edi;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020e9c5;
    ax = memoryAGet16(ds, esi + 5);
    memoryASet16(ds, edi + 13, ax);
    al = memoryAGet(ds, esi + 7);
    memoryASet(ds, edi + 15, al);
    goto loc_1bed1e;
    // gap 197 bytes
loc_1bed1e: // 0160:1bed1e
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bed8f;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0020d8c1;
    ecx = 0x00000400;
    memoryASet32(ds, 0x20ceeb, ecx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bed81;
    if (memoryAGet32(ds, 0x20ceeb) != eax)
        goto loc_1bed73;
    memoryASet16(ds, 0x20cec3, 0x0000);
    memoryASet16(ds, 0x20d8b7, 0x0001);
    goto loc_1b2f82;
loc_1bed73: // 0160:1bed73
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f82;
loc_1bed81: // 0160:1bed81
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1b2f82;
loc_1bed8f: // 0160:1bed8f
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
loc_1bed9d: // 0160:1bed9d
    esp += 4;
    return;
}
void sub_1bec59() // 0160:1bec59 +long
{
    esp -= 4;
    goto loc_1bec59;
loc_1b2f82: // 0160:1b2f82
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1b2f8f: // 0160:1b2f8f
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 48323 bytes
loc_1bec59: // 0160:1bec59
    memoryASet16(ds, 0x20d8b7, 0x0000);
    cx = memoryAGet16(ds, 0x20d7b9);
    if (cx == 0x0002)
        goto loc_1bed9d;
    if (cx == 0x0012)
        goto loc_1bed9d;
    if (cx == 0x001d)
        goto loc_1bed9d;
    if (cx == 0x0022)
        goto loc_1bed9d;
    if (cx == 0x0036)
        goto loc_1bed9d;
    esi = 0x0020d793;
    if (memoryAGet16(ds, 0x20ec8d) == 0x0001)
        goto loc_1becaf;
    esi = 0x0020d787;
loc_1becaf: // 0160:1becaf
    if (memoryAGet(ds, esi) != 0x04)
        goto loc_1becc4;
    if (memoryAGet(ds, esi + 1) != 0x05)
        goto loc_1becc4;
    if (memoryAGet(ds, esi + 2) == 0x09)
        goto loc_1bed9d;
loc_1becc4: // 0160:1becc4
    esi = 0x001ecb14;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ec8d);
    if (ax != 0x0003)
        goto loc_1becf6;
    memoryASet(ds, 0x20e9d6, 0x52);
    memoryASet(ds, 0x20e9d7, 0x41);
    memoryASet(ds, 0x20e9d8, 0x43);
loc_1becf6: // 0160:1becf6
    ax = memoryAGet16(ds, 0x20d7b9);
    bl = 0x30;
loc_1becfe: // 0160:1becfe
    if ((short)ax < (short)0x000a)
        goto loc_1bed11;
    ax -= 0x000a;
    bl += 0x01;
    goto loc_1becfe;
loc_1bed11: // 0160:1bed11
    memoryASet(ds, 0x20e9d3, bl);
    al += 0x30;
    memoryASet(ds, 0x20e9d4, al);
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bed8f;
    memoryASet32(ds, 0x20ee4b, eax);
    edx = 0x0020d8c1;
    ecx = 0x00000400;
    memoryASet32(ds, 0x20ceeb, ecx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bed81;
    if (memoryAGet32(ds, 0x20ceeb) != eax)
        goto loc_1bed73;
    memoryASet16(ds, 0x20cec3, 0x0000);
    memoryASet16(ds, 0x20d8b7, 0x0001);
    goto loc_1b2f82;
loc_1bed73: // 0160:1bed73
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1b2f82;
loc_1bed81: // 0160:1bed81
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1b2f82;
loc_1bed8f: // 0160:1bed8f
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1b2f8f;
loc_1bed9d: // 0160:1bed9d
    esp += 4;
    return;
}
void sub_1bed9e() // 0160:1bed9e +long
{
    esp -= 4;
loc_1bed9e: // 0160:1bed9e
    sub_1c0f4d();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bee9c();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bee9c();
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x0106);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1bedf2: // 0160:1bedf2
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bee55;
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1bee37;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bee41;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1bee4b;
    esp += 4;
    return;
loc_1bee37: // 0160:1bee37
    sub_1bef0c();
    goto loc_1bed9e;
loc_1bee41: // 0160:1bee41
    sub_1bf077();
    goto loc_1bed9e;
loc_1bee4b: // 0160:1bee4b
    sub_1bf07d();
    goto loc_1bed9e;
loc_1bee55: // 0160:1bee55
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0004);
    memoryASet16(ds, 0x20e809, 0x0003);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1beec4();
    esi = 0x001ee1b2;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bedf2;
}
void sub_1bee9c() // 0160:1bee9c +long
{
    esp -= 4;
    goto loc_1bee9c;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 36282 bytes
loc_1bee9c: // 0160:1bee9c
    esi = 0x001ee620;
    sub_1b60d3();
    esi = 0x001ee632;
    sub_1b60d3();
    esi = 0x001ee643;
    sub_1b60d3();
    esi = 0x001ee653;
    goto loc_1b60d3;
}
void sub_1beec4() // 0160:1beec4 +long
{
    esp -= 4;
    goto loc_1beec4;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 5791 bytes
loc_1beec4: // 0160:1beec4
    ax += 0x0083;
    if (!bp)
        goto loc_1beed1;
    ax += 0x0002;
loc_1beed1: // 0160:1beed1
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1b4b56;
    ax -= 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax -= 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4b56;
    ax -= 0x0040;
    goto loc_1b4b56;
}
void sub_1bef0c() // 0160:1bef0c +long
{
    esp -= 4;
    memoryASet16(ds, 0x224660, 0x0000);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54af();
    edx = 0x001ecc30;
    sub_1bd899();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0c84;
    sub_1b5a2d();
    edx = 0x001ecbf4;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bef67;
    edx = 0x001ecc08;
loc_1bef67: // 0160:1bef67
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fc);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1befb8: // 0160:1befb8
    sub_1b5096();
    sub_1c7113();
    sub_1c3224();
    esi = 0x001f0398;
    al = 0xc2;
    bl = 0xca;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1befe2;
    esi = 0x001f03b1;
    bl--;
loc_1befe2: // 0160:1befe2
    sub_1b60a7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf068;
    ax = memoryAGet16(ds, 0x20e82f);
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bf00a;
    memoryASet(ds, 0x23c4f9, al);
    goto loc_1bf00f;
loc_1bf00a: // 0160:1bf00a
    memoryASet(ds, 0x23c4f8, al);
loc_1bf00f: // 0160:1bf00f
    edi = 0x001f0ec8;
    eax = 0;
    ax = memoryAGet16(ds, 0x20e82f);
    ax <<= 2;
    esi = memoryAGet32(ds, edi + eax);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bf046;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0003ebd4;
loc_1bf046: // 0160:1bf046
    ebx = 0x00000020;
loc_1bf04b: // 0160:1bf04b
    ecx = 0x00000020;
loc_1bf050: // 0160:1bf050
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1bf050;
    edi += 0x00000120;
    esi += 0x00000120;
    ebx--;
    if (ebx)
        goto loc_1bf04b;
    esp += 4;
    return;
loc_1bf068: // 0160:1bf068
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1befb8;
}
void sub_1bef15() // 0160:1bef15 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54af();
    edx = 0x001ecc30;
    sub_1bd899();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0c84;
    sub_1b5a2d();
    edx = 0x001ecbf4;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bef67;
    edx = 0x001ecc08;
loc_1bef67: // 0160:1bef67
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fc);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1befb8: // 0160:1befb8
    sub_1b5096();
    sub_1c7113();
    sub_1c3224();
    esi = 0x001f0398;
    al = 0xc2;
    bl = 0xca;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1befe2;
    esi = 0x001f03b1;
    bl--;
loc_1befe2: // 0160:1befe2
    sub_1b60a7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf068;
    ax = memoryAGet16(ds, 0x20e82f);
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bf00a;
    memoryASet(ds, 0x23c4f9, al);
    goto loc_1bf00f;
loc_1bf00a: // 0160:1bf00a
    memoryASet(ds, 0x23c4f8, al);
loc_1bf00f: // 0160:1bf00f
    edi = 0x001f0ec8;
    eax = 0;
    ax = memoryAGet16(ds, 0x20e82f);
    ax <<= 2;
    esi = memoryAGet32(ds, edi + eax);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    if (!(memoryAGet16(ds, 0x224660) & 0xffff))
        goto loc_1bf046;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0003ebd4;
loc_1bf046: // 0160:1bf046
    ebx = 0x00000020;
loc_1bf04b: // 0160:1bf04b
    ecx = 0x00000020;
loc_1bf050: // 0160:1bf050
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1bf050;
    edi += 0x00000120;
    esi += 0x00000120;
    ebx--;
    if (ebx)
        goto loc_1bf04b;
    esp += 4;
    return;
loc_1bf068: // 0160:1bf068
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1befb8;
}
void sub_1bf077() // 0160:1bf077 +long
{
    esp -= 4;
    sub_1c34c4();
    esp += 4;
}
void sub_1bf07d() // 0160:1bf07d +long
{
    esp -= 4;
    memoryASet16(ds, 0x224660, 0x0001);
    sub_1bef15();
    esp += 4;
}
void sub_1bf08c() // 0160:1bf08c +long
{
    esp -= 4;
loc_1bf08c: // 0160:1bf08c
    sub_1c0f4d();
    sub_1bfedb();
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1bf0c9: // 0160:1bf0c9
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf1cd;
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1bf131;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bf17f;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1bf189;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1bf1c3;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1bf12a;
    esp += 4;
    return;
loc_1bf12a: // 0160:1bf12a
    sub_1bf269();
    goto loc_1bf0c9;
loc_1bf131: // 0160:1bf131
    sub_1bf4ea();
    if (memoryAGet16(ds, 0x20ce9f) != 0x0001)
        goto loc_1bf0c9;
    memoryASet16(ds, 0x22464e, 0x0001);
    memoryASet16(ds, 0x20ed4d, 0x0006);
    sub_1c1c1d();
    sub_1c103c();
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1bf08c;
    if (!(memoryAGet16(ds, 0x20cec3) & 0xffff))
        goto loc_1bf08c;
    goto loc_1bf214;
loc_1bf17f: // 0160:1bf17f
    sub_1bf5ae();
    goto loc_1bf0c9;
loc_1bf189: // 0160:1bf189
    esi = 0x0023c4e0;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00006d44;
    ecx = 0x0000304c;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    sub_1bf9f2();
    edi = 0x0023c4e0;
    esi = memoryAGet32(ds, 0x20b808);
    esi += 0x00006d44;
    ecx = 0x0000304c;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    goto loc_1bf0c9;
loc_1bf1c3: // 0160:1bf1c3
    sub_1bfc08();
    goto loc_1bf0c9;
loc_1bf1cd: // 0160:1bf1cd
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0006);
    memoryASet16(ds, 0x20e809, 0x0005);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1bff3d();
    esi = 0x001ee1b2;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf0c9;
loc_1bf214: // 0160:1bf214
    sub_1c0f4d();
    memoryASet16(ds, 0x20e831, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1bf231: // 0160:1bf231
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    esi = 0x001ee318;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf231;
    // gap 911 bytes
loc_1bf5f8: // 0160:1bf5f8
    sub_1b5096();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9c6();
    sub_1bfedb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    esp += 4;
}
void sub_1bf269() // 0160:1bf269 +long
{
    esp -= 4;
    goto loc_1bf269;
loc_1bf214: // 0160:1bf214
    sub_1c0f4d();
    memoryASet16(ds, 0x20e831, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1bf231: // 0160:1bf231
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    esi = 0x001ee318;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf231;
loc_1bf269: // 0160:1bf269
    memoryASet16(ds, 0x22464e, 0x0001);
    memoryASet16(ds, 0x20ed4d, 0x0006);
    sub_1c1c1d();
    sub_1c103c();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1bf2a3;
    sub_1c0f4d();
    sub_1b4f0e();
    goto loc_1bf5f8;
loc_1bf2a3: // 0160:1bf2a3
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1bf214;
    sub_1c0f4d();
    memoryASet16(ds, 0x20cea5, 0x0001);
    memoryASet16(ds, 0x20cea7, 0x0020);
    memoryASet16(ds, 0x20e831, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
    sub_1bfc33();
    if (memoryAGet16(ds, 0x20cea5) != 0x00ff)
        goto loc_1bf2f2;
    esp += 4;
    return;
loc_1bf2f2: // 0160:1bf2f2
    memoryASet16(ds, 0x224680, 0xffff);
    eax = 0x00003524;
    interrupt(0x21);
    memoryASet32(ds, 0x224678, ebx);
    memoryASet16(ds, 0x22467c, es);
    push(ds);
    es = pop();
    push32(flagAsReg32());
    flags.interrupts = 0;
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8b2a;
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x20cea7) == 0x0041)
        goto loc_1bf350;
    if (memoryAGet16(ds, 0x20cea7) != 0x0042)
        goto loc_1bf37b;
    eax = 0x00001500;
    edx = 0x00000001;
    interrupt(0x13);
    if (ah)
        goto loc_1bf37b;
loc_1bf350: // 0160:1bf350
    eax = 0x0000440e;
    bl = 0x01;
    interrupt(0x21);
    if (!al)
        goto loc_1bf37b;
    memoryASet16(ds, 0x20cea7, 0x0041);
    if (al != 0x02)
        goto loc_1bf37b;
    memoryASet16(ds, 0x20cea7, 0x0042);
loc_1bf37b: // 0160:1bf37b
    ecx = 0x0000000a;
    esi = 0x001ef58b;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9cf, 0x00);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, 0x20e9c5, al);
    edx = 0x0020e9c5;
    eax = 0x00003900;
    interrupt(0x21);
    if (memoryAGet16(ds, 0x224680) != 0x0000)
        goto loc_1bf3c2;
    sub_1bf49e();
    goto loc_1bf40b;
    // gap 3 bytes
loc_1bf3c2: // 0160:1bf3c2
    sub_1bf456();
    sub_1bf923();
    sub_1bf49e();
    push32(flagAsReg32());
    push(ds);
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x224678);
    ds = memoryAGet16(ds, 0x22467c);
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x224680) == 0x0000)
        goto loc_1bf40b;
    if (!(memoryAGet16(ds, 0x20cec3) & 0xffff))
        goto loc_1c066b;
    goto loc_1bf97b;
loc_1bf40b: // 0160:1bf40b
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf414: // 0160:1bf414
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    sub_1bf9c6();
    sub_1bf9d1();
    esi = 0x001ee27a;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf414;
    // gap 418 bytes
loc_1bf5f8: // 0160:1bf5f8
    sub_1b5096();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9c6();
    sub_1bfedb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    esp += 4;
    return;
    // gap 810 bytes
loc_1bf97b: // 0160:1bf97b
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf984: // 0160:1bf984
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    sub_1bf9c6();
    sub_1bf9d1();
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf984;
    // gap 1301 bytes
loc_1bfedb: // 0160:1bfedb
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
    return;
    // gap 1898 bytes
loc_1c066b: // 0160:1c066b
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b5096();
    goto loc_1bfedb;
}
void sub_1bf456() // 0160:1bf456 +long
{
    esp -= 4;
    ecx = 0x00000018;
    esi = 0x001ef58b;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    eax = memoryAGet16(ds, 0x20ec8f);
    esi = memoryAGet32(ds, 0x20b808);
    ecx = 0x0000000c;
    mul16(cx);
    bl = memoryAGet(ds, esi + eax + 5);
    memoryASet(ds, 0x20e9d5, bl);
    bx = memoryAGet16(ds, esi + eax + 6);
    memoryASet16(ds, 0x20e9d6, bx);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, 0x20e9c5, al);
    esp += 4;
}
void sub_1bf49e() // 0160:1bf49e +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf4c9();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf4c9();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1bf4c9() // 0160:1bf4c9 +long
{
    esp -= 4;
    goto loc_1bf4c9;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 37847 bytes
loc_1bf4c9: // 0160:1bf4c9
    al = 0xc3;
    bl = 0x08;
    cl = 0x19;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x8d;
    cl = 0x0e;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    goto loc_1b60e3;
}
void sub_1bf4ea() // 0160:1bf4ea +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1bffce();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c003b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c003b();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
loc_1bf53d: // 0160:1bf53d
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf56a;
    if (memoryAGet16(ds, 0x20e82f) != 0x0001)
        goto loc_1bf5ae;
    memoryASet16(ds, 0x20ce9f, 0x0001);
    esp += 4;
    return;
loc_1bf56a: // 0160:1bf56a
    esi = 0x001ee1cc;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1bffa9();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf53d;
loc_1bf5ae: // 0160:1bf5ae
    memoryASet16(ds, 0x20ce9f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1bffce();
    if (memoryAGet16(ds, 0x22464c) == 0x03e7)
        goto loc_1bf681;
    if (memoryAGet16(ds, 0x224650) & 0xffff)
        goto loc_1bf6d0;
loc_1bf5e3: // 0160:1bf5e3
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf651;
loc_1bf5f8: // 0160:1bf5f8
    sub_1b5096();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9c6();
    sub_1bfedb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    esp += 4;
    return;
loc_1bf651: // 0160:1bf651
    esi = 0x001ee1f3;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee20d;
    al = 0xc3;
    bl = 0x8b;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf5e3;
loc_1bf681: // 0160:1bf681
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf68a: // 0160:1bf68a
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    esi = 0x001ee294;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee2ae;
    al = 0xc3;
    bl = 0x88;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf68a;
loc_1bf6d0: // 0160:1bf6d0
    esi = 0x00224684;
    edi = 0x0023c4e0;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1bf6f7;
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
    goto loc_1bf87b;
loc_1bf6f7: // 0160:1bf6f7
    memoryASet16(ds, 0x20ec8f, 0x0000);
    esi = memoryAGet32(ds, 0x20b808);
    esi += 0x00002ed4;
loc_1bf70c: // 0160:1bf70c
    edi = 0x00224684;
    ecx = 0x00000010;
    push32(esi);
loc_1bf717: // 0160:1bf717
    cmpsb<DS_ESI, ES_EDI>();
    if (!flags.zero)
        goto loc_1bf722;
    if (--ecx)
        goto loc_1bf717;
    esi = pop32();
    goto loc_1bf741;
    // gap 3 bytes
loc_1bf722: // 0160:1bf722
    esi = pop32();
    esi += 0x00000010;
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 1);
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1bf70c;
    goto loc_1bf83c;
loc_1bf741: // 0160:1bf741
    sub_1c004f();
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20e82f, 0x0001);
loc_1bf761: // 0160:1bf761
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf789;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bf5f8;
    goto loc_1bf7db;
    // gap 3 bytes
loc_1bf789: // 0160:1bf789
    esi = 0x001ee223;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee23d;
    al = 0xc3;
    bl = 0x8b;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1bffa9();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf761;
loc_1bf7db: // 0160:1bf7db
    sub_1be986();
    sub_1be9da();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax + 5);
    ax = memoryAGet16(ds, esi + eax + 6);
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, bl);
    memoryASet16(ds, 0x20e9d4, ax);
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1bf97b;
    goto loc_1bf5f8;
loc_1bf83c: // 0160:1bf83c
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
loc_1bf842: // 0160:1bf842
    esi = memoryAGet32(ds, 0x20b808);
    bx = 0;
loc_1bf84b: // 0160:1bf84b
    if (dl != memoryAGet(ds, esi + 5))
        goto loc_1bf856;
    if (ax == memoryAGet16(ds, esi + 6))
        goto loc_1bf866;
loc_1bf856: // 0160:1bf856
    bx++;
    if (bx == memoryAGet16(ds, 0x22464c))
        goto loc_1bf87b;
    esi += 0x0000000c;
    goto loc_1bf84b;
loc_1bf866: // 0160:1bf866
    ah++;
    if (ah != 0x3a)
        goto loc_1bf842;
    ah = 0x30;
    al++;
    if (al != 0x3a)
        goto loc_1bf842;
    al = 0x30;
    dl++;
    goto loc_1bf842;
loc_1bf87b: // 0160:1bf87b
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, dl);
    memoryASet16(ds, 0x20e9d4, ax);
    memoryASet(ds, 0x20ec45, dl);
    memoryASet16(ds, 0x20ec46, ax);
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1bf97b;
    ecx = 0x0000000c;
    esi = 0x001ef56a;
    edi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    push32(edi);
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    dl = memoryAGet(ds, 0x20ec45);
    ax = memoryAGet16(ds, 0x20ec46);
    memoryASet(ds, edi + 5, dl);
    memoryASet16(ds, edi + 6, ax);
    esi = 0x00224684;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    ecx = 0x00000010;
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) + 1);
    goto loc_1bf5f8;
    // gap 88 bytes
loc_1bf97b: // 0160:1bf97b
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf984: // 0160:1bf984
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    sub_1bf9c6();
    sub_1bf9d1();
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf984;
}
void sub_1bf5ae() // 0160:1bf5ae +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ce9f, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    sub_1bffce();
    if (memoryAGet16(ds, 0x22464c) == 0x03e7)
        goto loc_1bf681;
    if (memoryAGet16(ds, 0x224650) & 0xffff)
        goto loc_1bf6d0;
loc_1bf5e3: // 0160:1bf5e3
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf651;
loc_1bf5f8: // 0160:1bf5f8
    sub_1b5096();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9c6();
    sub_1bfedb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    esp += 4;
    return;
loc_1bf651: // 0160:1bf651
    esi = 0x001ee1f3;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee20d;
    al = 0xc3;
    bl = 0x8b;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf5e3;
loc_1bf681: // 0160:1bf681
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf68a: // 0160:1bf68a
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    esi = 0x001ee294;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee2ae;
    al = 0xc3;
    bl = 0x88;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf68a;
loc_1bf6d0: // 0160:1bf6d0
    esi = 0x00224684;
    edi = 0x0023c4e0;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1bf6f7;
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
    goto loc_1bf87b;
loc_1bf6f7: // 0160:1bf6f7
    memoryASet16(ds, 0x20ec8f, 0x0000);
    esi = memoryAGet32(ds, 0x20b808);
    esi += 0x00002ed4;
loc_1bf70c: // 0160:1bf70c
    edi = 0x00224684;
    ecx = 0x00000010;
    push32(esi);
loc_1bf717: // 0160:1bf717
    cmpsb<DS_ESI, ES_EDI>();
    if (!flags.zero)
        goto loc_1bf722;
    if (--ecx)
        goto loc_1bf717;
    esi = pop32();
    goto loc_1bf741;
    // gap 3 bytes
loc_1bf722: // 0160:1bf722
    esi = pop32();
    esi += 0x00000010;
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 1);
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1bf70c;
    goto loc_1bf83c;
loc_1bf741: // 0160:1bf741
    sub_1c004f();
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20e82f, 0x0001);
loc_1bf761: // 0160:1bf761
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bf789;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bf5f8;
    goto loc_1bf7db;
    // gap 3 bytes
loc_1bf789: // 0160:1bf789
    esi = 0x001ee223;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee23d;
    al = 0xc3;
    bl = 0x8b;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1bffa9();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf761;
loc_1bf7db: // 0160:1bf7db
    sub_1be986();
    sub_1be9da();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax + 5);
    ax = memoryAGet16(ds, esi + eax + 6);
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, bl);
    memoryASet16(ds, 0x20e9d4, ax);
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1bf97b;
    goto loc_1bf5f8;
loc_1bf83c: // 0160:1bf83c
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
loc_1bf842: // 0160:1bf842
    esi = memoryAGet32(ds, 0x20b808);
    bx = 0;
loc_1bf84b: // 0160:1bf84b
    if (dl != memoryAGet(ds, esi + 5))
        goto loc_1bf856;
    if (ax == memoryAGet16(ds, esi + 6))
        goto loc_1bf866;
loc_1bf856: // 0160:1bf856
    bx++;
    if (bx == memoryAGet16(ds, 0x22464c))
        goto loc_1bf87b;
    esi += 0x0000000c;
    goto loc_1bf84b;
loc_1bf866: // 0160:1bf866
    ah++;
    if (ah != 0x3a)
        goto loc_1bf842;
    ah = 0x30;
    al++;
    if (al != 0x3a)
        goto loc_1bf842;
    al = 0x30;
    dl++;
    goto loc_1bf842;
loc_1bf87b: // 0160:1bf87b
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, dl);
    memoryASet16(ds, 0x20e9d4, ax);
    memoryASet(ds, 0x20ec45, dl);
    memoryASet16(ds, 0x20ec46, ax);
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1bf97b;
    ecx = 0x0000000c;
    esi = 0x001ef56a;
    edi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    push32(edi);
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    dl = memoryAGet(ds, 0x20ec45);
    ax = memoryAGet16(ds, 0x20ec46);
    memoryASet(ds, edi + 5, dl);
    memoryASet16(ds, edi + 6, ax);
    esi = 0x00224684;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    ecx = 0x00000010;
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) + 1);
    goto loc_1bf5f8;
    // gap 88 bytes
loc_1bf97b: // 0160:1bf97b
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bf984: // 0160:1bf984
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bf5f8;
    sub_1bf9c6();
    sub_1bf9d1();
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bf984;
}
void sub_1bf923() // 0160:1bf923 +long
{
    esp -= 4;
    edx = 0x0020e9c5;
    ecx = 0;
    eax = 0x00003c00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bf971;
    memoryASet32(ds, 0x20ee4b, eax);
    sub_1c451f();
    edx += 0x0000304c;
    ecx = edx;
    edx = 0x0023c4e0;
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00004000;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1bf971;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1b2f82();
    memoryASet16(ds, 0x20ce9f, 0x0001);
    esp += 4;
    return;
loc_1bf971: // 0160:1bf971
    memoryASet16(ds, 0x20cec3, 0x0001);
    esp += 4;
}
void sub_1bf9c6() // 0160:1bf9c6 +long
{
    esp -= 4;
    goto loc_1bf9c6;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 39124 bytes
loc_1bf9c6: // 0160:1bf9c6
    al = 0xc3;
    bl = 0x88;
    cl = 0x18;
    goto loc_1b60e3;
}
void sub_1bf9d1() // 0160:1bf9d1 +long
{
    esp -= 4;
    goto loc_1bf9d1;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 39135 bytes
loc_1bf9d1: // 0160:1bf9d1
    al = 0xc4;
    bl = 0x92;
    cl = 0x03;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x12;
    cl = 0x02;
    goto loc_1b60e3;
}
void sub_1bf9e7() // 0160:1bf9e7 +long
{
    esp -= 4;
    goto loc_1bf9e7;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 39157 bytes
loc_1bf9e7: // 0160:1bf9e7
    al = 0xc3;
    bl = 0xcc;
    cl = 0x10;
    goto loc_1b60e3;
}
void sub_1bf9f2() // 0160:1bf9f2 +long
{
    esp -= 4;
    goto loc_1bf9f2;
loc_1bf5f8: // 0160:1bf5f8
    sub_1b5096();
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9c6();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9c6();
    sub_1bfedb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    esp += 4;
    return;
    // gap 929 bytes
loc_1bf9f2: // 0160:1bf9f2
    memoryASet16(ds, 0x22464e, 0x0001);
    memoryASet16(ds, 0x20ed4d, 0x0006);
    sub_1c1c1d();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1bfa23;
    sub_1c0f4d();
    sub_1b4f0e();
    goto loc_1bfb76;
loc_1bfa23: // 0160:1bfa23
    sub_1c0f4d();
    sub_1bfe41();
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1bfa60: // 0160:1bfa60
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1bfa8c;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1bfb76;
    goto loc_1bfad0;
    // gap 3 bytes
loc_1bfa8c: // 0160:1bfa8c
    esi = 0x001ee2ca;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1bffa9();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bfa60;
loc_1bfad0: // 0160:1bfad0
    sub_1be986();
    sub_1be9da();
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    ecx = 0x00000016;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi = memoryAGet32(ds, 0x20b808);
    edx = 0x0020e9c5;
    bl = memoryAGet(ds, esi + eax + 5);
    ax = memoryAGet16(ds, esi + eax + 6);
    memoryASet(ds, edx + 14, bl);
    memoryASet16(ds, edx + 15, ax);
    eax = 0x00004100;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_1bfb68;
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1bfb2a: // 0160:1bfb2a
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1bfb76;
    sub_1bf9d1();
    sub_1bf9e7();
    esi = 0x001ee2e4;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1bfb2a;
loc_1bfb68: // 0160:1bfb68
    sub_1a841e();
    memoryASet16(ds, 0x20ec8f, 0x0000);
loc_1bfb76: // 0160:1bfb76
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bf9e7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bf9e7();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    goto loc_1bf5f8;
}
void sub_1bfc08() // 0160:1bfc08 +long
{
    esp -= 4;
    goto loc_1bfc08;
loc_1bfba5: // 0160:1bfba5
    sub_1bffce();
    sub_1a8044();
loc_1bfbaf: // 0160:1bfbaf
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1bfbea;
    eax = 0;
    interrupt(0x16);
    al = 0xc3;
    bl = 0x89;
    cl = 0x16;
    sub_1b60e3();
    sub_1b5096();
    al = 0xc3;
    bl = 0x89;
    cl = 0x16;
    sub_1b60e3();
    goto loc_1c0666;
loc_1bfbea: // 0160:1bfbea
    esi = 0x001ee294;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001ee34d;
    al = 0xc3;
    bl = 0x89;
    sub_1b60a7();
    goto loc_1bfbaf;
loc_1bfc08: // 0160:1bfc08
    memoryASet16(ds, 0x20cea5, 0x0000);
    if (memoryAGet16(ds, 0x22464c) == 0x03e7)
        goto loc_1bfba5;
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20cea7, 0x0020);
    sub_1bffce();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x001ee3a7;
    sub_1be816();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee3a7;
    sub_1be816();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    sub_1a8044();
loc_1bfc6c: // 0160:1bfc6c
    sub_1b5096();
    sub_1c6ff7();
    sub_1bfd0f();
    sub_1bfd3e();
    if (memoryAGet16(ds, 0x20e831) < 0x0001)
        goto loc_1bfcd0;
    if (memoryAGet16(ds, 0x20e831) == 0x0001)
        goto loc_1bfcc6;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bfcbb();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bfcbb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    goto loc_1c01b4;
    // gap 11 bytes
loc_1bfcc6: // 0160:1bfcc6
    sub_1a8054();
    goto loc_1c008e;
loc_1bfcd0: // 0160:1bfcd0
    esi = 0x001ee367;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20cea5) & 0xffff)
        goto loc_1bfcfc;
    esi = 0x001ee381;
    al = 0xc3;
    bl = 0x8c;
    sub_1b60a7();
    goto loc_1bfd0a;
    // gap 3 bytes
loc_1bfcfc: // 0160:1bfcfc
    esi = 0x001ee395;
    al = 0xc3;
    bl = 0x8d;
    sub_1b60a7();
loc_1bfd0a: // 0160:1bfd0a
    goto loc_1bfc6c;
    // gap 460 bytes
loc_1bfedb: // 0160:1bfedb
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
    return;
    // gap 397 bytes
loc_1c008e: // 0160:1c008e
    memoryASet16(ds, 0x224680, 0xffff);
    eax = 0x00003524;
    interrupt(0x21);
    memoryASet32(ds, 0x224678, ebx);
    memoryASet16(ds, 0x22467c, es);
    push(ds);
    es = pop();
    push32(flagAsReg32());
    flags.interrupts = 0;
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8b2a;
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x20cea7) == 0x0041)
        goto loc_1c00ec;
    if (memoryAGet16(ds, 0x20cea7) != 0x0042)
        goto loc_1c0117;
    eax = 0x00001500;
    edx = 0x00000001;
    interrupt(0x13);
    if (ah)
        goto loc_1c0117;
loc_1c00ec: // 0160:1c00ec
    eax = 0x0000440e;
    bl = 0x01;
    interrupt(0x21);
    if (!al)
        goto loc_1c0117;
    memoryASet16(ds, 0x20cea7, 0x0041);
    if (al != 0x02)
        goto loc_1c0117;
    memoryASet16(ds, 0x20cea7, 0x0042);
loc_1c0117: // 0160:1c0117
    esi = 0x001ef5a3;
    edi = 0x0020e9c5;
    edx = edi;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edx, al);
    memoryASet32(ds, 0x224670, 0x00000010);
    memoryASet32(ds, 0x224674, 0x0020eeb2);
    sub_1c1db9();
    push32(flagAsReg32());
    push(ds);
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x224678);
    ds = memoryAGet16(ds, 0x22467c);
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x224680) == 0xffff)
        goto loc_1c023e;
    if (memoryAGet16(ds, 0x224680) == 0x0002)
        goto loc_1c01e8;
    if (memoryAGet16(ds, 0x224680) == 0x000b)
        goto loc_1c01e8;
    eax = 0;
    edx = 0;
    interrupt(0x13);
    sub_1a8044();
loc_1c0199: // 0160:1c0199
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c01c2;
    eax = 0;
    interrupt(0x16);
loc_1c01b4: // 0160:1c01b4
    memoryASet16(ds, 0x20cea5, 0x00ff);
    goto loc_1c0666;
loc_1c01c2: // 0160:1c01c2
    esi = 0x001ee40e;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    sub_1b60e3();
    goto loc_1c0199;
loc_1c01e8: // 0160:1c01e8
    eax = 0;
    edx = 0;
    interrupt(0x13);
    sub_1a8044();
loc_1c01f3: // 0160:1c01f3
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c0218;
    eax = 0;
    interrupt(0x16);
    sub_1a8054();
    goto loc_1c008e;
loc_1c0218: // 0160:1c0218
    esi = 0x001ee3b1;
    al = 0xc3;
    bl = 0x08;
    sub_1b60a7();
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    sub_1b60e3();
    goto loc_1c01f3;
loc_1c023e: // 0160:1c023e
    if (!(memoryAGet16(ds, 0x20cea5) & 0xffff))
        goto loc_1c024e;
    esp += 4;
    return;
loc_1c024e: // 0160:1c024e
    ecx = 0x00000018;
    esi = 0x001ef576;
    edi = 0x0020ea5b;
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edi, al);
    edi++;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    sub_1c09ca();
    sub_1b5096();
    sub_1c0a16();
    if (!(memoryAGet16(ds, 0x224662) & 0xffff))
        goto loc_1c0646;
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x224668, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1c04e6();
    sub_1c049d();
loc_1c02c7: // 0160:1c02c7
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c0392;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1c0445;
    if (memoryAGet16(ds, 0x20e82f) < 0x0001)
        goto loc_1c0350;
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c06b3();
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20ceb1, 0x0001);
    goto loc_1c0359;
    // gap 3 bytes
loc_1c0350: // 0160:1c0350
    memoryASet16(ds, 0x20ceb1, 0x0000);
loc_1c0359: // 0160:1c0359
    ax = memoryAGet16(ds, 0x224668);
    ax++;
    if (memoryAGet16(ds, 0x224662) == ax)
        goto loc_1c0445;
    memoryASet16(ds, 0x224668, ax);
    sub_1c04e6();
    memoryASet16(ds, 0x20e831, 0x0000);
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1c0392;
    sub_1c049d();
loc_1c0392: // 0160:1c0392
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c0466();
    esi = 0x001f14f0;
    al = 0xc3;
    bl = 0x0c;
    sub_1b60a7();
    esi = 0x001ee3e8;
    sub_1b60d3();
    esi = memoryAGet32(ds, 0x20b804);
    esi += 0x00002ed4;
    eax = memoryAGet16(ds, 0x224668);
    eax <<= 4;
    esi += eax;
    push32(esi);
    edx = 0x00000010;
    esi += 0x0000000f;
loc_1c03f5: // 0160:1c03f5
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c03fe;
    esi--;
    edx--;
    if (edx)
        goto loc_1c03f5;
loc_1c03fe: // 0160:1c03fe
    ebx = 0x00000028;
    ebx -= edx;
    memoryASet32(ds, 0x20ced3, edx);
    ebx >>= 1;
    esi = pop32();
    edi = 0x0020ea2d;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi = 0x0020ea29;
    memoryASet(ds, esi, 0xc3);
    memoryASet(ds, esi + 1, 0x80);
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + bl);
    memoryASet(ds, esi + 2, 0xf0);
    memoryASet(ds, esi + 3, 0x10);
    sub_1be816();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c02c7;
loc_1c0445: // 0160:1c0445
    sub_1b5096();
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    goto loc_1c066b;
    // gap 480 bytes
loc_1c0646: // 0160:1c0646
    sub_1a8044();
loc_1c064b: // 0160:1c064b
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c06a3;
    eax = 0;
    interrupt(0x16);
loc_1c0666: // 0160:1c0666
    sub_1a8054();
loc_1c066b: // 0160:1c066b
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b5096();
    goto loc_1bfedb;
loc_1c06a3: // 0160:1c06a3
    esi = 0x001ee3ce;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c064b;
}
void sub_1bfc33() // 0160:1bfc33 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x001ee3a7;
    sub_1be816();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x001ee3a7;
    sub_1be816();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    sub_1a8044();
loc_1bfc6c: // 0160:1bfc6c
    sub_1b5096();
    sub_1c6ff7();
    sub_1bfd0f();
    sub_1bfd3e();
    if (memoryAGet16(ds, 0x20e831) < 0x0001)
        goto loc_1bfcd0;
    if (memoryAGet16(ds, 0x20e831) == 0x0001)
        goto loc_1bfcc6;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bfcbb();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bfcbb();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    goto loc_1c01b4;
    // gap 11 bytes
loc_1bfcc6: // 0160:1bfcc6
    sub_1a8054();
    goto loc_1c008e;
loc_1bfcd0: // 0160:1bfcd0
    esi = 0x001ee367;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20cea5) & 0xffff)
        goto loc_1bfcfc;
    esi = 0x001ee381;
    al = 0xc3;
    bl = 0x8c;
    sub_1b60a7();
    goto loc_1bfd0a;
    // gap 3 bytes
loc_1bfcfc: // 0160:1bfcfc
    esi = 0x001ee395;
    al = 0xc3;
    bl = 0x8d;
    sub_1b60a7();
loc_1bfd0a: // 0160:1bfd0a
    goto loc_1bfc6c;
    // gap 460 bytes
loc_1bfedb: // 0160:1bfedb
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
    return;
    // gap 397 bytes
loc_1c008e: // 0160:1c008e
    memoryASet16(ds, 0x224680, 0xffff);
    eax = 0x00003524;
    interrupt(0x21);
    memoryASet32(ds, 0x224678, ebx);
    memoryASet16(ds, 0x22467c, es);
    push(ds);
    es = pop();
    push32(flagAsReg32());
    flags.interrupts = 0;
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8b2a;
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x20cea7) == 0x0041)
        goto loc_1c00ec;
    if (memoryAGet16(ds, 0x20cea7) != 0x0042)
        goto loc_1c0117;
    eax = 0x00001500;
    edx = 0x00000001;
    interrupt(0x13);
    if (ah)
        goto loc_1c0117;
loc_1c00ec: // 0160:1c00ec
    eax = 0x0000440e;
    bl = 0x01;
    interrupt(0x21);
    if (!al)
        goto loc_1c0117;
    memoryASet16(ds, 0x20cea7, 0x0041);
    if (al != 0x02)
        goto loc_1c0117;
    memoryASet16(ds, 0x20cea7, 0x0042);
loc_1c0117: // 0160:1c0117
    esi = 0x001ef5a3;
    edi = 0x0020e9c5;
    edx = edi;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edx, al);
    memoryASet32(ds, 0x224670, 0x00000010);
    memoryASet32(ds, 0x224674, 0x0020eeb2);
    sub_1c1db9();
    push32(flagAsReg32());
    push(ds);
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x224678);
    ds = memoryAGet16(ds, 0x22467c);
    eax = 0x00002524;
    interrupt(0x21);
    ds = pop();
    flagsFromReg32(pop32());
    if (memoryAGet16(ds, 0x224680) == 0xffff)
        goto loc_1c023e;
    if (memoryAGet16(ds, 0x224680) == 0x0002)
        goto loc_1c01e8;
    if (memoryAGet16(ds, 0x224680) == 0x000b)
        goto loc_1c01e8;
    eax = 0;
    edx = 0;
    interrupt(0x13);
    sub_1a8044();
loc_1c0199: // 0160:1c0199
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c01c2;
    eax = 0;
    interrupt(0x16);
loc_1c01b4: // 0160:1c01b4
    memoryASet16(ds, 0x20cea5, 0x00ff);
    goto loc_1c0666;
loc_1c01c2: // 0160:1c01c2
    esi = 0x001ee40e;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    sub_1b60e3();
    goto loc_1c0199;
loc_1c01e8: // 0160:1c01e8
    eax = 0;
    edx = 0;
    interrupt(0x13);
    sub_1a8044();
loc_1c01f3: // 0160:1c01f3
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c0218;
    eax = 0;
    interrupt(0x16);
    sub_1a8054();
    goto loc_1c008e;
loc_1c0218: // 0160:1c0218
    esi = 0x001ee3b1;
    al = 0xc3;
    bl = 0x08;
    sub_1b60a7();
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    sub_1b60e3();
    goto loc_1c01f3;
loc_1c023e: // 0160:1c023e
    if (!(memoryAGet16(ds, 0x20cea5) & 0xffff))
        goto loc_1c024e;
    esp += 4;
    return;
loc_1c024e: // 0160:1c024e
    ecx = 0x00000018;
    esi = 0x001ef576;
    edi = 0x0020ea5b;
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edi, al);
    edi++;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    sub_1c09ca();
    sub_1b5096();
    sub_1c0a16();
    if (!(memoryAGet16(ds, 0x224662) & 0xffff))
        goto loc_1c0646;
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x224668, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1c04e6();
    sub_1c049d();
loc_1c02c7: // 0160:1c02c7
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c0392;
    if (memoryAGet16(ds, 0x20e82f) > 0x0001)
        goto loc_1c0445;
    if (memoryAGet16(ds, 0x20e82f) < 0x0001)
        goto loc_1c0350;
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c06b3();
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00fe);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20ceb1, 0x0001);
    goto loc_1c0359;
    // gap 3 bytes
loc_1c0350: // 0160:1c0350
    memoryASet16(ds, 0x20ceb1, 0x0000);
loc_1c0359: // 0160:1c0359
    ax = memoryAGet16(ds, 0x224668);
    ax++;
    if (memoryAGet16(ds, 0x224662) == ax)
        goto loc_1c0445;
    memoryASet16(ds, 0x224668, ax);
    sub_1c04e6();
    memoryASet16(ds, 0x20e831, 0x0000);
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1c0392;
    sub_1c049d();
loc_1c0392: // 0160:1c0392
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0003);
    memoryASet16(ds, 0x20e809, 0x0002);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c0466();
    esi = 0x001f14f0;
    al = 0xc3;
    bl = 0x0c;
    sub_1b60a7();
    esi = 0x001ee3e8;
    sub_1b60d3();
    esi = memoryAGet32(ds, 0x20b804);
    esi += 0x00002ed4;
    eax = memoryAGet16(ds, 0x224668);
    eax <<= 4;
    esi += eax;
    push32(esi);
    edx = 0x00000010;
    esi += 0x0000000f;
loc_1c03f5: // 0160:1c03f5
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c03fe;
    esi--;
    edx--;
    if (edx)
        goto loc_1c03f5;
loc_1c03fe: // 0160:1c03fe
    ebx = 0x00000028;
    ebx -= edx;
    memoryASet32(ds, 0x20ced3, edx);
    ebx >>= 1;
    esi = pop32();
    edi = 0x0020ea2d;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi = 0x0020ea29;
    memoryASet(ds, esi, 0xc3);
    memoryASet(ds, esi + 1, 0x80);
    memoryASet(ds, esi + 1, memoryAGet(ds, esi + 1) + bl);
    memoryASet(ds, esi + 2, 0xf0);
    memoryASet(ds, esi + 3, 0x10);
    sub_1be816();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c02c7;
loc_1c0445: // 0160:1c0445
    sub_1b5096();
    sub_1c52c2();
    memoryASet16(ds, 0x1f1cb8, 0x0000);
    memoryASet16(ds, 0x2231c4, 0x0000);
    goto loc_1c066b;
    // gap 480 bytes
loc_1c0646: // 0160:1c0646
    sub_1a8044();
loc_1c064b: // 0160:1c064b
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c06a3;
    eax = 0;
    interrupt(0x16);
loc_1c0666: // 0160:1c0666
    sub_1a8054();
loc_1c066b: // 0160:1c066b
    memoryASet16(ds, 0x20ec3d, 0x00be);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b5096();
    goto loc_1bfedb;
loc_1c06a3: // 0160:1c06a3
    esi = 0x001ee3ce;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c064b;
}
void sub_1bfcbb() // 0160:1bfcbb +long
{
    esp -= 4;
    goto loc_1bfcbb;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 39881 bytes
loc_1bfcbb: // 0160:1bfcbb
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    goto loc_1b60e3;
}
void sub_1bfd0f() // 0160:1bfd0f +long
{
    esp -= 4;
    goto loc_1bfd0f;
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 9450 bytes
loc_1bfd0f: // 0160:1bfd0f
    if (memoryAGet16(ds, 0x20cea7) != 0x0020)
        goto loc_1bfd3d;
    ax = 0x0138;
    bx = 0x0114;
    cx = 0x0002;
    dx = 0x0004;
    bp = memoryAGet16(ds, 0x20eeb0);
    bp &= 0x0008;
    if (!bp)
        goto loc_1bfd38;
    cx++;
loc_1bfd38: // 0160:1bfd38
    goto loc_1bd7dd;
loc_1bfd3d: // 0160:1bfd3d
    esp += 4;
    return;
}
void sub_1bfd3e() // 0160:1bfd3e +long
{
    esp -= 4;
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1bfe36;
    eax = 0;
    interrupt(0x16);
    if (ah != 0x1c)
        goto loc_1bfd70;
    if (memoryAGet16(ds, 0x20cea7) == 0x0020)
        goto loc_1bfe36;
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1bfdcf;
    // gap 3 bytes
loc_1bfd70: // 0160:1bfd70
    if (ah != 0x01)
        goto loc_1bfd7f;
    memoryASet16(ds, 0x20e831, 0x00ff);
    esp += 4;
    return;
loc_1bfd7f: // 0160:1bfd7f
    if (ah != 0x53)
        goto loc_1bfda0;
loc_1bfd84: // 0160:1bfd84
    if (memoryAGet16(ds, 0x20cea7) == 0x0020)
        goto loc_1bfe36;
    memoryASet16(ds, 0x20cea7, 0x0020);
    goto loc_1bfdcf;
    // gap 3 bytes
loc_1bfda0: // 0160:1bfda0
    if (ah == 0x0e)
        goto loc_1bfd84;
    if (al < 0x41)
        goto loc_1bfe36;
    if (al < 0x5b)
        goto loc_1bfdc7;
    al -= 0x20;
    if (al < 0x41)
        goto loc_1bfe36;
    if (al > 0x5a)
        goto loc_1bfe36;
loc_1bfdc7: // 0160:1bfdc7
    ah = 0;
    memoryASet16(ds, 0x20cea7, ax);
loc_1bfdcf: // 0160:1bfdcf
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet(ds, 0x20ea29, 0xc4);
    memoryASet(ds, 0x20ea2a, 0x97);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x01);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, 0x20ea2d, al);
    dx = memoryAGet16(ds, 0x2231c4);
    push32(edx);
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x0020ea29;
    sub_1be816();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea29;
    sub_1be816();
    edx = pop32();
    memoryASet16(ds, 0x2231c4, dx);
    esp += 4;
    return;
loc_1bfe36: // 0160:1bfe36
    if (memoryAGet16(ds, 0x20cea7) != 0x0020)
        goto loc_1bfdcf;
    esp += 4;
}
void sub_1bfe41() // 0160:1bfe41 +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bfe67();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bfe67();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
}
void sub_1bfe67() // 0160:1bfe67 +long
{
    esp -= 4;
    goto loc_1bfe67;
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
    return;
    // gap 5345 bytes
loc_1bfe67: // 0160:1bfe67
    sub_1c007a();
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x0010;
    mul16(cx);
    eax &= 0x0000ffff;
    esi = memoryAGet32(ds, 0x20b808);
    esi += 0x00002ed4;
    esi += eax;
    push32(esi);
    bl = 0x10;
    esi += 0x0000000f;
loc_1bfe92: // 0160:1bfe92
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1bfe9c;
    bl--;
    esi--;
    goto loc_1bfe92;
loc_1bfe9c: // 0160:1bfe9c
    dl = 0x28;
    dl -= bl;
    dl >>= 1;
    esi = pop32();
    edi = 0x0020e9c9;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9c5, 0xc3);
    memoryASet(ds, 0x20e9c6, 0xc0);
    memoryASet(ds, 0x20e9c6, memoryAGet(ds, 0x20e9c6) + dl);
    memoryASet(ds, 0x20e9c7, 0xf0);
    memoryASet(ds, 0x20e9c8, 0x10);
    esi = 0x0020e9c5;
    goto loc_1be816;
}
void sub_1bfedb() // 0160:1bfedb +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bff01();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
}
void sub_1bff01() // 0160:1bff01 +long
{
    esp -= 4;
    goto loc_1bff01;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 40479 bytes
loc_1bff01: // 0160:1bff01
    esi = 0x001ee150;
    sub_1b60d3();
    esi = 0x001ee15f;
    sub_1b60d3();
    esi = 0x001ee176;
    sub_1b60d3();
    esi = 0x001ee187;
    sub_1b60d3();
    esi = 0x001ee199;
    sub_1b60d3();
    esi = 0x001ee1aa;
    goto loc_1b60d3;
}
void sub_1bff3d() // 0160:1bff3d +long
{
    esp -= 4;
    goto loc_1bff3d;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 10008 bytes
loc_1bff3d: // 0160:1bff3d
    ax += 0x006b;
    if (!bp)
        goto loc_1bff4a;
    ax += 0x0002;
loc_1bff4a: // 0160:1bff4a
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1b4b56;
    ax += 0x0040;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax -= 0x0030;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1b4b56;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1b4b56;
    ax -= 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1b4b56;
    ax -= 0x0048;
    goto loc_1b4b56;
}
void sub_1bffa9() // 0160:1bffa9 +long
{
    esp -= 4;
    goto loc_1bffa9;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 10116 bytes
loc_1bffa9: // 0160:1bffa9
    ax += 0x0023;
    if (!bp)
        goto loc_1bffb6;
    ax += 0x0002;
loc_1bffb6: // 0160:1bffb6
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax += 0x0008;
    goto loc_1b4b56;
}
void sub_1bffce() // 0160:1bffce +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1bfff9();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1bfff9();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1bfff9() // 0160:1bfff9 +long
{
    esp -= 4;
    goto loc_1bfff9;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 40711 bytes
loc_1bfff9: // 0160:1bfff9
    al = 0xc4;
    bl = 0x0a;
    cl = 0x0b;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x8a;
    cl = 0x13;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x0a;
    cl = 0x0d;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x8a;
    cl = 0x0e;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x0a;
    cl = 0x0d;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x8a;
    cl = 0x04;
    goto loc_1b60e3;
}
void sub_1c003b() // 0160:1c003b +long
{
    esp -= 4;
    goto loc_1c003b;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 40793 bytes
loc_1c003b: // 0160:1c003b
    esi = 0x001ee1e6;
    sub_1b60d3();
    esi = 0x001ee1ed;
    goto loc_1b60d3;
}
void sub_1c004f() // 0160:1c004f +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c007a();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c007a();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c007a() // 0160:1c007a +long
{
    esp -= 4;
    goto loc_1c007a;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 40856 bytes
loc_1c007a: // 0160:1c007a
    esi = 0x001ee253;
    sub_1b60d3();
    esi = 0x001ee25a;
    goto loc_1b60d3;
}
void sub_1c0466() // 0160:1c0466 +long
{
    esp -= 4;
    goto loc_1c0466;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 11329 bytes
loc_1c0466: // 0160:1c0466
    ax += 0x0024;
    if (!bp)
        goto loc_1c0473;
    ax += 0x0002;
loc_1c0473: // 0160:1c0473
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1b4b56;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1b4b56;
    ax += 0x0008;
    goto loc_1b4b56;
}
void sub_1c049d() // 0160:1c049d +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c04c8();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c04c8();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c04c8() // 0160:1c04c8 +long
{
    esp -= 4;
    goto loc_1c04c8;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 41958 bytes
loc_1c04c8: // 0160:1c04c8
    esi = 0x001f1504;
    sub_1b60d3();
    esi = 0x001f150a;
    sub_1b60d3();
    esi = 0x001f1511;
    goto loc_1b60d3;
}
void sub_1c04e6() // 0160:1c04e6 +long
{
    esp -= 4;
    push(ds);
    es = pop();
    ecx = 0x00000018;
    esi = 0x001ef58b;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b804);
    eax = memoryAGet16(ds, 0x224668);
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edx = 0x0020e9c5;
    bl = memoryAGet(ds, esi + 5);
    ax = memoryAGet16(ds, esi + 6);
    memoryASet(ds, edx + 16, bl);
    memoryASet16(ds, edx + 17, ax);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edx, al);
    memoryASet32(ds, 0x224670, 0x0000304c);
    memoryASet32(ds, 0x224674, 0x0023c4e0);
    sub_1c1db9();
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c05ef();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c05ef();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    al = memoryAGet(ds, 0x23c4f9);
    eax &= 0x000000ff;
    esi = 0x001f1476;
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edi = 0x0020c99a;
    sub_1c2296();
    edi = 0x0020c9a0;
    sub_1c2296();
    edi = 0x0020c9a6;
    ecx = 0x00000006;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    al = memoryAGet(ds, 0x23c4f8);
    eax &= 0x000000ff;
    esi = 0x001f13fe;
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edi = 0x0020c985;
    sub_1c2296();
    edi = 0x0020c991;
    sub_1c2296();
    edi = 0x0020c997;
    sub_1c2296();
    edi = 0x0020c99d;
    sub_1c2296();
    memoryASet16(ds, 0x224666, 0x0050);
    esp += 4;
}
void sub_1c05ef() // 0160:1c05ef +long
{
    esp -= 4;
    eax = 0x00000098;
    ebp = 0x00000271;
    esi = 0x0023c4fb;
loc_1c05fe: // 0160:1c05fe
    ebx = 0x00000108;
    edi = 0x00000019;
loc_1c0608: // 0160:1c0608
    ecx = memoryAGet(ds, esi);
    ecx += 0x00000004;
    edx = 0x00000004;
    push32(esi);
    push32(edi);
    push32(eax);
    push32(ebx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    edi = pop32();
    esi = pop32();
    esi++;
    ebp--;
    if (!ebp)
        goto loc_1c0636;
    ebx += 0x00000003;
    edi--;
    if (edi)
        goto loc_1c0608;
    sub_1c0636();
    eax += 0x00000003;
    goto loc_1c05fe;
loc_1c0636: // 0160:1c0636
    push32(eax);
    push32(ebx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1b5126();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c0636() // 0160:1c0636 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1b5126();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c06b3() // 0160:1c06b3 +long
{
    esp -= 4;
    goto loc_1c06b3;
loc_1a8054: // 0160:1a8054
    flags.direction = 0;
    push(ds);
    es = pop();
    edi = 0x0030b070;
    ecx = 0x00000030;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8a9b;
    eax = 0x00002509;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x0417, memoryAGet16(ds, 0x0417) & 0x00f0);
    esp += 4;
    return;
    // gap 99893 bytes
loc_1c06b3: // 0160:1c06b3
    esi = memoryAGet32(ds, 0x20b804);
    esi += 0x00002ed4;
    eax = memoryAGet16(ds, 0x224668);
    eax <<= 4;
    esi += eax;
    memoryASet32(ds, 0x20ced3, esi);
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1c072f;
    edi = 0x0020e9c5;
    ecx = 0x00000010;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    memoryASet32(ds, 0x20cecf, edi);
    edx = 0;
loc_1c0700: // 0160:1c0700
    esi = 0x0020e9c5;
    edi = memoryAGet32(ds, 0x20cecf);
    ecx = 0x00000004;
loc_1c0710: // 0160:1c0710
    cmpsd<DS_ESI, ES_EDI>();
    if (!flags.zero)
        goto loc_1c071c;
    if (--ecx)
        goto loc_1c0710;
    sub_1c098b();
    goto loc_1c06b3;
loc_1c071c: // 0160:1c071c
    edx++;
    if (memoryAGet16(ds, 0x22464c) == dx)
        goto loc_1c072f;
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + 0x00000010);
    goto loc_1c0700;
loc_1c072f: // 0160:1c072f
    push(ds);
    es = pop();
    ecx = 0x00000018;
    esi = 0x001ef58b;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b804);
    eax = memoryAGet16(ds, 0x224668);
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edx = 0x0020e9c5;
    bl = memoryAGet(ds, esi + 5);
    ax = memoryAGet16(ds, esi + 6);
    memoryASet(ds, edx + 16, bl);
    memoryASet16(ds, edx + 17, ax);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edx, al);
    memoryASet32(ds, 0x224670, 0xffffffff);
    eax = 0x0023c4e0;
    memoryASet32(ds, 0x224674, eax);
    sub_1c1db9();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1c0910;
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1c07b1;
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
    goto loc_1c07f0;
    // gap 3 bytes
loc_1c07b1: // 0160:1c07b1
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
loc_1c07b7: // 0160:1c07b7
    esi = memoryAGet32(ds, 0x20b808);
    bx = 0;
loc_1c07c0: // 0160:1c07c0
    if (dl != memoryAGet(ds, esi + 5))
        goto loc_1c07cb;
    if (ax == memoryAGet16(ds, esi + 6))
        goto loc_1c07db;
loc_1c07cb: // 0160:1c07cb
    bx++;
    if (bx == memoryAGet16(ds, 0x22464c))
        goto loc_1c07f0;
    esi += 0x0000000c;
    goto loc_1c07c0;
loc_1c07db: // 0160:1c07db
    ah++;
    if (ah != 0x3a)
        goto loc_1c07b7;
    ah = 0x30;
    al++;
    if (al != 0x3a)
        goto loc_1c07b7;
    al = 0x30;
    dl++;
    goto loc_1c07b7;
loc_1c07f0: // 0160:1c07f0
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, dl);
    memoryASet16(ds, 0x20e9d4, ax);
    memoryASet(ds, 0x20ec45, dl);
    memoryASet16(ds, 0x20ec46, ax);
    esi = memoryAGet32(ds, 0x20ced3);
    edi = 0x0023c4e0;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    sub_1bf923();
    esi = memoryAGet32(ds, 0x20ced3);
    edi = 0x00224684;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20ced3);
    esi += 0x0000000f;
    edx = 0x00000010;
loc_1c0850: // 0160:1c0850
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c0859;
    esi--;
    edx--;
    goto loc_1c0850;
loc_1c0859: // 0160:1c0859
    memoryASet16(ds, 0x224650, dx);
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1c08d6;
    ecx = 0x0000000c;
    esi = 0x001ef56a;
    edi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    push32(edi);
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    dl = memoryAGet(ds, 0x20ec45);
    ax = memoryAGet16(ds, 0x20ec46);
    memoryASet(ds, edi + 5, dl);
    memoryASet16(ds, edi + 6, ax);
    esi = 0x0023c4e0;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    ecx = 0x00000010;
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) + 1);
    esp += 4;
    return;
loc_1c08d6: // 0160:1c08d6
    sub_1a8044();
    sub_1c094a();
loc_1c08e0: // 0160:1c08e0
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c0900;
    eax = 0;
    interrupt(0x16);
    goto loc_1a8054;
loc_1c0900: // 0160:1c0900
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c08e0;
loc_1c0910: // 0160:1c0910
    sub_1a8044();
    sub_1c094a();
loc_1c091a: // 0160:1c091a
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c093a;
    eax = 0;
    interrupt(0x16);
    goto loc_1a8054;
loc_1c093a: // 0160:1c093a
    esi = 0x001ee3f4;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c091a;
}
void sub_1c094a() // 0160:1c094a +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c0975();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c0975();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c0975() // 0160:1c0975 +long
{
    esp -= 4;
    goto loc_1c0975;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 43139 bytes
loc_1c0975: // 0160:1c0975
    al = 0xc4;
    bl = 0x0c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x08;
    cl = 0x18;
    goto loc_1b60e3;
}
void sub_1c098b() // 0160:1c098b +long
{
    esp -= 4;
    sub_1a8044();
    sub_1c094a();
loc_1c0995: // 0160:1c0995
    sub_1b5096();
    sub_1c6ff7();
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c09ba;
    eax = 0;
    interrupt(0x16);
    sub_1a8054();
    goto loc_1c108f;
loc_1c09ba: // 0160:1c09ba
    esi = 0x001ee2fe;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c0995;
    // gap 1733 bytes
loc_1c108f: // 0160:1c108f
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x224650, 0x0000);
    al = 0x20;
    edi = 0x00224684;
    ecx = 0x00000010;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    sub_1a8044();
    sub_1c11a3();
    sub_1c10ee();
    if (!(memoryAGet16(ds, 0x224650) & 0xffff))
        goto loc_1c108f;
    esi = 0x00224684;
    edi = memoryAGet32(ds, 0x20b804);
    edi += 0x00002ed4;
    eax = memoryAGet16(ds, 0x224668);
    eax <<= 4;
    edi += eax;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    esp += 4;
}
void sub_1c09ca() // 0160:1c09ca +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c09f5();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c09f5();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c09f5() // 0160:1c09f5 +long
{
    esp -= 4;
    goto loc_1c09f5;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 43267 bytes
loc_1c09f5: // 0160:1c09f5
    al = 0xc3;
    bl = 0x08;
    cl = 0x19;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x8c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x90;
    cl = 0x08;
    goto loc_1b60e3;
}
void sub_1c0a16() // 0160:1c0a16 +long
{
    esp -= 4;
    memoryASet16(ds, 0x224662, 0x0000);
    eax = 0x00002f00;
    interrupt(0x21);
    memoryASet32(ds, 0x20ceef, ebx);
    eax = 0x00001a00;
    edx = 0x00224694;
    interrupt(0x21);
    eax = 0x00004e00;
    ecx = 0x00000000;
    edx = 0x0020ea5b;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c0a90;
    edi = memoryAGet32(ds, 0x20b804);
    memoryASet32(ds, 0x20ceeb, edi);
loc_1c0a57: // 0160:1c0a57
    memoryASet16(ds, 0x224662, memoryAGet16(ds, 0x224662) + 1);
    if (memoryAGet16(ds, 0x224662) == 0x03e7)
        goto loc_1c0a90;
    esi = 0x002246b2;
    edi = memoryAGet32(ds, 0x20ceeb);
    push(ds);
    es = pop();
    ecx = 0x00000003;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    memoryASet32(ds, 0x20ceeb, edi);
    eax = 0x00004f00;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_1c0a57;
loc_1c0a90: // 0160:1c0a90
    eax = 0x00001a00;
    edx = memoryAGet32(ds, 0x20ceef);
    interrupt(0x21);
    if (!(memoryAGet16(ds, 0x224662) & 0xffff))
        goto loc_1c0b02;
    edi = memoryAGet32(ds, 0x20b804);
    edi += 0x00002ed4;
    memoryASet32(ds, 0x20ced3, edi);
    memoryASet16(ds, 0x20ec8f, 0x0000);
    ebx = 0;
loc_1c0ac9: // 0160:1c0ac9
    push32(ebx);
    sub_1c0b03();
    ebx = pop32();
    memoryASet32(ds, 0x20ced3, memoryAGet32(ds, 0x20ced3) + 0x00000010);
    if (!ax)
        goto loc_1c0ae5;
    bx++;
    memoryASet32(ds, 0x20ced3, memoryAGet32(ds, 0x20ced3) - 0x00000010);
loc_1c0ae5: // 0160:1c0ae5
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 1);
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x224662))
        goto loc_1c0ac9;
    memoryASet16(ds, 0x224662, memoryAGet16(ds, 0x224662) - bx);
loc_1c0b02: // 0160:1c0b02
    esp += 4;
    return;
}
void sub_1c0b03() // 0160:1c0b03 +long
{
    esp -= 4;
    push(ds);
    es = pop();
    ecx = 0x00000018;
    esi = 0x001ef58b;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b804);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    edx = 0x0020e9c5;
    bl = memoryAGet(ds, esi + 5);
    ax = memoryAGet16(ds, esi + 6);
    memoryASet(ds, edx + 16, bl);
    memoryASet16(ds, edx + 17, ax);
    ax = memoryAGet16(ds, 0x20cea7);
    memoryASet(ds, edx, al);
    memoryASet32(ds, 0x224670, 0x00000010);
    eax = memoryAGet32(ds, 0x20ced3);
    memoryASet32(ds, 0x224674, eax);
    goto loc_1c1db9;
    // gap 4693 bytes
loc_1c1db9: // 0160:1c1db9
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1c0b64() // 0160:1c0b64 +long
{
    esp -= 4;
    sub_1c0f4d();
    sub_1c0eff();
    memoryASet16(ds, 0x20ec3d, 0x00d6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
    memoryASet16(ds, 0x20ee75, 0x0003);
loc_1c0baa: // 0160:1c0baa
    sub_1b5096();
    sub_1c6ff7();
    sub_1c0d29();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c0cff;
    esi = 0x001ee428;
    al = 0xc3;
    bl = 0x0d;
    sub_1b60a7();
    esi = 0x0020e9c5;
    memoryASet(ds, esi, 0xc4);
    memoryASet(ds, esi + 1, 0x14);
    esi += 0x00000004;
    bl = 0;
    cl = 0x07;
    ax = memoryAGet16(ds, 0x23c4f1);
    ax >>= 1;
    ax -= 0x0038;
loc_1c0bf6: // 0160:1c0bf6
    if (ax < 0x0064)
        goto loc_1c0c04;
    ax -= 0x0064;
    bl++;
    goto loc_1c0bf6;
loc_1c0c04: // 0160:1c0c04
    if (!bl)
        goto loc_1c0c12;
    bl += 0x30;
    memoryASet(ds, esi, bl);
    esi++;
    cl++;
    bl = 0;
loc_1c0c12: // 0160:1c0c12
    if (ax < 0x000a)
        goto loc_1c0c20;
    ax -= 0x000a;
    bl++;
    goto loc_1c0c12;
loc_1c0c20: // 0160:1c0c20
    bl += 0x30;
    memoryASet(ds, esi, bl);
    al += 0x30;
    memoryASet(ds, esi + 1, al);
    memoryASet(ds, esi + 2, 0x20);
    memoryASet(ds, esi + 3, 0x4d);
    memoryASet(ds, esi + 4, 0x50);
    memoryASet(ds, esi + 5, 0x48);
    memoryASet(ds, esi + 6, 0x20);
    esi = 0x0020e9c5;
    memoryASet(ds, esi + 3, cl);
    if (memoryAGet16(ds, 0x20e82f) & 0xffff)
        goto loc_1c0c5b;
    sub_1be816();
    goto loc_1c0c60;
    // gap 3 bytes
loc_1c0c5b: // 0160:1c0c5b
    sub_1b60d3();
loc_1c0c60: // 0160:1c0c60
    al = 0xc4;
    bl = 0xdb;
    cl = memoryAGet(ds, 0x23c4f3);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    if (memoryAGet16(ds, 0x20e82f) != 0x0001)
        goto loc_1c0c84;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
loc_1c0c84: // 0160:1c0c84
    sub_1c0d00();
    al = 0xc5;
    bl = 0x93;
    cl = memoryAGet(ds, 0x23c4f4);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    if (memoryAGet16(ds, 0x20e82f) != 0x0002)
        goto loc_1c0cad;
    memoryASet16(ds, 0x20ceb1, memoryAGet16(ds, 0x20ceb1) + 1);
loc_1c0cad: // 0160:1c0cad
    sub_1c0d00();
    al = memoryAGet(ds, 0x23c4f0);
    esi = 0x001ee46b;
    if (!al)
        goto loc_1c0cd7;
    esi = 0x001ee475;
    if (al == 0x01)
        goto loc_1c0cd7;
    esi = 0x001ee47f;
    if (al == 0x02)
        goto loc_1c0cd7;
    esi = 0x001ee489;
loc_1c0cd7: // 0160:1c0cd7
    if (memoryAGet16(ds, 0x20e82f) != 0x0003)
        goto loc_1c0ceb;
    sub_1be816();
    goto loc_1c0cf0;
    // gap 3 bytes
loc_1c0ceb: // 0160:1c0ceb
    sub_1b60d3();
loc_1c0cf0: // 0160:1c0cf0
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c0baa;
loc_1c0cff: // 0160:1c0cff
    esp += 4;
    return;
}
void sub_1c0d00() // 0160:1c0d00 +long
{
    esp -= 4;
    goto loc_1c0d00;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 34612 bytes
loc_1be816: // 0160:1be816
    sub_1b6113();
    esi = 0x0020e9c5;
    eax = 0;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bl = memoryAGet(ds, esi);
    bl &= 0x0f;
    bl <<= 2;
    al = memoryAGet(ds, esi + 1);
loc_1be833: // 0160:1be833
    if (al < 0x40)
        goto loc_1be83d;
    bl++;
    al -= 0x40;
    goto loc_1be833;
loc_1be83d: // 0160:1be83d
    bl <<= 3;
    cl = bl;
    bx <<= 6;
    cx <<= 4;
    bx += cx;
    ax <<= 1;
    ax += bx;
    cl = memoryAGet(ds, esi + 3);
    cx &= 0x00ff;
    memoryASet16(ds, 0x20ceb7, cx);
    memoryASet16(ds, 0x20ceb9, cx);
    push32(esi);
    ecx <<= 1;
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a4800;
    if (!(memoryAGet16(ds, 0x2231c4) & 0xffff))
        goto loc_1be89a;
    edi = 0x000a9000;
    if (memoryAGet16(ds, 0x2231c4) == 0x0001)
        goto loc_1be89a;
    edi = 0x000a0000;
loc_1be89a: // 0160:1be89a
    edi += eax;
    memoryASet32(ds, 0x20ceef, edi);
    esi += eax;
    push(ds);
    es = pop();
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20e905) == 0x0002)
        goto loc_1be8b8;
    dx = 0x0008;
loc_1be8b8: // 0160:1be8b8
    memoryASet16(ds, 0x20ceb1, dx);
    ebx = 0x00000050;
    ebx -= ecx;
loc_1be8c6: // 0160:1be8c6
    ebp = ecx;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ecx = ebp;
    esi += ebx;
    edi += ebx;
    dx--;
    if (dx)
        goto loc_1be8c6;
    sub_1bd849();
    esi = pop32();
    esi += 0x00000004;
    edi = memoryAGet32(ds, 0x20ceef);
    memoryASet32(ds, 0x20cedf, edi);
loc_1be8e9: // 0160:1be8e9
    ebx = 0;
    bl = memoryAGet(ds, esi);
    esi++;
    if (bl == 0xff)
        goto loc_1be966;
    bx <<= 3;
    eax = 0x002239f0;
    ebx += eax;
    ebx = memoryAGet32(ds, ebx + 4);
    eax = 0x0028890c;
    ebx += eax;
    memoryASet32(ds, 0x20cedb, ebx);
    dx = 0x03c4;
    ah = 0x01;
loc_1be918: // 0160:1be918
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x20ceb1);
    edi = memoryAGet32(ds, 0x20cedf);
    ebx = memoryAGet32(ds, 0x20cedb);
loc_1be92f: // 0160:1be92f
    cl = memoryAGet(ds, ebx);
    if (!cl)
        goto loc_1be93e;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be93e: // 0160:1be93e
    edi++;
    cl = memoryAGet(ds, ebx + 4);
    if (!cl)
        goto loc_1be94f;
    cl += 0x10;
    memoryASet(ds, edi, cl);
loc_1be94f: // 0160:1be94f
    ebx += 0x00000008;
    edi += 0x0000004f;
    bp--;
    if (bp)
        goto loc_1be92f;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1be918;
loc_1be966: // 0160:1be966
    memoryASet16(ds, 0x20ceb7, memoryAGet16(ds, 0x20ceb7) - 1);
    if (!memoryAGet16(ds, 0x20ceb7))
        goto loc_1be97f;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 0x00000002);
    goto loc_1be8e9;
loc_1be97f: // 0160:1be97f
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
    return;
    // gap 9082 bytes
loc_1c0d00: // 0160:1c0d00
    esi = 0x0020e9c5;
    memoryASet(ds, esi, al);
    memoryASet(ds, esi + 1, bl);
    memoryASet(ds, esi + 3, 0x01);
    cl += 0x30;
    memoryASet(ds, esi + 4, cl);
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1c0d24;
    goto loc_1be816;
loc_1c0d24: // 0160:1c0d24
    goto loc_1b60d3;
}
void sub_1c0d29() // 0160:1c0d29 +long
{
    esp -= 4;
    sub_1b4941();
    memoryASet16(ds, 0x20e82f, memoryAGet16(ds, 0x20e82f) + cx);
    if ((short)memoryAGet16(ds, 0x20e82f) < 0)
        goto loc_1c0d4c;
    if (memoryAGet16(ds, 0x20e82f) != 0x0004)
        goto loc_1c0d55;
    memoryASet16(ds, 0x20e82f, 0x0000);
    goto loc_1c0d55;
loc_1c0d4c: // 0160:1c0d4c
    memoryASet16(ds, 0x20e82f, 0x0003);
loc_1c0d55: // 0160:1c0d55
    memoryASet16(ds, 0x20cec5, 0x0000);
    ax = memoryAGet16(ds, 0x20ec3d);
    dx = memoryAGet16(ds, 0x20eeb0);
    dx &= 0x0007;
    dx >>= 2;
    if (!dx)
        goto loc_1c0d80;
    ax--;
    memoryASet16(ds, 0x20cec5, 0x0001);
loc_1c0d80: // 0160:1c0d80
    bx = memoryAGet16(ds, 0x20ec3f);
    dx = memoryAGet16(ds, 0x20e82f);
    dx <<= 3;
    cx = dx;
    dx <<= 1;
    dx += cx;
    bx += dx;
    cx = 0;
    dx = 0x0001;
    push32(eax);
    push32(ebx);
    sub_1bd7dd();
    ebx = pop32();
    eax = pop32();
    ax += 0x0084;
    ax += memoryAGet16(ds, 0x20cec5);
    ax += memoryAGet16(ds, 0x20cec5);
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1c0ddc;
    ax -= 0x0038;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1c0ddc;
    ax += 0x0040;
loc_1c0ddc: // 0160:1c0ddc
    dx = 0;
    sub_1b4b5a();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c0e42;
    memoryASet16(ds, 0x20ceb1, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c0e1a;
    memoryASet16(ds, 0x224652, 0x0000);
    memoryASet16(ds, 0x224654, 0x0000);
    goto loc_1c0e8b;
    // gap 3 bytes
loc_1c0e1a: // 0160:1c0e1a
    if (memoryAGet16(ds, 0x224652) != 0x0050)
        goto loc_1c0e3a;
    memoryASet16(ds, 0x224654, memoryAGet16(ds, 0x224654) + 1);
    memoryASet16(ds, 0x224654, memoryAGet16(ds, 0x224654) & 0x0003);
    if (!memoryAGet16(ds, 0x224654))
        goto loc_1c0e8b;
    esp += 4;
    return;
loc_1c0e3a: // 0160:1c0e3a
    memoryASet16(ds, 0x224652, memoryAGet16(ds, 0x224652) + 1);
    esp += 4;
    return;
loc_1c0e42: // 0160:1c0e42
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c0e78;
    memoryASet16(ds, 0x20ceb1, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c0e1a;
    memoryASet16(ds, 0x224652, 0x0000);
    memoryASet16(ds, 0x224654, 0x0000);
    goto loc_1c0e8b;
    // gap 3 bytes
loc_1c0e78: // 0160:1c0e78
    memoryASet16(ds, 0x224652, 0x0000);
    memoryASet16(ds, 0x224654, 0x0000);
    esp += 4;
    return;
loc_1c0e8b: // 0160:1c0e8b
    esi = 0x0023c4f0;
    al = 0;
    bl = 0x03;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1c0ec3;
    ax = 0x00d4;
    bx = 0x0200;
    esi++;
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1c0ee0;
    esi += 0x00000002;
    al = 0x01;
    bl = 0x09;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1c0ec3;
    esi++;
loc_1c0ec3: // 0160:1c0ec3
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1c0ed9;
    if (memoryAGet(ds, esi) == al)
        goto loc_1c0efe;
    memoryASet(ds, esi, memoryAGet(ds, esi) - 1);
    esp += 4;
    return;
loc_1c0ed9: // 0160:1c0ed9
    if (memoryAGet(ds, esi) == bl)
        goto loc_1c0efe;
    memoryASet(ds, esi, memoryAGet(ds, esi) + 1);
    esp += 4;
    return;
loc_1c0ee0: // 0160:1c0ee0
    if (!(memoryAGet16(ds, 0x20ceb1) & 0xffff))
        goto loc_1c0ef5;
    if (memoryAGet16(ds, esi) == ax)
        goto loc_1c0efe;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0002);
    esp += 4;
    return;
loc_1c0ef5: // 0160:1c0ef5
    if (memoryAGet16(ds, esi) == bx)
        goto loc_1c0efe;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0002);
loc_1c0efe: // 0160:1c0efe
    esp += 4;
    return;
}
void sub_1c0eff() // 0160:1c0eff +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c0f25();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c0f25();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
}
void sub_1c0f25() // 0160:1c0f25 +long
{
    esp -= 4;
    goto loc_1c0f25;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 44611 bytes
loc_1c0f25: // 0160:1c0f25
    esi = 0x001ee43b;
    sub_1b60d3();
    esi = 0x001ee445;
    sub_1b60d3();
    esi = 0x001ee456;
    sub_1b60d3();
    esi = 0x001ee45f;
    goto loc_1b60d3;
}
void sub_1c0f4d() // 0160:1c0f4d +long
{
    esp -= 4;
    goto loc_1c0f4d;
loc_1b5267: // 0160:1b5267
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1b5279: // 0160:1b5279
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    ecx = 0x00004600;
loc_1b5286: // 0160:1b5286
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1b5295;
    memoryASet(ds, edi, al);
loc_1b5295: // 0160:1b5295
    edi++;
    if (--ecx)
        goto loc_1b5286;
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1b5279;
    esp += 4;
    return;
    // gap 48300 bytes
loc_1c0f4d: // 0160:1c0f4d
    sub_1b4bc9();
    sub_1b6083();
    memoryASet16(ds, 0x20e905, 0x0002);
    sub_1b551f();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    goto loc_1b5267;
}
void sub_1c0f92() // 0160:1c0f92 +long
{
    esp -= 4;
    edi = 0x0023c76c;
    ecx = 0x00002dc0;
    eax = 0;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    memoryASet16(ds, 0x224650, 0x0000);
    edi = 0x00224684;
    ecx = 0x00000010;
    al = 0x20;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    esi = 0x0023c4e0;
    memoryASet(ds, esi + 16, 0x00);
    memoryASet16(ds, esi + 17, 0x0140);
    memoryASet(ds, esi + 19, 0x05);
    memoryASet(ds, esi + 20, 0x05);
    memoryASet(ds, esi + 24, 0x04);
    memoryASet(ds, esi + 25, 0x06);
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    ecx = 0x00000271;
    esi = 0x0023c4fb;
loc_1c0fff: // 0160:1c0fff
    memoryASet(ds, esi, 0x05);
    esi++;
    if (--ecx)
        goto loc_1c0fff;
    ecx = 0x00000019;
    esi = 0x0023c4fb;
    edi = 0x0023c753;
loc_1c1014: // 0160:1c1014
    memoryASet(ds, esi, 0x06);
    memoryASet(ds, edi, 0x06);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c1014;
    ecx = 0x00000019;
    esi = 0x0023c4fb;
    edi = 0x0023c513;
loc_1c102d: // 0160:1c102d
    memoryASet(ds, esi, 0x06);
    memoryASet(ds, edi, 0x06);
    esi += 0x00000019;
    edi += 0x00000019;
    if (--ecx)
        goto loc_1c102d;
    esp += 4;
}
void sub_1c103c() // 0160:1c103c +long
{
    esp -= 4;
    goto loc_1c103c;
loc_1c0f92: // 0160:1c0f92
    edi = 0x0023c76c;
    ecx = 0x00002dc0;
    eax = 0;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    memoryASet16(ds, 0x224650, 0x0000);
    edi = 0x00224684;
    ecx = 0x00000010;
    al = 0x20;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    esi = 0x0023c4e0;
    memoryASet(ds, esi + 16, 0x00);
    memoryASet16(ds, esi + 17, 0x0140);
    memoryASet(ds, esi + 19, 0x05);
    memoryASet(ds, esi + 20, 0x05);
    memoryASet(ds, esi + 24, 0x04);
    memoryASet(ds, esi + 25, 0x06);
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    ecx = 0x00000271;
    esi = 0x0023c4fb;
loc_1c0fff: // 0160:1c0fff
    memoryASet(ds, esi, 0x05);
    esi++;
    if (--ecx)
        goto loc_1c0fff;
    ecx = 0x00000019;
    esi = 0x0023c4fb;
    edi = 0x0023c753;
loc_1c1014: // 0160:1c1014
    memoryASet(ds, esi, 0x06);
    memoryASet(ds, edi, 0x06);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c1014;
    ecx = 0x00000019;
    esi = 0x0023c4fb;
    edi = 0x0023c513;
loc_1c102d: // 0160:1c102d
    memoryASet(ds, esi, 0x06);
    memoryASet(ds, edi, 0x06);
    esi += 0x00000019;
    edi += 0x00000019;
    if (--ecx)
        goto loc_1c102d;
    esp += 4;
    return;
loc_1c103c: // 0160:1c103c
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1c0f92;
    memoryASet32(ds, 0x224670, 0xffffffff);
    eax = 0x0023c4e0;
    memoryASet32(ds, 0x224674, eax);
    sub_1c1d74();
    esi = 0x0023c4e0;
    edi = 0x00224684;
    ecx = 0x00000010;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x00224693;
    ax = 0x0010;
loc_1c107e: // 0160:1c107e
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c1088;
    esi--;
    ax--;
    if (ax)
        goto loc_1c107e;
loc_1c1088: // 0160:1c1088
    memoryASet16(ds, 0x224650, ax);
    esp += 4;
}
void sub_1c10ee() // 0160:1c10ee +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c1122();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c1122();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c1122() // 0160:1c1122 +long
{
    esp -= 4;
    goto loc_1c1122;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 45104 bytes
loc_1c1122: // 0160:1c1122
    al = 0xc4;
    bl = 0x4c;
    cl = 0x10;
    goto loc_1b60e3;
}
void sub_1c112d() // 0160:1c112d +long
{
    esp -= 4;
    goto loc_1c112d;
loc_1a8054: // 0160:1a8054
    flags.direction = 0;
    push(ds);
    es = pop();
    edi = 0x0030b070;
    ecx = 0x00000030;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8a9b;
    eax = 0x00002509;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x0417, memoryAGet16(ds, 0x0417) & 0x00f0);
    esp += 4;
    return;
    // gap 102575 bytes
loc_1c112d: // 0160:1c112d
    sub_1c0f4d();
    if (!(memoryAGet16(ds, 0x224650) & 0x0fff))
        goto loc_1c1199;
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet(ds, 0x20ea29, 0xc4);
    memoryASet(ds, 0x20ea2a, 0x4c);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x10);
    edi = 0x0020ea2d;
    esi = 0x00224684;
    ecx = 0x00000010;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x0020ea29;
    sub_1b60d3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea29;
    sub_1b60d3();
loc_1c1199: // 0160:1c1199
    sub_1a8044();
    sub_1b4f0e();
loc_1c11a3: // 0160:1c11a3
    sub_1b5096();
    sub_1b531f();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c11da;
    esi = 0x00224693;
    ax = 0x0010;
loc_1c11c5: // 0160:1c11c5
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c11cf;
    esi--;
    ax--;
    if (ax)
        goto loc_1c11c5;
loc_1c11cf: // 0160:1c11cf
    memoryASet16(ds, 0x224650, ax);
    goto loc_1a8054;
loc_1c11da: // 0160:1c11da
    sub_1c126f();
    sub_1c11f4();
    esi = 0x001ee332;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c11a3;
}
void sub_1c11a3() // 0160:1c11a3 +long
{
    esp -= 4;
    goto loc_1c11a3;
loc_1a8054: // 0160:1a8054
    flags.direction = 0;
    push(ds);
    es = pop();
    edi = 0x0030b070;
    ecx = 0x00000030;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    push(ds);
    push(cs);
    ds = pop();
    edx = 0x001a8a9b;
    eax = 0x00002509;
    interrupt(0x21);
    ds = pop();
    memoryASet16(ds, 0x0417, memoryAGet16(ds, 0x0417) & 0x00f0);
    esp += 4;
    return;
    // gap 102693 bytes
loc_1c11a3: // 0160:1c11a3
    sub_1b5096();
    sub_1b531f();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c11da;
    esi = 0x00224693;
    ax = 0x0010;
loc_1c11c5: // 0160:1c11c5
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1c11cf;
    esi--;
    ax--;
    if (ax)
        goto loc_1c11c5;
loc_1c11cf: // 0160:1c11cf
    memoryASet16(ds, 0x224650, ax);
    goto loc_1a8054;
loc_1c11da: // 0160:1c11da
    sub_1c126f();
    sub_1c11f4();
    esi = 0x001ee332;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    goto loc_1c11a3;
}
void sub_1c11f4() // 0160:1c11f4 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x224650) == 0x0010)
        goto loc_1c126e;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0008;
    if (!ax)
        goto loc_1c1235;
    eax = 0x000000e0;
    dx = memoryAGet16(ds, 0x224650);
    dx <<= 3;
    ax += dx;
    ebx = 0x0000010c;
    ecx = 0x00000003;
    edx = 0x00000004;
    sub_1bd7dd();
loc_1c1235: // 0160:1c1235
    dx = memoryAGet16(ds, 0x224650);
    bp = dx;
    eax = 0x000000e0;
    dx <<= 3;
    ax += dx;
loc_1c124b: // 0160:1c124b
    ebx = 0x0000010c;
    ecx = 0x00000002;
    edx = 0x00000004;
    push32(eax);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    eax = pop32();
    eax += 0x00000008;
    bp++;
    if (bp != 0x0010)
        goto loc_1c124b;
loc_1c126e: // 0160:1c126e
    esp += 4;
    return;
}
void sub_1c126f() // 0160:1c126f +long
{
    esp -= 4;
    memoryASet16(ds, 0x20cec1, 0x0000);
    eax = 0x00000100;
    interrupt(0x16);
    if (flags.zero)
        goto loc_1c13b7;
    eax = 0;
    interrupt(0x16);
    if (ah != 0x1c)
        goto loc_1c129c;
loc_1c128e: // 0160:1c128e
    memoryASet16(ds, 0x20e831, 0x0001);
    goto loc_1c13b7;
loc_1c129c: // 0160:1c129c
    if (ah == 0x01)
        goto loc_1c128e;
    if (ah != 0x53)
        goto loc_1c12c9;
loc_1c12a6: // 0160:1c12a6
    if (!(memoryAGet16(ds, 0x224650) & 0xffff))
        goto loc_1c13b7;
    memoryASet16(ds, 0x224650, memoryAGet16(ds, 0x224650) - 1);
    al = 0x20;
    memoryASet16(ds, 0x20cec1, 0x0001);
    goto loc_1c1316;
loc_1c12c9: // 0160:1c12c9
    if (ah == 0x0e)
        goto loc_1c12a6;
    if (memoryAGet16(ds, 0x224650) == 0x0010)
        goto loc_1c13b7;
    if (al == 0x20)
        goto loc_1c1316;
    if (al < 0x30)
        goto loc_1c13b7;
    if (al < 0x3a)
        goto loc_1c1316;
    if (al < 0x41)
        goto loc_1c13b7;
    if (al < 0x5b)
        goto loc_1c1316;
    if (al < 0x61)
        goto loc_1c13b7;
    if (al > 0x7a)
        goto loc_1c13b7;
    al -= 0x20;
loc_1c1316: // 0160:1c1316
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet(ds, 0x20ea29, 0xc4);
    bx = 0x004c;
    bx += memoryAGet16(ds, 0x224650);
    memoryASet(ds, 0x20ea2a, bl);
    memoryASet(ds, 0x20ea2b, 0xf0);
    memoryASet(ds, 0x20ea2c, 0x01);
    memoryASet(ds, 0x20ea2d, al);
    dx = memoryAGet16(ds, 0x2231c4);
    push32(edx);
    memoryASet16(ds, 0x2231c4, 0x0000);
    esi = 0x0020ea29;
    sub_1b60d3();
    memoryASet16(ds, 0x2231c4, 0x0002);
    esi = 0x0020ea29;
    sub_1b60d3();
    edx = pop32();
    memoryASet16(ds, 0x2231c4, dx);
    if (memoryAGet16(ds, 0x20cec1) & 0xffff)
        goto loc_1c1392;
    memoryASet16(ds, 0x224650, memoryAGet16(ds, 0x224650) + 1);
loc_1c1392: // 0160:1c1392
    esi = 0x00224684;
    ax = memoryAGet16(ds, 0x224650);
    eax &= 0x0000ffff;
    if (memoryAGet16(ds, 0x20cec1) & 0xffff)
        goto loc_1c13ae;
    eax--;
loc_1c13ae: // 0160:1c13ae
    bl = memoryAGet(ds, 0x20ea2d);
    memoryASet(ds, esi + eax, bl);
loc_1c13b7: // 0160:1c13b7
    esp += 4;
    return;
}
void sub_1c13b8() // 0160:1c13b8 +long
{
    esp -= 4;
    eax = 0;
    goto loc_1c5215;
    // gap 15958 bytes
loc_1c5215: // 0160:1c5215
    memoryASet16(ds, 0x20d80d, ax);
    if (ax)
        goto loc_1c524a;
    ax = 0x0000;
    bx = 0x0000;
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    ax += 0x0020;
    bx += 0x0020;
    memoryASet16(ds, 0x20cf4f, ax);
    memoryASet16(ds, 0x20cf61, bx);
loc_1c524a: // 0160:1c524a
    memoryASet16(ds, 0x20d7f5, 0x0000);
    memoryASet(ds, 0x232cd8, 0x00);
    memoryASet(ds, 0x232cda, 0x00);
    memoryASet(ds, 0x232cd9, 0x19);
    memoryASet(ds, 0x232cdb, 0x19);
    edi = 0x00232cdc;
    esi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c527e: // 0160:1c527e
    ax = 0;
    al = memoryAGet(ds, esi);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    esi++;
    if (--ecx)
        goto loc_1c527e;
loc_1c528c: // 0160:1c528c
    sub_1c459c();
    if (ax)
        goto loc_1c529d;
    sub_1c49d6();
    goto loc_1c528c;
loc_1c529d: // 0160:1c529d
    if (ax == 0x00ff)
        goto loc_1c52c1;
    esi = 0x00232cdc;
    edi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c52b6: // 0160:1c52b6
    ax = memoryAGet16(ds, esi);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi++;
    if (--ecx)
        goto loc_1c52b6;
loc_1c52c1: // 0160:1c52c1
    esp += 4;
    return;
}
void sub_1c13c0() // 0160:1c13c0 +long
{
    esp -= 4;
loc_1c13c0: // 0160:1c13c0
    sub_1c1ad8();
    ax = 0;
    memoryASet16(ds, 0x20ee71, ax);
    memoryASet16(ds, 0x20ee73, ax);
    memoryASet16(ds, 0x224656, 0x0064);
    memoryASet16(ds, 0x224658, 0x0064);
    sub_1bafe1();
loc_1c13eb: // 0160:1c13eb
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c1631;
    memoryASet16(ds, 0x20e831, 0x0000);
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1c15eb;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1c15f5;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1c15ff;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1c1609;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1c1613;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1c161d;
    if (memoryAGet16(ds, 0x20e82f) == 0x0006)
        goto loc_1c1627;
    sub_1c151e();
    memoryASet16(ds, 0x20ec3d, 0x00bf);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20e82f, 0x0000);
loc_1c1490: // 0160:1c1490
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c14c9;
    if (memoryAGet16(ds, 0x20e82f) != 0x0001)
        goto loc_1c14b4;
loc_1c14b3: // 0160:1c14b3
    esp += 4;
    return;
loc_1c14b4: // 0160:1c14b4
    sub_1c1692();
    if (!(memoryAGet16(ds, 0x20ceaf) & 0xffff))
        goto loc_1c14b3;
    goto loc_1c13c0;
loc_1c14c9: // 0160:1c14c9
    esi = 0x001ee551;
    al = 0xc2;
    bl = 0xca;
    sub_1b60a7();
    esi = 0x001ee569;
    al = 0xc3;
    bl = 0x4c;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c1567();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c1490;
    // gap 205 bytes
loc_1c15eb: // 0160:1c15eb
    sub_1c112d();
    goto loc_1c13c0;
loc_1c15f5: // 0160:1c15f5
    sub_1c13b8();
    goto loc_1c13c0;
loc_1c15ff: // 0160:1c15ff
    sub_1bed9e();
    goto loc_1c13c0;
loc_1c1609: // 0160:1c1609
    sub_1c2599();
    goto loc_1c13c0;
loc_1c1613: // 0160:1c1613
    sub_1c0b64();
    goto loc_1c13c0;
loc_1c161d: // 0160:1c161d
    sub_1c52fc();
    goto loc_1c13c0;
loc_1c1627: // 0160:1c1627
    sub_1bf08c();
    goto loc_1c13c0;
loc_1c1631: // 0160:1c1631
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0008);
    memoryASet16(ds, 0x20e809, 0x0007);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c1a63();
    sub_1c167d();
    esi = 0x001ee493;
    al = 0xc2;
    bl = 0x87;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c13eb;
}
void sub_1c151e() // 0160:1c151e +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c1588();
    sub_1c1553();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c1588();
    sub_1c1553();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    esp += 4;
}
void sub_1c1553() // 0160:1c1553 +long
{
    esp -= 4;
    goto loc_1c1553;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 46193 bytes
loc_1c1553: // 0160:1c1553
    esi = 0x001ee57d;
    sub_1b60d3();
    esi = 0x001ee584;
    goto loc_1b60d3;
}
void sub_1c1567() // 0160:1c1567 +long
{
    esp -= 4;
    goto loc_1c1567;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 15682 bytes
loc_1c1567: // 0160:1c1567
    ax += 0x002b;
    if (!bp)
        goto loc_1c1574;
    ax += 0x0002;
loc_1c1574: // 0160:1c1574
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1c1583;
    ax -= 0x0008;
loc_1c1583: // 0160:1c1583
    goto loc_1b4b56;
}
void sub_1c1588() // 0160:1c1588 +long
{
    esp -= 4;
    goto loc_1c1588;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 46230 bytes
loc_1c1588: // 0160:1c1588
    al = 0xc2;
    bl = 0x87;
    cl = 0x1a;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x04;
    cl = 0x0b;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x84;
    cl = 0x0d;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x04;
    cl = 0x0f;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x84;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x04;
    cl = 0x0a;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x84;
    cl = 0x0b;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x04;
    cl = 0x0c;
    sub_1b60e3();
    al = 0xc6;
    bl = 0x84;
    cl = 0x09;
    goto loc_1b60e3;
}
void sub_1c167d() // 0160:1c167d +long
{
    esp -= 4;
    goto loc_1c167d;
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 15960 bytes
loc_1c167d: // 0160:1c167d
    ax = 0x0138;
    bx = 0x0100;
    cx = 0x0001;
    dx = 0x0004;
    goto loc_1bd7dd;
}
void sub_1c1692() // 0160:1c1692 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ceaf, 0x0000);
    memoryASet16(ds, 0x20e831, 0x0000);
    ax = memoryAGet16(ds, 0x2231c4);
    push32(eax);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c1a0b();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c1a0b();
    eax = pop32();
    memoryASet16(ds, 0x2231c4, ax);
    if (memoryAGet16(ds, 0x22464c) == 0x03e7)
        goto loc_1c1738;
    if (memoryAGet16(ds, 0x224650) & 0xffff)
        goto loc_1c177a;
loc_1c16ec: // 0160:1c16ec
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c170b;
loc_1c1701: // 0160:1c1701
    memoryASet16(ds, 0x20ceaf, 0x0001);
    esp += 4;
    return;
loc_1c170b: // 0160:1c170b
    esi = 0x001ee5c0;
    al = 0xc2;
    bl = 0xc9;
    sub_1b60a7();
    esi = 0x001ee5da;
    al = 0xc3;
    bl = 0x4b;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c16ec;
loc_1c1738: // 0160:1c1738
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c1701;
    esi = 0x001ee58a;
    al = 0xc2;
    bl = 0xc9;
    sub_1b60a7();
    esi = 0x001ee5a4;
    al = 0xc3;
    bl = 0x48;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c1738;
loc_1c177a: // 0160:1c177a
    esi = 0x00224684;
    edi = 0x0023c4e0;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet16(ds, 0x22464c) & 0xffff)
        goto loc_1c17a5;
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
    goto loc_1c1915;
loc_1c17a5: // 0160:1c17a5
    memoryASet16(ds, 0x20ec8f, 0x0000);
    esi = memoryAGet32(ds, 0x20b808);
    esi += 0x00002ed4;
loc_1c17ba: // 0160:1c17ba
    edi = 0x00224684;
    ecx = 0x00000010;
    push32(esi);
loc_1c17c5: // 0160:1c17c5
    cmpsb<DS_ESI, ES_EDI>();
    if (!flags.zero)
        goto loc_1c17d0;
    if (--ecx)
        goto loc_1c17c5;
    esi = pop32();
    goto loc_1c17ef;
    // gap 3 bytes
loc_1c17d0: // 0160:1c17d0
    esi = pop32();
    esi += 0x00000010;
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + 1);
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1c17ba;
    goto loc_1c18d6;
loc_1c17ef: // 0160:1c17ef
    sub_1c151e();
    memoryASet16(ds, 0x20ec3d, 0x00bf);
    memoryASet16(ds, 0x20ec3f, 0x010e);
    memoryASet16(ds, 0x20e82f, 0x0001);
loc_1c180f: // 0160:1c180f
    sub_1b5096();
    sub_1c6ff7();
    if (!(memoryAGet16(ds, 0x20e831) & 0xffff))
        goto loc_1c1837;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1c1701;
    goto loc_1c1889;
    // gap 3 bytes
loc_1c1837: // 0160:1c1837
    esi = 0x001ee5f0;
    al = 0xc2;
    bl = 0xc9;
    sub_1b60a7();
    esi = 0x001ee60a;
    al = 0xc3;
    bl = 0x4b;
    sub_1b60a7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c1567();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c180f;
loc_1c1889: // 0160:1c1889
    sub_1be986();
    sub_1be9da();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    dl = memoryAGet(ds, esi + eax + 5);
    ax = memoryAGet16(ds, esi + eax + 6);
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, dl);
    memoryASet16(ds, 0x20e9d4, ax);
    goto loc_1c19b0;
loc_1c18d6: // 0160:1c18d6
    dl = 0x30;
    al = 0x30;
    ah = 0x31;
loc_1c18dc: // 0160:1c18dc
    esi = memoryAGet32(ds, 0x20b808);
    bx = 0;
loc_1c18e5: // 0160:1c18e5
    if (dl != memoryAGet(ds, esi + 5))
        goto loc_1c18f0;
    if (ax == memoryAGet16(ds, esi + 6))
        goto loc_1c1900;
loc_1c18f0: // 0160:1c18f0
    bx++;
    if (bx == memoryAGet16(ds, 0x22464c))
        goto loc_1c1915;
    esi += 0x0000000c;
    goto loc_1c18e5;
loc_1c1900: // 0160:1c1900
    ah++;
    if (ah != 0x3a)
        goto loc_1c18dc;
    ah = 0x30;
    al++;
    if (al != 0x3a)
        goto loc_1c18dc;
    al = 0x30;
    dl++;
    goto loc_1c18dc;
loc_1c1915: // 0160:1c1915
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet(ds, 0x20e9d3, dl);
    memoryASet16(ds, 0x20e9d4, ax);
    memoryASet(ds, 0x20ec45, dl);
    memoryASet16(ds, 0x20ec46, ax);
    sub_1c19b0();
    if (memoryAGet16(ds, 0x20ceaf) & 0xffff)
        goto loc_1c19af;
    ecx = 0x0000000c;
    esi = 0x001ef56a;
    edi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x22464c);
    mul16(cx);
    eax &= 0x0000ffff;
    edi += eax;
    push32(edi);
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    al = memoryAGet(ds, 0x20ec45);
    memoryASet(ds, edi + 5, al);
    ax = memoryAGet16(ds, 0x20ec46);
    memoryASet16(ds, edi + 6, ax);
    esi = 0x00224684;
    edi = memoryAGet32(ds, 0x20b808);
    edi += 0x00002ed4;
    eax = memoryAGet16(ds, 0x22464c);
    eax <<= 4;
    edi += eax;
    ecx = 0x00000004;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) + 1);
loc_1c19af: // 0160:1c19af
    esp += 4;
    return;
loc_1c19b0: // 0160:1c19b0
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1c19c5;
    esp += 4;
    return;
loc_1c19c5: // 0160:1c19c5
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1c19ce: // 0160:1c19ce
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c1701;
    sub_1c1a37();
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c19ce;
}
void sub_1c19b0() // 0160:1c19b0 +long
{
    esp -= 4;
    goto loc_1c19b0;
loc_1c1701: // 0160:1c1701
    memoryASet16(ds, 0x20ceaf, 0x0001);
    esp += 4;
    return;
    // gap 677 bytes
loc_1c19b0: // 0160:1c19b0
    sub_1bf923();
    if (memoryAGet16(ds, 0x20cec3) & 0xffff)
        goto loc_1c19c5;
    esp += 4;
    return;
loc_1c19c5: // 0160:1c19c5
    memoryASet16(ds, 0x20e831, 0x0000);
loc_1c19ce: // 0160:1c19ce
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c1701;
    sub_1c1a37();
    esi = 0x001ee260;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    sub_1b4941();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c19ce;
}
void sub_1c1a0b() // 0160:1c1a0b +long
{
    esp -= 4;
    goto loc_1c1a0b;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 47385 bytes
loc_1c1a0b: // 0160:1c1a0b
    al = 0xc2;
    bl = 0x8a;
    cl = 0x14;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x0c;
    cl = 0x10;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x8a;
    cl = 0x03;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x0a;
    cl = 0x02;
    goto loc_1b60e3;
}
void sub_1c1a37() // 0160:1c1a37 +long
{
    esp -= 4;
    goto loc_1c1a37;
loc_1b60e3: // 0160:1b60e3
    sub_1b60f2();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 47429 bytes
loc_1c1a37: // 0160:1c1a37
    al = 0xc2;
    bl = 0xc9;
    cl = 0x16;
    sub_1b60e3();
    al = 0xc3;
    bl = 0x4b;
    cl = 0x12;
    sub_1b60e3();
    al = 0xc4;
    bl = 0x8a;
    cl = 0x03;
    sub_1b60e3();
    al = 0xc5;
    bl = 0x0a;
    cl = 0x02;
    goto loc_1b60e3;
}
void sub_1c1a63() // 0160:1c1a63 +long
{
    esp -= 4;
    goto loc_1c1a63;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 16958 bytes
loc_1c1a63: // 0160:1c1a63
    ax += 0x006b;
    if (!bp)
        goto loc_1c1a70;
    ax += 0x0002;
loc_1c1a70: // 0160:1c1a70
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1c1ad3;
    ax += 0x0010;
    if (memoryAGet16(ds, 0x20e82f) == 0x0001)
        goto loc_1c1ad3;
    ax += 0x0010;
    if (memoryAGet16(ds, 0x20e82f) == 0x0002)
        goto loc_1c1ad3;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0003)
        goto loc_1c1ad3;
    ax -= 0x0030;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1c1ad3;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1c1ad3;
    ax += 0x0008;
    if (memoryAGet16(ds, 0x20e82f) == 0x0006)
        goto loc_1c1ad3;
    ax -= 0x0018;
loc_1c1ad3: // 0160:1c1ad3
    goto loc_1b4b56;
}
void sub_1c1ad8() // 0160:1c1ad8 +long
{
    esp -= 4;
    goto loc_1c1ad8;
loc_1b4f0e: // 0160:1b4f0e
    esi = 0x0020c88f;
    edi = 0x0020cb8f;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = 0x0020c88f;
    eax = 0;
    ecx = 0x000000c0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    memoryASet16(ds, 0x20ce91, 0x0000);
    esp += 4;
    return;
    // gap 52129 bytes
loc_1c1ad8: // 0160:1c1ad8
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54e7();
    sub_1bd894();
    edx = 0x001ecb53;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1c1b47();
    memoryASet16(ds, 0x20e82f, 0x0000);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20ec3d, 0x008e);
    memoryASet16(ds, 0x20ec3f, 0x00de);
    memoryASet16(ds, 0x20e831, 0x0000);
    goto loc_1b4f0e;
}
void sub_1c1b47() // 0160:1c1b47 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e905, 0x0002);
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c1b76();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c1b76();
    memoryASet16(ds, 0x2231c4, 0x0000);
    esp += 4;
}
void sub_1c1b76() // 0160:1c1b76 +long
{
    esp -= 4;
    esi = 0x001ee4b1;
    sub_1b60d3();
    esi = 0x001ee4c0;
    sub_1b60d3();
    esi = 0x001ee4d1;
    sub_1b60d3();
    esi = 0x001ee4e4;
    sub_1b60d3();
    esi = 0x001ee4f8;
    sub_1b60d3();
    esi = 0x001ee506;
    sub_1b60d3();
    esi = 0x001ee515;
    sub_1b60d3();
    esi = 0x001ee525;
    sub_1b60d3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001ee532;
    sub_1b60d3();
    esi = 0x001ee545;
    if (!(memoryAGet16(ds, 0x224650) & 0xffff))
        goto loc_1c1c0e;
    esi = 0x00224684;
    edi = 0x0020ea2d;
    ecx = 0x00000010;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x0020ea29;
    memoryASet(ds, esi, 0xc6);
    memoryASet(ds, esi + 1, 0x97);
    memoryASet(ds, esi + 2, 0xf0);
    memoryASet(ds, esi + 3, 0x10);
loc_1c1c0e: // 0160:1c1c0e
    sub_1be816();
    memoryASet16(ds, 0x20e905, 0x0002);
    esp += 4;
}
void sub_1c1c1d() // 0160:1c1c1d +long
{
    esp -= 4;
    memoryASet16(ds, 0x22466a, 0x0000);
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1c1e9b;
    memoryASet16(ds, 0x20ec9d, 0x0000);
    ax = memoryAGet16(ds, 0x22464c);
    ax--;
    if ((short)ax >= (short)memoryAGet16(ds, 0x20ec8f))
        goto loc_1c1c58;
    memoryASet16(ds, 0x20ec8f, 0x0000);
loc_1c1c58: // 0160:1c1c58
    ax = memoryAGet16(ds, 0x20ec8f);
    memoryASet16(ds, 0x20d7b9, ax);
    memoryASet16(ds, 0x20eca9, 0x0001);
    memoryASet32(ds, 0x224670, 0x0000304c);
    eax = 0x0023c4e0;
    memoryASet32(ds, 0x224674, eax);
    sub_1c1d74();
    sub_1c1f2e();
    memoryASet16(ds, 0x20ec9d, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c1caa;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1c1cf2;
loc_1c1caa: // 0160:1c1caa
    ax = memoryAGet16(ds, 0x20ecab);
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + ax);
    if (!!(memoryAGet16(ds, 0x20ec8f) & 0xffff & 0x8000))
        goto loc_1c1cdf;
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1c1c58;
    memoryASet16(ds, 0x20ec8f, 0x0000);
    goto loc_1c1c58;
loc_1c1cdf: // 0160:1c1cdf
    ax = memoryAGet16(ds, 0x22464c);
    ax--;
    memoryASet16(ds, 0x20ec8f, ax);
    goto loc_1c1c58;
loc_1c1cf2: // 0160:1c1cf2
    esp += 4;
    return;
    // gap 424 bytes
loc_1c1e9b: // 0160:1c1e9b
    sub_1b4bc9();
    sub_1b589b();
    edx = 0x001ed23e;
    edi = 0x000a0000;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0;
    sub_1b5442();
    edi = pop32();
    sub_1b5267();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1c1eef: // 0160:1c1eef
    sub_1b5096();
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ef089;
    al = 0xc5;
    bl = 0x0a;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c1f22;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c1f22;
    esp += 4;
    return;
loc_1c1f22: // 0160:1c1f22
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c1eef;
}
void sub_1c1c26() // 0160:1c1c26 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x22464c) & 0xffff))
        goto loc_1c1e9b;
    memoryASet16(ds, 0x20ec9d, 0x0000);
    ax = memoryAGet16(ds, 0x22464c);
    ax--;
    if ((short)ax >= (short)memoryAGet16(ds, 0x20ec8f))
        goto loc_1c1c58;
    memoryASet16(ds, 0x20ec8f, 0x0000);
loc_1c1c58: // 0160:1c1c58
    ax = memoryAGet16(ds, 0x20ec8f);
    memoryASet16(ds, 0x20d7b9, ax);
    memoryASet16(ds, 0x20eca9, 0x0001);
    memoryASet32(ds, 0x224670, 0x0000304c);
    eax = 0x0023c4e0;
    memoryASet32(ds, 0x224674, eax);
    sub_1c1d74();
    sub_1c1f2e();
    memoryASet16(ds, 0x20ec9d, 0x0001);
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c1caa;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (!al)
        goto loc_1c1cf2;
loc_1c1caa: // 0160:1c1caa
    ax = memoryAGet16(ds, 0x20ecab);
    memoryASet16(ds, 0x20ec8f, memoryAGet16(ds, 0x20ec8f) + ax);
    if (!!(memoryAGet16(ds, 0x20ec8f) & 0xffff & 0x8000))
        goto loc_1c1cdf;
    ax = memoryAGet16(ds, 0x20ec8f);
    if (ax != memoryAGet16(ds, 0x22464c))
        goto loc_1c1c58;
    memoryASet16(ds, 0x20ec8f, 0x0000);
    goto loc_1c1c58;
loc_1c1cdf: // 0160:1c1cdf
    ax = memoryAGet16(ds, 0x22464c);
    ax--;
    memoryASet16(ds, 0x20ec8f, ax);
    goto loc_1c1c58;
loc_1c1cf2: // 0160:1c1cf2
    esp += 4;
    return;
    // gap 424 bytes
loc_1c1e9b: // 0160:1c1e9b
    sub_1b4bc9();
    sub_1b589b();
    edx = 0x001ed23e;
    edi = 0x000a0000;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0;
    sub_1b5442();
    edi = pop32();
    sub_1b5267();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    sub_1b4f0e();
loc_1c1eef: // 0160:1c1eef
    sub_1b5096();
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001ef089;
    al = 0xc5;
    bl = 0x0a;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c1f22;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c1f22;
    esp += 4;
    return;
loc_1c1f22: // 0160:1c1f22
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c1eef;
}
void sub_1c1cf3() // 0160:1c1cf3 +long
{
    esp -= 4;
    memoryASet16(ds, 0x22464c, 0x0000);
    eax = 0x00002f00;
    interrupt(0x21);
    memoryASet32(ds, 0x20ceef, ebx);
    eax = 0x00001a00;
    edx = 0x00224694;
    interrupt(0x21);
    eax = 0x00004e00;
    ecx = 0x00000000;
    edx = 0x001ef540;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1d66;
    edi = memoryAGet32(ds, 0x20b808);
    memoryASet32(ds, 0x20ceeb, edi);
loc_1c1d34: // 0160:1c1d34
    memoryASet16(ds, 0x22464c, memoryAGet16(ds, 0x22464c) + 1);
    esi = 0x002246b2;
    edi = memoryAGet32(ds, 0x20ceeb);
    ecx = 0x00000003;
loc_1c1d4b: // 0160:1c1d4b
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    esi += 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1c1d4b;
    memoryASet32(ds, 0x20ceeb, edi);
    eax = 0x00004f00;
    interrupt(0x21);
    if (!flags.carry)
        goto loc_1c1d34;
loc_1c1d66: // 0160:1c1d66
    eax = 0x00001a00;
    edx = memoryAGet32(ds, 0x20ceef);
    interrupt(0x21);
    esp += 4;
}
void sub_1c1d74() // 0160:1c1d74 +long
{
    esp -= 4;
    push(ds);
    es = pop();
    ecx = 0x00000016;
    esi = 0x001ef554;
    edi = 0x0020e9c5;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = memoryAGet32(ds, 0x20b808);
    ax = memoryAGet16(ds, 0x20ec8f);
    cx = 0x000c;
    mul16(cx);
    eax &= 0x0000ffff;
    esi += eax;
    edi = 0x0020e9c5;
    ax = memoryAGet16(ds, esi + 5);
    memoryASet16(ds, edi + 14, ax);
    al = memoryAGet(ds, esi + 7);
    memoryASet(ds, edi + 16, al);
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1c1db4() // 0160:1c1db4 +long
{
    esp -= 4;
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1c1db9() // 0160:1c1db9 +long
{
    esp -= 4;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1c1e87() // 0160:1c1e87 +long
{
    esp -= 4;
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
}
void sub_1c1f2e() // 0160:1c1f2e +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d7b9);
    memoryASet16(ds, 0x20e995, ax);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if (memoryAGet16(ds, 0x20ec9d) & 0xffff)
        goto loc_1c1f79;
    memoryASet16(ds, 0x20eca3, 0x0090);
    memoryASet16(ds, 0x20eca5, 0x0148);
    memoryASet16(ds, 0x20eca7, 0x0200);
    sub_1c2315();
    sub_1c2205();
    goto loc_1c1f88;
    // gap 3 bytes
loc_1c1f79: // 0160:1c1f79
    sub_1c52c2();
    sub_1c235a();
    sub_1c2205();
loc_1c1f88: // 0160:1c1f88
    sub_1c229e();
    edi = memoryAGet32(ds, 0x20ee67);
    esi = 0x0023c76c;
    ecx = 0x00000870;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet16(ds, 0x20ec9d) & 0xffff)
        goto loc_1c1faf;
    sub_1b4f0e();
loc_1c1faf: // 0160:1c1faf
    sub_1b5096();
    if (!(memoryAGet16(ds, 0x20ed7f) & 0xffff))
        goto loc_1c2000;
    memoryASet16(ds, 0x20ed81, memoryAGet16(ds, 0x20ed81) - 1);
    if (!memoryAGet16(ds, 0x20ed81))
        goto loc_1c2085;
    if (memoryAGet(ds, 0x20c840) & 0xff)
        goto loc_1c2085;
    if (memoryAGet(ds, 0x20c841) & 0xff)
        goto loc_1c2085;
    if (memoryAGet(ds, 0x20c842) & 0xff)
        goto loc_1c2085;
    if (memoryAGet(ds, 0x20c843) & 0xff)
        goto loc_1c2085;
loc_1c2000: // 0160:1c2000
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c2037;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c2037;
    if (memoryAGet16(ds, 0x23c4f6) != 0xffff)
        goto loc_1c202c;
    if (memoryAGet16(ds, 0x22466a) & 0xffff)
        goto loc_1c2037;
loc_1c202c: // 0160:1c202c
    memoryASet16(ds, 0x20ecab, 0x0000);
    goto loc_1c2085;
loc_1c2037: // 0160:1c2037
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c205f;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c205f;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0xffff);
    goto loc_1c2085;
loc_1c205f: // 0160:1c205f
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c2086;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c2086;
    al = 0x87;
    sub_1b17b7();
    memoryASet16(ds, 0x20ecab, 0x0001);
loc_1c2085: // 0160:1c2085
    esp += 4;
    return;
loc_1c2086: // 0160:1c2086
    sub_1c209a();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c1faf;
}
void sub_1c209a() // 0160:1c209a +long
{
    esp -= 4;
    ecx = 0x00000003;
    esi = 0x0020eca3;
loc_1c20a4: // 0160:1c20a4
    push32(ecx);
    ebp = 0x00000004;
    memoryASet16(ds, 0x20e887, 0x0000);
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0002);
    if (memoryAGet16(ds, esi) != 0xffd4)
        goto loc_1c20c5;
    memoryASet16(ds, esi, 0x0200);
loc_1c20c5: // 0160:1c20c5
    esi += 0x00000002;
loc_1c20c8: // 0160:1c20c8
    bx = 0x00b4;
    cx = memoryAGet16(ds, 0x20e887);
    dx = 0x0005;
    if ((short)ax <= (short)0x0068)
        goto loc_1c20f2;
    if (ax >= 0x01c0)
        goto loc_1c20f2;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(ebp);
    push32(esi);
    sub_1bd7dd();
    esi = pop32();
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1c20f2: // 0160:1c20f2
    ax += 0x0018;
    memoryASet16(ds, 0x20e887, memoryAGet16(ds, 0x20e887) + 1);
    ebp--;
    if (ebp)
        goto loc_1c20c8;
    ecx = pop32();
    if (--ecx)
        goto loc_1c20a4;
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x001c;
    ax >>= 1;
    esi = 0x001ef464;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    ax += 0x008c;
    bx = 0x00fa;
    cx = 0x0004;
    dx = 0x0001;
    sub_1bd7dd();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax += 0x0010;
    ax &= 0x001c;
    ax >>= 1;
    esi = 0x001ef464;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    ax += 0x01a4;
    bx = 0x00fa;
    cx = 0x0004;
    dx = 0;
    sub_1bd7dd();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1c2181;
    memoryASet16(ds, 0x224664, memoryAGet16(ds, 0x224664) + 1);
    memoryASet16(ds, 0x224664, memoryAGet16(ds, 0x224664) & 0x001f);
loc_1c2181: // 0160:1c2181
    dx = 0;
    ax = memoryAGet16(ds, 0x224664);
    bp = ax;
    if (ax < 0x0009)
        goto loc_1c21d6;
    if (ax > 0x0010)
        goto loc_1c21b1;
    bp = 0x0010;
    bp -= ax;
    dx = 0x0002;
    goto loc_1c21d6;
    // gap 3 bytes
loc_1c21b1: // 0160:1c21b1
    if (ax > 0x0018)
        goto loc_1c21cb;
    ax -= 0x0010;
    bp = ax;
    dx = 0x0003;
    goto loc_1c21d6;
    // gap 3 bytes
loc_1c21cb: // 0160:1c21cb
    bp = 0x0020;
    bp -= ax;
    dx = 0x0001;
loc_1c21d6: // 0160:1c21d6
    ax = 0x00a4;
    bx = 0x013c;
    cx = 0x0005;
    cx += bp;
    sub_1bd7dd();
    ax = memoryAGet16(ds, 0x23c4f6);
    if (ax != 0xffff)
        goto loc_1c2204;
    esi = 0x001ed268;
    al = 0xc2;
    bl = 0x93;
    sub_1b60a7();
loc_1c2204: // 0160:1c2204
    esp += 4;
    return;
}
void sub_1c2205() // 0160:1c2205 +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x23c4f9);
    eax &= 0x000000ff;
    esi = 0x001f1476;
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edi = 0x0020cb4a;
    sub_1c2296();
    edi = 0x0020cb50;
    sub_1c2296();
    edi = 0x0020cb56;
    ecx = 0x00000006;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    al = memoryAGet(ds, 0x23c4f8);
    eax &= 0x000000ff;
    esi = 0x001f13fe;
    cx = 0x000c;
    mul16(cx);
    esi += eax;
    edi = 0x0020cb35;
    sub_1c2296();
    edi = 0x0020cb41;
    sub_1c2296();
    edi = 0x0020cb47;
    sub_1c2296();
    edi = 0x0020cb4d;
    sub_1c2296();
    if (!(memoryAGet16(ds, 0x20ec9d) & 0xffff))
        goto loc_1c2295;
    memoryASet16(ds, 0x224666, 0x0090);
loc_1c2295: // 0160:1c2295
    esp += 4;
    return;
}
void sub_1c2296() // 0160:1c2296 +long
{
    esp -= 4;
    ecx = 0x00000003;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esp += 4;
}
void sub_1c229e() // 0160:1c229e +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c22b5();
    memoryASet16(ds, 0x2231c4, 0x0000);
    eax = 0x000000a8;
    ebp = 0x00000271;
    esi = 0x0023c4fb;
loc_1c22c4: // 0160:1c22c4
    ebx = 0x000000ec;
    edi = 0x00000019;
loc_1c22ce: // 0160:1c22ce
    ecx = 0x00000014;
    dl = memoryAGet(ds, esi);
    edx &= 0x000000ff;
    ecx += edx;
    edx = 0x00000004;
    push32(esi);
    push32(edi);
    push32(eax);
    push32(ebx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    edi = pop32();
    esi = pop32();
    esi++;
    ebp--;
    if (!ebp)
        goto loc_1c2305;
    ebx += 0x00000003;
    edi--;
    if (edi)
        goto loc_1c22ce;
    sub_1c2305();
    eax += 0x00000003;
    goto loc_1c22c4;
loc_1c2305: // 0160:1c2305
    push32(eax);
    push32(ebx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1b5126();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c22b5() // 0160:1c22b5 +long
{
    esp -= 4;
    eax = 0x000000a8;
    ebp = 0x00000271;
    esi = 0x0023c4fb;
loc_1c22c4: // 0160:1c22c4
    ebx = 0x000000ec;
    edi = 0x00000019;
loc_1c22ce: // 0160:1c22ce
    ecx = 0x00000014;
    dl = memoryAGet(ds, esi);
    edx &= 0x000000ff;
    ecx += edx;
    edx = 0x00000004;
    push32(esi);
    push32(edi);
    push32(eax);
    push32(ebx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    edi = pop32();
    esi = pop32();
    esi++;
    ebp--;
    if (!ebp)
        goto loc_1c2305;
    ebx += 0x00000003;
    edi--;
    if (edi)
        goto loc_1c22ce;
    sub_1c2305();
    eax += 0x00000003;
    goto loc_1c22c4;
loc_1c2305: // 0160:1c2305
    push32(eax);
    push32(ebx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1b5126();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c2305() // 0160:1c2305 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ebp);
    push32(esi);
    push32(edi);
    sub_1b5126();
    edi = pop32();
    esi = pop32();
    ebp = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c2315() // 0160:1c2315 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b589b();
    edx = 0x001ed23e;
    edi = 0x000a0000;
    push32(edi);
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0;
    sub_1b5442();
    edi = pop32();
    sub_1b5267();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c2388();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c2388();
    ax = 0x0001;
    sub_1c24a8();
    ax = 0x0002;
    goto loc_1c24a8;
    // gap 288 bytes
loc_1c24a8: // 0160:1c24a8
    esi = 0x0023e92c;
    bx = 0x0078;
    cx = 0x007a;
    dx = 0x0030;
    bp = 0x003e;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    edi = 0x000a0000;
    if ((short)ax <= (short)0x0001)
        goto loc_1c24ea;
    edi = 0x000a4800;
    if (ax == 0x0002)
        goto loc_1c24ea;
    edi = 0x000a9000;
loc_1c24ea: // 0160:1c24ea
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c253c: // 0160:1c253c
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c2553: // 0160:1c2553
    cx = memoryAGet16(ds, 0x224634);
loc_1c255a: // 0160:1c255a
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c2565;
    memoryASet(ds, edi, al);
loc_1c2565: // 0160:1c2565
    edi++;
    if (--ecx)
        goto loc_1c255a;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c2553;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c2592;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c253c;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c253c;
loc_1c2592: // 0160:1c2592
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c235a() // 0160:1c235a +long
{
    esp -= 4;
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c2388();
    memoryASet16(ds, 0x2231c4, 0x0000);
    sub_1c2388();
    ax = 0x0001;
    sub_1c24a8();
    ax = 0x0002;
    goto loc_1c24a8;
    // gap 288 bytes
loc_1c24a8: // 0160:1c24a8
    esi = 0x0023e92c;
    bx = 0x0078;
    cx = 0x007a;
    dx = 0x0030;
    bp = 0x003e;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    edi = 0x000a0000;
    if ((short)ax <= (short)0x0001)
        goto loc_1c24ea;
    edi = 0x000a4800;
    if (ax == 0x0002)
        goto loc_1c24ea;
    edi = 0x000a9000;
loc_1c24ea: // 0160:1c24ea
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c253c: // 0160:1c253c
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c2553: // 0160:1c2553
    cx = memoryAGet16(ds, 0x224634);
loc_1c255a: // 0160:1c255a
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c2565;
    memoryASet(ds, edi, al);
loc_1c2565: // 0160:1c2565
    edi++;
    if (--ecx)
        goto loc_1c255a;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c2553;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c2592;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c253c;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c253c;
loc_1c2592: // 0160:1c2592
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c2388() // 0160:1c2388 +long
{
    esp -= 4;
    goto loc_1c2388;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 49830 bytes
loc_1c2388: // 0160:1c2388
    sub_1b85c3();
    memoryASet16(ds, 0x20e905, 0x0000);
    esi = 0x001ef044;
    sub_1b60d3();
    esi = 0x001ef04e;
    sub_1b60d3();
    esi = 0x001ef058;
    sub_1b60d3();
    esi = 0x0020e9c5;
    memoryASet(ds, esi, 0xc2);
    memoryASet(ds, esi + 1, 0x4c);
    esi += 0x00000004;
    bl = 0;
    cl = 0x02;
    ax = memoryAGet16(ds, 0x23c4f1);
    ax >>= 1;
    ax -= 0x0038;
loc_1c23d4: // 0160:1c23d4
    if (ax < 0x0064)
        goto loc_1c23e2;
    ax -= 0x0064;
    bl++;
    goto loc_1c23d4;
loc_1c23e2: // 0160:1c23e2
    if (bl)
        goto loc_1c23ee;
    memoryASet(ds, 0x20e9c6, memoryAGet(ds, 0x20e9c6) + 1);
    goto loc_1c23f8;
loc_1c23ee: // 0160:1c23ee
    bl += 0x30;
    memoryASet(ds, esi, bl);
    esi++;
    cl++;
    bl = 0;
loc_1c23f8: // 0160:1c23f8
    if (ax < 0x000a)
        goto loc_1c2406;
    ax -= 0x000a;
    bl++;
    goto loc_1c23f8;
loc_1c2406: // 0160:1c2406
    bl += 0x30;
    memoryASet(ds, esi, bl);
    al += 0x30;
    memoryASet(ds, esi + 1, al);
    esi = 0x0020e9c5;
    memoryASet(ds, esi + 3, cl);
    sub_1b60d3();
    al = 0xc2;
    bl = 0x8e;
    cl = memoryAGet(ds, 0x23c4f3);
    sub_1c2465();
    al = 0xc2;
    bl = 0xce;
    cl = memoryAGet(ds, 0x23c4f4);
    sub_1c2465();
    al = memoryAGet(ds, 0x23c4f0);
    esi = 0x001ef07f;
    if (!al)
        goto loc_1c2460;
    esi = 0x001ef061;
    if (al == 0x01)
        goto loc_1c2460;
    esi = 0x001ef06b;
    if (al == 0x02)
        goto loc_1c2460;
    esi = 0x001ef075;
loc_1c2460: // 0160:1c2460
    goto loc_1b60d3;
}
void sub_1c2465() // 0160:1c2465 +long
{
    esp -= 4;
    goto loc_1c2465;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 50051 bytes
loc_1c2465: // 0160:1c2465
    esi = 0x0020e9c5;
    memoryASet(ds, esi, al);
    memoryASet(ds, esi + 1, bl);
    memoryASet(ds, esi + 3, 0x01);
    cl += 0x30;
    memoryASet(ds, esi + 4, cl);
    sub_1b60d3();
    if (!(memoryAGet16(ds, 0x23e92c) & 0xffff))
        goto loc_1c24a7;
    esi = 0x0023f4cc;
    sub_1b60d3();
    esi = 0x0023f4ea;
    sub_1b60d3();
    esi = 0x0023f508;
    goto loc_1b60d3;
loc_1c24a7: // 0160:1c24a7
    esp += 4;
    return;
}
void sub_1c24a8() // 0160:1c24a8 +long
{
    esp -= 4;
    esi = 0x0023e92c;
    bx = 0x0078;
    cx = 0x007a;
    dx = 0x0030;
    bp = 0x003e;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    edi = 0x000a0000;
    if ((short)ax <= (short)0x0001)
        goto loc_1c24ea;
    edi = 0x000a4800;
    if (ax == 0x0002)
        goto loc_1c24ea;
    edi = 0x000a9000;
loc_1c24ea: // 0160:1c24ea
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c253c: // 0160:1c253c
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c2553: // 0160:1c2553
    cx = memoryAGet16(ds, 0x224634);
loc_1c255a: // 0160:1c255a
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c2565;
    memoryASet(ds, edi, al);
loc_1c2565: // 0160:1c2565
    edi++;
    if (--ecx)
        goto loc_1c255a;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c2553;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c2592;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c253c;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c253c;
loc_1c2592: // 0160:1c2592
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c2599() // 0160:1c2599 +long
{
    esp -= 4;
    esi = 0x0023c76c;
    ecx = 0x00000090;
loc_1c25a3: // 0160:1c25a3
    eax = memoryAGet32(ds, esi);
    if (eax)
        goto loc_1c25b0;
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c25a3;
    goto loc_1c25d3;
loc_1c25b0: // 0160:1c25b0
    sub_1c33a1();
    ax = memoryAGet16(ds, 0x20e82f);
    if (ax)
        goto loc_1c25d3;
    esi = 0x0023c76c;
    edi = 0x00232cd8;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    goto loc_1c25d8;
loc_1c25d3: // 0160:1c25d3
    sub_1c312e();
loc_1c25d8: // 0160:1c25d8
    sub_1b4bc9();
    sub_1b6083();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0bf0;
    sub_1b5a2d();
    esi = 0x00232cd8;
    edi = 0x00224cd4;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001f033c;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ceaf, 0x0000);
    memoryASet16(ds, 0x20cead, 0x0000);
    sub_1b4f0e();
    sub_1c30b4();
loc_1c2673: // 0160:1c2673
    sub_1b5096();
    sub_1b531f();
    sub_1bb00d();
    if (!(memoryAGet16(ds, 0x22465a) & 0xffff))
        goto loc_1c2694;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c2694: // 0160:1c2694
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    ax += 0x0002;
    bx += 0x0002;
    memoryASet16(ds, 0x20ec3d, ax);
    memoryASet16(ds, 0x20ec3f, bx);
    sub_1c2d80();
    sub_1c2aaf();
    ax = 0x0138;
    bx = 0x0108;
    cx = 0x0001;
    dx = 0x0000;
    sub_1bd7dd();
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 3;
    esi = 0x002050bc;
    dx = memoryAGet16(ds, esi + eax + 6);
    cx = 0x015c;
    cx += memoryAGet16(ds, esi + eax + 2);
    bx = 0x0104;
    bx += memoryAGet16(ds, esi + eax + 4);
    ax = cx;
    cx = 0x0002;
    sub_1bd7dd();
    sub_1c2df3();
    ax = memoryAGet16(ds, 0x20eeb0);
    ax &= 0x0003;
    if (ax)
        goto loc_1c272c;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax++;
    ax &= 0x001f;
    memoryASet16(ds, 0x20ceaf, ax);
loc_1c272c: // 0160:1c272c
    esi = 0x001f0364;
    al = 0xc2;
    bl = 0xc9;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c27c7;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x009c)
        goto loc_1c2781;
    if ((short)ax > (short)0x00a4)
        goto loc_1c2781;
    if ((short)bx < (short)0x007b)
        goto loc_1c2781;
    if ((short)bx > (short)0x00c2)
        goto loc_1c2781;
    ax = memoryAGet16(ds, 0x20ec3f);
    ax -= 0x007b;
    ax >>= 3;
    memoryASet16(ds, 0x20cead, ax);
loc_1c2781: // 0160:1c2781
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax <= (short)0x00b4)
        goto loc_1c27a8;
    if ((short)ax > (short)0x00d0)
        goto loc_1c27a8;
    if ((short)bx <= (short)0x00bc)
        goto loc_1c27a8;
    if ((short)bx <= (short)0x00c8)
        goto loc_1c27e2;
loc_1c27a8: // 0160:1c27a8
    if ((short)ax <= (short)0x00dc)
        goto loc_1c27c7;
    if ((short)ax > (short)0x00f8)
        goto loc_1c27c7;
    if ((short)bx <= (short)0x00bc)
        goto loc_1c27c7;
    if ((short)bx > (short)0x00c8)
        goto loc_1c27c7;
    goto loc_1c2aae;
loc_1c27c7: // 0160:1c27c7
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c27e1;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c2673;
loc_1c27e1: // 0160:1c27e1
    esp += 4;
    return;
loc_1c27e2: // 0160:1c27e2
    esi = 0x00224cd4;
    edi = 0x0023c76c;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0001);
    edi = 0x0023c9ac;
    ecx = 0x00000008;
loc_1c2806: // 0160:1c2806
    push32(ecx);
    push32(edi);
    sub_1c2df3();
    esi = 0x00224f14;
    edi = pop32();
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, memoryAGet16(ds, 0x20ceaf) + 1);
    ecx = pop32();
    if (--ecx)
        goto loc_1c2806;
    memoryASet16(ds, 0x20ceaf, 0x0004);
    sub_1c2df3();
    esi = 0x00224f14;
    edi = 0x0023dbac;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0008);
    sub_1c2df3();
    ax = 0x0008;
    sub_1c29ab();
    ax = 0x0010;
    sub_1c29ab();
    esi = 0x00224f14;
    edi = 0x0023ddec;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0004);
    sub_1c2df3();
    sub_1c2984();
    ecx = 0x00000004;
    ax = 0x0003;
loc_1c2890: // 0160:1c2890
    sub_1c29ab();
    ax += 0x0006;
    if (--ecx)
        goto loc_1c2890;
    esi = 0x00224f14;
    edi = 0x0023e02c;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0000);
    sub_1c2df3();
    sub_1c2984();
    ecx = 0x00000006;
    ax = 0x0002;
loc_1c28c8: // 0160:1c28c8
    sub_1c29ab();
    ax += 0x0004;
    if (--ecx)
        goto loc_1c28c8;
    esi = 0x00224f14;
    edi = 0x0023e26c;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0004);
    sub_1c2df3();
    sub_1c2984();
    sub_1c295a();
    ecx = 0x00000008;
    ax = 0x0001;
loc_1c2905: // 0160:1c2905
    sub_1c29ab();
    ax += 0x0003;
    if (--ecx)
        goto loc_1c2905;
    esi = 0x00224f14;
    edi = 0x0023e4ac;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet16(ds, 0x20ceaf, 0x0008);
    sub_1c2df3();
    sub_1c295a();
    ecx = 0x0000000c;
    ax = 0x0001;
loc_1c293d: // 0160:1c293d
    sub_1c29ab();
    ax += 0x0002;
    if (--ecx)
        goto loc_1c293d;
    esi = 0x00224f14;
    edi = 0x0023e6ec;
    ecx = 0x00000240;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esp += 4;
    return;
    // gap 340 bytes
loc_1c2aae: // 0160:1c2aae
    esp += 4;
    return;
}
void sub_1c295a() // 0160:1c295a +long
{
    esp -= 4;
    esi = 0x00224f14;
    edi = 0x00224f2b;
    edx = 0x00000018;
loc_1c2969: // 0160:1c2969
    ecx = 0x0000000c;
loc_1c296e: // 0160:1c296e
    al = memoryAGet(ds, esi);
    bl = memoryAGet(ds, edi);
    memoryASet(ds, edi, al);
    memoryASet(ds, esi, bl);
    esi++;
    edi--;
    if (--ecx)
        goto loc_1c296e;
    esi += 0x0000000c;
    edi += 0x00000024;
    edx--;
    if (edx)
        goto loc_1c2969;
    esp += 4;
}
void sub_1c2984() // 0160:1c2984 +long
{
    esp -= 4;
    esi = 0x00224f14;
    edi = 0x0022513c;
    edx = 0x0000000c;
loc_1c2993: // 0160:1c2993
    ecx = 0x00000018;
loc_1c2998: // 0160:1c2998
    al = memoryAGet(ds, esi);
    bl = memoryAGet(ds, edi);
    memoryASet(ds, edi, al);
    memoryASet(ds, esi, bl);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c2998;
    edi -= 0x00000030;
    edx--;
    if (edx)
        goto loc_1c2993;
    esp += 4;
}
void sub_1c29ab() // 0160:1c29ab +long
{
    esp -= 4;
    push32(ecx);
    push32(eax);
    eax &= 0x0000ffff;
    edi = 0x00224f14;
    ax <<= 3;
    bx = ax;
    ax <<= 1;
    ax += bx;
    ebx = eax;
    edi += eax;
    eax = pop32();
    push32(eax);
    esi = edi;
    esi -= 0x00000018;
    if ((short)ax < (short)0x000c)
        goto loc_1c29fd;
    esi += 0x00000030;
    ecx = 0x00000240;
    ecx -= ebx;
    if (!ecx)
        goto loc_1c29eb;
loc_1c29e3: // 0160:1c29e3
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c29e3;
loc_1c29eb: // 0160:1c29eb
    esi = 0x0022513c;
    ecx = 0x00000018;
loc_1c29f5: // 0160:1c29f5
    memoryASet(ds, esi, 0x00);
    esi++;
    if (--ecx)
        goto loc_1c29f5;
    goto loc_1c2a1d;
loc_1c29fd: // 0160:1c29fd
    esi += 0x00000017;
    edi += 0x00000017;
    ecx = ebx;
loc_1c2a05: // 0160:1c2a05
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi--;
    edi--;
    if (--ecx)
        goto loc_1c2a05;
    esi = 0x00224f14;
    ecx = 0x00000018;
loc_1c2a17: // 0160:1c2a17
    memoryASet(ds, esi, 0x00);
    esi++;
    if (--ecx)
        goto loc_1c2a17;
loc_1c2a1d: // 0160:1c2a1d
    eax = pop32();
    push32(eax);
    eax &= 0x0000ffff;
    edi = 0x00224f14;
    ebx = eax;
    edi += eax;
    esi = edi;
    esi--;
    if ((short)ax < (short)0x000c)
        goto loc_1c2a78;
    esi += 0x00000002;
    ecx = 0x00000018;
    ecx -= ebx;
    if (!ecx)
        goto loc_1c2a64;
loc_1c2a44: // 0160:1c2a44
    ebx = 0x00000018;
loc_1c2a49: // 0160:1c2a49
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi += 0x00000018;
    edi += 0x00000018;
    ebx--;
    if (ebx)
        goto loc_1c2a49;
    esi -= 0x0000023f;
    edi -= 0x0000023f;
    if (--ecx)
        goto loc_1c2a44;
loc_1c2a64: // 0160:1c2a64
    esi = 0x00224f2b;
    ecx = 0x00000018;
loc_1c2a6e: // 0160:1c2a6e
    memoryASet(ds, esi, 0x00);
    esi += 0x00000018;
    if (--ecx)
        goto loc_1c2a6e;
    goto loc_1c2aac;
loc_1c2a78: // 0160:1c2a78
    ecx = ebx;
loc_1c2a7a: // 0160:1c2a7a
    ebx = 0x00000018;
loc_1c2a7f: // 0160:1c2a7f
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi += 0x00000018;
    edi += 0x00000018;
    ebx--;
    if (ebx)
        goto loc_1c2a7f;
    esi -= 0x00000241;
    edi -= 0x00000241;
    if (--ecx)
        goto loc_1c2a7a;
    esi = 0x00224f14;
    ecx = 0x00000018;
loc_1c2aa4: // 0160:1c2aa4
    memoryASet(ds, esi, 0x00);
    esi += 0x00000018;
    if (--ecx)
        goto loc_1c2aa4;
loc_1c2aac: // 0160:1c2aac
    eax = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1c2aaf() // 0160:1c2aaf +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    ax &= 0xfffc;
    bx &= 0xfffc;
    ax += 0x007c;
    bx += 0x007c;
    if ((short)ax <= (short)0x00bc)
        goto loc_1c2c56;
    if ((short)ax >= (short)0x010c)
        goto loc_1c2c56;
    if ((short)bx <= (short)0x00ec)
        goto loc_1c2c56;
    if ((short)bx >= (short)0x0148)
        goto loc_1c2c56;
    cx = memoryAGet16(ds, 0x20cead);
    cx += 0x0003;
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1bd7dd();
    eax = pop32();
    ecx = pop32();
    ebx = pop32();
    dl = memoryAGet(ds, 0x20c840);
    dl &= 0x80;
    if (!dl)
        goto loc_1c2b8b;
    bx -= 0x0080;
    cx -= 0x0080;
    sub_1c2c57();
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    ax &= 0xfffc;
    bx &= 0xfffc;
    ax -= 0x0040;
    bx -= 0x0070;
    ax >>= 2;
    bx >>= 2;
    ax += 0x0002;
    esi = 0x00224cd4;
    eax &= 0x0000ffff;
    ebx &= 0x0000ffff;
    esi += eax;
    bx <<= 3;
    ax = bx;
    bx <<= 1;
    ax += bx;
    esi += eax;
    edi = 0x001f0c78;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cead);
    al = memoryAGet(ds, edi + eax);
    memoryASet(ds, esi, al);
loc_1c2b8b: // 0160:1c2b8b
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    ax &= 0xfffc;
    bx &= 0xfffc;
    ax += 0x007c;
    bx += 0x007c;
    cx = 0x00e4;
    cx -= ax;
    cx += 0x00e4;
    ax = cx;
    cx = memoryAGet16(ds, 0x20cead);
    cx += 0x0003;
    push32(eax);
    push32(ebx);
    push32(ecx);
    dx = 0;
    sub_1bd7dd();
    eax = pop32();
    ecx = pop32();
    ebx = pop32();
    dl = memoryAGet(ds, 0x20c840);
    dl &= 0x80;
    if (!dl)
        goto loc_1c2c56;
    bx -= 0x0080;
    cx -= 0x0080;
    sub_1c2c57();
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    ax &= 0xfffc;
    bx &= 0xfffc;
    cx = 0x0068;
    cx -= ax;
    cx += 0x0068;
    ax = cx;
    ax -= 0x0040;
    bx -= 0x0070;
    ax >>= 2;
    bx >>= 2;
    ax += 0x0002;
    esi = 0x00224cd4;
    eax &= 0x0000ffff;
    ebx &= 0x0000ffff;
    esi += eax;
    bx <<= 3;
    ax = bx;
    bx <<= 1;
    ax += bx;
    esi += eax;
    edi = 0x001f0c78;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cead);
    al = memoryAGet(ds, edi + eax);
    memoryASet(ds, esi, al);
loc_1c2c56: // 0160:1c2c56
    esp += 4;
    return;
}
void sub_1c2c57() // 0160:1c2c57 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    edi = 0x000a9000;
    sub_1c2c7c();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    push32(eax);
    push32(ebx);
    push32(ecx);
    edi = 0x000a4800;
    sub_1c2c7c();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    edi = 0x000a0000;
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    edi = pop32();
    ax = 0x0002;
    memoryASet16(ds, 0x224634, ax);
    ax = 0x0008;
    memoryASet16(ds, 0x224636, ax);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c2d05: // 0160:1c2d05
    al = 0x02;
    out16(dx, ax);
    push32(eax);
    push32(edx);
    al = 0x04;
    ah >>= 1;
    if (ah != 0x04)
        goto loc_1c2d16;
    ah = 0x03;
loc_1c2d16: // 0160:1c2d16
    dx = 0x03ce;
    out16(dx, ax);
    edx = pop32();
    eax = pop32();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c2d31: // 0160:1c2d31
    cx = memoryAGet16(ds, 0x224634);
loc_1c2d38: // 0160:1c2d38
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c2d4c;
    if (memoryAGet(ds, edi) == 0x05)
        goto loc_1c2d4c;
    memoryASet(ds, edi, al);
loc_1c2d4c: // 0160:1c2d4c
    edi++;
    if (--ecx)
        goto loc_1c2d38;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c2d31;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c2d79;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c2d05;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c2d05;
loc_1c2d79: // 0160:1c2d79
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c2c7c() // 0160:1c2c7c +long
{
    esp -= 4;
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    edi = pop32();
    ax = 0x0002;
    memoryASet16(ds, 0x224634, ax);
    ax = 0x0008;
    memoryASet16(ds, 0x224636, ax);
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c2d05: // 0160:1c2d05
    al = 0x02;
    out16(dx, ax);
    push32(eax);
    push32(edx);
    al = 0x04;
    ah >>= 1;
    if (ah != 0x04)
        goto loc_1c2d16;
    ah = 0x03;
loc_1c2d16: // 0160:1c2d16
    dx = 0x03ce;
    out16(dx, ax);
    edx = pop32();
    eax = pop32();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c2d31: // 0160:1c2d31
    cx = memoryAGet16(ds, 0x224634);
loc_1c2d38: // 0160:1c2d38
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c2d4c;
    if (memoryAGet(ds, edi) == 0x05)
        goto loc_1c2d4c;
    memoryASet(ds, edi, al);
loc_1c2d4c: // 0160:1c2d4c
    edi++;
    if (--ecx)
        goto loc_1c2d38;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c2d31;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c2d79;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c2d05;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c2d05;
loc_1c2d79: // 0160:1c2d79
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c2d80() // 0160:1c2d80 +long
{
    esp -= 4;
    goto loc_1c2d80;
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 21851 bytes
loc_1c2d80: // 0160:1c2d80
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c2d91;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) - 0x0002);
loc_1c2d91: // 0160:1c2d91
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c2da2;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) + 0x0002);
loc_1c2da2: // 0160:1c2da2
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1c2db3;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) - 0x0002);
loc_1c2db3: // 0160:1c2db3
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1c2dc4;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) + 0x0002);
loc_1c2dc4: // 0160:1c2dc4
    sub_1bafe1();
    cx = 0x0000;
    sub_1bafc3();
    ax = 0x011a;
    bx = memoryAGet16(ds, 0x20cead);
    bx <<= 3;
    bx += 0x00f8;
    cx = 0x000c;
    dx = 0x0000;
    goto loc_1bd7dd;
}
void sub_1c2df3() // 0160:1c2df3 +long
{
    esp -= 4;
    edi = 0x00224f14;
    ecx = 0x00000090;
    eax = 0;
loc_1c2dff: // 0160:1c2dff
    memoryASet32(ds, edi, eax);
    edi += 0x00000004;
    if (--ecx)
        goto loc_1c2dff;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 3;
    esi = 0x002050bc;
    ax = memoryAGet16(ds, esi + eax);
    if (!ax)
        goto loc_1c2ea9;
    if (ax == 0x0001)
        goto loc_1c2e9f;
    if (ax == 0x0002)
        goto loc_1c2e95;
    if (ax == 0x0003)
        goto loc_1c2e8b;
    if (ax == 0x0004)
        goto loc_1c2e81;
    if (ax == 0x0005)
        goto loc_1c2e72;
    if (ax == 0x0006)
        goto loc_1c2e63;
    if (ax == 0x0007)
        goto loc_1c2e54;
    if (ax == 0x0008)
        goto loc_1c2ec7;
loc_1c2e54: // 0160:1c2e54
    edx = 0x001f03cc;
    sub_1c2f5a();
    goto loc_1c2ef0;
loc_1c2e63: // 0160:1c2e63
    edx = 0x001f05f2;
    sub_1c2f5a();
    goto loc_1c2ef0;
loc_1c2e72: // 0160:1c2e72
    edx = 0x001f07fe;
    sub_1c2f5a();
    goto loc_1c2ef0;
    // gap 3 bytes
loc_1c2e81: // 0160:1c2e81
    edx = 0x001f09f6;
    goto loc_1c2f5a;
loc_1c2e8b: // 0160:1c2e8b
    edx = 0x001f07fe;
    goto loc_1c2f5a;
loc_1c2e95: // 0160:1c2e95
    edx = 0x001f05f2;
    goto loc_1c2f5a;
loc_1c2e9f: // 0160:1c2e9f
    edx = 0x001f03cc;
    goto loc_1c2f5a;
loc_1c2ea9: // 0160:1c2ea9
    esi = 0x00224cd4;
    edi = 0x00224f14;
    ecx = 0x00000090;
    eax = 0;
loc_1c2eba: // 0160:1c2eba
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    esi += 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1c2eba;
    esp += 4;
    return;
loc_1c2ec7: // 0160:1c2ec7
    esi = 0x00224cd4;
    edi = 0x00224f2b;
    ecx = 0x00000018;
loc_1c2ed6: // 0160:1c2ed6
    push32(ecx);
    ecx = 0x00000018;
loc_1c2edc: // 0160:1c2edc
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi += 0x00000018;
    if (--ecx)
        goto loc_1c2edc;
    ecx = pop32();
    edi -= 0x00000241;
    if (--ecx)
        goto loc_1c2ed6;
    esp += 4;
    return;
loc_1c2ef0: // 0160:1c2ef0
    esi = 0x00224f14;
    edi = 0x00232cd8;
    ecx = 0x00000090;
loc_1c2eff: // 0160:1c2eff
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    esi += 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1c2eff;
    esi = 0x00232cd8;
    edi = 0x00224f2b;
    ecx = 0x00000018;
loc_1c2f1a: // 0160:1c2f1a
    push32(ecx);
    ecx = 0x00000018;
loc_1c2f20: // 0160:1c2f20
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi += 0x00000018;
    if (--ecx)
        goto loc_1c2f20;
    ecx = pop32();
    edi -= 0x00000241;
    if (--ecx)
        goto loc_1c2f1a;
    esi = 0x00224f14;
    edi = 0x0022513c;
    edx = 0x0000000c;
loc_1c2f42: // 0160:1c2f42
    ecx = 0x00000018;
loc_1c2f47: // 0160:1c2f47
    al = memoryAGet(ds, edi);
    bl = memoryAGet(ds, esi);
    memoryASet(ds, edi, bl);
    memoryASet(ds, esi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c2f47;
    edi -= 0x00000030;
    edx--;
    if (edx)
        goto loc_1c2f42;
    esp += 4;
    return;
loc_1c2f5a: // 0160:1c2f5a
    memoryASet32(ds, 0x20cecf, edx);
    esi = 0x00224cd4;
    ecx = 0x0000000c;
loc_1c2f6a: // 0160:1c2f6a
    push32(ecx);
    ecx = 0x0000000c;
loc_1c2f70: // 0160:1c2f70
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c2fa7;
    edi = 0x00224f14;
    eax &= 0x000000ff;
    edi += eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi += eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c2fa4;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c2fa4: // 0160:1c2fa4
    edx++;
    goto loc_1c2f70;
loc_1c2fa7: // 0160:1c2fa7
    esi++;
    edx++;
    if (--ecx)
        goto loc_1c2f70;
    esi += 0x0000000c;
    ecx = pop32();
    if (--ecx)
        goto loc_1c2f6a;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224ceb;
    ecx = 0x0000000c;
loc_1c2fc1: // 0160:1c2fc1
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c2fc8: // 0160:1c2fc8
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c2ffc;
    edi = 0x00224f2b;
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi += eax;
    eax = 0;
    edx++;
    al = memoryAGet(ds, edx);
    edi -= eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c2ff9;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c2ff9: // 0160:1c2ff9
    edx++;
    goto loc_1c2fc8;
loc_1c2ffc: // 0160:1c2ffc
    esi += 0x00000018;
    edx++;
    if (--ecx)
        goto loc_1c2fc8;
    esi = pop32();
    esi--;
    ecx = pop32();
    if (--ecx)
        goto loc_1c2fc1;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224f13;
    ecx = 0x0000000c;
loc_1c3017: // 0160:1c3017
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c301e: // 0160:1c301e
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c3052;
    edi = 0x00225153;
    edi -= eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi -= eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c304f;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c304f: // 0160:1c304f
    edx++;
    goto loc_1c301e;
loc_1c3052: // 0160:1c3052
    esi--;
    edx++;
    if (--ecx)
        goto loc_1c301e;
    esi = pop32();
    esi -= 0x00000018;
    ecx = pop32();
    if (--ecx)
        goto loc_1c3017;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224efc;
    ecx = 0x0000000c;
loc_1c306d: // 0160:1c306d
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c3074: // 0160:1c3074
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c30a8;
    edi = 0x0022513c;
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi -= eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    edi += eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c30a5;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c30a5: // 0160:1c30a5
    edx++;
    goto loc_1c3074;
loc_1c30a8: // 0160:1c30a8
    esi -= 0x00000018;
    edx++;
    if (--ecx)
        goto loc_1c3074;
    esi = pop32();
    esi++;
    ecx = pop32();
    if (--ecx)
        goto loc_1c306d;
    esp += 4;
}
void sub_1c2f5a() // 0160:1c2f5a +long
{
    esp -= 4;
    memoryASet32(ds, 0x20cecf, edx);
    esi = 0x00224cd4;
    ecx = 0x0000000c;
loc_1c2f6a: // 0160:1c2f6a
    push32(ecx);
    ecx = 0x0000000c;
loc_1c2f70: // 0160:1c2f70
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c2fa7;
    edi = 0x00224f14;
    eax &= 0x000000ff;
    edi += eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi += eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c2fa4;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c2fa4: // 0160:1c2fa4
    edx++;
    goto loc_1c2f70;
loc_1c2fa7: // 0160:1c2fa7
    esi++;
    edx++;
    if (--ecx)
        goto loc_1c2f70;
    esi += 0x0000000c;
    ecx = pop32();
    if (--ecx)
        goto loc_1c2f6a;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224ceb;
    ecx = 0x0000000c;
loc_1c2fc1: // 0160:1c2fc1
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c2fc8: // 0160:1c2fc8
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c2ffc;
    edi = 0x00224f2b;
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi += eax;
    eax = 0;
    edx++;
    al = memoryAGet(ds, edx);
    edi -= eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c2ff9;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c2ff9: // 0160:1c2ff9
    edx++;
    goto loc_1c2fc8;
loc_1c2ffc: // 0160:1c2ffc
    esi += 0x00000018;
    edx++;
    if (--ecx)
        goto loc_1c2fc8;
    esi = pop32();
    esi--;
    ecx = pop32();
    if (--ecx)
        goto loc_1c2fc1;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224f13;
    ecx = 0x0000000c;
loc_1c3017: // 0160:1c3017
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c301e: // 0160:1c301e
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c3052;
    edi = 0x00225153;
    edi -= eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi -= eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c304f;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c304f: // 0160:1c304f
    edx++;
    goto loc_1c301e;
loc_1c3052: // 0160:1c3052
    esi--;
    edx++;
    if (--ecx)
        goto loc_1c301e;
    esi = pop32();
    esi -= 0x00000018;
    ecx = pop32();
    if (--ecx)
        goto loc_1c3017;
    edx = memoryAGet32(ds, 0x20cecf);
    esi = 0x00224efc;
    ecx = 0x0000000c;
loc_1c306d: // 0160:1c306d
    push32(ecx);
    push32(esi);
    ecx = 0x0000000c;
loc_1c3074: // 0160:1c3074
    eax = 0;
    al = memoryAGet(ds, edx);
    if (al == 0xff)
        goto loc_1c30a8;
    edi = 0x0022513c;
    ax <<= 3;
    bp = ax;
    ax <<= 1;
    ax += bp;
    edi -= eax;
    edx++;
    eax = 0;
    al = memoryAGet(ds, edx);
    edi += eax;
    al = memoryAGet(ds, edi);
    if (al == 0x9c)
        goto loc_1c30a5;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c30a5: // 0160:1c30a5
    edx++;
    goto loc_1c3074;
loc_1c30a8: // 0160:1c30a8
    esi -= 0x00000018;
    edx++;
    if (--ecx)
        goto loc_1c3074;
    esi = pop32();
    esi++;
    ecx = pop32();
    if (--ecx)
        goto loc_1c306d;
    esp += 4;
}
void sub_1c30b4() // 0160:1c30b4 +long
{
    esp -= 4;
    bx = 0x0040;
    cx = 0x0070;
    memoryASet16(ds, 0x20cea5, bx);
    memoryASet16(ds, 0x20cea7, cx);
    esi = 0x00224cef;
    ecx = 0x00000016;
loc_1c30d4: // 0160:1c30d4
    push32(ecx);
    ecx = 0x00000013;
loc_1c30da: // 0160:1c30da
    push32(ecx);
    push32(esi);
    ax = 0;
    al = memoryAGet(ds, esi);
    if ((char)al < (char)0x80)
        goto loc_1c310a;
    if ((char)al > (char)0x84)
        goto loc_1c30ed;
    al -= 0x7d;
    goto loc_1c30f7;
loc_1c30ed: // 0160:1c30ed
    if ((char)al < (char)0x9c)
        goto loc_1c310a;
    if ((char)al > (char)0xa0)
        goto loc_1c310a;
    al -= 0x95;
loc_1c30f7: // 0160:1c30f7
    bx = memoryAGet16(ds, 0x20cea5);
    cx = memoryAGet16(ds, 0x20cea7);
    sub_1c2c57();
loc_1c310a: // 0160:1c310a
    memoryASet16(ds, 0x20cea5, memoryAGet16(ds, 0x20cea5) + 0x0004);
    esi = pop32();
    esi++;
    ecx = pop32();
    if (--ecx)
        goto loc_1c30da;
    ecx = pop32();
    esi += 0x00000005;
    memoryASet16(ds, 0x20cea5, memoryAGet16(ds, 0x20cea5) - 0x004c);
    memoryASet16(ds, 0x20cea7, memoryAGet16(ds, 0x20cea7) + 0x0004);
    if (--ecx)
        goto loc_1c30d4;
    esp += 4;
}
void sub_1c312e() // 0160:1c312e +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0c84;
    sub_1b5a2d();
    esi = 0x001f0c96;
    sub_1b5a2d();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001f0350;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1c31c6: // 0160:1c31c6
    sub_1b5096();
    sub_1c7113();
    sub_1c3224();
    esi = 0x001f037f;
    al = 0xc2;
    bl = 0xca;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c31fa;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c31c6;
loc_1c31fa: // 0160:1c31fa
    edi = 0x00232cd8;
    ecx = 0x00000240;
    esi = 0x00224cd4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20e82f);
    ax <<= 6;
    bx = ax;
    ax <<= 3;
    ax += bx;
    esi += eax;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esp += 4;
}
void sub_1c3224() // 0160:1c3224 +long
{
    esp -= 4;
    goto loc_1c3224;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 23039 bytes
loc_1c3224: // 0160:1c3224
    cx = 0;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c324e;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c324e;
    al = 0x88;
    sub_1b17b7();
    memoryASet16(ds, 0x20e831, 0x0001);
    esp += 4;
    return;
loc_1c324e: // 0160:1c324e
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1c3285;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c3285;
    al = 0x87;
    sub_1b17b7();
    cx = memoryAGet16(ds, 0x20e82f);
    cx -= 0x0005;
    if ((short)cx >= 0)
        goto loc_1c3323;
    cx += 0x000a;
    goto loc_1c3323;
loc_1c3285: // 0160:1c3285
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1c32bd;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c32bd;
    al = 0x87;
    sub_1b17b7();
    cx = memoryAGet16(ds, 0x20e82f);
    cx += 0x0005;
    if ((short)cx < (short)0x000a)
        goto loc_1c3323;
    cx -= 0x000a;
    goto loc_1c3323;
loc_1c32bd: // 0160:1c32bd
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c32f1;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c32f1;
    al = 0x87;
    sub_1b17b7();
    cx = memoryAGet16(ds, 0x20e82f);
    cx -= 0x0001;
    if (cx != 0xffff)
        goto loc_1c3323;
    cx = 0x0009;
    goto loc_1c3323;
loc_1c32f1: // 0160:1c32f1
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c332a;
    al = memoryAGet(ds, 0x20c840);
    al &= memoryAGet(ds, 0x20e837);
    if (al)
        goto loc_1c332a;
    al = 0x87;
    sub_1b17b7();
    cx = memoryAGet16(ds, 0x20e82f);
    cx += 0x0001;
    if (cx != 0x000a)
        goto loc_1c3323;
    cx = 0x0000;
loc_1c3323: // 0160:1c3323
    memoryASet16(ds, 0x20e82f, cx);
loc_1c332a: // 0160:1c332a
    bp = 0x0000;
    ax = memoryAGet16(ds, 0x20ec3d);
    si = memoryAGet16(ds, 0x20eeb0);
    si &= 0x0007;
    si >>= 2;
    if (!si)
        goto loc_1c334b;
    ax--;
    bp = 0x0001;
loc_1c334b: // 0160:1c334b
    bx = memoryAGet16(ds, 0x20ec3f);
    cx = memoryAGet16(ds, 0x20e82f);
    if ((short)cx < (short)0x0005)
        goto loc_1c3367;
    cx -= 0x0005;
    bx += 0x0028;
loc_1c3367: // 0160:1c3367
    cx <<= 3;
    dx = cx;
    cx <<= 2;
    cx += dx;
    ax += cx;
    cx = 0x0000;
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    sub_1bd7dd();
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ax += 0x002c;
    if (!bp)
        goto loc_1c339b;
    ax += 0x0002;
loc_1c339b: // 0160:1c339b
    goto loc_1b4b56;
}
void sub_1c33a1() // 0160:1c33a1 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    sub_1b5998();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    sub_1c34a7();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c34a7();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1c342c: // 0160:1c342c
    sub_1b5096();
    sub_1c6ff7();
    sub_1b4941();
    memoryASet16(ds, 0x20e805, 0x0002);
    memoryASet16(ds, 0x20e809, 0x0001);
    memoryASet16(ds, 0x20ceb1, 0x0000);
    sub_1b49ae();
    sub_1c3486();
    esi = 0x001ee1b2;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c3485;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c342c;
loc_1c3485: // 0160:1c3485
    esp += 4;
    return;
}
void sub_1c3486() // 0160:1c3486 +long
{
    esp -= 4;
    goto loc_1c3486;
loc_1b4b56: // 0160:1b4b56
    dx = 0x0001;
    goto loc_1bd7dd;
    // gap 35966 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 23649 bytes
loc_1c3486: // 0160:1c3486
    ax += 0x00c2;
    if (!bp)
        goto loc_1c3493;
    ax += 0x0002;
loc_1c3493: // 0160:1c3493
    if (!(memoryAGet16(ds, 0x20e82f) & 0xffff))
        goto loc_1c34a2;
    ax -= 0x0018;
loc_1c34a2: // 0160:1c34a2
    goto loc_1b4b56;
}
void sub_1c34a7() // 0160:1c34a7 +long
{
    esp -= 4;
    goto loc_1c34a7;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 54213 bytes
loc_1c34a7: // 0160:1c34a7
    memoryASet16(ds, 0x20e905, 0x0002);
    esi = 0x001f0cf0;
    sub_1b60d3();
    esi = 0x001f0d0a;
    goto loc_1b60d3;
}
void sub_1c34c4() // 0160:1c34c4 +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0df0;
    sub_1b5a2d();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001f0d24;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    edx = 0x001f0d39;
    sub_1aa484();
    edi = 0x0029be48;
    ax = 0x0001;
    sub_1aa553();
    edx = 0x001f0d61;
    sub_1aa484();
    edi = 0x00246d70;
    ax = 0x0001;
    sub_1aa553();
    memoryASet16(ds, 0x20ec3d, 0x0064);
    memoryASet16(ds, 0x20ec3f, 0x0064);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20ceaf, 0x0000);
    memoryASet16(ds, 0x20cead, 0x0001);
    memoryASet16(ds, 0x20ceab, 0x0000);
    memoryASet16(ds, 0x20cea9, 0x0000);
    sub_1b4f0e();
    sub_1c393a();
    sub_1c42f0();
loc_1c35a7: // 0160:1c35a7
    sub_1b5096();
    sub_1b531f();
    sub_1bb00d();
    if (!(memoryAGet16(ds, 0x22465a) & 0xffff))
        goto loc_1c35c8;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c35c8: // 0160:1c35c8
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    ax += 0x0002;
    bx += 0x0002;
    memoryASet16(ds, 0x20ec3d, ax);
    memoryASet16(ds, 0x20ec3f, bx);
    sub_1c3cf3();
    sub_1c3869();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c384e;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x00d6)
        goto loc_1c3665;
    if ((short)ax > (short)0x0115)
        goto loc_1c3665;
    if ((short)bx < (short)0x007b)
        goto loc_1c3665;
    if ((short)bx > (short)0x00ba)
        goto loc_1c3665;
    cx = 0x0000;
    ax -= 0x00d6;
    ax &= 0x0038;
    cx += ax;
    bx -= 0x007b;
    bx >>= 3;
    cx += bx;
    memoryASet16(ds, 0x20cead, cx);
    if (!cx)
        goto loc_1c3665;
    bx = cx;
    esi = 0x00224cd4;
    ecx = 0x00000a00;
loc_1c365a: // 0160:1c365a
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c3662;
    memoryASet(ds, esi, bl);
loc_1c3662: // 0160:1c3662
    esi++;
    if (--ecx)
        goto loc_1c365a;
loc_1c3665: // 0160:1c3665
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x011c)
        goto loc_1c36a1;
    if ((short)ax > (short)0x0124)
        goto loc_1c36a1;
    if ((short)bx < (short)0x007b)
        goto loc_1c36a1;
    if ((short)bx > (short)0x00ba)
        goto loc_1c36a1;
    cx = 0x0000;
    bx -= 0x007b;
    bx >>= 3;
    cx += bx;
    memoryASet16(ds, 0x20ceab, cx);
loc_1c36a1: // 0160:1c36a1
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x0128)
        goto loc_1c36e6;
    if ((short)ax > (short)0x0130)
        goto loc_1c36e6;
    if ((short)bx < (short)0x007b)
        goto loc_1c36e6;
    if ((short)bx > (short)0x00a1)
        goto loc_1c36e6;
    cx = 0x0000;
    if ((short)bx <= (short)0x008d)
        goto loc_1c36df;
    memoryASet16(ds, 0x20ceab, 0x0000);
    cx = 0x0001;
loc_1c36df: // 0160:1c36df
    memoryASet16(ds, 0x20cea9, cx);
loc_1c36e6: // 0160:1c36e6
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (al)
        goto loc_1c384e;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x00f4)
        goto loc_1c371b;
    if ((short)ax > (short)0x0114)
        goto loc_1c371b;
    if ((short)bx < (short)0x00c8)
        goto loc_1c371b;
    if ((short)bx > (short)0x00d0)
        goto loc_1c371b;
    esp += 4;
    return;
loc_1c371b: // 0160:1c371b
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax < (short)0x0128)
        goto loc_1c374c;
    if ((short)ax > (short)0x0130)
        goto loc_1c374c;
    if ((short)bx < (short)0x00a5)
        goto loc_1c374c;
    if ((short)bx > (short)0x00b8)
        goto loc_1c374c;
    sub_1c446d();
    sub_1c393a();
loc_1c374c: // 0160:1c374c
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax <= (short)0x0104)
        goto loc_1c37c6;
    if ((short)ax > (short)0x0128)
        goto loc_1c37c6;
    if ((short)bx <= (short)0x00bc)
        goto loc_1c37c6;
    if ((short)bx > (short)0x00c5)
        goto loc_1c37c6;
    sub_1c42f0();
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += 0x0029bb34;
    edi = memoryAGet32(ds, edi + eax);
    edi += memoryAGet32(ds, 0x20b800);
    ebx = 0x00000060;
loc_1c37a0: // 0160:1c37a0
    ecx = 0x00000060;
loc_1c37a5: // 0160:1c37a5
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c37a5;
    esi += 0x000000e0;
    edi += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c37a0;
    sub_1c393a();
    goto loc_1c384e;
loc_1c37c6: // 0160:1c37c6
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)ax <= (short)0x00de)
        goto loc_1c3810;
    if ((short)ax > (short)0x00ee)
        goto loc_1c3810;
    if ((short)bx <= (short)0x00bc)
        goto loc_1c3810;
    if ((short)bx > (short)0x00c5)
        goto loc_1c3810;
    ax = memoryAGet16(ds, 0x20ceaf);
    if (ax)
        goto loc_1c37fc;
    ax = 0x001e;
loc_1c37fc: // 0160:1c37fc
    ax--;
    memoryASet16(ds, 0x20ceaf, ax);
    sub_1c393a();
    sub_1c42f0();
    goto loc_1c384e;
loc_1c3810: // 0160:1c3810
    if ((short)ax <= (short)0x00ee)
        goto loc_1c384e;
    if ((short)ax > (short)0x00fe)
        goto loc_1c384e;
    if ((short)bx <= (short)0x00bc)
        goto loc_1c384e;
    if ((short)bx > (short)0x00c5)
        goto loc_1c384e;
    ax = memoryAGet16(ds, 0x20ceaf);
    if (ax != 0x001d)
        goto loc_1c383a;
    ax = 0xffff;
loc_1c383a: // 0160:1c383a
    ax++;
    memoryASet16(ds, 0x20ceaf, ax);
    sub_1c393a();
    sub_1c42f0();
    goto loc_1c384e;
loc_1c384e: // 0160:1c384e
    if (memoryAGet16(ds, 0x20e831) & 0xffff)
        goto loc_1c3868;
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    goto loc_1c35a7;
loc_1c3868: // 0160:1c3868
    esp += 4;
    return;
}
void sub_1c3869() // 0160:1c3869 +long
{
    esp -= 4;
    goto loc_1c3869;
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 24644 bytes
loc_1c3869: // 0160:1c3869
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c387a;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) - 0x0001);
loc_1c387a: // 0160:1c387a
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c388b;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) + 0x0001);
loc_1c388b: // 0160:1c388b
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1c389c;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) - 0x0001);
loc_1c389c: // 0160:1c389c
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1c38ad;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) + 0x0001);
loc_1c38ad: // 0160:1c38ad
    sub_1bafe1();
    cx = 0x0000;
    sub_1bafc3();
    ax = 0x0154;
    bx = memoryAGet16(ds, 0x20cead);
    bx &= 0x0038;
    ax += bx;
    bx = memoryAGet16(ds, 0x20cead);
    bx &= 0x0007;
    bx <<= 3;
    bx += 0x00f8;
    cx = 0x0011;
    dx = 0x0000;
    sub_1bd7dd();
    ax = 0x0199;
    bx = memoryAGet16(ds, 0x20ceab);
    bx <<= 3;
    bx += 0x00f7;
    cx = 0x0012;
    dx = 0x0000;
    sub_1bd7dd();
    ax = 0x01a7;
    bx = memoryAGet16(ds, 0x20cea9);
    bx <<= 2;
    dx = bx;
    bx <<= 2;
    bx += dx;
    bx += 0x00f8;
    cx = 0x0013;
    dx = 0x0000;
    goto loc_1bd7dd;
}
void sub_1c393a() // 0160:1c393a +long
{
    esp -= 4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x20cecb, esi);
    esi = memoryAGet32(ds, edi + eax);
    esi += 0x00246a5c;
    memoryASet32(ds, 0x20cecf, esi);
    edi = 0x000a0000;
    sub_1c3982();
    edi = 0x000a4800;
    sub_1c3982();
    edi = 0x000a9000;
    esi = memoryAGet32(ds, 0x20cecb);
    bx = 0x00d2;
    cx = 0x0010;
    dx = 0x0060;
    bp = 0x0060;
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c3a0e: // 0160:1c3a0e
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c3a25: // 0160:1c3a25
    cx = memoryAGet16(ds, 0x224634);
loc_1c3a2c: // 0160:1c3a2c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (al < 0xfc)
        goto loc_1c3a6d;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
    goto loc_1c3aa7;
loc_1c3a6d: // 0160:1c3a6d
    if (al)
        goto loc_1c3aa7;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0003ebd4;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
loc_1c3aa7: // 0160:1c3aa7
    memoryASet(ds, edi, al);
    edi++;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0004);
    ecx--;
    if (ecx)
        goto loc_1c3a2c;
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 1);
    esi += 0x000000e0;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c3a25;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c3b0b;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0060);
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c3a0e;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c3a0e;
loc_1c3b0b: // 0160:1c3b0b
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    esi = memoryAGet32(ds, 0x20cecb);
    ebp = memoryAGet32(ds, 0x20cecf);
    edi = 0x002303d4;
    edx = 0x00230494;
    ebx = 0x00000060;
loc_1c3b38: // 0160:1c3b38
    ecx = 0x00000060;
loc_1c3b3d: // 0160:1c3b3d
    al = memoryAGet(ds, esi);
    if (al < 0xfc)
        goto loc_1c3b7b;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
    goto loc_1c3bb5;
loc_1c3b7b: // 0160:1c3b7b
    if (al)
        goto loc_1c3bb5;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0003ebd4;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
loc_1c3bb5: // 0160:1c3bb5
    memoryASet(ds, edi, al);
    edi++;
    memoryASet(ds, edx, al);
    edx++;
    memoryASet(ds, edx, al);
    edx++;
    if (!(memoryAGet(ss, ebp) & 0xff))
        goto loc_1c3bc7;
    al = memoryAGet(ss, ebp);
loc_1c3bc7: // 0160:1c3bc7
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    ebp++;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 1);
    ecx--;
    if (ecx)
        goto loc_1c3b3d;
    edi += 0x000000c0;
    edx += 0x000000c0;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0060);
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 1);
    esi += 0x000000e0;
    ebp += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c3b38;
    edi = 0x000a0000;
    sub_1c3c21();
    edi = 0x000a4800;
    sub_1c3c21();
    edi = 0x000a9000;
    esi = 0x002303d4;
    bx = 0x0008;
    cx = 0x0010;
    dx = 0x00c0;
    bp = 0x00c0;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c3c9a: // 0160:1c3c9a
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c3cb1: // 0160:1c3cb1
    cx = memoryAGet16(ds, 0x224634);
loc_1c3cb8: // 0160:1c3cb8
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1c3cb8;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c3cb1;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c3cec;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c3c9a;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c3c9a;
loc_1c3cec: // 0160:1c3cec
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c3982() // 0160:1c3982 +long
{
    esp -= 4;
    esi = memoryAGet32(ds, 0x20cecb);
    bx = 0x00d2;
    cx = 0x0010;
    dx = 0x0060;
    bp = 0x0060;
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c3a0e: // 0160:1c3a0e
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c3a25: // 0160:1c3a25
    cx = memoryAGet16(ds, 0x224634);
loc_1c3a2c: // 0160:1c3a2c
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (al < 0xfc)
        goto loc_1c3a6d;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
    goto loc_1c3aa7;
loc_1c3a6d: // 0160:1c3a6d
    if (al)
        goto loc_1c3aa7;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0003ebd4;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
loc_1c3aa7: // 0160:1c3aa7
    memoryASet(ds, edi, al);
    edi++;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0004);
    ecx--;
    if (ecx)
        goto loc_1c3a2c;
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 1);
    esi += 0x000000e0;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c3a25;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c3b0b;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0060);
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c3a0e;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c3a0e;
loc_1c3b0b: // 0160:1c3b0b
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    esi = memoryAGet32(ds, 0x20cecb);
    ebp = memoryAGet32(ds, 0x20cecf);
    edi = 0x002303d4;
    edx = 0x00230494;
    ebx = 0x00000060;
loc_1c3b38: // 0160:1c3b38
    ecx = 0x00000060;
loc_1c3b3d: // 0160:1c3b3d
    al = memoryAGet(ds, esi);
    if (al < 0xfc)
        goto loc_1c3b7b;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
    goto loc_1c3bb5;
loc_1c3b7b: // 0160:1c3b7b
    if (al)
        goto loc_1c3bb5;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0003ebd4;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
loc_1c3bb5: // 0160:1c3bb5
    memoryASet(ds, edi, al);
    edi++;
    memoryASet(ds, edx, al);
    edx++;
    memoryASet(ds, edx, al);
    edx++;
    if (!(memoryAGet(ss, ebp) & 0xff))
        goto loc_1c3bc7;
    al = memoryAGet(ss, ebp);
loc_1c3bc7: // 0160:1c3bc7
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    ebp++;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 1);
    ecx--;
    if (ecx)
        goto loc_1c3b3d;
    edi += 0x000000c0;
    edx += 0x000000c0;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0060);
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 1);
    esi += 0x000000e0;
    ebp += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c3b38;
    edi = 0x000a0000;
    sub_1c3c21();
    edi = 0x000a4800;
    sub_1c3c21();
    edi = 0x000a9000;
    esi = 0x002303d4;
    bx = 0x0008;
    cx = 0x0010;
    dx = 0x00c0;
    bp = 0x00c0;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c3c9a: // 0160:1c3c9a
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c3cb1: // 0160:1c3cb1
    cx = memoryAGet16(ds, 0x224634);
loc_1c3cb8: // 0160:1c3cb8
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1c3cb8;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c3cb1;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c3cec;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c3c9a;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c3c9a;
loc_1c3cec: // 0160:1c3cec
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c3c21() // 0160:1c3c21 +long
{
    esp -= 4;
    esi = 0x002303d4;
    bx = 0x0008;
    cx = 0x0010;
    dx = 0x00c0;
    bp = 0x00c0;
    dx >>= 2;
    memoryASet16(ds, 0x224634, dx);
    memoryASet16(ds, 0x224636, bp);
    eax = 0;
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    cx = bx;
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c3c9a: // 0160:1c3c9a
    al = 0x02;
    out16(dx, ax);
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c3cb1: // 0160:1c3cb1
    cx = memoryAGet16(ds, 0x224634);
loc_1c3cb8: // 0160:1c3cb8
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    memoryASet(ds, edi, al);
    edi++;
    if (--ecx)
        goto loc_1c3cb8;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c3cb1;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c3cec;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c3c9a;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c3c9a;
loc_1c3cec: // 0160:1c3cec
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c3cf3() // 0160:1c3cf3 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    ax &= 0xfffe;
    bx &= 0xfffe;
    ax += 0x0070;
    bx += 0x0070;
    esi = 0x001f0ea2;
    ecx = 0;
    cx = memoryAGet16(ds, 0x20ceab);
    cx <<= 1;
    cx = memoryAGet16(ds, esi + ecx);
    ax += cx;
    bx += cx;
    if ((short)ax <= (short)0x0086)
        goto loc_1c41a6;
    dx = 0x013a;
    dx += cx;
    if ((short)ax >= (short)dx)
        goto loc_1c41a6;
    if ((short)bx <= (short)0x008e)
        goto loc_1c41a6;
    dx = 0x0142;
    dx += cx;
    if ((short)bx >= (short)dx)
        goto loc_1c41a6;
    cx = memoryAGet16(ds, 0x20ceab);
    cx++;
    dx = 0;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1bd7dd();
    eax = pop32();
    ecx = pop32();
    ebx = pop32();
    sub_1c41a7();
    dl = memoryAGet(ds, 0x20c840);
    dl &= 0x80;
    if (!dl)
        goto loc_1c41a6;
    bx -= 0x0080;
    cx -= 0x0080;
    if (memoryAGet16(ds, 0x20cea9) & 0xffff)
        goto loc_1c3db6;
    dl = memoryAGet(ds, 0x20e837);
    dl &= 0x80;
    if (dl)
        goto loc_1c3db1;
    sub_1c42f0();
loc_1c3db1: // 0160:1c3db1
    goto loc_1c4076;
loc_1c3db6: // 0160:1c3db6
    eax = 0x002231c0;
    memoryASet32(ds, 0x20eea5, eax);
    al = memoryAGet(ds, 0x20e837);
    al &= 0x80;
    if (!al)
        goto loc_1c3dca;
    esp += 4;
    return;
loc_1c3dca: // 0160:1c3dca
    sub_1c42f0();
    memoryASet16(ds, 0x20ceab, 0x0000);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    esi = 0x001f0d78;
    esi = memoryAGet32(ds, esi + eax);
    esi += memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x20d811, esi);
    sub_1c4039();
    bh |= 0xf0;
    sub_1c3f42();
    sub_1c3f53();
    memoryASet32(ds, 0x20d80d, 0x00000001);
loc_1c3e14: // 0160:1c3e14
    sub_1c3f75();
    sub_1c3f64();
    sub_1c3f42();
    sub_1c3f53();
    bx += 0x0080;
    cx += 0x0080;
    sub_1c41a7();
    bx -= 0x0080;
    cx -= 0x0080;
    sub_1c3f86();
    if (ax)
        goto loc_1c3e6c;
    sub_1c3f75();
    sub_1c3f64();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) - 1);
    if (memoryAGet32(ds, 0x20d80d) & 0xffffffff)
        goto loc_1c3e14;
    goto loc_1c3f41;
loc_1c3e6c: // 0160:1c3e6c
    sub_1c3f75();
    sub_1c3f64();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) - 1);
    dl = bh;
    dl >>= 4;
    if (!(dl & 0x08))
        goto loc_1c3eae;
    cx -= 0x0002;
    bh &= 0x0f;
    bh |= 0xb0;
    sub_1c3fa2();
    if (!ax)
        goto loc_1c3eaa;
    sub_1c3f42();
    sub_1c3f53();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) + 1);
loc_1c3eaa: // 0160:1c3eaa
    cx += 0x0002;
loc_1c3eae: // 0160:1c3eae
    if (!(dl & 0x04))
        goto loc_1c3edb;
    cx += 0x0002;
    bh &= 0x0f;
    bh |= 0x70;
    sub_1c3fa2();
    if (!ax)
        goto loc_1c3ed7;
    sub_1c3f42();
    sub_1c3f53();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) + 1);
loc_1c3ed7: // 0160:1c3ed7
    cx -= 0x0002;
loc_1c3edb: // 0160:1c3edb
    if (!(dl & 0x02))
        goto loc_1c3f08;
    bx += 0x0002;
    bh &= 0x0f;
    bh |= 0xe0;
    sub_1c3fa2();
    if (!ax)
        goto loc_1c3f04;
    sub_1c3f42();
    sub_1c3f53();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) + 1);
loc_1c3f04: // 0160:1c3f04
    bx -= 0x0002;
loc_1c3f08: // 0160:1c3f08
    if (!(dl & 0x01))
        goto loc_1c3f31;
    bx -= 0x0002;
    bh &= 0x0f;
    bh |= 0xd0;
    sub_1c3fa2();
    if (!ax)
        goto loc_1c3f31;
    sub_1c3f42();
    sub_1c3f53();
    memoryASet32(ds, 0x20d80d, memoryAGet32(ds, 0x20d80d) + 1);
loc_1c3f31: // 0160:1c3f31
    if (memoryAGet32(ds, 0x20d80d) & 0xffffffff)
        goto loc_1c3e14;
loc_1c3f41: // 0160:1c3f41
    esp += 4;
    return;
    // gap 308 bytes
loc_1c4076: // 0160:1c4076
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1c433c();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    bx >>= 1;
    cx >>= 1;
    bx += 0x00ce;
    cx += 0x0008;
    ax += 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1c433c();
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    edi = memoryAGet32(ds, edi + eax);
    edi += memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x20cecb, edi);
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    bx -= 0x00d2;
    cx -= 0x0010;
    memoryASet16(ds, 0x20cec5, cx);
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = pop32();
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 8;
    ax += dx;
    edi += eax;
    ax = bx;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000140;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c4148: // 0160:1c4148
    cx = memoryAGet16(ds, 0x224634);
    if (!(memoryAGet16(ds, 0x20cead) & 0xffff))
        goto loc_1c416e;
loc_1c415a: // 0160:1c415a
    al = memoryAGet(ds, esi);
    esi += 0x00000001;
    if (!al)
        goto loc_1c4169;
    memoryASet(ds, edi, al);
loc_1c4169: // 0160:1c4169
    edi++;
    if (--ecx)
        goto loc_1c415a;
    goto loc_1c41a0;
loc_1c416e: // 0160:1c416e
    al = memoryAGet(ds, esi);
    esi += 0x00000001;
    if (!al)
        goto loc_1c419d;
    push32(edi);
    push32(esi);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += 0x0029bb34;
    al = memoryAGet(ds, esi);
    esi = pop32();
    edi = pop32();
    memoryASet(ds, edi, al);
loc_1c419d: // 0160:1c419d
    edi++;
    if (--ecx)
        goto loc_1c416e;
loc_1c41a0: // 0160:1c41a0
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c4148;
loc_1c41a6: // 0160:1c41a6
    esp += 4;
    return;
}
void sub_1c3f42() // 0160:1c3f42 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20eea5);
    memoryASet16(ds, eax, bx);
    eax -= 0x00000002;
    memoryASet32(ds, 0x20eea5, eax);
    esp += 4;
}
void sub_1c3f53() // 0160:1c3f53 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20eea5);
    memoryASet16(ds, eax, cx);
    eax -= 0x00000002;
    memoryASet32(ds, 0x20eea5, eax);
    esp += 4;
}
void sub_1c3f64() // 0160:1c3f64 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20eea5);
    eax += 0x00000002;
    memoryASet32(ds, 0x20eea5, eax);
    bx = memoryAGet16(ds, eax);
    esp += 4;
}
void sub_1c3f75() // 0160:1c3f75 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20eea5);
    eax += 0x00000002;
    memoryASet32(ds, 0x20eea5, eax);
    cx = memoryAGet16(ds, eax);
    esp += 4;
}
void sub_1c3f86() // 0160:1c3f86 +long
{
    esp -= 4;
    sub_1c3fa2();
    if (ax)
        goto loc_1c3f91;
    esp += 4;
    return;
loc_1c3f91: // 0160:1c3f91
    ax = 0x0001;
    bh &= 0x0f;
    sub_1c4076();
    ax = 0x0001;
    esp += 4;
}
void sub_1c3fa2() // 0160:1c3fa2 +long
{
    esp -= 4;
    push32(ebx);
    if ((int32_t)ecx <= (int32_t)0x0000000e)
        goto loc_1c402c;
    if ((int32_t)ecx > (int32_t)0x000000ce)
        goto loc_1c402c;
    bh &= 0x0f;
    if ((int32_t)ebx <= (int32_t)0x00000006)
        goto loc_1c402c;
    if ((int32_t)ebx > (int32_t)0x000000c6)
        goto loc_1c402c;
    push32(ecx);
    push32(esi);
    bx >>= 1;
    cx >>= 1;
    bx += 0xfffc;
    cx += 0xfff8;
    ebx &= 0x0000ffff;
    ecx &= 0x0000ffff;
    esi = memoryAGet32(ds, 0x20d811);
    esi += ebx;
    ecx <<= 6;
    ebx = ecx;
    ecx <<= 2;
    ecx += ebx;
    esi += ecx;
    al = memoryAGet(ds, esi);
    if (memoryAGet16(ds, 0x20cead) & 0xffff)
        goto loc_1c4017;
    if (al != memoryAGet(ds, 0x20ee5f))
        goto loc_1c402a;
    if (al == 0x00)
        goto loc_1c402a;
    if (al < 0xfc)
        goto loc_1c4031;
    goto loc_1c402a;
loc_1c4017: // 0160:1c4017
    if (al != memoryAGet(ds, 0x20ee5f))
        goto loc_1c402a;
    bx = memoryAGet16(ds, 0x20cead);
    if (al != bl)
        goto loc_1c4031;
loc_1c402a: // 0160:1c402a
    esi = pop32();
    ecx = pop32();
loc_1c402c: // 0160:1c402c
    ebx = pop32();
    ax = 0;
    esp += 4;
    return;
loc_1c4031: // 0160:1c4031
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    ax = 0x0001;
    esp += 4;
}
void sub_1c4039() // 0160:1c4039 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    bx >>= 1;
    cx >>= 1;
    bx += 0xfffc;
    cx += 0xfff8;
    ebx &= 0x0000ffff;
    ecx &= 0x0000ffff;
    esi = memoryAGet32(ds, 0x20d811);
    esi += ebx;
    ecx <<= 6;
    ebx = ecx;
    ecx <<= 2;
    ecx += ebx;
    esi += ecx;
    bl = memoryAGet(ds, esi);
    memoryASet(ds, 0x20ee5f, bl);
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c4076() // 0160:1c4076 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1c433c();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    bx >>= 1;
    cx >>= 1;
    bx += 0x00ce;
    cx += 0x0008;
    ax += 0x0008;
    push32(eax);
    push32(ebx);
    push32(ecx);
    sub_1c433c();
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    edi = memoryAGet32(ds, edi + eax);
    edi += memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x20cecb, edi);
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    bx -= 0x00d2;
    cx -= 0x0010;
    memoryASet16(ds, 0x20cec5, cx);
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = pop32();
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 8;
    ax += dx;
    edi += eax;
    ax = bx;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000140;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c4148: // 0160:1c4148
    cx = memoryAGet16(ds, 0x224634);
    if (!(memoryAGet16(ds, 0x20cead) & 0xffff))
        goto loc_1c416e;
loc_1c415a: // 0160:1c415a
    al = memoryAGet(ds, esi);
    esi += 0x00000001;
    if (!al)
        goto loc_1c4169;
    memoryASet(ds, edi, al);
loc_1c4169: // 0160:1c4169
    edi++;
    if (--ecx)
        goto loc_1c415a;
    goto loc_1c41a0;
loc_1c416e: // 0160:1c416e
    al = memoryAGet(ds, esi);
    esi += 0x00000001;
    if (!al)
        goto loc_1c419d;
    push32(edi);
    push32(esi);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += 0x0029bb34;
    al = memoryAGet(ds, esi);
    esi = pop32();
    edi = pop32();
    memoryASet(ds, edi, al);
loc_1c419d: // 0160:1c419d
    edi++;
    if (--ecx)
        goto loc_1c416e;
loc_1c41a0: // 0160:1c41a0
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c4148;
    esp += 4;
}
void sub_1c41a7() // 0160:1c41a7 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20cead) & 0xffff)
        goto loc_1c42ef;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = 0x00224cd4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceab);
    ax <<= 8;
    esi += eax;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    if (memoryAGet16(ds, 0x20ceaf) != 0x0006)
        goto loc_1c41f0;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0003ebd4;
loc_1c41f0: // 0160:1c41f0
    bx -= 0x0080;
    cx -= 0x0080;
    bx >>= 1;
    cx >>= 1;
    bx += 0xfffc;
    cx += 0xfff8;
    ebx &= 0x0000001f;
    ecx &= 0x0000001f;
    memoryASet(ds, 0x20cebb, bl);
    memoryASet(ds, 0x20cebd, cl);
    edi += ebx;
    ecx <<= 6;
    ebx = ecx;
    ecx <<= 2;
    ecx += ebx;
    edi += ecx;
    push32(edi);
    dl = memoryAGet(ds, 0x20cebb);
    dh = memoryAGet(ds, 0x20cebd);
    ebx = 0x00000008;
loc_1c423a: // 0160:1c423a
    push32(edi);
    ecx = 0x00000008;
loc_1c4240: // 0160:1c4240
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c4253;
    al = memoryAGet(ds, edi);
    memoryASet(ds, esi, al);
    memoryASet(ds, esi + 1, al);
    memoryASet(ds, esi + 16, al);
    memoryASet(ds, esi + 17, al);
loc_1c4253: // 0160:1c4253
    esi++;
    esi++;
    edi++;
    dl++;
    dl &= 0x1f;
    if (dl)
        goto loc_1c4262;
    edi -= 0x00000020;
loc_1c4262: // 0160:1c4262
    if (--ecx)
        goto loc_1c4240;
    dl = memoryAGet(ds, 0x20cebb);
    edi = pop32();
    edi += 0x00000140;
    dh++;
    dh &= 0x1f;
    if (dh)
        goto loc_1c4280;
    edi -= 0x00002800;
loc_1c4280: // 0160:1c4280
    esi += 0x00000010;
    ebx--;
    if (ebx)
        goto loc_1c423a;
    esi = 0x002254d4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceab);
    ax <<= 6;
    esi += eax;
    edi = pop32();
    dl = memoryAGet(ds, 0x20cebb);
    dh = memoryAGet(ds, 0x20cebd);
    ebx = 0x00000008;
loc_1c42ab: // 0160:1c42ab
    push32(edi);
    ecx = 0x00000008;
loc_1c42b1: // 0160:1c42b1
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c42bb;
    al = memoryAGet(ds, edi);
    memoryASet(ds, esi, al);
loc_1c42bb: // 0160:1c42bb
    esi++;
    edi++;
    dl++;
    dl &= 0x1f;
    if (dl)
        goto loc_1c42c9;
    edi -= 0x00000020;
loc_1c42c9: // 0160:1c42c9
    if (--ecx)
        goto loc_1c42b1;
    dl = memoryAGet(ds, 0x20cebb);
    edi = pop32();
    edi += 0x00000140;
    dh++;
    dh &= 0x1f;
    if (dh)
        goto loc_1c42e7;
    edi -= 0x00002800;
loc_1c42e7: // 0160:1c42e7
    ebx--;
    if (ebx)
        goto loc_1c42ab;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1c42ef: // 0160:1c42ef
    esp += 4;
    return;
}
void sub_1c42f0() // 0160:1c42f0 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += memoryAGet32(ds, 0x20b800);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005cc60;
    ebx = 0x00000060;
loc_1c4320: // 0160:1c4320
    ecx = 0x00000060;
loc_1c4325: // 0160:1c4325
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c4325;
    esi += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c4320;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c433c() // 0160:1c433c +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    edi = 0x000a9000;
    sub_1c4361();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    push32(eax);
    push32(ebx);
    push32(ecx);
    edi = 0x000a4800;
    sub_1c4361();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    edi = 0x000a0000;
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = pop32();
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c43ed: // 0160:1c43ed
    al = 0x02;
    out16(dx, ax);
    push32(eax);
    push32(edx);
    al = 0x04;
    ah >>= 1;
    if (ah != 0x04)
        goto loc_1c43fe;
    ah = 0x03;
loc_1c43fe: // 0160:1c43fe
    dx = 0x03ce;
    out16(dx, ax);
    edx = pop32();
    eax = pop32();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c4419: // 0160:1c4419
    cx = memoryAGet16(ds, 0x224634);
loc_1c4420: // 0160:1c4420
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c4439;
    if (memoryAGet(ds, edi) < 0x40)
        goto loc_1c4437;
    if (memoryAGet(ds, edi) < 0x50)
        goto loc_1c4439;
loc_1c4437: // 0160:1c4437
    memoryASet(ds, edi, al);
loc_1c4439: // 0160:1c4439
    edi++;
    if (--ecx)
        goto loc_1c4420;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c4419;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c4466;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c43ed;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c43ed;
loc_1c4466: // 0160:1c4466
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c4361() // 0160:1c4361 +long
{
    esp -= 4;
    push32(edi);
    ax <<= 3;
    eax &= 0x0000ffff;
    edi = 0x002235f0;
    edi += eax;
    esi = 0x00224bd4;
    esi += memoryAGet32(ds, edi + 4);
    ax = memoryAGet16(ds, edi);
    ax >>= 2;
    memoryASet16(ds, 0x224634, ax);
    ax = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, 0x224636, ax);
    edi = pop32();
    ax = cx;
    dx = cx;
    ax <<= 6;
    dx <<= 4;
    ax += dx;
    edi += eax;
    ax = bx;
    ax >>= 2;
    edi += eax;
    memoryASet16(ds, 0x20cebd, bx);
    memoryASet32(ds, 0x20cedb, edi);
    memoryASet32(ds, 0x20cedf, esi);
    ebx = 0x00000050;
    bx -= memoryAGet16(ds, 0x224634);
    push(ds);
    es = pop();
    dx = 0x03c4;
    ah = 0x01;
    cx = memoryAGet16(ds, 0x20cebd);
    cx &= 0x0003;
    ah <<= cl;
    memoryASet16(ds, 0x224638, 0x0004);
    ecx = 0;
loc_1c43ed: // 0160:1c43ed
    al = 0x02;
    out16(dx, ax);
    push32(eax);
    push32(edx);
    al = 0x04;
    ah >>= 1;
    if (ah != 0x04)
        goto loc_1c43fe;
    ah = 0x03;
loc_1c43fe: // 0160:1c43fe
    dx = 0x03ce;
    out16(dx, ax);
    edx = pop32();
    eax = pop32();
    bp = memoryAGet16(ds, 0x224636);
    edi = memoryAGet32(ds, 0x20cedb);
    esi = memoryAGet32(ds, 0x20cedf);
loc_1c4419: // 0160:1c4419
    cx = memoryAGet16(ds, 0x224634);
loc_1c4420: // 0160:1c4420
    al = memoryAGet(ds, esi);
    esi += 0x00000004;
    if (!al)
        goto loc_1c4439;
    if (memoryAGet(ds, edi) < 0x40)
        goto loc_1c4437;
    if (memoryAGet(ds, edi) < 0x50)
        goto loc_1c4439;
loc_1c4437: // 0160:1c4437
    memoryASet(ds, edi, al);
loc_1c4439: // 0160:1c4439
    edi++;
    if (--ecx)
        goto loc_1c4420;
    edi += ebx;
    bp--;
    if (bp)
        goto loc_1c4419;
    memoryASet16(ds, 0x224638, memoryAGet16(ds, 0x224638) - 1);
    if (!memoryAGet16(ds, 0x224638))
        goto loc_1c4466;
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + 1);
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1c43ed;
    ah = 0x01;
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + 1);
    goto loc_1c43ed;
loc_1c4466: // 0160:1c4466
    al = 0x02;
    ah = 0x0f;
    out16(dx, ax);
    esp += 4;
}
void sub_1c446d() // 0160:1c446d +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += memoryAGet32(ds, 0x20b800);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005a550;
    ebx = 0x00000060;
loc_1c449d: // 0160:1c449d
    ecx = 0x00000060;
loc_1c44a2: // 0160:1c44a2
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c44a2;
    esi += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c449d;
    eax = 0;
    ax = memoryAGet16(ds, 0x20ceaf);
    ax <<= 2;
    edi = 0x001f0d78;
    esi = memoryAGet32(ds, edi + eax);
    esi += memoryAGet32(ds, 0x20b800);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005cc60;
    ebx = 0x00000060;
loc_1c44de: // 0160:1c44de
    ecx = 0x00000060;
loc_1c44e3: // 0160:1c44e3
    al = memoryAGet(ds, edi);
    memoryASet(ds, esi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c44e3;
    esi += 0x000000e0;
    ebx--;
    if (ebx)
        goto loc_1c44de;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005a550;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005cc60;
    ecx = 0x00002400;
loc_1c4511: // 0160:1c4511
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c4511;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c451f() // 0160:1c451f +long
{
    esp -= 4;
    ax = 0;
    sub_1c5300();
    ax = memoryAGet16(ds, 0x20ee63);
    memoryASet16(ds, 0x23c4f6, ax);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    edi = 0x0023f52c;
    ecx = 0x00052800;
    edx = 0;
loc_1c454b: // 0160:1c454b
    al = 0;
    bl = memoryAGet(ds, esi);
loc_1c454f: // 0160:1c454f
    if (bl != memoryAGet(ds, esi))
        goto loc_1c455d;
    al++;
    esi++;
    ecx--;
    if (!ecx)
        goto loc_1c456a;
    if (al != 0xff)
        goto loc_1c454f;
loc_1c455d: // 0160:1c455d
    memoryASet(ds, edi, bl);
    edi++;
    memoryASet(ds, edi, al);
    edi++;
    edx += 0x00000002;
    if (!edx)
        goto loc_1c4572;
    goto loc_1c454b;
loc_1c456a: // 0160:1c456a
    memoryASet(ds, edi, bl);
    edi++;
    memoryASet(ds, edi, al);
    edx += 0x00000002;
loc_1c4572: // 0160:1c4572
    esp += 4;
    return;
}
void sub_1c4573() // 0160:1c4573 +long
{
    esp -= 4;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    esi = 0x0023f52c;
    ebx = 0x00052800;
loc_1c4589: // 0160:1c4589
    ecx = 0;
    al = memoryAGet(ds, esi);
    esi++;
    cl = memoryAGet(ds, esi);
    esi++;
loc_1c4591: // 0160:1c4591
    memoryASet(ds, edi, al);
    edi++;
    ebx--;
    if (!ebx)
        goto loc_1c459b;
    if (--ecx)
        goto loc_1c4591;
    goto loc_1c4589;
loc_1c459b: // 0160:1c459b
    esp += 4;
    return;
}
void sub_1c459c() // 0160:1c459c +long
{
    esp -= 4;
    sub_1b4bc9();
    sub_1b6083();
    eax = 0x002231dc;
    memoryASet32(ds, 0x20ceef, eax);
    memoryASet32(ds, eax, 0x00000000);
    edi = 0x002235f0;
    ebx = 0x00224bd4;
    esi = 0x001f0df0;
    sub_1b5a2d();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001f0ef0;
    sub_1b52a1();
    esi = 0x0020eec4;
    ecx = 0x000000a0;
    al = 0;
    sub_1b5442();
    eax = 0x00000000;
loc_1c45f4: // 0160:1c45f4
    push32(eax);
    esi = 0x001f0f20;
    edi = memoryAGet32(ds, esi + eax);
    edx = 0x001f0d78;
    esi = memoryAGet32(ds, edx + eax);
    esi += memoryAGet32(ds, 0x20b800);
    edx = 0x001f0f98;
    ebp = memoryAGet32(ds, edx + eax);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    ebx = 0x00000020;
loc_1c4621: // 0160:1c4621
    memoryASet16(ds, 0x20ceb3, 0x0000);
    ecx = 0x00000020;
loc_1c462f: // 0160:1c462f
    al = memoryAGet(ds, esi);
    if (al < 0xfc)
        goto loc_1c466d;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
    goto loc_1c46a7;
loc_1c466d: // 0160:1c466d
    if (al)
        goto loc_1c46a7;
    push32(esi);
    push32(ebx);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0003ebd4;
    bx = memoryAGet16(ds, 0x20ceb3);
    ebx &= 0x0000001f;
    esi += ebx;
    bx = memoryAGet16(ds, 0x20ceb5);
    ebx &= 0x0000001f;
    ebx <<= 6;
    ecx = ebx;
    ebx <<= 2;
    ebx += ecx;
    esi += ebx;
    al = memoryAGet(ds, esi);
    ecx = pop32();
    ebx = pop32();
    esi = pop32();
loc_1c46a7: // 0160:1c46a7
    memoryASet(ds, edi, al);
    memoryASet(ss, ebp, al);
    ebp++;
    edi++;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0003);
    esi += 0x00000003;
    ecx--;
    if (ecx)
        goto loc_1c462f;
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 0x0003);
    ebp += 0x00000120;
    edi += 0x00000120;
    esi += 0x00000360;
    ebx--;
    if (ebx)
        goto loc_1c4621;
    eax = pop32();
    eax += 0x00000004;
    if (eax != 0x00000078)
        goto loc_1c45f4;
    edi = 0x000a0000;
    sub_1b5267();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    if ((short)memoryAGet16(ds, 0x20ee61) < (short)0x001e)
        goto loc_1c473b;
    memoryASet16(ds, 0x20ee61, 0x0000);
loc_1c473b: // 0160:1c473b
    sub_1b4f0e();
    ax = memoryAGet16(ds, 0x22465a);
    memoryASet16(ds, 0x20ee6b, ax);
    ax = memoryAGet16(ds, 0x22465c);
    memoryASet16(ds, 0x20ee6d, ax);
    al = memoryAGet(ds, 0x30b0a9);
    memoryASet(ds, 0x20ee6f, al);
    if (!(memoryAGet16(ds, 0x20d80d) & 0xffff))
        goto loc_1c4777;
    ax = 0;
    memoryASet16(ds, 0x20d80d, ax);
    esp += 4;
    return;
loc_1c4777: // 0160:1c4777
    sub_1b5096();
    sub_1b531f();
    sub_1bb00d();
    if (!(memoryAGet16(ds, 0x22465a) & 0xffff))
        goto loc_1c4798;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c4798: // 0160:1c4798
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    ax += 0x0002;
    bx += 0x0002;
    memoryASet16(ds, 0x20ec3d, ax);
    memoryASet16(ds, 0x20ec3f, bx);
    sub_1c4984();
    ax = 0x00ac;
    bx = 0x009c;
    cx = memoryAGet16(ds, 0x20ee61);
loc_1c47ce: // 0160:1c47ce
    if ((short)cx < (short)0x0006)
        goto loc_1c47de;
    bx += 0x0028;
    cx -= 0x0006;
    goto loc_1c47ce;
loc_1c47de: // 0160:1c47de
    cx <<= 3;
    dx = cx;
    dx <<= 2;
    cx += dx;
    ax += cx;
    cx = 0x0014;
    dx = 0;
    sub_1bd7dd();
    esi = 0x001f0f08;
    al = 0xc0;
    bl = 0x4b;
    sub_1b60a7();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c4927;
    cx = 0x0000;
    dx = 0x0000;
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    if ((short)bx <= (short)0x0078)
        goto loc_1c4862;
    if ((short)bx >= (short)0x0080)
        goto loc_1c4862;
    if ((short)ax < (short)0x0008)
        goto loc_1c484d;
    if ((short)ax > (short)0x0020)
        goto loc_1c484d;
    ax = 0x00ff;
    goto loc_1c4983;
loc_1c484d: // 0160:1c484d
    if ((short)ax < (short)0x0120)
        goto loc_1c4862;
    if ((short)ax > (short)0x0138)
        goto loc_1c4862;
    ax = 0x00fe;
    goto loc_1c4983;
loc_1c4862: // 0160:1c4862
    if ((short)ax < (short)0x002d)
        goto loc_1c4927;
    if ((short)ax < (short)0x004d)
        goto loc_1c48cc;
    if ((short)ax < (short)0x0055)
        goto loc_1c4927;
    cx++;
    if ((short)ax < (short)0x0075)
        goto loc_1c48cc;
    if ((short)ax < (short)0x007d)
        goto loc_1c4927;
    cx++;
    if ((short)ax < (short)0x009d)
        goto loc_1c48cc;
    if ((short)ax < (short)0x00a5)
        goto loc_1c4927;
    cx++;
    if ((short)ax < (short)0x00c5)
        goto loc_1c48cc;
    if ((short)ax < (short)0x00cd)
        goto loc_1c4927;
    cx++;
    if ((short)ax < (short)0x00ed)
        goto loc_1c48cc;
    if ((short)ax < (short)0x00f5)
        goto loc_1c4927;
    cx++;
    if ((short)ax >= (short)0x0115)
        goto loc_1c4927;
loc_1c48cc: // 0160:1c48cc
    if ((short)bx < (short)0x001d)
        goto loc_1c4927;
    if ((short)bx < (short)0x003d)
        goto loc_1c491d;
    if ((short)bx < (short)0x0045)
        goto loc_1c4927;
    dx += 0x0006;
    if ((short)bx < (short)0x0065)
        goto loc_1c491d;
    if ((short)bx < (short)0x006d)
        goto loc_1c4927;
    dx += 0x0006;
    if ((short)bx < (short)0x008d)
        goto loc_1c491d;
    if ((short)bx < (short)0x0095)
        goto loc_1c4927;
    dx += 0x0006;
    if ((short)bx < (short)0x00b5)
        goto loc_1c491d;
    if ((short)bx < (short)0x00bd)
        goto loc_1c4927;
    dx += 0x0006;
    if ((short)bx >= (short)0x00dd)
        goto loc_1c4927;
loc_1c491d: // 0160:1c491d
    cx += dx;
    memoryASet16(ds, 0x20ee61, cx);
loc_1c4927: // 0160:1c4927
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20e837, al);
    if (!(memoryAGet16(ds, 0x22465c) & 0xffff))
        goto loc_1c4947;
    if (!(memoryAGet16(ds, 0x20ee6d) & 0xffff))
        goto loc_1c4980;
loc_1c4947: // 0160:1c4947
    al = memoryAGet(ds, 0x30b0a9);
    if (!al)
        goto loc_1c4959;
    if (!(memoryAGet(ds, 0x20ee6f) & 0xff))
        goto loc_1c4980;
loc_1c4959: // 0160:1c4959
    ax = memoryAGet16(ds, 0x22465a);
    memoryASet16(ds, 0x20ee6b, ax);
    ax = memoryAGet16(ds, 0x22465c);
    memoryASet16(ds, 0x20ee6d, ax);
    al = memoryAGet(ds, 0x30b0a9);
    memoryASet(ds, 0x20ee6f, al);
    goto loc_1c4777;
loc_1c4980: // 0160:1c4980
    ax = 0;
loc_1c4983: // 0160:1c4983
    esp += 4;
    return;
}
void sub_1c4984() // 0160:1c4984 +long
{
    esp -= 4;
    goto loc_1c4984;
loc_1bafc3: // 0160:1bafc3
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    ax += 0x0080;
    bx += 0x0080;
    dx = 0;
    goto loc_1bd7dd;
    // gap 10236 bytes
loc_1bd7dd: // 0160:1bd7dd
    bp = ax;
    esi = 0x002231f0;
    ax = memoryAGet16(ds, 0x2231d0);
    ax <<= 3;
    eax &= 0x0000ffff;
    esi += eax;
    memoryASet16(ds, esi, cx);
    if (dx != 0x0008)
        goto loc_1bd807;
    bx += 0x0004;
    bp += 0x0004;
loc_1bd807: // 0160:1bd807
    bp -= 0x0080;
    memoryASet16(ds, esi + 2, bp);
    bx -= 0x0080;
    memoryASet16(ds, esi + 4, bx);
    memoryASet16(ds, esi + 6, dx);
    memoryASet16(ds, 0x2231d0, memoryAGet16(ds, 0x2231d0) + 1);
    esp += 4;
    return;
    // gap 29023 bytes
loc_1c4984: // 0160:1c4984
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c4995;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) - 0x0002);
loc_1c4995: // 0160:1c4995
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c49a6;
    memoryASet16(ds, 0x224656, memoryAGet16(ds, 0x224656) + 0x0002);
loc_1c49a6: // 0160:1c49a6
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1c49b7;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) - 0x0002);
loc_1c49b7: // 0160:1c49b7
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1c49c8;
    memoryASet16(ds, 0x224658, memoryAGet16(ds, 0x224658) + 0x0002);
loc_1c49c8: // 0160:1c49c8
    sub_1bafe1();
    cx = 0x0000;
    goto loc_1bafc3;
}
void sub_1c49d6() // 0160:1c49d6 +long
{
    esp -= 4;
    sub_1c4a09();
    memoryASet16(ds, 0x2231d0, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x224644, 0x0000);
    esp += 4;
}
void sub_1c4a09() // 0160:1c4a09 +long
{
    esp -= 4;
    sub_1b4eda();
    sub_1c4e8e();
    ax = 0;
    memoryASet16(ds, 0x20ee71, ax);
    memoryASet16(ds, 0x20ee73, ax);
    memoryASet16(ds, 0x224656, 0x0064);
    memoryASet16(ds, 0x224658, 0x0064);
    sub_1bafe1();
    sub_1ac7de();
    sub_1b4f0e();
    sub_1c51d6();
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20ee63, ax);
    ax = memoryAGet16(ds, 0x22465a);
    memoryASet16(ds, 0x20ee6b, ax);
    ax = memoryAGet16(ds, 0x22465c);
    memoryASet16(ds, 0x20ee6d, ax);
    al = memoryAGet(ds, 0x30b0a9);
    memoryASet(ds, 0x20ee6f, al);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    eax = 0;
    memoryASet32(ds, 0x20d773, eax);
    memoryASet32(ds, 0x20d777, eax);
    memoryASet(ds, 0x20d773, 0x01);
loc_1c4a98: // 0160:1c4a98
    ax = memoryAGet16(ds, 0x20ee4f);
    memoryASet16(ds, 0x20ee51, ax);
    push32(eax);
    sub_1a8d10();
    memoryASet32(ds, 0x20c80c, 0x00000000);
    if (!(memoryAGet16(ds, 0x22465c) & 0xffff))
        goto loc_1c4aca;
    if (!(memoryAGet16(ds, 0x20ee6d) & 0xffff))
        goto loc_1c4adc;
loc_1c4aca: // 0160:1c4aca
    al = memoryAGet(ds, 0x30b0a9);
    if (!al)
        goto loc_1c4ae2;
    if (memoryAGet(ds, 0x20ee6f) & 0xff)
        goto loc_1c4ae2;
loc_1c4adc: // 0160:1c4adc
    eax = pop32();
    goto loc_1c4b97;
loc_1c4ae2: // 0160:1c4ae2
    ax = memoryAGet16(ds, 0x22465a);
    memoryASet16(ds, 0x20ee6b, ax);
    ax = memoryAGet16(ds, 0x22465c);
    memoryASet16(ds, 0x20ee6d, ax);
    al = memoryAGet(ds, 0x30b0a9);
    memoryASet(ds, 0x20ee6f, al);
    sub_1bdf30();
    sub_1c4ba6();
    if (!ax)
        goto loc_1c4b1d;
    eax = pop32();
    goto loc_1c4b97;
    // gap 3 bytes
loc_1c4b1d: // 0160:1c4b1d
    sub_1a8c90();
    eax = pop32();
loc_1c4b23: // 0160:1c4b23
    bx = memoryAGet16(ds, 0x20ee4f);
    bx -= ax;
    if (!bx)
        goto loc_1c4b6c;
    bx -= 0x0001;
    if (!bx)
        goto loc_1c4b6c;
    ax = memoryAGet16(ds, 0x20ee4f);
    push32(eax);
    memoryASet16(ds, 0x20ee59, 0x0001);
    ecx = 0;
    cx = bx;
loc_1c4b50: // 0160:1c4b50
    push32(ecx);
    sub_1c4ba6();
    if (!ax)
        goto loc_1c4b66;
    ecx = pop32();
    eax = pop32();
    goto loc_1c4b97;
    // gap 3 bytes
loc_1c4b66: // 0160:1c4b66
    ecx = pop32();
    if (--ecx)
        goto loc_1c4b50;
    eax = pop32();
    goto loc_1c4b23;
loc_1c4b6c: // 0160:1c4b6c
    ax = memoryAGet16(ds, 0x20ee4f);
    ax -= memoryAGet16(ds, 0x20ee51);
    memoryASet16(ds, 0x20ee57, ax);
    memoryASet16(ds, 0x20ee59, 0x0000);
    if (memoryAGet16(ds, 0x20ee5b) == 0x0001)
        goto loc_1c4b97;
    goto loc_1c4a98;
loc_1c4b97: // 0160:1c4b97
    sub_1c51d6();
    ax = memoryAGet16(ds, 0x20ee63);
    memoryASet16(ds, esi, ax);
    esp += 4;
}
void sub_1c4ba6() // 0160:1c4ba6 +long
{
    esp -= 4;
    sub_1a8cae();
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    memoryASet16(ds, 0x20ec3d, ax);
    memoryASet16(ds, 0x20ec3f, bx);
    sub_1bb00d();
    if (!(memoryAGet16(ds, 0x22465a) & 0xffff))
        goto loc_1c4bdc;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c4bdc: // 0160:1c4bdc
    sub_1c51d6();
    ax = memoryAGet16(ds, 0x20ee63);
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, 0x20d7f1, 0x0000);
    memoryASet16(ds, 0x20d7f3, 0x0000);
    memoryASet16(ds, 0x20d7b3, 0x0020);
    sub_1b1ef1();
    ax = memoryAGet16(ds, 0x20ec3d);
    ax -= memoryAGet16(ds, 0x224656);
    if ((short)ax >= 0)
        goto loc_1c4c25;
    if (ax > 0xffe0)
        goto loc_1c4c2f;
    ax = 0xffe1;
    goto loc_1c4c2f;
loc_1c4c25: // 0160:1c4c25
    if (ax < 0x0020)
        goto loc_1c4c2f;
    ax = 0x001f;
loc_1c4c2f: // 0160:1c4c2f
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - ax);
    ax = memoryAGet16(ds, 0x20ec3f);
    ax -= memoryAGet16(ds, 0x224658);
    if ((short)ax >= 0)
        goto loc_1c4c51;
    if (ax > 0xffe0)
        goto loc_1c4c5b;
    ax = 0xffe1;
    goto loc_1c4c5b;
loc_1c4c51: // 0160:1c4c51
    if (ax < 0x0020)
        goto loc_1c4c5b;
    ax = 0x001f;
loc_1c4c5b: // 0160:1c4c5b
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) - ax);
    al = memoryAGet(ds, 0x20c840);
    al &= 0x08;
    if (!al)
        goto loc_1c4c82;
    if ((short)memoryAGet16(ds, 0x20cf4f) > (short)0x02e0)
        goto loc_1c4c82;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + 0x0004);
loc_1c4c82: // 0160:1c4c82
    al = memoryAGet(ds, 0x20c840);
    al &= 0x04;
    if (!al)
        goto loc_1c4ca1;
    if (memoryAGet16(ds, 0x20cf4f) == 0x0020)
        goto loc_1c4ca1;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - 0x0004);
loc_1c4ca1: // 0160:1c4ca1
    al = memoryAGet(ds, 0x20c840);
    al &= 0x02;
    if (!al)
        goto loc_1c4cc1;
    if ((short)memoryAGet16(ds, 0x20cf61) > (short)0x02e0)
        goto loc_1c4cc1;
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) + 0x0004);
loc_1c4cc1: // 0160:1c4cc1
    al = memoryAGet(ds, 0x20c840);
    al &= 0x01;
    if (!al)
        goto loc_1c4ce0;
    if (memoryAGet16(ds, 0x20cf61) == 0x0020)
        goto loc_1c4ce0;
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) - 0x0004);
loc_1c4ce0: // 0160:1c4ce0
    if ((short)memoryAGet16(ds, 0x20cf4f) < (short)0x02e0)
        goto loc_1c4cf8;
    memoryASet16(ds, 0x20cf4f, 0x02e0);
loc_1c4cf8: // 0160:1c4cf8
    if ((short)memoryAGet16(ds, 0x20cf4f) > (short)0x0020)
        goto loc_1c4d0f;
    memoryASet16(ds, 0x20cf4f, 0x0020);
loc_1c4d0f: // 0160:1c4d0f
    if ((short)memoryAGet16(ds, 0x20cf61) < (short)0x02e0)
        goto loc_1c4d27;
    memoryASet16(ds, 0x20cf61, 0x02e0);
loc_1c4d27: // 0160:1c4d27
    if ((short)memoryAGet16(ds, 0x20cf61) > (short)0x0020)
        goto loc_1c4d3e;
    memoryASet16(ds, 0x20cf61, 0x0020);
loc_1c4d3e: // 0160:1c4d3e
    ax = memoryAGet16(ds, 0x20ec3d);
    bx = memoryAGet16(ds, 0x20ec3f);
    memoryASet16(ds, 0x224656, ax);
    memoryASet16(ds, 0x224658, bx);
    sub_1bafe1();
    ax = memoryAGet16(ds, 0x20cf23);
    bx = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20c810, ax);
    memoryASet16(ds, 0x20c812, bx);
    eax = memoryAGet32(ds, 0x1f1c38);
    ebx = memoryAGet32(ds, 0x1f1c3c);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    ax &= 0xffe0;
    bx &= 0xffe0;
    ax += 0x007f;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1c4dbf;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1c4df1;
loc_1c4dbf: // 0160:1c4dbf
    bx += 0x007f;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1c4dd9;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1c4df1;
loc_1c4dd9: // 0160:1c4dd9
    if (bx >= 0x0190)
        goto loc_1c4df1;
    cx = 0x0000;
    dx = 0x0010;
    sub_1b19e0();
loc_1c4df1: // 0160:1c4df1
    ax = memoryAGet16(ds, 0x20ee53);
    ax += 0x0058;
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x0060;
    cx = 0x0001;
    dx = 0x0010;
    sub_1b19e0();
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c4e53;
    sub_1c51d6();
    ax = memoryAGet16(ds, 0x20ee61);
    if (ax)
        goto loc_1c4e50;
    esi = 0x00232cdc;
    ecx = 0x00000271;
loc_1c4e36: // 0160:1c4e36
    ax = memoryAGet16(ds, esi);
    if (ax)
        goto loc_1c4e43;
    memoryASet16(ds, esi, 0x0005);
loc_1c4e43: // 0160:1c4e43
    esi += 0x00000002;
    if (--ecx)
        goto loc_1c4e36;
    sub_1c51d6();
    ax = 0;
loc_1c4e50: // 0160:1c4e50
    memoryASet16(ds, esi, ax);
loc_1c4e53: // 0160:1c4e53
    sub_1c51d6();
    ax = memoryAGet16(ds, esi);
    memoryASet16(ds, 0x20ee63, ax);
    ax = memoryAGet16(ds, 0x20ee61);
    memoryASet16(ds, esi, ax);
    ax = memoryAGet16(ds, 0x20c810);
    bx = memoryAGet16(ds, 0x20c812);
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    sub_1ac75e();
    ax = 0x0000;
    esp += 4;
}
void sub_1c4e8e() // 0160:1c4e8e +long
{
    esp -= 4;
    ecx = 0x00007800;
    edx = 0x0025e92c;
    memoryASet32(ds, 0x2eeb88, ecx);
    memoryASet32(ds, 0x2eeb8c, edx);
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    ebp = 0x00000780;
loc_1c4eb5: // 0160:1c4eb5
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    bl = memoryAGet(ds, esi + 9);
    bh = memoryAGet(ds, esi + 13);
    ebx <<= 16;
    bl = memoryAGet(ds, esi + 1);
    bh = memoryAGet(ds, esi + 5);
    cl = memoryAGet(ds, esi + 10);
    ch = memoryAGet(ds, esi + 14);
    ecx <<= 16;
    cl = memoryAGet(ds, esi + 2);
    ch = memoryAGet(ds, esi + 6);
    dl = memoryAGet(ds, esi + 11);
    dh = memoryAGet(ds, esi + 15);
    edx <<= 16;
    dl = memoryAGet(ds, esi + 3);
    dh = memoryAGet(ds, esi + 7);
    memoryASet32(ds, esi, eax);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 8, ecx);
    memoryASet32(ds, esi + 12, edx);
    esi += 0x00000010;
    ebp--;
    if (ebp)
        goto loc_1c4eb5;
    esi = memoryAGet32(ds, 0x2eeb8c);
    esi += 0x00000314;
    edi = 0x0030acec;
    edx = 0x002eecec;
    memoryASet32(ds, 0x2eeb68, 0x00000027);
loc_1c4f21: // 0160:1c4f21
    memoryASet32(ds, 0x2eeb64, 0x0000000a);
loc_1c4f2b: // 0160:1c4f2b
    bx = 0x00ff;
    memoryASet32(ds, 0x2eeb60, 0x00000004);
loc_1c4f39: // 0160:1c4f39
    memoryASet32(ds, 0x2eeb58, esi);
    memoryASet32(ds, 0x2eeb6c, edx);
    memoryASet32(ds, 0x2eeb5c, 0x00000020);
loc_1c4f4f: // 0160:1c4f4f
    ecx = 0x00000004;
loc_1c4f54: // 0160:1c4f54
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c4f60;
    al = 0xff;
loc_1c4f60: // 0160:1c4f60
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1c4f54;
    esi += 0x0000000c;
    ecx = 0x00000004;
loc_1c4f70: // 0160:1c4f70
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c4f7c;
    al = 0xff;
loc_1c4f7c: // 0160:1c4f7c
    al = ~al;
    ax = ror16(ax, 0x0001);
    esi++;
    if (--ecx)
        goto loc_1c4f70;
    memoryASet(ds, edx, ah);
    bl &= ah;
    bh |= ah;
    edx++;
    esi += 0x0000012c;
    memoryASet32(ds, 0x2eeb5c, memoryAGet32(ds, 0x2eeb5c) - 1);
    if (memoryAGet32(ds, 0x2eeb5c))
        goto loc_1c4f4f;
    esi = memoryAGet32(ds, 0x2eeb58);
    edx = memoryAGet32(ds, 0x2eeb6c);
    edx += 0x00000020;
    esi += 0x00000004;
    memoryASet32(ds, 0x2eeb60, memoryAGet32(ds, 0x2eeb60) - 1);
    if (memoryAGet32(ds, 0x2eeb60))
        goto loc_1c4f39;
    al = 0;
    if (bl != 0xff)
        goto loc_1c4fbc;
    al = 0x02;
loc_1c4fbc: // 0160:1c4fbc
    if (bh)
        goto loc_1c4fc2;
    al = 0x01;
loc_1c4fc2: // 0160:1c4fc2
    memoryASet(ds, edi, al);
    edi++;
    esi += 0x00000010;
    memoryASet32(ds, 0x2eeb64, memoryAGet32(ds, 0x2eeb64) - 1);
    if (memoryAGet32(ds, 0x2eeb64))
        goto loc_1c4f2b;
    esi += 0x000026c0;
    memoryASet32(ds, 0x2eeb68, memoryAGet32(ds, 0x2eeb68) - 1);
    if (memoryAGet32(ds, 0x2eeb68))
        goto loc_1c4f21;
    edx = memoryAGet32(ds, 0x20b800);
    memoryASet32(ds, 0x2eeb8c, edx);
    ecx = 0x000004e6;
    memoryASet32(ds, 0x2eeb90, ecx);
    edx = 0x00232cd8;
    memoryASet32(ds, 0x2eeb94, edx);
    eax = 0;
    al = memoryAGet(ds, edx + 1);
    memoryASet32(ds, 0x1f1cb0, eax);
    memoryASet16(ds, 0x20cef3, ax);
    ebx = 0;
    bl = memoryAGet(ds, edx + 3);
    memoryASet32(ds, 0x1f1cb4, ebx);
    memoryASet16(ds, 0x20cef7, bx);
    mul8(bl);
    eax += eax;
    memoryASet32(ds, 0x2eeba4, eax);
    eax += memoryAGet32(ds, 0x2eeb94);
    eax += 0x00000004;
    memoryASet32(ds, 0x2eeba0, eax);
    ecx = 0;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cef7);
    cx = memoryAGet16(ds, 0x20cef3);
    edx = 0;
    mul16(cx);
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x20cefb, eax);
    sub_1c50ff();
    memoryASet16(ds, 0x20ee5d, 0x0001);
    sub_1a8499();
    memoryASet16(ds, 0x20ee5d, 0x0000);
    edx = 0x0025e92c;
    memoryASet32(ds, 0x2eeb8c, edx);
    eax = 0;
    memoryASet(ds, 0x1f1c44, al);
    sub_1b29b6();
    ax = memoryAGet16(ds, 0x20cef9);
    memoryASet16(ds, 0x20cef5, ax);
    memoryASet16(ds, 0x20cf3d, 0x0001);
    eax = 0;
    memoryASet32(ds, 0x20d773, eax);
    memoryASet32(ds, 0x20d777, eax);
    memoryASet(ds, 0x20d773, 0x01);
    ax = 0x0001;
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf85, ax);
    ax = memoryAGet16(ds, 0x20cf23);
    memoryASet16(ds, 0x20d881, ax);
    ax = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20d883, ax);
    eax = 0;
    memoryASet16(ds, 0x20d885, ax);
    memoryASet16(ds, 0x20d887, ax);
    al = 0x00;
    memoryASet(ds, 0x20d88b, al);
    memoryASet(ds, 0x20d88d, al);
    esp += 4;
}
void sub_1c50ff() // 0160:1c50ff +long
{
    esp -= 4;
    goto loc_1c50ff;
loc_1b0da2: // 0160:1b0da2
    esi = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, 0x20c85f);
loc_1b0dab: // 0160:1b0dab
    dx = memoryAGet16(ds, esi);
    if (dx == 0xffff)
        goto loc_1b0dfc;
    ebx = eax;
    edx = 0;
    dx = memoryAGet16(ds, esi + 2);
    dx <<= 1;
    ebx += edx;
    edx = 0;
    dx = memoryAGet16(ds, esi + 4);
    edx <<= 9;
    ecx = edx;
    edx <<= 2;
    edx += ecx;
    ebx += edx;
    memoryASet32(ds, edi, ebx);
    dx = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx <<= 3;
    memoryASet16(ds, edi + 6, dx);
    esi += 0x0000000a;
    edi += 0x00000008;
    memoryASet32(ds, 0x20c85f, memoryAGet32(ds, 0x20c85f) + 0x00000008);
    goto loc_1b0dab;
loc_1b0dfc: // 0160:1b0dfc
    esp += 4;
    return;
    // gap 82690 bytes
loc_1c50ff: // 0160:1c50ff
    esi = 0x0020b80c;
    memoryASet32(ds, 0x20c85f, esi);
    esi = 0x001f1010;
    memoryASet32(ds, 0x20cecb, esi);
    edx = memoryAGet32(ds, esi);
    sub_1aa484();
    edi = 0x002c5658;
    ax = 0;
    sub_1aa553();
    ecx = 0x00014314;
    edx = 0x002c5344;
    memoryASet32(ds, 0x2eebb8, ecx);
    memoryASet32(ds, 0x2eebbc, edx);
    esi = memoryAGet32(ds, 0x2eebbc);
    esi += 0x00000314;
    edi = esi;
    esi += 0x00012ac0;
    edi += 0x00012c00;
    edx = 0x000000f0;
loc_1c515e: // 0160:1c515e
    ecx = 0x00000014;
loc_1c5163: // 0160:1c5163
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 80, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 160, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 240, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1c5163;
    edi -= 0x00000190;
    esi -= 0x00000280;
    edx--;
    if (edx)
        goto loc_1c515e;
    esi = memoryAGet32(ds, 0x20cecb);
    eax = 0x002c5798;
    goto loc_1b0da2;
}
void sub_1c51d6() // 0160:1c51d6 +long
{
    esp -= 4;
    esi = 0x00232cdc;
    eax = 0;
    ebx = 0;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    ax &= 0xffe0;
    bx &= 0xffe0;
    ax >>= 4;
    bx >>= 4;
    esi += ebx;
    bx = ax;
    ax <<= 3;
    cx = ax;
    ax <<= 1;
    ax += cx;
    ax += bx;
    esi += eax;
    esp += 4;
}
void sub_1c52c2() // 0160:1c52c2 +long
{
    esp -= 4;
    goto loc_1c52c2;
loc_1bd849: // 0160:1bd849
    push32(edx);
    push32(eax);
    dx = 0x03ce;
    ax = memoryAGet16(ds, 0x22463e);
    ah = al;
    al = 0x05;
    out16(dx, ax);
    eax = pop32();
    edx = pop32();
    esp += 4;
    return;
    // gap 31332 bytes
loc_1c52c2: // 0160:1c52c2
    memoryASet16(ds, 0x1f1cb8, 0x9000);
    sub_1a840e();
    sub_1bd825();
    esi = 0x000a9000;
    edi = 0x000a0000;
    ecx = 0x00004600;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    esi = 0x000a9000;
    edi = 0x000a4800;
    ecx = 0x00004600;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    goto loc_1bd849;
}
void sub_1c52fc() // 0160:1c52fc +long
{
    esp -= 4;
    goto loc_1c52fc;
loc_1c1db4: // 0160:1c1db4
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 13178 bytes
loc_1c5215: // 0160:1c5215
    memoryASet16(ds, 0x20d80d, ax);
    if (ax)
        goto loc_1c524a;
    ax = 0x0000;
    bx = 0x0000;
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    ax += 0x0020;
    bx += 0x0020;
    memoryASet16(ds, 0x20cf4f, ax);
    memoryASet16(ds, 0x20cf61, bx);
loc_1c524a: // 0160:1c524a
    memoryASet16(ds, 0x20d7f5, 0x0000);
    memoryASet(ds, 0x232cd8, 0x00);
    memoryASet(ds, 0x232cda, 0x00);
    memoryASet(ds, 0x232cd9, 0x19);
    memoryASet(ds, 0x232cdb, 0x19);
    edi = 0x00232cdc;
    esi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c527e: // 0160:1c527e
    ax = 0;
    al = memoryAGet(ds, esi);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    esi++;
    if (--ecx)
        goto loc_1c527e;
loc_1c528c: // 0160:1c528c
    sub_1c459c();
    if (ax)
        goto loc_1c529d;
    sub_1c49d6();
    goto loc_1c528c;
loc_1c529d: // 0160:1c529d
    if (ax == 0x00ff)
        goto loc_1c52c1;
    esi = 0x00232cdc;
    edi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c52b6: // 0160:1c52b6
    ax = memoryAGet16(ds, esi);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi++;
    if (--ecx)
        goto loc_1c52b6;
loc_1c52c1: // 0160:1c52c1
    esp += 4;
    return;
    // gap 58 bytes
loc_1c52fc: // 0160:1c52fc
    ax = 0x0001;
    memoryASet16(ds, 0x20ee65, ax);
    memoryASet16(ds, 0x20ee63, 0xffff);
    esi = 0x0023c76c;
    ecx = 0x00000090;
loc_1c5319: // 0160:1c5319
    eax = memoryAGet32(ds, esi);
    if (eax)
        goto loc_1c5329;
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c5319;
    goto loc_1c5584;
loc_1c5329: // 0160:1c5329
    esi = 0x0023c4fb;
    ebx = 0x00000019;
loc_1c5333: // 0160:1c5333
    ecx = 0x00000019;
loc_1c5338: // 0160:1c5338
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c5349;
    esi++;
    if (--ecx)
        goto loc_1c5338;
    ebx--;
    if (ebx)
        goto loc_1c5333;
    goto loc_1c55d2;
loc_1c5349: // 0160:1c5349
    ax = 0x0019;
    ax -= bx;
    memoryASet16(ds, 0x20ceb3, ax);
    bx = ax;
    ax = 0x0019;
    ax -= cx;
    memoryASet16(ds, 0x20ceb5, ax);
    cx = ax;
    dx = 0x0000;
loc_1c536d: // 0160:1c536d
    dx++;
    esi--;
    cx--;
    if (!cx)
        goto loc_1c55cc;
loc_1c537b: // 0160:1c537b
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c5456;
    if (al == 0x01)
        goto loc_1c536d;
    if (al == 0x13)
        goto loc_1c536d;
    if (al == 0x14)
        goto loc_1c536d;
    if (al == 0x15)
        goto loc_1c536d;
    if (al == 0x07)
        goto loc_1c543b;
    if (al == 0x03)
        goto loc_1c53aa;
    if (al == 0x04)
        goto loc_1c5408;
    goto loc_1c55c6;
loc_1c53aa: // 0160:1c53aa
    dx++;
    esi += 0x00000019;
    bx++;
    if (bx == 0x0018)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x03)
        goto loc_1c536d;
    if (al == 0x04)
        goto loc_1c53da;
    if (al == 0x02)
        goto loc_1c53aa;
    if (al == 0x16)
        goto loc_1c53aa;
    if (al == 0x17)
        goto loc_1c53aa;
    if (al == 0x18)
        goto loc_1c53aa;
    goto loc_1c55c6;
loc_1c53da: // 0160:1c53da
    dx++;
    esi++;
    cx++;
    if (cx == 0x0018)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x01)
        goto loc_1c53da;
    if (al == 0x13)
        goto loc_1c53da;
    if (al == 0x14)
        goto loc_1c53da;
    if (al == 0x15)
        goto loc_1c53da;
    if (al == 0x03)
        goto loc_1c5408;
    if (al == 0x04)
        goto loc_1c53aa;
    goto loc_1c55c6;
loc_1c5408: // 0160:1c5408
    dx++;
    esi -= 0x00000019;
    bx--;
    if (!bx)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x02)
        goto loc_1c5408;
    if (al == 0x16)
        goto loc_1c5408;
    if (al == 0x17)
        goto loc_1c5408;
    if (al == 0x18)
        goto loc_1c5408;
    if (al == 0x03)
        goto loc_1c53da;
    if (al == 0x04)
        goto loc_1c536d;
    goto loc_1c55c6;
loc_1c543b: // 0160:1c543b
    dx++;
    esi--;
    cx -= 0x0001;
    if (!cx)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x06)
        goto loc_1c543b;
    goto loc_1c537b;
loc_1c5456: // 0160:1c5456
    memoryASet16(ds, 0x20ee63, dx);
    if ((short)dx <= (short)0x001d)
        goto loc_1c55b1;
    if ((short)dx >= (short)0x00af)
        goto loc_1c559c;
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0x0003;
    sub_1c5695();
    memoryASet16(ds, 0x20d7f5, 0x0001);
    memoryASet16(ds, 0x20d89b, 0x0001);
    sub_1b66fb();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    sub_1bf923();
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, 0x224670, 0xffffffff);
    memoryASet32(ds, 0x224674, 0x0023c4e0);
    sub_1c1db4();
    memoryASet16(ds, 0x20e90d, 0x0001);
    memoryASet16(ds, 0x20ec8d, 0x0003);
    memoryASet16(ds, 0x20d8b7, 0x0000);
    memoryASet16(ds, 0x20eea9, 0x0001);
    sub_1c58f8();
    memoryASet16(ds, 0x20ee81, 0x0000);
    memoryASet16(ds, 0x20eea9, 0x0000);
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, 0x224670, 0xffffffff);
    memoryASet32(ds, 0x224674, 0x0023c4e0);
    goto loc_1c1db4;
loc_1c5584: // 0160:1c5584
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0x0006;
    goto loc_1c5695;
loc_1c559c: // 0160:1c559c
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5768;
    ax = 0x0005;
    goto loc_1c55f6;
loc_1c55b1: // 0160:1c55b1
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5768;
    ax = 0x0004;
    goto loc_1c55f6;
loc_1c55c6: // 0160:1c55c6
    ax = 0x0002;
    goto loc_1c55f6;
loc_1c55cc: // 0160:1c55cc
    ax = 0x0001;
    goto loc_1c55f6;
loc_1c55d2: // 0160:1c55d2
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0;
    sub_1c5695();
    eax = 0;
    memoryASet16(ds, 0x20ee61, ax);
    goto loc_1c5215;
loc_1c55f6: // 0160:1c55f6
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    push(ax);
    ax = 0;
    if (bx)
        goto loc_1c5613;
    bx = 0x0001;
loc_1c5613: // 0160:1c5613
    if (cx)
        goto loc_1c561c;
    cx = 0x0001;
loc_1c561c: // 0160:1c561c
    if (bx != 0x0018)
        goto loc_1c5626;
    bx = 0x0017;
loc_1c5626: // 0160:1c5626
    if (cx != 0x0018)
        goto loc_1c5630;
    cx = 0x0017;
loc_1c5630: // 0160:1c5630
    al = memoryAGet(ds, esi);
    memoryASet16(ds, 0x20ee61, ax);
    bx <<= 5;
    cx <<= 5;
    memoryASet16(ds, 0x20cf4f, bx);
    memoryASet16(ds, 0x20cf61, cx);
    bx -= 0x00a0;
    if ((short)bx >= 0)
        goto loc_1c5658;
    bx = 0;
loc_1c5658: // 0160:1c5658
    cx -= 0x0070;
    if ((short)cx >= 0)
        goto loc_1c5661;
    cx = 0;
loc_1c5661: // 0160:1c5661
    if ((short)bx < (short)0x01c0)
        goto loc_1c566c;
    bx = 0x01c0;
loc_1c566c: // 0160:1c566c
    if ((short)cx < (short)0x0200)
        goto loc_1c5677;
    cx = 0x0200;
loc_1c5677: // 0160:1c5677
    memoryASet16(ds, 0x20cf23, bx);
    memoryASet16(ds, 0x20cf25, cx);
    ax = pop();
    sub_1c5695();
    ax = 0x0001;
    goto loc_1c5215;
loc_1c5695: // 0160:1c5695
    memoryASet16(ds, 0x20ceaf, ax);
    push(ax);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54af();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    ax = pop();
    push(ax);
    sub_1c5772();
    ax = pop();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c5772();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1c5724: // 0160:1c5724
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20ceaf) == 0x0003)
        goto loc_1c575e;
    if (memoryAGet16(ds, 0x20ceaf) == 0x0006)
        goto loc_1c575e;
    esi = 0x001f1034;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001f10a8;
    al = 0xc5;
    bl = 0x87;
    sub_1b60a7();
loc_1c575e: // 0160:1c575e
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c5724;
loc_1c5767: // 0160:1c5767
    esp += 4;
    return;
loc_1c5768: // 0160:1c5768
    memoryASet16(ds, 0x20ee63, 0xffff);
    esp += 4;
}
void sub_1c5300() // 0160:1c5300 +long
{
    esp -= 4;
    goto loc_1c5300;
loc_1c1db4: // 0160:1c1db4
    edx = 0x0020e9c5;
    eax = 0x00003d00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e7c;
    memoryASet32(ds, 0x20ee4b, eax);
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e16;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e16;
    ebx = eax;
    ecx = 0;
    edx = 0;
    eax = 0x00004202;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, 0x224670, edx);
    ebx = memoryAGet32(ds, 0x20ee4b);
    ecx = 0;
    edx = 0;
    eax = 0x00004200;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
loc_1c1e16: // 0160:1c1e16
    edx = memoryAGet32(ds, 0x224674);
    ecx = memoryAGet32(ds, 0x224670);
    ebx = memoryAGet32(ds, 0x20ee4b);
    eax = 0x00003f00;
    interrupt(0x21);
    if (flags.carry)
        goto loc_1c1e71;
    if (memoryAGet32(ds, 0x224670) != eax)
        goto loc_1c1e66;
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1c1e87();
    if (memoryAGet32(ds, 0x224670) == 0x00000010)
        goto loc_1c1e65;
    if (memoryAGet32(ds, 0x224670) == 0x0000304c)
        goto loc_1c1e65;
    sub_1c4573();
loc_1c1e65: // 0160:1c1e65
    esp += 4;
    return;
loc_1c1e66: // 0160:1c1e66
    memoryASet16(ds, 0x20cec3, 0x0001);
    goto loc_1c1e87;
loc_1c1e71: // 0160:1c1e71
    memoryASet16(ds, 0x20cec3, 0x0002);
    goto loc_1c1e87;
loc_1c1e7c: // 0160:1c1e7c
    memoryASet16(ds, 0x20cec3, 0x0003);
    goto loc_1c1e94;
loc_1c1e87: // 0160:1c1e87
    eax = 0x00003e00;
    ebx = memoryAGet32(ds, 0x20ee4b);
    interrupt(0x21);
loc_1c1e94: // 0160:1c1e94
    ax = memoryAGet16(ds, 0x20cec3);
    esp += 4;
    return;
    // gap 13178 bytes
loc_1c5215: // 0160:1c5215
    memoryASet16(ds, 0x20d80d, ax);
    if (ax)
        goto loc_1c524a;
    ax = 0x0000;
    bx = 0x0000;
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    ax += 0x0020;
    bx += 0x0020;
    memoryASet16(ds, 0x20cf4f, ax);
    memoryASet16(ds, 0x20cf61, bx);
loc_1c524a: // 0160:1c524a
    memoryASet16(ds, 0x20d7f5, 0x0000);
    memoryASet(ds, 0x232cd8, 0x00);
    memoryASet(ds, 0x232cda, 0x00);
    memoryASet(ds, 0x232cd9, 0x19);
    memoryASet(ds, 0x232cdb, 0x19);
    edi = 0x00232cdc;
    esi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c527e: // 0160:1c527e
    ax = 0;
    al = memoryAGet(ds, esi);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    esi++;
    if (--ecx)
        goto loc_1c527e;
loc_1c528c: // 0160:1c528c
    sub_1c459c();
    if (ax)
        goto loc_1c529d;
    sub_1c49d6();
    goto loc_1c528c;
loc_1c529d: // 0160:1c529d
    if (ax == 0x00ff)
        goto loc_1c52c1;
    esi = 0x00232cdc;
    edi = 0x0023c4fb;
    ecx = 0x00000271;
loc_1c52b6: // 0160:1c52b6
    ax = memoryAGet16(ds, esi);
    memoryASet(ds, edi, al);
    esi += 0x00000002;
    edi++;
    if (--ecx)
        goto loc_1c52b6;
loc_1c52c1: // 0160:1c52c1
    esp += 4;
    return;
    // gap 62 bytes
loc_1c5300: // 0160:1c5300
    memoryASet16(ds, 0x20ee65, ax);
    memoryASet16(ds, 0x20ee63, 0xffff);
    esi = 0x0023c76c;
    ecx = 0x00000090;
loc_1c5319: // 0160:1c5319
    eax = memoryAGet32(ds, esi);
    if (eax)
        goto loc_1c5329;
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c5319;
    goto loc_1c5584;
loc_1c5329: // 0160:1c5329
    esi = 0x0023c4fb;
    ebx = 0x00000019;
loc_1c5333: // 0160:1c5333
    ecx = 0x00000019;
loc_1c5338: // 0160:1c5338
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c5349;
    esi++;
    if (--ecx)
        goto loc_1c5338;
    ebx--;
    if (ebx)
        goto loc_1c5333;
    goto loc_1c55d2;
loc_1c5349: // 0160:1c5349
    ax = 0x0019;
    ax -= bx;
    memoryASet16(ds, 0x20ceb3, ax);
    bx = ax;
    ax = 0x0019;
    ax -= cx;
    memoryASet16(ds, 0x20ceb5, ax);
    cx = ax;
    dx = 0x0000;
loc_1c536d: // 0160:1c536d
    dx++;
    esi--;
    cx--;
    if (!cx)
        goto loc_1c55cc;
loc_1c537b: // 0160:1c537b
    al = memoryAGet(ds, esi);
    if (!al)
        goto loc_1c5456;
    if (al == 0x01)
        goto loc_1c536d;
    if (al == 0x13)
        goto loc_1c536d;
    if (al == 0x14)
        goto loc_1c536d;
    if (al == 0x15)
        goto loc_1c536d;
    if (al == 0x07)
        goto loc_1c543b;
    if (al == 0x03)
        goto loc_1c53aa;
    if (al == 0x04)
        goto loc_1c5408;
    goto loc_1c55c6;
loc_1c53aa: // 0160:1c53aa
    dx++;
    esi += 0x00000019;
    bx++;
    if (bx == 0x0018)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x03)
        goto loc_1c536d;
    if (al == 0x04)
        goto loc_1c53da;
    if (al == 0x02)
        goto loc_1c53aa;
    if (al == 0x16)
        goto loc_1c53aa;
    if (al == 0x17)
        goto loc_1c53aa;
    if (al == 0x18)
        goto loc_1c53aa;
    goto loc_1c55c6;
loc_1c53da: // 0160:1c53da
    dx++;
    esi++;
    cx++;
    if (cx == 0x0018)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x01)
        goto loc_1c53da;
    if (al == 0x13)
        goto loc_1c53da;
    if (al == 0x14)
        goto loc_1c53da;
    if (al == 0x15)
        goto loc_1c53da;
    if (al == 0x03)
        goto loc_1c5408;
    if (al == 0x04)
        goto loc_1c53aa;
    goto loc_1c55c6;
loc_1c5408: // 0160:1c5408
    dx++;
    esi -= 0x00000019;
    bx--;
    if (!bx)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x02)
        goto loc_1c5408;
    if (al == 0x16)
        goto loc_1c5408;
    if (al == 0x17)
        goto loc_1c5408;
    if (al == 0x18)
        goto loc_1c5408;
    if (al == 0x03)
        goto loc_1c53da;
    if (al == 0x04)
        goto loc_1c536d;
    goto loc_1c55c6;
loc_1c543b: // 0160:1c543b
    dx++;
    esi--;
    cx -= 0x0001;
    if (!cx)
        goto loc_1c55cc;
    al = memoryAGet(ds, esi);
    if (al == 0x06)
        goto loc_1c543b;
    goto loc_1c537b;
loc_1c5456: // 0160:1c5456
    memoryASet16(ds, 0x20ee63, dx);
    if ((short)dx <= (short)0x001d)
        goto loc_1c55b1;
    if ((short)dx >= (short)0x00af)
        goto loc_1c559c;
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0x0003;
    sub_1c5695();
    memoryASet16(ds, 0x20d7f5, 0x0001);
    memoryASet16(ds, 0x20d89b, 0x0001);
    sub_1b66fb();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    sub_1bf923();
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, 0x224670, 0xffffffff);
    memoryASet32(ds, 0x224674, 0x0023c4e0);
    sub_1c1db4();
    memoryASet16(ds, 0x20e90d, 0x0001);
    memoryASet16(ds, 0x20ec8d, 0x0003);
    memoryASet16(ds, 0x20d8b7, 0x0000);
    memoryASet16(ds, 0x20eea9, 0x0001);
    sub_1c58f8();
    memoryASet16(ds, 0x20ee81, 0x0000);
    memoryASet16(ds, 0x20eea9, 0x0000);
    edx = 0x001f0d39;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
    esi = 0x001f118c;
    edi = 0x0020e9c5;
    ecx = 0x0000001e;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    memoryASet32(ds, 0x224670, 0xffffffff);
    memoryASet32(ds, 0x224674, 0x0023c4e0);
    goto loc_1c1db4;
loc_1c5584: // 0160:1c5584
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0x0006;
    goto loc_1c5695;
loc_1c559c: // 0160:1c559c
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5768;
    ax = 0x0005;
    goto loc_1c55f6;
loc_1c55b1: // 0160:1c55b1
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5768;
    ax = 0x0004;
    goto loc_1c55f6;
loc_1c55c6: // 0160:1c55c6
    ax = 0x0002;
    goto loc_1c55f6;
loc_1c55cc: // 0160:1c55cc
    ax = 0x0001;
    goto loc_1c55f6;
loc_1c55d2: // 0160:1c55d2
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    ax = 0;
    sub_1c5695();
    eax = 0;
    memoryASet16(ds, 0x20ee61, ax);
    goto loc_1c5215;
loc_1c55f6: // 0160:1c55f6
    if (!(memoryAGet16(ds, 0x20ee65) & 0xffff))
        goto loc_1c5767;
    push(ax);
    ax = 0;
    if (bx)
        goto loc_1c5613;
    bx = 0x0001;
loc_1c5613: // 0160:1c5613
    if (cx)
        goto loc_1c561c;
    cx = 0x0001;
loc_1c561c: // 0160:1c561c
    if (bx != 0x0018)
        goto loc_1c5626;
    bx = 0x0017;
loc_1c5626: // 0160:1c5626
    if (cx != 0x0018)
        goto loc_1c5630;
    cx = 0x0017;
loc_1c5630: // 0160:1c5630
    al = memoryAGet(ds, esi);
    memoryASet16(ds, 0x20ee61, ax);
    bx <<= 5;
    cx <<= 5;
    memoryASet16(ds, 0x20cf4f, bx);
    memoryASet16(ds, 0x20cf61, cx);
    bx -= 0x00a0;
    if ((short)bx >= 0)
        goto loc_1c5658;
    bx = 0;
loc_1c5658: // 0160:1c5658
    cx -= 0x0070;
    if ((short)cx >= 0)
        goto loc_1c5661;
    cx = 0;
loc_1c5661: // 0160:1c5661
    if ((short)bx < (short)0x01c0)
        goto loc_1c566c;
    bx = 0x01c0;
loc_1c566c: // 0160:1c566c
    if ((short)cx < (short)0x0200)
        goto loc_1c5677;
    cx = 0x0200;
loc_1c5677: // 0160:1c5677
    memoryASet16(ds, 0x20cf23, bx);
    memoryASet16(ds, 0x20cf25, cx);
    ax = pop();
    sub_1c5695();
    ax = 0x0001;
    goto loc_1c5215;
loc_1c5695: // 0160:1c5695
    memoryASet16(ds, 0x20ceaf, ax);
    push(ax);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54af();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    ax = pop();
    push(ax);
    sub_1c5772();
    ax = pop();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c5772();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1c5724: // 0160:1c5724
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20ceaf) == 0x0003)
        goto loc_1c575e;
    if (memoryAGet16(ds, 0x20ceaf) == 0x0006)
        goto loc_1c575e;
    esi = 0x001f1034;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001f10a8;
    al = 0xc5;
    bl = 0x87;
    sub_1b60a7();
loc_1c575e: // 0160:1c575e
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c5724;
loc_1c5767: // 0160:1c5767
    esp += 4;
    return;
loc_1c5768: // 0160:1c5768
    memoryASet16(ds, 0x20ee63, 0xffff);
    esp += 4;
}
void sub_1c5695() // 0160:1c5695 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ceaf, ax);
    push(ax);
    sub_1b4bc9();
    sub_1b6083();
    sub_1b54af();
    edx = 0x001ecc30;
    sub_1bd899();
    edx = 0x001ecb7a;
    edi = 0x000a0000;
    sub_1b524f();
    edi = 0x000a4800;
    sub_1b5267();
    edi = 0x000a9000;
    sub_1b5267();
    ax = pop();
    push(ax);
    sub_1c5772();
    ax = pop();
    memoryASet16(ds, 0x2231c4, 0x0002);
    sub_1c5772();
    memoryASet16(ds, 0x2231c4, 0x0000);
    memoryASet16(ds, 0x20ec3d, 0x00b6);
    memoryASet16(ds, 0x20ec3f, 0x00fe);
    memoryASet16(ds, 0x20e831, 0x0000);
    memoryASet16(ds, 0x20e82f, 0x0000);
    sub_1b4f0e();
loc_1c5724: // 0160:1c5724
    sub_1b5096();
    sub_1c6ff7();
    if (memoryAGet16(ds, 0x20ceaf) == 0x0003)
        goto loc_1c575e;
    if (memoryAGet16(ds, 0x20ceaf) == 0x0006)
        goto loc_1c575e;
    esi = 0x001f1034;
    al = 0xc3;
    bl = 0x09;
    sub_1b60a7();
    esi = 0x001f10a8;
    al = 0xc5;
    bl = 0x87;
    sub_1b60a7();
loc_1c575e: // 0160:1c575e
    al = memoryAGet(ds, 0x20c840);
    al &= 0x80;
    if (!al)
        goto loc_1c5724;
    esp += 4;
}
void sub_1c5772() // 0160:1c5772 +long
{
    esp -= 4;
    goto loc_1c5772;
loc_1b60d3: // 0160:1b60d3
    sub_1b6113();
    esi = 0x0020e9c5;
    sub_1b6269();
    return;
    // gap 63120 bytes
loc_1c5772: // 0160:1c5772
    memoryASet16(ds, 0x20e905, 0x0002);
    if (ax)
        goto loc_1c578a;
    esi = 0x001f104e;
    goto loc_1b60d3;
loc_1c578a: // 0160:1c578a
    if (ax != 0x0001)
        goto loc_1c579a;
    esi = 0x001f1060;
    goto loc_1b60d3;
loc_1c579a: // 0160:1c579a
    if (ax != 0x0002)
        goto loc_1c57b4;
    esi = 0x001f1077;
    sub_1b60d3();
    esi = 0x001f108a;
    goto loc_1b60d3;
loc_1c57b4: // 0160:1c57b4
    if (ax != 0x0003)
        goto loc_1c5824;
    esi = 0x001f10c5;
    sub_1b60d3();
    esi = 0x001f10e1;
    edi = 0x0020e9c5;
    ecx = 0x00000028;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ee63);
    bx = 0;
    cx = 0;
loc_1c57e1: // 0160:1c57e1
    if ((short)ax < (short)0x0064)
        goto loc_1c57ef;
    cx++;
    ax -= 0x0064;
    goto loc_1c57e1;
loc_1c57ef: // 0160:1c57ef
    if ((short)ax < (short)0x000a)
        goto loc_1c57fd;
    bx++;
    ax -= 0x000a;
    goto loc_1c57ef;
loc_1c57fd: // 0160:1c57fd
    ax += 0x0030;
    bx += 0x0030;
    cx += 0x0030;
    memoryASet(ds, 0x20e9d3, cl);
    memoryASet(ds, 0x20e9d4, bl);
    memoryASet(ds, 0x20e9d5, al);
    esi = 0x0020e9c5;
    goto loc_1b60d3;
loc_1c5824: // 0160:1c5824
    if (ax != 0x0004)
        goto loc_1c5840;
    esi = 0x001f10f2;
    sub_1b60d3();
    esi = 0x001f1108;
    sub_1b60d3();
    goto loc_1c585a;
loc_1c5840: // 0160:1c5840
    if (ax != 0x0005)
        goto loc_1c58ba;
    esi = 0x001f1126;
    sub_1b60d3();
    esi = 0x001f114b;
    sub_1b60d3();
loc_1c585a: // 0160:1c585a
    esi = 0x001f113a;
    edi = 0x0020ea29;
    ecx = 0x00000028;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
    ax = memoryAGet16(ds, 0x20ee63);
    bx = 0;
    cx = 0;
loc_1c5877: // 0160:1c5877
    if ((short)ax < (short)0x0064)
        goto loc_1c5885;
    cx++;
    ax -= 0x0064;
    goto loc_1c5877;
loc_1c5885: // 0160:1c5885
    if ((short)ax < (short)0x000a)
        goto loc_1c5893;
    bx++;
    ax -= 0x000a;
    goto loc_1c5885;
loc_1c5893: // 0160:1c5893
    ax += 0x0030;
    bx += 0x0030;
    cx += 0x0030;
    memoryASet(ds, 0x20ea37, cl);
    memoryASet(ds, 0x20ea38, bl);
    memoryASet(ds, 0x20ea39, al);
    esi = 0x0020ea29;
    goto loc_1b60d3;
loc_1c58ba: // 0160:1c58ba
    if (ax != 0x0006)
        goto loc_1c58ca;
    esi = 0x001f116a;
    goto loc_1b60d3;
loc_1c58ca: // 0160:1c58ca
    esp += 4;
    return;
}
void sub_1c58cb() // 0160:1c58cb +long
{
    esp -= 4;
    al = memoryAGet(ds, 0x23c4f0);
    if (al != 0x01)
        goto loc_1c58f3;
    edx = 0x001f0d4e;
    sub_1aa484();
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ax = 0x0001;
    sub_1aa553();
loc_1c58f3: // 0160:1c58f3
    sub_1c103c();
    memoryASet16(ds, 0x20d7b9, 0x0036);
    sub_1b4eda();
    ax = 0;
    sub_1c5300();
    if (memoryAGet16(ds, 0x20ee63) == 0xffff)
        goto loc_1c59c2;
    if ((short)memoryAGet16(ds, 0x20ee63) <= (short)0x001d)
        goto loc_1c59c2;
    if ((short)memoryAGet16(ds, 0x20ee63) >= (short)0x00af)
        goto loc_1c59c2;
    sub_1c59f0();
    al = memoryAGet(ds, 0x23c4f0);
    if (al != 0x03)
        goto loc_1c5960;
    esi = 0x0020c88f;
    ecx = 0x00000300;
loc_1c5952: // 0160:1c5952
    al = memoryAGet(ds, esi);
    al >>= 2;
    bl = memoryAGet(ds, esi);
    bl -= al;
    memoryASet(ds, esi, bl);
    esi++;
    if (--ecx)
        goto loc_1c5952;
loc_1c5960: // 0160:1c5960
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1c5998;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1c5998;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1c5998;
loc_1c5981: // 0160:1c5981
    eax = memoryAGet32(ds, 0x2eebd0);
    eax -= memoryAGet32(ds, 0x20ee7b);
    if ((int32_t)eax < (int32_t)0x0000008c)
        goto loc_1c5981;
    sub_1c79ac();
loc_1c5998: // 0160:1c5998
    sub_1ac7de();
    if ((short)memoryAGet16(ds, 0x20ee77) >= (short)0x0003)
        goto loc_1c59b8;
    memoryASet32(ds, 0x2246cc, 0x00000001);
    sub_1abd5e();
    goto loc_1c59c2;
loc_1c59b8: // 0160:1c59b8
    sub_1b4f0e();
    sub_1abd5e();
loc_1c59c2: // 0160:1c59c2
    memoryASet16(ds, 0x2231d0, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x224644, 0x0000);
    esp += 4;
}
void sub_1c58f8() // 0160:1c58f8 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d7b9, 0x0036);
    sub_1b4eda();
    ax = 0;
    sub_1c5300();
    if (memoryAGet16(ds, 0x20ee63) == 0xffff)
        goto loc_1c59c2;
    if ((short)memoryAGet16(ds, 0x20ee63) <= (short)0x001d)
        goto loc_1c59c2;
    if ((short)memoryAGet16(ds, 0x20ee63) >= (short)0x00af)
        goto loc_1c59c2;
    sub_1c59f0();
    al = memoryAGet(ds, 0x23c4f0);
    if (al != 0x03)
        goto loc_1c5960;
    esi = 0x0020c88f;
    ecx = 0x00000300;
loc_1c5952: // 0160:1c5952
    al = memoryAGet(ds, esi);
    al >>= 2;
    bl = memoryAGet(ds, esi);
    bl -= al;
    memoryASet(ds, esi, bl);
    esi++;
    if (--ecx)
        goto loc_1c5952;
loc_1c5960: // 0160:1c5960
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1c5998;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1c5998;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1c5998;
loc_1c5981: // 0160:1c5981
    eax = memoryAGet32(ds, 0x2eebd0);
    eax -= memoryAGet32(ds, 0x20ee7b);
    if ((int32_t)eax < (int32_t)0x0000008c)
        goto loc_1c5981;
    sub_1c79ac();
loc_1c5998: // 0160:1c5998
    sub_1ac7de();
    if ((short)memoryAGet16(ds, 0x20ee77) >= (short)0x0003)
        goto loc_1c59b8;
    memoryASet32(ds, 0x2246cc, 0x00000001);
    sub_1abd5e();
    goto loc_1c59c2;
loc_1c59b8: // 0160:1c59b8
    sub_1b4f0e();
    sub_1abd5e();
loc_1c59c2: // 0160:1c59c2
    memoryASet16(ds, 0x2231d0, 0x0000);
    memoryASet16(ds, 0x20d7bf, 0x0000);
    memoryASet16(ds, 0x20d7c1, 0x0000);
    memoryASet16(ds, 0x20d7c3, 0x0000);
    memoryASet16(ds, 0x224644, 0x0000);
    esp += 4;
}
void sub_1c59f0() // 0160:1c59f0 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20cef5, 0x0000);
    memoryASet16(ds, 0x20edfd, 0x0000);
    eax = 0;
    ebx = 0;
    ax = memoryAGet16(ds, 0x20ee53);
    bx = memoryAGet16(ds, 0x20ee55);
    memoryASet32(ds, 0x1f1c48, eax);
    memoryASet32(ds, 0x1f1c4c, ebx);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00000314;
    ecx = 0x00000026;
loc_1c5a2f: // 0160:1c5a2f
    push32(edi);
    push32(ecx);
    ecx = 0x0000000a;
loc_1c5a36: // 0160:1c5a36
    push32(edi);
    push32(ecx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00000314;
    ecx = 0x00000020;
loc_1c5a49: // 0160:1c5a49
    push32(ecx);
    ecx = 0x00000020;
loc_1c5a4f: // 0160:1c5a4f
    al = memoryAGet(ds, edi);
    if (al < 0xfc)
        goto loc_1c5a59;
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
loc_1c5a59: // 0160:1c5a59
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c5a4f;
    ecx = pop32();
    esi += 0x00000120;
    edi += 0x00000120;
    if (--ecx)
        goto loc_1c5a49;
    ecx = pop32();
    edi = pop32();
    edi += 0x00000020;
    if (--ecx)
        goto loc_1c5a36;
    ecx = pop32();
    edi = pop32();
    edi += 0x00002800;
    if (--ecx)
        goto loc_1c5a2f;
    memoryASet16(ds, 0x20d867, 0x0000);
    memoryASet32(ds, 0x1f1c40, 0x00000000);
    sub_1a8760();
    edi = 0x00232cdc;
    esi = 0x0023c4fb;
    ecx = 0x00000019;
loc_1c5aa4: // 0160:1c5aa4
    push32(edi);
    push32(ecx);
    ecx = 0x00000019;
loc_1c5aab: // 0160:1c5aab
    push32(edi);
    eax = 0;
    al = memoryAGet(ds, esi);
    al += al;
    edx = 0x001f11a0;
    ax = memoryAGet16(ds, edx + eax);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    edi += 0x00000092;
    ax -= 0x0013;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    edi += 0x00000092;
    ax -= 0x0013;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax += 0x000a;
    memoryASet16(ds, edi, ax);
    esi += 0x00000001;
    edi = pop32();
    edi += 0x00000006;
    if (--ecx)
        goto loc_1c5aab;
    ecx = pop32();
    edi = pop32();
    edi += 0x000001c2;
    ecx--;
    if (ecx)
        goto loc_1c5aa4;
    edi = 0x002358ce;
    esi = 0x0023c4fb;
    ecx = 0x00000019;
loc_1c5b3b: // 0160:1c5b3b
    push32(edi);
    push32(ecx);
    ecx = 0x00000019;
loc_1c5b42: // 0160:1c5b42
    push32(edi);
    eax = 0;
    al = memoryAGet(ds, esi);
    ax += ax;
    bx = ax;
    ax <<= 3;
    ax += bx;
    edx = 0x001f11dc;
    edx += eax;
    ax = memoryAGet16(ds, edx);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 6);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 12);
    memoryASet16(ds, edi, ax);
    edi += 0x00000092;
    ax = memoryAGet16(ds, edx + 2);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 8);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 14);
    memoryASet16(ds, edi, ax);
    edi += 0x00000092;
    ax = memoryAGet16(ds, edx + 4);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 10);
    memoryASet16(ds, edi, ax);
    edi += 0x00000002;
    ax = memoryAGet16(ds, edx + 16);
    memoryASet16(ds, edi, ax);
    esi += 0x00000001;
    edi = pop32();
    edi += 0x00000006;
    if (--ecx)
        goto loc_1c5b42;
    ecx = pop32();
    edi = pop32();
    edi += 0x000001c2;
    ecx--;
    if (ecx)
        goto loc_1c5b3b;
    edx = 0x00232cd8;
    ecx = 0x000057e8;
    memoryASet32(ds, 0x2eeb90, ecx);
    memoryASet32(ds, 0x2eeb94, edx);
    memoryASet(ds, 0x232cd8, 0x00);
    memoryASet(ds, 0x232cd9, 0x4b);
    memoryASet(ds, 0x232cda, 0x00);
    memoryASet(ds, 0x232cdb, 0x4b);
    eax = 0;
    al = 0x4b;
    memoryASet32(ds, 0x1f1cb0, eax);
    memoryASet16(ds, 0x20cef3, ax);
    memoryASet32(ds, 0x1f1cb4, eax);
    memoryASet16(ds, 0x20cef7, ax);
    ebx = 0x0000004b;
    mul8(bl);
    eax += eax;
    memoryASet32(ds, 0x2eeba4, eax);
    eax += memoryAGet32(ds, 0x2eeb94);
    eax += 0x00000004;
    memoryASet32(ds, 0x2eeba0, eax);
    ecx = 0;
    eax = 0;
    ax = memoryAGet16(ds, 0x20cef7);
    cx = memoryAGet16(ds, 0x20cef3);
    edx = 0;
    mul16(cx);
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x20cefb, eax);
    sub_1b0c88();
    esi = 0x0023c76c;
    edi = 0x0029be48;
    ebx = 0x00000009;
loc_1c5c6b: // 0160:1c5c6b
    push32(edi);
    edx = 0x00000018;
loc_1c5c71: // 0160:1c5c71
    ecx = 0x00000018;
loc_1c5c76: // 0160:1c5c76
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c5c76;
    edi += 0x00000128;
    edx--;
    if (edx)
        goto loc_1c5c71;
    edi = pop32();
    edi += 0x00000018;
    ebx--;
    if (ebx)
        goto loc_1c5c6b;
    edi = 0x0029dc48;
    ebx = 0x00000006;
loc_1c5c98: // 0160:1c5c98
    push32(edi);
    edx = 0x00000018;
loc_1c5c9e: // 0160:1c5c9e
    ecx = 0x00000018;
loc_1c5ca3: // 0160:1c5ca3
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    esi++;
    edi++;
    if (--ecx)
        goto loc_1c5ca3;
    edi += 0x00000128;
    edx--;
    if (edx)
        goto loc_1c5c9e;
    edi = pop32();
    edi += 0x00000018;
    ebx--;
    if (ebx)
        goto loc_1c5c98;
    sub_1b0f0a();
    sub_1b0dfd();
    esi = 0x00204d14;
    eax = 0;
    ax = 0x0000;
    edx = memoryAGet32(ds, esi + eax);
    sub_1a85aa();
    sub_1a84d3();
    sub_1c6524();
    eax = 0;
    memoryASet(ds, 0x1f1c44, al);
    memoryASet16(ds, 0x20d2bb, ax);
    memoryASet16(ds, 0x20d2bd, ax);
    memoryASet16(ds, 0x20d2bf, ax);
    memoryASet16(ds, 0x20d2c1, ax);
    memoryASet16(ds, 0x20eda7, 0x0001);
    esi = 0x0020cf39;
    eax = 0x0020d2c7;
    eax -= esi;
    eax >>= 2;
loc_1c5d19: // 0160:1c5d19
    memoryASet32(ds, esi, 0x00000000);
    esi += 0x00000004;
    eax -= 0x00000001;
    if (eax)
        goto loc_1c5d19;
    eax = 0;
    memoryASet16(ds, 0x20d89d, ax);
    memoryASet16(ds, 0x20ed9d, 0x0001);
    memoryASet16(ds, 0x20edcf, 0x0001);
    memoryASet16(ds, 0x20edff, 0x0001);
    memoryASet16(ds, 0x20ed9f, 0x0001);
    bx = 0x00b0;
    cx = 0x000e;
    dx = 0xfff2;
    memoryASet16(ds, 0x20e7fd, 0x00a2);
    memoryASet16(ds, 0x20e801, 0xff5e);
    if ((short)memoryAGet16(ds, 0x20ee63) >= (short)0x003b)
        goto loc_1c5d99;
    bx = 0x0058;
    cx = 0x001c;
    dx = 0xffe4;
    memoryASet16(ds, 0x20e7fd, 0x0094);
    memoryASet16(ds, 0x20e801, 0xff6c);
loc_1c5d99: // 0160:1c5d99
    memoryASet16(ds, 0x20d7e7, bx);
    memoryASet16(ds, 0x20d7e9, cx);
    memoryASet16(ds, 0x20d7eb, dx);
    ax = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d7ed, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d7ef, ax);
    sub_1b29b6();
    memoryASet16(ds, 0x20ce93, 0x0004);
    eax = 0;
    memoryASet32(ds, 0x20d77b, eax);
    memoryASet16(ds, 0x20d77f, ax);
    memoryASet32(ds, 0x20d799, eax);
    memoryASet16(ds, 0x20d79d, ax);
    memoryASet(ds, 0x20d793, 0x09);
    memoryASet(ds, 0x20d794, 0x05);
    memoryASet(ds, 0x20d795, 0x09);
    memoryASet(ds, 0x20d796, 0x09);
    memoryASet(ds, 0x20d797, 0x09);
    memoryASet16(ds, 0x20d79f, ax);
    memoryASet16(ds, 0x20d7a1, 0x0057);
    memoryASet16(ds, 0x20d7d3, ax);
    ax = 0x0003;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1c5e39;
    ax = memoryAGet16(ds, 0x20ec8d);
loc_1c5e39: // 0160:1c5e39
    memoryASet16(ds, 0x20d081, ax);
    memoryASet16(ds, 0x20d083, ax);
    memoryASet16(ds, 0x20d085, ax);
    memoryASet16(ds, 0x20d087, ax);
    ax = 0x0042;
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    ax = 0x00af;
    memoryASet16(ds, 0x20d04b, ax);
    memoryASet16(ds, 0x20d04d, ax);
    memoryASet16(ds, 0x20d04f, ax);
    memoryASet16(ds, 0x20d051, ax);
    ax = 0x0001;
    memoryASet16(ds, 0x20d0ff, ax);
    memoryASet16(ds, 0x20d101, ax);
    memoryASet16(ds, 0x20d103, ax);
    memoryASet16(ds, 0x20d105, ax);
    memoryASet16(ds, 0x20d111, ax);
    memoryASet16(ds, 0x20d113, ax);
    memoryASet16(ds, 0x20d115, ax);
    memoryASet16(ds, 0x20d117, ax);
    esi = 0x0023c4fb;
    ax = 0x0000;
    bx = 0x0028;
    edx = 0x00000019;
loc_1c5ee7: // 0160:1c5ee7
    ecx = 0x00000019;
loc_1c5eec: // 0160:1c5eec
    if (memoryAGet(ds, esi) == 0x00)
        goto loc_1c5f04;
    esi++;
    bx += 0x0060;
    if (--ecx)
        goto loc_1c5eec;
    bx -= 0x0960;
    ax += 0x0060;
    edx--;
    if (edx)
        goto loc_1c5ee7;
loc_1c5f04: // 0160:1c5f04
    memoryASet16(ds, 0x20cf4f, ax);
    memoryASet16(ds, 0x20cf53, ax);
    memoryASet16(ds, 0x20cf61, bx);
    memoryASet16(ds, 0x20cf63, bx);
    ax += 0x0028;
    memoryASet16(ds, 0x20cf51, ax);
    memoryASet16(ds, 0x20cf55, ax);
    bx += 0x0028;
    memoryASet16(ds, 0x20cf65, bx);
    memoryASet16(ds, 0x20cf67, bx);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    ax -= 0x007e;
    if ((short)ax >= 0)
        goto loc_1c5f56;
    ax = 0;
loc_1c5f56: // 0160:1c5f56
    bx -= 0x006e;
    if ((short)bx >= 0)
        goto loc_1c5f5f;
    bx = 0;
loc_1c5f5f: // 0160:1c5f5f
    memoryASet16(ds, 0x20cf23, ax);
    memoryASet16(ds, 0x20cf25, bx);
    esi = 0x00204a3e;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    esi = memoryAGet32(ds, esi + eax);
    memoryASet32(ds, 0x20d85d, esi);
    bp = memoryAGet16(ds, esi + 10);
    memoryASet16(ds, 0x20e7cf, bp);
    bp = memoryAGet16(ds, esi + 12);
    memoryASet16(ds, 0x20e7d1, bp);
    bp = memoryAGet16(ds, esi + 14);
    memoryASet16(ds, 0x20e7d3, bp);
    bp = memoryAGet16(ds, esi + 16);
    memoryASet16(ds, 0x20e7d5, bp);
    memoryASet16(ds, 0x20e7d7, 0x0000);
    ax = 0;
    al = memoryAGet(ds, 0x23c4f3);
    ax += 0x0005;
    memoryASet16(ds, 0x20d003, ax);
    memoryASet16(ds, 0x20d005, ax);
    memoryASet16(ds, 0x20d007, ax);
    memoryASet16(ds, 0x20d009, ax);
    ax = 0;
    al = memoryAGet(ds, 0x23c4f4);
    ax >>= 1;
    ax++;
    bl = memoryAGet(ds, 0x23c4f0);
    if (bl != 0x01)
        goto loc_1c5ffb;
    ax = 0x0001;
loc_1c5ffb: // 0160:1c5ffb
    memoryASet16(ds, 0x20d015, ax);
    memoryASet16(ds, 0x20d017, ax);
    memoryASet16(ds, 0x20d019, ax);
    memoryASet16(ds, 0x20d01b, ax);
    ax = 0;
    al = memoryAGet(ds, 0x23c4f4);
    ax <<= 1;
    bl = memoryAGet(ds, 0x23c4f0);
    if (bl != 0x01)
        goto loc_1c602d;
    ax = 0x0002;
loc_1c602d: // 0160:1c602d
    memoryASet16(ds, 0x20d027, ax);
    memoryASet16(ds, 0x20d029, ax);
    memoryASet16(ds, 0x20d02b, ax);
    memoryASet16(ds, 0x20d02d, ax);
    ax = memoryAGet16(ds, 0x23c4f1);
    bx = ax;
    bx >>= 2;
    ax += bx;
    memoryASet16(ds, 0x20cff1, ax);
    memoryASet16(ds, 0x20cff3, ax);
    memoryASet16(ds, 0x20cff5, ax);
    memoryASet16(ds, 0x20cff7, ax);
    ax = 0x0003;
    memoryASet16(ds, 0x20cfdf, ax);
    memoryASet16(ds, 0x20cfe1, ax);
    memoryASet16(ds, 0x20cfe3, ax);
    memoryASet16(ds, 0x20cfe5, ax);
    memoryASet16(ds, 0x20cf3d, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0005);
    memoryASet16(ds, 0x20cf41, 0x0006);
    memoryASet16(ds, 0x20cf43, 0x0007);
    eax = 0;
    memoryASet16(ds, 0x20d217, ax);
    memoryASet16(ds, 0x20d219, ax);
    memoryASet16(ds, 0x20d21b, ax);
    memoryASet16(ds, 0x20d21d, ax);
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0001)
        goto loc_1c6205;
    if (ax == 0x0002)
        goto loc_1c61e5;
    if (ax == 0x0003)
        goto loc_1c6180;
    memoryASet16(ds, 0x20d7d3, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0002);
    memoryASet16(ds, 0x20cf41, 0x0003);
    memoryASet16(ds, 0x20cf43, 0x0004);
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - 0x000f);
    memoryASet16(ds, 0x20cf51, memoryAGet16(ds, 0x20cf51) - 0x001e);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf67, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf55, ax);
    memoryASet16(ds, 0x20cf53, memoryAGet16(ds, 0x20cf53) + 0x0032);
    memoryASet16(ds, 0x20cf55, memoryAGet16(ds, 0x20cf55) + 0x004b);
    ax = 0x0006;
    memoryASet16(ds, 0x20ce95, ax);
    memoryASet16(ds, 0x20ce97, ax);
    memoryASet16(ds, 0x20ce99, ax);
    memoryASet16(ds, 0x20ce9b, ax);
    goto loc_1c6205;
loc_1c6180: // 0160:1c6180
    memoryASet16(ds, 0x20d7d3, 0x0001);
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) - 0x000a);
    memoryASet16(ds, 0x20cf51, memoryAGet16(ds, 0x20cf51) - 0x0014);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    memoryASet16(ds, 0x20cf53, memoryAGet16(ds, 0x20cf53) + 0x003c);
    memoryASet16(ds, 0x20cf3f, 0x0002);
    memoryASet16(ds, 0x20cf41, 0x0003);
    ax = 0x0004;
    memoryASet16(ds, 0x20ce95, ax);
    memoryASet16(ds, 0x20ce97, ax);
    memoryASet16(ds, 0x20ce99, ax);
    eax = 0;
    goto loc_1c61ff;
loc_1c61e5: // 0160:1c61e5
    memoryASet16(ds, 0x20d7d3, 0x0001);
    memoryASet16(ds, 0x20cf3f, 0x0002);
    eax = 0;
    memoryASet16(ds, 0x20cf41, ax);
loc_1c61ff: // 0160:1c61ff
    memoryASet16(ds, 0x20cf43, ax);
loc_1c6205: // 0160:1c6205
    eax = 0;
    memoryASet16(ds, 0x20cf45, ax);
    memoryASet16(ds, 0x20cf47, ax);
    memoryASet16(ds, 0x20cf49, ax);
    memoryASet16(ds, 0x20cf4b, ax);
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1c627c;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1c627c;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1c627c;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    cx = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20cf4f, cx);
    cx = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20cf61, cx);
    memoryASet16(ds, 0x20cf53, ax);
    memoryASet16(ds, 0x20cf65, bx);
loc_1c627c: // 0160:1c627c
    eax = 0;
    memoryASet32(ds, 0x20d773, eax);
    memoryASet32(ds, 0x20d777, eax);
    memoryASet(ds, 0x20d773, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1c62c2;
    memoryASet(ds, 0x20d774, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1c62c2;
    memoryASet(ds, 0x20d775, 0x01);
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1c62c2;
    memoryASet(ds, 0x20d776, 0x01);
loc_1c62c2: // 0160:1c62c2
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1c630e;
    eax = 0;
    memoryASet16(ds, 0x20cf3f, ax);
    memoryASet16(ds, 0x20cf41, ax);
    memoryASet16(ds, 0x20cf43, ax);
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + 0x0014);
    memoryASet16(ds, 0x20cf41, 0x0001);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf65, ax);
loc_1c630e: // 0160:1c630e
    eax = 0;
    memoryASet16(ds, 0x20d2b9, ax);
    memoryASet16(ds, 0x20d7a9, ax);
    memoryASet16(ds, 0x20d7ad, ax);
    memoryASet16(ds, 0x20d7af, ax);
    esi = 0x0020d221;
    ecx = 0x00000008;
loc_1c6332: // 0160:1c6332
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1c6332;
    memoryASet16(ds, 0x20d7ab, ax);
    memoryASet16(ds, 0x20d7a3, ax);
    memoryASet16(ds, 0x20d7a7, ax);
    memoryASet16(ds, 0x20d7a5, ax);
    memoryASet16(ds, 0x20d7b1, ax);
    memoryASet16(ds, 0x20d7b5, ax);
    memoryASet16(ds, 0x20d7b7, ax);
    esi = 0x0020d251;
    ecx = 0x00000030;
loc_1c636e: // 0160:1c636e
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1c636e;
    esi = 0x0020d36d;
    ecx = 0x00000100;
loc_1c6380: // 0160:1c6380
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1c6380;
    memoryASet16(ds, 0x20d16d, 0x0000);
    memoryASet16(ds, 0x20d16f, 0x0002);
    memoryASet16(ds, 0x20d171, 0x0004);
    memoryASet16(ds, 0x20d173, 0x0006);
    eax = 0;
    memoryASet16(ds, 0x20d803, ax);
    memoryASet32(ds, 0x20d7fb, eax);
    memoryASet32(ds, 0x20d7ff, eax);
    memoryASet16(ds, 0x20d7f7, 0xffb0);
    memoryASet16(ds, 0x20d7f9, 0x0050);
    memoryASet16(ds, 0x20d825, 0x0005);
    memoryASet16(ds, 0x20d869, ax);
    memoryASet16(ds, 0x20d861, ax);
    ax = memoryAGet16(ds, 0x20cf23);
    memoryASet16(ds, 0x20d881, ax);
    ax = memoryAGet16(ds, 0x20cf25);
    memoryASet16(ds, 0x20d883, ax);
    eax = 0;
    memoryASet16(ds, 0x20d885, ax);
    memoryASet16(ds, 0x20d887, ax);
    memoryASet16(ds, 0x20d897, ax);
    memoryASet(ds, 0x20d88b, 0x00);
    memoryASet(ds, 0x20d88d, 0x00);
    memoryASet16(ds, 0x20d88f, 0x003c);
    memoryASet16(ds, 0x20d891, 0x003c);
    memoryASet16(ds, 0x20d893, 0x003c);
    memoryASet16(ds, 0x20d895, 0x003c);
    memoryASet16(ds, 0x20dcc3, 0xffff);
    memoryASet16(ds, 0x20d8bd, 0xffff);
    memoryASet(ds, 0x20d8c0, 0x00);
    memoryASet(ds, 0x20d8bf, 0x00);
    esi = 0x0020dcc5;
    ecx = 0x000001ff;
loc_1c646d: // 0160:1c646d
    memoryASet16(ds, esi, 0xffff);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1c646d;
    eax = 0;
    memoryASet16(ds, 0x20ee3b, ax);
    memoryASet16(ds, 0x20ed97, ax);
    memoryASet16(ds, 0x20ed99, ax);
    memoryASet16(ds, 0x20ed9b, ax);
    eax = 0;
    memoryASet16(ds, 0x20ed95, ax);
    memoryASet16(ds, 0x20ed93, ax);
    memoryASet32(ds, 0x20c84e, 0xe7190345);
    memoryASet16(ds, 0x20c830, ax);
    memoryASet16(ds, 0x20c82e, ax);
    memoryASet16(ds, 0x20d87f, ax);
    memoryASet16(ds, 0x20eddd, ax);
    memoryASet16(ds, 0x20ede1, ax);
    memoryASet16(ds, 0x20ede5, ax);
    memoryASet16(ds, 0x20ede7, ax);
    memoryASet16(ds, 0x20ede9, ax);
    memoryASet16(ds, 0x20ee31, ax);
    memoryASet16(ds, 0x20ee35, ax);
    memoryASet16(ds, 0x20ee47, ax);
    memoryASet16(ds, 0x20ee37, 0x008c);
    memoryASet16(ds, 0x20e7df, ax);
    memoryASet16(ds, 0x20e7e1, ax);
    memoryASet16(ds, 0x20e7e3, ax);
    memoryASet16(ds, 0x20e7e5, 0x0008);
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1c6523;
    memoryASet16(ds, 0x20e7e5, 0x0010);
loc_1c6523: // 0160:1c6523
    esp += 4;
    return;
}
void sub_1c6524() // 0160:1c6524 +long
{
    esp -= 4;
    esi = 0x002ee384;
    memoryASet32(ds, 0x20d81d, esi);
    ecx = 0x000001f4;
loc_1c6534: // 0160:1c6534
    memoryASet32(ds, esi, 0xffffffff);
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c6534;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00057e40;
    ecx = 0x00001d4c;
loc_1c6550: // 0160:1c6550
    memoryASet32(ds, esi, 0xffffffff);
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c6550;
    esi = 0x0023c4fb;
    ax = 0x0028;
    edx = 0x00000019;
loc_1c6569: // 0160:1c6569
    bx = 0x0028;
    ecx = 0x00000019;
loc_1c6572: // 0160:1c6572
    if (memoryAGet(ds, esi) == 0x00)
        goto loc_1c6585;
    bx += 0x0060;
    esi++;
    if (--ecx)
        goto loc_1c6572;
    ax += 0x0060;
    edx--;
    if (edx)
        goto loc_1c6569;
loc_1c6585: // 0160:1c6585
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00057e40;
    ebp = memoryAGet32(ds, 0x20b800);
    ebp += 0x00058520;
    edx = memoryAGet32(ds, 0x20b800);
    edx += 0x00058c00;
    memoryASet16(ds, 0x20ceb5, 0x0000);
    cx = memoryAGet16(ds, 0x20ee63);
    if ((short)cx < (short)0x003b)
        goto loc_1c65ca;
    memoryASet16(ds, 0x20ceb7, 0x00af);
    goto loc_1c65d3;
loc_1c65ca: // 0160:1c65ca
    memoryASet16(ds, 0x20ceb7, 0x0057);
loc_1c65d3: // 0160:1c65d3
    cx = 0x0000;
loc_1c65d7: // 0160:1c65d7
    sub_1c6a11();
loc_1c65dc: // 0160:1c65dc
    esi -= 0x00000001;
    bx -= 0x0060;
    ch = memoryAGet(ds, esi);
    if (!ch)
        goto loc_1c6774;
    if (ch == 0x03)
        goto loc_1c66c0;
    if (ch == 0x04)
        goto loc_1c6726;
    if (ch != 0x07)
        goto loc_1c6682;
    push32(edi);
    push32(edx);
    edi = memoryAGet32(ds, 0x20d81d);
    dx = 0;
    dl = cl;
    dx -= 0x0002;
    if ((short)dx >= 0)
        goto loc_1c661a;
    dx = 0;
loc_1c661a: // 0160:1c661a
    if ((short)memoryAGet16(ds, 0x20ee63) >= (short)0x003b)
        goto loc_1c6633;
    dx <<= 1;
    memoryASet16(ds, edi, dx);
    memoryASet16(ds, edi + 2, dx);
    dx >>= 1;
    goto loc_1c663a;
loc_1c6633: // 0160:1c6633
    memoryASet16(ds, edi, dx);
    memoryASet16(ds, edi + 2, dx);
loc_1c663a: // 0160:1c663a
    push32(eax);
    push32(ebx);
    ax -= 0x0050;
    memoryASet16(ds, edi + 4, ax);
    bx += 0x00c8;
    memoryASet16(ds, edi + 6, bx);
    ax += 0x00a0;
    memoryASet16(ds, edi + 8, ax);
    memoryASet16(ds, edi + 10, bx);
    ch = 0x00;
    if (memoryAGet16(ds, 0x20ee63) >= 0x003b)
        goto loc_1c6673;
    cl += cl;
    memoryASet16(ds, edi + 12, cx);
    cl >>= 1;
    goto loc_1c6677;
loc_1c6673: // 0160:1c6673
    memoryASet16(ds, edi + 12, cx);
loc_1c6677: // 0160:1c6677
    ebx = pop32();
    eax = pop32();
    memoryASet32(ds, 0x20d81d, memoryAGet32(ds, 0x20d81d) + 0x0000000e);
    edx = pop32();
    edi = pop32();
loc_1c6682: // 0160:1c6682
    if (ch != 0x06)
        goto loc_1c66b7;
    push32(edi);
    push32(edx);
    edi = memoryAGet32(ds, 0x20d81d);
    edi -= 0x0000000e;
    dx = 0;
    dl = cl;
    dx += 0x0005;
    if ((short)memoryAGet16(ds, 0x20ee63) >= (short)0x003b)
        goto loc_1c66b1;
    dx <<= 1;
    memoryASet16(ds, edi + 2, dx);
    dx >>= 1;
    goto loc_1c66b5;
loc_1c66b1: // 0160:1c66b1
    memoryASet16(ds, edi + 2, dx);
loc_1c66b5: // 0160:1c66b5
    edx = pop32();
    edi = pop32();
loc_1c66b7: // 0160:1c66b7
    ch = 0x00;
    cl++;
    goto loc_1c65d7;
loc_1c66c0: // 0160:1c66c0
    ch = 0x01;
    cl++;
    sub_1c6ba2();
loc_1c66c9: // 0160:1c66c9
    esi += 0x00000019;
    ax += 0x0060;
    ch = memoryAGet(ds, esi);
    if (ch == 0x03)
        goto loc_1c670d;
    if (ch == 0x04)
        goto loc_1c66e7;
    ch = 0x02;
    cl++;
    sub_1c6ad8();
    goto loc_1c66c9;
loc_1c66e7: // 0160:1c66e7
    ch = 0x03;
    cl++;
    sub_1c6db2();
loc_1c66f0: // 0160:1c66f0
    esi++;
    bx += 0x0060;
    ch = memoryAGet(ds, esi);
    if (ch == 0x03)
        goto loc_1c6734;
    if (ch == 0x04)
        goto loc_1c671b;
    ch = 0x04;
    cl++;
    sub_1c6a11();
    goto loc_1c66f0;
    // gap 1 bytes
loc_1c670d: // 0160:1c670d
    ch = 0x01;
    cl++;
    sub_1c6caa();
    goto loc_1c65dc;
loc_1c671b: // 0160:1c671b
    ch = 0x03;
    cl++;
    sub_1c6eba();
    goto loc_1c66c9;
loc_1c6726: // 0160:1c6726
    ch = 0x07;
    cl++;
    sub_1c6db2();
    goto loc_1c673d;
    // gap 3 bytes
loc_1c6734: // 0160:1c6734
    ch = 0x05;
    cl++;
    sub_1c6caa();
loc_1c673d: // 0160:1c673d
    esi -= 0x00000019;
    ax -= 0x0060;
    ch = memoryAGet(ds, esi);
    if (ch == 0x03)
        goto loc_1c675b;
    if (ch == 0x04)
        goto loc_1c6766;
    ch = 0x06;
    cl++;
    sub_1c6ad8();
    goto loc_1c673d;
loc_1c675b: // 0160:1c675b
    ch = 0x05;
    cl++;
    sub_1c6ba2();
    goto loc_1c66f0;
loc_1c6766: // 0160:1c6766
    ch = 0x07;
    cl++;
    sub_1c6eba();
    goto loc_1c65dc;
loc_1c6774: // 0160:1c6774
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005dfe8;
    memoryASet32(ds, 0x20d76f, esi);
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005a550;
    dx = 0x0000;
    ecx = 0x0000012c;
loc_1c679b: // 0160:1c679b
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00057e40;
loc_1c67a7: // 0160:1c67a7
    if (memoryAGet16(ds, esi) == 0xffff)
        goto loc_1c67b9;
    if (dx == memoryAGet16(ds, esi + 2))
        goto loc_1c67c1;
    esi += 0x00000008;
    goto loc_1c67a7;
loc_1c67b9: // 0160:1c67b9
    dx += 0x0008;
    if (--ecx)
        goto loc_1c679b;
    goto loc_1c67d3;
loc_1c67c1: // 0160:1c67c1
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    goto loc_1c67a7;
loc_1c67d3: // 0160:1c67d3
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005ac30;
    dx = 0x0000;
    ecx = 0x0000012c;
loc_1c67e8: // 0160:1c67e8
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00058520;
loc_1c67f4: // 0160:1c67f4
    if (memoryAGet16(ds, esi) == 0xffff)
        goto loc_1c6806;
    if (dx == memoryAGet16(ds, esi + 2))
        goto loc_1c680e;
    esi += 0x00000008;
    goto loc_1c67f4;
loc_1c6806: // 0160:1c6806
    dx += 0x0008;
    if (--ecx)
        goto loc_1c67e8;
    goto loc_1c6820;
loc_1c680e: // 0160:1c680e
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    edi += 0x00000008;
    esi += 0x00000008;
    goto loc_1c67f4;
loc_1c6820: // 0160:1c6820
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005b310;
    dx = 0x0000;
    ecx = 0x0000012c;
loc_1c6835: // 0160:1c6835
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x00058c00;
loc_1c6841: // 0160:1c6841
    if (memoryAGet16(ds, esi) == 0xffff)
        goto loc_1c6853;
    if (dx == memoryAGet16(ds, esi + 2))
        goto loc_1c685b;
    esi += 0x0000000a;
    goto loc_1c6841;
loc_1c6853: // 0160:1c6853
    dx += 0x0008;
    if (--ecx)
        goto loc_1c6835;
    goto loc_1c6875;
loc_1c685b: // 0160:1c685b
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    ax = memoryAGet16(ds, esi + 8);
    memoryASet16(ds, edi + 8, ax);
    edi += 0x0000000a;
    esi += 0x0000000a;
    goto loc_1c6841;
loc_1c6875: // 0160:1c6875
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005a550;
    dx = 0;
loc_1c6884: // 0160:1c6884
    ax = memoryAGet16(ds, esi + 6);
    if (ax == 0xffff)
        goto loc_1c68bb;
    bx = memoryAGet16(ds, esi + 14);
    if (bx == 0xffff)
        goto loc_1c68bb;
    if ((short)ax <= (short)bx)
        goto loc_1c68b6;
    eax = memoryAGet32(ds, esi);
    ebx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, esi, ebx);
    memoryASet32(ds, esi + 8, eax);
    eax = memoryAGet32(ds, esi + 4);
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 12, eax);
    dx++;
loc_1c68b6: // 0160:1c68b6
    esi += 0x00000008;
    goto loc_1c6884;
loc_1c68bb: // 0160:1c68bb
    if (dx)
        goto loc_1c6875;
loc_1c68c0: // 0160:1c68c0
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005a550;
    dx = 0;
loc_1c68cf: // 0160:1c68cf
    ax = memoryAGet16(ds, esi + 6);
    if (ax == 0xffff)
        goto loc_1c6910;
    bx = memoryAGet16(ds, esi + 14);
    if (bx == 0xffff)
        goto loc_1c6910;
    if (ax != bx)
        goto loc_1c690b;
    ax = memoryAGet16(ds, esi + 2);
    if ((short)ax <= (short)memoryAGet16(ds, esi + 10))
        goto loc_1c690b;
    eax = memoryAGet32(ds, esi);
    ebx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, esi, ebx);
    memoryASet32(ds, esi + 8, eax);
    eax = memoryAGet32(ds, esi + 4);
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 12, eax);
    dx++;
loc_1c690b: // 0160:1c690b
    esi += 0x00000008;
    goto loc_1c68cf;
loc_1c6910: // 0160:1c6910
    if (dx)
        goto loc_1c68c0;
loc_1c6915: // 0160:1c6915
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005ac30;
    dx = 0;
loc_1c6924: // 0160:1c6924
    ax = memoryAGet16(ds, esi + 2);
    if (ax == 0xffff)
        goto loc_1c6965;
    bx = memoryAGet16(ds, esi + 10);
    if (bx == 0xffff)
        goto loc_1c6965;
    if (ax != bx)
        goto loc_1c6960;
    ax = memoryAGet16(ds, esi + 6);
    if ((short)ax <= (short)memoryAGet16(ds, esi + 14))
        goto loc_1c6960;
    eax = memoryAGet32(ds, esi);
    ebx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, esi, ebx);
    memoryASet32(ds, esi + 8, eax);
    eax = memoryAGet32(ds, esi + 4);
    ebx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, esi + 4, ebx);
    memoryASet32(ds, esi + 12, eax);
    dx++;
loc_1c6960: // 0160:1c6960
    esi += 0x00000008;
    goto loc_1c6924;
loc_1c6965: // 0160:1c6965
    if (dx)
        goto loc_1c6915;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x0005dfec;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005a550;
    dx = 0;
loc_1c6985: // 0160:1c6985
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    dx += 0x0008;
    esi += 0x00000008;
    edi += 0x00000008;
    if (memoryAGet16(ds, esi) != 0xffff)
        goto loc_1c6985;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005dfe8;
    memoryASet16(ds, esi, dx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005ac30;
loc_1c69bb: // 0160:1c69bb
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    dx += 0x0008;
    esi += 0x00000008;
    edi += 0x00000008;
    if (memoryAGet16(ds, esi) != 0xffff)
        goto loc_1c69bb;
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005dfea;
    memoryASet16(ds, esi, dx);
    esi = memoryAGet32(ds, 0x20b800);
    esi += 0x0005b310;
loc_1c69f1: // 0160:1c69f1
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, eax);
    eax = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, eax);
    ax = memoryAGet16(ds, esi + 8);
    memoryASet16(ds, edi + 8, ax);
    esi += 0x0000000a;
    edi += 0x0000000a;
    if (memoryAGet16(ds, esi) != 0xffff)
        goto loc_1c69f1;
    esp += 4;
}
void sub_1c6a11() // 0160:1c6a11 +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6ab4;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6a7e;
    if (!ch)
        goto loc_1c6a5a;
    bx -= 0x0010;
    sub_1c6ab4();
    cl++;
    bx += 0x0020;
    sub_1c6ab4();
    cl++;
    bx += 0x0020;
    sub_1c6ab4();
    bx -= 0x0030;
    esp += 4;
    return;
loc_1c6a5a: // 0160:1c6a5a
    bx += 0x0030;
    sub_1c6ab4();
    cl++;
    bx -= 0x0020;
    sub_1c6ab4();
    cl++;
    bx -= 0x0020;
    sub_1c6ab4();
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6a7e: // 0160:1c6a7e
    if (!ch)
        goto loc_1c6a9b;
    bx -= 0x0010;
    sub_1c6ab4();
    cl++;
    bx += 0x0020;
    sub_1c6ab4();
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6a9b: // 0160:1c6a9b
    bx += 0x0010;
    sub_1c6ab4();
    cl++;
    bx -= 0x0020;
    sub_1c6ab4();
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6ab4: // 0160:1c6ab4
    push32(eax);
    push32(ebx);
    bx &= 0xffe0;
    ax -= 0x0050;
    memoryASet16(ds, edi, cx);
    memoryASet16(ds, edi + 2, ax);
    ax += 0x00a0;
    memoryASet16(ds, edi + 4, ax);
    memoryASet16(ds, edi + 6, bx);
    edi += 0x00000008;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6ab4() // 0160:1c6ab4 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    bx &= 0xffe0;
    ax -= 0x0050;
    memoryASet16(ds, edi, cx);
    memoryASet16(ds, edi + 2, ax);
    ax += 0x00a0;
    memoryASet16(ds, edi + 4, ax);
    memoryASet16(ds, edi + 6, bx);
    edi += 0x00000008;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6ad8() // 0160:1c6ad8 +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6b7d;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6b46;
    if (ch == 0x02)
        goto loc_1c6b22;
    ax += 0x0030;
    sub_1c6b7d();
    cl++;
    ax -= 0x0020;
    sub_1c6b7d();
    cl++;
    ax -= 0x0020;
    sub_1c6b7d();
    ax += 0x0010;
    esp += 4;
    return;
loc_1c6b22: // 0160:1c6b22
    ax -= 0x0010;
    sub_1c6b7d();
    cl++;
    ax += 0x0020;
    sub_1c6b7d();
    cl++;
    ax += 0x0020;
    sub_1c6b7d();
    ax -= 0x0030;
    esp += 4;
    return;
loc_1c6b46: // 0160:1c6b46
    if (ch == 0x02)
        goto loc_1c6b64;
    ax += 0x0010;
    sub_1c6b7d();
    cl++;
    ax -= 0x0020;
    sub_1c6b7d();
    ax += 0x0010;
    esp += 4;
    return;
loc_1c6b64: // 0160:1c6b64
    ax -= 0x0010;
    sub_1c6b7d();
    cl++;
    ax += 0x0020;
    sub_1c6b7d();
    ax -= 0x0010;
    esp += 4;
    return;
loc_1c6b7d: // 0160:1c6b7d
    push32(eax);
    push32(ebx);
    ax &= 0xffe0;
    bx += 0x0050;
    memoryASet16(ss, ebp, cx);
    memoryASet16(ss, ebp + 2, ax);
    memoryASet16(ss, ebp + 4, bx);
    bx -= 0x00a0;
    memoryASet16(ss, ebp + 6, bx);
    ebp += 0x00000008;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6b7d() // 0160:1c6b7d +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    ax &= 0xffe0;
    bx += 0x0050;
    memoryASet16(ss, ebp, cx);
    memoryASet16(ss, ebp + 2, ax);
    memoryASet16(ss, ebp + 4, bx);
    bx -= 0x00a0;
    memoryASet16(ss, ebp + 6, bx);
    ebp += 0x00000008;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6ba2() // 0160:1c6ba2 +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6c7f;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6c30;
    if (ch == 0x01)
        goto loc_1c6bfc;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6c7f();
    cl++;
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6c7f();
    cl++;
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6c7f();
    ax += 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6bfc: // 0160:1c6bfc
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6c7f();
    cl++;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6c7f();
    cl++;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6c7f();
    ax -= 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6c30: // 0160:1c6c30
    if (ch == 0x01)
        goto loc_1c6c5a;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6c7f();
    cl++;
    ax -= 0x0020;
    bx += 0x0020;
    sub_1c6c7f();
    ax += 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6c5a: // 0160:1c6c5a
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6c7f();
    cl++;
    ax += 0x0020;
    bx -= 0x0020;
    sub_1c6c7f();
    ax -= 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6c7f: // 0160:1c6c7f
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0028;
    bx -= 0x0028;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx += 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6c7f() // 0160:1c6c7f +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0028;
    bx -= 0x0028;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx += 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6caa() // 0160:1c6caa +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6d87;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6d38;
    if (ch == 0x01)
        goto loc_1c6d04;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6d87();
    cl++;
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6d87();
    cl++;
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6d87();
    ax += 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6d04: // 0160:1c6d04
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6d87();
    cl++;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6d87();
    cl++;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6d87();
    ax -= 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6d38: // 0160:1c6d38
    if (ch == 0x01)
        goto loc_1c6d62;
    ax += 0x0010;
    bx -= 0x0010;
    sub_1c6d87();
    cl++;
    ax -= 0x0020;
    bx += 0x0020;
    sub_1c6d87();
    ax += 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6d62: // 0160:1c6d62
    ax -= 0x0010;
    bx += 0x0010;
    sub_1c6d87();
    cl++;
    ax += 0x0020;
    bx -= 0x0020;
    sub_1c6d87();
    ax -= 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6d87: // 0160:1c6d87
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0058;
    bx -= 0x0058;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx += 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6d87() // 0160:1c6d87 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0058;
    bx -= 0x0058;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx += 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6db2() // 0160:1c6db2 +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6e8f;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6e40;
    if (ch == 0x03)
        goto loc_1c6e0c;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6e8f();
    cl++;
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6e8f();
    cl++;
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6e8f();
    ax += 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6e0c: // 0160:1c6e0c
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6e8f();
    cl++;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6e8f();
    cl++;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6e8f();
    ax -= 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6e40: // 0160:1c6e40
    if (ch == 0x03)
        goto loc_1c6e6a;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6e8f();
    cl++;
    ax -= 0x0020;
    bx -= 0x0020;
    sub_1c6e8f();
    ax += 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6e6a: // 0160:1c6e6a
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6e8f();
    cl++;
    ax += 0x0020;
    bx += 0x0020;
    sub_1c6e8f();
    ax -= 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6e8f: // 0160:1c6e8f
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0058;
    bx += 0x0058;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx -= 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6e8f() // 0160:1c6e8f +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0058;
    bx += 0x0058;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx -= 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6eba() // 0160:1c6eba +long
{
    esp -= 4;
    sub_1c6fc2();
    if (memoryAGet16(ds, 0x20ceb3) == 0x0001)
        goto loc_1c6f97;
    if (memoryAGet16(ds, 0x20ceb3) == 0x0002)
        goto loc_1c6f48;
    if (ch == 0x03)
        goto loc_1c6f14;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6f97();
    cl++;
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6f97();
    cl++;
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6f97();
    ax += 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6f14: // 0160:1c6f14
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6f97();
    cl++;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6f97();
    cl++;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6f97();
    ax -= 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6f48: // 0160:1c6f48
    if (ch == 0x03)
        goto loc_1c6f72;
    ax += 0x0010;
    bx += 0x0010;
    sub_1c6f97();
    cl++;
    ax -= 0x0020;
    bx -= 0x0020;
    sub_1c6f97();
    ax += 0x0010;
    bx += 0x0010;
    esp += 4;
    return;
loc_1c6f72: // 0160:1c6f72
    ax -= 0x0010;
    bx -= 0x0010;
    sub_1c6f97();
    cl++;
    ax += 0x0020;
    bx += 0x0020;
    sub_1c6f97();
    ax -= 0x0010;
    bx -= 0x0010;
    esp += 4;
    return;
loc_1c6f97: // 0160:1c6f97
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0028;
    bx += 0x0028;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx -= 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6f97() // 0160:1c6f97 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    memoryASet16(ds, edx, cx);
    ax -= 0x0028;
    bx += 0x0028;
    memoryASet16(ds, edx + 2, ax);
    memoryASet16(ds, edx + 4, bx);
    ax += 0x0078;
    bx -= 0x0078;
    memoryASet16(ds, edx + 6, ax);
    memoryASet16(ds, edx + 8, bx);
    edx += 0x0000000a;
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6fc2() // 0160:1c6fc2 +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    push32(ecx);
    ax = memoryAGet16(ds, 0x20ee63);
    ax -= memoryAGet16(ds, 0x20ceb5);
    bx = memoryAGet16(ds, 0x20ceb7);
    bl -= cl;
    cx = 0;
loc_1c6fde: // 0160:1c6fde
    cx++;
    bx -= ax;
    if ((short)bx >= 0)
        goto loc_1c6fde;
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + 1);
    memoryASet16(ds, 0x20ceb3, cx);
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1c6ff7() // 0160:1c6ff7 +long
{
    esp -= 4;
    memoryASet16(ds, 0x224646, 0x0001);
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    push32(eax);
    push32(ebx);
    sub_1bb00d();
    ebx = pop32();
    eax = pop32();
    cx = memoryAGet16(ds, 0x224656);
    dx = memoryAGet16(ds, 0x224658);
    ax -= cx;
    bx -= dx;
    memoryASet16(ds, 0x20ee71, memoryAGet16(ds, 0x20ee71) + ax);
    memoryASet16(ds, 0x20ee73, memoryAGet16(ds, 0x20ee73) + bx);
    memoryASet16(ds, 0x224656, 0x0064);
    memoryASet16(ds, 0x224658, 0x0064);
    sub_1bafe1();
    ax = memoryAGet16(ds, 0x20ee73);
    if (!ax)
        goto loc_1c70b4;
    if ((short)ax < 0)
        goto loc_1c7085;
    if ((short)ax < (short)0x0030)
        goto loc_1c70b4;
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1c707a;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x01);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfe);
loc_1c707a: // 0160:1c707a
    memoryASet16(ds, 0x20ee73, 0x0000);
    goto loc_1c70b4;
loc_1c7085: // 0160:1c7085
    ax = -ax;
    if ((short)ax < (short)0x0030)
        goto loc_1c70b4;
    ax = memoryAGet16(ds, 0x20ee75);
    if (memoryAGet16(ds, 0x20e82f) == ax)
        goto loc_1c707a;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x02);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfd);
    memoryASet16(ds, 0x20ee73, 0x0000);
loc_1c70b4: // 0160:1c70b4
    ax = memoryAGet16(ds, 0x20ee71);
    if (!ax)
        goto loc_1c7100;
    if ((short)ax < 0)
        goto loc_1c70e0;
    if ((short)ax < (short)0x0030)
        goto loc_1c7100;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfb);
    memoryASet16(ds, 0x20ee71, 0x0000);
    goto loc_1c7100;
loc_1c70e0: // 0160:1c70e0
    ax = -ax;
    if ((short)ax < (short)0x0030)
        goto loc_1c7100;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xf7);
    memoryASet16(ds, 0x20ee71, 0x0000);
loc_1c7100: // 0160:1c7100
    ax = memoryAGet16(ds, 0x22465a);
    if (!ax)
        goto loc_1c7112;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c7112: // 0160:1c7112
    esp += 4;
    return;
}
void sub_1c7113() // 0160:1c7113 +long
{
    esp -= 4;
    memoryASet16(ds, 0x224646, 0x0001);
    ax = memoryAGet16(ds, 0x224656);
    bx = memoryAGet16(ds, 0x224658);
    push32(eax);
    push32(ebx);
    sub_1bb00d();
    ebx = pop32();
    eax = pop32();
    cx = memoryAGet16(ds, 0x224656);
    dx = memoryAGet16(ds, 0x224658);
    ax -= cx;
    bx -= dx;
    memoryASet16(ds, 0x20ee71, memoryAGet16(ds, 0x20ee71) + ax);
    memoryASet16(ds, 0x20ee73, memoryAGet16(ds, 0x20ee73) + bx);
    memoryASet16(ds, 0x224656, 0x0064);
    memoryASet16(ds, 0x224658, 0x0064);
    sub_1bafe1();
    ax = memoryAGet16(ds, 0x20ee73);
    if (!ax)
        goto loc_1c71cb;
    if ((short)ax < 0)
        goto loc_1c71a1;
    if ((short)ax < (short)0x0060)
        goto loc_1c71cb;
    if ((short)memoryAGet16(ds, 0x20e82f) < (short)0x0005)
        goto loc_1c7196;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x01);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfe);
loc_1c7196: // 0160:1c7196
    memoryASet16(ds, 0x20ee73, 0x0000);
    goto loc_1c71cb;
loc_1c71a1: // 0160:1c71a1
    ax = -ax;
    if ((short)ax < (short)0x0060)
        goto loc_1c71cb;
    if ((short)memoryAGet16(ds, 0x20e82f) >= (short)0x0005)
        goto loc_1c7196;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x02);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfd);
    memoryASet16(ds, 0x20ee73, 0x0000);
loc_1c71cb: // 0160:1c71cb
    ax = memoryAGet16(ds, 0x20ee71);
    if (!ax)
        goto loc_1c723f;
    if ((short)ax < 0)
        goto loc_1c720b;
    if ((short)ax < (short)0x0060)
        goto loc_1c723f;
    if (memoryAGet16(ds, 0x20e82f) == 0x0000)
        goto loc_1c7200;
    if (memoryAGet16(ds, 0x20e82f) == 0x0005)
        goto loc_1c7200;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x04);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xfb);
loc_1c7200: // 0160:1c7200
    memoryASet16(ds, 0x20ee71, 0x0000);
    goto loc_1c723f;
loc_1c720b: // 0160:1c720b
    ax = -ax;
    if ((short)ax < (short)0x0060)
        goto loc_1c723f;
    if (memoryAGet16(ds, 0x20e82f) == 0x0004)
        goto loc_1c7200;
    if (memoryAGet16(ds, 0x20e82f) == 0x0009)
        goto loc_1c7200;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x08);
    memoryASet(ds, 0x20e837, memoryAGet(ds, 0x20e837) & 0xf7);
    memoryASet16(ds, 0x20ee71, 0x0000);
loc_1c723f: // 0160:1c723f
    ax = memoryAGet16(ds, 0x22465a);
    if (!ax)
        goto loc_1c7251;
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) | 0x80);
loc_1c7251: // 0160:1c7251
    esp += 4;
    return;
}
void sub_1c7260() // 0160:1c7260 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    sub_1c8088();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c727c() // 0160:1c727c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c72a2;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c72a2: // 0160:1c72a2
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7954() // 0160:1c7954 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000010;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + -8, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c798f;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7991;
loc_1c798f: // 0160:1c798f
    goto loc_1c79a2;
loc_1c7991: // 0160:1c7991
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1df990();
loc_1c79a2: // 0160:1c79a2
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c79ac() // 0160:1c79ac +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c79ff;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c79fd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c79e4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c79e4: // 0160:1c79e4
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c79fd: // 0160:1c79fd
    goto loc_1c7a39;
loc_1c79ff: // 0160:1c79ff
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7a39;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7a20;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7a20: // 0160:1c7a20
    sub_1c82bc();
    eax = 0x00000002;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000002);
loc_1c7a39: // 0160:1c7a39
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7a40() // 0160:1c7a40 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7a93;
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000005)
        goto loc_1c7a91;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7a78;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7a78: // 0160:1c7a78
    sub_1c82bc();
    eax = 0x00000005;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000005);
loc_1c7a91: // 0160:1c7a91
    goto loc_1c7acd;
loc_1c7a93: // 0160:1c7a93
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000003)
        goto loc_1c7acd;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7ab4;
    sub_1e0380();
    sub_1e0690();
    sub_1e0030();
loc_1c7ab4: // 0160:1c7ab4
    sub_1c82bc();
    eax = 0x00000003;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000003);
loc_1c7acd: // 0160:1c7acd
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7b00() // 0160:1c7b00 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    eax = 0x00000007;
    sub_1c8008();
    memoryASet32(ds, 0x1f1cd8, 0x00000007);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c7de8() // 0160:1c7de8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    memoryASet32(ss, ebp + -12, eax);
    memoryASet32(ss, ebp + -8, edx);
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000000)
        goto loc_1c7e0d;
    if (memoryAGet32(ds, 0x30b150) != 0x00000000)
        goto loc_1c7e0f;
loc_1c7e0d: // 0160:1c7e0d
    goto loc_1c7e52;
loc_1c7e0f: // 0160:1c7e0f
    sub_1e0390();
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -12);
    sub_1e0ab0();
    sub_1e0350();
    memoryASet32(ss, ebp + -4, 0x00000000);
loc_1c7e2b: // 0160:1c7e2b
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x30b150))
        goto loc_1c7e40;
    goto loc_1c7e4d;
loc_1c7e38: // 0160:1c7e38
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + 1);
    goto loc_1c7e2b;
loc_1c7e40: // 0160:1c7e40
    edx = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e0740();
    goto loc_1c7e38;
loc_1c7e4d: // 0160:1c7e4d
    sub_1e0370();
loc_1c7e52: // 0160:1c7e52
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8008() // 0160:1c8008 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000001)
        goto loc_1c8027;
    sub_1e0390();
loc_1c8027: // 0160:1c8027
    sub_1e0690();
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000001)
        goto loc_1c803f;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1df8c0();
loc_1c803f: // 0160:1c803f
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c804b;
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000012)
        goto loc_1c804d;
loc_1c804b: // 0160:1c804b
    goto loc_1c807e;
loc_1c804d: // 0160:1c804d
    eax = memoryAGet32(ss, ebp + -4);
    eax <<= 2;
    eax = memoryAGet32(ds, eax + 2039048);
    sub_1e00f0();
    if ((int32_t)eax < 0)
        goto loc_1c807e;
    if (memoryAGet32(ds, 0x1f1cd4) == 0x00000001)
        goto loc_1c807e;
    eax = memoryAGet32(ss, ebp + -4);
    eax <<= 2;
    eax = memoryAGet32(ds, eax + 2039016);
    sub_1e00f0();
loc_1c807e: // 0160:1c807e
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8088() // 0160:1c8088 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    if (memoryAGet32(ds, 0x1f1cd4) != 0x00000000)
        goto loc_1c80dd;
    eax = 0x0020aa84;
    sub_1e3508();
    if (!eax)
        goto loc_1c80b9;
    memoryASet32(ds, 0x1f1cd4, 0x00000004);
    goto loc_1c80dd;
loc_1c80b9: // 0160:1c80b9
    eax = 0x0020aa90;
    sub_1e3508();
    if (!eax)
        goto loc_1c80d3;
    memoryASet32(ds, 0x1f1cd4, 0x00000010);
    goto loc_1c80dd;
loc_1c80d3: // 0160:1c80d3
    memoryASet32(ds, 0x1f1cd4, 0x00000001);
loc_1c80dd: // 0160:1c80dd
    if (memoryAGet32(ds, 0x1f1cd4) != 0x00000001)
        goto loc_1c80f2;
    memoryASet32(ds, 0x30b150, 0x00000000);
    goto loc_1c80fc;
loc_1c80f2: // 0160:1c80f2
    memoryASet32(ds, 0x30b150, 0x00000004);
loc_1c80fc: // 0160:1c80fc
    edx = 0x00000002;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0830();
    edx = 0x00000046;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e05e0();
    eax = memoryAGet32(ds, 0x30b150);
    eax += memoryAGet32(ds, 0x1f1cd0);
    ebx = memoryAGet32(ds, 0x1f1cd4);
    edx = eax;
    eax = ebx;
    sub_1e0500();
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0440();
    eax = memoryAGet32(ds, 0x30b138);
    memoryASet32(ds, 0x30b158, eax);
    if (memoryAGet32(ds, 0x30b134) != 0x00000001)
        goto loc_1c818b;
    eax = 0x0046a5f0;
    sub_1df790();
    if (eax)
        goto loc_1c818b;
    memoryASet32(ds, 0x30b158, 0x00000000);
    eax = 0x00102ca0;
    sub_1df790();
    if (eax)
        goto loc_1c818b;
    sub_1c8088();
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8281;
loc_1c818b: // 0160:1c818b
    if (memoryAGet32(ds, 0x30b134) != 0x00000000)
        goto loc_1c81c0;
    memoryASet32(ds, 0x30b158, 0x00000000);
    eax = 0x00102ca0;
    sub_1df790();
    if (eax)
        goto loc_1c81c0;
    sub_1c8088();
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8281;
loc_1c81c0: // 0160:1c81c0
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfcb0();
    if (!eax)
        goto loc_1c820a;
    edx = 0;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfb50();
    if (!eax)
        goto loc_1c81ed;
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8281;
loc_1c81ed: // 0160:1c81ed
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfcb0();
    if (!eax)
        goto loc_1c820a;
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8281;
loc_1c820a: // 0160:1c820a
    memoryASet32(ss, ebp + -4, 0x00000000);
loc_1c8211: // 0160:1c8211
    eax = memoryAGet32(ds, 0x30b150);
    eax += memoryAGet32(ds, 0x1f1cd0);
    if ((int32_t)eax > (int32_t)memoryAGet32(ss, ebp + -4))
        goto loc_1c822b;
    goto loc_1c823e;
loc_1c8223: // 0160:1c8223
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + 1);
    goto loc_1c8211;
loc_1c822b: // 0160:1c822b
    ebx = memoryAGet32(ss, ebp + -4);
    edx = memoryAGet32(ds, 0x1f1cd4);
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e0760();
    goto loc_1c8223;
loc_1c823e: // 0160:1c823e
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1df8c0();
    ecx = 0x00000100;
    ebx = 0x00000100;
    edx = 0;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0800();
    ecx = 0x00000100;
    ebx = 0x00000100;
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0800();
    eax = 0x00000020;
    sub_1e03a0();
loc_1c8281: // 0160:1c8281
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c82bc() // 0160:1c82bc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    if (memoryAGet32(ds, 0x1f1cd4) != 0x00000000)
        goto loc_1c8311;
    eax = 0x0020aa84;
    sub_1e3508();
    if (!eax)
        goto loc_1c82ed;
    memoryASet32(ds, 0x1f1cd4, 0x00000004);
    goto loc_1c8311;
loc_1c82ed: // 0160:1c82ed
    eax = 0x0020aa90;
    sub_1e3508();
    if (!eax)
        goto loc_1c8307;
    memoryASet32(ds, 0x1f1cd4, 0x00000010);
    goto loc_1c8311;
loc_1c8307: // 0160:1c8307
    memoryASet32(ds, 0x1f1cd4, 0x00000001);
loc_1c8311: // 0160:1c8311
    if (memoryAGet32(ds, 0x1f1cd4) != 0x00000001)
        goto loc_1c8326;
    memoryASet32(ds, 0x30b150, 0x00000000);
    goto loc_1c8330;
loc_1c8326: // 0160:1c8326
    memoryASet32(ds, 0x30b150, 0x00000004);
loc_1c8330: // 0160:1c8330
    edx = 0x00000002;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0830();
    edx = 0x00000046;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e05e0();
    eax = memoryAGet32(ds, 0x30b150);
    eax += memoryAGet32(ds, 0x1f1cd0);
    ebx = memoryAGet32(ds, 0x1f1cd4);
    edx = eax;
    eax = ebx;
    sub_1e0500();
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0440();
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfcb0();
    if (!eax)
        goto loc_1c83bc;
    edx = 0;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfb50();
    if (!eax)
        goto loc_1c839f;
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8433;
loc_1c839f: // 0160:1c839f
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1dfcb0();
    if (!eax)
        goto loc_1c83bc;
    memoryASet32(ds, 0x1f1cd4, 0x00000000);
    goto loc_1c8433;
loc_1c83bc: // 0160:1c83bc
    memoryASet32(ss, ebp + -4, 0x00000000);
loc_1c83c3: // 0160:1c83c3
    eax = memoryAGet32(ds, 0x30b150);
    eax += memoryAGet32(ds, 0x1f1cd0);
    if ((int32_t)eax > (int32_t)memoryAGet32(ss, ebp + -4))
        goto loc_1c83dd;
    goto loc_1c83f0;
loc_1c83d5: // 0160:1c83d5
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ss, ebp + -4, memoryAGet32(ss, ebp + -4) + 1);
    goto loc_1c83c3;
loc_1c83dd: // 0160:1c83dd
    ebx = memoryAGet32(ss, ebp + -4);
    edx = memoryAGet32(ds, 0x1f1cd4);
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e0760();
    goto loc_1c83d5;
loc_1c83f0: // 0160:1c83f0
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1df8c0();
    ecx = 0x00000100;
    ebx = 0x00000100;
    edx = 0;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0800();
    ecx = 0x00000100;
    ebx = 0x00000100;
    edx = 0x00000001;
    eax = memoryAGet32(ds, 0x1f1cd4);
    sub_1e0800();
    eax = 0x00000020;
    sub_1e03a0();
loc_1c8433: // 0160:1c8433
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8474() // 0160:1c8474 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    edx = 0x000003e8;
    eax = 0;
    sub_1e03c0();
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c84b4() // 0160:1c84b4 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c84d4;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c84d6;
loc_1c84d4: // 0160:1c84d4
    goto loc_1c8519;
loc_1c84d6: // 0160:1c84d6
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c84e9;
    eax = 0x000000ff;
    sub_1e0dd0();
loc_1c84e9: // 0160:1c84e9
    if (memoryAGet32(ds, 0x30b13c) != 0x00000002)
        goto loc_1c84fc;
    eax = 0x000000a0;
    sub_1e0dd0();
loc_1c84fc: // 0160:1c84fc
    if (memoryAGet32(ds, 0x30b13c) != 0x00000003)
        goto loc_1c850f;
    eax = 0x00000050;
    sub_1e0dd0();
loc_1c850f: // 0160:1c850f
    eax = 0x00000002;
    sub_1e0d50();
loc_1c8519: // 0160:1c8519
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8520() // 0160:1c8520 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8540;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c8542;
loc_1c8540: // 0160:1c8540
    goto loc_1c8585;
loc_1c8542: // 0160:1c8542
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c8555;
    eax = 0x000000ff;
    sub_1e0dd0();
loc_1c8555: // 0160:1c8555
    if (memoryAGet32(ds, 0x30b13c) != 0x00000002)
        goto loc_1c8568;
    eax = 0x000000a0;
    sub_1e0dd0();
loc_1c8568: // 0160:1c8568
    if (memoryAGet32(ds, 0x30b13c) != 0x00000003)
        goto loc_1c857b;
    eax = 0x00000050;
    sub_1e0dd0();
loc_1c857b: // 0160:1c857b
    eax = 0x00000003;
    sub_1e0d50();
loc_1c8585: // 0160:1c8585
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c858c() // 0160:1c858c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c85ac;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c85ae;
loc_1c85ac: // 0160:1c85ac
    goto loc_1c85f1;
loc_1c85ae: // 0160:1c85ae
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c85c1;
    eax = 0x000000ff;
    sub_1e0dd0();
loc_1c85c1: // 0160:1c85c1
    if (memoryAGet32(ds, 0x30b13c) != 0x00000002)
        goto loc_1c85d4;
    eax = 0x000000a0;
    sub_1e0dd0();
loc_1c85d4: // 0160:1c85d4
    if (memoryAGet32(ds, 0x30b13c) != 0x00000003)
        goto loc_1c85e7;
    eax = 0x00000050;
    sub_1e0dd0();
loc_1c85e7: // 0160:1c85e7
    eax = 0x00000004;
    sub_1e0d50();
loc_1c85f1: // 0160:1c85f1
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c85f8() // 0160:1c85f8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8618;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c861a;
loc_1c8618: // 0160:1c8618
    goto loc_1c865d;
loc_1c861a: // 0160:1c861a
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c862d;
    eax = 0x000000ff;
    sub_1e0dd0();
loc_1c862d: // 0160:1c862d
    if (memoryAGet32(ds, 0x30b13c) != 0x00000002)
        goto loc_1c8640;
    eax = 0x000000a0;
    sub_1e0dd0();
loc_1c8640: // 0160:1c8640
    if (memoryAGet32(ds, 0x30b13c) != 0x00000003)
        goto loc_1c8653;
    eax = 0x00000050;
    sub_1e0dd0();
loc_1c8653: // 0160:1c8653
    eax = 0x00000005;
    sub_1e0d50();
loc_1c865d: // 0160:1c865d
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8664() // 0160:1c8664 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8684;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c8686;
loc_1c8684: // 0160:1c8684
    goto loc_1c86c9;
loc_1c8686: // 0160:1c8686
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c8699;
    eax = 0x000000ff;
    sub_1e0dd0();
loc_1c8699: // 0160:1c8699
    if (memoryAGet32(ds, 0x30b13c) != 0x00000002)
        goto loc_1c86ac;
    eax = 0x000000a0;
    sub_1e0dd0();
loc_1c86ac: // 0160:1c86ac
    if (memoryAGet32(ds, 0x30b13c) != 0x00000003)
        goto loc_1c86bf;
    eax = 0x00000050;
    sub_1e0dd0();
loc_1c86bf: // 0160:1c86bf
    eax = 0x00000006;
    sub_1e0d50();
loc_1c86c9: // 0160:1c86c9
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c86d0() // 0160:1c86d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c86f0;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c86f2;
loc_1c86f0: // 0160:1c86f0
    goto loc_1c86fc;
loc_1c86f2: // 0160:1c86f2
    eax = memoryAGet32(ds, 0x30b144);
    sub_1e0dd0();
loc_1c86fc: // 0160:1c86fc
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8734() // 0160:1c8734 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8754;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c8756;
loc_1c8754: // 0160:1c8754
    goto loc_1c875b;
loc_1c8756: // 0160:1c8756
    sub_1e0d60();
loc_1c875b: // 0160:1c875b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8764() // 0160:1c8764 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000000;
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8784;
    if (memoryAGet32(ds, 0x30b140) == 0x00000001)
        goto loc_1c8786;
loc_1c8784: // 0160:1c8784
    goto loc_1c878b;
loc_1c8786: // 0160:1c8786
    sub_1e0d70();
loc_1c878b: // 0160:1c878b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8794() // 0160:1c8794 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -8);
    sub_1e3562();
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -4);
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1c8824() // 0160:1c8824 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    memoryASet32(ss, ebp + -8, eax);
    memoryASet32(ss, ebp + -4, edx);
    if (memoryAGet32(ss, ebp + -8) <= 0x00000001)
        goto loc_1c884d;
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax + 4);
    sub_1e3691();
    memoryASet32(ds, 0x1f1d30, eax);
loc_1c884d: // 0160:1c884d
    if (memoryAGet32(ss, ebp + -8) <= 0x00000002)
        goto loc_1c8865;
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax + 8);
    sub_1e3691();
    al &= 0xf0;
    memoryASet32(ds, 0x1f1d28, eax);
loc_1c8865: // 0160:1c8865
    if (memoryAGet32(ss, ebp + -8) <= 0x00000003)
        goto loc_1c887b;
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax + 12);
    sub_1e3691();
    memoryASet32(ds, 0x1f1d2c, eax);
loc_1c887b: // 0160:1c887b
    if (memoryAGet32(ds, 0x1f1d28) == 0x00000000)
        goto loc_1c8890;
    if ((int32_t)memoryAGet32(ds, 0x1f1d28) <= (int32_t)0x00000140)
        goto loc_1c889a;
loc_1c8890: // 0160:1c8890
    memoryASet32(ds, 0x1f1d28, 0x00000140);
loc_1c889a: // 0160:1c889a
    if (memoryAGet32(ds, 0x1f1d2c) == 0x00000000)
        goto loc_1c88af;
    if ((int32_t)memoryAGet32(ds, 0x1f1d2c) <= (int32_t)0x000000f0)
        goto loc_1c88b9;
loc_1c88af: // 0160:1c88af
    memoryASet32(ds, 0x1f1d2c, 0x000000f0);
loc_1c88b9: // 0160:1c88b9
    if ((int32_t)memoryAGet32(ds, 0x1f1d28) >= (int32_t)0x00000090)
        goto loc_1c88cf;
    memoryASet32(ds, 0x1f1d28, 0x00000090);
loc_1c88cf: // 0160:1c88cf
    if ((int32_t)memoryAGet32(ds, 0x1f1d2c) >= (int32_t)0x00000080)
        goto loc_1c88e5;
    memoryASet32(ds, 0x1f1d2c, 0x00000080);
loc_1c88e5: // 0160:1c88e5
    memoryASet32(ds, 0x30b138, 0x00000000);
    memoryASet32(ds, 0x30b140, 0x00000000);
    memoryASet32(ds, 0x30b13c, 0x00000000);
    memoryASet32(ds, 0x30b134, 0x00000000);
    if (memoryAGet32(ds, 0x30b13c) != 0x00000001)
        goto loc_1c8920;
    memoryASet32(ds, 0x30b13c, 0x00000002);
loc_1c8920: // 0160:1c8920
    memoryASet32(ds, 0x30b154, 0x00000000);
    memoryASet32(ds, 0x30b130, 0x00000001);
    if (memoryAGet32(ds, 0x30b138) != 0x00000001)
        goto loc_1c8947;
    sub_1e0d40();
    memoryASet32(ds, 0x30b154, eax);
loc_1c8947: // 0160:1c8947
    if (memoryAGet32(ds, 0x30b154) != 0x00000001)
        goto loc_1c8969;
    memoryASet32(ds, 0x30b144, 0x000000ff);
    eax = 0x000000ff;
    sub_1e0dd0();
    sub_1e0d80();
loc_1c8969: // 0160:1c8969
    sub_1a807e();
    sub_1a801e();
    eax = 0x00000003;
    sub_1aa5d3();
    eax = 0x0020aac0;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aafc;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ab30;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ab5c;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aba8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020abf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ac44;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ac58;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ac8c;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020acd4;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ad08;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ad4c;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    if (memoryAGet32(ds, 0x30b138) != 0x00000001)
        goto loc_1c8ac8;
    eax = 0x0020aaf8;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ad78;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020adc4;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020ae10;
    push32(eax);
    sub_1e34e6();
    esp += 0x00000004;
loc_1c8ac8: // 0160:1c8ac8
    eax = 0;
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1c8ae0() // 0160:1c8ae0 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1c8aec;
    esp += 4;
    return;
loc_1c8aec: // 0160:1c8aec
    edi = 0x00200a10;
    memoryASet32(ds, 0x20e819, edi);
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1c8b07;
    sub_1c8b58();
loc_1c8b07: // 0160:1c8b07
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1c8b27;
    sub_1c8c9d();
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1c8b27;
    sub_1c8f33();
loc_1c8b27: // 0160:1c8b27
    if (!(memoryAGet16(ds, 0x20cf43) & 0xffff))
        goto loc_1c8b57;
    sub_1c8de8();
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1c8b47;
    sub_1c9084();
loc_1c8b47: // 0160:1c8b47
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1c8b57;
    goto loc_1c91d5;
loc_1c8b57: // 0160:1c8b57
    esp += 4;
    return;
    // gap 1661 bytes
loc_1c91d5: // 0160:1c91d5
    ax = memoryAGet16(ds, 0x20cf53);
    ax -= memoryAGet16(ds, 0x20cf55);
    if (ax < 0x0018)
        goto loc_1c91f2;
    if (ax < 0xffe8)
        goto loc_1c920c;
loc_1c91f2: // 0160:1c91f2
    bx = memoryAGet16(ds, 0x20cf65);
    bx -= memoryAGet16(ds, 0x20cf67);
    if (bx < 0x0018)
        goto loc_1c920f;
    if (bx >= 0xffe8)
        goto loc_1c920f;
loc_1c920c: // 0160:1c920c
    eax = 0;
    esp += 4;
    return;
loc_1c920f: // 0160:1c920f
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1c920c;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1c920c;
    ax = memoryAGet16(ds, 0x20d061);
    ax -= memoryAGet16(ds, 0x20d063);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c920c;
    if ((short)ax >= (short)0x000c)
        goto loc_1c920c;
    ax = memoryAGet16(ds, 0x20cf89);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf8b);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf55);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf67);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c920c;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfad, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf9b, ax);
    memoryASet16(ds, 0x20d03d, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfaf, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf9d, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20d03f, ax);
    ax = memoryAGet16(ds, 0x20d103);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7e1, ax);
    memoryASet16(ds, 0x20e7e3, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c8b58() // 0160:1c8b58 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax -= memoryAGet16(ds, 0x20cf51);
    if (ax < 0x0018)
        goto loc_1c8b75;
    if (ax < 0xffe8)
        goto loc_1c8b8f;
loc_1c8b75: // 0160:1c8b75
    bx = memoryAGet16(ds, 0x20cf61);
    bx -= memoryAGet16(ds, 0x20cf63);
    if (bx < 0x0018)
        goto loc_1c8b92;
    if (bx >= 0xffe8)
        goto loc_1c8b92;
loc_1c8b8f: // 0160:1c8b8f
    eax = 0;
    esp += 4;
    return;
loc_1c8b92: // 0160:1c8b92
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1c8b8f;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1c8b8f;
    ax = memoryAGet16(ds, 0x20d05d);
    ax -= memoryAGet16(ds, 0x20d05f);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c8b8f;
    if ((short)ax >= (short)0x000c)
        goto loc_1c8b8f;
    ax = memoryAGet16(ds, 0x20cf85);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf87);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf51);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf63);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c8b8f;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfa9, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf97, ax);
    memoryASet16(ds, 0x20d039, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfab, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf99, ax);
    memoryASet16(ds, 0x20d03b, ax);
    ax = memoryAGet16(ds, 0x20d0ff);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7df, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c8c9d() // 0160:1c8c9d +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax -= memoryAGet16(ds, 0x20cf53);
    if (ax < 0x0018)
        goto loc_1c8cba;
    if (ax < 0xffe8)
        goto loc_1c8cd4;
loc_1c8cba: // 0160:1c8cba
    bx = memoryAGet16(ds, 0x20cf61);
    bx -= memoryAGet16(ds, 0x20cf65);
    if (bx < 0x0018)
        goto loc_1c8cd7;
    if (bx >= 0xffe8)
        goto loc_1c8cd7;
loc_1c8cd4: // 0160:1c8cd4
    eax = 0;
    esp += 4;
    return;
loc_1c8cd7: // 0160:1c8cd7
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1c8cd4;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1c8cd4;
    ax = memoryAGet16(ds, 0x20d05d);
    ax -= memoryAGet16(ds, 0x20d061);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c8cd4;
    if ((short)ax >= (short)0x000c)
        goto loc_1c8cd4;
    ax = memoryAGet16(ds, 0x20cf85);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf89);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c8cd4;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfa9, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf97, ax);
    memoryASet16(ds, 0x20d039, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfad, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf9b, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d03d, ax);
    ax = memoryAGet16(ds, 0x20d0ff);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7e1, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c8de8() // 0160:1c8de8 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax -= memoryAGet16(ds, 0x20cf55);
    if (ax < 0x0018)
        goto loc_1c8e05;
    if (ax < 0xffe8)
        goto loc_1c8e1f;
loc_1c8e05: // 0160:1c8e05
    bx = memoryAGet16(ds, 0x20cf61);
    bx -= memoryAGet16(ds, 0x20cf67);
    if (bx < 0x0018)
        goto loc_1c8e22;
    if (bx >= 0xffe8)
        goto loc_1c8e22;
loc_1c8e1f: // 0160:1c8e1f
    eax = 0;
    esp += 4;
    return;
loc_1c8e22: // 0160:1c8e22
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1c8e1f;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1c8e1f;
    ax = memoryAGet16(ds, 0x20d05d);
    ax -= memoryAGet16(ds, 0x20d063);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c8e1f;
    if ((short)ax >= (short)0x000c)
        goto loc_1c8e1f;
    ax = memoryAGet16(ds, 0x20cf85);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf8b);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf55);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf67);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c8e1f;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfa9, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf97, ax);
    memoryASet16(ds, 0x20d039, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfaf, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf9d, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d03f, ax);
    ax = memoryAGet16(ds, 0x20d0ff);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7e3, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c8f33() // 0160:1c8f33 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf51);
    ax -= memoryAGet16(ds, 0x20cf53);
    if (ax < 0x0018)
        goto loc_1c8f50;
    if (ax < 0xffe8)
        goto loc_1c8f6a;
loc_1c8f50: // 0160:1c8f50
    bx = memoryAGet16(ds, 0x20cf63);
    bx -= memoryAGet16(ds, 0x20cf65);
    if (bx < 0x0018)
        goto loc_1c8f6d;
    if (bx >= 0xffe8)
        goto loc_1c8f6d;
loc_1c8f6a: // 0160:1c8f6a
    eax = 0;
    esp += 4;
    return;
loc_1c8f6d: // 0160:1c8f6d
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1c8f6a;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1c8f6a;
    ax = memoryAGet16(ds, 0x20d05f);
    ax -= memoryAGet16(ds, 0x20d061);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c8f6a;
    if ((short)ax >= (short)0x000c)
        goto loc_1c8f6a;
    ax = memoryAGet16(ds, 0x20cf87);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf51);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf63);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf89);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c8f6a;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfab, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf99, ax);
    memoryASet16(ds, 0x20d03b, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfad, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf9b, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d03d, ax);
    ax = memoryAGet16(ds, 0x20d101);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7df, ax);
    memoryASet16(ds, 0x20e7e1, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c9084() // 0160:1c9084 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf51);
    ax -= memoryAGet16(ds, 0x20cf55);
    if (ax < 0x0018)
        goto loc_1c90a1;
    if (ax < 0xffe8)
        goto loc_1c90bb;
loc_1c90a1: // 0160:1c90a1
    bx = memoryAGet16(ds, 0x20cf63);
    bx -= memoryAGet16(ds, 0x20cf67);
    if (bx < 0x0018)
        goto loc_1c90be;
    if (bx >= 0xffe8)
        goto loc_1c90be;
loc_1c90bb: // 0160:1c90bb
    eax = 0;
    esp += 4;
    return;
loc_1c90be: // 0160:1c90be
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1c90bb;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1c90bb;
    ax = memoryAGet16(ds, 0x20d05f);
    ax -= memoryAGet16(ds, 0x20d063);
    ax += 0x0006;
    if ((short)ax < 0)
        goto loc_1c90bb;
    if ((short)ax >= (short)0x000c)
        goto loc_1c90bb;
    ax = memoryAGet16(ds, 0x20cf87);
    memoryASet16(ds, 0x20d135, ax);
    ax = memoryAGet16(ds, 0x20cf51);
    memoryASet16(ds, 0x20d139, ax);
    ax = memoryAGet16(ds, 0x20cf63);
    memoryASet16(ds, 0x20d13b, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20d141, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cf8b);
    memoryASet16(ds, 0x20d137, ax);
    ax = memoryAGet16(ds, 0x20cf55);
    memoryASet16(ds, 0x20d13d, ax);
    ax = memoryAGet16(ds, 0x20cf67);
    memoryASet16(ds, 0x20d13f, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20d145, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20d147, ax);
    sub_1c9326();
    if (!ax)
        goto loc_1c90bb;
    ax = memoryAGet16(ds, 0x20d141);
    memoryASet16(ds, 0x20cfab, ax);
    ax = memoryAGet16(ds, 0x20d143);
    memoryASet16(ds, 0x20cf99, ax);
    memoryASet16(ds, 0x20d03b, ax);
    ax = memoryAGet16(ds, 0x20d145);
    memoryASet16(ds, 0x20cfaf, ax);
    ax = memoryAGet16(ds, 0x20d147);
    memoryASet16(ds, 0x20cf9d, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d03f, ax);
    ax = memoryAGet16(ds, 0x20d101);
    sub_1c9cd7();
    ax = memoryAGet16(ds, 0x20e7e5);
    memoryASet16(ds, 0x20e7df, ax);
    memoryASet16(ds, 0x20e7e3, ax);
    ax = 0x0001;
    esp += 4;
}
void sub_1c9326() // 0160:1c9326 +long
{
    esp -= 4;
    bp = memoryAGet16(ds, 0x20d139);
    cx = memoryAGet16(ds, 0x20d13b);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d135);
    ax <<= 4;
    esi = 0x0020583c;
    esi += eax;
    edi = 0x0020d2cd;
    dx = memoryAGet16(ds, esi);
    dx += bp;
    memoryASet16(ds, edi, dx);
    dx = memoryAGet16(ds, esi + 2);
    dx += cx;
    memoryASet16(ds, edi + 2, dx);
    dx = memoryAGet16(ds, esi + 4);
    dx += bp;
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 6);
    dx += cx;
    memoryASet16(ds, edi + 6, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx += bp;
    memoryASet16(ds, edi + 8, dx);
    dx = memoryAGet16(ds, esi + 10);
    dx += cx;
    memoryASet16(ds, edi + 10, dx);
    dx = memoryAGet16(ds, esi + 12);
    dx += bp;
    memoryASet16(ds, edi + 12, dx);
    dx = memoryAGet16(ds, esi + 14);
    dx += cx;
    memoryASet16(ds, edi + 14, dx);
    ebx = 0x0020d2ed;
    eax = 0x00000020;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, ebx + 4, eax);
    memoryASet32(ds, ebx + 8, eax);
    memoryASet32(ds, ebx + 12, eax);
    memoryASet32(ds, ebx + 16, eax);
    memoryASet32(ds, ebx + 20, eax);
    memoryASet32(ds, ebx + 24, eax);
    memoryASet32(ds, ebx + 28, eax);
    memoryASet32(ds, ebx + 32, eax);
    memoryASet32(ds, ebx + 36, eax);
    memoryASet32(ds, ebx + 40, eax);
    memoryASet32(ds, ebx + 44, eax);
    memoryASet32(ds, ebx + 48, eax);
    memoryASet32(ds, ebx + 52, eax);
    memoryASet32(ds, ebx + 56, eax);
    memoryASet32(ds, ebx + 60, eax);
    esi = 0x00205a3c;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d137);
    ax <<= 2;
    esi = memoryAGet32(ds, esi + eax);
    push32(ecx);
    ecx = 0;
    cx = memoryAGet16(ds, esi);
    cx += 0x0001;
    ax = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, 0x20e805, ax);
    eax = 0;
    ax = memoryAGet16(ds, esi + 4);
    esi += 0x00000006;
    ebx = 0x0020d2ed;
    ebx += eax;
loc_1c9413: // 0160:1c9413
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    ebx += 0x00000004;
    esi += 0x00000004;
    if (--ecx)
        goto loc_1c9413;
    ecx = pop32();
    ebx = 0x0020d2ed;
    ax = memoryAGet16(ds, 0x20d2cd);
    ax -= memoryAGet16(ds, 0x20d13d);
    if (ax >= 0x0020)
        goto loc_1c94e3;
    bp = memoryAGet16(ds, 0x20d2cf);
    bp -= memoryAGet16(ds, 0x20d13f);
    if (bp >= 0x0020)
        goto loc_1c94e3;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c94a4;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13d);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13d);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2cd))
        goto loc_1c94e3;
    if (ax <= memoryAGet16(ds, 0x20d2cd))
        goto loc_1c94e3;
    eax = 0x00000001;
    goto loc_1c9b17;
loc_1c94a4: // 0160:1c94a4
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13f);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13f);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2cf))
        goto loc_1c94e3;
    if (ax <= memoryAGet16(ds, 0x20d2cf))
        goto loc_1c94e3;
    eax = 0x00000001;
    goto loc_1c9b17;
loc_1c94e3: // 0160:1c94e3
    ax = memoryAGet16(ds, 0x20d2d1);
    ax -= memoryAGet16(ds, 0x20d13d);
    if (ax >= 0x0020)
        goto loc_1c95a1;
    bp = memoryAGet16(ds, 0x20d2d3);
    bp -= memoryAGet16(ds, 0x20d13f);
    if (bp >= 0x0020)
        goto loc_1c95a1;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c9562;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13d);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13d);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d1))
        goto loc_1c95a1;
    if (ax <= memoryAGet16(ds, 0x20d2d1))
        goto loc_1c95a1;
    eax = 0x00000002;
    goto loc_1c9b17;
loc_1c9562: // 0160:1c9562
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13f);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13f);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d3))
        goto loc_1c95a1;
    if (ax <= memoryAGet16(ds, 0x20d2d3))
        goto loc_1c95a1;
    eax = 0x00000002;
    goto loc_1c9b17;
loc_1c95a1: // 0160:1c95a1
    ax = memoryAGet16(ds, 0x20d2d5);
    ax -= memoryAGet16(ds, 0x20d13d);
    if (ax >= 0x0020)
        goto loc_1c965f;
    bp = memoryAGet16(ds, 0x20d2d7);
    bp -= memoryAGet16(ds, 0x20d13f);
    if (bp >= 0x0020)
        goto loc_1c965f;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c9620;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13d);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13d);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d5))
        goto loc_1c965f;
    if (ax <= memoryAGet16(ds, 0x20d2d5))
        goto loc_1c965f;
    eax = 0x00000003;
    goto loc_1c9b17;
loc_1c9620: // 0160:1c9620
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13f);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13f);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d7))
        goto loc_1c965f;
    if (ax <= memoryAGet16(ds, 0x20d2d7))
        goto loc_1c965f;
    eax = 0x00000003;
    goto loc_1c9b17;
loc_1c965f: // 0160:1c965f
    ax = memoryAGet16(ds, 0x20d2d9);
    ax -= memoryAGet16(ds, 0x20d13d);
    if (ax >= 0x0020)
        goto loc_1c971d;
    bp = memoryAGet16(ds, 0x20d2db);
    bp -= memoryAGet16(ds, 0x20d13f);
    if (bp >= 0x0020)
        goto loc_1c971d;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c96de;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13d);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13d);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d9))
        goto loc_1c971d;
    if (ax <= memoryAGet16(ds, 0x20d2d9))
        goto loc_1c971d;
    eax = 0x00000004;
    goto loc_1c9b17;
loc_1c96de: // 0160:1c96de
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13f);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13f);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2db))
        goto loc_1c971d;
    if (ax <= memoryAGet16(ds, 0x20d2db))
        goto loc_1c971d;
    eax = 0x00000004;
    goto loc_1c9b17;
loc_1c971d: // 0160:1c971d
    bp = memoryAGet16(ds, 0x20d13d);
    cx = memoryAGet16(ds, 0x20d13f);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d137);
    ax <<= 4;
    esi = 0x0020583c;
    esi += eax;
    edi = 0x0020d2cd;
    dx = memoryAGet16(ds, esi);
    dx += bp;
    memoryASet16(ds, edi, dx);
    dx = memoryAGet16(ds, esi + 2);
    dx += cx;
    memoryASet16(ds, edi + 2, dx);
    dx = memoryAGet16(ds, esi + 4);
    dx += bp;
    memoryASet16(ds, edi + 4, dx);
    dx = memoryAGet16(ds, esi + 6);
    dx += cx;
    memoryASet16(ds, edi + 6, dx);
    dx = memoryAGet16(ds, esi + 8);
    dx += bp;
    memoryASet16(ds, edi + 8, dx);
    dx = memoryAGet16(ds, esi + 10);
    dx += cx;
    memoryASet16(ds, edi + 10, dx);
    dx = memoryAGet16(ds, esi + 12);
    dx += bp;
    memoryASet16(ds, edi + 12, dx);
    dx = memoryAGet16(ds, esi + 14);
    dx += cx;
    memoryASet16(ds, edi + 14, dx);
    ebx = 0x0020d2ed;
    eax = 0x00000020;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, ebx + 4, eax);
    memoryASet32(ds, ebx + 8, eax);
    memoryASet32(ds, ebx + 12, eax);
    memoryASet32(ds, ebx + 16, eax);
    memoryASet32(ds, ebx + 20, eax);
    memoryASet32(ds, ebx + 24, eax);
    memoryASet32(ds, ebx + 28, eax);
    memoryASet32(ds, ebx + 32, eax);
    memoryASet32(ds, ebx + 36, eax);
    memoryASet32(ds, ebx + 40, eax);
    memoryASet32(ds, ebx + 44, eax);
    memoryASet32(ds, ebx + 48, eax);
    memoryASet32(ds, ebx + 52, eax);
    memoryASet32(ds, ebx + 56, eax);
    memoryASet32(ds, ebx + 60, eax);
    esi = 0x00205a3c;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d135);
    ax <<= 2;
    esi = memoryAGet32(ds, esi + eax);
    push32(ecx);
    ecx = 0;
    cx = memoryAGet16(ds, esi);
    cx += 0x0001;
    ax = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, 0x20e805, ax);
    eax = 0;
    ax = memoryAGet16(ds, esi + 4);
    esi += 0x00000006;
    ebx = 0x0020d2ed;
    ebx += eax;
loc_1c980a: // 0160:1c980a
    eax = memoryAGet32(ds, esi);
    memoryASet32(ds, ebx, eax);
    esi += 0x00000004;
    ebx += 0x00000004;
    if (--ecx)
        goto loc_1c980a;
    ecx = pop32();
    ebx = 0x0020d2ed;
    ax = memoryAGet16(ds, 0x20d2cd);
    ax -= memoryAGet16(ds, 0x20d139);
    if (ax >= 0x0020)
        goto loc_1c98da;
    bp = memoryAGet16(ds, 0x20d2cf);
    bp -= memoryAGet16(ds, 0x20d13b);
    if (bp >= 0x0020)
        goto loc_1c98da;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c989b;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d139);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d139);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2cd))
        goto loc_1c98da;
    if (ax <= memoryAGet16(ds, 0x20d2cd))
        goto loc_1c98da;
    eax = 0x00000005;
    goto loc_1c9b17;
loc_1c989b: // 0160:1c989b
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13b);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13b);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2cf))
        goto loc_1c98da;
    if (ax <= memoryAGet16(ds, 0x20d2cf))
        goto loc_1c98da;
    eax = 0x00000005;
    goto loc_1c9b17;
loc_1c98da: // 0160:1c98da
    ax = memoryAGet16(ds, 0x20d2d1);
    ax -= memoryAGet16(ds, 0x20d139);
    if (ax >= 0x0020)
        goto loc_1c9998;
    bp = memoryAGet16(ds, 0x20d2d3);
    bp -= memoryAGet16(ds, 0x20d13b);
    if (bp >= 0x0020)
        goto loc_1c9998;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c9959;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d139);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d139);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d1))
        goto loc_1c9998;
    if (ax <= memoryAGet16(ds, 0x20d2d1))
        goto loc_1c9998;
    eax = 0x00000006;
    goto loc_1c9b17;
loc_1c9959: // 0160:1c9959
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13b);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13b);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d3))
        goto loc_1c9998;
    if (ax <= memoryAGet16(ds, 0x20d2d3))
        goto loc_1c9998;
    eax = 0x00000006;
    goto loc_1c9b17;
loc_1c9998: // 0160:1c9998
    ax = memoryAGet16(ds, 0x20d2d5);
    ax -= memoryAGet16(ds, 0x20d139);
    if (ax >= 0x0020)
        goto loc_1c9a56;
    bp = memoryAGet16(ds, 0x20d2d7);
    bp -= memoryAGet16(ds, 0x20d13b);
    if (bp >= 0x0020)
        goto loc_1c9a56;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c9a17;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d139);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d139);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d5))
        goto loc_1c9a56;
    if (ax <= memoryAGet16(ds, 0x20d2d5))
        goto loc_1c9a56;
    eax = 0x00000007;
    goto loc_1c9b17;
loc_1c9a17: // 0160:1c9a17
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13b);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13b);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d7))
        goto loc_1c9a56;
    if (ax <= memoryAGet16(ds, 0x20d2d7))
        goto loc_1c9a56;
    eax = 0x00000007;
    goto loc_1c9b17;
loc_1c9a56: // 0160:1c9a56
    ax = memoryAGet16(ds, 0x20d2d9);
    ax -= memoryAGet16(ds, 0x20d139);
    if (ax >= 0x0020)
        goto loc_1c9b14;
    bp = memoryAGet16(ds, 0x20d2db);
    bp -= memoryAGet16(ds, 0x20d13b);
    if (bp >= 0x0020)
        goto loc_1c9b14;
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1c9ad5;
    bp &= 0x001e;
    bp <<= 1;
    eax = 0;
    ax = bp;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d139);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d139);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2d9))
        goto loc_1c9b14;
    if (ax <= memoryAGet16(ds, 0x20d2d9))
        goto loc_1c9b14;
    eax = 0x00000008;
    goto loc_1c9b17;
    // gap 3 bytes
loc_1c9ad5: // 0160:1c9ad5
    eax &= 0x0000001e;
    ax <<= 1;
    dx = memoryAGet16(ds, ebx + eax);
    dx += memoryAGet16(ds, 0x20d13b);
    ax = memoryAGet16(ds, ebx + eax + 2);
    ax += memoryAGet16(ds, 0x20d13b);
    memoryASet16(ds, 0x20e7fd, ax);
    if (dx >= memoryAGet16(ds, 0x20d2db))
        goto loc_1c9b14;
    if (ax <= memoryAGet16(ds, 0x20d2db))
        goto loc_1c9b14;
    eax = 0x00000008;
    goto loc_1c9b17;
    // gap 3 bytes
loc_1c9b14: // 0160:1c9b14
    eax = 0;
    esp += 4;
    return;
loc_1c9b17: // 0160:1c9b17
    memoryASet16(ds, 0x20d76d, ax);
    ax = memoryAGet16(ds, 0x20d143);
    bx = memoryAGet16(ds, 0x20d141);
    sub_1cdb0a();
    memoryASet32(ds, 0x20cecb, eax);
    memoryASet32(ds, 0x20cecf, ebx);
    if ((int32_t)eax < 0)
        goto loc_1c9b43;
    eax >>= 6;
    goto loc_1c9b4a;
loc_1c9b43: // 0160:1c9b43
    eax = -eax;
    eax >>= 6;
    eax = -eax;
loc_1c9b4a: // 0160:1c9b4a
    memoryASet32(ds, 0x20ced3, eax);
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) - eax);
    if ((int32_t)ebx < 0)
        goto loc_1c9b5e;
    ebx >>= 6;
    goto loc_1c9b65;
loc_1c9b5e: // 0160:1c9b5e
    ebx = -ebx;
    ebx >>= 6;
    ebx = -ebx;
loc_1c9b65: // 0160:1c9b65
    memoryASet32(ds, 0x20ced7, ebx);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) - ebx);
    ax = memoryAGet16(ds, 0x20d147);
    bx = memoryAGet16(ds, 0x20d145);
    sub_1cdb0a();
    memoryASet32(ds, 0x20cedb, eax);
    memoryASet32(ds, 0x20cedf, ebx);
    if ((int32_t)eax < 0)
        goto loc_1c9b97;
    eax >>= 6;
    goto loc_1c9b9e;
loc_1c9b97: // 0160:1c9b97
    eax = -eax;
    eax >>= 6;
    eax = -eax;
loc_1c9b9e: // 0160:1c9b9e
    memoryASet32(ds, 0x20cee3, eax);
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) - eax);
    if ((int32_t)ebx < 0)
        goto loc_1c9bb2;
    ebx >>= 6;
    goto loc_1c9bb9;
loc_1c9bb2: // 0160:1c9bb2
    ebx = -ebx;
    ebx >>= 6;
    ebx = -ebx;
loc_1c9bb9: // 0160:1c9bb9
    memoryASet32(ds, 0x20cee7, ebx);
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) - ebx);
    eax = memoryAGet32(ds, 0x20cee3);
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + eax);
    eax = memoryAGet32(ds, 0x20cee7);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + eax);
    eax = memoryAGet32(ds, 0x20ced3);
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + eax);
    eax = memoryAGet32(ds, 0x20ced7);
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + eax);
    memoryASet16(ds, 0x20d001, 0x0400);
    ebp = 0x000186a0;
    memoryASet32(ds, 0x20e809, ebp);
    ax = memoryAGet16(ds, 0x20d76d);
    if (ax == 0x0001)
        goto loc_1c9c43;
    if (ax == 0x0002)
        goto loc_1c9c35;
    if (ax == 0x0003)
        goto loc_1c9c5f;
    if (ax == 0x0004)
        goto loc_1c9c51;
    if (ax == 0x0005)
        goto loc_1c9c5f;
    if (ax == 0x0006)
        goto loc_1c9c51;
    if (ax == 0x0007)
        goto loc_1c9c43;
loc_1c9c35: // 0160:1c9c35
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) - ebp);
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) + ebp);
    goto loc_1c9c6d;
loc_1c9c43: // 0160:1c9c43
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) - ebp);
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) + ebp);
    goto loc_1c9c6d;
loc_1c9c51: // 0160:1c9c51
    memoryASet32(ds, 0x20cecb, memoryAGet32(ds, 0x20cecb) - ebp);
    memoryASet32(ds, 0x20cedb, memoryAGet32(ds, 0x20cedb) + ebp);
    goto loc_1c9c6d;
loc_1c9c5f: // 0160:1c9c5f
    memoryASet32(ds, 0x20cecf, memoryAGet32(ds, 0x20cecf) - ebp);
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) + ebp);
    goto loc_1c9c6d;
loc_1c9c6d: // 0160:1c9c6d
    sub_1cdb89();
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20d147, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (ax >= 0x001e)
        goto loc_1c9c8e;
    ax = 0x001e;
loc_1c9c8e: // 0160:1c9c8e
    memoryASet16(ds, 0x20d145, ax);
    push32(eax);
    eax = memoryAGet32(ds, 0x20cedb);
    memoryASet32(ds, 0x20cecb, eax);
    eax = memoryAGet32(ds, 0x20cedf);
    memoryASet32(ds, 0x20cecf, eax);
    eax = pop32();
    sub_1cdb89();
    ax = memoryAGet16(ds, 0x20cfa7);
    memoryASet16(ds, 0x20d143, ax);
    ax = memoryAGet16(ds, 0x20cfb9);
    if (ax >= 0x001e)
        goto loc_1c9ccb;
    ax = 0x001e;
loc_1c9ccb: // 0160:1c9ccb
    memoryASet16(ds, 0x20d141, ax);
    eax = 0x00000001;
    esp += 4;
}
void sub_1c9cd7() // 0160:1c9cd7 +long
{
    esp -= 4;
    if (!ax)
        goto loc_1c9d41;
    memoryASet16(ds, 0x20ee83, 0x003c);
    push32(esi);
    esi = 0x002091a5;
    if (memoryAGet16(ds, 0x20ed9f) & 0xffff)
        goto loc_1c9cfb;
    esi = 0x002091b5;
loc_1c9cfb: // 0160:1c9cfb
    sub_1b1c6b();
    eax &= 0x0000000f;
    al = memoryAGet(ds, esi + eax);
    esi = pop32();
    sub_1b17b7();
    sub_1b1c25();
    ax &= 0x0003;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee9b, memoryAGet16(ds, 0x20ee9b) + ax);
    if ((short)memoryAGet16(ds, 0x20ee9b) <= (short)0x0014)
        goto loc_1c9d32;
    memoryASet16(ds, 0x20ee9b, memoryAGet16(ds, 0x20ee9b) - 0x0014);
loc_1c9d32: // 0160:1c9d32
    ax = memoryAGet16(ds, 0x20ee9b);
    ax += 0x00c9;
    sub_1b1715();
loc_1c9d41: // 0160:1c9d41
    esp += 4;
    return;
}
void sub_1c9d42() // 0160:1c9d42 +long
{
    esp -= 4;
    goto loc_1c9d42;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 28860 bytes
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 8346 bytes
loc_1c9d42: // 0160:1c9d42
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ca00c;
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1ca00c;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax += 0x0010;
    bx = memoryAGet16(ds, 0x20cf61);
    bx += 0x0010;
    sub_1cd7c5();
    memoryASet(ds, 0x20d123, al);
    if ((char)al <= (char)0x20)
        goto loc_1ca00c;
    if (al != 0x22)
        goto loc_1c9dbf;
    ax = memoryAGet16(ds, 0x20cfa9);
    ax >>= 5;
    if ((short)ax <= (short)0x0008)
        goto loc_1c9d9f;
    ax = 0x0008;
loc_1c9d9f: // 0160:1c9d9f
    memoryASet16(ds, 0x20d06f, ax);
    bx = memoryAGet16(ds, 0x20d0ff);
    cx = memoryAGet16(ds, 0x20cf4f);
    dx = memoryAGet16(ds, 0x20cf61);
    goto loc_1ca9c4;
loc_1c9dbf: // 0160:1c9dbf
    if (al != 0x23)
        goto loc_1c9de9;
    ax = memoryAGet16(ds, 0x20cfa9);
    ax >>= 4;
    if ((short)ax <= (short)0x0020)
        goto loc_1c9dd7;
    ax = 0x0020;
loc_1c9dd7: // 0160:1c9dd7
    memoryASet16(ds, 0x20d06f, ax);
    bx = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca984;
loc_1c9de9: // 0160:1c9de9
    if (al != 0x21)
        goto loc_1c9e24;
loc_1c9ded: // 0160:1c9ded
    if (memoryAGet16(ds, 0x20cf85) >= 0x0020)
        goto loc_1ca00c;
    memoryASet16(ds, 0x20cf85, 0x0020);
    esp += 4;
    return;
loc_1c9e05: // 0160:1c9e05
    if ((short)memoryAGet16(ds, 0x20d7b9) < (short)0x0012)
        goto loc_1c9e19;
    if ((short)memoryAGet16(ds, 0x20d7b9) <= (short)0x0016)
        goto loc_1c9ded;
loc_1c9e19: // 0160:1c9e19
    ax = 0x0105;
    sub_1b1715();
    goto loc_1c9ded;
loc_1c9e24: // 0160:1c9e24
    if (al != 0x38)
        goto loc_1c9e3d;
    if (memoryAGet16(ds, 0x20d371) == 0x0006)
        goto loc_1c9e05;
    ax = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca00d;
loc_1c9e3d: // 0160:1c9e3d
    if (al != 0x39)
        goto loc_1c9e56;
    if (memoryAGet16(ds, 0x20d379) == 0x0006)
        goto loc_1c9e05;
    ax = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca03d;
loc_1c9e56: // 0160:1c9e56
    if (al != 0x3a)
        goto loc_1c9e6f;
    if (memoryAGet16(ds, 0x20d381) == 0x0006)
        goto loc_1c9e05;
    ax = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca06d;
loc_1c9e6f: // 0160:1c9e6f
    if (al != 0x3b)
        goto loc_1c9e88;
    if (memoryAGet16(ds, 0x20d389) == 0x0006)
        goto loc_1c9e05;
    ax = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca09d;
loc_1c9e88: // 0160:1c9e88
    if (al != 0x3c)
        goto loc_1c9eba;
    ax = memoryAGet16(ds, 0x20d217);
    memoryASet16(ds, 0x20d217, 0x0005);
    if (memoryAGet16(ds, 0x20d7b9) == 0x000e)
        goto loc_1c9eae;
    memoryASet16(ds, 0x20d217, 0x0032);
loc_1c9eae: // 0160:1c9eae
    bx = memoryAGet16(ds, 0x20d0ff);
    goto loc_1ca9d9;
loc_1c9eba: // 0160:1c9eba
    if (al != 0x3d)
        goto loc_1c9ede;
    memoryASet16(ds, 0x20d06f, 0x0000);
    memoryASet16(ds, 0x20d05d, 0x0000);
    ax = memoryAGet16(ds, 0x20d825);
    memoryASet16(ds, 0x20cf61, memoryAGet16(ds, 0x20cf61) + ax);
    esp += 4;
    return;
loc_1c9ede: // 0160:1c9ede
    if (al != 0x3e)
        goto loc_1c9f6e;
    if (memoryAGet16(ds, 0x20d7b9) != 0x001e)
        goto loc_1c9f1f;
    ax = memoryAGet16(ds, 0x20cfa9);
    if ((short)ax <= (short)0x0096)
        goto loc_1c9f1e;
    ax >>= 4;
    memoryASet16(ds, 0x20d18f, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20d1a1, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20d1b3, ax);
loc_1c9f1e: // 0160:1c9f1e
    esp += 4;
    return;
loc_1c9f1f: // 0160:1c9f1f
    memoryASet16(ds, 0x20d06f, 0x0017);
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1c9f51;
    sub_1b1c25();
    ax &= 0x003f;
    ax -= 0x001f;
    ax += memoryAGet16(ds, 0x20cf97);
    ax &= 0x03ff;
    memoryASet16(ds, 0x20cf97, ax);
loc_1c9f51: // 0160:1c9f51
    memoryASet16(ds, 0x20cfa9, 0x0100);
    if (!(memoryAGet16(ds, 0x20d0ff) & 0xffff))
        goto loc_1ca00c;
    goto loc_1ca0e5;
loc_1c9f6e: // 0160:1c9f6e
    if (al != 0x3f)
        goto loc_1c9f86;
loc_1c9f72: // 0160:1c9f72
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0021)
        goto loc_1c9f85;
    memoryASet16(ds, 0x20cf85, 0x003b);
loc_1c9f85: // 0160:1c9f85
    esp += 4;
    return;
loc_1c9f86: // 0160:1c9f86
    if (al != 0x40)
        goto loc_1c9f9b;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1c9f72;
    esp += 4;
    return;
loc_1c9f9b: // 0160:1c9f9b
    if (al != 0x41)
        goto loc_1c9fb0;
    ax = memoryAGet16(ds, 0x20cf61);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1c9f72;
    esp += 4;
    return;
loc_1c9fb0: // 0160:1c9fb0
    if (al != 0x42)
        goto loc_1c9fc5;
    ax = memoryAGet16(ds, 0x20cf4f);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1c9f72;
    esp += 4;
    return;
loc_1c9fc5: // 0160:1c9fc5
    if (al != 0x43)
        goto loc_1c9fda;
    ax = memoryAGet16(ds, 0x20cf61);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1c9f72;
    esp += 4;
    return;
loc_1c9fda: // 0160:1c9fda
    if (al != 0x44)
        goto loc_1c9fe7;
    memoryASet16(ds, 0x20d1c5, memoryAGet16(ds, 0x20d1c5) + 0x0001);
    esp += 4;
    return;
loc_1c9fe7: // 0160:1c9fe7
    if (al != 0x45)
        goto loc_1ca00c;
    ax = memoryAGet16(ds, 0x20cfa9);
    if ((short)ax <= (short)0x0040)
        goto loc_1ca00c;
    bx = memoryAGet16(ds, 0x20d0ff);
    sub_1ca96f();
    memoryASet16(ds, 0x20cfa9, 0x0040);
loc_1ca00c: // 0160:1ca00c
    esp += 4;
    return;
loc_1ca00d: // 0160:1ca00d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca03c;
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1ca03c;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca03c;
    ax = memoryAGet16(ds, 0x20d373);
    sub_1ca0cd();
loc_1ca03c: // 0160:1ca03c
    esp += 4;
    return;
loc_1ca03d: // 0160:1ca03d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca06c;
    if (memoryAGet16(ds, 0x20d379) & 0xffff)
        goto loc_1ca06c;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca06c;
    ax = memoryAGet16(ds, 0x20d37b);
    sub_1ca0cd();
loc_1ca06c: // 0160:1ca06c
    esp += 4;
    return;
loc_1ca06d: // 0160:1ca06d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca09c;
    if (memoryAGet16(ds, 0x20d381) & 0xffff)
        goto loc_1ca09c;
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca09c;
    ax = memoryAGet16(ds, 0x20d383);
    sub_1ca0cd();
loc_1ca09c: // 0160:1ca09c
    esp += 4;
    return;
loc_1ca09d: // 0160:1ca09d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca0cc;
    if (memoryAGet16(ds, 0x20d389) & 0xffff)
        goto loc_1ca0cc;
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca0cc;
    ax = memoryAGet16(ds, 0x20d38b);
    sub_1ca0cd();
loc_1ca0cc: // 0160:1ca0cc
    esp += 4;
    return;
    // gap 24 bytes
loc_1ca0e5: // 0160:1ca0e5
    if (memoryAGet16(ds, 0x20d7b9) != 0x0018)
        goto loc_1ca0f6;
    al = 0x49;
    goto loc_1b17b7;
loc_1ca0f6: // 0160:1ca0f6
    if (memoryAGet16(ds, 0x20d7b9) != 0x0024)
        goto loc_1ca125;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1ca11e;
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x00fe;
    sub_1b1715();
loc_1ca11e: // 0160:1ca11e
    al = 0x4a;
    goto loc_1b17b7;
loc_1ca125: // 0160:1ca125
    al = 0x50;
    goto loc_1b17b7;
    // gap 2136 bytes
loc_1ca984: // 0160:1ca984
    if (!(bx & 0xffff))
        goto loc_1ca9c3;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9c3;
    al = 0x6a;
    sub_1b17b7();
    sub_1b1c25();
    ax &= 0x0007;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) + ax);
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) & 0x0007);
    ax = memoryAGet16(ds, 0x20ee87);
    ax += 0x00b9;
    goto loc_1b1715;
loc_1ca9c3: // 0160:1ca9c3
    esp += 4;
    return;
loc_1ca9c4: // 0160:1ca9c4
    if (!(bx & 0xffff))
        goto loc_1ca9d8;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9d8;
    al = 0x6b;
    goto loc_1b17b7;
loc_1ca9d8: // 0160:1ca9d8
    esp += 4;
    return;
loc_1ca9d9: // 0160:1ca9d9
    if (!(bx & 0xffff))
        goto loc_1caa0c;
    if (ax & 0xffff)
        goto loc_1caa0c;
    al = 0x7b;
    if ((short)memoryAGet16(ds, 0x20d7b9) > (short)0x000a)
        goto loc_1ca9f4;
    al = 0x7c;
loc_1ca9f4: // 0160:1ca9f4
    sub_1b17b7();
    if (memoryAGet16(ds, 0x20d7b9) != 0x0004)
        goto loc_1caa0c;
    ax = 0x0125;
    goto loc_1b1715;
loc_1caa0c: // 0160:1caa0c
    esp += 4;
    return;
}
void sub_1ca0cd() // 0160:1ca0cd +long
{
    esp -= 4;
    goto loc_1ca0cd;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9373 bytes
loc_1ca0cd: // 0160:1ca0cd
    if (memoryAGet16(ds, 0x20d7b9) == 0x0018)
        goto loc_1ca0e4;
    if (ax != 0x0001)
        goto loc_1ca0e4;
    al = 0x53;
    goto loc_1b17b7;
loc_1ca0e4: // 0160:1ca0e4
    esp += 4;
    return;
}
void sub_1ca12c() // 0160:1ca12c +long
{
    esp -= 4;
    goto loc_1ca12c;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 28860 bytes
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9061 bytes
loc_1ca00d: // 0160:1ca00d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca03c;
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1ca03c;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca03c;
    ax = memoryAGet16(ds, 0x20d373);
    sub_1ca0cd();
loc_1ca03c: // 0160:1ca03c
    esp += 4;
    return;
loc_1ca03d: // 0160:1ca03d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca06c;
    if (memoryAGet16(ds, 0x20d379) & 0xffff)
        goto loc_1ca06c;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca06c;
    ax = memoryAGet16(ds, 0x20d37b);
    sub_1ca0cd();
loc_1ca06c: // 0160:1ca06c
    esp += 4;
    return;
loc_1ca06d: // 0160:1ca06d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca09c;
    if (memoryAGet16(ds, 0x20d381) & 0xffff)
        goto loc_1ca09c;
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca09c;
    ax = memoryAGet16(ds, 0x20d383);
    sub_1ca0cd();
loc_1ca09c: // 0160:1ca09c
    esp += 4;
    return;
loc_1ca09d: // 0160:1ca09d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca0cc;
    if (memoryAGet16(ds, 0x20d389) & 0xffff)
        goto loc_1ca0cc;
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca0cc;
    ax = memoryAGet16(ds, 0x20d38b);
    sub_1ca0cd();
loc_1ca0cc: // 0160:1ca0cc
    esp += 4;
    return;
    // gap 24 bytes
loc_1ca0e5: // 0160:1ca0e5
    if (memoryAGet16(ds, 0x20d7b9) != 0x0018)
        goto loc_1ca0f6;
    al = 0x49;
    goto loc_1b17b7;
loc_1ca0f6: // 0160:1ca0f6
    if (memoryAGet16(ds, 0x20d7b9) != 0x0024)
        goto loc_1ca125;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1ca11e;
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x00fe;
    sub_1b1715();
loc_1ca11e: // 0160:1ca11e
    al = 0x4a;
    goto loc_1b17b7;
loc_1ca125: // 0160:1ca125
    al = 0x50;
    goto loc_1b17b7;
loc_1ca12c: // 0160:1ca12c
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ca3e7;
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1ca3e7;
    ax = memoryAGet16(ds, 0x20cf51);
    ax += 0x0010;
    bx = memoryAGet16(ds, 0x20cf63);
    bx += 0x0010;
    sub_1cd7c5();
    memoryASet(ds, 0x20d125, al);
    if ((char)al <= (char)0x20)
        goto loc_1ca3e7;
    if (al != 0x22)
        goto loc_1ca1a9;
    ax = memoryAGet16(ds, 0x20cfab);
    ax >>= 5;
    if ((short)ax <= (short)0x0008)
        goto loc_1ca189;
    ax = 0x0008;
loc_1ca189: // 0160:1ca189
    memoryASet16(ds, 0x20d071, ax);
    bx = memoryAGet16(ds, 0x20d101);
    cx = memoryAGet16(ds, 0x20cf51);
    dx = memoryAGet16(ds, 0x20cf63);
    goto loc_1ca9c4;
loc_1ca1a9: // 0160:1ca1a9
    if (al != 0x23)
        goto loc_1ca1d3;
    ax = memoryAGet16(ds, 0x20cfab);
    ax >>= 4;
    if ((short)ax <= (short)0x0020)
        goto loc_1ca1c1;
    ax = 0x0020;
loc_1ca1c1: // 0160:1ca1c1
    memoryASet16(ds, 0x20d071, ax);
    bx = memoryAGet16(ds, 0x20d101);
    goto loc_1ca984;
loc_1ca1d3: // 0160:1ca1d3
    if (al != 0x21)
        goto loc_1ca20e;
loc_1ca1d7: // 0160:1ca1d7
    if (memoryAGet16(ds, 0x20cf87) >= 0x0020)
        goto loc_1ca3e7;
    memoryASet16(ds, 0x20cf87, 0x0020);
    esp += 4;
    return;
loc_1ca1ef: // 0160:1ca1ef
    if ((short)memoryAGet16(ds, 0x20d7b9) < (short)0x0012)
        goto loc_1ca203;
    if ((short)memoryAGet16(ds, 0x20d7b9) <= (short)0x0016)
        goto loc_1ca1d7;
loc_1ca203: // 0160:1ca203
    ax = 0x0105;
    sub_1b1715();
    goto loc_1ca1d7;
loc_1ca20e: // 0160:1ca20e
    if (al != 0x38)
        goto loc_1ca227;
    if (memoryAGet16(ds, 0x20d371) == 0x0006)
        goto loc_1ca1ef;
    ax = memoryAGet16(ds, 0x20d101);
    goto loc_1ca00d;
loc_1ca227: // 0160:1ca227
    if (al != 0x39)
        goto loc_1ca240;
    if (memoryAGet16(ds, 0x20d379) == 0x0006)
        goto loc_1ca1ef;
    ax = memoryAGet16(ds, 0x20d101);
    goto loc_1ca03d;
loc_1ca240: // 0160:1ca240
    if (al != 0x3a)
        goto loc_1ca259;
    if (memoryAGet16(ds, 0x20d381) == 0x0006)
        goto loc_1ca1ef;
    ax = memoryAGet16(ds, 0x20d101);
    goto loc_1ca06d;
loc_1ca259: // 0160:1ca259
    if (al != 0x3b)
        goto loc_1ca272;
    if (memoryAGet16(ds, 0x20d389) == 0x0006)
        goto loc_1ca1ef;
    ax = memoryAGet16(ds, 0x20d101);
    goto loc_1ca09d;
loc_1ca272: // 0160:1ca272
    if (al != 0x3c)
        goto loc_1ca2a4;
    ax = memoryAGet16(ds, 0x20d219);
    memoryASet16(ds, 0x20d219, 0x0005);
    if (memoryAGet16(ds, 0x20d7b9) == 0x000e)
        goto loc_1ca298;
    memoryASet16(ds, 0x20d219, 0x0032);
loc_1ca298: // 0160:1ca298
    bx = memoryAGet16(ds, 0x20d101);
    goto loc_1ca9d9;
loc_1ca2a4: // 0160:1ca2a4
    if (al != 0x3d)
        goto loc_1ca2c8;
    memoryASet16(ds, 0x20d071, 0x0000);
    memoryASet16(ds, 0x20d05f, 0x0000);
    ax = memoryAGet16(ds, 0x20d825);
    memoryASet16(ds, 0x20cf63, memoryAGet16(ds, 0x20cf63) + ax);
    esp += 4;
    return;
loc_1ca2c8: // 0160:1ca2c8
    if (al != 0x3e)
        goto loc_1ca349;
    if (memoryAGet16(ds, 0x20d7b9) != 0x001e)
        goto loc_1ca305;
    ax = memoryAGet16(ds, 0x20cfab);
    if ((short)ax <= (short)0x0096)
        goto loc_1ca304;
    ax >>= 4;
    memoryASet16(ds, 0x20d191, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20d1a3, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20d1b5, ax);
loc_1ca304: // 0160:1ca304
    esp += 4;
    return;
loc_1ca305: // 0160:1ca305
    memoryASet16(ds, 0x20d071, 0x0017);
    sub_1b1c25();
    ax &= 0x003f;
    ax -= 0x001f;
    ax += memoryAGet16(ds, 0x20cf99);
    ax &= 0x03ff;
    memoryASet16(ds, 0x20cf99, ax);
    memoryASet16(ds, 0x20cfab, 0x0100);
    if (!(memoryAGet16(ds, 0x20d101) & 0xffff))
        goto loc_1ca3e7;
    goto loc_1ca0e5;
loc_1ca349: // 0160:1ca349
    if (al != 0x3f)
        goto loc_1ca361;
loc_1ca34d: // 0160:1ca34d
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0021)
        goto loc_1ca360;
    memoryASet16(ds, 0x20cf87, 0x003b);
loc_1ca360: // 0160:1ca360
    esp += 4;
    return;
loc_1ca361: // 0160:1ca361
    if (al != 0x40)
        goto loc_1ca376;
    ax = memoryAGet16(ds, 0x20cf51);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca34d;
    esp += 4;
    return;
loc_1ca376: // 0160:1ca376
    if (al != 0x41)
        goto loc_1ca38b;
    ax = memoryAGet16(ds, 0x20cf63);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca34d;
    esp += 4;
    return;
loc_1ca38b: // 0160:1ca38b
    if (al != 0x42)
        goto loc_1ca3a0;
    ax = memoryAGet16(ds, 0x20cf51);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca34d;
    esp += 4;
    return;
loc_1ca3a0: // 0160:1ca3a0
    if (al != 0x43)
        goto loc_1ca3b5;
    ax = memoryAGet16(ds, 0x20cf63);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca34d;
    esp += 4;
    return;
loc_1ca3b5: // 0160:1ca3b5
    if (al != 0x44)
        goto loc_1ca3c2;
    memoryASet16(ds, 0x20d1c7, memoryAGet16(ds, 0x20d1c7) + 0x0001);
    esp += 4;
    return;
loc_1ca3c2: // 0160:1ca3c2
    if (al != 0x45)
        goto loc_1ca3e7;
    ax = memoryAGet16(ds, 0x20cfab);
    if ((short)ax <= (short)0x0040)
        goto loc_1ca3e7;
    bx = memoryAGet16(ds, 0x20d101);
    sub_1ca96f();
    memoryASet16(ds, 0x20cfab, 0x0040);
loc_1ca3e7: // 0160:1ca3e7
    esp += 4;
    return;
    // gap 1436 bytes
loc_1ca984: // 0160:1ca984
    if (!(bx & 0xffff))
        goto loc_1ca9c3;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9c3;
    al = 0x6a;
    sub_1b17b7();
    sub_1b1c25();
    ax &= 0x0007;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) + ax);
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) & 0x0007);
    ax = memoryAGet16(ds, 0x20ee87);
    ax += 0x00b9;
    goto loc_1b1715;
loc_1ca9c3: // 0160:1ca9c3
    esp += 4;
    return;
loc_1ca9c4: // 0160:1ca9c4
    if (!(bx & 0xffff))
        goto loc_1ca9d8;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9d8;
    al = 0x6b;
    goto loc_1b17b7;
loc_1ca9d8: // 0160:1ca9d8
    esp += 4;
    return;
loc_1ca9d9: // 0160:1ca9d9
    if (!(bx & 0xffff))
        goto loc_1caa0c;
    if (ax & 0xffff)
        goto loc_1caa0c;
    al = 0x7b;
    if ((short)memoryAGet16(ds, 0x20d7b9) > (short)0x000a)
        goto loc_1ca9f4;
    al = 0x7c;
loc_1ca9f4: // 0160:1ca9f4
    sub_1b17b7();
    if (memoryAGet16(ds, 0x20d7b9) != 0x0004)
        goto loc_1caa0c;
    ax = 0x0125;
    goto loc_1b1715;
loc_1caa0c: // 0160:1caa0c
    esp += 4;
    return;
}
void sub_1ca3e8() // 0160:1ca3e8 +long
{
    esp -= 4;
    goto loc_1ca3e8;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 28860 bytes
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9061 bytes
loc_1ca00d: // 0160:1ca00d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca03c;
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1ca03c;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca03c;
    ax = memoryAGet16(ds, 0x20d373);
    sub_1ca0cd();
loc_1ca03c: // 0160:1ca03c
    esp += 4;
    return;
loc_1ca03d: // 0160:1ca03d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca06c;
    if (memoryAGet16(ds, 0x20d379) & 0xffff)
        goto loc_1ca06c;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca06c;
    ax = memoryAGet16(ds, 0x20d37b);
    sub_1ca0cd();
loc_1ca06c: // 0160:1ca06c
    esp += 4;
    return;
loc_1ca06d: // 0160:1ca06d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca09c;
    if (memoryAGet16(ds, 0x20d381) & 0xffff)
        goto loc_1ca09c;
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca09c;
    ax = memoryAGet16(ds, 0x20d383);
    sub_1ca0cd();
loc_1ca09c: // 0160:1ca09c
    esp += 4;
    return;
loc_1ca09d: // 0160:1ca09d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca0cc;
    if (memoryAGet16(ds, 0x20d389) & 0xffff)
        goto loc_1ca0cc;
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca0cc;
    ax = memoryAGet16(ds, 0x20d38b);
    sub_1ca0cd();
loc_1ca0cc: // 0160:1ca0cc
    esp += 4;
    return;
    // gap 24 bytes
loc_1ca0e5: // 0160:1ca0e5
    if (memoryAGet16(ds, 0x20d7b9) != 0x0018)
        goto loc_1ca0f6;
    al = 0x49;
    goto loc_1b17b7;
loc_1ca0f6: // 0160:1ca0f6
    if (memoryAGet16(ds, 0x20d7b9) != 0x0024)
        goto loc_1ca125;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1ca11e;
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x00fe;
    sub_1b1715();
loc_1ca11e: // 0160:1ca11e
    al = 0x4a;
    goto loc_1b17b7;
loc_1ca125: // 0160:1ca125
    al = 0x50;
    goto loc_1b17b7;
    // gap 700 bytes
loc_1ca3e8: // 0160:1ca3e8
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ca6b2;
    if (memoryAGet16(ds, 0x20d061) & 0xffff)
        goto loc_1ca6b2;
    ax = memoryAGet16(ds, 0x20cf53);
    ax += 0x0010;
    bx = memoryAGet16(ds, 0x20cf65);
    bx += 0x0010;
    sub_1cd7c5();
    memoryASet(ds, 0x20d127, al);
    if ((char)al <= (char)0x20)
        goto loc_1ca6b2;
    if (al != 0x22)
        goto loc_1ca465;
    ax = memoryAGet16(ds, 0x20cfad);
    ax >>= 5;
    if ((short)ax <= (short)0x0008)
        goto loc_1ca445;
    ax = 0x0008;
loc_1ca445: // 0160:1ca445
    memoryASet16(ds, 0x20d073, ax);
    bx = memoryAGet16(ds, 0x20d103);
    cx = memoryAGet16(ds, 0x20cf53);
    dx = memoryAGet16(ds, 0x20cf65);
    goto loc_1ca9c4;
loc_1ca465: // 0160:1ca465
    if (al != 0x23)
        goto loc_1ca48f;
    ax = memoryAGet16(ds, 0x20cfad);
    ax >>= 4;
    if ((short)ax <= (short)0x0020)
        goto loc_1ca47d;
    ax = 0x0020;
loc_1ca47d: // 0160:1ca47d
    memoryASet16(ds, 0x20d073, ax);
    bx = memoryAGet16(ds, 0x20d103);
    goto loc_1ca984;
loc_1ca48f: // 0160:1ca48f
    if (al != 0x21)
        goto loc_1ca4ca;
loc_1ca493: // 0160:1ca493
    if (memoryAGet16(ds, 0x20cf89) >= 0x0020)
        goto loc_1ca6b2;
    memoryASet16(ds, 0x20cf89, 0x0020);
    esp += 4;
    return;
loc_1ca4ab: // 0160:1ca4ab
    if ((short)memoryAGet16(ds, 0x20d7b9) < (short)0x0012)
        goto loc_1ca4bf;
    if ((short)memoryAGet16(ds, 0x20d7b9) <= (short)0x0016)
        goto loc_1ca493;
loc_1ca4bf: // 0160:1ca4bf
    ax = 0x0105;
    sub_1b1715();
    goto loc_1ca493;
loc_1ca4ca: // 0160:1ca4ca
    if (al != 0x38)
        goto loc_1ca4e3;
    if (memoryAGet16(ds, 0x20d371) == 0x0006)
        goto loc_1ca4ab;
    ax = memoryAGet16(ds, 0x20d103);
    goto loc_1ca00d;
loc_1ca4e3: // 0160:1ca4e3
    if (al != 0x39)
        goto loc_1ca4fc;
    if (memoryAGet16(ds, 0x20d379) == 0x0006)
        goto loc_1ca4ab;
    ax = memoryAGet16(ds, 0x20d103);
    goto loc_1ca03d;
loc_1ca4fc: // 0160:1ca4fc
    if (al != 0x3a)
        goto loc_1ca515;
    if (memoryAGet16(ds, 0x20d381) == 0x0006)
        goto loc_1ca4ab;
    ax = memoryAGet16(ds, 0x20d103);
    goto loc_1ca06d;
loc_1ca515: // 0160:1ca515
    if (al != 0x3b)
        goto loc_1ca52e;
    if (memoryAGet16(ds, 0x20d389) == 0x0006)
        goto loc_1ca4ab;
    ax = memoryAGet16(ds, 0x20d103);
    goto loc_1ca09d;
loc_1ca52e: // 0160:1ca52e
    if (al != 0x3c)
        goto loc_1ca560;
    ax = memoryAGet16(ds, 0x20d21b);
    memoryASet16(ds, 0x20d21b, 0x0005);
    if (memoryAGet16(ds, 0x20d7b9) == 0x000e)
        goto loc_1ca554;
    memoryASet16(ds, 0x20d21b, 0x0032);
loc_1ca554: // 0160:1ca554
    bx = memoryAGet16(ds, 0x20d103);
    goto loc_1ca9d9;
loc_1ca560: // 0160:1ca560
    if (al != 0x3d)
        goto loc_1ca584;
    memoryASet16(ds, 0x20d073, 0x0000);
    memoryASet16(ds, 0x20d061, 0x0000);
    ax = memoryAGet16(ds, 0x20d825);
    memoryASet16(ds, 0x20cf65, memoryAGet16(ds, 0x20cf65) + ax);
    esp += 4;
    return;
loc_1ca584: // 0160:1ca584
    if (al != 0x3e)
        goto loc_1ca614;
    if (memoryAGet16(ds, 0x20d7b9) != 0x001e)
        goto loc_1ca5c5;
    ax = memoryAGet16(ds, 0x20cfad);
    if ((short)ax <= (short)0x0096)
        goto loc_1ca5c4;
    ax >>= 4;
    memoryASet16(ds, 0x20d193, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20d1a5, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20d1b7, ax);
loc_1ca5c4: // 0160:1ca5c4
    esp += 4;
    return;
loc_1ca5c5: // 0160:1ca5c5
    memoryASet16(ds, 0x20d073, 0x0017);
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca5f7;
    sub_1b1c25();
    ax &= 0x003f;
    ax -= 0x001f;
    ax += memoryAGet16(ds, 0x20cf9b);
    ax &= 0x03ff;
    memoryASet16(ds, 0x20cf9b, ax);
loc_1ca5f7: // 0160:1ca5f7
    memoryASet16(ds, 0x20cfad, 0x0100);
    if (!(memoryAGet16(ds, 0x20d103) & 0xffff))
        goto loc_1ca6b2;
    goto loc_1ca0e5;
loc_1ca614: // 0160:1ca614
    if (al != 0x3f)
        goto loc_1ca62c;
loc_1ca618: // 0160:1ca618
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0021)
        goto loc_1ca62b;
    memoryASet16(ds, 0x20cf89, 0x003b);
loc_1ca62b: // 0160:1ca62b
    esp += 4;
    return;
loc_1ca62c: // 0160:1ca62c
    if (al != 0x40)
        goto loc_1ca641;
    ax = memoryAGet16(ds, 0x20cf53);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca618;
    esp += 4;
    return;
loc_1ca641: // 0160:1ca641
    if (al != 0x41)
        goto loc_1ca656;
    ax = memoryAGet16(ds, 0x20cf65);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca618;
    esp += 4;
    return;
loc_1ca656: // 0160:1ca656
    if (al != 0x42)
        goto loc_1ca66b;
    ax = memoryAGet16(ds, 0x20cf53);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca618;
    esp += 4;
    return;
loc_1ca66b: // 0160:1ca66b
    if (al != 0x43)
        goto loc_1ca680;
    ax = memoryAGet16(ds, 0x20cf65);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca618;
    esp += 4;
    return;
loc_1ca680: // 0160:1ca680
    if (al != 0x44)
        goto loc_1ca68d;
    memoryASet16(ds, 0x20d1c9, memoryAGet16(ds, 0x20d1c9) + 0x0001);
    esp += 4;
    return;
loc_1ca68d: // 0160:1ca68d
    if (al != 0x45)
        goto loc_1ca6b2;
    ax = memoryAGet16(ds, 0x20cfad);
    if ((short)ax <= (short)0x0040)
        goto loc_1ca6b2;
    bx = memoryAGet16(ds, 0x20d103);
    sub_1ca96f();
    memoryASet16(ds, 0x20cfad, 0x0040);
loc_1ca6b2: // 0160:1ca6b2
    esp += 4;
    return;
    // gap 721 bytes
loc_1ca984: // 0160:1ca984
    if (!(bx & 0xffff))
        goto loc_1ca9c3;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9c3;
    al = 0x6a;
    sub_1b17b7();
    sub_1b1c25();
    ax &= 0x0007;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) + ax);
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) & 0x0007);
    ax = memoryAGet16(ds, 0x20ee87);
    ax += 0x00b9;
    goto loc_1b1715;
loc_1ca9c3: // 0160:1ca9c3
    esp += 4;
    return;
loc_1ca9c4: // 0160:1ca9c4
    if (!(bx & 0xffff))
        goto loc_1ca9d8;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9d8;
    al = 0x6b;
    goto loc_1b17b7;
loc_1ca9d8: // 0160:1ca9d8
    esp += 4;
    return;
loc_1ca9d9: // 0160:1ca9d9
    if (!(bx & 0xffff))
        goto loc_1caa0c;
    if (ax & 0xffff)
        goto loc_1caa0c;
    al = 0x7b;
    if ((short)memoryAGet16(ds, 0x20d7b9) > (short)0x000a)
        goto loc_1ca9f4;
    al = 0x7c;
loc_1ca9f4: // 0160:1ca9f4
    sub_1b17b7();
    if (memoryAGet16(ds, 0x20d7b9) != 0x0004)
        goto loc_1caa0c;
    ax = 0x0125;
    goto loc_1b1715;
loc_1caa0c: // 0160:1caa0c
    esp += 4;
    return;
}
void sub_1ca6b3() // 0160:1ca6b3 +long
{
    esp -= 4;
    goto loc_1ca6b3;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 28860 bytes
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 9061 bytes
loc_1ca00d: // 0160:1ca00d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca03c;
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1ca03c;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca03c;
    ax = memoryAGet16(ds, 0x20d373);
    sub_1ca0cd();
loc_1ca03c: // 0160:1ca03c
    esp += 4;
    return;
loc_1ca03d: // 0160:1ca03d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca06c;
    if (memoryAGet16(ds, 0x20d379) & 0xffff)
        goto loc_1ca06c;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca06c;
    ax = memoryAGet16(ds, 0x20d37b);
    sub_1ca0cd();
loc_1ca06c: // 0160:1ca06c
    esp += 4;
    return;
loc_1ca06d: // 0160:1ca06d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca09c;
    if (memoryAGet16(ds, 0x20d381) & 0xffff)
        goto loc_1ca09c;
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca09c;
    ax = memoryAGet16(ds, 0x20d383);
    sub_1ca0cd();
loc_1ca09c: // 0160:1ca09c
    esp += 4;
    return;
loc_1ca09d: // 0160:1ca09d
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1ca0cc;
    if (memoryAGet16(ds, 0x20d389) & 0xffff)
        goto loc_1ca0cc;
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + 0x0001);
    if (!(ax & 0xffff))
        goto loc_1ca0cc;
    ax = memoryAGet16(ds, 0x20d38b);
    sub_1ca0cd();
loc_1ca0cc: // 0160:1ca0cc
    esp += 4;
    return;
    // gap 24 bytes
loc_1ca0e5: // 0160:1ca0e5
    if (memoryAGet16(ds, 0x20d7b9) != 0x0018)
        goto loc_1ca0f6;
    al = 0x49;
    goto loc_1b17b7;
loc_1ca0f6: // 0160:1ca0f6
    if (memoryAGet16(ds, 0x20d7b9) != 0x0024)
        goto loc_1ca125;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1ca11e;
    memoryASet16(ds, 0x20ee85, 0x0000);
    ax = 0x00fe;
    sub_1b1715();
loc_1ca11e: // 0160:1ca11e
    al = 0x4a;
    goto loc_1b17b7;
loc_1ca125: // 0160:1ca125
    al = 0x50;
    goto loc_1b17b7;
    // gap 1415 bytes
loc_1ca6b3: // 0160:1ca6b3
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ca96e;
    if (memoryAGet16(ds, 0x20d063) & 0xffff)
        goto loc_1ca96e;
    ax = memoryAGet16(ds, 0x20cf55);
    ax += 0x0010;
    bx = memoryAGet16(ds, 0x20cf67);
    bx += 0x0010;
    sub_1cd7c5();
    memoryASet(ds, 0x20d129, al);
    if ((char)al <= (char)0x20)
        goto loc_1ca96e;
    if (al != 0x22)
        goto loc_1ca730;
    ax = memoryAGet16(ds, 0x20cfaf);
    ax >>= 5;
    if ((short)ax <= (short)0x0008)
        goto loc_1ca710;
    ax = 0x0008;
loc_1ca710: // 0160:1ca710
    memoryASet16(ds, 0x20d075, ax);
    bx = memoryAGet16(ds, 0x20d105);
    cx = memoryAGet16(ds, 0x20cf55);
    dx = memoryAGet16(ds, 0x20cf67);
    goto loc_1ca9c4;
loc_1ca730: // 0160:1ca730
    if (al != 0x23)
        goto loc_1ca75a;
    ax = memoryAGet16(ds, 0x20cfaf);
    ax >>= 4;
    if ((short)ax <= (short)0x0020)
        goto loc_1ca748;
    ax = 0x0020;
loc_1ca748: // 0160:1ca748
    memoryASet16(ds, 0x20d075, ax);
    bx = memoryAGet16(ds, 0x20d105);
    goto loc_1ca984;
loc_1ca75a: // 0160:1ca75a
    if (al != 0x21)
        goto loc_1ca795;
loc_1ca75e: // 0160:1ca75e
    if (memoryAGet16(ds, 0x20cf8b) >= 0x0020)
        goto loc_1ca96e;
    memoryASet16(ds, 0x20cf8b, 0x0020);
    esp += 4;
    return;
loc_1ca776: // 0160:1ca776
    if ((short)memoryAGet16(ds, 0x20d7b9) < (short)0x0012)
        goto loc_1ca78a;
    if ((short)memoryAGet16(ds, 0x20d7b9) <= (short)0x0016)
        goto loc_1ca75e;
loc_1ca78a: // 0160:1ca78a
    ax = 0x0105;
    sub_1b1715();
    goto loc_1ca75e;
loc_1ca795: // 0160:1ca795
    if (al != 0x38)
        goto loc_1ca7ae;
    if (memoryAGet16(ds, 0x20d371) == 0x0006)
        goto loc_1ca776;
    ax = memoryAGet16(ds, 0x20d105);
    goto loc_1ca00d;
loc_1ca7ae: // 0160:1ca7ae
    if (al != 0x39)
        goto loc_1ca7c7;
    if (memoryAGet16(ds, 0x20d379) == 0x0006)
        goto loc_1ca776;
    ax = memoryAGet16(ds, 0x20d105);
    goto loc_1ca03d;
loc_1ca7c7: // 0160:1ca7c7
    if (al != 0x3a)
        goto loc_1ca7e0;
    if (memoryAGet16(ds, 0x20d381) == 0x0006)
        goto loc_1ca776;
    ax = memoryAGet16(ds, 0x20d105);
    goto loc_1ca06d;
loc_1ca7e0: // 0160:1ca7e0
    if (al != 0x3b)
        goto loc_1ca7f9;
    if (memoryAGet16(ds, 0x20d389) == 0x0006)
        goto loc_1ca776;
    ax = memoryAGet16(ds, 0x20d105);
    goto loc_1ca09d;
loc_1ca7f9: // 0160:1ca7f9
    if (al != 0x3c)
        goto loc_1ca82b;
    ax = memoryAGet16(ds, 0x20d21d);
    memoryASet16(ds, 0x20d21d, 0x0005);
    if (memoryAGet16(ds, 0x20d7b9) == 0x000e)
        goto loc_1ca81f;
    memoryASet16(ds, 0x20d21d, 0x0032);
loc_1ca81f: // 0160:1ca81f
    bx = memoryAGet16(ds, 0x20d105);
    goto loc_1ca9d9;
loc_1ca82b: // 0160:1ca82b
    if (al != 0x3d)
        goto loc_1ca84f;
    memoryASet16(ds, 0x20d075, 0x0000);
    memoryASet16(ds, 0x20d063, 0x0000);
    ax = memoryAGet16(ds, 0x20d825);
    memoryASet16(ds, 0x20cf67, memoryAGet16(ds, 0x20cf67) + ax);
    esp += 4;
    return;
loc_1ca84f: // 0160:1ca84f
    if (al != 0x3e)
        goto loc_1ca8d0;
    if (memoryAGet16(ds, 0x20d7b9) != 0x001e)
        goto loc_1ca88c;
    ax = memoryAGet16(ds, 0x20cfaf);
    if ((short)ax <= (short)0x0096)
        goto loc_1ca88b;
    ax >>= 4;
    memoryASet16(ds, 0x20d195, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20d1a7, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20d1b9, ax);
loc_1ca88b: // 0160:1ca88b
    esp += 4;
    return;
loc_1ca88c: // 0160:1ca88c
    memoryASet16(ds, 0x20d075, 0x0017);
    sub_1b1c25();
    ax &= 0x003f;
    ax -= 0x001f;
    ax += memoryAGet16(ds, 0x20cf9d);
    ax &= 0x03ff;
    memoryASet16(ds, 0x20cf9d, ax);
    memoryASet16(ds, 0x20cfaf, 0x0100);
    if (!(memoryAGet16(ds, 0x20d105) & 0xffff))
        goto loc_1ca96e;
    goto loc_1ca0e5;
loc_1ca8d0: // 0160:1ca8d0
    if (al != 0x3f)
        goto loc_1ca8e8;
loc_1ca8d4: // 0160:1ca8d4
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0021)
        goto loc_1ca8e7;
    memoryASet16(ds, 0x20cf8b, 0x003b);
loc_1ca8e7: // 0160:1ca8e7
    esp += 4;
    return;
loc_1ca8e8: // 0160:1ca8e8
    if (al != 0x40)
        goto loc_1ca8fd;
    ax = memoryAGet16(ds, 0x20cf55);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca8d4;
    esp += 4;
    return;
loc_1ca8fd: // 0160:1ca8fd
    if (al != 0x41)
        goto loc_1ca912;
    ax = memoryAGet16(ds, 0x20cf67);
    ax &= 0x0007;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca8d4;
    esp += 4;
    return;
loc_1ca912: // 0160:1ca912
    if (al != 0x42)
        goto loc_1ca927;
    ax = memoryAGet16(ds, 0x20cf55);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca8d4;
    esp += 4;
    return;
loc_1ca927: // 0160:1ca927
    if (al != 0x43)
        goto loc_1ca93c;
    ax = memoryAGet16(ds, 0x20cf67);
    ax &= 0x0007;
    if ((short)ax > (short)0x0002)
        goto loc_1ca8d4;
    esp += 4;
    return;
loc_1ca93c: // 0160:1ca93c
    if (al != 0x44)
        goto loc_1ca949;
    memoryASet16(ds, 0x20d1cb, memoryAGet16(ds, 0x20d1cb) + 0x0001);
    esp += 4;
    return;
loc_1ca949: // 0160:1ca949
    if (al != 0x45)
        goto loc_1ca96e;
    ax = memoryAGet16(ds, 0x20cfaf);
    if ((short)ax <= (short)0x0040)
        goto loc_1ca96e;
    bx = memoryAGet16(ds, 0x20d105);
    sub_1ca96f();
    memoryASet16(ds, 0x20cfaf, 0x0040);
loc_1ca96e: // 0160:1ca96e
    esp += 4;
    return;
    // gap 21 bytes
loc_1ca984: // 0160:1ca984
    if (!(bx & 0xffff))
        goto loc_1ca9c3;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9c3;
    al = 0x6a;
    sub_1b17b7();
    sub_1b1c25();
    ax &= 0x0007;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) + ax);
    memoryASet16(ds, 0x20ee87, memoryAGet16(ds, 0x20ee87) & 0x0007);
    ax = memoryAGet16(ds, 0x20ee87);
    ax += 0x00b9;
    goto loc_1b1715;
loc_1ca9c3: // 0160:1ca9c3
    esp += 4;
    return;
loc_1ca9c4: // 0160:1ca9c4
    if (!(bx & 0xffff))
        goto loc_1ca9d8;
    if ((short)ax <= (short)0x0004)
        goto loc_1ca9d8;
    al = 0x6b;
    goto loc_1b17b7;
loc_1ca9d8: // 0160:1ca9d8
    esp += 4;
    return;
loc_1ca9d9: // 0160:1ca9d9
    if (!(bx & 0xffff))
        goto loc_1caa0c;
    if (ax & 0xffff)
        goto loc_1caa0c;
    al = 0x7b;
    if ((short)memoryAGet16(ds, 0x20d7b9) > (short)0x000a)
        goto loc_1ca9f4;
    al = 0x7c;
loc_1ca9f4: // 0160:1ca9f4
    sub_1b17b7();
    if (memoryAGet16(ds, 0x20d7b9) != 0x0004)
        goto loc_1caa0c;
    ax = 0x0125;
    goto loc_1b1715;
loc_1caa0c: // 0160:1caa0c
    esp += 4;
    return;
}
void sub_1ca96f() // 0160:1ca96f +long
{
    esp -= 4;
    goto loc_1ca96f;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 11583 bytes
loc_1ca96f: // 0160:1ca96f
    if ((short)ax <= (short)0x0080)
        goto loc_1ca983;
    if (!(bx & 0xffff))
        goto loc_1ca983;
    al = 0x4f;
    goto loc_1b17b7;
loc_1ca983: // 0160:1ca983
    esp += 4;
    return;
}
void sub_1caa0d() // 0160:1caa0d +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20cf85) == 0x0048)
        goto loc_1cadc2;
    if (memoryAGet16(ds, 0x20cf85) == 0x004f)
        goto loc_1caa3d;
    if (memoryAGet16(ds, 0x20cf85) == 0x0041)
        goto loc_1caa3d;
    if (memoryAGet16(ds, 0x20cf85) != 0x0033)
        goto loc_1cadfb;
loc_1caa3d: // 0160:1caa3d
    if (memoryAGet16(ds, 0x20d89f) & 0xffff)
        goto loc_1caa56;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1cad7b;
loc_1caa56: // 0160:1caa56
    if (!(memoryAGet16(ds, 0x20d2b7) & 0xffff))
        goto loc_1cad7b;
    esi = 0x0020cf3f;
    edi = 0x0020cf87;
    bp = 0x0000;
    dx = 0;
    ecx = 0x00000008;
loc_1caa7b: // 0160:1caa7b
    bx = memoryAGet16(ds, edi);
    edi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if (!ax)
        goto loc_1caaa8;
    if ((short)ax >= (short)0x0005)
        goto loc_1caaa8;
    if ((short)bx >= (short)0x0049)
        goto loc_1caaa8;
    bp++;
    if (bx == 0x0041)
        goto loc_1caaa6;
    if (bx != 0x0033)
        goto loc_1caaa8;
loc_1caaa6: // 0160:1caaa6
    dx++;
loc_1caaa8: // 0160:1caaa8
    if (--ecx)
        goto loc_1caa7b;
    if (dx != bp)
        goto loc_1cadfb;
    if (!(memoryAGet16(ds, 0x20d7b1) & 0xffff))
        goto loc_1cac4f;
loc_1caac2: // 0160:1caac2
    ax = memoryAGet16(ds, 0x20d7ab);
    if (ax)
        goto loc_1cab26;
    ax = memoryAGet16(ds, 0x20d7ad);
    if (!ax)
        goto loc_1cab12;
    if (ax == 0x0001)
        goto loc_1caaf6;
    if (ax == 0x0002)
        goto loc_1cab04;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax != 0x0001)
        goto loc_1cab85;
    if (ax == 0x0001)
        goto loc_1cab70;
loc_1caaf6: // 0160:1caaf6
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax != 0x0002)
        goto loc_1cab70;
    if (ax == 0x0002)
        goto loc_1cab5b;
loc_1cab04: // 0160:1cab04
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax != 0x0001)
        goto loc_1cab85;
    if (ax == 0x0001)
        goto loc_1cab5b;
loc_1cab12: // 0160:1cab12
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax != 0x0001)
        goto loc_1cab85;
    if (ax != 0x0002)
        goto loc_1cab70;
    if (ax == 0x0002)
        goto loc_1cab5b;
loc_1cab26: // 0160:1cab26
    memoryASet16(ds, 0x20d7ab, 0x0000);
    ax = memoryAGet16(ds, 0x20d7a7);
    if (!ax)
        goto loc_1cab85;
    if (ax == 0x0001)
        goto loc_1cab70;
    if (ax == 0x0002)
        goto loc_1cab5b;
    bx = memoryAGet16(ds, 0x20d051);
    ecx = memoryAGet32(ds, 0x20d0cf);
    edx = memoryAGet32(ds, 0x20d0d3);
    goto loc_1cab98;
loc_1cab5b: // 0160:1cab5b
    bx = memoryAGet16(ds, 0x20d04f);
    ecx = memoryAGet32(ds, 0x20d0c7);
    edx = memoryAGet32(ds, 0x20d0cb);
    goto loc_1cab98;
loc_1cab70: // 0160:1cab70
    bx = memoryAGet16(ds, 0x20d04d);
    ecx = memoryAGet32(ds, 0x20d0bf);
    edx = memoryAGet32(ds, 0x20d0c3);
    goto loc_1cab98;
loc_1cab85: // 0160:1cab85
    bx = memoryAGet16(ds, 0x20d04b);
    ecx = memoryAGet32(ds, 0x20d0b7);
    edx = memoryAGet32(ds, 0x20d0bb);
loc_1cab98: // 0160:1cab98
    memoryASet16(ds, 0x20d04b, bx);
    memoryASet16(ds, 0x20d04d, bx);
    memoryASet16(ds, 0x20d04f, bx);
    memoryASet16(ds, 0x20d051, bx);
    memoryASet32(ds, 0x20d0b7, ecx);
    memoryASet32(ds, 0x20d0bf, ecx);
    memoryASet32(ds, 0x20d0c7, ecx);
    memoryASet32(ds, 0x20d0cf, ecx);
    memoryASet32(ds, 0x20d0bb, edx);
    memoryASet32(ds, 0x20d0c3, edx);
    memoryASet32(ds, 0x20d0cb, edx);
    memoryASet32(ds, 0x20d0d3, edx);
    sub_1cadfc();
    sub_1cb035();
    sub_1cb291();
    sub_1cb497();
    ax = memoryAGet16(ds, 0x20d04b);
    memoryASet16(ds, 0x20d04d, ax);
    memoryASet16(ds, 0x20d04f, ax);
    memoryASet16(ds, 0x20d051, ax);
    ax = memoryAGet16(ds, 0x20d081);
    memoryASet16(ds, 0x20d083, ax);
    memoryASet16(ds, 0x20d085, ax);
    memoryASet16(ds, 0x20d087, ax);
    eax = memoryAGet32(ds, 0x20d093);
    memoryASet32(ds, 0x20d097, eax);
    memoryASet32(ds, 0x20d09b, eax);
    memoryASet32(ds, 0x20d09f, eax);
    memoryASet16(ds, 0x20d7b1, 0x0001);
    memoryASet16(ds, 0x20d2b9, 0x0001);
    esp += 4;
    return;
loc_1cac4f: // 0160:1cac4f
    if (!(memoryAGet16(ds, 0x20d2b5) & 0xffff))
        goto loc_1cadfb;
    if (!(memoryAGet16(ds, 0x20d2b9) & 0xffff))
        goto loc_1caac2;
    memoryASet16(ds, 0x20d2b9, 0x0000);
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cacb7;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cacb7;
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20cf73, 0x0042);
    memoryASet16(ds, 0x20cf85, 0x0042);
    memoryASet16(ds, 0x20d05d, 0x0000);
    memoryASet16(ds, 0x20d06f, 0x0000);
loc_1cacb7: // 0160:1cacb7
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cacf8;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cacf8;
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20cf75, 0x0042);
    memoryASet16(ds, 0x20cf87, 0x0042);
    memoryASet16(ds, 0x20d05f, 0x0000);
    memoryASet16(ds, 0x20d071, 0x0000);
loc_1cacf8: // 0160:1cacf8
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cad39;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1cad39;
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20cf77, 0x0042);
    memoryASet16(ds, 0x20cf89, 0x0042);
    memoryASet16(ds, 0x20d061, 0x0000);
    memoryASet16(ds, 0x20d073, 0x0000);
loc_1cad39: // 0160:1cad39
    if (memoryAGet16(ds, 0x20d7a9) == 0x0004)
        goto loc_1cad7a;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0004)
        goto loc_1cad7a;
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20cf79, 0x0042);
    memoryASet16(ds, 0x20cf8b, 0x0042);
    memoryASet16(ds, 0x20d063, 0x0000);
    memoryASet16(ds, 0x20d075, 0x0000);
loc_1cad7a: // 0160:1cad7a
    esp += 4;
    return;
loc_1cad7b: // 0160:1cad7b
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cadfb;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cadfb;
    sub_1cadfc();
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20cf73, 0x0042);
    memoryASet16(ds, 0x20cf85, 0x0042);
    memoryASet16(ds, 0x20d05d, 0x0000);
    memoryASet16(ds, 0x20d06f, 0x0000);
    esp += 4;
    return;
loc_1cadc2: // 0160:1cadc2
    memoryASet16(ds, 0x20cf85, 0x0000);
    ax = memoryAGet16(ds, 0x20d04b);
    ax >>= 6;
    ax &= 0x001c;
    memoryASet16(ds, 0x20cf73, ax);
    ax <<= 5;
    memoryASet16(ds, 0x20d039, ax);
    memoryASet16(ds, 0x20d0ff, 0x0001);
    memoryASet16(ds, 0x20d111, 0x0001);
loc_1cadfb: // 0160:1cadfb
    esp += 4;
    return;
}
void sub_1cadfc() // 0160:1cadfc +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d17d, 0x0000);
    memoryASet16(ds, 0x20d1c5, 0x0000);
    memoryASet16(ds, 0x20d123, 0x0000);
    ax = memoryAGet16(ds, 0x20d04b);
    sub_1cb68e();
    if (!ax)
        goto loc_1cae58;
    memoryASet16(ds, 0x20d0b7, bx);
    memoryASet16(ds, 0x20d0b9, cx);
    memoryASet16(ds, 0x20d0bb, dx);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d0bd, bp);
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d04b, bp);
loc_1cae58: // 0160:1cae58
    ax = memoryAGet16(ds, 0x20d0bb);
    ax -= memoryAGet16(ds, 0x20d0b7);
    if ((short)ax <= (short)memoryAGet16(ds, 0x20ee37))
        goto loc_1cae85;
    ax -= memoryAGet16(ds, 0x20ee37);
    ax >>= 1;
    memoryASet16(ds, 0x20d0b7, memoryAGet16(ds, 0x20d0b7) + ax);
    ax = memoryAGet16(ds, 0x20ee37);
loc_1cae85: // 0160:1cae85
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1caea3;
    bx = 0x0003;
    goto loc_1caeac;
loc_1caea3: // 0160:1caea3
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
loc_1caeac: // 0160:1caeac
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0000);
    sub_1cb5f9();
    ax += memoryAGet16(ds, 0x20d0b7);
    ax += cx;
    memoryASet16(ds, 0x20cf4f, ax);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d0b9);
    bx = memoryAGet16(ds, 0x20d0bd);
    if ((short)bx <= (short)ax)
        goto loc_1caf39;
    bx -= ax;
    ax = bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1caf07;
    bx = 0x0003;
    goto loc_1caf10;
loc_1caf07: // 0160:1caf07
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
loc_1caf10: // 0160:1caf10
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0000);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0b9);
    bx += ax;
    bx += cx;
    bx -= 0x0010;
    ax = bx;
    goto loc_1caf8a;
loc_1caf39: // 0160:1caf39
    ax -= bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1caf5a;
    bx = 0x0003;
    goto loc_1caf63;
loc_1caf5a: // 0160:1caf5a
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
loc_1caf63: // 0160:1caf63
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0000);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0b9);
    bx -= ax;
    bx -= cx;
    bx -= 0x0010;
    ax = bx;
loc_1caf8a: // 0160:1caf8a
    memoryASet16(ds, 0x20cf61, ax);
    esp += 4;
}
void sub_1caf91() // 0160:1caf91 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20cf87) == 0x0048)
        goto loc_1caffb;
    if (memoryAGet16(ds, 0x20cf87) == 0x0041)
        goto loc_1cafb3;
    if (memoryAGet16(ds, 0x20cf87) != 0x0033)
        goto loc_1cb034;
loc_1cafb3: // 0160:1cafb3
    if (memoryAGet16(ds, 0x20d2b7) & 0xffff)
        goto loc_1cb034;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cb034;
    sub_1cb035();
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20cf75, 0x0042);
    memoryASet16(ds, 0x20cf87, 0x0042);
    memoryASet16(ds, 0x20d05f, 0x0000);
    memoryASet16(ds, 0x20d071, 0x0000);
    esp += 4;
    return;
loc_1caffb: // 0160:1caffb
    memoryASet16(ds, 0x20cf87, 0x0000);
    ax = memoryAGet16(ds, 0x20d04d);
    ax >>= 6;
    ax &= 0x001c;
    memoryASet16(ds, 0x20cf75, ax);
    ax <<= 5;
    memoryASet16(ds, 0x20d03b, ax);
    memoryASet16(ds, 0x20d101, 0x0001);
    memoryASet16(ds, 0x20d113, 0x0001);
loc_1cb034: // 0160:1cb034
    esp += 4;
    return;
}
void sub_1cb035() // 0160:1cb035 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d17f, 0x0000);
    memoryASet16(ds, 0x20d1c7, 0x0000);
    memoryASet16(ds, 0x20d125, 0x0000);
    ax = memoryAGet16(ds, 0x20d04d);
    sub_1cb68e();
    if (!ax)
        goto loc_1cb091;
    memoryASet16(ds, 0x20d0bf, bx);
    memoryASet16(ds, 0x20d0c1, cx);
    memoryASet16(ds, 0x20d0c3, dx);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d0c5, bp);
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d04d, bp);
loc_1cb091: // 0160:1cb091
    ax = memoryAGet16(ds, 0x20d0c3);
    ax -= memoryAGet16(ds, 0x20d0bf);
    if ((short)ax <= (short)memoryAGet16(ds, 0x20ee37))
        goto loc_1cb0be;
    ax -= memoryAGet16(ds, 0x20ee37);
    ax >>= 1;
    memoryASet16(ds, 0x20d0bf, memoryAGet16(ds, 0x20d0bf) + ax);
    ax = memoryAGet16(ds, 0x20ee37);
loc_1cb0be: // 0160:1cb0be
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cb0e4;
    bx = 0x0003;
    edx = 0;
    div16(bx);
    ax += ax;
    goto loc_1cb100;
loc_1cb0e4: // 0160:1cb0e4
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0001);
    sub_1cb5f9();
loc_1cb100: // 0160:1cb100
    ax += memoryAGet16(ds, 0x20d0bf);
    ax += cx;
    memoryASet16(ds, 0x20cf51, ax);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d0c1);
    bx = memoryAGet16(ds, 0x20d0c5);
    if ((short)bx <= (short)ax)
        goto loc_1cb182;
    bx -= ax;
    ax = bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cb150;
    bx = 0x0003;
    edx = 0;
    div16(bx);
    ax += ax;
    goto loc_1cb16c;
loc_1cb150: // 0160:1cb150
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0001);
    sub_1cb5f9();
loc_1cb16c: // 0160:1cb16c
    bx = memoryAGet16(ds, 0x20d0c1);
    bx += ax;
    bx += cx;
    bx -= 0x0010;
    ax = bx;
    goto loc_1cb1db;
loc_1cb182: // 0160:1cb182
    ax -= bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cb1ab;
    bx = 0x0003;
    edx = 0;
    div16(bx);
    ax += ax;
    goto loc_1cb1c7;
loc_1cb1ab: // 0160:1cb1ab
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0001);
    sub_1cb5f9();
loc_1cb1c7: // 0160:1cb1c7
    bx = memoryAGet16(ds, 0x20d0c1);
    bx -= ax;
    bx -= cx;
    bx -= 0x0010;
    ax = bx;
loc_1cb1db: // 0160:1cb1db
    memoryASet16(ds, 0x20cf63, ax);
    esp += 4;
}
void sub_1cb1e2() // 0160:1cb1e2 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20cf89) == 0x0048)
        goto loc_1cb257;
    if (memoryAGet16(ds, 0x20cf89) == 0x0041)
        goto loc_1cb204;
    if (memoryAGet16(ds, 0x20cf89) != 0x0033)
        goto loc_1cb290;
loc_1cb204: // 0160:1cb204
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1cb21a;
    if (memoryAGet16(ds, 0x20d2b7) & 0xffff)
        goto loc_1cb290;
loc_1cb21a: // 0160:1cb21a
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1cb290;
    sub_1cb291();
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20cf77, 0x0042);
    memoryASet16(ds, 0x20cf89, 0x0042);
    memoryASet16(ds, 0x20d061, 0x0000);
    memoryASet16(ds, 0x20d073, 0x0000);
    esp += 4;
    return;
loc_1cb257: // 0160:1cb257
    memoryASet16(ds, 0x20cf89, 0x0000);
    ax = memoryAGet16(ds, 0x20d04f);
    ax >>= 6;
    ax &= 0x001c;
    memoryASet16(ds, 0x20cf77, ax);
    ax <<= 5;
    memoryASet16(ds, 0x20d03d, ax);
    memoryASet16(ds, 0x20d103, 0x0001);
    memoryASet16(ds, 0x20d115, 0x0001);
loc_1cb290: // 0160:1cb290
    esp += 4;
    return;
}
void sub_1cb291() // 0160:1cb291 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d181, 0x0000);
    memoryASet16(ds, 0x20d1c9, 0x0000);
    memoryASet16(ds, 0x20d127, 0x0000);
    ax = memoryAGet16(ds, 0x20d04f);
    sub_1cb68e();
    if (!ax)
        goto loc_1cb2ed;
    memoryASet16(ds, 0x20d0c7, bx);
    memoryASet16(ds, 0x20d0c9, cx);
    memoryASet16(ds, 0x20d0cb, dx);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d0cd, bp);
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d04f, bp);
loc_1cb2ed: // 0160:1cb2ed
    ax = memoryAGet16(ds, 0x20d0cb);
    ax -= memoryAGet16(ds, 0x20d0c7);
    if ((short)ax <= (short)memoryAGet16(ds, 0x20ee37))
        goto loc_1cb31a;
    ax -= memoryAGet16(ds, 0x20ee37);
    ax >>= 1;
    memoryASet16(ds, 0x20d0c7, memoryAGet16(ds, 0x20d0c7) + ax);
    ax = memoryAGet16(ds, 0x20ee37);
loc_1cb31a: // 0160:1cb31a
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0002);
    sub_1cb5f9();
    ax += memoryAGet16(ds, 0x20d0c7);
    ax += cx;
    memoryASet16(ds, 0x20cf53, ax);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d0c9);
    bx = memoryAGet16(ds, 0x20d0cd);
    if ((short)bx <= (short)ax)
        goto loc_1cb3ac;
    bx -= ax;
    ax = bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0002);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0c9);
    bx += ax;
    bx += cx;
    bx -= 0x0010;
    ax = bx;
    goto loc_1cb3ec;
loc_1cb3ac: // 0160:1cb3ac
    ax -= bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0002);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0c9);
    bx -= ax;
    bx -= cx;
    bx -= 0x0010;
    ax = bx;
loc_1cb3ec: // 0160:1cb3ec
    memoryASet16(ds, 0x20cf65, ax);
    esp += 4;
}
void sub_1cb3f3() // 0160:1cb3f3 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20cf8b) == 0x0048)
        goto loc_1cb45d;
    if (memoryAGet16(ds, 0x20cf8b) == 0x0041)
        goto loc_1cb415;
    if (memoryAGet16(ds, 0x20cf8b) != 0x0033)
        goto loc_1cb496;
loc_1cb415: // 0160:1cb415
    if (memoryAGet16(ds, 0x20d2b7) & 0xffff)
        goto loc_1cb496;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0004)
        goto loc_1cb496;
    sub_1cb497();
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20cf79, 0x0042);
    memoryASet16(ds, 0x20cf8b, 0x0042);
    memoryASet16(ds, 0x20d063, 0x0000);
    memoryASet16(ds, 0x20d075, 0x0000);
    esp += 4;
    return;
loc_1cb45d: // 0160:1cb45d
    memoryASet16(ds, 0x20cf8b, 0x0000);
    ax = memoryAGet16(ds, 0x20d051);
    ax >>= 6;
    ax &= 0x001c;
    memoryASet16(ds, 0x20cf79, ax);
    ax <<= 5;
    memoryASet16(ds, 0x20d03f, ax);
    memoryASet16(ds, 0x20d105, 0x0001);
    memoryASet16(ds, 0x20d117, 0x0001);
loc_1cb496: // 0160:1cb496
    esp += 4;
    return;
}
void sub_1cb497() // 0160:1cb497 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d183, 0x0000);
    memoryASet16(ds, 0x20d1cb, 0x0000);
    memoryASet16(ds, 0x20d129, 0x0000);
    ax = memoryAGet16(ds, 0x20d051);
    sub_1cb68e();
    if (!ax)
        goto loc_1cb4f3;
    memoryASet16(ds, 0x20d0cf, bx);
    memoryASet16(ds, 0x20d0d1, cx);
    memoryASet16(ds, 0x20d0d3, dx);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20d0d5, bp);
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20d051, bp);
loc_1cb4f3: // 0160:1cb4f3
    ax = memoryAGet16(ds, 0x20d0d3);
    ax -= memoryAGet16(ds, 0x20d0cf);
    if ((short)ax <= (short)memoryAGet16(ds, 0x20ee37))
        goto loc_1cb520;
    ax -= memoryAGet16(ds, 0x20ee37);
    ax >>= 1;
    memoryASet16(ds, 0x20d0cf, memoryAGet16(ds, 0x20d0cf) + ax);
    ax = memoryAGet16(ds, 0x20ee37);
loc_1cb520: // 0160:1cb520
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0003);
    sub_1cb5f9();
    ax += memoryAGet16(ds, 0x20d0cf);
    ax += cx;
    memoryASet16(ds, 0x20cf55, ax);
    eax = 0;
    ax = memoryAGet16(ds, 0x20d0d1);
    bx = memoryAGet16(ds, 0x20d0d5);
    if ((short)bx <= (short)ax)
        goto loc_1cb5b2;
    bx -= ax;
    ax = bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0003);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0d1);
    bx += ax;
    bx += cx;
    bx -= 0x0010;
    ax = bx;
    goto loc_1cb5f2;
loc_1cb5b2: // 0160:1cb5b2
    ax -= bx;
    cx = ax;
    cx >>= 2;
    ax -= cx;
    cx >>= 1;
    bx = memoryAGet16(ds, 0x20d7f5);
    bx++;
    edx = 0;
    div16(bx);
    memoryASet16(ds, 0x20e805, 0x0003);
    sub_1cb5f9();
    bx = memoryAGet16(ds, 0x20d0d1);
    bx -= ax;
    bx -= cx;
    bx -= 0x0010;
    ax = bx;
loc_1cb5f2: // 0160:1cb5f2
    memoryASet16(ds, 0x20cf67, ax);
    esp += 4;
}
void sub_1cb5f9() // 0160:1cb5f9 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1cb68d;
    bp = memoryAGet16(ds, 0x20ee31);
    memoryASet16(ds, 0x20e801, bp);
    if ((short)bp < (short)memoryAGet16(ds, 0x20d7f5))
        goto loc_1cb630;
    memoryASet16(ds, 0x20ee31, 0x0000);
    memoryASet16(ds, 0x20e801, 0x0000);
loc_1cb630: // 0160:1cb630
    bp = memoryAGet16(ds, 0x20e805);
    bp += memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20e805, bp);
    if ((short)bp < (short)memoryAGet16(ds, 0x20d7f5))
        goto loc_1cb65c;
    bp -= memoryAGet16(ds, 0x20d7f5);
    memoryASet16(ds, 0x20e805, bp);
loc_1cb65c: // 0160:1cb65c
    if (!(memoryAGet16(ds, 0x20e805) & 0xffff))
        goto loc_1cb68d;
    if (memoryAGet16(ds, 0x20e805) == 0x0001)
        goto loc_1cb68a;
    if (memoryAGet16(ds, 0x20e805) == 0x0002)
        goto loc_1cb680;
    ax <<= 2;
    esp += 4;
    return;
loc_1cb680: // 0160:1cb680
    bx = ax;
    ax += ax;
    ax += bx;
    esp += 4;
    return;
loc_1cb68a: // 0160:1cb68a
    ax += ax;
loc_1cb68d: // 0160:1cb68d
    esp += 4;
    return;
}
void sub_1cb68e() // 0160:1cb68e +long
{
    esp -= 4;
    ax &= 0x00ff;
    esi = 0x00202700;
    ebx = 0;
    bx = memoryAGet16(ds, 0x20d7b9);
    bx <<= 2;
    ebx = memoryAGet32(ds, esi + ebx);
    if (!ebx)
        goto loc_1cb6f7;
    esi = ebx;
loc_1cb6ad: // 0160:1cb6ad
    bx = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)bx < 0)
        goto loc_1cb6f7;
    if ((short)ax <= (short)bx)
        goto loc_1cb6f7;
    bx = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax >= (short)bx)
        goto loc_1cb6f2;
    bx = memoryAGet16(ds, esi);
    cx = memoryAGet16(ds, esi + 2);
    dx = memoryAGet16(ds, esi + 4);
    bp = memoryAGet16(ds, esi + 6);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, esi + 8);
    memoryASet16(ds, 0x20e801, bp);
    esi += 0x0000000a;
    eax = 0x00000001;
    esp += 4;
    return;
loc_1cb6f2: // 0160:1cb6f2
    esi += 0x0000000a;
    goto loc_1cb6ad;
loc_1cb6f7: // 0160:1cb6f7
    eax = 0;
    esp += 4;
}
void sub_1cb6fa() // 0160:1cb6fa +long
{
    esp -= 4;
    goto loc_1cb6fa;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 15050 bytes
loc_1cb6fa: // 0160:1cb6fa
    if (!(memoryAGet16(ds, 0x20d7b1) & 0xffff))
        goto loc_1cb70e;
    memoryASet16(ds, 0x20d7b1, memoryAGet16(ds, 0x20d7b1) - 0x0001);
    esp += 4;
    return;
loc_1cb70e: // 0160:1cb70e
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0001)
        goto loc_1cb738;
    if (ax == 0x0002)
        goto loc_1cc32c;
    if (ax == 0x0003)
        goto loc_1cbf62;
    if (ax == 0x0004)
        goto loc_1cb739;
loc_1cb738: // 0160:1cb738
    esp += 4;
    return;
loc_1cb739: // 0160:1cb739
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1cbd43;
    if (!(memoryAGet16(ds, 0x20d7d5) & 0xffff))
        goto loc_1cb7a9;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1cbc5f;
    bx = memoryAGet16(ds, 0x20d7ad);
    if (!bx)
        goto loc_1cbb7f;
    ax += bx;
    if (ax == 0x0004)
        goto loc_1cb795;
    if (ax != 0x0006)
        goto loc_1cb7c7;
    sub_1cbe86();
    if ((short)cx > (short)ax)
        goto loc_1cb790;
    goto loc_1cb85f;
loc_1cb790: // 0160:1cb790
    goto loc_1cba3b;
loc_1cb795: // 0160:1cb795
    sub_1cbe86();
    if ((short)dx > (short)bx)
        goto loc_1cb7a4;
    goto loc_1cb94d;
loc_1cb7a4: // 0160:1cb7a4
    goto loc_1cbb29;
loc_1cb7a9: // 0160:1cb7a9
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1cbc5f;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1cbb7f;
loc_1cb7c7: // 0160:1cb7c7
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cb8b5;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cb8b5;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1cb8b5;
    if (memoryAGet16(ds, 0x20d0ff) & 0xffff)
        goto loc_1cb8b5;
    sub_1cbe86();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cb82d;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cb82d;
    if ((short)bx > (short)ax)
        goto loc_1cb8b5;
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1cb85f;
loc_1cb82d: // 0160:1cb82d
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cb851;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1cb851;
    if ((short)cx > (short)ax)
        goto loc_1cb8b5;
    memoryASet16(ds, 0x20cf89, 0x0034);
    goto loc_1cb85f;
loc_1cb851: // 0160:1cb851
    if ((short)dx > (short)ax)
        goto loc_1cb8b5;
    memoryASet16(ds, 0x20cf8b, 0x0034);
loc_1cb85f: // 0160:1cb85f
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20d7ab, 0x0001);
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cb892;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0002)
        goto loc_1cb8ae;
loc_1cb892: // 0160:1cb892
    ax = 0x0003;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cb8aa;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0003)
        goto loc_1cb8ae;
loc_1cb8aa: // 0160:1cb8aa
    ax = 0x0004;
loc_1cb8ae: // 0160:1cb8ae
    memoryASet16(ds, 0x20d7af, ax);
    esp += 4;
    return;
loc_1cb8b5: // 0160:1cb8b5
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cb9a3;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cb9a3;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1cb9a3;
    if (memoryAGet16(ds, 0x20d101) & 0xffff)
        goto loc_1cb9a3;
    sub_1cbe86();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cb91b;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cb91b;
    if ((short)ax > (short)bx)
        goto loc_1cb9a3;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cb94d;
loc_1cb91b: // 0160:1cb91b
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cb93f;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1cb93f;
    if ((short)cx > (short)bx)
        goto loc_1cb9a3;
    memoryASet16(ds, 0x20cf89, 0x0034);
    goto loc_1cb94d;
loc_1cb93f: // 0160:1cb93f
    if ((short)dx > (short)bx)
        goto loc_1cb9a3;
    memoryASet16(ds, 0x20cf8b, 0x0034);
loc_1cb94d: // 0160:1cb94d
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20d7ab, 0x0002);
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cb980;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0001)
        goto loc_1cb99c;
loc_1cb980: // 0160:1cb980
    ax = 0x0003;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cb998;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0003)
        goto loc_1cb99c;
loc_1cb998: // 0160:1cb998
    ax = 0x0004;
loc_1cb99c: // 0160:1cb99c
    memoryASet16(ds, 0x20d7af, ax);
    esp += 4;
    return;
loc_1cb9a3: // 0160:1cb9a3
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cba91;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1cba91;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1cba91;
    if (memoryAGet16(ds, 0x20d103) & 0xffff)
        goto loc_1cba91;
    sub_1cbe86();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cba09;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cba09;
    if ((short)ax > (short)cx)
        goto loc_1cba91;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cba3b;
loc_1cba09: // 0160:1cba09
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cba2d;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cba2d;
    if ((short)bx > (short)cx)
        goto loc_1cba91;
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1cba3b;
loc_1cba2d: // 0160:1cba2d
    if ((short)dx > (short)cx)
        goto loc_1cba91;
    memoryASet16(ds, 0x20cf8b, 0x0034);
loc_1cba3b: // 0160:1cba3b
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20d7ab, 0x0003);
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cba6e;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0001)
        goto loc_1cba8a;
loc_1cba6e: // 0160:1cba6e
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cba86;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0002)
        goto loc_1cba8a;
loc_1cba86: // 0160:1cba86
    ax = 0x0004;
loc_1cba8a: // 0160:1cba8a
    memoryASet16(ds, 0x20d7af, ax);
    esp += 4;
    return;
loc_1cba91: // 0160:1cba91
    if (memoryAGet16(ds, 0x20d7a9) == 0x0004)
        goto loc_1cbb7e;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0004)
        goto loc_1cbb7e;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1cbb7e;
    if (memoryAGet16(ds, 0x20d105) & 0xffff)
        goto loc_1cbb7e;
    sub_1cbe86();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cbaf7;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1cbaf7;
    if ((short)ax > (short)dx)
        goto loc_1cbb7e;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cbb29;
loc_1cbaf7: // 0160:1cbaf7
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cbb1b;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1cbb1b;
    if ((short)bx > (short)dx)
        goto loc_1cbb7e;
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1cbb29;
loc_1cbb1b: // 0160:1cbb1b
    if ((short)cx > (short)dx)
        goto loc_1cbb7e;
    memoryASet16(ds, 0x20cf89, 0x0034);
loc_1cbb29: // 0160:1cbb29
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0003);
    memoryASet16(ds, 0x20d7ab, 0x0004);
    ax = 0x0001;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cbb5c;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0001)
        goto loc_1cbb78;
loc_1cbb5c: // 0160:1cbb5c
    ax = 0x0002;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cbb74;
    if (memoryAGet16(ds, 0x20d7ad) != 0x0002)
        goto loc_1cbb78;
loc_1cbb74: // 0160:1cbb74
    ax = 0x0003;
loc_1cbb78: // 0160:1cbb78
    memoryASet16(ds, 0x20d7af, ax);
loc_1cbb7e: // 0160:1cbb7e
    esp += 4;
    return;
loc_1cbb7f: // 0160:1cbb7f
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1cbd43;
    sub_1cbd44();
    ax = memoryAGet16(ds, 0x20ee27);
    if (ax == 0x00ff)
        goto loc_1cbd43;
    if (ax == 0x0001)
        goto loc_1cbbb7;
    if (ax == 0x0002)
        goto loc_1cbbe1;
    if (ax == 0x0003)
        goto loc_1cbc0b;
    if (ax != 0x0003)
        goto loc_1cbc35;
loc_1cbbb7: // 0160:1cbbb7
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0049)
        goto loc_1cbbca;
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1cbbca: // 0160:1cbbca
    memoryASet16(ds, 0x20d7ad, 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbbe1: // 0160:1cbbe1
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0049)
        goto loc_1cbbf4;
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1cbbf4: // 0160:1cbbf4
    memoryASet16(ds, 0x20d7ad, 0x0002);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbc0b: // 0160:1cbc0b
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0049)
        goto loc_1cbc1e;
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1cbc1e: // 0160:1cbc1e
    memoryASet16(ds, 0x20d7ad, 0x0003);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbc35: // 0160:1cbc35
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0049)
        goto loc_1cbc48;
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1cbc48: // 0160:1cbc48
    memoryASet16(ds, 0x20d7ad, 0x0004);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbc5f: // 0160:1cbc5f
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1cbd43;
    sub_1cbd44();
    ax = memoryAGet16(ds, 0x20ee27);
    if (ax == 0x00ff)
        goto loc_1cbd43;
    if (ax == 0x0001)
        goto loc_1cbc9b;
    if (ax == 0x0002)
        goto loc_1cbcc5;
    if (ax == 0x0003)
        goto loc_1cbcef;
    if (ax != 0x0003)
        goto loc_1cbd19;
loc_1cbc9b: // 0160:1cbc9b
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0049)
        goto loc_1cbcae;
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1cbcae: // 0160:1cbcae
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbcc5: // 0160:1cbcc5
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0049)
        goto loc_1cbcd8;
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1cbcd8: // 0160:1cbcd8
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbcef: // 0160:1cbcef
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0049)
        goto loc_1cbd02;
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1cbd02: // 0160:1cbd02
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbd19: // 0160:1cbd19
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0049)
        goto loc_1cbd2c;
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1cbd2c: // 0160:1cbd2c
    memoryASet16(ds, 0x20d7a9, 0x0004);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cbd43: // 0160:1cbd43
    esp += 4;
    return;
    // gap 542 bytes
loc_1cbf62: // 0160:1cbf62
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1cc180;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1cc0d0;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cbff2;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1cbfe8;
    if (memoryAGet16(ds, 0x20d0ff) & 0xffff)
        goto loc_1cbfe8;
    sub_1cc2ad();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cbfbe;
    if ((short)bx > (short)ax)
        goto loc_1cbfe8;
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1cbfcc;
loc_1cbfbe: // 0160:1cbfbe
    if ((short)cx > (short)ax)
        goto loc_1cbfe8;
    memoryASet16(ds, 0x20cf89, 0x0034);
loc_1cbfcc: // 0160:1cbfcc
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20d7ab, 0x0001);
    esp += 4;
    return;
loc_1cbfe8: // 0160:1cbfe8
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1cc05e;
loc_1cbff2: // 0160:1cbff2
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1cc050;
    if (memoryAGet16(ds, 0x20d101) & 0xffff)
        goto loc_1cc050;
    sub_1cc2ad();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cc026;
    if ((short)ax > (short)bx)
        goto loc_1cc050;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cc034;
loc_1cc026: // 0160:1cc026
    if ((short)cx > (short)bx)
        goto loc_1cc050;
    memoryASet16(ds, 0x20cf89, 0x0034);
loc_1cc034: // 0160:1cc034
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20d7ab, 0x0002);
    esp += 4;
    return;
loc_1cc050: // 0160:1cc050
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1cc180;
loc_1cc05e: // 0160:1cc05e
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1cc180;
    if (memoryAGet16(ds, 0x20d103) & 0xffff)
        goto loc_1cc180;
    sub_1cc2ad();
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1cc0a2;
    if ((short)ax > (short)cx)
        goto loc_1cc180;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cc0b4;
loc_1cc0a2: // 0160:1cc0a2
    if ((short)bx > (short)cx)
        goto loc_1cc180;
    memoryASet16(ds, 0x20cf87, 0x0034);
loc_1cc0b4: // 0160:1cc0b4
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20d7ab, 0x0003);
    esp += 4;
    return;
loc_1cc0d0: // 0160:1cc0d0
    if (memoryAGet16(ds, 0x20d2b9) & 0xffff)
        goto loc_1cc180;
    sub_1cc181();
    ax = memoryAGet16(ds, 0x20ee27);
    if (ax == 0x00ff)
        goto loc_1cc180;
    if (ax == 0x0001)
        goto loc_1cc102;
    if (ax == 0x0002)
        goto loc_1cc12c;
    if (ax != 0x0002)
        goto loc_1cc156;
loc_1cc102: // 0160:1cc102
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0049)
        goto loc_1cc115;
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1cc115: // 0160:1cc115
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cc12c: // 0160:1cc12c
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0049)
        goto loc_1cc13f;
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1cc13f: // 0160:1cc13f
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cc156: // 0160:1cc156
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0049)
        goto loc_1cc169;
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1cc169: // 0160:1cc169
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20d7b1, 0x0004);
    goto loc_1cc421;
loc_1cc180: // 0160:1cc180
    esp += 4;
    return;
    // gap 427 bytes
loc_1cc32c: // 0160:1cc32c
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1cc420;
    if (memoryAGet16(ds, 0x20d0ff) & 0xffff)
        goto loc_1cc420;
    ax = memoryAGet16(ds, 0x20d04b);
    bx = memoryAGet16(ds, 0x20d04d);
    ax &= 0x00ff;
    bx &= 0x00ff;
    if ((short)ax >= (short)0x008c)
        goto loc_1cc36d;
    if ((short)bx <= (short)0x008c)
        goto loc_1cc37f;
loc_1cc36d: // 0160:1cc36d
    ax += 0x00b4;
    ax &= 0x00ff;
    bx += 0x00b4;
    bx &= 0x00ff;
loc_1cc37f: // 0160:1cc37f
    if ((short)bx <= (short)ax)
        goto loc_1cc3d5;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1cc420;
    if (memoryAGet16(ds, 0x20d083) & 0xffff)
        goto loc_1cc3a6;
    memoryASet16(ds, 0x20d7b7, 0x0002);
loc_1cc3a6: // 0160:1cc3a6
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20d7ab, 0x0002);
    memoryASet16(ds, 0x20cf85, 0x0034);
    memoryASet16(ds, 0x20cf73, 0x0034);
    goto loc_1cc420;
loc_1cc3d5: // 0160:1cc3d5
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1cc420;
    if (memoryAGet16(ds, 0x20d081) & 0xffff)
        goto loc_1cc3f3;
    memoryASet16(ds, 0x20d7b7, 0x0001);
loc_1cc3f3: // 0160:1cc3f3
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20d7ab, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0034);
    memoryASet16(ds, 0x20cf75, 0x0034);
loc_1cc420: // 0160:1cc420
    esp += 4;
    return;
loc_1cc421: // 0160:1cc421
    al = 0x58;
    goto loc_1b17b7;
}
void sub_1cbd44() // 0160:1cbd44 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ee27, 0x00ff);
    edi = 0x0020d111;
    ecx = 0x00000004;
    bx = 0x0001;
    ax = 0;
loc_1cbd5e: // 0160:1cbd5e
    if (memoryAGet16(ds, 0x20d7a9) == bx)
        goto loc_1cbd79;
    if (memoryAGet16(ds, 0x20d7ad) == bx)
        goto loc_1cbd79;
    if (memoryAGet16(ds, edi) & 0xffff)
        goto loc_1cbd79;
    ax++;
loc_1cbd79: // 0160:1cbd79
    bx++;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1cbd5e;
    if ((short)ax >= (short)0x0002)
        goto loc_1cbd87;
    esp += 4;
    return;
loc_1cbd87: // 0160:1cbd87
    sub_1cbe86();
    memoryASet16(ds, 0x20ceb5, ax);
    memoryASet16(ds, 0x20ceb7, bx);
    memoryASet16(ds, 0x20ceb9, cx);
    memoryASet16(ds, 0x20cebb, dx);
    memoryASet16(ds, 0x20ee17, 0x0002);
    memoryASet16(ds, 0x20ee19, 0x0004);
    memoryASet16(ds, 0x20ee1b, 0x0006);
    memoryASet16(ds, 0x20ee1d, 0x0008);
loc_1cbdcb: // 0160:1cbdcb
    esi = 0x0020ee17;
    edi = 0x0020ceb5;
    ecx = 0x00000003;
loc_1cbdda: // 0160:1cbdda
    ax = memoryAGet16(ds, edi);
    if ((short)ax <= (short)memoryAGet16(ds, edi + 2))
        goto loc_1cbdfe;
    bp = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, edi, bp);
    memoryASet16(ds, edi + 2, ax);
    ax = memoryAGet16(ds, esi);
    bp = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, esi, bp);
    memoryASet16(ds, esi + 2, ax);
    goto loc_1cbdcb;
loc_1cbdfe: // 0160:1cbdfe
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1cbdda;
    esi = 0x0020ee17;
    edi = 0x0020d111;
    ebx = 0x0020d231;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1cbe1e: // 0160:1cbe1e
    ax = memoryAGet16(ds, esi);
    ax -= 0x0002;
    eax &= 0x0000ffff;
    if (!(memoryAGet16(ds, edi + eax) & 0xffff))
        goto loc_1cbe59;
    eax <<= 1;
    cx = memoryAGet16(ds, ebx + eax);
    dx = memoryAGet16(ds, ebx + eax + 2);
    if ((short)cx <= (short)0x0098)
        goto loc_1cbe59;
    if ((short)cx >= (short)0x0188)
        goto loc_1cbe59;
    if ((short)dx <= (short)0x0098)
        goto loc_1cbe59;
    if ((short)dx < (short)0x0124)
        goto loc_1cbe71;
loc_1cbe59: // 0160:1cbe59
    ax = memoryAGet16(ds, esi);
    ax >>= 1;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1cbe71;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1cbe7f;
loc_1cbe71: // 0160:1cbe71
    esi += 0x00000002;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1cbe1e;
    esp += 4;
    return;
loc_1cbe7f: // 0160:1cbe7f
    memoryASet16(ds, 0x20ee27, ax);
    esp += 4;
}
void sub_1cbe86() // 0160:1cbe86 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d04b);
    bx = memoryAGet16(ds, 0x20d04d);
    cx = memoryAGet16(ds, 0x20d04f);
    dx = memoryAGet16(ds, 0x20d051);
    ax &= 0x00ff;
    bx &= 0x00ff;
    cx &= 0x00ff;
    dx &= 0x00ff;
    bp = memoryAGet16(ds, 0x20d7a9);
    memoryASet16(ds, 0x20e809, bp);
    bp = memoryAGet16(ds, 0x20d7ad);
    memoryASet16(ds, 0x20e805, bp);
    if (memoryAGet16(ds, 0x20e809) == 0x0001)
        goto loc_1cbeea;
    if (memoryAGet16(ds, 0x20e805) == 0x0001)
        goto loc_1cbeea;
    if ((short)ax >= (short)0x008c)
        goto loc_1cbf3b;
loc_1cbeea: // 0160:1cbeea
    if (memoryAGet16(ds, 0x20e809) == 0x0002)
        goto loc_1cbf05;
    if (memoryAGet16(ds, 0x20e805) == 0x0002)
        goto loc_1cbf05;
    if ((short)bx >= (short)0x008c)
        goto loc_1cbf3b;
loc_1cbf05: // 0160:1cbf05
    if (memoryAGet16(ds, 0x20e809) == 0x0003)
        goto loc_1cbf20;
    if (memoryAGet16(ds, 0x20e805) == 0x0003)
        goto loc_1cbf20;
    if ((short)cx >= (short)0x008c)
        goto loc_1cbf3b;
loc_1cbf20: // 0160:1cbf20
    if (memoryAGet16(ds, 0x20e809) == 0x0004)
        goto loc_1cbf61;
    if (memoryAGet16(ds, 0x20e805) == 0x0004)
        goto loc_1cbf61;
    if ((short)dx <= (short)0x008c)
        goto loc_1cbf61;
loc_1cbf3b: // 0160:1cbf3b
    ax += 0x00b4;
    bx += 0x00b4;
    cx += 0x00b4;
    dx += 0x00b4;
    ax &= 0x00ff;
    bx &= 0x00ff;
    cx &= 0x00ff;
    dx &= 0x00ff;
loc_1cbf61: // 0160:1cbf61
    esp += 4;
    return;
}
void sub_1cc181() // 0160:1cc181 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20ee27, 0x00ff);
    edi = 0x0020d111;
    memoryASet16(ds, 0x20e809, 0x0003);
    bx = 0x0001;
    ax = 0;
loc_1cc19f: // 0160:1cc19f
    if (bx == memoryAGet16(ds, 0x20d7a9))
        goto loc_1cc1b1;
    if (memoryAGet16(ds, edi) & 0xffff)
        goto loc_1cc1b1;
    ax++;
loc_1cc1b1: // 0160:1cc1b1
    bx++;
    edi += 0x00000002;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1cc19f;
    if ((short)ax >= (short)0x0002)
        goto loc_1cc1c7;
    esp += 4;
    return;
loc_1cc1c7: // 0160:1cc1c7
    sub_1cc2ad();
    memoryASet16(ds, 0x20ceb5, ax);
    memoryASet16(ds, 0x20ceb7, bx);
    memoryASet16(ds, 0x20ceb9, cx);
    memoryASet16(ds, 0x20ee17, 0x0002);
    memoryASet16(ds, 0x20ee19, 0x0004);
    memoryASet16(ds, 0x20ee1b, 0x0006);
loc_1cc1fb: // 0160:1cc1fb
    esi = 0x0020ee17;
    edi = 0x0020ceb5;
    ecx = 0x00000002;
loc_1cc20a: // 0160:1cc20a
    ax = memoryAGet16(ds, edi);
    if ((short)ax <= (short)memoryAGet16(ds, edi + 2))
        goto loc_1cc22e;
    bp = memoryAGet16(ds, edi + 2);
    memoryASet16(ds, edi, bp);
    memoryASet16(ds, edi + 2, ax);
    ax = memoryAGet16(ds, esi);
    bp = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, esi, bp);
    memoryASet16(ds, esi + 2, ax);
    goto loc_1cc1fb;
loc_1cc22e: // 0160:1cc22e
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1cc20a;
    esi = 0x0020ee17;
    edi = 0x0020d111;
    ebx = 0x0020d231;
    memoryASet16(ds, 0x20e809, 0x0003);
loc_1cc24e: // 0160:1cc24e
    ax = memoryAGet16(ds, esi);
    ax -= 0x0002;
    eax &= 0x0000ffff;
    if (!(memoryAGet16(ds, edi + eax) & 0xffff))
        goto loc_1cc289;
    eax <<= 1;
    cx = memoryAGet16(ds, ebx + eax);
    dx = memoryAGet16(ds, ebx + eax + 2);
    if ((short)cx <= (short)0x0098)
        goto loc_1cc289;
    if ((short)cx >= (short)0x0188)
        goto loc_1cc289;
    if ((short)dx <= (short)0x0098)
        goto loc_1cc289;
    if ((short)dx < (short)0x0124)
        goto loc_1cc298;
loc_1cc289: // 0160:1cc289
    ax = memoryAGet16(ds, esi);
    ax >>= 1;
    if (ax != memoryAGet16(ds, 0x20d7a9))
        goto loc_1cc2a6;
loc_1cc298: // 0160:1cc298
    esi += 0x00000002;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1cc24e;
    esp += 4;
    return;
loc_1cc2a6: // 0160:1cc2a6
    memoryASet16(ds, 0x20ee27, ax);
    esp += 4;
}
void sub_1cc2ad() // 0160:1cc2ad +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d04b);
    bx = memoryAGet16(ds, 0x20d04d);
    cx = memoryAGet16(ds, 0x20d04f);
    ax &= 0x00ff;
    bx &= 0x00ff;
    cx &= 0x00ff;
    bp = memoryAGet16(ds, 0x20d7a9);
    memoryASet16(ds, 0x20e809, bp);
    if (memoryAGet16(ds, 0x20e809) == 0x0001)
        goto loc_1cc2ed;
    if ((short)ax >= (short)0x008c)
        goto loc_1cc30f;
loc_1cc2ed: // 0160:1cc2ed
    if (memoryAGet16(ds, 0x20e809) == 0x0002)
        goto loc_1cc2fe;
    if ((short)bx >= (short)0x008c)
        goto loc_1cc30f;
loc_1cc2fe: // 0160:1cc2fe
    if (memoryAGet16(ds, 0x20e809) == 0x0003)
        goto loc_1cc32b;
    if ((short)cx <= (short)0x008c)
        goto loc_1cc32b;
loc_1cc30f: // 0160:1cc30f
    ax += 0x00b4;
    bx += 0x00b4;
    cx += 0x00b4;
    ax &= 0x00ff;
    bx &= 0x00ff;
    cx &= 0x00ff;
loc_1cc32b: // 0160:1cc32b
    esp += 4;
    return;
}
void sub_1cc428() // 0160:1cc428 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    if ((short)ax >= (short)0x0007)
        goto loc_1cc691;
    if (memoryAGet32(ds, 0x20d093) != 0x01010101)
        goto loc_1cc689;
    if (ax == 0x0006)
        goto loc_1cc689;
    if (memoryAGet16(ds, 0x20d79f) & 0xffff)
        goto loc_1cc572;
    memoryASet16(ds, 0x20d79f, 0x0096);
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1cc55c;
    bx = 0;
    dx = 0;
    al = memoryAGet(ds, 0x20d77f);
    al -= memoryAGet(ds, 0x20d79d);
    if ((char)al >= 0)
        goto loc_1cc498;
    al += 0x0a;
    bl = 0xff;
loc_1cc498: // 0160:1cc498
    memoryASet(ds, 0x20d785, al);
    al = memoryAGet(ds, 0x20d77e);
    al -= memoryAGet(ds, 0x20d79c);
    al += bl;
    if ((char)al >= 0)
        goto loc_1cc4b4;
    al += 0x0a;
    bh = 0xff;
loc_1cc4b4: // 0160:1cc4b4
    memoryASet(ds, 0x20d784, al);
    al = memoryAGet(ds, 0x20d77d);
    al -= memoryAGet(ds, 0x20d79b);
    al += bh;
    if ((char)al >= 0)
        goto loc_1cc4d0;
    al += 0x0a;
    dl = 0xff;
loc_1cc4d0: // 0160:1cc4d0
    memoryASet(ds, 0x20d783, al);
    al = memoryAGet(ds, 0x20d77c);
    al -= memoryAGet(ds, 0x20d79a);
    al += dl;
    if ((char)al >= 0)
        goto loc_1cc4ec;
    al += 0x06;
    dh = 0xff;
loc_1cc4ec: // 0160:1cc4ec
    memoryASet(ds, 0x20d782, al);
    al = memoryAGet(ds, 0x20d77b);
    al -= memoryAGet(ds, 0x20d799);
    al += dh;
    memoryASet(ds, 0x20d781, al);
    eax = memoryAGet32(ds, 0x20d77b);
    memoryASet32(ds, 0x20d799, eax);
    ax = memoryAGet16(ds, 0x20d77f);
    memoryASet16(ds, 0x20d79d, ax);
    esi = 0x0020d781;
    edi = 0x0020d793;
    ecx = 0x00000005;
loc_1cc528: // 0160:1cc528
    al = memoryAGet(ds, esi);
    if ((char)al < (char)memoryAGet(ds, edi))
        goto loc_1cc541;
    if (al > memoryAGet(ds, edi))
        goto loc_1cc572;
    esi++;
    edi++;
    if (--ecx)
        goto loc_1cc528;
    goto loc_1cc572;
    // gap 3 bytes
loc_1cc541: // 0160:1cc541
    eax = memoryAGet32(ds, 0x20d781);
    memoryASet32(ds, 0x20d793, eax);
    ax = memoryAGet16(ds, 0x20d785);
    memoryASet16(ds, 0x20d797, ax);
    goto loc_1cc572;
    // gap 3 bytes
loc_1cc55c: // 0160:1cc55c
    eax = memoryAGet32(ds, 0x20d77b);
    memoryASet32(ds, 0x20d781, eax);
    ax = memoryAGet16(ds, 0x20d77f);
    memoryASet16(ds, 0x20d785, ax);
loc_1cc572: // 0160:1cc572
    if (!(memoryAGet16(ds, 0x20d081) & 0xffff))
        goto loc_1cc689;
    if (!(memoryAGet16(ds, 0x20edef) & 0xffff))
        goto loc_1cc614;
    if (memoryAGet16(ds, 0x20d081) != 0x0003)
        goto loc_1cc614;
    if ((short)memoryAGet16(ds, 0x20d863) >= (short)0x000a)
        goto loc_1cc614;
    if (memoryAGet16(ds, 0x20d16d) & 0xffff)
        goto loc_1cc614;
    esi = 0;
    si = memoryAGet16(ds, 0x20d863);
    eax = esi;
    esi <<= 2;
    esi += eax;
    eax = esi;
    edi = 0x0020d77b;
    esi = 0x00209150;
    esi += eax;
    ecx = 0x0000000a;
loc_1cc5de: // 0160:1cc5de
    al = memoryAGet(ds, esi);
    if (al > memoryAGet(ds, edi))
        goto loc_1cc5f2;
    if (al < memoryAGet(ds, edi))
        goto loc_1cc614;
    esi++;
    edi++;
    if (--ecx)
        goto loc_1cc5de;
loc_1cc5f2: // 0160:1cc5f2
    al = 0x89;
    sub_1b17b7();
    memoryASet16(ds, 0x20d7a3, 0x0032);
    memoryASet16(ds, 0x20d87f, 0x0001);
    memoryASet16(ds, 0x20edf1, 0x000c);
loc_1cc614: // 0160:1cc614
    memoryASet16(ds, 0x20d081, memoryAGet16(ds, 0x20d081) - 0x0001);
    sub_1cc912();
    if (memoryAGet16(ds, 0x20d081) != 0x0001)
        goto loc_1cc66c;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1cc65e;
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1cc689;
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1cc65e;
    if (memoryAGet16(ds, 0x20d16d) != 0x0000)
        goto loc_1cc65e;
    ax = 0x0135;
    sub_1b1715();
    goto loc_1cc689;
loc_1cc65e: // 0160:1cc65e
    ax = 0x0136;
    sub_1b1715();
    goto loc_1cc689;
    // gap 3 bytes
loc_1cc66c: // 0160:1cc66c
    if ((short)memoryAGet16(ds, 0x20d7f5) > (short)0x0002)
        goto loc_1cc689;
    if (memoryAGet16(ds, 0x20d081) != 0x0002)
        goto loc_1cc689;
    ax = 0x0134;
    sub_1b1715();
loc_1cc689: // 0160:1cc689
    eax = 0;
    memoryASet32(ds, 0x20d093, eax);
    esp += 4;
    return;
loc_1cc691: // 0160:1cc691
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1cc6e9;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    if (ax != memoryAGet16(ds, 0x20d7a1))
        goto loc_1cc6e9;
    if (memoryAGet16(ds, 0x20d79f) & 0xffff)
        goto loc_1cc6e9;
    memoryASet16(ds, 0x20d79f, 0x0096);
    ebx = memoryAGet32(ds, 0x20d77b);
    memoryASet32(ds, 0x20d781, ebx);
    bx = memoryAGet16(ds, 0x20d77f);
    memoryASet16(ds, 0x20d785, bx);
loc_1cc6e9: // 0160:1cc6e9
    if (ax < 0x0020)
        goto loc_1cc73a;
    if (ax < 0x0040)
        goto loc_1cc733;
    if (ax < 0x0060)
        goto loc_1cc72b;
    if (ax < 0x0080)
        goto loc_1cc723;
    if (ax >= 0x00a8)
        goto loc_1cc73a;
    memoryASet(ds, 0x20d096, 0x01);
    esp += 4;
    return;
loc_1cc723: // 0160:1cc723
    memoryASet(ds, 0x20d095, 0x01);
    esp += 4;
    return;
loc_1cc72b: // 0160:1cc72b
    memoryASet(ds, 0x20d094, 0x01);
    esp += 4;
    return;
loc_1cc733: // 0160:1cc733
    memoryASet(ds, 0x20d093, 0x01);
loc_1cc73a: // 0160:1cc73a
    esp += 4;
    return;
}
void sub_1cc73b() // 0160:1cc73b +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d04d);
    ax &= 0x00ff;
    if ((short)ax >= (short)0x0007)
        goto loc_1cc786;
    if (memoryAGet32(ds, 0x20d097) != 0x01010101)
        goto loc_1cc77b;
    if (!(memoryAGet16(ds, 0x20d083) & 0xffff))
        goto loc_1cc77b;
    memoryASet16(ds, 0x20d083, memoryAGet16(ds, 0x20d083) - 0x0001);
    sub_1cc912();
loc_1cc77b: // 0160:1cc77b
    memoryASet32(ds, 0x20d097, 0x00000000);
    esp += 4;
    return;
loc_1cc786: // 0160:1cc786
    if (ax < 0x0020)
        goto loc_1cc7d7;
    if (ax < 0x0040)
        goto loc_1cc7d0;
    if (ax < 0x0060)
        goto loc_1cc7c8;
    if (ax < 0x0080)
        goto loc_1cc7c0;
    if (ax >= 0x00a8)
        goto loc_1cc7d7;
    memoryASet(ds, 0x20d09a, 0x01);
    esp += 4;
    return;
loc_1cc7c0: // 0160:1cc7c0
    memoryASet(ds, 0x20d099, 0x01);
    esp += 4;
    return;
loc_1cc7c8: // 0160:1cc7c8
    memoryASet(ds, 0x20d098, 0x01);
    esp += 4;
    return;
loc_1cc7d0: // 0160:1cc7d0
    memoryASet(ds, 0x20d097, 0x01);
loc_1cc7d7: // 0160:1cc7d7
    esp += 4;
    return;
}
void sub_1cc7d8() // 0160:1cc7d8 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d04f);
    ax &= 0x00ff;
    if ((short)ax >= (short)0x0007)
        goto loc_1cc823;
    if (memoryAGet32(ds, 0x20d09b) != 0x01010101)
        goto loc_1cc818;
    if (!(memoryAGet16(ds, 0x20d085) & 0xffff))
        goto loc_1cc818;
    memoryASet16(ds, 0x20d085, memoryAGet16(ds, 0x20d085) - 0x0001);
    sub_1cc912();
loc_1cc818: // 0160:1cc818
    memoryASet32(ds, 0x20d09b, 0x00000000);
    esp += 4;
    return;
loc_1cc823: // 0160:1cc823
    if (ax < 0x0020)
        goto loc_1cc874;
    if (ax < 0x0040)
        goto loc_1cc86d;
    if (ax < 0x0060)
        goto loc_1cc865;
    if (ax < 0x0080)
        goto loc_1cc85d;
    if (ax >= 0x00a8)
        goto loc_1cc874;
    memoryASet(ds, 0x20d09e, 0x01);
    esp += 4;
    return;
loc_1cc85d: // 0160:1cc85d
    memoryASet(ds, 0x20d09d, 0x01);
    esp += 4;
    return;
loc_1cc865: // 0160:1cc865
    memoryASet(ds, 0x20d09c, 0x01);
    esp += 4;
    return;
loc_1cc86d: // 0160:1cc86d
    memoryASet(ds, 0x20d09b, 0x01);
loc_1cc874: // 0160:1cc874
    esp += 4;
    return;
}
void sub_1cc875() // 0160:1cc875 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d051);
    ax &= 0x00ff;
    if ((short)ax >= (short)0x0007)
        goto loc_1cc8c0;
    if (memoryAGet32(ds, 0x20d09f) != 0x01010101)
        goto loc_1cc8b5;
    if (!(memoryAGet16(ds, 0x20d087) & 0xffff))
        goto loc_1cc8b5;
    memoryASet16(ds, 0x20d087, memoryAGet16(ds, 0x20d087) - 0x0001);
    sub_1cc912();
loc_1cc8b5: // 0160:1cc8b5
    memoryASet32(ds, 0x20d09f, 0x00000000);
    esp += 4;
    return;
loc_1cc8c0: // 0160:1cc8c0
    if (ax < 0x0020)
        goto loc_1cc911;
    if (ax < 0x0040)
        goto loc_1cc90a;
    if (ax < 0x0060)
        goto loc_1cc902;
    if (ax < 0x0080)
        goto loc_1cc8fa;
    if (ax >= 0x00a8)
        goto loc_1cc911;
    memoryASet(ds, 0x20d0a2, 0x01);
    esp += 4;
    return;
loc_1cc8fa: // 0160:1cc8fa
    memoryASet(ds, 0x20d0a1, 0x01);
    esp += 4;
    return;
loc_1cc902: // 0160:1cc902
    memoryASet(ds, 0x20d0a0, 0x01);
    esp += 4;
    return;
loc_1cc90a: // 0160:1cc90a
    memoryASet(ds, 0x20d09f, 0x01);
loc_1cc911: // 0160:1cc911
    esp += 4;
    return;
}
void sub_1cc912() // 0160:1cc912 +long
{
    esp -= 4;
    goto loc_1cc912;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19682 bytes
loc_1cc912: // 0160:1cc912
    al = 0x5a;
    goto loc_1b17b7;
}
void sub_1cc919() // 0160:1cc919 +long
{
    esp -= 4;
    goto loc_1cc919;
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19569 bytes
loc_1cc919: // 0160:1cc919
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1cca09;
    eax = memoryAGet32(ds, 0x20d0b7);
    memoryASet32(ds, 0x20d0f7, eax);
    eax = memoryAGet32(ds, 0x20d0bb);
    memoryASet32(ds, 0x20d0fb, eax);
    ax = memoryAGet16(ds, 0x20d04b);
    memoryASet16(ds, 0x20d05b, ax);
    bx = memoryAGet16(ds, 0x20cf4f);
    dx = memoryAGet16(ds, 0x20cf61);
    sub_1cccef();
    if (memoryAGet16(ds, 0x20d7d3) & 0xffff)
        goto loc_1cc9e9;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    bx = memoryAGet16(ds, 0x20d05b);
    bx &= 0x00ff;
    bx -= ax;
    if (bx < memoryAGet16(ds, 0x20d7e9))
        goto loc_1cc9e9;
    if (bx >= memoryAGet16(ds, 0x20d7eb))
        goto loc_1cc9e9;
    if (bx < memoryAGet16(ds, 0x20d7ed))
        goto loc_1cc9cd;
    if (bx < 0x00b0)
        goto loc_1cc9e9;
    if (bx >= memoryAGet16(ds, 0x20d7ef))
        goto loc_1cc9cd;
    if (bx >= 0xff50)
        goto loc_1cc9e9;
loc_1cc9cd: // 0160:1cc9cd
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x003b)
        goto loc_1cca09;
    memoryASet16(ds, 0x20cf85, 0x003b);
    goto loc_1cccdd;
loc_1cc9e9: // 0160:1cc9e9
    ax = memoryAGet16(ds, 0x20d05b);
    memoryASet16(ds, 0x20d04b, ax);
    eax = memoryAGet32(ds, 0x20d0f7);
    memoryASet32(ds, 0x20d0b7, eax);
    eax = memoryAGet32(ds, 0x20d0fb);
    memoryASet32(ds, 0x20d0bb, eax);
loc_1cca09: // 0160:1cca09
    esp += 4;
    return;
    // gap 723 bytes
loc_1cccdd: // 0160:1cccdd
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x00f5;
    goto loc_1b1715;
}
void sub_1cca0a() // 0160:1cca0a +long
{
    esp -= 4;
    goto loc_1cca0a;
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 19810 bytes
loc_1cca0a: // 0160:1cca0a
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ccafa;
    eax = memoryAGet32(ds, 0x20d0bf);
    memoryASet32(ds, 0x20d0f7, eax);
    eax = memoryAGet32(ds, 0x20d0c3);
    memoryASet32(ds, 0x20d0fb, eax);
    ax = memoryAGet16(ds, 0x20d04d);
    memoryASet16(ds, 0x20d05b, ax);
    bx = memoryAGet16(ds, 0x20cf51);
    dx = memoryAGet16(ds, 0x20cf63);
    sub_1cccef();
    if (memoryAGet16(ds, 0x20d7d3) & 0xffff)
        goto loc_1ccada;
    ax = memoryAGet16(ds, 0x20d04d);
    ax &= 0x00ff;
    bx = memoryAGet16(ds, 0x20d05b);
    bx &= 0x00ff;
    bx -= ax;
    if (bx < memoryAGet16(ds, 0x20d7e9))
        goto loc_1ccada;
    if (bx >= memoryAGet16(ds, 0x20d7eb))
        goto loc_1ccada;
    if (bx < memoryAGet16(ds, 0x20d7ed))
        goto loc_1ccabe;
    if (bx < 0x00b0)
        goto loc_1ccada;
    if (bx >= memoryAGet16(ds, 0x20d7ef))
        goto loc_1ccabe;
    if (bx >= 0xff50)
        goto loc_1ccada;
loc_1ccabe: // 0160:1ccabe
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x003b)
        goto loc_1ccafa;
    memoryASet16(ds, 0x20cf87, 0x003b);
    goto loc_1cccdd;
loc_1ccada: // 0160:1ccada
    ax = memoryAGet16(ds, 0x20d05b);
    memoryASet16(ds, 0x20d04d, ax);
    eax = memoryAGet32(ds, 0x20d0f7);
    memoryASet32(ds, 0x20d0bf, eax);
    eax = memoryAGet32(ds, 0x20d0fb);
    memoryASet32(ds, 0x20d0c3, eax);
loc_1ccafa: // 0160:1ccafa
    esp += 4;
    return;
    // gap 482 bytes
loc_1cccdd: // 0160:1cccdd
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x00f5;
    goto loc_1b1715;
}
void sub_1ccafb() // 0160:1ccafb +long
{
    esp -= 4;
    goto loc_1ccafb;
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20051 bytes
loc_1ccafb: // 0160:1ccafb
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ccbeb;
    eax = memoryAGet32(ds, 0x20d0c7);
    memoryASet32(ds, 0x20d0f7, eax);
    eax = memoryAGet32(ds, 0x20d0cb);
    memoryASet32(ds, 0x20d0fb, eax);
    ax = memoryAGet16(ds, 0x20d04f);
    memoryASet16(ds, 0x20d05b, ax);
    bx = memoryAGet16(ds, 0x20cf53);
    dx = memoryAGet16(ds, 0x20cf65);
    sub_1cccef();
    if (memoryAGet16(ds, 0x20d7d3) & 0xffff)
        goto loc_1ccbcb;
    ax = memoryAGet16(ds, 0x20d04f);
    ax &= 0x00ff;
    bx = memoryAGet16(ds, 0x20d05b);
    bx &= 0x00ff;
    bx -= ax;
    if (bx < memoryAGet16(ds, 0x20d7e9))
        goto loc_1ccbcb;
    if (bx >= memoryAGet16(ds, 0x20d7eb))
        goto loc_1ccbcb;
    if (bx < memoryAGet16(ds, 0x20d7ed))
        goto loc_1ccbaf;
    if (bx < 0x00b0)
        goto loc_1ccbcb;
    if (bx >= memoryAGet16(ds, 0x20d7ef))
        goto loc_1ccbaf;
    if (bx >= 0xff50)
        goto loc_1ccbcb;
loc_1ccbaf: // 0160:1ccbaf
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x003b)
        goto loc_1ccbeb;
    memoryASet16(ds, 0x20cf89, 0x003b);
    goto loc_1cccdd;
loc_1ccbcb: // 0160:1ccbcb
    ax = memoryAGet16(ds, 0x20d05b);
    memoryASet16(ds, 0x20d04f, ax);
    eax = memoryAGet32(ds, 0x20d0f7);
    memoryASet32(ds, 0x20d0c7, eax);
    eax = memoryAGet32(ds, 0x20d0fb);
    memoryASet32(ds, 0x20d0cb, eax);
loc_1ccbeb: // 0160:1ccbeb
    esp += 4;
    return;
    // gap 241 bytes
loc_1cccdd: // 0160:1cccdd
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x00f5;
    goto loc_1b1715;
}
void sub_1ccbec() // 0160:1ccbec +long
{
    esp -= 4;
    goto loc_1ccbec;
loc_1b1715: // 0160:1b1715
    if (memoryAGet32(ds, 0x30b130) == 0x00000000)
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b17b6;
    eax &= 0x0000ffff;
    memoryASet16(ds, 0x20ee85, 0x0078);
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    eax = 0x00000004;
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1c7c30;
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
    // gap 91257 bytes
loc_1c7c30: // 0160:1c7c30
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000020;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x0000003f);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7c86;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c88;
loc_1c7c86: // 0160:1c7c86
    goto loc_1c7c9f;
loc_1c7c88: // 0160:1c7c88
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c9f: // 0160:1c7c9f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 20292 bytes
loc_1ccbec: // 0160:1ccbec
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1cccdc;
    eax = memoryAGet32(ds, 0x20d0cf);
    memoryASet32(ds, 0x20d0f7, eax);
    eax = memoryAGet32(ds, 0x20d0d3);
    memoryASet32(ds, 0x20d0fb, eax);
    ax = memoryAGet16(ds, 0x20d051);
    memoryASet16(ds, 0x20d05b, ax);
    bx = memoryAGet16(ds, 0x20cf55);
    dx = memoryAGet16(ds, 0x20cf67);
    sub_1cccef();
    if (memoryAGet16(ds, 0x20d7d3) & 0xffff)
        goto loc_1cccbc;
    ax = memoryAGet16(ds, 0x20d051);
    ax &= 0x00ff;
    bx = memoryAGet16(ds, 0x20d05b);
    bx &= 0x00ff;
    bx -= ax;
    if (bx < memoryAGet16(ds, 0x20d7e9))
        goto loc_1cccbc;
    if (bx >= memoryAGet16(ds, 0x20d7eb))
        goto loc_1cccbc;
    if (bx < memoryAGet16(ds, 0x20d7ed))
        goto loc_1ccca0;
    if (bx < 0x00b0)
        goto loc_1cccbc;
    if (bx >= memoryAGet16(ds, 0x20d7ef))
        goto loc_1ccca0;
    if (bx >= 0xff50)
        goto loc_1cccbc;
loc_1ccca0: // 0160:1ccca0
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x003b)
        goto loc_1cccdc;
    memoryASet16(ds, 0x20cf8b, 0x003b);
    goto loc_1cccdd;
    // gap 3 bytes
loc_1cccbc: // 0160:1cccbc
    ax = memoryAGet16(ds, 0x20d05b);
    memoryASet16(ds, 0x20d051, ax);
    eax = memoryAGet32(ds, 0x20d0f7);
    memoryASet32(ds, 0x20d0cf, eax);
    eax = memoryAGet32(ds, 0x20d0fb);
    memoryASet32(ds, 0x20d0d3, eax);
loc_1cccdc: // 0160:1cccdc
    esp += 4;
    return;
loc_1cccdd: // 0160:1cccdd
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x00f5;
    goto loc_1b1715;
}
void sub_1cccef() // 0160:1cccef +long
{
    esp -= 4;
    bx += 0x0010;
    dx += 0x0010;
    bx &= 0xfff8;
    dx &= 0xfff8;
    memoryASet16(ds, 0x20ceb3, bx);
    memoryASet16(ds, 0x20ceb5, dx);
    ecx = memoryAGet32(ds, 0x20d76f);
    ax = memoryAGet16(ds, ecx);
    memoryASet16(ds, 0x20e809, ax);
    memoryASet16(ds, 0x20e801, 0x0000);
    esi = 0;
    si = memoryAGet16(ds, 0x20e809);
    esi >>= 1;
    si &= 0xfff8;
    dx &= 0xffe0;
loc_1ccd3c: // 0160:1ccd3c
    if (dx != memoryAGet16(ds, ecx + esi + 10))
        goto loc_1ccd93;
    if ((short)bx <= (short)memoryAGet16(ds, ecx + esi + 6))
        goto loc_1ccdc5;
    if ((short)bx >= (short)memoryAGet16(ds, ecx + esi + 8))
        goto loc_1ccd99;
    ax = memoryAGet16(ds, ecx + esi + 6);
    memoryASet16(ds, 0x20d0f7, ax);
    ax = memoryAGet16(ds, ecx + esi + 10);
    memoryASet16(ds, 0x20d0f9, ax);
    ax = memoryAGet16(ds, ecx + esi + 8);
    memoryASet16(ds, 0x20d0fb, ax);
    ax = memoryAGet16(ds, ecx + esi + 10);
    memoryASet16(ds, 0x20d0fd, ax);
    ax = memoryAGet16(ds, ecx + esi + 4);
    goto loc_1cd0d6;
loc_1ccd93: // 0160:1ccd93
    if ((short)dx <= (short)memoryAGet16(ds, ecx + esi + 10))
        goto loc_1ccdc5;
loc_1ccd99: // 0160:1ccd99
    memoryASet16(ds, 0x20e801, si);
    si += memoryAGet16(ds, 0x20e809);
    si >>= 1;
    si += 0x0004;
    si &= 0xfff8;
    if (si == memoryAGet16(ds, 0x20e809))
        goto loc_1ccde8;
    goto loc_1ccd3c;
loc_1ccdc5: // 0160:1ccdc5
    memoryASet16(ds, 0x20e809, si);
    si += memoryAGet16(ds, 0x20e801);
    si >>= 1;
    si &= 0xfff8;
    if (si != memoryAGet16(ds, 0x20e809))
        goto loc_1ccd3c;
loc_1ccde8: // 0160:1ccde8
    ax = memoryAGet16(ds, ecx + 2);
    memoryASet16(ds, 0x20e809, ax);
    memoryASet32(ds, 0x20e801, 0x00000000);
    ax = memoryAGet16(ds, ecx);
    memoryASet16(ds, 0x20e801, ax);
    ax = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - ax);
    ecx += memoryAGet32(ds, 0x20e801);
    memoryASet16(ds, 0x20e801, 0x0000);
    esi = 0;
    si = memoryAGet16(ds, 0x20e809);
    esi >>= 1;
    si &= 0xfff8;
    bx = memoryAGet16(ds, 0x20ceb3);
    bx &= 0xffe0;
loc_1cce3d: // 0160:1cce3d
    if (bx != memoryAGet16(ds, ecx + esi + 6))
        goto loc_1cce88;
    if ((short)dx >= (short)memoryAGet16(ds, ecx + esi + 8))
        goto loc_1cce8a;
    if ((short)dx <= (short)memoryAGet16(ds, ecx + esi + 10))
        goto loc_1cceaf;
    ax = memoryAGet16(ds, ecx + esi + 6);
    memoryASet16(ds, 0x20d0f7, ax);
    ax = memoryAGet16(ds, ecx + esi + 8);
    memoryASet16(ds, 0x20d0f9, ax);
    ax = memoryAGet16(ds, ecx + esi + 6);
    memoryASet16(ds, 0x20d0fb, ax);
    ax = memoryAGet16(ds, ecx + esi + 10);
    memoryASet16(ds, 0x20d0fd, ax);
    ax = memoryAGet16(ds, ecx + esi + 4);
    goto loc_1cd0d6;
loc_1cce88: // 0160:1cce88
    if ((short)bx <= (short)memoryAGet16(ds, ecx + esi + 6))
        goto loc_1cceaf;
loc_1cce8a: // 0160:1cce8a
    memoryASet16(ds, 0x20e801, si);
    si += memoryAGet16(ds, 0x20e809);
    si >>= 1;
    si += 0x0004;
    si &= 0xfff8;
    if (si == memoryAGet16(ds, 0x20e809))
        goto loc_1cced2;
    if (si != memoryAGet16(ds, 0x20e809))
        goto loc_1cce3d;
loc_1cceaf: // 0160:1cceaf
    memoryASet16(ds, 0x20e809, si);
    si += memoryAGet16(ds, 0x20e801);
    si >>= 1;
    si &= 0xfff8;
    if (si != memoryAGet16(ds, 0x20e809))
        goto loc_1cce3d;
loc_1cced2: // 0160:1cced2
    bx = memoryAGet16(ds, 0x20ceb3);
    cx = memoryAGet16(ds, 0x20ceb5);
    esi = memoryAGet32(ds, 0x20d76f);
    ax = memoryAGet16(ds, esi + 2);
    memoryASet16(ds, 0x20e805, ax);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) >> 3);
    ax = memoryAGet16(ds, 0x20d7e7);
    ax -= memoryAGet16(ds, 0x20e805);
    ax <<= 1;
    memoryASet16(ds, 0x20e809, ax);
    memoryASet16(ds, 0x20e805, ax);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) << 2);
    ax = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + ax);
    ebp = 0;
    bp = memoryAGet16(ds, esi + 2);
    esi += ebp;
    bp >>= 3;
    ax = memoryAGet16(ds, 0x20d7e7);
    memoryASet16(ds, 0x20e805, ax);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - bp);
    ax = memoryAGet16(ds, 0x20e805);
    push32(eax);
    memoryASet32(ds, 0x20e801, 0x00000000);
    goto loc_1ccf63;
loc_1ccf5b: // 0160:1ccf5b
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x000a);
loc_1ccf63: // 0160:1ccf63
    edi = memoryAGet32(ds, 0x20e801);
    if (bx < memoryAGet16(ds, esi + edi + 6))
        goto loc_1ccf7a;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e805) >= 0)
        goto loc_1ccf5b;
loc_1ccf7a: // 0160:1ccf7a
    eax = pop32();
    memoryASet16(ds, 0x20e805, ax);
loc_1ccf81: // 0160:1ccf81
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x000a);
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    if (bx > memoryAGet16(ds, esi + edi + 10))
        goto loc_1ccfac;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20e805) >= 0)
        goto loc_1ccf81;
    memoryASet16(ds, 0x20e809, 0x0000);
loc_1ccfac: // 0160:1ccfac
    di = memoryAGet16(ds, 0x20e801);
    if ((short)memoryAGet16(ds, 0x20e809) >= (short)di)
        goto loc_1cd0ff;
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    ax = memoryAGet16(ds, esi + edi + 8);
    bp = memoryAGet16(ds, esi + edi + 12);
    if ((short)ax <= (short)bp)
        goto loc_1cd052;
    if (cx >= ax)
        goto loc_1cd0c9;
    if (cx <= bp)
        goto loc_1cd0c9;
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    ax = memoryAGet16(ds, esi + edi + 6);
    ax -= bx;
    bp = memoryAGet16(ds, esi + edi + 8);
    bp -= cx;
    bp = -bp;
    bp -= ax;
    if (bp >= 0x000a)
        goto loc_1cd0c9;
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    ax = memoryAGet16(ds, esi + edi + 6);
    memoryASet16(ds, 0x20d0f7, ax);
    ax = memoryAGet16(ds, esi + edi + 8);
    memoryASet16(ds, 0x20d0f9, ax);
    ax = memoryAGet16(ds, esi + edi + 10);
    memoryASet16(ds, 0x20d0fb, ax);
    ax = memoryAGet16(ds, esi + edi + 12);
    memoryASet16(ds, 0x20d0fd, ax);
    ax = memoryAGet16(ds, esi + edi + 4);
    goto loc_1cd0d6;
loc_1cd052: // 0160:1cd052
    if (cx <= ax)
        goto loc_1cd0c9;
    if (cx >= bp)
        goto loc_1cd0c9;
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    ax = memoryAGet16(ds, esi + edi + 6);
    ax -= bx;
    bp = memoryAGet16(ds, esi + edi + 8);
    bp -= cx;
    ax -= bp;
    if (ax >= 0x000a)
        goto loc_1cd0c9;
    edi = 0;
    di = memoryAGet16(ds, 0x20e809);
    ax = memoryAGet16(ds, esi + edi + 6);
    memoryASet16(ds, 0x20d0f7, ax);
    ax = memoryAGet16(ds, esi + edi + 8);
    memoryASet16(ds, 0x20d0f9, ax);
    ax = memoryAGet16(ds, esi + edi + 10);
    memoryASet16(ds, 0x20d0fb, ax);
    ax = memoryAGet16(ds, esi + edi + 12);
    memoryASet16(ds, 0x20d0fd, ax);
    ax = memoryAGet16(ds, esi + edi + 4);
    goto loc_1cd0d6;
    // gap 3 bytes
loc_1cd0c9: // 0160:1cd0c9
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x000a);
    goto loc_1ccfac;
loc_1cd0d6: // 0160:1cd0d6
    memoryASet16(ds, 0x20d05b, ax);
    if (memoryAGet16(ds, 0x20d7e7) == 0x00b0)
        goto loc_1cd0ff;
    bx = ax;
    bx &= 0xff00;
    ax &= 0x00ff;
    ax <<= 1;
    ax |= bx;
    memoryASet16(ds, 0x20d05b, ax);
loc_1cd0ff: // 0160:1cd0ff
    esp += 4;
    return;
}
void sub_1cd100() // 0160:1cd100 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cd1f4;
    ax = memoryAGet16(ds, 0x20d83b);
    memoryASet16(ds, 0x20d831, ax);
    ax = memoryAGet16(ds, 0x20d843);
    memoryASet16(ds, 0x20d833, ax);
    ax = memoryAGet16(ds, 0x20d84b);
    memoryASet16(ds, 0x20d835, ax);
    ax = memoryAGet16(ds, 0x20d853);
    memoryASet16(ds, 0x20d837, ax);
    ax = memoryAGet16(ds, 0x20d05d);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20d15b);
    memoryASet16(ds, 0x20d16b, ax);
    ax = memoryAGet16(ds, 0x20cf73);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1cd554();
    al = memoryAGet(ds, 0x20d159);
    memoryASet(ds, 0x20d149, al);
    al = memoryAGet(ds, 0x20c848);
    memoryASet(ds, 0x20c840, al);
    ax = memoryAGet16(ds, 0x20d16b);
    memoryASet16(ds, 0x20d15b, ax);
    al = memoryAGet(ds, 0x20d149);
    if (!al)
        goto loc_1cd1ba;
    if ((char)al <= (char)0x40)
        goto loc_1cd1cd;
loc_1cd1ba: // 0160:1cd1ba
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0021)
        goto loc_1cd1cd;
    memoryASet16(ds, 0x20cf85, 0x003b);
loc_1cd1cd: // 0160:1cd1cd
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cd1f4;
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1cd1f4;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1cd1f4;
    memoryASet(ds, 0x20c840, 0x00);
loc_1cd1f4: // 0160:1cd1f4
    esp += 4;
    return;
}
void sub_1cd1f5() // 0160:1cd1f5 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cd335;
    if (!(memoryAGet16(ds, 0x20e7df) & 0xffff))
        goto loc_1cd229;
    memoryASet16(ds, 0x20e7df, memoryAGet16(ds, 0x20e7df) - 0x0001);
    if (memoryAGet16(ds, 0x20e7df) == 0x0006)
        goto loc_1cd229;
    memoryASet(ds, 0x20c841, 0x00);
    esp += 4;
    return;
loc_1cd229: // 0160:1cd229
    ax = memoryAGet16(ds, 0x20d83b);
    memoryASet16(ds, 0x20d831, ax);
    ax = memoryAGet16(ds, 0x20d843);
    memoryASet16(ds, 0x20d833, ax);
    ax = memoryAGet16(ds, 0x20d84b);
    memoryASet16(ds, 0x20d835, ax);
    ax = memoryAGet16(ds, 0x20d853);
    memoryASet16(ds, 0x20d837, ax);
    if (memoryAGet16(ds, 0x20d89f) & 0xffff)
        goto loc_1cd277;
    if (memoryAGet16(ds, 0x20d083) & 0xffff)
        goto loc_1cd277;
    memoryASet(ds, 0x20c841, 0x00);
    esp += 4;
    return;
loc_1cd277: // 0160:1cd277
    ax = memoryAGet16(ds, 0x20d05f);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20d15d);
    memoryASet16(ds, 0x20d16b, ax);
    ax = memoryAGet16(ds, 0x20cf75);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1cd554();
    al = memoryAGet(ds, 0x20d159);
    memoryASet(ds, 0x20d14b, al);
    al = memoryAGet(ds, 0x20c848);
    memoryASet(ds, 0x20c841, al);
    ax = memoryAGet16(ds, 0x20d16b);
    memoryASet16(ds, 0x20d15d, ax);
    al = memoryAGet(ds, 0x20d14b);
    if (!al)
        goto loc_1cd2f2;
    if ((char)al <= (char)0x40)
        goto loc_1cd30e;
loc_1cd2f2: // 0160:1cd2f2
    if (memoryAGet(ds, 0x20d125) != 0xff)
        goto loc_1cd30e;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0021)
        goto loc_1cd30e;
    memoryASet16(ds, 0x20cf87, 0x003b);
loc_1cd30e: // 0160:1cd30e
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cd335;
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1cd335;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1cd335;
    memoryASet(ds, 0x20c841, 0x00);
loc_1cd335: // 0160:1cd335
    esp += 4;
    return;
}
void sub_1cd336() // 0160:1cd336 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cd444;
    if (!(memoryAGet16(ds, 0x20e7e1) & 0xffff))
        goto loc_1cd36a;
    memoryASet16(ds, 0x20e7e1, memoryAGet16(ds, 0x20e7e1) - 0x0001);
    if (memoryAGet16(ds, 0x20e7e1) == 0x0006)
        goto loc_1cd36a;
    memoryASet(ds, 0x20c842, 0x00);
    esp += 4;
    return;
loc_1cd36a: // 0160:1cd36a
    ax = memoryAGet16(ds, 0x20d83d);
    memoryASet16(ds, 0x20d831, ax);
    ax = memoryAGet16(ds, 0x20d845);
    memoryASet16(ds, 0x20d833, ax);
    ax = memoryAGet16(ds, 0x20d84d);
    memoryASet16(ds, 0x20d835, ax);
    ax = memoryAGet16(ds, 0x20d855);
    memoryASet16(ds, 0x20d837, ax);
    if (memoryAGet16(ds, 0x20d085) & 0xffff)
        goto loc_1cd3ad;
    memoryASet(ds, 0x20c842, 0x00);
    esp += 4;
    return;
loc_1cd3ad: // 0160:1cd3ad
    ax = memoryAGet16(ds, 0x20d061);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20d15f);
    memoryASet16(ds, 0x20d16b, ax);
    ax = memoryAGet16(ds, 0x20cf77);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1cd554();
    al = memoryAGet(ds, 0x20d159);
    memoryASet(ds, 0x20d14d, al);
    al = memoryAGet(ds, 0x20c848);
    memoryASet(ds, 0x20c842, al);
    ax = memoryAGet16(ds, 0x20d16b);
    memoryASet16(ds, 0x20d15f, ax);
    al = memoryAGet(ds, 0x20d14d);
    if (!al)
        goto loc_1cd428;
    if ((char)al <= (char)0x40)
        goto loc_1cd444;
loc_1cd428: // 0160:1cd428
    if (memoryAGet(ds, 0x20d127) != 0xff)
        goto loc_1cd444;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0021)
        goto loc_1cd444;
    memoryASet16(ds, 0x20cf89, 0x003b);
loc_1cd444: // 0160:1cd444
    esp += 4;
    return;
}
void sub_1cd445() // 0160:1cd445 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cd553;
    if (!(memoryAGet16(ds, 0x20e7e3) & 0xffff))
        goto loc_1cd479;
    memoryASet16(ds, 0x20e7e3, memoryAGet16(ds, 0x20e7e3) - 0x0001);
    if (memoryAGet16(ds, 0x20e7e3) == 0x0006)
        goto loc_1cd479;
    memoryASet(ds, 0x20c843, 0x00);
    esp += 4;
    return;
loc_1cd479: // 0160:1cd479
    ax = memoryAGet16(ds, 0x20d83f);
    memoryASet16(ds, 0x20d831, ax);
    ax = memoryAGet16(ds, 0x20d847);
    memoryASet16(ds, 0x20d833, ax);
    ax = memoryAGet16(ds, 0x20d84f);
    memoryASet16(ds, 0x20d835, ax);
    ax = memoryAGet16(ds, 0x20d857);
    memoryASet16(ds, 0x20d837, ax);
    if (memoryAGet16(ds, 0x20d087) & 0xffff)
        goto loc_1cd4bc;
    memoryASet(ds, 0x20c843, 0x00);
    esp += 4;
    return;
loc_1cd4bc: // 0160:1cd4bc
    ax = memoryAGet16(ds, 0x20d063);
    memoryASet16(ds, 0x20d06d, ax);
    ax = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20cfa7, ax);
    ax = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20cfb9, ax);
    ax = memoryAGet16(ds, 0x20d161);
    memoryASet16(ds, 0x20d16b, ax);
    ax = memoryAGet16(ds, 0x20cf79);
    memoryASet16(ds, 0x20cf83, ax);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1cd554();
    al = memoryAGet(ds, 0x20d159);
    memoryASet(ds, 0x20d14f, al);
    al = memoryAGet(ds, 0x20c848);
    memoryASet(ds, 0x20c843, al);
    ax = memoryAGet16(ds, 0x20d16b);
    memoryASet16(ds, 0x20d161, ax);
    al = memoryAGet(ds, 0x20d14f);
    if (!al)
        goto loc_1cd537;
    if ((char)al <= (char)0x40)
        goto loc_1cd553;
loc_1cd537: // 0160:1cd537
    if (memoryAGet(ds, 0x20d129) != 0xff)
        goto loc_1cd553;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0021)
        goto loc_1cd553;
    memoryASet16(ds, 0x20cf8b, 0x003b);
loc_1cd553: // 0160:1cd553
    esp += 4;
    return;
}
void sub_1cd554() // 0160:1cd554 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20ee35) & 0xffff))
        goto loc_1cd567;
    memoryASet(ds, 0x20c848, 0x40);
    esp += 4;
    return;
loc_1cd567: // 0160:1cd567
    ax += 0x0010;
    bx += 0x0010;
    sub_1cd72b();
    memoryASet(ds, 0x20d159, al);
    memoryASet(ds, 0x20c848, 0x11);
    if ((char)al <= (char)0x20)
        goto loc_1cd5c2;
    al -= 0x20;
    memoryASet(ds, 0x20d159, al);
    if (memoryAGet16(ds, 0x20d7b9) == 0x002d)
        goto loc_1cd59f;
    if (memoryAGet16(ds, 0x20d7b9) != 0x002e)
        goto loc_1cd5af;
loc_1cd59f: // 0160:1cd59f
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) | 0x02);
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) & 0xfe);
    goto loc_1cd5c2;
loc_1cd5af: // 0160:1cd5af
    ax = memoryAGet16(ds, 0x20cfb9);
    if ((short)ax <= (short)0x00a0)
        goto loc_1cd5c2;
    memoryASet(ds, 0x20c848, 0x00);
loc_1cd5c2: // 0160:1cd5c2
    if (!(memoryAGet16(ds, 0x20d06d) & 0xffff))
        goto loc_1cd5eb;
    eax = 0;
    al = memoryAGet(ds, 0x20d159);
    al -= 0x01;
    ax <<= 5;
    bx = memoryAGet16(ds, 0x20cf83);
    bx &= 0x001f;
    bx <<= 5;
    goto loc_1cd5ff;
loc_1cd5eb: // 0160:1cd5eb
    eax = 0;
    al = memoryAGet(ds, 0x20d159);
    al -= 0x01;
    ax <<= 5;
    bx = memoryAGet16(ds, 0x20cfa7);
loc_1cd5ff: // 0160:1cd5ff
    ax -= bx;
    if ((short)ax >= 0)
        goto loc_1cd610;
    if ((short)ax >= (short)0xfe00)
        goto loc_1cd61a;
    ax += 0x0400;
    if (!ax)
        goto loc_1cd61a;
loc_1cd610: // 0160:1cd610
    if ((short)ax <= (short)0x0200)
        goto loc_1cd61a;
    ax -= 0x0400;
loc_1cd61a: // 0160:1cd61a
    memoryASet16(ds, 0x20d82f, ax);
    if (!!(ax & 0xffff & 0x8000))
        goto loc_1cd62f;
    flags.sign = (char)(memoryAGet(ds, 0x20c848) | 0x08) < 0;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) | 0x08);
    goto loc_1cd636;
loc_1cd62f: // 0160:1cd62f
    flags.sign = (char)(memoryAGet(ds, 0x20c848) | 0x04) < 0;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) | 0x04);
loc_1cd636: // 0160:1cd636
    ax = memoryAGet16(ds, 0x20d82f);
    if (!flags.sign)
        goto loc_1cd641;
    flags.sign = (short)ax > 0;
    ax = -ax;
loc_1cd641: // 0160:1cd641
    bx = memoryAGet16(ds, 0x20d16b);
    if (!flags.sign)
        goto loc_1cd64d;
    bx = -bx;
loc_1cd64d: // 0160:1cd64d
    bp = memoryAGet16(ds, 0x20d831);
    memoryASet16(ds, 0x20e801, bp);
    if ((short)bp >= (short)memoryAGet16(ds, 0x20cfb9))
        goto loc_1cd69f;
    cx = memoryAGet16(ds, 0x20d833);
    cx -= memoryAGet16(ds, 0x20cfb9);
    cx >>= 1;
    if ((short)ax <= (short)cx)
        goto loc_1cd68a;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) & 0xef);
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) | 0x40);
    goto loc_1cd69f;
loc_1cd68a: // 0160:1cd68a
    if ((short)bx <= (short)ax)
        goto loc_1cd69f;
    bx -= ax;
    if ((short)bx <= (short)0x000a)
        goto loc_1cd69f;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) & 0xef);
loc_1cd69f: // 0160:1cd69f
    ebx = 0;
    bl = memoryAGet(ds, 0x20d159);
    bl -= 0x01;
    if (bx != memoryAGet16(ds, 0x20cf83))
        goto loc_1cd6c3;
    if ((short)ax >= (short)memoryAGet16(ds, 0x20d837))
        goto loc_1cd6f3;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) & 0xf3);
loc_1cd6c3: // 0160:1cd6c3
    bl = memoryAGet(ds, 0x20d159);
    bl -= 0x01;
    if (!bl)
        goto loc_1cd6f3;
    if (bl == 0x08)
        goto loc_1cd6f3;
    if (bl == 0x10)
        goto loc_1cd6f3;
    if (bl == 0x18)
        goto loc_1cd6f3;
    ax = memoryAGet16(ds, 0x20d835);
    if ((short)ax >= (short)memoryAGet16(ds, 0x20cfb9))
        goto loc_1cd6f3;
    memoryASet(ds, 0x20c848, memoryAGet(ds, 0x20c848) & 0xef);
loc_1cd6f3: // 0160:1cd6f3
    ax = memoryAGet16(ds, 0x20d82f);
    memoryASet16(ds, 0x20d16b, ax);
    ax = memoryAGet16(ds, 0x20cf83);
    ax <<= 5;
    bx = ax;
    ax -= memoryAGet16(ds, 0x20cfa7);
    ax &= 0x03ff;
    if ((short)ax <= (short)0x0160)
        goto loc_1cd72a;
    if ((short)ax >= (short)0x02a0)
        goto loc_1cd72a;
    memoryASet(ds, 0x20c848, 0x10);
loc_1cd72a: // 0160:1cd72a
    esp += 4;
    return;
}
void sub_1cd72b() // 0160:1cd72b +long
{
    esp -= 4;
    push32(esi);
    esi = memoryAGet32(ds, 0x2eeb9c);
    esi += 0x00000004;
    esi += memoryAGet32(ds, 0x20cefb);
    ax >>= 5;
    bx >>= 5;
    edx = 0;
    cx = memoryAGet16(ds, 0x20cef7);
    mul16(cx);
    ax += bx;
    eax &= 0x0000ffff;
    al = memoryAGet(ds, esi + eax);
    esi = pop32();
    esp += 4;
}
void sub_1cd75c() // 0160:1cd75c +long +returnZero
{
    esp -= 4;
    goto loc_1cd75c;
loc_1b2710: // 0160:1b2710
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2716: // 0160:1b2716
    ebx = 0x00000000;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2724: // 0160:1b2724
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    ax += bx;
    if (ax == 0x0006)
        goto loc_1b2748;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2748: // 0160:1b2748
    bx = 0x0080;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2755: // 0160:1b2755
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    if (bx == ax)
        goto loc_1b2775;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2775: // 0160:1b2775
    bx = 0x0180;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2782: // 0160:1b2782
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    bx += bx;
    ax -= bx;
    if (!ax)
        goto loc_1b27ab;
    if (ax == 0x0002)
        goto loc_1b27ab;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b27ab: // 0160:1b27ab
    bx = 0x0155;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b27b8: // 0160:1b27b8
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    bx += bx;
    bx -= ax;
    if (bx == 0x0006)
        goto loc_1b27e5;
    if (bx == 0x0008)
        goto loc_1b27e5;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b27e5: // 0160:1b27e5
    bx = 0x0155;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b27f2: // 0160:1b27f2
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    bx += bx;
    ax += bx;
    flags.zero = ax == 0x000c;
    if ((short)ax < (short)0x000c)
        goto loc_1b281f;
    flags.zero = ax == 0x000e;
    if (flags.zero)
        goto loc_1b281f;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b281f: // 0160:1b281f
    bx = 0x00ab;
    eax = 0x00000001;
    esp += 4;
    return;
loc_1b2829: // 0160:1b2829
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    bx += bx;
    ax += bx;
    if (ax == 0x0004)
        goto loc_1b2856;
    if (ax == 0x0006)
        goto loc_1b2856;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2856: // 0160:1b2856
    bx = 0x00ab;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2863: // 0160:1b2863
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    ax += ax;
    bx -= ax;
    if (!bx)
        goto loc_1b288c;
    if (bx == 0x0002)
        goto loc_1b288c;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b288c: // 0160:1b288c
    bx = 0x01ab;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2899: // 0160:1b2899
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    ax += ax;
    ax -= bx;
    if (ax == 0x0008)
        goto loc_1b28c6;
    if (ax == 0x0006)
        goto loc_1b28c6;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b28c6: // 0160:1b28c6
    bx = 0x01ab;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b28d3: // 0160:1b28d3
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    ax += ax;
    ax += bx;
    if (ax == 0x0004)
        goto loc_1b2900;
    if (ax == 0x0006)
        goto loc_1b2900;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2900: // 0160:1b2900
    bx = 0x0055;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b290d: // 0160:1b290d
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    bx = memoryAGet16(ds, 0x20d7e5);
    bx &= 0x0006;
    ax += ax;
    ax -= bx;
    if (ax == 0x0008)
        goto loc_1b293a;
    if (ax == 0x0006)
        goto loc_1b293a;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b293a: // 0160:1b293a
    bx = 0x0055;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2947: // 0160:1b2947
    bx = 0x0100;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2954: // 0160:1b2954
    bx = 0x0100;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2961: // 0160:1b2961
    ax = memoryAGet16(ds, 0x20d7e5);
    ax &= 0x0006;
    if (ax == 0x0002)
        goto loc_1b2977;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2977: // 0160:1b2977
    bx = 0x0100;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b2984: // 0160:1b2984
    ax = memoryAGet16(ds, 0x20d7e3);
    ax &= 0x0006;
    if (ax == 0x0002)
        goto loc_1b299a;
    eax = 0;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b299a: // 0160:1b299a
    ebx = 0x00000000;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
loc_1b29a8: // 0160:1b29a8
    ebx = 0x00000000;
    eax = 0x00000001;
    flags.zero = !ax;
    esp += 4;
    return;
    // gap 109990 bytes
loc_1cd75c: // 0160:1cd75c
    memoryASet16(ds, 0x20d7e3, cx);
    memoryASet16(ds, 0x20d7e5, dx);
    ax &= 0x00ff;
    ax <<= 4;
    cx &= 0x0018;
    cx >>= 1;
    dx &= 0x0018;
    dx >>= 3;
    cx += dx;
    ax += cx;
    push32(esi);
    esi = memoryAGet32(ds, 0x20e821);
    al = memoryAGet(ds, esi + eax);
    esi = pop32();
    if (al == 0x20)
        goto loc_1cd7b4;
    if ((char)al < (char)0x24)
        goto loc_1cd7bf;
    if ((char)al >= (char)0x38)
        goto loc_1cd7bf;
    al -= 0x24;
    eax &= 0x000000ff;
    ax <<= 2;
    edi = memoryAGet32(ds, 0x20d7d7);
    edi = memoryAGet32(ds, edi + eax);
    switch (edi)
    {
        case 0x1b2710: goto loc_1b2710;
        case 0x1b2716: goto loc_1b2716;
        case 0x1b2724: goto loc_1b2724;
        case 0x1b2755: goto loc_1b2755;
        case 0x1b2782: goto loc_1b2782;
        case 0x1b27b8: goto loc_1b27b8;
        case 0x1b27f2: goto loc_1b27f2;
        case 0x1b2829: goto loc_1b2829;
        case 0x1b2863: goto loc_1b2863;
        case 0x1b2899: goto loc_1b2899;
        case 0x1b28d3: goto loc_1b28d3;
        case 0x1b290d: goto loc_1b290d;
        case 0x1b2984: goto loc_1b2984;
        //case 0x1b2710: goto loc_1b2710;
        case 0x1b2947: goto loc_1b2947;
//        case 0x1b2724: goto loc_1b2724;
//        case 0x1b2755: goto loc_1b2755;
//        case 0x1b2782: goto loc_1b2782;
//        case 0x1b27b8: goto loc_1b27b8;
//        case 0x1b27f2: goto loc_1b27f2;
//        case 0x1b2829: goto loc_1b2829;
//        case 0x1b2863: goto loc_1b2863;
//        case 0x1b2899: goto loc_1b2899;
//        case 0x1b28d3: goto loc_1b28d3;
//        case 0x1b290d: goto loc_1b290d;
        case 0x1b2961: goto loc_1b2961;
        case 0x1b2954: goto loc_1b2954;
//        case 0x1b2710: goto loc_1b2710;
//        case 0x1b2724: goto loc_1b2724;
//        case 0x1b2755: goto loc_1b2755;
//        case 0x1b2782: goto loc_1b2782;
//        case 0x1b27b8: goto loc_1b27b8;
//        case 0x1b27f2: goto loc_1b27f2;
//        case 0x1b2829: goto loc_1b2829;
//        case 0x1b2863: goto loc_1b2863;
//        case 0x1b2899: goto loc_1b2899;
//        case 0x1b28d3: goto loc_1b28d3;
//        case 0x1b290d: goto loc_1b290d;
//        case 0x1b2961: goto loc_1b2961;
        case 0x1b29a8: goto loc_1b29a8;
//        case 0x1b2710: goto loc_1b2710;
//        case 0x1b2724: goto loc_1b2724;
//        case 0x1b2755: goto loc_1b2755;
//        case 0x1b2782: goto loc_1b2782;
//        case 0x1b27b8: goto loc_1b27b8;
//        case 0x1b27f2: goto loc_1b27f2;
//        case 0x1b2829: goto loc_1b2829;
//        case 0x1b2863: goto loc_1b2863;
//        case 0x1b2899: goto loc_1b2899;
//        case 0x1b28d3: goto loc_1b28d3;
//        case 0x1b290d: goto loc_1b290d;
//        case 0x1b2984: goto loc_1b2984;
        default:
            stop("ind 0160:1cd7b2");
    }
loc_1cd7b4: // 0160:1cd7b4
    edi = memoryAGet32(ds, 0x20d7d7);
    edi = memoryAGet32(ds, edi + 80);
    switch (edi)
    {
        case 0x1b2710: goto loc_1b2710;
//        case 0x1b2710: goto loc_1b2710;
        case 0x1b2954: goto loc_1b2954;
        case 0x1b29a8: goto loc_1b29a8;
        case 0x1b2947: goto loc_1b2947;
        default:
            stop("ind 0160:1cd7bd");
    }
loc_1cd7bf: // 0160:1cd7bf
    eax = 0;
    flags.zero = !ax;
    esp += 4;
}
void sub_1cd7c5() // 0160:1cd7c5 +long
{
    esp -= 4;
    if (ax < 0xea60)
        goto loc_1cd7d0;
    ax = 0x003f;
    esp += 4;
    return;
loc_1cd7d0: // 0160:1cd7d0
    cx = ax;
    dx = bx;
    push32(ecx);
    push32(edx);
    ax >>= 5;
    bx >>= 5;
    ax <<= 1;
    bx <<= 1;
    edx = 0;
    mul16(memoryAGet16(ds, 0x20cef7));
    edx = pop32();
    ecx = pop32();
    ax += bx;
    eax &= 0x0000ffff;
    push32(esi);
    esi = memoryAGet32(ds, 0x20e81d);
    al = memoryAGet(ds, esi + eax);
    esi = pop32();
    ax &= 0x00ff;
    ax <<= 4;
    cx &= 0x0018;
    cx >>= 1;
    dx &= 0x0018;
    dx >>= 3;
    cx += dx;
    ax += cx;
    push32(edi);
    edi = memoryAGet32(ds, 0x20e821);
    al = memoryAGet(ds, edi + eax);
    edi = pop32();
    esp += 4;
}
void sub_1cd830() // 0160:1cd830 +long
{
    esp -= 4;
    esi = 0x0020dcc5;
    ax = memoryAGet16(ds, 0x20dcc3);
    if (ax != 0xffff)
        goto loc_1cd856;
    bl = memoryAGet(ds, 0x20c840);
    memoryASet(ds, esi, bl);
    esi++;
    memoryASet(ds, esi, 0x01);
    memoryASet16(ds, 0x20dcc3, memoryAGet16(ds, 0x20dcc3) + 0x0001);
    esp += 4;
    return;
loc_1cd856: // 0160:1cd856
    if ((short)ax >= (short)0x0200)
        goto loc_1cd895;
    ax <<= 1;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
    if (bl != memoryAGet(ds, 0x20c840))
        goto loc_1cd87e;
    bl = memoryAGet(ds, esi + eax + 1);
    if (bl == 0xff)
        goto loc_1cd87e;
    memoryASet(ds, esi + eax + 1, memoryAGet(ds, esi + eax + 1) + 0x01);
    esp += 4;
    return;
loc_1cd87e: // 0160:1cd87e
    memoryASet16(ds, 0x20dcc3, memoryAGet16(ds, 0x20dcc3) + 0x0001);
    bl = memoryAGet(ds, 0x20c840);
    memoryASet(ds, esi + eax + 2, bl);
    memoryASet(ds, esi + eax + 3, 0x01);
loc_1cd895: // 0160:1cd895
    esp += 4;
    return;
}
void sub_1cd896() // 0160:1cd896 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d8b7);
    if (!ax)
        goto loc_1cd91d;
    esi = 0x0020d8c1;
    ax = memoryAGet16(ds, 0x20d8bd);
    if (ax != 0xffff)
        goto loc_1cd8cf;
    dl = memoryAGet(ds, esi);
    memoryASet(ds, 0x20d8c0, dl);
    esi++;
    dl = memoryAGet(ds, esi);
    memoryASet(ds, 0x20d8bf, dl);
    memoryASet16(ds, 0x20d8bd, memoryAGet16(ds, 0x20d8bd) + 0x0001);
loc_1cd8cf: // 0160:1cd8cf
    dl = memoryAGet(ds, 0x20d8c0);
    memoryASet(ds, 0x20c842, dl);
    memoryASet(ds, 0x20d8bf, memoryAGet(ds, 0x20d8bf) - 0x01);
    if (memoryAGet(ds, 0x20d8bf))
        goto loc_1cd91c;
    memoryASet16(ds, 0x20d8bd, memoryAGet16(ds, 0x20d8bd) + 0x0001);
    ax = memoryAGet16(ds, 0x20d8bd);
    ax <<= 1;
    eax &= 0x0000ffff;
    bl = memoryAGet(ds, esi + eax);
    if (bl != 0xff)
        goto loc_1cd90c;
    memoryASet16(ds, 0x20d8bd, memoryAGet16(ds, 0x20d8bd) - 0x0001);
    bl = 0;
loc_1cd90c: // 0160:1cd90c
    memoryASet(ds, 0x20d8c0, bl);
    bl = memoryAGet(ds, esi + eax + 1);
    memoryASet(ds, 0x20d8bf, bl);
loc_1cd91c: // 0160:1cd91c
    esp += 4;
    return;
loc_1cd91d: // 0160:1cd91d
    memoryASet16(ds, 0x20cf41, 0x0000);
    esp += 4;
}
void sub_1cd927() // 0160:1cd927 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d2b7, 0x0000);
    esi = 0x0020cf3d;
    edi = 0x0020cf85;
    cx = 0;
    dx = 0;
    memoryASet16(ds, 0x20e809, 0x0008);
loc_1cd949: // 0160:1cd949
    bx = memoryAGet16(ds, edi);
    edi += 0x00000002;
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if (!ax)
        goto loc_1cd96a;
    if ((short)ax >= (short)0x0005)
        goto loc_1cd96a;
    cx++;
    if ((short)bx < (short)0x0020)
        goto loc_1cd96a;
    dx++;
loc_1cd96a: // 0160:1cd96a
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1cd949;
    if (dx != cx)
        goto loc_1cd982;
    memoryASet16(ds, 0x20d2b7, 0x0001);
loc_1cd982: // 0160:1cd982
    esp += 4;
    return;
}
void sub_1cd983() // 0160:1cd983 +long
{
    esp -= 4;
    if (dl == 0x21)
        goto loc_1cd999;
    dx = memoryAGet16(ds, 0x20c830);
    dx &= 0x0001;
    if (dx)
        goto loc_1cdac6;
loc_1cd999: // 0160:1cd999
    memoryASet16(ds, 0x20e7fd, bx);
    memoryASet16(ds, 0x20e801, cx);
    if ((short)ax <= (short)0x0010)
        goto loc_1cdab3;
    if ((short)ax <= (short)0x00f0)
        goto loc_1cda93;
    if ((short)ax <= (short)0x0110)
        goto loc_1cda7f;
    if ((short)ax <= (short)0x01f0)
        goto loc_1cda5f;
    if ((short)ax <= (short)0x0210)
        goto loc_1cda4b;
    if ((short)ax <= (short)0x02f0)
        goto loc_1cda27;
    if ((short)ax < (short)0x0310)
        goto loc_1cda0f;
    if ((short)ax >= (short)0x03f0)
        goto loc_1cdab3;
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - 0x0008);
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) - 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    cx -= 0x0001;
    bx -= 0x0001;
    esp += 4;
    return;
loc_1cda0f: // 0160:1cda0f
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) - 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    bx -= 0x0001;
    esp += 4;
    return;
loc_1cda27: // 0160:1cda27
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x0008);
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) - 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    bx -= 0x0001;
    cx += 0x0001;
    esp += 4;
    return;
loc_1cda4b: // 0160:1cda4b
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    cx += 0x0001;
    esp += 4;
    return;
loc_1cda5f: // 0160:1cda5f
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x0008);
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) + 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    cx += 0x0001;
    bx += 0x0001;
    esp += 4;
    return;
loc_1cda7f: // 0160:1cda7f
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) + 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    bx += 0x0001;
    esp += 4;
    return;
loc_1cda93: // 0160:1cda93
    memoryASet16(ds, 0x20e7fd, memoryAGet16(ds, 0x20e7fd) + 0x0008);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    bx += 0x0001;
    cx -= 0x0001;
    esp += 4;
    return;
loc_1cdab3: // 0160:1cdab3
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) - 0x0008);
    sub_1cdac7();
    if (!flags.zero)
        goto loc_1cdac6;
    cx -= 0x0001;
loc_1cdac6: // 0160:1cdac6
    esp += 4;
    return;
}
void sub_1cdac7() // 0160:1cdac7 +long +returnZero
{
    esp -= 4;
    flags.zero = dl == 0x21;
    if (!flags.zero)
        goto loc_1cdb00;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    ax = memoryAGet16(ds, 0x20e7fd);
    ax += 0x0010;
    bx = memoryAGet16(ds, 0x20e801);
    bx += 0x0010;
    sub_1cd7c5();
    flags.zero = al == 0x21;
    if (flags.zero)
        goto loc_1cdafc;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    memoryASet16(ds, 0x20e801, 0x0001);
    esp += 4;
    return;
loc_1cdafc: // 0160:1cdafc
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
loc_1cdb00: // 0160:1cdb00
    memoryASet16(ds, 0x20e801, 0x0000);
    esp += 4;
}
void sub_1cdb0a() // 0160:1cdb0a +long
{
    esp -= 4;
    memoryASet16(ds, 0x20e801, ax);
    ax &= 0x00ff;
    ax <<= 2;
    esi = memoryAGet32(ds, 0x20e819);
    eax &= 0x0000ffff;
    cx = memoryAGet16(ds, esi + eax);
    ecx &= 0x0000ffff;
    dx = memoryAGet16(ds, esi + eax + 2);
    edx &= 0x0000ffff;
    ebp = edx;
    ebx &= 0x0000ffff;
    eax = ecx;
    mul32(ebx);
    ecx = eax;
    eax = ebp;
    mul32(ebx);
    edx = eax;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x00ff)
        goto loc_1cdb84;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x01ff)
        goto loc_1cdb7d;
    if ((short)memoryAGet16(ds, 0x20e801) <= (short)0x02ff)
        goto loc_1cdb74;
    ebx = ecx;
    eax = edx;
    eax = -eax;
    esp += 4;
    return;
loc_1cdb74: // 0160:1cdb74
    eax = ecx;
    ebx = edx;
    eax = -eax;
    ebx = -ebx;
    esp += 4;
    return;
loc_1cdb7d: // 0160:1cdb7d
    ebx = ecx;
    eax = edx;
    ebx = -ebx;
    esp += 4;
    return;
loc_1cdb84: // 0160:1cdb84
    eax = ecx;
    ebx = edx;
    esp += 4;
}
void sub_1cdb89() // 0160:1cdb89 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20cecb);
    if (eax)
        goto loc_1cdb9e;
    ebx = memoryAGet32(ds, 0x20cecf);
    if ((int32_t)ebx < 0)
        goto loc_1cdbac;
    goto loc_1cdbc4;
loc_1cdb9e: // 0160:1cdb9e
    if ((int32_t)eax >= 0)
        goto loc_1cdbb0;
    eax = -eax;
    ebx = memoryAGet32(ds, 0x20cecf);
    if ((int32_t)ebx >= 0)
        goto loc_1cdbbe;
loc_1cdbac: // 0160:1cdbac
    ebx = -ebx;
    goto loc_1cdbc4;
loc_1cdbb0: // 0160:1cdbb0
    ebx = memoryAGet32(ds, 0x20cecf);
    if (!ebx)
        goto loc_1cdbbe;
    if ((int32_t)ebx >= 0)
        goto loc_1cdbc4;
    ebx = -ebx;
loc_1cdbbe: // 0160:1cdbbe
    ecx = eax;
    eax = ebx;
    ebx = ecx;
loc_1cdbc4: // 0160:1cdbc4
    memoryASet32(ds, 0x20ced3, eax);
    memoryASet32(ds, 0x20ced7, ebx);
    if (ebx)
        goto loc_1cdbf5;
    if (eax)
        goto loc_1cdbf5;
    memoryASet16(ds, 0x20cfb9, 0x0000);
    ax = memoryAGet16(ds, 0x20cf95);
    ax <<= 5;
    memoryASet16(ds, 0x20cfa7, ax);
    goto loc_1cde49;
loc_1cdbf5: // 0160:1cdbf5
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1cdc96;
loc_1cdbfd: // 0160:1cdbfd
    if (eax < 0x0000ffff)
        goto loc_1cdc0a;
    eax >>= 1;
    ebx >>= 1;
    goto loc_1cdbfd;
loc_1cdc0a: // 0160:1cdc0a
    ecx = 0;
    if (!eax)
        goto loc_1cdd15;
    ecx = 0;
    memoryASet32(ds, 0x20e801, ebx);
loc_1cdc1c: // 0160:1cdc1c
    if (ebx & 0x80000000)
        goto loc_1cdc36;
    memoryASet32(ds, 0x20e801, ebx);
    ebx <<= 1;
    cx += 0x0001;
    if (cx != 0x000a)
        goto loc_1cdc1c;
loc_1cdc36: // 0160:1cdc36
    ebx = memoryAGet32(ds, 0x20e801);
    if (cx == 0x000a)
        goto loc_1cdc4e;
loc_1cdc42: // 0160:1cdc42
    eax >>= 1;
    cx += 0x0001;
    if (cx != 0x000a)
        goto loc_1cdc42;
loc_1cdc4e: // 0160:1cdc4e
    if (ax)
        goto loc_1cdc5a;
    ebx = 0xffffffff;
    goto loc_1cdc7b;
loc_1cdc5a: // 0160:1cdc5a
    edx = ebx;
    ebx = eax;
    eax = edx;
    ebx &= 0x0000ffff;
    edx = 0;
    div32(ebx);
    ebx = eax;
    if ((int32_t)eax <= (int32_t)0x0000ffff)
        goto loc_1cdc7b;
    bx = 0xffff;
loc_1cdc7b: // 0160:1cdc7b
    eax = ebx;
    sub_1cde4a();
    ax = 0x0100;
    ax -= cx;
    cx = ax;
    cx &= 0x00ff;
    goto loc_1cdd15;
loc_1cdc96: // 0160:1cdc96
    if (ebx < 0x0000ffff)
        goto loc_1cdca4;
    eax >>= 1;
    ebx >>= 1;
    goto loc_1cdc96;
loc_1cdca4: // 0160:1cdca4
    cx = 0x00ff;
    if (!ebx)
        goto loc_1cdd15;
    ecx = 0;
    memoryASet32(ds, 0x20e801, eax);
loc_1cdcb3: // 0160:1cdcb3
    if (eax & 0x80000000)
        goto loc_1cdccb;
    memoryASet32(ds, 0x20e801, eax);
    eax <<= 1;
    cx += 0x0001;
    if (cx != 0x000a)
        goto loc_1cdcb3;
loc_1cdccb: // 0160:1cdccb
    eax = memoryAGet32(ds, 0x20e801);
    if (cx == 0x000a)
        goto loc_1cdce2;
loc_1cdcd6: // 0160:1cdcd6
    ebx >>= 1;
    cx += 0x0001;
    if (cx != 0x000a)
        goto loc_1cdcd6;
loc_1cdce2: // 0160:1cdce2
    if (bx)
        goto loc_1cdcee;
    eax = 0xffffffff;
    goto loc_1cdd07;
loc_1cdcee: // 0160:1cdcee
    ebx &= 0x0000ffff;
    edx = 0;
    div32(ebx);
    if ((int32_t)eax <= (int32_t)0x0000ffff)
        goto loc_1cdd07;
    ax = 0xffff;
loc_1cdd07: // 0160:1cdd07
    sub_1cde4a();
    cx -= 0x0001;
    cx &= 0x00ff;
loc_1cdd15: // 0160:1cdd15
    eax = memoryAGet32(ds, 0x20cecb);
    if (eax)
        goto loc_1cdd2a;
    ebx = memoryAGet32(ds, 0x20cecf);
    if ((int32_t)ebx < 0)
        goto loc_1cdd50;
    goto loc_1cdd55;
loc_1cdd2a: // 0160:1cdd2a
    if ((int32_t)eax < 0)
        goto loc_1cdd3f;
    ebx = memoryAGet32(ds, 0x20cecf);
    if (!ebx)
        goto loc_1cdd38;
    if ((int32_t)ebx >= 0)
        goto loc_1cdd55;
loc_1cdd38: // 0160:1cdd38
    cx += 0x0100;
    goto loc_1cdd55;
loc_1cdd3f: // 0160:1cdd3f
    ebx = memoryAGet32(ds, 0x20cecf);
    if ((int32_t)ebx < 0)
        goto loc_1cdd50;
    cx += 0x0300;
    goto loc_1cdd55;
loc_1cdd50: // 0160:1cdd50
    cx += 0x0200;
loc_1cdd55: // 0160:1cdd55
    if (memoryAGet16(ds, 0x20d06d) & 0xffff)
        goto loc_1cddbf;
    ax = cx;
    ax -= memoryAGet16(ds, 0x20cfa7);
    if (!ax)
        goto loc_1cdd7c;
    ax &= 0x03ff;
    if (ax == 0x03ff)
        goto loc_1cdd7c;
    if (ax != 0x0001)
        goto loc_1cddbf;
loc_1cdd7c: // 0160:1cdd7c
    if (cx == memoryAGet16(ds, 0x20d049))
        goto loc_1cddbf;
    memoryASet16(ds, 0x20cfa7, cx);
    cx -= memoryAGet16(ds, 0x20d049);
    if ((short)cx < 0)
        goto loc_1cdda6;
    if ((short)cx <= (short)0x0200)
        goto loc_1cddb0;
loc_1cdd9c: // 0160:1cdd9c
    memoryASet16(ds, 0x20cfa7, memoryAGet16(ds, 0x20cfa7) + 0x0002);
    goto loc_1cddb8;
loc_1cdda6: // 0160:1cdda6
    cx = -cx;
    if ((short)cx <= (short)0x0200)
        goto loc_1cdd9c;
loc_1cddb0: // 0160:1cddb0
    memoryASet16(ds, 0x20cfa7, memoryAGet16(ds, 0x20cfa7) - 0x0002);
loc_1cddb8: // 0160:1cddb8
    cx = memoryAGet16(ds, 0x20cfa7);
loc_1cddbf: // 0160:1cddbf
    memoryASet16(ds, 0x20cfa7, cx);
    eax = memoryAGet32(ds, 0x20ced3);
    ebx = memoryAGet32(ds, 0x20ced7);
    if (ebx >= eax)
        goto loc_1cddf7;
    if (!eax)
        goto loc_1cddf2;
    ecx &= 0x000000ff;
    cx <<= 2;
    esi = memoryAGet32(ds, 0x20e819);
    dx = memoryAGet16(ds, esi + ecx);
    if (dx)
        goto loc_1cde17;
loc_1cddf2: // 0160:1cddf2
    ax = 0;
    goto loc_1cde20;
loc_1cddf7: // 0160:1cddf7
    eax = ebx;
    if (!eax)
        goto loc_1cddf2;
    ecx &= 0x000000ff;
    cx <<= 2;
    esi = memoryAGet32(ds, 0x20e819);
    dx = memoryAGet16(ds, esi + ecx + 2);
    if (!dx)
        goto loc_1cddf2;
loc_1cde17: // 0160:1cde17
    ebx = 0;
    bx = dx;
    edx = 0;
    div32(ebx);
loc_1cde20: // 0160:1cde20
    if (ax < memoryAGet16(ds, 0x20d001))
        goto loc_1cde35;
    flags.carry = ax < 0x0004;
    ax -= 0x0004;
    if (flags.carry)
        goto loc_1cde35;
    ax = memoryAGet16(ds, 0x20d001);
loc_1cde35: // 0160:1cde35
    memoryASet16(ds, 0x20cfb9, ax);
    if ((short)ax >= 0)
        goto loc_1cde49;
    memoryASet16(ds, 0x20cfb9, 0x0000);
loc_1cde49: // 0160:1cde49
    esp += 4;
    return;
}
void sub_1cde4a() // 0160:1cde4a +long
{
    esp -= 4;
    esi = 0x00201020;
    bx = 0;
    ecx = 0x000000fe;
    dx = 0x01fe;
loc_1cde5b: // 0160:1cde5b
    bp = memoryAGet16(ds, esi + ecx);
    if (ax >= bp)
        goto loc_1cde80;
    dx = cx;
    cx += bx;
    cx >>= 1;
    cx &= 0xfffe;
    bp = dx;
    bp -= bx;
    if (bp != 0x0002)
        goto loc_1cde5b;
    goto loc_1cde9a;
loc_1cde80: // 0160:1cde80
    bx = cx;
    cx += dx;
    cx >>= 1;
    cx &= 0xfffe;
    bp = dx;
    bp -= bx;
    if (bp != 0x0002)
        goto loc_1cde5b;
loc_1cde9a: // 0160:1cde9a
    cx >>= 1;
    esp += 4;
}
void sub_1cde9e() // 0160:1cde9e +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1cdeae;
    sub_1c79ac();
loc_1cdeae: // 0160:1cdeae
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    edi = 0x000a0000;
    push(ds);
    es = pop();
    eax = 0;
    ecx = 0x00004000;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    sub_1b4bc9();
    memoryASet16(ds, 0x20ed7f, 0x0000);
    memoryASet16(ds, 0x20eda7, 0x0001);
    memoryASet16(ds, 0x20e7d7, 0x0001);
    edx = 0x00209182;
    eax = 0x0023f52c;
    sub_1aa484();
    edi = 0x000a0000;
    push(ds);
    es = pop();
    ecx = 0x00004000;
    eax = 0x3f3f3f3f;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    esi = memoryAGet32(ds, 0x23f52c);
    sub_1ce18e();
    edi = 0x000a0000;
    memoryASet16(ds, 0x20ee79, 0x0001);
    sub_1ce128();
    memoryASet16(ds, 0x20ee79, 0x0000);
    memoryASet16(ds, 0x224648, 0x0000);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1b4f0e();
    al = 0x7e;
    sub_1ce10a();
    ecx = 0x00000088;
    edi = 0x0023f530;
    memoryASet32(ds, 0x20ceaf, edi);
loc_1cdf68: // 0160:1cdf68
    push32(ecx);
    sub_1ce004();
    sub_1b2b87();
    sub_1b2b87();
    sub_1b2b87();
    memoryASet16(ds, 0x20cec3, memoryAGet16(ds, 0x20cec3) + 1);
    ax = memoryAGet16(ds, 0x20cec3);
    ax &= 0x0001;
    if (ax)
        goto loc_1cdfb2;
    memoryASet16(ds, 0x224648, 0x0001);
    edi = memoryAGet32(ds, 0x20ceaf);
    esi = memoryAGet32(ds, edi);
    sub_1ce20d();
    edi = 0x000a4800;
    sub_1ce128();
    goto loc_1cdfd2;
loc_1cdfb2: // 0160:1cdfb2
    memoryASet16(ds, 0x224648, 0x0000);
    edi = memoryAGet32(ds, 0x20ceaf);
    esi = memoryAGet32(ds, edi);
    sub_1ce20d();
    edi = 0x000a0000;
    sub_1ce128();
loc_1cdfd2: // 0160:1cdfd2
    ecx = pop32();
    memoryASet32(ds, 0x20ceaf, memoryAGet32(ds, 0x20ceaf) + 0x00000004);
    ecx--;
    if (ecx)
        goto loc_1cdf68;
    al = 0x56;
    sub_1ce10a();
    ecx = 0x0000000a;
loc_1cdfe9: // 0160:1cdfe9
    sub_1ad600();
    if (--ecx)
        goto loc_1cdfe9;
    al = 0x56;
    sub_1ce10a();
    ecx = 0x00000050;
loc_1cdffc: // 0160:1cdffc
    sub_1ad600();
    if (--ecx)
        goto loc_1cdffc;
    esp += 4;
}
void sub_1cdeae() // 0160:1cdeae +long
{
    esp -= 4;
    dx = 0x03c4;
    ax = 0x0f02;
    out16(dx, ax);
    edi = 0x000a0000;
    push(ds);
    es = pop();
    eax = 0;
    ecx = 0x00004000;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    sub_1b4bc9();
    memoryASet16(ds, 0x20ed7f, 0x0000);
    memoryASet16(ds, 0x20eda7, 0x0001);
    memoryASet16(ds, 0x20e7d7, 0x0001);
    edx = 0x00209182;
    eax = 0x0023f52c;
    sub_1aa484();
    edi = 0x000a0000;
    push(ds);
    es = pop();
    ecx = 0x00004000;
    eax = 0x3f3f3f3f;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    esi = memoryAGet32(ds, 0x23f52c);
    sub_1ce18e();
    edi = 0x000a0000;
    memoryASet16(ds, 0x20ee79, 0x0001);
    sub_1ce128();
    memoryASet16(ds, 0x20ee79, 0x0000);
    memoryASet16(ds, 0x224648, 0x0000);
    memoryASet16(ds, 0x20eeb0, 0x0000);
    memoryASet16(ds, 0x20cec3, 0x0000);
    sub_1b4f0e();
    al = 0x7e;
    sub_1ce10a();
    ecx = 0x00000088;
    edi = 0x0023f530;
    memoryASet32(ds, 0x20ceaf, edi);
loc_1cdf68: // 0160:1cdf68
    push32(ecx);
    sub_1ce004();
    sub_1b2b87();
    sub_1b2b87();
    sub_1b2b87();
    memoryASet16(ds, 0x20cec3, memoryAGet16(ds, 0x20cec3) + 1);
    ax = memoryAGet16(ds, 0x20cec3);
    ax &= 0x0001;
    if (ax)
        goto loc_1cdfb2;
    memoryASet16(ds, 0x224648, 0x0001);
    edi = memoryAGet32(ds, 0x20ceaf);
    esi = memoryAGet32(ds, edi);
    sub_1ce20d();
    edi = 0x000a4800;
    sub_1ce128();
    goto loc_1cdfd2;
loc_1cdfb2: // 0160:1cdfb2
    memoryASet16(ds, 0x224648, 0x0000);
    edi = memoryAGet32(ds, 0x20ceaf);
    esi = memoryAGet32(ds, edi);
    sub_1ce20d();
    edi = 0x000a0000;
    sub_1ce128();
loc_1cdfd2: // 0160:1cdfd2
    ecx = pop32();
    memoryASet32(ds, 0x20ceaf, memoryAGet32(ds, 0x20ceaf) + 0x00000004);
    ecx--;
    if (ecx)
        goto loc_1cdf68;
    al = 0x56;
    sub_1ce10a();
    ecx = 0x0000000a;
loc_1cdfe9: // 0160:1cdfe9
    sub_1ad600();
    if (--ecx)
        goto loc_1cdfe9;
    al = 0x56;
    sub_1ce10a();
    ecx = 0x00000050;
loc_1cdffc: // 0160:1cdffc
    sub_1ad600();
    if (--ecx)
        goto loc_1cdffc;
    esp += 4;
}
void sub_1ce004() // 0160:1ce004 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1ce109;
    if (ecx != 0x00000082)
        goto loc_1ce022;
    al = 0xae;
    sub_1ce10a();
loc_1ce022: // 0160:1ce022
    if (ecx != 0x0000007e)
        goto loc_1ce02e;
    al = 0x7f;
    sub_1ce10a();
loc_1ce02e: // 0160:1ce02e
    if (ecx != 0x00000072)
        goto loc_1ce03a;
    al = 0xae;
    sub_1ce10a();
loc_1ce03a: // 0160:1ce03a
    if (ecx != 0x0000006a)
        goto loc_1ce062;
    memoryASet32(ds, 0x1f1cdc, 0x00000000);
    memoryASet32(ds, 0x1f1ce0, 0x0000002c);
    memoryASet32(ds, 0x1f1ce4, 0x00000118);
    sub_1aa64a();
loc_1ce062: // 0160:1ce062
    if (ecx != 0x0000005c)
        goto loc_1ce06e;
    al = 0x6b;
    sub_1ce10a();
loc_1ce06e: // 0160:1ce06e
    if (ecx == 0x0000004f)
        goto loc_1ce07d;
    if (ecx == 0x00000046)
        goto loc_1ce07d;
    if (ecx != 0x00000041)
        goto loc_1ce09d;
loc_1ce07d: // 0160:1ce07d
    al = 0x49;
    sub_1ce10a();
    memoryASet32(ds, 0x1f1cdc, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000118);
    sub_1c7954();
loc_1ce09d: // 0160:1ce09d
    if (ecx == 0x0000003c)
        goto loc_1ce0b1;
    if (ecx == 0x00000036)
        goto loc_1ce0b1;
    if (ecx == 0x00000030)
        goto loc_1ce0b1;
    if (ecx != 0x0000002c)
        goto loc_1ce0d1;
loc_1ce0b1: // 0160:1ce0b1
    al = 0x53;
    sub_1ce10a();
    memoryASet32(ds, 0x1f1cdc, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000280);
    sub_1c7954();
loc_1ce0d1: // 0160:1ce0d1
    if ((int32_t)ecx > (int32_t)0x00000014)
        goto loc_1ce0df;
    al = 0x28;
    al -= cl;
    sub_1b17b7();
loc_1ce0df: // 0160:1ce0df
    if (ecx != 0x00000032)
        goto loc_1ce109;
    ebx = 0;
    bx = 0x0000;
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = 0x0000;
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = 0x0140;
    memoryASet32(ds, 0x1f1ce4, ebx);
    sub_1aa64a();
loc_1ce109: // 0160:1ce109
    esp += 4;
    return;
}
void sub_1ce10a() // 0160:1ce10a +long
{
    esp -= 4;
    goto loc_1ce10a;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 25818 bytes
loc_1ce10a: // 0160:1ce10a
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1ce127;
    memoryASet16(ds, 0x20d2c5, 0x0003);
    goto loc_1b17b7;
loc_1ce127: // 0160:1ce127
    esp += 4;
    return;
}
void sub_1ce128() // 0160:1ce128 +long
{
    esp -= 4;
    edi += 0x00001400;
    push32(edi);
    esi = 0x0020eec4;
    ecx = 0x00000100;
    al = 0;
    if (!(memoryAGet16(ds, 0x20ee79) & 0xffff))
        goto loc_1ce14b;
    sub_1b5442();
loc_1ce14b: // 0160:1ce14b
    edi = pop32();
    esi = 0x0020f1c4;
    push(ds);
    es = pop();
    flags.direction = 0;
    ebx = esi;
    ebp = edi;
    ah = 0x01;
    dx = 0x03c4;
loc_1ce15e: // 0160:1ce15e
    esi = ebx;
    edi = ebp;
    al = 0x02;
    out16(dx, ax);
    push32(eax);
    ecx = 0x00000550;
loc_1ce16c: // 0160:1ce16c
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    esi += 0x00000010;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1ce16c;
    eax = pop32();
    ebx++;
    ah <<= 1;
    if (ah != 0x10)
        goto loc_1ce15e;
    esp += 4;
}
void sub_1ce18e() // 0160:1ce18e +long
{
    esp -= 4;
    esi += 0x0023f75c;
    memoryASet32(ds, 0x20ce9d, esi);
    edi = 0x0020f1c4;
    edx = 0;
    ax = memoryAGet16(ds, esi + 8);
    ax += 0x0001;
    bx = memoryAGet16(ds, esi + 10);
    bx += 0x0001;
    mul16(bx);
    edx <<= 16;
    eax &= 0x0000ffff;
    eax |= edx;
    ecx = eax;
    esi = memoryAGet32(ds, 0x20ce9d);
    esi += 0x00000010;
loc_1ce1c9: // 0160:1ce1c9
    al = memoryAGet(ds, esi);
    if (al < 0xc0)
        goto loc_1ce1e1;
    al -= 0xc0;
    esi++;
    bl = memoryAGet(ds, esi);
loc_1ce1d4: // 0160:1ce1d4
    memoryASet(ds, edi, bl);
    edi++;
    ecx--;
    if (!ecx)
        goto loc_1ce1e8;
    al--;
    if (al)
        goto loc_1ce1d4;
    esi++;
    goto loc_1ce1c9;
loc_1ce1e1: // 0160:1ce1e1
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1ce1c9;
    esi--;
loc_1ce1e8: // 0160:1ce1e8
    esi++;
    esi++;
    edi = 0x0020eec4;
    ecx = 0x00000100;
loc_1ce1f4: // 0160:1ce1f4
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi + 2, al);
    al = memoryAGet(ds, esi + 1);
    memoryASet(ds, edi + 1, al);
    al = memoryAGet(ds, esi + 2);
    memoryASet(ds, edi, al);
    esi += 0x00000003;
    edi += 0x00000003;
    if (--ecx)
        goto loc_1ce1f4;
    esp += 4;
}
void sub_1ce20d() // 0160:1ce20d +long
{
    esp -= 4;
    esi += 0x0023f75c;
    memoryASet32(ds, 0x20ce9d, esi);
    edi = 0x0020f1c4;
    edx = 0;
    ax = memoryAGet16(ds, esi + 8);
    ax += 0x0001;
    bx = memoryAGet16(ds, esi + 10);
    bx += 0x0001;
    mul16(bx);
    edx <<= 16;
    eax &= 0x0000ffff;
    eax |= edx;
    ecx = eax;
    esi = memoryAGet32(ds, 0x20ce9d);
    esi += 0x00000010;
loc_1ce248: // 0160:1ce248
    al = memoryAGet(ds, esi);
    if (al < 0xc0)
        goto loc_1ce260;
    al -= 0xc0;
    esi++;
    bl = memoryAGet(ds, esi);
loc_1ce253: // 0160:1ce253
    memoryASet(ds, edi, bl);
    edi++;
    ecx--;
    if (!ecx)
        goto loc_1ce267;
    al--;
    if (al)
        goto loc_1ce253;
    esi++;
    goto loc_1ce248;
loc_1ce260: // 0160:1ce260
    memoryASet(ds, edi, al);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1ce248;
    esi--;
loc_1ce267: // 0160:1ce267
    esi++;
    esp += 4;
}
void sub_1ce269() // 0160:1ce269 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d7bf) & 0xffff)
        goto loc_1ce642;
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ce2a3;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1ce2a3;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1ce2a3;
    if (memoryAGet16(ds, 0x20d0ff) & 0xffff)
        goto loc_1ce2c9;
loc_1ce2a3: // 0160:1ce2a3
    if (!(memoryAGet16(ds, 0x20e7d7) & 0xffff))
        goto loc_1ce360;
    memoryASet16(ds, 0x20e7d7, 0x0000);
    ax = 0x0000;
    sub_1ce65c();
    goto loc_1ce360;
loc_1ce2c9: // 0160:1ce2c9
    if (memoryAGet16(ds, 0x20e7d7) & 0xffff)
        goto loc_1ce2ec;
    memoryASet16(ds, 0x20e7d7, 0x0001);
    ax = memoryAGet16(ds, 0x20e7cf);
    sub_1b17b7();
loc_1ce2ec: // 0160:1ce2ec
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1ce2ff;
    esi = 0x0020315c;
loc_1ce2ff: // 0160:1ce2ff
    eax = 0;
    ax = memoryAGet16(ds, 0x20e7cf);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    dx = memoryAGet16(ds, esi + eax + 4);
    sub_1b1c25();
    ax &= 0x0003;
    bx = memoryAGet16(ds, 0x20cfa9);
    cx = bx;
    cx >>= 2;
    bx -= cx;
    bx += ax;
    ax = memoryAGet16(ds, 0x20d05d);
    ax <<= 1;
    bx += ax;
    dx -= bx;
    if ((short)dx >= 0)
        goto loc_1ce34a;
    dx = 0x003c;
loc_1ce34a: // 0160:1ce34a
    if ((short)dx > (short)0x003c)
        goto loc_1ce354;
    dx = 0x003c;
loc_1ce354: // 0160:1ce354
    bx = dx;
    ax = 0x0000;
    sub_1ce643();
loc_1ce360: // 0160:1ce360
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1ce642;
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ce399;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1ce399;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1ce399;
    if (memoryAGet16(ds, 0x20d101) & 0xffff)
        goto loc_1ce3bf;
loc_1ce399: // 0160:1ce399
    if (!(memoryAGet16(ds, 0x20e7d9) & 0xffff))
        goto loc_1ce456;
    memoryASet16(ds, 0x20e7d9, 0x0000);
    ax = 0x0001;
    sub_1ce65c();
    goto loc_1ce456;
loc_1ce3bf: // 0160:1ce3bf
    if (memoryAGet16(ds, 0x20e7d9) & 0xffff)
        goto loc_1ce3e2;
    memoryASet16(ds, 0x20e7d9, 0x0001);
    ax = memoryAGet16(ds, 0x20e7d1);
    sub_1b17b7();
loc_1ce3e2: // 0160:1ce3e2
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1ce3f5;
    esi = 0x0020315c;
loc_1ce3f5: // 0160:1ce3f5
    eax = 0;
    ax = memoryAGet16(ds, 0x20e7d1);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    dx = memoryAGet16(ds, esi + eax + 4);
    sub_1b1c25();
    ax &= 0x0003;
    bx = memoryAGet16(ds, 0x20cfab);
    cx = bx;
    cx >>= 2;
    bx -= cx;
    bx += ax;
    ax = memoryAGet16(ds, 0x20d05f);
    ax <<= 1;
    bx += ax;
    dx -= bx;
    if ((short)dx >= 0)
        goto loc_1ce440;
    dx = 0x003c;
loc_1ce440: // 0160:1ce440
    if ((short)dx > (short)0x003c)
        goto loc_1ce44a;
    dx = 0x003c;
loc_1ce44a: // 0160:1ce44a
    bx = dx;
    ax = 0x0001;
    sub_1ce643();
loc_1ce456: // 0160:1ce456
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1ce642;
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ce48f;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1ce48f;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1ce48f;
    if (memoryAGet16(ds, 0x20d103) & 0xffff)
        goto loc_1ce4b5;
loc_1ce48f: // 0160:1ce48f
    if (!(memoryAGet16(ds, 0x20e7db) & 0xffff))
        goto loc_1ce54c;
    memoryASet16(ds, 0x20e7db, 0x0000);
    ax = 0x0002;
    sub_1ce65c();
    goto loc_1ce54c;
loc_1ce4b5: // 0160:1ce4b5
    if (memoryAGet16(ds, 0x20e7db) & 0xffff)
        goto loc_1ce4d8;
    memoryASet16(ds, 0x20e7db, 0x0001);
    ax = memoryAGet16(ds, 0x20e7d3);
    sub_1b17b7();
loc_1ce4d8: // 0160:1ce4d8
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1ce4eb;
    esi = 0x0020315c;
loc_1ce4eb: // 0160:1ce4eb
    eax = 0;
    ax = memoryAGet16(ds, 0x20e7d3);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    dx = memoryAGet16(ds, esi + eax + 4);
    sub_1b1c25();
    ax &= 0x0003;
    bx = memoryAGet16(ds, 0x20cfad);
    cx = bx;
    cx >>= 2;
    bx -= cx;
    bx += ax;
    ax = memoryAGet16(ds, 0x20d061);
    ax <<= 1;
    bx += ax;
    dx -= bx;
    if ((short)dx >= 0)
        goto loc_1ce536;
    dx = 0x003c;
loc_1ce536: // 0160:1ce536
    if ((short)dx > (short)0x003c)
        goto loc_1ce540;
    dx = 0x003c;
loc_1ce540: // 0160:1ce540
    bx = dx;
    ax = 0x0002;
    sub_1ce643();
loc_1ce54c: // 0160:1ce54c
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1ce642;
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1ce585;
    if (memoryAGet16(ds, 0x20d87f) & 0xffff)
        goto loc_1ce585;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1ce585;
    if (memoryAGet16(ds, 0x20d105) & 0xffff)
        goto loc_1ce5ab;
loc_1ce585: // 0160:1ce585
    if (!(memoryAGet16(ds, 0x20e7dd) & 0xffff))
        goto loc_1ce642;
    memoryASet16(ds, 0x20e7dd, 0x0000);
    ax = 0x0003;
    sub_1ce65c();
    goto loc_1ce642;
loc_1ce5ab: // 0160:1ce5ab
    if (memoryAGet16(ds, 0x20e7dd) & 0xffff)
        goto loc_1ce5ce;
    memoryASet16(ds, 0x20e7dd, 0x0001);
    ax = memoryAGet16(ds, 0x20e7d5);
    sub_1b17b7();
loc_1ce5ce: // 0160:1ce5ce
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1ce5e1;
    esi = 0x0020315c;
loc_1ce5e1: // 0160:1ce5e1
    eax = 0;
    ax = memoryAGet16(ds, 0x20e7d5);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    dx = memoryAGet16(ds, esi + eax + 4);
    sub_1b1c25();
    ax &= 0x0003;
    bx = memoryAGet16(ds, 0x20cfaf);
    cx = bx;
    cx >>= 2;
    bx -= cx;
    bx += ax;
    ax = memoryAGet16(ds, 0x20d063);
    ax <<= 1;
    bx += ax;
    dx -= bx;
    if ((short)dx >= 0)
        goto loc_1ce62c;
    dx = 0x003c;
loc_1ce62c: // 0160:1ce62c
    if ((short)dx > (short)0x003c)
        goto loc_1ce636;
    dx = 0x003c;
loc_1ce636: // 0160:1ce636
    bx = dx;
    ax = 0x0003;
    sub_1ce643();
loc_1ce642: // 0160:1ce642
    esp += 4;
    return;
}
void sub_1ce643() // 0160:1ce643 +long +returnZero
{
    esp -= 4;
    goto loc_1ce643;
loc_1c7954: // 0160:1c7954
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000010;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + -8, eax);
    flags.zero = memoryAGet32(ss, ebp + -4) == 0x00000000;
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c798f;
    eax = memoryAGet32(ss, ebp + -4);
    flags.zero = eax == memoryAGet32(ds, 0x1f1cd0);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7991;
loc_1c798f: // 0160:1c798f
    goto loc_1c79a2;
loc_1c7991: // 0160:1c7991
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1df990();
loc_1c79a2: // 0160:1c79a2
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27800 bytes
loc_1ce643: // 0160:1ce643
    eax &= 0x0000000f;
    ebx &= 0x0000ffff;
    memoryASet32(ds, 0x1f1cdc, eax);
    memoryASet32(ds, 0x1f1ce4, ebx);
    goto loc_1c7954;
}
void sub_1ce65c() // 0160:1ce65c +long
{
    esp -= 4;
    goto loc_1ce65c;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 120019 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 27180 bytes
loc_1ce65c: // 0160:1ce65c
    eax &= 0x0000000f;
    memoryASet32(ds, 0x1f1cdc, eax);
    memoryASet32(ds, 0x1f1ce0, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000140);
    goto loc_1aa64a;
}
void sub_1ce6b7() // 0160:1ce6b7 +long
{
    esp -= 4;
    goto loc_1ce6b7;
loc_1ce67d: // 0160:1ce67d
    if (!(memoryAGet16(ds, 0x20ed97) & 0xffff))
        goto loc_1ce6b6;
    eax = 0;
    al = memoryAGet(ds, 0x20ed99);
    memoryASet32(ds, 0x1f1cdc, eax);
    memoryASet32(ds, 0x1f1ce0, 0x00000000);
    memoryASet32(ds, 0x1f1ce4, 0x00000140);
    sub_1aa64a();
    memoryASet16(ds, 0x20ed97, 0x0000);
loc_1ce6b6: // 0160:1ce6b6
    esp += 4;
    return;
loc_1ce6b7: // 0160:1ce6b7
    if (!(memoryAGet16(ds, 0x20ed9d) & 0xffff))
        goto loc_1ce67d;
    if (memoryAGet16(ds, 0x20ed97) & 0xffff)
        goto loc_1ce886;
    if (!(memoryAGet16(ds, 0x20d0ff) & 0xffff))
        goto loc_1ce71f;
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1ce71f;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1ce71f;
    ax = memoryAGet16(ds, 0x20d039);
    ax -= memoryAGet16(ds, 0x20cf97);
    if (ax >= 0xffce)
        goto loc_1ce71f;
    if (ax < 0x0032)
        goto loc_1ce71f;
    ax = memoryAGet16(ds, 0x20cfa9);
    if ((short)ax <= (short)0x0028)
        goto loc_1ce71f;
    ax = 0x0001;
    goto loc_1ce846;
loc_1ce71f: // 0160:1ce71f
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1cea27;
    if (!(memoryAGet16(ds, 0x20d101) & 0xffff))
        goto loc_1ce77b;
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1ce77b;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1ce77b;
    ax = memoryAGet16(ds, 0x20d03b);
    ax -= memoryAGet16(ds, 0x20cf99);
    if (ax >= 0xffce)
        goto loc_1ce77b;
    if (ax < 0x0032)
        goto loc_1ce77b;
    ax = memoryAGet16(ds, 0x20cfab);
    if ((short)ax <= (short)0x0028)
        goto loc_1ce77b;
    ax = 0x0002;
    goto loc_1ce846;
loc_1ce77b: // 0160:1ce77b
    if ((short)memoryAGet16(ds, 0x20d7f5) <= (short)0x0002)
        goto loc_1cea27;
    if (!(memoryAGet16(ds, 0x20d103) & 0xffff))
        goto loc_1ce7d7;
    if (memoryAGet16(ds, 0x20d061) & 0xffff)
        goto loc_1ce7d7;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1ce7d7;
    ax = memoryAGet16(ds, 0x20d03d);
    ax -= memoryAGet16(ds, 0x20cf9b);
    if (ax >= 0xffce)
        goto loc_1ce7d7;
    if (ax < 0x0032)
        goto loc_1ce7d7;
    ax = memoryAGet16(ds, 0x20cfad);
    if ((short)ax <= (short)0x0028)
        goto loc_1ce7d7;
    ax = 0x0003;
    goto loc_1ce846;
    // gap 3 bytes
loc_1ce7d7: // 0160:1ce7d7
    if (memoryAGet16(ds, 0x20d7f5) != 0x0004)
        goto loc_1cea27;
    if (!(memoryAGet16(ds, 0x20d105) & 0xffff))
        goto loc_1cea27;
    if (memoryAGet16(ds, 0x20d063) & 0xffff)
        goto loc_1cea27;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1cea27;
    ax = memoryAGet16(ds, 0x20d03f);
    ax -= memoryAGet16(ds, 0x20cf9d);
    if (ax >= 0xffce)
        goto loc_1cea27;
    if (ax < 0x0032)
        goto loc_1cea27;
    ax = memoryAGet16(ds, 0x20cfaf);
    if ((short)ax <= (short)0x0028)
        goto loc_1cea27;
    ax = 0x0004;
loc_1ce846: // 0160:1ce846
    if (memoryAGet16(ds, 0x20ee3b) & 0xffff)
        goto loc_1cea27;
    memoryASet16(ds, 0x20ed9b, ax);
    sub_1b1c25();
    eax &= 0x00000003;
    esi = 0x002091c5;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ed97, 0x0001);
    sub_1b17b7();
    ax = memoryAGet16(ds, 0x20d2c5);
    memoryASet(ds, 0x20ed99, al);
    esp += 4;
    return;
loc_1ce886: // 0160:1ce886
    ax = memoryAGet16(ds, 0x20ed9b);
    if (ax == 0x0004)
        goto loc_1ce9c4;
    if (ax == 0x0003)
        goto loc_1ce966;
    if (ax == 0x0002)
        goto loc_1ce908;
    if (!(memoryAGet16(ds, 0x20d0ff) & 0xffff))
        goto loc_1cea22;
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1cea22;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20d039);
    ax -= memoryAGet16(ds, 0x20cf97);
    if (ax >= 0xffec)
        goto loc_1cea22;
    if (ax < 0x0014)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20cfa9);
    if ((short)ax <= (short)0x0028)
        goto loc_1cea22;
    esp += 4;
    return;
loc_1ce908: // 0160:1ce908
    if (!(memoryAGet16(ds, 0x20d101) & 0xffff))
        goto loc_1cea22;
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1cea22;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20d03b);
    ax -= memoryAGet16(ds, 0x20cf99);
    if (ax >= 0xffec)
        goto loc_1cea22;
    if (ax < 0x0014)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20cfab);
    if ((short)ax <= (short)0x0028)
        goto loc_1cea22;
    esp += 4;
    return;
loc_1ce966: // 0160:1ce966
    if (!(memoryAGet16(ds, 0x20d103) & 0xffff))
        goto loc_1cea22;
    if (memoryAGet16(ds, 0x20d061) & 0xffff)
        goto loc_1cea22;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20d03d);
    ax -= memoryAGet16(ds, 0x20cf9b);
    if (ax >= 0xffec)
        goto loc_1cea22;
    if (ax < 0x0014)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20cfad);
    if ((short)ax <= (short)0x0028)
        goto loc_1cea22;
    esp += 4;
    return;
loc_1ce9c4: // 0160:1ce9c4
    if (!(memoryAGet16(ds, 0x20d105) & 0xffff))
        goto loc_1cea22;
    if (memoryAGet16(ds, 0x20d063) & 0xffff)
        goto loc_1cea22;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20d03f);
    ax -= memoryAGet16(ds, 0x20cf9d);
    if (ax >= 0xffec)
        goto loc_1cea22;
    if (ax < 0x0014)
        goto loc_1cea22;
    ax = memoryAGet16(ds, 0x20cfaf);
    if ((short)ax <= (short)0x0028)
        goto loc_1cea22;
    esp += 4;
    return;
loc_1cea22: // 0160:1cea22
    goto loc_1ce67d;
loc_1cea27: // 0160:1cea27
    esp += 4;
    return;
}
void sub_1cea28() // 0160:1cea28 +long
{
    esp -= 4;
    esi = memoryAGet32(ds, 0x1f1c34);
    edi = 0x0023f52c;
    sub_1cec54();
loc_1cea38: // 0160:1cea38
    ebx = memoryAGet32(ds, 0x1f1c34);
    eax = memoryAGet32(ds, 0x1f1c38);
    bl = 0x0f;
    bl &= al;
    bl >>= 2;
    memoryASet16(ds, 0x1f1cb8, bx);
    eax = memoryAGet32(ds, 0x1f1c38);
    al &= 0x03;
    al += al;
    memoryASet(ds, 0x1f1cbe, al);
    memoryASet(ds, 0x1f1cba, al);
    al = memoryAGet(ds, 0x2eebd0);
loc_1cea69: // 0160:1cea69
    sync();
    if (memoryAGet(ds, 0x2eebd0) == al)
        goto loc_1cea69;
    eax = memoryAGet32(ds, 0x1f1c34);
    eax += 0x00005500;
    if (eax < 0x000aff00)
        goto loc_1cea87;
    eax -= 0x0000ff00;
loc_1cea87: // 0160:1cea87
    memoryASet32(ds, 0x1f1c34, eax);
    esi = 0x0023f52c;
    edi = memoryAGet32(ds, 0x1f1c34);
    eax = memoryAGet32(ds, 0x2246cc);
    sub_1ceb3a();
    sub_1d0dda();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0004)
        goto loc_1ceac9;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1ceb11;
    sub_1d0261();
    goto loc_1ceb11;
    // gap 3 bytes
loc_1ceac9: // 0160:1ceac9
    if (memoryAGet16(ds, 0x20d7f5) != 0x0003)
        goto loc_1ceadd;
    sub_1d03dc();
    goto loc_1ceb11;
    // gap 3 bytes
loc_1ceadd: // 0160:1ceadd
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1ceb07;
    sub_1cf9db();
    sub_1cff9b();
    if (memoryAGet16(ds, 0x20d89f) & 0xffff)
        goto loc_1ceb0c;
    sub_1cfb7c();
    goto loc_1ceb0c;
loc_1ceb07: // 0160:1ceb07
    sub_1cf9db();
loc_1ceb0c: // 0160:1ceb0c
    sub_1d18c0();
loc_1ceb11: // 0160:1ceb11
    sub_1d198c();
    sub_1ac75e();
    if (memoryAGet32(ds, 0x2246cc) != 0x00000001)
        goto loc_1ceb29;
    sub_1b4f0e();
loc_1ceb29: // 0160:1ceb29
    flags.carry = ((uint64_t)memoryAGet32(ds, 0x2246cc) + 0x10000000) >= 0x100000000ull;
    memoryASet32(ds, 0x2246cc, memoryAGet32(ds, 0x2246cc) + 0x10000000);
    if (!flags.carry)
        goto loc_1cea38;
    esp += 4;
}
void sub_1ceb3a() // 0160:1ceb3a +long
{
    esp -= 4;
    memoryASet32(ds, 0x20cedb, eax);
    eax = memoryAGet16(ds, 0x20ee53);
    ecx = memoryAGet32(ds, 0x1f1c38);
    ecx &= 0x0000000f;
    eax += ecx;
    eax >>= 1;
    eax--;
    esi += eax;
    esi += 0x00000003;
    eax += 0x00000008;
    mul32(memoryAGet32(ds, 0x20cedb));
    ecx = 0x80000000;
    flags.carry = ecx < eax;
    ecx -= eax;
    esi = esi - edx - flags.carry;
    memoryASet32(ds, 0x20ced7, ecx);
    eax = memoryAGet16(ds, 0x20ee55);
    eax >>= 1;
    ebp = eax;
    mul32(memoryAGet32(ds, 0x20cedb));
    ecx = 0x80000000;
    flags.carry = ecx < eax;
    ecx -= eax;
    ebp = ebp - edx - flags.carry;
    eax = 0x00000150;
    mul32(ebp);
    esi += eax;
    ebp = ecx;
    eax = memoryAGet32(ds, 0x20cedb);
    ebx = 0;
    flags.carry = ((uint64_t)eax + eax) >= 0x100000000ull;
    eax += eax;
    ebx += ebx + flags.carry;
    flags.carry = ((uint64_t)eax + eax) >= 0x100000000ull;
    eax += eax;
    ebx += ebx + flags.carry;
    memoryASet32(ds, 0x20cecf, eax);
    memoryASet32(ds, 0x20ced3, ebx);
    eax = memoryAGet16(ds, 0x20ee55);
    memoryASet32(ds, 0x20cedf, eax);
loc_1cebbc: // 0160:1cebbc
    ebx = memoryAGet32(ds, 0x20ced7);
    push32(esi);
    ax = 0x0102;
loc_1cebc7: // 0160:1cebc7
    dx = 0x03c4;
    out16(dx, ax);
    push32(eax);
    flags.carry = ((uint64_t)ebx + memoryAGet32(ds, 0x20cedb)) >= 0x100000000ull;
    ebx += memoryAGet32(ds, 0x20cedb);
    esi += 0x00000000 + flags.carry;
    push32(ebx);
    push32(esi);
    push32(edi);
    ecx = memoryAGet16(ds, 0x20ee53);
    ecx >>= 4;
    ecx++;
loc_1cebe5: // 0160:1cebe5
    flags.carry = ((uint64_t)ebx + memoryAGet32(ds, 0x20cecf)) >= 0x100000000ull;
    ebx += memoryAGet32(ds, 0x20cecf);
    esi += memoryAGet32(ds, 0x20ced3) + flags.carry;
    al = memoryAGet(ds, esi);
    flags.carry = ((uint64_t)ebx + memoryAGet32(ds, 0x20cecf)) >= 0x100000000ull;
    ebx += memoryAGet32(ds, 0x20cecf);
    esi += memoryAGet32(ds, 0x20ced3) + flags.carry;
    ah = memoryAGet(ds, esi);
    flags.carry = ((uint64_t)ebx + memoryAGet32(ds, 0x20cecf)) >= 0x100000000ull;
    ebx += memoryAGet32(ds, 0x20cecf);
    esi += memoryAGet32(ds, 0x20ced3) + flags.carry;
    dl = memoryAGet(ds, esi);
    flags.carry = ((uint64_t)ebx + memoryAGet32(ds, 0x20cecf)) >= 0x100000000ull;
    ebx += memoryAGet32(ds, 0x20cecf);
    esi += memoryAGet32(ds, 0x20ced3) + flags.carry;
    dh = memoryAGet(ds, esi);
    edx <<= 16;
    dx = ax;
    memoryASet32(ds, edi, edx);
    edi += 0x00000004;
    if (--ecx)
        goto loc_1cebe5;
    edi = pop32();
    esi = pop32();
    ebx = pop32();
    eax = pop32();
    ah += ah;
    if (ah < 0x10)
        goto loc_1cebc7;
    edi += 0x00000054;
    esi = pop32();
    flags.carry = ((uint64_t)ebp + memoryAGet32(ds, 0x20cedb)) >= 0x100000000ull;
    ebp += memoryAGet32(ds, 0x20cedb);
    if (!flags.carry)
        goto loc_1cec47;
    esi += 0x00000150;
loc_1cec47: // 0160:1cec47
    memoryASet32(ds, 0x20cedf, memoryAGet32(ds, 0x20cedf) - 1);
    if (memoryAGet32(ds, 0x20cedf))
        goto loc_1cebbc;
    esp += 4;
}
void sub_1cec54() // 0160:1cec54 +long
{
    esp -= 4;
    ax = 0x0004;
loc_1cec58: // 0160:1cec58
    dx = 0x03ce;
    out16(dx, ax);
    push32(eax);
    push32(edi);
    push32(esi);
    ecx = 0x000013b0;
loc_1cec66: // 0160:1cec66
    eax = memoryAGet32(ds, esi);
    memoryASet(ds, edi, al);
    memoryASet(ds, edi + 4, ah);
    eax >>= 16;
    memoryASet(ds, edi + 8, al);
    memoryASet(ds, edi + 12, ah);
    esi += 0x00000004;
    edi += 0x00000010;
    if (--ecx)
        goto loc_1cec66;
    esi = pop32();
    edi = pop32();
    eax = pop32();
    edi++;
    ah++;
    if (ah < 0x04)
        goto loc_1cec58;
    esp += 4;
}
void sub_1cec8a() // 0160:1cec8a +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20cf3d) & 0xffff))
        goto loc_1cee09;
    bp = memoryAGet16(ds, 0x20cf85);
    if (bp < 0x0020)
        goto loc_1ced00;
    ax = memoryAGet16(ds, 0x20c830);
    if ((short)bp < (short)0x002e)
        goto loc_1cecbe;
    if ((short)bp > (short)0x0032)
        goto loc_1cecbe;
    flags.zero = !(ax & 0x0007);
    ax &= 0x0007;
    goto loc_1cecc2;
loc_1cecbe: // 0160:1cecbe
    flags.zero = !(ax & 0x0003);
    ax &= 0x0003;
loc_1cecc2: // 0160:1cecc2
    if (!flags.zero)
        goto loc_1ced00;
    if (bp == 0x0033)
        goto loc_1cece0;
    if (bp == 0x003a)
        goto loc_1cece0;
    if (bp == 0x0041)
        goto loc_1cece0;
    if (bp == 0x004f)
        goto loc_1cece0;
    bp += 0x0001;
loc_1cece0: // 0160:1cece0
    memoryASet16(ds, 0x20cf85, bp);
    ax = memoryAGet16(ds, 0x20d0ff);
    bx = memoryAGet16(ds, 0x20cf61);
    cx = memoryAGet16(ds, 0x20cf4f);
    sub_1cf2d2();
loc_1ced00: // 0160:1ced00
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    cx = memoryAGet16(ds, 0x20d05d);
    memoryASet16(ds, 0x20e805, cx);
    cx = 0x0041;
    memoryASet16(ds, 0x20e801, cx);
    dx = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20eda5, 0x0001);
    sub_1cf538();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20d231, ax);
    memoryASet16(ds, 0x20d233, bx);
    cx = memoryAGet16(ds, 0x20ee53);
    dx = memoryAGet16(ds, 0x20ee55);
    cx += 0x005f;
    dx += 0x005b;
    memoryASet16(ds, 0x20d111, 0x0000);
    if ((short)ax <= (short)0x0081)
        goto loc_1ced9e;
    if ((short)ax >= (short)cx)
        goto loc_1ced9e;
    if ((short)bx <= (short)0x0081)
        goto loc_1ced9e;
    if ((short)bx >= (short)dx)
        goto loc_1ced9e;
    memoryASet16(ds, 0x20d111, 0x0001);
    memoryASet16(ds, 0x20d0ff, 0x0001);
    esp += 4;
    return;
loc_1ced9e: // 0160:1ced9e
    if ((short)memoryAGet16(ds, 0x20ceb7) <= (short)0x0081)
        goto loc_1cedd9;
    if ((short)memoryAGet16(ds, 0x20ceb7) >= (short)cx)
        goto loc_1cedd9;
    if ((short)memoryAGet16(ds, 0x20ceb9) <= (short)0x0081)
        goto loc_1cedd9;
    if ((short)memoryAGet16(ds, 0x20ceb9) >= (short)dx)
        goto loc_1cedd9;
    memoryASet16(ds, 0x20d111, 0x0001);
    memoryASet16(ds, 0x20d0ff, 0x0001);
    esp += 4;
    return;
loc_1cedd9: // 0160:1cedd9
    memoryASet16(ds, 0x20d0ff, 0x0000);
    cx += 0x0011;
    dx += 0x0011;
    if ((short)ax <= (short)0x0070)
        goto loc_1cee09;
    if ((short)ax >= (short)cx)
        goto loc_1cee09;
    if ((short)bx <= (short)0x0070)
        goto loc_1cee09;
    if ((short)bx >= (short)dx)
        goto loc_1cee09;
    memoryASet16(ds, 0x20d0ff, 0x0001);
loc_1cee09: // 0160:1cee09
    esp += 4;
    return;
}
void sub_1cee0a() // 0160:1cee0a +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20cf3f) & 0xffff))
        goto loc_1cef92;
    bp = memoryAGet16(ds, 0x20cf87);
    if (bp < 0x0020)
        goto loc_1cee80;
    ax = memoryAGet16(ds, 0x20c830);
    if ((short)bp < (short)0x002e)
        goto loc_1cee3e;
    if ((short)bp > (short)0x0032)
        goto loc_1cee3e;
    flags.zero = !(ax & 0x0007);
    ax &= 0x0007;
    goto loc_1cee42;
loc_1cee3e: // 0160:1cee3e
    flags.zero = !(ax & 0x0003);
    ax &= 0x0003;
loc_1cee42: // 0160:1cee42
    if (!flags.zero)
        goto loc_1cee80;
    if (bp == 0x0033)
        goto loc_1cee60;
    if (bp == 0x003a)
        goto loc_1cee60;
    if (bp == 0x0041)
        goto loc_1cee60;
    if (bp == 0x004f)
        goto loc_1cee60;
    bp += 0x0001;
loc_1cee60: // 0160:1cee60
    memoryASet16(ds, 0x20cf87, bp);
    ax = memoryAGet16(ds, 0x20d101);
    bx = memoryAGet16(ds, 0x20cf63);
    cx = memoryAGet16(ds, 0x20cf51);
    sub_1cf2d2();
loc_1cee80: // 0160:1cee80
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    cx = memoryAGet16(ds, 0x20d05f);
    memoryASet16(ds, 0x20e805, cx);
    memoryASet16(ds, 0x20ce8f, 0x0001);
    cx = 0x0041;
    memoryASet16(ds, 0x20e801, cx);
    dx = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20eda5, 0x0001);
    sub_1cf538();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20d235, ax);
    memoryASet16(ds, 0x20d237, bx);
    cx = memoryAGet16(ds, 0x20ee53);
    dx = memoryAGet16(ds, 0x20ee55);
    cx += 0x005f;
    dx += 0x005b;
    memoryASet16(ds, 0x20d113, 0x0000);
    if ((short)ax <= (short)0x0081)
        goto loc_1cef27;
    if ((short)ax >= (short)cx)
        goto loc_1cef27;
    if ((short)bx <= (short)0x0081)
        goto loc_1cef27;
    if ((short)bx >= (short)dx)
        goto loc_1cef27;
    memoryASet16(ds, 0x20d113, 0x0001);
    memoryASet16(ds, 0x20d101, 0x0001);
    esp += 4;
    return;
loc_1cef27: // 0160:1cef27
    if ((short)memoryAGet16(ds, 0x20ceb7) <= (short)0x0081)
        goto loc_1cef62;
    if ((short)memoryAGet16(ds, 0x20ceb7) >= (short)cx)
        goto loc_1cef62;
    if ((short)memoryAGet16(ds, 0x20ceb9) <= (short)0x0081)
        goto loc_1cef62;
    if ((short)memoryAGet16(ds, 0x20ceb9) >= (short)dx)
        goto loc_1cef62;
    memoryASet16(ds, 0x20d113, 0x0001);
    memoryASet16(ds, 0x20d101, 0x0001);
    esp += 4;
    return;
loc_1cef62: // 0160:1cef62
    memoryASet16(ds, 0x20d101, 0x0000);
    cx += 0x0011;
    dx += 0x0011;
    if ((short)ax <= (short)0x0070)
        goto loc_1cef92;
    if ((short)ax >= (short)cx)
        goto loc_1cef92;
    if ((short)bx <= (short)0x0070)
        goto loc_1cef92;
    if ((short)bx >= (short)dx)
        goto loc_1cef92;
    memoryASet16(ds, 0x20d101, 0x0001);
loc_1cef92: // 0160:1cef92
    esp += 4;
    return;
}
void sub_1cef93() // 0160:1cef93 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20cf41) & 0xffff))
        goto loc_1cf13a;
    bp = memoryAGet16(ds, 0x20cf89);
    if (bp < 0x0020)
        goto loc_1cf014;
    ax = memoryAGet16(ds, 0x20c830);
    if ((short)bp < (short)0x002e)
        goto loc_1cefc7;
    if ((short)bp > (short)0x0032)
        goto loc_1cefc7;
    flags.zero = !(ax & 0x0007);
    ax &= 0x0007;
    goto loc_1cefcb;
loc_1cefc7: // 0160:1cefc7
    flags.zero = !(ax & 0x0003);
    ax &= 0x0003;
loc_1cefcb: // 0160:1cefcb
    if (!flags.zero)
        goto loc_1cf014;
    if (bp == 0x0033)
        goto loc_1cefe9;
    if (bp == 0x003a)
        goto loc_1cefe9;
    if (bp == 0x0041)
        goto loc_1cefe9;
    if (bp == 0x004f)
        goto loc_1cefe9;
    bp += 0x0001;
loc_1cefe9: // 0160:1cefe9
    memoryASet16(ds, 0x20cf89, bp);
    ax = memoryAGet16(ds, 0x20d103);
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1cf014;
    bx = memoryAGet16(ds, 0x20cf65);
    cx = memoryAGet16(ds, 0x20cf53);
    sub_1cf2d2();
loc_1cf014: // 0160:1cf014
    memoryASet16(ds, 0x20ce8f, 0x0003);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    cx = memoryAGet16(ds, 0x20d061);
    memoryASet16(ds, 0x20e805, cx);
    cx = 0x0041;
    memoryASet16(ds, 0x20e801, cx);
    dx = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20eda5, 0x0001);
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1cf067;
    memoryASet16(ds, 0x20eda5, 0x0000);
loc_1cf067: // 0160:1cf067
    sub_1cf538();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20d239, ax);
    memoryASet16(ds, 0x20d23b, bx);
    cx = memoryAGet16(ds, 0x20ee53);
    dx = memoryAGet16(ds, 0x20ee55);
    cx += 0x005f;
    dx += 0x005b;
    memoryASet16(ds, 0x20d115, 0x0000);
    if ((short)ax <= (short)0x0081)
        goto loc_1cf0cf;
    if ((short)ax >= (short)cx)
        goto loc_1cf0cf;
    if ((short)bx <= (short)0x0081)
        goto loc_1cf0cf;
    if ((short)bx >= (short)dx)
        goto loc_1cf0cf;
    memoryASet16(ds, 0x20d115, 0x0001);
    memoryASet16(ds, 0x20d103, 0x0001);
    esp += 4;
    return;
loc_1cf0cf: // 0160:1cf0cf
    if ((short)memoryAGet16(ds, 0x20ceb7) <= (short)0x0081)
        goto loc_1cf10a;
    if ((short)memoryAGet16(ds, 0x20ceb7) >= (short)cx)
        goto loc_1cf10a;
    if ((short)memoryAGet16(ds, 0x20ceb9) <= (short)0x0081)
        goto loc_1cf10a;
    if ((short)memoryAGet16(ds, 0x20ceb9) >= (short)dx)
        goto loc_1cf10a;
    memoryASet16(ds, 0x20d115, 0x0001);
    memoryASet16(ds, 0x20d103, 0x0001);
    esp += 4;
    return;
loc_1cf10a: // 0160:1cf10a
    memoryASet16(ds, 0x20d103, 0x0000);
    cx += 0x0011;
    dx += 0x0011;
    if ((short)ax <= (short)0x0070)
        goto loc_1cf13a;
    if ((short)ax >= (short)cx)
        goto loc_1cf13a;
    if ((short)bx <= (short)0x0070)
        goto loc_1cf13a;
    if ((short)bx >= (short)dx)
        goto loc_1cf13a;
    memoryASet16(ds, 0x20d103, 0x0001);
loc_1cf13a: // 0160:1cf13a
    esp += 4;
    return;
}
void sub_1cf13b() // 0160:1cf13b +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20cf43) & 0xffff))
        goto loc_1cf2d1;
    bp = memoryAGet16(ds, 0x20cf8b);
    if (bp < 0x0020)
        goto loc_1cf1b1;
    ax = memoryAGet16(ds, 0x20c830);
    if ((short)bp < (short)0x002e)
        goto loc_1cf16f;
    if ((short)bp > (short)0x0032)
        goto loc_1cf16f;
    flags.zero = !(ax & 0x0007);
    ax &= 0x0007;
    goto loc_1cf173;
loc_1cf16f: // 0160:1cf16f
    flags.zero = !(ax & 0x0003);
    ax &= 0x0003;
loc_1cf173: // 0160:1cf173
    if (!flags.zero)
        goto loc_1cf1b1;
    if (bp == 0x0033)
        goto loc_1cf191;
    if (bp == 0x003a)
        goto loc_1cf191;
    if (bp == 0x0041)
        goto loc_1cf191;
    if (bp == 0x004f)
        goto loc_1cf191;
    bp += 0x0001;
loc_1cf191: // 0160:1cf191
    memoryASet16(ds, 0x20cf8b, bp);
    ax = memoryAGet16(ds, 0x20d105);
    bx = memoryAGet16(ds, 0x20cf67);
    cx = memoryAGet16(ds, 0x20cf55);
    sub_1cf2d2();
loc_1cf1b1: // 0160:1cf1b1
    memoryASet16(ds, 0x20ce8f, 0x0002);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    cx = memoryAGet16(ds, 0x20d063);
    memoryASet16(ds, 0x20e805, cx);
    cx = 0x0041;
    if ((short)memoryAGet16(ds, 0x20cf8b) <= (short)0x0025)
        goto loc_1cf1e7;
    cx = 0x0041;
loc_1cf1e7: // 0160:1cf1e7
    memoryASet16(ds, 0x20e801, cx);
    dx = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20eda5, 0x0001);
    sub_1cf538();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20d23d, ax);
    memoryASet16(ds, 0x20d23f, bx);
    cx = memoryAGet16(ds, 0x20ee53);
    dx = memoryAGet16(ds, 0x20ee55);
    cx += 0x005f;
    dx += 0x005b;
    memoryASet16(ds, 0x20d117, 0x0000);
    if ((short)ax <= (short)0x0081)
        goto loc_1cf266;
    if ((short)ax >= (short)cx)
        goto loc_1cf266;
    if ((short)bx <= (short)0x0081)
        goto loc_1cf266;
    if ((short)bx >= (short)dx)
        goto loc_1cf266;
    memoryASet16(ds, 0x20d117, 0x0001);
    memoryASet16(ds, 0x20d105, 0x0001);
    esp += 4;
    return;
loc_1cf266: // 0160:1cf266
    if ((short)memoryAGet16(ds, 0x20ceb7) <= (short)0x0081)
        goto loc_1cf2a1;
    if ((short)memoryAGet16(ds, 0x20ceb7) >= (short)cx)
        goto loc_1cf2a1;
    if ((short)memoryAGet16(ds, 0x20ceb9) <= (short)0x0081)
        goto loc_1cf2a1;
    if ((short)memoryAGet16(ds, 0x20ceb9) >= (short)dx)
        goto loc_1cf2a1;
    memoryASet16(ds, 0x20d117, 0x0001);
    memoryASet16(ds, 0x20d105, 0x0001);
    esp += 4;
    return;
loc_1cf2a1: // 0160:1cf2a1
    memoryASet16(ds, 0x20d105, 0x0000);
    cx += 0x0011;
    dx += 0x0011;
    if ((short)ax <= (short)0x0070)
        goto loc_1cf2d1;
    if ((short)ax >= (short)cx)
        goto loc_1cf2d1;
    if ((short)bx <= (short)0x0070)
        goto loc_1cf2d1;
    if ((short)bx >= (short)dx)
        goto loc_1cf2d1;
    memoryASet16(ds, 0x20d105, 0x0001);
loc_1cf2d1: // 0160:1cf2d1
    esp += 4;
    return;
}
void sub_1cf2d2() // 0160:1cf2d2 +long
{
    esp -= 4;
    goto loc_1cf2d2;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 30370 bytes
loc_1cf2d2: // 0160:1cf2d2
    if (!ax)
        goto loc_1cf537;
    if (bp == 0x0022)
        goto loc_1cf2eb;
    if (bp != 0x0023)
        goto loc_1cf498;
loc_1cf2eb: // 0160:1cf2eb
    if (memoryAGet16(ds, 0x20edfd) & 0xffff)
        goto loc_1cf537;
    if (memoryAGet16(ds, 0x20ee85) != 0x0000)
        goto loc_1cf491;
    if (memoryAGet16(ds, 0x20ee83) == 0x0000)
        goto loc_1cf342;
    sub_1b1c25();
    ax &= 0x0003;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee89, memoryAGet16(ds, 0x20ee89) + ax);
    memoryASet16(ds, 0x20ee89, memoryAGet16(ds, 0x20ee89) & 0x0007);
    ax = memoryAGet16(ds, 0x20ee89);
    ax += 0x00c1;
    sub_1b1715();
    goto loc_1cf491;
loc_1cf342: // 0160:1cf342
    if (memoryAGet16(ds, 0x20d7b9) != 0x0008)
        goto loc_1cf367;
    sub_1b1c25();
    al &= 0x01;
    if (al)
        goto loc_1cf422;
    ax = 0x0126;
    sub_1b1715();
    goto loc_1cf491;
loc_1cf367: // 0160:1cf367
    if (memoryAGet16(ds, 0x20d7b9) != 0x0028)
        goto loc_1cf3a4;
    if ((short)bx < (short)0x019a)
        goto loc_1cf3a4;
    if ((short)bx > (short)0x03ac)
        goto loc_1cf3a4;
    if ((short)cx < (short)0x012c)
        goto loc_1cf3a4;
    if ((short)cx > (short)0x0320)
        goto loc_1cf3a4;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x0122;
    sub_1b1715();
    goto loc_1cf491;
loc_1cf3a4: // 0160:1cf3a4
    if (memoryAGet16(ds, 0x20d7b9) == 0x0006)
        goto loc_1cf3b8;
    if (memoryAGet16(ds, 0x20d7b9) != 0x0022)
        goto loc_1cf3d6;
loc_1cf3b8: // 0160:1cf3b8
    if ((short)bx > (short)0x0190)
        goto loc_1cf3d6;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x011e;
    sub_1b1715();
    goto loc_1cf491;
loc_1cf3d6: // 0160:1cf3d6
    ax = memoryAGet16(ds, 0x20d7b9);
    if ((short)ax <= (short)0x0011)
        goto loc_1cf40a;
    if ((short)ax >= (short)0x0016)
        goto loc_1cf40a;
    sub_1b1c25();
    ax &= 0x0001;
    if (!ax)
        goto loc_1cf422;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x011c;
    sub_1b1715();
    goto loc_1cf491;
loc_1cf40a: // 0160:1cf40a
    ax = memoryAGet16(ds, 0x20d7b9);
    if (ax == 0x0016)
        goto loc_1cf45c;
    if (ax == 0x0017)
        goto loc_1cf45c;
    if (ax == 0x0018)
        goto loc_1cf45c;
loc_1cf422: // 0160:1cf422
    sub_1b1c25();
    ax &= 0x0003;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) + ax);
    if ((short)memoryAGet16(ds, 0x20ee9d) < (short)0x000c)
        goto loc_1cf448;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) - 0x000c);
loc_1cf448: // 0160:1cf448
    ax = memoryAGet16(ds, 0x20ee9d);
    ax += 0x00dd;
    sub_1b1715();
    goto loc_1cf491;
    // gap 3 bytes
loc_1cf45c: // 0160:1cf45c
    sub_1b1c25();
    ax &= 0x0003;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) + ax);
    if ((short)memoryAGet16(ds, 0x20ee9d) < (short)0x000c)
        goto loc_1cf482;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) - 0x000c);
loc_1cf482: // 0160:1cf482
    ax = memoryAGet16(ds, 0x20ee9d);
    ax += 0x010c;
    sub_1b1715();
loc_1cf491: // 0160:1cf491
    al = 0x4d;
    goto loc_1b17b7;
loc_1cf498: // 0160:1cf498
    if (bp == 0x002f)
        goto loc_1cf4a4;
    if (bp != 0x003c)
        goto loc_1cf51a;
loc_1cf4a4: // 0160:1cf4a4
    if (!(memoryAGet16(ds, 0x20edfd) & 0xffff))
        goto loc_1cf513;
    ax = memoryAGet16(ds, 0x20d7b9);
    if ((short)ax <= (short)0x000a)
        goto loc_1cf4d7;
    if ((short)ax >= (short)0x0013)
        goto loc_1cf4d7;
    sub_1b1c25();
    ax &= 0x0001;
    if (!ax)
        goto loc_1cf4d7;
    ax = 0x0119;
    sub_1b1715();
    goto loc_1cf50c;
loc_1cf4d7: // 0160:1cf4d7
    sub_1b1c25();
    ax &= 0x0003;
    ax |= 0x0001;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) + ax);
    if ((short)memoryAGet16(ds, 0x20ee9d) < (short)0x000c)
        goto loc_1cf4fd;
    memoryASet16(ds, 0x20ee9d, memoryAGet16(ds, 0x20ee9d) - 0x000c);
loc_1cf4fd: // 0160:1cf4fd
    ax = memoryAGet16(ds, 0x20ee9d);
    ax += 0x00e9;
    sub_1b1715();
loc_1cf50c: // 0160:1cf50c
    al = 0x86;
    goto loc_1b17b7;
loc_1cf513: // 0160:1cf513
    al = 0x58;
    goto loc_1b17b7;
loc_1cf51a: // 0160:1cf51a
    if (bp == 0x0043)
        goto loc_1cf526;
    if (bp != 0x0035)
        goto loc_1cf537;
loc_1cf526: // 0160:1cf526
    if ((short)memoryAGet16(ds, 0x20c830) <= (short)0x0032)
        goto loc_1cf537;
    al = 0x59;
    goto loc_1b17b7;
loc_1cf537: // 0160:1cf537
    esp += 4;
    return;
}
void sub_1cf538() // 0160:1cf538 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20cec3, 0x0000);
    if ((short)bp >= (short)0x0020)
        goto loc_1cf585;
    if (!(memoryAGet16(ds, 0x20d2c3) & 0xffff))
        goto loc_1cf585;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0008;
    if (cx)
        goto loc_1cf585;
    ax = 0x00c8;
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, ax);
    memoryASet16(ds, 0x20ceb7, ax);
    memoryASet16(ds, 0x20ceb9, ax);
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
    return;
loc_1cf585: // 0160:1cf585
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1cf7c6;
    if ((short)dx <= (short)0x001e)
        goto loc_1cf5d4;
    edx = memoryAGet32(ds, 0x20d85d);
    if (edx == 0x00204b40)
        goto loc_1cf5b0;
    if (edx != 0x00204c84)
        goto loc_1cf5d4;
loc_1cf5b0: // 0160:1cf5b0
    dx = memoryAGet16(ds, 0x20c830);
    dx >>= 2;
    dx &= 0x0001;
    ax += dx;
    dx = memoryAGet16(ds, 0x20c830);
    dx >>= 3;
    dx &= 0x0001;
    bx += dx;
loc_1cf5d4: // 0160:1cf5d4
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    dx = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20ceb7, dx);
    push32(eax);
    push32(ebx);
    push32(ebp);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) >> 1);
    ax += 0x0080;
    ax -= memoryAGet16(ds, 0x20e805);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1cf61f;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1cf6b9;
loc_1cf61f: // 0160:1cf61f
    bx += 0x0080;
    bx -= memoryAGet16(ds, 0x20e805);
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1cf641;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1cf6b9;
loc_1cf641: // 0160:1cf641
    if (bx >= 0x0190)
        goto loc_1cf6b9;
    esi = memoryAGet32(ds, 0x20d82b);
    ebp &= 0x0000ffff;
    bp <<= 3;
    cx = memoryAGet16(ds, esi + ebp);
    cx += memoryAGet16(ds, 0x20e801);
    dx = memoryAGet16(ds, esi + ebp + 6);
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1cf67b;
    dx |= 0x0010;
loc_1cf67b: // 0160:1cf67b
    ax += memoryAGet16(ds, esi + ebp + 2);
    bx += memoryAGet16(ds, esi + ebp + 4);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    memoryASet16(ds, 0x20cec7, cx);
    memoryASet16(ds, 0x20cec9, dx);
    if (!(memoryAGet16(ds, 0x20eda5) & 0xffff))
        goto loc_1cf6b9;
    sub_1b19e0();
    memoryASet16(ds, 0x20cec3, 0x0001);
loc_1cf6b9: // 0160:1cf6b9
    ebp = pop32();
    ebx = pop32();
    if (memoryAGet16(ds, 0x20eda5) & 0xffff)
        goto loc_1cf6d3;
    memoryASet16(ds, 0x20ceb7, 0x0001);
loc_1cf6d3: // 0160:1cf6d3
    ax = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20e805, ax);
    eax = pop32();
    dx = memoryAGet16(ds, 0x20e805);
    if (!dx)
        goto loc_1cf789;
    dx >>= 2;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    ax += 0x0084;
    ax += memoryAGet16(ds, 0x20e805);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1cf718;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1cf789;
loc_1cf718: // 0160:1cf718
    bx += 0x0084;
    bx += memoryAGet16(ds, 0x20e805);
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1cf736;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1cf789;
loc_1cf736: // 0160:1cf736
    if (bx >= 0x0190)
        goto loc_1cf789;
    if ((short)bp >= (short)0x0020)
        goto loc_1cf789;
    cx = memoryAGet16(ds, 0x20cec7);
    dx = memoryAGet16(ds, 0x20cec9);
    sub_1b1a14();
    if (memoryAGet16(ds, 0x20cec3) != 0x0001)
        goto loc_1cf789;
    push32(esi);
    esi = 0x0020c00c;
    eax = memoryAGet32(ds, 0x20c80c);
    eax -= 0x00000018;
    esi += eax;
    ecx = 0x00000006;
loc_1cf775: // 0160:1cf775
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 12);
    memoryASet16(ds, esi, bx);
    memoryASet16(ds, esi + 12, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1cf775;
    esi = pop32();
loc_1cf789: // 0160:1cf789
    memoryASet16(ds, 0x20ce8f, 0xffff);
    ax = memoryAGet16(ds, 0x20ceb7);
    bx = memoryAGet16(ds, 0x20ceb3);
    memoryASet16(ds, 0x20ceb7, bx);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20ceb9, bx);
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + ax);
    ax >>= 1;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + ax);
    esp += 4;
    return;
loc_1cf7c6: // 0160:1cf7c6
    cx = memoryAGet16(ds, 0x20cf23);
    cx &= 0xfffe;
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    dx = memoryAGet16(ds, 0x20e805);
    memoryASet16(ds, 0x20ceb7, dx);
    push32(eax);
    push32(ebx);
    push32(ebp);
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) >> 1);
    ax -= cx;
    ax += 0x0078;
    ax -= memoryAGet16(ds, 0x20e805);
    if ((short)ax >= 0)
        goto loc_1cf819;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1cf8c0;
loc_1cf819: // 0160:1cf819
    ax >>= 1;
    ax += 0x003c;
    cx = memoryAGet16(ds, 0x20cf25);
    cx &= 0xfffe;
    bx -= cx;
    bx += 0x0078;
    bx -= memoryAGet16(ds, 0x20e805);
    if ((short)bx >= 0)
        goto loc_1cf845;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1cf8c0;
loc_1cf845: // 0160:1cf845
    bx >>= 1;
    bx += 0x003c;
    if (bx >= 0x0190)
        goto loc_1cf8c0;
    esi = memoryAGet32(ds, 0x20d82b);
    ebp &= 0x0000ffff;
    bp <<= 3;
    cx = memoryAGet16(ds, esi + ebp);
    cx += memoryAGet16(ds, 0x20e801);
    dx = memoryAGet16(ds, esi + ebp + 6);
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1cf882;
    dx |= 0x0010;
loc_1cf882: // 0160:1cf882
    ax += memoryAGet16(ds, esi + ebp + 2);
    bx += memoryAGet16(ds, esi + ebp + 4);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    memoryASet16(ds, 0x20cec7, cx);
    memoryASet16(ds, 0x20cec9, dx);
    if (!(memoryAGet16(ds, 0x20eda5) & 0xffff))
        goto loc_1cf8c0;
    sub_1b19e0();
    memoryASet16(ds, 0x20cec3, 0x0001);
loc_1cf8c0: // 0160:1cf8c0
    ebp = pop32();
    ebx = pop32();
    if (memoryAGet16(ds, 0x20eda5) & 0xffff)
        goto loc_1cf8d6;
    memoryASet16(ds, 0x20ceb7, 0x0001);
loc_1cf8d6: // 0160:1cf8d6
    ax = memoryAGet16(ds, 0x20ceb7);
    memoryASet16(ds, 0x20e805, ax);
    eax = pop32();
    dx = memoryAGet16(ds, 0x20e805);
    if (!dx)
        goto loc_1cf99e;
    dx >>= 2;
    memoryASet16(ds, 0x20e805, memoryAGet16(ds, 0x20e805) - dx);
    ax += 0x0084;
    ax += memoryAGet16(ds, 0x20e805);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1cf91f;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1cf99e;
loc_1cf91f: // 0160:1cf91f
    ax >>= 1;
    ax += 0x003c;
    bx += 0x0084;
    bx += memoryAGet16(ds, 0x20e805);
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1cf944;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1cf99e;
loc_1cf944: // 0160:1cf944
    bx >>= 1;
    bx += 0x003c;
    if (bx >= 0x0190)
        goto loc_1cf99e;
    if ((short)bp >= (short)0x0020)
        goto loc_1cf99e;
    cx = memoryAGet16(ds, 0x20cec7);
    dx = memoryAGet16(ds, 0x20cec9);
    sub_1b1a14();
    if (memoryAGet16(ds, 0x20cec3) != 0x0001)
        goto loc_1cf99e;
    push32(esi);
    esi = 0x0020c00c;
    eax = memoryAGet32(ds, 0x20c80c);
    eax -= 0x00000018;
    esi += eax;
    ecx = 0x00000006;
loc_1cf98a: // 0160:1cf98a
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 12);
    memoryASet16(ds, esi, bx);
    memoryASet16(ds, esi + 12, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1cf98a;
    esi = pop32();
loc_1cf99e: // 0160:1cf99e
    memoryASet16(ds, 0x20ce8f, 0xffff);
    ax = memoryAGet16(ds, 0x20ceb7);
    bx = memoryAGet16(ds, 0x20ceb3);
    memoryASet16(ds, 0x20ceb7, bx);
    bx = memoryAGet16(ds, 0x20ceb5);
    memoryASet16(ds, 0x20ceb9, bx);
    memoryASet16(ds, 0x20ceb5, memoryAGet16(ds, 0x20ceb5) + ax);
    ax >>= 1;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + ax);
    esp += 4;
}
void sub_1cf9db() // 0160:1cf9db +long
{
    esp -= 4;
    goto loc_1cf9db;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 122875 bytes
loc_1cf9db: // 0160:1cf9db
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1cfae1;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    if (ax)
        goto loc_1cfa00;
    if (!(memoryAGet16(ds, 0x20d081) & 0xffff))
        goto loc_1cfa4d;
loc_1cfa00: // 0160:1cfa00
    ax = memoryAGet16(ds, 0x20d04d);
    ax &= 0x00ff;
    if (ax)
        goto loc_1cfa17;
    if (!(memoryAGet16(ds, 0x20d083) & 0xffff))
        goto loc_1cfa4d;
loc_1cfa17: // 0160:1cfa17
    ax = memoryAGet16(ds, 0x20d04f);
    ax &= 0x00ff;
    if (ax)
        goto loc_1cfa2e;
    if (!(memoryAGet16(ds, 0x20d085) & 0xffff))
        goto loc_1cfa4d;
loc_1cfa2e: // 0160:1cfa2e
    ax = memoryAGet16(ds, 0x20d051);
    ax &= 0x00ff;
    if (ax)
        goto loc_1cfae1;
    if (memoryAGet16(ds, 0x20d081) & 0xffff)
        goto loc_1cfae1;
loc_1cfa4d: // 0160:1cfa4d
    if (memoryAGet16(ds, 0x20ce93) == 0x0004)
        goto loc_1cfacd;
    if (memoryAGet16(ds, 0x20ce93) >= 0x0004)
        goto loc_1cfa93;
    memoryASet16(ds, 0x20d081, 0x0000);
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1cfae1;
    memoryASet16(ds, 0x20d7b7, 0x0002);
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1cfae1;
loc_1cfa93: // 0160:1cfa93
    memoryASet16(ds, 0x20d081, 0x0000);
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1cfae1;
    memoryASet16(ds, 0x20d7b7, 0x0001);
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1cfae1;
loc_1cfacd: // 0160:1cfacd
    if (memoryAGet16(ds, 0x20d7b5) & 0xffff)
        goto loc_1cfae1;
    memoryASet16(ds, 0x20d7b5, 0x0001);
loc_1cfae1: // 0160:1cfae1
    bx = 0x00a8;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1cfafa;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cfafe;
loc_1cfafa: // 0160:1cfafa
    bx = 0x0096;
loc_1cfafe: // 0160:1cfafe
    ax = memoryAGet16(ds, 0x20ee53);
    ax += 0x004c;
    cx = 0x001c;
    dx = 0x0010;
    bx += 0x0004;
    sub_1b19ac();
    bx = 0x00b2;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1cfb32;
    if (!(memoryAGet16(ds, 0x20d89f) & 0xffff))
        goto loc_1cfb36;
loc_1cfb32: // 0160:1cfb32
    bx = 0x00a0;
loc_1cfb36: // 0160:1cfb36
    ax = memoryAGet16(ds, 0x20ee53);
    ax += 0x0044;
    cx = memoryAGet16(ds, 0x20d081);
    if (!cx)
        goto loc_1cfb5d;
    if (memoryAGet16(ds, 0x20ede7) & 0xffff)
        goto loc_1cfb5d;
    if (cx != 0x0001)
        goto loc_1cfb6a;
loc_1cfb5d: // 0160:1cfb5d
    dx = memoryAGet16(ds, 0x20c830);
    dx &= 0x0010;
    if (dx)
        goto loc_1cfb7b;
loc_1cfb6a: // 0160:1cfb6a
    cx += 0x0005;
    dx = 0x0010;
    bx += 0x0008;
    goto loc_1b19ac;
loc_1cfb7b: // 0160:1cfb7b
    esp += 4;
    return;
}
void sub_1cfb7c() // 0160:1cfb7c +long
{
    esp -= 4;
    goto loc_1cfb7c;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 123292 bytes
loc_1cfb7c: // 0160:1cfb7c
    if (!(memoryAGet16(ds, 0x20d79f) & 0xffff))
        goto loc_1cfbce;
    memoryASet16(ds, 0x20d79f, memoryAGet16(ds, 0x20d79f) - 0x0001);
    if (memoryAGet16(ds, 0x20d89b) & 0x0fff)
        goto loc_1cfbce;
    esi = 0x0020d781;
    ax = 0x017c;
    bx = 0x00ce;
    sub_1cfcb2();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    bx -= 0x0006;
    cx = 0x001e;
    dx = 0x0010;
    ax += 0x0014;
    sub_1b19ac();
loc_1cfbce: // 0160:1cfbce
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cfc7e;
    if (!(memoryAGet16(ds, 0x20d89d) & 0xffff))
        goto loc_1cfbf6;
    memoryASet16(ds, 0x20d89d, memoryAGet16(ds, 0x20d89d) - 0x0001);
    if (memoryAGet16(ds, 0x20d89d))
        goto loc_1cfc7e;
loc_1cfbf6: // 0160:1cfbf6
    if (!(memoryAGet16(ds, 0x20d081) & 0xffff))
        goto loc_1cfc7e;
    bl = 0x3c;
    al = memoryAGet(ds, 0x20d780);
    al++;
    if (bl != al)
        goto loc_1cfc48;
    al = memoryAGet(ds, 0x20d77d);
    al++;
    if (al != 0x0a)
        goto loc_1cfc41;
    al = memoryAGet(ds, 0x20d77c);
    al++;
    if (al != 0x06)
        goto loc_1cfc3a;
    al = memoryAGet(ds, 0x20d77b);
    if (al == 0x04)
        goto loc_1cfc7e;
    memoryASet(ds, 0x20d77b, memoryAGet(ds, 0x20d77b) + 0x01);
    al = 0;
loc_1cfc3a: // 0160:1cfc3a
    memoryASet(ds, 0x20d77c, al);
    al = 0;
loc_1cfc41: // 0160:1cfc41
    memoryASet(ds, 0x20d77d, al);
    al = 0;
loc_1cfc48: // 0160:1cfc48
    memoryASet(ds, 0x20d780, al);
    esi = 0x00205080;
    eax = 0;
    al = memoryAGet(ds, 0x20d780);
    al = memoryAGet(ds, esi + eax);
    goto loc_1cfc67;
    // gap 9 bytes
loc_1cfc67: // 0160:1cfc67
    bl = 0;
loc_1cfc69: // 0160:1cfc69
    if ((char)al < (char)0x0a)
        goto loc_1cfc73;
    al -= 0x0a;
    bl++;
    goto loc_1cfc69;
loc_1cfc73: // 0160:1cfc73
    memoryASet(ds, 0x20d77f, al);
    memoryASet(ds, 0x20d77e, bl);
loc_1cfc7e: // 0160:1cfc7e
    esi = 0x0020d77b;
    ax = 0x017c;
    bx = 0x0096;
    sub_1cfcb2();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += 0x0010;
    bx -= 0x0006;
    cx = 0x001d;
    dx = 0x0010;
    goto loc_1b19ac;
}
void sub_1cfcb2() // 0160:1cfcb2 +long
{
    esp -= 4;
    goto loc_1cfcb2;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 123602 bytes
loc_1cfcb2: // 0160:1cfcb2
    if ((short)ax < (short)0x012c)
        goto loc_1cfcc3;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1cfcc3: // 0160:1cfcc3
    if ((short)bx < (short)0x012c)
        goto loc_1cfcd6;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1cfcd6: // 0160:1cfcd6
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    cl = memoryAGet(ds, esi + 1);
    memoryASet(ds, 0x20ceb7, cl);
    cl = memoryAGet(ds, esi + 2);
    memoryASet(ds, 0x20ceb9, cl);
    cl = memoryAGet(ds, esi + 3);
    memoryASet(ds, 0x20cebb, cl);
    cl = memoryAGet(ds, esi + 4);
    memoryASet(ds, 0x20cebd, cl);
    ecx = 0;
    cl = memoryAGet(ds, esi);
    cx += 0x0005;
    dx = 0x0010;
    ax += 0x0008;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20ceb7);
    cx += 0x0005;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x001c;
    bx = memoryAGet16(ds, 0x20ceb5);
    dx = 0x0010;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20ceb9);
    cx += 0x0005;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0028;
    bx = memoryAGet16(ds, 0x20ceb5);
    dx = 0x0010;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20cebb);
    cx += 0x0010;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0030;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx++;
    dx = 0x0010;
    bx += 0x0004;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20cebd);
    cx += 0x0010;
    cx &= 0x00fe;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0037;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx++;
    dx = 0x0010;
    bx += 0x0004;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    bx += 0x0006;
    ax += 0x0010;
    cx = 0x000f;
    dx = 0x0010;
    bx += 0x0004;
    goto loc_1b19ac;
}
void sub_1cfdfb() // 0160:1cfdfb +long
{
    esp -= 4;
    goto loc_1cfdfb;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 123550 bytes
loc_1cfc7e: // 0160:1cfc7e
    esi = 0x0020d77b;
    ax = 0x017c;
    bx = 0x0096;
    sub_1cfcb2();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += 0x0010;
    bx -= 0x0006;
    cx = 0x001d;
    dx = 0x0010;
    goto loc_1b19ac;
    // gap 329 bytes
loc_1cfdfb: // 0160:1cfdfb
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1cfc7e;
    if (memoryAGet16(ds, 0x20d87d) & 0xffff)
        goto loc_1cfc7e;
    bx = 0x003c;
    al = memoryAGet(ds, 0x20d780);
    al--;
    if ((char)al >= 0)
        goto loc_1cfe82;
    al = memoryAGet(ds, 0x20d77d);
    al--;
    if ((char)al >= 0)
        goto loc_1cfe77;
    al = memoryAGet(ds, 0x20d77c);
    al--;
    if ((char)al >= 0)
        goto loc_1cfe70;
    al = memoryAGet(ds, 0x20d77b);
    if (al)
        goto loc_1cfe67;
    if (memoryAGet16(ds, 0x20d7a3) & 0xffff)
        goto loc_1cfc7e;
    memoryASet16(ds, 0x20d7a3, 0x0001);
    memoryASet16(ds, 0x20d87f, 0x0001);
    goto loc_1cfc7e;
loc_1cfe67: // 0160:1cfe67
    memoryASet(ds, 0x20d77b, memoryAGet(ds, 0x20d77b) - 0x01);
    al = 0x05;
loc_1cfe70: // 0160:1cfe70
    memoryASet(ds, 0x20d77c, al);
    al = 0x09;
loc_1cfe77: // 0160:1cfe77
    memoryASet(ds, 0x20d77d, al);
    ax = 0x003c;
    ax--;
loc_1cfe82: // 0160:1cfe82
    memoryASet(ds, 0x20d780, al);
    esi = 0x00205080;
    eax = 0;
    al = memoryAGet(ds, 0x20d780);
    al = memoryAGet(ds, esi + eax);
    goto loc_1cfe9f;
    // gap 7 bytes
loc_1cfe9f: // 0160:1cfe9f
    bl = 0;
loc_1cfea1: // 0160:1cfea1
    if ((char)al < (char)0x0a)
        goto loc_1cfeab;
    al -= 0x0a;
    bl++;
    goto loc_1cfea1;
loc_1cfeab: // 0160:1cfeab
    memoryASet(ds, 0x20d77f, al);
    memoryASet(ds, 0x20d77e, bl);
    goto loc_1cfc7e;
}
void sub_1cfebb() // 0160:1cfebb +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d2c3) & 0xffff)
        goto loc_1cfee3;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0004)
        goto loc_1cff9a;
    if (memoryAGet16(ds, 0x20d7f9) == 0x0100)
        goto loc_1cff9a;
loc_1cfee3: // 0160:1cfee3
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1cff9a;
    ax = memoryAGet16(ds, 0x20d05d);
    ax += memoryAGet16(ds, 0x20d05f);
    ax += memoryAGet16(ds, 0x20d061);
    ax += memoryAGet16(ds, 0x20d063);
    memoryASet16(ds, 0x20cec5, ax);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    memoryASet16(ds, 0x20ceb3, ax);
    esi = 0x0020d251;
    bp = 0x0008;
loc_1cff2c: // 0160:1cff2c
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_1cff93;
    ax += memoryAGet16(ds, 0x20ceb3);
    if (ax != 0x0005)
        goto loc_1cff48;
    memoryASet16(ds, esi, 0x0000);
    goto loc_1cff93;
loc_1cff48: // 0160:1cff48
    memoryASet16(ds, esi, ax);
    if (memoryAGet16(ds, 0x20cec5) & 0xffff)
        goto loc_1cff93;
    ax = memoryAGet16(ds, esi + 2);
    ax += 0x0080;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax < 0)
        goto loc_1cff93;
    bx = memoryAGet16(ds, esi + 4);
    bx += 0x0080;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx < 0)
        goto loc_1cff93;
    if ((short)bx >= (short)0x0190)
        goto loc_1cff93;
    dx = 0;
    cx = memoryAGet16(ds, esi);
    cx += 0x006b;
    push32(ebp);
    push32(esi);
    sub_1b19e0();
    esi = pop32();
    ebp = pop32();
loc_1cff93: // 0160:1cff93
    esi += 0x00000006;
    bp--;
    if (bp)
        goto loc_1cff2c;
loc_1cff9a: // 0160:1cff9a
    esp += 4;
    return;
}
void sub_1cff9b() // 0160:1cff9b +long
{
    esp -= 4;
    goto loc_1cff9b;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 124347 bytes
loc_1cff9b: // 0160:1cff9b
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d01bb;
    ax = memoryAGet16(ds, 0x20d7a3);
    if ((short)ax <= (short)0x0032)
        goto loc_1d0059;
    if ((short)ax <= (short)0x004b)
        goto loc_1cffc9;
    memoryASet16(ds, 0x20ee47, 0x0001);
loc_1cffc9: // 0160:1cffc9
    if (memoryAGet16(ds, 0x20d1f9) & 0xffff)
        goto loc_1cfff9;
    ax = 0x0001;
    ecx = 0x00000004;
    esi = 0x0020d16d;
loc_1cffe2: // 0160:1cffe2
    if (memoryAGet16(ds, esi) == 0x0002)
        goto loc_1cfff3;
    esi += 0x00000002;
    ax += 0x0001;
    if (--ecx)
        goto loc_1cffe2;
    goto loc_1cfff9;
loc_1cfff3: // 0160:1cfff3
    memoryASet16(ds, 0x20d1f9, ax);
loc_1cfff9: // 0160:1cfff9
    if (memoryAGet16(ds, 0x20d1fb) & 0xffff)
        goto loc_1d0029;
    ax = 0x0001;
    ecx = 0x00000004;
    esi = 0x0020d16d;
loc_1d0012: // 0160:1d0012
    if (memoryAGet16(ds, esi) == 0x0004)
        goto loc_1d0023;
    esi += 0x00000002;
    ax += 0x0001;
    if (--ecx)
        goto loc_1d0012;
    goto loc_1d0029;
loc_1d0023: // 0160:1d0023
    memoryASet16(ds, 0x20d1fb, ax);
loc_1d0029: // 0160:1d0029
    if (memoryAGet16(ds, 0x20d1fd) & 0xffff)
        goto loc_1d0059;
    ax = 0x0001;
    ecx = 0x00000004;
    esi = 0x0020d16d;
loc_1d0042: // 0160:1d0042
    if (memoryAGet16(ds, esi) == 0x0006)
        goto loc_1d0053;
    esi += 0x00000002;
    ax += 0x0001;
    if (--ecx)
        goto loc_1d0042;
    goto loc_1d0059;
loc_1d0053: // 0160:1d0053
    memoryASet16(ds, 0x20d1fd, ax);
loc_1d0059: // 0160:1d0059
    if (!(memoryAGet16(ds, 0x20d1f7) & 0xffff))
        goto loc_1d01bb;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d01bb;
    ax = 0x00aa;
    bx = 0x0094;
    dx = 0x0010;
    cx = 0x0006;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d1f7);
    cx = 0x0006;
    sub_1d01bc();
    if (!(memoryAGet16(ds, 0x20d1f9) & 0xffff))
        goto loc_1d01bb;
    ax = 0x00aa;
    bx = 0x00a6;
    dx = 0x0010;
    cx = 0x0007;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d1f9);
    cx = 0x0007;
    sub_1d01bc();
    if (memoryAGet16(ds, 0x20edfb) & 0xffff)
        goto loc_1d00ed;
    if (memoryAGet16(ds, 0x20d7a3) & 0xffff)
        goto loc_1d00ed;
    memoryASet16(ds, 0x20d7a3, 0x0001);
loc_1d00ed: // 0160:1d00ed
    if (!(memoryAGet16(ds, 0x20d1fb) & 0xffff))
        goto loc_1d01bb;
    if (memoryAGet16(ds, 0x20d1fb) == 0x0001)
        goto loc_1d0110;
    if (memoryAGet16(ds, 0x20d1fd) != 0x0001)
        goto loc_1d0154;
loc_1d0110: // 0160:1d0110
    if (memoryAGet16(ds, 0x20ee8d) == 0x00ff)
        goto loc_1d0154;
    if (memoryAGet16(ds, 0x20d7b9) != 0x0010)
        goto loc_1d0139;
    memoryASet16(ds, 0x20ee8d, 0x00ff);
    ax = 0x0127;
    sub_1b1715();
    goto loc_1d0154;
loc_1d0139: // 0160:1d0139
    memoryASet16(ds, 0x20ee8d, 0x00ff);
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x0128;
    sub_1b1715();
loc_1d0154: // 0160:1d0154
    ax = 0x00aa;
    bx = 0x00b8;
    dx = 0x0010;
    cx = 0x0008;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d1fb);
    cx = 0x0008;
    sub_1d01bc();
    if (memoryAGet16(ds, 0x20d7a3) & 0xffff)
        goto loc_1d018c;
    memoryASet16(ds, 0x20d7a3, 0x0001);
loc_1d018c: // 0160:1d018c
    if (!(memoryAGet16(ds, 0x20d1fd) & 0xffff))
        goto loc_1d01bb;
    ax = 0x00aa;
    bx = 0x00ca;
    dx = 0x0010;
    cx = 0x0009;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d1fd);
    cx = 0x0009;
    goto loc_1d01bc;
    // gap 3 bytes
loc_1d01bb: // 0160:1d01bb
    esp += 4;
    return;
loc_1d01bc: // 0160:1d01bc
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1d0260;
    if (ax == 0x0001)
        goto loc_1d020a;
    if (ax == 0x0002)
        goto loc_1d01fb;
    if (ax == 0x0003)
        goto loc_1d01ec;
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    goto loc_1d0217;
loc_1d01ec: // 0160:1d01ec
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    goto loc_1d0217;
loc_1d01fb: // 0160:1d01fb
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    goto loc_1d0217;
loc_1d020a: // 0160:1d020a
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
loc_1d0217: // 0160:1d0217
    ax += 0x00a6;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d0231;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d0260;
loc_1d0231: // 0160:1d0231
    bx += 0x0090;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d024c;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d0260;
loc_1d024c: // 0160:1d024c
    if (bx >= 0x0190)
        goto loc_1d0260;
    dx = 0x0010;
    goto loc_1b19ac;
loc_1d0260: // 0160:1d0260
    esp += 4;
    return;
}
void sub_1d01bc() // 0160:1d01bc +long
{
    esp -= 4;
    goto loc_1d01bc;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 124892 bytes
loc_1d01bc: // 0160:1d01bc
    if (memoryAGet16(ds, 0x20d867) & 0xffff)
        goto loc_1d0260;
    if (ax == 0x0001)
        goto loc_1d020a;
    if (ax == 0x0002)
        goto loc_1d01fb;
    if (ax == 0x0003)
        goto loc_1d01ec;
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    goto loc_1d0217;
loc_1d01ec: // 0160:1d01ec
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    goto loc_1d0217;
loc_1d01fb: // 0160:1d01fb
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    goto loc_1d0217;
loc_1d020a: // 0160:1d020a
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
loc_1d0217: // 0160:1d0217
    ax += 0x00a6;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d0231;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d0260;
loc_1d0231: // 0160:1d0231
    bx += 0x0090;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d024c;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d0260;
loc_1d024c: // 0160:1d024c
    if (bx >= 0x0190)
        goto loc_1d0260;
    dx = 0x0010;
    goto loc_1b19ac;
loc_1d0260: // 0160:1d0260
    esp += 4;
    return;
}
void sub_1d0261() // 0160:1d0261 +long
{
    esp -= 4;
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7a9);
    if (!cx)
        goto loc_1d03db;
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088d4;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    if (ax != 0x0196)
        goto loc_1d029a;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1d029a: // 0160:1d029a
    if (bx != 0x0144)
        goto loc_1d02ad;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1d02ad: // 0160:1d02ad
    cx = 0x0009;
    dx = 0x0010;
    ax += 0x0008;
    sub_1b19ac();
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7ad);
    if (!cx)
        goto loc_1d03db;
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088d4;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    if (ax != 0x0196)
        goto loc_1d02f7;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1d02f7: // 0160:1d02f7
    if (bx != 0x0144)
        goto loc_1d030a;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1d030a: // 0160:1d030a
    cx = 0x0008;
    dx = 0x0010;
    ax += 0x0008;
    sub_1b19ac();
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7af);
    if (!cx)
        goto loc_1d03db;
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088d4;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    if (ax != 0x0196)
        goto loc_1d0354;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1d0354: // 0160:1d0354
    if (bx != 0x0144)
        goto loc_1d0367;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1d0367: // 0160:1d0367
    cx = 0x0007;
    dx = 0x0010;
    ax += 0x0008;
    sub_1b19ac();
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7ab);
    if (!cx)
        goto loc_1d03db;
    if ((short)cx < (short)0x0005)
        goto loc_1d0390;
    cx -= 0x0004;
loc_1d0390: // 0160:1d0390
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088d4;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    if (ax != 0x0196)
        goto loc_1d03b7;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1d03b7: // 0160:1d03b7
    if (bx != 0x0144)
        goto loc_1d03ca;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1d03ca: // 0160:1d03ca
    cx = 0x0006;
    dx = 0x0010;
    ax += 0x0008;
    sub_1b19ac();
loc_1d03db: // 0160:1d03db
    esp += 4;
    return;
}
void sub_1d03dc() // 0160:1d03dc +long
{
    esp -= 4;
    goto loc_1d03dc;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 125436 bytes
loc_1d03dc: // 0160:1d03dc
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7a9);
    if (!cx)
        goto loc_1d04a0;
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088c8;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    cx = 0x0008;
    dx = 0x0010;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d7ab);
    if (!ax)
        goto loc_1d04a0;
    bx = memoryAGet16(ds, 0x20d7a9);
    ecx = 0x00000001;
    if (ax == 0x0001)
        goto loc_1d0438;
    if (bx != 0x0001)
        goto loc_1d044c;
loc_1d0438: // 0160:1d0438
    cx = 0x0002;
    if (ax == 0x0002)
        goto loc_1d0448;
    if (bx != 0x0002)
        goto loc_1d044c;
loc_1d0448: // 0160:1d0448
    cx = 0x0003;
loc_1d044c: // 0160:1d044c
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088c8;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    cx = 0x0007;
    dx = 0x0010;
    sub_1b19ac();
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d7ab);
    if (!cx)
        goto loc_1d04a0;
    cx -= 0x0001;
    cx <<= 2;
    esi = 0x002088c8;
    ax = memoryAGet16(ds, esi + ecx);
    bx = memoryAGet16(ds, esi + ecx + 2);
    cx = 0x0006;
    dx = 0x0010;
    goto loc_1b19ac;
loc_1d04a0: // 0160:1d04a0
    esp += 4;
    return;
}
void sub_1d04a1() // 0160:1d04a1 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0001)
        goto loc_1d04cb;
    if (ax == 0x0002)
        goto loc_1d0c95;
    if (ax == 0x0003)
        goto loc_1d097c;
    if (ax == 0x0004)
        goto loc_1d04cc;
loc_1d04cb: // 0160:1d04cb
    esp += 4;
    return;
loc_1d04cc: // 0160:1d04cc
    bx = memoryAGet16(ds, 0x20d7a5);
    if (!bx)
        goto loc_1d091d;
    if (memoryAGet16(ds, 0x20d7a5) != 0x0259)
        goto loc_1d050a;
    memoryASet16(ds, 0x20ee31, memoryAGet16(ds, 0x20ee31) + 0x0001);
    esi = 0x0020cf85;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7a7);
    ax <<= 1;
    memoryASet16(ds, esi + eax, 0x0034);
    goto loc_1d091d;
loc_1d050a: // 0160:1d050a
    if (memoryAGet16(ds, 0x20d7a5) != 0x02bd)
        goto loc_1d07c5;
    ax = 0x0033;
    esi = 0x0020cf73;
    edi = 0x0020cf85;
    ecx = 0x00000008;
loc_1d052c: // 0160:1d052c
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1d052c;
    ax = memoryAGet16(ds, 0x20d7ad);
    if (ax == 0x0001)
        goto loc_1d0570;
    if (ax == 0x0002)
        goto loc_1d0566;
    if (ax == 0x0003)
        goto loc_1d055c;
    memoryASet16(ds, 0x20ce9b, memoryAGet16(ds, 0x20ce9b) - 0x0001);
    goto loc_1d0578;
loc_1d055c: // 0160:1d055c
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) - 0x0001);
    goto loc_1d0578;
loc_1d0566: // 0160:1d0566
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) - 0x0001);
    goto loc_1d0578;
loc_1d0570: // 0160:1d0570
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) - 0x0001);
loc_1d0578: // 0160:1d0578
    ax = memoryAGet16(ds, 0x20d7af);
    if (ax == 0x0001)
        goto loc_1d05cc;
    if (ax == 0x0002)
        goto loc_1d05b8;
    if (ax == 0x0003)
        goto loc_1d05a4;
    if (memoryAGet16(ds, 0x20ce9b) == 0x000b)
        goto loc_1d05de;
    memoryASet16(ds, 0x20ce9b, memoryAGet16(ds, 0x20ce9b) + 0x0001);
    goto loc_1d05de;
loc_1d05a4: // 0160:1d05a4
    if (memoryAGet16(ds, 0x20ce99) == 0x000b)
        goto loc_1d05de;
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) + 0x0001);
    goto loc_1d05de;
loc_1d05b8: // 0160:1d05b8
    if (memoryAGet16(ds, 0x20ce97) == 0x000b)
        goto loc_1d05de;
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) + 0x0001);
    goto loc_1d05de;
loc_1d05cc: // 0160:1d05cc
    if (memoryAGet16(ds, 0x20ce95) == 0x000b)
        goto loc_1d05de;
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) + 0x0001);
loc_1d05de: // 0160:1d05de
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax == 0x0001)
        goto loc_1d0614;
    if (ax == 0x0002)
        goto loc_1d060a;
    if (ax == 0x0003)
        goto loc_1d0600;
    memoryASet16(ds, 0x20ce9b, memoryAGet16(ds, 0x20ce9b) - 0x0002);
    goto loc_1d061c;
loc_1d0600: // 0160:1d0600
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) - 0x0002);
    goto loc_1d061c;
loc_1d060a: // 0160:1d060a
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) - 0x0002);
    goto loc_1d061c;
loc_1d0614: // 0160:1d0614
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) - 0x0002);
loc_1d061c: // 0160:1d061c
    ax = memoryAGet16(ds, 0x20d7ab);
    if (ax == 0x0004)
        goto loc_1d071e;
    if (ax == 0x0003)
        goto loc_1d06d4;
    if (ax == 0x0002)
        goto loc_1d068a;
    ax = memoryAGet16(ds, 0x20d04b);
    ebx = memoryAGet32(ds, 0x20d0b7);
    ecx = memoryAGet32(ds, 0x20d0bb);
    dx = memoryAGet16(ds, 0x20d081);
    ebp = memoryAGet32(ds, 0x20d093);
    memoryASet32(ds, 0x20e7fd, ebp);
    sub_1d091e();
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d067d;
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) + 0x0002);
loc_1d067d: // 0160:1d067d
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) + 0x0001);
    goto loc_1d0763;
loc_1d068a: // 0160:1d068a
    ax = memoryAGet16(ds, 0x20d04d);
    ebx = memoryAGet32(ds, 0x20d0bf);
    ecx = memoryAGet32(ds, 0x20d0c3);
    dx = memoryAGet16(ds, 0x20d083);
    ebp = memoryAGet32(ds, 0x20d097);
    memoryASet32(ds, 0x20e7fd, ebp);
    sub_1d091e();
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d06c7;
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) + 0x0002);
loc_1d06c7: // 0160:1d06c7
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) - 0x0001);
    goto loc_1d0763;
loc_1d06d4: // 0160:1d06d4
    ax = memoryAGet16(ds, 0x20d04f);
    ebx = memoryAGet32(ds, 0x20d0c7);
    ecx = memoryAGet32(ds, 0x20d0cb);
    dx = memoryAGet16(ds, 0x20d085);
    ebp = memoryAGet32(ds, 0x20d09b);
    memoryASet32(ds, 0x20e7fd, ebp);
    sub_1d091e();
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d0711;
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) + 0x0002);
loc_1d0711: // 0160:1d0711
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) + 0x0001);
    goto loc_1d0763;
    // gap 3 bytes
loc_1d071e: // 0160:1d071e
    ax = memoryAGet16(ds, 0x20d051);
    ebx = memoryAGet32(ds, 0x20d0cf);
    ecx = memoryAGet32(ds, 0x20d0d3);
    dx = memoryAGet16(ds, 0x20d087);
    ebp = memoryAGet32(ds, 0x20d09f);
    memoryASet32(ds, 0x20e7fd, ebp);
    sub_1d091e();
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d075b;
    memoryASet16(ds, 0x20ce9b, memoryAGet16(ds, 0x20ce9b) + 0x0002);
loc_1d075b: // 0160:1d075b
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) - 0x0001);
loc_1d0763: // 0160:1d0763
    ax = 0x0001;
    esi = 0x0020d0ff;
    edi = 0x0020d111;
    ecx = 0x00000008;
loc_1d0776: // 0160:1d0776
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, edi, ax);
    esi += 0x00000002;
    edi += 0x00000002;
    if (--ecx)
        goto loc_1d0776;
    bp = 0;
    memoryASet16(ds, 0x20d7a5, bp);
    memoryASet16(ds, 0x20d7a9, bp);
    memoryASet16(ds, 0x20d7ad, bp);
    memoryASet16(ds, 0x20d7af, bp);
    esi = 0x0020d221;
    ecx = 0x00000008;
loc_1d07ad: // 0160:1d07ad
    memoryASet16(ds, esi, 0x0000);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1d07ad;
    memoryASet16(ds, 0x20d7b1, 0x000a);
    goto loc_1d091d;
loc_1d07c5: // 0160:1d07c5
    ax = memoryAGet16(ds, 0x20d7a7);
    if (ax)
        goto loc_1d0820;
    ax = memoryAGet16(ds, 0x20cf73);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf73, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d07f4;
    memoryASet16(ds, 0x20cf85, ax);
loc_1d07f4: // 0160:1d07f4
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1d091d;
    if (memoryAGet16(ds, 0x20d06f) & 0xffff)
        goto loc_1d091d;
    memoryASet16(ds, 0x20d06f, 0x0014);
    goto loc_1d091d;
loc_1d0820: // 0160:1d0820
    if (ax != 0x0001)
        goto loc_1d0876;
    ax = memoryAGet16(ds, 0x20cf75);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf75, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d084a;
    memoryASet16(ds, 0x20cf87, ax);
loc_1d084a: // 0160:1d084a
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1d091d;
    if (memoryAGet16(ds, 0x20d071) & 0xffff)
        goto loc_1d091d;
    memoryASet16(ds, 0x20d071, 0x0014);
    goto loc_1d091d;
loc_1d0876: // 0160:1d0876
    if (ax != 0x0002)
        goto loc_1d08cc;
    ax = memoryAGet16(ds, 0x20cf77);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf77, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d08a0;
    memoryASet16(ds, 0x20cf89, ax);
loc_1d08a0: // 0160:1d08a0
    if (memoryAGet16(ds, 0x20d061) & 0xffff)
        goto loc_1d091d;
    if (memoryAGet16(ds, 0x20d073) & 0xffff)
        goto loc_1d091d;
    memoryASet16(ds, 0x20d073, 0x0014);
    goto loc_1d091d;
    // gap 3 bytes
loc_1d08cc: // 0160:1d08cc
    if (ax != 0x0003)
        goto loc_1d091d;
    ax = memoryAGet16(ds, 0x20cf79);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf79, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d08f6;
    memoryASet16(ds, 0x20cf8b, ax);
loc_1d08f6: // 0160:1d08f6
    if (memoryAGet16(ds, 0x20d063) & 0xffff)
        goto loc_1d091d;
    if (memoryAGet16(ds, 0x20d075) & 0xffff)
        goto loc_1d091d;
    memoryASet16(ds, 0x20d075, 0x0014);
loc_1d091d: // 0160:1d091d
    esp += 4;
    return;
    // gap 94 bytes
loc_1d097c: // 0160:1d097c
    bx = memoryAGet16(ds, 0x20d7a5);
    if (!bx)
        goto loc_1d0c94;
    if (memoryAGet16(ds, 0x20d7a5) != 0x0259)
        goto loc_1d09ba;
    memoryASet16(ds, 0x20ee31, memoryAGet16(ds, 0x20ee31) + 0x0001);
    esi = 0x0020cf85;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7a7);
    ax <<= 1;
    memoryASet16(ds, esi + eax, 0x0034);
    goto loc_1d0c94;
loc_1d09ba: // 0160:1d09ba
    if (memoryAGet16(ds, 0x20d7a5) != 0x02bd)
        goto loc_1d0ba3;
    ax = 0x0033;
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    ax = memoryAGet16(ds, 0x20d7a9);
    if (ax == 0x0001)
        goto loc_1d0a23;
    if (ax == 0x0002)
        goto loc_1d0a19;
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) + 0x0001);
    goto loc_1d0a2b;
loc_1d0a19: // 0160:1d0a19
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) + 0x0001);
    goto loc_1d0a2b;
loc_1d0a23: // 0160:1d0a23
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) + 0x0001);
loc_1d0a2b: // 0160:1d0a2b
    ax = memoryAGet16(ds, 0x20d7a7);
    if (ax == 0x0002)
        goto loc_1d0afd;
    if (ax == 0x0001)
        goto loc_1d0a9f;
    ax = memoryAGet16(ds, 0x20d04b);
    memoryASet16(ds, 0x20d04d, ax);
    memoryASet16(ds, 0x20d04f, ax);
    eax = memoryAGet32(ds, 0x20d0b7);
    memoryASet32(ds, 0x20d0bf, eax);
    memoryASet32(ds, 0x20d0c7, eax);
    eax = memoryAGet32(ds, 0x20d0bb);
    memoryASet32(ds, 0x20d0c3, eax);
    memoryASet32(ds, 0x20d0cb, eax);
    ax = memoryAGet16(ds, 0x20d081);
    memoryASet16(ds, 0x20d083, ax);
    memoryASet16(ds, 0x20d085, ax);
    eax = memoryAGet32(ds, 0x20d093);
    memoryASet32(ds, 0x20d097, eax);
    memoryASet32(ds, 0x20d09b, eax);
    memoryASet16(ds, 0x20ce95, memoryAGet16(ds, 0x20ce95) - 0x0001);
    goto loc_1d0b5b;
loc_1d0a9f: // 0160:1d0a9f
    ax = memoryAGet16(ds, 0x20d04d);
    memoryASet16(ds, 0x20d04b, ax);
    memoryASet16(ds, 0x20d04f, ax);
    eax = memoryAGet32(ds, 0x20d0bf);
    memoryASet32(ds, 0x20d0b7, eax);
    memoryASet32(ds, 0x20d0c7, eax);
    eax = memoryAGet32(ds, 0x20d0c3);
    memoryASet32(ds, 0x20d0bb, eax);
    memoryASet32(ds, 0x20d0cb, eax);
    ax = memoryAGet16(ds, 0x20d083);
    memoryASet16(ds, 0x20d081, ax);
    memoryASet16(ds, 0x20d085, ax);
    eax = memoryAGet32(ds, 0x20d097);
    memoryASet32(ds, 0x20d093, eax);
    memoryASet32(ds, 0x20d09b, eax);
    memoryASet16(ds, 0x20ce97, memoryAGet16(ds, 0x20ce97) - 0x0001);
    goto loc_1d0b5b;
    // gap 3 bytes
loc_1d0afd: // 0160:1d0afd
    ax = memoryAGet16(ds, 0x20d04f);
    memoryASet16(ds, 0x20d04d, ax);
    memoryASet16(ds, 0x20d04b, ax);
    eax = memoryAGet32(ds, 0x20d0c7);
    memoryASet32(ds, 0x20d0bf, eax);
    memoryASet32(ds, 0x20d0b7, eax);
    eax = memoryAGet32(ds, 0x20d0cb);
    memoryASet32(ds, 0x20d0c3, eax);
    memoryASet32(ds, 0x20d0bb, eax);
    ax = memoryAGet16(ds, 0x20d085);
    memoryASet16(ds, 0x20d083, ax);
    memoryASet16(ds, 0x20d081, ax);
    eax = memoryAGet32(ds, 0x20d09b);
    memoryASet32(ds, 0x20d097, eax);
    memoryASet32(ds, 0x20d093, eax);
    memoryASet16(ds, 0x20ce99, memoryAGet16(ds, 0x20ce99) - 0x0001);
    goto loc_1d0b5b;
    // gap 3 bytes
loc_1d0b5b: // 0160:1d0b5b
    ax = 0x0001;
    memoryASet16(ds, 0x20d0ff, ax);
    memoryASet16(ds, 0x20d101, ax);
    memoryASet16(ds, 0x20d103, ax);
    memoryASet16(ds, 0x20d111, ax);
    memoryASet16(ds, 0x20d113, ax);
    memoryASet16(ds, 0x20d115, ax);
    memoryASet16(ds, 0x20d7a5, 0x0000);
    memoryASet16(ds, 0x20d7a9, 0x0000);
    memoryASet16(ds, 0x20d7b1, 0x000a);
    goto loc_1d0c94;
loc_1d0ba3: // 0160:1d0ba3
    ax = memoryAGet16(ds, 0x20d7a7);
    if (ax)
        goto loc_1d0bfe;
    ax = memoryAGet16(ds, 0x20cf73);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf73, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d0bd2;
    memoryASet16(ds, 0x20cf85, ax);
loc_1d0bd2: // 0160:1d0bd2
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1d0c94;
    if (memoryAGet16(ds, 0x20d06f) & 0xffff)
        goto loc_1d0c94;
    memoryASet16(ds, 0x20d06f, 0x0014);
    goto loc_1d0c94;
loc_1d0bfe: // 0160:1d0bfe
    if (ax != 0x0001)
        goto loc_1d0c49;
    ax = memoryAGet16(ds, 0x20cf75);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf75, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d0c28;
    memoryASet16(ds, 0x20cf87, ax);
loc_1d0c28: // 0160:1d0c28
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1d0c94;
    if (memoryAGet16(ds, 0x20d071) & 0xffff)
        goto loc_1d0c94;
    memoryASet16(ds, 0x20d071, 0x0014);
    goto loc_1d0c94;
loc_1d0c49: // 0160:1d0c49
    if (ax != 0x0002)
        goto loc_1d0c94;
    ax = memoryAGet16(ds, 0x20cf77);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf77, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d0c73;
    memoryASet16(ds, 0x20cf89, ax);
loc_1d0c73: // 0160:1d0c73
    if (memoryAGet16(ds, 0x20d061) & 0xffff)
        goto loc_1d0c94;
    if (memoryAGet16(ds, 0x20d073) & 0xffff)
        goto loc_1d0c94;
    memoryASet16(ds, 0x20d073, 0x0014);
    goto loc_1d0c94;
loc_1d0c94: // 0160:1d0c94
    esp += 4;
    return;
loc_1d0c95: // 0160:1d0c95
    bx = memoryAGet16(ds, 0x20d7a5);
    if (!bx)
        goto loc_1d0dd9;
    if (memoryAGet16(ds, 0x20d7a5) != 0x0259)
        goto loc_1d0ccb;
    esi = 0x0020cf85;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7a7);
    ax <<= 1;
    memoryASet16(ds, esi + eax, 0x0034);
    goto loc_1d0dd9;
loc_1d0ccb: // 0160:1d0ccb
    if (memoryAGet16(ds, 0x20d7a5) != 0x02bd)
        goto loc_1d0d3a;
    ax = 0x0033;
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    if (memoryAGet16(ds, 0x20d7a7) & 0xffff)
        goto loc_1d0d0b;
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) + 0x0001);
    goto loc_1d0d13;
loc_1d0d0b: // 0160:1d0d0b
    memoryASet16(ds, 0x20ce93, memoryAGet16(ds, 0x20ce93) - 0x0001);
loc_1d0d13: // 0160:1d0d13
    ax = 0x0001;
    memoryASet16(ds, 0x20d0ff, ax);
    memoryASet16(ds, 0x20d101, ax);
    memoryASet16(ds, 0x20d7a5, 0x0000);
    memoryASet16(ds, 0x20d7b1, 0x000a);
    goto loc_1d0dd9;
loc_1d0d3a: // 0160:1d0d3a
    ax = memoryAGet16(ds, 0x20d7a7);
    if (ax)
        goto loc_1d0d8e;
    ax = memoryAGet16(ds, 0x20cf73);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf73, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d0d69;
    memoryASet16(ds, 0x20cf85, ax);
loc_1d0d69: // 0160:1d0d69
    if (memoryAGet16(ds, 0x20d05d) & 0xffff)
        goto loc_1d0dd9;
    if (memoryAGet16(ds, 0x20d06f) & 0xffff)
        goto loc_1d0dd9;
    memoryASet16(ds, 0x20d06f, 0x0014);
    goto loc_1d0dd9;
loc_1d0d8e: // 0160:1d0d8e
    if (ax != 0x0001)
        goto loc_1d0dd9;
    ax = memoryAGet16(ds, 0x20cf75);
    ax += 0x0001;
    ax &= 0x001f;
    memoryASet16(ds, 0x20cf75, ax);
    if ((short)memoryAGet16(ds, 0x20d7a5) >= (short)0x0014)
        goto loc_1d0db8;
    memoryASet16(ds, 0x20cf87, ax);
loc_1d0db8: // 0160:1d0db8
    if (memoryAGet16(ds, 0x20d05f) & 0xffff)
        goto loc_1d0dd9;
    if (memoryAGet16(ds, 0x20d071) & 0xffff)
        goto loc_1d0dd9;
    memoryASet16(ds, 0x20d071, 0x0014);
    goto loc_1d0dd9;
loc_1d0dd9: // 0160:1d0dd9
    esp += 4;
    return;
}
void sub_1d091e() // 0160:1d091e +long
{
    esp -= 4;
    esi = 0x0020d04b;
    edi = 0x0020d0b7;
    ebp = ecx;
    ecx = 0x00000008;
loc_1d092f: // 0160:1d092f
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    memoryASet32(ds, edi, ebx);
    edi += 0x00000004;
    memoryASet32(ds, edi, ebp);
    edi += 0x00000004;
    if (--ecx)
        goto loc_1d092f;
    memoryASet16(ds, 0x20d081, dx);
    memoryASet16(ds, 0x20d083, dx);
    memoryASet16(ds, 0x20d085, dx);
    memoryASet16(ds, 0x20d087, dx);
    ebp = memoryAGet32(ds, 0x20e7fd);
    memoryASet32(ds, 0x20d093, ebp);
    memoryASet32(ds, 0x20d097, ebp);
    memoryASet32(ds, 0x20d09b, ebp);
    memoryASet32(ds, 0x20d09f, ebp);
    esp += 4;
}
void sub_1d0dda() // 0160:1d0dda +long
{
    esp -= 4;
    goto loc_1d0dda;
loc_1b19ac: // 0160:1b19ac
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0000);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 123602 bytes
loc_1cfcb2: // 0160:1cfcb2
    if ((short)ax < (short)0x012c)
        goto loc_1cfcc3;
    ax -= 0x0140;
    ax += memoryAGet16(ds, 0x20ee53);
loc_1cfcc3: // 0160:1cfcc3
    if ((short)bx < (short)0x012c)
        goto loc_1cfcd6;
    bx -= 0x00e0;
    bx += memoryAGet16(ds, 0x20ee55);
loc_1cfcd6: // 0160:1cfcd6
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    cl = memoryAGet(ds, esi + 1);
    memoryASet(ds, 0x20ceb7, cl);
    cl = memoryAGet(ds, esi + 2);
    memoryASet(ds, 0x20ceb9, cl);
    cl = memoryAGet(ds, esi + 3);
    memoryASet(ds, 0x20cebb, cl);
    cl = memoryAGet(ds, esi + 4);
    memoryASet(ds, 0x20cebd, cl);
    ecx = 0;
    cl = memoryAGet(ds, esi);
    cx += 0x0005;
    dx = 0x0010;
    ax += 0x0008;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20ceb7);
    cx += 0x0005;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x001c;
    bx = memoryAGet16(ds, 0x20ceb5);
    dx = 0x0010;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20ceb9);
    cx += 0x0005;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0028;
    bx = memoryAGet16(ds, 0x20ceb5);
    dx = 0x0010;
    bx += 0x0008;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20cebb);
    cx += 0x0010;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0030;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx++;
    dx = 0x0010;
    bx += 0x0004;
    sub_1b19ac();
    cx = 0;
    cl = memoryAGet(ds, 0x20cebd);
    cx += 0x0010;
    cx &= 0x00fe;
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0037;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx++;
    dx = 0x0010;
    bx += 0x0004;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    bx += 0x0006;
    ax += 0x0010;
    cx = 0x000f;
    dx = 0x0010;
    bx += 0x0004;
    goto loc_1b19ac;
    // gap 4063 bytes
loc_1d0dda: // 0160:1d0dda
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d14c7;
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d1850;
    ax = memoryAGet16(ds, 0x20d7f5);
    if (ax == 0x0001)
        goto loc_1d1583;
    if (ax == 0x0002)
        goto loc_1d14c7;
    if (ax == 0x0003)
        goto loc_1d128d;
    ax = memoryAGet16(ds, 0x20ce95);
    memoryASet16(ds, 0x20e809, ax);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d0e96;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0001)
        goto loc_1d0e8e;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0005)
        goto loc_1d0e8e;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0001)
        goto loc_1d0e84;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0001)
        goto loc_1d0e7a;
    if (memoryAGet16(ds, 0x20d7af) != 0x0001)
        goto loc_1d0e96;
    if (memoryAGet16(ds, 0x20e809) == 0x000b)
        goto loc_1d0e96;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0001);
    goto loc_1d0e96;
loc_1d0e7a: // 0160:1d0e7a
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    goto loc_1d0e96;
loc_1d0e84: // 0160:1d0e84
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0002);
    goto loc_1d0e96;
loc_1d0e8e: // 0160:1d0e8e
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0002);
loc_1d0e96: // 0160:1d0e96
    if ((short)memoryAGet16(ds, 0x20e809) <= (short)0x000c)
        goto loc_1d0ea9;
    memoryASet16(ds, 0x20e809, 0x000c);
loc_1d0ea9: // 0160:1d0ea9
    bp = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20ceb3, bp);
    bx = 0x00c2;
loc_1d0ebb: // 0160:1d0ebb
    ax = memoryAGet16(ds, 0x20ceb3);
    if (!ax)
        goto loc_1d0efd;
    if ((short)ax < 0)
        goto loc_1d0efd;
    push32(ebx);
    ax = 0x009a;
    ecx = 0x00000005;
    if ((short)memoryAGet16(ds, 0x20ceb3) >= (short)0x0002)
        goto loc_1d0ee4;
    cx += 0x001c;
    bx += 0x0004;
loc_1d0ee4: // 0160:1d0ee4
    edx = 0x00000010;
    sub_1b19ac();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0002);
    bx -= 0x000a;
    goto loc_1d0ebb;
loc_1d0efd: // 0160:1d0efd
    bp = memoryAGet16(ds, 0x20ce97);
    memoryASet16(ds, 0x20e809, bp);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d0f79;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0002)
        goto loc_1d0f71;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0006)
        goto loc_1d0f71;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0002)
        goto loc_1d0f67;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0002)
        goto loc_1d0f5d;
    if (memoryAGet16(ds, 0x20d7af) != 0x0002)
        goto loc_1d0f79;
    if (memoryAGet16(ds, 0x20e809) == 0x000b)
        goto loc_1d0f79;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0001);
    goto loc_1d0f79;
loc_1d0f5d: // 0160:1d0f5d
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    goto loc_1d0f79;
loc_1d0f67: // 0160:1d0f67
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0002);
    goto loc_1d0f79;
loc_1d0f71: // 0160:1d0f71
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0002);
loc_1d0f79: // 0160:1d0f79
    if ((short)memoryAGet16(ds, 0x20e809) <= (short)0x000c)
        goto loc_1d0f8c;
    memoryASet16(ds, 0x20e809, 0x000c);
loc_1d0f8c: // 0160:1d0f8c
    bp = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20ceb3, bp);
    bx = 0x00c2;
loc_1d0f9e: // 0160:1d0f9e
    ax = memoryAGet16(ds, 0x20ceb3);
    if (!ax)
        goto loc_1d0fee;
    if ((short)ax < 0)
        goto loc_1d0fee;
    push32(ebx);
    ax = 0x01a8;
    ecx = 0x00000004;
    if ((short)memoryAGet16(ds, 0x20ceb3) >= (short)0x0002)
        goto loc_1d0fc7;
    cx += 0x001c;
    bx += 0x0004;
loc_1d0fc7: // 0160:1d0fc7
    edx = 0x00000010;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    ax -= bp;
    sub_1b19ac();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0002);
    bx -= 0x000a;
    goto loc_1d0f9e;
loc_1d0fee: // 0160:1d0fee
    memoryASet16(ds, 0x20ce8f, 0x0003);
    ax = memoryAGet16(ds, 0x20ce99);
    memoryASet16(ds, 0x20e809, ax);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d1071;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0003)
        goto loc_1d1069;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0007)
        goto loc_1d1069;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0003)
        goto loc_1d105f;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0003)
        goto loc_1d1055;
    if (memoryAGet16(ds, 0x20d7af) != 0x0003)
        goto loc_1d1071;
    if (memoryAGet16(ds, 0x20e809) == 0x000b)
        goto loc_1d1071;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0001);
    goto loc_1d1071;
loc_1d1055: // 0160:1d1055
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    goto loc_1d1071;
loc_1d105f: // 0160:1d105f
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0002);
    goto loc_1d1071;
loc_1d1069: // 0160:1d1069
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0002);
loc_1d1071: // 0160:1d1071
    if ((short)memoryAGet16(ds, 0x20e809) <= (short)0x000c)
        goto loc_1d1084;
    memoryASet16(ds, 0x20e809, 0x000c);
loc_1d1084: // 0160:1d1084
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20ceb3, ax);
    bx = 0x0144;
loc_1d1094: // 0160:1d1094
    ax = memoryAGet16(ds, 0x20ceb3);
    if (!ax)
        goto loc_1d10e8;
    if ((short)ax < 0)
        goto loc_1d10e8;
    push32(ebx);
    ax = 0x009a;
    ecx = 0x00000004;
    if ((short)memoryAGet16(ds, 0x20ceb3) >= (short)0x0002)
        goto loc_1d10bd;
    cx += 0x001c;
    bx += 0x0004;
loc_1d10bd: // 0160:1d10bd
    edx = 0x00000010;
    bx += 0x0008;
    bp = 0x00e0;
    bp -= memoryAGet16(ds, 0x20ee55);
    bx -= bp;
    sub_1b19ac();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0002);
    bx -= 0x000a;
    goto loc_1d1094;
loc_1d10e8: // 0160:1d10e8
    memoryASet16(ds, 0x20ce8f, 0x0002);
    ax = memoryAGet16(ds, 0x20ce9b);
    memoryASet16(ds, 0x20e809, ax);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d116b;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0004)
        goto loc_1d1163;
    if (memoryAGet16(ds, 0x20d7ab) == 0x0008)
        goto loc_1d1163;
    if (memoryAGet16(ds, 0x20d7a9) == 0x0004)
        goto loc_1d1159;
    if (memoryAGet16(ds, 0x20d7ad) == 0x0004)
        goto loc_1d114f;
    if (memoryAGet16(ds, 0x20d7af) != 0x0004)
        goto loc_1d116b;
    if (memoryAGet16(ds, 0x20e809) == 0x000b)
        goto loc_1d116b;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0001);
    goto loc_1d116b;
loc_1d114f: // 0160:1d114f
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    goto loc_1d116b;
loc_1d1159: // 0160:1d1159
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0002);
    goto loc_1d116b;
loc_1d1163: // 0160:1d1163
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) + 0x0002);
loc_1d116b: // 0160:1d116b
    if ((short)memoryAGet16(ds, 0x20e809) <= (short)0x000c)
        goto loc_1d117e;
    memoryASet16(ds, 0x20e809, 0x000c);
loc_1d117e: // 0160:1d117e
    ax = memoryAGet16(ds, 0x20e809);
    memoryASet16(ds, 0x20ceb3, ax);
    bx = 0x0144;
loc_1d118e: // 0160:1d118e
    ax = memoryAGet16(ds, 0x20ceb3);
    if (!ax)
        goto loc_1d11f0;
    if ((short)ax < 0)
        goto loc_1d11f0;
    push32(ebx);
    ax = 0x01a8;
    ecx = 0x00000005;
    if ((short)memoryAGet16(ds, 0x20ceb3) >= (short)0x0002)
        goto loc_1d11b7;
    cx += 0x001c;
    bx += 0x0004;
loc_1d11b7: // 0160:1d11b7
    edx = 0x00000010;
    bx += 0x0008;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    ax -= bp;
    bp = 0x00e0;
    bp -= memoryAGet16(ds, 0x20ee55);
    bx -= bp;
    sub_1b19ac();
    ebx = pop32();
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0002);
    bx -= 0x000a;
    goto loc_1d118e;
loc_1d11f0: // 0160:1d11f0
    memoryASet16(ds, 0x20ce8f, 0xffff);
    ax = 0x009a;
    bx = 0x00ae;
    ecx = 0x00000003;
    edx = 0x00000010;
    sub_1b19ac();
    ax = 0x01a8;
    bx = 0x00ae;
    ecx = 0x00000003;
    edx = 0x00000010;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    ax -= bp;
    sub_1b19ac();
    ax = 0x009a;
    bx = 0x0138;
    ecx = 0x00000003;
    edx = 0x00000010;
    bp = 0x00e0;
    bp -= memoryAGet16(ds, 0x20ee55);
    bx -= bp;
    sub_1b19ac();
    ax = 0x01a8;
    bx = 0x0138;
    ecx = 0x00000003;
    edx = 0x00000010;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    ax -= bp;
    bp = 0x00e0;
    bp -= memoryAGet16(ds, 0x20ee55);
    bx -= bp;
    goto loc_1b19ac;
loc_1d128d: // 0160:1d128d
    ax = memoryAGet16(ds, 0x20ce95);
    memoryASet16(ds, 0x20ceb3, ax);
    if (memoryAGet16(ds, 0x20d7ab) == 0x0001)
        goto loc_1d12c3;
    if (memoryAGet16(ds, 0x20d7a9) != 0x0001)
        goto loc_1d12d7;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d12d7;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    goto loc_1d12d7;
loc_1d12c3: // 0160:1d12c3
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d12d7;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0001);
loc_1d12d7: // 0160:1d12d7
    bx = 0x009a;
    bp = memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d12f8;
    if ((short)bp <= (short)0x0008)
        goto loc_1d12f1;
    bp = 0x0008;
loc_1d12f1: // 0160:1d12f1
    bp <<= 3;
    bx += bp;
loc_1d12f8: // 0160:1d12f8
    bp = 0x0008;
    bp -= memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d1331;
    if ((short)bp < 0)
        goto loc_1d1331;
    bp -= 0x0001;
loc_1d130b: // 0160:1d130b
    push32(ebx);
    push32(ebp);
    ax = 0x009a;
    cx = 0x0021;
    edx = 0x00000010;
    ax -= 0x0008;
    bx -= 0x0008;
    sub_1b19ac();
    ebp = pop32();
    ebx = pop32();
    bx += 0x0008;
    bp--;
    if ((short)bp >= 0)
        goto loc_1d130b;
loc_1d1331: // 0160:1d1331
    ax = memoryAGet16(ds, 0x20ce97);
    memoryASet16(ds, 0x20ceb3, ax);
    if (memoryAGet16(ds, 0x20d7ab) == 0x0002)
        goto loc_1d1367;
    if (memoryAGet16(ds, 0x20d7a9) != 0x0002)
        goto loc_1d137b;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d137b;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    goto loc_1d137b;
loc_1d1367: // 0160:1d1367
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d137b;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0001);
loc_1d137b: // 0160:1d137b
    bx = 0x009a;
    bp = memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d139c;
    if ((short)bp <= (short)0x0008)
        goto loc_1d1395;
    bp = 0x0008;
loc_1d1395: // 0160:1d1395
    bp <<= 3;
    bx += bp;
loc_1d139c: // 0160:1d139c
    bp = 0x0008;
    bp -= memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d13d4;
    if ((short)bp < 0)
        goto loc_1d13d4;
    bp -= 0x0001;
loc_1d13af: // 0160:1d13af
    push32(ebx);
    push32(ebp);
    ax = 0x00a8;
    cx = 0x0020;
    dx = 0x0010;
    ax -= 0x0008;
    bx -= 0x0008;
    sub_1b19ac();
    ebp = pop32();
    ebx = pop32();
    bx += 0x0008;
    bp--;
    if ((short)bp >= 0)
        goto loc_1d13af;
loc_1d13d4: // 0160:1d13d4
    ax = memoryAGet16(ds, 0x20ce99);
    memoryASet16(ds, 0x20ceb3, ax);
    if (memoryAGet16(ds, 0x20d7ab) == 0x0003)
        goto loc_1d140a;
    if (memoryAGet16(ds, 0x20d7a9) != 0x0003)
        goto loc_1d141e;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d141e;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    goto loc_1d141e;
loc_1d140a: // 0160:1d140a
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d141e;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0001);
loc_1d141e: // 0160:1d141e
    bx = 0x009a;
    bp = memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d143f;
    if ((short)bp <= (short)0x0008)
        goto loc_1d1438;
    bp = 0x0008;
loc_1d1438: // 0160:1d1438
    bp <<= 3;
    bx += bp;
loc_1d143f: // 0160:1d143f
    memoryASet16(ds, 0x20ce8f, 0x0003);
    bp = 0x0008;
    bp -= memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d147e;
    if ((short)bp < 0)
        goto loc_1d147e;
    bp--;
loc_1d1459: // 0160:1d1459
    push32(ebx);
    push32(ebp);
    ax = 0x00b6;
    cx = 0x0021;
    dx = 0x0010;
    ax -= 0x0008;
    bx -= 0x0008;
    sub_1b19ac();
    ebp = pop32();
    ebx = pop32();
    bx += 0x0008;
    bp--;
    if ((short)bp >= 0)
        goto loc_1d1459;
loc_1d147e: // 0160:1d147e
    ax = 0x0092;
    bx = 0x00ae;
    cx = 0x0003;
    dx = 0x0010;
    sub_1b19ac();
    ax = 0x00a0;
    bx = 0x00ae;
    cx = 0x0003;
    dx = 0x0010;
    sub_1b19ac();
    ax = 0x00ae;
    bx = 0x00ae;
    cx = 0x0003;
    dx = 0x0010;
    sub_1b19ac();
    memoryASet16(ds, 0x20ce8f, 0xffff);
    esp += 4;
    return;
loc_1d14c7: // 0160:1d14c7
    bx = 0x0094;
    ax = memoryAGet16(ds, 0x20ce93);
    memoryASet16(ds, 0x20ceb3, ax);
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1d1527;
    if (memoryAGet16(ds, 0x20d081) & 0xffff)
        goto loc_1d14f8;
    if (!(memoryAGet16(ds, 0x20d7b5) & 0xffff))
        goto loc_1d1527;
loc_1d14f8: // 0160:1d14f8
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0006;
    if (!ax)
        goto loc_1d1527;
    ax = memoryAGet16(ds, 0x20d7a7);
    if (!ax)
        goto loc_1d151f;
    if (ax == 0x0002)
        goto loc_1d151f;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0001);
    goto loc_1d1527;
loc_1d151f: // 0160:1d151f
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
loc_1d1527: // 0160:1d1527
    bp = memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d1554;
    if ((short)bp < 0)
        goto loc_1d1554;
    bp--;
loc_1d1537: // 0160:1d1537
    push32(ebx);
    push32(ebp);
    ax = 0x0094;
    cx = 0x0021;
    dx = 0x0010;
    sub_1b19ac();
    ebp = pop32();
    ebx = pop32();
    bx += 0x000a;
    bp--;
    if ((short)bp >= 0)
        goto loc_1d1537;
loc_1d1554: // 0160:1d1554
    bp = 0x0008;
    bp -= memoryAGet16(ds, 0x20ceb3);
    if (!bp)
        goto loc_1d1582;
    if ((short)bp < 0)
        goto loc_1d1582;
    bp--;
loc_1d1565: // 0160:1d1565
    push32(ebx);
    push32(ebp);
    ax = 0x0094;
    cx = 0x0020;
    dx = 0x0010;
    sub_1b19ac();
    ebp = pop32();
    ebx = pop32();
    bx += 0x000a;
    bp--;
    if ((short)bp >= 0)
        goto loc_1d1565;
loc_1d1582: // 0160:1d1582
    esp += 4;
    return;
loc_1d1583: // 0160:1d1583
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax != 0x0005)
        goto loc_1d17a0;
    bx = 0x000a;
    bx -= memoryAGet16(ds, 0x20d081);
    ebx = rol32(ebx, 0x10);
    bx = memoryAGet16(ds, 0x20d04b);
    bx &= 0x00ff;
    bx <<= 2;
    bx += 0x0003;
    cx = 0x000a;
    cx -= memoryAGet16(ds, 0x20d083);
    ecx = rol32(ecx, 0x10);
    cx = memoryAGet16(ds, 0x20d04d);
    cx &= 0x00ff;
    cx <<= 2;
    cx += 0x0002;
    dx = 0x000a;
    dx -= memoryAGet16(ds, 0x20d085);
    edx = rol32(edx, 0x10);
    dx = memoryAGet16(ds, 0x20d04f);
    dx &= 0x00ff;
    dx <<= 2;
    dx += 0x0001;
    ax = 0x000a;
    ax -= memoryAGet16(ds, 0x20d087);
    eax = rol32(eax, 0x10);
    ax = memoryAGet16(ds, 0x20d051);
    ax &= 0x00ff;
    ax <<= 2;
    memoryASet32(ds, 0x20e7fd, eax);
    esi = 0x0020d1f7;
    edi = 0x00989680;
    bp = 0x0004;
loc_1d162c: // 0160:1d162c
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1d1663;
    ax = memoryAGet16(ds, esi);
    if (ax == 0x0004)
        goto loc_1d1654;
    if (ax == 0x0003)
        goto loc_1d1650;
    if (ax == 0x0002)
        goto loc_1d164c;
    ebx += edi;
    goto loc_1d165a;
loc_1d164c: // 0160:1d164c
    ecx += edi;
    goto loc_1d165a;
loc_1d1650: // 0160:1d1650
    edx += edi;
    goto loc_1d165a;
loc_1d1654: // 0160:1d1654
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) + edi);
loc_1d165a: // 0160:1d165a
    esi += 0x00000002;
    edi >>= 1;
    bp--;
    if (bp)
        goto loc_1d162c;
loc_1d1663: // 0160:1d1663
    memoryASet32(ds, 0x20cecf, ebx);
    memoryASet32(ds, 0x20ced3, ecx);
    memoryASet32(ds, 0x20ced7, edx);
    ebp = memoryAGet32(ds, 0x20e7fd);
    memoryASet32(ds, 0x20cedb, ebp);
    memoryASet32(ds, 0x20cedf, ebx);
    memoryASet32(ds, 0x20cee3, ecx);
    memoryASet32(ds, 0x20cee7, edx);
    memoryASet32(ds, 0x20ceeb, ebp);
loc_1d1699: // 0160:1d1699
    dx = 0;
    ecx = 0x00000003;
    esi = 0x0020cecf;
    edi = 0x0020ced3;
loc_1d16ab: // 0160:1d16ab
    eax = memoryAGet32(ds, esi);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, edi))
        goto loc_1d16c0;
loc_1d16b1: // 0160:1d16b1
    esi += 0x00000004;
    edi += 0x00000004;
    if (--ecx)
        goto loc_1d16ab;
    if (!dx)
        goto loc_1d16cc;
    if (dx)
        goto loc_1d1699;
loc_1d16c0: // 0160:1d16c0
    eax = memoryAGet32(ds, edi);
    ebp = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, ebp);
    memoryASet32(ds, esi, eax);
    dx++;
    goto loc_1d16b1;
loc_1d16cc: // 0160:1d16cc
    eax = 0;
    ebx = memoryAGet32(ds, 0x20cedf);
    if (ebx == memoryAGet32(ds, 0x20cecf))
        goto loc_1d16fb;
    eax = 0x00000002;
    if (ebx == memoryAGet32(ds, 0x20ced3))
        goto loc_1d16fb;
    eax = 0x00000004;
    if (ebx == memoryAGet32(ds, 0x20ced7))
        goto loc_1d16fb;
    eax = 0x00000006;
loc_1d16fb: // 0160:1d16fb
    memoryASet16(ds, 0x20d16d, ax);
    eax = 0;
    ebx = memoryAGet32(ds, 0x20cee3);
    if (ebx == memoryAGet32(ds, 0x20cecf))
        goto loc_1d1730;
    eax = 0x00000002;
    if (ebx == memoryAGet32(ds, 0x20ced3))
        goto loc_1d1730;
    eax = 0x00000004;
    if (ebx == memoryAGet32(ds, 0x20ced7))
        goto loc_1d1730;
    eax = 0x00000006;
loc_1d1730: // 0160:1d1730
    memoryASet16(ds, 0x20d16f, ax);
    eax = 0;
    ebx = memoryAGet32(ds, 0x20cee7);
    if (ebx == memoryAGet32(ds, 0x20cecf))
        goto loc_1d1765;
    eax = 0x00000002;
    if (ebx == memoryAGet32(ds, 0x20ced3))
        goto loc_1d1765;
    eax = 0x00000004;
    if (ebx == memoryAGet32(ds, 0x20ced7))
        goto loc_1d1765;
    eax = 0x00000006;
loc_1d1765: // 0160:1d1765
    memoryASet16(ds, 0x20d171, ax);
    eax = 0;
    ebx = memoryAGet32(ds, 0x20ceeb);
    if (ebx == memoryAGet32(ds, 0x20cecf))
        goto loc_1d179a;
    eax = 0x00000002;
    if (ebx == memoryAGet32(ds, 0x20ced3))
        goto loc_1d179a;
    eax = 0x00000004;
    if (ebx == memoryAGet32(ds, 0x20ced7))
        goto loc_1d179a;
    eax = 0x00000006;
loc_1d179a: // 0160:1d179a
    memoryASet16(ds, 0x20d173, ax);
loc_1d17a0: // 0160:1d17a0
    ax = memoryAGet16(ds, 0x20d16d);
    esi = 0x00205078;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    ax = 0x0098;
    cx = 0x001b;
    dx = 0x0010;
    sub_1b19ac();
    ax = memoryAGet16(ds, 0x20d16f);
    esi = 0x00205078;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    ax = 0x0098;
    cx = 0x001a;
    dx = 0x0010;
    sub_1b19ac();
    memoryASet16(ds, 0x20ce8f, 0x0003);
    ax = memoryAGet16(ds, 0x20d171);
    esi = 0x00205078;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    ax = 0x0098;
    cx = 0x001b;
    dx = 0x0010;
    sub_1b19ac();
    memoryASet16(ds, 0x20ce8f, 0x0002);
    ax = memoryAGet16(ds, 0x20d173);
    esi = 0x00205078;
    eax &= 0x0000ffff;
    bx = memoryAGet16(ds, esi + eax);
    ax = 0x0098;
    cx = 0x001b;
    dx = 0x0010;
    sub_1b19ac();
    memoryASet16(ds, 0x20ce8f, 0xffff);
loc_1d184f: // 0160:1d184f
    esp += 4;
    return;
loc_1d1850: // 0160:1d1850
    if (memoryAGet16(ds, 0x20eea9) == 0x0001)
        goto loc_1d184f;
    if (memoryAGet16(ds, 0x20ec8d) == 0x0001)
        goto loc_1d1892;
    ax = 0x008c;
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x0060;
    cx = 0x0003;
    dx = 0x0010;
    sub_1b19e0();
    esi = 0x0020d787;
    ax = 0x008c;
    bx = 0x014a;
    goto loc_1cfcb2;
loc_1d1892: // 0160:1d1892
    ax = 0x008c;
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x0060;
    cx = 0x0004;
    dx = 0x0010;
    sub_1b19e0();
    esi = 0x0020d78d;
    ax = 0x008c;
    bx = 0x014a;
    goto loc_1cfcb2;
}
void sub_1d18c0() // 0160:1d18c0 +long
{
    esp -= 4;
    goto loc_1d18c0;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 130732 bytes
loc_1d18c0: // 0160:1d18c0
    bx = memoryAGet16(ds, 0x20d7b5);
    if (!bx)
        goto loc_1d198b;
    if (bx != 0x0001)
        goto loc_1d18ed;
    ax = 0x0137;
    sub_1b1715();
    al = 0x8b;
    sub_1b18a6();
    bx = memoryAGet16(ds, 0x20d7b5);
loc_1d18ed: // 0160:1d18ed
    if (!!(memoryAGet16(ds, 0x20d7b5) & 0xffff & 0x8000))
        goto loc_1d1900;
    memoryASet16(ds, 0x20d7b5, memoryAGet16(ds, 0x20d7b5) + 0x0004);
loc_1d1900: // 0160:1d1900
    bx = memoryAGet16(ds, 0x20d7b5);
    bx >>= 10;
    bx += 0x0028;
    if ((short)bx <= (short)0x003c)
        goto loc_1d1919;
    bx = 0x003c;
loc_1d1919: // 0160:1d1919
    al = 0x8b;
    ax = memoryAGet16(ds, 0x20d7a5);
    if (!ax)
        goto loc_1d1938;
    if ((short)bx >= (short)0x015c)
        goto loc_1d1938;
    bx = 0x0160;
    memoryASet16(ds, 0x20d7b5, bx);
loc_1d1938: // 0160:1d1938
    bx = memoryAGet16(ds, 0x20ee55);
    bx += 0x004c;
    ax = memoryAGet16(ds, 0x20d7b5);
    if ((short)ax <= (short)0x0094)
        goto loc_1d195f;
    if ((short)ax <= (short)0x015c)
        goto loc_1d195b;
    ax -= 0x00c8;
    goto loc_1d195f;
loc_1d195b: // 0160:1d195b
    ax = 0x0094;
loc_1d195f: // 0160:1d195f
    ax += 0x0060;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    bp >>= 1;
    ax -= bp;
    dx = 0;
    cx = 0x0025;
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1d198b;
    goto loc_1b19e0;
loc_1d198b: // 0160:1d198b
    esp += 4;
    return;
}
void sub_1d198c() // 0160:1d198c +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d7a5);
    if (!ax)
        goto loc_1d1d9a;
    if (ax != 0x0001)
        goto loc_1d1a8b;
    if (memoryAGet16(ds, 0x20d89f) != 0x0001)
        goto loc_1d19d0;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1d19d0;
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x012c;
    sub_1b1715();
    goto loc_1d1a72;
loc_1d19d0: // 0160:1d19d0
    if (memoryAGet16(ds, 0x20d7f5) != 0x0002)
        goto loc_1d1a1b;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1d19f0;
    if (memoryAGet16(ds, 0x20ce93) == 0x0002)
        goto loc_1d19fa;
    goto loc_1d1a1b;
loc_1d19f0: // 0160:1d19f0
    if (memoryAGet16(ds, 0x20ce93) != 0x0006)
        goto loc_1d1a1b;
loc_1d19fa: // 0160:1d19fa
    if (memoryAGet16(ds, 0x20d89f) == 0x0001)
        goto loc_1d1a72;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x0138;
    sub_1b1715();
    goto loc_1d1a72;
    // gap 3 bytes
loc_1d1a1b: // 0160:1d1a1b
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20ee9f);
    if ((short)ax > (short)0x012c)
        goto loc_1d1a42;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x013c;
    sub_1b1715();
    goto loc_1d1a72;
loc_1d1a42: // 0160:1d1a42
    if ((short)ax < (short)0x0258)
        goto loc_1d1a5c;
    sub_1b1c25();
    ax &= 0x0001;
    ax += 0x013e;
    sub_1b1715();
    goto loc_1d1a72;
loc_1d1a5c: // 0160:1d1a5c
    sub_1b1c25();
    if ((char)al > (char)0xc0)
        goto loc_1d1a72;
    ax &= 0x0003;
    ax += 0x0130;
    sub_1b1715();
loc_1d1a72: // 0160:1d1a72
    ax = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20ee9f, ax);
    al = 0xa6;
    sub_1b17b7();
    ax = memoryAGet16(ds, 0x20d7a5);
loc_1d1a8b: // 0160:1d1a8b
    memoryASet16(ds, 0x20d7a5, memoryAGet16(ds, 0x20d7a5) + 0x0004);
    bx = memoryAGet16(ds, 0x20ee55);
    bx >>= 1;
    bx += 0x0090;
    if ((short)ax <= (short)0x0094)
        goto loc_1d1acb;
    if ((short)ax <= (short)0x0154)
        goto loc_1d1ab4;
    ax -= 0x00c0;
    goto loc_1d1acb;
loc_1d1ab4: // 0160:1d1ab4
    ax = 0x0094;
    if (!(memoryAGet16(ds, 0x20d7b7) & 0xffff))
        goto loc_1d1acb;
    memoryASet16(ds, 0x20d7a5, memoryAGet16(ds, 0x20d7a5) - 0x0003);
loc_1d1acb: // 0160:1d1acb
    ax += 0x0068;
    dx = 0x0010;
    if (memoryAGet16(ds, 0x20d7b7) & 0xffff)
        goto loc_1d1ca7;
    if (memoryAGet16(ds, 0x20d7d5) & 0xffff)
        goto loc_1d1c4e;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1d1c4e;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1d1bea;
    cx = memoryAGet16(ds, 0x20ce95);
    if ((short)cx < 0)
        goto loc_1d1b42;
    if (cx < 0x000a)
        goto loc_1d1b42;
    if (!(memoryAGet16(ds, 0x20d7a7) & 0xffff))
        goto loc_1d1b34;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0004)
        goto loc_1d1b42;
loc_1d1b34: // 0160:1d1b34
    memoryASet16(ds, 0x20d7b7, 0x0001);
    goto loc_1d1ca7;
loc_1d1b42: // 0160:1d1b42
    cx = memoryAGet16(ds, 0x20ce97);
    if ((short)cx < 0)
        goto loc_1d1b76;
    if (cx < 0x000a)
        goto loc_1d1b76;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0001)
        goto loc_1d1b68;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0005)
        goto loc_1d1b76;
loc_1d1b68: // 0160:1d1b68
    memoryASet16(ds, 0x20d7b7, 0x0002);
    goto loc_1d1ca7;
loc_1d1b76: // 0160:1d1b76
    cx = memoryAGet16(ds, 0x20ce99);
    if ((short)cx < 0)
        goto loc_1d1baa;
    if (cx < 0x000a)
        goto loc_1d1baa;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0002)
        goto loc_1d1b9c;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0006)
        goto loc_1d1baa;
loc_1d1b9c: // 0160:1d1b9c
    memoryASet16(ds, 0x20d7b7, 0x0003);
    goto loc_1d1ca7;
loc_1d1baa: // 0160:1d1baa
    cx = memoryAGet16(ds, 0x20ce9b);
    if ((short)cx < 0)
        goto loc_1d1ca1;
    if (cx < 0x000a)
        goto loc_1d1ca1;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0003)
        goto loc_1d1bdc;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0007)
        goto loc_1d1ca1;
loc_1d1bdc: // 0160:1d1bdc
    memoryASet16(ds, 0x20d7b7, 0x0004);
    goto loc_1d1ca7;
loc_1d1bea: // 0160:1d1bea
    if (memoryAGet16(ds, 0x20ce95) != 0x0001)
        goto loc_1d1c0d;
    if (memoryAGet16(ds, 0x20d7a7) & 0xffff)
        goto loc_1d1c0d;
    memoryASet16(ds, 0x20d7b7, 0x0001);
    goto loc_1d1ca7;
loc_1d1c0d: // 0160:1d1c0d
    if (memoryAGet16(ds, 0x20ce97) != 0x0001)
        goto loc_1d1c2f;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1d1c2f;
    memoryASet16(ds, 0x20d7b7, 0x0002);
    goto loc_1d1ca7;
    // gap 3 bytes
loc_1d1c2f: // 0160:1d1c2f
    if (memoryAGet16(ds, 0x20ce99) != 0x0001)
        goto loc_1d1ca1;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0002)
        goto loc_1d1ca1;
    memoryASet16(ds, 0x20d7b7, 0x0003);
    goto loc_1d1ca7;
loc_1d1c4e: // 0160:1d1c4e
    if (memoryAGet16(ds, 0x20ce93) != 0x0001)
        goto loc_1d1c77;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0003)
        goto loc_1d1c6c;
    if (memoryAGet16(ds, 0x20d7a7) != 0x0001)
        goto loc_1d1ca1;
loc_1d1c6c: // 0160:1d1c6c
    memoryASet16(ds, 0x20d7b7, 0x0002);
    goto loc_1d1ca7;
loc_1d1c77: // 0160:1d1c77
    if (memoryAGet16(ds, 0x20ce93) != 0x0007)
        goto loc_1d1ca1;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0002)
        goto loc_1d1c96;
    if (memoryAGet16(ds, 0x20d7a7) & 0xffff)
        goto loc_1d1ca1;
loc_1d1c96: // 0160:1d1c96
    memoryASet16(ds, 0x20d7b7, 0x0001);
    goto loc_1d1ca7;
loc_1d1ca1: // 0160:1d1ca1
    cx = 0x0022;
    goto loc_1d1cab;
loc_1d1ca7: // 0160:1d1ca7
    cx = 0x0023;
loc_1d1cab: // 0160:1d1cab
    ax -= 0x0010;
    bp = 0x0140;
    bp -= memoryAGet16(ds, 0x20ee53);
    bp >>= 1;
    ax -= bp;
    push32(eax);
    push32(ebx);
    sub_1b19e0();
    ebx = pop32();
    eax = pop32();
    if ((short)memoryAGet16(ds, 0x20d7b9) > (short)0x0036)
        goto loc_1d1d9a;
    bx += 0x001c;
    ax += 0x0018;
    push32(eax);
    push32(ebx);
    ax = memoryAGet16(ds, 0x20d7a7);
    ax <<= 1;
    bx = ax;
    ax <<= 1;
    ax += bx;
    esi = 0x0020e8e1;
    eax &= 0x0000ffff;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ceb3, ax);
    ebp = 0;
    bp = ax;
    ax <<= 2;
    bp <<= 1;
    bp += ax;
    if (memoryAGet16(ds, 0x20d7d5) != 0x0001)
        goto loc_1d1d4c;
    if (memoryAGet16(ds, 0x20d7b7) == 0x0000)
        goto loc_1d1d4c;
    ebp = 0;
    esi = 0x002091c9;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0000)
        goto loc_1d1d51;
    if (memoryAGet16(ds, 0x20d7a7) == 0x0002)
        goto loc_1d1d51;
    esi = 0x002091cf;
    goto loc_1d1d51;
loc_1d1d4c: // 0160:1d1d4c
    esi = 0x00224866;
loc_1d1d51: // 0160:1d1d51
    push32(esi);
    ecx = 0x00000006;
    dx = 0;
loc_1d1d5a: // 0160:1d1d5a
    if (memoryAGet(ds, esi + ebp) != 0x20)
        goto loc_1d1d64;
    dx += 0x0004;
loc_1d1d64: // 0160:1d1d64
    esi++;
    if (--ecx)
        goto loc_1d1d5a;
    esi = pop32();
    ebx = pop32();
    eax = pop32();
    ax += dx;
    ecx = 0x00000006;
loc_1d1d72: // 0160:1d1d72
    push32(ecx);
    push32(esi);
    push32(ebp);
    push32(eax);
    push32(ebx);
    cl = memoryAGet(ds, esi + ebp);
    if (cl == 0x20)
        goto loc_1d1d8e;
    cl -= 0x41;
    cl += 0x27;
    dx = 0x0010;
    sub_1b19e0();
loc_1d1d8e: // 0160:1d1d8e
    ebx = pop32();
    eax = pop32();
    ax += 0x0008;
    ebp = pop32();
    ebp++;
    esi = pop32();
    ecx = pop32();
    if (--ecx)
        goto loc_1d1d72;
loc_1d1d9a: // 0160:1d1d9a
    esp += 4;
    return;
}
void sub_1d1d9b() // 0160:1d1d9b +long
{
    esp -= 4;
    goto loc_1d1d9b;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 131975 bytes
loc_1d1d9b: // 0160:1d1d9b
    esi = 0x002089d4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    if (!eax)
        goto loc_1d1db7;
    esi = eax;
    switch (esi)
    {
        case 0x1d1db8: goto loc_1d1db8;
        case 0x1d1ece: goto loc_1d1ece;
        case 0x1d6644: goto loc_1d6644;
        case 0x1d2493: goto loc_1d2493;
        case 0x1d5c1e: goto loc_1d5c1e;
        case 0x1d23e7: goto loc_1d23e7;
        case 0x1d20fd: goto loc_1d20fd;
        case 0x1d226c: goto loc_1d226c;
        case 0x1d27ea: goto loc_1d27ea;
        case 0x1d27fd: goto loc_1d27fd;
        case 0x1d3651: goto loc_1d3651;
        case 0x1d417b: goto loc_1d417b;
        case 0x1d4cc9: goto loc_1d4cc9;
        case 0x1d4e2f: goto loc_1d4e2f;
        case 0x1d4f89: goto loc_1d4f89;
        case 0x1d251d: goto loc_1d251d;
        case 0x1d5f64: goto loc_1d5f64;
        case 0x1d6006: goto loc_1d6006;
        case 0x1d2177: goto loc_1d2177;
        case 0x1d5b2b: goto loc_1d5b2b;
        case 0x1d5ae8: goto loc_1d5ae8;
        default:
            stop("ind 0160:1d1db5");
    }
loc_1d1db7: // 0160:1d1db7
    esp += 4;
    return;
loc_1d1db8: // 0160:1d1db8
    sub_1d1ece();
    ax = memoryAGet16(ds, 0x20d37d);
    bx = memoryAGet16(ds, 0x20d37f);
    cx = memoryAGet16(ds, 0x20d383);
    if (!cx)
        goto loc_1d1e11;
    if (cx != 0x0009)
        goto loc_1d1df5;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d381, 0x0001);
    memoryASet16(ds, 0x20d383, 0x0000);
    goto loc_1d1e11;
loc_1d1df5: // 0160:1d1df5
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1e0a;
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) - 0x0001);
loc_1d1e0a: // 0160:1d1e0a
    ax += cx;
    ax -= 0x0001;
loc_1d1e11: // 0160:1d1e11
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d381);
    if (cx == 0x0006)
        goto loc_1d1e45;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d381);
    if (!ax)
        goto loc_1d1e45;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1e45;
    memoryASet16(ds, 0x20d381, memoryAGet16(ds, 0x20d381) + 0x0001);
loc_1d1e45: // 0160:1d1e45
    ax = memoryAGet16(ds, 0x20d385);
    bx = memoryAGet16(ds, 0x20d387);
    cx = memoryAGet16(ds, 0x20d38b);
    if (!cx)
        goto loc_1d1e99;
    if (cx != 0x0009)
        goto loc_1d1e7d;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d389, 0x0001);
    memoryASet16(ds, 0x20d38b, 0x0000);
    goto loc_1d1e99;
loc_1d1e7d: // 0160:1d1e7d
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1e92;
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) - 0x0001);
loc_1d1e92: // 0160:1d1e92
    ax += cx;
    ax -= 0x0001;
loc_1d1e99: // 0160:1d1e99
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d389);
    if (cx == 0x0006)
        goto loc_1d1ecd;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d389);
    if (!ax)
        goto loc_1d1ecd;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1ecd;
    memoryASet16(ds, 0x20d389, memoryAGet16(ds, 0x20d389) + 0x0001);
loc_1d1ecd: // 0160:1d1ecd
    esp += 4;
    return;
loc_1d1ece: // 0160:1d1ece
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    cx = memoryAGet16(ds, 0x20d373);
    if (!cx)
        goto loc_1d1f22;
    if (cx != 0x0009)
        goto loc_1d1f06;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d371, 0x0001);
    memoryASet16(ds, 0x20d373, 0x0000);
    goto loc_1d1f22;
loc_1d1f06: // 0160:1d1f06
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1f1b;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) - 0x0001);
loc_1d1f1b: // 0160:1d1f1b
    ax += cx;
    ax -= 0x0001;
loc_1d1f22: // 0160:1d1f22
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d371);
    if (cx == 0x0006)
        goto loc_1d1f56;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d371);
    if (!ax)
        goto loc_1d1f56;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1f56;
    memoryASet16(ds, 0x20d371, memoryAGet16(ds, 0x20d371) + 0x0001);
loc_1d1f56: // 0160:1d1f56
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    cx = memoryAGet16(ds, 0x20d37b);
    if (!cx)
        goto loc_1d1faa;
    if (cx != 0x0009)
        goto loc_1d1f8e;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d379, 0x0001);
    memoryASet16(ds, 0x20d37b, 0x0000);
    goto loc_1d1faa;
loc_1d1f8e: // 0160:1d1f8e
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1fa3;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) - 0x0001);
loc_1d1fa3: // 0160:1d1fa3
    ax += cx;
    ax -= 0x0001;
loc_1d1faa: // 0160:1d1faa
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d379);
    if (cx == 0x0006)
        goto loc_1d1fde;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d379);
    if (!ax)
        goto loc_1d1fde;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1fde;
    memoryASet16(ds, 0x20d379, memoryAGet16(ds, 0x20d379) + 0x0001);
loc_1d1fde: // 0160:1d1fde
    esp += 4;
    return;
    // gap 286 bytes
loc_1d20fd: // 0160:1d20fd
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0003;
    ax >>= 1;
    ax += 0x0104;
    esi = memoryAGet32(ds, 0x2eeb94);
    ebx = 0x00000e30;
    memoryASet16(ds, esi + ebx, ax);
    memoryASet16(ds, esi + ebx + 128, ax);
    memoryASet16(ds, esi + ebx + 256, ax);
    memoryASet16(ds, esi + ebx + 384, ax);
    memoryASet16(ds, esi + ebx + 512, ax);
    memoryASet16(ds, esi + ebx + 640, ax);
    ax += 0x0002;
    memoryASet16(ds, esi + ebx + 2, ax);
    memoryASet16(ds, esi + ebx + 130, ax);
    memoryASet16(ds, esi + ebx + 258, ax);
    memoryASet16(ds, esi + ebx + 386, ax);
    memoryASet16(ds, esi + ebx + 514, ax);
    memoryASet16(ds, esi + ebx + 642, ax);
    esp += 4;
    return;
loc_1d2177: // 0160:1d2177
    ax = 0x0003;
    bx = memoryAGet16(ds, 0x20cfa9);
    if (bx < 0x00c8)
        goto loc_1d2198;
    ax += 0x0001;
    if (bx < 0x0190)
        goto loc_1d2198;
    ax += 0x0001;
loc_1d2198: // 0160:1d2198
    memoryASet16(ds, 0x20cfdf, ax);
    if (ax > memoryAGet16(ds, 0x20cfcd))
        goto loc_1d21b4;
    memoryASet16(ds, 0x20cfcd, 0x0000);
loc_1d21b4: // 0160:1d21b4
    ax = 0x0003;
    bx = memoryAGet16(ds, 0x20cfab);
    if (bx < 0x00c8)
        goto loc_1d21d5;
    ax += 0x0001;
    if (bx < 0x0190)
        goto loc_1d21d5;
    ax += 0x0001;
loc_1d21d5: // 0160:1d21d5
    memoryASet16(ds, 0x20cfe1, ax);
    if (ax > memoryAGet16(ds, 0x20cfcf))
        goto loc_1d21f1;
    memoryASet16(ds, 0x20cfcf, 0x0000);
loc_1d21f1: // 0160:1d21f1
    ax = 0x0003;
    bx = memoryAGet16(ds, 0x20cfad);
    if (bx < 0x00c8)
        goto loc_1d2212;
    ax += 0x0001;
    if (bx < 0x0190)
        goto loc_1d2212;
    ax += 0x0001;
loc_1d2212: // 0160:1d2212
    memoryASet16(ds, 0x20cfe3, ax);
    if (ax > memoryAGet16(ds, 0x20cfd1))
        goto loc_1d222e;
    memoryASet16(ds, 0x20cfd1, 0x0000);
loc_1d222e: // 0160:1d222e
    ax = 0x0003;
    bx = memoryAGet16(ds, 0x20cfaf);
    if (bx < 0x00c8)
        goto loc_1d224f;
    ax += 0x0001;
    if (bx < 0x0190)
        goto loc_1d224f;
    ax += 0x0001;
loc_1d224f: // 0160:1d224f
    memoryASet16(ds, 0x20cfe5, ax);
    if (ax > memoryAGet16(ds, 0x20cfd3))
        goto loc_1d226b;
    memoryASet16(ds, 0x20cfd3, 0x0000);
loc_1d226b: // 0160:1d226b
    esp += 4;
    return;
loc_1d226c: // 0160:1d226c
    memoryASet16(ds, 0x20d825, 0x0001);
    ebx = 0x00001194;
    sub_1d2341();
    ebx = 0x00001f54;
    sub_1d2341();
    ebx = 0x000010c4;
    sub_1d2341();
    ebx = 0x00002386;
    sub_1d2341();
    ax = 0x0140;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0010;
    if (!bx)
        goto loc_1d22b6;
    ax = 0x0154;
loc_1d22b6: // 0160:1d22b6
    esi = memoryAGet32(ds, 0x2eeb94);
    ebx = 0x00001ac4;
    memoryASet16(ds, esi + ebx, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 160, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + -158, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 2, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 162, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 322, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + -156, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 4, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 164, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 324, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 6, ax);
    ax += 0x0001;
    memoryASet16(ds, esi + ebx + 166, ax);
    esp += 4;
    return;
    // gap 166 bytes
loc_1d23e7: // 0160:1d23e7
    memoryASet16(ds, 0x20d825, 0x0001);
    ebx = 0x00000a92;
    sub_1d23ff();
    ebx = 0x00000ae0;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    ax >>= 1;
    ax += 0x0104;
    esi = memoryAGet32(ds, 0x2eeb94);
    memoryASet16(ds, esi + ebx, ax);
    memoryASet16(ds, esi + ebx + 112, ax);
    memoryASet16(ds, esi + ebx + 224, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 2, ax);
    memoryASet16(ds, esi + ebx + 114, ax);
    memoryASet16(ds, esi + ebx + 226, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 4, ax);
    memoryASet16(ds, esi + ebx + 116, ax);
    memoryASet16(ds, esi + ebx + 228, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + -112, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + -110, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + -108, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + 336, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 338, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 340, ax);
    esp += 4;
    return;
loc_1d2493: // 0160:1d2493
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d24eb;
    ax = memoryAGet16(ds, 0x20d04b);
    ax &= 0x00ff;
    if (!ax)
        goto loc_1d24d2;
    ax = memoryAGet16(ds, 0x20d04d);
    ax &= 0x00ff;
    if (!ax)
        goto loc_1d24ca;
    ax = memoryAGet16(ds, 0x20d04f);
    ax &= 0x00ff;
    if (ax)
        goto loc_1d24eb;
    ax = memoryAGet16(ds, 0x20d085);
    goto loc_1d24d8;
loc_1d24ca: // 0160:1d24ca
    ax = memoryAGet16(ds, 0x20d083);
    goto loc_1d24d8;
loc_1d24d2: // 0160:1d24d2
    ax = memoryAGet16(ds, 0x20d081);
loc_1d24d8: // 0160:1d24d8
    if (ax == 0x0002)
        goto loc_1d24f6;
    if (ax != 0x0001)
        goto loc_1d24eb;
    sub_1d24f6();
    if (flags.zero)
        goto loc_1d24ec;
loc_1d24eb: // 0160:1d24eb
    esp += 4;
    return;
loc_1d24ec: // 0160:1d24ec
    esi = 0x00208b84;
    goto loc_1d24fb;
    // gap 3 bytes
loc_1d24f6: // 0160:1d24f6
    esi = 0x00208c94;
loc_1d24fb: // 0160:1d24fb
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax < 0)
        goto loc_1d251c;
    ebx = memoryAGet32(ds, esi);
    esi += 0x00000004;
    ebx += ebx;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += ebx;
    edi -= 0x00000004;
    memoryASet(ds, edi, al);
    goto loc_1d24fb;
loc_1d251c: // 0160:1d251c
    esp += 4;
    return;
loc_1d251d: // 0160:1d251d
    esi = 0x0020d399;
    memoryASet16(ds, 0x20ceb3, 0x0000);
loc_1d252b: // 0160:1d252b
    push32(esi);
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    bx -= 0x0001;
    cx = memoryAGet16(ds, esi + 4);
    esi += 0x00000006;
    if ((short)memoryAGet16(ds, 0x20ceb3) <= (short)0x0007)
        goto loc_1d254d;
    ax -= cx;
    goto loc_1d2550;
loc_1d254d: // 0160:1d254d
    ax += cx;
loc_1d2550: // 0160:1d2550
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d2566;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d25a8;
loc_1d2566: // 0160:1d2566
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d257c;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d25a8;
loc_1d257c: // 0160:1d257c
    if (bx >= 0x0178)
        goto loc_1d25a8;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d25a8;
    dx = 0x0010;
    cx = 0x0075;
    if ((short)memoryAGet16(ds, 0x20ceb3) <= (short)0x0007)
        goto loc_1d25a3;
    cx += 0x0001;
loc_1d25a3: // 0160:1d25a3
    sub_1b19e0();
loc_1d25a8: // 0160:1d25a8
    esi = pop32();
    esi += 0x0000000a;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    if (memoryAGet16(ds, 0x20ceb3) != 0x0014)
        goto loc_1d252b;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d2697();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d2697();
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d2697();
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d2697();
    if (memoryAGet16(ds, 0x20d3b1) != 0x0006)
        goto loc_1d2628;
    esi = memoryAGet32(ds, 0x20cf07);
    eax = 0x00000428;
    memoryASet(ds, esi + eax, 0xc3);
    memoryASet(ds, esi + eax + 2, 0xc3);
loc_1d2628: // 0160:1d2628
    if (memoryAGet16(ds, 0x20d3d9) != 0x0006)
        goto loc_1d2646;
    esi = memoryAGet32(ds, 0x20cf07);
    eax = 0x000011aa;
    memoryASet(ds, esi + eax, 0xc3);
    memoryASet(ds, esi + eax + 2, 0xc3);
loc_1d2646: // 0160:1d2646
    if (memoryAGet16(ds, 0x20d401) != 0x0006)
        goto loc_1d266e;
    esi = memoryAGet32(ds, 0x20cf07);
    eax = 0x00000506;
    memoryASet(ds, esi + eax, 0xc4);
    memoryASet(ds, esi + eax + 2, 0xd3);
    memoryASet(ds, esi + eax + 4, 0xd3);
    memoryASet(ds, esi + eax + 6, 0xc4);
loc_1d266e: // 0160:1d266e
    if (memoryAGet16(ds, 0x20d43d) != 0x0006)
        goto loc_1d2696;
    esi = memoryAGet32(ds, 0x20cf07);
    eax = 0x00001286;
    memoryASet(ds, esi + eax, 0xc4);
    memoryASet(ds, esi + eax + 2, 0xd3);
    memoryASet(ds, esi + eax + 4, 0xd3);
    memoryASet(ds, esi + eax + 6, 0xc4);
loc_1d2696: // 0160:1d2696
    esp += 4;
    return;
    // gap 339 bytes
loc_1d27ea: // 0160:1d27ea
    memoryASet16(ds, 0x20d7f7, 0xff00);
    memoryASet16(ds, 0x20d7f9, 0x0100);
    esp += 4;
    return;
loc_1d27fd: // 0160:1d27fd
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    sub_1d348a();
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1d2a7c;
    ax = 0x0064;
    sub_1d3339();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1d2a7d;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d2848;
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) - 0x0001);
loc_1d2848: // 0160:1d2848
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d2866;
    if (memoryAGet(ds, 0x20d125) != 0x38)
        goto loc_1d28d3;
    if (memoryAGet16(ds, 0x20cf87) != 0x002a)
        goto loc_1d28d3;
loc_1d2866: // 0160:1d2866
    memoryASet16(ds, 0x20cf51, 0x00d6);
    memoryASet16(ds, 0x20cf63, 0x04f2);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) - 0x0001);
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d28d3;
    memoryASet16(ds, 0x20cf87, 0x0008);
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20d04d, 0x0273);
    memoryASet16(ds, 0x20cf99, 0x0100);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0008);
loc_1d28d3: // 0160:1d28d3
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d28f1;
    if (memoryAGet(ds, 0x20d127) != 0x38)
        goto loc_1d295e;
    if (memoryAGet16(ds, 0x20cf89) != 0x002a)
        goto loc_1d295e;
loc_1d28f1: // 0160:1d28f1
    memoryASet16(ds, 0x20cf53, 0x00d6);
    memoryASet16(ds, 0x20cf65, 0x04f2);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) - 0x0001);
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d295e;
    memoryASet16(ds, 0x20cf89, 0x0008);
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20d04f, 0x0273);
    memoryASet16(ds, 0x20cf9b, 0x0100);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0008);
loc_1d295e: // 0160:1d295e
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d297c;
    if (memoryAGet(ds, 0x20d129) != 0x38)
        goto loc_1d29e9;
    if (memoryAGet16(ds, 0x20cf8b) != 0x002a)
        goto loc_1d29e9;
loc_1d297c: // 0160:1d297c
    memoryASet16(ds, 0x20cf55, 0x00d6);
    memoryASet16(ds, 0x20cf67, 0x04f2);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) - 0x0001);
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d29e9;
    memoryASet16(ds, 0x20cf8b, 0x0008);
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20d051, 0x0273);
    memoryASet16(ds, 0x20cf9d, 0x0100);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0008);
loc_1d29e9: // 0160:1d29e9
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d2a07;
    if (memoryAGet(ds, 0x20d123) != 0x38)
        goto loc_1d2a7c;
    if (memoryAGet16(ds, 0x20cf85) != 0x002a)
        goto loc_1d2a7c;
loc_1d2a07: // 0160:1d2a07
    memoryASet16(ds, 0x20d861, 0x0001);
    memoryASet16(ds, 0x20cf4f, 0x00d6);
    memoryASet16(ds, 0x20cf61, 0x04f2);
    memoryASet16(ds, 0x20cf85, 0x0008);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d2a7c;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20d04b, 0x0273);
    memoryASet16(ds, 0x20cf97, 0x0100);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0008);
    memoryASet16(ds, 0x20d861, 0x0000);
loc_1d2a7c: // 0160:1d2a7c
    esp += 4;
    return;
loc_1d2a7d: // 0160:1d2a7d
    sub_1d33a0();
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d312b;
    sub_1d3411();
    if (memoryAGet16(ds, 0x20d17d) == 0x0001)
        goto loc_1d2ac2;
    if (memoryAGet16(ds, 0x20d17f) == 0x0001)
        goto loc_1d2ac2;
    if (memoryAGet16(ds, 0x20d181) == 0x0001)
        goto loc_1d2ac2;
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d3338;
loc_1d2ac2: // 0160:1d2ac2
    ax = 0x008c;
    sub_1d34d9();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1d3043;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1d2de1;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d2c23;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d2c11;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d2bfd;
    memoryASet16(ds, 0x20d7af, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2b3b;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2b3b: // 0160:1d2b3b
    ax = 0x0003;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2b51;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2b51: // 0160:1d2b51
    ax = 0x0004;
loc_1d2b55: // 0160:1d2b55
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7ab, ax);
    ax -= 0x0001;
    memoryASet16(ds, 0x20d7a7, ax);
    if (!ax)
        goto loc_1d2f5e;
    if (ax == 0x0001)
        goto loc_1d2e0e;
    if (ax == 0x0002)
        goto loc_1d2e95;
    memoryASet16(ds, 0x20cf55, 0x00e0);
    memoryASet16(ds, 0x20cf67, 0x08f2);
    memoryASet16(ds, 0x20cf79, 0x0001);
    memoryASet16(ds, 0x20cf8b, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20d051, 0x0572);
    memoryASet16(ds, 0x20d04b, 0x0671);
    memoryASet16(ds, 0x20d04d, 0x0671);
    memoryASet16(ds, 0x20d04f, 0x0671);
    goto loc_1d3111;
loc_1d2bfd: // 0160:1d2bfd
    memoryASet16(ds, 0x20d7ad, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    goto loc_1d2c23;
loc_1d2c11: // 0160:1d2c11
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d2c23: // 0160:1d2c23
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d2ca2;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d2c90;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d2c7c;
    memoryASet16(ds, 0x20d7af, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2b3b;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
    goto loc_1d2b3b;
loc_1d2c7c: // 0160:1d2c7c
    memoryASet16(ds, 0x20d7ad, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    goto loc_1d2ca2;
loc_1d2c90: // 0160:1d2c90
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d2ca2: // 0160:1d2ca2
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d2d3f;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d2d2d;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d2d19;
    memoryASet16(ds, 0x20d7af, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2cf6;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2cf6: // 0160:1d2cf6
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2d10;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2d10: // 0160:1d2d10
    ax = 0x0004;
    goto loc_1d2b55;
loc_1d2d19: // 0160:1d2d19
    memoryASet16(ds, 0x20d7ad, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    goto loc_1d2d3f;
loc_1d2d2d: // 0160:1d2d2d
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d2d3f: // 0160:1d2d3f
    if (memoryAGet16(ds, 0x20cf8b) != 0x0034)
        goto loc_1d2ddc;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d2dca;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d2db6;
    memoryASet16(ds, 0x20d7af, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2d93;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2d93: // 0160:1d2d93
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d2dad;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d2b55;
loc_1d2dad: // 0160:1d2dad
    ax = 0x0003;
    goto loc_1d2b55;
loc_1d2db6: // 0160:1d2db6
    memoryASet16(ds, 0x20d7ad, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    goto loc_1d2ddc;
loc_1d2dca: // 0160:1d2dca
    memoryASet16(ds, 0x20d7a9, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1d2ddc: // 0160:1d2ddc
    goto loc_1d3338;
loc_1d2de1: // 0160:1d2de1
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d2f2e;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (memoryAGet16(ds, 0x20cf85) == 0x0034)
        goto loc_1d2f1c;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0002)
        goto loc_1d2e95;
loc_1d2e0e: // 0160:1d2e0e
    memoryASet16(ds, 0x20d7ab, 0x0002);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x00e0);
    memoryASet16(ds, 0x20cf63, 0x08f2);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04d, 0x0572);
    memoryASet16(ds, 0x20d04b, 0x0671);
    memoryASet16(ds, 0x20d04f, 0x0671);
    memoryASet16(ds, 0x20d051, 0x0671);
    goto loc_1d3111;
loc_1d2e95: // 0160:1d2e95
    memoryASet16(ds, 0x20d7ab, 0x0003);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20cf53, 0x00e0);
    memoryASet16(ds, 0x20cf65, 0x08f2);
    memoryASet16(ds, 0x20cf77, 0x0001);
    memoryASet16(ds, 0x20cf89, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04f, 0x0572);
    memoryASet16(ds, 0x20d04b, 0x0671);
    memoryASet16(ds, 0x20d04d, 0x0671);
    memoryASet16(ds, 0x20d051, 0x0671);
    goto loc_1d3111;
loc_1d2f1c: // 0160:1d2f1c
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d2f2e: // 0160:1d2f2e
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d2ff7;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d2fe5;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d2e95;
loc_1d2f5e: // 0160:1d2f5e
    memoryASet16(ds, 0x20d7ab, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x00e0);
    memoryASet16(ds, 0x20cf61, 0x08f2);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04b, 0x0572);
    memoryASet16(ds, 0x20d04d, 0x0671);
    memoryASet16(ds, 0x20d04f, 0x0671);
    memoryASet16(ds, 0x20d051, 0x0671);
    goto loc_1d3111;
loc_1d2fe5: // 0160:1d2fe5
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d2ff7: // 0160:1d2ff7
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d303e;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d302c;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d2e0e;
    goto loc_1d2f5e;
loc_1d302c: // 0160:1d302c
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d303e: // 0160:1d303e
    goto loc_1d3338;
loc_1d3043: // 0160:1d3043
    if (memoryAGet16(ds, 0x20cf87) == 0x0034)
        goto loc_1d30b7;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d3338;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x00e0);
    memoryASet16(ds, 0x20cf63, 0x08f2);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0034);
    memoryASet16(ds, 0x20cf73, 0x0034);
    memoryASet16(ds, 0x20d04d, 0x0572);
    memoryASet16(ds, 0x20d04b, 0x0671);
    goto loc_1d3111;
loc_1d30b7: // 0160:1d30b7
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x00e0);
    memoryASet16(ds, 0x20cf61, 0x08f2);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0034);
    memoryASet16(ds, 0x20cf75, 0x0034);
    memoryASet16(ds, 0x20d04b, 0x0572);
    memoryASet16(ds, 0x20d04d, 0x0671);
loc_1d3111: // 0160:1d3111
    ax = 0x0128;
    bx = 0x0878;
    cx = 0x0190;
    dx = 0x08e0;
    sub_1d359b();
    goto loc_1d3338;
loc_1d312b: // 0160:1d312b
    if (memoryAGet16(ds, 0x20d17d) != 0x0001)
        goto loc_1d316b;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20cf97, 0x0100);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0008);
    memoryASet16(ds, 0x20cf85, 0x0008);
    memoryASet16(ds, 0x20d17d, 0x0000);
loc_1d316b: // 0160:1d316b
    if (memoryAGet16(ds, 0x20d17f) != 0x0001)
        goto loc_1d31ab;
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20cf99, 0x0100);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0008);
    memoryASet16(ds, 0x20cf87, 0x0008);
    memoryASet16(ds, 0x20d17f, 0x0000);
loc_1d31ab: // 0160:1d31ab
    if (memoryAGet16(ds, 0x20d181) != 0x0001)
        goto loc_1d31eb;
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20cf9b, 0x0100);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0008);
    memoryASet16(ds, 0x20cf89, 0x0008);
    memoryASet16(ds, 0x20d181, 0x0000);
loc_1d31eb: // 0160:1d31eb
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d322b;
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20cf9d, 0x0100);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0008);
    memoryASet16(ds, 0x20cf8b, 0x0008);
    memoryASet16(ds, 0x20d183, 0x0000);
loc_1d322b: // 0160:1d322b
    memoryASet16(ds, 0x20d861, 0x0000);
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d3275;
    memoryASet16(ds, 0x20d04b, 0x0273);
    memoryASet16(ds, 0x20cf4f, 0x00d6);
    memoryASet16(ds, 0x20cf61, 0x04f2);
    memoryASet16(ds, 0x20cf85, 0x0026);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d3275: // 0160:1d3275
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d32b6;
    memoryASet16(ds, 0x20d04d, 0x0273);
    memoryASet16(ds, 0x20cf51, 0x00d6);
    memoryASet16(ds, 0x20cf63, 0x04f2);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d32b6: // 0160:1d32b6
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d32f7;
    memoryASet16(ds, 0x20d04f, 0x0273);
    memoryASet16(ds, 0x20cf53, 0x00d6);
    memoryASet16(ds, 0x20cf65, 0x04f2);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d32f7: // 0160:1d32f7
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d3338;
    memoryASet16(ds, 0x20d051, 0x0273);
    memoryASet16(ds, 0x20cf55, 0x00d6);
    memoryASet16(ds, 0x20cf67, 0x04f2);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d3338: // 0160:1d3338
    esp += 4;
    return;
    // gap 792 bytes
loc_1d3651: // 0160:1d3651
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1d38be;
    ax = 0x0082;
    sub_1d3339();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1d38bf;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d368a;
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) - 0x0001);
loc_1d368a: // 0160:1d368a
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d36a8;
    if (memoryAGet(ds, 0x20d125) != 0x38)
        goto loc_1d3715;
    if (memoryAGet16(ds, 0x20cf87) != 0x002a)
        goto loc_1d3715;
loc_1d36a8: // 0160:1d36a8
    memoryASet16(ds, 0x20cf51, 0x0608);
    memoryASet16(ds, 0x20cf63, 0x0714);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) - 0x0001);
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d3715;
    memoryASet16(ds, 0x20cf87, 0x0018);
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20d04d, 0x0620);
    memoryASet16(ds, 0x20cf99, 0x0300);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0018);
loc_1d3715: // 0160:1d3715
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d3733;
    if (memoryAGet(ds, 0x20d127) != 0x38)
        goto loc_1d37a0;
    if (memoryAGet16(ds, 0x20cf89) != 0x002a)
        goto loc_1d37a0;
loc_1d3733: // 0160:1d3733
    memoryASet16(ds, 0x20cf53, 0x0608);
    memoryASet16(ds, 0x20cf65, 0x0714);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) - 0x0001);
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d37a0;
    memoryASet16(ds, 0x20cf89, 0x0018);
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20d04f, 0x0620);
    memoryASet16(ds, 0x20cf9b, 0x0300);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0018);
loc_1d37a0: // 0160:1d37a0
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d37be;
    if (memoryAGet(ds, 0x20d129) != 0x38)
        goto loc_1d382b;
    if (memoryAGet16(ds, 0x20cf8b) != 0x002a)
        goto loc_1d382b;
loc_1d37be: // 0160:1d37be
    memoryASet16(ds, 0x20cf55, 0x0608);
    memoryASet16(ds, 0x20cf67, 0x0714);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) - 0x0001);
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d382b;
    memoryASet16(ds, 0x20cf8b, 0x0018);
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20d051, 0x0620);
    memoryASet16(ds, 0x20cf9d, 0x0300);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0018);
loc_1d382b: // 0160:1d382b
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d3849;
    if (memoryAGet(ds, 0x20d123) != 0x38)
        goto loc_1d38be;
    if (memoryAGet16(ds, 0x20cf85) != 0x002a)
        goto loc_1d38be;
loc_1d3849: // 0160:1d3849
    memoryASet16(ds, 0x20d861, 0x0001);
    memoryASet16(ds, 0x20cf4f, 0x0608);
    memoryASet16(ds, 0x20cf61, 0x0714);
    memoryASet16(ds, 0x20cf85, 0x0018);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d38be;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20d04b, 0x0620);
    memoryASet16(ds, 0x20cf97, 0x0300);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0018);
    memoryASet16(ds, 0x20d861, 0x0000);
loc_1d38be: // 0160:1d38be
    esp += 4;
    return;
loc_1d38bf: // 0160:1d38bf
    sub_1d33a0();
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d3f6d;
    sub_1d3411();
    if (memoryAGet16(ds, 0x20d17d) == 0x0001)
        goto loc_1d3904;
    if (memoryAGet16(ds, 0x20d17f) == 0x0001)
        goto loc_1d3904;
    if (memoryAGet16(ds, 0x20d181) == 0x0001)
        goto loc_1d3904;
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d417a;
loc_1d3904: // 0160:1d3904
    ax = 0x00c8;
    sub_1d34d9();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1d3e85;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1d3c23;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d3a65;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d3a53;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d3a3f;
    memoryASet16(ds, 0x20d7af, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d397d;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d397d: // 0160:1d397d
    ax = 0x0003;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d3993;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d3993: // 0160:1d3993
    ax = 0x0004;
loc_1d3997: // 0160:1d3997
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7ab, ax);
    ax -= 0x0001;
    memoryASet16(ds, 0x20d7a7, ax);
    if (!ax)
        goto loc_1d3da0;
    if (ax == 0x0001)
        goto loc_1d3c50;
    if (ax == 0x0002)
        goto loc_1d3cd7;
    memoryASet16(ds, 0x20cf55, 0x05fa);
    memoryASet16(ds, 0x20cf67, 0x00fa);
    memoryASet16(ds, 0x20cf79, 0x0001);
    memoryASet16(ds, 0x20cf8b, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20d051, 0x011f);
    memoryASet16(ds, 0x20d04b, 0x011e);
    memoryASet16(ds, 0x20d04d, 0x011e);
    memoryASet16(ds, 0x20d04f, 0x011e);
    goto loc_1d3f53;
loc_1d3a3f: // 0160:1d3a3f
    memoryASet16(ds, 0x20d7ad, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    goto loc_1d3a65;
loc_1d3a53: // 0160:1d3a53
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d3a65: // 0160:1d3a65
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d3ae4;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d3ad2;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d3abe;
    memoryASet16(ds, 0x20d7af, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d397d;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
    goto loc_1d397d;
loc_1d3abe: // 0160:1d3abe
    memoryASet16(ds, 0x20d7ad, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    goto loc_1d3ae4;
loc_1d3ad2: // 0160:1d3ad2
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d3ae4: // 0160:1d3ae4
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d3b81;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d3b6f;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d3b5b;
    memoryASet16(ds, 0x20d7af, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d3b38;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d3b38: // 0160:1d3b38
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d3b52;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d3b52: // 0160:1d3b52
    ax = 0x0004;
    goto loc_1d3997;
loc_1d3b5b: // 0160:1d3b5b
    memoryASet16(ds, 0x20d7ad, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    goto loc_1d3b81;
loc_1d3b6f: // 0160:1d3b6f
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d3b81: // 0160:1d3b81
    if (memoryAGet16(ds, 0x20cf8b) != 0x0034)
        goto loc_1d3c1e;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d3c0c;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d3bf8;
    memoryASet16(ds, 0x20d7af, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d3bd5;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d3bd5: // 0160:1d3bd5
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d3bef;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d3997;
loc_1d3bef: // 0160:1d3bef
    ax = 0x0003;
    goto loc_1d3997;
loc_1d3bf8: // 0160:1d3bf8
    memoryASet16(ds, 0x20d7ad, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    goto loc_1d3c1e;
loc_1d3c0c: // 0160:1d3c0c
    memoryASet16(ds, 0x20d7a9, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1d3c1e: // 0160:1d3c1e
    goto loc_1d417a;
loc_1d3c23: // 0160:1d3c23
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d3d70;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (memoryAGet16(ds, 0x20cf85) == 0x0034)
        goto loc_1d3d5e;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0002)
        goto loc_1d3cd7;
loc_1d3c50: // 0160:1d3c50
    memoryASet16(ds, 0x20d7ab, 0x0002);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x05fa);
    memoryASet16(ds, 0x20cf63, 0x00fa);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04d, 0x011f);
    memoryASet16(ds, 0x20d04b, 0x011e);
    memoryASet16(ds, 0x20d04f, 0x011e);
    memoryASet16(ds, 0x20d051, 0x011e);
    goto loc_1d3f53;
loc_1d3cd7: // 0160:1d3cd7
    memoryASet16(ds, 0x20d7ab, 0x0003);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20cf53, 0x05fa);
    memoryASet16(ds, 0x20cf65, 0x00fa);
    memoryASet16(ds, 0x20cf77, 0x0001);
    memoryASet16(ds, 0x20cf89, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04f, 0x011f);
    memoryASet16(ds, 0x20d04b, 0x011e);
    memoryASet16(ds, 0x20d04d, 0x011e);
    memoryASet16(ds, 0x20d051, 0x011e);
    goto loc_1d3f53;
loc_1d3d5e: // 0160:1d3d5e
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d3d70: // 0160:1d3d70
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d3e39;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d3e27;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d3cd7;
loc_1d3da0: // 0160:1d3da0
    memoryASet16(ds, 0x20d7ab, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x05fa);
    memoryASet16(ds, 0x20cf61, 0x00fa);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04b, 0x011f);
    memoryASet16(ds, 0x20d04d, 0x011e);
    memoryASet16(ds, 0x20d04f, 0x011e);
    memoryASet16(ds, 0x20d051, 0x011e);
    goto loc_1d3f53;
loc_1d3e27: // 0160:1d3e27
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d3e39: // 0160:1d3e39
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d3e80;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d3e6e;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d3c50;
    goto loc_1d3da0;
loc_1d3e6e: // 0160:1d3e6e
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d3e80: // 0160:1d3e80
    goto loc_1d417a;
loc_1d3e85: // 0160:1d3e85
    if (memoryAGet16(ds, 0x20cf87) == 0x0034)
        goto loc_1d3ef9;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d417a;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x05fa);
    memoryASet16(ds, 0x20cf63, 0x00fa);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0034);
    memoryASet16(ds, 0x20cf73, 0x0034);
    memoryASet16(ds, 0x20d04d, 0x011f);
    memoryASet16(ds, 0x20d04b, 0x011e);
    goto loc_1d3f53;
loc_1d3ef9: // 0160:1d3ef9
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x05fa);
    memoryASet16(ds, 0x20cf61, 0x00fa);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0034);
    memoryASet16(ds, 0x20cf75, 0x0034);
    memoryASet16(ds, 0x20d04b, 0x011f);
    memoryASet16(ds, 0x20d04d, 0x011e);
loc_1d3f53: // 0160:1d3f53
    ax = 0x0578;
    bx = 0x0124;
    cx = 0x05c8;
    dx = 0x0174;
    sub_1d359b();
    goto loc_1d417a;
loc_1d3f6d: // 0160:1d3f6d
    if (memoryAGet16(ds, 0x20d17d) != 0x0001)
        goto loc_1d3fad;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20cf97, 0x0300);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0018);
    memoryASet16(ds, 0x20cf85, 0x0018);
    memoryASet16(ds, 0x20d17d, 0x0000);
loc_1d3fad: // 0160:1d3fad
    if (memoryAGet16(ds, 0x20d17f) != 0x0001)
        goto loc_1d3fed;
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20cf99, 0x0300);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0018);
    memoryASet16(ds, 0x20cf87, 0x0018);
    memoryASet16(ds, 0x20d17f, 0x0000);
loc_1d3fed: // 0160:1d3fed
    if (memoryAGet16(ds, 0x20d181) != 0x0001)
        goto loc_1d402d;
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20cf9b, 0x0300);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0018);
    memoryASet16(ds, 0x20cf89, 0x0018);
    memoryASet16(ds, 0x20d181, 0x0000);
loc_1d402d: // 0160:1d402d
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d406d;
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20cf9d, 0x0300);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0018);
    memoryASet16(ds, 0x20cf8b, 0x0018);
    memoryASet16(ds, 0x20d183, 0x0000);
loc_1d406d: // 0160:1d406d
    memoryASet16(ds, 0x20d861, 0x0000);
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d40b7;
    memoryASet16(ds, 0x20d04b, 0x0633);
    memoryASet16(ds, 0x20cf4f, 0x0608);
    memoryASet16(ds, 0x20cf61, 0x0714);
    memoryASet16(ds, 0x20cf85, 0x0026);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d40b7: // 0160:1d40b7
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d40f8;
    memoryASet16(ds, 0x20d04d, 0x0620);
    memoryASet16(ds, 0x20cf51, 0x0608);
    memoryASet16(ds, 0x20cf63, 0x0714);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d40f8: // 0160:1d40f8
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d4139;
    memoryASet16(ds, 0x20d04f, 0x0620);
    memoryASet16(ds, 0x20cf53, 0x0608);
    memoryASet16(ds, 0x20cf65, 0x0714);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d4139: // 0160:1d4139
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d417a;
    memoryASet16(ds, 0x20d051, 0x0620);
    memoryASet16(ds, 0x20cf55, 0x0608);
    memoryASet16(ds, 0x20cf67, 0x0714);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d417a: // 0160:1d417a
    esp += 4;
    return;
loc_1d417b: // 0160:1d417b
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    sub_1d348a();
    ax = memoryAGet16(ds, 0x20d37f);
    bx = memoryAGet16(ds, 0x20d381);
    sub_1d348a();
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1d440c;
    ax = 0x005a;
    sub_1d3339();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1d440d;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d41d8;
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) - 0x0001);
loc_1d41d8: // 0160:1d41d8
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d41f6;
    if (memoryAGet(ds, 0x20d125) != 0x38)
        goto loc_1d4263;
    if (memoryAGet16(ds, 0x20cf87) != 0x002a)
        goto loc_1d4263;
loc_1d41f6: // 0160:1d41f6
    memoryASet16(ds, 0x20cf51, 0x00f6);
    memoryASet16(ds, 0x20cf63, 0x0464);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) - 0x0001);
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d4263;
    memoryASet16(ds, 0x20cf87, 0x0004);
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20d04d, 0x011f);
    memoryASet16(ds, 0x20cf99, 0x0080);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0004);
loc_1d4263: // 0160:1d4263
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d4281;
    if (memoryAGet(ds, 0x20d127) != 0x38)
        goto loc_1d42ee;
    if (memoryAGet16(ds, 0x20cf89) != 0x002a)
        goto loc_1d42ee;
loc_1d4281: // 0160:1d4281
    memoryASet16(ds, 0x20cf53, 0x00f6);
    memoryASet16(ds, 0x20cf65, 0x0464);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) - 0x0001);
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d42ee;
    memoryASet16(ds, 0x20cf89, 0x0004);
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20d04f, 0x011f);
    memoryASet16(ds, 0x20cf9b, 0x0080);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0004);
loc_1d42ee: // 0160:1d42ee
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d430c;
    if (memoryAGet(ds, 0x20d129) != 0x38)
        goto loc_1d4379;
    if (memoryAGet16(ds, 0x20cf8b) != 0x002a)
        goto loc_1d4379;
loc_1d430c: // 0160:1d430c
    memoryASet16(ds, 0x20cf55, 0x00f6);
    memoryASet16(ds, 0x20cf67, 0x0464);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) - 0x0001);
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d4379;
    memoryASet16(ds, 0x20cf8b, 0x0004);
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20d051, 0x011f);
    memoryASet16(ds, 0x20cf9d, 0x0080);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0004);
loc_1d4379: // 0160:1d4379
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d4397;
    if (memoryAGet(ds, 0x20d123) != 0x38)
        goto loc_1d440c;
    if (memoryAGet16(ds, 0x20cf85) != 0x002a)
        goto loc_1d440c;
loc_1d4397: // 0160:1d4397
    memoryASet16(ds, 0x20d861, 0x0001);
    memoryASet16(ds, 0x20cf4f, 0x00f6);
    memoryASet16(ds, 0x20cf61, 0x0464);
    memoryASet16(ds, 0x20cf85, 0x0004);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d440c;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20d04b, 0x011f);
    memoryASet16(ds, 0x20cf97, 0x0080);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0004);
    memoryASet16(ds, 0x20d861, 0x0000);
loc_1d440c: // 0160:1d440c
    esp += 4;
    return;
loc_1d440d: // 0160:1d440d
    sub_1d33a0();
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d4abb;
    sub_1d3411();
    if (memoryAGet16(ds, 0x20d17d) == 0x0001)
        goto loc_1d4452;
    if (memoryAGet16(ds, 0x20d17f) == 0x0001)
        goto loc_1d4452;
    if (memoryAGet16(ds, 0x20d181) == 0x0001)
        goto loc_1d4452;
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d4cc8;
loc_1d4452: // 0160:1d4452
    ax = 0x008c;
    sub_1d34d9();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1d49d3;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1d4771;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d45b3;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d45a1;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d458d;
    memoryASet16(ds, 0x20d7af, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d44cb;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d44cb: // 0160:1d44cb
    ax = 0x0003;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d44e1;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d44e1: // 0160:1d44e1
    ax = 0x0004;
loc_1d44e5: // 0160:1d44e5
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7ab, ax);
    ax -= 0x0001;
    memoryASet16(ds, 0x20d7a7, ax);
    if (!ax)
        goto loc_1d48ee;
    if (ax == 0x0001)
        goto loc_1d479e;
    if (ax == 0x0002)
        goto loc_1d4825;
    memoryASet16(ds, 0x20cf55, 0x00f6);
    memoryASet16(ds, 0x20cf67, 0x00fa);
    memoryASet16(ds, 0x20cf79, 0x0001);
    memoryASet16(ds, 0x20cf8b, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20d051, 0x071e);
    memoryASet16(ds, 0x20d04b, 0x071d);
    memoryASet16(ds, 0x20d04d, 0x071d);
    memoryASet16(ds, 0x20d04f, 0x071d);
    goto loc_1d4aa1;
loc_1d458d: // 0160:1d458d
    memoryASet16(ds, 0x20d7ad, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    goto loc_1d45b3;
loc_1d45a1: // 0160:1d45a1
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d45b3: // 0160:1d45b3
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d4632;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d4620;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d460c;
    memoryASet16(ds, 0x20d7af, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d44cb;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
    goto loc_1d44cb;
loc_1d460c: // 0160:1d460c
    memoryASet16(ds, 0x20d7ad, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    goto loc_1d4632;
loc_1d4620: // 0160:1d4620
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d4632: // 0160:1d4632
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d46cf;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d46bd;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d46a9;
    memoryASet16(ds, 0x20d7af, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d4686;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d4686: // 0160:1d4686
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d46a0;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d46a0: // 0160:1d46a0
    ax = 0x0004;
    goto loc_1d44e5;
loc_1d46a9: // 0160:1d46a9
    memoryASet16(ds, 0x20d7ad, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    goto loc_1d46cf;
loc_1d46bd: // 0160:1d46bd
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d46cf: // 0160:1d46cf
    if (memoryAGet16(ds, 0x20cf8b) != 0x0034)
        goto loc_1d476c;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d475a;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d4746;
    memoryASet16(ds, 0x20d7af, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d4723;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d4723: // 0160:1d4723
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d473d;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d44e5;
loc_1d473d: // 0160:1d473d
    ax = 0x0003;
    goto loc_1d44e5;
loc_1d4746: // 0160:1d4746
    memoryASet16(ds, 0x20d7ad, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    goto loc_1d476c;
loc_1d475a: // 0160:1d475a
    memoryASet16(ds, 0x20d7a9, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1d476c: // 0160:1d476c
    goto loc_1d4cc8;
loc_1d4771: // 0160:1d4771
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d48be;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (memoryAGet16(ds, 0x20cf85) == 0x0034)
        goto loc_1d48ac;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0002)
        goto loc_1d4825;
loc_1d479e: // 0160:1d479e
    memoryASet16(ds, 0x20d7ab, 0x0002);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x00f6);
    memoryASet16(ds, 0x20cf63, 0x00fa);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04d, 0x071e);
    memoryASet16(ds, 0x20d04b, 0x071d);
    memoryASet16(ds, 0x20d04f, 0x071d);
    memoryASet16(ds, 0x20d051, 0x071d);
    goto loc_1d4aa1;
loc_1d4825: // 0160:1d4825
    memoryASet16(ds, 0x20d7ab, 0x0003);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20cf53, 0x00f6);
    memoryASet16(ds, 0x20cf65, 0x00fa);
    memoryASet16(ds, 0x20cf77, 0x0001);
    memoryASet16(ds, 0x20cf89, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04f, 0x071e);
    memoryASet16(ds, 0x20d04b, 0x071d);
    memoryASet16(ds, 0x20d04d, 0x071d);
    memoryASet16(ds, 0x20d051, 0x071d);
    goto loc_1d4aa1;
loc_1d48ac: // 0160:1d48ac
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d48be: // 0160:1d48be
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d4987;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d4975;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d4825;
loc_1d48ee: // 0160:1d48ee
    memoryASet16(ds, 0x20d7ab, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x00f6);
    memoryASet16(ds, 0x20cf61, 0x00fa);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04b, 0x071e);
    memoryASet16(ds, 0x20d04d, 0x071d);
    memoryASet16(ds, 0x20d04f, 0x071d);
    memoryASet16(ds, 0x20d051, 0x071d);
    goto loc_1d4aa1;
loc_1d4975: // 0160:1d4975
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d4987: // 0160:1d4987
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d49ce;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d49bc;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d479e;
    goto loc_1d48ee;
loc_1d49bc: // 0160:1d49bc
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d49ce: // 0160:1d49ce
    goto loc_1d4cc8;
loc_1d49d3: // 0160:1d49d3
    if (memoryAGet16(ds, 0x20cf87) == 0x0034)
        goto loc_1d4a47;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d4cc8;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x00f6);
    memoryASet16(ds, 0x20cf63, 0x00fa);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0034);
    memoryASet16(ds, 0x20cf73, 0x0034);
    memoryASet16(ds, 0x20d04d, 0x071e);
    memoryASet16(ds, 0x20d04b, 0x071d);
    goto loc_1d4aa1;
loc_1d4a47: // 0160:1d4a47
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x00f6);
    memoryASet16(ds, 0x20cf61, 0x00fa);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0034);
    memoryASet16(ds, 0x20cf75, 0x0034);
    memoryASet16(ds, 0x20d04b, 0x071e);
    memoryASet16(ds, 0x20d04d, 0x071d);
loc_1d4aa1: // 0160:1d4aa1
    ax = 0x0138;
    bx = 0x01b0;
    cx = 0x0190;
    dx = 0x0158;
    sub_1d359b();
    goto loc_1d4cc8;
loc_1d4abb: // 0160:1d4abb
    if (memoryAGet16(ds, 0x20d17d) != 0x0001)
        goto loc_1d4afb;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20cf97, 0x0080);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0004);
    memoryASet16(ds, 0x20cf85, 0x0004);
    memoryASet16(ds, 0x20d17d, 0x0000);
loc_1d4afb: // 0160:1d4afb
    if (memoryAGet16(ds, 0x20d17f) != 0x0001)
        goto loc_1d4b3b;
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20cf99, 0x0080);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0004);
    memoryASet16(ds, 0x20cf87, 0x0004);
    memoryASet16(ds, 0x20d17f, 0x0000);
loc_1d4b3b: // 0160:1d4b3b
    if (memoryAGet16(ds, 0x20d181) != 0x0001)
        goto loc_1d4b7b;
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20cf9b, 0x0080);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0004);
    memoryASet16(ds, 0x20cf89, 0x0004);
    memoryASet16(ds, 0x20d181, 0x0000);
loc_1d4b7b: // 0160:1d4b7b
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d4bbb;
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20cf9d, 0x0080);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0004);
    memoryASet16(ds, 0x20d183, 0x0000);
loc_1d4bbb: // 0160:1d4bbb
    memoryASet16(ds, 0x20d861, 0x0000);
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d4c05;
    memoryASet16(ds, 0x20d04b, 0x011f);
    memoryASet16(ds, 0x20cf4f, 0x00f6);
    memoryASet16(ds, 0x20cf61, 0x0464);
    memoryASet16(ds, 0x20cf85, 0x0026);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d4c05: // 0160:1d4c05
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d4c46;
    memoryASet16(ds, 0x20d04d, 0x011f);
    memoryASet16(ds, 0x20cf51, 0x00f6);
    memoryASet16(ds, 0x20cf63, 0x0464);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d4c46: // 0160:1d4c46
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d4c87;
    memoryASet16(ds, 0x20d04f, 0x011f);
    memoryASet16(ds, 0x20cf53, 0x00f6);
    memoryASet16(ds, 0x20cf65, 0x0464);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d4c87: // 0160:1d4c87
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d4cc8;
    memoryASet16(ds, 0x20d051, 0x011f);
    memoryASet16(ds, 0x20cf55, 0x00f6);
    memoryASet16(ds, 0x20cf67, 0x0464);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d4cc8: // 0160:1d4cc8
    esp += 4;
    return;
loc_1d4cc9: // 0160:1d4cc9
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    if (ax)
        goto loc_1d4d46;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d4dd2();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d4dd2();
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d4d16;
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d4dd2();
loc_1d4d16: // 0160:1d4d16
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d4dd2();
    esi = 0x0020d36d;
    ecx = 0x00000028;
loc_1d4d32: // 0160:1d4d32
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_1d4d3e;
    ax -= 0x0001;
loc_1d4d3e: // 0160:1d4d3e
    memoryASet16(ds, esi, ax);
    esi += 0x00000002;
    if (--ecx)
        goto loc_1d4d32;
loc_1d4d46: // 0160:1d4d46
    memoryASet16(ds, 0x20ceb3, 0x04df);
    memoryASet16(ds, 0x20ceb5, 0x01bf);
    esi = 0x0020d36d;
    ecx = 0x00000028;
loc_1d4d62: // 0160:1d4d62
    ax = memoryAGet16(ds, esi);
    if (!ax)
        goto loc_1d4dc4;
    ax += 0x006f;
    push32(ecx);
    push32(esi);
    cx = ax;
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d4d96;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d4dc2;
loc_1d4d96: // 0160:1d4d96
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d4dac;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d4dc2;
loc_1d4dac: // 0160:1d4dac
    if (bx >= 0x0178)
        goto loc_1d4dc2;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d4dc2;
    dx = 0x0010;
    sub_1b19e0();
loc_1d4dc2: // 0160:1d4dc2
    esi = pop32();
    ecx = pop32();
loc_1d4dc4: // 0160:1d4dc4
    esi += 0x00000002;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0010);
    if (--ecx)
        goto loc_1d4d62;
    esp += 4;
    return;
    // gap 93 bytes
loc_1d4e2f: // 0160:1d4e2f
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    cx = memoryAGet16(ds, 0x20d371);
    sub_1d4f07();
    ax = memoryAGet16(ds, 0x20d379);
    bx = memoryAGet16(ds, 0x20d37b);
    cx = memoryAGet16(ds, 0x20d37d);
    sub_1d4f07();
    esi = 0x0020d385;
    ecx = 0x0000002f;
loc_1d4e6b: // 0160:1d4e6b
    if (!(memoryAGet16(ds, esi) & 0xffff))
        goto loc_1d4e76;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0001);
loc_1d4e76: // 0160:1d4e76
    esi += 0x00000008;
    if (--ecx)
        goto loc_1d4e6b;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d4e8e();
    esp += 4;
    return;
    // gap 251 bytes
loc_1d4f89: // 0160:1d4f89
    if ((short)memoryAGet16(ds, 0x20cf23) <= (short)0x02f8)
        goto loc_1d4fd9;
    if ((short)memoryAGet16(ds, 0x20cf25) >= (short)0x0172)
        goto loc_1d4fd9;
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1d4fed;
    memoryASet16(ds, 0x20e7d7, 0x0000);
    memoryASet16(ds, 0x20e7d9, 0x0000);
    memoryASet16(ds, 0x20e7db, 0x0000);
    memoryASet16(ds, 0x20e7dd, 0x0000);
    memoryASet16(ds, 0x20d897, 0x0001);
    goto loc_1d4fed;
loc_1d4fd9: // 0160:1d4fd9
    if (!(memoryAGet16(ds, 0x20d897) & 0xffff))
        goto loc_1d4fed;
    memoryASet16(ds, 0x20d897, 0x0000);
loc_1d4fed: // 0160:1d4fed
    memoryASet16(ds, 0x20d1e9, 0x0000);
    if (memoryAGet(ds, 0x20d123) != 0x38)
        goto loc_1d507f;
    push32(eax);
    ax = memoryAGet16(ds, 0x20cf4f);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf61);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20d1e1);
    memoryASet16(ds, 0x20d1eb, ax);
    ax = memoryAGet16(ds, 0x20d1d7);
    memoryASet16(ds, 0x20d1df, ax);
    ax = memoryAGet16(ds, 0x20d1ed);
    memoryASet16(ds, 0x20d1f5, ax);
    al = memoryAGet(ds, 0x20c840);
    memoryASet(ds, 0x20c848, al);
    eax = pop32();
    sub_1d562f();
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf4f, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf61, ax);
    ax = memoryAGet16(ds, 0x20d873);
    memoryASet16(ds, 0x20d1ed, ax);
    if (memoryAGet16(ds, 0x20d1e9) & 0xffff)
        goto loc_1d50a4;
loc_1d507f: // 0160:1d507f
    if (!(memoryAGet16(ds, 0x20d1e1) & 0xffff))
        goto loc_1d50f8;
    ax = memoryAGet16(ds, 0x20d1d7);
    ax <<= 1;
    memoryASet16(ds, 0x20cf97, ax);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    goto loc_1d50f8;
loc_1d50a4: // 0160:1d50a4
    if (!(memoryAGet16(ds, 0x20d1e1) & 0xffff))
        goto loc_1d50e2;
    ax = memoryAGet16(ds, 0x20d875);
    bx = memoryAGet16(ds, 0x20d1d7);
    ax >>= 4;
    bx >>= 4;
    if (ax == bx)
        goto loc_1d50e2;
    al = memoryAGet(ds, 0x20c840);
    al &= 0x0c;
    if (al)
        goto loc_1d50e2;
    memoryASet16(ds, 0x20cf73, memoryAGet16(ds, 0x20cf73) + 0x0001);
    memoryASet16(ds, 0x20cf73, memoryAGet16(ds, 0x20cf73) & 0x001f);
loc_1d50e2: // 0160:1d50e2
    ax = memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d1d7, ax);
    memoryASet16(ds, 0x20d1e1, memoryAGet16(ds, 0x20d1e1) + 0x0001);
    goto loc_1d5104;
loc_1d50f8: // 0160:1d50f8
    ax = memoryAGet16(ds, 0x20d1e9);
    memoryASet16(ds, 0x20d1e1, ax);
loc_1d5104: // 0160:1d5104
    memoryASet16(ds, 0x20d1e9, 0x0000);
    if (memoryAGet(ds, 0x20d125) != 0x38)
        goto loc_1d5196;
    push32(eax);
    ax = memoryAGet16(ds, 0x20cf51);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf63);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20d1e3);
    memoryASet16(ds, 0x20d1eb, ax);
    ax = memoryAGet16(ds, 0x20d1d9);
    memoryASet16(ds, 0x20d1df, ax);
    ax = memoryAGet16(ds, 0x20d1ef);
    memoryASet16(ds, 0x20d1f5, ax);
    al = memoryAGet(ds, 0x20c841);
    memoryASet(ds, 0x20c848, al);
    eax = pop32();
    sub_1d562f();
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf51, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf63, ax);
    ax = memoryAGet16(ds, 0x20d873);
    memoryASet16(ds, 0x20d1ef, ax);
    if (memoryAGet16(ds, 0x20d1e9) & 0xffff)
        goto loc_1d51bb;
loc_1d5196: // 0160:1d5196
    if (!(memoryAGet16(ds, 0x20d1e3) & 0xffff))
        goto loc_1d520f;
    ax = memoryAGet16(ds, 0x20d1d9);
    ax <<= 1;
    memoryASet16(ds, 0x20cf99, ax);
    memoryASet16(ds, 0x20cfab, 0x0180);
    goto loc_1d520f;
loc_1d51bb: // 0160:1d51bb
    if (!(memoryAGet16(ds, 0x20d1e3) & 0xffff))
        goto loc_1d51f9;
    ax = memoryAGet16(ds, 0x20d875);
    bx = memoryAGet16(ds, 0x20d1d9);
    ax >>= 4;
    bx >>= 4;
    if (ax == bx)
        goto loc_1d51f9;
    al = memoryAGet(ds, 0x20c841);
    al &= 0x0c;
    if (al)
        goto loc_1d51f9;
    memoryASet16(ds, 0x20cf75, memoryAGet16(ds, 0x20cf75) + 0x0001);
    memoryASet16(ds, 0x20cf75, memoryAGet16(ds, 0x20cf75) & 0x001f);
loc_1d51f9: // 0160:1d51f9
    ax = memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d1d9, ax);
    memoryASet16(ds, 0x20d1e3, memoryAGet16(ds, 0x20d1e3) + 0x0001);
    goto loc_1d521b;
loc_1d520f: // 0160:1d520f
    ax = memoryAGet16(ds, 0x20d1e9);
    memoryASet16(ds, 0x20d1e3, ax);
loc_1d521b: // 0160:1d521b
    memoryASet16(ds, 0x20d1e9, 0x0000);
    if (memoryAGet(ds, 0x20d127) != 0x38)
        goto loc_1d52ad;
    push32(eax);
    ax = memoryAGet16(ds, 0x20cf53);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf65);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20d1e5);
    memoryASet16(ds, 0x20d1eb, ax);
    ax = memoryAGet16(ds, 0x20d1db);
    memoryASet16(ds, 0x20d1df, ax);
    ax = memoryAGet16(ds, 0x20d1f1);
    memoryASet16(ds, 0x20d1f5, ax);
    al = memoryAGet(ds, 0x20c842);
    memoryASet(ds, 0x20c848, al);
    eax = pop32();
    sub_1d562f();
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf53, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf65, ax);
    ax = memoryAGet16(ds, 0x20d873);
    memoryASet16(ds, 0x20d1f1, ax);
    if (memoryAGet16(ds, 0x20d1e9) & 0xffff)
        goto loc_1d52d2;
loc_1d52ad: // 0160:1d52ad
    if (!(memoryAGet16(ds, 0x20d1e5) & 0xffff))
        goto loc_1d5326;
    ax = memoryAGet16(ds, 0x20d1db);
    ax <<= 1;
    memoryASet16(ds, 0x20cf9b, ax);
    memoryASet16(ds, 0x20cfad, 0x0180);
    goto loc_1d5326;
loc_1d52d2: // 0160:1d52d2
    if (!(memoryAGet16(ds, 0x20d1e5) & 0xffff))
        goto loc_1d5310;
    ax = memoryAGet16(ds, 0x20d875);
    bx = memoryAGet16(ds, 0x20d1db);
    ax >>= 4;
    bx >>= 4;
    if (ax == bx)
        goto loc_1d5310;
    al = memoryAGet(ds, 0x20c842);
    al &= 0x0c;
    if (al)
        goto loc_1d5310;
    memoryASet16(ds, 0x20cf77, memoryAGet16(ds, 0x20cf77) + 0x0001);
    memoryASet16(ds, 0x20cf77, memoryAGet16(ds, 0x20cf77) & 0x001f);
loc_1d5310: // 0160:1d5310
    ax = memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d1db, ax);
    memoryASet16(ds, 0x20d1e5, memoryAGet16(ds, 0x20d1e5) + 0x0001);
    goto loc_1d5332;
loc_1d5326: // 0160:1d5326
    ax = memoryAGet16(ds, 0x20d1e9);
    memoryASet16(ds, 0x20d1e5, ax);
loc_1d5332: // 0160:1d5332
    memoryASet16(ds, 0x20d1e9, 0x0000);
    if (memoryAGet(ds, 0x20d129) != 0x38)
        goto loc_1d53c4;
    push32(eax);
    ax = memoryAGet16(ds, 0x20cf55);
    memoryASet16(ds, 0x20cf5f, ax);
    ax = memoryAGet16(ds, 0x20cf67);
    memoryASet16(ds, 0x20cf71, ax);
    ax = memoryAGet16(ds, 0x20d1e7);
    memoryASet16(ds, 0x20d1eb, ax);
    ax = memoryAGet16(ds, 0x20d1dd);
    memoryASet16(ds, 0x20d1df, ax);
    ax = memoryAGet16(ds, 0x20d1f3);
    memoryASet16(ds, 0x20d1f5, ax);
    al = memoryAGet(ds, 0x20c843);
    memoryASet(ds, 0x20c848, al);
    eax = pop32();
    sub_1d562f();
    ax = memoryAGet16(ds, 0x20cf5f);
    memoryASet16(ds, 0x20cf55, ax);
    ax = memoryAGet16(ds, 0x20cf71);
    memoryASet16(ds, 0x20cf67, ax);
    ax = memoryAGet16(ds, 0x20d873);
    memoryASet16(ds, 0x20d1f3, ax);
    if (memoryAGet16(ds, 0x20d1e9) & 0xffff)
        goto loc_1d53e9;
loc_1d53c4: // 0160:1d53c4
    if (!(memoryAGet16(ds, 0x20d1e7) & 0xffff))
        goto loc_1d543d;
    ax = memoryAGet16(ds, 0x20d1dd);
    ax <<= 1;
    memoryASet16(ds, 0x20cf9d, ax);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    goto loc_1d543d;
loc_1d53e9: // 0160:1d53e9
    if (!(memoryAGet16(ds, 0x20d1e7) & 0xffff))
        goto loc_1d5427;
    ax = memoryAGet16(ds, 0x20d875);
    bx = memoryAGet16(ds, 0x20d1dd);
    ax >>= 4;
    bx >>= 4;
    if (ax == bx)
        goto loc_1d5427;
    al = memoryAGet(ds, 0x20c843);
    al &= 0x0c;
    if (al)
        goto loc_1d5427;
    memoryASet16(ds, 0x20cf79, memoryAGet16(ds, 0x20cf79) + 0x0001);
    memoryASet16(ds, 0x20cf79, memoryAGet16(ds, 0x20cf79) & 0x001f);
loc_1d5427: // 0160:1d5427
    ax = memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d1dd, ax);
    memoryASet16(ds, 0x20d1e7, memoryAGet16(ds, 0x20d1e7) + 0x0001);
    goto loc_1d5449;
loc_1d543d: // 0160:1d543d
    ax = memoryAGet16(ds, 0x20d1e9);
    memoryASet16(ds, 0x20d1e7, ax);
loc_1d5449: // 0160:1d5449
    memoryASet16(ds, 0x20d36d, memoryAGet16(ds, 0x20d36d) + 0x0004);
    memoryASet16(ds, 0x20d36d, memoryAGet16(ds, 0x20d36d) & 0x01ff);
    memoryASet16(ds, 0x20d873, 0x0014);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0073;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x0014);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0032);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0074;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x0014);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0064);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0075;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x0050);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0076;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x0064);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0076;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x006e);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0190);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0076;
    sub_1d91ba();
    memoryASet16(ds, 0x20d873, 0x0020);
    ax = memoryAGet16(ds, 0x20d36d);
    memoryASet16(ds, 0x20d875, ax);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x00c8);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    sub_1d58e6();
    ax = memoryAGet16(ds, 0x20cf5f);
    bx = memoryAGet16(ds, 0x20cf71);
    ax += 0x008c;
    bx += 0x008c;
    cx = 0x0077;
    goto loc_1d91ba;
    // gap 1209 bytes
loc_1d5ae8: // 0160:1d5ae8
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1d5b2a;
    ax = 0;
    memoryASet16(ds, 0x20d05d, ax);
    memoryASet16(ds, 0x20d05f, ax);
    memoryASet16(ds, 0x20d061, ax);
    memoryASet16(ds, 0x20d063, ax);
    memoryASet16(ds, 0x20d06f, ax);
    memoryASet16(ds, 0x20d071, ax);
    memoryASet16(ds, 0x20d073, ax);
    memoryASet16(ds, 0x20d075, ax);
loc_1d5b2a: // 0160:1d5b2a
    esp += 4;
    return;
loc_1d5b2b: // 0160:1d5b2b
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0001;
    if (bx)
        goto loc_1d5b4b;
    ax += 0x0001;
    if ((short)ax < (short)0x0006)
        goto loc_1d5b4b;
    ax = 0;
loc_1d5b4b: // 0160:1d5b4b
    memoryASet16(ds, 0x20d36d, ax);
    sub_1d5ba6();
    memoryASet16(ds, 0x20d88f, 0x0060);
    memoryASet16(ds, 0x20d891, 0x0060);
    memoryASet16(ds, 0x20d893, 0x0060);
    memoryASet16(ds, 0x20d895, 0x0080);
    if (!(memoryAGet16(ds, 0x20d7a5) & 0xffff))
        goto loc_1d5b93;
    memoryASet16(ds, 0x20d803, 0x0000);
    goto loc_1d5b9c;
    // gap 3 bytes
loc_1d5b93: // 0160:1d5b93
    memoryASet16(ds, 0x20d803, 0x0001);
loc_1d5b9c: // 0160:1d5b9c
    memoryASet16(ds, 0x20d825, 0x0003);
    esp += 4;
    return;
    // gap 120 bytes
loc_1d5c1e: // 0160:1d5c1e
    sub_1d5c5e();
    eax = 0x00000000;
    cx = memoryAGet16(ds, 0x20c830);
    sub_1d5ed3();
    eax = 0x00000180;
    cx = memoryAGet16(ds, 0x20c830);
    cx += 0x0014;
    sub_1d5ed3();
    eax = 0x00000300;
    cx = memoryAGet16(ds, 0x20c830);
    cx += 0x0028;
    goto loc_1d5ed3;
    // gap 629 bytes
loc_1d5ed3: // 0160:1d5ed3
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += eax;
    esi = 0x00208d38;
    ecx &= 0x0000007e;
    esi += ecx;
    ax = memoryAGet16(ds, esi);
    ax += ax;
    ax += 0x0104;
    memoryASet16(ds, edi + 3470, ax);
    ax++;
    memoryASet16(ds, edi + 3598, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3472, ax);
    ax++;
    memoryASet16(ds, edi + 3600, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3474, ax);
    ax++;
    memoryASet16(ds, edi + 3602, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3476, ax);
    ax++;
    memoryASet16(ds, edi + 3604, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3478, ax);
    ax++;
    memoryASet16(ds, edi + 3606, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3480, ax);
    ax++;
    memoryASet16(ds, edi + 3608, ax);
    esp += 4;
    return;
loc_1d5f64: // 0160:1d5f64
    sub_1d5c5e();
    ax = 0x03e6;
    bx = 0x0158;
    dx = 0x0010;
    sub_1d5fa8();
    ax = 0x03e6;
    bx = 0x0178;
    dx = 0x0013;
    sub_1d5fa8();
    ax = 0x03e6;
    bx = 0x0278;
    dx = 0x0010;
    sub_1d5fa8();
    ax = 0x03e6;
    bx = 0x0298;
    dx = 0x0013;
    bx -= 0x0001;
    cx = memoryAGet16(ds, 0x20c830);
    cx += dx;
    cx &= 0x000f;
    cx >>= 3;
    ax += cx;
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d6005;
    if ((short)ax >= 0)
        goto loc_1d5fd9;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d6005;
loc_1d5fd9: // 0160:1d5fd9
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d5feb;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d6005;
loc_1d5feb: // 0160:1d5feb
    if (bx >= 0x0190)
        goto loc_1d6005;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d6005;
    dx = 0x0010;
    cx = 0x0078;
    goto loc_1b19e0;
loc_1d6005: // 0160:1d6005
    esp += 4;
    return;
loc_1d6006: // 0160:1d6006
    cx = memoryAGet16(ds, 0x20cf85);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d608c();
    memoryASet16(ds, 0x20ce9f, ax);
    cx = memoryAGet16(ds, 0x20cf87);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d608c();
    memoryASet16(ds, 0x20cea1, ax);
    cx = memoryAGet16(ds, 0x20cf89);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d608c();
    memoryASet16(ds, 0x20cea3, ax);
    cx = memoryAGet16(ds, 0x20cf8b);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d608c();
    memoryASet16(ds, 0x20cea5, ax);
    sub_1d62df();
    goto loc_1d60c0;
    // gap 55 bytes
loc_1d60c0: // 0160:1d60c0
    memoryASet16(ds, 0x20ceb3, 0x0000);
    memoryASet16(ds, 0x20ceb5, 0x0000);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax)
        goto loc_1d60fb;
    ax = memoryAGet16(ds, 0x20c830);
    eax &= 0x00000078;
    ax >>= 2;
    esi = 0x00208db8;
    bp = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ceb3, bp);
loc_1d60fb: // 0160:1d60fb
    if (memoryAGet16(ds, 0x20ce9f) & 0xffff)
        goto loc_1d6127;
    if (memoryAGet16(ds, 0x20cea1) & 0xffff)
        goto loc_1d6127;
    if (memoryAGet16(ds, 0x20cea3) & 0xffff)
        goto loc_1d6127;
    if (!(memoryAGet16(ds, 0x20cea5) & 0xffff))
        goto loc_1d6159;
loc_1d6127: // 0160:1d6127
    if ((short)memoryAGet16(ds, 0x20d371) >= (short)0x0032)
        goto loc_1d613b;
    memoryASet16(ds, 0x20d371, memoryAGet16(ds, 0x20d371) + 0x0001);
    goto loc_1d6175;
loc_1d613b: // 0160:1d613b
    memoryASet16(ds, 0x20d371, 0x00c8);
    if ((short)memoryAGet16(ds, 0x20d36d) >= (short)0x03fe)
        goto loc_1d6175;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) + 0x0001);
    goto loc_1d6175;
loc_1d6159: // 0160:1d6159
    memoryASet16(ds, 0x20d371, 0x0000);
    if ((short)memoryAGet16(ds, 0x20d36d) <= (short)0x02e2)
        goto loc_1d6175;
    memoryASet16(ds, 0x20ceb3, memoryAGet16(ds, 0x20ceb3) - 0x0001);
loc_1d6175: // 0160:1d6175
    ax = memoryAGet16(ds, 0x20ceb3);
    memoryASet16(ds, 0x20d36d, memoryAGet16(ds, 0x20d36d) + ax);
    if (!(memoryAGet16(ds, 0x20ce9f) & 0xffff))
        goto loc_1d6196;
    memoryASet16(ds, 0x20cf4f, memoryAGet16(ds, 0x20cf4f) + ax);
    goto loc_1d61d9;
loc_1d6196: // 0160:1d6196
    if ((short)memoryAGet16(ds, 0x20cf4f) <= (short)0x0252)
        goto loc_1d61d9;
    if ((short)memoryAGet16(ds, 0x20cf4f) >= (short)0x03ce)
        goto loc_1d61d9;
    if ((short)memoryAGet16(ds, 0x20cf61) <= (short)0x00af)
        goto loc_1d61d9;
    if ((short)memoryAGet16(ds, 0x20cf61) >= (short)0x01d2)
        goto loc_1d61d9;
    if (memoryAGet16(ds, 0x20cf85) >= 0x0020)
        goto loc_1d61d9;
    memoryASet16(ds, 0x20cf85, 0x0020);
loc_1d61d9: // 0160:1d61d9
    if (!(memoryAGet16(ds, 0x20cea1) & 0xffff))
        goto loc_1d61ed;
    memoryASet16(ds, 0x20cf51, memoryAGet16(ds, 0x20cf51) + ax);
    goto loc_1d6230;
loc_1d61ed: // 0160:1d61ed
    if ((short)memoryAGet16(ds, 0x20cf51) <= (short)0x0252)
        goto loc_1d6230;
    if ((short)memoryAGet16(ds, 0x20cf51) >= (short)0x03ce)
        goto loc_1d6230;
    if ((short)memoryAGet16(ds, 0x20cf63) <= (short)0x00af)
        goto loc_1d6230;
    if ((short)memoryAGet16(ds, 0x20cf63) >= (short)0x01d2)
        goto loc_1d6230;
    if (memoryAGet16(ds, 0x20cf87) >= 0x0020)
        goto loc_1d6230;
    memoryASet16(ds, 0x20cf87, 0x0020);
loc_1d6230: // 0160:1d6230
    if (!(memoryAGet16(ds, 0x20cea3) & 0xffff))
        goto loc_1d6244;
    memoryASet16(ds, 0x20cf53, memoryAGet16(ds, 0x20cf53) + ax);
    goto loc_1d6287;
loc_1d6244: // 0160:1d6244
    if ((short)memoryAGet16(ds, 0x20cf53) <= (short)0x0252)
        goto loc_1d6287;
    if ((short)memoryAGet16(ds, 0x20cf53) >= (short)0x03ce)
        goto loc_1d6287;
    if ((short)memoryAGet16(ds, 0x20cf65) <= (short)0x00af)
        goto loc_1d6287;
    if ((short)memoryAGet16(ds, 0x20cf65) >= (short)0x01d2)
        goto loc_1d6287;
    if (memoryAGet16(ds, 0x20cf89) >= 0x0020)
        goto loc_1d6287;
    memoryASet16(ds, 0x20cf89, 0x0020);
loc_1d6287: // 0160:1d6287
    if (!(memoryAGet16(ds, 0x20cea5) & 0xffff))
        goto loc_1d629b;
    memoryASet16(ds, 0x20cf55, memoryAGet16(ds, 0x20cf55) + ax);
    goto loc_1d62de;
loc_1d629b: // 0160:1d629b
    if ((short)memoryAGet16(ds, 0x20cf55) <= (short)0x0252)
        goto loc_1d62de;
    if ((short)memoryAGet16(ds, 0x20cf55) >= (short)0x03ce)
        goto loc_1d62de;
    if ((short)memoryAGet16(ds, 0x20cf67) <= (short)0x00af)
        goto loc_1d62de;
    if ((short)memoryAGet16(ds, 0x20cf67) >= (short)0x01d2)
        goto loc_1d62de;
    if (memoryAGet16(ds, 0x20cf8b) >= 0x0020)
        goto loc_1d62de;
    memoryASet16(ds, 0x20cf8b, 0x0020);
loc_1d62de: // 0160:1d62de
    esp += 4;
    return;
    // gap 869 bytes
loc_1d6644: // 0160:1d6644
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1d68ed;
    ax = 0x0064;
    sub_1d3339();
    if (memoryAGet16(ds, 0x20d7f5) != 0x0001)
        goto loc_1d68ee;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d667d;
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) - 0x0001);
loc_1d667d: // 0160:1d667d
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d669f;
    if (memoryAGet(ds, 0x20d125) != 0x38)
        goto loc_1d6715;
    if (memoryAGet16(ds, 0x20cf87) != 0x002a)
        goto loc_1d6715;
loc_1d669f: // 0160:1d669f
    memoryASet16(ds, 0x20cf51, 0x0302);
    memoryASet16(ds, 0x20cf63, 0x0998);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) - 0x0001);
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d6715;
    memoryASet16(ds, 0x20cf87, 0x0002);
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20d05f, 0x000a);
    memoryASet16(ds, 0x20d04d, 0x00a8);
    memoryASet16(ds, 0x20cf99, 0x0040);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0002);
loc_1d6715: // 0160:1d6715
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d6737;
    if (memoryAGet(ds, 0x20d127) != 0x38)
        goto loc_1d67ad;
    if (memoryAGet16(ds, 0x20cf89) != 0x002a)
        goto loc_1d67ad;
loc_1d6737: // 0160:1d6737
    memoryASet16(ds, 0x20cf53, 0x0302);
    memoryASet16(ds, 0x20cf65, 0x0998);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) - 0x0001);
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d67ad;
    memoryASet16(ds, 0x20cf89, 0x0002);
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20d061, 0x000a);
    memoryASet16(ds, 0x20d04f, 0x00a8);
    memoryASet16(ds, 0x20cf9b, 0x0040);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0002);
loc_1d67ad: // 0160:1d67ad
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d67cf;
    if (memoryAGet(ds, 0x20d129) != 0x38)
        goto loc_1d6845;
    if (memoryAGet16(ds, 0x20cf8b) != 0x002a)
        goto loc_1d6845;
loc_1d67cf: // 0160:1d67cf
    memoryASet16(ds, 0x20cf55, 0x0302);
    memoryASet16(ds, 0x20cf67, 0x0998);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) - 0x0001);
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d6845;
    memoryASet16(ds, 0x20cf8b, 0x0002);
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20d063, 0x000a);
    memoryASet16(ds, 0x20d051, 0x00a8);
    memoryASet16(ds, 0x20cf9d, 0x0040);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0002);
loc_1d6845: // 0160:1d6845
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d686b;
    if (memoryAGet(ds, 0x20d123) != 0x38)
        goto loc_1d68ed;
    if (memoryAGet16(ds, 0x20cf85) != 0x002a)
        goto loc_1d68ed;
loc_1d686b: // 0160:1d686b
    memoryASet16(ds, 0x20d861, 0x0001);
    memoryASet16(ds, 0x20cf4f, 0x0302);
    memoryASet16(ds, 0x20cf61, 0x0998);
    memoryASet16(ds, 0x20cf85, 0x0008);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet(ds, 0x20c840, memoryAGet(ds, 0x20c840) & 0x80);
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d68ed;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20d05d, 0x000a);
    memoryASet16(ds, 0x20d04b, 0x00a8);
    memoryASet16(ds, 0x20cf97, 0x0040);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0002);
    memoryASet16(ds, 0x20d861, 0x0000);
loc_1d68ed: // 0160:1d68ed
    esp += 4;
    return;
loc_1d68ee: // 0160:1d68ee
    sub_1d33a0();
    if (memoryAGet16(ds, 0x20d861) & 0xffff)
        goto loc_1d6f9c;
    sub_1d3411();
    if (memoryAGet16(ds, 0x20d17d) == 0x0001)
        goto loc_1d6933;
    if (memoryAGet16(ds, 0x20d17f) == 0x0001)
        goto loc_1d6933;
    if (memoryAGet16(ds, 0x20d181) == 0x0001)
        goto loc_1d6933;
    if (memoryAGet16(ds, 0x20d183) != 0x0001)
        goto loc_1d71cd;
loc_1d6933: // 0160:1d6933
    ax = 0x008c;
    sub_1d34d9();
    if (memoryAGet16(ds, 0x20d7f5) == 0x0002)
        goto loc_1d6eb4;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0003)
        goto loc_1d6c52;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d6a94;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d6a82;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d6a6e;
    memoryASet16(ds, 0x20d7af, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d69ac;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d69ac: // 0160:1d69ac
    ax = 0x0003;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d69c2;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d69c2: // 0160:1d69c2
    ax = 0x0004;
loc_1d69c6: // 0160:1d69c6
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7ab, ax);
    ax -= 0x0001;
    memoryASet16(ds, 0x20d7a7, ax);
    if (!ax)
        goto loc_1d6dcf;
    if (ax == 0x0001)
        goto loc_1d6c82;
    if (ax == 0x0002)
        goto loc_1d6d09;
    memoryASet16(ds, 0x20cf55, 0x01b8);
    memoryASet16(ds, 0x20cf67, 0x09ac);
    memoryASet16(ds, 0x20cf79, 0x0001);
    memoryASet16(ds, 0x20cf8b, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20d051, 0x04a1);
    memoryASet16(ds, 0x20d04b, 0x04a0);
    memoryASet16(ds, 0x20d04d, 0x04a0);
    memoryASet16(ds, 0x20d04f, 0x04a0);
    goto loc_1d6f82;
loc_1d6a6e: // 0160:1d6a6e
    memoryASet16(ds, 0x20d7ad, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
    goto loc_1d6a94;
loc_1d6a82: // 0160:1d6a82
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d6a94: // 0160:1d6a94
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d6b13;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d6b01;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d6aed;
    memoryASet16(ds, 0x20d7af, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d69ac;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
    goto loc_1d69ac;
loc_1d6aed: // 0160:1d6aed
    memoryASet16(ds, 0x20d7ad, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
    goto loc_1d6b13;
loc_1d6b01: // 0160:1d6b01
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d6b13: // 0160:1d6b13
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d6bb0;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d6b9e;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d6b8a;
    memoryASet16(ds, 0x20d7af, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d6b67;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d6b67: // 0160:1d6b67
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d6b81;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d6b81: // 0160:1d6b81
    ax = 0x0004;
    goto loc_1d69c6;
loc_1d6b8a: // 0160:1d6b8a
    memoryASet16(ds, 0x20d7ad, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
    goto loc_1d6bb0;
loc_1d6b9e: // 0160:1d6b9e
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d6bb0: // 0160:1d6bb0
    if (memoryAGet16(ds, 0x20cf8b) != 0x0034)
        goto loc_1d6c4d;
    if (!(memoryAGet16(ds, 0x20d7a9) & 0xffff))
        goto loc_1d6c3b;
    if (!(memoryAGet16(ds, 0x20d7ad) & 0xffff))
        goto loc_1d6c27;
    memoryASet16(ds, 0x20d7af, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    ax = 0x0001;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d6c04;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d6c04: // 0160:1d6c04
    ax = 0x0002;
    if (ax == memoryAGet16(ds, 0x20d7a9))
        goto loc_1d6c1e;
    if (ax != memoryAGet16(ds, 0x20d7ad))
        goto loc_1d69c6;
loc_1d6c1e: // 0160:1d6c1e
    ax = 0x0003;
    goto loc_1d69c6;
loc_1d6c27: // 0160:1d6c27
    memoryASet16(ds, 0x20d7ad, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
    goto loc_1d6c4d;
loc_1d6c3b: // 0160:1d6c3b
    memoryASet16(ds, 0x20d7a9, 0x0004);
    memoryASet16(ds, 0x20cf8b, 0x0049);
loc_1d6c4d: // 0160:1d6c4d
    goto loc_1d71cd;
loc_1d6c52: // 0160:1d6c52
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d6da2;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d6d90;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0002)
        goto loc_1d6d09;
loc_1d6c82: // 0160:1d6c82
    memoryASet16(ds, 0x20d7ab, 0x0002);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x01b8);
    memoryASet16(ds, 0x20cf63, 0x09ac);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04d, 0x04a1);
    memoryASet16(ds, 0x20d04b, 0x04a0);
    memoryASet16(ds, 0x20d04f, 0x04a0);
    memoryASet16(ds, 0x20d051, 0x04a0);
    goto loc_1d6f82;
loc_1d6d09: // 0160:1d6d09
    memoryASet16(ds, 0x20d7ab, 0x0003);
    memoryASet16(ds, 0x20d7a7, 0x0002);
    memoryASet16(ds, 0x20cf53, 0x01b8);
    memoryASet16(ds, 0x20cf65, 0x09ac);
    memoryASet16(ds, 0x20cf77, 0x0001);
    memoryASet16(ds, 0x20cf89, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf85, ax);
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf73, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04f, 0x04a1);
    memoryASet16(ds, 0x20d04b, 0x04a0);
    memoryASet16(ds, 0x20d04d, 0x04a0);
    memoryASet16(ds, 0x20d051, 0x04a0);
    goto loc_1d6f82;
loc_1d6d90: // 0160:1d6d90
    memoryASet16(ds, 0x20d7a9, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0049);
loc_1d6da2: // 0160:1d6da2
    if (memoryAGet16(ds, 0x20cf87) != 0x0034)
        goto loc_1d6e68;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (memoryAGet16(ds, 0x20cf87) == 0x0034)
        goto loc_1d6e56;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d6d09;
loc_1d6dcf: // 0160:1d6dcf
    memoryASet16(ds, 0x20d7ab, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x01b8);
    memoryASet16(ds, 0x20cf61, 0x09ac);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    ax = 0x0034;
    memoryASet16(ds, 0x20cf87, ax);
    memoryASet16(ds, 0x20cf89, ax);
    memoryASet16(ds, 0x20cf8b, ax);
    memoryASet16(ds, 0x20cf75, ax);
    memoryASet16(ds, 0x20cf77, ax);
    memoryASet16(ds, 0x20cf79, ax);
    memoryASet16(ds, 0x20d04b, 0x04a1);
    memoryASet16(ds, 0x20d04d, 0x04a0);
    memoryASet16(ds, 0x20d04f, 0x04a0);
    memoryASet16(ds, 0x20d051, 0x04a0);
    goto loc_1d6f82;
loc_1d6e56: // 0160:1d6e56
    memoryASet16(ds, 0x20d7a9, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0049);
loc_1d6e68: // 0160:1d6e68
    if (memoryAGet16(ds, 0x20cf89) != 0x0034)
        goto loc_1d6eaf;
    ax = memoryAGet16(ds, 0x20d7a9);
    if (!ax)
        goto loc_1d6e9d;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    if (ax == 0x0001)
        goto loc_1d6c82;
    goto loc_1d6dcf;
loc_1d6e9d: // 0160:1d6e9d
    memoryASet16(ds, 0x20d7a9, 0x0003);
    memoryASet16(ds, 0x20cf89, 0x0049);
loc_1d6eaf: // 0160:1d6eaf
    goto loc_1d71cd;
loc_1d6eb4: // 0160:1d6eb4
    if (memoryAGet16(ds, 0x20cf87) == 0x0034)
        goto loc_1d6f28;
    if (memoryAGet16(ds, 0x20cf85) != 0x0034)
        goto loc_1d71cd;
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0001);
    memoryASet16(ds, 0x20cf51, 0x01b8);
    memoryASet16(ds, 0x20cf63, 0x09ac);
    memoryASet16(ds, 0x20cf75, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0034);
    memoryASet16(ds, 0x20cf73, 0x0034);
    memoryASet16(ds, 0x20d04d, 0x04a1);
    memoryASet16(ds, 0x20d04b, 0x04a0);
    goto loc_1d6f82;
loc_1d6f28: // 0160:1d6f28
    memoryASet16(ds, 0x20d7a5, 0x0001);
    memoryASet16(ds, 0x20d7a7, 0x0000);
    memoryASet16(ds, 0x20cf4f, 0x01b8);
    memoryASet16(ds, 0x20cf61, 0x09ac);
    memoryASet16(ds, 0x20cf73, 0x0001);
    memoryASet16(ds, 0x20cf85, 0x0001);
    memoryASet16(ds, 0x20cf87, 0x0034);
    memoryASet16(ds, 0x20cf75, 0x0034);
    memoryASet16(ds, 0x20d04b, 0x04a1);
    memoryASet16(ds, 0x20d04d, 0x04a0);
loc_1d6f82: // 0160:1d6f82
    ax = 0x0170;
    bx = 0x0980;
    cx = 0x0208;
    dx = 0x0980;
    sub_1d359b();
    goto loc_1d71cd;
loc_1d6f9c: // 0160:1d6f9c
    if (memoryAGet16(ds, 0x20d17d) != 0x0001)
        goto loc_1d6fe5;
    memoryASet16(ds, 0x20d06f, 0x000a);
    memoryASet16(ds, 0x20d05d, 0x000a);
    memoryASet16(ds, 0x20cf97, 0x0040);
    memoryASet16(ds, 0x20cfa9, 0x0180);
    memoryASet16(ds, 0x20cf73, 0x0002);
    memoryASet16(ds, 0x20cf85, 0x0002);
    memoryASet16(ds, 0x20d17d, 0x0000);
loc_1d6fe5: // 0160:1d6fe5
    if (memoryAGet16(ds, 0x20d17d) != 0x0002)
        goto loc_1d702e;
    memoryASet16(ds, 0x20d071, 0x000a);
    memoryASet16(ds, 0x20d05f, 0x000a);
    memoryASet16(ds, 0x20cf99, 0x0040);
    memoryASet16(ds, 0x20cfab, 0x0180);
    memoryASet16(ds, 0x20cf75, 0x0002);
    memoryASet16(ds, 0x20cf87, 0x0002);
    memoryASet16(ds, 0x20d17f, 0x0000);
loc_1d702e: // 0160:1d702e
    if (memoryAGet16(ds, 0x20d181) != 0x0001)
        goto loc_1d7077;
    memoryASet16(ds, 0x20d073, 0x000a);
    memoryASet16(ds, 0x20d061, 0x000a);
    memoryASet16(ds, 0x20cf9b, 0x0040);
    memoryASet16(ds, 0x20cfad, 0x0180);
    memoryASet16(ds, 0x20cf77, 0x0002);
    memoryASet16(ds, 0x20cf89, 0x0002);
    memoryASet16(ds, 0x20d181, 0x0000);
loc_1d7077: // 0160:1d7077
    if (memoryAGet16(ds, 0x20d17d) != 0x0004)
        goto loc_1d70c0;
    memoryASet16(ds, 0x20d075, 0x000a);
    memoryASet16(ds, 0x20d063, 0x000a);
    memoryASet16(ds, 0x20cf9d, 0x0040);
    memoryASet16(ds, 0x20cfaf, 0x0180);
    memoryASet16(ds, 0x20cf79, 0x0002);
    memoryASet16(ds, 0x20cf8b, 0x0002);
    memoryASet16(ds, 0x20d183, 0x0000);
loc_1d70c0: // 0160:1d70c0
    memoryASet16(ds, 0x20d861, 0x0000);
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d710a;
    memoryASet16(ds, 0x20d04b, 0x00a8);
    memoryASet16(ds, 0x20cf4f, 0x0302);
    memoryASet16(ds, 0x20cf61, 0x0998);
    memoryASet16(ds, 0x20cf85, 0x0026);
    memoryASet16(ds, 0x20cfa9, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d710a: // 0160:1d710a
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d714b;
    memoryASet16(ds, 0x20d04d, 0x00a8);
    memoryASet16(ds, 0x20cf51, 0x0302);
    memoryASet16(ds, 0x20cf63, 0x0998);
    memoryASet16(ds, 0x20cf87, 0x0026);
    memoryASet16(ds, 0x20cfab, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d714b: // 0160:1d714b
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d718c;
    memoryASet16(ds, 0x20d04f, 0x00a8);
    memoryASet16(ds, 0x20cf53, 0x0302);
    memoryASet16(ds, 0x20cf65, 0x0998);
    memoryASet16(ds, 0x20cf89, 0x0026);
    memoryASet16(ds, 0x20cfad, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d718c: // 0160:1d718c
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d71cd;
    memoryASet16(ds, 0x20d051, 0x00a8);
    memoryASet16(ds, 0x20cf55, 0x0302);
    memoryASet16(ds, 0x20cf67, 0x0998);
    memoryASet16(ds, 0x20cf8b, 0x0026);
    memoryASet16(ds, 0x20cfaf, 0x0000);
    memoryASet16(ds, 0x20d861, 0x0001);
loc_1d71cd: // 0160:1d71cd
    esp += 4;
    return;
    // gap 8172 bytes
loc_1d91ba: // 0160:1d91ba
    dx = 0;
    dx |= 0x0010;
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
}
void sub_1d1ece() // 0160:1d1ece +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    cx = memoryAGet16(ds, 0x20d373);
    if (!cx)
        goto loc_1d1f22;
    if (cx != 0x0009)
        goto loc_1d1f06;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d371, 0x0001);
    memoryASet16(ds, 0x20d373, 0x0000);
    goto loc_1d1f22;
loc_1d1f06: // 0160:1d1f06
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1f1b;
    memoryASet16(ds, 0x20d373, memoryAGet16(ds, 0x20d373) - 0x0001);
loc_1d1f1b: // 0160:1d1f1b
    ax += cx;
    ax -= 0x0001;
loc_1d1f22: // 0160:1d1f22
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d371);
    if (cx == 0x0006)
        goto loc_1d1f56;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d371);
    if (!ax)
        goto loc_1d1f56;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1f56;
    memoryASet16(ds, 0x20d371, memoryAGet16(ds, 0x20d371) + 0x0001);
loc_1d1f56: // 0160:1d1f56
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    cx = memoryAGet16(ds, 0x20d37b);
    if (!cx)
        goto loc_1d1faa;
    if (cx != 0x0009)
        goto loc_1d1f8e;
    sub_1d1fdf();
    memoryASet16(ds, 0x20d379, 0x0001);
    memoryASet16(ds, 0x20d37b, 0x0000);
    goto loc_1d1faa;
loc_1d1f8e: // 0160:1d1f8e
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    if (cx)
        goto loc_1d1fa3;
    memoryASet16(ds, 0x20d37b, memoryAGet16(ds, 0x20d37b) - 0x0001);
loc_1d1fa3: // 0160:1d1fa3
    ax += cx;
    ax -= 0x0001;
loc_1d1faa: // 0160:1d1faa
    ecx = 0;
    cx = memoryAGet16(ds, 0x20d379);
    if (cx == 0x0006)
        goto loc_1d1fde;
    sub_1d1feb();
    ax = memoryAGet16(ds, 0x20d379);
    if (!ax)
        goto loc_1d1fde;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d1fde;
    memoryASet16(ds, 0x20d379, memoryAGet16(ds, 0x20d379) + 0x0001);
loc_1d1fde: // 0160:1d1fde
    esp += 4;
    return;
}
void sub_1d1fdf() // 0160:1d1fdf +long
{
    esp -= 4;
    push32(eax);
    push32(ebx);
    al = 0x54;
    sub_1b17b7();
    ebx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1d1feb() // 0160:1d1feb +long
{
    esp -= 4;
    cx <<= 5;
    push32(esi);
    esi = 0x00208ac4;
    ecx &= 0x0000ffff;
    esi += ecx;
    memoryASet32(ds, 0x20ceef, esi);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d2019;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d20fb;
loc_1d2019: // 0160:1d2019
    bx -= 0x0001;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d2033;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d20fb;
loc_1d2033: // 0160:1d2033
    if (bx >= 0x0178)
        goto loc_1d20fb;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d20fb;
    ax += memoryAGet16(ds, esi);
    bx += memoryAGet16(ds, esi + 2);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    cx = memoryAGet16(ds, esi + 4);
    dx = memoryAGet16(ds, esi + 6);
    sub_1b19e0();
    esi = memoryAGet32(ds, 0x20ceef);
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += memoryAGet16(ds, esi + 8);
    bx += memoryAGet16(ds, esi + 10);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    cx = memoryAGet16(ds, esi + 12);
    dx = memoryAGet16(ds, esi + 14);
    sub_1b19e0();
    esi = memoryAGet32(ds, 0x20ceef);
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += memoryAGet16(ds, esi + 16);
    bx += memoryAGet16(ds, esi + 18);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    cx = memoryAGet16(ds, esi + 20);
    dx = memoryAGet16(ds, esi + 22);
    sub_1b19e0();
    esi = memoryAGet32(ds, 0x20ceef);
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += memoryAGet16(ds, esi + 24);
    bx += memoryAGet16(ds, esi + 26);
    cx = memoryAGet16(ds, esi + 28);
    dx = memoryAGet16(ds, esi + 30);
    sub_1b19e0();
loc_1d20fb: // 0160:1d20fb
    esi = pop32();
    esp += 4;
}
void sub_1d2341() // 0160:1d2341 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    ax >>= 1;
    ax += 0x0104;
    esi = memoryAGet32(ds, 0x2eeb94);
    memoryASet16(ds, esi + ebx, ax);
    memoryASet16(ds, esi + ebx + 160, ax);
    memoryASet16(ds, esi + ebx + 320, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 2, ax);
    memoryASet16(ds, esi + ebx + 162, ax);
    memoryASet16(ds, esi + ebx + 322, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 4, ax);
    memoryASet16(ds, esi + ebx + 164, ax);
    memoryASet16(ds, esi + ebx + 324, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + -160, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + -158, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + -156, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + 480, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 482, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 484, ax);
    esp += 4;
}
void sub_1d23ff() // 0160:1d23ff +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    ax >>= 1;
    ax += 0x0104;
    esi = memoryAGet32(ds, 0x2eeb94);
    memoryASet16(ds, esi + ebx, ax);
    memoryASet16(ds, esi + ebx + 112, ax);
    memoryASet16(ds, esi + ebx + 224, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 2, ax);
    memoryASet16(ds, esi + ebx + 114, ax);
    memoryASet16(ds, esi + ebx + 226, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 4, ax);
    memoryASet16(ds, esi + ebx + 116, ax);
    memoryASet16(ds, esi + ebx + 228, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + -112, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + -110, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + -108, ax);
    ax += 0x000a;
    memoryASet16(ds, esi + ebx + 336, ax);
    ax += 0x0004;
    memoryASet16(ds, esi + ebx + 338, ax);
    ax += 0x0006;
    memoryASet16(ds, esi + ebx + 340, ax);
    esp += 4;
}
void sub_1d24f6() // 0160:1d24f6 +long +returnZero
{
    esp -= 4;
    esi = 0x00208c94;
loc_1d24fb: // 0160:1d24fb
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax < 0)
        goto loc_1d251c;
    ebx = memoryAGet32(ds, esi);
    esi += 0x00000004;
    ebx += ebx;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += ebx;
    edi -= 0x00000004;
    memoryASet(ds, edi, al);
    goto loc_1d24fb;
loc_1d251c: // 0160:1d251c
    flags.zero = !ax;
    esp += 4;
    return;
}
void sub_1d24fb() // 0160:1d24fb +long
{
    esp -= 4;
loc_1d24fb: // 0160:1d24fb
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax < 0)
        goto loc_1d251c;
    ebx = memoryAGet32(ds, esi);
    esi += 0x00000004;
    ebx += ebx;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += ebx;
    edi -= 0x00000004;
    memoryASet(ds, edi, al);
    goto loc_1d24fb;
loc_1d251c: // 0160:1d251c
    esp += 4;
    return;
}
void sub_1d2697() // 0160:1d2697 +long
{
    esp -= 4;
    if ((short)ax <= (short)0x010e)
        goto loc_1d26cd;
    if ((short)ax >= (short)0x012e)
        goto loc_1d26cd;
    if ((short)bx <= (short)0x0358)
        goto loc_1d26cd;
    if ((short)bx >= (short)0x03d8)
        goto loc_1d26cd;
    esi = 0x0020d399;
    memoryASet16(ds, esi + 6, memoryAGet16(ds, esi + 6) + 0x0001);
    if (memoryAGet16(ds, esi + 6) != 0x0003)
        goto loc_1d26cd;
    memoryASet16(ds, esi + 6, 0x0000);
    goto loc_1d27ad;
loc_1d26cd: // 0160:1d26cd
    if ((short)ax <= (short)0x04ee)
        goto loc_1d2703;
    if ((short)ax >= (short)0x050e)
        goto loc_1d2703;
    if ((short)bx <= (short)0x0278)
        goto loc_1d2703;
    if ((short)bx >= (short)0x02f8)
        goto loc_1d2703;
    esi = 0x0020d3c1;
    memoryASet16(ds, esi + 6, memoryAGet16(ds, esi + 6) + 0x0001);
    if (memoryAGet16(ds, esi + 6) != 0x0003)
        goto loc_1d2703;
    memoryASet16(ds, esi + 6, 0x0000);
    goto loc_1d27ad;
loc_1d2703: // 0160:1d2703
    if ((short)ax <= (short)0x0150)
        goto loc_1d2758;
    if ((short)ax >= (short)0x0172)
        goto loc_1d2758;
    if ((short)bx <= (short)0x0348)
        goto loc_1d2758;
    if ((short)bx >= (short)0x03e8)
        goto loc_1d2758;
    esi = 0x0020d3e9;
    memoryASet16(ds, esi + 6, memoryAGet16(ds, esi + 6) + 0x0001);
    if (memoryAGet16(ds, esi + 6) != 0x0003)
        goto loc_1d2758;
    memoryASet16(ds, esi + 6, 0x0000);
    sub_1d27ad();
    ax = memoryAGet16(ds, esi + 44);
    if (ax == memoryAGet16(ds, esi + 48))
        goto loc_1d2748;
    memoryASet16(ds, esi + 44, memoryAGet16(ds, esi + 44) + 0x0001);
loc_1d2748: // 0160:1d2748
    ax = memoryAGet16(ds, esi + 54);
    if (ax == memoryAGet16(ds, esi + 58))
        goto loc_1d2757;
    memoryASet16(ds, esi + 54, memoryAGet16(ds, esi + 54) + 0x0001);
loc_1d2757: // 0160:1d2757
    esp += 4;
    return;
loc_1d2758: // 0160:1d2758
    if ((short)ax <= (short)0x0530)
        goto loc_1d27ac;
    if ((short)ax >= (short)0x0552)
        goto loc_1d27ac;
    if ((short)bx <= (short)0x0258)
        goto loc_1d27ac;
    if ((short)bx >= (short)0x02f8)
        goto loc_1d27ac;
    esi = 0x0020d425;
    memoryASet16(ds, esi + 6, memoryAGet16(ds, esi + 6) + 0x0001);
    if (memoryAGet16(ds, esi + 6) != 0x0003)
        goto loc_1d27ac;
    memoryASet16(ds, esi + 6, 0x0000);
    sub_1d27ad();
    ax = memoryAGet16(ds, esi + 44);
    if (ax == memoryAGet16(ds, esi + 48))
        goto loc_1d279d;
    memoryASet16(ds, esi + 44, memoryAGet16(ds, esi + 44) + 0x0001);
loc_1d279d: // 0160:1d279d
    ax = memoryAGet16(ds, esi + 54);
    if (ax == memoryAGet16(ds, esi + 58))
        goto loc_1d27ac;
    memoryASet16(ds, esi + 54, memoryAGet16(ds, esi + 54) + 0x0001);
loc_1d27ac: // 0160:1d27ac
    esp += 4;
    return;
loc_1d27ad: // 0160:1d27ad
    ax = memoryAGet16(ds, esi + 4);
    if (ax == memoryAGet16(ds, esi + 8))
        goto loc_1d27bc;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 0x0001);
loc_1d27bc: // 0160:1d27bc
    ax = memoryAGet16(ds, esi + 14);
    if (ax == memoryAGet16(ds, esi + 18))
        goto loc_1d27cb;
    memoryASet16(ds, esi + 14, memoryAGet16(ds, esi + 14) + 0x0001);
loc_1d27cb: // 0160:1d27cb
    ax = memoryAGet16(ds, esi + 24);
    if (ax == memoryAGet16(ds, esi + 28))
        goto loc_1d27da;
    memoryASet16(ds, esi + 24, memoryAGet16(ds, esi + 24) + 0x0001);
loc_1d27da: // 0160:1d27da
    ax = memoryAGet16(ds, esi + 34);
    if (ax == memoryAGet16(ds, esi + 38))
        goto loc_1d27e9;
    memoryASet16(ds, esi + 34, memoryAGet16(ds, esi + 34) + 0x0001);
loc_1d27e9: // 0160:1d27e9
    esp += 4;
    return;
}
void sub_1d27ad() // 0160:1d27ad +long
{
    esp -= 4;
    ax = memoryAGet16(ds, esi + 4);
    if (ax == memoryAGet16(ds, esi + 8))
        goto loc_1d27bc;
    memoryASet16(ds, esi + 4, memoryAGet16(ds, esi + 4) + 0x0001);
loc_1d27bc: // 0160:1d27bc
    ax = memoryAGet16(ds, esi + 14);
    if (ax == memoryAGet16(ds, esi + 18))
        goto loc_1d27cb;
    memoryASet16(ds, esi + 14, memoryAGet16(ds, esi + 14) + 0x0001);
loc_1d27cb: // 0160:1d27cb
    ax = memoryAGet16(ds, esi + 24);
    if (ax == memoryAGet16(ds, esi + 28))
        goto loc_1d27da;
    memoryASet16(ds, esi + 24, memoryAGet16(ds, esi + 24) + 0x0001);
loc_1d27da: // 0160:1d27da
    ax = memoryAGet16(ds, esi + 34);
    if (ax == memoryAGet16(ds, esi + 38))
        goto loc_1d27e9;
    memoryASet16(ds, esi + 34, memoryAGet16(ds, esi + 34) + 0x0001);
loc_1d27e9: // 0160:1d27e9
    esp += 4;
    return;
}
void sub_1d3339() // 0160:1d3339 +long
{
    esp -= 4;
    bl = 0x38;
    if (bl != memoryAGet(ds, 0x20d123))
        goto loc_1d3354;
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d3354;
    memoryASet16(ds, 0x20d17d, ax);
loc_1d3354: // 0160:1d3354
    if (bl != memoryAGet(ds, 0x20d125))
        goto loc_1d336d;
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d336d;
    memoryASet16(ds, 0x20d17f, ax);
loc_1d336d: // 0160:1d336d
    if (bl != memoryAGet(ds, 0x20d127))
        goto loc_1d3386;
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d3386;
    memoryASet16(ds, 0x20d181, ax);
loc_1d3386: // 0160:1d3386
    if (bl != memoryAGet(ds, 0x20d129))
        goto loc_1d339f;
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d339f;
    memoryASet16(ds, 0x20d183, ax);
loc_1d339f: // 0160:1d339f
    esp += 4;
    return;
}
void sub_1d33a0() // 0160:1d33a0 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d33bc;
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) - 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0001);
loc_1d33bc: // 0160:1d33bc
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d33d8;
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) - 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0001);
loc_1d33d8: // 0160:1d33d8
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d33f4;
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) - 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0001);
loc_1d33f4: // 0160:1d33f4
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d3410;
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) - 0x0001);
    memoryASet16(ds, 0x20d7b1, 0x0001);
loc_1d3410: // 0160:1d3410
    esp += 4;
    return;
}
void sub_1d3411() // 0160:1d3411 +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20d17d) & 0xffff))
        goto loc_1d342f;
    if (memoryAGet16(ds, 0x20cf85) != 0x002b)
        goto loc_1d342f;
    memoryASet16(ds, 0x20cf85, 0x002a);
loc_1d342f: // 0160:1d342f
    if (!(memoryAGet16(ds, 0x20d17f) & 0xffff))
        goto loc_1d344d;
    if (memoryAGet16(ds, 0x20cf87) != 0x002b)
        goto loc_1d344d;
    memoryASet16(ds, 0x20cf87, 0x002a);
loc_1d344d: // 0160:1d344d
    if (!(memoryAGet16(ds, 0x20d181) & 0xffff))
        goto loc_1d346b;
    if (memoryAGet16(ds, 0x20cf89) != 0x002b)
        goto loc_1d346b;
    memoryASet16(ds, 0x20cf89, 0x002a);
loc_1d346b: // 0160:1d346b
    if (!(memoryAGet16(ds, 0x20d183) & 0xffff))
        goto loc_1d3489;
    if (memoryAGet16(ds, 0x20cf8b) != 0x002b)
        goto loc_1d3489;
    memoryASet16(ds, 0x20cf8b, 0x002a);
loc_1d3489: // 0160:1d3489
    esp += 4;
    return;
}
void sub_1d348a() // 0160:1d348a +long
{
    esp -= 4;
    ax += 0x0008;
    bx += 0x0008;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d34a8;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d34d8;
loc_1d34a8: // 0160:1d34a8
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d34be;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d34d8;
loc_1d34be: // 0160:1d34be
    if (bx >= 0x0178)
        goto loc_1d34d8;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d34d8;
    dx = 0x0010;
    cx = 0x0073;
    sub_1b19e0();
loc_1d34d8: // 0160:1d34d8
    esp += 4;
    return;
}
void sub_1d34d9() // 0160:1d34d9 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d861, 0x0001);
    if (memoryAGet16(ds, 0x20d17d) & 0xffff)
        goto loc_1d3502;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0021)
        goto loc_1d3510;
    memoryASet16(ds, 0x20cf85, 0x0034);
    goto loc_1d3510;
loc_1d3502: // 0160:1d3502
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) + ax);
    memoryASet16(ds, 0x20d17d, memoryAGet16(ds, 0x20d17d) >> 1);
loc_1d3510: // 0160:1d3510
    if (memoryAGet16(ds, 0x20d17f) & 0xffff)
        goto loc_1d3530;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0021)
        goto loc_1d353e;
    memoryASet16(ds, 0x20cf87, 0x0034);
    goto loc_1d353e;
loc_1d3530: // 0160:1d3530
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) + ax);
    memoryASet16(ds, 0x20d17f, memoryAGet16(ds, 0x20d17f) >> 1);
loc_1d353e: // 0160:1d353e
    if (memoryAGet16(ds, 0x20d181) & 0xffff)
        goto loc_1d355e;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0021)
        goto loc_1d356c;
    memoryASet16(ds, 0x20cf89, 0x0034);
    goto loc_1d356c;
loc_1d355e: // 0160:1d355e
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) + ax);
    memoryASet16(ds, 0x20d181, memoryAGet16(ds, 0x20d181) >> 1);
loc_1d356c: // 0160:1d356c
    if (memoryAGet16(ds, 0x20d183) & 0xffff)
        goto loc_1d358c;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0021)
        goto loc_1d359a;
    memoryASet16(ds, 0x20cf8b, 0x0034);
    goto loc_1d359a;
loc_1d358c: // 0160:1d358c
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) + ax);
    memoryASet16(ds, 0x20d183, memoryAGet16(ds, 0x20d183) >> 1);
loc_1d359a: // 0160:1d359a
    esp += 4;
    return;
}
void sub_1d359b() // 0160:1d359b +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d17d, 0x0000);
    memoryASet16(ds, 0x20d17f, 0x0000);
    memoryASet16(ds, 0x20d181, 0x0000);
    memoryASet16(ds, 0x20d183, 0x0000);
    memoryASet(ds, 0x20d123, 0x00);
    memoryASet(ds, 0x20d125, 0x00);
    memoryASet(ds, 0x20d127, 0x00);
    memoryASet(ds, 0x20d129, 0x00);
    memoryASet16(ds, 0x20d861, 0x0000);
    memoryASet16(ds, 0x20d0b7, ax);
    memoryASet16(ds, 0x20d0bf, ax);
    memoryASet16(ds, 0x20d0c7, ax);
    memoryASet16(ds, 0x20d0cf, ax);
    memoryASet16(ds, 0x20d0b9, bx);
    memoryASet16(ds, 0x20d0c1, bx);
    memoryASet16(ds, 0x20d0c9, bx);
    memoryASet16(ds, 0x20d0d1, bx);
    memoryASet16(ds, 0x20d0bb, cx);
    memoryASet16(ds, 0x20d0c3, cx);
    memoryASet16(ds, 0x20d0cb, cx);
    memoryASet16(ds, 0x20d0d3, cx);
    memoryASet16(ds, 0x20d0bd, dx);
    memoryASet16(ds, 0x20d0c5, dx);
    memoryASet16(ds, 0x20d0cd, dx);
    memoryASet16(ds, 0x20d0d5, dx);
    esp += 4;
}
void sub_1d4dd2() // 0160:1d4dd2 +long
{
    esp -= 4;
    goto loc_1d4dd2;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 53666 bytes
loc_1d4dd2: // 0160:1d4dd2
    if ((short)bx <= (short)0x012c)
        goto loc_1d4e2e;
    if ((short)bx >= (short)0x0162)
        goto loc_1d4e2e;
    if ((short)ax <= (short)0x044e)
        goto loc_1d4e2e;
    if ((short)ax >= (short)0x06ce)
        goto loc_1d4e2e;
    ax -= 0x044e;
    ax >>= 4;
    ax <<= 1;
    eax &= 0x0000ffff;
    esi = 0x0020d36d;
    bx = memoryAGet16(ds, esi + eax);
    if (bx == 0x0004)
        goto loc_1d4e29;
    if ((short)bx >= (short)0x0005)
        goto loc_1d4e2e;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0002);
    if (memoryAGet16(ds, esi + eax) != 0x0002)
        goto loc_1d4e2e;
    ax >>= 1;
    ax += 0x000a;
    goto loc_1b17b7;
loc_1d4e29: // 0160:1d4e29
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0001);
loc_1d4e2e: // 0160:1d4e2e
    esp += 4;
    return;
}
void sub_1d4e8e() // 0160:1d4e8e +long
{
    esp -= 4;
    if ((short)bx <= (short)0x0070)
        goto loc_1d4eca;
    if ((short)bx >= (short)0x0154)
        goto loc_1d4eca;
    if ((short)ax <= (short)0x0150)
        goto loc_1d4eca;
    if ((short)ax >= (short)0x0430)
        goto loc_1d4eca;
    ax -= 0x0150;
    ax >>= 5;
    ax <<= 3;
    eax &= 0x0000ffff;
    esi = 0x0020d385;
    if (memoryAGet16(ds, esi + eax) == 0x0003)
        goto loc_1d4ec9;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0002);
loc_1d4ec9: // 0160:1d4ec9
    esp += 4;
    return;
loc_1d4eca: // 0160:1d4eca
    if ((short)bx <= (short)0x0448)
        goto loc_1d4f06;
    if ((short)bx >= (short)0x053c)
        goto loc_1d4f06;
    if ((short)ax <= (short)0x02f0)
        goto loc_1d4f06;
    if ((short)ax >= (short)0x05d0)
        goto loc_1d4f06;
    ax -= 0x02f0;
    ax >>= 5;
    ax <<= 3;
    eax &= 0x0000ffff;
    esi = 0x0020d43d;
    if (memoryAGet16(ds, esi + eax) == 0x0003)
        goto loc_1d4f06;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0002);
loc_1d4f06: // 0160:1d4f06
    esp += 4;
    return;
}
void sub_1d4f07() // 0160:1d4f07 +long
{
    esp -= 4;
    cx >>= 1;
    bx += cx;
    ax += cx;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d4f26;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d4f88;
loc_1d4f26: // 0160:1d4f26
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d4f3c;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d4f88;
loc_1d4f3c: // 0160:1d4f3c
    if (bx >= 0x0178)
        goto loc_1d4f88;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d4f88;
    dx = 0x0010;
    cx = 0x0072;
    push32(eax);
    push32(ebx);
    sub_1b19e0();
    ebx = pop32();
    eax = pop32();
    ax += 0x000b;
    bx += 0x0020;
    dx = 0x0010;
    cx = 0x0073;
    push32(eax);
    push32(ebx);
    sub_1b19e0();
    ebx = pop32();
    eax = pop32();
    bx += 0x0020;
    dx = 0x0010;
    cx = 0x0073;
    sub_1b19e0();
loc_1d4f88: // 0160:1d4f88
    esp += 4;
    return;
}
void sub_1d562f() // 0160:1d562f +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d1e9, 0x0000);
    if (memoryAGet(ds, 0x20c848) & 0xff)
        goto loc_1d5673;
    if (!(memoryAGet16(ds, 0x20d1eb) & 0xffff))
        goto loc_1d5673;
    ax = memoryAGet16(ds, 0x20d1df);
    memoryASet16(ds, 0x20d875, ax);
    ax = memoryAGet16(ds, 0x20d1f5);
    if ((short)ax <= (short)0x006e)
        goto loc_1d5668;
    ax = 0x006e;
loc_1d5668: // 0160:1d5668
    memoryASet16(ds, 0x20d873, ax);
    goto loc_1d58e6;
loc_1d5673: // 0160:1d5673
    if ((short)memoryAGet16(ds, 0x20cf5f) <= (short)0x04b0)
        goto loc_1d5693;
    memoryASet16(ds, 0x20d86f, 0x0001);
    ax = memoryAGet16(ds, 0x20cf5f);
    ax -= 0x04b0;
    goto loc_1d56a7;
loc_1d5693: // 0160:1d5693
    memoryASet16(ds, 0x20d86f, 0x0000);
    ax = 0x04b0;
    ax -= memoryAGet16(ds, 0x20cf5f);
loc_1d56a7: // 0160:1d56a7
    memoryASet16(ds, 0x20ceb7, ax);
    edx = 0;
    mul16(ax);
    memoryASet16(ds, 0x20ceb3, ax);
    if ((short)memoryAGet16(ds, 0x20cf71) <= (short)0x00d0)
        goto loc_1d56d8;
    memoryASet16(ds, 0x20d871, 0x0001);
    ax = memoryAGet16(ds, 0x20cf71);
    ax -= 0x00d0;
    goto loc_1d56ec;
loc_1d56d8: // 0160:1d56d8
    memoryASet16(ds, 0x20d871, 0x0000);
    ax = 0x00d0;
    ax -= memoryAGet16(ds, 0x20cf71);
loc_1d56ec: // 0160:1d56ec
    memoryASet16(ds, 0x20ceb9, ax);
    edx = 0;
    mul16(ax);
    memoryASet16(ds, 0x20ceb5, ax);
    ax += memoryAGet16(ds, 0x20ceb3);
    esi = 0x00201726;
    edi = 0x00201766;
    ebp = 0x002017a4;
    bx = 0;
    cx = 0x003c;
    dx = 0x0078;
loc_1d571e: // 0160:1d571e
    if ((short)ax <= (short)memoryAGet16(ds, edi))
        goto loc_1d5757;
    esi = edi;
    memoryASet32(ds, 0x20e7fd, edi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) + ebp);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) >> 1);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) & 0xfffffffe);
    edi = memoryAGet32(ds, 0x20e7fd);
    bx = cx;
    cx += dx;
    cx >>= 1;
    if (edi == esi)
        goto loc_1d5789;
    if (ebp == edi)
        goto loc_1d5789;
    goto loc_1d571e;
loc_1d5757: // 0160:1d5757
    ebp = edi;
    memoryASet32(ds, 0x20e7fd, edi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) + esi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) >> 1);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) & 0xfffffffe);
    edi = memoryAGet32(ds, 0x20e7fd);
    dx = cx;
    cx += bx;
    cx >>= 1;
    if (edi == esi)
        goto loc_1d5789;
    if (ebp != edi)
        goto loc_1d571e;
loc_1d5789: // 0160:1d5789
    memoryASet16(ds, 0x20d873, cx);
    eax = 0;
    ebx = 0;
    ax = memoryAGet16(ds, 0x20ceb7);
    bx = memoryAGet16(ds, 0x20ceb9);
    if ((short)bx >= (short)ax)
        goto loc_1d57be;
    ax <<= 8;
    if (!(bx & 0xffff))
        goto loc_1d586a;
    push32(edx);
    edx = 0;
    div16(bx);
    edx = pop32();
    goto loc_1d57dc;
loc_1d57be: // 0160:1d57be
    bx <<= 8;
    if (!(ax & 0xffff))
        goto loc_1d586a;
    push32(edx);
    dx = ax;
    ax = bx;
    bx = dx;
    edx = 0;
    div16(bx);
    edx = pop32();
loc_1d57dc: // 0160:1d57dc
    esi = 0x00201624;
    edi = 0x002016a4;
    ebp = 0x00201722;
    bx = 0;
    cx = 0x0040;
    dx = 0x0080;
loc_1d57f6: // 0160:1d57f6
    if ((short)ax <= (short)memoryAGet16(ds, edi))
        goto loc_1d582f;
    esi = edi;
    memoryASet32(ds, 0x20e7fd, edi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) + ebp);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) >> 1);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) & 0xfffffffe);
    edi = memoryAGet32(ds, 0x20e7fd);
    bx = cx;
    cx += dx;
    cx >>= 1;
    if (edi == esi)
        goto loc_1d5861;
    if (ebp == edi)
        goto loc_1d5861;
    goto loc_1d57f6;
loc_1d582f: // 0160:1d582f
    ebp = edi;
    memoryASet32(ds, 0x20e7fd, edi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) + esi);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) >> 1);
    memoryASet32(ds, 0x20e7fd, memoryAGet32(ds, 0x20e7fd) & 0xfffffffe);
    edi = memoryAGet32(ds, 0x20e7fd);
    dx = cx;
    cx += bx;
    cx >>= 1;
    if (edi == esi)
        goto loc_1d5861;
    if (ebp != edi)
        goto loc_1d57f6;
loc_1d5861: // 0160:1d5861
    memoryASet16(ds, 0x20d875, cx);
    goto loc_1d5873;
loc_1d586a: // 0160:1d586a
    memoryASet16(ds, 0x20d875, 0x0080);
loc_1d5873: // 0160:1d5873
    ax = memoryAGet16(ds, 0x20ceb7);
    bx = memoryAGet16(ds, 0x20ceb9);
    if ((short)bx <= (short)ax)
        goto loc_1d5896;
    ax = 0x0080;
    ax -= memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d875, ax);
loc_1d5896: // 0160:1d5896
    if (!(memoryAGet16(ds, 0x20d86f) & 0xffff))
        goto loc_1d58bf;
    if (!(memoryAGet16(ds, 0x20d871) & 0xffff))
        goto loc_1d58e6;
    ax = 0x0100;
    ax -= memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d875, ax);
    goto loc_1d58e6;
loc_1d58bf: // 0160:1d58bf
    if (!(memoryAGet16(ds, 0x20d871) & 0xffff))
        goto loc_1d58d5;
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0100);
    goto loc_1d58e6;
loc_1d58d5: // 0160:1d58d5
    ax = 0x0200;
    ax -= memoryAGet16(ds, 0x20d875);
    memoryASet16(ds, 0x20d875, ax);
loc_1d58e6: // 0160:1d58e6
    memoryASet32(ds, 0x20e805, 0x00007800);
    if ((short)memoryAGet16(ds, 0x20d873) <= (short)0x006e)
        goto loc_1d590e;
    if ((short)memoryAGet16(ds, 0x20d1eb) >= (short)0x000a)
        goto loc_1d590e;
    memoryASet32(ds, 0x20e805, 0x00008000);
loc_1d590e: // 0160:1d590e
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0004);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    esi = 0x00201420;
    ax = memoryAGet16(ds, 0x20d875);
    if ((short)ax <= (short)0x007f)
        goto loc_1d5a74;
    if ((short)ax <= (short)0x00ff)
        goto loc_1d5a17;
    if ((short)ax <= (short)0x017f)
        goto loc_1d59b2;
    ax -= 0x0180;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    dx = 0x04b0;
    dx -= bx;
    bx = dx;
    dx = 0x00d0;
    dx -= cx;
    cx = dx;
    goto loc_1d5ad0;
loc_1d59b2: // 0160:1d59b2
    ax -= 0x0100;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    dx = 0x04b0;
    dx -= bx;
    bx = dx;
    cx += 0x00d0;
    goto loc_1d5ad0;
loc_1d5a17: // 0160:1d5a17
    ax -= 0x0080;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    bx += 0x04b0;
    cx += 0x00d0;
    goto loc_1d5ad0;
loc_1d5a74: // 0160:1d5a74
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    bx += 0x04b0;
    dx = 0x00d0;
    dx -= cx;
    cx = dx;
loc_1d5ad0: // 0160:1d5ad0
    memoryASet16(ds, 0x20cf5f, bx);
    memoryASet16(ds, 0x20cf71, cx);
    memoryASet16(ds, 0x20d1e9, 0x0001);
    esp += 4;
}
void sub_1d58e6() // 0160:1d58e6 +long
{
    esp -= 4;
    memoryASet32(ds, 0x20e805, 0x00007800);
    if ((short)memoryAGet16(ds, 0x20d873) <= (short)0x006e)
        goto loc_1d590e;
    if ((short)memoryAGet16(ds, 0x20d1eb) >= (short)0x000a)
        goto loc_1d590e;
    memoryASet32(ds, 0x20e805, 0x00008000);
loc_1d590e: // 0160:1d590e
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) + 0x0004);
    memoryASet16(ds, 0x20d875, memoryAGet16(ds, 0x20d875) & 0x01ff);
    esi = 0x00201420;
    ax = memoryAGet16(ds, 0x20d875);
    if ((short)ax <= (short)0x007f)
        goto loc_1d5a74;
    if ((short)ax <= (short)0x00ff)
        goto loc_1d5a17;
    if ((short)ax <= (short)0x017f)
        goto loc_1d59b2;
    ax -= 0x0180;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    dx = 0x04b0;
    dx -= bx;
    bx = dx;
    dx = 0x00d0;
    dx -= cx;
    cx = dx;
    goto loc_1d5ad0;
loc_1d59b2: // 0160:1d59b2
    ax -= 0x0100;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    dx = 0x04b0;
    dx -= bx;
    bx = dx;
    cx += 0x00d0;
    goto loc_1d5ad0;
loc_1d5a17: // 0160:1d5a17
    ax -= 0x0080;
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    cx = memoryAGet16(ds, esi + eax);
    bx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    bx += 0x04b0;
    cx += 0x00d0;
    goto loc_1d5ad0;
loc_1d5a74: // 0160:1d5a74
    ax <<= 2;
    eax &= 0x0000ffff;
    ebx = 0;
    ecx = 0;
    edx = 0;
    bx = memoryAGet16(ds, esi + eax);
    cx = memoryAGet16(ds, esi + eax + 2);
    dx = memoryAGet16(ds, 0x20d873);
    push32(eax);
    ebp = edx;
    eax = ebx;
    edx = 0;
    mul32(ebp);
    ebx = eax;
    edx = 0;
    eax = ecx;
    mul32(ebp);
    ecx = eax;
    eax = ebx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    bx = ax;
    eax = ecx;
    edx = 0;
    div32(memoryAGet32(ds, 0x20e805));
    cx = ax;
    eax = pop32();
    bx += 0x04b0;
    dx = 0x00d0;
    dx -= cx;
    cx = dx;
loc_1d5ad0: // 0160:1d5ad0
    memoryASet16(ds, 0x20cf5f, bx);
    memoryASet16(ds, 0x20cf71, cx);
    memoryASet16(ds, 0x20d1e9, 0x0001);
    esp += 4;
}
void sub_1d5ba6() // 0160:1d5ba6 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20ce91) != 0x0010)
        goto loc_1d5c1d;
    if (memoryAGet16(ds, 0x2246cc) != 0x0000)
        goto loc_1d5c1d;
    esi = 0x00208cfc;
    edi = 0x0020c898;
    sub_1d5be1();
    esi = 0x00208d1a;
    edi = 0x0020c8ad;
    ax = memoryAGet16(ds, 0x20d36d);
    bx = ax;
    ax += ax;
    ax += bx;
    eax &= 0x0000ffff;
    ecx = 0x00000005;
loc_1d5bf4: // 0160:1d5bf4
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1d5bf4;
    memoryASet16(ds, 0x224666, 0x0003);
    memoryASet16(ds, 0x20eeab, 0x0001);
loc_1d5c1d: // 0160:1d5c1d
    esp += 4;
    return;
}
void sub_1d5be1() // 0160:1d5be1 +long
{
    esp -= 4;
    bx = ax;
    ax += ax;
    ax += bx;
    eax &= 0x0000ffff;
    ecx = 0x00000005;
loc_1d5bf4: // 0160:1d5bf4
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    dl = memoryAGet(ds, esi + eax);
    memoryASet(ds, edi, dl);
    edi++;
    esi++;
    if (--ecx)
        goto loc_1d5bf4;
    memoryASet16(ds, 0x224666, 0x0003);
    memoryASet16(ds, 0x20eeab, 0x0001);
    esp += 4;
}
void sub_1d5c5e() // 0160:1d5c5e +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d1c5);
    ax &= 0x0003;
    if (ax != 0x0003)
        goto loc_1d5c8b;
    if (!(memoryAGet16(ds, 0x20d0ff) & 0xffff))
        goto loc_1d5c8b;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d5e9d();
loc_1d5c8b: // 0160:1d5c8b
    ax = memoryAGet16(ds, 0x20d1c7);
    ax &= 0x0003;
    if (ax != 0x0003)
        goto loc_1d5cb8;
    if (!(memoryAGet16(ds, 0x20d101) & 0xffff))
        goto loc_1d5cb8;
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d5e9d();
loc_1d5cb8: // 0160:1d5cb8
    ax = memoryAGet16(ds, 0x20d1c9);
    ax &= 0x0003;
    if (ax != 0x0003)
        goto loc_1d5ce5;
    if (!(memoryAGet16(ds, 0x20d103) & 0xffff))
        goto loc_1d5ce5;
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d5e9d();
loc_1d5ce5: // 0160:1d5ce5
    ax = memoryAGet16(ds, 0x20d1cb);
    ax &= 0x0003;
    if (ax != 0x0003)
        goto loc_1d5d12;
    if (!(memoryAGet16(ds, 0x20d105) & 0xffff))
        goto loc_1d5d12;
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d5e9d();
loc_1d5d12: // 0160:1d5d12
    if (!(memoryAGet16(ds, 0x20d1c5) & 0xffff))
        goto loc_1d5d4e;
    if ((short)memoryAGet16(ds, 0x20d1c5) <= (short)0x0014)
        goto loc_1d5d3c;
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0021)
        goto loc_1d5d3a;
    memoryASet16(ds, 0x20cf85, 0x003b);
loc_1d5d3a: // 0160:1d5d3a
    goto loc_1d5d4e;
loc_1d5d3c: // 0160:1d5d3c
    if (memoryAGet(ds, 0x20d123) == 0x44)
        goto loc_1d5d4e;
    memoryASet16(ds, 0x20d1c5, 0x0000);
loc_1d5d4e: // 0160:1d5d4e
    if (!(memoryAGet16(ds, 0x20d1c7) & 0xffff))
        goto loc_1d5d8a;
    if ((short)memoryAGet16(ds, 0x20d1c7) <= (short)0x0014)
        goto loc_1d5d78;
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0021)
        goto loc_1d5d76;
    memoryASet16(ds, 0x20cf87, 0x003b);
loc_1d5d76: // 0160:1d5d76
    goto loc_1d5d8a;
loc_1d5d78: // 0160:1d5d78
    if (memoryAGet(ds, 0x20d125) == 0x44)
        goto loc_1d5d8a;
    memoryASet16(ds, 0x20d1c7, 0x0000);
loc_1d5d8a: // 0160:1d5d8a
    if (!(memoryAGet16(ds, 0x20d1c9) & 0xffff))
        goto loc_1d5dc6;
    if ((short)memoryAGet16(ds, 0x20d1c9) <= (short)0x0014)
        goto loc_1d5db4;
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0021)
        goto loc_1d5db2;
    memoryASet16(ds, 0x20cf89, 0x003b);
loc_1d5db2: // 0160:1d5db2
    goto loc_1d5dc6;
loc_1d5db4: // 0160:1d5db4
    if (memoryAGet(ds, 0x20d127) == 0x44)
        goto loc_1d5dc6;
    memoryASet16(ds, 0x20d1c9, 0x0000);
loc_1d5dc6: // 0160:1d5dc6
    if (!(memoryAGet16(ds, 0x20d1cb) & 0xffff))
        goto loc_1d5e02;
    if ((short)memoryAGet16(ds, 0x20d1cb) <= (short)0x0014)
        goto loc_1d5df0;
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0021)
        goto loc_1d5dee;
    memoryASet16(ds, 0x20cf8b, 0x003b);
loc_1d5dee: // 0160:1d5dee
    goto loc_1d5e02;
loc_1d5df0: // 0160:1d5df0
    if (memoryAGet(ds, 0x20d129) == 0x44)
        goto loc_1d5e02;
    memoryASet16(ds, 0x20d1cb, 0x0000);
loc_1d5e02: // 0160:1d5e02
    esi = 0x0020d36d;
    ecx = 0x00000008;
loc_1d5e0c: // 0160:1d5e0c
    push32(esi);
    push32(ecx);
    cx = memoryAGet16(ds, esi + 4);
    if (!cx)
        goto loc_1d5e90;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0003;
    if (ax)
        goto loc_1d5e39;
    cx += 0x0001;
    if (cx != 0x0007)
        goto loc_1d5e35;
    memoryASet16(ds, esi + 4, 0x0000);
    goto loc_1d5e90;
loc_1d5e35: // 0160:1d5e35
    memoryASet16(ds, esi + 4, cx);
loc_1d5e39: // 0160:1d5e39
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d5e90;
    if ((short)ax >= 0)
        goto loc_1d5e5c;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d5e90;
loc_1d5e5c: // 0160:1d5e5c
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d5e6e;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d5e90;
loc_1d5e6e: // 0160:1d5e6e
    if (bx >= 0x0190)
        goto loc_1d5e90;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d5e90;
    cx += 0x0071;
    dx = 0x0010;
    sub_1b19e0();
loc_1d5e90: // 0160:1d5e90
    ecx = pop32();
    esi = pop32();
    esi += 0x00000006;
    ecx--;
    if (ecx)
        goto loc_1d5e0c;
    esp += 4;
}
void sub_1d5e9d() // 0160:1d5e9d +long
{
    esp -= 4;
    esi = 0x0020d36d;
    ecx = 0x00000008;
loc_1d5ea7: // 0160:1d5ea7
    if (!(memoryAGet16(ds, esi + 4) & 0xffff))
        goto loc_1d5eb5;
    esi += 0x00000006;
    if (--ecx)
        goto loc_1d5ea7;
    esp += 4;
    return;
loc_1d5eb5: // 0160:1d5eb5
    ax += 0x0088;
    bx += 0x0088;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, 0x0001);
    al = 0x85;
    sub_1b17b7();
    esp += 4;
}
void sub_1d5ed3() // 0160:1d5ed3 +long
{
    esp -= 4;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += eax;
    esi = 0x00208d38;
    ecx &= 0x0000007e;
    esi += ecx;
    ax = memoryAGet16(ds, esi);
    ax += ax;
    ax += 0x0104;
    memoryASet16(ds, edi + 3470, ax);
    ax++;
    memoryASet16(ds, edi + 3598, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3472, ax);
    ax++;
    memoryASet16(ds, edi + 3600, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3474, ax);
    ax++;
    memoryASet16(ds, edi + 3602, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3476, ax);
    ax++;
    memoryASet16(ds, edi + 3604, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3478, ax);
    ax++;
    memoryASet16(ds, edi + 3606, ax);
    ax += 0x0009;
    memoryASet16(ds, edi + 3480, ax);
    ax++;
    memoryASet16(ds, edi + 3608, ax);
    esp += 4;
}
void sub_1d5fa8() // 0160:1d5fa8 +long
{
    esp -= 4;
    goto loc_1d5fa8;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 148884 bytes
loc_1d5fa8: // 0160:1d5fa8
    bx -= 0x0001;
    cx = memoryAGet16(ds, 0x20c830);
    cx += dx;
    cx &= 0x000f;
    cx >>= 3;
    ax += cx;
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d6005;
    if ((short)ax >= 0)
        goto loc_1d5fd9;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d6005;
loc_1d5fd9: // 0160:1d5fd9
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d5feb;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d6005;
loc_1d5feb: // 0160:1d5feb
    if (bx >= 0x0190)
        goto loc_1d6005;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d6005;
    dx = 0x0010;
    cx = 0x0078;
    goto loc_1b19e0;
loc_1d6005: // 0160:1d6005
    esp += 4;
    return;
}
void sub_1d608c() // 0160:1d608c +long
{
    esp -= 4;
    ax += 0x0090;
    ax -= memoryAGet16(ds, 0x20d36d);
    if ((short)ax < 0)
        goto loc_1d60bc;
    if ((short)ax >= (short)0x0064)
        goto loc_1d60bc;
    bx += 0x0090;
    bx -= memoryAGet16(ds, 0x20d36f);
    if ((short)bx < 0)
        goto loc_1d60bc;
    if ((short)bx >= (short)0x0080)
        goto loc_1d60bc;
    ax = 0x0001;
    esp += 4;
    return;
loc_1d60bc: // 0160:1d60bc
    ax = 0;
    esp += 4;
}
void sub_1d62df() // 0160:1d62df +long
{
    esp -= 4;
    goto loc_1d62df;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 149707 bytes
loc_1d62df: // 0160:1d62df
    esi = 0x002971d4;
    eax = 0;
    bx = memoryAGet16(ds, 0x20d36d);
    bx -= 0x02e0;
    bx &= 0x001f;
    ax = 0x0020;
    ax -= bx;
    esi += eax;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00040014;
    push32(esi);
    ecx = 0x00000040;
loc_1d6311: // 0160:1d6311
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x00000004;
loc_1d6319: // 0160:1d6319
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 4, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 8, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 12, eax);
    edi += 0x00000010;
    esi += 0x00000010;
    if (--ecx)
        goto loc_1d6319;
    edi = pop32();
    esi = pop32();
    esi += 0x000000a0;
    edi += 0x00000140;
    ecx = pop32();
    if (--ecx)
        goto loc_1d6311;
    edi = memoryAGet32(ds, 0x20b800);
    edi += 0x00047814;
    esi = pop32();
    esi += 0x00000040;
    ecx = 0x00000040;
loc_1d638d: // 0160:1d638d
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = 0x00000004;
loc_1d6395: // 0160:1d6395
    al = memoryAGet(ds, esi + 8);
    ah = memoryAGet(ds, esi + 12);
    eax <<= 16;
    al = memoryAGet(ds, esi);
    ah = memoryAGet(ds, esi + 4);
    memoryASet32(ds, edi, eax);
    al = memoryAGet(ds, esi + 9);
    ah = memoryAGet(ds, esi + 13);
    eax <<= 16;
    al = memoryAGet(ds, esi + 1);
    ah = memoryAGet(ds, esi + 5);
    memoryASet32(ds, edi + 4, eax);
    al = memoryAGet(ds, esi + 10);
    ah = memoryAGet(ds, esi + 14);
    eax <<= 16;
    al = memoryAGet(ds, esi + 2);
    ah = memoryAGet(ds, esi + 6);
    memoryASet32(ds, edi + 8, eax);
    al = memoryAGet(ds, esi + 11);
    ah = memoryAGet(ds, esi + 15);
    eax <<= 16;
    al = memoryAGet(ds, esi + 3);
    ah = memoryAGet(ds, esi + 7);
    memoryASet32(ds, edi + 12, eax);
    edi += 0x00000010;
    esi += 0x00000010;
    if (--ecx)
        goto loc_1d6395;
    edi = pop32();
    esi = pop32();
    esi += 0x000000a0;
    edi += 0x00000140;
    ecx = pop32();
    if (--ecx)
        goto loc_1d638d;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d36d);
    ax -= 0x02e0;
    ax >>= 5;
    bx = ax;
    ax <<= 7;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += eax;
    if (bx == 0x0000)
        goto loc_1d6446;
    memoryASet16(ds, edi + 2324, 0x00f3);
    memoryASet16(ds, edi + 2326, 0x00f3);
    memoryASet16(ds, edi + 2328, 0x00f3);
    memoryASet16(ds, edi + 2330, 0x00f3);
    memoryASet16(ds, edi + 2332, 0x00f3);
loc_1d6446: // 0160:1d6446
    memoryASet16(ds, edi + 2452, 0x0102);
    memoryASet16(ds, edi + 2580, 0x0103);
    memoryASet16(ds, edi + 2708, 0x0120);
    memoryASet16(ds, edi + 2454, 0x010c);
    memoryASet16(ds, edi + 2582, 0x010d);
    memoryASet16(ds, edi + 2710, 0x012a);
    memoryASet16(ds, edi + 2456, 0x010c);
    memoryASet16(ds, edi + 2584, 0x010d);
    memoryASet16(ds, edi + 2712, 0x012a);
    memoryASet16(ds, edi + 2458, 0x010c);
    memoryASet16(ds, edi + 2586, 0x010d);
    memoryASet16(ds, edi + 2714, 0x012a);
    memoryASet16(ds, edi + 2460, 0x0116);
    memoryASet16(ds, edi + 2588, 0x0117);
    memoryASet16(ds, edi + 2716, 0x0134);
    if ((short)bx >= (short)0x0009)
        goto loc_1d6533;
    memoryASet16(ds, edi + 2836, 0x0121);
    memoryASet16(ds, edi + 2838, 0x012b);
    memoryASet16(ds, edi + 2840, 0x012b);
    memoryASet16(ds, edi + 2842, 0x012b);
    memoryASet16(ds, edi + 2844, 0x0135);
    if ((short)bx >= (short)0x0008)
        goto loc_1d6533;
    memoryASet16(ds, edi + 2964, 0x00f3);
    memoryASet16(ds, edi + 2966, 0x00f3);
    memoryASet16(ds, edi + 2968, 0x00f3);
    memoryASet16(ds, edi + 2970, 0x00f3);
    memoryASet16(ds, edi + 2972, 0x00f3);
loc_1d6533: // 0160:1d6533
    ax = memoryAGet16(ds, 0x20d36d);
    if ((short)ax <= (short)0x02e9)
        goto loc_1d6597;
    bx = memoryAGet16(ds, 0x20d36f);
    ax -= 0x0008;
    bx -= 0x0004;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x000f;
    cx >>= 2;
    cx += 0x0073;
    sub_1d6603();
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    ax -= 0x0008;
    bx += 0x0078;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x000f;
    cx >>= 2;
    cx += 0x0073;
    dx = 0x0012;
    sub_1d6607();
loc_1d6597: // 0160:1d6597
    ax = memoryAGet16(ds, 0x20d36d);
    if ((short)ax >= (short)0x03f8)
        goto loc_1d6643;
    bx = memoryAGet16(ds, 0x20d36f);
    ax += 0x0056;
    bx -= 0x0004;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x000f;
    cx >>= 2;
    cx += 0x0073;
    dx = 0x0011;
    sub_1d6607();
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    ax += 0x0056;
    bx += 0x0078;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x000f;
    cx >>= 2;
    cx += 0x0073;
    dx = 0x0013;
    goto loc_1d6607;
    // gap 7 bytes
loc_1d6607: // 0160:1d6607
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d6643;
    if ((short)ax >= 0)
        goto loc_1d661f;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d6643;
loc_1d661f: // 0160:1d661f
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d6631;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d6643;
loc_1d6631: // 0160:1d6631
    if (bx >= 0x0190)
        goto loc_1d6643;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d6643;
    goto loc_1b19e0;
loc_1d6643: // 0160:1d6643
    esp += 4;
    return;
}
void sub_1d6603() // 0160:1d6603 +long
{
    esp -= 4;
    goto loc_1d6603;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 150511 bytes
loc_1d6603: // 0160:1d6603
    dx = 0x0010;
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d6643;
    if ((short)ax >= 0)
        goto loc_1d661f;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d6643;
loc_1d661f: // 0160:1d661f
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d6631;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d6643;
loc_1d6631: // 0160:1d6631
    if (bx >= 0x0190)
        goto loc_1d6643;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d6643;
    goto loc_1b19e0;
loc_1d6643: // 0160:1d6643
    esp += 4;
    return;
}
void sub_1d6607() // 0160:1d6607 +long
{
    esp -= 4;
    goto loc_1d6607;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 150515 bytes
loc_1d6607: // 0160:1d6607
    ax -= memoryAGet16(ds, 0x20cf23);
    if (!ax)
        goto loc_1d6643;
    if ((short)ax >= 0)
        goto loc_1d661f;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d6643;
loc_1d661f: // 0160:1d661f
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d6631;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d6643;
loc_1d6631: // 0160:1d6631
    if (bx >= 0x0190)
        goto loc_1d6643;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d6643;
    goto loc_1b19e0;
loc_1d6643: // 0160:1d6643
    esp += 4;
    return;
}
void sub_1d71ce() // 0160:1d71ce +long
{
    esp -= 4;
    goto loc_1d71ce;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 133863 bytes
loc_1d24fb: // 0160:1d24fb
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax < 0)
        goto loc_1d251c;
    ebx = memoryAGet32(ds, esi);
    esi += 0x00000004;
    ebx += ebx;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += ebx;
    edi -= 0x00000004;
    memoryASet(ds, edi, al);
    goto loc_1d24fb;
loc_1d251c: // 0160:1d251c
    esp += 4;
    return;
    // gap 19633 bytes
loc_1d71ce: // 0160:1d71ce
    esi = 0x002088e4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d7b9);
    ax <<= 2;
    eax = memoryAGet32(ds, esi + eax);
    if (!eax)
        goto loc_1d71ea;
    esi = eax;
    switch (esi)
    {
        case 0x1d71eb: goto loc_1d71eb;
        case 0x1d725b: goto loc_1d725b;
        case 0x1d7415: goto loc_1d7415;
        case 0x1d7d17: goto loc_1d7d17;
        case 0x1d7e13: goto loc_1d7e13;
        case 0x1d928a: goto loc_1d928a;
        case 0x1d9633: goto loc_1d9633;
        case 0x1d81f3: goto loc_1d81f3;
        case 0x1d82e4: goto loc_1d82e4;
        case 0x1d84a2: goto loc_1d84a2;
        case 0x1d891c: goto loc_1d891c;
        case 0x1d9685: goto loc_1d9685;
        case 0x1d9208: goto loc_1d9208;
        case 0x1d81d4: goto loc_1d81d4;
        case 0x1da151: goto loc_1da151;
        case 0x1da030: goto loc_1da030;
        case 0x1d8947: goto loc_1d8947;
        case 0x1d8c47: goto loc_1d8c47;
        case 0x1d8f91: goto loc_1d8f91;
        case 0x1d8936: goto loc_1d8936;
        case 0x1da1ba: goto loc_1da1ba;
        default:
            stop("ind 0160:1d71e8");
    }
loc_1d71ea: // 0160:1d71ea
    esp += 4;
    return;
loc_1d71eb: // 0160:1d71eb
    if (memoryAGet16(ds, 0x20c830) & 0xffff)
        goto loc_1d71f6;
loc_1d71f6: // 0160:1d71f6
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x001f;
    if (ax)
        goto loc_1d7218;
    sub_1b1c25();
    if ((char)al >= (char)0x3c)
        goto loc_1d7218;
    ax &= 0x0003;
    ax += 0x005b;
    sub_1b17b7();
loc_1d7218: // 0160:1d7218
    sub_1d81e0();
    ecx = 0x00000004;
loc_1d7222: // 0160:1d7222
    push32(ecx);
    sub_1b1c25();
    memoryASet16(ds, 0x20ceb3, ax);
    sub_1b1c25();
    ax &= 0x00ff;
    ax <<= 1;
    bx = memoryAGet16(ds, 0x20ceb3);
    bx &= 0x00ff;
    bx += 0x0078;
    cx = 0x0080;
    dx = 0x0010;
    sub_1b19e0();
    ecx = pop32();
    if (--ecx)
        goto loc_1d7222;
    esp += 4;
    return;
loc_1d725b: // 0160:1d725b
    sub_1d81e0();
    if (memoryAGet16(ds, 0x20c830) != 0x0096)
        goto loc_1d7274;
    ax = 0x0121;
    sub_1b1715();
loc_1d7274: // 0160:1d7274
    if (memoryAGet16(ds, 0x20d897) & 0xffff)
        goto loc_1d7291;
    ax = 0x0064;
    sub_1b17b7();
    memoryASet16(ds, 0x20d897, 0x0001);
loc_1d7291: // 0160:1d7291
    al = 0x01;
    bx = memoryAGet16(ds, 0x20ed95);
    bx -= 0x0064;
    sub_1ce643();
    ax = memoryAGet16(ds, 0x20ed93);
    if (flags.zero)
        goto loc_1d72c7;
    memoryASet16(ds, 0x20ed95, memoryAGet16(ds, 0x20ed95) + 0x0003);
    if ((short)memoryAGet16(ds, 0x20ed95) <= (short)0x00c8)
        goto loc_1d72da;
    memoryASet16(ds, 0x20ed93, 0x0000);
loc_1d72c7: // 0160:1d72c7
    memoryASet16(ds, 0x20ed95, memoryAGet16(ds, 0x20ed95) - 0x0003);
    if ((short)memoryAGet16(ds, 0x20ed95) >= 0)
        goto loc_1d72da;
    memoryASet16(ds, 0x20ed93, 0x0001);
loc_1d72da: // 0160:1d72da
    sub_1b1c25();
    if ((short)ax >= (short)0x0003)
        goto loc_1d72f9;
    ax = memoryAGet16(ds, 0x20ed93);
    ax += 0x0001;
    ax &= 0x0001;
    memoryASet16(ds, 0x20ed93, ax);
loc_1d72f9: // 0160:1d72f9
    memoryASet32(ds, 0x20d7fb, 0x00000018);
    memoryASet32(ds, 0x20d7ff, 0x00000003);
    esi = 0x0020d38d;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d731b: // 0160:1d731b
    ax = memoryAGet16(ds, esi);
    cx = memoryAGet16(ds, 0x20e809);
    cx >>= 1;
    cx += 0x0007;
    ax += cx;
    ax += memoryAGet16(ds, 0x20d7f1);
    memoryASet16(ds, esi, ax);
    bx = memoryAGet16(ds, esi + 2);
    bx -= 0x0001;
    bx += memoryAGet16(ds, 0x20d7f3);
    memoryASet16(ds, esi + 2, bx);
    cx = memoryAGet16(ds, esi + 4);
    if (cx == 0x0005)
        goto loc_1d7381;
    if (cx == 0x0006)
        goto loc_1d7381;
    dx = memoryAGet16(ds, 0x20c830);
    dx += memoryAGet16(ds, 0x20e809);
    dx &= 0x0007;
    if (dx)
        goto loc_1d7381;
    cx += 0x0001;
    if (cx != 0x0005)
        goto loc_1d737d;
    cx = 0;
loc_1d737d: // 0160:1d737d
    memoryASet16(ds, esi + 4, cx);
loc_1d7381: // 0160:1d7381
    cx += 0x0079;
    if ((short)ax > (short)0x01c0)
        goto loc_1d73b7;
    dx = memoryAGet16(ds, esi + 6);
    ebp = memoryAGet32(ds, 0x20e809);
    push32(ebp);
    push32(esi);
    sub_1b19ac();
    esi = pop32();
    ebp = pop32();
    memoryASet32(ds, 0x20e809, ebp);
    esi += 0x00000008;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d731b;
    goto loc_1d7414;
loc_1d73b7: // 0160:1d73b7
    sub_1b1c25();
    if ((char)al >= (char)0x05)
        goto loc_1d7403;
    memoryASet16(ds, esi, 0x0000);
    sub_1b1c25();
    ax &= 0x00ff;
    ax <<= 1;
    memoryASet16(ds, esi + 2, ax);
    sub_1b1c25();
    ax &= 0x0003;
    ax += 0x0010;
    memoryASet16(ds, esi + 6, ax);
    sub_1b1c25();
    cx = 0;
    if ((short)ax >= (short)0x0040)
        goto loc_1d73ff;
    ax &= 0x0001;
    ax += 0x0005;
    cx = ax;
loc_1d73ff: // 0160:1d73ff
    memoryASet16(ds, esi + 4, cx);
loc_1d7403: // 0160:1d7403
    esi += 0x00000008;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d731b;
loc_1d7414: // 0160:1d7414
    esp += 4;
    return;
loc_1d7415: // 0160:1d7415
    ax = memoryAGet16(ds, 0x20d37d);
    if (!ax)
        goto loc_1d74b4;
    if (ax == 0x0001)
        goto loc_1d746f;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d379);
    bx = memoryAGet16(ds, 0x20d37b);
    bx += 0x0001;
    memoryASet16(ds, 0x20d37b, bx);
    bx &= 0x0007;
    if (bx)
        goto loc_1d745a;
    ax += 0x0001;
    if (ax == 0x003f)
        goto loc_1d74b4;
    memoryASet16(ds, 0x20d379, ax);
loc_1d745a: // 0160:1d745a
    esi = 0x00208e58;
    ax <<= 1;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d377, memoryAGet16(ds, 0x20d377) - ax);
    goto loc_1d74bd;
loc_1d746f: // 0160:1d746f
    eax = 0;
    ax = memoryAGet16(ds, 0x20d379);
    bx = memoryAGet16(ds, 0x20d37b);
    bx += 0x0001;
    memoryASet16(ds, 0x20d37b, bx);
    bx &= 0x0007;
    if (bx)
        goto loc_1d749f;
    ax += 0x0001;
    if (ax == 0x003f)
        goto loc_1d74b4;
    memoryASet16(ds, 0x20d379, ax);
loc_1d749f: // 0160:1d749f
    esi = 0x00208e58;
    ax <<= 1;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d377, memoryAGet16(ds, 0x20d377) + ax);
    goto loc_1d74bd;
loc_1d74b4: // 0160:1d74b4
    memoryASet16(ds, 0x20d37d, 0x0000);
loc_1d74bd: // 0160:1d74bd
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d74e0;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d7530;
loc_1d74e0: // 0160:1d74e0
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d74f6;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d7530;
loc_1d74f6: // 0160:1d74f6
    if (bx >= 0x0178)
        goto loc_1d7530;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d7530;
    dx = 0x0010;
    cx = 0x0071;
    if (!(memoryAGet16(ds, 0x20d37d) & 0xffff))
        goto loc_1d752b;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0003;
    bp >>= 1;
    cx += bp;
loc_1d752b: // 0160:1d752b
    sub_1b19e0();
loc_1d7530: // 0160:1d7530
    sub_1d7d99();
    if (memoryAGet16(ds, 0x20d04b) == 0x0572)
        goto loc_1d756b;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d7586;
    if (memoryAGet16(ds, 0x20d04d) == 0x0572)
        goto loc_1d756b;
    if (memoryAGet16(ds, 0x20d04f) == 0x0572)
        goto loc_1d756b;
    if (memoryAGet16(ds, 0x20d051) != 0x0572)
        goto loc_1d7586;
loc_1d756b: // 0160:1d756b
    memoryASet16(ds, 0x20d381, 0x07fc);
    memoryASet16(ds, 0x20d383, 0x0000);
    memoryASet16(ds, 0x20d385, 0x0000);
loc_1d7586: // 0160:1d7586
    if (memoryAGet16(ds, 0x20d04b) == 0x0218)
        goto loc_1d75bc;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d75d7;
    if (memoryAGet16(ds, 0x20d04d) == 0x0218)
        goto loc_1d75bc;
    if (memoryAGet16(ds, 0x20d04f) == 0x0218)
        goto loc_1d75bc;
    if (memoryAGet16(ds, 0x20d051) != 0x0218)
        goto loc_1d75d7;
loc_1d75bc: // 0160:1d75bc
    memoryASet16(ds, 0x20d381, 0x0012);
    memoryASet16(ds, 0x20d383, 0x0000);
    memoryASet16(ds, 0x20d385, 0x0002);
loc_1d75d7: // 0160:1d75d7
    if (memoryAGet16(ds, 0x20d37d) == 0x0001)
        goto loc_1d7656;
    if (memoryAGet16(ds, 0x20d04b) == 0x0438)
        goto loc_1d760c;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d7656;
    if (memoryAGet16(ds, 0x20d04d) == 0x0438)
        goto loc_1d760c;
    if (memoryAGet16(ds, 0x20d04f) != 0x0438)
        goto loc_1d7656;
loc_1d760c: // 0160:1d760c
    if ((short)memoryAGet16(ds, 0x20d377) >= (short)0x03e8)
        goto loc_1d7656;
    al = 0x60;
    sub_1b17b7();
    memoryASet16(ds, 0x20d37d, 0x0001);
    memoryASet16(ds, 0x20d377, 0x01c8);
    memoryASet16(ds, 0x20d379, 0x0000);
    memoryASet16(ds, 0x20d37b, 0x0000);
    esi = 0x00208f0c;
    sub_1d24fb();
    esi = 0x00208ef2;
    sub_1d24fb();
loc_1d7656: // 0160:1d7656
    if (memoryAGet16(ds, 0x20d37d) == 0x0002)
        goto loc_1d76e6;
    if (memoryAGet16(ds, 0x20d04b) == 0x0085)
        goto loc_1d76a5;
    if (memoryAGet16(ds, 0x20d04b) == 0x0086)
        goto loc_1d76a5;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d76e6;
    if (memoryAGet16(ds, 0x20d04d) == 0x0085)
        goto loc_1d76a5;
    if (memoryAGet16(ds, 0x20d04f) == 0x0085)
        goto loc_1d76a5;
    if (memoryAGet16(ds, 0x20d051) != 0x0085)
        goto loc_1d76e6;
loc_1d76a5: // 0160:1d76a5
    if ((short)memoryAGet16(ds, 0x20d377) <= (short)0x03e8)
        goto loc_1d76e6;
    al = 0x60;
    sub_1b17b7();
    memoryASet16(ds, 0x20d37d, 0x0002);
    memoryASet16(ds, 0x20d379, 0x0000);
    memoryASet16(ds, 0x20d37b, 0x0000);
    esi = 0x00208f26;
    sub_1d24fb();
    esi = 0x00208ed8;
    sub_1d24fb();
loc_1d76e6: // 0160:1d76e6
    sub_1d7823();
    if (!(memoryAGet16(ds, 0x20d37d) & 0xffff))
        goto loc_1d7822;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    bp = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf97, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfa9, bp);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    bp = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf99, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfab, bp);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    bp = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9b, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfad, bp);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    bp = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9d, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfaf, bp);
loc_1d7822: // 0160:1d7822
    esp += 4;
    return;
    // gap 1268 bytes
loc_1d7d17: // 0160:1d7d17
    sub_1d7d99();
    sub_1d7823();
    sub_1d7a6a();
    ax = memoryAGet16(ds, 0x20d389);
    bx = memoryAGet16(ds, 0x20d38b);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d7d49;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d7d72;
loc_1d7d49: // 0160:1d7d49
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d7d52;
loc_1d7d52: // 0160:1d7d52
    if (bx < 0x0178)
        goto loc_1d7d5f;
    if (bx < 0xff9c)
        goto loc_1d7d72;
loc_1d7d5f: // 0160:1d7d5f
    if ((short)ax >= (short)0x01c0)
        goto loc_1d7d72;
    dx = 0x0010;
    cx = 0x0074;
    sub_1b19e0();
loc_1d7d72: // 0160:1d7d72
    ax = memoryAGet16(ds, 0x20d38d);
    ax += 0x0001;
    eax &= 0x0000003f;
    memoryASet16(ds, 0x20d38d, ax);
    esi = 0x00208dd8;
    ax <<= 1;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + ax);
    esp += 4;
    return;
    // gap 122 bytes
loc_1d7e13: // 0160:1d7e13
    if (!(memoryAGet16(ds, 0x20d37d) & 0xffff))
        goto loc_1d7e3c;
    memoryASet16(ds, 0x20d377, memoryAGet16(ds, 0x20d377) - 0x0002);
    if (memoryAGet16(ds, 0x20d377) != 0x01a0)
        goto loc_1d7e58;
    memoryASet16(ds, 0x20d37d, 0x0000);
    goto loc_1d7e58;
loc_1d7e3c: // 0160:1d7e3c
    memoryASet16(ds, 0x20d377, memoryAGet16(ds, 0x20d377) + 0x0002);
    if (memoryAGet16(ds, 0x20d377) != 0x04b0)
        goto loc_1d7e58;
    memoryASet16(ds, 0x20d37d, 0x0001);
loc_1d7e58: // 0160:1d7e58
    if (!(memoryAGet16(ds, 0x20d387) & 0xffff))
        goto loc_1d7e81;
    memoryASet16(ds, 0x20d381, memoryAGet16(ds, 0x20d381) - 0x0002);
    if (memoryAGet16(ds, 0x20d381) != 0x01a0)
        goto loc_1d7e9d;
    memoryASet16(ds, 0x20d387, 0x0000);
    goto loc_1d7e9d;
loc_1d7e81: // 0160:1d7e81
    memoryASet16(ds, 0x20d381, memoryAGet16(ds, 0x20d381) + 0x0002);
    if (memoryAGet16(ds, 0x20d381) != 0x04b2)
        goto loc_1d7e9d;
    memoryASet16(ds, 0x20d387, 0x0001);
loc_1d7e9d: // 0160:1d7e9d
    ax = memoryAGet16(ds, 0x20d375);
    bx = memoryAGet16(ds, 0x20d377);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d7ec0;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d7f00;
loc_1d7ec0: // 0160:1d7ec0
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d7ed6;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d7f00;
loc_1d7ed6: // 0160:1d7ed6
    if (bx >= 0x0178)
        goto loc_1d7f00;
    if ((short)bx <= (short)0x003c)
        goto loc_1d7f00;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d7f00;
    dx = 0x0010;
    cx = 0x0070;
    sub_1b19e0();
    goto loc_1d7f07;
loc_1d7f00: // 0160:1d7f00
    memoryASet(ds, 0x20d899, 0x00);
loc_1d7f07: // 0160:1d7f07
    ax = memoryAGet16(ds, 0x20d37f);
    bx = memoryAGet16(ds, 0x20d381);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d7f2a;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d7f7c;
loc_1d7f2a: // 0160:1d7f2a
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d7f40;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d7f7c;
loc_1d7f40: // 0160:1d7f40
    if (bx >= 0x0178)
        goto loc_1d7f7c;
    if ((short)bx <= (short)0x003c)
        goto loc_1d7f7c;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d7f7c;
    dx = 0x0010;
    memoryASet16(ds, 0x20ce8f, 0x0000);
    cx = 0x0070;
    sub_1b19e0();
    memoryASet16(ds, 0x20ce8f, 0xffff);
    goto loc_1d7f83;
loc_1d7f7c: // 0160:1d7f7c
    memoryASet(ds, 0x20d89a, 0x00);
loc_1d7f83: // 0160:1d7f83
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    bp = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf97, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfa9, bp);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    bp = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf99, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfab, bp);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    bp = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9b, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfad, bp);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    bp = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c1b();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9d, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfaf, bp);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    bp = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c99();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf97, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfa9, bp);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    bp = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c99();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf99, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfab, bp);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    bp = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c99();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9b, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfad, bp);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    bp = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7c99();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9d, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfaf, bp);
    esp += 4;
    return;
loc_1d81d4: // 0160:1d81d4
    if (!(memoryAGet16(ds, 0x20d2c3) & 0xffff))
        goto loc_1d81e0;
    esp += 4;
    return;
loc_1d81e0: // 0160:1d81e0
    memoryASet16(ds, 0x20d7f7, 0xff00);
    memoryASet16(ds, 0x20d7f9, 0x0100);
    esp += 4;
    return;
loc_1d81f3: // 0160:1d81f3
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
    ecx = 0x0000000b;
    sub_1d8275();
    ax = 0x0387;
    bx = 0x0488;
    sub_1d8222();
    ax = 0x02e7;
    bx = 0x0508;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d8238;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d8274;
loc_1d8238: // 0160:1d8238
    bx -= 0x0001;
    ax += 0x0001;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8256;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d8274;
loc_1d8256: // 0160:1d8256
    if (bx >= 0x0178)
        goto loc_1d8274;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d8274;
    dx = 0x0010;
    cx = 0x0074;
    goto loc_1b19e0;
loc_1d8274: // 0160:1d8274
    esp += 4;
    return;
loc_1d8275: // 0160:1d8275
    esi = 0x0020d36d;
loc_1d827a: // 0160:1d827a
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    esi += 0x00000004;
    push32(ecx);
    push32(esi);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d829c;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d82df;
loc_1d829c: // 0160:1d829c
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d82b2;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d82df;
loc_1d82b2: // 0160:1d82b2
    if (bx >= 0x0178)
        goto loc_1d82df;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d82df;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 2;
    cx &= 0x0003;
    cx += 0x0070;
    sub_1b19e0();
loc_1d82df: // 0160:1d82df
    esi = pop32();
    ecx = pop32();
    if (--ecx)
        goto loc_1d827a;
    esp += 4;
    return;
loc_1d82e4: // 0160:1d82e4
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
    ecx = 0x00000003;
    sub_1d8275();
    ax = 0x03a7;
    bx = 0x02a8;
    sub_1d8222();
    ax = 0x0367;
    bx = 0x0468;
    sub_1d8222();
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0040;
    if (ax)
        goto loc_1d8335;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0001;
    memoryASet16(ds, 0x20d379, memoryAGet16(ds, 0x20d379) + ax);
loc_1d8335: // 0160:1d8335
    cx = 0x0004;
    ax = 0x02fe;
    bx = 0x0707;
    sub_1d843e();
    cx = 0x0003;
    ax = 0x02ec;
    bx = 0x0710;
    sub_1d83da();
    cx = 0x0002;
    ax = 0x02dd;
    bx = 0x0710;
    sub_1d83da();
    cx = 0x0001;
    ax = 0x02cd;
    bx = 0x0714;
    sub_1d83da();
    cx = 0x0000;
    ax = 0x02bd;
    bx = 0x0719;
    sub_1d83da();
    cx = 0x0004;
    ax = 0x0362;
    bx = 0x0707;
    sub_1d843e();
    cx = 0x0003;
    ax = 0x0378;
    bx = 0x0710;
    sub_1d83da();
    cx = 0x0002;
    ax = 0x0387;
    bx = 0x0710;
    sub_1d83da();
    cx = 0x0001;
    ax = 0x0397;
    bx = 0x0714;
    sub_1d83da();
    cx = 0x0000;
    ax = 0x03a5;
    bx = 0x0719;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d83f0;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d843d;
loc_1d83f0: // 0160:1d83f0
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8406;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d843d;
loc_1d8406: // 0160:1d8406
    if (bx >= 0x0160)
        goto loc_1d843d;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d843d;
    cx += memoryAGet16(ds, 0x20d379);
    ecx &= 0x00000007;
    esi = 0x00209130;
    cx <<= 1;
    cx = memoryAGet16(ds, esi + ecx);
    bx += cx;
    dx = 0x0010;
    cx = 0x0077;
    goto loc_1b19e0;
loc_1d843d: // 0160:1d843d
    esp += 4;
    return;
    // gap 100 bytes
loc_1d84a2: // 0160:1d84a2
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax)
        goto loc_1d84d2;
    ax = memoryAGet16(ds, 0x20d385);
    ax += 0x0001;
    ax &= 0x0003;
    memoryASet16(ds, 0x20d385, ax);
loc_1d84d2: // 0160:1d84d2
    ax = memoryAGet16(ds, 0x20d381);
    bx = memoryAGet16(ds, 0x20d383);
    sub_1d8828();
    ax = memoryAGet16(ds, 0x20d389);
    bx = memoryAGet16(ds, 0x20d38b);
    sub_1d8828();
    memoryASet16(ds, 0x20d387, memoryAGet16(ds, 0x20d387) + 0x0001);
    ax = memoryAGet16(ds, 0x20d387);
    eax &= 0x0000003f;
    ax <<= 1;
    esi = 0x00208f40;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d381, memoryAGet16(ds, 0x20d381) + bx);
    ax = memoryAGet16(ds, 0x20d387);
    ax <<= 1;
    eax &= 0x0000003f;
    ax <<= 1;
    esi = 0x00208f40;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d383, memoryAGet16(ds, 0x20d383) + bx);
    memoryASet16(ds, 0x20d38f, memoryAGet16(ds, 0x20d38f) + 0x0001);
    ax = memoryAGet16(ds, 0x20d38f);
    eax &= 0x0000003f;
    ax <<= 1;
    esi = 0x00208f40;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d389, memoryAGet16(ds, 0x20d389) + bx);
    ax = memoryAGet16(ds, 0x20d38f);
    ax <<= 1;
    eax &= 0x0000003f;
    ax <<= 1;
    esi = 0x00208f40;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d38b, memoryAGet16(ds, 0x20d38b) + bx);
    if (!(memoryAGet16(ds, 0x20d18f) & 0xffff))
        goto loc_1d85a9;
    memoryASet16(ds, 0x20d18f, memoryAGet16(ds, 0x20d18f) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20cf85) >= (short)0x0020)
        goto loc_1d85a9;
    memoryASet16(ds, 0x20cf73, memoryAGet16(ds, 0x20cf73) + 0x0001);
    memoryASet16(ds, 0x20cf73, memoryAGet16(ds, 0x20cf73) & 0x001f);
loc_1d85a9: // 0160:1d85a9
    if (!(memoryAGet16(ds, 0x20d191) & 0xffff))
        goto loc_1d85d6;
    memoryASet16(ds, 0x20d191, memoryAGet16(ds, 0x20d191) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20cf87) >= (short)0x0020)
        goto loc_1d85d6;
    memoryASet16(ds, 0x20cf75, memoryAGet16(ds, 0x20cf75) + 0x0001);
    memoryASet16(ds, 0x20cf75, memoryAGet16(ds, 0x20cf75) & 0x001f);
loc_1d85d6: // 0160:1d85d6
    if (!(memoryAGet16(ds, 0x20d193) & 0xffff))
        goto loc_1d8603;
    memoryASet16(ds, 0x20d193, memoryAGet16(ds, 0x20d193) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20cf89) >= (short)0x0020)
        goto loc_1d8603;
    memoryASet16(ds, 0x20cf77, memoryAGet16(ds, 0x20cf77) + 0x0001);
    memoryASet16(ds, 0x20cf77, memoryAGet16(ds, 0x20cf77) & 0x001f);
loc_1d8603: // 0160:1d8603
    if (!(memoryAGet16(ds, 0x20d195) & 0xffff))
        goto loc_1d8630;
    memoryASet16(ds, 0x20d195, memoryAGet16(ds, 0x20d195) - 0x0001);
    if ((short)memoryAGet16(ds, 0x20cf8b) >= (short)0x0020)
        goto loc_1d8630;
    memoryASet16(ds, 0x20cf79, memoryAGet16(ds, 0x20cf79) + 0x0001);
    memoryASet16(ds, 0x20cf79, memoryAGet16(ds, 0x20cf79) & 0x001f);
loc_1d8630: // 0160:1d8630
    esi = 0x0020d06f;
    eax = 0x0020cfa9;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020d05d;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf97;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020d18f;
    memoryASet32(ds, 0x20e81d, eax);
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d8798();
    esi = 0x0020d071;
    eax = 0x0020cfab;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020d05f;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf99;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020d191;
    memoryASet32(ds, 0x20e81d, eax);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d8798();
    esi = 0x0020d073;
    eax = 0x0020cfad;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020d061;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf9b;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020d193;
    memoryASet32(ds, 0x20e81d, eax);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d8798();
    esi = 0x0020d075;
    eax = 0x0020cfaf;
    memoryASet32(ds, 0x20e811, eax);
    eax = 0x0020d063;
    memoryASet32(ds, 0x20e815, eax);
    eax = 0x0020cf9d;
    memoryASet32(ds, 0x20e819, eax);
    eax = 0x0020d195;
    memoryASet32(ds, 0x20e81d, eax);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d8798();
    ecx = 0x00000004;
    sub_1d8275();
    ax = 0x0687;
    bx = 0x0268;
    sub_1d8222();
    ax = 0x0447;
    bx = 0x05c8;
    sub_1d8222();
    ax = 0x0495;
    bx = 0x0003;
    esi = 0x002090f2;
    sub_1d88b9();
    ax = 0x0495;
    bx = 0x0002;
    esi = 0x00209084;
    sub_1d88b9();
    ax = 0x022f;
    bx = 0x0003;
    esi = 0x0020903a;
    sub_1d88b9();
    ax = 0x022f;
    bx = 0x0002;
    esi = 0x00208fc0;
    goto loc_1d88b9;
    // gap 289 bytes
loc_1d88b9: // 0160:1d88b9
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d8904;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d8904;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d88e0;
    if (bx == memoryAGet16(ds, 0x20d087))
        goto loc_1d8916;
loc_1d88e0: // 0160:1d88e0
    if (ax != memoryAGet16(ds, 0x20d04f))
        goto loc_1d88f2;
    if (bx == memoryAGet16(ds, 0x20d085))
        goto loc_1d8916;
loc_1d88f2: // 0160:1d88f2
    if (ax != memoryAGet16(ds, 0x20d04d))
        goto loc_1d8904;
    if (bx == memoryAGet16(ds, 0x20d083))
        goto loc_1d8916;
loc_1d8904: // 0160:1d8904
    if (ax != memoryAGet16(ds, 0x20d04b))
        goto loc_1d891b;
    if (bx != memoryAGet16(ds, 0x20d081))
        goto loc_1d891b;
loc_1d8916: // 0160:1d8916
    goto loc_1d24fb;
loc_1d891b: // 0160:1d891b
    esp += 4;
    return;
loc_1d891c: // 0160:1d891c
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
    ecx = 0x00000001;
    goto loc_1d8275;
loc_1d8936: // 0160:1d8936
    memoryASet16(ds, 0x20d869, 0x0001);
    memoryASet(ds, 0x1f1c44, 0x01);
    esp += 4;
    return;
loc_1d8947: // 0160:1d8947
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    esi = 0x0020cf97;
    edi = 0x0020cfa9;
    sub_1d8b8a();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    esi = 0x0020cf99;
    edi = 0x0020cfab;
    sub_1d8b8a();
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    esi = 0x0020cf9b;
    edi = 0x0020cfad;
    sub_1d8b8a();
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    esi = 0x0020cf9d;
    edi = 0x0020cfaf;
    sub_1d8b8a();
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d8a60;
    ax = 0x0466;
    if (ax == memoryAGet16(ds, 0x20d04b))
        goto loc_1d89f8;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d8a13;
    if (ax == memoryAGet16(ds, 0x20d04d))
        goto loc_1d89f8;
    if (ax == memoryAGet16(ds, 0x20d04f))
        goto loc_1d89f8;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d8a13;
loc_1d89f8: // 0160:1d89f8
    if (memoryAGet16(ds, 0x20d375) & 0xffff)
        goto loc_1d8a13;
    memoryASet16(ds, 0x20d375, 0x0001);
    al = 0x69;
    sub_1b17b7();
loc_1d8a13: // 0160:1d8a13
    ax = 0x0478;
    if (ax == memoryAGet16(ds, 0x20d04b))
        goto loc_1d8a45;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d8a60;
    if (ax == memoryAGet16(ds, 0x20d04d))
        goto loc_1d8a45;
    if (ax == memoryAGet16(ds, 0x20d04f))
        goto loc_1d8a45;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d8a60;
loc_1d8a45: // 0160:1d8a45
    if (memoryAGet16(ds, 0x20d37f) & 0xffff)
        goto loc_1d8a60;
    memoryASet16(ds, 0x20d37f, 0x0001);
    al = 0x69;
    sub_1b17b7();
loc_1d8a60: // 0160:1d8a60
    memoryASet16(ds, 0x20ce9d, 0x02a8);
    esi = 0x0020d36d;
    sub_1d8a81();
    memoryASet16(ds, 0x20ce9d, 0x0488);
    esi = 0x0020d377;
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_1d8b0e;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d8b0e;
    ax += 0x0001;
    if (ax != 0x005f)
        goto loc_1d8aac;
    push32(esi);
    al = 0x69;
    esi = pop32();
    ax = 0;
loc_1d8aac: // 0160:1d8aac
    memoryASet16(ds, esi + 8, ax);
    if ((short)ax <= (short)0x002f)
        goto loc_1d8ae6;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0001);
    cx = memoryAGet16(ds, esi + 4);
    cx += 0x0001;
    if (cx != 0x0003)
        goto loc_1d8acb;
    cx = 0;
loc_1d8acb: // 0160:1d8acb
    memoryASet16(ds, esi + 4, cx);
    cx = memoryAGet16(ds, esi + 6);
    cx += 0x0001;
    if (cx != 0x0008)
        goto loc_1d8ae0;
    cx = 0;
loc_1d8ae0: // 0160:1d8ae0
    memoryASet16(ds, esi + 6, cx);
    goto loc_1d8b0e;
loc_1d8ae6: // 0160:1d8ae6
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0001);
    cx = memoryAGet16(ds, esi + 4);
    cx -= 0x0001;
    if ((short)cx >= 0)
        goto loc_1d8af8;
    cx = 0x0002;
loc_1d8af8: // 0160:1d8af8
    memoryASet16(ds, esi + 4, cx);
    cx = memoryAGet16(ds, esi + 6);
    cx -= 0x0001;
    if ((short)cx >= 0)
        goto loc_1d8b0a;
    cx = 0x0007;
loc_1d8b0a: // 0160:1d8b0a
    memoryASet16(ds, esi + 6, cx);
loc_1d8b0e: // 0160:1d8b0e
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = 0x0070;
    dx = 0;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    bx += 0x0020;
    cx = 0x0070;
    dx = 0x0002;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = 0x061f;
    bx = memoryAGet16(ds, 0x20ce9d);
    cx = memoryAGet16(ds, esi + 4);
    cx += 0x0071;
    dx = 0;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = 0x065c;
    bx = memoryAGet16(ds, 0x20ce9d);
    bx -= 0x0018;
    ecx = 0;
    cx = memoryAGet16(ds, esi + 6);
    cx <<= 1;
    edi = 0x00209140;
    bx += memoryAGet16(ds, edi + ecx);
    cx >>= 1;
    cx += 0x0074;
    dx = 0;
    goto loc_1d91bd;
    // gap 189 bytes
loc_1d8c47: // 0160:1d8c47
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    esi = 0x0020cf97;
    edi = 0x0020d06f;
    memoryASet32(ds, 0x20e815, edi);
    edi = 0x0020cfa9;
    sub_1d8ee1();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    esi = 0x0020cf99;
    edi = 0x0020d071;
    memoryASet32(ds, 0x20e815, edi);
    edi = 0x0020cfab;
    sub_1d8ee1();
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    esi = 0x0020cf9b;
    edi = 0x0020d073;
    memoryASet32(ds, 0x20e815, edi);
    edi = 0x0020cfad;
    sub_1d8ee1();
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    esi = 0x0020cf9d;
    edi = 0x0020d075;
    memoryASet32(ds, 0x20e815, edi);
    edi = 0x0020cfaf;
    sub_1d8ee1();
    ax = memoryAGet16(ds, 0x20d371);
    ax += 0x0001;
    eax &= 0x0000003f;
    memoryASet16(ds, 0x20d371, ax);
    esi = 0x00208dd8;
    ax <<= 1;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d377, memoryAGet16(ds, 0x20d377) + ax);
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    memoryASet16(ds, 0x20cec5, cx);
    ax = memoryAGet16(ds, 0x20d897);
    push32(eax);
    ax = memoryAGet16(ds, 0x20d377);
    memoryASet16(ds, 0x20cec3, ax);
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    sub_1d8d96();
    ax = memoryAGet16(ds, 0x20d373);
    bx = memoryAGet16(ds, 0x20d375);
    sub_1d8d96();
    eax = pop32();
    if (!(memoryAGet16(ds, 0x20d897) & 0xffff))
        goto loc_1d8d95;
    if (ax == memoryAGet16(ds, 0x20d897))
        goto loc_1d8d85;
    if ((short)memoryAGet16(ds, 0x20d897) >= (short)0x000a)
        goto loc_1d8d95;
    al = 0x4c;
    sub_1b17b7();
    memoryASet16(ds, 0x20d897, 0x000a);
    esp += 4;
    return;
loc_1d8d85: // 0160:1d8d85
    al = 0x51;
    sub_1b17b7();
    memoryASet16(ds, 0x20d897, 0x0000);
loc_1d8d95: // 0160:1d8d95
    esp += 4;
    return;
    // gap 507 bytes
loc_1d8f91: // 0160:1d8f91
    ax = 0x017f;
    bx = 0x0560;
    dx = 0x0001;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0078;
    sub_1d91bd();
    ax = 0x01e7;
    bx = 0x0560;
    dx = 0;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0078;
    sub_1d91bd();
    ax = 0x049f;
    bx = 0x04a0;
    dx = 0x0001;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0078;
    sub_1d91bd();
    ax = 0x0507;
    bx = 0x04a0;
    dx = 0;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0078;
    sub_1d91bd();
    ax = memoryAGet16(ds, 0x20d897);
    push32(eax);
    ax = 0x0197;
    bx = 0x0560;
    sub_1d90ff();
    ax = 0x0197;
    bx = 0x05a0;
    sub_1d90ff();
    ax = 0x0197;
    bx = 0x05e0;
    sub_1d90ff();
    ax = 0x01df;
    bx = 0x0560;
    sub_1d9116();
    ax = 0x01df;
    bx = 0x05a0;
    sub_1d9116();
    ax = 0x01df;
    bx = 0x05e0;
    sub_1d9116();
    ax = 0x04b7;
    bx = 0x04a0;
    sub_1d90ff();
    ax = 0x04b7;
    bx = 0x04e0;
    sub_1d90ff();
    ax = 0x04b7;
    bx = 0x0520;
    sub_1d90ff();
    ax = 0x04ff;
    bx = 0x04a0;
    sub_1d9116();
    ax = 0x04ff;
    bx = 0x04e0;
    sub_1d9116();
    ax = 0x04ff;
    bx = 0x0520;
    sub_1d9116();
    eax = pop32();
    if (!(memoryAGet16(ds, 0x20d897) & 0xffff))
        goto loc_1d90fe;
    if (ax == memoryAGet16(ds, 0x20d897))
        goto loc_1d90ee;
    if ((short)memoryAGet16(ds, 0x20d897) >= (short)0x000a)
        goto loc_1d90fe;
    al = 0x68;
    sub_1b17b7();
    memoryASet16(ds, 0x20d897, 0x000a);
    esp += 4;
    return;
loc_1d90ee: // 0160:1d90ee
    al = 0xad;
    sub_1b17b7();
    memoryASet16(ds, 0x20d897, 0x0000);
loc_1d90fe: // 0160:1d90fe
    esp += 4;
    return;
    // gap 187 bytes
loc_1d91ba: // 0160:1d91ba
    dx = 0;
loc_1d91bd: // 0160:1d91bd
    dx |= 0x0010;
loc_1d91c1: // 0160:1d91c1
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
loc_1d9208: // 0160:1d9208
    esi = 0x0020d36d;
    ecx = 0x00000008;
loc_1d9212: // 0160:1d9212
    push32(ecx);
    push32(esi);
    ax = cx;
    ax <<= 5;
    ax += memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20e805, ax);
    ax &= 0x0040;
    if (!ax)
        goto loc_1d9282;
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d9247;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9282;
loc_1d9247: // 0160:1d9247
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d9259;
    bx += memoryAGet16(ds, 0x20cef5);
    if ((short)bx < 0)
        goto loc_1d9282;
loc_1d9259: // 0160:1d9259
    if (bx >= 0x0178)
        goto loc_1d9282;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9282;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20e805);
    cx >>= 2;
    cx &= 0x0007;
    cx += 0x0070;
    sub_1b19e0();
loc_1d9282: // 0160:1d9282
    esi = pop32();
    ecx = pop32();
    esi += 0x00000006;
    if (--ecx)
        goto loc_1d9212;
    esp += 4;
    return;
loc_1d928a: // 0160:1d928a
    ax = memoryAGet16(ds, 0x20d36d);
    bx = memoryAGet16(ds, 0x20d36f);
    cx = memoryAGet16(ds, 0x20d371);
    sub_1d9599();
    ax = memoryAGet16(ds, 0x20d379);
    bx = memoryAGet16(ds, 0x20d37b);
    cx = memoryAGet16(ds, 0x20d37d);
    sub_1d9599();
    memoryASet16(ds, 0x20cec5, 0x0000);
    esi = 0x0020d36d;
    sub_1d946e();
    memoryASet16(ds, 0x20cec5, 0x0001);
    esi = 0x0020d379;
    sub_1d946e();
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1d9375;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    esi = 0x0020d06f;
    edi = 0x0020cf97;
    ebp = 0x0020cfa9;
    sub_1d9419();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    esi = 0x0020d071;
    edi = 0x0020cf99;
    ebp = 0x0020cfab;
    sub_1d9419();
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    esi = 0x0020d073;
    edi = 0x0020cf9b;
    ebp = 0x0020cfad;
    sub_1d9419();
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    esi = 0x0020d075;
    edi = 0x0020cf9d;
    ebp = 0x0020cfaf;
    sub_1d9419();
loc_1d9375: // 0160:1d9375
    if (memoryAGet16(ds, 0x20d37d) & 0xffff)
        goto loc_1d9408;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    esi = 0x0020d06f;
    edi = 0x0020cf97;
    ebp = 0x0020cfa9;
    sub_1d9409();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    esi = 0x0020d071;
    edi = 0x0020cf99;
    ebp = 0x0020cfab;
    sub_1d9409();
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    esi = 0x0020d073;
    edi = 0x0020cf9b;
    ebp = 0x0020cfad;
    sub_1d9409();
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    esi = 0x0020d075;
    edi = 0x0020cf9d;
    ebp = 0x0020cfaf;
    goto loc_1d9409;
    // gap 3 bytes
loc_1d9408: // 0160:1d9408
    esp += 4;
    return;
loc_1d9409: // 0160:1d9409
    cx = memoryAGet16(ds, 0x20d379);
    dx = memoryAGet16(ds, 0x20d37b);
    goto loc_1d9427;
    // gap 14 bytes
loc_1d9427: // 0160:1d9427
    ax += 0x0080;
    ax -= cx;
    if (ax < 0x0016)
        goto loc_1d943b;
    if (ax >= 0xffea)
        goto loc_1d943b;
    esp += 4;
    return;
loc_1d943b: // 0160:1d943b
    bx += 0x0080;
    bx -= dx;
    if (bx < 0x0016)
        goto loc_1d9450;
    if (bx >= 0xffea)
        goto loc_1d9450;
    esp += 4;
    return;
loc_1d9450: // 0160:1d9450
    memoryASet16(ds, esi, 0x0008);
    push32(ebp);
    sub_1b1c5c();
    ebp = pop32();
    ax <<= 4;
    ax &= 0x03ff;
    memoryASet16(ds, edi, ax);
    memoryASet16(ss, ebp, 0x00c8);
    esp += 4;
    return;
    // gap 453 bytes
loc_1d9633: // 0160:1d9633
    ax = 0x04b4;
    bx = 0x0180;
    cx = 0x0070;
    sub_1d91ba();
    ax = 0x04d4;
    bx = 0x018b;
    cx = 0x0071;
    sub_1d91ba();
    ax = 0x04f4;
    bx = 0x018b;
    cx = 0x0071;
    sub_1d91ba();
    ax = memoryAGet16(ds, 0x20c830);
    ax >>= 3;
    ax &= 0x0001;
    ax += 0x0513;
    bx = 0x0188;
    cx = 0x0072;
    goto loc_1d91ba;
loc_1d9685: // 0160:1d9685
    ax = 0x0220;
    if (ax == memoryAGet16(ds, 0x20d04b))
        goto loc_1d96b7;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d96cb;
    if (ax == memoryAGet16(ds, 0x20d04d))
        goto loc_1d96b7;
    if (ax == memoryAGet16(ds, 0x20d04f))
        goto loc_1d96b7;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d96cb;
loc_1d96b7: // 0160:1d96b7
    if (memoryAGet16(ds, 0x20d36d) & 0xffff)
        goto loc_1d96cb;
    memoryASet16(ds, 0x20d36d, 0x0001);
loc_1d96cb: // 0160:1d96cb
    ax = memoryAGet16(ds, 0x20d36d);
    if (!ax)
        goto loc_1d96f6;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x000f;
    if (bx)
        goto loc_1d96f6;
    ax += 0x0001;
    if (ax != 0x0017)
        goto loc_1d96f0;
    ax = 0;
loc_1d96f0: // 0160:1d96f0
    memoryASet16(ds, 0x20d36d, ax);
loc_1d96f6: // 0160:1d96f6
    ax = 0x0586;
    if (ax == memoryAGet16(ds, 0x20d04b))
        goto loc_1d9728;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d973c;
    if (ax == memoryAGet16(ds, 0x20d04d))
        goto loc_1d9728;
    if (ax == memoryAGet16(ds, 0x20d04f))
        goto loc_1d9728;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d973c;
loc_1d9728: // 0160:1d9728
    if (memoryAGet16(ds, 0x20d371) & 0xffff)
        goto loc_1d973c;
    memoryASet16(ds, 0x20d371, 0x0001);
loc_1d973c: // 0160:1d973c
    ax = memoryAGet16(ds, 0x20d371);
    if (!ax)
        goto loc_1d9767;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x000f;
    if (bx)
        goto loc_1d9767;
    ax += 0x0001;
    if (ax != 0x0017)
        goto loc_1d9761;
    ax = 0;
loc_1d9761: // 0160:1d9761
    memoryASet16(ds, 0x20d371, ax);
loc_1d9767: // 0160:1d9767
    sub_1d9f0e();
    sub_1d9e4f();
    esi = 0x0020d375;
    ecx = 0x00000008;
loc_1d977b: // 0160:1d977b
    push32(ecx);
    push32(esi);
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = memoryAGet16(ds, esi + 4);
    dx = memoryAGet16(ds, esi + 6);
    esi += 0x0000000a;
    if (!(memoryAGet16(ds, 0x20d89b) & 0xffff))
        goto loc_1d979a;
loc_1d979a: // 0160:1d979a
    sub_1d9d6c();
    esi = pop32();
    ecx = pop32();
    esi += 0x0000000c;
    if (--ecx)
        goto loc_1d977b;
    sub_1d9b94();
    sub_1d99bc();
    edi = 0x0020cfa9;
    ebp = 0x0020cf97;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    sub_1d982d();
    edi = 0x0020cfab;
    ebp = 0x0020cf99;
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    sub_1d982d();
    edi = 0x0020cfad;
    ebp = 0x0020cf9b;
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    sub_1d982d();
    edi = 0x0020cfaf;
    ebp = 0x0020cf9d;
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    sub_1d982d();
    ax = 0x01c9;
    bx = 0x064c;
    goto loc_1d9df5;
    // gap 1480 bytes
loc_1d9df5: // 0160:1d9df5
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d9e0b;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9e4e;
loc_1d9e0b: // 0160:1d9e0b
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d9e21;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9e4e;
loc_1d9e21: // 0160:1d9e21
    if (bx >= 0x0178)
        goto loc_1d9e4e;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9e4e;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 2;
    cx &= 0x0001;
    cx += 0x0070;
    sub_1b19e0();
loc_1d9e4e: // 0160:1d9e4e
    esp += 4;
    return;
    // gap 481 bytes
loc_1da030: // 0160:1da030
    sub_1d81e0();
    if (memoryAGet16(ds, 0x20d7a5) & 0xffff)
        goto loc_1da08c;
    memoryASet16(ds, 0x20d06f, 0x0000);
    memoryASet16(ds, 0x20d071, 0x0000);
    memoryASet16(ds, 0x20d073, 0x0000);
    memoryASet16(ds, 0x20d075, 0x0000);
    memoryASet16(ds, 0x20d05d, 0x0006);
    memoryASet16(ds, 0x20d05f, 0x0006);
    memoryASet16(ds, 0x20d061, 0x0006);
    memoryASet16(ds, 0x20d063, 0x0006);
loc_1da08c: // 0160:1da08c
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    cx = memoryAGet16(ds, 0x20cf85);
    dx = memoryAGet16(ds, 0x20d05d);
    sub_1da112();
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    cx = memoryAGet16(ds, 0x20cf87);
    dx = memoryAGet16(ds, 0x20d05f);
    sub_1da112();
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1da0f7;
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    cx = memoryAGet16(ds, 0x20cf89);
    dx = memoryAGet16(ds, 0x20d061);
    sub_1da112();
loc_1da0f7: // 0160:1da0f7
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    cx = memoryAGet16(ds, 0x20cf8b);
    dx = memoryAGet16(ds, 0x20d063);
    esi = 0x0020602c;
    if ((short)cx >= (short)0x0020)
        goto loc_1da150;
    cx <<= 2;
    ecx &= 0x0000ffff;
    ax += memoryAGet16(ds, esi + ecx);
    bx += memoryAGet16(ds, esi + ecx + 2);
    dx >>= 1;
    ax -= dx;
    bx -= dx;
    dx = 0;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    cx += 0x0070;
    goto loc_1d91c1;
loc_1da150: // 0160:1da150
    esp += 4;
    return;
loc_1da151: // 0160:1da151
    ax = 0x0168;
    bx = 0x03cc;
    cx = 0x0070;
    dx = 0x0010;
    sub_1d91bd();
    ax = 0x01b8;
    bx = 0x041a;
    cx = 0x0070;
    dx = 0x0012;
    sub_1d91bd();
    ax = 0x017c;
    bx = 0x0bac;
    cx = 0x0070;
    dx = 0x0010;
    sub_1d91bd();
    ax = 0x01b8;
    bx = 0x0bfa;
    cx = 0x0070;
    dx = 0x0012;
    sub_1d91bd();
    ax = 0x0190;
    bx = 0x160c;
    cx = 0x0070;
    dx = 0x0010;
    goto loc_1d91bd;
loc_1da1ba: // 0160:1da1ba
    al = memoryAGet(ds, 0x23c4f0);
    if (al == 0x02)
        goto loc_1d725b;
    if (al == 0x03)
        goto loc_1d71eb;
    esp += 4;
}
void sub_1d7823() // 0160:1d7823 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    bp = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d794c();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf97, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfa9, bp);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    bp = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d794c();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf99, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfab, bp);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    bp = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d794c();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9b, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfad, bp);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    bp = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d794c();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9d, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfaf, bp);
    esp += 4;
}
void sub_1d794c() // 0160:1d794c +long
{
    esp -= 4;
    ax += 0x0080;
    cx = memoryAGet16(ds, 0x20d37f);
    cx -= ax;
    if (cx >= 0xfffc)
        goto loc_1d7967;
    if (cx < 0x0010)
        goto loc_1d7967;
    esp += 4;
    return;
loc_1d7967: // 0160:1d7967
    bx += 0x0080;
    dx = memoryAGet16(ds, 0x20d381);
    dx -= bx;
    if (dx >= 0xff48)
        goto loc_1d7984;
    if (dx < 0x0018)
        goto loc_1d7984;
    esp += 4;
    return;
loc_1d7984: // 0160:1d7984
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x0200);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0x03ff);
    if ((short)memoryAGet16(ds, 0x20e7fd) >= (short)0x00c8)
        goto loc_1d79aa;
    memoryASet16(ds, 0x20e7fd, 0x00c8);
loc_1d79aa: // 0160:1d79aa
    if (dx < 0x0018)
        goto loc_1d79c6;
    if (dx >= 0xff58)
        goto loc_1d79c5;
    memoryASet16(ds, 0x20e801, 0x0200);
    sub_1d79cf();
loc_1d79c5: // 0160:1d79c5
    esp += 4;
    return;
loc_1d79c6: // 0160:1d79c6
    memoryASet16(ds, 0x20e801, 0x0000);
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20d897);
    if ((short)ax <= (short)0x000a)
        goto loc_1d7a17;
    bp = memoryAGet16(ds, 0x20e7fd);
    push32(ebp);
    bp = memoryAGet16(ds, 0x20e801);
    push32(ebp);
    al = 0x60;
    sub_1b17b7();
    ebp = pop32();
    memoryASet16(ds, 0x20e801, bp);
    ebp = pop32();
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20d897, bp);
loc_1d7a17: // 0160:1d7a17
    esp += 4;
    return;
}
void sub_1d79cf() // 0160:1d79cf +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20d897);
    if ((short)ax <= (short)0x000a)
        goto loc_1d7a17;
    bp = memoryAGet16(ds, 0x20e7fd);
    push32(ebp);
    bp = memoryAGet16(ds, 0x20e801);
    push32(ebp);
    al = 0x60;
    sub_1b17b7();
    ebp = pop32();
    memoryASet16(ds, 0x20e801, bp);
    ebp = pop32();
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20d897, bp);
loc_1d7a17: // 0160:1d7a17
    esp += 4;
    return;
}
void sub_1d7a6a() // 0160:1d7a6a +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20cf4f);
    bx = memoryAGet16(ds, 0x20cf61);
    bp = memoryAGet16(ds, 0x20cfa9);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf97);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7b93();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf97, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfa9, bp);
    ax = memoryAGet16(ds, 0x20cf51);
    bx = memoryAGet16(ds, 0x20cf63);
    bp = memoryAGet16(ds, 0x20cfab);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf99);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7b93();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf99, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfab, bp);
    ax = memoryAGet16(ds, 0x20cf53);
    bx = memoryAGet16(ds, 0x20cf65);
    bp = memoryAGet16(ds, 0x20cfad);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9b);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7b93();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9b, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfad, bp);
    ax = memoryAGet16(ds, 0x20cf55);
    bx = memoryAGet16(ds, 0x20cf67);
    bp = memoryAGet16(ds, 0x20cfaf);
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20cf9d);
    memoryASet16(ds, 0x20e801, bp);
    sub_1d7b93();
    bp = memoryAGet16(ds, 0x20e801);
    memoryASet16(ds, 0x20cf9d, bp);
    bp = memoryAGet16(ds, 0x20e7fd);
    memoryASet16(ds, 0x20cfaf, bp);
    esp += 4;
}
void sub_1d7b93() // 0160:1d7b93 +long
{
    esp -= 4;
    goto loc_1d7b93;
loc_1d79cf: // 0160:1d79cf
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20d897);
    if ((short)ax <= (short)0x000a)
        goto loc_1d7a17;
    bp = memoryAGet16(ds, 0x20e7fd);
    push32(ebp);
    bp = memoryAGet16(ds, 0x20e801);
    push32(ebp);
    al = 0x60;
    sub_1b17b7();
    ebp = pop32();
    memoryASet16(ds, 0x20e801, bp);
    ebp = pop32();
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20d897, bp);
loc_1d7a17: // 0160:1d7a17
    esp += 4;
    return;
    // gap 379 bytes
loc_1d7b93: // 0160:1d7b93
    ax += 0x0080;
    cx = memoryAGet16(ds, 0x20d389);
    cx -= ax;
    if (cx >= 0xfffc)
        goto loc_1d7bae;
    if (cx < 0x0010)
        goto loc_1d7bae;
    esp += 4;
    return;
loc_1d7bae: // 0160:1d7bae
    bx += 0x0080;
    dx = memoryAGet16(ds, 0x20d38b);
    dx -= bx;
    if (dx >= 0xff48)
        goto loc_1d7bcb;
    if (dx < 0x0018)
        goto loc_1d7bcb;
    esp += 4;
    return;
loc_1d7bcb: // 0160:1d7bcb
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) + 0x0200);
    memoryASet16(ds, 0x20e801, memoryAGet16(ds, 0x20e801) & 0x03ff);
    if ((short)memoryAGet16(ds, 0x20e7fd) >= (short)0x00c8)
        goto loc_1d7bf1;
    memoryASet16(ds, 0x20e7fd, 0x00c8);
loc_1d7bf1: // 0160:1d7bf1
    if (dx < 0x0018)
        goto loc_1d7c0d;
    if (dx >= 0xff58)
        goto loc_1d7c0c;
    memoryASet16(ds, 0x20e801, 0x0200);
    goto loc_1d79cf;
loc_1d7c0c: // 0160:1d7c0c
    esp += 4;
    return;
loc_1d7c0d: // 0160:1d7c0d
    memoryASet16(ds, 0x20e801, 0x0000);
    goto loc_1d79cf;
}
void sub_1d7c1b() // 0160:1d7c1b +long
{
    esp -= 4;
    goto loc_1d7c1b;
loc_1d7a18: // 0160:1d7a18
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20d897);
    if ((short)ax <= (short)0x000a)
        goto loc_1d7a69;
    bp = memoryAGet16(ds, 0x20e7fd);
    push32(ebp);
    bp = memoryAGet16(ds, 0x20e801);
    push32(ebp);
    al = 0xac;
    sub_1b17b7();
    ax = 0x011b;
    sub_1b1715();
    ebp = pop32();
    memoryASet16(ds, 0x20e801, bp);
    ebp = pop32();
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20d897, bp);
loc_1d7a69: // 0160:1d7a69
    esp += 4;
    return;
    // gap 433 bytes
loc_1d7c1b: // 0160:1d7c1b
    ax += 0x0080;
    cx = memoryAGet16(ds, 0x20d375);
    cx -= ax;
    if (cx >= 0xffe0)
        goto loc_1d7c36;
    if (cx < 0x0018)
        goto loc_1d7c36;
    esp += 4;
    return;
loc_1d7c36: // 0160:1d7c36
    bx += 0x0080;
    dx = memoryAGet16(ds, 0x20d377);
    dx -= bx;
    if (dx < 0xffe0)
        goto loc_1d7c6d;
    sub_1b1c5c();
    ax &= 0x00ff;
    ax += 0x0180;
    memoryASet16(ds, 0x20e801, ax);
    memoryASet16(ds, 0x20e7fd, 0x01c0);
    goto loc_1d7a18;
loc_1d7c6c: // 0160:1d7c6c
    esp += 4;
    return;
loc_1d7c6d: // 0160:1d7c6d
    if (dx >= 0x0018)
        goto loc_1d7c6c;
    sub_1b1c5c();
    ax &= 0x00ff;
    ax -= 0x0080;
    ax &= 0x03ff;
    memoryASet16(ds, 0x20e801, ax);
    memoryASet16(ds, 0x20e7fd, 0x01c0);
    goto loc_1d7a18;
}
void sub_1d7c99() // 0160:1d7c99 +long
{
    esp -= 4;
    goto loc_1d7c99;
loc_1d7a18: // 0160:1d7a18
    ax = memoryAGet16(ds, 0x20c830);
    ax -= memoryAGet16(ds, 0x20d897);
    if ((short)ax <= (short)0x000a)
        goto loc_1d7a69;
    bp = memoryAGet16(ds, 0x20e7fd);
    push32(ebp);
    bp = memoryAGet16(ds, 0x20e801);
    push32(ebp);
    al = 0xac;
    sub_1b17b7();
    ax = 0x011b;
    sub_1b1715();
    ebp = pop32();
    memoryASet16(ds, 0x20e801, bp);
    ebp = pop32();
    memoryASet16(ds, 0x20e7fd, bp);
    bp = memoryAGet16(ds, 0x20c830);
    memoryASet16(ds, 0x20d897, bp);
loc_1d7a69: // 0160:1d7a69
    esp += 4;
    return;
    // gap 559 bytes
loc_1d7c99: // 0160:1d7c99
    ax += 0x0080;
    cx = memoryAGet16(ds, 0x20d37f);
    cx -= ax;
    if (cx >= 0xffe0)
        goto loc_1d7cb4;
    if (cx < 0x0018)
        goto loc_1d7cb4;
    esp += 4;
    return;
loc_1d7cb4: // 0160:1d7cb4
    bx += 0x0080;
    dx = memoryAGet16(ds, 0x20d381);
    dx -= bx;
    if (dx < 0xffe0)
        goto loc_1d7ceb;
    sub_1b1c5c();
    ax &= 0x00ff;
    ax += 0x0180;
    memoryASet16(ds, 0x20e801, ax);
    memoryASet16(ds, 0x20e7fd, 0x01c0);
    goto loc_1d7a18;
loc_1d7cea: // 0160:1d7cea
    esp += 4;
    return;
loc_1d7ceb: // 0160:1d7ceb
    if (dx >= 0x0018)
        goto loc_1d7cea;
    sub_1b1c5c();
    ax &= 0x00ff;
    ax -= 0x0080;
    ax &= 0x03ff;
    memoryASet16(ds, 0x20e801, ax);
    memoryASet16(ds, 0x20e7fd, 0x01c0);
    goto loc_1d7a18;
}
void sub_1d7d99() // 0160:1d7d99 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, 0x20d37f);
    bx = memoryAGet16(ds, 0x20d381);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d7dbc;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d7dec;
loc_1d7dbc: // 0160:1d7dbc
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d7dc5;
loc_1d7dc5: // 0160:1d7dc5
    if (bx < 0x0178)
        goto loc_1d7dd2;
    if (bx < 0xff9c)
        goto loc_1d7dec;
loc_1d7dd2: // 0160:1d7dd2
    if ((short)ax >= (short)0x01c0)
        goto loc_1d7dec;
    dx = memoryAGet16(ds, 0x20d385);
    dx |= 0x0010;
    cx = 0x0074;
    sub_1b19e0();
loc_1d7dec: // 0160:1d7dec
    ax = memoryAGet16(ds, 0x20d383);
    ax += 0x0001;
    eax &= 0x0000003f;
    memoryASet16(ds, 0x20d383, ax);
    esi = 0x00208dd8;
    ax <<= 1;
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20d381, memoryAGet16(ds, 0x20d381) + ax);
    esp += 4;
}
void sub_1d81e0() // 0160:1d81e0 +long
{
    esp -= 4;
    memoryASet16(ds, 0x20d7f7, 0xff00);
    memoryASet16(ds, 0x20d7f9, 0x0100);
    esp += 4;
}
void sub_1d8222() // 0160:1d8222 +long
{
    esp -= 4;
    goto loc_1d8222;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 157710 bytes
loc_1d8222: // 0160:1d8222
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d8238;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d8274;
loc_1d8238: // 0160:1d8238
    bx -= 0x0001;
    ax += 0x0001;
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8256;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d8274;
loc_1d8256: // 0160:1d8256
    if (bx >= 0x0178)
        goto loc_1d8274;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d8274;
    dx = 0x0010;
    cx = 0x0074;
    goto loc_1b19e0;
loc_1d8274: // 0160:1d8274
    esp += 4;
    return;
}
void sub_1d8275() // 0160:1d8275 +long
{
    esp -= 4;
    esi = 0x0020d36d;
loc_1d827a: // 0160:1d827a
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    esi += 0x00000004;
    push32(ecx);
    push32(esi);
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d829c;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d82df;
loc_1d829c: // 0160:1d829c
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d82b2;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d82df;
loc_1d82b2: // 0160:1d82b2
    if (bx >= 0x0178)
        goto loc_1d82df;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d82df;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 2;
    cx &= 0x0003;
    cx += 0x0070;
    sub_1b19e0();
loc_1d82df: // 0160:1d82df
    esi = pop32();
    ecx = pop32();
    if (--ecx)
        goto loc_1d827a;
    esp += 4;
}
void sub_1d83da() // 0160:1d83da +long
{
    esp -= 4;
    goto loc_1d83da;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 158150 bytes
loc_1d83da: // 0160:1d83da
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d83f0;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d843d;
loc_1d83f0: // 0160:1d83f0
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8406;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d843d;
loc_1d8406: // 0160:1d8406
    if (bx >= 0x0160)
        goto loc_1d843d;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d843d;
    cx += memoryAGet16(ds, 0x20d379);
    ecx &= 0x00000007;
    esi = 0x00209130;
    cx <<= 1;
    cx = memoryAGet16(ds, esi + ecx);
    bx += cx;
    dx = 0x0010;
    cx = 0x0077;
    goto loc_1b19e0;
loc_1d843d: // 0160:1d843d
    esp += 4;
    return;
}
void sub_1d843e() // 0160:1d843e +long
{
    esp -= 4;
    goto loc_1d843e;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 158250 bytes
loc_1d843e: // 0160:1d843e
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d8454;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d84a1;
loc_1d8454: // 0160:1d8454
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d846a;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d84a1;
loc_1d846a: // 0160:1d846a
    if (bx >= 0x0160)
        goto loc_1d84a1;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d84a1;
    cx += memoryAGet16(ds, 0x20d379);
    ecx &= 0x00000007;
    esi = 0x00209130;
    cx <<= 1;
    cx = memoryAGet16(ds, esi + ecx);
    bx += cx;
    dx = 0x0010;
    cx = 0x0078;
    goto loc_1b19e0;
loc_1d84a1: // 0160:1d84a1
    esp += 4;
    return;
}
void sub_1d8798() // 0160:1d8798 +long
{
    esp -= 4;
    ax += 0x008b;
    bx += 0x0095;
    cx = ax;
    dx = bx;
    ax -= memoryAGet16(ds, 0x20d381);
    if ((short)ax < 0)
        goto loc_1d8809;
    if ((short)ax >= (short)0x0029)
        goto loc_1d8809;
    bx -= memoryAGet16(ds, 0x20d383);
    if ((short)bx < 0)
        goto loc_1d8809;
    if ((short)bx >= (short)0x0029)
        goto loc_1d8809;
loc_1d87c5: // 0160:1d87c5
    if ((short)memoryAGet16(ds, esi) >= (short)0x0019)
        goto loc_1d8808;
    edi = memoryAGet32(ds, 0x20e815);
    if (memoryAGet16(ds, edi) & 0xffff)
        goto loc_1d8808;
    memoryASet16(ds, esi, 0x0019);
    edi = memoryAGet32(ds, 0x20e811);
    memoryASet16(ds, edi, 0x0040);
    ax = 0x0020;
    ax += 0x02ea;
    edi = memoryAGet32(ds, 0x20e819);
    memoryASet16(ds, edi, ax);
    edi = memoryAGet32(ds, 0x20e81d);
    memoryASet16(ds, edi, 0x0032);
loc_1d8808: // 0160:1d8808
    esp += 4;
    return;
loc_1d8809: // 0160:1d8809
    cx -= memoryAGet16(ds, 0x20d389);
    if ((short)cx < 0)
        goto loc_1d8827;
    if ((short)cx >= (short)0x0029)
        goto loc_1d8827;
    dx -= memoryAGet16(ds, 0x20d38b);
    if ((short)dx < 0)
        goto loc_1d8827;
    if ((short)dx <= (short)0x0029)
        goto loc_1d87c5;
loc_1d8827: // 0160:1d8827
    esp += 4;
    return;
}
void sub_1d8828() // 0160:1d8828 +long
{
    esp -= 4;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d883e;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d88b8;
loc_1d883e: // 0160:1d883e
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8854;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d88b8;
loc_1d8854: // 0160:1d8854
    if (bx >= 0x0180)
        goto loc_1d88b8;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d88b8;
    dx = 0;
    cx = memoryAGet16(ds, 0x20d385);
    if (!dx)
        goto loc_1d88ab;
    if (cx == 0x0001)
        goto loc_1d889d;
    if (cx == 0x0002)
        goto loc_1d888f;
    cx = 0x007a;
    dx = 0x0003;
    bx -= 0x0003;
    ax += 0x0003;
    goto loc_1d88af;
loc_1d888f: // 0160:1d888f
    cx = 0x0079;
    dx = 0x0003;
    bx -= 0x0006;
    goto loc_1d88af;
loc_1d889d: // 0160:1d889d
    cx = 0x007a;
    ax -= 0x0003;
    bx -= 0x0003;
    goto loc_1d88af;
loc_1d88ab: // 0160:1d88ab
    cx = 0x0079;
loc_1d88af: // 0160:1d88af
    dx |= 0x0010;
    sub_1b19e0();
loc_1d88b8: // 0160:1d88b8
    esp += 4;
    return;
}
void sub_1d88b9() // 0160:1d88b9 +long
{
    esp -= 4;
    goto loc_1d88b9;
loc_1d24fb: // 0160:1d24fb
    ax = memoryAGet16(ds, esi);
    esi += 0x00000002;
    if ((short)ax < 0)
        goto loc_1d251c;
    ebx = memoryAGet32(ds, esi);
    esi += 0x00000004;
    ebx += ebx;
    edi = memoryAGet32(ds, 0x2eeb94);
    edi += ebx;
    edi -= 0x00000004;
    memoryASet(ds, edi, al);
    goto loc_1d24fb;
loc_1d251c: // 0160:1d251c
    esp += 4;
    return;
    // gap 25500 bytes
loc_1d88b9: // 0160:1d88b9
    if (memoryAGet16(ds, 0x20d89b) & 0xffff)
        goto loc_1d8904;
    if (memoryAGet16(ds, 0x20d7f5) == 0x0001)
        goto loc_1d8904;
    if (ax != memoryAGet16(ds, 0x20d051))
        goto loc_1d88e0;
    if (bx == memoryAGet16(ds, 0x20d087))
        goto loc_1d8916;
loc_1d88e0: // 0160:1d88e0
    if (ax != memoryAGet16(ds, 0x20d04f))
        goto loc_1d88f2;
    if (bx == memoryAGet16(ds, 0x20d085))
        goto loc_1d8916;
loc_1d88f2: // 0160:1d88f2
    if (ax != memoryAGet16(ds, 0x20d04d))
        goto loc_1d8904;
    if (bx == memoryAGet16(ds, 0x20d083))
        goto loc_1d8916;
loc_1d8904: // 0160:1d8904
    if (ax != memoryAGet16(ds, 0x20d04b))
        goto loc_1d891b;
    if (bx != memoryAGet16(ds, 0x20d081))
        goto loc_1d891b;
loc_1d8916: // 0160:1d8916
    goto loc_1d24fb;
loc_1d891b: // 0160:1d891b
    esp += 4;
    return;
}
void sub_1d8a81() // 0160:1d8a81 +long
{
    esp -= 4;
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_1d8b0e;
    bx = memoryAGet16(ds, 0x20c830);
    bx &= 0x0003;
    if (bx)
        goto loc_1d8b0e;
    ax += 0x0001;
    if (ax != 0x005f)
        goto loc_1d8aac;
    push32(esi);
    al = 0x69;
    esi = pop32();
    ax = 0;
loc_1d8aac: // 0160:1d8aac
    memoryASet16(ds, esi + 8, ax);
    if ((short)ax <= (short)0x002f)
        goto loc_1d8ae6;
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0001);
    cx = memoryAGet16(ds, esi + 4);
    cx += 0x0001;
    if (cx != 0x0003)
        goto loc_1d8acb;
    cx = 0;
loc_1d8acb: // 0160:1d8acb
    memoryASet16(ds, esi + 4, cx);
    cx = memoryAGet16(ds, esi + 6);
    cx += 0x0001;
    if (cx != 0x0008)
        goto loc_1d8ae0;
    cx = 0;
loc_1d8ae0: // 0160:1d8ae0
    memoryASet16(ds, esi + 6, cx);
    goto loc_1d8b0e;
loc_1d8ae6: // 0160:1d8ae6
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0001);
    cx = memoryAGet16(ds, esi + 4);
    cx -= 0x0001;
    if ((short)cx >= 0)
        goto loc_1d8af8;
    cx = 0x0002;
loc_1d8af8: // 0160:1d8af8
    memoryASet16(ds, esi + 4, cx);
    cx = memoryAGet16(ds, esi + 6);
    cx -= 0x0001;
    if ((short)cx >= 0)
        goto loc_1d8b0a;
    cx = 0x0007;
loc_1d8b0a: // 0160:1d8b0a
    memoryASet16(ds, esi + 6, cx);
loc_1d8b0e: // 0160:1d8b0e
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    cx = 0x0070;
    dx = 0;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = memoryAGet16(ds, esi);
    bx = memoryAGet16(ds, esi + 2);
    bx += 0x0020;
    cx = 0x0070;
    dx = 0x0002;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = 0x061f;
    bx = memoryAGet16(ds, 0x20ce9d);
    cx = memoryAGet16(ds, esi + 4);
    cx += 0x0071;
    dx = 0;
    push32(esi);
    sub_1d91bd();
    esi = pop32();
    ax = 0x065c;
    bx = memoryAGet16(ds, 0x20ce9d);
    bx -= 0x0018;
    ecx = 0;
    cx = memoryAGet16(ds, esi + 6);
    cx <<= 1;
    edi = 0x00209140;
    bx += memoryAGet16(ds, edi + ecx);
    cx >>= 1;
    cx += 0x0074;
    dx = 0;
    goto loc_1d91bd;
    // gap 1587 bytes
loc_1d91bd: // 0160:1d91bd
    dx |= 0x0010;
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
}
void sub_1d8b8a() // 0160:1d8b8a +long
{
    esp -= 4;
    if (!(memoryAGet16(ds, 0x20d375) & 0xffff))
        goto loc_1d8c0f;
    cx = memoryAGet16(ds, 0x20d36d);
    dx = memoryAGet16(ds, 0x20d36f);
    cx -= ax;
    dx -= bx;
    if ((short)cx >= (short)0x0096)
        goto loc_1d8c0f;
    if ((short)dx >= (short)0x0096)
        goto loc_1d8c0f;
    if ((short)dx <= (short)0x004c)
        goto loc_1d8c0f;
loc_1d8bbd: // 0160:1d8bbd
    ax = memoryAGet16(ds, esi);
    ax += 0x0200;
    ax &= 0x03ff;
    if ((short)ax <= (short)0x0100)
        goto loc_1d8be0;
    if ((short)ax >= (short)0x0200)
        goto loc_1d8be7;
    cx = 0x0200;
    cx -= ax;
    ax = cx;
    goto loc_1d8be7;
loc_1d8be0: // 0160:1d8be0
    ax = -ax;
    ax &= 0x03ff;
loc_1d8be7: // 0160:1d8be7
    if ((short)ax <= (short)0x0380)
        goto loc_1d8bf3;
    ax = 0x0380;
    goto loc_1d8bfd;
loc_1d8bf3: // 0160:1d8bf3
    if ((short)ax >= (short)0x0080)
        goto loc_1d8bfd;
    ax = 0x0080;
loc_1d8bfd: // 0160:1d8bfd
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, edi, 0x0100);
    ax = 0x0107;
    sub_1b1715();
    esp += 4;
    return;
loc_1d8c0f: // 0160:1d8c0f
    if (!(memoryAGet16(ds, 0x20d37f) & 0xffff))
        goto loc_1d8c46;
    cx = memoryAGet16(ds, 0x20d377);
    dx = memoryAGet16(ds, 0x20d379);
    cx -= ax;
    dx -= bx;
    if ((short)cx >= (short)0x0096)
        goto loc_1d8c46;
    if ((short)dx >= (short)0x0096)
        goto loc_1d8c46;
    if ((short)dx > (short)0x004c)
        goto loc_1d8bbd;
loc_1d8c46: // 0160:1d8c46
    esp += 4;
    return;
}
void sub_1d8d96() // 0160:1d8d96 +long
{
    esp -= 4;
    dx = 0;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x0070;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d8dba;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d8ee0;
loc_1d8dba: // 0160:1d8dba
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d8dd0;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d8ee0;
loc_1d8dd0: // 0160:1d8dd0
    if (bx >= 0x0178)
        goto loc_1d8ee0;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d8ee0;
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    ax += memoryAGet16(ds, 0x20cec3);
    bx -= 0x0001;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0038;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx -= 0x0009;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x0078;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0050;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx -= 0x0011;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x007c;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0068;
    bx = memoryAGet16(ds, 0x20ceb5);
    bx -= 0x0015;
    dx = 0x0010;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x0080;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0008;
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += memoryAGet16(ds, 0x20cec3);
    dx = 0;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x0074;
    bx--;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    ax += 0x0028;
    bx = memoryAGet16(ds, 0x20ceb5);
    ax += memoryAGet16(ds, 0x20cec3);
    dx = 0;
    cx = memoryAGet16(ds, 0x20cec5);
    cx += 0x0074;
    bx--;
    sub_1b19e0();
    memoryASet16(ds, 0x20d897, memoryAGet16(ds, 0x20d897) + 0x0001);
loc_1d8ee0: // 0160:1d8ee0
    esp += 4;
    return;
}
void sub_1d8ee1() // 0160:1d8ee1 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20d36d);
    cx += memoryAGet16(ds, 0x20d377);
    dx = memoryAGet16(ds, 0x20d36f);
    cx -= ax;
    dx -= bx;
    if ((short)cx >= (short)0x0096)
        goto loc_1d8f5b;
    if ((short)cx <= (short)0x0050)
        goto loc_1d8f5b;
    if ((short)dx >= (short)0x0096)
        goto loc_1d8f5b;
    if ((short)dx <= (short)0x0078)
        goto loc_1d8f5b;
loc_1d8f16: // 0160:1d8f16
    if ((short)cx <= (short)0x008c)
        goto loc_1d8f22;
    memoryASet16(ds, esi, 0x0100);
loc_1d8f22: // 0160:1d8f22
    ax = memoryAGet16(ds, esi);
    ax += 0x0200;
    ax &= 0x03ff;
    memoryASet16(ds, esi, ax);
    ax = memoryAGet16(ds, edi);
    ax += 0x0020;
    memoryASet16(ds, edi, ax);
    push32(edi);
    edi = memoryAGet32(ds, 0x20e815);
    memoryASet16(ds, edi, 0x0004);
    if (memoryAGet16(ds, 0x20d7a5) != 0x0000)
        goto loc_1d8f59;
    ax = 0x0109;
    sub_1b1715();
loc_1d8f59: // 0160:1d8f59
    edi = pop32();
    esp += 4;
    return;
loc_1d8f5b: // 0160:1d8f5b
    cx = memoryAGet16(ds, 0x20d373);
    cx += memoryAGet16(ds, 0x20d377);
    dx = memoryAGet16(ds, 0x20d375);
    cx -= ax;
    dx -= bx;
    if ((short)cx >= (short)0x0096)
        goto loc_1d8f90;
    if ((short)cx <= (short)0x0050)
        goto loc_1d8f90;
    if ((short)dx >= (short)0x0096)
        goto loc_1d8f90;
    if ((short)dx >= (short)0x0078)
        goto loc_1d8f16;
loc_1d8f90: // 0160:1d8f90
    esp += 4;
    return;
}
void sub_1d90ff() // 0160:1d90ff +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0070;
    goto loc_1d9128;
    // gap 21 bytes
loc_1d9128: // 0160:1d9128
    dx = 0x0010;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d9142;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d91b9;
loc_1d9142: // 0160:1d9142
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d9158;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d91b9;
loc_1d9158: // 0160:1d9158
    if (bx >= 0x0160)
        goto loc_1d91b9;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d91b9;
    memoryASet16(ds, 0x20d897, memoryAGet16(ds, 0x20d897) + 0x0001);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    memoryASet16(ds, 0x20ceb7, cx);
    bx--;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    cx = memoryAGet16(ds, 0x20ceb7);
    bx += 0x001f;
    dx = 0x0010;
    sub_1b19e0();
    memoryASet16(ds, 0x20d897, memoryAGet16(ds, 0x20d897) + 0x0001);
loc_1d91b9: // 0160:1d91b9
    esp += 4;
    return;
}
void sub_1d9116() // 0160:1d9116 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20c830);
    cx >>= 1;
    cx &= 0x0003;
    cx += 0x0074;
    dx = 0x0010;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d9142;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d91b9;
loc_1d9142: // 0160:1d9142
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d9158;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d91b9;
loc_1d9158: // 0160:1d9158
    if (bx >= 0x0160)
        goto loc_1d91b9;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d91b9;
    memoryASet16(ds, 0x20d897, memoryAGet16(ds, 0x20d897) + 0x0001);
    memoryASet16(ds, 0x20ceb3, ax);
    memoryASet16(ds, 0x20ceb5, bx);
    memoryASet16(ds, 0x20ceb7, cx);
    bx--;
    sub_1b19e0();
    ax = memoryAGet16(ds, 0x20ceb3);
    bx = memoryAGet16(ds, 0x20ceb5);
    cx = memoryAGet16(ds, 0x20ceb7);
    bx += 0x001f;
    dx = 0x0010;
    sub_1b19e0();
    memoryASet16(ds, 0x20d897, memoryAGet16(ds, 0x20d897) + 0x0001);
loc_1d91b9: // 0160:1d91b9
    esp += 4;
    return;
}
void sub_1d91ba() // 0160:1d91ba +long
{
    esp -= 4;
    dx = 0;
    dx |= 0x0010;
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
}
void sub_1d91bd() // 0160:1d91bd +long
{
    esp -= 4;
    dx |= 0x0010;
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
}
void sub_1d9409() // 0160:1d9409 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20d379);
    dx = memoryAGet16(ds, 0x20d37b);
    goto loc_1d9427;
    // gap 14 bytes
loc_1d9427: // 0160:1d9427
    ax += 0x0080;
    ax -= cx;
    if (ax < 0x0016)
        goto loc_1d943b;
    if (ax >= 0xffea)
        goto loc_1d943b;
    esp += 4;
    return;
loc_1d943b: // 0160:1d943b
    bx += 0x0080;
    bx -= dx;
    if (bx < 0x0016)
        goto loc_1d9450;
    if (bx >= 0xffea)
        goto loc_1d9450;
    esp += 4;
    return;
loc_1d9450: // 0160:1d9450
    memoryASet16(ds, esi, 0x0008);
    push32(ebp);
    sub_1b1c5c();
    ebp = pop32();
    ax <<= 4;
    ax &= 0x03ff;
    memoryASet16(ds, edi, ax);
    memoryASet16(ss, ebp, 0x00c8);
    esp += 4;
}
void sub_1d9419() // 0160:1d9419 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20d36d);
    dx = memoryAGet16(ds, 0x20d36f);
    ax += 0x0080;
    ax -= cx;
    if (ax < 0x0016)
        goto loc_1d943b;
    if (ax >= 0xffea)
        goto loc_1d943b;
    esp += 4;
    return;
loc_1d943b: // 0160:1d943b
    bx += 0x0080;
    bx -= dx;
    if (bx < 0x0016)
        goto loc_1d9450;
    if (bx >= 0xffea)
        goto loc_1d9450;
    esp += 4;
    return;
loc_1d9450: // 0160:1d9450
    memoryASet16(ds, esi, 0x0008);
    push32(ebp);
    sub_1b1c5c();
    ebp = pop32();
    ax <<= 4;
    ax &= 0x03ff;
    memoryASet16(ds, edi, ax);
    memoryASet16(ss, ebp, 0x00c8);
    esp += 4;
}
void sub_1d946e() // 0160:1d946e +long
{
    esp -= 4;
    bx = memoryAGet16(ds, esi + 10);
    if (!bx)
        goto loc_1d9557;
    ax = memoryAGet16(ds, esi + 8);
    if (!ax)
        goto loc_1d94f5;
    if (ax == 0x0001)
        goto loc_1d94eb;
    if (ax == 0x0002)
        goto loc_1d94ba;
    if (ax == 0x0003)
        goto loc_1d94c0;
    if (ax == 0x0004)
        goto loc_1d94c6;
    if (ax == 0x0005)
        goto loc_1d94cc;
    if (ax == 0x0006)
        goto loc_1d94e7;
    if (ax == 0x0007)
        goto loc_1d94e1;
    if (ax == 0x0008)
        goto loc_1d94d8;
    if (ax == 0x0009)
        goto loc_1d94d2;
loc_1d94ba: // 0160:1d94ba
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0004);
    goto loc_1d94eb;
loc_1d94c0: // 0160:1d94c0
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0010);
    goto loc_1d94eb;
loc_1d94c6: // 0160:1d94c6
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x001c);
    goto loc_1d94eb;
loc_1d94cc: // 0160:1d94cc
    memoryASet16(ds, esi, memoryAGet16(ds, esi) - 0x0038);
    goto loc_1d94eb;
loc_1d94d2: // 0160:1d94d2
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0038);
    goto loc_1d94eb;
loc_1d94d8: // 0160:1d94d8
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x001c);
    goto loc_1d94eb;
    // gap 3 bytes
loc_1d94e1: // 0160:1d94e1
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0010);
    goto loc_1d94eb;
loc_1d94e7: // 0160:1d94e7
    memoryASet16(ds, esi, memoryAGet16(ds, esi) + 0x0004);
loc_1d94eb: // 0160:1d94eb
    memoryASet16(ds, esi + 10, memoryAGet16(ds, esi + 10) - 0x0001);
    goto loc_1d9598;
loc_1d94f5: // 0160:1d94f5
    edi = 0x00200e10;
    bx <<= 1;
    ebx &= 0x0000ffff;
    push32(ebp);
    bp = memoryAGet16(ds, edi + ebx);
    memoryASet16(ds, esi + 4, bp);
    ebp = pop32();
    if (memoryAGet16(ds, esi + 4) & 0xffff)
        goto loc_1d94eb;
    memoryASet16(ds, esi + 10, memoryAGet16(ds, esi + 10) - 0x0001);
    if (memoryAGet16(ds, 0x20cec5) & 0xffff)
        goto loc_1d9541;
    ax = memoryAGet16(ds, esi);
    ax -= 0x01e0;
    ax >>= 5;
    bx = 0x0048;
    bx -= ax;
    ax = bx;
    sub_1b17b7();
    goto loc_1d9598;
loc_1d9541: // 0160:1d9541
    ax = memoryAGet16(ds, esi);
    ax -= 0x0370;
    ax >>= 5;
    ax += 0x0033;
    sub_1b17b7();
    goto loc_1d9598;
loc_1d9557: // 0160:1d9557
    eax = 0;
    ax = memoryAGet16(ds, esi + 6);
    ax += 0x0002;
    edi = 0x00200e32;
    if (!(memoryAGet16(ds, 0x20cec5) & 0xffff))
        goto loc_1d9576;
    edi = 0x00200ee8;
loc_1d9576: // 0160:1d9576
    bx = 0;
    bl = memoryAGet(ds, edi + eax);
    if ((char)bl >= 0)
        goto loc_1d9585;
    eax = 0;
    bl = memoryAGet(ds, edi + eax);
loc_1d9585: // 0160:1d9585
    memoryASet16(ds, esi + 6, ax);
    memoryASet16(ds, esi + 8, bx);
    bx = 0;
    bl = memoryAGet(ds, edi + eax + 1);
    memoryASet16(ds, esi + 10, bx);
loc_1d9598: // 0160:1d9598
    esp += 4;
    return;
}
void sub_1d9599() // 0160:1d9599 +long
{
    esp -= 4;
    goto loc_1d9599;
loc_1b19e0: // 0160:1b19e0
    esi = 0x0020c00c;
    ebp = memoryAGet32(ds, 0x20c80c);
    esi += ebp;
    memoryASet16(ds, esi, ax);
    memoryASet16(ds, esi + 2, bx);
    memoryASet16(ds, esi + 4, cx);
    memoryASet16(ds, esi + 6, dx);
    ax = memoryAGet16(ds, 0x20ce8f);
    memoryASet16(ds, esi + 8, ax);
    memoryASet16(ds, esi + 10, 0x0001);
    memoryASet32(ds, 0x20c80c, memoryAGet32(ds, 0x20c80c) + 0x0000000c);
    esp += 4;
    return;
    // gap 162693 bytes
loc_1d9599: // 0160:1d9599
    memoryASet16(ds, 0x20ceb1, cx);
    ax -= cx;
    bx -= cx;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d95bc;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9632;
loc_1d95bc: // 0160:1d95bc
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d95d2;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9632;
loc_1d95d2: // 0160:1d95d2
    if (bx >= 0x0178)
        goto loc_1d9632;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9632;
    dx = 0x0010;
    cx = 0x0070;
    push32(eax);
    push32(ebx);
    sub_1b19e0();
    ebx = pop32();
    eax = pop32();
    ax += 0x000b;
    bx += 0x0020;
    dx = 0x0010;
    cx = 0x0071;
    push32(eax);
    push32(ebx);
    sub_1b19e0();
    ebx = pop32();
    eax = pop32();
    cx = 0x0024;
    cx -= memoryAGet16(ds, 0x20ceb1);
    cx >>= 1;
    dx = 0x0020;
    dx -= cx;
    bx += dx;
    dx = 0x0010;
    cx = 0x0074;
    goto loc_1b19e0;
loc_1d9632: // 0160:1d9632
    esp += 4;
    return;
}
void sub_1d982d() // 0160:1d982d +long
{
    esp -= 4;
    if ((short)ax <= (short)0x02de)
        goto loc_1d98b9;
    if ((short)ax >= (short)0x02f8)
        goto loc_1d98b9;
    if ((short)bx >= (short)0x0320)
        goto loc_1d987f;
    bx += 0x0072;
    cx = bx;
    esi = 0x0020d375;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d9859: // 0160:1d9859
    if (memoryAGet16(ds, esi) != 0x0370)
        goto loc_1d986e;
    bx -= memoryAGet16(ds, esi + 2);
    if (bx >= 0xffdc)
        goto loc_1d993e;
loc_1d986e: // 0160:1d986e
    bx = cx;
    esi += 0x0000000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9859;
    esp += 4;
    return;
loc_1d987f: // 0160:1d987f
    bx += 0x0072;
    cx = bx;
    esi = 0x0020d3a5;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d9894: // 0160:1d9894
    if (memoryAGet16(ds, esi) != 0x0370)
        goto loc_1d98a9;
    bx -= memoryAGet16(ds, esi + 2);
    if (bx >= 0xffdc)
        goto loc_1d993e;
loc_1d98a9: // 0160:1d98a9
    bx = cx;
    esi += 0x0000000c;
    memoryASet32(ds, 0x20e809, memoryAGet32(ds, 0x20e809) - 0x00000001);
    if (memoryAGet32(ds, 0x20e809))
        goto loc_1d9894;
    esp += 4;
    return;
loc_1d98b9: // 0160:1d98b9
    if ((short)ax <= (short)0x0302)
        goto loc_1d993d;
    if ((short)ax >= (short)0x031c)
        goto loc_1d993d;
    if ((short)bx >= (short)0x0320)
        goto loc_1d9907;
    bx += 0x0072;
    cx = bx;
    esi = 0x0020d375;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d98e1: // 0160:1d98e1
    if (memoryAGet16(ds, esi) != 0x0394)
        goto loc_1d98f6;
    bx -= memoryAGet16(ds, esi + 2);
    if (bx >= 0xffdc)
        goto loc_1d997b;
loc_1d98f6: // 0160:1d98f6
    bx = cx;
    esi += 0x0000000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d98e1;
    esp += 4;
    return;
loc_1d9907: // 0160:1d9907
    bx += 0x0072;
    cx = bx;
    esi = 0x0020d3a5;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d991c: // 0160:1d991c
    if (memoryAGet16(ds, esi) != 0x0394)
        goto loc_1d992d;
    bx -= memoryAGet16(ds, esi + 2);
    if (bx >= 0xffdc)
        goto loc_1d997b;
loc_1d992d: // 0160:1d992d
    bx = cx;
    esi += 0x0000000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d991c;
loc_1d993d: // 0160:1d993d
    esp += 4;
    return;
loc_1d993e: // 0160:1d993e
    if (memoryAGet16(ds, esi + 10) & 0xffff)
        goto loc_1d9964;
    ax = memoryAGet16(ss, ebp);
    ax += 0x0200;
    ax &= 0x03ff;
    memoryASet16(ss, ebp, ax);
    if ((short)memoryAGet16(ds, edi) >= (short)0x0096)
        goto loc_1d997a;
    memoryASet16(ds, edi, 0x00c8);
    goto loc_1d997a;
loc_1d9964: // 0160:1d9964
    sub_1b1c25();
    ax &= 0x00ff;
    ax -= 0x007f;
    memoryASet16(ss, ebp, ax);
    memoryASet16(ds, edi, 0x0180);
loc_1d997a: // 0160:1d997a
    esp += 4;
    return;
loc_1d997b: // 0160:1d997b
    if (memoryAGet16(ds, esi + 10) & 0xffff)
        goto loc_1d99a1;
    ax = memoryAGet16(ss, ebp);
    ax += 0x0200;
    ax &= 0x03ff;
    memoryASet16(ss, ebp, ax);
    if ((short)memoryAGet16(ds, edi) >= (short)0x0096)
        goto loc_1d99bb;
    memoryASet16(ds, edi, 0x00c8);
    goto loc_1d99bb;
loc_1d99a1: // 0160:1d99a1
    sub_1b1c25();
    ax &= 0x00ff;
    ax -= 0x007f;
    ax += 0x0200;
    memoryASet16(ss, ebp, ax);
    memoryASet16(ds, edi, 0x0180);
loc_1d99bb: // 0160:1d99bb
    esp += 4;
    return;
}
void sub_1d99bc() // 0160:1d99bc +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d373) & 0xffff)
        goto loc_1d9a36;
    if ((short)memoryAGet16(ds, 0x20d371) >= (short)0x000e)
        goto loc_1d99d1;
loc_1d99d1: // 0160:1d99d1
    sub_1d9daf();
    esi = 0x0020d3a5;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax)
        goto loc_1d9a77;
    memoryASet16(ds, 0x20e809, 0x0004);
    eax = 0x0000000a;
    memoryASet16(ds, 0x20ceb3, 0x0005);
loc_1d9a02: // 0160:1d9a02
    if ((short)memoryAGet16(ds, 0x20ceb3) <= (short)0x0002)
        goto loc_1d9a26;
    if (memoryAGet16(ds, esi + eax) == 0x0005)
        goto loc_1d9a26;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0001);
    push(ax);
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ceb3, ax);
    ax = pop();
loc_1d9a26: // 0160:1d9a26
    ax += 0x000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9a02;
    goto loc_1d9a77;
loc_1d9a36: // 0160:1d9a36
    esi = 0x0020d3a5;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0003;
    if (ax)
        goto loc_1d9a77;
    memoryASet16(ds, 0x20e809, 0x0004);
    eax = 0x0000000a;
loc_1d9a55: // 0160:1d9a55
    if (!(memoryAGet16(ds, esi + eax) & 0xffff))
        goto loc_1d9a69;
    if (memoryAGet16(ds, esi + eax) == 0x0003)
        goto loc_1d9a69;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) - 0x0001);
loc_1d9a69: // 0160:1d9a69
    ax += 0x000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9a55;
loc_1d9a77: // 0160:1d9a77
    esi = 0x0020d3a5;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d9a85: // 0160:1d9a85
    ax = memoryAGet16(ds, esi + 10);
    if (!(memoryAGet16(ds, esi + 6) & 0xffff))
        goto loc_1d9a97;
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) + ax);
    goto loc_1d9a9b;
loc_1d9a97: // 0160:1d9a97
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - ax);
loc_1d9a9b: // 0160:1d9a9b
    ax = memoryAGet16(ds, esi + 2);
    if ((short)ax <= (short)0x05ae)
        goto loc_1d9abf;
    if ((short)ax >= (short)0x0734)
        goto loc_1d9aad;
    goto loc_1d9acf;
loc_1d9aad: // 0160:1d9aad
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - 0x0006);
    memoryASet16(ds, esi, 0x0370);
    memoryASet16(ds, esi + 6, 0x0000);
    goto loc_1d9acf;
loc_1d9abf: // 0160:1d9abf
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) + 0x0006);
    memoryASet16(ds, esi, 0x0394);
    memoryASet16(ds, esi + 6, 0x0002);
loc_1d9acf: // 0160:1d9acf
    esi += 0x0000000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9a85;
    if (!(memoryAGet16(ds, 0x20d373) & 0xffff))
        goto loc_1d9b93;
    if (memoryAGet16(ds, 0x20d3a5) != 0x0370)
        goto loc_1d9b15;
    if ((short)memoryAGet16(ds, 0x20d3a7) <= (short)0x06b2)
        goto loc_1d9b15;
    if ((short)memoryAGet16(ds, 0x20d3a7) >= (short)0x06b8)
        goto loc_1d9b15;
    memoryASet16(ds, 0x20d3af, 0x0000);
loc_1d9b15: // 0160:1d9b15
    if (memoryAGet16(ds, 0x20d3b1) != 0x0370)
        goto loc_1d9b3f;
    if ((short)memoryAGet16(ds, 0x20d3b3) <= (short)0x06e4)
        goto loc_1d9b3f;
    if ((short)memoryAGet16(ds, 0x20d3b3) >= (short)0x06ea)
        goto loc_1d9b3f;
    memoryASet16(ds, 0x20d3bb, 0x0000);
loc_1d9b3f: // 0160:1d9b3f
    if (memoryAGet16(ds, 0x20d3bd) != 0x0394)
        goto loc_1d9b69;
    if ((short)memoryAGet16(ds, 0x20d3bf) <= (short)0x0612)
        goto loc_1d9b69;
    if ((short)memoryAGet16(ds, 0x20d3bf) >= (short)0x0618)
        goto loc_1d9b69;
    memoryASet16(ds, 0x20d3c7, 0x0000);
loc_1d9b69: // 0160:1d9b69
    if (memoryAGet16(ds, 0x20d3c9) != 0x0394)
        goto loc_1d9b93;
    if ((short)memoryAGet16(ds, 0x20d3cb) <= (short)0x05e0)
        goto loc_1d9b93;
    if ((short)memoryAGet16(ds, 0x20d3cb) >= (short)0x05e6)
        goto loc_1d9b93;
    memoryASet16(ds, 0x20d3d3, 0x0000);
loc_1d9b93: // 0160:1d9b93
    esp += 4;
    return;
}
void sub_1d9b94() // 0160:1d9b94 +long
{
    esp -= 4;
    if (memoryAGet16(ds, 0x20d36f) & 0xffff)
        goto loc_1d9c0e;
    if ((short)memoryAGet16(ds, 0x20d36d) >= (short)0x000e)
        goto loc_1d9ba9;
loc_1d9ba9: // 0160:1d9ba9
    sub_1d9daf();
    esi = 0x0020d375;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax)
        goto loc_1d9c4f;
    memoryASet16(ds, 0x20e809, 0x0004);
    eax = 0x0000000a;
    memoryASet16(ds, 0x20ceb3, 0x0005);
loc_1d9bda: // 0160:1d9bda
    if ((short)memoryAGet16(ds, 0x20ceb3) <= (short)0x0002)
        goto loc_1d9bfe;
    if (memoryAGet16(ds, esi + eax) == 0x0005)
        goto loc_1d9bfe;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) + 0x0001);
    push(ax);
    ax = memoryAGet16(ds, esi + eax);
    memoryASet16(ds, 0x20ceb3, ax);
    ax = pop();
loc_1d9bfe: // 0160:1d9bfe
    ax += 0x000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9bda;
    goto loc_1d9c4f;
loc_1d9c0e: // 0160:1d9c0e
    esi = 0x0020d375;
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0003;
    if (ax)
        goto loc_1d9c4f;
    memoryASet16(ds, 0x20e809, 0x0004);
    eax = 0x0000000a;
loc_1d9c2d: // 0160:1d9c2d
    if (!(memoryAGet16(ds, esi + eax) & 0xffff))
        goto loc_1d9c41;
    if (memoryAGet16(ds, esi + eax) == 0x0003)
        goto loc_1d9c41;
    memoryASet16(ds, esi + eax, memoryAGet16(ds, esi + eax) - 0x0001);
loc_1d9c41: // 0160:1d9c41
    ax += 0x000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9c2d;
loc_1d9c4f: // 0160:1d9c4f
    esi = 0x0020d375;
    memoryASet16(ds, 0x20e809, 0x0004);
loc_1d9c5d: // 0160:1d9c5d
    ax = memoryAGet16(ds, esi + 10);
    if (!(memoryAGet16(ds, esi + 6) & 0xffff))
        goto loc_1d9c6f;
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) + ax);
    goto loc_1d9c73;
loc_1d9c6f: // 0160:1d9c6f
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - ax);
loc_1d9c73: // 0160:1d9c73
    ax = memoryAGet16(ds, esi + 2);
    if ((short)ax <= (short)0x006e)
        goto loc_1d9c97;
    if ((short)ax >= (short)0x01f4)
        goto loc_1d9c85;
    goto loc_1d9ca7;
loc_1d9c85: // 0160:1d9c85
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) - 0x0006);
    memoryASet16(ds, esi, 0x0370);
    memoryASet16(ds, esi + 6, 0x0000);
    goto loc_1d9ca7;
loc_1d9c97: // 0160:1d9c97
    memoryASet16(ds, esi + 2, memoryAGet16(ds, esi + 2) + 0x0006);
    memoryASet16(ds, esi, 0x0394);
    memoryASet16(ds, esi + 6, 0x0002);
loc_1d9ca7: // 0160:1d9ca7
    esi += 0x0000000c;
    memoryASet16(ds, 0x20e809, memoryAGet16(ds, 0x20e809) - 0x0001);
    if (memoryAGet16(ds, 0x20e809))
        goto loc_1d9c5d;
    if (!(memoryAGet16(ds, 0x20d36f) & 0xffff))
        goto loc_1d9d6b;
    if (memoryAGet16(ds, 0x20d375) != 0x0370)
        goto loc_1d9ced;
    if ((short)memoryAGet16(ds, 0x20d377) <= (short)0x0172)
        goto loc_1d9ced;
    if ((short)memoryAGet16(ds, 0x20d377) >= (short)0x0178)
        goto loc_1d9ced;
    memoryASet16(ds, 0x20d37f, 0x0000);
loc_1d9ced: // 0160:1d9ced
    if (memoryAGet16(ds, 0x20d381) != 0x0370)
        goto loc_1d9d17;
    if ((short)memoryAGet16(ds, 0x20d383) <= (short)0x01a4)
        goto loc_1d9d17;
    if ((short)memoryAGet16(ds, 0x20d383) >= (short)0x01aa)
        goto loc_1d9d17;
    memoryASet16(ds, 0x20d38b, 0x0000);
loc_1d9d17: // 0160:1d9d17
    if (memoryAGet16(ds, 0x20d38d) != 0x0394)
        goto loc_1d9d41;
    if ((short)memoryAGet16(ds, 0x20d38f) <= (short)0x00d2)
        goto loc_1d9d41;
    if ((short)memoryAGet16(ds, 0x20d38f) >= (short)0x00d8)
        goto loc_1d9d41;
    memoryASet16(ds, 0x20d397, 0x0000);
loc_1d9d41: // 0160:1d9d41
    if (memoryAGet16(ds, 0x20d399) != 0x0394)
        goto loc_1d9d6b;
    if ((short)memoryAGet16(ds, 0x20d39b) <= (short)0x00a0)
        goto loc_1d9d6b;
    if ((short)memoryAGet16(ds, 0x20d39b) >= (short)0x00a6)
        goto loc_1d9d6b;
    memoryASet16(ds, 0x20d3a3, 0x0000);
loc_1d9d6b: // 0160:1d9d6b
    esp += 4;
    return;
}
void sub_1d9d6c() // 0160:1d9d6c +long
{
    esp -= 4;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d9d82;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9dae;
loc_1d9d82: // 0160:1d9d82
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d9d98;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9dae;
loc_1d9d98: // 0160:1d9d98
    if (bx >= 0x0160)
        goto loc_1d9dae;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9dae;
    sub_1b19e0();
loc_1d9dae: // 0160:1d9dae
    esp += 4;
    return;
}
void sub_1d9daf() // 0160:1d9daf +long
{
    esp -= 4;
    goto loc_1d9daf;
loc_1aa64a: // 0160:1aa64a
    if (memoryAGet16(ds, 0x1f1ccc) == 0x0001)
        goto loc_1c7b2c;
    esp += 4;
    return;
    // gap 29021 bytes
loc_1b17b6: // 0160:1b17b6
    esp += 4;
    return;
loc_1b17b7: // 0160:1b17b7
    if (!(memoryAGet16(ds, 0x1f1ccc) & 0xffff))
        goto loc_1b17b6;
    if (memoryAGet16(ds, 0x20ed7f) & 0xffff)
        goto loc_1b17b6;
    if (!(memoryAGet16(ds, 0x20eda7) & 0xffff))
        goto loc_1b17b6;
    esi = 0x002035b2;
    if (memoryAGet32(ds, 0x30b158) == 0x00000001)
        goto loc_1b17eb;
    esi = 0x0020315c;
loc_1b17eb: // 0160:1b17eb
    eax &= 0x000000ff;
    eax <<= 1;
    ebx = eax;
    eax <<= 1;
    eax += ebx;
    ebx = 0;
    bx = memoryAGet16(ds, esi + eax);
    memoryASet32(ds, 0x1f1cdc, ebx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet32(ds, 0x1f1ce0, ebx);
    bx = memoryAGet16(ds, esi + eax + 4);
    memoryASet32(ds, 0x1f1ce4, ebx);
    if (memoryAGet32(ds, 0x1f1cdc) != 0x00000005)
        goto loc_1aa64a;
loc_1b1827: // 0160:1b1827
    eax = 0;
    ax = memoryAGet16(ds, 0x20d2c5);
    ax++;
    if ((short)ax < (short)0x0006)
        goto loc_1b1839;
    eax = 0;
loc_1b1839: // 0160:1b1839
    memoryASet16(ds, 0x20d2c5, ax);
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1b184e;
    if (ax == 0x0004)
        goto loc_1b1827;
loc_1b184e: // 0160:1b184e
    if (ax == 0x0004)
        goto loc_1b189b;
    if (ax == 0x0005)
        goto loc_1b189b;
    if (!ax)
        goto loc_1b188f;
    if (ax == 0x0001)
        goto loc_1b1883;
    if (ax == 0x0002)
        goto loc_1b1877;
    if (memoryAGet16(ds, 0x20e7dd) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1877: // 0160:1b1877
    if (memoryAGet16(ds, 0x20e7db) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b1883: // 0160:1b1883
    if (memoryAGet16(ds, 0x20e7d9) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b188f: // 0160:1b188f
    if (memoryAGet16(ds, 0x20e7d7) != 0x0000)
        goto loc_1b1827;
    goto loc_1b189b;
loc_1b189b: // 0160:1b189b
    memoryASet32(ds, 0x1f1cdc, eax);
    goto loc_1aa64a;
    // gap 90759 bytes
loc_1c7b2c: // 0160:1c7b2c
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000040;
    if (memoryAGet32(ds, 0x30b158) != 0x00000001)
        goto loc_1c7ba9;
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -28, eax);
    memoryASet32(ss, ebp + -24, 0x00000010);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -20, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -28);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -24);
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -16, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -4) < (int32_t)0x00000000)
        goto loc_1c7b8b;
    eax = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7b8d;
loc_1c7b8b: // 0160:1c7b8b
    goto loc_1c7ba4;
loc_1c7b8d: // 0160:1c7b8d
    ecx = memoryAGet32(ss, ebp + -16);
    ebx = memoryAGet32(ss, ebp + -12);
    edx = memoryAGet32(ss, ebp + -8);
    eax = memoryAGet32(ss, ebp + -4);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7ba4: // 0160:1c7ba4
    goto loc_1c7c27;
loc_1c7ba9: // 0160:1c7ba9
    if (memoryAGet32(ds, 0x1f1cd8) == 0x00000002)
        goto loc_1c7bbb;
    if (memoryAGet32(ds, 0x1f1cd8) != 0x00000003)
        goto loc_1c7bbd;
loc_1c7bbb: // 0160:1c7bbb
    goto loc_1c7bc6;
loc_1c7bbd: // 0160:1c7bbd
    if ((int32_t)memoryAGet32(ds, 0x1f1ce0) >= (int32_t)0x00000003)
        goto loc_1c7c27;
loc_1c7bc6: // 0160:1c7bc6
    eax = memoryAGet32(ds, 0x1f1cdc);
    memoryASet32(ss, ebp + -64, eax);
    eax = memoryAGet32(ds, 0x1f1ce0);
    memoryASet32(ss, ebp + -60, eax);
    memoryASet32(ss, ebp + -56, 0x00000040);
    eax = memoryAGet32(ds, 0x1f1ce4);
    memoryASet32(ss, ebp + -52, eax);
    eax = memoryAGet32(ss, ebp + -64);
    memoryASet32(ss, ebp + -36, eax);
    eax = memoryAGet32(ss, ebp + -60);
    memoryASet32(ss, ebp + -40, eax);
    eax = memoryAGet32(ss, ebp + -56);
    memoryASet32(ss, ebp + -44, eax);
    eax = memoryAGet32(ss, ebp + -52);
    memoryASet32(ss, ebp + -48, eax);
    if ((int32_t)memoryAGet32(ss, ebp + -36) < (int32_t)0x00000000)
        goto loc_1c7c0e;
    eax = memoryAGet32(ss, ebp + -36);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x1f1cd0))
        goto loc_1c7c10;
loc_1c7c0e: // 0160:1c7c0e
    goto loc_1c7c27;
loc_1c7c10: // 0160:1c7c10
    ecx = memoryAGet32(ss, ebp + -48);
    ebx = memoryAGet32(ss, ebp + -44);
    edx = memoryAGet32(ss, ebp + -40);
    eax = memoryAGet32(ss, ebp + -36);
    eax += memoryAGet32(ds, 0x30b150);
    sub_1dfb30();
loc_1c7c27: // 0160:1c7c27
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 74111 bytes
loc_1d9daf: // 0160:1d9daf
    ax = memoryAGet16(ds, 0x20c830);
    ax &= 0x0007;
    if (ax)
        goto loc_1d9df4;
    sub_1b1c6b();
    if ((char)al >= (char)0x3c)
        goto loc_1d9df4;
    ax &= 0x0003;
    if (!ax)
        goto loc_1d9ddf;
    if (ax == 0x0001)
        goto loc_1d9de6;
    if (ax == 0x0002)
        goto loc_1d9ded;
    ax = 0x0056;
    goto loc_1b17b7;
loc_1d9ddf: // 0160:1d9ddf
    al = 0x63;
    goto loc_1b17b7;
loc_1d9de6: // 0160:1d9de6
    al = 0x4b;
    goto loc_1b17b7;
loc_1d9ded: // 0160:1d9ded
    al = 0x7d;
    goto loc_1b17b7;
loc_1d9df4: // 0160:1d9df4
    esp += 4;
    return;
}
void sub_1d9e4f() // 0160:1d9e4f +long
{
    esp -= 4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d371);
    esi = 0x002017a8;
    ax <<= 2;
    bx = memoryAGet16(ds, esi + eax);
    bx += 0x0072;
    memoryASet16(ds, 0x20ceb3, bx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20d373, bx);
    bx += 0x0075;
    memoryASet16(ds, 0x20ceb5, bx);
    dx = 0x0010;
    ax = 0x034f;
    bx = 0x0628;
    sub_1d9fd1();
    dx = 0x0010;
    ax = 0x03bf;
    bx = 0x0628;
    sub_1d9fd1();
    dx = 0x0012;
    ax = 0x034f;
    bx = 0x06b0;
    sub_1d9fd1();
    dx = 0x0012;
    ax = 0x03bf;
    bx = 0x06b0;
    sub_1d9fd1();
    dx = 0x0010;
    ax = 0x0348;
    bx = 0x0630;
    sub_1d9fc8();
    dx = 0x0011;
    ax = 0x03d0;
    bx = 0x0630;
    sub_1d9fc8();
    dx = 0x0010;
    ax = 0x0348;
    bx = 0x06a0;
    sub_1d9fc8();
    dx = 0x0011;
    ax = 0x03d0;
    bx = 0x06a0;
    goto loc_1d9fc8;
    // gap 186 bytes
loc_1d9fc8: // 0160:1d9fc8
    cx = memoryAGet16(ds, 0x20ceb5);
    goto loc_1d9fd8;
    // gap 7 bytes
loc_1d9fd8: // 0160:1d9fd8
    bx -= 0x0001;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0008;
    if (bp)
        goto loc_1d9fed;
    cx += 0x000a;
loc_1d9fed: // 0160:1d9fed
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1da003;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1da02f;
loc_1da003: // 0160:1da003
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1da019;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1da02f;
loc_1da019: // 0160:1da019
    if (bx >= 0x0178)
        goto loc_1da02f;
    if ((short)ax >= (short)0x01c0)
        goto loc_1da02f;
    sub_1b19e0();
loc_1da02f: // 0160:1da02f
    esp += 4;
    return;
}
void sub_1d9f0e() // 0160:1d9f0e +long
{
    esp -= 4;
    eax = 0;
    ax = memoryAGet16(ds, 0x20d36d);
    esi = 0x002017a8;
    ax <<= 2;
    bx = memoryAGet16(ds, esi + eax);
    bx += 0x0072;
    memoryASet16(ds, 0x20ceb3, bx);
    bx = memoryAGet16(ds, esi + eax + 2);
    memoryASet16(ds, 0x20d36f, bx);
    bx += 0x0075;
    memoryASet16(ds, 0x20ceb5, bx);
    dx = 0x0010;
    ax = 0x034f;
    bx = 0x00e8;
    sub_1d9fd1();
    dx = 0x0010;
    ax = 0x03bf;
    bx = 0x00e8;
    sub_1d9fd1();
    dx = 0x0012;
    ax = 0x034f;
    bx = 0x0170;
    sub_1d9fd1();
    dx = 0x0012;
    ax = 0x03bf;
    bx = 0x0170;
    sub_1d9fd1();
    dx = 0x0010;
    ax = 0x0348;
    bx = 0x00f0;
    sub_1d9fc8();
    dx = 0x0011;
    ax = 0x03d0;
    bx = 0x00f0;
    sub_1d9fc8();
    dx = 0x0010;
    ax = 0x0348;
    bx = 0x0160;
    sub_1d9fc8();
    dx = 0x0011;
    ax = 0x03d0;
    bx = 0x0160;
    cx = memoryAGet16(ds, 0x20ceb5);
    goto loc_1d9fd8;
    // gap 7 bytes
loc_1d9fd8: // 0160:1d9fd8
    bx -= 0x0001;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0008;
    if (bp)
        goto loc_1d9fed;
    cx += 0x000a;
loc_1d9fed: // 0160:1d9fed
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1da003;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1da02f;
loc_1da003: // 0160:1da003
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1da019;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1da02f;
loc_1da019: // 0160:1da019
    if (bx >= 0x0178)
        goto loc_1da02f;
    if ((short)ax >= (short)0x01c0)
        goto loc_1da02f;
    sub_1b19e0();
loc_1da02f: // 0160:1da02f
    esp += 4;
    return;
}
void sub_1d9fc8() // 0160:1d9fc8 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20ceb5);
    goto loc_1d9fd8;
    // gap 7 bytes
loc_1d9fd8: // 0160:1d9fd8
    bx -= 0x0001;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0008;
    if (bp)
        goto loc_1d9fed;
    cx += 0x000a;
loc_1d9fed: // 0160:1d9fed
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1da003;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1da02f;
loc_1da003: // 0160:1da003
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1da019;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1da02f;
loc_1da019: // 0160:1da019
    if (bx >= 0x0178)
        goto loc_1da02f;
    if ((short)ax >= (short)0x01c0)
        goto loc_1da02f;
    sub_1b19e0();
loc_1da02f: // 0160:1da02f
    esp += 4;
    return;
}
void sub_1d9fd1() // 0160:1d9fd1 +long
{
    esp -= 4;
    cx = memoryAGet16(ds, 0x20ceb3);
    bx -= 0x0001;
    bp = memoryAGet16(ds, 0x20c830);
    bp &= 0x0008;
    if (bp)
        goto loc_1d9fed;
    cx += 0x000a;
loc_1d9fed: // 0160:1d9fed
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1da003;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1da02f;
loc_1da003: // 0160:1da003
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1da019;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1da02f;
loc_1da019: // 0160:1da019
    if (bx >= 0x0178)
        goto loc_1da02f;
    if ((short)ax >= (short)0x01c0)
        goto loc_1da02f;
    sub_1b19e0();
loc_1da02f: // 0160:1da02f
    esp += 4;
    return;
}
void sub_1da112() // 0160:1da112 +long
{
    esp -= 4;
    goto loc_1da112;
loc_1d91c1: // 0160:1d91c1
    bx -= 0x0001;
    ax -= memoryAGet16(ds, 0x20cf23);
    if ((short)ax >= 0)
        goto loc_1d91db;
    ax += memoryAGet16(ds, 0x20cef5);
    if ((short)ax < 0)
        goto loc_1d9207;
loc_1d91db: // 0160:1d91db
    bx -= memoryAGet16(ds, 0x20cf25);
    if ((short)bx >= 0)
        goto loc_1d91f1;
    bx += memoryAGet16(ds, 0x20cef9);
    if ((short)bx < 0)
        goto loc_1d9207;
loc_1d91f1: // 0160:1d91f1
    if (bx >= 0x0178)
        goto loc_1d9207;
    if ((short)ax >= (short)0x01c0)
        goto loc_1d9207;
    sub_1b19e0();
loc_1d9207: // 0160:1d9207
    esp += 4;
    return;
    // gap 3850 bytes
loc_1da112: // 0160:1da112
    esi = 0x0020602c;
    if ((short)cx >= (short)0x0020)
        goto loc_1da150;
    cx <<= 2;
    ecx &= 0x0000ffff;
    ax += memoryAGet16(ds, esi + ecx);
    bx += memoryAGet16(ds, esi + ecx + 2);
    dx >>= 1;
    ax -= dx;
    bx -= dx;
    dx = 0;
    cx = memoryAGet16(ds, 0x20c830);
    cx &= 0x0003;
    cx += 0x0070;
    goto loc_1d91c1;
loc_1da150: // 0160:1da150
    esp += 4;
    return;
}
void sub_1da2a0() // 0160:1da2a0 +long +returnCarry
{
    esp -= 4;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    flags.carry = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    ebp += ebp + flags.carry;
    esp += 4;
}
void sub_1da2a8() // 0160:1da2a8 +long
{
    esp -= 4;
    push32(ebp);
    edi = eax;
    esi = edx;
    ecx = ebx;
    eax = memoryAGet16(ds, esi);
    eax += esi;
    push32(eax);
    esi += 0x00000002;
    eax = 0;
    ebp = memoryAGet32(ds, esi);
    esi += 0x00000004;
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    ebp += ebp;
    eax += eax + flags.carry;
    ebp++;
    memoryASet(ds, 0x30b160, al);
    memoryASet(ds, 0x30b16a, 0x0a);
loc_1da2d0: // 0160:1da2d0
    memoryASet(ds, 0x30b166, 0x0a);
loc_1da2d7: // 0160:1da2d7
    eax = 0;
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    ebp += ebp;
    if (ebp)
        goto loc_1da2e2;
    sub_1da2a0();
loc_1da2e2: // 0160:1da2e2
    eax += eax + flags.carry;
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    ebp += ebp;
    if (ebp)
        goto loc_1da2ed;
    sub_1da2a0();
loc_1da2ed: // 0160:1da2ed
    eax += eax + flags.carry;
    if (!eax)
        goto loc_1da39e;
    eax = eax + eax*8;
    al |= 0x08;
    memoryASet(ds, 0x30b161, al);
    dl = memoryAGet(ds, esi);
    esi++;
    if (!dl)
        goto loc_1da354;
    ebx = 0;
loc_1da308: // 0160:1da308
    bl = memoryAGet(ds, esi);
    esi++;
    eax = memoryAGet32(ds, esi);
    if (al >= 0xc0)
        goto loc_1da348;
    if (!!(al & 0xc0 & 0x80))
        goto loc_1da332;
    if (al & 0xc0)
        goto loc_1da323;
    al &= 0x3f;
    esi++;
    memoryASet(ds, ecx + ebx*4, al);
    dl--;
    if (dl)
        goto loc_1da308;
    goto loc_1da354;
loc_1da323: // 0160:1da323
    al &= 0x3f;
    esi += 0x00000002;
    memoryASet16(ds, ecx + ebx*4, ax);
    dl--;
    if (dl)
        goto loc_1da308;
    goto loc_1da354;
loc_1da332: // 0160:1da332
    al &= 0x3f;
    esi += 0x00000003;
    memoryASet16(ds, ecx + ebx*4, ax);
    eax >>= 16;
    memoryASet(ds, ecx + ebx * 4 + 0x2, al);
    dl--;
    if (dl)
        goto loc_1da308;
    goto loc_1da354;
loc_1da348: // 0160:1da348
    al &= 0x3f;
    esi += 0x00000004;
    memoryASet32(ds, ecx + ebx*4, eax);
    dl--;
    if (dl)
        goto loc_1da308;
loc_1da354: // 0160:1da354
    ax = 0x0302;
loc_1da358: // 0160:1da358
    dx = 0x03c4;
    out16(dx, ax);
    push32(eax);
    edx = 0;
loc_1da361: // 0160:1da361
    if (!(memoryAGet(ds, 0x30b161) & 0x10))
        goto loc_1da375;
    sub_1da3c8();
    edi -= 0x00000780;
loc_1da375: // 0160:1da375
    edi += 0x00000004;
    flags.carry = !!(memoryAGet(ds, 0x30b161) & (1 << (0x04-1)));
    memoryASet(ds, 0x30b161, ror8(memoryAGet(ds, 0x30b161), 0x04));
    if (flags.carry)
        goto loc_1da361;
    edi -= 0x00000008;
    eax = pop32();
    ah += ah;
    ah += ah;
    if (ah < 0x10)
        goto loc_1da358;
    if (!(memoryAGet(ds, 0x30b160) & 0x01))
        goto loc_1da39e;
    flags.zero = ah == 0x20;
    ah = 0x02;
    if (!flags.zero)
        goto loc_1da358;
loc_1da39e: // 0160:1da39e
    ecx += 0x00000400;
    edi += 0x00000008;
    memoryASet(ds, 0x30b166, memoryAGet(ds, 0x30b166) - 1);
    if (memoryAGet(ds, 0x30b166))
        goto loc_1da2d7;
    edi += 0x00000730;
    memoryASet(ds, 0x30b16a, memoryAGet(ds, 0x30b16a) - 1);
    if (memoryAGet(ds, 0x30b16a))
        goto loc_1da2d0;
    edx = pop32();
    ebp = pop32();
    esp += 4;
}
void sub_1da3c8() // 0160:1da3c8 +long
{
    bool temp_cf;

    esp -= 4;
    ebx = memoryAGet32(ds, esi);
    memoryASet32(ds, edi, ebx);
    esi += 0x00000004;
    edi += 0x00000050;
    al = 0x17;
    goto loc_1da3e0;
loc_1da3d6: // 0160:1da3d6
    esp += 4;
    return;
loc_1da3d7: // 0160:1da3d7
    memoryASet32(ds, edi, ebx);
    edi += 0x00000050;
    al--;
    if (!al)
        goto loc_1da3d6;
loc_1da3e0: // 0160:1da3e0
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    ah = 0x04;
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da3e7");
    }
    // gap 1 bytes
loc_1da3f0: // 0160:1da3f0
    dl = bl;
    bl = memoryAGet(ds, ecx + edx * 4 + 0x3);
    ebx = ror32(ebx, 0x08);
    ah--;
    if (!ah)
        goto loc_1da3d7;
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da402");
    }
loc_1da40a: // 0160:1da40a
    dl = bl;
    bl = memoryAGet(ds, ecx + edx * 4 + 0x2);
    ebx = ror32(ebx, 0x08);
    ah--;
    if (!ah)
        goto loc_1da3d7;
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da41c");
    }
loc_1da424: // 0160:1da424
    dl = bl;
    bl = memoryAGet(ds, ecx + edx * 4 + 0x1);
    ebx = ror32(ebx, 0x08);
    ah--;
    if (!ah)
        goto loc_1da3d7;
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da436");
    }
loc_1da43e: // 0160:1da43e
    bl = memoryAGet(ds, esi);
    esi++;
    ebx = ror32(ebx, 0x08);
    ah--;
    if (!ah)
        goto loc_1da3d7;
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da44d");
    }
loc_1da455: // 0160:1da455
    ebx = ror32(ebx, 0x08);
    ah--;
    if (!ah)
        goto loc_1da3d7;
    dl = bl;
    dl = memoryAGet(ds, ecx + edx*4);
    switch (edx)
    {
        case 1: goto loc_1da455;
        case 2: goto loc_1da43e;
        case 3: goto loc_1da424;
        case 4: goto loc_1da46d;
        case 5: goto loc_1da47c;
        case 6: goto loc_1da48b;
        case 7: goto loc_1da49a;
        case 8: goto loc_1da51c;
        case 9: goto loc_1da533;
        case 10: goto loc_1da54a;
        case 11: goto loc_1da561;
        case 12: goto loc_1da578;
        case 13: goto loc_1da58f;
        case 14: goto loc_1da5a6;
        case 15: goto loc_1da5bd;
        case 16: goto loc_1da6ba;
        case 17: goto loc_1da6d1;
        case 18: goto loc_1da6e8;
        case 19: goto loc_1da6ff;
        case 20: goto loc_1da716;
        case 21: goto loc_1da72d;
        case 22: goto loc_1da744;
        case 23: goto loc_1da75b;
        case 24: goto loc_1da772;
        case 25: goto loc_1da789;
        case 26: goto loc_1da7a0;
        case 27: goto loc_1da7b7;
        case 28: goto loc_1da7ce;
        case 29: goto loc_1daa0d;
        case 30: goto loc_1daa24;
        case 31: goto loc_1daa3b;
        case 32: goto loc_1da886;
        case 33: goto loc_1da89d;
        case 34: goto loc_1da8b4;
        case 35: goto loc_1da8cb;
        case 36: goto loc_1da8e2;
        case 37: goto loc_1da8f9;
        case 38: goto loc_1da910;
        case 39: goto loc_1da927;
        case 40: goto loc_1da93e;
        case 41: goto loc_1da955;
        case 42: goto loc_1da96c;
        case 43: goto loc_1da983;
        case 44: goto loc_1da99a;
        case 45: goto loc_1daa69;
        case 46: goto loc_1daa7c;
        case 47: goto loc_1daa8f;
        case 48: goto loc_1da9b1;
        case 49: goto loc_1da9c8;
        case 50: goto loc_1da9df;
        case 51: goto loc_1da9f6;
        default:
            stop("ind 0160:1da465");
    }
loc_1da46d: // 0160:1da46d
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da46f: // 0160:1da46f
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da43e;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da46f;
loc_1da47c: // 0160:1da47c
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da47e: // 0160:1da47e
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da424;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da47e;
loc_1da48b: // 0160:1da48b
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da48d: // 0160:1da48d
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da424;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da48d;
loc_1da49a: // 0160:1da49a
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da49c: // 0160:1da49c
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da40a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da49c;
loc_1da4ad: // 0160:1da4ad
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da4af: // 0160:1da4af
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da40a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da4af;
loc_1da4c0: // 0160:1da4c0
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da4c2: // 0160:1da4c2
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da40a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da4c2;
loc_1da4d7: // 0160:1da4d7
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da4d9: // 0160:1da4d9
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da3f0;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da4d9;
loc_1da4ee: // 0160:1da4ee
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da4f0: // 0160:1da4f0
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da3f0;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da4f0;
loc_1da505: // 0160:1da505
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da507: // 0160:1da507
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da3f0;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da507;
loc_1da51c: // 0160:1da51c
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da51e: // 0160:1da51e
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da48b;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da51e;
loc_1da533: // 0160:1da533
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da535: // 0160:1da535
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da49a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da535;
loc_1da54a: // 0160:1da54a
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da54c: // 0160:1da54c
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da47c;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da54c;
loc_1da561: // 0160:1da561
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da563: // 0160:1da563
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da49a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da563;
loc_1da578: // 0160:1da578
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da57a: // 0160:1da57a
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da46d;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da57a;
loc_1da58f: // 0160:1da58f
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da591: // 0160:1da591
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da4ad;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da591;
loc_1da5a6: // 0160:1da5a6
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da5a8: // 0160:1da5a8
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da4c0;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da5a8;
loc_1da5bd: // 0160:1da5bd
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da5bf: // 0160:1da5bf
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da5bf;
loc_1da5d4: // 0160:1da5d4
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da5d6: // 0160:1da5d6
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da4c0;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da5d6;
loc_1da5eb: // 0160:1da5eb
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da5ed: // 0160:1da5ed
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da5ed;
loc_1da602: // 0160:1da602
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da604: // 0160:1da604
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da4ad;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da604;
loc_1da619: // 0160:1da619
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da61b: // 0160:1da61b
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da61b;
loc_1da630: // 0160:1da630
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da632: // 0160:1da632
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da46d;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da632;
loc_1da647: // 0160:1da647
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da649: // 0160:1da649
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da4ee;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da649;
loc_1da65e: // 0160:1da65e
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da660: // 0160:1da660
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da505;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da660;
loc_1da675: // 0160:1da675
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da677: // 0160:1da677
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da505;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da677;
loc_1da68c: // 0160:1da68c
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da68e: // 0160:1da68e
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da4ee;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da68e;
loc_1da6a3: // 0160:1da6a3
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da6a5: // 0160:1da6a5
    if (!flags.carry)
        goto loc_1da3f0;
    if (!flags.zero)
        goto loc_1da46d;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da6a5;
loc_1da6ba: // 0160:1da6ba
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da6bc: // 0160:1da6bc
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da561;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da6bc;
loc_1da6d1: // 0160:1da6d1
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da6d3: // 0160:1da6d3
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da5a6;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da6d3;
loc_1da6e8: // 0160:1da6e8
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da6ea: // 0160:1da6ea
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da5bd;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da6ea;
loc_1da6ff: // 0160:1da6ff
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da701: // 0160:1da701
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da533;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da701;
loc_1da716: // 0160:1da716
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da718: // 0160:1da718
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da58f;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da718;
loc_1da72d: // 0160:1da72d
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da72f: // 0160:1da72f
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da5bd;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da72f;
loc_1da744: // 0160:1da744
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da746: // 0160:1da746
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da5d4;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da746;
loc_1da75b: // 0160:1da75b
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da75d: // 0160:1da75d
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da5eb;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da75d;
loc_1da772: // 0160:1da772
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da774: // 0160:1da774
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da602;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da774;
loc_1da789: // 0160:1da789
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da78b: // 0160:1da78b
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da619;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da78b;
loc_1da7a0: // 0160:1da7a0
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da7a2: // 0160:1da7a2
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da630;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da7a2;
loc_1da7b7: // 0160:1da7b7
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da7b9: // 0160:1da7b9
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da647;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da7b9;
loc_1da7ce: // 0160:1da7ce
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da7d0: // 0160:1da7d0
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da65e;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da7d0;
loc_1da7e5: // 0160:1da7e5
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da7e7: // 0160:1da7e7
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da619;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da7e7;
loc_1da7fc: // 0160:1da7fc
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da7fe: // 0160:1da7fe
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da65e;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da7fe;
loc_1da813: // 0160:1da813
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da815: // 0160:1da815
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da5eb;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da815;
loc_1da82a: // 0160:1da82a
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da82c: // 0160:1da82c
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da647;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da82c;
loc_1da841: // 0160:1da841
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da843: // 0160:1da843
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da675;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da843;
loc_1da858: // 0160:1da858
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da85a: // 0160:1da85a
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da68c;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da85a;
loc_1da86f: // 0160:1da86f
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da871: // 0160:1da871
    if (!flags.carry)
        goto loc_1da40a;
    if (!flags.zero)
        goto loc_1da6a3;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da871;
loc_1da886: // 0160:1da886
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da888: // 0160:1da888
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da72d;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da888;
loc_1da89d: // 0160:1da89d
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da89f: // 0160:1da89f
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da789;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da89f;
loc_1da8b4: // 0160:1da8b4
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da8b6: // 0160:1da8b6
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1da7ce;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da8b6;
loc_1da8cb: // 0160:1da8cb
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da8cd: // 0160:1da8cd
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da6e8;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da8cd;
loc_1da8e2: // 0160:1da8e2
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da8e4: // 0160:1da8e4
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da75b;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da8e4;
loc_1da8f9: // 0160:1da8f9
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da8fb: // 0160:1da8fb
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1da7b7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da8fb;
loc_1da910: // 0160:1da910
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da912: // 0160:1da912
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da7e5;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da912;
loc_1da927: // 0160:1da927
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da929: // 0160:1da929
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da7fc;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da929;
loc_1da93e: // 0160:1da93e
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da940: // 0160:1da940
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da813;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da940;
loc_1da955: // 0160:1da955
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da957: // 0160:1da957
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da82a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da957;
loc_1da96c: // 0160:1da96c
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da96e: // 0160:1da96e
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da841;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da96e;
loc_1da983: // 0160:1da983
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da985: // 0160:1da985
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da858;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da985;
loc_1da99a: // 0160:1da99a
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da99c: // 0160:1da99c
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1da86f;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da99c;
loc_1da9b1: // 0160:1da9b1
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da9b3: // 0160:1da9b3
    if (!flags.carry)
        goto loc_1da46d;
    if (!flags.zero)
        goto loc_1da5bd;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da9b3;
loc_1da9c8: // 0160:1da9c8
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da9ca: // 0160:1da9ca
    if (!flags.carry)
        goto loc_1da47c;
    if (!flags.zero)
        goto loc_1da65e;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da9ca;
loc_1da9df: // 0160:1da9df
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da9e1: // 0160:1da9e1
    if (!flags.carry)
        goto loc_1da48b;
    if (!flags.zero)
        goto loc_1da647;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da9e1;
loc_1da9f6: // 0160:1da9f6
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1da9f8: // 0160:1da9f8
    if (!flags.carry)
        goto loc_1da49a;
    if (!flags.zero)
        goto loc_1da6a3;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1da9f8;
loc_1daa0d: // 0160:1daa0d
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa0f: // 0160:1daa0f
    if (!flags.carry)
        goto loc_1da46d;
    if (!flags.zero)
        goto loc_1da49a;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa0f;
loc_1daa24: // 0160:1daa24
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa26: // 0160:1daa26
    if (!flags.carry)
        goto loc_1da47c;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa26;
loc_1daa3b: // 0160:1daa3b
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa3d: // 0160:1daa3d
    if (!flags.carry)
        goto loc_1da48b;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa3d;
loc_1daa52: // 0160:1daa52
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa54: // 0160:1daa54
    if (!flags.carry)
        goto loc_1da46d;
    if (!flags.zero)
        goto loc_1da4d7;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa54;
loc_1daa69: // 0160:1daa69
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa6b: // 0160:1daa6b
    if (!flags.carry)
        goto loc_1da455;
    if (!flags.zero)
        goto loc_1daa3b;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa6b;
loc_1daa7c: // 0160:1daa7c
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa7e: // 0160:1daa7e
    if (!flags.carry)
        goto loc_1da43e;
    if (!flags.zero)
        goto loc_1daa24;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa7e;
loc_1daa8f: // 0160:1daa8f
    flags.carry = ((uint64_t)ebp + ebp) >= 0x100000000ull;
    flags.zero = ((uint64_t)ebp + ebp) % 0x100000000ull == 0;
    ebp += ebp;
loc_1daa91: // 0160:1daa91
    if (!flags.carry)
        goto loc_1da424;
    if (!flags.zero)
        goto loc_1daa52;
    ebp = memoryAGet32(ds, esi);
    esi = esi + 4;
    temp_cf = ((uint64_t)ebp + ebp + flags.carry) >= 0x100000000ull;
    flags.zero = !(ebp + ebp + flags.carry);
    ebp += ebp + flags.carry;
    flags.carry = temp_cf;
    goto loc_1daa91;
}
void sub_1daab0() // 0160:1daab0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    memoryASet32(ds, 0x30b194, 0x00001510);
    eax = memoryAGet32(ds, 0x30b298);
    memoryASet32(ds, 0x30b190, eax);
    eax = esi;
    eax &= 0x0000000f;
    memoryASet32(ds, 0x30b188, eax);
    eax = esi;
    eax = sar32(eax, 0x04);
    memoryASet16(ds, 0x30b19a, ax);
    memoryASet16(ds, 0x30b1ac, 0x0300);
    memoryASet(ds, 0x30b1b0, 0x2f);
    dl = 0;
    memoryASet(ds, 0x30b1b1, dl);
    ebx = 0;
    memoryASet16(ds, 0x30b1b4, bx);
    edx = ds;
    eax = 0x0030b178;
    memoryASet16(ds, 0x30b1c8, dx);
    memoryASet32(ds, 0x30b1c0, 0x0030b178);
    edi = 0x0030b1ac;
loc_1dab1e: // 0160:1dab1e
    ecx = 0x0030b1c8;
    ebx = edi;
    edx = edi;
    eax = 0x00000031;
    sub_1e39c0();
    ax = memoryAGet16(ds, esi + 3);
    al = 0;
    ah &= 0x01;
    eax &= 0x0000ffff;
    if (!eax)
        goto loc_1dab1e;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dab50() // 0160:1dab50 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet(ds, ecx, al);
    ecx = eax;
    ecx &= 0x0000ff00;
    ecx >>= 8;
    memoryASet32(ss, ebp + -4, ecx);
    cl = memoryAGet(ss, ebp + -4);
    memoryASet(ds, ebx, cl);
    eax &= 0x00ff0000;
    eax >>= 16;
    memoryASet(ds, edx, al);
    esp = ebp;
    ebp = pop32();
    esp += 4;
}
void sub_1dab80() // 0160:1dab80 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    ecx = ebp + -4;
    ebx = ebp + -8;
    edx = ebp + -12;
    sub_1dab50();
    edx = 0;
    dl = memoryAGet(ss, ebp + -12);
    eax = edx;
    eax <<= 5;
    eax -= edx;
    eax = eax * 4;
    eax += edx;
    eax = eax * 4;
    edx = eax;
    eax = eax * 8;
    eax += edx;
    ebx = 0;
    bl = memoryAGet(ss, ebp + -8);
    edx = ebx * 4;
    edx += ebx;
    ebx = edx;
    edx <<= 4;
    edx -= ebx;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ss, ebp + -4);
    edx -= 0x00000096;
    eax += edx;
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dabf0() // 0160:1dabf0 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    edx = sar32(edx, 0x04);
    edx <<= 16;
    eax &= 0x0000000f;
    eax += edx;
    edx = pop32();
    esp += 4;
}
void sub_1dac00() // 0160:1dac00 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x30b264);
    dl = memoryAGet(ds, 0x30b294);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x03);
    edx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, edx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x30b264);
    dx = memoryAGet16(ds, edx + 22);
    memoryASet16(ds, eax + 20, dx);
    edx = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edx + 13, al);
    eax = memoryAGet32(ds, 0x30b268);
    sub_1dabf0();
    edx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0006);
    eax = memoryAGet32(ds, 0x30b268);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x30b268);
    memoryASet(ds, eax + 1, 0x00);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    eax = memoryAGet32(ds, 0x30b268);
    eax = memoryAGet32(ds, eax + 2);
    edx = pop32();
    esp += 4;
}
void sub_1daca0() // 0160:1daca0 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edi = eax;
    eax = memoryAGet32(ds, 0x30b238);
    memoryASet(ds, eax, 0x04);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    eax = memoryAGet32(ds, 0x30b264);
    dl = memoryAGet(ds, 0x30b294);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x03);
    esi = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, esi + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x30b264);
    si = memoryAGet16(ds, esi + 22);
    memoryASet16(ds, eax + 20, si);
    esi = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, esi + 13, al);
    eax = memoryAGet32(ds, 0x30b238);
    sub_1dabf0();
    esi = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, esi + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    esi = memoryAGet32(ds, 0x30b238);
    ecx = 0x00000009;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1dad50() // 0160:1dad50 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    edi = memoryAGet32(ds, 0x30b238);
    ecx = 0x00000009;
    esi = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x30b238);
    memoryASet(ds, eax, 0x03);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    edi = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, 0x30b294);
    memoryASet(ds, edi + 1, al);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x0c);
    edi = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, edi + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x30b264);
    di = memoryAGet16(ds, edi + 22);
    memoryASet16(ds, eax + 20, di);
    edi = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, edi + 13, al);
    eax = memoryAGet32(ds, 0x30b238);
    sub_1dabf0();
    edi = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, edi + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0009);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1dae00() // 0160:1dae00 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet(ds, eax, 0x1a);
    eax = memoryAGet32(ds, 0x30b270);
    dl = memoryAGet(ds, 0x30b294);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet16(ds, eax + 20, 0x0000);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet32(ds, eax + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x30b274);
    sub_1dabf0();
    esi = memoryAGet32(ds, 0x30b270);
    memoryASet32(ds, esi + 14, eax);
    eax = memoryAGet32(ds, 0x30b270);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x30b274);
    memoryASet(ds, eax, 0x0a);
    eax = memoryAGet32(ds, 0x30b270);
    sub_1daab0();
    esi = memoryAGet32(ds, 0x30b274);
    esi++;
    ecx = 0x00000006;
    edi = 0x0030b255;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    eax = memoryAGet32(ds, 0x30b274);
    dl = memoryAGet(ds, eax + 1);
    memoryASet(ds, 0x30b245, dl);
    dl = memoryAGet(ds, eax + 2);
    memoryASet(ds, 0x30b246, dl);
    eax = memoryAGet32(ds, eax + 3);
    ecx = 0x0030b249;
    ebx = 0x0030b248;
    edx = 0x0030b247;
    sub_1dab50();
    eax = memoryAGet32(ds, 0x30b274);
    eax = memoryAGet32(ds, eax + 3);
    sub_1dab80();
    memoryASet32(ds, 0x30b24a, eax);
    eax = memoryAGet32(ds, 0x30b270);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1daef0() // 0160:1daef0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    ebx = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, 0x30b294);
    memoryASet(ds, ebx + 1, al);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x03);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 13, 0x00);
    ebx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, ebx + 22, 0x00000000);
    eax = memoryAGet32(ds, 0x30b264);
    bx = memoryAGet16(ds, ebx + 22);
    memoryASet16(ds, eax + 20, bx);
    ebx = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, eax + 20);
    memoryASet(ds, ebx + 13, al);
    eax = memoryAGet32(ds, 0x30b278);
    sub_1dabf0();
    ebx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, ebx + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0007);
    eax = memoryAGet32(ds, 0x30b278);
    memoryASet(ds, eax, 0x0b);
    eax = memoryAGet32(ds, 0x30b278);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    eax = memoryAGet32(ds, 0x30b278);
    eax = memoryAGet32(ds, eax + 2);
    sub_1dab80();
    memoryASet32(ds, 0x30b240, eax);
    memoryASet16(ds, 0x30b23e, dx);
    eax = memoryAGet32(ds, 0x30b278);
    al = memoryAGet(ds, eax + 6);
    al &= 0xd0;
    memoryASet(ds, 0x30b244, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dafc0() // 0160:1dafc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = memoryAGet32(ds, 0x30b288);
    memoryASet(ds, ebx, 0x16);
    ecx = memoryAGet32(ds, 0x30b288);
    bl = memoryAGet(ds, 0x30b294);
    memoryASet(ds, ecx + 1, bl);
    ebx = memoryAGet32(ds, 0x30b288);
    memoryASet(ds, ebx + 2, 0x84);
    ebx = memoryAGet32(ds, 0x30b288);
    memoryASet(ds, ebx + 13, 0x00);
    ebx = memoryAGet32(ds, 0x30b288);
    memoryASet32(ds, ebx + 14, eax);
    edx -= eax;
    eax = memoryAGet32(ds, 0x30b288);
    memoryASet32(ds, eax + 18, edx);
    eax = memoryAGet32(ds, 0x30b288);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b288);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db020() // 0160:1db020 +long
{
    esp -= 4;
    push32(edx);
    eax = memoryAGet32(ds, 0x30b28c);
    memoryASet(ds, eax, 0x0d);
    edx = memoryAGet32(ds, 0x30b28c);
    al = memoryAGet(ds, 0x30b294);
    memoryASet(ds, edx + 1, al);
    eax = memoryAGet32(ds, 0x30b28c);
    memoryASet(ds, eax + 2, 0x85);
    eax = memoryAGet32(ds, 0x30b28c);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b28c);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    edx = pop32();
    esp += 4;
}
void sub_1db060() // 0160:1db060 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x30b290);
    memoryASet(ds, edx, al);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    edx = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, 0x30b294);
    memoryASet(ds, edx + 1, al);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x30b290);
    sub_1dabf0();
    edx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, edx + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0001);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    edx = pop32();
    esp += 4;
}
void sub_1db0d0() // 0160:1db0d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    memoryASet32(ds, 0x30b1f0, 0x00001500);
    ebx = 0;
    memoryASet32(ds, 0x30b1e4, ebx);
    memoryASet16(ds, 0x30b208, 0x0300);
    memoryASet(ds, 0x30b20c, 0x2f);
    dl = 0;
    memoryASet(ds, 0x30b20d, dl);
    ebx = 0;
    memoryASet16(ds, 0x30b210, bx);
    edx = ds;
    eax = 0x0030b1d4;
    memoryASet16(ds, 0x30b224, dx);
    memoryASet32(ds, 0x30b21c, 0x0030b1d4);
    ecx = 0x0030b224;
    ebx = 0x0030b208;
    edx = ebx;
    eax = 0x00000031;
    sub_1e39c0();
    if (memoryAGet16(ds, 0x30b1e4) & 0xffff)
        goto loc_1db145;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1db145: // 0160:1db145
    al = memoryAGet(ds, 0x30b1e4);
    memoryASet(ds, 0x30b23c, al);
    al = memoryAGet(ds, 0x30b1ec);
    memoryASet(ds, 0x30b23d, al);
    eax = 0;
    al = memoryAGet(ds, 0x30b23d);
    memoryASet32(ds, 0x30b298, eax);
    sub_1dae00();
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db180() // 0160:1db180 +long
{
    esp -= 4;
    eax = 0x00000005;
    sub_1db060();
    ax = memoryAGet16(ds, 0x30b25f);
    al = 0;
    ah &= 0x02;
    eax &= 0x0000ffff;
    al = !eax;
    ah = 0;
    esp += 4;
}
void sub_1db1a0() // 0160:1db1a0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    dl = al;
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax, 0x1e);
    ebx = memoryAGet32(ds, 0x30b264);
    al = memoryAGet(ds, 0x30b294);
    memoryASet(ds, ebx + 1, al);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 2, 0x0c);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet(ds, eax + 13, 0x00);
    eax = memoryAGet32(ds, 0x30b280);
    sub_1dabf0();
    ebx = memoryAGet32(ds, 0x30b264);
    memoryASet32(ds, ebx + 14, eax);
    eax = memoryAGet32(ds, 0x30b264);
    memoryASet16(ds, eax + 18, 0x0002);
    eax = memoryAGet32(ds, 0x30b280);
    memoryASet(ds, eax, 0x01);
    eax = memoryAGet32(ds, 0x30b280);
    memoryASet(ds, eax + 1, dl);
    eax = memoryAGet32(ds, 0x30b264);
    sub_1daab0();
    eax = memoryAGet32(ds, 0x30b264);
    ax = memoryAGet16(ds, eax + 3);
    memoryASet16(ds, 0x30b25f, ax);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db220() // 0160:1db220 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
loc_1db223: // 0160:1db223
    sub_1dae00();
    eax = 0;
    ax = memoryAGet16(ds, 0x30b25f);
    edx++;
    if (eax != 0x00008102)
        goto loc_1db240;
    if ((int32_t)edx < (int32_t)0x000001f4)
        goto loc_1db223;
loc_1db240: // 0160:1db240
    if (edx != 0x000001f4)
        goto loc_1db24c;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1db24c: // 0160:1db24c
    eax = 0;
    al = memoryAGet(ds, 0x30b246);
    if ((int32_t)eax <= (int32_t)0x0000001e)
        goto loc_1db25f;
    memoryASet(ds, 0x30b246, 0x23);
loc_1db25f: // 0160:1db25f
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
}
void sub_1db270() // 0160:1db270 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000001c;
    memoryASet32(ss, ebp + -28, 0x00000100);
    eax += 0x0000000f;
    eax = sar32(eax, 0x04);
    memoryASet32(ss, ebp + -24, eax);
    ebx = ebp + -28;
    edx = ebp + -28;
    eax = 0x00000031;
    sub_1e39d9();
    if (memoryAGet32(ss, ebp + -4) == 0x00000000)
        goto loc_1db2a2;
    eax = 0;
    goto loc_1db2ad;
loc_1db2a2: // 0160:1db2a2
    eax = memoryAGet32(ss, ebp + -28);
    eax &= 0x0000ffff;
    eax <<= 4;
loc_1db2ad: // 0160:1db2ad
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db2c0() // 0160:1db2c0 +long
{
    esp -= 4;
    push32(ecx);
    if (memoryAGet32(ds, 0x30b230) != 0x00000000)
        goto loc_1db3aa;
    eax = 0x0000001e;
    sub_1db270();
    memoryASet32(ds, 0x30b264, eax);
    eax = 0x00000006;
    sub_1db270();
    memoryASet32(ds, 0x30b268, eax);
    eax = 0x0000000b;
    sub_1db270();
    memoryASet32(ds, 0x30b26c, eax);
    eax = 0x0000001a;
    sub_1db270();
    memoryASet32(ds, 0x30b270, eax);
    eax = 0x00000007;
    sub_1db270();
    memoryASet32(ds, 0x30b274, eax);
    eax = 0x00000007;
    sub_1db270();
    memoryASet32(ds, 0x30b278, eax);
    eax = 0x00000005;
    sub_1db270();
    memoryASet32(ds, 0x30b27c, eax);
    eax = 0x00000002;
    sub_1db270();
    memoryASet32(ds, 0x30b280, eax);
    eax = 0x00000018;
    sub_1db270();
    memoryASet32(ds, 0x30b284, eax);
    eax = 0x00000016;
    sub_1db270();
    memoryASet32(ds, 0x30b288, eax);
    eax = 0x0000000d;
    sub_1db270();
    memoryASet32(ds, 0x30b28c, eax);
    eax = 0x00000001;
    sub_1db270();
    memoryASet32(ds, 0x30b290, eax);
    eax = 0x0000000b;
    sub_1db270();
    memoryASet32(ds, 0x30b234, eax);
    eax = 0x00000009;
    sub_1db270();
    memoryASet32(ds, 0x30b238, eax);
    memoryASet32(ds, 0x30b230, 0x00000001);
loc_1db3aa: // 0160:1db3aa
    sub_1db0d0();
    if (ax)
        goto loc_1db3b8;
    eax = 0;
    ecx = pop32();
    esp += 4;
    return;
loc_1db3b8: // 0160:1db3b8
    ecx = 0;
    memoryASet32(ds, 0x30b29c, ecx);
    memoryASet32(ds, 0x30b2a0, ecx);
    sub_1db180();
    if (ax)
        goto loc_1db3da;
    memoryASet32(ds, 0x30b29c, 0x00000001);
loc_1db3da: // 0160:1db3da
    eax = 0x00000001;
    ecx = pop32();
    esp += 4;
}
void sub_1db470() // 0160:1db470 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    sub_1db620();
    ebx = 0;
    memoryASet32(ds, 0x30b29c, ebx);
    memoryASet32(ds, 0x30b2a0, ebx);
    sub_1db220();
    if (!eax)
        goto loc_1db540;
    eax = 0;
    al = memoryAGet(ds, 0x30b245);
    if ((int32_t)edx < (int32_t)eax)
        goto loc_1db4ac;
    eax = 0;
    al = memoryAGet(ds, 0x30b246);
    if ((int32_t)edx <= (int32_t)eax)
        goto loc_1db4b3;
loc_1db4ac: // 0160:1db4ac
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1db4b3: // 0160:1db4b3
    ebx = (short)dx;
    eax = ebx;
    sub_1daef0();
    eax = 0;
    al = memoryAGet(ds, 0x30b244);
    if (eax != 0x00000040)
        goto loc_1db4d0;
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1db4d0: // 0160:1db4d0
    eax = memoryAGet32(ds, 0x30b240);
    memoryASet32(ds, 0x2091e0, eax);
    ecx = 0;
    cl = memoryAGet(ds, 0x30b246);
    eax = edx + 1;
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1db4f5;
    eax = memoryAGet32(ds, 0x30b24a);
    memoryASet32(ds, 0x30b2a4, eax);
    goto loc_1db50f;
loc_1db4f5: // 0160:1db4f5
    edx++;
    eax = (short)dx;
    sub_1daef0();
    eax = memoryAGet32(ds, 0x30b240);
    memoryASet32(ds, 0x30b2a4, eax);
    eax = ebx;
    sub_1daef0();
loc_1db50f: // 0160:1db50f
    eax = 0x00000001;
    sub_1db1a0();
    edx = memoryAGet32(ds, 0x30b2a4);
    eax = memoryAGet32(ds, 0x2091e0);
    sub_1dafc0();
loc_1db529: // 0160:1db529
    sub_1db180();
    if (ax)
        goto loc_1db529;
    esi = 0x00000001;
    memoryASet32(ds, 0x30b29c, esi);
    eax = esi;
loc_1db540: // 0160:1db540
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db5b0() // 0160:1db5b0 +long
{
    esp -= 4;
    push32(edx);
    if (memoryAGet32(ds, 0x30b29c) == 0x00000000)
        goto loc_1db5e0;
    if (memoryAGet32(ds, 0x30b2a0) != 0x00000000)
        goto loc_1db5e0;
    sub_1dac00();
    memoryASet32(ds, 0x2091dc, eax);
    edx = memoryAGet32(ds, 0x30b2a4);
    eax = edx + -1;
    sub_1dafc0();
    sub_1db020();
loc_1db5e0: // 0160:1db5e0
    memoryASet32(ds, 0x30b2a0, 0x00000001);
    edx = pop32();
    esp += 4;
}
void sub_1db5f0() // 0160:1db5f0 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    if (memoryAGet32(ds, 0x30b29c) == 0x00000000)
        goto loc_1db614;
    if (memoryAGet32(ds, 0x30b2a0) == 0x00000000)
        goto loc_1db614;
    edx = memoryAGet32(ds, 0x30b2a4);
    eax = memoryAGet32(ds, 0x2091dc);
    sub_1dafc0();
loc_1db614: // 0160:1db614
    ecx = 0;
    memoryASet32(ds, 0x30b2a0, ecx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1db620() // 0160:1db620 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet32(ds, 0x30b29c) == 0x00000000)
        goto loc_1db645;
    edx = memoryAGet32(ds, 0x30b2a4);
    eax = edx + -1;
    sub_1dafc0();
    sub_1db020();
    eax = 0;
    sub_1db1a0();
loc_1db645: // 0160:1db645
    ebx = 0;
    memoryASet32(ds, 0x30b29c, ebx);
    memoryASet32(ds, 0x30b2a0, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1db660() // 0160:1db660 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1db66f;
    edx ^= eax;
loc_1db66f: // 0160:1db66f
    if ((int32_t)edx <= (int32_t)0x000000ff)
        goto loc_1db67c;
    edx = 0x000000ff;
loc_1db67c: // 0160:1db67c
    eax = ebp + -12;
    sub_1daca0();
    memoryASet(ss, ebp + -10, dl);
    memoryASet(ss, ebp + -8, dl);
    memoryASet(ss, ebp + -6, dl);
    memoryASet(ss, ebp + -4, dl);
    eax = ebp + -12;
    sub_1dad50();
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1db6c0() // 0160:1db6c0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    esi = ebx;
    eax = 0;
    if ((int32_t)ebx <= 0)
        goto loc_1db716;
loc_1db6d3: // 0160:1db6d3
    bl = memoryAGet(ds, edx);
    bl &= 0x0f;
    ebx &= 0x000000ff;
    bl = memoryAGet(ds, ebx + 2134504);
    memoryASet(ds, ecx, memoryAGet(ds, ecx) + bl);
    ebx = eax;
    eax++;
    edi = memoryAGet32(ss, ebp + -4);
    edi += ebx;
    bl = memoryAGet(ds, ecx);
    memoryASet(ds, edi, bl);
    if ((int32_t)eax >= (int32_t)esi)
        goto loc_1db716;
    ebx = 0;
    bl = memoryAGet(ds, edx);
    ebx = sar32(ebx, 0x04);
    bl = memoryAGet(ds, ebx + 2134504);
    memoryASet(ds, ecx, memoryAGet(ds, ecx) + bl);
    ebx = eax;
    eax++;
    edi = memoryAGet32(ss, ebp + -4);
    edi += ebx;
    bl = memoryAGet(ds, ecx);
    memoryASet(ds, edi, bl);
    edx++;
    if ((int32_t)eax < (int32_t)esi)
        goto loc_1db6d3;
loc_1db716: // 0160:1db716
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1db720() // 0160:1db720 +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx + -1;
    eax = eax * 0x00000054;
    ebx = 0x002091fc;
    ebx += eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    al = memoryAGet(ds, ebx + 40);
    memoryASet(ds, ebx + 48, al);
    memoryASet32(ds, ebx + 56, edx);
    edx = sar32(edx, 0x10);
    memoryASet32(ds, ebx + 52, edx);
    eax = memoryAGet32(ds, ebx + 8);
    edx = memoryAGet32(ds, ebx + 28);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 32);
    al = memoryAGet(ds, ebx + 48);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 36);
    al = 0;
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 56);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 20);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 56);
    eax >>= 8;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 20);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 52);
    edx = memoryAGet32(ds, ebx + 16);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 36);
    al = 0;
    out8(dx, al);
    eax = ecx;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 24);
    out8(dx, al);
    eax = ecx;
    eax = sar32(eax, 0x08);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 24);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 12);
    edx = memoryAGet32(ds, ebx + 28);
    out8(dx, al);
    flagsFromReg32(pop32());
    ecx = pop32();
    esp += 4;
}
void sub_1db7a0() // 0160:1db7a0 +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx + -1;
    eax = eax * 0x00000054;
    ebx = 0x002091fc;
    ebx += eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    al = memoryAGet(ds, ebx + 40);
    al |= 0x10;
    memoryASet(ds, ebx + 48, al);
    memoryASet32(ds, ebx + 56, edx);
    edx = sar32(edx, 0x10);
    memoryASet32(ds, ebx + 52, edx);
    eax = memoryAGet32(ds, ebx + 8);
    edx = memoryAGet32(ds, ebx + 28);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 32);
    al = memoryAGet(ds, ebx + 48);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 36);
    al = 0;
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 56);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 20);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 56);
    eax >>= 8;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 20);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 52);
    edx = memoryAGet32(ds, ebx + 16);
    out8(dx, al);
    edx = memoryAGet32(ds, ebx + 36);
    al = 0;
    out8(dx, al);
    eax = ecx;
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 24);
    out8(dx, al);
    eax = ecx;
    eax = sar32(eax, 0x08);
    eax &= 0x000000ff;
    edx = memoryAGet32(ds, ebx + 24);
    out8(dx, al);
    eax = memoryAGet32(ds, ebx + 12);
    edx = memoryAGet32(ds, ebx + 28);
    out8(dx, al);
    flagsFromReg32(pop32());
    ecx = pop32();
    esp += 4;
}
void sub_1db8a0() // 0160:1db8a0 +long
{
    esp -= 4;
    memoryASet32(ds, 0x30b478, eax);
    esp += 4;
}
void sub_1db8b0() // 0160:1db8b0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x30b478, edx);
    edx = pop32();
    esp += 4;
}
void sub_1db8c0() // 0160:1db8c0 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = eax;
    eax = 0x0030b2a8;
    sub_1dbf20();
    ebx = pop32();
    esp += 4;
}
void sub_1db920() // 0160:1db920 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(ebp);
    ebp = esp;
    esi = memoryAGet32(ss, ebp + 12);
    push32(esi);
    push32(ecx);
    ecx = ebx;
    ebx = edx;
    edx = eax;
    eax = 0x0030b2a8;
    sub_1dc120();
    ebp = pop32();
    stop("stack_below", "0160:1db939");
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
}
void sub_1db960() // 0160:1db960 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    memoryASet32(ds, 0x30b2a8, eax);
    memoryASet32(ds, 0x30b2ac, edx);
    eax = 0x0030b2a8;
    sub_1dbef0();
    if (memoryAGet32(ds, 0x30b474) != 0x00000000)
        goto loc_1db994;
    eax = 0x00002100;
    sub_1e24b0();
    memoryASet32(ds, 0x30b474, eax);
    if (!eax)
        goto loc_1db9aa;
loc_1db994: // 0160:1db994
    eax = memoryAGet32(ds, 0x30b474);
    edx = ebx;
    sub_1dc170();
    eax = 0x001db940;
    sub_1df1f0();
loc_1db9aa: // 0160:1db9aa
    ebx = pop32();
    esp += 4;
}
void sub_1db9b0() // 0160:1db9b0 +long
{
    esp -= 4;
    eax = 0;
    goto loc_1df1f0;
    // gap 14393 bytes
loc_1df1f0: // 0160:1df1f0
    memoryASet32(ds, 0x30e264, eax);
    esp += 4;
}
void sub_1db9c0() // 0160:1db9c0 +long
{
    esp -= 4;
    memoryASet32(ds, 0x30b64c, eax);
    esp += 4;
}
void sub_1db9d0() // 0160:1db9d0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x30b64c, edx);
    edx = pop32();
    esp += 4;
}
void sub_1db9e0() // 0160:1db9e0 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    edx = eax;
    eax = 0x0030b47c;
    sub_1dbf20();
    ebx = pop32();
    esp += 4;
}
void sub_1dba40() // 0160:1dba40 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(ebp);
    ebp = esp;
    esi = memoryAGet32(ss, ebp + 12);
    push32(esi);
    push32(ecx);
    ecx = ebx;
    ebx = edx;
    edx = eax;
    eax = 0x0030b47c;
    sub_1dc120();
    ebp = pop32();
    stop("stack_below", "0160:1dba59");
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    esp += 4;
}
void sub_1dba80() // 0160:1dba80 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    memoryASet32(ds, 0x30b47c, eax);
    memoryASet32(ds, 0x30b480, edx);
    eax = 0x0030b47c;
    sub_1dbef0();
    if (memoryAGet32(ds, 0x30b648) != 0x00000000)
        goto loc_1dbab4;
    eax = 0x00002100;
    sub_1e24b0();
    memoryASet32(ds, 0x30b648, eax);
    if (!eax)
        goto loc_1dbaca;
loc_1dbab4: // 0160:1dbab4
    eax = memoryAGet32(ds, 0x30b648);
    edx = ebx;
    sub_1dc170();
    eax = 0x001dba60;
    sub_1e15e0();
loc_1dbaca: // 0160:1dbaca
    ebx = pop32();
    esp += 4;
}
void sub_1dbad0() // 0160:1dbad0 +long
{
    esp -= 4;
    eax = 0;
    goto loc_1e15e0;
    // gap 23305 bytes
loc_1e15e0: // 0160:1e15e0
    memoryASet32(ds, 0x313338, eax);
    esp += 4;
}
void sub_1dbe60() // 0160:1dbe60 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, edx);
    edx = 0x000003c8;
    out8(dx, al);
    al = memoryAGet(ss, ebp + -4);
    edx = 0x000003c9;
    out8(dx, al);
    al = bl;
    out8(dx, al);
    al = cl;
    out8(dx, al);
    esp = ebp;
    ebp = pop32();
    esp += 4;
}
void sub_1dbe90() // 0160:1dbe90 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    if ((int32_t)edx < 0)
        goto loc_1dbedf;
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax))
        goto loc_1dbedf;
    eax = edx * 8;
    eax -= edx;
    eax = eax * 4;
    edx = ebx + 12;
    edx += eax;
    memoryASet(ds, edx, 0x00);
    memoryASet(ds, edx + 1, 0x00);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx + 8, 0x00000000);
    eax = edx;
    edx += 0x00000008;
loc_1dbeca: // 0160:1dbeca
    memoryASet32(ds, eax + 12, 0x0030bc50);
    memoryASet32(ds, eax + 20, 0x0030bc51);
    eax += 0x00000004;
    if (eax != edx)
        goto loc_1dbeca;
loc_1dbedf: // 0160:1dbedf
    ebx = pop32();
    esp += 4;
}
void sub_1dbef0() // 0160:1dbef0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    memoryASet32(ds, eax + 8, 0x00000000);
    ebx = 0;
    if ((int32_t)memoryAGet32(ds, eax) <= (int32_t)0x00000000)
        goto loc_1dbf11;
loc_1dbf03: // 0160:1dbf03
    edx = ebx;
    eax = ecx;
    sub_1dbe90();
    ebx++;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, ecx))
        goto loc_1dbf03;
loc_1dbf11: // 0160:1dbf11
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dbf20() // 0160:1dbf20 +long +returnZero
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    flags.zero = !(edx & edx);
    if ((int32_t)edx < 0)
        goto loc_1dbf6f;
    flags.zero = esi == memoryAGet32(ds, eax);
    if ((int32_t)esi >= (int32_t)memoryAGet32(ds, eax))
        goto loc_1dbf6f;
    if ((int32_t)ebx >= (int32_t)0x00000071)
        goto loc_1dbf3a;
    ebx = 0x00000071;
    goto loc_1dbf47;
loc_1dbf3a: // 0160:1dbf3a
    if ((int32_t)ebx <= (int32_t)0x00000358)
        goto loc_1dbf47;
    ebx = 0x00000358;
loc_1dbf47: // 0160:1dbf47
    eax = 0x0036a040;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax <<= 15;
    edx = eax;
    edx = sar32(edx, 0x1f);
    ebx = memoryAGet32(ds, ecx + 4);
    idiv32(ebx);
    edx = eax;
    eax = esi * 8;
    flags.zero = eax == esi;
    eax -= esi;
    memoryASet32(ds, ecx + eax * 4 + 0x14, edx);
loc_1dbf6f: // 0160:1dbf6f
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1dbf80() // 0160:1dbf80 +long
{
    esp -= 4;
    push32(ecx);
    ecx = eax;
    if ((int32_t)edx < 0)
        goto loc_1dbfaa;
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax))
        goto loc_1dbfaa;
    if ((int32_t)ebx >= 0)
        goto loc_1dbf93;
    ebx = 0;
    goto loc_1dbf9d;
loc_1dbf93: // 0160:1dbf93
    if ((int32_t)ebx <= (int32_t)0x00000040)
        goto loc_1dbf9d;
    ebx = 0x00000040;
loc_1dbf9d: // 0160:1dbf9d
    eax = edx * 8;
    eax -= edx;
    memoryASet(ds, ecx + eax * 4 + 0xc, bl);
loc_1dbfaa: // 0160:1dbfaa
    ecx = pop32();
    esp += 4;
}
void sub_1dc050() // 0160:1dc050 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    memoryASet32(ss, ebp + -8, eax);
    edi = edx;
    memoryASet32(ss, ebp + -4, ebx);
    memoryASet32(ss, ebp + -12, ecx);
    ebx = memoryAGet32(ss, ebp + 16);
    ecx = memoryAGet32(ss, ebp + 20);
    if ((int32_t)edx < 0)
        goto loc_1dc115;
    if ((int32_t)edi >= (int32_t)memoryAGet32(ds, eax))
        goto loc_1dc115;
    edx = edi;
    eax = edx * 8;
    eax -= edx;
    eax = eax * 4;
    esi = memoryAGet32(ss, ebp + -8);
    esi += 0x0000000c;
    esi += eax;
    eax = memoryAGet32(ss, ebp + -4);
    if (eax)
        goto loc_1dc0c4;
    memoryASet32(ds, esi + 4, eax);
    memoryASet32(ds, esi + 8, eax);
    al = memoryAGet(ds, esi + 8);
    memoryASet(ds, esi + 1, al);
    memoryASet(ds, esi, al);
    eax = esi;
    edx = esi + 8;
loc_1dc0ad: // 0160:1dc0ad
    memoryASet32(ds, eax + 12, 0x0030bc50);
    memoryASet32(ds, eax + 20, 0x0030bc51);
    eax += 0x00000004;
    if (eax == edx)
        goto loc_1dc115;
    goto loc_1dc0ad;
loc_1dc0c4: // 0160:1dc0c4
    eax = memoryAGet32(ss, ebp + -8);
    sub_1dbf80();
    ebx = ecx;
    edx = edi;
    eax = memoryAGet32(ss, ebp + -8);
    sub_1dbf20();
    eax = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ds, eax + 12);
    edx = memoryAGet32(ss, ebp + -4);
    eax -= memoryAGet32(ds, edx);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ss, ebp + -12))
        goto loc_1dc0eb;
    memoryASet32(ss, ebp + -12, eax);
loc_1dc0eb: // 0160:1dc0eb
    edx = esi;
    eax = memoryAGet32(ss, ebp + -4);
    ecx = eax + 8;
loc_1dc0f3: // 0160:1dc0f3
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx + 12, ebx);
    ebx = memoryAGet32(ds, eax + 12);
    memoryASet32(ds, edx + 20, ebx);
    edx += 0x00000004;
    eax += 0x00000004;
    if (eax != ecx)
        goto loc_1dc0f3;
    eax = memoryAGet32(ss, ebp + -12);
    eax <<= 15;
    memoryASet32(ds, esi + 4, eax);
    memoryASet(ds, esi + 1, 0x00);
loc_1dc115: // 0160:1dc115
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1dc120() // 0160:1dc120 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    if ((int32_t)edx < 0)
        goto loc_1dc15d;
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, eax))
        goto loc_1dc15d;
    if ((int32_t)ebx < 0)
        goto loc_1dc15d;
    if ((int32_t)ebx > (int32_t)0x00000180)
        goto loc_1dc15d;
    if (!ebx)
        goto loc_1dc14e;
    esi = memoryAGet32(ss, ebp + 20);
    push32(esi);
    edi = memoryAGet32(ss, ebp + 16);
    push32(edi);
    ebx = memoryAGet32(ds, ebx * 4 + 0x30b64c);
    goto loc_1dc158;
loc_1dc14e: // 0160:1dc14e
    edi = memoryAGet32(ss, ebp + 20);
    push32(edi);
    ebx = memoryAGet32(ss, ebp + 16);
    push32(ebx);
    ebx = 0;
loc_1dc158: // 0160:1dc158
    sub_1dc050();
loc_1dc15d: // 0160:1dc15d
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1dc170() // 0160:1dc170 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000014;
    ecx = eax;
    memoryASet32(ss, ebp + -12, edx);
    edx = 0;
    memoryASet32(ss, ebp + -16, edx);
    goto loc_1dc1b0;
    // gap 12 bytes
loc_1dc190: // 0160:1dc190
    ebx = memoryAGet32(ss, ebp + -16);
    stop("stack_below", "0160:1dc190");
    ebx += 0x00000002;
    memoryASet32(ss, ebp + -16, ebx);
    if ((int32_t)ebx > (int32_t)0x00000040)
        goto loc_1dc22b;
    eax = eax;
    edx = edx;
    eax = eax;
loc_1dc1b0: // 0160:1dc1b0
    push32(0x3fe33333);
    push32(0x40000000);
    fild32(memoryAGet32(ss, ebp + -16));
    fmul32(memoryAGet32(ds, 0x20affc));
    esp -= 0x00000008;
    memoryASet64(ds, esp, fstp64());
    sub_1e3b30();
    stop("stack_below", "0160:1dc1c9");
    memoryASet32(ss, ebp + -20, fstp32());
    ebx = 0;
    eax = memoryAGet32(ss, ebp + -16);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    flags.sign = stop("nosave");
    eax <<= 8;
    edx = ecx + eax;
    eax = eax;
    edx = edx;
    ebx = ebx;
loc_1dc1f0: // 0160:1dc1f0
    ax = (char)bl;
    memoryASet32(ss, ebp + -4, eax);
    fild16(memoryAGet16(ss, ebp + -4));
    fmul32(memoryAGet32(ss, ebp + -20));
    memoryASet32(ss, ebp + -8, fstp32());
    fild32(memoryAGet32(ss, ebp + -12));
    fld32(memoryAGet32(ss, ebp + -8));
    fadd32(memoryAGet32(ds, 0x20b000));
    stop("disassembly failed at 160:1dc20c fdivrp st(1)");
    sub_1e3b40();
    memoryASet32(ss, ebp + -8, fistp32());
    al = memoryAGet(ss, ebp + -8);
    memoryASet(ds, edx, al);
    edx++;
    ebx++;
    flags.sign = (int32_t)ebx < (int32_t)0x00000100;
    if ((int32_t)ebx >= (int32_t)0x00000100)
        goto loc_1dc190;
    goto loc_1dc1f0;
loc_1dc22b: // 0160:1dc22b
    esp = ebp;
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1dc3f0() // 0160:1dc3f0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    edi = ebx;
    esi = ecx;
    memoryASet32(ss, ebp + -4, eax);
    ebx = 0;
    if ((int32_t)ecx <= 0)
        goto loc_1dc41d;
    ecx = edx;
loc_1dc407: // 0160:1dc407
    eax = ebx;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(edi);
    edx += memoryAGet32(ss, ebp + -4);
    dl = memoryAGet(ds, edx);
    memoryASet(ds, ecx, dl);
    ecx++;
    ebx++;
    if ((int32_t)ebx < (int32_t)esi)
        goto loc_1dc407;
loc_1dc41d: // 0160:1dc41d
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1dc430() // 0160:1dc430 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000054;
    memoryASet32(ss, ebp + -20, eax);
    memoryASet32(ss, ebp + -28, edx);
    if (memoryAGet32(ds, 0x313108) == 0x00000000)
        goto loc_1dc459;
    ecx = 0;
    ebx = 0x0000003f;
    edx = ebx;
    eax = 0;
    sub_1dbe60();
loc_1dc459: // 0160:1dc459
    ecx = memoryAGet32(ss, ebp + -20);
    ebx = 0x00000001;
    edx = 0x00000030;
    eax = ebp + -84;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1dc47d;
    eax = 0xfffffffd;
    goto loc_1dc601;
loc_1dc47d: // 0160:1dc47d
    ebx = 0x00000004;
    edx = 0x0020b004;
    eax = ebp + -84;
    sub_1e3d27();
    if (!eax)
        goto loc_1dc4b6;
    ebx = 0x00000004;
    edx = 0x0020b009;
    eax = ebp + -84;
    sub_1e3d27();
    if (!eax)
        goto loc_1dc4b6;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc4b6: // 0160:1dc4b6
    eax = ebp + -76;
    sub_1e0940();
    memoryASet32(ss, ebp + -32, eax);
    if ((int32_t)eax < 0)
        goto loc_1dc601;
    if (memoryAGet32(ds, eax * 4 + 0x30b650) != 0x00000000)
        goto loc_1dc5ff;
    eax = memoryAGet32(ss, ebp + -44);
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ss, ebp + -40);
    memoryASet32(ss, ebp + -8, eax);
    edx = eax + 1048;
    eax = 0x0020b00e;
    sub_1df820();
    esi = eax;
    if (eax)
        goto loc_1dc506;
    eax = 0xfffffffc;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc506: // 0160:1dc506
    edi = eax + 24;
    if (memoryAGet32(ss, ebp + -28) == 0x00000000)
        goto loc_1dc55d;
    ah = 0;
    memoryASet(ss, ebp + -4, ah);
    edx = memoryAGet32(ss, ebp + -8);
    edx++;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edx = edi + eax;
    memoryASet32(ss, ebp + -24, edx);
    ecx = memoryAGet32(ss, ebp + -20);
    ebx = 0x00000001;
    edx = eax;
    eax = memoryAGet32(ss, ebp + -24);
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1dc54b;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc54b: // 0160:1dc54b
    ecx = ebp + -4;
    ebx = memoryAGet32(ss, ebp + -8);
    edx = memoryAGet32(ss, ebp + -24);
    eax = edi;
    sub_1db6c0();
    goto loc_1dc581;
loc_1dc55d: // 0160:1dc55d
    ecx = memoryAGet32(ss, ebp + -20);
    ebx = 0x00000001;
    edx = memoryAGet32(ss, ebp + -8);
    eax = edi;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1dc581;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc581: // 0160:1dc581
    eax = memoryAGet32(ss, ebp + -8);
    eax += edi;
    memoryASet32(ss, ebp + -12, eax);
    eax = memoryAGet32(ss, ebp + -16);
    edx = memoryAGet32(ss, ebp + -8);
    if (eax != edx)
        goto loc_1dc5b5;
    ecx = 0x00000400;
    ebx = 0x00000001;
    edx = memoryAGet32(ss, ebp + -12);
    eax = edi;
    sub_1dc3f0();
    memoryASet32(ds, esi, edi);
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ds, esi + 12, eax);
    memoryASet32(ds, esi + 4, eax);
    eax++;
    goto loc_1dc5dc;
loc_1dc5b5: // 0160:1dc5b5
    ebx = edx;
    ebx -= eax;
    eax += edi;
    memoryASet32(ss, ebp + -36, eax);
    ecx = 0x00000400;
    edx = memoryAGet32(ss, ebp + -12);
    sub_1dc3f0();
    memoryASet32(ds, esi, edi);
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ds, esi + 12, eax);
    eax = memoryAGet32(ss, ebp + -36);
    memoryASet32(ds, esi + 4, eax);
    eax = memoryAGet32(ss, ebp + -12);
loc_1dc5dc: // 0160:1dc5dc
    memoryASet32(ds, esi + 16, eax);
    eax = memoryAGet32(ss, ebp + -32);
    memoryASet32(ds, eax * 4 + 0x30b650, esi);
    if (memoryAGet32(ds, 0x313108) == 0x00000000)
        goto loc_1dc5ff;
    ecx = 0;
    ebx = 0;
    edx = 0;
    eax = 0;
    sub_1dbe60();
loc_1dc5ff: // 0160:1dc5ff
    eax = 0;
loc_1dc601: // 0160:1dc601
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dc610() // 0160:1dc610 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    eax = eax;
    edx = edx;
loc_1dc620: // 0160:1dc620
    edx = 0;
    memoryASet32(ds, eax + 3192400, edx);
    eax += 0x00000004;
    if (eax != 0x00000600)
        goto loc_1dc620;
    edx = pop32();
    esp += 4;
}
void sub_1dc840() // 0160:1dc840 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    ebx = memoryAGet32(ds, 0x30c05c);
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1dc858;
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc858: // 0160:1dc858
    ecx = 0;
    memoryASet32(ds, ebx * 8 + 0x30c06c, ecx);
    memoryASet32(ds, ebx * 8 + 0x30c070, eax);
    eax = 0x00000001;
    esi = ebx + eax;
    memoryASet32(ds, 0x30c05c, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dc880() // 0160:1dc880 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30c05c);
    if ((int32_t)edx > 0)
        goto loc_1dc89d;
    goto loc_1dc8d7;
loc_1dc894: // 0160:1dc894
    eax += 0x00000008;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1dc8a6;
    goto loc_1dc8d7;
loc_1dc89d: // 0160:1dc89d
    eax = 0;
    edx = edx * 8;
loc_1dc8a6: // 0160:1dc8a6
    if (ebx != memoryAGet32(ds, eax + 3194992))
        goto loc_1dc894;
    esi = memoryAGet32(ds, 0x30c05c);
    esi--;
    memoryASet32(ds, 0x30c05c, esi);
    if (!esi)
        goto loc_1dc8cc;
    edi = eax + 3194988;
    esi = esi * 8 + 0x30c06c;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
loc_1dc8cc: // 0160:1dc8cc
    flagsFromReg32(pop32());
    eax = 0x00000001;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc8d7: // 0160:1dc8d7
    flagsFromReg32(pop32());
    eax = 0;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dc8e0() // 0160:1dc8e0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x30c05c, edx);
    eax = 0x000000c8;
    sub_1e25a0();
    eax &= 0x0000ffff;
    memoryASet32(ds, 0x30c054, eax);
    memoryASet32(ds, 0x30c058, eax);
    memoryASet32(ds, 0x30c050, 0x00010000);
    eax = 0x001dc652;
    sub_1dc840();
    ebx = 0x002094ac;
    edx = 0x002094a8;
    eax = 0x00000008;
    sub_1e2350();
    edx = cs;
    eax = 0x001dc634;
    ebx = 0;
    bx = dx;
    edx = 0x001dc634;
    eax = 0x00000008;
    sub_1e23a0();
    eax = 0;
    ax = memoryAGet16(ds, 0x30c054);
    sub_1e2600();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dc960() // 0160:1dc960 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(flagAsReg32());
    flags.interrupts = 0;
    eax = 0;
    ax = memoryAGet16(ds, 0x30c050);
    sub_1e2600();
    ebx = 0;
    bx = memoryAGet16(ds, 0x2094ac);
    edx = memoryAGet32(ds, 0x2094a8);
    eax = 0x00000008;
    sub_1e23a0();
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dc990() // 0160:1dc990 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x30c060);
    edx++;
    memoryASet32(ds, 0x30c060, edx);
    if (edx != 0x00000001)
        goto loc_1dc9b1;
    if (memoryAGet32(ds, 0x30c0ec) != 0x00000000)
        goto loc_1dc9b1;
    sub_1dc8e0();
loc_1dc9b1: // 0160:1dc9b1
    edx = pop32();
    esp += 4;
}
void sub_1dc9c0() // 0160:1dc9c0 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x30c060);
    edx--;
    memoryASet32(ds, 0x30c060, edx);
    if (edx)
        goto loc_1dc9de;
    if (memoryAGet32(ds, 0x30c0ec) != 0x00000000)
        goto loc_1dc9de;
    sub_1dc960();
loc_1dc9de: // 0160:1dc9de
    if ((int32_t)memoryAGet32(ds, 0x30c060) >= (int32_t)0x00000000)
        goto loc_1dc9fe;
    push32(0x0020b06c);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0xffffffff;
    sub_1e3663();
loc_1dc9fe: // 0160:1dc9fe
    edx = pop32();
    esp += 4;
}
void sub_1dcad0() // 0160:1dcad0 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    memoryASet32(ds, 0x30e250, edx);
    sub_1dcd60();
    memoryASet32(ds, 0x30e254, eax);
    edx = pop32();
    esp += 4;
}
void sub_1dcaf0() // 0160:1dcaf0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x30d8fc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ebx = eax;
    eax = 0;
    edx = ebx;
    edx = edx * 4;
    edx -= ebx;
    edx = edx * 4;
    if ((int32_t)edx <= 0)
        goto loc_1dcb3b;
    ebx = 0;
    ecx = 0x00000071;
loc_1dcb22: // 0160:1dcb22
    memoryASet32(ds, eax + 3201420, ebx);
    memoryASet32(ds, eax + 3201424, ecx);
    memoryASet32(ds, eax + 3201428, ebx);
    eax += 0x0000000c;
    if ((int32_t)eax < (int32_t)edx)
        goto loc_1dcb22;
loc_1dcb3b: // 0160:1dcb3b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcb60() // 0160:1dcb60 +long
{
    esp -= 4;
    goto loc_1dcb60;
loc_1dc840: // 0160:1dc840
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    edx = eax;
    ebx = memoryAGet32(ds, 0x30c05c);
    if ((int32_t)ebx < (int32_t)0x00000010)
        goto loc_1dc858;
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dc858: // 0160:1dc858
    ecx = 0;
    memoryASet32(ds, ebx * 8 + 0x30c06c, ecx);
    memoryASet32(ds, ebx * 8 + 0x30c070, eax);
    eax = 0x00000001;
    esi = ebx + eax;
    memoryASet32(ds, 0x30c05c, esi);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 741 bytes
loc_1dcb60: // 0160:1dcb60
    memoryASet32(ds, 0x30e24c, eax);
    sub_1dc990();
    eax = 0x001dcb40;
    goto loc_1dc840;
}
void sub_1dcb80() // 0160:1dcb80 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    ebx = memoryAGet32(ds, 0x30d950);
    al = dl;
    edx = ebx;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x89;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d958);
    eax = 0;
    ax = in16(dx);
    edx = eax;
    edx >>= 4;
    flagsFromReg32(pop32());
    eax = edx;
    eax &= 0x00000fff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcbc0() // 0160:1dcbc0 +long
{
    esp -= 4;
    if ((int32_t)edx >= 0)
        goto loc_1dcbc6;
    edx = 0;
loc_1dcbc6: // 0160:1dcbc6
    if ((int32_t)edx <= (int32_t)0x000001ff)
        goto loc_1dcbd3;
    edx = 0x000001ff;
loc_1dcbd3: // 0160:1dcbd3
    edx = memoryAGet32(ds, edx * 4 + 0x209558);
    eax = eax;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    if ((int32_t)edx >= 0)
        goto loc_1dcbec;
    ebx ^= edx;
loc_1dcbec: // 0160:1dcbec
    if ((int32_t)ebx <= (int32_t)0x00000fff)
        goto loc_1dcbf9;
    ebx = 0x00000fff;
loc_1dcbf9: // 0160:1dcbf9
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d950);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x09;
    out8(dx, al);
    eax = ebx;
    eax <<= 4;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    flagsFromReg32(pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcbe0() // 0160:1dcbe0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    if ((int32_t)edx >= 0)
        goto loc_1dcbec;
    ebx ^= edx;
loc_1dcbec: // 0160:1dcbec
    if ((int32_t)ebx <= (int32_t)0x00000fff)
        goto loc_1dcbf9;
    ebx = 0x00000fff;
loc_1dcbf9: // 0160:1dcbf9
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d950);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x09;
    out8(dx, al);
    eax = ebx;
    eax <<= 4;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    flagsFromReg32(pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcc20() // 0160:1dcc20 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    if ((int32_t)edx >= 0)
        goto loc_1dcc2b;
    edx = 0;
loc_1dcc2b: // 0160:1dcc2b
    if ((int32_t)edx <= (int32_t)0x000001ff)
        goto loc_1dcc38;
    edx = 0x000001ff;
loc_1dcc38: // 0160:1dcc38
    eax = esi;
    sub_1dcf70();
    eax = esi;
    sub_1dcb80();
    push32(0x00000000);
    ebx = memoryAGet32(ds, edx * 4 + 0x30da4c);
    ecx = 0x0000000a;
    edx = eax;
    eax = esi;
    sub_1dcfc0();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_below", "0160:1dcc5f");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1dcc70() // 0160:1dcc70 +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x30e24c) == 0x00000000)
        goto loc_1dcc91;
    ebx = 0;
    memoryASet32(ds, 0x30e24c, ebx);
    eax = 0x001dcb40;
    sub_1dc880();
    sub_1dc9c0();
loc_1dcc91: // 0160:1dcc91
    ebx = pop32();
    esp += 4;
}
void sub_1dcca0() // 0160:1dcca0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0;
loc_1dcca4: // 0160:1dcca4
    edx = memoryAGet32(ds, 0x30d964);
    eax = 0;
    al = in8(dx);
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000007)
        goto loc_1dcca4;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dccc0() // 0160:1dccc0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    cl = dl;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x43;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d958);
    eax = ebx;
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x44;
    out8(dx, al);
    ebx = sar32(ebx, 0x10);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d978);
    al = cl;
    out8(dx, al);
    flagsFromReg32(pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcd00() // 0160:1dcd00 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
loc_1dcd06: // 0160:1dcd06
    ebx--;
    if (ebx == 0xffffffff)
        goto loc_1dcd1b;
    edx = 0;
    dl = memoryAGet(ds, esi);
    eax = ecx;
    esi++;
    ecx++;
    sub_1dccc0();
    goto loc_1dcd06;
loc_1dcd1b: // 0160:1dcd1b
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1dcd20() // 0160:1dcd20 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x43;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d958);
    eax = ebx;
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x44;
    out8(dx, al);
    ebx = sar32(ebx, 0x10);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d978);
    eax = 0;
    al = in8(dx);
    ebx = eax;
    flagsFromReg32(pop32());
    al = bl;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcd60() // 0160:1dcd60 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    eax = 0;
    sub_1dcd20();
    ch = al;
    edx = 0x000000aa;
    eax = 0;
    sub_1dccc0();
    eax = 0;
    sub_1dcd20();
    eax &= 0x000000ff;
    if (eax == 0x000000aa)
        goto loc_1dcdaf;
    eax = 0;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dcd93: // 0160:1dcd93
    edx = 0;
    dl = cl;
    eax = ebx;
    sub_1dccc0();
    ebx += 0x00000400;
    esi++;
    if ((int32_t)ebx < (int32_t)0x00100000)
        goto loc_1dcdc2;
    goto loc_1dcdf9;
loc_1dcdaf: // 0160:1dcdaf
    edx = 0;
    eax = 0;
    sub_1dccc0();
    esi = 0x00000001;
    ebx = 0x00000400;
loc_1dcdc2: // 0160:1dcdc2
    eax = 0;
    sub_1dcd20();
    edx = 0;
    dl = al;
    if (edx)
        goto loc_1dcdf9;
    eax = ebx;
    sub_1dcd20();
    cl = al;
    edx = 0x000000aa;
    eax = ebx;
    sub_1dccc0();
    eax = ebx;
    sub_1dcd20();
    edx = 0;
    dl = al;
    if (edx == 0x000000aa)
        goto loc_1dcd93;
loc_1dcdf9: // 0160:1dcdf9
    edx = 0;
    dl = ch;
    eax = 0;
    sub_1dccc0();
    eax = esi;
    eax <<= 10;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dce10() // 0160:1dce10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = 0;
    sub_1dcd20();
    bl = al;
    eax = 0x00000001;
    sub_1dcd20();
    bh = al;
    edx = 0x000000aa;
    eax = 0;
    sub_1dccc0();
    edx = 0x00000055;
    eax = 0x00000001;
    sub_1dccc0();
    eax = 0;
    sub_1dcd20();
    cl = al;
    eax = 0x00000001;
    sub_1dcd20();
    ch = al;
    edx = 0;
    dl = bl;
    eax = 0;
    sub_1dccc0();
    edx = 0;
    dl = bh;
    eax = 0x00000001;
    sub_1dccc0();
    eax = 0;
    al = cl;
    if (eax != 0x000000aa)
        goto loc_1dce8e;
    eax = 0;
    al = ch;
    if (eax != 0x00000055)
        goto loc_1dce8e;
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dce8e: // 0160:1dce8e
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcea0() // 0160:1dcea0 +long
{
    esp -= 4;
    push32(edx);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x4c;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = 0;
    out8(dx, al);
    sub_1dcca0();
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x4c;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = 0x01;
    out8(dx, al);
    sub_1dcca0();
    sub_1dcca0();
    sub_1dce10();
    edx = pop32();
    esp += 4;
}
void sub_1dcee0() // 0160:1dcee0 +long
{
    esp -= 4;
    push32(ecx);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1dceeb;
    ecx = eax;
    ecx -= edx;
    goto loc_1dceef;
loc_1dceeb: // 0160:1dceeb
    ecx = edx;
    ecx -= eax;
loc_1dceef: // 0160:1dceef
    edx = ebx;
    eax = ebx;
    eax <<= 5;
    eax -= ebx;
    eax = eax * 4;
    eax += ebx;
    eax = eax * 8;
    edx ^= ebx;
    div32(ecx);
    ebx = eax;
    ecx = 0x00000004;
    eax = memoryAGet32(ds, 0x30d8fc);
    eax = memoryAGet32(ds, eax * 4 + 0x209e20);
    edx = 0;
loc_1dcf21: // 0160:1dcf21
    if (ebx >= eax)
        goto loc_1dcf38;
    ecx = edx;
loc_1dcf27: // 0160:1dcf27
    if (ecx != 0x00000004)
        goto loc_1dcf47;
    ecx = 0x00000003;
    edx = 0x00000001;
    goto loc_1dcf53;
loc_1dcf38: // 0160:1dcf38
    eax = eax * 8;
    edx++;
    if (edx < 0x00000003)
        goto loc_1dcf21;
    goto loc_1dcf27;
loc_1dcf47: // 0160:1dcf47
    edx = eax;
    edx >>= 1;
    eax += edx;
    edx = 0;
    div32(ebx);
    edx = eax;
loc_1dcf53: // 0160:1dcf53
    al = cl;
    al <<= 6;
    ah = dl;
    ah &= 0x3f;
    al |= ah;
    ecx = pop32();
    esp += 4;
}
void sub_1dcf70() // 0160:1dcf70 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    ebx = memoryAGet32(ds, 0x30d950);
    al = dl;
    edx = ebx;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x8d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    al = in8(dx);
    bl = al;
    bl |= 0x03;
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dcfc0() // 0160:1dcfc0 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    memoryASet32(ss, ebp + -4, eax);
    edi = edx;
    esi = ebx;
    ebx = ecx;
    cl = memoryAGet(ss, ebp + 16);
    if (edx == esi)
        goto loc_1dd09c;
    edx = esi;
    eax = edi;
    sub_1dcee0();
    ah = al;
    cl &= 0x78;
    ebx = edi;
    if ((int32_t)edi <= (int32_t)esi)
        goto loc_1dcff7;
    edi = esi;
    esi = ebx;
    cl |= 0x40;
loc_1dcff7: // 0160:1dcff7
    if ((int32_t)edi >= (int32_t)0x00000040)
        goto loc_1dd001;
    edi = 0x00000040;
loc_1dd001: // 0160:1dd001
    if ((int32_t)esi <= (int32_t)0x00000fc0)
        goto loc_1dd00e;
    esi = 0x00000fc0;
loc_1dd00e: // 0160:1dd00e
    edx = memoryAGet32(ds, 0x30d950);
    al = memoryAGet(ss, ebp + -4);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x06;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x07;
    out8(dx, al);
    eax = edi;
    eax = sar32(eax, 0x04);
    edx = memoryAGet32(ds, 0x30d95c);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x08;
    out8(dx, al);
    eax = esi;
    eax = sar32(eax, 0x04);
    edx = memoryAGet32(ds, 0x30d95c);
    out8(dx, al);
    edx = ebx;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1dcbe0();
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x8d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    al = in8(dx);
    al &= 0x04;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1dd07c;
    cl |= 0x04;
loc_1dd07c: // 0160:1dd07c
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = cl;
    out8(dx, al);
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d95c);
    al = cl;
    out8(dx, al);
loc_1dd09c: // 0160:1dd09c
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1dd0b0() // 0160:1dd0b0 +long +stackDrop8
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000002c;
    memoryASet32(ss, ebp + -8, eax);
    ecx = 0x00000009;
    edi = ebp + -44;
    esi = 0x00209eac;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    if (memoryAGet32(ss, ebp + 20) != 0x00000000)
        goto loc_1dd0e7;
    push32(0x0020b0e4);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1dd0e7: // 0160:1dd0e7
    ebx = 0;
    edx = 0;
    if ((int32_t)memoryAGet32(ss, ebp + -44) < (int32_t)0x00000000)
        goto loc_1dd1cd;
    edi = memoryAGet32(ss, ebp + 20);
loc_1dd0f8: // 0160:1dd0f8
    eax = memoryAGet32(ds, edx + ebp + -44);
    memoryASet32(ss, ebp + -4, eax);
    if (edi)
        goto loc_1dd11a;
    push32(0x0020b0f6);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1dd11a: // 0160:1dd11a
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, 0x30d944, eax);
    eax += 0x00000101;
    memoryASet32(ds, 0x30d948, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000100;
    memoryASet32(ds, 0x30d94c, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000102;
    memoryASet32(ds, 0x30d950, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000103;
    memoryASet32(ds, 0x30d954, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000104;
    memoryASet32(ds, 0x30d958, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000105;
    memoryASet32(ds, 0x30d95c, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000006;
    memoryASet32(ds, 0x30d960, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000107;
    memoryASet32(ds, 0x30d964, eax);
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, 0x30d968, eax);
    eax += 0x00000008;
    memoryASet32(ds, 0x30d96c, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000009;
    memoryASet32(ds, 0x30d970, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x0000000b;
    memoryASet32(ds, 0x30d974, eax);
    eax = memoryAGet32(ds, 0x30d964);
    memoryASet32(ds, 0x30d978, eax);
    sub_1dcea0();
    if (eax)
        goto loc_1dd1cd;
    edx += 0x00000004;
    ebx++;
    if ((int32_t)memoryAGet32(ds, edx + ebp + -44) >= (int32_t)0x00000000)
        goto loc_1dd0f8;
loc_1dd1cd: // 0160:1dd1cd
    if ((int32_t)memoryAGet32(ss, ebp + ebx * 4 - 0x2c) >= (int32_t)0x00000000)
        goto loc_1dd1eb;
    if (memoryAGet32(ss, ebp + 20) != 0x00000000)
        goto loc_1dd1e7;
    push32(0x0020b0f8);
    sub_1e34e6();
    esp += 0x00000004;
loc_1dd1e7: // 0160:1dd1e7
    eax = 0;
    goto loc_1dd20f;
loc_1dd1eb: // 0160:1dd1eb
    if (memoryAGet32(ss, ebp + 20) != 0x00000000)
        goto loc_1dd202;
    ebx = memoryAGet32(ss, ebp + -4);
    push32(ebx);
    push32(0x0020b101);
    sub_1e34e6();
    esp += 0x00000008;
loc_1dd202: // 0160:1dd202
    eax = memoryAGet32(ss, ebp + -4);
    edx = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
loc_1dd20f: // 0160:1dd20f
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 8;
}
void sub_1dd220() // 0160:1dd220 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    edx = 0;
    memoryASet32(ds, 0x30d980, edx);
    memoryASet32(ds, 0x30d984, edx);
    ebx = memoryAGet32(ds, 0x30d954);
    ecx = memoryAGet32(ds, 0x30d958);
    esi = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    sub_1dccc0();
    edx = 0;
    eax = 0x00000001;
    sub_1dccc0();
    push32(flagAsReg32());
    flags.interrupts = 0;
    al = 0x4c;
    edx = ebx;
    out8(dx, al);
    al = 0;
    edx = esi;
    out8(dx, al);
    edx ^= esi;
    eax = eax;
loc_1dd270: // 0160:1dd270
    sub_1dcca0();
    edx++;
    if ((int32_t)edx < (int32_t)0x0000000a)
        goto loc_1dd270;
    al = 0x4c;
    edx = ebx;
    out8(dx, al);
    al = 0x01;
    edx = esi;
    out8(dx, al);
    edx ^= esi;
    eax = eax;
    edx = edx;
loc_1dd290: // 0160:1dd290
    sub_1dcca0();
    edx++;
    if ((int32_t)edx < (int32_t)0x0000000a)
        goto loc_1dd290;
    edx = memoryAGet32(ds, 0x30d94c);
    al = 0x03;
    out8(dx, al);
    edx = 0;
    eax = eax;
    edx = edx;
loc_1dd2b0: // 0160:1dd2b0
    sub_1dcca0();
    edx++;
    if ((int32_t)edx < (int32_t)0x0000000a)
        goto loc_1dd2b0;
    edx = memoryAGet32(ds, 0x30d94c);
    al = 0;
    out8(dx, al);
    al = 0x41;
    edx = ebx;
    out8(dx, al);
    al = 0;
    edx = esi;
    out8(dx, al);
    al = 0x45;
    edx = ebx;
    out8(dx, al);
    al = 0;
    edx = esi;
    out8(dx, al);
    al = 0x49;
    edx = ebx;
    out8(dx, al);
    al = 0;
    edx = esi;
    out8(dx, al);
    al = 0x0e;
    edx = ebx;
    out8(dx, al);
    al = memoryAGet(ds, 0x30d8fc);
    al--;
    al |= 0xc0;
    edx = esi;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d960);
    eax = 0;
    al = in8(dx);
    al = 0x41;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    al = 0x49;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    al = 0x8f;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    edi = 0;
    memoryASet32(ss, ebp + -4, edi);
    if ((int32_t)memoryAGet32(ds, 0x30d8fc) <= (int32_t)0x00000000)
        goto loc_1dd3e8;
    goto loc_1dd386;
loc_1dd32e: // 0160:1dd32e
    al = 0x06;
    edx = ebx;
    out8(dx, al);
    al = 0x01;
    edx = esi;
    out8(dx, al);
    al = 0x07;
    edx = ebx;
    out8(dx, al);
    al = 0x10;
    edx = esi;
    out8(dx, al);
    al = 0x08;
    edx = ebx;
    out8(dx, al);
    al = 0xe0;
    edx = esi;
    out8(dx, al);
    al = 0x09;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x0a;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x0b;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x0c;
    edx = ebx;
    out8(dx, al);
    al = 0x07;
    edx = esi;
    out8(dx, al);
    edx = memoryAGet32(ss, ebp + -4);
    edx++;
    memoryASet32(ss, ebp + -4, edx);
    if ((int32_t)edx >= (int32_t)memoryAGet32(ds, 0x30d8fc))
        goto loc_1dd3e8;
loc_1dd386: // 0160:1dd386
    edx = memoryAGet32(ds, 0x30d950);
    al = memoryAGet(ss, ebp + -4);
    out8(dx, al);
    al = 0;
    edx = ebx;
    out8(dx, al);
    al = 0x03;
    edx = esi;
    out8(dx, al);
    al = 0x0d;
    edx = ebx;
    out8(dx, al);
    al = 0x03;
    edx = esi;
    out8(dx, al);
    sub_1dcca0();
    al = 0x01;
    edx = ebx;
    out8(dx, al);
    eax = 0x00000400;
    edx = ecx;
    out16(dx, ax);
    al = 0x02;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x03;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x04;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    al = 0x05;
    edx = ebx;
    out8(dx, al);
    eax = 0;
    edx = ecx;
    out16(dx, ax);
    goto loc_1dd32e;
loc_1dd3e8: // 0160:1dd3e8
    edx = memoryAGet32(ds, 0x30d960);
    eax = 0;
    al = in8(dx);
    al = 0x41;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    al = 0x49;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    al = 0x8f;
    edx = ebx;
    out8(dx, al);
    edx = esi;
    eax = 0;
    al = in8(dx);
    al = 0x4c;
    edx = ebx;
    out8(dx, al);
    al = 0x07;
    edx = esi;
    out8(dx, al);
    flagsFromReg32(pop32());
    eax = 0x00000001;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dd430() // 0160:1dd430 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    ebx = edx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<3) & 0x80000000);
    edx <<= 4;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x04);
    ebx = eax + 8;
    if ((int32_t)ebx >= 0)
        goto loc_1dd44c;
    ebx = 0;
loc_1dd44c: // 0160:1dd44c
    if ((int32_t)ebx <= (int32_t)0x0000000f)
        goto loc_1dd456;
    ebx = 0x0000000f;
loc_1dd456: // 0160:1dd456
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d950);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0c;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    flagsFromReg32(pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dd480() // 0160:1dd480 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = eax;
    eax = memoryAGet32(ds, 0x30d8fc);
    ebx = memoryAGet32(ds, eax * 4 + 0x2094d4);
    edx <<= 9;
    eax = ebx;
    eax >>= 1;
    eax += edx;
    edx = 0;
    div32(ebx);
    ebx = eax + eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d950);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x01;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d958);
    eax = ebx;
    out16(dx, ax);
    flagsFromReg32(pop32());
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dd4d0() // 0160:1dd4d0 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) & 0xfd);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd4f0() // 0160:1dd4f0 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) | 0x02);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd510() // 0160:1dd510 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) & 0xfe);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd530() // 0160:1dd530 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) | 0x01);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd550() // 0160:1dd550 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) | 0x04);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd570() // 0160:1dd570 +long
{
    esp -= 4;
    push32(edx);
    memoryASet(ds, 0x30d97c, memoryAGet(ds, 0x30d97c) & 0xfb);
    eax = memoryAGet32(ds, 0x30d97c);
    edx = memoryAGet32(ds, 0x30d968);
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1dd590() // 0160:1dd590 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    esi = eax;
    edi = edx;
    edx = ebx;
    memoryASet32(ss, ebp + -8, ecx);
    ch = 0;
    cl = 0;
    push32(flagAsReg32());
    flags.interrupts = 0;
    eax = ebx * 4;
    eax += ebx;
    al = memoryAGet(ds, eax + 2135228);
    memoryASet(ss, ebp + -4, al);
    eax = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -12, eax);
    eax = eax * 4;
    eax += memoryAGet32(ss, ebp + -12);
    al = memoryAGet(ds, eax + 2135228);
    al <<= 3;
    if (!esi)
        goto loc_1dd5df;
    ebx = esi * 0x00000054;
    ch = memoryAGet(ds, ebx + 2134528);
loc_1dd5df: // 0160:1dd5df
    if (!edi)
        goto loc_1dd5ec;
    ebx = edi * 0x00000054;
    cl = memoryAGet(ds, ebx + 2134528);
loc_1dd5ec: // 0160:1dd5ec
    cl <<= 3;
    bl = 0;
    ah = memoryAGet(ds, 0x30d97c);
    bh = memoryAGet(ss, ebp + -4);
    if (edx != memoryAGet32(ss, ebp + -8))
        goto loc_1dd608;
    if (!edx)
        goto loc_1dd608;
    bh |= 0x40;
    goto loc_1dd60a;
loc_1dd608: // 0160:1dd608
    bh |= al;
loc_1dd60a: // 0160:1dd60a
    bl |= ch;
    if (esi != edi)
        goto loc_1dd619;
    if (!edi)
        goto loc_1dd619;
    bl |= 0x40;
    goto loc_1dd61b;
loc_1dd619: // 0160:1dd619
    bl |= cl;
loc_1dd61b: // 0160:1dd61b
    edx = memoryAGet32(ds, 0x30d944);
    edx += 0x0000000f;
    al = 0x05;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d968);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d974);
    al ^= ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d944);
    edx += 0x0000000f;
    al = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d968);
    al = ah;
    out8(dx, al);
    al = bl;
    al |= 0x80;
    edx = memoryAGet32(ds, 0x30d974);
    out8(dx, al);
    cl = ah;
    cl |= 0x40;
    edx = memoryAGet32(ds, 0x30d968);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d974);
    al = bh;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d968);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d974);
    al = bl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d968);
    al = cl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d974);
    al = bh;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d950);
    al ^= bh;
    out8(dx, al);
    ah |= 0x09;
    edx = memoryAGet32(ds, 0x30d968);
    al = ah;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d950);
    al ^= ah;
    out8(dx, al);
    al = ah;
    eax &= 0x000000ff;
    memoryASet32(ds, 0x30d97c, eax);
    flagsFromReg32(pop32());
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1dd6d0() // 0160:1dd6d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    memoryASet32(ds, 0x30d97c, 0x0000000b);
    sub_1dd530();
    sub_1dd570();
    sub_1dd4f0();
    sub_1dd220();
    if (!eax)
        goto loc_1dd73b;
    ecx = memoryAGet32(ds, 0x30d90c);
    ebx = memoryAGet32(ds, 0x30d908);
    edx = memoryAGet32(ds, 0x30d904);
    eax = memoryAGet32(ds, 0x30d900);
    sub_1dd590();
    edx = memoryAGet32(ds, 0x30d90c);
    eax = memoryAGet32(ds, 0x30d908);
    sub_1de780();
    edx = memoryAGet32(ds, 0x30d90c);
    eax = memoryAGet32(ds, 0x30d908);
    sub_1de210();
    sub_1dd4d0();
    eax = 0x00000001;
loc_1dd73b: // 0160:1dd73b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dd740() // 0160:1dd740 +long
{
    esp -= 4;
    push32(edx);
    sub_1dd4f0();
    sub_1dd530();
    sub_1dd570();
    memoryASet32(ds, 0x30d8fc, 0x0000000e);
    sub_1dd220();
    edx = memoryAGet32(ds, 0x30d90c);
    eax = memoryAGet32(ds, 0x30d908);
    sub_1de330();
    edx = memoryAGet32(ds, 0x30d90c);
    eax = memoryAGet32(ds, 0x30d908);
    sub_1de1c0();
    edx = pop32();
    esp += 4;
}
void sub_1dd790() // 0160:1dd790 +long +stackDrop12
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esi = eax;
    edi = edx;
    if ((int32_t)eax < (int32_t)0x00000007)
        goto loc_1dd7a3;
    if ((int32_t)eax <= (int32_t)0x00000010)
        goto loc_1dd7aa;
loc_1dd7a3: // 0160:1dd7a3
    eax = 0;
    goto loc_1dd8d6;
loc_1dd7aa: // 0160:1dd7aa
    eax = 0;
    eax = eax;
loc_1dd7b0: // 0160:1dd7b0
    edx = memoryAGet32(ds, eax + 2135384);
    memoryASet32(ds, eax + 3201612, edx);
    eax += 0x00000004;
    if (eax != 0x00000800)
        goto loc_1dd7b0;
    esi += esi;
    memoryASet32(ds, 0x30d8fc, esi);
    memoryASet32(ds, 0x30d900, ecx);
    eax = memoryAGet32(ss, ebp + 16);
    memoryASet32(ds, 0x30d904, eax);
    eax = memoryAGet32(ss, ebp + 20);
    memoryASet32(ds, 0x30d908, eax);
    eax = memoryAGet32(ss, ebp + 24);
    memoryASet32(ds, 0x30d90c, eax);
    memoryASet32(ds, 0x30d944, ebx);
    eax = ebx + 257;
    memoryASet32(ds, 0x30d948, eax);
    eax = ebx + 256;
    memoryASet32(ds, 0x30d94c, eax);
    eax = ebx + 258;
    memoryASet32(ds, 0x30d950, eax);
    eax = ebx + 259;
    memoryASet32(ds, 0x30d954, eax);
    eax = ebx + 260;
    memoryASet32(ds, 0x30d958, eax);
    eax = ebx + 261;
    memoryASet32(ds, 0x30d95c, eax);
    eax = ebx + 6;
    memoryASet32(ds, 0x30d960, eax);
    eax = ebx + 263;
    memoryASet32(ds, 0x30d964, eax);
    memoryASet32(ds, 0x30d968, ebx);
    eax = ebx + 8;
    memoryASet32(ds, 0x30d96c, eax);
    eax = ebx + 9;
    memoryASet32(ds, 0x30d970, eax);
    ebx += 0x0000000b;
    memoryASet32(ds, 0x30d974, ebx);
    eax = memoryAGet32(ds, 0x30d964);
    memoryASet32(ds, 0x30d978, eax);
    edx = 0;
    memoryASet32(ds, 0x30d988, edx);
    memoryASet32(ds, 0x30d920, edx);
    memoryASet32(ds, 0x30d924, edx);
    memoryASet32(ds, 0x30d928, edx);
    memoryASet32(ds, 0x30d92c, edx);
    memoryASet32(ds, 0x30d930, edx);
    memoryASet32(ds, 0x30d934, edx);
    memoryASet32(ds, 0x30d938, edx);
    memoryASet32(ds, 0x30d93c, edx);
    memoryASet32(ds, 0x30d940, edx);
    sub_1dcaf0();
    sub_1dcea0();
    if (!eax)
        goto loc_1dd8d6;
    sub_1dd6d0();
    if (!eax)
        goto loc_1dd8d6;
    eax = edi;
    sub_1dddf0();
    sub_1dcad0();
    eax = 0x00000001;
loc_1dd8d6: // 0160:1dd8d6
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 12;
}
void sub_1dd8e0() // 0160:1dd8e0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    ebx = memoryAGet32(ds, 0x30d950);
    al = dl;
    edx = ebx;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x8d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    al = in8(dx);
    bl = al;
    bl &= 0xfb;
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x80;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    al = in8(dx);
    bl = al;
    bl &= 0xdc;
    bl |= 0x03;
    edx = memoryAGet32(ds, 0x30d954);
    al = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dd970() // 0160:1dd970 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    if ((int32_t)memoryAGet32(ds, 0x30d8fc) <= (int32_t)0x00000000)
        goto loc_1dd98c;
loc_1dd97c: // 0160:1dd97c
    eax = edx;
    sub_1dd8e0();
    edx++;
    if ((int32_t)edx < (int32_t)memoryAGet32(ds, 0x30d8fc))
        goto loc_1dd97c;
loc_1dd98c: // 0160:1dd98c
    sub_1dd740();
    edx = pop32();
    esp += 4;
}
void sub_1dd9a0() // 0160:1dd9a0 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    memoryASet32(ss, ebp + -8, eax);
    eax = ecx;
    ch = memoryAGet(ss, ebp + 16);
    esi = memoryAGet32(ss, ebp + -8);
    memoryASet32(ss, ebp + -12, esi);
    edi = edx;
    edx = ebx;
    esi = eax;
    cl = ch;
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1dd9c9;
    edx = eax;
    esi = ebx;
    cl |= 0x40;
loc_1dd9c9: // 0160:1dd9c9
    al = cl;
    al &= 0x04;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1dda0d;
    eax = edi;
    eax = sar32(eax, 0x00000001);
    eax &= 0x0001ffff;
    edi &= 0x000c0000;
    eax |= edi;
    memoryASet32(ss, ebp + -4, eax);
    edi = edx;
    edi = sar32(edi, 0x00000001);
    edi &= 0x0001ffff;
    edx &= 0x000c0000;
    edi |= edx;
    eax = esi;
    eax = sar32(eax, 0x00000001);
    eax &= 0x0001ffff;
    esi &= 0x000c0000;
    esi |= eax;
    goto loc_1dda12;
loc_1dda0d: // 0160:1dda0d
    memoryASet32(ss, ebp + -4, edi);
    edi = edx;
loc_1dda12: // 0160:1dda12
    push32(flagAsReg32());
    flags.interrupts = 0;
    edx = memoryAGet32(ds, 0x30d950);
    al = memoryAGet(ss, ebp + -12);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x8d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    eax = 0;
    al = in8(dx);
    dl = cl;
    dl &= 0x01;
    edx &= 0x000000ff;
    if (!edx)
        goto loc_1dda44;
    bl = al;
    bl |= 0x04;
    goto loc_1dda49;
loc_1dda44: // 0160:1dda44
    bl = al;
    bl &= 0xfb;
loc_1dda49: // 0160:1dda49
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0d;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    sub_1dcca0();
    edx = memoryAGet32(ds, 0x30d95c);
    al = bl;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0b;
    out8(dx, al);
    eax = memoryAGet32(ss, ebp + -4);
    eax &= 0x0000007f;
    eax <<= 9;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x0a;
    out8(dx, al);
    eax = memoryAGet32(ss, ebp + -4);
    eax = sar32(eax, 0x07);
    eax &= 0x00001fff;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x02;
    out8(dx, al);
    eax = edi;
    eax = sar32(eax, 0x07);
    eax &= 0x00001fff;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x03;
    out8(dx, al);
    eax = edi;
    eax &= 0x0000007f;
    eax <<= 9;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x04;
    out8(dx, al);
    eax = esi;
    eax = sar32(eax, 0x07);
    eax &= 0x00001fff;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0x05;
    out8(dx, al);
    eax = esi;
    eax &= 0x0000007f;
    eax <<= 9;
    edx = memoryAGet32(ds, 0x30d958);
    out16(dx, ax);
    flagsFromReg32(pop32());
    push32(flagAsReg32());
    flags.interrupts = 0;
    ah = cl;
    ah &= 0xfc;
    edx = memoryAGet32(ds, 0x30d950);
    al = memoryAGet(ss, ebp + -8);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d954);
    al = 0;
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d95c);
    al = ah;
    out8(dx, al);
    flagsFromReg32(pop32());
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1ddb40() // 0160:1ddb40 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    ebx = edx;
    flags.zero = !(eax & eax);
    if ((int32_t)eax < 0)
        goto loc_1ddb9f;
    flags.zero = eax == memoryAGet32(ds, 0x30d8fc);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x30d8fc))
        goto loc_1ddb9f;
    if ((int32_t)ebx >= (int32_t)0x00000071)
        goto loc_1ddb5f;
    ebx = 0x00000071;
    goto loc_1ddb6c;
loc_1ddb5f: // 0160:1ddb5f
    if ((int32_t)ebx <= (int32_t)0x00000358)
        goto loc_1ddb6c;
    ebx = 0x00000358;
loc_1ddb6c: // 0160:1ddb6c
    esi = ecx * 4;
    esi -= ecx;
    esi = esi * 4;
    flags.zero = ebx == memoryAGet32(ds, esi + 3201424);
    if (flags.zero)
        goto loc_1ddb9f;
    eax = 0x0036a040;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    edx = eax;
    eax = ecx;
    sub_1dd480();
    memoryASet32(ds, esi + 3201424, ebx);
loc_1ddb9f: // 0160:1ddb9f
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("lastset.size>1");
    esp += 4;
}
void sub_1ddbb0() // 0160:1ddbb0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    ebx = edx;
    if ((int32_t)eax < 0)
        goto loc_1ddc10;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x30d8fc))
        goto loc_1ddc10;
    if ((int32_t)ebx >= 0)
        goto loc_1ddbcb;
    ebx = 0;
    goto loc_1ddbd5;
loc_1ddbcb: // 0160:1ddbcb
    if ((int32_t)ebx <= (int32_t)0x00000040)
        goto loc_1ddbd5;
    ebx = 0x00000040;
loc_1ddbd5: // 0160:1ddbd5
    esi = ecx * 4;
    esi -= ecx;
    esi = esi * 4;
    if (ebx == memoryAGet32(ds, esi + 3201420))
        goto loc_1ddc10;
    eax = ebx;
    eax <<= 9;
    eax -= ebx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<5) & 0x80000000);
    edx <<= 6;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x06);
    edx = eax;
    eax = ecx;
    sub_1dcc20();
    memoryASet32(ds, esi + 3201420, ebx);
loc_1ddc10: // 0160:1ddc10
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ddc20() // 0160:1ddc20 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    flags.zero = !(eax & eax);
    if ((int32_t)eax < 0)
        goto loc_1ddc59;
    eax = memoryAGet32(ds, 0x30d8fc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    flags.zero = ebx == eax;
    if ((int32_t)ebx >= (int32_t)eax)
        goto loc_1ddc59;
    edx = ebx;
    eax = edx * 4;
    eax -= edx;
    ebx += ebx;
    eax = memoryAGet32(ds, eax * 4 + 0x30d994);
    eax += ebx;
    edx = ecx;
    sub_1ddb40();
loc_1ddc59: // 0160:1ddc59
    ecx = pop32();
    ebx = pop32();
    stop("lastset.size>1");
    esp += 4;
}
void sub_1ddca0() // 0160:1ddca0 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000000c;
    memoryASet32(ss, ebp + -4, eax);
    edi = edx;
    memoryASet32(ss, ebp + -8, ecx);
    if ((int32_t)eax < 0)
        goto loc_1ddd94;
    eax = memoryAGet32(ds, 0x30d8fc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    ecx = memoryAGet32(ss, ebp + -4);
    if ((int32_t)eax <= (int32_t)ecx)
        goto loc_1ddd94;
    if ((int32_t)edi < 0)
        goto loc_1ddd94;
    if ((int32_t)edi > (int32_t)0x00000180)
        goto loc_1ddd94;
    esi = ecx * 4;
    esi -= ecx;
    eax = esi * 4;
    esi = ecx + ecx;
    edi--;
    ecx = memoryAGet32(ds, eax + 3201428);
    ecx += esi;
    memoryASet32(ss, ebp + -12, ecx);
    eax = memoryAGet32(ds, eax + 3201428);
    al ^= 0x01;
    esi += eax;
    if ((int32_t)edi < 0)
        goto loc_1ddd76;
    ecx = edi;
    ecx <<= 4;
    if ((int32_t)memoryAGet32(ds, ecx + 3195128) < (int32_t)0x00000000)
        goto loc_1ddd76;
    eax = esi;
    sub_1dd8e0();
    edx = memoryAGet32(ss, ebp + 16);
    eax = esi;
    sub_1ddb40();
    edx = memoryAGet32(ss, ebp + -8);
    eax = esi;
    sub_1ddbb0();
    eax = memoryAGet32(ds, ecx + 3195136);
    eax -= memoryAGet32(ds, ecx + 3195128);
    if ((int32_t)ebx <= (int32_t)eax)
        goto loc_1ddd4d;
    ebx = eax;
loc_1ddd4d: // 0160:1ddd4d
    edi <<= 4;
    eax = 0;
    al = memoryAGet(ds, edi + 3195140);
    push32(eax);
    ecx = memoryAGet32(ds, edi + 3195136);
    eax = memoryAGet32(ds, edi + 3195132);
    edx = memoryAGet32(ds, edi + 3195128);
    edx += ebx;
    ebx = eax;
    eax = esi;
    sub_1dd9a0();
loc_1ddd76: // 0160:1ddd76
    edx = 0;
    eax = memoryAGet32(ss, ebp + -12);
    sub_1ddbb0();
    eax = memoryAGet32(ss, ebp + -4);
    esi = eax * 4;
    esi -= eax;
    memoryASet(ds, esi * 4 + 0x30d994, memoryAGet(ds, esi * 4 + 0x30d994) ^ 0x01);
loc_1ddd94: // 0160:1ddd94
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1dddb0() // 0160:1dddb0 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esi = eax;
    eax = 0x0020b10b;
    sub_1e3508();
    if (!eax)
        goto loc_1ddddb;
    edi = memoryAGet32(ss, ebp + 16);
    push32(edi);
    push32(ecx);
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(0x0020b114);
    push32(eax);
    sub_1e3dbe();
    esp += 0x0000001c;
loc_1ddddb: // 0160:1ddddb
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1dddf0() // 0160:1dddf0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = eax;
    ebx = 0;
    ecx = 0x00000001;
    goto loc_1dde1f;
loc_1dde00: // 0160:1dde00
    edi = esi;
    edi = -edi;
    eax = ebx * 2;
    edx = edi;
    sub_1dd430();
    edx = edi;
    eax = ecx;
    sub_1dd430();
loc_1dde1b: // 0160:1dde1b
    ecx += 0x00000002;
    ebx++;
loc_1dde1f: // 0160:1dde1f
    eax = memoryAGet32(ds, 0x30d8fc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)ebx >= (int32_t)eax)
        goto loc_1dde62;
    eax = ebx;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    edi = 0x00000004;
    idiv32(edi);
    if (edx == 0x00000001)
        goto loc_1dde49;
    if (edx != 0x00000002)
        goto loc_1dde00;
loc_1dde49: // 0160:1dde49
    eax = ebx * 2;
    edx = esi;
    sub_1dd430();
    edx = esi;
    eax = ecx;
    sub_1dd430();
    goto loc_1dde1b;
loc_1dde62: // 0160:1dde62
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dde70() // 0160:1dde70 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<17) & 0x80000000);
    edx <<= 18;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x12);
    edx = pop32();
    esp += 4;
}
void sub_1dde80() // 0160:1dde80 +long
{
    esp -= 4;
    eax <<= 18;
    esp += 4;
}
void sub_1dde90() // 0160:1dde90 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x30e250);
    sub_1dde70();
    ebx = eax;
    eax = memoryAGet32(ds, 0x30e250);
    eax += edx;
    sub_1dde70();
    if (ebx == eax)
        goto loc_1ddec5;
    eax = memoryAGet32(ds, 0x30e250);
    sub_1dde70();
    eax++;
    sub_1dde80();
    memoryASet32(ds, 0x30e250, eax);
loc_1ddec5: // 0160:1ddec5
    eax = memoryAGet32(ds, 0x30e250);
    edx += 0x000000ff;
    dl = 0;
    ebx = eax + edx;
    memoryASet32(ds, 0x30e250, ebx);
    edx = ebx;
    if ((int32_t)edx <= (int32_t)memoryAGet32(ds, 0x30e254))
        goto loc_1ddeea;
    eax = 0xfffffffb;
loc_1ddeea: // 0160:1ddeea
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de180() // 0160:1de180 +long
{
    esp -= 4;
    push32(edx);
    push32(esi);
    esi = eax;
    edx = ecx;
    ecx = ebx;
    eax = ebx;
    ebx = 0;
    bx = dx;
    edx = ecx;
    eax = esi;
    sub_1e23a0();
    esi = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1de1a0() // 0160:1de1a0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    ebx = ebp + -4;
    edx = ebp + -8;
    sub_1e2350();
    edx = memoryAGet32(ss, ebp + -4);
    eax = memoryAGet32(ss, ebp + -8);
    esp = ebp;
    ebp = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de1c0() // 0160:1de1c0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    if (!eax)
        goto loc_1de1e3;
    cx = memoryAGet16(ds, 0x30d914);
    ebx = memoryAGet32(ds, 0x30d910);
    eax = memoryAGet32(ds, 0x30d908);
    sub_1de180();
loc_1de1e3: // 0160:1de1e3
    if (esi == edx)
        goto loc_1de205;
    if (!edx)
        goto loc_1de205;
    cx = memoryAGet16(ds, 0x30d91c);
    ebx = memoryAGet32(ds, 0x30d918);
    eax = memoryAGet32(ds, 0x30d90c);
    sub_1de180();
loc_1de205: // 0160:1de205
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de210() // 0160:1de210 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    ecx = eax;
    ebx = edx;
    if (!eax)
        goto loc_1de284;
    edx = memoryAGet32(ds, 0x30d908);
    eax = edx * 4;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, eax + 2135232);
    eax = 0;
    al = in8(dx);
    memoryASet32(ss, ebp + -8, eax);
    edx = memoryAGet32(ds, 0x30d908);
    eax = edx * 4;
    eax += edx;
    dl = memoryAGet(ss, ebp + -8);
    dh = memoryAGet(ds, eax + 2135229);
    dl &= dh;
    memoryASet(ss, ebp + -4, dl);
    edx = 0;
    dl = memoryAGet(ds, eax + 2135232);
    al = memoryAGet(ss, ebp + -4);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d908);
    eax = edx * 4;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, eax + 2135231);
    al = memoryAGet(ds, eax + 2135230);
    out8(dx, al);
loc_1de284: // 0160:1de284
    if (ebx == ecx)
        goto loc_1de2f0;
    if (!ebx)
        goto loc_1de2f0;
    edx = memoryAGet32(ds, 0x30d90c);
    eax = edx * 4;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, eax + 2135232);
    eax = 0;
    al = in8(dx);
    memoryASet32(ss, ebp + -8, eax);
    edx = memoryAGet32(ds, 0x30d90c);
    eax = edx * 4;
    eax += edx;
    dl = memoryAGet(ss, ebp + -8);
    dh = memoryAGet(ds, eax + 2135229);
    dl &= dh;
    memoryASet(ss, ebp + -4, dl);
    edx = 0;
    dl = memoryAGet(ds, eax + 2135232);
    al = memoryAGet(ss, ebp + -4);
    out8(dx, al);
    edx = memoryAGet32(ds, 0x30d90c);
    eax = edx * 4;
    eax += edx;
    edx = 0;
    dl = memoryAGet(ds, eax + 2135231);
    al = memoryAGet(ds, eax + 2135230);
    out8(dx, al);
loc_1de2f0: // 0160:1de2f0
    if ((int32_t)ebx > (int32_t)0x00000007)
        goto loc_1de2fa;
    if ((int32_t)ecx <= (int32_t)0x00000007)
        goto loc_1de322;
loc_1de2fa: // 0160:1de2fa
    edx = 0;
    dl = memoryAGet(ds, 0x2094ca);
    eax = 0;
    al = in8(dx);
    al &= memoryAGet(ds, 0x2094c7);
    edx = 0;
    dl = memoryAGet(ds, 0x2094ca);
    out8(dx, al);
    edx = 0;
    dl = memoryAGet(ds, 0x2094c9);
    al = memoryAGet(ds, 0x2094c8);
    out8(dx, al);
loc_1de322: // 0160:1de322
    esp = ebp;
    ebp = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de330() // 0160:1de330 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = edx;
    if (eax == 0x00000002)
        goto loc_1de366;
    if (!eax)
        goto loc_1de366;
    edx = eax;
    ecx = eax * 4;
    ecx += eax;
    edx ^= eax;
    dl = memoryAGet(ds, ecx + 2135232);
    eax = 0;
    al = in8(dx);
    ah = memoryAGet(ds, ecx + 2135229);
    ah = ~ah;
    al |= ah;
    edx = 0;
    dl = memoryAGet(ds, ecx + 2135232);
    out8(dx, al);
loc_1de366: // 0160:1de366
    if (ebx == 0x00000002)
        goto loc_1de396;
    if (!ebx)
        goto loc_1de396;
    eax = ebx * 4;
    ebx += eax;
    edx = 0;
    dl = memoryAGet(ds, ebx + 2135232);
    eax = 0;
    al = in8(dx);
    ah = memoryAGet(ds, ebx + 2135229);
    ah = ~ah;
    al |= ah;
    edx = 0;
    dl = memoryAGet(ds, ebx + 2135232);
    out8(dx, al);
loc_1de396: // 0160:1de396
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1de780() // 0160:1de780 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    edi = eax;
    esi = edx;
    memoryASet32(ss, ebp + -4, eax);
    if (!eax)
        goto loc_1de7c3;
    if ((int32_t)eax <= (int32_t)0x00000007)
        goto loc_1de79f;
    edi = eax + 104;
    goto loc_1de7a2;
loc_1de79f: // 0160:1de79f
    edi = eax + 8;
loc_1de7a2: // 0160:1de7a2
    eax = edi;
    sub_1de1a0();
    memoryASet16(ds, 0x30d914, dx);
    memoryASet32(ds, 0x30d910, eax);
    ecx = cs;
    ebx = 0x001dca88;
    eax = edi;
    sub_1de180();
loc_1de7c3: // 0160:1de7c3
    if (!esi)
        goto loc_1de7fa;
    if (esi == memoryAGet32(ss, ebp + -4))
        goto loc_1de7fa;
    if ((int32_t)esi <= (int32_t)0x00000007)
        goto loc_1de7d6;
    esi += 0x00000068;
    goto loc_1de7d9;
loc_1de7d6: // 0160:1de7d6
    esi += 0x00000008;
loc_1de7d9: // 0160:1de7d9
    eax = esi;
    sub_1de1a0();
    memoryASet16(ds, 0x30d91c, dx);
    memoryASet32(ds, 0x30d918, eax);
    ecx = cs;
    ebx = 0x001dcaa5;
    eax = esi;
    sub_1de180();
loc_1de7fa: // 0160:1de7fa
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dea00() // 0160:1dea00 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000018;
    memoryASet32(ss, ebp + -24, eax);
    memoryASet32(ss, ebp + -16, edx);
    memoryASet32(ss, ebp + -8, ebx);
    memoryASet32(ss, ebp + -20, ecx);
    ah = 0;
    memoryASet(ss, ebp + -4, ah);
    if (!ebx)
        goto loc_1deab8;
loc_1dea21: // 0160:1dea21
    eax = memoryAGet32(ss, ebp + -8);
    edi = memoryAGet32(ds, 0x2094b8);
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1dea32;
    esi = edi;
    goto loc_1dea34;
loc_1dea32: // 0160:1dea32
    esi = eax;
loc_1dea34: // 0160:1dea34
    memoryASet32(ss, ebp + -12, esi);
    if (memoryAGet32(ss, ebp + -20) == 0x00000000)
        goto loc_1dea7a;
    edx = esi + 1;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    edi = eax;
    eax = memoryAGet32(ds, 0x30d8f8);
    eax += edi;
    ecx = memoryAGet32(ss, ebp + -24);
    ebx = 0x00000001;
    edx = edi;
    sub_1e3b5d();
    if (eax != 0x00000001)
        goto loc_1deab8;
    eax = memoryAGet32(ds, 0x30d8f8);
    edx = eax + edi;
    ecx = ebp + -4;
    ebx = esi;
    sub_1db6c0();
    goto loc_1dea93;
loc_1dea7a: // 0160:1dea7a
    eax = memoryAGet32(ds, 0x30d8f8);
    ecx = memoryAGet32(ss, ebp + -24);
    ebx = 0x00000001;
    edx = esi;
    sub_1e3b5d();
    if (eax != 0x00000001)
        goto loc_1deab8;
loc_1dea93: // 0160:1dea93
    edx = memoryAGet32(ds, 0x30d8f8);
    ebx = memoryAGet32(ss, ebp + -12);
    eax = memoryAGet32(ss, ebp + -16);
    sub_1dcd00();
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ss, ebp + -16, memoryAGet32(ss, ebp + -16) + eax);
    ecx = memoryAGet32(ss, ebp + -8);
    ecx -= eax;
    memoryASet32(ss, ebp + -8, ecx);
    if (ecx)
        goto loc_1dea21;
loc_1deab8: // 0160:1deab8
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1deac0() // 0160:1deac0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = 0x00000080;
    edx -= eax;
    if ((int32_t)edx >= (int32_t)esi)
        goto loc_1dead0;
    esi = edx;
loc_1dead0: // 0160:1dead0
    ecx = 0;
    if ((int32_t)esi <= 0)
        goto loc_1deafd;
    ebx = eax;
loc_1dead8: // 0160:1dead8
    eax = ebx;
    sub_1dcd20();
    edx = (char)al;
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = 0;
    dl = al;
    eax = ebx;
    sub_1dccc0();
    ebx++;
    ecx++;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_1dead8;
loc_1deafd: // 0160:1deafd
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1deb10() // 0160:1deb10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    eax = edx;
    esi = 0x00000080;
    edx -= ebx;
    if ((int32_t)edx >= (int32_t)esi)
        goto loc_1deb24;
    esi = edx;
loc_1deb24: // 0160:1deb24
    ecx = 0;
    if ((int32_t)esi <= 0)
        goto loc_1deb52;
    ebx = eax + -1;
loc_1deb2d: // 0160:1deb2d
    eax = ebx;
    sub_1dcd20();
    edx = (char)al;
    edx = (int32_t)edx * (int32_t)ecx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    edx = 0;
    dl = al;
    eax = ebx;
    sub_1dccc0();
    ebx--;
    ecx++;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_1deb2d;
loc_1deb52: // 0160:1deb52
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1deb60() // 0160:1deb60 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000003c;
    esi = eax;
    memoryASet32(ss, ebp + -12, edx);
    if (memoryAGet32(ds, 0x30d8f8) != 0x00000000)
        goto loc_1debc0;
    eax = memoryAGet32(ds, 0x2094b8);
    edx = 0x00000100;
    sub_1e2510();
    memoryASet32(ds, 0x30d8f8, eax);
    if (eax)
        goto loc_1deb9a;
    eax = 0xfffffffc;
    goto loc_1ded67;
loc_1deb9a: // 0160:1deb9a
    eax = 0;
    ebx = 0xffffffff;
    eax = eax;
    edx = edx;
    eax = eax;
loc_1debb0: // 0160:1debb0
    memoryASet32(ds, eax + 3195128, ebx);
    eax += 0x00000010;
    if (eax != 0x00001800)
        goto loc_1debb0;
loc_1debc0: // 0160:1debc0
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000030;
    eax = ebp + -60;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1debe6;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1debe6: // 0160:1debe6
    ebx = 0x00000004;
    edx = 0x0020b123;
    eax = ebp + -60;
    sub_1e3d27();
    if (!eax)
        goto loc_1dec1f;
    ebx = 0x00000004;
    edx = 0x0020b128;
    eax = ebp + -60;
    sub_1e3d27();
    if (!eax)
        goto loc_1dec1f;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dec1f: // 0160:1dec1f
    eax = ebp + -52;
    sub_1e0940();
    edi = eax;
    if ((int32_t)eax < 0)
        goto loc_1ded67;
    edx = eax;
    edx <<= 4;
    if ((int32_t)memoryAGet32(ds, edx + 3195128) < (int32_t)0x00000000)
        goto loc_1dec49;
    eax = 0;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1dec49: // 0160:1dec49
    eax = memoryAGet32(ss, ebp + -20);
    memoryASet32(ss, ebp + -8, eax);
    eax = memoryAGet32(ss, ebp + -16);
    memoryASet32(ss, ebp + -4, eax);
    eax = memoryAGet32(ss, ebp + -20);
    if (eax != memoryAGet32(ss, ebp + -16))
        goto loc_1dec67;
    bl = 0;
    memoryASet(ds, edx + 3195140, bl);
    goto loc_1dec6e;
loc_1dec67: // 0160:1dec67
    memoryASet(ds, edx + 3195140, 0x08);
loc_1dec6e: // 0160:1dec6e
    eax = memoryAGet32(ss, ebp + -4);
    eax += 0x00000020;
    sub_1dde90();
    if ((int32_t)eax < 0)
        goto loc_1ded67;
    edi <<= 4;
    memoryASet32(ds, edi + 3195128, eax);
    edx = memoryAGet32(ss, ebp + -20);
    edx += eax;
    memoryASet32(ds, edi + 3195132, edx);
    edx = memoryAGet32(ss, ebp + -4);
    edx += eax;
    memoryASet32(ds, edi + 3195136, edx);
    ecx = memoryAGet32(ss, ebp + -12);
    ebx = memoryAGet32(ss, ebp + -4);
    edx = eax;
    eax = esi;
    sub_1dea00();
    al = memoryAGet(ds, edi + 3195140);
    al &= 0x08;
    eax &= 0x000000ff;
    if (!eax)
        goto loc_1ded0f;
    edx = memoryAGet32(ds, edi + 3195132);
    eax = memoryAGet32(ds, edi + 3195128);
    sub_1deac0();
    esi = memoryAGet32(ss, ebp + -4);
    esi -= memoryAGet32(ss, ebp + -8);
    ebx = 0;
    ecx = edi;
    eax = eax;
loc_1dece0: // 0160:1dece0
    eax = ebx;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    eax = memoryAGet32(ds, ecx + 3195132);
    eax += edx;
    sub_1dcd20();
    edx = 0;
    dl = al;
    eax = memoryAGet32(ds, ecx + 3195136);
    eax += ebx;
    sub_1dccc0();
    ebx++;
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_1ded62;
    goto loc_1dece0;
loc_1ded0f: // 0160:1ded0f
    edx = memoryAGet32(ds, edi + 3195136);
    eax = memoryAGet32(ds, edi + 3195128);
    sub_1deac0();
    edx = memoryAGet32(ds, edi + 3195136);
    eax = memoryAGet32(ds, edi + 3195128);
    sub_1deb10();
    ebx = 0;
    ecx = edi;
    eax = eax;
    edx = edx;
    ebx = ebx;
loc_1ded40: // 0160:1ded40
    eax = memoryAGet32(ds, ecx + 3195128);
    sub_1dcd20();
    edx = 0;
    dl = al;
    eax = memoryAGet32(ds, ecx + 3195136);
    eax += ebx;
    sub_1dccc0();
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000020)
        goto loc_1ded40;
loc_1ded62: // 0160:1ded62
    eax = 0x00000001;
loc_1ded67: // 0160:1ded67
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ded70() // 0160:1ded70 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = 0;
    edi = 0;
    goto loc_1ded8a;
loc_1ded7b: // 0160:1ded7b
    push32(edi);
    ecx = edi;
    ebx = edi;
    edx = edi;
    eax = esi;
    sub_1ddca0();
    esi++;
loc_1ded8a: // 0160:1ded8a
    eax = memoryAGet32(ds, 0x30d8fc);
    edx = eax;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_1ded7b;
    eax = 0;
    edx = 0xffffffff;
    eax = eax;
    edx = edx;
loc_1dedb0: // 0160:1dedb0
    memoryASet32(ds, eax + 3195128, edx);
    eax += 0x00000010;
    if (eax != 0x00001800)
        goto loc_1dedb0;
    sub_1dcad0();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dedd0() // 0160:1dedd0 +long
{
    esp -= 4;
    push32(ecx);
    ecx = eax;
    edx += ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    eax -= edx;
    eax = sar32(eax, 0x00000001);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_1dee02;
    goto loc_1dee2b;
loc_1dede7: // 0160:1dede7
    sub_1dd4d0();
    goto loc_1dee41;
loc_1dedf1: // 0160:1dedf1
    sub_1dd510();
    goto loc_1dee41;
loc_1dedfb: // 0160:1dedfb
    sub_1dd550();
    goto loc_1dee41;
loc_1dee02: // 0160:1dee02
    if (ecx < 0x00000003)
        goto loc_1dee10;
    if (ecx <= 0x00000003)
        goto loc_1dedf1;
    if (ecx == 0x00000004)
        goto loc_1dedfb;
    goto loc_1dee3d;
loc_1dee10: // 0160:1dee10
    if (!ecx)
        goto loc_1dede7;
    goto loc_1dee3d;
loc_1dee16: // 0160:1dee16
    sub_1dd4f0();
    goto loc_1dee41;
loc_1dee1d: // 0160:1dee1d
    sub_1dd530();
    goto loc_1dee41;
loc_1dee24: // 0160:1dee24
    sub_1dd570();
    goto loc_1dee41;
loc_1dee2b: // 0160:1dee2b
    if (ecx < 0x00000003)
        goto loc_1dee39;
    if (ecx <= 0x00000003)
        goto loc_1dee1d;
    if (ecx == 0x00000004)
        goto loc_1dee24;
    goto loc_1dee3d;
loc_1dee39: // 0160:1dee39
    if (!ecx)
        goto loc_1dee16;
loc_1dee3d: // 0160:1dee3d
    eax = 0;
    ecx = pop32();
    esp += 4;
    return;
loc_1dee41: // 0160:1dee41
    eax = 0x00000001;
    ecx = pop32();
    esp += 4;
}
void sub_1df1f0() // 0160:1df1f0 +long
{
    esp -= 4;
    memoryASet32(ds, 0x30e264, eax);
    esp += 4;
}
void sub_1df200() // 0160:1df200 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    if (memoryAGet32(ds, 0x30e268) != 0x00000000)
        goto loc_1df238;
    eax = memoryAGet32(ds, 0x209ea4);
    edx = 0x00000100;
    sub_1e2510();
    memoryASet32(ds, 0x30e268, eax);
    if (eax)
        goto loc_1df238;
    eax = 0xfffffffc;
    goto loc_1df2e2;
loc_1df238: // 0160:1df238
    eax = edi;
    edx = edi;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ecx = eax + 31;
    cl &= 0xe0;
    ebx = memoryAGet32(ds, 0x209ea4);
    if ((int32_t)ecx <= (int32_t)ebx)
        goto loc_1df253;
    ecx = ebx;
loc_1df253: // 0160:1df253
    eax = esi;
    sub_1dd8e0();
    eax = ecx * 2;
    eax += 0x00000020;
    sub_1dde90();
    memoryASet32(ss, ebp + -4, eax);
    memoryASet32(ds, 0x30e258, eax);
    memoryASet32(ds, 0x30e25c, ecx);
    memoryASet32(ds, 0x30e260, 0x00000001);
    edx = 0;
    memoryASet32(ds, 0x30e264, edx);
    memoryASet32(ds, 0x209ea8, esi);
    ebx = 0;
    goto loc_1df2a2;
loc_1df293: // 0160:1df293
    eax = memoryAGet32(ds, 0x30e258);
    eax += ebx;
    edx = 0;
    sub_1dccc0();
    ebx++;
loc_1df2a2: // 0160:1df2a2
    eax = memoryAGet32(ds, 0x30e25c);
    eax += eax;
    eax += 0x00000020;
    if ((int32_t)ebx < (int32_t)eax)
        goto loc_1df293;
    edx = edi;
    eax = esi;
    sub_1dd480();
    memoryASet32(ds, 0x30d928, 0x001deef0);
    eax = 0;
    sub_1dddf0();
    push32(0x00000021);
    eax = memoryAGet32(ss, ebp + -4);
    ecx += eax;
    ecx += 0x0000001f;
    ebx = eax + 31;
    edx = eax;
    eax = esi;
    sub_1dd9a0();
    eax = edi;
loc_1df2e2: // 0160:1df2e2
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1df310() // 0160:1df310 +long
{
    esp -= 4;
    push32(edx);
    memoryASet32(ds, eax, 0x00000258);
    memoryASet32(ds, eax + 8, 0x00209ed8);
    edx = memoryAGet32(ds, eax + 8);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 12, 0x00209edc);
    memoryASet32(ds, eax + 24, 0x00000000);
    edx = memoryAGet32(ds, eax + 24);
    memoryASet32(ds, eax + 20, edx);
    edx = pop32();
    esp += 4;
}
void sub_1df340() // 0160:1df340 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    edi = edx;
    edx = ebx;
    if ((int32_t)eax < 0)
        goto loc_1df3e4;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x30e26c))
        goto loc_1df3e4;
    if ((int32_t)edi < 0)
        goto loc_1df3e4;
    if ((int32_t)edi > (int32_t)0x00000180)
        goto loc_1df3e4;
    sub_1df3f0();
    edx = ecx;
    eax = esi;
    sub_1df430();
    eax = esi;
    eax = eax * 8;
    eax -= esi;
    eax = eax * 4;
    eax += 0x0030fa70;
    if (!edi)
        goto loc_1df3c9;
    edi <<= 4;
    if (memoryAGet32(ds, edi + 3203680) == 0x00000000)
        goto loc_1df3c9;
    esi = 0x0030e270;
    esi += edi;
    esi -= 0x00000010;
    edx = memoryAGet32(ds, esi);
    memoryASet32(ds, eax + 4, edx);
    edx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, eax + 8, edx);
    edx = memoryAGet32(ds, esi + 8);
    memoryASet32(ds, eax + 12, edx);
    edx = memoryAGet32(ds, esi + 12);
    memoryASet32(ds, eax + 16, edx);
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1df3c9: // 0160:1df3c9
    memoryASet32(ds, eax + 8, 0x00209ed8);
    edx = memoryAGet32(ds, eax + 8);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 12, 0x00209edc);
    memoryASet32(ds, eax + 16, 0x00010000);
loc_1df3e4: // 0160:1df3e4
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1df3f0() // 0160:1df3f0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    if ((int32_t)eax < 0)
        goto loc_1df42b;
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x30e26c))
        goto loc_1df42b;
    if ((int32_t)edx >= 0)
        goto loc_1df406;
    edx = 0;
    goto loc_1df410;
loc_1df406: // 0160:1df406
    if ((int32_t)edx <= (int32_t)0x00000040)
        goto loc_1df410;
    edx = 0x00000040;
loc_1df410: // 0160:1df410
    ebx = eax;
    eax = eax * 8;
    eax -= ebx;
    memoryASet32(ds, eax * 4 + 0x30fa84, edx);
    ecx = 0;
    memoryASet32(ds, eax * 4 + 0x30fa88, ecx);
loc_1df42b: // 0160:1df42b
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df430() // 0160:1df430 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    flags.zero = !(eax & eax);
    if ((int32_t)eax < 0)
        goto loc_1df462;
    flags.zero = eax == memoryAGet32(ds, 0x30e26c);
    if ((int32_t)eax >= (int32_t)memoryAGet32(ds, 0x30e26c))
        goto loc_1df462;
    eax = 0x0036a040;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    eax = ebx;
    eax = eax * 8;
    flags.zero = eax == ebx;
    eax -= ebx;
    memoryASet32(ds, eax * 4 + 0x30fa70, edx);
loc_1df462: // 0160:1df462
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df5b0() // 0160:1df5b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    memoryASet32(ds, 0x30e26c, eax);
    edx = 0;
    memoryASet32(ds, 0x30fae0, edx);
    ebx = 0;
    if ((int32_t)eax <= 0)
        goto loc_1df5dd;
    edx = 0x0030fa70;
loc_1df5ca: // 0160:1df5ca
    eax = edx;
    sub_1df310();
    edx += 0x0000001c;
    ebx++;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x30e26c))
        goto loc_1df5ca;
loc_1df5dd: // 0160:1df5dd
    sub_1dc990();
    eax = 0x001df560;
    sub_1dc840();
    eax = 0x00000001;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df600() // 0160:1df600 +long
{
    esp -= 4;
    sub_1dc9c0();
    eax = eax;
    edx = edx;
    ebx = ebx;
    push32(edx);
    edx = 0x00000061;
    eax = 0;
    al = in8(dx);
    al &= 0xfe;
    out8(dx, al);
    edx = pop32();
    esp += 4;
}
void sub_1df620() // 0160:1df620 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000034;
    esi = eax;
    if (memoryAGet32(ds, 0x209ed4) == 0x00000000)
        goto loc_1df658;
    eax = 0;
    eax = eax;
    edx = edx;
loc_1df640: // 0160:1df640
    ebx = 0;
    memoryASet32(ds, eax + 3203696, ebx);
    eax += 0x00000010;
    if (eax != 0x00001800)
        goto loc_1df640;
    memoryASet32(ds, 0x209ed4, ebx);
loc_1df658: // 0160:1df658
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000034;
    eax = ebp + -52;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1df67b;
    eax = 0xfffffffd;
    goto loc_1df72a;
loc_1df67b: // 0160:1df67b
    ebx = 0x00000004;
    edx = 0x0020b184;
    eax = ebp + -52;
    sub_1e3d27();
    if (!eax)
        goto loc_1df69e;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1df69e: // 0160:1df69e
    eax = ebp + -44;
    sub_1e0940();
    if ((int32_t)eax < 0)
        goto loc_1df72a;
    ebx = eax;
    ebx <<= 4;
    if (memoryAGet32(ds, ebx + 3203696) != 0x00000000)
        goto loc_1df728;
    edx = memoryAGet32(ss, ebp + -8);
    edx = edx * 4;
    eax = 0x0020b189;
    sub_1df820();
    if (!eax)
        goto loc_1df72a;
    memoryASet32(ds, ebx + 3203696, eax);
    eax = memoryAGet32(ss, ebp + -4);
    eax = eax * 4;
    edx = memoryAGet32(ds, ebx + 3203696);
    eax += edx;
    memoryASet32(ds, ebx + 3203700, eax);
    edx = memoryAGet32(ss, ebp + -8);
    edx = edx * 4;
    eax = memoryAGet32(ds, ebx + 3203696);
    eax += edx;
    memoryASet32(ds, ebx + 3203704, eax);
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ds, ebx + 3203708, eax);
    eax = memoryAGet32(ds, ebx + 3203696);
    ecx = esi;
    ebx = memoryAGet32(ss, ebp + -8);
    edx = 0x00000004;
    sub_1e3b5d();
loc_1df728: // 0160:1df728
    eax = 0;
loc_1df72a: // 0160:1df72a
    esp = ebp;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df740() // 0160:1df740 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    ebx = 0;
    if ((int32_t)memoryAGet32(ds, 0x30e26c) <= (int32_t)0x00000000)
        goto loc_1df766;
    edx = 0x0030fa70;
loc_1df753: // 0160:1df753
    eax = edx;
    sub_1df310();
    edx += 0x0000001c;
    ebx++;
    if ((int32_t)ebx < (int32_t)memoryAGet32(ds, 0x30e26c))
        goto loc_1df753;
loc_1df766: // 0160:1df766
    eax = 0;
    eax = eax;
    edx = edx;
loc_1df770: // 0160:1df770
    esi = 0;
    memoryASet32(ds, eax + 3203696, esi);
    eax += 0x00000010;
    if (eax != 0x00001800)
        goto loc_1df770;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df790() // 0160:1df790 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    ebx = memoryAGet32(ds, 0x30faf0);
    if (!ebx)
        goto loc_1df7a5;
    eax = ebx;
    sub_1e3df8();
loc_1df7a5: // 0160:1df7a5
    memoryASet32(ds, 0x30faf8, edx);
    eax = edx;
    sub_1e3562();
    memoryASet32(ds, 0x30faf0, eax);
    memoryASet32(ds, 0x30faf4, eax);
    if (!eax)
        goto loc_1df7d4;
    edx = memoryAGet32(ds, 0x30faf8);
    sub_1e2460();
    if (!eax)
        goto loc_1df7d4;
    eax = 0x00000001;
loc_1df7d4: // 0160:1df7d4
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df820() // 0160:1df820 +long
{
    esp -= 4;
    push32(ebx);
    ebx = memoryAGet32(ds, 0x30faf4);
    edx += 0x00000003;
    dl &= 0xfc;
    eax = ebx + edx;
    memoryASet32(ds, 0x30faf4, eax);
    eax = memoryAGet32(ds, 0x30faf0);
    eax += memoryAGet32(ds, 0x30faf8);
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x30faf4))
        goto loc_1df851;
    if (memoryAGet32(ds, 0x30faf0) != 0x00000000)
        goto loc_1df855;
loc_1df851: // 0160:1df851
    eax = 0;
    ebx = pop32();
    esp += 4;
    return;
loc_1df855: // 0160:1df855
    eax = ebx;
    ebx = pop32();
    esp += 4;
}
void sub_1df860() // 0160:1df860 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x30faf0);
    memoryASet32(ds, 0x30faf4, eax);
    esp += 4;
}
void sub_1df870() // 0160:1df870 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    if (memoryAGet32(ds, 0x209f34) == 0x00000000)
        goto loc_1df8ae;
    eax = 0;
    ecx = 0xffffffff;
    eax = eax;
    edx = edx;
    eax = eax;
loc_1df890: // 0160:1df890
    ebx = 0;
    memoryASet32(ds, eax + 3223820, ebx);
    memoryASet32(ds, eax + 3223824, ecx);
    eax += 0x00000008;
    if (eax != 0x00000200)
        goto loc_1df890;
    memoryASet32(ds, 0x209f34, ebx);
loc_1df8ae: // 0160:1df8ae
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1df8c0() // 0160:1df8c0 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = eax;
    if (!eax)
        goto loc_1df989;
    eax--;
    if (edx & eax)
        goto loc_1df987;
    if (memoryAGet32(ds, 0x30fae8) & edx)
        goto loc_1df900;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df8e2: // 0160:1df8e2
    sub_1db8b0();
    goto loc_1df91d;
loc_1df8ec: // 0160:1df8ec
    sub_1db9d0();
    goto loc_1df91d;
loc_1df8f6: // 0160:1df8f6
    sub_1dcc70();
    goto loc_1df91d;
loc_1df900: // 0160:1df900
    sub_1e0380();
    eax = memoryAGet32(ds, 0x30faec);
    if (eax < 0x00000002)
        goto loc_1df91d;
    if (eax <= 0x00000002)
        goto loc_1df8f6;
    if (eax < 0x00000004)
        goto loc_1df91d;
    if (eax <= 0x00000004)
        goto loc_1df8e2;
    if (eax == 0x00000010)
        goto loc_1df8ec;
loc_1df91d: // 0160:1df91d
    ecx = 0;
    memoryASet32(ds, 0x30faec, ecx);
    if (edx < 0x00000004)
        goto loc_1df97a;
    if (edx <= 0x00000004)
        goto loc_1df933;
    if (edx == 0x00000010)
        goto loc_1df948;
    goto loc_1df972;
loc_1df933: // 0160:1df933
    eax = 0x001e31a0;
    sub_1db8a0();
    memoryASet32(ds, 0x30faec, edx);
    eax = 0;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df948: // 0160:1df948
    eax = 0x001e31a0;
    sub_1db9c0();
    memoryASet32(ds, 0x30faec, edx);
    eax = 0;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df95d: // 0160:1df95d
    eax = 0x001e31a0;
    sub_1dcb60();
    memoryASet32(ds, 0x30faec, edx);
    eax = 0;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df972: // 0160:1df972
    eax = 0xfffffff6;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df97a: // 0160:1df97a
    if (edx == 0x00000002)
        goto loc_1df95d;
    eax = 0xfffffff6;
    edx = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1df987: // 0160:1df987
    eax = 0;
loc_1df989: // 0160:1df989
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1df990() // 0160:1df990 +long +returnZero
{
    esp -= 4;
    push32(ebx);
    flags.zero = !(eax & eax);
    if ((int32_t)eax < 0)
        goto loc_1df9df;
    ebx = memoryAGet32(ds, eax * 8 + 0x31310c);
    eax = memoryAGet32(ds, eax * 8 + 0x313110);
    ebx &= memoryAGet32(ds, 0x30fae8);
    if (ebx < 0x00000002)
        goto loc_1df9da;
    if (ebx <= 0x00000002)
        goto loc_1df9cc;
    flags.zero = ebx == 0x00000004;
    if (ebx < 0x00000004)
        goto loc_1df9df;
    if (ebx <= 0x00000004)
        goto loc_1df9be;
    flags.zero = ebx == 0x00000010;
    if (flags.zero)
        goto loc_1df9c5;
    ebx = pop32();
    esp += 4;
    return;
loc_1df9be: // 0160:1df9be
    sub_1db8c0();
    ebx = pop32();
    esp += 4;
    return;
loc_1df9c5: // 0160:1df9c5
    sub_1db9e0();
    ebx = pop32();
    esp += 4;
    return;
loc_1df9cc: // 0160:1df9cc
    sub_1ddc20();
    ebx = pop32();
    esp += 4;
    return;
loc_1df9d3: // 0160:1df9d3
    sub_1df430();
    ebx = pop32();
    esp += 4;
    return;
loc_1df9da: // 0160:1df9da
    flags.zero = ebx == 0x00000001;
    if (flags.zero)
        goto loc_1df9d3;
loc_1df9df: // 0160:1df9df
    ebx = pop32();
    esp += 4;
}
void sub_1dfa50() // 0160:1dfa50 +long +stackDrop4
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esi = ebx;
    ebx = ecx;
    edi = memoryAGet32(ss, ebp + 16);
    if ((int32_t)eax < 0)
        goto loc_1dfabf;
    ecx = memoryAGet32(ds, eax * 8 + 0x31310c);
    eax = memoryAGet32(ds, eax * 8 + 0x313110);
    ecx &= memoryAGet32(ds, 0x30fae8);
    if (ecx < 0x00000002)
        goto loc_1dfaba;
    if (ecx <= 0x00000002)
        goto loc_1dfaa5;
    if (ecx < 0x00000004)
        goto loc_1dfabf;
    if (ecx <= 0x00000004)
        goto loc_1dfa8d;
    if (ecx == 0x00000010)
        goto loc_1dfa99;
    goto loc_1dfabf;
loc_1dfa8d: // 0160:1dfa8d
    push32(edi);
    ecx = ebx;
    ebx = esi;
    sub_1db920();
    goto loc_1dfabf;
loc_1dfa99: // 0160:1dfa99
    push32(edi);
    ecx = ebx;
    ebx = esi;
    sub_1dba40();
    goto loc_1dfabf;
loc_1dfaa5: // 0160:1dfaa5
    push32(edi);
    ecx = ebx;
    ebx = esi;
    sub_1ddca0();
    goto loc_1dfabf;
loc_1dfab1: // 0160:1dfab1
    ecx = edi;
    sub_1df340();
    goto loc_1dfabf;
loc_1dfaba: // 0160:1dfaba
    if (ecx == 0x00000001)
        goto loc_1dfab1;
loc_1dfabf: // 0160:1dfabf
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    esp += 4;
}
void sub_1dfb30() // 0160:1dfb30 +long
{
    esp -= 4;
    push32(esi);
    esi = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    push32(ecx);
    ecx = ebx;
    ebx = 0;
    eax = esi;
    sub_1dfa50();
    flagsFromReg32(pop32());
    esi = pop32();
    stop("stack_below", "0160:1dfb42");
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1dfb50() // 0160:1dfb50 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    esi = eax;
    edi = edx;
    eax = memoryAGet32(ds, 0x30fae8);
    eax = ~eax;
    esi &= eax;
    edx = 0;
    memoryASet32(ss, ebp + -4, edx);
    goto loc_1dfc50;
loc_1dfb71: // 0160:1dfb71
    edx = eax;
    edx = ~edx;
    esi &= edx;
    memoryASet32(ds, 0x30fae4, memoryAGet32(ds, 0x30fae4) | eax);
    goto loc_1dfc40;
loc_1dfb82: // 0160:1dfb82
    ecx = edi;
    ebx = 0x00209eec;
    edx = 0x00209ee8;
    eax = 0x00209ee4;
    sub_1e1d00();
    if (!eax)
        goto loc_1dfc40;
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    edx = eax;
    edx = ~edx;
    esi &= edx;
    memoryASet32(ds, 0x30fae4, memoryAGet32(ds, 0x30fae4) | eax);
    goto loc_1dfc40;
loc_1dfbbb: // 0160:1dfbbb
    if ((int32_t)memoryAGet32(ds, 0x209f14) > (int32_t)0x00000007)
        goto loc_1dfc40;
loc_1dfbc8: // 0160:1dfbc8
    push32(edi);
    push32(0x00209f18);
    ecx = 0x00209f14;
    ebx = 0x00209f10;
    edx = 0x00209f0c;
    eax = 0x00209f08;
    sub_1dd0b0();
    if (!eax)
        goto loc_1dfc40;
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    edx = eax;
    edx = ~edx;
    esi &= edx;
    memoryASet32(ds, 0x30fae4, memoryAGet32(ds, 0x30fae4) | eax);
    goto loc_1dfc40;
loc_1dfc07: // 0160:1dfc07
    if (eax < 0x00000004)
        goto loc_1dfc2f;
    if (eax <= 0x00000004)
        goto loc_1dfbbb;
    if (eax < 0x00000100)
        goto loc_1dfc24;
    if (eax <= 0x00000100)
        goto loc_1dfbbb;
    if (eax == 0x00000200)
        goto loc_1dfb82;
    goto loc_1dfc40;
loc_1dfc24: // 0160:1dfc24
    if (eax == 0x00000010)
        goto loc_1dfb82;
    goto loc_1dfc40;
loc_1dfc2f: // 0160:1dfc2f
    if (eax < 0x00000001)
        goto loc_1dfc40;
    if (eax <= 0x00000001)
        goto loc_1dfb71;
    if (eax == 0x00000002)
        goto loc_1dfbc8;
loc_1dfc40: // 0160:1dfc40
    ebx = memoryAGet32(ss, ebp + -4);
    ebx++;
    memoryASet32(ss, ebp + -4, ebx);
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_1dfc60;
    eax = eax;
loc_1dfc50: // 0160:1dfc50
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    if (esi & eax)
        goto loc_1dfc07;
    goto loc_1dfc40;
loc_1dfc60: // 0160:1dfc60
    eax = esi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1dfc80() // 0160:1dfc80 +long
{
    esp -= 4;
    if (eax > 0x00000004)
        goto loc_1dfcab;
    switch (eax)
    {
        case 0: goto loc_1dfc8d;
        case 1: goto loc_1dfc93;
        case 2: goto loc_1dfc99;
        case 3: goto loc_1dfc9f;
        case 4: goto loc_1dfca5;
        default:
            stop("ind 0160:1dfc85");
    }
loc_1dfc8d: // 0160:1dfc8d
    eax = 0x00001f40;
    esp += 4;
    return;
loc_1dfc93: // 0160:1dfc93
    eax = 0x00002ee0;
    esp += 4;
    return;
loc_1dfc99: // 0160:1dfc99
    eax = 0x00003e80;
    esp += 4;
    return;
loc_1dfc9f: // 0160:1dfc9f
    eax = 0x000055f0;
    esp += 4;
    return;
loc_1dfca5: // 0160:1dfca5
    eax = 0x0000abe0;
    esp += 4;
    return;
loc_1dfcab: // 0160:1dfcab
    eax = 0;
    esp += 4;
}
void sub_1dfcb0() // 0160:1dfcb0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    esi = eax;
    sub_1df870();
    eax = memoryAGet32(ds, 0x30fae8);
    eax = ~eax;
    esi &= eax;
    edx = 0;
    memoryASet32(ss, ebp + -4, edx);
    edi = 0;
    goto loc_1e0010;
loc_1dfcd7: // 0160:1dfcd7
    sub_1db9d0();
    if (memoryAGet16(ds, 0x30fae4) & 0x0210)
        goto loc_1dfd00;
    ecx = 0x00209ef0;
    ebx = 0x00209eec;
    edx = 0x00209ee8;
    eax = 0x00209ee4;
    sub_1e1c00();
loc_1dfd00: // 0160:1dfd00
    ecx = memoryAGet32(ds, 0x209eec);
    ebx = memoryAGet32(ds, 0x209ee8);
    edx = memoryAGet32(ds, 0x209ee4);
    eax = memoryAGet32(ds, 0x209ef4);
    sub_1dfc80();
    sub_1e1610();
    edx = eax;
    memoryASet32(ds, 0x209efc, eax);
    if (!eax)
        goto loc_1e0000;
    eax = memoryAGet32(ds, 0x209ee0);
    sub_1dba80();
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | eax);
    eax = ~eax;
    esi &= eax;
    goto loc_1e0000;
loc_1dfd53: // 0160:1dfd53
    if (memoryAGet16(ds, 0x30fae4) & 0x0210)
        goto loc_1dfd77;
    ecx = 0x00209ef0;
    ebx = 0x00209eec;
    edx = 0x00209ee8;
    eax = 0x00209ee4;
    sub_1e1c00();
loc_1dfd77: // 0160:1dfd77
    ecx = memoryAGet32(ds, 0x209eec);
    ebx = memoryAGet32(ds, 0x209ee8);
    edx = memoryAGet32(ds, 0x209ee4);
    eax = memoryAGet32(ds, 0x209ef8);
    sub_1e1610();
    memoryASet32(ds, 0x209efc, eax);
    if (!eax)
        goto loc_1e0000;
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | eax);
    eax = ~eax;
    esi &= eax;
    goto loc_1e0000;
loc_1dfdb9: // 0160:1dfdb9
    sub_1dcc70();
    if (memoryAGet16(ds, 0x30fae4) & 0x0106)
        goto loc_1dfde7;
    push32(0x00209f18);
    ecx = 0x00209f14;
    ebx = 0x00209f10;
    edx = 0x00209f0c;
    eax = 0x00209f08;
    sub_1dddb0();
loc_1dfde7: // 0160:1dfde7
    ebx = memoryAGet32(ds, 0x209f18);
    push32(ebx);
    ecx = memoryAGet32(ds, 0x209f14);
    push32(ecx);
    eax = memoryAGet32(ds, 0x209f10);
    push32(eax);
    ecx = memoryAGet32(ds, 0x209f0c);
    ebx = memoryAGet32(ds, 0x209f08);
    edx = memoryAGet32(ds, 0x209f04);
    eax = memoryAGet32(ds, 0x209f00);
    sub_1dd790();
    if (!eax)
        goto loc_1e0000;
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | eax);
    eax = ~eax;
    esi &= eax;
    goto loc_1e0000;
loc_1dfe38: // 0160:1dfe38
    if (memoryAGet16(ds, 0x30fae4) & 0x0106)
        goto loc_1dfe61;
    push32(0x00209f18);
    ecx = 0x00209f14;
    ebx = 0x00209f10;
    edx = 0x00209f0c;
    eax = 0x00209f08;
    sub_1dddb0();
loc_1dfe61: // 0160:1dfe61
    ebx = memoryAGet32(ds, 0x209f14);
    if ((int32_t)ebx > (int32_t)0x00000007)
        goto loc_1e0000;
    ecx = memoryAGet32(ds, 0x209f18);
    push32(ecx);
    push32(ebx);
    edx = memoryAGet32(ds, 0x209f10);
    push32(edx);
    ecx = memoryAGet32(ds, 0x209f0c);
    ebx = memoryAGet32(ds, 0x209f08);
    edx = memoryAGet32(ds, 0x209f04);
    eax = memoryAGet32(ds, 0x209f00);
    sub_1dd790();
    if (!eax)
        goto loc_1e0000;
    ebx = memoryAGet32(ds, 0x209f20);
    edx = memoryAGet32(ds, 0x209f1c);
    eax = edi;
    sub_1df200();
    memoryASet32(ds, 0x209f24, eax);
    if ((int32_t)eax < 0)
        goto loc_1e0000;
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | eax);
    eax = ~eax;
    esi &= eax;
    goto loc_1e0000;
loc_1dfedc: // 0160:1dfedc
    if (memoryAGet16(ds, 0x30fae4) & 0x0106)
        goto loc_1dff05;
    push32(0x00209f18);
    ecx = 0x00209f14;
    ebx = 0x00209f10;
    edx = 0x00209f0c;
    eax = 0x00209f08;
    sub_1dddb0();
loc_1dff05: // 0160:1dff05
    eax = memoryAGet32(ds, 0x209f14);
    if ((int32_t)eax > (int32_t)0x00000007)
        goto loc_1e0000;
    edx = memoryAGet32(ds, 0x209f18);
    push32(edx);
    push32(eax);
    ecx = memoryAGet32(ds, 0x209f10);
    push32(ecx);
    ecx = memoryAGet32(ds, 0x209f0c);
    ebx = memoryAGet32(ds, 0x209f08);
    edx = memoryAGet32(ds, 0x209f04);
    eax = memoryAGet32(ds, 0x209f00);
    sub_1dd790();
    if (!eax)
        goto loc_1e0000;
    ebx = memoryAGet32(ds, 0x209f20);
    eax = memoryAGet32(ds, 0x209f28);
    sub_1dfc80();
    edx = eax;
    eax = edi;
    sub_1df200();
    edx = eax;
    memoryASet32(ds, 0x209f24, eax);
    if ((int32_t)eax < 0)
        goto loc_1e0000;
    eax = memoryAGet32(ds, 0x209f2c);
    sub_1db960();
    edx = 0x00000040;
    eax = 0x00000100;
    sub_1e0d30();
    cl = memoryAGet(ss, ebp + -4);
    eax = 0x00000001;
    eax <<= cl;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | eax);
    eax = ~eax;
    esi &= eax;
    goto loc_1e0000;
loc_1dffa0: // 0160:1dffa0
    eax = memoryAGet32(ds, 0x209f30);
    sub_1df5b0();
    if (!eax)
        goto loc_1e0000;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) | edx);
    edx = ~edx;
    esi &= edx;
    goto loc_1e0000;
loc_1dffba: // 0160:1dffba
    if (edx < 0x00000004)
        goto loc_1dffec;
    if (edx <= 0x00000004)
        goto loc_1dfedc;
    if (edx < 0x00000100)
        goto loc_1dffe1;
    if (edx <= 0x00000100)
        goto loc_1dfe38;
    if (edx == 0x00000200)
        goto loc_1dfd53;
    goto loc_1e0000;
loc_1dffe1: // 0160:1dffe1
    if (edx == 0x00000010)
        goto loc_1dfcd7;
    goto loc_1e0000;
loc_1dffec: // 0160:1dffec
    if (edx < 0x00000001)
        goto loc_1e0000;
    if (edx <= 0x00000001)
        goto loc_1dffa0;
    if (edx == 0x00000002)
        goto loc_1dfdb9;
    eax = eax;
loc_1e0000: // 0160:1e0000
    ebx = memoryAGet32(ss, ebp + -4);
    ebx++;
    memoryASet32(ss, ebp + -4, ebx);
    if ((int32_t)ebx >= (int32_t)0x00000020)
        goto loc_1e0020;
    eax = eax;
loc_1e0010: // 0160:1e0010
    cl = memoryAGet(ss, ebp + -4);
    edx = 0x00000001;
    edx <<= cl;
    if (esi & edx)
        goto loc_1dffba;
    goto loc_1e0000;
loc_1e0020: // 0160:1e0020
    eax = esi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0030() // 0160:1e0030 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = 0;
    ebx = 0x00000001;
    goto loc_1e00d0;
loc_1e003f: // 0160:1e003f
    sub_1e1460();
    sub_1dbad0();
    cl = dl;
    eax = ebx;
    eax <<= cl;
    ecx = eax;
    ecx = ~ecx;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) & ecx);
    goto loc_1e00c0;
loc_1e005e: // 0160:1e005e
    sub_1dd970();
    sub_1db9b0();
    cl = dl;
    eax = ebx;
    eax <<= cl;
    ecx = eax;
    ecx = ~ecx;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) & ecx);
    goto loc_1e00c0;
loc_1e007a: // 0160:1e007a
    sub_1df600();
    ecx = ~ecx;
    memoryASet32(ds, 0x30fae8, memoryAGet32(ds, 0x30fae8) & ecx);
    goto loc_1e00c0;
loc_1e0089: // 0160:1e0089
    if (eax < 0x00000004)
        goto loc_1e00a9;
    if (eax <= 0x00000004)
        goto loc_1e005e;
    if (eax < 0x00000100)
        goto loc_1e00a2;
    if (eax <= 0x00000100)
        goto loc_1e005e;
    if (eax == 0x00000200)
        goto loc_1e003f;
    goto loc_1e00c0;
loc_1e00a2: // 0160:1e00a2
    if (eax == 0x00000010)
        goto loc_1e003f;
    goto loc_1e00c0;
loc_1e00a9: // 0160:1e00a9
    if (eax < 0x00000001)
        goto loc_1e00c0;
    if (eax <= 0x00000001)
        goto loc_1e007a;
    if (eax == 0x00000002)
        goto loc_1e005e;
    eax = eax;
    edx = edx;
    ebx = ebx;
loc_1e00c0: // 0160:1e00c0
    edx++;
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1e00e2;
    eax = eax;
    edx = edx;
loc_1e00d0: // 0160:1e00d0
    cl = dl;
    eax = ebx;
    eax <<= cl;
    ecx = eax;
    if (memoryAGet32(ds, 0x30fae8) & eax)
        goto loc_1e0089;
    goto loc_1e00c0;
loc_1e00e2: // 0160:1e00e2
    eax = memoryAGet32(ds, 0x30fae8);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e00f0() // 0160:1e00f0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    ecx = eax;
    sub_1e0380();
    edx = 0x0020b1ed;
    eax = ecx;
    sub_1e3fed();
    esi = eax;
    if (eax)
        goto loc_1e0122;
    eax = 0xfffffffe;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0122: // 0160:1e0122
    eax = esi;
    sub_1e4083();
    edi = eax;
    memoryASet32(ss, ebp + -4, eax);
    ecx = esi;
    ebx = 0x00000004;
    edx = 0x00000001;
    eax = 0x0020b1e8;
    sub_1e3b5d();
    memoryASet32(ss, ebp + -8, eax);
    if (eax == 0x00000004)
        goto loc_1e0172;
    eax = esi;
    sub_1e40b3();
    if (memoryAGet32(ss, ebp + -8) != 0x00000000)
        goto loc_1e0164;
    eax = 0;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0164: // 0160:1e0164
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0172: // 0160:1e0172
    ecx = esi;
    ebx = 0x00000001;
    edx = eax;
    eax = ebp + -8;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1e019d;
    eax = esi;
    sub_1e40b3();
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e019d: // 0160:1e019d
    ebx = 0;
    edx = edi;
    eax = esi;
    sub_1e4237();
    ebx = 0x00000004;
    edx = 0x0020b1f0;
    eax = 0x0020b1e8;
    sub_1e3d27();
    if (eax)
        goto loc_1e01e3;
    eax = esi;
    sub_1e3220();
    edi = eax;
    if ((int32_t)eax >= 0)
        goto loc_1e0302;
    eax = esi;
    sub_1e40b3();
    eax = edi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e01e3: // 0160:1e01e3
    ebx = 0x00000004;
    edx = 0x0020b1f5;
    eax = 0x0020b1e8;
    sub_1e3d27();
    if (!eax)
        goto loc_1e0217;
    ebx = 0x00000004;
    edx = 0x0020b1fa;
    eax = 0x0020b1e8;
    sub_1e3d27();
    if (eax)
        goto loc_1e02a5;
loc_1e0217: // 0160:1e0217
    ebx = 0x00000004;
    edx = 0x0020b1ff;
    eax = 0x0020b1e8;
    sub_1e3d27();
    al = !!(eax);
    edi = al;
    ecx = edi;
    if (!(memoryAGet(ds, 0x30fae8) & 0x14))
        goto loc_1e026b;
    ebx = 0;
    edx = memoryAGet32(ss, ebp + -4);
    eax = esi;
    sub_1e4237();
    edx = edi;
    eax = esi;
    sub_1dc430();
    edi = eax;
    if ((int32_t)eax >= 0)
        goto loc_1e026b;
    eax = esi;
    sub_1e40b3();
    eax = edi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e026b: // 0160:1e026b
    if (!(memoryAGet(ds, 0x30fae8) & 0x02))
        goto loc_1e0302;
    ebx = 0;
    edx = memoryAGet32(ss, ebp + -4);
    eax = esi;
    sub_1e4237();
    edx = ecx;
    eax = esi;
    sub_1deb60();
    edi = eax;
    if ((int32_t)eax >= 0)
        goto loc_1e0302;
    eax = esi;
    sub_1e40b3();
    eax = edi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e02a5: // 0160:1e02a5
    ebx = 0x00000004;
    edx = 0x0020b204;
    eax = 0x0020b1e8;
    sub_1e3d27();
    if (eax)
        goto loc_1e02f0;
    if (!(memoryAGet(ds, 0x30fae8) & 0x01))
        goto loc_1e0302;
    ebx = 0;
    edx = edi;
    eax = esi;
    sub_1e4237();
    eax = esi;
    sub_1df620();
    edi = eax;
    if ((int32_t)eax >= 0)
        goto loc_1e0302;
    eax = esi;
    sub_1e40b3();
    eax = edi;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e02f0: // 0160:1e02f0
    push32(0x0020b1e8);
    push32(0x0020b209);
    sub_1e34e6();
    esp += 0x00000008;
loc_1e0302: // 0160:1e0302
    edx = memoryAGet32(ss, ebp + -4);
    edx += memoryAGet32(ss, ebp + -8);
    ebx = 0;
    eax = esi;
    sub_1e4237();
    goto loc_1e0122;
}
void sub_1e0350() // 0160:1e0350 +long
{
    esp -= 4;
    if ((int32_t)eax < 0)
        goto loc_1e0360;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x310100))
        goto loc_1e2720;
loc_1e0360: // 0160:1e0360
    eax = 0xfffffff7;
    esp += 4;
    return;
    // gap 9146 bytes
loc_1e2720: // 0160:1e2720
    push32(ebx);
    eax = memoryAGet32(ds, eax * 4 + 0x316404);
    ebx = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, ebx + 1408, eax);
    ebx = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, ebx + 1428, edx);
    edx = memoryAGet32(ds, 0x20a4dc);
    eax = memoryAGet32(ds, eax + 1096);
    memoryASet32(ds, edx + 1416, eax);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, eax + 1412, 0x00000000);
    edx = 0;
    ebx = 0;
    goto loc_1e27f2;
loc_1e276a: // 0160:1e276a
    memoryASet(ds, ebx + eax, 0x00);
    memoryASet(ds, ebx + eax + 1, 0x00);
    memoryASet(ds, ebx + eax + 2, 0x00);
    memoryASet(ds, ebx + eax + 3, 0x00);
    memoryASet(ds, ebx + eax + 4, 0x00);
    memoryASet(ds, ebx + eax + 5, 0x00);
    memoryASet(ds, ebx + eax + 6, 0x00);
    memoryASet(ds, ebx + eax + 7, 0x00);
    memoryASet(ds, ebx + eax + 10, 0x00);
    memoryASet16(ds, ebx + eax + 12, 0x0000);
    memoryASet16(ds, ebx + eax + 14, 0x0000);
    memoryASet32(ds, ebx + eax + 16, 0x00000000);
    memoryASet(ds, ebx + eax + 8, 0x00);
    memoryASet16(ds, ebx + eax + 20, 0x0000);
    memoryASet16(ds, ebx + eax + 22, 0x0000);
    memoryASet16(ds, ebx + eax + 24, 0x0000);
    memoryASet16(ds, ebx + eax + 26, 0x0000);
    memoryASet16(ds, ebx + eax + 28, 0x0000);
    memoryASet16(ds, ebx + eax + 30, 0x0000);
    memoryASet16(ds, ebx + eax + 32, 0x0040);
    memoryASet(ds, ebx + eax + 34, 0x00);
    memoryASet16(ds, ebx + eax + 36, 0x0000);
    ebx += 0x0000002c;
    edx++;
loc_1e27f2: // 0160:1e27f2
    eax = memoryAGet32(ds, 0x20a4dc);
    if ((int32_t)edx < (int32_t)memoryAGet32(ds, eax + 1416))
        goto loc_1e276a;
    eax = 0;
    eax = eax;
    edx = edx;
    ebx = ebx;
loc_1e2810: // 0160:1e2810
    edx = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, edx + eax + 40, 0xffffffff);
    eax += 0x0000002c;
    if (eax != 0x00000580)
        goto loc_1e2810;
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1420, 0x00);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1421, 0x06);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1422, 0x7d);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1423, 0x00);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1424, 0x00);
    eax = memoryAGet32(ds, 0x20a4dc);
    memoryASet(ds, eax + 1425, 0x00);
    ah = 0;
    memoryASet(ds, 0x31333c, ah);
    eax = 0;
    ebx = pop32();
    esp += 4;
}
void sub_1e0370()
{
  sub_1e33c0();
}

void sub_1e0380() // 0160:1e0380 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x30faec);
    if (eax)
        goto loc_1e3390;
    esp += 4;
    return;
    // gap 12290 bytes
loc_1e3390: // 0160:1e3390
    ah = 0;
    memoryASet(ds, 0x31333c, ah);
    memoryASet32(ds, 0x3164c4, 0x00000001);
    if (memoryAGet32(ds, 0x3164c4) == 0x00000000)
        goto loc_1e33b4;
loc_1e33ab: // 0160:1e33ab
    sync();
    if (memoryAGet32(ds, 0x3164c4) != 0x00000000)
        goto loc_1e33ab;
loc_1e33b4: // 0160:1e33b4
    esp += 4;
    return;
}
void sub_1e0390() // 0160:1e0390 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x30faec);
    if (eax)
        goto loc_1e3370;
    esp += 4;
    return;
    // gap 12242 bytes
loc_1e3370: // 0160:1e3370
    ah = 0;
    memoryASet(ds, 0x31333c, ah);
    memoryASet32(ds, 0x3164c4, 0x00000001);
    esp += 4;
}
void sub_1e03a0()
{
  sub_1e3320();
}

void sub_1e03c0() // 0160:1e03c0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000008;
    memoryASet32(ss, ebp + -8, eax);
    esi = edx;
    if ((int32_t)eax >= 0)
        goto loc_1e03d8;
    ebx = 0;
    memoryASet32(ss, ebp + -8, ebx);
loc_1e03d8: // 0160:1e03d8
    if ((int32_t)memoryAGet32(ss, ebp + -8) <= (int32_t)0x00000040)
        goto loc_1e03e5;
    memoryASet32(ss, ebp + -8, 0x00000040);
loc_1e03e5: // 0160:1e03e5
    sub_1e3340();
    memoryASet32(ss, ebp + -4, eax);
    ebx = memoryAGet32(ss, ebp + -8);
    ebx -= eax;
    ecx = 0;
    if ((int32_t)esi <= 0)
        goto loc_1e042c;
    edi = ebx * 8;
    edi -= ebx;
    edi = edi * 8;
    edi -= ebx;
    ebx = (int32_t)ebx * (int32_t)ecx;
loc_1e040d: // 0160:1e040d
    eax = ebx;
    edx = ebx;
    edx = sar32(edx, 0x1f);
    idiv32(esi);
    eax += memoryAGet32(ss, ebp + -4);
    sub_1e3320();
    sub_1e2690();
    ebx += edi;
    ecx += 0x00000037;
    if ((int32_t)ecx < (int32_t)esi)
        goto loc_1e040d;
loc_1e042c: // 0160:1e042c
    eax = memoryAGet32(ss, ebp + -8);
    sub_1e3320();
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0440() // 0160:1e0440 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0;
    goto loc_1e0490;
loc_1e0449: // 0160:1e0449
    sub_1e0f70();
    if (!eax)
        goto loc_1e0480;
    cl = dl;
    eax = 0x00000001;
    eax <<= cl;
loc_1e045b: // 0160:1e045b
    eax = ~eax;
    ebx &= eax;
    goto loc_1e0480;
loc_1e0461: // 0160:1e0461
    if (eax < 0x00000010)
        goto loc_1e0471;
    if (eax <= 0x00000010)
        goto loc_1e0449;
    if (eax == 0x00000200)
        goto loc_1e0449;
    goto loc_1e0480;
loc_1e0471: // 0160:1e0471
    if (eax == 0x00000002)
        goto loc_1e045b;
    eax = eax;
    edx = edx;
loc_1e0480: // 0160:1e0480
    edx++;
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1e049f;
    eax = eax;
    edx = edx;
loc_1e0490: // 0160:1e0490
    cl = dl;
    eax = 0x00000001;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e0461;
    goto loc_1e0480;
loc_1e049f: // 0160:1e049f
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0500() // 0160:1e0500 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    ebx = eax;
    ecx = 0;
    memoryASet32(ss, ebp + -4, ecx);
    esi = 0x00000001;
    cl = memoryAGet(ss, ebp + -4);
    eax = esi;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e0595;
    goto loc_1e05b0;
loc_1e0529: // 0160:1e0529
    if ((int32_t)edx < (int32_t)0x00000001)
        goto loc_1e05b0;
    if ((int32_t)edx > (int32_t)0x00000010)
        goto loc_1e05b0;
    memoryASet32(ds, 0x209f2c, edx);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e05b0;
loc_1e054a: // 0160:1e054a
    if ((int32_t)edx < (int32_t)0x00000001)
        goto loc_1e05b0;
    if ((int32_t)edx > (int32_t)eax)
        goto loc_1e05b0;
    memoryASet32(ds, 0x209ee0, edx);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e05b0;
loc_1e056a: // 0160:1e056a
    if ((int32_t)edx < (int32_t)0x00000007)
        goto loc_1e05b0;
    if ((int32_t)edx > (int32_t)0x00000010)
        goto loc_1e05b0;
    memoryASet32(ds, 0x209f00, edx);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e05b0;
loc_1e0580: // 0160:1e0580
    if ((int32_t)edx < (int32_t)eax)
        goto loc_1e05b0;
    if ((int32_t)edx > (int32_t)0x00000004)
        goto loc_1e05b0;
    memoryASet32(ds, 0x209f30, edx);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e05b0;
loc_1e0595: // 0160:1e0595
    if (eax < 0x00000002)
        goto loc_1e05aa;
    if (eax <= 0x00000002)
        goto loc_1e056a;
    if (eax < 0x00000004)
        goto loc_1e05b0;
    if (eax <= 0x00000004)
        goto loc_1e0529;
    if (eax == 0x00000010)
        goto loc_1e054a;
    goto loc_1e05b0;
loc_1e05aa: // 0160:1e05aa
    if (eax == 0x00000001)
        goto loc_1e0580;
loc_1e05b0: // 0160:1e05b0
    eax = memoryAGet32(ss, ebp + -4);
    eax++;
    memoryASet32(ss, ebp + -4, eax);
    if ((int32_t)eax >= (int32_t)0x00000020)
        goto loc_1e05c9;
    cl = memoryAGet(ss, ebp + -4);
    eax = esi;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e0595;
    goto loc_1e05b0;
loc_1e05c9: // 0160:1e05c9
    eax = ebx;
    esp = ebp;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e05e0() // 0160:1e05e0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ebx = eax;
    esi = edx;
    if ((int32_t)edx >= (int32_t)0x00000001)
        goto loc_1e05f2;
    esi = 0x00000001;
loc_1e05f2: // 0160:1e05f2
    if ((int32_t)esi <= (int32_t)0x000000c8)
        goto loc_1e05ff;
    esi = 0x000000c8;
loc_1e05ff: // 0160:1e05ff
    edx = 0;
    edi = 0x00000001;
    cl = dl;
    eax = edi;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e063a;
    goto loc_1e0670;
loc_1e0615: // 0160:1e0615
    eax = esi;
    sub_1e15c0();
    cl = dl;
    eax = edi;
    eax <<= cl;
    eax = ~eax;
    ebx &= eax;
    goto loc_1e0670;
loc_1e0628: // 0160:1e0628
    memoryASet32(ds, 0x209f20, esi);
    cl = dl;
    eax = edi;
    eax <<= cl;
    eax = ~eax;
    ebx &= eax;
    goto loc_1e0670;
loc_1e063a: // 0160:1e063a
    if (eax < 0x00000010)
        goto loc_1e0653;
    if (eax <= 0x00000010)
        goto loc_1e0615;
    if (eax < 0x00000100)
        goto loc_1e0670;
    if (eax <= 0x00000100)
        goto loc_1e0628;
    if (eax == 0x00000200)
        goto loc_1e0615;
    goto loc_1e0670;
loc_1e0653: // 0160:1e0653
    if (eax < 0x00000001)
        goto loc_1e0670;
    if (eax <= 0x00000002)
        goto loc_1e0670;
    if (eax == 0x00000004)
        goto loc_1e0628;
    eax = eax;
    edx = edx;
    eax = eax;
loc_1e0670: // 0160:1e0670
    edx++;
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1e0682;
    cl = dl;
    eax = edi;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e063a;
    goto loc_1e0670;
loc_1e0682: // 0160:1e0682
    eax = ebx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0690() // 0160:1e0690 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x30faec);
    if (eax < 0x00000004)
        goto loc_1e06ba;
    if (eax <= 0x00000004)
        goto loc_1e06a5;
    if (eax == 0x00000010)
        goto loc_1e06ac;
    goto loc_1e06bf;
loc_1e06a5: // 0160:1e06a5
    sub_1db8b0();
    goto loc_1e06bf;
loc_1e06ac: // 0160:1e06ac
    sub_1db9d0();
    goto loc_1e06bf;
loc_1e06b3: // 0160:1e06b3
    sub_1dcc70();
    goto loc_1e06bf;
loc_1e06ba: // 0160:1e06ba
    if (eax == 0x00000002)
        goto loc_1e06b3;
loc_1e06bf: // 0160:1e06bf
    edx = 0;
    memoryASet32(ds, 0x30faec, edx);
    sub_1e3350();
    goto loc_1e0710;
loc_1e06ce: // 0160:1e06ce
    sub_1dc610();
    goto loc_1e0700;
loc_1e06d5: // 0160:1e06d5
    sub_1ded70();
    goto loc_1e0700;
loc_1e06dc: // 0160:1e06dc
    sub_1df740();
    goto loc_1e0700;
loc_1e06e3: // 0160:1e06e3
    if (eax < 0x00000002)
        goto loc_1e06f8;
    if (eax <= 0x00000002)
        goto loc_1e06d5;
    if (eax < 0x00000004)
        goto loc_1e0700;
    if (eax <= 0x00000004)
        goto loc_1e06ce;
    if (eax == 0x00000010)
        goto loc_1e06ce;
    goto loc_1e0700;
loc_1e06f8: // 0160:1e06f8
    if (eax == 0x00000001)
        goto loc_1e06dc;
    eax = eax;
loc_1e0700: // 0160:1e0700
    edx++;
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1e0723;
    eax = eax;
    edx = edx;
loc_1e0710: // 0160:1e0710
    cl = dl;
    eax = 0x00000001;
    eax <<= cl;
    if (memoryAGet32(ds, 0x30fae8) & eax)
        goto loc_1e06e3;
    goto loc_1e0700;
loc_1e0723: // 0160:1e0723
    sub_1df860();
    ecx = 0;
    memoryASet32(ds, 0x310100, ecx);
    memoryASet32(ds, 0x313104, ecx);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e0740() // 0160:1e0740 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    sub_1df870();
    if ((int32_t)edx < (int32_t)0xffffffff)
        goto loc_1e0752;
    if ((int32_t)edx < (int32_t)0x00000040)
        goto loc_1e0756;
loc_1e0752: // 0160:1e0752
    eax = 0;
    ebx = pop32();
    esp += 4;
    return;
loc_1e0756: // 0160:1e0756
    eax = ebx;
    sub_1e26f0();
    ebx = pop32();
    esp += 4;
}
void sub_1e0760() // 0160:1e0760 +long
{
    esp -= 4;
    push32(ecx);
    ecx = eax;
    sub_1df870();
    eax = edx + -1;
    if (!(edx & eax))
        goto loc_1e0773;
    eax = 0;
    ecx = pop32();
    esp += 4;
    return;
loc_1e0773: // 0160:1e0773
    if ((int32_t)ecx < 0)
        goto loc_1e077c;
    if ((int32_t)ecx < (int32_t)0x00000040)
        goto loc_1e0780;
loc_1e077c: // 0160:1e077c
    eax = 0;
    ecx = pop32();
    esp += 4;
    return;
loc_1e0780: // 0160:1e0780
    memoryASet32(ds, ecx * 8 + 0x31310c, edx);
    memoryASet32(ds, ecx * 8 + 0x313110, ebx);
    eax = 0x00000001;
    ecx = pop32();
    esp += 4;
}
void sub_1e0800() // 0160:1e0800 +long
{
    esp -= 4;
    push32(esi);
    esi = eax;
    eax = edx;
    edx = ebx;
    ebx = ecx;
    if (esi < 0x00000004)
        goto loc_1e0827;
    if (esi <= 0x00000004)
        goto loc_1e0819;
    if (esi == 0x00000010)
        goto loc_1e0820;
    eax = 0;
    esi = pop32();
    esp += 4;
    return;
loc_1e0819: // 0160:1e0819
    sub_1dedd0();
    esi = pop32();
    esp += 4;
    return;
loc_1e0820: // 0160:1e0820
    sub_1e1270();
    esi = pop32();
    esp += 4;
    return;
loc_1e0827: // 0160:1e0827
    if (esi == 0x00000002)
        goto loc_1e0819;
    eax = 0;
    esi = pop32();
    esp += 4;
}
void sub_1e0830() // 0160:1e0830 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ebx = eax;
    esi = edx;
    if (edx > 0x00000004)
        goto loc_1e088f;
    edx = 0;
    goto loc_1e0880;
loc_1e0844: // 0160:1e0844
    memoryASet32(ds, 0x209f28, esi);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e0870;
loc_1e0850: // 0160:1e0850
    memoryASet32(ds, 0x209ef4, esi);
    eax = ~eax;
    ebx &= eax;
    goto loc_1e0870;
loc_1e085c: // 0160:1e085c
    if (eax < 0x00000004)
        goto loc_1e0870;
    if (eax <= 0x00000004)
        goto loc_1e0844;
    if (eax == 0x00000010)
        goto loc_1e0850;
    eax = eax;
    edx = edx;
loc_1e0870: // 0160:1e0870
    edx++;
    if ((int32_t)edx >= (int32_t)0x00000020)
        goto loc_1e088f;
    eax = eax;
    edx = edx;
loc_1e0880: // 0160:1e0880
    cl = dl;
    eax = 0x00000001;
    eax <<= cl;
    if (ebx & eax)
        goto loc_1e085c;
    goto loc_1e0870;
loc_1e088f: // 0160:1e088f
    eax = ebx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0940() // 0160:1e0940 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = eax;
    edi = 0;
    if ((int32_t)memoryAGet32(ds, 0x313104) > (int32_t)0x00000000)
        goto loc_1e0961;
    goto loc_1e097a;
loc_1e0953: // 0160:1e0953
    esi += 0x00000020;
    edi++;
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x313104))
        goto loc_1e0966;
    goto loc_1e097a;
loc_1e0961: // 0160:1e0961
    esi = 0x00310104;
loc_1e0966: // 0160:1e0966
    edx = ebx;
    eax = esi;
    sub_1e4340();
    if (eax)
        goto loc_1e0953;
    eax = edi;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e097a: // 0160:1e097a
    esi = memoryAGet32(ds, 0x313104);
    if ((int32_t)esi < (int32_t)0x00000180)
        goto loc_1e0992;
    eax = 0xfffffffa;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0992: // 0160:1e0992
    edx = esi;
    edi = esi;
    edi <<= 5;
    eax = esi + 1;
    memoryASet32(ds, 0x313104, eax);
    edi += 0x00310104;
    esi = ebx;
    push32(edi);
loc_1e09aa: // 0160:1e09aa
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1e09c2;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1e09aa;
loc_1e09c2: // 0160:1e09c2
    edi = pop32();
    eax = edx;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e09d0() // 0160:1e09d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    ecx = 0;
    if ((int32_t)memoryAGet32(ds, 0x313104) > (int32_t)0x00000000)
        goto loc_1e09f1;
    goto loc_1e0a0a;
loc_1e09e3: // 0160:1e09e3
    ebx += 0x00000020;
    ecx++;
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, 0x313104))
        goto loc_1e09f6;
    goto loc_1e0a0a;
loc_1e09f1: // 0160:1e09f1
    ebx = 0x00310104;
loc_1e09f6: // 0160:1e09f6
    edx = esi;
    eax = ebx;
    sub_1e4340();
    if (eax)
        goto loc_1e09e3;
    eax = ecx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0a0a: // 0160:1e0a0a
    eax = 0xfffffff8;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0a20() // 0160:1e0a20 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    push32(edi);
    ebx = eax;
    edi = 0;
    if ((int32_t)memoryAGet32(ds, 0x310100) > (int32_t)0x00000000)
        goto loc_1e0a41;
    goto loc_1e0a5a;
loc_1e0a33: // 0160:1e0a33
    esi += 0x00000020;
    edi++;
    if ((int32_t)edi < (int32_t)memoryAGet32(ds, 0x310100))
        goto loc_1e0a46;
    goto loc_1e0a5a;
loc_1e0a41: // 0160:1e0a41
    esi = 0x0030fb00;
loc_1e0a46: // 0160:1e0a46
    edx = ebx;
    eax = esi;
    sub_1e4340();
    if (eax)
        goto loc_1e0a33;
    eax = edi;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0a5a: // 0160:1e0a5a
    esi = memoryAGet32(ds, 0x310100);
    if ((int32_t)esi < (int32_t)0x00000030)
        goto loc_1e0a6f;
    eax = 0xfffffff9;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0a6f: // 0160:1e0a6f
    edx = esi;
    edi = esi;
    edi <<= 5;
    eax = esi + 1;
    memoryASet32(ds, 0x310100, eax);
    edi += 0x0030fb00;
    esi = ebx;
    push32(edi);
loc_1e0a87: // 0160:1e0a87
    al = memoryAGet(ds, esi);
    memoryASet(ds, edi, al);
    if (al == 0x00)
        goto loc_1e0a9f;
    al = memoryAGet(ds, esi + 1);
    esi += 0x00000002;
    memoryASet(ds, edi + 1, al);
    edi += 0x00000002;
    if (al != 0x00)
        goto loc_1e0a87;
loc_1e0a9f: // 0160:1e0a9f
    edi = pop32();
    eax = edx;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0ab0() // 0160:1e0ab0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    esi = eax;
    ecx = 0;
    if ((int32_t)memoryAGet32(ds, 0x310100) > (int32_t)0x00000000)
        goto loc_1e0ad1;
    goto loc_1e0aea;
loc_1e0ac3: // 0160:1e0ac3
    ebx += 0x00000020;
    ecx++;
    if ((int32_t)ecx < (int32_t)memoryAGet32(ds, 0x310100))
        goto loc_1e0ad6;
    goto loc_1e0aea;
loc_1e0ad1: // 0160:1e0ad1
    ebx = 0x0030fb00;
loc_1e0ad6: // 0160:1e0ad6
    edx = esi;
    eax = ebx;
    sub_1e4340();
    if (eax)
        goto loc_1e0ac3;
    eax = ecx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e0aea: // 0160:1e0aea
    eax = 0xfffffff7;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0d30() // 0160:1e0d30 +long
{
    esp -= 4;
    goto loc_1e0d30;
loc_1e0d02: // 0160:1e0d02
    eax = edx;
    eax <<= 9;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<5) & 0x80000000);
    edx <<= 6;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x06);
    edx = eax;
    eax = 0;
    sub_1dcbc0();
    eax = 0;
    esp += 4;
    return;
    // gap 14 bytes
loc_1e0d30: // 0160:1e0d30
    if (eax == 0x00000100)
        goto loc_1e0d02;
    eax = 0xffffffff;
    esp += 4;
}
void sub_1e0d40()
{
  sub_1db2c0();
}

void sub_1e0d50()
{
  sub_1db470();
}

void sub_1e0d60()
{
  sub_1db5b0();
}

void sub_1e0d70()
{
  sub_1db5f0();
}

void sub_1e0d80()
{
  sub_1db620();
}

void sub_1e0dd0()
{
  sub_1db660();
}

void sub_1e0e80() // 0160:1e0e80 +long
{
    return;
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
loc_1e0e84: // 0160:1e0e84
    ebx--;
    if (bx == 0xffff)
        goto loc_1e0ea0;
    edx = 0;
    dx = memoryAGet16(ds, 0x313328);
    eax = 0;
    al = in8(dx);
    memoryASet16(ds, 0x31332a, memoryAGet16(ds, 0x31332a) + 1);
    goto loc_1e0e84;
loc_1e0ea0: // 0160:1e0ea0
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e0ec0() // 0160:1e0ec0 +long
{
    esp -= 4;
    push32(edx);
loc_1e0ec1: // 0160:1e0ec1
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000e;
    eax = 0;
    al = in8(dx);
    if (al & 0x80)
        goto loc_1e0ee0;
    eax = 0x00000001;
    sub_1e0e80();
    goto loc_1e0ec1;
loc_1e0ee0: // 0160:1e0ee0
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000a;
    eax = 0;
    al = in8(dx);
    edx = pop32();
    esp += 4;
}
void sub_1e0f00() // 0160:1e0f00 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000004;
    out8(dx, al);
    eax = 0x0000000a;
    sub_1e0e80();
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000005;
    eax = 0;
    al = in8(dx);
    edx = pop32();
    esp += 4;
}
void sub_1e0f30() // 0160:1e0f30 +long
{
    esp -= 4;
    push32(ebx);
    bl = dl;
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000004;
    out8(dx, al);
    eax = 0x0000000a;
    sub_1e0e80();
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000005;
    al = bl;
    out8(dx, al);
    eax = 0x0000001e;
    sub_1e0e80();
    ebx = pop32();
    esp += 4;
}
void sub_1e0f70() // 0160:1e0f70 +long
{
    esp -= 4;
    push32(edx);
    if (memoryAGet16(ds, 0x313312) != 0x0000)
        goto loc_1e0f7f;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1e0f7f: // 0160:1e0f7f
    eax = 0x0000000e;
    sub_1e0f00();
    al &= 0xfd;
    al |= 0x02;
    edx = 0;
    dl = al;
    eax = 0x0000000e;
    sub_1e0f30();
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
}
void sub_1e0fb0() // 0160:1e0fb0 +long
{
    esp -= 4;
    push32(edx);
    if (memoryAGet16(ds, 0x313312) != 0x0000)
        goto loc_1e0fbf;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1e0fbf: // 0160:1e0fbf
    eax = 0x0000000e;
    sub_1e0f00();
    al &= 0xfd;
    edx = 0;
    dl = al;
    eax = 0x0000000e;
    sub_1e0f30();
    eax = 0x00000001;
    edx = pop32();
    esp += 4;
}
void sub_1e0fe0() // 0160:1e0fe0 +long
{
    esp -= 4;
    goto loc_1e0fe0;
loc_1e0ea3: // 0160:1e0ea3
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    al = bl;
    out8(dx, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 299 bytes
loc_1e0fe0: // 0160:1e0fe0
    eax = 0x000000d1;
    goto loc_1e1000;
    // gap 25 bytes
loc_1e1000: // 0160:1e1000
    push32(ebx);
    push32(edx);
    bl = al;
loc_1e1004: // 0160:1e1004
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    eax = 0;
    al = in8(dx);
    if (!(al & 0x80))
        goto loc_1e0ea3;
    eax = 0x00000001;
    sub_1e0e80();
    goto loc_1e1004;
}
void sub_1e0ff0() // 0160:1e0ff0 +long
{
    esp -= 4;
    goto loc_1e0ff0;
loc_1e0ea3: // 0160:1e0ea3
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    al = bl;
    out8(dx, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 315 bytes
loc_1e0ff0: // 0160:1e0ff0
    eax = 0x000000d3;
    eax = eax;
    edx = edx;
    ebx = ebx;
    push32(ebx);
    push32(edx);
    bl = al;
loc_1e1004: // 0160:1e1004
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    eax = 0;
    al = in8(dx);
    if (!(al & 0x80))
        goto loc_1e0ea3;
    eax = 0x00000001;
    sub_1e0e80();
    goto loc_1e1004;
}
void sub_1e1000() // 0160:1e1000 +long
{
    esp -= 4;
    goto loc_1e1000;
loc_1e0ea3: // 0160:1e0ea3
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    al = bl;
    out8(dx, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 331 bytes
loc_1e1000: // 0160:1e1000
    push32(ebx);
    push32(edx);
    bl = al;
loc_1e1004: // 0160:1e1004
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000c;
    eax = 0;
    al = in8(dx);
    if (!(al & 0x80))
        goto loc_1e0ea3;
    eax = 0x00000001;
    sub_1e0e80();
    goto loc_1e1004;
}
void sub_1e1090() // 0160:1e1090 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    eax = 0x000000e1;
    sub_1e1000();
    eax = 0x00000064;
    sub_1e0e80();
    sub_1e0ec0();
    ah = 0;
    memoryASet16(ds, 0x313318, ax);
    sub_1e0ec0();
    ah = 0;
    memoryASet16(ds, 0x31331a, ax);
    ax = memoryAGet16(ds, 0x313318);
    if (ax > 0x0004)
        goto loc_1e1113;
    eax &= 0x0000ffff;
    indirectJump(cs, memoryAGet32(cs, eax * 4 + 0x1e1074)); return; // 0160:1e10d1;
    // gap 58 bytes
loc_1e1113: // 0160:1e1113
    edx = 0;
    memoryASet16(ds, 0x313312, dx);
    memoryASet16(ds, 0x313310, dx);
    memoryASet16(ds, 0x313316, dx);
    memoryASet16(ds, 0x313314, 0x0001);
    memoryASet16(ds, 0x31330e, 0x0fa0);
    memoryASet16(ds, 0x31330c, 0x55f0);
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e11d0() // 0160:1e11d0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    eax = 0x00000064;
    sub_1e0e80();
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000006;
    al = 0x01;
    out8(dx, al);
    eax = 0x00000064;
    sub_1e0e80();
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x00000006;
    al = 0;
    out8(dx, al);
    ebx = 0;
loc_1e1206: // 0160:1e1206
    eax = 0x00000064;
    sub_1e0e80();
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000e;
    eax = 0;
    al = in8(dx);
    if (!(al & 0x80))
        goto loc_1e1246;
    edx = 0;
    dx = memoryAGet16(ds, 0x31331c);
    edx += 0x0000000a;
    eax = 0;
    al = in8(dx);
    eax &= 0x000000ff;
    if (eax != 0x000000aa)
        goto loc_1e1246;
    sub_1e1090();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e1246: // 0160:1e1246
    ebx++;
    if ((int32_t)ebx < (int32_t)0x00000064)
        goto loc_1e1206;
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e1270() // 0160:1e1270 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    ecx = eax;
    if (memoryAGet16(ds, 0x313312) != 0x0000)
        goto loc_1e1283;
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e1283: // 0160:1e1283
    if ((int32_t)edx >= 0)
        goto loc_1e1289;
    edx = 0;
loc_1e1289: // 0160:1e1289
    if ((int32_t)edx <= (int32_t)0x00000100)
        goto loc_1e1296;
    edx = 0x00000100;
loc_1e1296: // 0160:1e1296
    if ((int32_t)ebx >= 0)
        goto loc_1e129c;
    ebx = 0;
loc_1e129c: // 0160:1e129c
    if ((int32_t)ebx <= (int32_t)0x00000100)
        goto loc_1e12a9;
    ebx = 0x00000100;
loc_1e12a9: // 0160:1e12a9
    eax = edx;
    eax <<= 4;
    eax -= edx;
    edx = eax;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    esi = eax;
    edx = ebx;
    edx <<= 4;
    edx -= ebx;
    eax = edx;
    edx = sar32(edx, 0x1f);
    flags.carry = !!((edx<<7) & 0x80000000);
    edx <<= 8;
    eax = eax - edx - flags.carry;
    eax = sar32(eax, 0x08);
    esi <<= 4;
    eax |= esi;
    if (ecx > 0x00000005)
        goto loc_1e1333;
    indirectJump(cs, memoryAGet32(cs, ecx * 4 + 0x1e1254)); return; // 0160:1e12dd;
    // gap 78 bytes
loc_1e1333: // 0160:1e1333
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e1340() // 0160:1e1340 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    eax = 0x0f424000;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    ebx = 0x00010000;
    ebx -= eax;
    ebx = sar32(ebx, 0x08);
    eax = ebx;
    eax <<= 8;
    ecx = 0x00010000;
    ecx -= eax;
    eax = 0x0f424000;
    edx = eax;
    edx = sar32(edx, 0x1f);
    idiv32(ecx);
    edx = eax;
    eax = 0x00000040;
    sub_1e1000();
    eax = 0;
    al = bl;
    sub_1e1000();
    eax = edx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e1390() // 0160:1e1390 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    edx--;
    eax = 0x00000048;
    sub_1e1000();
    eax = 0;
    al = dl;
    sub_1e1000();
    eax = 0;
    ax = dx;
    eax = sar32(eax, 0x08);
    eax &= 0x000000ff;
    sub_1e1000();
    edx = pop32();
    esp += 4;
}
void sub_1e13c0() // 0160:1e13c0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = edx;
    esi = 0;
    si = memoryAGet16(ds, 0x31331e);
    ebx = edx;
    edx = eax;
    eax = esi;
    sub_1db720();
    push32(flagAsReg32());
    flags.interrupts = 0;
    eax = 0x00000014;
    sub_1e1000();
    al = cl;
    al--;
    eax &= 0x000000ff;
    sub_1e1000();
    eax = ecx;
    eax--;
    eax = sar32(eax, 0x08);
    eax &= 0x000000ff;
    sub_1e1000();
    flagsFromReg32(pop32());
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e1410() // 0160:1e1410 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ecx = 0;
    cx = memoryAGet16(ds, 0x31331e);
    ebx = edx;
    edx = eax;
    eax = ecx;
    sub_1db7a0();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e1440() // 0160:1e1440 +long
{
    esp -= 4;
    goto loc_1e1440;
loc_1db860: // 0160:1db860
    push32(edx);
    eax = eax * 0x00000054;
    edx = 0x002091fc;
    edx += eax;
    eax = memoryAGet32(ds, edx + 8);
    edx = memoryAGet32(ds, edx + 28);
    out8(dx, al);
    edx = pop32();
    esp += 4;
    return;
    // gap 23500 bytes
loc_1e1440: // 0160:1e1440
    eax = 0x000000d0;
    sub_1e1000();
    eax = 0;
    ax = memoryAGet16(ds, 0x31331e);
    goto loc_1db860;
}
void sub_1e1460() // 0160:1e1460 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    sub_1e11d0();
    sub_1e0ff0();
    sub_1e1440();
    sub_1e2560();
    cl = memoryAGet(ds, 0x313320);
    edx = 0x00000001;
    edx <<= cl;
    eax |= edx;
    eax &= 0x0000ffff;
    sub_1e2580();
    ebx = 0;
    bx = memoryAGet16(ds, 0x209f44);
    edx = memoryAGet32(ds, 0x209f40);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    sub_1e23a0();
    ebx = 0;
    bx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1e14cf;
    ebx += 0x00000060;
    al = bl;
    edx = 0x00000020;
    goto loc_1e14df;
loc_1e14cf: // 0160:1e14cf
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ebx + 88;
    edx = 0x000000a0;
loc_1e14df: // 0160:1e14df
    out8(dx, al);
    flagsFromReg32(pop32());
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e14f0() // 0160:1e14f0 +long
{
    esp -= 4;
    eax = sar32(eax, 0x10);
    esp += 4;
}
void sub_1e1500() // 0160:1e1500 +long
{
    esp -= 4;
    push32(edx);
    eax = 0;
    if ((int32_t)memoryAGet32(ds, 0x209f54) <= (int32_t)0x00000000)
        goto loc_1e1529;
loc_1e150c: // 0160:1e150c
    edx = memoryAGet32(ds, 0x31332c);
    memoryASet(ds, edx + eax, 0x80);
    edx = memoryAGet32(ds, 0x313330);
    memoryASet(ds, edx + eax, 0x80);
    eax++;
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, 0x209f54))
        goto loc_1e150c;
loc_1e1529: // 0160:1e1529
    edx = pop32();
    esp += 4;
}
void sub_1e1530() // 0160:1e1530 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x209f54);
    eax = eax * 4;
    sub_1e24b0();
    edx = eax;
    if (!eax)
        goto loc_1e1583;
loc_1e154a: // 0160:1e154a
    eax = edx;
    sub_1e14f0();
    ebx = eax;
    eax = memoryAGet32(ds, 0x209f54);
    eax += eax;
    eax += edx;
    eax--;
    sub_1e14f0();
    ecx = memoryAGet32(ds, 0x209f54);
    ecx += edx;
    if (ebx == eax)
        goto loc_1e1572;
    edx = ecx;
    goto loc_1e154a;
loc_1e1572: // 0160:1e1572
    memoryASet32(ds, 0x31332c, edx);
    memoryASet32(ds, 0x313330, ecx);
    eax = 0x00000001;
loc_1e1583: // 0160:1e1583
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e1590() // 0160:1e1590 +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x209f58) != 0xffffffff)
        goto loc_1e15ab;
    sub_1e1530();
    if (!eax)
        goto loc_1e15b5;
    ebx = 0;
    memoryASet32(ds, 0x209f58, ebx);
loc_1e15ab: // 0160:1e15ab
    sub_1e1500();
    eax = 0x00000001;
loc_1e15b5: // 0160:1e15b5
    ebx = pop32();
    esp += 4;
}
void sub_1e15c0() // 0160:1e15c0 +long
{
    esp -= 4;
    if ((int32_t)eax >= (int32_t)0x00000001)
        goto loc_1e15ca;
    eax = 0x00000001;
loc_1e15ca: // 0160:1e15ca
    if ((int32_t)eax <= (int32_t)0x00000118)
        goto loc_1e15d6;
    eax = 0x00000118;
loc_1e15d6: // 0160:1e15d6
    memoryASet16(ds, 0x209f4c, ax);
    esp += 4;
}
void sub_1e15e0() // 0160:1e15e0 +long
{
    esp -= 4;
    memoryASet32(ds, 0x313338, eax);
    esp += 4;
}
void sub_1e15f0() // 0160:1e15f0 +long
{
    esp -= 4;
    push32(ebx);
    if (memoryAGet32(ds, 0x313338) == 0x00000000)
        goto loc_1e1602;
    indirectCall(cs, memoryAGet32(ds, 0x313338)); // 0160:1e15fa;
    ebx = pop32();
    esp += 4;
    return;
loc_1e1602: // 0160:1e1602
    ebx = edx;
    edx = 0x00000080;
    sub_1e3de0();
    ebx = pop32();
    esp += 4;
}
void sub_1e1610() // 0160:1e1610 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ss, ebp + -4, edx);
    edi = ebx;
    if ((int32_t)ecx <= (int32_t)0x00000007)
        goto loc_1e162b;
    eax = 0;
    goto loc_1e1851;
loc_1e162b: // 0160:1e162b
    ebx = ecx;
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1e19e0();
    if (!eax)
        goto loc_1e1851;
    edx = 0;
    memoryASet32(ds, 0x313324, edx);
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet16(ds, 0x31331c, ax);
    memoryASet16(ds, 0x313320, cx);
    memoryASet16(ds, 0x31331e, di);
    eax = 0;
    ax = di;
    if ((int32_t)eax <= (int32_t)0x00000003)
        goto loc_1e1670;
    eax = 0;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1e1670: // 0160:1e1670
    sub_1e11d0();
    if (!eax)
        goto loc_1e1851;
    sub_1e1590();
    if (!eax)
        goto loc_1e1851;
    if (memoryAGet16(ds, 0x313310) == 0x0000)
        goto loc_1e1699;
    sub_1e0fb0();
loc_1e1699: // 0160:1e1699
    sub_1e0fe0();
    eax = 0;
    ax = memoryAGet16(ds, 0x31330e);
    if ((int32_t)esi < (int32_t)eax)
        goto loc_1e16b6;
    eax = 0;
    ax = memoryAGet16(ds, 0x31330c);
    if ((int32_t)esi <= (int32_t)eax)
        goto loc_1e16b8;
loc_1e16b6: // 0160:1e16b6
    esi = eax;
loc_1e16b8: // 0160:1e16b8
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    ebx = 0x00209f44;
    edx = 0x00209f40;
    sub_1e2350();
    if (memoryAGet16(ds, 0x313314) != 0x0000)
        goto loc_1e1702;
    edx = cs;
    eax = 0x001e0de8;
    ebx = 0;
    bx = dx;
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    edx = 0x001e0de8;
    goto loc_1e1722;
loc_1e1702: // 0160:1e1702
    edx = cs;
    eax = 0x001e0e06;
    ebx = 0;
    bx = dx;
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    edx = 0x001e0e06;
loc_1e1722: // 0160:1e1722
    sub_1e23a0();
    sub_1e2560();
    cl = memoryAGet(ds, 0x313320);
    edx = 0x00000001;
    edx <<= cl;
    edx = ~edx;
    eax &= edx;
    eax &= 0x0000ffff;
    sub_1e2580();
    ecx = 0;
    cx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1e1761;
    eax = ecx + 96;
    edx = 0x00000020;
    goto loc_1e1771;
loc_1e1761: // 0160:1e1761
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ecx + 88;
    edx = 0x000000a0;
loc_1e1771: // 0160:1e1771
    out8(dx, al);
    flagsFromReg32(pop32());
    eax = esi;
    sub_1e1340();
    memoryASet16(ds, 0x313322, ax);
    ebx = 0;
    memoryASet32(ds, 0x209f58, ebx);
    edx = 0;
    dx = ax;
    bx = memoryAGet16(ds, 0x209f4c);
    eax = edx;
    edx = sar32(edx, 0x1f);
    idiv32(ebx);
    eax++;
    al &= 0xfe;
    memoryASet32(ds, 0x209f54, eax);
    if ((int32_t)eax >= (int32_t)0x00000080)
        goto loc_1e17b4;
    memoryASet32(ds, 0x209f54, 0x00000080);
loc_1e17b4: // 0160:1e17b4
    eax = memoryAGet32(ds, 0x209f54);
    edi = memoryAGet32(ds, 0x209f50);
    if ((int32_t)eax <= (int32_t)edi)
        goto loc_1e17c9;
    memoryASet32(ds, 0x209f54, edi);
loc_1e17c9: // 0160:1e17c9
    eax = memoryAGet32(ds, 0x31332c);
    edx = memoryAGet32(ds, 0x209f54);
    ebx = eax + edx;
    memoryASet32(ds, 0x313330, ebx);
    if (memoryAGet16(ds, 0x313314) != 0x0000)
        goto loc_1e180e;
    sub_1e15f0();
    edx = memoryAGet32(ds, 0x209f54);
    eax = memoryAGet32(ds, 0x313330);
    sub_1e15f0();
    edx = memoryAGet32(ds, 0x209f54);
    eax = memoryAGet32(ds, 0x31332c);
    sub_1e13c0();
    goto loc_1e1849;
loc_1e180e: // 0160:1e180e
    sub_1e15f0();
    edx = memoryAGet32(ds, 0x209f54);
    eax = memoryAGet32(ds, 0x313330);
    sub_1e15f0();
    edx = memoryAGet32(ds, 0x209f54);
    edx += edx;
    eax = memoryAGet32(ds, 0x31332c);
    sub_1e1410();
    eax = memoryAGet32(ds, 0x209f54);
    sub_1e1390();
    eax = 0x0000001c;
    sub_1e1000();
loc_1e1849: // 0160:1e1849
    eax = 0;
    ax = memoryAGet16(ds, 0x313322);
loc_1e1851: // 0160:1e1851
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e19e0() // 0160:1e19e0 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    memoryASet16(ds, 0x31331c, ax);
    memoryASet16(ds, 0x31331e, dx);
    memoryASet16(ds, 0x313320, bx);
    sub_1e11d0();
    if (!eax)
        goto loc_1e1b56;
    sub_1e1590();
    if (!eax)
        goto loc_1e1b56;
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    ebx = 0x00209f44;
    edx = 0x00209f40;
    sub_1e2350();
    edx = cs;
    eax = 0x001e0e24;
    ebx = 0;
    bx = dx;
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    edx = 0x001e0e24;
    sub_1e23a0();
    sub_1e2560();
    esi = eax;
    cl = memoryAGet(ds, 0x313320);
    edx = 0x00000001;
    edx <<= cl;
    edx = ~edx;
    eax &= edx;
    eax &= 0x0000ffff;
    sub_1e2580();
    ebx = 0;
    bx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1e1a90;
    eax = ebx + 96;
    edx = 0x00000020;
    out8(dx, al);
    goto loc_1e1aa1;
loc_1e1a90: // 0160:1e1a90
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ebx + 88;
    edx = 0x000000a0;
    out8(dx, al);
loc_1e1aa1: // 0160:1e1aa1
    flagsFromReg32(pop32());
    edx = 0;
    memoryASet32(ds, 0x313334, edx);
    sub_1e0ff0();
    eax = 0x00002710;
    sub_1e1340();
    eax = memoryAGet32(ds, 0x31332c);
    edx = 0x000003e8;
    sub_1e13c0();
    edx = 0;
loc_1e1aca: // 0160:1e1aca
    if ((int32_t)memoryAGet32(ds, 0x313334) < (int32_t)0x00000004)
        goto loc_1e1b24;
loc_1e1ad3: // 0160:1e1ad3
    sub_1e11d0();
    sub_1e1440();
    ebx = 0;
    bx = memoryAGet16(ds, 0x209f44);
    edx = memoryAGet32(ds, 0x209f40);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    sub_1e23a0();
    eax = 0;
    ax = si;
    sub_1e2580();
    ebx = 0;
    bx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1e1b31;
    eax = ebx + 96;
    edx = 0x00000020;
    goto loc_1e1b41;
loc_1e1b24: // 0160:1e1b24
    sub_1e2690();
    edx++;
    if ((int32_t)edx < (int32_t)0x00000024)
        goto loc_1e1aca;
    goto loc_1e1ad3;
loc_1e1b31: // 0160:1e1b31
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ebx + 88;
    edx = 0x000000a0;
loc_1e1b41: // 0160:1e1b41
    out8(dx, al);
    flagsFromReg32(pop32());
    if ((int32_t)memoryAGet32(ds, 0x313334) >= (int32_t)0x00000004)
        goto loc_1e1b51;
    eax = 0;
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e1b51: // 0160:1e1b51
    eax = 0x00000001;
loc_1e1b56: // 0160:1e1b56
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e1c00() // 0160:1e1c00 +long
{
    esp -= 4;
    goto loc_1e1c00;
loc_1e1854: // 0160:1e1854
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
    // gap 937 bytes
loc_1e1c00: // 0160:1e1c00
    push32(esi);
    push32(edi);
    edi = eax;
    esi = edx;
    eax = 0x0020b26c;
    sub_1e3508();
    edx = eax;
    if (!eax)
        goto loc_1e1854;
loc_1e1c1a: // 0160:1e1c1a
    if (memoryAGet(ds, edx) == 0x00)
        goto loc_1e1854;
loc_1e1c23: // 0160:1e1c23
    al = memoryAGet(ds, edx);
    if (al == 0x20)
        goto loc_1e1c2d;
    if (al != 0x09)
        goto loc_1e1c86;
loc_1e1c2d: // 0160:1e1c2d
    edx++;
    goto loc_1e1c23;
loc_1e1c30: // 0160:1e1c30
    push32(edi);
    push32(0x0020b274);
    eax = edx + 1;
    push32(eax);
    sub_1e3dbe();
    esp += 0x0000000c;
    goto loc_1e1cb6;
loc_1e1c47: // 0160:1e1c47
    push32(ebx);
    push32(0x0020b277);
    eax = edx + 1;
    push32(eax);
    sub_1e3dbe();
    esp += 0x0000000c;
    goto loc_1e1cb6;
loc_1e1c5e: // 0160:1e1c5e
    push32(esi);
    push32(0x0020b27a);
    eax = edx + 1;
    push32(eax);
    sub_1e3dbe();
    esp += 0x0000000c;
    goto loc_1e1cb6;
loc_1e1c72: // 0160:1e1c72
    push32(ecx);
    push32(0x0020b27d);
    eax = edx + 1;
    push32(eax);
    sub_1e3dbe();
    esp += 0x0000000c;
    goto loc_1e1cb6;
loc_1e1c86: // 0160:1e1c86
    if (al < 0x54)
        goto loc_1e1ca2;
    if (al <= 0x54)
        goto loc_1e1c72;
    if (al < 0x64)
        goto loc_1e1c9e;
    if (al <= 0x64)
        goto loc_1e1c5e;
    if (al < 0x69)
        goto loc_1e1cb6;
    if (al <= 0x69)
        goto loc_1e1c47;
    if (al == 0x74)
        goto loc_1e1c72;
    goto loc_1e1cb6;
loc_1e1c9e: // 0160:1e1c9e
    flags.zero = al == 0x61;
    goto loc_1e1cb0;
loc_1e1ca2: // 0160:1e1ca2
    if (al < 0x44)
        goto loc_1e1cae;
    if (al <= 0x44)
        goto loc_1e1c5e;
    if (al == 0x49)
        goto loc_1e1c47;
    goto loc_1e1cb6;
loc_1e1cae: // 0160:1e1cae
    flags.zero = al == 0x41;
loc_1e1cb0: // 0160:1e1cb0
    if (flags.zero)
        goto loc_1e1c30;
loc_1e1cb6: // 0160:1e1cb6
    al = memoryAGet(ds, edx);
    if (!al)
        goto loc_1e1c1a;
    if (al == 0x20)
        goto loc_1e1c1a;
    if (al == 0x09)
        goto loc_1e1c1a;
    edx++;
    goto loc_1e1cb6;
}
void sub_1e1d00() // 0160:1e1d00 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000048;
    memoryASet32(ss, ebp + -12, eax);
    memoryASet32(ss, ebp + -4, edx);
    memoryASet32(ss, ebp + -8, ebx);
    memoryASet32(ss, ebp + -16, ecx);
    ecx = 0x00000005;
    edi = ebp + -52;
    esi = 0x00209f9c;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    ecx = 0x00000005;
    edi = ebp + -72;
    esi = 0x00209fb0;
    for (; ecx != 0; --ecx) movsd<ES_EDI, DS_ESI>();
    edi = ebp + -32;
    esi = 0x00209fc4;
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    movsd<ES_EDI, DS_ESI>();
    sub_1e1590();
    if (!eax)
        goto loc_1e2310;
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet32(ds, eax, 0xffffffff);
    memoryASet32(ds, edx, 0xffffffff);
    memoryASet32(ds, ebx, 0xffffffff);
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e1d7d;
    push32(0x0020b280);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e1d7d: // 0160:1e1d7d
    ebx = 0;
    edx = 0;
    if ((int32_t)memoryAGet32(ss, ebp + -52) < (int32_t)0x00000000)
        goto loc_1e1dc4;
    edi = memoryAGet32(ss, ebp + -16);
loc_1e1d8a: // 0160:1e1d8a
    ax = memoryAGet16(ds, edx + ebp + -52);
    memoryASet16(ds, 0x31331c, ax);
    if (edi)
        goto loc_1e1db0;
    push32(0x0020b292);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e1db0: // 0160:1e1db0
    sub_1e11d0();
    if (eax)
        goto loc_1e1dc4;
    edx += 0x00000004;
    ebx++;
    if ((int32_t)memoryAGet32(ds, edx + ebp + -52) >= (int32_t)0x00000000)
        goto loc_1e1d8a;
loc_1e1dc4: // 0160:1e1dc4
    if ((int32_t)memoryAGet32(ss, ebp + ebx * 4 - 0x34) >= (int32_t)0x00000000)
        goto loc_1e1de7;
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e230e;
    push32(0x0020b294);
    sub_1e34e6();
    esp += 0x00000004;
    goto loc_1e230e;
loc_1e1de7: // 0160:1e1de7
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e1e03;
    eax = 0;
    ax = memoryAGet16(ds, 0x31331c);
    push32(eax);
    push32(0x0020b29d);
    sub_1e34e6();
    esp += 0x00000008;
loc_1e1e03: // 0160:1e1e03
    eax = 0;
    ax = memoryAGet16(ds, 0x31331c);
    edx = memoryAGet32(ss, ebp + -12);
    memoryASet32(ds, edx, eax);
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e1e2d;
    push32(0x0020b2a8);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e1e2d: // 0160:1e1e2d
    sub_1e1090();
    if (eax)
        goto loc_1e1e55;
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e230e;
    push32(0x0020b2ba);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
//    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1e1e55: // 0160:1e1e55
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e1e7a;
    eax = 0;
    ax = memoryAGet16(ds, 0x31331a);
    push32(eax);
    eax = 0;
    ax = memoryAGet16(ds, 0x313318);
    push32(eax);
    push32(0x0020b2c3);
    sub_1e34e6();
    esp += 0x0000000c;
loc_1e1e7a: // 0160:1e1e7a
    if (memoryAGet16(ds, 0x313316) == 0x0000)
        goto loc_1e2087;
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e1ea9;
    push32(0x0020b2d2);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e1ea9: // 0160:1e1ea9
    eax = 0x00000080;
    sub_1e0f00();
    al &= 0x0f;
    eax &= 0x000000ff;
    eax--;
    if (eax > 0x00000007)
        goto loc_1e1f18;
    indirectJump(cs, memoryAGet32(cs, eax * 4 + 0x1e1cd4)); return; // 0160:1e1ec0;
    // gap 80 bytes
loc_1e1f18: // 0160:1e1f18
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e230e;
    push32(0x0020b2e4);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
    // gap 336 bytes
loc_1e2087: // 0160:1e2087
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e20a4;
    push32(0x0020b364);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e20a4: // 0160:1e20a4
    esi = 0;
    if ((int32_t)memoryAGet32(ss, ebp + -72) < (int32_t)0x00000000)
        goto loc_1e22fb;
loc_1e20b0: // 0160:1e20b0
    ax = memoryAGet16(ds, esi + ebp + -72);
    memoryASet16(ds, 0x313320, ax);
    eax &= 0x0000ffff;
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    ebx = 0x00209f44;
    edx = 0x00209f40;
    sub_1e2350();
    edx = cs;
    eax = 0x001e0e24;
    ebx = 0;
    bx = dx;
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    edx = 0x001e0e24;
    sub_1e23a0();
    sub_1e2560();
    edi = eax;
    cl = memoryAGet(ds, 0x313320);
    edx = 0x00000001;
    edx <<= cl;
    edx = ~edx;
    eax &= edx;
    eax &= 0x0000ffff;
    sub_1e2580();
    ebx = 0;
    if ((int32_t)memoryAGet32(ss, ebp + -32) < (int32_t)0x00000000)
        goto loc_1e2294;
loc_1e2129: // 0160:1e2129
    ecx = 0;
    cx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ecx >= (int32_t)0x00000008)
        goto loc_1e2143;
    eax = ecx + 96;
    edx = 0x00000020;
    goto loc_1e2155;
loc_1e2143: // 0160:1e2143
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    ecx += 0x00000058;
    al = cl;
    edx = 0x000000a0;
loc_1e2155: // 0160:1e2155
    out8(dx, al);
    flagsFromReg32(pop32());
    ax = memoryAGet16(ds, ebx + ebp + -32);
    memoryASet16(ds, 0x31331e, ax);
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e217f;
    push32(0x0020b376);
    sub_1e34e6();
    esp += 0x00000004;
    eax = 0x0020a52a;
    sub_1e3d5a();
loc_1e217f: // 0160:1e217f
    eax = 0;
    memoryASet32(ds, 0x313334, eax);
    sub_1e11d0();
    sub_1e0ff0();
    eax = 0x00002710;
    sub_1e1340();
    eax = memoryAGet32(ds, 0x31332c);
    edx = 0x000003e8;
    sub_1e13c0();
    edx = 0;
loc_1e21ab: // 0160:1e21ab
    if ((int32_t)memoryAGet32(ds, 0x313334) < (int32_t)0x00000004)
        goto loc_1e223b;
loc_1e21b8: // 0160:1e21b8
    sub_1e11d0();
    sub_1e1440();
    if ((int32_t)memoryAGet32(ds, 0x313334) < (int32_t)0x00000004)
        goto loc_1e2286;
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e21f4;
    eax = 0;
    ax = memoryAGet16(ds, 0x31331e);
    push32(eax);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    push32(eax);
    push32(0x0020b378);
    sub_1e34e6();
    esp += 0x0000000c;
loc_1e21f4: // 0160:1e21f4
    ebx = 0;
    bx = memoryAGet16(ds, 0x209f44);
    edx = memoryAGet32(ds, 0x209f40);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    sub_1e23a0();
    eax = 0;
    ax = di;
    sub_1e2580();
    ebx = 0;
    bx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1e224f;
    eax = ebx + 96;
    edx = 0x00000020;
    goto loc_1e225f;
loc_1e223b: // 0160:1e223b
    sub_1e2690();
    edx++;
    if ((int32_t)edx < (int32_t)0x00000012)
        goto loc_1e21ab;
    goto loc_1e21b8;
loc_1e224f: // 0160:1e224f
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ebx + 88;
    edx = 0x000000a0;
loc_1e225f: // 0160:1e225f
    out8(dx, al);
    flagsFromReg32(pop32());
    eax = 0;
    ax = memoryAGet16(ds, 0x31331e);
    edx = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, edx, eax);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    edx = memoryAGet32(ss, ebp + -8);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
    return;
loc_1e2286: // 0160:1e2286
    ebx += 0x00000004;
    if ((int32_t)memoryAGet32(ds, ebx + ebp + -32) >= (int32_t)0x00000000)
        goto loc_1e2129;
loc_1e2294: // 0160:1e2294
    ebx = 0;
    bx = memoryAGet16(ds, 0x209f44);
    edx = memoryAGet32(ds, 0x209f40);
    eax = 0;
    ax = memoryAGet16(ds, 0x313320);
    eax = memoryAGet32(ds, eax * 4 + 0x209f5c);
    sub_1e23a0();
    eax = 0;
    ax = di;
    sub_1e2580();
    ebx = 0;
    bx = memoryAGet16(ds, 0x313320);
    push32(flagAsReg32());
    flags.interrupts = 0;
    if ((int32_t)ebx >= (int32_t)0x00000008)
        goto loc_1e22db;
    eax = ebx + 96;
    edx = 0x00000020;
    goto loc_1e22eb;
loc_1e22db: // 0160:1e22db
    al = 0x62;
    edx = 0x00000020;
    out8(dx, al);
    eax = ebx + 88;
    edx = 0x000000a0;
loc_1e22eb: // 0160:1e22eb
    out8(dx, al);
    flagsFromReg32(pop32());
    esi += 0x00000004;
    if ((int32_t)memoryAGet32(ds, esi + ebp + -72) >= (int32_t)0x00000000)
        goto loc_1e20b0;
loc_1e22fb: // 0160:1e22fb
    if (memoryAGet32(ss, ebp + -16) != 0x00000000)
        goto loc_1e230e;
    push32(0x0020b385);
    sub_1e34e6();
    esp += 0x00000004;
loc_1e230e: // 0160:1e230e
    eax = 0;
loc_1e2310: // 0160:1e2310
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e2350() // 0160:1e2350 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000028;
    edi = edx;
    esi = ebx;
    eax += 0x00003500;
    memoryASet32(ss, ebp + -40, eax);
    edx = 0;
    memoryASet16(ss, ebp + -12, dx);
    memoryASet16(ss, ebp + -6, dx);
    ecx = ebp + -12;
    ebx = ebp + -40;
    edx = ebp + -40;
    eax = 0x00000021;
    sub_1e39c0();
    eax = memoryAGet32(ss, ebp + -12);
    memoryASet16(ds, esi, ax);
    eax = memoryAGet32(ss, ebp + -36);
    memoryASet32(ds, edi, eax);
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e23a0() // 0160:1e23a0 +long
{
    esp -= 4;
    push32(ecx);
    push32(ebp);
    ebp = esp;
    esp -= 0x00000028;
    eax += 0x00002500;
    memoryASet32(ss, ebp + -40, eax);
    memoryASet32(ss, ebp + -28, edx);
    memoryASet16(ss, ebp + -6, bx);
    edx = 0;
    memoryASet16(ss, ebp + -12, dx);
    ecx = ebp + -12;
    ebx = ebp + -40;
    edx = ebp + -40;
    eax = 0x00000021;
    sub_1e39c0();
    esp = ebp;
    ebp = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e2460() // 0160:1e2460 +long
{
    esp -= 4;
    push32(ebx);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000001c;
    ebx = eax;
    memoryASet16(ss, ebp + -28, 0x0600);
    eax = sar32(eax, 0x10);
    memoryASet16(ss, ebp + -24, ax);
    memoryASet16(ss, ebp + -20, bx);
    eax = edx;
    eax = sar32(eax, 0x10);
    memoryASet16(ss, ebp + -12, ax);
    memoryASet16(ss, ebp + -8, dx);
    ebx = ebp + -28;
    edx = ebp + -28;
    eax = 0x00000031;
    sub_1e39d9();
    al = memoryAGet32(ss, ebp + -4) == 0x00000000;
    eax &= 0x000000ff;
    esp = ebp;
    ebp = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e24b0() // 0160:1e24b0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000001c;
    memoryASet32(ss, ebp + -28, 0x00000100);
    eax += 0x0000000f;
    eax = sar32(eax, 0x04);
    memoryASet32(ss, ebp + -24, eax);
    ebx = ebp + -28;
    edx = ebp + -28;
    eax = 0x00000031;
    sub_1e39d9();
    if (memoryAGet32(ss, ebp + -4) == 0x00000000)
        goto loc_1e24e2;
    eax = 0;
    goto loc_1e24ed;
loc_1e24e2: // 0160:1e24e2
    eax = memoryAGet32(ss, ebp + -28);
    eax &= 0x0000ffff;
    eax <<= 4;
loc_1e24ed: // 0160:1e24ed
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e2500() // 0160:1e2500 +long
{
    esp -= 4;
    eax = sar32(eax, 0x10);
    esp += 4;
}
void sub_1e2510() // 0160:1e2510 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ebx = eax + edx;
    ecx = edx;
    ecx = -ecx;
    ebx--;
    ebx &= ecx;
    eax = ebx * 2;
    eax += edx;
    eax--;
    sub_1e24b0();
    if (!eax)
        goto loc_1e2551;
    edx += eax;
    edx--;
    edx &= ecx;
    eax = edx;
    sub_1e2500();
    ecx = eax;
    ebx += edx;
    eax = ebx + -1;
    sub_1e2500();
    if (ecx == eax)
        goto loc_1e254f;
    edx = ebx;
loc_1e254f: // 0160:1e254f
    eax = edx;
loc_1e2551: // 0160:1e2551
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e2560() // 0160:1e2560 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x000000a1;
    eax = 0;
    al = in8(dx);
    ebx = eax;
    ebx <<= 8;
    edx = 0x00000021;
    eax = 0;
    al = in8(dx);
    eax |= ebx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e2580() // 0160:1e2580 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    eax = 0;
    ax = bx;
    eax = sar32(eax, 0x08);
    edx = 0x000000a1;
    out8(dx, al);
    al = bl;
    edx = 0x00000021;
    out8(dx, al);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e25a0() // 0160:1e25a0 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    edx = 0;
    eax = 0x001234dc;
    div32(ebx);
    if (eax)
        goto loc_1e25b6;
    eax = 0x00000001;
loc_1e25b6: // 0160:1e25b6
    if (eax < 0x00010000)
        goto loc_1e25bf;
    eax = 0;
loc_1e25bf: // 0160:1e25bf
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e2600() // 0160:1e2600 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    push32(flagAsReg32());
    flags.interrupts = 0;
    al = 0x34;
    edx = 0x00000043;
    out8(dx, al);
    al = bl;
    edx = 0x00000040;
    out8(dx, al);
    eax = 0;
    ax = bx;
    eax = sar32(eax, 0x08);
    out8(dx, al);
    flagsFromReg32(pop32());
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e2690() // 0160:1e2690 +long
{
    esp -= 4;
    push32(edx);
    edx = 0x0000046c;
    edx = memoryAGet32(ds, edx);
    eax = 0x0000046c;
loc_1e269d: // 0160:1e269d
    sync();
    if (edx == memoryAGet32(ds, eax))
        goto loc_1e269d;
    edx = pop32();
    esp += 4;
}
void sub_1e26f0() // 0160:1e26f0 +long
{
    esp -= 4;
    push32(ebx);
    if ((int32_t)eax < 0)
        goto loc_1e26fa;
    if ((int32_t)eax < (int32_t)0x00000020)
        goto loc_1e26fe;
loc_1e26fa: // 0160:1e26fa
    eax = 0;
    ebx = pop32();
    esp += 4;
    return;
loc_1e26fe: // 0160:1e26fe
    eax = eax * 0x0000002c;
    ebx = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, ebx + eax + 40, edx);
    eax = 0x00000001;
    ebx = pop32();
    esp += 4;
}
void sub_1e3220() // 0160:1e3220 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = esp;
    esp -= 0x0000045c;
    esi = eax;
    sub_1e4083();
    memoryASet32(ss, ebp + -8, eax);
    ecx = esi;
    ebx = 0x00000001;
    edx = 0x00000454;
    eax = ebp + -1116;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1e325e;
    eax = 0xfffffffd;
    goto loc_1e330e;
loc_1e325e: // 0160:1e325e
    ebx = 0x00000004;
    edx = 0x0020b458;
    eax = ebp + -1116;
    sub_1e3d27();
    if (!eax)
        goto loc_1e3285;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e3285: // 0160:1e3285
    if ((int32_t)memoryAGet32(ss, ebp + -20) <= (int32_t)0x00000020)
        goto loc_1e3299;
    eax = 0xfffffffd;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e3299: // 0160:1e3299
    eax = ebp + -1108;
    sub_1e0a20();
    memoryASet32(ss, ebp + -4, eax);
    if ((int32_t)eax < 0)
        goto loc_1e330e;
    edx = memoryAGet32(ss, ebp + -1112);
    eax = 0x0020b45d;
    sub_1df820();
    edi = eax;
    if (eax)
        goto loc_1e32cf;
    eax = 0xfffffffc;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e32cf: // 0160:1e32cf
    ebx = 0;
    edx = memoryAGet32(ss, ebp + -8);
    eax = esi;
    sub_1e4237();
    ecx = esi;
    ebx = 0x00000001;
    edx = memoryAGet32(ss, ebp + -1112);
    eax = edi;
    sub_1e3b5d();
    if (eax == 0x00000001)
        goto loc_1e3302;
    eax = 0xfffffffc;
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e3302: // 0160:1e3302
    eax = memoryAGet32(ss, ebp + -4);
    memoryASet32(ds, eax * 4 + 0x316404, edi);
    eax = 0;
loc_1e330e: // 0160:1e330e
    esp = ebp;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3320() // 0160:1e3320 +long
{
    esp -= 4;
    if ((int32_t)eax >= 0)
        goto loc_1e3328;
    eax = 0;
    goto loc_1e3332;
loc_1e3328: // 0160:1e3328
    if ((int32_t)eax <= (int32_t)0x00000040)
        goto loc_1e3332;
    eax = 0x00000040;
loc_1e3332: // 0160:1e3332
    memoryASet32(ds, 0x20a4e0, eax);
    esp += 4;
}
void sub_1e3340() // 0160:1e3340 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20a4e0);
    esp += 4;
}
void sub_1e3350() // 0160:1e3350 +long
{
    esp -= 4;
    push32(edx);
    ah = 0;
    memoryASet(ds, 0x31333c, ah);
    edx = 0;
    memoryASet32(ds, 0x316400, edx);
    memoryASet32(ds, 0x20a4dc, 0x00313340);
    edx = pop32();
    esp += 4;
}
void sub_1e33c0() // 0160:1e33c0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    eax = memoryAGet32(ds, 0x20a4dc);
    if (memoryAGet32(ds, eax + 1408) != 0x00000000)
        goto loc_1e33d7;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e33d7: // 0160:1e33d7
    memoryASet32(ds, eax + 1432, 0x00000000);
    ebx = 0;
    edx = 0;
    goto loc_1e3410;
loc_1e33e7: // 0160:1e33e7
    eax++;
    eax = eax;
    edx = edx;
loc_1e33f0: // 0160:1e33f0
    ecx = memoryAGet32(ds, 0x20a4dc);
    memoryASet32(ds, ecx + edx + 1436, eax);
    ebx += 0x00000022;
    edx += 0x00000004;
    if (edx == 0x0000007c)
        goto loc_1e342d;
    eax = eax;
    edx = edx;
loc_1e3410: // 0160:1e3410
    eax = memoryAGet32(ds, 0x20a4dc);
    eax = memoryAGet32(ds, eax + 1408);
    eax += 0x00000028;
    eax += ebx;
    sub_1e09d0();
    if ((int32_t)eax >= 0)
        goto loc_1e33e7;
    eax = 0;
    goto loc_1e33f0;
loc_1e342d: // 0160:1e342d
    memoryASet(ds, 0x31333c, 0x01);
    eax = 0x00000001;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e34e6() // 0160:1e34e6 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000004;
    ebx = esp + 20;
    eax = 0x0020a52a;
    edx = memoryAGet32(ds, esp + 16);
    memoryASet32(ds, esp, ebx);
    ebx = esp;
    sub_1e43f2();
    esp += 0x00000004;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3508() // 0160:1e3508 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = eax;
    esi = memoryAGet32(ds, 0x20a724);
    if (!esi)
        goto loc_1e3559;
    if (!eax)
        goto loc_1e3559;
    edi = eax;
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    edi = ecx;
    goto loc_1e3553;
loc_1e3534: // 0160:1e3534
    eax = ecx;
    edx = ebp;
    ebx = edi;
    sub_1e4478();
    if (eax)
        goto loc_1e3550;
    if (memoryAGet(ds, ecx + edi) != 0x3d)
        goto loc_1e3550;
    eax = edi + 1;
    eax += ecx;
    goto loc_1e355b;
loc_1e3550: // 0160:1e3550
    esi += 0x00000004;
loc_1e3553: // 0160:1e3553
    ecx = memoryAGet32(ds, esi);
    if (ecx)
        goto loc_1e3534;
loc_1e3559: // 0160:1e3559
    eax = 0;
loc_1e355b: // 0160:1e355b
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3562() // 0160:1e3562 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    push(gs);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    if (!eax)
        goto loc_1e357b;
    if (eax <= 0xffffffd4)
        goto loc_1e3582;
loc_1e357b: // 0160:1e357b
    eax = 0;
    goto loc_1e3636;
loc_1e3582: // 0160:1e3582
    ebp = 0x0020a4e4;
    edi = esi + 3;
    ah = 0;
    ebx = 0;
    memoryASet(ds, esp, ah);
    di &= 0xfffc;
loc_1e3595: // 0160:1e3595
    eax = edi;
    if (edi >= 0x0000000c)
        goto loc_1e35a1;
    eax = 0x0000000c;
loc_1e35a1: // 0160:1e35a1
    if (eax <= memoryAGet32(ds, 0x20a4ec))
        goto loc_1e35c1;
    ecx = memoryAGet32(ds, 0x20a4e8);
    if (ecx)
        goto loc_1e35f9;
loc_1e35b3: // 0160:1e35b3
    memoryASet32(ds, 0x20a4ec, ecx);
    ecx = memoryAGet32(ds, 0x20a4e4);
    goto loc_1e35f9;
loc_1e35c1: // 0160:1e35c1
    ecx = 0;
    goto loc_1e35b3;
loc_1e35c5: // 0160:1e35c5
    edx = ds;
    eax = ebp;
    memoryASet32(ds, 0x20a4e8, ecx);
    edx &= 0x0000ffff;
    eax = esi;
    ebx = ecx;
    sub_1e44d0();
    ebx = eax;
    if (eax)
        goto loc_1e362c;
    eax = memoryAGet32(ds, 0x20a4ec);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= eax)
        goto loc_1e35f6;
    memoryASet32(ds, 0x20a4ec, edx);
loc_1e35f6: // 0160:1e35f6
    ecx = memoryAGet32(ds, ecx + 8);
loc_1e35f9: // 0160:1e35f9
    if (ecx)
        goto loc_1e35c5;
    if (memoryAGet(ds, esp) != 0x00)
        goto loc_1e360e;
    eax = esi;
    sub_1e4a67();
    if (eax)
        goto loc_1e3623;
loc_1e360e: // 0160:1e360e
    eax = esi;
    sub_1e4c22();
    if (!eax)
        goto loc_1e362c;
    cl = 0;
    memoryASet(ds, esp, cl);
    goto loc_1e3595;
loc_1e3623: // 0160:1e3623
    memoryASet(ds, esp, 0x01);
    goto loc_1e3595;
loc_1e362c: // 0160:1e362c
    ch = 0;
    eax = ebx;
    memoryASet(ds, 0x3164cd, ch);
loc_1e3636: // 0160:1e3636
    esp += 0x00000004;
    ebp = pop32();
    gs = pop();
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3645() // 0160:1e3645 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x20a750);
    memoryASet32(ds, 0x20a750, edx);
    if (eax)
        goto loc_1e3660;
    ah = 0x08;
    interrupt(0x21);
    eax &= 0x000000ff;
loc_1e3660: // 0160:1e3660
    edx = pop32();
    esp += 4;
}
void sub_1e3663() // 0160:1e3663 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    indirectCall(cs, memoryAGet32(ds, 0x20a4f0)); // 0160:1e3666;
    indirectCall(cs, memoryAGet32(ds, 0x20a4f4)); // 0160:1e366c;
    eax = edx;
    sub_1e367b();
    edx = pop32();
    esp += 4;
}
void sub_1e367b() // 0160:1e367b +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    indirectCall(cs, memoryAGet32(ds, 0x20a4f4)); // 0160:1e367e;
    indirectCall(cs, memoryAGet32(ds, 0x20a4f8)); // 0160:1e3684;
    eax = edx;
    goto loc_1e3977;
    // gap 742 bytes
loc_1e3977: // 0160:1e3977
    goto loc_1e399c;
    // gap 35 bytes
loc_1e399c: // 0160:1e399c
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1e4cc1();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1e3691() // 0160:1e3691 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
loc_1e3694: // 0160:1e3694
    dl = memoryAGet(ds, eax);
    dl++;
    edx &= 0x000000ff;
    if (!(memoryAGet(ds, edx + 2143784) & 0x02))
        goto loc_1e36aa;
    eax++;
    goto loc_1e3694;
loc_1e36aa: // 0160:1e36aa
    cl = memoryAGet(ds, eax);
    if (cl == 0x2b)
        goto loc_1e36b6;
    if (cl != 0x2d)
        goto loc_1e36b7;
loc_1e36b6: // 0160:1e36b6
    eax++;
loc_1e36b7: // 0160:1e36b7
    ebx = 0;
loc_1e36b9: // 0160:1e36b9
    dl = memoryAGet(ds, eax);
    dl++;
    edx &= 0x000000ff;
    if (!(memoryAGet(ds, edx + 2143784) & 0x20))
        goto loc_1e36db;
    ebx = ebx * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    ebx += edx;
    eax++;
    ebx -= 0x00000030;
    goto loc_1e36b9;
loc_1e36db: // 0160:1e36db
    if (cl != 0x2d)
        goto loc_1e36e2;
    ebx = -ebx;
loc_1e36e2: // 0160:1e36e2
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e36e8()
{
  sub_1e3760();
}

void sub_1e3760() // 0160:1e3760 +long
{
    esp -= 4;
    flags.interrupts = 1;
    esp &= 0xfffffffc;
    ebx = esp;
    memoryASet32(ds, 0x20a744, ebx);
    memoryASet32(ds, 0x20a730, ebx);
    ax = 0x0024;
    memoryASet16(ds, 0x20a73c, ax);
    ebx = 0x50484152;
    eax = 0;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x20a767, al);
    memoryASet(ds, 0x20a768, ah);
    ecx = eax;
    esi = 0;
    edi = 0x00000081;
    eax >>= 16;
    if (ax != 0x4458)
        goto loc_1e37e2;
    bl -= 0x30;
    al = bl;
    ah = 0x00;
    push32(eax);
    es = memoryAGet16(ds, 0x20a73c);
    ebx = memoryAGet32(es, 0x005c);
    ebx += 0x00000fff;
    ebx &= 0xfffff000;
    memoryASet32(ds, 0x20a730, ebx);
    ebx >>= 12;
    ax = ds;
    es = eax;
    ah = 0x4a;
    interrupt(0x21);
    eax = pop32();
    bx = ds;
    cx = 0x002c;
    goto loc_1e381a;
loc_1e37e2: // 0160:1e37e2
    if (ax != 0x4243)
        goto loc_1e381c;
    memoryASet32(ds, 0x20a4fc, edx);
    esi = edx;
    edx = memoryAGet32(ds, esi + 28);
    ebx = esp;
    ebx -= edx;
    ah = 0x4a;
    interrupt(0x21);
    bx = ds;
    memoryASet16(ds, 0x20a73c, ds);
    eax = memoryAGet32(ds, esi + 16);
    edi += eax;
    esi = 0;
    si = memoryAGet16(ds, eax + 44);
    esi <<= 4;
    cx = ds;
    al = 0x09;
    ah = 0x00;
loc_1e381a: // 0160:1e381a
    goto loc_1e3875;
loc_1e381c: // 0160:1e381c
    dx = 0x0078;
    ax = 0xff00;
    interrupt(0x21);
    if (al == 0x00)
        goto loc_1e385e;
    ax = gs;
    if (ax == 0x0000)
        goto loc_1e3839;
    memoryASet16(ds, 0x20a500, ax);
loc_1e3839: // 0160:1e3839
    ax = 0x0006;
    bx = ds;
    interrupt(0x31);
    al = 0x01;
    ah = 0x00;
    dx |= cx;
    if (!dx)
        goto loc_1e384d;
    ah = 0x01;
loc_1e384d: // 0160:1e384d
    memoryASet16(ds, 0x20a73c, es);
    cx = memoryAGet16(es, 0x002c);
    goto loc_1e3875;
loc_1e385e: // 0160:1e385e
    dx = ds;
    cx = 0x0024;
    ds = ecx;
    cx = 0x002c;
    ds = edx;
    bx = 0x0017;
    al = 0x00;
    ah = 0x00;
loc_1e3875: // 0160:1e3875
    memoryASet(ds, 0x20a75e, al);
    memoryASet(ds, 0x20a75f, ah);
    es = ebx;
    memoryASet16(es, 0x1e39bd, ds);
    memoryASet32(ds, 0x20a761, esi);
    memoryASet16(ds, 0x20a765, cx);
    push32(esi);
    es = memoryAGet16(ds, 0x20a73c);
    edx = 0x00316568;
    edx += 0x0000000f;
    dl &= 0xf0;
    ecx = 0;
    cl = memoryAGet(es, edi + -1);
    flags.direction = 0;
    al = 0x20;
    for (flags.zero = 1; ecx != 0 && flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    esi = edi + -1;
    edi = edx;
    bx = es;
    dx = ds;
    ds = ebx;
    es = edx;
    if (flags.zero)
        goto loc_1e38ca;
    ecx++;
    for (; ecx != 0; --ecx) movsb<ES_EDI, DS_ESI>();
loc_1e38ca: // 0160:1e38ca
    al = 0;
    stosb<ES_EDI>(al);
    stosb<ES_EDI>(al);
    esi = pop32();
    edi--;
    push32(edi);
    push32(edx);
    ds = memoryAGet16(es, 0x20a765);
    ebp = 0;
loc_1e38dc: // 0160:1e38dc
    eax = memoryAGet32(ds, esi);
    eax |= 0x20202020;
    if (eax != 0x37386f6e)
        goto loc_1e38f1;
    if (memoryAGet(ds, esi + 4) != 0x3d)
        goto loc_1e38f1;
    ebp++;
loc_1e38f1: // 0160:1e38f1
    al = lodsb<DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1e38f1;
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1e38dc;
    al = lodsb<DS_ESI>();
    esi++;
    esi++;
loc_1e38ff: // 0160:1e38ff
    movsb<ES_EDI, DS_ESI>();
    if (memoryAGet(ds, esi) != 0x00)
        goto loc_1e38ff;
    ds = pop();
    esi = pop32();
    ebx = esp;
    memoryASet16(ds, 0x20a75c, bp);
    memoryASet32(ds, 0x20a740, edi);
    memoryASet32(ds, 0x20a72c, ebx);
    ecx = 0x00316568;
    edi = 0x0020b800;
    ecx -= edi;
    if (memoryAGet(ds, 0x20a75e) != 0x01)
        goto loc_1e3940;
    if (ecx <= 0x00001000)
        goto loc_1e3940;
    ecx = 0x00001000;
loc_1e3940: // 0160:1e3940
    dl = cl;
    ecx >>= 2;
    eax = 0;
    for (; ecx != 0; --ecx) stosd<ES_EDI>(eax);
    cl = dl;
    cl &= 0x03;
    for (; ecx != 0; --ecx) stosb<ES_EDI>(al);
    eax = 0x00316568;
    eax += 0x0000000f;
    al &= 0xf0;
    memoryASet32(ds, 0x20a734, eax);
    memoryASet32(ds, 0x20a738, esi);
    eax = 0x000000ff;
    sub_1e4c76();
    ebp = 0;
    sub_1e4c26();
    goto loc_1e399c;
    // gap 35 bytes
loc_1e399c: // 0160:1e399c
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1e4cc1();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1e3979() // 0160:1e3979 +long
{
    esp -= 4;
    push32(edx);
    push32(eax);
    edx = 0x001e375c;
    ax = 0x3d01;
    interrupt(0x21);
    bx = ax;
    edx = pop32();
    esi = edx;
    flags.direction = 0;
loc_1e398d: // 0160:1e398d
    al = lodsb<DS_ESI>();
    if (al != 0x00)
        goto loc_1e398d;
    ecx = esi;
    ecx -= edx;
    ecx--;
    ah = 0x40;
    interrupt(0x21);
    eax = pop32();
    push32(eax);
    eax = 0x00000000;
    edx = 0x000000ff;
    sub_1e4cc1();
    eax = pop32();
    ah = 0x4c;
    interrupt(0x21);
    stop("terminating");
}
void sub_1e39c0() // 0160:1e39c0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    ebp = ebx;
    ebx = ecx;
    esi = eax;
    edi = edx;
    edx = ebp;
    sub_1e4eb6();
    eax = memoryAGet32(ss, ebp);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e39d9() // 0160:1e39d9 +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x0000000c;
    ecx = eax;
    eax = esp;
    sub_1e5294();
    eax = ecx;
    ecx = esp;
    sub_1e39c0();
    esp += 0x0000000c;
    ecx = pop32();
    esp += 4;
}
void sub_1e39f4() // 0160:1e39f4 +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    stop("disassembly failed at 160:1e39f7 ftst ");
    esp -= 0x00000018;
    memoryASet16(ss, ebp + -8, fnstsw());
    stop("disassembly failed at 160:1e3a00 fst qword ptr [ebp - 0x18]");
    ah = memoryAGet(ss, ebp + -7);
    sahf();
    if (!flags.zero)
        goto loc_1e3a23;
    al = 0x00;
loc_1e3a0b: // 0160:1e3a0b
    st(0) = fstp80();
    memoryASet64(ss, ebp + -16, fstp64());
    memoryASet32(ss, ebp + -8, eax);
    memoryASet32(ss, ebp + -4, edx);
    sub_1e52bc();
    stop("stack_below", "0160:1e3a16");
    flags.zero = esp == 0x00000008;
    flags.sign = (esp - 0x00000008) & 0x80000000;
    esp -= 0x00000008;
    goto loc_1e3b02;
loc_1e3a23: // 0160:1e3a23
    fld80(st(1));
    frndtint();
    fcomp80(st(2));
    memoryASet16(ss, ebp + -6, fnstsw());
    ah = memoryAGet(ss, ebp + -5);
    if (!stop("frndtint - cf"))
        goto loc_1e3a6e;
    al = 0x01;
    sahf();
    if (!flags.zero)
        goto loc_1e3a0b;
    ax = 0x0002;
    memoryASet16(ss, ebp + -4, ax);
    fild16(memoryAGet16(ss, ebp + -4));
    fld80(st(2));
    fprem();
    memoryASet16(ss, ebp + -4, fnstsw());
    ah = memoryAGet(ss, ebp + -3);
    flags.zero = stop("nosave");
    flags.sign = stop("nosave");
    sahf();
    ah = 0x00;
    if (stop("build_condition_failed"))
        goto loc_1e3a65;
    stop("disassembly failed at 160:1e3a54 ftst ");
    memoryASet16(ss, ebp + -4, fnstsw());
    ah = memoryAGet(ss, ebp + -3);
    flags.zero = stop("nosave");
    flags.sign = stop("nosave");
    sahf();
    ah = 0x00;
    if (flags.zero)
        goto loc_1e3a65;
    ah = 0x01;
loc_1e3a65: // 0160:1e3a65
    memoryASet(ss, ebp + -7, ah);
    st(0) = fstp80();
    st(0) = fstp80();
    goto loc_1e3a71;
loc_1e3a6e: // 0160:1e3a6e
    flags.zero = stop("nosave");
    flags.sign = stop("nosave");
    sahf();
    if (!flags.zero)
        goto loc_1e3ae3;
loc_1e3a71: // 0160:1e3a71
    fld80(st(1));
    memoryASet64(ss, ebp + -16, fstp64());
    ax = memoryAGet16(ss, ebp + -10);
    ax &= 0x7ff0;
    ax -= 0x3ff0;
    flags.sign = (short)ax < (short)0x0100;
    if (ax >= 0x0100)
        goto loc_1e3ae3;
    fld80(st(1));
    memoryASet32(ss, ebp + -4, fistp32());
    ax = memoryAGet16(ss, ebp + -2);
    if (ax)
        goto loc_1e3aa3;
    ax = memoryAGet16(ss, ebp + -4);
    sub_1e3b0d();
    stop("propagate sign flag", "0160:1e3a9c");
    goto loc_1e3ab9;
loc_1e3aa3: // 0160:1e3aa3
    flags.sign = stop("nosave");
    ax++;
    if (ax)
        goto loc_1e3ae3;
    flags.sign = (short)(ax | memoryAGet16(ss, ebp + -4)) < 0;
    ax |= memoryAGet16(ss, ebp + -4);
    if (!ax)
        goto loc_1e3ae3;
    ax = -ax;
    sub_1e3b0d();
    stop("propagate sign flag", "0160:1e3ab0");
    fld1();
    stop("disassembly failed at 160:1e3ab7 fdivrp st(1)");
loc_1e3ab9: // 0160:1e3ab9
    stop("disassembly failed at 160:1e3ab9 fst qword ptr [ebp - 8]");
    ax = memoryAGet16(ss, ebp + -8);
    ax |= memoryAGet16(ss, ebp + -6);
    flags.zero = !(ax | memoryAGet16(ss, ebp + -4));
    flags.sign = (short)(ax | memoryAGet16(ss, ebp + -4)) < 0;
    ax |= memoryAGet16(ss, ebp + -4);
    if (!flags.zero)
        goto loc_1e3adf;
    ax = memoryAGet16(ss, ebp + -2);
    ax <<= 1;
    flags.zero = ax == 0xffe0;
    flags.sign = (short)ax < (short)0xffe0;
    if (!flags.zero)
        goto loc_1e3adf;
loc_1e3ad8: // 0160:1e3ad8
    al = 0x02;
    goto loc_1e3a0b;
loc_1e3adf: // 0160:1e3adf
    st(1) = fstp80();
    goto loc_1e3b02;
loc_1e3ae3: // 0160:1e3ae3
    stop("disassembly failed at 160:1e3ae3 fldln2 ");
    fmul80(st(2));
    fxch(st(0));
    stop("disassembly failed at 160:1e3ae9 fabs ");
    stop("disassembly failed at 160:1e3aeb fyl2x ");
    al = 0x07;
    sub_1e535e();
    if (al != 0x00)
        goto loc_1e3ad8;
    ah = memoryAGet(ss, ebp + -7);
    flags.zero = stop("nosave");
    flags.sign = stop("nosave");
    sahf();
    if (!flags.carry)
        goto loc_1e3b00;
    stop("disassembly failed at 160:1e3afe fchs ");
loc_1e3b00: // 0160:1e3b00
    st(1) = fstp80();
loc_1e3b02: // 0160:1e3b02
    memoryASet64(ss, ebp + -8, fstp64());
    stop("stack_below", "0160:1e3b02");
    fld64(memoryAGet64(ss, ebp + -8));
    esp = ebp;
    ebp = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e3b0d() // 0160:1e3b0d +long +returnZero
{
    bool temp_cond0;

    esp -= 4;
loc_1e3b0d: // 0160:1e3b0d
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    ax >>= 1;
    if (stop("xxx multi precond"))
        goto loc_1e3b16;
    fmul80(st(0));
    goto loc_1e3b0d;
loc_1e3b16: // 0160:1e3b16
    if (!flags.carry)
        goto loc_1e3b2b;
    fld80(st(0));
loc_1e3b1a: // 0160:1e3b1a
    if (stop("build_condition_failed"))
        goto loc_1e3b27;
    fmul80(st(0));
    flags.carry = ax & 1;
    flags.zero = stop("nosave");
    ax >>= 1;
    if (!flags.carry)
        goto loc_1e3b25;
    fmul80(st(1));
loc_1e3b25: // 0160:1e3b25
    goto loc_1e3b1a;
loc_1e3b27: // 0160:1e3b27
    st(0) = fstp80();
    goto loc_1e3b2f;
loc_1e3b2b: // 0160:1e3b2b
    st(0) = fstp80();
    fld1();
loc_1e3b2f: // 0160:1e3b2f
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1e3b30() // 0160:1e3b30 +long +stackDrop16
{
    esp -= 4;
    fld64(memoryAGet64(ds, esp + 12));
    fld64(memoryAGet64(ds, esp + 4));
    sub_1e39f4();
    esp += 4;
    esp += 16;
}
void sub_1e3b40() // 0160:1e3b40 +long
{
    esp -= 4;
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    push32(memoryAGet32(ds, esp));
    memoryASet(ds, esp + 1, 0x1f);
    fldcw(memoryAGet16(ds, esp));
    frndtint();
    fldcw(memoryAGet16(ds, esp + 4));
    esp = esp + 8;
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e3b5d() // 0160:1e3b5d +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    push32(eax);
    push32(edx);
    ebp = ecx;
    if (memoryAGet(ds, ecx + 12) & 0x01)
        goto loc_1e3b87;
    eax = 0x00000004;
    sub_1e53d1();
    dh = memoryAGet(ds, ecx + 12);
    dh |= 0x20;
    eax = 0;
    memoryASet(ds, ecx + 12, dh);
    goto loc_1e3d20;
loc_1e3b87: // 0160:1e3b87
    ebx = (int32_t)ebx * (int32_t)edx;
    if (ebx)
        goto loc_1e3b95;
    eax = ebx;
    goto loc_1e3d20;
loc_1e3b95: // 0160:1e3b95
    if (memoryAGet32(ds, ecx + 8) != 0x00000000)
        goto loc_1e3ba2;
    eax = ebp;
    sub_1e5407();
loc_1e3ba2: // 0160:1e3ba2
    esi = 0;
    dl = memoryAGet(ss, ebp + 12);
    memoryASet32(ds, esp + 12, esi);
    if (!(dl & 0x40))
        goto loc_1e3ca1;
    memoryASet32(ds, esp + 8, ebx);
loc_1e3bb8: // 0160:1e3bb8
    edx = memoryAGet32(ss, ebp + 4);
    if (!edx)
        goto loc_1e3c13;
    ebx = memoryAGet32(ds, esp + 8);
    if (edx <= ebx)
        goto loc_1e3bc9;
    edx = ebx;
loc_1e3bc9: // 0160:1e3bc9
    edi = memoryAGet32(ds, esp + 4);
    ecx = edx;
    esi = memoryAGet32(ss, ebp);
    ebx = memoryAGet32(ds, esp + 12);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    eax = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ss, ebp);
    esi = edi + edx;
    ebx += edx;
    memoryASet32(ds, esp + 4, esi);
    memoryASet32(ds, esp + 12, ebx);
    edi = memoryAGet32(ss, ebp + 4);
    ecx += edx;
    eax -= edx;
    edi -= edx;
    memoryASet32(ss, ebp, ecx);
    memoryASet32(ds, esp + 8, eax);
    memoryASet32(ss, ebp + 4, edi);
loc_1e3c13: // 0160:1e3c13
    ecx = memoryAGet32(ds, esp + 8);
    if (!ecx)
        goto loc_1e3d15;
    if (ecx >= memoryAGet32(ss, ebp + 20))
        goto loc_1e3c2a;
    if (!(memoryAGet(ss, ebp + 13) & 0x04))
        goto loc_1e3c8d;
loc_1e3c2a: // 0160:1e3c2a
    cl = memoryAGet(ss, ebp + 13);
    ebx = memoryAGet32(ds, esp + 8);
    if (cl & 0x04)
        goto loc_1e3c43;
    if (ebx <= 0x00000200)
        goto loc_1e3c43;
    bh &= 0xfe;
    bl = 0;
loc_1e3c43: // 0160:1e3c43
    edx = memoryAGet32(ds, esp + 4);
    eax = memoryAGet32(ss, ebp + 16);
    sub_1e547e();
    if (eax != 0xffffffff)
        goto loc_1e3c5d;
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x20);
    goto loc_1e3d15;
loc_1e3c5d: // 0160:1e3c5d
    if (eax)
        goto loc_1e3c6a;
loc_1e3c61: // 0160:1e3c61
    memoryASet(ss, ebp + 12, memoryAGet(ss, ebp + 12) | 0x10);
    goto loc_1e3d15;
loc_1e3c6a: // 0160:1e3c6a
    edx = memoryAGet32(ds, esp + 4);
    ebx = memoryAGet32(ds, esp + 8);
    ecx = memoryAGet32(ds, esp + 12);
    edx += eax;
    ebx -= eax;
    ecx += eax;
    memoryASet32(ds, esp + 4, edx);
    memoryASet32(ds, esp + 8, ebx);
    memoryASet32(ds, esp + 12, ecx);
    goto loc_1e3bb8;
loc_1e3c8d: // 0160:1e3c8d
    eax = ebp;
    sub_1e5555();
    if (!eax)
        goto loc_1e3d15;
    goto loc_1e3bb8;
loc_1e3ca1: // 0160:1e3ca1
    edx = memoryAGet32(ds, esp + 4);
    ebx += edx;
loc_1e3ca7: // 0160:1e3ca7
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1e3cb8;
    eax = ebp;
    sub_1e5555();
    if (!eax)
        goto loc_1e3d15;
loc_1e3cb8: // 0160:1e3cb8
    ecx = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    ecx--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, ecx);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
    if (eax != 0x0000000d)
        goto loc_1e3cfc;
    if (memoryAGet32(ss, ebp + 4) != 0x00000000)
        goto loc_1e3ce5;
    eax = ebp;
    sub_1e5555();
    if (!eax)
        goto loc_1e3d15;
loc_1e3ce5: // 0160:1e3ce5
    edi = memoryAGet32(ss, ebp + 4);
    eax = memoryAGet32(ss, ebp);
    edi--;
    esi = eax + 1;
    memoryASet32(ss, ebp + 4, edi);
    memoryASet32(ss, ebp, esi);
    al = memoryAGet(ds, eax);
    eax &= 0x000000ff;
loc_1e3cfc: // 0160:1e3cfc
    if (eax == 0x0000001a)
        goto loc_1e3c61;
    memoryASet(ds, edx, al);
    eax = memoryAGet32(ds, esp + 12);
    eax++;
    edx++;
    memoryASet32(ds, esp + 12, eax);
    if (edx != ebx)
        goto loc_1e3ca7;
loc_1e3d15: // 0160:1e3d15
    eax = memoryAGet32(ds, esp + 12);
    esi = memoryAGet32(ds, esp);
    edx = 0;
    div32(esi);
loc_1e3d20: // 0160:1e3d20
    esp += 0x00000010;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e3d27() // 0160:1e3d27 +long
{
    esp -= 4;
    push32(ecx);
loc_1e3d28: // 0160:1e3d28
    if (ebx)
        goto loc_1e3d30;
loc_1e3d2c: // 0160:1e3d2c
    eax = 0;
    ecx = pop32();
    esp += 4;
    return;
loc_1e3d30: // 0160:1e3d30
    cl = memoryAGet(ds, eax);
    ch = memoryAGet(ds, edx);
    if (cl == ch)
        goto loc_1e3d46;
    ebx = 0;
    eax = 0;
    bl = cl;
    al = ch;
    ebx -= eax;
    eax = ebx;
    ecx = pop32();
    esp += 4;
    return;
loc_1e3d46: // 0160:1e3d46
    if (memoryAGet(ds, eax) == 0x00)
        goto loc_1e3d2c;
    eax++;
    edx++;
    ebx--;
    goto loc_1e3d28;
}
void sub_1e3d50()
{
  sub_1e561c();
}

void sub_1e3d5a() // 0160:1e3d5a +long
{
    esp -= 4;
    if (eax)
        goto loc_1e58fc;
    sub_1e59bb();
    eax = 0;
    esp += 4;
    return;
    // gap 7058 bytes
loc_1e58fc: // 0160:1e58fc
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1e5969;
    bh = memoryAGet(ds, ecx + 13);
    bh &= 0xef;
    al = memoryAGet(ds, ecx + 12);
    memoryASet(ds, ecx + 13, bh);
    if (!(al & 0x02))
        goto loc_1e59a8;
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1e59a8;
    ebx = memoryAGet32(ds, ecx + 4);
    edx = memoryAGet32(ds, ecx + 8);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1eaea4();
    if (eax != 0xffffffff)
        goto loc_1e594a;
    dl = memoryAGet(ds, ecx + 12);
    dl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, dl);
    goto loc_1e59a8;
loc_1e594a: // 0160:1e594a
    if (eax == memoryAGet32(ds, ecx + 4))
        goto loc_1e59a8;
    eax = 0x0000000c;
    sub_1e53d1();
    ah = memoryAGet(ds, ecx + 12);
    ah |= 0x20;
    esi = 0xffffffff;
    memoryASet(ds, ecx + 12, ah);
    goto loc_1e59a8;
loc_1e5969: // 0160:1e5969
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1e59a8;
    dl = memoryAGet(ds, ecx + 12);
    dl &= 0xef;
    dh = memoryAGet(ds, ecx + 13);
    memoryASet(ds, ecx + 12, dl);
    if (dh & 0x20)
        goto loc_1e59a8;
    eax = memoryAGet32(ds, ecx + 4);
    if (!eax)
        goto loc_1e5998;
    edx = eax;
    ebx = 0x00000001;
    edx = -edx;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e6986();
loc_1e5998: // 0160:1e5998
    if (eax != 0xffffffff)
        goto loc_1e59a8;
    bl = memoryAGet(ds, ecx + 12);
    bl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, bl);
loc_1e59a8: // 0160:1e59a8
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
    eax = esi;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3d6a() // 0160:1e3d6a +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = memoryAGet32(ds, eax + 8);
    edx = 0;
    dl = memoryAGet(ds, ebx);
    if (!edx)
        goto loc_1e3d80;
    ebx++;
    memoryASet32(ds, eax + 8, ebx);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e3d80: // 0160:1e3d80
    bl = memoryAGet(ds, eax + 16);
    bl |= 0x02;
    edx = 0xffffffff;
    memoryASet(ds, eax + 16, bl);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3d93() // 0160:1e3d93 +long
{
    esp -= 4;
    memoryASet32(ds, edx + 8, memoryAGet32(ds, edx + 8) - 1);
    esp += 4;
}
void sub_1e3d97() // 0160:1e3d97 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esp -= 0x00000014;
    ecx = 0x001e3d6a;
    esi = 0x001e3d93;
    memoryASet32(ds, esp + 8, eax);
    eax = esp;
    memoryASet32(ds, esp, ecx);
    memoryASet32(ds, esp + 4, esi);
    sub_1e59ef();
    esp += 0x00000014;
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e3dbe() // 0160:1e3dbe +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    esp -= 0x00000004;
    ebx = esp + 24;
    eax = memoryAGet32(ds, esp + 16);
    edx = memoryAGet32(ds, esp + 20);
    memoryASet32(ds, esp, ebx);
    ebx = esp;
    sub_1e3d97();
    esp += 0x00000004;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3de0() // 0160:1e3de0 +long
{
    esp -= 4;
    push32(eax);
    push32(ecx);
    dh = dl;
    edx <<= 8;
    dl = dh;
    edx <<= 8;
    dl = dh;
    ecx = ebx;
    sub_1e6540();
    ecx = pop32();
    eax = pop32();
    esp += 4;
}
void sub_1e3df8() // 0160:1e3df8 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(ebp);
    ebx = eax;
    ecx = memoryAGet32(ds, 0x20a4e4);
    goto loc_1e3e11;
loc_1e3e06: // 0160:1e3e06
    if (ecx > ebx)
        goto loc_1e3e0e;
    if (ebx < edx)
        goto loc_1e3e18;
loc_1e3e0e: // 0160:1e3e0e
    ecx = memoryAGet32(ds, ecx + 8);
loc_1e3e11: // 0160:1e3e11
    edx = memoryAGet32(ds, ecx + 8);
    if (edx)
        goto loc_1e3e06;
loc_1e3e18: // 0160:1e3e18
    eax = 0x0020a4e4;
    edx = ds;
    edx &= 0x0000ffff;
    eax = ebx;
    ebx = ecx;
    sub_1e4578();
    if (ecx == memoryAGet32(ds, 0x20a4e8))
        goto loc_1e3e49;
    ebp = memoryAGet32(ds, 0x20a4ec);
    edx = memoryAGet32(ds, ecx + 20);
    if (edx <= ebp)
        goto loc_1e3e49;
    memoryASet32(ds, 0x20a4ec, edx);
loc_1e3e49: // 0160:1e3e49
    ah = 0;
    memoryASet(ds, 0x3164cd, ah);
    ebp = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3e56() // 0160:1e3e56 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000004;
    edx = eax;
    eax = 0;
    al = memoryAGet(ds, edx);
    ebx = 0;
    sub_1e65e3();
    memoryASet(ds, esp, al);
    if (al == 0x72)
        goto loc_1e3e89;
    if (al == 0x77)
        goto loc_1e3e89;
    if (al == 0x61)
        goto loc_1e3e89;
    eax = 0x00000009;
    sub_1e53d1();
    eax = 0;
    goto loc_1e3f03;
loc_1e3e89: // 0160:1e3e89
    eax = ebx;
    cl = memoryAGet(ds, edx + 1);
    al |= 0x03;
    if (cl != 0x2b)
        goto loc_1e3eb6;
    ebx = eax;
    cl = memoryAGet(ds, edx + 2);
    al |= 0x40;
    if (cl == 0x62)
        goto loc_1e3eb2;
    if (cl == 0x74)
        goto loc_1e3ee9;
    flags.zero = memoryAGet32(ds, 0x20a719) == 0x00000200;
loc_1e3eb0: // 0160:1e3eb0
    if (!flags.zero)
        goto loc_1e3ee9;
loc_1e3eb2: // 0160:1e3eb2
    ebx = eax;
    goto loc_1e3ee9;
loc_1e3eb6: // 0160:1e3eb6
    ecx = ebx;
    cl |= 0x40;
    if (memoryAGet(ds, edx + 1) != 0x62)
        goto loc_1e3ecf;
    al = memoryAGet(ds, edx + 2);
    ebx = ecx;
    if (al != 0x2b)
        goto loc_1e3ee9;
    cl |= 0x03;
    goto loc_1e3ee7;
loc_1e3ecf: // 0160:1e3ecf
    if (memoryAGet(ds, edx + 1) != 0x74)
        goto loc_1e3edb;
    flags.zero = memoryAGet(ds, edx + 2) == 0x2b;
    goto loc_1e3eb0;
loc_1e3edb: // 0160:1e3edb
    if (memoryAGet32(ds, 0x20a719) != 0x00000200)
        goto loc_1e3ee9;
loc_1e3ee7: // 0160:1e3ee7
    ebx = ecx;
loc_1e3ee9: // 0160:1e3ee9
    al = memoryAGet(ds, esp);
    if (al != 0x77)
        goto loc_1e3ef5;
    bl |= 0x02;
    goto loc_1e3f01;
loc_1e3ef5: // 0160:1e3ef5
    if (al != 0x61)
        goto loc_1e3efe;
    bl |= 0x82;
    goto loc_1e3f01;
loc_1e3efe: // 0160:1e3efe
    bl |= 0x01;
loc_1e3f01: // 0160:1e3f01
    eax = ebx;
loc_1e3f03: // 0160:1e3f03
    esp += 0x00000004;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e3f0a() // 0160:1e3f0a +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    esi = eax;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xfc);
    eax = edx;
    sub_1e3e56();
    edi = memoryAGet32(ds, ecx + 12);
    edi |= eax;
    eax = 0;
    memoryASet32(ds, ecx + 12, edi);
    al = memoryAGet(ds, edx);
    sub_1e65e3();
    dl = al;
    if (al != 0x72)
        goto loc_1e3f51;
    dh = memoryAGet(ds, ecx + 12);
    eax = 0;
    if (!(dh & 0x02))
        goto loc_1e3f3f;
    eax = 0x00000002;
loc_1e3f3f: // 0160:1e3f3f
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1e3f4a;
    ah |= 0x02;
    goto loc_1e3f4d;
loc_1e3f4a: // 0160:1e3f4a
    ah |= 0x01;
loc_1e3f4d: // 0160:1e3f4d
    push32(0x00000000);
    goto loc_1e3f7e;
loc_1e3f51: // 0160:1e3f51
    al = !!(memoryAGet(ds, ecx + 12) & 0x01);
    eax &= 0x000000ff;
    eax += 0x00000021;
    if (dl != 0x61)
        goto loc_1e3f69;
    al |= 0x10;
    goto loc_1e3f6b;
loc_1e3f69: // 0160:1e3f69
    al |= 0x40;
loc_1e3f6b: // 0160:1e3f6b
    if (!(memoryAGet(ds, ecx + 12) & 0x40))
        goto loc_1e3f76;
    ah |= 0x02;
    goto loc_1e3f79;
loc_1e3f76: // 0160:1e3f76
    ah |= 0x01;
loc_1e3f79: // 0160:1e3f79
    push32(0x00000180);
loc_1e3f7e: // 0160:1e3f7e
    push32(ebx);
    push32(eax);
    push32(esi);
    sub_1e6615();
    esp += 0x00000010;
    memoryASet32(ds, ecx + 16, eax);
    if (memoryAGet32(ds, ecx + 16) != 0xffffffff)
        goto loc_1e3f9e;
    eax = ecx;
    sub_1e68e7();
    eax = 0;
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1e3f9e: // 0160:1e3f9e
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx + 8, 0x00000000);
    memoryASet32(ds, ecx + 20, 0x00000000);
    if (dl != 0x61)
        goto loc_1e3fc6;
    ebx = 0x00000002;
    eax = ecx;
    edx = 0;
    sub_1e4237();
loc_1e3fc6: // 0160:1e3fc6
    eax = ecx;
    sub_1e693e();
    eax = ecx;
    edi = pop32();
    esi = pop32();
    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e3fd2() // 0160:1e3fd2 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    esi = eax;
    eax = 0;
    sub_1e683f();
    ecx = eax;
    if (!eax)
        goto loc_1e3fea;
    eax = esi;
    sub_1e3f0a();
loc_1e3fea: // 0160:1e3fea
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e3fed() // 0160:1e3fed +long
{
    esp -= 4;
    push32(ebx);
    ebx = 0;
    sub_1e3fd2();
    ebx = pop32();
    esp += 4;
}
void sub_1e4083() // 0160:1e4083 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, eax + 16);
    sub_1e696f();
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e40af;
    ecx = memoryAGet32(ds, edx + 4);
    if (!ecx)
        goto loc_1e40af;
    if (!(memoryAGet(ds, edx + 13) & 0x10))
        goto loc_1e40ab;
    eax = ecx + ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e40ab: // 0160:1e40ab
    eax = ebx;
    eax -= ecx;
loc_1e40af: // 0160:1e40af
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e40b3() // 0160:1e40b3 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x3164d0);
loc_1e40bc: // 0160:1e40bc
    if (eax)
        goto loc_1e40c8;
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e40c8: // 0160:1e40c8
    ebx = memoryAGet32(ds, eax + 4);
    if (edx == ebx)
        goto loc_1e40d3;
    eax = memoryAGet32(ds, eax);
    goto loc_1e40bc;
loc_1e40d3: // 0160:1e40d3
    edx = 0x00000001;
    eax = ebx;
    sub_1e40e2();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e40e2() // 0160:1e40e2 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    sub_1e416c();
    edx = eax;
    eax = ebx;
    sub_1e68e7();
    eax = edx;
    ebx = pop32();
    esp += 4;
}
void sub_1e40f7() // 0160:1e40f7 +long
{
    esp -= 4;
    eax += 0x00000030;
    if ((int32_t)eax <= (int32_t)0x00000039)
        goto loc_1e4102;
    eax += 0x00000027;
loc_1e4102: // 0160:1e4102
    esp += 4;
    return;
}
void sub_1e4103() // 0160:1e4103 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    edi = edx;
    sub_1e6980();
    edx = 0x00000004;
    ebx = eax;
    esi = ecx;
    memoryASet(ds, ecx, 0x74);
    edx += ecx;
loc_1e411e: // 0160:1e411e
    eax = ebx;
    eax &= 0x0000000f;
    sub_1e40f7();
    memoryASet(ds, edx, al);
    edx--;
    ebx >>= 4;
    if (edx != esi)
        goto loc_1e411e;
    eax = edi;
    eax = sar32(eax, 0x04);
    eax &= 0x0000000f;
    memoryASet(ds, ecx + 5, 0x5f);
    sub_1e40f7();
    memoryASet(ds, ecx + 6, al);
    eax = edi;
    eax &= 0x0000000f;
    sub_1e40f7();
    memoryASet(ds, ecx + 8, 0x2e);
    memoryASet(ds, ecx + 9, 0x74);
    memoryASet(ds, ecx + 10, 0x6d);
    memoryASet(ds, ecx + 11, 0x70);
    memoryASet(ds, ecx + 12, 0x00);
    memoryASet(ds, ecx + 7, al);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e416c() // 0160:1e416c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000010;
    ecx = eax;
    edi = edx;
    if (memoryAGet32(ds, eax + 12) != 0x00000000)
        goto loc_1e4184;
    esi = 0xffffffff;
    goto loc_1e41eb;
loc_1e4184: // 0160:1e4184
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1e4197;
    eax = ecx;
    sub_1e58fc();
    esi = eax;
loc_1e4197: // 0160:1e4197
    eax = ecx;
    sub_1e4083();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e41af;
    eax = memoryAGet32(ds, ecx + 16);
    ebx = 0;
    sub_1e6986();
loc_1e41af: // 0160:1e41af
    if (!edi)
        goto loc_1e41bd;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e69c7();
    esi |= eax;
loc_1e41bd: // 0160:1e41bd
    if (!(memoryAGet(ds, ecx + 12) & 0x08))
        goto loc_1e41d2;
    eax = memoryAGet32(ds, ecx + 8);
    sub_1e3df8();
    memoryASet32(ds, ecx + 8, 0x00000000);
loc_1e41d2: // 0160:1e41d2
    if (!(memoryAGet(ds, ecx + 13) & 0x08))
        goto loc_1e41eb;
    edx = 0;
    eax = esp;
    dl = memoryAGet(ds, ecx + 25);
    sub_1e4103();
    eax = esp;
    sub_1e69f9();
loc_1e41eb: // 0160:1e41eb
    eax = esi;
    esp += 0x00000010;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e41f5() // 0160:1e41f5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) & 0xef);
    if ((int32_t)eax > (int32_t)memoryAGet32(ds, edx + 4))
        goto loc_1e4221;
    ebx = memoryAGet32(ds, edx + 8);
    ecx = memoryAGet32(ds, edx);
    ebx -= ecx;
    if ((int32_t)eax < (int32_t)ebx)
        goto loc_1e4221;
    edi = memoryAGet32(ds, edx + 4);
    esi = ecx + eax;
    edi -= eax;
    memoryASet32(ds, edx, esi);
    eax = 0;
    memoryASet32(ds, edx + 4, edi);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e4221: // 0160:1e4221
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    eax = 0x00000001;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e4237() // 0160:1e4237 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    ecx = eax;
    esi = edx;
    if (!(memoryAGet(ds, eax + 12) & 0x06))
        goto loc_1e429f;
    if (!(memoryAGet(ds, ecx + 13) & 0x10))
        goto loc_1e4270;
    eax = ecx;
    sub_1e58fc();
    if (!eax)
        goto loc_1e4284;
    if (ebx)
        goto loc_1e4267;
    if ((int32_t)esi >= 0)
        goto loc_1e4267;
loc_1e425d: // 0160:1e425d
    eax = 0x00000009;
    sub_1e53d1();
loc_1e4267: // 0160:1e4267
    eax = 0xffffffff;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e4270: // 0160:1e4270
    if (ebx != 0x00000001)
        goto loc_1e4278;
    esi -= memoryAGet32(ds, ecx + 4);
loc_1e4278: // 0160:1e4278
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
loc_1e4284: // 0160:1e4284
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) & 0xeb);
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e6986();
    if (eax != 0xffffffff)
        goto loc_1e432d;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e429f: // 0160:1e429f
    if (ebx < 0x00000001)
        goto loc_1e42ad;
    if (ebx <= 0x00000001)
        goto loc_1e42b3;
    if (ebx == 0x00000002)
        goto loc_1e4309;
    goto loc_1e425d;
loc_1e42ad: // 0160:1e42ad
    if (!ebx)
        goto loc_1e42d8;
    goto loc_1e425d;
loc_1e42b3: // 0160:1e42b3
    eax = edx;
    edx = ecx;
    edi = memoryAGet32(ds, ecx + 4);
    sub_1e41f5();
    if (!eax)
        goto loc_1e432d;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    edx -= edi;
    sub_1e6986();
    if (eax != 0xffffffff)
        goto loc_1e432d;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e42d8: // 0160:1e42d8
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e696f();
    edx = memoryAGet32(ds, ecx + 4);
    edi = esi;
    eax -= edx;
    edi -= eax;
    edx = ecx;
    eax = edi;
    sub_1e41f5();
    if (!eax)
        goto loc_1e432d;
    edx = esi;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e6986();
    if (eax != 0xffffffff)
        goto loc_1e432d;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e4309: // 0160:1e4309
    eax = memoryAGet32(ds, ecx + 8);
    dl = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx, eax);
    dl &= 0xef;
    eax = memoryAGet32(ds, ecx + 16);
    memoryASet(ds, ecx + 12, dl);
    edx = esi;
    memoryASet32(ds, ecx + 4, 0x00000000);
    sub_1e6986();
    if (eax == 0xffffffff)
        goto loc_1e432f;
loc_1e432d: // 0160:1e432d
    eax = 0;
loc_1e432f: // 0160:1e432f
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e4340() // 0160:1e4340 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    if (eax == edx)
        goto loc_1e43b4;
loc_1e4348: // 0160:1e4348
    eax = memoryAGet32(ds, ebx);
    ecx = memoryAGet32(ds, edx);
    if (ecx != eax)
        goto loc_1e43b9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1e43b4;
    eax = memoryAGet32(ds, ebx + 4);
    ecx = memoryAGet32(ds, edx + 4);
    if (ecx != eax)
        goto loc_1e43b9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1e43b4;
    eax = memoryAGet32(ds, ebx + 8);
    ecx = memoryAGet32(ds, edx + 8);
    if (ecx != eax)
        goto loc_1e43b9;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (eax)
        goto loc_1e43b4;
    eax = memoryAGet32(ds, ebx + 12);
    ecx = memoryAGet32(ds, edx + 12);
    if (ecx != eax)
        goto loc_1e43b9;
    ebx += 0x00000010;
    edx += 0x00000010;
    ecx = ~ecx;
    eax += 0xfefefeff;
    eax &= ecx;
    eax &= 0x80808080;
    if (!eax)
        goto loc_1e4348;
loc_1e43b4: // 0160:1e43b4
    eax = 0;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e43b9: // 0160:1e43b9
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1e43da;
    if (al == 0x00)
        goto loc_1e43b4;
    flags.carry = ah < ch;
    if (ah != ch)
        goto loc_1e43da;
    if (ah == 0x00)
        goto loc_1e43b4;
    eax >>= 16;
    ecx >>= 16;
    flags.carry = al < cl;
    if (al != cl)
        goto loc_1e43da;
    if (al == 0x00)
        goto loc_1e43b4;
    flags.carry = ah < ch;
loc_1e43da: // 0160:1e43da
    eax = -flags.carry;
    al |= 0x01;
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e43e1() // 0160:1e43e1 +long
{
    esp -= 4;
    push32(ebx);
    ebx = eax;
    eax = edx;
    edx = memoryAGet32(ds, ebx);
    sub_1e69fe();
    memoryASet32(ds, ebx + 16, memoryAGet32(ds, ebx + 16) + 1);
    ebx = pop32();
    esp += 4;
}
void sub_1e43f2() // 0160:1e43f2 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esi = eax;
    ebp = memoryAGet32(ds, eax + 12);
    ah = memoryAGet(ds, eax + 12);
    ecx = memoryAGet32(ds, esi + 8);
    ah &= 0xcf;
    ebp &= 0x00000030;
    memoryASet(ds, esi + 12, ah);
    if (ecx)
        goto loc_1e4415;
    eax = esi;
    sub_1e5407();
loc_1e4415: // 0160:1e4415
    cl = memoryAGet(ds, esi + 13);
    edi = 0;
    if (!(cl & 0x04))
        goto loc_1e4433;
    ch = cl;
    ch &= 0xfa;
    al = ch;
    memoryASet(ds, esi + 13, ch);
    al |= 0x01;
    edi = 0x00000001;
    memoryASet(ds, esi + 13, al);
loc_1e4433: // 0160:1e4433
    ecx = 0x001e43e1;
    eax = esi;
    sub_1e6aa2();
    edx = eax;
    if (!edi)
        goto loc_1e445d;
    ah = memoryAGet(ds, esi + 13);
    ah &= 0xfa;
    bl = ah;
    memoryASet(ds, esi + 13, ah);
    bl |= 0x04;
    eax = esi;
    memoryASet(ds, esi + 13, bl);
    sub_1e58fc();
loc_1e445d: // 0160:1e445d
    if (!(memoryAGet(ds, esi + 12) & 0x20))
        goto loc_1e4468;
    edx = 0xffffffff;
loc_1e4468: // 0160:1e4468
    edi = memoryAGet32(ds, esi + 12);
    edi |= ebp;
    eax = edx;
    memoryASet32(ds, esi + 12, edi);
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e4478() // 0160:1e4478 +long
{
    esp -= 4;
    push32(ecx);
    esp -= 0x00000004;
loc_1e447c: // 0160:1e447c
    if (ebx)
        goto loc_1e4487;
loc_1e4480: // 0160:1e4480
    eax = 0;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1e4487: // 0160:1e4487
    ch = memoryAGet(ds, edx);
    cl = memoryAGet(ds, eax);
    memoryASet(ds, esp, ch);
    if (cl < 0x41)
        goto loc_1e449b;
    if (cl > 0x5a)
        goto loc_1e449b;
    cl += 0x20;
loc_1e449b: // 0160:1e449b
    ch = memoryAGet(ds, esp);
    if (ch < 0x41)
        goto loc_1e44ae;
    if (ch > 0x5a)
        goto loc_1e44ae;
    ch += 0x20;
    memoryASet(ds, esp, ch);
loc_1e44ae: // 0160:1e44ae
    ch = memoryAGet(ds, esp);
    if (cl == ch)
        goto loc_1e44c6;
    edx = 0;
    eax = 0;
    dl = cl;
    al = ch;
    edx -= eax;
    eax = edx;
    esp += 0x00000004;
    ecx = pop32();
    esp += 4;
    return;
loc_1e44c6: // 0160:1e44c6
    if (!ch)
        goto loc_1e4480;
    eax++;
    edx++;
    ebx--;
    goto loc_1e447c;
}
void sub_1e44d0() // 0160:1e44d0 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1e451f;
    flags.carry = ((uint64_t)eax + 0x00000007) >= 0x100000000ull;
    eax += 0x00000007;
    if (flags.carry)
        goto loc_1e451f;
    al &= 0xfc;
    edx = 0x0000000c;
    flags.carry = eax < edx;
    eax -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    eax &= ecx;
    eax += edx;
    if (eax > memoryAGet32(ds, ebx + 20))
        goto loc_1e451f;
    esi = memoryAGet32(ds, ebx + 12);
    edi = memoryAGet32(ds, ebx + 16);
    if (eax > edi)
        goto loc_1e4503;
    esi = memoryAGet32(ds, ebx + 40);
    edi = 0;
loc_1e4503: // 0160:1e4503
    edx = memoryAGet32(ds, esi);
    if (eax <= edx)
        goto loc_1e4523;
    flags.carry = edi < edx;
    edi -= edx;
    flags.carry = !flags.carry;
    ecx = -flags.carry;
    edi &= ecx;
    edi += edx;
    edx = ebx + 32;
    esi = memoryAGet32(ds, esi + 8);
    if (esi != edx)
        goto loc_1e4503;
    memoryASet32(ds, ebx + 20, edi);
loc_1e451f: // 0160:1e451f
    eax = 0;
    goto loc_1e456e;
loc_1e4523: // 0160:1e4523
    edx -= eax;
    memoryASet32(ds, ebx + 16, edi);
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) + 1);
    ecx = memoryAGet32(ds, esi + 8);
    if (edx < 0x0000000c)
        goto loc_1e4551;
    edi = esi;
    edi += eax;
    memoryASet32(ds, ebx + 12, edi);
    memoryASet32(ds, edi, edx);
    memoryASet32(ds, esi, eax);
    ebx = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, ebx + 8, edi);
    ebx = ecx;
    memoryASet32(ds, ebx + 4, edi);
    goto loc_1e4566;
loc_1e4551: // 0160:1e4551
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    eax = esi;
    edi = ecx;
    esi = memoryAGet32(ds, esi + 4);
    memoryASet32(ds, esi + 8, edi);
    memoryASet32(ds, edi + 4, esi);
    memoryASet32(ds, ebx + 12, esi);
    esi = eax;
loc_1e4566: // 0160:1e4566
    memoryASet32(ds, esi, memoryAGet32(ds, esi) | 0x00000001);
    eax = esi;
    eax += 0x00000004;
loc_1e456e: // 0160:1e456e
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e4578() // 0160:1e4578 +long
{
    esp -= 4;
    goto loc_1e4578;
loc_1e4573: // 0160:1e4573
    goto loc_1e467e;
loc_1e4578: // 0160:1e4578
    push32(esi);
    push32(edi);
    push32(ecx);
    push(ds);
    ds = edx;
    if (!eax)
        goto loc_1e4573;
    esi = eax;
    esi -= 0x00000004;
    eax = memoryAGet32(ds, esi);
    if (!(al & 0x01))
        goto loc_1e4573;
    al &= 0xfe;
    edi = esi;
    edi += eax;
    if (memoryAGet32(ds, edi) & 0x00000001)
        goto loc_1e45ba;
    if (edi != memoryAGet32(ds, ebx + 12))
        goto loc_1e45a3;
    memoryASet32(ds, ebx + 12, esi);
loc_1e45a3: // 0160:1e45a3
    eax += memoryAGet32(ds, edi);
    memoryASet32(ds, esi, eax);
    push32(ebx);
    ebx = memoryAGet32(ds, edi + 4);
    edi = memoryAGet32(ds, edi + 8);
    memoryASet32(ds, ebx + 8, edi);
    memoryASet32(ds, edi + 4, ebx);
    ebx = pop32();
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) - 1);
    goto loc_1e4636;
loc_1e45ba: // 0160:1e45ba
    memoryASet32(ds, esi, eax);
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1e45d1;
    if (esi > memoryAGet32(ds, edi + 4))
        goto loc_1e4636;
    edi = memoryAGet32(ds, ebx + 40);
    if (esi < edi)
        goto loc_1e4636;
    goto loc_1e45e0;
loc_1e45d1: // 0160:1e45d1
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1e4636;
    edi = ebx + 32;
    if (esi > memoryAGet32(ds, ebx + 36))
        goto loc_1e4636;
loc_1e45e0: // 0160:1e45e0
    edx = 0;
    eax = memoryAGet32(ds, ebx + 24);
    ecx = memoryAGet32(ds, ebx + 28);
    ecx++;
    div32(ecx);
    ecx--;
    if (eax >= ecx)
        goto loc_1e4615;
    edx = memoryAGet32(ds, ebx + 24);
    edx -= ecx;
    eax += eax;
    if (edx > ecx)
        goto loc_1e45fd;
    eax = 0;
loc_1e45fd: // 0160:1e45fd
    edi = esi;
    edi += memoryAGet32(ds, esi);
loc_1e4601: // 0160:1e4601
    edx = memoryAGet32(ds, edi);
    if (!(dl & 0x01))
        goto loc_1e4636;
    if (edx == 0xffffffff)
        goto loc_1e4615;
    dl &= 0xfe;
    edi += edx;
    eax--;
    if (eax)
        goto loc_1e4601;
loc_1e4615: // 0160:1e4615
    edi = memoryAGet32(ds, ebx + 12);
    if (esi >= edi)
        goto loc_1e461f;
    edi = memoryAGet32(ds, ebx + 40);
loc_1e461f: // 0160:1e461f
    if (esi < edi)
        goto loc_1e4636;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1e4636;
    edi = memoryAGet32(ds, edi + 8);
    if (esi < edi)
        goto loc_1e4636;
    edi = memoryAGet32(ds, edi + 8);
    goto loc_1e461f;
loc_1e4636: // 0160:1e4636
    edx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, esi);
    etx = edx; edx = edi; edi = etx;
    eax = edi;
    eax += memoryAGet32(ds, edi);
    if (eax != esi)
        goto loc_1e4655;
    ecx += memoryAGet32(ds, edi);
    memoryASet32(ds, edi, ecx);
    if (esi != memoryAGet32(ds, ebx + 12))
        goto loc_1e4651;
    memoryASet32(ds, ebx + 12, edi);
loc_1e4651: // 0160:1e4651
    esi = edi;
    goto loc_1e4666;
loc_1e4655: // 0160:1e4655
    memoryASet32(ds, ebx + 28, memoryAGet32(ds, ebx + 28) + 1);
    memoryASet32(ds, esi + 8, edx);
    memoryASet32(ds, esi + 4, edi);
    memoryASet32(ds, edi + 8, esi);
    edi = edx;
    memoryASet32(ds, edi + 4, esi);
loc_1e4666: // 0160:1e4666
    memoryASet32(ds, ebx + 24, memoryAGet32(ds, ebx + 24) - 1);
    if (esi >= memoryAGet32(ds, ebx + 12))
        goto loc_1e4676;
    if (ecx <= memoryAGet32(ds, ebx + 16))
        goto loc_1e4676;
    memoryASet32(ds, ebx + 16, ecx);
loc_1e4676: // 0160:1e4676
    if (ecx <= memoryAGet32(ds, ebx + 20))
        goto loc_1e467e;
    memoryASet32(ds, ebx + 20, ecx);
loc_1e467e: // 0160:1e467e
    ds = pop();
    ecx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e4683() // 0160:1e4683 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x20a4e8);
    if (eax != edx)
        goto loc_1e4698;
    edx = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, 0x20a4e8, edx);
loc_1e4698: // 0160:1e4698
    ebx = memoryAGet32(ds, 0x20a4e4);
    if (eax != ebx)
        goto loc_1e46ab;
    edx = memoryAGet32(ds, ebx + 8);
    memoryASet32(ds, 0x20a4e4, edx);
loc_1e46ab: // 0160:1e46ab
    edx = memoryAGet32(ds, eax + 4);
    eax = memoryAGet32(ds, eax + 8);
    if (!edx)
        goto loc_1e46b8;
    memoryASet32(ds, edx + 8, eax);
loc_1e46b8: // 0160:1e46b8
    if (!eax)
        goto loc_1e46bf;
    memoryASet32(ds, eax + 4, edx);
loc_1e46bf: // 0160:1e46bf
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e46c2() // 0160:1e46c2 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    edx = memoryAGet32(ds, 0x20a4e4);
loc_1e46cd: // 0160:1e46cd
    if (!edx)
        goto loc_1e49b2;
    eax = memoryAGet32(ds, edx + 36);
    eax = memoryAGet32(ds, eax);
    ebx = memoryAGet32(ds, edx);
    eax += 0x0000002c;
    if (eax != ebx)
        goto loc_1e471b;
    ebx = edx + -8;
    eax = edx;
    ecx = memoryAGet32(ds, edx + 8);
    sub_1e4683();
    edx = ecx;
    ecx = memoryAGet32(ds, ebx + 4);
    if (ecx)
        goto loc_1e470b;
    eax = memoryAGet32(ds, ebx);
    eax >>= 16;
    di = memoryAGet16(ds, ebx);
    esi = eax;
    ah = 0x05;
    al = 0x02;
    interrupt(0x31);
    goto loc_1e46cd;
loc_1e470b: // 0160:1e470b
    eax = ecx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    goto loc_1e46cd;
loc_1e471b: // 0160:1e471b
    edx = memoryAGet32(ds, edx + 8);
    goto loc_1e46cd;
    // gap 658 bytes
loc_1e49b2: // 0160:1e49b2
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e4823() // 0160:1e4823 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, 0x20a4e4);
    ebx = 0;
    goto loc_1e4839;
loc_1e4830: // 0160:1e4830
    if (edx < eax)
        goto loc_1e483d;
    ebx = eax;
    eax = memoryAGet32(ds, eax + 8);
loc_1e4839: // 0160:1e4839
    if (eax)
        goto loc_1e4830;
loc_1e483d: // 0160:1e483d
    memoryASet32(ds, edx + 4, ebx);
    memoryASet32(ds, edx + 8, eax);
    if (!ebx)
        goto loc_1e484c;
    memoryASet32(ds, ebx + 8, edx);
    goto loc_1e4852;
loc_1e484c: // 0160:1e484c
    memoryASet32(ds, 0x20a4e4, edx);
loc_1e4852: // 0160:1e4852
    if (!eax)
        goto loc_1e4859;
    memoryASet32(ds, eax + 4, edx);
loc_1e4859: // 0160:1e4859
    ebx = edx + 32;
    eax = memoryAGet32(ds, edx);
    edx += 0x0000002c;
    memoryASet32(ds, edx + -12, 0x00000000);
    memoryASet32(ds, edx + -28, 0x00000000);
    memoryASet32(ds, edx + -20, 0x00000000);
    memoryASet32(ds, edx + -16, 0x00000000);
    memoryASet32(ds, edx + -8, ebx);
    memoryASet32(ds, edx + -4, ebx);
    eax -= 0x0000002c;
    memoryASet32(ds, edx + -32, ebx);
    memoryASet32(ds, edx, eax);
    memoryASet32(ds, edx + eax, 0xffffffff);
    eax = edx;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e4897() // 0160:1e4897 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = memoryAGet32(ds, 0x20a4e4);
    if (!edx)
        goto loc_1e48e0;
    edx = memoryAGet32(ds, edx + 36);
    ebx = memoryAGet32(ds, edx);
    ebx += edx;
    ah = memoryAGet(ds, 0x20a75e);
    ebx += 0x00000004;
    if (ah < 0x02)
        goto loc_1e48d3;
    if (ah > 0x08)
        goto loc_1e48d3;
    if (memoryAGet(ds, 0x20a760) != 0x00)
        goto loc_1e48d3;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1e48ca lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x20a730, eax);
loc_1e48d3: // 0160:1e48d3
    if (ebx != memoryAGet32(ds, 0x20a730))
        goto loc_1e48e0;
    eax = memoryAGet32(ds, edx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e48e0: // 0160:1e48e0
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e48e5() // 0160:1e48e5 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    sub_1e46c2();
    eax = memoryAGet32(ds, esp);
    eax >>= 16;
    ecx = memoryAGet32(ds, esp);
    ebx = eax;
    ah = 0x05;
    al = 0x01;
    interrupt(0x31);
    eax = -flags.carry;
    eax++;
    if (!eax)
        goto loc_1e4916;
    ax = bx;
    eax <<= 16;
    ax = cx;
    memoryASet16(ds, eax, di);
    memoryASet16(ds, eax + 2, si);
loc_1e4916: // 0160:1e4916
    if (!eax)
        goto loc_1e4933;
    ebx = memoryAGet32(ds, esp);
    edx = eax + 8;
    ebx -= 0x00000008;
    memoryASet32(ds, edx, ebx);
    memoryASet32(ds, eax + 4, 0x00000000);
    eax = edx;
    goto loc_1e49af;
loc_1e4933: // 0160:1e4933
    if (!(memoryAGet16(ds, 0x3164d6) & 0xfff0))
        goto loc_1e4948;
    memoryASet32(ds, 0x3164d4, 0x000fffff);
loc_1e4948: // 0160:1e4948
    if (memoryAGet32(ds, esp) > 0x00010000)
        goto loc_1e49ad;
    ebx = memoryAGet32(ds, 0x3164d4);
    ebx >>= 4;
    bl |= 0x01;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax < 0)
        goto loc_1e49ad;
    ebx = memoryAGet32(ds, esp);
    ebx >>= 4;
    ah = 0x48;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    ebx = eax;
    eax = edx;
    push(es);
    es = eax;
    ah = 0x49;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    es = pop();
    if ((int32_t)esi < 0)
        goto loc_1e49ad;
    ah = 0x00;
    al = 0x06;
    interrupt(0x31);
    eax = ecx;
    eax <<= 16;
    ax = dx;
    eax += 0x00000008;
    edx = memoryAGet32(ds, esp);
    memoryASet32(ds, eax + -4, esi);
    edx -= 0x00000008;
    memoryASet32(ds, eax, edx);
    goto loc_1e49af;
loc_1e49ad: // 0160:1e49ad
    eax = 0;
loc_1e49af: // 0160:1e49af
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e49b8() // 0160:1e49b8 +long
{
    esp -= 4;
    goto loc_1e49b8;
loc_1e49af: // 0160:1e49af
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1e49b8: // 0160:1e49b8
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(eax);
    if (memoryAGet32(ds, 0x20a7bc) != 0x00000000)
        goto loc_1e49cb;
loc_1e49c7: // 0160:1e49c7
    eax = 0;
    goto loc_1e49af;
loc_1e49cb: // 0160:1e49cb
    if (memoryAGet32(ds, 0x20a730) == 0xfffffffe)
        goto loc_1e49c7;
    eax = esp;
    sub_1e4bab();
    if (!eax)
        goto loc_1e49af;
    if (memoryAGet(ds, 0x20a75e) != 0x01)
        goto loc_1e49ff;
    eax = memoryAGet32(ds, esp);
    sub_1e48e5();
    ebx = eax;
    edx = eax;
    if (!eax)
        goto loc_1e4a1a;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    goto loc_1e4a1a;
loc_1e49ff: // 0160:1e49ff
    ebx = memoryAGet32(ds, esp);
    eax = 0x80004800;
    interrupt(0x21);
    ebx = -flags.carry;
    ebx = ~ebx;
    eax &= ebx;
    ecx = memoryAGet32(ds, esp);
    ecx -= 0x00000004;
    edx = eax;
    memoryASet32(ds, esp, ecx);
loc_1e4a1a: // 0160:1e4a1a
    if (!edx)
        goto loc_1e49c7;
    eax = memoryAGet32(ds, esp);
    esi = memoryAGet32(ds, esp);
    eax -= 0x00000004;
    if (eax > esi)
        goto loc_1e49c7;
    memoryASet32(ds, esp, eax);
    if (eax < 0x00000038)
        goto loc_1e49c7;
    memoryASet32(ds, edx, eax);
    eax = edx;
    sub_1e4823();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    edi = memoryAGet32(ds, edx + 24);
    memoryASet32(ds, edx + 20, 0xffffffff);
    edi++;
    eax = ebx + 4;
    memoryASet32(ds, edx + 24, edi);
    sub_1e3df8();
    eax = 0x00000001;
    goto loc_1e49af;
}
void sub_1e4a67() // 0160:1e4a67 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(ebp);
    push32(eax);
    if (memoryAGet(ds, 0x20a75e) != 0x01)
        goto loc_1e4a7f;
    if (memoryAGet(ds, 0x20a75f) == 0x00)
        goto loc_1e4a88;
loc_1e4a7f: // 0160:1e4a7f
    if (memoryAGet(ds, 0x20a75e) != 0x09)
        goto loc_1e4a95;
loc_1e4a88: // 0160:1e4a88
    eax = memoryAGet32(ds, esp);
    sub_1e49b8();
    goto loc_1e4ba2;
loc_1e4a95: // 0160:1e4a95
    if (memoryAGet32(ds, 0x20a7bc) != 0x00000000)
        goto loc_1e4aa5;
loc_1e4a9e: // 0160:1e4a9e
    eax = 0;
    goto loc_1e4ba2;
loc_1e4aa5: // 0160:1e4aa5
    if (memoryAGet32(ds, 0x20a730) == 0xfffffffe)
        goto loc_1e4a9e;
    eax = esp;
    sub_1e4bab();
    if (!eax)
        goto loc_1e4ba2;
    bl = memoryAGet(ds, 0x20a75e);
    if (bl < 0x02)
        goto loc_1e4ae3;
    if (bl > 0x08)
        goto loc_1e4ae3;
    if (memoryAGet(ds, 0x20a760) != 0x00)
        goto loc_1e4ae3;
    eax = 0;
    eax = ds;
    stop("disassembly failed at 160:1e4ada lsl eax, eax");
    eax++;
    memoryASet32(ds, 0x20a730, eax);
loc_1e4ae3: // 0160:1e4ae3
    edx = memoryAGet32(ds, esp);
    ecx = memoryAGet32(ds, 0x20a730);
    edx += ecx;
    if (edx >= ecx)
        goto loc_1e4af7;
    edx = 0xfffffffe;
loc_1e4af7: // 0160:1e4af7
    eax = edx;
    sub_1e763f();
    if (eax == 0xffffffff)
        goto loc_1e4a9e;
    ebx = eax;
    if (eax > 0xfffffff8)
        goto loc_1e4a9e;
    if (edx <= eax)
        goto loc_1e4a9e;
    edx -= eax;
    eax = edx + -4;
    memoryASet32(ds, esp, edx);
    if (eax > edx)
        goto loc_1e4a9e;
    edx = memoryAGet32(ds, 0x20a4e4);
    memoryASet32(ds, esp, eax);
    goto loc_1e4b37;
loc_1e4b25: // 0160:1e4b25
    ebp = memoryAGet32(ds, edx + 8);
    if (!ebp)
        goto loc_1e4b3b;
    if (edx > ebx)
        goto loc_1e4b34;
    if (ebx < ebp)
        goto loc_1e4b3b;
loc_1e4b34: // 0160:1e4b34
    edx = memoryAGet32(ds, edx + 8);
loc_1e4b37: // 0160:1e4b37
    if (edx)
        goto loc_1e4b25;
loc_1e4b3b: // 0160:1e4b3b
    if (!edx)
        goto loc_1e4b65;
    eax = memoryAGet32(ds, edx);
    ecx = ebx + -4;
    eax += edx;
    if (ecx != eax)
        goto loc_1e4b65;
    esi = memoryAGet32(ds, esp);
    esi += 0x00000004;
    memoryASet32(ds, esp, esi);
    memoryASet32(ds, edx, memoryAGet32(ds, edx) + esi);
    ebp = memoryAGet32(ds, esp);
    ecx = eax + ebp;
    ebx = eax;
    memoryASet32(ds, ecx, 0xffffffff);
    goto loc_1e4b84;
loc_1e4b65: // 0160:1e4b65
    if (memoryAGet32(ds, esp) < 0x00000038)
        goto loc_1e4a9e;
    eax = memoryAGet32(ds, esp);
    memoryASet32(ds, ebx, eax);
    eax = ebx;
    edx = ebx;
    sub_1e4823();
    ebx = eax;
    eax = memoryAGet32(ds, eax);
    memoryASet32(ds, esp, eax);
loc_1e4b84: // 0160:1e4b84
    eax = memoryAGet32(ds, esp);
    al |= 0x01;
    memoryASet32(ds, ebx, eax);
    memoryASet32(ds, edx + 24, memoryAGet32(ds, edx + 24) + 1);
    eax = ebx + 4;
    memoryASet32(ds, edx + 20, 0xffffffff);
    sub_1e3df8();
    eax = 0x00000001;
loc_1e4ba2: // 0160:1e4ba2
    esp += 0x00000004;
    ebp = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1e4bab() // 0160:1e4bab +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    push32(esi);
    ebx = eax;
    edx = memoryAGet32(ds, eax);
    edx += 0x00000003;
    dl &= 0xfc;
    if (edx)
        goto loc_1e4bc2;
loc_1e4bbc: // 0160:1e4bbc
    eax = 0;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e4bc2: // 0160:1e4bc2
    if (memoryAGet(ds, 0x20a75e) != 0x01)
        goto loc_1e4bd4;
    if (memoryAGet(ds, 0x20a75f) == 0x00)
        goto loc_1e4bdd;
loc_1e4bd4: // 0160:1e4bd4
    if (memoryAGet(ds, 0x20a75e) != 0x09)
        goto loc_1e4be2;
loc_1e4bdd: // 0160:1e4bdd
    edx += 0x00000008;
    goto loc_1e4be9;
loc_1e4be2: // 0160:1e4be2
    sub_1e4897();
    edx -= eax;
loc_1e4be9: // 0160:1e4be9
    memoryASet32(ds, ebx, edx);
    edx += 0x0000003c;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1e4bbc;
    esi = memoryAGet32(ds, 0x20a7c0);
    if (edx >= esi)
        goto loc_1e4c01;
    edx = esi;
    dl &= 0xfe;
loc_1e4c01: // 0160:1e4c01
    memoryASet32(ds, ebx, edx);
    edx += 0x00000fff;
    if (edx < memoryAGet32(ds, ebx))
        goto loc_1e4bbc;
    dh &= 0xf0;
    dl = 0;
    memoryASet32(ds, ebx, edx);
    al = !!(edx);
    eax &= 0x000000ff;
    esi = pop32();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e4c22() // 0160:1e4c22 +long
{
    esp -= 4;
    eax = 0;
    esp += 4;
}
void sub_1e4c26() // 0160:1e4c26 +long
{
    esp -= 4;
    push32(edx);
    push32(ebp);
    ebp = esp;
    edx = memoryAGet32(ds, 0x20a748);
    edx += 0x00000003;
    dl &= 0xfc;
    sub_1e7701();
    if (edx >= eax)
        goto loc_1e4c47;
    eax = edx;
    esp -= eax;
    eax = esp;
    goto loc_1e4c49;
loc_1e4c47: // 0160:1e4c47
    eax = 0;
loc_1e4c49: // 0160:1e4c49
    edx = memoryAGet32(ds, 0x20a748);
    eax += edx;
    memoryASet32(ds, 0x20a74c, eax);
    sub_1e770a();
    edx = memoryAGet32(ds, 0x3164dc);
    eax = memoryAGet32(ds, 0x3164d8);
    sub_1c8824();
    sub_1e3663();
    esp = ebp;
    ebp = pop32();
    edx = pop32();
    esp += 4;
}
void sub_1e4c76() // 0160:1e4c76 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push32(edx);
    push(es);
    edx = eax;
loc_1e4c7d: // 0160:1e4c7d
    esi = 0x0020b7c8;
    edi = 0x0020b7ec;
    ebx = edi;
    al = dl;
loc_1e4c8d: // 0160:1e4c8d
    if (esi >= edi)
        goto loc_1e4ca5;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1e4ca0;
    if (memoryAGet(ds, esi + 1) > al)
        goto loc_1e4ca0;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1e4ca0: // 0160:1e4ca0
    esi += 0x00000006;
    goto loc_1e4c8d;
loc_1e4ca5: // 0160:1e4ca5
    if (ebx == edi)
        goto loc_1e4cbb;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1e4cb6;
    push(ds);
    es = pop();
    push32(edx);
    switch (eax)
    {
        case 0x1e3d50: sub_1e3d50(); break;
        case 0x1e58bb: sub_1e58bb(); break;
        case 0x1eadc9: sub_1eadc9(); break;
        case 0x1e749c: sub_1e749c(); break;
        case 0x1e5600: sub_1e5600(); break;
        case 0x1e4d10: sub_1e4d10(); break;
        default:
            stop("ind 0160:1e4cb3");
    }
    edx = pop32();
loc_1e4cb6: // 0160:1e4cb6
    memoryASet(ds, ebx, 0x02);
    goto loc_1e4c7d;
loc_1e4cbb: // 0160:1e4cbb
    es = pop();
    edx = pop32();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e4cc1() // 0160:1e4cc1 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push32(ebx);
    push(es);
    dh = dl;
    dl = al;
loc_1e4cc9: // 0160:1e4cc9
    esi = 0x0020b7ec;
    edi = 0x0020b7f8;
    ebx = edi;
    al = dl;
loc_1e4cd9: // 0160:1e4cd9
    if (esi >= edi)
        goto loc_1e4cf1;
    if (memoryAGet(ds, esi) == 0x02)
        goto loc_1e4cec;
    if (al > memoryAGet(ds, esi + 1))
        goto loc_1e4cec;
    ebx = esi;
    al = memoryAGet(ds, esi + 1);
loc_1e4cec: // 0160:1e4cec
    esi += 0x00000006;
    goto loc_1e4cd9;
loc_1e4cf1: // 0160:1e4cf1
    if (ebx == edi)
        goto loc_1e4d0b;
    if (al > dh)
        goto loc_1e4d06;
    eax = memoryAGet32(ds, ebx + 2);
    if (!eax)
        goto loc_1e4d06;
    push(ds);
    es = pop();
    push32(edx);
    indirectCall(cs, eax); // 0160:1e4d03;
    edx = pop32();
loc_1e4d06: // 0160:1e4d06
    memoryASet(ds, ebx, 0x02);
    goto loc_1e4cc9;
loc_1e4d0b: // 0160:1e4d0b
    es = pop();
    ebx = pop32();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e4d10() // 0160:1e4d10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    ebx = esp;
    eax = memoryAGet32(ds, 0x20a734);
    edx = 0;
    sub_1e4dcd();
    ecx = memoryAGet32(ds, esp);
    ebp = eax + 1;
    edx = memoryAGet32(ds, 0x20a734);
    eax = ebp;
    ecx -= edx;
    eax <<= 2;
    ecx++;
    memoryASet32(ds, esp + 4, eax);
    eax += 0x00000004;
    eax += ecx;
    sub_1e3562();
    edx = eax;
    if (!eax)
        goto loc_1e4da9;
    esi = memoryAGet32(ds, 0x20a734);
    eax += ecx;
    edi = edx;
    memoryASet32(ds, 0x20a508, eax);
    push(es);
    eax = ds;
    es = eax;
    push32(edi);
    eax = ecx;
    ecx >>= 2;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsd<ES_EDI, DS_ESI>();
    cl = al;
    cl &= 0x03;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) movsb<ES_EDI, DS_ESI>();
    edi = pop32();
    es = pop();
    ecx = memoryAGet32(ds, 0x20a508);
    eax = memoryAGet32(ds, 0x20a738);
    ebx = esp;
    memoryASet32(ds, ecx, eax);
    ecx += 0x00000004;
    eax = edx;
    edx = ecx;
    esi = memoryAGet32(ds, esp + 4);
    sub_1e4dcd();
    edx = memoryAGet32(ds, 0x20a508);
    edx += esi;
    memoryASet32(ds, 0x20a504, ebp);
    memoryASet32(ds, edx, 0x00000000);
    goto loc_1e4db3;
loc_1e4da9: // 0160:1e4da9
    memoryASet32(ds, 0x20a508, eax);
    memoryASet32(ds, 0x20a504, eax);
loc_1e4db3: // 0160:1e4db3
    eax = memoryAGet32(ds, 0x20a508);
    memoryASet32(ds, 0x3164d8, ebp);
    memoryASet32(ds, 0x3164dc, eax);
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e4dcd() // 0160:1e4dcd +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = edx;
    memoryASet32(ds, esp + 4, ebx);
    ecx = 0;
loc_1e4ddc: // 0160:1e4ddc
    dl = memoryAGet(ds, eax);
    if (dl == 0x20)
        goto loc_1e4de8;
    if (dl != 0x09)
        goto loc_1e4deb;
loc_1e4de8: // 0160:1e4de8
    eax++;
    goto loc_1e4ddc;
loc_1e4deb: // 0160:1e4deb
    if (!dl)
        goto loc_1e4ea6;
    if (dl != 0x22)
        goto loc_1e4e37;
    eax++;
    memoryASet32(ds, esp, eax);
    edx = eax;
loc_1e4dfe: // 0160:1e4dfe
    bh = memoryAGet(ds, eax);
    if (bh == 0x22)
        goto loc_1e4e6c;
    if (!bh)
        goto loc_1e4e6c;
    if (bh != 0x5c)
        goto loc_1e4e23;
    bl = memoryAGet(ds, eax + 1);
    if (bl == 0x22)
        goto loc_1e4e22;
    if (bl != bh)
        goto loc_1e4e23;
loc_1e4e22: // 0160:1e4e22
    eax++;
loc_1e4e23: // 0160:1e4e23
    ebx = eax + 1;
    if (!esi)
        goto loc_1e4e33;
    al = memoryAGet(ds, eax);
    memoryASet(ds, edx, al);
    eax = ebx;
    edx++;
    goto loc_1e4dfe;
loc_1e4e33: // 0160:1e4e33
    eax = ebx;
    goto loc_1e4dfe;
loc_1e4e37: // 0160:1e4e37
    memoryASet32(ds, esp, eax);
    edx = eax;
loc_1e4e3c: // 0160:1e4e3c
    bl = memoryAGet(ds, eax);
    if (!bl)
        goto loc_1e4e6c;
    if (bl == 0x20)
        goto loc_1e4e6c;
    if (bl == 0x09)
        goto loc_1e4e6c;
    if (bl != 0x5c)
        goto loc_1e4e58;
    if (memoryAGet(ds, eax + 1) != 0x22)
        goto loc_1e4e58;
    eax++;
loc_1e4e58: // 0160:1e4e58
    ebx = eax + 1;
    if (!esi)
        goto loc_1e4e68;
    al = memoryAGet(ds, eax);
    memoryASet(ds, edx, al);
    eax = ebx;
    edx++;
    goto loc_1e4e3c;
loc_1e4e68: // 0160:1e4e68
    eax = ebx;
    goto loc_1e4e3c;
loc_1e4e6c: // 0160:1e4e6c
    ebp = eax + 1;
    edi = ecx + 1;
    if (!esi)
        goto loc_1e4e97;
    ecx <<= 2;
    ebx = esi + ecx;
    ecx = memoryAGet32(ds, esp);
    memoryASet32(ds, ebx, ecx);
    bl = memoryAGet(ds, eax);
    ecx = edi;
    if (bl)
        goto loc_1e4e8d;
    memoryASet(ds, edx, bl);
    goto loc_1e4ea6;
loc_1e4e8d: // 0160:1e4e8d
    eax = ebp;
    memoryASet(ds, edx, 0x00);
    goto loc_1e4ddc;
loc_1e4e97: // 0160:1e4e97
    dl = memoryAGet(ds, eax);
    ecx = edi;
    if (!dl)
        goto loc_1e4ea6;
    eax = ebp;
    goto loc_1e4ddc;
loc_1e4ea6: // 0160:1e4ea6
    edx = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, edx, eax);
    eax = ecx;
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e4eb6() // 0160:1e4eb6 +long
{
    esp -= 4;
    push32(ebp);
    push(es);
    push32(ebx);
    push(ds);
    push32(edx);
    sub_1e4eee();
    push(ds);
    push32(edi);
    ebp = esp;
    edi = memoryAGet32(ss, ebp + 8);
    ds = memoryAGet16(ss, ebp + 12);
    memoryASet32(ds, edi, eax);
    memoryASet32(ds, edi + 4, ebx);
    memoryASet32(ds, edi + 8, ecx);
    memoryASet32(ds, edi + 12, edx);
    memoryASet32(ds, edi + 16, esi);
    memoryASet32(ds, edi + 20, pop32());
    eax = -flags.carry;
    memoryASet32(ds, edi + 24, eax);
    eax = pop32();
    ebx = pop32();
    ebx = pop32();
    ebx = pop32();
    memoryASet16(ds, ebx + 6, ax);
    memoryASet16(ds, ebx, es);
    es = pop();
    ebp = pop32();
    esp += 4;
}
void sub_1e4eee() // 0160:1e4eee +long +returnCarry
{
    esp -= 4;
    esi = esi + esi*2;
    eax = esi + 1986452;
    push32(eax);
    es = memoryAGet16(ds, ebx);
    bp = memoryAGet16(ds, ebx + 6);
    eax = memoryAGet32(ds, edi);
    ebx = memoryAGet32(ds, edi + 4);
    ecx = memoryAGet32(ds, edi + 8);
    edx = memoryAGet32(ds, edi + 12);
    esi = memoryAGet32(ds, edi + 16);
    edi = memoryAGet32(ds, edi + 20);
    ds = ebp;
//    printf("ii %x\n", memoryAGet16(cs, pop32()));
    switch (memoryAGet16(cs, pop32()))
    {
        case 0x33cd: interrupt(0x33); break;
        case 0x10cd: interrupt(0x10); break;
        case 0x31cd: interrupt(0x31); break;
        default:
            assert(0);
    }
    esp += 4;
}
void sub_1e5294() // 0160:1e5294 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    eax = cs;
    memoryASet16(ds, edx + 2, ax);
    eax = ds;
    memoryASet16(ds, edx + 6, ax);
    eax = es;
    memoryASet16(ds, edx, ax);
    eax = ss;
    memoryASet16(ds, edx + 4, ax);
    eax = fs;
    memoryASet16(ds, edx + 8, ax);
    eax = gs;
    memoryASet16(ds, edx + 10, ax);
    edx = pop32();
    esp += 4;
}
void sub_1e52bc() // 0160:1e52bc +long +stackDrop20
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000008;
    ah = memoryAGet(ss, ebp + 24);
    if (ah > 0x01)
        goto loc_1e52fd;
    if (ah)
        goto loc_1e52f6;
    stop("disassembly failed at 160:1e52d2 fldz ");
    fcomp64(memoryAGet64(ss, ebp + 16));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1e52e6;
    ecx = 0;
    memoryASet32(ss, ebp + -24, ecx);
    memoryASet32(ss, ebp + -20, ecx);
    goto loc_1e5335;
loc_1e52e6: // 0160:1e52e6
    if (stop("sahf get flag"))
        goto loc_1e52ef;
    eax = 0x00008047;
    goto loc_1e5327;
loc_1e52ef: // 0160:1e52ef
    eax = 0x00004047;
    goto loc_1e5327;
loc_1e52f6: // 0160:1e52f6
    eax = 0x00002047;
    goto loc_1e5327;
loc_1e52fd: // 0160:1e52fd
    stop("disassembly failed at 160:1e52fd fldz ");
    fcomp64(memoryAGet64(ss, ebp + 16));
    ax = fnstsw();
    sahf();
    if (flags.carry)
        goto loc_1e5311;
    edx = 0;
    memoryASet32(ss, ebp + -24, edx);
    memoryASet32(ss, ebp + -20, edx);
    goto loc_1e5335;
loc_1e5311: // 0160:1e5311
    stop("disassembly failed at 160:1e5311 fldz ");
    fcomp64(memoryAGet64(ss, ebp + 8));
    ax = fnstsw();
    sahf();
    if (!flags.carry)
        goto loc_1e5322;
    eax = 0x00008107;
    goto loc_1e5327;
loc_1e5322: // 0160:1e5322
    eax = 0x00001107;
loc_1e5327: // 0160:1e5327
    edx = ebp + 8;
    ebx = ebp + 16;
    sub_1e771f();
    memoryASet64(ss, ebp + -24, fstp64());
loc_1e5335: // 0160:1e5335
    fld64(memoryAGet64(ss, ebp + -24));
    esp = ebp + -16;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ebp = pop32();
    esp += 4;
    esp += 20;
}
void sub_1e535e() // 0160:1e535e +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    esp -= 0x00000010;
    stop("disassembly failed at 160:1e5364 fcom qword ptr cs:[0x1e5344]");
    memoryASet16(ss, ebp + -16, fnstsw());
    ah = memoryAGet(ss, ebp + -15);
    sahf();
    if (stop("sahf get flag"))
        goto loc_1e538e;
    if (al == 0x07)
        goto loc_1e5388;
    memoryASet64(ss, ebp + -16, fstp64());
    memoryASet32(ss, ebp + -8, eax);
    memoryASet32(ss, ebp + -4, edx);
    sub_1e77fa();
    stop("stack_below", "0160:1e5383");
loc_1e5388: // 0160:1e5388
    al = 0x01;
    esp = ebp;
    ebp = pop32();
    esp += 4;
    return;
loc_1e538e: // 0160:1e538e
    stop("disassembly failed at 160:1e538e fcom qword ptr cs:[0x1e534c]");
    memoryASet16(ss, ebp + -16, fnstsw());
    ah = memoryAGet(ss, ebp + -15);
    sahf();
    if (stop("sahf get flag"))
        goto loc_1e53a4;
    stop("disassembly failed at 160:1e53a0 fldz ");
    goto loc_1e53b8;
loc_1e53a4: // 0160:1e53a4
    stop("disassembly failed at 160:1e53a4 fldl2e ");
    stop("disassembly failed at 160:1e53a6 fmulp st(1)");
    fld80(st(0));
    frndtint();
    fxch(st(0));
    stop("disassembly failed at 160:1e53ae fsub st(1)");
    stop("disassembly failed at 160:1e53b0 f2xm1 ");
    fld1();
    faddp80(st(1));
    stop("disassembly failed at 160:1e53b6 fscale ");
loc_1e53b8: // 0160:1e53b8
    st(1) = fstp80();
    al = 0x00;
    esp = ebp;
    ebp = pop32();
    esp += 4;
}
void sub_1e53cc() // 0160:1e53cc +long
{
    esp -= 4;
    eax = 0x0000000d;
    push32(edx);
    edx = eax;
    sub_1e7875();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1e53d1() // 0160:1e53d1 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1e7875();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1e53dd() // 0160:1e53dd +long
{
    esp -= 4;
    goto loc_1e53dd;
loc_1e53d1: // 0160:1e53d1
    push32(edx);
    edx = eax;
    sub_1e7875();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
    return;
loc_1e53dd: // 0160:1e53dd
    eax = 0x0000000e;
    goto loc_1e53d1;
}
void sub_1e53f4() // 0160:1e53f4 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    sub_1e787b();
    memoryASet32(ds, eax, edx);
    edx = pop32();
    esp += 4;
}
void sub_1e5407() // 0160:1e5407 +long
{
    esp -= 4;
    push32(ecx);
    push32(edx);
    edx = eax;
    sub_1e693e();
    if (memoryAGet32(ds, edx + 20) != 0x00000000)
        goto loc_1e543c;
    ah = memoryAGet(ds, edx + 13);
    if (!(ah & 0x02))
        goto loc_1e5427;
    memoryASet32(ds, edx + 20, 0x00000086);
    goto loc_1e543c;
loc_1e5427: // 0160:1e5427
    if (!(ah & 0x04))
        goto loc_1e5435;
    memoryASet32(ds, edx + 20, 0x00000001);
    goto loc_1e543c;
loc_1e5435: // 0160:1e5435
    memoryASet32(ds, edx + 20, 0x00001000);
loc_1e543c: // 0160:1e543c
    eax = memoryAGet32(ds, edx + 20);
    sub_1e3562();
    memoryASet32(ds, edx + 8, eax);
    if (eax)
        goto loc_1e546b;
    eax = edx + 24;
    cl = memoryAGet(ds, edx + 13);
    memoryASet32(ds, edx + 20, 0x00000001);
    cl &= 0xf8;
    memoryASet32(ds, edx + 8, eax);
    ch = cl;
    memoryASet(ds, edx + 13, cl);
    ch |= 0x04;
    memoryASet(ds, edx + 13, ch);
    goto loc_1e546f;
loc_1e546b: // 0160:1e546b
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x08);
loc_1e546f: // 0160:1e546f
    eax = memoryAGet32(ds, edx + 8);
    memoryASet32(ds, edx + 4, 0x00000000);
    memoryASet32(ds, edx, eax);
    edx = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e547e() // 0160:1e547e +long
{
    esp -= 4;
    push32(ecx);
    ecx = ebx;
    ebx = eax;
    ah = 0x3f;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1e549b;
    eax &= 0x0000ffff;
    sub_1e788d();
loc_1e549b: // 0160:1e549b
    ecx = pop32();
    esp += 4;
}
void sub_1e5555() // 0160:1e5555 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    if (memoryAGet32(ds, eax + 8) != 0x00000000)
        goto loc_1e5566;
    sub_1e5407();
loc_1e5566: // 0160:1e5566
    ah = memoryAGet(ds, ecx + 13);
    if (!(ah & 0x20))
        goto loc_1e557d;
    if (!(ah & 0x06))
        goto loc_1e557d;
    eax = 0x00002000;
    sub_1e59c0();
loc_1e557d: // 0160:1e557d
    edx = memoryAGet32(ds, ecx + 12);
    bl = memoryAGet(ds, ecx + 12);
    eax = memoryAGet32(ds, ecx + 8);
    bl &= 0xfb;
    memoryASet32(ds, ecx, eax);
    edx &= 0x00002400;
    memoryASet(ds, ecx + 12, bl);
    if (edx != 0x00002400)
        goto loc_1e55bd;
    ebx = memoryAGet32(ds, ecx + 16);
    if (ebx)
        goto loc_1e55bd;
    memoryASet32(ds, ecx + 4, ebx);
    sub_1e78f3();
    if (eax == 0xffffffff)
        goto loc_1e55da;
    ebx = memoryAGet32(ds, ecx);
    memoryASet(ds, ebx, al);
    memoryASet32(ds, ecx + 4, 0x00000001);
    goto loc_1e55da;
loc_1e55bd: // 0160:1e55bd
    if (!(memoryAGet(ds, ecx + 13) & 0x04))
        goto loc_1e55ca;
    ebx = 0x00000001;
    goto loc_1e55cd;
loc_1e55ca: // 0160:1e55ca
    ebx = memoryAGet32(ds, ecx + 20);
loc_1e55cd: // 0160:1e55cd
    edx = memoryAGet32(ds, ecx);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e547e();
    memoryASet32(ds, ecx + 4, eax);
loc_1e55da: // 0160:1e55da
    esi = memoryAGet32(ds, ecx + 4);
    if ((int32_t)esi > 0)
        goto loc_1e55f8;
    if (esi)
        goto loc_1e55e9;
    memoryASet(ds, ecx + 12, memoryAGet(ds, ecx + 12) | 0x10);
    goto loc_1e55f8;
loc_1e55e9: // 0160:1e55e9
    al = memoryAGet(ds, ecx + 12);
    memoryASet32(ds, ecx + 4, 0x00000000);
    al |= 0x20;
    memoryASet(ds, ecx + 12, al);
loc_1e55f8: // 0160:1e55f8
    eax = memoryAGet32(ds, ecx + 4);
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e5600() // 0160:1e5600 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = 0x001e7910;
    ebx = 0x001e7a35;
    memoryASet32(ds, 0x20a834, edx);
    memoryASet32(ds, 0x20a838, ebx);
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e561c() // 0160:1e561c +long
{
    return;
    esp -= 4;
    push(es);
    push32(ecx);
    push32(ebx);
    push32(edx);
    stop("disassembly failed at 160:1e5620 fninit ");
    push32(eax);
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    if (ah == 0x03)
        goto loc_1e562d;
    ebp++;
loc_1e562d: // 0160:1e562d
    flags.zero = !ebp;
    flags.sign = (int32_t)ebp < 0;
    if (flags.zero)
        goto loc_1e5636;
    sub_1e564c();
    stop("propagate sign flag", "0160:1e5631");
loc_1e5636: // 0160:1e5636
    stop("disassembly failed at 160:1e5637 fninit ");
    fldcw(memoryAGet16(ds, 0x20a8bc));
    stop("disassembly failed at 160:1e563f fldz ");
    stop("disassembly failed at 160:1e5641 fldz ");
    stop("disassembly failed at 160:1e5643 fldz ");
    stop("disassembly failed at 160:1e5645 fldz ");
    edx = pop32();
    ebx = pop32();
    ecx = pop32();
    es = pop();
    esp += 4;
}
void sub_1e564c() // 0160:1e564c +long +returnZero
{
    esp -= 4;
    memoryASet(ds, 0x20a50c, 0x03);
    memoryASet(ds, 0x20a7b8, 0x01);
    stop("disassembly failed at 160:1e565a smsw word ptr [0x20a7b6]");
    memoryASet16(ds, 0x20a7b6, memoryAGet16(ds, 0x20a7b6) & 0x0006);
    esp -= 0x00000008;
    stop("disassembly failed at 160:1e566d sidt [esp]");
    ebx = memoryAGet32(ds, esp + 2);
    ebx += 0x00000038;
    esp += 0x00000008;
    if (memoryAGet(ds, 0x20a760) == 0x00)
        goto loc_1e569e;
    sub_1e5717();
    es = memoryAGet16(ds, 0x20a502);
    memoryASet32(es, ebx, edx);
    memoryASet32(es, ebx + 4, ecx);
    sub_1e5781();
    goto loc_1e5716;
loc_1e569e: // 0160:1e569e
    if (memoryAGet(ds, 0x20a75e) != 0x00)
        goto loc_1e56c2;
    ax = 0x2507;
    push(ds);
    cx = cs;
    ds = ecx;
    edx = 0x1e7e40;
    interrupt(0x21);
    ds = pop();
    al = 0x04;
    ah = 0xf3;
    flags.zero = stop("nosave");
    interrupt(0x21);
    goto loc_1e5716;
loc_1e56c2: // 0160:1e56c2
    if (memoryAGet(ds, 0x20a75e) != 0x09)
        goto loc_1e56ea;
    sub_1e5717();
    memoryASet32(ds, ebx, edx);
    memoryASet32(ds, ebx + 4, ecx);
    eax = 0x00000e02;
    ebx = 0x00000004;
    ecx = memoryAGet32(ds, 0x20a4fc);
    indirectCall(cs, memoryAGet32(ds, ecx + 48)); // 0160:1e56e5;
    stop("callee must return zero", "0160:1e56e5");
    goto loc_1e5716;
loc_1e56ea: // 0160:1e56ea
    if (memoryAGet(ds, 0x20a75e) != 0x01)
        goto loc_1e5703;
    dx = memoryAGet16(ds, 0x20a500);
    eax = 0;
    sub_1eac7e();
    goto loc_1e5716;
loc_1e5703: // 0160:1e5703
    dx = 0;
    eax = 0;
    sub_1eac7e();
    flags.zero = al == 0x01;
    if (flags.zero)
        goto loc_1e5716;
    sub_1e5734();
loc_1e5716: // 0160:1e5716
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1e5717() // 0160:1e5717 +long
{
    esp -= 4;
    ecx = 0x1e7e40;
    dx = cs;
    edx <<= 16;
    dx = cx;
    cx = cs;
    cl &= 0x03;
    cx <<= 13;
    ch |= 0x8e;
    esp += 4;
}
void sub_1e5734() // 0160:1e5734 +long +returnZero
{
    bool temp_cond0;

    esp -= 4;
    cl = 0x07;
    ax = 0x2502;
    interrupt(0x21);
    memoryASet32(ds, 0x20a7b0, ebx);
    memoryASet16(ds, 0x20a7b4, es);
    temp_cond0 = stop("preCondition");
    temp_cond0 = stop("preCondition");
    cl = 0x07;
    ax = 0x2504;
    push(ds);
    push(cs);
    ds = pop();
    if (stop("xxx multi precond"))
        goto loc_1e576b;
    edx = 0x1e7dd0;
    interrupt(0x21);
    ds = pop();
    sub_1e5781();
    goto loc_1e5780;
loc_1e576b: // 0160:1e576b
    edx = 0x1e7e40;
    interrupt(0x21);
    ds = pop();
    ecx = cr0;
    ecx |= 0x00000004;
    flags.zero = !(ecx & 0xfffffffd);
    ecx &= 0xfffffffd;
    cr0 = ecx;
loc_1e5780: // 0160:1e5780
    stop("lastset.size>1");
    esp += 4;
    return;
}
void sub_1e5781() // 0160:1e5781 +long +returnZero
{
    esp -= 4;
    ebx = 0;
    edx = 0x20a770;
    ax = 0x2535;
    interrupt(0x21);
    memoryASet32(ds, 0x20a770, memoryAGet32(ds, 0x20a770) | 0x00000004);
    memoryASet32(ds, 0x20a770, memoryAGet32(ds, 0x20a770) & 0xfffffffd);
    ebx++;
    interrupt(0x21);
    esp += 4;
}
void sub_1e5880() // 0160:1e5880 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    if (memoryAGet(ds, 0x20a50d) == 0x00)
        goto loc_1e58a1;
    edx = 0x001e5877;
    ebx = 0x001e587c;
    memoryASet32(ds, 0x20a8c0, edx);
    memoryASet32(ds, 0x20a8c4, ebx);
loc_1e58a1: // 0160:1e58a1
    eax = 0;
    ax = memoryAGet16(ds, 0x20a8bc);
    sub_1eada2();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e58bb() // 0160:1e58bb +long
{
    return;
    esp -= 4;
    push32(edx);
    ah = memoryAGet(ds, 0x20a50c);
    if (ah)
        goto loc_1e58f9;
    memoryASet(ds, 0x20a50d, ah);
    eax = 0;
    push32(eax);
    stop("disassembly failed at 160:1e58cf fninit ");
    memoryASet16(ds, esp, fnstcw());
    eax = pop32();
    al = ah;
    dl = 0;
    if (al != 0x03)
        goto loc_1e58e4;
    sub_1e5880();
    dl = al;
loc_1e58e4: // 0160:1e58e4
    if (memoryAGet(ds, 0x20a75c) != 0x00)
        goto loc_1e58f9;
    memoryASet(ds, 0x20a50c, dl);
    memoryASet(ds, 0x20a50d, dl);
loc_1e58f9: // 0160:1e58f9
    edx = pop32();
    esp += 4;
}
void sub_1e58fc() // 0160:1e58fc +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ecx = eax;
    ah = memoryAGet(ds, eax + 13);
    esi = 0;
    if (!(ah & 0x10))
        goto loc_1e5969;
    bh = memoryAGet(ds, ecx + 13);
    bh &= 0xef;
    al = memoryAGet(ds, ecx + 12);
    memoryASet(ds, ecx + 13, bh);
    if (!(al & 0x02))
        goto loc_1e59a8;
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1e59a8;
    ebx = memoryAGet32(ds, ecx + 4);
    edx = memoryAGet32(ds, ecx + 8);
    eax = memoryAGet32(ds, ecx + 16);
    sub_1eaea4();
    if (eax != 0xffffffff)
        goto loc_1e594a;
    dl = memoryAGet(ds, ecx + 12);
    dl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, dl);
    goto loc_1e59a8;
loc_1e594a: // 0160:1e594a
    if (eax == memoryAGet32(ds, ecx + 4))
        goto loc_1e59a8;
    eax = 0x0000000c;
    sub_1e53d1();
    ah = memoryAGet(ds, ecx + 12);
    ah |= 0x20;
    esi = 0xffffffff;
    memoryASet(ds, ecx + 12, ah);
    goto loc_1e59a8;
loc_1e5969: // 0160:1e5969
    if (memoryAGet32(ds, ecx + 8) == 0x00000000)
        goto loc_1e59a8;
    dl = memoryAGet(ds, ecx + 12);
    dl &= 0xef;
    dh = memoryAGet(ds, ecx + 13);
    memoryASet(ds, ecx + 12, dl);
    if (dh & 0x20)
        goto loc_1e59a8;
    eax = memoryAGet32(ds, ecx + 4);
    if (!eax)
        goto loc_1e5998;
    edx = eax;
    ebx = 0x00000001;
    edx = -edx;
    eax = memoryAGet32(ds, ecx + 16);
    sub_1e6986();
loc_1e5998: // 0160:1e5998
    if (eax != 0xffffffff)
        goto loc_1e59a8;
    bl = memoryAGet(ds, ecx + 12);
    bl |= 0x20;
    esi = eax;
    memoryASet(ds, ecx + 12, bl);
loc_1e59a8: // 0160:1e59a8
    eax = memoryAGet32(ds, ecx + 8);
    memoryASet32(ds, ecx + 4, 0x00000000);
    memoryASet32(ds, ecx, eax);
    eax = esi;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e59bb() // 0160:1e59bb +long
{
    esp -= 4;
    eax = 0xffffffff;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    edx = memoryAGet32(ds, 0x3164d0);
    ebx = 0;
    goto loc_1e59e5;
loc_1e59cf: // 0160:1e59cf
    eax = memoryAGet32(ds, edx + 4);
    if (!(memoryAGet32(ds, eax + 12) & ecx))
        goto loc_1e59e3;
    ebx++;
    if (!(memoryAGet(ds, eax + 13) & 0x10))
        goto loc_1e59e3;
    sub_1e58fc();
loc_1e59e3: // 0160:1e59e3
    edx = memoryAGet32(ds, edx);
loc_1e59e5: // 0160:1e59e5
    if (edx)
        goto loc_1e59cf;
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e59c0() // 0160:1e59c0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ecx = eax;
    edx = memoryAGet32(ds, 0x3164d0);
    ebx = 0;
    goto loc_1e59e5;
loc_1e59cf: // 0160:1e59cf
    eax = memoryAGet32(ds, edx + 4);
    if (!(memoryAGet32(ds, eax + 12) & ecx))
        goto loc_1e59e3;
    ebx++;
    if (!(memoryAGet(ds, eax + 13) & 0x10))
        goto loc_1e59e3;
    sub_1e58fc();
loc_1e59e3: // 0160:1e59e3
    edx = memoryAGet32(ds, edx);
loc_1e59e5: // 0160:1e59e5
    if (edx)
        goto loc_1e59cf;
    eax = ebx;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e59ef() // 0160:1e59ef +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000008;
    esi = eax;
    memoryASet32(ds, esp, edx);
    edi = ebx;
    ah = memoryAGet(ds, eax + 16);
    edx = 0;
    ebp = 0;
    ah &= 0xfd;
    memoryASet32(ds, esp + 4, edx);
    memoryASet(ds, esi + 16, ah);
loc_1e5a0e: // 0160:1e5a0e
    ebx = memoryAGet32(ds, esp);
    ecx = ebx + 1;
    memoryASet32(ds, esp, ecx);
    bl = memoryAGet(ds, ebx);
    ebx &= 0x000000ff;
    if (!ebx)
        goto loc_1e5bf0;
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x02))
        goto loc_1e5a45;
    eax = esi;
    sub_1e5ce9();
    ebp += eax;
    goto loc_1e5bbc;
loc_1e5a45: // 0160:1e5a45
    if (ebx == 0x00000025)
        goto loc_1e5a6a;
    eax = esi;
    indirectCall(cs, memoryAGet32(ds, esi)); // 0160:1e5a4c;
    if (eax == ebx)
        goto loc_1e5bbb;
loc_1e5a56: // 0160:1e5a56
    if (memoryAGet(ds, esi + 16) & 0x02)
        goto loc_1e5bf0;
    edx = esi;
    indirectCall(cs, memoryAGet32(ds, esi + 4)); // 0160:1e5a62;
    goto loc_1e5bf0;
loc_1e5a6a: // 0160:1e5a6a
    eax = ecx;
    edx = esi;
    sub_1e5c10();
    ebx = 0;
    memoryASet32(ds, esp, eax);
    bl = memoryAGet(ds, eax);
    edx = eax;
    if (!ebx)
        goto loc_1e5a86;
    edx = eax + 1;
    memoryASet32(ds, esp, edx);
loc_1e5a86: // 0160:1e5a86
    if (ebx < 0x00000065)
        goto loc_1e5ae0;
    if (ebx <= 0x00000067)
        goto loc_1e5b62;
    if (ebx < 0x00000070)
        goto loc_1e5ac6;
    if (ebx <= 0x00000070)
        goto loc_1e5b5b;
    if (ebx < 0x00000075)
        goto loc_1e5ab8;
    if (ebx <= 0x00000075)
        goto loc_1e5b4e;
    if (ebx == 0x00000078)
        goto loc_1e5b5b;
    goto loc_1e5bbc;
loc_1e5ab8: // 0160:1e5ab8
    if (ebx == 0x00000073)
        goto loc_1e5b6d;
    goto loc_1e5bbc;
loc_1e5ac6: // 0160:1e5ac6
    if (ebx < 0x0000006e)
        goto loc_1e5ad6;
    if (ebx <= 0x0000006e)
        goto loc_1e5ba2;
    goto loc_1e5b47;
loc_1e5ad6: // 0160:1e5ad6
    if (ebx == 0x00000069)
        goto loc_1e5b3a;
    goto loc_1e5bbc;
loc_1e5ae0: // 0160:1e5ae0
    if (ebx < 0x00000058)
        goto loc_1e5b06;
    if (ebx <= 0x00000058)
        goto loc_1e5b5b;
    if (ebx < 0x00000063)
        goto loc_1e5af8;
    if (ebx <= 0x00000063)
        goto loc_1e5b85;
    goto loc_1e5b25;
loc_1e5af8: // 0160:1e5af8
    if (ebx == 0x0000005b)
        goto loc_1e5b78;
    goto loc_1e5bbc;
loc_1e5b06: // 0160:1e5b06
    if (ebx < 0x00000045)
        goto loc_1e5b17;
    if (ebx <= 0x00000045)
        goto loc_1e5b62;
    if (ebx == 0x00000047)
        goto loc_1e5b62;
    goto loc_1e5bbc;
loc_1e5b17: // 0160:1e5b17
    if (ebx == 0x00000025)
        goto loc_1e5baf;
    goto loc_1e5bbc;
loc_1e5b25: // 0160:1e5b25
    ebx = 0x0000000a;
loc_1e5b2a: // 0160:1e5b2a
    ecx = 0x00000001;
    eax = esi;
    edx = edi;
loc_1e5b33: // 0160:1e5b33
    sub_1e62f7();
    goto loc_1e5b8e;
loc_1e5b3a: // 0160:1e5b3a
    ecx = 0x00000001;
    eax = esi;
    edx = edi;
    ebx = 0;
    goto loc_1e5b33;
loc_1e5b47: // 0160:1e5b47
    ebx = 0x00000008;
    goto loc_1e5b2a;
loc_1e5b4e: // 0160:1e5b4e
    ebx = 0x0000000a;
    eax = esi;
    edx = edi;
    ecx = 0;
    goto loc_1e5b33;
loc_1e5b5b: // 0160:1e5b5b
    ebx = 0x00000010;
    goto loc_1e5b2a;
loc_1e5b62: // 0160:1e5b62
    eax = esi;
    edx = edi;
    sub_1e6019();
    goto loc_1e5b8e;
loc_1e5b6d: // 0160:1e5b6d
    eax = esi;
    edx = edi;
    sub_1e5da4();
    goto loc_1e5b8e;
loc_1e5b78: // 0160:1e5b78
    ebx = esp;
    eax = esi;
    edx = edi;
    sub_1e5f33();
    goto loc_1e5b8e;
loc_1e5b85: // 0160:1e5b85
    eax = esi;
    edx = edi;
    sub_1e5d1e();
loc_1e5b8e: // 0160:1e5b8e
    if ((int32_t)eax <= 0)
        goto loc_1e5bf0;
    dh = memoryAGet(ds, esi + 16);
    ebp += eax;
    if (!(dh & 0x01))
        goto loc_1e5bbc;
    memoryASet32(ds, esp + 4, memoryAGet32(ds, esp + 4) + 1);
    goto loc_1e5bbc;
loc_1e5ba2: // 0160:1e5ba2
    eax = esi;
    edx = edi;
    ebx = ebp;
    sub_1e5e92();
    goto loc_1e5bbc;
loc_1e5baf: // 0160:1e5baf
    eax = esi;
    indirectCall(cs, memoryAGet32(ds, esi)); // 0160:1e5bb1;
    if (eax != ebx)
        goto loc_1e5a56;
loc_1e5bbb: // 0160:1e5bbb
    ebp++;
loc_1e5bbc: // 0160:1e5bbc
    if (!(memoryAGet(ds, esi + 16) & 0x02))
        goto loc_1e5a0e;
    eax = memoryAGet32(ds, esp);
    if (memoryAGet(ds, eax) != 0x25)
        goto loc_1e5bf0;
    edx = eax + 1;
    memoryASet32(ds, esp, edx);
    eax = edx;
    edx = esi;
    sub_1e5c10();
    memoryASet32(ds, esp, eax);
    if (memoryAGet(ds, eax) != 0x6e)
        goto loc_1e5bf0;
    eax = esi;
    edx = edi;
    ebx = ebp;
    sub_1e5e92();
loc_1e5bf0: // 0160:1e5bf0
    if (memoryAGet32(ds, esp + 4) != 0x00000000)
        goto loc_1e5c04;
    if (!(memoryAGet(ds, esi + 16) & 0x02))
        goto loc_1e5c04;
    eax = 0xffffffff;
    goto loc_1e5c08;
loc_1e5c04: // 0160:1e5c04
    eax = memoryAGet32(ds, esp + 4);
loc_1e5c08: // 0160:1e5c08
    esp += 0x00000008;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e5c10() // 0160:1e5c10 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esp -= 0x00000004;
    ebx = edx;
    dl = memoryAGet(ds, edx + 16);
    dl |= 0x01;
    memoryASet32(ds, ebx + 12, 0xffffffff);
    dh = dl;
    memoryASet(ds, ebx + 16, dl);
    dh &= 0x03;
    memoryASet(ds, ebx + 16, dh);
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1e5c3f;
    ch = memoryAGet(ds, ebx + 16);
    ch &= 0xfe;
    eax++;
    memoryASet(ds, ebx + 16, ch);
loc_1e5c3f: // 0160:1e5c3f
    edx = 0;
    dl = memoryAGet(ds, eax);
    memoryASet32(ds, esp, edx);
    dl = memoryAGet(ds, esp);
    dl++;
    edx &= 0x000000ff;
    if (!(memoryAGet(ds, edx + 2143784) & 0x20))
        goto loc_1e5c82;
    edx = 0;
loc_1e5c5c: // 0160:1e5c5c
    edx = edx * 0x0000000a;
    esi = memoryAGet32(ds, esp);
    esi -= 0x00000030;
    eax++;
    edx += esi;
    esi = memoryAGet(ds, eax);
    memoryASet32(ds, esp, esi);
    cl = memoryAGet(ds, esp);
    cl++;
    esi = cl;
    if (memoryAGet(ds, esi + 2143784) & 0x20)
        goto loc_1e5c5c;
    memoryASet32(ds, ebx + 12, edx);
loc_1e5c82: // 0160:1e5c82
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl != 0x4e)
        goto loc_1e5c92;
    memoryASet(ds, ebx + 16, memoryAGet(ds, ebx + 16) | 0x08);
    goto loc_1e5c9b;
loc_1e5c92: // 0160:1e5c92
    if (cl != 0x46)
        goto loc_1e5c9d;
    memoryASet(ds, ebx + 16, memoryAGet(ds, ebx + 16) | 0x04);
loc_1e5c9b: // 0160:1e5c9b
    eax = edx;
loc_1e5c9d: // 0160:1e5c9d
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl < 0x68)
        goto loc_1e5cb7;
    if (cl <= 0x68)
        goto loc_1e5cbe;
    if (cl < 0x6c)
        goto loc_1e5ce2;
    if (cl <= 0x6c)
        goto loc_1e5ccb;
    if (cl == 0x77)
        goto loc_1e5ccb;
    goto loc_1e5ce2;
loc_1e5cb7: // 0160:1e5cb7
    if (cl == 0x4c)
        goto loc_1e5cd7;
    goto loc_1e5ce2;
loc_1e5cbe: // 0160:1e5cbe
    cl = memoryAGet(ds, ebx + 16);
    cl |= 0x10;
    eax = edx;
    memoryASet(ds, ebx + 16, cl);
    goto loc_1e5ce2;
loc_1e5ccb: // 0160:1e5ccb
    dl = memoryAGet(ds, ebx + 16);
    dl |= 0x20;
    eax++;
    memoryASet(ds, ebx + 16, dl);
    goto loc_1e5ce2;
loc_1e5cd7: // 0160:1e5cd7
    ch = memoryAGet(ds, ebx + 16);
    ch |= 0x40;
    eax = edx;
    memoryASet(ds, ebx + 16, ch);
loc_1e5ce2: // 0160:1e5ce2
    esp += 0x00000004;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e5ce9() // 0160:1e5ce9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    ebx = eax;
    ecx = 0;
loc_1e5cf1: // 0160:1e5cf1
    eax = ebx;
    indirectCall(cs, memoryAGet32(ds, ebx)); // 0160:1e5cf3;
    esi = eax;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x02))
        goto loc_1e5d0a;
    ecx++;
    goto loc_1e5cf1;
loc_1e5d0a: // 0160:1e5d0a
    if (memoryAGet(ds, ebx + 16) & 0x02)
        goto loc_1e5d17;
    eax = esi;
    edx = ebx;
    indirectCall(cs, memoryAGet32(ds, ebx + 4)); // 0160:1e5d14;
loc_1e5d17: // 0160:1e5d17
    eax = ecx;
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e5d1e() // 0160:1e5d1e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    ebx = eax;
    if (!(memoryAGet(ds, eax + 16) & 0x01))
        goto loc_1e5d62;
    cl = memoryAGet(ds, ebx + 16);
    if (!(cl & 0x04))
        goto loc_1e5d3f;
    edi = memoryAGet32(ds, edx);
    edi += 0x00000008;
    memoryASet32(ds, edx, edi);
    ecx = memoryAGet16(ds, edi + -8); es = memoryAGet32(ds, edi + -8 + 2);
    goto loc_1e5d62;
loc_1e5d3f: // 0160:1e5d3f
    if (!(cl & 0x08))
        goto loc_1e5d54;
    esi = memoryAGet32(ds, edx);
    esi += 0x00000004;
    eax = ds;
    memoryASet32(ds, edx, esi);
    es = eax;
    ecx = memoryAGet32(ds, esi + -4);
    goto loc_1e5d62;
loc_1e5d54: // 0160:1e5d54
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000004;
    eax = ds;
    memoryASet32(ds, edx, ecx);
    es = eax;
    ecx = memoryAGet32(ds, ecx + -4);
loc_1e5d62: // 0160:1e5d62
    edx = memoryAGet32(ds, ebx + 12);
    esi = 0;
    if (edx != 0xffffffff)
        goto loc_1e5d71;
    edx = 0x00000001;
loc_1e5d71: // 0160:1e5d71
    if ((int32_t)edx <= 0)
        goto loc_1e5d9c;
    eax = ebx;
    indirectCall(cs, memoryAGet32(ds, ebx)); // 0160:1e5d77;
    if (memoryAGet(ds, ebx + 16) & 0x02)
        goto loc_1e5d9c;
    esi++;
    edx--;
    if (!(memoryAGet(ds, ebx + 16) & 0x01))
        goto loc_1e5d71;
    if (!(memoryAGet(ds, ebx + 16) & 0x20))
        goto loc_1e5d96;
    memoryASet16(es, ecx, ax);
    ecx += 0x00000002;
    goto loc_1e5d71;
loc_1e5d96: // 0160:1e5d96
    memoryASet(es, ecx, al);
    ecx++;
    goto loc_1e5d71;
loc_1e5d9c: // 0160:1e5d9c
    eax = esi;
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e5da4() // 0160:1e5da4 +long
{
    esp -= 4;
    goto loc_1e5da4;
loc_1e5d9e: // 0160:1e5d9e
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e5da4: // 0160:1e5da4
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    esp -= 0x00000004;
    ebx = eax;
    if (!(memoryAGet(ds, eax + 16) & 0x20))
        goto loc_1e5dba;
    memoryASet(ds, esp, 0x02);
    goto loc_1e5dc2;
loc_1e5dba: // 0160:1e5dba
    memoryASet(ds, esp, 0x01);
loc_1e5dc2: // 0160:1e5dc2
    al = memoryAGet(ds, ebx + 16);
    if (!(al & 0x01))
        goto loc_1e5dfb;
    if (!(al & 0x04))
        goto loc_1e5dd9;
    edi = memoryAGet32(ds, edx);
    edi += 0x00000008;
    memoryASet32(ds, edx, edi);
    ecx = memoryAGet16(ds, edi + -8); es = memoryAGet32(ds, edi + -8 + 2);
    goto loc_1e5dfb;
loc_1e5dd9: // 0160:1e5dd9
    if (!(al & 0x08))
        goto loc_1e5ded;
    esi = memoryAGet32(ds, edx);
    esi += 0x00000004;
    memoryASet32(ds, edx, esi);
    edx = ds;
    es = edx;
    ecx = memoryAGet32(ds, esi + -4);
    goto loc_1e5dfb;
loc_1e5ded: // 0160:1e5ded
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000004;
    memoryASet32(ds, edx, ecx);
    edx = ds;
    es = edx;
    ecx = memoryAGet32(ds, ecx + -4);
loc_1e5dfb: // 0160:1e5dfb
    esi = 0;
loc_1e5dfd: // 0160:1e5dfd
    eax = ebx;
    indirectCall(cs, memoryAGet32(ds, ebx)); // 0160:1e5dff;
    edx = eax;
    al++;
    edi = al;
    if (!(memoryAGet(ds, edi + 2143784) & 0x02))
        goto loc_1e5e14;
    esi++;
    goto loc_1e5dfd;
loc_1e5e14: // 0160:1e5e14
    if (!(memoryAGet(ds, ebx + 16) & 0x02))
        goto loc_1e5e1e;
    esi = 0;
    goto loc_1e5e6c;
loc_1e5e1e: // 0160:1e5e1e
    edi = memoryAGet32(ds, ebx + 12);
    eax = edi + -1;
    memoryASet32(ds, ebx + 12, eax);
    if (!edi)
        goto loc_1e5e65;
loc_1e5e2b: // 0160:1e5e2b
    al = memoryAGet(ds, ebx + 16);
    esi++;
    if (!(al & 0x01))
        goto loc_1e5e49;
    if (memoryAGet(ds, esp) != 0x01)
        goto loc_1e5e3e;
    memoryASet(es, ecx, dl);
    goto loc_1e5e42;
loc_1e5e3e: // 0160:1e5e3e
    memoryASet16(es, ecx, dx);
loc_1e5e42: // 0160:1e5e42
    edx = 0;
    dl = memoryAGet(ds, esp);
    ecx += edx;
loc_1e5e49: // 0160:1e5e49
    eax = ebx;
    sub_1e6516();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e5e6c;
    al++;
    edi = al;
    if (!(memoryAGet(ds, edi + 2143784) & 0x02))
        goto loc_1e5e2b;
loc_1e5e65: // 0160:1e5e65
    eax = edx;
    edx = ebx;
    indirectCall(cs, memoryAGet32(ds, ebx + 4)); // 0160:1e5e69;
loc_1e5e6c: // 0160:1e5e6c
    if (!(memoryAGet(ds, ebx + 16) & 0x01))
        goto loc_1e5e88;
    if ((int32_t)esi <= 0)
        goto loc_1e5e88;
    if (memoryAGet(ds, esp) != 0x01)
        goto loc_1e5e82;
    memoryASet(es, ecx, 0x00);
    goto loc_1e5e88;
loc_1e5e82: // 0160:1e5e82
    memoryASet16(es, ecx, 0x0000);
loc_1e5e88: // 0160:1e5e88
    eax = esi;
    esp += 0x00000004;
    goto loc_1e5d9e;
}
void sub_1e5e92() // 0160:1e5e92 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    cl = memoryAGet(ds, eax + 16);
    if (!(cl & 0x01))
        goto loc_1e5eeb;
    if (!(cl & 0x04))
        goto loc_1e5eaf;
    edi = memoryAGet32(ds, edx);
    edi += 0x00000008;
    memoryASet32(ds, edx, edi);
    edx = memoryAGet16(ds, edi + -8); es = memoryAGet32(ds, edi + -8 + 2);
    goto loc_1e5ed4;
loc_1e5eaf: // 0160:1e5eaf
    if (!(cl & 0x08))
        goto loc_1e5ec4;
    esi = memoryAGet32(ds, edx);
    esi += 0x00000004;
    ecx = ds;
    memoryASet32(ds, edx, esi);
    es = ecx;
    edx = memoryAGet32(ds, esi + -4);
    goto loc_1e5ed4;
loc_1e5ec4: // 0160:1e5ec4
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000004;
    memoryASet32(ds, edx, ecx);
    edx = ecx;
    ecx = ds;
    es = ecx;
    edx = memoryAGet32(ds, edx + -4);
loc_1e5ed4: // 0160:1e5ed4
    ch = memoryAGet(ds, eax + 16);
    if (!(ch & 0x10))
        goto loc_1e5ee5;
    memoryASet16(es, edx, bx);
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e5ee5: // 0160:1e5ee5
    memoryASet32(es, edx, ebx);
loc_1e5eeb: // 0160:1e5eeb
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e5ef0() // 0160:1e5ef0 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    ecx = eax;
    esi = edx;
    ebx = 0x00000020;
    eax = edx;
    edx = 0;
    sub_1e3de0();
    eax = 0;
    al = memoryAGet(ds, ecx);
    ecx++;
    if (!eax)
        goto loc_1e5f2d;
loc_1e5f0e: // 0160:1e5f0e
    edx = eax;
    eax &= 0x00000007;
    edx = sar32(edx, 0x03);
    al = memoryAGet(ds, eax + 2144044);
    memoryASet(ds, edx + esi, memoryAGet(ds, edx + esi) | al);
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (!eax)
        goto loc_1e5f2d;
    ecx++;
    if (eax != 0x0000005d)
        goto loc_1e5f0e;
loc_1e5f2d: // 0160:1e5f2d
    eax = ecx;
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e5f33() // 0160:1e5f33 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000028;
    ecx = eax;
    edi = edx;
    eax = memoryAGet32(ds, ebx);
    dl = memoryAGet(ds, eax) == 0x5e;
    edx &= 0x000000ff;
    memoryASet32(ds, esp + 32, edx);
    if (!edx)
        goto loc_1e5f56;
    eax++;
    memoryASet32(ds, ebx, eax);
loc_1e5f56: // 0160:1e5f56
    edx = esp;
    eax = memoryAGet32(ds, ebx);
    sub_1e5ef0();
    memoryASet32(ds, ebx, eax);
    bl = memoryAGet(ds, ecx + 16);
    if (!(bl & 0x01))
        goto loc_1e5f9d;
    if (!(bl & 0x04))
        goto loc_1e5f7a;
    esi = memoryAGet32(ds, edi);
    esi += 0x00000008;
    memoryASet32(ds, edi, esi);
    {int tmp1 = memoryAGet16(ds, esi + -8); int tmp2 = memoryAGet32(ds, esi + -8 + 2); esi = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_1e5f9d;
loc_1e5f7a: // 0160:1e5f7a
    if (!(bl & 0x08))
        goto loc_1e5f8f;
    ebx = memoryAGet32(ds, edi);
    ebx += 0x00000004;
    eax = ds;
    memoryASet32(ds, edi, ebx);
    es = eax;
    esi = memoryAGet32(ds, ebx + -4);
    goto loc_1e5f9d;
loc_1e5f8f: // 0160:1e5f8f
    edx = memoryAGet32(ds, edi);
    edx += 0x00000004;
    eax = ds;
    memoryASet32(ds, edi, edx);
    es = eax;
    esi = memoryAGet32(ds, edx + -4);
loc_1e5f9d: // 0160:1e5f9d
    ebp = memoryAGet32(ds, esp + 32);
    edi = 0;
    ebx = memoryAGet32(ds, ecx + 12);
    memoryASet32(ds, esp + 36, edi);
loc_1e5faa: // 0160:1e5faa
    if (ebx <= 0 && stop("test, jbe"))
        goto loc_1e5ffb;
    eax = ecx;
    indirectCall(cs, memoryAGet32(ds, ecx)); // 0160:1e5fb0;
    edx = eax;
    if (memoryAGet(ds, ecx + 16) & 0x02)
        goto loc_1e5ffb;
    edi = eax;
    edx &= 0x00000007;
    edi = sar32(edi, 0x03);
    dl = memoryAGet(ds, edx + 2144044);
    edi = memoryAGet(ds, esp + edi);
    edx &= 0x000000ff;
    dl = !(edi & edx);
    edx &= 0x000000ff;
    if (edx == ebp)
        goto loc_1e5fe8;
    edx = ecx;
    indirectCall(cs, memoryAGet32(ds, ecx + 4)); // 0160:1e5fe3;
    goto loc_1e5ffb;
loc_1e5fe8: // 0160:1e5fe8
    memoryASet32(ds, esp + 36, memoryAGet32(ds, esp + 36) + 1);
    dl = memoryAGet(ds, ecx + 16);
    ebx--;
    if (!(dl & 0x01))
        goto loc_1e5faa;
    memoryASet(es, esi, al);
    esi++;
    goto loc_1e5faa;
loc_1e5ffb: // 0160:1e5ffb
    if (!(memoryAGet(ds, ecx + 16) & 0x01))
        goto loc_1e600c;
    if ((int32_t)memoryAGet32(ds, esp + 36) <= (int32_t)0x00000000)
        goto loc_1e600c;
    memoryASet(es, esi, 0x00);
loc_1e600c: // 0160:1e600c
    eax = memoryAGet32(ds, esp + 36);
    esp += 0x00000028;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e6019() // 0160:1e6019 +long
{
    esp -= 4;
    goto loc_1e6019;
loc_1e5d9e: // 0160:1e5d9e
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
    // gap 629 bytes
loc_1e6019: // 0160:1e6019
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000070;
    ecx = eax;
    memoryASet32(ds, esp + 88, edx);
    edi = 0;
    esi = esp;
    memoryASet32(ds, esp + 108, edi);
loc_1e6030: // 0160:1e6030
    eax = ecx;
    indirectCall(cs, memoryAGet32(ds, ecx)); // 0160:1e6032;
    ebp = eax;
    ebx = eax;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x02))
        goto loc_1e604e;
    memoryASet32(ds, esp + 108, memoryAGet32(ds, esp + 108) + 1);
    goto loc_1e6030;
loc_1e604e: // 0160:1e604e
    if (memoryAGet(ds, ecx + 16) & 0x02)
        goto loc_1e6239;
    eax = memoryAGet32(ds, ecx + 12);
    edx = eax + -1;
    memoryASet32(ds, ecx + 12, edx);
    if (!eax)
        goto loc_1e6232;
    if (ebp == 0x0000002b)
        goto loc_1e6073;
    if (ebp != 0x0000002d)
        goto loc_1e6091;
loc_1e6073: // 0160:1e6073
    ebp = memoryAGet32(ds, esp + 108);
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebp++;
    ebx = eax;
    memoryASet32(ds, esp + 108, ebp);
    if (eax == 0xffffffff)
        goto loc_1e6239;
loc_1e6091: // 0160:1e6091
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (memoryAGet(ds, eax + 2143784) & 0x20)
        goto loc_1e60ac;
    if (ebx != 0x0000002e)
        goto loc_1e6232;
loc_1e60ac: // 0160:1e60ac
    eax = 0;
    memoryASet32(ds, esp + 104, eax);
    memoryASet32(ds, esp + 92, eax);
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x20))
        goto loc_1e610c;
    memoryASet32(ds, esp + 92, 0x00000001);
loc_1e60d0: // 0160:1e60d0
    memoryASet(ds, esi, bl);
    al = memoryAGet(ds, ecx + 16);
    esi++;
    if (!(al & 0x10))
        goto loc_1e60e9;
    eax = memoryAGet32(ds, esp + 106) * 0x0000000a;
    ebx += eax;
    ebx -= 0x00000030;
    memoryASet16(ds, esp + 106, bx);
loc_1e60e9: // 0160:1e60e9
    eax = ecx;
    edi++;
    sub_1e6516();
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e6239;
    al++;
    eax &= 0x000000ff;
    if (memoryAGet(ds, eax + 2143784) & 0x20)
        goto loc_1e60d0;
loc_1e610c: // 0160:1e610c
    if (ebx != 0x0000002e)
        goto loc_1e61b2;
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e6239;
    if (memoryAGet32(ds, esp + 92) != 0x00000000)
        goto loc_1e6147;
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x20))
        goto loc_1e6232;
loc_1e6147: // 0160:1e6147
    edi++;
loc_1e6148: // 0160:1e6148
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x20))
        goto loc_1e616c;
    edi++;
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebx = eax;
    if (eax != 0xffffffff)
        goto loc_1e6148;
loc_1e616c: // 0160:1e616c
    if (!(memoryAGet(ds, ecx + 16) & 0x10))
        goto loc_1e61a9;
    edx = 0;
    ebp = esi;
    memoryASet32(ds, esp + 100, edx);
loc_1e617a: // 0160:1e617a
    ebp--;
    al = memoryAGet(ss, ebp);
    if (al == 0x2e)
        goto loc_1e61a0;
    al -= 0x30;
    memoryASet32(ds, esp + 96, 0x0000000a);
    memoryASet(ds, esp + 102, al);
    edx = 0;
    eax = memoryAGet32(ds, esp + 100);
    div32(memoryAGet32(ds, esp + 96));
    memoryASet32(ds, esp + 100, eax);
    goto loc_1e617a;
loc_1e61a0: // 0160:1e61a0
    eax = memoryAGet32(ds, esp + 100);
    memoryASet16(ds, esp + 104, ax);
loc_1e61a9: // 0160:1e61a9
    if (ebx == 0xffffffff)
        goto loc_1e6239;
loc_1e61b2: // 0160:1e61b2
    if (memoryAGet(ds, ecx + 16) & 0x10)
        goto loc_1e6232;
    if (ebx == 0x00000065)
        goto loc_1e61ca;
    if (ebx != 0x00000045)
        goto loc_1e6232;
loc_1e61ca: // 0160:1e61ca
    edi++;
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebp = eax;
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e6239;
    if (eax == 0x0000002b)
        goto loc_1e61e8;
    if (eax != 0x0000002d)
        goto loc_1e61fa;
loc_1e61e8: // 0160:1e61e8
    edi++;
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e6239;
loc_1e61fa: // 0160:1e61fa
    al = bl;
    al++;
    eax &= 0x000000ff;
    if (memoryAGet(ds, eax + 2143784) & 0x20)
        goto loc_1e6210;
    edi = 0;
    goto loc_1e6232;
loc_1e6210: // 0160:1e6210
    edi++;
    eax = ecx;
    memoryASet(ds, esi, bl);
    sub_1e6516();
    esi++;
    ebx = eax;
    if (eax == 0xffffffff)
        goto loc_1e6239;
    al++;
    eax &= 0x000000ff;
    if (memoryAGet(ds, eax + 2143784) & 0x20)
        goto loc_1e6210;
loc_1e6232: // 0160:1e6232
    eax = ebx;
    edx = ecx;
    indirectCall(cs, memoryAGet32(ds, ecx + 4)); // 0160:1e6236;
loc_1e6239: // 0160:1e6239
    if ((int32_t)edi <= 0)
        goto loc_1e62ec;
    edi += memoryAGet32(ds, esp + 108);
    if (!(memoryAGet(ds, ecx + 16) & 0x01))
        goto loc_1e62ec;
    memoryASet(ds, esi, 0x00);
    if (!(memoryAGet(ds, ecx + 16) & 0x10))
        goto loc_1e6264;
    if (memoryAGet(ds, esp) != 0x2d)
        goto loc_1e6270;
    memoryASet32(ds, esp + 104, -memoryAGet32(ds, esp + 104));
    goto loc_1e6270;
loc_1e6264: // 0160:1e6264
    eax = esp;
    edx = esp + 80;
    indirectCall(cs, memoryAGet32(ds, 0x20a838)); // 0160:1e626a;
loc_1e6270: // 0160:1e6270
    ah = memoryAGet(ds, ecx + 16);
    if (!(ah & 0x04))
        goto loc_1e6288;
    eax = memoryAGet32(ds, esp + 88);
    ebx = memoryAGet32(ds, eax);
    ebx += 0x00000008;
    memoryASet32(ds, eax, ebx);
    {int tmp1 = memoryAGet16(ds, ebx + -8); int tmp2 = memoryAGet32(ds, ebx + -8 + 2); ebx = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_1e62b3;
loc_1e6288: // 0160:1e6288
    if (!(ah & 0x08))
        goto loc_1e62a1;
    eax = memoryAGet32(ds, esp + 88);
    edx = memoryAGet32(ds, eax);
    edx += 0x00000004;
    memoryASet32(ds, eax, edx);
    eax = ds;
    es = eax;
    ebx = memoryAGet32(ds, edx + -4);
    goto loc_1e62b3;
loc_1e62a1: // 0160:1e62a1
    eax = memoryAGet32(ds, esp + 88);
    ebp = memoryAGet32(ds, eax);
    ebp += 0x00000004;
    memoryASet32(ds, eax, ebp);
    eax = ds;
    es = eax;
    ebx = memoryAGet32(ss, ebp + -4);
loc_1e62b3: // 0160:1e62b3
    dh = memoryAGet(ds, ecx + 16);
    if (!(dh & 0x10))
        goto loc_1e62c1;
    eax = memoryAGet32(ds, esp + 104);
    goto loc_1e62e9;
loc_1e62c1: // 0160:1e62c1
    if (dh & 0x20)
        goto loc_1e62cb;
    if (!(dh & 0x40))
        goto loc_1e62dc;
loc_1e62cb: // 0160:1e62cb
    eax = memoryAGet32(ds, esp + 80);
    memoryASet32(es, ebx, eax);
    eax = memoryAGet32(ds, esp + 84);
    memoryASet32(es, ebx + 4, eax);
    goto loc_1e62ec;
loc_1e62dc: // 0160:1e62dc
    eax = memoryAGet32(ds, esp + 80);
    edx = memoryAGet32(ds, esp + 84);
    sub_1eaf20();
loc_1e62e9: // 0160:1e62e9
    memoryASet32(es, ebx, eax);
loc_1e62ec: // 0160:1e62ec
    eax = edi;
    esp += 0x00000070;
    ebp = pop32();
    goto loc_1e5d9e;
}
void sub_1e62f7() // 0160:1e62f7 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000010;
    esi = eax;
    memoryASet32(ds, esp + 12, edx);
    edi = ebx;
    memoryASet32(ds, esp + 4, ecx);
    edx = 0;
    ebx = 0;
    ebp = 0;
    memoryASet32(ds, esp + 8, edx);
loc_1e6314: // 0160:1e6314
    eax = esi;
    switch (memoryAGet32(ds, esi))
    {
        case 0x1e3d6a: sub_1e3d6a(); break;
        default:
            stop("ind 0160:1e6316");
    }
    edx = eax;
    al++;
    eax &= 0x000000ff;
    if (!(memoryAGet(ds, eax + 2143784) & 0x02))
        goto loc_1e632d;
    ebp++;
    goto loc_1e6314;
loc_1e632d: // 0160:1e632d
    if (memoryAGet(ds, esi + 16) & 0x02)
        goto loc_1e646d;
    eax = memoryAGet32(ds, esi + 12);
    ecx = eax + -1;
    memoryASet32(ds, esi + 12, ecx);
    if (!eax)
        goto loc_1e6466;
    ecx = 0x0000002b;
    eax = memoryAGet32(ds, esp + 4);
    memoryASet32(ds, esp, ecx);
    if (!eax)
        goto loc_1e6378;
    if (edx == 0x0000002b)
        goto loc_1e6362;
    if (edx != 0x0000002d)
        goto loc_1e6378;
loc_1e6362: // 0160:1e6362
    memoryASet32(ds, esp, edx);
    eax = esi;
    ebp++;
    sub_1e6516();
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
loc_1e6378: // 0160:1e6378
    if (edi)
        goto loc_1e63d0;
    if (edx != 0x00000030)
        goto loc_1e63c9;
    eax = esi;
    ebx = 0x00000001;
    sub_1e6516();
    ecx = eax;
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
    if (eax == 0x00000078)
        goto loc_1e63a4;
    if (eax != 0x00000058)
        goto loc_1e63c2;
loc_1e63a4: // 0160:1e63a4
    eax = esi;
    ebp += 0x00000002;
    sub_1e6516();
    ebx = 0;
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
    edi = 0x00000010;
    goto loc_1e6410;
loc_1e63c2: // 0160:1e63c2
    edi = 0x00000008;
    goto loc_1e6410;
loc_1e63c9: // 0160:1e63c9
    edi = 0x0000000a;
    goto loc_1e6410;
loc_1e63d0: // 0160:1e63d0
    if (edi != 0x00000010)
        goto loc_1e6410;
    if (edx != 0x00000030)
        goto loc_1e6410;
    eax = esi;
    ebx = 0x00000001;
    sub_1e6516();
    ecx = eax;
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
    if (eax == 0x00000078)
        goto loc_1e63fd;
    if (eax != 0x00000058)
        goto loc_1e6410;
loc_1e63fd: // 0160:1e63fd
    eax = esi;
    ebp += 0x00000002;
    sub_1e6516();
    ebx = 0;
loc_1e6409: // 0160:1e6409
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
loc_1e6410: // 0160:1e6410
    eax = edx;
    sub_1e64ef();
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1e6432;
    edx = memoryAGet32(ds, esp + 8);
    edx = (int32_t)edx * (int32_t)edi;
    ebx++;
    edx += eax;
    eax = esi;
    memoryASet32(ds, esp + 8, edx);
    sub_1e6516();
    goto loc_1e6409;
loc_1e6432: // 0160:1e6432
    if (edx != 0x0000003a)
        goto loc_1e6466;
    if (!(memoryAGet(ds, esi + 16) & 0x80))
        goto loc_1e6466;
loc_1e643d: // 0160:1e643d
    eax = esi;
    ebx++;
    sub_1e6516();
    ecx = eax;
    edx = eax;
    if (eax == 0xffffffff)
        goto loc_1e646d;
    sub_1e64ef();
    if ((int32_t)eax >= (int32_t)edi)
        goto loc_1e6466;
    edx = memoryAGet32(ds, esp + 8);
    edx = (int32_t)edx * (int32_t)edi;
    edx += eax;
    memoryASet32(ds, esp + 8, edx);
    goto loc_1e643d;
loc_1e6466: // 0160:1e6466
    eax = edx;
    edx = esi;
    switch (memoryAGet32(ds, esi + 4))
    {
        case 0x1e3d93: sub_1e3d93(); break;
        default:
            stop("ind 0160:1e646a");
    }
loc_1e646d: // 0160:1e646d
    if (memoryAGet32(ds, esp) != 0x0000002d)
        goto loc_1e6477;
    memoryASet32(ds, esp + 8, -memoryAGet32(ds, esp + 8));
loc_1e6477: // 0160:1e6477
    if ((int32_t)ebx <= 0)
        goto loc_1e64e5;
    ah = memoryAGet(ds, esi + 16);
    ebx += ebp;
    if (!(ah & 0x01))
        goto loc_1e64e5;
    if (!(ah & 0x04))
        goto loc_1e649e;
    eax = memoryAGet32(ds, esp + 12);
    edx = memoryAGet32(ds, eax);
    edx += 0x00000008;
    memoryASet32(ds, eax, edx);
    eax = memoryAGet16(ds, edx + -8); es = memoryAGet32(ds, edx + -8 + 2);
    goto loc_1e64c9;
loc_1e649e: // 0160:1e649e
    if (!(ah & 0x08))
        goto loc_1e64b7;
    eax = memoryAGet32(ds, esp + 12);
    ebp = memoryAGet32(ds, eax);
    ebp += 0x00000004;
    edx = ds;
    memoryASet32(ds, eax, ebp);
    es = edx;
    eax = memoryAGet32(ss, ebp + -4);
    goto loc_1e64c9;
loc_1e64b7: // 0160:1e64b7
    eax = memoryAGet32(ds, esp + 12);
    edi = memoryAGet32(ds, eax);
    edi += 0x00000004;
    edx = ds;
    memoryASet32(ds, eax, edi);
    es = edx;
    eax = memoryAGet32(ds, edi + -4);
loc_1e64c9: // 0160:1e64c9
    cl = memoryAGet(ds, esi + 16);
    if (!(cl & 0x10))
        goto loc_1e64db;
    edx = memoryAGet32(ds, esp + 8);
    memoryASet16(es, eax, dx);
    goto loc_1e64e5;
loc_1e64db: // 0160:1e64db
    edx = memoryAGet32(ds, esp + 8);
    memoryASet32(es, eax, edx);
loc_1e64e5: // 0160:1e64e5
    eax = ebx;
    esp += 0x00000010;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e64ef() // 0160:1e64ef +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000030)
        goto loc_1e64fd;
    if ((int32_t)eax > (int32_t)0x00000039)
        goto loc_1e64fd;
    eax -= 0x00000030;
    esp += 4;
    return;
loc_1e64fd: // 0160:1e64fd
    sub_1e65e3();
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1e6510;
    if ((int32_t)eax > (int32_t)0x00000066)
        goto loc_1e6510;
    eax -= 0x00000057;
    esp += 4;
    return;
loc_1e6510: // 0160:1e6510
    eax = 0x00000010;
    esp += 4;
}
void sub_1e6516() // 0160:1e6516 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    eax = memoryAGet32(ds, eax + 12);
    ebx = eax + -1;
    memoryASet32(ds, edx + 12, ebx);
    if (!eax)
        goto loc_1e6531;
    eax = edx;
    switch (memoryAGet32(ds, edx))
    {
        case 0x1e3d6a: sub_1e3d6a(); break;
        default:
            stop("ind 0160:1e6529");
    }
    if (!(memoryAGet(ds, edx + 16) & 0x02))
        goto loc_1e6536;
loc_1e6531: // 0160:1e6531
    eax = 0xffffffff;
loc_1e6536: // 0160:1e6536
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6540() // 0160:1e6540 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1e6570;
loc_1e6546: // 0160:1e6546
    if (!(al & 0x03))
        goto loc_1e6553;
    memoryASet(ds, eax, dl);
    eax++;
    edx = ror32(edx, 0x08);
    ecx--;
    if (ecx)
        goto loc_1e6546;
loc_1e6553: // 0160:1e6553
    push32(ecx);
    ecx >>= 2;
    sub_1e6577();
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1e6570;
    memoryASet(ds, eax, dl);
    ecx--;
    if (!ecx)
        goto loc_1e6570;
    memoryASet(ds, eax + 1, dh);
    ecx--;
    if (!ecx)
        goto loc_1e6570;
    memoryASet(ds, eax + 2, dl);
loc_1e6570: // 0160:1e6570
    esp += 4;
    return;
}
void sub_1e6577() // 0160:1e6577 +long
{
    esp -= 4;
    if (!ecx)
        goto loc_1e65e2;
loc_1e657b: // 0160:1e657b
    if (!(al & 0x1f))
        goto loc_1e6587;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (ecx)
        goto loc_1e657b;
loc_1e6587: // 0160:1e6587
    push32(ecx);
    ecx >>= 2;
    if (!ecx)
        goto loc_1e65c7;
    ecx--;
    if (!ecx)
        goto loc_1e65b9;
loc_1e6590: // 0160:1e6590
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    ecx--;
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    if (!ecx)
        goto loc_1e65b6;
    memoryASet32(ds, eax + 16, edx);
    memoryASet32(ds, eax + 20, edx);
    ecx--;
    memoryASet32(ds, eax + 24, edx);
    memoryASet32(ds, eax + 28, edx);
    eax = eax + 32;
    if (ecx)
        goto loc_1e6590;
    eax = eax + -16;
loc_1e65b6: // 0160:1e65b6
    eax = eax + 16;
loc_1e65b9: // 0160:1e65b9
    memoryASet32(ds, eax, edx);
    memoryASet32(ds, eax + 4, edx);
    memoryASet32(ds, eax + 8, edx);
    memoryASet32(ds, eax + 12, edx);
    eax = eax + 16;
loc_1e65c7: // 0160:1e65c7
    ecx = pop32();
    ecx &= 0x00000003;
    if (!ecx)
        goto loc_1e65e2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1e65e2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
    ecx--;
    if (!ecx)
        goto loc_1e65e2;
    memoryASet32(ds, eax, edx);
    eax = eax + 4;
loc_1e65e2: // 0160:1e65e2
    esp += 4;
    return;
}
void sub_1e65e3() // 0160:1e65e3 +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000041)
        goto loc_1e65f0;
    if ((int32_t)eax > (int32_t)0x0000005a)
        goto loc_1e65f0;
    eax += 0x00000020;
loc_1e65f0: // 0160:1e65f0
    esp += 4;
    return;
}
void sub_1e6615() // 0160:1e6615 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esp -= 0x0000000c;
    esi = memoryAGet32(ds, esp + 36);
loc_1e6621: // 0160:1e6621
    if (memoryAGet(ds, esi) != 0x20)
        goto loc_1e6629;
    esi++;
    goto loc_1e6621;
loc_1e6629: // 0160:1e6629
    eax = memoryAGet32(ds, esp + 40);
    eax &= 0x00000083;
    memoryASet32(ds, esp, eax);
    dl = memoryAGet(ds, esp + 44);
    al = memoryAGet(ds, esp);
    al |= dl;
    edx = esi;
    edi = 0xffffffff;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1e665c;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1e665c: // 0160:1e665c
    dh = memoryAGet(ds, esp + 40);
    if (!(dh & 0x03))
        goto loc_1e66d6;
    if (edi == 0xffffffff)
        goto loc_1e66d6;
    eax = edi;
    sub_1eaf6c();
    if (eax)
        goto loc_1e66d6;
    if (!(memoryAGet(ds, esp + 41) & 0x04))
        goto loc_1e669e;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    eax = 0x00000007;
    sub_1e53d1();
    eax = 0xffffffff;
    goto loc_1e67d1;
loc_1e669e: // 0160:1e669e
    if (!(dh & 0x40))
        goto loc_1e66d6;
    edx = esp + 8;
    ebx = edi;
    ecx = 0;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax >= 0)
        goto loc_1e66d6;
    ebx = edi;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
loc_1e66c5: // 0160:1e66c5
    eax = 0;
    ax = memoryAGet16(ds, esp + 4);
    sub_1e788d();
    goto loc_1e67d1;
loc_1e66d6: // 0160:1e66d6
    if (edi != 0xffffffff)
        goto loc_1e6764;
    if (!(memoryAGet(ds, esp + 40) & 0x20))
        goto loc_1e66c5;
    if (memoryAGet16(ds, esp + 4) != 0x0002)
        goto loc_1e66c5;
    eax = esp + 48;
    eax += 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    if (eax)
        goto loc_1e6701;
    eax = 0x00000180;
loc_1e6701: // 0160:1e6701
    eax ^= memoryAGet32(ds, 0x20a8c8);
    ecx = 0;
    if (al & 0x80)
        goto loc_1e6712;
    ecx = 0x00000001;
loc_1e6712: // 0160:1e6712
    edx = esi;
    ecx &= 0x000000ff;
    ah = 0x3c;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1e66c5;
    ebx = memoryAGet32(ds, esp + 4);
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1e66c5;
    al = memoryAGet(ds, esp);
    ch = memoryAGet(ds, esp + 44);
    edx = esi;
    al |= ch;
    ah = 0x3d;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    memoryASet32(ds, esp + 4, eax);
    if ((int32_t)eax < 0)
        goto loc_1e66c5;
    edi = 0;
    di = memoryAGet16(ds, esp + 4);
loc_1e6764: // 0160:1e6764
    eax = edi;
    sub_1eaf8a();
    al &= 0x3c;
    edx = eax;
    eax = edi;
    sub_1eaf6c();
    if (!eax)
        goto loc_1e677d;
    dh |= 0x20;
loc_1e677d: // 0160:1e677d
    memoryASet(ds, esp, memoryAGet(ds, esp) & 0x7f);
    if (memoryAGet32(ds, esp) != 0x00000002)
        goto loc_1e678a;
    dl |= 0x03;
loc_1e678a: // 0160:1e678a
    if (memoryAGet32(ds, esp) != 0x00000000)
        goto loc_1e6793;
    dl |= 0x01;
loc_1e6793: // 0160:1e6793
    if (memoryAGet32(ds, esp) != 0x00000001)
        goto loc_1e679c;
    dl |= 0x02;
loc_1e679c: // 0160:1e679c
    if (!(memoryAGet(ds, esp + 40) & 0x10))
        goto loc_1e67a6;
    dl |= 0x80;
loc_1e67a6: // 0160:1e67a6
    eax = edx;
    bl = memoryAGet(ds, esp + 41);
    al |= 0x40;
    if (!(bl & 0x03))
        goto loc_1e67ba;
    if (!(bl & 0x02))
        goto loc_1e67c8;
    goto loc_1e67c6;
loc_1e67ba: // 0160:1e67ba
    if (memoryAGet32(ds, 0x20a719) != 0x00000200)
        goto loc_1e67c8;
loc_1e67c6: // 0160:1e67c6
    edx = eax;
loc_1e67c8: // 0160:1e67c8
    eax = edi;
    sub_1eafdf();
    eax = edi;
loc_1e67d1: // 0160:1e67d1
    esp += 0x0000000c;
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e683f() // 0160:1e683f +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    esi = memoryAGet32(ds, 0x3164c8);
    if (!esi)
        goto loc_1e6867;
    ecx = memoryAGet32(ds, esi + 4);
    edi = memoryAGet32(ds, ecx + 12);
    eax = memoryAGet32(ds, esi);
    edi &= 0x00004003;
    memoryASet32(ds, 0x3164c8, eax);
    di |= 0x0003;
    goto loc_1e68b0;
loc_1e6867: // 0160:1e6867
    ecx = 0x0020a510;
    goto loc_1e688e;
loc_1e686e: // 0160:1e686e
    if (memoryAGet(ds, ecx + 12) & 0x03)
        goto loc_1e688b;
    eax = 0x00000008;
    sub_1e3562();
    esi = eax;
    if (!eax)
        goto loc_1e68d5;
    edi = 0x00000003;
    goto loc_1e68b0;
loc_1e688b: // 0160:1e688b
    ecx += 0x0000001a;
loc_1e688e: // 0160:1e688e
    if (ecx < 0x0020a718)
        goto loc_1e686e;
    eax = 0x00000022;
    edi = 0x00004003;
    sub_1e3562();
    ecx = eax;
    esi = eax;
    if (!eax)
        goto loc_1e68d5;
    ecx = eax + 8;
loc_1e68b0: // 0160:1e68b0
    ebx = 0x0000001a;
    eax = ecx;
    edx = 0;
    sub_1e3de0();
    memoryASet32(ds, ecx + 12, edi);
    eax = memoryAGet32(ds, 0x3164d0);
    memoryASet32(ds, esi + 4, ecx);
    memoryASet32(ds, 0x3164d0, esi);
    memoryASet32(ds, esi, eax);
    eax = ecx;
    goto loc_1e68e1;
loc_1e68d5: // 0160:1e68d5
    eax = 0x00000005;
    sub_1e53d1();
    eax = 0;
loc_1e68e1: // 0160:1e68e1
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e68e7() // 0160:1e68e7 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    edx = 0x003164d0;
loc_1e68f1: // 0160:1e68f1
    eax = memoryAGet32(ds, edx);
    if (!eax)
        goto loc_1e691c;
    ecx = memoryAGet32(ds, eax + 4);
    if (ebx == ecx)
        goto loc_1e6902;
    edx = eax;
    goto loc_1e68f1;
loc_1e6902: // 0160:1e6902
    cl = memoryAGet(ds, ecx + 12);
    cl |= 0x03;
    memoryASet(ds, ebx + 12, cl);
    ebx = memoryAGet32(ds, eax);
    memoryASet32(ds, edx, ebx);
    edx = memoryAGet32(ds, 0x3164c8);
    memoryASet32(ds, 0x3164c8, eax);
    memoryASet32(ds, eax, edx);
loc_1e691c: // 0160:1e691c
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e693e() // 0160:1e693e +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (memoryAGet(ds, eax + 13) & 0x20)
        goto loc_1e696b;
    eax = memoryAGet32(ds, edx + 16);
    sub_1eaf6c();
    if (!eax)
        goto loc_1e696b;
    bl = memoryAGet(ds, edx + 13);
    bl |= 0x20;
    memoryASet(ds, edx + 13, bl);
    if (bl & 0x07)
        goto loc_1e696b;
    cl = bl;
    cl |= 0x02;
    memoryASet(ds, edx + 13, cl);
loc_1e696b: // 0160:1e696b
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e696f() // 0160:1e696f +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = 0x00000001;
    edx = 0;
    sub_1e6986();
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6980() // 0160:1e6980 +long
{
    esp -= 4;
    eax = memoryAGet32(ds, 0x20a73c);
    esp += 4;
}
void sub_1e6986() // 0160:1e6986 +long
{
    esp -= 4;
    push32(ecx);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    eax = ebx;
    edi = esp;
    ebx = ecx;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    memoryASet16(ss, edi, ax);
    memoryASet16(ss, edi + 2, dx);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1e69be;
    eax &= 0x0000ffff;
    sub_1e788d();
    eax = 0xffffffff;
    goto loc_1e69c1;
loc_1e69be: // 0160:1e69be
    eax = memoryAGet32(ds, esp);
loc_1e69c1: // 0160:1e69c1
    esp += 0x00000004;
    edi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e69c7() // 0160:1e69c7 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    ebx = eax;
    ah = 0x3e;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_1e69e7;
    eax = edx;
    edx = 0;
    sub_1eafdf();
    eax = 0;
    edx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1e69e7: // 0160:1e69e7
    eax = 0x00000004;
    sub_1e53d1();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e69f9()
{
  sub_1eaff4();
}

void sub_1e69fe() // 0160:1e69fe +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ebx = eax;
    if (memoryAGet(ds, edx + 12) & 0x02)
        goto loc_1e6a23;
    eax = 0x00000004;
    sub_1e53d1();
    memoryASet(ds, edx + 12, memoryAGet(ds, edx + 12) | 0x20);
loc_1e6a19: // 0160:1e6a19
    eax = 0xffffffff;
    goto loc_1e6a9c;
loc_1e6a23: // 0160:1e6a23
    if (memoryAGet32(ds, edx + 8) != 0x00000000)
        goto loc_1e6a30;
    eax = edx;
    sub_1e5407();
loc_1e6a30: // 0160:1e6a30
    ecx = 0x00000400;
    if (ebx != 0x0000000a)
        goto loc_1e6a6d;
    al = memoryAGet(ds, edx + 12);
    ecx = 0x00000600;
    if (al & 0x40)
        goto loc_1e6a6d;
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, 0x0d);
    esi = memoryAGet32(ds, edx);
    esi++;
    edi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, esi);
    edi++;
    ebp = memoryAGet32(ds, edx + 20);
    memoryASet32(ds, edx + 4, edi);
    if (edi != ebp)
        goto loc_1e6a6d;
    eax = edx;
    sub_1e58fc();
    if (eax)
        goto loc_1e6a19;
loc_1e6a6d: // 0160:1e6a6d
    memoryASet(ds, edx + 13, memoryAGet(ds, edx + 13) | 0x10);
    eax = memoryAGet32(ds, edx);
    memoryASet(ds, eax, bl);
    eax = memoryAGet32(ds, edx);
    eax++;
    esi = memoryAGet32(ds, edx + 4);
    memoryASet32(ds, edx, eax);
    esi++;
    edi = memoryAGet32(ds, edx + 12);
    memoryASet32(ds, edx + 4, esi);
    if (ecx & edi)
        goto loc_1e6a8d;
    if (esi != memoryAGet32(ds, edx + 20))
        goto loc_1e6a98;
loc_1e6a8d: // 0160:1e6a8d
    eax = edx;
    sub_1e58fc();
    if (eax)
        goto loc_1e6a19;
loc_1e6a98: // 0160:1e6a98
    eax = 0;
    al = bl;
loc_1e6a9c: // 0160:1e6a9c
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6aa2() // 0160:1e6aa2 +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x0000004c;
    esi = ebx;
    memoryASet32(ds, esp + 68, ecx);
    bl = 0;
    memoryASet32(ds, esp + 40, eax);
    memoryASet(ds, esp + 72, bl);
    memoryASet(ds, esp + 60, bl);
    ebx = 0;
    edi = edx;
    memoryASet32(ds, esp + 56, ebx);
    ebp = 0x00000004;
    goto loc_1e6b25;
loc_1e6acc: // 0160:1e6acc
    ebx = esp + 40;
    edx = esi;
    sub_1e6d23();
    edi = eax;
    al = memoryAGet(ds, eax);
    edi++;
    memoryASet(ds, esp + 61, al);
    if (!al)
        goto loc_1e6d17;
    if (al != 0x6e)
        goto loc_1e6bc7;
    bl = memoryAGet(ds, esp + 60);
    if (!(bl & 0x20))
        goto loc_1e6b52;
    if (!(bl & 0x80))
        goto loc_1e6b11;
    ecx = memoryAGet32(ds, esi);
    ecx += 0x00000008;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet16(ds, ecx + -8); es = memoryAGet32(ds, ecx + -8 + 2);
loc_1e6b08: // 0160:1e6b08
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(es, edx, eax);
    goto loc_1e6b25;
loc_1e6b11: // 0160:1e6b11
    if (!(bl & 0x40))
        goto loc_1e6b47;
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
loc_1e6b1f: // 0160:1e6b1f
    eax = memoryAGet32(ds, esp + 56);
    memoryASet32(ds, edx, eax);
loc_1e6b25: // 0160:1e6b25
    cl = memoryAGet(ds, edi);
    if (!cl)
        goto loc_1e6d17;
    eax = edi + 1;
    if (cl == 0x25)
        goto loc_1e6acc;
    edi = eax;
    edx = 0;
    eax = esp + 40;
    dl = cl;
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1e43e1: sub_1e43e1(); break;
        default:
            stop("ind 0160:1e6b41");
    }
    goto loc_1e6b25;
loc_1e6b47: // 0160:1e6b47
    edx = memoryAGet32(ds, esi);
    edx += ebp;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    goto loc_1e6b1f;
loc_1e6b52: // 0160:1e6b52
    if (!(bl & 0x10))
        goto loc_1e6b92;
    if (!(bl & 0x80))
        goto loc_1e6b70;
    eax = memoryAGet32(ds, esi);
    eax += 0x00000008;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet16(ds, eax + -8); es = memoryAGet32(ds, eax + -8 + 2);
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(es, edx, ax);
    goto loc_1e6b25;
loc_1e6b70: // 0160:1e6b70
    if (!(bl & 0x40))
        goto loc_1e6b87;
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
loc_1e6b7e: // 0160:1e6b7e
    eax = memoryAGet32(ds, esp + 56);
    memoryASet16(ds, edx, ax);
    goto loc_1e6b25;
loc_1e6b87: // 0160:1e6b87
    ebx = memoryAGet32(ds, esi);
    ebx += ebp;
    memoryASet32(ds, esi, ebx);
    edx = memoryAGet32(ds, ebx + -4);
    goto loc_1e6b7e;
loc_1e6b92: // 0160:1e6b92
    if (!(bl & 0x80))
        goto loc_1e6ba6;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000008;
    memoryASet32(ds, esi, edx);
    {int tmp1 = memoryAGet16(ds, edx + -8); int tmp2 = memoryAGet32(ds, edx + -8 + 2); edx = tmp1; es = tmp2; /*ggg2!!check*/};
    goto loc_1e6b08;
loc_1e6ba6: // 0160:1e6ba6
    if (!(bl & 0x40))
        goto loc_1e6bb9;
    eax = memoryAGet32(ds, esi);
    eax += ebp;
    memoryASet32(ds, esi, eax);
    edx = memoryAGet32(ds, eax + -4);
    goto loc_1e6b1f;
loc_1e6bb9: // 0160:1e6bb9
    ecx = memoryAGet32(ds, esi);
    ecx += ebp;
    memoryASet32(ds, esi, ecx);
    edx = memoryAGet32(ds, ecx + -4);
    goto loc_1e6b1f;
loc_1e6bc7: // 0160:1e6bc7
    eax = esp;
    ebx = esp + 40;
    ecx = esp + 72;
    edx = esi;
    sub_1e703b();
    es = edx;
    dl = memoryAGet(ds, esp + 60);
    ebx = eax;
    if (dl & 0x08)
        goto loc_1e6c09;
    if (memoryAGet(ds, esp + 62) != 0x20)
        goto loc_1e6c09;
loc_1e6bec: // 0160:1e6bec
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_1e6c09;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6c03;
    goto loc_1e6bec;
loc_1e6c09: // 0160:1e6c09
    ecx = esp + 63;
loc_1e6c0d: // 0160:1e6c0d
    al = memoryAGet(ds, ecx);
    if (!al)
        goto loc_1e6c22;
    edx = 0;
    dl = al;
    eax = esp + 40;
    ecx++;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6c1c;
    goto loc_1e6c0d;
loc_1e6c22: // 0160:1e6c22
    eax = memoryAGet32(ds, esp + 52);
    ecx = eax + -1;
    memoryASet32(ds, esp + 52, ecx);
    if (!eax)
        goto loc_1e6c40;
    eax = esp + 40;
    edx = 0x00000030;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6c3a;
    goto loc_1e6c22;
loc_1e6c40: // 0160:1e6c40
    if (memoryAGet(ds, esp + 60) & 0x08)
        goto loc_1e6c6b;
    if (memoryAGet(ds, esp + 62) == 0x20)
        goto loc_1e6c6b;
loc_1e6c4e: // 0160:1e6c4e
    eax = memoryAGet32(ds, esp + 44);
    eax--;
    memoryASet32(ds, esp + 44, eax);
    if ((int32_t)eax < 0)
        goto loc_1e6c6b;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(ds, esp + 62);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6c65;
    goto loc_1e6c4e;
loc_1e6c6b: // 0160:1e6c6b
    dh = memoryAGet(ds, esp + 61);
    if (dh == 0x73)
        goto loc_1e6c79;
    if (dh != 0x53)
        goto loc_1e6cc0;
loc_1e6c79: // 0160:1e6c79
    if (!(memoryAGet(ds, esp + 60) & 0x20))
        goto loc_1e6ca1;
loc_1e6c80: // 0160:1e6c80
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1e6cdf;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6c98;
    ebx += 0x00000002;
    goto loc_1e6c80;
loc_1e6ca1: // 0160:1e6ca1
    eax = memoryAGet32(ds, esp + 48);
    edx = eax + -1;
    memoryASet32(ds, esp + 48, edx);
    if (!eax)
        goto loc_1e6cdf;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6cb9;
    ebx++;
    goto loc_1e6ca1;
loc_1e6cc0: // 0160:1e6cc0
    eax = memoryAGet32(ds, esp + 48);
    ecx = eax + -1;
    memoryASet32(ds, esp + 48, ecx);
    if (!eax)
        goto loc_1e6cdf;
    edx = 0;
    eax = esp + 40;
    dl = memoryAGet(es, ebx);
    switch (memoryAGet32(ds, esp + 68))
    {
        case 0x1e43e1: sub_1e43e1(); break;
        default:
            stop("ind 0160:1e6cd8");
    }
    ebx++;
    goto loc_1e6cc0;
loc_1e6cdf: // 0160:1e6cdf
    if (!(memoryAGet(ds, esp + 60) & 0x08))
        goto loc_1e6b25;
    if ((int32_t)memoryAGet32(ds, esp + 44) <= (int32_t)0x00000000)
        goto loc_1e6b25;
loc_1e6cf5: // 0160:1e6cf5
    eax = memoryAGet32(ds, esp + 44);
    edx = eax + -1;
    memoryASet32(ds, esp + 44, edx);
    if (!eax)
        goto loc_1e6b25;
    eax = esp + 40;
    edx = 0x00000020;
    indirectCall(cs, memoryAGet32(ds, esp + 68)); // 0160:1e6d11;
    goto loc_1e6cf5;
loc_1e6d17: // 0160:1e6d17
    eax = memoryAGet32(ds, esp + 56);
    esp += 0x0000004c;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e6d23() // 0160:1e6d23 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esi = edx;
    memoryASet(ds, ebx + 23, 0x00);
    edx = ebx;
    memoryASet(ds, ebx + 22, 0x20);
    sub_1e6e56();
    memoryASet32(ds, ebx + 4, 0x00000000);
    cl = memoryAGet(ds, eax);
    edx = eax;
    if (cl < 0x30)
        goto loc_1e6d6b;
    if (cl > 0x39)
        goto loc_1e6d6b;
loc_1e6d4c: // 0160:1e6d4c
    ecx = memoryAGet32(ds, ebx + 4) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 4, ecx);
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1e6d92;
    if (cl <= 0x39)
        goto loc_1e6d4c;
    goto loc_1e6d92;
loc_1e6d6b: // 0160:1e6d6b
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1e6d92;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 4, edx);
    if ((int32_t)edx >= 0)
        goto loc_1e6d91;
    edi = edx;
    dh = memoryAGet(ds, ebx + 20);
    edi = -edi;
    dh |= 0x08;
    memoryASet32(ds, ebx + 4, edi);
    memoryASet(ds, ebx + 20, dh);
loc_1e6d91: // 0160:1e6d91
    eax++;
loc_1e6d92: // 0160:1e6d92
    memoryASet32(ds, ebx + 8, 0xffffffff);
    if (memoryAGet(ds, eax) != 0x2e)
        goto loc_1e6de5;
    eax++;
    memoryASet32(ds, ebx + 8, 0x00000000);
    if (memoryAGet(ds, eax) != 0x2a)
        goto loc_1e6dc6;
    edx = memoryAGet32(ds, esi);
    edx += 0x00000004;
    memoryASet32(ds, esi, edx);
    edx = memoryAGet32(ds, edx + -4);
    memoryASet32(ds, ebx + 8, edx);
    if ((int32_t)edx >= 0)
        goto loc_1e6dc3;
    memoryASet32(ds, ebx + 8, 0xffffffff);
loc_1e6dc3: // 0160:1e6dc3
    eax++;
    goto loc_1e6de5;
loc_1e6dc6: // 0160:1e6dc6
    cl = memoryAGet(ds, eax);
    if (cl < 0x30)
        goto loc_1e6de5;
    if (cl > 0x39)
        goto loc_1e6de5;
    ecx = memoryAGet32(ds, ebx + 8) * 0x0000000a;
    edx = 0;
    dl = memoryAGet(ds, eax);
    edx -= 0x00000030;
    ecx += edx;
    eax++;
    memoryASet32(ds, ebx + 8, ecx);
    goto loc_1e6dc6;
loc_1e6de5: // 0160:1e6de5
    cl = memoryAGet(ds, eax);
    edx = eax + 1;
    if (cl < 0x4e)
        goto loc_1e6e0a;
    if (cl <= 0x4e)
        goto loc_1e6e47;
    if (cl < 0x6c)
        goto loc_1e6e01;
    if (cl <= 0x6c)
        goto loc_1e6e1a;
    if (cl == 0x77)
        goto loc_1e6e1a;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e01: // 0160:1e6e01
    if (cl == 0x68)
        goto loc_1e6e28;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e0a: // 0160:1e6e0a
    if (cl < 0x46)
        goto loc_1e6e52;
    if (cl <= 0x46)
        goto loc_1e6e41;
    if (cl == 0x4c)
        goto loc_1e6e37;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e1a: // 0160:1e6e1a
    dl = memoryAGet(ds, ebx + 20);
    dl |= 0x20;
    eax++;
    memoryASet(ds, ebx + 20, dl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e28: // 0160:1e6e28
    cl = memoryAGet(ds, ebx + 20);
    cl |= 0x10;
    eax = edx;
    memoryASet(ds, ebx + 20, cl);
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e37: // 0160:1e6e37
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x40);
loc_1e6e3b: // 0160:1e6e3b
    eax = edx;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6e41: // 0160:1e6e41
    memoryASet(ds, ebx + 20, memoryAGet(ds, ebx + 20) | 0x80);
    goto loc_1e6e3b;
loc_1e6e47: // 0160:1e6e47
    ch = memoryAGet(ds, ebx + 20);
    ch |= 0x40;
    eax = edx;
    memoryASet(ds, ebx + 20, ch);
loc_1e6e52: // 0160:1e6e52
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e6e56() // 0160:1e6e56 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    memoryASet(ds, edx + 20, 0x00);
loc_1e6e5c: // 0160:1e6e5c
    bl = memoryAGet(ds, eax);
    if (bl != 0x2d)
        goto loc_1e6e69;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x08);
    goto loc_1e6eab;
loc_1e6e69: // 0160:1e6e69
    if (bl != 0x23)
        goto loc_1e6e74;
    memoryASet(ds, edx + 20, memoryAGet(ds, edx + 20) | 0x01);
    goto loc_1e6eab;
loc_1e6e74: // 0160:1e6e74
    if (bl != 0x2b)
        goto loc_1e6e8c;
    ch = memoryAGet(ds, edx + 20);
    ch |= 0x04;
    bl = ch;
    memoryASet(ds, edx + 20, ch);
    bl &= 0xfd;
    memoryASet(ds, edx + 20, bl);
    goto loc_1e6eab;
loc_1e6e8c: // 0160:1e6e8c
    if (bl != 0x20)
        goto loc_1e6ea3;
    bh = memoryAGet(ds, edx + 20);
    if (bh & 0x04)
        goto loc_1e6eab;
    cl = bh;
    cl |= 0x02;
    memoryASet(ds, edx + 20, cl);
    goto loc_1e6eab;
loc_1e6ea3: // 0160:1e6ea3
    if (bl != 0x30)
        goto loc_1e6eae;
    memoryASet(ds, edx + 22, bl);
loc_1e6eab: // 0160:1e6eab
    eax++;
    goto loc_1e6e5c;
loc_1e6eae: // 0160:1e6eae
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e6eb1() // 0160:1e6eb1 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    esi = edx;
    edi = ebx;
    edx = eax;
    eax = 0;
loc_1e6ebd: // 0160:1e6ebd
    es = esi;
    ebx = edx;
    cl = memoryAGet(es, ebx);
    edx++;
    if (!cl)
        goto loc_1e6ed0;
    if (eax == edi)
        goto loc_1e6ed0;
    eax++;
    goto loc_1e6ebd;
loc_1e6ed0: // 0160:1e6ed0
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e6ed5() // 0160:1e6ed5 +long
{
    esp -= 4;
    goto loc_1e6ed5;
loc_1e6ed0: // 0160:1e6ed0
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
    return;
loc_1e6ed5: // 0160:1e6ed5
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    ecx = edx;
    esi = ebx;
    edx = eax;
    eax = 0;
loc_1e6ee1: // 0160:1e6ee1
    es = ecx;
    ebx = edx;
    di = memoryAGet16(es, ebx);
    edx += 0x00000002;
    if (!di)
        goto loc_1e6ed0;
    if (eax == esi)
        goto loc_1e6ed0;
    eax++;
    goto loc_1e6ee1;
}
void sub_1e6ef8() // 0160:1e6ef8 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    ebp = edx;
    memoryASet32(ds, esp, ebx);
    ebx = 0x00000010;
    edi = ebp;
    sub_1eb082();
    push(es);
    eax = ds;
    es = eax;
    ecx = 0;
    ecx--;
    eax = 0;
    for (flags.zero = 0; ecx != 0 && !flags.zero; --ecx) scasb_inv<ES_EDI>(al);
    ecx = ~ecx;
    ecx--;
    es = pop();
    eax = memoryAGet32(ds, esp);
    esi = ecx;
    edi = ebp;
    eax--;
    edx = ecx + ebp;
    ebx = eax + ebp;
    goto loc_1e6f38;
loc_1e6f30: // 0160:1e6f30
    edx--;
    esi--;
    cl = memoryAGet(ds, edx);
    eax--;
    memoryASet(ds, ebx, cl);
    ebx--;
loc_1e6f38: // 0160:1e6f38
    if (edx != edi)
        goto loc_1e6f30;
    edx = eax + ebp;
loc_1e6f3f: // 0160:1e6f3f
    if ((int32_t)eax < 0)
        goto loc_1e6f4a;
    eax--;
    memoryASet(ds, edx, 0x30);
    edx--;
    goto loc_1e6f3f;
loc_1e6f4a: // 0160:1e6f4a
    ebp += memoryAGet32(ds, esp);
    memoryASet(ss, ebp, 0x00);
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e6f59() // 0160:1e6f59 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    esp -= 0x00000004;
    ecx = eax;
    esi = ebx;
    memoryASet32(ds, esp, edx);
    if ((int32_t)edx >= 0)
        goto loc_1e6f75;
    edx = -edx;
    ecx = eax + 1;
    memoryASet(ds, eax, 0x2d);
    memoryASet32(ds, esp, edx);
loc_1e6f75: // 0160:1e6f75
    if (memoryAGet32(ds, esi + 8) != 0xffffffff)
        goto loc_1e6f82;
    memoryASet32(ds, esi + 8, 0x00000004);
loc_1e6f82: // 0160:1e6f82
    ebx = 0x0000000a;
    eax = 0;
    edx = ecx;
    ax = memoryAGet16(ds, esp + 2);
    sub_1eb082();
    ebx = ecx;
loc_1e6f97: // 0160:1e6f97
    ah = memoryAGet(ds, ecx);
    edx = ecx + 1;
    if (!ah)
        goto loc_1e6fa4;
    ecx = edx;
    goto loc_1e6f97;
loc_1e6fa4: // 0160:1e6fa4
    if (memoryAGet32(ds, esi + 8) == 0x00000000)
        goto loc_1e6fd6;
    memoryASet(ds, ecx, 0x2e);
    eax = 0;
    ecx = edx;
    goto loc_1e6fce;
loc_1e6fb3: // 0160:1e6fb3
    edx = 0;
    memoryASet16(ds, esp + 2, dx);
    edi = memoryAGet32(ds, esp);
    edx = edi * 0x0000000a;
    memoryASet32(ds, esp, edx);
    dl = memoryAGet(ds, esp + 2);
    dl += 0x30;
    eax++;
    memoryASet(ds, ecx, dl);
    ecx++;
loc_1e6fce: // 0160:1e6fce
    if ((int32_t)eax < (int32_t)memoryAGet32(ds, esi + 8))
        goto loc_1e6fb3;
    memoryASet(ds, ecx, 0x00);
loc_1e6fd6: // 0160:1e6fd6
    if (!(memoryAGet(ds, esp + 1) & 0x80))
        goto loc_1e702d;
loc_1e6fdd: // 0160:1e6fdd
    if (ecx != ebx)
        goto loc_1e7013;
    ecx = ebx + 1;
    memoryASet(ds, ebx, 0x31);
loc_1e6fe7: // 0160:1e6fe7
    dl = memoryAGet(ds, ecx);
    eax = ecx + 1;
    if (dl != 0x30)
        goto loc_1e6ff5;
    ecx = eax;
    goto loc_1e6fe7;
loc_1e6ff5: // 0160:1e6ff5
    if (dl != 0x2e)
        goto loc_1e700a;
    memoryASet(ds, ecx, 0x30);
    ecx = eax + 1;
    memoryASet(ds, eax, dl);
loc_1e7002: // 0160:1e7002
    if (memoryAGet(ds, ecx) != 0x30)
        goto loc_1e700a;
    ecx++;
    goto loc_1e7002;
loc_1e700a: // 0160:1e700a
    memoryASet(ds, ecx, 0x30);
    ecx++;
    memoryASet(ds, ecx, 0x00);
    goto loc_1e702d;
loc_1e7013: // 0160:1e7013
    ecx--;
    if (memoryAGet(ds, ecx) != 0x2e)
        goto loc_1e701a;
    ecx--;
loc_1e701a: // 0160:1e701a
    al = memoryAGet(ds, ecx);
    if (al == 0x39)
        goto loc_1e7028;
    ah = al;
    ah++;
    memoryASet(ds, ecx, ah);
    goto loc_1e702d;
loc_1e7028: // 0160:1e7028
    memoryASet(ds, ecx, 0x30);
    goto loc_1e6fdd;
loc_1e702d: // 0160:1e702d
    esp += 0x00000004;
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1e7034() // 0160:1e7034 +long
{
    esp -= 4;
    indirectCall(cs, memoryAGet32(ds, 0x20a834)); // 0160:1e7034;
    esp += 4;
}
void sub_1e703b() // 0160:1e703b +long
{
    esp -= 4;
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    esp -= 0x00000008;
    edi = eax;
    esi = ebx;
    memoryASet32(ds, esp, ecx);
    ebx = 0x00000001;
    eax = ds;
    ecx = edi;
    memoryASet32(ds, esp + 4, ebx);
    es = eax;
    al = memoryAGet(ds, esi + 21);
    memoryASet32(ds, esi + 12, 0x00000000);
    if (al < 0x69)
        goto loc_1e707c;
    if (al <= 0x69)
        goto loc_1e70bc;
    if (al < 0x75)
        goto loc_1e7078;
    if (al <= 0x75)
        goto loc_1e7088;
    flags.zero = al == 0x78;
loc_1e7074: // 0160:1e7074
    if (flags.zero)
        goto loc_1e7088;
    goto loc_1e70c6;
loc_1e7078: // 0160:1e7078
    flags.zero = al == 0x6f;
    goto loc_1e7074;
loc_1e707c: // 0160:1e707c
    if (al < 0x58)
        goto loc_1e70c6;
    if (al <= 0x58)
        goto loc_1e7088;
    if (al == 0x64)
        goto loc_1e70bc;
    goto loc_1e70c6;
loc_1e7088: // 0160:1e7088
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x20))
        goto loc_1e709c;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ebp = memoryAGet32(ds, ebx + -4);
    goto loc_1e70b8;
loc_1e709c: // 0160:1e709c
    if (!(ah & 0x10))
        goto loc_1e70ae;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebp = memoryAGet16(ds, eax + -4);
    goto loc_1e70b8;
loc_1e70ae: // 0160:1e70ae
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    ebp = memoryAGet32(ss, ebp + -4);
loc_1e70b8: // 0160:1e70b8
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
loc_1e70bc: // 0160:1e70bc
    if (memoryAGet32(ds, esi + 8) == 0xffffffff)
        goto loc_1e70c6;
    memoryASet(ds, esi + 22, 0x20);
loc_1e70c6: // 0160:1e70c6
    al = memoryAGet(ds, esi + 21);
    ebx = 0x0000000a;
    if (al < 0x65)
        goto loc_1e712b;
    if (al <= 0x65)
        goto loc_1e719c;
    if (al < 0x6f)
        goto loc_1e7114;
    if (al <= 0x6f)
        goto loc_1e71b0;
    if (al < 0x73)
        goto loc_1e7107;
    if (al <= 0x73)
        goto loc_1e722b;
    if (al < 0x75)
        goto loc_1e73bf;
    if (al <= 0x75)
        goto loc_1e72f4;
    if (al == 0x78)
        goto loc_1e72d7;
    goto loc_1e73bf;
loc_1e7107: // 0160:1e7107
    if (al == 0x70)
        goto loc_1e7313;
    goto loc_1e73bf;
loc_1e7114: // 0160:1e7114
    if (al < 0x67)
        goto loc_1e7172;
    if (al <= 0x67)
        goto loc_1e719c;
    if (al == 0x69)
        goto loc_1e71eb;
    goto loc_1e73bf;
loc_1e712b: // 0160:1e712b
    if (al < 0x50)
        goto loc_1e715f;
    if (al <= 0x50)
        goto loc_1e7313;
    if (al < 0x58)
        goto loc_1e7152;
    if (al <= 0x58)
        goto loc_1e72d7;
    if (al < 0x63)
        goto loc_1e73bf;
    if (al <= 0x63)
        goto loc_1e7392;
    goto loc_1e71eb;
loc_1e7152: // 0160:1e7152
    if (al == 0x53)
        goto loc_1e722b;
    goto loc_1e73bf;
loc_1e715f: // 0160:1e715f
    if (al < 0x46)
        goto loc_1e716e;
    if (al <= 0x46)
        goto loc_1e7172;
    flags.zero = al == 0x47;
loc_1e7167: // 0160:1e7167
    if (flags.zero)
        goto loc_1e719c;
    goto loc_1e73bf;
loc_1e716e: // 0160:1e716e
    flags.zero = al == 0x45;
    goto loc_1e7167;
loc_1e7172: // 0160:1e7172
    if (!(memoryAGet(ds, esi + 20) & 0x10))
        goto loc_1e719c;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    eax = edi;
    edx = memoryAGet32(ds, ebx + -4);
    ebx = esi;
    sub_1e6f59();
    ebx = 0xffffffff;
    eax = ds;
    edx = ds;
    es = eax;
    eax = edi;
    ecx = edi;
    goto loc_1e71e1;
loc_1e719c: // 0160:1e719c
    eax = edi;
    ebx = esi;
    sub_1e7034();
    ebx = 0xffffffff;
    es = edx;
    ecx = eax;
    goto loc_1e71e1;
loc_1e71b0: // 0160:1e71b0
    al = memoryAGet(ds, esi + 20);
    ebx = 0x00000008;
    if (!(al & 0x01))
        goto loc_1e71c0;
    memoryASet(ds, edi, 0x30);
    edi++;
loc_1e71c0: // 0160:1e71c0
    eax = ebp;
    edx = edi;
    sub_1eb10b();
loc_1e71c9: // 0160:1e71c9
    if (memoryAGet32(ds, esi + 8) != 0x00000000)
        goto loc_1e71d8;
    if (memoryAGet(ds, edi) != 0x30)
        goto loc_1e71d8;
    memoryASet(es, ecx, 0x00);
loc_1e71d8: // 0160:1e71d8
    ebx = 0xffffffff;
    edx = es;
    eax = ecx;
loc_1e71e1: // 0160:1e71e1
    sub_1e6eb1();
    goto loc_1e73e9;
loc_1e71eb: // 0160:1e71eb
    al = memoryAGet(ds, esi + 20);
    if (!(al & 0x20))
        goto loc_1e7205;
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
loc_1e71fe: // 0160:1e71fe
    sub_1eb10b();
    goto loc_1e71c9;
loc_1e7205: // 0160:1e7205
    if (!(al & 0x10))
        goto loc_1e7218;
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    edx = edi;
    eax = (short)memoryAGet16(ds, eax + -4);
    goto loc_1e71fe;
loc_1e7218: // 0160:1e7218
    ebp = memoryAGet32(ds, edx);
    ebp += 0x00000004;
    memoryASet32(ds, edx, ebp);
    edx = edi;
    eax = memoryAGet32(ss, ebp + -4);
    sub_1eb082();
    goto loc_1e71c9;
loc_1e722b: // 0160:1e722b
    ah = memoryAGet(ds, esi + 20);
    if (!(ah & 0x80))
        goto loc_1e7255;
    ecx = memoryAGet32(ds, edx);
    ecx += 0x00000008;
    memoryASet32(ds, edx, ecx);
    dx = memoryAGet16(ds, ecx + -4);
    ecx = memoryAGet32(ds, ecx + -8);
    if (ecx)
        goto loc_1e724a;
    if (!dx)
        goto loc_1e724e;
loc_1e724a: // 0160:1e724a
    es = edx;
    goto loc_1e7281;
loc_1e724e: // 0160:1e724e
    eax = ds;
    ecx = memoryAGet32(ds, esp);
    goto loc_1e727f;
loc_1e7255: // 0160:1e7255
    if (!(ah & 0x40))
        goto loc_1e726c;
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    ecx = memoryAGet32(ds, ebx + -4);
    if (!ecx)
        goto loc_1e724e;
loc_1e7268: // 0160:1e7268
    eax = ds;
    goto loc_1e727f;
loc_1e726c: // 0160:1e726c
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ecx = memoryAGet32(ds, eax + -4);
    if (ecx)
        goto loc_1e7268;
    eax = ds;
    ecx = memoryAGet32(ds, esp);
loc_1e727f: // 0160:1e727f
    es = eax;
loc_1e7281: // 0160:1e7281
    bh = memoryAGet(ds, esi + 20);
    al = memoryAGet(ds, esi + 21);
    edi = 0;
    bh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, bh);
    if (al != 0x53)
        goto loc_1e72b5;
    if (!(bh & 0x20))
        goto loc_1e72aa;
    eax = 0;
    ax = memoryAGet16(es, ecx);
    ecx += 0x00000002;
    goto loc_1e73e9;
loc_1e72aa: // 0160:1e72aa
    eax = 0;
    al = memoryAGet(es, ecx);
    ecx++;
    goto loc_1e73e9;
loc_1e72b5: // 0160:1e72b5
    if (!(bh & 0x20))
        goto loc_1e72cb;
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    sub_1e6ed5();
    goto loc_1e73e9;
loc_1e72cb: // 0160:1e72cb
    edx = es;
    eax = ecx;
    ebx = memoryAGet32(ds, esi + 8);
    goto loc_1e71e1;
loc_1e72d7: // 0160:1e72d7
    if (!(memoryAGet(ds, esi + 20) & 0x01))
        goto loc_1e72ef;
    if (!ebp)
        goto loc_1e72ef;
    memoryASet(ds, esi + 23, 0x30);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, esi + 25, 0x00);
    memoryASet(ds, esi + 24, al);
loc_1e72ef: // 0160:1e72ef
    ebx = 0x00000010;
loc_1e72f4: // 0160:1e72f4
    eax = ebp;
    edx = edi;
    sub_1eb0c2();
    if (memoryAGet(ds, esi + 21) != 0x58)
        goto loc_1e71c9;
    eax = edi;
    sub_1e7484();
    goto loc_1e71c9;
loc_1e7313: // 0160:1e7313
    if (memoryAGet32(ds, esi + 4) != 0x00000000)
        goto loc_1e732f;
    if (!(memoryAGet(ds, esi + 20) & 0x80))
        goto loc_1e7328;
    memoryASet32(ds, esi + 4, 0x0000000d);
    goto loc_1e732f;
loc_1e7328: // 0160:1e7328
    memoryASet32(ds, esi + 4, 0x00000008);
loc_1e732f: // 0160:1e732f
    memoryASet(ds, esi + 20, memoryAGet(ds, esi + 20) & 0xf9);
    eax = memoryAGet32(ds, edx);
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    bl = memoryAGet(ds, esi + 20);
    ebp = memoryAGet32(ds, eax + -4);
    if (!(bl & 0x80))
        goto loc_1e736e;
    eax += 0x00000004;
    memoryASet32(ds, edx, eax);
    ebx = 0x00000004;
    eax = memoryAGet32(ds, eax + -4);
    edx = edi;
    eax &= 0x0000ffff;
    sub_1e6ef8();
    ebx = 0x00000008;
    edx = edi + 5;
    eax = ebp;
    memoryASet(ds, edi + 4, 0x3a);
    goto loc_1e7377;
loc_1e736e: // 0160:1e736e
    ebx = 0x00000008;
    eax = ebp;
    edx = edi;
loc_1e7377: // 0160:1e7377
    sub_1e6ef8();
    if (memoryAGet(ds, esi + 21) != 0x50)
        goto loc_1e71d8;
    eax = edi;
    sub_1e7484();
    goto loc_1e71d8;
loc_1e7392: // 0160:1e7392
    ebx = memoryAGet32(ds, edx);
    ebx += 0x00000004;
    memoryASet32(ds, edx, ebx);
    al = memoryAGet(ds, ebx + -4);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    eax = 0x00000001;
    dh = memoryAGet(ds, esi + 20);
    edi = 0;
    dh &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, dh);
    goto loc_1e73e9;
loc_1e73bf: // 0160:1e73bf
    memoryASet32(ds, esi + 4, 0x00000000);
    al = memoryAGet(ds, esi + 21);
    memoryASet(ds, edi + 1, 0x00);
    memoryASet(ds, edi, al);
    memoryASet32(ds, esi + 8, 0x00000001);
    al = memoryAGet(ds, esi + 20);
    edi = 0;
    al &= 0xf9;
    memoryASet32(ds, esp + 4, edi);
    memoryASet(ds, esi + 20, al);
    eax = 0x00000001;
loc_1e73e9: // 0160:1e73e9
    if (memoryAGet32(ds, esp + 4) == 0x00000000)
        goto loc_1e742f;
    dl = memoryAGet(es, ecx);
    if (dl != 0x2d)
        goto loc_1e7403;
    ecx++;
    memoryASet(ds, esi + 24, 0x00);
    eax--;
    memoryASet(ds, esi + 23, dl);
    goto loc_1e741e;
loc_1e7403: // 0160:1e7403
    dh = memoryAGet(ds, esi + 20);
    if (!(dh & 0x02))
        goto loc_1e7411;
    memoryASet(ds, esi + 23, 0x20);
    goto loc_1e741a;
loc_1e7411: // 0160:1e7411
    if (!(dh & 0x04))
        goto loc_1e741e;
    memoryASet(ds, esi + 23, 0x2b);
loc_1e741a: // 0160:1e741a
    memoryASet(ds, esi + 24, 0x00);
loc_1e741e: // 0160:1e741e
    edx = memoryAGet32(ds, esi + 8);
    if ((int32_t)eax <= (int32_t)edx)
        goto loc_1e742a;
    memoryASet32(ds, esi + 8, eax);
    goto loc_1e742f;
loc_1e742a: // 0160:1e742a
    edx -= eax;
    memoryASet32(ds, esi + 12, edx);
loc_1e742f: // 0160:1e742f
    if (memoryAGet(ds, esi + 22) != 0x2a)
        goto loc_1e7442;
    dl = memoryAGet(ds, esi + 20);
    memoryASet(ds, esi + 23, 0x00);
    dl &= 0xf9;
    memoryASet(ds, esi + 20, dl);
loc_1e7442: // 0160:1e7442
    ebx = memoryAGet32(ds, esi + 8);
    if (ebx == 0xffffffff)
        goto loc_1e744e;
    if ((int32_t)eax >= (int32_t)ebx)
        goto loc_1e7457;
loc_1e744e: // 0160:1e744e
    if (memoryAGet(ds, esi + 21) == 0x63)
        goto loc_1e7457;
    memoryASet32(ds, esi + 8, eax);
loc_1e7457: // 0160:1e7457
    ebx = 0xffffffff;
    eax = esi + 23;
    edx = ds;
    sub_1e6eb1();
    ebp = memoryAGet32(ds, esi + 8);
    edx = memoryAGet32(ds, esi + 12);
    eax += ebp;
    ebx = memoryAGet32(ds, esi + 4);
    eax += edx;
    edx = es;
    ebx -= eax;
    eax = ecx;
    memoryASet32(ds, esi + 4, ebx);
    esp += 0x00000008;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    esp += 4;
}
void sub_1e7484() // 0160:1e7484 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
loc_1e7487: // 0160:1e7487
    if (memoryAGet(ds, edx) == 0x00)
        goto loc_1e749a;
    eax = 0;
    al = memoryAGet(ds, edx);
    sub_1eb126();
    memoryASet(ds, edx, al);
    edx++;
    goto loc_1e7487;
loc_1e749a: // 0160:1e749a
    edx = pop32();
    esp += 4;
}
void sub_1e749c() // 0160:1e749c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push(fs);
    if (memoryAGet32(ds, 0x20a724) != 0x00000000)
        goto loc_1e7567;
    fs = memoryAGet16(ds, 0x20a765);
    ecx = 0;
    dl = 0;
    eax = fs;
    edi = memoryAGet32(ds, 0x20a761);
    es = eax;
    eax = edi;
loc_1e74c7: // 0160:1e74c7
    if (dl == memoryAGet(es, eax))
        goto loc_1e74df;
loc_1e74cc: // 0160:1e74cc
    dh = memoryAGet(es, eax);
    ebx = eax + 1;
    if (dl == dh)
        goto loc_1e74da;
    eax = ebx;
    goto loc_1e74cc;
loc_1e74da: // 0160:1e74da
    ecx++;
    eax = ebx;
    goto loc_1e74c7;
loc_1e74df: // 0160:1e74df
    eax -= edi;
    if (eax)
        goto loc_1e74e8;
    eax = 0x00000001;
loc_1e74e8: // 0160:1e74e8
    sub_1e3562();
    edx = eax;
    ebx = eax;
    if (!eax)
        goto loc_1e7567;
    eax = ecx;
    eax <<= 2;
    eax += 0x00000004;
    eax += ecx;
    sub_1e3562();
    if (!eax)
        goto loc_1e7560;
    memoryASet32(ds, 0x20a724, eax);
    esi = 0;
    eax = fs;
    ecx = 0;
    es = eax;
    eax = edi;
loc_1e751b: // 0160:1e751b
    if (memoryAGet(es, eax) == 0x00)
        goto loc_1e753b;
    edx = memoryAGet32(ds, 0x20a724);
    memoryASet32(ds, ecx + edx, ebx);
loc_1e752a: // 0160:1e752a
    dl = memoryAGet(es, eax);
    eax++;
    memoryASet(ds, ebx, dl);
    ebx++;
    if (dl)
        goto loc_1e752a;
    ecx += 0x00000004;
    esi++;
    goto loc_1e751b;
loc_1e753b: // 0160:1e753b
    edx = memoryAGet32(ds, 0x20a724);
    memoryASet32(ds, ecx + edx, 0x00000000);
    ecx += 0x00000004;
    edx += ecx;
    ebx = esi;
    memoryASet32(ds, 0x20a728, edx);
    eax = edx;
    edx = 0;
    sub_1e3de0();
    goto loc_1e7567;
loc_1e7560: // 0160:1e7560
    eax = edx;
    sub_1e3df8();
loc_1e7567: // 0160:1e7567
    fs = pop();
    es = pop();
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e763f() // 0160:1e763f +long
{
    esp -= 4;
    goto loc_1e763f;
loc_1e7639: // 0160:1e7639
    edi = pop32();
    esi = pop32();
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1e763f: // 0160:1e763f
    push32(ebx);
    push32(ecx);
    push32(edx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(eax);
    if (eax < memoryAGet32(ds, 0x20a744))
        goto loc_1e76a6;
    if (memoryAGet(ds, 0x20a75e) != 0x00)
        goto loc_1e76b8;
    ebp = memoryAGet32(ds, esp);
    ebp += 0x0000000f;
    ebp >>= 4;
    if (ebp)
        goto loc_1e766a;
    ebp = 0x0fffffff;
loc_1e766a: // 0160:1e766a
    ebx = 0;
    eax = ds;
    bx = ax;
    ah = 0xed;
    interrupt(0x21);
    eax <<= 31;
    edi &= 0x0000ffff;
    edi |= eax;
    if ((int32_t)edi >= 0)
        goto loc_1e7694;
    es = edi;
    ebx = ebp;
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax < 0)
        goto loc_1e76a6;
loc_1e7694: // 0160:1e7694
    eax = ds;
    es = eax;
    ebx = ebp;
loc_1e769a: // 0160:1e769a
    ah = 0x4a;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1e76e9;
loc_1e76a6: // 0160:1e76a6
    sub_1e7875();
    memoryASet32(ds, eax, 0x00000005);
    eax = 0xffffffff;
    goto loc_1e76f7;
loc_1e76b8: // 0160:1e76b8
    ebx = memoryAGet32(ds, esp);
    ebx += 0x00000fff;
    ebx >>= 12;
    if (ebx)
        goto loc_1e76cd;
    ebx = 0x000fffff;
loc_1e76cd: // 0160:1e76cd
    dl = memoryAGet(ds, 0x20a75e);
    if (dl != 0x01)
        goto loc_1e76e3;
    if (dl != memoryAGet(ds, 0x20a75f))
        goto loc_1e76e3;
    ebx <<= 8;
loc_1e76e3: // 0160:1e76e3
    eax = ds;
    es = eax;
    goto loc_1e769a;
loc_1e76e9: // 0160:1e76e9
    ebx = memoryAGet32(ds, esp);
    eax = memoryAGet32(ds, 0x20a730);
    memoryASet32(ds, 0x20a730, ebx);
loc_1e76f7: // 0160:1e76f7
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    goto loc_1e7639;
}
void sub_1e7701() // 0160:1e7701 +long
{
    esp -= 4;
    eax = esp;
    eax -= memoryAGet32(ds, 0x20a740);
    esp += 4;
}
void sub_1e770a() // 0160:1e770a +long
{
    esp -= 4;
    memoryASet32(ds, 0x20a7c0, 0x00008000);
    esp += 4;
}
void sub_1e7715() // 0160:1e7715 +long
{
    esp -= 4;
    push32(ebx);
    ebx = edx;
    sub_1e771f();
    ebx = pop32();
    esp += 4;
}
void sub_1e771f() // 0160:1e771f +long
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(ecx);
    push32(esi);
    esp -= 0x00000020;
    ecx = eax;
    eax = memoryAGet32(ds, edx);
    memoryASet32(ss, ebp + -32, eax);
    eax = memoryAGet32(ds, edx + 4);
    memoryASet32(ss, ebp + -28, eax);
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ss, ebp + -24, eax);
    eax = memoryAGet32(ds, ebx + 4);
    memoryASet32(ss, ebp + -20, eax);
    if (!(cl & 0x40))
        goto loc_1e774b;
    esi = 0x00000001;
    goto loc_1e7785;
loc_1e774b: // 0160:1e774b
    if (!(cl & 0x80))
        goto loc_1e7757;
    esi = 0x00000002;
    goto loc_1e7785;
loc_1e7757: // 0160:1e7757
    if (!(ch & 0x01))
        goto loc_1e7763;
    esi = 0x00000003;
    goto loc_1e7785;
loc_1e7763: // 0160:1e7763
    if (!(ch & 0x08))
        goto loc_1e776f;
    esi = 0x00000004;
    goto loc_1e7785;
loc_1e776f: // 0160:1e776f
    if (!(ch & 0x02))
        goto loc_1e777b;
    esi = 0x00000006;
    goto loc_1e7785;
loc_1e777b: // 0160:1e777b
    if (!(ch & 0x04))
        goto loc_1e7785;
    esi = 0x00000005;
loc_1e7785: // 0160:1e7785
    eax = ecx;
    eax &= 0x0000001f;
    eax = memoryAGet32(ds, eax * 4 + 0x20a7c0);
    memoryASet32(ss, ebp + -40, esi);
    memoryASet32(ss, ebp + -36, eax);
    if (!(ch & 0x10))
        goto loc_1e77a9;
    fld64(memoryAGet64(ds, 0x20b734));
    stop("disassembly failed at 160:1e77a2 fchs ");
    memoryASet64(ss, ebp + -16, fstp64());
    goto loc_1e77eb;
loc_1e77a9: // 0160:1e77a9
    if (!(ch & 0x20))
        goto loc_1e77b8;
    ecx = 0;
    memoryASet32(ss, ebp + -16, ecx);
    memoryASet32(ss, ebp + -12, ecx);
    goto loc_1e77eb;
loc_1e77b8: // 0160:1e77b8
    if (!(ch & 0x40))
        goto loc_1e77cc;
    edx = 0;
    ebx = 0x3ff00000;
    memoryASet32(ss, ebp + -16, edx);
    memoryASet32(ss, ebp + -12, ebx);
    goto loc_1e77eb;
loc_1e77cc: // 0160:1e77cc
    if (!(ch & 0x80))
        goto loc_1e77e0;
    eax = memoryAGet32(ds, 0x20b734);
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ds, 0x20b738);
    goto loc_1e77e8;
loc_1e77e0: // 0160:1e77e0
    eax = memoryAGet32(ds, ebx);
    memoryASet32(ss, ebp + -16, eax);
    eax = memoryAGet32(ds, ebx + 4);
loc_1e77e8: // 0160:1e77e8
    memoryASet32(ss, ebp + -12, eax);
loc_1e77eb: // 0160:1e77eb
    eax = ebp + -40;
    sub_1eb182();
    esp = ebp + -8;
    esi = pop32();
    ecx = pop32();
    ebp = pop32();
    esp += 4;
}
void sub_1e77fa() // 0160:1e77fa +long +stackDrop12
{
    esp -= 4;
    push32(ebp);
    ebp = esp;
    push32(eax);
    push32(ebx);
    push32(ecx);
    push32(edx);
    esp -= 0x00000008;
    cl = memoryAGet(ss, ebp + 16);
    if (cl < 0x01)
        goto loc_1e783d;
    if (cl <= 0x03)
        goto loc_1e7818;
    if (cl == 0x04)
        goto loc_1e7829;
    goto loc_1e783d;
loc_1e7818: // 0160:1e7818
    al = cl;
    al |= 0x40;
    eax &= 0x000000ff;
    edx = ebp + 8;
    ah |= 0x20;
    goto loc_1e785f;
loc_1e7829: // 0160:1e7829
    stop("disassembly failed at 160:1e7829 fldz ");
    fcomp64(memoryAGet64(ss, ebp + 8));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1e783d;
    edx = 0;
    memoryASet32(ss, ebp + -24, edx);
    memoryASet32(ss, ebp + -20, edx);
    goto loc_1e7867;
loc_1e783d: // 0160:1e783d
    ebx = 0;
    bl = cl;
    edx = ebx;
    dh |= 0x81;
    if (cl != 0x06)
        goto loc_1e785a;
    stop("disassembly failed at 160:1e784b fldz ");
    fcomp64(memoryAGet64(ss, ebp + 8));
    ax = fnstsw();
    sahf();
    if (stop("sahf get flag"))
        goto loc_1e785a;
    bh |= 0x11;
    edx = ebx;
loc_1e785a: // 0160:1e785a
    eax = edx;
    edx = ebp + 8;
loc_1e785f: // 0160:1e785f
    sub_1e7715();
    memoryASet64(ss, ebp + -24, fstp64());
loc_1e7867: // 0160:1e7867
    fld64(memoryAGet64(ss, ebp + -24));
    esp = ebp + -16;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    eax = pop32();
    ebp = pop32();
    esp += 4;
    esp += 12;
}
void sub_1e7875() // 0160:1e7875 +long
{
    esp -= 4;
    eax = 0x003164e4;
    esp += 4;
}
void sub_1e787b() // 0160:1e787b +long
{
    esp -= 4;
    eax = 0x003164e0;
    esp += 4;
}
void sub_1e788d() // 0160:1e788d +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    edx = eax;
    bl = al;
    eax = 0;
    al = dl;
    sub_1e53f4();
    if (edx >= 0x00000100)
        goto loc_1e78dc;
    if (memoryAGet(ds, 0x20a767) < 0x03)
        goto loc_1e78c6;
    if (dl != 0x50)
        goto loc_1e78b6;
    bl = 0x0e;
    goto loc_1e78c6;
loc_1e78b6: // 0160:1e78b6
    if (dl < 0x22)
        goto loc_1e78bf;
    bl = 0x13;
    goto loc_1e78c6;
loc_1e78bf: // 0160:1e78bf
    if (dl < 0x20)
        goto loc_1e78c6;
    bl = 0x05;
loc_1e78c6: // 0160:1e78c6
    if (bl <= 0x13)
        goto loc_1e78cd;
    bl = 0x13;
loc_1e78cd: // 0160:1e78cd
    edx = 0;
    dl = bl;
    eax = memoryAGet32(ds, edx + 2140189);
    eax = sar32(eax, 0x18);
    goto loc_1e78e6;
loc_1e78dc: // 0160:1e78dc
    eax = edx;
    eax >>= 8;
    eax &= 0x000000ff;
loc_1e78e6: // 0160:1e78e6
    sub_1e53d1();
    eax = 0xffffffff;
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1e78f3() // 0160:1e78f3 +long
{
    esp -= 4;
    push32(edx);
    edx = 0;
    eax = memoryAGet32(ds, 0x20a750);
    memoryASet32(ds, 0x20a750, edx);
    if (eax)
        goto loc_1e790e;
    ah = 0x01;
    interrupt(0x21);
    eax &= 0x000000ff;
loc_1e790e: // 0160:1e790e
    edx = pop32();
    esp += 4;
}
void sub_1eac7e() // 0160:1eac7e +long +returnZero
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push(es);
    push32(ebp);
    push32(edx);
    ebp = eax;
    ax = 0x1600;
    interrupt(0x2f);
    if (!al)
        goto loc_1eace4;
    if (al == 0x80)
        goto loc_1eace4;
    al = 0;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax != 0x0666)
        goto loc_1eace4;
    al = 0x22;
    edx = 0;
    ecx = 0;
    ebx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    if (ax)
        goto loc_1eace4;
    dh = 0x01;
    al = 0x1e;
    ecx = 0;
    ebx = 0;
    memoryASet(ds, 0x20a8b9, dh);
    edx = 0;
    ah = 0xfa;
    interrupt(0x2f);
    eax = cs;
    ebx = 0x003164e8;
    edx = eax;
    ecx = ebx;
    al = 0x20;
    ecx >>= 16;
    ah = 0xfa;
    interrupt(0x2f);
    al = 0x01;
    goto loc_1ead3e;
loc_1eace4: // 0160:1eace4
    edx = memoryAGet32(ds, esp);
    if (ebp)
        goto loc_1eacf0;
    if (!dx)
        goto loc_1ead3c;
loc_1eacf0: // 0160:1eacf0
    esi = 0x0020b54c;
    eax = 0x00000a00;
    push(es);
    interrupt(0x31);
    eax = -flags.carry;
    es = pop();
    if (eax)
        goto loc_1ead3c;
    eax = 0x00000007;
    ebx = 0x001e7e40;
    ecx = cs;
    sub_1eb71b();
    es = memoryAGet16(ds, esp);
    ah = memoryAGet(es, ebp + 64);
    memoryASet(es, ebp + 62, 0x01);
    ah |= 0x04;
    memoryASet(es, ebp + 64, ah);
    eax = cr0;
    al |= 0x04;
    dl = 0x01;
    cr0 = eax;
    ah = 0x30;
    interrupt(0x21);
    memoryASet(ds, 0x20a8b8, dl);
loc_1ead3c: // 0160:1ead3c
    al = 0;
loc_1ead3e: // 0160:1ead3e
    esp += 0x00000004;
    ebp = pop32();
    es = pop();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    stop("stack_unbalanced");
    flags.zero = !esp;
    esp += 4;
}
void sub_1eada2() // 0160:1eada2 +long
{
    esp -= 4;
    push(ax);
    stop("disassembly failed at 160:1eada5 fninit ");
    fld1();
    stop("disassembly failed at 160:1eada9 fldz ");
    stop("disassembly failed at 160:1eadab fdivp st(1)");
    fld80(st(0));
    stop("disassembly failed at 160:1eadaf fchs ");
    stop("disassembly failed at 160:1eadb1 fcompp ");
    ax = fnstsw();
    al = 0x02;
    sahf();
    if (flags.zero)
        goto loc_1eadbc;
    al = 0x03;
loc_1eadbc: // 0160:1eadbc
    stop("disassembly failed at 160:1eadbd fninit ");
    fldcw(memoryAGet16(ds, esp));
    tx = memoryAGet16(ds, esp); memoryASet16(ds, esp, ax); ax = tx;
    ax = pop();
    esp += 4;
}
void sub_1eadc9() // 0160:1eadc9 +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ah = memoryAGet(ds, 0x20a551);
    ah &= 0xf8;
    dl = ah;
    memoryASet(ds, 0x20a551, ah);
    dl |= 0x04;
    ecx = 0x0020a510;
    memoryASet(ds, 0x20a551, dl);
    goto loc_1eae30;
loc_1eaded: // 0160:1eaded
    eax = 0x00000008;
    sub_1e3562();
    ebx = eax;
    if (eax)
        goto loc_1eae1c;
    eax = 0x00000008;
    sub_1e3562();
    ebx = eax;
    if (eax)
        goto loc_1eae1c;
    eax = 0x0020b55c;
    edx = 0x00000001;
    sub_1eb6fe();
loc_1eae1c: // 0160:1eae1c
    edx = memoryAGet32(ds, 0x3164d0);
    memoryASet32(ds, ebx + 4, ecx);
    memoryASet32(ds, 0x3164d0, ebx);
    ecx += 0x0000001a;
    memoryASet32(ds, ebx, edx);
loc_1eae30: // 0160:1eae30
    edx = memoryAGet32(ds, ecx + 12);
    if (edx)
        goto loc_1eaded;
    memoryASet32(ds, 0x3164c8, edx);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eaea4() // 0160:1eaea4 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000004;
    esi = eax;
    memoryASet32(ds, esp, edx);
    ebp = ebx;
    sub_1eaf8a();
    if (!(al & 0x80))
        goto loc_1eaee8;
    al = 0x02;
    ebx = esi;
    edx = 0;
    ah = 0x42;
    ecx = edx;
    ecx >>= 16;
    interrupt(0x21);
    dx = rcl16(dx, 0x0001);
    dx = ror16(dx, 0x0001);
    edx <<= 16;
    dx = ax;
    edi = edx;
    if ((int32_t)edx >= 0)
        goto loc_1eaee8;
    eax = 0;
    ax = dx;
loc_1eaee1: // 0160:1eaee1
    sub_1e788d();
    goto loc_1eaf18;
loc_1eaee8: // 0160:1eaee8
    edx = memoryAGet32(ds, esp);
    ebx = esi;
    ecx = ebp;
    ah = 0x40;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    esi = eax;
    edi = eax;
    edx = eax;
    if ((int32_t)eax >= 0)
        goto loc_1eaf08;
    eax = 0;
    ax = si;
    goto loc_1eaee1;
loc_1eaf08: // 0160:1eaf08
    if (eax == ebp)
        goto loc_1eaf16;
    eax = 0x0000000c;
    sub_1e53d1();
loc_1eaf16: // 0160:1eaf16
    eax = edx;
loc_1eaf18: // 0160:1eaf18
    esp += 0x00000004;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1eaf20() // 0160:1eaf20 +long
{
    bool temp_cf;

    esp -= 4;
    push32(ebx);
    if (!(edx & 0x7ff00000))
        goto loc_1eaf68;
    ebx = 0;
    flags.carry = ((uint64_t)eax + eax) >= 0x100000000ull;
    eax += eax;
    temp_cf = ((uint64_t)edx + edx + flags.carry) >= 0x100000000ull;
    edx += edx + flags.carry;
    flags.carry = temp_cf;
    ebx = rcr32(ebx, 0x00000001);
    flags.carry = ((uint64_t)eax + 0x20000000) >= 0x100000000ull;
    eax += 0x20000000;
    edx += 0x00000000 + flags.carry;
    if (!edx)
        goto loc_1eaf5f;
    if (edx >= 0x8fe00000)
        goto loc_1eaf5f;
    if (edx < 0x70200000)
        goto loc_1eaf68;
    edx -= 0x70000000;
    flags.carry = ((uint64_t)eax + eax) >= 0x100000000ull;
    eax += eax;
    edx += edx + flags.carry;
    flags.carry = ((uint64_t)eax + eax) >= 0x100000000ull;
    eax += eax;
    edx += edx + flags.carry;
    edx |= ebx;
    eax = edx;
    ebx = pop32();
    esp += 4;
    return;
loc_1eaf5f: // 0160:1eaf5f
    eax = 0x7f800000;
    eax |= ebx;
    ebx = pop32();
    esp += 4;
    return;
loc_1eaf68: // 0160:1eaf68
    eax = 0;
    ebx = pop32();
    esp += 4;
}
void sub_1eaf6c() // 0160:1eaf6c +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    ebx = eax;
    al = 0x00;
    ah = 0x44;
    interrupt(0x21);
    edx = rcl32(edx, 0x00000001);
    edx = ror32(edx, 0x00000001);
    al = !!(dl & 0x80);
    eax &= 0x000000ff;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eaf8a() // 0160:1eaf8a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(edx);
    edx = eax;
    if (eax < memoryAGet32(ds, 0x20a8cc))
        goto loc_1eaf9d;
    eax = 0;
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
    return;
loc_1eaf9d: // 0160:1eaf9d
    if ((int32_t)eax > (int32_t)0x00000005)
        goto loc_1eafd3;
    ebx = eax;
    eax = memoryAGet32(ds, 0x20a920);
    ebx <<= 2;
    eax += ebx;
    cl = memoryAGet(ds, eax + 1);
    if (cl & 0x40)
        goto loc_1eafd3;
    ch = cl;
    ch |= 0x40;
    memoryASet(ds, eax + 1, ch);
    eax = edx;
    sub_1eaf6c();
    if (!eax)
        goto loc_1eafd3;
    eax = memoryAGet32(ds, 0x20a920);
    memoryASet(ds, ebx + eax + 1, memoryAGet(ds, ebx + eax + 1) | 0x20);
loc_1eafd3: // 0160:1eafd3
    eax = memoryAGet32(ds, 0x20a920);
    eax = memoryAGet32(ds, eax + edx*4);
    edx = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eafdf() // 0160:1eafdf +long
{
    esp -= 4;
    push32(ebx);
    dh |= 0x40;
    ebx = edx;
    edx = eax;
    eax = memoryAGet32(ds, 0x20a920);
    edx <<= 2;
    memoryASet32(ds, edx + eax, ebx);
    ebx = pop32();
    esp += 4;
}
void sub_1eaff4() // 0160:1eaff4 +long
{
    esp -= 4;
    push32(edx);
    edx = eax;
    ah = 0x41;
    interrupt(0x21);
    eax = rcl32(eax, 0x00000001);
    eax = ror32(eax, 0x00000001);
    if ((int32_t)eax >= 0)
        goto loc_1eb00f;
    eax &= 0x0000ffff;
    sub_1e788d();
    edx = pop32();
    esp += 4;
    return;
loc_1eb00f: // 0160:1eb00f
    eax = 0;
    edx = pop32();
    esp += 4;
}
void sub_1eb038() // 0160:1eb038 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    esp -= 0x00000028;
    ebp = edx;
    edi = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 1;
    memoryASet(ds, esp, dl);
loc_1eb04e: // 0160:1eb04e
    ebx = esp + 36;
    memoryASet32(ds, esp + 36, edi);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, eax);
    al = memoryAGet(cs, edx + 2011155);
    memoryASet(ds, ecx, al);
    eax = memoryAGet32(ds, esp + 36);
    ecx++;
    if (eax)
        goto loc_1eb04e;
loc_1eb06e: // 0160:1eb06e
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1eb06e;
    eax = ebp;
    esp += 0x00000028;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    esp += 4;
}
void sub_1eb082() // 0160:1eb082 +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1eb094;
    if ((int32_t)eax >= 0)
        goto loc_1eb094;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1eb094: // 0160:1eb094
    sub_1eb038();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1eb0c2() // 0160:1eb0c2 +long
{
    esp -= 4;
    push32(ecx);
    push32(esi);
    push32(ebp);
    esp -= 0x00000028;
    push32(edx);
    ebp = ebx;
    esi = edx;
    dl = 0;
    ecx = esp + 5;
    memoryASet(ds, esp + 4, dl);
loc_1eb0d7: // 0160:1eb0d7
    ebx = esp + 40;
    memoryASet32(ds, esp + 40, ebp);
    edx = 0;
    div32(memoryAGet32(ds, ebx));
    memoryASet32(ds, ebx, edx);
    edx = memoryAGet32(ds, esp + 40);
    dl = memoryAGet(cs, edx + 2011293);
    memoryASet(ds, ecx, dl);
    ecx++;
    if (eax)
        goto loc_1eb0d7;
loc_1eb0f7: // 0160:1eb0f7
    ecx--;
    al = memoryAGet(ds, ecx);
    memoryASet(ds, esi, al);
    esi++;
    if (al)
        goto loc_1eb0f7;
    eax = memoryAGet32(ds, esp);
    esp += 0x0000002c;
    ebp = pop32();
    esi = pop32();
    ecx = pop32();
//    stop("stack_unbalanced");
    esp += 4;
}
void sub_1eb10b() // 0160:1eb10b +long
{
    esp -= 4;
    push32(ecx);
    ecx = edx;
    if (ebx != 0x0000000a)
        goto loc_1eb11d;
    if ((int32_t)eax >= 0)
        goto loc_1eb11d;
    eax = -eax;
    memoryASet(ds, edx, 0x2d);
    edx++;
loc_1eb11d: // 0160:1eb11d
    sub_1eb0c2();
    eax = ecx;
    ecx = pop32();
    esp += 4;
}
void sub_1eb126() // 0160:1eb126 +long
{
    esp -= 4;
    if ((int32_t)eax < (int32_t)0x00000061)
        goto loc_1eb133;
    if ((int32_t)eax > (int32_t)0x0000007a)
        goto loc_1eb133;
    eax -= 0x00000020;
loc_1eb133: // 0160:1eb133
    esp += 4;
    return;
}
void sub_1eb13a() // 0160:1eb13a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    esi = eax;
    ecx = edx;
    eax = 0x00000002;
    sub_1eb74b();
    ebx = eax;
    eax = esi;
    edx = ebx;
    eax = memoryAGet32(ds, eax * 4 + 0x20b73c);
    sub_1eb76a();
    eax = 0x0020b611;
    edx = ebx;
    sub_1eb76a();
    eax = ecx;
    edx = ebx;
    sub_1eb76a();
    eax = 0x0000000a;
    edx = ebx;
    sub_1e69fe();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eb182() // 0160:1eb182 +long
{
    esp -= 4;
    push32(ebx);
    push32(edx);
    ebx = eax;
    indirectCall(cs, memoryAGet32(ds, 0x20a924)); // 0160:1eb186;
    if (eax)
        goto loc_1eb1ab;
    edx = memoryAGet32(ds, ebx + 4);
    eax = memoryAGet32(ds, ebx);
    sub_1eb13a();
    if (memoryAGet32(ds, ebx) != 0x00000001)
        goto loc_1eb1a6;
    sub_1e53cc();
    goto loc_1eb1ab;
loc_1eb1a6: // 0160:1eb1a6
    sub_1e53dd();
loc_1eb1ab: // 0160:1eb1ab
    fld64(memoryAGet64(ds, ebx + 24));
    edx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eb6fe() // 0160:1eb6fe +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    ebx = eax;
    ecx = edx;
    edx = ds;
    sub_1ebce6();
    if (eax)
        goto loc_1eb718;
    eax = ebx;
    edx = ecx;
    sub_1e3979();
loc_1eb718: // 0160:1eb718
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1eb71b() // 0160:1eb71b +long
{
    esp -= 4;
    push32(edx);
    edx = ebx;
    bl = memoryAGet(ds, 0x20a75e);
    if (bl < 0x02)
        goto loc_1eb73c;
    if (bl > 0x08)
        goto loc_1eb73c;
    push(ds);
    ds = ecx;
    cl = al;
    al = 0x04;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
    return;
loc_1eb73c: // 0160:1eb73c
    push(ds);
    ds = ecx;
    ah = 0x25;
    interrupt(0x21);
    ds = pop();
    edx = pop32();
    esp += 4;
}
void sub_1eb74b() // 0160:1eb74b +long
{
    esp -= 4;
    push32(edx);
    if (eax <= 0x00000005)
        goto loc_1eb755;
    eax = 0;
    edx = pop32();
    esp += 4;
    return;
loc_1eb755: // 0160:1eb755
    edx = eax;
    eax <<= 2;
    eax -= edx;
    eax <<= 2;
    eax += edx;
    eax += eax;
    eax += 0x0020a510;
    edx = pop32();
    esp += 4;
}
void sub_1eb76a() // 0160:1eb76a +long
{
    esp -= 4;
    push32(ebx);
    push32(ecx);
    push32(esi);
    push32(edi);
    push32(ebp);
    ecx = eax;
    ebx = edx;
    if (memoryAGet32(ds, edx + 8) != 0x00000000)
        goto loc_1eb780;
    eax = ebx;
    sub_1e5407();
loc_1eb780: // 0160:1eb780
    ah = memoryAGet(ds, ebx + 13);
    edi = 0;
    if (!(ah & 0x04))
        goto loc_1eb79f;
    dl = ah;
    dl &= 0xf9;
    dh = dl;
    memoryASet(ds, ebx + 13, dl);
    dh |= 0x02;
    edi = 0x00000001;
    memoryASet(ds, ebx + 13, dh);
loc_1eb79f: // 0160:1eb79f
    ebp = ecx;
    esi = 0;
loc_1eb7a3: // 0160:1eb7a3
    eax = 0;
    al = memoryAGet(ds, ecx);
    if (!eax)
        goto loc_1eb7ba;
    edx = ebx;
    ecx++;
    sub_1e69fe();
    if (eax != 0xffffffff)
        goto loc_1eb7a3;
    esi = eax;
loc_1eb7ba: // 0160:1eb7ba
    if (!edi)
        goto loc_1eb7db;
    al = memoryAGet(ds, ebx + 13);
    al &= 0xf9;
    ah = al;
    memoryASet(ds, ebx + 13, al);
    ah |= 0x04;
    memoryASet(ds, ebx + 13, ah);
    if (esi)
        goto loc_1eb7db;
    eax = ebx;
    sub_1e58fc();
    esi = eax;
loc_1eb7db: // 0160:1eb7db
    if (esi)
        goto loc_1eb7e3;
    esi = ecx;
    esi -= ebp;
loc_1eb7e3: // 0160:1eb7e3
    eax = esi;
    ebp = pop32();
    edi = pop32();
    esi = pop32();
    ecx = pop32();
    ebx = pop32();
    esp += 4;
}
void sub_1ebce6() // 0160:1ebce6 +long
{
    esp -= 4;
    if (memoryAGet(ds, 0x20a92c) == 0x00)
        goto loc_1ebd09;
    edx &= 0x0000ffff;
    push32(edx);
    push32(eax);
    stop("breakpoint");
    goto loc_1ebd00;
    // gap 6 bytes
loc_1ebd00: // 0160:1ebd00
    eax = 0x00000001;
    esp += 0x00000008;
    stop("stack_unbalanced");
    esp += 4;
    return;
loc_1ebd09: // 0160:1ebd09
    eax = 0;
    esp += 4;
}
void fixReloc(uint16_t seg)
{
}

int GetProcAt(int seg, int ofs)
{
    int map[] = {
        0x1a8010, 0x160, 0x1a8010, 0x160, 0x1a801d, 0x1a801e, 0x160, 0x1a801e, 0x160, 0x1a8044, 
        0x1a8044, 0x160, 0x1a8044, 0x160, 0x1a8054, 0x1a8054, 0x160, 0x1a8054, 0x160, 0x1a807e, 
        0x1a807e, 0x160, 0x1a807e, 0x160, 0x1a81ba, 0x1a807e, 0x160, 0x1a81bd, 0x160, 0x1a81f3, 
        0x1a81f3, 0x160, 0x1a81f3, 0x160, 0x1a835d, 0x1a81f3, 0x160, 0x1a8360, 0x160, 0x1a840e, 
        0x1a81f3, 0x160, 0x1aa659, 0x160, 0x1aa6ea, 0x1a81f3, 0x160, 0x1aa6ed, 0x160, 0x1aa9d7, 
        0x1a81f3, 0x160, 0x1aaa24, 0x160, 0x1aaac4, 0x1a81f3, 0x160, 0x1aaac7, 0x160, 0x1aafe3, 
        0x1a81f3, 0x160, 0x1ab3f2, 0x160, 0x1abb6f, 0x1a81f3, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1a840e, 0x160, 0x1a840e, 0x160, 0x1a841e, 0x1a841e, 0x160, 0x1a841e, 0x160, 0x1a8499, 
        0x1a8499, 0x160, 0x1a8499, 0x160, 0x1a8596, 0x1a84d3, 0x160, 0x1a84d3, 0x160, 0x1a8596, 
        0x1a8596, 0x160, 0x1a8596, 0x160, 0x1a861d, 0x1a8596, 0x160, 0x1c87e8, 0x160, 0x1c8820, 
        0x1a85aa, 0x160, 0x1a85aa, 0x160, 0x1a861d, 0x1a85aa, 0x160, 0x1c87e8, 0x160, 0x1c8820, 
        0x1a861d, 0x160, 0x1a861d, 0x160, 0x1a862c, 0x1a861d, 0x160, 0x1b0da2, 0x160, 0x1b0ee3, 
        0x1a862c, 0x160, 0x1a862c, 0x160, 0x1a86b0, 0x1a86b0, 0x160, 0x1a86b0, 0x160, 0x1a88e4, 
        0x1a8760, 0x160, 0x1a8760, 0x160, 0x1a88e4, 0x1a88e4, 0x160, 0x1a88e4, 0x160, 0x1a8a9b, 
        0x1a8a9b, 0x160, 0x1a8a9b, 0x160, 0x1a8b15, 0x1a8b3c, 0x160, 0x1a8b3c, 0x160, 0x1a8c90, 
        0x1a8c90, 0x160, 0x1a8c90, 0x160, 0x1a8cae, 0x1a8cae, 0x160, 0x1a8cae, 0x160, 0x1a8d10, 
        0x1a8d10, 0x160, 0x1a8d10, 0x160, 0x1a8e36, 0x1a8e36, 0x160, 0x1a8e36, 0x160, 0x1a8f63, 
        0x1a8f63, 0x160, 0x1a8f63, 0x160, 0x1a8f94, 0x1a8f94, 0x160, 0x1a8f94, 0x160, 0x1a9055, 
        0x1a9055, 0x160, 0x1a9055, 0x160, 0x1a9058, 0x1a9c1f, 0x160, 0x1a9c1f, 0x160, 0x1a9c54, 
        0x1a9c54, 0x160, 0x1a9c54, 0x160, 0x1a9c89, 0x1a9c89, 0x160, 0x1a9c89, 0x160, 0x1a9cdc, 
        0x1a9cdc, 0x160, 0x1a9cdc, 0x160, 0x1a9d2f, 0x1a9d2f, 0x160, 0x1a9d2f, 0x160, 0x1aa00c, 
        0x1aa00c, 0x160, 0x1aa00c, 0x160, 0x1aa260, 0x1aa260, 0x160, 0x1aa260, 0x160, 0x1aa484, 
        0x1aa484, 0x160, 0x1aa484, 0x160, 0x1aa4e9, 0x1aa484, 0x160, 0x1c87e8, 0x160, 0x1c8820, 
        0x1aa4e9, 0x160, 0x1aa4e9, 0x160, 0x1aa553, 0x1aa4e9, 0x160, 0x1c87e8, 0x160, 0x1c8820, 
        0x1aa553, 0x160, 0x1aa553, 0x160, 0x1aa5d3, 0x1aa5d3, 0x160, 0x1aa5d3, 0x160, 0x1aa5d6, 
        0x1aa5d6, 0x160, 0x1aa5d6, 0x160, 0x1aa64a, 0x1aa64a, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1aa64a, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1aa9d7, 0x160, 0x1aa9d7, 0x160, 0x1aaa24, 
        0x1aa9d7, 0x160, 0x1c1e66, 0x160, 0x1c1e9b, 0x1aafe3, 0x160, 0x1aafe3, 0x160, 0x1ab386, 
        0x1ab386, 0x160, 0x1ab386, 0x160, 0x1ab3d2, 0x1ab3d2, 0x160, 0x1ab3d2, 0x160, 0x1ab3f2, 
        0x1abb6f, 0x160, 0x1abb6f, 0x160, 0x1abc11, 0x1abb6f, 0x160, 0x1bb88b, 0x160, 0x1bb88c, 
        0x1abc11, 0x160, 0x1abc11, 0x160, 0x1abc93, 0x1abc11, 0x160, 0x1c8704, 0x160, 0x1c8732, 
        0x1abc93, 0x160, 0x1abc93, 0x160, 0x1abdec, 0x1abc93, 0x160, 0x1abdef, 0x160, 0x1abe5b, 
        0x1abd5e, 0x160, 0x1abd5e, 0x160, 0x1abdec, 0x1abd5e, 0x160, 0x1abdef, 0x160, 0x1abe5b, 
        0x1abe5b, 0x160, 0x1abe5b, 0x160, 0x1ac17b, 0x1abe5b, 0x160, 0x1ac17e, 0x160, 0x1ac199, 
        0x1abe5b, 0x160, 0x1ac19c, 0x160, 0x1ac75e, 0x1ac75e, 0x160, 0x1ac75e, 0x160, 0x1ac775, 
        0x1ac75e, 0x160, 0x1ac778, 0x160, 0x1ac7de, 0x1ac7de, 0x160, 0x1ac7de, 0x160, 0x1ac839, 
        0x1ac839, 0x160, 0x1ac839, 0x160, 0x1ac863, 0x1ac863, 0x160, 0x1ac863, 0x160, 0x1ac9a6, 
        0x1ac863, 0x160, 0x1ac9a9, 0x160, 0x1ac9ef, 0x1ac863, 0x160, 0x1ac9f2, 0x160, 0x1aca1a, 
        0x1aca1a, 0x160, 0x1ac07a, 0x160, 0x1ac08f, 0x1aca1a, 0x160, 0x1aca1a, 0x160, 0x1acab5, 
        0x1aca1a, 0x160, 0x1acab8, 0x160, 0x1acdb4, 0x1acdb4, 0x160, 0x1acdb4, 0x160, 0x1ace94, 
        0x1ace94, 0x160, 0x1ace94, 0x160, 0x1acec3, 0x1acec3, 0x160, 0x1acec3, 0x160, 0x1acfa2, 
        0x1acec3, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 0x1acfa2, 0x160, 0x1acfa2, 0x160, 0x1ad031, 
        0x1ad031, 0x160, 0x1ad031, 0x160, 0x1ad47f, 0x1ad031, 0x160, 0x1ad4d0, 0x160, 0x1ad521, 
        0x1ad031, 0x160, 0x1ad572, 0x160, 0x1ad5c3, 0x1ad149, 0x160, 0x1ad149, 0x160, 0x1ad188, 
        0x1ad149, 0x160, 0x1ad3e5, 0x160, 0x1ad47f, 0x1ad149, 0x160, 0x1ad4d0, 0x160, 0x1ad521, 
        0x1ad149, 0x160, 0x1ad572, 0x160, 0x1ad5c3, 0x1ad188, 0x160, 0x1ad188, 0x160, 0x1ad258, 
        0x1ad188, 0x160, 0x1ad34b, 0x160, 0x1ad394, 0x1ad188, 0x160, 0x1ad3e5, 0x160, 0x1ad42e, 
        0x1ad258, 0x160, 0x1ad258, 0x160, 0x1ad34b, 0x1ad258, 0x160, 0x1ad3e5, 0x160, 0x1ad42e, 
        0x1ad34b, 0x160, 0x1ad34b, 0x160, 0x1ad394, 0x1ad42e, 0x160, 0x1ad42e, 0x160, 0x1ad47f, 
        0x1ad47f, 0x160, 0x1ad47f, 0x160, 0x1ad4d0, 0x1ad4d0, 0x160, 0x1ad4d0, 0x160, 0x1ad521, 
        0x1ad521, 0x160, 0x1ad521, 0x160, 0x1ad572, 0x1ad572, 0x160, 0x1ad572, 0x160, 0x1ad5c3, 
        0x1ad5c3, 0x160, 0x1ad5c3, 0x160, 0x1ad600, 0x1ad600, 0x160, 0x1ad600, 0x160, 0x1ad60e, 
        0x1ad60e, 0x160, 0x1ad60e, 0x160, 0x1ad86e, 0x1ad86e, 0x160, 0x1ad86e, 0x160, 0x1adaba, 
        0x1adaba, 0x160, 0x1adaba, 0x160, 0x1add06, 0x1add06, 0x160, 0x1add06, 0x160, 0x1adf52, 
        0x1adf52, 0x160, 0x1adf52, 0x160, 0x1ae073, 0x1ae073, 0x160, 0x1ae073, 0x160, 0x1ae99b, 
        0x1ae99b, 0x160, 0x1ae99b, 0x160, 0x1af190, 0x1ae9c3, 0x160, 0x1ae9c3, 0x160, 0x1af190, 
        0x1af190, 0x160, 0x1af190, 0x160, 0x1af488, 0x1af488, 0x160, 0x1af488, 0x160, 0x1af780, 
        0x1af780, 0x160, 0x1af780, 0x160, 0x1afa78, 0x1afa78, 0x160, 0x1afa78, 0x160, 0x1afd70, 
        0x1afd70, 0x160, 0x1afd70, 0x160, 0x1afd83, 0x1afd83, 0x160, 0x1afd83, 0x160, 0x1aff13, 
        0x1aff13, 0x160, 0x1aff13, 0x160, 0x1aff53, 0x1aff53, 0x160, 0x1aff53, 0x160, 0x1b0063, 
        0x1b0063, 0x160, 0x1b0063, 0x160, 0x1b0c20, 0x1b0c20, 0x160, 0x1b0c20, 0x160, 0x1b0c88, 
        0x1b0c88, 0x160, 0x1b0c88, 0x160, 0x1b0d9f, 0x1b0c88, 0x160, 0x1b0da2, 0x160, 0x1b0dfd, 
        0x1b0da2, 0x160, 0x1b0da2, 0x160, 0x1b0dfd, 0x1b0dfd, 0x160, 0x1b0da2, 0x160, 0x1b0ee3, 
        0x1b0ee3, 0x160, 0x1b0da2, 0x160, 0x1b0dfd, 0x1b0ee3, 0x160, 0x1b0ee3, 0x160, 0x1b10c5, 
        0x1b0f0a, 0x160, 0x1b0da2, 0x160, 0x1b0dfd, 0x1b0f0a, 0x160, 0x1b0f0a, 0x160, 0x1b10c5, 
        0x1b10c5, 0x160, 0x1b10c5, 0x160, 0x1b10ec, 0x1b10ec, 0x160, 0x1b10ec, 0x160, 0x1b1113, 
        0x1b1113, 0x160, 0x1b1113, 0x160, 0x1b16f6, 0x1b1113, 0x160, 0x1b16f9, 0x160, 0x1b1700, 
        0x1b1113, 0x160, 0x1b1703, 0x160, 0x1b1712, 0x1b1113, 0x160, 0x1b1715, 0x160, 0x1b17b7, 
        0x1b1113, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 0x1b1715, 0x160, 0x1b1715, 0x160, 0x1b17b7, 
        0x1b1715, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 0x1b17b7, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1b17b7, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 0x1b17b7, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1b18a6, 0x160, 0x1b18a6, 0x160, 0x1b191a, 0x1b18a6, 0x160, 0x1c72ac, 0x160, 0x1c7359, 
        0x1b18a6, 0x160, 0x1c735c, 0x160, 0x1c7569, 0x1b18a6, 0x160, 0x1c756c, 0x160, 0x1c76d1, 
        0x1b18a6, 0x160, 0x1c76d4, 0x160, 0x1c7954, 0x1b191a, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1b191a, 0x160, 0x1b191a, 0x160, 0x1b19ab, 0x1b191a, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1b191a, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1b198d, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1b198d, 0x160, 0x1b198d, 0x160, 0x1b19ab, 0x1b198d, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1b19ac, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 0x1b19e0, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1b1a14, 0x160, 0x1b1a14, 0x160, 0x1b1a48, 0x1b1a48, 0x160, 0x1a9519, 0x160, 0x1a9c1f, 
        0x1b1a48, 0x160, 0x1b1a48, 0x160, 0x1b1ad6, 0x1b1ad6, 0x160, 0x1a9519, 0x160, 0x1a9c1f, 
        0x1b1ad6, 0x160, 0x1b1ad6, 0x160, 0x1b1b7c, 0x1b1b7c, 0x160, 0x1a9094, 0x160, 0x1a9519, 
        0x1b1b7c, 0x160, 0x1b1b7c, 0x160, 0x1b1c22, 0x1b1c22, 0x160, 0x1b1c22, 0x160, 0x1b1c5c, 
        0x1b1c25, 0x160, 0x1b1c25, 0x160, 0x1b1c5c, 0x1b1c5c, 0x160, 0x1b1c25, 0x160, 0x1b1c6b, 
        0x1b1c6b, 0x160, 0x1b1c6b, 0x160, 0x1b1ca2, 0x1b1ca2, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1b1ca2, 0x160, 0x1b1ca2, 0x160, 0x1b1e81, 0x1b1e81, 0x160, 0x1b1e81, 0x160, 0x1b21e1, 
        0x1b1e81, 0x160, 0x1b21e4, 0x160, 0x1b232c, 0x1b1e81, 0x160, 0x1b232f, 0x160, 0x1b242c, 
        0x1b1ef1, 0x160, 0x1b1ef1, 0x160, 0x1b21e1, 0x1b1ef1, 0x160, 0x1b21e4, 0x160, 0x1b232c, 
        0x1b1ef1, 0x160, 0x1b232f, 0x160, 0x1b242c, 0x1b242c, 0x160, 0x1b242c, 0x160, 0x1b24f5, 
        0x1b24f5, 0x160, 0x1b24f5, 0x160, 0x1b2598, 0x1b2598, 0x160, 0x1b2598, 0x160, 0x1b266d, 
        0x1b266d, 0x160, 0x1b266d, 0x160, 0x1b2710, 0x1b29b6, 0x160, 0x1b29b6, 0x160, 0x1b2a07, 
        0x1b2a07, 0x160, 0x1b2a07, 0x160, 0x1b2aca, 0x1b2aca, 0x160, 0x1b2aca, 0x160, 0x1b2b87, 
        0x1b2b87, 0x160, 0x1b2b87, 0x160, 0x1b2bb1, 0x1b2b87, 0x160, 0x1bdf30, 0x160, 0x1bdfd5, 
        0x1b2bb1, 0x160, 0x1b2bb1, 0x160, 0x1b2cde, 0x1b2cde, 0x160, 0x1b2cde, 0x160, 0x1b2cf7, 
        0x1b2cde, 0x160, 0x1b2d10, 0x160, 0x1b2d3b, 0x1b2cde, 0x160, 0x1b2dcb, 0x160, 0x1b2df9, 
        0x1b2cde, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1b2cf7, 0x160, 0x1b2cf7, 0x160, 0x1b2d3b, 
        0x1b2cf7, 0x160, 0x1b2dcb, 0x160, 0x1b2df9, 0x1b2cf7, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 
        0x1b2d91, 0x160, 0x1b2d91, 0x160, 0x1b2df9, 0x1b2d91, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 
        0x1b2df9, 0x160, 0x1b2d3b, 0x160, 0x1b2d8e, 0x1b2df9, 0x160, 0x1b2da4, 0x160, 0x1b2f18, 
        0x1b2df9, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1b2f18, 0x160, 0x1b2f18, 0x160, 0x1b2f96, 
        0x1b2f82, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1b2f96, 0x160, 0x1b2f96, 0x160, 0x1b3052, 
        0x1b3052, 0x160, 0x1b3052, 0x160, 0x1b3199, 0x1b3052, 0x160, 0x1bd507, 0x160, 0x1bd51f, 
        0x1b3199, 0x160, 0x1b3199, 0x160, 0x1b336c, 0x1b3199, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1b336c, 0x160, 0x1b336c, 0x160, 0x1b33a4, 0x1b336c, 0x160, 0x1b33a7, 0x160, 0x1b33e3, 
        0x1b336c, 0x160, 0x1b33e6, 0x160, 0x1b3470, 0x1b336c, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b3470, 0x160, 0x1b3470, 0x160, 0x1b34bd, 0x1b34bd, 0x160, 0x1b34bd, 0x160, 0x1b34c8, 
        0x1b34bd, 0x160, 0x1b34d1, 0x160, 0x1b35a6, 0x1b34bd, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 
        0x1b34c8, 0x160, 0x1b34c8, 0x160, 0x1b35a6, 0x1b34c8, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 
        0x1b35a6, 0x160, 0x1b35a6, 0x160, 0x1b35db, 0x1b35a6, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b35a6, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b35db, 0x160, 0x1b35db, 0x160, 0x1b3602, 
        0x1b35db, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b3602, 0x160, 0x1b3602, 0x160, 0x1b36ec, 
        0x1b3602, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b36ec, 0x160, 0x1b36ec, 0x160, 0x1b382e, 
        0x1b36ec, 0x160, 0x1b3831, 0x160, 0x1b385b, 0x1b36ec, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b385b, 0x160, 0x1b385b, 0x160, 0x1b38a1, 0x1b38a1, 0x160, 0x1b38a1, 0x160, 0x1b38ea, 
        0x1b38ea, 0x160, 0x1b38ea, 0x160, 0x1b39c3, 0x1b38ea, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b3905, 0x160, 0x1b3905, 0x160, 0x1b39c3, 0x1b3905, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b39c3, 0x160, 0x1b39c3, 0x160, 0x1b39d1, 0x1b39c3, 0x160, 0x1b60a7, 0x160, 0x1b60b2, 
        0x1b39c3, 0x160, 0x1b60bb, 0x160, 0x1b60e2, 0x1b39c3, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1b39d1, 0x160, 0x1b39d1, 0x160, 0x1b39dc, 0x1b39d1, 0x160, 0x1b39e5, 0x160, 0x1b3ac8, 
        0x1b39d1, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 0x1b39dc, 0x160, 0x1b39dc, 0x160, 0x1b3ac8, 
        0x1b39dc, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 0x1b3ac8, 0x160, 0x1b3ac8, 0x160, 0x1b3af9, 
        0x1b3ac8, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b3af9, 0x160, 0x1b3af9, 0x160, 0x1b3b0f, 
        0x1b3b0f, 0x160, 0x1b3b0f, 0x160, 0x1b3b3d, 0x1b3b3d, 0x160, 0x1b3b3d, 0x160, 0x1b3b44, 
        0x1b3b3d, 0x160, 0x1b3b47, 0x160, 0x1b3d06, 0x1b3b3d, 0x160, 0x1b3d09, 0x160, 0x1b3d59, 
        0x1b3b3d, 0x160, 0x1b3d5c, 0x160, 0x1b3d9e, 0x1b3b3d, 0x160, 0x1b3da1, 0x160, 0x1b3de5, 
        0x1b3b3d, 0x160, 0x1b3de8, 0x160, 0x1b3def, 0x1b3b3d, 0x160, 0x1b3df2, 0x160, 0x1b3e9b, 
        0x1b3b3d, 0x160, 0x1b3e9e, 0x160, 0x1b3eb2, 0x1b3b3d, 0x160, 0x1b4316, 0x160, 0x1b4698, 
        0x1b3b3d, 0x160, 0x1b469b, 0x160, 0x1b46ff, 0x1b3b3d, 0x160, 0x1b63c9, 0x160, 0x1b63d3, 
        0x1b3b3d, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b3b47, 0x160, 0x1b3b47, 0x160, 0x1b3d06, 
        0x1b3b47, 0x160, 0x1b3d09, 0x160, 0x1b3d59, 0x1b3b47, 0x160, 0x1b3d5c, 0x160, 0x1b3d9e, 
        0x1b3b47, 0x160, 0x1b3da1, 0x160, 0x1b3de5, 0x1b3b47, 0x160, 0x1b3de8, 0x160, 0x1b3def, 
        0x1b3b47, 0x160, 0x1b3df2, 0x160, 0x1b3e9b, 0x1b3b47, 0x160, 0x1b3e9e, 0x160, 0x1b3eb2, 
        0x1b3b47, 0x160, 0x1b4316, 0x160, 0x1b4698, 0x1b3b47, 0x160, 0x1b469b, 0x160, 0x1b46ff, 
        0x1b3b47, 0x160, 0x1b63c9, 0x160, 0x1b63d3, 0x1b3b47, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1b3eb2, 0x160, 0x1b3eb2, 0x160, 0x1b41f2, 0x1b3eb2, 0x160, 0x1b41f5, 0x160, 0x1b4205, 
        0x1b3eb2, 0x160, 0x1b4208, 0x160, 0x1b4263, 0x1b3eb2, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b41f7, 0x160, 0x1b41f7, 0x160, 0x1b4205, 0x1b41f7, 0x160, 0x1b425a, 0x160, 0x1b4263, 
        0x1b41f7, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b4263, 0x160, 0x1b4263, 0x160, 0x1b426d, 
        0x1b4263, 0x160, 0x1b4e20, 0x160, 0x1b4e5b, 0x1b4263, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b426d, 0x160, 0x1b426d, 0x160, 0x1b42c5, 0x1b426d, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1b42c5, 0x160, 0x1b42c5, 0x160, 0x1b4316, 0x1b42c5, 0x160, 0x1b4dc7, 0x160, 0x1b4e20, 
        0x1b42c5, 0x160, 0x1b4e5b, 0x160, 0x1b4ec6, 0x1b42c5, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b46ff, 0x160, 0x1b46ff, 0x160, 0x1b4714, 0x1b46ff, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4714, 0x160, 0x1b4714, 0x160, 0x1b47cb, 0x1b4714, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1b4714, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b47cb, 0x160, 0x1b47cb, 0x160, 0x1b4814, 
        0x1b47cb, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1b47cb, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4814, 0x160, 0x1b4814, 0x160, 0x1b486a, 0x1b4814, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1b486a, 0x160, 0x1b486a, 0x160, 0x1b4925, 0x1b486a, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b4925, 0x160, 0x1b4925, 0x160, 0x1b4941, 0x1b4941, 0x160, 0x1b4941, 0x160, 0x1b49ae, 
        0x1b49ae, 0x160, 0x1b49ae, 0x160, 0x1b4a47, 0x1b49c8, 0x160, 0x1b49c8, 0x160, 0x1b4a47, 
        0x1b4a47, 0x160, 0x1b4a47, 0x160, 0x1b4a91, 0x1b4a47, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1b4a47, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b4a91, 0x160, 0x1b4a91, 0x160, 0x1b4ad8, 
        0x1b4a91, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1b4a91, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4ad8, 0x160, 0x1b4ad8, 0x160, 0x1b4aff, 0x1b4ad8, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1b4ad8, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b4b02, 0x160, 0x1b4b02, 0x160, 0x1b4b38, 
        0x1b4b02, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1b4b02, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4b3b, 0x160, 0x1b4b3b, 0x160, 0x1b4b5f, 0x1b4b3b, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4b5a, 0x160, 0x1b4b5a, 0x160, 0x1b4b5f, 0x1b4b5f, 0x160, 0x1b4b56, 0x160, 0x1b4b7d, 
        0x1b4b5f, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b4b7d, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1b4b7d, 0x160, 0x1b4b7d, 0x160, 0x1b4b8c, 0x1b4b7d, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b4b8c, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1b4b8c, 0x160, 0x1b4b8c, 0x160, 0x1b4bb8, 
        0x1b4b8c, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b4bb8, 0x160, 0x1b4bb8, 0x160, 0x1b4bc9, 
        0x1b4bc9, 0x160, 0x1b4bc9, 0x160, 0x1b4c48, 0x1b4c48, 0x160, 0x1b4c48, 0x160, 0x1b4c53, 
        0x1b4c48, 0x160, 0x1b4c81, 0x160, 0x1b4ceb, 0x1b4c48, 0x160, 0x1b4cee, 0x160, 0x1b4d88, 
        0x1b4c48, 0x160, 0x1b4d8b, 0x160, 0x1b4d9f, 0x1b4c48, 0x160, 0x1b4da2, 0x160, 0x1b4dc7, 
        0x1b4c48, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 0x1b4c53, 0x160, 0x1b4c53, 0x160, 0x1b4c5e, 
        0x1b4c53, 0x160, 0x1b4c81, 0x160, 0x1b4ceb, 0x1b4c53, 0x160, 0x1b4cee, 0x160, 0x1b4d88, 
        0x1b4c53, 0x160, 0x1b4d8b, 0x160, 0x1b4d9f, 0x1b4c53, 0x160, 0x1b4da2, 0x160, 0x1b4dc7, 
        0x1b4c53, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 0x1b4c61, 0x160, 0x1b4c61, 0x160, 0x1b4c6c, 
        0x1b4c61, 0x160, 0x1b4c81, 0x160, 0x1b4ceb, 0x1b4c61, 0x160, 0x1b4cee, 0x160, 0x1b4d88, 
        0x1b4c61, 0x160, 0x1b4d8b, 0x160, 0x1b4d9f, 0x1b4c61, 0x160, 0x1b4da2, 0x160, 0x1b4dc7, 
        0x1b4c61, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 0x1b4c6f, 0x160, 0x1b4c6f, 0x160, 0x1b4ceb, 
        0x1b4c6f, 0x160, 0x1b4cee, 0x160, 0x1b4d88, 0x1b4c6f, 0x160, 0x1b4d8b, 0x160, 0x1b4d9f, 
        0x1b4c6f, 0x160, 0x1b4da2, 0x160, 0x1b4dc7, 0x1b4c6f, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 
        0x1b4dc7, 0x160, 0x1b4dc7, 0x160, 0x1b4e20, 0x1b4dc7, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b4e20, 0x160, 0x1b4e20, 0x160, 0x1b4e5b, 0x1b4e20, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b4e5b, 0x160, 0x1b4e5b, 0x160, 0x1b4e8c, 0x1b4e5b, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b4e8c, 0x160, 0x1b4e8c, 0x160, 0x1b4ec6, 0x1b4e8c, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b4ec6, 0x160, 0x1b4ec6, 0x160, 0x1b4eda, 0x1b4eda, 0x160, 0x1b4eda, 0x160, 0x1b4f0e, 
        0x1b4edf, 0x160, 0x1b4edf, 0x160, 0x1b4f0e, 0x1b4f0e, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 
        0x1b4f37, 0x160, 0x1b4f37, 0x160, 0x1b4f8f, 0x1b4f8f, 0x160, 0x1b4f8f, 0x160, 0x1b4ff7, 
        0x1b4ff7, 0x160, 0x1b4ff7, 0x160, 0x1b5082, 0x1b4ff7, 0x160, 0x1b5085, 0x160, 0x1b5096, 
        0x1b5096, 0x160, 0x1b5096, 0x160, 0x1b5126, 0x1b5096, 0x160, 0x1bdf30, 0x160, 0x1bdfd5, 
        0x1b5126, 0x160, 0x1b5126, 0x160, 0x1b51a5, 0x1b5126, 0x160, 0x1b51a8, 0x160, 0x1b51f4, 
        0x1b51f4, 0x160, 0x1b51f4, 0x160, 0x1b5205, 0x1b5205, 0x160, 0x1b5205, 0x160, 0x1b524f, 
        0x1b521d, 0x160, 0x1b521d, 0x160, 0x1b524f, 0x1b524f, 0x160, 0x1b524f, 0x160, 0x1b52a1, 
        0x1b5267, 0x160, 0x1b5267, 0x160, 0x1b52a1, 0x1b52a1, 0x160, 0x1b52a1, 0x160, 0x1b52a8, 
        0x1b52a1, 0x160, 0x1b52ab, 0x160, 0x1b531f, 0x1b531f, 0x160, 0x1b531f, 0x160, 0x1b5329, 
        0x1b5329, 0x160, 0x1b5329, 0x160, 0x1b5422, 0x1b5442, 0x160, 0x1b5442, 0x160, 0x1b5477, 
        0x1b5477, 0x160, 0x1b5477, 0x160, 0x1b54af, 0x1b5477, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b54af, 0x160, 0x1b54af, 0x160, 0x1b54e7, 0x1b54af, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b54e7, 0x160, 0x1b54e7, 0x160, 0x1b551f, 0x1b54e7, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b551f, 0x160, 0x1b551f, 0x160, 0x1b5561, 0x1b551f, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b5561, 0x160, 0x1b5561, 0x160, 0x1b5585, 0x1b5561, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b5585, 0x160, 0x1b5585, 0x160, 0x1b55c7, 0x1b5585, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b55c7, 0x160, 0x1b55c7, 0x160, 0x1b560a, 0x1b55c7, 0x160, 0x1b5a1d, 0x160, 0x1b5a2a, 
        0x1b55c7, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 0x1b560a, 0x160, 0x1b560a, 0x160, 0x1b5643, 
        0x1b560a, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 0x1b5643, 0x160, 0x1b5643, 0x160, 0x1b56a2, 
        0x1b56a2, 0x160, 0x1b56a2, 0x160, 0x1b56fa, 0x1b56a2, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b56fa, 0x160, 0x1b56fa, 0x160, 0x1b5747, 0x1b56fa, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b5747, 0x160, 0x1b5747, 0x160, 0x1b57ae, 0x1b5747, 0x160, 0x1b5a3a, 0x160, 0x1b5af4, 
        0x1b57ae, 0x160, 0x1b57ae, 0x160, 0x1b57fb, 0x1b57ae, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b57fb, 0x160, 0x1b57fb, 0x160, 0x1b583e, 0x1b57fb, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b583e, 0x160, 0x1b583e, 0x160, 0x1b589b, 0x1b583e, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b589b, 0x160, 0x1b589b, 0x160, 0x1b58f3, 0x1b589b, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b58f3, 0x160, 0x1b58f3, 0x160, 0x1b596f, 0x1b58f3, 0x160, 0x1b5a3a, 0x160, 0x1b5af4, 
        0x1b596f, 0x160, 0x1b596f, 0x160, 0x1b5998, 0x1b596f, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b5998, 0x160, 0x1b5998, 0x160, 0x1b59b9, 0x1b5998, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b59bc, 0x160, 0x1b59bc, 0x160, 0x1b59d1, 0x1b59bc, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b59d4, 0x160, 0x1b59d4, 0x160, 0x1b5a15, 0x1b59d4, 0x160, 0x1b5a18, 0x160, 0x1b5a1a, 
        0x1b59d4, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 0x1b5a1d, 0x160, 0x1b5a1d, 0x160, 0x1b5a2a, 
        0x1b5a1d, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 0x1b5a2d, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b5a3a, 0x160, 0x1b5a3a, 0x160, 0x1b5af4, 0x1b5af4, 0x160, 0x1b5af4, 0x160, 0x1b5b7c, 
        0x1b5af4, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 0x1b5af4, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 
        0x1b5b7c, 0x160, 0x1b5b7c, 0x160, 0x1b5bf5, 0x1b5b7c, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 
        0x1b5b7c, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 0x1b5bf5, 0x160, 0x1b5bb6, 0x160, 0x1b5c89, 
        0x1b5bf5, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 0x1b5bf5, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 
        0x1b5c89, 0x160, 0x1b5c89, 0x160, 0x1b5d9c, 0x1b5d9c, 0x160, 0x1b5d9c, 0x160, 0x1b5e23, 
        0x1b5d9c, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 0x1b5ec4, 0x160, 0x1b5ec4, 0x160, 0x1b5f0f, 
        0x1b5f0f, 0x160, 0x1b5f0f, 0x160, 0x1b5f59, 0x1b5f59, 0x160, 0x1b5f59, 0x160, 0x1b5f91, 
        0x1b5f91, 0x160, 0x1b5f91, 0x160, 0x1b5fc9, 0x1b5fc9, 0x160, 0x1b5fc9, 0x160, 0x1b6083, 
        0x1b5fc9, 0x160, 0x1bd849, 0x160, 0x1bd85e, 0x1b6083, 0x160, 0x1b5a2d, 0x160, 0x1b5af4, 
        0x1b6083, 0x160, 0x1b6083, 0x160, 0x1b60a7, 0x1b60a7, 0x160, 0x1b60a7, 0x160, 0x1b60b2, 
        0x1b60a7, 0x160, 0x1b60bb, 0x160, 0x1b60e2, 0x1b60a7, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1b60d3, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b60e3, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1b60f2, 0x160, 0x1b60f2, 0x160, 0x1b6113, 0x1b6113, 0x160, 0x1b6113, 0x160, 0x1b6144, 
        0x1b6113, 0x160, 0x1b6147, 0x160, 0x1b6165, 0x1b6113, 0x160, 0x1b6168, 0x160, 0x1b616e, 
        0x1b6113, 0x160, 0x1b6171, 0x160, 0x1b617d, 0x1b6113, 0x160, 0x1b6180, 0x160, 0x1b618c, 
        0x1b6113, 0x160, 0x1b618f, 0x160, 0x1b619b, 0x1b6113, 0x160, 0x1b619e, 0x160, 0x1b61aa, 
        0x1b6113, 0x160, 0x1b61ad, 0x160, 0x1b61e5, 0x1b6113, 0x160, 0x1b61e8, 0x160, 0x1b6204, 
        0x1b6113, 0x160, 0x1b6207, 0x160, 0x1b620d, 0x1b6113, 0x160, 0x1b6210, 0x160, 0x1b621c, 
        0x1b6113, 0x160, 0x1b621f, 0x160, 0x1b622b, 0x1b6113, 0x160, 0x1b622e, 0x160, 0x1b623a, 
        0x1b6113, 0x160, 0x1b623d, 0x160, 0x1b6249, 0x1b6113, 0x160, 0x1b624c, 0x160, 0x1b6269, 
        0x1b6269, 0x160, 0x1b6269, 0x160, 0x1b63c9, 0x1b63d3, 0x160, 0x1b2d91, 0x160, 0x1b2df9, 
        0x1b63d3, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1b63d3, 0x160, 0x1b63d3, 0x160, 0x1b6427, 
        0x1b6427, 0x160, 0x1b6427, 0x160, 0x1b65e6, 0x1b65e6, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b65e6, 0x160, 0x1b65e6, 0x160, 0x1b66b7, 0x1b66b7, 0x160, 0x1b66b7, 0x160, 0x1b66e5, 
        0x1b66e5, 0x160, 0x1b66e5, 0x160, 0x1b66fb, 0x1b66e5, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1b66fb, 0x160, 0x1b66fb, 0x160, 0x1b6be9, 0x1b6be9, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b6be9, 0x160, 0x1b6be9, 0x160, 0x1b6d3f, 0x1b6be9, 0x160, 0x1b6d42, 0x160, 0x1b6d76, 
        0x1b6be9, 0x160, 0x1b6d79, 0x160, 0x1b6e5d, 0x1b6be9, 0x160, 0x1b6e60, 0x160, 0x1b6e94, 
        0x1b6be9, 0x160, 0x1b6e97, 0x160, 0x1b6f3a, 0x1b6be9, 0x160, 0x1b6f3d, 0x160, 0x1b6f71, 
        0x1b6be9, 0x160, 0x1b6f74, 0x160, 0x1b6f9d, 0x1b6f9d, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b6f9d, 0x160, 0x1b6f9d, 0x160, 0x1b6fce, 0x1b6fce, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b6fce, 0x160, 0x1b6fce, 0x160, 0x1b7018, 0x1b7018, 0x160, 0x1b7018, 0x160, 0x1b703c, 
        0x1b7018, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b703c, 0x160, 0x1b703c, 0x160, 0x1b7060, 
        0x1b703c, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b7060, 0x160, 0x1b7060, 0x160, 0x1b707e, 
        0x1b7060, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b707e, 0x160, 0x1b707e, 0x160, 0x1b709c, 
        0x1b707e, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b709c, 0x160, 0x1b709c, 0x160, 0x1b70ba, 
        0x1b709c, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1b70ba, 0x160, 0x1b70ba, 0x160, 0x1b7140, 
        0x1b7140, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b7140, 0x160, 0x1b7140, 0x160, 0x1b71fc, 
        0x1b71fc, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b71fc, 0x160, 0x1b71fc, 0x160, 0x1b72b8, 
        0x1b72b8, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b72b8, 0x160, 0x1b72b8, 0x160, 0x1b734c, 
        0x1b734c, 0x160, 0x1b734c, 0x160, 0x1b7445, 0x1b7445, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b7445, 0x160, 0x1b7445, 0x160, 0x1b7477, 0x1b7477, 0x160, 0x1b63c9, 0x160, 0x1b63d3, 
        0x1b7477, 0x160, 0x1b7477, 0x160, 0x1b7609, 0x1b7609, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1b7609, 0x160, 0x1b7609, 0x160, 0x1b7680, 0x1b7680, 0x160, 0x1b7680, 0x160, 0x1b77c2, 
        0x1b77c2, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b77c2, 0x160, 0x1b77c2, 0x160, 0x1b77e0, 
        0x1b77e0, 0x160, 0x1b77e0, 0x160, 0x1b77f4, 0x1b77e0, 0x160, 0x1be816, 0x160, 0x1be986, 
        0x1b77f4, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b77f4, 0x160, 0x1b77f4, 0x160, 0x1b7808, 
        0x1b7808, 0x160, 0x1b7808, 0x160, 0x1b781c, 0x1b7808, 0x160, 0x1be816, 0x160, 0x1be986, 
        0x1b781c, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b781c, 0x160, 0x1b781c, 0x160, 0x1b7945, 
        0x1b7945, 0x160, 0x1b7945, 0x160, 0x1b79d3, 0x1b79d3, 0x160, 0x1b79d3, 0x160, 0x1b7a3d, 
        0x1b79d3, 0x160, 0x1b7a40, 0x160, 0x1b7a6e, 0x1b7a6e, 0x160, 0x1b7a6e, 0x160, 0x1b7af3, 
        0x1b7af3, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b7af3, 0x160, 0x1b7af3, 0x160, 0x1b7afd, 
        0x1b7afd, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b7afd, 0x160, 0x1b7afd, 0x160, 0x1b7dc1, 
        0x1b7afd, 0x160, 0x1b9ca1, 0x160, 0x1b9dce, 0x1b7dc1, 0x160, 0x1b7dc1, 0x160, 0x1b7e59, 
        0x1b7e59, 0x160, 0x1b7e59, 0x160, 0x1b8075, 0x1b7f70, 0x160, 0x1b7f70, 0x160, 0x1b8075, 
        0x1b8075, 0x160, 0x1b8075, 0x160, 0x1b818f, 0x1b8154, 0x160, 0x1b8154, 0x160, 0x1b818f, 
        0x1b818f, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b818f, 0x160, 0x1b818f, 0x160, 0x1b81c4, 
        0x1b818f, 0x160, 0x1be816, 0x160, 0x1be986, 0x1b81c4, 0x160, 0x1b81c4, 0x160, 0x1b8241, 
        0x1b8241, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b8241, 0x160, 0x1b8241, 0x160, 0x1b836d, 
        0x1b8253, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b8253, 0x160, 0x1b8253, 0x160, 0x1b836d, 
        0x1b836d, 0x160, 0x1b836d, 0x160, 0x1b84d2, 0x1b84d2, 0x160, 0x1b84d2, 0x160, 0x1b84d9, 
        0x1b84d2, 0x160, 0x1b851b, 0x160, 0x1b85c3, 0x1b8511, 0x160, 0x1b8511, 0x160, 0x1b85c3, 
        0x1b85c3, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1b85c3, 0x160, 0x1b85c3, 0x160, 0x1b880b, 
        0x1b85c3, 0x160, 0x1b880e, 0x160, 0x1b88a2, 0x1b88a2, 0x160, 0x1b88a2, 0x160, 0x1b88cb, 
        0x1b88cb, 0x160, 0x1b88cb, 0x160, 0x1b88fc, 0x1b88d3, 0x160, 0x1b88d3, 0x160, 0x1b88fc, 
        0x1b88fc, 0x160, 0x1b88fc, 0x160, 0x1b8a86, 0x1b88fc, 0x160, 0x1b8a89, 0x160, 0x1b8c45, 
        0x1b8c45, 0x160, 0x1b8c45, 0x160, 0x1b8d12, 0x1b8c45, 0x160, 0x1b8e9a, 0x160, 0x1b8ec1, 
        0x1b8d12, 0x160, 0x1b8d12, 0x160, 0x1b8e9a, 0x1b8ec1, 0x160, 0x1b8ec1, 0x160, 0x1b8f3e, 
        0x1b8f3e, 0x160, 0x1b8f3e, 0x160, 0x1b8f52, 0x1b8f52, 0x160, 0x1b8f52, 0x160, 0x1b8f8f, 
        0x1b8f8f, 0x160, 0x1a81dc, 0x160, 0x1a81f3, 0x1b8f8f, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1b8f8f, 0x160, 0x1b8f8f, 0x160, 0x1b8ff7, 0x1b8f8f, 0x160, 0x1b902e, 0x160, 0x1b95f6, 
        0x1b8ff7, 0x160, 0x1b8ff7, 0x160, 0x1b9017, 0x1b9017, 0x160, 0x1a81dc, 0x160, 0x1a81f3, 
        0x1b9017, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 0x1b9017, 0x160, 0x1b9017, 0x160, 0x1b95f6, 
        0x1b9020, 0x160, 0x1a81dc, 0x160, 0x1a81f3, 0x1b9020, 0x160, 0x1b6be8, 0x160, 0x1b6be9, 
        0x1b9020, 0x160, 0x1b9020, 0x160, 0x1b95f6, 0x1b95f6, 0x160, 0x1b95f6, 0x160, 0x1b96d5, 
        0x1b96d5, 0x160, 0x1b96d5, 0x160, 0x1b97b1, 0x1b97b1, 0x160, 0x1b97b1, 0x160, 0x1b9824, 
        0x1b97b1, 0x160, 0x1b9827, 0x160, 0x1b982f, 0x1b97b1, 0x160, 0x1b9832, 0x160, 0x1b983a, 
        0x1b97b1, 0x160, 0x1b983d, 0x160, 0x1b9afb, 0x1b9afb, 0x160, 0x1b9afb, 0x160, 0x1b9b10, 
        0x1b9b10, 0x160, 0x1b9b10, 0x160, 0x1b9b3d, 0x1b9b3d, 0x160, 0x1b9b3d, 0x160, 0x1b9b8a, 
        0x1b9b3d, 0x160, 0x1b9b8d, 0x160, 0x1b9ca1, 0x1b9ca1, 0x160, 0x1b9ca1, 0x160, 0x1b9dce, 
        0x1b9dce, 0x160, 0x1b9dce, 0x160, 0x1b9fb2, 0x1b9dce, 0x160, 0x1b9fc3, 0x160, 0x1ba001, 
        0x1b9fb2, 0x160, 0x1b9fb2, 0x160, 0x1ba001, 0x1b9fc3, 0x160, 0x1b9fc3, 0x160, 0x1ba001, 
        0x1ba001, 0x160, 0x1ba001, 0x160, 0x1ba249, 0x1ba249, 0x160, 0x1ba249, 0x160, 0x1ba2f6, 
        0x1ba2f6, 0x160, 0x1ba2f6, 0x160, 0x1ba4c9, 0x1ba4c9, 0x160, 0x1b4b56, 0x160, 0x1b4b7d, 
        0x1ba4c9, 0x160, 0x1ba4c9, 0x160, 0x1ba572, 0x1ba4c9, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1ba572, 0x160, 0x1ba572, 0x160, 0x1ba724, 0x1ba724, 0x160, 0x1ba724, 0x160, 0x1ba8b8, 
        0x1ba8b8, 0x160, 0x1ba8b8, 0x160, 0x1ba934, 0x1ba934, 0x160, 0x1ba934, 0x160, 0x1ba9c8, 
        0x1ba9c8, 0x160, 0x1ba9c8, 0x160, 0x1ba9f5, 0x1ba9cd, 0x160, 0x1ba9cd, 0x160, 0x1ba9f5, 
        0x1ba9f5, 0x160, 0x1b18a6, 0x160, 0x1b191a, 0x1ba9f5, 0x160, 0x1ba9f5, 0x160, 0x1baa06, 
        0x1ba9f5, 0x160, 0x1c72ac, 0x160, 0x1c7359, 0x1ba9f5, 0x160, 0x1c735c, 0x160, 0x1c7569, 
        0x1ba9f5, 0x160, 0x1c756c, 0x160, 0x1c76d1, 0x1ba9f5, 0x160, 0x1c76d4, 0x160, 0x1c7954, 
        0x1baa06, 0x160, 0x1baa06, 0x160, 0x1bae3f, 0x1baa06, 0x160, 0x1bae42, 0x160, 0x1bae67, 
        0x1bae42, 0x160, 0x1bae42, 0x160, 0x1bae67, 0x1bae67, 0x160, 0x1bae67, 0x160, 0x1bafa9, 
        0x1bafa9, 0x160, 0x1bafa9, 0x160, 0x1bafc3, 0x1bafc3, 0x160, 0x1bafc3, 0x160, 0x1bafe1, 
        0x1bafc3, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bafe1, 0x160, 0x1bafe1, 0x160, 0x1bb00d, 
        0x1bb00d, 0x160, 0x1bb00d, 0x160, 0x1bb0d1, 0x1bb4ed, 0x160, 0x1bb4bc, 0x160, 0x1bb8a9, 
        0x1bb8a9, 0x160, 0x1bb8a9, 0x160, 0x1bb8ca, 0x1bb8ca, 0x160, 0x1bb8ca, 0x160, 0x1bb8eb, 
        0x1bb8eb, 0x160, 0x1bb8eb, 0x160, 0x1bbd8b, 0x1bb8eb, 0x160, 0x1bbee7, 0x160, 0x1bbee8, 
        0x1bba0a, 0x160, 0x1bba0a, 0x160, 0x1bbd8b, 0x1bba0a, 0x160, 0x1bbee7, 0x160, 0x1bbee8, 
        0x1bbd8b, 0x160, 0x1bbd8b, 0x160, 0x1bbee8, 0x1bbee8, 0x160, 0x1bbee8, 0x160, 0x1bc168, 
        0x1bc168, 0x160, 0x1bc168, 0x160, 0x1bc1a6, 0x1bc168, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1bc1a6, 0x160, 0x1bc17f, 0x160, 0x1bc1bf, 0x1bc1a6, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1bc1bf, 0x160, 0x1bc1bf, 0x160, 0x1bc274, 0x1bc1bf, 0x160, 0x1bd507, 0x160, 0x1bd51f, 
        0x1bc274, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1bc274, 0x160, 0x1bc274, 0x160, 0x1bc288, 
        0x1bc288, 0x160, 0x1bc288, 0x160, 0x1bc2af, 0x1bc288, 0x160, 0x1bd346, 0x160, 0x1bd3c8, 
        0x1bc2af, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1bc2af, 0x160, 0x1bc2af, 0x160, 0x1bc2de, 
        0x1bc2d6, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1bc2d6, 0x160, 0x1bc2d6, 0x160, 0x1bc2dd, 
        0x1bc2de, 0x160, 0x1bc2de, 0x160, 0x1bc2fe, 0x1bc2fe, 0x160, 0x1bc2fe, 0x160, 0x1bc31a, 
        0x1bc31a, 0x160, 0x1bc31a, 0x160, 0x1bc33c, 0x1bc33c, 0x160, 0x1bc33c, 0x160, 0x1bc39e, 
        0x1bc34a, 0x160, 0x1bc34a, 0x160, 0x1bc39e, 0x1bc39e, 0x160, 0x1bc39e, 0x160, 0x1bc3a9, 
        0x1bc3a9, 0x160, 0x1bc3a9, 0x160, 0x1bc3e8, 0x1bc3e8, 0x160, 0x1bc3e8, 0x160, 0x1bc40e, 
        0x1bc40e, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1bc40e, 0x160, 0x1bc40e, 0x160, 0x1bc447, 
        0x1bc40e, 0x160, 0x1bc44a, 0x160, 0x1bc4ef, 0x1bc4ef, 0x160, 0x1bc4ef, 0x160, 0x1bc563, 
        0x1bc4ef, 0x160, 0x1bc566, 0x160, 0x1bc57d, 0x1bc566, 0x160, 0x1bc566, 0x160, 0x1bc57d, 
        0x1bc57d, 0x160, 0x1bc57d, 0x160, 0x1bc633, 0x1bc57d, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1bc633, 0x160, 0x1bc633, 0x160, 0x1bc63b, 0x1bc63b, 0x160, 0x1bc63b, 0x160, 0x1bc9ea, 
        0x1bc9ea, 0x160, 0x1bc9ea, 0x160, 0x1bc9ff, 0x1bc9ff, 0x160, 0x1bc9ff, 0x160, 0x1bcb9e, 
        0x1bcb9e, 0x160, 0x1bcb9e, 0x160, 0x1bccf1, 0x1bcb9e, 0x160, 0x1bccf4, 0x160, 0x1bcd1f, 
        0x1bcd1f, 0x160, 0x1bcd1f, 0x160, 0x1bcee8, 0x1bcee8, 0x160, 0x1bcee8, 0x160, 0x1bcf73, 
        0x1bcee8, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bcef5, 0x160, 0x1bcef5, 0x160, 0x1bcf73, 
        0x1bcef5, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bcf73, 0x160, 0x1bcf73, 0x160, 0x1bd042, 
        0x1bd042, 0x160, 0x1bd042, 0x160, 0x1bd124, 0x1bd124, 0x160, 0x1bd124, 0x160, 0x1bd15a, 
        0x1bd15a, 0x160, 0x1bd15a, 0x160, 0x1bd17e, 0x1bd17e, 0x160, 0x1bd17e, 0x160, 0x1bd1ac, 
        0x1bd184, 0x160, 0x1bd184, 0x160, 0x1bd1ac, 0x1bd1ac, 0x160, 0x1bd1ac, 0x160, 0x1bd1d4, 
        0x1bd1d4, 0x160, 0x1bd1d4, 0x160, 0x1bd24a, 0x1bd24a, 0x160, 0x1bd24a, 0x160, 0x1bd2a7, 
        0x1bd2a7, 0x160, 0x1bd2a7, 0x160, 0x1bd2bb, 0x1bd2bb, 0x160, 0x1bd2bb, 0x160, 0x1bd346, 
        0x1bd2c7, 0x160, 0x1bd2c7, 0x160, 0x1bd346, 0x1bd346, 0x160, 0x1bd346, 0x160, 0x1bd3c8, 
        0x1bd3c8, 0x160, 0x1bd3c8, 0x160, 0x1bd406, 0x1bd406, 0x160, 0x1bd406, 0x160, 0x1bd432, 
        0x1bd406, 0x160, 0x1bd48e, 0x160, 0x1bd4ff, 0x1bd478, 0x160, 0x1bd478, 0x160, 0x1bd4ff, 
        0x1bd4ff, 0x160, 0x1bd4ff, 0x160, 0x1bd51f, 0x1bd507, 0x160, 0x1bd507, 0x160, 0x1bd51f, 
        0x1bd50f, 0x160, 0x1bd50f, 0x160, 0x1bd51f, 0x1bd51f, 0x160, 0x1bd51f, 0x160, 0x1bd56b, 
        0x1bd56b, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 0x1bd56b, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 
        0x1bd56b, 0x160, 0x1bd56b, 0x160, 0x1bd6c9, 0x1bd6c9, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 
        0x1bd6c9, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 0x1bd6c9, 0x160, 0x1bd6c9, 0x160, 0x1bd70b, 
        0x1bd6c9, 0x160, 0x1bd742, 0x160, 0x1bd7dd, 0x1bd70e, 0x160, 0x1b5dcb, 0x160, 0x1b5e23, 
        0x1bd70e, 0x160, 0x1b5e26, 0x160, 0x1b5ec4, 0x1bd70e, 0x160, 0x1bd70e, 0x160, 0x1bd7dd, 
        0x1bd7dd, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bd825, 0x160, 0x1bd825, 0x160, 0x1bd849, 
        0x1bd849, 0x160, 0x1bd849, 0x160, 0x1bd85e, 0x1bd85e, 0x160, 0x1b5442, 0x160, 0x1b5477, 
        0x1bd85e, 0x160, 0x1bd85e, 0x160, 0x1bd879, 0x1bd863, 0x160, 0x1b5442, 0x160, 0x1b5477, 
        0x1bd863, 0x160, 0x1bd863, 0x160, 0x1bd879, 0x1bd879, 0x160, 0x1b5442, 0x160, 0x1b5477, 
        0x1bd879, 0x160, 0x1bd879, 0x160, 0x1bd894, 0x1bd87e, 0x160, 0x1b5442, 0x160, 0x1b5477, 
        0x1bd87e, 0x160, 0x1bd87e, 0x160, 0x1bd894, 0x1bd894, 0x160, 0x1b521d, 0x160, 0x1b524f, 
        0x1bd894, 0x160, 0x1bd894, 0x160, 0x1bd8b7, 0x1bd899, 0x160, 0x1b521d, 0x160, 0x1b524f, 
        0x1bd899, 0x160, 0x1bd899, 0x160, 0x1bd8b7, 0x1bd8b7, 0x160, 0x1bd8b7, 0x160, 0x1bd90e, 
        0x1bd8d7, 0x160, 0x1bd8d7, 0x160, 0x1bd90e, 0x1bd90e, 0x160, 0x1bd90e, 0x160, 0x1bd930, 
        0x1bd930, 0x160, 0x1bd930, 0x160, 0x1bd96a, 0x1bd96a, 0x160, 0x1bd96a, 0x160, 0x1bd9e7, 
        0x1bd9e7, 0x160, 0x1bd9e7, 0x160, 0x1bdb00, 0x1bdb00, 0x160, 0x1bdb00, 0x160, 0x1bdb66, 
        0x1bdb00, 0x160, 0x1bdb69, 0x160, 0x1bdbae, 0x1bdb00, 0x160, 0x1bdbb1, 0x160, 0x1bdc88, 
        0x1bdc88, 0x160, 0x1bdc88, 0x160, 0x1bdee4, 0x1bdee4, 0x160, 0x1bdee4, 0x160, 0x1bdf30, 
        0x1bdf30, 0x160, 0x1bdf30, 0x160, 0x1bdfd5, 0x1bdfd5, 0x160, 0x1b2d91, 0x160, 0x1b2df9, 
        0x1bdfd5, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1bdfd5, 0x160, 0x1bdfd5, 0x160, 0x1be01a, 
        0x1be01a, 0x160, 0x1be01a, 0x160, 0x1be14f, 0x1be14f, 0x160, 0x1bd435, 0x160, 0x1bd478, 
        0x1be14f, 0x160, 0x1bd48e, 0x160, 0x1bd4ff, 0x1be14f, 0x160, 0x1be14f, 0x160, 0x1be2c6, 
        0x1be2c6, 0x160, 0x1bd507, 0x160, 0x1bd51f, 0x1be2c6, 0x160, 0x1be2c6, 0x160, 0x1be39c, 
        0x1be39c, 0x160, 0x1be39c, 0x160, 0x1be455, 0x1be455, 0x160, 0x1be455, 0x160, 0x1be472, 
        0x1be4a2, 0x160, 0x1be4a2, 0x160, 0x1be5a6, 0x1be4a7, 0x160, 0x1be4a7, 0x160, 0x1be5a6, 
        0x1be5a6, 0x160, 0x1be5a6, 0x160, 0x1be628, 0x1be628, 0x160, 0x1be628, 0x160, 0x1be64f, 
        0x1be64f, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1be64f, 0x160, 0x1be64f, 0x160, 0x1be66c, 
        0x1be64f, 0x160, 0x1be687, 0x160, 0x1be796, 0x1be66c, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1be66c, 0x160, 0x1be66c, 0x160, 0x1be796, 0x1be67e, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1be67e, 0x160, 0x1be67e, 0x160, 0x1be796, 0x1be796, 0x160, 0x1be796, 0x160, 0x1be7c6, 
        0x1be7c6, 0x160, 0x1be7c6, 0x160, 0x1be813, 0x1be7c6, 0x160, 0x1be816, 0x160, 0x1be986, 
        0x1be816, 0x160, 0x1be816, 0x160, 0x1be986, 0x1be986, 0x160, 0x1be986, 0x160, 0x1be9da, 
        0x1be9d2, 0x160, 0x1be9d2, 0x160, 0x1be9da, 0x1be9da, 0x160, 0x1b2cde, 0x160, 0x1b2cf7, 
        0x1be9da, 0x160, 0x1b2d10, 0x160, 0x1b2d3b, 0x1be9da, 0x160, 0x1b2dcb, 0x160, 0x1b2df9, 
        0x1be9da, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1be9da, 0x160, 0x1be9da, 0x160, 0x1bea97, 
        0x1bea97, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1bea97, 0x160, 0x1bea97, 0x160, 0x1beae9, 
        0x1bea97, 0x160, 0x1beb72, 0x160, 0x1bebdc, 0x1beae9, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 
        0x1beae9, 0x160, 0x1beae9, 0x160, 0x1bebdd, 0x1bebdd, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 
        0x1bebdd, 0x160, 0x1bebdd, 0x160, 0x1bec59, 0x1bebdd, 0x160, 0x1bed1e, 0x160, 0x1bed9e, 
        0x1bec59, 0x160, 0x1b2f82, 0x160, 0x1b2f96, 0x1bec59, 0x160, 0x1bec59, 0x160, 0x1bed9e, 
        0x1bed9e, 0x160, 0x1bed9e, 0x160, 0x1bee9c, 0x1bee9c, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1bee9c, 0x160, 0x1bee9c, 0x160, 0x1beec4, 0x1beec4, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1beec4, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1beec4, 0x160, 0x1beec4, 0x160, 0x1bef0c, 
        0x1bef0c, 0x160, 0x1bef0c, 0x160, 0x1bf077, 0x1bef15, 0x160, 0x1bef15, 0x160, 0x1bf077, 
        0x1bf077, 0x160, 0x1bf077, 0x160, 0x1bf07d, 0x1bf07d, 0x160, 0x1bf07d, 0x160, 0x1bf08c, 
        0x1bf08c, 0x160, 0x1bf08c, 0x160, 0x1bf269, 0x1bf08c, 0x160, 0x1bf5f8, 0x160, 0x1bf651, 
        0x1bf269, 0x160, 0x1bf214, 0x160, 0x1bf3bf, 0x1bf269, 0x160, 0x1bf3c2, 0x160, 0x1bf456, 
        0x1bf269, 0x160, 0x1bf5f8, 0x160, 0x1bf651, 0x1bf269, 0x160, 0x1bf97b, 0x160, 0x1bf9c6, 
        0x1bf269, 0x160, 0x1bfedb, 0x160, 0x1bff01, 0x1bf269, 0x160, 0x1c066b, 0x160, 0x1c06a3, 
        0x1bf456, 0x160, 0x1bf456, 0x160, 0x1bf49e, 0x1bf49e, 0x160, 0x1bf49e, 0x160, 0x1bf4c9, 
        0x1bf4c9, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1bf4c9, 0x160, 0x1bf4c9, 0x160, 0x1bf4ea, 
        0x1bf4ea, 0x160, 0x1bf4ea, 0x160, 0x1bf71f, 0x1bf4ea, 0x160, 0x1bf722, 0x160, 0x1bf786, 
        0x1bf4ea, 0x160, 0x1bf789, 0x160, 0x1bf923, 0x1bf4ea, 0x160, 0x1bf97b, 0x160, 0x1bf9c6, 
        0x1bf5ae, 0x160, 0x1bf5ae, 0x160, 0x1bf71f, 0x1bf5ae, 0x160, 0x1bf722, 0x160, 0x1bf786, 
        0x1bf5ae, 0x160, 0x1bf789, 0x160, 0x1bf923, 0x1bf5ae, 0x160, 0x1bf97b, 0x160, 0x1bf9c6, 
        0x1bf923, 0x160, 0x1bf923, 0x160, 0x1bf97b, 0x1bf9c6, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1bf9c6, 0x160, 0x1bf9c6, 0x160, 0x1bf9d1, 0x1bf9d1, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1bf9d1, 0x160, 0x1bf9d1, 0x160, 0x1bf9e7, 0x1bf9e7, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1bf9e7, 0x160, 0x1bf9e7, 0x160, 0x1bf9f2, 0x1bf9f2, 0x160, 0x1bf5f8, 0x160, 0x1bf651, 
        0x1bf9f2, 0x160, 0x1bf9f2, 0x160, 0x1bfa89, 0x1bf9f2, 0x160, 0x1bfa8c, 0x160, 0x1bfba5, 
        0x1bfc08, 0x160, 0x1bfba5, 0x160, 0x1bfcbb, 0x1bfc08, 0x160, 0x1bfcc6, 0x160, 0x1bfcf9, 
        0x1bfc08, 0x160, 0x1bfcfc, 0x160, 0x1bfd0f, 0x1bfc08, 0x160, 0x1bfedb, 0x160, 0x1bff01, 
        0x1bfc08, 0x160, 0x1c008e, 0x160, 0x1c034d, 0x1bfc08, 0x160, 0x1c0350, 0x160, 0x1c0466, 
        0x1bfc08, 0x160, 0x1c0646, 0x160, 0x1c06b3, 0x1bfc33, 0x160, 0x1bfc33, 0x160, 0x1bfcbb, 
        0x1bfc33, 0x160, 0x1bfcc6, 0x160, 0x1bfcf9, 0x1bfc33, 0x160, 0x1bfcfc, 0x160, 0x1bfd0f, 
        0x1bfc33, 0x160, 0x1bfedb, 0x160, 0x1bff01, 0x1bfc33, 0x160, 0x1c008e, 0x160, 0x1c034d, 
        0x1bfc33, 0x160, 0x1c0350, 0x160, 0x1c0466, 0x1bfc33, 0x160, 0x1c0646, 0x160, 0x1c06b3, 
        0x1bfcbb, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1bfcbb, 0x160, 0x1bfcbb, 0x160, 0x1bfcc6, 
        0x1bfd0f, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bfd0f, 0x160, 0x1bfd0f, 0x160, 0x1bfd3e, 
        0x1bfd3e, 0x160, 0x1bfd3e, 0x160, 0x1bfd6d, 0x1bfd3e, 0x160, 0x1bfd70, 0x160, 0x1bfd9d, 
        0x1bfd3e, 0x160, 0x1bfda0, 0x160, 0x1bfe41, 0x1bfe41, 0x160, 0x1bfe41, 0x160, 0x1bfe67, 
        0x1bfe67, 0x160, 0x1be816, 0x160, 0x1be986, 0x1bfe67, 0x160, 0x1bfe67, 0x160, 0x1bfedb, 
        0x1bfedb, 0x160, 0x1bfedb, 0x160, 0x1bff01, 0x1bff01, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1bff01, 0x160, 0x1bff01, 0x160, 0x1bff3d, 0x1bff3d, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1bff3d, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1bff3d, 0x160, 0x1bff3d, 0x160, 0x1bffa9, 
        0x1bffa9, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1bffa9, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1bffa9, 0x160, 0x1bffa9, 0x160, 0x1bffcd, 0x1bffce, 0x160, 0x1bffce, 0x160, 0x1bfff9, 
        0x1bfff9, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1bfff9, 0x160, 0x1bfff9, 0x160, 0x1c003b, 
        0x1c003b, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c003b, 0x160, 0x1c003b, 0x160, 0x1c004f, 
        0x1c004f, 0x160, 0x1c004f, 0x160, 0x1c007a, 0x1c007a, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1c007a, 0x160, 0x1c007a, 0x160, 0x1c008e, 0x1c0466, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 
        0x1c0466, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1c0466, 0x160, 0x1c0466, 0x160, 0x1c049d, 
        0x1c049d, 0x160, 0x1c049d, 0x160, 0x1c04c8, 0x1c04c8, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1c04c8, 0x160, 0x1c04c8, 0x160, 0x1c04e6, 0x1c04e6, 0x160, 0x1c04e6, 0x160, 0x1c05ef, 
        0x1c05ef, 0x160, 0x1c05ef, 0x160, 0x1c0646, 0x1c0636, 0x160, 0x1c0636, 0x160, 0x1c0646, 
        0x1c06b3, 0x160, 0x1a8054, 0x160, 0x1a807e, 0x1c06b3, 0x160, 0x1c06b3, 0x160, 0x1c07ae, 
        0x1c06b3, 0x160, 0x1c07b1, 0x160, 0x1c094a, 0x1c094a, 0x160, 0x1c094a, 0x160, 0x1c0975, 
        0x1c0975, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1c0975, 0x160, 0x1c0975, 0x160, 0x1c098b, 
        0x1c098b, 0x160, 0x1c098b, 0x160, 0x1c09ca, 0x1c098b, 0x160, 0x1c108f, 0x160, 0x1c10ee, 
        0x1c09ca, 0x160, 0x1c09ca, 0x160, 0x1c09f5, 0x1c09f5, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1c09f5, 0x160, 0x1c09f5, 0x160, 0x1c0a16, 0x1c0a16, 0x160, 0x1c0a16, 0x160, 0x1c0b03, 
        0x1c0b03, 0x160, 0x1c0b03, 0x160, 0x1c0b64, 0x1c0b03, 0x160, 0x1c1db9, 0x160, 0x1c1e9b, 
        0x1c0b64, 0x160, 0x1c0b64, 0x160, 0x1c0c58, 0x1c0b64, 0x160, 0x1c0c5b, 0x160, 0x1c0ce8, 
        0x1c0b64, 0x160, 0x1c0ceb, 0x160, 0x1c0d00, 0x1c0d00, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1c0d00, 0x160, 0x1be816, 0x160, 0x1be986, 0x1c0d00, 0x160, 0x1c0d00, 0x160, 0x1c0d29, 
        0x1c0d29, 0x160, 0x1c0d29, 0x160, 0x1c0e17, 0x1c0d29, 0x160, 0x1c0e1a, 0x160, 0x1c0e75, 
        0x1c0d29, 0x160, 0x1c0e78, 0x160, 0x1c0eff, 0x1c0eff, 0x160, 0x1c0eff, 0x160, 0x1c0f25, 
        0x1c0f25, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c0f25, 0x160, 0x1c0f25, 0x160, 0x1c0f4d, 
        0x1c0f4d, 0x160, 0x1b5267, 0x160, 0x1b52a1, 0x1c0f4d, 0x160, 0x1c0f4d, 0x160, 0x1c0f92, 
        0x1c0f92, 0x160, 0x1c0f92, 0x160, 0x1c103c, 0x1c103c, 0x160, 0x1c0f92, 0x160, 0x1c108f, 
        0x1c10ee, 0x160, 0x1c10ee, 0x160, 0x1c1122, 0x1c1122, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1c1122, 0x160, 0x1c1122, 0x160, 0x1c112d, 0x1c112d, 0x160, 0x1a8054, 0x160, 0x1a807e, 
        0x1c112d, 0x160, 0x1c112d, 0x160, 0x1c11f4, 0x1c11a3, 0x160, 0x1a8054, 0x160, 0x1a807e, 
        0x1c11a3, 0x160, 0x1c11a3, 0x160, 0x1c11f4, 0x1c11f4, 0x160, 0x1c11f4, 0x160, 0x1c126f, 
        0x1c126f, 0x160, 0x1c126f, 0x160, 0x1c13b8, 0x1c13b8, 0x160, 0x1c13b8, 0x160, 0x1c13bf, 
        0x1c13b8, 0x160, 0x1c5215, 0x160, 0x1c52c2, 0x1c13c0, 0x160, 0x1c13c0, 0x160, 0x1c151e, 
        0x1c13c0, 0x160, 0x1c15eb, 0x160, 0x1c167d, 0x1c151e, 0x160, 0x1c151e, 0x160, 0x1c1553, 
        0x1c1553, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c1553, 0x160, 0x1c1553, 0x160, 0x1c1567, 
        0x1c1567, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1c1567, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c1567, 0x160, 0x1c1567, 0x160, 0x1c1588, 0x1c1588, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 
        0x1c1588, 0x160, 0x1c1588, 0x160, 0x1c15eb, 0x1c167d, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c167d, 0x160, 0x1c167d, 0x160, 0x1c1692, 0x1c1692, 0x160, 0x1c1692, 0x160, 0x1c17cd, 
        0x1c1692, 0x160, 0x1c17d0, 0x160, 0x1c1834, 0x1c1692, 0x160, 0x1c1837, 0x160, 0x1c1a0b, 
        0x1c19b0, 0x160, 0x1c1701, 0x160, 0x1c170b, 0x1c19b0, 0x160, 0x1c19b0, 0x160, 0x1c1a0b, 
        0x1c1a0b, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1c1a0b, 0x160, 0x1c1a0b, 0x160, 0x1c1a37, 
        0x1c1a37, 0x160, 0x1b60e3, 0x160, 0x1b60f2, 0x1c1a37, 0x160, 0x1c1a37, 0x160, 0x1c1a63, 
        0x1c1a63, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1c1a63, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c1a63, 0x160, 0x1c1a63, 0x160, 0x1c1ad8, 0x1c1ad8, 0x160, 0x1b4f0e, 0x160, 0x1b4f37, 
        0x1c1ad8, 0x160, 0x1c1ad8, 0x160, 0x1c1b47, 0x1c1b47, 0x160, 0x1c1b47, 0x160, 0x1c1b76, 
        0x1c1b76, 0x160, 0x1c1b76, 0x160, 0x1c1c1d, 0x1c1c1d, 0x160, 0x1c1c1d, 0x160, 0x1c1cf3, 
        0x1c1c1d, 0x160, 0x1c1e9b, 0x160, 0x1c1f2e, 0x1c1c26, 0x160, 0x1c1c26, 0x160, 0x1c1cf3, 
        0x1c1c26, 0x160, 0x1c1e9b, 0x160, 0x1c1f2e, 0x1c1cf3, 0x160, 0x1c1cf3, 0x160, 0x1c1d74, 
        0x1c1d74, 0x160, 0x1c1d74, 0x160, 0x1c1e9b, 0x1c1db4, 0x160, 0x1c1db4, 0x160, 0x1c1e9b, 
        0x1c1db9, 0x160, 0x1c1db9, 0x160, 0x1c1e9b, 0x1c1e87, 0x160, 0x1c1e87, 0x160, 0x1c1e9b, 
        0x1c1f2e, 0x160, 0x1c1f2e, 0x160, 0x1c1f76, 0x1c1f2e, 0x160, 0x1c1f79, 0x160, 0x1c209a, 
        0x1c209a, 0x160, 0x1c209a, 0x160, 0x1c21ae, 0x1c209a, 0x160, 0x1c21b1, 0x160, 0x1c21c8, 
        0x1c209a, 0x160, 0x1c21cb, 0x160, 0x1c2205, 0x1c2205, 0x160, 0x1c2205, 0x160, 0x1c2296, 
        0x1c2296, 0x160, 0x1c2296, 0x160, 0x1c229e, 0x1c229e, 0x160, 0x1c229e, 0x160, 0x1c2315, 
        0x1c22b5, 0x160, 0x1c22b5, 0x160, 0x1c2315, 0x1c2305, 0x160, 0x1c2305, 0x160, 0x1c2315, 
        0x1c2315, 0x160, 0x1c2315, 0x160, 0x1c2388, 0x1c2315, 0x160, 0x1c24a8, 0x160, 0x1c2599, 
        0x1c235a, 0x160, 0x1c235a, 0x160, 0x1c2388, 0x1c235a, 0x160, 0x1c24a8, 0x160, 0x1c2599, 
        0x1c2388, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c2388, 0x160, 0x1c2388, 0x160, 0x1c2465, 
        0x1c2465, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c2465, 0x160, 0x1c2465, 0x160, 0x1c24a8, 
        0x1c24a8, 0x160, 0x1c24a8, 0x160, 0x1c2599, 0x1c2599, 0x160, 0x1c2599, 0x160, 0x1c295a, 
        0x1c2599, 0x160, 0x1c2aae, 0x160, 0x1c2aaf, 0x1c295a, 0x160, 0x1c295a, 0x160, 0x1c2984, 
        0x1c2984, 0x160, 0x1c2984, 0x160, 0x1c29ab, 0x1c29ab, 0x160, 0x1c29ab, 0x160, 0x1c2aaf, 
        0x1c2aaf, 0x160, 0x1c2aaf, 0x160, 0x1c2c57, 0x1c2c57, 0x160, 0x1c2c57, 0x160, 0x1c2d80, 
        0x1c2c7c, 0x160, 0x1c2c7c, 0x160, 0x1c2d80, 0x1c2d80, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c2d80, 0x160, 0x1c2d80, 0x160, 0x1c2df3, 0x1c2df3, 0x160, 0x1c2df3, 0x160, 0x1c2e7e, 
        0x1c2df3, 0x160, 0x1c2e81, 0x160, 0x1c30b4, 0x1c2f5a, 0x160, 0x1c2f5a, 0x160, 0x1c30b4, 
        0x1c30b4, 0x160, 0x1c30b4, 0x160, 0x1c312e, 0x1c312e, 0x160, 0x1c312e, 0x160, 0x1c3224, 
        0x1c3224, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1c3224, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c3224, 0x160, 0x1c3224, 0x160, 0x1c33a0, 0x1c33a1, 0x160, 0x1c33a1, 0x160, 0x1c3486, 
        0x1c3486, 0x160, 0x1b4b56, 0x160, 0x1b4b5f, 0x1c3486, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 
        0x1c3486, 0x160, 0x1c3486, 0x160, 0x1c34a7, 0x1c34a7, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 
        0x1c34a7, 0x160, 0x1c34a7, 0x160, 0x1c34c4, 0x1c34c4, 0x160, 0x1c34c4, 0x160, 0x1c3869, 
        0x1c3869, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1c3869, 0x160, 0x1c3869, 0x160, 0x1c393a, 
        0x1c393a, 0x160, 0x1c393a, 0x160, 0x1c3cf3, 0x1c3982, 0x160, 0x1c3982, 0x160, 0x1c3cf3, 
        0x1c3c21, 0x160, 0x1c3c21, 0x160, 0x1c3cf3, 0x1c3cf3, 0x160, 0x1c3cf3, 0x160, 0x1c3f42, 
        0x1c3cf3, 0x160, 0x1c4076, 0x160, 0x1c41a7, 0x1c3f42, 0x160, 0x1c3f42, 0x160, 0x1c3f53, 
        0x1c3f53, 0x160, 0x1c3f53, 0x160, 0x1c3f64, 0x1c3f64, 0x160, 0x1c3f64, 0x160, 0x1c3f75, 
        0x1c3f75, 0x160, 0x1c3f75, 0x160, 0x1c3f86, 0x1c3f86, 0x160, 0x1c3f86, 0x160, 0x1c3fa2, 
        0x1c3fa2, 0x160, 0x1c3fa2, 0x160, 0x1c4039, 0x1c4039, 0x160, 0x1c4039, 0x160, 0x1c4076, 
        0x1c4076, 0x160, 0x1c4076, 0x160, 0x1c41a7, 0x1c41a7, 0x160, 0x1c41a7, 0x160, 0x1c42f0, 
        0x1c42f0, 0x160, 0x1c42f0, 0x160, 0x1c433c, 0x1c433c, 0x160, 0x1c433c, 0x160, 0x1c446d, 
        0x1c4361, 0x160, 0x1c4361, 0x160, 0x1c446d, 0x1c446d, 0x160, 0x1c446d, 0x160, 0x1c451f, 
        0x1c451f, 0x160, 0x1c451f, 0x160, 0x1c4573, 0x1c4573, 0x160, 0x1c4573, 0x160, 0x1c459c, 
        0x1c459c, 0x160, 0x1c459c, 0x160, 0x1c4984, 0x1c4984, 0x160, 0x1bafc3, 0x160, 0x1bafe1, 
        0x1c4984, 0x160, 0x1bd7dd, 0x160, 0x1bd825, 0x1c4984, 0x160, 0x1c4984, 0x160, 0x1c49d6, 
        0x1c49d6, 0x160, 0x1c49d6, 0x160, 0x1c4a09, 0x1c4a09, 0x160, 0x1c4a09, 0x160, 0x1c4b1a, 
        0x1c4a09, 0x160, 0x1c4b1d, 0x160, 0x1c4b63, 0x1c4a09, 0x160, 0x1c4b66, 0x160, 0x1c4ba6, 
        0x1c4ba6, 0x160, 0x1c4ba6, 0x160, 0x1c4e8e, 0x1c4e8e, 0x160, 0x1c4e8e, 0x160, 0x1c50ff, 
        0x1c50ff, 0x160, 0x1b0da2, 0x160, 0x1b0dfd, 0x1c50ff, 0x160, 0x1c50ff, 0x160, 0x1c51d6, 
        0x1c51d6, 0x160, 0x1c51d6, 0x160, 0x1c5215, 0x1c52c2, 0x160, 0x1bd849, 0x160, 0x1bd85e, 
        0x1c52c2, 0x160, 0x1c52c2, 0x160, 0x1c52fc, 0x1c52fc, 0x160, 0x1c1db4, 0x160, 0x1c1e9b, 
        0x1c52fc, 0x160, 0x1c5215, 0x160, 0x1c52c2, 0x1c52fc, 0x160, 0x1c52fc, 0x160, 0x1c5772, 
        0x1c5300, 0x160, 0x1c1db4, 0x160, 0x1c1e9b, 0x1c5300, 0x160, 0x1c5215, 0x160, 0x1c52c2, 
        0x1c5300, 0x160, 0x1c5300, 0x160, 0x1c5772, 0x1c5695, 0x160, 0x1c5695, 0x160, 0x1c5768, 
        0x1c5772, 0x160, 0x1b60d3, 0x160, 0x1b60e2, 0x1c5772, 0x160, 0x1c5772, 0x160, 0x1c58cb, 
        0x1c58cb, 0x160, 0x1c58cb, 0x160, 0x1c59f0, 0x1c58f8, 0x160, 0x1c58f8, 0x160, 0x1c59f0, 
        0x1c59f0, 0x160, 0x1c59f0, 0x160, 0x1c6524, 0x1c6524, 0x160, 0x1c6524, 0x160, 0x1c670c, 
        0x1c6524, 0x160, 0x1c670d, 0x160, 0x1c6731, 0x1c6524, 0x160, 0x1c6734, 0x160, 0x1c6a11, 
        0x1c6a11, 0x160, 0x1c6a11, 0x160, 0x1c6ad8, 0x1c6ab4, 0x160, 0x1c6ab4, 0x160, 0x1c6ad8, 
        0x1c6ad8, 0x160, 0x1c6ad8, 0x160, 0x1c6ba2, 0x1c6b7d, 0x160, 0x1c6b7d, 0x160, 0x1c6ba2, 
        0x1c6ba2, 0x160, 0x1c6ba2, 0x160, 0x1c6caa, 0x1c6c7f, 0x160, 0x1c6c7f, 0x160, 0x1c6caa, 
        0x1c6caa, 0x160, 0x1c6caa, 0x160, 0x1c6db2, 0x1c6d87, 0x160, 0x1c6d87, 0x160, 0x1c6db2, 
        0x1c6db2, 0x160, 0x1c6db2, 0x160, 0x1c6eba, 0x1c6e8f, 0x160, 0x1c6e8f, 0x160, 0x1c6eba, 
        0x1c6eba, 0x160, 0x1c6eba, 0x160, 0x1c6fc2, 0x1c6f97, 0x160, 0x1c6f97, 0x160, 0x1c6fc2, 
        0x1c6fc2, 0x160, 0x1c6fc2, 0x160, 0x1c6ff7, 0x1c6ff7, 0x160, 0x1c6ff7, 0x160, 0x1c7113, 
        0x1c7113, 0x160, 0x1c7113, 0x160, 0x1c7252, 0x1c7260, 0x160, 0x1c7260, 0x160, 0x1c727a, 
        0x1c727c, 0x160, 0x1c727c, 0x160, 0x1c72a9, 0x1c7954, 0x160, 0x1c7954, 0x160, 0x1c79ab, 
        0x1c79ac, 0x160, 0x1c79ac, 0x160, 0x1c7a40, 0x1c7a40, 0x160, 0x1c7a40, 0x160, 0x1c7ad4, 
        0x1c7b00, 0x160, 0x1c7b00, 0x160, 0x1c7b29, 0x1c7de8, 0x160, 0x1c7de8, 0x160, 0x1c7e5a, 
        0x1c8008, 0x160, 0x1c8008, 0x160, 0x1c8087, 0x1c8088, 0x160, 0x1c8088, 0x160, 0x1c828a, 
        0x1c82bc, 0x160, 0x1c82bc, 0x160, 0x1c843c, 0x1c8474, 0x160, 0x1c8474, 0x160, 0x1c8495, 
        0x1c84b4, 0x160, 0x1c84b4, 0x160, 0x1c8520, 0x1c8520, 0x160, 0x1c8520, 0x160, 0x1c858c, 
        0x1c858c, 0x160, 0x1c858c, 0x160, 0x1c85f8, 0x1c85f8, 0x160, 0x1c85f8, 0x160, 0x1c8664, 
        0x1c8664, 0x160, 0x1c8664, 0x160, 0x1c86d0, 0x1c86d0, 0x160, 0x1c86d0, 0x160, 0x1c8703, 
        0x1c8734, 0x160, 0x1c8734, 0x160, 0x1c8762, 0x1c8764, 0x160, 0x1c8764, 0x160, 0x1c8792, 
        0x1c8794, 0x160, 0x1c8794, 0x160, 0x1c87bc, 0x1c8824, 0x160, 0x1c8824, 0x160, 0x1c8ad6, 
        0x1c8ae0, 0x160, 0x1c8ae0, 0x160, 0x1c8b58, 0x1c8ae0, 0x160, 0x1c91d5, 0x160, 0x1c9326, 
        0x1c8b58, 0x160, 0x1c8b58, 0x160, 0x1c8c9d, 0x1c8c9d, 0x160, 0x1c8c9d, 0x160, 0x1c8de8, 
        0x1c8de8, 0x160, 0x1c8de8, 0x160, 0x1c8f33, 0x1c8f33, 0x160, 0x1c8f33, 0x160, 0x1c9084, 
        0x1c9084, 0x160, 0x1c9084, 0x160, 0x1c91d5, 0x1c9326, 0x160, 0x1c9326, 0x160, 0x1c9ad2, 
        0x1c9326, 0x160, 0x1c9ad5, 0x160, 0x1c9b11, 0x1c9326, 0x160, 0x1c9b14, 0x160, 0x1c9cd7, 
        0x1c9cd7, 0x160, 0x1c9cd7, 0x160, 0x1c9d42, 0x1c9d42, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1c9d42, 0x160, 0x1b1715, 0x160, 0x1b18a5, 0x1c9d42, 0x160, 0x1c7b2c, 0x160, 0x1c7ca8, 
        0x1c9d42, 0x160, 0x1c9d42, 0x160, 0x1ca0cd, 0x1c9d42, 0x160, 0x1ca0e5, 0x160, 0x1ca12c, 
        0x1c9d42, 0x160, 0x1ca984, 0x160, 0x1caa0d, 0x1ca0cd, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1ca0cd, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 0x1ca0cd, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1ca0cd, 0x160, 0x1ca0cd, 0x160, 0x1ca0e5, 0x1ca12c, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1ca12c, 0x160, 0x1b1715, 0x160, 0x1b18a5, 0x1ca12c, 0x160, 0x1c7b2c, 0x160, 0x1c7ca8, 
        0x1ca12c, 0x160, 0x1ca00d, 0x160, 0x1ca0cd, 0x1ca12c, 0x160, 0x1ca0e5, 0x160, 0x1ca3e8, 
        0x1ca12c, 0x160, 0x1ca984, 0x160, 0x1caa0d, 0x1ca3e8, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1ca3e8, 0x160, 0x1b1715, 0x160, 0x1b18a5, 0x1ca3e8, 0x160, 0x1c7b2c, 0x160, 0x1c7ca8, 
        0x1ca3e8, 0x160, 0x1ca00d, 0x160, 0x1ca0cd, 0x1ca3e8, 0x160, 0x1ca0e5, 0x160, 0x1ca12c, 
        0x1ca3e8, 0x160, 0x1ca3e8, 0x160, 0x1ca6b3, 0x1ca3e8, 0x160, 0x1ca984, 0x160, 0x1caa0d, 
        0x1ca6b3, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1ca6b3, 0x160, 0x1b1715, 0x160, 0x1b18a5, 
        0x1ca6b3, 0x160, 0x1c7b2c, 0x160, 0x1c7ca8, 0x1ca6b3, 0x160, 0x1ca00d, 0x160, 0x1ca0cd, 
        0x1ca6b3, 0x160, 0x1ca0e5, 0x160, 0x1ca12c, 0x1ca6b3, 0x160, 0x1ca6b3, 0x160, 0x1ca96f, 
        0x1ca6b3, 0x160, 0x1ca984, 0x160, 0x1caa0d, 0x1ca96f, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1ca96f, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 0x1ca96f, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1ca96f, 0x160, 0x1ca96f, 0x160, 0x1ca984, 0x1caa0d, 0x160, 0x1caa0d, 0x160, 0x1cadfc, 
        0x1cadfc, 0x160, 0x1cadfc, 0x160, 0x1caf91, 0x1caf91, 0x160, 0x1caf91, 0x160, 0x1cb035, 
        0x1cb035, 0x160, 0x1cb035, 0x160, 0x1cb1e2, 0x1cb1e2, 0x160, 0x1cb1e2, 0x160, 0x1cb291, 
        0x1cb291, 0x160, 0x1cb291, 0x160, 0x1cb3f3, 0x1cb3f3, 0x160, 0x1cb3f3, 0x160, 0x1cb497, 
        0x1cb497, 0x160, 0x1cb497, 0x160, 0x1cb5f9, 0x1cb5f9, 0x160, 0x1cb5f9, 0x160, 0x1cb68e, 
        0x1cb68e, 0x160, 0x1cb68e, 0x160, 0x1cb6fa, 0x1cb6fa, 0x160, 0x1aa64a, 0x160, 0x1aa659, 
        0x1cb6fa, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 0x1cb6fa, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1cb6fa, 0x160, 0x1cb6fa, 0x160, 0x1cbd44, 0x1cb6fa, 0x160, 0x1cbf62, 0x160, 0x1cc181, 
        0x1cb6fa, 0x160, 0x1cc32c, 0x160, 0x1cc428, 0x1cbd44, 0x160, 0x1cbd44, 0x160, 0x1cbe86, 
        0x1cbe86, 0x160, 0x1cbe86, 0x160, 0x1cbf62, 0x1cc181, 0x160, 0x1cc181, 0x160, 0x1cc2ad, 
        0x1cc2ad, 0x160, 0x1cc2ad, 0x160, 0x1cc32c, 0x1cc428, 0x160, 0x1cc428, 0x160, 0x1cc53e, 
        0x1cc428, 0x160, 0x1cc541, 0x160, 0x1cc559, 0x1cc428, 0x160, 0x1cc55c, 0x160, 0x1cc669, 
        0x1cc428, 0x160, 0x1cc66c, 0x160, 0x1cc73b, 0x1cc73b, 0x160, 0x1cc73b, 0x160, 0x1cc7d8, 
        0x1cc7d8, 0x160, 0x1cc7d8, 0x160, 0x1cc875, 0x1cc875, 0x160, 0x1cc875, 0x160, 0x1cc912, 
        0x1cc912, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1cc912, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 
        0x1cc912, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1cc912, 0x160, 0x1cc912, 0x160, 0x1cc919, 
        0x1cc919, 0x160, 0x1b1715, 0x160, 0x1b17b7, 0x1cc919, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 
        0x1cc919, 0x160, 0x1cc919, 0x160, 0x1cca0a, 0x1cc919, 0x160, 0x1cccdd, 0x160, 0x1cccef, 
        0x1cca0a, 0x160, 0x1b1715, 0x160, 0x1b17b7, 0x1cca0a, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 
        0x1cca0a, 0x160, 0x1cca0a, 0x160, 0x1ccafb, 0x1cca0a, 0x160, 0x1cccdd, 0x160, 0x1cccef, 
        0x1ccafb, 0x160, 0x1b1715, 0x160, 0x1b17b7, 0x1ccafb, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 
        0x1ccafb, 0x160, 0x1ccafb, 0x160, 0x1ccbec, 0x1ccafb, 0x160, 0x1cccdd, 0x160, 0x1cccef, 
        0x1ccbec, 0x160, 0x1b1715, 0x160, 0x1b17b7, 0x1ccbec, 0x160, 0x1c7c30, 0x160, 0x1c7ca8, 
        0x1ccbec, 0x160, 0x1ccbec, 0x160, 0x1cccb9, 0x1ccbec, 0x160, 0x1cccbc, 0x160, 0x1cccef, 
        0x1cccef, 0x160, 0x1cccef, 0x160, 0x1cd0c6, 0x1cccef, 0x160, 0x1cd0c9, 0x160, 0x1cd100, 
        0x1cd100, 0x160, 0x1cd100, 0x160, 0x1cd1f5, 0x1cd1f5, 0x160, 0x1cd1f5, 0x160, 0x1cd336, 
        0x1cd336, 0x160, 0x1cd336, 0x160, 0x1cd445, 0x1cd445, 0x160, 0x1cd445, 0x160, 0x1cd554, 
        0x1cd554, 0x160, 0x1cd554, 0x160, 0x1cd72b, 0x1cd72b, 0x160, 0x1cd72b, 0x160, 0x1cd75c, 
        0x1cd75c, 0x160, 0x1b2710, 0x160, 0x1b29b6, 0x1cd75c, 0x160, 0x1cd75c, 0x160, 0x1cd7c5, 
        0x1cd7c5, 0x160, 0x1cd7c5, 0x160, 0x1cd82d, 0x1cd830, 0x160, 0x1cd830, 0x160, 0x1cd896, 
        0x1cd896, 0x160, 0x1cd896, 0x160, 0x1cd927, 0x1cd927, 0x160, 0x1cd927, 0x160, 0x1cd983, 
        0x1cd983, 0x160, 0x1cd983, 0x160, 0x1cdac7, 0x1cdac7, 0x160, 0x1cdac7, 0x160, 0x1cdb0a, 
        0x1cdb0a, 0x160, 0x1cdb0a, 0x160, 0x1cdb89, 0x1cdb89, 0x160, 0x1cdb89, 0x160, 0x1cde4a, 
        0x1cde4a, 0x160, 0x1cde4a, 0x160, 0x1cde9e, 0x1cde9e, 0x160, 0x1cde9e, 0x160, 0x1ce004, 
        0x1cdeae, 0x160, 0x1cdeae, 0x160, 0x1ce004, 0x1ce004, 0x160, 0x1ce004, 0x160, 0x1ce10a, 
        0x1ce10a, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1ce10a, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 
        0x1ce10a, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1ce10a, 0x160, 0x1ce10a, 0x160, 0x1ce128, 
        0x1ce128, 0x160, 0x1ce128, 0x160, 0x1ce18e, 0x1ce18e, 0x160, 0x1ce18e, 0x160, 0x1ce20d, 
        0x1ce20d, 0x160, 0x1ce20d, 0x160, 0x1ce269, 0x1ce269, 0x160, 0x1ce269, 0x160, 0x1ce643, 
        0x1ce643, 0x160, 0x1c7954, 0x160, 0x1c79ab, 0x1ce643, 0x160, 0x1ce643, 0x160, 0x1ce65c, 
        0x1ce65c, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1ce65c, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 
        0x1ce65c, 0x160, 0x1ce65c, 0x160, 0x1ce67d, 0x1ce6b7, 0x160, 0x1ce67d, 0x160, 0x1ce7d4, 
        0x1ce6b7, 0x160, 0x1ce7d7, 0x160, 0x1cea28, 0x1cea28, 0x160, 0x1cea28, 0x160, 0x1ceac6, 
        0x1cea28, 0x160, 0x1ceac9, 0x160, 0x1ceada, 0x1cea28, 0x160, 0x1ceadd, 0x160, 0x1ceb3a, 
        0x1ceb3a, 0x160, 0x1ceb3a, 0x160, 0x1cec54, 0x1cec54, 0x160, 0x1cec54, 0x160, 0x1cec8a, 
        0x1cec8a, 0x160, 0x1cec8a, 0x160, 0x1cee0a, 0x1cee0a, 0x160, 0x1cee0a, 0x160, 0x1cef93, 
        0x1cef93, 0x160, 0x1cef93, 0x160, 0x1cf13b, 0x1cf13b, 0x160, 0x1cf13b, 0x160, 0x1cf2d2, 
        0x1cf2d2, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1cf2d2, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 
        0x1cf2d2, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1cf2d2, 0x160, 0x1cf2d2, 0x160, 0x1cf459, 
        0x1cf2d2, 0x160, 0x1cf45c, 0x160, 0x1cf538, 0x1cf538, 0x160, 0x1cf538, 0x160, 0x1cf9db, 
        0x1cf9db, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 0x1cf9db, 0x160, 0x1cf9db, 0x160, 0x1cfb7c, 
        0x1cfb7c, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 0x1cfb7c, 0x160, 0x1cfb7c, 0x160, 0x1cfc5e, 
        0x1cfb7c, 0x160, 0x1cfc67, 0x160, 0x1cfcb2, 0x1cfcb2, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 
        0x1cfcb2, 0x160, 0x1cfcb2, 0x160, 0x1cfdfb, 0x1cfdfb, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 
        0x1cfdfb, 0x160, 0x1cfc7e, 0x160, 0x1cfcb2, 0x1cfdfb, 0x160, 0x1cfdfb, 0x160, 0x1cfe98, 
        0x1cfdfb, 0x160, 0x1cfe9f, 0x160, 0x1cfebb, 0x1cfebb, 0x160, 0x1cfebb, 0x160, 0x1cff9b, 
        0x1cff9b, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 0x1cff9b, 0x160, 0x1cff9b, 0x160, 0x1d01b8, 
        0x1cff9b, 0x160, 0x1d01bb, 0x160, 0x1d0261, 0x1d01bc, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 
        0x1d01bc, 0x160, 0x1d01bc, 0x160, 0x1d0261, 0x1d0261, 0x160, 0x1d0261, 0x160, 0x1d03dc, 
        0x1d03dc, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 0x1d03dc, 0x160, 0x1d03dc, 0x160, 0x1d04a1, 
        0x1d04a1, 0x160, 0x1d04a1, 0x160, 0x1d071b, 0x1d04a1, 0x160, 0x1d071e, 0x160, 0x1d08c9, 
        0x1d04a1, 0x160, 0x1d08cc, 0x160, 0x1d091e, 0x1d04a1, 0x160, 0x1d097c, 0x160, 0x1d0afa, 
        0x1d04a1, 0x160, 0x1d0afd, 0x160, 0x1d0b58, 0x1d04a1, 0x160, 0x1d0b5b, 0x160, 0x1d0dda, 
        0x1d091e, 0x160, 0x1d091e, 0x160, 0x1d097c, 0x1d0dda, 0x160, 0x1b19ac, 0x160, 0x1b19e0, 
        0x1d0dda, 0x160, 0x1cfcb2, 0x160, 0x1cfdfb, 0x1d0dda, 0x160, 0x1d0dda, 0x160, 0x1d18c0, 
        0x1d18c0, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 0x1d18c0, 0x160, 0x1d18c0, 0x160, 0x1d198c, 
        0x1d198c, 0x160, 0x1d198c, 0x160, 0x1d1a18, 0x1d198c, 0x160, 0x1d1a1b, 0x160, 0x1d1c2c, 
        0x1d198c, 0x160, 0x1d1c2f, 0x160, 0x1d1d9b, 0x1d1d9b, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d1d9b, 0x160, 0x1d1d9b, 0x160, 0x1d1fdf, 0x1d1d9b, 0x160, 0x1d20fd, 0x160, 0x1d2341, 
        0x1d1d9b, 0x160, 0x1d23e7, 0x160, 0x1d24f3, 0x1d1d9b, 0x160, 0x1d24f6, 0x160, 0x1d2697, 
        0x1d1d9b, 0x160, 0x1d27ea, 0x160, 0x1d3339, 0x1d1d9b, 0x160, 0x1d3651, 0x160, 0x1d4dd2, 
        0x1d1d9b, 0x160, 0x1d4e2f, 0x160, 0x1d4e8e, 0x1d1d9b, 0x160, 0x1d4f89, 0x160, 0x1d562f, 
        0x1d1d9b, 0x160, 0x1d5ae8, 0x160, 0x1d5b90, 0x1d1d9b, 0x160, 0x1d5b93, 0x160, 0x1d5ba6, 
        0x1d1d9b, 0x160, 0x1d5c1e, 0x160, 0x1d5c5e, 0x1d1d9b, 0x160, 0x1d5ed3, 0x160, 0x1d6089, 
        0x1d1d9b, 0x160, 0x1d60c0, 0x160, 0x1d62df, 0x1d1d9b, 0x160, 0x1d6644, 0x160, 0x1d71ce, 
        0x1d1d9b, 0x160, 0x1d91ba, 0x160, 0x1d9208, 0x1d1ece, 0x160, 0x1d1ece, 0x160, 0x1d1fdf, 
        0x1d1fdf, 0x160, 0x1d1fdf, 0x160, 0x1d1feb, 0x1d1feb, 0x160, 0x1d1feb, 0x160, 0x1d20fd, 
        0x1d2341, 0x160, 0x1d2341, 0x160, 0x1d23e7, 0x1d23ff, 0x160, 0x1d23ff, 0x160, 0x1d2493, 
        0x1d24f6, 0x160, 0x1d24f6, 0x160, 0x1d251d, 0x1d24fb, 0x160, 0x1d24fb, 0x160, 0x1d251d, 
        0x1d2697, 0x160, 0x1d2697, 0x160, 0x1d27ea, 0x1d27ad, 0x160, 0x1d27ad, 0x160, 0x1d27ea, 
        0x1d3339, 0x160, 0x1d3339, 0x160, 0x1d33a0, 0x1d33a0, 0x160, 0x1d33a0, 0x160, 0x1d3411, 
        0x1d3411, 0x160, 0x1d3411, 0x160, 0x1d348a, 0x1d348a, 0x160, 0x1d348a, 0x160, 0x1d34d9, 
        0x1d34d9, 0x160, 0x1d34d9, 0x160, 0x1d359b, 0x1d359b, 0x160, 0x1d359b, 0x160, 0x1d3651, 
        0x1d4dd2, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1d4dd2, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 
        0x1d4dd2, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1d4dd2, 0x160, 0x1d4dd2, 0x160, 0x1d4e2f, 
        0x1d4e8e, 0x160, 0x1d4e8e, 0x160, 0x1d4f07, 0x1d4f07, 0x160, 0x1d4f07, 0x160, 0x1d4f89, 
        0x1d562f, 0x160, 0x1d562f, 0x160, 0x1d5ae8, 0x1d58e6, 0x160, 0x1d58e6, 0x160, 0x1d5ae8, 
        0x1d5ba6, 0x160, 0x1d5ba6, 0x160, 0x1d5c1e, 0x1d5be1, 0x160, 0x1d5be1, 0x160, 0x1d5c1e, 
        0x1d5c5e, 0x160, 0x1d5c5e, 0x160, 0x1d5e9d, 0x1d5e9d, 0x160, 0x1d5e9d, 0x160, 0x1d5ed3, 
        0x1d5ed3, 0x160, 0x1d5ed3, 0x160, 0x1d5f64, 0x1d5fa8, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d5fa8, 0x160, 0x1d5fa8, 0x160, 0x1d6006, 0x1d608c, 0x160, 0x1d608c, 0x160, 0x1d60c0, 
        0x1d62df, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 0x1d62df, 0x160, 0x1d62df, 0x160, 0x1d6600, 
        0x1d62df, 0x160, 0x1d6607, 0x160, 0x1d6644, 0x1d6603, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d6603, 0x160, 0x1d6603, 0x160, 0x1d6644, 0x1d6607, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d6607, 0x160, 0x1d6607, 0x160, 0x1d6644, 0x1d71ce, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d71ce, 0x160, 0x1d24fb, 0x160, 0x1d251d, 0x1d71ce, 0x160, 0x1d71ce, 0x160, 0x1d7823, 
        0x1d71ce, 0x160, 0x1d7d17, 0x160, 0x1d7d99, 0x1d71ce, 0x160, 0x1d7e13, 0x160, 0x1d843e, 
        0x1d71ce, 0x160, 0x1d84a2, 0x160, 0x1d8798, 0x1d71ce, 0x160, 0x1d88b9, 0x160, 0x1d8b8a, 
        0x1d71ce, 0x160, 0x1d8c47, 0x160, 0x1d8d96, 0x1d71ce, 0x160, 0x1d8f91, 0x160, 0x1d90ff, 
        0x1d71ce, 0x160, 0x1d91ba, 0x160, 0x1d9405, 0x1d71ce, 0x160, 0x1d9408, 0x160, 0x1d9419, 
        0x1d71ce, 0x160, 0x1d9427, 0x160, 0x1d946e, 0x1d71ce, 0x160, 0x1d9633, 0x160, 0x1d982d, 
        0x1d71ce, 0x160, 0x1d9df5, 0x160, 0x1d9e4f, 0x1d71ce, 0x160, 0x1da030, 0x160, 0x1da1d0, 
        0x1d7823, 0x160, 0x1d7823, 0x160, 0x1d794c, 0x1d794c, 0x160, 0x1d794c, 0x160, 0x1d7a18, 
        0x1d79cf, 0x160, 0x1d79cf, 0x160, 0x1d7a18, 0x1d7a6a, 0x160, 0x1d7a6a, 0x160, 0x1d7b93, 
        0x1d7b93, 0x160, 0x1d79cf, 0x160, 0x1d7a18, 0x1d7b93, 0x160, 0x1d7b93, 0x160, 0x1d7c1b, 
        0x1d7c1b, 0x160, 0x1d7a18, 0x160, 0x1d7a6a, 0x1d7c1b, 0x160, 0x1d7c1b, 0x160, 0x1d7c98, 
        0x1d7c99, 0x160, 0x1d7a18, 0x160, 0x1d7a6a, 0x1d7c99, 0x160, 0x1d7c99, 0x160, 0x1d7d16, 
        0x1d7d99, 0x160, 0x1d7d99, 0x160, 0x1d7e13, 0x1d81e0, 0x160, 0x1d81e0, 0x160, 0x1d81f3, 
        0x1d8222, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 0x1d8222, 0x160, 0x1d8222, 0x160, 0x1d8275, 
        0x1d8275, 0x160, 0x1d8275, 0x160, 0x1d82e4, 0x1d83da, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d83da, 0x160, 0x1d83da, 0x160, 0x1d843e, 0x1d843e, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 
        0x1d843e, 0x160, 0x1d843e, 0x160, 0x1d84a2, 0x1d8798, 0x160, 0x1d8798, 0x160, 0x1d8828, 
        0x1d8828, 0x160, 0x1d8828, 0x160, 0x1d88b9, 0x1d88b9, 0x160, 0x1d24fb, 0x160, 0x1d251d, 
        0x1d88b9, 0x160, 0x1d88b9, 0x160, 0x1d891c, 0x1d8a81, 0x160, 0x1d8a81, 0x160, 0x1d8b8a, 
        0x1d8a81, 0x160, 0x1d91bd, 0x160, 0x1d9208, 0x1d8b8a, 0x160, 0x1d8b8a, 0x160, 0x1d8c47, 
        0x1d8d96, 0x160, 0x1d8d96, 0x160, 0x1d8ee1, 0x1d8ee1, 0x160, 0x1d8ee1, 0x160, 0x1d8f91, 
        0x1d90ff, 0x160, 0x1d90ff, 0x160, 0x1d9113, 0x1d90ff, 0x160, 0x1d9128, 0x160, 0x1d91ba, 
        0x1d9116, 0x160, 0x1d9116, 0x160, 0x1d91ba, 0x1d91ba, 0x160, 0x1d91ba, 0x160, 0x1d9208, 
        0x1d91bd, 0x160, 0x1d91bd, 0x160, 0x1d9208, 0x1d9409, 0x160, 0x1d9409, 0x160, 0x1d9419, 
        0x1d9409, 0x160, 0x1d9427, 0x160, 0x1d946e, 0x1d9419, 0x160, 0x1d9419, 0x160, 0x1d946e, 
        0x1d946e, 0x160, 0x1d946e, 0x160, 0x1d94de, 0x1d946e, 0x160, 0x1d94e1, 0x160, 0x1d9599, 
        0x1d9599, 0x160, 0x1b19e0, 0x160, 0x1b1a14, 0x1d9599, 0x160, 0x1d9599, 0x160, 0x1d9633, 
        0x1d982d, 0x160, 0x1d982d, 0x160, 0x1d99bc, 0x1d99bc, 0x160, 0x1d99bc, 0x160, 0x1d9b94, 
        0x1d9b94, 0x160, 0x1d9b94, 0x160, 0x1d9d6c, 0x1d9d6c, 0x160, 0x1d9d6c, 0x160, 0x1d9daf, 
        0x1d9daf, 0x160, 0x1aa64a, 0x160, 0x1aa659, 0x1d9daf, 0x160, 0x1b17b6, 0x160, 0x1b18a5, 
        0x1d9daf, 0x160, 0x1c7b2c, 0x160, 0x1c7c30, 0x1d9daf, 0x160, 0x1d9daf, 0x160, 0x1d9df5, 
        0x1d9e4f, 0x160, 0x1d9e4f, 0x160, 0x1d9f0e, 0x1d9e4f, 0x160, 0x1d9fc8, 0x160, 0x1d9fd1, 
        0x1d9e4f, 0x160, 0x1d9fd8, 0x160, 0x1da030, 0x1d9f0e, 0x160, 0x1d9f0e, 0x160, 0x1d9fd1, 
        0x1d9f0e, 0x160, 0x1d9fd8, 0x160, 0x1da030, 0x1d9fc8, 0x160, 0x1d9fc8, 0x160, 0x1d9fd1, 
        0x1d9fc8, 0x160, 0x1d9fd8, 0x160, 0x1da030, 0x1d9fd1, 0x160, 0x1d9fd1, 0x160, 0x1da030, 
        0x1da112, 0x160, 0x1d91c1, 0x160, 0x1d9208, 0x1da112, 0x160, 0x1da112, 0x160, 0x1da151, 
        0x1da2a0, 0x160, 0x1da2a0, 0x160, 0x1da2a8, 0x1da2a8, 0x160, 0x1da2a8, 0x160, 0x1da3c8, 
        0x1da3c8, 0x160, 0x1da3c8, 0x160, 0x1da3ef, 0x1da3c8, 0x160, 0x1da3f0, 0x160, 0x1daaa2, 
        0x1daab0, 0x160, 0x1daab0, 0x160, 0x1dab47, 0x1dab50, 0x160, 0x1dab50, 0x160, 0x1dab79, 
        0x1dab80, 0x160, 0x1dab80, 0x160, 0x1dabe9, 0x1dabf0, 0x160, 0x1dabf0, 0x160, 0x1dac00, 
        0x1dac00, 0x160, 0x1dac00, 0x160, 0x1dac98, 0x1daca0, 0x160, 0x1daca0, 0x160, 0x1dad4a, 
        0x1dad50, 0x160, 0x1dad50, 0x160, 0x1dadf8, 0x1dae00, 0x160, 0x1dae00, 0x160, 0x1daeea, 
        0x1daef0, 0x160, 0x1daef0, 0x160, 0x1dafb4, 0x1dafc0, 0x160, 0x1dafc0, 0x160, 0x1db01d, 
        0x1db020, 0x160, 0x1db020, 0x160, 0x1db05b, 0x1db060, 0x160, 0x1db060, 0x160, 0x1db0ca, 
        0x1db0d0, 0x160, 0x1db0d0, 0x160, 0x1db173, 0x1db180, 0x160, 0x1db180, 0x160, 0x1db1a0, 
        0x1db1a0, 0x160, 0x1db1a0, 0x160, 0x1db216, 0x1db220, 0x160, 0x1db220, 0x160, 0x1db266, 
        0x1db270, 0x160, 0x1db270, 0x160, 0x1db2b3, 0x1db2c0, 0x160, 0x1db2c0, 0x160, 0x1db3e1, 
        0x1db470, 0x160, 0x1db470, 0x160, 0x1db545, 0x1db5b0, 0x160, 0x1db5b0, 0x160, 0x1db5ec, 
        0x1db5f0, 0x160, 0x1db5f0, 0x160, 0x1db61f, 0x1db620, 0x160, 0x1db620, 0x160, 0x1db656, 
        0x1db660, 0x160, 0x1db660, 0x160, 0x1db69d, 0x1db6c0, 0x160, 0x1db6c0, 0x160, 0x1db71c, 
        0x1db720, 0x160, 0x1db720, 0x160, 0x1db79e, 0x1db7a0, 0x160, 0x1db7a0, 0x160, 0x1db820, 
        0x1db8a0, 0x160, 0x1db8a0, 0x160, 0x1db8a6, 0x1db8b0, 0x160, 0x1db8b0, 0x160, 0x1db8bb, 
        0x1db8c0, 0x160, 0x1db8c0, 0x160, 0x1db8d1, 0x1db920, 0x160, 0x1db920, 0x160, 0x1db939, 
        0x1db920, 0x160, 0x1db93a, 0x160, 0x1db93b, 0x1db960, 0x160, 0x1db960, 0x160, 0x1db9ac, 
        0x1db9b0, 0x160, 0x1db9b0, 0x160, 0x1db9b7, 0x1db9b0, 0x160, 0x1df1f0, 0x160, 0x1df1f6, 
        0x1db9c0, 0x160, 0x1db9c0, 0x160, 0x1db9c6, 0x1db9d0, 0x160, 0x1db9d0, 0x160, 0x1db9db, 
        0x1db9e0, 0x160, 0x1db9e0, 0x160, 0x1db9f1, 0x1dba40, 0x160, 0x1dba40, 0x160, 0x1dba59, 
        0x1dba40, 0x160, 0x1dba5a, 0x160, 0x1dba5b, 0x1dba80, 0x160, 0x1dba80, 0x160, 0x1dbacc, 
        0x1dbad0, 0x160, 0x1dbad0, 0x160, 0x1dbad7, 0x1dbad0, 0x160, 0x1e15e0, 0x160, 0x1e15e6, 
        0x1dbe60, 0x160, 0x1dbe60, 0x160, 0x1dbe82, 0x1dbe90, 0x160, 0x1dbe90, 0x160, 0x1dbee1, 
        0x1dbef0, 0x160, 0x1dbef0, 0x160, 0x1dbf15, 0x1dbf20, 0x160, 0x1dbf20, 0x160, 0x1dbf72, 
        0x1dbf80, 0x160, 0x1dbf80, 0x160, 0x1dbfac, 0x1dc050, 0x160, 0x1dc050, 0x160, 0x1dc11d, 
        0x1dc120, 0x160, 0x1dc120, 0x160, 0x1dc163, 0x1dc170, 0x160, 0x1dc170, 0x160, 0x1dc184, 
        0x1dc170, 0x160, 0x1dc193, 0x160, 0x1dc1c9, 0x1dc170, 0x160, 0x1dc1ce, 0x160, 0x1dc230, 
        0x1dc3f0, 0x160, 0x1dc3f0, 0x160, 0x1dc423, 0x1dc430, 0x160, 0x1dc430, 0x160, 0x1dc609, 
        0x1dc610, 0x160, 0x1dc610, 0x160, 0x1dc634, 0x1dc840, 0x160, 0x1dc840, 0x160, 0x1dc87b, 
        0x1dc880, 0x160, 0x1dc880, 0x160, 0x1dc8df, 0x1dc8e0, 0x160, 0x1dc8e0, 0x160, 0x1dc956, 
        0x1dc960, 0x160, 0x1dc960, 0x160, 0x1dc98e, 0x1dc990, 0x160, 0x1dc990, 0x160, 0x1dc9b3, 
        0x1dc9c0, 0x160, 0x1dc9c0, 0x160, 0x1dca00, 0x1dcad0, 0x160, 0x1dcad0, 0x160, 0x1dcae5, 
        0x1dcaf0, 0x160, 0x1dcaf0, 0x160, 0x1dcb3f, 0x1dcb60, 0x160, 0x1dc840, 0x160, 0x1dc87b, 
        0x1dcb60, 0x160, 0x1dcb60, 0x160, 0x1dcb74, 0x1dcb80, 0x160, 0x1dcb80, 0x160, 0x1dcbb4, 
        0x1dcbc0, 0x160, 0x1dcbc0, 0x160, 0x1dcc1e, 0x1dcbe0, 0x160, 0x1dcbe0, 0x160, 0x1dcc1e, 
        0x1dcc20, 0x160, 0x1dcc20, 0x160, 0x1dcc5f, 0x1dcc70, 0x160, 0x1dcc70, 0x160, 0x1dcc93, 
        0x1dcca0, 0x160, 0x1dcca0, 0x160, 0x1dccb6, 0x1dccc0, 0x160, 0x1dccc0, 0x160, 0x1dccfd, 
        0x1dcd00, 0x160, 0x1dcd00, 0x160, 0x1dcd1e, 0x1dcd20, 0x160, 0x1dcd20, 0x160, 0x1dcd5f, 
        0x1dcd60, 0x160, 0x1dcd60, 0x160, 0x1dce0e, 0x1dce10, 0x160, 0x1dce10, 0x160, 0x1dce94, 
        0x1dcea0, 0x160, 0x1dcea0, 0x160, 0x1dcee0, 0x1dcee0, 0x160, 0x1dcee0, 0x160, 0x1dcf61, 
        0x1dcf70, 0x160, 0x1dcf70, 0x160, 0x1dcfbc, 0x1dcfc0, 0x160, 0x1dcfc0, 0x160, 0x1dd0a4, 
        0x1dd0b0, 0x160, 0x1dd0b0, 0x160, 0x1dd217, 0x1dd220, 0x160, 0x1dd220, 0x160, 0x1dd428, 
        0x1dd430, 0x160, 0x1dd430, 0x160, 0x1dd477, 0x1dd480, 0x160, 0x1dd480, 0x160, 0x1dd4c2, 
        0x1dd4d0, 0x160, 0x1dd4d0, 0x160, 0x1dd4e6, 0x1dd4f0, 0x160, 0x1dd4f0, 0x160, 0x1dd506, 
        0x1dd510, 0x160, 0x1dd510, 0x160, 0x1dd526, 0x1dd530, 0x160, 0x1dd530, 0x160, 0x1dd546, 
        0x1dd550, 0x160, 0x1dd550, 0x160, 0x1dd566, 0x1dd570, 0x160, 0x1dd570, 0x160, 0x1dd586, 
        0x1dd590, 0x160, 0x1dd590, 0x160, 0x1dd6c5, 0x1dd6d0, 0x160, 0x1dd6d0, 0x160, 0x1dd73f, 
        0x1dd740, 0x160, 0x1dd740, 0x160, 0x1dd781, 0x1dd790, 0x160, 0x1dd790, 0x160, 0x1dd8dc, 
        0x1dd8e0, 0x160, 0x1dd8e0, 0x160, 0x1dd966, 0x1dd970, 0x160, 0x1dd970, 0x160, 0x1dd993, 
        0x1dd9a0, 0x160, 0x1dd9a0, 0x160, 0x1ddb34, 0x1ddb40, 0x160, 0x1ddb40, 0x160, 0x1ddba3, 
        0x1ddbb0, 0x160, 0x1ddbb0, 0x160, 0x1ddc14, 0x1ddc20, 0x160, 0x1ddc20, 0x160, 0x1ddc5c, 
        0x1ddca0, 0x160, 0x1ddca0, 0x160, 0x1ddd9c, 0x1dddb0, 0x160, 0x1dddb0, 0x160, 0x1ddde1, 
        0x1dddf0, 0x160, 0x1dddf0, 0x160, 0x1dde68, 0x1dde70, 0x160, 0x1dde70, 0x160, 0x1dde80, 
        0x1dde80, 0x160, 0x1dde80, 0x160, 0x1dde84, 0x1dde90, 0x160, 0x1dde90, 0x160, 0x1ddeed, 
        0x1de180, 0x160, 0x1de180, 0x160, 0x1de19b, 0x1de1a0, 0x160, 0x1de1a0, 0x160, 0x1de1bd, 
        0x1de1c0, 0x160, 0x1de1c0, 0x160, 0x1de209, 0x1de210, 0x160, 0x1de210, 0x160, 0x1de328, 
        0x1de330, 0x160, 0x1de330, 0x160, 0x1de399, 0x1de780, 0x160, 0x1de780, 0x160, 0x1de802, 
        0x1dea00, 0x160, 0x1dea00, 0x160, 0x1deabe, 0x1deac0, 0x160, 0x1deac0, 0x160, 0x1deb01, 
        0x1deb10, 0x160, 0x1deb10, 0x160, 0x1deb56, 0x1deb60, 0x160, 0x1deb60, 0x160, 0x1ded6f, 
        0x1ded70, 0x160, 0x1ded70, 0x160, 0x1dedcb, 0x1dedd0, 0x160, 0x1dedd0, 0x160, 0x1dee48, 
        0x1df1f0, 0x160, 0x1df1f0, 0x160, 0x1df1f6, 0x1df200, 0x160, 0x1df200, 0x160, 0x1df2e9, 
        0x1df310, 0x160, 0x1df310, 0x160, 0x1df33a, 0x1df340, 0x160, 0x1df340, 0x160, 0x1df3e7, 
        0x1df3f0, 0x160, 0x1df3f0, 0x160, 0x1df42e, 0x1df430, 0x160, 0x1df430, 0x160, 0x1df465, 
        0x1df5b0, 0x160, 0x1df5b0, 0x160, 0x1df5f4, 0x1df600, 0x160, 0x1df600, 0x160, 0x1df61e, 
        0x1df620, 0x160, 0x1df620, 0x160, 0x1df732, 0x1df740, 0x160, 0x1df740, 0x160, 0x1df786, 
        0x1df790, 0x160, 0x1df790, 0x160, 0x1df7d7, 0x1df820, 0x160, 0x1df820, 0x160, 0x1df859, 
        0x1df860, 0x160, 0x1df860, 0x160, 0x1df86b, 0x1df870, 0x160, 0x1df870, 0x160, 0x1df8b1, 
        0x1df8c0, 0x160, 0x1df8c0, 0x160, 0x1df98c, 0x1df990, 0x160, 0x1df990, 0x160, 0x1df9e1, 
        0x1dfa50, 0x160, 0x1dfa50, 0x160, 0x1dfac5, 0x1dfb30, 0x160, 0x1dfb30, 0x160, 0x1dfb42, 
        0x1dfb50, 0x160, 0x1dfb50, 0x160, 0x1dfc6a, 0x1dfc80, 0x160, 0x1dfc80, 0x160, 0x1dfcae, 
        0x1dfcb0, 0x160, 0x1dfcb0, 0x160, 0x1e002b, 0x1e0030, 0x160, 0x1e0030, 0x160, 0x1e00eb, 
        0x1e00f0, 0x160, 0x1e00f0, 0x160, 0x1e0316, 0x1e0350, 0x160, 0x1e0350, 0x160, 0x1e0366, 
        0x1e0350, 0x160, 0x1e2720, 0x160, 0x1e287c, 0x1e0370, 0x160, 0x1e0370, 0x160, 0x1e0375, 
        0x1e0380, 0x160, 0x1e0380, 0x160, 0x1e038e, 0x1e0380, 0x160, 0x1e3390, 0x160, 0x1e33b5, 
        0x1e0390, 0x160, 0x1e0390, 0x160, 0x1e039e, 0x1e0390, 0x160, 0x1e3370, 0x160, 0x1e3383, 
        0x1e03a0, 0x160, 0x1e03a0, 0x160, 0x1e03a5, 0x1e03c0, 0x160, 0x1e03c0, 0x160, 0x1e043c, 
        0x1e0440, 0x160, 0x1e0440, 0x160, 0x1e04a5, 0x1e0500, 0x160, 0x1e0500, 0x160, 0x1e05d2, 
        0x1e05e0, 0x160, 0x1e05e0, 0x160, 0x1e0689, 0x1e0690, 0x160, 0x1e0690, 0x160, 0x1e0739, 
        0x1e0740, 0x160, 0x1e0740, 0x160, 0x1e075f, 0x1e0760, 0x160, 0x1e0760, 0x160, 0x1e0795, 
        0x1e0800, 0x160, 0x1e0800, 0x160, 0x1e0830, 0x1e0830, 0x160, 0x1e0830, 0x160, 0x1e0895, 
        0x1e0940, 0x160, 0x1e0940, 0x160, 0x1e09ca, 0x1e09d0, 0x160, 0x1e09d0, 0x160, 0x1e0a14, 
        0x1e0a20, 0x160, 0x1e0a20, 0x160, 0x1e0aa7, 0x1e0ab0, 0x160, 0x1e0ab0, 0x160, 0x1e0af4, 
        0x1e0d30, 0x160, 0x1e0d02, 0x160, 0x1e0d22, 0x1e0d30, 0x160, 0x1e0d30, 0x160, 0x1e0d3d, 
        0x1e0d40, 0x160, 0x1e0d40, 0x160, 0x1e0d45, 0x1e0d50, 0x160, 0x1e0d50, 0x160, 0x1e0d55, 
        0x1e0d60, 0x160, 0x1e0d60, 0x160, 0x1e0d65, 0x1e0d70, 0x160, 0x1e0d70, 0x160, 0x1e0d75, 
        0x1e0d80, 0x160, 0x1e0d80, 0x160, 0x1e0d85, 0x1e0dd0, 0x160, 0x1e0dd0, 0x160, 0x1e0dd5, 
        0x1e0e80, 0x160, 0x1e0e80, 0x160, 0x1e0ea3, 0x1e0ec0, 0x160, 0x1e0ec0, 0x160, 0x1e0ef1, 
        0x1e0f00, 0x160, 0x1e0f00, 0x160, 0x1e0f29, 0x1e0f30, 0x160, 0x1e0f30, 0x160, 0x1e0f65, 
        0x1e0f70, 0x160, 0x1e0f70, 0x160, 0x1e0fa2, 0x1e0fb0, 0x160, 0x1e0fb0, 0x160, 0x1e0fe0, 
        0x1e0fe0, 0x160, 0x1e0ea3, 0x160, 0x1e0eb5, 0x1e0fe0, 0x160, 0x1e0fe0, 0x160, 0x1e0fe7, 
        0x1e0fe0, 0x160, 0x1e1000, 0x160, 0x1e1027, 0x1e0ff0, 0x160, 0x1e0ea3, 0x160, 0x1e0eb5, 
        0x1e0ff0, 0x160, 0x1e0ff0, 0x160, 0x1e1027, 0x1e1000, 0x160, 0x1e0ea3, 0x160, 0x1e0eb5, 
        0x1e1000, 0x160, 0x1e1000, 0x160, 0x1e1027, 0x1e1090, 0x160, 0x1e1090, 0x160, 0x1e10d9, 
        0x1e1090, 0x160, 0x1e1113, 0x160, 0x1e114d, 0x1e11d0, 0x160, 0x1e11d0, 0x160, 0x1e1251, 
        0x1e1270, 0x160, 0x1e1270, 0x160, 0x1e12e5, 0x1e1270, 0x160, 0x1e1333, 0x160, 0x1e1338, 
        0x1e1340, 0x160, 0x1e1340, 0x160, 0x1e138e, 0x1e1390, 0x160, 0x1e1390, 0x160, 0x1e13bb, 
        0x1e13c0, 0x160, 0x1e13c0, 0x160, 0x1e1408, 0x1e1410, 0x160, 0x1e1410, 0x160, 0x1e1429, 
        0x1e1440, 0x160, 0x1db860, 0x160, 0x1db874, 0x1e1440, 0x160, 0x1e1440, 0x160, 0x1e1457, 
        0x1e1460, 0x160, 0x1e1460, 0x160, 0x1e14e5, 0x1e14f0, 0x160, 0x1e14f0, 0x160, 0x1e14f4, 
        0x1e1500, 0x160, 0x1e1500, 0x160, 0x1e152b, 0x1e1530, 0x160, 0x1e1530, 0x160, 0x1e1587, 
        0x1e1590, 0x160, 0x1e1590, 0x160, 0x1e15b7, 0x1e15c0, 0x160, 0x1e15c0, 0x160, 0x1e15dd, 
        0x1e15e0, 0x160, 0x1e15e0, 0x160, 0x1e15e6, 0x1e15f0, 0x160, 0x1e15f0, 0x160, 0x1e1610, 
        0x1e1610, 0x160, 0x1e1610, 0x160, 0x1e1857, 0x1e19e0, 0x160, 0x1e19e0, 0x160, 0x1e1b59, 
        0x1e1c00, 0x160, 0x1e1854, 0x160, 0x1e1857, 0x1e1c00, 0x160, 0x1e1c00, 0x160, 0x1e1cd3, 
        0x1e1d00, 0x160, 0x1e1d00, 0x160, 0x1e1e54, 0x1e1d00, 0x160, 0x1e1e55, 0x160, 0x1e1ec8, 
        0x1e1d00, 0x160, 0x1e1f18, 0x160, 0x1e1f36, 0x1e1d00, 0x160, 0x1e2087, 0x160, 0x1e2316, 
        0x1e2350, 0x160, 0x1e2350, 0x160, 0x1e2394, 0x1e23a0, 0x160, 0x1e23a0, 0x160, 0x1e23d4, 
        0x1e2460, 0x160, 0x1e2460, 0x160, 0x1e24a8, 0x1e24b0, 0x160, 0x1e24b0, 0x160, 0x1e24f3, 
        0x1e2500, 0x160, 0x1e2500, 0x160, 0x1e2504, 0x1e2510, 0x160, 0x1e2510, 0x160, 0x1e2554, 
        0x1e2560, 0x160, 0x1e2560, 0x160, 0x1e257c, 0x1e2580, 0x160, 0x1e2580, 0x160, 0x1e259d, 
        0x1e25a0, 0x160, 0x1e25a0, 0x160, 0x1e25c2, 0x1e2600, 0x160, 0x1e2600, 0x160, 0x1e2623, 
        0x1e2690, 0x160, 0x1e2690, 0x160, 0x1e26a3, 0x1e26f0, 0x160, 0x1e26f0, 0x160, 0x1e2712, 
        0x1e3220, 0x160, 0x1e3220, 0x160, 0x1e3317, 0x1e3320, 0x160, 0x1e3320, 0x160, 0x1e3338, 
        0x1e3340, 0x160, 0x1e3340, 0x160, 0x1e3346, 0x1e3350, 0x160, 0x1e3350, 0x160, 0x1e336d, 
        0x1e33c0, 0x160, 0x1e33c0, 0x160, 0x1e343d, 0x1e34e6, 0x160, 0x1e34e6, 0x160, 0x1e3508, 
        0x1e3508, 0x160, 0x1e3508, 0x160, 0x1e3562, 0x1e3562, 0x160, 0x1e3562, 0x160, 0x1e3645, 
        0x1e3645, 0x160, 0x1e3645, 0x160, 0x1e3662, 0x1e3663, 0x160, 0x1e3663, 0x160, 0x1e367b, 
        0x1e367b, 0x160, 0x1e367b, 0x160, 0x1e3691, 0x1e367b, 0x160, 0x1e3977, 0x160, 0x1e3979, 
        0x1e367b, 0x160, 0x1e399c, 0x160, 0x1e39b1, 0x1e3691, 0x160, 0x1e3691, 0x160, 0x1e36e8, 
        0x1e36e8, 0x160, 0x1e36e8, 0x160, 0x1e36ea, 0x1e3760, 0x160, 0x1e3760, 0x160, 0x1e3979, 
        0x1e3760, 0x160, 0x1e399c, 0x160, 0x1e39b1, 0x1e3979, 0x160, 0x1e3979, 0x160, 0x1e39b1, 
        0x1e39c0, 0x160, 0x1e39c0, 0x160, 0x1e39d9, 0x1e39d9, 0x160, 0x1e39d9, 0x160, 0x1e39f4, 
        0x1e39f4, 0x160, 0x1e39f4, 0x160, 0x1e3a16, 0x1e39f4, 0x160, 0x1e3a1b, 0x160, 0x1e3a9c, 
        0x1e39f4, 0x160, 0x1e3aa1, 0x160, 0x1e3ab0, 0x1e39f4, 0x160, 0x1e3ab5, 0x160, 0x1e3b02, 
        0x1e39f4, 0x160, 0x1e3b05, 0x160, 0x1e3b0c, 0x1e3b0d, 0x160, 0x1e3b0d, 0x160, 0x1e3b30, 
        0x1e3b30, 0x160, 0x1e3b30, 0x160, 0x1e3b40, 0x1e3b40, 0x160, 0x1e3b40, 0x160, 0x1e3b5c, 
        0x1e3b5d, 0x160, 0x1e3b5d, 0x160, 0x1e3d26, 0x1e3d27, 0x160, 0x1e3d27, 0x160, 0x1e3d50, 
        0x1e3d50, 0x160, 0x1e3d50, 0x160, 0x1e3d55, 0x1e3d5a, 0x160, 0x1e3d5a, 0x160, 0x1e3d6a, 
        0x1e3d5a, 0x160, 0x1e58fc, 0x160, 0x1e59bb, 0x1e3d6a, 0x160, 0x1e3d6a, 0x160, 0x1e3d93, 
        0x1e3d93, 0x160, 0x1e3d93, 0x160, 0x1e3d97, 0x1e3d97, 0x160, 0x1e3d97, 0x160, 0x1e3dbe, 
        0x1e3dbe, 0x160, 0x1e3dbe, 0x160, 0x1e3ddf, 0x1e3de0, 0x160, 0x1e3de0, 0x160, 0x1e3df8, 
        0x1e3df8, 0x160, 0x1e3df8, 0x160, 0x1e3e56, 0x1e3e56, 0x160, 0x1e3e56, 0x160, 0x1e3f0a, 
        0x1e3f0a, 0x160, 0x1e3f0a, 0x160, 0x1e3f9d, 0x1e3f0a, 0x160, 0x1e3f9e, 0x160, 0x1e3fd1, 
        0x1e3fd2, 0x160, 0x1e3fd2, 0x160, 0x1e3fed, 0x1e3fed, 0x160, 0x1e3fed, 0x160, 0x1e3ff7, 
        0x1e4083, 0x160, 0x1e4083, 0x160, 0x1e40b3, 0x1e40b3, 0x160, 0x1e40b3, 0x160, 0x1e40e2, 
        0x1e40e2, 0x160, 0x1e40e2, 0x160, 0x1e40f7, 0x1e40f7, 0x160, 0x1e40f7, 0x160, 0x1e4103, 
        0x1e4103, 0x160, 0x1e4103, 0x160, 0x1e416c, 0x1e416c, 0x160, 0x1e416c, 0x160, 0x1e41f5, 
        0x1e41f5, 0x160, 0x1e41f5, 0x160, 0x1e4237, 0x1e4237, 0x160, 0x1e4237, 0x160, 0x1e4333, 
        0x1e4340, 0x160, 0x1e4340, 0x160, 0x1e43e1, 0x1e43e1, 0x160, 0x1e43e1, 0x160, 0x1e43f2, 
        0x1e43f2, 0x160, 0x1e43f2, 0x160, 0x1e4477, 0x1e4478, 0x160, 0x1e4478, 0x160, 0x1e44cf, 
        0x1e44d0, 0x160, 0x1e44d0, 0x160, 0x1e4573, 0x1e4578, 0x160, 0x1e4573, 0x160, 0x1e4683, 
        0x1e4683, 0x160, 0x1e4683, 0x160, 0x1e46c2, 0x1e46c2, 0x160, 0x1e46c2, 0x160, 0x1e4720, 
        0x1e46c2, 0x160, 0x1e49b2, 0x160, 0x1e49b8, 0x1e4823, 0x160, 0x1e4823, 0x160, 0x1e4897, 
        0x1e4897, 0x160, 0x1e4897, 0x160, 0x1e48e5, 0x1e48e5, 0x160, 0x1e48e5, 0x160, 0x1e49b7, 
        0x1e49b8, 0x160, 0x1e49af, 0x160, 0x1e49b7, 0x1e49b8, 0x160, 0x1e49b8, 0x160, 0x1e4a67, 
        0x1e4a67, 0x160, 0x1e4a67, 0x160, 0x1e4baa, 0x1e4bab, 0x160, 0x1e4bab, 0x160, 0x1e4c22, 
        0x1e4c22, 0x160, 0x1e4c22, 0x160, 0x1e4c25, 0x1e4c26, 0x160, 0x1e4c26, 0x160, 0x1e4c75, 
        0x1e4c76, 0x160, 0x1e4c76, 0x160, 0x1e4cc1, 0x1e4cc1, 0x160, 0x1e4cc1, 0x160, 0x1e4d10, 
        0x1e4d10, 0x160, 0x1e4d10, 0x160, 0x1e4dcd, 0x1e4dcd, 0x160, 0x1e4dcd, 0x160, 0x1e4eb6, 
        0x1e4eb6, 0x160, 0x1e4eb6, 0x160, 0x1e4eee, 0x1e4eee, 0x160, 0x1e4eee, 0x160, 0x1e4f12, 
        0x1e5294, 0x160, 0x1e5294, 0x160, 0x1e52bc, 0x1e52bc, 0x160, 0x1e52bc, 0x160, 0x1e5343, 
        0x1e535e, 0x160, 0x1e535e, 0x160, 0x1e5383, 0x1e535e, 0x160, 0x1e5388, 0x160, 0x1e53c0, 
        0x1e53cc, 0x160, 0x1e53cc, 0x160, 0x1e53dd, 0x1e53d1, 0x160, 0x1e53d1, 0x160, 0x1e53dd, 
        0x1e53dd, 0x160, 0x1e53d1, 0x160, 0x1e53e4, 0x1e53f4, 0x160, 0x1e53f4, 0x160, 0x1e5400, 
        0x1e5407, 0x160, 0x1e5407, 0x160, 0x1e547e, 0x1e547e, 0x160, 0x1e547e, 0x160, 0x1e549d, 
        0x1e5555, 0x160, 0x1e5555, 0x160, 0x1e5600, 0x1e5600, 0x160, 0x1e5600, 0x160, 0x1e561b, 
        0x1e561c, 0x160, 0x1e561c, 0x160, 0x1e5631, 0x1e561c, 0x160, 0x1e5636, 0x160, 0x1e564c, 
        0x1e564c, 0x160, 0x1e564c, 0x160, 0x1e56e5, 0x1e564c, 0x160, 0x1e56e8, 0x160, 0x1e5717, 
        0x1e5717, 0x160, 0x1e5717, 0x160, 0x1e5734, 0x1e5734, 0x160, 0x1e5734, 0x160, 0x1e5781, 
        0x1e5781, 0x160, 0x1e5781, 0x160, 0x1e57a1, 0x1e5880, 0x160, 0x1e5880, 0x160, 0x1e58b1, 
        0x1e58bb, 0x160, 0x1e58bb, 0x160, 0x1e58fb, 0x1e58fc, 0x160, 0x1e58fc, 0x160, 0x1e59bb, 
        0x1e59bb, 0x160, 0x1e59bb, 0x160, 0x1e59ef, 0x1e59c0, 0x160, 0x1e59c0, 0x160, 0x1e59ef, 
        0x1e59ef, 0x160, 0x1e59ef, 0x160, 0x1e5c10, 0x1e5c10, 0x160, 0x1e5c10, 0x160, 0x1e5ce9, 
        0x1e5ce9, 0x160, 0x1e5ce9, 0x160, 0x1e5d1e, 0x1e5d1e, 0x160, 0x1e5d1e, 0x160, 0x1e5da4, 
        0x1e5da4, 0x160, 0x1e5d9e, 0x160, 0x1e5e92, 0x1e5e92, 0x160, 0x1e5e92, 0x160, 0x1e5ef0, 
        0x1e5ef0, 0x160, 0x1e5ef0, 0x160, 0x1e5f33, 0x1e5f33, 0x160, 0x1e5f33, 0x160, 0x1e6019, 
        0x1e6019, 0x160, 0x1e5d9e, 0x160, 0x1e5da4, 0x1e6019, 0x160, 0x1e6019, 0x160, 0x1e62f7, 
        0x1e62f7, 0x160, 0x1e62f7, 0x160, 0x1e64ef, 0x1e64ef, 0x160, 0x1e64ef, 0x160, 0x1e6516, 
        0x1e6516, 0x160, 0x1e6516, 0x160, 0x1e6539, 0x1e6540, 0x160, 0x1e6540, 0x160, 0x1e6571, 
        0x1e6577, 0x160, 0x1e6577, 0x160, 0x1e65e3, 0x1e65e3, 0x160, 0x1e65e3, 0x160, 0x1e65f1, 
        0x1e6615, 0x160, 0x1e6615, 0x160, 0x1e67da, 0x1e683f, 0x160, 0x1e683f, 0x160, 0x1e68e7, 
        0x1e68e7, 0x160, 0x1e68e7, 0x160, 0x1e6920, 0x1e693e, 0x160, 0x1e693e, 0x160, 0x1e696f, 
        0x1e696f, 0x160, 0x1e696f, 0x160, 0x1e6980, 0x1e6980, 0x160, 0x1e6980, 0x160, 0x1e6986, 
        0x1e6986, 0x160, 0x1e6986, 0x160, 0x1e69c7, 0x1e69c7, 0x160, 0x1e69c7, 0x160, 0x1e69f9, 
        0x1e69f9, 0x160, 0x1e69f9, 0x160, 0x1e69fe, 0x1e69fe, 0x160, 0x1e69fe, 0x160, 0x1e6aa2, 
        0x1e6aa2, 0x160, 0x1e6aa2, 0x160, 0x1e6d23, 0x1e6d23, 0x160, 0x1e6d23, 0x160, 0x1e6e56, 
        0x1e6e56, 0x160, 0x1e6e56, 0x160, 0x1e6eb1, 0x1e6eb1, 0x160, 0x1e6eb1, 0x160, 0x1e6ed5, 
        0x1e6ed5, 0x160, 0x1e6ed0, 0x160, 0x1e6ef8, 0x1e6ef8, 0x160, 0x1e6ef8, 0x160, 0x1e6f59, 
        0x1e6f59, 0x160, 0x1e6f59, 0x160, 0x1e7034, 0x1e7034, 0x160, 0x1e7034, 0x160, 0x1e703b, 
        0x1e703b, 0x160, 0x1e703b, 0x160, 0x1e7484, 0x1e7484, 0x160, 0x1e7484, 0x160, 0x1e749c, 
        0x1e749c, 0x160, 0x1e749c, 0x160, 0x1e7570, 0x1e763f, 0x160, 0x1e7639, 0x160, 0x1e763e, 
        0x1e763f, 0x160, 0x1e763f, 0x160, 0x1e7701, 0x1e7701, 0x160, 0x1e7701, 0x160, 0x1e770a, 
        0x1e770a, 0x160, 0x1e770a, 0x160, 0x1e7715, 0x1e7715, 0x160, 0x1e7715, 0x160, 0x1e771f, 
        0x1e771f, 0x160, 0x1e771f, 0x160, 0x1e77fa, 0x1e77fa, 0x160, 0x1e77fa, 0x160, 0x1e7875, 
        0x1e7875, 0x160, 0x1e7875, 0x160, 0x1e787b, 0x1e787b, 0x160, 0x1e787b, 0x160, 0x1e7881, 
        0x1e788d, 0x160, 0x1e788d, 0x160, 0x1e78f3, 0x1e78f3, 0x160, 0x1e78f3, 0x160, 0x1e7910, 
        0x1eac7e, 0x160, 0x1eac7e, 0x160, 0x1ead47, 0x1eada2, 0x160, 0x1eada2, 0x160, 0x1eadc9, 
        0x1eadc9, 0x160, 0x1eadc9, 0x160, 0x1eae41, 0x1eaea4, 0x160, 0x1eaea4, 0x160, 0x1eaf20, 
        0x1eaf20, 0x160, 0x1eaf20, 0x160, 0x1eaf6c, 0x1eaf6c, 0x160, 0x1eaf6c, 0x160, 0x1eaf8a, 
        0x1eaf8a, 0x160, 0x1eaf8a, 0x160, 0x1eafdf, 0x1eafdf, 0x160, 0x1eafdf, 0x160, 0x1eaff4, 
        0x1eaff4, 0x160, 0x1eaff4, 0x160, 0x1eb013, 0x1eb038, 0x160, 0x1eb038, 0x160, 0x1eb082, 
        0x1eb082, 0x160, 0x1eb082, 0x160, 0x1eb09d, 0x1eb0c2, 0x160, 0x1eb0c2, 0x160, 0x1eb10a, 
        0x1eb10b, 0x160, 0x1eb10b, 0x160, 0x1eb126, 0x1eb126, 0x160, 0x1eb126, 0x160, 0x1eb134, 
        0x1eb13a, 0x160, 0x1eb13a, 0x160, 0x1eb182, 0x1eb182, 0x160, 0x1eb182, 0x160, 0x1eb1b1, 
        0x1eb6fe, 0x160, 0x1eb6fe, 0x160, 0x1eb71b, 0x1eb71b, 0x160, 0x1eb71b, 0x160, 0x1eb746, 
        0x1eb74b, 0x160, 0x1eb74b, 0x160, 0x1eb76a, 0x1eb76a, 0x160, 0x1eb76a, 0x160, 0x1eb7eb, 
        0x1ebce6, 0x160, 0x1ebce6, 0x160, 0x1ebcfa, 0x1ebce6, 0x160, 0x1ebd00, 0x160, 0x1ebd08, 
        0x1ebce6, 0x160, 0x1ebd09, 0x160, 0x1ebd0c,     };

    for (int i=0; i<sizeof(map)/sizeof(map[0]); i+=5)
        if (seg * 16 + ofs >= map[i+1]*16 + map[i+2] && seg * 16 + ofs < map[i+3]*16 + map[i+4])
            return map[i];
    return 0;
}

diff --git a/wormsfull.clean b/wormsfull.cpp
index f8684cb..cb2c655 100644
--- a/wormsfull.clean
+++ b/wormsfull.cpp
@@ -7332,7 +7332,7 @@ loc_19c147: // 0160:19c147
     ebx = 0x0039e670;
     eax = 0;
     memoryASet32(ds, 0x1e36f8, ebx);
-    sub_1a593a();
+    //sub_1a593a(); // GABO CHECK!
     ebx = 0x00000046;
     edx = 0;
 loc_19c176: // 0160:19c176
@@ -7346,6 +7346,7 @@ loc_19c176: // 0160:19c176
 loc_19c197: // 0160:19c197
     eax = memoryAGet32(ds, 0x3a1f04);
 loc_19c19c: // 0160:19c19c
+    memoryASet32(ds, 0x3aa13c, memoryAGet32(ds, 0x3aa13c)+2);
     sync();
     if (eax == memoryAGet32(ds, 0x3aa13c))
         goto loc_19c19c;
@@ -19462,6 +19463,15 @@ loc_1a593a: // 0160:1a593a
     memoryASet32(ds, 0x1e3708, edx);
     memoryASet32(ds, 0x1e3700, eax);
 loc_1a594c: // 0160:1a594c
+    {
+        static int c=0;
+        if (++c%20 == 0)
+        {
+            memoryASet32(ds, 0x1e36fc, (memoryAGet32(ds, 0x1e36fc)+5)&255);
+            memoryASet32(ds, 0x3aa13c, memoryAGet32(ds, 0x3aa13c)+1);
+            sync();
+        }
+    }
     eax = memoryAGet32(ds, 0x1e36fc);
     if (eax == memoryAGet32(ds, 0x1e3700))
         goto loc_1a57b8;
@@ -52568,6 +52578,7 @@ loc_1be1a9: // 0160:1be1a9
 }
 void sub_1bf310() // 0160:1bf310 +long
 {
+    return; // gabo check
     esp -= 4;
     push32(ebx);
     push32(ecx);
@@ -59381,7 +59392,7 @@ loc_1c4351: // 0160:1c4351
     edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
     ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
     esp = ebp; ebp = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1c4354() // 0160:1c4354 +long
@@ -64798,7 +64809,7 @@ loc_1c8481: // 0160:1c8481
     edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
     ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
     esp = ebp; ebp = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1c84e8() // 0160:1c84e8 +long
@@ -65309,7 +65320,7 @@ loc_1c8c80: // 0160:1c8c80
     edi = pop32(); esi = pop32(); ebp = pop32(); esp += 4; 
     ebx = pop32(); edx = pop32(); ecx = pop32(); eax = pop32();
     esp = ebp; ebp = pop32();
-    stop("stack_unbalanced");
+//    stop("stack_unbalanced");
     esp += 4;
 }
 void sub_1c8c83() // 0160:1c8c83 +long
@@ -75705,7 +75716,14 @@ void sub_1cee02() // 0160:1cee02 +long +returnCarry
     esi = memoryAGet32(ds, edi + 16);
     edi = memoryAGet32(ds, edi + 20);
     ds = ebp;
-    stop("stack_unbalanced");
+    switch (memoryAGet16(cs, pop32()))
+    {
+        case 0x31cd: interrupt(0x31); break;
+        case 0x33cd: interrupt(0x33); break;
+        case 0x10cd: interrupt(0x10); break;
+        default:
+            assert(0);
+    }
     esp += 4;
 }
 void sub_1cf1cd() // 0160:1cf1cd +long
@@ -75838,6 +75856,7 @@ loc_1cf2da: // 0160:1cf2da
 }
 void sub_1cf2db() // 0160:1cf2db +long
 {
+    return; // gabo check
     esp -= 4;
     push32(0x000000b4);
     sub_1d3388();
